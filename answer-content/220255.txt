<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing I tried is to convert my inner step function to C and then to move from DispatchGroup to concurrentPerform.  Neither had any effect and I was still getting about 28 steps per second.</p>

<p>I then created a new C struct that contains all the data needed to perform the calculation and created an array of these objects; one for each "iteration".  Finally, this gave me a significant speed boost.  The code looks like this:</p>

<p>Ionian.h</p>

<pre><code>#import "Aegean.h"

typedef struct Automata {
    Recipe* recipe;
    Memory* memory;
    int w;
    byte sI;
    byte aI;
    byte bI;
    byte cI;
    byte dI;
    byte eI;
    byte fI;
    byte gI;
    byte hI;
    byte rI;
} Automata;

Automata* AXAutomataCreate(Recipe* recipe, Memory* memory, int w, byte sI, byte aI, byte bI, byte cI, byte dI, byte eI, byte fI, byte gI, byte hI, byte rI);
Automata* AXAutomataCreateClone(Automata* automata);
void AXAutomataRelease(Automata* automata);
void AXAutomataStep(Automata* automata, double* cells, double* next, int from, int to);
</code></pre>

<p>Ionian.c</p>

<pre><code>#include &lt;stdlib.h&gt;
#include "Ionian.h"

Automata* AXAutomataCreate(Recipe* recipe, Memory* memory, int w, byte sI, byte aI, byte bI, byte cI, byte dI, byte eI, byte fI, byte gI, byte hI, byte rI) {
    Automata* automata = (Automata*)malloc(sizeof(Automata));
    automata-&gt;recipe = AERecipeCreateClone(recipe);
    automata-&gt;memory = AEMemoryCreateClone(memory);
    automata-&gt;w = w;
    automata-&gt;sI = sI;
    automata-&gt;aI = aI;
    automata-&gt;bI = bI;
    automata-&gt;cI = cI;
    automata-&gt;dI = dI;
    automata-&gt;eI = eI;
    automata-&gt;fI = fI;
    automata-&gt;gI = gI;
    automata-&gt;hI = hI;
    automata-&gt;rI = rI;
    return automata;
}
Automata* AXAutomataCreateClone(Automata* automata) {
    Automata* clone = (Automata*)malloc(sizeof(Automata));
    clone-&gt;recipe = AERecipeCreateClone(automata-&gt;recipe);
    clone-&gt;memory = AEMemoryCreateClone(automata-&gt;memory);
    clone-&gt;w = automata-&gt;w;
    clone-&gt;sI = automata-&gt;sI;
    clone-&gt;aI = automata-&gt;aI;
    clone-&gt;bI = automata-&gt;bI;
    clone-&gt;cI = automata-&gt;cI;
    clone-&gt;dI = automata-&gt;dI;
    clone-&gt;eI = automata-&gt;eI;
    clone-&gt;fI = automata-&gt;fI;
    clone-&gt;gI = automata-&gt;gI;
    clone-&gt;hI = automata-&gt;hI;
    clone-&gt;rI = automata-&gt;rI;
    return clone;
}
void AXAutomataRelease(Automata* automata) {
    if (automata == 0) return;
    AERecipeRelease(automata-&gt;recipe);
    AEMemoryRelease(automata-&gt;memory);
    free(automata);
}

void AXAutomataStep(Automata* a, double* cells, double* next, int from, int to) {
    for (int j = from; j &lt; to; j++) {
        for (int i = 0; i &lt; a-&gt;w; i++) {

            AEMemoryClear(a-&gt;memory);

            AEMemorySetValue(a-&gt;memory, a-&gt;sI,                              cells[i   + (j  )*a-&gt;w]);
            AEMemorySetValue(a-&gt;memory, a-&gt;aI, i != 0 &amp;&amp; j != 0 ?           cells[i-1 + (j-1)*a-&gt;w] : 0);
            AEMemorySetValue(a-&gt;memory, a-&gt;bI, j != 0 ?                     cells[i   + (j-1)*a-&gt;w] : 0);
            AEMemorySetValue(a-&gt;memory, a-&gt;cI, i != a-&gt;w-1 &amp;&amp; j != 0 ?      cells[i+1 + (j-1)*a-&gt;w] : 0);
            AEMemorySetValue(a-&gt;memory, a-&gt;dI, i != a-&gt;w-1 ?                cells[i+1 + (j  )*a-&gt;w] : 0);
            AEMemorySetValue(a-&gt;memory, a-&gt;eI, i != a-&gt;w-1 &amp;&amp; j != a-&gt;w-1 ? cells[i+1 + (j+1)*a-&gt;w] : 0);
            AEMemorySetValue(a-&gt;memory, a-&gt;fI, j != a-&gt;w-1 ?                cells[i   + (j+1)*a-&gt;w] : 0);
            AEMemorySetValue(a-&gt;memory, a-&gt;gI, i != 0 &amp;&amp; j != a-&gt;w-1 ?      cells[i-1 + (j+1)*a-&gt;w] : 0);
            AEMemorySetValue(a-&gt;memory, a-&gt;hI, i != 0 ?                     cells[i-1 + (j  )*a-&gt;w] : 0);

            AERecipeExecute(a-&gt;recipe, a-&gt;memory);

            next[i + j*a-&gt;w] = a-&gt;memory-&gt;slots[a-&gt;rI].obj.a.x;
        }
    }
}
</code></pre>

<p>And the Swift code:</p>

<pre><code>func compile(aether: Aether) {

    //...

    let automata = AXAutomataCreate(recipe, memory, Int32(w), sI, aI, bI, cI, dI, eI, fI, gI, hI, byte(index));
    for _ in 0..&lt;iterations {
        automatas.append(AXAutomataCreateClone(automata))
    }
    AXAutomataRelease(automata)
}
func step() {
    let start = DispatchTime.now()
    let stride: Int = h/iterations

    DispatchQueue.global(qos: .userInitiated).async {

        DispatchQueue.concurrentPerform(iterations: self.iterations, execute: { (i: Int) in
            AXAutomataStep(self.automatas[i], self.cells, self.next, Int32(i*stride), Int32(i == self.strides-1 ? self.h : (i+1)*stride))
        })

        (self.cells, self.next) = (self.next, self.cells)

        let end = DispatchTime.now()
        let delta = Double(end.uptimeNanoseconds - start.uptimeNanoseconds)/1000000000
        let target: Double = 1.0/60
        print("Time to calculate: \(delta) or \(round(1/delta)) SPS which is \(round(delta/target*100*10)/10)% of target; # of cells: \(self.w)^2 = \(self.w*self.h); seconds per cell: \(delta/Double(self.w*self.w))")
    }
}
</code></pre>

<p>I obtained the following results on my 3rd gen iPad Pro:</p>

<pre><code>Iterations      Steps per Second
  1              27
  2              50
  3              76
  4              54-60
  5              60-72
  6              53-74
 10              47-76
 99              65-81
999              27
</code></pre>

<p>On my current device, breaking the work into 3 parts gets me a consistent 76 sps, which gets me beyond my goal of 60 sps on a 503x503 grid = 253,009 cells.</p>

<p>Although, I'm still a bit mystified about the various results of the various iteration numbers.</p>
    </div>