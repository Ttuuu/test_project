<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my understanding of what you are doing:</p>

<ul>
<li>you have some matrices stored in files using your own 'naive' format.</li>
<li>you read these into your <code>matrix</code> structures</li>
<li>two of these matrices are then passed to <code>multiply()</code></li>
<li>you convert one of the matrices into a Compressed Row Storage</li>
<li>and the other into a Compressed Column Storage</li>
<li>you then extract the matrices from these compressed forms into arrays of
values, one for rows and one for columns</li>
<li>and finally you multiply them.</li>
</ul>

<p>I find that complicated!</p>

<ul>
<li>Why not store the matrices directly in compressed format?</li>
<li>Or convert your naive format into the extracted form without the CSC/CSR stage?</li>
<li>Why use <strong>both</strong> CSR and CSC?   They are both methods of compressing a matrix but
they do the same job. I can see no point in using both.</li>
</ul>

<p>With these defects, there is not much point in reviewing the code in detail,
but here are some general points:</p>

<ul>
<li>include the right headers and don't cast the return from <code>malloc</code></li>
<li><p>know that <code>calloc</code> gives you a zeroed array </p></li>
<li><p>use <code>const</code> where possible on function parameters (eg row/column in
<code>compute</code>, X/Y in <code>multiply</code>)</p></li>
<li><p>use <code>static</code> where possible for functions</p></li>
<li><p><code>compute</code> and <code>multiply</code> are badly named</p></li>
<li><p>improve your naming in general.  You have four structures all containing
fields named <code>row</code> and <code>column</code>.  I'm sure at least two of these contain the
<strong>number</strong> of rows/columns (eg. <code>n_rows</code>).  And your <code>tuple</code> lists are
called <code>row</code> and <code>column</code>.  It all becomes very confusing.</p></li>
<li><p>pass by reference is better for structures.</p></li>
<li><p>your <code>multiply</code> does a lot more than just multiply the matrices.  It first
compresses the input matrices and then expands the compressed matrices.
These steps belong elsewhere (if they belong anywhere).  Your first two big
for-loops shoud be separate functions.  The nested-for in each might well
belong in a separate function too (difficult to tell, but nested loops are
often better split).  And the free-loops should also be separate functions.  By splitting a big function into several smaller ones (with appropriate names), you make the code easier to read and test.</p></li>
</ul>

<p>Sorry to be negative.</p>
    </div>