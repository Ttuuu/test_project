<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Definitely agree with <strong>dfhwze</strong>'s suggestion above. A few other minor points to consider:</p>

<ol>
<li>Define <code>TokenRefreshCoolDownPeriod</code> as a <code>TimeSpan</code> since that is what it represents. This simplifies the stopwatch comparison slightly and improves readability.</li>
</ol>

<pre><code>private static readonly TimeSpan TokenRefreshCoolDownPeriod = TimeSpan.FromHours(1);

// ...

var expired = StopWatch.Elapsed &gt; TokenRefreshCoolDownPeriod;
</code></pre>

<ol start="2">
<li>The <code>if (retryIndex &gt; 0)</code> statement in your <code>catch</code> block will always match on the second attempt. This is not currently a problem because you're only attempting a maximum of two times, but may introduce a subtle bug if you later decide to increase the maximum retry count. Consider defining a <code>MaxAttemptCount</code> field and using it in the <code>for</code> loop and <code>if</code> statement instead, e.g.</li>
</ol>

<pre><code>private const int MaxAttemptCount = 2;

// ...

// Note indexing starts from 1 now, i.e. the first attempt is attempt #1, and the
// final iteration will be when the attempt number equals the maximum defined above.
for (int attemptNumber = 1; attemptNumber &lt;= MaxAttemptCount; attemptNumber++)
{
    // Only force the token refresh on attempts after the first.
    var tokenRes = await GetLoginToken(attemptNumber &gt; 1);

    // ...

    try
    {
        // ...
    }
    catch (ApiException exc)
    {
        Logger.LogError(exc, $"{context} error, attempt number = {attemptNumber}");

        // If this is the last attempt, return the error.
        if (attemptNumber == MaxAttemptCount)
            return new ValidationResult&lt;TRes&gt; { IsError = true, Message = exc.Message }; 
    }
}
</code></pre>
    </div>