<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The comment</p>

<pre><code>        // It will be very bad idea to touch e-&gt;key or e-&gt;hash here. Treat "key" as being read-only.
        // Caller should not hold the pointer to the entry over hashtable_add/remove/dispose calls.
</code></pre>

<p>suggests that <code>hashtable_get</code> should return the value, rather than the entry pointer. The caller already knows the key, there is no point returning it.</p>

<p>In fact, I don't see a legitimate reason for a client to know the entry pointer at all. Consider <code>hashtable_get_and_remove()</code> and <code>hashtable_put_or_replace()</code> interfaces instead.</p>

<hr>

<p>I am not sure I like the idea of partitioning the <code>hashtable.h</code> file by <code>HASHTABLE_DEFINITION</code> and <code>HASHTABLE_IMPLEMENTATION</code> macros. A change in the lower portion of the file will still cause recompilation of the client code, even though it is absolutely irrelevant. Besides, with this organization the client must pay a special attention to <code>#define HASHTABLE_IMPLEMENTATION</code> exactly once ad only once. Consider moving the implementation part into a separate <code>hashtable_impl.c</code></p>

<hr>

<p>Do not throw away what has been computed. <code>find</code> returns <code>null</code> even though it has found an insertion point. Should it return the insertion point instead, you could use this information in <code>put</code>.</p>

<hr>

<p>It is usually a good idea to let the client pick another hash function, which would suite their dataset better. A cost of an indirect function call would be offset by smaller number of collisions.</p>
    </div>