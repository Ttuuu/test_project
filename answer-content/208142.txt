<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The test for <code>if(changeType === 'no-change') {</code> is redundant and not needed as it will fall through if the other tests fail and return <code>null</code> anyways.</p>

<p>You could also break the statement up returning the result as needed and falling through if they fail for <code>null</code>.</p>

<pre><code>const getArrowDirection = (dir, type) =&gt; {
    if (type === "positive") {
        if (dir === "increasing") { return "up-arrow" }
        if (dir === "decreasing") { return "down-arrow" }
    }else if (type === "negative") {
        if (dir === "increasing") { return "down-arrow" }
        if (dir === "decreasing") { return "up-arrow" }
    }
    return null;
}
</code></pre>

<p>Assuming that you have given all possible values you can make assumptions and reduce the code further </p>

<pre><code>const getArrowDirection = (dir, type) =&gt; {
    if (type !== 'no-change') {
        if (type === "positive") { return dir === "increasing" ? "up-arrow" : "down-arrow" }
        return dir === "increasing" ? "down-arrow" : "up-arrow";
    }
    return null; // returning null is not the best. Returning undefined would
                 // be better and would not need this line
}
</code></pre>

<p>You can use an object as a lookup using the combined strings.</p>

<pre><code>const getArrowDirection = (() =&gt; {
    const directions = {
        positiveincreasing: "up-arrow",
        negativedecreasing: "up-arrow",
        positivedecreasing: "down-arrow",
        negativeincreasing: "down-arrow",
    };
    return (dir, type) =&gt; directions[type + dir] ? directions[type + dir] : null;
})();
</code></pre>
    </div>