<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should strongly consider @Erich's advice and define datatypes but it is possible to write quick and dirty queris without them.</p>

<pre><code>{-# LANGUAGE OverloadedStrings #-}                                                                    
{-# LANGUAGE QuasiQuotes #-}

import Data.Text (Text)
import Data.Aeson (Value, Result(..), decode, withObject, (.:))
import Data.Aeson.Types (parse)
import Data.Aeson.QQ.Simple
import Control.Monad ((&gt;=&gt;))


testVal :: Value
testVal = [aesonQQ|
  {"items": [
    {"entity": {"uuid": "needed-value1"}},
    {"entity": {"uuid": "needed-value2"}}
  ]}
|]

getUuids :: Value -&gt; Result [Text]
getUuids = parse $ withObject ""
  $ (.: "items") &gt;=&gt; mapM ((.: "entity") &gt;=&gt; (.: "uuid"))


main :: IO ()
main = do
  print $ getUuids testVal
  print $ getUuids &lt;$&gt; decode "{}"
  print $ getUuids &lt;$&gt; decode "{"
</code></pre>

<p>Another option is to use <a href="https://hackage.haskell.org/package/lens-aeson" rel="nofollow noreferrer">lens-aeson</a> package:</p>

<pre><code>import Control.Lens
import Data.Aeson.Lens (values, key, _String)

-- [...]

main :: IO ()
main = print
  $ testVal ^.. key "items" . values . key "entity" . key "uuid" . _String
</code></pre>
    </div>