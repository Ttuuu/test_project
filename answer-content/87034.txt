<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One major improvement would be to just use what is supplied through .NET:</p>

<pre><code>Convert.ToString(int, 2);
</code></pre>

<p>where <code>int</code> is your supplied argument.</p>

<p><a href="https://msdn.microsoft.com/en-us/library/14kwkz77(v=vs.110).aspx" rel="noreferrer">Convert.ToString Method (Int32, Int32)</a></p>

<blockquote>
  <p>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</p>
</blockquote>

<p>Note that this returns you a string value like <code>10000110100001</code>, which is the representation of a binary number. In your code you store them as string representations and in separate entries in your collection, which is not the way a number should be stored. It's like creating an array with values "1" and "2" to represent the number 12.</p>

<p>If this is your intention then you can always work towards that of course but it might be an indication that something else is wrong for needing it like that.</p>

<hr>

<p>However if you want to stay with your own implementation, there are a few things you could change around:</p>

<pre><code>public List&lt;string&gt; Conversion2(int x)
{
   var bitConversion = new List&lt;string&gt;();
   while (x &gt;= 0)
   {
       if (x == 0)
       {
           bitConversion.Add("0");
           break;
       }
       bitConversion.Add((x % 2).ToString(CultureInfo.InvariantCulture));
       x /=  2;
   }
  bitConversion.Reverse();
  return bitConversion;
}
</code></pre>

<ul>
<li>Remove the unnecessary <code>result</code> variable</li>
<li>Contract <code>x = x / 2</code> to <code>x /= 2</code> (compound assignment operator)</li>
</ul>
    </div>