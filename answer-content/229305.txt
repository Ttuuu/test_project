<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I disagree on you with the need for a wrapper around the stdlib argparse, but that's a matter of taste. And I don't see anything wrong with your implementation of the rather thin wrapper.</p>

<h1>Classmethod as Constructor</h1>

<p>This is NOT what you're doing. A constructor creates an instance in a way somehow different from the standard and returns it. An example:</p>

<pre class="lang-py prettyprint-override"><code>class Thing:
    def __init__(self, arg1, arg2)
        self.var1 = arg1
        self.var2 = arg2

    @classmethod
    def from_other_thing(cls, other_thing)
        return cls(other_thing.somevar, other_thing.othervar)
</code></pre>

<h1>Your usecase</h1>

<p>What you're doing is creating a class method that creates an instance to do work, then returning the results of that work. I'd like to emphasize that this is a perfectly valid usecase. However, your classmethod is also just about doing what you made the rest of your wrapper class for. You can easily cut down on the amount of new methods like this:</p>

<pre class="lang-py prettyprint-override"><code>class myArgparser(argparse.ArgumentParser):
    """ Your perfectly fine docstring """

    @classmethod
    def get_args(
        cls,
        description=None,
        version=None,
        optional_args=None,
        required_args=None,
        flags=None,
    ):
        """Your other perfectly fine docstring"""
        optional_args = optional_args if optional_args is not None else []
        required_args = required_args if required_args is not None else []
        flags = flags if flags is not None else []

        argparser = cls(description)
        if version is not None:
            argparser.add_argument("--version", action="version", version=version)
        for arg in optional_args:
            argparser.add_argument(*arg, action="store")
        for arg in required_args:
            argparser.add_argument(*arg, action="store", required=True)
        for flag in flags:
            argparser.add_argument(*flag, action="store_true")
        return argparser.parse_args()

</code></pre>

<p>I reduced the whitespace a bit - to many newlines make reading harder. I've also changed the get_args argument to do the work you had spread over all the other 1-line functions - if a function is 1 line and used in just 1 place, then you don't really need a function for it. That's premature optimization.</p>

<h3>Mutable Default Arguments</h3>

<p><a href="https://docs.python-guide.org/writing/gotchas/" rel="nofollow noreferrer">Don't use mutable defaults.</a> Instead, use None and create empty lists, or change the default to an empty tuple, which is safe. I've gone for the first option, but as far as I can tell the empty tuple version would be perfectly fine as well.</p>
    </div>