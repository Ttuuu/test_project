<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The data structure</h1>
<p><code>List&lt;T&gt;</code> is great most of the time. What it is not great at, is this:</p>
<blockquote>
<pre><code>public bool Contains(T item)
{
    return m_ListContainer.Contains(item);
}
</code></pre>
</blockquote>
<p>Which unfortunately is an important operation for a set.</p>
<p>There are different ways to set up a set that maintains insertion order that have different trade offs. For example:</p>
<ul>
<li>A hash set (for <code>contains</code> queries, and to avoid inserting duplicates) plus a <code>List&lt;T&gt;</code> (just to remember the insertion order). Removing an item still requires searching in/removing from the list, so remove stays linear time. Adding items and indexing are constant time. Iterating over the data in insertion order is fast. <code>IndexOf</code> stays slow.</li>
<li>The <code>LinkedHashSet</code>: it's based on a hash set, but every item also acts as node in a doubly-linked list which remembers the insertion order. Using a doubly-linked list here enables constant time removal of arbitary items. However, indexing takes linear time this way, and maybe shouldn't even be offered. An iterator that yields the items in insertion order can certainly be offered. <code>IndexOf</code> stays slow.</li>
<li>A <code>Dictionary&lt;T, int&gt;</code>, where the <code>int</code> indicates the current index of the corresponding key. Good for <code>Add</code> and <code>Contains</code> and even <code>IndexOf</code>, but <code>Remove</code> has to decrement the indexes of all the items that come after the removed item, indexing is slow, and even iterating in the proper order is slow.</li>
<li>A <code>Dictionary&lt;T, int&gt;</code> plus an other <code>Dictionary&lt;int, T&gt;</code> (or list), based on the previous data structure, but also with a "reverse dictionary". <code>Add</code>, <code>Contains</code> and <code>IndexOf</code> stay fast, <code>Remove</code> stays slow (gets slower practically, now there are two dictionaries to fix up), but now indexing and iterating in order become efficient (at a significant cost in size).</li>
</ul>
<h1>Set operations, algorithm</h1>
<p>Starting off with a copy and then conditionally removing from it works, but since the items are being removed from a <code>List&lt;T&gt;</code>, that's a O(n m) algorithm (for sets of sizes n and m). One there is a set implementation that has a constant time <code>Contains</code>, the quadratic time is avoidable by switching the logic around to: start with an empty list/set, add an item if it should be in the result.</p>
<h1>Set operations, interface</h1>
<p>The set operations take an <code>IEnumerable&lt;T&gt;</code> and then sometimes cast it with <code>((ISet&lt;T&gt;)set2)</code>. That's not nice, you can pass something to those methods that isn't an <code>ISet&lt;T&gt;</code>, reasonably expect it to work, and then it fails at runtime.</p>
<p>There are two good solutions, either make it work without the cast, or change the type of parameter so the cast is unnecessary. For example <code>Disjoint</code> could easily work by iterating over the <code>IEnumerable&lt;T&gt;</code> and calling <code>Contains</code> on <code>this</code>, then it doesn't matter whether the second set is an <code>ISet&lt;T&gt;</code> or maybe just a <code>T[]</code>.</p>
<p>Returning <code>IEnumerable&lt;T&gt;</code> is strange because it limits how the operations can be "chained". For example that makes it impossible to do <code>a.Complement(b).Union(b.Complement(a))</code>, which would be a way to implement the symmetric difference, which the <code>ISet&lt;T&gt;</code> interface does not offer.</p>
<h1>Redundant <code>ToArray</code></h1>
<blockquote>
<pre><code>new List&lt;T&gt;(m_ListContainer.ToArray())
</code></pre>
</blockquote>
<p>There is no need for <code>ToArray</code>, a copy of the list is made either way but that temporary array does not need to exist.</p>
<blockquote>
<pre><code>public IEnumerable&lt;T&gt; Union(IEnumerable&lt;T&gt; set2)
{
    IEnumerable&lt;T&gt; unionList = m_ListContainer.ToArray();
    List&lt;T&gt; list = new List&lt;T&gt;(unionList);
    list.AddRange(set2);
    return list.ToArray();
}
</code></pre>
</blockquote>
<p>Neither of these <code>ToArray</code> calls are necessary. <code>new List&lt;T&gt;(m_ListContainer)</code> would do the trick, and the resulting <code>list</code> itself can be returned.</p>
<p>Interestingly, <code>Clone()</code> could have been implemented equivalently with <code>ToArray</code>, though it is unexpected that <code>Clone</code> returns something so different than the cloned-from object.</p>
    </div>