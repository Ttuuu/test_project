<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>API</h2>

<ul>
<li>In <code>HugeInt(long long int)</code>, there's no need for the <code>const</code>. In the function declaration it is ignored, at least by the GNU C++ compiler.</li>
<li>Instead of <code>isZero</code>, I prefer to write <code>== 0</code>. I'd rather implement two <code>==</code> operators that compare <code>HugeInt, long long int</code> and vice versa.</li>
<li>Same for <code>isNegative</code>, I'd write that as <code>&lt; 0</code>.</li>
<li>I'd also write <code>huge_int % 100</code> instead of calling <code>huge_int.shortModulo(100)</code>, as the former is much shorter.</li>
<li>Same for the other mathematical operators.</li>
<li>Instead of spelling out every digit of 4294967296, why don't you just write <code>uint64_t(1) &lt;&lt; 32</code>? That would make the comment redundant.</li>
<li>I'd rename <code>twoPow32</code> to <code>base</code> or <code>radix</code>.</li>
<li>The name <code>radixComplementSelf</code> sounds like a bloated description for <code>negate</code>. It should probably be renamed to the latter.</li>
</ul>

<h2>Implementation</h2>

<ul>
<li><code>validate_digits</code> should rather be called <code>is_all_digits</code> since it doesn't validate anything, it just tests without rejecting.</li>
<li>In <code>validate_digits</code>, the <code>retval</code> variable can be removed if you just <code>return</code> from within the loop.</li>
<li>Still in <code>validate_digits</code>, what answer do you expect for the empty string, true or false?</li>
<li>In <code>get_carry32</code> the <code>&amp; 0xffffffff</code> is unnecessary since <code>uint32_t</code> is an <em>exact-width</em> integer type.</li>
<li>Same for <code>get_digit32</code>.</li>
<li>In <code>get_digit32</code>, the comment "two-byte word" probably refers to the old version that had <code>uint8_t</code> as its underlying type.</li>
<li>Is there a particular reason for using <code>x == 0LL</code> instead of the simpler <code>x == 0</code>? For integer literals I find the latter easier to read, but of course your tools for static analysis may disagree.</li>
<li><code>std::llabs(x)</code> looks a lot like it would invoke undefined behavior for <code>LLONG_MIN</code>.</li>
<li>In the <code>const char *</code> constructor, <code>len</code> should be of type <code>std::size_t</code> instead of <code>int</code>.</li>
<li>Still in the <code>const char *</code> constructor, the value of <code>uint32_t digitValue{0}</code> is unused. This variable should be moved inside the <code>for</code> loop, to make its scope as small as possible.</li>
<li>Still in the <code>const char *</code> constructor, I think it's more efficient to process the digits from left to right, using <a href="https://en.wikipedia.org/wiki/Horner%27s_method" rel="noreferrer">Horner's method</a>. This could save you both of the temporary <code>HugeInt</code> variables. It certainly feels strange to have two variables of the same type that you are currently constructing, as if there were some hidden recursion.</li>
<li>In the copy constructor, I wouldn't call the parameter <code>rhs</code> since there is no corresponding <code>lhs</code> variable anywhere nearby.</li>
<li>In the <code>operator=</code>, I would leave out the <code>&amp;rhs == this</code> test. It's unlikely that a variable gets assigned to itself.</li>
<li>In <code>operator long double</code>, you should add the missing spaces in the <code>retval*sign</code> expression. The rest looks simple and fine.</li>
<li>Instead of defining <code>operator+=</code> in terms of <code>operator+</code>, the more efficient variant is the other way round: first implement <code>operator+=</code> as a basic operation and then define <code>operator+</code> using <code>+=</code>. It typically saves a few variable assignments and memory allocations.</li>
<li>I wonder whether you should really implement <code>operator++(int)</code> and <code>operator--(int)</code>. I don't think they are needed often. I'd wait until I really need them, just out of curiosity.</li>
<li>In <code>operator--</code> you should rather call <code>operator-=</code> instead of <code>operator-</code>, since that will be more efficient after you rewrote the code.</li>
<li>Instead of the currently unused <code>HugeInt::toRawString</code> I'd rather provide <code>HugeInt::toHexString</code> since that can be implemented easier and doesn't need any padding. Did you find any use for the current <code>toRawString</code>?</li>
<li>In <code>toDecimalString</code>, in the case of zero there is no need to allocate an <code>std::ostringstream</code>. You can just write: <code>if (isZero()) return "0";</code>.</li>
<li>Still in <code>toDecimalString</code>, the variable name <code>tmp</code> is always bad. Temporary, sure, but temporary <em>what</em>?</li>
<li>In <code>getMinimum</code> and <code>getMaximum</code>, you should rather write <code>uint32_t(1) &lt;&lt; 31</code> instead of spelling out the digits. It's simpler to read.</li>
<li>The comment above <code>operator!=</code> contains exactly zero useful characters. It should be removed, and the other comments as well.</li>
<li>In <code>isZero</code>, it's a waste of time that you have to iterate through all the 300 digits just to check if any of them is nonzero. It would be far more efficient to have a <code>size_t len</code> field in the <code>HugeInt</code>. Then you would only need to check whether <code>len &lt;= 1 &amp;&amp; digits[0] == 0</code>.</li>
<li>In <code>shortModulo</code>, in addition to the "WARNING: assumes" comment, you should also add assertions to the code: <code>assert(divisor &gt; 0)</code> and <code>assert(*this &gt;= 0)</code>.</li>
</ul>

<h2>Test</h2>

<p>In addition to the <code>main</code> function with an interactive test session, you should have lots of automatic unit tests that cover all normal and edge cases. Having these tests and running them regularly provides a safety net for all kinds of refactorings.</p>

<h2>Performance</h2>

<p>Calculating the factorial of 1000 and printing it should be possible in less than a millisecond. For example, the following quickly-written Kotlin code runs in 5 seconds on my machine, which means 0.5 milliseconds per iteration:</p>

<pre><code>class BigIntTest {
    @Test
    fun name() {
        fun fac(n: Int): BigInteger {
            var fac = BigInteger.valueOf(1)
            for (i in 1..n) {
                fac *= BigInteger.valueOf(i.toLong())
            }
            return fac
        }

        for (i in 1..10000)
            fac(1000).toString()
    }
}
</code></pre>

<p>A similar Go program is even faster, it needs only 0.137 milliseconds per iteration:</p>

<pre class="lang-golang prettyprint-override"><code>package main

import (
    "math/big"
    "testing"
)

func fac(n int) *big.Int {
    fac := big.NewInt(1)
    for i := 1; i &lt;= n; i++ {
        fac.Mul(fac, big.NewInt(int64(i)))
    }
    return fac
}

var result string

func Benchmark(b *testing.B) {
    for i := 0; i &lt; b.N; i++ {
        result = fac(1000).String()
    }
}
</code></pre>

<p>Your code should become similarly fast.</p>
    </div>