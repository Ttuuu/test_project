<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is an overdone refactoring that I did. It just shows how the code could be modularized, but it is a bit too heavy-duty for a small example.</p>

<pre><code>using System;

namespace OldEnoughToDrive
{
    /// &lt;summary&gt;
    /// A container to hold attributes of a person
    /// &lt;/summary&gt;
    internal class Person
    {
        public const int LegalAge = 18;
        public string FirstName;
        public string MiddleName;
        public string LastName;
        public int Age;

        public override string ToString()
        {
            return $"FIRST NAME: {FirstName}\n"
                + $"MIDDLE NAME: {MiddleName}\n"
                + $"LAST NAME: {LastName}\n"
                + $"AGE: {Age}";
        }
        public int GetYearsLeftToDrive()
        {
            return LegalAge - Age;
        }
    }

    internal class UserInput
    {
        /// &lt;summary&gt;
        /// Gets a string from the user
        /// &lt;/summary&gt;
        /// &lt;returns&gt;The user's input&lt;/returns&gt;
        public static string String(string prompt)
        {
            Console.WriteLine(prompt);
            return Console.ReadLine();
        }

        /// &lt;summary&gt;
        /// Gets a natural number from the user
        /// &lt;/summary&gt;
        /// &lt;param name="errorMsg"&gt;Error message to show if the prompt is not a natural number&lt;/param&gt;
        /// &lt;returns&gt;A natural number from the user's input&lt;/returns&gt;
        public static int NaturalNumber(string prompt, string errorMsg)
        {
            Console.WriteLine(prompt);
            var userResponse = Console.ReadLine();
            int actualInt;
            while (!int.TryParse(userResponse, out actualInt) || actualInt &lt;= 0)
            {
                Console.WriteLine(errorMsg);
                userResponse = Console.ReadLine();
            }

            return actualInt;
        }

        /// &lt;summary&gt;
        /// Gets a boolean from the user
        /// &lt;/summary&gt;
        /// &lt;param name="errorMsg"&gt;Error message to show if the input is not valid&lt;/param&gt;
        /// &lt;returns&gt;The boolean that the user entered&lt;/returns&gt;
        public static bool Boolean(string prompt, string errorMsg)
        {
            Console.WriteLine(prompt);
            while (true)
            {
                string input = Console.ReadLine()?.ToLower();
                switch (input)
                {
                    case "y":
                    case "yes":
                        return true;
                    case "n":
                    case "no":
                        return false;
                    default:
                        Console.WriteLine(errorMsg);
                        break;
                }
            }
        }
    }

    internal class Program
    {
        private static void Main()
        {
            Console.WriteLine("This is just a simple project that takes simple and small information " +
                "from you and uses it to process the information and checks whether you're allowed to " +
                "drive or not. It also tells you how long is left till you drive.");

            while (true)
            {
                var person = GetPersonInput();

                if (ConfirmInformation(person))
                {
                    PrintLicenseStatus(person);
                }
                else
                {
                    Console.WriteLine("Reinitializing questions.");
                }
            }
        }

        /// &lt;summary&gt;
        /// Prints the status of the license for this person (what type of license they can hope
        /// for, or if they do not have one)
        /// &lt;/summary&gt;
        /// &lt;param name="person"&gt;The person to check&lt;/param&gt;
        private static void PrintLicenseStatus(Person person)
        {
            if (person.Age &gt;= 18)
            {
                Console.WriteLine("Congratulations! You're already old enough to drive.");
            }
            else if (person.Age == 17)
            {
                Console.WriteLine("You're almost there! You can get a learners permit.");
                Console.WriteLine("You have 1 more year left to get an official drivers license!");
            }
            else
            {
                Console.WriteLine("You'll get there. You're not old enough to have a license.");
                Console.WriteLine($"You still have {person.GetYearsLeftToDrive()} years left to " +
                                  "get a license.");
            }
        }

        /// &lt;summary&gt;
        /// Builds a Person class via prompting the user for their personal information
        /// &lt;/summary&gt;
        /// &lt;returns&gt;A filled-in valid person object&lt;/returns&gt;
        private static Person GetPersonInput()
        {
            var firstName = UserInput.String("Enter your first name");
            var middleName = UserInput.String("Enter your middle name");
            var lastName = UserInput.String("Enter your last name");
            var age = UserInput.NaturalNumber("Enter your age", "ERROR: Input AGE is invalid!");
            return new Person
            {
                FirstName = firstName,
                MiddleName = middleName,
                LastName = lastName,
                Age = age
            };
        }

        /// &lt;summary&gt;
        /// Confirms the user's information by printing it to the screen
        /// &lt;/summary&gt;
        /// &lt;param name="person"&gt;The person's information&lt;/param&gt;
        /// &lt;returns&gt;Whether the user has confirmed their information is valid&lt;/returns&gt;
        private static bool ConfirmInformation(Person person)
        {
            Console.WriteLine(
                new string('=', 38)
                + "\nINFORMATION CHECK:\n"
                + person
                + "\n"
                + new string('=', 38)
            );

            return UserInput.Boolean("Are all those information correct? (Y/N)",
                                       "ERROR: Input must be either YES or NO.");
        }
    }
}
</code></pre>

<p>What I did was to refactor the app into a few components. The app is focused around getting a <code>Person</code>'s information from some <code>UserInput</code>, and those <code>UserInput</code>'s were validated and then the user's information was <code>Confirmed</code>. I took those concepts and extracted them into classes and methods.</p>

<p>The validation methods were generalized to be used throughout the app if they need to be used again.</p>
    </div>