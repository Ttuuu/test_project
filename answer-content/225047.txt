<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Your SQL seems the generally accepted way (<a href="https://stackoverflow.com/questions/18390574/how-to-delete-duplicate-rows-in-sql-server/38938704">Discussed Before</a>) of deleting duplicates.</p>

<blockquote>
<pre><code>WITH cte 
     AS (SELECT id, 
                student_code, 
                exam_code, 
                mark, 
                Row_number() 
                  OVER( 
                    partition BY id, student_code, exam_code, mark 
                    ORDER BY student_code) AS rn 
         FROM   exam_merge) 
DELETE cte 
WHERE  rn &gt; 1
</code></pre>
</blockquote>

<h2>Optimization</h2>

<p>I found a possible optimization using a non-clustered index. You would like to create a (non-unique) index on your key (id) with the other columns included.</p>

<pre><code>CREATE NONCLUSTERED INDEX idx_exam_merge ON exam_merge
(id) 
INCLUDE (student_code, exam_code, mark);
</code></pre>

<p><a href="https://www.sqlshack.com/sql-server-non-clustered-indexes-with-included-columns/" rel="nofollow noreferrer">This example</a> shows how such index could optimize the query plan to avoid clustered index lookup.</p>
    </div>