<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>Case Is = "CheckBox"
</code></pre>
</blockquote>

<p>That syntax is very weird and unusual, surprising even.</p>

<p>This would be more common, and simpler:</p>

<pre><code>Case "Recordset"
</code></pre>

<p><code>TypeName</code> makes a <em>stringly-typed</em> check, which is bug-prone. You <em>say</em> you're not going to use it with any ActiveX controls, but can you be sure no one in the future will ever try to do that? <code>ADODB.Recordset</code> isn't an ActiveX control - neither is <code>DAO.Recordset</code>. So you've already started using it for more than controls.</p>

<p>Consider using the much more robust <code>TypeOf {object} Is {type}</code> approach instead - because of how <code>TypeOf</code> expressions work, you'll have to put the condition in each <code>Case</code> statement for it to work:</p>

<pre><code>Select Case True
    Case TypeOf ObjectToTest Is ADODB.Recordset
        'we have an ADODB.Recordset instance

    Case TypeOf ObjectToTest Is DAO.Recordset
        'we have a DAO.Recordset instance

    '...
End Select
</code></pre>

<p>I don't do much MS-Access, but if "form controls" in Access are anything like Excel's, then the <code>Case</code> blocks for these would look like:</p>

<pre><code>    Case TypeOf ObjectToTest Is Access.Label
        '...
</code></pre>

<p>That way you can handle this case separately when the time comes:</p>

<pre><code>    Case TypeOf ObjectToTest Is MSForms.Label
        '...
</code></pre>

<hr>

<p><code>HasNoValue</code> isn't instinctive, or desirable. Consider the client code that checks whether a control <em>has</em> a value:</p>

<pre><code>If Not HasNoValue(SomeControl) Then
</code></pre>

<p>Avoid double-negatives wherever possible. So, invert the whole logic, so that the client code doesn't have them no matter what:</p>

<pre><code>If HasValue(SomeControl) Then
</code></pre>

<p>Or</p>

<pre><code>If Not HasValue(SomeControl) Then
</code></pre>

<p>Much cleaner.</p>

<hr>

<blockquote>
<pre><code>If ObjectToTest Is Nothing Then
    noVal = True
</code></pre>
</blockquote>

<p>You're hiding a bug here: if client code passes a null object reference (aka <code>Nothing</code>), you <em>want</em> to blow up right there and then - not pretend you were given a control that "has no value": you're misleading the client code into believing everything is fine &amp; well, when there's a serious problem going on. Best fail fast and hard than make the bug even harder to track down by ignoring invalid state.</p>

<p>This would be my guard clause:</p>

<pre><code>If ObjectToTest Is Nothing Then Err.Raise 91, , "ObjectToTest cannot be a null reference."
</code></pre>

<p>Given invalid input, scream - don't push the bug further down the call stack.</p>
    </div>