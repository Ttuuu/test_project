<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code alignment.</h2>
<p>I still think this style of indentation is poor. It is particularly ill suited to large code bases where you have literally hundreds of thousands of lines of code to maintain.</p>
<p>Its about reading the code and our inherently lazy brain. You scroll through the code looking for a problem scanning the lines and then you have code way to the right. Its not good.</p>
<p>I would write it as</p>
<pre><code>function findMaxNumberOfConsecOnes(dec) {
    const countConsec = (ac, x) =&gt; [
        ac[0] &lt; ac[1] ? ac[1] : ac[0], // or Math.max(...ac)
        x === "1" ? ac[1] + 1 : 0
    ];

    return [...(dec &gt;&gt;&gt; 0).toString(2)]
        .reduce(countConsec, [0, 0])[0]; // Returning number rather than array
}
</code></pre>
<p><strike>Note that I added  () around the comma separated group and then the second ternary. Not because it is needed, but when you are checking code the IDE will highlight matching braces (I have mine set to bright bold red) saving time and effort when looking for typos in compound expressions..</strike></p>
<h2>Bug?</h2>
<p>The functional solutions return differently (an array) from the imperative solution (a number). My guess is you forgot to extract the max from the array.</p>
<h2>Number V String</h2>
<p>Numbers always win.</p>
<p>I assume by the <code>&gt;&gt;&gt; 0</code> you are expecting negative values and that the MSB (most significant bit) the sign bit, is counted.</p>
<p>Strings are always the slowest way to deal with numbers. You do get an automatic reduction in the number of bits to count as <code>toString(2)</code> drops the leading zeros so it has one handy benefit.</p>
<h3>Comparing your solutions</h3>
<p>In terms of performance the imperative solution is the quickest at around 20% faster than the other two (tested on a random set of signed int32). This is almost a given as functional sacrifices performance in hope of less bugs.</p>
<h3>Using numbers only</h3>
<p>By avoiding the use of strings you avoid the memory allocation overhead and the slow string compare tests.</p>
<p>The following example is up to an order of magnitude faster than your imperative solution and can also avoid stepping over the leading bits of negative values.</p>
<ul>
<li><code>size = Math.log2(Math.abs(num)) + 1 | 0</code> get the number of bits to count</li>
<li><code>const leading = num &lt; 0 ? 32 - size : 0</code> If negative gets the number of leading bits</li>
<li><code>return Math.max(count + leading, max)</code> add any leading bits to the count and check for max</li>
</ul>
<p>The rest is straight forward.</p>
<pre><code>function countBitSeq(num) {
    var max = 0, count = 0, size;
    size = Math.log2(Math.abs(num)) + 1 | 0;
    const leading = num &lt; 0 ? 32 - size : 0;
    while (size --) {
        max = Math.max((num &amp; 1 ? ++count : count = 0), max);
        num &gt;&gt;= 1;
    }
    return Math.max(count + leading, max);
}
</code></pre>
    </div>