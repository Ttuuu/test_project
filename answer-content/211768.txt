<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is not bad at all, and I like the new ASCII art.  Here are some ideas on how to improve it further:</p>

<h2>Don't confuse the reader</h2>

<p>By grouping things together in an <code>enum</code> it's true that it eliminates "magic numbers" but it also tends to mislead the reader into thinking that these items are related.  In this case, there are really three independent constants whose only relation is that they are all used in this game.  I'd use <code>const</code> for this and use the appropriate types for each, since <code>ALPHABET_SIZE</code> should probably be <code>size_t</code>, <code>HIDDEN_LETTER</code> a <code>char</code>, etc.</p>

<h2>Consider reworking the interface</h2>

<p>Right now, there is not much separation of concerns.  The <code>main</code> program knows everything about every piece of the program.  That works, but it might be nicer to separate things a little more.  I'd rename <code>config.h</code> to <code>dictionary.h</code> and have a function named <code>get_random_word</code>:  </p>

<pre><code>const char *get_random_word() {
    static const char *words[] = {"racing", "magic", "bow", "racecar"};
    static const size_t word_count = sizeof(words)/sizeof(words[0]);
    return words[rng_to(word_count)];
}
</code></pre>

<p>That eliminates the need for <code>main</code> to have the macro, and removes the need for it to know anything about the random number generation code.</p>

<h2>Consider different data structures</h2>

<p>The code relies on a number of related data structures, <code>letters</code>, <code>words</code> and <code>word_to_guess</code>.  I would alter their use a bit.  First, I'd hide <code>words</code> completely, as shown above.  Right now, the actual underlying alphabet is implicit rather than explicit.  It assumes that the alphabet consists of <code>ALPHABET_SIZE</code> contiguous characters beginning from <code>'a'</code>.  This works for English and an ASCII encoding, but not for EBCDIC encodings and not for other languages such as Spanish, French or German.  Instead, I'd suggest that there could be an explicit <code>alphabet</code> string associated with the previously mentioned <code>dictionary.h</code>.  It could be <code>const</code>.  Second, one could employ a <code>bool</code> array of the same length to keep track of which letters of the alphabet had been guessed.  This would then be the only data structure that would need to be modified during game play. </p>

<h2>An example</h2>

<p>If we isolate dictionary things to the dictionary, it might look like this:</p>

<pre><code>const char *dict_init () {
    static const char *alphabet = "abcdefghijklmnopqrstuvwxyz";
    rng_init();
    return alphabet;
}

const char *get_random_word() {
    static const char *words[] = {"racing", "magic", "bow", "racecar"};
    static const size_t word_count = sizeof(words)/sizeof(words[0]);
    return words[rng_to(word_count)];
}
</code></pre>

<p>Now from within <code>main</code> we might have this:</p>

<pre><code>int main() {
    const char *alphabet = dict_init();
    bool *guessed = calloc(strlen(alphabet), sizeof(bool));
    int tries = 10;
    const char *word = get_random_word();
    size_t word_len = strlen(word);
    bool playing = true;

    while (playing) {
        display_word(word, word_len, alphabet, guessed);
        fputs("\nPick a letter: ", stdout);
        int chosen_letter;
        for (chosen_letter = tolower(getchar()); isspace(chosen_letter); chosen_letter = tolower(getchar())) 
        { }
        if (chosen_letter == EOF) {
            playing = false;
            continue;
        }
        const char *target = strchr(alphabet, chosen_letter);
        if (target == NULL) {
            puts("Please enter a valid letter.");
            continue;
        }
        if (guessed[target - alphabet]) {
            puts("Please pick a different letter");
            continue;
        }
        guessed[target - alphabet] = true;
        // is this letter in the word to be guessed?
        if (strchr(word, *target) != NULL) {
            if (display_word(word, word_len, alphabet, guessed)) {
                printf("\nTries Remaining: %d\n", tries);
            } else {
                puts("-&gt; YOU WIN!");
                playing = false;
            }
        } else {  // guessed letter not in target word
            playing = print_hangman(--tries);
        }
    }
    free(guessed);
}
</code></pre>

<p>Note that I've used <code>strchr</code> to see if the character is within the alphabet.  I've also modified your <code>print_hangman</code> to return true if there are guesses left and added this function:</p>

<pre><code>size_t display_word(const char *word, const size_t word_len, const char *alphabet, const bool *guessed) {
    size_t hidden = word_len;
    for (size_t i=0; i &lt; word_len; ++i) {
        bool revealed = guessed[strchr(alphabet, word[i]) - alphabet];
        if (revealed) {
            putchar(word[i]);
            --hidden;
        } else {
            putchar('_');
        }
        putchar(' ');
    }
    return hidden;
}
</code></pre>

<p>It's not terribly efficient in terms of runtime performance, but it doesn't matter much since it will be fast enough for a human player.</p>
    </div>