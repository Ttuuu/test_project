<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Distance?</h3>
<p>In your bidirectional search you have the concepts of distance and cost, but nowhere do you actually insert any distance values to your unordered maps, except to initialize each endpoint with distance zero.  Therefore, you will always retrieve a zero distance from <code>distance_a</code> and <code>distance_b</code>, either because you asked for the distance to the endpoint, or because you asked for the distance to any other node, which will not exist in the map (and you will get back <code>NULL</code> which is casted to a zero distance).</p>
<p>There are a couple of lines that are different than the others, but I think you made a copy paste error:</p>
<blockquote>
<pre><code>   dist_a = (size_t) unordered_map_get(parents_a, current_node);
   dist_b = (size_t) unordered_map_get(parents_b, current_node);
</code></pre>
</blockquote>
<p>Here, you have the wrong maps.  These maps should be <code>distance_a</code> and <code>distance_b</code> instead of <code>parents_a</code> and <code>parents_b</code>.  Otherwise the distances you get back will be pointer values (i.e. random addresses) rather than distance values.</p>
<p>Your function still works because it will return the shortest path (by number of edges), simply because a breadth first search naturally does that.  But you should either remove all the distance code if the graph is unweighted, or fix up the distance code if the graph is weighted.</p>
<h3>Another copy paste error</h3>
<p>I also think that this line is a copy paste error:</p>
<blockquote>
<pre><code>    dist_b = (size_t) unordered_map_get(distance_a, queue_front(queue_b));
</code></pre>
</blockquote>
<p>I think <code>distance_a</code> should be <code>distance_b</code> here.</p>
<h3>Memory leaks</h3>
<p>None of the queues and maps that you allocate are ever freed, thus causing memory leaks.</p>
<h3>size_t vs pointer</h3>
<p>Your unordered maps use <code>void *</code> as the type of the value stored but you often cast the result of a <code>get()</code> to a <code>size_t</code>.  <a href="https://stackoverflow.com/questions/1464174/size-t-vs-uintptr-t">According to this</a>, <code>size_t</code> could be larger or smaller than a pointer, which could lead to truncation of values.</p>
    </div>