<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Function signatures</h2>

<p>This:</p>

<pre><code>def combine(implicant_a, implicant_b):
    str_a, nums_a = implicant_a
    str_b, nums_b = implicant_b
</code></pre>

<p>should go in one of two directions:</p>

<ul>
<li>Unpack the arguments themselves, i.e. <code>def combine(str_a, nums_a, str_b, nums_b)</code>; or</li>
<li>Make some kind of named tuple:</li>
</ul>

<pre><code>def combine(implicant_a, implicant_b):
    # Refer to implicant_a.str and implicant_a.nums
</code></pre>

<p>This <code>combine</code> function also has a problematic return type - mixed boolean-or-combined-implicant. Returning <code>False</code> on failure is a C-ism. In Python, the saner thing to do is raise an exception, and then catch it (or not) in the calling code.</p>

<h2>Do not shadow built-ins</h2>

<pre><code>def iter(implicants):
</code></pre>

<p>should have a different name, because <code>iter</code> is already a thing.</p>

<h2>Specific exceptions</h2>

<pre><code>raise Exception()
</code></pre>

<p>is going to make it effectively impossible to meaningfully catch this exception and distinguish it from others. You should use a narrower built-in at least (perhaps <code>ValueError</code>), or more likely define your own exception. This can be done in two lines and makes the job of the caller much easier.</p>

<h2>Tests</h2>

<p>You have tests; that's good! You should actually apply <code>assert</code>s to them so that they can be quickly run as a sanity check.</p>
    </div>