<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, you can simplify the implementation of your algorithm by introducing the notion of <em>direction</em>, like you find in mathematics…</p>

<p>In Djanbi game, a token can move in <a href="https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Djambi_moves.svg/1280px-Djambi_moves.svg.png" rel="nofollow noreferrer">8 directions</a>. You can define a vector <em>d(d_x, d_y)</em> which defines this notion of direction:</p>

<ol>
<li>North: d = (0, 1),</li>
<li>East: d = (1, 0),</li>
<li>South: d = (0, -1),</li>
<li>West: d = (-1, 0),</li>
<li>North-East: d = (1, 1),</li>
<li>South-East: d = (1, -1),</li>
<li>North-West: d = (-1, 1),</li>
<li>South-West: d = (-1, -1).</li>
</ol>

<p>First you can define the <code>Point</code> tuple to simplify coding:</p>

<pre><code>import collections

Point = collections.namedtuple('Point', 'x y')
</code></pre>

<p>Then, you can use this named tuple to construct all possible directions:</p>

<pre><code>import itertools

directions = [
    Point(*coord) for coord in itertools.product([-1, 0, 1], [-1, 0, 1])
]
directions.remove(Point(0, 0))
</code></pre>

<p>You get:</p>

<pre><code>[Point(x=-1, y=-1), Point(x=-1, y=0), Point(x=-1, y=1), Point(x=0, y=-1), Point(x=0, y=1), Point(x=1, y=-1), Point(x=1, y=0), Point(x=1, y=1)]
</code></pre>

<p>For each direction, you can search for the possible moves. But before you need to calculate the next position of a token in a given direction. You can use a simple generator for that:</p>

<pre><code>def next_pos(p, d):
    p0 = p
    while 0 &lt;= p.x &lt; 9 and 0 &lt;= p.y &lt; 9:
        if p != p0:
            yield Point(p.x, p.y)
        p = Point(p.x + d.x, p.y + d.y)
</code></pre>

<p>Then you can loop as follow:</p>

<pre><code># coordinates of the position of the chip
chip = Point(2, 4)

for direction in directions:
    print('In the direction: {0}'.format(direction))
    for pos in next_pos(chip, direction):
        ...
</code></pre>

<p>Here, <em>pos</em> is a <code>Point</code> instance that you can use to check if a position is valid…</p>
    </div>