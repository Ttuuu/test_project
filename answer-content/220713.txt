<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few people mentioned that your implementation is inefficient. To emphasise just <em>how</em> inefficient it is, try calculating <code>recur_fibonacci(35)</code>, and then <code>recur_fibonacci(40)</code>:</p>

<p>On my computer, the former takes about a second, while the latter takes almost a minute. <code>recur_fibonacci(41)</code> will take more than twice as long.</p>

<p>However, contrary to what some people think <strong>recursion is not the problem here</strong>. Rather, the problem is algorithmic: For every Fibonacci number you calculate, you first calculate <em>all</em> previous Fibonacci numbers, and you do this again for each previous number, without remembering intermediate results.</p>

<p>This can be fixed by maintaining a “memory” of previous results — a process called <em>memoisation</em>. However, an alternative way of calculating Fibonacci numbers doesn’t require memoisation, and instead calculates a pair of adjacent Fibonacci numbers, rather than a single Fibonacci number. By doing this, the function never needs to re-calculate previous terms, it only need to calculate each pair once. This makes the algorithm’s runtime linear.</p>

<pre class="lang-py prettyprint-override"><code>def fib_pair(n):
    if n &lt; 1: return (0, 1)
    a, b = fib_pair(n - 1)
    return (b, a + b)


def fib(n):
    return fib_pair(n)[0]
</code></pre>

<p>This runs in microseconds even for large <code>n</code> (although it will at some point overflow the stack).</p>

<p>You might be reluctant to write two functions since you probably never actually need a <em>pair</em> of Fibonacci numbers. A trick is to store this pair as function arguments instead of the return value:<sup>1</sup></p>

<pre class="lang-py prettyprint-override"><code>def fib2(n, current = 0, next = 1):
    if n == 0: return current
    return fib2(n - 1, next, current + next)
</code></pre>

<hr>

<p><sup>1</sup> A nice side-effect of this is that it results in a tail recursive function, which is a desirable property in recursive functions because it is isomorphic to iteration (to the point that some computer scientists call this type of recursion “iteration”), and can be trivially transformed, either via trampolines or by optimising compilers (Python implementations don’t currently do this).</p>
    </div>