<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your Python code looks good, but your solution can be slow for large values. You can compute the sum of multiples in O(1). We can first observe there are <code>floor(limit / num)</code> terms that are divisible by <code>num</code> and smaller then <code>limit</code>. Finally we can calculate the result using the Gauss sum formula.</p>

<pre><code>def sum_multiples(num, limit):
  no_of_multiples = (limit - 1) // num
  return no_of_multiples * (no_of_multiples + 1) / 2 * num
</code></pre>

<p>For your example <code>sum_multiples(3, 10)</code>, the <code>no_of_multiples</code> will be 3 (those are 3, 6, 9) and we can express their sum as:</p>

<pre><code>3 + 6 + 9 = 3 * (1 + 2 + 3) = 3 * ((3 * 4) / 2) 
</code></pre>

<p>You can get the running time under Linux by using the <code>time</code> utility, writing in your terminal <code>time python3 script.py</code> for example.</p>
    </div>