<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You state <em>"The syntax is not the real focus..."</em> but I can not ignore style and syntax because they are the most important parts of any good code.</p>
<h2>Style</h2>
<ul>
<li><p>More use of <code>const</code>. For example the line <code>var x = 100 * gridx;</code> should be <code>const x = 100 * gridx</code>;</p>
</li>
<li><p>Use property shorthand when creating objects. For example defining the object literal <code>{ x: x, y: y }</code> can be shorthanded with <code>{x, y}</code></p>
</li>
<li><p>Use the JavaScript layout conventions.</p>
<ul>
<li>Spaces  <code>if(</code> as <code>if (</code>, also <code>if () {</code>, <code>} else {</code></li>
<li>No space  <code>if ( foo</code> as <code>if (foo</code> and at start and end of object <code>{x: foo, y: bar}</code></li>
<li><code>else</code> on same line as closing <code>}</code> eg <code>} else {</code></li>
</ul>
</li>
<li><p>Use camelCase consistently. e.g. <code>pageconstants</code> to <code>pageConstants</code> and <code>gridItems</code>, <code>gridX</code>, <code>pageNum</code>, <code>subjectY</code> and so on. If you mix them you end up always having to look up the variable as humans do not include the capitalization in the mnemonic,</p>
</li>
<li><p>Be consistent in the style you use. E.g. you sometimes don't use semicolons to end a line and other times you do. Either do or do not. Spend some time investigating semicolon use to know the pros and cons.</p>
</li>
<li><p>Nested object and array opening lines are more readable if opened on the same line. e.g. <code>foo(\n\t{\n\t\tbar: 0,\n\t}\n);\n</code> as <code>foo({\n\tbar: 0,\n});\n</code> (CodeReview clarity is escape chars <code>\n</code> newline <code>\t</code> tag)</p>
</li>
</ul>
<h2>Code and logic</h2>
<p>As pointed out in the answer Joseph you can use remainder to reduce the logic.</p>
<p>On top of that the need to floor the values can use a bitwise operation to reduce the verbosity of <code>const foo = Math.floor(bar / width)</code> to <code>const foo = bar / width | 0;</code> converts the result into a signed 32 bit integer. Note that you should only use this to floor values if <code>foo</code> is a positive and less than <code>2**31 - 1</code>. Example <code>2**31 - 1 | 0 === 2147483647</code> while <code>2**31 | 0 1== 2147483648</code>, it is in fact <code>-2147483648</code></p>
<p>Rather than define the rows and columns of page items. It may be preferable to define the width and height of page items and then calculate the rows and columns from them. See example.</p>
<p>You have the property <code>autoFirstPage</code> as <code>false</code> in the doc. Yet the code does not consider this when it creates pages. If you change this value then you will end up with an empty page. Add some logic to determine if the first page needs to be created.</p>
<p>The same is true for the <code>layout</code> of the PDF (I am not sure if the doc swaps width and height if not <code>portrait</code> and guessing that they are not swapped in the example.</p>
<p>You are generating x and y coordinates but it is unclear if they are relative to the page, or relative to some centering construct and thus relative to a top left coordinate. In the example I have added a top left to the calculations that will auto center the grid coordinates. In effect the coordinates are relative to the page top left corner.</p>
<p>Your code is obviously not the code you use, so I don't know if you have it as part of a function, or it is actually flat code in the global names space. If it is flat global code it should be wrapped in a function to encapsulate it, or use modules. See example of IIF to encapsulate the scope.</p>
<h2>Example</h2>
<p>The example is somewhat longer than your original, however is is more flexible and less prone to layout error if the document setup is changed.</p>
<p>Note...</p>
<ol>
<li><p>that I freeze the objects created for layout. I have come to consider this as standard practice as it forces better object encapsulation code, and prevents object state mutation. It is a bit wordy but if you use it you can add an alias to the global space.</p>
</li>
<li><p>that the function <code>layout.grid.indexPos</code> takes a second optional argument <code>pos</code> that defaults to an empty <code>object</code>. This is a general optimization and lets you reuse objects rather than create and deference an object every call. This technique (called pre allocation) can significantly reduce the memory management overhead. IE if you had a 1000 items, that is 999 less allocations and GC cleanups needed to process them all.</p>
</li>
<li><p>I have made some name changes <code>doc</code> to <code>PDF</code> and <code>pageconstants</code> to <code>layout</code> and <code>x</code>, <code>y</code> for grid size to <code>rows</code> and <code>cols</code> (cols is columns using the common abbreviation)</p>
</li>
<li><p>the line <code>addGridItem(doc, {...pos.coord}, items[i++]);</code> may be written without the need to copy the object <code>pos.coord</code>. If the function <code>addGridItems</code> makes a copy of the object or transfers the properties then use <code>addGridItem(doc, pos.coord, items[i++]);</code></p>
</li>
</ol>
<p>The code</p>
<pre><code>;(() =&gt; {  // to encapsulate the scope away from the global scope.
    "use strict";
    
    const PDF = new PDFDocument( {
        layout : 'portrait',
        width: 612,
        height: 792,
        autoFirstPage: false,
    });

    const gridItems = [];
    const AUTO_CENTER_GRID_ITEMS = true;
    const ITEM_WIDTH = 120;
    const ITEM_HEIGHT = 200;
    const PAGE_WIDTH = PDF.layout === 'portrait' ? PDF.width : PDF.height;
    const PAGE_HEIGHT = PDF.layout === 'portrait' ? PDF.height : PDF.width;

    const layout = Object.freeze({
        grid: Object.freeze({
            cols: PAGE_WIDTH / ITEM_WIDTH | 0,
            rows: PAGE_HEIGHT / ITEM_HEIGHT | 0,
            left: (PAGE_WIDTH - (PAGE_WIDTH / ITEM_WIDTH | 0) * ITEM_WIDTH) / 2,
            top:  (PAGE_HEIGHT - (PAGE_HEIGHT / ITEM_HEIGHT | 0) * ITEM_HEIGHT) / 2,           
            indexPos(idx, pos = {}) {
                const grid = layout.grid;
                const c = pos.coord = pos.coord ? pos.coord : {};
                const col = idx % grid.cols;
                const row = idx / grid.cols | 0;
                pos.page = row / grid.rows | 0;                   
                c.x = col * ITEM_WIDTH;
                c.y = (row % grid.rows) * ITEM_HEIGHT;
                pos.newPage = !c.x &amp;&amp; !c.y;
                if (AUTO_CENTER_GRID_ITEMS) {
                    c.x += grid.left;
                    c.y += grid.top;
                }
                return pos;
            },
        }),
    });

    function addGridedItems(doc, items) {
        const autoP = doc.autoFirstPage;
        var i = 0, pos;
        while (i &lt; items.length) {
            pos = layout.grid.indexPos(i, pos);
            if (pos.newPage &amp;&amp; (!autoP || (autoP &amp;&amp; pos.page))) { createNewPage(doc) }
            addGridItem(doc, {...pos.coord}, items[i++]); 
        }
    }
    
    addGridItems(PDF, gridItems);
})();
</code></pre>
    </div>