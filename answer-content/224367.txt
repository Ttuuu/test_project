<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid string addition</h2>

<p>String addition is not good for building up strings from many pieces inside of loops.  You should use <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/StringBuilder.html" rel="nofollow noreferrer"><code>StringBuilder</code></a> instead.</p>

<pre><code>StringBuilder sb = new StringBuilder();

// ... omitted ...

        sb.append(arr[j]).append(',').append(arr[j]).append(' ');

// ... omitted ...

String s = sb.toString();
System.out.println(s);
</code></pre>

<h2>Avoid square-roots</h2>

<p>Checking <span class="math-container">\$\sqrt x == y\$</span> is ... dangerous.</p>

<ul>
<li>The results of the square-root are a float-point number, and may not exactly equal your integer value.</li>
<li>If you have a negative number in your list, <code>Math.sqrt()</code> will raise an exception, yet <code>{ -5, 25 }</code> is a valid pair.</li>
</ul>

<p>Testing <code>x == y*y</code> is safer, as long as there is no danger of <code>y*y</code> overflowing.</p>

<h2>Avoid repeated calculations</h2>

<pre><code>for(int i =0; i &lt; arr.length;i++) {
    for(int j = 0;j &lt; arr.length;j++) {
        if(Math.sqrt(arr[i]) == arr[j]) {
            ...
</code></pre>

<p>In the inner-loop, <code>i</code> is constant.  Yet you are computing <code>Math.sqrt(arr[i])</code> every time through the loop.  The value should not be changing, so you could compute it once, outside of the inner loop.</p>

<pre><code>for(int i =0; i &lt; arr.length;i++) {
    double sqrt_arr_i = Math.sqrt(arr[i]);
    for(int j = 0;j &lt; arr.length;j++) {
        if(sqrt_arr_i == arr[j]) {
            ...
</code></pre>

<h2>Pairs need distinct indices</h2>

<p>If your input contains a single <code>0</code> or <code>1</code>, it will mistakenly report that it has found a pair, since <code>0 == 0*0</code> and <code>1 == 1*1</code>.  You can protect against this by adding <code>i != j &amp;&amp;</code> to your test.</p>

<p>If the input contains two <code>0</code>'s (or two <code>1</code>'s), your algorithm will emit 4 pairs: <code>[first,first], [first,second], [second,first], and [second,second]</code>.  Adding the <code>i != j</code> guard will eliminate the first and last of those pairs, but it will still declare two pairs: <code>[first,second], [second,first]</code> since <code>first² = second</code> and <code>first = second²</code> would both be true.  You'd have to weight in on whether this would be two distinct pairs or not.</p>

<h2>Formatting</h2>

<p>Consistent and liberal use of white space is always recommended.  Add white space after every semicolon inside of <code>for(...)</code>, on both sides of operators (<code>i = 0</code> not <code>i =0</code>), and after every comma in <code>{5,25,3,25,4,2,25}</code>.</p>

<hr>

<p>With the above recommendations, your function body would become:</p>

<pre><code>int arr[] = { 5, 25, 3, 25, 4, 2, 25 };
StringBuilder sb = new StringBuilder();

for(int i = 0; i &lt; arr.length; i++)
{
    for(int j = 0; j &lt; arr.length; j++)
    {
        if(arr[i] == arr[j] * arr[j])
        {
            sb.append(arr[j]).append(',').append(arr[i]).append(" ");
        }
    }
}

String s = sb.toString();
System.out.println(s);
</code></pre>

<hr>

<h2>Additional considerations</h2>

<p>You have a trailing space in your resulting string.  There are several tricks you can use to remove it.  However, an interesting alternative is to use <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/StringJoiner.html" rel="nofollow noreferrer"><code>StringJoiner</code></a>:</p>

<pre><code>StringJoiner sj = new StringJoiner(" ");

// ... omitted ...

        sj.add(arr[j] + "," + arr[j]);

// ... omitted ...

String s = sj.toString();
System.out.println(s);
</code></pre>

<p>When <code>StringJoiner</code> adds the second and successive strings, it automatically adds the <code>delimiter</code> specified in the constructor.</p>
    </div>