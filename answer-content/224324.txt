<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the problems with your approach, is it's not very extensible.  If you wanted different rotation factors or even to make a full Caesar Cypher, you would have to totally rewrite your code.  A math based approach(<code>Mod 26</code>) can be used to allow any rotation factor, within reasonable limits.</p>

<p>Another approach which will allow O(n) space is to convert the string to a char array and change the characters in place.</p>

<p>It could look something like this:</p>

<pre><code>Public Function ROT13(input As String) As String
    Dim chars = input.ToArray()
    Const UpperA As Integer = Asc("A"c)
    Const LowerA As Integer = Asc("a"c)
    For i = 0 To chars.Length - 1
        If Char.IsLetter(chars(i)) Then
            If Char.IsUpper(chars(i)) Then
                chars(i) = Chr((((Asc(chars(i)) - UpperA) + 13) Mod 26) + UpperA)
            Else
                chars(i) = Chr((((Asc(chars(i)) - LowerA) + 13) Mod 26) + LowerA)
            End If
        End If
    Next
    Return New String(chars)
End Function
</code></pre>

<p>I've hard coded the rotation factor to 13.  But it should be a simple matter to add a rotation parameter to the function.</p>
    </div>