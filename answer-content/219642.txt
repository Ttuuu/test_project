<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like it showcases your skills well, and the comments will help anyone looking back to know that you're a programmer who is interested in doing their research and knowing things.</p>

<p>I tested this in Chrome on my local computer.</p>

<p>Your question included a mention about your timeout function not working. You'll need to make a stackoverflow question for that.</p>

<p><strong>Overall:</strong></p>

<p>This was very straight-forward to setup and the game works great! It is a little confusing visually that the cards aren't cleaned up after every game. Since the deck is reshuffled after each play.</p>

<p>If you were to make a more advanced version, I'd suggest creating a way for hard-core blackjack players to count cards. Maybe look into the casino rules and see how often they shuffle cards back into the deck, or how many decks they play with. You may be able to create a more interesting game if the player can use the same strategies on your web-page game as they can in a casino!</p>

<p><strong>Code:</strong></p>

<p>Your HTML:</p>

<ul>
<li>Place all your .css and .js references in a head div. This is done so that when other developers come along they can see very quickly where all your styling and scripts are coming from.</li>
</ul>

<blockquote>
<pre><code>&lt;head&gt;
   &lt;link href="check.css" rel="stylesheet"&gt;
   &lt;link href="BlackJack.css" rel="stylesheet"&gt;
   &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt;
   &lt;script src="BlackJack.js"&gt;&lt;/script&gt;
&lt;/head&gt;
</code></pre>
</blockquote>

<p>Your CSS:</p>

<ul>
<li>Careful with pixel counts for view-sizes in css. Pixel counts are fine for borders, but for viewports and playing surfaces they can cause your code to become outdated, or make your webpage hard to view on a mobile device. Try to limit the amount of times you define a style element in terms of a large pixel count; and instead use percentages. Think about this when you're developing: "I want my playing surface to take up 70% of the screen, that's 600px right now, but on a 4k display that would be much less; and on some phone displays it would be over 100% of the phone screen."</li>
</ul>

<p>Your JavaScript:</p>

<ul>
<li>Your logic in your javascript functions for *dealOneCardToPlayer * and *dealOneCardToDealer * is largely the same. This is not efficient and can be confusing for other developers, or you in the future. You need to identify what the difference in variables are in these functions and combine the functions to operate the same way on different data. You can pass in elements, objects, and dictionaries in javascript, so these don't need to be separate. The functions for <em>makeCardPlayer</em> and <em>makeCardDealer</em> could have the same thing happen to them, but it looks like it will require more values and more if/else checks, unless you break it up into smaller functions.</li>
</ul>
    </div>