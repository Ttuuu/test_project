<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wouldn't worry about this being inefficient - you're not doing anything crazy here, and a calendar header probably won't need to be refreshed millions of times per second anyway.</p>

<p>Still, I can think of some changes that will improve readability and maintainability:</p>

<ul>
<li>I would use a guard clause to reduce nesting, and to make it more obvious what happens when grid is null: <code>if (_grid == null) return null;</code>. This also gets rid of edge-cases early on, while in the current code you have to scan down to the end to see if maybe there's still an else statement following.</li>
<li>Adding an empty line between the end of the <code>else</code> block and the next <code>if</code> statement will make it more obvious that they're not related.</li>
<li>However, the last <code>if</code> statement only applies when displaying two months, so why not put it inside the above <code>else</code> block? That also allows you to remove the <code>months.Count != 3</code> check.</li>
<li>Putting <code>first = _grid[21]...</code> on the same line as that <code>if</code> statement, and without braces, makes the control flow more difficult to see at a glance. Omitting braces can also result in subtle bugs, so some people make a point of always using braces. Either way, consistency matters: if an <code>else</code> statement uses braces I'd expect the related <code>if</code> statement to also use them.</li>
<li>Why assign the result to <code>_viewMonthYearStr</code> instead of returning it directly? That field does not seem to serve any purpose.</li>
<li><code>0</code>, <code>21</code> and <code>41</code> are 'magic values': the meaning of those values isn't directly clear, and they easily break the code when the size of <code>_grid</code> needs to be changed. Replacing <code>_grid[0]</code> with <code>_grid.First()</code>, <code>_grid[41]</code> with <code>_grid.Last()</code> and <code>_grid[21]</code> with <code>_grid[_grid.Length / 2]</code> will make the code more robust and easier to understand. You could also assign their results to local variables, such as: <code>var middleDate = _grid[_grid.Length / 2];</code>. That simplifies the code somewhat, and it allows you to use <code>_grid[0]</code> and <code>_grid[_grid.Length - 1]</code> instead of <code>First</code> and <code>Last</code> without sacrificing readability, if you really need that little bit of performance gain.</li>
<li>Instead of using the local variables <code>first</code>, <code>middle</code> and <code>last</code>, you can return results immediately. That will make the possible output formats easier to see.</li>
<li>Instead of using a hash set, you can also check if the <code>Month</code> of the middle date is different from that of both the first and the last date. That will put a tiny bit less pressure on the GC.</li>
<li>Instead of calling <code>date.ToString(format)</code>, and then using the result in an interpolated string, you can also specify the format in the interpolated string directly: <code>$"{date:format}"</code>.</li>
<li>I'd rename <code>ViewedMonthYearStr</code> to <code>Header</code> or <code>Title</code> - that's what it's used for, after all.</li>
</ul>

<hr>

<p>With all that, this is what I would end up with:</p>

<pre><code>public string Header
{
    get
    {
        if (_grid == null)
            return null;

        var firstDate = _grid.First();
        var middleDate = _grid[_grid.Length / 2];
        var lastDate = _grid.Last();

        // If more than 2 months are displayed, focus only on the middle month:
        if (middleDate.Month != firstDate.Month &amp;&amp; middleDate.Month != lastDate.Month)
            return $"{middleDate:MMMM yyyy}";

        if (firstDate.Year != lastDate.Year)
            return $"{firstDate:MMMM yyyy} - {lastDate:MMMM yyyy}";

        return $"{firstDate:MMMM} - {lastDate:MMMM yyyy}";
    }
}
</code></pre>
    </div>