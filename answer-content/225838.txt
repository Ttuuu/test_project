<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Compactness</h2>

<ul>
<li>use a <code>switch</code> statement rather than verbose <code>if-elseif-..</code> statements</li>
<li>get rid of redundant blank lines</li>
</ul>

<hr>

<h2>Readability</h2>

<p>Avoid escaping characters.</p>

<blockquote>
<pre><code>Console.WriteLine("Type \"+\" for addition");
Console.WriteLine("Type \"-\" for subtraction");
Console.WriteLine("Type \"*\" for multiplication");
Console.WriteLine("Type \"/\" for division");
</code></pre>
</blockquote>

<p>You could go with..</p>

<pre><code>Console.WriteLine("Type '+' for addition");
Console.WriteLine("Type '-' for subtraction");
Console.WriteLine("Type '*' for multiplication");
Console.WriteLine("Type '/' for division");
</code></pre>

<p>Or..</p>

<pre><code>Console.WriteLine(@"Type ""+"" for addition");
Console.WriteLine(@"Type ""-"" for subtraction");
Console.WriteLine(@"Type ""*"" for multiplication");
Console.WriteLine(@"Type ""/"" for division");
</code></pre>

<hr>

<h2>User Experience</h2>

<p>If you ever wish to design end-user interfaces, you have to work on your lingo.  </p>

<p>You're off to a good start:</p>

<blockquote>
<pre><code>Console.WriteLine("Hi! What is your name?");
</code></pre>
</blockquote>

<p>You slip up slightly next (forgot a question mark):</p>

<blockquote>
<pre><code>Console.WriteLine(name + " What do you wanna do");
</code></pre>
</blockquote>

<p>But then you start pressuring the end-user. You expect a number, not in a moment, but <code>Now</code>! And you are not asking, you are demanding.</p>

<blockquote>
<pre><code>Console.Write("Now, Give me number one: ");
</code></pre>
</blockquote>

<p>Also, one time with a comma and capital after it, and one time the other way around:</p>

<blockquote>
<pre><code>Console.Write("Now give me number two: ");
</code></pre>
</blockquote>

<p>The user may also expect this application to crash on:</p>

<ul>
<li><code>double num1 = Convert.ToDouble(Console.ReadLine());</code></li>
<li><code>double num2 = Convert.ToDouble(Console.ReadLine());</code></li>
<li><code>Console.WriteLine(num1 / num2); // when num2 is 0</code></li>
<li>Any other overflow</li>
</ul>

<p>And nothing happens when an unknown operator is provided by the user.</p>

<p>The user is not able to verify the results, since the application immediately terminates after the calculation is evaluated.</p>
    </div>