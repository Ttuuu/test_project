<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's the code you want to speed up:</p>

<pre><code>// Checks if the 2 provided puzzles are the same
bool puzzleTheSame(const Puzzle&amp; puz1, const Puzzle&amp; puz2)
{
    for ( int length = 0; length &lt; PUZZLE_LENGTH; length++ )
        if ( puz1.state[length] != puz2.state[length] ) return false;
    return true;
}

bool puzzleExists(const Puzzle&amp; currentPuzzle, vector&lt;breadthPuzzle&gt;&amp; currentRoute)
{
    for ( int i = 0; i &lt; currentRoute.size(); i++ )
        if ( puzzleTheSame(currentRoute[i].puzzle, currentPuzzle) )
            return true;
    return false;
}

// Checks if the provided puzzle is solved
bool isSolved(const Puzzle&amp; solution)
{
    return puzzleTheSame(SOLVED_PUZZLE, solution);
}
</code></pre>

<p>It's a linear search over the array <code>currentRoute</code>: <code>O(n)</code> comparisons where <code>n</code> is the length of the current route.</p>

<p>For stylistic reasons, let's use the C++ syntax for "sameness" instead of the English words <code>TheSame</code>. Since everyone knows what <code>==</code> means in C++, we no longer need the code comment explaining what <code>puzzleTheSame</code> does.</p>

<pre><code>bool operator==(const Puzzle&amp; puz1, const Puzzle&amp; puz2)
{
    return std::equal(std::begin(puz1.state), std::end(puz1.state),
                      std::begin(puz2.state), std::end(puz2.state));
}

bool puzzleExists(const Puzzle&amp; currentPuzzle,
                  const std::vector&lt;breadthPuzzle&gt;&amp; currentRoute)
{
    for (auto&amp;&amp; elt : currentRoute) {
        if (elt.puzzle == currentPuzzle) {
            return true;
        }
    }
    return false;
}
</code></pre>

<p>We can also inline this next helper function everywhere it's used; having the name <code>isSolved</code> for it is not helpful anymore. By the way, your name for the parameter was misleading: the parameter is a <code>puzzle</code>, but it is not necessarily a <code>solution</code>. The whole point of the function is to <em>find out whether</em> it is a <code>solution</code> or not!</p>

<pre><code>bool isSolved(const Puzzle&amp; puzzle)
{
    return puzzle == SOLVED_PUZZLE;
}
</code></pre>

<hr>

<p>Okay, so how do we speed it up? We get rid of the <em>linear</em> search in favor of a <em>binary</em> search!</p>

<pre><code>bool operator&lt;(const Puzzle&amp; puz1, const Puzzle&amp; puz2)
{
    return std::lexicographical_compare(
        std::begin(puz1.state), std::end(puz1.state),
        std::begin(puz2.state), std::end(puz2.state));
}

bool puzzleExistsInSet(const Puzzle&amp; puzzle,
                       const std::set&lt;Puzzle&gt;&amp; seenPuzzles)
{
    return seenPuzzles.find(puzzle) != seenPuzzles.end();
}
</code></pre>

<p>Notice that this means we need to store the seen puzzles <em>twice</em> — once in the order we traversed them, in <code>currentRoute</code>, and again in sorted order, in <code>seenPuzzles</code>. So this improves our big-O asymptotic running time, but it might increase our "constant factor" so much as to erase that gain.</p>

<hr>

<p>Speaking of naming, I notice that your <code>solvePuzzle</code> function is totally misnamed — it in no sense "solves" a puzzle. Appropriate names would be like <code>slideBlock</code> or <code>makeMove</code> — or just inlining it into its one caller.</p>

<p>But its one caller calls it four times! Can we fix that?</p>

<pre><code>    if ( canNorth(gapLocation) ) solvePuzzle(breadthVector, i, north(gapLocation));
    if ( canEast(gapLocation) ) solvePuzzle(breadthVector, i, east(gapLocation));
    if ( canSouth(gapLocation) ) solvePuzzle(breadthVector, i, south(gapLocation));
    if ( canWest(gapLocation) ) solvePuzzle(breadthVector, i, west(gapLocation));
</code></pre>

<p>Yes. And that triggers a new refactoring that will reduce duplicated code elsewhere:</p>

<pre><code>for (auto&amp;&amp; m : { north(gapLoc), south(gapLoc), east(gapLoc), west(gapLoc) }) {
    if (isLegalMove(m)) {
        makeMove(breadthVector, i, m);
    }
}
</code></pre>

<p>Keep going in this iterative fashion: Find an infelicity; think of how you want the code to look <em>instead</em>; and then refactor until it <em>does</em> look that way. Rinse and repeat.</p>
    </div>