<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(<strong>EDITED</strong> to include a better analysis and improve the partition-based alternative)</p>

<h1>Take-home message</h1>

<pre><code>def push_side_part(seq):
    seq = list(seq)  # remove this for inplace
    n = len(seq)
    j = n - 1
    for i in range(n - 1, -1, -1):
        if seq[i] != ' ':
            seq[j], seq[i] = seq[i], seq[j]
            j -= 1
    return seq
</code></pre>

<p>This is an efficient (both time <code>O(1)</code> and memory <code>O(N)</code>) and simple alternative for solving the problem. It is based on a variation of <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" rel="nofollow noreferrer">Lomuto partitioning used in QuickSort</a>.
None of the other proposed solution gets to both.
The solution based on sorting is, at best, <code>O(N log N)</code> in time and <code>O(1)</code> in memory.</p>

<p>For the input sizes I tested, the code runs approximately as fast as the <code>list.sort()</code>-based alternative, but can be made roughly one order of magnitude faster by compiling it as is with Cython.</p>

<hr>

<h1>Analysis of Original Code</h1>

<p>First, lets comment your code:</p>

<ul>
<li>The code fails right at the start with the <code>.index()</code> call, if the input does not contain empty strings <code>' '</code></li>
<li>The code gets into infinite loop if, for whatever reason (e.g. for input <code>[' ', 'b', ' ', 'b', 'b']</code>), it does not enter the <code>for</code> loop, so this should be properly handled</li>
<li>Your code for <code>find_current_element()</code> is not type-stable. Particularly, if the function <em>fails</em> it returns <code>None</code>. However, without loss in functionality, you could return a negative index, say <code>-1</code>. This is a matter of taste in Python but in light of future optimization, it may be relevant. Note that some built-in functions in Python (like e.g. <code>string.find()</code>) are type-stable in a similar fashion and some other built-in functions are not (e.g. <code>string.index()</code>) so you have both choices even within the standard library.</li>
<li>I am not sure what is the reason for you to use <code>return reversed(...)</code> which returns an iterator, but I would rather return the reversed list via slicing</li>
</ul>

<p>A safer version of your code, while still retaining your approach is:</p>

<pre><code>def find_current_element(seq, index):
    for i in range(index + 1, len(seq)):
        if seq[i] != " ":
            return i
    return -1


def push_side_OP(seq):
    result = seq[::-1]
    try:
        good_index = result.index(" ")
    except ValueError:
        return seq
    else:
        curr_index = find_current_element(result, 0)
        while curr_index &gt;= 0:
            for i in range(good_index, len(result)):
                if result[i] != " ":
                    result[good_index], result[i] = result[i], " "
                    good_index += 1
                    curr_index = find_current_element(result, curr_index)
            else:
                curr_index = -1
        return result[::-1]
</code></pre>

<hr>

<p>A more polished way of writing essentially this same algorithm is:</p>

<pre><code>def neg_rfind(seq, item, index=-1):
    n = len(seq)
    index %= n
    for i in range(index, -1, -1):
        if seq[i] != item:
            return i
    return -1


def rfind(seq, item, index=-1):
    n = len(seq)
    index %= n
    for i in range(index, -1, -1):
        if seq[i] == item:
            return i
    return -1
    # try:
    #     return len(seq) - seq[::-1].index(item, index) - 1
    # except ValueError:
    #     return -1



def push_side_loop(seq):
    seq = list(seq)  # remove this for inplace
    j = rfind(seq, ' ')
    i = neg_rfind(seq, ' ')
    while i &gt;= 0:
        for l in range(j - 1, -1, -1):
            if seq[l] != ' ':
                seq[j], seq[l] = seq[l], ' '
                j -= 1
                i = neg_rfind(seq, ' ', i - 1)
        else:
            i = -1
</code></pre>

<p>Now, the algorithm itself is memory efficient (<code>O(1)</code>) but it is not very time efficient (<code>O(NÂ²)</code>? -- I am not 100% sure).
In particular, this is updating index <code>i</code> (with a rather expensive <code>neg_rfind()</code> call_ in a loop where <code>i</code> is not required to be updated.
Additionally, there seems to be an unnecessary nested loop.
Somehow, this resembles <a href="https://en.wikipedia.org/wiki/Bubble_sort" rel="nofollow noreferrer">bubble-sort</a> which is an inefficient sorting algorithm.</p>

<p>But even if you were to implement an efficient sorting algorithm (which is sort of reinventing the wheel, as Python already has <code>sorted()</code> and <code>list.sort()</code>), the problem you are trying to solve is simpler than that.</p>

<hr>

<h1>Alternatives</h1>

<p>For simpler comparison, the functions provided here are all preserving the input, but some could be easily made in-place, by simply skipping the line <code>seq = list(seq)</code> or similar.</p>

<p>Some alternatives, while in principle very efficient, contain explicit looping, which is somewhat slow in Python.
However, they can be easily made very fast with Cython (with the <code>_cy</code> suffix in benchmarks), and will be comparable to those pure Python solutions that avoid explicit looping (and recursion).</p>

<h2>Using partitioning</h2>

<p>You could use a variation of the partitioning functions used in sorting algorithms. Here is a variation / generalization of <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" rel="nofollow noreferrer">Lomuto partitioning used in QuickSort</a>:</p>

<pre><code>def partition_inplace(seq, condition, start=0, stop=-1):
    n = len(seq)
    start %= n
    stop %= n
    step = 1 if start &lt; stop else -1
    for i in range(start, stop + step, step):
        if condition(seq[i]):
            seq[start], seq[i] = seq[i], seq[start]
            start += step
    if step &gt; 0:
        return start
    else:
        return start + 1
</code></pre>

<p>This both separates the sequence inplace (according to the <code>condition</code>) and returns the index at which this separation occurs).</p>

<p>Since partitioning retain the order of the elements on only one side (the side of the elements satisfying the condition) one needs to run it <em>backward</em> with the <em>non-empty</em> condition.
Also the separating index is not needed.</p>

<p>Hardcoding all this for speed (essentially one needs to avoid the expensive call to <code>condition</code> inside the main loop), one would get:</p>

<pre><code>def push_side_part(seq):
    seq = list(seq)  # remove this for inplace
    n = len(seq)
    j = n - 1
    for i in range(n - 1, -1, -1):
        if seq[i] != ' ':
            seq[j], seq[i] = seq[i], seq[j]
            j -= 1
    return seq
</code></pre>

<p>This is both time and memory efficient.
Note that this is essentially the same as <a href="https://codereview.stackexchange.com/a/239020/140196">@Peilonrayz' first answer</a> except that it avoids using unnecessary generators.</p>

<h2>Using sorting (from <a href="https://codereview.stackexchange.com/a/239018/140196">@HeapOverflow's answer</a>)</h2>

<pre><code>def push_side_sort(seq):
    result = list(seq)
    result.sort(key=' '.__ne__)
    return result
</code></pre>

<p>This will have time and memory efficiency of sorting (which is typically worse than the problem you are trying to solve).</p>

<h2>Using <code>functools.reduce()</code> (from <a href="https://codereview.stackexchange.com/a/239049/140196">@Opus' answer</a>)</h2>

<pre><code>def push_side_reduce_slow(seq):
    def sided_join(items, item):
        if item == ' ':
            return [item] + items
        else:
            return items + [item]
    return functools.reduce(sided_join, seq, [])
</code></pre>

<p>While this is a very elegant approach for functional-style programming, it is in practice quite inefficiently creating temporary lists all the time (it is so slow it will go off charts and it is not included in the benchmarks)
A slightly more efficient approach will use <code>list.insert()</code>, e.g.:</p>

<pre><code>def push_side_reduce(seq):
    def sided_join(items, item):
        items.insert(0 if item == ' ' else len(items), item)
        return items
    return functools.reduce(sided_join, seq, [])
</code></pre>

<p>However, inserting at the beginning of a <code>list</code> is an <code>O(N)</code> (<code>N</code> being the number of elements of the list) for Python lists, because they are implemented as dynamic arrays.</p>

<h2>Using <code>filter()</code> (essentially the same as <a href="https://codereview.stackexchange.com/a/239020/140196">@Peilonrayz' second answer</a>)</h2>

<pre><code>def push_side_filt2(seq):
    return (
        list(filter(lambda x: x == ' ', seq))
        + list(filter(lambda x: x != ' ', seq)))
</code></pre>

<p>uses <code>filter()</code> instead of a comprehension, but it is otherwise the same. This can be further improved because the first filtering can be omitted and replaced with a quicker <code>list</code> repetition, given that it will always be repeating the empty string.</p>

<pre><code>def push_side_filt(seq):
    non_empty = list(filter(lambda x: x != ' ', seq))
    return [' '] * (len(seq) - len(non_empty)) + non_empty
</code></pre>

<h2>Using a buffer (essentially <a href="https://codereview.stackexchange.com/a/239043/140196">@Graipher's answer</a>)</h2>

<pre><code>def empty_first(items):
    buffer = []
    for item in items:
        if item == " ":
            yield item
        else:
            buffer.append(item)
    yield from buffer


def push_side_buff(seq):
    return list(empty_first(seq))
</code></pre>

<p>This is the computationally most efficient approach for keeping the order of both the <em>empty</em> and the <em>non-empty</em> elements.
However, it is not quite as much memory efficient because of the extra memory required by the buffer.</p>

<hr>

<h1>Benchmarks</h1>

<h2>Generating Input</h2>

<pre><code>def gen_input(n, k=0.5, tokens=string.ascii_letters + string.digits):
    picks = tokens + ' ' * int(len(tokens) * k)
    m = len(picks)
    return [picks[random.randint(0, m - 1)] for _ in range(n)]
</code></pre>

<h2>Checking for Valid Output</h2>

<pre><code>def equal_output(a, b, with_order=True):
    if with_order:
        return a == b
    else:
        n = a.count(' ')
        m = b.count(' ')
        return a[:n] == b[:m]
</code></pre>

<h2>Results</h2>

<p>Input sizes generated using:</p>

<pre><code>input_sizes = tuple(int(2 ** (2 + (3 * i) / 4)) for i in range(4, 21))
# N = (32, 53, 90, 152, 256, 430, 724, 1217, 2048, 3444, 5792, 9741, 16384, 27554, 46340, 77935, 131072)
</code></pre>

<p><a href="https://i.stack.imgur.com/o355f.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/o355f.png" alt="bm_full"></a></p>

<p>and with 40x and 10x zoom on the faster methods, respectively:</p>

<p><a href="https://i.stack.imgur.com/Gel7v.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Gel7v.png" alt="bm_zoom_40"></a>
<a href="https://i.stack.imgur.com/FCPU2.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/FCPU2.png" alt="bm_zoom_10"></a></p>

<p>This shows that <code>push_side_part()</code> is as fast as a <code>list.sort()</code>-based solution (which would be otherwise the fastest non-Cython-accelerated solution) and compiling this in Cython results in much faster timings than any of the proposed solutions.</p>

<hr>

<p>Full code available <a href="https://colab.research.google.com/drive/1yn_6SsYn-VprvTPsJ8qZXMtcpyD6TyCK" rel="nofollow noreferrer">here</a>.</p>
    </div>