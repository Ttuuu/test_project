<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think I found even better MVC architecture for my application. I have used inheritance for my input dialog controller classes , and composition of Jpanels in my Swing dialog classes, to avoid code duplication, and to get more clear code. Or I hope so..</p>

<p>This is my abstract input dialog controller class that is a super class for all input dialog controllers. It is responsible for setting the ID label value, setting Add and Cancel buttons ActionListeners, and has the main function of input controllers, saving data.</p>

<pre><code>public abstract class InputDialogController implements WindowController
{
    protected DataType dataType;
    protected int id;
    protected InputDialog gui;

    protected InputDialogController(WindowController owner, DataType dataType)
    {
        this.dataType = dataType;
        gui = InputDialogFactory.getWindow(owner.getWindow(), dataType);
        id = IDGenerator.getNewID(dataType);
        gui.getIdPanel().setIdValue(IDGenerator.formatRegularID(id));
        gui.getInputButtonPanel().setBtnAddActionListener(ActionListenerFactory.saveData(this));
        gui.getInputButtonPanel().setBtnCancelActionListener(ActionListenerFactory.closeWindow(this));
    }

    @Override
    public Window getWindow()
    {
        return (Window) gui;
    }

    public void trySavingDataElement()
    {
        if(isInputValid())
        {
            DataManager.save(createDataElement());
            getWindow().dispose();
        }
        else
        {
            showInputErrors();
        }
    }

    protected abstract boolean isInputValid();

    protected abstract DataElement createDataElement();

    protected abstract void showInputErrors();
}
</code></pre>

<p>This is one of mine concrete input dialog controllers, the ClientRegistrationController class.</p>

<pre><code>public class ClientRegistrationController extends InputDialogController
{
    private ClientRegistrationDialog clientGUI;

    public ClientRegistrationController(WindowController owner, DataType dataType)
    {
        super(owner, dataType);
        clientGUI = (ClientRegistrationDialog) super.gui;
        clientGUI.getMarketingPanel().setMarketingCmbModel(CmbModelFactory.getModel(dataType));
        clientGUI.getMarketingPanel()
                 .setBtnMarketingActionListener(ActionListenerFactory
                 .openNewWindow(this, DataType.MARKETING_TYPE));

    }

    public void updateComboBoxes(String item)
    {
        clientGUI.getMarketingPanel().setMarketing(item);
    }

    @Override
    protected boolean isInputValid()
    {
        return isNameValid()
            &amp;&amp; isPhoneNumberValid()
            &amp;&amp; isMarketingSelected();
    }

    private boolean isNameValid( )
    {
        return !("".equals(clientGUI.getPersonalInfoPanel().getName()));
    }

    private boolean isPhoneNumberValid()
    {
        String phoneNumber = clientGUI.getPersonalInfoPanel().getPrimePhoneNumber();

        return !(DataManager.clientsDataTable.uniqueStringCollision(phoneNumber)
             || ("".equals(phoneNumber)));
    }

    private boolean isMarketingSelected()
    {
        return clientGUI.getMarketingPanel().getMarketing() != "";
    }

    @Override
    protected Client createDataElement()
    {
        Client newClient= new Client();

        newClient.setId(id);
        newClient.setName(clientGUI.getPersonalInfoPanel().getName());
        newClient.setPrimePhoneNumber(clientGUI.getPersonalInfoPanel().getPrimePhoneNumber());
        newClient.setAlternativePhoneNumber(clientGUI.getPersonalInfoPanel().getAltPoneNumber());
        newClient.setEmail(clientGUI.getPersonalInfoPanel().getEmail());
        newClient.setAddress(clientGUI.getPersonalInfoPanel().getAddress());
        newClient.setMarketing(DataElementGetter.getMarketing(clientGUI.getMarketingPanel().getMarketing()));

        return newClient;
    }

    @Override
    protected void showInputErrors()
    {
        checkName();
        checkPhoneNumber();
        checkMarketing();
    }

    private void checkName()
    {
        if(isNameValid())
        {
            clientGUI.getPersonalInfoPanel().showNameDefault();
        }
        else
        {
            clientGUI.getPersonalInfoPanel().showNameError();
        }
    }


    private void checkPhoneNumber()
    {

        if(isPhoneNumberValid())
        {
            clientGUI.getPersonalInfoPanel().showPhoneDefault();
        }
        else
        {
            clientGUI.getPersonalInfoPanel().showPhoneError();
        }
    }

    private void checkMarketing()
    {
        if(isMarketingSelected())
        {
            clientGUI.getMarketingPanel().showMarketingDefault();
        }
        else
        {
            clientGUI.getMarketingPanel().showMarketingError();
        }
    }
}
</code></pre>

<p>This is the swing class for client registration:</p>

<pre><code>public class ClientRegistrationDialog extends JDialog implements InputDialog
{
    private static final long serialVersionUID = -394107433140693140L;
    private IdPanel idPanel = new IdPanel();
    private PersonalInfoPanel personalInfoPanel = new PersonalInfoPanel();
    private MarketingPanel marketingPanel = new MarketingPanel();
    private InputButtonPanel buttonPanel = new InputButtonPanel();

    public ClientRegistrationDialog(Window owner)
    {
        super(owner);
        getContentPane().setLayout(new MigLayout("", "[434px]", "[25px:n][][][]"));
        getContentPane().add(idPanel, "cell 0 0,grow");
        getContentPane().add(personalInfoPanel, "cell 0 1,grow");
        getContentPane().add(marketingPanel, "cell 0 2,grow");
        getContentPane().add(buttonPanel, "cell 0 3,grow");
    }

    @Override
    public IdPanel getIdPanel()
    {
        return idPanel;
    }

    public PersonalInfoPanel getPersonalInfoPanel()
    {
        return personalInfoPanel;
    }

    public MarketingPanel getMarketingPanel()
    {
        return marketingPanel;
    }

    @Override
    public InputButtonPanel getInputButtonPanel()
    {
        return buttonPanel;
    }
}
</code></pre>

<p>And this is one of it's panels, the PersonalInfoPanel.</p>

<pre><code>public class PersonalInfoPanel extends JPanel
{
    private static final long serialVersionUID = -1636004925810635460L;
    private JTextField txtName;
    private JTextField txtPrimePhone;
    private JTextField txtAltPhone;
    private JTextField txtEmail;
    private JTextField txtAddress;

    public PersonalInfoPanel()
    {
        setLayout(new MigLayout("", "[][5.00][grow]", "[20px:n,fill][20px:n,fill][20px:n,fill][][20px:n]"));

        JLabel lblName = LabelFactory.createJLabel("First and Last Name", new Font("Tahoma", Font.PLAIN, 13));
        add(lblName, "cell 0 0,growy");

        txtName = TextFieldFactory.createJTextField(10);
        add(txtName, "cell 2 0,grow");

        JLabel lblPrimePhone = LabelFactory.createJLabel("Primary Phone Number", new Font("Tahoma", Font.PLAIN, 13));
        add(lblPrimePhone, "cell 0 1,growy");

        txtPrimePhone = TextFieldFactory.createJTextField(10);
        add(txtPrimePhone, "cell 2 1,grow");

        JLabel lblAltPhone = LabelFactory.createJLabel("Alternative Phone Number", new Font("Tahoma", Font.PLAIN, 13));
        add(lblAltPhone, "cell 0 2,growy");

        txtAltPhone = TextFieldFactory.createJTextField(10);
        add(txtAltPhone, "cell 2 2,grow");

        JLabel lblEmail = LabelFactory.createJLabel("Email Address", new Font("Tahoma", Font.PLAIN, 13));
        add(lblEmail, "cell 0 3,growy");

        txtEmail = TextFieldFactory.createJTextField(10);
        add(txtEmail, "cell 2 3,growx");

        JLabel lblHomeAddress = LabelFactory.createJLabel("Home Address", new Font("Tahoma", Font.PLAIN, 13));
        add(lblHomeAddress, "cell 0 4,growy");

        txtAddress = TextFieldFactory.createJTextField(10);
        add(txtAddress, "cell 2 4,grow");
    }

    public String getPersonName()
    {
        return txtName.getText();
    }

    public String getPrimePhoneNumber()
    {
        return txtPrimePhone.getText();
    }

    public String getAltPoneNumber()
    {
        return txtAltPhone.getText();
    }

    public String getEmail()
    {
        return txtAltPhone.getText();
    }

    public String getAddress()
    {
        return txtAddress.getText();
    }

    public void showNameDefault()
    {
        txtName.setBackground(Color.WHITE);
    }

    public void showNameError()
    {
        txtName.setBackground(Color.YELLOW);
    }

    public void showPhoneDefault()
    {
        txtName.setBackground(Color.WHITE);
    }

    public void showPhoneError()
    {
        txtName.setBackground(Color.YELLOW);
    }
}
</code></pre>
    </div>