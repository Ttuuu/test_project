<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some tips from me:</p>

<p>1) You should separate the UI logic from your main logic. In your case, the logic is the calculation, so you should make a class for it. Don't think about the UI, just code your logic. It must be completely independent of the UI. This way you could test your calculation logic without creating windows every time and you could use another UI instead of the current one. You could even use the console.</p>

<p>2) Your class shouldn't inherit from Window. Instead, give an instance of Window to your class. One reason for this is, that it will pollute your MainWindows interface with many methods which you probably won't need. In general, favor <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance" rel="nofollow noreferrer">Composition over inheritance</a>.</p>

<p>3) You could define operation as a lambda:</p>

<pre><code>// instead of:
operation = '-';
// use this:
operation = (a, b) =&gt; a - b;
</code></pre>

<p>It would make your btnEquals_Click method shorter and easier by removing the if-checks:</p>

<pre><code>    private void btnEquals_Click(object sender, RoutedEventArgs e)
    {
        op2 = input;
        double num1, num2;
        double.TryParse(op1, out num1);
        double.TryParse(op2, out num2);
        displayTextbox.Text = (operation(num1, num2).toString(); // don't check, just apply
    }
</code></pre>

<p>4) You are repeating yourself multiple times:</p>

<pre><code>this.displayTextbox.Text = "";
input += &lt;some num&gt;;
this.displayTextbox.Text += input;
</code></pre>

<p>Introduce a method that takes the number and does all this. It would reduce the amount of lines of code and generally: It's bad to have duplications because if it's wrong, you'll have to fix multiple places. See <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>.</p>

<p>5) I don't know what the initialize method does (used in the constructor), but I would advise you to stay away from this habit. A constructor should be lightweight and easy because as a user I don't want to get problems when I create your objects. I can understand that something might go wrong if I call a method because that's action and it can fail. But the creation of objects should be smooth and easy.</p>
    </div>