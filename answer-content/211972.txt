<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code seemingly follows <a href="https://doc.red-lang.org/en/style-guide.html" rel="nofollow noreferrer">official style guide</a>, so that's a plus. 
Not all of it is properly formatted though.</p>

<p>In terms of implementation: textual interface is tightly coupled with game logic, which makes refactoring and code support particularly hard. I would suggest to keep all functionally related modules separately and consider usage of <a href="https://doc.red-lang.org/en/reactivity.html" rel="nofollow noreferrer">reactive programming</a> - all of it will make your code more general and declarative.</p>

<hr>

<p>Now, the main points:</p>

<ol>
<li>Red has a literal <code>url!</code> datatype, but for some reason you are using <code>file!</code>... and it certainly doesn't mean exactly what you want it to:</li>
</ol>

<pre><code>&gt;&gt; [%http://www.rosettacode.org/wiki/Rock-paper-scissors]
== [%http :/ /www.rosettacode.org /wiki /Rock-paper-scissors]
</code></pre>

<p>That's one <code>file!</code>, one <code>get-word!</code> and 3 <code>refinement!</code>s. Instead you can just write:</p>

<pre><code>&gt;&gt; type? http://www.rosettacode.org/wiki/Rock-paper-scissors
== url!
</code></pre>

<ol start="2">
<li><p>Using <code>help*</code> words as indices is a code smell. Even if you really need to keep these URLs as values, you should put them in a block and index them by their positions. However, I would suggest to omit cluttering source code with various cross-references. It belongs either to readme file or script header.</p></li>
<li><p><code>player-choice: "x"</code> - another code smell. Red has a <code>none</code> value, typically used to represent the "absence" of something. You should use that instead of an arbitrarily selected string.</p></li>
<li><p>Redefeniton of pre-defined words. Your <code>draw: ...</code> overwrites <a href="https://doc.red-lang.org/en/draw.html" rel="nofollow noreferrer">Draw dialect</a> function. To avoid that, either pick a different name or use contexts for encapsulation. <code>draw</code> definition itself is just an alias for <code>equal?</code> - there's no need to reinvent the wheel.</p></li>
<li><p>Zero argument function <code>func [][...]</code> has an idiomatic <code>does [...]</code> form.</p></li>
<li><p><code>either condition [][...]</code> -&gt; <code>unless condition [...]</code>.</p></li>
<li><p>Redundant usages of <code>rejoin</code>. <code>print</code> already <code>reduce</code>s its argument and preserves spaces between elements.</p></li>
<li><p>Redundant usages of parenthesis. It is preferred to omit them entirely.</p></li>
<li><p><code>not x = y</code> -&gt; <code>x &lt;&gt; y</code>.</p></li>
<li><p><a href="https://doc.red-lang.org/en/style-guide.html#_naming_conventions" rel="nofollow noreferrer">Naming could be better</a>. As a rule of thumb, try to pick 5-8 letter words, and avoid verbosity. Function that return boolean values should be posfixed with <code>?</code> mark. </p></li>
<li><p>You say that your code works according to a spec. However, implementation of weighted random choice contains two related bugs: in particular, <code>tally: select "rock" player-choices</code> and <code>select "scissors" player-choices</code> - this expressions always return <code>none</code>, because you mixed up the order of arguments. Because of that, only <code>random/only</code> branch is picked at any time. Moreso, <code>make-computer-choice</code> itself is never used in the main loop.</p></li>
<li><p>Poor input checks - you consider only the first input character, but don't impose any restrictions on input length. What happens if I input, say, <code>"rp"</code>? Your implementation interprets it as "rock", whereas to me it looks like a typo.</p></li>
<li><p>Refactor deeply nested conditionals using <code>case</code> and <code>switch</code>. Consider usage of dispatch tables.</p></li>
</ol>

<p>With that said, take more time to <a href="https://github.com/red/red/wiki/%5BLINKS%5D-Learning-resources" rel="nofollow noreferrer">learn the language</a>, as your code clearly indicates the lack of knowledge about available datatypes and functions, common idioms and leverage points.</p>

<p>You certainly wrote it having a typical scripting language in mind, without paying homage to Red's key strengths (dialects, data-orientation and homoiconicity) - and that's not a bad thing per se by any means. However, if you deem your code worthy of showcasing on Rosettacode, then you should spend some time on triaging all the bugs and making it idiomatic - as of now, it doesn't strike me as anything special.</p>
    </div>