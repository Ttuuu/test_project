<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of spelling out every single element of the array,</p>

<pre><code>char ver_string[] = {'5','.','2','5','.','5','.','0','\0'};
</code></pre>

<p>just use a string literal. It's the same thing:</p>

<pre><code>char ver_string[] = "5.25.5.0";
</code></pre>

<blockquote>
  <p>Should I be printing to stderr only in the driver (main) program and leave all of that out of the main "library" code?</p>
</blockquote>

<p>Yes, exactly. You can return error codes and set <code>errno</code> to be more specific.</p>

<blockquote>
  <p>Secondly, I have an <code>enum</code> definitionn for <code>FAIL</code> but I never actually use it because when I wrote the switch clause, I thought it may be a better idea to just default to error rather than select it explicitly.</p>
</blockquote>

<p>That's fine. Anything other than a valid input is an invalid input.</p>

<p>You don't return a value from <code>version_parse</code> even though it looks like you even inserted a newline where it was supposed to go.</p>

<p>Instead of using <code>LEFT</code> and <code>RIGHT</code>, I would use <code>GREATER</code> and <code>LESS</code>. Those names convey more meaning to me.</p>

<p>Usually, functions that don't take values have an unnamed <code>void</code> parameter. I suggest doing that with <code>main</code>, because it might be undefined behavior if you don't:</p>

<pre><code>int main(void)
{
</code></pre>

<p>(I also fixed up the formatting to make it more consistent.)</p>

<p>In <code>validate_version_string</code>, <code>tmp</code> and <code>copy</code> are unnecessary. Just use <code>str</code> and <code>*str</code>, like so:</p>

<pre><code>for(; *str != '\0'; ++str)
{
    if(*str == '.') ++count;
    if((*str &gt; '9' || *str &lt; '0') &amp;&amp; *str != '.') return false;
}
</code></pre>

<p>You may think that removing <code>tmp</code> is bad for performance, but it's not; in any nonzero optimization level, these are equivalent.</p>
    </div>