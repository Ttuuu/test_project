<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Observatoion</h2>
<p>I don't really have much to say on this code.<br>
Looks good.If this was at work (and it had unit tests) I would say fine to check in.</p>
<p>The below are very minor comments.</p>
<h2>Code Review</h2>
<p>Please stop using the leading underscore.<br>
Identifiers with a leading underscore are usually reserved. The rules are not obvious (you break them) but because they are not obvious you should avoid putting the <code>_</code> at the beginning of an identifier.</p>
<p>Note: The end is fine.</p>
<p>see: <a href="https://stackoverflow.com/q/228783/14065">What are the rules about using an underscore in a C++ identifier?</a></p>
<hr>
<p>I very rarely see the leading <code>::</code> used to specify an absolute namespace.</p>
<pre><code>::std::false_type 
</code></pre>
<p>Sure that works.</p>
<hr>
<p>Good use of template meta programming.</p>
<hr>
<p>Not sure I like these.</p>
<pre><code>#define _CONSTEVAL constexpr
#define _RUNTIME inline
</code></pre>
<p>Since they are always defined why have them at all?</p>
<p>Also in the class you don't need <code>inline</code> its redundant when used in the class. The general rule is don't use it unless you must. The only time you must is out of class definitions in the header file.</p>
<hr>
<p>I find this hard to read:</p>
<pre><code>        using _Tp = std::conditional_t&lt;
            is_specialization&lt;std::tuple_element_t&lt;N, _pack&gt;, std::optional&gt;{},
            std::optional&lt;typename decay_t&lt;std::tuple_element_t&lt;N, _pack&gt;&gt;::value_type&gt;,
            typename decay_t&lt;std::tuple_element_t&lt;N, _pack&gt;&gt;::value_type&gt;;
</code></pre>
<p>When I build types I do it over a couple of lines so it easy to read (by the next person to look at the code).</p>
<pre><code>        using NthElement       = std::tuple_element_t&lt;N, _pack&gt;
        using DecayNthElement  = typename decay_t&lt;NthElement&gt;::value_type;
        using IsSpecNthElement = is_specialization&lt;NthElement, std::optional&gt;;

        using Type = std::conditional_t&lt;
            IsSpecNthElement{},
            std::optional&lt;DecayNthElement&gt;,
            DecayNthElement::value_type
        &gt;;
</code></pre>
<hr>
<p>I would simplify this:</p>
<pre><code>            if (_comp)
            {
                return _comp(value);
            }
            return true;

            // This is just as easy
            // But now I think about it yours is fine.
            return _comp ? _comp(value) : true;
</code></pre>
<hr>
    </div>