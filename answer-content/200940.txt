<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things which may help you improve your program.  First, though, I think it's important to mention that this code is generally well-constructed and easy to understand, so you're well on your way already.  In particular, the proper use of namespaces and <code>const</code> and the separation of I/O in <code>Game</code> versus game state in <code>Grid</code> is good.</p>

<h2>Prefer <code>constexpr</code> to <code>const</code></h2>

<p>The <code>COLUMNS</code> and <code>ROWS</code> can both be <code>constexpr</code> and there is sometimes an optimization value in doing so.  </p>

<h2>Don't use all uppercase for constants</h2>

<p>Using all caps for macros is a good and very common practice.  Using them for other purposes is not because it violates that understanding and misleads the reader.  </p>

<h2>Consider simplifying the data structure</h2>

<p>Much of the code would likely be simpler if the same structure as presented to the user (a sequence of cells) were also used internally.  Lookup would be simplfied and no translation (other than adjusting for zero-based array) would be required between external and internal views.</p>

<h2>Use more named constants</h2>

<p>The values <code>'X'</code> and <code>'O'</code> and the value <code>9</code> would all be good candidates for named constants which, if well-named, would enhance readability and clarity.</p>

<h2>Rename ambiguous functions</h2>

<p>I find <code>step</code>, and the various <code>check...</code> functions to be less than helpful names.  First, it's not clear whether <code>step</code> is being used as a noun or a verb here, and one doesn't usually speak of "steps" but rather "turns" when playing a game.  Although "turn" still has the noun/verb duality problem, at least the term is more obviously germane to the problem domain.  As for the <code>check</code> functions, what are they checking?  What does a return value of <code>true</code> mean?  I'd suggest maybe <code>isDiagonalWin</code> and <code>isRowWin</code>.  </p>

<h2>Reduce work</h2>

<p>Only the last value played could possibly be part of a winning game, so one could reduce work by only checking combinations relevant to that move, or at least by only checking for the values of the last player.  Also, it's not really necessary to check <code>isWinner</code> first and then again within <code>isTie</code>.</p>

<h2>Be careful with move semantics</h2>

<p>This line in <code>printRow</code> is a little strange to me:</p>

<pre><code>for (auto&amp;&amp; cell : cells[index]) {
</code></pre>

<p>I don't really think we need to move the value into cell, do we?  I'd suggest just using <code>auto &amp;</code> or <code>const auto &amp;</code> instead.  In this case, since a <code>cell</code> is just a <code>char</code> it's probably actually smaller code to just use <code>auto</code>.</p>

<h2>Allow the user to specify an <code>iostream</code></h2>

<p>Rather than tying the game solely to <code>std::cout</code> and <code>std::cin</code>, it would be a very simple change to allow, as perhaps a pair of default arguments to a constructor for <code>Game</code>, which streams are used.  This makes some things, such as automatic testing, slightly easier.</p>
    </div>