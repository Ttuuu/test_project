<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre class="lang-py prettyprint-override"><code>def load_file(files):
    codon_list=[]
    with open(files) as seq_result:
        for lines in seq_result:
            if lines.startswith('&gt;') is True:
                continue
            remove_white_spaces=lines.strip().upper()
            for codon in remove_white_spaces:
                codon_list.append(codon)
    return codon_list
</code></pre>
</blockquote>
<p>There is almost never a good reason to use <code>is True</code>, just remove that and your code will still work correctly.</p>
<p>We can remove <code>remove_white_spaces</code> by moving <code>lines.strip().upper()</code>, this makes the code easier to read as we now don't need to check if <code>remove_white_spaces</code> is being used again.</p>
<p>We can use a list comprehension instead to build <code>codon_list</code>, this is syntatic sugar that has increased the readability of lots of Python code.</p>
<p>You are using incorrectly using plurals, <code>files</code> and <code>lines</code>. You can also use <code>path</code> instead of <code>files</code> and <code>sequence</code> instead of <code>seq_result</code>.</p>
<pre class="lang-py prettyprint-override"><code>def load_file(path):
    with open(path) as sequence:
        return [
            codon
            for line in sequence
            if not line.startswith('&gt;')
            for codon in line.strip().upper()
        ]
</code></pre>
<hr>
<blockquote>
<pre class="lang-py prettyprint-override"><code>def rev(files):
    reverse_codon_list=[]
    codon_list=load_file(files)
    codon_list.reverse()
    for codons in codon_list:
        reversed_codon=DNA_complement_dict[codons]
        reverse_codon_list.append(reversed_codon)
    return reverse_codon_list
</code></pre>
</blockquote>
<p>Much like the previous function you can use a comprehension, and <code>reversed_codon</code> only impairs readability.</p>
<p>We can use the function <code>reversed</code> rather than <code>list.reverse</code> to reverse the list, to reduce line count and improve readability.</p>
<pre class="lang-py prettyprint-override"><code>def rev(files):
    return [
        DNA_complement_dict[codons]
        for codons in reversed(load_file(files))
    ]
</code></pre>
<hr>
<blockquote>
<pre class="lang-py prettyprint-override"><code>def codon_translation(global_codon_list):
    codon_counter=0
    codon_triple_list=[]
    open_reading_frame_lists=[[],[],[],]
    for i in range(3):
        open_reading_frame_count=1
        codon_triple_list.clear()
        codon_counter=0
        for codons in global_codon_list:
            if open_reading_frame_count&gt;=(i+1):
                codon_counter+=1
                codon_triple_list.append(codons)
                if codon_counter == 3:
                    codon_counter=0
                    join_codons=''.join(codon_triple_list)
                    try:
                        amino_acid=dna_codon_dict[join_codons]
                        open_reading_frame_lists[i].append(amino_acid)
                    except:
                        pass
                    if join_codons in {'TAA','TAG','TGA'}:
                        open_reading_frame_lists[i].append('X')
                    codon_triple_list.clear()
            else:
                open_reading_frame_count+=1
    return open_reading_frame_lists
</code></pre>
</blockquote>
<p>Your code is hard to read as your whitespace is not great and not consistant. If you put a space either side of all operators it will help readability.</p>
<p>You can use <code>len(codon_triple_list)</code> rather than <code>codon_counter</code>, this cuts out a siginifact amount of code improving readability.</p>
<p>You shouldn't have bare exepcts, <code>except:</code>, these catch too much and lead to problems. You should either use <code>except KeyError:</code> or make it so there is no exception.</p>
<p>You should have either a second dictionary that contains TAA, TAG and TGA.</p>
<p>You can inverse <code>open_reading_frame_count&gt;=(i+1)</code> to reduce the level of the arrow anti-pattern you have.</p>
<p>You have some really verbose names, making your code harder to read. Which is <em>quicker</em> to read <code>triples</code> or <code>codon_triple_list</code>?</p>
<pre class="lang-py prettyprint-override"><code>def codon_translation(codons):
    reading_frames = ([], [], [])
    for i, reading_frame in enumerate(reading_frames):
        open_reading_frame_count = 1
        triples = []
        for codon in codons:
            if open_reading_frame_count &lt;= i:
                open_reading_frame_count += 1
                continue

            triples += [codon]
            if len(triples) == 3:
                reading_frame.append(dna_codon_dict2[''.join(triples)])
                triples = []
    return reading_frames
</code></pre>
<p>You can remove the need for <code>open_reading_frame_count</code> by simply slicing <code>codons</code> by <code>i</code>.</p>
<p>You can build a <code>windowed</code> function to get triplets easily.</p>
<p>We can convert this into a nested comprehension.</p>
<pre class="lang-py prettyprint-override"><code>def windowed(values, size):
    return zip(*size*[iter(values)])


def codon_translation(codons):
    return [
        [
            dna_codon_dict2[''.join(triplet)]
            for triplet in windowed(codons[i:], 3)
            if ''.join(triplet) in dna_codon_dict2
        ]
        for i in range(3)
    ]
</code></pre>
    </div>