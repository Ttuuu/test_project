<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code can be improved in regard to its efficiency and its readability. But first of all, <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">don't write that <code>using namespace std</code></a>.</p>

<h2>Efficiency</h2>

<p>You create a lot of useless vectors in your code. To avoid this, the first and most easy step is to use reference as arguments to your functions, instead of values</p>

<pre><code>// arguments by value make a copy of what is passed to the function
point_pair minimal_distance_rec(vector&lt;point&gt; points_x, vector&lt;point&gt; points_y)

// whereas arguments by reference don't
point_pair minimal_distance_rec(vector&lt;point&gt;&amp; points_x, vector&lt;point&gt;&amp; points_y)
</code></pre>

<p>Note that you should declare those references <code>const</code> if you don't modify what they refer to inside your function.</p>

<p>The second step is more difficult. Your algorithm doesn't require you to create two or more vectors from the vector it's given. It is enough to know the position that divides your vector into two equal sides to handle the left and the right sides independently. So use <code>iterators</code>, which are the canonical C++ way to denote positions in a vector or any sort of range. It will also ease the use of <code>&lt;algorithm&gt;</code>, and make your program more readable in the end.</p>

<p>NB: there's also a small efficiency loss in your <code>calc_distance</code> function: you can do with the square distance most of the time, which avoid time-consuming floating-point calculations.</p>

<h2>Readability</h2>

<p>Your code is cluttered with unnecessary types, functions and instructions.</p>

<p>Let's take for instance <code>compare_x</code>:</p>

<pre><code>bool compare_x(point &amp;a, point &amp;b)
{
  if (a.x &lt; b.x)
    return true;
  else
    return false;
}
</code></pre>

<p>First, notice that it is equivalent to </p>

<pre><code>bool compare_x(point &amp;a, point &amp;b)
{
  return a.x &lt; b.x
}
</code></pre>

<p>And second, that <code>compare_x(a, b)</code> isn't shorter than <code>a.x &lt; b.x</code>.</p>

<p>By using the standard library, you can also avoid creating function or write them in a more concise manner:</p>

<pre><code>int getval(int size)
{
  if (size &lt; 15)
    return size;
  else
    return 15;
}
</code></pre>

<p>is equivalent to <code>std::min(size, 15)</code>, for instance.</p>

<p>In the same way, your <code>point_pair</code> doesn't bring anything a <code>std::pair&lt;point, point&gt;</code> doesn't bring (it actually brings way less). I'd agree that point should be kept, because <code>.x</code> and <code>.y</code> are more conventional and readable than <code>.first</code> and <code>.second</code> with regards to a point.</p>

<p>But you'd have to make other more significant efforts your code more readable. Using iterators, as I said, is one of them. Even in simple loops as inside your <code>minimal_distance_naive</code>, it already is useful as it avoids signed/unsigned comparisons (between an <code>int i</code> and a <code>points.size()</code> for instance), and comes with named functions such as <code>std::distance</code>, <code>std::next</code>, <code>std::advance</code>.</p>

<p>But it will shine when you can build on them to use standard algorithms. It brings us to the main shortcoming of your code. Your <code>minimal_distance_rec</code> is unreadable because it's very long, and its recursive structure isn't apparent.</p>

<p>The divide-and-conquer algorithm for finding the closest pair is yet simple:</p>

<ol>
<li><p>find the closest pair on the left side</p></li>
<li><p>find the closest pair on the right side</p></li>
<li><p>find the closest pair with one point on the left, one point on the right</p></li>
</ol>

<p>Step 3 can be optimized by considering, for each point on the left side, only the points of the right side that are in the rectangle of size <code>d, d*2</code> (where <code>d</code> is the minimal distance already found) centered vertically around the left point and beginning horizontally on its right side.</p>

<p>Computing that rectangle's coordinates and finding whether a point is inside it deserve their own functions. It might be trivial by itself, but it doesn't mean it's easy to understand the code doing it at first glance. And it will shorten your main function a lot.</p>

<p>Then filtering the points on the right side, and choosing the closest to the left point to update the minimal known distance are well-known algorithms, so well-known they're standardized and shouldn't be rewritten: <code>std::partition</code> and <code>std::min_element</code>. You have to customize their behavior through <a href="https://en.cppreference.com/w/cpp/language/lambda" rel="noreferrer">lambda functions</a> though.</p>

<p>Here's a complete rewrite of your code according to my review:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cmath&gt;

struct point {
    int x, y;
};

using pair = std::pair&lt;point, point&gt;;

unsigned square_distance(const point&amp; lhs, const point&amp; rhs) {
    unsigned adj = std::abs(lhs.x - rhs.x);
    unsigned opp = std::abs(lhs.y - rhs.y);
    return adj*adj + opp*opp;
}

using Iterator = std::vector&lt;point&gt;::iterator;
unsigned minimal_distance_naive(Iterator first, Iterator last) {
    pair closest{*first, *std::next(first)};  
    for (auto out = first; out != last; ++out) {
        pair temp;
        temp.first = *out;
        for (auto in = std::next(out); in != last; ++in) {
            temp.second = *in;
            closest = std::min(closest, temp, [](const auto&amp; lhs, const auto&amp; rhs) {
                return square_distance(lhs.first, lhs.second) &lt; square_distance(rhs.first, rhs.second);
            });
        }
    }
    return square_distance(closest.first, closest.second);
}

bool is_inside_rectangle(const point&amp; input, const point&amp; up_left, const point&amp; bottom_right) {
    return      up_left.x &lt;= input.x &amp;&amp; input.x &lt;= bottom_right.x
            &amp;&amp;  up_left.y &gt;= input.y &amp;&amp; input.y &gt;= bottom_right.y;
}

pair candidates_rectangle(const point&amp; p, unsigned square_dist) {
    double dist = std::sqrt(square_dist);
    pair res{ { p.x,                           static_cast&lt;int&gt;(p.y + dist) },
              { static_cast&lt;int&gt;(p.x + dist),  static_cast&lt;int&gt;(p.y - dist) }};
    return res;
}


unsigned minimal_distance_rec(Iterator first, Iterator last, const std::size_t threshold = 3) {
    // assume points are sorted by x
    if (std::distance(first, last) &lt;= threshold) return minimal_distance_naive(first, last);
    auto pivot = std::next(first, std::distance(first, last) / 2);
    auto min_left = minimal_distance_rec(first, pivot);
    auto min_right = minimal_distance_rec(pivot, last);

    auto temp_min = std::min(min_left, min_right);
    // define the band inside which disctance can be less than temp_min
    auto not_too_left = std::partition(first, pivot, [&amp;](const auto&amp; p) {
        return p.x &lt; (pivot-&gt;x - static_cast&lt;int&gt;(std::sqrt(temp_min)));
    });
    auto not_too_right = std::partition(pivot, last, [&amp;](const auto&amp; p) {
        return p.x &lt;= (pivot-&gt; x + static_cast&lt;int&gt;(std::sqrt(temp_min)));
    });

    // and look for the closest pair inside
    std::for_each(not_too_left, pivot, [&amp;](const auto&amp; lp) {
        auto [up_left, bottom_right] = candidates_rectangle(lp, std::sqrt(temp_min));
        auto outside = std::partition(pivot, not_too_right, [=](const auto&amp; rp) {
            return !is_inside_rectangle(rp, up_left, bottom_right);
        });
        auto middle_closest = std::min_element(pivot, outside, [=](const auto&amp; lhs, const auto&amp; rhs) {
            return square_distance(lp, lhs) &lt; square_distance(lp, rhs);
        });
        temp_min = std::min(temp_min, square_distance(lp, *middle_closest));
    });
    return temp_min;
}

double minimal_distance(std::vector&lt;point&gt;&amp; points) {
    std::sort(points.begin(), points.end(), [](const auto&amp; lhs, const auto&amp; rhs) {
        return lhs.x &lt; rhs.x;
    });
    return std::sqrt(minimal_distance_rec(points.begin(), points.end()));
}

int main() {

    std::size_t n;
    std::cin &gt;&gt; n;

    std::vector&lt;point&gt; points;
    for (std::size_t i = 0u; i &lt; n; i++) {
        int a, b;
        std::cin &gt;&gt; a &gt;&gt; b;
        points.push_back({a, b});
    }
    std::cout &lt;&lt; minimal_distance(points);
}
</code></pre>
    </div>