<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's hard to follow exactly your logic. Pretty sure this line is wrong:</p>

<pre><code>personDetail.isActive = personDetail.isActive
</code></pre>

<p>You probably meant to assign to something else as you are assigning same value (maybe <code>personDetail.isActive = aPerson.isActive</code>)</p>

<p>Another fishy thing is, that you have those 2 conditions in "when" for assigning 'active' and 'locale' stuff. Maybe it's correct, but maybe both can happen at same time. In that case when is bad as it executes only first matching.</p>

<p>Overall I would rewrite mapping function to form, that makes more sense to me. I think you can first setup return instance in one place rather than in different places and then at once modify it however you want. One question is logging and if it is necessary. Without logging it is even simpler, but otherwise I'd go with 1 <code>if</code> with <code>or</code> conditions and put logging in else or use else if + else in case, there is no <code>or</code> condition. Remove comments to have same functionality as in <code>when</code>.</p>

<pre><code>batchToProcess.map { aPerson -&gt;
    val personDetail = batchesOfPersonDetails.getOrDefault(
            aPerson.lcmId,
            personDetailsFromDb.getOrDefault(aPerson.lcmId, aPerson.toPersonDetail())
    )

    if (personDetail.isActive != aPerson.isActive) { //or both conditions with OR and then all changed content in one branch
        personDetail.isActive = aPerson.isActive // correct
    } /* else */
    if (personDetail.localeDetails[aPerson.localeCode] != aPerson.localeName) {
        personDetail.localeDetails[aPerson.localeCode] = aPerson.localeName
    } /* else { do logging } */

    batchesOfPersonDetails[personDetail.lcmId] = personDetail
}
</code></pre>
    </div>