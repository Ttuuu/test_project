<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very nice ideas but there is a major caveat:</p>

<p>You can break this easily if you store pointers or references to objects stored as this vector does not guarantee stable addresses:<br>
On removing elements not at the end you move an object from behind to the now-free spot in memory. This changes the address of that object.</p>

<p>The other points are already mentioned in the response by user673679 but you also asked about <code>Correctness</code> which wasn't addressed.</p>

<p>I'm afraid you can't even fix this or assert in any way as this is due to external usage behaviour. A standard <code>std::vector</code> has the same issue, but there you store value types. Here you store something similar to pointers so using code might want to do something like this:</p>

<pre><code>struct Foo{
  InterfaceBar* bar;
};
polyVector.push_back(ImplBar(42, 1337));
passToCode(Foo{polyVector[0]});
</code></pre>

<p>If this is not wanted/required it should work pretty well!</p>
    </div>