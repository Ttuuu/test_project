<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Classes</h1>
<p>You have completely failed at implementing a class.</p>
<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8 -- Style Guide for Python</a> suggests naming conventions that every Python program should (must!) follow.  For classes,
<code>CapWords</code> should be used, so <code>class hangman():</code> should be <code>class Hangman:</code> or perhaps <code>class HangMan:</code>.</p>
<p>But more seriously, your entire class implementation is broken.</p>
<p>Python scripts are executed, line-by-line, from top to bottom, unless loops, control structures, or call statements cause a branch to another location.  A <code>def</code> statement is "executed" by recording the indented program lines, and storing them under the function's name.  This means a function doesn't exist until it is executed.  For example, consider this script:</p>
<pre><code>try:
    f()                   # Call a non-existent function
except NameError:
    print("The f() function doesn't exist")

def f():                  # Create the "f" function
    print("Hello")

f()                       # Call the "f" function, and "Hello" is printed.

def f():                  # Change the "f" function by defining a new one.
    print("Goodbye")

f()                       # Call the "f" function, and now "Goodbye" is printed.
</code></pre>
<p>Similarly, when a <code>class</code> statement is executed, it creates a new namespace and executes indented statements in that namespace, such that any <code>def</code> statements record code as named methods inside that class namespace.  Other statements "executed" in the class's name space are intended to create class global variables.  You are not supposed to execute complex code directly inside the class definition; code should be inside methods defined inside <code>def</code> statements inside the class.</p>
<p>You don't have a statements creating class global variables inside <code>class hangman():</code>; you have statements executing code in loops, with conditionals.  It isn't until the entire execution of the guessing game is complete that the class namespace being constructed finally saved under the <code>hangman</code> name.  In short, the class definition isn't finished and the <code>hangman</code> class finally defined until the the moment program exits, so the class was completely useless.</p>
<p>A proper class definition should look more like:</p>
<pre><code>class Hangman:

    MAX_GUESSES = 6

    def __init__(self, secret_word):
        self._secret_word = secret_word
        self._guesses = 0
        self._right_user_input = "." * len(secret_word)

    def _check_guess(self, letter):
        ... code to check a user guess

    def play(self):
        print(f"""Welcome To The Guessing Game .
You get 6 Guesses . The Words Are In Dutch But There Is 1 English Word .

Your Word Has {len(self._secret_word)} letters""")

        for _ in range(Hangman.MAX_GUESSES):
            user_guess = input( ... )
            self._check_guess(user_guess)
            ...

        else:
            print("You lose!")
            print(f"The word was {self._secret_word}")

if __name__ == '__main__':
    the_guess_word = random.choice(words)
    game = Hangman(the_guess_word)
    game.play()
</code></pre>
<p>Of course, much here has been omitted.</p>
<p>Note the use of <code>self</code> in the class methods.  Note the use of <code>Hangman(the_guess_word)</code> which creates an instance of the <code>Hangman</code> class, and assigns it to <code>game</code>, and then <code>game.play()</code> calls the <code>play(self)</code> method of the <code>Hangman</code> class with the <code>game</code> object as <code>self</code>.</p>
    </div>