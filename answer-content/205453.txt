<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all it looks OK to me. I would maybe call the variables something else:</p>

<pre><code>list -&gt; root
tmp -&gt; currentValue
start -&gt; result
etc.
</code></pre>

<hr>

<p>In the <code>ListNode</code> class it's common practice in C# to name public members in CamelCase:</p>

<pre><code>public class ListNode
{
    public int Value;
    public ListNode Next;
    public ListNode(int x)
    {
         val = x;
         next = null;
    }
}
</code></pre>

<hr>

<p>I think that the null-conditional operator is unnecessary in the outer loop.</p>

<hr>

<p>My own version would look something like:</p>

<pre><code>public static ListNode RemoveDuplicates(ListNode root)
{
  ListNode current = root;
  ListNode result = null;
  ListNode prev = null;

  while (current != null)
  {
    bool singleFound = true;

    while (current?.val == current?.next?.val)
    {
      current = current.next;
      singleFound = false;
    }

    if (singleFound)
    {
      if (result == null)
      {
        result = prev = current;
      }
      else
      {
        prev.next = current;
        prev = prev.next;
      }
    }

    current = current?.next;

    if (singleFound &amp;&amp; prev != null)
      prev.next = null;
  }

  return result;
}
</code></pre>

<hr>

<p><strong>Some other considerations:</strong></p>

<p>The name is maybe ambiguous:</p>

<p>My first thought was that it should remove all but one entry per value:</p>

<pre><code>{ 1, 1, 2, 3, 4, 5, 5, 7, 7 } -&gt; { 1, 2, 3, 4, 5, 7 }
</code></pre>

<hr>

<p>Normally I would prefer that a static method/function would leave the argument list untouched, but you actually operate on the nodes in the list directly and return a new <code>ListNode</code> as root of the resulting list. So the original list is in an indefinite state 
when the function returns.</p>

<p>My own implementation modified to handle that:</p>

<pre><code>public static ListNode RemoveDuplicates(ListNode root)
{
  ListNode current = root;
  ListNode result = null;
  ListNode prev = null;

  while (current != null)
  {
    bool singleFound = true;

    while (current?.val == current?.next?.val)
    {
      current = current.next;
      singleFound = false;
    }

    if (singleFound)
    {
      if (result == null)
      {
        result = prev = new ListNode(current.val);
      }
      else
      {
        prev.next = new ListNode(current.val);
        prev = prev.next;
      }
    }

    current = current?.next;
  }

  return result;
}
</code></pre>

<p>If you had a class like:</p>

<pre><code>public class SortedLinkedList
{
  public void DeleteDuplicates()
  {
    ...
  }
}
</code></pre>

<p>I would on the other hand expect <code>DeleteDuplicates()</code> to operate on the current instance.</p>
    </div>