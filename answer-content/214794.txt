<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The focus of my answer will be on the public API of your <code>TextConfuser</code> class.</p>

<h2>API discussion</h2>

<p>You chose to make the text, the word list, and the confused text to become fields of this class, so a given <code>TextConfuser</code> can only operate on one text at a time, implying that a user will create a <code>TextConfuser</code> for a given text, and have it compute the confused result. For the next text, he'd create a new <code>TextConfuser</code> instance, and that's absolutely a valid lifecycle pattern.</p>

<p>What doesn't fit into that lifecycle, is the possibility to change the text via the <code>setText()</code> method - you should delete that one. If you want one <code>TextConfuser</code> to be able to convert more that one text, I'd recommend a completely different set of public methods (see further below).</p>

<p>Then, your API is forcing the user to follow a three-step sequence to get results:</p>

<pre><code>    TextConfuser tc = new TextConfuser(input);
    tc.confuse();
    String result = tc.getConfusedText();
</code></pre>

<p>This is error-prone: if your user forgets the <code>tc.confuse()</code> step, he'll get an empty result without any notice that he did something wrong.</p>

<p>I'd like to see that reduced to</p>

<pre><code>    TextConfuser tc = new TextConfuser(input);
    String result = tc.getConfusedText();
</code></pre>

<p>There are two ways how to achieve that:</p>

<ul>
<li>Have the constructor call <code>confuse()</code>, so you immediately have the results available (I can't plainly recommend that, as some developers don't like constructors to do "real work").</li>
<li>Have the <code>getConfusedText()</code> method check whether the result is already available (and call <code>confuse()</code> if not), and return that.</li>
</ul>

<p>Then, methods that are only used inside your class should be declared <code>private</code>. This applies to <code>parse()</code> (and <code>confuse()</code> if you follow my recommendation). Having public methods that aren't meant to be called by your user will only confuse him.</p>

<p>An alternative API, allowing for a TextConfuser to be used for multiple texts, even in multiple threads parallel, would be:</p>

<pre><code>public TextConfuser() {...}
public String getConfusedText(String input) {...}
</code></pre>

<p>You'd eliminate the fields, and instead pass <code>text</code>, <code>words</code>, and <code>confusedText</code> between the private methods like <code>parse()</code> and confuse():</p>

<pre><code>private List&lt;String&gt; parse(String input) {...}
private String confuse(List&lt;String&gt; words) {...}
</code></pre>

<p>Then, your user can do things like</p>

<pre><code>TextConfuser tc = new TextConfuser();
String result1 = tc.getConfusedText("I would like to know how professionals rate my code.");
String result2 = tc.getConfusedText("But actually that's just a fun program.");
</code></pre>

<p>Personally, I'd prefer that usage style over the first one.</p>

<h2>Coding style</h2>

<p>Thumbs up for following the naming conventions, for (mostly) properly indenting your code, for choosing useful variable and method names.</p>

<p>A few improvements are possible:</p>

<p>There's the <code>Collections.shuffle()</code> method you could use in place of your shuffling while loop.</p>

<p>The <code>setText()</code> method doesn't reset the <code>words</code> field, it leaves the <code>TextConfuser</code> in a confusing state where the <code>text</code> and the <code>words</code> don't match.</p>

<p>The snippet</p>

<pre><code>    StringBuilder result = new StringBuilder();
    for (String word : words) {
        result.append(word);
    }
</code></pre>

<p>doesn't serve a purpose, as you don't use the <code>result</code> variable anywhere.</p>

<p>Some of your comments should become JavaDoc, especially to describe public methods:</p>

<pre><code>/**
 * make text to a list of words for further processing.
 * A word can be a word like you know it from natural language.
 * Special symbols like punctuation characters and control characters are treated as own words
 */
public void parse() { ... }
</code></pre>
    </div>