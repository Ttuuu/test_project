<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Steve. Below are some thoughts on what you've provided. With respect, this code is really not at a state where it's reviewable per the guidelines in Code Review - it should be complete and working correctly. I understand why you're asking for a review, but maybe try to get the code further along?</p>

<p>Class names should be CamelCase, so MapSystem2 would be preferable.</p>

<p>Consistent indentation will make your code easier to read.</p>

<p>Commented-out code is a code smell.</p>

<p>Classes that aren't designed for extension should be declared <code>final</code>.</p>

<p>Variables that shouldn't be reassigned should be marked <code>final</code>.</p>

<p>Class variables should be private wherever possible. As designed, external classes can forcibly modify your maps without the knowledge of the Mapsystem2 class. That's probably not ideal.</p>

<p>Use meaningful variable names. <code>d</code> is not meaningful. <code>direction</code> is much better. Avoid unnecessary abbreviations, because you can't be sure readers of your code will translate them the same way you do.</p>

<p>Your maps would be easier to read if each internal array was placed on its  own line.</p>

<p>Most of the comments don't serve any purpose, as they just describe what the code is doing. Comments are usually used to explain why the code is doing something, not what it is doing.</p>

<p>Please choose one language for your comments.</p>

<p>In Java we traditionally put <code>{</code> on the same line, not a newline by itself.</p>

<p>In Java we traditionally put whitespace between a control flow statement (<code>if</code>, <code>while</code>) and the opening paren, to visually differentiate them from method invocations.</p>

<p>In Java we traditionally put whitespace on both sides of operators and equals signs for readability. </p>

<p>You don't need () around a return value.</p>

<p>Tracking location using an <code>int[]</code> is not ideal. What happens when somebody passes in an array of size 1 or 3? Either use separate variables for <code>x</code> and <code>y</code>, use an existing library class, or create your own location class.</p>

<p>There is some argument on this point, but I find it much clearer to explicitly return when you know the return value, rather than storing a variable. I don't want to have to read the rest of a method just to figure out that the value doesn't change again before it gets returned.</p>

<p>In <code>tileCheck</code>, you assign <code>x</code> and <code>y</code>, then don't use them in the first <code>if</code> check.</p>

<p>The logic in <code>tileCheck</code> is very confusing. "If you try to walk off the map or enter a square with a 1, return 1. If you try to enter a square with a 0, tell the user they can't go there then return 0. Otherwise, return 0." </p>

<p>This class desperately needs documentation indicating what 0, 1, 2, 3, 4 actually mean. A reader will have no idea what they're dealing with. </p>

<p>Likewise, the meaning of the return value for <code>tileCheck</code> is unclear. It looks like 0 means an invalid move from later code, which would make the return value of the first check wrong?</p>

<p>Direction is best modeled with an <code>enum</code>. Using a map from input strings to directions would let you support multiple movement methods - "N", "North", "w" all move you north, etc. </p>

<p>There's a lot of repetition in the <code>movement</code> method. Everything that appears in all four branches should be pulled out of the conditionals.</p>

<p>It is counterintuitive that the north direction takes you towards the bottom of the map. I expect that's a bug.</p>

<p>You're calling <code>tileCheck</code> based on the user's current position before they move. That means that they can move off the map one square, and then get stuck and can't get back on it. Also a bug.</p>

<p><code>Scanner</code> should be closed when you're done using it, and you shouldn't create a new scanner every time through your loop. Use a <code>try-with-resources</code> block to handle closing it.</p>

<p>Declare variables as closely as possible to where they're first used.</p>

<p><code>while (a == 1)</code> is effectively <code>while (true)</code>, since <code>a</code> is never changing.</p>

<p><code>map</code> is unused in <code>main</code>.</p>
    </div>