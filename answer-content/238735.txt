<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Redundant summing</h1>

<blockquote>
<pre><code>    // The hand vector contains the maximum number of cards
    // We can now compute its value
</code></pre>
</blockquote>

<p>That is not completely true, the value could have been built up incrementally each time a card was added to the hand, which would remove some duplicated work: hands that share a common prefix would not each recompute the sum of the values of that prefix, as they do now. So it's not just redistributing the work that is done in that loop, duplicate work goes away by reusing the results.</p>

<h1>Contention</h1>

<p>A performance trap here is that all threads are slamming the same <code>results</code> array, and even in the same places. Of course, the counters are atomic, so <em>the result</em> should come out fine. But there is heavy contention, and even <a href="https://fgiesen.wordpress.com/2014/08/18/atomics-and-contention/" rel="noreferrer">atomic operations don't make contention fast</a>. The contention can be solved by giving each thread its own array of local counts (sufficiently aligned and padded to also avoid <em>false</em> sharing), and summing them into the total at the end. As a bonus, only the additions at the end need to be atomic, not the individual increments - they can be the faster non-atomic increments now.</p>

<p>On my PC (4770K Haswell), compiled with MSVC and using <code>DECK_SIZE 31</code> (to save time), and commenting out <code>loop++</code> (which has a significant cost), the effect of that was:</p>

<pre><code>original:    3.0 seconds
incremental: 2.6 seconds
local count: 0.6 seconds
</code></pre>

<p>Since the deck was smaller, the access pattern to <code>results</code> was different, so esspecially the result for using local counts is not necessarily representative of how much speedup the "full deck" version would have.</p>

<h1>Missing include</h1>

<p><a href="https://en.cppreference.com/w/cpp/string/basic_string/to_string" rel="noreferrer"><code>std::to_string</code></a> is in <code>&lt;string&gt;</code> which was not included.</p>
    </div>