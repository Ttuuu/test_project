<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>FYI. I've now tested the different versions of the algorithm from the different answers, and the result is as follows:</p>

<pre><code>Data Size: 10
Name       Iterations        Average            Min            Max          Total        Std Dev    Units
Pieter Wit:        50        0.38341        0.05530       16.09750       19.17070        2.24480    [Milliseconds]
dfhwze    :        50        0.09890        0.01250        3.96660        4.94510        0.55250    [Milliseconds]
Peter Tayl:        50        0.14559        0.01500        6.16400        7.27940        0.85970    [Milliseconds]
T3chb0t   :        50        0.18089        0.01240        8.06260        9.04470        1.12590    [Milliseconds]
Original  :        50        0.11584        0.01640        4.54850        5.79220        0.63330    [Milliseconds]

Data Size: 100
Name       Iterations        Average            Min            Max          Total        Std Dev    Units
Pieter Wit:        50        0.52665        0.48760        0.78700       26.33230        0.05190    [Milliseconds]
dfhwze    :        50        0.14118        0.11800        0.24010        7.05920        0.02070    [Milliseconds]
Peter Tayl:        50        0.15725        0.14010        0.35670        7.86250        0.03030    [Milliseconds]
T3chb0t   :        50        0.13385        0.11880        0.18680        6.69250        0.01470    [Milliseconds]
Original  :        50        0.15542        0.14090        0.32780        7.77100        0.02600    [Milliseconds]

Data Size: 1000
Name       Iterations        Average            Min            Max          Total        Std Dev    Units
Pieter Wit:        50        4.86897        4.56660        5.49500      243.44840        0.19180    [Milliseconds]
dfhwze    :        50        1.22802        1.14460        1.55030       61.40110        0.10070    [Milliseconds]
Peter Tayl:        50        1.51039        1.41420        1.83450       75.51970        0.10540    [Milliseconds]
T3chb0t   :        50        1.33878        1.13730        2.61480       66.93920        0.21000    [Milliseconds]
Original  :        50        1.53352        1.39930        1.93510       76.67620        0.12120    [Milliseconds]

Data Size: 10000
Name       Iterations        Average            Min            Max          Total        Std Dev    Units
Pieter Wit:        50       53.30435       48.53940       59.39360     2665.21760        2.12420    [Milliseconds]
dfhwze    :        50       13.29163       11.58010       17.93610      664.58150        1.42940    [Milliseconds]
Peter Tayl:        50       15.99885       13.73030       19.87350      799.94260        1.62800    [Milliseconds]
T3chb0t   :        50       13.35479       11.60260       17.27620      667.73940        1.33350    [Milliseconds]
Original  :        50       16.06655       14.10760       21.15530      803.32750        1.57870    [Milliseconds]

Data Size: 100000
Name       Iterations        Average            Min            Max          Total        Std Dev    Units
Pieter Wit:        50      759.18213      671.44490      972.02490    37959.10640      106.57280    [Milliseconds]
dfhwze    :        50      184.68625      157.19610      240.79290     9234.31240       27.82440    [Milliseconds]
Peter Tayl:        50      247.55367      207.27300      296.28640    12377.68350       38.71610    [Milliseconds]
T3chb0t   :        50      200.40129      159.78880      241.07520    10020.06430       31.49570    [Milliseconds]
Original  :        50      250.01759      208.41280      324.99400    12500.87940       39.78020    [Milliseconds]

Data Size: 500000
Name       Iterations        Average            Min            Max          Total        Std Dev    Units
Pieter Wit:        50     4241.30253     3572.39540     4887.39420   212065.12660      382.99050    [Milliseconds]
dfhwze    :        50     1009.33538      798.42660     1143.81710    50466.76910      124.30220    [Milliseconds]
Peter Tayl:        50     1344.13312     1085.37460     1562.34310    67206.65590      185.08020    [Milliseconds]
T3chb0t   :        50     1002.87650      784.16660     1195.38060    50143.82510      136.03740    [Milliseconds]
Original  :        50     1354.36220     1072.92070     1536.09860    67718.10980      171.94550    [Milliseconds]
</code></pre>

<p>Test Data: randomly generated strings of length [0, 20), and the testcase was:</p>

<pre><code>  foreach (var result in data.MultiGroupBy(
    ("First UCase", s =&gt; s.Length &gt; 0 &amp;&amp; char.IsUpper(s[0])),
    ("Length", s =&gt; s.Length),
    ("Length Four", s =&gt; s.Length == 4),
    ("Contains 'e'", s =&gt; s.Contains('e')),
    ("Num 'n's", s =&gt; s.Count(c =&gt; c == 'n'))))
  {
    foreach (var dict in result.Value)
    {
      sum += dict.Value.Count;
    }
  }
</code></pre>

<p>In order to get equivalent results, I changed the <code>HashSet</code> in the original with a <code>List</code>.</p>

<p>It's somehow a little disappointing that my efforts to do it in one iteration didn't pay off.</p>
    </div>