<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your current code allocates several objects on the heap even though it doesn't need to. A string, a character array and several character objects.</p>

<p>Puzzles like this can often be solved not by inspecting each bit individually but by processing them in parallel. An alternative approach is:</p>

<p>To find the binary gap of n:</p>

<ul>
<li>Discard all trailing zeros.</li>
<li>As long as n does not consist of 1s only:

<ul>
<li>Combine n with n shifted to the right by one place.</li>
</ul></li>
<li>The number of repetitions is the length of the largest gap.</li>
</ul>

<p>Taking 1000010001000 as an example:</p>

<pre><code>1000010001   after 0 steps
1100011001   after 1 step
1110011101   after 2 steps
1111011111   after 3 steps
1111111111   after 4 steps
</code></pre>

<p>It took 4 steps, therefore the binary gap is 4.</p>

<p>In Java, this code becomes:</p>

<pre><code>public static int binaryGap(int n) {
    n &gt;&gt;&gt;= Integer.numberOfTrailingZeros(n);
    int steps = 0;
    while ((n &amp; (n + 1)) != 0) {
        n |= n &gt;&gt;&gt; 1;
        steps++;
    }
    return steps;
}
</code></pre>

<p>As said in the above description, this code runs in <span class="math-container">\$\mathcal O(\text{gap})\$</span>, which is a bit better than <span class="math-container">\$\mathcal O(\text{bits})\$</span>.</p>

<p>It might be worth making it run in <span class="math-container">\$\mathcal O(\log_2 \text{gap})\$</span> by first taking 16 steps at once, then 8, then 4, then 2, then 1. If that's possible at all. For 32 bits it's entirely possible to compare all results of the optimized version against the simple code shown above. But then I guess the code will become much more complicated.</p>
    </div>