<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know about the GDI Library but there a still some things in this code which could need a examination:</p>

<pre><code>// Create window
hwnd = CreateWindowEx(0, szClassName, L"Test Transparent Static Main Window", WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | WS_CLIPCHILDREN, 100, 100, WINDOW_WIDTH, WINDOW_HEIGHT, HWND_DESKTOP, NULL, hThisInstance, NULL);
ShowWindow(hwnd, nFunsterStil);
</code></pre>

<p>That is a very, very long line. It is recommended to limit the line length, so you have the option two watch two source codes next to each other on the screen.</p>

<p>Isn't this a lot better to read to see what goes into making this Windows?</p>

<pre><code>// Create window
hwnd = CreateWindowEx(
    0, szClassName, L"Test Transparent Static Main Window", 
    WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | 
    WS_CLIPCHILDREN, 100, 100, WINDOW_WIDTH, WINDOW_HEIGHT, HWND_DESKTOP, 
    NULL, hThisInstance, NULL);
</code></pre>

<p>I personally stick with 80 lines per row. It forces you to write more clean code and keep the complexity in youre code down. In the end you write mire readable code For a discussion. why see here:
<a href="https://softwareengineering.stackexchange.com/questions/604/is-the-80-character-limit-still-relevant-in-times-of-widescreen-monitors">https://softwareengineering.stackexchange.com/questions/604/is-the-80-character-limit-still-relevant-in-times-of-widescreen-monitors</a></p>

<p>Then annother issue:</p>

<pre><code>// Global Variables
HWND hWnd;
HINSTANCE hInstance;
ULONG_PTR gdiplusToken;
int count;
Style lk;
</code></pre>

<p>You should nearly never use global variables. They are simply a maintenance Hazard. If you feel that without them beeing global you have to pass them to too many functions then probaly it is a good reason to  refactor youre code into using a <code>class</code>.
See <a href="https://stackoverflow.com/questions/484635/are-global-variables-bad">https://stackoverflow.com/questions/484635/are-global-variables-bad</a> </p>

<p>Annother thing is the complexity of the code. Take youre WinMain function:</p>

<pre><code>int WINAPI WinMain(
    HINSTANCE hThisInstance, HINSTANCE hPrevInstance, LPSTR lpszArgument, 
    int nFunsterStil) {

    // GDI+
    GdiplusStartupInput gdiplusStartupInput;
    GdiplusStartup(&amp;gdiplusToken, &amp;gdiplusStartupInput, NULL);

    // Normal Vars
    HWND hwnd;
    MSG messages;
    WNDCLASSEX wincl;

    // window structure to register
    wincl.hInstance = hThisInstance;
    wincl.lpszClassName = szClassName;
    wincl.lpfnWndProc = WindowProcedure;
    wincl.style = CS_DBLCLKS;
    wincl.cbSize = sizeof(WNDCLASSEX);
    // defaults
    wincl.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wincl.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
    wincl.hCursor = LoadCursor(NULL, IDC_ARROW);
    wincl.lpszMenuName = NULL;
    wincl.cbClsExtra = 0;
    wincl.cbWndExtra = 0;
    // background color
    wincl.hbrBackground = (HBRUSH)GetStockObject(LTGRAY_BRUSH);

    // register window class
    if (!RegisterClassEx(&amp;wincl))
        return 0;

    // Create window
    hwnd = CreateWindowEx(
        0, szClassName, L"Test Transparent Static Main Window", 
        WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | 
        WS_CLIPCHILDREN, 100, 100, WINDOW_WIDTH, WINDOW_HEIGHT, HWND_DESKTOP, 
        NULL, hThisInstance, NULL);

    ShowWindow(hwnd, nFunsterStil);

    // Set globals
    hWnd = hwnd;
    hInstance = hThisInstance;

    // Main window message loop
    while (GetMessage(&amp;messages, NULL, 0, 0)) {
        TranslateMessage(&amp;messages);
        DispatchMessage(&amp;messages);
    }
    return messages.wParam;
}
</code></pre>

<p>There is a lot of stuff going on and it makes youre eyes bleed to focus on certain parts. You also realized that by commenting certain blocks what they are doing. A better approach is making the comments into functions and hiding the more low level parts.</p>

<p>Here the refactored method (still not perfect but to give you a hint):</p>

<pre><code>WNDCLASSEX initWindowStructure(HINSTANCE hThisInstance)
{
    WNDCLASSEX wincl;

    // window structure to register
    wincl.hInstance = hThisInstance;
    wincl.lpszClassName = szClassName;
    wincl.lpfnWndProc = WindowProcedure;
    wincl.style = CS_DBLCLKS;
    wincl.cbSize = sizeof(WNDCLASSEX);
    // defaults
    wincl.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wincl.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
    wincl.hCursor = LoadCursor(NULL, IDC_ARROW);
    wincl.lpszMenuName = NULL;
    wincl.cbClsExtra = 0;
    wincl.cbWndExtra = 0;
    // background color
    wincl.hbrBackground = (HBRUSH)GetStockObject(LTGRAY_BRUSH);

    return wincl;
}

HWND createWindow(HINSTANCE hThisInstance)
{
    return CreateWindowEx(
        0, szClassName, L"Test Transparent Static Main Window",
        WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX |
        WS_CLIPCHILDREN, 100, 100, WINDOW_WIDTH, WINDOW_HEIGHT, HWND_DESKTOP,
        NULL, hThisInstance, NULL);
}


int WINAPI WinMain(
    HINSTANCE hThisInstance, HINSTANCE hPrevInstance, LPSTR lpszArgument, 
    int nFunsterStil) {

    // GDI+
    GdiplusStartupInput gdiplusStartupInput;
    GdiplusStartup(&amp;gdiplusToken, &amp;gdiplusStartupInput, NULL);

    // Normal Vars
    MSG messages;
    WNDCLASSEX wincl = initWindowStructure(hThisInstance);

    // register window class
    if (!RegisterClassEx(&amp;wincl))
        return 0;

    HWND hwnd  = createWindow(hThisInstance);

    ShowWindow(hwnd, nFunsterStil);

    // Set globals
    hWnd = hwnd;
    hInstance = hThisInstance;

    // Main window message loop
    while (GetMessage(&amp;messages, NULL, 0, 0)) {
        TranslateMessage(&amp;messages);
        DispatchMessage(&amp;messages);
    }
    return messages.wParam;
}
</code></pre>

<p>Suddenly The Method is easier to follow don't you thing. Probaly you are not sad that the ugly details are hidden away. And unlike comments the methods we created can stay. Comments have the danger of disappear or get out date...</p>
    </div>