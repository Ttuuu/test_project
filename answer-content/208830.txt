<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks not bad at all. However, it could look more professional, and to my not very picky eye there seem to be errors. </p>

<h3>HTML</h3>

<ul>
<li>There are no html-head-body tags, but every HTML document should have them. Nothing bad will happen, as modern browsers are really smart and will render your code correctly. These tags can be omitted by the HTML standards (e.g. <a href="https://html.spec.whatwg.org/multipage/semantics.html#the-html-element" rel="nofollow noreferrer">WHATWG</a>), but it is sort of a good style to have them always included. It will help whoever reads your code understand, that it is a document, not a part or template to be included somewhere else (if you didn't mean exactly this, of course).</li>
<li>The third DIV element is not closed, this is an error that will cause your HTML render not correctly. Use traditional <code>&lt;div class="box"&gt;&lt;/div&gt;</code> or one-tag self-closing syntax: <code>&lt;div class="box"/&gt;</code></li>
</ul>

<h3>Javascript</h3>

<p>At the first glance, it is nice, but it doesn't look like Javascript. To look like Javascript, it should follow, or at least visually be close to one of coding conventions. Just a couple of things to be mentioned, that come to my mind:</p>

<ul>
<li>No header. A header really helps you (some time later), or another person, to understand what it is, what it does, who and when wrote it, what language it is written in, and many other things you may want to let the future generations know. This is just a /**/-comment block on the top of the script.</li>
<li><p>Var-group. There are two main trends with defining the variables in JS - in the header / top of the script / block / function, or right before the place they are used. I personally prefer the first approach as more traditional, and besides that you assign initial values in your script, which makes it logic to do it as you did it. Var block can be grouped under the same var expression for better readability and more laconic and easier to transfer code. E.g. </p>

<p><code>var velocity = 2,
    acceleration = 0.002,
    //...
    key_up = false;
</code></p></li>
<li><p>Separate the next logical paragraph (add listeners) with a blank line, don't keep it in the same paragraph with the "var" paragraph;</p></li>
<li><p>Function body is not indented well. The indentation should start with the first line of the function body. The rest is fine. E.g.</p>

<p><code>function example() {
    //first line indented
    //block opens: {
        //block indented
    //}
}</code></p></li>
<li><p>Good style is to put a block comment descriptor in front of every function to describe it.</p></li>
<li>Use strict comparison, instead of type-independent (e.g. <code>a === b</code> instead of <code>a == b</code>). This will help you avoid some issues later.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval" rel="nofollow noreferrer">setInterval</a> is missing the second argument - interval.</li>
<li><p>Defining function for a callback argument in the function call expression is not really a good practice, as it decreases readability and mantainability of your code and may lead to a "Callback hell", so I would recommend first define a named function and then specify it is an argument for the setInterval method. E.g. </p>

<p><code>function example() {
    //function body
}
setInterval(example, 1000);
</code></p></li>
</ul>

<p>And, in case if there are things that you don't know and which I mentined, but didn't reference here, you know how to search the web, right? =) Reading about coding conventions and a couple of articles about the good JS coding style may defenetely help.</p>
    </div>