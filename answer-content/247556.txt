<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Classes</h2>
<p>Why do you need a separate class for each game whose data you request? This is very inflexible, should you need to request the data for more or fewer games. Just use one class to represent a game. It looks like all the attributes in your game classes are identical except for the key or index used to access GAMEID. Therefore, just use a range based loop to get as many instances of the same class as you need, storing the instances in a data structure such as a list. This is exactly the motivation for having a class in the first place; you bundle data and functionality together so you can reuse it.</p>
<pre><code>game1= GAME1()
game2= GAME2()
game3= GAME3()
game4= GAME4()
game5= GAME5()
game6= GAME6()
game7= GAME7()
game8= GAME8()
game9= GAME9()
game10= GAME10()
</code></pre>
<p>This whole thing should really be a loop.</p>
<h2>Names</h2>
<p>Also, naming. names like url2 are not very descriptive. What exactly is the url? The names should be clear and unambiguous. In this case it's not that big of a deal since you're only using them once or twice.</p>
<h2>Functions/Methods</h2>
<p>Your code doesn't have a single function in it. This is not good. Just look at that block of code that you copy-pasted for all 20 of your classes. If you had defined it as a function once you could just call that function 20 times. By using a loop that function would have to appear in code just one time.</p>
<p>That whole block at the bottom should be in a function too.</p>
<p>Ideally the only top level execution in your program should be this:</p>
<pre><code>if __name__ == '__main__':
    main()
</code></pre>
<p>or</p>
<pre><code>if __name__ == '__main__':
    # body of what would have been main()
</code></pre>
<p>to encapsulate all functionality in one place, after all the definitions, and to make sure that if the module is imported (namespace isn't __main__), it won't be executed.</p>
<h2>Requests</h2>
<p>after a statement like r = requests.get(), call r.raise_for_status() since it will notify you if the request fails.
also, instead of concatenating arguments into the url string, call get() with two parameters. One being the API URL without your specific queries, and the other being a dictionary mapping keywords to your queries.</p>
<pre><code>r = requests.get('https://...', {'keyword' : query})
r.raise_for_status()
</code></pre>
<h2>Style</h2>
<p>Too much white space. Refer to the Python style guide.</p>
    </div>