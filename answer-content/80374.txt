<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Warning:</strong> The following is opinionated at times. At other times it is <a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/" rel="nofollow noreferrer">more opinionated</a>.</p>
<h2>Channeling PG</h2>
<p>I've heard on the internet so it must be true, that Paul Graham will get right to the point when interviewing applicants to Y-Combinator with "What problem does this solve?" It's hard to understand code without understanding what it is supposed to do. And only Google and watching a video twice make me think I might. Since I still don't understand the code though, I can't tell whether it solves the problem or not.</p>
<p>The <a href="http://demonstrations.wolfram.com/WaterPouringProblem/" rel="nofollow noreferrer">"water pouring problem"</a> is a canonical toy problem in programming curricula. <a href="http://mathworld.wolfram.com" rel="nofollow noreferrer"><em>Wolfram Mathworld</em></a> describes it as a special case of the <a href="http://mathworld.wolfram.com/ThreeJugProblem.html" rel="nofollow noreferrer">three jugs problem</a>. The special case is where the third jug:</p>
<pre><code>   capacity = +infinity
   contents = +infinity
</code></pre>
<p>The infinite capacity of the third jug allows it to represent a sink into which the contents of the other jugs may be emptied. The infinite contents allows the third jug to represent a faucet for filling other jugs.</p>
<p>The problem Ordersky presents is none of these. It is a generalized case based on a Python example from Peter Norvig's <a href="https://www.class-central.com/mooc/323/udacity-design-of-computer-programs" rel="nofollow noreferrer"><em>Design of Computer Programs</em></a> course at Udacity. The problem Odersky is solving has an arbitrary number of jugs with finite capacity plus one jug with infinite capacity and contents. I would like to dub this the "n+1 Jugs Problem" because <code>1</code> captures the sink/faucet and <code>n+1</code> hints at the notion of <code>+infinity</code> [at least in my little world].</p>
<h2>Readability</h2>
<p><strong>A joke:</strong> <em>I married my wife despite her adamant unwillingness to change her name. What's the big deal about being called "Donna" to match my tattoo?</em></p>
<p>Rich Hickey invented Clojure to help working programmers write good programs, not to give the world another excuse for tribal tattoos. I don't think <code>init</code> or <code>def</code> inside a function are big deals. They're very Pythonic and they couldn't make the code less readable for idiots like me.</p>
<h3>Chiapas</h3>
<p>I found the code opaque. "What is <code>state</code>?" I asked myself. I could look at the code for hours and never really figure it out. It took a half hour of concerted effort involving Google and watching a <a href="http://vimeo.com/53207609" rel="nofollow noreferrer">video of Martin Odersky</a>...twice before I came up with a good answer: <code>state</code> is a vector of integers. In <a href="https://gist.github.com/yankov/5538283" rel="nofollow noreferrer">Ordersky's code</a> this is explicit at line 6:</p>
<pre><code> type State = Vector[Int]
</code></pre>
<p>That's just standard Scala. It's fast in the sense that many people will understand it as soon as they read it. The Clojure implementation, on the other hand, is really slow because the source code doesn't make the nature of state clear. A [more opinionated][more opinionated] approach might be:</p>
<pre><code> ;;;; The state is a vector of integers.
 ;;;; Each element represents a glass.
 ;;;; The value of each element represents the contents of the glass.
</code></pre>
<p>A more direct implementation of the Scala code might use <code>int-array</code> for both <code>state</code> and <code>glasses</code>. There's nothing wrong with using types to make writing correct clear performant code easier.</p>
<h2>Recommendations</h2>
<p>Think about how much effort Odersky invests in making his code understandable. There's thirty minutes of video. There's the hours of video that come before it in the course sequence. The coding session starts with diagrams explaining the problem. Those are habits that are worth emulating. Following what Clojurists on the internet espouse doesn't make one an expert [I am aware of the irony]. Clojure is the product of <a href="http://www.youtube.com/watch?v=f84n5oFoZBc" rel="nofollow noreferrer">Hammock Driven Development</a>.</p>
<h2>Extension</h2>
<p>I'm a big fan of <a href="http://channel9.msdn.com/Events/Build/2014/3-642" rel="nofollow noreferrer">Lamport's idea</a> specification as the starting point. One of the issues with Odersky's generalized approach is that it doesn't quickly trim the search space. Consider the case with two glasses:</p>
<pre><code> (def capacity  { :a 1
                  :b 100})
 (def target  50)           ; edit: early version used 99
</code></pre>
<p>The solution exists in the 99th layer of Odersky's onion because it requires 99 moves. With two glasses There are only six transition operations at each level of the onion:</p>
<pre><code> ; empty a
 ; empty b
 ; pour from a to b
 ; pour from b to a
 ; fill a
 ; fil  b
</code></pre>
<p>Yet the brute force search would cover:</p>
<pre><code> level | paths
 ------|-------
 1     |  2
 2     |  12
 3     |  72
 4     |  432
 ...   |  ...
 99    |  3.6295479083337274E76 = (6^99)/3
</code></pre>
<p>At an arbitrary iteration some may lead to states already visited and Odersky's approach trims those. What it doesn't do is capture the semantics of bags to trim the search space. Consider:</p>
<pre><code> (def capacity  { :a 1
                  :b 100
                  :c 1
                  :d 1
                  :e 1
                  :f 1})
 (def target  50)           ; edit: early version used 99
</code></pre>
<p>Many of the <code>(Math/pow 42 99)</code> states turn out to be equivalent and finding these equivalences would greatly reduce the search space and make for a more performant algorithm. For the purposes of Odersky's course [promoting Scala and functional programming] looking at algorithmic improvements is outside the mandate. For general code such as that under open review, it really isn't.</p>
    </div>