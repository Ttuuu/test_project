<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I was just playing around with this concept today. I have a User class defined in another assembly. Then I created three classes "based on" (but not derived from) that User class: CreateUser, EditUser, and DetailsUser. Each contains View-specific DataAnnotations (Required, DataType, etc.).</p>

<pre><code>public class CreateUser
{
    [Required]
    public String FirstName { get; set; }
    [Required]
    public String LastName { get; set; }
    [Required]
    [DataType(DataType.EmailAddress)]
    public String Email { get; set; }
    [Required]
    [DataType(DataType.Password)]
    public String Password { get; set; }
    [Required]
    [DataType(DataType.Password)]
    public String VerifyPassword { get; set; }
}
</code></pre>

<p>CreateUser has no ID, and has an extra property, VerifyPassword. My validation logic ensures that VerifyPassword==Password. There is no ID property, because it's a new User. After validation in my Create action, I can then map it to a User and add it to my data store.</p>

<pre><code>public class EditUser 
{
    [HiddenInput(DisplayValue = false)]
    public int Id { get; set; }
    [Required]
    public String FirstName { get; set; }
    [Required]
    public String LastName { get; set; }
    [Required]
    [DataType(DataType.EmailAddress)]
    public String Email { get; set; }
}
</code></pre>

<p>For Edit User, I pull the user from the database, and map it to an EditUser object. EditUser has a read-only and hidden ID, and no Password properties. MVC's model binder prevents anyone from injecting properties on the User object that don't exist on the EditUser object. </p>

<pre><code>public class DetailsUser
{
    [HiddenInput(DisplayValue = true)]
    public int Id { get; set; }
    public String FirstName { get; set; }
    public String LastName { get; set; }
    public String Email { get; set; }
    public String Password { get { return "Not Shown"; } }
}
</code></pre>

<p>For DetailsUser, I do something similar, again hiding the Password property. </p>

<p>You are right about the class explosion. However, each class is very tiny and self-contained. The nice thing about keeping all of this in the ViewModels is that I am free to use Html.EditorForModel() in my views. For me, the choice is extra code in my ViewModels, or extra code in my Views. It's up to you where to put it. </p>

<p>It does seem to violate DRY, having multiple User-based classes with duplicate properties. I thought perhaps they could derive from a common class, and maybe even User itself. I'm still thinking on that, and am open to thoughts and suggestions.</p>

<p>As for the mapping, I have been playing around with the Moo project (https://github.com/dclucas/MOO). It has a simple mapper that I find easier to use than AutoMapper. </p>

<pre><code>var editUser= user.MapTo&lt;EditUser&gt;();
</code></pre>

<p>This creates an EditUser object from an existing User object, provided the property names match.</p>
    </div>