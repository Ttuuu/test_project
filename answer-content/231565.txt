<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the design of the code looks fine. Bearing in mind that this code was posted ~3 years ago and you likely have learned quite a bit since then, I have some comments about both the UI and the code.</p>

<h2>UI</h2>

<p>After adding an item, the text input value persists and the user must manually clear it. Many users would likely welcome having the value cleared after an item is added to the list.</p>

<p>The buttons labeled <code>all</code>, <code>active</code> and <code>complete</code> could be grouped with a label for <code>Show:</code> (and thus it would make sense to move the <code>reset</code> button to a different line) or else have <code>Show</code> added to the beginning of each label's text. </p>

<h2>Code</h2>

<p>The code has a fair amount of comments. The indentation is somewhat inconsistent, as some lines are indented with one tab whereas others have an additional tab (or sometimes two - e.g. <code>Event</code>s <code>notify</code> function). The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">ES-6 Classes</a> could be used to simplify the objects.</p>

<p>The <code>&lt;ul&gt;</code> element is selected by <code>id</code> in the <code>View</code> function:</p>

<blockquote>
<pre><code>var listContainer = document.getElementById("mainList");
</code></pre>
</blockquote>

<p>but it is never used in that function. The <code>render</code> method selects the elements with that tagName:</p>

<blockquote>
<pre><code>var ul = (document.getElementsByTagName("ul"))[0];
</code></pre>
</blockquote>

<p>Perhaps it would be better to store <code>listContainer</code> on <code>this</code> in the <code>View</code> function and utilize it in the <code>render</code> method.</p>

<p>The code that generates the list items creates buttons foreach item:</p>

<blockquote>
<pre><code>li.innerHTML = value + "&lt;button name='remove' id=" + i + "&gt;x&lt;/button&gt;" + "&lt;button name='complete' id=" + i + "&gt;&amp;#10003;&lt;/button&gt;";
</code></pre>
</blockquote>

<p>Both buttons will thus have the same <em>id</em> attribute, but those should be unique<sup><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer">1</a></sup>. Additionally, for backwards-compatibility (with HTML 4) an <em>id</em> value should start with a letter. Perhaps using <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes" rel="nofollow noreferrer">data attributes</a> would be a better solution.</p>

<p>Variable <code>that</code> in the <code>View</code> function could be eliminated if the event handler function was bound to <code>this</code> via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>Function.bind()</code></a></p>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id</a></sub> </p>
    </div>