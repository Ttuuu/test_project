<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't iterate over the indices of a list only to then access the element at that index. Instead iterate directly over the elements of the list! Have a look at <a href="https://nedbatchelder.com/text/iter.html" rel="noreferrer">Loop Like A Native by Ned Halder</a>.</p>

<p>In the standard library module <a href="https://docs.python.org/3/library/itertools.html" rel="noreferrer"><code>itertools</code></a> there is the <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>groupby</code></a> function, which groups equal elements together. You can use this to make your code easier:</p>

<pre><code>from itertools import groupby

def max_streaks(tosses):
    longest_streaks = {"Heads": 0, "Tails": 0}
    for toss, streak in groupby(tosses):
        longest_streaks[toss] = max(longest_streaks[toss], len(list(streak)))
    return longest_streaks["Heads"], longest_streaks["Tails"]


max_streaks("Heads, Tails, Tails, Tails, Heads, Heads, Tails".split(", "))
# 2, 3
</code></pre>

<p>Note that this does not assume anything about <code>tosses</code>, unlike your code. It could be a list or a string, but also something like a <a href="https://wiki.python.org/moin/Generators" rel="noreferrer">generator</a>, which has no <code>len</code>.</p>

<p>You could generalize this function to being able to count the longest streak of any elements by using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a> and returning it:</p>

<pre><code>from collections import defaultdict
from itertools import groupby
from typing import Dict, Iterable, Hashable

def longest_streaks(elements: Iterable[Hashable]) -&gt; Dict[Hashable, int]:
    """Count the length of the longest streak of each distinct element 
    present in `elements`.
    All elements need to be hashable.
    """
    longest_streak = defaultdict(int)
    for element, streak in groupby(elements):
        longest_streak[element] = max(longest_streak[element], len(list(streak)))
    return dict(longest_streak)


if __name__ == "__main__":
    longest_streaks([1, 2, 2, 3, 3, 3, 1, 1, 1, 2, 2, 3])
    # {1: 3, 2: 2, 3: 3}
</code></pre>

<p>Note that I followed Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, by using <code>lower_case</code> for variables and functions and wrapped the calling code in a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without running the example. I also added some <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">type hints</a> and a <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer">docstring</a>, which makes it easier to figure out what a function does, both for anybody else reading your code and for yourself in two months.</p>
    </div>