<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there anything else that stands out as not being Go like?</p>
</blockquote>

<p>While reading through your code, I only noticed a few things that weren't idiomatic Go, so congrats!</p>

<h2>Avoid <code>print()</code> and <code>println()</code> in favor of <code>fmt</code></h2>

<pre><code>for i := range b.state {
    for j := range b.state[i] {
        print(" " + strconv.Itoa(b.state[i][j]) + "")
    }
    println()
}
</code></pre>

<p>Becomes:</p>

<pre><code>for i := range b.state {
    for j := range b.state[i] {
        fmt.Printf(" %d ", b.state[i][j])
    }

    fmt.Println()
}
</code></pre>

<p>Notice that you also avoid <code>strconv.Itoa()</code>.</p>

<h2><code>rand.Intn((1 -0 + 1) + 0)</code></h2>

<p>You mean <code>rand.Intn(2)</code>?</p>

<h2><code>log.Fatal()</code> instead of <code>panic()</code></h2>

<p>In your example usage, you use <code>panic()</code> to raise an error. Unless you plan to <code>recover()</code> from that, you can use <code>log.Fatal()</code> to write to standard error and exit the program.</p>

<pre><code>panic("Failed to instantiate board")
</code></pre>

<p>Would be more commonly done as:</p>

<pre><code>log.Fatalf("Failed to instantiate board: %s", err)
</code></pre>

<p>Or whatever error grammar you prefer. If you have an error value, you might as well use it to indicate the potential problem to the user.</p>

<h2>Inconsistent formatting</h2>

<p>For example:</p>

<pre><code>func nextStateForCell(b *board, i,j int) int {
</code></pre>

<p>Would be consistently spaced as such:</p>

<pre><code>func nextStateForCell(b *board, i, j int) int {
</code></pre>

<p>It's a nitpick. If you run <code>go fmt</code> on the source code, it should fix these kinds of things. If you use vim, there's also <a href="https://github.com/fatih/vim-go" rel="nofollow noreferrer">vim-go</a>, which I find very helpful.</p>

<hr>

<blockquote>
  <p>I have a colleague who is big into Go and favors immutability and no side effects. I can see how that would be ideal for concurrency, but does the general Go community prefer avoiding mutations?</p>
</blockquote>

<p>I'm not sure if there's a consensus. Normally the answer is: "It depends." I think the way you've done it is fine. By mutating the state directly, you avoid potentially-costly memory allocations. So, for example, if you want to see the state after a trillion generations, it would likely be faster than if you constantly reassign based on return values.</p>

<p>Since you're new to Go, I recommend experimenting with concurrency. Here, you can concurrently read and determine the next state of the board.</p>

<hr>

<p><a href="https://golang.org/doc/play/life.go" rel="nofollow noreferrer">Here</a> is another example of a Go implementation of Conway's Game of Life, straight from the Go website.</p>

<p>Notice that they use a boolean field, rather than an integer one. This is more common (and performant), given that living is boolean.</p>
    </div>