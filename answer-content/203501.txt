<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>An <code>xor</code> of two even numbers is necessarily even. An <code>xor</code> of two odd numbers is necessarily even. Therefore, testing for <code>(*i ^ *j) % 2 == 0</code> is redundant.</p></li>
<li><p>Do not brute force. Use some math:</p>

<p><em>If</em>, for the sake of simplicity, we consider <code>1</code> as a prime (thus avoiding a special case of <code>2</code>), any pair of distinct evens (and any pair of distinct odds) contributes to a tally. By a pure combinatorial argument, if an array length is \$N\$, and the element appears \$K\$ times, there are \$K \cdot (N-K)\$ such contributions. Sorting the array will streamline the process.</p>

<p>Since 2 <em>is</em> a special case, notice that the elements <code>xor</code>ing to 2 must be adjacent in the sorted array. It only makes a small complication to the above algorithm.</p></li>
<li><p>Your approach is - correctly - based on the Goldbach's conjecture. I strongly recommend an introductory comment.</p></li>
</ul>
    </div>