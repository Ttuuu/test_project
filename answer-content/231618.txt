<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I was thinking if I should add labels like write even if I wouldn't jmp to them, so code would be cleaner.</p>
</blockquote>

<p>Writing labels that aren't jumped to is fine. Provided they have meaningful names, it can help to understand the program.</p>

<h2>My comments (not in a particular order)</h2>

<blockquote>
<pre><code>;esi=1
mov esi, 1
</code></pre>
</blockquote>

<p>This is a redundant comment! I already can see what the instruction does. What I can't know is what the <code>ESI</code> register will be used for.</p>

<blockquote>
<pre><code>;if(argc==1)
;goto open
cmp dword [esp], 1
jnz open
</code></pre>
</blockquote>

<p>Here the comment does not correspond to the code. The code actually does <code>if(argc!=1)</code>.</p>

<blockquote>
<pre><code>cmp edx, 0
jnz read
</code></pre>
</blockquote>

<p>The more usual way to test for zero would be <code>test edx, edx</code>. It has a smaller encoding and is generally a bit faster.</p>

<blockquote>
<pre><code>mov ebx, 0
</code></pre>
</blockquote>

<p>Similarly, zeroing a register is best done using the <code>xor</code> instruction (<code>xor ebx, ebx</code>). This is both faster and shorter.</p>

<blockquote>
<pre><code>mov dword [fd], 0
</code></pre>
</blockquote>

<p>Your program would not need this instruction at all, if you would move the <em>fd</em> variable from the <code>.bss</code> section to the <code>.data</code> section using <code>fd dd 0</code>.</p>

<p>This in turn opens up an opportunity to shorter the code from:</p>

<pre><code>    cmp dword [esp], 1
    jnz open
    mov dword [fd], 0
    jmp read
open:
</code></pre>

<p>to:</p>

<pre><code>    cmp dword [esp], 1
    je  read
open:
</code></pre>

<p>Also note that in conjunction with the <code>cmp</code> instruction, it's better to use <code>je</code> and <code>jne</code>.<br>
In conjunction with the <code>test</code> instruction, it's preferable to use <code>jz</code> and <code>jnz</code>.  </p>

<p><code>je</code> and <code>jz</code> have an identical encoding but choosing the right instruction mnemonic better expresses what the intention of the code is.</p>

<blockquote>
<pre><code>;if(esi&lt;argc)
cmp dword esi, [esp]
jl open
</code></pre>
</blockquote>

<p>The <em>argc</em> is by its very nature an <strong>unsigned</strong> number. After all it's just a count. You should use the conditional jumps that are provided to deal with the unsigned conditions. So better use <code>jb open</code> (JumpIfBelow).<br>
Also there's no point in writing the <code>dword</code> size-tag. The mention of the dword register <code>ESI</code> already dictates the size.</p>

<blockquote>
<pre><code>mov edx, eax
mov eax, 4
mov ebx, 1
mov ecx, buf
int 0x80
</code></pre>
</blockquote>

<p>I always prefer to write the function number directly above the <code>int 0x80</code> instruction. That way it's immediately clear what function is getting invoked. And for perfection I even assign the registers in a sorted manner:</p>

<pre><code>mov edx, eax
mov ecx, buf
mov ebx, 1
mov eax, 4
int 0x80
</code></pre>

<hr>

<h2>Putting it all together</h2>

<ul>
<li>not being afraid to write redundant labels</li>
<li>putting the comments in a separate column for readability</li>
<li>shaving off one more byte by using the fact that <code>ESI==1</code> when <code>cmp dword [esp], 1</code> is executed.</li>
</ul>

<pre class="lang-none prettyprint-override"><code>section .text
    global _start

_start:
    mov  esi, 1
    cmp  [esp], esi        ;if(argc==1) goto read
    je   read
open:
    xor  ecx, ecx          ;fd=open(path,oflag)
    mov  ebx, [esp+esi*4+4]
    mov  eax, 5
    int  0x80
    mov  [fd], eax
read:
    mov  edx, BUFSIZE      ;bytes_read=read(fd,buf,BUFSIZE)
    mov  ecx, buf
    mov  ebx, [fd]
    mov  eax, 3
    int  0x80
write:
    mov  edx, eax          ;write(STDOUT_FILENO,buf,bytes_read)
    mov  ecx, buf
    mov  ebx, 1
    mov  eax, 4
    int  0x80
more:
    test edx, edx          ;if(bytes_read!=0) goto read
    jnz  read
close:
    mov  ebx, [fd]         ;close(fd)
    mov  eax, 6
    int  0x80
next:
    inc  esi
    cmp  esi, [esp]        ;if(esi&lt;argc)
    jb   open
exit:
    xor  ebx, ebx
    mov  eax, 1
    int  0x80

section .data
    fd   dd 0              ;fd=STDIN_FILENO

section .bss
    BUFSIZE equ 1024
    buf  resb BUFSIZE
</code></pre>

<h2>Concern</h2>

<p>Nowhere in your code do you check for any errors from api calls like <code>open</code> or <code>read</code>. Imagine what might happen in these cases?</p>
    </div>