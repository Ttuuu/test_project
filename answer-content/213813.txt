<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few quick comments</p>

<ul>
<li><p>You can use a dictionary as mapping file</p>

<p>First you check the length of the bytes and use an <code>temp</code> variable <code>1, 2, 3, 4, 5, 6</code> to know which hashing algo to use</p>

<blockquote>
<pre><code>lenght = len(hash)
if lenght == 32:     # MD5
    hashmethod_list.append(1)
...
if hashmethod_list[hashline] == 1:
    hashedguess = hashlib.md5(bytes(word, "utf-8")).hexdigest()
</code></pre>
</blockquote>

<p>Thi can be simplified using a dictionary that maps the length of the hash to the correct function</p>

<pre><code>BYTELEN_TO_HASH = {
    32 : hashlib.md5,
    40 : hashlib.sha1,
    56 : hashlib.sha224,
    64 : hashlib.sha256,
    96 : hashlib.sha384,
    128 : hashlib.sha512
}

def brute_password(hash_line):
    hash_func = BYTELEN_TO_HASH.get(len(hash_line), None)
    if hash_func is None:
        return f'Incorrect hash: {hash_line} with length {len(hash_line)}'


    for word in read_wordlist():
        if hash_func(bytes(word, "utf-8")).hexdigest() == hash_line:
            return word

    return 'No matching password found'
</code></pre>

<p>This is alot shorter and removes those <code>magic</code> numbers</p></li>
<li><p>Creating a new wordlist for each optional argument will cost alot of IO operations</p>

<p>Instead you could read the file and alter the word after you read it from the wordlist</p>

<p>We could possibly? make another optional function dictionary</p>

<pre><code>OPTIONS = {
    'U', str.upper
    ...
}

optional = OPTIONS.get(optional, lambda x: x)
for word in read_wordlist():
    word = optional(word)
</code></pre></li>
</ul>
    </div>