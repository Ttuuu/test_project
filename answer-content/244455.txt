<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Other than your <code>handleOnChange</code> handler is mutating state, this code seems understandable and readable enough to me, only minor comments about code style.</p>
<h1>React-ness</h1>
<p>React's synthetic events' <code>persist</code> function is a void return, so I don't think the logical OR between it and the state update necessary.</p>
<p>Mutating-state handler with odd event persisting.</p>
<pre><code>handleOnChange = key =&gt; e =&gt; e.persist() || this.setState(prevState =&gt; {
  prevState.data[key] = e.target.value; // &lt;-- this mutates existing state
  return prevState; // &lt;-- saving previous state object back in state
})
</code></pre>
<p>Non-mutating-state handler. React class-based component state updates are merged in, but nested state needs to have their previous state merged manually. Also, instead of persisting the event for use in the "asynchronous" setState, it is more common to grab the event value and let react do what it needs with the event object (i.e. return back to pool).</p>
<pre><code>handleOnChange = key =&gt; e =&gt; {
  const { value } = e.target;
  this.setState(prevState =&gt; ({
    data: {
      ...prevState.data,
      [key]: value,
    },
  }));
}
</code></pre>
<h1>Readability</h1>
<p>All other comments I'd have on the code are more about the readability, i.e. appropriate usage of whitespace, 2-space vs 4-space tabs, etc.. but these are largely dev team driven and tend to be subject to opinion.</p>
<p>Common practices though are</p>
<ul>
<li>Single line space between code blocks (functions and any other logical "chunk" of code</li>
<li>Using curly brackets for functions that are more than simply an implicit return, i.e. they have more than a single expression</li>
<li>Using appropriate line breaks when lines of code get too long, usually around 80 chars</li>
</ul>
<h1>Maintainability/Reusability</h1>
<p>The one remaining comment I'd have would be to try and abstract the <code>this.getStaticOrInput</code> logic and utilities into a separate react component, something like <code>EditableInput</code> that handles its toggling state internally.</p>
<pre><code>&lt;EditableInput name="first_name" value={...} etc.. /&gt;
&lt;EditableInput name="last_name" value={...} etc.. /&gt;
...
</code></pre>
    </div>