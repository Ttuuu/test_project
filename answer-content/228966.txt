<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Task.WhenAll</code> also accepts <code>Enumerable&lt;Task&gt;</code> as argument. So your lines with <code>tasks</code> can be simplified:</p>

<pre><code>var tasks = source.Select(x =&gt; Task.Run(() =&gt; body(s), token));
try 
{
    await Task.WhenAll(tasks).ConfigureAwait(false);
    token.ThrowIfCancellationRequested();
}
catch
{
    // find the error(s) that might have happened.
    var errors = tasks.Where(tt =&gt; tt.IsFaulted).Select(tu =&gt; tu.Exception).ToList();

    // we are back in our own thread
    if (errors.Count &gt; 0)
    {
        throw new AggregateException(errors);
    }
}
</code></pre>

<p>If you end up throwing because of the line <code>token.ThrowIfCancellationRequested()</code>, after all the tasks have completed (so none of the tasks themselves faulted), I think you end up swallowing the exception.</p>

<hr>

<p>You provide the <code>CancellationToken</code> to <code>Task.Run</code>. The only thing this does is check whether the token has been cancelled <em>before</em> the tasks starts running. If you want to affect the task itself, you need to pass the token into the method <code>body</code> as well. Additionally, the implementation of <code>body</code> then needs to actually do something with the token (like checking whether it is cancelled), before cancelling will have any use.</p>

<p>So consider the following possible APIs:</p>

<pre><code>Task ForEach&lt;T&gt;(ICollection&lt;T&gt; seq, Func&lt;T, CancellationToken, Task&gt; body, CancellationToken token)
</code></pre>

<p>or </p>

<pre><code>Task ForEach&lt;T&gt;(ICollection&lt;T&gt; seq, Func&lt;T, Task&gt; body)
</code></pre>

<p>Not much in between will have much use, assuming it's the function <code>body</code> that you want to cancel.</p>

<p>For some additional reading, see <a href="https://lbadri.wordpress.com/2016/10/04/cancellationtoken-with-task-run-and-wait/" rel="nofollow noreferrer">here</a>.</p>
    </div>