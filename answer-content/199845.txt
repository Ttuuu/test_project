<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can simplify list manipulations by figuring out that you generate rows and numbers by decrementing from <code>n</code> then incrementing back to <code>n</code>; except that rows are limited to not decrement below a threshold. And that threshold follows the exact same pattern. So a first version could be:</p>

<pre><code>def palindrome(n):
    def inner(upper):
        for x in range(n, 0, -1):
            yield str(max(x, upper))
        for x in range(n + 1):
            yield str(max(x, upper))
    return '\n'.join(
        ''.join(inner(x)) for x in range(n, 0, -1)
    ) + '\n'.join(
        ''.join(inner(x)) for x in range(n + 1)
    )
</code></pre>

<p>But there is too much repetitions, let's compute the full range up-front:</p>

<pre><code>def palindrome(n):
    full_range = list(range(n, 0, -1)) + list(range(n + 1))
    def inner(upper):
        for x in full_range:
            yield str(max(x, upper))
    return '\n'.join(''.join(inner(x)) for x in full_range)
</code></pre>

<p>Or even</p>

<pre><code>def palindrome(n):
    full_range = list(range(n, 0, -1)) + list(range(n + 1))
    return '\n'.join(''.join(str(max(x, y)) for y in full_range) for x in full_range)
</code></pre>

<p>But the usage of a double for loop over the same iterable can easily be replaced by <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> which is more efficient. You can also use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> instead of converting <code>range</code>s to <code>list</code>s; and <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a> will let us apply <code>max</code> over the pairs returned by <code>product</code>. But we would only get a single iterable that we would need to group together to form each line; so we would need the help of the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>grouper</code> recipe</a>:</p>

<pre><code>import itertools


def grouper(iterable, size):
    args = [iter(iterable)] * size
    return zip(*args)


def palindrome(n):
    full_range = itertools.chain(range(n, 0, -1), range(n + 1))
    pattern = itertools.starmap(max, itertools.product(full_range, repeat=2))
    return '\n'.join(''.join(map(str, group)) for group in grouper(pattern, 2 * n + 1))
</code></pre>
    </div>