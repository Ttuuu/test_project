<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It seems like you have the following:</p>

<pre><code>&lt;div class="main"&gt;
    &lt;div class="header"&gt;a&lt;/div&gt;
    &lt;p&gt;b&lt;/p&gt;

    &lt;div class="header"&gt;c&lt;/div&gt;
    &lt;p&gt;d&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>And you want to extract a list of the headers grouped with the content:</p>

<pre><code>[('a', 'b'), ('c', 'd')]
</code></pre>

<p>The slow part of your code is most certainly the <code>if tag in headers</code>. If header is a list of 10k elements, then for each element in <code>.main</code> you are searching through potentially 10k elements. This is horribly inefficient. If <code>headers</code> was a set, this would be more efficient, but there's no need for it to be (or for you to check <code>if tag in headers</code>).</p>

<pre><code>def get_header_content_pairs(doc):
    main = doc.find("div", class_="main")
    headers = main.find_all("div", class_="header")

    for header in headers:
        yield (header, list(get_content(header.nextSibling)))

def get_content(element):
    while element.name == 'p':
        yield element
        element = element.nextSibling
</code></pre>

<p>Haven't tested this, but the gist is instead of doing all that work, you take advantage of the fact that each BS element knows about its <code>nextSibling</code>. You find all of the <code>.header</code>s. For each of them, you continue checking <code>nextSibling</code> until you find something that isn't a <code>&lt;p&gt;</code>. You aggregate these and return them with their header.</p>
    </div>