<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Recursion is a good tool for the right job, but here it is used to accomplish simple looping. As such the code...
<ul>
<li>is more difficult to read and reason about.</li>
<li>is slower because much of the code in <code>ema</code> only needs to run once.</li>
<li>will fail with large enough value of <code>window</code> due to overflowing Python's call stack.</li>
</ul></li>
<li>Please document at least the parameters of each function, eg. that <code>window</code> is the <em>length</em> of the window, and that <code>position</code> counts <em>backwards</em> from the end of <code>data</code>. (In fact things would be clearer if <code>position</code> were a normal forward index into <code>data</code>)</li>
<li>Raise an exception when you find a parameter has an invalid value. Returning <code>None</code> instead will only cause a more confusing exception later. In fact, if I try <code>Indicators().ema(close_prices, 600)</code> I get infinite recursion because <code>sma</code> returns <code>None</code>, which makes <code>ema</code> call <code>sma</code> over and over again.</li>
<li>The previous point also reveals that <code>if len(data) &lt; window + 2</code> is not the right validity check.</li>
<li>The <code>+ 1</code> in <code>data[-window*2 + 1:-window + 1]</code> don't seem correct to me. I suppose you want <code>data[-window*2:-window]</code> </li>
<li>The statement <code>return previous_ema</code> is in an odd place because at that point you have calculated a new <code>current_ema</code>. This is the base case of the recursion, and it is customary to handle the base case first.</li>
</ul>

<p>My proposal for <code>ema</code>:</p>

<pre><code>def ema(self, data, window):
    if len(data) &lt; 2 * window:
        raise ValueError("data is too short")
    c = 2.0 / (window + 1)
    current_ema = self.sma(data[-window*2:-window], window)
    for value in data[-window:]:
        current_ema = (c * value) + ((1 - c) * current_ema)
    return current_ema
</code></pre>
    </div>