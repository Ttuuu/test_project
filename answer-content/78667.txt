<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this code:</p>

<blockquote>
<pre><code>var i, pair, char, hex;
for(i=0; i &lt; charHexPairs.length; i++)
{
        pair = charHexPairs[i];
        char = pair[0];
        // ...
</code></pre>
</blockquote>

<p>There's no need to declare the variables in advance. 
In fact it's best to declare variables in the smallest scope possible,
to avoid accidental misuses.
So the above would be better this way:</p>

<pre><code>for(var i=0; i &lt; charHexPairs.length; i++)
{
        var pair = charHexPairs[i];
        var char = pair[0];
        // ...
</code></pre>

<hr>

<p>This doesn't look so good:</p>

<blockquote>
<pre><code>var upDown = 1;
var upDown1 = 1;
</code></pre>
</blockquote>

<p>These two variables have too similar names and can be easy to confuse.
In general, try to avoid using numbers in variable names.</p>

<hr>

<blockquote>
<pre><code>for(index = 0;index&lt;arg.length;index++)
// ...
context.fillRect(leftRight,upDown,1,1);
</code></pre>
</blockquote>

<p>It would be better to use spaces around operators and after semicolons and commas more generously, like this:</p>

<pre><code>for (index = 0; index &lt; arg.length; index++)
// ...
context.fillRect(leftRight, upDown, 1, 1);
</code></pre>

<hr>

<p>It's more common and simpler to use <code>++upDown</code> instead of <code>upDown += 1</code>.</p>

<hr>

<p>This nested else-if chain is very unusual:</p>

<blockquote>
<pre><code>if(index == 0) {
    imgData = context.getImageData(0,0, this.canvas.width,1);
    size = this.canvas.width;
}
else
{
    if(index == 1) {
        imgData = context.getImageData(this.canvas.width - 1,1, 1,this.canvas.height - 1);
        size = this.canvas.height - 1;
    }
    else
    {
        if(index == 2) {
            imgData = context.getImageData(0,1, 1,this.canvas.height - 1);
            size = this.canvas.height - 1;
        }
        else
        {   
            imgData = context.getImageData(1,this.canvas.height -1, this.canvas.width-2, 1);
            size = this.canvas.width-2;

        }
    }
}
</code></pre>
</blockquote>

<p>This is equivalent but simpler:</p>

<pre><code>    if(index == 0) {
        imgData = context.getImageData(0,0, this.canvas.width,1);
        size = this.canvas.width;
    } else if(index == 1) {
        imgData = context.getImageData(this.canvas.width - 1,1, 1,this.canvas.height - 1);
        size = this.canvas.height - 1;
    } else if(index == 2) {
        imgData = context.getImageData(0,1, 1,this.canvas.height - 1);
        size = this.canvas.height - 1;
    } else {   
        imgData = context.getImageData(1,this.canvas.height -1, this.canvas.width-2, 1);
        size = this.canvas.width-2;
    }
</code></pre>

<p>But the most natural way when doing different action depending on a value is using a <code>switch</code>:</p>

<pre><code>switch (index) {
    case 0:
        imgData = context.getImageData(0,0, this.canvas.width,1);
        size = this.canvas.width;
        break;
    case 1:
        imgData = context.getImageData(this.canvas.width - 1,1, 1,this.canvas.height - 1);
        size = this.canvas.height - 1;
        break;
    case 2:
        imgData = context.getImageData(0,1, 1,this.canvas.height - 1);
        size = this.canvas.height - 1;
        break;
    default:
        imgData = context.getImageData(1,this.canvas.height -1, this.canvas.width-2, 1);
        size = this.canvas.width - 2;
}
</code></pre>

<hr>

<p>This is even worse than the point earlier,
because it's inefficient,
evaluating multiple conditions in sequence,
even though only one of them can be true:</p>

<blockquote>
<pre><code>if(index == 0){ 
    context.putImageData(imgData,0,0);
}
if(index == 1) {
    context.putImageData(imgData,this.canvas.width-1,1);
}
if(index == 2) {
    context.putImageData(imgData,0,1);
}
if(index == 3) {
    context.putImageData(imgData,1,this.canvas.height -1);
}
</code></pre>
</blockquote>

<p>Rewrite this using a <code>switch</code> as in the previous point.</p>

<hr>

<p>Capitalized names are usually used for classes,
since this is just an array, I suggest to rename to lowercase:</p>

<pre><code>Attributes = text.split(",");
</code></pre>
    </div>