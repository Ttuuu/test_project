<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>eval(...)</h1>

<p>What is the purpose of:</p>

<pre><code>compilt = "r'(?=(" + genes[i] + "))'"
... eval(compilt), ...
</code></pre>

<p>It takes a string like <code>"aa"</code>, and forms a new string <code>"r'(?=(aa))'"</code>, which is source code for the raw string <code>r'(?=(aa))'</code>, which when <code>eval</code>uated yields the string <code>"(?=(aa))"</code>.</p>

<p>There is no escaping being done, no obvious reason to do the raw string formation and subsequent evaluation, and no prevention of a syntax error due to a stray <code>'</code> character in the <code>genes[i]</code> array.  So ... why not simply:</p>

<pre><code>regex = "(?=(" + gene[i] + "))"
</code></pre>

<p>and no call to <code>eval(...)</code> at all?</p>

<h1>Regex Capturing</h1>

<p>The regex subexpression <code>(...)</code> is a "capturing group", which copies the matching characters into an internal buffer, for returning in the match group.</p>

<pre><code>&gt;&gt;&gt; re.findall('(?=(aa))', "caaab")
['aa', 'aa']
</code></pre>

<p>Without the capturing group, the matching characters do not have to be copied to the internal buffer, to be returned.</p>

<pre><code>&gt;&gt;&gt; re.findall('(?=aa)', "caaab")
['', '']
</code></pre>

<p>Given that you are only interested in the <code>len(...)</code> of the list returned from <code>re.findall()</code>, the capturing group seems like unnecessary overhead, which can be eliminated for faster execution.</p>

<h1>Compiled Regex</h1>

<p>As Python uses regular expressions, it maintains a cache of the most recently used regular expressions.  This cache has a limited size, to prevent an excessive memory load.</p>

<p>In this exercise, you are repeatedly using the same gene regular expressions for each "healthy string" test.  If the number of genes exceeds the cache size, Python will be tossing out compiled regular expressions, only to compile them again moments later.</p>

<p>You can preempt this by compiling and storing all the gene regular expressions ahead of time.  Leveraging Python 3.6's f-strings, and list comprehension:</p>

<pre><code>    genes = input().rstrip().split()
    genes_rx = [re.compile(f"(?={gene})") for gene in genes]
</code></pre>

<p>Used as:</p>

<pre><code>               matches = len(re.findall(genes_rx[i], gn))
</code></pre>

<p>Now the gene to regular expression string, to compiled regular expression is done once per gene, instead of once per "healthy string" test.</p>

<h1>Computing min/max weight without creating a list</h1>

<p>How about:</p>

<pre><code>    min_weight = math.inf
    max_weight = -math.inf

    for ...:

        weight = ...

        if weight &lt; min_weight:
            min_weight = weight
        if weight &gt; max_weight:
            max_weight = weight

    print(min_weight, max_weight)
</code></pre>
    </div>