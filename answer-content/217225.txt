<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p>In larger scripts like this, naming is even more important than usual,
to help the reader understand the elements of the program easily.</p>

<p>Looking at this at the beginning and I'm already puzzled:</p>

<blockquote>
<pre><code>parseargs "$@"
validate
parse
#connect
</code></pre>
</blockquote>

<p>Although it's pretty obvious what <code>parseargs</code> will do, it's not so obvious how <code>parse</code> is different. And what is <code>validate</code> going to do that <code>parseargs</code> doesn't already do? Why doesn't it do everything needed?</p>

<p>And what is <code>#connect</code>?
Looking at the implementation I see it checks if a virtual host + port is up.
A more verbose, descriptive name would be better for this function.</p>

<p>The other functions are not so easy to fix, we need to look at an organizational issue first.</p>

<hr>

<p><code>parseargs</code> populates a <code>config</code> array.
This may be subjective,
the name "config" makes me thing of some sort of configuration file,
but in this case it's about command line arguments.
I would rename it to <code>args</code>.</p>

<p>In fact in this program <code>config</code> is used for multiple purposes:
store defaults, and then parsed arguments.
I would find it easier to understand to separate these two (define <code>defaults</code>),
and have an additional step that combines them into <code>params</code>.</p>

<h3>Program organization</h3>

<p>As hinted earlier, I would have expected <code>parseargs</code> to encapsulate everything needed before the program is ready to execute its main job.</p>

<p>I see that the different scripts have slightly different needs:</p>

<ul>
<li><code>virtualhost-cli.sh</code> calls <code>parseargs</code>, <code>validate</code> and <code>parse</code></li>
<li><code>virtualhost-yad.sh</code> calls just <code>parseargs</code></li>
<li><code>virtualhost-mysql.sh</code> calls <code>parseargs</code> and <code>validate_mysql</code></li>
</ul>

<p>I see that <code>parseargs</code> is a common element,
but it's hard to see what is included in it and what is not,
and how much of what it does is shared.
In fact <code>virtualhost-mysql.sh</code> only needs it to parse <code>--subdomain</code>.</p>

<p>Consider this alternative usage:</p>

<p>In <code>virtualhost-cli.sh</code>:</p>

<pre><code>parseargs_opts="help,webmaster:,webgroup:,webroot:,domain:,subdomain:,virtualhost:,virtualport:,serveradmin:"
parseargs "$@"
</code></pre>

<p>In <code>virtualhost-yad.sh</code>:</p>

<pre><code>parseargs_opts="help,webmaster:,webgroup:,webroot:,domain:,subdomain:,virtualhost:,virtualport:,serveradmin:"
parseargs "$@"
</code></pre>

<p>In <code>virtualhost-mysql.sh</code>:</p>

<pre><code>parseargs_opts="help,subdomain:"
parseargs "$@"
</code></pre>

<p>This way it would be much more clear what <code>parseargs</code> does, where its responsibilities begin and end.
Yes there is some duplication for two of the scripts,
but I think the clarity this alternative organization brings makes it well worth it.</p>

<hr>

<p>Another program organization <em>smell</em> is that <code>validate_mysql</code> and <code>escape_mysql</code> are defined in a shared script, but only used by <code>virtualhost-mysql.sh</code>.
It would be better to define these functions in the same script where they are used.</p>

<h3>Sloppy error messages</h3>

<p>Early in the script there's this:</p>

<blockquote>
<pre><code>(cat &gt;"$siteconf" &lt;&lt;EOF
&lt;VirtualHost ${config[virtualhost]}:${config[virtualport]}&gt;
  ServerAdmin ${config[serveradmin]}
  ...
&lt;/VirtualHost&gt;
EOF
) || die "May run as root or give $siteconf writable permissions to current user"
</code></pre>
</blockquote>

<p>And then this:</p>

<blockquote>
<pre><code>(
  mkdir -p "${config[webroot]}"
  chown ${config[webmaster]}:${config[webgroup]} "${config[webroot]}"
  chmod u=rwX,g=rXs,o= "${config[webroot]}"
  ...
) || die "Run as root"
</code></pre>
</blockquote>

<p>I don't like the error messages in <code>die "..."</code> because I don't think you can know for sure that they are always appropriate. In compound operations like this, I would phrase the error message after the big-picture task it was trying to perform and failed, and not speculate about what the solution might be.</p>

<p>Btw, if the second snippet requires <code>root</code>, then it would be better to check the user's identity at the very beginning of the script and fail fast.</p>

<h3>Don't reference undefined variables</h3>

<p>It seems to me that <code>virtualhost-yad.sh</code> references <code>${mysql[...]}</code> before those values are set, in the long <code>while true; do</code> loop body.
If this is not a bug, well it's hard to read and confusing.</p>

<h3>Safety</h3>

<p>It's a good practice to declare variables used within functions as <code>local</code>,
to avoid unintended side effects.</p>

<hr>

<p>I'm a bit puzzled by this statement:</p>

<blockquote>
  <p>virtualhost-mysql.sh - create db and user, values passed by environment variables to not appear in ps output - for security.</p>
</blockquote>

<p>And then in the script there's this line:</p>

<blockquote>
<pre><code>mysql --user="${mysql[adminuser]}" --password="${mysql[adminpasswd]}" &lt;&lt;&lt;$mysqlcreate
</code></pre>
</blockquote>

<p>The admin user and password are exposed!</p>

<h3>Effective Bash</h3>

<p>I see <code>(...)</code> a lot of sub-shells in the script, far more than really necessary.
Although the performance penalty is likely negligible in this script,
it's better to not get used to bad habits.</p>

<p>In many places in <code>(if_match ...) || ...</code> you could simply drop the parentheses.</p>

<p>Or where you write <code>(LANG=C; if_match ...) || die "..."</code> I think you could write <code>LANG=C if_match ... || die "..."</code>.</p>

<p>For a more complex example, instead of:</p>

<blockquote>
<pre><code>(cat &gt;"$siteconf" &lt;&lt;EOF
...
EOF
) || die "..."
</code></pre>
</blockquote>

<p>You could write:</p>

<pre><code>cat &gt;"$siteconf" &lt;&lt;EOF || die "..."
...
EOF
</code></pre>

<p>Here, you could replace the <code>(...)</code> with <code>{ ... }</code> and lose nothing, but avoid the creation of a sub-shell:</p>

<blockquote>
<pre><code>(
  mkdir -p "${config[webroot]}"
  chown ${config[webmaster]}:${config[webgroup]} "${config[webroot]}"
  chmod u=rwX,g=rXs,o= "${config[webroot]}"
  chown root:root "$siteconf"
  chmod u=rw,g=r,o=r "$siteconf"
  a2ensite "${hostfile}"
  systemctl reload apache2
) || die "Run as root"
</code></pre>
</blockquote>

<hr>

<p>Instead of <code>echo ... | tr ...</code>, use <code>tr ... &lt;&lt;&lt; "..."</code>.</p>

<p>Instead of <code>cmd &lt;&lt;&lt; $var</code>, write <code>cmd &lt;&lt;&lt; "$var"</code>.</p>

<p>Instead of <code>let pos=pos+1</code>, I prefer the simpler <code>((pos++))</code>.</p>

<p>Since the script requires Bash 4,
you could take advantage of native lowercasing with <code>${1,,}</code> instead of <code>tr '[:upper:]' '[:lower:]' &lt;&lt;&lt; "$1"</code>.</p>

<p>The repeated definitions of the <code>die</code> function are confusing, especially in <code>virtualhost-yad.sh</code>.</p>

<p>The implementations of the <code>die</code> functions look unnecessary complex.
Most of the time it's only used with a single message argument.
It would be better to keep it simple,
and for the rare cases where you need slightly different behavior,
either just write out the different behavior, or define another function.</p>
    </div>