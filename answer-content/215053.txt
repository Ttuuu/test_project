<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Given that you say this is to transpose <em>vectors</em> and not matrices in general, you can initialize the row vector with the inner vector, for gcc and clang compiler explorer shows differing results between using the iterators or just the inner array. </p>

<pre><code>#include &lt;vector&gt;
#include &lt;cassert&gt;

std::vector&lt;double&gt; transpose_vector(const std::vector&lt;std::vector&lt;double&gt;&gt; &amp;column_vec) {
  // take a column vector:
  // |x1|
  // |x2|
  // |x3|
  // and return a row vector |x1, x2, x3|
  assert(column_vec.size() == 1);
  return std::vector&lt;double&gt;(column_vec[0].cbegin(), column_vec[0].cend());
}
</code></pre>

<p>As @TobySpeight mentioned the question is if you chose this representation yourself or if you were given in. For example you could probably be more flexible if you separated the storage from the dimension of the data being transported. </p>
    </div>