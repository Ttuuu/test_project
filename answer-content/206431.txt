<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This</p>

<blockquote>
<pre><code>        Head.NewRow();
        foreach (var column in columns)
        {
            Head.LastRow[column] = column;
        }
</code></pre>
</blockquote>

<p>can be optimized a bit:</p>

<pre><code>        var newRow = Head.NewRow();
        foreach (var column in columns)
        {
            newRow[column] = column;
        }
</code></pre>

<hr>

<p>This</p>

<blockquote>
<pre><code>table.Body.NewRow();
table.Body.LastRow["timestamp"] = DateTime.UtcNow;
table.Body.LastRow["message"] = "Hallo!";
table.Body.LastRow["level"] = "Debug";
</code></pre>
</blockquote>

<p>could be replaced by a call like this:</p>

<pre><code>table.Body.AddRow(("timestamp", DateTime.UtcNow), ("message", "Hallo!"), (level", "Debug"));
</code></pre>

<p>where <code>AddRow</code> looks like:</p>

<pre><code>RowDto&lt;T&gt; AddRow(params (string Key, T Value)[] row) {...}
</code></pre>

<hr>

<p>Wouldn't it be better if <code>Head, Body and Foot</code> shared the columns?:</p>

<pre><code>public TripleTableDto(IEnumerable&lt;SoftString&gt; columns, bool areHeaders = true)
{
    var dtoColumns = columns.Select((name, ordinal) =&gt; new ColumnDto { Name = name, Ordinal = ordinal }).ToList(); 
    Head = new TableDto&lt;object&gt;(dtoColumns);
    if (areHeaders)
    {
        Head.NewRow();
        foreach (var column in columns)
        {
            Head.LastRow[column] = column;
        }
    }

    Body = new TableDto&lt;object&gt;(dtoColumns);
    Foot = new TableDto&lt;object&gt;(dtoColumns);
}
</code></pre>

<p>...</p>

<pre><code>public TableDto(IEnumerable&lt;ColumnDto&lt;T&gt;&gt; columns)
{
    _columnByName = columns.ToDictionary(x =&gt; x.Name);
    _columnByOrdinal = columns.ToDictionary(x =&gt; x.Ordinal);
}
</code></pre>

<hr>

<p>Wouldn't it be better if the columns where typesafe in a way: <code>ColumnDto&lt;T&gt;</code>? Or it's maybe too complicated and unnecessary in the context.</p>

<hr>

<p><strong>Update</strong></p>

<p>I'm not sure, I really understand what you want to achieve by this, that you can't get with a simple <code>DataTable</code> extension:</p>

<pre><code>  public static class TableExtensions
  {
    public static object Dump(this DataTable table)
    {
      return new
      {
        Headers = table.Columns.Cast&lt;DataColumn&gt;().Select(c =&gt; c.Caption),
        Body = table.Rows.Cast&lt;DataRow&gt;().Take(table.Rows.Count - 1).Select(r =&gt; r.ItemArray),
        Footer = table.Rows[table.Rows.Count - 1].ItemArray,
      };
    }
  }

void TestDataTable()
{
  DataColumn[] columns = new[]
  {
    new DataColumn("Date"),
    new DataColumn("Message", typeof(string)),
    new DataColumn("Level", typeof(int))
  };

  DataTable table = new DataTable();
  table.Columns.AddRange(columns);

  DataRow row = table.NewRow();
  row[columns[0]] = DateTime.UtcNow;
  row[columns[1]] = "Hello!";
  row[columns[2]] = 1;
  table.Rows.Add(row);

  row = table.NewRow();
  row[columns[0]] = DateTime.UtcNow + TimeSpan.FromHours(2);
  row[columns[1]] = "Goodbye!";
  //row[columns[2]] = 25;
  table.Rows.Add(row);

  row = table.NewRow();
  row[columns[0]] = "Date Footer";
  row[columns[1]] = 46;
  row[columns[2]] = "45";
  table.Rows.Add(row);

  string json = JsonConvert.SerializeObject(table.Dump(), Formatting.Indented);
  Console.WriteLine(json);
}
</code></pre>
    </div>