<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public PhoneNumber(string part1, string part2, string part3)
    {
        Part1 = part1;
        Part2 = part2;
        Part3 = part3;
    }
</code></pre>
</blockquote>

<p>I'm confused. The existence of <code>TryParse</code> tells me that there are important validity constraints on the number, but there's a public constructor which doesn't validate its arguments. It seems that I could easily make an instance of <code>PhoneNumber</code> for which <code>Parse(phoneNumber.ToString())</code> doesn't round-trip.</p>

<p>In fact, I'm even more confused: <code>PhoneNumber</code> doesn't override <code>ToString()</code> or any of the identity methods (<code>GetHashcode</code>, <code>Equals</code>, <code>operator==</code>, etc). Why not?</p>

<hr>

<blockquote>
<pre><code>    public static bool TryParse(string codeline, out PhoneNumber value)
    {
        if (!TryParseInternal(codeline, out value).Any())
        {
            return true;
        }

        return false;
    }
</code></pre>
</blockquote>

<p>IMO this is a failure to properly use the Boolean type. I would prefer</p>

<pre><code>    public static bool TryParse(string codeline, out PhoneNumber value)
    {
        return !TryParseInternal(codeline, out value).Any();
    }
</code></pre>

<hr>

<blockquote>
<pre><code>    private static List&lt;Exception&gt; TryParseInternal(string codeline, out PhoneNumber value)
    {
        var exceptions = new List&lt;Exception&gt;();
        if (codeline == null)
        {
            exceptions.Add(new ArgumentNullException(nameof(codeline)));
        }

        else if (codeline == "")
        {
            exceptions.Add(new ArgumentException(nameof(codeline)));
        }

        var match = Regex.Match(codeline, @"^(\d{3})-(\d{3})-(\d{3})$");
</code></pre>
</blockquote>

<p>This aggregation strategy lets you down (and so does your test suite) when I pass <code>null</code> for <code>codeline</code>. Instead of the <code>ArgumentNullException</code> or <code>ParseException</code> which I would expect, I get a <code>NullReferenceException</code> from <code>Regex.Match</code>.</p>

<hr>

<p>Another issue I see with the aggregation strategy is that the code repeats itself a bit: <code>TryParseInternal</code> checks <code>exceptions.Any()</code> to decide how to handle the <code>out</code> parameter, and then its caller checks <code>esr.Any()</code> to decide how to handle the <code>out</code> parameter. If you are attached to the aggregation (I personally don't see the point) then this might be simpler if the inner method returned <code>ParseException</code> instead of <code>List&lt;Exception&gt;</code>.</p>

<hr>

<p>Which prompts me to say: code to the interface, not the implementation. If a method can return <code>IList&lt;T&gt;</code> then that's preferable to returning <code>List&lt;T&gt;</code>.</p>
    </div>