<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As Konrad Rudolph points out in comments on the other question, this is probably about Pushdown Automata, for which the <a href="https://en.wikipedia.org/wiki/Pushdown_automaton#Example" rel="nofollow noreferrer">wikipedia page has some useful examples</a>, and this <a href="https://stackoverflow.com/questions/13446020/how-to-design-a-pushdown-automata">stackoverflow answer is very helpful</a>.</p>

<hr>

<h2>Using a stack</h2>

<p>The stack is used to preserve data while iterating along the input. We move left-to-right from character to character, making a decision based on the current character, and the contents of the stack.</p>

<p>If the input becomes invalid at a certain point (e.g. it contains a <code>'c'</code>, or has too many <code>'b'</code>s, etc.), we can reject it. Otherwise we continue until we have processed the entire input.</p>

<p>For the instructions you've been given, we don't actually need a stack. A counter would suffice. However, a stack would allow balancing multiple sets of characters (e.g. balancing strings of parentheses <code>([]())[]</code>).</p>

<p>At every <code>'a'</code> we encounter, we push it onto the stack. At every <code>'b'</code> we encounter, we pop one off the stack. If we are ever attempting to pop something off an empty stack, the input is not balanced. At the end of the input, the stack must be empty (we popped off the same number of <code>'b'</code>s as the number of <code>'a'</code>s we pushed on).</p>

<pre><code>bool is_balanced(std::string const&amp; input)
{
    if (input.empty()) // n == 0
        return false;

    std::stack&lt;char&gt; stack;
    bool is_first_word = true;

    for (auto c : input)
        if (!pda(stack, is_first_word, c))
            return false;

    return stack.empty();
}
</code></pre>

<hr>

<h2>The queue</h2>

<p>As you noticed, having the input contained in a queue limits how it can be processed. We don't know the length of the input in advance. We can only pop off one character at a time and process it.</p>

<p>More usually in C++, input like this would come from a <a href="https://en.cppreference.com/w/cpp/io/basic_iostream" rel="nofollow noreferrer">stream of some sort</a>.</p>

<p>Note, however, that the core of the algorithm remains exactly the same:</p>

<pre><code>bool is_balanced(std::queue&lt;char&gt;&amp; input)
{
    if (input.empty()) // n == 0
        return false;

    std::stack&lt;char&gt; stack;
    bool is_first_word = true;

    while (!input.empty())
    {
        auto c = input.front();
        input.pop();

        if (!pda(stack, is_first_word, c))
            return false;
    }

    return stack.empty();
}
</code></pre>

<hr>

<h2>Making Decisions</h2>

<p>The details of the <code>pda</code> function are left to the reader ;) , but it looks something like this:</p>

<pre><code>bool pda(std::stack&lt;char&gt;&amp; stack, bool&amp; is_first_word, char c)
{
    if (c == 'a')
    {
        // check the stack, push / pop, return true / false
    }
    else if (c == 'b')
    {
        // check the stack, push / pop, return true / false
    }
    else
        return false; // invalid character
}
</code></pre>

<p>It checks the current character <code>'c'</code>, checks the stack, and pushes / pops if necessary. It returns true if we should keep processing input, and false otherwise.</p>

<hr>

<h2>Weird Things</h2>

<p>There are a few slightly unusual things about the instructions you've been given:</p>

<ul>
<li>Empty input is invalid (n must be &gt;= 1). Often an empty input would be considered a balanced string. This is a simple check to make though.</li>
<li>Only <code>'a'</code> and <code>'b'</code> characters means the stack is technically redundant. Usually one would think about balancing parentheses, as in the linked stackoverflow question.</li>
<li>The wording implies that inputs like <code>"abab"</code> are invalid, as this would be considered more than one "word" in the specified language. This is the reason for the <code>is_first_word</code> boolean above. It might be simpler to just ignore this to start with.</li>
</ul>
    </div>