<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In a nutshell, yours is better, for two reasons.</p>

<p>First, Python isn't designed for speed. It's decently fast, but the goal is code like yours: so clear, concise, obvious, and readable that anyone can glance at it and immediately see what it does. You can then spend the rest of the project's development time working on the difficult problems (like attending meetings).</p>

<p>Second, the "answer" code doesn't really answer the exercise, as it notes. It looks right in theory, but popping elements from the beginning of a <code>list</code> is not the most performant operation in most languages, including Python. It would be a more reasonable solution with a linked list, which is a type that was probably omitted from Python precisely because its utility is mostly limited to fixing the micro-optimizations in bloated code. This is like optimizing a recursive function by making it tail-recursive, and then admitting that it doesn't make any difference because Python doesn't have tail call optimization.</p>

<p>If you were using this code in a real program and determined through actual testing that this <code>linear_merge</code> function was taking too much time due to the extra sorting, you might then be justified in optimizing it.</p>

<p>For fun, here's something with indexing instead of <code>pop()</code>:</p>

<pre><code>def linear_merge(list1, list2):
    result = []
    c1 = c2 = 0
    while c1&lt;len(list1) and c2&lt;len(list2):
        if list1[c1] &lt;= list2[c2]:
            result.append(list1[c1])
            c1 += 1
        else:
            result.append(list2[c2])
            c2 += 1
    result.extend(list2[c1:])
    result.extend(list1[c2:])
    return result
</code></pre>

<p>This might be faster due to not <code>pop()</code>ing items from the beginning of each <code>list</code>, but it also might be slower (or possibly more memory-intensive) due to having to slice a <code>list</code> at the end. I leave it as an exercise to you to time these approaches... but remember that the most important time to conserve is usually your own, not your computer's.</p>
    </div>