<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Something that stands out is that calling <code>voMock.getFileName()</code> on mocked instances will always return null as no mock response has been defined. So your validation logic of</p>

<pre><code>assertThat(voResult.getFileName())
            .isEqualTo(voMock.getFileName());
</code></pre>

<p>essentially winds up being</p>

<pre><code>assertThat(voResult.getFileName())
            .isEqualTo(null);
</code></pre>

<p>This could end up giving false positives where <code>voResult</code> is incorrect, but the test passes because the filename is null.</p>

<p>You would need to specify a filename for the response object by calling <code>when(voMock.getFileName()).thenReturn("TestFile")</code>. This way your test can actually determine that the returned object is the expected one by checking the unique expected value of <code>voMock.getFileName()</code>.</p>

<p>Alternatively, if the requirement is that the instance returned from the service method is the same instance that the *Proc method returns, just avoid calling <code>getFileName</code> when you're verifying the test result. You could instead use something like <code>assertSame(voMock, voResult)</code> to ensure that the instance returned by the service method is the same one that is returned by the *Proc method.</p>

<p>I would always also recommend writing fail/error cases for your class as well. I couldn't give an example without seeing the <code>FusServiceImpl</code> class, but it can sometimes help with spotting issues like the one I listed above. For instance, if you have a test case like</p>

<pre><code>@Test
public void whenGetFileById_thenReturnFile(){
    final Long ID = 99999L;

    when(getFileInfobyIdProc.get(ID)).thenReturn(voMock);



    FileInfoVO voResult = service.getFile(ID - 1);

    assertThat(voResult.getFileName())
            .isNotEqualTo(voMock.getFileName());


}
</code></pre>

<p>and that test case passes, you know you've probably made a mistake in the test logic. You can also validate that the method fails in the correct manner - does it return an object with null filename? A null return value? Or raise an exception? It's the non-ideal cases that will crash applications in production, so make sure to test for those cases as well.</p>
    </div>