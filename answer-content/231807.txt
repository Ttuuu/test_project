<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>WET -vs- DRY</h2>

<p>In your <code>start_game()</code> method, you have this code, twice:</p>

<pre><code>print(" %s | %s | %s \n===+===+===\n %s | %s | %s \n===+===+===\n %s | %s | %s \n" % \
    (self.board[0], self.board[1], self.board[2],
         self.board[3], self.board[4], self.board[5],
         self.board[6], self.board[7], self.board[8]))
</code></pre>

<p>You should try to write DRY code (Don’t Repeat Yourself), instead of WET code (Write Everything Twice).  This common code can be moved into its own method:</p>

<pre><code>def _print_board(self):
    print(" %s | %s | %s \n===+===+===\n %s | %s | %s \n===+===+===\n %s | %s | %s \n" % self.board)
</code></pre>

<p><strong>Note</strong>: <code>(self.board[0], self.board[1], ... self.board[8])</code> just creates a list (tuple, actually) of all the elements of <code>self.board</code>, but <code>self.board</code> is already such a list, so can be use directly as the format argument.  Way less typing.</p>

<p>@T145 is suggesting <code>"...".format(*list(n for n in self.board))</code>, which can be simplified in exactly the same way, to <code>"...".format(*self.board)</code>.</p>

<p>Other things which appear multiple times, that you might want to create a function for include checking that a spot on the board is neither an <code>"X"</code> nor a <code>"O"</code>.</p>

<h2>Game Over</h2>

<p>Your main loop is looping while not <code>game_over</code> and not <code>draw</code>.  This begs the question: won’t the game be over if it was a draw?</p>

<p>You should simply be able to loop while the game is not over.</p>

<p>Perhaps you want another function, to check if a winning pattern exists (the current <code>game_over</code> function), and <code>game_over</code> would call both this new function and the <code>draw</code> function, to determine if the game is in fact over.</p>

<h2>True is not 1</h2>

<p>You are testing the return value of <code>three_in_row()</code> with <code>1</code>.  However, <code>three_in_row()</code> returns a boolean (<code>True</code> or <code>False</code>), not a integer.  </p>

<p>You could simply write:</p>

<pre><code>return (self.three_in_row(b[0], b[1], b[2]) or 
    self.three_in_row(b[3], b[4], b[5]) or
    self.three_in_row(b[6], b[7], b[8]) or
    self.three_in_row(b[0], b[3], b[6]) or
    self.three_in_row(b[1], b[4], b[7]) or
    self.three_in_row(b[2], b[5], b[8]) or
    self.three_in_row(b[0], b[4], b[8]) or
    self.three_in_row(b[2], b[4], b[6]))
</code></pre>

<p>Note the use of <code>(...)</code>’s around the entire expression to eliminate the need for backslashes.</p>

<p>You are still repeating yourself quite a bit here.  You are calling the same function 8 times with different arguments.  Usually, we throw things like that into a loop:</p>

<pre><code>rows = ((0, 1, 2), (3, 4, 5), (6, 7, 8),
        (0, 3, 6), (1, 4, 7), (2, 5, 8),
        (0, 4, 8), (2, 4, 6))

for x, y, z in rows:
    if self.three_in_row(b[x], b[y], b[z]):
        return True
return False
</code></pre>

<p>Or, even shorter:</p>

<pre><code>return any(self.three_in_row(b[x], b[y], b[z]) for x, y, z in rows)
</code></pre>

<h2>Private -vs- Public</h2>

<p>Python doesn’t have private variables.  But convention (which is obeyed by many IDE’s, and understood by various PEP 8 checkers), is to prefix members which are not supposed to be accessed by code external to the class with a leading underscore.</p>

<p>You may have noticed <code>_print_board(self):</code> member I created above had the leading underscore.</p>

<p>Other members should also have leading underscores, such as <code>_board</code>, <code>_ai</code>, <code>_human</code>.  In fact, the only public member would be <code>start_game()</code>!</p>

<h2>Input Sanitation</h2>

<p>What happens if the user doesn’t enter a legal move?  Such as <code>-5</code>, <code>13</code> or <code>1.75</code> or <code>foobar</code>?  Does the program crash?  The <code>int(input())</code> will raise a <code>ValueError</code> exception on <code>1.75</code> or <code>foobar</code>, crashing the program.  <code>13</code> is a valid integer, but will give you an <code>IndexError</code> when you index <code>self.board</code> with it.  <code>-5</code> oddly will work just fine; but should it?</p>

<p>Consider adding:</p>

<pre><code>try:
    spot = int(input())
except ValueError:
    spot = None
</code></pre>

<p>to check for nonsense input.  And follow that with a bounds check like:</p>

<pre><code>if 0 &lt;= spot &lt;= 8:
    # A valid spot was entered
else:
    # Handle invalid spot
</code></pre>

<h2><code>get_optimal_move()</code></h2>

<p>None of the arguments beyond <code>board</code> are used, and can be eliminated.</p>

<p>Moves are considered sequentially, and for each move, if the AI wins, or the player wins, that move is returned, so the AI either wins or blocks the player from winning.  But ... if a move that blocks the player from winning occurs in the list before a move that the AI wins on occurs, then instead of winning, the AI will simply block the player, which is suboptimal.</p>

<p>You have 3 places where you have:</p>

<pre><code>board[int(available)] = available
</code></pre>

<p>You can DRY this code (avoid this duplication) using a <code>try: ... finally: ...</code> structure:</p>

<pre><code>for available in available_spaces:
    move = int(available)
    try:
        board[move] = self.ai
        if self.game_over(board):
            return move
        else:
            board[move] = self.human
            if self.game_over(board):
                return move
    finally:
        board[move] = available
</code></pre>

<p>Even when either of the two <code>return</code> statements cause the function to exit, the code in the <code>finally:</code> block will still execute, restoring the board’s state.</p>

<p>Note the <code>move</code> local variable to avoid the <code>int(available)</code> calls everywhere as well.</p>
    </div>