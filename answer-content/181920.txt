<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things to improve your code.  First, we'll address the performance issue, followed by a number of other things that could be improved.</p>

<h2>Use const references where practical</h2>

<p>The code currently declares its main search function like so:</p>

<pre><code>bool isin(long s, unordered_map&lt;long,long&gt; m)
</code></pre>

<p>This has two problems.  First it passes by value, so a new <code>std::unordered_map</code> is created on every call.  This is extremely wasteful of both time and memory.  Second, it should actually be a const reference.</p>

<pre><code>bool isin(long s, const unordered_map&lt;long,long&gt; &amp;m)
</code></pre>

<p>Results of that single change on the sample data provided in the question:</p>

<p>$$
\begin{array}{|l|r|}
\hline
\text{program} &amp; \text{time (ms)} \\
\hline
\text{Python 2.7} &amp; 15 \\
\text{original C++} &amp; 2475 \\
\text{C++ with const ref} &amp; 3 \\
\hline
\end{array}
$$</p>

<p>As you can see, despite the title of this question, in fact the C++ version is about 5 times faster than the Python version, with no other changes applied.  </p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> within your program is generally <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Avoid C-style macros</h2>

<p>I'd advise not using C-style macros like <code>REP</code>, <code>Fi</code>, etc.  They only make your program harder to read and understand and obfuscate the underlying meaning.  Further, function-like macros are notorious sources of bugs in C.  They have very little use in modern C++.</p>

<h2>Eliminate unused <code>typedef</code></h2>

<p>The <code>LL</code> typedef is never used in the program and could simply be omitted.</p>

<h2>Use whitespace to improve readability</h2>

<p>Lines like this:</p>

<pre><code>long ps2=deuxpownmodprime(n/2,mod);
</code></pre>

<p>become easier to read with a little bit of whitespace:</p>

<pre><code>long ps2 = deuxpownmodprime(n/2, mod);
</code></pre>

<h2>Eliminate magic numbers</h2>

<p>The constants 71 is used in multiple places.  It would be better to have such numbers as named <code>const</code> or <code>constexpr</code> values so that it would be clear what those numbers represent.</p>

<h2>Eliminate unused variables</h2>

<p>Unused variables are a sign of poor code quality, so eliminating them should be a priority.  In this code, <code>nbm</code> is defined but unused. Your compiler is probably also smart enough to tell you that, if you ask it to do so. </p>

<h2>Use consistent formatting</h2>

<p>The code as posted has inconsistent use of <code>{}</code> which makes it a little harder to read and understand. Pick a style and apply it consistently. </p>

<h2>Iterate over <code>const</code> references where possible</h2>

<p>In the <code>main()</code> routine, the range <code>for</code> loops should iterate over <code>const</code> references instead of forcing temporary copies.  In other words, change the code from this:</p>

<pre><code>for (auto it : ot) {
</code></pre>

<p>to this:</p>

<pre><code>for (const auto &amp;it : ot) {
</code></pre>

<h2>Simplify the code using uniform initialization syntax</h2>

<p>The code currently has a number of lines like this:</p>

<pre><code>ta.insert(pair&lt;long, long&gt;(m, it.second));
</code></pre>

<p>This can easily be simplified using <a href="https://stackoverflow.com/questions/7612075/how-to-use-c11-uniform-initialization-syntax">uniform initialization syntax</a>.  </p>

<pre><code>ta.insert({m, it.second});
</code></pre>

<p>Also these two lines:</p>

<pre><code>std::unordered_map&lt;long, long&gt; ot;
ot.insert(pair&lt;long, long&gt;(0, 1));
</code></pre>

<p>Can be simplified to this:</p>

<pre><code>std::unordered_map&lt;long, long&gt; ot{{0,1}};
</code></pre>

<h2>Use <code>constexpr</code> where practical</h2>

<p>In main, the variables <code>decomps</code> and <code>mod</code> are actually used as constants, so it would make sense to at least declare them as <code>const</code> and preferably <code>constexpr</code>.</p>

<h2>Understand the risk of unsanitized user input</h2>

<p>The code currently contains equivalent to these lines (after undoing macros and use <code>operator&gt;&gt;</code> instead of <a href="http://stackoverflow.com/questions/2430303/disadvantages-of-scanf">horrible <code>scanf</code></a>):</p>

<pre><code>int dn[71] = { 0 };
for (int i = 0; i &lt; n; ++i) {
    int a;
    std::cin &gt;&gt; a;
    dn[a]++;
}
</code></pre>

<p>What happens if one of the input numbers is greater than 71?  Undefined behavior and probably a program crash.  The problem constrains no doubt tell you that all of the data is guaranteed good, but adding in a bounds check here would make the program more robust and cost very, very little time.  One way to do it would be to use <code>std::array</code>:</p>

<pre><code>std::array&lt;int, 71&gt; dn{};  // value-initialized to all zero
for (int i = 0; i &lt; n; ++i) {
    int a;
    std::cin &gt;&gt; a;
    dn.at(a)++;
}
</code></pre>

<h2>Use C++ idioms</h2>

<p>With the modification suggested above, some of the code looks like this:</p>

<pre><code>for (const auto &amp;it : ta) {
    if (!isin(it.first, ot)) {
        ot[it.first] = it.second;
    } else {
        ot[it.first] += it.second;
    }
}
</code></pre>

<p>The <code>isin</code> function is not bad, but to experienced C++ programmers, this might be clearer:</p>

<pre><code>for (const auto &amp;it : ta) {
    if (ot.find(it.first) == ot.end()) {
        ot[it.first] = it.second;
    } else {
        ot[it.first] += it.second;
    }
}
</code></pre>

<p>However, a real C++ programmer would instead write this:</p>

<pre><code>for (const auto &amp;it : ta) {
    ot[it.first] += it.second;
}
</code></pre>

<p>This works because <code>operator[]</code> will create the entry if it does not exist (value initializing the data value to <code>0</code>) and then adds the desired value.  The previous loop can similarly be written like this:</p>

<pre><code>for (const auto &amp;it : ot) {
    ta[(it.first) ^ decomps[i]] += it.second;
}
</code></pre>

<h2>Add some comments</h2>

<p>This looks like a clever algorithm, but it's not obvious how it works or why.  Comments describing, for instance, what the values of <code>decomps</code> mean and how they're derived, would add a lot to the program.</p>
    </div>