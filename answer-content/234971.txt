<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>regarding: </p>

<pre><code>void rotateMatrix(_matrix,_size)  
</code></pre>

<ol>
<li>do NOT use leading underscores for variable and/or parameter names.  </li>
<li>a function signature must have the variable types as part of the signature.  </li>
<li>when compiling, always enable the warnings, then fix those warnings</li>
</ol>

<p>regarding:</p>

<pre><code>main(argc,argv)
</code></pre>

<p>there are two valid signatures for the <code>main()</code> function, the are:</p>

<pre><code>int main( int argc, char *argv[] )
int main( void )
</code></pre>

<p>the posted signature is missing the return type and the parameters are missing the needed typing</p>

<p>regarding:</p>

<pre><code>main(argc,argv)
const char** argv;
</code></pre>

<ol>
<li>This is an obsolete method of writing a function signature, that was replaced back in the late '80s.</li>
<li>some 20+ years ago, the 'default' of a untyped variable and/or function parameter defaulting to <code>int</code> was discarded.</li>
</ol>

<p>regarding:</p>

<pre><code>void nl(void) {     //function to print new line
printf("\n");
}
</code></pre>

<p>this function should be deleted.  Then when wanting to print a newline, use:</p>

<pre><code>puts( "" );
</code></pre>

<p>regarding this kind of statement:</p>

<pre><code>int** matrix=(int**)malloc(sizeof(int*)*_size);
</code></pre>

<ol>
<li>in C, the returned type is <code>void*</code> which can be assigned to any pointer.  Casting just clutters the code. </li>
<li>when calling any of the heap allocation functions: <code>malloc()</code> <code>calloc()</code> and/or <code>realloc()</code>, always check (!=NULL) the returned value to assure the operation was successful.  If not successful, then call <code>perror( "malloc failed" );</code> to inform the user of the problem.</li>
</ol>

<p>Regarding:</p>

<pre><code>scanf("%d",&amp;size);
</code></pre>

<p>when calling any of the <code>scanf()</code> family of functions, always check the returned value (not the parameter values) to assure the operation was successful.  Those functions return the number of successful 'input format conversion specifiers'.  In the current statement suggest:</p>

<pre><code>if( scanf("%d",&amp;size) != 1 )
{
    fprintf( stderr, "scanf for size failed\n" );
    exit( EXIT_FAILURE );
}
</code></pre>

<p>for readability and ease of understanding: Please insert a reasonable space:</p>

<ol>
<li>inside parens</li>
<li>inside braces</li>
<li>inside brackets</li>
<li>after commas</li>
<li>after semicolons</li>
<li>around C operators</li>
</ol>

<p>regarding the function: <code>scanMatrix()</code></p>

<ol>
<li>The posted code fails to keep the user informed of where in the matrix the next number entered will be placed nor when all the numbers have been entered.</li>
</ol>

<p>Suggest the calls to <code>nl()</code> in <code>main()</code> be moved to the end of the functions: <code>rotateMatrix()</code> and <code>printMatrix()</code> </p>

<p>the posted code has several memory leaks as it fails to pass the pointers to each of the allocated memory areas to <code>free()</code></p>
    </div>