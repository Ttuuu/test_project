<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The very first problem is to move some responsibilities out of the controller. IMHO controllers should do as little as possible because their responsibility should be to glue the HTTP request to the domain model.</p>

<p>In your case the controller should not create and configure the service also because it makes impossible (OK...just hard) to test both in isolation. Please pick a better name but the very first thing to do is to receive an <code>IEmailService</code> service exactly the same way you receive the others. </p>

<p>This MIGHT not be always possible without some major refactoring then I'd start introducing a <em>factory</em>:</p>

<pre><code>public ProjectController(IProjectService service, IEmailServiceFactory factory) {
   _service = service;
   _emailService = factory.GetService();
}
</code></pre>

<p>That hypothetical factory method is simply:</p>

<pre><code>public GetService() {
    var emailService = new EmailService(_service, emailRepos);
    var settings = Settings.Load(connection);
    emailService.SmtpServer = settings["SmtpServer"];

    // ...
    emailService.TemplateASubjectFormat = settings["TemplateASubjectFormat"];
    // ...

    return emailService;
} 
</code></pre>

<p>This is easy because you're just moving your code from one class to another and you introduced another service.</p>

<p>Now controllers came back to a reasonable level of responsibilities (and complexity) and they're also <strong>testable</strong> because you can mock the <code>IEmailServiceFactory</code> service (no need to send tons of e-mails when running your tests on the controller...)</p>

<p>As soon as you're ready (or simply as a second step on your refactoring) you should receive the <code>IEmaiLService</code> service directly - instead of going trough a factory.</p>

<hr>

<p>There are also few things to say about the other code. Those initialization lines are tedious, if you're OK to tie your <code>EmailService</code> to its DB representation then you can decorate its properties:</p>

<pre><code>[ConfigurationColumName("SmptServer")]
public string SmtpServer {get;set;}
</code></pre>

<p>You can then use a touch of Reflection to enumerate its properties:</p>

<pre><code>foreach (var property in typeof(EMailService).GetProperties()) {
    var attribute = property.GetCustomAttribute&lt;ConfigurationColumNameAttribute&gt;();
    if (attribute == null) {
        continue;
    }

    property.SetValue(obj, settings[attribute.Name]);
}
</code></pre>

<p>Of course you need to define a <code>ConfigurationColumNameAttribute</code> class and add proper error handling.</p>

<hr>

<p>We then arrive to the second error-prone (and not scalable) part of your code. You hard-coded the number of templates. What if you will ever need 3? Or 4? Or just one? You may simply use a dictionary (if not an array):</p>

<pre><code>public Dictionary&lt;string, TemplateDefinition&gt; Templates { get; } = new ...;
</code></pre>

<p>Where <code>TemplateDefinition</code> has <code>Subject</code> and <code>Content</code> properties. Code should now be simple enough that you may even avoid Reflection.</p>

<p><code>SendEmailWithTemplateA()</code> and <code>SendEmailWithTemplateB()</code> are almost exact duplicates, if you use a dictionary then there should not be any repeated code.</p>

<hr>

<p>Mechanism you're using for templating is fragile. It's hard to write long strings using <code>{0}</code> and <code>{1}</code> as placeholders. Do yourself a BIG favor and switch to a small, fast and well-tested templating engine like Mustache. You'll be able to write your template as <code>Hello {{username}}, we write to you to inform you about the new {{product}}...</code>. It'll be much easier to configure and edit your templates and you'll minimize the chances to mix-up things when changing something in your code. Do not forget that this has to be tested too.</p>

<hr>

<p>Do not catch <code>Exception</code>, is <code>OutOfMemoryException</code> or <code>AccessViolationException</code> something you want to handle that way?</p>

<hr>
    </div>