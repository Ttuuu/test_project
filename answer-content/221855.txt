<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><code>let private WaitForData (client : TcpClient, dataLength : int) : Async&lt;bool&gt;=</code> </p>
  
  <p><code>let mutable loopBreaker : bool = true</code></p>
  
  <p><code>let isConnectionAlive : bool = IsConnectionEstablished client &amp;&amp; client &lt;&gt; null</code></p>
</blockquote>

<p>You should only use explicit type declaration when the compiler demands it: </p>

<p><code>let private WaitForData (client : TcpClient) dataLength =</code> </p>

<p><code>let mutable loopBreaker = true</code></p>

<p><code>let isConnectionAlive = IsConnectionEstablished client &amp;&amp; client &lt;&gt; null</code></p>

<hr>

<blockquote>
  <p><code>let isConnectionAlive : bool = IsConnectionEstablished client &amp;&amp; client &lt;&gt; null</code></p>
</blockquote>

<p>It seems rather risky to me that you use <code>client</code> in a function call before testing it for null. I would do it in reverse order:</p>

<pre><code>let isConnectionAlive = client &lt;&gt; null &amp;&amp; IsConnectionEstablished client
</code></pre>

<p>But why evaluate the <code>client</code> for <code>null</code> in the loop in the first place? You should return false immediately if it's <code>null</code>.</p>

<hr>

<blockquote>
<pre><code>            Task.Delay(500) 
            |&gt; Async.AwaitTask 
            |&gt; ignore
</code></pre>
</blockquote>

<p>I don't think this is actually waiting 500 ms as you may expect.</p>

<p>Instead you can do:</p>

<pre><code>do! Async.Sleep 500
</code></pre>

<p>or </p>

<pre><code>do! Task.Delay(500) |&gt; Async.AwaitTask 
</code></pre>

<hr>

<p>As Bohdan Stupak shows you can do the same in a recursive fashion like:</p>

<pre><code>let private waitForData (client: TcpClient) dataLength = 
    let rec waiter () =
        async {
            if client = null then
                return false
            else 
                match isConnected client, client.Available &gt;= dataLength with
                | true, true -&gt; return true
                | true, false -&gt;
                    do! Async.Sleep 500
                    return! waiter ()
                | false, dataFound -&gt; return dataFound                            
        }
    waiter()
</code></pre>
    </div>