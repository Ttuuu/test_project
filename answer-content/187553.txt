<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<p>A little ambiguous, and overly complex. You need to familiarize your self with radians and forget about degrees</p>

<h2>Style</h2>

<h3>Block-less blocks</h3>

<p>A block is a section of code delimited by <code>{...}</code> many C like syntax languages allow you to skip the block delimiters for single line blocks after conditional statements.</p>

<p>This can be a major source of life long frustration, and there is not a programmer alive that does not know the insidious nature of the bugs that can result when you make changes to the code and forget the <code>{...}</code></p>

<pre><code>// worst
if (foo === bar)
       foo = poo

// bad
if (foo === bar)
       foo = poo;

// better but be consistent never mix this with above
if (foo === bar) foo = poo;

// best 
if (foo === bar) { foo = poo } // note that ; and } denote the end of 
                                // an expression, you don't need to use both

// or
if (foo === bar) { 
   foo = poo;
}
</code></pre>

<h3>Constants</h3>

<p>So many magic numbers. If you find your self adding the same numbers over and over it is a good sign that a defined constant is better. You never know when things may change. I.E. switch units from degrees to radians.</p>

<pre><code>const A90  = 90;
const A180 = 180;
const A360 = 360;
</code></pre>

<p>Then if you want to change to radians</p>

<pre><code>const A90  = Math.PI / 2;
const A180 = Math.PI;
const A360 = Math.PI * 2;
</code></pre>

<p>or clock angles</p>

<pre><code>const A90  = 3;
const A180 = 6;
const A360 = 12;
</code></pre>

<p>No need to find each number in the code base.</p>

<hr>

<h2>Logic</h2>

<ol>
<li><p>The axis argument is ambiguous. Axis? is it the axis of reflection or the axis to reflex from. Also you use a string and to humans <code>"x"</code>, <code>"X"</code> and <code>"y"</code>, <code>"Y"</code> have the same meaning, but your code sees them differently, this is never a good thing. It would pay to check both (upper and lower) or convert to lowercase, or best use a defined constant, </p></li>
<li><p>Why are you using degrees, NO <code>Math</code> functions uses degrees, the only time you need to use degrees is for output, which generally is never needed. Learn to work in <a href="https://en.wikipedia.org/wiki/Radian" rel="nofollow noreferrer">radians</a>, it makes a lot of angle related maths so much easier.</p></li>
<li><p>The code is just too complex for something so simple. The problem is just one of negating the scalar associated with the direction of reflection. I.E. a vector has two scalars <code>x,y</code> if you reflect along X you negate <code>x</code>, if you reflex along Y you negate <code>y</code>. </p>

<p>Messing around with the cyclic angle is not needed. I have a general rule of thumb that if I ever find my self having to normalize a cyclic value E.G. <code>(angle 
% 360)</code> I am doing it wrong and there is a better way.</p></li>
</ol>

<hr>

<h2>Rewrite</h2>

<p><strike>This is how I would write the function. I would never use degrees, that is only ever needed for display only. That makes the function much simplier.</strike></p>

<pre><code>// defined axis names
const AXIS = {x : 0, y : 1}

// function computes the reflected angle
// rad Incoming angle in radians
// dir direction of reflection. Any of AXIS, defaults to AXIS.y
function reflectAngle(rad, dir) {
    return dir === AXIS.x ? Math.acos(-Math.cos(rad)) : Math.asin(-Math.sin(rad));
}

var reflected = reflectAngle(1, AXIS.x);
</code></pre>

<h2>Update:</h2>

<p>Sorry totally did not add the correct example!</p>

<p>As explained in point 3 (above) mirror x or y depending on which axis you are reflecting from.</p>

<pre><code>function reflectAngle(rad, dir) {
    const c = Math.cos(rad), s = Math.sin(rad);
    return Math.atan2(...(dir === "X" ? [s, -c] : [-s, c]));
}
</code></pre>
    </div>