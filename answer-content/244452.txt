<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks good overall! For example, good job using <code>enum</code>s, and writing helpful comments. A few additional possible improvements, implemented below:</p>
<ul>
<li>In the declaration for <code>DIRECTIONS</code>, you don't need to cast <code>9</code> to <code>usize</code>; it can do so implicitly.</li>
<li>Move the code for <code>char_repr</code> to an implementation of <code>Display</code> for <code>CellType</code>.</li>
<li>Consider making more things <code>usize</code> instead of <code>isize</code>.</li>
<li>A few minor things suggested by <code>clippy</code>, such as using <code>for x in &amp;[...]</code> instead of <code>for x in [...].iter()</code></li>
<li>Comment what <code>index % FIELD_SIZE as usize == 0</code> does.</li>
<li>Implement <a href="https://doc.rust-lang.org/std/ops/trait.Index.html" rel="nofollow noreferrer"><code>Index(Mut)</code></a> for <code>Field</code>.</li>
<li>Make things methods on <code>Field</code>.</li>
<li>Rename <code>is_valid_formation</code> to <code>can_place_ship</code>.</li>
<li>Create a <code>Ship</code> struct that implements <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html" rel="nofollow noreferrer"><code>Iterator</code></a> or <a href="https://doc.rust-lang.org/std/iter/trait.IntoIterator.html" rel="nofollow noreferrer"><code>IntoIterator</code></a>.</li>
<li>Use <code>impl Rng</code> instead of <code>SmallRng</code> for code that doesn't care what kind of RNG is used.</li>
</ul>
<p>Other things to consider, not implemented below:</p>
<ul>
<li>Unit tests</li>
<li>Creating a <code>Coordinate</code> struct (may or may not be an improvement)</li>
</ul>
<p>Final code:</p>
<pre class="lang-rust prettyprint-override"><code>#![warn(clippy::all)]
#![warn(clippy::pedantic)]
#![warn(clippy::nursery)]
#![allow(clippy::cast_possible_wrap)]
#![allow(clippy::cast_sign_loss)]

use itertools::Itertools;
use rand::rngs::SmallRng;
use rand::seq::SliceRandom;
use rand::{Rng, SeedableRng};
use std::fmt;
use std::ops::{Index, IndexMut};

const FIELD_SIZE: usize = 10;
#[rustfmt::skip]
const DIRECTIONS: [(isize, isize); 9] = [(0, 0), (0, 1), (0, -1), (-1, 0), (1, 0), (-1, 1), (1, -1), (-1, -1), (1, 1)];

#[derive(Clone, PartialEq, Copy)]
enum CellType {
    EMPTY,
    UNAVAILABLE,
    OCCUPIED,
}

impl fmt::Display for CellType {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        write!(
            f,
            "{}",
            match self {
                Self::EMPTY =&gt; '.',
                Self::UNAVAILABLE =&gt; 'o',
                Self::OCCUPIED =&gt; 'X',
            }
        )
    }
}

#[derive(Copy, Clone)]
struct ShipShape {
    dx: usize,
    dy: usize,
    size: usize,
}

#[derive(Copy, Clone)]
struct Ship {
    x: usize,
    y: usize,
    shape: ShipShape,
}

// If you prefer, you can use `IntoIterator` here instead.
#[allow(clippy::copy_iterator)]
impl Iterator for Ship {
    type Item = (usize, usize);

    fn next(&amp;mut self) -&gt; Option&lt;(usize, usize)&gt; {
        if self.shape.size &gt; 0 {
            let result = (self.x, self.y);
            self.x += self.shape.dx;
            self.y += self.shape.dy;
            self.shape.size -= 1;
            Some(result)
        } else {
            None
        }
    }
}

struct Field {
    field: [CellType; (FIELD_SIZE * FIELD_SIZE) as usize],
}

impl fmt::Display for Field {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {
        for (index, element) in self.field.iter().enumerate() {
            // Start of line
            if index % FIELD_SIZE as usize == 0 {
                writeln!(f)?;
            }
            write!(f, "{}", element)?;
        }
        Ok(())
    }
}

impl Index&lt;(usize, usize)&gt; for Field {
    type Output = CellType;

    fn index(&amp;self, (x, y): (usize, usize)) -&gt; &amp;CellType {
        &amp;self.field[x + y * FIELD_SIZE]
    }
}

impl IndexMut&lt;(usize, usize)&gt; for Field {
    fn index_mut(&amp;mut self, (x, y): (usize, usize)) -&gt; &amp;mut CellType {
        &amp;mut self.field[x + y * FIELD_SIZE]
    }
}

impl Field {
    fn can_place_ship(&amp;self, ship: Ship) -&gt; bool {
        // I. Construct a bounding box for the placed ship.
        let bounds = 0..(FIELD_SIZE as isize);
        for (x, y) in ship {
            // Move in every box direction.
            for direction in &amp;DIRECTIONS {
                // Indices cannot be negative or &gt;= FIELD_SIZE.
                if !bounds.contains(&amp;(x as isize + direction.0))
                    || !bounds.contains(&amp;(y as isize + direction.1))
                {
                    continue;
                }
                let bounding_box_cell = self[(
                    (x as isize + direction.0) as usize,
                    (y as isize + direction.1) as usize,
                )];
                // If there's a ship within a bounding box, halt the loop -- we cannot place the ship here.
                if bounding_box_cell == CellType::OCCUPIED {
                    return false;
                }
            }
        }

        // II. Check whether the cells that are being used to place the ship onto are occupied.
        let bounds = 0..FIELD_SIZE;
        for (x, y) in ship {
            if !bounds.contains(&amp;x) || !bounds.contains(&amp;y) {
                return false;
            }
            let current_cell = self[(x, y)];
            if let CellType::OCCUPIED | CellType::UNAVAILABLE = current_cell {
                return false;
            }
        }
        true
    }

    fn get_available_cells(&amp;self, shape: ShipShape) -&gt; Vec&lt;(usize, usize)&gt; {
        (0..FIELD_SIZE)
            .cartesian_product(0..FIELD_SIZE)
            .filter(|&amp;(x, y)| self.can_place_ship(Ship { x, y, shape }))
            .collect()
    }

    fn emplace_ships(&amp;mut self, size: usize, rng: &amp;mut impl Rng) {
        // Flip a coin to determine an alignment (horizontal / vertical).
        let (dx, dy) = if rng.gen() { (1, 0) } else { (0, 1) };
        let shape = ShipShape { dx, dy, size };
        // Get the vector of appropriate cells.
        let cell_coordinates = self.get_available_cells(shape);
        let (x, y) = *cell_coordinates.choose(rng).unwrap();
        let ship = Ship { x, y, shape };
        // Place a ship!
        for (x, y) in ship {
            self[(x, y)] = CellType::OCCUPIED;
        }
    }

    fn generate() -&gt; Self {
        /* Generating the field. */
        let mut result = Self {
            field: [CellType::EMPTY; FIELD_SIZE * FIELD_SIZE],
        };
        let mut rng: SmallRng = SmallRng::from_entropy();
        for ship_size in &amp;[4, 3, 3, 2, 2, 2, 1, 1, 1, 1] {
            result.emplace_ships(*ship_size, &amp;mut rng);
        }
        result
    }
}
fn main() {
    let field = Field::generate();
    println!("{}", field);
}
</code></pre>
<p><sup>Playground: <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=da8fca6fff5803ad9fe26957c3e70afa" rel="nofollow noreferrer">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=da8fca6fff5803ad9fe26957c3e70afa</a></sup></p>
    </div>