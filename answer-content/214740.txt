<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, working top-down, your triggers at the top should be in sets (<code>#{}</code>), not vectors (you'll see why a little farther down):</p>

<pre><code>(def sure-triggers
  #{"Does this cryogenic chamber make me look fat?"
    "4?"})

(def whatever-triggers
  #{"Tom-ay-to, tom-aaaah-to."
    "Let's go make out behind the gym!"
    "It's OK if you don't want to go to the DMV."
    "Ending with ? means a question."
    "1, 2, 3"})

(def chill-out-triggers
  #{"WATCH OUT!"
    "WHAT THE HELL WERE YOU THINKING?"
    "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"
    "1, 2, 3 GO!"
    "I HATE YOU"})
</code></pre>

<hr>

<p><code>has-phrase</code> has a couple things that can be improved:</p>

<ul>
<li><p>Clojure ends predicates with a <code>?</code> by convention. I'd rename it to <code>has-phrase?</code>.</p></li>
<li><p><code>some</code> already returns a truthy/falsey value. <code>(if pred? true false)</code> is unnecessary.</p></li>
</ul>

<p>Just reduce it to:</p>

<pre><code>(defn has-phrase?
  "Return whether or not the given phrase is found in the collection"
  [phrase coll]
  (some #(= phrase %) coll))
</code></pre>

<p>BUT, now that you're using sets instead of vectors, this whole function is unnecessary:</p>

<pre><code>(whatever-triggers "1, 2, 3")
=&gt; "1, 2, 3" ; Truthy

(whatever-triggers "Not in the set")
=&gt; nil
</code></pre>

<p>Sets themselves can be used as functions. If the item is in the set, they return the item back (a truthy result), else they return <code>nil</code> (falsey). This will also be much faster, since now you don't need to have <code>some</code> iterate potentially the entire vector (although obviously speed isn't a factor here). This changes <code>reponse-for</code> to:</p>

<pre><code>(defn response-for
  "return `true` if the given phrase is found in the collection, `false` otherwise"
  [phrase]
  (cond
    (whatever-triggers phrase) whatever
    (chill-out-triggers phrase) chill-out
    (sure-triggers phrase) sure
    (= (clojure.string/trim phrase) "") fine))
</code></pre>

<hr>

<p>This could be changed using some <code>some</code> trickery. <code>some</code> returns the first truthy value returned by its predicate. If you pass it pairs of <code>[trigger-set response]</code>, you can iterate over the the pairs to find the first one that satisfies it, then return the response:</p>

<pre><code>(defn response-for2 [phrase]
  (some (fn [[trigger-set response]]
          (when (trigger-set phrase)
            response))

        [[sure-triggers sure]
         [chill-out-triggers chill-out]
         [whatever-triggers whatever]
         [#{"" " "} fine]]))
</code></pre>

<p>Now, in this particular example, I wouldn't recommend doing this. It's not as clear as what you already had. I have used <code>(some #(when ...))</code> before though, and it works great in some cases. I just thought I'd show you it here in case you run into a similar problem where this can be applied.</p>

<p>I'm sure something could be done using a map mapping triggers to responses, but I just did another Clojure review, and my brain's tapped out.</p>
    </div>