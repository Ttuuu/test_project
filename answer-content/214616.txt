<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Imports</h1>

<p>Use <code>import java.util.Timer;</code> and <code>import java.util.TimerTask;</code> at the top of the file.  This will allow you to simplify this:</p>

<pre><code>new java.util.Timer().schedule(new java.util.TimerTask() {
</code></pre>

<p>to this:</p>

<pre><code>new Timer().schedule(new TimerTask() {
</code></pre>

<p>which requires less typing and less reading, and so is arguably easier to understand.</p>

<hr>

<h1>Naming</h1>

<p><code>command</code> is a decent name for a <code>Command</code> argument; <code>n</code> is a terrible name for an <code>int</code>.  Is that the count of the number of command objects you want submitted?  You have to consult the documentation for <code>Timer#schedule()</code> to discover that it is the number of milliseconds to wait before executing the command.</p>

<p><code>milliseconds</code>, or <code>delay_ms</code> would be better names.</p>

<p>Similarly, <code>solution()</code> is a terrible name.  Solution to what?  <code>schedule_command()</code> might be a better choice.</p>

<hr>

<h1>Reuse existing interfaces</h1>

<p>The difference between <code>interface Command</code> and <code>interface Runnable</code> is that the former uses <code>execute()</code> where as the latter uses <code>run()</code>.  Oh, and the latter also adds the marker <code>@FunctionalInterface</code>.</p>

<p>By creating your own <code>Command</code> interface, you would force anyone who wants to use your scheduler, who already has classes that implement the standard <code>Runnable</code> interface, to add another interface to their class and forward the <code>execute()</code> method to the <code>run()</code> method (or vis versa).</p>

<hr>

<h1>Timers and Threads</h1>

<p>Every <code>Command</code> passed to <code>solution()</code> will cause the creation of a new <code>Timer()</code> object, with its own timer thread.  Each <code>Timer</code> object can schedule multiple tasks.  Additionally, all tasks owned by a <code>Timer</code> execute sequentially in the same thread, reducing concurrency issues.  Consider:</p>

<pre><code>for (int i=0; i&lt;3; i++) {
    solution( () -&gt; { System.out.print("Hello from command #");
                      Thread.sleep(1);
                      System.out.print(i);
                      Thread.sleep(1);
                      System.out.println("!"); }, 1000 );
}
</code></pre>

<p>When executed, the output might become:</p>

<blockquote>
  <p>Hello from command #Hello from command #0Hello from command #!<br>
  12!<br>
  !</p>
</blockquote>

<p>If your scheduler used a single, common <code>Timer</code> object ...</p>

<pre><code>private static Timer timer = new Timer();

public static void solution(Command command, int n) {
    timer.schedule(new TimerTask() {
        @Override
        public void run() {
            command.execute();
        }
    }, n);
}
</code></pre>

<p>Then you would be guaranteed this output instead:</p>

<blockquote>
  <p>Hello from command #0!<br>
  Hello from command #1!<br>
  Hello from command #2!</p>
</blockquote>

<p>even though each <code>Command</code> was scheduled to run at the same time.</p>

<hr>

<h1>Program Termination</h1>

<p>From the <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Timer.html" rel="noreferrer"><code>Timer</code> documentation</a>:</p>

<blockquote>
  <p>After the last live reference to a Timer object goes away and all outstanding tasks have completed execution, the timer's task execution thread terminates gracefully (and becomes subject to garbage collection). <strong>However, this can take arbitrarily long to occur.</strong></p>
</blockquote>

<p>If you want your program to terminate quickly, you need to call <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Timer.html#cancel()" rel="noreferrer"><code>.cancel()</code></a> on all <code>Timer</code> objects you create, once the last scheduled task has completed (or at least been started).  This could be done by scheduling a task to cancel the task timer:</p>

<pre><code>timer.schedule( () -&gt; timer.cancel() );
</code></pre>

<hr>

<h1>Job Control</h1>

<p>You can <a href="https://docs.oracle.com/javase/10/docs/api/java/util/TimerTask.html#cancel()" rel="noreferrer"><code>.cancel()</code></a> a <code>TimerTask</code> before it has begun executing.  However, nothing is returned from <code>schedule()</code>, so the caller cannot cancel any submitted tasks.</p>

<hr>

<h1>Better Implementation</h1>

<p>Again, from the <code>Timer</code> documentation:</p>

<blockquote>
  <p>Java 5.0 introduced the <code>java.util.concurrent</code> package and one of the concurrency utilities therein is the <a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html" rel="noreferrer"><code>ScheduledThreadPoolExecutor</code></a> ...</p>
</blockquote>

<pre><code>private static ScheduledExecutorService executor;

public static void main(String args[]) {
    executor = Executors.newSingleThreadScheduledExecutor();

    ScheduledFuture&lt;?&gt; future = solution( () -&gt; System.out.println("Hello World"), 1000);

    // Use future here, if desired.

    // Cleanup
    executor.shutdown();
    executor = null;
}

public static ScheduledFuture&lt;?&gt; solution(Runnable command, int delay_ms) {
    return executor.schedule( command, delay_ms, TimeUnit.MILLISECONDS );
}
</code></pre>
    </div>