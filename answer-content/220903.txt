<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>return lists</h1>

<p>your functions seem to return lists or tuples. For 2 or 3 values, this is ok, but <code>diam</code> returns 6 values, <code>metrics</code> 12. This is very unclear, and unstable when you want to add, reorder or remove a metric. Better would be then to either return a <code>dict</code> or a <code>namedtuple</code></p>

<h1>spacing</h1>

<p>pep-8 recommends <code></code> around operators (<code>+</code>,...) I use  a code formatter (<a href="https://github.com/python/black" rel="nofollow noreferrer">black</a>) to format my code, so I don't have to worry about this sort of details any more</p>

<h1>variable naming</h1>

<p>longer variable names don't make your program slower. And if you use a capable IDE, it doesn't slow the coding either. abbreviated variable names on the other hand make code more unclear. There is no need to shorten <code>jacquard</code> to <code>jack</code></p>

<h1>magical values</h1>

<p><code>[0.625, 0.625, 0.625], 1</code> as arguments to <code>surface_distance</code> are magical values, and very unclear what they mean. Easier would be to replace them with a variable with a clear name, or use keyword arguments.</p>

<h1>containers</h1>

<p>If you have a lot of metrics, it is generally cleaner to keep them in 1 data structure (<code>dict</code> for example) instead of 12 different variables, and 12 other variables for the means.</p>

<h1>pandas</h1>

<p>Instead of using <code>numpy</code> directly, why not use a <a href="http://pandas.pydata.org/pandas-docs/stable/getting_started/index.html" rel="nofollow noreferrer"><code>pandas</code></a> DataFrame as data structure? This will allow you to work with labeled data.</p>

<pre><code>import pandas as pd


def metrics(savedir):

    """3D metrics for segmentation evaluation:

    dice score : https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient
    jacquard index : https://en.wikipedia.org/wiki/Jaccard_index
    sensibility &amp; specificity : https://en.wikipedia.org/wiki/Sensitivity_and_specificity
    diameter and volume error
    Surface distance : https://www.cs.ox.ac.uk/files/7732/CS-RR-15-08.pdf
    Hausdorff distance : https://en.wikipedia.org/wiki/Hausdorff_distance
    """

    folder = glab(savedir + "/OutputData/*/")
    results = pd.DataFrame(
        index=folder,
        columns=[
            "dice",
            "jacquard",
            "sensibility",
            "specificity",
            "surface",
            "hausdorff",
            "diam_GT",
            "diam_pred",
            "diam_err",
            "vol_GT",
            "vol_pred",
            "vol_err",
        ],
        dtype=float,
    )
    for folder_name in folder:
        prediction = np.load(folder_name + "prediction.npy")
        ground_truth = np.load(folder_name + "test_label.npy")

        scores = scoring(ground_truth, prediction)
        surface_distance = surfd(
            prediction, ground_truth, [0.625, 0.625, 0.625], 1
        )
        diam_vol = diam(prediction, ground_truth)
        results.loc[folder_name] = pd.Series(
            {
                "dice": scores[0],
                "jacquard": scores[1],
                "sensibility": scores[2],
                "specificity": scores[3],
                "surface": surface_distance.mean(),
                "hausdorff": surface_distance.max(),
                "diam_GT": diam_vol[0],
                "diam_pred": diam_vol[1],
                "diam_err": diam_vol[2],
                "vol_GT": diam_vol[3],
                "vol_pred": diam_vol[4],
                "vol_err": diam_vol[5],
            }
        )

    return results.mean().to_dict()
</code></pre>
    </div>