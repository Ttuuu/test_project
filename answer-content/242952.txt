<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Usage of requests</h2>

<p>Strongly consider replacing your use of bare <code>urllib</code> with <code>requests</code>. It's much more usable. Among other things, it should prevent you from having to worry about an SSL context.</p>

<h2>Type hints</h2>

<pre><code>def is_downloadable(url):
</code></pre>

<p>can be</p>

<pre><code>def is_downloadable(url: str) -&gt; bool:
</code></pre>

<p>And so on for your other functions.</p>

<h2>Boolean expressions</h2>

<pre><code>content_type = header.get('content-type')
if 'text' in content_type.lower():
    return False
if 'html' in content_type.lower():
    return False
return True
</code></pre>

<p>can be</p>

<pre><code>content_type = header.get('content-type', '').lower()
return not (
    'text' in content_type or
    'html' in content_type
)
</code></pre>

<p>Also note that if a content type is not provided, this function will crash unless you change the default of the <code>get</code> to <code>''</code>.</p>

<h2>Dictionary literals</h2>

<p>This:</p>

<pre><code>newspaper = dict({ ...
</code></pre>

<p>does not need a call to <code>dict</code>; simply use the braces and they will make a dictionary literal.</p>

<h2>URL database</h2>

<p>Note what is common in all of your newspaper links and factor it out. In other words, all URLs match the pattern</p>

<pre><code>https://dailyepaper.in/...
</code></pre>

<p>so you do not need to repeat the protocol and host in those links; save that to a different constant.</p>

<h2>Newspaper objects</h2>

<blockquote>
  <p>dictionary to give serial numbers to each newspaper</p>
  
  <p>I think something better could be done instead of this dictionary</p>
</blockquote>

<p>Indeed. Rather than keeping separate dictionaries, consider making a <code>class Newspaper</code> with attributes <code>name: str</code>, <code>link: str</code> and <code>serial: int</code>.</p>

<p>Then after <code>The following Newspapers are available for download</code>, do not hard-code that list; instead loop through your sequence of newspapers and output their serial number and name.</p>

<h2>List literals</h2>

<pre><code>list_paper = list()
</code></pre>

<p>can be</p>

<pre><code>papers = []
</code></pre>

<h2>Get default</h2>

<p>Here:</p>

<pre><code>links = tags[i].get('href',None)
</code></pre>

<p><code>None</code> is the implicit default, so you can omit it. However, it doesn't make sense for you to allow <code>None</code>, because you immediately require a non-null string:</p>

<pre><code>x = re.search("^https://vk.com/", links)
</code></pre>

<p>so instead you probably want <code>''</code> as a default.</p>

<h2>String interpolation</h2>

<pre><code>'For how many days you need the '+ serial_num[ser_ind]+' paper?'
</code></pre>

<p>can be</p>

<pre><code>f'For how many days do you need the {serial_num[ser_ind]} paper?'
</code></pre>

<h2>Raw transfer</h2>

<pre><code>        r = requests.get(link, allow_redirects=True)
        with open(serial_num[ser_ind]+"_"+str(date_that_day)+".pdf",'wb') as f:
            f.write(r.content)
</code></pre>

<p>requires that the entire response be loaded into memory before being written out to a file. In the (unlikely) case that the file is bigger than your memory, the program will probably crash. Instead, consider using <code>requests</code>, passing <code>stream=True</code> to your <code>get</code>, and passing <code>response.raw</code> to <code>shutil.copyfileobj</code>. This will stream the response directly to the disk with a much smaller buffer.</p>
    </div>