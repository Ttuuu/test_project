<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hmm i would in a first refactoring change it to this:</p>
<pre><code>this.testCenterAccomodations.forEach((x: { utilityCode: string; isChecked: boolean; isSelected: boolean; }) =&gt; {
  if (x.utilityCode != 'PSDQRA') {
    return;
  };
  x.isChecked = this.voiceOverLanguageChecked;
  x.isSelected = this.voiceOverLanguageChecked;
});
</code></pre>
<p>The next changes do not have the goal of "shortening" the code. But to make it more readable and easier to change. I would love to hear your feedback about my thoughts.</p>
<p>I would create a small (perhaps local) interface, because <code>{ utilityCode: string; isChecked: boolean; isSelected: boolean; }</code> seems to be a recurring thing.</p>
<pre><code>interface UtilityCodeSelection { 
  utilityCode: string;
  isChecked: boolean; 
  isSelected: boolean; 
}
</code></pre>
<p>Which will result in</p>
<pre><code>this.testCenterAccomodations.forEach((x: UtilityCodeSelection ) =&gt; {
  if (x.utilityCode != 'PSDQRA') {
    return;
  };
  x.isChecked = this.voiceOverLanguageChecked;
  x.isSelected = this.voiceOverLanguageChecked;
});
</code></pre>
<p>Then i would replace the magic variable "PSDQRA" by a constant (or by an enum if you have multiple utility codes we are coding against). Then we could use that constant at all necessary places and would be able to change it centraly. ALSO we can easily find out where our code is refering to this specific value.</p>
<pre><code>interface UtilityCodeSelection { 
  utilityCode: string;
  isChecked: boolean; 
  isSelected: boolean; 
}

export enum UtilityCodes {
    PSDQRA = 'PSDQRA', // Or if PSDQRA has in reality a better name, use that for the enum
    ...
}

this.testCenterAccomodations.forEach((x: UtilityCodeSelection ) =&gt; {
  if (x.utilityCode != UtilityCodes.PSDQRA) {
    return;
  };
  x.isChecked = this.voiceOverLanguageChecked;
  x.isSelected = this.voiceOverLanguageChecked;
});
</code></pre>
<p>And in some cases i would even extract some parts into its own method</p>
<pre><code>this.testCenterAccomodations.forEach((x: UtilityCodeSelection ) =&gt; this.setUtilityCodeSelection(x, UtilityCode.PSDQRA, this.voiceOverLanguageChecked));

 private setUtilityCodeSelection(code: UtilityCodeSelection, forCode: UtilityCode, setTo: boolean):void{
    if (code.utilityCode != forCode) {
      return;
    };
    code.isChecked = setTo;
    code.isSelected = setTo;
}
</code></pre>
<p>This has some drawbacks. I personaly do not like implict changes (here we change the given <code>code</code>) and prefere to change explicitly (make a copy, change the copy and return the copy). Also the extra method is only useful if there are more similar checks. In general its a bad idea to try to generalize things, if there is (at least now) no need for it.</p>
<p>Therefor the chance is high that in your example, i would not move the code in its own method..</p>
<p>As always... Ask 3 developers about coding style and you will get 4 answers. :-)
And they all will be right in some way.</p>
<p>warm regards</p>
    </div>