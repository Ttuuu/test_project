<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>tldr:</strong> you don't use object orientated programming! the following answer only tells you how to use objects</p>

<hr>

<h2>UI / XML</h2>

<p>I would advise you to <a href="https://developer.android.com/training/improving-layouts/reusing-layouts.html" rel="nofollow noreferrer">split your layout</a> into different sub-layouts, so you can re-use the layouts. thus you can easily extend your app in the future.</p>

<h2>CODE</h2>

<p>I think it would be a good idea to use <code>Question</code>-object. Maybe you would be able to create a factory that create these objects for you - just think of it?</p>

<pre><code>Question capitals = questionFactory.createQuestion(
    QuestionType.MultiChoice, 
    new boolean[]{true, false, true},
    new int[]{R.string.question_2_Greece,
        R.string.question_2_Burma,
        R.string.question_2_Luxembourg}
    );
</code></pre>

<p>that would make it easy for you to create any new questions in a simple way. And if you don't know how to do that you can <em>at least</em> write a simple methods to create the <code>Question</code>-objects <code>Question question = createQuestion(...);</code></p>

<p>and once this is done it would be easy to use this <code>Question</code>-object for your layout, the layout <a href="https://stackoverflow.com/questions/2395769/how-to-programmatically-add-views-to-views">you add dynamical</a>, not hardcoded in your xml-layout.</p>

<pre><code>View view = findViewById(R.id.scrollview); //FIXME set an ID in your layout
View multiChoiceView = createMultiChoiceView(capitals);
view.addView(multiChoiceView);
</code></pre>

<p>you can hence create the sublayout programmatical, if you use the inflater</p>

<pre><code>View multiChoiceView = View.inflate(context, multiChoiceView, yourLinearLayout);
</code></pre>

<p>when you creat the layout you can 'on-the-fly' set the values and <strong>bind the gui to the model</strong>. (<a href="https://www.beyondjava.net/blog/model-view-whatever/" rel="nofollow noreferrer">see this explanation for the different approaches on model/view</a>)</p>

<p>and once this is done you can easily get to your results. Results should be represented as well as an object not a <code>String[]</code>, as done in <code>evaluateGui</code>. This way you're abusing the String[] to represent your results. </p>

<pre><code>private List&lt;Question&gt; questions = ... //see above
private Result validateQuestions(){
    Result result = new Result();
    for (Question question: questions){
        result.addScores(question.getScores());            
    }   
    return result;
}
</code></pre>

<p>to validate the result you could also use an enum type instead of counting points.</p>

<pre><code>enum Rating {POOR, MEDICRATE, GOOD, PERFECT};//TODO make a nice toString

public void toastResult(Result result) {
    int scores = result.getScores();
    int amount = result.getAmountQuestions();
    Rating rating = result.getRating();

    String message = MessageFormat.format("you had {0} of {1} - your rating is {2}", scores, amount, rating);
    Toast.makeText(getApplicationContext(), message,
            Toast.LENGTH_SHORT).show();
</code></pre>
    </div>