<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>functions don't need to accept <code>data</code> as parameter</h3>

<p>The function <code>createBar</code> accepts <code>data</code> as a parameter but as it is currently written, could just access that global variable. As mentioned in <a href="https://codereview.stackexchange.com/a/194948/120114">Gerardo's answer</a> it would be wise to limit the scope of variables using IIFEs.</p>

<h3>jQuery</h3>

<p>Your code doesn't appear to use any jQuery (though perhaps you removed any jQuery code when you added your code to your post - if that is the case, then ignore this). There is no point to adding the script tag for <em>jquery.min.js</em>. While that file is minimized, it is 29 KB of useless data being downloaded for users everytime, plus time for the browser to parse it, etc. For more information on this front, see <a href="http://youmightnotneedjquery.com/" rel="nofollow noreferrer">You Might Not Need jQuery</a>.</p>

<h3>Cache DOM references</h3>

<p>DOM lookups aren't exactly cheap, so it is advisable to store DOM references in a variable, and then utilize those variables whenever needed. For instance, there are two lookups in <code>updateSlider()</code>. Those can be moved outside the function - perhaps it would be wise to move all the code into a DOM loaded callback (e.g. using <a href="https://developer.mozilla.org/en/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>document.addEventListener()</code></a> for the  <a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded" rel="nofollow noreferrer"><em>DOMContentLoaded</em></a> event)</p>

<pre><code>document.addEventListener("DOMContentLoaded", function(event) {
    //store DOM references
    var slider = document.getElementById('year-slider');
    var output = document.getElementById('year-span');

    var updateSlider = function() {
        yearSelected = slider.value;
        output.innerHTML = yearSelected;
        d3.selectAll('.svgG').remove();
        drawDonut(getDataFromYear(yearSelected));
    };
});
</code></pre>

<h3>Shared data, HTML, etc.</h3>

<p>I know you originally wanted to know how to share data between separate pages, and while that question isn't really here anymore and I shouldn't do this, I can't help but want to give a solution to that question. One technique is to store the data separately and fetch it via AJAX, or alternatively have the server side code include it (e.g. with PHP, Java, NodeJS, Python, ASP, Ruby, C#, ColdFusion, etc.) after fetching the data from a file, database, etc.. You could also render the common HTML with such a scripting language and have that abstracted to a single function/template/file/etc. </p>

<p>To fetch data with AJAX, there are nice wrappers like the  <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" rel="nofollow noreferrer">fetch API</a> or libraries like <a href="https://github.com/ded/Reqwest" rel="nofollow noreferrer">reqwest</a> and <a href="https://github.com/visionmedia/superagent" rel="nofollow noreferrer">superagent</a>.  If you were actually using jQuery, then you could use <a href="http://api.jquery.com/category/ajax/shorthand-methods/" rel="nofollow noreferrer">its AJAX functions</a> (e.g. <a href="http://api.jquery.com/jQuery.get/" rel="nofollow noreferrer"><code>.get()</code></a>,  <a href="http://api.jquery.com/jquery.post/" rel="nofollow noreferrer"><code>.post()</code></a>, etc.).  See an example in <a href="http://embed.plnkr.co/3vrXWPFABPlEiwtCfbUm/" rel="nofollow noreferrer">this plunker</a> using <code>fetch()</code>.</p>

<p>And the common javascript could be abstracted out to a separate javascript file (e.g. <code>updateRadio()</code>, <code>updateSlider()</code>)</p>
    </div>