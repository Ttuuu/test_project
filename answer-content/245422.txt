<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Localisation</h2>
<blockquote>
<p>The strings are in Spanish</p>
</blockquote>
<p>Great! However, that's not the only thing in Spanish: your variables (<code>elegir_magnitud</code>, <code>unidad_temperatura</code>, etc.) are as well.</p>
<p>This is non-ideal for at least a couple of reasons:</p>
<ul>
<li>Python, being a language whose syntax is written in English, conflicts with your code that is then a mixture of English and Spanish. This is inconsistent.</li>
<li>For better or worse, the de-facto language of software development is English. Particularly for international collaboration or online open-source development, it is important to use a language that is accessible to more people.</li>
</ul>
<p>It's a wonderful thing to apply internationalization (i18n) to your strings, but it should be to your strings only, and not the code.</p>
<h2>Factor out common code</h2>
<p>Consider refactoring your code to:</p>
<ul>
<li>Have only one method that asks for units, called twice (once for source unit and once for destination unit)</li>
<li>Make a tuple of coefficient-offset pairs. These represent the linear function from the given unit to Kelvin and back. This will only need two unit conversion formulae, rather than (worst-case) 2^n with the current strategy.</li>
</ul>
<h2>Bug?</h2>
<p>Are you sure that this works?</p>
<pre><code>cantidad_temperatura % 9*5 -32
</code></pre>
<p>I doubt that modulus is the right thing to do here. You should be using division <code>/</code>.</p>
<h2>Example code</h2>
<p>Notes:</p>
<ul>
<li>This does a rough i18n, with some strings from Google Translate (so my apologies for the likely poor Spanish).</li>
<li>Only English and Spanish are implemented but any other language can be added.</li>
<li>This assumes that your operating system is set to the correct locale</li>
<li>For these purposes, only the <a href="https://en.wikipedia.org/wiki/ISO_639-1" rel="nofollow noreferrer">ISO639-1</a> language without country code is considered</li>
<li>Enums are used for stricter type assurance</li>
<li>Type hints are used for better static analysis and documentation</li>
<li>I have not bothered to add the complexity of input validation, so if input is invalid, there will be an exception thrown</li>
<li>Note the use of <code>locale</code> methods rather than direct <code>int</code> and <code>float</code> construction and formatting</li>
</ul>
<p><strong>strings.py</strong></p>
<pre><code>from locale import getlocale, getdefaultlocale


# For testing only
# from locale import setlocale, LC_ALL
# setlocale(LC_ALL, 'es_ES.UTF8')


def get_lang() -&gt; str:
    lang, _ = getlocale()
    def_lang, _ = getdefaultlocale()
    return (lang or def_lang)[:2]


LANG = get_lang()

if LANG == 'en':
    DIMENSIONS = (
      'Temperature',
      'Length',
      'Mass',
      'Volume',
      'Time',
      'Currency',
    )
    TEMP_UNITS = (
      'Kelvin',
      'Celsius',
      'Fahrenheit',
    )
    ENTER_NUMBER = 'Enter the desired number: '
    CHOOSE_TEMP_SOURCE = 'Choose the source temperature unit to convert: '
    CHOOSE_TEMP_DEST = 'Choose the destination temperature unit to convert: '
    PROVIDE_TEMP = 'Provide the source temperature: '
    RESULT = 'The result of the conversion is:'

elif LANG == 'es':
    DIMENSIONS = (
      'Temperatura',
      'Longitud',
      'Masa',
      'Volumen',
      'Tiempo',
      'Divisa'
    )
    TEMP_UNITS = (
      'Kelvin',
      'Centígrada',
      'Fahrenheit'
    )
    ENTER_NUMBER = 'Entra número deseado: '
    CHOOSE_TEMP_SOURCE = 'Elija la unidad de temperatura fuente para convertir: '
    CHOOSE_TEMP_DEST = 'Elija la unidad de temperatura de destino para convertir: '
    PROVIDE_TEMP = 'Proporcionar la temperatura de la fuente: '
    RESULT = 'El resultado de la conversión es:'
</code></pre>
<p><strong>convert.py</strong></p>
<pre><code>from enum import Enum
from locale import format_string, atof, atoi
from typing import TypeVar, Type, Iterable

from strings import *


class Dimension(Enum):
    TEMPERATURE = 1
    LONGITUDE = 2
    MASS = 3
    VOLUME = 4
    TIME = 5
    CURRENCY = 6


class TempUnit(Enum):
    KELVIN = 1
    CELSIUS = 2
    FAHRENHEIT = 3


# To get from this unit to Kelvin:
# kelvin = m * this_unit + b
TEMP_PARAMETERS = {
    # This unit       m  b
    TempUnit.KELVIN: (1, 0),
    TempUnit.CELSIUS: (1, 273.16),
    TempUnit.FAHRENHEIT: (5/9, 273.16 - 5/9*32),
}


InputEnum = TypeVar('InputEnum', bound=Enum)


def enum_from_input(t_enum: Type[InputEnum], labels: Iterable[str]) -&gt; InputEnum:
    print(
        '\n'.join(
            format_string('%d = %s', (enum.value, label))
            for enum, label in zip(t_enum, labels)
        )
    )
    result = t_enum(atoi(input(ENTER_NUMBER)))
    print()
    return result


def main():
    dimension = enum_from_input(Dimension, DIMENSIONS)
    if dimension != Dimension.TEMPERATURE:
        raise NotImplementedError()

    print(CHOOSE_TEMP_SOURCE)
    source = enum_from_input(TempUnit, TEMP_UNITS)
    print(CHOOSE_TEMP_DEST)
    dest = enum_from_input(TempUnit, TEMP_UNITS)

    temp1 = atof(input(PROVIDE_TEMP))

    # Use a simple linear transformation where y = mx + b; first convert to
    # the base unit (Kelvin)
    m, b = TEMP_PARAMETERS[source]
    kelvin = m*temp1 + b

    # Now calculate inverse to the destination unit
    m, b = TEMP_PARAMETERS[dest]
    temp2 = (kelvin - b)/m

    print(format_string('%s %.1f', (RESULT, temp2)))


if __name__ == '__main__':
    main()
</code></pre>
<p><strong>Example output</strong></p>
<pre class="lang-none prettyprint-override"><code>1 = Temperatura
2 = Longitud
3 = Masa
4 = Volumen
5 = Tiempo
6 = Divisa
Entra número deseado: 1

Elija la unidad de temperatura fuente para convertir: 
1 = Kelvin
2 = Centígrada
3 = Fahrenheit
Entra número deseado: 3

Elija la unidad de temperatura de destino para convertir: 
1 = Kelvin
2 = Centígrada
3 = Fahrenheit
Entra número deseado: 2

Proporcionar la temperatura de la fuente: 81
El resultado de la conversión es: 27,2
</code></pre>
    </div>