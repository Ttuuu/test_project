<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've been working on this for a while now, and from that hard work is <a href="https://github.com/GeeTransit/tkio" rel="nofollow noreferrer">tkio</a>, a <a href="https://github.com/dabeaz/curio" rel="nofollow noreferrer">curio</a> inspired asynchronous library for Python's <code>tkinter</code>. Here are some notable changes from my previous design.</p>

<ol>
<li><p>I removed the idea of screens / windows and added in tasks / loop (from curio and asyncio). The idea about screens was me thinking about video games and their different menus and such. It wouldn't apply to other things like a Sudoku solver or bootleg MS Paint as they would only have one "screen". Tasks are something well known and when combined with synchronizing can replicate the screen layout (one task runs at a time).</p></li>
<li><p>The loop is run from <code>tkinter</code>'s <code>wait_window</code> method. Not many people use this but it is basically <code>mainloop</code> but one that ends when the specified widget is destroyed. With this in mind, <code>mainloop</code> could just be <code>wait_window(root)</code> where <code>root</code> is the top level <code>Tk</code> instance.</p></li>
<li><p>The event and <code>after</code> callbacks run the loop. This means that there needs to be a difference between sending in a coroutine to run versus a suspend point. Luckily there are asynchronous generators which can suspend in between yield points. The loop can be run by sending in a coroutine using <code>cycle = loop.asend(coro)</code> on the loop and event / <code>after</code> callbacks can run the cycle using <code>cycle.send("EVENT_WAKE")</code> or something similar.</p></li>
</ol>

<p>Everything else is from curio: traps, cancellation, and timeout just to name a few. I've also used many different resources to create this and it has been a great experience. I hope that this will be of help to someone and upgrade <code>tkinter</code> to the async world.</p>
    </div>