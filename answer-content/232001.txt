<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I think you should filter out the words you don't want in your game (words with less than 3 characters) in <code>get_words</code>. That way it's convenient for you if you need to pick from the word list multiple times. For example, you might want to give the player the option to 'play again' with a different word. If you do that (and adopt my suggestion about words with punctuation below), you won't need <code>get_target</code> anymore and can just call <code>random.choice</code> directly on the list of words.</p></li>
<li><p>Consider using <a href="https://requests.kennethreitz.org/en/master/" rel="nofollow noreferrer"><code>requests</code></a> to simplify your code:</p>

<pre class="lang-py prettyprint-override"><code>words = requests.get(url).text.splitlines() # List[str]
</code></pre></li>
<li><p>For easier testing, it would be more convenient if <code>play_game</code> took in <code>target: str</code> as a parameter. This way you can do ad-hoc testing with a word of your choice.</p></li>
<li><p>When you iterate over <code>target</code> to generate <code>comp</code>, you can also construct a mapping of letters to indices in <code>target</code>. This makes revealing correctly guessed characters in <code>target</code> more efficient:</p>

<pre class="lang-py prettyprint-override"><code>"""
Note that this also handles words with punctuation
by filling them in for the player, e.g.

   R&amp;D -&gt; _ &amp; _
  Ph.D -&gt; _ _ . _
you'll -&gt; _ _ _ ' _ _
"""
char_to_indices = defaultdict(list)
comp = []
for i, c in enumerate(target):
    if c in string.ascii_letters:
        char_to_indices[c.lower()].append(i)
        comp.append('_')
    else:
        comp.append(c)
</code></pre>

<p>Revealing instances of the correctly guessed character:</p>

<pre class="lang-py prettyprint-override"><code>if guess in char_to_indices:
    for i in char_to_indices[guess]:
        comp[i] = target[i]
</code></pre></li>
</ul>

<h1>General comments about usability</h1>

<ul>
<li><p>It's a fairly large word list, so consider caching it to a file so the player doesn't have to download it again each time they want to play.</p></li>
<li><p>If the secret word is 'Apple' and the player guesses 'a', the game doesn't fill in 'A'. I think it would be a better play experience if the game wasn't strict about the case of the guessed letter (this is handled above in the code snippets with <code>char_to_indices</code>).</p></li>
<li><p>When searching the word list, I didn't see any entries that had numerical digits 0-9. Interpreting a digit character as an index into the string <code>string.ascii_lowercase</code> is unintuitive/surprising behavior as well. Seems like <code>get_guess</code> should only complain if the player didn't enter exactly one character from the alphabet.</p></li>
<li><p>One improvement to be more user-friendly might be to print out a reference 'letter bank' of all the alphabet letters the player hasn't guessed yet:</p>

<pre class="lang-py prettyprint-override"><code># start with all 26 letters
characters_left = string.ascii_lowercase

# printing out the 'letter bank'
print('Target:', ' '.join(comp))
print(f'\n[ {characters_left} ]')
# ...

# removing a player's guess
characters_left = characters_left.replace(guess, ' ')
</code></pre></li>
<li><p>When the player wins, print out the entire word! Currently the game just ends abruptly with the congratulatory message.</p></li>
</ul>
    </div>