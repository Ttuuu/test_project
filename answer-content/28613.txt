<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I introduced a bug into our codebase by calling #titleize on a string that could possibly come in as nil</p>
</blockquote>

<p>When a problem is so pervasive, it's usually a sign that there is a conceptual problem with the language itself, some call it <a href="http://en.wikipedia.org/wiki/Void_safety" rel="nofollow noreferrer">void safety</a>, also dubbed "the billion-dollar mistake". Some languages, specially the functional ones, use an <a href="http://en.wikipedia.org/wiki/Option_type" rel="nofollow noreferrer">Option type</a>. Let's see the options in Ruby:</p>

<ul>
<li><p><code>medication.route_name.try(:titleize)</code>. This is probably the most idiomatic approach in Rails. You say you're not totally happy, yes, it's ugly that a method name ended up being a symbol. Note, however, that if you want an empty string as fallback, you should write <code>medication.route_name.try(:titleize) || ""</code>. </p></li>
<li><p>Very similar to <code>try</code>, I prefer the proxy approach of <a href="https://github.com/raganwald/andand" rel="nofollow noreferrer">andand</a>/<a href="http://ick.rubyforge.org/" rel="nofollow noreferrer">maybe</a>: <code>medication.route_name.maybe.titleize || ""</code>. </p></li>
<li><p><code>medication.route_name.to_s.titleize</code>. IMO, that's dubious. You are calling <code>to_s</code> to a <code>nil</code> object. Yes, it happens to return <code>""</code>, but it could as well return <code>"nil"</code> (see for example Python: <code>str(None) #=&gt; 'None'</code>). Too implicit.</p></li>
<li><p><code>medication.route_name.present? medication.route_name.titleize : ''</code>. You are protecting yourself against <code>nil</code> objects, not empty strings, so there is no need to use <code>present?</code>: <code>medication.route_name ? medication.route_name.titleize : ''</code>. As you say, this is simple but verbose. Also, imagine you have a chain of  nullable values, it becomes a real mess. That's why <code>andand</code> and similar libraries were created.</p></li>
</ul>

<p>By the way, I've wrote about this subject at <a href="https://github.com/tokland/tokland/wiki/RubyIdioms#user-content-managing-nils-the-maybe-pattern" rel="nofollow noreferrer">RubyIdioms</a>.</p>
    </div>