<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't need two passes.  </p>

<blockquote>
<pre><code>    boolean status = false;
    int i;
    int count = 0;
    for (i = 0; i &lt; a.length; i++) {
        if (a[i] % 2 == 0) {
            count++;
        }
    }
    if (count == 2) {
        int j;
        for (j = 0; j &lt; a.length; j++) {
            if (a[j] % 2 == 0) {
                System.out.println(a[j]);
                break;
            }
        }
        int nextValue = a[j + 1];
        System.out.println(nextValue);
        if (nextValue % 2 == 0) {
            status = true;
        }
    } else {
        status = false;
    }
    return status;
</code></pre>
</blockquote>

<p>You can replace this with just </p>

<pre><code>    int i;
    for (i = 0; i &lt; a.length - 1; i++) {
        if (a[i] % 2 == 0) {
            i++;
            if (a[i] % 2 == 0) {
                i++;
                break;
            } else {
                return false;
            }
        }
    }

    if (i == a.length &amp;&amp; a[i-1] % 2 != 0) {
        return false;
    }

    for (; i &lt; a.length; i++) {
        if (a[i] % 2 == 0) {
            return false;
        }
    }

    return true;
</code></pre>

<p>or even shorter </p>

<pre><code>    for (int i = 0; i &lt; a.length - 1; i++) {
        if (a[i] % 2 == 0) {
            i++;
            if (a[i] % 2 == 0) {
                i++;
                for (; i &lt; a.length; i++) {
                    if (a[i] % 2 == 0) {
                        return false;
                    }
                }

                return true;
            } else {
                return false;
            }
        }
    }

    return false;
</code></pre>

<p>Either of these only requires a single scan.  </p>

<p>If they find no even numbers in the first <code>a.length - 1</code> elements, they fall through and <code>return false</code>.  </p>

<p>If they find an even number but the next number is odd, they <code>return false</code>.  </p>

<p>If they find two even numbers and then find a third, they <code>return false</code>.  </p>

<p>If they find two even numbers and every remaining number is odd, they <code>return true</code>.</p>

<p>This saves both <code>status</code> and <code>count</code> as variables.  </p>

<p>But the shortest version that I could write was </p>

<pre><code>    int evensCount = 0;
    for (int number : numbers) {
        if (number % 2 == 0) {
            evensCount++;
        } else if (evensCount &gt; 0 &amp;&amp; evensCount != 2) {
            return false;
        }
    }

    return evensCount == 2;
</code></pre>

<p>Note that I renamed <code>a</code> to <code>numbers</code> in this case.  I prefer that kind of name for collections and arrays, and since I only use it once, there was less advantage to terseness.  </p>

<p>This version only checks if numbers are even in one place.  All the other versions had to do this in multiple places.  I believe that makes this code DRYer as well as shorter.  </p>

<p>This iterates through the array, counting the even numbers.  For each odd number, it checks if it has seen any even numbers.  If it has, it checks if it has seen exactly two.  If not, it can <code>return false</code>.  If it has seen exactly two consecutive even numbers, it keeps going.  If it goes all the way through and finds exactly two even numbers, it can <code>return</code> true.  Otherwise, it returns false.  </p>

<p>So if it sees one even number followed by an odd number, it will abort and <code>return false</code>.  The <code>evensCount</code> will be equal to <code>1</code>.  </p>

<p>If it sees three or more consecutive even numbers, it will <code>return false</code> once it sees the next odd number.  Or when it is done iterating if the even numbers last until the end.  </p>

<p>If it sees two consecutive even numbers and then an odd number, it will search for more even numbers.  If it finds one, it will eventually <code>return false</code>.  If it doesn't, it will <code>return true</code> after scanning the entire array.  </p>

<p>You could sometimes speed it up by adding another <code>if</code> that checks if <code>evensCount</code> is greater than two.  However, that will also slow it down in some situations.  And of course it is more code.  If time is critical, it might help.  Or not.  It really depends on the inputs.  I omitted it because it is only sometimes better at all and I'm not sure we need to optimize to that level.  </p>

<p>My test cases:  </p>

<pre><code>    System.out.println("The result is: " + isTwinoid(new int[]{3, 3, 2, 6, 5, 6, 7}));
    System.out.println("The result is: " + isTwinoid(new int[]{3, 3, 2, 6, 6, 7}));
    System.out.println("The result is: " + isTwinoid(new int[]{3, 3, 2, 7, 6, 7}));
    System.out.println("The result is: " + isTwinoid(new int[]{3, 8, 5, 7, 3}));
    System.out.println("The result is: " + isTwinoid(new int[]{3, 3, 2, 6, 7}));
    System.out.println("The result is: " + isTwinoid(new int[]{3, 3, 2, 6}));
</code></pre>

<p>Results:  </p>

<blockquote>
  <p>The result is: false<br>
  The result is: false<br>
  The result is: false<br>
  The result is: false<br>
  The result is: true<br>
  The result is: true</p>
</blockquote>
    </div>