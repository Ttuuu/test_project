<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(Please note: that I'm writing this while I walk through your code, so things I spot I will write down. This so can be sometimes a bit difficult to follow, I apologize!)</p>

<p>Rust has pretty good tooling, e.g. <a href="https://github.com/rust-lang/rustfmt" rel="nofollow noreferrer"><code>rustfmt</code></a> which ensures, that the code you wrote compiles with the <a href="https://github.com/rust-dev-tools/fmt-rfcs" rel="nofollow noreferrer">rust style guidlines</a>. This is the first step you should do (it's pure formatting, does nothing else).</p>

<p>Second, there is <a href="https://github.com/rust-lang/rust-clippy" rel="nofollow noreferrer"><code>clippy</code></a> which spots common mistakes in your code, e.g. using <code>return 3;</code> as a last statement in a function (which is not recommended, but not actually wrong).</p>

<p>The neat thing is, that this is really painless to install and use.</p>

<ul>
<li><code>rustup component add clippy rustfmt</code>

<ul>
<li>installs clippy and rustfmt for your current toolchain</li>
</ul></li>
<li><code>cargo rustfmt</code>

<ul>
<li>formats the code, you may want to commit the code before processing further</li>
</ul></li>
<li><code>cargo clippy</code>

<ul>
<li>Spots common mistakes and potential errors in your code</li>
</ul></li>
</ul>

<p>To highlight some of the things you do which are not considered as <em>rusty</em>:</p>

<hr>

<pre class="lang-none prettyprint-override"><code>   --&gt; src/core/parser.rs:129:9
129 |         return Result::Ok(prog);
</code></pre>

<p>Make this</p>

<pre class="lang-rust prettyprint-override"><code>Ok(prog)
</code></pre>

<p>You can omit <code>return</code> and espcially <code>Result</code>, because it is <a href="https://doc.rust-lang.org/std/prelude/index.html" rel="nofollow noreferrer">in the prelude of <code>std</code></a>.
Also do this for other occurences, e.g. <code>src/core/program.rs:139</code> and <code>src/lib.rs:100</code>. Especially you do <code>Result::Ok/Err</code> very often, although you can shorten it to <code>Ok(...)</code> or <code>Err(...)</code>.</p>

<hr>

<p>Transform</p>

<pre class="lang-none prettyprint-override"><code>src/core/parser.rs:60:12
60 |         if self.code_buffer.len() != 0 {
</code></pre>

<p>to</p>

<pre class="lang-rust prettyprint-override"><code>if !self.code_buffer.is_empty() {
</code></pre>

<hr>

<pre class="lang-none prettyprint-override"><code>src/lib.rs:125:9
    |
125 | match io::stdin().bytes().next() {
126 |     Some(v) =&gt; self.tape.set_val(v.unwrap()),
127 | 
128 |     None =&gt; {}
129 | }
</code></pre>

<pre class="lang-rust prettyprint-override"><code>if let Some(v) = io::stdin().bytes().next() {
    self.tape.set_val(v.unwrap());
}
</code></pre>

<hr>

<p>You use unwrap quite often. You should either consider using a <code>Result</code> or <a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.expect" rel="nofollow noreferrer"><code>{Option,Result}::expect</code></a> which will panic with a custom message instead of the default one which you can use to explain what went wrong and why. It is considered to be better than using plain unwrap (unless you really, <strong>really</strong> know it cannot fail, but often you should use a <code>if let</code> then like I showed above.</p>

<hr>

<p>I would recommend using <code>#[derive(Debug)]</code> on types, so debugging is easier. Also provide a <a href="https://doc.rust-lang.org/std/default/trait.Default.html" rel="nofollow noreferrer"><code>Default</code></a> implementation where suiteable, e.g. for <code>Inter</code>, <code>Memory</code>, <code>Program</code> and <code>Parser</code>. A rule of thumb is, whenever you have a <code>new</code> "constructor" with no arguments, provide a <code>Default</code> impl.</p>

<pre class="lang-rust prettyprint-override"><code>#[derive(Debug, Default)]
pub struct Inter {
    tape: Memory,
    program: Program,
    parser: Parser,
}
</code></pre>

<hr>

<p>I would rewrite the <code>Inter::load</code> and <code>Inter::load_from_file</code> as static methods. In contrast to other OOP-languages rust does not have an explicit constructor and is therefore not bound to a specific return value, so you can have something like <code>fn new() -&gt; Result&lt;Self, Error&gt;</code> which is really neat. Or you could provide a method <code>with_parser</code> to <code>Inter</code>, e.g.</p>

<pre class="lang-rust prettyprint-override"><code>pub fn with_parser(parser: Parser) -&gt; Self {
    Inter {
        parser,
        ..Default::default()
    }
}
</code></pre>

<p>This way you would get rid of redudant methods, which is always a good thing!</p>

<p><code>Parser::load</code> would then look similar to</p>

<pre class="lang-rust prettyprint-override"><code>impl Parser {
    pub fn load&lt;S: Into&lt;String&gt;&gt;(buffer: S) -&gt; Result&lt;Self, Error&gt; {
        let buffer = buffer.into().into_bytes();
        if buffer.is_empty() {
            Err(Error::EmptyProgram)?; // or return Err(Error::EmptyProgram);
        }
        Ok(Parser {
            code_buffer: buffer.into_bytes()
        })
    }
}
</code></pre>

<p>Same goes for <code>load_from_file</code>.</p>

<hr>

<p>Your <code>Inter</code> does not new the <code>parser</code> member at all. You could get rid of it completly, because you only use it for parsing text.<br>
So instead of providing a <code>new</code> function without parameters on <code>Inter</code>, I would have a function: <code>pub fn with_program(program: Program) -&gt; Self</code> which you can call like</p>

<pre class="lang-rust prettyprint-override"><code>fn run() -&gt; Result&lt;(), Error&gt; {
    let interpreter = Inter::with_program(Parser::load_from_file("/dev/urandom")?.parse()?);
    // ...
}
</code></pre>

<p>This of course makes it impossible implementing <code>Default</code> for <code>Inter</code>, unless you want it to be possible to create an empty tape/program (You also could make <code>Parser::load_from_file</code> return a <code>Result&lt;Program, Error&gt;</code> instead, so you get rid of the extra <code>parse</code> call.</p>

<hr>

<p>Why do you parse bytes, instead of chars? You suspect, that you are only getting ascii chars, but what if there is a <code>ß</code> or <code>Õ</code> in the text you load. This will lead to very weird errors.<br>
Also the function looks very c-ish. You have a lot of mutable variables and index variables. Rust doesn't do that, instead just go with (<code>self.input</code> is a <code>String</code>): <code>for c in self.input.chars()</code>.<br>
Also you can group common actions together, e.g.</p>

<pre class="lang-rust prettyprint-override"><code>for c in self.code.chars() {
    match c {
        '+' | '-' | '&gt;' | ... /* insert rest here */ =&gt; { unimplemented!() },
        _ =&gt; { /* the rest */ unimplemented!() },
    }
}
</code></pre>

<p>These are just a few things, I do not have time (sorry!), but I think you can start with this. If you want I can update it later on with more examples and how to do it differently.</p>
    </div>