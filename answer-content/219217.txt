<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After looking at your code for a while, I think I understood your requirements. They can be summarized in this table:</p>

<pre><code>Level   Descrs   Certs   TSoc   Other
    1       0        0   no     no
    2      29        0   no     yes
    3      49        3   yes    yes
    4      79        5   yes    yes
</code></pre>

<p>That's the essence of your feature matrix, and that's probably how it looks in the requirements document. The code should have this data in table form so that later requirements can be adjusted easily, without having to dive deep into the code.</p>

<p>You should have a function that tests if such a plan is satisfied:</p>

<pre><code>const plans = {
    1: {maxDescriptions:  0, maxCertifications: 0, teaserAndSocial: false, other: false},
    2: {maxDescriptions: 29, maxCertifications: 0, teaserAndSocial: false, other: true},
    3: {maxDescriptions: 49, maxCertifications: 3, teaserAndSocial: true,  other: true},
    4: {maxDescriptions: 79, maxCertifications: 5, teaserAndSocial: true,  other: true}
};

function planSatisfied(plan, obj) {
    if (obj.description.length &gt; plan.maxDescriptions) {
        return false;
    }

    if (obj.certifications.length &gt; plan.maxCertifications) {
        return false;
    }

    if (!plan.teaserAndSocial &amp;&amp; (obj.teaser || obj.social.length &gt; 0)) {
        return false;
    }

    if (!plan.other &amp;&amp; (obj.locationLat || obj.locationLong || obj.workingHourEnd || obj.workingHourStart)) {
        return false;
    }

    return true;
}

providerSchema.pre('save', function(next) {
    const plan = plans[this.level] || plans[1];
    if (planSatisfied(plan, this)) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }
});
</code></pre>

<p>Using this code structure, it is easy to:</p>

<ul>
<li>see what the actual requirements for the plans are, by only looking at the 
<code>plans</code> table.</li>
<li>change the features of a plan, you just have to edit the <code>plans</code> table.</li>
<li>add a new feature to all plans, you just have to add it to the table and then once to the <code>planSatisfied</code> function.</li>
<li>understand the structure of the code, since it still uses only functions, if clauses and comparisons.</li>
</ul>

<p>This should cover the typical changes that you will face. Anything else will need a code rewrite anyway.</p>
    </div>