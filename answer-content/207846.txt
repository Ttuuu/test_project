<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While the given function does work for simple cases, it will <em>not</em> perform as expected if there are multiple colors within <code>richText</code>. The first color will override all other colors.</p>

<p>First, a look at your implementation:</p>

<ol>
<li><p>Why is <code>richText</code> used in some places and the (global?) <code>text</code> in others? It looks like these are expected to be equivalent, so you should just use <code>richText</code> since it is explicitly passed in.</p></li>
<li><p>Instead of mutating the global <code>text</code>, you should return the replaced result. This makes testing the function easier and debugging much less painful.</p></li>
<li><p>Why is this a class function? It seems to have well defined inputs &amp; outputs that does not depend on the state of any object.</p></li>
<li><p>Instead of manually padding numbers with <code>element.length === 1 ? '0' + element : element</code>, you should use <code>element.padStart(2, '0')</code> if possible. The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart#Polyfill" rel="nofollow noreferrer">polyfill</a> isn't that large if it isn't supported everywhere you need it yet (IE), and it is considerably easier to read.</p></li>
<li><p><code>parseInt</code> ignores leading whitespace, so there's no need to do <code>str.trim()</code>.</p></li>
<li><p><code>String.prototype.replace</code> accepts a replace function, which will be called with each match. Use this to extract the rgb values instead of doing <code>re.exec</code> yourself. In the vast majority of cases, you should not need <code>re.exec</code>.</p></li>
<li><p>Should text inside the element really be converted? If you are manipulating HTML as text, you probably shouldn't be. If this <code>rgb()</code> text is in the <code>style</code> element of the element, you could be using <code>element.getAttribute('style')</code> instead.</p></li>
<li><p>What should happen if I wrote <code>rgb(1, 2, 3, 4, 5, 'asdf')</code>?</p></li>
</ol>

<p>Here is how I would write this function, keeping your assumption that all rgb strings are well formed.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function cleanupRichText(richText) {
  return richText.replace(/rgb\((.+?)\)/ig, (_, rgb) =&gt; {
    return '#' + rgb.split(',')
      .map(str =&gt; parseInt(str, 10).toString(16).padStart(2, '0'))
      .join('')
  })
}

const tests = [
  ['rgb(234, 112, 30)', '#ea701e'],
  ['rgb(0, 0, 0)', '#000000'],
  ['RGB(255, 255,255)', '#ffffff'],
  ['rgb(0, 0, 0) rgb(170, 170, 170)', '#000000 #aaaaaa']
]

for (const [text, expected] of tests) {
  const result = cleanupRichText(text)
  console.log(result === expected ? 'PASS' : 'FAIL', text, '-&gt;', result)
}</code></pre>
</div>
</div>

    </div>