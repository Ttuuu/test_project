<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use a better container</h1>

<p>The main issue is that <code>std::vector&lt;int&gt;</code> is a bad container for storing a set of ASCII characters. Every vector allocates on the heap, and an empty vector is likely 24 bytes in size. So this is huge waste. Why not use a container designed to hold a series of ASCII characters, like... <code>std::string</code>!</p>

<h1>Do you need to store all possible combinations in memory?</h1>

<p>You are first building a vector of all possible combinations with the desired sum. But the only thing you are doing with it afterwards is writing the result to a file. That's a huge waste of memory, and maintaining the vector of vectors in itself costs some CPU time as well. Why not write the results to a file immediately?</p>

<h1>Exit early when your combination has already exceeded the desired sum</h1>

<p>You always try to fill the vector <code>values</code> with <code>characters</code> elements, and try each possible element at each position. However, in <code>brute()</code>, you should calculate the partial sum of elements 0 up to <code>n</code>, and then just check in the for loop whether adding <code>i</code> to that sum would be equal to or higher than the desired sum. If so, if it's equal output the combination, but in any case return at that point instead of trying other values.</p>

<h1>Use <code>\n</code> consistently to end lines</h1>

<p>You are mixing <code>\n</code>, <code>\r\n</code> and <code>std::endl</code> in your code. Stick to <code>\n</code>, it is the standard way of ending a line in C and C++. The underlying I/O routines will automatically convert the newlines to <code>\r\n</code> on Windows.</p>

<p><code>std::endl</code> is equivalent to <code>\n</code> plus a call to <code>flush()</code>. Unless there is a good reason to, you don't want this extra flushing to happen, since it reduces the performance of your program. Normally, <code>std::cout</code> is line-buffered, so if something ends with a <code>\n</code>, it is already flushed automatically. This also means you should remove the explicit call to <code>cout.flush()</code>.</p>
    </div>