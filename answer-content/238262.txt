<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid <code>using namespace std;</code></h2>

<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<h2>Missing Error Checking</h2>

<p>There is no guarantee that the input file <code>input.io</code> exists, so a test after </p>

<h2>Return Values From Functions</h2>

<p>It is generally better to return values from functions rather than passing in references to variables. It is also better to use C++ container classes rather than old C style arrays in C++. An example of this is the init function. If a vector was used rather than an old C style array the vector could be returned, and the array and count would not need to be passed in by reference. In addition the number of nodes would be contained in the vector so the 2 variables wouldn't be necessary, only the vector is necessary.</p>

<p>Doing this would also simplify the <code>init()</code> function.</p>

<pre><code>std::vector&lt;Node *&gt; init(ifstream &amp;fileIO) {
    size_t n;
    fileIO &gt;&gt; n;

    std::vector&lt;Node *&gt; nodes;

    std::vector&lt;std::vector&lt;int&gt;&gt; adj;
    for (size_t i = 0; i &lt; n; i++) {
        std::vector&lt;int&gt; subAdj;
        for (size_t j = 0; j &lt; n; j++) {
            subAdj.push_back(0);
        }
        adj.push_back(subAdj);
    }

    int start;
    int end
    int weight;
    while (fileIO &gt;&gt; start &gt;&gt; end &gt;&gt; weight) {
        adj[start - 1][end - 1] = weight;
        adj[end - 1][start - 1] = weight;
    }

    for (size_t i = 0; i &lt; n; i++) {
        nodes.push_back(new Node(i + 1));
    }

    for (size_t i = 0; i &lt; n; i++)
    {
        for (size_t j = 0; j &lt; n; j++)
        {
            if (adj[i][j] != 0)
            {
                nodes[i]-&gt;addNeighbor(nodes[j]);
                nodes[i]-&gt;addDist(adj[i][j]);
            }
        }
    }

    return nodes;
}
</code></pre>

<h2>Reducing the Need to Allocate and Delete Data Structures</h2>

<p>Because the code is utilizing old style C arrays and pointers there is memory allocation and memory de-allocation involved. Using a C++ container class such as std::vector would reduce this. Defining the vector within the function as a local variable would allow the variable to be deleted automatically when the function ended as shown above. </p>

<h2>Prefer size_t Over int</h2>

<p>In C++ it is better to use the <code>size_t</code> type for indexing through arrays and vectors rather than using an int. Generally indexes should never go negative and <code>size_t</code> is unsigned rather than <code>signed</code>.</p>

<h2>The <code>this</code> Pointer</h2>

<p>Generally in C++ it isn't necessary to use the <code>this</code> pointer to access members of a class. In this code it was necessary because of name collisions between the input variable and the member variable. One way around this in the current code would be to make the member variable names clearer, this would also remove the necessity for comments in the class declaration:</p>

<pre><code>class Node {
    int label;
    int distanceFromOrigin;
    bool processed;           // Visited node indicator
    Node* parent;
    vector&lt;Node*&gt; neighbors;
    vector&lt;int&gt; dist;         // Distance from each heighbor

public:
    Node(int = 0);
    void addNeighbor(Node*);
    void addDist(int);
    void setLabel(int);
    void setD(int);
    void setProccessed(bool);
    void setParent(Node*);
    int getLabel();
    int getD();
    bool isProcessed();
    Node* getParent();
    vector&lt;Node*&gt; getNeighbors();
    vector&lt;int&gt; getDist();
};

Node::Node(int Label) {
    label = Label;
}

void Node::setD(int Distance) {
    distanceFromOrigin = Distance;
}
</code></pre>
    </div>