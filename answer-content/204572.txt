<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Both branches of the <code>if</code> statement have the line:</p>

<pre><code>temp.append(i)
</code></pre>

<p>This duplication could be avoided.</p></li>
<li><p>The variable <code>temp</code> could have a better name, for example <code>group</code> or <code>current_group</code>.</p></li>
<li><p><code>i[1]</code> is evaluated twice.</p></li>
<li><p>The variable name <code>i</code> is normally used for an <em>index</em>, but in this case it is an element of the list, so it could have a better name.</p></li>
<li><p>These lines appear twice:</p>

<pre><code>random.shuffle(temp)
new_pieces_needed +=  temp
</code></pre>

<p>This duplication could be avoided by postponing the shuffles until the groups have been found, like this:</p>

<pre><code># Group pieces_needed according to their frequency.
groups = []
current_freq = object()
for piece in pieces_needed:
    freq = piece[1]
    if freq != current_freq:
        groups.append([])
        current_freq = freq
    groups[-1].append(piece)

# Randomly shuffle each group.
for group in groups:
    random.shuffle(group)

# Concatenate the shuffled groups.
new_pieces_needed = [piece for group in groups for piece in group]
</code></pre></li>
<li><p>There is something arbitrary about the use of "pieces" and "frequency" and <code>piece[1]</code>. The same general algorithm would work for any kind of data, not just pieces. So I think the code would be clearer if we generalized it like this, taking an arbitrary iterable and an optional key function:</p>

<pre><code>def shuffle_groups(iterable, key=None):
    """Group the iterable (using the key function if supplied), randomly
    shuffle each group, and return the concatenation of the shuffled
    groups.

    """
</code></pre>

<p>and then we can shuffle the pieces by passing <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter(1)</code></a> for the <code>key</code> argument:</p>

<pre><code>from operator import itemgetter
new_pieces_needed = shuffle_groups(pieces_needed, key=itemgetter(1))
</code></pre></li>
<li><p>The grouping logic can be delegated to <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> and the concatenation to <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>

<pre><code>from itertools import chain, groupby
from random import shuffle

def shuffle_groups(iterable, key=None):
    """Group the iterable (using the key function if supplied), randomly
    shuffle each group, and return the concatenation of the shuffled
    groups.

    """
    groups = [list(group) for _, group in groupby(iterable, key)]
    for group in groups:
        shuffle(group)
    return list(chain(*groups))
</code></pre></li>
</ol>
    </div>