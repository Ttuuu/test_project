<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I stumbled upon your question by accident (I normally only visit stackoverflow) and finally decided to make an account.</p>

<h1>The Idea</h1>

<p>After I saw @Blindman67 answer (which I cannot comment since I do not have enough reputation), I was wondering if we could reduce the iterations from <strong>nâˆ—1.5</strong> to just <strong>n</strong>. Thus, I propose this idea. Instead of evaluating all the way to the right and then coming back, create 2 different pointers.</p>

<p>pointer <code>i</code> would go from left to right, and pointer <code>j</code> would go from right to left. The idea is to get the first and last block, and figure out which one is higher. Then, use the lowest one for our walls. If <code>maxL &lt; maxR</code>, we move up, and compare <code>height[i]</code> to <code>maxL</code>, since we know for sure that there is a wall somewhere to the right side which will retain the water. On the other side, if <code>maxR &lt; maxL</code>, we do the opposite. By moving <code>i</code> up every time we compare it to <code>maxL</code> and <code>j</code> down every time we compare it to <code>maxR</code>, when <code>i=j</code> it means we evaluated every single point from our array.</p>

<h1>Example Code</h1>

<p>I believe the solution is still <strong><em>O(n)</em></strong> complexity and <strong><em>O(i)</em></strong> storage, but I have little knowledge in this fields, so if anyone could confirm I would appreciate.</p>

<pre><code>var trap = function(height) {
  const len = height.length;
  let rainWater = 0;
  let maxL = height[0];
  let maxR = height[len - 1];
  let i = 1;
  let j = len - 2;

  while ( i &lt;= j ) { 
      if ( maxL &lt; maxR ) {
          maxL = height[i] &gt; maxL ? height[i] : maxL;      
          rainWater += maxL - height[i];
          i++;  
      } else {
          maxR = height[j] &gt; maxR ? height[j] : maxR;  
          rainWater += maxR - height[j];
          j--;    
      }
  }
  return rainWater;
};
</code></pre>
    </div>