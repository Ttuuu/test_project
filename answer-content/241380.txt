<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just looking at <code>wordPop</code> since that's where you say the most time is being taken:</p>

<ul>
<li><p>I think your validity check is broken. There's an <code>if</code> statement to make sure the line is valid, but no <code>else</code>, and the code after the <code>if</code> uses variables defined within the conditional block.</p></li>
<li><p>Use <code>" ".join(currWordList)</code> instead of manually concatenating a bunch of strings. That'll save you the creation of a bunch of intermediate string objects.</p></li>
<li><p>You're storing values of <code>1</code> in <code>usedTagset</code>, but that's meaningless. What you're actually doing each time is fetching the object from the database. Sure, that's a "fast" lookup if the <code>name</code> field is indexed, but nowhere near as fast as just fetching the object from the dictionary. Instead, consider something like the following:</p>

<pre><code>if tagsetName not in usedTagset:
    usedTagset[tagsetName] = TagSet.objects.create(name=tagsetName)
tagSetObject = usedTagset[tagsetName]
</code></pre></li>
<li><p>Same thing for the <code>findFeature</code> chunk in the <code>allLabels</code> loop. If you're just doing a couple lookups, <code>.get</code> on an indexed column is super fast... but that's "fast" relative to database speeds. In this context, "fast" means a few milliseconds or most of a ms, most likely. That's completely intolerable when you're doing a loop of hundreds of thousands or millions of rows. Fetch the objects once, cache them in memory, and do direct lookups using a dictionary. You can initialize the cache as follows:</p>

<pre><code>usedTagset = {tag.name: tag for tag in TagSet.objects.all()}
</code></pre>

<p>and then, as discussed above, save any newly created objects as you create them rather than re-fetch them each time. If you're not sure if something already exists in the database, use <code>get_or_create</code>:</p>

<pre><code>if tagsetName not in usedTagset:
    # get_or_create returns a tuple, the first element of which is the ORM object
    usedTagset[tagsetName] = TagSet.objects.get_or_create(name=tagsetName)[0]
tagSetObject = usedTagset[tagsetName]
</code></pre></li>
</ul>

<p>Cutting the DB and associated driver/network/ORM overhead out of the loop will likely be all you need to get reasonably performant code.</p>

<ul>
<li><p>I'm also a fan of <code>...objects.create</code>. It's more explicit that constructing the object one bit at a time.</p>

<pre><code>lemma = lemma_lookup[rootWord]
Word.objects.create(
    name=currWord,
    lemma=lemma,
    tagset=tagSetObject,
    language=lemma.language
)
</code></pre></li>
<li><p>And finally, not performance related, but for the love of other Python developers, please follow <a href="https://realpython.com/python-pep8/#naming-conventions" rel="nofollow noreferrer">PEP8 naming conventions</a>, particularly using lower-case underscore-separated names for variables; e.g., <code>word_object</code> instead of <code>wordObject</code>, and <code>tag_set_object</code> instead of <code>tagSetObject</code>.</p></li>
</ul>
    </div>