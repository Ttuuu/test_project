<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, your indenting is all weird. Sometimes that's a result of copy/paste into CodeReview - but it's worth pointing out anyway. Make sure <em>everything</em> is indented at least 1 tab and each level is indented one further tab. Then any labels you may have are not indented. <a href="https://github.com/rubberduck-vba/Rubberduck" rel="nofollow noreferrer">Rubberduck-VBA</a> has a method for doing this for you. It's a neat add-in, maintained by users on CodeReview - give it a look.</p>
<hr>
<h3>Sheet Activity</h3>
<p>When using VBA, it's best to not need to do <em>anything</em> on the worksheet (like <code>.Activate</code> or <code>.Select</code> and it's usually much faster if you don't build on the sheet, but instead build in an array and write to sheet all at once.</p>
<p>Right now you have <code>.Activate</code>, <code>.Copy</code> and <code>.Paste</code> - all intrinsically slow. You also have some <code>.Replace</code> as well as <code>.Autofill</code> and others.</p>
<p>Since you didn't turn off <code>Application.Calculate</code>, when you do this</p>
<blockquote>
<pre><code>PP_WS.Range("AE2").Formula = "=INDEX([PS_Export.xlsx]ps!$K:$K,MATCH(A2,[PS_Export.xlsx]ps!$A:$A,0))"
PP_WS.Range("AE2").AutoFill Destination:=Range("AE2:AE" &amp; LastRow)
</code></pre>
</blockquote>
<p>It's going to calculate all these formulas as they fill. The best way to avoid this would be simply putting</p>
<pre><code>Application.Calculate = xlManual
</code></pre>
<p>At the top, and at the end setting it back to <code>xlAutomatic</code>. But, I think there's a better way to do it.</p>
<p>Build your ranges, create the formula base, write the series and then print them all to sheet. So something <em>similar</em> to</p>
<pre><code>Dim formulaArray As Variant
ReDim formulaArray(2 To lastrow)
For i = 2 To lastrow
    formulaArray = "=INDEX([PS_Export.xlsx]ps!$K:$K,MATCH(A" &amp; i &amp; ",[PS_Export.xlsx]ps!$A:$A,0))"
Next

Dim fillRange As Range
Set fillRange = PP_WS.Range(PP_WS.Range("AE2"), PP_WS.Range("AE" &amp; lastrow))
fillRange.Formula = formulaArray
</code></pre>
<p>See what I mean by building your formulas and then writing them all at once?</p>
<h3>Variables</h3>
<p>Your variables are all declared and given types, which is great, but their naming could be improved. <a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a> have <code>camelCase</code> for local variables and <code>PascalCase</code> for other variables and names. It's also a good clue that if you have a <em>digit</em> in your variable - it's not named great.</p>
<p>You have <code>LastRow</code> and <code>lastrow2</code>. If we ignore the fact that these are actually the same number, they aren't consistent with naming conventions <em>or</em> even <em>each other</em>. <code>lastRow</code> or <code>sourceLastRow</code> and then <code>targetLastRow</code> or something would seem better.</p>
<p>Here -</p>
<blockquote>
<pre><code>Dim Preplan As String: Preplan = "M:\PrePlanning_Template.xlsm"
Dim PS_Export As String: PS_Export = "M:\PS_Export.xlsx"
</code></pre>
</blockquote>
<p>Good job creating variables for these strings, but it's even better if you created <em>constant</em> variables -</p>
<pre><code>Const PREPLAN_PATH As String = "M:\PrePlanning_Template.xlsm"
Const EXPORT_PATH As String = "M:\PS_Export.xlsm"
</code></pre>
<p>Since they never change, they are constants. And they will stick out. Also, in my example above, I would build the formulas using constants:</p>
<pre><code>Const FORMULA_BEGINNING As String = "=INDEX([PS_Export.xlsx]ps!$K:$K,MATCH(A"
Const FORMULA_ENDING As String = ",[PS_Export.xlsx]ps!$A:$A,0))"
For i = 2 To lastrow
    formulaArray = FORMULA_BEGINNING &amp; i &amp; FORMULA_ENDING
Next
</code></pre>
<p>See how that looks cleaner? I'd also probably not use something like <code>A:A</code> and instead explicitly state the range.</p>
<h3>Replace</h3>
<p>So since you are finding and replacing something that already exists, I don't really have any basis to say you should do it a different way. But maybe you have a different way to build that. However, when using a blank e.g.</p>
<blockquote>
<pre><code>PP_WS.Range("AE:AE").Replace What:="0", Replacement:="", LookAt:=xlWhole
</code></pre>
</blockquote>
<p>You should use the build-in constant <code>vbNullString</code></p>
<pre><code>PP_WS.Range("AE:AE").Replace What:="0", Replacement:=vbNullString, LookAt:=xlWhole
</code></pre>
<p>I'd also give your sub a better name than <strong>Update</strong> - name it what it does - updating pre-planning or something similar?</p>
<p>Anyway, you can extrapolate these recommendations to the rest of the procedure.</p>
<p>I also might create a <code>BuildFormula</code> function for building the formulas, maybe have it take arguments so you can pass what kind of formula to it and reuse it throughout the code.</p>
    </div>