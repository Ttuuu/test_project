<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Maybe even to make it faster?</p>
</blockquote>

<p>you don't need to do:</p>

<pre><code>result % prime
</code></pre>

<p>for every prime in your list, it's enough to check every prime that is smaller then the square root of the number you're checking. So you can rewrite your code like this (eliminating useless conversions, as @202_accepted suggests, on the fly):</p>

<pre><code>        for (ulong i = 4; i &lt; inputnumber; i++)
        {
            isprime = true;
            ulong upperLimit = (ulong)(Math.Sqrt(i));

            foreach (ulong prime in primes)
            {
                if (prime &gt; upperLimit)
                    break;

                if (i % prime == 0)
                {
                    isprime = false;
                    break;
                }
            }
            if (isprime == true)
            {
                primes.Add(i);
            }
        }
</code></pre>

<p>It works because every number <code>n</code> that is not prime fulfills one of the following:</p>

<ul>
<li>it is a square number, in that case <code>sqrt(n)</code> is an integral value and gets checked by the code</li>
<li>it is a product of more then one prime. In this case, there is either a prime factor larger than <code>sqrt(n)</code> or it is not. If there is none, we're done. If there is one, there must also be one smaller then <code>sqrt(n)</code>, otherwise <code>n</code> would be larger then itself, and we would've found that one by now.</li>
</ul>

<p>This should give you a nice speed increase. On my machine, the Code went from "I'm to bored to wait" to about 300ms (for the primes &lt;1000000).</p>

<p>For more speed you could just use int instead of ulong. Finding all primes for values larger then <code>int.MaxValue</code> is something you'll not see happening with that algorithm on a normal PC, unless you want to wait for ages.</p>
    </div>