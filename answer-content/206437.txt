<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/questions/206317/longest-substring-with-2-unique-characters-in-a-given-string-at-linear-time-ja#comment398231_206418">You said</a>:  </p>

<blockquote>
  <p>Also, from what I know - coding conventions say that variables should be declared at the beginning of the function. </p>
</blockquote>

<p>No.  In general, modern coding conventions (e.g. <a href="http://wiki.c2.com/?DeclareVariablesAtFirstUse" rel="nofollow noreferrer">this one</a> or see <a href="https://softwareengineering.stackexchange.com/q/113262/236539">here</a>) say that variables should be declared as late as possible.  </p>

<p>Declaring at the beginning was a holdover from the days where people manually allocated memory in machine language/assembly.  Then you had to work out the allocations before running and it made sense to put them all together.  Modernly we let the compiler do that for us.  It has never been the convention in Java.  It was the convention in early C, as the early C compiler <em>required</em> declaration at the beginning of the scope.  So you might see that convention if you read older works, like Kernighan and Ritchie.  </p>

<pre><code>public static String longest2Str(String s) {
    int len = s.length();
    if ( (s == null) || (len &lt; 2) ) {
        return null;
    }

    // find first letter in s that isn't equal to the firstUnique 
    int i = 0;
    char firstUnique = s.charAt(i);
    do {
        i++;

        if (i &gt;= len) {
            return null;
        }
    } while (s.charAt(i) == firstUnique);

    char secondUnique = s.charAt(i);
    int subStart = 0;
    int nextGroupStart = i;
    int longestStart = 0;
    int longestEnd = i;
    for (; i &lt; len; i++) {
        char c = s.charAt(i);
        if ( (c == firstUnique) || (c == secondUnique) ) {
            if (c != s.charAt(i - 1)) {
                nextGroupStart = i;
            }   
        }
        else {
            if ( i - subStart &gt; longestEnd - longestStart ){
                longestStart = subStart;
                longestEnd = i;
            }
            subStart = nextGroupStart;
            nextGroupStart = i;
            firstUnique = s.charAt(subStart);
            secondUnique = c;
        }
    }

    return s.substring(longestStart, longestEnd);
}
</code></pre>

<p>This moves the declarations just before they are needed.  </p>

<p>I changed your first <code>for</code> loop to a <code>do</code>/<code>while</code> for readability, efficiency, and correctness reasons.  </p>

<p>I broke out the length check because the return is actually the correct behavior.  If all characters are the same, then there aren't two unique characters.  We can stop and return immediately rather than exiting the loop and checking (what your source did).  </p>

<p>When using an empty <code>for</code> loop, I would have separated the <code>) ;</code> at the end.  The reason is that it makes it easier to see that it's an empty body rather than a function call.  Obviously, it makes no functional difference.  The compiler strips out the whitespace when it tokenizes.  </p>
    </div>