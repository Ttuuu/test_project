<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><sub><em>It is not a complete answer. Just some of my thoughts about this code.</em></sub></p>

<h2>C++</h2>

<ul>
<li><p><strong>Do not compare integers of different signedness</strong>. Loop counters <code>i</code> and <code>j</code> in function <code>strIsValid</code> are declared as <code>int</code>, but they are compared with <code>N</code> which is <code>unsigned int</code>. It could lead to some problems. Make the counters <code>unsigned</code>.</p></li>
<li><p><strong>Use strict compilation flags</strong>. The compiler would tell you about your signed/unsigned issue if you pass it <code>-Wall</code> key.</p>

<p>You should always achieve that the compiler will not display any diagnostic messages with the most strict compilation keys (<code>-Wall</code>, <code>-Wextra</code>, <code>-pedantic</code>, etc).</p>

<p><sub>But you probably would <a href="https://quuxplusone.github.io/blog/2018/12/06/dont-use-weverything/" rel="nofollow noreferrer">not want</a> to use Clang's <code>-Weverything</code>.</sub></p></li>
<li><p><strong>What happened with your <code>main</code>?</strong> Your <code>main</code> function looks very unnatural:</p>

<blockquote>
<pre><code>int main(int, char**)
</code></pre>
</blockquote>

<p>If you do not need <code>argc</code> and <code>argv</code>, write just</p>

<pre><code>int main()
</code></pre></li>
<li><p><strong>About <code>std::endl</code></strong>. You should avoid globally using <code>std::endl</code>. It is not the same as just <code>\n</code>. There is a <a href="https://stackoverflow.com/a/14395960/8086115">good answer</a> on SO about this topic.</p>

<p>And why are you printing <code>std::endl</code> twice?</p>

<blockquote>
<pre><code>std::cout &lt;&lt; sudokuInstance.strIsValid() &lt;&lt; std::endl &lt;&lt; std::endl;
</code></pre>
</blockquote></li>
<li><p><strong>You do not have to explicitly return from <code>main</code></strong>. You <a href="https://stackoverflow.com/questions/204476/what-should-main-return-in-c-and-c">don't have</a> to explicitly <code>return 0;</code> at the end of main.</p></li>
</ul>

<h2>Programming</h2>

<ul>
<li><p><strong>Minimize the scope of local variables</strong>. You should always minimize the scope of local variables. In your case, for example, scope of the <code>readnum</code> variable can be reduced. Some <a href="https://refactoring.com/catalog/reduceScopeOfVariable.html" rel="nofollow noreferrer">reading</a> about this topic.</p></li>
<li><p><strong>The predicative function should return boolean</strong>. Your <code>strIsValid</code> is a <em>predicative function</em>. It means that this function checks something and returns either true or false. But you return <em>string</em> <code>"YES"</code> (true) or <code>"NO"</code> (false). You should return <code>bool</code> instead.</p></li>
<li><p><strong>What the <code>strIsValid</code> function does?</strong> The name of this function doesn't answer the question.</p></li>
</ul>

<h2>Architecture</h2>

<ul>
<li><p><strong>Validate user's input</strong>. At this time you do not validate user's input in <code>ReadRows</code>. What if I'll input a number which is greater than 9? Or less than 0? If I'll input too many numbers?..</p>

<p>In this case, you store invalid data into <code>m_matrix</code>. Then this invalid data will be used as arguments of <code>std::bitset</code>'s <code>flip()</code> which will cause <code>std::out_of_range</code>.</p></li>
<li><p><strong>Split row and cols validating and reading user's input</strong>. The <code>Sudoku</code> class should know nothing about reading user's input. The only thing that it should do is validate Sudoku columns and rows! This is called the Single Responsibility Principle (<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">SRP</a>).</p></li>
</ul>
    </div>