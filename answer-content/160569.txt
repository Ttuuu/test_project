<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>1.</strong> There are many things that you can try to optimize VBA. Look at these links for some insight:</p>

<p><a href="https://msdn.microsoft.com/en-us/library/office/ff726673(v=office.14).aspx" rel="nofollow noreferrer">Tips for Optimizing Performance Obstructions</a></p>

<p><a href="http://www.cpearson.com/excel/optimize.htm" rel="nofollow noreferrer">Optimizing VBA</a></p>

<p><a href="http://analystcave.com/excel-improve-vba-performance/" rel="nofollow noreferrer">Guide to Improving VBA Performance. Faster Excel VBA</a></p>

<p><a href="http://www.excelitems.com/2010/12/optimize-vba-code-for-faster-macros.html" rel="nofollow noreferrer">17 ways to Optimize VBA Code for FASTER Macros</a></p>

<p><a href="http://analysistabs.com/vba/optimize-code-run-macros-faster/" rel="nofollow noreferrer">Optimize VBA Code to run Macros Faster</a></p>

<p><a href="http://chandoo.org/wp/2012/03/22/vba-macros-optimization-techniques/" rel="nofollow noreferrer">Speedy Spreadsheet Week</a></p>

<p><strong>2.</strong>  These links have so many point same as each other like disabling updating the sheet (calculation, screen, etc.), using with blocks, using comma or colon to avoid from making new lines, avoid from selection, assigning new ranges instead of editing an existing range, etc.</p>

<p>In the third link you can find this macro that I am always calling in my Subs:</p>

<pre><code>Sub OptimizeVBA(isOn As Boolean)
    Application.Calculation = IIf(isOn, xlCalculationManual, xlCalculationAutomatic)
    Application.EnableEvents = Not(isOn)
    Application.ScreenUpdating = Not(isOn)
    ActiveSheet.DisplayPageBreaks = Not(isOn)
End Sub
</code></pre>

<p><strong>3.</strong> Using <code>With</code> blocks accelerate your process. </p>

<p><strong>4.</strong> Selecting ranges is not a really good approach. You can just avoid from those selections. To me, most of the times, if not always, they are extra and you can apply whatever you want on the ranges directly. </p>

<p><strong>5.</strong> When possible, consider using <code>Resize</code> and <code>Offset</code> to create similar ranges Also avoid from using <code>Rows.count</code> and <code>xlUp</code> or <code>xlDown</code> as much as possible.</p>

<p><strong>6.</strong> While using arrays is a good approach you should consider, if possible, declaring their sizes at the beginning (pre-allocation).</p>

<p><strong>7.</strong> Using <code>Option Explicit</code> and declaring each and every variable is another suggestion from me. It won't speed up your code but speed up your coding by telling you when, where and what you need to use.</p>

<p><strong>8.</strong> Avoid any formatting within VBA as much as you can; however, sometimes it is needed and I would do it myself. Formatting graphs is the worst idea; since complex formatting causes a prompt message which cannot be ignored or even closed by sending keys.</p>

<p><strong>9.</strong> Loops are tricky part of the coding which can reduce the speed of your macro. Avoid from loops when possible. Using arrays/ranges would be helpful. For instance:</p>

<pre><code>for i = 1 to n
 mySheet.Cells(i,3) = Some formula
Next i
</code></pre>

<p>Can be substituted by:</p>

<p><code>myRange.formulaR1C1 = Some Formula</code></p>

<p><strong>10.</strong> Creating new files, opening workbooks, reading from the files rather than excel sheets (switching between workbooks), saving workbooks, filtering instead of using formulas when possible, copy/paste instead of assigning a cell/range value, selecting/activating instead of explicitly defining what workbook/worksheet/object you want to work with, etc. are other examples of procedures that would slow down your macro.</p>

<p><strong>11.</strong> Using <code>.xlsb</code> instead of <code>.xlsm</code> can sometimes benefit you however it adds an overhead time-cost which needs to be accounted for. Be careful with using that as it may have some other side effects.</p>

<p><strong>12.</strong> Try to avoid saving your spreadsheet within VBA if possible.</p>

<p><strong>13.</strong> Finally, in reference to this <a href="https://stackoverflow.com/questions/42887968/vba-timer-available-in-modules/42896301#42896301">post</a> from StackOverflow, you can use this code to test/measure how much time it takes for your macro or different sections of your code to be done:</p>

<pre><code>time1 = timer()
call Proc1()
time2 = timer()
call Proc2()
time3 = timer()
debug.print "Proc1 time: " &amp; cStr(time2-time1)
debug.print "Proc2 time: " &amp; cStr(time3-time2)
</code></pre>
    </div>