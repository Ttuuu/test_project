<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Standard case</h2>

<p>Class names like <code>class screenshoter</code> should be capitalized, i.e. <code>class ScreenShoter</code>. The standard Python code style (which includes recommendations such as naming conventions) is documented in the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 -  Style Guide for Python Code</a>.</p>

<h2>Static variables</h2>

<p>These:</p>

<pre><code>a,b,c,d = 0, 0, 0, 0
path = ""
last_image_sum = 0
output_file = ""
ocr_path = ""
lang = ""
</code></pre>

<p>do not do what you think they do. They're effectively statics, and in this case I think they can all be deleted. Whereas you have some defaults here that have not been picked up in your constructor function signature, it doesn't make sense for them to be optional arguments, so your constructor is fine.</p>

<h2>Coordinate names</h2>

<p>Consider renaming <code>a,b,c,d</code> to <code>x0,x1,y0,y1</code>. It will be easier to understand for other programmers.</p>

<h2>Type hints</h2>

<pre><code>def __init__(self, output_file, ocr_path, path, lang='pol', a=0, b=0, c=0, d=0 ):
</code></pre>

<p>can be, at a guess,</p>

<pre><code>def __init__(self, output_file: str, ocr_path: str, path: str, lang: str='pol', a: float=0, b: float=0, c: float=0, d: float=0):
</code></pre>

<p>This helps in a number of ways, including making it much clearer for callers of your constructor.</p>

<h2>Redundant <code>str</code></h2>

<p>Do not call <code>str</code> on this:</p>

<pre><code>str(datetime.now().strftime("%d_%m_%H_%M_%S"))
</code></pre>

<p>since it's already a string.</p>

<h2>pathlib</h2>

<pre><code>file_with_path = self.path + filename + ".png"
</code></pre>

<p>can be</p>

<pre><code>from pathlib import Path
...
self.path = Path(path)
...
file_with_path = (self.path / filename).with_suffix('.png')
</code></pre>

<h2>Inline date formatting</h2>

<pre><code>str(datetime.now().strftime("%d_%m_%H_%M_%S"))+'tmp.png'
</code></pre>

<p>can be</p>

<pre><code>f'{datetime.now():%d_%m_%H_%M_%S}_tmp.png'
</code></pre>

<h2>Caching</h2>

<p>Cache <code>np.sum(image)</code> in a local variable since you use it twice.</p>

<h2>Main guard</h2>

<p><code>def run</code> should be moved away from your main guard. It's already in "global scope" but would not be available to unit tests. The other code after your main guard and before <code>run</code> should be moved into its own function.</p>
    </div>