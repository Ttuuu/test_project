<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review!  Here's some suggestions:</p>

<ul>
<li><p>Sort the <code>#include</code> directives in alphabetical order.  <code>&lt;sstream&gt;</code> and <code>&lt;string&gt;</code> shouldn't be in the implementation.</p></li>
<li><p>The constructor should not be <code>noexcept</code> â€” it allocates resources.  Same for <code>start</code>.</p></li>
<li><p>The destructor is implicitly <code>noexcept</code>, so you can omit it.</p></li>
<li><p>In <code>enqueue</code>, the lambda captures <code>&amp;args...</code>.  This potentially creates dangling references.  Also, the <code>() -&gt; void</code> and <code>return;</code> in the lambda can be omitted.</p></li>
<li><p>In the declaration of <code>m_nthreads</code>, the type specifier should be <code>std::size_t</code>, not <code>size_t</code>.  You also didn't <code>#include &lt;cstddef&gt;</code>.</p></li>
<li><p>In <code>run</code>, the type of <code>ti</code> should be <code>std::size_t</code>, not <code>int</code>.  The lambda does not have to be <code>mutable</code> because the only thing you capture is the <code>this</code> pointer which you don't want to modify, do you?</p></li>
<li><p>The textual representation of a thread identifier is not guaranteed to be suitable for extracting as <code>int</code>.</p></li>
<li><p>Don't mix C I/O with streams.  Especially don't do <code>puts(str.c_str())</code> (which should have been <code>std::puts</code> anyway).  You can turn off sync between C I/O and streams to (potentially) improve performance.</p></li>
<li><p>You can omit the final <code>return</code> statement in <code>main</code>.</p></li>
</ul>
    </div>