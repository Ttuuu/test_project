<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your file structure is okay, though it is not the "conventional" react folder structure. I personally like your approach better than having lots of nested folders with <code>index.js</code> but this is because my workflow relies on searching files by name, and searching for index.js is impossible — you always have to search by file. </p>

<blockquote>
  <p>One quick question: the component src/components/body/UserProfile/UserWorks.js is reused in src/components/body/UserWork/UserWork.js; is it ok to leave them with this structure?</p>
</blockquote>

<p>As I understand, UserWorks is some component that shows some sort of preview of works; I think that the structure should be the other way around, <code>UserProfile</code> should depend on <code>UserWorks</code> not the other way around. You might even structure it explicitly that <code>UserProfile</code> and <code>UserWork</code> pages (components) depend on a representation component <code>UserWorks</code>, though naming becomes a bit cumbersome. </p>

<h3>Note on using <code>export default</code></h3>

<p>It seems to be standard "good" practice to use <code>export default</code> in Javascript, but I personally don't like it for various reasons and one of them shows in <code>UserWork</code>: you are importing <code>UserWorks</code> as <code>UserRelatedWorks</code> this suggests that <code>UserWorks</code> is used with different intention that is originally designed. Named imports would not eliminate this issue completely but would at least force explicit statement <code>import {UserWorks as UserRelatedWorks} from …</code> </p>

<h3>Comments on the code:</h3>

<ol>
<li><p>lots of unnecessary empty lines, this is a bit unusual. In most cases empty lines are used to group statements together, here they appear to be random and make code harder to read.</p></li>
<li><p>you are using classes for <code>div.bio</code> but not for <code>Skeleton</code> though those styles are repeated but bio is not (or should not be) </p></li>
<li><p>no matter value of <code>loading</code> you are returning a container with <code>&lt;div className={classes.bio}&gt;</code>, you can return container and resolve content inside of it based on the <code>loading</code> to avoid duplication.</p></li>
</ol>

<hr>

<p>In this code <code>filter</code> method is used incorrectly, the callback should return boolean but in this case returns the object itself or null, this relies on implicit type casting to truthy value and is very confusing</p>

<pre><code>          works.filter(w =&gt; {

            if ((!category) || (category === "all")) {
              return w;
            }
            else {
              if (w.category_list.includes(category)) return w;
            }

            return null;

          })
</code></pre>

<p>this code should be </p>

<pre><code>works.filter(work =&gt; !category || category === 'all' || w.category_list.includes(category))
</code></pre>
    </div>