<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using <code>std::function</code> you don't ensure signature matching (It work if argument are just convertible). some kind of function_traits can be applied here.</p>

<p>Try to check at compile time that the signature of the given callback match what you expect.</p>

<p>The loop in <code>Invoke</code> can be simplified by using a range-based for loop or <code>std::for_each</code>.</p>

<p>You don't have to write <code>this-&gt;</code> everywhere.</p>

<p>Did you consider using a queue instead of a list? Semantically, it's more correct</p>

<p>The UniqueId generation can be outed from this class, since it's a different concern and maybe reusable.</p>

<p>For your "bind" problem, as callback, user can pass a lambda capturing the instance.</p>

<p><strong>note</strong>: I modified your "sample" to get it in a working example, but didn't fix the memory leak present in your code original. <code>new</code> and <code>delete</code> are as an old couple, they never go out without each other.</p>

<p><strong>edit</strong> : 
I would not have made it possible to inherit the Event class. If it was my class, I would rather opt for a tagged_type so that each event is of a different type, even if signatures matches, even if signatures matches. But this desing choice is a matter of taste.</p>

<p>If you want a better understanding of <code>function_traits</code> you can check <a href="https://stackoverflow.com/questions/34283919/understanding-how-the-function-traits-template-works-in-particular-what-is-the">this</a>.</p>
    </div>