<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Variable names</h2>
<p>I find the <code>get_</code> prefixes unnecessary on these:</p>
<pre><code>get_year = check_time_now.year
get_month = check_time_now.month
get_day = check_time_now.day
</code></pre>
<p>That makes them look like functions.</p>
<h2>Boundaries</h2>
<p>This:</p>
<pre><code>working_hours = datetime.time(7, 0, 0)
after_hours_am = datetime.time(6, 59, 59)
</code></pre>
<p>should probably just use 7:00 for <code>after_hours_am</code>. Otherwise, the time 6:59:59 given your current usage will still be considered working hours.</p>
<p>Likewise, this:</p>
<pre><code>check_time_now.time() &gt; after_hours_pm
</code></pre>
<p>should use <code>&gt;=</code>.</p>
<p>An easy convention to follow that makes your boundary checking consistent is to always use intervals that are closed at the beginning and open at the end, i.e. 7:00 &lt;= time &lt; 8:00.</p>
<h2>Redundant <code>else</code></h2>
<p>This:</p>
<pre><code>    return datetime.datetime(get_year, get_month, get_day, 7, 0, 0)

elif ...
</code></pre>
<p>can use an <code>if</code> instead of an <code>elif</code> due to the previous return.</p>
<h2>Don't repeat yourself</h2>
<p>This return:</p>
<pre><code>    return datetime.datetime(get_year, get_month, get_day, 7, 0, 0)
</code></pre>
<p>shares many commonalities with the other returns in its function. Factor out a <code>new_day</code> and <code>new_hour</code> variable assignment, then at the end of your function,</p>
<pre><code>return datetime.datetime(get_year, get_month, new_day, new_hour)
</code></pre>
<p>Note that 0 is the default for the remaining parameters.</p>
<h2>Timespan division</h2>
<p>Trying not to do your own time math, this would be one option that doesn't require knowledge of time position multiples:</p>
<pre><code>days = clock_tick.days
rem = clock_tick - timedelta(days=days)
hours = rem // timedelta(hours=1)
rem -= timedelta(hours=hours)
mins = rem // timedelta(minutes=1)
rem -= timedelta(minutes=mins)
secs = int(rem.total_seconds())
</code></pre>
<p>I don't like it, but built-in Python time libraries are kind of bad. Third-party libraries will reduce this to a one-liner format call. This is educational:</p>
<p><a href="https://stackoverflow.com/questions/538666/format-timedelta-to-string">https://stackoverflow.com/questions/538666/format-timedelta-to-string</a></p>
    </div>