<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Rather than a global <code>Trie</code> object I would make a <code>TrieNode</code> object that inherits from <code>dict</code>.</p>

<ul>
<li>This can inherit from <code>dict</code>.</li>
<li>This can overload <code>__missing__</code> to simplify <code>insert</code>.</li>
<li>Search isn't needed in the way I used it.</li>
</ul></li>
<li><p>Make a function <code>build_trie</code>, that builds and populates the trie from "en-dict.txt".</p></li>
<li><code>build_board</code> should really be called <code>main</code> and the code that builds the board should be moved into it's own function.</li>
<li><code>find_words</code> should be moved into <code>main</code>.</li>
<li><p><code>build_trie</code> should be called from <code>main</code> and passed to where it needs to be used.</p>

<p>When possible don't use <code>global</code>. If you think it's impossible, then you're likely wrong.</p>

<p>In this case you can move the value out of the function into <code>main</code> and pass it where it's needed.</p>

<p>In other cases using a class, a closure or other ways can solve the issue.</p></li>
<li><p><code>dictionary_check</code> should only display words. And the first part of the function can be removed with the new <code>TrieNode</code>.</p></li>
<li>Move <code>next_move</code> out of <code>words_from</code>, just make it a global constant.</li>
<li><code>board[row][column] != "-"</code> relies on mutating <code>board</code> I would recommend not mutating input to functions.</li>
<li><code>words_from</code> can be simplified by passing the current <code>node</code>, as then you're not <code>trie.search</code>ing.</li>
<li>In <code>words_from</code> <code>len(new_string) &gt;= 3</code> is an artificial limitation, that should be moved out of the function.</li>
<li><code>get_permutations</code> can be simplified by changing <code>words_from</code> to return an empty list on bad input.</li>
<li>I would move <code>set_permutations</code> out of <code>get_permutations</code>, as it doesn't have much purpose in that function.</li>
<li>I merged <code>words_from</code> and <code>set_permutations</code> to use a <code>while</code> loop, I found this to make the code easier to understand and make.</li>
<li>Don't <code>print</code> and <code>return</code>, use <code>raise</code>.</li>
</ul>

<hr>

<p>For the most part your code seems to be fairly good, there's some pitfalls your falling down. But on a micro - line by line - scale your code is pretty good.</p>

<p>The problem I saw with your code is not seeing the big picture, and not following SRP.</p>

<p>Improving SRP should be fairly easy for you. If you're thinking of putting a comment that says the code is performing a different task, move it into a function.</p>

<p>To help with the big picture, when you follow SRP think to yourself if you should split the code into 2/3 functions and should call the three functions in succession. Like I changed <code>main</code> to do.</p>

<hr>

<pre><code>class TrieNode(dict):
    def __init__(self, value=None):
        super().__init__()
        self.value = value

    def __missing__(self, key):
        value = TrieNode()
        self[key] = value
        return value

    def insert(self, word):
        current = self
        for char in word:
            current = current[char]
        current.value = word


def build_trie():
    trie = TrieNode()
    with open("en-dict.txt", "r", encoding="utf8") as file:
        for line in file:
            trie.insert(line.strip())
    return trie


def board_from_string(string):
    if len(string) != 16:
        raise ValueError("Must enter 4*4 grid (16 characters)")
    return [
        [*string[0:4]],
        [*string[4:8]],
        [*string[8:12]],
        [*string[12:16]]
    ]


AROUND = [
    (dx, dy)
    for dx in range(-1, 2)
    for dy in range(-1, 2)
    if not (dx == dy == 0)
]


def get_words(trie, board):
    stack = []
    for row in range(4):
        for column in range(4):
            stack.append((trie, row, column, set()))
    while stack:
        node, row, column, parents = stack.pop()
        if row in (4, -1) or column in (4, -1) or (row, column) in parents:
            continue
        char = board[row][column]
        if char not in node:
            continue
        node = node[char]
        if node.value is not None:
            yield node.value
        for dx, dy in AROUND:
            stack.append((node, row + dx, column + dy, parents | {(row, column)}))


def display(words):
    words = sorted({w for w in words if len(w) &gt;= 3})
    print('\n'.join(words))
    print(f"======\n{len(words)} words")


def main():
    string = "playthiswordgame"
    trie = build_trie()
    board = board_from_string(string)
    words = get_words(trie, board)
    display(words)


if __name__ == "__main__":
    main()
</code></pre>
    </div>