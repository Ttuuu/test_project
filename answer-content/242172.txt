<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When we refactor the aim is to reduce code duplication. but you introduced even more duplication.</p>

<p>The way to go is to look out for code that is <em>similar</em> and make it <em>the same</em>.</p>

<p>When looking at your original method the duplication is in the <code>if/else</code> cascade. This means you should deal with that. The obvious differences are: </p>

<ul>
<li>the string literal used</li>
<li>the <code>else</code> before the second <code>if</code></li>
<li>the method called at the object <code>file</code></li>
</ul>

<p>Lets convert that in thee steps:</p>

<ol>
<li><p>the <code>else</code> is not needed for business reasons. It is introduced for <em>performance optimization</em>. You can safely remove this else and <em>verify by measurement</em> it that has really an impact. My guess is it does not. so lets let rid of it:</p>

<pre><code>if(pathOrName.equalsIgnoreCase("path")) {
    for (File file : listOfFiles) {
        if (file.isFile()) {
            files.add(file.toString());
        }
    }
}
if(pathOrName.equalsIgnoreCase("name")) {
    for (File file : listOfFiles) {
        if (file.isFile()) {
            files.add(file.getName());
        }
    }
}
</code></pre></li>
<li><p>now you can extract the first literal string into a variable:</p>

<pre><code>String requestedPathName = "path";
if(pathOrName.equalsIgnoreCase(requestedPathName)) {
    for (File file : listOfFiles) {
        if (file.isFile()) {
            files.add(file.toString());
        }
    }
}
if(pathOrName.equalsIgnoreCase("name")) {
  // ...
</code></pre>

<p>Then, after the first <code>if</code> block we can resuse this variable:</p>

<pre><code>String requestedPathName = "path";
if(pathOrName.equalsIgnoreCase(requestedPathName)) {
    for (File file : listOfFiles) {
        if (file.isFile()) {
            files.add(file.toString());
        }
    }
}
requestedPathName = "name";
if(pathOrName.equalsIgnoreCase(requestedPathName)) {
  // ...
</code></pre></li>
<li><p>The last change requires to use an <em>interface</em>. This interface should declare a method that takes a file object as a parameter and returns a <code>String</code> object. One option is to define such interface yourself:</p>

<pre><code>@FunctionalInterface
interface FileToStringConverter{
     String convert(File file);
}
</code></pre>

<p>Or we use the <code>Function</code> interface provides by the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html" rel="nofollow noreferrer">Java standard Lib</a>. I choose the latter.</p>

<p>The principle is the same as with the string literal before:</p>

<p>replace the original code with the interface usage:</p>

<pre><code>if(pathOrName.equalsIgnoreCase(requestedPathName)) {
    for (File file : listOfFiles) {
        if (file.isFile()) {
            files.add(new Function&lt;File,String&gt;(){ 
      @Override public String apply(File t){
           t.toString();
         }
      }.apply(file));
        }
    }
}
</code></pre>

<p>extract the interface implementation to a local variable:</p>

<pre><code>// interface implemented as Lambda and method reference.
Function&lt;File,String&gt; converter = File::toString; // interface implemented as Lambda and method reference.
 if(pathOrName.equalsIgnoreCase(requestedPathName)) {
    for (File file : listOfFiles) {
        if (file.isFile()) {
            files.add(converter.apply(file)); 
        }
    }
}
</code></pre>

<p>repeat this in the other `if block:</p>

<pre><code>String requestedPathName = "path";
Function&lt;File,String&gt; converter = File::toString;
  if(pathOrName.equalsIgnoreCase(requestedPathName)) {
    for (File file : listOfFiles) {
        if (file.isFile()) {
            files.add(converter.apply(file));
        }
    }
}
requestedPathName = "name";
converter = File::getName;
if(pathOrName.equalsIgnoreCase(requestedPathName)) {
    for (File file : listOfFiles) {
        if (file.isFile()) {
            files.add(converter.apply(file));
        }
    }
}
</code></pre></li>
</ol>

<p>Now both <code>if</code> blocks look exactly the same. You can select one of them and apply your IDEs <em>extract method</em> automated refactoring feature:</p>

<pre><code>public static ArrayList&lt;String&gt; getFilePathOrName(String pathOrName) {
    ArrayList&lt;String&gt; files = new ArrayList&lt;&gt;();
    File folder = new File("C:\\Users\\damar\\OneDrive\\Documenten\\FolderTest\\Folderretouren\\Niet verdeeld");
    File[] listOfFiles = folder.listFiles();

        String requestedPathName = "path";
        Function&lt;File,String&gt; converter = File::getName;
        // of cause you should choose a better name for the method!
        extracted(requestedPathName, pathOrName, converter, listOfFiles, files); 
        requestedPathName = "name";
        converter = File::getName;
        extracted(requestedPathName, pathOrName, converter, listOfFiles, files);

    return files;
}

private void extracted(
           String requestedPathName, 
           String pathOrName, 
           Function&lt;File,String&gt; converter,
           File[] listOfFiles, 
           List&lt;File&gt; files) { 
    if(pathOrName.equalsIgnoreCase(requestedPathName)) {
        for (File file : listOfFiles) {
            if (file.isFile()) {
                files.add(converter.apply(file));
            }
        }
    }
}
</code></pre>

<p>last step is inlineing the variables:</p>

<pre><code>     extracted("path", pathOrName, File::toString, listOfFiles, files);
     extracted("name", pathOrName, File::getName, listOfFiles, files);
</code></pre>

<p>The complete result (with a better name for the extracted method) is:</p>

<pre><code>public static ArrayList&lt;String&gt; getFilePathOrName(String pathOrName) {
    ArrayList&lt;String&gt; files = new ArrayList&lt;&gt;();
    File folder = new File("C:\\Users\\damar\\OneDrive\\Documenten\\FolderTest\\Folderretouren\\Niet verdeeld");
    File[] listOfFiles = folder.listFiles();

    addPathOrNameToList("path", pathOrName, File::toString, listOfFiles, files);
    addPathOrNameToList("name", pathOrName, File::getName, listOfFiles, files);       

    return files;
}

private void addPathOrNameToList(
           String requestedPathName, 
           String pathOrName, 
           Function&lt;File,String&gt; fileToStringConversion,
           File[] listOfFiles, 
           List&lt;File&gt; files) { 
    if(pathOrName.equalsIgnoreCase(requestedPathName)) {
        for (File file : listOfFiles) {
            if (file.isFile()) {
                files.add(fileToStringConversion.apply(file));
            }
        }
    }
}
</code></pre>

<hr>

<p>We could turn the repeated method call into a loop if we would introduce another <em>interface</em> or an <em>enum</em> to encapsulate the differing data.  </p>
    </div>