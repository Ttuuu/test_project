<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Undelimited blocks as bad</h2>

<p>While most C syntax like languages allow for undelimited statement blocks <code>if (foo) bar;</code> (proof of just how lazy coders can be) it does contribute to one of the most common and hard to spot syntax derived bugs when later modify code. </p>

<p>You can easily overlook the block delimiters while entering code your mind on the problem, and not the syntax. Later when trying to spot the error it is hard to find as the error looks like a logic error but is in reality a syntax error. </p>

<p>In my view undelimited blocks are a strict no no. If you always add block delimiters then you will save your self many hours of frustration.</p>

<pre><code>// Bad 
if (next === arr.length - 1) 
    return true;

// Good
if (next === arr.length - 1) return true;

// Better
if (next === arr.length - 1) {
    return true;
}

// Best
// Note in JS the semicolon is not required for a line terminated with a } and there
// are no edge cases that make this problematic
if (next === arr.length - 1) { return true }
</code></pre>

<h2>General rule of release.</h2>

<ul>
<li><p>Never release any code until at minimum every line has been parsed and run. There is a syntax error <code>console.log(reachLastIndexOf([2, 0, 1, 0], 0)</code> is missing a closing <code>)</code></p></li>
<li><p>You should consider code that has not been thoroughly tested as broken. You test code with an aim to find failure.</p></li>
</ul>

<p>Your code fails if there is a cyclic loop, eg <code>reachLastIndexOf([2, 1, -2, 0])</code></p>

<p>For the functional style this will throw an error when the call stack overflows, for the imperative style this bug is one of JS ugliest errors as the while loop will run forever and the only way out is via client interaction (navigate off the page, or wait for the timeout dialog to crash the page).</p>

<p><strong>Note</strong> that the functional style throws an error, however with ES6 the language was to have proper tail calls (means that function calls (depending on the way you call/recurse at the end) will not consume the call stack). 
The implication is that at any time the functional style infinite loop may become blocking like the imperative style so don't use a <code>try catch</code> to solve infinite recursion.</p>

<h2><code>While (true) {</code></h2>

<p>In the past setting up in infinite loop in JS had a severe performance penalty as it confused the optimiser. </p>

<p>To prevent the optimiser from attempting to optimise (wasting precious CPU cycles) code with no clear exit from such a loop it was automatically marked as "Do not optimise". The whole function containing the loop and all code within that functions scope was marked.</p>

<p>I am currently unsure if this remains true as Dev Tools no longer displays the <code>Do Not Optimise</code> tag on code. </p>

<p>I am of two minds as to deliberate infinite loops however, favouring your approach, even if it's just a dummy exit condition that is never acted on. </p>
    </div>