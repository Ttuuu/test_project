<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>and welcome, and thanks for providing an interesting subject. I like the idea of difficulty levels for the game!</p>

<p>That said, your code is too long. Not "too long to review," just "too long." </p>

<h3>Moar functions! (&amp; Generators!)</h3>

<p>Consider this:</p>

<pre><code>for i in range(size):
    for j in range(size):
        if board[i][j] != ai and board[i][j] != pl:
            copy = board[i][j]
            board[i][j] = ai

            if win(ai) == 1 or tie() == 1:
                if x:
                    print(name + ' Moved To Grid', i * size + j + 1)
                return

            board[i][j] = copy
</code></pre>

<p>(Taken from the insane AI function)</p>

<p>Now consider this:</p>

<pre><code>for i in range(size):
    for j in range(size):
        if board[i][j] != ai and board[i][j] != pl:
            copy = board[i][j]
            board[i][j] = pl

            if win(pl) == 1 or tie() == 1:
                board[i][j] = ai
                if x:
                    print(name + ' Moved To Grid', i * size + j + 1)
                return
            board[i][j] = copy
</code></pre>

<p>Now consider this:</p>

<pre><code>for i in range(size):
    for j in range(size):
        if board[i][j] != ai and board[i][j] != pl:
            copy = board[i][j]
            board[i][j] = ai

            if countWins(ai, pl) &gt; 1:
                l += 1
                r = [i, j]
                wins2.append(r)

            board[i][j] = copy
</code></pre>

<p>Those three blocks are taken from the same function, but they are different lines. Can you see how much repetition there is in there?</p>

<ul>
<li>Iterate over <code>(i, j)</code> rows and columns</li>
<li>Get a X/O/Empty value</li>
<li>Check if the cell is empty</li>
<li>Copy the prior value</li>
<li>Check for a win or a tie</li>
<li>Translate from coordinates into grid location</li>
<li>Print a "moved to" message</li>
<li>Set the cell.</li>
</ul>

<p>How much of that code can you replace with functions? How much of that code can you replace with generators?</p>

<p>Iterating over the row/column ranges has value, but it would be better to iterate over the <code>(i, j)</code> tuples directly - it's not like you ever do one without the other.</p>

<p>Even better still would be to iterate over only the tuples that represent empty cells:</p>

<pre><code>for i, j in board.empty_cells():
</code></pre>

<p>Or, if you haven't learned classes yet:</p>

<pre><code>for i, j in empty_cells(board):
</code></pre>

<p>You would use the <code>yield</code> keyword in a <a href="https://stackoverflow.com/questions/1756096/understanding-generators-in-python">generator function</a> for this.</p>

<p>Next, what are you doing? In the first loop, you ask if the player would win or tie with the next move. It turns out that "tie" for you means "every location would be filled", which is disappointing but true.</p>

<p>I'd suggest that "about to tie" means "only one empty spot" and that's a globally true condition. You don't need to check it so often.</p>

<p>On the other hand, all the set/check/unset logic seems like a good place to write a function:</p>

<pre><code>def would_win_if_moved_to(player, location) -&gt; bool:
    ''' Return true if player would win if their glyph was placed at location. '''
    # TODO
    pass
</code></pre>

<p>If you had that function, your two top loops look like this:</p>

<pre><code>for locn in empty_cells(board):
    if would_win_if_moved_to(ai, locn):
        # Go for the win!
        move_to(locn)

for locn in empty_cells(board):
    if would_win_if_moved_to(player, locn):
        # Block opponent win!
        move_to(locn)
</code></pre>

<p>Of course, you could make your logic <em>even more clear</em> by wrapping those lines into their own functions:</p>

<pre><code>for locn in moves_to_win(ai):
    return locn
for locn in moves_to_block_win(player):
    return locn
</code></pre>

<p>In your last loop, you're appending to a list. That's a good indicator that you could be using a list comprehension, if only the rest of the loop could be written shorter. You can do that:</p>

<pre><code>wins2 = [locn for locn in empty_cells(board) if wins_after_move_to(ai, locn) &gt; 1]
</code></pre>

<p>You just need a function that will do your "speculative" move first.</p>

<h3>Moar docstrings!</h3>

<p>Another use for the docstring syntax is to span multiple lines with a single string. You should use this for your giant blocks of text, like the rules and hints. Instead of doing this:</p>

<pre><code>print("line 1")
print("line 2")
print("line 3")
</code></pre>

<p>You can do this:</p>

<pre><code>text = """
    line 1
    line 2
    line 3
""".strip('\n')
print(textwrap.dedent(text))
</code></pre>

<p>Using the <code>textwrap</code> module that ships with Python.</p>

<p>I think if you make these changes, your code will get a lot smaller. And you'll be ready for another review. ;-)</p>
    </div>