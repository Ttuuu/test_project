<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't repeat yourself</h1>

<p>First, and of the least significance, Python spend more time building a substring rather than a local variable lookup. Thus you could improve thing a bit by naming <code>product[:-4]</code> at the start of your loop.</p>

<p>More importantly, the majority of your code is similar:</p>

<ul>
<li>set a new workspace;</li>
<li>build a list of classes out of it;</li>
<li>for each of these classes:

<ul>
<li>convert the class;</li>
<li>delete the old one;</li>
<li>rename the new one.</li>
</ul></li>
</ul>

<p>The only things that change are: the name of the workspace and the name of the product involved. Just write a function to handle it once:</p>

<pre><code>import arcpy


FCProducts = r"C:\Python\DataConversion\shapefiles"
GBProducts = r"C:\Python\DataConversion\shapefile_gp"
adminBdry = r"C:\Python\DataConversion\temp1.gdb"
GnR = r"C:\DataConversion\temp2.gdb"
Invenories = r"C:\Python\DataConversion\temp3.gdb"
NFE = r"C:\Python\DataConversion\temp4.gdb"

arcpy.env.overwriteOutput = True

def convert_class(workspace, product_name, output_name):
    arcpy.env.workspace = workspace
    for product in arcpy.ListFeatureClasses():
        if product == product_name:
            arcpy.FeatureClassToFeatureClass_conversion(product_name, workspace, output_name)
            print product_name, " copied to ", workspace
            arcpy.Delete_management(product)
            print "old ", product, " deleted"
            arcpy.Rename_management(output_name, product_name)
            print "output renamed", "\n"

arcpy.env.workspace = FCProducts
listFC = arcpy.ListFeatureClasses()

for product in listFC:
    f2fOutput = product[:-4] + "_new"
    product_name = product[:-4]
    convert_class(GnR, product_name, f2fOutput)
    convert_class(adminBdry, product_name, f2fOutput)
    convert_class(Invenories, product_name, f2fOutput)
    convert_class(NFE, product_name, f2fOutput)

arcpy.env.workspace = GBProducts
listFCgb = arcpy.ListFeatureClasses()

for productGB in listFCgb:
    f2fOutputGB = productGB[:-4] + "_new"
    product_name = productGB[:-4]
    convert_class(Invenories, product_name, f2fOutput)
    convert_class(NFE, product_name, f2fOutput)
</code></pre>

<h1>Use resources sparingly</h1>

<p>Now that the code is simpler to read, what exactly is it doing? For each item you are switching workspaces 2 or 4 times. Switching workspace meaning:</p>

<ul>
<li>opening a file;</li>
<li>reading it;</li>
<li>parsing it;</li>
<li>building data structures out of it.</li>
</ul>

<p>Doing that even once for each item is an enormous waste of time and computing resources. Better opening a workspace once, iterating over each product and then switching to an other workspace. The code layout for a single workspace would be something like:</p>

<pre><code>def process_workspace(workspace, products):
    arcpy.env.workspace = workspace
    for product in products:
        product_name = product[:-4]
        output_name = product_name + "_new"
        for item in arcpy.ListFeatureClasses():
            if item == product_name:
                arcpy.FeatureClassToFeatureClass_conversion(product_name, workspace, output_name)
                print product, " copied to ", workspace
                arcpy.Delete_management(item)
                print "old ", item, " deleted"
                arcpy.Rename_management(output_name, product_name)
                print "output renamed\n"
</code></pre>

<p>You then just need to change workspace once before each of your <code>*.gdb</code> processing:</p>

<pre><code>arcpy.env.workspace = FCProducts
listFC = arcpy.ListFeatureClasses()
process_workspace(GnR, listFC)
process_workspace(adminBdry, listFC)
process_workspace(Invenories, listFC)
process_workspace(NFE, listFC)

arcpy.env.workspace = GBProducts
listGB = arcpy.ListFeatureClasses()
process_workspace(Invenories, listGB)
process_workspace(NFE, listGB)
</code></pre>

<p>You could even improve the layout with <code>for</code> loop over the workspaces.</p>

<h1>Putting it all together</h1>

<p>By sticking a little bit more to PEP8 on line length and variable naming, we can end up with:</p>

<pre><code>import arcpy

FC_PRODUCTS = r"C:\Python\DataConversion\shapefiles"
GB_PRODUCTS = r"C:\Python\DataConversion\shapefile_gp"

ADMIN_BOUNDARY = r"C:\Python\DataConversion\temp1.gdb"
GNR = r"C:\DataConversion\temp2.gdb"
INVENORIES = r"C:\Python\DataConversion\temp3.gdb"
NFE = r"C:\Python\DataConversion\temp4.gdb"


def process_workspace(workspace, products):
    arcpy.env.workspace = workspace
    for product in products:
        product_name = product[:-4]
        output_name = product_name + "_new"
        for item in arcpy.ListFeatureClasses():
            if item == product_name:
                arcpy.FeatureClassToFeatureClass_conversion(
                    product_name, workspace, output_name)
                print product, " copied to ", workspace
                arcpy.Delete_management(item)
                print "old ", item, " deleted"
                arcpy.Rename_management(output_name, product_name)
                print "output renamed\n"

arcpy.env.workspace = FC_PRODUCTS
products = arcpy.ListFeatureClasses()
for workspace in (GNR, ADMIN_BOUNDARY, INVENORIES, NFE):
    process_workspace(workspace, products)

arcpy.env.workspace = GB_PRODUCTS
products = arcpy.ListFeatureClasses()
for workspace in (INVENORIES, NFE):
    process_workspace(workspace, products)
</code></pre>
    </div>