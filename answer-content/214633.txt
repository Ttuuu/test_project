<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ruby does not have an import system like python, so variables and methods at the top level like <code>REPO_TYPES</code> and <code>temp_dir</code> are effectively global variables and methods.</p>

<p>Use modules to aggressively namespace, even for your <code>main</code>, especially when a small script begins to span more than one file:</p>

<pre class="lang-rb prettyprint-override"><code>module Degit
  def self.main # define singleton method
  end
end

Degit.main # call singleton method
</code></pre>

<p>This is also true for methods as well. <code>def self.main</code> in the example defines a singleton method on <code>Degit</code> itself. (<code>Degit</code> is a singleton in the sense that it will be the only instance of <code>Module</code> named "Degit", and <code>main</code> is a method it will now have).</p>

<p>Ruby classes operate in the same way:</p>

<pre class="lang-rb prettyprint-override"><code>class Foo
  class &lt;&lt; self # opens singleton context
    def foo # also defines a singleton method
    end
  end
end
</code></pre>

<p>On another note, I feel like <code>RepoType</code> should either be:</p>

<ul>
<li>completely removed and its responsibilities handled by <code>Repo</code></li>
</ul>

<p>Or</p>

<ul>
<li>named <code>Host</code> and be more cohesive by owning variables and methods <code>REPO_TYPE</code> and <code>find_repo_type</code> within it, along with the regex definitions associated with each <code>Host</code></li>
</ul>

<p>Here's an example combining what I've outlined above:</p>

<pre class="lang-rb prettyprint-override"><code>class Host
  HOST_DEFN = {
    github:    'github.com',
    gitlab:    'gitlab.com',
    bitbucket: 'bitbucket.org',
  }

  attr_reader :name, :hostname

  def initialize(name, hostname)
    @name = name
    @hostname = hostname
  end

  def match?(uri)
    regexes.each_value.any? do |regex|
      regex.match?(uri)
    end
  end

  private

  def regexes
    {
      ssh:   /ssh #{hostname} ssh/,
      https: /https #{hostname} https/,
    }
  end

  class &lt;&lt; self
    def hosts
      @hosts ||= HOST_DEFN.map { |name, hostname| [name, new(name, hostname)] }.to_h
    end

    def matching_uri(uri)
      hosts.each_value.detect { |host| host.match?(uri) }
    end
  end
end

# usage

Host.hosts[:github]           # =&gt; #&lt;Host:0x00007fd95c48b5d8 @hostname="github.com", @name=:github&gt;

uri = 'https gitlab.com https'
Host.matching_uri(uri)        # =&gt; #&lt;Host:0x00007fd95c462c00 @hostname="gitlab.com", @name=:gitlab&gt;
</code></pre>
    </div>