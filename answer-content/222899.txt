<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A look at the code identifies the key time users:</p>

<ul>
<li>starting Excel every time you enter the function</li>
<li>opening the file</li>
<li>finding "Référence"</li>
<li>finding "Désignation"</li>
<li>looping through a table to do formatting</li>
</ul>

<p>Two key points I have also picked up on:</p>

<ul>
<li><code>Option Explicit</code> always. I don't know if you have this at the top of
the module that holds the routine - but <strong>always</strong> do it!</li>
<li>You error check the starting of the Excel application, but you don't error check the opening of the file.</li>
</ul>

<p>Some suggestions to help manage the performance:</p>

<ul>
<li>Open Excel before running all the macros, and pass the reference to
the Excel instance as a parameter for each routine. And set the
visibility to 'False' as you have done. This should save a few
seconds each macro call!</li>
<li>Only manage the data/content in the function. Leave the formatting until after all the functions have run. This will save effort in repeating formatting. </li>
<li>Use Word Styles to your advantage. Create a custom style for your table(s) and then apply it at the end (or perhaps even in your template in which case Word should automatically manage your formatting for you). This will reduce the complexity of your functions. </li>
<li>Bring the Excel data in as an array (<code>Dim X as Variant</code> : <code>X = .Range(dataRange).Value</code>). You can then close the file early and work directly with the values. In your current code you are switching between the Excel model and the VBA model a few times in that loop, which is eating precious cycles. By bringing the data in as an array, you only switch to the Excel model once, and your traversing of the array is all done in the VBA model. This has proven over time to be a good time saver.</li>
</ul>

<p><strong>Some other hints after looking at the code</strong></p>

<p>You have the following comment: <code>xlApp.Visible = False   'does not open the file, read only =&gt; faster to get the info</code> however, this still opens the file, but does not display the application meaning that precious computer cycles are not wasted on rendering a complex display (so yes, it is faster). </p>

<p>Don't use ":" to concatenate lines, it makes the code harder to read. If your code is starting to exceed the VBA module limits, use that as a warning that the code needs some serious review.</p>

<p>You find the reference Row and reference Column, but don't use that information to manage your search range. <code>dataRange</code> should be defined by rows <code>refRow + 2</code> -&gt; <code>10000</code> (not the end row?), and columns <code>desigColumn - 2</code> -&gt; <code>desigColumn</code>. This then gives us (instead of your <code>For Each cell In .Range(dataRange)</code>):</p>

<pre><code>Dim dataRange as Variant
dataRange = .Range(.Cells(refRow + 2, desigColumn - 2), .Cells(10000, desigColumn)).Value 
'^&lt;-- pulls in an array of the values in that range.

For iterator = LBound(dataRange,1) to UBound(dataRange,1) ' each row
    if datarange(iterator,2) &lt;&gt;"" Then 
        ' 3rd element in that row, 0-based indexing of array
        ' Confirm what checks you need to replicate "IsBlank"
        dataC.Add datarange(iterator,0)
        dataC.Add datarange(iterator,1)
    End If
Next iterator
</code></pre>

<p>Consider creating a user-defined Class (instead of a user-defined Type) which will hold the tri-data. Then you can <code>dataC.Add</code> each object into your collection which will remove the need for your <code>/2</code> calculations. With a common design, you can use the Class across all your macros.</p>
    </div>