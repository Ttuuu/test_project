<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have created a good solution, just a few style points that can reduce code size.</p>
<ul>
<li><p>Why <code>null</code> rather than <code>false</code> or even <code>0</code> in <code>arr[x - 1] = null;</code></p>
</li>
<li><p>Why not use commas to remove need for return. Eg <code>.reduce((arr, x) =&gt; {arr[x - 1] = null; return arr; }</code> becomes <code>.reduce((arr, x) =&gt; (arr[x - 1] = null, arr))</code></p>
</li>
<li><p>To create an array of indexes you could have used the shorter forms, <code>Array.from(nums, (item, i) =&gt; i + 1))</code> or <code>nums.map((item,i) =&gt; i + 1)</code></p>
</li>
</ul>
<h2>Rewrites</h2>
<pre><code>function findMissing(arr) {
  return arr
    .reduce((a, i) =&gt; (a[i - 1] = 0, a), arr.map((item, i) =&gt; i + 1))
    .filter(Boolean);
}
</code></pre>
<p>or</p>
<pre><code>const findMissing = arr =&gt; arr
  .reduce((a, i) =&gt; (a[i - 1] = 0, a), arr.map((item, i) =&gt; i + 1))
  .filter(Boolean);
</code></pre>
<p>You could also have solved it with a set as follows</p>
<pre><code>function findMissing(arr) {
    const s = new Set(arr), res = [];
    var i = arr.length;
    while (i) { s.has(i--) || res.push(i + 1) }
    return res;
}
</code></pre>
    </div>