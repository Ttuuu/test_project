<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are quite a few issues here:</p>

<ul>
<li><p>In <code>switch</code> statement, you don’t need/want <code>break</code> statements. Unlike C languages, Swift <code>switch</code> statements don’t <code>fallthrough</code> by default. To use <code>break</code> where it is not needed is very unswifty.</p></li>
<li><p>I’d make <code>toggleItem</code> an instance method.</p></li>
<li><p>The properties of the <code>ViewController</code> should not be <code>static</code>.</p></li>
<li><p>This table view controller should not be reaching into <code>ViewController</code> to update its properties, which tightly couples these two classes. We should strive for far looser coupling in our code.</p>

<p>Admittedly, because <code>ViewController</code> is presenting <code>TableViewController</code>, the presenting view controller might go ahead and update properties in the presented view controller, in order to pass data to down the chain. But <code>TableViewController</code> should never be reaching back up the chain. That makes them too tightly coupled and only allows <code>TableViewController</code> to be called from that one view controller, whereas as your app grows, you might want to call it from elsewhere.</p>

<p>The typical solution to achieve loose coupling is the delegate-protocol pattern. Presented view controllers should not updating properties in the presenting view controller, but rather it should only communicate back via its protocol. This allows us to use this presented view controller from wherever we want.</p></li>
<li><p>If you’re going to have an early exit in <code>didSelectRowAt</code> (if section ≠ 0), all things being equal, you should prefer <code>guard</code> over <code>if</code>, as it makes the intent more clear (you see <code>guard</code> keyword and you immediately know “oh, this is an early exit for some edge case”). The compiler will also warn us if we accidentally forget to call <code>return</code>.</p></li>
<li><p>In <code>if</code> statements, the use of parentheses around the test clause feels a bit unswifty. Consider:</p>

<pre><code>if (state == PastState.UNSELECTED) {
    ... 
} else {
    ... 
}
</code></pre>

<p>Instead, I’d suggest:</p>

<pre><code>if state == PastState.UNSELECTED {
    ... 
} else {
    ... 
}
</code></pre></li>
<li><p>In the case of an enumeration, I’d favor <code>switch</code> over <code>if</code>. Thus, instead of the above, I’d suggest:</p>

<pre><code>switch state {
case PastState.UNSELECTED:
    ...

case PastState.SELECTED:
    ...
}
</code></pre>

<p>This ensures that the test is exhaustive. It makes it easier to reason about the code at a glance. Plus, if you, for example, later add a <code>.NOTDETERMINED</code> enumeration, the compiler can warn you of all of the non-exhaustive <code>switch</code> statements, but if you use <code>if</code>-<code>else</code>, you have to manually pour through all of your code looking for this yourself.</p></li>
<li><p>Because <code>PastState</code> is an enumeration, you can eliminate all of those redundant references to the enumeration name. E.g., using the previous example, you can say:</p>

<pre><code>switch state {
case .UNSELECTED:
    ...

case .SELECTED:
    ...
}
</code></pre></li>
<li><p>In your enumerations, you should use camelCase (start with lower case letter, only capitalize start of new word within the case name):</p>

<pre><code>switch state {
case .unselected:
    ...

case .selected:
    ...
}
</code></pre>

<p>Alternatively, just retire this enumeration altogether and just use a <code>[Bool]</code> property. Or, as shown at the end of this answer, if you use a view model, you might refactor this out completely.</p></li>
<li><p>The <code>blacklisted</code> property is using an enumeration, which is good. But <code>flags</code> is using strings with values buried in the code. They both should be enumerations.</p></li>
<li><p>The <code>done</code> method is subtracting <code>blacklisted</code> from the <code>ViewController</code>’s <code>allowed</code>. But what if you unselected a blacklisted item and needed to add it back to the <code>allowed</code>? The existing code won’t do that.</p>

<p>The same issue applies for <code>ViewController.flags</code>, where you’re adding <code>flags</code>. But what if one was removed?</p></li>
<li><p>You are setting the <code>accessoryView</code> based upon which flags/blacklisted values exist in these sets and toggle this based upon selecting a row. But you then have this <code>UISwitch</code>, too. You’d generally use either a <code>UISwitch</code> or the <code>accessoryView</code>, but not both. Pick one or the other. (In my demo, I’m going to retire <code>UISwitch</code>.)</p></li>
<li><p>The references to <code>self.dismiss(...)</code> can be simplified to just <code>dismiss(...)</code>.</p></li>
<li><p>The <code>didSelectRowAt</code> is:</p>

<ul>
<li>toggling the <code>indicatorView</code> based upon the old <code>state</code>;</li>
<li>updating the <code>blacklist</code>/<code>flags</code> properties; and</li>
<li>toggling the <code>state</code>.<br> </li>
</ul>

<p>I would suggest that you simply want to toggle the state and then reload that row. Not only does it make this less fragile (you don’t have three different operations that you need to carefully coordinate), but it affords the opportunity to animate the change of the <code>indicatorView</code>.</p></li>
<li><p>I would suggest grouping your view controller methods into extensions. For example, I find it nice to put <code>UITableViewDataSource</code> methods in one extension, <code>UITableViewDelegate</code> methods in another, <code>@IBAction</code> methods in another, etc. This makes it easy to visually identify/find relevant methods. This also allows you to collapse sections (e.g. <kbd>⌘</kbd>+<kbd>option</kbd>+<kbd>◀︎</kbd>) sections that you’re not currently working on, making it easy to focus on the work at hand. This, combined with use of the <code>MARK: -</code> designator makes navigation through your view controller easier.</p></li>
<li><p>You’ve got an enumeration called <code>PastState</code>. But this is not the “past state”, but rather the current state as updated as the user proceeds with selecting/unselecting various options. So I might rename that <code>SelectedState</code> or something like that.</p>

<p>Likewise, I might give <code>TableViewController</code> a name that indicates its purpose. E.g. maybe <code>AllowedContentViewController</code>.</p></li>
<li><p>I find it confusing that the main view controller uses <code>allowed</code>, but the <code>TableViewController</code> uses <code>blacklisted</code> (which is presumably an inverted set of the aforementioned). I’d suggest using the same model in both view controllers. If <code>TableViewController</code> wants to invert it as part of its determination of what’s checked and what’s not, then it should do that.</p></li>
<li><p>The most radical change I’m going to suggest is that you should completely remove the business logic from the view controller. The view controller should be handling the interface with the UIKit controls (the table view, the buttons, etc.), but all the logic about which <code>flags</code> and <code>Category</code> values is represented by which row, how you toggle them, etc., doesn’t belong here. You often put it in what I will call a “view model” (though this entity goes by different names)</p>

<p>The virtue of this is two fold. First the view controller suddenly becomes something very concise and easy to understand. Second, when you get around to writing unit tests, you want to be able to test your business logic without worrying about UIKit stuff (which should be part of the UI tests, not the unit tests).</p></li>
</ul>

<p>So, pulling this all together, we end up with a view controller like this:</p>

<pre><code>class AllowedContentViewController: UITableViewController {

    // properties set by presenting view controller

    weak var delegate: AllowedContentViewControllerDelegate?
    var allowed: Set&lt;Category&gt;!
    var flags: Set&lt;Flag&gt;!

    // properties used by this view controller

    private var viewModel: AllowedContentViewModel!

    override func viewDidLoad() {
        super.viewDidLoad()

        viewModel = AllowedContentViewModel(allowed: allowed, flags: flags)
    }

}

// MARK: - Actions

extension AllowedContentViewController {
    @IBAction func cancel(_ sender: UIBarButtonItem) {
        dismiss(animated: true)
    }

    @IBAction func done(_ sender: UIBarButtonItem) {
        delegate?.allowedContentViewController(self, didUpdateAllowed: viewModel.allowed, flags: viewModel.flags)
        dismiss(animated: true)
    }
}

// MARK: - UITableViewDataSource

extension AllowedContentViewController {
    // you didn't provide the following two, so I'll take a guess what that looked like

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return viewModel.numberOfRows()
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)

        cell.textLabel?.text = viewModel.text(for: indexPath.row)
        cell.accessoryType = viewModel.isSelected(row: indexPath.row) ? .checkmark : .none

        return cell
    }
}

// MARK: - UITableViewDelegate

extension AllowedContentViewController {
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard indexPath.section == 0 else {
            return
        }

        viewModel.toggle(row: indexPath.row)
        tableView.reloadRows(at: [indexPath], with: .fade)
    }
}
</code></pre>

<p>That references a protocol to which our presenting view controller will conform:</p>

<pre><code>protocol AllowedContentViewControllerDelegate: class {
    func allowedContentViewController(_ viewController: AllowedContentViewController, didUpdateAllowed allowed: Set&lt;Category&gt;, flags: Set&lt;Flag&gt;)
}
</code></pre>

<p>The presenting view controller would then do something like so:</p>

<pre><code>class ViewController: UIViewController {

    var allowed = Set&lt;Category&gt;()
    var flags = Set&lt;Flag&gt;()

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let destination = (segue.destination as? UINavigationController)?.topViewController as? AllowedContentViewController {
            destination.flags = flags
            destination.allowed = allowed
            destination.delegate = self
        }
    }
}

extension ViewController: AllowedContentViewControllerDelegate {
    func allowedContentViewController(_ viewController: AllowedContentViewController, didUpdateAllowed allowed: Set&lt;Category&gt;, flags: Set&lt;Flag&gt;) {
        self.allowed = allowed
        self.flags = flags
    }
}
</code></pre>

<p>I obviously made an assumption here of how you presented this <code>AllowedContentViewController</code> (namely that you must have embedded it in a <code>UINavigationController</code>, based upon the presence of <code>dismiss</code> but that you also had <code>@IBAction</code>s with <code>UIBarButton</code>). Clearly, adjust the <code>prepare(for:sender:)</code> according to how you actually presented this table view controller.</p>

<p>Anyway, above, the presenting view controller is responsible for passing data to this presented <code>AllowedContentViewController</code> and for responding to <code>AllowedContentViewControllerDelegate</code> delegate method that supplies the updated user preferences for what is allowed and what isn’t. This gets the <code>AllowedContentViewController</code> from ever having to reach into <code>ViewController</code> to retrieve/update properties itself. Now <code>AllowedContentViewController</code> can be used in any context you want.</p>

<p>Finally, our view model has all the business logic that used to be in the <code>TableViewController</code>:</p>

<pre><code>struct AllowedContentViewModel {
    var allowed: Set&lt;Category&gt;
    var flags: Set&lt;Flag&gt;

    func numberOfRows() -&gt; Int {
        return 4
    }

    func isSelected(row: Int) -&gt; Bool {
        switch row {
        case 0:  return flags.contains(.nsfw)
        case 1:  return flags.contains(.religious) &amp;&amp; flags.contains(.political)
        case 2:  return !allowed.contains(.programming)
        case 3:  return !allowed.contains(.dark)
        default: fatalError("Unexpected row number")
        }
    }

    private mutating func select(row: Int) {
        switch row {
        case 0:  flags.insert(.nsfw)
        case 1:  flags.insert(.religious); flags.insert(.political)
        case 2:  allowed.remove(.programming)
        case 3:  allowed.remove(.dark)
        default: fatalError("Unexpected row number")
        }
    }

    private mutating func unselect(row: Int) {
        switch row {
        case 0:  flags.remove(.nsfw)
        case 1:  flags.remove(.religious); flags.remove(.political)
        case 2:  allowed.insert(.programming)
        case 3:  allowed.insert(.dark)
        default: fatalError("Unexpected row number")
        }
    }

    mutating func toggle(row: Int) {
        if isSelected(row: row) {
            unselect(row: row)
        } else {
            select(row: row)
        }
    }

    func text(for row: Int) -&gt; String {
        switch row {
        case 0: return NSLocalizedString("NSFW", comment: "Label")
        case 1: return NSLocalizedString("Religious/political", comment: "Label")
        case 2: return NSLocalizedString("Blacklisted Programming", comment: "Label")
        case 3: return NSLocalizedString("Blacklisted Dark", comment: "Label")
        default: fatalError("Unexpected row number")
        }
    }
}
</code></pre>

<p>We can, if we want, then write unit tests for this view model. For example:</p>

<pre><code>class AllowedContentViewModelTests: XCTestCase {

    func testDefaultState() {
        let viewModel = AllowedContentViewModel(allowed: [], flags: [])

        XCTAssert(!viewModel.isSelected(row: 0))
        XCTAssert(!viewModel.isSelected(row: 1))
        XCTAssert(viewModel.isSelected(row: 2))
        XCTAssert(viewModel.isSelected(row: 3))
    }

    func testTogglingNsfw() {
        var viewModel = AllowedContentViewModel(allowed: [], flags: [.nsfw])

        XCTAssert(viewModel.isSelected(row: 0))

        viewModel.toggle(row: 0)

        XCTAssert(!viewModel.isSelected(row: 0))
    }

}
</code></pre>

<p>See example at <a href="https://github.com/robertmryan/RefactoredViewController" rel="nofollow noreferrer">https://github.com/robertmryan/RefactoredViewController</a>.</p>
    </div>