<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few random comments:</p>

<ol>
<li><p>Both <code>elemAt</code> and <code>maximumBy</code> give hints that you're expecting to operate on non-empty structures. Maybe give <code>Data.List.NonEmpty</code> a try.</p></li>
<li><p>A few places could be more clear with more pattern matching. E.g. <code>max (k1, v1) k2 v2</code> instead of <code>max acc k v</code>. Or <code>(maxDelta, splitter) = maximumBy â€¦</code></p></li>
<li><p><code>map snd</code> is more conventional than <code>snd . unzip</code>. I suspect it would be more efficient too but I might be wrong.</p></li>
<li><p>In several places you're traversing the same list multiple times. In general, it's better to avoid this as it's likely to force the spine of the (potentially large) list in memory. You might be able to merge these multiple traversals into one (e.g. using the <code>foldl</code> package). More likely, you should simply use <code>vector</code>.</p></li>
<li><p>In <code>giniDelta</code> you could use <code>Data.List.partition</code> to construct <code>left</code> and <code>right</code>.</p></li>
<li><p>Apply top-down ordering in your <code>where</code>-clauses. E.g. in <code>train</code>, <code>majority</code> should come first as it is the declaration that is referenced from the main function body.</p></li>
</ol>

<p><strong>EDIT:</strong> All in all I think readability is actually pretty good!</p>
    </div>