<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should try to keep your <code>main</code> function small and focused. (Well, you should try to keep <em>every</em> function you write small and focused!) For example, you might do something like this:</p>

<pre><code>struct Coord {
    int row, col;
};
struct CoordList {
    int size;
    Coord *data;
};

void print_coords(Coord c, FILE *out) {
    printf("(%d,%d)\n", c.row, c.col);
}

int main() {
    int n;
    scanf("%d", &amp;n);
    print_tab_delimited_matrix(n, stdout);
    CoordList coords = collect_power_points(n);
    printf("%d\n", coords.size);
    for (int i=0; i &lt; coords.size; ++i) {
        print_coords(coords.data[i]);
    }
}
</code></pre>

<p>Writing the little functions <code>print_tab_delimited_matrix</code> and <code>collect_power_points</code> is left as an exercise for the reader.</p>

<hr>

<p>Or, you might consider that there's no real point to collecting up all of the power-point coordinates in a <em>physical</em> list. You already know the <em>formula</em> for computing where each power point is picked up! So you might scrap the above code and rewrite your whole program as:</p>

<pre><code>int main() {
    int n;
    scanf("%d", &amp;n);
    print_tab_delimited_matrix(n, stdout);
    int n2 = n * n;
    printf("%d\n", 1 + (n2 / 11));
    print_coords(get_coords_of_army(1, n), stdout);
    for (int i = 11; i &lt;= n2; i += 11) {
        print_coords(get_coords_of_army(i, n), stdout);
    }
}
</code></pre>

<p>Writing the function <code>get_coords_of_army</code> is left as an exercise for the reader. But the important thing to realize is that <em>writing that function is supposed to be the challenge!</em> You should develop the instinct and intuition for quickly breaking down a problem statement into sub-problems, and then solving those sub-problems. Notice that outside of <code>main</code> I don't need to do any input or output; I just have a very clean mathematical problem to solve.</p>

<pre><code>Coord get_coords_of_army(int which_army, int breadth_of_square);
</code></pre>

<p>Everything else going on in this problem statement is basically a red herring.</p>

<hr>

<p>I note in passing that <code>isDiv(x)</code> is <em>not</em> a good name for a function that computes whether <code>x</code> is divisible by 11. You get points for naming it <code>is...</code>-something, but surely (A) <code>is_divisible_by_11</code> would have been a better name, and (B) you don't really need a <em>function</em> for that!</p>

<p>You could make the argument that this is futureproofing the code: what if the next iteration of the puzzle changes the locations of the power points? That's fair, and makes <code>is_divisible_by_11</code> a bad name... but it doesn't make <code>isDiv</code> a <em>good</em> name! We might better write</p>

<pre><code>bool has_power_point(int which_army) {
    return (which_army == 1) || (which_army % 11 == 0);
}
</code></pre>

<p>and then back in our main function we can write simply</p>

<pre><code>    printf("%d\n", 1 + (n2 / 11));
    for (int i = 1; i &lt;= n2; ++i) {
        if (has_power_point(i)) {
            print_coords(get_coords_of_army(i, n), stdout);
        }
    }
</code></pre>
    </div>