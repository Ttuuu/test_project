<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is quite a lot to analyze, so I will focus only few examples on semantics, best practices and language features.</p>

<h1>Naming</h1>

<h2>Good:</h2>

<ul>
<li>Have a structure</li>
<li>well understandable</li>
<li>not too long</li>
</ul>

<h2>Arguable:</h2>

<p>Some of your parameter and field names are way too short.</p>

<pre><code>abstract class AStarNode&lt;T&gt;(val data: T?,
                            var from: AStarNode&lt;T&gt;? = null,
                            var g: Int = Int.MAX_VALUE,
                            var f: Int = Int.MAX_VALUE) : Comparable&lt;AStarNode&lt;T&gt;&gt; {
</code></pre>

<p><code>g</code>, <code>f</code></p>

<pre><code>fun distanceTo(other: CartesianNode) : Int {
    val dx = abs(this.x - other.x).toDouble()
    val dy = abs(this.y - other.y).toDouble()
    return round(sqrt(dx * dx) + sqrt(dy * dy)).toInt()
}
</code></pre>

<p><code>dx</code>, <code>dy</code> are arguable, because I can understand them through method name.</p>

<h1>Comments</h1>

<p>Very many of them - although they are well understandable, I'm a fan when the number of code lines is much bigger than the comment lines.</p>

<p>A best practice is to use comments to describe the reason for something not obvious or complex - not the implementation. </p>

<h2>Good:</h2>

<p>Very good example of yours, where a comment says WHY and not WHAT:</p>

<pre><code>/**
 * Implemented so these can be used in a priority queue
 */
override fun compareTo(other: AStarNode&lt;T&gt;): Int
</code></pre>

<h2>Arguable:</h2>

<p>Many comments could be left out, because ...</p>

<ul>
<li><p>they are obvious</p>

<pre><code>// Begin the search
</code></pre>



<pre><code>/**
 * Implement hash code so that these can be used in a hash set
 */
override fun hashCode(): Int {
    var hash = 7
    hash = 31 * hash + g
    hash = 31 * hash + f
    hash = 31 * hash + data.hashCode()
    return hash
}
</code></pre></li>
<li><p>commenting a setter - I don't see any need here for a comment</p>

<pre><code>// The g cost of the initial node is by definition 0
from.g = 0
</code></pre></li>
<li><p>tell me something I could have figured out in 2 seconds looking into the code</p>

<pre><code>/**
 * A cartesian node is equal to another one if the coordinates are the same
 */
override fun equals(other: Any?): Boolean {
    return if (other !is CartesianNode) {
        false
    } else {
        this.x == other.x &amp;&amp; this.y == other.y
    }
}
</code></pre>



<pre><code>/**
 * Returns true if the plan is not empty
 */
fun hasPlan() = plan.isNotEmpty()
</code></pre></li>
</ul>

<p>If you have to explain in the code how your method works (not necessarily classes), its neither well written, nor has it an understandable name.</p>

<pre><code>// For each neighbour of the node calculate it's g cost and update it's from pointer
</code></pre>

<p>I strongly believe that comments can, and often do, pollute source code. The goal should be to write the code so well, that it explains itself.</p>

<h1>Language features</h1>

<h2>Good:</h2>

<p>Almost nothing to complain about. You seem to get along with kotlin.</p>

<h2>Arguable:</h2>

<p>Some things are a bit more complex than they could be, or miss some existing helping functionalities:</p>

<pre><code>override fun compareTo(other: AStarNode&lt;T&gt;): Int {
    return when {
        this.f &lt; other.f -&gt; -1
        this.f &gt; other.f -&gt; 1
        else -&gt; 0
    }
}
</code></pre>

<p>can be </p>

<pre><code>override fun compareTo(other: AStarNode&lt;T&gt;): Int = this.f.compareTo(other.f)
</code></pre>



<pre><code>override fun hashCode(): Int {
    var hash = 7
    hash = 31 * hash + g
    hash = 31 * hash + f
    hash = 31 * hash + data.hashCode()
    return hash
}
</code></pre>

<p>can be</p>

<pre><code> override fun hashCode(): Int = HashCodeBuilder(13,17)
        .append(g)
        .append(f)
        .append(data)
        .toHashCode()
</code></pre>

<h1>Code readability</h1>

<h2>Good:</h2>

<ul>
<li>Very small classes</li>
<li>Well written to the ability of being testable</li>
<li>Good and rare usage of interfaces and inheritance</li>
<li>You wrote tests - this is already a big win </li>
</ul>

<h2>Arguble:</h2>

<p>While your classes remain small and beautiful, some of your methods don't follow the same example.</p>

<p><em>Method inside a method</em>: extract it. A Method usually has to do one thing and not create another one - quite unusual implementation I haven't seen so far:</p>

<pre><code>fun&lt;T&gt; path(from: AStarNode&lt;T&gt;,
        to: AStarNode&lt;T&gt;,
        heuristic: ((AStarNode&lt;T&gt;, AStarNode&lt;T&gt;) -&gt; Int),
        cost: ((AStarNode&lt;T&gt;, AStarNode&lt;T&gt;) -&gt; Int)) : Stack&lt;AStarNode&lt;T&gt;&gt; {

/**
 * Reconstructs a path, represented as a [Stack] of [AStarNode]
 * By updating a pointer to a node until the pointer points at null
 */
fun reconstructPath(from: AStarNode&lt;T&gt;) : Stack&lt;AStarNode&lt;T&gt;&gt; {
</code></pre>

<p><em>Very long method</em>: extract the functionality into other functions / classes. The first method in the example has ~100 lines! </p>

<pre><code>fun&lt;T&gt; path(...)
</code></pre>

<p>When the called instance / method has many parameters, it is always better to <em>use named params</em> - like here:</p>

<pre><code>class GoapPlanner {
fun plan(actionPool: Collection&lt;GoapAction&gt;, fromState: WorldState, toState: WorldState) = Stack&lt;GoapAction&gt;().apply {
    this.addAll(
            path(
                    GoapNode(fromState, actionPool, null),
                    GoapNode(toState, actionPool, null),
                    { a, b -&gt;
                        (a as GoapNode).worldState.countDifferences((b as GoapNode).worldState)
                    }, { _, b -&gt;
                (b as GoapNode).data?.cost ?: 0
            }
            ).mapNotNull { goapNode -&gt;
                goapNode.data
            }
    )
}
</code></pre>

<h1>Tests</h1>

<h2>Good:</h2>

<ul>
<li>Short</li>
<li>Have comments</li>
<li>Initialisation uses with named params</li>
</ul>

<h2>Arguable:</h2>

<ul>
<li><p>Much duplication for objects and parameters. Its better to define some fields to be used by other tests, which are not that important, but are needed e.g. for initialisation.</p>

<pre><code>Pair("HasBread", true)

Pair("HasMoney", true)
</code></pre></li>
<li><p>Weird assertions</p>

<pre><code>assertTrue { !isValid }
</code></pre></li>
<li><p>Assertions which will tell nothing valuable when they fail </p>

<pre><code>assertTrue { resultingWorldState == expectedWorldState }
</code></pre>

<p>The error message would be something like "Expected to be true, but was false". This is worthless! You need to debug to find out WHY they are not equal. 
There are plenty of methods and other libraries which offer so much better solutions, like <a href="https://joel-costigliola.github.io/assertj/" rel="nofollow noreferrer">AssertJ</a>. There you could write </p>

<pre><code>assertThat(resultingWorldState).isEqualTo(expectedWorldState)
</code></pre>

<p>and when it fails, it would tell you what was expected, what is the result and what is the difference - much more information.</p>

<p>Or here:</p>

<pre><code>    // Assert that the plan is of length 3 and has the correct actions in the correct order
    assertTrue { plan.size == 3 }
    assertTrue { plan.pop() == makeToastAction }
    assertTrue { plan.pop() == getBreadAction }
    assertTrue { plan.pop() == workForMoneyAction }
</code></pre>

<p>When any of this fails, you don't know which one (besides the <em>exception on line xy</em>), what was the real value, what is the difference? </p></li>
<li><p>Naming</p>

<p>Yes, here we are again. The names of a test are allowed to be longer than usual and should be very explainable. Names like <code>testSimplePath</code>,<code>testComplexPath</code>, <code>testComplexPath</code>, .. tell me nothing! </p>

<p>Companies have often their own patterns and standards on test names, but my advice would be to start every test with the word 'should'. Like: <code>should return true, when property xy is bigger than zero</code>.</p>

<p>A test should be as simple as it can be and as explainable as it is possible. This includes the name where you can define your case in prose. BTW: <a href="https://kotlinlang.org/docs/reference/coding-conventions.html#function-names" rel="nofollow noreferrer">You can use backticks to have a function name with spaces in between.</a></p></li>
</ul>

<hr>

<p>Thanks for reading and I hope I could give you some advice which is actually valuable.</p>

<p>The END</p>
    </div>