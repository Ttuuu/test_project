<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Regarding your questions</h2>
<blockquote>
<p>Is this an inappropriate use of Optional's map method? I'm not mapping
to a new object but rather just returning the same car with some
properties potentially updated.</p>
</blockquote>
<p>I think it's appropriate because it might return an updated object. Unfortunately (as you said) Java 8 doesn't have <code>ifPresentOrElse</code>.</p>
<blockquote>
<p>The save method is really only required to be called for cars created
in the orElseGet.</p>
</blockquote>
<p>You can change the <code>orElseGet</code> with <code>orElseGet(() -&gt; mySpringCarRepo.save(createCar(carInfo)))</code> and remove the final save to the db.</p>
<h2>Performances</h2>
<p>The complexity of the method is <code>O(c*ci)</code> where <code>c</code> is the number of cars in your DB and <code>ci</code> is the number of <code>CarInfo</code>.
If you store the Cars in a <code>Map</code> instead of a <code>Set</code> you can improve it to <code>O(ci)</code>.</p>
<pre><code>void saveCars() {
    // get CarInfo from a webservice
    List&lt;CarInfo&gt; carInfos = getCarInfo();
    // Get cars from DB that correspond to each CarInfo
    Map&lt;Long,Car&gt; cars = mySpringCarRepo
            .findByCarInfoIdIn( getCarInfoIds(carInfos) )
            .stream()
            .collect( Collectors.toMap(Car::getCarInfoId,Function.identity()));
    
    for (CarInfo carInfo : carInfos) {
        // Returns Optional&lt;Car&gt;
        Optional.ofNullable(cars.get(carInfo.getId()))
        // Update car if already exists
        .map(c -&gt; updateCar(carInfo, c))
        // Save car otherwise
        .orElseGet(() -&gt; mySpringCarRepo.save(createCar(carInfo)));
    }
}
</code></pre>
<p>Or if you don't mind to query the db for each <code>CarInfo</code>, than the method is shorter:</p>
<pre class="lang-java prettyprint-override"><code>void saveCars() {
    getCarInfo().stream()
        .forEach(carInfo -&gt; 
                    // returns Optional&lt;Car&gt;
                    mySpringCarRepo.findByCarInfoId(carInfo.getId()) 
                    // Update car if already exists
                    .map(car -&gt; updateCar(carInfo, car))
                    // Save car otherwise
                    .orElseGet(() -&gt; mySpringCarRepo.save(createCar(carInfo))));
}
</code></pre>
<p><strong>Note 1:</strong> I haven't fully tested the code, it's just to give you an idea how to improve it.</p>
<p><strong>Note 2</strong>: the performance gain might be irrelevant due to the DB and network latency, but with the second approach you should save some memory space.</p>
<h2>Naming</h2>
<p>The method name <code>saveCars</code> is not very appropriate, a better name might be <code>updateCars</code> or <code>syncCars</code>.</p>
    </div>