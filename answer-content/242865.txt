<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The one thing that is immediately apparent to me (before scrolling the code window) is the naming of some variables: a, b, c, d. Why not use more <strong>meaningful names</strong> ? You're not being billed by length of variable name. If they are coordinates just call them topleft, topright etc.</p>

<p>Ditto with variables names like:</p>

<pre><code>pth = args['path']
outp = args['output']
intrv = args["time"]
</code></pre>

<p>Names should be more explicit and not abbreviated needlessly.</p>

<hr>

<p>I would put all <strong>constants</strong> at the top of the code.</p>

<p>This should be a constant too: <code>strftime("%d_%m_%H_%M_%S")</code>.
Define the desired date format only once.</p>

<hr>

<p>You are assigning some variables in your code twice eg:</p>

<pre><code>a,b,c,d=0,0,0,0
</code></pre>

<hr>

<p>It is good that you are using <code>argparse</code> but you can do more.</p>

<p>First of all, some variable assignments are unnecessary:</p>

<pre><code>if intrv != None:
    interval = intrv
</code></pre>

<p>You can provide a <strong>default value</strong> for missing arguments. Just use the <code>default</code> option in <code>add_argument</code>. Don't use two variables when one is sufficient.</p>

<p>Since you are expecting 4 numbers for the <code>corners</code> argument here is how to integrate the requirement in <code>argparse</code>: use the <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="noreferrer"><code>nargs</code></a> option.</p>

<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--corners', dest="corners",
type=int, required=True, nargs=4,
help="Img corners required with files mode eg. -c '0 0 1920 1080' ")

args = parser.parse_args()

# show the values
print(f"corners: {args.corners}")
</code></pre>

<p>With this you know that only integers will be accepted. But they could be too large. So you can add one more option like: <code>choices=range(0,1921)</code>. With this you will restrict the range of allowed numbers to 0-1920 (as an example). The downside is that Python will output all possibilities if at least one argument does not fulfill the condition. The error message will fill up your screen and this is not pretty.</p>

<p>To avoid this downside, we can write a custom function to validate the argument and override the error message:</p>

<pre><code>import argparse

def check_corners(corner):
    if not corner.isdigit():
        raise argparse.ArgumentTypeError("Corner must be a number")
    if int(corner) not in range(0,1921):
        raise argparse.ArgumentTypeError("Corner must be a number in the range [0-1920]")
    return corner


parser = argparse.ArgumentParser()
parser.add_argument('-c', '--corners', dest="corners",
type=check_corners, required=True, nargs=4,
help="Img corners required with files mode eg. -c '0 0 1920 1080' ")

args = parser.parse_args()

# show the values
print(f"corners: {args.corners}")
</code></pre>

<p>There is one caveat though. By default, Python assumes arguments are of type <code>str</code> and that's what happens in this function. So before using <code>range</code> we have to make sure that <code>corner</code> is a number and cast it to <code>int</code>. Otherwise <code>in range</code> will not work.<br>
Or you could use a regex.</p>

<p>Test:</p>

<pre><code>python3 corners.py -c 0 0 0 1921
usage: corners.py [-h] -c CORNERS CORNERS CORNERS CORNERS
corners.py: error: argument -c/--corners: Corner must be a number in the range [0-1920]
</code></pre>

<p>With this, you can remove a few lines of your code or at least simplify logic. The <code>argparse</code> module allows you to collect arguments and validate them at the same time. Take full advantage of the features available.</p>

<hr>

<blockquote>
  <p>Should I split it somehow into separate files?</p>
</blockquote>

<p>Ultimately, keeping the class in a standalone file importable as a packagge would be a good idea.</p>

<hr>

<p>Use the <code>logging</code> module.</p>

<p>You have a few prints here and there. It would be a good idea to use the <code>logging</code> module instead eg <code>logger.debug("Text saved")</code>. Then you can show the comments on screen, record them to a file or <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-multiple-destinations" rel="noreferrer">both</a>. You can also reduce verbosity any time you want by adjusting the debug level. If you want your code to become silent you have to comment out all those prints across your module.</p>

<p>Since the code can be automated and is probably unattended to some extent, it is important to keep a log of activity, not just on screen but on file too for later review. Plus, <strong>exceptions</strong> should be handled and logged too when they occur.</p>

<hr>

<p><strong>Comments</strong>: some functions have no comments at all. Some docstring would be nice. Perhaps add some value samples.</p>

<p>Some functions could be renamed and documented, for example <code>_get</code>. If I'm guessing right it could be <code>take_snapshot</code> or something like that. <code>get</code> is so generic that it is meaningless. The point is that the purpose of each function should be immediately apparent and that's why comments are useful, also for you (in 6 months you'll have to reanalyze your code).</p>

<hr>

<p>If you work with <strong>temp files</strong> you could use the <a href="https://docs.python.org/3/library/tempfile.html" rel="noreferrer">tempfile</a> module or write them to /tmp. Then you'll be less concerned with cleanup.</p>
    </div>