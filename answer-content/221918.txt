<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A search for "python sort unit test order in method definition order" got me here, and <a href="https://docs.python.org/3/library/unittest.html#unittest.TestLoader.sortTestMethodsUsing" rel="noreferrer">the documentation</a> isn't particularly useful either ("Function" it says, what is it passed, what is it expected to return?)</p>

<p>Reading the four questions linked to at the start of this one yields only three unique answers:</p>

<ol>
<li>Don't sort your test methods (not an answer).</li>
<li>Put numbers in your test method names (ugly, and means you need to renumber them all if you want to put new tests in the middle, or use ever-growing strings, etc.).</li>
<li><a href="https://stackoverflow.com/a/35930812">Go through all this rigmarole</a>, which it looks like the poster had success with but isn't exactly easy to understand and digs into Python 3's internals for the function line number.</li>
</ol>

<p>sortTestMethodsUsing expects a function like Python 2's <code>cmp</code>, which has no equivalent in Python 3 (I went to check if Python 3 had a <code>&lt;=&gt;</code> spaceship operator yet, but apparently not; they expect you to rely on separate comparisons for <code>&lt;</code> and <code>==</code>, which seems much a backwards step...). The function takes two arguments to compare, and must return a negative number if the first is smaller. Notably in <em>this particular case</em>, the function may assume that the arguments are never equal, as <code>unittest</code> will not put duplicates in its list of test names.</p>

<p>With this in mind, here's the simplest way I found to do it, assuming you only use one TestCase class:</p>

<pre><code>def make_orderer():
    order = {}

    def ordered(f):
        order[f.__name__] = len(order)
        return f

    def compare(a, b):
        return [1, -1][order[a] &lt; order[b]]

    return ordered, compare

ordered, compare = make_orderer()
unittest.defaultTestLoader.sortTestMethodsUsing = compare
</code></pre>

<p>Then, annotate each test method with <code>@ordered</code>:</p>

<pre><code>class TestMyClass(unittest.TestCase):
    @ordered
    def test_run_me_first(self):
        pass

    @ordered
    def test_do_this_second(self):
        pass

    @ordered
    def test_the_final_bits(self):
        pass

if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>This relies on Python calling annotations in the order the annotated functions appear in the file. As far as I know, this is intended, and I'd be surprised if it changed, but I don't actually know if it's guaranteed behavior. I think this solution will even work in Python 2 as well, for those who are unfortunately stuck with it, though I haven't had a chance to test this.</p>

<p>If you have multiple TestCase classes, you'll need to run <code>ordered, compare = make_orderer()</code> once per class before the <code>class</code> definition, though how this can be used with <code>sortTestMethodsUsing</code> will be more tricky and I haven't yet been able to test this either.</p>

<p>For the record, the code I am testing does <em>not</em> rely on the test order being fixed - and I fully understand that you shouldn't rely on test order, and this is the reason people use to avoid answering this question. The order of my tests could be randomised and it'd work just as well. However, there is one very good reason I'd like the order to be fixed to the order they're defined in the file: it makes it so much easier to see at a glance <em>which</em> tests failed.</p>
    </div>