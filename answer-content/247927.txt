<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Are the fs and path packages needed? Do they simplify things enough to justify the inclusion?</p>
</blockquote>
<p><code>fs</code> is needed. How else would you get your data down the line without reading it in? <code>path</code> could be replaced with your own path utility library, but I wouldn't waste time reinventing that when a built-in one already exists.</p>
<blockquote>
<p>Can this be written more concisely?</p>
</blockquote>
<p>This is probably as concise as you can get it. Any further would probably make it unreadable.</p>
<blockquote>
<p>Is the ternary operator justified? Would you keep it here, or is an if construct preferred?</p>
</blockquote>
<p>Yep, ternary is fine. It's the check that might need improvement. That's because you're only tacking on <code>index.html</code> if the path is <code>/</code>. In other web servers, any path that ends in <code>/</code> assumes that <code>index.html</code> will be tacked on.</p>
<pre><code>const filePath = path.resolve(`${rootPath}${fileUrl}`)
</code></pre>
<p>So one of the dangers when writing a web server is <a href="https://owasp.org/www-community/attacks/Path_Traversal" rel="nofollow noreferrer">directory traversal</a>. It's when your path resolver (in your case, this line) resolves to a path outside the web directory, and your server just willingly serves it. You'll need to check if the path resolved is still in your web directory.</p>
<pre><code>res.setHeader('Content-Type', 'text/html')

function reqIsOk (req, filePath) {
  const fileExt = path.extname(filePath)
  return req.method === 'GET' &amp;&amp; fileExt === '.html' &amp;&amp; fs.existsSync(filePath)
}
</code></pre>
<p>A static server can be more than just HTML. Replace the hardcoded <code>text/html</code> with a value coming from a map of file extension to mimetype.</p>
    </div>