<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Recently, <em>"Tic-tac-toe"</em> game is gaining popularity on CR.<br>It may even deserve a separate playlist like <em>"Tic-tac-toe" Refactorings on various programming languages</em>.<br>You may find how other guys on CR already <em>succeeded</em> with different implementations (some on pure Python, some - involving <code>numpy</code> functionality).</p>

<p>But let's return to your current variation.</p>

<ul>
<li><code>moves</code> list. It's better named as <strong><code>board</code></strong> (as a <em>game</em> field).<br>Instead of typing all board items it could be easily initiated with <code>board = [['1','2','3'] for _ in range(3)]</code></li>
<li><p><code>win</code> function. It sounds like <em>affirmative</em> but it's actually testing for a win.<br>Thus a better name would be <strong><code>check_win</code></strong> </p></li>
<li><p><code>set(moves[i][i] for i in range(3)) == set([letter])</code> condition. Instead of generating 2 <code>set</code> objects - use a convenient <code>all</code> function:</p>

<pre><code>all(board[i][i] == letter for i in range(3))
</code></pre></li>
<li><p><code>for</code> loop (in <code>check_win</code> function) that checks for <em>crossed</em> row can be replaced with <code>any</code> call to serve a more wide consolidation.</p></li>
<li><p>2 statements:</p>

<pre><code>print("~~~ " + letter + " WON!!! CONGRATS!!!! ~~~")
quit()
</code></pre>

<p>are duplicated across 3 different conditions. That's an explicit case for <em>Consolidate conditional expression</em> technique - we'll combine the conditions that share the same "body" with logical operator.<br>Eventually the optimized <code>check_win</code> function would look as:</p>

<pre><code>def check_win(letter):
    if any((board[i][0] == board[i][1] == board[i][2] == letter) or
            (board[0][i] == board[1][i] == board[2][i] == letter) for i in range(3)) \
            or all(board[i][i] == letter for i in range(3)) \
            or all(board[i][2 - i] == letter for i in range(3)):
        print(f"~~~ {letter} WON!!! CONGRATS!!!! ~~~")
        quit()
    if acc == 5:
        print("TIE YOU BOTH LOSE")
        quit()
</code></pre></li>
<li><p><code>playerInput</code> and <code>boardDraw</code> should be renamed to <code>player_input</code> and <code>board_draw</code> to follow naming conventions</p></li>
<li><p>printing game's board in <code>board_draw</code> function looks really sad and painful.<br>Python provides a good string formatting features.<br>Just use them, as shown below:</p>

<pre><code>def board_draw():
    board_fmt = '''
1| {} | {} | {} |
 |---+---+---|
2| {} | {} | {} |
 |---+---+---|
3| {} | {} | {} | 
    '''
    print(board_fmt.format(*[v for row in board for v in row]))

    check_win("X")
    check_win("O")
    player_input()
</code></pre></li>
</ul>
    </div>