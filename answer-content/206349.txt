<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review. This post is a mixture between review, remarks, tutorial and general guidelines. Overall, your code has two complexity issues: space complexity due to types (see "Tip: Use implicit data") and algorithmic complexity due to algorithms (see "Diagonals"). Several of your references should be <code>const</code> (see "Tip: Use <code>const Type&amp;</code> if you don't want to change the argument"), and some of your names could be chosen better.</p>

<p>Every section of this post should be readable on its own, however, some code uses declarations and types written in earlier examples, so keep that in mind.</p>

<h1>Stacks</h1>

<p>When we use a backtracking algorithm, a stack is usually used throughout its execution. In programming languages that provide function calls, there is always an implicit stack present: the function call stack. We have a caller and a callee. The caller calls the callee, and at some point, the callee either returns and hands control back to the caller, or the callee terminates the program.</p>

<p>Why is this important? Because it provides a tool for backtracking problems with limited depth: instead of an explicit stack, we can use the implicit one. So if you were to solve the N-queens problem for a limited <span class="math-container">\$N\$</span>, the use of the implicit stack would be a lot simpler. But more on that later.</p>

<h1>Types</h1>

<p>The code at hand is a mouthful. That's mostly due to the <code>std::vector&lt;std::vector&lt;int&gt;&gt;</code>. There are two issues we can find there:</p>

<ol>
<li>the <code>Board</code> is either <code>0</code> or <code>1</code>, so a smaller type is more suitable</li>
<li>the <code>Stack</code>'s elements <strong>always</strong> contain exactly two elements, so a <code>std::pair&lt;int,int&gt;</code> is more appropriate.</li>
</ol>

<p>Regardless, a simple <code>typedef</code> or <code>using</code> can make the code much easier to read:</p>

<pre><code>using board_type = std::vector&lt;std::vector&lt;int&gt;&gt;;
using stack_type = std::vector&lt;std::vector&lt;int&gt;&gt;;

bool put_in(board_type &amp;Board, stack_type &amp;Stack, int row, int col, int n);
void insert_into_stack(stack_type &amp;Stack, int row, int col);
bool check_horizontal(const stack_type &amp;Stack, int row);
bool check_vertical(const stack_type &amp;Stack, int col);
bool check_diagonal_left_to_right(const stack_type &amp;Stack, int row, int col, int n);
bool check_diagonal_right_to_left(const stack_type &amp;Stack, int row, int col, int n);
void print_board(const board_type &amp;Board);
void print_stack(const stack_type &amp;Stack);
void reset_board(board_type &amp;Board, stack_type &amp;Stack);
void reset_stack(stack_type &amp;Stack, int &amp;row, int &amp;col, int n);
</code></pre>

<p>Although both type synonyms have the same meaning, their different name already tells us that we want to use a stack or a board at certain positions. Still, <code>std::vector&lt;std::pair&lt;int,int&gt;&gt;</code> would be more fitting for the stack.</p>

<h2>Tip: Use initializer lists when possible</h2>

<p>That's obvious if we have a look at the only place where <code>Stack</code> gets new elements:</p>

<pre><code>void insert_into_stack(std::vector&lt;std::vector&lt;int&gt;&gt; &amp;Stack, int row, int col) {
    std::vector&lt;int&gt; position;
    position.reserve(2);
    position.push_back(row);
    position.push_back(col);
    Stack.push_back(position);
}
</code></pre>

<p>If we want to create a vector with two elements, a <code>std::initializer_list</code> is the right tool:</p>

<pre><code>void insert_into_stack(stack_type &amp;Stack, int row, int col) {
    const std::vector&lt;int&gt; position = {row, col};
    Stack.push_back(position);
}
</code></pre>

<p>At that point we can just skip the temporary <code>position</code> and use <code>Stack.emplace_back</code> with the list, but the compiler should generate the same code either way:</p>

<pre><code>void insert_into_stack(stack_type &amp;Stack, int row, int col) {
    Stack.emplace_back({row, col});
}
</code></pre>

<h2>Remark: Remove unused parameters</h2>

<p>Several functions have an <code>int n</code> parameter you never use. You should remove that. Also, enable compiler warnings. GCC and Clang use <code>-Wall</code>.</p>

<h2>Remark: <strong>Always</strong> use return types on functions</h2>

<p>Your <code>main</code> doesn't have a return type. Add <code>int</code>.</p>

<h2>The implicit <code>Board</code></h2>

<p>However, even with that in mind (and <code>std::pair</code>), we still carry around a lot of information with us all the time. The <code>Board</code> gets updated in every iteration, whenever we put a new queen on the board. We need that <code>Board</code> for <code>print_board</code>, right?</p>

<p>Actually, no. We can recreate a <code>Board</code> from a <code>Stack</code> whenever we want to:</p>

<pre><code>void fill_board_from_stack(board_type &amp;Board, const stack_type&amp; Stack) {
   // simple exercise
}
</code></pre>

<p>That will take at most <span class="math-container">\$\mathcal O(n^2)\$</span>. Since <code>print_board</code> will also take <span class="math-container">\$\mathcal O(n^2)\$</span>, we're not going to increase the asymptotic complexity of our program.</p>

<h2>Tip: Use <code>const Type&amp;</code> if you don't want to change the argument</h2>

<p>As you can see, I've used <code>const stack_type&amp;</code> above, as I want to make sure that my code doesn't accidentally change the <code>Stack</code>. Similarly, the <code>print_*</code> functions should also take a <code>const</code> reference:</p>

<pre><code>void print_board(const board_type &amp;Board);
void print_stack(const stack_type &amp;Stack);
</code></pre>

<p>That way the function's type already tells us that this function won't change its argument, <em>and</em> we will get a compiler error if we erroneously try to.</p>

<p>The same holds for all the <code>check_</code> functions, see declarations above.</p>

<h1>Names</h1>

<p>Throughout the range-based <code>for</code> loops, <code>it</code> and <code>s</code> get used. What's <code>it</code>? For example, what is <code>it</code> in the following loop?</p>

<pre><code>for (auto &amp;it : Board) {
    for (auto &amp;val : it) {
        std::cout &lt;&lt; val;
    }
    std::cout &lt;&lt; std::endl;
}
</code></pre>

<p>Well, it's the <code>Board</code>'s <code>row</code>. So we should call it <code>row</code>, not <code>it</code>. <code>it</code> is fine if we use <em>iterators</em>, but with range-based <code>for</code> loops, we already have a value or a reference at hand, not a raw iterator. The name <code>it</code> is therefore misleading.</p>

<p>For <code>s</code>, we can use <code>placement</code>, <code>position</code>, <code>pos</code> or even <code>queen</code>. The <code>Stack</code> can actually get renamed to <code>Placements</code> or even <code>Queens</code>, as it contains the queens' positions. The form <em>can</em> yield a name, but the name should foremost fit the contents.</p>

<p>By the way, the <code>check_</code> functions are ambiguous. If a <code>check</code> returns <code>true</code>, does that mean that the queen is safe? Or does <code>true</code> mean that the queen is threatened? A name like <code>can_place_</code>, <code>is_safe_</code> or <code>threatens_</code> is unambiguous.</p>

<h1>Algorithms and data</h1>

<p>Even with those small tips, the code will be larger than the other variants you've encountered. That's due to a small, but significant optimization that's usually applied to the board: we don't store the row. Indeed, one dimension is never stored, at all. It's already implicit in the <code>Stack</code>, if we reorder it. </p>

<h2>Tip: Use implicit data</h2>

<p>Let's take a step back from our code for a moment and just think about what <code>Stack</code> contains at the end of our algorithm. It will look like this:</p>

<pre><code>0100
0001
1000
0010

Stack = {{0, 1},
         {1, 3},
         {2, 0},
         {3, 2}};
</code></pre>

<p>As you can see, throughout the <code>Stack</code> we have the following property:</p>

<pre><code>for(int i = 0; i &lt; Stack.size(); ++i) {
    assert(i == Stack[i][0]);
}
</code></pre>

<p>But if that holds, we can just get rid of the row and use <code>using stack_type = std::vector&lt;int&gt;</code>. </p>

<h2>Diagonals</h2>

<p>That simplifies the code tremendously: <code>check_horizontal</code> can get removed completely, and <code>check_diagonal_left_to_right</code> and <code>check_diagonal_right_to_left</code> can get replaced by a single function:</p>

<pre><code>bool threatens_diagonally(const stack_type &amp;Stack, int col){
    for(int i = 0; i &lt; Stack.size(); ++i) {
        if(Stack[i] + (Stack.size() - i) == col ||
           Stack[i] - (Stack.size() - i) == col
        ){
            return true;
        }
    }
    return false;
}
</code></pre>

<p>This optimization  was also possible in your original code, though, and is easier to explain there:</p>

<pre><code>bool check_diagonal_left_to_right(const stack_type &amp; Stack, int row, int col, int n){
    for (auto &amp;s : Stack) {
        if (s[0] - row == s[1] - col){
                return true;
        }
    }
    return false;
}
</code></pre>

<p>If we have <code>x = s[0] - row</code> and <code>y = s[1] - col</code>, we can interpret <code>x</code> as the rows we need to traverse to get from <code>s</code> to the new queen, and <code>y</code> as the respective columns. If both are the same, both queens are on the same diagonal. Similarly for the other function:</p>

<pre><code>bool check_diagonal_right_to_left(const stack_type &amp; Stack, int row, int col, int n){
    for (auto &amp;s : Stack) {
        if (s[0] - row == -(s[1] - col)){
                return true;
        }
    }
    return false;
}
</code></pre>

<p>If we have <code>x = s[0] - row</code> and <code>y = -(s[1] - col)</code>, we can interpret <code>x</code> as the rows we need to traverse to get from <code>s</code> to the new queen, and <code>y</code> as the respective columns <em>in the other direction</em>. If both are the same, both queens are on the same diagonal (this time the right-to-left diagonals).</p>

<p>If we put both conditions in a single function, we end up with:</p>

<pre><code>bool threatens_diagonally(const stack_type &amp; Stack, int row, int col){
    for (auto &amp;s : Stack) {
        if (s[0] - row == s[1] - col || s[0] - row == -(s[1] - col)){
                return true;
        }
    }
    return false;
}
</code></pre>

<p>To get back to the variant with the implicit row, just remember that <code>Stack[i]</code> is the queen at <code>i, Stack[i]</code>, and <code>col</code> will be the <code>Stack.size(), col</code> queen (the row is now implicit!).</p>

<h1>The implicit stack</h1>

<p>We now come back to the first remark on stacks. If we employ all the tips above, we will end up with something like:</p>

<pre><code>int main() {
    // Board size
    int n = 10;
    int number_of_solution = 1;

    // Stack
    stack_type Stack;
    Stack.reserve(n);

    // Board
    board_type Board(n);
    for (auto &amp;it : Board)
        it.resize(n);

    for (int col = 0; col &lt; n + 1; col++) {
        if (col == n) {
            // ! IMPORTANT
            // * Ends when row is 0 and col is n!
            if (Stack.empty()) {
                return 0;
            }
            // * End condition
            // ! IMPORTANT

            Board[Stack[Stack.size() - 1][0]][Stack.last()] = 0;
            col = Stack[Stack.size() - 1][1];
            Stack.pop_back();

            continue;
        }
        if (threatens_vertically(Stack, col) || threatens_diagonally(Stack, col)) {
            continue;
        }

        if (put_in(Board, Stack, col)) {
            if (Stack.size() == n) {
                std::cout &lt;&lt; std::endl;
                std::cout &lt;&lt; number_of_solution++ &lt;&lt; std::endl;
                print_board(Board);
                reset_board(Board, Stack);
                reset_stack(Stack, col);
                continue;
            }
            break;
        }
    }
    print_board(Board);

    return 0;
}
</code></pre>

<p>Remember, the <code>row</code> is implicit, so we don't have to carry it with us. Before I present an alternative, let's go back to the backtracking algorithm. For the sake of simplicity, let's use pseudo-code:</p>

<pre><code># That's actually almost the whole valid python solution.
def solve(n, queens):
    if len(queens) == n:
        print(queens)
    for i in range(n):
        if not threatened(queens, i):
            solve(n, queens + [i])
</code></pre>

<p>So let's try to write that in C++:</p>

<pre><code>bool threatened(const stack_type&amp; queens, int col){
    // exercise
}

void solve(int N, stack_type &amp; queens) {
    if(queens.size() == N) {
        print_stack(queens);
    }
    for(int i = 0; i &lt; N; ++i) {
        if(not threatened(queens, i)) {
            queens.push_back(i);
            solve(N, queens);
            queens.pop_back();
        }
    }
}
</code></pre>

<p>It's a little bit longer, but that's the complete C++ code necessary to solve the problem, we just need to call <code>solve</code> on an empty initial stack. Every recursive function can get rewritten into a non-recursive one if we use an explicit stack, however, we will end up with a function that's similar to your original one, so that's left as an exercise.</p>
    </div>