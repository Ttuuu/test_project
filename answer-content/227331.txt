<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than extract the Search input in to a different component I would suggest you keep the input and list in the same component.</p>

<p>This way when printing the list you can highlight the search term directly.</p>

<pre><code>const HighlightableList = (props) =&gt; {
  const [searchTerm, setSearchTerm] = React.useState("");
  const regex = new RegExp(searchTerm, "gi");

  const items = props.terms.map((term, index) =&gt; (
      &lt;div
        className="label"
        key={index}
        dangerouslySetInnerHTML={{
          __html: term.replace(regex, match =&gt; `&lt;span class="highlight"&gt;${match}&lt;/span&gt;`)
        }}
      /&gt;
    ));

    return (
      &lt;&gt;
        &lt;input 
          type="text"
          value={searchTerm}
          placeholder="Search Labels"
          onChange={event =&gt; setSearchTerm(event.target.value)}
        /&gt;
        &lt;div className="label-container"&gt;
          {items}
        &lt;/div&gt;
      &lt;/&gt;
    );
}
</code></pre>

<p><a href="https://codepen.io/rockingskier/pen/YzKrGNR" rel="nofollow noreferrer">https://codepen.io/rockingskier/pen/YzKrGNR</a></p>

<p><em>Side notes:</em></p>

<p>Don't make each list item a <code>label</code>. From <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label" rel="nofollow noreferrer">MDN</a></p>

<blockquote>
  <p>The HTML  element represents a caption for an item in a user interface.</p>
</blockquote>

<p>That would suggest that each item in the list has its own user input.  In fact there is only one input (search) and that should really have a label of its own.  I'll let you implement that.</p>

<p>Additionally due the the "list-iness" of the data I have converted it to a <code>ul</code> with each item as an <code>li</code>.</p>
    </div>