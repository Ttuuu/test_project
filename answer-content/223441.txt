<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your code.</p>

<h2>Let the compiler write default functions</h2>

<p>The <code>Tpulse</code> destructor literally does nothing and is what the compiler would have generated anyway.  To indicate that, eliminate the function in <code>Tpulse.cpp</code> and declare it as <code>default</code> in <code>Tpulse.h</code>:</p>

<pre><code>virtual ~Tpulse() = default;
</code></pre>

<h2>If you define one special member function, define them all</h2>

<p>Sometimes called the "rule of five," if you delete or define any of the <em>special member functions</em>, you should delete or define them all. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c21-if-you-define-or-delete-any-default-operation-define-or-delete-them-all" rel="nofollow noreferrer">C.21</a></p>

<h2>Use <code>override</code> where appropriate</h2>

<p>If you're intending to override a virtual base function, you should explicitly say so to help catch errors.  In this case it's the <code>Update</code> function which should be marked <code>override</code>:</p>

<pre><code>void Update() override;
</code></pre>

<p>See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c128-virtual-functions-should-specify-exactly-one-of-virtual-override-or-final" rel="nofollow noreferrer">C.128</a>  Also note that unlike in C, <code>Update(void)</code> and <code>Update()</code> mean the same thing in C++.  I prefer the shorter form, but sometimes coding guidelines (often written by or for C programmers) require the long form.</p>

<h2>Use namespaces consistently</h2>

<p>In some places within <code>Tpulse::Update</code>, <code>TestBitClr()</code> is written with a <code>Utils::</code> namespace prefix and in other place not.  This is inconsistent and confusing to the reader who may be left wondering if there are two versions.  Instead, I'd recommend either always using the explicit namespace or putting a <code>using namespace Util;</code> <em>within</em> the <code>Update</code> function.</p>

<h2>Prefer <code>std::</code> namespace versions of functions and types</h2>

<p>Rather than <code>uint32_t</code>, I'd recommend using <code>std::uint32_t</code> and explicitly adding <code>#include &lt;cstdint&gt;</code>.  This makes it clear which type you mean and will be robust even if someone later introduces a local <code>uint32_t</code> which does, unfortunately, sometimes happen in embedded systems projects.</p>

<h2>Use parameter names in function templates</h2>

<p>It's best to make the interface clear and explicit, and with a function call like this:</p>

<pre><code>Tpulse(uint32_t*, uint32_t, uint32_t, uint32_t);
</code></pre>

<p>It's not clear what the various <code>uint32_t</code> values represent.  If they were written like this, it would be better:</p>

<pre><code>Tpulse(std::uint32_t *bitsArray, std::uint32_t input, std::uint32_t output, std::uint32_t pulseTime):
</code></pre>

<p>See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#i4-make-interfaces-precisely-and-strongly-typed" rel="nofollow noreferrer">I.4</a>.</p>

<h2>Think about the possible correct use of <code>volatile</code></h2>

<p>In embedded systems we often encounter one of the few <em>correct</em> uses of <code>volatile</code>.  In this case, I'm wondering about the <code>m_BitsArray</code> pointer.  If, as I suspect, this is memory-mapped I/O, then this "memory" is not really solely under the control of the C++ environment since external asynchronous signals may cause those bits to change outside program control.  For that reason, it may be that it should be declared as <code>volatile</code> to indicate this fact.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rconc-volatile2" rel="nofollow noreferrer">CP.200</a>.  On the other hand, if this array might also be use by other threads within your program, you will need to add explicit synchronization of some kind.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rconc-volatile" rel="nofollow noreferrer">CP.8</a></p>

<h2>Use <code>const</code> where practical</h2>

<p>It appears to me that <code>m_Input</code> and <code>m_Output</code> should never change within the lifetime of a <code>Tpulse</code> object, so I'd suggest that both of those member data functions should be declared <code>const</code>.  The same is probably true of <code>m_PulseTime</code>.</p>

<h2>Minimize the interface</h2>

<p>It seems to me that the <code>Tpulse</code> class could eliminate <code>m_ElapsedTime</code> and <code>m_CurrentTime</code> in favor of only using <code>m_StartTime</code> and perhaps a <code>bool running</code>.  If you need other named variables within <code>Update</code> they can be local.</p>

<h2>Use helper functions</h2>

<p>The code could be much simpler to read and understand with the use of a few <code>private</code> helper functions:</p>

<pre><code>bool LogicBlocks::Tpulse::input() const {
    return Utils::TestBitSet(m_BitsArray, m_Input);
}

bool LogicBlocks::Tpulse::output(bool value) {
    if (value) {
        Utils::SetBit(m_BitsArray, m_Output);
    } else {
        Utils::ClrBit(m_BitsArray, m_Output);
    }
    return value;
}
</code></pre>

<h2>Simplify the code</h2>

<p>The <code>Update</code> code is a little more complex than it needs to be.  Essentially, either the timer is running and we do timer things, or it's not yet running, but we receive an input that tells us to start it.  The only other slightly tricky thing is that we don't allow the timer to restart until it's expired <strong>and</strong> the input is low.</p>

<p>So we can simplify the code, using a <code>bool running</code> member variable and the helper functions shown above:</p>

<pre><code>void LogicBlocks::Tpulse::Update(){
    if (running) {  
        auto elapsed = Utils::GetTick() - m_StartTime;
        if (elapsed &gt;= m_PulseTime) {
            output(false);
            running = input();
        }
    } else if (input()) {
        m_StartTime = Utils::GetTick();
        running = output(true);
    } 
}
</code></pre>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.</p>

<p>In this case I wrote this <code>main</code> to do some testing:</p>

<pre><code>#include "Tpulse.h"
#include "Utils.h"
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;chrono&gt;
#include &lt;thread&gt;

int main() {
    using namespace Utils;
    using namespace std::chrono_literals;
    uint32_t reg{0};
    constexpr uint32_t inbit{0x80};
    constexpr uint32_t outbit{0x2};
    LogicBlocks::Tpulse tp(&amp;reg, inbit, outbit, 5);
    for (int i=0; i &lt; 20; ++i) {
        std::this_thread::sleep_for(1s);
        if (i == 2 || i == 9) {
            SetBit(&amp;reg, inbit);
        } else if (i == 4 || i == 16) {
            ClrBit(&amp;reg, inbit);
        }
        std::cout &lt;&lt; std::dec &lt;&lt; "t = " &lt;&lt; i &lt;&lt; ", reg = 0x" &lt;&lt; std::hex &lt;&lt; reg;
        tp.Update();
        std::cout &lt;&lt; ", updated to 0x" &lt;&lt; reg &lt;&lt; '\n';
    }
}
</code></pre>

<p>Here's the output:</p>

<pre><code>t = 0, reg = 0x0, updated to 0x0
t = 1, reg = 0x0, updated to 0x0
t = 2, reg = 0x80, updated to 0x82
t = 3, reg = 0x82, updated to 0x82
t = 4, reg = 0x2, updated to 0x2
t = 5, reg = 0x2, updated to 0x2
t = 6, reg = 0x2, updated to 0x2
t = 7, reg = 0x2, updated to 0x0
t = 8, reg = 0x0, updated to 0x0
t = 9, reg = 0x80, updated to 0x82
t = 10, reg = 0x82, updated to 0x82
t = 11, reg = 0x82, updated to 0x82
t = 12, reg = 0x82, updated to 0x82
t = 13, reg = 0x82, updated to 0x82
t = 14, reg = 0x82, updated to 0x80
t = 15, reg = 0x80, updated to 0x80
t = 16, reg = 0x0, updated to 0x0
t = 17, reg = 0x0, updated to 0x0
t = 18, reg = 0x0, updated to 0x0
t = 19, reg = 0x0, updated to 0x0
</code></pre>
    </div>