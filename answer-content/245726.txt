<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Answers to your questions</h1>
<blockquote>
<p>Am I causing any memory leaks, and is there a better, safer way to do things?</p>
</blockquote>
<p>Yes, see for example your second question. A safer way is to use something like <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" rel="nofollow noreferrer"><code>std::unique_ptr</code></a> to manage pointers for you.</p>
<blockquote>
<p>In remove_front(), should I set head to nullptr, or should I delete it instead?</p>
</blockquote>
<p>You should delete it of course. If you just set <code>head</code> to <code>nullptr</code>, the memory for the head node is still allocated.</p>
<h1>Avoid using names that start with an underscore</h1>
<p>Names that start with underscores are reserved for the standard library. There are <a href="https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">some more specific rules</a>, but in general it is best to avoid them completely. You can safely append an underscore to the end of a name though.</p>
<p>On the other hand, while you have <code>_length</code>, <code>head</code> is written without an underscore. If you are not consistent in marking private variables with an underscore, there is not much point to it at all.</p>
<h1>Flawed logic in <code>remove(int index)</code></h1>
<p>There is an issue with the <code>for</code>-loop in <code>remove(int index)</code>: you are moving the head pointer instead of <code>node_ptr</code>. In fact you are not using <code>node_ptr</code> at all after initializing it. The compiler should have given you a warning about this (be sure to enable compiler warnings and fix them).</p>
<p>To make this work correctly, even when removing the head node, you should use an extra layer of redirection: you want a pointer to the pointer you need to update, like so:</p>
<pre><code>Node **node_ptr = &amp;head;           // node_ptr is pointing to the variable `head`
for (int a = 0; a &lt; index - 1; ++a)
    node_ptr = &amp;(*node_ptr)-&gt;next; // node_ptr is updated to point to some node's `next` variable

Node* temp = *node_ptr;            // get the actual Node pointer to
*node_ptr = (*node_ptr)-&gt;next;     // update `head` or a `next` to skip one Node
delete temp;                       // delete the target Node
</code></pre>
<p>Once you grasp this you've become a two-star programmer!</p>
<h1>Unnecessary code duplication</h1>
<p>You have three different functions for removing an element, but they all do mostly the same. In fact, the first one, <code>remove(int index)</code>, does everything you need. You don't need to treat <code>index == 0</code> as a special case, the code will work correctly anyway. You can make <code>remove_front()</code> and <code>remove_back()</code> call the generic <code>remove()</code> function:</p>
<pre><code>void remove(int index)
{
    if (index &lt; 0 || index &gt;= _length)
        throw "index is out of range";

    Node **node_ptr = &amp;head;
    for (int a = 0; a &lt; index - 1; ++a)
        node_ptr = &amp;(*node_ptr)-&gt;next;

    Node* temp = *node_ptr;
    *node_ptr = (*node_ptr)-&gt;next;
    delete temp;

    _length -= 1;
}

void remove_front()
{
    remove(0);
}

void remove_back()
{
    remove(_length - 1);
}
</code></pre>
    </div>