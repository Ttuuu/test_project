<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design</h1>

<p>It's relatively simple to create a double linked list!</p>

<hr>

<p>Some things you should think about some more:</p>

<ol>
<li>Please put your code into a namespace. Do you think that <code>SinglyLinkedList</code> is a very unique name in the global scope?</li>
<li>You need to look into const correctness.</li>
<li>You need to look into move semantics.</li>
</ol>

<hr>

<p>Major Bug.</p>

<p>You have not implemented the rule of three (or five). When a class contains an owned pointer the compiler generated copy constructor, copy assignment operator and destructor are not going to work correctly.</p>

<p>Your <code>SinglyLinkedList</code> contains the owned pointer: <code>head</code>. An owned pointer is one that you have taken responsibility for the lifespan of (and are thus going to call delete on it when it the object is destroyed.</p>

<pre><code>{
     SinglyLinkedList&lt;int&gt;    list1;
     list1.addFirst(1);

     SinglyLinkedList&lt;int&gt;    list2(list1);
}
// This code is broken as you have a double delete.
</code></pre>

<hr>

<p>Upgrade you need to do.</p>

<p>The standard library defines things called concepts. A concept is a set of properties that a class has. One of the big concepts of the standard is the concept of a "Container" (of which a singly linked list is). Ao you should probably make your list "Container" compliant.</p>

<h1>Code Review</h1>

<p>I hate useless comments.</p>

<pre><code>    /** BEGIN NESTED NODE CLASS **/
    class Node {
</code></pre>

<p>That counts as a useless comment.</p>

<hr>

<p>OK good start.</p>

<pre><code>        Node(Node* n, const E&amp; d) : data(d), next(n) {}   ;
                 // Not Needed                           ^^^
</code></pre>

<p>But it does mean that you are required to copy the object into the list. Modern C++ has the concept of move semantics. So you should allow for moving the object into the list.</p>

<pre><code>        Node(Node* n, E&amp;&amp; d) : data(std::move(d)), next(n) {}
</code></pre>

<p>Also you should allow the object to be constructed in place:</p>

<pre><code>        template&lt;typename... Args&gt;
        Node(Node* n, Args&amp;&amp;... args)
            : data(std::forward&lt;Args&gt;(args)...)
            , next(n)
        {}
</code></pre>

<hr>

<p>Here you get a reference to the object.<br>
That's fine.</p>

<pre><code>        E&amp; getData() { return data; }
</code></pre>

<p>But what happens if your list has been passed by const reference to a function. Now you can no longer accesses the data as you can't get a const reference to the data.</p>

<pre><code>        E const&amp; getData() const {return data;}
</code></pre>

<p>Its a bit strange that you only return reference from the node. But you return only const references from the list?</p>

<pre><code>    const E&amp; first() const;
    const E&amp; last() const;
</code></pre>

<hr>

<p>I actually hate your get/set mentatility here. I see no need for it inside the node object itself.</p>

<pre><code>        void setNext(Node* n) { next = n; }
</code></pre>

<hr>

<p>That's fine.</p>

<pre><code>    void print() const;
</code></pre>

<p>But two things to note.</p>

<ol>
<li>There is more streams than the <code>std::cout</code> so allow this to be pramertized.</li>
<li><p>The normal way of streaming is via the output operator: <code>operator&lt;&lt;()</code></p>

<pre><code>void print(std::ostream&amp; stream = std::cout);
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, SinglyLinkedList const&amp; data)
{
    data.print(str);
    return str;
}
</code></pre></li>
</ol>

<hr>
    </div>