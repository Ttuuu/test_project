<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your </p>

<pre><code>private static int TryDirection(int[][] grid, int x, int y, Queue&lt;int[]&gt; Q, int countFreshOranges)
</code></pre>

<p>method I would invert the logic: If the given coordinate is valid and the field contains a fresh orange, then do something:</p>

<pre><code>private static int TryDirection(int[][] grid, int x, int y, Queue&lt;int[]&gt; Q, int countFreshOranges)
{
    if (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; grid.Length &amp;&amp; y &lt; grid[0].Length &amp;&amp; grid[x][y] == 1)
    {
        grid[x][y] = 2;
        Q.Enqueue(new int[] { x, y });
        countFreshOranges--;
    }
    return countFreshOranges;
}
</code></pre>

<p>That is shorter and easier to understand.</p>

<p>The while loop in</p>

<pre><code>public static int OrangesRotting(int[][] grid)
</code></pre>

<p>does one iteration more than is necessary: When all fresh oranges have rotten, another loop iteration is needed to empty the queue. That is also the reason why <code>count - 1</code> is returned in the success case. It becomes clearer if both <code>countFreshOranges</code> and the queue are checked in the while condition:</p>

<pre><code>int count = 0;
while (countFreshOranges &gt; 0 &amp;&amp; Q.Count &gt; 0)
{
    count++;
    // ...
}
return countFreshOranges == 0 ? count : -1;
</code></pre>

<p>That makes also the preceding check</p>

<pre><code>if (countFreshOranges == 0)
{
    return 0;
}
</code></pre>

<p>obsolete.</p>

<p>Some more thoughts:</p>

<ul>
<li>Use an <code>enum</code> type (with values <code>Free</code>, <code>Fresh</code> and <code>Rotten</code>) instead of the integer constants <code>0</code>, <code>1</code>, <code>2</code>, so that the code becomes more self-explaining.</li>
<li>Instead of pushing <code>int[]</code> onto the queue, a tuple with two elements, or a <code>struct</code> with two members <code>x</code> and <code>y</code> would be sufficient.</li>
<li><code>Q</code> is too short as a variable name, it does not tell what the variable is used for.</li>
</ul>
    </div>