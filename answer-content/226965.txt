<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Python, and welcome to Code Review.</p>

<h2>Classes</h2>

<p>An instance of a class, where only one method is ever called, is not a good class.  Instead, use functions.</p>

<pre><code>a = input("Enter a string: ")
vowel_count(a)
constant_count(a)
</code></pre>

<h2>Class Constants &amp; Members</h2>

<p>If you do create a class, and that class has some global constant data, store that on the <code>class</code> itself, not on the instances of the <code>class</code>.</p>

<p>Constants should have <code>UPPERCASE_NAMES</code>, to distinguish them from non-constant data.  Moreover, if the data is constant, where possible use non-mutable objects, such as <code>tuple</code> (eg, <code>(..., ..., ...)</code>) over <code>list</code> (eg, <code>[..., ..., ...]</code>).</p>

<p>Non-public members of a class should begin with a single underscore.</p>

<pre><code>class CntVowels:

    VOWELS = ("a", "e", "i", "o", "u")

    def __init__(self, string):
        self._string = string

    # ...
</code></pre>

<h2>Eschew <code>.lower()</code></h2>

<p>When attempting to compare strings (or characters) case-insensitively, use <code>.casefold()</code> instead of <code>.lower()</code>.  This properly handles many additional oddities, such as the German <code>ß</code> which is equivalent to <code>ss</code>.</p>

<h2><code>x in y</code></h2>

<p>Testing for existence of an item in a container is easily done with the <code>in</code> operator.  For example, this code:</p>

<pre><code>for vowel in vowels:
    if letter == vowel:
        counter += 1
</code></pre>

<p>can be re-written more efficiently as:</p>

<pre><code>if letter in vowels:
    count += 1
</code></pre>

<h2>A String is a Container</h2>

<p>It could even be re-written as:</p>

<pre><code>if letter in "aeiou":
    count += 1
</code></pre>

<p>since a string is simply a container of letters.</p>

<h2>Non-Vowels are not necessarily Consonants</h2>

<p>Many characters which are not vowels are also not consonants, such as <code>4</code>, <code>&amp;</code>, <code></code> and <code>.</code> to name a few.</p>

<h2>Avoid Name Shadowing</h2>

<p><code>string</code> is not a good variable name, because a module named <code>string</code> exists, and can be imported, and doing so results in the meaning of <code>string</code> changing depending on what is in scope.</p>

<p>It is even reasonable that you’d <code>import string</code> in this program, to get convenient access to all of the <code>string.ascii_lowercase</code> letters.</p>
    </div>