<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, the code is not compiling:</p>
<blockquote>
:36:46: error: invalid use of non-static data member 'Size'
    void Push(T Filler, unsigned int Index = Size);
                                             ^~~~ 
</blockquote>
<p>=&gt; Size is a member variable of the class, you cannot have it as a default argument. If you want to have <code>Push</code> with only one method, you'd have to create a separate overload for that one:</p>
<p>void Push(T Filler)
{
Push(Filler,Size); // now possible, since we are in class-scope.
}</p>
<blockquote>
:206:9: error: 'break' statement not in loop or switch statement
        break;
</blockquote>
<p>=&gt; change <code>break</code> to <code>return</code>, since I guess you want to exit the method.</p>
<hr>
<p>Ignoring that and before digging in to the code, I would like to say something about <em>naming</em>.</p>
<p>I will take <code>Node</code> as an example:</p>
<pre><code>template&lt;typename T&gt;
struct Node
{
    T Data;
    Node* NextPtr = nullptr;
    Node() {
        NextPtr = nullptr;
    }
    Node(T Filler, Node* NextPtrAr) {
        Data = Filler;
        NextPtr = NextPtrAr;
    }
    void operator =(Node NAr) {
        Data = NAr.Data;
        NextPtr = NAr.NextPtr;
    }
};
</code></pre>
<p>The type <code>Node</code> has the same naming convention as <code>NodePtr</code>, a variable. Thus, reading code without context, I would not know whether, for example, Data is a <em>type</em> or a <em>variable</em>. It's good practice to separate them. You can, for example, have <strong>CamelCase</strong> for types, and <strong>camelCase</strong> for variables. It's usually also good to note private variables with some notation, this can be prefixing with <em>m_</em> or suffixing with <em>_</em>.</p>
<p>Updated naming gives:</p>
<pre><code>template&lt;typename T&gt;
struct Node
{
    T data;
    Node* nextPtr = nullptr;
    Node() {
        nextPtr = nullptr;
    }
    Node(T filler, Node* nextPtrAr) {
        data = filler;
        nextPtr = nextPtrAr;
    }
    void operator =(Node nAr) {
        Data = nAr.data;
        nextPtr = NAr.nextPtr;
    }
};
</code></pre>
<p>Look how even the syntax highlighter works better - now not everything has the color of a type.</p>
<hr>
<p>Since we already are looking at <code>Node</code>, we can tweak the constructors a bit. <code>nextPtr</code> is already (correctly) default member initialized to <code>nullptr</code>, so we do not need an explicit default constructor doing the same. Actually, you do not need <em>any</em> of your constructors in this case - the compiler will create all of them for you.</p>
<pre><code>template&lt;typename T&gt;
struct Node
{
    T data;
    Node* nextPtr = nullptr;
}
</code></pre>
<p>is thus <em>fine</em>.</p>
<p>Letting the compiler do it's job is usually better. Now we don't have to deal with <code>operator=</code> having wrong return type (it should return <code>Node&amp;</code> and not <code>void</code>), and construction should be done in the <em>initializer list</em> to avoid double initialization. <code>Node(T filler, Node* nextPtrAr) : data(filler), nextPtr(nextPtrAr) {}</code>, for example. The problem is that once you are in the body of the constructor, the object is already constructed - so changing the variables there <em>reinitializes</em> them.</p>
<hr>
<p>Now to the singly linked list.</p>
<p>There is already a singly linked list in the STL: <a href="https://de.cppreference.com/w/cpp/container/forward_list" rel="nofollow noreferrer">https://de.cppreference.com/w/cpp/container/forward_list</a></p>
<p>Not to put you off writing your own, but it can be instructive to read the API. Interestingly, the list only has one access operator <code>front</code>, that gives you the first element. If you want to get the rest of the element, you have to iterate over them (by using the <code>std::forward_list::iterator</code>). Linked lists are usually used for the cases, where we only want to know the head (priority queues, stacks) or iterate over them blindly.</p>
<p>The <code>LinkedList</code>, as you have it, has a <em>random access</em> operator <code>Node&lt;T&gt;&amp; operator[](unsigned int Index);</code>. But a random access operator is usually provided to containers that actually support random access. If I used operator[], I would assume that it has a constant complexity (O(1)), but for a linked list, it is linear (O(N)), since we have to iterate through the list to get the element. <code>NodeAt</code> is a better name for the method, although even better would be to provide an iterator.
=&gt; remove <em>operator[]</em>.</p>
<p>You are using <em>NodeAt</em> yourself in a for-loop:</p>
<pre><code>for (int i = 1; i &lt; Size - 1; i++)
{
    delete&amp; NodeAt(i);
}
</code></pre>
<p>This essentially gives you a complexity of O(N^2), which is unnecessary. And actually, I have to admit I do not understand why it is working. When you delete the Node, how you you in the next iteration iterate to the node that the destructed object was pointing to? Better would probably be to <code>pop</code> and delete until list is empty.</p>
<p>I will stop with the review here. Hopefully you have some points you can take with you.</p>
    </div>