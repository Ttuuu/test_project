<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, again, it's a very good approach. You are going in the right direction. Such a separation is a cornerstone of the data manipulation.</p>

<p>Regarding the particular implementation,</p>

<p>for the DB class I would suggest 2 things</p>

<ul>
<li>I don't think this approach with arrays in $params is really needed. I bet you made it just because PDO has such parameters, but not ouf of some real life necessity. Am I right? I would leave just <code>$stmt-&gt;execute($params);</code>, at least untill there will be a real case where you would need such a precise binding.</li>
<li>for some reason you removed a very important method, <code>getConnection()</code>. You must keep it in your class until you implement every method and property supported by PDO. Until then use <code>getConnection()</code> to access them. </li>
</ul>

<p>Now to the most interesting part, the data mapper. </p>

<p>Definitely, I would go for the second approach. Simply because it is <em>much simpler</em> and explicit. Just look at the code for the first approach? It's a mess. If I learned anything during my career is that the best code is a code that is <em>easier to support</em>. And of course the simpler the code the easier the support. Besides, <em>the less code you have, the less errors it contain.</em> </p>

<p>Besides, the latter approach is more explicit. You can get the idea of the data structure by just looking at the class. It helps a lot.</p>

<blockquote>
  <p>Hint: If you want some automation, you can use your database sniffer for a <em>code generator</em>, just like all major frameworks do: they don't use it for the Mapper directly, but use it to create Entity classes out of the database structure. </p>
</blockquote>

<p>So, in the end I would get rid of this clumsy automation and leave only action methods:</p>

<pre><code>abstract class BaseDataMapper
{
    protected $db;
    protected $table;
    protected $_primary = 'id';
    protected $_fillable = [];

    public function __construct(DB $db)
    {
        $this-&gt;db = $db;
        if (!$this-&gt;table) {
            throw new Exception("Table name is not defined");
        }
    }
    public function findById($id, $mode = PDO::FETCH_ASSOC)
    {
        $sql = "SELECT * FROM `$this-&gt;table` WHERE `$this-&gt;_primary` = ?";
        return $this-&gt;db-&gt;run($sql, [$id])-&gt;fetch($mode);
    }
    public function insert($data, $insertPk = false)
    {
        if (!insertPk) unset($data[$this-&gt;_primary]);
        $dataNames = array_keys($data);
        if (array_diff($dataNames, $this-&gt;_fillable)) {
            throw new Exception("Disallowed field name in the insert data");
        }
        $fieldsStr = "`".implode("`, `", $dataNames)."`";
        $valuesStr = str_repeat('?,', count($data) - 1) . '?';
        $sql = "INSERT INTO {$this-&gt;table} ({$fieldsStr}) VALUES ({$valuesStr})";
        $this-&gt;db-&gt;run($sql, array_values($data));
    }
}
</code></pre>

<p>As you can see, I also removed a lot of code. </p>

<ul>
<li>it makes sense to check the table only once</li>
<li>I would make the primary key business a local affair for the insert method</li>
<li>I would rather check whether $data contains illegal fields and fail explicitly than siletntly ignore them</li>
<li>there are simpler ways to create a prepared INSERT query</li>
</ul>

<p>Now this mapper could be used with the UserMapper class you posted in your question.</p>

<pre><code>class UserMapper extends BaseDataMapper
{
    protected $table = 'users';

    protected $_fillable = [
        'firstname',
        'lastname',
        'age',
        'email',
    ];

    public function test(){
        // do something
    }
}
</code></pre>

<p>One final note: this mapper class works with arrays, whereas Data Mappers are usually deal with classes. It means a Data Mapper class is a sister class for a Data class (User), and therefore return (and accept) an object rather than an array. But it would be a different story. </p>
    </div>