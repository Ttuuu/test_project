<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To optimise your algorithm we want to remove the most costly operations, which are the loops.</p>

<p>At the moment your algorithm:</p>

<ol>
<li>Goes through the list of pawns, adds it to the safe pawn list if it is safe</li>
<li>Goes through the list of pawns <strong><em>again</em></strong>, adding it to row_numbers</li>
<li>Goes through row_numbers, to find the lowest row index</li>
<li>Goes through the lowest row and removes the pawns from the safe list</li>
</ol>

<p>Here you can see you have 4 very costly operations. Let's try and reduce this as much as we can, starting with trying to solve the problem with only 1 loop.</p>

<p>Looking at your problem, steps 2, 3, and 4, are all redundant. The pawns in the bottom row would've already been accounted for by step 1. This is because to be safe, you must have a pawn down-left or down-right of it. All pawns in the bottom row do not meet this condition, so are guaranteed <strong>not</strong> to be on the safe list.</p>

<p>This means that the solution can be solved using only 1 loop.</p>

<p>Now let's try to optimise it further.</p>

<p>Storing pawns in the new list and counting them is a costly loop operation, so we must question whether we can improve on this next. The answer is yes, we don't need to store the safe pawns at all. Instead, we can use an integer to store the number of safe pawns, starting 0. If another safe pawn is found, add 1. Return this number at the end of the algorithm.</p>

<p>This means that a more optimal solution to solve the problem with only one loop is:</p>

<p><strong>Go through the list of pawns, for each one check whether there is one down-left or down-right of it, and add 1 to the safe count if so. Return the safe count</strong></p>
    </div>