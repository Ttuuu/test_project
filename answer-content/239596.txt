<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you are doing sounds reasonable overall.</p>

<p>It's good that you are using F-strings:</p>

<pre><code>nmoPag = input(f"There are {noPag} number of pages. If you want to scrape all of them write 'Max' else write number of pages you wish to scrape: ")
</code></pre>

<p>But there are many other places where you don't eg:</p>

<pre><code>print('Your job in '+jobL+' as a '+ jobT.text.strip()+
                    '.\nHere is a quick summary of your job here: '+
                        jobS+'\nLink for more information and application for the job - https://indeed.com'+link,
</code></pre>

<p>So I would upgrade the rest of the code for more consistency and better readability :)</p>

<p><strong>Consistency</strong>: you are mixing lower case and upper case in some variable names eg <code>jobName</code> vs <code>place</code>. Remember that variable names are <strong>case-sensitive</strong> in Python. The practice could be dangerous and confusing. Imagine that you have jobName and jobname, it's two variables that may be assigned different values.</p>

<p>There is <strong>redundancy</strong> in the use of functions, for example this bit of code is repeated twice:</p>

<pre><code>jobT.text.strip()
</code></pre>

<p>Don't repeat yourself, just assign the result of <code>jobT.text.strip()</code> to a variable once, and reuse it.</p>

<p>More repetition: <code>www.indeed.com</code> is hardcoded 3 times. Define a global variable for the root URL, then add the query string parameters as required.</p>

<p>With the <code>urllib</code> library you could take advantage of the URI-building functions that are available to you. See <a href="http://www.compciv.org/guides/python/how-tos/creating-proper-url-query-strings/" rel="nofollow noreferrer">Creating URL query strings in Python</a>. Tip: if you want to build URIs but don't fire them immediately, you can also use <a href="https://requests.kennethreitz.org/en/master/user/advanced/#prepared-requests" rel="nofollow noreferrer">prepared requests</a>.</p>

<p>Although in the present case, the site does not use classic query string parameters separated with a <code>&amp;</code>. So you can instead use an F-string, again, with sanitized variable values:</p>

<pre><code>url = f"https://www.indeed.com/q-{jobName}-l-{place}-jobs.html"
</code></pre>

<p>Note regarding user input: the most obvious is to check that the input is not empty. Always trim the input too, because some people might copy-paste text with extra tabs or spaces (think Excel). Maybe you could use a regex to replace multiple occurrences of whitespace with a single hyphen.</p>

<p>I would also add more checks to make sure that all the DOM elements you are expecting were found - because a website is subject to change at any time. When that happens, the code must alert you.</p>

<p>Finally, a quality script should have <strong>exception handling</strong> (10 lines of code would suffice). Catch exceptions always and log the full details to a file. This will help you a lot with debugging and troubleshooting.</p>

<p>As your code is on Github, some people might want to use it. If they have problems with it, it would be good if they could attach a log in their bug report, so that you get better insight into the error.</p>

<p>Since you are scraping a website, all sorts of errors will happen often: DNS resolution errors, timeouts, requests denied etc. Your script should handle those errors gracefully.</p>
    </div>