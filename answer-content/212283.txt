<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To tell you truth, this is not OOP at all. For the usage example like this, you don't actually need Posts class. You can do it with either raw PDO or a good Database class, to which selectPosts() and selectSingle() actually belong.</p>

<p>With OOP, the usage example would be like</p>

<pre><code>$posts = new Posts();
foreach($posts-&gt;selectByIdBiggerThan(6) as $post) {
    echo $post['id']. ', ';
}
</code></pre>

<p>so all internal workings being encapsulated in a class method. Which would look like</p>

<pre><code>public function selectByIdBiggerThan($id) {
    $query = "SELECT * FROM posts WHERE id &gt; ?";
    return $this-&gt;db-&gt;selectAll($query, [$id]));
}
</code></pre>

<p>and selectAll(), like it was said above, should belong to a database class, as there is <strong>absolutely nothing specific to Posts in this function</strong>. It is rather a generic function to run any query.</p>

<p>You may also notice that the code in these functions is almost identical, which is directly opposite to the purpose of OOP. So you should make a generic function to run a query that can be then used to fetch the actual result</p>

<pre><code>public function run($sql, $args = [])
{
    if (!$args)
    {
         return $this-&gt;query($sql);
    }
    $stmt = $this-&gt;pdo-&gt;prepare($sql);
    $stmt-&gt;execute($args);
    return $stmt;
}
public function selectAll($sql, $params = []) {
    return $this-&gt;run($sql, $params)-&gt;fetchAll();
}
public function selectSingle($sql, $params = []) {
    return $this-&gt;run($sql, $params)-&gt;fetch();
}
</code></pre>

<p>There are other issues with your database class, that are pretty common, so I recommend you to read my article, <a href="https://phpdelusions.net/pdo/common_mistakes" rel="nofollow noreferrer">Your first database wrapper's childhood diseases</a>, you can learn a lot from it.</p>

<p>And the most global problem among them is that your Post class extends Database class. You can read in the article why it is so, and then make your Posts class accept a Database class instance as a <strong>constructor parameter</strong>, that will assign it to a class variable.</p>
    </div>