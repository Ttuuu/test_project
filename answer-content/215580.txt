<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You set a precedence that your names are poorly chosen, and don't mean what you've selected. And so they make your code hard to read.</p>

<p>Pick one <code>id</code> or <code>name</code>. Looking at your code <code>id</code>/<code>name</code> is an int, and so why would you ever call it name?</p>

<p><code>status</code> is a bool (and also called <code>active</code>), but a persons status can be a wide verity of things. Is it relationship-status - Single, married, looking? But that's three states, and you've used a bool...</p>

<p><code>my_partner</code> has the useless prefix <code>my_</code>. And makes your code a little harder to read at times:</p>

<pre><code>self.my_partner.my_partner
# vs
self.partner.partner
</code></pre>

<p>You have one function called <code>match</code> and another <code>divorce</code>. Where are <code>unmatch</code> and <code>marry</code>?</p>

<p>All this piles up to make me think 'is anything named correctly?' Which means I now no-longer trust your code and have to find the definition and usage of everything in your function to build that trust again.</p></li>
<li><p>Your class <code>Person</code> should change:</p>

<ol>
<li>Rename all your functions and variables so they make sense and actually relate to each other and the task they're performing.</li>
<li>Move the <code>messaged</code>, <code>my_ranking</code> and <code>j</code> all out of <code>Person</code>. They're about the persons candidates, and so should go in their own class.</li>
<li>You should make a function <code>_ranking</code> that finds the index of the target passed to it from the candidates. This is as you've used the same code multiple times.</li>
<li><code>match</code> is a two-way relationship, but you've only defined it one way. Either get rid of the function and use <code>partner</code> directly or make it two way. Same with <code>divorce</code>.</li>
<li>You should change <code>send_msg</code> to use guard statements so you don't get lots of indentation.</li>
<li>Changing <code>receive_msg</code>'s name to <code>attempt_match</code> it makes sense to return a boolean on if the match was successful or not. Which is far better than <code>+</code> and <code>-</code>.</li>
<li>Remove the <code>ranking</code> function from <code>Person</code>. It makes your code harder to test and doesn't make much sense to me to have it in the class.</li>
</ol></li>
<li><p>Add a <code>Candidates</code> class, this should be a standard iterable, whilst exhibiting a value <code>queue</code> that should be an iterator. This iterator should contain the code regarding <code>messaged</code>.</p></li>
<li>You should keep the <code>np.random.shuffle</code> and the <code>Person.ranking</code> code in the <code>gen_groups</code> function. As they're <em>generating the groups</em>.</li>
<li>You should move a lot of your <code>main</code> code into reusable functions.</li>
<li>Don't use comprehensions for side effects. If you need to loop over something and call a function use a <code>for</code> loop.</li>
<li>Most of your comprehensions are quite hard to read.</li>
</ol>



<pre><code>class Candidates:
    def __init__(self, candidates):
        self._candidates = candidates
        self.messaged = False
        self.queue = self._build_queue()

    def __iter__(self):
        return iter(self._candidates)

    def _build_queue(self):
        end = len(self.candidates)
        for i, candidate in enumerate(self):
            if i == end:
                self.messaged = True
            yield candidate


class Person:
    def __init__(self, id_, active):
        self.id = id_
        self.active = active
        self.partner = None
        self.candidates = None

    def _ranking(self, target):
        return [c.id for c in self.candidates].index(target)

    def match(self, partner):
        self.partner = partner
        partner.partner = self

    def unmatch(self):
        self.partner.partner = None
        self.partner = None

    def initiate_match_attempts(self):
        if not self.status or self.partner is not None:
            return

        for candidate in self.candidates.queue:
            if candidate.attempt_match(self):
                break

    def attempt_match(self, candidate):
        if self.partner is None:
            self.match(candidate)
            return True

        if self._ranking(candidate.id) &gt;= self._ranking(self.partner.id):
            return False

        self.unmatch()
        self.match(candidate)
        return True

    def energy(self):
        if self.partner is not None:
            return self._ranking(self.partner.id) + 1
        else:
            return len(self.candidates) + 1
</code></pre>



<pre><code>import numpy as np

from persons import Candidates, Person


def join(males, females):
    yield from males
    yield from females


def find_solo(males, females):
    return [
        person
        for persion in join(males, females)
        if person.partner is None
    ]


def find_not_messaged(males, females):
    return [
        person
        for person in join(males, females)
        if person.active
        and person.partner is None
        and not person.candidates.messaged
    ]


def main(males, females):
    delta = len(males) - len(females)
    if delta &gt;= 0:
        singles = delta, 0
    else:
        singles = 0, abs(delta)

    current = len(find_solo(males, females))
    not_msg = len(find_not_messaged(males, females))

    print('M, F theoretical singles: ', singles)
    print('All currently single: ', current)
    print('Not messaged: ', not_msg)

    while not_msg:
        for person in join(males, females):
            person.initiate_match_attempts()

        current = len(find_solo(males, females))
        not_msg = len(find_not_messaged(males, females))
        print('Still single: ', current)
        print('Not messaged: ', not_msg)
        print('')
    return males, females


def randomize_candidates(sample):
    sample = sample.copy()
    np.random.shuffle(sample)
    return Candidates(sample)


def gen_groups(group1, group2, alpha, beta=1):
    males = [
        Person(i, np.random.choice([True, False], p=[beta, 1 - beta]))
        for i in range(group1)
    ]
    females = [
        Person(i, np.random.choice([True, False], p=[alpha, 1 - alpha]))
        for i in range(group2)
    ]

    np.random.shuffle(males)
    np.random.shuffle(females)

    for male in males:
        male.candidates = randomize_candidates(females)

    for female in females:
        female.candidates = randomize_candidates(males)

    return males, females


def calculate_energy(gr1, gr2, pp, homme, femme):
    res_f = np.mean([femme[i].energy() for i in range(len(femme))])
    res_m = np.mean([homme[i].energy() for i in range(len(homme))])
    with open('saved-data/energy.csv', 'a') as fl:
        fl.write('{};{};{};{};{}'.format(gr1, gr2, pp, res_m, res_f))
    return res_m, res_f


if __name__ == '__main__':
    g1 = 1000
    g2 = 1000
    p = 1
    m, f = gen_groups(g1, g2, p)
    m, f = main(m, f)
    # 3. Print Energy
print('Final mean energy males: {}, females: {}'.format(calculate_energy(g1, g2, p, m, f)))
</code></pre>
    </div>