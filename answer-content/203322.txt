<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After taking suggestions from the answers, I have written this new and improved function alias macro:</p>

<pre><code>#define FUN_ALIAS_SPEC(SPECS, NEW_NAME, ...)                                    \
  template &lt;typename... Args&gt;                                                   \
  SPECS auto NEW_NAME(Args &amp;&amp;... args)                                          \
    noexcept(noexcept(__VA_ARGS__(std::forward&lt;Args&gt;(args)...)))                \
    -&gt; decltype(__VA_ARGS__(std::forward&lt;Args&gt;(args)...)) {                     \
    return __VA_ARGS__(std::forward&lt;Args&gt;(args)...);                            \
  }

#define FUN_ALIAS(NEW_NAME, ...)                                                \
  FUN_ALIAS_SPEC(inline, NEW_NAME, __VA_ARGS__)
</code></pre>

<p>Thanks to <strong>@Justin</strong>, this is now SFINAE friendly by putting the function call expression in <code>decltype()</code> rather than using <code>decltype(auto)</code>. </p>

<p>Thanks to <strong>@Rakete1111</strong>, this is now <code>constexpr</code> friendly by allowing the user to put specifiers before the definition. This means that the alias can also be made into <code>static</code> class member.</p>

<p>Thank you both for participating!</p>
    </div>