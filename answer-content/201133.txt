<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><code>refresh()</code> method must be processed by only one thread at a time ...</p>
</blockquote>

<pre><code>private final Semaphore refreshLock = new Semaphore(1);
</code></pre>

<p>A mutex is arguably a better synchronization object choice when you only need one thread at a time. So I would advise you to use a <code>ReentrantLock</code> instead, for instance.</p>

<blockquote>
<pre><code>synchronized (refreshLock) {
    if (refreshLock.hasQueuedThreads()) {
        System.out.println("skip this thread ... " + Thread.currentThread().getId());
        return; // don't put one more to the queue
    }
}
</code></pre>
</blockquote>

<p>So in fact you are using not one but two synchronization objects, a semaphore and a monitor. The reason why you are doing this is because of your second requirement. However you can implement both of your requirements using only one synchronization object which would make your code simpler (hopefully).</p>

<blockquote>
<pre><code>Thread.sleep(5000);
</code></pre>
</blockquote>

<p>No! I know you are doing this to emulate a long running operation. However long running operations should <strong>never</strong> execute within concurrent control, specially if it's running one at a time.</p>

<p>What this means effectively is that all threads calling <code>refresh</code> will be blocked by at least a whopping 5 seconds. </p>

<p>So obviously you have to implement your <code>refresh</code> method as a process that runs on the background. Meaning that you will be returning a <code>Future</code> that may complete at any given moment. For a thread that will do the process this moment will be when the process has finished, for all others this will be almost immediately.</p>

<p>This is the resulting implementation:</p>

<pre><code>private final ReentrantLock refreshLock = new ReentrantLock();
private boolean hasRefreshed = false;
ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(2);

public Future refresh() {
    System.out.println("call refresh()");
    try {
        refreshLock.lock();
        if(hasRefreshed) {
            System.out.println("already refreshed");
            return executor.submit(() -&gt; {});
        }

        hasRefreshed = true;
        return executor.submit(() -&gt; {
            System.out.println("process ... " + Thread.currentThread().getId());
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("### DONE");
        });

    }finally {
        refreshLock.unlock();
    }
}
</code></pre>

<p>Ideally the synchronization logic would be implemented in a generic class that would be able to handle any use case.</p>

<p>You will also have to change your main a bit, so your program doesn't exit immediately.</p>

<pre><code>IntStream.range(0, 12)
    .mapToObj(i -&gt; service.submit(new Task(i, scratch)))
    .forEach(f -&gt; {
        try {
            f.get();
        } catch (InterruptedException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        } catch (ExecutionException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
    });
</code></pre>
    </div>