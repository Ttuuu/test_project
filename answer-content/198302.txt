<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code is formally correct, just change the name to <code>IsNormal()</code> (PascalCase) to follow <em>standard</em> .NET naming conventions.</p>

<p>However your second question <em>"Is this portable to .NET core and 32-bit ARM Linux..."</em> is little bit more tricky. In normal conditions you should almost never care about host endianness but floating point numbers have exceptions on ARM (and possibly some other architectures which, however, don't run .NET Core). Specifically:</p>

<ul>
<li>ARM EABI does not store floating point numbers using the <em>natural-endianness</em> but a mixed-endian convention. You can't compare <code>BitConverter.GetBytes(v)</code> result with an <code>int</code> because they're surely encoded differently.</li>
<li>CirrusLogic Maverick (formally EP9312) is an ARM9 System-on-chip with a MaverickCrunch math cooprocessor where floating point numbers are always little-endian. You can't compare <code>BitConverter.GetBytes(v)</code> result with an <code>int</code> because they may be encoded differently.</li>
</ul>

<p>Honestly, regardless the CPU, I am not sure about Linux images compiled with software floating point support then (if you need to support them) you have to try (or find related documentation).</p>

<p>The good news is that you probably won't ever need to deal with them. The bad news is that, if you really need to, compiling for <code>AnyCPU</code> you have to detect
endianness at run-time (and ARM CPUs may be configured...)</p>
    </div>