<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your controller is very creative but its got some pretty big problems. In Rails controllers are notoriously hard to test and can quickly become very buggy if they contain too much logic. Skinny controllers are a vital part of good MVC code.</p>

<p>Any time your controller action has more than two possible code branches than you should stop and rethink it. </p>

<p>The Rails way of approaching this problem is nested routes and nested parameters.</p>

<p>Lets start out with the nested routes:</p>

<pre><code>resources :collections, shallow: true do
  resources :recommendations 
end
</code></pre>

<p>This would give us routes like:</p>

<pre><code>                      Prefix Verb   URI Pattern                                               Controller#Action
   collection_recommendations GET    /collections/:collection_id/recommendations(.:format)     recommendations#index
                              POST   /collections/:collection_id/recommendations(.:format)     recommendations#create
new_collection_recommendation GET    /collections/:collection_id/recommendations/new(.:format) recommendations#new
          edit_recommendation GET    /recommendations/:id/edit(.:format)                       recommendations#edit
               recommendation GET    /recommendations/:id(.:format)                            recommendations#show
                              PATCH  /recommendations/:id(.:format)                            recommendations#update
                              PUT    /recommendations/:id(.:format)                            recommendations#update
                              DELETE /recommendations/:id(.:format)                            recommendations#destroy
                  collections GET    /collections(.:format)                                    collections#index
                              POST   /collections(.:format)                                    collections#create
               new_collection GET    /collections/new(.:format)                                collections#new
              edit_collection GET    /collections/:id/edit(.:format)                           collections#edit
                   collection GET    /collections/:id(.:format)                                collections#show
                              PATCH  /collections/:id(.:format)                                collections#update
                              PUT    /collections/:id(.:format)                                collections#update
                              DELETE /collections/:id(.:format)                                collections#destroy
</code></pre>

<p>So the user would create a brand new collection from <code>/collections/new</code> -
and POST to <code>/collections</code>.</p>

<p>but we want the user to be able to create a recommendation on the fly as well. So lets make so that we can pass recommendations into the collection.</p>

<p>So what we do is add <a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html" rel="nofollow noreferrer"><code>accepts_nested_attributes_for</code></a> to RecommendedCollection:</p>

<pre><code>class RecommendedCollection &lt; ActiveRecord::Base
  has_many :recommendations, class_name: 'RecommendedResource'
  accepts_nested_attributes_for :recommendations, reject_if: :all_blank?
end
</code></pre>

<p>So from our Collection controller we can create both the collection and the recommendation</p>

<pre><code>class CollectionController &lt; ApplicationController

  def new
    @collection = RecommendedCollection.new
    @collection.recommendations.build # create an empty recommendation for the form.
  end

  def create
    @collection = RecommendedCollection.create(collection_parameters)
    if @collection.persisted?
      redirect_to @collection
    else
      render :new, notice: 'Collection could not be created.'
    end
  end

  def collection_parameters
    params.require(:collection).allow(recommendation_attributes: [:title, :url])
  end
end 
</code></pre>

<p>So now if we do <code>POST /collection  collection: { recommendation_attributes: ['Test', 'http://www.example.com'] }</code> we create a collection and a recommendation.</p>

<p>The form would look something like this:</p>

<pre><code>&lt;%= form_for(@ollection) do |f| %&gt;
   &lt;%= f.fields_for(:recommendations) do |nested_fields| %&gt;
     &lt;%= nested_fields.text_field :url %&gt; 
     &lt;%= nested_fields.text_field :title %&gt; 
   &lt;% end %&gt;
&lt;%= end %&gt;
</code></pre>

<p>Later when other users or the same user wants to add more recommendations to a collection they would post to <code>/collections/1/recommendations</code>.</p>
    </div>