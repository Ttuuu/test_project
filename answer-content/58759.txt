<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Easiest way (removes only spaces):</p>

<p>Trim.Start:</p>

<ol>
<li>Compare chars until they equal <code>' '</code> (space or other chars like <code>\n</code> or <code>\t</code>) at the string start and increment temp (<code>i</code>) variable.</li>
<li>Move pointer about <code>i</code> (<code>str+=i</code>). Now string starts from char which is not a space char (or any other white char).</li>
</ol>

<p>Trim.End:</p>

<ol>
<li>Do the same what for Trim.Start but from the end of the string.</li>
<li>Set last char (last space) as <code>\0</code>.</li>
</ol>

<p>The important thing is that function takes pointer to pointer (string). Watch for the function call: <code>StringTrim(&amp;p2);</code></p>

<pre><code>char * StringTrim(char * *pointerToString)
{
    u8 start=0, length=0;

        // Trim.Start:
        length = strlen(*pointerToString);
        while ((*pointerToString)[start]==' ') start++;
        (*pointerToString) += start;

        if (start &lt; length) // Required for empty (ex. "    ") input
        {
            // Trim.End:
            u8 end = strlen(*pointerToString)-1; // Get string length again (after Trim.Start)
            while ((*pointerToString)[end]==' ') end--;
            (*pointerToString)[end+1] = 0;
        }

    return *pointerToString;
}
</code></pre>



<p>Usage:</p>

<blockquote>
<pre class="lang-none prettyprint-override"><code>char str1[] = " test1   ";
char * p1 = str1;

Debug("1. before trim: [%s]", p1);
StringTrim(&amp;p1);
Debug("1. after trim [%s]", p1);


char str2[] = "   test2";
char * p2 = str2;

Debug("2. before trim: [%s]", p2);
StringTrim(&amp;p2);
Debug("2. after trim [%s]", p2);


char str3[] = "test3   ";
char * p3 = str3;

Debug("3. before trim: [%s]", p3);
StringTrim(&amp;p3);
Debug("3. after trim [%s]", p3);


char str4[] = "    ";
char * p4 = str4;

Debug("4. before trim: [%s]", p4);
StringTrim(&amp;p4);
Debug("4. after trim [%s]", p4);


char str5[] = "";
char * p5 = str5;

Debug("5. before trim: [%s]", p5);
StringTrim(&amp;p5);
Debug("5. after trim [%s]", p5);
</code></pre>
</blockquote>

<p>Result:</p>

<blockquote>
<pre class="lang-none prettyprint-override"><code>1. before trim: [ test1   ]
1. after trim [test1]
2. before trim: [   test2]
2. after trim [test2]
3. before trim: [test3   ]
3. after trim [test3]
4. before trim: [    ]
4. after trim []
5. before trim: []
5. after trim []
</code></pre>
</blockquote>
    </div>