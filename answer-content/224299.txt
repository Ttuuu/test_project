<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>regarding:</p>

<blockquote>
<pre><code>if(n&lt;0){
        printf("Buffer: %s", buffer);
        error("Reading Failed");
    }
</code></pre>
</blockquote>

<p>the call to <code>printf()</code> will change the value in <code>errno</code>.  The result is the call to <code>perror()</code> in function: <code>error()</code> will print the wrong message.</p>

<hr>

<p>regarding:</p>

<blockquote>
<pre><code>void* job_read(void * p){
    int* socketp = (int*)p;
    int newsockfd = (*socketp);
</code></pre>
</blockquote>

<p>the variable <code>socketp</code> is not used elsewhere in this function.  Suggest:</p>

<pre><code>void* job_read(void * p){
int newsockfd = *(int*)p;
</code></pre>

<p>Also, the correct type for a socket is <code>sock_t</code>, not <code>int</code></p>

<hr>

<p>regarding: </p>

<blockquote>
<pre><code>#define MAX_CONNECTIONS 128
</code></pre>
</blockquote>

<p>It would be advisable to check your OS to assure it will allow 128 simultaneous connections.  Many 'user' OS versions will not allow anywhere near that many simultaneous connections.</p>

<hr>

<p>regarding:</p>

<blockquote>
<pre><code>m = write(socket_ids[i], name, strlen(name));
n = write(socket_ids[i], buffer, strlen(buffer));
if(n &lt; 0 | m &lt; 0){
    error("Writing failed");
}
</code></pre>
</blockquote>

<p>If the first call to <code>write()</code> fails, it will have set <code>errno</code> indicating the reason the system thinks the error occurred.  However, the second call to <code>write()</code> will overlay the value in <code>errno</code>, so the call to <code>error()/perror()</code> will output the wrong message.</p>

<p>suggest:</p>

<pre><code>if( (m = write(socket_ids[i], name, strlen(name)) ) &lt; 0 )
{
    error( "write of user name failed" );
}

if( (n = write(socket_ids[i], buffer, strlen(buffer)) ) &lt; 0)
{
    error("Writing of user message failed");
}
</code></pre>
    </div>