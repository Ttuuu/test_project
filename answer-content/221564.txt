<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Your code is not consistently formatted:</p>

<ul>
<li>Sometimes you have two empty lines before a function, sometimes none. Best to Always have exactly one.</li>
<li>I suggest also leaving an empty line after the includes, as well as before any class-/struct-/union-definition.</li>
<li>Sometimes you leave out the space between type and identifier.</li>
<li>Sometimes you surround a binary operator with spaces, sometimes you don't for the same one.<br>
I suggest one space on both sides for all but comma (<code>,</code>, leave a space after it) and member-access (<code>.</code> and <code>-&gt;</code>).</li>
<li>I'm not sure why you sometimes put single statements into their own blocks for a control-structure, and sometimes don't.</li>
<li>Space before a semicolon is very odd.</li>
<li>Your indentation also deserves some more TLC.</li>
</ul></li>
<li><p>As the namespace <code>std</code> is not designed for being included wholesale, <code>using namespace std;</code> is a bug waiting to manifest. Read "<a href="https://stackoverflow.com/q/1452721">Why is “using namespace std” considered bad practice?</a>" for the details.</p></li>
<li><p>You use <code>std::string</code>, but you don't #include it. While any standard library header is allowed to include any others it likes, very few secondary includes are mandatory.</p></li>
<li><p>Using a <code>std::string_view</code> wherever you currently use a <code>std::string</code> would remove many useless short-term allocations.</p></li>
<li><p>Consider encapsulating your datastructure in its own class. That's what they are for!</p></li>
<li><p>You are assuming keys only contain lowercase latin characters (or the one directly following, which is <code>{</code> for ASCII). I assume the 27<sup>th</sup> Slot is wrong. Also, consider throwing a <a href="https://en.cppreference.com/w/cpp/error/domain_error" rel="nofollow noreferrer"><code>std::domain_error</code></a> if you are wrong, and encapsulating the mapping in its own function.</p></li>
<li><p>You are using a single in-class-initializer, specifically for <code>isWord</code>. That leaves all the rest un-initialized, resulting in UB.<br>
Personally, I would remove it and value-initialize the whole node.</p></li>
<li><p>Three of four functions accept a <code>node*</code> by reference, assign it to a non-reference and forget it. I hope you see that's just wrong?</p></li>
<li><p>You only use <code>node::previous</code> for <code>remove()</code>. It's pretty trivial to remove that need by saving the last node which must be retained.</p></li>
<li><p>If you save the number of times a node is needed (children + endpoint), you can speed up testing for obsolescence considerably.</p></li>
<li><p>You don't notify the caller if a key already is (<code>insert()</code>) respectively is not (<code>remove()</code>) in the trie.</p></li>
<li><p><code>search()</code> should be able to deal with a constant Version of the trie.</p></li>
<li><p>Consider adding <code>noexcept</code> and <code>constexpr</code> where appropriate.</p></li>
<li><p>Your comments rephrase the code, adding nothing useful. Explain the why, not the what, the latter being far better represented by the code.</p></li>
<li><p>While you should generally free all the resources you allocated, skipping it might be harmless at the end of the program for many of them. Anyway, think about how to free the whole datastructure.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>.</p></li>
</ol>

<p>Modified code (<a href="http://coliru.stacked-crooked.com/a/116ac74115de98b6" rel="nofollow noreferrer">See live on coliru</a>):</p>

<pre><code>#include &lt;stdexcept&gt;
#include &lt;string_view&gt;
#include &lt;utility&gt;

struct node {
    bool terminal;
    unsigned char count;
    node* children[26];
};

constexpr static inline auto&amp; child(const node* p, char c) {
    if (c &lt; 'a' || c &gt; 'z')
        throw std::domain_error("Must be a lowercase latin letter");
    return p-&gt;children[c - 'a'];
}
constexpr static inline auto&amp; child(node* p, char c) {
    return const_cast&lt;node*&amp;&gt;(child(const_cast&lt;const node*&gt;(p), c));
}

bool insert(node*&amp; root, std::string_view key) {
    if (!root)
        root = new node();
    auto* p = root;
    for (auto c : key) {
        auto&amp; x = child(p, c);
        if (!x) {
            x = new node();
            ++p-&gt;count;
        }
        p = x;
    }
    if (p-&gt;terminal)
        return false;
    p-&gt;terminal = true;
    ++p-&gt;count;
    return true;
}

bool search(const node* root, std::string_view key) noexcept
try {
    for (auto c : key) {
        if (!root)
            break;
        root = child(root, c);
    }
    return root &amp;&amp; root-&gt;terminal;
} catch(std::domain_error&amp;) {
    return false;
}

bool remove(node* root, std::string_view key) noexcept
try {
    auto p = root;
    if (!p)
        return false;
    for (std::size_t i = 0; i &lt; key.size(); ++i) {
        p = child(p, key[i]);
        if (!p)
            return false;
        if (p-&gt;count &gt; 1) {
            root = p;
            key = key.substr(i + 1);
            i = -1;
        }
    }
    if (!p-&gt;terminal)
        return false;
    --root-&gt;count;
    if (root == p) {
        root-&gt;terminal = false;
        return true;
    }
    p = std::exchange(child(root, key[0]), nullptr);
    key = key.substr(1);
    for (auto c : key)
        delete std::exchange(p, child(p, c));
    delete p;
    return true;
} catch(std::domain_error&amp;) {
    return false;
}

void destroy(node* root) noexcept {
    if (!root)
        return;
    node* trees = nullptr;
    node* reserve = nullptr;
    root-&gt;count -= root-&gt;terminal;
    root-&gt;terminal = false;
    for (auto p = root, np = root; !reserve; p = np) {
        if (!root-&gt;count) {
            delete trees;
            delete root;
            return;
        }
        np = root;
        for (auto&amp; x : p-&gt;children) {
            if (x &amp;&amp; x-&gt;count == x-&gt;terminal) {
                --p-&gt;count;
                (!trees ? trees : reserve) = std::exchange(x, {});
                if (reserve)
                    break;
            } else if (x) {
                np = x;
            }
        }
    }

    auto trees_free = std::size(trees-&gt;children);
    trees-&gt;children[--trees_free] = nullptr;
    trees-&gt;children[--trees_free] = root;
    while ((root = trees-&gt;children[trees_free++])) {
        if (trees_free == std::size(root-&gt;children)) {
            delete std::exchange(reserve, trees);
            trees = root;
        } else
            for (auto x : root-&gt;children)
                if (x &amp;&amp; x-&gt;count == x-&gt;terminal) {
                    delete std::exchange(reserve, x);
                } else if (x) {
                    if (!trees_free) {
                        trees_free = std::size(trees-&gt;children);
                        reserve-&gt;children[--trees_free] = trees;
                        trees = std::exchange(reserve, {});
                    }
                    trees-&gt;children[--trees_free] = x;
                }
    }
    delete trees;
    delete reserve;
}

#include &lt;iostream&gt;

int main() {
    node* a = nullptr;
    std::string_view keys[] = { "the", "a", "there", "answer", "any", "by",
        "bye", "their", "hero", "heroplane" };
    for (int i = 0; i &lt; 10; i++)
        insert(a, keys[i]);
    std::cout &lt;&lt; (search(a, "the") ? "Yes\n" : "No\n");
    std::cout &lt;&lt; (search(a, "these") ? "Yes\n" : "No\n");
    remove(a,"heroplane");
    std::cout &lt;&lt; (search(a, "hero") ? "Yes\n" : "No\n");
    std::cout &lt;&lt; (search(a, "heroplane") ? "Yes\n" : "No\n");
    destroy(a);
}
</code></pre>
    </div>