<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ol>
<li><p>Don't prefix the data member with an underscore.  The rule about identifiers starting with an underscore are easy to get wrong.  In this case, just name it <code>data</code>.</p></li>
<li><p>You did not make the converting constructor and the raw pointer constructor <code>noexcept</code>.  They are <code>noexcept</code> according to the spec.</p></li>
<li><p>Don't use <code>element_type</code> everywhere, it's too long.  Just use <code>T</code>.</p></li>
<li><p>Don't breach the 80 character limit.  Scrolling is a bit annoying.</p>

<blockquote>
<pre><code>template &lt;typename U, typename = std::enable_if&lt;!std::is_same_v&lt;element_type, U&gt; &amp;&amp; std::is_convertible_v&lt;U*, element_type*&gt;&gt;&gt;
observer_ptr(observer_ptr&lt;U&gt; const&amp; other)
</code></pre>
</blockquote>

<p>The long line can be broken down.  <code>typename = std::enable_if</code> is useless — you probably meant <code>typename = std::enable_if_t</code>.  And the <code>!std::is_same_v&lt;T, U&gt;</code> is redundant because the copy constructor will always take precedence over this constructor:</p>

<pre><code>template &lt;typename U, typename = std::enable_if_t&lt;std::is_convertible_v&lt;U*, T*&gt;&gt;&gt;
observer_ptr(obverser_ptr&lt;U&gt; other) noexcept
    :data{other.get()}
{
}
</code></pre></li>
<li><p>The <code>release</code> function can be simplified with <code>std::exchange</code>:</p>

<pre><code>return std::exchange(data, nullptr);
</code></pre></li>
<li><p>The <code>operator bool</code> is getting the logic wrong — it should return <code>data != nullptr</code> instead.</p></li>
<li><p>The lines are getting a bit long for the observers.  I prefer writing them on separate lines:</p>

<pre><code>[[nodiscard]] constexpr std::add_lvalue_reference_t&lt;T&gt; operator*() const
{
    return *get();
}
[[nodiscard]] constexpr T* operator-&gt;() const noexcept
{
    return get();
}
</code></pre></li>
<li><p>According to the spec, <code>operator&lt;</code> should use <code>std::less</code> of the <a href="https://timsong-cpp.github.io/cppwp/n4659/expr#def:composite_pointer_type" rel="nofollow noreferrer">composite pointer type</a> instead of the builtin <code>&lt;</code> on pointers because the latter does not provide a strict total order.  So:</p>

<pre><code>template &lt;typename T1, typename T2&gt;
[[nodiscard]] bool operator&lt;(observer_ptr&lt;T1&gt; const&amp; p1, observer_ptr&lt;T2&gt; const&amp; p2)
{
    using CP = /* work out the composite pointer type of T1* and T2* */;
    return std::less&lt;CP&gt;;
}
</code></pre></li>
<li><p>Where's <code>std::hash</code>?  You need to specialize it.</p></li>
</ol>
    </div>