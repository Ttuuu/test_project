<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Strings as tokens</h2>

<p>I'm assuming the following comment is anticipating <a href="https://codereview.stackexchange.com/questions/220944/creating-keys-names-from-interfaces-to-avoid-strings?noredirect=1&amp;lq=1">this other question</a>, where strings remain part of the API, but some of my complaints with them are addressed.</p>

<blockquote>
  <p>I also have other tools that let me avoid actually using strings here but I'll post them another time in a new question.</p>
</blockquote>

<p>Personally I don't like using strings for this sort of thing: it's not expressive and static enough for me. I'd much rather there was a <code>static readonly FeatureKey SayHalloFeature</code> somewhere, which was the singular reference for everything. If you don't want <code>statics</code> all over the place, you can cover classes nicely with generics, but not methods (as per <a href="https://codereview.stackexchange.com/questions/220944/creating-keys-names-from-interfaces-to-avoid-strings?noredirect=1&amp;lq=1">your other question</a>); though my opinion is that method names have no meaning outside of their class/interface, and if you want <code>SayHallo</code> to be disablable, you should document the fact clearly by providing a <code>FeatureKey</code> (or whatever) that will show up in the intelli-sense for a consumer (improving discoverability), rather than their having to check the written documentation (which hopefully existing, but may not be updated for this exact method) for each method they might want to disable, and forever looking over their shoulder incase they create a collision.</p>

<p>Other benefits of using explicit tokens over strings:</p>

<ul>
<li>You can limit access to tokens, so that not anyone can disable "OSSpecificCriticalSecurityService" by accident</li>
<li>It's harder to produce binary-breaking changes (things like <code>const string</code> can go wrong)</li>
<li>Tokens give you extensibility options:

<ul>
<li>You could set defaults in the Token (these defaults could be a function of whether it is a Debug/Release build, etc.)</li>
<li>Include additional meta-deta (long names, logging info etc.) and policy options</li>
</ul></li>
<li>Easier to manage globalisation (printable strings become an independent concern)</li>
</ul>

<p>The main downside as I see it is that you can't trivially configure it from a flat file or other text-only source; but at the same time, it gives you better control of what <em>can</em> be configured some elsewhere, and if you want to hunt down suitable annotated tokens with reflection or T4 or something, that remains an option. You can always add a <code>StringyToken</code> class later, if you want to use strings as well (e.g. for things that should be user configurable). The layer of complexity translating flat-file to tokens forces you to ensure the token exists, so you can provide useful messages to users who typo the feature names, instead of enabling <code>"ReliableNetwok"</code> and finding you are still dropping packets.</p>

<h2>Other API Comments</h2>

<p>As you say, the <code>Configure</code> interface could be extended, and personally I would consider this a priority in order to hide-away any bit-banging: <code>Set(FeatureOptions)</code> and <code>Clear(FeatureOptions)</code> methods would be enough to keep me happy. I'm not sure that facilitating 'toggling' makes sense as part of the basic API at all.</p>

<p>It's notable, that there is no way to query the current <code>FeatureOptions</code> directly. If someone wanted to do this, they might be tempted to abuse <code>Configure</code>, and in doing so by-pass the logging and warning features. An <code>IReadonlyFeatureService</code> type interface might be appropriate, to force the use of the <code>Exectue</code> method(s).</p>

<h2>Other</h2>

<p>Everything else looks pretty great. The warning-checks are a bit confusing, but I can't think how to improve them.</p>

<p>I might be tempted to cache a <code>Task.FromResult(default(object));</code> if the <code>Execute(,,Action,Action)</code> extension will be heavily used.</p>
    </div>