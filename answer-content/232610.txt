<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>I make the base class http_message available which is probably not ideal. Should I hide this away in a different header? Or hide some other way? any ideas?</h2>

<p>Each class should have it's own header file. Right now if any of the 3 classes are edited all files need to recompile, if each class had it's own header file, the only time every file needs to recompile is when the <code>http_message</code> class is modified. The overrides for the <code>&lt;&lt;</code> operator should be defined for <code>http_response</code> in the <code>http_response</code> header file and for the <code>http_request</code> in the <code>http_request</code> header file.</p>

<h2>Is the testing sufficient?</h2>

<p>Since the "gtest/gtest.h" file was not provided I was unable to run the unit tests, however, there are some logical extensions:
Since <code>http_message</code> is not an abstract class there should be some unit tests for <code>http_message</code> that are independent of the <code>http_request</code> and <code>http_response</code> unit tests. The <code>http_message</code> unit tests should precede the other unit tests so that if the <code>http_message</code> unit tests fail the other tests are not executed.</p>

<h2>Unused Protected Function</h2>

<p>Neither <code>http_request</code> nor <code>http_response are currently using the protected function</code>http_message::set_body_length(size_t length)<code>so it is unclear that this function is needed, since it also isn't used by</code>http_message`.</p>

<h2>Avoid Using Macros in C++ When Possible.</h2>

<p>It is unclear that macros are used in the unit tests since "gtest/gtest.h" is not provided, however, <code>TEST()</code> and <code>EXPECT_EQ()</code> appears to be macros. Macros are not type safe and can might not be the best option. This may cause the unit testing to be less accurate than it could be.</p>

<p>Perhaps a unit test class might be better.</p>

<p>You might also want to look into using <a href="https://en.wikipedia.org/wiki/CppUnit" rel="nofollow noreferrer">cppunit</a>. This would tell you how much of the source code is getting test coverage.</p>

<h2>Possible Optimizations</h2>

<p>There are many functions in <code>http_message</code> that could be inlined. That means that the body of the functions could also be in <code>http_message.hpp</code>. In line function may be optized and speed up the code or make the executable code smaller. Candidates for inlining are
 - void set_version(int major, int minor)<br>
 - const std::string get_version()<br>
 - std::string body()<br>
 - get_header_value(const std::string&amp; key)  </p>
    </div>