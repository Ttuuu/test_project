<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>tooShortNoChildren</code> is subsumed in <code>notDeepEnoughYet</code>. The newtypes and class are silly, discard them. <code>treeWalker</code> doesn't touch <code>cache</code>, so let's hide <code>cache</code> in a monadic interface.</p>

<pre><code>-- walks through all nodes of specified depth and applies a function
treeWalker :: ([Int] -&gt; LinkedTree -&gt; State [a] LinkedTree) -- function to apply on every node of desired depth
           -&gt; Int -&gt; LinkedTree -&gt; LinkedTree
treeWalker processNode desiredDepth = (`evalState` []) . helper [] processnode
  where
    helper :: Monad m =&gt; [Int] -- path up until now, excluding current node, [level k, ..., level 1, root]
           -&gt; ([Int] -&gt; LinkedTree -&gt; m LinkedTree)
           -&gt; LinkedTree -&gt; m LinkedTree
    helper _ cache (Link is p) = (Link is p, cache) -- there may be links already e.g. from a previous run with different parameters
    helper path cache ln@(LinkedNode is lis children) =
      if length path == desiredDepth
        then processNode path cache ln
        else LinkedNode is lis &lt;$&gt; traverse (helper (head is:path)) children
</code></pre>

<p>The explicit recursion has the form of a fold.</p>

<pre><code>-- walks through all nodes of specified depth and applies a function
treeWalker :: ([Int] -&gt; LinkedTree -&gt; State [a] LinkedTree) -- function to apply on every node of desired depth
           -&gt; Int -&gt; LinkedTree -&gt; LinkedTree
treeWalker processNode desiredDepth = (`evalState` []) . foldr ($) processNode (replicate desiredDepth step) []
  where
    -- Makes a node processor work at one level deeper.
    -- The path excludes the current node and has form [level k, ..., level 1, root].
    step :: Monad m =&gt; ([Int] -&gt; LinkedTree -&gt; m LinkedTree) -&gt; [Int] -&gt; LinkedTree -&gt; m LinkedTree
    step _ _ l@(Link _ _) = return l
    step f path ln@(LinkedNode is lis children) = LinkedNode is lis &lt;$&gt; traverse (f . (head is:)) children
</code></pre>

<p>I'd inline that.
I'll assume that comparing <code>a:as</code> and <code>head is:path</code> is enough. I'll also assume that as according to <code>LinkedNode</code>s definition, its first parameter has type <code>Int</code>, not <code>[Int]</code>.</p>

<pre><code>setPermutationLinks :: Int -&gt; LinkedTree -&gt; LinkedTree 
setPermutationLinks desiredDepth = (`evalState` []) . foldr ($) processNode (replicate desiredDepth liftThroughTree) [] where
  processNode :: [Int] -&gt; LinkedTree -&gt; State [[Int]] LinkedTree
  processNode path ln@(LinkedNode i _ _) = gets (find $ (Set.fromList (i:path) ==) . Set.fromList) &gt;&gt;= \case
    Nothing -&gt; modify ((i:path):) &gt;&gt; return ln
    Just cpath -&gt; return $ Link i $ reverse cpath
  liftThroughTree :: Monad m =&gt; ([Int] -&gt; LinkedTree -&gt; m LinkedTree) -&gt; [Int] -&gt; LinkedTree -&gt; m LinkedTree
  liftThroughTree _ _ l@(Link _ _) = return l
  liftThroughTree f path ln@(LinkedNode i lis children) = LinkedNode i lis &lt;$&gt; traverse (f . (i:)) children
</code></pre>
    </div>