<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>welcome to code review!
I've split my answer into three parts, each reviewing your code from a different perspective.</p>

<p><strong>Structural and Stylistic</strong></p>

<p>There is a coding style standard in python called PEP8. A good IDE like Pycharm will be able to tell you how to keep to it. It makes your code a lot more readable and consistent by using certain conventions which python coders will recognise. It helps with general organisation too.</p>

<p>You don't need to specify <code>else: pass</code>. This will be done automatically. Note this is <em>not</em> the same as <code>else: continue</code>.</p>

<p>You seem to have an indentation error in <code>check_similarity</code> with your <code>try: similarity.append(...</code> where the code is unreachable due to an early <code>return</code>. Again, using an IDE like pycharm will show these kinds of bugs straight away. </p>

<p>You regularly define instance attributes outside of your <code>__init__()</code>. This can be OK, but sometimes you then try to mutate these variables which can cause issues. (How can you change that which does not exist?) Defining all of your instance variables in your <code>__init__()</code> will likely let you know if you have some extra that you no longer need, or perhaps you have two doing the same thing. It's also easier to break up classes if that becomes necessary.</p>

<p>Perhaps the biggest issue with the code is the large blocks of <code>if else</code> in <code>is_unsatisfied()</code> and <code>check_similarity()</code>. This is basically unreadable with no comments as to what the conditions mean, lots of repeated checks and repeated code across the two methods. If you cleaned up these conditions I think you would find ways of exiting early to speed things up. For example, you perform the check <code>if x &gt; min_width</code> 4 times, and <code>y &lt; (max_height - self.spacing)</code> twice in the same method.</p>

<p>It's good that you've used docstrings but they're quite sparse and don't really help. <code>check_similarity()</code> for example says <code>"""Checking if an agent is unsatisfied or satisfied at its current position."""</code> However, you then loop over <em>all</em> agents in <code>self.agents</code> and your satisfied condition seems based on a single agent? Rewrite your docstrings and add comments!</p>

<p>I would split your class up - certainly into two classes, maybe three. All of the data gathering and plotting should be done separately to the core logic.</p>

<hr>

<p><strong>Quick Tweaks</strong></p>

<ul>
<li>You can use tuple unpacking to define variables. e.g.</li>
</ul>

<pre class="lang-py prettyprint-override"><code># Old
x = agent[0]
y = agent[1]

# New
x, y = agent
</code></pre>

<p>Likewise, you can pass in unpacked tuples as arguments:</p>

<pre class="lang-py prettyprint-override"><code># Old
if self.is_unsatisfied(agent[0], agent[1]):
    ...

# New
if self.is_unsatisfied(*agent):
    ...
</code></pre>

<ul>
<li><p>In python 3, classes don't need to specify that they inherit from <code>object</code>. </p></li>
<li><p>It's clearer and more standard to say <code>if not x:</code> than <code>if x == 0:</code></p></li>
<li><p>If you have long lines, you can split them by going to a new line without closing a bracket. Very long lines are usually an indication of bad writing, though.</p></li>
<li><p>Wrap your code to be executed in <code>if __name__ == '__main__':</code></p></li>
<li><p>Don't create instance attributes if they're only going to be used by a single method and never touched again. <code>self.old_agents</code> for example.</p></li>
<li><p>You shouldn't need to <code>round()</code> and then cast to <code>int()</code>.</p></li>
<li><p><code>isinstance()</code> is the preferred way of checking types in python.</p></li>
<li><p>Almost always, it's better to use <code>[]</code> and <code>{}</code> to cast to list or dict, rather than <code>list()</code> or <code>dict()</code>.</p></li>
<li><p>Only use single letter variables when it makes sense. <code>x</code> and <code>y</code> is ok, <code>for j in county:</code> is not; what is <code>j</code>?</p></li>
<li><p>Why are you looping over items, but using the item as an index?</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>for agent in self.agents:
    if Point(agent).within(county):
        if self.agents[agent] == 1:
            ...
</code></pre>

<p>If you want to loop over an item and an index, use <code>enumerate()</code>.</p>

<hr>

<p><strong>Speed</strong></p>

<p>You have used numpy, but only really to generate values. This isn't giving you any of its speed advantages. Where possible you want to perform vectorised operations on entire arrays, rather than looping over lists. For example, if you have some numpy array and want to check its values lie in a particular range:</p>

<pre class="lang-py prettyprint-override"><code>array = np.array([4, 3, 8, 9, 10, 1, 1, 5])

# Normal looping over array as list
return all(0 &lt; item &lt; 20 for item in array)

# Vectorised numpy operation
return (array &gt; 0).all() and (array &lt; 20).all()
</code></pre>

<p>If you clear up your code in <code>is_unsatisfied()</code> I think you'll be able to rewrite it to use these vectorised operations instead of what you currently have. I don't see any reason to use Numba or multithreading here.</p>

<p>You may find it too difficult to convert everything to numpy, in which case I would suggest using generators instead. In places where you're constantly appending to a list, or incrementing a value, you can switch to using <code>yield</code>. This allows you to create a generator expression, which will generally be faster.</p>

<p>You have two running counts for <code>count_similar</code> and <code>count_different</code>. I don't see why you can't just have a <code>count</code> which you increment and decrement. This means you don't need to get the average value at the end, and removes a lot of extra code.</p>

<hr>

<p>There are lots of other changes which could be made but I think it might be better for you to implement the above, then post an updated question. You can then get more specific help with your code.</p>
    </div>