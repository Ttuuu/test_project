<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall this seems pretty good. The calculations look correct (given sensible input) and the code is easy to follow.</p>

<p>Here are some suggestions for making this even better:</p>

<ul>
<li><p><strong>Cope with the user entering an empty string.</strong></p>

<p>If I select a shape, and then press “enter” immediately when asked for a dimension, I get a nasty traceback printed to the console:</p>

<pre class="lang-none prettyprint-override"><code>This program will calculate/narea of some geometric shapes for you
Shapes available are squares, triangles, circles, and trapezoid
Enter square, rectangle, triangle, circle, or trapezoid
What area would you like to calculate? square
Give length of side:
Traceback (most recent call last):
  File "areas.py", line 54, in &lt;module&gt;
    area_calc_logic(raw_input("What area would you like to calculate? "))
  File "areas.py", line 29, in area_calc_logic
    a_side = float(raw_input("Give length of side: "))
ValueError: could not convert string to float:
</code></pre>

<p></p>

<p>If you add a bit of debugging code around that, you see it’s trying to process <code>float('')</code> and choking. You should probably ask the user for the dimension again.</p></li>
<li><p><strong>Handle negative dimensions.</strong></p>

<p>For example, if I tell you my triangle has base <code>-5</code> and height <code>14</code>, you tell me that the area is <code>-35</code>. That seems a bit odd – isn’t area always positive?</p>

<p>It’s not immediately obvious how you should handle negative quantities from the user – perhaps just call <code>abs()</code> on their input? – but the current approach isn’t very good.</p></li>
<li><p><strong>Move the <code>area_user_logic</code> into an <code>if __name__ == '__main__'</code> block.</strong></p>

<p>This just means tweaking the end of the program as follows:</p>

<pre><code>if __name__ == '__main__':
    print "This program will calculate/narea of some geometric shapes for you"
    print "Shapes available are squares, triangles, circles, and trapezoid"
    print "Enter square, rectangle, triangle, circle, or trapezoid"
    area_calc_logic(raw_input("What area would you like to calculate? "))
</code></pre>

<p>This means that the interactive session only runs when you call the script directly. If I import the file into another file, I don’t get the interactive session, just the functions you’ve defined.</p>

<p>This helps make your code more reusable. See <a href="https://stackoverflow.com/q/419163/1558022">What does <code>if __name__ == '__main'</code> do? on SO</a> for more details.</p></li>
<li><p><strong>Cope with weirdly cased input.</strong></p>

<p>I claim my intention is perfectly clear here, but your program rejects it:</p>

<pre class="lang-none prettyprint-override"><code>This program will calculate/narea of some geometric shapes for you</code>
<code>Shapes available are squares, triangles, circles, and trapezoid</code>
<code>Enter square, rectangle, triangle, circle, or trapezoid</code>
<code>What area would you like to calculate? <strong>Triangle</strong></code>
<code>Error, Re-enter input:</code></pre>

<p>It would be good to lowercase user input before checking – that makes it a bit more friendly to malformed user input.</p></li>
<li><p><strong>Print an integer area if possible.</strong></p>

<p>Here’s a sample run from your program:</p>

<pre class="lang-none prettyprint-override"><code>This program will calculate/narea of some geometric shapes for you</code>
<code>Shapes available are squares, triangles, circles, and trapezoid</code>
<code>Enter square, rectangle, triangle, circle, or trapezoid</code>
<code>What area would you like to calculate? <strong>square</strong></code>
<code>Give length of side: <strong>3</strong></code>
<code><strong>9.0</strong></code></pre>

<p>From my perspective, I’ve entered an integer, and numerically the area is an integer. It’s a bit odd that you returned it as a float. You could use the <a href="https://docs.python.org/3.5/library/stdtypes.html?highlight=is_integer#float.is_integer" rel="nofollow noreferrer"><code>float.is_integer</code> method</a> to detect if an area has integral value, and print a slightly cleaner output.</p></li>
<li><p><strong>The else branch could cause a recursion bug.</strong></p>

<p>If somebody enters bogus input 999 times, they’ll hit Python’s <a href="https://stackoverflow.com/q/8177073/1558022">max recursion depth</a>. Admittedly they’d need to be quite patient – I tried it, and got bored holding down “Enter” – but hey, would be nice to avoid.</p>

<p>You could refactor the code into a <code>while True:</code> loop. Something like (pseudo-code):</p>

<pre><code>while True:
    ask_for_shape_name()
    if shape_name_is_valid():
        ask_for_dimensions()
        print_area_given_shape_and_dimensions()
    else:
        error_message()
</code></pre>

<p>as a bonus, this approach could allow me to calculate many areas at once, rather than restarting the script every time.</p></li>
<li><p><strong>Python 3 support isn’t tricky for this script.</strong></p>

<p>There are only two changes that affect this code:</p>

<ul>
<li><p><code>print</code> is a function, not a statement. That means you write <code>print("hello world")</code> instead of <code>print "hello world"</code>. If you want to use this in Python 2 – which will help you write scripts than run under 2 or 3 – add this line to the top of your script:</p>

<pre><code>from __future__ import print_function
</code></pre>

<p>It forces your Python 2 scripts to use <code>print()</code> as a function.</p></li>
<li><p>In Python 2, there’s a distinction between <code>raw_input()</code>, which returns user input as a string, and <code>input()</code>, which <code>eval()</code>'s the input first. </p>

<p>The latter is quite dangerous, so in Python 3 <code>raw_input()</code> was renamed to <code>input()</code>, and the old <code>input()</code> was dropped. To get the old behaviour, you have to do <code>eval(input())</code>, which makes the danger more explicit.</p></li>
</ul></li>
</ul>
    </div>