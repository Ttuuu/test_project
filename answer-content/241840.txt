<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) Basics:</p>

<p>Use some naming pattern for member variables of classes.</p>

<p>E.g., <code>bool m_running;</code> instead of <code>bool running;</code> this helps reader to understand that one works with class members and not something else unrelated. Also it might be helpful to have a character or two to identify the type the variable in the name. So that  <code>Function* function;</code> and <code>Container* container;</code> become <code>Function* m_ptr_function = nullptr;</code> and <code>Container* m_ptr_container = nullptr;</code>. This way you could've easily spotted a silly error:</p>

<pre><code>void operator()(Container&amp; container, Function function)
{
    //populate members so they can be accessed by each thread
    this-&gt;function = function;
    this-&gt;container = &amp;container;

    size_t size = container.size();
    ...
}
</code></pre>

<p>Unlike, the former which might look fine (at least in per-line scan), following is clearly wrong:</p>

<pre><code>void operator()(Container&amp; container, Function function)
{
    //populate members so they can be accessed by each thread
    m_ptr_function = function; // wait... isn't it a pointer?
    m_ptr_container = &amp;container;

    size_t size = m_ptr_container.size(); // wait what?
    ...
}
</code></pre>

<p>2) Multi-theading policies:</p>

<p>Creating a thread takes a certain amount of resources. So it might be counter productive to generate a new thread pool for each <code>async_foreach</code>. Utilize a separate generally used thread pool class and make <code>async_foreach</code> into a class that utilizes this said thread pool.</p>

<p>3) API for <code>async_foreach</code>:</p>

<p>From the looks of it you just want a function that runs over a sequence of elements.
Instead, you have a class that requires several steps to execute.
Why not wrap everything inside a single template function call instead of asking user to write the same wrapping each time?</p>

<p>4) Bugs and Issues: (aside from various typos)</p>

<p><code>conditional.wait(lock);</code> doesn't necessarily wait till it gets a notify. According to standard the wait might end unexpectedly. You must have a condition for the wait.</p>

<p>I don't think that you need so many conditional variables and mutexes. It isn't a task that requires a bunch of a bunch of unrelated mutexes. In your case you create a thread in the constructor, enable it to perform a single task in the execution block, and close it. It makes little sense to have so much mutexes - or rather it is senseless to have any at all. All of this should've been inside a single function call - this would make the whole process much easier.</p>

<p>If your class performed a sequence of tasks that require synchronization then having a single or a few of mutex+condition variable would make some sense.</p>

<hr>

<p>Currently, it will surely perform worse than <code>std::for_each(...)</code> and it has a more complex API.</p>

<p>Conclusion: use/make an executor class (i.e., a thread pool) instead and this whole <code>async_foreach</code> would become a simple routine.</p>
    </div>