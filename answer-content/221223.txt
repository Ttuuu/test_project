<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the existing great answer of Peter Taylor I would like to add some thoughts on methods vs. free functions.</p>

<p>Python is a <strong>multiparadigm</strong> language. It is concentrated on, but not only about object oriented programming.
It is certainly possible to construct one large <code>Solution</code> class that contains all your methods, but it might be not the best Solution. (höhö)</p>

<p>As a general guideline you can use classes to group data <strong>and</strong> functions acting on that data together.
If you simply want to group functions together into one namespace, you should use namespaces i.e. modules in python.</p>

<p>Let's get concrete and have a look at your <code>is_valid</code> method. It never uses self.
If you want to keep the class structure, you should make this at least explicit and change it to:</p>

<pre class="lang-py prettyprint-override"><code>@staticmethod
def is_valid(result, new_height):
</code></pre>

<p>A <code>staticmethod</code> is basically a free function residing in the namespace of a class.</p>

<p>But (opinionated) it might be even better in terms of reusability to completely "free" your function.
If you come from a <code>C++</code> background this makes it feel like a template function that you can apply on different inputs independent of the <code>Solution</code> class.</p>

<p>If you "freed" <code>is_valid</code> you will realize, that <code>merge</code> does not depend on <code>self</code> either and if you "freed" <code>merge</code> you will finally realize that <code>get_skyline</code> is basically a recursive function that calls <code>merge</code> and can be a <code>staticmethod</code> or a free function itself.</p>

<p>In the end you end up with a class of three staticmethods i.e. a namespace with three free functions. The canonical way of implementing this structure is to have those three function in their own module i.e. their own file. </p>

<p>Practically speaking, just delete the <code>class</code> and references to <code>self</code>, dedent the methods and call your file <code>Solutions.py</code>. Then you will be able to call</p>

<pre><code>import Solutions
Solutions.get_skyline(my_cool_skyline_test_data)
</code></pre>

<p>which feels very similar in terms of syntax as your class approach but decoupled the functions from each other.</p>

<p>If you think that a function like <code>is_valid</code> is an implementation detail of your module, you can prepend an underscore which makes it private <strong>by convention</strong>. This would allow to switch between an <code>_is_valid</code> function and the manual "current" height tracking suggested in the other answer.</p>
    </div>