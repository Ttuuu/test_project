<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd suggest using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loops to iterate over the cards, but before we can do that, there is an important point with the <code>dealOneCardToPlayer()</code> function:</p>

<blockquote>
<pre><code>tempCard = deck.cards.splice(0, 1);
</code></pre>
</blockquote>

<p>Note that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" rel="nofollow noreferrer"><code>Array.splice()</code></a> returns "<em>An array containing the deleted elements.</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#Return_value" rel="nofollow noreferrer">1</a></sup> and thus the name <code>tempCard</code> is misleading - perhaps a more appropriate name would be <code>tempCards</code>. </p>

<p>This means that the next line:</p>

<blockquote>
<pre><code>player.cards.push(tempCard); 
</code></pre>
</blockquote>

<p>leads to <code>player.cards</code> having a nested array with that card. If instead the first element of that array returned from the call to <code>.splice()</code> was pushed into the players <code>cards</code> array, it would make those functions easier to work with, along with <code>for...of</code> loops. That way there is no need to create a counter variable, increment it after each iteration, and use it just to get the next element from the array. </p>

<p>Also, shorthand assignment operations like <code>+=</code> and <code>-=</code> can be used instead of <code>sum = sum - 11</code> and <code>sum = sum + 1</code>.</p>

<p>Also there is little need to loop through the properties:</p>

<blockquote>
<pre><code>for (let prop in obj) {
      if (prop === "face") {
          if (obj[prop] === "A") {
</code></pre>
</blockquote>

<p>Just check the property directly:</p>

<pre><code>if (obj.face === "A") {
</code></pre>

<p>If you want to ensure the property exists, use the <code>in</code> operator:</p>

<pre><code>if ('face' in obj &amp;&amp; obj.face === "A") {
</code></pre>

<p>Putting it all together:</p>

<pre><code>const hasAceInHand = (cardsOnHand) =&gt; {
    for (const card of cardsOnHand) {
      if (card.face === "A") {
        return true;
      }
    }
    return false;
}

const countHandValue = (cardsOnHand) =&gt; {
    let sum = 0;
    for (const card of cardsOnHand) {
      sum = sum + card.faceValue;
      if (sum &gt; 21 &amp;&amp; hasAceInHand(cardsOnHand)) {
        // Transfer Ace's face value from 11 to 1
        sum -= 10; // - 11 + 1
      }
    }
    return sum;
}
</code></pre>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#Return_value" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#Return_value</a></sub></p>
    </div>