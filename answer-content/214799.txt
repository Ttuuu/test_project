<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I asked you how you would do it in jQuery and you said that you would do something like:</p>

<blockquote>
<pre><code>$.each(events, function(event){
    var el = $("&lt;div&gt;&lt;/div&gt;")
        .addClass("event")
        .css({ "height": event.duration + "px", "top": event.start + "px" })
        .text(event.title);
    $('.room').data('place', event.place_id).append(el);
});
</code></pre>
</blockquote>

<p>And sure, this would only loop through the <code>events</code> array once. But what happens in every iteration? It does a jQuery search for <code>$('.room').data('place', event.place_id)</code>, which is not a constant-time lookup operation, so this approach might be slower than what you think it is.</p>

<hr>

<p>Now, for your Vue approach. You said:</p>

<blockquote>
  <p>maybe I need to do it on backend to make a rooms array look like that: <code>{ id: 1, title: 'Room 1', events: [{ id: 1, title: 'Event 1', start: 90, duration: 30 }] }</code> </p>
</blockquote>

<p>And yes, I agree with this. Putting the <code>events</code> inside your rooms makes much more sense.</p>

<p>As for your Vue template, overall the code looks fine. I'm not a CSS expert so I don't know if there's something you can improve there, but there probably is. Maybe consider using <a href="https://css-tricks.com/snippets/css/complete-guide-grid/" rel="nofollow noreferrer">CSS Grids</a>, where each room could be one column, and time-slots could be rows? The current approach of having 1px = 1 minute seems a bit unnatural to me.</p>

<p>As for this part:</p>

<pre><code>&lt;div class="room" v-for="room in rooms" :key="room.id"&gt;
  &lt;span&gt;{{ room.title }}&lt;/span&gt;
  &lt;div class="event" 
    :style="{ top: event.start + 'px', height: event.duration + 'px'}" 
    v-for="event in events" 
    v-if="event.room_id === room.id"&gt;
  &lt;h5&gt;{{ event.title }}&lt;/h5&gt;
&lt;/div&gt;
</code></pre>

<p>The only thing I would change is to put <code>v-for</code> and <code>v-if</code> before your <code>:style</code>-binding, as they are more important to be aware about, this is mostly my personal opinion though.</p>

<pre><code>&lt;div class="room" v-for="room in rooms" :key="room.id"&gt;
  &lt;span&gt;{{ room.title }}&lt;/span&gt;
  &lt;div class="event" 
    v-for="event in events" 
    v-if="event.room_id === room.id"
    :style="{ top: event.start + 'px', height: event.duration + 'px'}" 
    &gt;
  &lt;h5&gt;{{ event.title }}&lt;/h5&gt;
&lt;/div&gt;
</code></pre>

<p>It would be nicer if your events would be inside the rooms, as then you could write:</p>

<pre><code>&lt;div class="room" v-for="room in rooms" :key="room.id"&gt;
  &lt;span&gt;{{ room.title }}&lt;/span&gt;
  &lt;div class="event" 
    v-for="event in room.events" 
    :style="{ top: event.start + 'px', height: event.duration + 'px'}" 
    &gt;
  &lt;h5&gt;{{ event.title }}&lt;/h5&gt;
&lt;/div&gt;
</code></pre>

<p>I would recommend in the future to use a <code>Room</code> component and a <code>RoomEvent</code> component so that you could write:</p>

<pre><code>&lt;Room v-for="room in rooms" :key="room.id" /&gt;
</code></pre>

<p>And the room-component:</p>

<pre><code>&lt;div class="room"&gt;
  &lt;span&gt;{{ room.title }}&lt;/span&gt;
  &lt;RoomEvent v-for="event in room.events" /&gt;
&lt;/div&gt;
</code></pre>

<p>I think that the <code>&lt;h5&gt;{{ event.title }}&lt;/h5&gt;</code> belongs inside the <code>RoomEvent</code></p>

<hr>

<p>Overall a nice job!</p>
    </div>