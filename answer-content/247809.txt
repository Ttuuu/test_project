<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Disclaimer</h1>
<p>I am more of a Java dev, so please excuse my non-pythonesque ideas.</p>
<h1>Style review</h1>
<p>Write code for someone else, not yourself (i.e. readable &amp; understandable).</p>
<p>You have non-descriptive variable names.</p>
<ul>
<li><code>i</code>: usually there is a better name for it, I would consider <code>i</code> viable in something like <code>for i in range</code></li>
<li><code>temp</code>: what does temp represent? Already processed characters, so maybe call it <code>processed_chars</code> or something</li>
<li><code>result</code>, <code>res</code> - almost identical, very confusing. A single variable named <code>result</code> could be OK in a function, Martin Fowler uses it, although Uncle Bob despises it. You are doing parsing, so a probable alternative could be <code>parsed</code> or the like.</li>
<li><code>res</code>: why do you have this variable in the first place? Just use a tuple deconstruction into something more meaningful:</li>
</ul>
<pre class="lang-py prettyprint-override"><code>parsed_list, new_i = parseToList(string, i+1)
</code></pre>
<p>I am not sure how python work, but maybe you could even replace <code>new_i</code> directly with <code>i</code>.</p>
<h1>Functionality review</h1>
<p>You never fail. Weird. Are you sure you can always parse everything successfully? Even though this is a very simple and permissive language, probably not. Edge cases:</p>
<ul>
<li><code>[</code></li>
<li><code>[a,]</code></li>
<li><code>[,a]</code></li>
</ul>
<h1>Design review</h1>
<p>First of all I will create a grammar. It will ease my review and it should have simplified you your implementation:</p>
<pre><code>list = "[" values "]"
# maybe values could be modified to accept dangling commas if you want
values = value { "," value }
value = list | string
string = &lt;anything except "[" "]" "," trimmed (i.e. no leadind or trailing whitespace)&gt;
</code></pre>
<p>Now we have a (context-free) grammar given by pseudo-EBNF. Usually lexer and parser are separate, but we don't really need special tokens, we could just use single characters as tokens. Usually a parser accepts a stream of tokens and outputs an AST. We don't need an AST, it could be directly interpreted as python values.
An alternative to using your whole <code>string</code> and <code>i</code> as a cursor is to use <code>string</code> as a stream of tokens, from which you take how many you want and return the rest (substring).</p>
<p>Now to implement a grammar, I would create a function for each non-terminal symbol (rule), f.e. <code>parse_list() -&gt; []</code>, <code>parse_values() -&gt; []</code>, <code>parse_value()</code>, <code>parse_string() -&gt; str</code>. <code>parse()</code> would just call <code>parse_values()</code>. If you wrap these in a class. If you fail to match a symbol, you should raise an exception or let it known in your return value.</p>
<p>So I would suggest signatures either:</p>
<pre class="lang-py prettyprint-override"><code>class Parser:
    def parse(input: string) -&gt; []:
        self.input = input
        parsed, unprocessed = self.parse_values(input)
        if unprocessed:
            # handle exception, maybe print
        return parsed


    def parse_list(cursor: int) -&gt; []
        # Parameter: cursor index in `input`
        # raises exception on error
        # the whole input is stored in class field

    def parse_list(unprocessed: str) -&gt; []
        # Parameter: the unprocessed input
        # raises exception on error

    def parse_list(unprocessed: str) -&gt; ([], str)
        # Parameter: the unprocessed input
        # Returns: (parsedList, new_unprocessed) on success
        #          (None, unprocessed) on error
        # takes from unprocessed[0]
</code></pre>
<p>Example implementation draft:</p>
<pre><code>def parse_list(unprocessed: str) -&gt; ([], str):
    matched, unprocessed = match(unprocessed, '[')
    if not matched:
        return None, unprocessed

    values, unprocessed = parse_values()
    if values == None:
        return None, unprocessed

    matched, unprocessed = match(unprocessed, ']')
    if not matched:
        return None, unprocessed

    return values

def match(unprocessed: str, to_match: str) -&gt; (bool, str):
    stripped = unprocessed.lstrip()
    if stripped.startswith(to_match):
        return True, stripped[to_match.len:]
    else:
        return False, unprocessed
</code></pre>
<p>If you keep a note of the remaining unprocessed input or the current cursor, you could report it when finding an error (f.e. in the raised exception)</p>
    </div>