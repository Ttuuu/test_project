<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This won't be a complete answer, but without getting into OOP you should see that there's A LOT of duplicated code. You can rewrite your for cycles in a method operating on just the changing parts. </p>

<pre><code>private static int rotate(final char c, int indexABCShift, final String characters){
    int indexABC = 0;
    for (int foo = 0; foo &lt; 26; foo++) {
        if (characters.charAt(foo) == c) {
            indexABC = foo + indexABCShift;
            if (indexABC &gt; 25) {
                indexABC -= 26;
            }
            if (indexABC &lt; 0) {
                indexABC += 26;
            }
            break;
        }
    }
    return indexABC;
}

private static StringBuilder encrypt(String message) {
    StringBuilder output = new StringBuilder();
    for (int messageIndex = 0; messageIndex &lt; message.length(); messageIndex++) {
        char c = message.charAt(messageIndex);
        if (c == ' ') {
            output.append(' ');
            continue;
        }
        int indexABC = 0;
        rightPosition++; // right most rotor turns
        if (rightPosition == 22) { // if V turns, rotor II turns
            midPosition++;
            if (midPosition == 5) { // if E turns, rotor I is turned
                leftPosition++;
            }
        }
        if (rightPosition &gt; 26) {
            rightPosition -= 26;
        }
        if (midPosition &gt; 26) {
            midPosition -= 26;
        }
        if (leftPosition &gt; 26) {
            leftPosition -= 26;
        }

        indexABC = rotate(c, rightPosition - ringR, ABC);
        c = III.charAt(indexABC);
        indexABC = rotate(c, - rightPosition + ringR, ABC);
        c = ABC.charAt(indexABC);
        indexABC = rotate(c, + midPosition - ringM, ABC);
        c = II.charAt(indexABC);
        indexABC = rotate(c, - midPosition + ringM, ABC);
        c = ABC.charAt(indexABC);
        indexABC = rotate(c, + leftPosition - ringL, ABC);
        c = I.charAt(indexABC);
        indexABC = rotate(c, - leftPosition + ringL, ABC);
        // reflector
        c = ReflectorB.charAt(indexABC);
        indexABC = rotate(c, + leftPosition - ringL, ABC);
        c = ABC.charAt(indexABC);
        indexABC = rotate(c, - leftPosition + ringL, I);
        c = ABC.charAt(indexABC);
        // Reflected Middle Rotor
        indexABC = rotate(c, + midPosition - ringM, ABC);
        c = ABC.charAt(indexABC);
        indexABC = rotate(c, - midPosition + ringM, II);
        c = ABC.charAt(indexABC);
        indexABC = rotate(c, + rightPosition - ringR, ABC);
        c = ABC.charAt(indexABC);
        indexABC = rotate(c, - rightPosition + ringR, III);
        c = ABC.charAt(indexABC);
        output.append(c);
    }
    return output;
}
</code></pre>

<p>This alone will save you 150 lines. That's one of the main programming good habits - Don't Repeat Yourself. I cannot offer some OOP solution to the problem without really understanding the enigma, but you should start with splitting the code into smaller methods and keep the variables local inside the methods as much as possible. For example the ring positions don't need to be static variables - you can compute them in the main and pass them to the encrypt function. Also you can split the encrypt by separating iteration over the input string and encrypting single letter.</p>
    </div>