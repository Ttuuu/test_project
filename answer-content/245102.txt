<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Solve with math</h2>
<p>This is a math problem. Let say we have a competition: <code>[a, b, c]</code> score <code>[5, 2, 10]</code>, this means that the scoring is:</p>
<p><span class="math-container">$$
\begin{array}{|l|r|r|r|}
&amp; \textrm{a} &amp; \textrm{b} &amp; \textrm{c} &amp; \textrm{res} \\
\hline
\textrm{a} &amp; \text{NaN} &amp; 3 &amp; -5 &amp; -2 \\
\textrm{b} &amp; -3 &amp; \text{NaN} &amp; -8 &amp; -11\\
\textrm{c} &amp; 5 &amp; 8 &amp; \text{NaN} &amp; 13
\end{array}
$$</span></p>
<p>As you should be able to see, you don't need to calculate the sum again and again for each pair.</p>
<p>Solution:<br>
For each team:
<span class="math-container">\$\text{team's score} \times \text{number of teams} - \text{total score}\$</span>.</p>
<pre><code>score[a] =  5 * 3 - 17 =  -2
score[b] =  2 * 3 - 17 = -11
score[c] = 10 * 3 - 17 =  13
</code></pre>
<p>The time complexity of this is <span class="math-container">\$O(n)\$</span>. Calculate all pairs is <span class="math-container">\$O(n^2)\$</span>.</p>
<h2>Some code</h2>
<p>Here I will save the total score for each team (not the history of the scores _  the code change for that would not be big tho).</p>
<pre><code>from collections import Counter, defaultdict

# test data
games = [['A', 'B'], ['B'], ['A', 'B', 'C', 'D', 'E'], ['B'], ['A', 'B', 'C'], ['A'], ['B', 'C'], ['A', 'B'],
         ['C', 'A', 'B'], ['A'], ['B', 'C']]

gamescores = [[1.0, 5.0], [3.0], [2.0, 7.0, 3.0, 1.0, 6.0], [3.0], [5.0, 2.0, 3.0], [1.0], [9.0, 3.0], [2.0, 7.0],
              [3.0, 6.0, 8.0], [2.0], [7.0, 9.0]]

wd = defaultdict(float)

for players, scores in zip(games, gamescores):
    if len(players) == 1:
        continue
    total_sum = sum(scores)
    for player, score in zip(players, scores):
        wd[player] = wd[player] + score * len(scores) - total_sum

print(wd)
</code></pre>
<h3>Result</h3>
<pre><code>defaultdict(&lt;class 'float'&gt;, {'A': -12.0, 'B': 32.0, 'C': -17.0, 'D': -14.0, 'E': 11.0})
</code></pre>
<h3>Edit: Grouping based on last results</h3>
<p>OP clarified that each competition affect the total score taking from the previous competition because the grouping changes.</p>
<p>In the example, <code>scores: [1.0, 5.0], [3.0], [2.0, 7.0, 3.0, 1.0, 6.0], [3.0], [5.0, 2.0, 3.0], [1.0], [9.0, 3.0], teams: [a,b], [b], [a,b,c,d,e], [b], [a,b,c]</code>,</p>
<p>A scores as:</p>
<pre>
1st game: -4
2nd game:  0 (he was not participant)
3rd game: -6 (because at 5th game, only A, B, C are competing)
</pre>
<p>For that, we can pre-process the groups to make sure that only the competitors of next game are considered.</p>
<h3>Pre-processing idea</h3>
<p>That is just an example how to solve the issue using the pre-processing. Notice that is a backward thinking. Next game determines which competitors matter in terms of scoring. Therefore, the processing is done in reverse order.</p>
<pre class="lang-py prettyprint-override"><code>def pre_process(games, gamescores):
    last_game = {}
    result = []
    for game in zip(reversed(games), reversed(gamescores)):
        game_dict = dict(zip(game[0], game[1]))
        if len(game[0]) == 1:
            result.append(game_dict)
            continue
        if len(last_game) != 0:
            union_set = set(game_dict.keys()).intersection(set(last_game.keys()))
            last_game = game_dict
            game_dict = {k: game_dict[k] for k in union_set}
        else:
            last_game = game_dict
        result.append(game_dict)
    return result


pairs = list(reversed(pre_process(games, gamescores)))
wd = defaultdict(float)
for game in pairs:
    players = list(game.keys())
    scores = [game[k] for k in players]
    if len(players) == 1:
        continue

    total_sum = sum(scores)
    for player, score in zip(players, scores):
        wd[player] += score * len(scores) - total_sum
    print(wd)

</code></pre>
    </div>