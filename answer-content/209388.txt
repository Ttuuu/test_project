<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code cannot work with iterables of unknown length:</p>

<pre><code>def unknown_length():
    i = 0
    while i &lt; 12:
        yield i
        i += 1

items = iter(unknown_length())
for item_group in iter_group(items, 5):
    for item in item_group:
        print(item,end=' ')
    print()
</code></pre>

<blockquote>
  <p>TypeError: object of type 'generator' has no len()</p>
</blockquote>

<hr>

<p><strike>
This code <code>(iterable[i] for i in range(start,min(length-1,end)))</code> is creating a new tuple containing a shallow copy of each group of <code>batch_size</code> items, although only 1 at a time so you aren't ending up with a complete copy of the iterable all at once, requiring double the memory.
</strike></p>

<hr>

<p>The <code>range(start,min(length-1,end))</code> omits the your last data item!  The end limit is non-inclusive, so the last item you get is <code>iterable[length-2]</code>.</p>

<hr>

<p>The following <code>iter_group</code> yields a nested generator which <code>yield</code> items until <code>batch_size</code> items have been returned.  Then, the next nested generator will be yielded, until the list item has been produced.</p>

<pre><code>def iter_group(iterable, batch_size:int):
    it = iter(iterable)

    def group(first):
        yield first
        try:
            for _ in range(batch_size - 1):
                yield next(it)
        except StopIteration:
            pass

    try:
        while True:
            yield group(next(it))
    except StopIteration:
        pass
</code></pre>

<p>If you want to try to optimize this for sliceable iterables, you could try:</p>

<pre><code>def iter_group(iterable, batch_size:int):

    try:
        # Maybe we can use slices?
        start = 0
        n = len(iterable)
        while start &lt; n:
            yield iterable[start:start+batch_size]
            start += batch_size

    except TypeError:
        # Nope!  Couldn't get either the length or a slice.

        it = iter(iterable)

        def group(first):
            yield first

            try:
                for _ in range(batch_size - 1):
                    yield next(it)
            except StopIteration:
                pass

        try:
            while True:
                yield group(next(it))
        except StopIteration:
            pass
</code></pre>
    </div>