<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are interested in seeing my (somewhat OOP underdeveloped) though process, you can look below. However, 200_success has presented a fleshed out solution which appears to have optimally tuned parts, so I would recommend their solution as a final product. I have no final code at the end of mine.</p>

<hr>

<p>Here's some suggestions. This answer is an iterative process of explanation.</p>

<hr>

<h1>Initialization</h1>

<h2>Use <code>if __name__ == '__main__'</code>:</h2>

<p>In addition to having all of the procedural initialization code at the bottom, prefix it with an <code>if __name__ == '__main__'</code>. This allows other people to import parts of your module (the file) without running the code at the bottom.</p>

<p>(See also: <a href="https://stackoverflow.com/a/419185/8117067">What does if <code>__name__ == “__main__”:</code> do?</a>)</p>

<h2>Python's <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting options</a> are awesome.</h2>

<p>Instead of <code>"Player" + str(i)"</code>, do <code>f"Player {i}"</code>. Prefixing a string with <code>f</code> makes the string a <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">formatted string literal</a>, which makes it easier to concatenate string and other variables by just putting the variable in curly brackets. This is new in Python 3.6.</p>

<h2>Utilize <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a></h2>

<p>Instead of</p>

<pre><code>victims = []
for i in range(4):
    victims.append(Player(f"Player {i}", "", 1, 0, [random.randint(0, 6) for i in range(2)]))
</code></pre>

<p>just do:</p>

<pre><code>victims = [Player(f"Player {i}", "", 1, 0, [random.randint(0, 6), random.randint(0, 6)]) for i in range(4)]
</code></pre>

<h2><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>er is sometimes only negligibly better</h2>

<p>Instead of repeating <code>random.randint(0, 6)</code> twice in <code>[random.randint(0, 6), random.randint(0, 6)]</code>, one could just do a list comprehension <code>[random.randint(0, 6) for i in range(2)]</code> In this example, it makes almost no difference, but as you scale up or generalize, it can be useful to consider.</p>

<p>But this is only a taste of DRYer code; more of this idea will be developed later.</p>

<hr>

<h1><code>Player.move()</code> and <code>Player.is_stuck()</code> methods</h1>

<h2>Define often-used "constants" as class variables, not local method variables...</h2>

<p>Instead of this:</p>

<pre><code>class Player:

    # ...

    def move(self, arena_limits, player_pos):
        change = {"left": -1, "right": 1, "up": 1, "down": -1}
</code></pre>

<p>do this:</p>

<pre><code>class Player:

    # ...

    change = {"left": -1, "right": 1, "up": 1, "down": -1}

    def move(self, arena_limits, player_pos):

        # ...
</code></pre>

<p>There's no reason to redefine this each time the method is called.</p>

<h2>...and utilize <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enums</a></h2>

<p>Enums can be incredibly useful in any programming language, because they define a restricted set of values. Instead of defining a dictionary of strings, you can define some enums.</p>

<p>For more information about the <em>why</em> of enums, I would recommend reading <a href="https://stackoverflow.com/a/4709224/8117067">this</a> Stack Overflow answer.</p>

<h2>Use <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> code</h2>

<p>When I see something like the below, I immediately know the code can be made more compact, because the entire control flow is repeated.</p>

<pre><code>if direction in ("left", "right"):
    in_limits = 0 &lt;= self.position[0] + (change[direction] * self.speed) &lt;= arena_limits[0]
    if in_limits and [self.position[0] + (change[direction] * self.speed), self.position[1]] not in player_pos:
        self.position[0] += change[direction] * self.speed
    else:
        self.move(arena_limits, player_pos)
if direction in ("up", "down"):
    in_limits = 0 &lt;= self.position[1] + (change[direction] * self.speed) &lt;= arena_limits[0]
    if in_limits and [self.position[0], self.position[1] + (change[direction] * self.speed)] not in player_pos:
        self.position[1] += change[direction] * self.speed
    else:
        self.move(arena_limits, player_pos)
</code></pre>

<p>Also you use <code>(change[direction] * self.speed)</code> all over the place in this section, when you could just assign it to a variable (I chose to call it <code>displacement</code>.)</p>

<p>Now, it <em>can</em> be tricky, and require other constructs, and sometimes it's more efficient to repeat code. But generally, 99% of the time, it's a big no-no.</p>

<p>Now, the example I gave is nothing compared to the (apologies) horrendous repetition in this block:</p>

<pre><code>    can_go_left = ([self.position[0] + (-1 * self.speed), self.position[1]] not in player_pos) and \
                  0 &lt;= self.position[0] + (-1 * self.speed) &lt;= arena_limits[0]
    can_go_right = ([self.position[0] + (1 * self.speed), self.position[1]] not in player_pos) and \
                   0 &lt;= self.position[0] + (1 * self.speed) &lt;= arena_limits[0]
    can_go_up = ([self.position[0], self.position[1] + (1 * self.speed)] not in player_pos) and \
                0 &lt;= self.position[1] + (1 * self.speed) &lt;= arena_limits[1]
    can_go_down = ([self.position[0], self.position[1] + (-1 * self.speed)] not in player_pos) and \
                   0 &lt;= self.position[1] + (-1 * self.speed) &lt;= arena_limits[1]
    if not (can_go_up or can_go_down or can_go_left or can_go_right):
</code></pre>

<p>... but more on that later.</p>

<h2>Avoid unnecessary recursion...</h2>

<p>...like this (consider it <em>in context</em>):</p>

<pre><code>def move(self, arena_limits, player_pos):

    # ...

    self.move(arena_limits, player_pos)
</code></pre>

<p>This is a bit debatable, but generally it's better practice to program procedurally when it's equal effort. Getting a bit technical, recursion adds variables to the stack when it goes one level deeper, taking up more memory than necessary. This is a bit inefficient, and on a large scale can result in stack overflow (or "<a href="https://docs.python.org/3/library/exceptions.html#RecursionError" rel="nofollow noreferrer">RecursionError</a>", because Python catches stack overflow.)</p>

<h2><code>move()</code> refactored I</h2>

<pre><code>from enum import Enum

# ...

class Movement
    # (direction, magnitude)
    LEFT = (0, -1)
    RIGHT = (0, 1)
    UP = (1, 1)
    DOWN = (1, -1)

def move(self, arena_limits, player_pos):
    if not self.is_stuck(arena_limits, player_pos):
        while True:
            movement = random.choice(list(self.Movement))
            direction, magnitude = move[0], move[1]
            displacement = magnitude * self.speed
            in_limits = 0 &lt;= self.position[direction] + displacement &lt;= arena_limits[0]
            destination = self.position.copy()
            destination[direction] += displacement
            if in_limits and destination not in player_pos:
                self.position[direction] += displacement
                break
</code></pre>

<h2>But wait, there's more!</h2>

<p><code>Player.is_stuck()</code> does most of the same logic that is repeated continually in <code>Player.move()</code>. By being clever in refactoring and combining code, one can almost like magic eliminate most of the logic, just letting DRY and efficient code take care of the work. Basically, we just developed a general method to find accessible location in <code>move()</code>, so now we can apply it to the starting logic, and get that logic out the way before ever choosing an individual direction:</p>

<h2><code>move()</code> refactored II</h2>

<pre><code>def move(self, arena_limits, player_pos):
    accessible = self.accessible_positions(arena_limits, player_pos)
    if accessible:
        movement = random.choice(accessible)
        self.position[movement[0]] += movement[1] * self.speed

def accessible_positions(self, arena_limits, player_pos):
    accessible = []
    for m in self.Movement:
        move = m.value
        direction, magnitude = move
        displacement = magnitude * self.speed   
        destination = self.position.copy()
        destination[direction] += displacement
        if 0 &lt;= self.position[direction] + displacement &lt;= arena_limits[0] and destination not in player_pos:
            accessible.append(move)
    return accessible
</code></pre>

<hr>

<h1>Use more standard loop flow</h1>

<p>Declaring a boolean to serve as a loop check variable is generally unnecessary and can lead to problems (e.g. the loop continuing to do things before it checks arrives at the condition check). <code>while True:</code> ... <code>if whatever: break</code> is generally a more recognizable, more understandable, and more concise idiom.</p>

<hr>

<h1>Conclusion</h1>

<p>This answer will stay unfinished, but hopefully the thought process can be useful.</p>
    </div>