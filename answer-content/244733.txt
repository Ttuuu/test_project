<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should measure the duration of each step in the algorithm to detect where the bottleneck(s) is/are. You can do that using <code>console.time("id")</code> paired with <code>console.timeEnd("id")</code>:</p>
<pre><code>function findPrimes(count) {
    console.time("prime generation");
    storePrimes(count);
    console.timeEnd("prime generation")
    console.time("finding");
    let results = findLargestSum();
    console.timeEnd("finding");
    console.log("Largest sum'o'primes of prime consecutives under " + count + " is: " + results.largestSum + " with " + results.termsCount + " terms.");
}
</code></pre>
<p>You'll then detect that <code>storePrimes()</code> takes considerably long time to generate primes up to <code>1,000,000</code>.</p>
<hr>
<p>One optimization could be in <code>isPrime()</code>:</p>
<pre><code>function isPrime(number) {
  if (number &lt; 2) return false;
  if (number == 2) return true;
  if (number % 2 == 0) return false;

  let sqrt = Math.round(Math.sqrt(number));

  for (let n = 3; n &lt;= sqrt; n += 2) {
    if (number % n == 0) return false;
  }

  return true;
}
</code></pre>
<p>As seen it is only necessary to check for values up to and including the square root of the number. And by handling <code>2</code> as a special case you only need to check odd numbers from <code>3</code> and up.</p>
<p>But <code>storePrimes()</code> is still too slow, and I think it's about that you constantly push new primes on <code>primeNumbers</code>. Instead you can use a generator function in the following way:</p>
<pre><code>function* createPrimes(limit) {
  yield 2; 
  for (let i = 3; i &lt; limit; i += 2) { // You can start at 3 and only iterate over odd numbers
    if (isPrime(i)) {
      yield i;
    }
  }
}
</code></pre>
<p>and then in <code>findPrimes()</code> call it as:</p>
<pre><code>function findPrimes(limit) {
  primeNumbers = Array.from(createPrimes(limit));
  let results = findLargestSum(limit);
  console.log("Largest sum'o'primes of prime consecutives under " + limit + " is: " + results.largestSum + " with " + results.termsCount + " terms.");
}
</code></pre>
<p>This will speed up the process beyond compare. Notice that I've changed some names like <code>count</code> to <code>limit</code> because it determines the largest prime - not the number of primes to generate.</p>
<hr>
<p>Using <code>forEach()</code> in this exact situation isn't a good idea, because you can't step out whenever you like, but have to iterate the entire prime set over and over again unnecessarily in your three nested loops. That is very inefficient. Besides that, I find it rather difficult to read and understand nested <code>forEach()</code>-calls as in your code.</p>
<p>Instead you should use good old <code>for</code>-loops, because you then can break out when ever the state makes it meaningless to continue the loop:</p>
<pre><code>function findLargestSum() {
  let termsCount = 0;
  let sumOfTerms = 0;
  let length = primeNumbers.length;

  for (let i = 0; i &lt; length; i++) {
    let targetSum = primeNumbers[i]; // keeps track of possible sum

    for (var j = 0; j &lt; i &amp;&amp; i - j &gt; termsCount; j++) {
      let sum = 0;
      for (var k = j; k &lt; i &amp;&amp; sum &lt; targetSum; k++) {
        sum += primeNumbers[k];
      }

      if (k - j &gt; termsCount &amp;&amp; sum == targetSum) {
        termsCount = k - j;
        sumOfTerms = targetSum;
      }
    }
  }

  return { largestSum: sumOfTerms, termsCount: termsCount };
}
</code></pre>
<p>This is a significant improvement on performance, but is still rather slow. I have tried different steps to optimization, but I can't point out the bottlenecks. But below is my take on the challenge:</p>
<pre><code>function findLargestSum(limit) {
  let resultSum = 0;
  let resultCount = -1;

  for (var i = 0; i &lt; primeNumbers.length &amp;&amp; primeNumbers.length - i &gt; resultCount; i++) {
    let sum = 0;

    for (var j = i; j &lt; primeNumbers.length; j++) {
      let prime = primeNumbers[j];

      sum += prime;
      if (sum &gt;= limit) {
        sum -= prime;
        break;
      }
    }
    j--;


    while (j &gt;= i &amp;&amp; !isPrime(sum)) {
      sum -= primeNumbers[j--];
    }

    if (j &gt;= i &amp;&amp; j - i &gt; resultCount) {
      resultSum = sum;
      resultCount = j + 1 - i;
    }
  }

  return { largestSum: resultSum, termsCount: resultCount };
}
</code></pre>
<p>It repeatedly sums up the primes from each prime in the list and backtracks by subtracting the largest prime until the sum is either a prime or zero. It continues as long as the number of primes beyond <code>i</code> is greater than the length of an already found sequence.</p>
    </div>