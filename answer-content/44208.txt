<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Actually, there is an even better structure than maps and arrays for this kind of counting: <a href="https://code.google.com/p/guava-libraries/wiki/NewCollectionTypesExplained"><code>Multiset</code>s</a>. <a href="https://code.google.com/p/guava-libraries/wiki/NewCollectionTypesExplained">Documentation of Google Guava mentions a very similar case</a>:</p>

<blockquote>
  <p>The traditional Java idiom for e.g. counting how many times a word occurs in a document is something like:</p>

<pre><code>Map&lt;String, Integer&gt; counts = new HashMap&lt;String, Integer&gt;();
for (String word : words) {
  Integer count = counts.get(word);
  if (count == null) {
    counts.put(word, 1);
  } else {
    counts.put(word, count + 1);
  }
}
</code></pre>
  
  <p>This is awkward, prone to mistakes, and doesn't support collecting a variety of useful statistics, like the total number of words. We can do better. </p>
</blockquote>

<p>With a multiset you can get rid of the <code>contains</code> (or <code>if (get(c) != null)</code>) calls, what you need to call is a simple <code>add</code> in every iteration. Calling <code>add</code> the first time adds a single occurrence of the given element.</p>

<pre><code>String input = "Hello world!";

Multiset&lt;Character&gt; characterCount = HashMultiset.create();
for (char c: input.toCharArray()) {
    characterCount.add(c);
}
for (Entry&lt;Character&gt; entry: characterCount.entrySet()) {
    System.out.println(entry.getElement() + ": " + entry.getCount());
}
</code></pre>

<p>(See also: <em>Effective Java, 2nd edition</em>, <em>Item 47: Know and use the libraries</em> The author mentions only the JDK's built-in libraries but I think the reasoning could be true for other libraries too.)</p></li>
<li><blockquote>
<pre><code>int length = sample.length();
....
for (int i = 0; i &lt; length; i++) {
    char c = arraysample[i];
</code></pre>
</blockquote>

<p>You could replace these three lines with a foreach loop:</p>

<pre><code>for (char c: arraysample) {
</code></pre></li>
<li><blockquote>
<pre><code>int length = sample.length();
....
for (int i = 0; i &lt; length; i++) {
    char c = arraysample[i];
</code></pre>
</blockquote>

<p>You don't need the <code>length</code> variable, you could use <code>sample.length()</code> in the loop directly:</p>

<pre><code>for (int i = 0; i &lt; sample.length(); i++) {
</code></pre>

<p>The JVM is smart, it will optimize that for you.</p></li>
<li><blockquote>
<pre><code>char arraysample[] = sample.toCharArray();
int length = sample.length();
for (int i = 0; i &lt; length; i++) {
    char c = arraysample[i];
</code></pre>
</blockquote>

<p>It's a little bit confusing that the loop iterating over <code>arraysample</code> but using <code>sample.length()</code> as the upper bound. Although their value is the same it would be cleaner to use <code>arraysample.length</code> as the upper bound.</p></li>
</ol>
    </div>