<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Comments</h1>
<p>Out of the 252 lines in your program, 85 of them are comments or contain comments! Comments can be really useful, when used appropriately. But comments like</p>
<pre><code># Send the request
response = self.api(data)
...
# Create an instance of wraith
wraith = Wraith(connect_url, CRYPT_KEY, aes)
</code></pre>
<p>which are explaining something very obvious should be removed. Comments should be used mainly when explaining <em>why</em> you did something, or a complex part of your program (i.e, an algorithm).</p>
<h1>Inheriting from <code>object</code></h1>
<p>In python-3.x, you don't need to inherit from object, as all classes are <a href="https://stackoverflow.com/a/45062077/8968906">new-style</a>.</p>
<h1>Building Dictionaries</h1>
<p>I'm not really sure why you're building <code>data</code> in steps, when you can initialize all that information in one step. While it may look a little nicer to build in multiple steps, it's unnecessary.</p>
<h1>Format Strings</h1>
<p>Instead of appending variables to strings, you can directly include them into the string. I see you've already utilized <code>.format()</code>, but consider <code>f""</code>:</p>
<pre><code>if INTERACTION_LOGGING: 
    print(f"\n[CLIENT]:\n{json.dumps(data_dict)}\n")
</code></pre>
<p>Now instead of having a mess appending <code>json.dumps</code> between the <code>\n</code> characters, you can format them both in one line.</p>
<h1>Considering Line Length</h1>
<p>Python's style guide PEP 8 declares that <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow noreferrer">lines should be no longer than 79 characters.</a> This line:</p>
<pre><code>prefix=("".join([random.choice("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890") for i in range(5)])+"Wr7H")
</code></pre>
<p>is a staggering 124 characters! It's also rather hard to read. I would put the long alphabet string into a different variable, like <code>chars</code>, then <code>random.choice(chars)</code>.</p>
<h1>Operator Spacing</h1>
<p>There should be a space before and after every operator (<code>+-*\=</code>) (unless passing default parameters).</p>
<h1>Indentation</h1>
<p>Regardless of how many lines are after an <code>if/else/try/except/while</code> etc, you should always indent after that. It's crucial for keeping your code in a readable format.</p>
<h1>Unnecessary <code>else</code></h1>
<p>When you're returning a value/boolean in the initial <code>if/try</code>, an <code>else: return ...</code> is not necessary. Take a look:</p>
<pre><code>if a &gt; b:
    return c
else:
    return d
</code></pre>
<p>to</p>
<pre><code>if a &gt; b:
    return c
return d
</code></pre>
<p>(Can be simplified more, but doesn't apply to this case)</p>
    </div>