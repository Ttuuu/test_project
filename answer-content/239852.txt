<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For me, this is a little bit unclear</p>

<pre><code>def list_diff(list1, list2):
    """Returns a new list with the items in list1 that do not belong to list2"""
    return list(set(list1) - set(list2))
</code></pre>

<p>since you don't just return a new list with the items in <code>list1</code> that are not in <code>list2</code>, but you also remove duplicates from <code>list1</code> (which maybe is what you want to do?), and you change the order of the list. If you wanted to "return a new list with the items in list1 that are not in list2" (quoting because I'm not sure what you mean by "do not belong to"), you could also write <code>return [digit for digit in list1 if digit not in list2]</code>.</p>

<p>And I think I also find the docstring for </p>

<pre><code>def related(path1, path2):
    """Returns True if path1 is related to path2, False otherwise"""
    return list_diff(path2.split('.'), path1.split('.')) == []
</code></pre>

<p>a little bit confusing. I would also like it if you type hinted, or if you expanded on your docstring to include argument and return description; you write a little with reST-style in the function above so why not also here? Speaking of this function, by the way, I like that you're comparing against an empty list. It may bring a tiny overhead in creating the list, but it helps the readability a lot.</p>

<p>I think the "main" function (<code>get_unknown_data_relations</code>) also could benefit from a little bit of work on the docstring. It's descriptive, but 6 examples (if you count also the in-line one) seems a bit exaggerated. It could maybe also be turned into something a bit more pythonic, but it's good enough to not struggle with trying to turn it into a list comprehension.</p>

<hr>

<p>I like that you've written tests. I don't (have to) write docstrings for my tests, so I would skip that since the names tend to describe the tests well enough, but maybe you have a different workflow. I would recommend looking into <a href="https://docs.pytest.org/en/latest/fixture.html" rel="nofollow noreferrer">fixtures</a> if you haven't. You could also have a look at mutation testing, but maybe you already have and maybe all of your tests are already sufficiently safe.</p>
    </div>