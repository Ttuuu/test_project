<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>This is clean code for a hobbyist. ML code in particular can end up being a procedural mess, just carrying out one imported function after another, but this is quite good.</p></li>
<li><p>It's great that you have docstrings with explanations of the arguments, but the explanations of the functions/methods themselves are a little sparse. The odd comment would help a lot too.</p></li>
<li><p>Try to follow PEP8. It's the standard style for all Python code and is generally followed by all Python programmers (4 spaces for indent, 2 spaces between functions, etc).</p></li>
<li><p>Immediately I see that you're importing <code>model</code> in <code>main</code> and <code>main</code> in <code>model</code>. Imports should follow a hierarchy with no cycles. i.e. if A imports from B imports from C, C should never import from A, but it's ok if A imports directly from C.</p></li>
<li><p>Typically, a file called <code>main</code>, <code>run</code>, <code>execute</code> or whatever will import other worker functions from elsewhere, then handle calling them in the correct way. This often means argument parsing is contained in the <code>main</code> file but not a lot else. Given that you have a lot of logic for generating and sorting data, I would separate this out.</p></li>
<li><p>When comparing a <code>var</code> to <code>None</code>, use the idioms <code>var is None</code> or <code>var is not None</code>.</p></li>
<li><p>Try to use proper paths with os.path rather than just strings like <code>'/dataset/segmented_images'</code>. This means you can run the script from anywhere and still find the files/directories you want.</p></li>
<li><p>You check <code>seg_dir</code> is not an empty string, I would be more explicit and have it either be <code>None</code> or the full path described above. Explicitly assigning something as <code>None</code> removes ambiguity. Let's say for example a path is where you are, does the path being <code>''</code> mean you've found it or not? If the path is <code>None</code> however, obviously you haven't found it.</p></li>
<li><p>Frequently, your variable names are exactly the same as the keyword arguments. This is fine, except the names are often fairly non-descript: <code>inputs</code>, <code>filters</code> etc. Otherwise, variable names are quite good (concise and clear).</p></li>
<li><p>You <code>enumerate()</code> over images in <code>load_data()</code> but don't use the index, just loop over it with a <code>for</code> loop.</p></li>
<li><p>You don't use <code>glob</code> as an import, nor <code>activation</code> as an argument (in <code>trans_conv()</code>).</p></li>
<li><p><code>UNet()</code> would be a lot nicer with loops to remove the repeated code and unnecessary variable assignments. I would suggest one loop for pre-training and another for post.</p></li>
<li><p>In <code>load_data()</code>, caching the result of <code>int(len(row_img) * train_val_rate</code> would make for much cleaner code, and would tell you what that index actually represents (with a good variable name).</p></li>
<li><p>You make quite a few assumptions that the code will work as intended, far too hopeful! As an example, say you generate an empty list; on some condition you fill the list; then you assume the list has been filled and loop over it. This is fine if the condition is fulfilled, but if it's not then the program will break. Take a look at <code>load_data()</code> and consider how easy it would be to find if there was a problem with how <code>row_img</code> is (or isn't) being filled.</p></li>
</ul>

<p>That's how the code <em>looks</em>; I can't really test how it <em>runs</em> without some sample data and expected in/outputs.</p>
    </div>