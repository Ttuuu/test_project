<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Observation</h2>
<p>I normally don't see a <code>parent</code> pointer in a binary tree.<br>
Because you have to keep and maintain this extra pointer your code is a lot more complicated then it needs to be.</p>
<hr>
<p>The <code>Node</code> object is part of <code>BST</code> so you don't need need an interface to protect you from changes. Any changes in the BST or node are going to result in changes in the other.</p>
<p>As a result I would simplify the <code>Node</code> to be a simple structure and get rid of that confusing mess of accessor functions.</p>
<hr>
<p>Personally I don't use smart pointers to build containers. The container is its own manager of memory abstracting that out is redundant. Though others would argue with me on that point and I do see their point.</p>
<hr>
<p>Your code can only store <code>int</code>. Why did you make this limitation. A simple templatization will allow you to store any type that is comparable.</p>
<h2>Alternative</h2>
<p>This is to show that you made the code twice as long by simply adding the parent member to the class.</p>
<pre><code>template&lt;typename T&gt;
class BST
{
    struct Node
    {
        Node*     left;
        Node*     right;
        T         value;
    };
    Node* root = nullptr;

    // This function assumes node is not null.
    // So check before you call.
    Node* findLeftMostNode(Node* node) {
        return node-&gt;left == nullptr ? node: findLeftMostNode(node-&gt;left);
    }

    Node* insertNode(Node* node, T consT&amp; val) {
        if (node == nullptr) {
            return new Node{nullptr, nullptr, val};
        }

        if (val &lt; node-&gt;value) {
            node-&gt;left = insertNode(node-&gt;left, val);
        }
        else {
            node-&gt;right = insertNode(node-&gt;right, val);
        }
        return node;
    }
    Node* deleteNode(Node* node, T const&amp; val)
    {
        if (node == nullptr) {
            return nullptr;
        }
        if (val &lt; node-&gt;val) {
            node-&gt;left = deleteNode(node-&gt;left, val);
        }
        else if (val &gt; node-&gt;val) {
            node-&gt;right = deleteNode(node-&gt;right, val);
        }
        else {
            // The interesting part.
            Node* old = node;           // the node to delete;

            // If both children are null.
            // Simply delete the node and return nullptr
            // as the value to be used for this point.
            if (node-&gt;left == nullptr &amp;&amp; node-&gt;right == nullptr) {
                node = nullptr;
            }
            // If either the left or right node is null
            // then we can use the other one as the replacement for
            // for node in the tree.
            else if (node-&gt;left == nullptr) {
                node = node-&gt;right;        // the node to return as replacement
            }
            else if (node-&gt;right == nullptr) {
                node = node-&gt;left;         // the node to return as replacement
            }
            else {
                // The shit just got real.
                // We can't delete the node (as we can return two pointers)
                old = nullptr;

                // This is the complicated part.
                // Remember that both the left and right are not nullptr.
                // So the leftmost sub-node of the right tree is the smallest
                // value in the right subtree. 
                // If we move this value to here then the right sub-tree can
                // still be on the right of this node.
                Node* leftMost = findLeftMostNode(node-&gt;right);
                // Don't need to re-shape the tree simply move the value.
                node-&gt;val   = leftMost-&gt;val;

                // We have moved the value.
                // But now we have to delete the value we just moved from the
                // right sub-tree. Luckily we have a function for that.
                node-&gt;right = deleteNode(node-&gt;right, leftMost-&gt;val);
            }
            delete old;
        }
        return node;
    }

    public:
        ~BST()
        {
            Node* bottomLeft = root == nullptr ? nullptr : findLeftMostNode(root);

            while (root) {
                Node* old = root;
                root = root-&gt;left;
                bottomLeft-&gt;left = old-&gt;right;
                bottomLeft = findLeftMostNode(bottomLeft);
                delete old;
            }
        }
        // Deletet the copy operator
        BST(BST const&amp;)           = delete;
        BST&amp; operator(BST const&amp;) = delete;

        // Simple interface.
        void insertNode(T const&amp; val) {root = insertNode(root, val);}
        void deleteNode(T const&amp; val) {root = deleteNode(root, val);}
}
</code></pre>
    </div>