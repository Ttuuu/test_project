<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-java prettyprint-override"><code>ArrayList&lt;String&gt; antes_almoco = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; depois_almoco = new ArrayList&lt;String&gt;();
</code></pre>

<ol>
<li>You should use the lowest common denominator that you always need, in this case you should declare the variables as <code>List&lt;String&gt;</code>, as you most likely don't need to bind yourself to a specific implementation.</li>
<li>Java naming conventions are lowerCamelCase for variables.</li>
</ol>

<hr>

<pre class="lang-java prettyprint-override"><code>int horas = total_min / 60;
</code></pre>

<p>Not a problem here, but be aware that dividing an integer by an integer will always yield an integer:</p>

<pre class="lang-java prettyprint-override"><code>double value = 5 / 2;
// value == 2.0
</code></pre>

<hr>

<pre class="lang-java prettyprint-override"><code>String path = "C:\\input.txt";
String outputDir = "C:\\output.txt";
</code></pre>

<p>You could make those relative to the jar, so this application would also run on non-Windows systems.</p>

<p>Also, the variable name is wrong, it's not a directory.</p>

<p>Also also, declare variables when they are needed, not all of them on the start of the block. It allows you to limit variables to certain scopes and makes refactoring easier as everything that belongs together is together.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>FileReader arq = new FileReader(path);
</code></pre>

<p>"Native" resources like files, sockets, etc. require a well-defined lifecycle so that they are correctly freed when not needed anymore. You can use the try-with-resources for that or call <code>close</code> on the resources you don't need anymore.</p>

<pre class="lang-java prettyprint-override"><code>FileReader reader = new FileReader(path);

// Application logic.

reader.close();
</code></pre>

<pre class="lang-java prettyprint-override"><code>try (FileReader reader = new FileReader(path)) {
    // Logic.
} // close being called automatically when leaving the block.
</code></pre>

<hr>

<p>There is the <code>java.time</code> API, especially the <code>Duration</code> class which seems to be highly applicable to your use-case.</p>

<p>Now what you could do with this is, to split it into functions and classes. That would be a good exercise. A good start for that would be to extract the representation of a single line to a class, like this:</p>

<pre><code>// All time-classes from java.time.

public class TimeEntry {
    public TimeEntry(LocalTime startTime, String name, Duration duration);
    public static TimeEntry create(String stringRepresentation);
    @Override
    public String toString();
    // Getters for these values.
}
</code></pre>

<p>The <code>create</code> Method is a factory method which parses the string representation as in the file and outputs a valid <code>TimeEntry</code> class or <code>null</code>. The <code>toString</code> returns the string representation as in the file.</p>

<p>That means that your loop can be basically summed up as:</p>

<pre class="lang-java prettyprint-override"><code>for (String line : lines) {
    TimeEntry timeEntry = TimeEntry.create(line);

    if (timeEntry != null) {
        doLogicOnIt(timeEntry);
    }
}

</code></pre>

<p>Also you should separate reading from writing. There are times when you want to do both at the same time, but to exercise separation I'd suggest to read the file in one function that returns a <code>List</code> of <code>TimeEntry</code>s, then there is another function manipulating that list and and a third writing it to a file. That has the upside that you can read and write the files faster, you're not bound to the files as input/output source and you can easier control the lifecycle of the file handles.</p>

<p>Now, there are times when reading everything into memory is inappropriate. That is when you either have a pipe as input, or if the state you're reading from the file is too large to keep in memory. Neither is the case here.</p>
    </div>