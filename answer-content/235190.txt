<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would write something like that:</p>

<pre><code>def combine(first, second):
    ret_list = []
    for i, j in zip(first, second):
        add = []
        if i is not None:
            add.extend(i)
        if j is not None:
            add.extend(j)
        ret_list.append(add)
    return ret_list
</code></pre>

<p>I don't know if it is the most python-ish way but it is ok I think...</p>

<p>I mean you can also write something like this:</p>

<pre><code>def combine(first, second):
    return [(i.extend(j) if not (i is None or j is None) else i if j is None else j) for i, j in zip(first, second)]
</code></pre>

<p>But you cannot read and debug that. So I would strongly recommend against it.</p>

<p>Btw: Did not test the last one so I hope I did not forget a closing bracket ;)</p>

<p><strong>Edit:</strong></p>

<p>In order to keep all elements you have to add something to the end. The zip() function stops iterating after the shortest element reached its end.
This is why the following method is needed instead of zip:</p>

<pre><code>def combine(first, second):
    ret_list = []
    for i, j in itertools.zip_longest(first, second):
        add = []
        if i is not None:
            add.extend(i)
        if j is not None:
            add.extend(j)
        ret_list.append(add)
    return ret_list
</code></pre>

<p>Note: Itertools simply must be imported first. (For Python2 it is <code>itertools.izip_longest()</code>...)</p>
    </div>