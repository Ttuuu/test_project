<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm uncertain of the efficiencies in a single wrapper like this. In developing applications with multiple modules and classes, I'm often needing to disable screen updates and such but without extremely careful planning I used to always step on my own toes. So I developed two routines that allow me to disable and enable Excel application level updates and give me enough tracking debug.</p>

<p>Using the calls becomes as easy as sprinkling these calls around:</p>



<pre><code>Sub SomeImportantWork()
    DisableUpdates
    '--- do stuff
    OtherImportantWork
    EnableUpdates
End Sub

Sub OtherImportantWork()
    DisableUpdates debugMsg:="enter OtherImportantWork"
    '--- work more stuff
    EnableUpdates debugMsg:="leave OtherImportantWork"
End Sub
</code></pre>

<p>My idea has been to not worry about whether I've call disable/enable, but only to make sure those calls are paired around any code that requires that protection.</p>

<p>At the module level, I define a structure and a private variable to hold any previous state information:</p>



<pre><code>Option Explicit

Private Type SavedState
    screenUpdate As Boolean
    calculationType As XlCalculation
    eventsFlag As Boolean
    callCounter As Long
End Type
Private previousState As SavedState
Private Const DEBUG_MODE = True
</code></pre>

<p>Then when I want to disable application updates, I call:</p>



<pre><code>Public Sub DisableUpdates(Optional debugMsg As String = "", _
                          Optional forceZero As Boolean = False)
    With Application
        '--- capture previous state if this is the first time
        If forceZero Or (previousState.callCounter = 0) Then
            previousState.screenUpdate = .ScreenUpdating
            previousState.calculationType = .Calculation
            previousState.eventsFlag = .EnableEvents
            previousState.callCounter = 0
        End If

        '--- now turn it all off and count
        .ScreenUpdating = False
        .Calculation = xlCalculationManual
        .EnableEvents = False
        previousState.callCounter = previousState.callCounter + 1

        '--- optional stuff
        If DEBUG_MODE Then
            Debug.Print "Updates disabled (" &amp; previousState.callCounter &amp; ")";
            If Len(debugMsg) &gt; 0 Then
                Debug.Print debugMsg
            Else
                Debug.Print vbCrLf
            End If
        End If
    End With
End Sub
</code></pre>

<p>And the mirroring method to re-enable is:</p>



<pre><code>Public Sub EnableUpdates(Optional debugMsg As String = "", _
                         Optional forceZero As Boolean = False)
    With Application
        '--- countdown!
        If previousState.callCounter &gt;= 1 Then
            previousState.callCounter = previousState.callCounter - 1
        Else
            '--- shouldn't get here
            Debug.Print "EnableUpdates ERROR: reached callCounter = 0"
        End If

        '--- only re-enable updates if the counter gets to zero
        '    or we're forcing it
        If forceZero Or (previousState.callCounter = 0) Then
            .ScreenUpdating = previousState.screenUpdate
            .Calculation = previousState.calculationType
            .EnableEvents = previousState.eventsFlag
        End If

        '--- optional stuff
        If DEBUG_MODE Then
            Debug.Print "Updates enabled (" &amp; previousState.callCounter &amp; ")";
            If Len(debugMsg) &gt; 0 Then
                Debug.Print debugMsg
            Else
                Debug.Print vbCrLf
            End If
        End If
    End With
End Sub
</code></pre>

<p>As you can see, I have a private module flag to turn on debug messages (<code>DEBUG_MODE</code>) if I need them and turn them off for production. You can turn this into a compiler directive flag if you feel you need a (small) runtime performance boost.</p>

<p>The <code>callCounter</code> lets me keep track of my "updates call stack". This is especially usedful when I started calling some library routines I had and those calls got rather deep. It certainly helped to track it down.'</p>

<p>Also, I can go into the <code>Immediate</code> window at any time and type <code>EnableUpdates(forceZero=True)</code> and get back to a known state manually.</p>
    </div>