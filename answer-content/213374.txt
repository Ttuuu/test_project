<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Short answer</h1>
<p>Yes, it's over-engineered.</p>
<h1>Long answer</h1>
<p>You mention that it reduces the number of <code>if</code> statements, but not why this is your goal. In fact, it's pretty clear that reducing the number of <code>if</code> statements isn't <em>inherently</em> a target of clean code, it's something you might want to do to achieve another goal. The possibilities that come to mind are:</p>
<p><strong>Enhance readibility</strong>: Your design has added a lot of code, including a new class and a helper method, and it's separated the definition of the checks away from where they're actually performed. It's a lot harder to read than if you'd just used in-line ifs.</p>
<p><strong>Improve testability</strong>: If you have a combinatorial explosion of conditions, it can be useful to be able to inject in a simple condition which always passes or always fails for your unit tests, then test the actual conditions separately. But it doesn't seem like you have that issue, or that your design intends to allow that kind of injection. Really all it means is that you have more complex code, which is now harder to fully test.</p>
<p>So I think this makes things worse rather than better. If you want to improve readability, there's a fairly common pattern for checking preconditions which looks like:</p>
<pre><code>private void Foo(int someNumber, string someText)
{
    CheckPrecondition(someNumber &gt; 0, "Numbers must be positive");
    CheckPrecondition(someText != null, "Text can't be null");

    // Rest of the method
}
</code></pre>
<p>This just requires a single helper method. No classes and no <code>Func</code>s. In your case you'd also want to pass the list of errors so that the check method could add its error if there was one. Even that is additional complexity and indirection for a relatively marginal benefit, but I think it's preferable to your version.</p>
    </div>