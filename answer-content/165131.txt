<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Did you ever test it with buffers which are multiples of 8 long?<br>
Because the last block won't get the nice printable display.</p></li>
<li><p>Are you sure the newline at the beginning of the output should be there?</p></li>
<li><p>Should the test-output really contain the implicit 0-terminator?</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>.</p></li>
</ol>

<p>Modified test-function:</p>

<pre><code>int main()
{
    const char test[] = "abcdef123456\0zyxwvu987654";
    std::string s(test, sizeof(test) - 1);

    std::cout &lt;&lt; "---\n";
    hex_dump(std::cout, s);
    std::cout &lt;&lt; "---\n";
    hex_dump(std::cout, "");
    std::cout &lt;&lt; "---\n";
    hex_dump(std::cout, "12345678");
    std::cout &lt;&lt; "---\n";
    hex_dump(std::cout, "1234567812345678");
    std::cout &lt;&lt; "---\n";
}
</code></pre>

<ol start="5">
<li><p>Do you have the opening brace for functions on its own line or not? Seems 2+1 for, 1 against...</p></li>
<li><p>If you only want to output a single character, using a character is potentially more efficient than a string.</p></li>
<li><p>The conditional operator is excellent for choosing between two values.</p></li>
<li><p>Beware of the implementation-defined signedness of plain <code>char</code>. The character-classification-functions inherited from C expect the value of an <code>unsigned char</code> or <code>EOF</code>.<br>
See <a href="https://en.cppreference.com/w/cpp/string/byte/isprint" rel="nofollow noreferrer"><code>std::isprint</code></a>.</p></li>
<li><p>Consider marking internal functions <code>static</code> to avoid externally visible symbols and promote inlining.</p></li>
<li><p>If you don't actually ever use a return-value, why provide one?</p></li>
</ol>

<pre><code>static void render_printable_chars(std::ostream&amp; os, const char* buffer, size_t bufsize)
{
    os &lt;&lt; " | ";
    for (size_t i = 0; i &lt; bufsize; ++i)
        os &lt;&lt; (std::isprint((unsigned char)buffer[i]) ? buffer[i] : '.');
}
</code></pre>

<ol start="11">
<li><p>Don't play around with a useless flag just because. Tracing data-flow is quite a lot more involved than following the program-flow.</p></li>
<li><p><a href="https://softwareengineering.stackexchange.com/questions/355107/check-if-variable-is-not-null-before-setting-to-null">Testing whether a variable already has a value before setting it to the same is rarely anything but obfuscation and pessimisation.</a></p></li>
<li><p>Don't use <code>std::endl</code> unless you <em>really</em> want to flush. And if that's your intention, consider being more explicit by using <code>std::flush</code>.</p></li>
<li><p>If you use C++17, you might want to accept a <code>std::string_view</code> by value instead of a <code>std::string</code> by constant reference. It's generally more efficient.</p></li>
</ol>
    </div>