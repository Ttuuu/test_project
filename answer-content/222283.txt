<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At first, I was surprised by the use of a class here, but having read the code (and especially the <code>main()</code>), it clearly makes sense.  It might be possible to make it more natural to use by providing a (const) iterator to access the values, rather than the <code>getCurrent()</code>/<code>getNext()</code> interface.</p>

<p>Consider defining the streaming operator in the implementation file.  Not a big deal for this small program, but in well-used classes, it can make a difference, by allowing the header to include <code>&lt;iosfwd&gt;</code> instead of <code>&lt;ostream&gt;</code>.  The former is intended to be faster for compilation.</p>

<p>A missing include in the implementation file: <code>&lt;climits&gt;</code> is required, for <code>CHAR_BIT</code>.</p>

<p>The class delegates all its resource management, smoothly satisfying the Rule of Zero.  <code>:-)</code></p>

<p>I don't see why we accept (signed) <code>int</code> as argument, if we're not allowing negative numbers.  There's a serious bug anyway, in that we <code>reserve(nTH)</code> before we know it's not negative.</p>

<p><code>-Weffc++</code> warns about the default-initialised <code>primes</code> member.  It's good to be explicit, and in this case it can simplify the constructor a little:</p>

<pre><code>SieveEratosthenes::SieveEratosthenes(int nTH)
    : inc(4)
    , next(5)
    , primes{2, 3}
{
    // Take care of people trying to be silly and break things.
    if (nTH &lt;= 0) {
        primes.clear()
        return;
    }
    if (nTH &lt;= 2) {
        primes.resize(nTH);
        return;
    }

    // We know we will have `nTH` primes.
    primes.reserve(nTH);
</code></pre>

<p><code>std::vector&lt;bool&gt;</code> optimises space at the expense of speed.  We may find that <code>std::vector&lt;char&gt;</code> is more performant for reasonable sizes - have you done any benchmarks to justify this choice?</p>
    </div>