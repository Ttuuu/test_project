<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Disclaimer: You asked me to be harsh, so I'm not holding back as much.  I tried to though...</p>
</blockquote>

<p>Welcome to Code Review!  Your python code has been put through my scrutiny and I have some concerns and suggestions for improvement.  Any criticisms and scrutiny are to be taken at their face value unless stated otherwise, <strong>and may include extremely harsh criticisms</strong>.  I tried to avoid being overly harsh, but there are cases where I have to be harsh because of the severity of the mistakes or issues.</p>

<hr>

<p><strong>MISSING MODULES AND CODE: <code>clear</code></strong></p>

<p>You state you wrote your own code for <code>clear</code>.  Because I don't have your <code>clear()</code> code I can't review it, and to make sure things work I need to yank it out of the code for review purposes.  So, <code>clear()</code> won't exist in the final code examples.</p>

<hr>

<hr>

<p>The missing code for <code>clear</code> aside, this is the review I have written so far:</p>

<p><strong><code>from clear import *</code>: BAD FORM!</strong></p>

<p><strong>Wildcard imports are bad form!</strong>  <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8, the Style Guide for Python</a>, explicitly discourages using wildcard imports.</p>

<p>To quote PEP8:</p>

<blockquote>
  <p>Wildcard imports (from  import *) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools. There is one defensible use case for a wildcard import, which is to republish an internal interface as part of a public API (for example, overwriting a pure Python implementation of an interface with the definitions from an optional accelerator module and exactly which definitions will be overwritten isn't known in advance).</p>
</blockquote>

<p>You are not taking a private internal interface and republishing it for public API, so that doesn't apply.  Replace any functions you're using from <code>clear.*</code> with <code>clear.FUNCTION</code> instead.  This is so we know what module the specific bit(s) work with.</p>

<p>Alternatively, you can import the specific function with:</p>

<pre><code>from clear import clear
</code></pre>

<p>... which would let you do <code>clear()</code> calls like you have in your code.  I have gone with this for the code example at the end.</p>

<hr>

<p><strong>Bad form: declaring modules inside your main() function</strong></p>

<p>This isn't C, C++, or Java.  You don't need to declare your functions within <code>main()</code>.  In fact, unless you are working with <code>class</code>es and defining functions for a class, you should <em>not</em> be declaring your functions within a class.  Take your <code>mean</code>, <code>median</code>, and <code>range_</code> functions and declare them individually outside the <code>main</code> class.  Your general code structure would then look like this:</p>

<pre><code>def mean():
    ...

def median():
    ...

def range_():
    ...

def main():
    ...
</code></pre>

<p>This is completely acceptable and in fact the proper way to do these types of declarations.</p>

<hr>

<p><strong>Unused Function: <code>end()</code></strong></p>

<p>You create the function <code>end</code> but don't use it.  Either leave it out entirely because its code is already written into the code that executes after <code>main</code>, or replace the code after the <code>main()</code> call with <code>end()</code>.  However, I would suggest that you do the second of these, rather than call (end) just to re-call <code>main()</code> later.</p>

<hr>

<p><strong>Use escape characters instead of triple-apostrophe strings when working with New Lines</strong></p>

<p>You have this type of print statement at least twice:</p>

<pre><code>    print('''
Great choice! Choose again or type stop the sequence.''')
</code></pre>

<p>Functionally, this works, but from a code readability perspective, it's ugly.  Replace this with escape-charactered strings instead, like:</p>

<pre><code>print("\nGreat choice! Chose again or type stop the sequence.")
</code></pre>

<p>This reads better to those of us doing the reviews.</p>

<hr>

<p><strong>Use string formatting rather than appending strings to other strings</strong></p>

<p>Here's an example of what I'm talking about.  You do this in many different places in the code:</p>

<pre><code>return 'Mean: ' + str(sum(list_one)/len(list_one))
</code></pre>

<p>This works, but... string appending is not the nicest thing in the world.  The proper way to do this nowadays, because you'll undoubtedly in the future have longer strings with <em>multiple</em> things needing inserted into it instead of just one thing at the end, is to use a format string.  This'd be such as this:</p>

<pre><code>return 'Mean: {}'.format(sum(list_one) / len(list_one))
</code></pre>

<p>This also reads slightly nicer because string casting just takes up extra characters and space.  <strong>Also</strong> you'll note that with this I added some spaces around that <code>/</code> - this makes math more readable, actually, to those of us doing reviews.</p>

<hr>

<p><strong>Use one print line instead of multiple</strong></p>

<p><code>print</code>, when combined with strings and line endings and <code>format</code> capable strings can actually post many things at once!</p>

<p>So let's take my last suggestion and turn your <code>print</code> calls for mean, median, and range into one statement:</p>

<pre><code>print("{}\n{}\n{}".format(mean(), median(), range_()))
</code></pre>

<p>We get to save some typing here, too, as well.</p>

<hr>

<p><strong>Consider including <code>#!</code> (shebang) syntax at the first line</strong></p>

<p>This way, we can call your Python code directly in command lines such as the Linux shell with <code>./file.py</code> and execute the code that way (if execute bit is set).  This is not a requirement, but it's nice to have so I don't have to type <code>python3 ./filename.py</code> or such to run your script.</p>

<hr>

<p>I apologize if I was overly harsh, but you said not to hold back, and I gave you a warning early on.  I tried to be as non-harsh as I could.</p>

<p>With all my suggestions above, you get something like this:</p>

<pre><code>#Mean, median, and range

def mean():
    return 'Mean: {}'.format(sum(list_one) / len(list_one))


def median():
    length = len(list_one)
    if length % 2 == 0:
        return 'Median: {}'.format(sum(list_one[length // 2 - 1:length // 2 + 1]) / 2)
    else:
        return 'Median: {}'.format(list_one[length // 2])


def range_():
    return 'Range: {}'.format(list_one[-1] - list_one[0])


def main():
    list_one = []
    while True:
        q = input('Type a number or type stop at any time: ').lower()
        if q.isnumeric():
            list_one.append(int(q))
            print("\nGreat choice! Choose again or type stop the sequence.")
        elif q == 'stop':
            list_one.sort(key=int)
            print("\nAnd the values are...")

            print("{}\n{}\n{}".format(mean(), median(), range_()))
            break

        else:
            print("\nThat\'s not a number or stop! Try again brudda man.")

main()

while True:
    q = input("\nType anything and and press enter to repeat or press only \'Enter\' to exit. ")
    if len(q) &gt;= 1:
        main()
    else:
        exit()
</code></pre>

<p><strong><em>However, we need the code for your <code>clear</code> module to be able to do a full and complete review, so this review is only partial until such time you provide us with that code.  Note that I yanked all <code>clear()</code> references in the interim as well.</em></strong></p>
    </div>