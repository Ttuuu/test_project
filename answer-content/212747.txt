<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking at the code, I can't deduce if you are learning C with some sparkles of C++ or actual C++. So I'm curious to see the continuation.</p>

<p>That said, let me look at the actual code.
I don't like <code>using namespace std;</code>, though for beginners I can agree using it might make things easier so you can focus on the other stuff first.</p>

<p>Looking further, I see an inconsistent use of types in calc_sum. You nicely use doubles for the input, and than you return an int. So, you can enter: 0.1 and 0.8, and the result will be 0. I suggest you read up about the difference between int and double to find out why 0 is returned.</p>

<p>Looking closer, you don't return anything. So you are actually in UB land (undefined behavior). Which makes me realize that your implementation is surprising me. Part of the explanation above simply doesn't hold as I read in patterns.</p>

<p>Reading through, I see a method called calc_pro, (from product?). With documentation about the multiplication. Here you have fallen in a trap I still see with senior developers: Don't use abbreviations in function names, these will conflict over time. Also, don't spare characters. With a good IDE or text editor, you get auto complete. Be descriptive.</p>

<p>Next up, you have discovered recursion. core2 calls itself. On its own, not a bad thing, though not appropriate here. Given enough input, your program will crash. Using a <code>do-while</code> or a regular<code>while</code> sounds like a better solution.</p>

<p>At one point, you also print an error to <code>cout</code>, the output stream. There is however an <code>cerr</code> which is an error stream, something a console could color differently.</p>

<p>Finally, there is a lot of copy paste and functions doing too much at once.
Every function requests 2 arguments from cin, does a calculation and prints to cout. This should be 3 functions.</p>

<pre><code>std::pair&lt;double, double&gt; getNumbers(string action) {
    double a;
     ...
      cout &lt;&lt; "Enter ... to " &lt;&lt; action &lt;&lt; "." &lt;&lt; endl;
     ...
     return { a, b };
 }
</code></pre>

<p>And so on.</p>
    </div>