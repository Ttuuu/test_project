<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>.includes()</code> and checking <code>.indexOf()</code> against <code>-1</code> do the same thing, you only need one. </p>

<p>Also the function should be returning a boolean value. It currently works because the array returned by <code>.splice()</code> is considered <code>true</code> and not returning anything (or <code>undefined</code>) is considered <code>false</code>. It would be better to explicitly return a boolean:</p>

<pre><code> const opponent_game = matches.filter((v, i) =&gt; {
    var index = v.indexOf(gameId);
    if (index &gt; -1) {
        v.splice(index, 1);
        return true;
    }
    return false;
})
</code></pre>

<p>However modifying the content of an array in a <code>filter</code> is bad practice, because it is unexpected. Since you only looking for a single value <code>.reduce()</code> would probably be the better choice:</p>

<pre><code> const opponent_game = matches.reduce((acc, v) =&gt; {
    if (acc !== null) {
      return acc;
    }
    var index = v.indexOf(gameId);
    if (index &gt; -1) {
        return v[1 - index];
    }
    return null;
}, null)
</code></pre>

<p>In this case <code>opponent_game</code> is a number and no longer an array containing an array containing a number so that simplifies the second part too. Also since you are looking for a single item <code>.find()</code> would be more appropriate:</p>

<pre><code>const game = games.find(v =&gt; {
    return v.gameId === opponent_game
})
</code></pre>
    </div>