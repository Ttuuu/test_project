<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a bit much to go through all at once. It would be better if you could separate out the general concept illustrated by examples as a single review, and then specific implementation of components for other reviews.</p>
<p>I'm afraid I can't give much feedback on the overall concept, but I will highlight some areas that stood out to me.</p>
<p><strong>Configuration</strong></p>
<p>You have hardcoded configuration scattered throughout your code. This not only makes it more difficult to update, but also makes it inflexible. There are a <a href="https://stackoverflow.com/questions/49643793/what-is-the-best-method-for-setting-up-a-config-file-in-python">range of options</a>, but it will depend on your specific preferences and needs.</p>
<pre><code>def __init__(self,db_api_url = "http://chaos.db.openshift:5001"):
</code></pre>
<pre><code>current_time =  time.strftime('%Y%m%d%H%M%S')
</code></pre>
<pre><code>def _str2bool(self,output):
    return output.lower() in ("yes", "true", "t", "1")
</code></pre>
<p><strong>Path manipulation</strong></p>
<p>Don't do it manually! Trying to use string manipulation to concatenate file paths is <a href="https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f" rel="nofollow noreferrer">full of pitfalls</a>. Instead, you should use the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a> standard library which removes all the headaches of worrying about getting the correct separator characters etc.</p>
<p>You should also not hard code configuration into your functions, at least provide a means of overriding it. For example your <code>_create_script_file</code> function:</p>
<pre><code>def _create_script_file(script, script_name):
    injector_home_dir = "/root"
    script_file_path = '{}/{}'.format(injector_home_dir, script_name)
    with open(script_file_path, 'w') as script_file:
        script_file.write(script)
    return script_file_path
</code></pre>
<p>Could be rewritten:</p>
<pre><code>def _create_script_file(script, script_name, injector_home_dir = "/root"):
    script_file_path = Path(injector_home_dir).joinpath(injector_home_dir, script_name)
    with open(script_file_path, 'w') as script_file:
        script_file.write(script)
    return script_file_path
</code></pre>
<p>Even better, load your <code>injector_home_dir</code> from configuration or load as a <code>Path</code> object in an initializer or somewhere.</p>
<p><strong>String literals</strong></p>
<p>This may be more of a personal preference, but I think <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">fstrings</a> are far more readable than string formatting:</p>
<pre><code>db_fault_api_url = "{}/{}/{}".format(self.db_api_url, "fault", fault_name)
</code></pre>
<p>vs</p>
<pre><code>db_fault_api_url = f"{self.db_api_url}/fault/{fault_name}")
</code></pre>
<p><strong>List/dictionary comprehension</strong></p>
<p>In this section you appear to be essentially filtering a dictionary. This can be greatly simplified since you're reusing the keys:</p>
<pre><code>        # Get the names of the parts of the fault
        probes = fault_info["probes"]
        methods = fault_info["methods"]
        rollbacks = fault_info["rollbacks"]
        name  = fault_info["name"]

        fault_structure = {'probes' : probes , 'methods' : methods , 'rollbacks' : rollbacks}
</code></pre>
<pre><code>        # Get the names of the parts of the fault
        parts = ["probes", "methods", "rollbacks", "name"]
        fault_structure = {key: value for key, value in fault_info.items() if key in parts}
</code></pre>
<p>The keys used in <code>parts</code> appear to be reused in various places so they are a good candidate for storing in configuration.</p>
<p><strong>Exception handling</strong></p>
<p>I'm not keen on this section. There is a lot of repeated code, I would much prefer to return a value based on the exception. You also have what is essentially a <a href="https://stackoverflow.com/questions/54948548/what-is-wrong-with-using-a-bare-except">bare exception</a> where you catch any type of exception.</p>
<pre><code>    def _orchestrate_injection(self,dns,fault_name):
        try :
            # Gets fault full information from db
            fault_info = self._get_fault_info(fault_name)
        except Exception as E :
            return { "exit_code":"1" ,"status": "Injector failed gathering facts" }
        try :
            # Runs the probes,methods and rollbacks by order.
            logs_object = self._run_fault(dns, fault_info)
        except :
            return { "exit_code":"1" ,"status": "Injector failed injecting fault" }
        try :
            # Sends logs to db to be stored in the "logs" collection
            db_response = self._send_result(dns,logs_object,"logs")
            return db_response
        except Exception as E:
            return { "exit_code":"1" ,"status": "Injector failed sending logs to db" }
</code></pre>
<p>Use a single try/catch block, store the response and then finally return at the end:</p>
<pre><code>
    def _orchestrate_injection(self,dns,fault_name):
        try :
            # Gets fault full information from db
            fault_info = self._get_fault_info(fault_name)
            # Runs the probes,methods and rollbacks by order.
            logs_object = self._run_fault(dns, fault_info)
            # Sends logs to db to be stored in the "logs" collection
            db_response = self._send_result(dns,logs_object,"logs")
        except SpecificExceptionType as E:
            # Examine exception and determine return message
            if e.args == condition:
                exception_message = ""
            else:
                exception_message = str(E)
            db_response = { "exit_code":"1" ,"status": exception_message }
        return db_response
</code></pre>
<p><strong>Repetition and encapsulation</strong></p>
<p>Consider where you're repeating code or large functions can be broken down into smaller, reusable parts. Your <code>run_fault</code> method is large, with a lot of branching. An obvious repetition is where you update the exit code:</p>
<pre><code># Check if server healed after rollbacks
if probes_result is True:
    rollbacks['exit_code'] = "0"
    rollbacks['status'] = "victim succsessfully  healed after rollbacks"
else:
    rollbacks['exit_code'] = "1"
    rollbacks['status'] = "victim failed healing after rollbacks"
</code></pre>
<p>This makes for a nice little function:</p>
<pre><code>def update_exit_status(log, exit_code, status_message = ""):
    if not status_message:
        if exit_code:
            status_message = "victim successfully healed after rollbacks"
        else:
            status_message = "victim failed healing after rollbacks"
        
    log["exit_code"] = "1" if exit_code else "0"
    log["status"] = status_message
    return log
</code></pre>
<p>You use a lot a dictionary manipulation throughout, it could be worthwhile to make a small class to contain this information. This would have the benefit of removing the need for so many magic strings where you retrieve information by keys, instead you could use the properties of your class. You could also then contain some of the data handling logic within you class, instead of spread throughout the rest of your methods.</p>
    </div>