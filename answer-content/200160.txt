<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Thread safety</h1>
<p><code>std::malloc</code> and <code>std::free</code> are thread-safe by themselves... But <code>Freelist</code> and <code>Cache</code> <strong>aren't</strong>, unless exclusively accessed through <code>allocate</code> or <code>deallocate</code>.</p>
<p>In all other cases some synchronization is needed in <code>FreeList::push</code> and <code>FreeList::pop</code> (or alternatively, <code>Cache::allocate</code> and <code>Cache::deallocate</code>).</p>
<blockquote>
<p>There are some options to make those two classes thread-safe for all access paths:</p>
<ol>
<li><p>Move <code>get</code>, <code>get_cache</code>, <code>Cache</code> and <code>FreeList</code> into a <code>class</code> as <code>private</code> nested classes / member functions (so they aren't publicly accessible anymore) and make <code>allocate</code> and <code>deallocate</code> a <code>friend</code> of that class. (private/anonymous <code>namespace</code> won't work since that one has to ve just as accessible as <code>allocate</code>/<code>deallocate</code> because it has to reside in a header.)</p>
<p>Why move <code>get</code> and <code>get_cache</code>? Because references and pointers to <code>thread_local</code> objects can be shared with other threads - so a threads might get access to another threads <code>thread_local Cache</code> inside <code>get</code>.</p>
<p><code>thread_local</code> objects are only thread-safe if no reference or pointer to them gets shared with other threads (which might happen accidentally, e.g. by a mismanaged lambda capture).</p>
<p>This means <code>allocate</code> and <code>deallocate</code> are not thread-safe as long as references to the underlying <code>Cache</code> (via <code>get</code> or <code>get_cache</code>) could be shared by someone else. And since <code>allocate</code> and <code>deallocate</code> have exactly the same level of access as <code>get</code> or <code>get_cache</code> the posted implementation is not thread-safe in the general case.</p>
</li>
<li><p>Add some locking inside <code>FreeList</code>, or make <code>FreeList</code> lock-free by making <code>this_head</code> a <code>std::atomic&lt;Node*&gt;</code>.</p>
<p>This would make the critical section inside <code>Cache::allocate</code> and <code>Cache::deallocate</code> thread-safe as well.</p>
</li>
</ol>
</blockquote>
<h1>Memory management</h1>
<ul>
<li><p><code>Cache::allocate</code> won't provide correctly aligned memory for alignments greater than <code>std::max_align_t</code> (<code>std::malloc</code> is only specified to support alignments to this value). This might cause problems if higher alignments are needed, e.g. for SSE or AVX instructions.</p>
<p><code>std::aligned_alloc</code> could be used as a replacement. (Beware: <code>std::aligned_alloc</code> isn't available for MSVC yet.)</p>
</li>
<li><p>It isn't possible to create objects whose size is less than <code>sizeof(void*)</code> - so exchanging <code>int64_t</code> for <code>int32_t</code> inside <code>main</code> will fail to compile on 64-bit systems. This could be fixed by always allocating chunks of memory that are at least <code>sizeof(void*)</code> (or <code>FreeList::NODE_SIZE</code>, if you prefer).</p>
</li>
</ul>
<h1>Naming</h1>
<ul>
<li><p><code>Cache</code> doesn't actually cache objects - only chunks of memory. <code>FreeListAllocator</code> might be a better name.</p>
</li>
<li><p><code>get</code> is a very generic name. (<code>get_</code>)<code>thread_local_instance</code> or <code>singleton</code> might be more descriptive.</p>
</li>
<li><p>Similar, <code>get_cache</code> might better be <code>get_allocator</code> or <code>get_thread_local_allocator</code>.</p>
</li>
</ul>
<h1>General stuff</h1>
<ul>
<li><p>With some slight modifications <code>Cache</code> could be changed into a standard library compatible <code>std::pmr::memory_resource</code> - which would allow it to be used with standard containers.</p>
</li>
<li><p>If I had to design this, I'd likely make <code>FreeList</code> an adaptor over another allocator (taken as template parameter) who would be asked for memory if the list was empty. This design would allow easy composition of different allocation strategies. There's an <a href="https://www.youtube.com/watch?v=LIb3L4vKZ7U" rel="nofollow noreferrer">excellent talk</a> by Andrei Alexandrescu about this topic.</p>
</li>
</ul>
    </div>