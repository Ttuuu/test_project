<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are two points that showed up immediately when looking at your implementation:</p>

<ul>
<li>You missed one of the goals of the task: It should read the data from standard input and writes it the result to standard output.</li>
<li>You are reading in the complete binary data into memory and process it from there.</li>
</ul>

<p>The latter is a no go, if we're talking about large structures of JSON-data, e.g. containing Base64-encoded binary data of a DVD-image (don't ask ;-) It might be unlikely in a real world example but it might let them come to the conclusion that you're not familiar with stream based processing and had another one how showed that ability which might have led to their decision.</p>

<p>Some remarks about the actual code:</p>

<p>Your reading-number-implementation:</p>

<pre><code>private int getNumber(byte[] byteArray, int index) {
    int start = index + 1; // move to next value after type
    int offset = start + 4;

    byte[] numberByteArray = Arrays.copyOfRange(byteArray, start, offset);

    return new BigInteger(numberByteArray).intValue();
}
</code></pre>

<p>The specification said that a number is a signed integer in big endian order which is exactly how a Java <code>int</code> is defined, so instead of creating temporary arrays and a <code>BigInteger</code> you could simply have used an <code>int</code> and used bit-shifting:</p>

<pre><code>private int getNumber(byte[] byteArray, int index) {
    int ret = byteArray[index + 4] &amp; 0xff;
    ret |= (byteArray[index + 3] &amp; 0xff) &lt; 8;
    ret |= (byteArray[index + 2] &amp; 0xff) &lt; 16;
    ret |= (byteArray[index + 1] &amp; 0xff) &lt; 24;
    return ret;
}
</code></pre>

<p>If you had implemented a stream based processing and used a <code>DataInputStream</code> the implementation would have been</p>

<pre><code>private int getNumber(DataInputStream source) {
    return source.readInt();
}
</code></pre>

<p>Your reading-text-implementation:</p>

<pre><code>private String getString(byte[] byteArray, int index) {
    int start = index + 1; // move to next value after type
    StringBuilder value = new StringBuilder();
    for(int i = start; i &lt; byteArray.length; i++){
        if(byteArray[i] == TERMINATE){
            break;
        }
        value.append((char)byteArray[i]);
    }
    return value.toString();
}
</code></pre>

<p>Not much that can be changed here but for good measure, I'd change <code>(char)byteArray[i]</code> to <code>(char) (byteArray[i] &amp; 0xff)</code>. For ASCII-characters that's irrelevant but still ;-)</p>

<p>In <code>getDictionary</code>:</p>

<pre><code>private Object getDictionary(byte[] byteArray, int index, boolean hasSub) throws JSONException {
[...]
index += ByteBuffer.allocate(4).putInt(dictionarySize).array().length;
</code></pre>

<p>That's a very elaborate form of</p>

<pre><code>index += 4;
</code></pre>

<p>because that's the number of bytes a signed integer is defined in the given specification.</p>

<pre><code>keyLength += ((String) key).getBytes().length + 1;
</code></pre>

<p><code>getBytes()</code> uses the system's file-encoding. Because this particular example uses ASCII you won't see any effect on 99% of all systems but it would break on a system that runs e.g. with UTF-16 as file-encoding. You can see that youself by starting your Java test app with the system property <code>-Dfile.encoding=UTF16</code>.</p>

<p>This is a common Beginner's Error which might have raised a flag with them as well.</p>

<p>Always, <strong>ALWAYS</strong> use <code>getBytes(encoding)</code> unless you really want to use the system's file encoding for some reason.</p>

<pre><code>hasSub = hasSub || (byteArray[index] == DICTIONARY || byteArray[index] == LIST);
[...]
} else if (value instanceof AbstractMap.SimpleEntry) {
    valueLength = (int) ((AbstractMap.SimpleEntry) value).getKey() - index;
    jsonWriter.value(((AbstractMap.SimpleEntry) value).getValue());
}
</code></pre>

<p>This code block is duplicated in <code>getList</code>, you should put that into its own method and call it from the two methods. Same is true for the logic with the <code>return</code>-statement. This should be put into its own method so you only need to fix it once in case you find a bug in it.</p>

<p>General stuff:</p>

<p>You had to cope with the fact that your <code>get</code>-methods had to return a value and should change the value of the index. That's not possible, so you decided to change the index value in the calling method in dependence of the type of the returned parsed value. This is "not optimal" to say the least.</p>
    </div>