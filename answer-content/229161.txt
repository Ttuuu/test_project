<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>"""DocStrings"""</code></h2>

<p>+1 for adding a doc string to the <code>wordBreak()</code> method, but -1 for not having any content in it.</p>

<h2>PEP-008</h2>

<p>Your code diverges from the PEP-008 guidelines in several areas:</p>

<ol>
<li>Use <code>snake_case</code> for functions and variables, not <code>mixedCase</code>.</li>
<li>Use a single space around operators (<code>elif i &gt; len(s):</code>), not 2 spaces, and then no spaces.</li>
<li>Add a blank line between the inner <code>prune()</code> function and the outer function, as well as between the <code>class Solution</code> and its first method.</li>
</ol>

<p>Use <code>pylint</code> or <code>pyflakes</code> or similar to ensure your code follows proper conventions.</p>

<h2>Variable Names</h2>

<p>Variable names like <code>s</code> are very terse, but since it is given that name in the question, is forgivable.</p>

<p>Variable names like <code>wordDict</code> are misleading, and should be avoided!  <code>wordDict</code> is actually a <code>list</code>, not a <code>dict</code>.  Although that name was given in the question, you should correct it to <code>word_list</code>, or simply <code>words</code> to avoid confusion.  (+1 for the type hint; it helps avoid some confusion.  But rename the parameter anyway.)</p>

<p><code>i</code> is acceptable as a loop index, but there is no obvious loop.  <code>idx</code> or <code>pos</code> may improve clarity.</p>

<p><code>m</code> is unacceptable.  It in no way suggests it is the length of a word.  Use a more descriptive variable name.</p>

<h2>Dead Code</h2>

<pre><code>elif i &gt; len(s):
    return False
</code></pre>

<p>At what point will this branch every be taken?  The only way is if <code>prune(i+m)</code> is called when <code>i+m</code> is greater than <code>len(s)</code>.  But if <code>m</code> is the length of <code>word</code>, and <code>s[i:i+m] == word</code> is true, it is impossible for <code>i+m</code> to exceed <code>len(s)</code>.  This branch is dead code, and can be removed.</p>

<h2>Algorithmic Improvements</h2>

<p>You are sorting your "dictionary" by length, so that you check the longest words first.  However, this doesn't actually guarantee any speed improvements.  At any step, if the next possible word is the shortest one, you've guaranteed it will be the last one checked.  Ditch the sort.</p>

<p>What you want to do is reduce the number of words from the "dictionary" you are testing at each step.  One obvious way would be to turn the "dictionary" into an actual <code>dict</code>, say, storing the list of words which start with a given letter:</p>

<pre><code>word_dict = {
              "a": ["apple"],
              "p": ["pen"],
            }
</code></pre>

<p>Or more programmatically:</p>

<pre><code>word_dict = defaultdict(list, ((word[:1], word) for word in wordDict))
</code></pre>

<p>Then at each step, instead of comparing <code>s[i:i+len(word)]</code> to each and every <code>word</code> in <code>wordDict</code>, you would compare to the list of words in <code>word_dict[s[i:i+1]]</code>, which should be significantly smaller.</p>

<p>This method will degenerate if all the dictionary words start with the same letter (<code>["aaaa", "aaab", "aaac", "aaad"]</code>), but you could handle this by storing the dictionary as a tree structure instead.</p>

<p>Another alternative would be to separate <code>wordDict</code> into sets of words of different lengths:</p>

<pre><code>words_by_length = { 3: { "pen" }, 5: { "apple" } }
</code></pre>

<p>Then, at each stage, you could do a single <code>set</code> containment test for each word length:</p>

<pre><code>for word_length, word_list in words_by_length.items():
    if s[i:i+word_length] in words_list:
        # ...
</code></pre>
    </div>