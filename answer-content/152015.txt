<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very interesting problem. Rotor is so painfully close to doing what is desired that I fooled around with it for quite some time before giving up on it. Also, I was seeing some weirdness with rotor that I will have to play with separately.</p>

<p>One tricky thing was trying to use <code>[].push</code> instead of <code>[].append</code> from <a href="https://docs.perl6.org/type/Array#method_append" rel="nofollow noreferrer">here</a>.</p>

<p>I learned that that push will take all the arrays and mash them together so the last element would end up being an array of arrays (of arrays...).</p>

<p>I've also learned that you need to surround the array with <code>$()</code> so that it will not be treated as a list of numbers but as a single element to be appended to the array of arrays.</p>

<p>This question would make a good introduction to Arrays and Lists in Perl 6 or  Perl 6 in general, first time I did any 'real' dabbling in it.</p>

<p>This is what I came up with:</p>

<pre><code>sub fair-lists (@array, $num-lists)
{
    return $(@array) if $num-lists === 1;
    my $element-count = ceiling(@array.elems / $num-lists);
    return [$(@array[0..$element-count-1])]
           .append(fair-lists(@array[$element-count..*], $num-lists-1));
}

#  ^^^ that is all the code, the rest is just to demo it.

my $debug = 0;

quick-check(1,1,1);
quick-check(1,2,1);
quick-check(1,3,1);

quick-check(1,1,3);
quick-check(1,2,3);
quick-check(1,3,3);
quick-check(1,4,3);
quick-check(1,5,3);
quick-check(1,6,3);
quick-check(1,7,3);
quick-check(1,13,3);
quick-check(1,23,5);

$debug = 1;

quick-check(1,13,3);

sub quick-check ($start, $end, $count) {
    my @array = ($start..$end);

    say "\n$(@array.elems) elements in list, desire $count lists" if $debug;
    say @array if $debug;

    my @lists = fair-lists(@array, $count);

    { say @$_ for @lists } if $debug;

    if @lists.elems === $count {
        say "Pass - $(@lists.elems) is the same as desired count of $count";
    }  else {
        say "FAIL!!!! - got $(@lists.elems) but wanted $count";
    }
}
</code></pre>

<p>Here are the results of running it:</p>



<pre class="lang-none prettyprint-override"><code>Pass - 1 is the same as desired count of 1
Pass - 1 is the same as desired count of 1
Pass - 1 is the same as desired count of 1
Pass - 3 is the same as desired count of 3
Pass - 3 is the same as desired count of 3
Pass - 3 is the same as desired count of 3
Pass - 3 is the same as desired count of 3
Pass - 3 is the same as desired count of 3
Pass - 3 is the same as desired count of 3
Pass - 3 is the same as desired count of 3
Pass - 3 is the same as desired count of 3
Pass - 5 is the same as desired count of 5

13 elements in list, desire 3 lists
[1 2 3 4 5 6 7 8 9 10 11 12 13]
(1 2 3 4 5)
(6 7 8 9)
(10 11 12 13)
Pass - 3 is the same as desired count of 3
</code></pre>
    </div>