<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'd also, if possible, like to see a fully FP implementation of this,
  but I'd wager that that would be quite difficult.</p>
</blockquote>

<p>Here is a functional implementation of Heap's algorithm in Clojure, based on page 12 of <a href="http://www.cs.princeton.edu/~rs/talks/perms.pdf" rel="nofollow noreferrer">Robert Sedgewick's lecture</a> (Don't look at the next page - the code is dubious).</p>

<p>The idea is to generate the sequence of swaps as pairs of indices. That's what the <code>swaps</code> function does. For an argument <code>n</code>, it generates <code>n! - 1</code> of them: </p>

<pre><code>(defn swaps [n]
  (if (= n 1)
    ()
    (let [base (swaps (dec n))
          extras (if (odd? n) (repeat (dec n) 0) (range (dec n)))]
      (concat
        base
        (mapcat (fn [x] (cons [x (dec n)] base)) extras)))))
</code></pre>

<p>It interleaves the <code>extras</code> between <code>n</code> copies of the <code>base</code>, the sequence of swaps of <code>n-1</code> elements.</p>

<p>For example, </p>

<pre><code>=&gt; (swaps 3)
([0 1] [0 2] [0 1] [0 2] [0 1])
</code></pre>

<p>The <code>perms</code> function ...</p>

<pre><code>(defn perms [v]
  (reductions
    (fn [a [i j]] (assoc a i (a j) j (a i)))
    v
    (swaps (count v))))
</code></pre>

<p>... simply applies these swaps successively to its vector argument. </p>

<p>For example, </p>

<pre><code>=&gt; (perms ['A 'B 'C])
([A B C] [B A C] [C A B] [A C B] [B C A] [C B A])
</code></pre>
    </div>