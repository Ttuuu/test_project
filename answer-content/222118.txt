<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks good and concise.</p>

<p>Your test cases cover almost every branch of the code, which is also good.</p>

<p>You can improve the variable names:</p>

<ul>
<li><p>The <code>temp</code> in <code>tempDocument</code> is not necessary. Therefore the variable name should better be <code>document</code>, or if that is too long, <code>doc</code>. Be careful though when abbreviating variable names, and don't make them ambiguous.</p></li>
<li><p>The <code>no</code> test case should rather be called <code>parsererror</code>. I had to run the code to see that it really tests this branch of the code. By improving the name of the variable, you make this more obvious.</p></li>
</ul>

<p>There is a test case missing for a tag name other than <code>p</code>.</p>

<pre><code>if (doc.children.length === 1 &amp;&amp; doc.children[0].tagName.toLowerCase() === tag.toLowerCase()) {
  return true;
}
return false;
</code></pre>

<p>If you want, you can write this code a bit shorter:</p>

<pre><code>return doc.children.length === 1
    &amp;&amp; doc.children[0].tagName.toLowerCase() === tag.toLowerCase();
</code></pre>

<p>Your current code is a bit longer, but it allows you to set a breakpoint on the <code>return true</code> statement, which may be useful when debugging the code. But since you already have automated tests running, you will probably not need to set a breakpoint there. Your choice. Many programmers prefer the shorter form, but the longer form is not bad per se.</p>

<p>The expression <code>doc.children.length === 1</code> is always true. This is because you are parsing the text using the <code>text/xml</code> type, and the XML standard requires exactly 1 root element. Everything else will end up in the parsererror branch. To verify this, you should add a test case for an empty string. And a test case for an XML comment, such as <code>&lt;!-- comment --&gt;</code>.</p>

<p>When I first read the function name <code>textIsWrappedWithTag</code>, I didn't know exactly what to expect from that function. My first thought was that <code>textIsWrappedWithTag('&lt;div&gt;&lt;p&gt;text&lt;/p&gt;&lt;/div&gt;', 'p')</code> would return true, since there is some text that is enclosed in a <code>p</code> tag. You could try to find a better name for that function, maybe <code>topLevelElementIs</code>.</p>

<p>By the way, the DOM API talks about <em>elements</em>, while the HTML standard calls them <em>tags</em>. If you want your function to feel like it belongs to the DOM API, you should call it <code>textIsWrappedWithElement</code> instead.</p>
    </div>