<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thank you for not using <code>using namespace std;</code>.</p>
<p>Enclosing all blocks of code in <code>{}</code> is a good practice that I promote, so thank you for that good practice as well.</p>
<p>In C and C++ you don't really need that large block of function declarations at the top if all the functions are in the proper order, but in some cases this is a matter of style, in other cases if 2 functions call each other function prototypes are necessary.</p>
<h2>Missing Header File</h2>
<p>To use <code>and</code> as the logical AND operator the header file <code>iso646.h</code> should be included, otherwise it might be better to use <code>&amp;&amp;</code> as the logical AND operator. Not all C++ compilers include this by default.</p>
<h2>Proper Testing of Sort Functions</h2>
<p>If you really want to properly test the functions you should have a vector that has the properly sorted values to compare the returned values of the a sort function.</p>
<h2>Not All Functions are Used</h2>
<p>This is sometimes a sign that the code is not ready for review or Ready for Use by Others (RFUBO). In this case I believe it is because the testing hasn't really been thought out and only one test will work at a time.</p>
<p>One way to correct this is to not use the input vector as the output. Instead each sort function can return a sorted vector rather than each function being void.</p>
<pre><code>std::vector&lt;int&gt; bubble_sort(std::vector&lt;int&gt; to_sort);
std::vector&lt;int&gt;  insertion_sort(std::vector&lt;int&gt; to_sort);

bool vectors_are_equal(std::vector&lt;int&gt; sorted, std::vector&lt;int&gt; control)
{
    if (sorted.size() != control.size())
    {
        return false;
    }

    for (int i = 0; i &lt; control.size(); i++)
    {
        if (sorted[i] != control[i])
        {
            return false;
        }
    }

    return true;
}

int main()
{
    std::vector&lt;int&gt; vector_to_sort = { 10, 8, 4, 1, 8, 3, 2, 9, 1, -5 };
    std::vector&lt;int&gt; control = { -5, 1, 1, 2, 3, 4, 8, 8, 9, 10};

    std::vector&lt;int&gt; sorted_vector = bubble_sort(vector_to_sort);
    std::cout &lt;&lt; "Bubble Sort Test " &lt;&lt; ((vectors_are_equal(sorted_vector, control)) ? "Passed" : "Failed") &lt;&lt; "\n";
    display_vector("Bubble Sort", sorted_vector);
    std::cout &lt;&lt; "\n";

    sorted_vector.clear();
    sorted_vector = insertion_sort(vector_to_sort);
    std::cout &lt;&lt; "Insertion Sort Test " &lt;&lt; ((vectors_are_equal(sorted_vector, control)) ? "Passed" : "Failed") &lt;&lt; "\n";
    display_vector("Insertion Sort", sorted_vector);

}
</code></pre>
<p>It might be interesting to add timing to the tests to see what's faster. It might also be interesting to use a random number generator to populate the <code>vector_to_sort</code>, and larger ranges of numbers would also be interesting.</p>
<p>Note I've changed the order of some of the values in the <code>vector_to_sort</code> so that there are a couple of worst case scenarios.</p>
<p>Much code duplication of testing could be corrected by a function that takes the name and a function pointer of the sort to be tested.</p>
<h2>Inline Functions</h2>
<p>The C++ keyword <code>inline</code> is obsolete, current optimizing compilers do a much better job of inlining functions as necessary.</p>
    </div>