<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As noted in the <a href="https://codereview.stackexchange.com/a/233500/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/8149/alexyorke">@alexyorke</a>, you keep on adding to the data list. This means that your program can run out of memory. One way to reduce this risk greatly is to not save every data point, but use the data of how often each number appears.</p>

<p>Here are two different ways to do it, one uses a <code>list</code> as an array, like your code:</p>

<pre><code>def mean(numbers):
    return sum(i * n for i, n in enumerate(numbers)) / sum(numbers)

def most_common(numbers):
    return max((n, i) for i, n in enumerate(numbers))[1]

if __name__ == "__main__":
    high = 10
    counter = [0] * high
    for _ in range(1000):
        counter[random.randrange(high)] += 1
        average = round(mean(counter), round(sum(counter) / 20))
        print(f"\nThe average for all the numbers is {average}")
        print(f"The most common number is {most_common(counter)}\n")
</code></pre>

<p>This has the disadvantage that it only works for integers (because only integers can be indices for a <code>list</code>). Instead you could use a <code>collections.Counter</code> to keep the counts:</p>

<pre><code>from collections import Counter

def mean(counts):
    return sum(i * n for n, i in counts.items()) / sum(counts.values())

def most_common(counts):
    return counts.most_common(1)[0][0]

if __name__ == "__main__":
    high = 10
    counter = Counter()
    for _ in range(1000):
        counter[random.randrange(high)] += 1
        average = round(mean(counter), round(sum(counter.values()) / 20))
        print(f"\nThe average for all the numbers is {average}")
        print(f"The most common number is {most_common(counter)}\n")
</code></pre>

<p>Note that in both cases I added a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script from other scripts, which is a good practice to use.</p>

<hr>

<p>As a bonus, making a rudimentary histogram is also quite easy with the counter and some format string magic:</p>

<pre><code>width = 60
norm = sum(counter.values())
for i, n in sorted(counter.items()):
    print(f"{i:&lt;2} | {'#' * int((n * width / norm)):&lt;{width}}| {n / norm:&gt;7.2%}")

0  | #####                                                       |   9.80%
1  | ######                                                      |  10.40%
2  | ######                                                      |  10.20%
3  | #####                                                       |   8.40%
4  | ######                                                      |  10.70%
5  | #####                                                       |   9.30%
6  | ######                                                      |  11.00%
7  | #####                                                       |   9.40%
8  | ######                                                      |  10.80%
9  | ######                                                      |  10.00%
</code></pre>
    </div>