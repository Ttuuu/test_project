<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prefer returning a result instead of passing it via a reference</h1>

<p>The result of your function is a <code>std::ifstream</code> object, so make that explicit:</p>

<pre><code>std::ifstream OpenFile() {
  while(true) {
    // read filename

    std::ifstream file(fileName);

    if (file.is_open())
      return file;
    else
      // handle error
  }
}
</code></pre>

<p>The advantage is that instead of having to write:</p>

<pre><code>std::ifstream file;
OpenFile(file);
</code></pre>

<p>You can write:</p>

<pre><code>std::ifstream file = OpenFile();
</code></pre>

<p>Or even:</p>

<pre><code>auto file = OpenFile();
</code></pre>

<h1>Avoid using <code>std::stringstream</code> if it's not necessary</h1>

<p>It might seem convenient, but it's rather inefficient, and often there are other ways to accomplish what you want. It seems from your code that you want to forbid filenames with whitespace characters in them. Consider using <a href="https://en.cppreference.com/w/cpp/string/basic_string/find_first_of" rel="nofollow noreferrer"><code>std::find_first_of()</code></a> to check if there are certain characters in a string.</p>

<p>Apart from that, many filesystems, including those on mainstream operating systems such as Linux, Windows and macOS, allow spaces in their filenames. And surely, when you call <code>open()</code>, the operating system will return an error if you pass it an invalid filename, so you don't have to do this error checking yourself.</p>

<h1>Avoid casting <code>std::string</code> to C-strings</h1>

<p>Since C++11 you can pass a <code>std::string</code> directly to a <code>std::ifstream</code>'s constructor or to its <code>open()</code> function.</p>

<h1>Use <code>'\n'</code> instead of <code>std::endl</code></h1>

<p>Avoid using <code>std::endl</code>. It is equivalent to <code>'\n'</code> plus a call to <code>flush()</code>. The flush is usually unnecessary and might hurt performance. So for example, instead of:</p>

<pre><code>std::cout &lt;&lt; "File could not be opened. Please try again.";
std::cout &lt;&lt; std::endl;
</code></pre>

<p>Write:</p>

<pre><code>std::cout &lt;&lt; "File could not be opened. Please try again.\n";
</code></pre>

<h1>Pass along the error message from the operating system</h1>

<p>There are many reasons why opening a file might fail. It will benefit the user to learn the exact reason why it failed. For example, it could be that the file doesn't exist, or that it's permissions don't allow it being opened by the user. To do this, call <code>strerror(errno)</code>, like so:</p>

<pre><code>std::cout &lt;&lt; "File could not be opened: " &lt;&lt; strerror(errno) &lt;&lt; "\nPlease try again.\n";
</code></pre>

<h1>Add a way for the user to cancel opening a file</h1>

<p>The function loops forever until a file has succesfully been opened. What if the user decides that it doesn't want any file to be opened at this time, but wants the application to cancel this operation but do something else? If you don't allow a way out of this function, the only option available to the user is closing the application and restarting it.</p>

<h1>Consider making the function more generic</h1>

<p>While you shouldn't add bells and whistles to a function like this if you are not going to use them, you might want to consider whether you want to make this function a bit more widely applicable. For example, you could have it open a file either for reading, writing or both, or have a way to give a custom prompt. For example:</p>

<pre><code>std::fstream OpenFile(ios_base::openmode mode = ios_base::in, const std::string &amp;prompt = "Enter a file name: ") {
  while(true) {
    std::cout &lt;&lt; prompt;
    // read filename

    std::fstream file(filename, mode);

    if (file.is_open())
      return file;
    else
      // handle error
  }
}
</code></pre>
    </div>