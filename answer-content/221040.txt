<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding the cardCheck function: Its main purpose is to help you determine if a card number is valid, using the Luhn algorithm. So why have it return a sum, rather than a True or False? I can't imagine a scenario where you'd want to call that function and NOT want to do the <code>sum % 10 == 0</code> check after. So include that in the function, that seems to be a core part of its job. The main function can then be more explicit when using it:</p>

<pre><code>valid = cardCheck(number):
if valid:
    print('Valid card!')
</code></pre>

<p>Also, there's no reason to make this function recursive. That seems to only make it harder to understand. Compare with this variant that iterates over the digits instead:</p>

<pre><code>def cardCheck(digit_list):
    if len(digit_list) != 16:
        return False
    total = 0
    for i, digit in enumerate(digit_list):
        if i % 2 == 0:
            digit *= 2
            if digit &gt;= 10:
                digit -= 9
        total += digit
    return total % 10 == 0
</code></pre>

<p>I used a trick here to replace the digit sum: If the digit sum is needed, that will be on a number between 10 and 18. The digit sum of those numbers is just 1 above the last digit, and that number can be more easily found by just subtracting 9. But whether you use that trick or not, the iterative version seems easier to understand and read.</p>
    </div>