<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>C++ Vs C</strong></p>

<p>As has been said in the comments, your code reads very much like it's been written in C.  You're using C functions like <code>printf</code> instead of the <em>more</em> C++ <code>cout</code> and you haven't broken your logic down into classes etc.</p>

<p><strong>Commented out Code</strong></p>

<p>Commented out code creates noise that distracts from the rest of the code.  If you want to have conditional compilation, it's better to build it in to your process.  So, instead of:</p>

<pre><code>//To see map, uncomment next 5 lines:
/*fieldsRect.Left += SIDE_W + OFFSET;
fieldsRect.Right += SIDE_W + OFFSET;
WriteConsoleOutput(out,map,fieldsGrid,origin,&amp;fieldsRect);
fieldsRect.Left -= SIDE_W + OFFSET;
fieldsRect.Right -= SIDE_W + OFFSET;*/
</code></pre>

<p>You could have:</p>

<pre><code>#ifdef SHOW_MAP
    fieldsRect.Left += SIDE_W + OFFSET;
    fieldsRect.Right += SIDE_W + OFFSET;
    WriteConsoleOutput(out,map,fieldsGrid,origin,&amp;fieldsRect);
    fieldsRect.Left -= SIDE_W + OFFSET;
    fieldsRect.Right -= SIDE_W + OFFSET;
#endif
</code></pre>

<p><strong>Function length</strong></p>

<p>Your main is about 180 lines long.  This is quite long, and whilst it's not always the case, there is likely to be some aspects of it that could be broken up into separate functions to make the intent and flow of the code clearer.  Generally speaking, if I get a method that is much more than a screen full of code (80 lines) I start considering if the code needs broken up more.</p>

<p><strong>labels</strong></p>

<p>I'm not totally against labels, but if you need to use them, then it can be a good indicator as to where there is a distinct responsibility in your code.  For example, you have the label <code>start:</code>.  You jump to this if the player says they want to play again.  If the code had been broken up a bit, this label wouldn't have been necessary:</p>

<pre><code>do {
    playGame();
}
while(userWantsToPlayAgain());
</code></pre>

<p><strong>map</strong></p>

<p><em>map</em> is a collection in the STL, so I would tend to avoid using it as a variable name.  I'd also consider using a two dimensional array to represent the play area, rather than a 1 dimensional array.  That way instead of doing the hard work yourself:</p>

<pre><code>minefield[i + j * SIDE_W].Char.AsciiChar = ' ';
</code></pre>

<p>You can get the compiler to help you out:</p>

<pre><code>minefield[i][j].Char.AsciiChar = ' ';
</code></pre>

<p><strong>One letter variables</strong></p>

<p>One letter iterators are <em>ok</em>, however when you start getting multiple iterators in the same method it may be worth giving them proper names so that it's more obvious what's going on.  This is far from transparent:</p>

<pre><code>for (k = j - 1; k &lt;= j + 1; k++)
{
    for (l = i - 1; l &lt;= i + 1; l++)
    {
        if ((unsigned char)map[l * 2 + k * 2 * SIDE_W].Char.AsciiChar == BOMB_CH &amp;&amp; l &gt;= 0 &amp;&amp; 0 &lt;= k &amp;&amp; l &lt; WIDTH &amp;&amp; k &lt; HEIGHT)
        {
            minesSurrounding++;
        }
    }
}
</code></pre>

<p><strong>Next steps</strong></p>

<p>Consider allowing the user to set the difficulty (and varying the number of mines in the minefield accordingly), rather than having it hard coded.</p>
    </div>