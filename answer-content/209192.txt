<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Congrats on teaching yourself programming! You seem to be doing a good job of it. Aside from the fact that I would not want to use a homebrew crypto algorithm the following should be taken as minimal requirements for being able to rely on this code for productive work:</p>

<ul>
<li>The <code>sleep</code> calls do not add anything useful. <code>sleep</code> should be avoided like the plague in production code.</li>
<li>I would expect this sort of program to follow some general *nix shell script guidelines:

<ul>
<li><a href="https://stackoverflow.com/q/1450393/96588">Read from standard input</a> and <code>print()</code> reusable data to standard output. So rather than <code>open("code.p", â€¦)</code> and <code>input()</code> you'd read the input stream, perform decryption or encryption based on <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">parameters</a>, and <code>print()</code> the reusable data before exiting. In other words, after running something like <code>./my.py --encrypt --key=password1 &lt; input.txt | ./my.py --decrypt --key=password1 &gt; output.txt</code> (I don't know what that would look like on Windows, sorry) input.txt and output.txt should be identical.</li>
<li>Expose all functionality in a <em>non-interactive</em> manner.</li>
</ul></li>
<li>I can't follow the algorithm. I see a lot of mixing of numbers and letters, and what looks like an attempt to obfuscate the ciphertext by adding random length strings to the contents. Some unit tests (or even <a href="https://docs.python.org/3.6/library/doctest.html" rel="nofollow noreferrer">doctests</a>) would be very useful to understand how this is meant to be read and understood.</li>
<li>It's hard to follow two <code>while True</code> loops. The first one doesn't even seem to be necessary - it only loops back if the user specifies an invalid option. It would be perfectly valid in this case to exit the program with an error instead.</li>
<li><p>Running the code through at least one linter such as <code>flake8</code> or <code>pycodestyle</code> until it passes both without any warnings will help you create more idiomatic Python. Since you're using Python 3 I would also recommend adding <a href="https://docs.python.org/3.6/library/typing.html" rel="nofollow noreferrer">type hints</a> and running through a strict <a href="https://mypy.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>mypy</code></a> configuration such as this one:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
</ul>
    </div>