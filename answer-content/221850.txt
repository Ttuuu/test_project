<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All that the <code>lazily-find-prime-factors</code> function needs is the <code>(primes)</code> sequence. You just keep trying each in turn. Your <code>smallest-factor-of</code> drops the failed factors, but forgets what it has done, so you have to do it again for the recursive call. </p>

<p>And I'd rename your <code>is-factor-of?</code> function:</p>

<pre><code>=&gt; (is-factor-of? 4 2)
true
=&gt; (is-factor-of? 2 4)
false
</code></pre>

<p>... reads wrongly. I've called it <code>divides-by?</code>.</p>

<p>I end up with ... </p>

<pre><code>(defn lazily-find-prime-factors [n]
  (letfn [(rec [remaining remaining-primes]
            (when (&gt; remaining 1)
              (let [rp (drop-while #(not (divides-by? remaining %)) remaining-primes)
                    small-prime (first rp)]
                (lazy-seq (cons small-prime
                            (rec (quot remaining small-prime) rp))))))]
   (rec n (primes))))
</code></pre>

<p>Factoring the problem this way, you can easily plug in an efficient way of generating primes. </p>
    </div>