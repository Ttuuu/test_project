<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, this probably isn't the best example to use for OOP practices.  Basically standalone converters are usually static methods and don't require anything but the arguments passed to them and other static methods.</p>

<p>Another thing I noticed, that page you referenced has 3 algorithms and you chose what was probably the least performant of the 3.  Personally I like the third one, that instead of finding the base value for the number, it loops through the base values and finds how many of the value are present.</p>

<p>Personally I don't like to use the variable type in the variable name.  This can create maintenance problems if you decide to change the type of the variable at some point.</p>

<p>I'm in favor of using the more up to date <code>Map.ofEntries</code> to fill the map.  For instance:</p>

<pre><code>private static final Map&lt;Integer, Character&gt; BASE_VALUES = Map.ofEntries(
        entry(1, 'I'),
        entry(5, 'V'),
        entry(10, 'X'),
        entry(50, 'L'),
        entry(100, 'C'),
        entry(500, 'D'),
        entry(1000, 'M')
);
</code></pre>

<p>I think you can simplify things by checking for the 4 and 9 special cases instead of adding extra entries for them.</p>

<p>I didn't notice any checking for upper and lower bounds for the integer being passed in to your methods.  Never rely on whether someone else is going to validate their data.</p>

<p>On a side note, using a stream to build a string is the proper way to go, however your goal in this case is to append a specific number of characters to the end of a string. I agree with user158037 that a for loop would be better in this case.  Also consider that since the most times a character is repeated is 3 the difference in performance is negligible and readability would be a better goal.</p>
    </div>