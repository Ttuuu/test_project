<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would like to add a few more pieces of advice to what @TinMan has already provided. </p>

<h2>Naming</h2>

<p>Good naming is one of the most useful and at the same time hardest things in programming. When you have to come back to your procedure 6 months in the furture, you will thank yourself for using descriptive names. In this case, the procedure is relatively short so that understanding what it does is not too hard, but in more complicated code, good names can make a huge difference.</p>

<p>Because of this, my advice is to go beyond the advise @TinMan has provided and to generally use descriptive names. (It is no problem if they get longer in the process.) E.g. the name <code>rng</code> does not really tell you anything about what it is; calling it <code>sourceRange</code> would certainly convey its purpose better.</p>

<h2>Single Responsibility Principle</h2>

<p>Another good guiding principle is the so called <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>. In short, it says that a usint of code should always only be responsible for one and only one thing. This makes it a lot easier to understand and modify code. </p>

<p>Getting this right is rather hard. However, there is a one rough guidline that can help: whenever you have the urge to add a header comment, you probably want to extract a procedure or function for whatever is done in the section.</p>

<p>In your case, one responsibility is to know how to extract values from a range. You could define a function to do that as follows.</p>

<pre><code>Private Function DistinctValues(inputRange As Excel.Range) As Collection
    Dim allValues() As Variant
    allValues = inputRange.Value        

    Dim uniqueValues As Collection
    Set uniqueValues = New Collection

    Dim currentValue As Variant
    For Each currentValue In allValues 
        On Error Resume Next
        uniqueValues.Add currentValue, currentValue 
        On Error Goto 0
    Next
    Set DistinctValues = uniqueValues
End Function
</code></pre>

<p>If you ever want to change how to get distinct values, e.g. using a <code>Scripting.Dictionary</code>, you just have to change it in this one place. Moreover, your code is easier to understand if instead of</p>

<pre><code>var = Range("B2:B7")
For Each a In var
    arr.Add a, a
Next
</code></pre>

<p>you have</p>

<pre><code>Dim certificatesRange As Excel.Range
Set certificatesRange = Range("B2:B7")

Set distinctCertificates = DistinctValues(certificatesRange)
</code></pre>

<p>You could also separate the actual assembling of the new table into a procedure that takes some base point, e.g. the upper-left corner of the target range, a collection of column headers, one of row headers and the data source range.</p>

<p>With this, let us call it <code>BuildPivotTable</code>, your top procedure would look something like this:</p>

<pre><code>Public Sub PivotData
    Dim sourceRange As Excel.Range
    Set sourceRange = Range("A2:C7")

    Dim columnHeadersRange As Excel.Range
    Set columnHeadersRange = Range("B2:B7")
    Dim distinctColumnHeaders As Collection
    Set distinctColumnHeaders = DistinctValues(columnHeadersRange)

    Dim rowHeadersRange As Excel.Range
    Set rowHeadersRange = Range("A2:A7")
    Dim distinctRowHeaders As Collection
    Set distinctRowHeaders = DistinctValues(rowHeadersRange)

    Dim targetRange As Excel.Range
    Set targetRange = ActiveSheet.Range("E1")

    BuildPivotTable targetRange, distinctColumnHeaders, distinctRowHeaders, sourceRange 
End Sub
</code></pre>

<p>This separates getting the data from doing things with it. Should you want to change where you get your data, you will no longer have to find the appropriate passages between the code doing things with the data. You can even further enhance this by extracting the passages getting the various ranges into their own functions responsible to know where to get the particular data from.</p>

<p>Again, this is not that cruicial for this size of method, but as things grow larger, which tends to happen rather fast whan adding functionality to things, a good separation of responsibilities can help a lot; it certainly justifies the extra code you have to write to achieve it.</p>

<h2>Do not Reuse Variables For Different Things</h2>

<p>In your code, you first use the variable <code>arr</code> for distinct names, then for distinct certificates. This makes it harder to follow what the the collection alrady contains and actively hinders good nameing: you cannot name it after what its purpose is if it has multiple ones.</p>

<p>It really does not cost a lot to generate yet another object. So such micro-optimizations should be avoided in favor of ease of reading the code.</p>

<h2>Declare Variables Close to Their First Usage</h2>

<p>Somewhat related to the last point, it is usually better to declare variables as close to their first usage as possible. This has the advantage that you cannot accidentaly add an access to the variable before that point (The compiler will yell at you.) and that you can be sure at that point that you have a clean object. E.g. a collection will not already contain something.</p>

<p>I know that this contradicts VBA style guids. However, those have been written in the 90s and which practices are deemed useful has involved in the past two decades.</p>

<p>Note that this guideline is much less relevent in short methods following the single responsibility principle. </p>

<h2>Data Input</h2>

<p>After the general pieces of advice applicable to basically all programming languages, let me come to some more Excel and VBA specific point.</p>

<p>@TinMan already pointed out to possible enhancemets to make the code work with dynamic ranges of data. I would like to add two options: names ranges and list objects.</p>

<h3>Named Ranges</h3>

<p>I am sure you are aware that you can name ranges in Excel either by writing in the address field in the top left or using the names manager in the formulas tab. You can use these names to specify ranges. If you define a named range <code>Names</code> as <code>A2:A7</code>, you can get the range for your names via <code>Worksheets("Sheet1").Range("Names")</code>, which makes you independent from the specific design of the source sheet.</p>

<h3>Tables</h3>

<p>Even better would be to turn the input range into an Excel table, which we will call <code>SourceTable</code>. Then, you can access it as a <code>ListObject</code> via <code>WorkSheets("Sheet1").ListObjects.Item("SourceTable")</code>. Moreover, if you add another row, it will simply expand to also contain the new row. This is a lot more convenient than the approach with names ranges, which have to be adjusted to deal with new rows at the bottom.</p>

<h2>You can Save the Sheet You Are Working With in a Variable</h2>

<p>@TinMan already suggested using a <code>With</code> block to hold the worksheet you are working with. However, that will not work well when you have to pass it to some method. Instead, you can simply <code>Set</code> assigne the worksheet to a varable of type <code>Excel.Worksheet</code>. </p>

<h2>Explicitly Calling Default Members</h2>

<p>Default members are members on objects that get used automatically when the object is used in a <code>Let</code> assignmant, i.e. an assignment without the <code>Set</code> keyword. They are a source of a lot of surprising behaviour, and bugs. Thus, you should always prefer to call the curresponding member explicitly. For <code>Range</code>, this means using <code>Range.Value</code>. In <code>Cells(l + 1, 5) = arr(l)</code> you actually call <code>Cells(l + 1, 5).Value = arr(l)</code>, provided <code>arr(l)</code> contains a value type. If it contained a <code>Range</code>. the call would translate to <code>Cells(l + 1, 5).Value = arr(l).Value</code>.</p>

<h2>Iterating Collections</h2>

<p>Since there is not too much data in this example it is not rally a performance problem, but <code>Collection</code>s are not designed to be iterated using indized. You should use a <code>For Each</code> loop instead. Unfortunately, it is not possible to use value types as the type for the item to pick from the loop. However, every object type and <code>Variant</code> will work.</p>

<h2>As New is Usually Not a Good Idea</h2>

<p>You actually use the capabilitis of the <code>As New</code> declaration <code>arr As New Collection</code>, which is not seen to often. This declaration has the rather surprising effect of implicitly adding <code>If arr Is Nothing Then Set arr = new Collection</code> in front of every access to <code>arr</code>.  </p>

<p>Although this can be used here to clear the variable by setting it to <code>Nothing</code>, it would be much clearer to simply set it to <code>New Collection</code> instead.</p>

<p>Because this behaviour is surprising to most poeaple, I would generally advise against using <code>As New</code> declarations. Moreover, it hurts performance a bit because of the constant checks against <code>Nothing</code>.</p>

<h2>Declare the Type of All Variables</h2>

<p>It is already good to see that you declared the type of nearly all variables. However, you did not explicitly declare <code>a</code> as a <code>Variant</code>. This lets is vanish against the other declarations all using an <code>As Type</code> declaration.</p>
    </div>