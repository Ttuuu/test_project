<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>What would you change semantically in code in general?</p>
</blockquote>

<ul>
<li>I'd use the functionality provided by <code>CharsetEncoder</code> and
<code>CharsetDecoder</code>, rather than performing a map to characters
themselves.</li>
<li>Adding to that, I would also allow 16 bit encodings such as UTF-16 LE and BE, especially since UTF-16LE (under the stupid class name <code>Unicode</code>) is the stupid default for .NET.</li>
<li>I'd clearly disallow invalid characters, and quickly
decide that <em>this is not the charset</em> when they are present.</li>
</ul>

<blockquote>
  <p>How would you improve algorithm?</p>
</blockquote>

<ul>
<li>I'd use
some kind of frequency analysis on top of just looking for
specific characters.</li>
<li>Even if specific characters are detected, I would <em>weigh</em> the characters according to the presence in generic texts.</li>
</ul>

<blockquote>
  <p>Disadvantage of this approach is, that you need to load whole byte array and try to convert it into String to detect. That could be issue for big data. I was thinking of trying to create <code>InputStream</code>, that would detect encoding and change it "on the fly". Any points to that?</p>
</blockquote>

<p>I guess this is similar to the first point I made. The encoders and decoders use <code>ByteBuffer</code> (and <code>CharBuffer</code> for encoding) and that buffer does not need to cover the whole file (and they have specific methods for handling end of buffer).</p>

<blockquote>
  <p>Currently this code is JVM-dependent. How would you approach to make this multiplatform?</p>
</blockquote>

<p>That I cannot answer, as it depends on what functionality is present on the other platforms. However, you can always define a generic interface to your methods and then implement &amp; test on whatever platform.</p>

<hr>

<p>As a complete out of the box comment, I'd say that this kind of thing is also a good candidate for machine learning. But I guess that depends on the developer having to understand AI to a rather large extend.</p>
    </div>