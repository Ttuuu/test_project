<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>process_input</code> leaks memory like there is no tomorrow. Memory allocated with <code>current-&gt;next = malloc(sizeof(command_args_t));</code> is never released.</p>

<p>On top of that, the sequence</p>

<pre><code>        args.next = malloc(sizeof(command_args_t));
        command_args_t* current = &amp;args;
        for(argc = 0; term = strtok(NULL, " "); argc++) {
            current-&gt;next = malloc(sizeof(command_args_t));
</code></pre>

<p>allocates <code>args.next</code> and immediately overwrites this pointer on the very first iteration. Initializing with just <code>args.next = NULL;</code> is more prudent.</p></li>
<li><p>Having parallel <code>command_table</code> and <code>command_func_table</code> is prone to errors. As the number of commands grows it is easy to lose the sync. I recommend to have a single table of</p>

<pre><code>struct command {
    char * command_name;
    command_func_t command_func;
};
</code></pre>

<p>For the same reason of avoiding double maintenance, do not hardcode <code>COMMAND_NUMBER</code>. Either guard the table by the <code>NULL</code> command name, or compute its size at the compile time with the <code>count_of</code>. If your compiler does not support <code>count_of</code>, define it yourself as</p>

<pre><code>#define count_of(arr) (sizeof(arr) / sizeof(arr[0]))
</code></pre>

<p>As a side note, consider keeping command names alphabetically sorted, to binary search them. As the list of commands grows, you would feel the difference.</p></li>
<li><p>I don't see how <code>WEAPON</code> and friends are used.</p></li>
<li><p>I think we all agree that <code>atoi(args.next-&gt;next-&gt;next-&gt;arg)</code> smells.</p>

<p>Besides, it can easily segfault (because <code>process_input</code> is unaware of how many arguments the command needs), or produce incorrect result (because <code>process_input</code> is unaware of argument types).</p>

<p>I recommend to let the <em>command</em> parse its arguments (rather than do it in <code>process_input</code>). <code>process_input</code> would only parse the command name, and pass the rest of input to the command to process. Or use the <a href="https://www.gnu.org/software/libc/manual/html_node/Parsing-Program-Arguments.html" rel="nofollow noreferrer"><code>getopt</code></a> library.</p></li>
<li><p>It feels very uncomfortable having <code>hero</code> and <code>current_inventory</code> as independent globals. Consider adding an <code>items * last_item;</code> field to <code>struct player</code>.</p></li>
</ul>
    </div>