<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If we never modify the elements of <code>array</code>, then it should be passed as a pointer to const: <code>int const *array</code>.</p>

<p>The frequency counts can be unsigned, and ought to be able to represent any size of input array (that suggests that <code>count</code> should be a <code>size_t</code>).</p>

<p>We absolutely <em>must</em> test that the return value of <code>malloc()</code> (and family) is not null before trying to dereference it (including passing it to <code>memset()</code>).  Additionally, it's not necessary or desirable to cast it to the target type:</p>

<pre><code>size_t *freq = calloc(sizeof *freq, range + 1);
if (!freq) {
    fputs("Memory allocation failed!\n", stderr);
    exit(EXIT_FAILURE);
}
</code></pre>

<p>The algorithm has undefined behaviour if any element in the array is less than zero.  We need to find the minimum as well as maximum value, or perhaps change the input to be an unsigned type.</p>

<p>The counting is strange, with the nested loop.  Normally, we'd loop just once, incrementing the index for each element we look at - something like this:</p>

<pre><code>for (int i = 0;  i &lt; count;  ++i) {
     ++freq[array[i]];
}
</code></pre>

<p>To avoid excessive temporary memory use for the count array, we could use a multi-pass approach.</p>

<ul>
<li>Divide the range [min,max] into into (say) 256 buckets.</li>
<li>Count the inputs into those buckets.</li>
<li>Identify the median bucket.  Call that <em>M</em>.</li>
<li>Now divide the range represented by <em>M</em> into buckets.</li>
<li>Make another pass over the inputs, counting values within <em>M</em> into these new buckets (discarding values not in <em>M</em>).</li>
<li>Repeat until the bucket size is 1.</li>
</ul>
    </div>