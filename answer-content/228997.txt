<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suggest some correction and simplification of your <code>update</code> method.</p>

<p><strong>Result:</strong></p>

<pre><code>def update(self, rate=1, **kwargs):
  self_dict = asdict(self)
  self_dict.update(kwargs)

  for k, v in self_dict.items():
    if k != 'sale':
      v = self.round(v * rate)

    setattr(self, k, float(v))
</code></pre>

<p><strong>Explanation:</strong></p>

<ol>
<li><p>The <code>rate = kwargs.get('rate', 1)</code> can be replaced to the <code>rate=1</code> keyword argument. It does the same: if the <code>rate</code> argument was passed - use it, otherwise use default value <code>1</code>.</p></li>
<li><p>The <code>v = kwargs.get(k) or v</code> line doesn't work as you want I suspect. I found two problems:</p>

<ul>
<li><p>Test your code with these arguments:</p>

<pre><code> p.update(sale=450, rate=0.9073, cost=1023)
</code></pre>

<p>The rate and <code>round</code> function wouldn't affect the <code>cost</code>. In fact, none of passed keyword arguments will be processed.</p>

<p>Why? Because the <code>v = kwargs.get(k) or v</code> says literally: get keyword argument named <code>k</code> from the <code>kwargs</code> dictionary and assign it to <code>v</code>. If <code>kwargs</code> doesn't have such item use <code>v</code> (previously processed in the <code>for</code> loop). See? If <code>k</code> argument was passed it is used directly  - bypassing processing.</p></li>
<li><p>Also, as was mentioned in other answer, you can't pass <code>0</code> as value of keyword argument, because in this case the <code>kwargs.get(k)</code> will return <code>0</code>, which is interpreted as <code>FALSE</code> and the <code>v</code> will be used.</p></li>
</ul></li>
<li><p>Both <code>asdict(self)</code> and <code>kwargs</code> are dictionaries, so we can use the dictionary's update method to replace current <code>self</code> values to passed keyword arguments:</p>

<pre><code>self_dict = asdict(self)
self_dict.update(kwargs)
</code></pre></li>
</ol>

<p>We can do this at the beginning of function and then use updated, relevant dictionary further.</p>

<p><strong>Also</strong>, I think the <code>round</code> function should be more predictable. Now, it returns <code>float</code> in one case, <code>int</code> in others...</p>
    </div>