<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>typedef</code> <code>_t</code></h2>

<p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html" rel="nofollow noreferrer">POSIX</a> reserves identifiers ending in <code>_t</code>.  You should maybe use <code>_s</code> also for the typedef:</p>

<pre><code>struct Foobar {
    void    *foo;
    int32_t bar;
};
typedef struct Foobar foobar_s;
</code></pre>

<p><a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html#typedefs" rel="nofollow noreferrer">Or not use <code>typedef</code> at all</a>.</p>

<hr>

<h2><code>#define</code> <code>_MAX</code></h2>

<p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html" rel="nofollow noreferrer">POSIX</a> reserves identifiers ending in <code>_MAX</code> or <code>_MIN</code>.</p>

<p>For your macros (or <code>const</code>s, but don't use <code>enum</code> for that) that design maximums or minimums, I recommend using prefixes:</p>

<pre><code>#define MAX_FOO (5)
</code></pre>

<hr>

<h2>C / C++</h2>

<p>C and C++ are very different languages.  Working in the common subset is very difficult, and not always optimum.  I recommend writing the program in C, and then writing specialized C++ headers (<code>.hpp</code>) which link to your C code.</p>

<hr>

<h2>ODR</h2>

<p>C17:</p>

<blockquote>
  <p>J.5.11    Multiple external definitions</p>
  
  <p>1 There may be more than one external definition for the identifier of
  an object, with or without the explicit use of the keyword extern ; if
  the definitions disagree, or more than one is initialized, the
  behavior is undefined (6.9.2).</p>
</blockquote>

<p>Don't define <code>extern</code> functions (non-<code>static</code> functions) in header files.  If you include this header from multiple source files, you will have defined your functions more than once, and the linker will (or at least should) complain.</p>

<hr>

<h2><code>static inline</code> vs C99 <code>inline</code></h2>

<p><code>static inline</code> might look as a magic macro:  One uses <code>static inline</code> when one wants a function to always be inlined.  It has extra safety that a macro doesn't, and all the benefits (in theory).</p>

<p>Problem:  <code>inline</code> is only a hint to the compiler; it can decide not to inline a function, and then the bloating starts: being a <code>static</code> function, every file will have its own copy of the same function.</p>

<p>Secondary problem (unlikely to be important for most programs):  Two pointers to the same <code>static inline</code> function acquired from different files are unequal even when the function contents are the same.</p>

<p>Solution:  C99 <code>inline</code>.  The scheme for using C99 <code>inline</code> is the following:</p>

<p><code>file.h</code>:</p>

<pre><code>inline
int     foo(int a);

inline
int     foo(int a)
{
        /* definition */
}
</code></pre>

<p><code>file.c</code>:</p>

<pre><code>extern
int     foo(int a);
</code></pre>

<p>If you want your function to always be inlined you can use compiler specific extensions.  Note: Use <code>always_inline</code> only for very short functions (1 - 3 lines), or when you are 100% sure that most of the code will go away at compile time.  I will add an example for GCC, but if you want portability you will have to create a macro that adapts to all the compilers you want to support:</p>

<p><code>file.h</code>:</p>

<pre><code>__attribute__((always_inline))
inline
int     foo(int a);

inline
int     foo(int a)
{
        /* definition */
}
</code></pre>

<p><code>file.c</code>:</p>

<pre><code>extern
int     foo(int a);
</code></pre>

<p>Source: <a href="http://www.greenend.org.uk/rjk/tech/inline.html" rel="nofollow noreferrer">http://www.greenend.org.uk/rjk/tech/inline.html</a></p>

<hr>

<h2>magic numbers</h2>

<p><a href="https://stackoverflow.com/q/47882/6872717">What is a magic number, and why is it bad?</a></p>

<p>Don't use any numbers different than 0, 1, or 2 in your code.  The only place where numbers deserve to go is in constant macros like this:</p>

<pre><code>#define FOO (5)
</code></pre>

<hr>

<h2>Don't cast the result of <code>malloc</code></h2>

<p><a href="https://stackoverflow.com/a/605858/6872717">Do I cast the result of malloc?</a></p>

<p>NEVER, in my opinion. (There's a debate in that link. There's people that argues that you should always cast it.  Form your own opinion based on what you read there).</p>

<hr>

<h2>Safe usage of malloc</h2>

<p>Malloc is easily misused.  Problems that can arise using malloc are the following:</p>

<ul>
<li><p>casting the result:  As said above, never do this.</p></li>
<li><p><code>sizeof(type)</code> vs <code>sizeof(*foo)</code>:</p></li>
</ul>

<p><code>foo = malloc(sizeof(*foo) * nmemb);</code> is better because if you ever change the type of <code>foo</code>, this call will still be valid, while if not, you would have to change every line where malloc is called with foo.  If you forget any of those lines, good luck.</p>

<ul>
<li>overflow:</li>
</ul>

<p>If <code>(sizeof(*foo) * nmemb) &gt; SIZE_MAX</code>, it will silently wrap around, and allocate a very small amount of memory, and you will most likely end up accessing to memory that you shouldn't.</p>

<p>Solution:</p>

<p><a href="https://codereview.stackexchange.com/a/223175/200418">Use this enclosure around <code>malloc</code></a></p>

<hr>

<h2><code>errno</code></h2>

<p><code>free()</code> doesn't set <code>errno</code> so you don't need to save the value of <code>errno</code> in a temp variable .</p>

<p>Source: <a href="http://www.man7.org/linux/man-pages/man3/free.3.html" rel="nofollow noreferrer"><code>man 3 free</code></a></p>

<hr>

<h2>re<code>#define</code> the name of a function</h2>

<p>Don't do this.  It is very weird and unexpected.  Unless you have a very good reason use an <code>always_inline</code> function:</p>

<pre><code>inline
void    hashtable_mem_free(void *p)
        __attribute__((always_inline));


inline
void    hashtable_mem_free(void *p)
{

        free(p);
}
</code></pre>

<hr>

<h2>Right margin at 80 characters</h2>

<p>This is a rule in most coding standards for good reasons.</p>

<p>This (copied from your code) is unreadable:</p>

<pre><code>                if (hash == e-&gt;hash &amp;&amp; e-&gt;key.bytes == bytes &amp;&amp; memequ(e-&gt;key.data, key, bytes)) { return e; }
</code></pre>

<p>And the most important thing is that you are hiding a <code>return</code> statement where most of the screens will not show (unless you scroll).</p>

<p>Solution:</p>

<pre><code>                if ((hash == e-&gt;hash)  &amp;&amp;  (e-&gt;key.bytes == bytes)  &amp;&amp;
                                        memequ(e-&gt;key.data, key, bytes)) {
                        return e;
                }
</code></pre>

<hr>

<h2><code>static</code> in headers</h2>

<p>Don't use <code>static</code> in headers.  The reason is basically the same as <code>static inline</code>; given that <code>inline</code> is a hint, they are literally the same (for functions).</p>

<p>In variables, it's even more dangerous, because modifying a variable from one file won't affect the same (actually not the same) variable in another file.</p>

<p>A good compiler should warn about this.</p>

<hr>

<h2><code>assert</code></h2>

<p><code>static_assert</code> (&gt; C11) is a very good thing.  <code>assert</code> isn't that much.</p>

<p>A user of a program expects the program to handle errors silently and maybe warn the user when some error is important; but the user expects a program to never break, so a program should only break when there is absolutely no other possibility.</p>

<p>Remember <a href="https://en.wikipedia.org/wiki/Blue_Screen_of_Death" rel="nofollow noreferrer">BSOD</a>?  Like it?  I hope not.</p>

<p>A good reading about it: <a href="http://lkml.iu.edu/hypermail/linux/kernel/1610.0/00878.html" rel="nofollow noreferrer">LKML thread</a></p>
    </div>