<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid explicitly constructing <code>QString</code> and <code>QStringLiteral</code> objects</h1>

<p>In many cases, it's totally unnecessary to explicitly write <code>QString("...")</code> or <code>QStringLiteral("...")</code>. Constant string literals will be implicitly converted to <code>QString</code> in many cases. Also, while <code>QStringLiteral</code> might avoid a copy <em>in some cases</em>, it looks like premature optimization to me. So for example, just write:</p>

<pre><code>aboutBigMakers.append({"Heiko Köhn",
                       "",
                       "",
                       "KoehnHeiko@googlemail.com",
                       tr("Original author.", "about:Heiko")});
</code></pre>

<h1>Use a <code>struct</code> for structured data</h1>

<p>You are using a <code>QStringList</code> to hold the name, discord, github, email and description for an author. Now you have the problem that you have to remember the correct order of all the items in a <code>QStringList</code>, and it is easy to accidentily forget to add all the items to the list (especially empty ones). Instead, create a <code>struct</code> to hold these 5 items explicitly:</p>

<pre><code>struct authorInformation {
    QString realname;
    QString discord;
    QString github;
    QString email;
    QString description;
};
</code></pre>

<p>Then you can construct the vector of author information like this:</p>

<pre><code>QVector&lt;authorInformation&gt; aboutBigMakers;
aboutBigMakers.append({"Heiko Köhn",
                       "",
                       "",
                       "KoehnHeiko@googlemail.com",
                       tr("Original author.", "about:Heiko")});
</code></pre>

<p>Nothing much changed here, but in <code>dlgAboutDialog::createMakerHTML()</code> you no longer need to remember the order of the elements in the list, and can just write:</p>

<pre><code>QString dlgAboutDialog::createMakerHTML(const authorInformation &amp;aboutMaker, const bool big) const
{
    QString coloredText("&lt;span style=\"color:#%1;\"&gt;%2&lt;/span&gt;");
    QStringList contactDetails;
    if (!aboutMaker.discord.isEmpty()) {
        contactDetails.append(coloredText.arg("7289DA", aboutMaker.discord));}
    }
    ...
}
</code></pre>

<p>While you are at it, you can also add a <code>bool big</code> to <code>struct authorInformation</code>, so you don't have to pass that in as a separate function parameter, and you don't have to have one list for big and one for small authors anymore.</p>

<h1>Consider using raw string literals (C++11)</h1>

<p>You have a lot of strings containing HTML code that needs to escape double quote characters (<code>\"</code>). You can avoid this by using <a href="https://en.cppreference.com/w/cpp/language/string_literal" rel="nofollow noreferrer">raw string literals</a> introduced in C++11. For example, you can do this:</p>

<pre><code>makerHTML.append(R"(&lt;p&gt;&lt;span style="color:#bc8942;"&gt;)");
</code></pre>

<h1>Use a template library</h1>

<p>You are actually implementing a template for displaying author information. It would be much nicer if you could just write the template as one big string, and have the various items like name, email address and so on filled in in the right spots. You could use string formatting like you do with <code>coloredText</code>, but a real template language is more appropriate here. I can recommend <a href="https://github.com/no1msd/mstch" rel="nofollow noreferrer">mstch</a>, which is a C++ implementation of the <a href="https://mustache.github.io/" rel="nofollow noreferrer">{{mustache}}</a> template language. Then you can write the whole HTML structure as one big string, and you avoid concattenating lots of tiny strings, as well as avoiding an <code>.arg()</code> cascade.</p>
    </div>