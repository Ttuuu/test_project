<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some other improvements:</p>

<ul>
<li>more functions with useful names make code better documented. optionally use documentation strings.  </li>
<li>global variables are written as <code>*name*</code></li>
<li><code>DEFUN</code> replaced with <code>FLET</code> for local functions</li>
<li>use <code>?</code> or <code>-p</code> for predicates</li>
<li>don't use character values, use symbols and numbers directly</li>
<li>after printing make sure the output is done, before reading -&gt; finish-output</li>
<li>sectionize your code to improve visual navigation</li>
</ul>

<p>Code:</p>

<pre><code>(defparameter *p1*  'X   "Player 1")    
(defparameter *p2*  'O   "Player 2")    
(defparameter *tie* 'tie "Tie") 

(defun is-move-free? (move board)
  (let ((player (elt board move)))
    (not (or (eql player *p1*)
             (eql player *p2*)))))

(defun is-same? (a b c)
  (and (eql a b) (eql b c)))
</code></pre>

<p>Winning?</p>

<pre><code>(defun win-on-rows? (board)
  (flet ((check-a-row? (offset)
           (or (is-same? (elt board offset)
                         (elt board (+ offset 1))
                         (elt board (+ offset 2))))))
    (or (check-a-row? 0)
        (check-a-row? 3)
        (check-a-row? 6))))

(defun win-on-columns? (board)
  (flet ((check-a-column? (offset)
           (is-same? (elt board offset)
                     (elt board (+ offset 3))
                     (elt board (+ offset 6)))))
    (or (check-a-column? 0)
        (check-a-column? 1)
        (check-a-column? 2))))

(defun win-on-diagonals? (board)
  (or (is-same? (elt board 0)
                (elt board 4)
                (elt board 8))
      (is-same? (elt board 2)
                (elt board 4)
                (elt board 6))))

(defun win? (board)
  (or (win-on-columns?   board)
      (win-on-rows?      board)
      (win-on-diagonals? board)))
</code></pre>

<p>Game Logic:</p>

<pre><code>(defun next-player (player)
  (if (eql player *p1*) *p2* *p1*))

(defun get-move ()
  (- (parse-integer (read-line)) 1))

(defun print-board (board)
  (apply #'format t
         " ~A | ~A | ~A ~%-----------~% ~A | ~A | ~A ~%-----------~% ~A | ~A | ~A~%"
         board)
  (finish-output))

;;; This function gets the players move, plays it if possible
;;; then gets the next move. The game will play out in it's
;;; entirety through recursively calling this function.
(defun get-player-move (player board move-num)
  (print-board board)
  (if (&gt;= move-num 9)
      *tie*
    (let ((move (get-move)))
      (if (is-move-free? move board)
          (let ((board (substitute player (elt board move) board)))
            (if (win? board)
                (elt board move)
              (get-player-move (next-player player)
                               board
                               (+ move-num 1))))
        (get-player-move player board move-num)))))


(defun game ()
  (let ((result (get-player-move *p1* (list 1 2 3 4 5 6 7 8 9) 0)))
    (if (eql result *tie*)
        (format t "It's a tie!")
      (format t "The winner is ~C" result))))
</code></pre>
    </div>