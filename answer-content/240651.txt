<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some stuff after <a href="https://codereview.stackexchange.com/a/240547/29485">@bipll</a> good answer.</p>

<p><strong>size type</strong></p>

<p>The choice for <code>long</code>, as in member <code>long size;</code>, is arbitrary.  Could have been <code>int</code>, <code>char</code> or what ever.</p>

<p>Yet size code is making an array, consider using the <em>unsigned</em> integer type <code>size_t</code>.  That is the not too big/not too small type for array sizing and indexing.</p>

<p><strong>const</strong></p>

<p>Functions like <code>il_get()</code> that do not change the list are better with <code>const</code> to 1) indicate no change will occur, 2) helps some lessor compiler to make better code, 3) helps convey to the user that the list is unchanged.</p>

<pre><code>// int il_get(intlist*, long);
int il_get(const intlist*, long);
</code></pre>

<p><strong>Named parameters</strong></p>

<p>Often a user of this code is only interested in the .h file.  Providing informative names there helps them.</p>

<pre><code>// long il_push(intlist*, int);
long il_push(intlist *list, int value);
</code></pre>

<p><strong>.h include guard</strong></p>

<p>To prevent re-evaluation of .h code: <a href="https://en.wikipedia.org/wiki/Include_guard#Use_of_#include_guards" rel="nofollow noreferrer">include_guards</a></p>

<p><strong>No error checking</strong></p>

<p>List of potential failures.  If code should check them or not is up to you.</p>

<pre><code>(Re-)allocation failure.  (recommend checking)
Passing in a null pointer for `intlist*`
</code></pre>

<p><strong>list.c</strong></p>

<p>I expected the <code>il_...()</code> definitions in their own <code>list.c</code> file, not <code>main.c</code>.</p>

<p><strong>Uniform name space</strong></p>

<p>Consider a common prefix for all external symbols, perhaps <code>il_</code>.</p>

<pre><code>list.h --&gt; il.h
list.c --&gt; il.c

intlist --&gt; il_type;

il_...() --&gt; the same ( good usage here)
</code></pre>

<p><strong>Weak prototype</strong></p>

<p>The declaration of <code>il_create()</code> should include <code>void</code>, else <code>il_create(42)</code> and <code>il_create("Hello World", 867-5309)</code> will pass undetected as an error.</p>

<pre><code>// intlist il_create();
intlist il_create(void);
</code></pre>

<p><strong>Include order</strong></p>

<p>OP's include order will fail to detect if <code>"list.h"</code> can not stand on its own without <code>&lt;stdio.h&gt;, &lt;stdlib.h&gt;</code></p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "list.h"
</code></pre>

<p>I recommend the above in all files except <code>list.c</code>, so it can insure no include dependency.</p>

<pre><code>#include "list.h"
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</code></pre>
    </div>