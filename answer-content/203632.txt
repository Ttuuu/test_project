<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most important improvement is that you can abort your loop as soon as <code>factor1</code> becomes greater than <code>factor2</code>, effectively only iterating up to your number's square root instead of the whole way.</p>

<p>Another local improvement is to avoid repeated String concatenations. Repeatedly concatenating another pair of factors to the end of a String always creates a new String and throws away the previous intermediate String. For this purpose, StringBuilder is better.</p>

<p>An improved version of your program goes like this:</p>

<pre><code>package test;

import java.util.Scanner;
import java.util.Date;
import java.text.SimpleDateFormat;

public class NumberFacts {

    public static void main(String[] args) {
        // Initialize the Scanner
        Scanner in = new Scanner(System.in);

        //Prompt the user to input the number to evaluate
        System.out.print("Enter a number (from 1 to 10000): ");

        // Store the input number 
        int myNum = in.nextInt();

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date start = new Date();

        startProcess(start);

        System.out.println("\nNumber\tPerfect Sqr\tSqrt\tPrime\tFactors");

        // For each number iteration, we should begin by bringing a pair each
        // time until we hit that number.
        iterNum(myNum);

        in.close();

        Date stopTime = new Date();
        long diff = stopTime.getTime() - start.getTime();

        stopProcess(dateFormat, start, stopTime, diff);

    } // end of main method

    private static void iterNum(int n) {
        for (int iter = 1; iter &lt;= n; iter++) {
            analyzeNumber(iter);
        }
    }

    private static void analyzeNumber(int numberUnderTest) {
        int factor1 = 1;
        int factor2 = numberUnderTest;
        int pairsCounter = 0;
        int sqrt = 0;
        StringBuilder myPairs = new StringBuilder();

        // Begin factoring pairs
        do {
            if (numberUnderTest % factor1 == 0) {
                factor2 = numberUnderTest / factor1;

                // If the number is a factor pair, then
                // output the number.
                if (factor1 &lt;= factor2) {
                    String factorPair = "(" + factor1 +", "+ factor2 + ")";
                    pairsCounter++;
                    myPairs.append(factorPair);
                }

                // Checks whether the number is a perfect square 
                if (factor1 == factor2) {
                    sqrt = factor1;
                }
            }

        } while (++factor1 &lt;= factor2); // End of the factoring pair loops.

        // Print the expected formatted output for the program.
        printOutput(numberUnderTest, sqrt, pairsCounter, myPairs.toString());
    }

    private static void startProcess(Date s) {
        System.out.println("Started processing at " + s);
    }

    private static void stopProcess(SimpleDateFormat d, Date n1, Date n2, long l) {
        System.out.println("\n\nStart processing " + d.format(n1) + "\n\nStop processing: " + d.format(n2) + "\n\nDifference: " + l + " ms");
    }

    private static void printOutput(int a, int sq, int c, String s) {
        System.out.printf("%n %d \t%s\t\t%s\t%s\t%s", a, sq &gt; 0 ? "Yes" : "No", sq &gt; 0 ? Integer.toString(sq) : "", c &gt; 1 ? "No" : "Yes", s);
    }

} // end of class
</code></pre>

<p>It reduces the run time for 100000 numbers from 25 seconds (original program) to 6 seconds on my machine.</p>

<p>Besides the optimizations, I also made the program more readable to me ;-):</p>

<ul>
<li>I extracted the analysis of a single number into a method of its own.</li>
<li>I merged a few duplicate variables into one, e.g. <code>i</code> and <code>factor1</code> always have the same value, so there's no need to have both.</li>
<li>I renamed <code>iter</code> to <code>numberUnderTest</code>.</li>
<li>I had my favourite IDE (Eclipse) indent the code (mark all, Ctrl-Shift-I).</li>
</ul>

<p>Finally, the algorithm you chose is a straightforward one: try all potential factors until you have them all. There are faster, more complex ones. Just to give you an idea:</p>

<p>Do a factorization of your number into prime factors. Then you can separate the list of prime factors into two parts, one giving factor1, and the other factor2. Enumerate all the possible separations, and you get all factor pairs. While you're doing the factorization for all the numbers under test, beginning with 1, you can memorize and re-use the factorizations, e.g. when you found that 12=2*2*3, and then get to test the number 24, you divide by 2, find the result 12, know that 12=2*2*3, so we immediately know that 24 = 2 * 2*2*3 without having to analyze the 12 again.</p>

<p>But as long as you don't plan to factorize numbers with 100 digits or so, you probably won't need the most sophisticated algorithm.</p>

<p>To comment on Sharon's suggestion on using multiple threads: your algorithm analyzes every number in isolation, so multiple threads can independently run with individual numbers, meaning that your program is a candidate well-suited for multi-threading. This has the potential to reduce your execution time by the number of CPU cores in your hardware (as long as you're alone on an otherwise idle system). But managing multi-threaded programs can be a challenge, even to experienced Java programmers.</p>
    </div>