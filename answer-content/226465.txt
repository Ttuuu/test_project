<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's go through the code and see what can be improved.</p>

<hr>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
</code></pre>

<p>The header names should sorted in alphabetical order.</p>

<hr>

<pre><code>uint32_t constexpr MaxWeight = 6500;
uint32_t constexpr MinVertexes = 2;
uint32_t constexpr MaxVertexes = 1000000;
</code></pre>

<p><code>constexpr</code> is usually put in the beginning because the benefits of each <code>const</code> don't really apply to <code>constexpr</code> â€” <code>constexpr</code> applies to the entire declaration, just like <code>static</code> or <code>inline</code> does.  You can't declare a "pointer to <code>constexpr</code>" or "reference to <code>constexpr</code>" (the pointer / reference itself will be <code>constexpr</code> instead).</p>

<p><code>uint32_t</code> is not guaranteed to work (in fact, it is guaranteed to either work or be ill-formed).  Use <code>std::uint32_t</code>.  Also, since you manage to get rid of magic numbers, why not eliminate magic types as well?  Something like</p>

<pre><code>using Weight_t = std::uint32_t;
</code></pre>

<hr>

<pre><code>struct ObjectCollection
{
    size_t count = 0;
    std::vector&lt;uint32_t&gt; weights;
    std::vector&lt;size_t&gt; startingOrder;
    std::vector&lt;size_t&gt; endingOrder;
    uint32_t minWeight = MaxWeight;
};
</code></pre>

<p>Again, <code>std::size_t</code> and <code>std::uint32_t</code>.  Also, it seems that there is a class invariant that the three vectors are all of size <code>count</code>.  You may want to ensure this.</p>

<hr>

<pre><code>std::size_t readValue(std::istringstream&amp; iss)
{
    std::size_t value;
    iss &gt;&gt; value;
    if (!iss)
        throw std::runtime_error("Invalid input.");

    return value;
}
</code></pre>

<p>This is overly restrictive, both in <code>std::size_t</code> and <code>std::istringstream</code>.  Make it a template:</p>

<pre><code>template &lt;typename T, typename Istream&gt;
T read_value(Istream&amp;&amp; is)
{
    T value;
    if (!(is &gt;&gt; value))
        throw std::runtime_error{"invalid input"};
    return value;
}
</code></pre>

<hr>

<pre><code>std::istringstream readLine(std::istream&amp; stream)
{
    std::string line;
    std::getline(stream
        , line);
    if (line.empty()) throw std::runtime_error("Invalid input");
    return std::istringstream(line);
}
</code></pre>

<p>This function should return a string, not a string stream, in my opinion.  Also, why the line break in the <code>getline</code>?</p>

<hr>

<pre><code>std::vector&lt;size_t&gt; readOrder(std::istringstream iss, size_t const objectCount)
{
    std::vector&lt;size_t&gt; v;
    v.reserve(objectCount);

    int i = 1;
    while (!iss.eof() &amp;&amp; i &lt;= objectCount)
    {
        size_t orderNumber = readValue(iss);
        if (orderNumber - 1 &gt; objectCount)
        {
            throw std::runtime_error("Too high index in order");
        }
        v.push_back(orderNumber - 1);
        ++i;
    }
    if (v.size() != objectCount) throw std::runtime_error("Too few values in line");
    return v;
}
</code></pre>

<p>Don't take streams by value.  Take by reference instead.  And it doesn't make very much sense to declare a parameter as top-level <code>const</code>.</p>

<p>The while loop should really be a for loop.  Loop counters should start from 0  and use <code>&lt;</code> instead of starting from 1 and using <code>&lt;=</code>.  Like this:</p>

<pre><code>for (std::size_t i = 0; i &lt; objectCount; ++i) {
    // ...
}
</code></pre>

<hr>

<p>The <code>readWeightsAndSetMinWeight</code> function is similar.  Casting the result of <code>readValue</code> to <code>uint32_t</code> doesn't feel right; with the template above, this problem is solved.</p>

<hr>

<p>It seems that you check the input status every time you read something, and throw an exception on failure.  You can automate this by using <code>istream::exceptions</code>:</p>

<pre><code>std::cin.exceptions(std::ios_base::failbit);
</code></pre>

<p><code>std::cin</code> will automatically throw exceptions of type <code>std::ios_base::failure</code> when <code>failbit</code> is on.</p>

<hr>

<p>This should be enough to get you started.</p>
    </div>