<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Similar to Janos I would propose to use a <code>collections.namedtuple</code> for a <code>Student</code> object:</p>

<pre><code>from collections import namedtuple

Student = namedtuple("Student", ("name", "grade"))
</code></pre>

<p>It will also help, like he noted, to define a k-lowest grade function, like this:</p>

<pre><code>def get_k_lowest_grade(students, k):
    """Returns the k-lowest grade from a list of Students(name, grade)."""
    grades = set(s.grade for s in students)
    return sorted(grades)[k - 1]
</code></pre>

<p>I would also make <code>get_students_with_grade</code> return a generator to avoid duplicating memory and the same for <code>get_student_names_sorted_alpha</code> (you just have to be aware that you can iterate over the results of the function exactly once):</p>

<pre><code>def get_students_with_grade(students, grade):
    """Returns all students with `grade`
    from a list of Students(name, grade)."""
    return (s for s in students if s.grade == grade)


def get_student_names_sorted_alpha(students):
    """Returns a generator of names sorted alphabetically from a list of Students(name, grade)"""
    yield from sorted(s.name for s in students)
</code></pre>

<p>This makes your <code>main</code> a bit shorter:</p>

<pre><code>def main():
    students = get_students()
    lowest_grade_2 = get_k_lowest_grade(students, k=2)
    second_lowest = get_students_with_grade(students, lowest_grade_2)
    for name in get_student_names_sorted_alpha(second_lowest):
        print(name)
</code></pre>
    </div>