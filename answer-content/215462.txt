<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Making it to the promised land of <em>O(n)</em></h2>

<p>To reproduce your code in a playground, a <code>Media</code> struct could be defined this way:</p>

<pre><code>struct Media {
    let mediaUrl: String
    let postTimeStamp: String?
    let timeStamp: String  //A double would be more appropriate

    init(mediaUrl: String, timeStamp: String, postTimeStamp: String? = nil) {
        self.mediaUrl = mediaUrl
        self.timeStamp = timeStamp
        self.postTimeStamp = postTimeStamp
    }
}
</code></pre>

<p>Let's suppose the value of <code>imageUrlString</code> is this:</p>

<pre><code>let imageUrlString: [String: Media] =
    ["media1": Media(mediaUrl: "URL", timeStamp: "573889179.6991431", postTimeStamp: "573889189.73954"),
     "media4": Media(mediaUrl: "URL", timeStamp: "573889185.750419"),
     "media2": Media(mediaUrl: "URL", timeStamp: "573889181.49576"),
     "media3": Media(mediaUrl: "URL", timeStamp: "573889183.89598")]

var values = [Media]()
</code></pre>

<p>Your code works by relying on the <strong>chance</strong> of having the last character read from the <code>imageUrlString</code> dictionary, equal the order of the element you want to append to the <code>values</code> array. </p>

<p>Bear in mind that a dictionary is an unordered collection. And unless mutated, the order of elements stays the same. The worst case would be when, reading elements from the dictionary, yields elements in a reversed "<em>order</em>". In this case, you'll have to read from the dictionary <code>n*(n+1)/2</code> times, in order to build your <code>values</code> array. <a href="https://en.wikipedia.org/wiki/Big_O_notation" rel="nofollow noreferrer">In other terms</a>, this <em>algorithm</em> is has <em><code>O(nÂ²)</code></em> time complexity (worst case), <em><code>O(n)</code></em> best case, and is not the proper <a href="https://stackoverflow.com/a/55061682/2907715">Counting Sort</a> Algorithm which is <em><code>O(n)</code></em>. </p>

<p>Here is an attempt to make this <em><code>O(n)</code></em>:</p>

<pre><code>let tempo = Media(mediaUrl: "", timeStamp: "")
var values = Array(repeating: tempo, count: imageUrlString.count)
var keys = Array(repeating: "", count: imageUrlString.count)

for entry in imageUrlString {
    let index = Int(String(entry.key.last!))! - 1  //Force-unwrapping for brevity
    (keys[index], values[index]) = entry
}
</code></pre>

<hr>

<h2>Robustness</h2>

<p>The code in question relies on external facts that are not checked in code. For example:</p>

<ul>
<li>If <code>imageUrlString</code> is empty, <code>Done</code> will never be mutated and thus the outer loop will be infinite;</li>
<li>The order of the elements in the result array relies on the last character in a string;</li>
<li>The last character in all the keys has to exist and be numerical for <code>j</code> to be incremented. Otherwise, you're in for another infinite loop;</li>
<li>Breaking the outer loop relies on the digits at the end of the keys go from 1 to <em>at least</em> <code>imageUrlString.count</code>. </li>
</ul>

<hr>

<h2>Breaking an outer loop</h2>

<p>Instead of mutating the variable <code>Done</code> (which shouldn't be uppercased since it's an instance, not a class/type/struct/enum/etc), you can break from a nested loop this way:</p>

<pre><code>OuterLoop: while true {
    for i in imageUrlString {
        ...
        if imageUrlString.count == j {
            break OuterLoop
        }
        ...
    }
}
</code></pre>

<hr>

<h2>Straight forward sorting</h2>

<p>In Swift 5, Timsort is the algorithm that is going to be used by the standard library while sorting. It has better time complexity than Introsort and is more versatile and less memory greedy than O(n) sorting algorithms. </p>

<p>So, why not just use it to sort the entries in <code>imageUrlString</code> by <code>timeStamp</code> or a some other more reliable criteria?</p>

<pre><code>let values = imageUrlString.values
    .sorted(by: { $0.timeStamp &lt; $1.timeStamp }) 
</code></pre>

<p>(If you're sure that <code>timeStamp</code>s represent real numbers, you could cast them to Double before comparing them)</p>
    </div>