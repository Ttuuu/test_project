<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure this answer will be sufficient, but some quick things that jump out:</p>

<ul>
<li>Keep your code organized:

<ul>
<li>Put imports at the top</li>
<li><a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">Guard any serious code execution in a <code>__name__ == '__main__'</code> block</a> (and usually use a <code>main</code> function as well)</li>
<li>Have blank space every few lines to visually separate logical groups of code</li>
<li>If the code doesn't document itself (and ideally, it should), add comments where necessary</li>
</ul></li>
<li>Use <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">consistent, conventionally Pythonic naming</a>, such as using lower-case snake-case for variable names (e.g., <code>return_code</code> instead of <code>rCod</code>)</li>
<li>As a super minor detail, there are better ways to construct strings than adding them. A fairly modern, flexible way to do so is to use <code>.format</code>, or if you can be sure you're using Python 3.6+ then <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">"f-strings"</a> are wonderful)</li>
<li>It's really not clear why you sleep for a random amount of time at the end... If that's important, comment why so, otherwise probably don't do it. If there's something specific you're waiting on, figure out how to wait for it properly so you don't have a possible race condition.</li>
<li>I'm not super familiar with Windows commands and what <code>/S /Q</code> do to the <code>rmdir</code> command, but could you not just use <code>os.rmdir(del_dir)</code>?</li>
</ul>

<p>Here's what your code might look like using the above suggestions:</p>

<pre><code>import os
import subprocess
import winshell
from random import randint
from time import sleep

def main():
    file_size = os.path.getsize('C:\Windows\Temp')
    print("{} kb of data will be removed".format(file_size))
    del_dir = r'c:\windows\temp'

    # Could this just be os.rmdir(del_dir)???
    process = subprocess.Popen('rmdir /S /Q {}'.format(del_dir), shell=True,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    _ = process.communicate()
    return_code = process.returncode
    if return_code == 0:
        print('Success: Cleaned Windows Temp Folder')
    else:
        print('Fail: Unable to Clean Windows Temp Folder')

    winshell.recycle_bin().empty(confirm=False, show_progress=False, sound=False)

    # Is this important?
    # sleep(randint(4, 6))
    input("Press any key to continue")

if __name__ == '__main__':
    main()
</code></pre>
    </div>