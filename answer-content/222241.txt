<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your second code, while might be slightly more efficient than the first due to the avoidance of the second <code>try ... catch</code> inside the first, has two bugs:</p>

<p>First, if <code>str</code> contains a value greater than <span class="math-container">\$2^{63}-1\$</span> or less than <span class="math-container">\$-2^{63}\$</span>, while it is an integer value (<code>d % 1 == 0</code> will be <code>true</code>), it cannot be expressed as a <code>long</code>, so <code>d.longValue()</code> will discard the upper bits.</p>

<p>Second, if <code>str</code> contains a value which can be parsed as a <code>Long</code>, but has a magnitude greater than <span class="math-container">\$2^{52}\$</span>, parsing it as a <code>Double</code> will discard some of the low-order bits.</p>

<pre><code>jshell&gt; Double d = Double.parseDouble("10000000000000123");
d ==&gt; 1.0000000000000124E16

jshell&gt; d.longValue()
$2 ==&gt; 10000000000000124

jshell&gt; Long.parseLong("10000000000000123");
$3 ==&gt; 10000000000000123
</code></pre>

<hr>

<p>The statements <code>return Long.parseLong(str)</code> and <code>return Double.parseDouble(str)</code> may be doing more work than necessary.  These methods return a <code>long</code> and a <code>double</code>, respectively, which then need to be auto-boxed into <code>Long</code> and <code>Double</code>.  You should instead use <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Long.html#valueOf(java.lang.String)" rel="nofollow noreferrer"><code>Long.valueOf(str)</code></a> and <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Double.html#valueOf(java.lang.String)" rel="nofollow noreferrer"><code>Double.valueOf(str)</code></a> which return already boxed values.</p>

<hr>

<p>I would write this code like:</p>

<pre><code>private static Object tryParse(String str) {
    try {
        return Long.valueOf(str);
    } catch (NumberFormatException ex) { /* no-op */ }

    try {
        return Double.valueOf(str);
    } catch (NumberFormatException ex) { /* no-op */ }

    return str;
}
</code></pre>

<p>... which avoids the nested <code>try-catch</code> blocks, so can easily be extended to several other types, possibly even looping over a collection of parsers:</p>

<pre><code>private static Object tryParse(String str) {
    for (Parser parser : parsers) { 
        try {
            return parser.valueOf(str);
        } catch (NumberFormatException ex) {
            /* no-op */
        }
    }

    return str;
}
</code></pre>

<p>or even</p>

<pre><code>private static Object tryParse(String str) {
    for (Parser parser : parsers) { 
        Optional&lt;Object&gt; value = parser.valueOf(str);
        if (!value.empty()) {
            return value.get();
        }
    }

    return str;
}
</code></pre>

<p>Implementation of <code>Parser</code>, and its instances, left as exercise to student.</p>
    </div>