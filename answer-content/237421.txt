<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Strategies</h2>

<p>It would have been good to summarize the key points and strategies of the different implementations.
Mostly for yourself, to clarify your thinking and solidify your understanding.
Secondly for reviewers :-)
Let me take a jab at that now.</p>

<h3>Solution 1</h3>

<ul>
<li>while there are lists to merge</li>
<li>find the minimum head and merge it</li>
<li>update the list with the minimum head or remove it</li>
</ul>

<p><strong>⇒</strong> The weakness of this solution is the linear step of finding the minimum head.
A significant improvement would be to use something better.
For example, you could put the lists in a heap.
Then finding the list with the minimum head would become logarithmic.</p>

<h3>Solution 2</h3>

<ul>
<li>reduce the lists, using a helper function that merges two lists</li>
<li>the helper function uses a loop to traverse the lists</li>
</ul>

<p><strong>⇒</strong> The weakness of this solution is the reduce step is sub-optimal.
It merges the lists into a single growing list.
A significant improvement would be to use a divide and conquer approach:
merge the first <span class="math-container">\$k/2\$</span> lists and the last <span class="math-container">\$k/2\$</span> lists,
merge their result, and apply this logic recursively.
They key is dividing intervals in half.</p>

<h3>Solution 3</h3>

<ul>
<li>reduce the lists, using a helper function that merges two lists</li>
<li>the helper function uses recursion to traverse the lists</li>
</ul>

<p><strong>⇒</strong> The weakness of this solution is the same as the previous:
the reduce is not using divide and conquer.
Whether you use a loop or recursion doesn't make a difference if the stack limit is not reached during recursion.</p>

<h3>Solution 4</h3>

<ul>
<li>while there are lists to merge</li>
<li>merge the first two lists, append the resulting list to the end</li>
<li>the helper function uses recursion to traverse the lists</li>
</ul>

<p><strong>⇒</strong> This solution implements a divide and conquer logic,
and that makes it significantly faster as the input grows.
This solution does pass the online judge.</p>

<p>It seems you thought the loop in this solution is the same as what reduce does,
and that's not the case, that's the key difference.</p>

<h3>Key takeaways</h3>

<ul>
<li>verify assumptions (how reduce actually works)</li>
<li>trust what you know: recursion and iteration are equivalent in terms of time complexity. If you see an important difference in the result, then you're probably overlooking a key difference somewhere else, perhaps due to an incorrect assumption</li>
<li>clear your mind and seek the key differences</li>
</ul>
    </div>