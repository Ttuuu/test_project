<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code would be much simpler if you'd use a list of lists for the matrix:</p>

<pre><code>grid = [
  [...],
  [...],
  ...
]
</code></pre>

<p>each row is a list itself, so to get the element at <code>(x, y)</code> we can now say <code>grid[y][x]</code>. This is massively more readable than your previous <code>grid[y*20+x]</code>.</p>

<p>Your code now looks like:</p>

<pre><code>#horizontal and vertical
for h in xrange(0,20):
    for hsub in xrange(0,17):
        if grid[h][hsub]*grid[h][hsub+1]*grid[h][hsub+2]*grid[h][hsub+3] &gt; largest[0]:
            largest[0] = grid[h][hsub]*grid[h][hsub+1]*grid[h][hsub+2]*grid[h][hsub+3]
        if grid[hsub][h]* grid[hsub+1][h]* grid[hsub+2][h]* grid[hsub+3][h] &gt; largest[1]:
            largest[1] = grid[hsub][h]* grid[hsub+1][h]* grid[hsub+2][h]* grid[hsub+3][h]

#diagonal right and left
for r in xrange(0,17):
    for rsub in xrange (0,17):
        if grid[rsub][r]* grid[rsub+1][1+r]* grid[rsub+2][2+r]* grid[rsub+3][3+r] &gt; largest[2]:
            largest[2] = grid[rsub][r]* grid[rsub+1][1+r]* grid[rsub+2][2+r]* grid[rsub+3][3+r] 
        if grid[rsub][3+r]* grid[rsub+1][2+r]* grid[rsub+2][1+r]* grid[rsub+3][r] &gt; largest[3]:
            largest[3] =  grid[rsub][3+r]* grid[rsub+1][2+r]* grid[rsub+2][1+r]* grid[rsub+3][r]
</code></pre>

<p>At this step I also removed uneccessary empty lines from your code.</p>

<p>We see that each expression for summing adjacent cells in a certain direction is repeated two times. We can avoid this by using a variable each time:</p>

<pre><code>#horizontal and vertical
for h in xrange(0,20):
    for hsub in xrange(0,17):
        horizontal = grid[h][hsub] * grid[h][hsub+1] * grid[h][hsub+2] * grid[h][hsub+3]
        vertical   = grid[hsub][h] * grid[hsub+1][h] * grid[hsub+2][h] * grid[hsub+3][h]
        if horizontal &gt; largest[0]:
            largest[0] = horizontal
        if vertical &gt; largest[1]:
            largest[1] = vertical

#diagonal right and left
for r in xrange(0,17):
    for rsub in xrange (0,17):
        right_diagonal = grid[rsub][0+r] * grid[rsub+1][1+r] * grid[rsub+2][2+r] * grid[rsub+3][3+r]
        left_diagonal  = grid[rsub][3+r] * grid[rsub+1][2+r] * grid[rsub+2][1+r] * grid[rsub+3][r]
        if right_diagonal &gt; largest[2]:
            largest[2] = right_diagonal
        if left_diagonal &gt; largest[3]:
            largest[3] = left_diagonal
</code></pre>

<p>This format makes it much easier to spot errors â€“ just as I'm writing this, I see that we forgot a <code>+1</code> in the left diagonal (corrected in the previous code as well).</p>

<p>All of these products look similar: We have some starting point and a direction. We then take three steps in that direction, and multiply all numbers. We could abstract this:</p>

<pre><code>def product_in_direction(grid, start, direction, steps):
    x0, y0 = start
    dx, dy = direction
    product = 1
    for n in range(steps):
        product *= grid[y0 + n*dy][x0 + n*dx]
    return product
</code></pre>

<p>Now the rest of the code simplifies to:</p>

<pre><code>#horizontal and vertical
for h in xrange(0,20):
    for hsub in xrange(0,17):
        horizontal = product_in_direction(grid, (hsub, h), (1, 0), 4)
        vertical   = product_in_direction(grid, (h, hsub), (0, 1), 4)
        if horizontal &gt; largest[0]:
            largest[0] = horizontal
        if vertical &gt; largest[1]:
            largest[1] = vertical

#diagonal right and left
for r in xrange(0,17):
    for rsub in xrange (0,17):
        right_diagonal = product_in_direction(grid, (rsub, r  ), (1,  1), 4)
        left_diagonal  = product_in_direction(grid, (rsub, r+3), (1, -1), 4)
        if right_diagonal &gt; largest[2]:
            largest[2] = right_diagonal
        if left_diagonal &gt; largest[3]:
            largest[3] = left_diagonal
</code></pre>

<p>As a next step, we will remove the unnecesary <code>largest</code> array: Why do we need to remember four different values when we only want the largest?</p>

<pre><code>largest = 0

#horizontal and vertical
for h in xrange(0,20):
    for hsub in xrange(0,17):
        largest = max(
            product_in_direction(grid, (hsub, h), (1, 0), 4), # horizontal
            product_in_direction(grid, (h, hsub), (0, 1), 4), # vertical
            largest,
        )

#diagonal right and left
for r in xrange(0,17):
    for rsub in xrange (0,17):
        largest = max(
            product_in_direction(grid, (rsub, r  ), (1,  1), 4), # right diagonal
            product_in_direction(grid, (rsub, r+3), (1, -1), 4), # left diagonal
            largest,
         )
</code></pre>

<p>It is annoying that we iterate over two different ranges. If we update our <code>product_in_direction</code> function to employ a range check, then we can avoid the need for that:</p>

<pre><code>def product_in_direction(grid, start, direction, steps):
    x0, y0 = start
    dx, dy = direction

    if  not(0 &lt;= y0                  &lt; len(grid) and
            0 &lt;= y0 + (steps - 1)*dy &lt; len(grid) and
            0 &lt;= x0                  &lt; len(grid[y0]) and
            0 &lt;= x0 + (steps - 1)*dx &lt; len(grid[y0])):
        return 0

    product = 1
    for n in range(steps):
        product *= grid[y0 + n*dy][x0 + n*dx]
    return product
</code></pre>

<p>Now we just iterate over all indices:</p>

<pre><code>#horizontal and vertical
for y in range(len(grid)):
    for x in range(len(grid[y])):
        largest = max(
            product_in_direction(grid, (x, y),   (1,  0), 4), # horizontal
            product_in_direction(grid, (x, y),   (0,  1), 4), # vertical
            product_in_direction(grid, (x, y  ), (1,  1), 4), # right diagonal
            product_in_direction(grid, (x, y+3), (1, -1), 4), # left diagonal
            largest,
        )
</code></pre>

<p>Note how the variable names <code>x</code> and <code>y</code> more clearly express what they actually mean than <code>h</code> or <code>rsub</code>.</p>

<p>To sum up what I did:</p>

<ol>
<li>picked appropriate data structures</li>
<li>factored out common code, using functions if appropriate</li>
<li>abstract details like bounds checking away</li>
</ol>
    </div>