<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before separating the code into classes try separating it into more methods. At the very least separate business/logic code and input/output code. You should be able to use the same, unchanged business code no matter if it's a command line program, has a GUI or is a web application. For example <code>getJSONAPIdataFromURL</code> shouldn't write to <code>System.out</code>, but return an error value or throw an exception (which you should catch and display to user in the input/output part of the code). That business code would then be a prime example to be put into a separate class.</p>

<p>There are many other things that can be done:</p>

<hr>

<blockquote>
<pre><code>import java.util.*;
</code></pre>
</blockquote>

<p>Don't import using wildcards.</p>

<blockquote>
<pre><code>import static java.lang.System.out;
</code></pre>
</blockquote>

<p>If you import something statically, then use it everywhere and not just in a few places. However I wouldn't statically import <code>System.out</code>, since <code>System.out.println(...)</code> is more readable than just <code>out.println(...)</code>.</p>

<hr>

<p>There is no reason for <code>jsonAPIresponseObject</code> to be a (static) field. It's not used anywhere else than in the <code>main</code> method, and even if it weren't, then it should be passed around to other methods as an argument.</p>

<hr>

<p>Consider (optionally) allowing the user to pass the currency as a command line argument.</p>

<hr>

<p><code>.close()</code> the <code>Scanner</code> and the <code>InputStream</code> you get from the <code>HttpConnection</code> after you've used it, for example using <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">"try with resources"</a> and <code>.disconnect()</code> the <code>HttpConnection</code>.</p>

<p>Consider using an third party HTTP client library. It maybe a a bit heavy weight for such a small project, but the API is much nicer. (Or Java 9 has a new HTTP client, that is better than the old one).</p>

<hr>

<p>You are neither checking if the <code>JSONObject::get</code> calls are throwing an exception nor checking if you safely can cast its results. Use <code>JSONObject::optJSONObject</code> (and <code>JOSNObject::optDouble</code> for doubles) to get results that don't need casting and check them for null.</p>

<hr>

<p>If you have Java 8, then use the "new" <code>LocalDate</code> class to handle dates. It's much simpler than <code>Date</code>/<code>Calendar</code>:</p>

<pre><code>    // The formatter should be a static final field;
    DateTimeFormatter ft = DateTimeFormatter.ISO_LOCAL_DATE;

    LocalDate dNow = LocalDate.now();
    LocalDate dateBefore30Days = dNow.minusDays(30);

    String currentDate = ft.format(dNow);
    String fromDate = ft.format(dateBefore30Days);
</code></pre>

<hr>

<p>When building an URL make sure that URL parameters are properly escaped, especially since the currency is user input. </p>

<hr>

<p>Use the smallest possible/sensible interface when declaring variables and method signatures. Instead of </p>

<pre><code>ArrayList&lt;Double&gt; priceListForDateRange = new ArrayList&lt;Double&gt;();
</code></pre>

<p>and </p>

<pre><code>public static double getMaxValue(ArrayList&lt;Double&gt; numbers) { 
</code></pre>

<p>just </p>

<pre><code>List&lt;Double&gt; priceListForDateRange = new ArrayList&lt;&gt;();
</code></pre>

<p>and </p>

<pre><code>public static double getMaxValue(List&lt;Double&gt; numbers) {
</code></pre>

<hr>

<p>The min/max methods can be simplified by using Java 8 streams, e.g:</p>

<pre><code>public static double getMaxValue(List&lt;Double&gt; numbers) {
   return numbers.stream().max(Comparator.naturalOrder()).get();
}
</code></pre>

<p>or since you only need the min and max values, calculate them directly in the loop reading them from the JSONObject.</p>
    </div>