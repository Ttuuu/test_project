<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a general review, not a specific performance review.</p>

<hr>

<p>Many of the operators ought to be const-qualified.  Relational operators are of questionable value, given there isn't a natural ordering for coordinate vectors.</p>

<hr>

<p>The constructors are fragile because they don't enforce the requirement that the caller provide at least three values.  The <code>initializer_list</code> constructor is pointless really - just provide an ordinary 3-argument constructor that will be properly checked at the call site, and prefer initialization to assignment (this last may be a performance issue):</p>

<pre><code>vect3D(double x, double y, double z)
  : x{x}, y{y}, z{z}
{}
</code></pre>

<hr>

<p>I don't think there's any need for the assignment operator, unless you really don't want to copy <code>tol</code> as the compiler-generated one does - in which case, I'd recommend an explanatory comment, because it just looks like you forgot that member.</p>

<hr>

<p>You seem to missing an include of <code>&lt;cmath&gt;</code> for <code>std::pow()</code> and <code>std::sqrt()</code>.  However, you don't want to be using those functions, given that <code>&lt;cmath&gt;</code> provides a (much better behaved and possibly more efficient) <code>std::hypot()</code> function:</p>

<pre><code>// Euclidean norm
double norm2() const { return std::hypot(x, y, z); };
friend double norm2(vect3D const &amp;a) { return a.norm2(); };
</code></pre>

<p>(Note: in C++14 and earlier, <code>std::hypot()</code> only took two arguments, so you had to write <code>std::hypot(std::hypot(x, y), z)</code> or similar.)</p>

<hr>

<p>The extra <code>std::vector</code> of pointers that each <code>vect3D</code> carries around with it is likely to be a performance drag.  If you really want that help for indexing, consider a <code>static constexpr</code> array of member-pointers instead (which won't take space in the object, nor need to allocate when it's copied):</p>

<pre><code>    // To access coordinates using square bracket notation, for convenience
    double operator[](int i) const { return this-&gt;*p[i]; };
    double&amp; operator[](int i) { return this-&gt;*p[i]; };

private:
    static constexpr double vect3D::*p[] = { &amp;vect3D::x, &amp;vect3D::y, &amp;vect3D::z };
</code></pre>

<hr>

<p>Don't stream <code>std::flush</code> when writing output.  If callers want output to be flushed, they will do this themselves; if not, they certainly don't want it to be imposed upon them.</p>

<hr>

<p>Header rationalisation - in conjunction with the other improvements I recommend, we only need</p>

<pre><code>#include &lt;cmath&gt;
#include &lt;ostream&gt;
</code></pre>
    </div>