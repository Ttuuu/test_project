<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The tricky part of this problem is how to handle the special cases for the start and end of the list, as well as how to handle short lists with fewer than three elements.</p>

<p>The fact that you need to consider up to three elements at a time means that you need a lot of base cases for recursion, though.  It's also undesirable to expose the special cases in the form of the <code>carryOver</code> and <code>useCarryOver</code> parameters.</p>

<p>A better approach would be to take advantage of the <a href="https://www.scala-lang.org/api/current/scala/collection/immutable/List.html#sliding(size:Int):Iterator%5BRepr%5D" rel="noreferrer"><code>List.sliding</code></a> function.  (Note that <code>.sliding</code> may produce a <code>group</code> with just two elements instead of three, if the input <code>lst</code> has length two.)</p>

<pre><code>def multiplication(lst: List[Int]): List[Int] = lst match {
  case _::_::_ =&gt;
    (lst.head :: lst ++ List(lst.last))
      .sliding(3)
      .map(group =&gt; group.head * group.last)
      .toList
  case _ =&gt; lst
}
</code></pre>
    </div>