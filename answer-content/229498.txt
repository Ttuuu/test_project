<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I cannot imagine the code being that reduced; you probably removed extraneous code.
The code shown should be clearer as:</p>

<pre><code>public class ProductInitialization {
    public void setAccess(Product p){
        p.access = p.brand.equals("LOCAL") ? ProductConfiguration.PRODUCT_ACCESS
             : "DEFAULT";
    }
}

public class ProductMarketInitialization {
    public void setMarketAccess(Product p){
        p.access = p.type.equals("MARKET") ? ProductConfiguration.MARKET_PRODUCT_ACCESS
                   : "MARKET_DEFAULT";
     }
}
</code></pre>

<p>The <code>ProductConfiguration</code> is taken from a properties file. This <code>PropertiesResourceBundle</code> is principally partly lazy. A <code>ListResourceBundle</code> would be totally immediate, as this is a java class containing arrays. If on the other hand you would like the startup as smoothly as possible, a totally lazy loading would need <strong>getters</strong> for the <code>ProductConfiguration</code>.</p>

<p>This seems still not very important, so be it.</p>

<p>The special cases of a brand <code>LOCAL</code> and type <code>MARKET</code>, and finally a special result <code>DEFAULT</code> and <code>MARKET_DEFAULT</code> hinting at yet another case handling are more cumbersome.</p>

<pre class="lang-none prettyprint-override"><code>Old      New

LOCAL    ${productConf.productAccess}
other    Optional.empty()

MARKET   ${productConf.marketProductAccess}
other    Optional.empty()
</code></pre>

<p>So making the access field an <code>Optional&lt;...&gt;</code>, maybe even an optional getter.</p>

<p>Having two initialisation classes seems <strong>overdesigned</strong>, especially as they create two distinct categories of the same <code>Product</code>.</p>

<p>In general it seems too early to pay too much attention to <em>adding extra code</em> for nicety's sake.</p>

<pre><code>    public void configAccessForDefault(Product p){
        p.access = p.brand.equals("LOCAL") ? ProductConfiguration.PRODUCT_ACCESS
             : "DEFAULT";
    }

    public void configAccessForMarket(Product p){
           p.access = p.type.equals("MARKET") ? ProductConfiguration.MARKET_PRODUCT_ACCESS
                   : "MARKET_DEFAULT";
     }
</code></pre>
    </div>