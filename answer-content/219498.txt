<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry, but this is a general review and will not answer your specific question. While this is a simple test program, it is good to develop some habits in writing C or C++ programs.</p>

<p><strong>Complexity</strong><br>
One of the good habits to keep in mind is the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> which states </p>

<blockquote>
  <p>"every module, class, or function should have responsibility over a
  single part of the functionality provided by the software, ...".</p>
</blockquote>

<p>The Single Responsibility Principle is the first pillar in <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID</a> programming. SOLID programming is a set of principles that generally improve object oriented programming.</p>

<p>The code is too complex to be in one function, <code>main()</code> could be divided into may functions that would make it easier to read and debug. Generally <code>main()</code> should do the following when necessary:<br>
 - call a function to process command line arguments.<br>
 - call functions to set up for any processing<br>
 - call one function to do the processing, this function may call
   many other functions<br>
 - call functions to clean up after processing</p>

<p>In this program there doesn't seem to be any command line arguments so that function isn't necessary. Some possible functions called by <code>main()</code>:<br>
 - Set Up Platforms<br>
 - Set Up Devices<br>
 - Set Up Program<br>
 - Set Up Queues<br>
 - Execute Program<br>
Any or all of these functions can return bool or int to indicate success or failure</p>

<p><strong>Use System Defined Constants to Make Code More Readable</strong><br>
Rather than using <code>return(1);</code> or <code>return(0)</code> in main there are constants defined in <code>cstdlib</code> or <code>stdlib.h</code> that indicate success or failure of a program, these are <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="nofollow noreferrer">EXIT_SUCCESS and EXIT_FAILURE</a>. Since they are system defined they are more portable than <code>zero</code> or <code>one</code>. They also make the code self documenting:</p>

<pre><code>    return(EXIT_SUCCESS);

    return(EXIT_FAILURE);
</code></pre>

<p><strong>Avoid the Use of the Exit Function in C++ and C</strong><br>
The code is good in that it only calls <code>std::exit()</code> <code>from main()</code>, however, it is generally a bad idea to call <code>std::exit()</code> especially from functions that are not <code>main()</code>. When calling exit from a function other than main no cleanup code will be called and if the program is a program that shouldn't terminate such as an operating system there can be dire side effects. Even calling exit from main may not clean up after processing as explained in this <a href="https://stackoverflow.com/questions/30250934/how-to-end-c-code">stackoverflow.com question</a>. The accepted practice is to call return from main. </p>
    </div>