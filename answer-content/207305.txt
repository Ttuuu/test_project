<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class HTTPServer {
    static Writer writer;
    private static ServerSocket serverConnect;
    private static final int PORT = 8080;
    static int id = 0;
</code></pre>
</blockquote>

<p><code>PORT</code> is fine. The other three should probably not be fields. The socket and connection count should have a scope limited to a single method, so don't need to be fields, and the logger could be passed into the classes which need it more elegantly, in a way which allows you to e.g. extend the code to support separate instances for separate sites with their own logs.</p>

<p>To implement the proposal above, <code>serverSocketCreate</code> should return the socket rather than storing it in a field.</p>

<hr>

<blockquote>
<pre><code>        File logFile = new File("log.txt");
</code></pre>
</blockquote>

<p>Why is this path not a <code>static final</code> field alongside <code>PORT</code>?</p>

<hr>

<blockquote>
<pre><code>        boolean result = false;
        try {
            result = Files.deleteIfExists(logFile.toPath());
            if(result) logFile.createNewFile();
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(logFile), StandardCharsets.UTF_8));
</code></pre>
</blockquote>

<p>I thoroughly approve of explicitly specifying UTF-8 as the encoding rather than relying on defaults. But the rest seems rather confused. It attempts to delete the file; if it succeeds, it creates a blank file; then it opens the file to write, truncating it. Why bother with the first two steps? The only reason I can guess is an attempt to eliminate some classes of security issue which can occur if the file already exists and has unwanted permissions; but in that case you would need to <code>createNewFile()</code> regardless of <code>result</code>.</p>

<hr>

<blockquote>
<pre><code>    public static void main(String[] args) throws IOException {
        serverSocketCreate();
        logFileCreate();
        while(true)
        {
            Socket s = serverConnect.accept();
</code></pre>
</blockquote>

<p>What if <code>serverSocketCreate</code> failed, catching and printing an <code>IOException</code>? What if <code>logFileCreate()</code> failed?</p>

<hr>

<blockquote>
<pre><code>            WorkerThread wt = new WorkerThread(s);
            Thread t = new Thread(wt);
            t.start();
            System.out.println("Thread number is: " + id);
</code></pre>
</blockquote>

<p>What exactly is the point of <code>id</code>? It doesn't seem to actually be used as an identifier.</p>

<hr>

<blockquote>
<pre><code>class Information{
</code></pre>
</blockquote>

<p>That is not a very informative name. Information about what?</p>

<blockquote>
<pre><code>    private String method;
    private String fileName;
    private String fileType;

    public Information(){
        method = fileName = fileType = "";
    }
</code></pre>
</blockquote>

<p>In practical usage, the setters are used only immediately after creation. The values could instead be arguments of the constructor, and the fields could be <code>public final</code>, simplifying the class and giving the compiler and the maintenance programmer some useful hints.</p>

<hr>

<blockquote>
<pre><code>class WorkerThread implements Runnable{
</code></pre>
</blockquote>

<p>Again, not a very informative name.</p>

<blockquote>
<pre><code>    private static String MIME_TYPE;
    ...
    private static final String OUTPUT_HEADERS = "Content-Type: " + MIME_TYPE  + "\r\nContent-Length: ";
</code></pre>
</blockquote>

<p>Spot the bug.</p>

<blockquote>
<pre><code>    private static final String SUCCESS_HEADER = "HTTP/1.1 200 OK\r\n";
    private static final String ERROR_HEADER = "HTTP/1.1 404 Not Found\r\n";
</code></pre>
</blockquote>

<p>HTTP/1.1? I don't think so. This server doesn't even implement all of HTTP/1.0.</p>

<blockquote>
<pre><code>    private static final String FILE_NOT_FOUND = "&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;\nError\n&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n&lt;h1&gt;404-File Not Found&lt;/h1&gt;\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;";
</code></pre>
</blockquote>

<p>Those <code>\n</code> are unnecessary and just make the content harder to read.</p>

<hr>

<blockquote>
<pre><code>    public WorkerThread(Socket s){
        this.s = s;
        try{
            in = new BufferedReader(new InputStreamReader(s.getInputStream()));
            out = new DataOutputStream(s.getOutputStream());
        } catch (IOException e){
            e.printStackTrace();
        }
</code></pre>
</blockquote>

<p>Is this the right place to catch that exception, and if so is that the right way to handle it? The result is that you end up with a useless object, and you're going to spin up a thread just to throw a <code>NullPointerException</code>.</p>

<hr>

<blockquote>
<pre><code>    private void closeConnection() throws IOException{
        out.flush();
        out.close();
        in.close();
        s.close();
        //HTTPServer.writer.close();
    }
</code></pre>
</blockquote>

<p>Here, on the other hand, catching some exceptions would be useful. If you fail to close <code>out</code>, you may still be able to tidy up some native state by closing <code>in</code>.</p>

<hr>

<blockquote>
<pre><code>    private void setMimeType(String fileType){
        if(fileType.equals("html")){
            MIME_TYPE = "text/html";
        } else if(fileType.equals("png")){
            MIME_TYPE = "image/png";
        } else if(fileType.equals("pdf")){
</code></pre>
</blockquote>

<p>Here a <code>Map&lt;String, String&gt;</code> set up in a static constructor would be a lot cleaner.</p>

<hr>

<blockquote>
<pre><code>    private byte [] readFileIntoByteArray(File file) throws IOException{
        FileInputStream fileInputStream = new FileInputStream(file);
        byte [] data = new byte[(int) file.length()];
        fileInputStream.read(data);
</code></pre>
</blockquote>

<p>This is badly buggy. Read the <a href="https://docs.oracle.com/javase/7/docs/api/java/io/FileInputStream.html#read(byte%5B%5D)" rel="nofollow noreferrer">API doc for FileInputStream.read</a> and then fix it by using the return value and a loop.</p>

<hr>

<blockquote>
<pre><code>    private void writeToLogFile(String message,String statusCode,int fileSize) throws IOException {
        HTTPServer.writer.write(InetAddress.getByName("localHost").getHostAddress() + "--" + "[" + new Date().toString() + "] \"" + message + "\" " + statusCode + " " + fileSize);
</code></pre>
</blockquote>

<p>Firstly, this has a race condition. Multiple threads accessing a single writer need to be synchronised.</p>

<p>Secondly, what does <code>InetAddress.getByName("localHost").getHostAddress()</code> give? That could use a comment, and possibly could be cached.</p>

<hr>

<blockquote>
<pre><code>    private String readRequest() throws IOException{
        return in.readLine();
</code></pre>
</blockquote>

<p>See my previous comments about not being HTTP/1.1. It's impossible to implement HTTP/1.1 reading only a single line of the request.</p>

<hr>

<blockquote>
<pre><code>    private Information extractInformation(String message){
</code></pre>
</blockquote>

<p>Is this really <code>parseRequest</code>?</p>

<hr>

<blockquote>
<pre><code>    private int contentLength() throws IOException{
        String str;
        int postDataI = -1;
        while((str = readRequest()) != null) {
            if(str.isEmpty()) break;
            final String contentHeader = "Content-Length: ";
            if(str.contains(contentHeader)){
                postDataI = Integer.parseInt(str.substring(contentHeader.length()));
            }
        }
</code></pre>
</blockquote>

<p>Yikes! Why not read all of the headers into some structure, preserve the whole structure, and extract individual headers when needed?</p>

<hr>

<blockquote>
<pre><code>            String message = readRequest();

            Information info = new Information();

            if(message != null){
                info = extractInformation(message);
            }
</code></pre>
</blockquote>

<p>If <code>message == null</code> shouldn't there be an error? And in that case, why create an empty <code>Information</code> instance which will immediately be discarded?</p>

<hr>

<blockquote>
<pre><code>            if(info.getMethod().equals("GET")){
                File file = new File(info.getFileName());
</code></pre>
</blockquote>

<p>This is the classic security flaw of HTTP servers: by failing to properly validate the filename, it opens up the entire filesystem of the computer. Consider e.g. a request <code>GET //etc/passwd HTTP/1.0</code>. The parsing of <code>extractInformation</code> will give filename <code>/etc/passwd</code>, and this will return that file, which is very useful for hackers.</p>

<p><strong>This is the biggest flaw in the code, by far</strong>.</p>

<hr>

<blockquote>
<pre><code>                    byte [] data = readFileIntoByteArray(file);
                    sendData(data);
</code></pre>
</blockquote>

<p>That's not a good idea. What if the file is 50GB? Do you have 50GB of RAM? Loop: read a chunk into a buffer, write the chunk into the output stream. Or there may be some more sophisticated way of doing the same thing with NIO.</p>

<hr>

<blockquote>
<pre><code>                    // file not found - 404
                    setMimeType("default");
                    sendErrorMessage();
                    writeToLogFile(message,"404",FILE_NOT_FOUND.length());
</code></pre>
</blockquote>

<p><code>default</code> isn't a filetype. If you're returning an HTML body, the MIME type of the header should be <code>text/html</code>.</p>

<hr>

<blockquote>
<pre><code>            } else if(info.getMethod().equals("POST")){
</code></pre>
</blockquote>

<p>I'm not even going to go there. Whatever this is, it's so specific to some particular use case that I don't understand what it's doing in this HTTP server.</p>

<hr>

<p>What about methods other than <code>GET</code> and <code>POST</code>? Do you just drop the connection without writing any kind of error response?</p>
    </div>