<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not primarily a JS developer, therefore I won't assist you with the JavaScript part itself, but I can give you a few hints regarding several issues I've found.</p>
<h2>Lack of transactional safety</h2>
<p>In your example, you're executing two <code>DELETE</code> statements on the database.</p>
<pre><code>1) delete t1, t2 from postschema t1 join commentschema t2 on t1.id = t2.postid where t1.id = ?

2) delete from postschema where id = ?
</code></pre>
<p>Those statements are isolated in their own transactions and commit right after their execution. The problem here is, if the statement <strong>1)</strong> succeeds, but <strong>2)</strong> fails, all the records deleted with the statement <strong>1)</strong> will remain deleted, which can easily lead to unexpected database state.</p>
<p>In order to prevent this, you want to wrap the statements which should either all succeed or all fail in a <a href="https://en.wikipedia.org/wiki/Database_transaction" rel="nofollow noreferrer">database transaction</a>.</p>
<h2><code>DELETE</code> statement ambiguity and difficult readability</h2>
<p>Although MySQL supports deleting records through <code>JOIN</code>, effectively allowing you to delete data from multiple tables in a single go, such statements are difficult to track what gets actually deleted. On top of that, certain database engines do not support such mechanism at all.</p>
<p>I highly recommend you to change the statement, so that it deletes only the comments, which makes the query much easier to follow and to read.</p>
<pre><code>DELETE FROM commentschema WHERE postid = ?
</code></pre>
<h2>Removing a file from the FS before removing a database record</h2>
<p>This may introduce an unintentional side effect, if deletion of database records fails, leading to a situation where the database record points to a file location which no longer exists.</p>
<p>In order to solve this, the order of operation should be swapped:</p>
<ol>
<li>delete data from the database,</li>
<li>(now that nothing points to the file) delete the file from the file system.</li>
</ol>
<p>I have also noticed you're loading images for comments (plural!) by <code>postId</code>, but only removing the image of the first comment in the returned collection.</p>
<p>This may be an accidental error in your implementation, since later you're deleting all comments, which makes me believe you want to delete all images, too.</p>
<h2>Code nesting</h2>
<p>Your code is quite nested, due to callbacks. In order to resolve this, you can:</p>
<ol>
<li>introduce smaller functions with different responsibilities (e.g. a function to load data from the database, a function to delete a file,...),</li>
<li>convert functions which output result through callbacks to promises and cleanup the code a little bit through promise-chaining (even better if you use <code>async/await</code>).</li>
</ol>
    </div>