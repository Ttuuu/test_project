<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have no experience with smartsheet or their API, so there only will be general remarks regarding Python and testing.</p>

<hr>

<h2>Use a testing framework</h2>

<p>You have started to write your own testing framework. Don't! There are a lot of battletested Python test frameworks out there that do all the tedious work for you, e.g. finding test cases, running them, and collecting their results in an appropriate, usually also configurable manner.</p>

<p>Just to name the most common ones<sup>*</sup>:</p>

<ul>
<li><a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code></a>: comes directly with Python</li>
<li><a href="https://nose.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>nose</code></a>/<a href="https://nose2.readthedocs.io/en/stable/" rel="nofollow noreferrer"><code>nose2</code></a>: an external library available through pip, which claims to "extend unittest to make testing easier". <code>nose2</code> is an extension of <code>nose</code> which claims to make testing even easier</li>
<li><a href="https://docs.pytest.org/" rel="nofollow noreferrer"><code>pytest</code></a>: has a different flavor from the previous two, but also does the job quite good. This is what I actually use if I write tests.</li>
</ul>

<p>I invite you to have a look at all of them, where <code>unittest</code> and <code>nose</code> can likely be treated as equivalent with regard to the way they structure text. There is are a lot of different blog posts on that topic, e.g. on <a href="https://realpython.com/python-testing/" rel="nofollow noreferrer">RealPython</a> or <a href="http://pythontesting.net/start-here/" rel="nofollow noreferrer">PYTHON TESTING</a>, that show them either in comparison or separately.</p>

<p>It might not make a big difference for what you want to do at the moment, but will make all the difference once you start to have more tests.</p>

<h2>Use string formatting</h2>

<p>If you bring together static text with variables to create dynmic output, it's usually  better to use string formatting instead of manually <code>str(...)</code>inging all the variables and then concatenate them together. If you are working with Python 3.6 or higher, you can use <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-strings</a> to do this. An example from your code rewritten using f-strings:</p>

<pre><code>def print_test_results(self):
    print('\n\n Test Report')
    print('====================================================')
    print(f'tests succeed = {self.passed}')
    print(f'tests failed = {self.failed}')
    print(
        f'percent of tests passing = {100 * (self.passed / self.test_count)}%'
    )
    print(f'total number of tests = {self.test_count}')
    print('====================================================')
</code></pre>

<p>There is also an <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">Real Python article</a> on this topic where the classical ways using <code>%</code> and <code>str.format(...)</code> are compared with the new f-strings.</p>

<h2>Don't just open files</h2>

<p>When you set up the logger, you do this:</p>

<pre><code># logger setup
logging.basicConfig(filename="err_log.txt", level=logging.ERROR, format=' %(asctime)s - %(levelname)s - %(message)s')
open("err_log.txt", "w")
</code></pre>

<p>There is <em>no need</em> to do this and you also propably <em>should not</em> do it. <code>open("err_log.txt", "w")</code> likely has no effect whatsoever on your program. <code>logging</code> will open the file itself before starting to write to it. Maybe it has even done so at that point. Apart from that <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">it's good practice to use <code>open(...)</code> in conjuction with the <code>with</code>-statement</a> to make sure the file gets closed properly even in the case of an exception.</p>

<hr>

<p><sup>*</sup>Based on my experience while researching that topic quite a while ago.</p>
    </div>