<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall Assessment</h2>

<p>Overall this code is fine but it has a lot of excess DOM queries. Those could be optimized using the tips below.</p>

<p>I noticed that if I calculate an average and then click the reset button, it still asks me to confirm when leaving the page. Should it still prompt to confirm even if the user has calculated an (overall) average?</p>

<h2>More specific feedback</h2>

<p>It is confusing having <code>setOutputValues()</code> defined in the inline script whereas all other functions are declared in global.js. It would make more sense to have everything together, unless something is being abstracted into a module. But I see <a href="https://codereview.stackexchange.com/questions/220084/class-activity-calculator#comment425487_220185">your comment</a> that explains that <code>setOutputValues</code> will be different on each page. I would question what actually changes within that function depending on the page - is it the range values and/or strings? If so, perhaps those could be output as variables or else as hidden DOM elements.</p>

<hr>

<p>I see some <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features used, like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for..of</code></a>, which means other features from that specification could be used as well. For instance, any variable that doesn't get re-assigned could be declared with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> and any value that does get re-assigned can be declared with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a>.</p>

<hr>

<p>I see the code queries for the form element:</p>

<blockquote>
<pre><code>var form = document.querySelector('form');
</code></pre>
</blockquote>

<p>I know that you were told "<em><code>querySelectorAll</code> is your friend.</em>"<sup><a href="https://codereview.stackexchange.com/a/215201/120114">1</a></sup>. However, use it with caution. There are other DOM query functions that run quicker than it. One could  add an <code>id</code> attribute to the element and query for it using <code>document.getElementById()</code><sup><a href="https://www.sitepoint.com/community/t/getelementbyid-vs-queryselector/280663/2" rel="nofollow noreferrer">2</a></sup>. But then again, there is a reference to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/forms" rel="nofollow noreferrer"><code>forms</code></a> property of <code>document</code>, which could remove the need to query the DOM altogether. The first form could be referenced via <code>document.forms[0]</code> or a name attribute could also be applied to allow reference by name.</p>

<p>For example, you could add the <em>name</em> attribute to the form:</p>

<pre><code>&lt;form autocomplete="off" name="activityCalc"&gt;
</code></pre>

<p>Then utilize that name when referencing <code>document.forms</code>:</p>

<pre><code>  const form = document.forms.activityCalc;
</code></pre>

<p>That way there is no need to query the DOM with a function like <code>querySelector</code>.</p>

<p>The same is true for the <code>&lt;output&gt;</code> elements - a name could be added to the last one and then there is no need to query for that element when displaying the cumulative average, as well as the button labeled <em>Calculate</em>.</p>

<p>And instead of using <code>querySelectorAll()</code> to get the elements under a fieldset, you could use <code>.getElementsByTagName()</code> since the selector is just a tag name. As <a href="https://stackoverflow.com/a/18247327/1575353">this SO answer</a> explains: </p>

<blockquote>
  <p><code>getElementsByTagName</code> is probably faster, since it is simpler, but that is unlikely to have a noticeable impact on anything you do with it.</p>
</blockquote>

<hr>

<p>I see that a handler for click events on the  reset button is added via </p>

<blockquote>
<pre><code>form.querySelector('[type="reset"]').addEventListener('click', function(event) {...});
</code></pre>
</blockquote>

<p>this can be simplified by using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset_event" rel="nofollow noreferrer">form event <em>reset</em></a>.</p>

<pre><code>form.addEventListener('reset', function(event) { ... });
</code></pre>

<hr>

<p>When loading a simple document like this with modern browsers it may be unlikely that the DOM would not be ready before the JavaScript code runs (depending on where it is included) but it is still wise to wait for the DOM to be ready before accessing DOM elements. This can be done with <code>document.addEventListener()</code> for the 'DOMContentLoaded` event. This also allows the scope of the variables to be limited to a callback function instead of global variables. </p>

<hr>

<p>It is a best practice to use strict equality when comparing values.</p>

<p>On this line:</p>

<blockquote>
<pre><code>if (average == undefined) {
</code></pre>
</blockquote>

<p>the value for <code>average</code> is assigned the return value from <code>averageInputValues()</code> which will likely either be <code>undefined</code> or a floating point number that is the result of a division operation. Using strict equality comparison eliminates the need for the types to be checked. Use the strict equality operator here and anywhere else there is no need to convert types when comparing:</p>

<pre><code>if (average === undefined) {
</code></pre>

<hr>

<h2>Rewritten code</h2>

<p>The code below uses advice from above to simplify some parts of the code.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>document.addEventListener('DOMContentLoaded', function() {
  //DOM queries/accesses run once
  const form = document.forms.activityCalc;
  const fieldsets = form.getElementsByTagName('fieldset');
  const inputs = form.getElementsByTagName('input');
  const divOutput = form.elements.classActivity;
  
  function setOutputValues() {
    let totalWeightedAverage = 0;
    let totalWeight = 0;
    for (const fieldset of fieldsets) {
      const average = averageInputValues(fieldset);

      // should there be handling for no output element found below?
      const fieldsetOutput = fieldset.getElementsByTagName('output')[0];
      if (average === undefined) {
        fieldsetOutput.value = 'You may only enter 0 to 100.';
      } else if (isNaN(average)) {
        fieldsetOutput.value = 'Please enter a grade.';
      } else {
        fieldsetOutput.value = 'avg: ' + average.toFixed(1);
      }
      totalWeightedAverage += average * fieldset.dataset.weight;
      totalWeight += Number(fieldset.dataset.weight);
    }
    const classActivity = totalWeightedAverage / totalWeight;
    if (isNaN(classActivity)) {
      divOutput.value = '';
    } else {
      divOutput.value = 'CA: ' + classActivity.toFixed(1);
    }
  }

  function averageInputValues(fieldset) {
    let totalValue = 0;
    let totalNumber = 0;
    const inputs = fieldset.getElementsByTagName('input');
    for (const input of inputs) {
      if (!input.validity.valid) {
        return;
      }
      totalValue += Number(input.value);
      totalNumber += Boolean(input.value);
    }
    return totalValue / totalNumber;
  }

  form.elements.calculate.addEventListener('click', setOutputValues);

  function detectChange() {
    for (const input of inputs) {
      if (input.value) {
        return true;
      }
    }
  }

  form.addEventListener('reset', function(event) {
    if (detectChange() &amp;&amp; !confirm('Your changes will be lost.\nAre you sure you want to reset?')) {
      event.preventDefault();
    }
  });

  window.addEventListener('beforeunload', function(event) {
    if (detectChange()) {
      event.returnValue = 'Your changes may be lost.';
    }
  });
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html,
body {
  margin: 0;
  padding: 0;
}

header {
  padding: 16px 0;
  text-align: center;
  background: linear-gradient(#999, #333);
}

img {
  vertical-align: bottom;
}

h1 {
  font-size: 1.125rem;
  font-family: 'Times New Roman';
  color: #FFF;
  text-shadow: 0 3px #000;
  letter-spacing: 1px;
}

nav {
  display: flex;
  justify-content: center;
  background: #333;
  border-top: 2px solid;
}

a {
  color: #FFF;
}

nav a {
  padding: 12px 6px;
  font: bold 0.75rem Verdana;
  text-decoration: none;
}

nav a:not(:last-child) {
  margin-right: 2px;
}

nav a:hover,
nav a:focus,
#current {
  outline: 0;
  border-top: 2px solid;
  margin-top: -2px;
}

main,
div {
  display: flex;
}

form {
  margin: 32px auto;
}

fieldset {
  margin: 0 0 16px;
  padding: 12px 12px 0;
  border: 1px solid #CCC;
  background: linear-gradient(#FFF, #CCC);
}

legend,
input,
output,
button {
  font-family: Arial;
}

legend,
button {
  color: #333;
}

legend {
  padding: 0 4px;
  font-size: 0.875rem;
}

input,
button,
div output {
  font-size: 0.833rem;
}

input {
  width: 4em;
}

input:invalid {
  outline: 1px solid red;
}

output {
  color: #C00;
}

fieldset output {
  display: block;
  margin: 8px 0 8px 6px;
  font-size: 0.75rem;
}

fieldset output::after {
  content: "\00A0";
}


/* a placeholder */

div output {
  margin: auto auto auto 6px;
}

footer {
  padding: 12px;
  background: #333;
  font: 0.75rem Arial;
  color: #FFF;
}

address {
  float: right;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;header&gt;
  &lt;img src="https://cdn.sstatic.net/Sites/codereview/img/logo.svg?v=0dfb1294dc6e" alt="Logo"&gt;
  &lt;h1&gt;Class Activity Calculator&lt;/h1&gt;
&lt;/header&gt;
&lt;nav&gt;
  &lt;a href="index.html" id="current"&gt;Adults: Old&lt;/a&gt;
  &lt;a href="adults-new.html"&gt;Adults: New&lt;/a&gt;
  &lt;a href="young-adults.html"&gt;Young Adults&lt;/a&gt;
  &lt;a href="kids.html"&gt;Kids&lt;/a&gt;
&lt;/nav&gt;
&lt;main&gt;
  &lt;form autocomplete="off" name="activityCalc"&gt;
    &lt;fieldset data-weight="4"&gt;
      &lt;legend&gt;Listening &amp; Speaking&lt;/legend&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;output&gt;&lt;/output&gt;
    &lt;/fieldset&gt;
    &lt;fieldset data-weight="3"&gt;
      &lt;legend&gt;Reading&lt;/legend&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;output&gt;&lt;/output&gt;
    &lt;/fieldset&gt;
    &lt;fieldset data-weight="1"&gt;
      &lt;legend&gt;Writing&lt;/legend&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;input type="number" step="any" min="0" max="100"&gt;
      &lt;output&gt;&lt;/output&gt;
    &lt;/fieldset&gt;
    &lt;div&gt;
      &lt;button type="button" name="calculate"&gt;Calculate&lt;/button&gt;
      &lt;output name="classActivity"&gt;&lt;/output&gt;
      &lt;button type="reset"&gt;Reset&lt;/button&gt;
    &lt;/div&gt;
  &lt;/form&gt;
&lt;/main&gt;
&lt;footer&gt;
  Share on &lt;a href="https://t.me/share/url?url=https%3A%2F%2Fclassactivitycalculator.github.io%2F&amp;text=Class%20Activity%20Calculator%3A%20Calculate%20the%20class%20activity%20grades%20of%20the%20ILI%20students." title="Telegram: Share Web Page"&gt;Telegram&lt;/a&gt;  |
  &lt;a href="https://www.facebook.com/dialog/share?app_id=2194746457255787&amp;href=https%3A%2F%2Fclassactivitycalculator.github.io%2F" title="Post to Facebook"&gt;Facebook&lt;/a&gt;
  &lt;address&gt;&lt;a href="https://t.me/MortezaMirmojarabian" title="Telegram: Contact @MortezaMirmojarabian" rel="author"&gt;Give feedback&lt;/a&gt;&lt;/address&gt;
&lt;/footer&gt;</code></pre>
</div>
</div>


<hr>

<p><sup>1</sup><sub><a href="https://codereview.stackexchange.com/a/215201/120114">https://codereview.stackexchange.com/a/215201/120114</a></sub></p>

<p><sup>2</sup><sub><a href="https://www.sitepoint.com/community/t/getelementbyid-vs-queryselector/280663/2" rel="nofollow noreferrer">https://www.sitepoint.com/community/t/getelementbyid-vs-queryselector/280663/2</a></sub></p>
    </div>