<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This feels like a fun time to use the XOR operator. If you're not familiar with it, it's basically the "either or" operator. It returns true if-and-only-if exactly one of the two operands is true.</p>

<p>JavaScript does not have a logical xor operator but it does have a bitwise xor operator: <code>^</code>. It also has other bitwise operators that you can read more about on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" rel="noreferrer">MDN Reference page</a>. If we coerce our truthy and falsy values into <code>true</code> and <code>false</code>, we can utilize the bitwise operators. We can perform this coercion by prepending a value with <code>!!</code> (if we want to retain its truthiness) or <code>!!</code> (if we are okay with negating the value). </p>

<p>I started with <code>!a ^ !b ^ !!c</code>, which covers all but one case (all true) on its own. I wrapped it in parentheses and prepended <code>!!</code> to ensure the resulting value was a boolean rather than 1 or 0. Note that I'm using 200_Success's tests in the following code:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const onlyOne = (a, b, c) =&gt; {
    return !!(!a ^ !b ^ !!c);
}

console.log("These should be true:");
console.log(onlyOne(true, null, undefined));
console.log(onlyOne(false, '', '0'));
console.log(onlyOne(false, 0, '0'));
console.log(onlyOne(false, [], null));
console.log(onlyOne(1/0 /* Infinity */));

console.log("These should be false:");
console.log(onlyOne(1, 'a', Infinity));
console.log(onlyOne(false, null, undefined));
console.log(onlyOne(false, NaN, null));
console.log(onlyOne(0));</code></pre>
</div>
</div>


<p>As you can see, the only case this does not handle is when all three are true. This is because the xor of the first two will return false and then the xor of false with the third one's value will return true.</p>

<p>It is easy to handle this case specifically. <code>(!a || !b || !c)</code> will be false only if all three values are true. This leads to my final solution, which follows:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const onlyOne = (a, b, c) =&gt; {
    return !!((!a ^ !b ^ !!c) &amp;&amp; (!a | !b | !c));
};

console.log("These should be true:");
console.log(onlyOne(true, null, undefined));
console.log(onlyOne(false, '', '0'));
console.log(onlyOne(false, 0, '0'));
console.log(onlyOne(false, [], null));
console.log(onlyOne(1/0 /* Infinity */));

console.log("These should be false:");
console.log(onlyOne(1, 'a', Infinity));
console.log(onlyOne(false, null, undefined));
console.log(onlyOne(false, NaN, null));
console.log(onlyOne(0));</code></pre>
</div>
</div>

    </div>