<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>You forgot a <code>std::</code></h1>
<p>There's a <code>string</code> without <code>std::</code> in front of it. I guess you secretly used <code>using namespace std</code> and/or <code>#include &lt;bits/stdc++.h&gt;</code> before submitting the result. The rest looks fine though.</p>
<h1>Consider using <code>const TreeNode *</code> everywhere</h1>
<p>I know the public API of the LeetCode problem explicitly takes non-const pointers to <code>TreeNode</code>, so you shouldn't change this. But consider that your functions, quite rightly so, don't modify the <code>TreeNode</code>s themselves. So you could write <code>const TreeNode *</code> everywhere you now have <code>TreeNode *</code>, and it would still compile correctly. So in real production code, that is what you should do.</p>
<h1>Don't use <code>this-&gt;</code> unnecessarily</h1>
<p>In C++, there is rarely a need to write <code>this-&gt;</code>. So in <code>findDuplicateSubtrees()</code>, you can just write <code>serialize(root, nodes_map)</code>.</p>
<h1>Use range-for and structured bindings where appropriate</h1>
<p>You can replace the <code>for</code>-loop in <code>findDuplicateSubtrees()</code> using range-<code>for</code> and structured bindings:</p>
<pre><code>for (auto &amp;[serialization, nodes]: nodes_map) {
    if (nodes.size() &gt; 1) {
        duplicates.push_back(nodes[0]);
    }
}
</code></pre>
<h1>Consider using a binary serialization format</h1>
<p>There are many ways you could serialize trees. Making human-readable strings has some advantages: it is easy to reason about, and it is nice when having to put them in textual formats like XML or JSON files. But it can be inefficient to convert values to strings. In your case, you are only using the serialization internally, so a binary format might be more efficient.</p>
<p>In the case of trees of integers, an obvious representation is just a vector of <code>int</code>s. However, a node might have only one child, and you somehow have to encode that as well. You could use a <code>std::optional&lt;int&gt;</code>, and use <code>std::nullopt</code> to represent an unpopulated leaf node. The serialization format would then be:</p>
<pre><code>std::vector&lt;std::optional&lt;int&gt;&gt; serialization;
</code></pre>
<p>The serialization function would then look like:</p>
<pre><code>std::vector&lt;std::optional&lt;int&gt;&gt; serialize(TreeNode *node, std::unordered_map&lt;std::string, std::vector&lt;TreeNode *&gt;&gt; &amp;nodes_map) {
    if (!node) {
        return {std::nullopt};
    }

    auto left = serialize(node-&gt;left, nodes_map);
    auto right = serialize(nodes-&gt;right, nodes_map);
    left.append(node-&gt;val);
    left.insert(left.end(), right.begin(), right.end()); // append right
    return left;
}
</code></pre>
<p>For the LeetCode problem, it's not worth doing this though; the algorithmic complexity is the same, and the string representation is smaller for trees with small values. Also, you can not use a <code>std::unordered_map</code> anymore for <code>nodes_map</code>, unless you write a custom hash function. You could use a <code>std::map</code> though, since optionals and vectors have well-defined ordering.</p>
    </div>