<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>I would start by fixing the warnings, one of which is an actual bug:</strong></p>

<hr>

<p><strong>[1]
Operator = not returning a value</strong></p>

<pre><code>main.cpp: In member function 'Key&amp; Key::operator=(Key&amp;)':
main.cpp:50:5: warning: no return statement in function returning non-void [-Wreturn-type]
     }
     ^
main.cpp: In member function 'bool Key::operator==(const Key&amp;) const':
</code></pre>

<p><strong>Also:</strong> your operator= gets <code>Key&amp; key</code> instead of <code>const Key&amp; key</code></p>

<p><strong>Wait!</strong> don't rush to fix it. You can just eliminate it altogether and rely on the default assignment operator that does the same job ("rule of zero").</p>

<hr>

<p><strong>[2] using comma in the long list of equality check -- an actual bug</strong></p>

<pre><code>main.cpp:54:100: warning: left operand of comma operator has no effect [-Wunused-value]
         return ( ... &amp;&amp; _win == key._win &amp;&amp; _key == key._key, _c == key._c);
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
</code></pre>

<p><strong>Wait!</strong> don't rush to fix it. We will use std::bitset so the entire operator== would become simpler.</p>

<hr>

<p>After fixing the warnings above we can proceed for improvements.</p>

<p><strong>[3] Use <code>std::bitset</code> for the bool flags</strong></p>

<p>Instead of:</p>

<pre><code>bool _shift;
bool _ctrl;
bool _alt;
bool _win;
</code></pre>

<p>Use:</p>

<pre><code>enum SpecialKeys {SHIFT, CTRL, ALT, WIN, _SIZE_};
std::bitset&lt;SpecialKeys::_SIZE_&gt; specialKeys;
</code></pre>

<hr>

<p><strong>[4] No need for assignment operator and copy ctor (rule of zero).</strong></p>

<p>Just use the defaults.</p>

<hr>

<p><strong>Proposed fixed code:</strong></p>

<pre><code>#include &lt;bitset&gt;

class Key {
    enum SpecialKeys {SHIFT, CTRL, ALT, WIN, _SIZE_};
    std::bitset&lt;SpecialKeys::_SIZE_&gt; specialKeys;
    int _key = 0;
    char _c = 0;
public:
    constexpr Key() {}
    constexpr Key(bool shift, bool ctrl, bool alt, bool win, int key, char c)
        : _key(key), _c(c)
    {
        specialKeys[SpecialKeys::SHIFT] = shift;
        specialKeys[SpecialKeys::CTRL]  = ctrl;
        specialKeys[SpecialKeys::ALT]   = alt;
        specialKeys[SpecialKeys::WIN]   = win;
    }

    bool operator== (const Key&amp; key) const
    {
        return (specialKeys == key.specialKeys &amp;&amp; _key == key._key &amp;&amp; _c == key._c);
    }

    bool operator!= (const Key&amp; key) const
    {
        return !(*this == key);
    }
};
</code></pre>
    </div>