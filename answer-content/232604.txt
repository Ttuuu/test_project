<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Besides of searching <em>"what is faster"</em> always consider code readability and maintainability.</p>

<p>Due to <strong><code>or</code></strong> operator nature, most of sub-checks could be just skipped on "earlier" match, whereas with the 2nd approach <code>(n-a)*(n-b)*(n-c)*(n-d)==0</code> whatever <strong><code>n</code></strong> value would be - the long sequence of arithmetic operations <code>(n-a)*(n-b)*(n-c)*(n-d)</code> will inevitably be performed, which obviously makes the 2nd approach less efficient. Moreover it looks more confusing in case of simple comparisons.</p>

<p>As for time performance, consider the following tests:</p>

<pre><code>In [121]: a,b,c,d = range(1,5)                                                                                               

In [122]: n=4                                                                                                                

In [123]: %timeit n==a or n==b or n==c or n==d                                                                               
176 ns ± 8.52 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

In [124]: %timeit (n-a)*(n-b)*(n-c)*(n-d)==0                                                                                 
213 ns ± 6.86 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

In [125]: n=2                                                                                                                

In [126]: %timeit n==a or n==b or n==c or n==d                                                                               
108 ns ± 1.9 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)

In [127]: %timeit (n-a)*(n-b)*(n-c)*(n-d)==0                                                                                 
241 ns ± 10.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
    </div>