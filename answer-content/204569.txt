<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At the risk of answering an off-topic question(*): Nothing says "<strong><em>review all logic in the program</em></strong>" than code like the following: </p>

<pre><code>Public Function IsMissile(ByVal SpaceObjectTwo As ISpaceObject) As Boolean
    If SpaceObjectTwo.SpaceObjectType = Missile Then
        IsMissile = True
    Else
        IsMissile = False
    End If
End Function
</code></pre>

<p>which can be replaced by </p>

<pre><code>Public Function IsMissile(ByVal SpaceObjectTwo As ISpaceObject) As Boolean
    IsMissile = (SpaceObjectTwo.SpaceObjectType = Missile)
End Function
</code></pre>

<p>And, seeing as this is a very simply single line function that is only used once in the code (with a sister function that is only used twice in the code), could be easily placed in-line in the code.</p>

<pre><code>Function HandleMissileCollisions() As Dictionary
    Dim TempDict                                        As Dictionary
    Dim MissileKey                                      As Variant
    Dim IncomingSpaceObjectKey                          As Variant

    Set TempDict = GamePiecesCollection

    For Each MissileKey In GamePiecesCollection.Keys()
        If GamePiecesCollection.Item(MissileKey).SpaceObjectType = Missile Then
            For Each IncomingSpaceObjectKey In GamePiecesCollection.Keys()
                If GamePiecesCollection.Item(IncomingSpaceObjectKey).SpaceObjectType &lt; Missile) And (IncomingSpaceObjectKey &lt;&gt; MissileKey) Then
                    If CheckIfCollided(GamePiecesCollection.Item(MissileKey), GamePiecesCollection.Item(IncomingSpaceObjectKey)) Then
                        TempDict.remove MissileKey
                        TempDict.remove IncomingSpaceObjectKey
                    End If
                End If
            Next IncomingSpaceObjectKey
        End If
    Next MissileKey
    Set GamePiecesCollection = TempDict
End Function

Function HandleShipCollisions() As PlayerShipHit
    Dim Ship                                            As ISpaceObject
    Dim IncomingSpaceObjectKey                          As Variant

    Set Ship = GamePiecesCollection.Items(0)

    For Each IncomingSpaceObjectKey In GamePiecesCollection.Keys()
        If GamePiecesCollection.Item(IncomingSpaceObjectKey) &lt; Missile Then
            If CheckIfCollided(Ship, GamePiecesCollection(IncomingSpaceObjectKey)) Then
                HandleShipCollisions = Hit
                Exit For
            End If
        End If
    Next IncomingSpaceObjectKey
End Function
</code></pre>

<p>Your use of enum implies assumed knowledge about the order of the <code>enum</code>. While it works in this case, it does make the code a little less maintainable. You can argue that having <code>IsMissile</code> type functions helps - but in this case, you only used it once and the function itself made assumptions about the <code>enum</code>.</p>

<p>I think a broader statement about helper classes is that the help/value they add should be greater than the effort to code and maintain. And sometimes the singleton classes can be easily rolled into another class because that is where they are helping.</p>

<p>In this case, if <code>CheckObjectType</code> was rolled into <code>ISpaceObject</code>, then that would be helpful in increasing the readability of the code. For example:</p>

<pre><code>For Each MissileKey In GamePiecesCollection.Keys()
    If GamePiecesCollection.Item(MissileKey).IsMissile Then
        For Each IncomingSpaceObjectKey In GamePiecesCollection.Keys()
            If GamePiecesCollection.Item(IncomingSpaceObjectKey).IsIncomingSpaceObject) And (IncomingSpaceObjectKey &lt;&gt; MissileKey) Then
                If CheckIfCollided(GamePiecesCollection.Item(MissileKey), GamePiecesCollection.Item(IncomingSpaceObjectKey)) Then
                    TempDict.remove MissileKey
                    TempDict.remove IncomingSpaceObjectKey
                End If
            End If
        Next IncomingSpaceObjectKey
    End If
Next MissileKey
</code></pre>

<p>Now when you read the modified code above, you can start asking yourself is my logic correct?</p>

<pre><code>GamePiecesCollection.Item(IncomingSpaceObjectKey).IsIncomingSpaceObject) And (IncomingSpaceObjectKey &lt;&gt; MissileKey) 
' seems to roll over itself a couple of times!
</code></pre>

<p>Don't get me wrong - I like my onions and how creating layers of code both increases human readability at each layer and reduces the number of times code is repeated. But there is both a sensible level of how much abstraction and the ability to understand when something is an intricate part of the object as opposed to being a separate class in itself.</p>

<p>(*) Reference my comment against the OP: Code not working? "[...] I have two BIG issues. First, my method of scaling is not working. [...] . Second [...] every so often get a 424 Object Required error. "</p>
    </div>