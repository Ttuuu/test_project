<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>for cleaner code, and to keep things dry and single responsibility.
I would break it into various parts. </p>

<p>Settings
HttpContextParser
SqlPersistor
ResponseWriter (this could be debatable depending on how it looks) </p>

<ul>
<li>Have a class that returns a parsed object/class from the the HttpContext with the data you require.  </li>
<li>Save it to the database.  </li>
<li>Return response</li>
</ul>

<p>Actually i think it's a bad idea to process the response here. it should be processed in the Controller method or someplace else. the responsibility of this class should only be dealing with saving the user traffic data. </p>

<p>The response should be processed by another mechanism. </p>

<pre><code>namespace DataCollection 
{
     public class SiteDataCollection
     {
        private IContextParser _contextParser;
        private IUserRepository _userRepository;

        public SiteDataCollection(
            IContextParser contextParser,
            IUserRepository userRepository)
        {
            _contextParser      = contextParser;
            _userRepository     = userRepository;
        }

        public async Task&lt;FileInfo&gt; ProcessRequest(HttpContext context)
        {
            var userTrafficInfo = _contextParser.GetUserTrafficInfo(context);

            await _userRepository.SaveTrafficInfoAsync(userTrafficInfo);

            return new FileInfo(userTrafficInfo.FileName);
        }
    }
}
</code></pre>

<p>Also if you are having some issues writing ado.net code, consider using something like dapper, you can still call stored procedures, but also direct insert statements and just pass a clr object and it should map correctly to the parameters. 
There are loads of examples online, and i think it would make your code a little more readable. </p>
    </div>