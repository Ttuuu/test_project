<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>I suggest you check <strong>PEP0008</strong> <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a> the official Python style guide which will be very useful when it comes to writing a more Pythonic code.</p>

<ul>
<li><p><strong>Docstrings:</strong> Python documentation strings (or docstrings) provide a convenient way of associating documentation with Python modules, functions, classes, and methods. An object's docstring is defined by including a string constant as the first statement in the object's definition. I see you wrote many comments above each of your functions and I suggest to include docstrings instead for these functions indicating what they do and what they return and type hints(if necessary when functions have many parameters).</p>

<p><strong>example:</strong></p>

<pre><code>def make_cards():
    """Return deck of cards"""
    # do things
</code></pre></li>
<li><p><strong>Too many blank lines:</strong> according to PEP0008: Surround top-level function and class definitions with two blank lines.Method definitions inside a class are surrounded by a single blank line.Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).</p></li>
<li><p><strong>Nested functions:</strong> since most of your functions do not have any parameters, there is no need for nested functions that complicate the code, unless your program has many aspects and needs many functions then you might consider using a class(which is not needed in your case). Nested functions are usually short and very specific in what they do (Usually they use the parameters of the enclosing function and do a specific task which is not the case here).</p></li>
<li><p><strong>Long lines: (lines 174, 178)</strong></p>

<pre><code>print(f"Player // ONE // won the game with {p1_won} wins VS {p2_won} for player // TWO //. There were {draws} draws.") 
</code></pre>

<p>According to PEP0008 a line should contain 79 characters max.</p></li>
<li><p><strong>Space around operators:</strong> <code>card_dump(input("Please hit enter"),p1, p2)</code>
a space should be left on both sides of a binary operator(+-*/,=&gt;&lt;|^&amp;!=) for readability.</p></li>
</ul>

<h1>Code</h1>

<p>From my understanding the game is all about a 2-player card virtual game that keeps displaying cards and calculates a score at the end. I think this code can be shortened, let's dissect your program parts:</p>

<pre><code>def make_cards():
    # do stuff
</code></pre>

<p>Since no docstrings are included, I'm going to imply what they might be intended to do: this function creates 52 cards and returns a list with a very non-readable content.</p>

<p>a sample of what is returned : </p>

<p>['2◆   2◆\n\n tony \n\n2◆   2◆\n', '3◆   3◆\n\n tony \n\n3◆   3◆\n', '4◆   4◆\n\n tony \n\n4◆   4◆\n', '5◆   5◆\n\n tony \n\n5◆   5◆\n', '6◆   6◆\n\n tony \n\n6◆] </p>

<p>This is a very hurting my eyes to read and this might be very annoying to debug (if not impossible), I suggest you create the deck in the following way:</p>

<pre><code>def deck():
    """Return a list of 52-cards deck."""
    suits = '◆♥♠♣'
    digits = [str(number) for number in range(2, 11)]
    specials = 'AKQJ'
    special_cards = [special + suit for special in specials for suit in suits]
    numbered_cards = [number + suit for number in digits for suit in suits]
    return special_cards + numbered_cards 
</code></pre>

<p><strong>returns:</strong> <code>['A◆', 'A♥', 'A♠', 'A♣', 'K◆', ...]</code> which is much more readable and has the same use.</p>

<p>The <code>play_cards()</code> function:
Does not return the full deck and if you want to check yourself, try running the following line:</p>

<pre><code>print(len(set(play_cards(cards)[0])), len(set(play_cards(cards)[1])))
</code></pre>

<p><strong>output:</strong> 21 22 (43 cards instead of 52) and it will return different results of course each time you try running it, so it does not even return the full shuffled deck.</p>

<p>To fix the problem I suggest you use <code>random.shuffle()</code></p>

<pre><code>random.shuffle(cards)
</code></pre>

<p>then the <code>play_cards()</code> function is unecessary and you can shuffle the cards before returning them in the <code>make_cards()</code> function (the one I called <code>deck()</code>)</p>

<p><strong>in the <code>game_logic()</code> function:</strong></p>

<pre><code>elif p1.isdigit() == False and p2.isdigit() == False:
</code></pre>

<p>this line repeated several times in different forms, here's the correct way of writing it:</p>

<pre><code>if not p1.isdigit() and not p2.isdigit():
</code></pre>

<p><strong>Here's an improved version of the code:</strong></p>

<pre><code>import random


def deck():
    """Return a list of 52-card deck."""
    suits = '◆♥♠♣'
    digits = [str(number) for number in range(2, 11)]
    specials = 'AKQJ'
    special_cards = [special + suit for special in specials for suit in suits]
    numbered_cards = [number + suit for number in digits for suit in suits]
    cards = special_cards + numbered_cards
    return cards


def get_winner(card1, card2):
    """Determine winner and return 1 or 2 or 0 for a tie."""
    suit_ranks = {'♣': 1, '◆': 2, '♥': 3, '♠': 4}
    special_ranks = {'J': 1, 'Q': 2, 'K': 3, 'A': 4}
    if card1 == card2:
        return 0
    if card1[0].isdecimal() and card2[0].isalpha():
        return 2
    if card1[0].isalpha() and card2[0].isdecimal():
        return 1
    if card1[0].isdecimal() and card2[0].isdecimal():
        if int(card1[0]) &gt; int(card2[0]):
            return 1
        if int(card1[0]) &lt; int(card2[0]):
            return 2
    if card1[0].isalpha() and card2[0].isalpha():
        if special_ranks[card1[0]] &gt; special_ranks[card2[0]]:
            return 1
        if special_ranks[card1[0]] &lt; special_ranks[card2[0]]:
            return 2
    if card1[-1] != card2[-1] and card1[:-1] == card2[:-1]:
        if suit_ranks[card1[-1]] &gt; suit_ranks[card2[-1]]:
            return 1
        if suit_ranks[card1[-1]] &lt; suit_ranks[card2[-1]]:
            return 2


def play_game():
    """Display rounds interactively and results at the end."""
    cards = deck()
    rounds = input('Enter the number of rounds to play: ')
    while not rounds.isdecimal():
        print('Invalid rounds number')
        rounds = input('Enter the number of rounds to play: ')
    games_played = 0
    player1_score, player2_score = 0, 0
    while games_played &lt; int(rounds):
        confirm_round = input(f'Press enter to display round {games_played} or q to exit: ')
        while confirm_round and confirm_round != 'q':
            confirm_round = input(f'Press enter to display round {games_played} or q to exit: ')
        if confirm_round == 'q':
            print('Thank you for playing cards.')
            print(30 * '=')
            exit(0)
        player1_card = random.choice(cards)
        player2_card = random.choice(cards)
        print(f'player 1 card: {player1_card}')
        print(f'player 2 card: {player2_card}')
        winner = get_winner(player1_card, player2_card)
        if winner == 0:
            print('Tie!')
        if winner == 1:
            print('Player 1 wins.')
            player1_score += 1
        if winner == 2:
            print('Player 2 wins.')
            player2_score += 1
        games_played += 1
        print(30 * '=', '\n')
    print(30 * '=')
    print(f'Total rounds played: {games_played}')
    print(f'Player 1 {player1_score}-{player2_score} player 2')
    if player1_score &gt; player2_score:
        print(f'Winner is Player 1 ({player1_score} out of {games_played} games played)')
    if player2_score &gt; player1_score:
        print(f'Winner is Player 2 ({player2_score} out of {games_played} games played)')
    if player1_score == player2_score:
        print('Neither wins, TIE!')


if __name__ == '__main__':
    play_game()
</code></pre>
    </div>