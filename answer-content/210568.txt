<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code itself doesn't look bad, but since this is Code Review there are always ways that it can be improved.</p>

<h2>Let's talk about what the code was supposed to do</h2>

<p>PEP 8, the Python style guide, strongly encourages docstrings to be used to document what the function itself is supposed to do. Since this is a Django template tag, docstrings can be used here as well. I wrote up a small one based on my understanding of what is trying to be accomplished here.</p>

<pre><code>@register.simple_tag()
def get_stats_type(choice):
    """
    Returns a dictionary containing the percentage of users who voted for a
    choice, organized by the type of user, out of all users who voted.
    """
</code></pre>

<p>It doesn't have to be anything long or complex, but the idea is to document what is trying to be accomplished so future readers of your code can understand it more quickly.</p>

<p><em>Spoiler: your code doesn't currently do what this docstring says.</em></p>

<h2>Document what you're actually trying to accomplish along the way</h2>

<p>Again, documentation is something which someone will inevitably jump on here and should "But you don't need it if your code is obvious!" and they might be right. But hey, it's Code Review and here's an example of why you might want it.</p>

<p>The first part of your function is trying to get all of the users who voted for the choice that was passed in. In the Django ORM, depending on what you're looking to get back, you can shortcut this in a few different ways.</p>

<p>If you're just trying to get the IDs of all of the users, you query for all of the votes with that choice and use <code>.values_list('user', flat=True)</code> to get the user ID back.</p>

<pre><code>items = Vote.objects.filter(Choice=choice).values_list('user', flat=True).distinct()
</code></pre>

<p>And this will return a list of user IDs for all the unique votes who voted for this choice. But, based on the next part of the function, it actually looks like you may be looking for the types of the users who voted for this choice, which is a little more complex but can also be done on the database side.</p>

<pre><code># Get all of the users who voted for this choice
users = Vote.objects.filter(Choice=choice).values_list('user', flat=True).distinct()

# Get a list of the types of the users who voted
user_types = UserProfile.objects.filter(users__in=users).values_list('typeOfPerson', flat=True).distinct()
</code></pre>

<p>This will get you a list of the unique user types who voted using this choice.</p>

<h2>You aren't getting the votes for just the specific user type</h2>

<p>This was caught in the other answer, but it was never addressed and was treated as something which could be simplified. Right now, any time this function returned percentages, all of the user types will have an equal percentage because it uses the same set of votes for each user type, never filtering it down.</p>

<pre><code>votes_by_type = {}

# Get the number of votes, by user type, who voted for this choice
for user_type in user_types:
    votes_by_type[user_type] = Vote.objects.filter(
        user__userprofile__typeOfPerson=user_type,
        Choice=choice,
    ).count()
</code></pre>

<p>While this can be done with a dictionary comprehension, as recommended by the other answer, I would suggest doing it as you did it before. It's easier to read and understand what is actually trying to be accomplished.</p>

<p>Here is where the bug that existed in the original version was fixed. I added an additional <code>filter()</code> to the votes to limit it down to just those made by the given user type.</p>

<p>We don't need to check for duplicate user types here because we know that <code>user_types</code> is a list of unique user types already.</p>

<h2>Summing it up and doing percentages</h2>

<p>Python has a built-in <code>sum</code> function which can be used to get the sum of a list of numbers. Dictionaries in Python also have a built-in <code>values</code> function which gets you the list containing all of the values in the dictionary. You can combine these together to get the total votes cast for the choice.</p>

<pre><code># Get the total number of votes cast for this choice
total_votes = sum(votes_by_type.values())
</code></pre>

<p>You can then use this, as stated in the other answer and done originally, to calculate the percentages.</p>

<pre><code>percentages = {}

# Calculate the percentage of votes by user type
for user_type in user_types:
    percentages[user_type] = (votes_by_type[user_type] / total_votes) * 100
</code></pre>

<p>But wait, I'm not checking for when <code>total_votes</code> is zero! This is because if nobody votes, then <code>user_types</code> will be empty (because nobody voted, so there are no user types who voted), and the division by zero error will not happen.</p>

<p>If you choose to change this later to always return the types regardless of whether or not they have actually voted, then you may need to add back in your logic of handling cases where there are no votes. But I would consider this to be a standard special case, since you're trying to calculate percentages based off of no votes.</p>
    </div>