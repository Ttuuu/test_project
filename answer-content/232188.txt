<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>The code is what I would call "visually dense" (in lack of a better description). By that I mean, that it's hard to spot where a "block of code", e.g. a function, ends. A few well placed blank lines could work wonders here. There are well established <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">guidelines</a> codified in the "official" <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (aka PEP 8):</p>

<ul>
<li>top-level functions or classes should be separated by two blank lines</li>
<li>inside of classes functions use single blank lines where appropriate</li>
</ul>

<p>You will also often find that <code>import</code>s are also <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">separated from the following code by two blank lines</a>.</p>

<p>The style guide also has something to say about <a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow noreferrer">whitespace in expressions and statements</a>. The basic recommendation here would be to have a single blank space around operators like <code>=</code> (you do this - good!) and also have a single blank space after <code>,</code>, e.g. when calling functions (you do this sometimes - get consistent here) or when declaring <code>list</code>s (you don't do this, but you should).</p>

<p>Fortunately, you are not left alone with this task. There are a lot of tools to help you readable and consistent Python code. Some of them are listed in <a href="https://codereview.meta.stackexchange.com/a/5252/92478">this answer on Code Review Meta</a>.</p>

<h1>Naming</h1>

<p><code>answers</code> should likely also be capitalized like words, since it's essentially a constant value you never intend to change. Apart from that the variable names follow a consistent style and have meaningful names.</p>

<h1>Documentation</h1>

<p>You seem to be willing to document your code. That's great! Python has a well established documentation string convention, shortly <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">outlined</a> in the Style Guide, and <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">described in more detail in PEP 257</a>. If you put the documentation immediately after the function definition and enclose the <code>"""Description in triple quotes"""</code>, Python IDEs and the built-in <code>help(...)</code> function can easily pick it up. This is very convenient for larger projects.</p>

<p>Example:</p>

<pre><code>def clear_screen():
    """Clear the screen

    This function is supposed to work on Linux and Windows.
    """
    os.system('cls' if os.name == 'nt' else 'clear')
</code></pre>

<h1>The code</h1>

<p>Instead of <code>answers</code> (maybe soon <code>ANSWERS</code>) being a list and working with integer indices to select the appropriate answer, consider changing it to a <code>dict</code>. Then you could either use descriptive keys like <code>"correct"</code>, <code>"wrong"</code>, or <code>"already_tried"</code> or even an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum</code></a> to make it clearer which output you are trying to print. This will help you to get rid of all the "magic numbers" in your code, which are very error prone if you ever try to change one and miss a spot.</p>

<p><code>display_messages(...)</code> has an empty string as default argument for <code>outcome</code>, but then checks against integer values in the body. Expecting your input to be of a different type than the default argument is something to avoid, since it may confuse someone using that function. The general fallback in such cases is usually <code>None</code>. Another approach might be to make use of <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> in Python 3.6 and later. Type hints can automatically be checked by external tools like <a href="https://pylint.org/" rel="nofollow noreferrer">pylint</a> or <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> to make sure the code "is safe to run" without actually running it (so called static code analysis).</p>

<p><code>display_hangman(...)</code> is a prime example of code duplication. All the <code>print(...)</code>s are basically doing the same thing, only with different inputs. This means the code can easily be refactored to become more like</p>

<pre><code>def display_hangman(counter=0):
    """Prints the hangman progress, default value is zero"""
    gallow = ( # this was the else case before
        ' _____\n ', '|   \n', '   |    \n', '   |  \n', '   |   \n', '  |\n', '|\n'
    )
    if counter == 1:
        gallow = (
            ' _____\n ', '|   |\n', '   |    \n', '   |  \n', '   |   \n', '  |\n', '|\n'
        )
    elif counter == 2:
        ...
    elif counter == 8:
        gallow = (
            ' _____\n ', '|   |\n', '   |   O\n', '   |  \\|/\n', '   |   |\n', '   |  / \\\n', '|\n'
        )

    print("{:^34}{}{:^31}{}{:^31}{}{:^30}".format(*gallow))
</code></pre>

<p>As you can see clearly, there is now only a single place where the <code>print(...)</code>ing happens. The elements of the gallow are stored as a tuple (a list would work too), ready to be used in <code>.format(...)</code>. Using a tuple/list allows us to do <code>"...".format(*gallow)</code> which is shorthand for <code>"...".format(gallow[0], gallow[1], ..., gallow[6])</code>. This is called <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">argument list unpacking</a> in Python. The slight downside of this is that this neat trick will only work with <code>.format(...)</code>, but not with f-strings. But that's something I can live with, you will have to decide what works best for yourself.
Carefully adapting the format specifier would also likely make it possible to move each of those <code>\n</code> into the format string, although I did just check my hypothesis for the first gallow.</p>

<p>When collecting user input, you convert it to uppercase to have it in a normalized format, only to then do <code>prompt.lower() == "exit"</code> literally in the next line. I can see no particular reason not to use <code>prompt == "EXIT"</code>.</p>

<p>You should likely wrap the code titled with <code># core of the game</code> into a function as well (the generic <code>main()</code> comes to my mind). The games state could then be stored into the function, instead of on a global scope (I'm looking at you <code>wrong_guesses</code>!). That would also make it easily possible to play several rounds of your game without having to remember which global variables need to be reset in order to avoid trouble.</p>

<p>Once this is done, it's time to look at the infamous <code>if __name__ == "__main__":</code> which is very often found in Python scripts. This little line of code tells the interpreter to run the code surrounded by that <code>if</code> block only when called like <code>python hangman.py</code>. Omitting this piece of code would also start your game if you ever try to do something like <code>from hangman import clear_screen</code> (code reusability is cooooool).</p>
    </div>