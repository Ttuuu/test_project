<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is always the temptation to revisit code after a while to tweak it to make it work <em>better</em>, the main thing is to ensure you don't break what is already there.  The first thing to ensure is that you can reliably test the code which you are changing.  Breaking something that appears to work (no matter how bad you think it is) will not go down well.</p>
<p>As for the code itself, there are a few things about it.</p>
<ol>
<li>The prepare stuff should be done outside the loop, you should
prepare the statement once and then execute it however many times
are appropriate.  This means you don't close the statement inside the
loop as well.</li>
<li>Rather than binding each value, you can pass an array of values
into the <code>execute()</code>, which also means you can remove some of the
temporary values you use.</li>
<li>If any of the values fails validation, then you may end up with
partial data.  Records 1 and 2 may be inserted, but record 3 fails -
BUT records 1 and 2 are already on the database.</li>
<li>The error processing seems to be a dump some HTML and stop.  This is
probably a general method that you have used, but I would recommend
having a read around for some ideas on how to do this.
<a href="https://stackoverflow.com/questions/32421702/best-practice-for-error-handling-using-pdo">Best practice for error handling using PDO</a>
is a more database oriented version.</li>
</ol>
<p>Sometimes validating all of the data prior to doing any database processes is preferable, ideally you should validate some of the common issues in the front end.  As this is fairly limited in this case it may be OK to mix the validation and database stuff and use database transactions (<a href="https://stackoverflow.com/questions/2708237/php-mysql-transactions-examples">PHP + MySQL transactions examples</a>).</p>
<p>If you wanted to go the other way, you would have a small <code>foreach()</code> loop first and check each row before even preparing the statement.  This is better (IMHO) when the database code is more involved.</p>
<p>As the prepare is done outside of the loop, I've moved the scope of the <code>try...catch()</code> block.</p>
<p>I have not addressed the error reporting as that would be something you need to look into as it's probably a site wide change.</p>
<pre><code>if(isset($array2)){
    
    try{
        $sql =
        ("
            INSERT INTO bookedslot(`FK_UserID`, `FK_SlotCode`, `booked_before`, `coordinator_approv`)
                VALUES (:UserID, :slotcode, :bookedbefore, :coord )
                ON DUPLICATE KEY UPDATE
                    FK_UserID = :UserID,
                    FK_SlotCode = :slotcode,
                    booked_before = :bookedbefore,
                    coordinator_approv = :coord
        ");
        
        
        $sth = $dbh-&gt;prepare($sql);
        
        $dbh-&gt;beginTransaction();
        
        foreach($array2 as $value)
        {
            if((isset($value['coord']) || isset($value['bookedbefore'])) 
                    &amp;&amp; !isset($value['bookedslot'])){
                echo("&lt;h2&gt;Error: you ticked checkbox(es) on the booking selection setting without choosing a corresponding slot&lt;/h2&gt;");
                // Remove any records added so far
                $dbh-&gt;rollback();
                die();
            }
            
            $sth-&gt;execute( [ ':UserID' =&gt; $UserID, 
                    ':slotcode' =&gt; $value['bookedslot'],
                    ':bookedbefore' =&gt; (int)!empty($value['bookedbefore']),
                    ':coord' =&gt; (int)!empty($value['coord'])
            ]);
        }
        $dbh-&gt;commit();
    }
    catch(PDOException $e) {
        echo("&lt;h3&gt;Something seems to have gone wrong with your choices.&lt;/h3&gt;");
        // Remove any records added so far
        $dbh-&gt;rollback();
        
    }
    unset($array2);
}
</code></pre>
<p>As a personal opinion, I have never liked the following type of construct...</p>
<pre><code>!empty($value['bookedbefore']) ? $bookedbefore = 1 : $bookedbefore=0;
</code></pre>
<p>But the way it is being used makes it is easy to rework as you can just assign the result of the <code>!empty()</code> anyway...</p>
<pre><code>$bookedbefore = !empty($value['bookedbefore']);
</code></pre>
    </div>