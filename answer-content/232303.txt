<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me just repeat what @Ron Klein said, dont put your dices into enum, the real set of all possible dices is much greater than what your enum offers.</p>

<p>Let me show how I think the Dice class would be better implemented:</p>

<pre><code>class Dice : IEnumerable&lt;int&gt;
{
    private int Sides;
    private int Shift;
    private Random Generator;

    public Dice(int sides, int shift, Random generator)
    {
        Sides = sides;
        Shift = shift;
        Generator = generator;
    }

    public Dice(int sides, int shift, int seed) : this(sides, shift, new Random(seed)) {}
    public Dice(int sides, int shift) : this(sides, shift, new Random()) {}
    public Dice(int sides, Random generator) : this(sides, 1, generator) {}
    public Dice(int sides) : this(sides, 1) {}
    public Dice(Random generator) : this(6, generator) {}
    public Dice() : this(6) {}

    public int Roll()
    {
        return Generator.Next(Sides) + Shift;
    }

    public IEnumerator&lt;int&gt; GetEnumerator()
    {
        while (true) yield return Roll();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}
</code></pre>

<p>Now you can create whatever dice you want:</p>

<pre><code>var d20 = new Dice(20);
var coin = new Dice(2);
var cube = new Dice(6);
var uncommon = new Dice(7);
var d0to5 = new Dice(6, 0);
var d15to30 new Dice(16, 15);
</code></pre>

<p>You can roll once</p>

<pre><code>var roll = d20.Roll(); //1-20
</code></pre>

<p>Or you can roll N times</p>

<pre><code>var sum = uncommon.Take(3).Sum(i =&gt; i); //3-21
</code></pre>

<p>Or you can even roll as many as the CPU can do in a certain amount of time/ticks</p>

<pre><code>var rolls = cube.MaxTicks(250);
</code></pre>

<p>Also as mentioned by others, the Random class needs a seed and the default constructor seeds from current time. My Dice class implementation allow this default Random but also allows to inject Random instance seeded in a way out of scope of the Dice class.</p>

<pre><code>var d20 = new Dice(20, new Random(myseed));
</code></pre>

<p>I have actualy added more constructors to simplify this and I have also added <code>Shift</code> property to the Dice as it seemd a waste to have +1 as constant, if it might be possible to have dices starting with zero or any other number.</p>

<pre><code>var d20 = new Dice(20, 1, myseed);
</code></pre>

<p>Anyway I think that the <code>MaxTick</code> and <code>MaxTime</code> methods are quite controversial. One thing is they break SRP.
Good rule of thumb though is that methods should not instantiate objects and do some work (other that the work needed to instantiate those objects). They should do one or the other, but not both.
Other thing is I'm not sure they will fulfill their purpose as mentioned in comments under other answer.</p>
    </div>