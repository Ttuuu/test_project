<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I feel like my controller is too big and the function does too much.</p>
</blockquote>

<p>I think you're right there. Your validation rules shouldn't be in the controller, but in separate classes. That makes re-using them much easier. I</p>

<blockquote>
  <p>My initial hunch is that I should put this into a service and break it
  up. But it seems like I would just be copying and pasting this code
  into class.</p>
</blockquote>

<p>You're right here. Just moving code from your controller to a service makes no sense. </p>

<p>Why aren't you using Symfony Forms? It does exactly the job you're doing here: take the Request and some rules and tell you if the request matches your validation rules.</p>

<p>You can create an object (a Doctrine entity or a Data Transfer Object, DTO), add the constraints to it by using annotations.</p>

<p>See this to examples from <a href="https://stovepipe.systems/post/avoiding-entities-in-forms" rel="nofollow noreferrer">https://stovepipe.systems/post/avoiding-entities-in-forms</a>:</p>

<p>Your DTO:</p>

<pre><code>class ChangeUsernameData
{
    /** 
     * @Some\Custom\Assert\Unique(entity="App\Entity\Authentication", field="username")
     * @Assert\Length(5, 16)
     **/
    public $newUsername;
}
</code></pre>

<p>Your controller:</p>

<pre><code>$changeUsername = new ChangeUsernameData();
    $form = $this-&gt;formFactory-&gt;create(ChangeUsernameType::class, $changeUsername);
    $form-&gt;handleRequest($request);

    if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {
        $authentication-&gt;setUsername($changeUsername-&gt;newUsername);
        $this-&gt;em-&gt;flush($authentication);

        // redirect
    }
</code></pre>
    </div>