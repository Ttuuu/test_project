<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions:</p>

<ol>
<li><p><code>coordinates_to_index</code> should return <code>std::size_t</code> instead of <code>int</code> because <code>int</code> may not be able to hold the required values.</p>

<pre><code>return std::inner_product(cbegin(dimension_product), cend(dimension_product),
                          crbegin(coords), std::size_t{0}); // instead of int
</code></pre></li>
<li><p>You don't need to compute the strides and store them. You can use <a href="https://en.wikipedia.org/wiki/Horner%27s_method" rel="nofollow noreferrer">Horner's rule</a> directly.</p>

<pre><code>std::size_t result = 0;
for (std::size_t i = 0; i &lt; N; ++i)
    result = result * dimensions[i] + coords[i];
return result;
</code></pre></li>
<li><p>Your calculation of the total size fails to consider the case where <code>order == 0</code>. Instead of </p>

<pre><code>(Dimensions * ...)                   // ill-formed if Dimensions is empty
</code></pre>

<p>Use</p>

<pre><code>(Dimensions * ... * std::size_t{1})
</code></pre>

<p>Moreover, I would suggest exposing the total size, along with the order and dimensions. Like this:</p>

<pre><code>static constexpr std::size_t size = (Dimensions * ... * std::size_t(1));
</code></pre>

<p>And use it in place of ad-hoc computations further in code.</p></li>
<li><p>Your matrix is not Copyable. You declare move operations but not copy operations (the template doesn't make a difference), and the compiler synthesizes deleted copy operations which take precedence over the copying template. You should either default the copy operations explicitly (and maybe destructor as well), or omit the redundant default declarations directly.</p></li>
<li><p>Why use <code>:_data({})</code> when <code>:_data{}</code> is more readable and less verbose?</p></li>
<li><p>Consider adding out-of-range detection for <code>operator()</code> in some form.</p></li>
</ol>

<h1>Update</h1>

<ol start="11">
<li><p>Currently, the converting copy constructor first default-initializes the elements and then copy assign from the initializer matrix, which is kinda surprising. It is more reasonable to initialize directly (with some template hacks):</p>

<pre><code>namespace detail {
    template &lt;class T, std::size_t N, class U, std::size_t... Is&gt;
    std::array&lt;T, N&gt; construct(const std::array&lt;U, N&gt;&amp; arr, std::index_sequence&lt;Is...&gt;)
    {
        return std::array&lt;T, N&gt;{static_cast&lt;T&gt;(arr[Is])...};
    }
}

template &lt;class T, std::size_t... Dimensions&gt;
class matrix {
    // ...
public:
    // ...
    template &lt;class U&gt;
    matrix(matrix&lt;U, Dimensions...&gt; const&amp; other)
        : _data{detail::construct&lt;T, N&gt;(other._data, std::make_index_sequence&lt;size&gt;{})}
    {
    }
    // ...
};
</code></pre>

<p>The above implementation requires access to relies on access to <code>_data</code> of another <code>matrix</code> specialization, which can be granted with a <code>friend</code> declaration or an access function. It also relies on the C++17 guaranteed copy elision.</p>

<p>Now, the converting copy assignment operator cannot delegate to the converting copy constructor:</p>

<pre><code>template &lt;class U&gt;
matrix&amp; operator=(const matrix&lt;U, Dimensions...&gt;&amp; other)
{
    std::copy_n(_data.begin(), size, other._data.begin());
    return *this;
}
</code></pre></li>
<li><p>It makes sense to constrain the converting copy constructor and the converting copy assignment operator with SFINAE. Also, they should be made conditionally <code>explicit</code> and conditionally <code>noexcept</code>:</p>

<pre><code>template &lt;class U, class = std::enable_if_t&lt;
    std::is_constructible_v&lt;T, const U&amp;&gt; &amp;&amp; std::is_convertible_v&lt;const U&amp;, T&gt;
&gt;&gt; matrix(matrix&lt;U, Dimensions...&gt; const&amp; other)
    noexcept(std::is_nothrow_constructible_v&lt;T, const U&amp;&gt;);

template &lt;class U, class = std::enable_if_t&lt;
    std::is_constructible_v&lt;T, const U&amp;&gt; &amp;&amp; !std::is_convertible_v&lt;const U&amp;, T&gt;
&gt;&gt; explicit matrix(matrix&lt;U, Dimensions...&gt; const&amp; other)
    noexcept(std::is_nothrow_constructible_v&lt;T, const U&amp;&gt;);
</code></pre>

<p>Similarly for the converting copy assignment operator.</p></li>
<li><p>Consider support converting move construction and converting move assignment.</p></li>
<li><p>The class can be modified to support <code>constexpr</code>.</p></li>
</ol>
    </div>