<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Below my version with changes - I didn't run it to test.</p>
<p>I describe it after code.</p>
<pre><code>import random

# --- constants ---

HANGMANPICS = ['''
      +---+
      |   |
          |
          |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
          |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
      |   |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
     /|   |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
     /|\  |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
     /|\  |
     /    |
          |
    =========''', '''
      +---+
      |   |
      O   |
     /|\  |
     / \  |
          |
    ========='''
]

# --- functions ---

def rand_word(version):
    
    version = version.lower()
    
    if version == "slovak":
        filename = "Slova"
    elif version == "english":
        filename = "Words"
    else:
        print("Wrong input! [FATAL ERROR]")
        input("Press enter to EXIT!")
        exit()

    words = open(filename) 
    #all_lines = words.readlines()  # it keeps `\n` in lines
    #all_lines = words.read().split('\n')  # it removes `\n`  in lines
    all_lines = words.read().splitlines()  # it removes `\n`  in lines
    words.close()
    
    print(all_lines)

    #line_num = random.randint(0, len(all_lines))
    #return all_lines[line_num]

    word = random.choice(all_lines)
    return word    

def draw(what_to_do):

    if 1 &lt;= what_to_do &lt;= 7:
        print(HANGMANPICS[what_to_do])
    else:
        print(HANGMANPICS[0])
   
    # or

    #if what_to_do &lt; 1 or what_to_do &gt; 7:
    #    what_to_do = 0
    #print(HANGMANPICS[what_to_do])

def list_fill(size):
    return ["_"] * size
    #return ["_"] * size-1 # if you didn't remove `\n` from lines

# --- main ---
print("HANGMAN")
print("You have 6 tries to guess the correct word!")

dictionary = input("Chose dictionary Slovak or English: ")

tries = 0
win_con = 0

temp_word = rand_word(dictionary)
positions = list_fill(len(temp_word))

while tries &lt; 6:

    counter = 0
    
    draw(tries)
    #print(*positions)
    print(' '.join(positions))  # the same result
    
    user_letter = input("Enter a letter: ")

    addition = False
    
    for letter in temp_word:

        if letter == user_letter:
            positions[counter] = letter
            win_con += 1
            tries -= 1
        else:
            addition = True

        counter += 1

    if addition:
        tries += 1

    if win_con == len(temp_word):
        print("You have won!")
        print(*positions)
        input("Press enter to EXIT!")
        exit()

print("You have run out of tries! ")
print(f"The word was {temp_word.upper()}")
input("Press enter to EXIT!")
</code></pre>
<hr>
<p><strong>rand_word()</strong></p>
<p>You could convert to lower only once</p>
<pre><code>version = version.lower()
</code></pre>
<p>Inside <code>if/else</code> you use the same code so you could use it after <code>if/else</code></p>
<pre><code>if version == "slovak":
    filename = "Slova"
elif version == "english":
    filename = "Words"
else:
    print("Wrong input! [FATAL ERROR]")
    input("Press enter to EXIT!")
    exit()

words = open(filename) 
all_lines = words.readlines()  # it keeps `\n` in lines
words.close()

line_num = random.randint(0, len(all_lines))
return all_lines[line_num]
</code></pre>
<p>But <code>readlines()</code> gives lines with <code>\n</code> (and probabably later you have to use <code>size-1</code> and <code>win_con = 1</code>) but you can read it in different way to remove the <code>\n</code></p>
<pre><code>all_lines = words.read().split('\n')  # it removes `\n`  in lines
</code></pre>
<p>or</p>
<pre><code>all_lines = words.read().splitlines()  # it removes `\n`  in lines
</code></pre>
<p>Eventually use list compression to remove <code>\n</code> from elements on list</p>
<pre><code>all_lines = [line.strip() for line in all_lines]
</code></pre>
<p>Using<code>strip()</code> or <code>rstrip()</code> it removes also spaces/tabs if they are in file.</p>
<p><code>random</code> has many useful functions and you can get random word without using index</p>
<pre><code>word = random.choice(all_lines)

return word 
</code></pre>
<p>BTW: There can be one problem - if would run hangmap for many words then <code>choice()</code> (or <code>randint()</code>) may select the same word again. You would have to remeber which word was already used and repeat selection - or you should shuffle list <code>random.shuffle(all_lines)</code> and later you can run code with <code>for word in all_lines</code> and it will use different words in random order.</p>
<hr>
<p><strong>draw()</strong></p>
<p><code>HANGMANPICS</code> never changes so it is good that you use <code>UPPER_CASE_NAME</code>. But you could put it outside function. Inside function it will create it again and again when you run <code>draw()</code> (but it has always the same values so there is no need to create again and again)</p>
<p><strong>EDIT:</strong> <code>HANGMANPICS</code> has elements with indexes from <code>0</code> to <code>6</code> but you use <code>7</code></p>
<p>You can use <code>&lt;=</code> instead of <code>==</code> to make it simpler</p>
<pre><code>if 1 &lt;= what_to_do &lt;= 6:  # EDIT: it has to be 6 instead of 7
    print(HANGMANPICS[what_to_do])
else:
    print(HANGMANPICS[0])
</code></pre>
<p>or use "reversed" comparitions</p>
<pre><code>if what_to_do &lt; 1 or what_to_do &gt; 6:  # EDIT: it has to be 6 instead of 7
    what_to_do = 0

print(HANGMANPICS[what_to_do])
</code></pre>
<hr>
<p><strong>list_fill()</strong></p>
<p>You can use <code>*</code> to repeat strings on list.</p>
<pre><code>def list_fill(size):
    return ["_"] * size-1
</code></pre>
<p>And use <code>return</code> to assign to <code>position</code></p>
<pre><code>positions = list_fill(len(temp_word))
</code></pre>
<p>This way you can run it in a loop which repeats the game with next word</p>
<hr>
<p><strong>other code</strong></p>
<p>I'm not sure but <code>addition = False</code> probably should be inside <code>while</code>-loop before every <code>for</code>-loop which change <code>addition = True</code></p>
<hr>
<p><strong>BTW:</strong> <code>open()</code> as default use <code>"r"</code> so you don't have to use it.</p>
<hr>
<p><strong>EDIT:</strong> I don't know if I understand <code>addition</code>. You add only 1 to <code>tries</code> when you don't guess letter but you also subract from <code>tries</code> many times - ie. if you guess <code>a</code> in word <code>ABBA</code> then it substracts 2 because <code>a</code> is two times in this word. The same for char <code>b</code> - it substracts 2. This way you can get tries smaller then <code>0</code></p>
<p>I would use to add 1 only when not found letter - and keep current value when found letter (and it doesn't matter how many times it exists in word).</p>
<pre><code>    found = False
    
    for index, letter in enumerate(word):
        if letter == user_letter:
            positions[index] = letter
            win_con += 1
            found = True

    if not found:
        tries += 1
</code></pre>
    </div>