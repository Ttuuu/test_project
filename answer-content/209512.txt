<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From what I see you are counting all the pairs of equal numbers that can be formed. (If not, please clarify)</p>

<p>It can be done in another way:</p>

<ol>
<li>Take the first element of the array.</li>
<li>Count the number of elements equal to it in the array. It can be done via <code>filter</code>, storing the result as a new array, then <code>len</code>.</li>
<li>Call <code>pairs</code> over the length of the filtered array of step 2.</li>
<li>Add the result of <code>pairs</code> to an accumulator (previously initalized at 0).</li>
<li>Repeat steps 2--5 from the next element that is <em>not</em> equal to the one taken previously (for the first iteration, it would be the one taken in step 1). This can be done using <code>filter</code>, then assignment over the original array (if you don't want to preserve it).</li>
</ol>

<p>The accumulator will be the result.</p>

<p>Quickly tested code snippet:</p>

<pre><code>def countPairs(nums):
    count = 0

    while len(nums):
        probe = nums[0]
        count += pairs(len([x for x in nums if x == probe]))
        nums = [x for x in nums if x != probe]

    return count
</code></pre>

<p><strong>EDIT.</strong></p>

<p>Filtering can be thought of as an <code>O(n)</code> operation (iterating and adding elements that fulfill the condition). This is done twice inside the loop. Here, <code>n = len(nums)</code>.</p>

<p>On the other hand, the external loop will run as many times as <code>unique(nums)</code>, where <code>unique</code> is a function that retrieves the number of unique elements inside the array. Why <code>unique</code>? Because on each iteration, all the elements equal to the probe are taken out of the array (including the probe). They can be 1, 3, all of them. This is done <em>for each iteration</em>.</p>

<p>Nevertheless, <code>unique(nums) &lt;= len(nums)</code>, so it can be said the external loop will be a <code>O(n)</code> operation in the worst case.</p>

<p>Therefore, my proposed algorithm runs in <code>O(n^2)</code> time, due to traversing the whole array at most as many times as elements would be in the array.</p>
    </div>