<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple notes.</p>

<p>1) You don't have to pass <code>:each</code> to <code>before</code> calls, it's <a href="https://github.com/rspec/rspec-core/blob/8a287bd893889dba60e7bfce530727e7b009651e/lib/rspec/core/hooks.rb#L14-L18" rel="nofollow noreferrer">the default</a>:</p>

<pre><code># Before
before(:each) do
  get :index, params: params
end

# After
before { get :index, params: params }
</code></pre>

<p>2) The code may benefit from the use of <a href="https://relishapp.com/rspec/rspec-expectations/v/3-9/docs/built-in-matchers/be-matchers" rel="nofollow noreferrer"><code>be</code> matchers</a>:</p>

<pre><code># Before
it "success" do
  expect(response).to have_http_status(:no_content)
end

it "succeeds" do
  expect(response).to have_http_status(:success)
end

# After
it { is_expected.to be_no_content }
it { is_expected.to be_successful }
</code></pre>

<p>3) In some cases the content of <code>params</code> object is ambiguous, because <code>unless</code> returns <code>nil</code> when the condition is falsy. Here is an example of different <code>params</code> initialization:</p>

<pre><code># Before
let(:params) {
  params = {}
  unless parent_resource.nil?
    params.merge!((parent_resource.to_s &lt;&lt; "_id").to_sym =&gt; parent_record.id)
  end
}

# After
let(:params) { parent_resource.nil? ? {} : { "#{parent_resource}_id".to_sym =&gt; parent_record.id } }
</code></pre>

<p>5) You're likely setting the language header in multiple places throughout the code, so a helper would come handy:</p>

<pre><code>def set_language_header(lang)
  request.env["HTTP_ACCEPT_LANGUAGE"] = lang
end

before { set_language_header(:en) }
before { set_language_header(:de) }
</code></pre>

<p>Hope it helps.</p>
    </div>