<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, congratulations for writing a complete program. It's certainly the best way to learn, and the most gratifying. But I would also say that it's only the beginning: it's time to look back at your code, at the creative process, and think about what you could do to make your code more maintainable, and easier to improve.</p>

<p>I believe that your code should be more structured. If you look at it closely, you'll see that the screen buffer is way more than a screen buffer: it's a board representation that is also used to apply the game's rules. When you think of it, there's no obvious reason why a screen buffer should be the best tool to implement the game logic with; and when you speak of the monstrosity of the diagonal check, it probably means you have your doubts.</p>

<p>Now if you divide your program into two components: one about the display and other interactions with the user, and one about the game logic itself, you can choose different representations for different uses, provided that you enable communication between both through a well established interface. </p>

<p>So let's keep the screen buffer as a wide character string, but add a different board representation for the game logic part. You could make use of a mere integer to fit all necessary information: nine bits by player and one extra bit to indicate whose turn it is, so 19 bits. It's not about space though (although if you add AI to your game, you'll need to analyze a lot of boards to choose the next move), but about convenience:</p>

<pre><code>constexpr std::array&lt;int, 8&gt; end_games = {
    //lines
    0b111000000,
    0b000111000,
    0b000000111,
    //columns
    0b100100100,
    0b010010010,
    0b001001001,
    //diagonals
    0b100010001,
    0b001010100,
};

constexpr int stalemate = 0b111111111;

bool check_end_game(int board) {
    return std::any_of(end_games.begin(), end_games.end(), [board](auto end_game) {
        return (end_game &amp; extract_current_player_board(board)) == end_game;
    });
}

bool check_stalemate(int board) {
    return (extract_first_player_board(board) | extract_second_player_board(board)) == stalemate; 
}
</code></pre>

<p>Of course, many other representations can be considered. But that's the point: if you separate your game into several components, communicating through a stable minimal interface, you can then modify each component independently, depending only on what is best for the task at hand, be it display or computations.</p>

<p>Communication between both components can also take various forms. One of the most flexible way would be for the user interface part to communicate the intended move to the game logic part:</p>

<pre><code>class Board {
public:
    bool intended_move(int row, int col);
//...
};
</code></pre>

<p>If the move is valid, the <code>Board</code> modifies the game data and returns <code>true</code>; on receiving <code>true</code>, the user interface modifies the screen buffer and refreshes the screen. If it isn't valid, it returns <code>false</code> and the user interface component acts accordingly, signaling the move isn't valid and requesting another.</p>
    </div>