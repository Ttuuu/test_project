<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Everything in your class is static, that's most likely not what you wanted.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>public class PowerPuffGirls {
</code></pre>

<p>Funny...or maybe not, stop that. In my experience, trying to be funny when writing code only results in somebody having to undo the funny. So  don't do it in the first place.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>private static final String SPACE = " ";
</code></pre>

<p>There's a fine line between obvious and useful variable names. This should rather be called <code>SEPARATOR</code> or <code>VALUE_SEPARATOR</code>.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>private static final Integer INITAL_IDX = 0;
</code></pre>

<p>That sounds like something that would never change and does not need to be a static variable, because you can always deduce the meaning from the context.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>private static final Integer INITAL_IDX = 0;
</code></pre>

<p>You might as well write <code>INTIAL_INDEX</code> here, you're not going to gain anything from shortening it.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>private static void terminate() {
    System.exit(INITAL_IDX);
}
</code></pre>

<p>Now that sounds wrong. First, <code>System.exit</code> does not terminate the JVM, it <em>exits</em>. The difference being that terminating the JVM would give it time to shutdown, execute finalizers and so on, <code>System.exit</code> will simply stop and kill the process. This might not be what you wanted.</p>

<p>Also...why are you calling it with that constant?</p>

<hr>

<pre class="lang-java prettyprint-override"><code>return eachQunatity &gt;= INITAL_IDX &amp;&amp; eachQunatity &gt; Long.MAX_VALUE ? true : false;
</code></pre>

<p>You can directly return the boolean expression:</p>

<pre class="lang-java prettyprint-override"><code>return eachQunatity &gt;= INITAL_IDX &amp;&amp; eachQunatity &gt; Long.MAX_VALUE;
</code></pre>

<hr>

<pre class="lang-java prettyprint-override"><code>String[] arrOfQuantityOfIngredients = null;
</code></pre>

<p>Again, there is a fine line between obvious and useful names, <code>ingredientsQuantities</code> would be a better name.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>Scanner stdin = new Scanner(System.in);
</code></pre>

<p>That is a badly chosen variable name, <code>inputScanner</code> or <code>scanner</code> or even <code>input</code> would be a better one. <code>stdin</code> refers to the standard input stream, which is not the case here.</p>

<p>Also you could use try-with-resources here:</p>

<pre class="lang-java prettyprint-override"><code>try (Scanner scanner = new Scanner(System.in)) {
    // TODO
}
</code></pre>

<p>The resource will be automatically closed when leaving the block.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>if (!validateNumberOfIngredients(input[INITAL_IDX])) {
    terminate();
}
</code></pre>

<p>Error reporting would be a nice addition.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>for (int i = 0; i &lt;= quantityOfIngredients.length - 1; i++) {
</code></pre>

<p>I'm still a fan of using descriptive names, like <code>index</code> or <code>counter</code>, but that just might be me.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>maxPowerPuffGirlsCreationList.add(quantityOfLabIngredients[i] / quantityOfIngredients[i]);
</code></pre>

<p>You want <a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html" rel="nofollow noreferrer">to read up in autoboxing</a>, it might not be important in this case, but it is something you should be aware of.</p>

<hr>

<p>Overall, if you wanted to have an object-oriented solution to your problem, you want more explicitness, a lot more. That starts by the input, something like this:</p>

<pre><code>Please enter number of ingredients: 4
Please enter needed amount for ingredient #1: 2
Please enter needed amount for ingredient #2: 5
Please enter needed amount for ingredient #3: 6
Please enter needed amount for ingredient #4: 3
Please enter available amount for ingredient #1: 20
Please enter available amount for ingredient #1: 40
Please enter available amount for ingredient #1: 90
Please enter available amount for ingredient #1: 50
You can fabricate 8 items.
</code></pre>

<p>You could create a <code>Ingredient</code> class which holds the required amount as well as the available amount and use that throughout your program. Also, you might want to reconsider of having everything static, and you want to extract reading from stdin into its own class, so that you can, for example, easily add reading from a file.</p>
    </div>