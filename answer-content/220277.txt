<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The default-ctor won't be implicitly declared as there are user-declared ctors.</p></li>
<li><p>When you can define a default-ctor with reasonable behavior, consider doing so.<br>
If you use in-class initializers to <code>0</code> resp. <code>nullptr</code> for the members, it can even be explicitly defaulted, making the class trivially default-constructible.</p></li>
<li><p>Top-level <code>const</code> on arguments in a function declaration is just useless clutter.</p></li>
<li><p>Consider investing in move-semantics to avoid costly copies.</p></li>
<li><p>If the allocation in one of the ctors throws, your dtor will be called on indeterminate members, which is <strong>undefined behavior</strong>.<br>
Use mem-initialisers or pre-init <code>b_array</code> to <code>nullptr</code> to fix it.</p></li>
<li><p>Your copy-assignment also has pathological behavior in the face of exceptions. That aside, it pessimises the common case in favor of self-assignment. Read up on the copy-and-swap idiom. As a bonus, you get an efficient <code>swap()</code> out of it.</p></li>
<li><p>Using a <code>std::unique_ptr</code> for the member would allow you to significantly simplify the memory-handling.</p></li>
<li><p>Keep to the common interface-conventions. Failure to follow it makes generic code nigh impossible. Specifically, <code>.getSize()</code> should be <code>.size()</code>.</p></li>
<li><p>You are missing most of the expected interface, specifically iterators (normal, constant, reverse, related typedefs, <code>.data()</code>).</p></li>
<li><p>Better names for the private members would be <code>array</code> and <code>count</code>.</p></li>
</ol>
    </div>