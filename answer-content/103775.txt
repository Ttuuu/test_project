<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Unfortunately, I decided I didn't want to use any of them. I decided to make my own.</p>
</blockquote>

<p>I took the same way with my unit testing (for personal projects I develop at home) but for production code, this is a bad decision to make.</p>

<p>I stated my unit testing lib roughly two years ago, and every two or three weeks, I keep adding features to it (and it is still not complete).</p>

<p>Here are some things I would not do (and why):</p>

<blockquote>
  <p>I made heavy use of the preprocessor [...]</p>
</blockquote>

<p>That's a bad call. Ideally, you should only use the preprocessor when no other alternative exists. In this case, many many alternatives exist.</p>

<blockquote>
  <p>and followed the convention of leading underscore to mean non-published.</p>
</blockquote>

<p>This potentially causes your code to exhibit UB because leading underscore followed by capital letter is reserved for standard library impleemnters (I think).</p>

<p>You also used the same coding convention for code and macros (please don't).</p>

<p>The way you use macros ensures client code cannot avoid using them to write tests. If you redesign your API to not rely on macros, you can then add the macros later with minimal effort). This will make your code maintainable (it's easier to maintain C++ functions than macros) and will not impose macros on the client code.</p>

<p>Some features you may wish to add (complementing the list provided by Loki):</p>

<ul>
<li>test suite support</li>
<li>automatic processing of exceptions in your unit tests:

<ul>
<li>expected exceptions (testing that your code correctly identifies and reacts to error scenarios)</li>
<li>unexpected exceptions (should cause your tests to fail gracefully and report the errors)</li>
</ul></li>
<li><p>code checkpoints: this is a (usually transparent) feature, that marks the last executed line in a test (last unit test API file and line, or last _ASSERT macro call for example); if an unexpected exception occurs, that location is reported, automatically restricting the range of code you have to check to fix the issue.</p></li>
<li><p>disconnected/customized reporting of results; Ideally, you should be able to plug in a file writer, an XML logger or anything else into a unit test suite and generate the same test output report in various formats.</p></li>
</ul>

<p>Other problems:</p>

<ul>
<li><p>the code is monolythic (you cannot choose to use something else than std::cerr in the macros, because it is hard-coded - instead of being injected into the code).</p></li>
<li><p>the code is difficult to maintain (this is a classic problem of abusing macros)</p></li>
</ul>

<p>As a point of comparison, here's the how unit tests look with my (custom) library:</p>

<pre><code>void bad_command(unittest::test_context&amp; ctx)
{
    // tested scenario here

    ctx.check_equal(1, 2); // will fail: 1 != 2
}

int main(int argc, char* argv[])
{
    unittest::runtime_args args{ argv, argv + argc };
    auto suite = unittest::make_test_suite("test-utility-apis",
         std::cout, args);

    suite.add_test("bad_command", bad_command); // one call per unit test

    return suite.run();
}
</code></pre>

<p>This code contains no macros.</p>

<p>The passing of runtime args. to the test suite allows for: selection of output format, filtering of executed tests based on args and (probably in the future) more runtime arguments (parallel execution, etc).</p>
    </div>