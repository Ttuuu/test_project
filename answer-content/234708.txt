<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Qualify your variables. I read your post and after copying/pasting the code I created a standard module named <code>GlobalVariables</code> so that I had <code>O.Offset(GlobalVariables.OFFSET_ROW, GlobalVariables.OFFSET_COLUMN)</code> that identified where those variables came from. This helps future-you or another coder reading your know where things are located.</p>

<p>Your wall of declarations at the top can be removed. I prefer having my variables declared just before their use. This aids in refactoring later and helps eliminate variables that are no longer being used. If left at the top it's not immediately apparent when a variable is no longer being referenced.</p>

<pre><code>Dim sourceArea As Range
Set sourceArea as = InputSheet.Range("InputArea")
</code></pre>

<p>No need to yell. IE your variables are in SCEAM_CASE. Convention in VBA usually has variables in camel casing as in <code>worksheetThatHasSourceInformation</code> where the first variables letter is lowercased and the first letter thereafter of each new word is upper cased. Pascal case is used for Subs/Function and members of a class module.</p>

<p>Use of <code>_</code> (underscores) in variable names. Using an underscore is how the <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/implements-statement" rel="nofollow noreferrer">Implements statement</a> handles when an interface is implemented. <code>InterfaceName_Member</code> is the eventual syntax. Reserve underscores for when that keyword is used to make it easier to learn when you start implementing interfaces.</p>

<p>Compile time references. You have <code>Set dispSheet = Sheet1</code> and <code>set dirSheet = Sheet4</code>. No need to do that. Instead rename the <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.worksheet.codename" rel="nofollow noreferrer">Worksheet.CodeName</a> property of those worksheet objects by right clicking on the variable <code>Sheet1</code> or <code>Sheet4</code> in the IDE and, from the context menu, choosing Definition. That will take you to the code behind of that worksheet. From the menu at the top choose View&gt;Properties Window (Hotkey: <code>F4</code>) and renaming the (Name) property to a descriptive name. That leads to the next item for review.</p>

<p>We've all been there. Naming is hard at best. Use descriptive variable names. <code>O</code> is a letter. <code>O</code> by itself doesn't help me understand what it's representing. An excessively long-winded name could be <code>firstCellOnTheSearchedSheetFoundToContainTheLetterO</code> and it a lot more helpful stating what that variable's there for. In the absence of understanding what that "O" searched for represents that's the best I can name it. The same goes for  <code>dispWorkSheet</code>, ¿displayWorksheetSheet?, or <code>dirWorkSheet</code>, ¿directorySheet?, are not descriptive either. Future-you will thank you for giving your variables descriptive names so that 6months+ when you come back to it you're not head scratching over what they mean.</p>

<p>Variable reuse:  it's like trying to reuse toilet paper. Don't. You're using <code>X</code> in two different locations. Rename <code>X</code> and create a new descriptively named variable where you use it again below. This helps prevent accidental cross-contamination.</p>

<p>The use of <code>Integer</code> when <code>X</code> is declared can be replaced with <code>Long</code>. You're less likely to have an overflow and IIRC internally a <code>Long</code> is used.</p>

<p>Static cell address. <code>Range("C3:Z26")</code> is a ticking time bomb waiting to go off. You add a row above row 3 or a column in front of column C and <strong>BARF</strong> the code is no longer searching within where you wanted it to. Use a named range. From Excel under the Formulas tab&gt;Defined Names group&gt;Name Manager button will display the Name Manager dialog. Click the New button to display the New Name dialog window. Enter in a name for that range, limit the scope to dispWorksheet (Renamed from Sheet1). Now you search within that range with <code>dispWorksheet.Names("AdequatelyNamedRange").RefersToRange.Find(...)</code>. Adding a row/column will no longer adversely affect where you're searching. The same is true for deleted row/column in the named range.</p>

<p>Magic numbers. 14, 15, 16, 17, etc... What do those numbers <em>mean</em>, <em>why</em> are they there. A <code>Const DescriptiveVaribleNameFor14 as long = 14</code> will aide to make the code self documenting.</p>

<p>IMO The use of MsgBox can be removed. The reason for this is that you're providing information to the user without a way for them to abort.</p>

<p>As you code becomes self documenting it becomes a lot clearer what's going on.</p>

<hr>

<p>Above were the easier issues to address. What remains requires in depth refactoring to increase the abstraction level. As the abstraction increases the code should be a lot more readable.</p>

<p>The boolean checks are checking both dispWorksheet and dirWorksheet and that feels odd. I suggest separating them into their own individual appropriately named properties for each worksheet. Once you have that it should become simpler to tease apart what you're doing.</p>

<p><strong>Warning: This is air coding and is only to give an idea as to how to proceed. Variable names are ludicrous but also help to show what is implicitly being done because of the static numbers.</strong> </p>

<pre><code>'Module1
Private Sub optChoice1_Click()
    Dim ARR() As String
    If dispWorksheet.NineteenthElementInArrayContainsAZero("O", "\", ARR) Then
        If dispWorksheet.Values14Through17Plus20Through23AreGreaterThanZero(ARR) _
        And dirWorksheet.Values134Through137Plus24Through27AreGreaterThanZero(ARR) Then
            MsgBox ARR(19)
            dispWorksheet.UpdateValuesForSet1Using20Through23 ARR
            dirWorksheet.UpdateValuesForSet2Using24Through27 ARR
        ElseIf dirWorksheet.Values134Through137Plus24Through27AreGreaterThanZero(ARR) Then
            MsgBox ARR(138)
        Else
            MsgBox ARR(139)
        End If
    Else
        If dispWorksheet.Values14Through17Plus38Through41AreGreaterThanZero(ARR) _
        And dirWorksheet.Values134Through137Plus42Through45AreGreaterThanZero(ARR) Then
            MsgBox ARR(37)
            dispWorksheet.UpdateValuesForSet1Using38Through41 ARR
            dirWorksheet.UpdateValuesForSet2Using42Through45 ARR
        ElseIf dirWorksheet.Values134Through137Plus42Through45AreGreaterThanZero(ARR) Then
            MsgBox ARR(138)
        Else
            MsgBox ARR(139)
        End If
    End If
End Sub
</code></pre>

<p>The user defined worksheet properties</p>

<pre><code>'dirWorksheet
Public Function Values134Through137Plus24Through27AreGreaterThanZero(ByRef splitArray() As String) As Boolean
    Values134Through137Plus24Through27AreGreaterThanZero = Me.Range(splitArray(134)).Value + splitArray(24) &gt;= 0 _
                                                            And Me.Range(splitArray(135)).Value + splitArray(25) &gt;= 0 _
                                                            And Me.Range(splitArray(136)).Value + splitArray(26) &gt;= 0 _
                                                            And Me.Range(splitArray(137)).Value + splitArray(27) &gt;= 0
End Function

Public Function Values134Through137Plus42Through45AreGreaterThanZero(ByRef splitArray() As String) As Boolean
    Values134Through137Plus42Through45AreGreaterThanZero = Me.Range(splitArray(134)).Value + splitArray(42) &gt;= 0 _
                                                            And Me.Range(splitArray(135)).Value + splitArray(43) &gt;= 0 _
                                                            And Me.Range(splitArray(136)).Value + splitArray(44) &gt;= 0 _
                                                            And Me.Range(splitArray(137)).Value + splitArray(45) &gt;= 0
End Function

Public Sub UpdateValuesForSet2Using24Through27(ByRef splitArray() As String)
    Dim counter As Long
    For counter = 0 To 3
        dirWorksheet.Range(splitArray(counter + 134)).Value = dirWorksheet.Range(splitArray(counter + 134)).Value + splitArray(counter + 24)
    Next counter
End Sub

Public Sub UpdateValuesForSet2Using42Through45(ByRef splitArray() As String)
    Dim counter As Long
    For counter = 0 To 3
        dirWorksheet.Range(splitArray(counter + 134)).Value = dirWorksheet.Range(splitArray(counter + 134)).Value + splitArray(counter + 42)
    Next
End Sub
</code></pre>

<p>and</p>

<pre><code>'dispWorksheet
Public Function NineteenthElementInArrayContainsAZero(ByVal searchCharacter As String, _
                                                                ByRef delimitingCharacter As String, _
                                                                ByRef outArrayValues() As String) As Boolean
    Dim firstCellOnTheSearchedSheetFoundToContainTheLetterO As Range
    Set firstCellOnTheSearchedSheetFoundToContainTheLetterO = AdequatelyNamedRange.Find(WHAT:=searchCharacter, LookAt:=xlWhole, MatchCase:=True)

    Dim valueToSplit As String
    valueToSplit = firstCellOnTheSearchedSheetFoundToContainTheLetterO.Offset(PublicVariables.OFFSET_ROW, PublicVariables.OFFSET_COLUMN).Value2
    outArrayValues = Split(valueToSplit, delimitingCharacter)
End Function

Private Property Get AdequatelyNamedRange() As Range
    Set AdequatelyNamedRange = Me.Names("AdequatelyNamedRange").RefersToRange
End Property


Public Function Values14Through17Plus20Through23AreGreaterThanZero(ByRef splitArray() As String) As Boolean
    Values14Through17Plus20Through23AreGreaterThanZero = Me.Range(splitArray(14)).Value + splitArray(20) &gt;= 0 _
                                                        And Me.Range(splitArray(15)).Value + splitArray(21) &gt;= 0 _
                                                        And Me.Range(splitArray(16)).Value + splitArray(22) &gt;= 0 _
                                                        And Me.Range(splitArray(17)).Value + splitArray(23) &gt;= 0
End Function

Public Function Values14Through17Plus38Through41AreGreaterThanZero(ByRef splitArray() As String) As Boolean
    Values14Through17Plus38Through41AreGreaterThanZero = Me.Range(splitArray(14)).Value + splitArray(38) &gt;= 0 _
                                                        And Me.Range(splitArray(15)).Value + splitArray(39) &gt;= 0 _
                                                        And Me.Range(splitArray(16)).Value + splitArray(40) &gt;= 0 _
                                                        And Me.Range(splitArray(17)).Value + splitArray(41) &gt;= 0
End Function

Public Sub UpdateValuesForSet1Using20Through23(ByRef splitArray() As String)
    Dim counter As Long
    For counter = 0 To 3
        Me.Range(splitArray(counter + 14)).Value = Me.Range(splitArray(counter + 14)).Value + splitArray(counter + 20)
    Next
End Sub

Public Sub UpdateValuesForSet1Using38Through41(ByRef splitArray() As String)
    Dim counter As Long
    For counter = 0 To 3
        Me.Range(splitArray(counter + 14)).Value = Me.Range(splitArray(counter + 14)).Value + splitArray(counter + 38)
    Next
End Sub
<span class="math-container">```</span>
</code></pre>
    </div>