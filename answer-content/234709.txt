<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a really nice problem, thanks for sharing your solution!</p>

<p>One of the really nice things about this problem is that if you use Python 3, you can use binary data natively. In my code below, I use Python 3's binary data capabilities heavily. </p>

<hr>

<p>The most important thing to note:</p>

<p><em>Base 256 in Python is binary data.</em> </p>

<p>While Python does have natural <code>bin</code>, <code>oct</code>, and <code>hex</code> methods, what we really want to do here is translate our strings to bytes arrays. If there were no other requirements, then this problem could be solved in one function-- it's that simple. However, the multiplier requires some internal conversion, and so the code below will account for that using the same structure in the original code. </p>

<p>Some minor things:</p>

<ul>
<li>Nice generator function. Fortunately, we can replicate the same behavior by importing <code>itertools.product</code> and carefully arranging the indices. </li>
<li>In line with the bytes discussion above, we no longer need the functions from <code>base_conversion.py</code>. Everything can be logically contained in one file. </li>
<li>In the original code, the string read from the file contained newlines <code>'\n'</code>. However, it was also using <code>"\n".join(arr)</code>; meaning the resulting string had twice as many newlines. So if you immediately notice the images being different, I would imagine this is why. </li>
<li>There are two functions for encoding the text, <code>encode_text_orig</code> which retains the spirit of the original <code>encode_text</code> function and <code>encode_text_np</code> which utilizes <code>numpy</code> to structure the bytes array. I'll leave it up to you which one to use, both are functional. </li>
</ul>

<pre class="lang-py prettyprint-override"><code>from typing import Tuple
import math
from itertools import product
import numpy as np

from PIL import Image, ImageDraw

EMPTY_PLACEHOLDER = (255, 255, 255)
ALPHALESS_TUPLE_LENGTH = len(EMPTY_PLACEHOLDER)


def _square_dimensions(text_len: int, difference=False) -&gt; Tuple[int, int]:
    width = math.ceil(math.sqrt(text_len))
    height = math.ceil(text_len / width)

    return width, height


def encode_text_orig(text: str, magnitude_multiplier: int = 1) -&gt; Image.Image:
    """Returns an image where each character from the message is encoded as a colored pixel.
    Travels left-right, top-down. Will attempt to make the image as square as possible.
    magnitude_multiplier as multiplied by each character code prior to encoding."""
    width, height = _square_dimensions(len(text))

    img = Image.new("RGB", (width, height), EMPTY_PLACEHOLDER)
    graph = ImageDraw.Draw(img)

    for char, (x, y) in zip(text, product(range(height), range(width))):
        code = ord(char) * magnitude_multiplier
        color = code.to_bytes(ALPHALESS_TUPLE_LENGTH, 'big')

        graph.point((y, x), tuple(color))

    return img


def encode_text_np(text: str, magnitude_multiplier: int = 1) -&gt; Image.Image:
    """Returns an image where each character from the message is encoded as a colored pixel.
    Travels left-right, top-down. Will attempt to make the image as square as possible.
    magnitude_multiplier as multiplied by each character code prior to encoding."""
    width, height = _square_dimensions(len(text))

    arr = np.full((width, height, 3), 255, dtype=np.uint8)

    for char, (x, y) in zip(text, product(range(width), range(height))):
        code = char * magnitude_multiplier
        color = code.to_bytes(ALPHALESS_TUPLE_LENGTH, 'big')

        arr[x, y] = tuple(color)

    return Image.fromarray(arr)


def decode_image(img: Image.Image, magnitude_multiplier: int = 1) -&gt; str:
    """Decodes an image produced by encode_text back into text.
    Each character code is divided by magnitude_multiplier after decoding."""

    decoded = []
    for color in img.getdata():
        if color == EMPTY_PLACEHOLDER:
            break

        decoded.append((int.from_bytes(color, 'big') // magnitude_multiplier).to_bytes(1, 'big'))

    return b''.join(decoded)


SAMPLE_TEXT = "./clojure_core.clj"
ENCODED_SAVE_PATH = "./encoded.png"


# This is just a quick, messy way to test encoding/decoding
def test_encoding_decoding(magnitude_multiplier: int,
                           text_path: str = SAMPLE_TEXT,
                           image_save_path: str = ENCODED_SAVE_PATH
                           ) -&gt; None:
    with open(text_path, 'rb') as f:
        orig_text = f.read()

    img = encode_text_np(orig_text, magnitude_multiplier)

    img.show()

    decoded_text = decode_image(img, magnitude_multiplier)

    if orig_text == decoded_text:
        print("PASSED ENCODING")

        img.save(image_save_path)

        loaded_image = Image.open(ENCODED_SAVE_PATH)
        decoded_loaded = decode_image(loaded_image, magnitude_multiplier)

        if orig_text == decoded_loaded:
            print("PASSED LOADED DECODING")

        else:
            print("Failed loaded decoding...", len(orig_text), len(decoded_text))

    else:
        print("Failed decoding...", len(orig_text), len(decoded_text))


if __name__ == '__main__':
    test_encoding_decoding(10)

</code></pre>
    </div>