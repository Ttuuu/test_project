<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is generally good and clear.  I like the names you've used for your variables - it's very obvious what each does, with the possible exception of <code>findIndex</code>.</p>

<p>There's an issue with the problem statement (which might not be your fault): it doesn't say what to do if there's more than one "longest" sequence.  In this code, it appears that we use the first match if there's another of the same length; it's worth writing a comment to be clear that this is what we want (and including such a case in the tests, so that we know if that changes).</p>

<hr>

<p><code>isSequence</code> is a bit more long-winded than it needs to be.  This pattern is redundant:</p>

<pre><code>if (condition)
    return true;
else
    return false;
</code></pre>

<p>It can always be replaced with</p>

<pre><code>return condition;
</code></pre>

<hr>

<p>In <code>findSeq</code> itself, we're doing pretty well.  I get a compiler warning about comparing (signed) <code>i</code> against (unsigned) <code>vect.size()</code>; that's easily fixed by changing <code>i</code> to be a <code>std::size_t</code> instead of an <code>int</code>.  Most of the other <code>int</code> variables would be better represented as <code>std::size_t</code>, too.</p>

<p>One thing we might want to do is to use iterators rather than indexes, to give us an opportunity to work with different collections in future.  And instead of printing to <code>std::cout</code>, we might want to return the start and end iterators of the longest matching sequence.  (If we do print the values, it's a good idea to separate them from each other, otherwise we can't tell <code>33,3</code> from <code>3,3,3</code>, for example).</p>

<p>If we're using iterators, we'll want to remember the previous and ante-previous values, because we can't necessarily go back to them.  Equivalently, we can remember the previous value and the direction of difference.</p>

<p>I don't know if this is beyond your current knowledge, but this is what I came up with when I followed my own suggestions, and took it a little further to work generically as a template:</p>

<pre><code>#include &lt;iterator&gt;
#include &lt;utility&gt;

// return the sign of a-b (or the sign of a, if b is defaulted)
// result: -1 if a&lt;b, 0 if a==b, +1 if a&gt;b
template&lt;typename T&gt;
int compare(T a, T b = {})
{
    // This is a "clever" way of determining the sign.  Some
    // compilers recognise this idiom and reduce it to a single
    // instruction.
    return (a &gt; b) - (a &lt; b);
}

template&lt;typename ForwardIterator&gt;
std::pair&lt;ForwardIterator,ForwardIterator&gt;
findSeq(const ForwardIterator first, const ForwardIterator last)
{
    if (first == last) {
        // empty range -&gt; empty result
        return { first, first };
    }

    auto best_start = first;
    auto best_end = first;
    std::size_t best_length = 0;

    auto current_start = first;
    auto previous = first;
    int current_direction = 0;
    std::size_t current_length = 0;

    auto const update_best = [&amp;](ForwardIterator end){
        best_start = current_start;
        best_end = end;
        best_length = current_length;
    };

    for (auto it = std::next(first);  it != last;  ++it) {
        const auto new_direction = compare(*previous, *it);

        if (new_direction == current_direction) {
            ++current_length;
        } else {
            if (current_length &gt; best_length) {
                update_best(it);
            }
            current_direction = new_direction;
            current_start = previous;
            current_length = 1;
        }

        previous = it;
    }

    if (current_length &gt; best_length) {
        update_best(last);
    }

    return { best_start, best_end };
}

// provide an interface compatible with the original
template&lt;typename Collection&gt;
auto findSeq(const Collection&amp; c)
{
    using std::begin;
    using std::end;

    return findSeq(begin(c), end(c));
}
</code></pre>



<pre><code>#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;forward_list&gt;
#include &lt;vector&gt;

template&lt;typename ForwardIterator&gt;
void printSeq(std::pair&lt;ForwardIterator,ForwardIterator&gt; range)
{
    auto [first,last] = range;
    for (auto it = first;  it != last;  ++it)
        std::cout &lt;&lt; *it &lt;&lt; ' ';
    std::cout &lt;&lt; std::endl;
}

int main()
{
    printSeq(findSeq(std::vector{8,3,6,9,2,6,12}));
    printSeq(findSeq(std::array{-0.1, -0.2, -0.3, -0.4, 0.1, 0.2, 0.3, -1.0}));
    printSeq(findSeq(std::forward_list&lt;std::string&gt;{
                "foo", "bar", "bar", "bar", "baz", "quux"}));
}
</code></pre>
    </div>