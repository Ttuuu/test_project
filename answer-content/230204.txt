<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Martin is right that playgrounds are notoriously inefficient. Using compiled target will solve this problem.</p>

<p>But the other issue is that the chosen algorithm is inefficient. Your algorithm is basically trying every integer, one after another, until you reach the appropriate value. So, with your input of 758,865, you’ll try every integer between 0 and 872. That’s 873 iterations.</p>

<p>There are far better approaches. Martin (+1) is right that the easiest solution is to use the built-in <code>sqrt()</code> function. That having been said, these sorts of questions are testing your ability to write algorithms and they don’t generally want you just calling some system function.</p>

<h3>Binary search</h3>

<p>So, which algorithm should we use? The “go to” solution for improving searches is often the <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" rel="nofollow noreferrer">binary search</a>. Let’s say you wanted square root of <code>n</code>. You know that the answer rests somewhere in the range between <code>0</code> and <code>n</code>. </p>

<ol>
<li>Let’s consider <code>0</code> to be our “lower bound” and <code>n</code> to be our “upper bound” of possible values.</li>
<li>Pick a “guess” value in the middle of the range of possible values;</li>
<li>Square this guess by multiplying it by itself;</li>
<li>See if the result of this is too big or too small;

<ul>
<li>If it’s too big, throw away the top half of the range (by adjusting the upper bound of our modified range to be what was previously the middle of the range, namely our last guess);</li>
<li>Likewise, if it’s too small, we throw away the bottom half of the range (by adjusting the lower bound of our range to be equal to the last guess); and</li>
</ul></li>
<li>Repeat the process, halving the range of possible values each time, looping back to step 2.</li>
</ol>

<p>This binary search technique finds the answer to 758,865 in 20 iterations rather than 873.</p>

<p>That might look like:</p>

<pre><code>func nearestSquare(below value: Int) -&gt; Int? {
    guard value &gt; 0 else { return nil }

    let target = value - 1
    var upperBound = value
    var lowerBound = 0

    repeat {
        let guess = (upperBound + lowerBound) / 2
        let guessSquared = guess * guess
        let difference = guessSquared - target
        if difference == 0 {
            return guessSquared
        } else if difference &gt; 0 {
            upperBound = guess
        } else {
            lowerBound = guess
        }
    } while (upperBound - lowerBound) &gt; 1

    return lowerBound * lowerBound
}
</code></pre>

<p>There are refinements you could do, but this is the basic idea. Keep cutting the range of possible solutions in half and trying the middle value until you’ve got a winner. The binary search is a mainstay of efficient searches through large ranges of possible values.</p>

<h3>Newton-Raphson</h3>

<p>That having been said, while a binary search is a huge improvement, there are even other, more efficient, algorithms, if you’re so inclined. For example, <a href="https://en.wikipedia.org/wiki/Newton%27s_method" rel="nofollow noreferrer">Newton–Raphson</a> can calculate the result for 758,865 in only 12 iterations.</p>

<p>The Newton-Raphson is an iterative technique in which you</p>

<ol>
<li>take a guess;</li>
<li>identify where that falls on a curve;</li>
<li>calculate the tangent to that point on the curve;</li>
<li>identify the x-intercept of that tangent; and</li>
<li>use that as your next guess, repeating until you find where it crosses the x-axis.</li>
</ol>

<p>So, the notion is that the square root of <code>n</code> can be represented as the positive x-intercept of the function:</p>

<blockquote>
  <p><span class="math-container">\$y = x^2 - n\$</span></p>
</blockquote>

<p>We know that the tangent of a given point on this curve in iteration <em>i</em> is:</p>

<blockquote>
  <p><span class="math-container">\$y = m_ix + b_i\$</span></p>
</blockquote>

<p>Where the slope is the first derivative of the above curve:</p>

<blockquote>
  <p><span class="math-container">\$m_i = 2x_i\$</span></p>
</blockquote>

<p>and the y-intercept is:</p>

<blockquote>
  <p><span class="math-container">\$b_i = y_i - m_ix_i\$</span></p>
</blockquote>

<p>And the x-intercept (i.e. our guess for the next iteration) of that tangent is:</p>

<blockquote>
  <p><span class="math-container">\$x_{i+1} = -\frac{b_i}{m_i}\$</span></p>
</blockquote>

<p>So, you can calculate the nearest perfect square below a given value using Newton-Raphson like so:</p>

<pre><code>func nearestSquare(below value: Int) -&gt; Int? {
    guard value &gt; 0 else { return nil }

    let target = value - 1

    func f(_ x: Int) -&gt; Int {                    // y = x² - n
        return x * x - target
    }

    var x = target
    var y = f(x)

    while y &gt; 0 {
        let m = 2 * x                            // slope of tangent
        let b = Double(y - m * x)                // y-intercept of tangent
        x = Int((-b / Double(m)).rounded(.down)) // x-intercept of tangent, rounded down
        y = f(x)
    }

    return x * x
}
</code></pre>

<p>Or you can simplify that formula a bit, doing a few arithmetic substitutions, to:</p>

<blockquote>
  <p><span class="math-container">\$x_{i+1} = x_i-\frac{y_i}{2x_i}\$</span></p>
</blockquote>

<p>Thus:</p>

<pre><code>func nearestSquare(below value: Int) -&gt; Int? {
    guard value &gt; 0 else { return nil }

    let target = Double(value - 1)

    func f(_ x: Double) -&gt; Double {                    // y = x² - n
        return x * x - target
    }

    var x = target
    var y = f(x)

    while y &gt; 0 {
        x = x - (y / x / 2).rounded(.up)
        y = f(x)
    }

    return Int(x * x)
}
</code></pre>
    </div>