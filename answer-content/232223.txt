<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As pointed out in dustytrash's answer you need only check the first 3 items to find out if you are hunting for odd or even values.</p>

<p>There are also some optimizations you can add to reduce the number of statements and clauses.</p>

<p>Rather than use two variables in the first loop to locate even or odd you can use just one and count up for odd and down for even. Also using a while loop is slightly more performant in this situation so we get the opening lines as</p>

<pre><code>function findOutlier(items){
    var oddEven = 0, i = 3;
    while (i--) { 
        oddEven += items[i] % 2 ? -1 : 1;
    }
    // more code to follow
</code></pre>

<p>Once out of the loop <code>oddEven</code> will be less than zero if we are looking of even;</p>

<p>Rather than use a statement and two constants to check each item for the remainder we can set that before the search.</p>

<pre><code>    oddEven = oddEven &gt; 0 ? 1 : 0;
</code></pre>

<p>Then we can use <code>Array.find</code> to locate the item returning it directly rather than waste time assigning it to a variable to return as you did.</p>

<pre><code>    return items.find(val =&gt; val % 2 === oddEven);
}
</code></pre>

<p>The whole thing will look like</p>

<pre><code>function findOutlier(items){
    var oddEven = 0, i = 3;
    while (i--) { oddEven += items[i] % 2 ? -1 : 1 }
    oddEven = oddEven &gt; 0 ? 1 : 0;
    return items.find(val =&gt; val % 2 === oddEven);
}
</code></pre>
    </div>