<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think I addressed most of your questions inline with this code review, but let me know if anything is unclear.</p>

<h1>Suit and Rank should be <code>Enum</code>s</h1>

<p>Much of the code can be simplified or removed if you define <code>Suit</code> and <code>Rank</code> as enumerations. Here's an example implementation:</p>

<pre class="lang-python prettyprint-override"><code>from enum import Enum


class Suit(Enum):
    SPADES = "♠"
    HEARTS = "♡"
    DIAMONDS = "♢"
    CLUBS = "♣"

    def __str__(self) -&gt; str:
        return self.value


class Rank(Enum):
    TWO = 2
    THREE = 3
    FOUR = 4
    FIVE = 5
    SIX = 6
    SEVEN = 7
    EIGHT = 8
    NINE = 9
    TEN = 10
    JACK = 11
    QUEEN = 12
    KING = 13
    ACE = 14

    def __str__(self) -&gt; str:
        if self is Rank.JACK:
            return "J"
        elif self is Rank.QUEEN:
            return "Q"
        elif self is Rank.KING:
            return "K"
        elif self is Rank.ACE:
            return "A"
        else:
            return str(self.value)

    def __gt__(self, other: "Rank") -&gt; bool:
        return self.value &gt; other.value

    def __lt__(self, other: "Rank") -&gt; bool:
        return self.value &lt; other.value
</code></pre>

<p>How does this help?</p>

<ul>
<li>Code that checks if a string is one of the suit strings <code>♠ ♡ ♢ ♣</code> or one of the rank strings <code>2 3 4 5 6 7 8 9 10 J Q K A</code> can be removed. For example, instead of passing in a <code>suit: str</code> and performing validations on it, just pass in a <code>suit: Suit</code>. No validations necessary.</li>
<li><a href="https://docs.python.org/3/library/enum.html#allowed-members-and-attributes-of-enumerations" rel="nofollow noreferrer">Enumerations are Python classes</a>, which means we can define canonical string representations with our own custom <code>__str__</code> methods.</li>
<li>We can also define comparison methods like <code>__gt__</code> and <code>__lt__</code> which is useful for <code>Rank</code>. This means we no longer need to create ad-hoc mappings from rank strings to their corresponding integer values, e.g.

<pre class="lang-python prettyprint-override"><code>{rank: num for (rank, num) in zip(list("23456789")+["10"]+list("JQKA"), range(2,15))} 
</code></pre>

in order to compare or sort by rank.</li>
</ul>

<h1><code>Card</code></h1>

<p><code>Card</code> can be simplified a lot if we make it a <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer"><code>NamedTuple</code></a>. <code>NamedTuple</code>s, like tuples, are immutable. This is appropriate for modeling <code>Card</code> because we don't need to mutate a card's suit or rank after instantiation.</p>

<pre class="lang-python prettyprint-override"><code>class Card(NamedTuple):
    suit: Suit
    rank: Rank

    def __str__(self) -&gt; str:
        return f"{self.suit}{self.rank}"

    def __gt__(self, other: "Card") -&gt; bool:
        return self.suit == other.suit and self.rank &gt; other.rank
</code></pre>

<h1><code>Deck</code></h1>

<p>I don't think this is needed. It's basically a very specialized <code>List[Card]</code> that only gets used in <code>__set_new_round</code>. Also, using it as a type in contexts when it actually refers to the player's hand (or a subset of the player's hand that is playable) is confusing.</p>

<p>I would consider removing this class. The logic of instantiating the deck as a list of cards, shuffling it, and dealing out the cards to players can be moved to <code>__set_new_round</code>. In places where <code>Deck</code> is currently expected as a parameter or return type, we can safely replace these with <code>List[Card]</code>.</p>

<h1><code>Trick</code></h1>

<p>Unlike <code>Deck</code>, I think <code>Trick</code> is a good abstraction and deserves its own type, even if they both function as "containers" of <code>Card</code>s. A few notes:</p>

<ul>
<li><code>HEARTS_ALLOWED</code> doesn't belong here. It makes more sense as an instance variable of <code>Game</code>.</li>
<li><code>self.__cards</code> makes more sense as a <code>List[Card]</code> since a trick is "empty" by default and we can add cards to it.</li>
<li>It's a matter of preference, but I think adding the <code>@property</code> decorator to <code>get_points</code> and renaming it to something more appropriate like <code>points</code> would be a nicer interface.</li>
<li>Your size validation of <code>len(self.cards) &lt;= 4</code> is not applied to the instantiation flow in <code>__init__</code>.</li>
</ul>

<h1><code>Player</code></h1>

<ul>
<li>To answer your question about <code>has_card</code>, I am in favor of splitting it up into two methods: <code>has_card(self, suit: Suit, rank: Rank)</code> and <code>has_card_with_suit(self, suit: Suit)</code>. I think having it as two separate methods handling two distinct types of queries makes it much easier to read.</li>
</ul>

<h1>Type hints</h1>

<p>I also love type hints, and find that they improve code readability. To answer your question, I don't think you need to worry about being addicted to type hinting.</p>

<p>That said, there are issues with many of the type hints in your program. I ran <a href="http://mypy-lang.org/" rel="nofollow noreferrer"><code>mypy</code></a> on your code and it found 40+ errors. I suspect that your IDE isn't running <code>mypy</code> on your code, otherwise it would have flagged these.</p>

<p>One example is the constructor of <code>Trick</code>, where <code>cards</code> is an <code>Optional[Tuple[Card, ...]]</code>, but then you directly assign it to <code>self.__cards</code> and assert that it is now a <code>Tuple[Card, ...]</code>.</p>

<p>Another is in <code>play_card</code>, where the return type should be <code>Iterator[Trick]</code> but it is just <code>Trick</code>.</p>

<p>What you can do is either set up your IDE with <code>mypy</code> integration (usually by installing a plugin) or periodically run <code>mypy</code> via the command line on your code to catch these errors.</p>

<h1>Miscellaneous</h1>

<ul>
<li>In <code>HumanPlayer</code>'s <code>_prompt_choice</code>, <code>if choiceCardIdx &lt; len(sortedPlayable)</code> should be <code>if 0 &lt;= choiceCardIdx &lt; len(sortedPlayable)</code></li>
<li>Also in <code>HumanPlayer</code>'s <code>_prompt_choice</code>, there is a list comprehension that is created and thrown away in order to print out the playable cards in hand. Instead, I would generally suggest using a for loop here.</li>
<li>I'm contradicting myself in the above bullet point because I don't think printing in a loop is the most readable approach here. I see a lot of places where <code>print</code> with <code>end=""</code> is used when it is probably a lot easier to construct intermediate strings first with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a>. For example, something like

<pre class="lang-python prettyprint-override"><code>[print(f"\t{idx}: {card} ", end="") for idx, card in enumerate(sortedPlayable)]
print("(Rest: ", end="")
for nonPlayableCard in list(set(self._hand.cards)-set(playable)):
    print(nonPlayableCard, end="")
    print(" ", end="")
print(")")
</code></pre>

can be replaced with

<pre class="lang-python prettyprint-override"><code>playable_cards = "\t".join(
    f"{idx}: {card}" for idx, card in enumerate(sortedPlayable)
)
non_playable_cards = " ".join(
    str(card) for card in set(self._hand.cards) - set(playable)
)
print(f"{playable_cards} (Rest: {non_playable_cards})")
</code></pre></li>
</ul>

<h1>Case consistency</h1>

<p>There is some inconsistency in the case used for your method, function, and variable names. Some names are in snake case (the recommended choice), but I also saw camel case and some combination of camel case and snake case.</p>

<p>Examples with suggestions on how to rename:</p>

<ul>
<li><code>get_winCard_idx</code> -&gt; <code>get_win_card_idx</code></li>
<li><code>choiceCardIdx</code> -&gt; <code>choice_card_idx</code></li>
<li><code>tricksPointsSum</code> -&gt; <code>trick_points_sum</code></li>
<li><code>nonPlayableCard</code> -&gt; <code>non_playable_card</code></li>
<li><code>numOfHumans</code> -&gt; <code>num_humans</code> or <code>number_of_humans</code></li>
</ul>

<h1>Test-driven development (TDD)</h1>

<p>Writing code via TDD isn't everyone's cup of tea, which I feel is fine because generally people approach problem-solving with many different strategies.</p>

<p>TDD gets you thinking about all the requirements first, and how you would validate those requirements through tests. And while doing that you are also forced to think about the shape of your data, the functions you'll need, the interfaces exposed by your classes, etc.</p>

<p>For example, consider the feature of figuring out which cards in a player's hand are playable. What would a test for this feature look like? To start, we would probably need the following:</p>

<ul>
<li>a trick with 0-3 cards</li>
<li>knowledge of whether hearts has been broken yet</li>
<li>a list of cards (the player's hand)</li>
</ul>

<p>What do we want as output? Maybe the list of playable cards (<code>List[Card]</code>), or maybe we want both lists, playable <em>and</em> non-playable (<code>Tuple[List[Card], List[Card]]</code>). It depends, but we at least have a start here.</p>

<p>So now we have some idea that we want a method that takes in some parameters as described above, and returns the list of playable cards in some format. Maybe it could look like this:</p>

<pre class="lang-python prettyprint-override"><code>def get_playable_cards(
    trick: Trick, hand: List[Card], hearts_is_broken: bool
) -&gt; List[Card]:
    pass
</code></pre>

<p>We don't really care about how <code>get_playable_cards</code> will be implemented, because now we have all the information we need to start sketching out some tests.</p>

<p>One other question is, who has access to all of this information, i.e. who has access to the current trick in play, the current player's hand, and the answer to whether hearts has been broken yet? If I had to guess I'd say <code>Game</code>, but maybe there is a better answer.</p>

<p>The takeaway here is that TDD gets you asking yourself these types of questions which can be very illuminating and helpful before diving into the actual implementation. Yes, there are cases where you write some tests, and then figure out later on that your data model was slightly off, or that you could improve readability of both the code and its tests if you refactored things in a different way. It happens, and in that case you would need to go back and change both the code and the tests. But that's a relatively small price to pay, I think, because what you're getting in return is a maintained suite of tests you can run very quickly against your code at any time while developing it.</p>

<p>Like I said earlier, it's not everyone's preferred style, but you might find it helpful to try it out as an exercise for future coding problems, and then follow up afterwards to see how following TDD influenced your design decisions.</p>
    </div>