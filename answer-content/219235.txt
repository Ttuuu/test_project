<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would normally use ftell and allocate the buffer size needed, but I assume that you have some non-standard Unix Distro with specific environment or compiler settings, if you say that ftell doesnt work sometimes.</p>

<p>I provide an example with fix buffer size, just for demonstration.
Buffer size reallocation and more error checking would probably  be needed for  production code.</p>

<p>Regarding code, generally, I always preferr staying generic and grouping code in functions.
It's not only making code easier to read, but also makes a thinking process easier. And there's a reusabillity point too, of course.</p>

<p>So this would be my refactoring - suggestion (I didn't pay much attention to your error codes. And it could be that you have to put declarations on top, if you are using some older C compiler like C89 etc.):</p>

<pre><code>#include &lt;stdio.h&gt;

#define GRANULARITY 80
#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))

size_t read_file(FILE* fd,      // file descriptor
                 char *buf, // buffer
                 size_t size); // buffer size

int main(int argc, char* argv[])
{
    char buf[1000];
    size_t num_read = read_file(stdin, buf, sizeof(buf));

    if (num_read &gt; 0)
    {
        for (int i = 0; i &lt; sizeof(buf); ++i)
            printf("%02hhX ", buf[i]);
    }
    else if (errno == ERANGE)
    {
        // error - there are more bytes to read, handle it
    }   
    else if (ferror(fd))    
    {
         // stream error - handle it
    }

    return 0;
}

size_t read_file(FILE* fd,
                 char *buf,
                 size_t size)
{
    size_t num_read = 0;
    char *pos = buf;
    size_t n = 0;

    while ( (n = fread(pos, 1, MIN(GRANULARITY, buf+size-pos), fd)) &gt; 0 )
    {
        num_read += n;
        pos += n;
    }

    if (!feof(fd))
        errno = ERANGE;   // buf too small - there are more bytes to read

    return num_read;
</code></pre>

<p><strong>Edit:</strong>
After reading some comments: changed the interface return type from <strong>ssize_t</strong> to <strong>size_t</strong> and moved the error-code checking responsibility to the caller.</p>
    </div>