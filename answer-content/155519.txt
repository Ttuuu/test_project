<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Update</strong></p>
<p>Added constructor parameter for the dictionary to avoid lower/capital letter case problems as pointed in the comments.</p>
<p>There are 2 solutions:</p>
<p>First option would be to map <code>string</code> -&gt; <code>InteractionType</code>  like this:</p>
<pre><code>private static readonly Dictionary&lt;string, InteractionType&gt; InteractionTypesDictionary = new Dictionary
    &lt;string, InteractionType&gt;(StringComparer.CurrentCultureIgnoreCase)
    {
        [string.Empty] = InteractionType.None,
        ["default"] = InteractionType.None,
        ["gate"] = InteractionType.Gate,
        ["postit"] = InteractionType.Postit,
        //...
    };
</code></pre>
<p>Once you have all of your strings there your method will be just 1 line:</p>
<pre><code>internal static InteractionType GetTypeFromString(string pType)
{
    string key = pType.ToLower();
    if(InteractionTypesDictionary.ContainsKey(key))
    {
        return InteractionTypesDictionary[key];
    }
    return InteractionType.None; // you might want to throw exception here.
}
</code></pre>
<p>The second option is the one I would prefer, I don't see any reason to not have the same string name as the <code>enum</code>, it's easier to know what exact value you are looking for and you can use some of the predefined functions in the <code>Enum</code> class. This will make your code just a few lines long:</p>
<pre><code>internal static InteractionType GetTypeFromString(string pType)
{
    string[] enumNames = Enum.GetNames(typeof(InteractionType));
    string enumValueName = enumNames.FirstOrDefault(x =&gt; pType.IndexOf(x, StringComparison.OrdinalIgnoreCase) &gt;= 0);
    if (enumValueName != null)
    {
        return (InteractionType) Enum.Parse(typeof(InteractionType), enumValueName);
    }
    return InteractionType.None;
}
</code></pre>
<p>This is the best solution because the previous 2 violate in some way the Open-Closed principle, because if you add some new value into the enum, you will need to modify some code somewhere in your project, but like this it will work even if you add new values, without updating this specific method. Also this is the shortest version, it simply requires you to have proper strings as parameters e.g</p>
<blockquote>
<p>bb_blue_gate</p>
<p>InteractionType.Banzaigateblue</p>
</blockquote>
<p>This is wrong and wont work it should be:</p>
<blockquote>
<p>banzaigateblue // lower or capital letters dont matter</p>
<p>InteractionType.Banzaigateblue</p>
</blockquote>
    </div>