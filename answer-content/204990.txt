<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some really quick filters that you can run before the "main test" that quickly detect a large number of non-squares, and some quick "reductions" that make the number smaller while ensuring that its "squareness" property does not change (this is useful since here the square root itself is not needed, we only need to know whether it exists).</p>

<p>For example, given a number n=m*4<sup>k</sup> we can get rid of the 4<sup>k</sup> part since either n is a square and its square root is n*2<sup>k</sup> or it isn't and that must mean m is not a square because the 4<sup>k</sup> part cannot cause non-square-ness.</p>

<p>So, the powers of 4 can be divided out, for example:</p>

<pre><code>n &gt;&gt;= Long.numberOfTrailingZeros(n) &amp; -2;
</code></pre>

<p>The <code>&amp; -2</code> rounds down the number of trailing zeros to an even number, so the shift only removes powers of 4.</p>

<p>Then, with the pre-condition that <code>x</code> is odd (if the powers of 4 are removed from <code>n</code> then the powers of 2 are removed from its square root .. unless <code>n = 0</code> but you can add <code>if (n == 0) return true;</code>) there are much fewer than 8 possible outcomes for <code>(x * x) % 8</code>, namely only 1: 1. That gives a really efficient filter:</p>

<pre><code>if ((n &amp; 7) != 1)
    return false;
</code></pre>

<p>This combination of tricks can be prepended to any "perfect square test" in order to run the main test only about 1/8th of the time assuming uniform random input, so together they can be used to make anything faster <em>unless</em> it is expected that most inputs are actually squares.</p>
    </div>