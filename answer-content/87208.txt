<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Each of these:</p>

<pre><code>string account = string.Empty;

if (queryWhere.ContainsKey("account") 
   &amp;&amp; queryWhere["account"] != null 
   &amp;&amp; !string.IsNullOrEmpty(queryWhere["account"].ToString()))
{
    account = queryWhere["account"].ToString();
}
</code></pre>

<p>Should be reduced to:</p>

<pre><code>string account;
if(!queryWhere.TryGetValue("account", out account))
{
   account = string.Empty; // if you need the string to be empty // default is null
}
</code></pre>

<p><a href="https://msdn.microsoft.com/en-us/library/bb347013(v=vs.110).aspx">Dictionary.TryGetValue</a></p>

<p>But that logic can then be moved to a method:</p>

<pre><code>private string GetValue(string key)
{
   string returnValue;
   if(!queryWhere.TryGetValue(key, out returnValue))
   {
      returnValue= string.Empty;
   }
   return returnValue;
}

string account = GetValue("account");
string customer = GetValue("customer");
</code></pre>

<hr>

<p>I really don't see the point of your original code, BTW. For instance, the <code>.ToString()</code> is completely superfluous, since you're working with a <code>Dictionary&lt;string,string&gt;</code>. It is <strong>always</strong> going to return a <code>string</code>.</p>

<p>But why do you even check for <code>string.IsNullOrEmpty()</code>? You already know it isn't <code>null</code> from the previous line's check -- <code>queryWhere["account"] != null</code> -- so at worst it is empty which is your default value anyway!</p>
    </div>