<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Undefined Behaviour</h2>

<p>If you execute this code with <code>n DB 0</code>, it returns without setting <code>ch</code> to any value, leaving the result as undefined.</p>

<h2>Signed Length</h2>

<pre><code>mov dl,0h
mov dh,n

cmp dl,dh
jge end
</code></pre>

<p>If <code>n</code> happens to be between 128 and 255, the <code>jge</code> will treat the comparison as if it was a signed comparison, and since 0 is not greater than or equal to any value between -128 and -1, inclusive, immediately jump to the end, again leaving <code>ch</code> as an undefined value.</p>

<p>You should use <code>jae</code> instead, so you can have up to 255 values in <code>array</code>.</p>

<h2>Signed comparison</h2>

<p>Does your array of values represent unsigned bytes, or signed bytes?  If your array contains <code>0FFh</code>, is that the largest possible value, or one smaller than zero?</p>

<p>If the data is supposed to be signed, you're good.  If it was supposed to be unsigned bytes, you again should change the <code>jle</code> to <code>jbe</code>.</p>

<h2>Unnecessary Register Usage</h2>

<p>You execute <code>mov cx,0h</code>, but nowhere do you use <code>cl</code>, so are unnecessarily destroying <code>cl</code>.</p>

<p>You execute <code>mov ah,[bx+si]</code> and use <code>mov ax,0h</code> to clean-up at the end.  Again, nowhere have you used <code>al</code>, so you've unnecessarily destroyed <code>al</code>.</p>

<p>If you used <code>cl</code> instead of <code>ah</code>, you wouldn't need to destroy <code>ax</code> at all.</p>

<p>Use of <code>si</code> appears unnecessary.  Instead of based-index addressing mode:</p>

<pre><code>mov cl,[bx+si]
inc si
</code></pre>

<p>you could use register indirect addressing mode:</p>

<pre><code>mov cl,[bx]
inc bx
</code></pre>

<h2>Better Registers</h2>

<p><code>cx</code> is the standard for loop counts.  <code>ax</code> is the standard for function return values.  <code>si</code> is the standard for source indexing.  So ...</p>

<p>Have your function store and return the maximum in <code>al</code>.  Use <code>ah</code> to fetch values from the <code>array</code>, and zero it at the end.  As a bonus, <code>ax</code> could also be considered the return value.  (If the array is intended to hold signed data, then use <code>cbw</code> to sign extend <code>al</code> into <code>ax</code> instead of zeroing <code>ah</code>.)</p>

<p>If you used <code>cx</code> for your array length, and decrement to zero, you could use one <code>LOOP</code> instruction instead of a pair of instructions to perform the compare-and-branch.  As another bonus, it will already be zero by the end, so you won't need to clear it.</p>

<p>Store the <code>array</code> address in <code>si</code>, and use <code>cx</code> for double duty by using based-index addressing (<code>mov ah, [cx+si]</code>) to index into your <code>array</code>.  Of course, you'll be searching backwards, which still fine for finding the maximum.  You'd just have to be careful to include the 0th value, and exclude the nth value (<code>dec cx</code> before the fetch, not afterwards).</p>

<p>Final tally:</p>

<ul>
<li>return value in <code>ax</code></li>
<li><code>cx</code> zeroed (automatically)</li>
<li><code>si</code> cleared (manually)</li>
<li>All other registers unchanged.</li>
</ul>
    </div>