<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><sup><em>warning: cheesy meme with bad pun below - if you don't like those, then please skip it...</em></sup></p>

<blockquote class="spoiler">
  <p> <strong><em>Ermagherd</em></strong> <br><a href="https://i.imgflip.com/27m5m9.jpg" rel="nofollow noreferrer"><img src="https://i.imgflip.com/27m5m9.jpg" alt="2"></a></p>
</blockquote>

<h2>Question responses</h2>

<blockquote>
  <p>Do I have too many / too few components? I am aiming to make several other games in Vue so I like to make things re-useable.</p>
</blockquote>

<p>I think the current components are divided well. The existing components make sense.</p>

<blockquote>
  <p>How are my Vue skills?</p>
</blockquote>

<p>Usage of Vue looks good. There are a few general JS aspects that I have feedback for (see below, under last "question") but usage of Vue components and other constructs looks good. </p>

<blockquote>
  <p>Can anything be done better with regards to how I am using Vue?</p>
</blockquote>

<p>Bearing in mind I am not an expert VueJS user and have only been working with it on small projects in the past year, I can't really think of anything... If you really wanted you could consider using <a href="https://vuejs.org/v2/guide/components.html#Content-Distribution-with-Slots" rel="nofollow noreferrer">slots</a> somehow, or <a href="https://medium.com/@andrejsabrickis/https-medium-com-andrejsabrickis-create-simple-eventbus-to-communicate-between-vue-js-components-cdc11cd59860" rel="nofollow noreferrer">an Event bus</a> if the components became more separated but that might not be nessary since everything is contained in the main RoyalGameOfUR component.</p>

<p>If I think of anything else, I will surely update this answer.</p>

<blockquote>
  <p>I am nowhere near a UX-designer, but how is the user experience?</p>
</blockquote>

<p>The layout of the game components is okay, though it would be helpful to have more text prompting the user what to do, or at least the rules and game play instructions somewhere (e.g. in a text box, linked to another page, etc.). In the same vain, I see an uncaught exception in the console if the user clicks the dice when it isn't time to roll. One could catch the exception and alert the user about what happened.</p>

<blockquote>
  <p>Any other feedback also welcome.</p>
</blockquote>

<h1>Feedback</h1>

<p>Wow that is a really elegant application! Well done! I haven't used the <code>grid</code> styles yet but hope to in the future.</p>

<p>I did notice that after rolling the dice, when selecting a piece from a stack, it doesn't matter which player is the current player - I can click on either stack (though only a piece from the current player's stack will get moved).</p>

<p>I did notice an error once about <code>this.onclick is not defined</code> but I didn't observe the path to reproduce it. If I see it again I will let you know.</p>

<h1>Suggestions</h1>

<h2>JS</h2>

<h3><code>let</code> &amp; <code>const</code></h3>

<p>I see the code utilizes <code>let</code> in a few places but otherwise just <code>var</code>. It would be wise to start using <code>const</code> anywhere a value is stored but never re-assigned - then use <code>let</code> if re-assignment is necessary. Using <code>var</code> outside of a function declares a global variable<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#Description" rel="nofollow noreferrer">1</a></sup>...I only spot one of those in your post (i.e. <code>var games</code>) but if there were other places where you wanted a variable in another file called <code>games</code> then this could lead to unintentional value over-writing.</p>

<h3>Array copying</h3>

<p>In <code>piecesToObjects()</code>, I see these lines:</p>

<blockquote>
<pre><code>var arrayCopy = []; // Convert Int32Array to Object array
playerPieces.forEach(it =&gt; arrayCopy.push(it));
</code></pre>
</blockquote>

<p>You could utilize <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" rel="nofollow noreferrer"><code>Array.from()</code></a> to copy the array, then use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer"><code>array.map()</code></a> to call <code>mapping()</code> instead of using the <code>for</code> loop. Originally I was thinking that the <code>forEach</code> could be eliminated but there is a need to get a regular array instead of the typed array (i.e. Int32Array). If the array being copied (i.e. <code>array</code>) was a regular array, then you likely could just use <code>.map()</code> - see <a href="https://jsperf.com/piecestoobjectscomparison/1" rel="nofollow noreferrer">this jsPerf</a> to see how much quicker that mapping could be.</p>

<pre><code>return Array.from(playerPieces).map(mapping);
</code></pre>

<p>And that function <code>mapping</code> could be pulled out of <code>piecesToObjects</code> if <code>playerIndex</code> is accepted as the first parameter, and then  playerIndex can be sent on each iteration using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer">Function.bind()</a> - i.e. using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">partially applied function</a>.</p>

<pre><code>return Array.from(playerPieces).map(mapping.bind(null, playerIndex));
</code></pre>

<h3>Nested Ternary operator</h3>

<p>Bearing in mind that this might just be maintained by you, if somebody else wanted to update the code, that person might find the line below less readable than several normal <code>if</code> blocks. My former supervisor had a rule: no more than one ternary operator in one expression - especially if it made the line longer than ~100 characters.</p>

<blockquote>
<pre><code>var x =
  y == 1
    ? position - 5
    : position &lt;= 4 ? 4 - position : 4 + 8 + 8 - position;
</code></pre>
</blockquote>

<p>Something a little more readable might be:</p>

<pre><code>var x;
if (y == 1) {
    x = position - 5;
}
else {
    x = position &lt;= 4 ? 4 - position : 4 + 8 + 8 - position;
}
</code></pre>

<h3>0-based Flower grid areas</h3>

<p>Why add 1 to the x and y values in UrFlower's template? Perhaps you are so used to 0-based indexes and wanted to keep those values in the markup orthogonal with your ways... Those flowers could be put unto an array and looped over using <code>v-for</code>... but for 5 flowers that might be too excessive...</p>

<h2>CSS</h2>

<h3>Inline style vs CSS</h3>

<p>There are static inline <em>style</em> attributes in UrPlayerView.vue - e.g. :</p>

<blockquote>
<pre><code>div v-for="n in remaining" class="piece-small pointer"
      :class="{ ['piece-' + playerIndex]: true, moveable: canPlaceNew &amp;&amp; n == remaining }"
      @mouseover="onPlaceNewHighlight(playerIndex)" @mouseleave="mouseleave()"
      style="position: absolute; top: 6px;"
</code></pre>
</blockquote>

<p>and           </p>

<blockquote>
<pre><code>&lt;div v-for="n in out" class="piece-small"
      :class="['piece-' + playerIndex]"
      style="position: absolute; top: 6px;" 
</code></pre>
</blockquote>

<p>The position and top styles could be put into the existing ruleset for <code>.piece-small</code>...     </p>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#Description" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#Description</a></sub></p>
    </div>