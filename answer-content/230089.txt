<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The overall readability can be improved. As to efficiency you could remove the outer <em>forEach</em> and use a <em>concat</em>. Also the check for similarity is not necessary. Here below 3 alternative solutions, using different language primitives which make for better readability and a bit better efficiency.</p>

<ol>
<li>Solution I: somewhat easier to read as it includes a visible <em>for</em> loop and explicit build up of a <em>tmp</em> array</li>
</ol>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var findPowerSet = function(input) {
    if(input.length === 0) return [input];
    
    let first = input[0];
    let rest = findPowerSet(input.slice(1));
    
    let tmp = [];
    for(let i=0; i&lt;rest.length;i++) {
        tmp.push([first].concat(rest[i]));
    }
    
    return tmp.concat(rest);

};

let input = [1,2,3];

console.log(`input: ${JSON.stringify(input)}, result: ${JSON.stringify(findPowerSet(input))}`)</code></pre>
</div>
</div>


<ol start="2">
<li>Solution II: Shorter solution, still easy to read as it involves <em>forEach</em> method</li>
</ol>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var findPowerSet = function(input) {
    if(input.length === 0) return [input];
    
    let first = input[0];
    let rest = findPowerSet(input.slice(1));
    
    let tmp = [];
    
    rest.forEach(el =&gt; tmp.push([first].concat(el)));
    
    return tmp.concat(rest);

};

let input = [1,2,3];

console.log(`input: ${JSON.stringify(input)}, result: ${JSON.stringify(findPowerSet(input))}`)</code></pre>
</div>
</div>


<ol start="3">
<li>Solution III: Even shorter solution, however, requires knowledge of JS <em>map()</em> method:</li>
</ol>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var findPowerSet = function(input) {
    if(input.length === 0) return [input];
    
    let first = input[0];
    let rest = findPowerSet(input.slice(1));
    
    let tmp = rest.map(el =&gt; [first].concat(el));
    
    return tmp.concat(rest);

};

let input = [1,2,3];

console.log(`input: ${JSON.stringify(input)}, result: ${JSON.stringify(findPowerSet(input))}`)</code></pre>
</div>
</div>


<p>Here is an explanation of the recursion process:</p>

<pre><code>        {1,2,3}
     {1}    {2,3}
   {}    {2}   {3}
end    {}     {}
     end    end
</code></pre>

<ul>
<li>base case '{}' return [[]]</li>
<li>recursion case:

<ol>
<li>take the <em>first</em> element of a set</li>
<li>recurse for the tail (rest of the set)</li>
<li>add the <em>first</em> element from step 1 to each element of the <em>rest</em> of the set from step2</li>
<li>return concatenated the result of step 3 with the <em>rest</em>, so combine the result of all recursions</li>
</ol></li>
</ul>

<p><strong>Time complexity</strong>: O(2^N) - exponential (as can be observed from the recursion tree)</p>

<p><strong>Space complexity</strong>: O(N) as we have N recursive calls</p>

<p>For a bottom-up approach take a look at this <a href="https://stackoverflow.com/questions/42773836/how-to-find-all-subsets-of-a-set-in-javascript">StackOverflow</a> accepted answer</p>
    </div>