<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Don't hardcode file names</h2>

<p>Generally, it's not a good idea to hardcode a file name in software.  Instead, it would be better to allow the user of the program to specify the name, as with a command line parameter.</p>

<h2>Don't use <code>assert</code> to handle errors</h2>

<p>The use of <code>assert</code> is to help debug the program, so in some cases, such as <code>assert(f)</code> in <code>hideMessage</code> it makes sense, but in others, such as <code>assert(file)</code> in <code>main()</code>, it's not appropriate.  Better would be to write something like this:</p>

<pre><code>if (infile == NULL) {
    fprintf(stderr, "Error: could not open input file \"%s\"\n", argv[1]);
    return 2;
}
</code></pre>

<h2>Don't bother encoding terminating NUL character</h2>

<p>By definition, the string-terminating NUL character (<code>'\0'</code>) is a string of zeroes which will, according to the encoding rules, not alter the line endings.  For that reason, there's little reason to bother encoding them.</p>

<h2>Allow separation of input and output files</h2>

<p>It may be that having the input and output files as separate files would be handy.  For that reason, I'd suggest making them separate file names.</p>

<h2>Rethink the use of strings</h2>

<p>The conversion of each message string to a string that's eight times longer (by converting into the equivalent string of <code>'1'</code> and <code>'0'</code> characters is not really necessary.  One could instead simply pick off bits of the message when encoding.  Here's one way to do that:</p>

<pre><code>bool hideMessage(const char *msg, FILE *infile, FILE *outfile) {
    if (msg == NULL) {
        return false;
    }
    for ( ; *msg; ++msg) {
        for (int mask = 0x80; mask; mask &gt;&gt;= 1) {
            if (encodeBit(infile, outfile, mask &amp; *msg) == EOF) {
                return false;
            }
        }
    }
    // copy the rest of the file
    for (int ch = fgetc(infile); ch != EOF; ch = fgetc(infile)) {
        fputc(ch, outfile);
    }
    return true;
}
</code></pre>

<p>This marches through the passed message, encoding bit at a time until it encounters the end of the input message and then simply copies the rest of the input file to the output file  unaltered.  Here's one way to write the <code>encodeBit</code> function:</p>

<pre><code>int encodeBit(FILE *infile, FILE *outfile, char bit) {
    for (int ch = fgetc(infile); ch != EOF; ch = fgetc(infile)) {
        switch(ch) {
            case '\n':
                if (bit) {
                    fputc(' ', outfile);
                }
                fputc(ch, outfile);
                return ch;
                break;
            default:
                fputc(ch, outfile);
        }
    }
    return EOF;
}
</code></pre>

<p>This code returns the last character read, so that <code>EOF</code> can be used as an indication of error (that is, the file is too short to encode the message).</p>

<p>One can also create the reverse functions in very similar manner.</p>

<h2>Be aware of file modes differences</h2>

<p>On POSIX compliant operating systems, such as Linux, there is no difference between binary and text mode for file handles.  However other operating systems, most notably Windows, do differentiate between them. The difference is that CR LF (0x0d 0x0a) is used as the line ending in Windows (while just LF, 0x0a is used on Linux). For that reason, for code like this, I'd suggest opening both files in text mode.  This means, unfortunately, that you can't use <code>tmpfile()</code> and follow this advice.  Otherwise you could have the unfortunate situation in which the file is emitted with CR SP LF (0x0d 0x20 0x0a) which would likely confuse Windows greatly.</p>

<h2>Comments on comments</h2>

<p>Although a native English speaker will likely be able to detect from the comments that they were not written by a native English speaker, they're still quite understandable and convey exactly the kinds of information that a reader needs -- "what does it do and how should I use it?"  My only complaint, and it's a small one, is that starting each comment block with "The APPENDCHARTODYNAMICSTRING function" is not helpful.  First, we know it's a function so that doesn't add much information, and second, it turns the relatively readable <code>appendCharToDynamicString</code> and turned it into something less readable.  I tend to document my C code with annotations that can be used by <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">Doxygen</a> which can then be used to very easily turn your source code into high quality documentation.</p>

<h2>Consider enhancements</h2>

<p>It might be useful to encrypt the string before encoding.  It might also be useful to provide the ability to detect if the file already might contain a hidden message.  This could be done by always encoding a <code>1</code> bit before every message.  Further, if the code used space and tab characters to encode ones and zeroes, it would be possible to stack multiple messages in the same file.</p>
    </div>