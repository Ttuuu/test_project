<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Other answers have already provided alternative solutions to <code>std::any</code>, such as <code>std::variant</code>, or inheritance; this answer will focus on correct usage of <code>std::any</code> itself.</em></p>

<blockquote>
  <p>and so I've come up with a hacky way to get this information by detangling the value typename into a string and then using a ton of else if statements to compare this string</p>
</blockquote>

<p><code>std::any</code> does actually provide several ways to query the underlying type without relying on string parsing, let's review them below:</p>

<pre><code>void ingest_any(std::any any)
{
    try
    {
        std::cout &lt;&lt; std::any_cast&lt;std::string&gt;(any) &lt;&lt; "\n";
    }
    catch (std::bad_any_cast const&amp;) {}

    if (std::string* str = std::any_cast&lt;std::string&gt;(&amp;any)) {
       std::cout &lt;&lt; *str &lt;&lt; "\n";
    }

    if (std::type_index{ typeid(std::string) } == any.type()) {
       //  Known not to throw, as previously checked.
       std::cout &lt;&lt; std::any_cast&lt;std::string&gt;(any) &lt;&lt; "\n";
    }
}
</code></pre>

<p>In general, when the actual type is not known, I would suggest either relying on the pointer form of <code>any_cast</code> for ad-hoc querying, or on <code>type_index</code> for look-ups.</p>

<p>When you are about to create an if-ladder, you are in the look-up case:</p>

<pre><code>using AnyAction = std::function&lt;void(std::any const&amp;)&gt;;

template &lt;typename T&gt;
void print(std::any const&amp; a) { std::cout &lt;&lt; std::any_cast&lt;T&gt;(a) &lt;&lt; "\n"; }

std::map&lt;std::type_index, AnyAction&gt; const Actions = {
    { typeid(std::string), print&lt;std::string&gt; },
    { typeid(unsigned long), print&lt;unsigned long&gt; },
    { typeid(long), print&lt;long&gt; },
    { typeid(double), print&lt;double&gt; },
    { typeid(float), print&lt;float&gt; },
    { typeid(char), print&lt;char&gt; },
};

void doit(std::any const&amp; a)
{
    if (auto it = Actions.find(a.type()); it != Actions.end())
    {
        it-&gt;second(a);
        return;
    }

    std::cout &lt;&lt; "Unknown type: " &lt;&lt; a.type().name() &lt;&lt; "\n";
}
</code></pre>

<p><a href="https://godbolt.org/z/iLqkrP" rel="nofollow noreferrer">See it in action on godbolt</a>.</p>

<p>The main advantage of such maps is that they need not be <code>const</code>; you can instead use a run-time registry in which the user registers a type, as well as the appropriate (various) actions that can be undertaken on that type.</p>

<p>This allows a core code which knows nothing of the concrete types, and therefore allows a library never to expose its internal types to the exterior world.</p>

<p>Of course, in exchange for the flexibility, you pay a run-time penalty.</p>
    </div>