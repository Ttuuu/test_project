<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For future reference:</p>

<ol>
<li><p>Debug code should be embedded in  </p>

<pre><code>#ifdef DEBUG
#endif
</code></pre></li>
<li><p>Having live debug code in the program means the code is not ready for code review.</p></li>
<li><p>Having unused functions such as <code>char *input(const char *q)</code> means the code is not ready for code review.</p></li>
</ol>

<h2>Performance</h2>

<p>Shells provide the user interface for the operating system; they need to be very fast, therefore character by character input and multiple memory reallocations are not the best way to achieve good performance in shells. The functions <code>malloc()</code> and <code>realloc()</code> are slow because they make system calls to allocate the memory; programs making system calls can be swapped out during the system call depending on system resources and usage. These calls should be minimized when speed is important. Single character input is also slow; reading the full input buffer is much faster, and string manipulation is much faster than input as well.</p>

<p>The C library provides an excellent function to get a line of input from the terminal; this function is <a href="http://www.cplusplus.com/reference/cstdio/fgets/" rel="nofollow noreferrer"><code>fgets(char* buffer, size_t buffer_size, FILE *stream)</code></a>. The function <code>fgets()</code> could basically replace the function <code>char *read_line()</code>. The standard include file <code>&lt;stdio.h&gt;</code> provides a symbolic constant for input buffer sizes; this constant is <code>BUFSIZ</code> and it is defined as the most optimal size for getting input on your operating system. So to replace <code>read_line()</code> properly:</p>

<pre><code>char *input(const char *q)
{
    printf("%s", q);
    char input_buffer[BUFSIZ];
    int number_of_chars_read = fgets(input_buffer, BUFSIZ, stdin);
    if (number_of_chars_read &gt; 0)
    {
        return strdup(input_buffer);
    }

    return NULL;
}
</code></pre>

<p>Prior to May 2019, <code>strdup(char *str)</code> was not totally portable, but in May of 2019 it was added to the C programming standard.</p>

<p>The function <code>fgets()</code> properly handles <code>EOF</code> and newlines.</p>

<h2>Complexity</h2>

<p>Functions the size and complexity of <code>char **tokenize(const char *line)</code> are very hard to read, write, debug and maintain. I've had managers that considered any function larger than 10 lines of code to be too big, but I don't quite agree with that; any function that is more than one screen in an editor should be considered too big and too complex. There are a couple of programming principles that apply here: the Single Responsibility Principle and the KISS principle.</p>

<p>The <a href="https://en.wikipedia.org/wiki/KISS_principle" rel="nofollow noreferrer">KISS</a> principle is "Keep It Simple", and applies to more than just software development.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>Following this principle, the function <code>char **tokenize(const char *line)</code> should call multiple functions to implement the tokenization.</p>
    </div>