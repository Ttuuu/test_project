<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks great overall, although I'm really not a fan of <em>banner comments</em> (some of them would do well as <a href="https://rubberduckvba.com/Annotations/Details/Description" rel="noreferrer">@Description annotations</a>), but I like that the commenting is very extensive. Good job!</p>
<p>This is dangerous though:</p>
<blockquote>
<pre><code>'*******************************************************************************
'Sets the weak/fake reference to an object
'*******************************************************************************
Public Property Let Object(obj As Object)
</code></pre>
</blockquote>
<p>It breaks a very well-established convention where object references are assigned using the <code>Set</code> keyword. By defining the property as a <code>Property Let</code> member, the consuming code has all rights to consider this legal:</p>
<pre><code>Set weakRef.Object = someObject
</code></pre>
<p>But they'll be met with a confusing "invalid use of property" compile-time error.</p>
<blockquote>
<pre><code>Public Property Let Parent(newParent As DemoParent)
    Set m_parent = New WeakReference
    m_parent.Object = newParent
End Property
</code></pre>
</blockquote>
<p>That <em>should</em> read:</p>
<pre><code>Public Property Set Parent(ByVal newParent As DemoParent)
    Set m_parent = New WeakReference
    Set m_parent.Object = newParent
End Property
</code></pre>
<p><sub>(note: Property Let/Set RHS argument is always passed ByVal; the implicit default being ByRef everywhere else, it's a good idea to make it explicit here)</sub></p>
<p>Why? Because depending on how the <code>newParent</code> object is defined, this code might not do what you think it does:</p>
<pre><code>    m_parent.Object = newParent
</code></pre>
<p>Indeed, classes in VBA can have hidden <em>member attributes</em>. If you have <a href="https://rubberduckvba.com" rel="noreferrer">Rubberduck</a>, you can do this:</p>
<pre><code>'@DefaultMember
Public Property Get Something() As Long
    Something = 42
End Property
</code></pre>
<p>And when you synchronize the Rubberduck <a href="https://rubberduckvba.com/Annotations/Details/DefaultMember" rel="noreferrer">annotations</a> (via inspection results), the  member would look like this if you exported the module:</p>
<pre><code>'@DefaultMember
Public Property Get Something() As Long
Attribute Something.VB_UserMemId = 0
    Something = 42
End Property
</code></pre>
<p>If that's what the <code>DemoParent</code> class does, then this:</p>
<pre><code>    m_parent.Object = newParent
</code></pre>
<p>Is <em>implicitly</em> doing this, through a mechanism known as <em>let coercion</em>, where an object can be coerced into a value:</p>
<pre><code>    Let m_parent.Object = newParent.Something
</code></pre>
<p>That makes <code>WeakReference</code> not work with most classes that define a <em>default member/property</em>. Granted, most classes <em>should not</em> define such a member (implicit code is code that says one thing and does another: avoid it!), but it wouldn't be uncommon to see it adorn a custom collection class' <code>Item</code> property - if each item in that custom data structure has a reference to its containing collection, then the error would be complaining about an argument (to a method we don't intend to invoke, and whose name won't appear in the error message) not being optional...</p>
<p>VBA uses the <code>Set</code> keyword specifically to disambiguate this assignment scenario:</p>
<pre><code>    [Let] m_parent.Object = newParent 'ambiguous, RHS could be let-coerced
    Set m_parent.Object = newParent 'unambiguous
</code></pre>
<p>The <code>Let</code> keyword is redundant and can safely be omitted, but not the <code>Set</code> keyword.</p>
<p>The keyword is not needed in <em>later</em> versions of Visual Basic, because in these versions, the compiler will refuse to allow the definition of a <em>parameterless</em> default member: the possible presence of a parameterless default member on a VBA class is why the <code>Set</code> keyword is required: skirting around it introduces unexpected implicit behavior that can be very hard to diagnose and/or debug.</p>
    </div>