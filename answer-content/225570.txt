<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you haven't specified any focus points, I'll focus on readability.</p>

<p>To speed things up, you may want a <code>Matrix</code> or <code>Vector</code> to represent your board.</p>

<p><code>transition</code>:</p>

<ul>
<li><p>To make this function more readable, you may want to introduce a more
abstract way to address neighbouring fields. For example, a function
like</p>

<pre><code>liveness :: Board -&gt; Position -&gt; Integer
liveness board pos = sum . filter (isAlive board) . map (addOffset pos) $
  [ (dx,dy) | dx &lt;- (-1,0,1), dy &lt;- (-1,0,1), (dx,dy) /= (0,0) ]

addOffset :: Position -&gt; Offset -&gt; Position
addOffset = ...

isAlive :: Board -&gt; Position -&gt; Bool
isAlive = ...
</code></pre>

<p>that counts the number of living cells surrounding <code>pos</code>.</p>

<p>Whether <code>addOffset</code> should treat the edge as a border or wrap would be a detail.</p></li>
<li><p>You would like to abstract out explicit recursion in <code>process</code>:</p>

<pre><code>process n = map process_row [0..length state - 1]
</code></pre></li>
<li><p>If you have constant-time lookup into your cells, <code>process_row</code> will not
need to fetch previous and next rows.</p></li>
<li><p>As an example of the simplicity one could achieve with this part of the code, see <a href="https://rhnh.net/2012/01/02/conway's-game-of-life-in-haskell/" rel="noreferrer">Xavier Shay's Game of Life</a>; some things could be improved here, also, but the general game logic is very short and succinct.</p></li>
</ul>

<p><code>main</code>:</p>

<ul>
<li>The parenthesis is redundant.</li>
</ul>

<p><code>gameOfLife</code>:</p>

<ul>
<li><p>You could abstract out the recursion part so that you have one combinator
that performs the meat of the IO operation, and another that iterates it
infinitely. That way you could reuse the meat for other versions where a
user must interact, or where it only runs a fixed number of iterations:</p>

<pre><code>stepGame1 :: GameState -&gt; IO GameState
stepGame1 gameState = do
  prettyPrint gameState
  threadDelay 100000
  printf "\ESC[%dA" (length state) -- move cursor to beginning
  return (transition gameState)

stepGameInf :: GameState -&gt; IO a
stepGameInf gameState = stepGame1 gameState &gt;&gt;= stepGameInf
</code></pre>

<p>But you could also do it differently; for example, it's a bit weird that <code>stepGame1</code> both prints and transitions the game state.</p></li>
</ul>

<p>For further improvements on the way transitions are computed, you may want to look at:</p>

<ul>
<li><p>Chris Penner's <a href="https://chrispenner.ca/posts/conways-game-of-life" rel="noreferrer">Conway's Game Of Life Using Representable And Comonads</a>, which uses Vector for the game state and comonads; he uses some comonad library tricks (<code>Control.Comonad.Representable.Store</code>) to achieve memoization between transitions.</p></li>
<li><p>The <a href="http://hackage.haskell.org/package/base/docs/Control-Monad-ST.html" rel="noreferrer"><code>ST</code> monad</a> for efficient, pure transitions without the comonad complexity.</p></li>
</ul>
    </div>