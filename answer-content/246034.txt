<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before considering performance...some comments from reviewing the code.</p>
<ol>
<li>(Best Practice) Use <code>Option Explicit</code> at the top of the module.  This forces the requirement for all variables and constants to be declared.  Consequently, it can identify typos like <code>Dim ThisWorBookName As String</code> (found in the code) when <code>Dim ThisWorkBookName As String</code> was intended. Declaring variables at the top of a procedure is better than not declaring them at all. Better still is declaring them closer to where they are first used.</li>
<li>(Deprecated) <code>Call</code> is no longer required to call procedures.  It can be removed.</li>
<li><code>Sub Import_data()</code> is a fairly lengthy subroutine.  Notice how comments are required throughout to identify what 'task' is being performed by various blocks of code.  Your code can become somewhat self-documenting by creating and calling procedures that are named for the task.  This will will make all your subroutines easier to read, debug, and instrument in order to find what operations are taking the longest time.  Doing this applies the <em>Single Responsibility Principle</em> (SRP):  Each Subroutine and Function should accomplish a single task...or put another way, each Subroutine and Function should have a single 'reason to change'. (Easier said than done...but it is something for your code to aspire to).</li>
<li>Apply the <em>Don't Repeat Yourself</em> (DRY) principle.  There is a lot of repeated statements and code blocks that vary only by a single parameter.  The repeated blocks can be eliminated by extracting the logic into focused subroutines and functions.</li>
<li>Give variable names a meaningful identifier.  Using an abbreviation is not going to make your code faster (or slower)...but abbreviations and single character variable names will definitely be require more time and effort to understand when you come back to this code (for whatever reason) months later.</li>
<li>There are many references to cells using constant row and column identifiers.  For example  <code>wsLot.Cells(5, "C")</code> is a particular favorite.  It is referred to often using different row and cell constants: <code>wsLot.Cells(5,3)</code>, <code>wsLot.Cells("C5")</code>
This cell is consistently associated with the variable <code>RegisterNoError</code>.  Consider adding a module Property by the same name and removing the variable altogether.</li>
</ol>
<p>Same applies to:
<code>Worksheets("LOTS").Cells(5, "D")</code> =&gt; <code>RegisterNumb</code> (use the full name?)
<code>Worksheets("LOTS").Cells(5, 1)</code> =&gt; <code>AreaNumber</code>
In fact, there appears to be a number of important cells in row 5 of <code>Worksheets("LOTS")</code>.  I've deciphered 3...Give them all names/properties and your code becomes more readable (and consistent).
Other similar opportunities: <code>Worksheets("CONTROL").Cells(4,3)</code> and <code>Worksheets("CONTROL").Cells(5,3)</code>.  Another option for consistency and easy interpretation is using <code>NamedRanges</code>.</p>
<ol start="7">
<li>Magic Numbers - there are many cases where numeric literals are used within the code.  It is nearly impossible to figure out what they mean.  If they can be given a name, then declare them as constants.  For example, '6' is used in many places.  My guess is that it is an important offset from <em>something</em>.  Declare a module constant with a meaningful name: <code>Private Const IMPORTANT_OFFSET As Long = 6</code> (you can pick a better name). Other frequently used magic numbers in the code are 7 and 9.  What do they mean?...give them a name. Magic numbers also make their way into hard coded formula strings - build the formula strings using the constant(s) there as well.  When the need arises to change these magic numbers, you only have to modify the declaration rather than hunt through your code and hope that you've updated them all (spoiler alert: you haven't). Note: column value string literals within <code>Range</code> or <code>Cell</code> calls are essentially 'magic numbers' as well and can possibly be declared as constant string values with names that provide more meaning.</li>
<li>Finally - performance.  Not sure what you would consider fast or slow, but one way to determine where the code is 'slowest' is to log timestamps and see where bottlenecks might exist.  They are often not where you expect.  So, log timestamp subroutine calls throughout your code and you will know where to spend your effort.  Before and after a section of code you deem significant call a logging procedure...something like.</li>
</ol>
<pre><code>Private Sub LogTime(message As String)
   Dim timestamp As String, logEntry As String
   timestamp = Format(Now, "mm/dd/yyyy HH:mm:ss")
   logEntry = message &amp; ": " &amp; timestamp
   'Append logEntry to a text file or write them out to an excel sheet 
End Sub
</code></pre>
<p>Below is the module refactored using some of the ideas described above.  I had to stub a few procedures to get the original code to compile - so obviously, the code below does not <em>work</em>.</p>
<pre><code>Option Explicit

Private Const IMPORTANT_OFFSET As Long = 6

Private Property Get RegisterNoError() As Long
    RegisterNoError = Worksheets("LOTS").Range("C5").value
End Property

Private Property Let RegisterNoError(value As Long)
    Worksheets("LOTS").Range("C5").value = value
End Property

Private Property Get RegisterNumb() As Long
    RegisterNoError = Worksheets("LOTS").Range("D5").value
End Property

Private Property Let RegisterNumb(value As Long)
    Worksheets("LOTS").Range("D5").value = value
End Property

Sub Import_data()

Dim FilePath As Variant, FileName As Variant, TempSheetName As String, k As Integer, n As Integer, Errors As Integer, i As Integer
Dim LastRow As Long
Dim PathWorkbook As String, ProjectName As String
Dim AreaName As String, Areacode As String, AreaNumber As String
Dim wsCon As Worksheet, wsLot As Worksheet, wsReg As Worksheet

Set wsCon = Sheets("CONTROL")
Set wsLot = Sheets("LOTS")

PageVisibility (1) 'Not declared - I've added stub so that this subroutine can compile

Application.ScreenUpdating = False
Application.DisplayAlerts = False
Application.Calculation = xlCalculationManual

Dim ThisWorkBookName As String 'Identified when Option Explicit was added
ThisWorkBookName = ActiveWorkbook.Name

PathWorkbook = Application.ThisWorkbook.Path &amp; "\"
ProjectName = Left(wsCon.Cells(4, 3).value, 8) &amp; "_" &amp; (Format(wsCon.Cells(5, 3).value, "yyyy_mm_dd"))

ChDir PathWorkbook

'Check if Project exist
Dim var1 As String 'Identified when Option Explicit was added
Dim var2 As String 'Identified when Option Explicit was added

var1 = Application.ThisWorkbook.Path &amp; "\"
var2 = Left(wsCon.Cells(4, 3).value, 8) &amp; "_" &amp; (Format(wsCon.Cells(5, 3).value, "yyyy_mm_dd"))

If Dir(var1 &amp; var2, vbDirectory) = "" Then
    Dim Result As Long
    Result = MsgBox("Project " &amp; var2 &amp; " Does not exist." &amp; vbNewLine &amp; vbNewLine &amp; "Do You want to Create it?", vbYesNo + vbExclamation)
    If Result = 6 Then
        CreateProjects 'Is not declared - added a stub to make the module compile
    Else
     
    MsgBox "You Need to create the project before Importing the records", vbExclamation
    Exit Sub
                           
    End If
    
End If

wsLot.Range("B5:D5").value = 0
wsLot.Range("D9:E100").Delete Shift:=xlUp

TempSheetName = "REGISTER"
   
'Check that workbook is reset

Dim Sheet As Worksheet
For Each Sheet In Worksheets
    If TempSheetName = UCase(Sheet.Name) Then
      
    MsgBox "Reset before importing"
    Exit Sub
    End If
Next Sheet

'File opening

FilePath = Application.GetOpenFilename(FileFilter:="Excel Files (*.XLSX), *.XLSX", Title:="Select File To Be Opened")
If FilePath = False Then Exit Sub

'Animated.Show vbModeless
'Application.Wait (Now + TimeValue("0:00:05"))
'DoEvents

FileName = Mid$(FilePath, InStrRev(FilePath, "\") + 1, Len(FilePath))

Dim ControlFile As String
ControlFile = ActiveWorkbook.Name
Workbooks.Open FileName:=FilePath
Sheets("REGISTER").Copy After:=Workbooks(ControlFile).Sheets("LOTEVAL")
Windows(FileName).Activate
ActiveWorkbook.Close SaveChanges:=False
Windows(ControlFile).Activate

'Formulas to values

Set wsReg = Sheets("REGISTER")

wsReg.Unprotect

wsReg.Range("B:B").value = wsReg.Range("B:B").value '&lt;--Copies self(?)
wsReg.Range("V:V").value = wsReg.Range("V:V").value '&lt;--Copies self(?)
wsReg.Range("Y:Y").value = wsReg.Range("Y:Y").value '&lt;--Copies self(?)

LastRow = Cells.Find(What:="*", After:=Range("A1"), SearchOrder:=xlByRows, Searchdirection:=xlPrevious).Row

RegisterNumb = LastRow - IMPORTANT_OFFSET
RegisterNoError = RegisterNumb

'Error Filtering
'--------------------

ErrorProcessing 'fixed typo

'Order
'------------

PutSomeOrder LastRow

'Main Areas creation
'-------------------

wsLot.Range("A9").Formula2R1C1 = "=UNIQUE(FILTER(REGISTER!R7C3:R65536C3,REGISTER!R7C3:R65536C3&lt;&gt;""""))"

'Lot assignement
'---------------

n = IMPORTANT_OFFSET + RegisterNoError

For k = 7 To n
AreaNumber = wsLot.Cells(5, 1).value 'Assign this outside the loop, it is not modified in the loop or depend on k

If wsReg.Cells(k, "B").value &gt; 0 Then
    
    If wsReg.Cells(k, "B").value = wsReg.Cells((k - 1), "B").value Then
        wsReg.Cells(k, "AA").value = wsReg.Cells((k - 1), "AA").value
    Else
        For i = 9 To AreaNumber + 8
            If wsReg.Range("C" &amp; k).value = wsLot.Range("A" &amp; i) Then wsReg.Cells(k, "AA").value = wsLot.Range("C" &amp; i)
        Next i
    End If

wsReg.Cells(k, "AB").value = wsReg.Cells(k, "H").value
wsReg.Cells(k, "AC").value = wsReg.Cells(k, "V").value
wsReg.Cells(k, "AD").value = wsReg.Cells(k, "AA").value &amp; "_" &amp; wsReg.Cells(k, "AB").value &amp; "_" &amp; wsReg.Cells(k, "AC").value

End If

Next k

n = 8 + wsLot.Cells(5, "A").value

wsLot.Cells(9, "E").value = 7

For k = 9 To n

wsLot.Cells(k, "D").value = WorksheetFunction.CountIf(wsReg.Range("AA:AA"), wsLot.Cells(k, "C").value)

If k &gt; 9 Then wsLot.Cells(k, "E").value = wsLot.Cells(k - 1, "E").value + wsLot.Cells(k - 1, "D").value

Next k

RegisterNoError = WorksheetFunction.CountA(wsReg.Range("AA:AA"))

wsLot.Range("G9").Formula2R1C1 = "=UNIQUE(FILTER(REGISTER!R7C30:R12000C30,REGISTER!R7C30:R12000C30&lt;&gt;""""))"
wsLot.Range("E5").Formula = "=IFERROR(IF(G9&lt;&gt;"""",COUNTA(G9#),0),0)"
wsLot.Range("Q9").Formula2R1C1 = "=UNIQUE(FILTER(REGISTER!R7C30:R12000C30,REGISTER!R7C30:R12000C30&lt;&gt;""""))"
wsLot.Range("R9").Formula2R1C1 = "UNIQUE(FILTER(R:R,R:R&lt;&gt;""""))"

n = 8 + wsLot.Cells(5, "E").value

wsLot.Cells(9, "E").value = 7

For k = 9 To n

wsLot.Cells(k, "H").value = WorksheetFunction.CountIf(wsReg.Range("AD:AD"), wsLot.Cells(k, "G").value)

Next k

wsLot.Range("H8").Formula = "=MAX(H9:H3000)"

Calculate

If wsLot.Range("H8").value &gt; 3200 Then MsgBox "Warning, at least one of the lots has more than 32000 elements"

'Export errors and Registers to Project Folder
ExportErrorsAndRegistersToProjectFolder 'no longer a need for the above comment (#3)

Errors = wsLot.Range("B5").value
wsCon.Range("O3").value = 1
wsCon.Activate

MsgBox ("Ex DataBase Import Completed" &amp; vbNewLine &amp; vbNewLine _
&amp; "TOTAL EQUIPMENT IN Ex DATABASE :  " &amp; RegisterNumb &amp; vbNewLine _
&amp; "EQUIPMENT EXCLUDED DUE TO ERROR :  " &amp; Errors &amp; vbNewLine _
&amp; "TOTAL EQUIPMENT IMPORTED :  " &amp; RegisterNoError &amp; vbNewLine &amp; vbNewLine _
&amp; "The Equipment with errors have been recorded on the ERRROR_LOG. You can continue discarting those elements or correct them in the originalfile and do the Import again." &amp; vbNewLine)


'Save for Navigation
    
ActiveWorkbook.SaveAs PathWorkbook &amp; ProjectName &amp; "\NAV\" &amp; ProjectName &amp; "_Step_1.exp", FileFormat:=52
ActiveWorkbook.SaveAs PathWorkbook &amp; ProjectName &amp; "\" &amp; ProjectName &amp; ".exp", FileFormat:=52
ActiveWorkbook.SaveAs PathWorkbook &amp; ThisWorkBookName, FileFormat:=52
    
    
Call PageVisibility(2)
    
Application.DisplayAlerts = True
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic

'Unload Animated

Sheets("LOTEVAL").Activate
wsCon.Activate

End Sub

Sub ErrorProcessing()

Dim WSActual As Worksheet, WSError As Worksheet
Dim k As Integer, tempvar As Variant
Dim wsCon As Worksheet, wsLot As Worksheet, wsReg As Worksheet, wsErr As Worksheet

Set wsCon = Sheets("CONTROL")
Set wsLot = Sheets("LOTS")
Set wsReg = Sheets("REGISTER")

Set WSActual = ActiveSheet

Application.ScreenUpdating = False
Application.DisplayAlerts = False
Application.Calculation = xlCalculationManual


'Check if ERROR exists, and if so, delete it
Dim Sheet As Worksheet
For Each Sheet In ActiveWorkbook.Worksheets
     If Sheet.Name = "ERROR" Then
          Application.DisplayAlerts = False
          Sheet.Delete
          Application.DisplayAlerts = True
     End If
Next Sheet

'Create ERROR Sheet

Set WSError = Sheets("ERRORT") '&lt;--Typo?
 
WSError.Copy Before:=wsCon
ActiveSheet.Name = "ERROR"
Set WSError = ActiveSheet

Set wsErr = Sheets("ERROR")

wsErr.Cells(2, 2).value = "REGISTERS WITH ERRORS"
wsErr.Cells(5, 23).value = "ERROR CODE"

ClearAnyExistingFilters wsReg ' - DRY (#4)

'Identify the Errors for Zone, Discipline and Ex Certificate

For k = 7 To RegisterNoError + IMPORTANT_OFFSET

    wsReg.Activate
    
    LoadOKFail MeetsSuccessCriteria1(wsReg.Range("H" &amp; k).value), wsReg, "Y", k ' - DRY (#4)
    
    LoadOKFail MeetsSuccessCriteria2(wsReg.Range("T" &amp; k).value), wsReg, "Z", k ' - DRY (#4)
    
    LoadOKFail MeetsSuccessCriteria3(wsReg.Range("U" &amp; k).value), wsReg, "AA", k ' - DRY (#4)
    
    LoadOKFail MeetsSuccessCriteria4(wsReg.Range("V" &amp; k).value), wsReg, "AB", k ' - DRY (#4)

Next k

'Filter the rows with errors
Application.DisplayAlerts = False

Dim ErrorLastRowPrev As Long
ErrorLastRowPrev = IMPORTANT_OFFSET

EvaluateField wsLot, wsReg, wsErr, 2, ErrorLastRowPrev ' - DRY (#4)

ErrorLastRowPrev = HandleErrors(ErrorLastRowPrev - 1, wsErr, wsLot, "Id or record Missing")  ' - DRY (#4)

'Zone Errors
EvaluateField wsLot, wsReg, wsErr, 25, ErrorLastRowPrev ' - DRY (#4)

ErrorLastRowPrev = HandleErrors(ErrorLastRowPrev, wsErr, wsLot, "Zone Field not valid")  ' - DRY (#4)

'Discipline Errors
EvaluateField wsLot, wsReg, wsErr, 26, ErrorLastRowPrev ' - DRY (#4)

ErrorLastRowPrev = HandleErrors(ErrorLastRowPrev, wsErr, wsLot, "Discipline not valid")  ' - DRY (#4)

'Errores de Ex cert
EvaluateField wsLot, wsReg, wsErr, 27, ErrorLastRowPrev ' - DRY (#4)

ErrorLastRowPrev = HandleErrors(ErrorLastRowPrev, wsErr, wsLot, "Ex protection type not valid")  ' - DRY (#4)

'Risk Level Errors
EvaluateField wsLot, wsReg, wsErr, 28, ErrorLastRowPrev ' - DRY (#4)

ErrorLastRowPrev = HandleErrors(ErrorLastRowPrev, wsErr, wsLot, "Risk level not valid")  ' - DRY (#4)

wsLot.Cells(5, "B").value = ErrorLastRowPrev - IMPORTANT_OFFSET

'End

Application.DisplayAlerts = True
Application.Calculation = xlCalculationAutomatic
WSActual.Activate

End Sub

Sub PutSomeOrder(LastRow2 As Long)

Dim ws As Worksheet: Set ws = ThisWorkbook.Worksheets("REGISTER")

    With ws.Sort
        .SortFields.Clear
        .SortFields.Add Key:=ws.Range("C7"), Order:=xlAscending
        .SortFields.Add Key:=ws.Range("H7"), Order:=xlAscending
        .SortFields.Add Key:=ws.Range("T7"), Order:=xlAscending
        .SetRange ws.Range("A7:AH" &amp; LastRow2)
        .Apply
    End With

End Sub
'EvaluateField needs a better name
Private Sub EvaluateField(wsLot As Worksheet, wsReg As Worksheet, wsErr As Worksheet, field As Long, ErrorLastRow As Long)
On Error Resume Next
    With wsReg.Range("A7:AD" &amp; RegisterNoError)
        .AutoFilter field:=field, Criteria1:="FAIL"
        .SpecialCells(xlCellTypeVisible).Cells.Copy
        wsErr.Rows(ErrorLastRow + 1).PasteSpecial
        .Offset(1, 0).SpecialCells(xlCellTypeVisible).EntireRow.Delete
    End With
On Error GoTo 0

ClearAnyExistingFilters wsReg ' - DRY (#4)

End Sub

Private Sub ClearAnyExistingFilters(wsReg As Worksheet)
  On Error Resume Next
    wsReg.ShowAllData
  On Error GoTo 0
End Sub

'MeetsSuccessCriteriaX functions need a more meaningful name

Private Function MeetsSuccessCriteria1(value As Variant) As Boolean
 MeetsSuccessCriteria1 = "Z0" Or value = "Z1" Or value = "Z2"
End Function

Private Function MeetsSuccessCriteria2(value As Variant) As Boolean
 MeetsSuccessCriteria2 = value = "Instrument" Or value = "Electrical"
End Function

Private Function MeetsSuccessCriteria3(value As Variant) As Boolean
 MeetsSuccessCriteria3 = value = "Ex d" Or value = "Ex e" Or value = "Ex n" Or value = "Ex p" Or value = "Ex i"
End Function

Private Function MeetsSuccessCriteria4(value As Variant) As Boolean
 MeetsSuccessCriteria4 = value = "High" Or value = "Medium" Or value = "Low"
End Function

Private Sub LoadOKFail(ByVal isOK As Boolean, ByRef wsReg As Worksheet, ByVal columnID As String, ByVal rowIndex As Integer)
If isOK Then
    wsReg.Range(columnID &amp; rowIndex).value = "OK"
Else
    wsReg.Range(columnID &amp; rowIndex).value = "FAIL"
End If

End Sub
Private Function HandleErrors(ByVal errLastRowPrev As Long, ByRef wsErr As Worksheet, ByRef wsLot As Worksheet, ByVal message As String) As Long
'Recalculate ErrorLastRow
Dim errLastRow As Long
errLastRow = wsErr.Cells.Find(What:="*", After:=Range("A1"), SearchOrder:=xlByRows, Searchdirection:=xlPrevious).Row

    Dim thisCatErrs As Long
    HandleErrors = errLastRow
    If errLastRow &lt; errLastRowPrev + 1 Then
        'No Errors
        errLastRow = errLastRowPrev
        thisCatErrs = errLastRow - errLastRowPrev
    Else
        'Errors
        thisCatErrs = errLastRow - errLastRowPrev
        wsErr.Range("W" &amp; (errLastRowPrev + 1) &amp; ":W" &amp; errLastRow).value = message
        RegisterNoError = RegisterNoError - (thisCatErrs)
        HandleErrors = errLastRow
    End If

End Function

'Stubs
Public Sub ExportErrorsAndRegistersToProjectFolder()
End Sub

Public Sub PageVisibility(value As Long)
End Sub

Public Sub CreateProjects()
End Sub
</code></pre>
    </div>