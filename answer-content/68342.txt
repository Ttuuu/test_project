<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>var mode = function(arr){
</code></pre>

<p>It's nice to name your functions for debugging purposes, if none other. You could replace this with a function declaration, e.g. <code>function mode(arr) {</code> or just name the function expression: <code>var mode = function mode(arr) {</code></p>

<pre><code>    var numMapping = {};
    for(var i = 0; i &lt; arr.length; i++){
        if(numMapping[arr[i]] === undefined){
            numMapping[arr[i]] = 0;
        }        
            numMapping[arr[i]] += 1;
    }
</code></pre>

<p>I would use <code>arr.forEach()</code>, since it lets you operate on the elements directly. You could also make the mapping a one-liner(but both of these things are more nitpicks/personal style choice)</p>

<pre><code>    var greatestFreq = 0;
    var mode;
    for(var prop in numMapping){
        if(numMapping[prop] &gt; greatestFreq){
            greatestFreq = numMapping[prop];
            mode = prop;
        }
    }
    return parseInt(mode);
}
</code></pre>

<p>You can do this whole part during your first loop! Also, <code>parseInt</code>, while safe in this case, is not generally safe to use without a radix(you'd have linters complaining about this usage here). You could use <code>parseInt(mode, 10)</code>, or some ToNumber() transformation like <code>+mode</code>(<a href="http://es5.github.io/#x11.4.6" rel="noreferrer">http://es5.github.io/#x11.4.6</a>).</p>

<p>Here's a revised example:</p>

<pre><code>var mode = function mode(arr) {
    var numMapping = {};
    var greatestFreq = 0;
    var mode;
    arr.forEach(function findMode(number) {
        numMapping[number] = (numMapping[number] || 0) + 1;

        if (greatestFreq &lt; numMapping[number]) {
            greatestFreq = numMapping[number];
            mode = number;
        }
    });
    return +mode;
}
</code></pre>
    </div>