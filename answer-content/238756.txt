<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, this is common practice. If you have heavy components you can, for example, separate the form and the heavy components. The form takes care of its state. This way you don't need to re-render everything on every state change. You could alternatively use <code>React.memo</code> for functional components, <code>PureComponent</code> or <code>shouldComponentUpdate</code> for class. You shouldn't use the latter too often though since you can easily introduce bugs.</p>

<p>Btw you're accidentally mutating state. This is not good since you should only use setState to change the state. You need to copy the old state into a new variable:</p>

<pre><code>let property = e.target.getAttribute("name");
let user = { ...this.state.user };
user.info = {
  ...user.info,
  [property]: e.target.value,
};
this.setState({ user });
</code></pre>

<p>Here you create a new user object and inside of that a new info object. Nested objects inside state are always annoying for this reason. You can also use a library like lodash for deep cloning. Or you use an immutibilaty library like immer, which is probably the best way</p>
    </div>