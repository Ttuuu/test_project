<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><em>To enforce a collection-like functionality would I implement a custom made  ICollection interface in each container class.</em></p>
</blockquote>

<p>While an <code>ICollection</code> interface is nice in theory, in practice it doesn't really play nicely with how VBA implements enumerables. The single main advantage of using an object collection is its ability to leverage <code>[_NewEnum]</code> and be iterated with a <code>For Each</code> loop... but you can't have that functionality through an interface.</p>

<p>What's nice about <code>ICollection</code> is that it abstracts away the notion of <em>something that can act as a collection</em>, enabling client code to leverage polymorphism and work with a <code>FooCollection</code> or a <code>BarCollection</code> seamlessly, or even work with a <code>Queue</code> or a <code>Stack</code> custom collection that would implement the same interface. But here we're looking at a <code>Cars</code> collection, and if our client code is written against <code>ICollection</code> then we lose everything that's useful about the custom collection (e.g. filtering capabilities), and might as well be working with some <code>VBA.Collection</code> instance.</p>

<blockquote>
  <p><em>But the clsCars class is not only responsible for storing clsCar objects</em></p>
</blockquote>

<p>See, with an <code>ICollection</code> interface you're forced to have this:</p>

<pre><code>Public Sub Add(ByRef Item as Object)
End Sub
</code></pre>

<p>By the way, that should be <code>ByVal</code>, not <code>ByRef</code>. Anyway, the problem with that is that you can't legally have this:</p>

<pre><code>Private Sub ICollection_Add(ByRef Item as clsCar)
    ' Actual implementation...
End Sub
</code></pre>

<p>Because the signature mismatches that of the interface: <code>Item</code> must be <code>Object</code>, otherwise the interface contract isn't fulfilled and the code can't compile.</p>

<p>I'd just ditch the <code>ICollection</code> interface and make a <code>Cars</code> collection that requires <code>Car</code> items to be added.</p>

<p>That would instantly shrink the <code>Cars</code> class by half, and enable goodies such as these:</p>

<pre><code>'@DefaultMember
Public Property Get Item(ByVal index As Variant) As Object
    Set Item = internal.Item(index)
End Property

'@Enumerator
Public Property Get NewEnum() As IUnknown
    Set NewEnum = internal.[_NewEnum]
End Property
</code></pre>

<p>If you aren't using <a href="http://www.github.com/rubberduck-vba/Rubberduck" rel="nofollow noreferrer">Rubberduck</a>, you might not know that these special <code>@Comments</code> actually control hidden member attributes. The <code>@DefaultMember</code> annotation makes these two statements equivalent:</p>

<pre><code>Set theCar = allCars.Item("foo")
Set theCar = allCars("foo")
</code></pre>

<p>And the <code>@Enumerator</code> annotation makes this code legal:</p>

<pre><code>For Each theCar In allCars
    Debug.Print theCar.Model
Next
</code></pre>

<p>By convention, the <code>Item</code> property if a collection class is that class' <em>default member</em>.</p>

<hr>

<p>I would have made <code>Count</code> and <code>Item</code> members be <code>Property Get</code> procedures, not <code>Function</code>. The reason <code>VBA.Collection</code> has them as <code>Function</code> procedures is historical; <code>Count</code> as a method implies much more work going on than what's actually happening, and <code>Item</code> simply makes complete sense as a <em>default property</em>.</p>

<hr>

<p>As for the filtering, consider taking inspiration from .NET here - now <em>there's</em> a legit case for polymorphism!</p>

<pre><code>'@Interface IPredicate
Option Explicit

Public Function IsTrue(ByVal obj As Object, ByVal value As Variant) As Boolean
End Function
</code></pre>

<p>Now you can have a <code>MatchesManufacturerPredicate</code> that might look like this:</p>

<pre><code>Option Explicit
Implements IPredicate

Private Function IsTrue(ByVal obj As Object, ByVal value As Variant) As Boolean
    If Not TypeOf obj Is Car Then Error.InvalidArgumentException
    IsTrue = (obj.Manufacturer = value)
End Function
</code></pre>

<p>Then the <code>Cars</code> collection can have a <code>FilterBy(ByVal predicate As IPredicate)</code> method that simply runs the collection through the encapsulated function!</p>

<pre><code>Set toyotas = allCars.FilterBy(New MatchesManufacturerPredicate, "Toyota")
Set fords = allCars.FilterBy(New MatchesManufacturerPredicate, "Ford")
Set p911s = allCars.FilterBy(New MatchesModelPredicate, "911")
Set oldCars = allCars.FilterBy(New LessThanYearPredicate, 2009)
</code></pre>

<p>With a single <code>FilterBy</code> method on the collection, you can now have infinite filtering possibilities, as long as you're willing to encapsulate the filtering function into its own class.</p>
    </div>