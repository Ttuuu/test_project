<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>While using <code>sys.argv</code> is fine for a first version of a program, you should give it a proper CLI. It would be nice if multiple latex files could be passed (since it is common to split a large project into multiple files) and also to specify the source and target languages. For this you can use <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer"><code>argparse</code></a>:</p>

<pre><code>import argparse

def parse_args(args=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("--from", default="DE", help="Language of the source document(s)")
    parser.add_argument("--to", default="EN", help="Language of the target document")
    parser.add_argument("file", nargs="+", help="Path(s) to the latex file(s)")
    return parser.parse_args(args)

if __name__ == "__main__":
    args = parse_args()
    print(args.to, args.from, args.file)
    ...
</code></pre>

<p>This even gives you a nice usage message when calling the script with the option <code>-h</code> or <code>--help</code>:</p>

<pre><code>usage: script_name.py [-h] [--from FROM] [--to TO] file [file ...]

positional arguments:
  file         Path(s) to the latex file(s)

optional arguments:
  -h, --help   show this help message and exit
  --from FROM  Language of the source document(s)
  --to TO      Language of the target document
</code></pre></li>
<li><p>Now, let's get to your "hashing". <a href="https://en.wikipedia.org/wiki/Birthday_attack#Mathematics" rel="nofollow noreferrer">When randomly selecting from <span class="math-container">\$H = 9999 - 1111 = 8888\$</span> values, it takes on average <span class="math-container">\$Q(H) = \sqrt{\tfrac{\pi}{2}H}\approx 118.16\$</span> draws until you get a number twice.</a> In other words, if you have more than about 120 elements, you will overwrite some. And that number is actually less than half of that because you separately hash <code>\begin</code> and <code>\end</code>.</p>

<p>One way to avoid collisions is to just keep on counting up. For this you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a>, which produces an infinite stream of increasing numbers, starting with the argument (or <code>0</code> if not given), when being iterated:</p>

<pre><code>from itertools import count

counter = count(1111)
assert len(searchObj1) + len(searchObj2) &lt;= 8888, "Too many objects to hash"
list1 = ['X#X{}'.format(i) for _, i in zip(searchObj1, counter)]
list2 = ['X#X{}'.format(i) for _, i in zip(searchObj2, counter)]
</code></pre>

<p>Another way to make it less likely is to extend the range. And at that point you might as well use the built-in <a href="https://docs.python.org/3/library/functions.html#hash" rel="nofollow noreferrer"><code>hash</code></a> function:</p>

<pre><code>list1 = ['X#X{}'.format(hash(x)) for x in searchObj1]
</code></pre>

<p>In this case you would need to relax the <code>and len(line) == 7</code> requirement later.</p></li>
<li><p>When opening files, you should use the <a href="http://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer"><code>with</code></a> keyword to ensure they are properly closed, even if an exception occurs somewhere in the block:</p>

<pre><code>with open(fileInputName) as fileIn, open(fileOutName, "w") as fileOut:
    ...
</code></pre></li>
<li><p>You should also think about better names. Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommend using <code>lower_case</code> instead of <code>camelCase</code>. In addition, <code>list1</code>, <code>searchObj1</code>, <code>d2</code> are all not very good names.</p></li>
<li><p><a href="https://stackoverflow.com/questions/39675898/is-python-string-concatenation-bad-practice">Doing string addition can be very costly</a>, because in Python strings are immutable. This means that when you do <code>str_a + str_b</code>, Python has to allocate a new string object of length <code>len(str_a) + len(str_b)</code> and then copy the content of both strings into that new array. This takes more time the longer the strings are and the more often you do it. Since you are adding strings of the length of a full document and are doing so in a loop, this can be very slow.</p>

<p>Instead, build a <code>list</code> and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> it at the end:</p>

<pre><code>translated = []
for line in fileIn:
    #print(line)
    if line.startswith("X#X") and len(line) == 7:
        translated.append(line)
    elif not line.strip():
        translated.append('')
    else:
        translated.append(pydeepl.translate(line, args.from, args.to))
translated = '\n'.join(translated)
</code></pre>

<p>Note that I directly iterate over the file (since files are iterable), meaning that this program is less limited by the amount of memory available. However this means that the progress bar does not work anymore (and I therefore removed it here), because it needs to know how many lines there are. You can use something like this to add it back: <a href="https://blog.nelsonliu.me/2016/07/29/progress-bars-for-python-file-reading-with-tqdm/" rel="nofollow noreferrer">https://blog.nelsonliu.me/2016/07/29/progress-bars-for-python-file-reading-with-tqdm/</a></p></li>
</ul>
    </div>