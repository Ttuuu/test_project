<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some problems in your code structure and testability.</p>
<h1>Provide a testable function that covers the given task completely</h1>
<p>If you want to test your code against the requirements you will need a function</p>
<pre><code>def is_valid_date_string(s):
    #[...]
</code></pre>
<p>that you can use in testing, e. g.</p>
<pre><code>assert is_valid_date_string("31/02/2020") == True
</code></pre>
<p>that function shall not contain I/O (other than logging).
So we restructure your main code like</p>
<pre><code>def is_valid_date_string(string):
    # DD/MM/YYYY
    date_regex = re.compile(r"([0-2]\d|3[01])/(0\d|1[0-2])/([12]\d{3})")
    match = date_regex.search(string)
    if match:
        day = int(match.group(1))
        month = int(match.group(2))
        year = int(match.group(3))
        return check_date(day, month, year)
    return False

if __name__ == '__main__':
    string = "31/02/2020"
    if is_valid_date_string(string):
        print(string)
    else:
        print('Invalid Date!')
</code></pre>
<p>Now we can introduce more tests</p>
<pre><code>if __name__ == '__main__':
    assert True == is_valid_date_string("01/01/2020")

    # false
    assert False == is_valid_date_string("00/01/2020")
    assert False == is_valid_date_string("01/00/2020")
    assert False == is_valid_date_string("01/01/0000")
    assert False == is_valid_date_string("31/04/2020")
    assert False == is_valid_date_string("30/02/2020")
    assert False == is_valid_date_string("31/02/2020")

    # leap
    assert False == is_valid_date_string("29/02/2001")
    assert True == is_valid_date_string("29/02/2004")
    assert False == is_valid_date_string("29/02/2100")
    assert True == is_valid_date_string("29/02/2400")

    # format
    assert False == is_valid_date_string("asdf")
    assert False == is_valid_date_string("1/2/2020")
</code></pre>
<p>We see two cases failing. Which part is responsible? Regex or check_date?
check_date does not check any date but the upper limit of days only. Hence either the name is wrong or the implementation.
check_date does silently assume its parameters are somewhat correct which may! not be enforced by the usage. This real danger!
We also cannont test the function properly and we definitely shall not expose it. A user might get date as integer triple from somewhere and use your function to verify like</p>
<pre><code>check_date(5, 90, 999)
</code></pre>
<p>We also cannot test it as we do not know the contracts</p>
<pre><code>assert False == check_date(5, 90, 999)
assert False == check_date(35, 9, 999)
</code></pre>
<p>One fails, the other test is successful.</p>
<p>We shall incorporate the code into our is_valid_date_string function directly (or as private function).</p>
<p>Bottom line - do not mess with date/time manually, use a library</p>
    </div>