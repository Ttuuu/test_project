<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Magic number</h1>

<pre><code>ALPHABET_LENGTH = 26
</code></pre>

<p>You don't need to hard-code <code>ALPHABET_LENGTH = 26</code> in your program.  Let Python do the work for you, with <code>ALPHABET_LENGTH = len(ascii_lowercase)</code></p>

<hr>

<h1>Avoid String concatenation; use built-in functions</h1>

<p>String concatenation is very slow.</p>

<pre><code>new_str = new_str + encoded_char
</code></pre>

<p>AlexV's append / join isn't much better.</p>

<p>Python comes with a <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate</code></a>, function which will do a letter-for-letter substitution in a string, which is exactly what you want to do.  As a built-in, it is blazingly fast compared to processing each letter individually:</p>

<pre><code>&gt;&gt;&gt; help(str.translate)
Help on method_descriptor:

translate(self, table, /)
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
</code></pre>

<p>It has a <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="noreferrer"><code>str.maketrans</code></a> function for creation of the translation table:</p>

<pre><code>&gt;&gt;&gt; help(str.maketrans)
Help on built-in function maketrans:

maketrans(x, y=None, z=None, /)
    Return a translation table usable for str.translate().

    If there is only one argument, it must be a dictionary mapping Unicode
    ordinals (integers) or characters to Unicode ordinals, strings or None.
    Character keys will be then converted to ordinals.
    If there are two arguments, they must be strings of equal length, and
    in the resulting dictionary, each character in x will be mapped to the
    character at the same position in y. If there is a third argument, it
    must be a string, whose characters will be mapped to None in the result.
</code></pre>

<p>Using these functions, you can easily construct a Caesar cipher encoder-decoder:</p>

<pre><code>from string import ascii_lowercase, ascii_uppercase

def caesar_cipher(shift: int):
    shift %= len(ascii_lowercase)
    return str.maketrans(ascii_lowercase + ascii_uppercase,
                         ascii_lowercase[shift:] + ascii_lowercase[:shift] +
                         ascii_uppercase[shift:] + ascii_uppercase[:shift])

def encode_string(s: str, n: int) -&gt; str:
    """Your docstring here"""

    cipher = caesar_cipher(n)
    return s.translate(cipher)
</code></pre>

<p>The real speed will come from not creating a new translation table on each call.</p>

<pre><code>if __name__ == "__main__":
    import doctest, timeit

    doctest.testmod()

    print(timeit.timeit(
        "'Caesar Cipher'.translate(cipher)",
        setup="from __main__ import caesar_cipher; cipher = caesar_cipher(2)",
        number=100000)
    )
</code></pre>

<p>Net: 10 times faster</p>
    </div>