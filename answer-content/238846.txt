<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The comment in the <code>ISBN</code> class should rather be outside the class declaration, and it should contain a few words for the human reader, such as the expanded abbreviation and the Wikipedia page, to make it easy to get additional information about the topic of ISBNs.</p>

<p>Storing an ISBN as 5 numbers is wrong. If the length of these numbers doesn't sum up to 13, you cannot be sure where to add the zeroes. The <a href="https://en.wikipedia.org/wiki/International_Standard_Book_Number" rel="nofollow noreferrer">Wikipedia article</a> contains a table of example ISBN-10 numbers, and some of them have leading digits.</p>

<p>The variable names <code>isbn_field1</code> are bad. The word <code>isbn</code> is not necessary since that information is given by the class <code>ISBN</code> already. Therefore <code>field1</code> is better than <code>isbn_field1</code>. But what is <code>field1</code>, what does it mean? The Wikipedia article gives nice names to these fields, and so should your code.</p>

<p>The characters between the digits are not "minus signs" (as you say) but hyphens.</p>

<p>The no-argument constructor is wrong. There should be no way to construct an ISBN object without specifying all its parts. Having a single "best default" is simply not possible for an ISBN. You definitely don't want to convert all your programming mistakes to a book about analytic geometry.</p>

<p>In the constructor with the <code>const unsigned int&amp;</code> parameters, the <code>const&amp;</code> is not necessary. Integer values are typically passed directly instead of referencing them since they are one machine word long, and the computer can process them quickly. References make your code run slower in this case. For larger types such as <code>std::vector&lt;std::vector&lt;ISBN&gt;&gt;</code> it makes sense to use references instead of simple values.</p>

<p>In the <code>is_valid_isbn</code> function, you should add spaces around the tokens in <code>i=0</code>. Most C++ programmers are used to read this as <code>i = 0</code>.</p>

<p>In the same line, the parentheses around <code>digits.length()</code> are not necessary.</p>

<p>Instead of calling <code>std::stoi</code>, you can also write <code>digits[i] - '0'</code>, which gives you the numeric value of a digit character. Which reminds me that some of the characters might not be digits at all. Your code should skip them and later verify that the string contained 13 digits in total.</p>

<p>In the <code>ISBN::ISBN</code> constructor, instead of checking whether the last field has length 1, you can just check whether <code>e &lt; 10</code>. This is simpler and faster.</p>

<p>When validating multiple values, you should validate them in reading order. Start with the first field, and validate the last field last.</p>

<p>You didn't test your code by calling <code>ISBN{0, 0, 0, 0, 0}</code>.</p>

<p>When you <code>throw</code> something from your code, it should be a proper exception from the C++ standard library, such as <code>std::invalid_argument</code>.</p>

<p>Instead of the verbose <code>std::string temp; temp = std::to_string(e); temp.length() != 1</code>, you can simply write <code>std::to_string(e).length() != 1</code>. This way you don't have to think about a better variable name instead of <code>temp</code>. The name <code>temp</code> is always a bad variable name since it doesn't tell enough of a story. (Well, except if you use it as an abbreviation for <em>temperature</em>, but that's not the case here.)</p>

<p>The exception strings should not include a newline character. That character should be added when the exception is printed in a log file. If you want to save the exception somewhere else, the newline is probably wrong.</p>

<p>The <code>main</code> program is pretty useless. There is no way to enter an ISBN and validate it. You should rather define the following functions to get some automated tests:</p>

<pre class="lang-cpp prettyprint-override"><code>void assert_valid_isbn(const std::string &amp;isbn)
{
    /* TODO */
}

void assert_invalid_isbn(const std::string &amp;isbn, const std::string &amp;expected_error)
{
    /* TODO */
}
</code></pre>
    </div>