<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My main issue with this code is the function interface as you already identified yourself. These are the most glaring issues in my opinion:</p>

<ul>
<li>Parameter names are not clear. Names like <code>i</code> and <code>n</code> might be good enough in very short, self-contained loops/closures, but not as function parameters. I similarly don't like abbreviations like <code>orig</code>, and <code>cur</code> because the full words are not much longer. Always consider you first see this function, is it <code>original</code> or <code>origin</code>, is it <code>current</code> or <code>cursor</code>? Your interface should be clear without reading the code.</li>
<li>You are always passing a full string slice while you know you will only read from a certain offset (<code>i</code>).</li>
<li>Passing <code>n</code> is redundant, as almost any check that you do against this can be replaced by checking if you reached the end of <code>orig</code>.</li>
<li>Similarly but less obvious passing <code>i</code> is redundant. The obvious part is related to the first point, if you only pass the slice this represents offset <code>0</code>. Now, you also use this as a cache key, but that's not necessary. If instead of passing the full slice you only push the 'remaining' string you can use this as cache key to exactly the same effect.</li>
<li>You insert <code>true</code> in the cache, which requires it to be a <code>map</code>, but there are several reasons why this is useless. I'd just use a <code>HashSet</code> that is only updated for <code>false</code>. Reasons are as follows:

<ul>
<li>If you found a 'true', the function finished anyway.</li>
<li>When indexed by usize and with this judging system you can't use the cache for multiple string inputs (and never for multiple word inputs). So the <code>true</code> cache is even useless here.</li>
<li>But even if you could re-use the cache, the true adds little, because you can quickly prune the false branches already.</li>
</ul></li>
<li>You explicitly end with <code>return false;</code>, it is more idiomatic to simply say <code>false</code> (without the semicolon).</li>
<li>You have a whole construct that basically loops over a splitted version of your input. This can be significantly simplified by using the built-in <code>split_at</code>.</li>
</ul>

<p>Based on all this I refactored your original algorithm to the following:</p>

<pre><code>use std::collections::HashSet;
impl Solution {
    fn dfs(remaining: &amp;str, words: &amp;HashSet&lt;String&gt;, mut cache: &amp;mut HashSet&lt;String&gt;) -&gt; bool {
        for i in 1..remaining.len() + 1 {
            let (word, remaining) = remaining.split_at(i);
            if words.contains(word.into())
                &amp;&amp; !cache.contains(remaining.into())
                &amp;&amp; Self::dfs(remaining, &amp;words, &amp;mut cache)
            {
                return true;
            }
        }
        if remaining.len() == 0 {
            true
        } else {
            cache.insert(remaining.into());
            false
        }
    }
    pub fn word_break(s: String, word_dict: Vec&lt;String&gt;) -&gt; bool {
        let set = word_dict.into_iter().collect::&lt;HashSet&lt;String&gt;&gt;();
        let mut cache = HashSet::new();
        Self::dfs(&amp;s.as_str(), &amp;set, &amp;mut cache)
    }
}
</code></pre>

<p>This may not yet be ideal, I for example don't like <code>remaining</code> and <code>dfs</code> as names. Other improvements you could try but are honestly overkill for a braintease exercise:</p>

<ul>
<li>It seems somewhat weird to pass <code>words</code> and <code>cache</code> as a parameter. More idiomatic would be to make a <code>WordBreakChecker</code> struct. You provide it with a <code>new</code> initializer that sets the cache and words, and then have a single <code>dfs</code> (or better <code>check</code>) function that only takes the string as input.</li>
<li>In my example I still index the slice explicitly by using a for loop and <code>split_at</code>. That's good enough for here, but it may be interesting practice to implement the Iterator trait to iterate over these combinations directly (honestly, it may exist already in std or a crate, I didn't look to hard).</li>
</ul>
    </div>