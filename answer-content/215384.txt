<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's not too much to say about your implementation, though I'm not sure declaring <code>riffle</code> as a lambda provides any benefit instead of just defining it as a standard function.</p>

<p>Instead of storing the previous element of the iteration and using it to call the block, you should check only call the block if you are not on the last element of the enumerable (if possible, of course, there are some cases when it isn't).</p>

<p>While you can use a mixture of a custom enumerator and a block, it's not the nicest way to do things. I'd recommend instead passing in two lambdas (or a lambda and a block) so that it is immediately clear that the first block follows the second.</p>

<pre class="lang-ruby prettyprint-override"><code>def riffle(enumerable, a, b)
  enumerable.each_with_index  do |x, i|
    a.call x
    b.call x unless i + 1 == enumerable.size
  end
end

riffle [1, 2, 3],
  -&gt; i { p [i, :IN] },
  -&gt; i { p [i, :OUT] }
</code></pre>

<p>This gives the output:</p>

<pre><code>[1, :IN]
[1, :OUT]
[2, :IN]
[2, :OUT]
[3, :IN]
=&gt; [1, 2, 3]
</code></pre>
    </div>