<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Question</h2>

<p>Why not just use existing containers so you don't need to manage anything.</p>

<pre><code>class ObjectQueue
{
    private:
        std::unordered_map&lt;K, V&gt;   container;    // container to hold object
        std::list&lt;V*&gt;              list;         // list to make your queue?
};
</code></pre>

<h2>Limiting Observation</h2>

<p>Your <code>Object</code> type can't be any object. It has to have a member <code>position</code> that acts as the key in the container. The type of this key has to be <code>glm::ivec3</code>which is a bit limiting.</p>

<pre><code>glm::ivec3 position = newObject.position;
</code></pre>

<p>Normally we would allow the container to specialize the key or provide an access function to get the key.</p>

<pre><code>template&lt;typename V, typename K = typename V::Key, typename F = std::function&lt;K(V const&amp;)&gt;&gt;
class MyContainer
{
      // In Here
      // V is the object you are storing
      // K is the key type used.
      //       By default this is defined in V as V::Key
      //       But can be overridden if the V type does not have a Key type.
      // F Is the type of the function that is used to retrieve the Key
      //       from an object of type V.
      //

      // Now we provide a constructor
      // That sets up the key getter method.
      // We can default it to return the position member of object.
      MyContainer(F&amp;&amp; keyGetter = [](V const&amp; o){return o.position})
          : kyeGetter(std::move(keyGetter))
      {}

      bool insert(V&amp;&amp; object) {
          K    key    = keyGetter(object);
          auto insert = m_container.emplace(std::piecewise_construct,
                                            std::forward_as_tuple(std::move(key)),
                                            std::forward_as_tuple(std::move(newObject)));

          if (insert.first) { // otherwise it was not inserted.
                              // You may want it in your list twice
                              // But you have to remember that a container item
                              // may have more than one entry in the list.
             m_list.emplace_back(&amp;insert.second);
          }
          return insert.first;
     }

};
</code></pre>

<h2>Some Code Review</h2>

<p>Your move operations are acting more like a copy:</p>

<pre><code>ObjectQueueNode(ObjectQueueNode&amp;&amp; orig) noexcept
    : position(orig.position),        // This is a copy
    previous(orig.previous),          // This is a copy (but a pointer so don't care)
    next(orig.next)                   // This is a copy (but a pointer)
{
    orig.previous = nullptr;
    orig.next = nullptr;
}
ObjectQueueNode&amp; operator=(ObjectQueueNode&amp;&amp; orig) noexcept
{
    position = orig.position;        // This is a copy. Add std::move
    previous = orig.previous;
    next = orig.next;

    orig.previous = nullptr;
    orig.next = nullptr;

    return *this;
}
</code></pre>

<p>The more standard implementation is:</p>

<pre><code>ObjectQueueNode(ObjectQueueNode&amp;&amp; orig) noexcept
    : previous(nullptr)
    , next(nullptr)
{
    swap(orig);
}
ObjectQueueNode&amp; operator=(ObjectQueueNode&amp;&amp; orig) noexcept
{
    swap(orig);

    orig.previous = nullptr;
    orig.next     = nullptr;

    return *this;
}
</code></pre>

<hr>

<p>This is a long windid:</p>

<pre><code>struct PositionNode : public ObjectQueueNode&lt;PositionNode&gt;
{
    PositionNode(const glm::ivec3&amp; position)
        : ObjectQueueNode(position)
    {}
};
</code></pre>

<p>Can be simplified to:</p>

<pre><code>using PositionNode = ObjectQueueNode&lt;PositionNode&gt;;
</code></pre>

<hr>

<p>These two conditions are the same:</p>

<pre><code>    else if (m_container.size() == 1)
    {
        assert(m_initialObjectAdded &amp;&amp; m_recentObjectAdded);
        Object&amp; addedObject = m_container.emplace(std::piecewise_construct,
            std::forward_as_tuple(position),
            std::forward_as_tuple(std::move(newObject))).first-&gt;second;

        addedObject.previous = m_initialObjectAdded;
        m_initialObjectAdded-&gt;next = &amp;addedObject;
        m_recentObjectAdded = &amp;addedObject;
    }
    else if (m_container.size() &gt; 1)
    {
        assert(m_initialObjectAdded &amp;&amp; m_recentObjectAdded);
        Object&amp; addedObject = m_container.emplace(std::piecewise_construct,
            std::forward_as_tuple(position),
            std::forward_as_tuple(std::move(newObject))).first-&gt;second;

        addedObject.previous = m_recentObjectAdded;
        m_recentObjectAdded-&gt;next = &amp;addedObject;
        m_recentObjectAdded = &amp;addedObject;
    }
</code></pre>
    </div>