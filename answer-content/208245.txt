<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@janos Answer is great, but it was easier for me to think about it with one less bitwise operations.</p>

<pre><code>def subsets(s):
    """
    :type s: list[]
    """
    sets = []
    for i in range(2**len(s)):
        subset = []
        for j in range(len(s)):
            if i &amp; (1 &lt;&lt; j) &gt; 0:
                subset.append(s[j])
        sets.append(subset)
    return sets
</code></pre>

<p><strong>Explanation:</strong></p>

<p>So we know there are <span class="math-container">\$2^n\$</span> subsets in a set where <span class="math-container">\$n\$</span> is the size of the set. So we loop through all those numbers: <code>for i in range(2**len(s)):</code>.</p>

<p>This gives us a range <span class="math-container">\$0 - 2^n\$</span> which corresponds to these binary numbers (example of a set of size 3):</p>

<pre><code>0 = 000
1 = 001
2 = 010
3 = 011
4 = 100
5 = 101
6 = 110
7 = 111
...
n - 1 = 0b(n-1) 
</code></pre>

<p>As you can see, the binary representation is every subset possible where 1 means it is in the set and 0 means it is not.</p>

<p>Now we just need to use these indexes to find out what should be in each set. 
(While under the hood the numbers are stored as binary, if you try printing them you'll see an int.)</p>

<p>So we'll do a nested for loop:  <code>for j in range(len(s)):</code></p>

<p>Here we do need to do a bitwise operation: <code>i &amp; (1 &lt;&lt; j) &gt; 0</code> where <code>i</code> is the current index of the loop described earlier. <code>j</code> is the index of which element in the second loop we're at.</p>

<p><code>1 &lt;&lt; j</code> just converts the index to the binary representation. For example, the first element (at index 0): <code>1 &lt;&lt; 0 = 001</code>, or the second <code>1 &lt;&lt; 1 = 010</code>, etc.</p>

<p>The <code>&amp;</code> operator just makes sure the indexes match up. <code>000 &amp; 101 = 0</code> but <code>100 &amp; 101 = 100</code>. So anytime it is greater than 0, it means we've come across an element that belongs in our set. </p>

<p>Let's take the set <code>{a, b, c}</code> and loop through our range. At 0, <code>0 &amp; anything = 0</code>, so we have the empty set. </p>

<p>Let's skip to i = 6: <code>6 &amp; (1 &lt;&lt; 0) &gt; 0</code> returns false because in binary: <code>110 &amp; 001 = 0</code>. But the second iteration (j = 1) <code>6 &amp; (1 &lt;&lt; 1) &gt; 0</code> returns true (<code>110 &amp; 010 = 1</code>). And it will for the 3rd element too. Thus giving you the subset {b, c}. </p>

<p>The runtime of this algorithm is <span class="math-container">\$O(2^n)\$</span> if that isn't clear! Hope this helps! </p>
    </div>