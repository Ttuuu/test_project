<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I really see no point in using <a href="https://sourcemaking.com/design_patterns/decorator" rel="nofollow noreferrer">decorator pattern</a> in your case since <code>WebHandler</code> doesn't actually decorate <code>FirstType</code> but merely adds another level of abstraction.</p>

<p>So I suggest removing both <code>WebHandler</code> and <code>IWebHandler</code> to keep it simple.</p>

<p>As for unit testing, a lot of folks adding their own custom <code>IHttpClient</code> in order to facilitate mocking. But I think that defining such a poor abstraction is the wrong choice. Instead, I suggest creating a class that accepts data instead of an interface which can be easily tested. <a href="https://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/" rel="nofollow noreferrer">Here's a series of posts</a> that will describe the idea better than me.</p>

<p>The code for your case</p>

<pre><code>class Program
{
    static async Task Main(string[] args)
    {
        var firstType = new FirstType();

        var res = await firstType.SelectAllResponsesAsync();

        foreach (var str in res)
        {
            Console.WriteLine(str);
        }

        return;
    }

    public class FirstType
    {

        HttpClient client;

        public FirstType()
        {
            client = new HttpClient();
        }

        public async Task&lt;List&lt;string&gt;&gt; SelectAllResponsesAsync()
        {
            var response = await client.GetAsync("http://www.google.com");
            var str = await response.Content.ReadAsStringAsync();
            return UrlParser.Parse(str);
        }
    }

    public static class UrlParser
    {
        // this can be tested really easy
        // just provide the data to it
        public static List&lt;string&gt; Parse(string str)
        {
            var matches = Regex.Matches(str, "&lt;a href.*?&gt;(.*?)&lt;/a&gt;");

            var list = new List&lt;string&gt;();
            for (var i = 0; i &lt; matches.Count; i++)
            {
                list.Add(matches[i].Groups[1].Value);
            }
            return list;
        }
    }
}
<span class="math-container">```</span>
</code></pre>
    </div>