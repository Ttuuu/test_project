<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>BoardSolver</code> can be initialized with a different set of <code>colors</code> than the code, which would lead in an unsolvable solution which is not correct because the board is solvable:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>final Set&lt;ColorPin&gt; colors = /* red, blue*/;
final Set&lt;ColorPin&gt; otherColors = /* yellow, green */;

final PinRow code = PinRow.randomPinRow(codeWidth, colors);
Board board = new Board(code, maxAmountTrials);
BoardSolver solver = new BoardSolver(board, otherColors);
</code></pre>
</blockquote>

<p>For each <code>Board</code> a new <code>BoardSolver</code> is needed:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Board board = new Board(/* ... */);
Board otherBoard = new Board(/* ... */);

BoardSolver solver = new BoardSolver(board, ...);
BoardSolver solver = new BoardSolver(otherBoard, ...);
</code></pre>
</blockquote>

<p>I think a <code>BoardSolver</code> does not need to depend on a specific <code>Board</code> by its construction. Instead we should pass the board as an argument to <code>solve</code>. Since the <code>Board</code> knows <code>code</code> which knows <code>colors</code> the <code>BoardSolver</code> does not need its own <code>colors</code> because it knows the <code>colors</code> through the <code>Board</code>:</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
  /* ... */
  BoardSolver solver = new BoardSolver();
  Board board = new Board(code, maxAmountTrials);

  solver.solve(board);
  BoardPrinter.print(board);
}
</code></pre>

<p>Personally I find it cleaner if <code>solve</code> would return a <code>Board</code>:</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
  /* ... */
  Board solved = solver.solve(board);
  BoardPrinter.print(solved);
}
</code></pre>

<hr>

<p>The <code>check</code> method in <code>PinRow</code> returns a <code>List</code> that contains <code>BLACK</code> and <code>WHITE</code> pins: </p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public List&lt;CheckPin&gt; check(PinRow code) {

 /* add BLACK to checkreult */

 /* add WHITE to checkreult */&gt;

 return checkResult;
}
</code></pre>
</blockquote>

<p>To check if you solved the game a loop through the <code>List</code> is needed to check if an attempt is correct:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public boolean isSolved() {
   return code.getWidth() == getLatestResult().stream().filter(CheckPin.BLACK::equals).count();
}
</code></pre>
</blockquote>

<p>When you <code>check</code>, you could store the number of <code>BLACK</code> and <code>WHITE</code> pins instead of instances of them in a <code>List</code>. </p>

<p>For instance when you write a shopping list you do not write it this way:</p>

<pre><code>milk
milk
eggs
milk
eggs
</code></pre>

<p>Now you have to count (loop like in <code>isSolved</code>) through the list to find the amount of milk and eggs</p>

<p>We can save directly the amounts of <code>BLACK</code> and <code>WHITE</code>:</p>

<pre class="lang-java prettyprint-override"><code>public Resultcheck(PinRow code) {
  int amountOfBlack;
  int amoutOfWhite;
  for (int i = 0; i &lt; width; i++) {
     /* amountOfBlack++ */
     /* amoutOfWhite++ */
  }
  return new Result(amountOfBlack, amoutOfWhite);
}
</code></pre>

<pre class="lang-java prettyprint-override"><code>public boolean isSolved() {
    return code.getWidth() == getLatestResult().amountOfBlack;
}
</code></pre>
    </div>