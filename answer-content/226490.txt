<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Formatting</h3>

<p>In idiomatic java,</p>

<ul>
<li>curly braces go on the same line, not a newline</li>
<li>optional curly braces are always used. This provides consistency and reduces the risk of forgetting to add them when refactoring.</li>
<li>there is no whitespace after an <code>(</code> or before a <code>)</code></li>
<li>there is whitespace after control flow keywords (<code>for</code>, <code>while</code>, etc)</li>
<li>ALL_CAPS are used only for constant member variables</li>
</ul>

<h3>Readability</h3>

<p>It would be preferable to use <code>final</code>where possible to clarify intent and improve readability.</p>

<p>All your methods refer to a <code>T[]</code> as a "table", but arrays are not the same thing as tables.</p>

<p>Don't use random abbreviations. Is a <code>comp</code> a <code>comparison</code> or a <code>Comparator</code>? I don't want to have to guess. Variables should clearly indicate what they hold. Something like <code>aGTb</code> is gibberish. Use a descriptive name.</p>

<h3>Design</h3>

<p>It's unclear to me that there's value in offering <code>sort</code>, given the existence of <code>Arrays.sort</code>.</p>

<p>If you're trying to write a generally useful sorting class that provides some advantage over what already exists in the API, not supporting <code>List</code>s also seems like a major oversight.</p>

<p>All your public methods throw a <code>NullPointerException</code> when the array or comparator parameters are <code>null</code>, and that's not documented anywhere. Either write a permissive library that can sort a <code>null</code> array (just return it), or document that you're going to fail-fast on <code>null</code> inputs. Failing fast on a null comparator is probably correct, but should be documented.</p>

<p>Moving all the nulls to the end is an arbitrary decision. Clients should be able to pass in their own <code>Comparator</code> into <code>sort</code>. They can then decide how to handle nulls themselves.</p>

<p>It's unclear to me that there's any performance benefit on sorting out the nulls first vs. doing it in the <code>Comparator</code>.</p>

<p><code>moveNullsToEnd</code> and <code>swap</code> are both methods that act on an array, and have no special relationship to sorting algorithms. Either you don't want to expose them for use elsewhere, and they should be <code>private</code>, or you want to expose them and they should be in a different, more appropriate utility class.</p>

<p>It would be preferable if all your methods used generics for consistency with the rest of the API, rather than switching back and forth between <code>Object</code> and <code>T</code>.</p>

<p>If this is intended for real use, it would be nice to have multiple different methods with reasonable defaults, such as in <code>Arrays.sort()</code> and <code>Collections.sort()</code>.</p>

<h3>Implementation</h3>

<p>Since you're not promising a stable sort, <code>moveNullsToEnd</code> is way more complex than it needs to be. Walk the array once. Every time you see a null, swap it with the last non-null value. Alternately, if you want a stable sort in-place, walk the array once with two counters, a write index and a read index. Every time you see a null, increment the read an extra time.  Otherwise, move from the read index to the write index. When read reaches the end, write nulls the rest of the way.</p>

<p><code>moveNullsToEnd</code> fails on an array with only null elements.</p>

<p>Don't leave commented-out code in your codebase. Use a logger if you need to and remove it.</p>

<p>The <code>quickSort</code> method doesn't perform a quicksort, but rather an amalgam of quicksort and insertion sort. It's not by accident that the java library methods are labeled the generic <code>sort</code>. </p>

<p><code>insertionSort</code> would be easier to read with a <code>while</code> loop and a decrement inside it, mostly due to the complex comparison which eats most of the <code>for</code> declaration. The <code>j--</code> gets lost at the end. Better from a performance standpoint would be @vnp's recommendation.</p>

<p>I don't feel like getting too deep into the weeds of sorting implementations, so I'm going to leave it there. Below find stable and unstable implementations of <code>moveNullsToEnd</code>.</p>

<pre><code>private static &lt;T&gt; int moveNullsToEndStable(final T[] array) {
    int writeIndex = 0;

    for (int readIndex = 0; readIndex &lt; array.length; readIndex++) {
        if (array[readIndex] == null) {
            continue;
        }
        array[writeIndex] = array[readIndex];
        writeIndex++;
    }

    final int returnValue = writeIndex;
    for ( ; writeIndex &lt; array.length; writeIndex++) {
        array[writeIndex] = null;
    }

    return returnValue;
}
</code></pre>
    </div>