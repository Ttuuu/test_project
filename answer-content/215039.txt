<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like a very good status page. Well done !</p>

<hr>

<p><strong>Review</strong></p>

<blockquote>
<pre><code>from settings import refresh_interval, filename, site_down
</code></pre>
</blockquote>

<p>I recommend that you use set of config classes pattern for Flask.</p>

<pre><code>class Config(object):
    DEBUG = False
    TESTING = False
    DATABASE_URI = 'sqlite:///:memory:'

class ProductionConfig(Config):
    DATABASE_URI = 'mysql://user@localhost/foo'

class DevelopmentConfig(Config):
    DEBUG = True

class TestingConfig(Config):
    TESTING = True
</code></pre>

<ul>
<li><p>You can then load the correct one based on environment. More info can be found <a href="http://flask.pocoo.org/docs/1.0/config/" rel="nofollow noreferrer">here</a>.</p></li>
<li><p>This allows you to have different configs, (Mock databases, mock services) for testing and for development. For production you can have the real stuff.</p></li>
</ul>

<blockquote>
<pre><code>from multiprocessing.dummy import Pool as ThreadPool
</code></pre>
</blockquote>

<ul>
<li>Why are you using dummy pool? </li>
<li>Make the Pool size configurable.</li>
</ul>

<blockquote>
<pre><code>import requests
import json
import threading
from socket import gaierror, gethostbyname
from multiprocessing.dummy import Pool as ThreadPool
from urllib.parse import urlparse
from flask import Flask, render_template, jsonify
from time import gmtime, strftime
</code></pre>
</blockquote>

<ul>
<li>Consider separating builtin modules, third party modules and your own modules with a new line.</li>
</ul>

<blockquote>
<pre><code>global returned_statuses
global last_update_time
t = threading.Timer
</code></pre>
</blockquote>

<ul>
<li>Use a class when you want to maintain state. Globals and functions are error prone and harder to understand.</li>
</ul>

<blockquote>
<pre><code>t(refresh_interval, check_multiple_urls).start()
</code></pre>
</blockquote>

<ul>
<li>Don't create timers that call's it self? There are good alternatives <a href="https://stackoverflow.com/questions/12435211/python-threading-timer-repeat-function-every-n-seconds">here</a>.</li>
</ul>

<blockquote>
<pre><code>with open(filename) as f:
    checkurls = json.load(f)
returned_statuses = {}
last_update_time = 'time string'
</code></pre>
</blockquote>

<ul>
<li>If you encapsulate the state in-to a class such as <code>Status</code> this can go in the <code>__init__</code></li>
</ul>

<blockquote>
<pre><code>def check_multiple_urls():
    """ This function checks through urls specified in the checkurls.json file
    and returns their statuses as a dictionary every 60s."""
    statuses = {}
    temp_list_urls = []
    temp_list_statuses = []
    global returned_statuses
    global last_update_time
    t = threading.Timer
    t(refresh_interval, check_multiple_urls).start()
    for group, urls in checkurls.items():
        for url in urls:
            temp_list_urls.append(url)
    pool = ThreadPool(8)
    temp_list_statuses = pool.map(check_single_url, temp_list_urls)
    for i in range(len(temp_list_urls)):
        statuses[temp_list_urls[i]] = temp_list_statuses[i]
    last_update_time = strftime("%Y-%m-%d %H:%M:%S", gmtime())
    returned_statuses = statuses
</code></pre>
</blockquote>

<ul>
<li>Add some logical new lines here to separate different things that you are doing. Better to break to multiple functions. This function violates the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>. </li>
</ul>

<p><strong>Bonus:</strong></p>

<ul>
<li>You are missing the <code>requests</code> library in your <code>requirements.txt</code> in github.</li>
</ul>
    </div>