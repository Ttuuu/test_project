<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Redundant calculations</h1>
<p>You calculate <code>mult1 * mult2</code> three times. Instead, do this once, assign it to a variable, and use that.</p>
<hr>
<p>Since you want to never want to calculate when a value is <code>0</code>, you can set the start of <code>range</code> to <code>1</code>.</p>
<pre><code>range(1, 101) # 1 -&gt; 100, since (inclusive, exclusive)
</code></pre>
<p>Now you can remove that <code>(product != 0)</code> check.</p>
<h1>Type hints</h1>
<p>At first, it looks like the function accepts two integers. In reality, it accepts two <em>tuples</em> of integers. Consider doing the following:</p>
<pre><code>from typing import Tuple

def get_total_x(input_factors: Tuple[int], test_numbers: Tuple[int]) -&gt; int:
</code></pre>
<p>This makes it clear that you want tuples of integers as parameters, instead of a single integer.</p>
<h1>Using sets</h1>
<p>You use a set, but you don't actually <em>use</em> the set. You're trying to add values to the set that aren't already there, or that you can add to the set. Instead of having that list comprehension, simply cast <code>fact</code> into a set. Does the exact same thing.</p>
<pre><code>fact = set(fact)
</code></pre>
<h1>Magic numbers</h1>
<p>What is the significance of <code>100</code>? I see in your question you explain, but not in the code. I would assign this to a variable to make it more clear.</p>
    </div>