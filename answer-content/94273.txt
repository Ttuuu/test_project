<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a few things that could allow you to improve your program.  First, though, I don't consider myself a bash expert, so there may well be better ways of doing these things.</p>

<h2>Use a "shebang" line</h2>

<p>As <a href="https://stackoverflow.com/questions/25165808/should-i-use-a-shebang-with-bash-scripts">this question</a> points out, you should always use a "shebang" line for your bash scripts.  So the first line would be:</p>

<pre><code>#!/usr/bin/env bash
</code></pre>

<h2>Pass values as arguments</h2>

<p>Rather than prompting for the <code>SCALE</code> value, it's generally better to use a command line argument.  That way, the script can be reused by other shell scripts.</p>

<h2>Provide a stopping mechanism</h2>

<p>As each term is calculated, eventually, it will be equal to zero given the passed <code>scale</code>.  This suggests a mechanism for stopping: check each term for 0 before adding it.</p>

<h2>Indent <code>do</code> and <code>while</code> loops</h2>

<p>I don't know of a bash style guide (there probably is one!) but I like to see the contents of loops indented to make it easier to read.</p>

<h2>Putting it all together</h2>

<p>Here's a modification of your script with all of these suggestions implemented:</p>

<h2>bashpi.sh</h2>

<pre><code>#!/usr/bin/env bash
SCALE=$1
VALUE=2
PI=0
FITNESS=1
DELTA=3
while [ $(echo "$DELTA==0" |bc) != "1" ]
do
    PI=$(echo "$PI+$DELTA" | bc)
    DELTA=$(echo "scale=$SCALE;(4/($VALUE*($VALUE+1)*($VALUE+2)))-(4/(($VALUE+2)*($VALUE+3)*($VALUE+4)))" | bc)
    VALUE=$(($VALUE+4))
    FITNESS=$(($FITNESS+1))
    echo "###############"
    echo "--&gt; $FITNESS // $VALUE"
    echo "$PI"
done
</code></pre>

<p>To better understand how this works, you can replace the three <code>echo</code> statements with this one:</p>

<pre><code>echo "DELTA = ${DELTA} --&gt; ${FITNESS} // ${VALUE} : ${PI}"
</code></pre>

<h2>Sample output</h2>

<p>With <code>./bashpi.sh 4</code>, and the modified <code>echo</code> above I get this output:</p>

<pre><code>DELTA = .1333 --&gt; 2 // 6 : 3
DELTA = .0064 --&gt; 3 // 10 : 3.1333
DELTA = .0012 --&gt; 4 // 14 : 3.1397
DELTA = .0003 --&gt; 5 // 18 : 3.1409
DELTA = .0001 --&gt; 6 // 22 : 3.1412
DELTA = .0001 --&gt; 7 // 26 : 3.1413
DELTA = .0001 --&gt; 8 // 30 : 3.1414
DELTA = 0 --&gt; 9 // 34 : 3.1415
</code></pre>
    </div>