<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on @Pouya Samie's answer a slightly different solution:</p>

<ul>
<li>ActionManager encapsulates a dictionary that holds the actions.</li>
<li>Note that the dictionary's keys are not case sensitive.</li>
<li>You can even extend the action manager's functionality (Remove actions from outside, get list of all available actions, ...)</li>
<li>[x] OCP: Just add / remove list of actions without modifying the ActionManager</li>
<li>[x] SRP: ActionManager holds and manages the relation between action's name and its logic</li>
</ul>

<p>_</p>

<pre><code>public class ActionManager
{
    private readonly Dictionary&lt;string, Func&lt;int, int, int&gt;&gt; myActions = 
        new Dictionary&lt;string, Func&lt;int, int, int&gt;&gt;(StringComparer.InvariantCultureIgnoreCase);

    public void Add(string key, Func&lt;int, int, int&gt; action) =&gt; myActions.Add(key, action);

    public int Calculat(string action, int value1, int value2)
    {
        Func&lt;int, int, int&gt; func;
        if (!myActions.TryGetValue(action, out func))
            throw new InvalidOperationException($"Action '{0}' does not exist.");       
        return func(value1, value2);
    }
}
</code></pre>

<p><strong>Usage:</strong></p>

<pre><code>public class MyClass
{
    private readonly ActionManager myActionManager = new ActionManager();

    public MyClass()
    {
        myActionManager.Add("Add", (a, b) =&gt; a + b);
        myActionManager.Add("Subtract", (a, b) =&gt; a - b)
        // ...
    }

    public int X { get; set; }
    public int Y { get; set; }

    private int Calculate(string action) =&gt; myActionManager.Calculat(action, X, Y);
}
</code></pre>
    </div>