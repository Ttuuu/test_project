<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>filter_input(INPUT_POST)</code> does nothing</strong></p>

<p>Although <a href="http://php.net/manual/en/function.filter-input.php" rel="nofollow noreferrer"><code>filter_input()</code></a> can be very useful for validating and 
sanitizing data, when you use <code>filter_var(INPUT_POST)</code> you 
are actually not sanitizing <em>anything</em>. It just passes the raw data through and any invalid content you were hoping to 
remove, like HTML, will still be there. I believe what you are looking for is to use the <code>FILTER_SANITIZE_STRING</code> flag
which will strip HTML from those values:</p>

<pre><code>$new_user_usr = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
$new_user_pwd = filter_input(INPUT_POST, 'password', FILTER_SANITIZE_STRING);
$new_user_pwd_conf = filter_input(INPUT_POST, 'confirm_password', FILTER_SANITIZE_STRING);
</code></pre>

<p><strong>Do your data validation and error handling sooner</strong></p>

<p>In this code you go to the database to get users and then you do data validation that could cause your script to exit
before you use that data. That's a waste of time and processing power. Don't do anything until you have to. So get your 
<em>after</em> you validate the other data.</p>

<p><strong>Don't <code>die()</code></strong></p>

<p>It's good that you check for errors, but you handle them poorly. Terminating the executation of your code and dumping an 
error message out to the user is a bad user experience. You should capture those errors, probably in an array, and then
display them in a user-friendly way so they have the opportunity to correct their mistakes and try again.</p>

<p><strong>Your user check is extremely inefficient</strong></p>

<p>You check to see if a user exists by iterating through every row in your table! That's just very slow and won't scale at all.
You can easily narrow this down to a simple query that checks to see if anyone is using the same username. If you get any 
results back, you know someone is using that username.</p>

<pre><code>// This code is insecure and I will fix that next
$sql = "SELECT usr FROM Users WHERE usr = '{$new_user_usr}'");
$result = $mysqli-&gt;query($sql);
if ($result-&gt;num_rows) {
    die("Username already taken");
}
</code></pre>

<p><strong>You are wide open to SQL injections</strong></p>

<p>our code is <em>wide open</em> to [SQL Injection][1] which is the [most dangerous web vulnerability][2]. This occurs when you 
execute SQL queries with unsanitized user data. By placing the raw <code>$_POST</code> variable directly in your query you are 
allowing an attacker to inject their own SQL into your query and execute it. They can do anything from stealing data to 
deleting your database.</p>

<p>To combat this you must use parameterized queries. <a href="https://stackoverflow.com/q/60174/250259">Stack Overflow</a> covers 
this very well but here's what your code would like if you use <code>mysqli</code> with prepared statements:</p>

<pre><code>$stmt = $mysqli-&gt;prepare('SELECT usr FROM Users WHERE usr = ?');
$stmt-&gt;bind_param('s', $new_user_usr); // 's' specifies the variable type =&gt; 'string'
$stmt-&gt;execute();
$result = $stmt-&gt;get_result();
if ($result-&gt;num_rows) {
    die("Username already taken");
}
</code></pre>

<p>And:</p>

<pre><code>$stmt = $mysqli-&gt;prepare('INSERT INTO Users (usr, pwd) VALUES (?, ?)');
$stmt-&gt;bind_param('ss', $new_user_usr, $new_user_pwd); 
$stmt-&gt;execute();
$result = $stmt-&gt;get_result();
if (!$result-&gt;affected_rows) {
    die("Username already taken");
}
</code></pre>

<p><strong>Never store plain text passwords</strong></p>

<p>Never, ever, store plain text passwords. It is a huge security nightmare and there is no excuse to do it. 
Please use <strong><a href="//php.net/manual/en/function.password-hash.php" rel="nofollow noreferrer">PHP's built-in functions</a></strong> to handle password security.</p>

<pre><code>// Do this *before* you insert into the database
$new_user_pwd = password_hash($new_user_pwd, PASSWORD_BCRYPT, $options);

// Do this when you want to verify a password
if (password_verify($new_user_pwd, $row['pwd'])) {
    echo 'Password is valid!';
} else {
    echo 'Invalid password.';
}
</code></pre>

<p>Make sure you <strong><a href="//stackoverflow.com/q/36628418/1011527">don't escape passwords</a></strong> or use any other cleansing mechanism 
on them before hashing. Doing so changes the password and causes unnecessary additional coding.</p>

<p><strong>Put your database credentials some more secure</strong></p>

<p>Your database credentials are considered sensitive information and should be treated as such. Putting it in your PHP code
potentially leaves it open to discovery. If your web server has an issue and instead of rendering your PHP code it displays
it as plain text, your credentials will be publicly available for all to see. You should consider moving it to its own 
configuration file which is placed outside of your web root so it cannot be accessed through a browser at any time.</p>

<p><strong>Separate concerns</strong></p>

<p>Try to separate your HTML and business logic. It's okay to have PHP in your HTML templates for dynamic content, but business
logic is best separated from your HTML as coupling them together makes your code less flexible and potentially more difficult 
to maintain.</p>
    </div>