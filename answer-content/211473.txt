<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Does <code>RealType</code> have to be a type of floating point number (at least at the root level)? If so, perhaps this should be enforced using <code>std::is_floating_point</code>, with <code>std::enable_if</code> or a <code>static_assert</code>. If not, a different name might be more appropriate.</p>

<hr>

<p>Use <code>std::size_t</code> not <code>size_t</code> (perhaps this is already being done by <code>boost</code> somewhere - it's hard to tell).</p>

<hr>

<p>Templates that aren't supposed to be user facing (e.g. <code>promote</code>, <code>root_type_finder</code>, <code>type_at</code> etc.) could be in a <code>detail</code> namespace.</p>

<p>The template meta-functions may be better named in a similar way to functions, e.g. <code>make_nested_dimensions</code>, <code>get_root_type</code>, <code>get_type_at</code>.</p>

<p>The template specializations are a fundamental part of how the meta-functions work, so it would be nice if they were kept together. I'd only split the definitions up when adding specializations for lots of different classes, which isn't the case here.</p>

<p>Should <code>type_at&lt;double, 5&gt;::type;</code> compile? Perhaps we want something more like:</p>

<pre><code>template&lt;typename T, size_t Depth&gt;
struct type_at;

template&lt;typename T&gt;
struct type_at&lt;T, 0&gt; { using type = T; };

template&lt;typename RealType, size_t Order, size_t Depth&gt;
struct type_at&lt;dimension&lt;RealType, Order&gt;, Depth&gt; { using type = typename type_at&lt;RealType, Depth - 1&gt;::type; };
</code></pre>

<hr>

<ul>
<li><p>Readability: Inside a template class, we can omit the template arguments, i.e.: <code>dimension&lt;RealType, Order&gt;</code> can be written simply as <code>dimension</code>.</p></li>
<li><p>Readability: Please add a space between template arguments.</p></li>
<li><p>Readability: Don't add comments that simply repeat the code, e.g.:</p>

<pre><code>// RealType(cr) | RealType | RealType is copy constructible.
...
// r += ca | RealType&amp; | Adds ar to r.
...
// r -= cr | RealType&amp; | Subtracts cr from r.
...
// r -= ca | RealType&amp; | Subtracts ca from r.
</code></pre>

<p>etc. Leaving a blank line between the function definitions will make the code itself more readable.</p></li>
<li><p>Readability: Add the variable names to the function declarations, instead of putting  in a comment.</p></li>
</ul>

<hr>

<pre><code>// Be aware of implicit casting from one dimension&lt;&gt; type to another by this copy constructor.
template&lt;typename RealType2, size_t Order2&gt;
dimension&lt;RealType, Order&gt;(const dimension&lt;RealType2, Order2&gt;&amp;);
</code></pre>

<p>Noooooooooope. * <em>users flee in terror</em> *</p>

<p>(Unless there's some extraordinarily good reason for this, please make it <code>explicit</code>. User code will be clearer and contain fewer bugs.)</p>

<hr>

<p>It would be nice to more clearly separate <code>Order</code> from the size of the <code>std::array</code>. Remembering to add <code>1</code> to <code>Order</code> when accessing the array is error prone, and produces more complicated and surprising code.</p>

<p>We can either use the <code>std::array&lt;T&gt;::size()</code> function or add a static constant size variable to the <code>dimension</code> class.</p>

<hr>

<p>I'd be tempted to add some sort of index or coordinate type for use with <code>at()</code> and <code>derivative()</code>, rather than exposing the user directly to the template parameter pack. e.g.:</p>

<pre><code>template&lt;std::size_t Order&gt;
struct indices
{
    std::array&lt;std::size_t, Order&gt; indices;
};
</code></pre>

<p>It's much easier to manipulate or store indices in this form.</p>

<hr>
    </div>