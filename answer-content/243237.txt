<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>could I get some tips on optimization, etc.</p>
</blockquote>

<p><strong>Alignment loss</strong></p>

<p><code>free_ptr = (char*) free_ptr + size;</code> simply increases the next available allocation to so many bytes later.  This differs from <code>malloc()</code> whose allocations meets all possible system alignment needs. </p>

<p>Either document that <code>bump_alloc()</code> does not provide aligned allocations or change code to do so.</p>

<p><strong>Error messages</strong></p>

<p>I'd expect the error message to go out <code>stderr</code> - yet your call.</p>

<pre><code>// printf("unable to map memory\n");
fprintf(stderr, "Unable to map memory\n");
</code></pre>

<p><strong>Missing include</strong></p>

<p><code>intptr_t</code> is define in <code>&lt;stdint.h&gt;</code>.  Best to include that rather than rely of a hidden inclusion.</p>

<p><strong>Good type math</strong></p>

<p>The below avoids <a href="https://stackoverflow.com/a/40637622/2410359"><code>int</code> overflow</a>. </p>

<pre><code>#define KB(size) ((size_t) size * 1024)
</code></pre>

<p>Better code would <code>()</code> each macro parameter.</p>

<pre><code>#define KB(size) ((size_t) (size) * 1024)
</code></pre>

<p>Yet I'd recommend rather than type-casting, which may narrow the math, allow gentle widening.  The below multiplication will occur with the wider of <code>size_t</code> and the type of <code>size</code>.</p>

<pre><code>#define KB(size) ((size_t) 1024 * (size))
</code></pre>

<p><strong>Unneeded cast, simplify</strong></p>

<p>Casting not needed going from <code>void *</code> to an object pointer.  Size to the de-referenced type.  Easier to code right, review and maintain.</p>

<pre><code>// int* x = (int*) bump_alloc(sizeof(int));
int* x = bump_alloc(sizeof *x);
</code></pre>
    </div>