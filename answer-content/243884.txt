<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wow, this is kind of a mess.
I'll just review items in sequence as I read them.
My short answer, tl;dr: Yes!</p>
<p>Try executing python 2.7 code with a python 3 interpreter,
even if only during development on your laptop, or in unit tests.
It will give you the confidence to <code>import six</code> or otherwise drag
ancient code kicking and screaming into the modern era.
Small changes like <code>print x</code> â†’ <code>print(x)</code> are easy and helpful.</p>
<p>The first three lines are nice.
We define <code>currentdirectory</code>, <code>versionf</code>, &amp; <code>verfile</code> as top-level module constants.
<a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> prefers the name <code>current_directory</code>, but I quibble, it's fine as-is.</p>
<p>You conditionally <code>def</code> or <code>print</code>.
I recommend an early abort:</p>
<pre><code>            if not os.path.isfile(verfile):
                raise FileNotFoundError(verfile)
</code></pre>
<p>You have unfortunate <a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming)" rel="nofollow noreferrer">coupling</a> in this code.
Python, like all O-O languages, offers you structuring tools to improve cohesion.
Please avoid the <code>global</code> keyword, it is a bad code smell.
And please avoid nested <code>def</code>, as its effect on namespaces is similar to using global variables.
For private helpers, choose <code>_private</code> names like <code>def _get_app_name</code>,
<code>def _version_number</code>, and <code>def _app_name_version</code>.</p>
<p>You wrote:</p>
<blockquote>
<pre><code>application = subprocess.check_output(['grep', 'application', verfile]) ...
</code></pre>
</blockquote>
<p>In several places you reference <code>verfile</code>.
Just listen to your code.
Clearly it is telling you it wants an <code>__init__</code> constructor
which assigns to <code>self.verfile</code>, so that it may be used here.
Also, fork'ing <code>grep</code> is <strong>a</strong> tool one might use,
but it's not the most appropriate one for the task at hand.
Let me introduce you to <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer"><code>import configparser</code></a>.</p>
<blockquote>
<pre><code>                global application
                ...
                return application
</code></pre>
</blockquote>
<p>Ok, you used to have 3 module-level variables,
and now you've added a 4th one.
Sadly, you have scattered them all around the module,
and you will continue to define additional ones.
This is poorly structured.
There's no central place for a maintenance engineer
to discover "what are the important pieces of state I need to worry about?"</p>
<p>Also, not sure why, after side effecting the variable,
you bothered to <code>return</code> it, since caller ignores the return value.
Rather than no-arg invocations of get_app_name and version_number,
you might consider passing in the values they need as arguments.
But if you turn this into a class, then <code>self</code> can supply those values.</p>
<blockquote>
<pre><code>            except:
                print ...
</code></pre>
</blockquote>
<p>Better for your catch to be <code>except Exception</code>,
lest you accidentally catch CTRL-C exceptions, as well.
Consider using a <a href="https://docs.python.org/3/howto/logging.html#a-simple-example" rel="nofollow noreferrer">logger</a>.</p>
<p>Then we continue to see a pattern of "more of the same",
I won't belabor it with repetition.
You are consistently abusing namespaces,
relying on implicit args,
and side effecting globals at module-level.</p>
<p>It's not quite clear from the generic code you posted,
but I'm going to go out on a limb and say that this module
seems to be about "app verification".</p>
<hr>
<p>Please do this:</p>
<pre><code>class AppVerifier:
</code></pre>
<p>and then define half a dozen object attributes as I suggested above.
Doing just that <em>one</em> thing will have a huge effect on making your
code more maintainable for the next engineer that has to interact with it.</p>
    </div>