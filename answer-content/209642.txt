<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm afraid your code has errors,  so your benchmarking is invalid. </p>

<ul>
<li>The <code>get-digits-3</code> function is wrong.</li>
<li>A corrected version runs about twelve times slower than
<code>get-digits-4</code>.</li>
</ul>

<p><strong>Repairing <code>get-digits-3</code></strong></p>

<p>Your <code>get-digits-3</code> doesn't work:</p>

<pre><code>=&gt; (get-digits-3 123456789)
()
</code></pre>

<p>The function chain should be applied to the argument <code>num</code>:</p>

<pre><code>(defn get-digits-3 [num]
  (-&gt;&gt; num
       (str)
       (map str)
       (map int)
       (into '())))
</code></pre>

<p>But this fails:</p>

<pre><code>=&gt; (get-digits-3 123456789)
ClassCastException java.base/java.lang.String cannot be cast to java.base/java.lang.Character  clojure.lang.RT.intCast (RT.java:1213)
</code></pre>

<p>The culprit is the <code>(map int)</code> line. You can't apply <code>int</code> to strings. If you drop the offending line, you get the character values:</p>

<pre><code>=&gt; (get-digits-3 123456789)
(57 56 55 54 53 52 51 50 49)
</code></pre>

<p>Notice, too, that they are in reverse order. So we</p>

<ul>
<li>subtract the value of character <code>0</code> and</li>
<li><code>conj</code> onto the other end by using a vector.</li>
</ul>

<p>This gives us ...</p>

<pre><code>(defn get-digits-3 [num]
  (-&gt;&gt; num
       (str)
       (map int)
       (map #(- % (int \0)))
       (into [])))

=&gt; (get-digits-3 123456789)
[1 2 3 4 5 6 7 8 9]
</code></pre>

<p><strong>Benchmarking</strong></p>

<p>I went about this differently:</p>

<ul>
<li>I used a single example instead of a range.</li>
<li>I used Criterium's <code>bench</code> rather than its <code>quick-bench</code>.</li>
</ul>

<p>The results were as follow:</p>

<p>For your original (faulty) version of <code>get-digits-3</code>:</p>

<pre><code>=&gt; (bench (get-digits-3 123456789))
...
             Execution time mean : 228.998292 ns
</code></pre>

<p>For the corrected version:</p>

<pre><code>=&gt; (bench (get-digits-3 123456789))
...
             Execution time mean : 3.440024 Âµs
</code></pre>

<p>And for <code>get-digits-4</code>:</p>

<pre><code>=&gt;(bench (get-digits-4 123456789))
...
             Execution time mean : 247.502418 ns
</code></pre>

<p>This confirms that your faulty <code>get-digits-3</code> is about as fast as <code>get-digits-4</code>. And <code>get-digits-3</code> ignores its argument, so is bound to get relatively faster as the numbers get bigger. You can see that the corrected version is nowhere near competitive. </p>
    </div>