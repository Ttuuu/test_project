<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's not a lot to review here.  It's Valgrind clean, though that's not difficult to achieve.</p>

<p>Certainly consider closing stream 3, unless you want to keep a means to emit unprefixed stderr messages.</p>

<p>One shortcoming is that the shell won't wait for <code>sed</code> to finish when it terminates.  If the last process's output is still being filtered at this point, then you may fail to capture it - I observed this (repeatably) when running the program in Emacs <code>compilation-mode</code>.</p>

<p>One way you can improve on this if you're using GNU sed is by passing <code>-u</code> ("unbuffered") flag to sed.  If you don't have GNU sed but do have GNU coreutils, then the <code>stdbuf</code> utility could make sed line-buffered for you:</p>

<pre><code>stdbuf -oL -iL sed 's/^/ERROR: /'
</code></pre>

<p>With any sed, we could (and should) close stderr when we terminate and wait for sed to finish to be sure of catching all error output.</p>

<hr>

<h1>Modified code</h1>

<pre><code>#!/bin/bash

exec 3&gt;&amp;2
exec 2&gt; &gt;(sed -u 's/^/ERROR: /' &gt;&amp;3)
exec 3&gt;&amp;-
# shellcheck disable=SC2064
trap "exec 2&gt;&amp;-; wait $!" EXIT

echo stdout
echo stderr &gt;&amp;2
</code></pre>
    </div>