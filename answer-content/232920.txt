<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few points that might be useful:</p>

<ul>
<li><p>Firstly, don't worry about having small header/source files. It's generally good practice to put structs/classes in separate files.</p></li>
<li><p>You declare <code>MazeCell</code> and <code>MazePosition</code> as <code>struct</code>. I would still use <code>class</code> here. It's a matter of preference but a pretty good rule is to use <code>struct</code> when you just want a container for data with no methods or added functionality.</p></li>
<li><p>Don't really worry about inline because any decent compiler will do this for you.</p></li>
<li><p><code>unsigned</code> can be used instead of <code>unsigned int</code> and is more idiomatic.</p></li>
<li><p>Your use of <code>unsigned int</code> in <code>Maze</code> is inconsistent with your use of <code>int</code> in <code>Coords</code>. This is causing a lot of C style <code>(int)</code> casts. If you just continue to use <code>int</code> instead, you can forget all of these and prevent the chance of overflow.</p></li>
<li><p>You never <code>delete[] cells;</code> in <code>Maze</code>! As is, the class should also have a destructor, copy constructor and copy assignment operator. An easier way to solve this though would be to use <code>std::vector&lt;MazeCell&gt;</code> for your cells.</p></li>
<li><p><code>Maze::succsesfullyConnectedToNeighbour(...)</code> is confusingly named. Ignoring the typo, it does not indicate that it will change the coords you pass it. Maybe <code>bool Maze::connectToNeighbour(const Coords&amp; currentCell, Coords&amp; neighbourCell)</code> would be more appropriate?</p></li>
<li><p>In <code>Maze::succsesfullyConnectedToNeighbour(...)</code> you should declare your random device, engine &amp; distribution as static. You are not intended to construct new ones every time you need a random number</p></li>
</ul>
    </div>