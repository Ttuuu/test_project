<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@vajk already mentioned most important points, but I will add comments on some things that I see.</p>

<p><code>patronCount</code> is redundant, you can simply use <code>patrons.size()</code>.</p>

<p>Both arrays that are Pool members can be made final.</p>

<p><code>phLevel</code> is a double meaning you have to work with floating point. You have to consider which values are used and perhaps better to use integer, since no actual meter will have such low/high range of possible values.</p>

<p><code>checkPhLevel</code> and <code>getOptimumPhLevel</code> are compared in a wrong way, since <code>checkPhLevel</code> is a double you need to compare range of values instead of exact values, this comes out from previous comment about <code>phLevel</code> being a double.</p>

<p><code>checkPhLevel</code> method does not say what it actually does, meaning it has a side effect. Therefore either split it in two methods where one checks ph level and returns boolean and second method adds required chemical to the pool or rename it to something like <code>balansePoolPhLevel</code>.</p>

<p><code>checkPhLevel</code> can be simplified to:</p>

<pre><code>double actualLevel = pool.getpHLevel();
double desiredLevel = pool.getOptimumLevel()

if(Math.abs(actualLevel - desiredLevel) &lt; SOME_DELTA_YOU_THING_IS_PRECISE_ENOUGH) {
  return;
}

int amountToAdd = actualLevel - desiredLevel;

amountToAdd &gt; 0 
  ? pool.addAcids(amountToAdd) 
  : pool.addAlkalis(-amountToAdd); // I think you need to invert it otherwise you are adding it to phLevel in pool class
</code></pre>

<p>A good thing to consider would be creating another constructor where you can pass arrays used in <code>Pool</code> class therefore it would be much easier to test, but that's only when you write tests.</p>

<p><code>admitPatron</code> method can be refactored:</p>

<pre><code>if(this.patronCount &gt;= this.capacity) {
   return false;
}

this.patrons.add(patron);
this.patronCount++;

return true;
</code></pre>

<p>But instead of doing two things in <code>admitPatron</code>. First being to check if item can be added and second add the item in a list. You could change class API to <code>boolean isPatronLimitReached()</code> and then <code>void addPatron(patron)</code>. <code>isPatronLimitReached()</code>  simply return boolean if max value is reached and <code>addPatron(patron)</code> add a patron and if list is full throw an error.</p>

<p>I'm bit confused about <code>rotateLifeguards</code> method since you are casting <code>Staff</code> to <code>Lifeguard</code>. <code>Staff</code> also is parent class of <code>Manager</code> and actually can be <code>Staff</code> object itself therefore you could be casting to the wrong class therefore it is not very safe. I don't write Java, but you should not cast <code>Staff</code> instead have a separate list of <code>Lifeguards</code> and <code>Managers</code>. Also you are not using managers anywhere in shown code.</p>

<p><code>Patron</code> class can be just a string, no reason to keep it as class.</p>

<p><code>advancePosition</code> method could be split in two parts one which get next position and second part where you assign new position to current position:</p>

<pre><code>public void advancePosition() {
  this.position = this.getNextPosition();
}

Position getNextPosition() {
  switch(this.position) {
    case Position.ONE:
      return Position.Two;
    ...
  }
}
</code></pre>
    </div>