<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>span_orthogonal(vec)</code> function is doing stuff from your other functions, so rather than rewriting the code, you can just use those functions:</p>

<pre><code>last_k = -dot_product(span_vector(dimension-1),vec[:-1])/vec[-1]
</code></pre>

<p>However, your method of giving all but the last coordinate random values, and then calculating the last coordinate's value based on that, gives an error when the sum for the rest of the components. So you should find a nonzero coordinate, exit the function if none such exists, then find the dot product of the remaining coordinates, then check whether that's zero.</p>

<pre><code>try:
    nonzero_index, nonzero_value = next([(i,v) for (i,v) in enumerate(vec) if v)])
except StopIteration:
    print("Vector must be nonzero.")
    return 
orthogonal_vec = span_vector(dimension-1)
reduced_vec =  vec.copy()
reduced_vec.pop(nonzero_index)      
initial_product = -dot_product(orthogonal_vec,reduced_vector)
if initial_product:
     orthogonal_vec.insert(nonzero_index,-initial_product/nonzero_value)
else:
    orthogonal_vec.insert(non_zero_index,0)
return orthogonal_vec
</code></pre>
    </div>