<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm is needless constructing the entire filtered list and then finding the length of it.  Instead of <code>len(filter(lambda x: x &lt; 0, ary))</code> and similar commands, you could try <code>sum([1 for el in my_arr if el &gt; 0])</code>.</p>

<p>On my chat machine, this gives a speedup of about 2×.  Here's some code to back that up, along with testing of a NumPy version.</p>

<pre><code>from random import randint
import timeit
import numpy as np

# construct array
my_arr = [randint(-100, 100) for _ in xrange(100000)]

# check consistency of approaches
assert np.count_nonzero(np.array(my_arr) &gt; 0) == sum([1 for el in my_arr if el &gt; 0])
assert len(filter(lambda x: x &gt; 0, my_arr)) == sum([1 for el in my_arr if el &gt; 0])

# time native python list comprehension + sum()
%timeit  sum([1 for el in my_arr if el &gt; 0])

# time filter() + len()
%timeit len(filter(lambda x: x &gt; 0, my_arr))

# time numpy solution w/ np.count_nonzero
%timeit np.count_nonzero(np.array(my_arr) &gt; 0)

# time numpy solution w/ np.sum
%timeit (np.array(my_arr) &gt; 0).sum()
</code></pre>

<hr>

<pre><code>100 loops, best of 3: 4.97 ms per loop
100 loops, best of 3: 10.2 ms per loop
100 loops, best of 3: 5.02 ms per loop
100 loops, best of 3: 4.91 ms per loop
</code></pre>

<p>The bottom line conclusion is that whether in native Python or NumPy, <code>sum()</code>-based approaches are about twice as fast.</p>

<p>Of course:</p>

<ol>
<li><p>The constraints of your particular problem, in particular <code>1 ≤ N ≤ 100</code>, mean that timing differences of this magnitude will be of no practical concern.</p></li>
<li><p>You didn't do the requested formatting, as SuperBiasedMan has noted.</p></li>
</ol>
    </div>