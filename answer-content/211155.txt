<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>TL;DR:</strong> Scroll to the end for the provided code with suggested improvements</p>

<h1>Suggestions</h1>

<h3>1. Standalone <code>cartesian_product</code> helper function outside scope of <code>combinations</code></h3>

<p>A preferable solution would be to simply use <code>itertools.product</code> as most Python-savvy readers will be familiar with it - and it is well-documented for those that aren’t. However, since you explicitly mention it...</p>

<p><em>If you still don't want to use <code>itertools.product</code>:</em></p>

<p>While it does improve clarity to construct a hierarchy of scopes that expose things only when necessary, in this case, I believe that making <code>cartesian_product</code> a nested function inside <code>combinations</code> serves only to confuse the purpose of <code>combinations</code>. It is better to define <code>cartesian_product</code> above, making the code below cleaner and easier to understand. Now someone reading your code will first see <code>cartesian_product</code>’s definition and understand its relatively simple purpose. Then, inside <code>ParametricMapping.combinations</code>, readers are already familiar with <code>cartesian_product</code>, and their train of thought isn’t derailed by trying to understand a nested function.</p>

<h3>2. <code>flatten</code> helper function</h3>

<p>This helper function should be used thusly: </p>

<pre class="lang-py prettyprint-override"><code>for term in cartesian_product(*pools):
    results.append(flatten(term))
</code></pre>

<p>This may seem silly as flattening is a simple operation, but in this example there are a few fairly tricky list/dict comprehensions nearby. Therefore, it may help to replace that piece with a simple <code>flatten</code> call to clean up some confusion and to emphasize that this is  a straight-forward operation - A fact that could be lost on some readers of the code in its current state. My point here is that stacking lots of loops and comprehensions on top of each other (especially without documentation/comments) can quickly get messy and confusing.</p>

<h3>3. Consolidate some code</h3>

<p>If you took both of the above suggestions, a nice opportunity to consolidate some code has presented itself. After the above changes, the section that was originally</p>

<pre class="lang-py prettyprint-override"><code>results = []
for term in cartesian_product(*pools):
    results.append([pp for p in term for pp in p])
</code></pre>

<p>should now be</p>

<pre class="lang-py prettyprint-override"><code>results = []
for term in itertools.product(*pools):
    results.append(flatten(term))
</code></pre>

<p>This block can be expressed clearly and concisely with the following list comprehension: </p>

<pre class="lang-py prettyprint-override"><code>results = [flatten(term) for term in itertools.product(*pools)]
</code></pre>

<p>Note that because of the separation of functionality into helper functions, the purpose of this list comprehension is abundantly clear. It creates <code>results</code>, which is a list containing the <code>flatten</code>ed outputs of <code>product</code>.</p>

<h3>4. Check for empty <code>mappings</code> at top of <code>combinations</code></h3>

<p>Instead of the if/else at the end of <code>combinations</code> that checks for <code>len(tmp) == 0</code>, make the first two lines of <code>combinations</code> the following:</p>

<pre class="lang-py prettyprint-override"><code>if self.mappings == [{}]:
    return [{}]
</code></pre>

<p>The <code>else</code> clause at the bottom of <code>combinations</code> is no longer necessary, and you can simply <code>return tmp</code>. This is cleaner because it handles the case where <code>mappings</code> is empty immediately, which means those cases bypass all the code that was being executed before when <code>len(tmp)</code> was evaluated at the end of <code>combinations</code>. This also allows readers to make the assumption that <code>mappings</code> is non-empty when they get into the actual work being done by <code>combinations</code>, which is just one less thing to worry about. Alternatively, a more concise option would be to replace</p>

<pre class="lang-py prettyprint-override"><code>if len(tmp) == 0:
    return [{}]
else:
    return tmp
</code></pre>

<p>with</p>

<pre class="lang-py prettyprint-override"><code>return tmp or [{}]
</code></pre>

<p>This works because if <code>mappings</code> is empty, the value of <code>tmp</code> will be an empty list, which will evaluate to False, returning the value following the <code>or</code>. This more concise version may come at the cost of decreased readability.</p>

<h3>5. Define <code>labels</code> and <code>pools</code> using helper methods or non-init fields</h3>

<p>Remove the first two code lines from <code>combinations</code>, and move them to either helper methods, or <a href="https://docs.python.org/3/library/dataclasses.html#post-init-processing" rel="nofollow noreferrer">additional fields that are processed post-initialization</a>. I recommend doing this to further clarify the work actually being done by <code>combinations</code> and to clean up the code overall. These both have the added benefit of exposing <code>labels</code> and <code>pools</code> as additional attributes of the <code>dataclass</code> that can be accessed outside of <code>combinations</code>.</p>

<p>See the <code>ParametricMapping1</code> class defined in the section below for an implementation using helper methods, and see the alternative <code>ParametricMapping2</code> class defined below it for an implementation using non-init fields.</p>

<h1>TL;DR</h1>

<p>In the end, if all suggestions are followed, the code should include the below declaration of <code>flatten</code>, along with one of the two following blocks (<code>ParametricMapping1</code>, <strong>or</strong> <code>ParametricMapping2</code>):</p>

<pre class="lang-py prettyprint-override"><code>def flatten(l):
    return [item for sublist in l for item in sublist]
</code></pre>

<p><strong>With either ...</strong></p>

<pre class="lang-py prettyprint-override"><code>@dataclass
class ParametricMapping1:
    mappings: List[Mapping[Tuple[str], Sequence[float]]] = field(default_factory=lambda: [{}])

    def _labels(self) -&gt; List[Tuple[str]]:
        return flatten(self.mappings)

    def _pools(self) -&gt; List[List[Sequence[float]]]:
        return [list(map(tuple, zip(*arg.values()))) for arg in self.mappings]

    @property
    def combinations(self) -&gt; List[Mapping[Tuple[str], float]]:
        if self.mappings == [{}]:
            return [{}]

        pool_values = [flatten(term) for term in itertools.product(*self._pools())]
        return [dict(zip(self._labels(), v)) for v in pool_values]
</code></pre>

<p><strong>Or ...</strong></p>

<pre class="lang-py prettyprint-override"><code>@dataclass
class ParametricMapping2:
    mappings: List[Mapping[Tuple[str], Sequence[float]]] = field(default_factory=lambda: [{}])
    labels: List[Tuple[str]] = field(init=False, repr=False)
    pools: List[List[Sequence[float]]] = field(init=False, repr=False)

    def __post_init__(self):
        self.labels = flatten(self.mappings)
        self.pools = [list(map(tuple, zip(*arg.values()))) for arg in self.mappings]

    @property
    def combinations(self) -&gt; List[Mapping[Tuple[str], float]]:
        pool_values = [flatten(term) for term in itertools.product(*self.pools)]
        return [dict(zip(self.labels, v)) for v in pool_values] or [{}]
</code></pre>

<p><strong>Edit (2019-01-09 - 1530):</strong></p>

<ul>
<li>The definitions of <code>_labels</code> and <code>self.labels</code> in the above two code blocks, respectively, have been simplified per @MathiasEttinger's <a href="https://codereview.stackexchange.com/questions/211121/data-transformation-involving-dictionaries-and-lists/211155#comment408288_211155">excellent suggestion</a>. See revision history for their original definitions.</li>
</ul>
    </div>