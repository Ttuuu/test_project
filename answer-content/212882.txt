<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Better tests</strong></p>

<p>Before anything, let's improve the test suite so that we can feel more confident updating the code.</p>

<p>At the moment, the tests:</p>

<ul>
<li><p>rely on meaningless values printed on standard output which have to be compared to values in the comments - we'll see quickly why this is something to avoid</p></li>
<li><p>have somes values "untested": value for <code>test1</code> is not printed</p></li>
<li><p>have variables with names that does not convey much meaning (<code>testXXX</code>)</p></li>
</ul>

<p>Let's see how we can improve this. We could:</p>

<ul>
<li><p>get rid of the <code>testXXX</code> variables</p></li>
<li><p>rename all <code>arrYYY</code> variables as <code>arr</code></p></li>
<li><p>use <code>assert</code> to checking everything is working properly. If we want to do things properly, we could use a unit test framework such as <code>unittest</code>.</p></li>
</ul>

<p>At this stage, we have:</p>

<pre><code>def test_index_equals_value_search():
    arr = [-8,0,2,5]
    assert index_equals_value_search(arr) == 2
    arr = [-1,0,3,6]
    assert index_equals_value_search(arr) == -1
    arr = [0,1,2,3]
    assert index_equals_value_search(arr) == 0
    arr = [-6,-5,-4,-1,1,3,5,7]
    assert index_equals_value_search(arr) == 7
</code></pre>

<p>which gives:</p>

<pre><code>Traceback (most recent call last):
  File "review212877.py", line 32, in &lt;module&gt;
    test_index_equals_value_search()
  File "review212877.py", line 28, in test_index_equals_value_search
    assert index_equals_value_search(arr) == 0
AssertionError
</code></pre>

<p>My job pretty much stops at this point but I'll give additional comments anyway.</p>

<ol>
<li><p>You see how important my first comment was.</p></li>
<li><p>This error also shows something which is missing in your code: documentation. Indeed, the value returned is correct if we stricly refer to the function name. However, there should be a piece of docstring mentionning we want "the <strong>lowest</strong> index".</p></li>
<li><p>Algorithms relying on indices and in particular binary search are very easy to get wrong and are not always easy to test. However, a function doing the same thing using linear search is very easy to write. If I were you, I'd write such a function and use it to write a <a href="https://en.wikipedia.org/wiki/Test_oracle#Derived" rel="noreferrer">pseudo-oracle</a>:</p></li>
</ol>

<pre><code>def index_equals_value_search_linear(arr):
    for i, x in enumerate(arr):
        if i == x:
            return i
    return -1
</code></pre>

<p>More comments</p>

<p><strong>Style</strong></p>

<p>Python has a style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> which is worth reading and trying to apply.</p>

<p>Among other things, it says:</p>

<blockquote>
  <p>Use 4 spaces per indentation level.</p>
</blockquote>
    </div>