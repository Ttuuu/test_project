<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p><strong>I'm looking for a way to improve this nested ternary function</strong></p>
</blockquote>
<p>They keys to check could be iterated over - e.g.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function getArray(value) {
  var showValue = 0;
  for (let key of ['value1', 'value2', 'value3']) {
    if (value[key] &gt; 0) {
      showValue = value[key];
      break;
    }
  }

  document.getElementById("demo").innerHTML += value.system + ": " + showValue + " ";
}

function myFunction() {
  var array = [
    {system:"Abba", value1:0, value2:1, value3:0},
    {system:"Mars", value1:0, value2:4, value3:0},
    {system:"Nexus", value1:0, value2:0, value3:6},
    {system:"Zeroes", value1:0, value2:0, value3:0}
  ];

  array.forEach(getArray);
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;button type="button" onclick="myFunction()"&gt;Check&lt;/button&gt;
&lt;p id="demo"&gt;&lt;/p&gt;</code></pre>
</div>
</div>

<p>And this could be simplified using the array method <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" rel="nofollow noreferrer"><code>find()</code></a> combined with logical OR - i.e. <code>||</code> for a fall-back value using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR#Short-circuit_evaluation" rel="nofollow noreferrer">Short-circuit evaluation</a> for the case when no values are greater than zero:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function getArray(value){
  //find the key that has a value greater than zero
  const key = ['value1', 'value2', 'value3'].find(key =&gt; value[key] &gt; 0);   
  //return the value that is greater than zero, or else zero in case no value is greater than zero
  const showValue = value[key] || 0;
  document.getElementById("demo").innerHTML += value.system + ": "+ showValue + " ";
}

function myFunction() {
  var array = [
    {system:"Abba", value1:0, value2:1, value3:0},
    {system:"Mars", value1:0, value2:4, value3:0},
    {system:"Nexus", value1:0, value2:0, value3:6},
    {system:"Zeroes", value1:0, value2:0, value3:0}
  ];
  
  array.forEach(getArray);
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;button type="button" onclick="myFunction()"&gt;Check&lt;/button&gt;
&lt;p id="demo"&gt;&lt;/p&gt;</code></pre>
</div>
</div>

<h2>Other review points</h2>
<h3>Improper use of <code>map</code> method</h3>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer"><code>map()</code></a> method "<em>creates a new array populated with the results of calling a provided function on every element in the calling array</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer">1</a></sup>. For this code <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer"><code>forEach()</code></a> can be used (as it is in the two snippets above) since the return value of each iteration is not used after the callback is executed. <code>.map()</code> could be used to return a string for each object and then update the DOM element only once, which would be better for multiple reasons:</p>
<ul>
<li>fewer DOM lookups - remember those aren't cheap</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" rel="nofollow noreferrer"><code>Array.join()</code></a> can be used to separate each string with a space, without adding an excess space at the end of the output</li>
<li>the function would only have one responsibility - in-line with the Single Responsibility principle</li>
</ul>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function getArray(value){
  const key = ['value1', 'value2', 'value3'].find(key =&gt; value[key] &gt; 0);
  const showValue = value[key] || 0;
  return value.system + ": "+ showValue;
}

function myFunction() {
  var array = [
    {system:"Abba", value1:0, value2:1, value3:0},
    {system:"Mars", value1:0, value2:4, value3:0},
    {system:"Nexus", value1:0, value2:0, value3:6},
    {system:"Zeroes", value1:0, value2:0, value3:0}
  ];
  
  document.getElementById("demo").innerHTML = array.map(getArray).join(" ");
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;button type="button" onclick="myFunction()"&gt;Check&lt;/button&gt;
&lt;p id="demo"&gt;&lt;/p&gt;</code></pre>
</div>
</div>

<h3>Keep HTML and JavaScript separate</h3>
<p>The HTML has an <code>onclick</code> attribute:</p>
<blockquote>
<pre><code>&lt;button type="button" onclick="myFunction()"&gt;Check&lt;/button&gt;
</code></pre>
</blockquote>
<p>Instead of using that attribute, the event handling can be setup in Javascript - e.g. using <code>document.addEventListener()</code>:</p>
<pre><code>document.getElementById('checkBtn').addEventListener('click', myFunction);
</code></pre>
<p>this would require an <em>id</em> attribute be added to the element - e.g.</p>
<pre><code>&lt;button type="button" id="checkBtn"&gt;Check&lt;/button&gt;
</code></pre>
<p>though other ways to detect it are possible (e.g. class name, elements of <code>document.forms</code>, etc. With this separation the JavaScript (logic) can be modified without ever needing to alter the HTML (markup) - especially helpful in larger projects where one person might update HTML and another the JS.</p>
    </div>