<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Compilation options</h1>

<p>Use more warnings, e.g. <code>g++ -std=c++11 -Wall -Wextra</code>.  This will identify the unused variable <code>ctr</code>, for instance.</p>

<h1>Avoid <code>using namespace std</code></h1>

<p>Bringing all names in from a namespace is problematic; <code>namespace std</code> particularly so. See <a href="//stackoverflow.com/q/1452721">Why is “using namespace std” considered bad practice?</a>.</p>

<h1>Choice of type</h1>

<p>If all the numbers are guaranteed to be positive, consider using an unsigned type for the array elements.</p>

<p>Prefer using <code>std::array</code> over raw (C-style) arrays.</p>

<h1>Checking for perfect square</h1>

<p>It's good that we have a self-contained function for checking whether a number is a perfect square.  However, it has accuracy problems when values reach the limit of a <code>double</code>'s mantissa.  It's also relatively slow, due to the use of <code>std::sqrt()</code>.  One thing we could do instead is to create a <code>std::set</code> (or <code>std::unordered_set</code>) of the possible square numbers, and then simply test for membership of that set.</p>

<p>That looks something like this:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;unordered_set&gt;

unsigned original_array1[17] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};

bool isSumPerfectSquare(unsigned x) {
    static auto const squares =
        []{
            std::unordered_set&lt;unsigned&gt; s;
            auto max = *std::max_element(std::begin(original_array1), std::end(original_array1));
            for (auto value = 1u, diff = 1u;  value &lt; max * 2;  value += (diff += 2))
                s.insert(value);
            return s;
        }();

    return squares.find(x) != squares.end();
}
</code></pre>

<h1>Prefer <code>new[]</code> and <code>delete[]</code></h1>

<p>When writing C++, prefer the <code>new</code> and <code>delete</code> operators and their array counterparts rather than C-style <code>std::malloc()</code>, <code>std::calloc()</code>, <code>std::realloc()</code> and <code>std::free()</code>.  Prefer smart pointers and collections to bare pointers.</p>

<p>However, this algorithm shouldn't need any allocations at all, if we modify the input in place.</p>

<p>Here's how I'd do that, using <code>std::swap</code> to move each candidate in turn to the front of the array:</p>

<pre><code>// shuffle [a..b), given preceding number
bool arrange_numbers(unsigned prev, unsigned *a, unsigned *b)
{
    if (a == b) {
        // no more numbers; we've done it!
        return true;
    }

    for (unsigned *p = a;  p != b;  ++p) {
        if (is_perfect_square(prev + *p)) {
            std::swap(*a, *p);
            if (arrange_numbers(*a, a+1, b)) {
                // found a match
                return true;
            }
            // reinstate the order, for our caller
            std::swap(*a, *p);
        }
    }

    // no satisfactory solution
    return false;
}


bool arrange_numbers(std::array&lt;unsigned,17&gt;&amp; array)
{
    unsigned *a = array.begin();
    unsigned *b = array.end();

    for (unsigned *p = a;  p != b;  ++p) {
        std::swap(*a, *p);
        if (arrange_numbers(*a, a+1, b)) {
            // found a match
            return true;
        }
    }

    // no matches
    return false;
}
</code></pre>

<hr>

<h1>Full modified code</h1>

<pre><code>#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;unordered_set&gt;
#include &lt;utility&gt;


std::array&lt;unsigned,17&gt; numbers = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};

bool is_perfect_square(unsigned x) {
    static auto const squares =
        []{
            std::unordered_set&lt;unsigned&gt; s;
            auto max = *std::max_element(numbers.begin(), numbers.end());
            for (auto value = 1u, diff = 1u;  value &lt; max * 2;  value += (diff += 2))
                s.insert(value);
            return s;
        }();

    return squares.find(x) != squares.end();
}


// shuffle [a..b), given preceding number
bool arrange_numbers(unsigned prev, unsigned *a, unsigned *b)
{
    if (a == b) {
        // no more numbers; we've done it!
        return true;
    }

    for (unsigned *p = a;  p != b;  ++p) {
        if (is_perfect_square(prev + *p)) {
            std::swap(*a, *p);
            if (arrange_numbers(*a, a+1, b)) {
                // found a match
                return true;
            }
            // reinstate the order, for our caller
            std::swap(*a, *p);
        }
    }

    // no satisfactory solution
    return false;
}


bool arrange_numbers(std::array&lt;unsigned,17&gt;&amp; array)
{
    unsigned *a = array.begin();
    unsigned *b = array.end();

    for (unsigned *p = a;  p != b;  ++p) {
        std::swap(*a, *p);
        if (arrange_numbers(*a, a+1, b)) {
            // found a match
            return true;
        }
    }

    // no matches
    return false;
}


int main()
{
    std::cout &lt;&lt; "Original array:";
    for (auto i: numbers) {
            std::cout &lt;&lt; " " &lt;&lt; i;
    }
    std::cout &lt;&lt; '\n';

    if (arrange_numbers(numbers)) {
        std::cout &lt;&lt; "Sorted array:";
        for (auto i: numbers) {
            std::cout &lt;&lt; " " &lt;&lt; i;
        }
        std::cout &lt;&lt; '\n';
    }
}
</code></pre>
    </div>