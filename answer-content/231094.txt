<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a short review;</p>

<ul>
<li>You use globals instead of parameters for <code>activePage</code> and <code>pageNeighbours</code></li>
<li>You need at least one comment stating what <code>pageNeighbours</code> stands for, without knowing this the code looks meaningless to me</li>
<li>You need at least one comment on the top explaining what the range is supposed to contain</li>
<li>On the whole I think this could use more comments</li>
<li>Why <code>actualPageRange</code> instead of simply <code>pageRange</code>, or even <code>range</code> since it would be clear from context what <code>range</code> we're reading about</li>
</ul>

<p>Okay, so since the code does not work, expect this question to be closed.
That doesn't mean that functionally this isn't a great question.</p>

<p>This is my approach to what I believe you are looking for:</p>

<pre><code>const pageRange = ((activePage, pageNeighbours, totalPages) =&gt; {

  let range = [];
  //Add active page and neighbouring pages
  for(let page = activePage - pageNeighbours; page &lt;= activePage + pageNeighbours; page++)
    range.push(page);
  //Make sure we dont show pages that dont exist
  range = range.filter(page=&gt; page &gt; 0 &amp;&amp; page &lt;= totalPages);
  //Allow user to go to the first page if need be
  //The second entry should be either 2 or ellipsis(...)
  if(range[0]!=1){
    if(range[1]!=2){
      range.unshift('...');
    }
    range.unshift(1);
  }
  //Allow user to go the last page, second last entry should be second last page or ellipsis
  if(range[range.length-1] != totalPages){
    if(range[range.length-2]!= totalPages-1){
      range.push('...');
    }  
    range.push(totalPages);
  }

  return range;
})(activePage, pageNeighbours, totalPages);
</code></pre>

<p>Note that this avoids accessing <code>activePage</code> etc. as a global.</p>
    </div>