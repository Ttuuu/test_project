<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd suggest to accompany the code with comments. Not just for the purpose of review, but also for your own. After a few weeks it's hard to remember all the details, and what seems to be clear now will be hard to read later. Especially in this case when all arguments are of <code>String</code> or <code>[String]</code>, it'd be very helpful to document them (see <a href="https://www.haskell.org/haddock/doc/html/ch03s02.html#idm140354810892448" rel="nofollow noreferrer">Function arguments</a>).</p>

<p>Some more thoughts: The code isn't that easy to read. One reason for that I see
is that your functions often entangle together several goals. Extracting common
functionality into smaller helper functions would help.</p>

<p>Specific comments:</p>

<pre><code>parse :: String -&gt; ([String], String)
parse ('/':'/':text)    = parseCustomDelimiters [] text
parse body              = (defaultDelimiters, body)
</code></pre>

<p>The name is basically meaningless - what does it parse? Why do you call the
string <code>text</code> in one place and <code>body</code> in another?</p>

<pre><code>parseDelim :: String -&gt; String -&gt; (String, String)
parseDelim (']':xs) delim = (delim, xs)
parseDelim (x:xs) delim = parseDelim xs (delim++[x])
</code></pre>

<p>This basically is "read until a specific character and return both parts". And
the second argument is redundant, it's only an implementation detail, and
obscures how the function should be used.  I'd create a helper function like
<code>readUntil :: Char -&gt; String -&gt; (String, String)</code>, and implement it using
<a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:break" rel="nofollow noreferrer"><code>break</code></a>.
And then just <code>parseDelim = readUntil ']'</code>.</p>

<pre><code>splitAtDelims :: ([String], String) -&gt; [String]
splitAtDelims (delims, body) = foldr splitEachOnSubStr [body] delims
    where 
        splitOnSubStr = split . dropBlanks . dropDelims . onSublist
        splitEachOnSubStr = concatMap . splitOnSubStr
</code></pre>

<p>The type is quite uncommon. I'd rather use</p>

<pre><code>splitAtDelims :: [String] -&gt; String -&gt; [String]
</code></pre>

<p>and then use <code>uncurry splitAtDelims</code> when needed.</p>

<pre><code>parseCustomDelimiters :: [String] -&gt; String -&gt; ([String], String)
parseCustomDelimiters [] (delim:'\n':body) = ([[delim]], body)
parseCustomDelimiters delims ('\n':rest)   = (delims, rest)
parseCustomDelimiters delims ('[':rest)    = parseCustomDelimiters newDelims remainingText
    where
        parsed = parseDelim rest ""
        newDelims = delims ++ [fst parsed]
        remainingText = snd parsed
</code></pre>

<p>Again, the first argument is just an implementation detail and makes the
function both harder to read and harder to use. Rather you should define it for
example as:</p>

<pre><code>parseCustomDelimiters :: String -&gt; ([String], String)
parseCustomDelimiters = loop []
  where
    loop =  -- your original definition
</code></pre>

<p>Also you use both names <code>body</code> and <code>rest</code> for the same purpose, which is very
confusing. You could also use <code>readUntil</code> from before to simplify this, as
apparently new-line terminates processing the input. So you could just split the
body on <code>'\n'</code> and parse the delimiters from the first part.</p>

<p>Notice that when parsing delimiters, you match on the starting marker <code>"//"</code> in
a different function than the ending marker <code>"\n"</code>. It's much easier to read
when such related parts are together, in one function. So you could write
another helper function, like</p>

<pre><code>readBetween :: String -&gt; String -&gt; (String, String)
</code></pre>

<p>where the first and the second argument are the starting and ending makers. Then
you could write <code>readBetween "//" "\n" text</code> and parse the returned content.</p>

<hr>

<p>I'd strongly encourage you to explore <a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Text-ParserCombinators-ReadP.html" rel="nofollow noreferrer"><code>ReadP</code></a>, which is available in <em>base</em>, or some other parser (like Parsec AttoParsec). The code will be then <em>much</em> more readable!</p>

<p>You can also go without such a full-featured parser, and instead implement <a href="http://dev.stephendiehl.com/fun/002_parsers.html" rel="nofollow noreferrer">your own, tiny one</a>. Already you can see in your types that the core structure of a parsing function (that doesn't handle errors or multiple possibilities) is</p>

<pre><code>String -&gt; (a, String)
</code></pre>

<p>That is, we parse some expected value of type <code>a</code> and return the rest of the string. A parser is then just an encapsulation of such an idea, like <code>newtype Parser a = Parser (String -&gt; (a, String))</code> and common operations on them.</p>

<hr>

<p>As mentioned in the comments, you didn't specify any tests, even though this was a TDD exercise. Including them would be definitely helpful. And a great way to learn about <a href="http://book.realworldhaskell.org/read/testing-and-quality-assurance.html" rel="nofollow noreferrer">property-based testing</a>! Testing is also extremely valuable for refactorings, to make sure you don't introduce a regression.</p>

<p>I hope this helps!</p>
    </div>