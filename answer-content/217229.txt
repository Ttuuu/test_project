<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and welcome to CodeReview. Congratulations on writing code that is well-formatted and compliant with the basics of the generally-agreed-upon Python coding style. </p>

<p>You have made some errors in organization and structure, however. Let's look at those first:</p>

<h2>Organization &amp; Structure</h2>

<h3>Organization</h3>

<p>Your code is "against the wall." This means that if I import your module, the code is going to be run, not just loaded. That's bad because it means you can't import it into the python command line REPL to play around with it, and you can load it into a debugger or a test framework.</p>

<p>The basic solution is to find all your "left-edge" statements, like these:</p>

<pre><code>user_health = 100
mew_health = 100
battle_continue = True

while battle_continue == True:
</code></pre>

<p>And move them into a function. Call it <code>main</code> until you have a better name (if you have a lot of code you might break it into more than one function, but <code>main</code> is a good place to start!). Then at the bottom of your module, do:</p>

<pre><code>if __name__ == '__main__:
    main()
</code></pre>

<p>That "hook" means that if you run <code>python myfile.py</code> the code will run and the game will play, but if you start the REPL using just <code>python</code> and then type <code>&gt;&gt;&gt; from myfile import *</code> you will have all the functions available and can call them to see what they do in different circumstances. And it also means you can use one of the many Python unit testing frameworks to check your code.</p>

<h3>Structure</h3>

<p>You have one class, and you don't really use it. The class is syntactically correct, but you aren't treating it as a class because you don't "trust" it. You're still treating it as a collection of functions that you can call.</p>

<p>Let's look at the first part of the problem statement. It's nice and small, so let's just play a game of <strong>find the nouns</strong> and see if that gives us any ideas about objects:</p>

<blockquote>
  <p>Write a <strong>simple game</strong> that allows the <strong>user</strong> and the <strong>computer</strong> to take
  <strong>turns</strong> selecting <strong>moves</strong> to use against each other. Both the computer and
  the player should start out at the same amount of <strong>health</strong> (such as
  100), and should be able to choose between the three moves:</p>
  
  <ul>
  <li><p>The first move should do moderate <strong>damage</strong> and has a small <strong>range</strong> (such as 18-25).</p></li>
  <li><p>The second move should have a large range of damage and can deal high or low damage (such as 10-35).</p></li>
  <li><p>The third move should <strong>heal</strong> whoever casts it a moderate amount, similar to the first move.</p></li>
  </ul>
  
  <p>After each move, a <strong>message</strong> should be printed out that tells the user
  what just happened, and how much health the user and computer have.
  Once the user or the computer's health reaches 0, the game should end.</p>
</blockquote>

<p>(I flagged "heal" as a noun because it's really the opposite of "damage".)</p>

<p>The general rule for OOP is that objects are nouns and methods are verbs. So our set of potential objects includes:</p>

<ol>
<li>Game</li>
<li>User</li>
<li>Computer</li>
<li>Turn</li>
<li>Move</li>
<li>Health</li>
<li>Damage</li>
<li>Range</li>
<li>Heal</li>
<li>Message</li>
</ol>

<p>With those in mind, it seems like User and Computer are likely to be either different parts (methods or functions) of the Game object, or they will be two different implementations of a Player interface (or subclasses of a Player class). </p>

<p>The Turn might be an object, but it seems more likely that "take turns" is a verb on the Game. A Move seems <em>very</em> likely to be an object, since there are so many details and requirements about them. </p>

<p>Health seems like an attribute, since we get a starting number provided, and both Heal and Damage both seem like verbs affecting health more than separate attributes or objects. The Range seems like an attribute of the various Move objects, but an internal attribute - when you invoke a move, it will adjust a player's health by some internally-computed amount.</p>

<p>Message is probably just a string. It's an object, but of a type that comes built-in. There is one key question, though: are turns sequential or simultaneous? If turns are sequential, messages can just be printed as they happen. If turns are simultaneous, messages might have to be computed after the results of both moves are understood. (What happens if both players kill each other during the same turn?)</p>

<h2>Pro-Tips</h2>

<h3>Move class</h3>

<p>Having <code>Move</code> as a class would be an example of the <a href="https://en.wikipedia.org/wiki/Command_pattern" rel="noreferrer"><strong>Command</strong> pattern</a>, and might look something like this:</p>

<pre><code>from abc import ABC, abstractmethod

class Move(ABC):
    ''' Abstract game move. (Command pattern.) Perform an action when
        invoked.
    '''
    def __init__(self, name):
        self.name = name

    @abstractmethod
    def execute(self, us: 'Player', them: 'Player') -&gt; str:
        ''' Perform an operation like damaging them, or healing us. '''
        return f"{us.name} uses {self.name}! It's super effective!"
</code></pre>

<p>(Note: You could also construct the Move objects with the us/them attributes configured during <code>__init__</code>, instead of passed as parameters.)</p>

<h3>Random choices</h3>

<p>You should eliminate all uses of <code>if</code> that involve random choices. You are randomly choosing a move: use a list or tuple of Move objects and compute the index of the object, then pass that object around. You are randomly generating damage or healing: compute the number, then apply that number to the appropriate player health attribute. The only <code>if</code> statement you need is to guard against going above or below the maximum or minimum health values (and those aren't random)!</p>
    </div>