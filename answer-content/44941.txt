<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Re. the algorithm, IMO it looks safe, with only two caveats:</p>

<ul>
<li><p>I'm not sure that it's thread-safe.</p></li>
<li><p>It looks safe, because of the "one-definition rule". I worried that if multiple source files ('translation units') invoke <code>TypeID&lt;int*&gt;::value()</code> they might each get their own copy of the type; however I think that the "one-definition rule" requires the linker to collapse the multiple types into one.
Furthermore I think that's not just a common good-practice (implemented by some compilers but not others), but is actually required by the standard.
But I don't think it will be safe if your program includes multiple DLLs: each DLL is built separately so it would get its own copy of a TypeID instantiation.</p></li>
</ul>

<p>Re. the code, I don't see why TypeID is a subclass of Counter; it works equally well like this:</p>

<pre><code>template&lt;typename T&gt;
struct TypeID // : private Counter
{
    static size_t value()
    {
        static size_t value = Counter::value++;
        return value;
    }
};
</code></pre>

<p>Perhaps you used inheritance to try to protect the Counter value; if so that would be more effective with the protected keyword:</p>

<pre><code>struct Counter
{
protected:
    static size_t value;
};
</code></pre>

<p>That's still imperfect (because anyone can subclass Counter). So an all-in-one version would be more fool-proof:</p>

<pre><code>class TypeID
{
    static size_t counter;

public:
    template&lt;typename T&gt;
    static size_t value()
    {
        static size_t id = counter++;
        return id;
    }
};
</code></pre>

<p>... invoked like this ...</p>

<pre><code>TypeID::value&lt;int&gt;()
</code></pre>

<hr>

<blockquote>
  <p>I think a spinlock + atomics will do the job. Do you think it is enough?</p>
</blockquote>

<p>I found that for some (but perhaps not all) compilers and compiler options, initialization of statics is thread-safe: for detail, see <a href="https://stackoverflow.com/q/1270927/49942">Are (initializing) function static variables thread-safe in GCC?</a>. In that case, using an atomic <code>Counter::value</code> is sufficient (because the initialization of each instance <code>value</code> is thread-safe).</p>

<p>If such a feature isn't in your compiler, then IMO you need:</p>

<ul>
<li>a lockguard in the value() method</li>
<li>and the lockguard must lock an already-constructed lock (perhaps not a separate lock for each T)</li>
<li>but given a 'global' lockguard, it wouldn't be necessary to also use an atomic <code>Counter::value</code></li>
</ul>
    </div>