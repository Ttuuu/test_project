<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks like you could benefit by trying to avoid the <a href="http://wiki.c2.com/?ArrowAntiPattern" rel="nofollow noreferrer">arrowhead anti-pattern</a>. </p>

<p>This occurs when you check the validity of your inputs before proceeding to do the work within the conditional body, and can lean to hard to read code when there are many conditionals to check, each relying on the previous condition passing.You end up with "wide" code due to the arrow shape, and there can be a lot of lines between where a condition fails, and how it is handled.</p>

<pre><code>/* arrowhead code */

if (input !== null) {
    if (input.property !== null) {
        if (checkIfValid(input.property) &gt; 0) {

            // do the work

        } else {
            // handle invalid property
    } else {
        // no property
} else {
    // no input
}
</code></pre>

<p>This can be prevented with a "fail fast" approach.  Instead of checking that a condition is valid and putting everything in its body, try checking if the condition is invalid, and if so, handle it (by logging a message in this case), and exit the function. Then check if the next condition is invalid, etc.  Once you've confirmed the inputs are valid in this fail fast logic at the top, you can do the real work in a less deeply nested block that is easier to read and understand.</p>

<pre><code>/* arrowhead removed */

if (input === null) {
    // no input
}
if (input.property !== null) {
    // no property
}
if (checkIfValid(input.property) &lt;= 0) {
   // handle invalid property
}

  // do the work
</code></pre>
    </div>