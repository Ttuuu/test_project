<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, you can use implicit typing when the type is easily determined from the RHS, so:</p>

<pre><code>DataTable _resultTable = new DataTable();
</code></pre>

<p>becomes:</p>

<pre><code>var _resultTable = new DataTable();
</code></pre>

<p>etc. This saves you changing the type of a variable in more than one place (declaration and instantiation).</p>

<p>Secondly, I'd recommend some abstracting, particularly the MySQL stuff.</p>

<pre><code>/// &lt;summary&gt;
/// The connection which is established when connecting to the database.
/// &lt;/summary&gt;
public IDbConnection _conn;

/// &lt;summary&gt;
/// A command which can be used to execute queries.
/// &lt;/summary&gt;
public IDbCommand _cmd;
</code></pre>

<p>And then have an IOC framework, or your code fill in these dependencies.</p>

<p>This way if you decide to move to a different DB provider, it will be a much simpler refactor, and this class shouldn't need touching. This also lets your mock the database, allowing you to properly Unit Test this code.</p>

<p>Of course, the downside is that the connection and command properties can be altered on the fly, which can be a problem. To prevent that, keep those properties as fields and this database class as abstract base class, and create subclasses for each DB provider you wish to support. Have those subclasses instantiate the fields yourself. Then most of the code remains testable, and it remains unchangeable.</p>
    </div>