<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Building the application structure for your project was a challenge.</p>

<p><a href="https://i.stack.imgur.com/8IrhH.png" rel="noreferrer"><img src="https://i.stack.imgur.com/8IrhH.png" alt="Project"></a></p>

<p>After I copied your classes into a Java project I created on my Eclipse IDE, your code has 11 compiler warnings.</p>

<p><a href="https://i.stack.imgur.com/iu3p6.png" rel="noreferrer"><img src="https://i.stack.imgur.com/iu3p6.png" alt="Compiler warnings"></a></p>

<p>When I tried to move the <code>Player</code>, <code>PlayerHuman</code>, and <code>Bot</code> classes into their own package to organize the code better, I got 9 compiler errors in the <code>Play</code> class.  This tells me that you're referencing package-private variables.  This is not a good practice.  Keep all class variables private and use getters to get the values.</p>

<p>You named one of your classes <code>Map</code>.  This confused me because I thought you were referring to a <code>java.util.Map</code> interface.  Don't name your classes the same as standard Java classes.  <code>GameMap</code> might be a better class name.</p>

<p>Hyphenated field names and method names like <code>play_state</code> aren't the Java coding convention.  Generally, Java field names and method names are camelCase, like <code>playState</code>.</p>

<p>I ran your code once.  I wasn't sure how to input a move.  Fortunately, I let the bot go first, so I saw that you typed coordinates.  It would be easier for the player to enter one number, 1 - 9 for a 3x3 board, 1 - 16 for a 4x4 board, and so on.  The code would translate that into two coordinates.  </p>

<p>I liked that you separated the concerns of the application into individual classes.  I liked the <code>Game</code> class.  I liked that you created an abstract <code>Player</code> class, and extended it to create the <code>PlayerHuman</code> and <code>Bot</code> classes.</p>

<p>In your Menu class, you have two separate menus.  It would have been easier on your part and more consistent for the players if you combined them into one menu.  Something like this.</p>

<pre><code>private void printMenu(boolean endMenu) {
    System.out.println("---MENU---");
    System.out.println("1. New Game");
    System.out.println("2. Settings");
    System.out.println("3. Scoreboard");// not working yet
    if (endMenu) {
        System.out.println("4. Play Again");
    }
    System.out.println("9. Exit");
}
</code></pre>

<p>Overall, a really good effort at separation of concerns.  Keep it up.</p>
    </div>