<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code,</p>

<p>This looks very good for just having a few weeks' experience.</p>

<p>Let's start with a some small things,</p>

<h1>1 Initialization vs declaration</h1>

<p>this line of code <code>tweet myTweet;</code> declares a variable, while this line of code <code>myTweet = new tweet();</code> instantiates it. When possible it's preferable to do both on the same line. This has a few benefits.</p>

<ul>
<li>There's less change for things to go wrong. In a larger application, there could be many things happening between <code>declaration</code> and <code>initialization</code> leading to potentially difficulty to track down bugs.</li>
<li>It makes the code easier to follow for other developers (and future you)</li>
</ul>

<p>for these reasons, I would prefer to see</p>

<ul>
<li><code>tweet myTweet = new tweet();</code></li>
<li><code>Scanner input = new Scanner(System.in);</code></li>
<li><code>String sentence = input.nextLine();</code></li>
</ul>

<p>etc.</p>

<h1>2 Java naming conventions</h1>

<p>Classes should start with a capital letter. You'll notice all the standard library classes begin with a capital letter (String, List, Scanner etc.) while primitive types (int, float, double) start with a lower case letter. With this in mind, it would be better to have your class called <code>Tweet</code></p>

<h1>3-0 Add setters to classes only if you absolutely need to</h1>

<p>If your code, you call <code>myTweet.setSentence(sentence);</code> setters generally exist when you <code>need</code> to update the state of an object some time after its creation, in this case, we update it right away! Why not simply pass <code>sentence</code> as another constructor argument, it could look like this.</p>

<pre class="lang-java prettyprint-override"><code>Scanner input = new Scanner(System.in);
String sentence = input.nextLine();
Tweet myTweet = new Tweet(sentence);
</code></pre>

<p>No need to update the <code>Tweet</code> once it has been created.</p>

<h1>3-1</h1>

<p>Staying on the topic of unnecessary mutation, we call <code>myTweet.computeSentence();</code> the first thing I notice about this method is that it has a <code>void</code> return type. This usually means one thing. <code>side effects</code>. In this context, a side effect means we call a method and something else is happening (in this case, we're mutating the state of the object.)</p>

<p>One other potential problem, is that in order for me to get the expected result from <code>myTweet.getNewSentence();</code> I need to remember to call <code>myTweet.computeSentence();</code> first! In a small program, not a big deal, but as our objects get more and more complicated, this becomes more of an issue. What if my entire main method could look like this.</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
    Scanner input = new Scanner(System.in);
    System.out.print("Enter a sentence: ");
    String sentence = input.nextLine();
    Tweet myTweet = new Tweet(sentence);
    String [] newSentence = myTweet.getNewSentence();
    for(int y = 0; y &lt; newSentence.length; y++){
        System.out.print(newSentence[y]+" ");
    }
    System.out.println();
}
</code></pre>

<p>This is <strong>very</strong> similar to what you already have. But there area few notable changes.
1. I declare and initialize variables at the same time.
2. I pass all <code>dependencies</code> to the <code>Tweet</code> constructor (the sentence) at creation time.
3. I don't need to remember to call certain setup methods (computeState)
4. Conform to Java naming standards (<code>Tweet</code> vs <code>tweet</code>)</p>

<h1>4 Storing unneeded instance variables</h1>

<p>Let's take a quick look at the Tweet class, so we store all these</p>

<pre class="lang-java prettyprint-override"><code>private String sentence;
private int strlen;
private StringBuffer word;
private String newSentence[];
private String newWord;
private int wordCount;
</code></pre>

<p>I was curious as to why we need to store all these. In our constructor, we initialize a lot of them. Why not just do that in the <code>getNewSentence</code> method instead</p>

<p>We end up with a <code>Tweet</code> class that looks like </p>

<pre class="lang-java prettyprint-override"><code>public class Tweet {

    private String sentence;

    public Tweet(String sentence){
        this.sentence = sentence;
    }

    //get method, returning new sentence to app class
    public String[] getNewSentence(){
        StringBuffer word = new StringBuffer();
        String newWord = " ";
        int wordCount = 1;


        int strlen = sentence.length();//get length of sentence
        for(int x = 0; x &lt; strlen; x++){//transverse the string,
            if(sentence.charAt(x)==' '){//calculate word count
                wordCount = wordCount +1;
            }
        }
        String[] newSentence = new String[wordCount]; //use word count to set size of the array
        for(int j = 0; j &lt; newSentence.length; j++){//transverse the array,
            for(int i = 0; i&lt; strlen; i++){//transverse string,
                if(sentence.charAt(i) == ' '){//check if char is a space,
                    j = j+1;//if so,increment j by 1
                    word = new StringBuffer();//start a new buffer
                }
                else{
                    word.append(sentence.charAt(i));//char at i, append to buffer,
                    newWord = word.toString();//convert buffer to string,
                    newSentence[j] = newWord;//add to j'th place of array
                }
            }
        }
        for(int x = 0; x &lt; newSentence.length; x++){//change any instance of cannot to can't
            if(newSentence[x].equalsIgnoreCase("cannot")){
                newSentence[x] = "can't";
            }
        }
        return newSentence;
    }
}
</code></pre>

<p>With this class, we don't need to worry about who used it before, or how they used it. <code>It will never be in a bad state</code> we can call <code>getNewSentence</code> all day long and it will always return the same thing, no need to worry about set up with <code>setSentence</code> or <code>computerState</code></p>

<p>Hopefully you found this review useful, I'd like to reiterate again that this looks very good for just a few weeks! Keep it up!</p>
    </div>