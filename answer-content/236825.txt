<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You need to simplify your class to its standard form, which is <code>House</code> needs <code>Name</code> and <code>Type</code>, then go from there. </p>

<p>Take it this way, if you need to create a new house, then you can write pseudo code that want something like : </p>

<pre><code>var house = new House
{
    Name = "House Name",
    Type = new WoodenHouse
    {
        WoodType = "Pine",
        WoodAge = 100,
        Floors = 2,
        RoofType = "Triangle"
    }
};
</code></pre>

<p>Since <code>Floors</code> and <code>RoofType</code> are releated to the <code>House</code>, then you can include them into the <code>House</code> instead. </p>

<p>Example : </p>

<pre><code>var house = new House
{
    Name = "House Name",
    Type = new WoodenHouse
    {
        WoodType = "Pine",
        WoodAge = 100
    },
    Floors = 2,
    RoofType = "Triangle"
};
</code></pre>

<p>then we can implement this : </p>

<pre><code>public class House
{
    public string Name { get; set; }

    public IHouseType Type { get; set; }

    public int Floors { get; set; }

    public string RoofType { get; set; }
}

public interface IHouseType 
{
    // define your contract
     string TypeName { set; get; }
}

public class WoodenHouse : IHouseType
{
    public string TypeName { set; get; }

    public int WoodAge { set; get; }

}

public class StoneHouse : IHouseType
{
    public string TypeName { set; get; }
}
</code></pre>

<p>and your <code>Creator</code> class can be something like this : </p>

<pre><code>public class HouseCreator
{
    private House _house;

    public HouseCreator(House house) { house = _house; }


    public House FactoryMethod()
    {
        if(_house.Type is null) { throw new ArgumentNullException(); } // it's not defined

        /*
         NOTE : 
            Floors &amp; RoofType are shared properties, so it can be processed outside the following if blocks
         */
        var floors   = _house.Floors;
        var RoofType = _house.RoofType;


        if (_house.Type is WoodenHouse)
        {
            // process the WoodenHouse logic
        }

        if(_house.Type is StoneHouse)
        {
            // process the StoneHouse logic and save it 

        }
        return _house;// return the processed house object.
    }
}
</code></pre>

<p>It's straight forward process, and there is no need to use duplicated objects like <code>HouseInfo</code>, and the <code>Creator</code> and <code>HousePopulator</code> in current context, I don't see any usage of them, since <code>new</code> keyword does that for you. What you need might be to implement <code>FactoryMethod()</code> and <code>PopulateHouse()</code> inside <code>House</code> class, which would make more sense to me at least. The factory method would act as a handler where you process the logic to your object internally, and then pass it to the Populate method where you execute the output publicly. </p>

<p>So, the conversion usage might be simplified to something like this : </p>

<pre><code>// Create a new house
var house = new House
{
    Name = "House Name",
    Type = new WoodenHouse
    {
        TypeName = "Pine",
        WoodAge = 100
    },
    Floors = 2,
    RoofType = "Triangle"
};


//Populate It 
house.Populate();
</code></pre>

<p>Another thing that might be also useful, using <code>Enum</code> in <code>RoofType</code> would me more appropriate than <code>string</code>. so this line : </p>

<pre><code>RoofType = "Triangle"
</code></pre>

<p>can be converted to this : </p>

<pre><code>RoofType = HouseRoofType.Triangle
</code></pre>
    </div>