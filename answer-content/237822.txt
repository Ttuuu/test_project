<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>typedef enum
{
    EQUAL = 0,
    LHS_NEWER,
    RHS_NEWER
} ECOMPARISON;
</code></pre>
</blockquote>

<p>A common convention for three-way comparisons is that of <code>strcmp()</code> - return any negative value if the first argument is less than the second, zero if equal, and positive if greater.</p>

<p>If we take that approach, and if we can ensure that the version values are small enough to avoid integer overflow, we can simplify the comparison to just:</p>

<pre><code>int CompareVersions(VERSIONCODE a, VERSIONCODE b)
{
    int diff = a.nMajor - b.nMajor;
    if (diff) return diff;
    diff = a.nMinor - b.nMinor;
    if (diff) return diff;
    return a.nRev - b.nRev;
}
</code></pre>

<p>If we can't ensure overflow won't happen, or if we absolutely must return fixed values, we'll need to convert those subtractions into calls to a custom comparison function - perhaps like this:</p>

<pre><code>int compare_int(int a, int b)
{
    /* standard idiom to return -1, 0 or +1 */
    return (a &gt; b) - (b &gt; a);
}
</code></pre>

<hr>

<p>The naming can be improved.  Most C conventions use <code>ALL_UPPERCASE</code> only for macros, to call attention to their difference from C code.  And most authorities discourage prefixes like the <code>n</code> and <code>v</code> used at the start of variable and member names - I encourage you to research "<em>Hungarian notation</em>" and understand the arguments.</p>
    </div>