<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Initialization in Constructors</strong><br>
Currently the constructors perform the initialization within the body of the constructor, this isn't necessary for simple variables, C++ has a shorthand form for initializing variables</p>

<pre><code>HTTPRequest::HTTPRequest(std::string _hostname)
 : hostname{_hostname}, method{"GET"}, path{"/"}
{
    set_args();
    set_default_headers();
}
</code></pre>

<p>As show in the example above, there is no need to pass <code>hostname</code> to the function that sets the default headers because <code>hostname</code> is a class member. Since it is a class member every function in the class has access to it. Therefore setting the default headers can be written like this:</p>

<pre><code>void HTTPRequest::set_default_headers()
{
    headers.insert(std::pair&lt;std::string, std::string&gt;("Host", hostname));
    headers.insert(std::pair&lt;std::string, std::string&gt;("User-Agent", random_user_agent()));
    headers.insert(std::pair&lt;std::string, std::string&gt;("Accept-Language", "en-us"));
    headers.insert(std::pair&lt;std::string, std::string&gt;("Connection", "Keep-Alive"));
    headers.insert(std::pair&lt;std::string, std::string&gt;("Content-Length", Util::int2str(data.length())));
    if (added_headers.size() &gt; 0) {
        for (auto h : added_headers)
        {
            headers.insert(h);
        }
    }
}
</code></pre>

<p>Note that set_default_headers() is not returning a map as <code>default_headers(str::string hostname)</code> is. There is no reason to create a local map of headers when the class member <code>headers</code> is declared in the class is available to update. This function replaces both <code>set_headers()</code> and <code>default_headers()</code> in the current implementation. The current implementation of <code>set_headers(default_headers(hostname));</code> wastes memory and execution time.</p>

<p>A similar function should be created to set the <code>args</code> variable as well.</p>

<p><strong>Note:</strong><br>
Memory allocation for both <code>args</code> and <code>headers</code> is handled by this line in the class declaration:</p>

<pre><code>    std::map&lt;std::string, std::string&gt; args, headers;
</code></pre>

<p>This code in the current constructor is attempting to reallocate that memory and is incorrect:</p>

<pre><code>    args = std::map&lt;std::string, std::string&gt;();
</code></pre>

<p>every argument that is an element of <code>args</code> must be added using an insert statement.</p>

<p><strong>Header Files</strong><br>
It would be better if http.h included the <code>map</code>, <code>string</code> and <code>vector</code> headers, otherwise each cpp file that references http.h needs to include those headers prior to including http.h.</p>

<p>It is fairly common for a class to defined in its own header file, for instance <code>HTTPRequest.h</code> and <code>HTTPResponse.h</code> rather than both class definitions being in http.h. In the case where one class requires the definition of another class the other class header file can be included for example <code>HTTPResponse.h</code> could contain:  </p>

<pre><code>#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;vector&gt;
</code></pre>

<p>Creating a header for each class limits the number of files that need to be recompiled every time there is an edit to a particular class such as adding a method to a class or changing the parameters of a method.</p>

<p>and <code>HTTPRequest.h</code> could contain</p>

<pre><code>#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;vector&gt;
#include "HTTPResponse.h"
</code></pre>

<p>Header files generally contain some mechanism to prevent the contents of the header file from being included twice. Microsoft provides <code>#pragma once</code> for this purpose, but a more common and portable method is</p>

<pre><code>#ifndef HTTPRequest_h
#define HTTPRequest_h
    ...
#endif
</code></pre>

<p>Preventing the contents of the header from being included more than once is important because otherwise compiler errors about duplicate definitions will result.</p>

<p>In Visual Studio when a class is added both a header file and a cpp file are generated and the header file starts with <code>#pragma once</code>.</p>

<p><strong>Variable Declarations</strong><br>
Currently http.h contains the following:</p>

<pre><code>    std::string response_txt, data, version, reason;
</code></pre>

<p>If for some reason the type of data needed to change it is harder to change it, it needs to be removed from the combined line and inserted on a line by itself. If a variable needs to be added or deleted it is easier to add a single declaration or remove a single line. It might be better if each variable was declared on it's own line both in a class definition in a header file or a local variable in a method. Using a single line improves readability and maintainability.</p>
    </div>