<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code was very well organized and was extremely easy to follow along.</p>

<hr>

<p>Looks to me that <code>board</code> is just a 1-based array.</p>

<p>It would be easier (and it makes more sense) to use an array, instead of an object.</p>

<p>But don't change how you are asking the user for input. You want to translate the user input one number back, so if the user enters "1" for box number 1, just subtract 1 from the integer version of the input <em>and then</em> pass it to <code>markBoard</code>.</p>

<pre><code>if (validateMove(result.position) === true) {
    markBoard(result.position - 1, player);
    printBoard();
</code></pre>

<hr>

<p>In your <code>markBoard</code> function, there is no point in calling <code>.toUpperCase</code> as the <code>player</code> variable passed in from <code>playTurn</code> is already a capital letter.</p>

<hr>

<p>You are making <code>validateMove</code> too complicated. Just do:</p>

<pre><code>return isInt(position) &amp;&amp; board[position] === ' ';
</code></pre>

<p>If the expression evaluates to <code>true</code>, it will return <code>true</code>. If it evaluates to <code>false</code>, it will return <code>false</code>.</p>

<p><em>Note: I omitted the <code>=== true</code> because JavaScript automatically checks for something to equal <code>true</code>.</em></p>

<hr>

<p>It doesn't look like you have anything to check if the user enters an invalid number.</p>

<p>I would add something to the end of <code>validateMove</code> to check to make sure that the option is in bounds.</p>

<p>Here is what I came up with:</p>

<pre><code>return isInt(position) &amp;&amp; board[position] === ' ' &amp;&amp; (position &gt;= 0 &amp;&amp; position &lt;= 8);
</code></pre>

<p>It would be &gt;= 1 &amp;&amp; &lt;= 9 if you continued to use the object instead of the array for storing squares of the board</p>

<hr>

<p>This might help your efficiency:</p>

<p>Try moving this conditional from <code>checkWin</code></p>

<pre><code>if (markCount === 3) {
    return true;
}
</code></pre>

<p>Outside of the inner <code>for</code> loop so you aren't doing a conditional check with each iteration.</p>

<hr>

<p>In <code>checkWin</code>, you do a lot of looping. In each loop, you are destroying and re-making variables as they exit and leave the scope (the loop).</p>

<p>This is very optimal. To help this, move the declarations of <code>markCount</code>, <code>i</code>, and <code>j</code> to the very top of the function (before the loops). You can set them to 0 when they are needed.</p>

<p>Here is what I am saying:</p>

<pre><code>function checkWin(player) {
    var i, j, markCount
    for (i = 0; i &lt; winCombinations.length; i++) {
        markCount = 0;
        for (j = 0; j &lt; winCombinations[i].length; j++) {
            if (board[winCombinations[i][j]] === player) {
                markCount++;
            }
            if (markCount === 3) {
                return true;
            }
        }
    }
    return false;
}
</code></pre>

<p><em>Notice how I removed the <code>var</code>s?</em></p>

<hr>

<p>I'm a little confused by what your <code>isInt</code> function is trying to accomplish.</p>

<p>To make it simpler, just run <code>isNaN</code> on the position. It will return <code>NaN</code> (which acts like <code>false</code> in a conditional) if the user entered a string, rather than a number.</p>
    </div>