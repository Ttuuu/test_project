<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General Observations</h3>

<ul>
<li>Method name <code>StartParse</code> suggests there would also be its complement <code>EndParse</code>. But there isn't. So the name is unfortunate.</li>
<li>Method <code>StartParse</code> does not have a return value. This makes it a bit of a black box to consumers. I would expect is to return the command that you parsed. <em>"I was thinking of making a base class for them"</em> -&gt; make a base class if commands share sufficient state, but prefer to make an interface <code>ICommand</code> if they share some state/operations.</li>
<li>Since method <code>StartParse</code> is void, your silent capturing of argument checks goes unnoticed to the consumer. Prefer throwing an <code>ArgumentException</code> or <code>ArgumentNullException</code>.</li>
<li>You have too many inline comments. If you feel these comments are required to accomodate the code, you might want to reconsider whether the code was written in a readable way to begin with. And comments as <code>.ToLower(); // make everything lower</code> are completely redundant.</li>
<li>Method <code>StartParse</code> calls <code>CallCommand</code>. While I think it should have returned a command, calling a method name <code>CallCommand</code> in a parser feels very strange. <code>CallCommand</code> to me means that you're executing a command, not parsing some input data to a command.</li>
<li>The method body of <code>StartParse</code> is verbose. You should really think about writing more compact code. The alternative solution provided in the other answer using a regex would be a good option, since the input language is rather simple.</li>
<li>I see no benefit in having a context of allowed verbs <code>List&lt;string&gt; Commands</code> if the switch case in method <code>CallCommand</code> does not use that list to verify against. You have hard-coded the <code>commandVerb</code> switches. Again on bad input, you silently ignore the bad input without the consumer knowing that the command was unrecognized.</li>
<li>Class <code>TextParser</code> could also use some refactoring. If you have recurring code like <code>currentChar == textQualifier &amp;&amp; (prevChar == '\0'</code> this should be a signal to rewrite the code to only have this line written once.</li>
<li><code>AssignCommand</code> internally uses a reference to global shared static data <code>GlobalObjects.Map</code>. This makes testing and reusing the class hard. Consider using IoC. Rather than a static parse method, you could provide <code>ICommandParser</code> interface with one or more specific parser implementations. They could then be registered to a IoC container.</li>
</ul>
    </div>