<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>In Python, a docstring goes <em>after</em> the function or class introduction. So instead of:</p>

<pre><code>""" return copy of graph with newNode node appended to toNode node """
def leaf_copy(graph, newNode, toNode):
</code></pre>

<p>write something like:</p>

<pre><code>def leaf_copy(graph, newNode, toNode):
    """Return a copy of graph with newNode appended to toNode."""
</code></pre>

<p>There are several advantages of doing it this way. Docstrings are available via the <a href="https://docs.python.org/3/library/functions.html#help" rel="nofollow noreferrer"><code>help</code></a> function in the interactive interpreter:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; help(leaf_copy)
Help on function leaf_copy in module __main__:

leaf_copy(graph, newNode, toNode)
    Return a copy of graph with newNode appended to toNode.
</code></pre>

<p>Also, some integrated development environments (for example, <a href="https://www.jetbrains.com/help/pycharm/using-docstrings-to-specify-types.html" rel="nofollow noreferrer">PyCharm</a>) can read and interpret docstrings to provide context-sensitive help or to generate reference documentation. And the built-in <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code></a> module can automatically run examples in docstrings.</p></li>
<li><p>The trivial graph with one node and no edges is generated like this:</p>

<pre><code>g = nx.Graph()
g.add_node(1)
</code></pre>

<p>but networkx has the function <a href="https://networkx.github.io/documentation/stable/reference/generated/networkx.generators.classic.trivial_graph.html" rel="nofollow noreferrer"><code>trivial_graph</code></a> which does something similar.</p></li>
<li><p>The specification of <code>genNextTreeList</code> is:</p>

<pre><code>""" get all n+1 node cases out of all n node cases in prevTreeList """
</code></pre>

<p>but this only the case if <code>prevTreeList</code> is the result of iterating <code>genNextTreeList</code> starting with an empty list. A more accurate specification would be something like this:</p>

<pre><code>def genNextTreeList(prevTreeList):
    """Return a list of the graphs that can be constructed by attaching a
    new node to any of the nodes in any of the graphs in prevTreeList,
    except that if prevTreeList is None or the empty list, in which
    case a list containing the trivial graph is returned.

    """
</code></pre></li>
<li><p>It says in the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Zen of Python</a>,</p>

<blockquote>
  <p>Special cases aren't special enough to break the rules.</p>
</blockquote>

<p>so I would drop the special case. It is easy enough for the caller to pass the list containing the trivial graph, if that's what's wanted.</p>

<p>Also, it should be clear now that <code>genNextTreeList</code> does not only operate on trees. So a better name and specification would be something like this:</p>

<pre><code>def augmented_graphs(graphs):
    """Return a list of the graphs that can be constructed by attaching a
    new node to any of the nodes in any of the graphs in the argument.

    """
</code></pre></li>
<li><p>Instead of having a flag <code>isomorphic</code> to determine whether the new graph has been found to be a duplicate, use Python's <code>for ... else: ...</code> statement, or the <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>any</code></a> or <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>all</code></a> functions.</p></li>
<li><p>There's no need to use <code>networkx.algorithms.isomorphism.GraphMatcher</code>: you could just call <a href="https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.isomorphism.is_isomorphic.html" rel="nofollow noreferrer"><code>networkx.algorithms.isomorphism.is_isomorphic</code></a> directly.</p></li>
<li><p><code>genNextTreeList</code> has a two-step construction of the result: first, construct a list <code>nextTreeList</code> of augmented graphs, and second, eliminate duplicates. These could be combined into a single step by testing each new graph for isomorphism as soon as you construct it, like this:</p>

<pre><code>from networkx.algorithms.isomorphism import is_isomorphic

def augmented_graphs(graphs):
    """Return a list of the graphs that can be constructed by attaching a
    new node to any of the nodes in any of the graphs in the argument.

    """
    result = []
    for old_graph in graphs:
        new_node = max(old_graph.nodes()) + 1
        for node in old_graph.nodes():
            new_graph = leaf_copy(old_graph, new_node, node)
            if not any(is_isomorphic(new_graph, g) for g in result):
                result.append(new_graph)
    return result
</code></pre></li>
<li><p>The top-level code does two things: it generates the free trees with up to <code>N</code> nodes, and it plots them. This would be better split into two functions each of which does a single thing, for example:</p>

<pre><code>from networkx.generators.classic import trivial_graph

def free_trees(n):
    """Return list of free trees with up to n vertices."""
    result = trees = [trivial_graph()]
    for i in range(n - 1):
        trees = augmented_graphs(trees)
        result.extend(trees)
    return result
</code></pre></li>
</ol>

<h3>2. Alternative approach</h3>

<p>A look at the NetworkX manual finds <a href="https://networkx.github.io/documentation/stable/reference/generated/networkx.generators.nonisomorphic_trees.nonisomorphic_trees.html" rel="nofollow noreferrer"><code>networkx.generators.nonisomorphic_trees.nonisomorphic_trees</code></a> which implements the algorithm of</p>

<ul>
<li>Robert Alan Wrights, Bruce Richmond, Andrew Odlyzko and Brendan D. Mckay (1986). “<a href="http://users.cecs.anu.edu.au/~bdm/papers/ConstantTimeTrees.pdf" rel="nofollow noreferrer">Constant time generation of free trees</a>”. <em>SIAM J. Comput.</em> 15:2, pp. 540–548.</li>
</ul>

<p>This generates the 19,320 free trees on 16 nodes (see <a href="http://oeis.org/A000055" rel="nofollow noreferrer">A000055</a>) in just over a second:</p>

<pre><code>&gt;&gt;&gt; from networkx.generators.nonisomorphic_trees import nonisomorphic_trees
&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit(lambda:list(nonisomorphic_trees(16)), number=1)
1.0307372510433197
</code></pre>

<p>Here are 100 of these trees:</p>

<p><img src="https://i.stack.imgur.com/6Int0.png" alt="Last 100 free trees on 16 nodes"></p>
    </div>