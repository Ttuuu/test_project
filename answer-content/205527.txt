<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whoa there, that's a lot of code for such a simple problem.</p>

<p>As a reader I don't understand what <code>arr</code> in <code>find_minimum</code> is and what each of its elements means. You as the author must document this since it is by no means obvious from the code. It's as if I gave you a sheet of paper, and instead of saying "hey, look at this nice story I wrote" I would say "hey, I have printed a number of digits for you".</p>

<p>I also don't understand the <code>count = 5</code> in the same function. There is no 5 mentioned in the problem statement, and having a 5 there just doesn't make any sense. Therefore it is a <a href="https://en.wikipedia.org/wiki/Magic_number_%28programming%29" rel="nofollow noreferrer">magic number</a>. Same for the <code>'*'</code>.</p>

<p>Instead of an int array, you should use a <code>struct</code> for your data. For example:</p>

<pre><code>typedef struct {
    int     dollars;
    int     cents;
} money;

typedef struct {
    int     number_of_shops;
    int     current_shop_no;
    money   cheapest_shop;
} shops_data;
</code></pre>

<p>Then you can write <code>shops_data.cheapest_shop.dollars</code> instead of the cryptic <code>arr[m + 4]</code>.</p>

<p>Still in <code>find_minimum</code>, there are four large blocks of cryptic calculations that look very similar, but I have no chance of understanding them since they all access the mysterious <code>arr</code> variable. I also don't see at first glance why you need four very similar blocks. That's just not included in the problem statement.</p>

<p>To get you started, I wrote the code for entering and validating a monetary amount. I had to fiddle quite a long time with the "magic" string for <code>sscanf</code>, so don't worry if it's hard to read. The <code>scanf</code> family of functions is powerful for extracting data from strings, but also easy to get wrong.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;

typedef struct {
    int dollars;
    int cents;
} money;

static int in_cents(money m) {
    return 100 * m.dollars + m.cents;
}

static int prompt_int(const char *prompt, int min, int max) {
    char line[100];

    while (printf("%s: ", prompt) != -1 &amp;&amp; fgets(line, sizeof line, stdin) != NULL) {
        int num;
        char end;

        if (sscanf(line, "%d %c", &amp;num, &amp;end) != 1) {
            fprintf(stderr, "error: Please enter a whole number.\n");

        } else if (num &lt; min) {
            fprintf(stderr, "error: The number must be at least %d.\n", min);

        } else if (num &gt; max) {
            fprintf(stderr, "error: The number must be at most %d.\n", max);

        } else {
            return num;
        }
    }

    exit(0);
}

static money prompt_money(const char *prompt, money min, money max) {
    char line[100];

    while (printf("%s: ", prompt) != -1 &amp;&amp; fgets(line, sizeof line, stdin) != NULL) {
        money amount;
        char ten_cents[2], one_cent[2], end;

        if (sscanf(line, "%d.%1[0123456789]%1[0123456789] %c", 
                &amp;amount.dollars, ten_cents, one_cent, &amp;end) != 3) {

            fprintf(stderr, "error: Please enter a monetary amount (such as 5.24).\n");
            continue;
        }

        amount.cents = 10 * (ten_cents[0] - '0') + (one_cent[0] - '0');

        if (in_cents(amount) &lt; in_cents(min)) {
            fprintf(stderr, "error: The amount must be at least %d.%02d.\n", min.dollars, min.cents);

        } else if (in_cents(amount) &gt; in_cents(max)) {
            fprintf(stderr, "error: The number must be at most %d.%02d.\n", max.dollars, max.cents);

        } else {
            return amount;
        }
    }

    exit(0);
}

int main(int argc, char **argv) {
    while (true) {
        int count = prompt_int("How many shops? ", 1, 100);
        printf("Got %d shops.\n", count);

        money amount = prompt_money("Please enter an amount", (money) {0, 0}, (money) {100, 0});
        printf("You entered %d.%02d.\n", amount.dollars, amount.cents);
    }
}
</code></pre>
    </div>