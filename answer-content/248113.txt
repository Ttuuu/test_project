<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For your current program we can improve a couple things:</p>
<ol>
<li>Rename <code>odd</code> to <code>odds</code> (since it is a <code>list</code>).</li>
<li>Use <code>not odds</code> instead of <code>len(odds) == 0</code> (see <a href="https://stackoverflow.com/questions/53513/how-do-i-check-if-a-list-is-empty">How do I check if a list is empty?</a> for a reason as to why this is preferred).</li>
<li>Delete <code>counter</code>. Since we only use <code>counter</code> in the <code>while</code> condition, we can actually replace the whole <code>while</code> with <code>for _ in range(10)</code>.</li>
<li>Follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a>. For example, using 4 spaces for each indentation level.</li>
</ol>
<p>Factoring in all these changes, we get:</p>
<pre><code>odds = []

for _ in range(10):
    x = int(input("Enter a number: "))
    if abs(x) % 2 != 0:
        odds.append(x)

if not odds:
    print("No odd number was entered")
else:
    print("The largest odd number is:", max(odds))
</code></pre>
<p>But we can also improve the efficiency of this program. Right now we keep track of all odd numbers, before choosing the max. This means that the space complexity is O(N). We can change this to O(1) by keeping track of the largest odd number like so:</p>
<pre><code>max_odd = None

for _ in range(10):
    x = int(input("Enter a number: "))

    if abs(x) % 2 != 0:
        max_odd = x if max_odd is None else max(max_odd, x)

if max_odd is None:
    print("No odd number was entered")
else:
    print("The largest odd number is: ", max_odd)
</code></pre>
<p>Note that we use <code>None</code> to signify that no odd number has been entered so far, in which case upon an odd number being entered we set <code>max_odd</code> to <code>x</code> directly. Otherwise, we set <code>max_odd</code> to <code>max(max_odd, x)</code>.</p>
<p>For this type of program you will not notice the increase in efficiency due to reducing the space complexity. But learning to recognize where these reductions are possible will allow you to see the same patterns in programs where it does matter.</p>
<p>There is finally one more thing you can do. If you want to allow the program to keep accumulating numbers in the event that a <code>str</code> is accidentally typed which cannot be parsed as a number (such as <code>""</code>), we can use a <code>try</code> / <code>except</code> wrapped in a <code>while</code> like so:</p>
<pre><code>while True:
    try:
        x = int(input("Enter a number: "))
        break
    except ValueError:
        continue
</code></pre>
<p>This would replace:</p>
<pre><code>x = int(input("Enter a number: "))
</code></pre>
<p>in the original code. This would keep prompting the user to type a <code>str</code> that is parsable as an <code>int</code> until they do. Since this is all happening in the same iteration of the <code>for</code>, the count of numbers they get to type (10 in our case) would not be reduced.</p>
    </div>