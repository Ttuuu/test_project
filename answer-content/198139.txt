<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>A few notes:</h2>

<ul>
<li>The function <code>clearContents(tag)</code> can be simplified to <code>tag.innerHTML = ''</code></li>
<li>You probably shouldn't be naming your function <code>main</code>, as it doesn't describe what it does.</li>
<li>You should use <strong><code>const</code></strong> and <strong><code>let</code></strong> when they are more appropriate than <code>var</code>.</li>
<li>In your HTML, all of your <code>&lt;input&gt;</code>'s are <code>type='text'</code>, at least <code>#year-count</code> should be <code>type='number'</code></li>
<li>In <code>perviousYearInterest</code> you spelled "previous" wrong, unless you meant "pervious".</li>
<li>Try scoping your variables to an object when they have a repeated part of their names.</li>
</ul>

<p>For example, take this:</p>

<pre><code>monthlyContributionInput = ...
numberOfYearsInput = ...
annualInterestRateInput = ...
</code></pre>

<p>It becomes:</p>

<pre><code>inputs = {
  monthlyContribution: ...,
  numberOfYears: ...,
  annualInterestRate: ...
}
</code></pre>

<ul>
<li>Instead of doing <code>.appendChild</code> <code>.createElement</code> and <code>.removeChild</code>, why not just use <code>.innerHTML</code></li>
</ul>

<p>Here's the function <code>main</code> but using <code>.innerHTML</code> to render all of the HTML elements at once, in what I would consider a much more readable manner.</p>

<pre><code>function main() {
  // turn input boxes into an Array
  const inputBoxes = Array.from(document.getElementsByTagName("input"));
  const table = document.getElementById("results");

  // store the inputs in an object to group them together
  const inputs = {
    monthlyContribution: document.getElementById("monthly-contribution"),
    numberOfYears: document.getElementById("year-count"),
    annualInterestRate: document.getElementById("annual-interest-rate")
  };

  const updateTable = function(event) {
    const years = Number(numberOfYearsInput.value);

    const monthlyContribution = Number(inputs.monthlyContribution.value);
    const yearlyContribution = monthlyContribution * 12;
    // No need to recalculate yearly contribution every loop

    const annualInterestRate = Number(annualInterestRateInput.value) / 100.0;
    const interestFactor = 1 + annualInterestRate / 12.0;
    let yearInterest = 0;
    let previousYearInterest = 0;

    // no need to clear table since we're replacing all of the `.innerHTML`

    table.innerHTML = [...Array(years)]
      .map(year =&gt; {
        ++year;
        const totalDeposit = yearlyContribution * year;
        const balance = monthlyContribution * ((Math.pow(interestFactor, monthCount + 1) - 1) / (interestFactor - 1) - 1);

        previousYearInterest = yearInterest;
        yearInterest = balance - totalDeposit;

        return `
          &lt;tr&gt;
            &lt;td&gt;${year}&lt;/td&gt;
            &lt;td&gt;${formatMoney(yearlyContribution)}&lt;/td&gt;
            &lt;td&gt;${formatMoney(yearInterest - previousYearInterest)}&lt;/td&gt;
            &lt;td&gt;${formatMoney(totalDeposit)}&lt;/td&gt;
            &lt;td&gt;${formatMoney(yearInterest)}&lt;/td&gt;
            &lt;td&gt;${formatMoney(balance)}&lt;/td&gt;
          &lt;/tr&gt;
        `;
      }).join('')
  };

  // iterate over input boxes, instead of for loop
  inputBoxes.forEach(input =&gt; input.oninput = updateTable)
}
</code></pre>

<p>This also makes it somewhat easier to move over to a framework that uses JSX if you ever wish to, because this style is very similar to JSX.</p>
    </div>