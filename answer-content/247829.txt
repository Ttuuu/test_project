<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all, the code looks good and the image editor is a lot of fun, I tried it out.</p>
<p>A few little suggestions:</p>
<h2>Variables with telling names</h2>
<p>The name <code>x</code> is not really a good name, is does not tell you anything about the purpose or the value of the variable:</p>
<pre><code>x = input("Do you want to edit an image?")
</code></pre>
<p>I would use a name like <code>user_input</code> or better <code>edit_image_user_input</code>. This makes the code easier to understand. However, I must admit that in this specific case the name is not that important because the variable is already used in the following line, and it is only used once. Still, I think choosing meaningful names is a good habit.</p>
<h2>When asking for input, tell the user which options are available and how they should be entered</h2>
<p>As a user, when I see a prompt like</p>
<pre><code>"Do you want to edit an image?"
</code></pre>
<p>I do not know how I should enter my decision. Shall I type "yes" or is "y" also okay? Is the input case-sensitive? Also, the question could be more specific: "Do you want to edit an image?" -&gt; Of course I want to edit an image, I just opened an image editor. You should tell the user that he can open an image from an URL.</p>
<h2>Avoid hardcoding</h2>
<p>To make changes to your code easier, replace the magic number <code>5</code> in the following piece of code with a variable</p>
<pre><code>if radius &lt; 5:
    radius = 5
</code></pre>
<p>I would suggest</p>
<pre><code>minimum_pen_radius = 5 # put this at the beginning of your script or in a separate config file
# [...]
if radius &lt; minimum_pen_radius:
    radius = minimum_pen_radius
</code></pre>
<hr>
<p>You assign the <code>background_colour</code> with a tuple holding the RGB values for black, even though you already defined black a few lines before:</p>
<pre><code>black = (0, 0, 0)
# [...]
background_colour = (0,0,0)
</code></pre>
<p>Better do it like this:</p>
<pre><code>black = (0, 0, 0)
# [...]
background_colour = black 
</code></pre>
<h2>Avoid repetitions</h2>
<p>Look at this large block of code:</p>
<pre><code>if event.unicode == 'n':
    background_colour = black
if event.unicode == 'w':
    background_colour = white
if event.unicode == 'r':
    background_colour = red
if event.unicode == 'o':
    background_colour = orange
if event.unicode == 'y':
    background_colour = yellow
if event.unicode == 'g':
    background_colour = green
if event.unicode == 'b':
    background_colour = blue
if event.unicode == 'i':
    background_colour = indigo
if event.unicode == 'p':
    background_colour = violet
if event.unicode == 'e':
    color = background_colour
gameDisplay.fill(background_colour)
if event.unicode == 'q':
    gameDisplay.blit(image, (0, 0))
</code></pre>
<p>and this one:</p>
<pre><code>if event.unicode == 'n':
    color = black
if event.unicode == 'w':
    color = white
if event.unicode == 'r':
    color = red
if event.unicode == 'o':
    color = orange
if event.unicode == 'y':
    color = yellow
if event.unicode == 'g':
    color = green
if event.unicode == 'b':
    color = blue
if event.unicode == 'i':
    color = indigo
if event.unicode == 'p':
    color = violet
if event.unicode == 'e':
    color = background_colour
if event.unicode == '=':
    radius += 5
if event.unicode == '-':
    radius -= 5
</code></pre>
<p>These are lots of repetitions, within each code block and between them. Something like this is not very flexible and it is a lot to read. For example, if you want to change the key for the color black, you have to do it twice: for background <em>and</em> pen color.
You could instead try another approach. First, create a mapping from key to color in form of a dictionary:</p>
<pre><code>key_to_color_map = {'n': black,
                    'w': white,
                    'r': red} # do this for all colors
</code></pre>
<p>Then, replace the large block of if statements with</p>
<pre><code>try:
    background_colour = key_to_color_map[event.unicode]
    gameDisplay.fill(background_colour)   
except KeyError:
    if event.unicode == 'q':
        gameDisplay.blit(image, (0, 0))     
</code></pre>
<p>For all keys that you defined beforehand you can simply look up the corresponding color in the dictionary. In case the key is not in the dictionary (throws a <code>KeyError</code>), you will jump to the except block. You can do this for the block where you set the background color as well as for the block where you set the pen color, and you can use the same dictionary <code>key_to_color_map</code> for both.</p>
    </div>