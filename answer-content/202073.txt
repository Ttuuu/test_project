<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design</h1>
<ul>
<li><p>Iterator categories: You try to make sure to support <code>InputIterator</code>, but then expose <code>current_position()</code>. Since callers of that function can do anything with the returned iterator, including dereferencing and/or advancing it, for pure <code>InputIterator</code>s this can invalidate <code>first</code>.</p>
<p>To support this, you'd need at least <code>ForwardIterator</code>s, since they have to provide a multipass guarantee. As a side effect, it would fix the <code>std::vector&lt;bool&gt;</code> issue, since its <code>iterator</code> isn't complying to one of the <code>ForwardIterator</code> requirements: <code>reference</code> must be equal to <code>value_type&amp;</code> or <code>const value_type&amp;</code>.</p>
<blockquote>
<p>Note: Just removing <code>current_position</code> wouldn't fix this, you'd also need to disable copying (same issue).</p>
</blockquote>
</li>
<li><p><code>endless_stream</code> interface: This is neither a range (doesn't contain <code>begin()</code> and <code>end()</code> member functions) nor an iterator. Instead, it looks like some range-like construct (maybe inspired from other languages?). As mentioned, this doesn't fit in well with usual standard library constructs.</p>
<p>Is there any specific reason this implementation doesn't orient itself on usual iterator semantics?</p>
</li>
<li><p>Is there any specific reason for allowing output operations, i.e. allowing modification of <code>default_value</code>? I'd think it wouldn't be too much of a restriction to only return <code>const ValueType&amp;</code> from <code>next</code> (basically adhering to <code>const_iterator</code> semantics).</p>
</li>
</ul>
<h1>Implementation</h1>
<ul>
<li><p>Most member functions can be made conditionally <code>noexcept</code>.</p>
</li>
<li><p>Some names are off:</p>
<ul>
<li><p><code>has_next</code>: I'd expect that one to always return <code>true</code> for an infinte range. From the implementation, I guess something like <code>end_reached</code> or <code>fully_traversed</code> was meant.</p>
</li>
<li><p><code>end</code> suggests there should be an <code>begin</code>, which there isn't (usually expected iterator semantics). I'd suggest renaming to <code>end_iterator</code> (or maybe <code>last_iterator</code>), or removing this function entirely.</p>
</li>
<li><p><code>current_position</code>: The <code>position</code> irks me a bit, as an iterator doesn't always conceptually represent a position (e.g. in a generator). <code>current_iterator</code> might be better.</p>
</li>
<li><p><code>endless_stream</code> isn't a stream as it would usually be understood in C++. Maybe it could be reworked into an <code>infinite_filler_range</code> (when matching the range criteria)?</p>
</li>
</ul>
</li>
<li><p>There is no way to get the same value multiple times (since <code>next</code> always advances <code>first</code>, if possible). I'd suggest splitting this operation into two parts: <code>advance()</code> and <code>value()</code> (or <code>current_value()</code>).</p>
</li>
<li><p>member initializer list: The general advice is to prefer aggregate initialization (using <code>{}</code>) over direct initialization (using <code>()</code>), unless the latter is absolutely required. So, <code>first</code> and <code>last</code> can and should use aggregate initialization, and <code>default_value</code> can go either way (though I prefer direct initialization in this case).</p>
</li>
</ul>
<h1>Usage example</h1>
<p>I don't think an implementation detail like <code>endless_stream</code> should leak into the interface. Instead, it might be better to create those <code>endless_stream</code> instances inside of <code>add_digit_lists</code>, taking either iterators or <code>const std::list&lt;int&gt;&amp;</code> as parameters.</p>
<p>Also, the output is in normal order, whereas the inputs are reversed. This might not be intended.</p>
    </div>