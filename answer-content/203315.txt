<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General practices</h2>

<ul>
<li><p><strong>Global variables</strong></p>

<p>You have a long script, with a lot of free-floating code that interacts in unclear ways.  You have some variables, such as <code>@board</code>, <code>@stack</code>, and <code>@found_words</code>, that essentially act as global variables.</p>

<p>I would consider <code>WORDS</code> (or <code>wordlist.txt</code>) and <code>@board</code> to be the inputs, but they aren't defined next to each other.  Since you'll be dealing with a lot of "words" in the code, I suggest calling it the "vocabulary" to be clear about what you mean.</p>

<p><code>@found_words</code> contains the outputs after running the script.  Since it's a <code>SortedSet</code>, its entries are always alphabetized, but you call <code>@found_words.sort</code> on it anyway.</p>

<p>It would be better to make the flow of information clear.  Also, the global variables should be scoped as instance variables, so I would define a class.  In my suggested solution below, see the last line, which gives an overview of how the code fits together:</p>

<pre><code>Boggle.new(vocabulary, board).search { |word| puts word }
</code></pre></li>
<li><p><strong>Backtracking</strong></p>

<p>Your code performs backtracking, using <code>@stack</code> to store the state of the traversal.  Consider using recursion instead, which would simplify the code a bit.  The maximum recursion depth is 16, so you wouldn't have to worry about the stack overflowing.</p>

<p>Your <code>@stack</code> and <code>@letters</code> are kind of redundant.  Considering that you could reconstruct <code>@letters</code> from the stack using a one-liner, I wouldn't bother keeping track of both.</p></li>
<li><p><strong>Coordinates</strong></p>

<p>Handling coordinate pairs is a bit of a pain.  If you could represent each position as a single integer instead of a pair of integers, then the code would be a bit simpler.</p></li>
<li><p><strong>Path building</strong></p>

<p>Instead of defining a <code>next_pos</code> function that may return <code>nil</code>, define a <code>neighbors</code> function that returns all valid neighboring positions.  The caller can just iterate over the results, and won't have to deal with the <code>nil</code> case.</p>

<p>Your loop that performs the <code>visited</code> test is just a set difference operation.  In my solution below, it's just <code>neighbors(path.last) - path</code>.</p></li>
<li><p><strong>Opening files</strong></p>

<p>Avoid calling <code>open</code> without closing the file handle.  The best way to do that is to call <code>open</code> with a block, in which case the file handle will be automatically closed when exiting the block.</p></li>
</ul>

<h2>Efficiency</h2>

<p>The simplest way to provide the illusion of performance is to output results as you find them, rather than all at once at the end.  In the suggested solution below, the <code>traverse</code> method takes a callback block that handles each result.  (You could, of course, adapt the callback to gather all of the results and print them in alphabetical order, if sorting was required.)</p>

<p>The <strong>most time-consuming part</strong> of the code is <code>WORDS.grep(/^#{@letters.join}/).any?</code>, because it involves a regex test for every word in the vocabulary.  One slight improvement would be <code>WORDS.any? { |w| w.start_with? prefix }</code>, which avoid using a regex, and also allows short-circuiting when a match is found.</p>

<p>Unfortunately, Ruby's <code>SortedSet</code> class lacks a <code>#contains_prefix?</code> method, which could accomplish the test efficiently.  In that sense, using a <code>SortedSet</code> to store the vocabulary is no better than using a <code>Set</code>.  (Java's <code>SortedSet</code>, in contrast, supports a <a href="https://docs.oracle.com/javase/10/docs/api/java/util/SortedSet.html#tailSet%28E%29" rel="nofollow noreferrer"><code>.tailSet()</code></a> operation.  You could test that the tail set is non-empty, and that its first entry is a prefix.)  To make your Boggle solver efficient, therefore, requires a better data structure for the vocabulary.  <strong>I recommend a <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">trie</a></strong> for this purpose.  You'll spend more time building the trie when loading the vocabulary, but the Boggle search will be very fast.</p>

<h2>Suggested solution</h2>

<pre><code>require 'set'

class Boggle
  # Boggle searcher.
  #
  # The vocabulary is a set of all valid words, in uppercase.
  #
  # The board is a 4x4 array of characters, or an array of
  # four 4-character strings, or a string of 16 characters, all
  # uppercase.  'Q' represents 'Qu'.
  def initialize(vocabulary, board)
    @vocabulary = vocabulary
    @board = board.flatten.join
    raise ArgumentError.new('Invalid board size') unless @board.length == 16
  end

  # Search the board, yielding each word that is found.
  def search      # :yields: word
    seen_words = Set.new
    16.times do |pos|
      traverse([pos]) { |word| yield word if seen_words.add? word }
    end
  end

private
  # Neighboring positions of a given index on a linearized 4x4 board
  def neighbors(pos)
    left  = (pos % 4 == 0) ? pos : pos - 1
    right = (pos % 4 == 3) ? pos : pos + 1
    Set[
      left - 4, pos - 4, right + 4,
      left,              right,
      left + 4, pos + 4, right + 4,
    ].delete_if { |p| p &lt; 0 || p &gt;= 16 }
  end

  def traverse(path, &amp;block)
    word = path.map { |pos| @board[pos] == 'Q' ? 'QU' : @board[pos] }.join
    block.call(word) if word.length &gt;= 3 &amp;&amp; @vocabulary.include?(word)

    (neighbors(path.last) - path).each do |pos|
      traverse(path + [pos], &amp;block)
    end if @vocabulary.any? { |v| v.start_with? word }
  end
end


vocabulary = open('wordlist.txt') do |f|
  Set.new(f.readlines.map { |line| line.chomp.upcase })
end

board = [
  'NPER',
  'PLRO',
  'IUNT',
  'JEGV',
]

Boggle.new(vocabulary, board).search { |word| puts word }
</code></pre>
    </div>