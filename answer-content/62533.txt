<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your intuition is correct. A constructor shouldn't be <em>doing</em> much, other than <em>constructing</em> an object.</p>

<p>I also agree that <code>PageCount</code> sounds much more like a property than a method... and <code>CountPages()</code> would be more appropriate for a method that actually counts pages.</p>

<p>Now, the problem would be that the <code>PageCount</code> getter would return <code>0</code> until <code>CountPages()</code> is called - setting it to <code>0</code> in the constructor would only be redundant, since <code>PageCount</code> would be an <code>int</code> and an <code>int</code> gets initialized to <code>default(int)</code>, which is <code>0</code>.</p>

<p>I think your problem stems from the class doing too many things. I'd introduce a <code>InvoicePdfLoader</code> class exposing some <code>Load(string)</code> method that returns an immutable <code>struct</code>:</p>

<pre><code>public class InvoicePdfLoader
{
    public InvoiceInfo Load(string path)
    {
        int pageCount;
        using (var reader = new PdfReader(path)) // assuming PdfReader : IDisposable
        {
            pageCount = reader.NumberOfPages
        }

        return new InvoiceInfo(path, pageCount);
    }
}
</code></pre>

<p>Notice the <code>using</code> block around the <code>reader</code> instance: if <code>PdfReader</code> implements the <code>IDisposable</code> interface, you <em>need</em> to properly dispose it. If it doesn't, the way you have it (manually closing it in a <code>finally</code> clause) is perfect.</p>

<p>And then <code>InvoiceInfo</code> is just a simple, lightweight value type:</p>

<pre><code>public struct InvoiceInfo
{
    private readonly string _fullPath;
    private readonly string _fileNameWithoutExtension;
    private readonly string _fileName;
    private readonly string _batchSequenceNumber;
    private readonly int _pageCount;

    public InvoiceInfo(string path, int pageCount)
    {
        _fullPath = path;
        _fileNameWithoutExtension = Path.GetFileNameWithoutExtension(path);
        _fileName = Path.GetFileName(path);
        _batchSequenceNumber = Path.GetFileNameWithoutExtension(path)
                                   .Split('_')
                                   .LastOrDefault();
        _pageCount = pageCount;
    }

    public string FullPath { get { return _fullPath; } }
    public string FileNameWithoutExtension { get { return _fileNameWithoutExtension; } }
    public string FileName { get { return _fileName; } }
    public string BatchSequenceNumber { get { return _batchSequenceNumber; } }
    public int PageCount { get { return _pageCount; } }
} 
</code></pre>

<p>I find the name <code>InvoiceInfo</code> better conveys the essence of what you're having here - it's not <em>really</em> an <code>Invoice</code>, rather just some metadata <em>about</em> an invoice.</p>
    </div>