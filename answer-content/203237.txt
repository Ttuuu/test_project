<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This exercise is somewhat unsettling. On the one hand, a <code>stack</code>, as part of a <a href="https://en.wikipedia.org/wiki/Pushdown_automaton" rel="nofollow noreferrer">pushdown automaton</a>, is the canonical way to decide balanced languages such as this one; on the other hand, there are much more efficient, idiomatic and practical ways to solve that particular exercise. It is unclear whether it's a computer science exercise or a language learning exercise, one to make concepts sink in or one to discover C++'s expressiveness.</p>

<p>A stack would have been more easily justified if the function argument had been a <code>std::istream&amp;</code> for instance, since it can be traversed only once; or if starting / ending tags had come of different kinds (if they're all the same an integer makes for a perfect stack and counting shouldn't be discriminated).</p>

<p>As @Mike Borland said, the trick to answer that question is to avoid explicit counting by <code>pop</code>ping the stack filled with <code>a</code>s while you iterate over the rest of the string. Something along the lines:</p>

<pre><code>#include &lt;stack&gt;
#include &lt;string&gt;

bool is_ab_balanced(const std::string&amp; str) {
    if (!str.size()) return false; 
    auto it = str.begin();
    std::stack&lt;char&gt; as;
    while (it != str.end() &amp;&amp; *it == 'a') as.push(*it++);
    while (!as.empty()) {
        if (it == str.end() || *it != 'b') return false;
        as.pop(); ++it;
    }
    return it == str.end();
}
</code></pre>

<p>By the way, you'll notice that:</p>

<ol>
<li><p>it always is better to use standardized containers unless you need customized behavior: <code>std::stack</code> is certainly better optimized and tested than <code>linkedStackType&lt;&gt;</code></p></li>
<li><p>you shouldn't take a <code>string</code> by value as an argument, unless you intend to modify it while keeping the original string unchanged. Here, there's no modification, so use a <code>const</code> reference instead.</p></li>
<li><p>you should get rid of unused variables (see <code>a</code> and <code>b</code> in your second version). Those superfluous variables probably are a by-product of bad habits: declaring variables too far ahead of their use, and not enabling all warnings when you compile your code.</p></li>
<li><p><code>iterator</code>s are a better way to iterate over a range: it's more idiomatic, it's necessary to leverage the power of the STL, and it also avoids that extra <code>size</code> variable.</p></li>
<li><p>A few more key-strokes are better than <code>using namespace std</code>, which is <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">is a bad idea</a></p></li>
</ol>

<p>But, as I said, a good exercise should look more like real life. In real life, you use a stack only if it is the best way to go. So how would you check if a string belongs to the language if you could choose without restriction?</p>

<p>My take on that would be:</p>

<pre><code>#include &lt;string&gt;
#include &lt;algorithm&gt;

using Iterator = std::string::iterator;
bool is_balanced(Iterator first, Iterator last) {
    auto middle = std::next(first, std::distance(first, last) / 2);
    return std::equal(first, middle, middle, last, [](auto a, auto b) {
        return a == 'a' &amp;&amp; b == 'b';
    });
}
</code></pre>

<p>Or, other more meaningful exercises would have been:</p>

<ul>
<li><p>how would you check if parenthesis are balanced in an expression (I wouldn't use a stack here either)?</p></li>
<li><p>how would you check if html tags are correctly balanced (here using a stack is meaningful)?</p></li>
</ul>
    </div>