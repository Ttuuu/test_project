<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are two ways to solve this problem. The first one is <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.where.html" rel="nofollow noreferrer"><code>numpy.where</code></a>, which can take two arrays and it will choose from one wherever a condition is true and from the other wherever it is false. This only works if your piecewise function has only two possible states (as is the case here):</p>

<pre><code>def waf_delay(delays):
    return np.where(np.abs(delays) &lt;= delay_chip*(1+delay_chip/integration_time),
                    1 - np.abs(delays)/delay_chip,
                    -delay_chip/integration_time)
</code></pre>

<p>Another more general possibility is to use <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.piecewise.html" rel="nofollow noreferrer"><code>numpy.piecewise</code></a>, but that is probably overkill here:</p>

<pre><code>def f1(x):
    return 1 - np.abs(x)/delay_chip

def f2(x):
    return -delay_chip/integration_time

cut_off = delay_chip*(1+delay_chip/integration_time)
y = np.piecewise(x, [np.abs(x) &lt;= cut_off, np.abs(x) &gt; cut_off], [f1, f2])
</code></pre>

<p>Note that in both cases no <code>for d in delays</code> is needed, because all functions used are vecotorized (the basic arithmetic operations for <code>numpy</code> arrays are and so is <code>numpy.abs</code>).</p>
    </div>