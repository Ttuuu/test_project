<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>early pruning</h1>
<p>This is very nice:</p>
<pre><code>        // delete any that are over our budget
</code></pre>
<p>Doing it <em>before</em> sorting can slightly speed the sorting operation.
I say slightly because "items over budget" is determined by the input,
and it will be some fraction <code>f</code> of an input item category,
so the savings is O(f * n * log n).</p>
<h1>early discard</h1>
<p>This is a bigger deal.</p>
<pre><code>        // sort the list &amp; delete anything over budget
</code></pre>
<p>For <code>k</code> keyboards and <code>d</code> drives, the sort does O(k * d * log k * d) work.
Discarding within this loop would be an even bigger win.</p>
<h1>consistent idiom</h1>
<p>It was a little odd that you used</p>
<pre><code>        combinedTotals.RemoveAll(n =&gt; n &gt; budget);
</code></pre>
<p>and</p>
<pre><code>        array.Where(n =&gt; n &lt; budget).ToArray();
</code></pre>
<p>to accomplish the same thing.
There's no speed difference but consider phrasing the same thing in the same way.</p>
<h1>reversing</h1>
<p>If you pass into <code>Sort</code> something that implements the <code>IComparer</code> interface,
you can change the comparison order and thus skip the <code>Reverse</code> step entirely.</p>
<h1>arithmetic</h1>
<p>Arbitrarily choose one of the categories as the driving category, perhaps keyboard.
Sort the drive prices, while leaving the keyboards in arbitrary order.
Note the min drive price, and use that along with budget for immediately pruning infeasible keyboards.</p>
<p>Loop over all surviving keyboards.
Target price is <code>budget - kb_price</code>.
Do binary search over drives for the target,
finding largest feasible drive,
and use that to update "best combo so far".
No need to sort them, you need only retain the "best" one.</p>
    </div>