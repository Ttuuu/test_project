<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would be very useful to see the associated <code>MethodInfo</code> instance while implementing source in the situation like this:</p>

<pre><code>interface IMyWebApi
{
    [Description("GET orders/{0}")]
    Order GetOrder(int id); 
}

IWebApi api = Proxy.Create&lt;IMyWebApi&gt;(new RestApi("http://example.com/api"));
Order order = api.GetOrder(33);
</code></pre>

<p>So I made the proxy injecting it when <code>DescriptionAttribute</code> is provided:</p>

<pre><code>[TestMethod]
public void Call()
{
    dynamic c = new ExpandoObject();
    c.Add = (Func&lt;int, int, int&gt;)((a, b) =&gt; a + b);
    c.Divide = (Func&lt;MethodInfo, int, int, int&gt;)((mi, a, b) =&gt; a / b);

    ICalculator proxy = Proxy.Create&lt;ICalculator&gt;(c);
    Assert.AreEqual(3, proxy.Add(1, 2));
    Assert.AreEqual(2, proxy.Divide(4, 2));
}

public interface ICalculator
{
    int Add(int a, int b);

    [Description]
    int Divide(int a, int b);
}
</code></pre>

<p>It should provide access to all interface method attributes and return types.</p>

<p>Updated <code>Interceptor</code> looks like this now:</p>

<pre><code>class Interceptor : IInterceptor
{
    public Interceptor(object target) =&gt; Target = target;
    object Target { get; }
    public void Intercept(IInvocation invocation) =&gt;
        invocation.ReturnValue = Dynamic.InvokeMember(
            Target,
            invocation.Method.Name,
            invocation.Method.IsDefined(typeof(DescriptionAttribute)) 
                ? invocation.Arguments.Prepend(invocation.Method).ToArray()
                : invocation.Arguments);
}
</code></pre>
    </div>