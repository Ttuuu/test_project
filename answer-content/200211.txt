<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For anything related to building URL query strings from key-values pairs, you should let <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode" rel="nofollow noreferrer"><code>urllib.parse.urlencode</code></a> do the work for you. It can also handle quoting and other special cases for you. To do that, you have to convert your data to a dictionary.</p>

<p>This is easy if you start with a <code>pd.Series</code>:</p>

<pre><code>from urllib.parse import urlencode


def build_url_params(serie):
    parameters = serie[~pd.isnull(serie)].to_dict()
    return urlencode(parameters)
</code></pre>

<p>Then you just need to provide <code>Series</code> to this function instead of tuples:</p>

<pre><code>def populate_url_params(df):
    df['URL parameters'] = df.apply(build_url_params, axis=1)


if __name__ == '__main__':
    df = pd.read_csv('urlbuilder.csv', encoding='utf-8-sig', engine='python')
    populate_url_params(df)
    print(df)
</code></pre>

<p>Or if you want to go the manual iteration route, you can use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iterrows.html" rel="nofollow noreferrer"><code>df.iterrows()</code></a> instead of <code>df.itertuples()</code>.</p>
    </div>