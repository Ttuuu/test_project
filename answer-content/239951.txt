<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think a class provides benefits when you need <em>two</em> things:</p>

<ul>
<li>Persistent data associated with an instance, and</li>
<li>Methods that do something with the data</li>
</ul>

<p>If you <em>only</em> need to consolidate data in a single data structure, an object or array is simpler and more suitable.</p>

<p>If you <em>only</em> need to perform an operation on data and produce a result, and then have other not-very-related code work with the result, a plain function is simpler and more suitable.</p>

<p>Your situation looks to fall into the second category. You have data that you want to validate, but <em>all</em> you want to do is validate, and the possible <code>class</code> wouldn't be doing anything else. If all you're doing with a <code>class</code> to set a property, then retrieve that property in a method to process data, and then you never use the instance again, there's not much point to having the class at all - it's just noise. I'd use a standalone function instead.</p>

<pre><code>export const validate = (data) =&gt; {
  const results = {};

  const validateInputDataForMissingKeys = checkInputDataForMissingKeys(data);
  if (validateInputDataForMissingKeys) Object.assign(results, validateInputDataForMissingKeys);

  const validateInputDataForMissingValues = checkInputDataForMissingValues(data);
  if (validateInputDataForMissingValues) Object.assign(results, { validateInputDataForMissingValues });

  const validateInputDataMaximums = checkInputDataMaximums(data);
  if (validateInputDataMaximums) Object.assign(results, { validateInputDataMaximums });

  return results;
};
</code></pre>

<p>Then call it like:</p>

<pre><code>const validationForInputsResult = validate(inputData);
</code></pre>

<p>Also note that you should strongly prefer using <code>const</code> instead of <code>let</code>. <code>let</code> is a <em>warning</em> to other readers of your code (possibly including yourself, in the future) that you may be reassigning the variable in the future. If you're not going to reassign, better to use <code>const</code>, since it requires less cognitive overhead.</p>

<p>The <code>checkInput</code> functions and <code>validateInput</code> variables look a bit repetitive. If possible, it would be nice to change things so that they return an empty object instead of a falsey value, and have <code>checkInputDataForMissingValues</code> and <code>checkInputDataMaximums</code> return objects with <code>validateInputDataForMissingValues</code> and <code>validateInputDataMaximums</code> properties. That way, you can spread them directly into the <code>results</code> object:</p>

<pre><code>const validate = data =&gt; ({
  ...checkInputDataForMissingKeys(data),
  ...checkInputDataForMissingValues(data),
  ...checkInputDataMaximums(data),
});
</code></pre>

<p>Having 3 separate <code>checkInputData</code> functions plus <code>validate</code> feels a <em>tiny</em> bit off to me. Organization-wise, you could consider putting them all into an object, together with <code>validate</code> if they're not used anywhere else, that way all the related functionality is in a single data structure:</p>

<pre><code>export const validator = {
  checkInputDataForMissingKeys(data) {
    // ...
  },
  checkInputDataForMissingValues(data) {
    // ...
  },
  checkInputDataMaximums(data) {
    // ...
  },
  validate(data) {
    return {
      ...this.checkInputDataForMissingKeys(data),
      ...this.checkInputDataForMissingValues(data),
      ...this.checkInputDataMaximums(data),
    };
  }
};
</code></pre>

<p>and</p>

<pre><code>const validationForInputsResult = validator.validate(inputData);
</code></pre>
    </div>