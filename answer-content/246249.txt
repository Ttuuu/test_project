<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Representing lists as a head and a tail is a common method, but honestly not the most Pythonic way to do things. Additionally, everything you're doing is appending lists together - this is generally inefficient due to the way memory has to be reallocated and the data has to be moved. This <a href="https://stackoverflow.com/q/49078082/3076272">StackOverflow question</a> has some interesting details. (Although I talk about efficiency, generally recursion and deeply nested generators may not be the most efficient either. Anytime you're considering performance, make sure you understand the requirements of your functionality and measure your own performance before attempting to optimize too much)</p>
<p>Ultimately, I think the cleanest solution would be to create a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a>:</p>
<pre class="lang-py prettyprint-override"><code>def flatten(iterable):
    try:
        iterator = iter(iterable)
    except TypeError:
        # this is potentially controversial, depending on your use case
        # you may want a mutually recursive function, or a keyword argument, to 
        # indicate if you want to yield the input vs raise an error
        yield iterable 
    else:
        first_value = next(iterator)
        if first_value is iterable:
            yield first_value
        else:
            yield from flatten(first_value)
            for value in iterator:
                yield from flatten(value)
    
def get_flat_list(iterable, constructor=list):
    return constructor(flatten(iterable))
</code></pre>
<p>A few things to call out - explicit <code>isinstance</code> checks are not always a Pythonic solution. Many libraries and functions in the Python ecosystem make heavy use of <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">duck typing</a> - if it iterates like a list, then it is a list as far as that functionality is concerned. You should re-evaluate whether it is a strict requirement that <em>lists</em> are supported, or <em>iterables</em>. I suspect that you want most/all iterables to be supported, and thus see if there are other ways to do this. There are generally two ways to do this:</p>
<ul>
<li>Just try, and handle the error</li>
<li>Direct inspection of properties to see if it can be used (e.g. <code>hasattr(iterable, "__getitem__") or hasattr(iterable, "__iter__")</code>)</li>
</ul>
<p>In this case, I'm just <code>try</code>ing. You might also notice the <code>first_value is iterable</code> stuff - this is to handle cases like a string, where both <code>"abc"</code> and <code>"a"</code> are iterable, and you would hit infinite recursion. In this case, I'm simply making sure that if the first item of an object is itself we don't recurse forever. This probably isn't comprehensive, but it handles at least the string case.</p>
<p>I've also stopped restricting us to returning lists - what if you want a tuple? Some other type?</p>
<p>Lastly, I've renamed things to match Python's PEP8 naming conventions</p>
<hr>
<p>As Peilonrayz pointed out in the comments, <code>isinstance</code> has become more "accepted" outside of core Python development recently (generally, strict types are more in vogue overall).</p>
<p>For example, instead of using a <code>try/except</code>, you could do <code>isinstance(foo, collections.abc.Iterable)</code> instead of catching the <code>TypeError</code> when we do <code>iterator = iter(iterable)</code>. <strong>Note</strong> - <code>collections.abc.Iterable</code> will only work for objects that define the <code>__iter__</code> dunder-method, so <code>__getitem__</code> based iteration won't be usable with this approach. This is another good reason to avoid using <code>isinstance</code> if you have a good alternative (in our case, checking for <code>iter(iterable)</code>).</p>
<p>Alternatively, some new proposed functionality in Python is <code>isinstance</code> based - see <a href="https://www.python.org/dev/peps/pep-0622/" rel="nofollow noreferrer">PEP 622</a>. Theoretically, you could come up with something like this (using <a href="https://www.python.org/dev/peps/pep-0622/#id43" rel="nofollow noreferrer">sequence patterns</a>):</p>
<pre class="lang-py prettyprint-override"><code>match iterable:
    case ((inner_head, *inner_tail), *tail):
        yield inner_head
        yield from flatten(inner_tail)
        yield from flatten(tail)
    case ():
        return
    case _:
        yield iterable
</code></pre>
    </div>