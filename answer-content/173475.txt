<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Actually that what you have implemented is a Registry not a Factory, so probably you should remove Factory from the class name and use registry.</p>

<p>You could do the following to generalize the class (I am reusing your code):</p>

<pre><code>package apibuilder.service.factory;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

import apibuilder.service.Service;

public class ServiceRegistry {
    private static final Map&lt;Type, Service&gt; registrationMap = new HashMap&lt;&gt;();

    public static Service getService(final Type entityType) {
        if (registrationMap.containsKey(entityType)) {
            return registrationMap.get(entityType);
        }

        return null;
    }

    public static void registerServices(final Service[] services) {
        for (Service service : services) {
            Type entityType = ((ParameterizedType) service.getClass().getGenericInterfaces()[0])
                    .getActualTypeArguments()[0];
            registrationMap.put(entityType, service);
        }
    }
}
</code></pre>

<p>Then you could define the following interface:</p>

<pre><code>public interface Service {

}
</code></pre>

<p>It will serve as a marker interface and just declare all of your other interfaces as follow (IGetService for example):</p>

<pre><code>public interface IGetService&lt;T extends BaseEntity&gt; extends Service {

   ... whatever methods you have ...

}
</code></pre>
    </div>