<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Trying to avoid duplicating any comments you have already had</p>

<ul>
<li>Why name the class "ST"? It's not very clear to another developer what a class called ST actually does</li>
<li>Why extend EQ? Generally inheritance is use to make another class that provides the same functionality but more specialised, e.g. A "Car" might extend a class "Vehicle". I think it would be a good idea to keep these methods separate from EQ. If you wanted to use this class for Statistical Analysis for a different case other than the data in EQ, you would have to include everything from EQ just to access these methods.</li>
<li>Why implement ConstEQ? All of your usage of these constants seem to be by referring to "ConstEQ", this will work without "implements ConstEQ". The only reason you would implement ConstEQ is if you want to provide these constants for code which uses the ST class ( so they would call "ST::CONSTANT_NAME")</li>
<li>What if someone calls getMean with something other than an array? e.g. <code>getMean('hello');</code>
You can require an array by type hinting the parameter. <code>function getMean(array $values)</code></li>
<li>You mean want to consider more thorough validation of the values passed to your functions, if you receive an array of strings when you expect an array of integers, you will have very strange behaviour, it would be better to throw an Exception in a case like that.</li>
<li><p>In PHP 7 you can hint on the return type of a method. It's useful as documentation for another developer but also means code which uses the method can rely on the type being returned without worrying about some failure case that returns something else. <code>function getMean(array $values): int</code></p></li>
<li><p>When you have an <code>if</code> block which always returns you can actually skip the "else" to make code a bit simpler to read</p></li>
</ul>

<pre><code>
    if (count($array) == 0) {
        return ConstEQ::NEAR_ZERO_NUMBER;
    }
    return array_sum($array) / count($array);

</code></pre>

<ul>
<li>You could simplify getNormalize similarly</li>
</ul>

<pre><code>
    if ($max - $min != 0) {
        return 2 * (($value - $min) / ($max - $min)) - 1;
    }
    return 2 * (($value - $min)) - 1;

</code></pre>

<ul>
<li>The comment for isNumber implies you are accepting a string as a parameter but it looks like this actually accepts an array</li>
</ul>
    </div>