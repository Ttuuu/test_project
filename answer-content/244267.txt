<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I don't see any value in writing a private method that fetches <code>$_SERVER</code> data.  I mean, all you have to do is nominate the key and the value is accessed and I can't really foresee the need to change the source of the data -- so avoid the unnecessary overhead.</p>
</li>
<li><p>Running with YCS's advice to only rely on <code>REMOTE_ADDR</code>, that condition block can be reduced to a single line levering a ternary operator (i.e. <code>?:</code>).</p>
</li>
<li><p>Regex is great and powerful, but it should only be used when it offers a valuable advantage over simpler/faster methods.  With the exception of <code>Mac OS X</code> (which employs an alternative/pipe), the <code>$os_array</code> is merely checking for the case-insensitive existence of a substring in the string -- this is performed by <code>stripos()</code> without rolling out the regex engine.  Unless you are planning on finding multiple matches and returning the last match, you should write a conditional <code>break</code>/<code>return</code> for best efficiency in your loop.</p>
</li>
<li><p>Same advice again for <code>get_browser()</code>.</p>
</li>
<li><p>In <code>get_device()</code>, you only care if there is a generated value greater than 0 before your conditional expressions are satisfied -- so why bother counting higher than 1?  Don't, of course, unless there is something in your script that you are not telling us (e.g. <code>// do something for tablet devices</code>).  As soon as you have what you want, short circuit the flow and take the desired action(s).</p>
</li>
<li><p>Your first <code>$tablet_browser</code> regex pattern has unnecessary parentheses which can be removed without damaging the pattern logic.  It is pointless to call <code>strtolower()</code> if your pattern has a case-insensitive flag on it.  Omit the unneeded function call.</p>
</li>
<li><p>You didn't escape the dots in your regex pattern (<code>up.browser|up.link</code>), this makes your pattern potentially less accurate.</p>
</li>
<li><p>As a general piece of advice, pay closer attention to spacing and tabbing.  Keeping your script in good spacing makes it easier to read and maintain.</p>
</li>
<li><p>Writing <code>else if</code> as two words in PHP is <a href="https://www.php-fig.org/psr/psr-12/#:%7E:text=The%20keyword%20elseif%20SHOULD%20be%20used%20instead%20of%20else%20if%20so%20that%20all%20control%20keywords%20look%20like%20single%20words." rel="nofollow noreferrer">a violation of PSR-12 guidelines</a>.  It is effectively using two separate <a href="https://www.php.net/manual/en/reserved.keywords.php" rel="nofollow noreferrer">control structures</a> -- the former of which is not enjoying the expected curly brace syntax.</p>
</li>
<li><p>It is good practice to define the return data type from each method.</p>
</li>
</ul>
<p>Code:</p>
<pre><code>class UserInfo
{        
    public static function get_ip(): string
    {
        return getenv('REMOTE_ADDR') ?: 'UNKNOWN';
    }

    public static function get_os(): string
    {
        $os_array = [
            'windows nt 10'  =&gt; 'Windows 10',
            'windows nt 6.3' =&gt; 'Windows 8.1',
            'windows nt 6.2' =&gt; 'Windows 8',
            'windows nt 6.1' =&gt; 'Windows 7',
            'windows nt 6.0' =&gt; 'Windows Vista',
            'windows nt 5.2' =&gt; 'Windows Server 2003/XP x64',
            'windows nt 5.1' =&gt; 'Windows XP',
            'windows xp'     =&gt; 'Windows XP',
            'windows nt 5.0' =&gt; 'Windows 2000',
            'windows me'     =&gt; 'Windows ME',
            'win98'          =&gt; 'Windows 98',
            'win95'          =&gt; 'Windows 95',
            'win16'          =&gt; 'Windows 3.11',
            'macintosh'      =&gt; 'Mac OS X',
            'mac os x'       =&gt; 'Mac OS X',
            'mac_powerpc'    =&gt; 'Mac OS 9',
            'linux'          =&gt; 'Linux',
            'ubuntu'         =&gt; 'Ubuntu',
            'iphone'         =&gt; 'iPhone',
            'ipod'           =&gt; 'iPod',
            'ipad'           =&gt; 'iPad',
            'android'        =&gt; 'Android',
            'blackberry'     =&gt; 'BlackBerry',
            'webos'          =&gt; 'Mobile'
        ];

        foreach ($os_array as $substring =&gt; $value) {
            if (stripos($_SERVER['HTTP_USER_AGENT'], $substring) !== false) {
                return $value;
            }
        }   
        return "Unknown OS Platform";
    }

    public static function get_browser(): string
    {
        $browser_array = [
            'msie'      =&gt;  'Internet Explorer',
            'Trident'   =&gt;  'Internet Explorer',
            'firefox'   =&gt;  'Firefox',
            'safari'    =&gt;  'Safari',
            'chrome'    =&gt;  'Chrome',
            'edge'      =&gt;  'Edge',
            'opera'     =&gt;  'Opera',
            'netscape'  =&gt;  'Netscape',
            'maxthon'   =&gt;  'Maxthon',
            'konqueror' =&gt;  'Konqueror',
            'ubrowser'  =&gt;  'UC Browser',
            'mobile'    =&gt;  'Handheld Browser'
        ];

        foreach ($browser_array as $substring =&gt; $value) {
            if (stripos($_SERVER['HTTP_USER_AGENT'], $substring) !== false) {
                return $value;
            }
        }
        return "Unknown Browser";
    }

    public static function  get_device(): string
    {
        if (preg_match('/tablet|ipad|playbook|android(?!.*(mobi|opera mini))/i', $_SERVER['HTTP_USER_AGENT'])) {
            // do something for tablet devices
            return 'Tablet';
        }
        if (stripos($_SERVER['HTTP_USER_AGENT'], 'opera mini') !== false) {
            $stock_ua = $_SERVER['HTTP_X_OPERAMINI_PHONE_UA'] ?? $_SERVER['HTTP_DEVICE_STOCK_UA'] ?? '';
            if (preg_match('/tablet|ipad|playbook|android(?!.*mobile)/i', $stock_ua)) {
                // do something for tablet devices
                return 'Tablet';
            }
            // do something for mobile devices
            return 'Mobile';
       }

       $mobile_keywords = ['up.browser', 'up.link', 'mmp', 'symbian', 'smartphone', 'midp', 'wap', 'phone', 'android', 'iemobile'];
       foreach ($mobile_keywords as $keyword) {
           if (stripos($_SERVER['HTTP_USER_AGENT'], $keyword) !== false) {
               // do something for mobile devices
               return 'Mobile';
           }
       }

       if (stripos($_SERVER['HTTP_ACCEPT']), 'application/vnd.wap.xhtml+xml') &gt; 0 || isset($_SERVER['HTTP_X_WAP_PROFILE']) || isset($_SERVER['HTTP_PROFILE'])) {
           // do something for mobile devices
           return 'Mobile';
        }

        $mobile_agents = [
            'w3c ', 'acs-', 'alav', 'alca', 'amoi', 'audi', 'avan', 'benq', 'bird', 'blac',
            'blaz', 'brew', 'cell', 'cldc', 'cmd-', 'dang', 'doco', 'eric', 'hipt', 'inno',
            'ipaq', 'java', 'jigs', 'kddi', 'keji', 'leno', 'lg-c', 'lg-d', 'lg-g', 'lge-',
            'maui', 'maxo', 'midp', 'mits', 'mmef', 'mobi', 'mot-', 'moto', 'mwbp', 'nec-',
            'newt', 'noki', 'palm', 'pana', 'pant', 'phil', 'play', 'port', 'prox', 'qwap',
            'sage', 'sams', 'sany', 'sch-', 'sec-', 'send', 'seri', 'sgh-', 'shar', 'sie-',
            'siem', 'smal', 'smar', 'sony', 'sph-', 'symb', 't-mo', 'teli', 'tim-', 'tosh',
            'tsm-', 'upg1', 'upsi', 'vk-v', 'voda', 'wap-', 'wapa', 'wapi', 'wapp', 'wapr',
            'webc', 'winw', 'winw', 'xda ', 'xda-'
        ];
        if (in_array(strtolower(substr($_SERVER['HTTP_USER_AGENT'], 0, 4)), $mobile_agents)) {
            // do something for mobile devices
            return 'Mobile';
        }

        // do something for everything else
        return 'Computer';
    }
}
</code></pre>
    </div>