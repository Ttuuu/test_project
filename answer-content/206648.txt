<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When I test your method with a file stream, it runs forever, because there is no real stop condition. When EOF is reached it just keeps returning an empty string. You should return <code>null</code> or signal otherwise to the client that no more lines was found.</p>

<p>You can maybe do:</p>

<pre><code>  ...
  if (stream.Position &gt;= stream.Length)
    return null;

  return encoding.GetString(Buffer.ToArray());
}
</code></pre>

<p>you can't just check the size of the <code>Buffer</code> because a line actually can be empty.</p>

<hr>

<p>Another consideration I would make is the definition of a new line is in the current environment/context. It can be tricky because you maybe receive data from other environments.</p>

<p>.NET provides <code>Environment.NewLine</code> that defines the current environments new line sequence.</p>

<p>If you have a sequence as <code>AAAA\n\n\r\nBBBBB</code> - how many lines is that? I would say 4 (<code>"AAA</code>, "", "", "BBB") but your method gives 3.</p>

<hr>

<p>If you need a <code>ReadLine()</code> method, you probably need to read more than just one line. I would consider to implement a <code>ReadLines()</code> method instead:</p>

<pre><code>public static IEnumerable&lt;string&gt; ReadLines(this Stream stream, Encoding encoding = null)
{
  // TODO: the actual implementation...
  encoding = encoding ?? Encoding.UTF8;
  int bytesRead = 0;
  while ((bytesRead = stream.Read(buffer, 0, bufferSize)) &gt; 0)
  {
    if (new line found)
      yield return encoding.GetString(resultBuffer.ToArray());
    ...
  }
}
</code></pre>

<p>You can in this way read larger chunks of bytes from the stream and buffer them in a much more efficient way than when reading one byte at a time.</p>
    </div>