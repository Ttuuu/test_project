<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution is complicated due to the use of three separate stacks:</p>

<ul>
<li>For each closing character, you have to cross-validate the two other types of delimiters.  (If you had to handle a fourth type of matching characters, such as <code>&lt;</code> and <code>&gt;</code>, it would be even messier.)</li>
<li>At the end, you need to write <code>!Object.values(brace).flat().length</code> to verify that all of the stacks have been cleared.</li>
</ul>

<p>I also think that the use of <code>Object.freeze()</code> is overkill.</p>

<p>Your <code>removeBrace()</code> helper can use <code>Array.prototype.pop()</code> instead.</p>

<h2>Suggested solution</h2>

<p>Keep all of the state in one combined stack.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const areBracesBalanced = brs =&gt; {
  let expectCloseStack = [];
  return [...brs].every(b =&gt; {
    switch (b) {
      case "(": return expectCloseStack.push(")");
      case "[": return expectCloseStack.push("]");
      case "{": return expectCloseStack.push("}");

      case ")":
      case "]":
      case "}":
        return expectCloseStack.pop() === b;
    }
  }) &amp;&amp; !expectCloseStack.length;
};

console.log(areBracesBalanced("[({})](]"));</code></pre>
</div>
</div>

    </div>