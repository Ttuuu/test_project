<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The pattern of <strong>mirrored string</strong> is used also by algorithms that ckeck for a <strong><a href="http://en.wikipedia.org/wiki/Palindrome" rel="nofollow noreferrer">Palindrome</a></strong>.</p>

<p>Such a Palindrome &amp; Java question was <a href="https://stackoverflow.com/questions/4138827/check-string-for-palindrome">Check string for palindrome</a></p>

<h3>Inspired by Palindrome checker</h3>

<p>Inspired by one of the answers which was both concise and elegant:</p>

<pre class="lang-java prettyprint-override"><code>public static boolean isPalindrome(String s) {
  for (int i=0 , j=s.length()-1 ; i&lt;j ; i++ , j-- ) {
    if ( s.charAt(i) != s.charAt(j) ) {
       return false;
     }
  } 
  return true;
}
</code></pre>

<p>I adjusted <em>exit-condition</em> from <code>i&lt;j</code> to <code>i &lt; half</code> (comparing dynamic parts not needed).</p>

<p>Then your extracting function may be implemented like this:</p>

<pre class="lang-java prettyprint-override"><code>public static String findMirroredPart(String s) {
  // optionally: check for null or empty respectively blank text

  final int half = s.length / 2;
  int i=0;

  for (int j = s.length()-1; i &lt; half ; i++, j-- ) {
    if (s.charAt(i) != s.charAt(j)) {
       break;
    }
  }

  String mirroredPartOrPalindrome = i &lt; half ? s.substring(0,i) : s;
  return mirroredPartOrPalindrome;
}
</code></pre>

<h3>Benefits are:</h3>

<ul>
<li>name expresses what's happening: <code>findMirroredPart</code> (also <code>static</code>)</li>
<li>mirrored position <code>j</code> is decreased inside for-definition (cleaner loop body; faster than calculating it using deepness <code>i</code> inside loop)</li>
<li>result &amp; ternary expression explained by variable</li>
<li>result string building is done outside loop, once only (better performance)</li>
</ul>

<h3>More expressive: replace loop <code>for</code> by <code>while</code></h3>

<p>Since above for-loop's body only responsible to <em>check and exit</em> this votes for replace it by while. Body then would express its purpose: increase mirroring position thus final lenght of <em>mirroredPart</em>.</p>

<pre class="lang-java prettyprint-override"><code>public static String findMirroredPart(String s) {
  // optionally: check for null or empty respectively blank text

  final int half = s.length / 2;
  int posFromBegin  = 0;
  int posFromEnd = s.length() - 1;

  while (posFromBegin &lt; half &amp;&amp; s.charAt(posFromBegin) == s.charAt(posFromEnd)) {
    posFromBegin++;
    posFromEnd--;
  }

  String mirroredPartOrPalindrome =  posFromBegin &lt; half ? s.substring(0, posFromBegin) : s;
  return mirroredPartOrPalindrome;
}
</code></pre>

<p>Note: Introduced <strong>more expressive</strong> index names.</p>
    </div>