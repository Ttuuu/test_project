<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would point out that the naming convention is inconsistent -- we have <code>Activate</code> and a <code>Shutdown</code> --- they don't say the same thing to me. I'd expect corresponding actions to have names like <code>Activate</code> -&gt; <code>Deactivate</code>, <code>Enable</code> -&gt; <code>Disable</code>, <code>Startup</code> -&gt; <code>Shutdown</code>. Given the nature of the class, <code>Enable</code>/<code>Disable</code> pair seems the best suited for what your class is going to do, since it's basically toggling an application level state.</p>

<p>Your <code>Shutdown</code> has an <code>On Error Resume Next</code> but says nothing if it was successful. I would at least expect the procedure to exit with something like <code>ShutDown = (Err.Number = 0)</code> so that the calling client can at least know there was a clean exit or not. However, I'm more inclined to encourage to rethink whether you really want a <code>Resume Next</code> there, because you are dealing with altering the application's state, so it is crucial to know that the alterations were successful so that the clients can proceed with the assumption that they are in the correct state. </p>

<p>The other thing that occurs to me is that you probably don't actually need the methods at all. You only need the <code>Class_Initialize</code> and <code>Class_Terminate</code>. Your calling code then becomes...</p>

<pre><code>Set booster = New ExcelTurboBooster
'Do lot of complicated stuff....
Set booster = Nothing 
</code></pre>

<p>Look, ma, no methods! In fact, technically you only need the first line. The last line is superficial because when your procedure that instantiate the object exits (even if it exited badly), the instance will go poof and the application state should be reset. The biggest downside of that method, though, is that error handling becomes somehow strange inside the Initialize/Terminate events, so it could be difficult to communicate to your clients there has been a problem.</p>

<p>The downside with the no-method approach is that it totally can't go into a public field of any standard module or maybe long-lived classes either because then they will persist too much longer. One'd have to take discipline to use it only as a local variable inside procedure so that it will be destroyed at the end of the procedure. Otherwise, you've built up a new layer of complication for nothing.</p>
    </div>