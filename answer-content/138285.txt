<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The thing most likely, in my mind, to cause problems here is that using frames is not guaranteed to work in any other Python implementation <a href="https://docs.python.org/2/library/inspect.html#inspect.currentframe" rel="noreferrer">besides CPython</a>.</p>
<blockquote>
<p><code>inspect.currentframe()</code></p>
<p>Return the frame object for the caller’s stack frame.</p>
<p><strong>CPython implementation detail</strong>: This function relies on Python stack frame support in the interpreter, which isn’t guaranteed to exist in all implementations of Python. If running in an implementation without Python stack frame support this function returns <code>None</code>.</p>
</blockquote>
<p>This will end up throwing an error if you try to unpack <code>None</code> because the implementation doesn't support your function. If you were dead-set on using stack inspection, then you should give a more useful error message than <code>AttributeError: 'NoneType' object has no attribute 'f_back'</code>. You should test for if you get a frame or not, and then use <a href="https://docs.python.org/2/library/platform.html#platform.python_implementation" rel="noreferrer">platform</a> to print a more helpful error message.</p>
<pre><code>def f(s):
    frame = inspect.currentframe()
    if frame is not None:
        return s.format(**frame.f_back.f_locals)
    else:
        raise NotImplementedError(
            "Python implementation {} does not support stack inspection.".format(
                platform.python_implementation()
            )
        )
</code></pre>
<p>At this point, then, you should make sure this is a well-documented limitation of your library, and I would probably write some unit tests where it asserts that is raised for certain implementations.</p>
<p>The real problem, however, isn't that you're using something that isn't guaranteed (although that's certainly a problem). The real problem is that stack inspection is almost never the right answer. We don't need it here either.  What we're going to want to do is something like this:</p>
<pre><code>def _poor_fstring(namespace):
    def _():
        return namespace
    return _

get_namespace = _poor_fstring(locals())

def f(s):
    return s.format(**get_namespace())
</code></pre>
<p>This still isn't ideal - you'll need to redeclare <code>get_namespace</code> in any scope you want access to it - but you avoid stack inspection, which is worth it in my mind.</p>
<p>Really though, I don't see a huge benefit between using your function and just calling <code>s.format(**namespace)</code>, where <code>namespace</code> is whatever lookup table you want.  The one benefit would be if, as you said, it supported arbitrary expressions. And the only way to get arbitrary expressions is to, well, evaluate them.  You'll basically have to parse the string and extract everything between curly braces. Then try a lookup in the namespace and replace that, otherwise <a href="https://docs.python.org/3.5/library/functions.html#compile" rel="noreferrer">compile</a> it, and then <a href="https://docs.python.org/3.5/library/functions.html#eval" rel="noreferrer">eval</a> what you find. Hopefully I don't need to point out that <code>eval</code>ing random strings is... dangerous.</p>
<p>Going into actually parsing a format string is way beyond the scope of this question.</p>
<p>In short, my recommendation would be to just suffer through... or upgrade your Python version.</p>
    </div>