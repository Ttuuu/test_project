<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>In [15]: delay = np.array([10,20,30,40,50,60,70,None]) 
    ...: omega = [[1,2,3,4],[1.1,2.2,3.3,None],[1.4,2.4,3.4,None],[1.5,2.8,None,None], 
    ...:          [1.8,2.9,None,None],[1.9,None,None,None],[2.0,None,None,None],[None,None,None,None]] 
    ...:                                                                                                     
</code></pre>

<p>We can use a list comprehension to create a list of tuples.  One tuple for each non-None element in <code>omega</code>.</p>

<pre><code>In [16]: [(i,j) for i,k in zip(delay, omega) for j in k if j is not None]                                    
Out[16]: 
[(10, 1),
 (10, 2),
 (10, 3),
 (10, 4),
 (20, 1.1),
 (20, 2.2),
 (20, 3.3),
 (30, 1.4),
 (30, 2.4),
 (30, 3.4),
 (40, 1.5),
 (40, 2.8),
 (50, 1.8),
 (50, 2.9),
 (60, 1.9),
 (70, 2.0)]
</code></pre>

<p>Then use the <code>zip(*)</code> idiom to 'transpose' this into two tuples:</p>

<pre><code>In [17]: x,y = zip(*_)                                                                                       
In [18]: x                                                                                                   
Out[18]: (10, 10, 10, 10, 20, 20, 20, 30, 30, 30, 40, 40, 50, 50, 60, 70)
In [19]: y                                                                                                   
Out[19]: (1, 2, 3, 4, 1.1, 2.2, 3.3, 1.4, 2.4, 3.4, 1.5, 2.8, 1.8, 2.9, 1.9, 2.0)
</code></pre>

<p>A <code>numpy</code> version:</p>

<pre><code>In [40]: A = delay.repeat(4).reshape(8,4)                                                                    
In [41]: B = np.array(omega)                                                                                 
In [42]: mask = np.frompyfunc(lambda x: x is not None,1,1)(_21).astype(bool)                                 
In [43]: A[mask]                                                                                             
Out[43]: 
array([10, 10, 10, 10, 20, 20, 20, 30, 30, 30, 40, 40, 50, 50, 60, 70],
      dtype=object)
In [44]: B[mask]                                                                                             
Out[44]: 
array([1, 2, 3, 4, 1.1, 2.2, 3.3, 1.4, 2.4, 3.4, 1.5, 2.8, 1.8, 2.9, 1.9,
       2.0], dtype=object)
</code></pre>

<p>If <code>omega</code> had <code>np.nan</code> instead of <code>None</code> I could have made the mask without the <code>frompyfunc</code> iteration.</p>

<p>The arrays:</p>

<pre><code>In [45]: A                                                                                                   
Out[45]: 
array([[10, 10, 10, 10],
       [20, 20, 20, 20],
       [30, 30, 30, 30],
       [40, 40, 40, 40],
       [50, 50, 50, 50],
       [60, 60, 60, 60],
       [70, 70, 70, 70],
       [None, None, None, None]], dtype=object)
In [46]: B                                                                                                   
Out[46]: 
array([[1, 2, 3, 4],
       [1.1, 2.2, 3.3, None],
       [1.4, 2.4, 3.4, None],
       [1.5, 2.8, None, None],
       [1.8, 2.9, None, None],
       [1.9, None, None, None],
       [2.0, None, None, None],
       [None, None, None, None]], dtype=object)
In [47]: mask                                                                                                
Out[47]: 
array([[ True,  True,  True,  True],
       [ True,  True,  True, False],
       [ True,  True,  True, False],
       [ True,  True, False, False],
       [ True,  True, False, False],
       [ True, False, False, False],
       [ True, False, False, False],
       [False, False, False, False]])
</code></pre>
    </div>