<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It can be done simply with 8 <code>AND</code>s, 8 <code>SHIFT</code>s, and 6 <code>OR</code>s. </p>

<p>A naive counting of the delta-swap's operations is 1 <code>AND</code>, 2 <code>SHIFT</code>s and 3 <code>XOR</code>s which if called 4 times yields 4 <code>AND</code>s, 8 <code>SHIFT</code>s, and 12 <code>XOR</code>s for the whole rotation. So the optimum may well depend upon the particular instructions' speeds on a particular hardware implementation. More <code>AND</code>s and less <code>(X)OR</code>s or vice versa?</p>

<pre><code>uint64_t
rotateXY_CW( uint64_t b ){
    uint64_t c =
            (b &amp; 0x0033003300330033) &lt;&lt; 2 |
            (b &amp; 0x00cc00cc00cc00cc) &lt;&lt; 8 |
            (b &amp; 0xcc00cc00cc00cc00) &gt;&gt; 2 |
            (b &amp; 0x3300330033003300) &gt;&gt; 8
            ;
    uint64_t d =
            (c &amp; 0x0505050505050505) &lt;&lt; 1 |
            (c &amp; 0x0a0a0a0a0a0a0a0a) &lt;&lt; 4 |
            (c &amp; 0xa0a0a0a0a0a0a0a0) &gt;&gt; 1 |
            (c &amp; 0x5050505050505050) &gt;&gt; 4
            ;
    return  d;
}
</code></pre>

<p>There is literature on this subject but it may not be immediately
obvious that the results are applicable here. A bit-cube can be considered
as a stack of bit-planes. And rotation of a bitmap is a topic that
underwent much study at Xerox PARC when they invented WIMP and GUI.
An algorithm is presented in the [Byte Magazine 1981 SmallTalk Issue]
(<a href="https://archive.org/details/byte-magazine-1981-08" rel="nofollow noreferrer">https://archive.org/details/byte-magazine-1981-08</a>) on page 188.</p>

<p>As the image at the bottom of that page illustrates, the steps of the
algorithm are to:</p>

<ul>
<li>rotate the quadrants</li>
<li>rotate the quadrants of the quadrants</li>
<li>rotate the quadrants of the quadrants of the quadrants</li>
<li>..... until the quadrants just moved were pixel-sized, then we're done.  </li>
</ul>

<h2>More details</h2>

<p>So, assume for simplicity that we have a 4x4 bitmap to rotate, mapped into
16 bits.</p>

<p>With 4 bits in a row, we only need 2 steps of taking quadrants before
we're down to pixels.</p>

<pre><code>uint16_t x = 0x1234;
x = (x &amp; 0x0033) &lt;&lt; 2
  | (x &amp; 0x00cc) &lt;&lt; 8
  | (x &amp; 0xcc00) &gt;&gt; 2
  | (x &amp; 0x3300) &gt;&gt; 8;
x = (x &amp; 0x0505) &lt;&lt; 1
  | (x &amp; 0x0a0a) &lt;&lt; 4
  | (x &amp; 0xa0a0) &gt;&gt; 1
  | (x &amp; 0x5050) &gt;&gt; 4;
</code></pre>

<p>Notice that in the second step, operations parallelize over all
sub-quadrants by selecting more pieces with the mask.</p>

<pre><code>   0 1  2 3
                   &gt;&gt;         &gt;    &gt;
0  0 0  1 0     0 1  0 0     1 0V 1 0V   1 0  1 0
1  1 1  0 0     1 0  1 1    ^0&lt;1 ^1&lt;0    0 1  1 0
              ^^        VV    
2  0 1  0 0     0 0  1 0     0&gt;0V 0&gt;1V   0 0  0 1
3  1 0  0 0     0 0  0 0    ^0 0 ^0 0    0 0  0 0
                   &lt;&lt;         &lt;    &lt;

Masks for each quadrant:

1100          0011          0000          0000
1100          0011          0000          0000
0000          0000          0011          1100
0000 = 0033   0000 = 00cc   0011 = cc00   1100 = 3300

Shifting each mask yields the next mask

0033 &lt;&lt; 2 == 00cc
00cc &lt;&lt; 8 == cc00
cc00 &gt;&gt; 2 == 3300
3300 &gt;&gt; 8 == 0033

Masks for each sub-quadrant

1010          0101          0000          0000
0000          0000          0101          1010
1010          0101          0000          0000
0000 = 0505   0000 = 0a0a   0101 = a0a0   1010 = 5050
</code></pre>

<p>Now watch what happens if we extend this to a stack of 2 bit-planes.
2 4x4 bitmaps in 32 bits.</p>

<pre><code>uint32_t x = 0x00001234;
x = (x &amp; 0x00330033) &lt;&lt; 2
  | (x &amp; 0x00cc00cc) &lt;&lt; 8
  | (x &amp; 0xcc00cc00) &gt;&gt; 2
  | (x &amp; 0x33003300) &gt;&gt; 8;
x = (x &amp; 0x05050505) &lt;&lt; 1
  | (x &amp; 0x0a0a0a0a) &lt;&lt; 4
  | (x &amp; 0xa0a0a0a0) &gt;&gt; 1
  | (x &amp; 0x50505050) &gt;&gt; 4;
</code></pre>

<p>The number of operations doesn't increase! only the lengths of the masks
increase.</p>

<p>And by replicating the mask from the 4x4 code 4 times it applies to
a 4x4x4 cube.</p>

<h2>Reversing the direction</h2>

<p>Rotating in the other direction can be done by changing the directions
of all the shifts.</p>

<pre><code>uint64_t
rotateXY_CCW( uint64_t b ){
    uint64_t c =
            (b &amp; 0x0033003300330033) &lt;&lt; 8 |
            (b &amp; 0x3300330033003300) &lt;&lt; 2 |
            (b &amp; 0xcc00cc00cc00cc00) &gt;&gt; 8 |
            (b &amp; 0x00cc00cc00cc00cc) &gt;&gt; 2 |
            ;
    uint64_t d =
            (c &amp; 0x0505050505050505) &lt;&lt; 4 |
            (c &amp; 0x5050505050505050) &lt;&lt; 1 |
            (c &amp; 0xa0a0a0a0a0a0a0a0) &gt;&gt; 4 |
            (c &amp; 0x0a0a0a0a0a0a0a0a) &gt;&gt; 1
            ;
    return  d;
}
</code></pre>

<h2>Rotating on a different axis</h2>

<pre><code>uint64_t
rotateXZ_CW( uint64_t b ){
    uint64_t c =
            (b &amp; 0x0000000033333333) &lt;&lt;  2 |
            (b &amp; 0x00000000cccccccc) &lt;&lt; 32 |
            (b &amp; 0xcccccccc00000000) &gt;&gt;  2 |
            (b &amp; 0x3333333300000000) &gt;&gt; 32
            ;
    uint64_t d =
            (b &amp; 0x0000555500005555) &lt;&lt;  1 |
            (b &amp; 0x0000aaaa0000aaaa) &lt;&lt; 16 |
            (b &amp; 0xaaaa0000aaaa0000) &gt;&gt;  1 |
            (b &amp; 0x5555000055550000) &gt;&gt; 16
            ;
    return  d;
}

uint64_t
rotateXZ_CCW( uint64_t b ){
    uint64_t c =
            (b &amp; 0x0000000033333333) &lt;&lt; 32 |
            (b &amp; 0x3333333300000000) &lt;&lt;  2 |
            (b &amp; 0xcccccccc00000000) &gt;&gt; 32 |
            (b &amp; 0x00000000cccccccc) &gt;&gt;  2
            ;
    uint64_t d =
            (b &amp; 0x0000555500005555) &lt;&lt; 16 |
            (b &amp; 0x5555000055550000) &lt;&lt;  1 |
            (b &amp; 0xaaaa0000aaaa0000) &gt;&gt; 16 |
            (b &amp; 0x0000aaaa0000aaaa) &gt;&gt;  1
            ;
    return  d;
}


quadrant masks
    1100 1100 0000 0000   
    1100 1100 0000 0000
    1100 1100 0000 0000
    1100 1100 0000 0000

    0011 0011 0000 0000
    ...

    0000 0000 0011 0011
    ...

    0000 0000 1100 1100
    ...

subquadrant masks
    1010 0000 1010 0000
    0101 0000 0101 0000
    0000 0101 0000 0101
    0000 1010 0000 1010
</code></pre>

<h2>Rotating on the other, other axis</h2>

<p>This one was harder for me to wrap my head around, but my ascii art of the masks seems to make sense.</p>

<pre><code>uint64_t
rotateYZ_CW( uint64_t b ){
    uint64_t c =
            (b &amp; 0x0000000000ff00ff) &lt;&lt; 32 |
            (b &amp; 0x00ff00ff00000000) &lt;&lt;  8 |
            (b &amp; 0xff00ff0000000000) &gt;&gt; 32 |
            (b &amp; 0x00000000ff00ff00) &gt;&gt;  8
            ;
    uint64_t d =
            (c &amp; 0x00000f0f00000f0f) &lt;&lt; 16 |
            (c &amp; 0x0f0f00000f0f0000) &lt;&lt;  4 |
            (c &amp; 0xf0f00000f0f00000) &gt;&gt; 16 |
            (c &amp; 0x0000f0f00000f0f0) &gt;&gt;  4
            ;
    return  d;
}

uint64_t
rotateYZ_CCW( uint64_t b ){
    uint64_t c =
            (b &amp; 0x0000000000ff00ff) &lt;&lt;  8 |
            (b &amp; 0x00000000ff00ff00) &lt;&lt; 32 |
            (b &amp; 0xff00ff0000000000) &gt;&gt;  8 |
            (b &amp; 0x00ff00ff00000000) &gt;&gt; 32
            ;
    uint64_t d =
            (c &amp; 0x00000f0f00000f0f) &lt;&lt;  4 |
            (c &amp; 0x0000f0f00000f0f0) &lt;&lt; 16 |
            (c &amp; 0xf0f00000f0f00000) &gt;&gt;  4 |
            (c &amp; 0x0f0f00000f0f0000) &gt;&gt; 16
            ;
    return  d;
}

YZ quadrant masks
    1111 1111 0000 0000
    1111 1111 0000 0000
    0000 0000 0000 0000
    0000 0000 0000 0000

    0000 0000 1111 1111
    0000 0000 1111 1111
    0000 0000 0000 0000
    0000 0000 0000 0000

    0000 0000 0000 0000
    0000 0000 0000 0000
    0000 0000 1111 1111
    0000 0000 1111 1111

    0000 0000 0000 0000
    0000 0000 0000 0000
    1111 1111 0000 0000
    1111 1111 0000 0000

subquadrant masks
    1111 0000 1111 0000
    0000 0000 0000 0000
    1111 0000 1111 0000
    0000 0000 0000 0000

    0000 1111 0000 1111
    0000 0000 0000 0000
    0000 1111 0000 1111
    0000 0000 0000 0000

    0000 0000 0000 0000
    0000 1111 0000 1111
    0000 0000 0000 0000
    0000 1111 0000 1111

    0000 0000 0000 0000
    1111 0000 1111 0000
    0000 0000 0000 0000
    1111 0000 1111 0000
</code></pre>
    </div>