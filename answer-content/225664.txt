<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To me, the code does not express the solution in a way that is easily connected to the description of the problem. "Message" becomes <code>data</code>. It's not really clear <em>to me</em> how "number of ways" is represented in the code except as the ultimate return value. </p>

<h3>Business Logic</h3>

<p>Deeper down, the code does not reflect the way I reason through the examples. I understand </p>

<pre><code>"12" -&gt; 2
"226" -&gt; 3
</code></pre>

<p>imply that  "one followed by any number" and "two followed by 0,1,2,3,4,5, or 6" can be interpreted two ways.  </p>

<p>Pseudo-code that looks <em>more</em> like the business logic <em>to me</em>:</p>

<pre><code>// if all characters are not digits, 
// there are zero ways to interpret the message
if not Message.allDigits() return 0

// if the message is only zeros, 
// there are zero ways to interpret the message
if Message.allDigitsAreZero() return 0

// otherwise there is at least one way to interpret it
ways = 1

//using one based index for simplicty
For i from 0 to Message.length
  case
    i equals Message.length() {
      return ways
    Message.charAt(i) is '0'
      i++
    Message.charAt(i) is '1' 
      ways += 1
      i++
    Message.charAt(i) is '2' 
      AND Message.charAt(i+1) is '[0-6]'
        ways += 1
         i++
  end case
</code></pre>

<h3>Pseudo-Code as a specification</h3>

<p>The pseudo-code defines a solution shape that is more independent of the language used to implement it.  It reflects the problem and not the language we use to implement it.</p>

<h3>Validation suggests an implementation approach</h3>

<p>Starting with data validation (<code>allDigits</code> and <code>allDigitsZero</code>) on the whole message suggests regex's -- anything else is more work to implement. </p>

<pre><code>allDigits(Message)
  Message.matches("\d{" + string.length + "}")

allDigitsZero(Message)
  Message.matches("0{" + string.length + "}")
</code></pre>

<p>Using regexes the rule for <code>1</code> might look like:</p>

<pre><code> // One indexing is messy here.
 // Zero indexing would be cleaner
 Message.matches(".{" + i-1 + "}1\d*")
      ways += 1
      i++
</code></pre>

<h3>Implementation approach suggests an architecture</h3>

<p>But that's a bit less readable than I want to try to figure out six weeks from now. This is a case where recursion can help make the code more readable <strong>assuming the reader can read recursion.</strong> </p>

<pre><code>// overloading decode
int decode(Message, ways)
  case
    Message.length equals 1
     return ways
    Message.matches("1\d*)"
      decode(Message.substring(2), ways+1) // one indexed
    Message.matches("2[0-6]")
      decode(Message.substring(2), ways+1) // one indexed
    decode(Message.substring(2), ways+1) // one indexed
  end case
</code></pre>

<h3>Discussion</h3>

<p><strong>Is this more efficient?</strong> Without profiling running code in a production environment, there's no way to tell. The JVM performs more optimizations than most people can readily reason about. Plus there's no way to tell if more efficiency here matters. If the messages are being read from disk, or coming from the internet, or even read from RAM, <code>decode</code> probably isn't the bottle neck. And the system is almost certainly running other code.</p>

<p><strong>Is it better?</strong> Maybe. Maybe not. In Java, Loops are idiomatic. Recursion not so much. If other parts of the system are recursive then recursive code is more consistent with the rest of the code base. If it's the only piece of recursive code, then recursion might not be the better choice.</p>

<p>One way in which a regex approach might be better is that it does not require changing the data type. We get a string and operate on it as a string. Recursion using <code>substring</code> makes the code less complex (again, assuming the people reading it can readily read recursion).</p>

<p>One way in which a regex approach might be worse is that pattern matching is not a primary Java idiom. It's mostly reserved for strings. Other languages use it more extensively. But we start with a string, so it's more likely ok.</p>

<h3>Final thoughts</h3>

<ul>
<li>Better names</li>
<li>Logic that looks like the business problem</li>
<li>Comments, please</li>
</ul>
    </div>