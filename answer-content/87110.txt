<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Using</h2>

<pre><code>//Is this less offensive than using the entire std namespace?
using std::cout;
using std::endl;
</code></pre>

<p>Yes. But still on the lazy size. Is it that hard to type 5 extra characters.</p>

<h2>Prefer functions to macros.</h2>

<pre><code>//These little functions are used by the heap-sort algorithm
#define PARENT(i) ((i - 1) / 2)
#define LEFT(i)   (2 * i + 1)
#define RIGHT(i)  (2 * i + 2)
</code></pre>

<p>If you are going to treat them as functions may as well define them like functions:</p>

<pre><code>//These little functions are used by the heap-sort algorithm
inline int parent(int i) {return ((i - 1) / 2);}
inline int left(int i)   {return (2 * i + 1);}
inline int right(int i)  {return (2 * i + 2);}
</code></pre>

<p>Macros stomp all over the namespace/scope rules (and thus are slightly dangerous). They don't work well with any parameters that are complex (because they just use text substitution).</p>

<h2>void bubble_sort(int list[], int size)</h2>

<p>Sure bubble sort is the most brute force and worst complexity on average. But for a small number of values it is usually the fastest (as it has the lowest overhead). Check out your graphs when the number of values you want to sort is in the range [1-100].</p>

<p>Also bubble sort has a best case of <code>O(n)</code> you forgot to add this standard optimization for quick exit when the data is already sorted.</p>

<h2>Ranges in C++</h2>

<p>Ranges in C++ are usually done from beginning to one past the end. This convention is so ingrained that when you don't use it you get people noticing and wondering why.</p>

<pre><code>//n1 and n2 are the lengths of the pre-sorted sublists, list[p..q] and list[q+1..r]
</code></pre>

<p>Why not have q by one past the end of the first range and r by one past the end of the second range.</p>

<p>Then your list splits nicely as</p>

<pre><code> list[p..q)
 list[q..r)
</code></pre>

<p>It also makes working out sizes easier as</p>

<pre><code> n1 = q - p;
 n2 = r - q;
</code></pre>

<p>If you think this way then you can often take advantage of the standard algorithms (which are organized like this).</p>

<h2>Use iterators for your interface.</h2>

<p>In C++ the interface between storage and algorithms is done via iterators. This allows you to perform your algorithm on different types of container without changing the code.</p>

<pre><code>void merge(int list[], int p, int q, int r)
</code></pre>

<p>So here I would have used:</p>

<pre><code>template&lt;typename I&gt;
void merge(I p, I q, I r)
</code></pre>

<h3>Merge Not optimal</h3>

<pre><code>//Merge the L and R lists
int i=0;
int j=0;
for(int k=p; k&lt;=r; k++)
{
    if (L[i]&lt;=R[j])
    {
    list[k]=L[i];
    i++;
    } else
    {
    list[k]=R[j];
    j++;
    }
}
}
</code></pre>

<p>This is not the optimal implementation of the merge algorithm. Once one side has been completely merged you can move the content of the other rather than continuing to test values.</p>

<p>I would have written merge like this:</p>

<pre><code>template&lt;typename I&gt;
void merge(I p, I q, I r)
{
    int leftSize  = std::distance(p, q);
    int rightSize = std::distance(q, r);

    int L[leftSize];   // Technically not legal but most compilers support it.
    int R[rightSize];  // Normally use vectors here. But I am using the same
                       // technique as shown by the OP

    std::move(p, q, L);
    std::move(q, r, R);

    int left  = 0;
    int right = 0;
    I   d     = p;

    while(left &lt; leftSize &amp;&amp; right &lt; rightSize)
    {
        (*d) = std::move((L[left] &lt;= R[right])
                    ? L[left++]
                    : R[right++]);
        ++d;
    }
    // Note only one of these copies will actually do anything.
    std::move(L + left,  L + leftSize,  d);
    std::move(R + right, R + rightSize, d);
}
</code></pre>

<h2>Avoid using dynamic allocation</h2>

<pre><code>int *rlist1= new int[npointsmax];
int *rlist2= new int[npointsmax];
int *rlist3= new int[npointsmax];
int *rlist4= new int[npointsmax];
int *rlist5= new int[npointsmax];
</code></pre>

<ol>
<li>Prefer to use automatic variables.</li>
<li>Prefer standard containers to raw arrays.</li>
</ol>

<h2>Use C++ fstream</h2>

<pre><code>FILE * resultsfile;
resultsfile=fopen("results-comparison_sort-noBS.dat","w");
for(int j=0;j&lt; npoints;j++) fprintf(resultsfile, "%5e \t %10.2f \t %10.2f \t %10.2f \t %10.2f \t %10.2f \n",nplist[j], bubble_timelist[j], insertion_timelist[j], merge_timelist[j], heap_timelist[j], quick_timelist[j]);
fclose(resultsfile);
</code></pre>

<p>Prefer to use C++ fstream object (it is excepion safe unlike fopen/fclose).</p>

<p>Now admittedly the C++ stream operators are much much much more verbose then the C code for printing. But the main advantage is that they are <strong>TYPE SAFE</strong> so you have a much less chance of getting it wrong (though modern compilers actually check this in C now).</p>

<p>To mitigate the verbosity you can use boost::format see <a href="https://stackoverflow.com/a/119194/14065">Which C I/O library should be used in C++ code?</a></p>

<p>A basic translation into C++</p>

<pre><code>std::ofstream resultsfile("results-comparison_sort-noBS.dat");
for(int j=0;j&lt; npoints;j++) {
    resultsfile &lt;&lt; boost::format("%5e \t %10.2f \t %10.2f \t %10.2f \t %10.2f \t %10.2f \n")
                 % nplist[j] 
                 % bubble_timelist[j]
                 % insertion_timelist[j]
                 % merge_timelist[j]
                 % heap_timelist[j]
                 % quick_timelist[j]);
}
</code></pre>

<p>But if you had organized your times into a structure:</p>

<pre><code> struct TimePoints
 {
      int nplist;
      int bubble_timelist
      int insertion_timelist;
      int merge_timelist;
      int heap_timelist;
      int quick_timelist;
      friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, TimePoints const&amp; d)
      {
          return str &lt;&lt; boost::format("%5e \t %10.2f \t %10.2f \t %10.2f \t %10.2f \t %10.2f \n")
                 % d.nplist
                 % d.bubble_timelist
                 % d.insertion_timelist
                 % d.merge_timelist
                 % d.heap_timelist
                 % d.quick_timelist;
     }
 }
 // Then stored your times in a vector:
 std::vector&lt;TimePoints&gt;  times;

 // Now you could print easily in a couple of ways

 std::copy(std::begin(times), std::end(times),
           std::ostream_iterator&lt;TimePoints&gt;(std::cout, "\n")
          );
 // or
 for(TimePoints const&amp; tp: times) {
     std::cout &lt;&lt; tp &lt;&lt; "\n";
 }
</code></pre>
    </div>