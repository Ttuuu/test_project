<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very very poor implementation.</p>

<ul>
<li><p>Firstly the code has little care for nested datatypes, and makes them a pain to add in a future version.  </p>

<p>To add support for this all that needs to be done is change the, per type, control flow to use recursion. The option to use standard loops rather than recursion is available too, however that will likely make the code harder to read.</p></li>
<li><p>The code just looks very error prone. Whilst RegEx has it's place in some limited scenarios, this is not then. The following snippet is almost never a good idea.</p>

<pre><code>is_optional: bool = "Optional" in str(annotation)
if is_optional:
    annotation = re.search("Optional\[(.*)\]", str(annotation)).group(1)
</code></pre>

<p>This is the kind of nonsense I would expect of a junior that just learnt what RegEx is.</p></li>
<li><p>Whilst 'proper' low level typing inspection isn't that readable, mangling it with strings makes the code harder to read for people used to interacting with <code>typing</code>.</p>

<p>Also, when performing low level changes on core Python libraries read the PEPs that accompany them. They're their for a reason. For instance, PEP 484 states how to remove the need for using strings.</p>

<blockquote>
  <p>The string literal should contain a valid Python expression (i.e., compile(lit, '', 'eval') should be a valid code object) and it should evaluate without errors once the module has been fully loaded. The local and global namespace in which it is evaluated should be the same namespaces in which default arguments to the same function would be evaluated.</p>
</blockquote>

<p>Furthermore, reading the PEP is not required, as the <code>typing</code> documentation shows a function that does this out of the box.</p>

<blockquote>
  <p><a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="nofollow noreferrer">typing.get_type_hints</a>(obj[, globals[, locals]])<br>
  Return a dictionary containing type hints for a function, method, module or class object.</p>
</blockquote></li>
</ul>

<p>Whilst I can understand that hacking a solution may be the most fun way to implement something. It's how I learnt the <code>typing</code> library. You should at least read the documentation of the module. Python's documentation is very high-quality, and ignoring it leads to poor code.</p>

<p>Here's a naive implementation:</p>

<pre><code>import typing
import inspect


def is_type(instance, type_info):
    if type_info == typing.Any:
        return True
    if hasattr(type_info, '__origin__'):
        if type_info.__origin__ in {typing.Union, typing.Optional}:
            return any(is_type(instance, arg) for arg in type_info.__args__)
    return isinstance(instance, type_info)


def enforce_types(func):
    types_info = typing.get_type_hints(func)
    signature = inspect.signature(func)

    def inner(*args, **kwargs):
        sig = signature.bind(*args, **kwargs)
        sig.apply_defaults()
        for name, value in sig.arguments.items():
            if not is_type(value, types_info.get(name, typing.Any)):
                raise TypeError(
                    '{name} is not of the correct type'
                    .format(name=name)
                )
        return func(*args, **kwargs)

    return inner
</code></pre>
    </div>