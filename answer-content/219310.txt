<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Your function has two bugs</h2>

<ol>
<li><p>Adds an extra space to the end of the string. Eg  for <code>"the cat sat on the mat"</code> you return <code>"eht tac tas no eht tam "</code>. The input string is 22 characters long and the returned string is 23 characters long.</p></li>
<li><p>Related to the first. If the input string starts with a space the returned string removes it. Eg for <code>" the cat sat on the mat"</code> you return "eht tac tas no eht tam ". </p></li>
</ol>

<hr>

<h2>Code style</h2>

<p>This section will cover source code style. These points are independent of the algorithms logic.</p>

<ul>
<li><p>You are missing the semicolon for the line inside the last <code>for</code> statement.</p></li>
<li><p>Use <code>===</code> or <code>!==</code> rather than <code>==</code> or <code>!=</code></p></li>
<li><p>You should never see <code>for (var i</code> If you use a <code>var</code> it should be declared at the top of the function or use <code>for (let i</code>.
You can also use <code>const</code> in <code>for...of</code> and <code>for...in</code> loops. Eg <code>for (const i of foo) {</code></p></li>
<li><p>Don't scrunch up the code. Space between <code>) {</code>, <code>for (</code>, <code>if (</code>, <code>} else</code>  and <code>else {</code>. Also operators should be separated by space. <code>i = strlen-1</code> should be <code>i = strlen - 1</code></p></li>
<li><p>Use <code>const</code> for variables that do not change.</p>

<ul>
<li>The variable <code>strlen</code> does not change, thus it should be a constant.</li>
<li>The variable <code>reverseStrArr</code> holds a reference to an array. That reference never changes so the variable should be declared as a constant. <code>const reverseStrArr = [];</code></li>
</ul></li>
<li><p>You should try to avoid adding a variable's type to its name. </p>

<p>Names need only fit the context (have semantic meaning) of the scope/function they are declared in.</p>

<ul>
<li><code>myStr</code> better as <code>words</code> or <code>sentence</code></li>
<li><code>strLen</code> better as just <code>length</code> or <code>charCount</code> or even just <code>len</code></li>
<li><code>reverseStr</code> better as <code>reversed</code></li>
<li><code>reverseStrArr</code> maybe <code>reversedWords</code></li>
</ul></li>
</ul>

<h3>Loop variables</h3>

<p>You don't need to declare a different variable of each loop. You need only do that if the loops are nested.</p>

<pre><code>// Nested 
var i,j;
for (i = 0; i &lt; 10; i++) {
    for (j = 0; j &lt; 10; j++) { /*...*/ }
}
//or 
for (let i = 0; i &lt; 10; i++) {
    for (let j = 0; j &lt; 10; j++) { /*...*/ }
}

// Sequential
var i;
for (i = 0; i &lt; 10; i++) { /*...*/ }
for (i = 0; i &lt; 10; i++) { /*...*/ }

//or 
for (let i = 0; i &lt; 10; i++) { /*...*/ }
for (let i = 0; i &lt; 10; i++) { /*...*/ }
</code></pre>

<hr>

<h2>Algorithms Logic</h2>

<p>This section looks at how your function solves the problem and possible ways to improve it.</p>

<h3>Array as a stack</h3>

<p>You are using the array <code>reverseStrArr</code> as a stack. An array becomes a stack only by the way you use it, it is an abstracted stack.</p>

<p>Stacks are first in last out. You add items one at a time to the top of the stack, then you remove items one at a time from the top. </p>

<p>The two array function <code>push()</code> and <code>pop()</code> provide a fast way to use JS arrays as a stack. </p>

<p>As a stack the final loop where you create the <code>result</code> string can be simplified as</p>

<pre><code>while (reversedWords.length) {
    result += " " + reversedWords.pop();
}
</code></pre>

<p><sub><sup>(I think the rules will let us use <code>pop</code>.)</sup></sub></p>

<h3>Unneeded steps</h3>

<ol>
<li><strong>The Last Word</strong></li>
</ol>

<p>In the second loop you have the statement <code>if(j + 1 == strlen) {</code> to push the last <code>result</code> to the array, then you clear <code>result</code>. </p>

<p>If you remove that statement and its content  you can have <code>result</code> hold the last word. In the following loop <code>result</code> already has the first word so you can add the space then word rather than word an space (trailing space bug)</p>

<p>This fixes both bugs.</p>

<ol start="2">
<li><strong>Repeated Logic</strong></li>
</ol>

<p>The first loop goes from last to first creating a reversed string, then the next loop indexes the string created from first to last. Its like writing backward so the when you read forward its backward... LOL</p>

<p>The first loop is not needed. Just read the sentence string backward as you process it.</p>

<hr>

<h2>Rewrite</h2>

<p>Putting all the above into your function we get a much simpler source and fix the bugs at the same time.</p>

<pre><code>function reverseString(words) {
    const reversed = [], len = words.length;
    var result = "", i = len;
    while (i-- &gt; 0) {
        if (words[i] == " ") {
            reversed.push(result);
            result = "";
        } else { 
            result += words[i];
        }
    }
    while (reversed.length) { 
        result += " " + reversed.pop();
    }
    return result;
}
</code></pre>

<h2>Alternative</h2>

<p>The rewrite is still a little too complex .</p>

<p>I used two loops to first create a stack of words and then use the stack to rebuild the sentence. </p>

<p>You can do both within the one loop removing the need to use a stack.</p>

<pre><code>function reverseWords(sentence) {
    var word = "", reversed = "", i = sentence.length;
    while (i-- &gt; 0) {
        if (sentence[i] === " ") {
            reversed = " " + word + reversed;
            word = "";
        } else { word += sentence[i] }
    }
    return word + reversed;
}
</code></pre>

<hr>

<h2>Surrogates, Codepoints, Emoji, modifiers, sequences 😲🙊🙉🙈</h2>

<p>I see that in the <a href="https://codereview.stackexchange.com/a/219295/120556">accepted answer</a>  there are comments regarding Emoji (surrogate Unicode characters)</p>

<p>In JavaScript strings are iteratable. The iterator handles all codepoint characters as single items. </p>

<p><strong>Note:</strong> Single emoji can be created from one or <strong>more</strong> codepoints. eg 👩🏻‍❤‍🧑🏻 is one emoji (on Chrome win10) but contains 6 codepoints or 8 Javascript string Unicode  characters. See note at bottom of answer.</p>

<p>Using iterators to step over strings and you need  not worry about character sequences.</p>

<p>Unfortunately iterators don't run backward. As we can not use many of the Array functions we are limited in how to solve the problem</p>

<h3>Simplest solution.</h3>

<p>To solve the problem of surrogate characters (within the restriction of the question) we can use a very quick hack that converts the input string to an array.</p>

<pre><code>sentence = [...sentence]; // separates codepoints
</code></pre>

<p>The rest of the function remains unchanged because we used bracket notation to index the strings.</p>

<h3>Example</h3>

<p>Shows pass and failure modes when reversing surrogates via string iterator.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>    function reverseWords(sentence) {
        sentence = [...sentence];
        var word = "", reversed = "", i = sentence.length;
        while (i-- &gt; 0) {
            if (sentence[i] === " ") {
                reversed = " " + word + reversed;
                word = "";
            } else { word += sentence[i] }
        }
        return word + reversed;
    }
    
    
    const test1 = "🐱 The cat 💩 on the mat 😲🙊🙉🙈";
    const test2 = `👱‍♂️👲🏼👨🏽👱🏾‍♀️👦🏿  👩🏻\u200D❤\u200D🧑🏻 \u{1F3C4}\u200D\u2642\uFE0F`;

    log(test1);
    log("Reverse...");
    log(reverseWords(test1));
    
    log("--------------------------------------");
    log("Emoji modifiers and sequences may fail.");

    log(`${test2} Reversed is...`);
    log(`${reverseWords(test2)}`);

    
    
    function log(textContent) { 
        info.appendChild(Object.assign(document.createElement("div"),{textContent}));
    }</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>#info {
font-size: large;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="info"&gt;&lt;code&gt;</code></pre>
</div>
</div>


<p><strong>Note:</strong>
Emoji modifiers and sequences rely not only on how Javascript handles the string but also how the device OS interprets the string.</p>

<p>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt" rel="noreferrer"><code>String.prototype.codePointAt()</code></a> to locate modifiers, sequences, gruping, etc</p>

<p>For a full Emoji rundown <a href="https://unicode.org/reports/tr51/index.html" rel="noreferrer">Unicode Emoji Technical Standard</a> </p>
    </div>