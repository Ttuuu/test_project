<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>... in knowing whether this is a good approach ...</p>
</blockquote>

<p>Small improvements</p>

<p><strong>Keep in range</strong></p>

<p><code>uint_fast32_t</code> may be wider than 32 bits.  Values outside the 32-bit range in <code>x</code> will have a result that depends on those excessive upper bits.  I'd suggest coding to insure 1) only the lower 32 are used to form the answer and 2) the answer only has lower 32-bits set.  #2 being an important aspect here - don't generate results outside 32-bits.  When <code>uint_fast32_t</code> is 32-bit, a good compiler will optimize away the <code>&amp; 0xFFFFFFFF</code> masks.</p>

<pre><code>uint_fast32_t h = x &amp; 0xFFFFFFFF;
...
return h &amp; 0xFFFFFFFF;
</code></pre>

<p><strong>Readability</strong></p>

<p>Style issue:</p>

<p>I find reading hexadecimal constants easiest to read when the case of the <code>x</code> differs from the digits.</p>

<pre><code>// h = h * 0xae6a495b;
h = h *    0xAE6A495B;
</code></pre>

<p><strong>Avoid naked magic numbers</strong>.  </p>

<p>I did not note the 2 hex constants were the same until a bit later.  Defines/<code>const</code> objects would have helped and self-document the code.</p>

<pre><code>const uint_fast32_t hash_m = 0xAE6A495B;
const uint_fast32_t uint32_mask = 0xFFFFFFFF;
const unsigned hash_shift = 16;

uint_fast32_t h = x &amp; uint32_mask;
h = h ^ (h &gt;&gt; hash_shift);
h = h * hash_m;
h = h ^ (h &lt;&lt; hash_shift);
h = h * hash_m;
return h &amp; uint32_mask;
</code></pre>

<p><strong>Why 32 for a <em>general</em> approach?</strong></p>

<p>With "good approach to integer hashing or general hashing" seems to assume an "integer" is 32 bits.  Such an assumptions breaks the "general hashing".  For a "general hashing" I would use <code>unsigned</code> or perhaps <code>size_t</code> and steer the constants based on the type's range.  Either that or forgo the "general" adjective to this code and simply say its is designed for 32-bit as <code>hash_u32()</code> implies.</p>

<p><strong>uint_fast32_t vs. uint32_t</strong></p>

<p><code>uint_fast32_t</code> has 2 advantages, 1) it always exists since C99 as <code>uint32_t</code> may not exist on rare machines that lack 32-bit types.  2) It may be "faster".</p>

<p>Yet <code>uint_fast32_t</code> is also problematic.  It is more difficult to test.  Proper function testing obliges a test on machines where <code>uint_fast32_t</code> is 32 and more than 32-bit as the above masking discussion points out potential pitfalls on the rarer  wide <code>uint_fast32_t</code>.</p>

<p>I doubt code was written to take advantage of #1 (<code>uint32_t</code> may not exist).</p>

<p><strong>Unless #1 is a design concern</strong>, best, especially for a "general" function, to stick to fixed width or regular types and reserve the "fast" types for internal function usage and not as a function parameter nor return value.  Using "fast" as part of the function I/F, may be useful in select cases, but not "general".</p>

<p><strong>Missing header</strong></p>

<p>I'd expect <code>#include &lt;stdint.h&gt;</code> as part of the code to define <code>uint_fast32_t</code>, else code does not compile.</p>

<hr>

<p><strong>Good Hash?</strong></p>

<p>I threw together a quick test to see how  32-bit values mapped to what.</p>

<p>Note: On my machine with a 64-bit <code>uint_fast32_t</code>, code died on <code>flag[i]</code> unless OP's function had <code>h</code> masked with <code>h &amp; 0xFFFFFFFF</code>.</p>

<pre><code>#include &lt;stdint.h&gt;
uint_fast32_t hash_u32(uint_fast32_t x) {
  uint_fast32_t h = x &amp; 0xFFFFFFFF;
  h = h ^ (h &gt;&gt; 16);
  h = h * 0xae6a495b;
  h = h ^ (h &lt;&lt; 16);
  h = h * 0xae6a495b;
  return h &amp; 0xFFFFFFFF;
}

#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;
void hash_u32_test(void) {
  _Static_assert(CHAR_BIT == 8, "CHAR_BIT != 8");
  unsigned char *flag = calloc(1, 1u &lt;&lt; (32 - 3));
  if (!flag) return;
  uint32_t twice = 0;
  uint32_t x = 0;
  do {
    uint_fast32_t y = hash_u32(x);
    uint_fast32_t i = y / 8;
    uint_fast32_t j = y % 8;
    if (flag[i] &amp; (1u &lt;&lt; j)) {
      twice++;
    }
    flag[i] |= (1u &lt;&lt; j);
    x++;
  } while (x);
  printf("twice %lu\n", (unsigned long) twice);
}

int main() {
  hash_u32_test();
  return 0;
}
</code></pre>

<p>My result was <code>twice 0</code> implying a one-one mapping of all 32-bit inputs to output, so from a <em>hash</em> perspective, that is <em>good</em> for OP's function to pass.</p>
    </div>