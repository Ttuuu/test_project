<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I feel like the implementation of the class would be simpler if backed by a <code>std::array&lt;value_type , Size&gt;</code> instead of <code>value_type _buffer[Size];</code>, because then you could use the standard algorithms (aka iterators) easier, and get bounds checking in debug builds (at least in MSVC). </p>

<p>Initializing the buffer via <code>: _buffer{}</code> is unnecessarily slowing you down for no reason in most of the constructors, since you proceed to fill in the buffer regardless.</p>

<p><code>compare</code> should be named <code>operator==</code>, so it's clear <em>which</em> comparison it's doing.  I'd assumed it was <code>operator&lt;</code> at first. It's also only ever passed buffer objects, so there's no reason to be strict about comparing nulls.  It's also recursive, which is slow. Just use <code>std::equal</code>.</p>

<p><code>operator+</code> should be written out rather than calling <code>append</code> in a loop. Right now it's doing a capacity check for every character and updating the length for every character. Very inefficient.  Just use <code>std::copy</code>.</p>

<p>You have <code>operator==</code> but no <code>operator!=</code> which is weird.  And <code>operator&lt;&lt;</code> but no <code>operator&gt;&gt;</code>, also weird.</p>

<p>You're missing a very significant amount of the <code>std::basic_string</code> interface. Prefer to match the existing design patterns.</p>

<p>Also I strongly disagree with the exception throwing vs truncation. Definitely throw exceptions. At <em>least</em> assert. There's no performance penalty for exceptions here on most compilers, except when it's hit. </p>
    </div>