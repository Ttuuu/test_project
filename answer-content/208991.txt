<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Building on user161231's code (thanks!), here is a complete answer that uses modern .NET framework objects. Sorry it's not strictly a code review (although for me a code review that removes code and favors using frameworks's primitives is a good code review), but it answers the same question.</p>

<p>It demonstrates not only how to run tasks on a specific thread, but also how to schedule other tasks on this unique thread and how to stop that thread:</p>

<pre><code>var scheduler = new ConcurrentExclusiveSchedulerPair();

// create a stop request source
var stop = new CancellationTokenSource();

// this will run on a specific thread
var task = Task.Factory.StartNew(MyAction,
    stop.Token,
    stop.Token,
    TaskCreationOptions.DenyChildAttach,
    scheduler.ExclusiveScheduler);

... do something

// this is how to schedule a task on the *same* thread.
// a moral equivalent of BeginInvoke in UI-oriented scenarios like Winforms of WPF but w/o any dependencies on those frameworks)
Task.Factory.StartNew(() =&gt;
{
    ... do something that will run on the scheduler's thread

}, CancellationToken.None, TaskCreationOptions.DenyChildAttach, scheduler.ExclusiveScheduler);

... do something

// this is how to request the thread to stop
stop.Cancel();

// the one-thread code
static async void MyAction(object state)
{
    var stop = (CancellationToken)state;

    // do something useful. all this could be in a loop, while, etc. ....

    // sometimes, regularly, check for the stop and quit if requested
    if (stop.IsCancellationRequested)
        return; // end of thread is here

    // do something useful ....

    // sometimes, regularly, let other scheduled tasks run.
    // they will run on *this* thread
    await Task.Yield();

    // do something useful, loop, etc. ....
    // end of thread is not here!
}
</code></pre>
    </div>