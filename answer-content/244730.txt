<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Cell value representation</h2>
<p>It's good that you've distinguished this:</p>
<blockquote>
<p>representation(internal not for display)</p>
</blockquote>
<p>however, I'm not clear on the reason for making these integers configurable. You're probably better off making an <code>Enum</code>:</p>
<pre><code>class TicValue(Enum):
    EMPTY = 0
    X = 2
    O = 3
</code></pre>
<p>This can still be compatible with Numpy, because <code>.value</code> will return those integers.</p>
<h2>Truthy coalesce</h2>
<pre><code>board = board if board is not None else self.board
</code></pre>
<p>has shorthand:</p>
<pre><code>board = board or self.board
</code></pre>
<p>as long as <code>board</code> doesn't have any funny business overriding <code>__bool__</code> or <code>__len__</code>.</p>
<h2>Boolean equivalent cast</h2>
<pre><code>target = 1 if winner == self.symbol else 0
</code></pre>
<p>can be</p>
<pre><code>target = int(winner == self.symbol)
</code></pre>
<h2>Unpacking</h2>
<pre><code>    self.agent_1 = TicAgent(
        agent_settings[0], board_size, empty_value, x_value, o_value
    )
    self.agent_2 = TicAgent(
        agent_settings[1], board_size, empty_value, x_value, o_value
    )
</code></pre>
<p>can be</p>
<pre><code>self.agent_1, self.agent_2 = (
    TicAgent(settings, board_size, empty_value, x_value, o_value)
    for settings in agent_settings
)
</code></pre>
<h2>In-band signalling</h2>
<pre class="lang-none prettyprint-override"><code>    Returns:
        symbol or 'end' or None.
</code></pre>
<p>is not very convenient for other functions to process. Consider splitting this apart into</p>
<pre><code>def play_one(self, game_history: List[ndarray]) -&gt; (
    bool,            # is end
    Optional[str],   # symbol or None
):
    # ...
    return False, agent.symbol
    # ...
    return True, None
</code></pre>
<h2>Display map</h2>
<pre><code>    self.text_map = {
        x_value: 'X',
        o_value: 'O',
        empty_value: '',
        'X': x_value,
        'O': o_value,
        '': empty_value,
    }
</code></pre>
<p>is a little surprising. You're using this as a map in both directions. It would be safer, and a better guarantee of correctness, for this to be split into forward- and back-maps.</p>
    </div>