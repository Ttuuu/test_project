<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You return <code>false</code> given a call <code>StringUtils.equalsIgnoreNewlineTwirks(null, null)</code>. This can be changed by putting <code>str == other</code> before <code>str == null || other == null</code>. Given <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#equals-java.lang.Object-java.lang.Object-" rel="nofollow noreferrer"><code>java.util.Objects::equals</code></a> returns <code>true</code> if given two <code>null</code>s, I think this is the expected behavior.</p>

<p>Consider <a href="http://unicode.org/faq/normalization.html" rel="nofollow noreferrer">normalizing</a> your <code>String</code>s on receipt as another option. There are many other ways that strings can differ in representation while still being "equivalent" (according to the Unicode specification), such as two more potential line ending characters, <a href="http://www.fileformat.info/info/unicode/char/2028/index.htm" rel="nofollow noreferrer">LINE SEPARATOR (U+2028)</a> and <a href="http://www.fileformat.info/info/unicode/char/2029/index.htm" rel="nofollow noreferrer">PARAGRAPH SEPARATOR (U+2029)</a>.</p>

<p>If you only need to deal with <code>\r\n</code> vs <code>\n</code>, consider using the normalization routine <a href="https://codereview.stackexchange.com/a/140076/100439">Roland Illig provides</a>. Though it is more likely more costly to run this a single time to check two strings, if you need to check against multiple strings, it is almost certainly more efficient to normalize the string on receipt, a single time, rather than messing around with normalization-aware equality. Down the line when you ultimately need to treat <code>ñ</code> (<code>\u00F1</code>) and <code>ñ</code> (<code>\u006E\u0303</code>) as the same, normalizing on receipt will be much easier and maintainable.</p>

<p>Consider also if you emit any strings: it is much nicer to anyone using your program if it emits a consistent line ending, rather than mixing <code>\n</code> and <code>\r\n</code>. This is, of course, assuming that you do not need to keep the <em>exact</em> string you were provided with for some reason.</p>

<p>As for your algorithm as written:</p>

<p>You use bit-wise or (<code>|</code>) / and (<code>&amp;</code>) to combine <code>oob1</code> and <code>oob2</code>. It is more typical to just use logical OR (<code>||</code>) / AND (<code>&amp;&amp;</code>), as these have the typically expected precedence and short-circuiting behavior. In this case, the semantics are the same, but I would still prefer the logical versions; the argument that the bit-wise operations are faster is a moot point, as the compiler will perform those sort of optimizations for you. And in any case, you're talking about one or two machine instructions difference, and if you care that much, I hate to say it, but you shouldn't be writing Java :P</p>

<p>I'd rename <code>::isCRandLF</code> to <code>::isLineSeparator</code>, and have it only take one character. This is more in line with the <code>Character</code> methods (e.g. <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isAlphabetic-int-" rel="nofollow noreferrer"><code>Character::isAlphabetic</code></a>). (Strangely enough, the Java API does not seem to offer this method out of the box, though it does offer <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#lineSeparator--" rel="nofollow noreferrer"><code>System::lineSeparator</code></a>.)</p>

<p>And I also agree with <a href="https://codereview.stackexchange.com/users/6499">Roland Illig</a>'s points:</p>

<blockquote>
  <ul>
  <li><code>NewlineTwirks</code> -&gt; <code>NewlineStyle</code></li>
  <li>Don't <code>public</code> constants needlessly</li>
  <li>Two equal strings, neither should be <code>other</code></li>
  </ul>
</blockquote>

<p>Consider just <code>str1</code> and <code>str2</code>, as the rest of your variables follow the <code>1</code>/<code>2</code> pattern. I've also seen <code>lhs</code> and <code>rhs</code> a good deal, though mostly in dealing with, e.g. <code>lhs + rhs</code>.</p>
    </div>