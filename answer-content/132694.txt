<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The logic looks good in this program, but I am observing that there is a problem with <code>readCount</code>. Suppose if two threads (say <code>t1</code> and <code>t2</code>) reach <code>readCount++</code> at the same time. Initially, both will read the <code>readCount</code> value to be 0, and after being incremented by both, the value will be corrupted i.e., it may be 2 and the same will happen with <code>readCount--</code>.</p>

<p>The problem is that, according to the Java memory model, if this read and write for <code>readCount</code> are not atomic, we can declare the <code>readCount</code> as <code>volatile</code>:</p>

<pre><code>volatile static int readCount = 0;
</code></pre>

<p><strong>Will <code>volatile</code> resolve the problem:</strong></p>

<p>Again, by declaring the <code>readCount</code> as <code>volatile</code>, it now makes the read and write operations atomic, meaning that every thread will read the updated value of <code>readCount</code> as there will be no optimizations by the compiler (as <code>volatile</code> declared). There will be only one copy of the variable and that will be in main memory, so every thread will read/write the value in main memory only. Now there will no variable copies in thread caches.</p>

<p>But still, this is not the full-proof solution, because increment/decrement operations on any variable are not atomic operations. <code>readCount++</code> (or <code>readCount--</code>) is not a single operation and consists of these three operations:</p>

<ol>
<li>Read <code>readCount</code></li>
<li>Add one to <code>readCount</code>, i.e. <code>readCount</code> + 1, (<code>readCount</code> - 1, in case of <code>readCount--</code>)</li>
<li>Write the value (from step 2) again in <code>readCount</code></li>
</ol>

<p><strong>Note</strong>: There are lots of links on Google about <code>volatile</code>, such as <a href="http://tutorials.jenkov.com/java-concurrency/volatile.html" rel="nofollow">this one</a>.</p>

<p>In order to solve this problem, I can think of two approaches:</p>

<ol>
<li><p><strong><code>synchronized</code> block</strong></p>

<p>We can write both increment (<code>readCount++</code>) and decrement (<code>readCount--</code>) operations in a <code>synchronized</code> block, because <code>readCount</code> is <code>static</code>. Will use a <code>ReaderWritersProblem.class</code> object for the <code>synchronized</code> block. Now, any thread that wants to enter the block first has to acquire the lock on the <code>ReaderWritersProblem.class</code> object. Then only it can proceed, otherwise it will wait. This way, we can make the increment/decrement operations atomic (which is actually composed of three operations, explained as above):</p>

<p>Replace <code>readCount++</code>:</p>

<pre><code>synchronized(ReaderWritersProblem.class) {
    readCount++;
}
</code></pre>

<p>Replace <code>readCount--</code>:</p>

<pre><code>synchronized(ReaderWritersProblem.class) {
    readCount--;
}
</code></pre></li>
<li><p><strong><code>AtomicInteger</code> class</strong></p>

<p>We can use Java in-built atomic concurrent APIs i.e. classes in package <code>java.util.concurrent.atomic</code>. As <code>readCount</code> is of type <code>Integer</code>, we can go for an <code>AtomicInteger</code> class. This class provides methods for increment and decrement operations and guarantees the atomicity of these operations.</p>

<p>We can modify the code as such:</p>

<p>Replace the <code>readCount</code> declaration:</p>

<pre><code>static AtomicInteger readCount = new AtomicInteger(0);
</code></pre>

<p>Replace <code>readCount++</code>:</p>

<pre><code>readCount.getAndIncrement();
</code></pre>

<p>Replace <code>readCount--</code>:</p>

<pre><code>readCount.getAndDecrement();
</code></pre>

<p>You can check <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicInteger.html" rel="nofollow">here</a> for more APIs in the <code>AtomicInteger</code> class.</p></li>
</ol>
    </div>