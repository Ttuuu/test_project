<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, it's fantastic that you're grouping your widgets together when you create them, and then grouping your calls to <code>grid</code> together. Most people who are starting to learn tkinter don't do that. The way you've done it makes the code much easier to understand than if you mixed it all together.</p>

<h2>Don't use wildcard imports</h2>

<p>Wildcard imports are discouraged by <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>. Instead, I recommend doing imports like this:</p>

<pre><code>import tkinter as tk
</code></pre>

<p>You will then have to change all of the code that references classes, functions, and constants to include the prefix <code>tk.</code> (eg: <code>root = tk.Tk()</code>)</p>

<p>This has two advantages: it helps keep the global namespace from getting too large (which can lead to difficult-to-spot problems), and it makes the fact that you're using tk explicit. This is especially important if you also import ttk, as both tk and ttk have classes with the same name (<code>Button</code>, <code>Label</code>, etc).</p>

<h2>Use a data structure that links questions with answers</h2>

<p>Imagine if you had 100 questions, and you needed to change the answer or a false answer to question 77. You would have to manually count down 77 lines in one of the lists and hope you didn't miscount. Even worse, what if you decide to re-order all of your questions and answers? It could take you all day to reorganize the data.</p>

<p>Instead, a simple technique is to use a dictionary where the keys are the questions and the values are a list of answers. You could always put the correct answer as the first item in the list.  </p>

<p>Dictionaries have a way to iterate over the values by key, so you can easily step over the flash cards in the order they are defined, or in sorted order, or in random order, or in any other way you see fit.</p>

<p>For example:</p>

<pre><code>flashcards = {
    "Who is the first pokemon?": [
        "Mew", "Pikachu", "Agumon", "Exodia",
    ],
    "Who is the first president?": [
        "G. Washington", "T.Biggums", "Big John", "M.Robbins",
    ],
    "What did MLK have?": [
        "A dream", "A thought", "An idea", "A concept",
    ],
    "Are you already dead?": [
        "Yes", "No", "Perhaps", "Maybe",
    ]
}
...
</code></pre>

<p>Another alternative would be to use a list of lists, if you want to keep your current logic that depends on the question index.</p>

<p>For example, </p>

<pre><code>flashcards = [
    ["Who is the first pokemon?", "Mew", "Pikachu", "Agumon", "Exodia"],
    ["Who is the first president?", ...],
    ...
]
</code></pre>

<p>Even better would be to define a <code>Flashcard</code> class, but I don't know if you're familar with classes yet.</p>

<h2>Create a main function</h2>

<p>I recommend putting the main application inside a function. Call it <code>main</code> (or anything else, but <code>main</code> will be instantly recognizable by most programmers). Then, call <code>main()</code> as the last step in the file.</p>

<p>For example:</p>

<pre><code>def main():
    global root

    root = Tk()
    root.title('Flashcard Application')
    root.resizable(width=0, height=0)
    center_window(600, 350)
    root.configure(bg=background_color)
    # Makes sure the items in the root grid are stretched to capacity
    root.grid_rowconfigure(0, weight=3)
    root.grid_columnconfigure(0, weight=1)
    root.grid_rowconfigure(1, weight=1)

... the rest of your function definitions ...

if __name__ == "__main__":
    main()
# end of the file
</code></pre>

<p>This last condition (<code>if __name__ == "__main__"</code>) is a common python trick which lets you import this file as a library, or use it as a script. Why is that important? It makes your code more portable, but more importantly, it makes the code more <em>testable</em>.  You more easily write unit tests that can load up all of your functions and test them independently of the main program.</p>

<p>While testability isn't terribly important in such a small program, this is a good habit to form.</p>

<p>For more information see <a href="https://stackoverflow.com/q/419163/7432">https://stackoverflow.com/q/419163/7432</a></p>

<h2>Move all of the other code into functions too</h2>

<p>A good rule of thumb is to have almost no code running in the global scope. While that's not overly important for such a small script, it's good to get into the habit of organizing your code into functions.</p>

<p>So, perhaps create a function called <code>create_ui</code> with all of the other tkinter code. Or, create a couple of functions such as <code>create_menubar</code> and <code>create_main_ui</code> or something like that. </p>

<p>This will help you to be more explicit about your use of global variables, and to think about how code logically groups together. </p>
    </div>