<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>No warnings/errors (almost)</strong></p>

<p>Aside from <code>for (1; j &lt; LEVEL2; j++)</code> with its unneeded and curious <code>1</code>, no errors (as expected) and no warnings (good) from my compilation.</p>

<p>Other compilers/checkers may say something, yet at least we are off to a good start.</p>

<p><strong>Why not pointers?</strong></p>

<p>OP reports "... not ... store pointers directly to objects because these may move around when I save and restore the session.", yet does not post even the declaration of a <code>Save_Object()</code> or <code>Restore_Object()</code>.</p>

<p>If the save/restore is in memory, little reason to not use <em>pointers</em>.</p>

<p>If the save/restore is in a <em>file</em>, then data should could use fixed width integers types rather than <code>int</code> as a step toward portability.  Endian would be another important concern.</p>

<p>A key reason to bring up this side issue is that it impacts the <code>Object</code> and then potentially all code so far.</p>

<p><strong>Naming</strong></p>

<p>It is good that most of the function have a common "Object" to collect these functions and type into a cohesive set.  </p>

<p>Even better would precede the function/type/defines names uniformly with "Object_" or "Object".</p>

<p><strong>Documentation</strong></p>

<p>I found the <code>object_int</code> being broken in to 2 parts via <code>(&amp;(Pool[i / LEVEL2])[i % LEVEL2]</code> a well buried in code and unclear.  Some explanation of the 2 <code>LEVEL1, LEVEL2</code> and memory model is deserved in a future <code>Object.h</code></p>

<p><strong>Overly complex (at least for me)</strong></p>

<p>In <code>DeList_Object()</code> there are 6 cases.  I'd expect the first 2 to roll into <code>if (object_address == NULL) return;</code>  I'd expect the last 4 to roll into less.  </p>

<p>Similar for others.</p>

<p>I'll need to study more to see how to improve, yet that is a fundamental weakness here of this code: its approach in not clear.</p>

<p><strong>.Prev not needed</strong></p>

<p>A double linked list is needed when loops exist going "left" or "right".  That is not the case here.  Loops only move "right" with <code>.Next</code>.  </p>

<p>Should the previous node need to be remembered for later use, simply record it as the loop proceeds to the "right".  Code never needs to know the Nth previous node, hence <code>.Prev</code> is not needed.</p>

<p><strong>Security</strong></p>

<p>In <code>main()</code>, code has <code>strcpy(object_address-&gt;Name, Name); object_address-&gt;Score = Score;</code>.  This obliges <code>typedef struct { ... } Object;</code> to be exposed to <code>main()</code>.  A secure approach would have an <em>opaque</em> declaration in <code>Object.h</code> for all to see</p>

<pre><code>typedef struct Object  Object;
</code></pre>

<p>... and then a <em>definition</em> for only <code>Object.c</code> to see.  The functional interface would provide get/set/access functions to <code>.Name, .Score</code>.</p>

<pre><code>typedef struct Object{
  int Prev;
  int Next;
  char Name[16];
  int Score;
} Object;
</code></pre>

<h2>Minor</h2>

<p><strong>Memory</strong></p>

<p>Allocate by de-reference, not type:<br>
Consider the 2 below:  The 2nd is right, even if the pointed to type changes.  Easier to code right, review and maintain.</p>

<pre><code>// Pool[i] = calloc(LEVEL2, sizeof(Object));
Pool[i] = calloc(LEVEL2, sizeof Pool[i][0]);
</code></pre>

<p><code>Pool[i] = calloc(...)</code> is not followed by an out-of-memory check.</p>

<p>No corresponding <code>free()</code> to mate with the <code>*alloc()</code>.  I'd expect a <code>Decrease/Destroy_Pool()</code></p>

<p><strong>Code looks dead</strong></p>

<p>The below <em>looks</em> wrong.  I'd expect a body of at least <code>;</code></p>

<pre><code>// for (i = 0; i &lt; LEVEL1 &amp;&amp; Pool[i] != 0; i++) {
//
// }
</code></pre>

<p><strong>List means removal?</strong></p>

<p><code>List_Object(int object_int)</code> deletes an object!  I'd expect a "list" function to not change pool and simply print.</p>

<p>Alternative:</p>

<pre><code>for (i = 0; i &lt; LEVEL1; i++) {
  if (Pool[i] == NULL) break;  // Clearly is an intended pointer compare
}
</code></pre>

<h2>Test Code</h2>

<p><strong>Separate</strong></p>

<p>Test code is in the middle of the implementation.  Instead, consider 3 files, <code>main.c, Object.c, Object.h</code>.</p>

<p><strong>scanf("%s", ...</strong></p>

<p>Instead of <code>scanf("%s", Name);</code>, code could use the equally evil <code>gets()</code>.  Better to insure that reading does not corrupt the test.</p>

<pre><code>// scanf("%s", Name);
scanf("%15s", Name);
</code></pre>
    </div>