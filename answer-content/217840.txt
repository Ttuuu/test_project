<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would like to talk about two basic topics regarding your tests: test scope and testing what is interesting.</p>

<p>Let me start with the point commonly encountered in tests by people just starting out with testing. Each test seems to test one public method instead of testing one expected behaviour per test. </p>

<p>Should one of your tests fail, you know that something is wrong with a specific method. However, you generally do not know which behaviour or contract is broken. This is especially problematic since a failure of a later Assert might actually be the root cause for the failure of an earlier one. Moreover, your test do not really tell what they test. </p>

<p>Usually, it is a better idea to have one test per expected behaviour and to name it in the Form <code>&lt;situation&gt;_&lt;expected outcome&gt;</code>. E.g. you could have <code>initialfillColor_White</code> or <code>setColor_hasColor</code>.</p>

<p>This way, you know from the test output which behaviour is broken. </p>

<p>Now, regarding what to test. Although testing everything is a good goal, I think that testing trivial logic like a setter that simply forwards to a backing field together with a getter that reads that field is not worth the effort to write the tests. 
What should be tested is all interesting behaviour, i.e. the non-trivial behaviour that can be observed from the outside. Unfortunately, that is the behaviour you do not test. It is contained in the <code>setPosition</code> method after the first line and in the <code>update</code> method. Although these methods only change internal state, this state is very visible via the <code>draw</code> method.</p>

<p>I think exposing state via the screen, is generally a problem for ubit testing UI components. The approach I have seen the most so far is to not wrote unit test for displayed components at all and instead to make the view trivial.</p>

<p>One more thing I realized regarding your tests is that they focus on the happy path. It might be good to document in the tests what you expect for the cases of <code>0</code>, <code>0.2</code> and <code>NaN</code> for <code>numUpgrades</code>.</p>
    </div>