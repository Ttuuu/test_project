<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How can I simplify the function and reduce multiple return statements?</p>
</blockquote>

<p>You <em>could</em> reduce the number of <code>return</code> statements by building up the new object in a more imperative way, without using the <code>map</code> and <code>reduce</code> functions,
but I'm not sure that would be better.
I think it's fine using functions as it is.</p>

<p>This part doesn't look great:</p>

<blockquote>
<pre><code>  let listObject = acc.find((el, i) =&gt; i &gt; lastHeadingIndex &amp;&amp; i &lt; index &amp;&amp; el.type === 'list');
</code></pre>
</blockquote>

<p>The problem with it is that you are using <code>lastHeadingIndex</code> to find the last heading added in <code>acc</code>,
but <code>acc.find</code> will search from the beginning.
With a large <code>data</code>, that would be a waste,
instead of searching from the end.</p>

<p>In fact, I'm wondering if <code>lastHeadingIndex</code> is important at all.
Isn't your real intention more like <em>"consecutive items of list type should be combined into a list object"</em>?
If that's the case, then you don't need to search from the end,
it's enough to look at the last item of <code>acc</code>:
if it's a list type, then append to it, if not, then create a new list type.</p>

<p>If this is indeed your real intention,
then you could get rid of <code>lastHeadingIndex</code>, and write a bit simpler:</p>

<pre><code>function moveToNewObject(data) {
  const listItemTypes = ['unordered-list-item', 'ordered-list-item'];
  return data[0].areas.map(area =&gt; {
    var sec = area.sections;
    return sec.map(section =&gt; {
      return section.rjf.reduce((acc, current, index) =&gt; {
        if (!listItemTypes.includes(current.type)) {
          acc.push(current);
          return acc;
        }

        if (!acc.length || acc[acc.length - 1].type !== 'list') {
          acc.push({type: 'list', items: [current]});
          return acc;
        }

        acc[acc.length - 1].items.push(current);
        return acc;
      }, [])
    });
  });
}
</code></pre>

<p>I would also change the name of the function,
because <code>moveToNewObject</code> sounds overly generic,
it doesn't seem to describe its real purpose.
How about <code>combineListItemTypes</code>,
or <code>transformCombiningListItemTypes</code>?</p>
    </div>