<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Generics</h1>

<blockquote>
  <p>To execute the command the Class is generic on M (which is your app)</p>
  
  <pre class="lang-java prettyprint-override"><code>public abstract class Command&lt;M&gt; {
   // ..
   public abstract Response execute(M invoked, List&lt;String&gt; parameter);
   // ..
</code></pre>
</blockquote>

<p><span class="math-container">\$ \$</span>   </p>

<blockquote>
  <p><code>M</code> is the application, which implements the <code>CommandLineInterpreter</code> </p>
  
  <pre class="lang-java prettyprint-override"><code>public interface CommandLineInterpreter&lt;M&gt; { 
   Set&lt;Command&lt;M&gt;&gt; getCommands();
   Response executeCommand(String identifier, List&lt;String&gt; parameter);
}
</code></pre>
</blockquote>

<p>Both quotes are wrong, because <code>M</code> would allow every reference type like  <code>Integer</code> or <code>CustomClassXY</code>.</p>

<p>To implement it like in the quote described that <code>M</code> can only be <code>CommandLineInterface</code> you do not need generics..</p>

<pre class="lang-java prettyprint-override"><code>abstract class Command {
    // ..
     public abstract Response execute(CommandLineInterface invoked, List&lt;String&gt; parameter);
    // ..
}

interface CommandLineInterpreter {
    Set&lt;Command&gt; getCommands();
    Response executeCommand(String identifier, List&lt;String&gt; parameter);
}
</code></pre>

<p>After that we can change the redundant methods to map the <code>Command</code>s inside a <code>Set</code></p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private Set&lt;Command&lt;?&gt;&gt; getAllCommands() {
   Set&lt;Command&lt;?&gt;&gt; commands = mapCommands(cli.getCommands());
   commands.addAll(getCommands());
   return commands;
}

private Set&lt;Command&lt;?&gt;&gt; mapCommands(Set commands) {
  Set&lt;Command&lt;?&gt;&gt; mappedCommands = new HashSet&lt;&gt;();
  for (Object o : commands) mapCommand(o).ifPresent(mappedCommands::add);
  return mappedCommands;
}

private Optional&lt;Command&lt;?&gt;&gt; mapCommand(Object o) {
   return (o instanceof Command&lt;?&gt;) ? Optional.of((Command&lt;?&gt;) o) : Optional.empty();
}
</code></pre>
</blockquote>

<p>Can know look like</p>

<pre class="lang-java prettyprint-override"><code>private Set&lt;Command&gt; getAllCommands() {
    Set&lt;Command&gt; commands = cli.getCommands();
    commands.addAll(getCommands());
    return commands;
}
</code></pre>

<p>You can read more about <a href="https://the-eye.eu/public/Books/IT%20Various/Effective%20Java%2C%202nd%20Edition.pdf#%5B%7B%22num%22%3A689%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C-57%2C644%2C1%5D" rel="nofollow noreferrer">Generics in Effective Java from Joshua Bloch</a>.</p>

<h1>A More Suitable Data Structure</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>// in commandLineInterface.executeCommand
Optional&lt;Command&lt;CommandLineInterface&gt;&gt; cmd = getCommands().stream()
                                                           .filter(command -&gt; command.isIdentifier(identifier))
                                                           .findAny();
</code></pre>
</blockquote>

<p>The task of <code>executeCommand</code> is to find only <em>one</em> <code>Command</code> from <code>getCommands</code>. The method signature of <code>getCommands</code> is</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Set&lt;Command&lt;CommandLineInterface&gt;&gt; getCommands()
</code></pre>
</blockquote>

<p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html" rel="nofollow noreferrer"><code>Set</code></a> only provides its content through an <code>Iterator</code>, so we have to iterate all elements to get the element we want with a time complexity of <span class="math-container">\$O(n)\$</span></p>

<p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" rel="nofollow noreferrer"><code>Map</code></a> in the form of <code>Map&lt;Indentifier, Command&gt;</code> is equivalent to a <code>Set</code> but with the benefit that we can access a element through the <code>get</code>-method in <span class="math-container">\$O(1)\$</span>.</p>

<pre class="lang-java prettyprint-override"><code>Optional&lt;Command&lt;CommandLineInterface&gt;&gt; cmd = Optional.ofNullable(getCommands().get(identifier));
</code></pre>

<hr>

<h1><a href="http://wiki.c2.com/?FeatureEnvySmell" rel="nofollow noreferrer">Feature Envy</a></h1>

<blockquote>
  <p>The whole point of objects is that they are a technique to package data with the processes used on that data. A classic [code] smell is a method that seems more interested in a class other than the one it is in. The most common focus of the envy is the data.</p>
</blockquote>

<h2>In Method <code>hasPredefinedCommands</code></h2>

<p>When we take a look into the constructor of <code>CommandLineInterface</code>, we can find a method <code>hasPredefinedCommands</code>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public CommandLineInterface(CommandLineInterpreter&lt;?&gt; cli, InputStream input, PrintStream output) {
   if (cli == null || hasPredefinedCommands(cli.getCommands())) 
</code></pre>
</blockquote>

<p>Since the method gets only used at one place and is private we know that the argument <code>commands</code> will always be the commands of a <code>CommandLineInterpreter</code>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private boolean hasPredefinedCommands(Set&lt;? extends Command&lt;?&gt;&gt; commands) {
   return !Collections.disjoint(commands, getCommands());
}
</code></pre>
</blockquote>

<p>This method should be renamed to <code>contains</code> and moved into <code>CommandLineInterpreter</code>.</p>

<pre class="lang-java prettyprint-override"><code>public CommandLineInterface(CommandLineInterpreter&lt;?&gt; cli, InputStream input, PrintStream output) {
    if (cli == null || cli.contains(getCommands()) 
</code></pre>

<h1>Responsibilities Of <code>CommandLineInterface</code></h1>

<p>You described the <code>CommandLineInterface</code> with</p>

<blockquote>
  <p>This class handles the user input from the command line. It is itself a CommandLineInterpreter <strong>and</strong> offers two basic commands: help and exit. </p>
</blockquote>

<p>The tagged <strong>and</strong> in the quote shows that the <code>CommandLineInterface</code> has two responsibilities:</p>

<ul>
<li>handles the user input</li>
<li>offers two basic commands</li>
</ul>

<h2>Choose a Different Name Like CommandLineInteraction</h2>

<p>The name <code>CommandLineInterface</code> is so abstract, that it could be everything and from a programmer perspective I would thing that this is an interface and not a class.. Maybe the responsibilities for this class makes more sense, if we change the name to <code>ComandLineInteraction</code>.</p>

<p>With this name I associate thinks the already existing method <code>start</code> and but also thinks like <code>stop</code>, <code>clean</code>, <code>isRunning</code> and so on..</p>

<h2>Let's Remove the Second Responsibility</h2>

<p>First we need to check the reason, why it currently is in <code>CommandLineInterface</code>. In the method <code>CommandLineInterface.getCommands</code>:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public Set&lt;Command&lt;CommandLineInterface&gt;&gt; getCommands() {
 // ..
 cliCommands.add(new Command&lt;CommandLineInterface&gt;("exit") {
   @Override
   public Response execute(CommandLineInterface commandLineInterface, &gt;List&lt;String&gt; parameter) {
     isRunning = false;
     return Response.success();
   }
 });
 // ..
}
</code></pre>
</blockquote>

<p>The reason is the statement <code>isRunning = false</code>, because <code>isRunning</code> is a private variable of <code>CommandLineInterface</code> and you can only access it inside it.</p>

<p>You already provide a method <code>start</code> and we could create a method <code>stop</code> too. After that the creation of the commands does no longer need to be in <code>CommandLineInterface</code>.</p>

<h3>The Method <code>stop</code></h3>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public void stop() {
    isRunning = false;
}
</code></pre>
</blockquote>

<p>The method <code>showHelp</code> should be public</p>

<h3>Inject Default Commands through the Contractor</h3>

<pre class="lang-java prettyprint-override"><code>public CommandLineInteractions(..., Map&lt;String, Command&gt; default) {
    // ...
    this.commands = default;
}
</code></pre>

<p>From the outside it now looks like</p>

<pre class="lang-java prettyprint-override"><code>Map&lt;String, Command&lt;&gt;&gt; defaults  = new HashMap&lt;&gt;();
defaults.put("exit", 
             new Command("exit") {
                 @Override
                 public Response execute(CommandLineInterface commandLineInterface, List&lt;String&gt; parameter) {
                     commandLineInterface.stop();
                     return commandLineInterface.isRunning() 
                         ? Response.fail("App is still running")
                         : Response.success();
             }
});
CommandLineInterface app = new Command(..., defaults);
</code></pre>

<hr>

<h1>To The Comments</h1>

<blockquote>
  <p>ok about the proper data type (map instead of set) - i want to free the app of creating a redundant data type (identifier, Command) since the command already provides a method getIdentifier()... so any CommandLineInterpreter has to only return the commands that are availible. the amount of commands is rather short, i don't expect more than a dozends commands to be availible so i tend to CleanCode rule <em>don't optimze</em> , see <a href="https://clean-code-developer.com/grades/grade-1-red/#Beware_of_Optimizations" rel="nofollow noreferrer">https://clean-code-developer.com/grades/grade-1-red/#Beware_of_Optimizations</a> </p>
</blockquote>

<p>From the link you provide:</p>

<blockquote>
  <p>Understandability of code hast always priority. Optimized code pretty often is all but well readable.</p>
</blockquote>

<p>I think the optimization rule doesn't apply to change the <code>Set</code> to an <code>Map</code>, since the <code>Map</code> is the more readable and intuitive way of getting a <code>Command</code> by its name.</p>

<blockquote>
  <p>i want to free the app of creating a redundant data type (identifier, Command) since the command already provides a method getIdentifier()...</p>
</blockquote>

<p>The <em>identifier</em> can still be the string you used before. So it is not really redundant. </p>

<p>When we philosophize a little bit: <em>Does a command need an identifier (name) by it self?</em></p>

<p>The <code>Map</code>-solution would make the <em>identifier</em> in the command useless and more flexable:<br>
Imagine you use your tool on work and you have a new Spanish employee with low (in your case German) or English skills. Your tool currently only works in german/english and the new employee don't know how to use it.<br>
With <code>Set</code> solution you need to make a new Command, witch is doing the same only with a new identifier, but with the <code>Map</code> solution you put in the reference of the same command but with a different key.</p>

<h2>Create a <a href="https://www.cs.helsinki.fi/u/luontola/tdd-2009/ext/ObjectCalisthenics.pdf" rel="nofollow noreferrer">First Class Collection</a></h2>

<blockquote>
  <p>i want to free the app </p>
</blockquote>

<p>What is a First Class Collection:</p>

<blockquote>
  <p>Any class that contains a collection should contain no other member variables. Each collection gets wrapped in its own class, so now behaviors related to the collection have a home. </p>
</blockquote>

<p>When you know want to switch from a <code>Set</code> to a <code>Map</code> or what ever data-type you need to change at sooo <em>many</em> places. But with a FCC you need <em>only</em> to change inside the FCC.</p>

<p>The FCC would define all the methods you need like <code>get</code> and <code>contains</code> and the outer world doesn't care if you are using inside it a <code>Set</code> or a <code>Map</code> - or short : <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" rel="nofollow noreferrer">data encapsulation</a>. </p>
    </div>