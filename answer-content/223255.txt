<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This would be a great opportunity to explore es6 classes.</p>

<ol>
<li>create a Fighter class that contains the basic attributes and methods for a fighter/hero</li>
</ol>

<pre class="lang-js prettyprint-override"><code>// for example:
class Fighter {
  name = '';
  life = 10;
  get isAlive() {
    this.life &gt; 0;
  }

  constructor({ name = null}) {
    if (!name) {
      throw new Error('A hero needs a name!');
    }

    this.name = name;
  }

  attack() {
    //...
  }
  takeDamage(amount) {
    //...
  }
}
</code></pre>

<p>2 . When creating a new game create instances of your fighter / heros.</p>

<pre class="lang-js prettyprint-override"><code>const batman = new Fighter({ name: 'batman'});
batman.attack() // etc...
</code></pre>

<ol start="3">
<li><p>Consider that your game function is more like a <code>match</code>, and think how this could be created as a class.  Each match class should decribe the lifecycle of the round.</p></li>
<li><p>Try to separate out things that affect the DOM and things that are just data.  The messages about who got killed for example, are all just text.  your match could call a single function with a message and type (if for example you wanted to style different types of messages).  A good way to keep things clear would be to have a class, or just an object or group of methods that are only responsible for rendering the view.</p>

<ul>
<li>a another good example is the checkEndGame.  This function should only care about changing the state of the game, and not updating the DOM</li>
</ul></li>
<li><p>For readability try avoiding nested conditional statements, the inner block can usually be refactored out to be methods / or functions.  Essentially you should divide the game logic, from the "view"</p></li>
<li><p>If you start to think about some basic enhancements, such as having random skill and luck settings for your heros that affect the attacks, or amount of damage taken, or for example being able to generate a number of heros for a battle royale,   your current approach will begin to become hard to manage.  </p></li>
</ol>

<p>While all of the above is perfectly possible without classes, it's like a good use case for them, and a nice way to explore them.</p>

<p>Hope that helps.</p>
    </div>