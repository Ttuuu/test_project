<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>OsStr</code> conversion</strong></p>

<p>According to the <a href="https://doc.rust-lang.org/src/std/path.rs.html#1848-1850" rel="nofollow noreferrer"><code>path</code> source</a>, <code>s.as_os_str().to_str()</code> is the same as <code>s.to_str()</code>:</p>

<pre><code>pub fn as_os_str(&amp;self) -&gt; &amp;OsStr {
    &amp;self.inner
}

pub fn to_str(&amp;self) -&gt; Option&lt;&amp;str&gt; {
    self.inner.to_str()
}
</code></pre>

<p>Moreover, using <code>unwrap()</code> here is not safe at all as invalid Unicode is pretty common (e.g. when mounting file system with alien character encoding). There is <a href="https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.to_string_lossy" rel="nofollow noreferrer"><code>Path::to_string_lossy</code></a> that converts path to a printable string.</p>

<hr>

<p><strong>Using <code>crossterm</code></strong></p>

<p><code>crossterm</code> provides helper macros to output strings. It is more idiomatic to use them instead of <code>println!("{}{}", ...)</code>: <a href="https://docs.rs/crossterm/0.12.0/crossterm/macro.execute.html" rel="nofollow noreferrer"><code>execute</code></a> and <a href="https://docs.rs/crossterm/0.12.0/crossterm/macro.queue.html" rel="nofollow noreferrer"><code>queue</code></a>.</p>

<p>Using <code>queue</code> may be beneficial in case of outputting to the pipe instead of stdout.</p>

<hr>

<p><strong>Reporting errors</strong></p>

<p>It is common practice to report errors to <code>stderr</code>. It also may be more helpful to show error reason when <code>fs::read_dir()</code> fails. You can also use <code>crossterm</code> to make it more colorful:</p>

<pre><code>match fs::read_dir(dir) {
    Err(err) =&gt;
        execute!(
            stdout(),
            Colored::Fg(Color::Red),
            Output(format!("Failed to list {}: {}", dir.to_string_lossy(), err)),
            Reset),
    Ok(entries) =&gt; ..
}
</code></pre>

<hr>

<p><strong>Callbacks</strong></p>

<p>Using callbacks to print colorful vs. normal is a nice idea, but is not future-proof. It will be hard to add other output options like short/long view, hidden files, etc.</p>
    </div>