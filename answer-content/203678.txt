<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to implement the command manager pattern, you can do something so very much simpler that I don't really understand what you're aiming for.</p>

<p>As you know, the design pattern has a <code>Command</code> class exposing methods with <code>void execute()</code> and <code>void undo()</code> signatures. With C++, it can be abbreviated to:</p>

<pre><code>using Command = std::pair&lt;std::function&lt;void()&gt;, std::function&lt;void()&gt;&gt;;
</code></pre>

<p>where the first function is the <code>execute</code> method, and the second <code>undo</code>.</p>

<p>With <code>lambda</code>s, which can capture anything, you can write on the fly any do/undo couple and build a <code>Command</code> from it.</p>

<p>Then your <code>Manager</code> is just a glorified <code>vector</code> which keeps track of the last executed function (a vector does as well as two stacks in this instance):</p>

<pre><code>class Manager {

    std::vector&lt;Command&gt; timeline;
    std::vector&lt;Command&gt;::iterator last_command = timeline.end();

    public:
    void execute(const Command&amp; cmd) {
        cmd.first();
        if (last_command != timeline.end())
            timeline.erase(last_command, timeline.end());
        timeline.push_back(cmd);
        last_command = timeline.end();
    }

    void undo() {
        if (last_command == timeline.begin()) return;
        (--last_command)-&gt;second();
    }

    void redo() {
        if (last_command == timeline.end()) return;
        (last_command++)-&gt;first();
    }

};
</code></pre>

<p>The basic usage is still more basic:</p>

<pre><code>auto say(const std::string&amp; s) {
    return Command{
        [s]() { std::cout &lt;&lt; s &lt;&lt; std::endl; },
        [s]() { std::cout &lt;&lt; "Oh no, I didn't mean " &lt;&lt; s &lt;&lt; std::endl; }};
}

int main() {
    Manager m;
    m.execute(say("Hello!"));
    m.execute(say("You're an i....t!"));
    m.undo();
    m.redo();
    m.undo();
    m.execute(say("You're brilliant!"));
    m.undo();
    m.undo();
    m.redo();
}
</code></pre>

<p>I understand that it isn't really a review of your code (by the way, your code is quite good at first glance, outside of the lack of a virtual destructor for your <code>Action</code> class). But I'm hoping to expand on my answer once you've provide a bit more context and explain the difference between what you want to do and the command manager pattern.</p>

<p>A complete example for copy-and-paste ease:</p>

<pre><code>#include &lt;functional&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

using Command = std::pair&lt;std::function&lt;void()&gt;, std::function&lt;void()&gt;&gt;;

class Manager {

    std::vector&lt;Command&gt; timeline;
    std::vector&lt;Command&gt;::iterator last_command = timeline.end();

    public:
    void execute(const Command&amp; cmd) {
        cmd.first();
        if (last_command != timeline.end())
            timeline.erase(last_command, timeline.end());
        timeline.push_back(cmd);
        last_command = timeline.end();
    }

    void undo() {
        if (last_command == timeline.begin()) return;
        (--last_command)-&gt;second();
    }

    void redo() {
        if (last_command == timeline.end()) return;
        (last_command++)-&gt;first();
    }

};

auto say(const std::string&amp; s) {
    return Command{
        [s]() { std::cout &lt;&lt; s &lt;&lt; std::endl; },
        [s]() { std::cout &lt;&lt; "Oh no, I didn't mean " &lt;&lt; s &lt;&lt; std::endl; }};
}

int main() {
    Manager m;
    m.execute(say("Hello!"));
    m.execute(say("You're an i....t!"));
    m.undo();
    m.redo();
    m.undo();
    m.execute(say("You're brilliant!"));
    m.undo();
    m.undo();
    m.redo();
}
</code></pre>
    </div>