<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will start off with an advice on performance and then comment on a few more general topics.</p>

<h2>Performance</h2>

<p>Your general performance problem is probably that you make too many sheet accesses. These are slow. Instead, you could read in all values in a range in one go. Used on a range containing more than a single cell, the <code>Value</code> property returns a <code>Variant</code> containing a 2-dim array of the values in the first area of the range. </p>

<p>You could simply read in the values of both ranges, do the comparison and write the value from the data sheet if the values do not agree and your flag colour is not set. Unfortunately, you cannot avoid the single cell accesses for writing because you save whether the value is to be updated via the cell colour.</p>

<h2>Unqualified Member Calls</h2>

<p>Please note that every unqualified use of the <code>Cells</code> member does resolve to <code>ActiveSheet.Cells</code>. The same is true for <code>Rows</code> and <code>Columns</code>. For your code, this does not really make a difference since you use these methods to calculate things that do not depend on a specific worksheet. However, it looks like an error at first.</p>

<h2>Use of Default Members</h2>

<p>Using default members to shorten the code, usually is good for readability. Any future maintainer of the code will thank you if you are more explicit about what you do. Thus, it would be helpful to replace the implicit default member calls in statements like <code>tempCell = cell</code> with the equivalent version <code>tempCell.Value = cell.Value</code>.</p>

<h2>Code Names for Sheet Access</h2>

<p>You can change the code name of sheets in the workbook containing the code in the properties window for the sheet. These names allow you to access the sheet directly via this name without requiring the stringly-typed access via <code>Worksheets</code>. E.g. if you set the code name of the sheet named <code>"Steering Wheel"</code> to <code>SteeringWheel</code>, you can access cell M30 via <code>SteeringWheel.Range("M30")</code>.  </p>

<h2>Avoiding Magic Numbers</h2>

<p>In general, using the same explicit number in several places inside a program is a mistake waiting to happen. When the value needs to be changed later, one has to find all occurrences in the code and replace them all. To avoid this, it makes sense to give the value a name and save it in one place, e.g. as a constant. Here, this applies to the colour used as marker colour. </p>

<h2>Named Ranges</h2>

<p>Accessing data from a worksheet via its address means that whenever the layout changes, the code has to be adapted as well. This can be avoided using named ranges. If you introduced a named range <code>TempFilePathRange</code> for cell M30 scoped to the steering wheel worksheet, you could get the file path via <code>SteeringWheel.Range("TempFilePathRange").Value</code>, which does not only work after layout changes, but also conveys much better what it does. </p>

<h2>Single Responsibility Principle</h2>

<p>For maintainability, it is generally a good idea to follow the <em>single responsibility principle</em> (SRP), which basically says that each method should be responsible for one and only one thing. The hard thing about it is to find a good definition of responsibility for the given situation.</p>

<p>You procedure definitely has a lot of responsibilities: Disabling and enabling all automatic updates, getting the temporary file path, opening and closing the temporary file, getting the data worksheet, extracting the ranges to compare and executing the comparison.</p>

<p>You could split this into several procedures and functions. The outermost could simply do the enabling and disabling of Excel features and call a private procedure doing the comparison in between. The inner one could call a function that returns a reference to the temporary file (and <code>Nothing</code> if it does not exist), which calls another function responsible for determining the file name. Next, it could call a function that extracts the range used for comparison from the temporary file and one that returns the reference range. Then these could be sent to a procedure executing the actual comparisons and updates. Finally, the procedure would close the temporary file. Similarly, the comparison operation could also e extracted into its own function. </p>

<p>After such a split, each sub-procedure or function would do a short sequence of simple actions with the details hidden in the functions and procedures it calls. This is generally much easier to digest then having to deal with all details at once. In addition, this approach this basically documents you code automatically, provided you use meaningful names for the functions and procedures.</p>
    </div>