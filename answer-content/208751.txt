<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Comments from answers on your other questions</p>

<p>From <a href="https://codereview.stackexchange.com/a/208617/9452">Julien Rous√©'s answer</a>:</p>

<blockquote>
  <p><strong>Documentation</strong></p>
  
  <p>You have comments, that's good. But it is way better to have a good
  docstring for the function, and fewer comments.</p>
  
  <p>Your docstring should describe what the function try to accomplish,
  why it exists, the parameter (eventually their type) and what does the
  function return.</p>
</blockquote>

<p>Also, there are <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">Python Docstrings conventions</a> (which are not always fully followed but they are definitly worh reading).</p>

<blockquote>
  <p><strong>Indentation</strong></p>
  
  <p>Your code here:  is very hard to read. Maybe it's because
  you pasted it into CodeReview, but be carefull when writing long and
  hard condition. The more difficult it is to read, the more difficult
  it is to debug/maintain/extend.</p>
</blockquote>

<p>From <a href="https://codereview.stackexchange.com/a/208506/9452">l0b0's answer</a>:</p>

<blockquote>
  <p>Naming is really important. string, array, i and j are not
  descriptive. After reading the entire function I think they could be
  renamed sentence, words, string_index and word_length.</p>
</blockquote>

<p>Then</p>

<blockquote>
  <p>What is the significance of 38? If it's not significant it should be
  removed, if it is it should be named something like max_result_length.</p>
</blockquote>

<p>And</p>

<blockquote>
  <p>In Python return is a simple statement, which means its argument
  should not be put in parentheses.</p>
</blockquote>

<hr>

<p>My own comments</p>

<p><strong>Style</strong></p>

<p>Python has a <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide called PEP 8</a>. It is worth reading and trying to apply. Among other things it gives advices about naming, spacing, etc.</p>

<p><strong>Tests</strong></p>

<p>Your function takes 2 inputs and return an output. It would be a nice touch to write a few tests for it.
(It may be worth pointing out that the <code>abbreviations</code> parameter does not need to be a config file object, any object acting like a dictionnary would do the trick. This can make writing tests easier and more explicit and you do not need to use external modules to load config files nor to have configuration in a different file.</p>

<p><strong>Taking the most out of dicts</strong></p>

<p>You can iterate over pairs of (key, values) on a dictionnary using <code>items()</code>. Also, you can take this chance to rename (key, val) to (longword, shortword) to be more explicit.</p>

<p>Work in progress: at this stage, I have</p>

<pre><code>MAX_RESULT_LENGTH = 38

def shorten_words(abbreviations, string):
    """Shorten string `str` using the dictionnary_like object `abbreviations`."""
    for longword, shortword in abbreviations.items():

        # finds beginning of possible words
        it_string = 0
        while it_string &lt; len(string) and len(string) &gt; MAX_RESULT_LENGTH:
            if string[it_string] == ' ' or it_string == 0:
                if it_string == 0:
                    it_string = -1

                # finds end of possible words
                it_word = 0
                while (it_word &lt; len(longword) and
                       it_string + it_word + 1 &lt; len(string) and
                       string[it_string + it_word + 1] == longword[it_word].upper()):
                    it_word += 1

                # cuts the line
                if (it_word == len(longword) and
                    (it_string + it_word + 1 == len(string) or string[it_string + it_word + 1] == ' ')):
                    string = string[:it_string + 1] + shortword.upper() + string[it_string + it_word + 1:]
                # cuts the line for the same word with an 'S' at the end
                elif (it_word == len(longword) and
                      (string[it_string + it_word + 1] == 'S' and
                         (it_string + it_word + 2 == len(string) or string[it_string + it_word + 2] == ' '))):
                    it_word += 1
                    string = string[:it_string + 1] + shortword.upper() + string[it_string + it_word + 1:]

            it_string += 1
            if it_string == 0:
                it_string = 1
    return string
</code></pre>
    </div>