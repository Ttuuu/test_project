<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In JavaScript/TypeScript it is custom to place the opening braces at the end of the line instead of on a new line by itself.</p>

<p>Insert a space between control statements and the opening round brackets. (Also don't put round brackets around the expression of a <code>return</code> statement.)</p>

<p>Always use braces even when you only have one line after the statement.</p>

<p>Example: </p>

<pre><code>if (str != null) {
   this.strArray.push(str);
}
</code></pre>

<p>Always have a space between the colon and type.</p>

<p>Method names should start with a lower case letter, especially since you should be overriding <code>toString</code>.</p>

<p>There should be a blank line between methods.</p>

<hr>

<p>The empty constructor is pointless and should be left out.</p>

<p>The <code>Get</code> method is not really a good idea. The fact that your string builder uses an array internally shouldn't influence the interface of the class.</p>

<p>If you do have a <code>Get</code> method like this, then you should consider emulating the signature of a regular array and return <code>undefined</code> instead of <code>null</code>, when the index is out of bounds. That actually would save you the checking of the bounds yourself:</p>

<pre><code>get(nIndex: number): string {
    return this.strArray[nIndex];
}
</code></pre>

<p>In <code>IsEmpty</code> the expression <code>this.strArray.length == 0</code> (should be a <code>===</code> BTW) returns a boolean, so you can return that directly:</p>

<pre><code>isEmpty(): boolean {
    return this.strArray.length === 0;
}
</code></pre>

<p>Also this may not be correct way to determine an empty StringBuilder. If the array contained only empty strings, shouldn't the StringBuilder still be consider empty? But this could be covered by the next point.</p>

<p><code>Append</code> should not only ignore <code>null</code> as a parameter, but also <code>undefined</code> and empty strings, so just do:</p>

<pre><code>append(str: string): void {
    if (!str) {
        this.strArray.push(str);
    }
}
</code></pre>

<p><code>ToArrayString</code> doesn't seem to be a good method name. I'd suggest something like <code>joinToString</code>. Also there is no need to use a variable in there. </p>

<pre><code>joinToString(delimeter: string): string {
    return this.strArray.join(delimeter);
}
</code></pre>

<p>And avoid a little bit of duplicate code by having <code>toString</code> call <code>ToArrayString</code>/<code>joinToString</code>.</p>

<pre><code>toString(): string {
    return this.joinToString("");
}
</code></pre>
    </div>