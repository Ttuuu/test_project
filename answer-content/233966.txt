<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, there are many subtle and not so subtle design-considerations for you:</p>

<ol>
<li><p>Just getting an optional value is restrictive, as you cannot modify it.</p></li>
<li><p>Just getting an optional value is moderately surprising, as nearly all other relevant APIs return an iterator, which can be the end-iterator to indicate failure.</p></li>
<li><p>Just adding basic templating would allow use of any kind of range, not just <code>std::vector&lt;int&gt;</code>.<br>
Alternatively, if you stay with a contiguous sequence of <code>int</code>s, <a href="//stackoverflow.com/q/45723819/what-is-a-span-and-when-should-i-use-one">use <code>span&lt;const int&gt;</code> from the GSL or C++20</a>.</p></li>
<li><p><a href="//stackoverflow.com/q/45723819/what-is-a-span-and-when-should-i-use-one">Signed integer overflow is Undefined Behavior</a>. So yes, simply subtracting there is a bug, as we don't know anything about the values.</p></li>
<li><p>A better name for <code>range</code> would be <code>delta</code>, and for <code>zero</code> consider <code>center</code>.</p></li>
<li><p>Unless the type of <code>delta</code> is bigger than the value_type, or unsigned, you cannot ask to match all.</p></li>
<li><p>Considering all the problems, why not use min and max in the interface instead?</p></li>
<li><p>Consider using the standard algorithms instead of rolling your own. They won't be any less efficient.</p></li>
</ol>

<pre><code>#include &lt;algorithm&gt;
#include &lt;limits&gt;
#include &lt;type_traits&gt;

template &lt;class T&gt;
auto get_only_match(T const&amp; data, T::value_type delta, T::value_type mid = T::value_type()) {
    if (delta &lt;= 0) return data.end();
    using limits = std::numeric_limits&lt;T::value_type&gt;;
    auto min = limits::min() + delta &gt; mid ? limits::min() : mid - delta;
    auto max = limits::max() - delta &lt; mid ? limits::max() : mid + delta;
    auto pred = [&amp;](auto item) { return min &lt; item &amp;&amp; item &lt; max; };
    auto f = [&amp;](auto pos) { return std::find_if(pos, data.end(), pred); };
    if (auto match = f(data.begin()); match != data.end())
        if (f(std::next(match)) == data.end())
            return match;
    return data.end();
}
</code></pre>

<p>Or using the simpler and more flexible description for integer-ranges:</p>

<pre><code>#include &lt;algorithm&gt;

template &lt;class T&gt;
auto get_only_match(T const&amp; data, T::value_type min, T::value_type max) {
    auto pred = [&amp;](auto item) { return min &lt;= item &amp;&amp; item &lt;= max; };
    auto f = [&amp;](auto pos) { return std::find_if(pos, data.end(), pred); };
    if (auto match = f(data.begin()); match != data.end())
        if (f(std::next(match)) == data.end())
            return match;
    return data.end();
}
</code></pre>
    </div>