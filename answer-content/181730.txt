<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tested your code with a <code>main</code> that calls</p>

<pre><code>leetSpeak(new Scanner(System.in), System.out);
</code></pre>

<p>Your code has three calls to <code>new String(String)</code>.  You may remove all three calls; they only make a copy of the string, and you don't need the copy.  Every instance of java.lang.String is immutable; the contents of the string never change, so you never need to copy a java.lang.String to keep its contents.</p>

<p>Your code prints an extra space at the end of each line.  It's only one space, but it has a slight chance to make a line too long.  Some displays (like my terminal window) split a long line into two lines, so I might see an extra line with just the space.</p>

<hr>

<p>I would use <strong>regular expressions</strong>.  I have used regexps in Perl and Ruby; <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum" rel="nofollow noreferrer">regular expressions in Java</a> aren't too different from Perl.  The code with regexps is</p>

<pre><code>public static void leetSpeak(Scanner sc, PrintStream ps) {
    while (sc.hasNextLine()) {
        String line = sc.nextLine()
            .replace('o', '0')
            .replace('l', '1')
            .replace('e', '3')
            .replace('a', '4')
            .replace('t', '7')
            .replaceAll("s(?=\\s|$)", "Z")
            .replaceAll("\\S+", "($0)");
        ps.println(line);
    }
}
</code></pre>

<p>I copied your while loop to read line by line.  I don't split the line into tokens, because the regexps work on the whole line.  The regexps are really <code>s(?=\s|$)</code> and <code>\S+</code>, but Java's string literals need <code>"\\"</code> to put a single <code>\</code> in the regexp.</p>

<p>The regexp <code>s(?=\s|$)</code> looks for <code>s</code> at the end of a token.  The <code>(?=XXX)</code> looks ahead of the <code>s</code>; it looks for whitespace <code>\s</code> or <code>|</code> end of line <code>$</code>.  The look-ahead isn't part of the match, so the regexp only matches <code>s</code>, and the replacement changes <code>s</code> to <code>Z</code>.</p>

<p>The regexp <code>\S+</code> looks for tokens.  <code>\S</code> is the opposite of <code>\s</code>, and <code>+</code> means to match one or more <code>\S</code>.  Then <code>($0)</code> wraps each token in parentheses, because <code>$0</code> is the matched text.</p>

<hr>

<p><strong>What is a word?</strong> The code changes <code>players.</code> into <code>(p14y3rs.)</code>.  It isn't <code>(p14y3rZ).</code> because the code puts all non-whitespace in the word.  This is because, "You may assume that each token from the input file is separated by exactly one space."</p>

<p>The code <strong>adds a line break</strong> after the last line if it wasn't there.  So it does "preserve the original line breaks from the input", but it might also add one more line break.  This is because Java's <code>nextLine</code> always chomps off the line break, so we don't know whether the last line ended with a line break.</p>
    </div>