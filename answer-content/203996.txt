<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regardless of which kind of set you use to keep track, you'll be spending a lot of time in <code>std::rotate</code> when given an input like this:</p>

<pre><code>std::array&lt;int, 10000&gt;()
</code></pre>

<p>Yes, all the elements compare equal, and we dutifully rotate each one individually, resulting in (I think) <em>¼n²</em> move operations.  This is a problem with the "naive method", too, but not with <code>std::unique()</code>.  If we're going to use extra storage, it might be more productive to use at least some of it to selectively copy input values to a new collection, and then <code>swap()</code> that new collection back into place.</p>

<hr>

<p>I know it's not really the code for review, but I can't resist pointing out that you could have written the naive version more clearly with <code>std::remove()</code>, like this:</p>

<pre><code>template &lt;typename Iterator&gt;
Iterator remove_duplicates(Iterator first, Iterator last)
{
    while (first != last) {
        auto const&amp; value = *first;
        last = std::remove(first = std::next(first), last, value);
    }
    return last;
}
</code></pre>
    </div>