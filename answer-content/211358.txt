<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Never mix information and code</h1>

<p>I have a fundamental problem with your code.</p>

<h2>Existing data</h2>

<p>The calculations for Easter dates looks complex, too complex to trust there are not typos or errors in the code. It would be dangerous to release this service without first testing it over the period you expect this application to provide its service. Hence you should already have a list of Easter holiday dates available to do the test.</p>

<p>Why complicate when you have that data at hand already?</p>

<h2>Changing information should not mean changing code</h2>

<p>As nothing is set in stone and thus it is highly likely that you will need to make changes to things like open and close times, add exceptions to weekends, amend public holiday times. As you have hard coded all possible information that is subject to possible change changes will require a programmer, and a full test cycle. </p>

<p>Changes cost time and money, and if you don't have a good contract, that cost may be yours to bear, or worse that time may come when you have none to spare.</p>

<h2>Deligate responsibility</h2>

<ul>
<li>You are a coder, you write code.</li>
<li>The trader runs a trade, manages opening times and does not write code.</li>
<li>Many people set holidays, they provide services regarding this information</li>
</ul>

<p>I would highly stress that this type of service (calculating trading hours) be up to the client (the trader) and that you (the coder) provide an interface (server based) for the client to make changes as needed.</p>

<p>That you outsource the calculation of holidays to an API (Example. Randomly selected <a href="https://holidayapi.com/" rel="nofollow noreferrer">Holiday API</a> from a google search) </p>

<p>You do not get involved in changing holidays, and trading hours, you provide the means for those that do to provide the information that your code needs to change the background color.</p>

<h2>Rewriting your app</h2>

<p>The rewrite is an example only, untested, and data copied and unverified.
Holidays, trading times and days are as separate data objects that could be delivered as JSON. They are required for the code to load.</p>

<p>To simplify holiday checks, dates are converted to days of the year.</p>

<p>Now your timed function need only do the following.</p>

<pre><code>document.body.classList[tradingInfo.isClosed ? "add" : "remove"]("bg-color--trading-closed");
</code></pre>

<h3>The code</h3>

<pre><code>//=============================================
// Helpers and conversion code
const msInHour = 100 * 60 * 60;    
const msInDay = msInHour * 24;
const tradingTimeZone = 8 * msInHour;
const weekDays = {sun: 0, mon: 1, tue: 2, wed: 3, thu: 4, fri: 5, sat: 6}
const dayOfYearFromDate = date =&gt; (date.valueOf() + tradingTimeZone) / msInDay | 0;
const dayOfYear = (year, month, day) =&gt; dayOfYearFromDate(new Date(year, month, day));
const dayOfYearOfWeekDayNear = (year, weekDayNameShort, month, date) =&gt; {
    const dt = new Date(year, month, date);
    return dayOfYearFromDate(
        dt.setDate(dt.getDate() + (weekDays[weekDayNameShort] - dt.getDay() % 7))
    );
}
const holidaysDayOfYear = (year) =&gt; holidays.map(monthDay =&gt; dayOfYear(year,...monthDay));
const easterHolidays = (year) =&gt; {
    const day = dayOfYear(year, ...easterInfo[year]);
    return [
        ...easterInfo.offsetDays.map(offset =&gt; day + offset),
        ...easterInfo.weekDayNear.map(dayNear =&gt; dayOfYearOfWeekDayNear(year,...dayNear)),
    ];
}

/* Requires holiday info and trading data  before this can be run and used */

// the object that converts data to isClosed 
const tradingInfo = {
    closed {
        hours: weeklyTradingClosed.hours, // 24hr ranges [from, to]
        days: weeklyTradingClosed.daysOfWeek, // index from 0 sun to 6 sat
        holidays : [ // array of days of the year
            ...easterHolidays(new Date().getFullYear()), 
            ...holidaysDayOfYear(new Date().getFullYear())
        ], 
    },
    get isClosed() {
        const date = new Date();
        const hour = date.getHour();
        const dayOfWeek = date.getDay();
        const dayOfYear = dayOfYearFromDate(date);
        return tradingInfo.closed.hour.some(hours =&gt; hour &gt;= hours[0] &amp;&amp;  hour &lt;= hours[1]) ||
            tradingInfo.closed.days.some(day =&gt; day = dayOfWeek) || 
            tradingInfo.closed.holidays.includes(dayOfYear);
    },     
};
</code></pre>

<h3>Information required</h3>

<pre><code>// sources
// https://codereview.stackexchange.com/q/211317/120556
const weeklyTradingClosed = {hours : [[0, 10], [18, 24]], daysOfWeek : [0,6]}
const holidays = [
    [0, 1],     // New Years day
    [0, 5],     // Twelfth Night
    [0, 6],     // Epiphany
    [3, 30],    // Walpurgis Night
    [4, 1],     // International Workers' Day
    [5, 6],     // Swedish National Day
    [11, 24],   // Christmas Eve
    [11, 25],   // Christmas Day
    [11, 26],   // Christmas Eve
    [11, 31],   // New Years Eve
};   
</code></pre>

<h3>Easter info for next 20 years</h3>

<p>You don't need a complicated formula, we know the dates already, use that information.</p>

<pre><code>// sources
// https://codereview.stackexchange.com/q/211317/120556
// https://en.wikipedia.org/wiki/List_of_dates_for_Easter  Using western dates.
const easterInfo = { 
    offsetDays : [-3, -2, 0, 1, 39, 48, 49],   
    weekdayNear : [["fri", 5, 20], ["sat", 5, 20], ["fri", 9, 30], ["sat", 9, 31]],
    "2019": [3, 21],
    "2020": [3, 12],
    "2021": [3, 4],
    "2022": [3, 17],
    "2023": [3, 9],
    "2024": [2, 31],
    "2025": [3, 20],
    "2026": [3, 5,],
    "2027": [2, 28],
    "2028": [3, 16],
    "2029": [3, 1],
    "2030": [3, 21],
    "2031": [3, 13],
    "2032": [2, 28],
    "2033": [3, 17],
    "2034": [3, 9],
    "2035": [2, 25],
    "2036": [3, 13],
    "2037": [3, 5],
    "2038": [3, 2],
    "2039": [3, 1],
};
</code></pre>
    </div>