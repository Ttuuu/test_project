<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks pretty good. I have a few suggestions though:</p>

<ol>
<li>There should be a way to exit (maybe if you don't type anything when it asks which dictionaries?)</li>
<li>You should probably use <code>urllib.parse.urljoin</code> instead of <code>+</code>.</li>
<li><s>You should probably use recursion instead of using <code>while True</code> then always <code>break</code>ing or <code>continue</code>ing.</s></li>
<li>You don't need parentheses when returning tuples.</li>
<li>Bare <code>raise</code> statements are for <em>re</em>raising exceptions. Otherwise, it gives you <code>RuntimeError: No active exception to reraise</code>.</li>
<li>Don't use bare <code>except</code>.</li>
<li>I would probably use a list of tuples instead of using <code>zip</code>.</li>
<li>You could pass around the whole list instead of its length.</li>
<li>You can use <code>enumerate(iterable)</code> instead of <code>zip(range(len(iterable)), iterable)</code>. What <code>enumerate</code> does is create an iterable that when iterated, yields tuples of increasing numbers starting with 0 and the next item from the iterable (in your case a list) you are enumerating. More info <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">at the Python Docs</a>.</li>
<li>You should handle the logic for <code>*</code> in one place.</li>
<li>Contained the logic for handling numerals within the <code>get_user_data</code> function.</li>
<li>You should probably name your main function <code>main</code> instead of <code>__main__</code>.</li>
<li>Don't combine multiline strings and <code>'\n'</code>.</li>
<li>It might be good to have it display the result directly in the console instead of the web browser, but that would be a whole other project.</li>
<li>You should probably return directly instead of using <code>break</code>.</li>
<li>I might have made a few other minor changes.</li>
</ol>

<p>Note that some of the changes are just personal preferences.</p>

<p>The result (also available at <a href="https://repl.it/@solly_ucko/DictionarySearchCodeReview" rel="nofollow noreferrer">https://repl.it/@solly_ucko/DictionarySearchCodeReview</a>):</p>

<pre><code>import webbrowser
from urllib.parse import urljoin

class OnlineDictionary:
    """Represents an online dictionary.

    Attributes:
name: str
url: str
    """
    def __init__(self, name, url, sep):
        """Initializes an OnlineDictionary object.

        name: str
        url: str
        sep: str
        """
        self.name = name
        self.url = url
        self.sep = sep

    def search(self, query):
        """Searches the dictionary for a given query.

        url: str
        query: str
        """
        query = self.sep.join(query.split())
        webbrowser.open(urljoin(self.url, query))


def print_instructions(message, instructions, dictionaries):
    """Prints the available dictionaries, their corresponding
    numerals and the instructions.

    message: str
    instructions: str
    names: list
    num_of_dics: int
    """    
    print(message)

    for numeral, (name, _, _) in enumerate(dictionaries):
        print(numeral, name)

    print()
    print(instructions)     


def get_user_data(dictionaries):
    """Asks the user for which dictionary 
    to use and for what to search for.

    num_of_dics: int

    Returns: tuple
    """

    while True:
        to_use = input('Specify which dictionary or dictionaries to use.\n')

        if to_use == '':
            return (), ''
        elif to_use == '*':
            to_use = dictionaries
        else:
            try:
                to_use = to_use.replace(' ', '').split(',')
                numerals = []

                for num in to_use:
                    num = int(num)

                    if num not in range(len(dictionaries)):
                        raise ValueError

                    numerals.append(num)

                to_use = set(map(dictionaries.__getitem__, numerals)) # set is used to get rid of duplicates
                query = input('Type something to search for.\n')
                return to_use, query
            except ValueError:
                continue


def main():
    dictionaries = [
        ('Merriam-Webster Dictionary', 'https://www.merriam-webster.com/dictionary/', '%20'),
        ('Oxford Dictionary', 'https://en.oxforddictionaries.com/definition/', '_'),
        ('Camberidge Dictionary', 'https://dictionary.cambridge.org/dictionary/english/', '-'),
        ('Collins Dictionary', 'https://www.collinsdictionary.com/dictionary/english/', '-'),
        ('Longman Dictionary of Contemporary English', 'https://www.ldoceonline.com/dictionary/', '-'),
        ('The American Heritage Dictionary of the English Language', 'https://ahdictionary.com/word/search.html?q=', '%20')
    ]

    message = 'These are the available dictionaries:\n'

    instructions = """To use a dictionary type its corresponding numeral.
To use more than one dictionary separate the numerals with ",".
To use all of them type "*". Do not type the quotation marks.
"""

    print_instructions(message, instructions, dictionaries)

    while True:        
        to_use, query = get_user_data(dictionaries)

        if not to_use or not query:
            break

        print()
        chosen_dictionaries = [OnlineDictionary(name, url, sep) for name, url, sep in to_use]

        for dictionary in chosen_dictionaries:
            print('Searching %s for "%s"...' % (dictionary.name, query))
            dictionary.search(query)

        print('Finished searching. Check your Web browser.\n')

if __name__ == '__main__':
    main()
</code></pre>
    </div>