<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some general notes:</p>

<ol>
<li><p>Global variables are usually a bad idea; state that can be accessed from everywhere is hard to read and debug because you have no idea what random function might modify it.  It's extra difficult here because your globals are declared in different places.</p></li>
<li><p>The standard way of handling errors in Python is to raise an exception that can be caught and handled.</p></li>
<li><p>Long sequences of <code>if/elif</code> are usually an indication that your logic can either be simplified or split up.</p></li>
</ol>

<p>Here's how I might suggest writing your <code>start</code> and <code>register</code> functions, using exceptions to handle errors, a lookup table to handle dispatching your different functions, and a single state object that collects all the random global variables:</p>

<pre><code>from typing import NamedTuple

class LoginState(NamedTuple):
    admin: str
    adminpass: str
    user: str
    pass: str        

def start() -&gt; None:
    state = LoginState("Max", "Luo", "", "")
    print("Welcome, please choose what to do")
    menu = {
        'register': register
        'login': username
        'admin': username
    }
    choice = input('register/login ')
    try:
        menu[choice](state)
    except:
        problems()

def register(state: LoginState) -&gt; None:
    state.user = input('Please register your username : ')
    state.pass = input('Please register your password : ')
    menu = {
        "Y": register
        "N": username
    }
    choice = input('Do you want to register another account? Y/N : ')
    menu[choice](state)
</code></pre>

<p>Defining your <code>state</code> as a type means that it's easier to refactor -- for example, suppose you realize that your <code>register</code> logic overwrites the username and what you actually want to do is be able to have more than one!  You could change <code>user</code> and <code>pass</code> into a collection (like a <code>Dict</code>, say), and use <code>mypy</code> to tell you all the places in your program that those attributes are used so you can make the appropriate updates.  If they're defined as globals, it's a lot more difficult to make sure you've updated all the places where they're used.</p>

<p>The <code>menu</code> dict is IMO a little easier to expand (and read) than the big chain of <code>if/elif</code>, by providing a single obvious place where the menu options are defined.</p>

<p>Having <code>problems()</code> be an exception handler means that not only does it catch the case where the user inputs an invalid command (this will cause <code>menu[choice]</code> to raise an <code>IndexError</code>), but it will also catch any unhandled exceptions raised by your other functions, so those functions don't need to call <code>problems()</code> themselves; all they have to do is raise an exception and the control flow will end up right here.  In the case of <code>register()</code> I didn't have to do anything with the error case, because if an exception is raised there I know that it will be caught in <code>start()</code>.</p>

<p>Since the "present menu, make selection" pattern is probably going to be repeated a few times in this program, I might want to make that into a function as well:</p>

<pre><code>def menu_prompt(
    menu: Dict[Text, Callable[[State], None]], 
    prompt: str,
    state: LoginState
) -&gt; None:
    choice = input(prompt)
    menu[choice](state)
</code></pre>

<p>and now this:</p>

<pre><code>    menu = {
        'register': register
        'login': username
        'admin': username
    }
    choice = input('register/login ')
    try:
        menu[choice](state)
    except:
        problems()
</code></pre>

<p>becomes:</p>

<pre><code>try:
    menu_prompt({
        'register': register
        'login': username
        'admin': username
    }, 'register/login ', state)
except:
    problems()
</code></pre>
    </div>