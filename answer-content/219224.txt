<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find your code hard to read, for the following reasons:</p>

<ul>
<li>the variable <code>file</code> is not really a file but a buffer</li>
<li>the variable <code>f</code> (which usually stands for file) is a pointer into that buffer</li>
<li>the variable <code>a</code> has a name which does not convey any meaning at all</li>
<li>if the first <code>if</code> statement you indent the brace in the next line, and in the very last <code>if</code> statement the body is in the same line</li>
<li>there are spaces missing in the code at places where I expect them, such as after an <code>if</code> or <code>for</code></li>
<li>the forever loop is usually written as <code>for (;;)</code>, not <code>for( ; ; )</code></li>
<li>the main block of the code is inside the <code>for</code> loop, and there's not a single empty line in that part. This suggests that the whole block is doing a single thing with no possible interruption or logical break</li>
<li>the comma operator is generally frowned upon</li>
<li><code>is_done</code> is not really about the work being done, it's more about being successful</li>
</ul>

<p>Because of all the above reasons, I would write the code differently:</p>

<pre><code>#include &lt;errno.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
    char buf[1000];
    size_t buflen = 0;
    const size_t granularity = 80;

    while (true) {
        if (granularity &gt; sizeof buf - buflen) {
            errno = ERANGE;
            break;
        }

        size_t nread = fread(buf + buflen, 1, granularity, stdin);
        if (ferror(stdin))
            break;

        buflen += nread;
    }

    for (size_t i = 0; i &lt; buflen; i++)
        printf("%02hhX ", buf[i]);
    fputc('\n', stdout);

    if (ferror(stdin)) {
        perror("stdin");
        return EXIT_FAILURE;
    }
}
</code></pre>

<p>And here is what I changed:</p>

<ul>
<li>I renamed all variables to match their purpose</li>
<li>I replaced the various pointers into the buffer with indexes</li>
<li>I removed the <code>is_done</code> variable since the program should not print an error just because the file is a multiple of 80 bytes</li>
<li>I moved the variable <code>a</code> to a smaller scope by declaring it inside the <code>for</code> loop where it is used; I also renamed it to <code>i</code>, since it is now an index instead of a pointer</li>
<li>I replaced the comma operator with an <code>if</code> statement, since that is the form that is commonly used</li>
<li>I included <code>&lt;stdbool.h&gt;</code> to have a boolean type and the constants <code>true</code> and <code>false</code></li>
<li>I replaced <code>for (;;)</code> with <code>while (true)</code>, which is less magic</li>
<li>I sorted the included headers alphabetically since for headers from the C standard library, the order doesn't matter</li>
<li>I renamed the variable <code>read</code> to <code>nread</code>, to avoid possible conflicts with the POSIX function of the same name</li>
</ul>
    </div>