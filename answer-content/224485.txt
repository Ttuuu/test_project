<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Suggestions</h1>

<p>In addition to the suggestions provided by others, I observations on how to improve your code:</p>

<ol>
<li>Problems like these, where we both have some information that needs to be stored and have a bundle of functions closely related can be effectively made into a class. </li>
<li>The problem is cyclic over the 3 options <code>rock</code>, <code>paper</code>, and <code>scissors</code>, which means we can represent them as numbers and comparisons on between them are constant over modulus 3.</li>
</ol>

<h1>Suggested Implementation</h1>

<p>If we put these principles into practise we get the following form:</p>

<pre><code>import random

class RPS:

    options = {
        'rock':0
        'paper':1
        'scissors':2
    }
    responses = ('DRAW!','PLAYER WINS!','COMPUTER WINS!')
    prompt_string = 'Please enter your choise of {}: '.format(', '.join(options.keys()))

    def __init__(self,prompt=input, out=print):
        self.prompt = prompt
        self.out = out

    def __call__(self):
        self.run()

    def run(self):
        self.single_round()
        while self.want_more():
            self.out('\n')
            self.single_round()
        self.out('\n')
        self.out("Thank you for using my Rock, Paper, Scissors Program")

    def want_more(self):
        self.out("Would you like to try again?")
        return self.prompt("Y/N  ").lower() == "y"

    def single_round(self):
        player = self.prompt_choice()
        computer = random.randint(0,2)
        self.out(self.responses[(player - computer) % 3])

    def prompt_choise(self):
        choise = self.prompt(prompt_string).lower()
        while choise not in options:
            self.out('Your choice is invalid')
            choise = self.prompt(prompt_string).lower()
        return self.options[choise]

if __name__ == "__main__":
    RPS().run()
</code></pre>

<p>Note how easy we can get the proper response by simply refering to it as index, now that we can transform all the results into the same relative region (did the player have the same, go one further in the cycle or one less in the cycle, since the one just further in the cycle beats the previous one).</p>
    </div>