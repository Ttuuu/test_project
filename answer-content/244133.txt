<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One problem I can see with your code is, that you can't catch <code>MissingResource</code> unless you know the specific <code>Resource</code> type used when that exception was thrown.<br>
All you can do in the <code>catch</code> is to capture the generic <code>std::exception</code>, which is also the base for many other kinds of failure, including the stuff that's used from the c++ standard library.</p>
<p>A better way would be to introduce a specific base class for the whole category of <code>MissingResource</code> exceptions. E.g. like this:</p>
<pre><code>class MissingResourceCategory : public std::exception {
protected:
    std::string_view fileName{};
    std::string_view msg{};

    MissingResourceCategory() = default;
};

template &lt;typename Resource&gt;
class MissingResource : public MissingResourceCategory {
    
public:
    MissingResource() = default;
    MissingResource(std::string_view fileName) : fileName{fileName} {
        initMsg&lt;Resource&gt;();
    }

    template &lt;typename T&gt;
    void initMsg() {
        msg = "Failed loading resource: "
              "{ Type: "    + std::string(typeid(Resource).name()) + ", "
              "File name: " + fileName.data()                      + " }";
    }

    virtual const char* what() const noexcept override {
        return msg.data();
    }
};
</code></pre>
<p>This would allow you to distinguish <code>MissingResource</code> exceptions from others in your <code>catch</code> blocks:</p>
<pre><code>ResourceManager::ResourceManager() {
    try {
        loadResources();
    } catch (const MissingResourceCategory&amp; e) {
        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
        std::exit(EXIT_RESOURCE_FAILURE);
    }
    } catch (const std::exception&amp; e) {
        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
        std::exit(EXIT_FAILURE);
    }
}
</code></pre>
    </div>