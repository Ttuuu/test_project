<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design Review</h3>

<p>This pattern of using a comparison dictionary to configure the chain seems like a convoluted work-around for just creating the chain and being able to activate/deactivate certain middleware items in the chain.</p>

<p>Your input could be used as a factory instead.</p>

<pre><code>var middleware = new PropertySetter(); // .. pick a root
middleware = middleware.InsertNext(new Stopwatch());
// and so on ..
return middleware.First();
</code></pre>

<p>You could then implement an <code>IsActive</code> flag. For instance, in your logging middleware (see referenced question):</p>

<blockquote>
<pre><code>public abstract void Invoke(Log request);
</code></pre>
</blockquote>

<p>You could change the pattern to:</p>

<pre><code>protected abstract void InvokeCore(Log request);

public void Invoke(Log request)
{
    if (IsActive)
    {
        InvokeCore(request);
    }

    Next?.Invoke(request);
}
</code></pre>

<p>Also think about what to do when togling the <code>IsActive</code> flag. Some middleware might have local state that needs to be flushed to the next middleware in chain.</p>

<pre><code>protected virtual void ActivateCore(bool active) {}

public bool IsActive
{
    get =&gt; active; // private field
    set 
    {
        if (active != value)
        {
            active = value;
            ActivateCore(value);
        }
    }
}
</code></pre>

<hr>

<h3>Conventions</h3>

<ul>
<li><code>InsertRelative</code> returns <code>default</code> when unable to insert the middleware. I would throw an exception here.</li>
<li>There is a general lack of argument checks against <code>null</code> in your public API.</li>
</ul>
    </div>