<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These problems are always looking to test. It seamed way to straight forward until I realized the clue.</p>
<p>To be fair in JS a there is no such thing as a list which helps understand the problem.</p>
<h2>This is a storage problem</h2>
<p>The Question I think is implying that the array be partitioned in place <em>"partition <strong>the</strong> list"</em>. The aim is to keep storage complexity down. With a side benefit of reduced complexity?</p>
<p>The clue that gives the solution away is the part <em>"Ordering within a part can be arbitrary"</em></p>
<h2>Strategy</h2>
<p>If we think of the problem as separating high and low values (above and below the pivot) you can step the array and swap high values with the current value using an index that moves down.</p>
<p>To deal with the middle values (which you do not know the position of until you know how many there are) you use a consuming index. That is an index made of two parts, the first part is the current index that will hold the current value, the second part is an offset (ahead on the index) that is the location that we get the current value from.</p>
<p>When the consuming index meets the top index we fill the remaining items with the pivot value.</p>
<h2>Solution <span class="math-container">\$O(1)\$</span> storage</h2>
<p>Well that is the gist of it. The solution turned out a little more complicated (it was a hard one) But it maintains a storage complexity of <span class="math-container">\$O(1)\$</span> and a complexity of <span class="math-container">\$O(n)\$</span> (was hoped it could be log(n) but edge cases made it impossible for my mind)</p>
<p>This is not the best possible solution, I am sure there are some shortcuts and unnecessary code in this.</p>
<pre><code>function partition(arr, pivot) {
    var i, temp, top = arr.length - 1, mid = 0, step = true;
    for (i = 0; i &lt;= top - mid; i++) {
        if (mid &amp;&amp; step) { arr[i] = arr[i + mid] } 
        step = true;
        if (arr[i] &gt; pivot) {  
            if (arr[top] === pivot) { 
                arr[top--] = arr[i];
                arr[i] = arr[i + (++mid)];
            } else {  
                temp = arr[i]; 
                arr[i] = arr[top];
                arr[top--] = temp;
                step = false;
            }
            i--;
        } else if(arr[i] === pivot) { 
            mid++;
            i--;
        }
    }
    while (mid--) { arr[i++] = pivot }
    return arr;
}

        
</code></pre>
    </div>