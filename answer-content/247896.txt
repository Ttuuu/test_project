<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>int rand_alphanum_str(WCHAR *buffer, size_t buffer_size) {</p>
</blockquote>
<p><code>buffer_size</code> remains unchanged so it should be a constant.</p>
<pre><code>if(!buffer || buffer_size &lt; 2) { return -1; }
</code></pre>
<p>I'm not sure why the degenerated cases for <code>buffer_size</code> zero and one result in an error. If it is zero then just return <code>0</code> immediately. If it is <code>1</code> continue as normal.</p>
<pre><code>wchar_t str[9]; // 8 chars + NUL
...
int chars = buffer_size / sizeof (WCHAR) - 1; // -1 for null terminator
</code></pre>
<p>Sorry, no. This makes it entirely unclear that 8 random characters need to be generated. A programmer would not expect to have to supply <code>9</code> to generate 8 characters. I'd either explicitly specify that the buffer needs to be 1 character bigger than the argument in the documentation to hold NUL, or I'd use a single, NUL-terminated mutable string as parameter (using different characters before the NUL, obviously).</p>
<pre><code>// need one random byte per character to be generated
</code></pre>
<p>Why? I'd use an <strong>alphabet</strong> string as input (remember, <code>const</code>), and then select characters at random from that alphabet.</p>
<hr>
<p>You can select a single character by simply asking for a random index in the range <code>[0, size)</code> where <code>size</code> is the size of the alphabet. Most libraries have a function for that (where you simply give the <code>size</code>, not the range). Then you select the character at that position. This makes your random string generator <em>much</em> more flexible and - of course - unbiased. I agree with the other answer that there is probably bias.</p>
<p>If you want to have it perform better then you can request one number in the range <code>alphabet_size ^ password_size</code>, and then perform <strong>base conversion</strong> using <code>alphabet_size</code> as base.</p>
    </div>