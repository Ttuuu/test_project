<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PUT vs. POST</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>@PutMapping("/fizzbuzz")
public void createFizzBuzzItem(...)
</code></pre>
</blockquote>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT" rel="nofollow noreferrer"><code>PUT</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST" rel="nofollow noreferrer"><code>POST</code></a> can be used to create new resources.</p>

<p>The difference is that <code>PUT</code> is <a href="https://en.wikipedia.org/wiki/Idempotence" rel="nofollow noreferrer">idempotent</a> which means:</p>

<blockquote>
  <p>calling it once or several times successively has the same effect</p>
</blockquote>

<p>But your fizzbuzz implementation has a time stemp that gets updated:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>FizzBuzzOutput fizzBuzzOutput = new FizzBuzzOutput(input, value, timestamp);
</code></pre>
</blockquote>

<p>This is the reason why <code>createFizzBuzzItem</code> is not idempotent and should be a <code>POST</code> instead of <code>PUT</code>.</p>

<hr>

<h1>The Controller</h1>

<p>The <code>FizzBuzzController</code> looks like it is the heart of the application: </p>

<ul>
<li>it stores data</li>
<li>has some logic</li>
</ul>

<p>A <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="nofollow noreferrer">controller</a> only receives user input, validates it and let the model operate on the incoming data.</p>

<p>You already did a good job in <code>createFizzBuzzItem</code> where the input gets validated by  <code>if (input &lt;= 0)</code> and then the business logic does some work via <code>BusinessLogic.fizzBuzzOf(...)</code>.</p>

<p>But since the controller persist data beside the controlling part (what violates the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>) some business logic is needed inside the controller like:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>FizzBuzzOutput fizzBuzzOutput = new FizzBuzzOutput(input, value, timestamp);
fizzBuzzOutputsRepo.put(input, fizzBuzzOutput);
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>fizzBuzzOutputsRepo.clear();
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>return fizzBuzzOutputsRepo.values();
</code></pre>
</blockquote>

<p>The controller should know nothing about the persistence and <a href="https://stackoverflow.com/a/1015853/8339141">should only ask the model (<code>BusinessLogic</code>) for data</a>, like:</p>

<pre class="lang-java prettyprint-override"><code>@PutMapping("/fizzbuzz")
public void createFizzBuzzItem(@Valid @RequestBody @NonNull FizzBuzzInput fizzBuzzInput) {
  Integer input = Integer.parseInt(fizzBuzzInput.getValue());
  if (input &lt;= 0) {
    return;
  }

  return BusinessLogic.fizzBuzzOf(Integer.parseInt(fizzBuzzInput.getValue());
}
</code></pre>

<pre class="lang-java prettyprint-override"><code>@DeleteMapping("/fizzbuzz")
public void deleteAllFizzBuzzItems() {
    BusinessLogic.deleteAll();
}
</code></pre>

<hr>

<h1>Data Access Object</h1>

<p><a href="https://www.quora.com/How-do-you-apply-chunking-to-learning-programming?share=1" rel="nofollow noreferrer">Human work with abstractions</a> and naming is a good way to abstract by chunking thinks.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public void createFizzBuzzItem(@Valid @RequestBody @NonNull FizzBuzzInput fizzBuzzInput)
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>FizzBuzzOutput fizzBuzzOutput = new FizzBuzzOutput(input, value, timestamp);
</code></pre>
</blockquote>

<p>First what I like is that you think about in- and output. But there is already a known abstraction for in- and output and this is the <a href="https://en.wikipedia.org/wiki/Data_access_object" rel="nofollow noreferrer">Data Access Object (DTO)</a>. The bad with the naming <code>fizzBuzzInput</code> and <code>fizzBuzzOutput</code> is that a reader of your code does not know if this are DTOs and have to verify it by scroll through the code what makes reading code more difficult than only working with abstractions.</p>

<pre class="lang-java prettyprint-override"><code>public void createFizzBuzzItem(@Valid @RequestBody @NonNull CreateDTO dto)
</code></pre>

<hr>

<h1>Naming</h1>

<p>Additional your naming is redundant. When I search for the word <em>fizzbuzz</em> inside the controller I get more than 20 results back.</p>

<p>It's suffices naming the class <code>FizzBuzzController</code> and from there you know by the context of the class that you deal with <em>fizzbuzz</em>:</p>

<pre class="lang-java prettyprint-override"><code>public class FizzBuzzController {

  // ..

  // @...
  public Collection&lt;FizzBuzzOutput&gt; findAll() { /* ... */ }

  // @...
  public void create(@Valid @RequestBody @NonNull CreateDTO dto) {/* ... */ }

  // @...
  public void deleteAll() { /*...*/ }
}
</code></pre>

<hr>

<h1>A Service</h1>

<p>Its common case to append the class that holdes the business logic with <code>Service</code> as a suffix like: <code>FizzBuzzService</code>. A service takes a dto and returns a dto.</p>

<p>For instance inside <code>createFizzBuzzItem</code>:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>String value = BusinessLogic.fizzBuzzOf(Integer.parseInt(fizzBuzzInput.getValue()));
</code></pre>
</blockquote>

<pre class="lang-java prettyprint-override"><code>String value = fizzBuzzService.craeteBy(dto);
</code></pre>

<hr>

<h1>Duplication</h1>

<p>Code duplication can lead to code that is <a href="https://stackoverflow.com/a/4226299/8339141">hard to maintain</a>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Integer.parseInt(fizzBuzzInput.getValue())
</code></pre>
</blockquote>

<p>This line of code is two times inside <code>createFizzBuzzItem</code>.</p>

<p>Additional I do not understand why you have to parse it. Can't <code>FizzBuzzInput</code> holdes a integer instead of a string value like:</p>

<pre class="lang-java prettyprint-override"><code>class FizzBuzzIput {
    final int value;
}
</code></pre>

<hr>

<h1>Unused Code</h1>

<p>The <code>log</code> gets never used and could be deleted if you do not want to log something.</p>

<hr>

<h1>Example</h1>

<p>A refactoring could look like</p>

<pre class="lang-java prettyprint-override"><code>@RequestMapping("/api/fizzbuzz")
@RestController
public class FizzBuzzController {

  private final FizzBuzzService service = new FizzBuzzService();

  @GetMapping
  public Collection&lt;SavedDTO&gt; findAll() {
    return service.findAll();
  }

  @PostMapping
  public ... createFizzBuzzItem(@Valid @RequestBody @NonNull CreateDTO dto) {
    if (dto.value &lt;= 0) {
      // HTTP Bad Request (400)
      // accepts only values that are greater 0
    }

    return service.createBy(dto);
  }

  @DeleteMapping
  public ... deleteAll() {
    service.deleteAll();
  }
}
</code></pre>
    </div>