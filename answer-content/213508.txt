<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Given that the result can be computed as simply as this:</p>

<pre><code>#include &lt;array&gt;

template &lt;std::size_t MN&gt;
constexpr int maximum_sum(std::array&lt;int, MN&gt; array, int M, int N, int current_row, int skip) {
    int max = 0;
    for (int x = 0; x &lt; N; ++x) {
        if (x == skip) continue;
        int value = array[current_row * N + x];
        max = std::max(max, current_row + 1 == M ? value : value + maximum_sum(array, M, N, current_row + 1, x));
    }
    return max;
}
</code></pre>

<p>I find your code really complicated.</p>

<p>The wrapper looks like a half-measure to me. If you only want a convenient way to handle an array as a 2-dimensional matrix for the task at hand, I'd say that inheritance is more powerful and concise:</p>

<pre><code>template &lt;std::size_t M, std::size_t N&gt;
struct Array_2d : public std::array&lt;int, M * N&gt; {
    constexpr int at(std::size_t m, std::size_t n) const { return (*this)[m * N + n]; }
}
</code></pre>

<p>Dimensions can then be deduced in the function call: </p>

<pre><code>template &lt;std::size_t M, std::size_t N&gt;
constexpr int maximum_sum(Array_2d&lt;M, N&gt; array, std::size_t current_row = 0, std::size_t skip = N) {
    // same as before
}
</code></pre>

<p>And if you want a solid, re-usable, <code>constepxr</code> matrix class then write it, but that goes far beyond the functionalities of your wrapper.</p>

<p>Burying types isn't a good thing either: your <code>Problem</code> is fundamentally an <code>array</code>, but there are two "indirection" levels before you can ascertain it: an alias, and a composition. Idem for <code>TopElements</code>, which is a simple <code>pair</code> the reader needs some work to recognize under an other alias and a custom class. One good way to look at your program is to understand that you are creating a language: do not create new words when you can use the ones everyone knows.</p>

<p>Your algorithm probably works, but it isn't clearly described (what is a "matrix, in terms of a taken path"?), and relies on a long chain of function calls which doesn't make it any easier to understand. Moving away from the simplest algorithm isn't justified unless you can prove it's faster (and that speed matters); but you don't study your algorithm complexity.</p>
    </div>