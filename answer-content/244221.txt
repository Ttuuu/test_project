<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First let me point out a few details.</p>
<p>Use <code>const</code> intead of <code>let</code> unless you are going to modify the value after initialization. You use it for the <code>ofNumber</code> variable, but there are more that deserve it.</p>
<p>But actually there's often no need to define a variable at all if it is used only once. Similarily, storing a return value to a variable and immediately returning that variable is redundant, just return the value returned by the function directly.</p>
<pre><code>function operation(max) {
    return Math.floor(max / 10);
}
</code></pre>
<p>But you could also stay consistent with the <code>ofNumber</code> callback like this:</p>
<pre><code>const operation = (max) =&gt; Math.floor(max / 10);
</code></pre>
<p>Another thing is that we usualy use <code>for</code> loop in theese cases.</p>
<pre><code>for (let ops = x; ops &gt; 0; --ops) {...}
</code></pre>
<p>Now, let's analyse the big-O time complexity of your algorithm.
Adding a comment above each statement in your code. <code>n=nums.length</code>.</p>
<pre><code>function minSum(nums, x) {
    // O(1)
    if (nums.length === 0) {
        return false;
    }
    function operation(max) {
        // O(1)
        let redcuedMax = Math.floor(max / 10);
        return redcuedMax
    }
    let ops = x;
    // O(x * inner)
    while (ops &gt; 0) {
        // O(n)
        let max = Math.max(...nums);
        // O(1)
        const ofNumber = (element) =&gt; element &gt;= max ;
        // O(n)
        let maxIndex = nums.findIndex(ofNumber)
        // O(1)
        let operated = operation(max);
        // O(1)
        nums[maxIndex] = operated;
        // O(1)
        ops--
    }
    // O(n)
    return nums.reduce((prev,next) =&gt; prev + next, 0)
}
</code></pre>
<p>That makes for <code>O(x * n)</code> in time. <code>O(1)</code> in space of course, because you are never making any copies of the array.</p>
<p>How can we optimize this?</p>
<p>Well first thing i see is that there are 2 <code>O(n)</code> operations in the loop body.
Maybe we can find the maximum's element index in <code>O(n)</code>.And if we do, we can access the maximum element in <code>O(1)</code>. This optimization will be less efective if the input is sorted or almost sorted in descendant order, because the second <code>O(n)</code> operation is basically <code>O(1)</code> for such sorted input.</p>
<p>Another thing is that after the loop, there is another <code>O(n)</code> operation. Maybe we can keep track of the sum (updating it in <code>O(1)</code> time) ever since the first time we needed to scan the entire array. Although, this optimization is <code>x</code> times less significant, for small <code>x</code> it may help.</p>
<p>Of course, the most significant improvement can only arise from changing the entire algorithm's big-O complexity from <code>O(x * n)</code> to something with slower rate of change. Even if it costs us increased memory complexity to say <code>O(n)</code>.</p>
<p>To do that we have to leave the code for now and let's think about the problem itself.</p>
<p>You wrote:</p>
<blockquote>
<p>As a result, you have to perform the operation on the elements with the highest values first.</p>
</blockquote>
<p>Good. But is there more? How many of the highest elements will you actually need?</p>
<p>At most <code>x</code>, right? Either the highest element divided by 10 remains the highest element, in which case you continue with that one, or the next highest element will become the current highest. So maybe we dont want to track just 1 highest element, but <code>x</code> of them. This may raise our memory complexity to <code>O(min(x,n))</code>, but that would be still a good tradeoff.</p>
<p>Well, and I think I will break off at this point. I don't wanna write it for you. I hope I gave you enough hints to come up with a faster solution on your own. Just one more thing to say, don't be afraid to use your own specialized loops in such optimizations even if it means your code will grow. It's always trade-offs. Time, space, readability/code size, ... you improve one, you loose on the other... well sometimes not if you got it very wrong on the first shot :D (not saying this is the case:)).</p>
<p>EDIT: I found this article (<a href="https://www.google.com/amp/s/www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/amp/" rel="nofollow noreferrer">https://www.google.com/amp/s/www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/amp/</a>) which shows several ways to find the x largest elements of an array, some of them seem to be faster then actually sorting the entire array in <code>O(n * log(n))</code>.</p>
    </div>