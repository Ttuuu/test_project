<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> for fast lookups</h1>

<p>The main performance cost is the search for songs</p>

<p>The best way to get better lookup performance is to use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> to store the songs. Maps use a hash to lookup items and is very fast once the Map has been created.</p>

<p>You can create a map as follows, it adds an array for the playlist.</p>

<pre><code>const songMap = new Map(songList.map(name =&gt; [name,{name,playLists:[]]));
</code></pre>

<p>Then you iterate the playlist and the songs it contains, adding the playlist to each song</p>

<pre><code>for (const [playListName, songs] of Object.entries(playlists)) {
    for (const songName of songs) {
        const songItem = songMap.get(songName); 
        if (songItem) {
             songItem.playLists.push(playListName);
        }
    }
}
</code></pre>

<p>You can then iterate the <code>songMap</code> and create the final object containing <code>songNames</code> with arrays of playlists</p>

<pre><code> const songPlaylists = {};     
 for(const song of songMap.values()) {
       songPlaylists[song.name] = song.playLists;
 }
</code></pre>

<p>Then convert to JSON if you need.</p>

<h2>Why the processed store?</h2>

<p>However I would argue that the whole process is pointless unless you are extracting some higher level information from this process.</p>

<p>Ideally you would store the <code>songs</code> in a <code>Map</code> and each <code>playlist</code> also stored in a <code>Map</code> and would contain a <code>Map</code> of songs. Thus you can lookup playlists a song is in as follows</p>

<pre><code>  function findSongPlaylists(songName) {
      const playlists = [];
      for (const playlist of playlistMap.values()) {
          if (playlist.songs.has(songName)) { playLists.push(playList.name) }
      }
      return playlists;
  }
</code></pre>

<p>To further improve the store, you would assign a unique id (a number) to each song and playlist and use the and do all the searches using ids. This will give even better performance and save a huge amount of RAM.</p>

<p>For casual viewing it is the ideal.</p>

<p>BTW the link you provided showing how you extracted the song data has a very long way of getting the data. All that data is store in the page indexed DB and can be extracted and saved to disk with a few lines of JS. (no need to scroll the page). Use Dev tools &gt; application tab and open indexedDB to find the data.</p>

<h2>Update Extra</h2>

<p>Looking through the link you posted <a href="https://webapps.stackexchange.com/a/125423/140514">Copy Google Play Music songs</a> all the solutions required rather hacky method (due to song list being a view) of slowly scrolling over the data to acquire it. The question is locked thus I am unable to add a better answer. As this question is related I will add a better way of sourcing the data here.</p>

<p>Paste the following snippet into the Dev-Tools console and hit enter. It will extract all the songs and save them to your download directory as a JSON file (named music_[your id].tracks.json)</p>

<p>The json file contains (<code>data</code> refers to the parsed json file)</p>

<ul>
<li><code>data.fields</code> an array of field names in the same order as in the array</li>
<li><code>data.tracks</code> an array of records (one per song) containing fields in the same order as in  <code>data.fields</code>.</li>
</ul>

<p>Note I do not use Google Music (Used a friends account so had limited time) and hence I guessed the content. You can add extra fields if you find the array index. To get a single record go to dev-tools &gt; application (tab) &gt; indexedDB &gt; music_[your id] and select a record.</p>

<p>Example record extracted from <code>music_####.tracks</code> For security ids have been masked with <code>#</code> or <code>A...</code></p>

<pre><code>"########-####-####-####-############":["########-####-####-####-############","Sheep","https://lh4.ggpht.com/AAAAAAA-AAAAAAAAAAAAAA_AAAAAA...","Pink Floyd","Animals","Pink Floyd","sheep","pink floyd","animals","pink floyd","Roger Waters","Rock",null,620059,4,0,0,0,1977,0,null,null,0,0,1372528857298236,1408583771004924,null,"AAAAAA...","AAAAAAAA...",2,"",null,"AAAAAAA...","AAAAAAAA...",128,1372582779985000,"https://lh3.googleusercontent.com/AAAAAA_AAAA...",null,null,[],null,null,null,null,null,null,null,null,null,null,"AAAAAA...",[],null,null,null,null,0,null,null,[["https://lh3.googleusercontent.com/AAAAA...",0,2],["https://lh3.googleusercontent.com/AAAAA...",0,1]],true,6,null,1],
</code></pre>

<p>To keep the file size down the data is in an array. Nulls have been converted to 0.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>(function () {
    console.log("From https://codereview.stackexchange.com/a/213683/120556"); // DO NOT REMOVE THIS LINE if you publish this snippet.
    console.log("Just a moment locating music DB...");
    const data = {
        dbName:"",
        info: "From Google Play Music App IndexedDB.\nField names in order of song array index.\nTo keep JSON size down null has been replaced with 0.\nDates ar in micro seconds 1/1,000,000 sec (I don't know what date1, date2, date3 represent)\nImages may require additional query properties.\nSource https://codereview.stackexchange.com/a/213683/120556",
        fields: "GUID,song,image1,band,album,albumArt,composer,genre,length,track,tracks,disk,disks,year,plays,date1,date2,bitrate,date3,image2".split(","),
        tracks: [],
    };
    const idxs = [0,1,2,3,4,5,10,11,13,14,15,16,17,18,22,24,25,34,35,36]; // idx of info to extract. There are many more field, 
    indexedDB.databases().then(info =&gt; {
        const name = data.dbName = info.find(db =&gt; db.name.indexOf("music_") === 0).name;
        indexedDB.open(name).onsuccess = e =&gt; {
            console.log("Extracting tracks fro DB " + name);
            const t = e.target.result.transaction("tracks", IDBTransaction.READ_ONLY); 
            t.oncomplete = () =&gt; {
                Object.assign(document.createElement("a"), { download : name + ".tracks.json", href: URL.createObjectURL(new Blob([JSON.stringify(data)]), {type: "text/json" })})
                    .dispatchEvent(new MouseEvent("click", {view: window, bubbles: true, cancelable: true}));
            }
            t.objectStore("tracks").openCursor().onsuccess = e =&gt; {
                if (e = e.target.result) { 
                    Object.values(JSON.parse(e.value)).forEach(t =&gt; data.tracks.push(idxs.map(i=&gt;t[i]===null?0:t[i])));
                    e.continue();
                }
            }
        }
    }).catch(()=&gt;console.log("Sorry can not complete data dump :("));
})()</code></pre>
</div>
</div>


<p>To extract a record from the JSON </p>

<pre><code>// data is the parsed JSON file
const songName = "A song name";
const songFieldIdx = data.fields.indexOf("song");
const track = data.tracks.find(rec =&gt; rec[songFieldIdx] === songName);
</code></pre>

<p>To convert track array record to track object</p>

<pre><code>const trackObj = {}
for(const field of data.fields) { trackObj[field] = track.shift() }
</code></pre>
    </div>