<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Missing headers:</p>

<pre><code>#include &lt;cassert&gt;
#include &lt;functional&gt;      // for std::less
#include &lt;unordered_map&gt;
#include &lt;vector&gt;
</code></pre>

<hr>

<p>The <code>self_reporting</code> type doesn't need two constructors.  If we accept by value, we <a href="//stackoverflow.com/a/51706522">get most of the benefits</a> with less code to maintain (the only benefit to overloading is if we have to deal with types with expensive <strong>move</strong>, which is far from normal).</p>

<pre><code>self_reporting(value_type v, self_reporting** pp)
    : value(std::move(v)), registry(pp)
{
    report();
}
</code></pre>

<hr>

<p>You could simplify the use of <code>self_reporting</code> by implementing <code>*</code> and <code>-&gt;</code> to give it pointer/wrapper-like syntax, instead of (or as well as) the <code>get()</code> method.</p>

<pre><code>const value_type&amp; operator*() const noexcept
{
    return value;
}

value_type&amp; operator*() noexcept
{
    return value;
}

const value_type* operator-&gt;() const noexcept
{
    return &amp;value;
}

value_type* operator-&gt;() noexcept
{
    return &amp;value;
}
</code></pre>



<pre><code>struct priority_comparator
{
    const priority_compare cmp_;
    bool operator()(const queue_element_type &amp; lhs,
                    const queue_element_type &amp; rhs) const
    {
        return cmp_(lhs-&gt;priority, rhs-&gt;priority);
    }
</code></pre>

<hr>

<p>The 1-argument constructor of <code>updatable_priority_queue</code> probably ought to be declared <code>explicit</code>.</p>

<hr>

<p>Since the only use for <code>cmp_</code> is to create a <code>priority_comparator</code> many times, why not simply create and store that comparator at construction time?  Like this:</p>

<pre><code>private:
    /* there's no benefit being a public type */
    struct priority_comparator
    {
        const priority_compare cmp_;
        bool operator()(const queue_element_type &amp; lhs,
                        const queue_element_type &amp; rhs) const
        {
            return cmp_(lhs.get().priority, rhs.get().priority);
        }
    };

    const priority_comparator cmp_;

public:
    explicit updatable_priority_queue(priority_compare cmp = {})
        : cmp_{std::move(cmp)}
    {}
</code></pre>

<p>Note that this shouldn't change the run-time size of any instances.</p>

<p>Then the usage-sites all become simpler. For example:</p>

<pre><code>    assert(std::is_heap(queue_.begin(), queue_.end(), cmp_));
</code></pre>

<p>(Hmm, in passing, we could encapsulate that into a function - <code>assert(invariant())</code> is easier to read, safer to modify and clearer in intent.)</p>

<p>Oh, there's one use of the inner <code>cmp_</code>, but that's easily accessed:</p>

<pre><code>    if (cmp_.cmp_(p-&gt;priority, new_priority))
</code></pre>

<p>(Or you could overload <code>priority_comparator::operator()</code> to compare <code>P</code> objects as well).</p>

<hr>

<p>Some nice things I liked:</p>

<ul>
<li>I'm pleased to see you <code>using std::swap;</code> so that argument-dependent lookup works correctly in your template methods.</li>
<li>You've provided example of use, to make changes easier to test.</li>
<li>Asserting the invariant at start and end of the non-const methods could be useful for testing and bug-tracing.</li>
</ul>
    </div>