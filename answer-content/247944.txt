<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>(Self-answer, and not comprehensive by any measure)</em></p>
<p>After some consideration and more experimenting, I can offer one insight to this approach. It does not relate to shader code in any way but rather the structural approach.</p>
<h3>The shader is too "fat" and deals with too many textures/does too many things.</h3>
<p>Since every tile is rendered by a prefab, managed by a hand-written grid manager (remember, we're not using Unity's <code>Tilemap</code> here), we can make it more complex than a single quad with a single material and shader.</p>
<p>Solution: <strong>"9-slice" the tile into 9 areas</strong></p>
<p>It's a solution inspired by the idea of <a href="https://docs.unity3d.com/Manual/9SliceSprites.html" rel="nofollow noreferrer">9-splicing sprites</a> to reuse them more effectively and avoiding texture scaling issues.</p>
<p><a href="https://i.stack.imgur.com/MPm5P.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/MPm5P.png" alt="9-spliced tile"></a></p>
<p>The tile in question (highlighted in yellow) is split into 9 areas (each of them is a separate quad with its own material-shader):</p>
<ul>
<li>Central, deals with only one texture, trivial shader.</li>
<li>4 Edge areas, deal with only two textures, very simple <code>lerp</code>-ing shader, easily reusable by clever rotations.</li>
<li>4 Corner areas, deals with only 3-4 textures (depending on whether you blend diagonally as well), somewhat more complex texture matth, again, reusable with clever rotations.</li>
</ul>
<p>A significant improvement over a single shader, with massive bloated logic and dealing with 5 or 9 textures.</p>
<p>A snippet from the edge shader:</p>
<pre><code>        void surf(Input IN, inout SurfaceOutput o)
        {
            float3 pos = IN.worldPos - _RefZeroZero;
            
            fixed4 main = tex2D(_MainTex, pos);
            fixed4 blend = tex2D(_BlendTex, pos);

            float blendPower = 0.0;

            // How far from the center are we?
            float magnitude = dot(pos - float4(0.5, 0.5, 0, 0), _BlendDirection);

            // Are we into the margin?
            if (magnitude &gt; 0.5 - _BlendMargin)
            {
                // Linearly scale from 0 at the margin's start to 0.5 at tile's edge
                blendPower = (magnitude - (0.5 - _BlendMargin)) / _BlendMargin / 2.0;
            }
            
            o.Albedo = lerp(main, blend, blendPower);
        }
</code></pre>
<p>Additional parameters included:</p>
<ul>
<li><code>_RefZeroZero</code> - The world position of the (0, 0) of the tile (bottom left corner) for easier texture calculations.</li>
<li><code>_BlendDirection</code> - Unit vector pointing from the center of this tile towards the one we're blending with. Simplifies math a lot thanks to dot product (this is how I reuse the shader for all 4 edge areas - by just varying this vector).</li>
</ul>
<p>Sneak peek into the final result:</p>
<p><a href="https://i.stack.imgur.com/02cqm.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/02cqm.png" alt="Final result"></a></p>
<p>And with very wide margins (0.25 of tile) for comparison (although I'd never go this high in an actual game):</p>
<p><a href="https://i.stack.imgur.com/GcaGC.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/GcaGC.png" alt="Wide margins"></a></p>
    </div>