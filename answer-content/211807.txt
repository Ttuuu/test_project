<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is reasonable looking code, and didn't produce any warnings on GCC with <code>-Wall -Wextra</code> and a few more that I normally use.</p>

<p>You might want to extend the range of the integers you use - I recommend <code>unsigned</code> or <code>unsigned long</code> instead of (signed) <code>int</code>, since Pascal's triangle will never contain negative entries.</p>

<p><code>SetRow()</code> can accept the old row as a <em>constant</em> reference, as it writes only to the new row;</p>

<p>We don't actually need three vectors, if we use <code>std::swap()</code> to efficiently exchange the contents of <code>curr_row</code> and <code>prev_row()</code>.  That also means that we don't need to branch for even/odd rows.  Without that branch, <code>SetRow()</code> is used only once, and might as well be inlined.</p>

<p>We know the size both vectors will reach, so it makes sense to reserve sufficient capacity before creating any of their elements.</p>

<p>There's no need for an explicit <code>return 0;</code> from <code>main()</code> - some will recommend you write that only if there are other (error) returns possible.  Which there should be, given that the input operator <code>&gt;&gt;</code> can fail.</p>

<p>Unless there's a real need to produce immediate output, use plain <code>\n</code> rather than <code>std::endl</code>.</p>

<hr>

<h2>Modified code</h2>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;

int main()
{
    std::cout &lt;&lt; "What row of Pascal's triangle do you want to go up to?"
              &lt;&lt; std::endl;

    unsigned int n_num;
    std::cin &gt;&gt; n_num;
    if (!std::cin) {
        std::cerr &lt;&lt; "Not a valid number!" &lt;&lt; std::endl;
        return 1;
    }
    std::cout &lt;&lt; '\n';

    std::vector&lt;unsigned int&gt; curr_row;
    std::vector&lt;unsigned int&gt; prev_row;
    prev_row.reserve(n_num);
    curr_row.reserve(n_num);

    while (curr_row.size() &lt; n_num) {
        std::swap(prev_row, curr_row);
        curr_row.resize(prev_row.size()+1);
        // generate the new values
        curr_row[0] = 1;
        for (std::size_t i = 0;  i+1 &lt; prev_row.size();  ++i) {
            curr_row[i+1] = prev_row[i] + prev_row[i+1];
        }
        curr_row[prev_row.size()] = 1;
        // print the row
        for (auto k: curr_row) {
            std::cout &lt;&lt; k &lt;&lt; ' ';
        }
        std::cout &lt;&lt; '\n';
    }
}
</code></pre>
    </div>