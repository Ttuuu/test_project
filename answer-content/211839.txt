<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suggest using a simpler approach here: just keep track of which planes are where, as you go chronologically through time. This way, you only go through the data once, and you don't have to create <code>dfTemp</code>.</p>

<pre><code>def findEvents(df):

    # An event: a list of indices of the df rows representing planes involved 
    # in the event.

    # Planes present on the strips. 
    strips = {
        1: [],
        2: []
    }

    single_events = {
        1: [],
        2: []
    }
    multi_events = []

    for row in df.sort_values(by=['ARRIVAL']).itertuples():

        # Check for departed planes first
        for planes in strips.values():
             remove_departed_planes(row.ARRIVAL, planes)

        strips[row.STRIP].append(row)

        # Single Event: 
        # Build a list of events where there are more than one plane present on 
        # a single strip at a time. Do not include subsets of events.
        for strip_name in (1, 2):
            if len(strips[strip_name]) &gt; 1:
                indexes = frozenset(int(row.Index) for row in strips[strip_name])
                add_event(single_events[strip_name], indexes)

        # Multi Event
        # Build a list of events where there is at least one plane on each strip 
        # at a time. Do not count subsets of an event. 
        # Do not count events that fully occur on a single strip. (???) 
        if strips[1] and strips[2]:
            indexes = frozenset(int(row.Index) for row in strips[1]) | \
                      frozenset(int(row.Index) for row in strips[2])
            add_event(multi_events, indexes)

    # Sort the sets, for consistent output 
    return (
        {
            1: [sorted(event) for event in single_events[1] ],
            2: [sorted(event) for event in single_events[2] ],
        },
        [sorted(event) for event in multi_events]
    )

def remove_departed_planes(time, planes):
    i = 0
    while i &lt; len(planes):
        if planes[i].DEPARTURE &lt; time:
            del planes[i]
        else:
            i += 1

def add_event(events, event):
    """ Adds an event (list of indexes) to the events list.

        If the event is a subset of the previous or vice versa,
        the biggest set is kept.
    """
    if events and events[-1] &lt; event:
        # Replace
        events[-1] = event
    elif events and events[-1] &gt;= event:
        # Previous event already covers this event
        pass
    else:
        # Neither is a subset of each other
        events.append(event)


print "findSingleEvents and findMultiEvents"
t1 = time.time()
print findSingleEvents(df[df.STRIP==1])
print findSingleEvents(df[df.STRIP==2])
print findMultiEvents(df)
t2 = time.time()
print t2 - t1

print

print "findEvents"
t1 = time.time()
single, multiple = findEvents(df)
print single[1]
print single[2]
print multiple
t2 = time.time()
print t2 - t1
</code></pre>

<p>Output:</p>



<pre class="lang-none prettyprint-override"><code>findSingleEvents and findMultiEvents
[[1, 3]]
[[4, 5], [4, 6]]
[[1, 3, 4, 5], [1, 4, 6], [1, 2, 3]]
0.0490000247955

findEvents
[[1, 3]]
[[4, 5], [4, 6]]
[[1, 2, 3], [1, 3, 4, 5], [1, 4, 6]]
0.00300002098083
</code></pre>

<p>In my opinion, this is also easier to read, test and debug than the more pandas-oriented approach.</p>

<p>You can make this even faster by accessing <code>row.Index</code> and <code>row.Arrival</code> as <code>row[0]</code> and <code>row[2]</code>: tuple-like access is faster than dictionary-like access, but less readable.</p>

<p>If I understand you correctly I have "Do not count events that fully occur on a single strip." covered. If not, you will have to adjust the code for this yourself. Good luck!</p>
    </div>