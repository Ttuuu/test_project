<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>You wanted something fast?</h1>

<p>This doesn't look fast:</p>

<pre><code># Get input
sausage_count = Console.input.safe_int("Sausages Count: ")
bread_count = Console.input.safe_int("Bread Count: ")
</code></pre>

<p>What if the person only bought bread? Now you are forced to enter <code>0</code> for <code>Sausages Count</code>, and only then will you be able to enter the bread count.</p>

<p><strong>That doesn't sound fast to me.</strong></p>

<p>I would suggest you opt for a kind of parser-reader method. For example, you can say that <code>S</code> is for <code>Sausage</code> and <code>B</code> is for bread - all case insensitive of course. Then you can simply enter:</p>

<pre><code>10S4b
</code></pre>

<p>OR</p>

<pre><code>4b10s
</code></pre>

<p>This should translate to <code>10 sausages</code> and <code>4 bread</code>.</p>

<p>You can also enter <code>10s</code> or <code>4b</code>.</p>

<p>With this syntax, you are no longer forced to enter both items if the person did not buy both. It is also less typing because you only have to press <kbd>ENTER</kbd> once.</p>

<p>To make this work, you may want to use the <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">regex</a> library, and regex like this:</p>

<pre><code>import re

regex = re.compile(r'(\d+[sS])|(\d+[bB])')

def get_input():
    s = input()
    sausage, bread = [], []
    for match in regex.finditer(s):
        if match.group(1) is not None:
            sausages.append(match.group(1)[:-1])
        if match.group(2) is not None:
            bread.append(match.group(2)[:-1])

    return sum(map(int, sausage)), sum(map(int, bread))
</code></pre>

<p>Granted I haven't tested this, but the expected result is that you will get back a tuple where the first value is the number of sausages and the second is the number of bread.</p>

<p>Test it, try it, improve it if you must.</p>

<p><sub>I was initially going to suggest writing the letter first and then the number, but it occurred to me that your phone's auto-correct might kick in and try to correct the spelling of whatever word it thought you are trying to spell.</sub></p>

<hr>

<h1>@staticmethod</h1>

<p>Your classes seem to not have any state being stored in them, so you should make it known that they are simply static methods in your class.</p>

<p>You can do so by annotating the methods with the <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="noreferrer"><code>@staticmethod</code></a> decorator</p>

<hr>

<h1>Something cannot be <strong>equal</strong> to nothing, because that will make nothing, something.</h1>

<p>If you didn't parse that correctly, I am referring to this:</p>

<pre><code>if given == None:
   ...
</code></pre>

<p>It is usually frowned upon to check if a variable has a value by comparing it to <code>None</code>. <a href="https://docs.quantifiedcode.com/python-anti-patterns/readability/comparison_to_none.html#comparing-things-to-none-the-wrong-way" rel="noreferrer">Some even consider it an anti-pattern</a>.</p>

<p>The recommended way of doing it is by using the <code>is</code> operator, so:</p>

<pre><code>if given is None:
    ...
</code></pre>

<p>It's all semantics, but if you don't get it, no worries, it's not the end of the world, I will just have to remind you again next time I see it :).</p>

<hr>

<h1>Builtins</h1>

<p>This method you have here:</p>

<pre><code>def str_normalize_lenght(string, longest):
  if len(string) &lt; longest:
    missing_chars = longest - len(string)
    return string + " " * abs(missing_chars)
  else:
    return string
</code></pre>

<p>...is already built into the string class. It is called <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="noreferrer"><code>rjust</code></a>. So replace all uses of your <em>over-engineered</em> function with <code>str.rjust(longest)</code>, or change the function to use <code>rjust</code>.</p>

<hr>

<h1>Faster, faster everywhere...</h1>

<p>This code for calculating change is not as fast as it could get</p>

<pre><code>def calc_money_sizes(money):
    result = collections.OrderedDict()
    if money &lt; 0:
      return result
    for size in reversed(Money.SIZES):
      while True:
        outcome = money - size
        if outcome &gt; -0.001:
          if size in result:
            result[size] += 1
          else:
            result[size] = 1
          money = outcome
        else:
          break
    return result
</code></pre>

<p>You will not even notice the difference, but you did say you wanted this code to be fast, so here is my improvement to achieve that sweet spot of fast and readable:</p>

<pre><code>def calc_money_sizes(money):
    result = collections.OrderedDict()
    for size in reversed(Money.SIZES):
      outcome = money / size
      if int(outcome) &gt; 0:
        result[size] = int(outcome)
        money %= size
    return result
</code></pre>

<hr>

<h1>General comments:</h1>

<ul>
<li><p>Avoid naming your variables and functions with the same name as some builtin methods or modules. Example, <code>float</code>, <code>string</code>, <code>input</code>.</p></li>
<li><p>Your use of classes is interesting. You use them like one would use namespaces in C++ or C#, but I don't think most python users will agree with it. I don't mind it, but I think you may want to look into <a href="https://docs.python.org/3/tutorial/modules.html" rel="noreferrer"><code>modules</code></a> and see if that's the kind of structure you were going for.</p></li>
</ul>
    </div>