<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions to improve your code:</p>

<hr>

<h2>Formatting</h2>

<ul>
<li>You should use empty lines consistently. E.g. you have some ifs/else ifs blocks where you put an empty line at the beginning but not everywhere. I suggest you to not use empty lines there at all.</li>
<li>You should not use more than two empty lines to seperate things. It's harder to read.</li>
<li>You should put empty lines between logically grouped things. E.g. your <code>#include</code> statements, the <code>using</code> statement and the <code>wrapUp</code> function are glued together.</li>
<li>In general try to group things visually that belong together. In the <code>wrapUp</code> function the two empty lines are seperating the ending curly bracket from the function for no reason.</li>
<li>You should not put a newline as first thing you print in a line, e.g. <code>cout &lt;&lt; '\n' &lt;&lt; "Number of Lives: " &lt;&lt; livesTracker &lt;&lt; endl;</code>. And you should not mixup <code>'\n'</code> and <code>endl</code>.</li>
</ul>

<hr>

<h2>Naming</h2>

<ul>
<li>You should name variables more precisely. <code>player</code> should be named <code>playerGuess</code>. This will make it much clearer what the variable is for. You may ask why this is relevant because you know it already but be aware of other developers. Just by putting that <em>Guess</em> at the end will remove the amount of time someone has to put in finding out stuff. Some other variables could use better naming as well, like <code>roundh</code> or <code>livesTracker</code>.</li>
<li>I think <code>wrapUp</code> does not describe well enough what it's doing. (That one is kinda personal taste.)</li>
</ul>

<hr>

<h2>Functional</h2>

<ul>
<li>It's strange to put the game logic in a for loop and decrement the iterator to continue with the game. I know, I know, it works, but this is not the usual way to use a for loop. A while loop does fit here much better. When you connect the while loop to the amount of lifes left, you will have a much more readable code, e.g. <code>while (amountOfLifes &gt; 0) {// continue with the game}</code>.</li>
<li>The game logic for the normal game and the <em>hard mode</em> is very similar. You can put it in a method and use parameters, e.g. to individualize the range for the random number to guess.</li>
</ul>

<hr>

<p>Here is an <em>example</em> of how the program could look like when you apply my suggestions. It doesn't need to be exactly like that. Please note that I didn't double check everything and I changed some of the logic but I hope you get an overall idea about what is improvable:</p>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
#include &lt;string&gt;

using namespace std;


void printSeperator() {
    cout &lt;&lt; "-------------------------------------------------" &lt;&lt; endl;
}


bool guess(int&amp; lifesCounter, int numberToGuess, int round, int upperRandomLimit) {
    cout &lt;&lt; "Guess the number that will come up on the screen from 1 to " &lt;&lt; upperRandomLimit &lt;&lt; ": ";
    int playerGuess;
    cin &gt;&gt; playerGuess;

    if (playerGuess == numberToGuess) {
        cout &lt;&lt; "You won round " &lt;&lt; round &lt;&lt; "!" &lt;&lt; endl;
        printSeperator();
        return true;
    }
    else if (playerGuess &gt; numberToGuess) {
        cout &lt;&lt; "Your guess was too high, round " &lt;&lt; round &lt;&lt; "!" &lt;&lt; endl;
        printSeperator();
        lifesCounter--;
        cout &lt;&lt; "Number of Lives: " &lt;&lt; lifesCounter &lt;&lt; endl;
    }
    else {
        cout &lt;&lt; "Your guess was too low, round " &lt;&lt; round &lt;&lt; "!" &lt;&lt; endl;
        printSeperator();
        lifesCounter--;
        cout &lt;&lt; "Number of Lives: " &lt;&lt; lifesCounter &lt;&lt; endl;
    }
    return false;
}


bool playRounds(int&amp; lifesCounter, int upperRandomLimit) {
    int numberToGuess;
    for (int round = 1; round &lt; 3; round++) {
        numberToGuess = 1 + (rand() % upperRandomLimit);
        while (!guess(lifesCounter, numberToGuess, round, upperRandomLimit)) {
            if (lifesCounter == 0) {
                cout &lt;&lt; "Game Over! Actual Answer: " &lt;&lt; numberToGuess &lt;&lt; endl;
                return false;
            }
        }
    }
    return true;
}


int main() {
    srand(time(0));
    string playerNamer;
    int lifesCounter = 5;

    cout &lt;&lt; "Hello, what is your name? ";
    cin &gt;&gt; playerNamer;
    cout &lt;&lt; "Welcome to guess the number, " &lt;&lt; playerNamer &lt;&lt; "!" &lt;&lt; endl;
    printSeperator();
    cout &lt;&lt; "Number of lifes you have: " &lt;&lt; lifesCounter &lt;&lt; endl;

    if (!playRounds(lifesCounter, 10)) {
        return 0;
    }
    lifesCounter += 5;
    cout &lt;&lt; "You got more lifes! Now you have: " &lt;&lt; lifesCounter &lt;&lt; endl;
    cout &lt;&lt; "For the hard level, you have to guess a number from 15!" &lt;&lt; endl;
    playRounds(lifesCounter, 15);
    return 0;
}

</code></pre>

<hr>

<p>P.S.: It's very hard to win when you have just 5 lifes for all 4 guesses. ¯\_(ツ)_/¯</p>
    </div>