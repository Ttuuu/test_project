<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Check allocated pointers <em>before</em> using them</h1>
<p>It's good that we have a <code>if (!temp)</code> check, but unfortunately we used <code>temp</code> as argument to <code>memset()</code> before we did the check, so it's too late!</p>
<p>We could (and should) use <code>calloc()</code> if we need to zero out the memory we allocated.  In this case, it's not necessary (we'll be overwriting it anyway), so we should just omit the <code>memset()</code> call.</p>
<h1>Use <code>const</code> where appropriate</h1>
<p>The pointers <code>str</code>, <code>p</code> and <code>q</code> can all point to <code>const char</code>; that allows us to safely pass a string literal as argument, for example, and it helps users understand what guarantees they are given.</p>
<h1>Document the arguments</h1>
<p>The meaning of the argument <code>len</code> isn't obvious from its name or from the function's comment.  It seems that it's the largest substring we expect to handle.</p>
<p>Even better would be to make the code adapt (using <code>realloc()</code>, perhaps) to the string it's given, rather than requiring the user to specify that.  I'll leave that as an interesting exercise for you.</p>
<h1>Try not to mix indexing and pointer arithmetic</h1>
<p>It's a little confusing to index into <code>str</code> using <code>i</code>, but to also have pointers <code>p</code> and <code>q</code> pointing into the string, too.</p>
<h1>The <code>break</code> at the end of the loop</h1>
<p>Since <code>p</code> initially points to the beginning of the string, we can move the test at the end of the loop to be part of the loop condition.  This makes the loop structure easier to follow:</p>
<pre><code>for (size_t i = 0;  i &lt;= len &amp;&amp; *p;  ++i)
</code></pre>
<p>(I changed the test of <code>i</code> slightly, for simplicity and also as an almost-automatic aversion to integer overflow).</p>
<h1>We don't need a loop to find the next instance of <code>token</code></h1>
<p>We could use <code>strchr()</code> to find the next <code>token</code> in <code>str</code>.  On GNU platforms, there's also <code>strchrnul()</code> which returns a pointer to the terminating NUL (instead of a null pointer) when the character isn't present.</p>
<h1>Consider discarding empty words</h1>
<p>Many users will expect the same result from <code>"foo bar"</code> and <code>"foo  bar"</code> - it's a surprise to find that this code considers there to be a zero-length word between the two spaces in the latter string.  Even more surprising is <code>" foo"</code> which splits to <code>""</code> and <code>" foo"</code>.</p>
<hr>
<h1>Reworked code</h1>
<p>I started again from scratch, taking into account these observations.  The interface is a bit different, as in real life we want to be able to re-use the function to perform different actions on the tokens found, so we accept a function and a state pointer for the function.</p>
<p>This is standard portable C - you're of course able to add your annotation header to this if you want.</p>
<pre><code>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

/**
 * @brief Call a function for each token found in the input string.
 * @param s input string
 * @param sep nul-terminated set of delimiter characters, or NULL for default
 * @param f callback function
 * @param data callback data
 * @return true if successful, false on any failure
 */
int process_tokens(const char *s, const char *sep,
                   void (*f)(const char*,void*), void *data)
{
    if (!sep) {
        /* use default word separators */
        sep = " \t\n.!?()";
    }

    char *buf = NULL;
    size_t buf_len = 0;

    while (*(s+= strspn(s, sep))) {
        /* s is now pointing at next word character */
        size_t word_len = strcspn(s, sep);

        /* ensure we have sufficient storage */
        if (buf_len &lt;= word_len) {
            buf_len = 2 * word_len + 1;
            char *t = realloc(buf, buf_len);
            if (!t) {
                free(buf);
                return 0;
            }
            buf = t;
        }

        /* copy word into storage, and call user function */
        memcpy(buf, s, word_len);
        buf[word_len] = 0;
        f(buf, data);

        /* advance to next separator */
        s += word_len;
    }

    free(buf);
    return 1;
}


/* A simple test program */

#include &lt;stdio.h&gt;

static void print_token(const char *s, void *data)
{
    size_t *count = data;
    ++*count;
    printf("Processed: \"%s\"\n", s);
}

int main()
{
    size_t count = 0;
    const char *input = "  Pack my box  with five-dozen liquor jugs.  ";
    if (!process_tokens(input, NULL, print_token, &amp;count)) {
        fprintf(stderr, "Error splitting input string\n");
        return 1;
    }

    printf("Processed %zu tokens\n", count);
}
</code></pre>
    </div>