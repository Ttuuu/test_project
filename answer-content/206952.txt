<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing that could help a lot is to realize that tests verify behavior, not implementation. </p>

<p>This means you shouldn't be validating these things:</p>

<ul>
<li>should have a <code>&lt;form&gt;</code> element</li>
<li><code>&lt;form&gt;</code> element should have a onSubmit attribute</li>
<li>onSubmit attribute should be of type <code>function</code></li>
<li><code>&lt;form&gt;</code> element should have an <code>&lt;input /&gt;</code> element</li>
<li><code>&lt;input&gt;</code> element should be of type <code>text</code></li>
<li><code>&lt;form&gt;</code> element should have an <code>&lt;p&gt;</code> element</li>
<li><code>&lt;p&gt;</code> element should have a className</li>
<li><code>&lt;form&gt;</code> element should have an <code>&lt;input type="submit" /&gt;</code> element</li>
<li><code>&lt;input&gt;</code> element should be of type <code>submit</code></li>
<li><code>&lt;input /&gt;</code> element should have a className</li>
<li><code>&lt;input /&gt;</code> element should have a value attribute</li>
<li><code>&lt;input&gt;</code> element should have an onChange attribute</li>
<li>onChange attribute should be of type <code>function</code></li>
</ul>

<p>These things are good, but the descriptions should be rewritten with a focus on the behavior, not the implementation:</p>

<ul>
<li><code>&lt;input&gt;</code> element should have a placeholder attribute with value <code>Name</code></li>
<li><code>&lt;input&gt;</code> element value should be empty (2x of these)</li>
<li>should update the state when a value is input</li>
<li>should display an error when no value is input</li>
<li><code>&lt;p&gt;</code> element should be null when passed validationError: false</li>
<li><code>&lt;p&gt;</code> element should be <code>Please enter your name</code> when passed validationError: true</li>
</ul>

<p>Why you say? Well, why do we write tests? Many reasons, but one big one is because it gives us the ability to alter implementation without modifying behavior (refactoring). Said another way, implementations change, and often behavior should not.</p>

<p>Tests should only verify the external interface of the things-under-test, and the things-under-test can fall on a gradient of complexity starting from the simplest, a single function, to an object, on to an entire service or set of objects, and on to entire applications (e.g. a web app).</p>

<p>In this case, you're testing a component, so  the external interface includes anything passed to the component (props, context, etc.), ways of interacting with the component (buttons and other input handlers), and the return value of the component (rendered element tree). Your test titled "should display an error when no value is input" is a great example of this. A pattern I follow with any tests is: given (setup), when (stimulation – aka .simulate()), then (assertion), and your test does this well.</p>

<p>Ultimately, you won't understand the point of testing until:</p>

<ul>
<li>You find a bug – improve your tests so it never happens again</li>
<li>You need to add new features – you have assurances existing behavior won't regress</li>
<li>You build something nontrivial – begin by codifying your expectations (test stubs), then focus on one detail at a time.</li>
</ul>

<p>... and then you'll be scared to do anything without it. In my 15 years of writing software, this fear is one of the  most common reasons software projects fail (after market pressures).</p>
    </div>