<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>concerning <code>is None</code></h3>

<p>In case of <code>self.data</code> (pandas DataFrame) your usage of <code>if foo is None</code> is the only valid option. In the other cases I disagree with the opinion, that <code>if not foo</code> is better than <code>if foo is None</code>, as it is in no way generally correct to assume that an empty object should be handled by the if-clause. An <code>if foo is None</code> explicitley tells me, that there is only a single case, that needs special treatment. However, you have some rather strange constructs: I don't see the reason for using <code>getattr</code> in <code>if(getattr(self, "password") is None)</code> (also: redundant parentheses). This should be just <code>if self.password is None</code> - or <code>if not self.password</code> in case you also want to refuse empty passwords. There are other ones, but they mostly originate from you rather complicated <code>__init__</code> mechanisms.</p>

<h3>concerning <code>__init__</code></h3>

<p>Your constructor is too complicated. It either takes keyword arguments, that it maps, or maps arguments that may come via command line. I highly recommend to split the two cases: Create an alternative constructor as classmethod <code>from_cli</code> that parses the command line arguments (<code>argparse</code> or similar), and uses them as named arguments for the real constructor, that needs a clear signature like <code>__init__(self, data=None, path=None, password=None, settings=None)</code> and sets the member variables explicitely. That way it's much easier to grasp, what state an instance of <code>PassDB</code> is in after creation.</p>
    </div>