<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A standard way to do this is to break the function up into smaller 'private' (<code>static</code>) functions, each with one thing to do. One can pass the default to the counting function in case we are not provided the argument. This allows separation of the code which counts and the UI.</p>

<p><code>Total</code> is always going to be called with <code>(0, 0, 0)</code>, it's unnecessary to provide these arguments. In fact, the storage of <code>Total</code> in dynamic memory is probably unnecessary. No need to <code>updateTotal</code>, use of the counters directly is fine. In fact, there is going to be 1 <code>total</code>, might as well make it <a href="https://stackoverflow.com/questions/13251083/the-initialization-of-static-variables-in-c">static</a>.</p>

<p><code>fgetc</code> returns an <code>int</code>, <code>char ch</code> is not enough to tell <code>EOF</code>, which is -1. You've defined <code>BUF_SIZE</code>, an excellent optimization, but never use it. I'd go from <code>fgetc</code> to <code>fgets</code>. Note that this assumes that the file is text and doesn't contain a <code>'\0'</code> inside, (eg, modified UTF-8.)</p>

<p>You've included <code>getopt</code> and <code>unistd</code>, making your code <code>POSIX C99</code>, but you're not using those. Removing them makes your code more general <code>C99</code> (now your code will compile on more compilers.)</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include &lt;errno.h&gt;

//stores the Total count of lines words and bytes
struct Total {
    size_t lines, words, bytes;
} total;

//count the bytes, lines and words
//gives incorrect results on binary files with embedded 0
//a word is delimited by everything that {isgraph}
//using the unix definition of a text file, {lines = count('\n')}
static int readFile(FILE *fp) {
    char buffer[1024], b;
    int startWord = 1;
    size_t i;
    while(fgets(buffer, (int)sizeof buffer, fp)) {
        i = 0;
        do {
            b = buffer[i++];
            if(b == '\n') {
                /* This will not recognize '\l' in old Mac text files opened
                 with "wb"? Hmm. */
                total.lines++;
                startWord = 1;
            } else if(b == '\0') {
                break;
            } else if(isgraph(b)) {
                //if there's a visible char, there's a word
                if(startWord) total.words++, startWord = 0;
            } else {
                startWord = 1;
            }
        } while(1);
        total.bytes += i;
    }
    return ferror(fp) ? 0 : 1;
}

int main(int argc, char *argv[]) {
    FILE *fp = 0;
    char *fn = "&lt;no file&gt;";
    for(int i = 1; i &lt; argc; i++) {
        fn = argv[i];
        fp = fopen(fn, "r");
        if(!fp || !readFile(fp)) break;
        fclose(fp), fp = 0;
    }
    if(argc &lt;= 1) readFile(stdin);
    if(fp) fclose(fp);
    if(errno) return perror(fn), EXIT_FAILURE;
    /* https://stackoverflow.com/a/2524675/2472827 */
    printf("%zu lines; %zu words; %zu bytes total.\n",
        total.lines, total.words, total.bytes);
    return EXIT_SUCCESS;
}
</code></pre>

<p>Some see <code>typedef struct</code> as problematic, and, in my opinion, it's not needed here; see <a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html#typedefs" rel="nofollow noreferrer">Linux kernel coding style</a>. <code>INT_MAX</code> could be as little as <a href="https://en.wikibooks.org/wiki/C_Programming/limits.h" rel="nofollow noreferrer">32,767</a>; it's never going to be less than zero, so I'd prefer <code>unsigned</code>, or <code>size_t</code> in this context. What if there are other chars besides <code>'\n', ' ', '\r', '\t'</code>? I've included <code>&lt;ctype.h&gt;</code> to get rid of the ambiguity. There was a bug counting the word at the end of the line. Now, a line is defined as the number of <code>'\n'</code> (UNIX style.) A word is delimited by <code>isgraph</code>.</p>
    </div>