<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ted's answer is quite readable to me.</p>

<p>You could use <code>some</code> to detect if you need to submit changes as that is semantically closer to what you are doing:</p>

<pre><code>if (['activeBaseNode', 'filterOID', 'quickFilterRequest']
    .some(prop =&gt; state[prop] !== props[prop])
</code></pre>

<p>It's perhaps nicer to reverse the logic with <code>every</code> and early exit, then extract all the properties only when you need them. Here I'm doing it with a function, avoiding defining three <code>const</code>s:</p>

<pre><code>static getDerivedStateFromProps(props, state) {
  if (['activeBaseNode', 'filterOID', 'quickFilterRequest']
    .every(prop =&gt; state[prop] === props[prop]) return null

  return (({activeBaseNode, filterOID, quickFilterRequest}) =&gt; 
         ( {activeBaseNode, filterOID, quickFilterRequest}))(props)
</code></pre>

<p>That's cryptic and short approach. </p>

<p>I don't really like that the names of the properties are repeated three times in all the solutions. To avoid that, a <code>reduce</code> can be used to build the properties that need to be updated:</p>

<pre><code>const toUpdate = ['activeBaseNode', 'filterOID', 'quickFilterRequest']
  .find(prop =&gt; state[prop] !== props[prop])
  .reduce((m,k) =&gt; m[k] = props[k], {})
return Object.keys(toUpdate).length == 0 ? null : toUpdate
</code></pre>

<p>Once you get used to it, I think that's the clearest. It's got the essence of the problem and nothing more: the names of the properties, that the state != the props, and that you return <code>null</code> if nothing is changing.</p>
    </div>