<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To streamline this and remove the abundant code duplication, you could extract the two distinct parts you repeat into <code>Sub</code>s taking parameters and then call those. </p>

<pre><code>Private Sub ReplacePlaceholderInDocument(document As Word.Document, placeholder As String, replacement As String)
</code></pre>

<p>You could also get all placeholder values in another function and put them as key value pairs into a <code>Scripting.Dictionary</code> and call your new sub in a loop over the the dictionary keys.</p>

<p>There are a few more things that could be improved to enhance the maintainability of the code:</p>

<p>The code would really benefit from a better separation of concern. According to the single responsibility principle, each unit of program should be concerned with only one responsibility. Your sub seems to combine the responsibilities of choosing the template, getting the template, getting the replacement values (including getting the reference sheet and its name) and replacing the values. Each of these could go into its own sub or function after which the main sub only coordinates the use of the new subs and functions.</p>

<p>Next, I see that you are referring to the <code>ActiveDocument</code>, which is a bad idea most of the time. This will be different depending on which Word document currently has focus. It is usually better to use an explicit document, unless the currently active document is really what you need.</p>

<p>You also take values from the reference sheets from explicit cell addresses. That is rather fragile: any layout change can make the code invalid. A better alternative is to use named ranges in Excel. These can be referred to using their name. </p>

<p>You also seem to take values from variables defined outside the sub, like <code>UserFullName</code>. Unless this is a method to be called as a makro, you might consider to make these parameters of the sub. That would make the sub more self contained.</p>

<p>Finally, it is a good practice to state accessibilities exicitly. The sub is currently defined without one, which means that it is implicitly <code>Public</code>.</p>

<p>There are probably a few more improvements one could make, but I will leave it with this. </p>
    </div>