<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If I'm not mistaken, the question stated in the title isn't the question you ask in your post's body. Finding the nearest rational approximation of a double-precision number is one thing, mirroring the character selection of a game another.</p>

<p>As to the first one, a fairly good answer is based on <a href="https://en.wikipedia.org/wiki/Farey_sequence" rel="nofollow noreferrer">the Farey sequence</a>, which will converge quicker than brute-force in most cases. It works on numbers between 0 and 1, thus it is well adapted to probabilities. Here's a fairly basic adaptation:</p>

<pre><code>struct Farey_fraction {
    unsigned numerator, denominator;
    Farey_fraction(unsigned n, unsigned d) : numerator(n), denominator(d) {}
    operator double() const { return numerator / static_cast&lt;double&gt;(denominator); }
};

Farey_fraction mediant(Farey_fraction lhs, const Farey_fraction&amp; rhs) {
    return Farey_fraction(lhs.numerator + rhs.numerator, lhs.denominator + rhs.denominator);
}

Farey_fraction nearest_rational(double target, std::size_t maximum_denominator) {
    Farey_fraction min{0, 1}, max{1, 1};
    // unless you can find a rational representation of the target
    // return the neighboring fraction with the greatest allowed denominator
    while (min.denominator &lt;= maximum_denominator &amp;&amp; max.denominator &lt;= maximum_denominator) {
        auto guess = mediant(min, max);
        if (guess == target) {
            if (min.denominator + max.denominator &lt;= maximum_denominator) return guess;
            else if (max.denominator &gt; min.denominator) return max;
            else return min;
        }
        // update the bounds to converge
        else if (target &gt; guess) min = guess;
        else                     max = guess;
    }
    if (min.denominator &gt; maximum_denominator) return max;
    return min;
}
</code></pre>

<p>Once you have solved this problem, you have a quite direct solution to the second one: you only need to distribute the difference between <code>1</code> and the sum of the rational approximations between the approximations to reconstitute the 100% total. There's a little bit of work here, since you might have to simplify fractions. I you use C++17 you can rely on <code>std::gcd</code> to make the task easier.</p>

<h2>Now onto your code</h2>

<ol>
<li><p>constants should be <code>const</code>. To the very least; you can <code>constexpr</code> them also (for instance: <code>constexpr double given5rate = 0.07089;</code>. It expresses your intent better, and will trigger a compilation error if you modify it by mistake.</p></li>
<li><p>nested loops and nested if-clauses often are a sign of bad code, especially when there are so many layers. They're very difficult to read and debug, not only because the variables' states are difficult to follow, but even very simply because lines will overflow unless you have a very wide screen. Moreover, they generally aren't the most efficient solution -or if they are, the problem can't be solved quickly, because nested loops are by essence slow.</p></li>
</ol>
    </div>