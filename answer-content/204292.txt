<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>ToUpper translates into SQL allowing you to avoid the StringComparison.InvariantCultureIgnoreCase.</p>

<p>In addition the IsNumeric function allows you to guard so that you can use parse the string to get the counter directly (In LinqtoEntities with a MSSQL backend .Cast() performs this function).  </p>

<p>Finally when operating with queryables you need to use an Expression rather than a Func</p>

<p>This allows the following;</p>

<pre><code>private string GetUniqueStringForModel&lt;T&gt;(
  string originalString, 
  IQueryable&lt;T&gt; enumerableObjects, 
  Expression&lt;Func&lt;T, string&gt;&gt; stringFieldFunction
) where T : class
{
IQueryable&lt;String&gt; enumerableStrings=Queryable.Select&lt;T,string&gt; 
(enumerableObjects,stringFieldFunction);

if(!enumerableObjects.Select(stringFieldFunction).Any(
x=&gt;x.ToUpper()==originalString.ToUpper()))
return originalString;

originalString=originalString+"_";
var length=originalString.Length;

if(!enumerableStrings.Any(
x=&gt;x.ToUpper().StartsWith(originalString.ToUpper())&amp;&amp;
System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(
x.Substring(length)) == 1))
return originalString+"1";

var highest=
  enumerableStrings
  .Where(x=&gt;(x.ToUpper().StartsWith(originalString.ToUpper())) &amp;&amp;
    System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(
    x.Substring(length)) == 1)
  .Select(x=&gt;x.Substring(length))
  .Cast&lt;int&gt;()
  .Max()+1;
return originalString+highest;
}
</code></pre>

<p>Not quite the same as your code, if you have "Foo", "Foo_1" and "Foo_5" your code will return "Foo_2" while the above should return "Foo_6", but it's only 3 db calls, and each only return a single row.</p>
    </div>