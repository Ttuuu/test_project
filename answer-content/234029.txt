<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the other answers:</p>

<h2>Floating-point types</h2>

<p>You have this line in your code:</p>

<pre class="lang-java prettyprint-override"><code>private float capacity = (float)0.5;
</code></pre>

<p>It seems strange that you have to tell the computer that <code>0.5</code> is indeed a <code>(float)</code> value, on the right side of the <code>=</code>. To fix this, there are two possibilities:</p>

<ol>
<li><p>If you are in a setting where performance is the most important goal of your code, keep using the <code>float</code> type but instead of <code>(float) 0.5</code> just write <code>0.5f</code>.</p></li>
<li><p>In all other situations use the <code>double</code> type instead of <code>float</code>. Then you can write:</p></li>
</ol>

<pre class="lang-java prettyprint-override"><code>private double capacity = 0.5;
</code></pre>

<p>This is much cleaner and more idiomatic.</p>

<h2>Source code layout</h2>

<p>Currently your code is quite condensed: <code>if(cond){</code>. It's usual to write spaces between most of these program elements. You don't have to do that yourself, that's the job for your integrated development environment (IDE). In IntelliJ, just press Ctrl+Alt+L, in Eclipse press Ctrl+Shift+F, and you're done.</p>

<h2>Floating-point accuracy</h2>

<p>In a test run of your program, you should fill a glass with <code>0.3f</code>. Then, take <code>0.2f</code> away, and then again, take <code>0.1f</code> away. You would probably expect now that the glass is empty. But it isn't. Your program tells you that the glass still contains <code>7.4505806E-9</code> (if you are using <code>float</code>), or even <code>-2.7755575615628914E-17</code> (if you are using <code>double</code>). The latter means your glass is less than empty, which is not possible physically.</p>

<p>Welcome to the tricky fields of <a href="https://www.itu.dk/~sestoft/bachelor/IEEE754_article.pdf" rel="nofollow noreferrer">floating-point arithmetics</a>, which can be surprising in many situations. Therefore, financial applications typically use integers instead of floating point numbers (they just say 123 cents instead of 1.23 dollars).</p>
    </div>