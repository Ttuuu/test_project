<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One downside to your approach is that if you later add more movement directions such as diagonal directions, you will have to add additional branches in <code>ChangeDirection</code> </p>

<p>Another approach that would work with arbitrarily many possible <code>movement</code> directions is to use <a href="https://docs.unity3d.com/ScriptReference/Quaternion.LookRotation.html" rel="nofollow noreferrer"><code>Quaternion.LookRotation</code></a>. </p>

<p><code>Quaternion.LookRotation</code> creates a Quaternion that:</p>

<ol>
<li>Rotates from <code>Vector3.forward</code> to a target vector </li>
<li>Rotates <code>Vector3.up</code> as close as possible to a target vector that defaults to <code>Vector3.up</code></li>
</ol>

<p>Because what you are doing is calculating a Quaternion that rotates from <code>Vector3.forward</code> to <code>movement</code> while not rotating <code>Vector3.up</code>, using <code>Quaternion.LookRotation</code> makes for a very simple one-liner that explains itself to anyone who is familiar with the Unity API:</p>

<pre><code>void ChangeDirection()
{
    if(movement!=Vector3.zero)
        transformModel.rotation = Quaternion.LookRotation(movement);
}
</code></pre>
    </div>