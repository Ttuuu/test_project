<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The easiest speed-up I can think of is a letter-counting pass. In other words: apply <code>collections.Counter()</code> to the word in question, and keep a pre-computed tuple of <code>Counter</code>s for both pet types.</p>

<p>The thing that's killing your performance is order - there are many, many, many re-ordered results from <code>permutations</code>, but they literally don't matter since you're dealing with an anagram. So when you compare with the <code>Counter</code>s suggested above, check to see that</p>

<ul>
<li>there are no letters that have increased, and</li>
<li>the total decrease is exactly two.</li>
</ul>

<p>Here is a very rough implementation that seems to be fast-ish:</p>

<pre><code>from collections import Counter
import requests


class Pet:
    __slots__ = ('name', 'counter', 'is_common', 'letters')
    def __init__(self, name: str, is_common: bool):
        self.name, self.is_common = name, is_common
        self.counter = Counter(self.name)
        self.letters = set(self.counter.keys())

    def matches(self, word: str) -&gt; bool:
        if len(word) != 2 + len(self.name): return False
        wcounter = Counter(word)
        total = 0
        for letter in self.letters | set(wcounter.keys()):
            diff = wcounter[letter] - self.counter[letter]
            if diff &lt; 0: return False
            total += diff
            if total &gt; 2: return False
        return total == 2

    def __str__(self): return self.name


pets = [
    *(Pet(name, True) for name in ('dog', 'cat', 'lizard', 'rabbit', 'hamster', 'fish')),
    *(Pet(name, False) for name in ('bear', 'rhino', 'lion', 'tiger', 'viper', 'hyena')),
]

print('Downloading...', end=' ')
resp = requests.get('https://github.com/dwyl/english-words/blob/master/words.txt?raw=true')
resp.raise_for_status()
words = resp.text.splitlines()
print(f'{len(words)} downloaded.')

for word in words:
    for pet in pets:
        if pet.matches(word.lower()):
            print(f'{word} -&gt; {pet} = {"Common" if pet.is_common else "Uncommon"} Pet')
</code></pre>

<p>It can be sped up with the use of multiple threads, etc.</p>
    </div>