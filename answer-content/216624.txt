<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't need the <code>std::vector&lt;std::uint8_t&gt;</code> objects at all. You can use the input <code>std::string</code> objects directly.</p>

<p>Also, the code in the <code>while</code> loop needs to be updated for the following issues:</p>

<ol>
<li><p>Make sure to capture the return value opf <code>source.erase</code>. If you don't the iterator is invalid.</p></li>
<li><p>To avoid infinite loop, use <code>itr</code> as the first argument to <code>std::search</code>.</p></li>
<li><p>Update <code>itr</code> inside the loop appropriately to avoid an infinite loop.</p></li>
</ol>

<p></p>

<pre><code>void replaceAllOccurences(std::string&amp; source,
                          const std::string&amp; replaceFrom,
                          const std::string&amp; replaceTo)
{
   std::string::iterator itr = source.begin();
   while((itr = std::search(itr, source.end(), replaceFrom.begin(), replaceFrom.end())) != source.end())
   {
      itr = source.erase(itr, itr + replaceFrom.size());

      // itr is going be invalid after insert. Keep track of its
      // distance from begin() so we can update itr after insert.
      auto dist = std::distance(source.begin(), itr);

      source.insert(itr, replaceTo.begin(), replaceTo.end());

      // Make itr point to the character 1 past what got replaced.
      // This will avoid infinite loop incase the first character of
      // replaceTo is the same as the character being replaced.
      itr = std::next(source.begin(), dist+1);
   }
}
</code></pre>
    </div>