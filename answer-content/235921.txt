<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Prefer <code>const</code> to <code>#define</code></h2>

<p>For constants such as <code>TOTAL_BITS</code>, it's generally better to use a named <code>const</code> value rather than a <code>#define</code>.  The primary reason is that the <code>const</code> definition enforces type checking, while the macro does not.  However, see the next suggestion.</p>

<h2>Use <code>sizeof</code> for portability</h2>

<p>The code currently contains these lines:</p>

<pre><code>#define TOTAL_BITS 32
#define N_OCTETS ((TOTAL_BITS / 8))

typedef uint32_t BitField;
</code></pre>

<p>However, I think I'd define everything instead as <code>const</code> values all derived from the type.  That is, I'd suggest this:</p>

<pre><code>typedef uint32_t BitField;
const int BitFieldOctets = sizeof(BitField);
const int BitFieldBits = 8 * BitFieldOctets;
</code></pre>

<h2>Think carefully about signed vs. unsigned</h2>

<p>If <code>generateSubnetMask</code> is passed a negative number, what should it do?  I'd suggest that the passed number should be <code>unsigned</code> instead of <code>int</code> and that the value could be checked to make sure it does not exceed the naximum number of bits.  </p>

<h2>Be careful when shifting negative values</h2>

<p>By default, constants are <code>int</code>, so this code:</p>

<pre><code>return ~0 &lt;&lt; nHostBits;
</code></pre>

<p>Should probably instead be written like this:</p>

<pre><code>return ~0u &lt;&lt; nHostBits;
</code></pre>

<h2>Avoid pointless recalculations</h2>

<p>The code has this function:</p>

<pre><code>void printOctets(BitField maskAddress) {
    for (int octetN = BitFieldOctets - 1; octetN &gt;= 0; octetN--) {
        BitField mask = generateOctetMask(octetN);
        printf("%d", (maskAddress &amp; mask) &gt;&gt; (octetN * 8));

        if (octetN &gt; 0) {
            printf(".");
        }
    }
}
</code></pre>

<p>This is more complex than it needs to be.  First, the mask can be generated just once for the high byte and then shifted, eliminating a number of calculations that don't need to be done:</p>

<pre><code>void printOctets(BitField maskAddress) {
    BitField mask = generateOctetMask(BitFieldOctets - 1);
    for (unsigned i=BitFieldOctets; i; --i) {
        printf("%d", (maskAddress &amp; mask) &gt;&gt; (BitFieldBits - 8));
        maskAddress &lt;&lt;= 8;
        if (i != 1) {
            printf(".");
        }
    }
}
</code></pre>

<p>This works by keeping the mask in place over the most significant byte and then shifting the address to the left each iteration.  An alternative would be to use a <code>union</code> as the <code>BitField</code> type to allow access to each byte very simply.  That approach, however, requires that you account for the endian-ness of your machine, which this code does not.</p>

<h2>Consider restructuring for simplicity and clarity</h2>

<p>The <code>printBinary</code> code is currently like this:</p>

<pre><code>void printBinary(BitField n) {
    bool areDropping = true;  // So we can drop leading 0s.

    for (BitField mask = 1u &lt;&lt; 31; mask &gt; 0; mask &gt;&gt;= 1) {
        bool isSet = n &amp; mask;

        if (isSet) {
            areDropping = false;
            printf("1");

        } else if (!areDropping) {
            printf("0");
        }
    }
}
</code></pre>

<p>Instead, I'd break this into two different loops: the first to skip leading zeroes and the second to actually print the bits.  Here's one way to do that:</p>

<pre><code>void printBinary(BitField n) {
    BitField mask = 1u &lt;&lt; (BitFieldBits - 1);
    // skip leading zeroes
    for (; mask &amp;&amp; !(mask &amp; n); mask &gt;&gt;= 1);
    // print all other bits
    for (; mask; mask &gt;&gt;= 1) {
        putchar(n &amp; mask ? '1' : '0');
    }
}
</code></pre>

<p>Note that here I'm using the named constants rather than the "magic number" 31.</p>
    </div>