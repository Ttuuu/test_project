<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're currently iterating over the slice each once, and then again for each value. That's understandable, but not ideal. Why not simply sort the data, and then check whether or not the next value is the same as the current one?</p>

<pre><code>func distinct(values []string) int {
    if len(values) == 0 {
        return 0
    }
    // the loop doesn't count the last value
    // add if the slice isn't empty
    distinct := 1
    // sort the values
    sort.Strings(values)
    // stop iterating at the next to last element
    for i := 0; i &lt; len(values)-1; i++ {
        // if the current value is distinct from the next, this is a unique word
        if values[i] != values[i+1] {
            distinct++
        }
    }
    return distinct
}
</code></pre>

<p>Other, more general comments on your code:</p>

<ul>
<li>Variables like <code>is_discrete</code> is not in line with golang's coding conventions. Golang prefers <code>camelCased</code> variable names. <code>isDiscrete</code>.</li>
<li>Your nested <code>if</code> checking <code>i != j</code> and then <code>xi == xj</code> can, and should be combined: <code>if i != j &amp;&amp; xi == xj</code></li>
<li>Personally, I'd probably use the indexes, and just use <code>for i := range x</code> and <code>for j := range x</code>.</li>
<li><p>Although it doesn't make the code perform any better, it does get rid of that rather clunky looking <code>if isDiscrete</code>, you could use either one of the following snippets:</p>

<p>for i := range x {
    inc := 1
    for j := range x {
        for i != j &amp;&amp; x[i] == x[j] {
            inc = 0
            break
        }
    }
    discrete += inc
}</p></li>
</ul>

<p>You could also increment <code>discrete</code> beforehand, and just replace <code>inc = 0</code> with <code>discrete--</code> in the inner loop.</p>

<hr>

<p>While we're on the subjects of other approaches, while not efficient, it is a very easy approach:</p>

<pre><code>func Discrete(vals []string) int {
    unique := map[string]struct{}{}
    for i := range vals {
        unique[vals[i]] = struct{}{}
    }
    return len(unique)
}
</code></pre>

<p>In this code, any duplicate string value is just reassigning the same key in the map. At the end, getting the length of the map will give you the total of unique string values. Maps cause memory allocations, so it's not the most efficient way, but it's a solid way to test your code. You can pass some data to your function, and use a map to calculate what the return for any given slice of strings should be. </p>

<hr>

<p>Last thoughts on efficiency: the golang toolchain packs a couple of really handy tools that will help you determine which approach is more efficient (writing benchmarks). If memory consumption is a worry, you can use <code>pprof</code>. Not just to determine how much memory any given piece of code uses, but also which part of the code is the most likely bottleneck.</p>
    </div>