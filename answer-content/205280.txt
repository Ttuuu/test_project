<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>hashMap.h

#ifndef HASHMAP_H
#define HASHMAP_H

#include &lt;unordered_map&gt;

template &lt;class keyed, class val&gt;
class HashMap
{
public:
  HashMap(){}
  ~HashMap(){}

  long keyOf(keyed &amp;item){ return (long) &amp;item; }

  val &amp;operator[](keyed &amp;item)
  {
      long key = keyOf(item);
      return _uomap[key];
  }

private:
    std::unordered_map&lt;long, val&gt; _uomap;
};
#endif
</code></pre>

<p>First of all, since your class doesn't provide much more than <code>std::unordered_map</code>, I would advise to dispense with it and use the standard container directly.</p>

<p>The only added-value is the <code>keyed</code> -&gt; <code>long</code> conversion. About that: don't use C-style casting, C++ offers more obvious ways to do it, like in this case <code>static_cast</code>. Moreover, I don't understand why you don't use a <code>map&lt;keyed, val&gt;</code> in the first place; and if the compatibility requirement is convertibility to long, it is enough to have an <code>operator[](const long&amp; item)</code>, it'll make the conversion for you.</p>

<pre><code>graph.h:

#ifndef GRAPH_H
#define GRAPH_H

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include "hashMap.h"

using namespace std;

class Vertex
{
public:
    Vertex(float val): _val (val), _id (0) {}
    Vertex(int id): _val (0), _id (id) {} 
    Vertex(int id, float val): _val (val), _id (id) {}
    ~Vertex(){}

    int id() const { return _id; }
    int val() const { return _val; }

private:
    float _val;
    int _id;
};
</code></pre>

<p>I'm not a fan of 20-line classes that could be summed up to <code>std::pair&lt;int, float&gt;</code> and actually offer way fewer functionalities (<code>operator&lt;</code> being maybe the most obvious one). If you stick to it, consider a more modern style (and don't mess with the order of initialization):</p>

<pre><code>// constructors calling constructors
    Vertex(int id, float val): _val (val), _id (id) {}
    Vertex(float val): Vertex(0, val) {}
    Vertex(int id): Vertex(id, 0) {} 
// or, default member values
    Vertex(int id, float val): _val (val), _id (id) {}
    Vertex(float val): _val(val) {}
    Vertex(int id): _id(id) {} 
private:
    float _val = 0;
    int _id = 0;
</code></pre>

<p>You must also tread very carefully with your constructors, because how the compiler will choose between <code>Vertex(float)</code> and <code>Vertex(int)</code> is a very delicate matter and could surprise you. And what if the client uses a custom class convertible to both <code>int</code> and <code>float</code>?</p>

<p>You could also consider having a simple <code>struct</code> and use aggregate initialization</p>

<pre><code>struct Vertex { int id=0; float val=0; };
Vertex v{1, 3.14};
</code></pre>

<p>C++20 will offer designators, so you would then write:</p>

<pre><code>Vertex v{.id = 1, .val = 3.14};
</code></pre>

<p>A last point to make: use nicer names for your variables. <code>id</code> is better than <code>_id</code>, <code>val</code> than <code>_val</code> and <code>value</code> than <code>val</code>.</p>

<pre><code>class Edge
{
public:
    Edge(Vertex *to, Vertex *from): _to (to), _from (from), _weight (1.){}
    Edge(Vertex *to, Vertex *from, float w): _to (to), _from (from), _weight (w){}
    ~Edge(){}

    void show()
    { 
        cout &lt;&lt; (*_to).id() &lt;&lt; " &lt;-(" &lt;&lt; _weight; 
        cout &lt;&lt; ")- " &lt;&lt; (*_from).id() &lt;&lt; endl; 
    }

    Vertex &amp;to() const { return *_to; }
    Vertex &amp;from() const { return *_from; }
    float weight() const { return _weight; }

private:
    Vertex *_to;
    Vertex *_from;
    float _weight;
};
</code></pre>

<p>Same here: constructors, names, etc. Providing an <code>operator&lt;&lt;</code> is also more idiomatic than <code>show</code> methods</p>

<pre><code>class Graph
{
public:
    Graph(int numVertices)
    {
        _numVertices = 0;
</code></pre>

<p>Frankly, using <code>numVertices</code> and <code>_numVertices</code> in the same function is like running with a sharp knife in your pocket. I hope you like pain.</p>

<pre><code>        for(int i=0; i &lt; numVertices; i++)
        {
            _vertices.push_back( Vertex(_numVertices) ); 
            ++_numVertices;
        }
</code></pre>

<p>Use standard algorithm to be more explicit. You can fill a container with <code>std::fill</code> or, if it follows a regular by-one increment, <code>std::iota</code>:</p>

<pre><code>vertices(num_vertices);
std::iota(vertices.begin(), vertices.end(), 0);
</code></pre>

<p>Let's go on:</p>

<pre><code>    }

    ~Graph(){}

    vector&lt;Vertex*&gt; adj(Vertex &amp;v){ return _adjHashMap[v]; }
</code></pre>

<p>names, again: what does <code>adj</code> mean? adjacent vertices? adjacency map? </p>

<pre><code>    vector&lt;Vertex&gt; &amp;vertices(){ return _vertices; }
    vector&lt;Edge&gt; &amp;edges(){ return _edges; }

    void connectTo(Vertex &amp;v, Vertex &amp;u, float weight)
</code></pre>

<p><code>v</code>, <code>u</code>? Come on! canonical names would be <code>src</code> and <code>dest</code>, or <code>lhs</code> and <code>rhs</code>. That the letter 'u' comes before the letter 'v' is all the more confusing</p>

<pre><code>    { //TODO: if isConnectedTo, don't connect!
        Vertex *uptr = &amp;u;
        Vertex *vptr = &amp;v;
</code></pre>

<p>You can use <code>&amp;src</code> and <code>&amp;dest</code> directly, no need to create more variables here</p>

<pre><code>        _adjHashMap[v].push_back(uptr);

        Edge newEdge(uptr, vptr, weight);
        _edges.push_back(newEdge);
    }

    void connectTo(Vertex &amp;v, Vertex &amp;u){ connectTo(v, u, 1.); }
</code></pre>

<p>Consider having only one <code>connectTo</code> signature with a default weight value.</p>

<pre><code>    bool isConnectedTo(Vertex &amp;v, Vertex &amp;u)
    {
        vector&lt;Vertex* &gt; adj = _adjHashMap[v];
        for(Vertex *vptr : adj)
            if (vptr == &amp;u) return true;
        return false; 
    }
</code></pre>

<p>Again, using standard algorithms is more explicit:</p>

<pre><code>        const auto&amp; adjacent_vertices = adjacency_map[src];
        const auto found = std::find(adjacent_vertices.begin(), adjacent_vertices.end(), dest);
        return found != adjacent_vertices.end();
</code></pre>

<p>Moving on</p>

<pre><code>private:
    vector&lt;Vertex&gt; _vertices;
    vector&lt;Edge&gt; _edges;
    HashMap&lt;Vertex, vector&lt;Vertex*&gt; &gt; _adjHashMap;
    int _numVertices;
};
#endif

disjoint.h:

#ifndef DISJOINT_H
#define DISJOINT

#include "hashMap.h"

template &lt;class T&gt;
class DisjointSets
{
public:
    DisjointSets(){}
    ~DisjointSets(){}

    void makeSet(T &amp;elem)
    {
        _parentOf[elem] = &amp;elem;
        _rankOf[elem] = 0; 
        ++_numSets;
    }
</code></pre>

<p>I would rather make the parent of <code>elem</code> a <code>nullptr</code>, as it is more idiomatic</p>

<pre><code>    T &amp;findSet(T &amp;elem)
    {
        if (_parentOf[elem] != &amp;elem)
            _parentOf[elem] = &amp;findSet(*_parentOf[elem]);
        return (*_parentOf[elem]);
    }

    void unify(T &amp;elemA, T &amp;elemB)
    {
        link(findSet(elemA), findSet(elemB));
        --_numSets;
    }

    void link(T &amp;setA, T &amp;setB)
    {
        if (_rankOf[setA] &lt; _rankOf[setB])
            _parentOf[setA] = &amp;setB;
        else
        {
            _parentOf[setB] = &amp;setA;
            if (_rankOf[setB] == _rankOf[setA])
                ++(_rankOf[setB]);
        }
    } 

    int numSets(){ return _numSets; }
</code></pre>

<p>I do agree with you that this part of your code is very good and clear. Moreover it's cleverly optimized to make the tree flatter and more balanced.</p>

<pre><code>private:
    HashMap&lt;T, T*&gt; _parentOf;
    HashMap&lt;T, int&gt; _rankOf;
    int _numSets = 0;
};
#endif

minSpanTree.h:

#ifndef MST_H
#define MST_H

#include &lt;algorithm&gt;
#include "graph.h"
#include "disjoint.h"

using namespace std;

struct weight_less_than
{
   inline bool operator() (const Edge&amp; a, const Edge &amp;b)
   {
       return a.weight() &lt; b.weight();
  }
};
</code></pre>

<p>Don't bother to create <code>struct</code> for that. Use a lambda directly inside your algorithm call (see below)</p>

<pre><code>vector&lt;Edge&gt; kruskal(Graph &amp;g)
{
    vector&lt;Edge&gt; mst;
    vector&lt;Edge&gt; &amp;es = g.edges();
    std::sort( es.begin(), es.end(), weight_less_than()); 
</code></pre>

<p>so, as I said, use lambdas:</p>

<pre><code>std::sort(es.begin(), es.end(), [](const auto&amp; lhs, const auto&amp; rhs) {
    return lhs.weight &lt; rhs.weight;
});
</code></pre>

<p>Let's go on:</p>

<pre><code>    vector&lt;Vertex&gt; &amp;vs = g.vertices();
    DisjointSets&lt;Vertex&gt; sets;

    for (Vertex &amp;v : vs)
</code></pre>

<p>There is this constness problem all along your code; I've moved on too fast to underline it everywhere. But I've seen it in the other review: <code>const</code> should be the default!</p>

<pre><code>        sets.makeSet(v);
    for (Edge &amp;e : es)
    {
        Vertex &amp;to = e.to();
        Vertex &amp;from = e.from();
        if (&amp;(sets.findSet(to)) != &amp;(sets.findSet(from)))
        {
            sets.unify(to, from);
            mst.push_back(e);
        }
    }
    return mst;
}
#endif
</code></pre>
    </div>