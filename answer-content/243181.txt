<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can break down calculating the time complexity as below:</p>

<ul>
<li><p>The method <code>isPrime()</code> is <code>O(n^(1/2))</code> i.e <code>root(n)</code>.</p></li>
<li><p>The method <code>getNExtPrimeNumber()</code> is called for <code>k times</code> where <code>k</code> is the difference between the given prime number and the next prime number.It is calling <code>isPrime()</code> method in every iteration. So it is <code>O(k * root(n))</code> times.</p></li>
<li><p>The <code>while loop</code> is calling <code>isPrime(n)</code> method in every iteration and will run <code>log base nextPrimeNumber(n)</code> times.For example, if <code>nextPrimeNumber</code> is 2 then it is <code>log base 2(n)</code>.So total time complexity of <code>while loop</code> is <code>O(log base nextPrimeNumber(n) * root(n))</code>.</p></li>
<li><p>Now <code>for loop</code> is trying to find out the number of prime numbers between 2 and given number(n). As far as I know there is no math formula present to get that based on given number. So lets assume that iteration to be <code>p</code>. For every iteration of <code>for loop</code>, <code>getNextPrimeNumber()</code> is called and the <code>while loop</code> is called. So total time complexity of your <code>for loop</code> would be : <code>O( p * (k * root(n)) * (log base nextPrimeNumber(n) * root(n)) )</code></p></li>
</ul>

<p>This gives <code>O(p*k*n*log(n))</code>.</p>
    </div>