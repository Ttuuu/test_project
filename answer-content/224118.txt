<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that I think could help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Eliminate global variables where practical</h2>

<p>Having routines dependent on global variables makes it that much more difficult to understand the logic and introduces many opportunities for error.  Eliminating global variables where practical is always a good idea, and can be done here by moving them as local variables to the only place they're used, as with <code>infile</code> and/or pass them as parameters.</p>

<h2>Use <code>constexpr</code> for values that could be computed at compile time</h2>

<p>The values of <code>PI</code> and <code>EPS</code> could be declared <code>constexpr</code> or probably better would be <code>static constexpr</code>.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#con5-use-constexpr-for-values-that-can-be-computed-at-compile-time" rel="nofollow noreferrer">Con.5</a>.</p>

<h2>Be careful with signed and unsigned</h2>

<p>In several places, the code compares an <code>int</code> <code>i</code> with <code>tokens[j].size()</code> or similar.  However, <code>tokens[j].size()</code> is unsigned and <code>i</code> is signed.  For consistency, it would be better to declare <code>i</code> as <code>std::size_t</code> which is the type returned by <code>size()</code>.  </p>

<h2>Eliminate unused parameters</h2>

<p>The <code>rowSecond</code> parameter to <code>matrixMultiplication</code> is unused and should be deleted.</p>

<h2>Don't define a default constructor that only initializes data members</h2>

<p>The <code>Vector</code> constructor is currently this:</p>

<pre><code>Vector() {
x = x;
y = y;
z = z;
};
</code></pre>

<p>Not only does this not make sense, better would be to use in-class member initializers and delete this constructor in favor of <code>Vector() = default;</code>.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-default" rel="nofollow noreferrer">C.45</a></p>

<h2>Consider the user</h2>

<p>Instead of having hardcoded filenames, it might be nice to allow the user to control the name and location of the input and output files.  For this, it would make sense to use a command line argument and then pass the filename to the functions as needed.</p>

<h2>Use better names</h2>

<p>I would expect a function named <code>readFromFile</code> to read... something... from a file.  No more and no less.  However, what this function actually does is to read the file <em>and</em> perform some operation on that data <em>and</em> write that resulting data to yet another file.  I'd suggest breaking each of those into its own function and then naming each piece more appropriately.</p>

<h2>Fix the bug</h2>

<p>The <code>dotProduct()</code> function includes these lines:</p>

<pre><code>float dotProduct(const Vector &amp;vec1, const Vector &amp;vec2) {
    float res;
    res += vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;
</code></pre>

<p>The problem is that by using <code>+=</code> the code is using an uninitialized variable.  Better would be to use <code>=</code>.</p>

<h2>Eliminate "magic numbers"</h2>

<p>This code has a number of inscrutable "magic numbers," that is, unnamed constants such as 10, 100, 200, etc.  Generally it's better to avoid that and give such constants meaningful names.  That way, if anything ever needs to be changed, you won't have to go hunting through the code for all instances of "10" and then trying to determine if this <em>particular</em> 10 is relevant to the desired change or if it is some other constant that happens to have the same value.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>The various <code>printMatrix</code> routines are exactly alike except for the file they write to.  That is a strong indicator they should instead be a single function with the <code>ostream</code> passed as a parameter.  When you consolidate them, you will see that there's a subtle difference in the way one of them prints to the console.</p>

<h2>Don't leak memory</h2>

<p>At the moment, the several calls to <code>new</code> have no corresponding calls to <code>delete</code> which is a memory leak.  That should be fixed. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c31-all-resources-acquired-by-a-class-must-be-released-by-the-classs-destructor" rel="nofollow noreferrer">C.31</a></p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Define operations using operators</h2>

<p>The code includes functions like this:</p>

<pre><code>Vector add(Vector v1, Vector v2) {
    Vector ret(0, 0, 0);
    ret.x = v1.x + v2.x;
    ret.y = v1.y + v2.y;
    ret.z = v1.z + v2.z;
    return ret;
}
</code></pre>

<p>This makes more sense to me expressed as an operator member function of <code>Vector</code>.  First define <code>operator+=</code>:</p>

<pre><code>Vector &amp;operator+=(const Vector&amp; other) {
    x += other.x;
    y += other.y;
    z += other.z;
    return *this;
}
</code></pre>

<p>Then define a free standing functions using that function:</p>

<pre><code>Vector operator+(Vector a, const Vector&amp; b) {
    return a += b;
}
</code></pre>

<p>Now instead of this:</p>

<pre><code>Vector temp4 = add(temp1, temp3);
</code></pre>

<p>We can write this:</p>

<pre><code>auto temp4 = temp1 + temp3;
</code></pre>

<p>And instead of </p>

<pre><code>l = subtract(look, eye);    //l = look - eye
</code></pre>

<p>We can simply write:</p>

<pre><code>l = look - eye;
</code></pre>

<p>and render the comment completely redundant because the <em>code itself</em> is clear.  This also allows considerable simplification elsewhere.  For example the <code>rotateRod</code> function becomes this rather than the current 33 line function:</p>

<pre><code>Vector rotateRod(Vector x, Vector rotateAxis, float rotateAngle) {
    auto ra{rotateAxis};
    rotateAxis *= rotateAxis.dotProduct(x) * (1 - Cos(rotateAngle)); 
    return x*Cos(rotateAngle) + ra.cross(x)*Sin(rotateAngle) + rotateAxis;
}
</code></pre>

<h2>Make better use of objects</h2>

<p>Everywhere that something like <code>(float (*matrix)[10])</code> occurs is probably much better expressed as an object.  I'd also suggest minimally using a <code>std::matrix&lt;float, 10&gt;</code> rather than a raw array because the latter type is quite stupid and doesn't even know its own size.</p>
    </div>