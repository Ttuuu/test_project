<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your solution is a good start for a first bigger programming task. I'd probably structure the program a little bit differently but I'm not sure if this required or even good. For the size of the problem the layout really is appropriate (meaning exactly right).</p>

<p>I've found some stuff nevertheless. Here you go (simply search for the code parts):</p>

<p><strong>Bugs</strong></p>

<ul>
<li>in <code>if((cave[pos].wump &amp;&amp; !(cave[pos].bat)) || (cave[pos].wump &amp;&amp; !(cave[pos].pit)))
</code> the expression <code>cave[pos].wump</code> is always false, hence the line <code>vacant.push_back(pos);</code> is never run</li>
<li>restoring the vacant rooms in <code>Map::Init()</code> does not consider non-player entities. If the player spawns by accident next to wumpus, the room will be considered vacant by the game.</li>
<li>wrong input in <code>Map::input()</code> will lead to shoot being called. The <code>input</code> method should only return if the input is indeed acceptable. Ideally <code>input</code> returns some abstract command structure or is renamed to something like <code>handleInput()</code>.</li>
</ul>

<p><strong>Possible Bugs</strong></p>

<ul>
<li>in <code>for(; !(cave[pos].wump); ++pos);</code> add a check for the end of <code>cave</code></li>
<li><code>Map::MovePlayer()</code> and <code>Map::shoot()</code> contain code paths that may not always return a value </li>
</ul>

<p><strong>Style Improvements</strong></p>

<ul>
<li>use same name for a member in all locations, e.g. <code>setCurrRoom()</code> and <code>room()</code>. Note that <code>room()</code> offers enough information and is much shorter than <code>currRoom</code></li>
<li>use <code>ROOMS</code> only for initialization of the cave, stick to <code>cave.size()</code> in all other places</li>
<li>it makes sense to somehow mark the member variables to make them distinguishable from local variables and globals, prepending <code>m_</code> to the variable name is common: <code>vacant</code> -&gt; <code>m_vacant</code>.</li>
<li>add more whitespace: newlines and spaces can be used to show parts of a function that belong logically together</li>
<li>You can reduce <code>!(cave[pos].wump)</code> to <code>!cave[pos].wump</code>.</li>
</ul>

<p><strong>General Hints</strong></p>

<ul>
<li>you can hide debugging code behind a compiler switch:</li>
</ul>

<pre><code>#ifdef DEBUG
game.printState();
#endif
</code></pre>

<p>If you compile with <code>-DDEBUG</code> you will generate debug output</p>
    </div>