<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<p>It is considered good practice to terminate all statements with a semicolon, even though they are optional.</p>

<p>Follow <code>namingConventions</code> in JavaScript.</p>

<p>The function should have a more descriptive name than <code>process()</code>.  It could take the desired sum as a parameter.</p>

<h2>Algorithm</h2>

<p>Your function, which relies on brute force, is an inefficient \$O(n^2)\$, bordering on \$O(n^3)\$.  It's \$O(n^2)\$ because <code>i</code> takes on \$n\$ values, and for each <code>i</code>, <code>j</code> takes on \$n\$ values.  The <code>result.indexOf(…)</code> operations could also be \$O(n)\$ in the worst case, so the overall complexity could be as bad as \$O(n^3)\$.</p>

<p>One simple optimization would be to take advantage of symmetry to cut the work in half:</p>

<pre><code>for (var i = 0; i &lt; data.length; i++) {
    a = data[i];
    for (var j = 0; j &lt; i; j++) {
        …
    }
}
</code></pre>

<p>Another simplification would be to avoid stringifying and parsing the number pairs:</p>

<pre><code>result.push([a, b]);
</code></pre>

<p>One possible smart solution would be to sort the data, and have <code>i</code> increasing from 0, and <code>j</code> decreasing from the end, until they meet in the middle.</p>

<pre><code>function pairsWithSum(sum, data) {
    data = data.slice(0);
    data.sort(function(a, b) { return a - b; });

    var pairs = [];
    var i = 0, j = data.length - 1;
    while (i &lt; j &amp;&amp; i &lt; data.length &amp;&amp; j &gt;= 0) {
        var a = data[i], b = data[j];

        if (a + b == sum) {
            pairs.push([a, b]);
            while (i &lt; data.length &amp;&amp; data[i] == a) { i++; }
            while (j &gt;= 0 &amp;&amp; data[j] == b) { j--; }
        } else if (a + b &lt; sum) {
            while (i &lt; data.length &amp;&amp; data[i++] == a);
        } else {
            while (j &gt;= 0 &amp;&amp; data[j--] == b);
        }
    }
    return pairs;
}
</code></pre>
    </div>