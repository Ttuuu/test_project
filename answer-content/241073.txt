<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some people have already pointed out important points, particularly the use of <code>Decimal</code> for money values. </p>

<p>Higher-level stuff:</p>

<ul>
<li>You have some white-space inconsistencies. </li>
<li>Having the basket start with a batch of possibly applicable discounts doesn't make much sense. The basket can more-or-less just be a list until the time comes to calculate discounts. Hopefully this ends up being less verbose.</li>
<li>In general, a little less verbosity would be nice. <code>Book.Equals</code> for example could be single <code>and</code> block. </li>
<li>Instead of having <code>Basket.AddBook</code>, I would prefer to construct the baskets with books already in them. In the simplest case, <code>public Basket(params IEnumerable&lt;Book&gt; book_lists){...}</code> would allow a lot of flexibility including merging existing baskets. In general, one usually can and should avoid changing the state of objects. </li>
<li>While building a dictionary in which to look up discount strategies is efficient, it's not what I would want to see in production code; it's too limiting. <strong>I've worked with a couple different "discount" paradigms, and it's a good idea to build in flexibility early on.</strong> <em>If</em> you get it right, then it's simpler in the long run than adding complexity as you go. Some common patterns:

<ul>
<li>A discount object should be able to inspect the basket and report if it can be applied.<br>
<code>public bool Applicable(Basket basket){...}</code></li>
<li>Can multiple discounts apply? Will this ever depend on <em>which</em> discounts <em>might</em> apply? Have a system for figuring this out.</li>
<li>Discount objects should have a property (often just an int, whatever) to denote the order in which they should apply (for example <code>0.9 * (x - 5)</code> is different from <code>(0.9 * x) - 5</code>).</li>
</ul></li>
</ul>
    </div>