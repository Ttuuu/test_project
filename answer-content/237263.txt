<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some issues with your class, but I don't think that they are so specific to implementing a strategy pattern.</p>

<pre><code>addToPage() {
    this.statement = document.createElement("p")
    this.statement.innerHTML=this.flying.fly()
    document.body.append(this.statement)
}
</code></pre>

<p>This assumes there is a global document variable, and that <code>statement</code> is part of the abilities object. If such a method is present, I would expect <code>document</code> to be a parameter of the method and <code>statement</code> to be a local variable. But even that doesn't seem right because you would be mixing representation (a paragraph <code>"p"</code>) and a data class.</p>

<pre><code>//interface for behaviors
class FlyBehavior {
    fly() {
        null
    }
 }
</code></pre>

<p>Now that doesn't seem right. If you have JS ducktyping then you don't need this class. Furthermore, specifying <code>null</code> is just asking for null pointer exceptions at a later stage.</p>

<pre><code>this.abilities = new DuckAbilities()
</code></pre>

<p>OK, so now we have <code>DuckAbilities</code> object but without a valid state, just <code>null</code>, which we then adjust in the next call. There seem to be two ways of resolving this issue:</p>

<ol>
<li>having the fying behavior as parameter to the <code>DuckAbilities</code> constructor;</li>
<li>removing the <code>DuckAbilities</code> altogether and just assigning the various flybehaviors to a field.</li>
</ol>

<hr>

<p>So when we're using classes anyway, lets implement it using those.</p>

<p>I've created an "abstract" class Duck because we require inheritance there. I don't like to create an interface for the strategies because JavaScripts duck-typing should be sufficient.</p>

<pre><code>'use strict'

class Duck { // this is the context
    constructor(flyAbility) {
        // ES2015 only, avoid instantiation of Duck directly
        // if (new.target === Abstract) {
        //  throw new TypeError("Cannot construct Abstract instances directly");
        // }

        this.flyAbility = flyAbility;
    }

    // this is the operation, returning the flyBehavior as a string
    showFlyBehavior() {
        return "This duck " + this.flyAbility.flyBehavior();
    }
}

// Strategy interface is missing due to JS ducktyping

// Strategy #1 
class DoesFly {
    // with algorithm #1
    flyBehavior() {
        return "flies";
    }
}

// Strategy #2
class DoesNotFly {
    // with algorithm #2
    flyBehavior() {
        return "doesn't fly";
    }
}

// Context #1
class Mallard extends Duck {
    constructor() {
        super(new DoesFly());
    }
}

// Context #2
class Rubber extends Duck {
    constructor() {
        super(new DoesNotFly());
    }
}

let duck = new Mallard();
console.log(duck.showFlyBehavior());

duck = new Rubber();
console.log(duck.showFlyBehavior());
</code></pre>

<p>Sorry about using NodeJS, but in principle only <code>console.log</code> is NodeJS specific ... I hope.</p>
    </div>