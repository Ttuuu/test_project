<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Given that (from your comments) there is one and only one input which would cause overflow, I propose the following check at the beginning of the function:</p>

<pre><code>int check_convergence(uint128_t n)
{
        const uint128_t n0 = n;
        int e;

        if (n == UINT128_MAX)
                return  1;

        do {
                ...
        } while (true);
}
</code></pre>

<hr>

<p>I also added <code>const</code> to <code>n0</code>, given that it's constant through all the function.</p>

<hr>

<pre><code>if (n &lt; UINT128_C(1) &lt;&lt; 64 &amp;&amp; e &lt; LUT_SIZE64)
        return  0;
</code></pre>

<p>That can be rewritten as:</p>

<pre><code>if (n &lt;= UINT64_MAX &amp;&amp; e &lt; LUT_SIZE64)
        return  0;
</code></pre>

<hr>

<p>Although maybe unneeded, I prefer to always parenthesize macros that evaluate to a value, just in case:</p>

<pre><code>#define LUT_SIZE128  (81)
</code></pre>
    </div>