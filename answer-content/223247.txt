<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should be implementing Runnable, not extending Thread. You are not creating a new generally-useful extension of thread that can be used as an API class by multiple clients. You just want a normal thread to run some code. </p>

<p>Classes not designed to be extended should be marked <code>final</code>. Variables not designed to be reassigned should be marked final.</p>

<p>None of <code>stream</code>, <code>serverSocket</code>, and <code>clientSocket</code> should be visible outside your class. Only expose methods when necessary. Only expose member variables when really, really necessary.</p>

<p>In idiomatic Java, underscores are only used in constants. In other cases, they should not be used.</p>

<p>Prefer primitives to objects where it's reasonable to do so. There's no reason to give <code>loop_count</code> the overhead of being an object.</p>

<p><code>loop_count</code> is never read and can be removed.</p>

<p><code>a</code> is a poor variable name. Variable names should clearly indicate the value they're holding. <code>serverPort</code> would be highly preferable. This change would make your comment noise, and it could be removed.</p>

<p>The two log messages could be joined. Also, you're logging the port as being open before it's open.</p>

<p>In idiomatic java, ALL_CAPS are reserved for constants. Other variables should begin with a lowercase letter, even if they are acronyms. <code>ip</code> is preferable to <code>IP</code>.</p>

<p>If you have an error opening the socket, your code busy-loops forever inside the <code>while (run)</code> block until something interrupts it. If the server can't be started, the <code>run</code> method should return, since your code isn't trying to recover from that failure. This will also let you remove the <code>while (serverSocket != null)</code> line, since it will never be null.</p>

<p>When creating the server socket, you're consuming the stack trace. You should always log stack trace. It would also be nice if your message logged the ip and port that could not be opened.</p>

<p>If this code is interrupted or an exception occurs, your open resources will not be closed. Prefer the use of <code>try-with-resources</code> blocks to ensure resources are closed.</p>

<p>Logging the start of every time through the loop is going to result in a lot of meaningless log messages. </p>

<p>The first <code>try</code> block inside the <code>while (run)</code> block does nothing and can be removed.</p>

<p>You dereference <code>clientSocket</code> immediately before you check if it's null. If it could ever be null (it can't), you'd get a <code>NullPointerException</code> before the null check.</p>

<p>Variables should be declared to minimize their scope where possible. This makes code more readable and allows for more aggressive reclamation of memory.</p>

<p><code>10</code> is a magic number in your code. Declare a constant whose name explains what the logical meaning of <code>10</code> is and use that in your code, so a reader understands the intent, not just that a <code>10</code> is going over the wire.</p>

<p>It is a bad practice to catch <code>Exception</code>. You are inadvertently handling any checked or unchecked exceptions that may be added in the future. If you don't know what to do with a specific exception, let it percolate up the stack. Likewise, catching <code>RuntimeException</code> is generally ill advised.</p>

<p>You have a <code>try</code> block that's always throwing an exception. That should obviously be removed.</p>

<p>The stream instance variable is never used, but then closed in the <code>closeServer</code> method. You create stream instances inside <code>run</code> and then don't close them.</p>

<p>The proper term is "millis", not "mills".</p>

<p>It would be nice to extract some of your code into a separate method so <code>run</code> looks less like a giant <code>&gt;</code>.</p>

<p>With proper use of <code>try-with-resources</code> blocks, the <code>closeServer</code> method is not required.</p>

<p><code>abort</code> should not be firing <code>interrupt()</code>. Include checks inside your <code>run</code> method to see if the thread has been interrupted, and halt gracefully if it has.</p>

<p>If you were to make all these changes, your code might look more like:</p>

<pre><code>public class TcpServer implements Runnable {

    private static final String TAG = "TcpServerThread";
    private static final byte RECEIVED_MESSAGE_PART = 10;

    private boolean running = true;


    public TcpServer() {
        super();
    }


    @Override
    public void run() {
        final int port = 1025;
        final String ip = MiscUtilities.getIpAccess();

        try (final ServerSocket serverSocket = new ServerSocket(port)) {
            Log.d(TAG, "Server started, accepting connections to " + ip + ":" + port);

            while (running &amp;&amp; !Thread.currentThread().isInterrupted()) {
                final long started = System.currentTimeMillis();
                try (final Socket clientSocket = serverSocket.accept()) {
                    clientSocket.setKeepAlive(true);

                    final long established = (System.currentTimeMillis() - started);
                    Log.d(TAG, "[Connection made at]:" + clientSocket.getRemoteSocketAddress() + " in mills :" + established);

                    this.handleData(clientSocket);

                } catch (final IOException e) {
                    Log.d(TAG, "Failure handling inbound connection to " + ip + ":" + port, e);
                    continue;
                }
            }
        } catch (final IOException e) {
            Log.d(TAG, "Unable to open socket " + ip + ":" + port, e);
            return;
        }
    }

    public void abort() {
        this.running = false;
    }

    private void handleData(final Socket clientSocket) throws IOException {
        try (final DataInputStream stream = new DataInputStream(clientSocket.getInputStream());
                final DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream())) {

            final byte[] inBytes = new byte[200];
            int input = 0;
            while ((input = stream.read(inBytes)) != -1) {
                Log.d(TAG, "Size read in bytes: " + input);
                Log.d(TAG, "Data is: " + MiscUtilities.bytesToHex(inBytes));

                outToServer.writeByte(RECEIVED_MESSAGE_PART);
            }
        }

    }

}
</code></pre>
    </div>