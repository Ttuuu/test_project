<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your modified code is better, but you can simplify this method even more. If you don't return anything from a function in a promise, it will be resolved with no value. There's no need to do <code>return Promise.resolve()</code>.</p>

<p><code>.catch(error =&gt; next(error))</code> is equivalent to <code>.catch(next)</code>.</p>

<p><a href="https://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="nofollow noreferrer">Code Tells You How, Comments Tell You Why</a>. Don't clutter your code with comments that tell you nothing more than the code they are describing. "If the request contains a file, generate a file name for it." tells me nothing more than <code>if (req.file) req.body.logoImage = generateFileName(req.file.mimetype)</code></p>

<p>Depending on your framework, async functions might be able to simplify this logic. If you are using Express, this won't apply. However, if you are using a framework which lets you return a promise in middleware, async functions are the way to go. If <code>next(error)</code> is equivalent to returning a rejected promise, you can just do this:</p>

<pre class="lang-js prettyprint-override"><code>// Save a new job to the database.
exports.save = async function(req, res) {
  if (req.file) {
    req.body.logoImage = generateFileName(req.file.mimetype)
  }

  const job = await Job.create(req.body)
  if (job.logoImage) {
    await moveFile(req.file.buffer, job.logoImage)
  }

  res.json({ status: 'Uploaded job successfully.' })
}
</code></pre>

<p>If <code>Job.create</code> doesn't use <code>req.body.logoImage</code> and <code>generateFileName</code> never returns a falsy value, you can further simplify this logic by combining the if statements.</p>

<pre class="lang-js prettyprint-override"><code>// Save a new job to the database.
exports.save = async function(req, res) {
  const job = await Job.create(req.body)
  if (req.file) {
    await moveFile(req.file.buffer, generateFileName(req.file.mimetype))
  }

  res.json({ status: 'Uploaded job successfully.' })
}
</code></pre>

<p>If async functions won't work for your use case (I wouldn't want to make the exported function return a promise if it is left dangling), I would go with this logic (assuming <code>generateFileName</code> can return a falsy value):</p>

<pre class="lang-js prettyprint-override"><code>// Save a new job to the database.
exports.save = function(req, res, next) {
  if (req.file) req.body.logoImage = generateFileName(req.file.mimetype)

  Job.create(req.body)
    .then(job =&gt; {
      if (job.logoImage) {
        return moveFile(req.file.buffer, job.logoImage)
      }
    })
    .then(() =&gt; {
      res.json({ status: 'Uploaded job successfully.' })
    })
    .catch(next)
}
</code></pre>
    </div>