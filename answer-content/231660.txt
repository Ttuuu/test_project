<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Preface: A word about competitive programming</h1>

<blockquote>
  <p>Now for the code review part. What could I do better? Is this code
  somewhat similar in what would be used in a professional environment?</p>
  
  <p>(I know there is some hard coding to this since it's only being used
  to a very specific problem and that instead of having 2 hardcoded
  players prince and princess a more general approach would be to have a
  vector of players etc. I'm asking about the general code
  design/organization overall).</p>
</blockquote>

<p>Actually, this is real problem.  Competitive programming sites fail to teach you skills you need to do a real world project.  In general, <a href="https://stackoverflow.com/users/560648">learning C++ from "competitive programming" is like learning English from a rap contest.</a>  I suggest that you start your own scalable project and go through the design process.  That will be pretty fun :)</p>

<p>In fact, I'd go ahead and say that the program is created to solve a very specific problem and that the generic code review method hardly applies to it.</p>

<p>From comment:</p>

<blockquote>
  <p>Do you think it's good to continue solving these problems, or by being
  focused on getting a good level of C++ I should focus on something
  else?</p>
</blockquote>

<p>It's fine to do some CP occasionally (for fun, maybe), but that shouldn't be your primary focus.  Remember that doing CP does not help you learn real programming a whole lot.  Instead, do some relatively large-scale, long-term projects to learn more about maintaining code.  And you are always free to post on Code Review.  <a href="https://stackoverflow.com/q/388242">The Definitive C++ Book Guide and List</a> may also be helpful to you.</p>

<h1>Use consistent spacing</h1>

<p>This is my first impression: the spacing is inconsistent and follows an unpopular style.  Here is the (in general) standard style:</p>

<ul>
<li><p>Template declarations should look like this:</p>

<pre><code>template &lt;typename T&gt;
class C;
</code></pre>

<p>not</p>

<pre><code>template&lt;typename T&gt; class C;
</code></pre></li>
<li><p>Member declarations should look like this:</p>

<pre><code>std::array&lt;int, N&gt; arr;
</code></pre>

<p>not</p>

<pre><code>std::array&lt;int,N&gt;arr;
</code></pre></li>
<li><p>Loops should look like this:</p>

<pre><code>for (auto&amp; x : y) {
</code></pre>

<p>not</p>

<pre><code>for(auto&amp; x : y){
</code></pre></li>
<li><p>Constructors should use the injected class name:</p>

<pre><code>template &lt;class T&gt;
struct S {
    S() = default;
};
</code></pre>

<p>not</p>

<pre><code>    S&lt;T&gt;() = default;        
</code></pre></li>
<li><p>If chains should be lain out in this way:</p>

<pre><code>if (...) {
    /* ... */;
} else if (...) {
    /* ... */;
}
</code></pre>

<p>not</p>

<pre><code>if(...)
{
    /* ... */;
} else
if(...)
{
    /* ... */;
}
</code></pre></li>
</ul>

<h1>A walk through</h1>

<p>In this section, I select some interesting snippets to comment on.</p>

<blockquote>
<pre><code>#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;array&gt;
#include &lt;algorithm&gt;
#include &lt;numeric&gt;
#include &lt;utility&gt;
</code></pre>
</blockquote>

<p>Please sort the include directives according to alphabetical order:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;sstream&gt;
#include &lt;utility&gt;
</code></pre>

<p>This helps navigation.</p>

<blockquote>
<pre><code>//used as flags
enum JolloPlayer
{
    PRINCE = 100,
    PRINCESS = 101,
    NONE = 102
};
</code></pre>
</blockquote>

<p>The magic numbers <code>100</code>, <code>101</code>, and <code>102</code> are confusing.  Why?  At least leave a comment.  Also, the enum should probably be named <code>Player_ID</code>.</p>

<blockquote>
<pre><code>template&lt;int C&gt; struct Player
{
    std::array&lt;int,C&gt;cards;
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is, Player&amp; p)
    {
        for(auto&amp; i : p.cards){
            is &gt;&gt; i;
        }
        return is;
    }
    int amountOfCards = C;
};
</code></pre>
</blockquote>

<p><code>int</code> appears for two distinct purposes in this code: card count and card ID.  Type aliases make this clearer:</p>

<pre><code>using Card_ID = int;
using Card_count = std::size_t; // counting should be done with std::size_t
</code></pre>

<p>Then, I'm not sure this class is even necessary.  Keep it simple:</p>

<pre><code>template &lt;Card_count N&gt;
using Cards = std::array&lt;Card_ID, N&gt;;

template &lt;Card_count N&gt;
void read_cards(std::istream&amp; is, Cards&amp; cards)
{
    for (auto&amp; card : cards)
        is &gt;&gt; card;
}
</code></pre>

<blockquote>
<pre><code>template&lt;unsigned int N&gt;
class Jollo
{
private:
    //amount of cards, not player number
    Player&lt;2&gt; prince;
    Player&lt;3&gt; princess;
    std::array&lt;int, N&gt; deck;
    const int roundsToWin {2};
public:
    Jollo&lt;N&gt;(){
        static_assert(N&gt;4, "Jollo: deck size must be higher than 4");
    }

    bool ReadCards();
    int GetPrinceMinimumWinningCard();
private:
    int GetNextAvailableCard(JolloPlayer ePlayer, int lastPlayedCard = 0); //gets next card and flips deck
};
</code></pre>
</blockquote>

<p>Now it's <code>unsigned int</code>.  That's inconsistent.  Use the aforementioned <code>Card_count</code> instead.</p>

<p><code>roundsToWin</code> should be <code>static constexpr</code>.</p>



<blockquote>
<pre><code>template&lt;unsigned int N&gt;int Jollo&lt;N&gt;::GetNextAvailableCard(JolloPlayer ePlayer, int lastPlayedCard)
{
    if(ePlayer == JolloPlayer::PRINCE)
    {
        for(int i{0}; i&lt;prince.amountOfCards; i++) {

            if(deck[prince.cards[i] - 1] != JolloPlayer::PRINCE){
               deck[prince.cards[i] - 1] =  JolloPlayer::PRINCE;
               return prince.cards[i];
            }
        }
    } else
    if(ePlayer == JolloPlayer::PRINCESS)
    {
        for(int i{0}; i&lt;princess.amountOfCards; i++) {
            if(deck[princess.cards[i] - 1] != JolloPlayer::PRINCESS &amp;&amp; deck[princess.cards[i] - 1] &gt; lastPlayedCard) {
               deck[princess.cards[i] - 1] =  JolloPlayer::PRINCESS;
               return princess.cards[i];
            }
        }
        //no card was higher, return lowest available card
        for(int i{0}; i&lt;princess.amountOfCards; i++) {
            if(deck[princess.cards[i] - 1] != JolloPlayer::PRINCESS) {
               deck[princess.cards[i] - 1] =  JolloPlayer::PRINCESS;
               return princess.cards[i];
            }
        }
    }

    //ePlayer == NONE
    for(unsigned int i{0}; i&lt;N; i++)
    {
        if(deck[i] != JolloPlayer::PRINCE &amp;&amp; deck[i] != JolloPlayer::PRINCESS &amp;&amp; deck[i] &gt; lastPlayedCard ) {
            return deck[i];
        }
    }
    return -1; //if the game is tied but there is no higher card available. e.g 50 49 51 48 52
}
</code></pre>
</blockquote>

<ul>
<li><p>Use shorter lines.  A horizontal scroll would not have shown up if you kept each line less than ~80 characters.</p></li>
<li><p>Make functions smaller.  In general, a vertical scroll should not be needed to view the code of a function.</p></li>
<li><p><code>switch</code> is appropriate here.</p></li>
<li><p>Traversing should be done with a range-based for loop, not with an index.  In particular, neither <code>int</code> nor <code>unsigned int</code> is suitable for array indexing.</p></li>
<li><p>Use <code>++i</code>, not <code>i++</code>.</p></li>
</ul>

<blockquote>
<pre><code>int main()
{
    Jollo&lt;52&gt; JolloInstance;
    while(true)
    {
        if(!JolloInstance.ReadCards()) {
            break;
        }
        std::cout &lt;&lt; JolloInstance.GetPrinceMinimumWinningCard() &lt;&lt; "\n";
    }
    return 0;
}
</code></pre>
</blockquote>

<p>This can be simpler:</p>

<pre><code>for (Jollo&lt;52&gt; game; game.ReadCards();)
    std::cout &lt;&lt; game.GetPrinceMinimumWinningCard() &lt;&lt; '\n';
</code></pre>

<p>(Note that <code>'\n'</code> is used instead of <code>"\n"</code>.)</p>
    </div>