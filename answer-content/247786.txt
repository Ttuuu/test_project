<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suspect there is more structure to your data than you are reporting.</p>
<h1>Micro-optimizations</h1>
<p>At the detail level, is it possible that there is a structure other than "delimited by :, -, _" to the names? Could the first field be always 2 characters? Are any of the subfields constant length? Do the delimiters always appear in a specific order?</p>
<p>If you have subfields of a constant width, you can use a slice instead of a regex to extract them. It's a <em>lot</em> faster to say</p>
<pre><code>f1 = name[0:2] 
f2 = name[3:6]
f3 = name[7:11]
</code></pre>
<p>rather than</p>
<pre><code>f = re.split(r'[-:_]', name)
</code></pre>
<p>Alternatively, some fields may be variable length, but if you can count on the sequence of delimiters you might be able to do something like this using <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str%20partition#str.partition" rel="nofollow noreferrer"><code>str.partition</code></a>:</p>
<pre><code>f1, _, rest = name.partition(':')
f2, _, rest = rest.partition('-')
f3, _, rest = rest.partition('_')
</code></pre>
<p>Using "string methods" instead of "regex methods" is frequently (but <strong>not</strong> always) faster.</p>
<h1>Macro-optimizations</h1>
<p>Can you "step back" from the problem and find a higher-level approach that would give better performance?</p>
<p>In particular, I would suggest looking for a function or method in the <code>nds2</code> interface that allows you to extract some of the prefix data without pulling all the names.</p>
<h2>Caching</h2>
<p>If you can't get the data from the API, you should first submit a bug/enhancement/issue to the API guys explaining what you are doing and what support you <em>wish</em> you could get from them. They might be happy to add a call that would solve your problem for you.</p>
<p>If not, consider building a local data structure <strong>not</strong> part of the Qt tree, and caching it.</p>
<p>For example, you have a tree of prefixes. Convert that into a tree of dictionaries, and serialize it. You could create a user-local cache using <code>pickle</code> or if the data only rarely changes you might just create a <code>json</code> or <code>toml</code> file and ship it with your package.</p>
<p>If you could get the first three levels of the tree stored as json, and if new high-level identifiers only appeared once a year when the budget expanded, you could do your updates manually.</p>
<p>Alternatively, you might be able to perform a query, or have the API guys add a query, that let you ask "are there any channel objects that don't match these first3 tree prefixes?"</p>
<h2>Late Querying</h2>
<p>Especially in combination with caching, or a pre-built tree, above, @DavidG's suggestion to only build the parts of the tree you need makes <em>huge</em> amounts of sense. Why transfer 2+ million records when you only need to list 100?</p>
<p>I couldn't find a <code>nds2</code> package on pypi, but I did see one called <code>nds2utils</code>. That package appears to support some kind of globbing for channel names, so I assume you can do a similar thing?</p>
<p>Just query for <code>f"{tree0}:{tree1}-{tree2}*"</code> and you can get the values you need for the subtree below tree1/tree2/tree3. Hopefully that's something you can get fast enough to keep the interface snappy.</p>
    </div>