<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>sub rsp, 0x10 ; Allocate 2 bytes on the stack
</code></pre>
</blockquote>

<p>The comment is not correct! <code>0x10</code> is an hexadecimal number equal to 16 in decimal.</p>

<blockquote>
<pre><code>cmp rdi, 0 ; if == 0
jne power_init
</code></pre>
</blockquote>

<p>If you need to compare with zero, it's usually better to <code>test</code> the register to itself:</p>

<pre><code>test rdi, rdi
jnz  power_init
</code></pre>

<blockquote>
<pre><code>dec edi
cmp edi, 0
je power_end
</code></pre>
</blockquote>

<p>The <code>cmp edi, 0</code> instruction is redundant since the <code>dec edi</code> instruction already provides the necessary zero condition status.</p>

<hr>

<blockquote>
  <p>For example, by executing the functions I make some changes in the registers and I don't know if I have to revert them to their original value a the end with push and pop.</p>
</blockquote>

<p>If <em>you</em> write these functions and <em>your</em> program uses these functions, then it's up to you to decide if you deem it useful to preserve any or all of the registers. If someone else will be using your functions your comments should make it absolutely clear what registers get clobbered!</p>

<hr>

<p>The recursive factorial function can do without the prologue/epilogue code and is a bit complicated.</p>

<pre><code>; IN (esi) OUT (eax) MOD ()
; Calculate eax = esi!
Factorial:
    mov  eax, 1
    cmp  esi, eax
    je   .return       ; esi was 1 -&gt; eax = 1
    push esi           ; (1)
    dec  esi
    call Factorial     ; -&gt; EAX
    pop  esi           ; (1)
    imul eax, esi
.return:
    ret
</code></pre>

<p>The power function can do without the prologue/epilogue code. There's no need to put <code>ESI</code> on the stack. If you want you could preserve the <code>EDI</code> register, but that's up to you to decide.</p>

<pre><code>; IN (esi,edi) OUT (eax) MOD (edi)
; Calculate eax = esi ^ edi
Power:
                      ; push edi
    mov  eax, 1
    sub  edi, eax
    jb   .return      ; edi was 0 -&gt; eax = esi^0 = 1
    mov  eax, esi
    jz   .return      ; edi was 1 -&gt; eax = esi^1 = esi
.more:
    imul eax, esi
    dec  edi
    jnz  .more
.return
                      ; pop edi
    ret
</code></pre>
    </div>