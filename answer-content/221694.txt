<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try to avoid global variables.  For example <code>words</code> doesn't need to be a global.  Instead, return a list of words from <code>fill_list()</code>, directly in the <code>play()</code> method:</p>

<pre><code>def fill_list():
    words = []
    f = open('words.txt', 'r')
    for line in f:
        if len(line.strip()) &gt; 3:
             words.append(line.strip())
    f.close()
    return words

...

def play():
    words = fill_list()
    ...
</code></pre>

<hr>

<p>Use a resource manager (aka a <code>with</code> statement) for opening closable resources.  That takes the burden of calling <code>.close()</code> off of you, and ensures the resource is properly closed even when exceptions occur:</p>

<pre><code>def fill_list():
    words = []
    with open('words.txt', 'r') as f:
        for line in f:
            if len(line.strip()) &gt; 3:
                words.append(line.strip())
    return words
</code></pre>

<hr>

<p>Avoid repeating the same calculations.  You <code>strip</code> the <code>line</code> to check its length, then you <code>strip</code> the <code>line</code> again to <code>append</code> it to <code>words</code>.  Save the stripped line in a variable.</p>

<pre><code>def fill_list():
    words = []
    with open('words.txt', 'r') as f:
        for line in f:
            stripped = line.strip()
            if len(stripped) &gt; 3:
                words.append(stripped)
    return words
</code></pre>

<hr>

<p>Use list comprehension.</p>

<pre><code>def reset(secret):
    word_guess = ['_' for letter in secret]
</code></pre>

<p>Or without the global variable:</p>

<pre><code>def reset(secret):
    return ['_' for letter in secret]

...

def play():
    ...
    word_guess = reset(secret_word)
    ...
</code></pre>

<hr>

<p>f-strings (<code>f''</code>) are a new feature as of Python 3.6.  You can use them to avoid <code>.format()</code> statements by embedding variables directly in the strings.  Eg)</p>

<pre><code>        print('Already guessed {}'.format(letter))
</code></pre>

<p>becomes</p>

<pre><code>        print(f'Already guessed {letter}')
</code></pre>

<hr>

<p>Don't repeat yourself.  You have <code>tries = 5</code> at the top of <code>play()</code> and the bottom if the user elects to play again.  If you moved <code>tries = 5</code> inside the <code>while True:</code> loop, at the top of the loop, you'd just need it once.</p>

<p>Similarly for <code>word_guess.clear()</code>, you should move it to the beginning of the loop ... except it can be removed entirely because of the <code>word_guess = reset(secret_word)</code> change above.</p>

<hr>

<h2>Bugs</h2>

<p>If <code>words.txt</code> contains uppercase characters, hyphens, apostrophe's, etc., the user will not be able to guess the word.  You should:</p>

<ul>
<li>normalize the <code>secret_word</code> by calling <code>.lower()</code> on it.</li>
<li><p>replace only letters with the underscore, leave hyphens, apostrophes, spaces alone.</p>

<pre><code>def reset(secret):
    return ['_' if letter.isalpha() else letter for letter in secret]
</code></pre></li>
</ul>
    </div>