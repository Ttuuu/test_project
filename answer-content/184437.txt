<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of issues I see here: </p>

<ul>
<li>What happens if an <code>Author</code> is saved, and then <code>Tomato</code> creation fails? Should the author record remain in the database? (In most cases the answer would be no)</li>
<li>How does a caller differentiate between a successful call and a failure to save an <code>Author</code>? In both cases, <code>call</code> returns an <code>Author</code> object. Would they have to always call <code>author.valid?</code> to check?</li>
</ul>

<blockquote>
  <p>Not raise an ActiveRecord if I can (slow). (Is this something that I am even supposed to think about or am I overkilling this?)</p>
</blockquote>

<ul>
<li>This seems like a micro-optimization to me, I'd use whatever makes code easier to read.</li>
</ul>

<p>The generic pattern to handle such cases is to use a <a href="https://en.wikipedia.org/wiki/Database_transaction" rel="nofollow noreferrer">transaction</a>. Transactions aren't specific to Rails, they are a feature that most databases offer. <code>ActiveRecord</code> <a href="http://api.rubyonrails.org/v5.0/classes/ActiveRecord/Transactions/ClassMethods.html" rel="nofollow noreferrer">supports transactions out of the box</a>.</p>

<p>In your case, this would be reduced to </p>

<pre><code>def create_author_and_tomato!
  ActiveRecord::Transaction.do
    Tomato.create!(tomato_params)
    Author.create!(author_params)
  end
end
</code></pre>

<p>If any of those steps fail, the transaction will be rolled back (i.e. all databases changes reversed) before an exception is raised. Also, the <code>Author</code> object is returned if everything succeeds. </p>

<p>If you need to perform a different action if saving one record fails, catch the <code>ActiveRecord::RecordInvalid</code> exception.</p>

<pre><code>begin
  author = create_author_and_tomato!

  # Use `author` for whatever
rescue ActiveRecord::RecordInvalid =&gt; e
  # `e.record` can be used to access the invalid object
end
</code></pre>
    </div>