<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It'd be easier to help if you explained the purpose of the algorithm. </p>

<p>However the obvious simplification is in the <code>get_unitary</code> function. You don't want that list, you only want to work with the values that come back from that operation.  So you can omit the creation and population of the list and make a <a href="https://jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/" rel="nofollow noreferrer">generator function</a> that just pops out the values sequentially using <code>yield</code></p>

<pre><code>def get_unitary(interest_list):
    for value in interest_list:
        yield (1 + value / 100)
</code></pre>

<p>Since <code>prod</code> just iterates the result, this produces the same output.  </p>

<p>In fact, the function itself is so simple that you can reduce it even further by turning the <code>get_unitary</code> function into a <a href="https://dbader.org/blog/python-generator-expressions" rel="nofollow noreferrer">generator expression</a>.  This is a different way of writing the version above.</p>

<pre><code>def get_unitary(interest_list):
    return (1 + value / 100  for value in interest_list)
</code></pre>

<p>But since that function is not actually consumed by any other code, you can just include it in the <code>prod()</code> function:</p>

<pre><code>def product(interest_list):
    unitary_generator = ( (1 + value / 100) for value in interest_list)
    p = 1
    for i in unitary_generator:
        p *= i
    return p

accrued = get_accrued(product(interest_list))
</code></pre>

<p>(I changed <code>prod</code> to <code>product</code> for clarity).</p>

<p>Without knowing the context, its hard to know if it makes sense to keep the <code>get_accrued</code> function on its own. Since it only consumes the result of <code>product()</code> you can fold them together, maybe including a comment about the algorithm.  So that will get you to this as a final form:</p>

<pre><code>interest_list = [0.5, 0.4, 0.3, 0.5, 0.7, 0.4, -0.2, -0.5, 0.3,
                 0.7, 0.9, 1.0]


def accrued_interest(interest_list):
    unitary_generator = ( (1 + value / 100) for value in interest_list)
    p = 1
    for i in unitary_generator:
        p *= i

    # if the logic behind this is not clear,
    # an comment here would be useful!
    return  (p - 1) * 100


accrued = accrued_interest(interest_list)
</code></pre>

<p>And of course you could also omit the generator altogether if your input data were just preformatted into numbers into the right range, such as [150, 140, 130... ] and so on</p>
    </div>