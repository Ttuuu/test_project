<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Drop the timezones</h2>
<p>As a learning exercise (dealing with timezones) I think you have picked the wrong application.</p>
<h2>Date time as string</h2>
<p>I suggest that you use a date time string with no time zone info rather than the UTC Unix tick. Standard format ISO 8601 using moment.js client side (browser ISO 8601 compliance is all over the place) to parse for the date picker, and format without timezone (offset zero "Z") for transport to the back-end</p>
<p>The back-end (.net) supports ISO 8601. Parse the booking date time string to store, then send as a date time string using <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#the-round-trip-o-o-format-specifier" rel="nofollow noreferrer">round-trip format specifier</a> eg <code>bookingDate.ToString("o");</code></p>
<h2>Why</h2>
<p>Handing multiple timezones on the client will be problematic at best. You will need a robust library for the timezones. moment.js is not up to the job, its successor <a href="https://moment.github.io/luxon/" rel="nofollow noreferrer"><code>Luxon</code></a> will provide better timezone management but that comes with a hefty data overhead.</p>
<p>All you want is a date time picker for the client to make a booking, for that I do not think the complication of juggling timezones is worth the effort when a local time string (location of hotel) will do the job.</p>
    </div>