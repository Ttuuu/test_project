<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>HeapPermutationSequence</code> computes all permutations of a given <em>array.</em> 
A common Swift idiom is not to operate on concrete types, but on <em>protocols.</em>
In this case, we need a mutable <em>collection</em> type which allows <em>efficient random access</em> to its elements. Therefore it makes sense to implement</p>

<pre><code>struct HeapPermutationSequence&lt;C&gt;: Sequence, IteratorProtocol
    where C: RandomAccessCollection &amp; MutableCollection
{
    init(elements: C) { ... }
    mutating func next() -&gt; C? { ... }
}
</code></pre>

<p>instead, which is then applicable to more types. A simple example is
an <em>array slice:</em></p>

<pre><code>let slice = [1, 2, 3, 4, 5].prefix(3)
for p in HeapPermutationSequence(elements: slice) {
    print(p)
}
</code></pre>

<p>There is not much that needs to be changed, only the index calculations 
become a bit verbose:</p>

<pre><code>struct HeapPermutationSequence&lt;C&gt;: Sequence, IteratorProtocol
    where C: RandomAccessCollection &amp; MutableCollection
{

    private var current: C
    private var c: [Int]
    private var i = 0
    private var firstIteration = true

    init(elements: C) {
        self.current = elements
        self.c = Array(repeating: 0, count: elements.count)
    }

    mutating func next() -&gt; C? {
        if firstIteration {
            firstIteration = false
        } else {
            while i &lt; c.count {
                if c[i] &lt; i {
                    if i % 2 == 0 {
                        current.swapAt(current.startIndex,
                                       current.index(current.startIndex, offsetBy: i))
                    } else {
                        current.swapAt(current.index(current.startIndex, offsetBy: c[i]),
                                       current.index(current.startIndex, offsetBy: i))
                    }
                    c[i] += 1
                    i = 0
                    break
                } else {
                    c[i] = 0
                    i += 1
                }
            }
        }
        return i &lt; c.count ? current : nil
    }
}
</code></pre>

<p>In my tests, the benchmark still runs in the same time with this implementation.</p>
    </div>