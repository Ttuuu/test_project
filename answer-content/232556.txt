<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, a suggestion on the interface: use <code>null</code> to represent no match rather than <code>-1</code>, since that makes it easier to force the caller to check for a no-solution case (i.e. if they try to use the unchecked return of this function as an index, a <code>-1</code> will only fail at runtime, whereas <code>null</code> will fail at transpile time).</p>

<pre><code>function arrayBalance(input: number[]): number | null {
</code></pre>

<p>In reading over the code I got confused by the variable names -- <code>mid</code> isn't actually a midpoint, it's the expected sum of each half.  Between all of the variables being declared with <code>let</code> rather than <code>const</code> and the uninformative names (why is there <code>sum</code> and <code>sum2</code>?), it's hard to even tell at a glance which values are being recalculated and which are constants. </p>

<p>Instead of taking six lines of code to find the "half-sum" that we want each side of the "split" to have, let's just do it in one (brevity is the soul of wit, and this kind of thing is exactly what the <code>reduce</code> function is for), and declare it as <code>const</code> since it's not going to change for the rest of the function once we've computed it:</p>

<pre><code>const halfSum = input.reduce((a, b) =&gt; a + b) / 2;
</code></pre>

<p>From here, all we need to do is find out how many array elements we need to total up to equal <code>halfSum</code>.</p>

<p>Here's how I might write the rest, signifying the running total of the "left" side of the array as <code>leftSum</code> and doing a simple <code>for</code> loop over the array indices:</p>

<pre><code>let leftSum = 0;
for (let i = 0; i &lt; input.length; i++)
{
    leftSum += input[i];
    if (leftSum == halfSum)
        return i;
}
return null;
</code></pre>

<p>As we iterate through <code>i</code> we build a sum of everything to the left of <code>i</code> (<code>leftSum</code>).  Our goal is to make <code>leftSum</code> equal <code>halfSum</code>.  If no solution is found within the loop we return <code>null</code>.</p>

<p>It's tempting to use inequality comparisons to try to optimize the no-solution case, but consider cases where the input array has lots of negative numbers distributed randomly!  <code>halfSum</code> could be negative or zero, and <code>leftSum</code> could go up and then down and then up and then down again as you increment <code>i</code>, so unless you've gone through the entire array you can't ever be certain that a solution does not exist.</p>

<p>Note also that it's possible for there to be multiple valid solutions; this implementation will always return the lowest one in that instance, but you could write a version of this function that always goes through the entire array and returns another array of all the solutions it found.</p>
    </div>