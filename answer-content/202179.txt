<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd use <a href="https://firebirdsql.org/refdocs/langrefupd21-select.html" rel="nofollow noreferrer">common table expressions (CTE)</a> for <code>COSTS</code>, <code>EXPENSES</code> and <code>DURATIONS</code> tables. In the CTE, you can do all the calculations that require a <code>WHERE</code> clause in <code>CASE</code> expressions. Then you can do your joins to the CTE expression names. In my example below, the expression name for the <code>EXPENSES</code> query is <code>EXPENSES_SUMS</code>.</p>
<h3>Example</h3>
<pre><code>WITH
EXPENSES_SUMS
AS
(
    SELECT 
          PROJ_ID
        , SUM(CASE 
                WHEN EXTRACT(YEAR FROM DOC_DATE) &lt; EXTRACT(YEAR FROM CURRENT_DATE) AND CASH_DEDUCTIONS = FALSE 
                THEN TOTAL_VALUE
          END) AS PAST_YEARS
        , SUM(CASE  
                WHEN EXTRACT(MONTH FROM DOC_DATE) &lt; EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM DOC_DATE) = EXTRACT(YEAR FROM CURRENT_DATE) AND CASH_DEDUCTIONS = FALSE
                THEN TOTAL_VALUE
          END) AS PAST_MONTHS
        , SUM(CASE  
                WHEN EXTRACT(MONTH FROM DOC_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM DOC_DATE) = EXTRACT(YEAR FROM CURRENT_DATE) AND CASH_DEDUCTIONS = FALSE
                THEN TOTAL_VALUE 
          END) AS CURRENT_MONTH
        , SUM(CASE  
                WHEN EXTRACT(YEAR FROM DOC_DATE) = EXTRACT(YEAR FROM CURRENT_DATE) AND CASH_DEDUCTIONS = FALSE
                THEN TOTAL_VALUE
          END) AS CURRENT_YEAR
        , SUM(CASE  
                WHEN CASH_DEDUCTIONS = FALSE
                THEN TOTAL_VALUE
          END) AS TOTAL_EXPENSES
        , SUM(CASE  
                WHEN EXTRACT(YEAR FROM DOC_DATE) &lt; EXTRACT(YEAR FROM CURRENT_DATE) AND CASH_DEDUCTIONS = TRUE
                THEN TOTAL_VALUE
          END) AS CASH_PAST_YEARS
        , SUM(CASE  
                WHEN EXTRACT(MONTH FROM DOC_DATE) &lt; EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM DOC_DATE) = EXTRACT(YEAR FROM CURRENT_DATE)  AND CASH_DEDUCTIONS = TRUE
                THEN TOTAL_VALUE 
          END) AS CASH_PAST_MONTHS
        , SUM(CASE  
                WHEN EXTRACT(MONTH FROM DOC_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM DOC_DATE) = EXTRACT(YEAR FROM CURRENT_DATE) AND CASH_DEDUCTIONS = TRUE
                THEN TOTAL_VALUE
          END) AS CASH_CURRENT_MONTH
        , SUM(CASE  
                WHEN EXTRACT(YEAR FROM DOC_DATE) = EXTRACT(YEAR FROM CURRENT_DATE) AND CASH_DEDUCTIONS = TRUE
                THEN TOTAL_VALUE
          END) AS CASH_CURRENT_YEAR
        , SUM(CASE  
                WHEN CASH_DEDUCTIONS = TRUE
                THEN TOTAL_VALUE
          END) AS CASH_TOTAL_EXPENSES
        , SUM(TOTAL_VALUE) AS TOTAL_EXPENSES_CASH
        --you can add more columns with your conditions here in case expressions

    FROM 
        EXPENSES
    GROUP BY 
        PROJ_ID
)
, 
COSTS_SUMS
AS
(
    SELECT 
          PROJ_ID
        , SUM(COALESCE(ADDED_VALUE, 0) - COALESCE(REMOVED_VALUE, 0)) AS ADDED_COSTS
        --you can add more columns with your conditions here in case expressions

    FROM 
        COSTS
    GROUP BY 
        PROJ_ID
)
, 
DURATIONS_SUMS
AS
(
    SELECT 
          PROJ_ID
        , SUM(COALESCE(ADDED_VALUE, 0) - COALESCE(REMOVED_VALUE, 0)) AS ADDED_DURATIONS
        --you can add more columns with your conditions here in case expressions

    FROM 
        DURATIONS
    GROUP BY 
        PROJ_ID
)
SELECT 
      P.PROJ_ID
    , P.PROJ_STATUS
    , P.TYPE_ID
    , PT.TYPE_NAME
    , P.CLASS_ID
    , CLA.CLASS_NAME
    , P.PROJ_NO
    , P.PROJ_YEAR
    , P.PROJ_NAME
    , P.OLD_PROJ_NAME
    , P.AGENCY_ID
    , A.AGENCY_NAME
    , P.CONTRACT_NO
    , P.CONTRACT_DATE
    , P.MINISTRY_ID
    , M.MINISTRY_NAME
    , P.DIRECTORATE_ID
    , DIR.DIRECTORATE_NAME
    , P.COST
    , P.ESTIMATED_COST
    , COALESCE(CO.ADDED_COSTS, 0) AS ADDED_COSTS
    , (COALESCE(P.COST, 0) + COALESCE(CO.ADDED_COSTS, 0)) AS TOTAL_COST
    , P.ALLOCATION
    , COALESCE(ED.PAST_YEARS, 0) AS PAST_YEARS
    , COALESCE(ED.PAST_MONTHS, 0) AS PAST_MONTHS
    , COALESCE(ED.CURRENT_MONTH, 0) AS CURRENT_MONTH
    , COALESCE(ED.CURRENT_YEAR, 0) AS CURRENT_YEAR
    , COALESCE(ED.TOTAL_EXPENSES, 0) AS TOTAL_EXPENSES
    , COALESCE(ED.CASH_PAST_YEARS, 0) AS CASH_PAST_YEARS
    , COALESCE(ED.CASH_PAST_MONTHS, 0) AS CASH_PAST_MONTHS
    , COALESCE(ED.CASH_CURRENT_MONTH, 0) AS CASH_CURRENT_MONTH
    , COALESCE(ED.CASH_CURRENT_YEAR, 0) AS CASH_CURRENT_YEAR
    , COALESCE(ED.CASH_TOTAL_EXPENSES, 0) AS CASH_TOTAL_EXPENSES
    , COALESCE(ED.TOTAL_EXPENSES_CASH, 0) AS TOTAL_EXPENSES_CASH
    , ((COALESCE(P.COST, 0) + COALESCE(CO.ADDED_COSTS, 0)) - COALESCE(ED.TOTAL_EXPENSES, 0)) AS REMAINING
    , P.DURATION
    , COALESCE(DU.ADDED_DURATIONS, 0) AS ADDED_DURATIONS
    , (COALESCE(P.DURATION, 0) + COALESCE(DU.ADDED_DURATIONS, 0)) AS TOTAL_DURATION
    , P.START_DATE
    , P.FINISH_DATE
    , P.GOVERNORATE_ID
    , G.GOVERNORATE_NAME
    , P.PROVINCE_ID
    , PR.PROVINCE_NAME
    , P.DISTRICT_ID
    , D.DISTRICT_NAME
    , P.TOWN_ID
    , T.TOWN_NAME
    , COALESCE( (ED.TOTAL_EXPENSES / (COALESCE(P.COST, 0) + COALESCE(CO.ADDED_COSTS, 0)))/100, 0) AS FINANCIAL_ACHIEVEMENT
    , P.MATERIAL_ACHIEVEMENT
    , P.NOTES
FROM 
    PROJECTS P
    INNER JOIN PROJECTS_TYPES PT ON P.TYPE_ID = PT.TYPE_ID
    INNER JOIN CLASSES CLA ON P.CLASS_ID = CLA.CLASS_ID
    INNER JOIN AGENCIES A ON P.AGENCY_ID = A.AGENCY_ID
    LEFT JOIN MINISTRIES M ON P.MINISTRY_ID = M.MINISTRY_ID
    LEFT JOIN DIRECTORATES DIR ON P.DIRECTORATE_ID = DIR.DIRECTORATE_ID
    INNER JOIN GOVERNORATES G ON P.GOVERNORATE_ID = G.GOVERNORATE_ID
    LEFT JOIN PROVINCES PR ON P.PROVINCE_ID = PR.PROVINCE_ID
    LEFT JOIN DISTRICTS D ON P.DISTRICT_ID = D.DISTRICT_ID
    LEFT JOIN TOWNS T ON P.TOWN_ID = T.TOWN_ID
    LEFT JOIN EXPENSES_SUMS ED ON P.PROJ_ID = ED.PROJ_ID
    LEFT JOIN COSTS_SUMS CO ON P.PROJ_ID = CO.PROJ_ID
    LEFT JOIN DURATIONS_SUMS DU ON P.PROJ_ID = CO.PROJ_ID
ORDER BY 
      P.PROJ_YEAR
    , P.TYPE_ID
    , P.PROJ_NO 
</code></pre>
<p>You could even create an expression in the CTE for common values.</p>
<pre><code>SELECT 
      EXTRACT(MONTH FROM CURRENT_DATE) AS CURRENT_MONTH
    , EXTRACT(YEAR FROM CURRENT_DATE) AS CURRENT_YEAR
FROM 
    rdb$database
</code></pre>
    </div>