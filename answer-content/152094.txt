<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You may already know the following Perl 6 tidbits, but for others reading along:</p>

<ul>
<li><p>The ordinary <strong>OO</strong> way to express the sum of a list of numbers in a variable <code>list</code> is <code>list.sum</code>;</p></li>
<li><p>The ordinary <strong>functional</strong> way to express the same thing is <code>sum list</code>;</p></li>
<li><p>A less common functional idiom that produces the same result is <code>[+] list</code> which is a <a href="https://docs.perl6.org/language/operators#Reduction_Operators" rel="noreferrer">reduction</a>.</p></li>
</ul>

<p>Imo your code is fine. That said:</p>

<h1>Parentheses are frequently optional</h1>

<p>Larry often pipes up about what he calls "superstitious parens". More generally I think there's a rough consensus among Perl 6 folk that readability for most folk is best served by <em>omitting</em> optional parentheses when the meaning remains clear without them. This is almost always true around conditional expressions. I generally omit them around argument lists too. If I were writing the code you've written I'd likely have dropped seven pairs of "superstitious parens" thus:</p>

<pre><code>sub sumFor(@list)
{
   my $sum = 0;
   for @list
   {
      $sum += $_;
   }
   return $sum;
}

sub sumWhile(@list)
{
   my $sum = 0;
   my $index = 0;
   while $index &lt; @list.elems
   {
      $sum += @list[$index++];
   }
   return $sum;
}

sub sumRec(@list, $index = 0)
{
   my $sum = 0;
   if $index &lt; @list.elems
   {
      $sum = @list[$index] + sumRec @list,$index+1;
   }
   return $sum;
}

my @list = 1,2,3,4;

say sumFor @list;
say sumWhile @list;
say sumRec @list;
</code></pre>

<h1>Sigils are frequently optional</h1>

<p>I don't know of any emerging consensus about use of sigil'd variables vs <a href="https://docs.perl6.org/language/variables#Sigilless_variables" rel="noreferrer">non-sigil'd variables</a> but you can slash sigils like this:</p>

<pre><code>sub sumRec(\list, \index = 0)
{
   my $sum = 0;
   if index &lt; list.elems
   {
      $sum = list[index] + sumRec(list,index+1);
   }
   return $sum;
}
</code></pre>

<h1>Stronger typing</h1>

<p>Most built in operations accept arguments of a wide range of types and automatically coerce them to fit the operation. This highly generic approach is considered a strength. Thus, for example:</p>

<pre><code>say sum '21', '21'; # 42
</code></pre>

<p>This genericity is the default in Perl 6 code. But sometimes you may prefer to explicitly specify types. Thus, perhaps:</p>

<pre><code>subset NumericList of List where .all ~~ Numeric;

sub sumFor(NumericList \list )
{
   my $sum = 0;
   for list
   {
      $sum += $_;
   }
   return $sum;
}

my \list = 1,2,3,4,'a';
say sumFor list; # "Constraint type check failed..."
</code></pre>
    </div>