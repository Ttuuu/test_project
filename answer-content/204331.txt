<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>DRY code</h1>
<p>A golden coding rule is <strong>Don't Repeat Yourself</strong> (D.R.Y) which outwardly may seam a simple rule to follow but for the novice coder this is not as straight forward as it sounds. Repeated code does not always look like repeated code. You can use search and replace to change most repeated code, repeated code is seldom the same text repeated over and over.</p>
<p>Quick points</p>
<ul>
<li>use const for constants.</li>
<li>If just setting text on an element use <code>element.textContent</code> not <code>innerHTML</code></li>
<li>Its bad practice in JS (and most other languages) to not include a leading digit for numbers. <code>.5</code> should be <code>0.5</code></li>
<li>learn the defaults for attributes so you dont need to add them. eg <code>&lt;input type="text"&gt;</code> "text" is the default type for input so the same is written <code>&lt;input&gt;</code></li>
</ul>
<h2>Integrated systems</h2>
<p>Consider the following very simple example (Static site) that is made up of two integrated systems, the page content (DOM/HTML/CSS) and the javascript runtime. Most frequently delivered to the client device separately. Repetition is commonly exasperated by the need to communicate between the two.</p>
<pre><code>&lt;!-- HTML --&gt;
10 + 20 = &lt;div id="add10_20El"&gt;&lt;/div&gt;
30 + 40 = &lt;div id="add30_40El"&gt;&lt;/div&gt;
&lt;div id="total"&gt;&lt;/div&gt;
&lt;script&gt;
   function add10_20() { return 10 + 20 }   
   function add30_40() { return 40 + 30 }

   add10_20El.textContent = add10_20();
   add30_40El.textContent = add30_40();
   total = add10_20() + add30_40();
&lt;/script&gt;
</code></pre>
<p>They are clearly not that repeating, a bit of a pattern (that may not always stand out), some repeated tokens (<code>function</code> <code>return</code>, etc) that is unavoidable. The function names need to be defined and then called, thus at min require two copies.</p>
<h2>Repeated logic</h2>
<p>One source of repetition is logic being applied. Ignoring the numbers both functions do the same thing, add values, with each function handling custom data values. Much as you have done with <code>calcTen</code>, <code>calcFifteen</code>, etc they all do the same thing, calculate a percentage and display it, but you have done it 4 times.</p>
<p>There is also logic that displays the results and the need for code in both HTML and JS to support this need. For your code you have the many actions (<code>addEventListener</code>, <code>querySelector</code>), attributes identifying element in the DOM, HTML, and string to match these as queries and further names to hold the references in JS.</p>
<h2>Repeated data</h2>
<p>There are just 4 values 10, 20, 30, 40, each repeated 7 times. In your code you have 4 values 3 fixed and one variable. If you count the number of times 15% is represented in digits, word, or named variable you also have 7 repeats, Oops make that 9</p>
List of value 15 as represented in your code same for 10 and 20%
<ol>
<li><code>fifteenPerBtn</code> as JS named variable to hold DOM element</li>
<li><code>fifteenPerBtn</code> as ref to add listener</li>
<li><code>calcFifteen</code> 2 * as function name defined and called</li>
<li>ditto above</li>
<li><code>.15</code>  as number value to do calculation with</li>
<li><code>fifteen</code> as text string to write to DOM</li>
<li><code>.fifteenPercent</code> as JS string used to query DOM</li>
<li><code>fifteenPercent</code>  as class name</li>
<li><code>15%</code>  as HTML content</li>
</ol>
<p>Not only have you repeated that value 9 times, you have done so in about as many formats as possible.</p>
<p><strong>BTW</strong> In JS you can start numbers with a full stop <code>.15</code> but it is considered very bad practice. For the effort of one more key the 0 is worthy readability</p>
<h2>On the write track.</h2>
<p>The thing you are on the right track to good dry code if you look at the custom value, it can take any percentage and format a result. At the most basic level you could have just used the click events to set the custom.value property  then called the custom value handler.</p>
<h2>In context, where it belongs, as simply as possible</h2>
<h3>Data in the document, logic in the code.</h3>
<p>The data <code>bill</code>, <code>tip</code> percent quick options, and resulting display text and format are mostly semantic and belong on the page. The named percentages 15 is displayed as <code>"fifteen"</code> adds a wrinkle but that is minor and such things are always good attention to details for clients.</p>
<p>Use <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" rel="nofollow noreferrer"><code>HTMLElement.dataset</code></a> to add data to content when serving the page, or directly to the elements if creating content dynamically.</p>
<h3>Use the easy way (not the force)</h3>
<p>Many experts say "Don't use direct referencing to access elements, its far better to use DOM interfaces like <code>querySelector</code> to avoid" the  <em>"Fire and brimstone"</em> or <em>"10 reason to use jQuery"</em> (in the history section)</p>
<p>Using direct referencing to access elements via their id's or form names forces you to be aware of id/name uniqueness, it reduces the amount of repeated code, thus number of lines and thus reduces bugs.</p>
<p>In the example I don't query for the the element called <code>billAmount</code>, I access it directly by its name, and I use the shortest name in the context of the project that has meaning <code>id="bill".</code> If you worry about DOM / JS referencing use jQuery</p>
<p><sub><sub>(sniggers its 20 years give it up..., Bill is the good guy, and IE4 had it all over NN)</sub></sub></p>
<h3>Context</h3>
<p>Code does not live in isolation, it is related to the project and has meaning implied by use and location that does not need repeating. eg <code>customTipAmount</code> we know its an amount so remove redundant word to get <code>customTip</code>, and its in a function calculating a tip, thus tip is implied, that leaves <code>custom</code>, which by its self is meaning less, so use the shortest name that has meaning and call it <code>tip</code></p>
<p>Just to show that your function looses nothing with the shorter names apart from</p>
<blockquote>
<pre><code>function calcCustom() {
  var billInput = bill.value;
  var customTipAmount = document.querySelector('#customTip').value;
  var tipAmount = billInput * customTipAmount;
  tipSuggestion.innerHTML = 'A ' + customTipAmount + ' percent tip would equal $' + tipAmount;
}
</code></pre>
</blockquote>
<p>becomes</p>
<pre><code>// customTipAmount to tip
// tipAmount dropped
// bill as input argument
function calcCustom(bill) {
  const tip = document.querySelector('#customTip').value;
  tipSuggestion.innerHTML = 'A ' + tip + ' percent tip would equal $' + (bill * tip);
}
</code></pre>
<p>As this answer has feature creeped from a word or two about DRY code to TLDR partial rant the code examples below does all the above.</p>
<hr>
<p>With some named values</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var named = tipValue.dataset.named.split(",");
const tipName = (v, i = named.indexOf("" + v)) =&gt; i &lt; 0 ? v : named[i + 1];
custom.addEventListener("change",() =&gt; custBut.dataset.tip = custom.value / 100);

tipVals.addEventListener("click", event =&gt; {
    const data = event.target.dataset;
    tipValue.textContent = tipName(data.tip * 100 + 0.5 | 0);  // lazy code + 0.5 | 0 
                                                               // rather than Math.round
    tipAmount.textContent = (data.tip * bill.value).toFixed(2);
    result.className = ""; //removes the hide
})</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.hide { display : none; }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;label&gt;Bill $&lt;/label&gt;&lt;input id="bill" value="125.50" size=6&gt;
&lt;div id="tipVals"&gt;
  &lt;button data-tip="0.1"  &gt;10%&lt;/button&gt;
  &lt;button data-tip="0.15" &gt;15%&lt;/button&gt;
  &lt;button data-tip="0.2"  &gt;20%&lt;/button&gt;
  &lt;button data-tip="0.25" id="custBut"&gt;Custom&lt;/button&gt;
&lt;/div&gt;  
&lt;label&gt;Custom: &lt;/label&gt;
&lt;input id="custom" value = "25" size=4&gt; 


&lt;p class="hide" id="result"&gt;A &lt;span data-named="1,one!, 5,five,10,ten,15,fifteen,20,twenty,100,generous" id="tipValue"&gt;&lt;/span&gt; percent tip is $&lt;span id="tipAmount"&gt;&lt;/span&gt;&lt;/p&gt;</code></pre>
</div>
</div>

<hr>
<p>Without named tips</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>custom.addEventListener("change", () =&gt; custBut.dataset.tip = custom.value / 100);

tipVals.addEventListener("click", event =&gt; {
    const data = event.target.dataset;
    tipValue.textContent = data.tip * 100 + 0.5 | 0;
    tipAmount.textContent = (data.tip * bill.value).toFixed(2);
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;label&gt;Bill $&lt;/label&gt;&lt;input id="bill" value="125.50" size=6&gt;
&lt;div id="tipVals"&gt;
  &lt;button data-tip="0.1"  &gt;10%&lt;/button&gt;
  &lt;button data-tip="0.15" &gt;15%&lt;/button&gt;
  &lt;button data-tip="0.2"  &gt;20%&lt;/button&gt;
  &lt;button data-tip="0.25" id="custBut"&gt;Custom&lt;/button&gt;
&lt;/div&gt;  
&lt;label&gt;Custom: &lt;/label&gt;
&lt;input id="custom" value = "25" size=4&gt; 


&lt;p&gt;A &lt;span id="tipValue"&gt;0&lt;/span&gt; percent tip is $&lt;span id="tipAmount"&gt;0.00&lt;/span&gt;&lt;/p&gt;</code></pre>
</div>
</div>

    </div>