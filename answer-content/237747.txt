<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>or advice to enhance and develop my coding skills.</p>
</blockquote>

<p><strong>Enable all warnings</strong></p>

<p>I received many with "gcc -std=c11 -O0 -g3 -pedantic -Wall -Wextra -Wconversion -c -fmessage-length=0 ".  See list below.</p>

<p>Save time and let the automatic checking of a good well enabled compiler provide you feedback.</p>

<p><strong>Weak input</strong></p>

<p>All input is through <code>scanf()</code>.  That consistency is <em>good</em>, yet <code>scanf()</code> is very difficult to use and handle unexpected input.   Use <code>fgets()</code> to read a <em>line</em> of user input into a <em>string</em>.  Then parse the <em>string</em>.</p>

<p><strong>Classic missing space with %c</strong></p>

<p>Code's usage of <code>scanf()</code> leaves the <kbd>Enter</kbd> or <code>'\n'</code> in <code>stdin</code>.  The <code>"%c"</code> in <code>scanf("%c", &amp;accountt.tc);</code>, unlike <code>"%s" and "%d"</code>, does not consume and toss  leading white space.  When  case 2 is not used first, <code>scanf("%c"</code> will read a <code>'\n'</code>.</p>

<pre><code>  // scanf("%c", &amp;accountt.tc);
  scanf(" %c", &amp;accountt.tc);
</code></pre>

<p><strong>Check return values of input</strong></p>

<p>The return value of <code>scanf()</code> is not checked.</p>

<p><strong>Cope with names better</strong></p>

<p>Real names can have spaces in the first name.  Real names can have spaces in the last name.  Real names can exceed 49 letters.</p>

<p><strong>Use width limits with %s</strong></p>

<p>Do not use <code>%s</code> without a width. <code>%s</code> --&gt; <code>%49s</code> for code's <code>name[50]</code>.</p>

<p><strong>Avoid (naked) magic numbers</strong></p>

<p>Example: Instead of <code>name[50]</code></p>

<pre><code>#define NAME_MAX_SIZE 50

char name[NAME_MAX_SIZE];
</code></pre>

<p><strong>Auto formatting</strong></p>

<p>Many coding environments have an <em>auto formatter</em>.  Post code is unnecessarily difficult to read.  Improve format with tools - do not waste time doing it manually.</p>

<p><strong>Spell checker</strong></p>

<p>Deposite --&gt; Deposit</p>

<hr>

<pre><code>../test.c:34:7: warning: unused variable 'd' [-Wunused-variable]
   int d = 32, k, *a, p;
       ^
../test.c: In function 'msearch':
../test.c:132:7: warning: implicit declaration of function 'MENU' [-Wimplicit-function-declaration]
       MENU();
       ^~~~
../test.c: In function 'mdelete':
../test.c:168:25: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           t[i].name[50] = NULL;
                         ^
../test.c:169:27: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           t[i].prenom[50] = NULL;
                           ^
../test.c:170:24: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           t[i].datec.a = NULL;
                        ^
../test.c:171:24: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           t[i].datec.j = NULL;
                        ^
../test.c:172:24: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           t[i].datec.m = NULL;
                        ^
../test.c:173:24: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           t[i].adr[50] = NULL;
                        ^
../test.c:174:24: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           t[i].tel[50] = NULL;
                        ^
../test.c:178:14: warning: unused variable 'd' [-Wunused-variable]
       int i, d = 32;
              ^
../test.c:178:11: warning: unused variable 'i' [-Wunused-variable]
       int i, d = 32;
           ^
../test.c:194:19: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           v[i].ic = NULL;
                   ^
../test.c:195:22: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           v[i].solde = NULL;
                      ^
../test.c:196:19: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
           v[i].tc = NULL;
                   ^
../test.c: In function 'mcreate':
../test.c:362:13: warning: format '%s' expects argument of type 'char *', but argument 2 has type 'char (*)[50]' [-Wformat=]
     scanf("%s %s", &amp;t[i].prenom, &amp;t[i].name); //when you enter the full name you have to make space between the name and family name and in the same family name no spaces
            ~^      ~~~~~~~~~~~~
../test.c:362:16: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'char (*)[50]' [-Wformat=]
     scanf("%s %s", &amp;t[i].prenom, &amp;t[i].name); //when you enter the full name you have to make space between the name and family name and in the same family name no spaces
               ~^                 ~~~~~~~~~~
../test.c:371:13: warning: format '%d' expects argument of type 'int *', but argument 2 has type 'char (*)[50]' [-Wformat=]
     scanf("%d", &amp;t[i].tel);
            ~^   ~~~~~~~~~
../test.c:374:13: warning: format '%s' expects argument of type 'char *', but argument 2 has type 'char (*)[50]' [-Wformat=]
     scanf("%s", &amp;t[i].adr);
            ~^   ~~~~~~~~~
../test.c:401:13: warning: format '%d' expects argument of type 'int *', but argument 2 has type '_Bool *' [-Wformat=]
     scanf("%d", &amp;v[i].b);
            ~^   ~~~~~~~
../test.c: At top level:
../test.c:418:6: warning: conflicting types for 'MENU'
 void MENU() {
      ^~~~
../test.c:132:7: note: previous implicit declaration of 'MENU' was here
       MENU();
       ^~~~
../test.c:472:6: warning: return type of 'main' is not 'int' [-Wmain]
 void main() {
      ^~~~
../test.c: In function 'mdelete':
../test.c:208:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
       MENU();
       ^~~~~~
../test.c:210:5: note: here
     default: {
     ^~~~~~~
../test.c: In function 'mmmenuodify':
../test.c:275:13: warning: this statement may fall through [-Wimplicit-fallthrough=]
     case 4: {
             ^
../test.c:298:5: note: here
     case 5: {
     ^~~~
</code></pre>
    </div>