<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most probable culprit for your performance issues are the constant context switches betwwe vba and Excel whenever you call find. Depending on the number of keys in your dictionary, this can add up.</p>
<p>One thing you could try is to load the entire <code>filRange</code> into a 2d array via the range's <code>Value</code> property. Then you could search that. Unfortunately, there is no built-in support for that. You could sort the array and then use a binary search for every key.</p>
<p>One other thing I observed in your code is that you access the dictionary in a way it really is not built for. A dictionary is  built to be accessed by key.</p>
<p>The first thing you can do is to use a <code>For Each</code> loop on <code>partsDict.Keys</code>, i.e. <code>For Each key in partsDict.Keys</code>. Then, when you assign the values, you can do it by key, i.e. <code>partsDict(key) = whatever</code> or <code>partsDict.Item(key)</code>, which is what the first one complies to.</p>
    </div>