<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main potential performance improvement I can see is turning the array of words into a Set of words instead. For every match in the string, you're doing:</p>

<pre><code>const shouldInclude = wordsNoQuotes.find(word =&gt; knownWords.includes(word));
</code></pre>

<p>The <code>.find</code> is <code>O(n)</code> (it iterates over all words in the array, worst-case), and the <code>.includes</code> is <code>O(n)</code> (it also iterates through all words in its array, worst-case). So this is an <code>O(n ^ 2)</code> operation which is already inside a loop. That could be a bit expensive when either or both arrays are large. Using a Set for one of the arrays instead will allow you to use <code>Set.prototype.has</code>, which is an <code>O(1)</code> operation. The <code>else</code> part also uses <code>.includes</code>, which can be changed to <code>.has</code>:</p>

<pre><code>const knownWordsSet = new Set(dictionary.toLowerCase().split(' '));
const words = text.toLowerCase().match(/\w+|"[^"]+"/gi);
const result = words.reduce((acc, word) =&gt; {
  if (word[0] == '"') {
    const wordsNoQuotes = word.replace(/"/g, "").split(' ');
    const shouldInclude = wordsNoQuotes.find(word =&gt; knownWordsSet.has(word));
    if (shouldInclude) {
      return acc.concat(wordsNoQuotes);
    }
  } else if (knownWordsSet.has(word)) {
</code></pre>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const fn = (text, dictionary) =&gt; {
  const knownWordsSet = new Set(dictionary.toLowerCase().split(' '));
  const words = text.toLowerCase().match(/\w+|"[^"]+"/gi);
  const result = words.reduce((acc, word) =&gt; {
    if (word[0] == '"') {
      const wordsNoQuotes = word.replace(/"/g, "").split(' ');
      const shouldInclude = wordsNoQuotes.find(word =&gt; knownWordsSet.has(word));
      if (shouldInclude) {
        return acc.concat(wordsNoQuotes);
      }
    } else if (knownWordsSet.has(word)) {
      acc.push(word)
    }

    return acc;
  }, []);

  return result.length === 0 ? 0 : [...new Set(result)].join('\n');
}
console.log(fn(
  `Hi. I am a developer. A "Hello world" program was my first code.`,
  "hi developer world"
));</code></pre>
</div>
</div>


<p>But Sets have a small overhead as well, so while this will definitely be the best strategy for large inputs, it might do slightly worse for tiny inputs when there are only one or a couple of words. (But for such tiny inputs, performance is not an issue to worry about anyway)</p>

<p>You're currently pushing to an array inside the loop, then the array only gets used to create a Set to deduplicate at the end of the function. It would be more efficient to use a Set of the result words from the beginning, instead of using an array and converting to one after the fact (converting an array to a Set and the other way around is an <code>O(n)</code> process). At this point, since the accumulator would be the same Set every time, <code>.reduce</code> would <a href="https://www.youtube.com/watch?v=TnZ7jMFCa4Y" rel="nofollow noreferrer">arguably not be appropriate</a>, so use a plain loop instead.</p>

<p>A potential issue in your current code is that if the global <code>.match</code> has no matches, it will return <code>null</code>, <em>not</em> an empty array (unfortunately). So, to avoid occasionally throwing errors, you have to check to see if the match exists first before iterating over it.</p>

<p>You're using <code>.find</code> to check if there are any elements in the <code>wordsNoQuotes</code> array which fulfill the condition. But you don't care about <em>which</em> element fulfills the condition - you just want to see if <em>any</em> element does. So, rather than using <code>.find</code> (which returns the matching element), it would be more semantically appropriate to use <code>.some</code> (which returns <code>true</code> if any elements pass a callback test, and <code>false</code> otherwise)</p>

<p>When the match is a quote string, your</p>

<pre><code>word.replace(/"/g, "").split(' ');
</code></pre>

<p>iterates over and checks every character of the string <em>twice</em> - once to check for <code>"</code>s to remove, and again to identify the positions of spaces. Since you already know the positions of the <code>"</code>s are the first and last character, you could use <code>slice</code> instead:</p>

<pre><code>word.slice(1, word.length - 1).split(' ');
</code></pre>

<p>But your <code>word</code> variable isn't necessarily a word - it may well be a quoted string which contains multiple words. To improve clarity, maybe call it <code>match</code> instead.</p>

<p>Edited version in full:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const fn = (text, dictionary) =&gt; {
  const knownWordsSet = new Set(dictionary.toLowerCase().split(' '));
  const matches = text.toLowerCase().match(/\w+|"[^"]+"/gi);
  if (!matches) return 0;
  const resultSet = new Set();
  for (const match of matches) {
    if (match[0] == '"') {
      const wordsNoQuotes = match.slice(1, match.length - 1).split(' ');
      const shouldInclude = wordsNoQuotes.some(word =&gt; knownWordsSet.has(word));
      if (shouldInclude) {
        for (const word of wordsNoQuotes) {
          resultSet.add(word);
        }
      }
    } else if (knownWordsSet.has(match)) {
      resultSet.add(match);
    }
  }
  return resultSet.size === 0 ? 0 : [...resultSet].join('\n');
}
console.log(fn(
  `Hi. I am a developer. A "Hello world" program was my first code.`,
  "hi developer world"
));</code></pre>
</div>
</div>

    </div>