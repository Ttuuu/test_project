<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple of pointers. I possibly got too ahead of myself with the solution, but hopefully, a step-by-step walkthrough clarifies everything.
I am happy to answer any questions you have.</p>

<p>The overall suggestion is:</p>

<pre class="lang-py prettyprint-override"><code>"""Email and number extractor - finds phone and email addresses on the clipboard.
Python 3 - 30/04/2020
"""
import re
from io import StringIO

import pyperclip


class PastingIO(StringIO):
    def write_items_to_string(self, items, items_name: str):
        self.write(f"{items_name} found:\n\n".upper())

        if items:
            for item in items:
                self.write(f"\t{item}\n")
        else:
            self.write(f"\n\tSorry, there are no {items_name}")

        self.write("\n")  # padding newline


def main():
    email_regex = re.compile(
        r"""(
            [a-zA-Z0-9._%+-]+           # username
            @                           # @ symbol
            [a-zA-Z0-9.-]+              # domain name
            (\.[a-zA-Z]{2,4})           # dot something
        )""",
        re.VERBOSE,
    )

    phone_regex = re.compile(
        r"""(
            (\d{3}|\(\d{3}\))?          # area code
            (\s|-|\.)?                  # separator
            \d{3}                       # first 3 digits
            (\s|-|\.)                   # separator
            \d{4}                       # last 4 digits
            (\s*(ext|x|ext.)\s*\d{2,5})?# extension
        )""",
        re.VERBOSE,
    )

    # get copied text and paste it to text var
    # text = str(pyperclip.paste())
    text = """
        This is sample text.
        hello@you.com
        There is nothing here.
        rofl@mao.org
        234-654-1234 is a telephone number.
        So is 123-456-7890!
        However, 1234-32-342 is invalid.
        Hello World!
        invalid@email.world should be invalid all-together.
        Check out this email: a@b.c
    """

    output = PastingIO()

    print("Working on:", text, sep="\n")

    matching_targets = {
        "numbers": {"regex": phone_regex,},
        "emails": {"regex": email_regex,},
    }

    for target_name, target_dict in matching_targets.items():
        regex = target_dict["regex"]
        target_dict["results"] = [match[0] for match in regex.finditer(text)]
        output.write_items_to_string(target_dict["results"], target_name)

    match_summary = output.getvalue()

    pyperclip.copy(match_summary)
    print("Copied to clipboard:", match_summary, sep="\n")


if __name__ == "__main__":
    main()
</code></pre>

<h1>Walkthrough</h1>

<pre class="lang-py prettyprint-override"><code>"""Email and number extractor - finds phone and email addresses on the clipboard.
Python 3 - 30/04/2020
"""
</code></pre>

<p>is a <em>module docstring</em>.
It basically supersedes the comments of the same content that you had in your code.
The module docstring is more powerful.
For example, other people can invoke it with <code>help()</code>:</p>

<pre class="lang-bsh prettyprint-override"><code>~$ python -c "import emailAndNumberExtractor; help(emailAndNumberExtractor)"
Help on module emailAndNumberExtractor:

NAME
    emailAndNumberExtractor

DESCRIPTION
    Email and number extractor - finds phone and email addresses on the clipboard.
    Python 3 - 30/04/2020

FUNCTIONS
    main()

FILE
    ~\emailandnumberextractor.py
</code></pre>

<hr>

<pre class="lang-py prettyprint-override"><code>import re
from io import StringIO

import pyperclip
</code></pre>

<p>I did not touch either the <code>re</code> import or your <code>re.compile</code> statements.
You will have to decide for yourself if these are correct.
I did however include a sample <code>text</code> to match against.</p>

<p><code>StringIO</code> is used here as a sort of temporary file.
When you look for and find matches, these matches should be collected, ideally in a mutable sequence like a <code>list</code>.
This is your <em>data</em>.
In your code, you irretrievably intertwine that data with its display, here the <code>print</code> of a <code>str</code>.
You did this through string concatenation.
But what if you would like to forward the list of found matches somehow, i.e. use it a second time, in another context?
You cannot, because the data is mingled with the string.</p>

<p>As such, <code>StringIO</code> will be a virtual, in-memory file for us to write to.
It will hold the <em>formatting</em>, i.e. indentations and newlines.
The data will come from somewhere else and be kept separate.
Since we do not need a real file, this will do.
I chose this over multi-line string formatting, since that is not straightforward to do and has many caveats.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>class PastingIO(StringIO):
    def write_items_to_string(self, items, items_name: str):
        self.write(f"{items_name} found:\n\n".upper())

        if items:
            for item in items:
                self.write(f"\t{item}\n")
        else:
            self.write(f"\n\tSorry, there are no {items_name}")

        self.write("\n")  # padding newline
</code></pre>

<p>This class definition might be the trickiest part.
Don't worry if you haven't learned about classes yet.
It can be understood this way:</p>

<p><code>PastingIO</code>, our new custom class, is <em>inheriting</em> from <code>StringIO</code>.
This means that <code>PastingIO</code> will have all the functionalities of its parent, <code>StringIO</code>.
I explained the latter earlier.
The reason I did this was to <em>extend</em> <code>StringIO</code> by a simple functionality.
This functionality is the function <code>write_items_to_string</code>.
If function definitions occur in classes, they are called <em>methods</em>.</p>

<p>Methods are much like normal functions, but since they are methods <em>of a class</em>, they usually do something with their class.</p>

<p>Now, doing something with the <em>class itself</em>, <code>PastingIO</code>, is not getting us far.
See, a class is like a blueprint.
It contains all the instructions of how something <em>should</em> look like and behave.
But it <em>is not yet</em> something substantial.
A class is like a construction plan, but we are interested in the house that will be built based on that plan.
The plan itself is a (to us, useless) piece of paper.</p>

<p>To build the "house", <em>instantiation</em> is needed.
This is done in the code when we call <code>PastingIO()</code>.
The parantheses are important.
It is the instruction to actually build an <em>object</em> from the <em>class definition</em>.
Lastly, we give this thing a name, by just assinging it to a variable (<code>output</code>).
More on that later.</p>

<p>The object we get is like <code>StringIO</code>, but with the added functionality.
You will note that this functionality is much like the loops you defined to concatenate to the string.
I created this method since those loops do identical things.
Now, you won't have to repeat yourself anymore.
This is in adherence to the DRY principle: <em>don't repeat yourself</em>.</p>

<p>As such, I hope <code>write_items_to_string</code> is self-explanatory.
The <code>self</code> just refers to the object <em>instance</em> we created, <code>output</code>.
It means that we act <em>on</em> <code>output</code>.
In this case, imagine the <code>write</code> method to just write to a file, like you do with real files using <code>with open("file.txt", "w") as f: f.write("Hello")</code>, only virtually.
It builds and holds our output string, including all the formatting.</p>

<p>Here, a class is important to <em>hold</em> the string.
A function alone cannot (rather: should not) <em>hold</em> onto anything (referred to as a state).</p>

<hr>

<p>Skipping the <code>re.compile()</code> statements, they are unchanged.
The <code>text</code> statement is just a sample text to work on.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>output = PastingIO()
</code></pre>

<p>This is the line mentioned above.
<code>output</code> is now an <em>instance</em> of our custom <code>PastingIO</code> class.
It has all the capabilities of a <code>StringIO</code> (much like a virtual text file), with the added <code>write_items_to_string</code> <em>method</em>, capable of modifying the content of <code>output</code>.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>    matching_targets = {
        "numbers": {"regex": phone_regex,},
        "emails": {"regex": email_regex,},
    }
</code></pre>

<p>This is a nested dictionary. <code>matching_targets</code> is a dictionary, but each of its values is also a dictionary.
This affords us a neat and organized way to store all related data and functionalities, without repeating ourselves.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>    for target_name, target_dict in matching_targets.items():
        regex = target_dict["regex"]
        target_dict["results"] = [match[0] for match in regex.finditer(text)]
        output.write_items_to_string(target_dict["results"], target_name)
</code></pre>

<p>This is where, finally, the business happens.
One key aspect I found in your code was that <code>findall</code> was called twice.
You <code>compile</code>d the regex outside the loops, only once, which is great.
But even <code>findall</code> only needs to be called once for each regex.
Note that I replaced it with <code>finditer</code>, a simple iterator that does the same thing here.
It returns matches only if you ask it to (lazy stuff), which we do in a loop.</p>

<p>(List) comprehensions are faster than the "manual" equivalent using <code>for</code> or <code>while</code> loops.
The list at <code>target_dict["results"]</code> will hold all the found strings (well, only the first found capture group).
Note that we iterate over <code>matching_targets</code>, and thus do both emails and numbers in one sweep.
The results are then found in for example <code>matching_targets["emails"]["results"]</code>, so <em>two</em> keys are required.</p>

<p>Note that this data would not strictly have to be stored in the <code>dict</code>, since we do nothing with it later on.</p>

<p>The last line calls the <code>write_items_to_string</code> method of <code>output</code>.
At first, <code>output</code> is empty.
We write to it, and it retains its contents across those loops, building up a virtual text file.</p>

<p>String concatenation in loops is usually a bad idea.
Strings are immutable, that means even just appending a single letter will lead to the creation of an entirely <em>new</em> object.
Lists are mutable.
So a good alternative approach to what was done here would be to collect string components in a mutable sequence, like a list, and then joining them together <em>once</em> afterwards, using <code>join</code>.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>match_summary = output.getvalue()
</code></pre>

<p>just gets the text contents of the <code>output</code> object.
<code>match_summary</code> is now a string, printed to the specifications in <code>write_items_to_string</code>.
If you want different newlines, indentations etc., look there.</p>

<p>Note that if you did not want each item on a newline, and would be happy with printing the "raw" output, that is suddenly much, much easier:</p>

<pre class="lang-py prettyprint-override"><code>emails = ["hello@world.org", "a@b.c"]
result = f"Emails found: {emails}"
print(result)
</code></pre>

<p>is all that is needed:</p>

<pre class="lang-py prettyprint-override"><code>Emails found: ['hello@world.org', 'a@b.c']
</code></pre>

<hr>

<pre class="lang-py prettyprint-override"><code>pyperclip.copy(match_summary)
print("Copied to clipboard:", match_summary, sep="\n")
</code></pre>

<p>Note that I saved a <code>print</code> call here by just separating the arguments with a comma.
They are separated according to the <code>sep</code> argument.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    main()
</code></pre>

<p>This is a common pattern used to prevent the file from running when being imported.
If a Python file, i.e. module, is run <em>directly</em> as a script, as is the case here, its <code>__name__</code> attribute will be set to <code>"__main__"</code>.
As such, the <code>main()</code> function is executed, as desired.</p>

<p>However, notice how in the docstring explanation above, I <code>import</code>ed your module to call <code>help</code> on it.
In such a case, without the <code>__name__ == "__main__"</code> safeguard, the module would <em>also</em> run, which would then of course be undesired.
As such, it is a good idea to keep modules <em>importable</em>.</p>
    </div>