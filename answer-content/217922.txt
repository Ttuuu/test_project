<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This approach looks more complicated than it is worth for the compile time checking you get out of it. Not allowing multiple properties of the same type makes this more difficult to use.  You could use a function like the one below to avoid casting every time you retrieve an element from a map with different types of objects. This assumes that you know which type the element should be.</p>

<pre><code>/**
 * Get a cast value from a map.
 * @param &lt;T&gt; the type of key.
 * @param &lt;R&gt; the type of cast value. 
 * @param key the key corresponding to a value.
 * @param map the containing the key value pairs.
 * @return the value cast to the expected type.
 */
@SuppressWarnings("unchecked")
public static &lt;T,R&gt; R get(T key, Map&lt;T,? super R&gt; map){
    Object value = map.get(key);
    return (R)value;
}

/**
 * Put a key value pair in a map.
 * @param &lt;T&gt; the type of key.
 * @param &lt;R&gt; the type of value.
 * @param key the key corresponding to a value.
 * @param value the value being mapped.
 * @param map the map.
 */
public static &lt;T,R&gt; void put(T key, R value, Map&lt;T,? super R&gt; map){
    map.put(key, value);
}
</code></pre>
    </div>