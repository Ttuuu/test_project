<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First thing, I assume that you don't like to use Object Oriented concepts and we will continue by the function approach.</p>
<p>One thing that I should say to you about the comments is always to use them but in a meaningful way. Adding <code># Variables</code> comment above of the variables will not add any additional value to your code. It only wastes space.</p>
<p>The second thing is about naming. You should always follow your chosen naming rules.
So it's better to use <code>player_input_num</code> or <code>player_in_num</code> instead of the <code>playerin_num</code>. That's more <strong>snake_case</strong>.</p>
<p>So the beginning of your program will be like this after doing the above things:</p>
<pre><code>import os

test_board = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
player_input_num = 0
</code></pre>
<p>Acording to the comment rule we said above, you can remove the <code>clear_screen</code> docstring:</p>
<pre><code>def clear_screen():
    os.system("clear")
</code></pre>
<p>Now we can take a look at the <code>display_board</code> function. You've used the <code>while</code> loop heare. But in the Python and for this case, using the <code>for</code> loop is more convient and readable. First, let's see the code:</p>
<pre><code>def display_board(board_cords):
    '''
    display the board
    board_cords = list(left to right from top to bottom)
    '''
    line = '-'*40
    for i in range(0, len(board_cords), 3):
        print("\t|\t\t|")
        print(f"{board_cords[i]}\t|\t{board_cords[i + 1]}\t|\t{board_cords[i + 2]}")
        print(line)
</code></pre>
<p>The <code>i</code> is the loop counter variable. We said that the loop should start counting from the zero until reaching the <code>len(board_cords)</code>. And also we told that after each iteration, it should increase the <code>i</code> value by 3.</p>
<p>The next function is <code>check_player_input</code>. In this function, we can remove the <code>syntax</code> variable. Also, we can use a more pythonic way of checking the user input range.</p>
<pre><code>def check_player_input():
    """
    Gets an integer between 0 and 10 and calls `player_input` by that
    """
    while True:
        try:
            temp = int(input("Enter a position: "))
            if 0 &lt;= temp &lt; 10:
                break
            else:
                print('Sorry the input is not in range [0-9].')
        except:
            print("Input is not a number")
    player_input(temp)
</code></pre>
<p>Why removing the <code>syntax</code> variable is better? Because it's a variable with no real use. The original code is an infinite loop with a redundant variable.
Now we can go to the <code>player_input</code> function. The function that has an unnecessary <code>global</code> value.</p>
<p>One of the most famous **Not To Do` rules of software development is to avoid <em>global</em> values as possible. How we can avoid using that global value? The best way for doing that is to get the global value as an input parameter. But here I don't do that (Stay tuned for knowing why. For now, we just remove it and keeping its place).</p>
<p>The second problem here is the documentation of this function is not sufficient. I mean, what are the "codes"? You should add an extra description here for helping people understanding what is going on.</p>
<pre><code>def player_input(player_in):
    if player_input_num &gt;= 2:
        while check_win(test_board) == False:
            result = place_marker(test_board, 'X', player_in)
            clear_screen()
            display_board(result)
            check_player_input()

        print("You Won!")
    else:
        while player_input_num &lt;= 2:
            result = place_marker(test_board, 'X', player_in)
            clear_screen()
            display_board(result)
            player_input_num += 1
            check_player_input()
</code></pre>
<p>In the next function, you did a very good thing. Inputting the board instead of using global values. I don't do it in your code in this post, but I strongly recommend doing that in other places of your code.</p>
<p>Doing that makes your code cleaner, more readable, more testable, and less buggy.</p>
<p>In the <code>check_win</code> there is a big problem. The login is too long and unreadable. It's better to break the logic down.</p>
<pre><code>def check_win(board):
    if board[0] == board[1] == board[2]:
        return True
    if board[0] == board[3] == board[6]:
        return True
    if board[0] == board[4] == board[8]:
        return True
    if board[2] == board[5] == board[8]:
        return True
    if board[6] == board[7] == board[8]:
        return True
    if board[2] == board[4] == board[6]:
        return True
    return False
</code></pre>
<p>Why we did that? There are 6 different conditions for winning. So it's better to divide them from each other. So the person who reads your code can understand them more quickly.</p>
<p>All the things I've said until now are good, but there is a problem here. The code doesn't work.</p>
<p>The first problem is the <code>player_input_num </code> value. In the original code, we only allow the user for inputting 3 values. So, What if the game will not finish after 3 moves? We should continue getting the inputs from the user until he/she wins the game.</p>
<p>We can change the <code>player_input</code> function like this:</p>
<pre><code>def player_input(player_in):
    result = place_marker(test_board, 'X', player_in)
    clear_screen()
    display_board(result)
    if check_win(test_board, 'X'):
        print("You won")
    else:
        check_player_input()
</code></pre>
<p>We should change the <code>check_win</code> function too. Additional to the previous conditions, we should check that all 3 cell values are equal to the marker.</p>
<pre><code>def check_win(board, marker):
    if board[0] == board[1] == board[2] == marker:
        return True
    if board[0] == board[3] == board[6] == marker:
        return True
    if board[0] == board[4] == board[8] == marker:
        return True
    if board[2] == board[5] == board[8] == marker:
        return True
    if board[6] == board[7] == board[8] == marker:
        return True
    if board[2] == board[4] == board[6] == marker:
        return True
    return False
</code></pre>
<p>Here it is. But still, we had a problem. What if the all cells of the board has been filled? We can add a new function for checking if the game has finished or not. But we can do it now because for doing that, you should have two players with two different markers. And I think you can do that by yourself.</p>
<p>For avoiding mistakes, I leave all the codes we seen above here. I hope this help you (Don't forget that it's not the best program for doing what you wanted, but I think, for now, it is a acceptable one).</p>
<pre><code>import os

test_board = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']


def clear_screen():
    '''
    clearing the screen
    '''
    os.system("clear")


def display_board(board_cords):
    '''
    display the board
    board_cords = list(left to right from top to bottom)
    '''
    line = '-'*40
    for i in range(0, len(board_cords), 3):
        print("\t|\t\t|")
        print(f"{board_cords[i]}\t|\t{board_cords[i + 1]}\t|\t{board_cords[i + 2]}")
        print(line)


def check_player_input():
    """
    Gets an integer between 0 and 10 and calls `player_input` by that
    """
    while True:
        try:
            temp = int(input("Enter a position: "))
            if 0 &lt;= temp &lt; 10:
                break
            else:
                print('Sorry the input is not in range [0-9].')
        except:
            print("Input is not a number")
    player_input(temp)


def player_input(player_in):
        result = place_marker(test_board, 'X', player_in)
        clear_screen()
        display_board(result)
        if check_win(test_board, 'X'):
            print("You won")
        else:
            check_player_input()

def place_marker(board, marker, position):
    board[position] = marker
    return board


def check_win(board, marker):
    if board[0] == board[1] == board[2] == marker:
        return True
    if board[0] == board[3] == board[6] == marker:
        return True
    if board[0] == board[4] == board[8] == marker:
        return True
    if board[2] == board[5] == board[8] == marker:
        return True
    if board[6] == board[7] == board[8] == marker:
        return True
    if board[2] == board[4] == board[6] == marker:
        return True
    return False


if __name__ == "__main__":
    display_board(test_board)
    check_player_input()
</code></pre>
<p>Two other things: 1. your logic for winning is not complete. 2. search about the <code>if __name__ == "__main__":</code>, it's better to use that.</p>
    </div>