<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>

<p>Your code does not handle <code>value == null</code> everywhere.</p>

<blockquote>
<pre><code>object value = property.GetValue(obj, null);
Type valueType = value.GetType();   // &lt;- can throw the infamous NRE
</code></pre>
</blockquote>

<h3>Review</h3>

<ul>
<li>Use a clear method name <code>RenderProperties</code>.</li>
<li><code>int tabs = 0</code> does not allow flexibility for rendering <em>indents</em>. Use <code>string indent = "\t"</code> instead.</li>
<li><code>this T obj</code> is fine, but I would prefer <code>this T source</code>.</li>
<li><code>string result = string.Empty;</code> and <code>result += ..</code> use a <code>System.Text.StringBuilder</code> instead; much better memory management. </li>
<li>Use <em>var syntax</em> <code>var resultBuilder = new StringBuilder();</code>.</li>
<li><code>obj.GetType().GetProperties();</code> should be extended to <em>public</em>, <em>instance</em> <code>BindingFlags</code> properties with <code>CanRead</code>, <code>GetGetMethod(false) != null</code> and <code>GetIndexParameters().Length == 0</code> to only include the publically accessible getter properties of the instance.</li>
<li><code>valueType.Name.Equals("String")</code> should be <code>value is String</code>. But perhaps you need a better strategy for determining which objects are <em>complex</em> ..</li>
<li><code>for (int i = 0; i &lt; tabs; i++) { result += ..</code> gets replaced completely with <code>indent</code> as earlier specified.</li>
<li><code>string.Format("{0}: {1}\n" ..</code> should use <code>Environment.NewLine</code>, or even better use an overload on <code>StringBuilder</code> called <code>AppendFormatLine</code>. Same thing in the <code>else</code> clause.</li>
<li><code>PropertiesToString(value, ++tabs);</code> can be replaced by <code>PropertiesToString(value, indent + indent);</code>.</li>
</ul>

<h3>Your Code Edited</h3>

<ul>
<li><p>I have decoupled retrieving properties from rendering. However, in another answer was suggested to go further and use a <code>tree walker</code> to adhere to best practices. That would be even better.</p></li>
<li><p>I am asserting array or other collections do not require their items to be visited, and the complete object graph is a tree. You did never specify how to handle cyclic graphs, so they are out of scope :)</p></li>
</ul>

<p>Render properties:</p>

<pre><code>public static string RenderProperties&lt;T&gt;(this T source, string indent = "\t") 
            where T : class
{
    if (source == null) return string.Empty;
    indent = indent ?? string.Empty;
    var builder = new StringBuilder();
    var properties = GetAccessibleProperties(source);

    foreach (var property in properties)
    {
        RenderProperty(property, source, builder, indent);
    }

    return builder.ToString();
}
</code></pre>

<p>Render property:</p>

<pre><code>private static void RenderProperty(
            PropertyInfo property, object parent, StringBuilder builder, string indent)
{
    Debug.Assert(property != null);
    Debug.Assert(parent != null);
    Debug.Assert(builder != null);
    Debug.Assert(indent != null);

    var name = property.Name;
    var value = property.GetValue(parent, null); // &lt;- need to handle exception?

    if (value == null)
    {
        builder.AppendLine($"{indent}{name}: ");
    }
    else if (value.GetType().IsValueType || value is string)
    {
        builder.AppendLine($"{indent}{name}: {value}");
    }
    else
    {
        builder.AppendLine(RenderProperties(value, indent + indent));
    }
}
</code></pre>

<p>Get accessible properties:</p>

<pre><code>private static IEnumerable&lt;PropertyInfo&gt; GetAccessibleProperties(object source)
{
    Debug.Assert(source != null);
    // optimized for readibility over performance -&gt;
    var properties = source.GetType()
            .GetProperties(
                  BindingFlags.Instance             // only instance properties
                | BindingFlags.Public)              // publicly accessible only
            .Where(x =&gt;
                   x.CanRead                             // must have getter
                &amp;&amp; x.GetGetMethod(false) != null         // must have public getter
                &amp;&amp; x.GetIndexParameters().Length == 0);  // must not be an indexer
    return properties;
}
</code></pre>
    </div>