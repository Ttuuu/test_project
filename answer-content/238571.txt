<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the simplicity of this code. It may needs some improvements, but these are just to make it more flexible to be adopted to other projects (if it's intended for that). </p>

<p>For most part, you've put the main functionalities on an extension class, which is something I wouldn't do myself. I think It would be better if Add, Remove, Get, and Set functionalities to be inside the main class. Then, if you want to make an extension to them, just call them back. This would make them more maintainable and easy to expand for future projects.</p>

<p>Also, the code missing the <code>null</code> validations, which you must consider all the time. </p>

<p>Another thing that I've noticed, there are many <code>boxing</code> and <code>unboxing</code> (dynamic to object and vise versa). try to minimize these castings.</p>

<p>Final part, I would suggest readjusting the class to be a thin layer on top of <code>ExpandoObject</code> that meant to simplify its functionalities, and use interface to make a contract that would help in future uses. </p>

<p>Here is what I have in my mind, something might be useful (I hope) : </p>

<pre><code>public interface IExpando
{
    void AddOrUpdateProperty(string propertyName, object propertyValue);

    dynamic GetProperty(string propertyName);

    bool RemoveProperty(string propertyName);

    IDictionary&lt;string, dynamic&gt; GetProperties();
    // any other properties or methods that you think it's a must have
}

public class Expando : IExpando
{
    private readonly ExpandoObject _root;

    public Expando(dynamic value) { _root = InitiateInstance(value); }

    public dynamic this[string propertyName] 
    {
        get =&gt; GetProperty(propertyName);
        set =&gt; AddOrUpdateProperty(propertyName, value);
    }

    private ExpandoObject InitiateInstance(dynamic value)
    {
        if (value is null) { throw new ArgumentNullException(nameof(value)); }

        if (value.GetType() == typeof(ExpandoObject)) { return value; }

        if (!value.GetType().IsGenericType) { throw new Exception("No generic type"); }

        _root = new ExpandoObject();

        (value as object)?
        .GetType()
            .GetProperties()
            .ToList()
            .ForEach(p =&gt; AddOrUpdateProperty(p.Name, p.GetValue(value)));

        return _root;
    }   

    public void AddOrUpdateProperty(string propertyName, object propertyValue) { ...  }

    public bool RemoveProperty(string propertyName) { ... }

    public dynamic GetProperty(string propertyName) { ... }

    public IDictionary&lt;string, dynamic&gt; GetProperties() =&gt; _root as IDictionary&lt;string, dynamic&gt;;

}

public static class ExpandoExtension
{
    public static Expando ToExpando(this ExpandoObject expando)
    {
        return new Expando(expando); 
    }
}
</code></pre>

<p>these are just a sketch, you can implement even something better, and make it a more suitable for an open-source library that would be easy to use. For the extension, my thought is just you want one extension to return a new <code>Expando</code>, with that you're enforcing the usage of your class. </p>

<p>Also, you can define a private <code>Dictionary&lt;string, dynamic&gt;</code> and use it instead of casting the expandoObject on each method, and just store the results inside the _root. </p>

<p>I hope this would be useful. </p>
    </div>