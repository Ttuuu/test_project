<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>OnAuthorization()</strong>  </p>

<p>If the possibility exists that <code>HttpContext.Current.User.Identity.Name</code> dosn't contain <code>\</code> the call to <code>alias.Substring()</code> will fail. Instead of calling two times <code>alias.IndexOf("\\")</code> you could use <code>string.Split()</code>.  </p>

<p>This  </p>

<pre><code>if (CheckAccess(accessLevel, alias, domain))
{
    return;
}  
</code></pre>

<p>is a little bit useless. You don't rellay care about the returned value of <code>CheckAccess()</code> hence you could remove it. But I guess thats not what you want. Instead you should e.g throw an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.authentication.authenticationexception?redirectedfrom=MSDN&amp;view=netframework-4.8" rel="nofollow noreferrer"><code>AuthenticationException</code></a>.  </p>

<p><strong>CheckAccess</strong>  </p>

<p><code>PrincipalContext</code>, <code>GroupPrincipal</code> and <code>UserPrincipal</code> are implementing the <code>IDisposable</code> interface, hence its best practice to enclose the usage in a <code>using</code> block.  </p>

<p>Local variables should, based on the .NET Naming Guidelines, be named using <code>camelCase</code> casing and shouldn't use abbreviations. Hence <code>AdUser</code> should be <code>activeDirectoryUser</code> and <code>AdGroup</code> should be <code>activeDirectoryGroup</code>.  </p>

<p>You should validate <code>group</code> and <code>userDomain</code> wether you really need to do the loop and you could store the result in a <code>bool</code> as well like so  </p>

<pre><code>bool userDomainIsInDomain1 = userDomain.ToLower().Contains("domain1");
bool userDomainIsInDomain2 = userDomain.ToLower().Contains("domain2");
bool groupCanWrite = group == "WRITE";  

if(!userDomainIsInDomain &amp;&amp; !userDomainIsInDomain2 &amp;&amp; !groupCanWrite)
{ 
    return false;
}  
</code></pre>

<p>We can now use the introduced <code>bool</code> variables in the loop like so  </p>

<pre><code>foreach (Domain domain in forest.Domains)
{
    if (domain.Name.Contains("domain1"))
    {
        using (var ctx = new PrincipalContext(ContextType.Domain, domain.Name, null, ContextOptions.Negotiate | ContextOptions.SecureSocketLayer, "username", "password"))
        {
            if (groupCanWrite)
            {
                activeDirectoryGroup = GroupPrincipal.FindByIdentity(ctx, "group1");
            }

            if (userDomainIsInDomain1)
            {
                activeDirectoryUser = UserPrincipal.FindByIdentity(ctx, user);
            }
        }
    }
    else if (domain.Name.Contains("domain2"))
    {
        if (userDomainIsInDomain2)
        {
            using(var ctx = new PrincipalContext(ContextType.Domain, domain.Name, null, ContextOptions.Negotiate | ContextOptions.SecureSocketLayer, "username", "password"))
            {
                activeDirectoryUser = UserPrincipal.FindByIdentity(ctx, user);
            }
        }
    }
}  
</code></pre>

<p>but wait we can do better than that. We should extract two methods, one to get the an <code>UserPrincipal</code> and one to get a <code>GroupPrincipal</code>.  </p>

<pre><code>private UserPrincipal FetchUserPrincipal(string domainName, string userName, string password, string user)  
{
    using (var ctx = new PrincipalContext(ContextType.Domain, domainName, null, ContextOptions.Negotiate | ContextOptions.SecureSocketLayer, userName, password))
    {
        return UserPrincipal.FindByIdentity(ctx, user);
    }
}
</code></pre>

<p>I am unsure about the <code>user</code> variable because I don't know if <code>user</code> is the same as <code>"username"</code>.  </p>

<pre><code>private GroupPrincipal FetchGroupPrincipal(string domainName, string userName, string password, string groupName)  
{
    using (var ctx = new PrincipalContext(ContextType.Domain, domainName, null, ContextOptions.Negotiate | ContextOptions.SecureSocketLayer, userName, password))
    {
        return GroupPrincipal.FindByIdentity(ctx, groupName);
    }
}  
</code></pre>

<p>After implementing these methods the former <code>CheckAccess()</code> method will look like this  </p>

<pre><code>private bool CheckAccess(string group, string user, string userDomain)
{
    bool userDomainIsInDomain1 = userDomain.ToLower().Contains("domain1");
    bool userDomainIsInDomain2 = userDomain.ToLower().Contains("domain2");
    bool groupCanWrite = group == "WRITE";  

    if(!userDomainIsInDomain &amp;&amp; !userDomainIsInDomain2 &amp;&amp; !groupCanWrite)
    { 
        return false;
    }  

    GroupPrincipal activeDirectoryGroup = null;
    UserPrincipal activeDirectoryUser = null;
    using (Forest forest = Forest.GetCurrentForest())
    {
        foreach (Domain domain in forest.Domains)
        {
            if (domain.Name.Contains("domain1"))
            {
                if (groupCanWrite)
                {
                    activeDirectoryGroup = FetchGroupPrincipal(domain.Name, "username", "password", "group1"); 
                }

                if (userDomainIsInDomain1)
                {
                    activeDirectoryUser = FetchUserPrincipal(domain.Name, "username", "password", user); 
                }
            }
            else if (userDomainIsInDomain2 &amp;&amp; domain.Name.Contains("domain2"))
            {
                activeDirectoryUser = FetchUserPrincipal(domain.Name, "username", "password", user); 
            }
        }  

        if (AdGroup != null &amp;&amp; AdUser != null)
        {
            return AdUser.IsMemberOf(AdGroup);
        }
        return false;
     }
}
</code></pre>

<p>As you can see, I have simplified the <code>if..else</code> at the bottom as well.</p>
    </div>