<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your outer loop…</p>

<blockquote>
<pre><code>with open('hail.in') as f:
    l = f.readline()
    while l:
        …
        l = f.readline()
</code></pre>
</blockquote>

<p>… should be more idiomatically written as:</p>

<pre><code>with open('hail.in') as f:
    for l in f:
        …
</code></pre>

<p>Also, the inner counting loop, with <code>i += 1</code>, would be more idiomatically written using <code>for i in <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer">itertools.count()</a>: …</code>.</p>

<hr>

<p>This code looks like you are code-golfing:</p>

<blockquote>
<pre><code>while l:
    n, a, b, i = int(l[:-1]), [], { 4, 2, 1 }, 0
</code></pre>
</blockquote>

<p>While <code>n</code> and <code>i</code> are acceptable, the other one-letter names are too cryptic.  Renaming <code>l</code> → <code>line</code>, <code>a</code> → <code>seq</code>, and <code>b</code> → <code>steady</code> would make the code much easier to understand.</p>

<p>Why do you write <code>l[:-1]</code>?  Is the <code>-1</code> to strip the trailing newline?  You don't need to do that: <code>int()</code> automatically disregards trailing whitespace.</p>

<hr>

<p>The code for counting the steps for each <code>n</code> should be extracted into a separate function, since it is a deterministic function of <code>n</code>.</p>

<p>You don't need to build the list <code>a</code> to determine how long the sequence is.</p>

<p>Use the <code>//</code> operator for integer division.  Floating-point division is wasteful.</p>

<hr>

<p>Instead of calling <code>print()</code> with multiple arguments, use one of the string-formatting mechanisms in Python (e.g. <code>str.format()</code> or f-strings).</p>

<h2>Suggested solution</h2>

<pre><code>from itertools import count

def steps(n):
    """
    Count the number of steps for the hailstone sequence starting at n to
    reach a steady state of 4, 2, 1, 4, 2, 1, ...
    """
    for i in count():
        if n in { 4, 2, 1 }:
            return i
        n = n // 2 if n % 2 == 0 else 3 * n + 1

with open('hail.in') as f:
    for line in f:
        n = int(line)
        print('{0} steps were necessary for {1}.'.format(steps(n), n))
</code></pre>
    </div>