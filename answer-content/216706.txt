<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, <a href="https://pythonclock.org/" rel="nofollow noreferrer">Python 2 is going to be no longer supported in less than a year</a>. If you are starting to learn Python now, learn Python 3. In your code the only differences are that <code>print</code> is a function now and no longer an expression (so you need <code>()</code>) and that <code>raw_input</code> was renamed <code>input</code> (and the Python 2 <code>input</code> basically no longer exists).</p>

<p>Your building of the root dictionary can be simplified a bit using a dictionary comprehension:</p>

<pre><code>from string import ascii_lowercase

num_to_letter = {str(i): c for i, c in enumerate(ascii_lowercase, 1)}
</code></pre>

<p>For the first three different permutations you can use tuple unpacking:</p>

<pre><code>first, second, third = sequence_to_convert
</code></pre>

<p>Note that you are currently not validating if the user entered a valid string. The minimum you probably want is this:</p>

<pre><code>from string import digits
digits = set(digits)

sequence_to_convert = input('Enter three digit number \n')
if len(sequence_to_convert) != 3:
    raise ValueError("Entered sequence not the right length (3)")
if not all(x in digits for x in sequence_to_convert):
    raise ValueError("Invalid characters in input (only digits allowed)")
</code></pre>

<p>(A previous version of this answer used <code>str.isdigit</code>, but that unfortunately returns true for digitlike strings such as <code>"ยน"</code>...)</p>

<p>Your testing and printing can also be made a bit easier by putting the possible permutations into a list and iterating over it:</p>

<pre><code>permutations = [(first, second, third), (first, fifth), (fourth, third)]
for permutation in permutations:
    if all(x in num_to_letter for x in permutation):
        print("".join(map(num_to_letter.get, permutation)))
</code></pre>

<p>However, in the end you would probably want to make this more extendable (especially to strings longer than three). For that you would need a way to get all possible one or two letter combinations, and that is hard. It is probably doable with an algorithm similar to <a href="https://stackoverflow.com/a/30134039/4042267">this one</a>, but it might be worth it to ask a question on <a href="https://stackoverflow.com/">Stack Overflow</a> about this.</p>
    </div>