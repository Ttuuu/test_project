<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>is_prime</code> should use a <code>for</code> loop, not a <code>while</code> loop.</li>
<li><code>nth_prime_number</code> should use <code>while True</code>, rather than <code>while count &lt;= n</code>, as you'll never meet that condition.</li>
<li><code>#optimization</code> is of no help, how's it an optimization?</li>
<li><code>nth_prime_number</code> would be better written as two functions an infinite generator, and a function that picks the nth prime.</li>
<li><code>is_prime</code> can be significantly shortened if you use <code>any</code>.</li>
</ul>

<p>This can get you:</p>

<pre><code>from itertools import count, islice

def is_prime(num):
    return any(
        num % factor
        for factor in range(2, num)
    )

def generate_primes():
    yield 2
    for num in count(3, 2):
        if is_prime(num):
            yield num

def nth_prime_number(n):
    return next(islice(generate_prime(), n, None))
</code></pre>

<p>You use the increment by two optimization, but you don't need to check numbers that are greater than \$\sqrt{n}\$. And you can increment in multiples of six, and picking two numbers to the side of it - \$6nâˆ’1\$ and \$6n+1\$.</p>

<p>However it'd be best if you used a sieve, such as the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a>. Where you'd base your algorithm off this <a href="https://math.stackexchange.com/a/1259">Math.SE answer</a>.</p>
    </div>