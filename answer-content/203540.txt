<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(I don't know Django and so some aspects of my review may be wrong)</p>

<ol>
<li><p>I first removed most of your functions, as things like <code>increment</code> aren't really that helpful.
It also leaves your code with everything in one place, so that when you try to improve it you can see everything.</p></li>
<li><p>I then used guard clauses to reduce the amount of indentation <code>post</code> needs.</p>

<p>Take the following change for example, with it you know that you only perform actions on post requests. Where with your code it would take longer to know that.</p>

<pre><code>if request.method != 'POST':
    return HttpResponseRedirect(self.SUCCESSFUL_URL)
</code></pre></li>
<li><p>Assuming <code>Document.objects.get(id=checkbox)</code> doesn't have any side effects, then I'd just make it a variable.</p></li>
<li><p>I would reduce the amount of variables you have. Most of your lines of code were just variables that are used once.</p>

<pre><code># Original
context = {'publication_title': Document.objects.get(id=checkbox).publication.title}

# With (3)
context = {'publication_title': document.publication.title}
</code></pre>

<p>With (3) all you have to do is add <code>document</code> to your variable, and it removes a line of code. And so it improves readability at the expense of having to write <code>document</code> a couple more times.</p></li>
<li><p>I'd hope Django objects support <code>+=</code> and so you can change <code>increment</code> to use it.</p>

<pre><code>model.nb_download += 1
</code></pre></li>
<li><p>I'd make a function <code>email</code> that takes a couple of arguments but performs all <code>EmailMultiAlternatives</code> and <code>get_template</code> handling.</p></li>
</ol>



<pre><code>from django.template.loader import get_template
from django.core.mail import EmailMultiAlternatives
from django.views.generic import CreateView

import hashlib

from .models import Publication, Document, Download


def gen_token(*values):
    plain = ''.join([str(i) for i in values] + [str(datetime.now())])
    return hashlib.sha1(plain.encode('utf-8')).hexdigest()


class FreepubHomeView(CreateView):
    """ Render the home page """

    template_name = 'freepub/index.html'
    form_class = CustomerForm
    SUCCESSFUL_URL = reverse('freepub-home')

    def get_context_data(self, **kwargs):
        kwargs['document_list'] = Document.objects.all().order_by('publication__category__name')
        return super(FreepubHomeView, self).get_context_data(**kwargs)

    def email(self, email, upload, title, edqm_id):
        context = {
            'document_link': upload,
            'publication_title': title
        }
        subject = 'EDQM HelpDesk and Publications registration'
        message = get_template('freepub/message.txt').render(context)
        mail = EmailMultiAlternatives(subject, message, 'freepub@edqm.eu', [email])
        html_message = get_template('freepub/message.html').render(context)
        mail.attach_alternative(html_message, "text/html")
        #mail.attach_file(document.upload.path)  # Add attachement
        mail.send(fail_silently=False)
        print('Email envoyé à ' + email)
        messages.success(request, str(title) + '\n' + 'You will receive an e-mail with your access to ' + edqm_id)

    def post(self, request, *args, **kwargs):
        if request.method != 'POST':
            return HttpResponseRedirect(self.SUCCESSFUL_URL)

        form = self.form_class(request.POST)
        email = request.POST['email']
        for checkbox in request.POST.getlist('DocumentChoice'):
            document = Document.objects.get(id=checkbox)
            token = gen_token(email, document.edqm_id)
            Download.objects.create(email=email, pub_id=checkbox, token=token)
            if not form.is_valid():
                print('form invalid')
                continue
            self.email(email, document.upload, document.publication.title, document.eqdm_id)
            document.nb_download += 1
            document.save()
            publication = Publication.objects.get(id=document.publication.id)
            publication.nb_download += 1
            publication.save()
        return HttpResponseRedirect(self.SUCCESSFUL_URL)
</code></pre>
    </div>