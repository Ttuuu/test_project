<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Deriving from <code>IEqualityComparer</code> versus <code>EqualityComparer</code>.</h1>

<p>The MSDN docs say the following:</p>

<blockquote>
  <p>We recommend that you derive from the EqualityComparer class instead of implementing the IEqualityComparer interface, because the EqualityComparer class tests for equality using the IEquatable.Equals method instead of the Object.Equals method. This is consistent with the Contains, IndexOf, LastIndexOf, and Remove methods of the Dictionary class and other generic collections.<br>
  <sub><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.iequalitycomparer-1?view=netframework-4.8" rel="noreferrer">MSDN docs: IEqualityComparer</a></sub></p>
</blockquote>

<h1><code>Dictionary</code> versus <code>Lookup</code></h1>

<p>For grouping together objects from a sequence, where there might be a varying amount of items in each group, a <code>Lookup</code> is better than a <code>Dictionary</code>:</p>

<pre><code> var lookup = strs.ToLookup(key =&gt;
 {
     var array = key.ToCharArray();
     Array.Sort(array);
     return array;
 }, new CharComparer());
 return lookup.Select(grouping =&gt; (IList&lt;string&gt;)grouping.ToList()).ToList();
</code></pre>

<h1>Comparing char-arrays</h1>

<p>Since we're using <code>Linq</code>, let's use <code>Linq</code>:</p>

<pre><code>public override bool Equals(char[] x, char[] y)
{
    if (x == null || y == null)
    {
        return false;
    }

    if (x.Length != y.Length)
    {
        return false;
    }

    return x.SequenceEqual(y);
}
</code></pre>

<p>The null behaviour is different and the length shortcut may stay, but the last loop we can offload to <code>Linq</code>.</p>

<h1>Hashcode</h1>

<p>Both <code>Dictionary</code> and <code>Lookup</code> rely on the hashcode returned by the equalitycomparer to categorise the keys into bins. These bins is what allows these collections to get times in <span class="math-container">\$O(1)\$</span>. Always returning the same value is going to cause problems when your inputs get bigger. It will effectively turn the collections into single arrays which have to be looped over to get to the correct key. </p>

<p>Creating good hashcodes is hard though, and I don't really know a good rule of thumb for creating them.</p>

<h1><code>char[]</code> versus <code>string</code></h1>

<p>All in all, the hashcode and equalitycomparer is such a headache, it's probably easier, and more readable to convert the sorted <code>char[]</code> back into a <code>string</code>, and use that as the key for the lookup:</p>

<pre><code> var lookup = strs.ToLookup(key =&gt;
 {
     var array = key.ToCharArray();
     Array.Sort(array);
     return new string(array);
 });
 return lookup.Select(grouping =&gt; (IList&lt;string&gt;)grouping.ToList()).ToList();
</code></pre>
    </div>