<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks OK to me. You can avoid the <code>List.ofArray</code> call, if you change the arguments to <code>intToCoord</code> and <code>containsOrigin</code> to arrays instead of lists:</p>

<pre><code>let intToCoord [|x; y|] = { x = x; y = y }

let containsOrigin [|a; b; c|] =
    twiceTriangleArea a b c = twiceTriangleArea origin a b +
        twiceTriangleArea origin b c +
        twiceTriangleArea origin a c



let solution =
    System.IO.File.ReadLines "p102_triangles.txt"
    |&gt; Seq.map (fun line -&gt; 
        line.Split ',' |&gt; Array.map int |&gt; Array.chunkBySize 2 |&gt; Array.map intToCoord
    )
    |&gt; Seq.filter containsOrigin
    |&gt; Seq.length
</code></pre>

<hr>

<p><strong>Update</strong>:</p>

<p>You could though "rearrange" the mapping from <code>string</code> to a "triangle" in this way:</p>

<pre><code>let toCoord [|x; y|] = { x = int x; y = int y}

let toTriangle line = (string line).Split ',' |&gt; Array.chunkBySize 2 |&gt; Array.map toCoord
</code></pre>

<p>And then change the main function to:</p>

<pre><code>let solution =
    System.IO.File.ReadLines "p102_triangles.txt"
    |&gt; Seq.map toTriangle
    |&gt; Seq.filter containsOrigin
    |&gt; Seq.length
</code></pre>

<p>In this way you gain more even abstraction levels in the pipe chain in the main function.</p>
    </div>