<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is room for improvement in your code, I'll give a few pointers of things that stand out to me.</p>

<h1>DRY (Don't Repeat Yourself)</h1>

<p>There is a lot of copied and pasted code in your work. It makes it harder to read and much harder to maintain.</p>

<p>To initialize the board, you manually put in 49 instances of a class with some parameters changing. What if you want to allow another empty space than the center one? Or a different shape of board? I Have seen a lot of variation around this game, and your solution is not flexible at all.</p>

<p>One option would be using list comprehensions:</p>

<pre><code>board = [[not i == j == 3 if i in [2, 3, 4] or j in [2, 3, 4] else None for j in range(7)] for i in range(7)]
</code></pre>

<p>I'll admit it gets hard to read, and still isn't very flexible. I still think it is an improvement, as there are a lot less things to change if you want to change the starting board. This example fills a 7*7 array with <code>None</code> representing invalid spaces, <code>True</code> representing occupied spaces and <code>False</code> representing empty space.</p>

<p>Another method would be to parse a file containing a representation of the initial board, like:</p>

<pre><code>..ooo..
..ooo..
ooooooo
oooxooo
ooooooo
..ooo..
..ooo..
</code></pre>

<p>You also copied and slightly modified code in the <code>check_move</code> method, which is not friendly to read.</p>

<h1>Convoluted logic</h1>

<p>The <code>check_move</code> method has 4 levels of nested <code>if / elif / else</code> statements, not counting the loops, making the program flow very hard to follow.</p>

<h1>Separation of concerns</h1>

<p>You said you tried to separate the game logic from the <code>Tkinter</code> representation. This is not really the case, for example your <code>Tkinter</code> buttons point to a BoardPart item which in turn contain a reference to the button.</p>

<p>It would be better to have a game object that can be called by the <code>Tkinter</code> model, or by any other model. Before adding the <code>Tkinter</code> UI, it can be nice to be able to test the game logic in the terminal. Yet your game logic isn't independent enough to allow that.</p>

<h1>Redundant information</h1>

<p>The BoardPart class contains useless info. I has a reference to the <code>Tkinter</code> buttons (it shouldn't, as stated before) and to the row and column of the piece (that info in contained in the index of the <code>board</code> array containing the object).</p>

<p>A BoardPart object really has 3 states: empty, with a peg, or it doesn't exist (in which case it can't have a peg). This is why I chose to use <code>None</code>, <code>True</code> and <code>False</code> in a 2-dimensional list to represent it in my earlier example. The indices of the list carry the <code>row</code> and <code>column</code> information</p>

<h1>Documentation</h1>

<p>Your code has no comments or docstrings. It makes it hard to understand for someone unfamiliar with it, and will make it hard to work on it again in the future.</p>

<h1>Improvements</h1>

<p>Your game runs fine. As you stated, it can be improved with a way to detect a winning or losing state, or by adding support for different starting boards.</p>

<h1>Putting it all together</h1>

<p>Here is my attempt at solving these issues. I did not work on a graphical part, but the game is functional and self-contained. It includes a <code>__main__</code> guard allowing to run it directly and play in terminal, or import it from a <code>Tkinter</code> script (or for any other purpose).</p>

<pre><code>class Game:
    """A simple peg solitaire game"""

    def __init__(self):
        """"Initialize the board when creating an instance"""
        self.board = [[not i == j == 3 if i in [2, 3, 4] or j in [2, 3, 4] else None for j in range(7)] for i in range(7)]


    def try_move(self, origin_x, origin_y, target_x, target_y):
        """If a move is valid from origin to target, move the peg and
        remove the peg in between from the board

        Does nothing if the move is invalid"""
        if not self._is_valid_move(origin_x, origin_y, target_x, target_y):
            return

        self.board[origin_x][origin_y] = False
        self.board[target_x][target_y] = True
        self.board[(origin_x + target_x) // 2][(origin_y + target_y) // 2] = False


    def _is_valid_move(self, origin_x, origin_y, target_x, target_y):

        if self.board[origin_x][origin_y] is none:
            return False   # origin is out of bounds
        if self.board[target_x][target_y] is none:
            return False   # target is out of bounds

        if not self.board[origin_x][origin_y]:
            return False   # origin is empty
        if self.board[target_x][target_y]:
            return False   # target is occupied

        # otherwise, if distance between origin and target is 2, return if
        # there is a peg between them
        if abs(origin_x - target_x) == 2 and origin_y == target_y:
            return self.board[(origin_x + target_x) // 2][origin_y]
        if abs(origin_y - target_y) == 2 and origin_x == target_x:
            return self.board[origin_x][(origin_y + target_y) // 2]

        return False   # not the right distance between orogin and target

    def check_win(self):
        """Returns True if a single peg is left on the board, 
        False otherwise"""
        peg_count = 0
        for row in self.board:
            for space in row:
                if space:
                    peg_count += 1
        return peg_count == 1

    def check_loss(self):
        """Not implemented

        The general approach would be to check if a valid move exists for
        all pegs remaining on the board"""
        return False 

    def print_board(self):
        """Print a simple representation on the board on the terminal"""
        for row in self.board:
            for space in row:
                if space is None:
                    print(" ", end="")
                elif space:
                    print("o", end="")
                else:
                    print("x", end="")
            print("")



if __name__ == '__main__':
    game = Game()
    while(not (game.check_win() or game.check_loss())):
        game.print_board()
        x0 = int(input('origin x\n'))
        y0 = int(input('origin y\n'))
        x1 = int(input('target x\n'))
        y1 = int(input('target y\n'))
        game.try_move(x0, y0, x1, y1)
    if game.check_win():
        print("Well Done")
    else:
        print("Try again")    
</code></pre>
    </div>