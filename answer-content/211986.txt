<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with comments about the code you've submitted, before we discuss some more important overlying concepts and design decisions.</p>

<p>Good</p>

<ul>
<li>Docstrings for each method (some could be more helpful though, like <code>__len__</code>)</li>
<li>Some comments for perhaps unclear lines</li>
<li>Python 3 style classes (didn't inherit from <code>object</code>)</li>
<li>You have unit tests!</li>
<li>Good use of <code>ValueError</code></li>
</ul>

<p>Improvements</p>

<ul>
<li>You don't need <code># -*- coding: utf-8 -*-</code> with Python 3</li>
<li>You formatting is pretty inconsistent. Try <a href="https://pypi.org/project/pycodestyle/" rel="nofollow noreferrer">PEP8</a> (it's the standard formatting that most projects adhere to)</li>
<li>You seem to prefix a lot of variables with <code>_</code>. It seems like you may be confused about kwargs. If you do <code>foo(bar=1)</code>, <code>bar</code> is not a variable. So if you had <code>bar = 1</code>, it's perfectly legal (and encouraged) to do <code>foo(bar=bar)</code>. Although, consider if it really is unclear what the param means. Perhaps a positional arg works just fine. If that's not the case, we basically exclusively use <code>_</code> for private instance properties (like <code>self._start</code>)</li>
<li>Your <code>test_compare_basic</code> isn't actually a test case. Methods starting with <code>test_</code> should exercise a specific test case or group of test cases. <code>test_compare_basic</code> is actually a generic way of testing any range. Writing it was a fantastic idea, because it makes writing the later tests much more succinct and clear. However, naming it <code>test_</code> means that it is run by the test harness (and it shouldn't be run alone). I usually call these functions <code>assert*</code> to match the unittest framework (camelCase unfortunately, as this is what <code>unittest</code> does, but you could break this if you wanted). Eg. name it <code>assertFloatRangeCorrect</code>. Then your tests look like:</li>
</ul>



<pre><code>    def test_simple_float_ranges(self):
        # These reads much more like sentences now...
        self.assertFloatRangeCorrect(0.5, 5.0, 0.5)
        self.assertFloatRangeCorrect(1, 2, 0.25)
</code></pre>

<ul>
<li>I see you have <code>try</code>/<code>except</code> in your tests to print a message. You shouldn't be doing this. For one, the message won't be grouped with the error (or it's stack trace). You can just pass the extra optional <code>msg</code> argument to <code>assertEqual</code>: <code>self.assertEqual(len(actual), len(expected), f'len({actual}) != len({expected})')</code> (notice my use of f-strings, they're definitely cleaner here). By doing this, your tests become a lot shorter and you avoid the <code>try</code>/<code>except</code>/<code>raise</code> dance.</li>
<li>For testing exact equality, instead of <code>zip</code>ing two iterables just use <code>self.assertEqual(iterable_a, iterable_b)</code>. This will also produce a nice error message automatically.</li>
<li>Your check against <code>Real</code> is strange (more on this later)</li>
<li>What is going on with the <code>_precision</code>, <code>_start</code>, and <code>_step</code>? You shouldn't have those.</li>
<li>Don't use <code>*args</code> like this in <code>__init__</code>. Use arg defaults. Eg. <code>def __init__(self, start=0, stop=1, step=1)</code> (I know this doesn't work perfectly with your current argument scheme, but later I'll argue you should change it)</li>
<li>In tuple unpacking (<code>(self.stop, ) = args</code>) you don't need the parens'</li>
<li>Your <code>__iter__</code> docstring should be a comment. It doesn't explain to a user of <code>FloatRange</code> how to use the class. But you can eliminate it, because that's obvious from the fact you <code>return self</code>.</li>
<li>Having the range be it's own iterator is strange (and uncommon). And I'll argue against it later.</li>
<li>Minor nit but in <code>__str__</code> use <code>repr(self)</code>. We usually don't call dunder methods (with the prominent exception being <code>super().__init__(...)</code>).</li>
<li>In <code>__repr__</code> use <a href="https://cito.github.io/blog/f-strings/" rel="nofollow noreferrer">f-strings</a>. They much easier to construct and they give a better idea of the output format.</li>
<li>You should put <code>FloatRange</code> in <code>float_range.py</code> instead of <code>FloatRange.py</code></li>
<li>Comparing floats with <code>0</code> is usually not what you want. Rarely will the result of arithmetic be exactly 0. You want <code>math.isclose</code></li>
</ul>

<p>Now, let's talk about the big concept here. Python's builtin range doesn't support <code>float</code>s as you likely know. There is good reason for this. Floating point math does not always work as pen and paper decimal math due to representation issues. A similar problem would be adding 1/3 as a decimal by hand 3 times. You expect 1, but since you only have a finite number of decimals, it won't be exactly 1 (it'll be <code>0.99...</code>).</p>

<p>What does this have to do with your float range? It poses two interesting problems for the user of <code>FloatRange</code> if they're used to <code>range()</code>.</p>

<p>The upper bound may not produce the range that you expect due to representation errors alluded to above. Where we can know that <code>range(5)</code> will always have 5 numbers, we can't really be so sure about the length of <code>range(0, 10, 0.1)</code> (that is, unless the start, stop, and step are <strong>exactly</strong> 0, 10, and 0,1--floats are deterministic given the same operations in the same order) because of floating point inaccuracies. Sure, we can divide like you did. However, with your precision factor, I suspect that length won't always be right. The trouble here is we need to decide what <code>stop</code> means. For <code>range</code>, it's much easier to say because integers are exact. <code>range</code> can be thought of as filling in the number line between <code>start</code> and <code>stop</code> (excluding <code>stop</code>). We probably want to exclude <code>stop</code> too for consistency, but <code>FloatRange</code> is more of a finite set of points between <code>start</code> and <code>stop</code> exclusive. Because of this, membership is a little more tricky. You could define membership as being within the range or being an explicit member from the iteration of the range. For <code>range()</code>, these two are equivalent because integers are countable.</p>

<p>You seem to have chosen the later definition of <code>__contains__</code>. But, it does beg the question: is this actually meaningful? Is there a context where you'd need to check floating point within a tolerance of some number of (finite-representable) discrete points in some range.</p>

<p>As a result of these issues, this <code>FloatRange</code> is way more complicated than it needs to be. You also make some common mistakes with comparing floating point numbers that will fail for extrema.</p>

<p>As an aside, let's also take a look at your constructor parameters. You allow for 1, 2, or 3 arguments (excluding precision), like <code>range</code>. I think the only really meaningful constructors are the 2 and 3 argument ones. The single argument assumes a start of <code>0</code> and step of <code>1</code>. But, then this is precisely just <code>range</code> (so why not use <code>range</code>?). It seems like it's really only meaningful to define a floating point stop and step (with a start of 0) or all 3. But, if you really feel strongly about the 1 argument case, you can of course keep it.</p>

<p>Now that we've discussed the problems, let's take a stab at some solutions. I see two solutions.</p>

<p>You want a range starting at <code>start</code> that adds <code>step</code> until the number is <code>&gt;= stop</code>. This is more like what you've implemented (and similar to <code>range</code> in some regards, except its length is not constant-time computable). I'd recommend not defining <code>__len__</code>. If you do, you may want to warn that it is not constant time. Why is this? Well you could do <code>(stop - start) / step</code>, but as you likely found, this has accuracy issues. These are the same representation issues we mentioned above. Furthermore, it is difficult to account for fancier bounds checking (ie. if you want to keep producing numbers until one is less than or "close to" <code>stop</code> for some definition of close to--like within some <code>threshold</code>).</p>

<pre><code>from itertools import count, takewhile

class FloatRange:
    def __init__(self, start, stop=None, step=1):
        # No to handle # of arguments manually
        if stop is None:
            stop = start
            start = 0

        if any(not isinstance(x, float) for x in (start, stop, step)):
            raise ValueError('start, stop, step must be floats')
        if (start &lt; stop and step &lt; 0) or (start &gt; stop and step &gt; 0):
            raise ValueError('step sign must match (stop - start)')

        self.start = start
        self.stop = stop
        self.step = step

    def __iter__(self):
        return takewhile(lambda x: x &lt; self.stop, (self.start + i * self.step
                                                   for i in count(0)))
</code></pre>

<p>Note we need no custom iterator or lots of logic. <code>itertools</code> can do most of the heavy lifting. Furthermore, we can update the predicate <code>lambda x:</code> to also include some definition of less than or close to like so: <code>lambda x: x &lt; self.stop and not math.isclose(x, self.stop, ...)</code>. Look at <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow noreferrer"><code>math.isclose</code></a> to see what you need to pass (you need two params, not just tolerance). If you really need <code>__len__</code>:</p>

<pre><code>def __len__(self):
    count = 0
    for x in self:
        count += 1
    return count
</code></pre>

<p>I'd recommend against <code>__contains__</code> here because determining the index count have precision issues for extrema. Eg. <code>self.step * round((x - self.start) / self.step)</code> could be unstable.</p>

<p>You want a range that takes some pre-determinted number of <code>steps</code> of size <code>step</code> from <code>start</code>. Notice there is no stop here. <code>__len__</code> is immediately obvious. I'd recommend maybe not defining <code>__contains__</code> for now.</p>

<p>This case is very straightfoward:</p>

<pre><code>class FloatRange:
    def __init__(self, start, *, step=1, steps=0):  # here I require step and steps to be kwargs for clarity
        if any(not isinstance(x, float) for x in (start, step)):
            raise ValueError('start and step must be floats')
        if not isinstance(steps, int) or x &lt; 0:
            raise ValueError('steps must be a positive integer')

        self.start = start
        self.step = step
        self.steps = steps

    def __iter__(self):
        return (self[i] for i in range(self.steps))

    def __getitem__(self, i):
        if not 0 &lt;= i &lt; self.steps:
            raise IndexError('FloatRange index out of range')
        return self.start + i * self.step

    def __len__(self):
        return self.steps
</code></pre>

<p>Here we can easily define <code>__len__</code>. <code>__contains__</code> is still tricky, because determining the index of a potential member of the range could be unstable. Here, though, because we can compute the end of the range in constant time (it's exactly <code>start + steps * step</code>), we can do some sort of clever binary search. More specifically, we can search for numbers close to the desired numbers (for some metric of closeness that you determine) and stop once the numbers we find are less than the desired number and decreasing (negative step) OR greater than the desired number and increasing (positive step). This comes nearly for free because we were able to define <code>__getitem__</code> (which we couldn't before because we couldn't bound the indices). We note that in this way, this <code>FloatRange</code> behaves much more like <code>range()</code> even though the constructor parameters are different.</p>

<p>You may argue that since <code>steps</code> must be an integer, if you placed some sane limits on it then it would be impossible to construct a member whose index calculation is unstable. Unfortunately, because the index calculation involves a multiply/divide this is just not the case. By reading the IEEE 754 spec you can construct a degenerate case. Specifically, for large indices (which would initially be a float when resulting from the index computation) the floating point resolution is so wide that converting to an <code>int</code> does not produce the correct index. This is especially true for Python because <code>int</code> is arbitrary precision. </p>
    </div>