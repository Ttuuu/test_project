<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few remarks. Reviewing bottom-up.</p>

<hr>

<blockquote>
<pre><code>public class MultipleValuesDictionary&lt;key, value&gt;
</code></pre>
</blockquote>

<p>Don't name classes dictionary if they aren't one (implementing the <code>IDictionary&lt;,&gt;</code> interface). It's confusing.</p>

<p>You can derive a type from the dictionary instead of implementing only parts of it and inventing new vocabulary for it.</p>

<p>Don't come up with new generic parameters names. The conventions is to start the names with the uppercase letter <code>T</code>.</p>

<p>You could simply define it as:</p>

<pre><code>public class MultipleValuesDictionary&lt;TKey, TValue&gt; : Dictionary&lt;TKey, HashSet&lt;TValue&gt;&gt; { }
</code></pre>

<hr>

<blockquote>
<pre><code>public List&lt;value&gt; GetValuesOfTypeAtKey&lt;T&gt;(key k) where T : value
{
    HashSet&lt;value&gt; values = GetValues(k);
    return values.Where(o =&gt; (o.GetType() == typeof(T))).ToList();
}
</code></pre>
</blockquote>

<p>No dictionary should have such method. It's a special case and you could easily get what you need with the <code>OfType&lt;T&gt;</code> extension:</p>

<pre><code> var results = multipleValueDictionary[key].OfType&lt;MyType&gt;().ToList();
</code></pre>

<hr>

<blockquote>
<pre><code>public class DataBase &lt;key,obj&gt;
</code></pre>
</blockquote>

<p>This is an interesting class with an even more interesing naming convention:</p>

<blockquote>
<pre><code>public void AddEntry(key key, obj obj)
</code></pre>
</blockquote>

<p>Don't! Use <code>TKey</code> and  <code>TValue</code>.</p>

<p>The private <code>objectsHash</code> doesn't seem like it was necessary. The only place you use it for is</p>

<blockquote>
<pre><code>public HashSet&lt;obj&gt; GetAllObjects()
{
    return objectsHash;
}
</code></pre>
</blockquote>

<p>where you could simply use <code>SelectMany</code></p>

<pre><code> dictionary.Values.SelectMany(x =&gt; x)
</code></pre>

<hr>

<blockquote>
<pre><code>public class DirectionObj : Obj
</code></pre>
</blockquote>

<p>Everything seems to be either an <code>Obj</code> or have the suffix <code>-Obj</code>. Calling everything <code>obj</code> in an OO language is like you ware calling every-thing a thing. No one would understand you.</p>

<hr>

<blockquote>
<pre><code>public Direction dir { get; set; }
</code></pre>
</blockquote>

<p>Property names -&gt; PascalCase. No abbreviations.</p>

<hr>

<blockquote>
<pre><code>dir.direction = Direction.names.Up;
</code></pre>
</blockquote>

<p>The code lacks consistency but the <code>Obj</code> suffix :-)</p>
    </div>