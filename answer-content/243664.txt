<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Current code</h2>
<p>Before discussing the algorithm I want to discuss the current code.</p>
<p>The code currently uses functional approaches - like <code>forEach()</code> methods. This is great for readability but because a function is called for every iteration of each loop, performance can be worse than a regular <code>for</code> loop - e.g.  each function adds to the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack" rel="nofollow noreferrer">call stack</a>.</p>
<p>The current code also uses <code>hasOwnProperty</code>. For a plain object the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in" rel="nofollow noreferrer"><code>in</code> operator</a> could be used since it doesn't matter if the property would be inherited or not.</p>
<p>The last block is this:</p>
<blockquote>
<pre><code>const finalErr = []
</code></pre>
</blockquote>
<pre><code>Object.keys(triplet_memory).forEach(el =&gt; {
    const elements = el.split('/').map((element) =&gt; {
        return parseInt(element)
    })
    finalErr.push(elements)
})
return finalErr
</code></pre>
<p>It is interesting that there is a <code>.map()</code> call nested inside a <code>.forEach()</code> loop that pushes elements into an array - the latter is the essence of a <code>.map()</code> call. So the <code>.forEach()</code> could be simplified to a <code>.map()</code> call:</p>
<pre><code>return Object.keys(triplet_memory).map(el =&gt; {
    return el.split('/').map((element) =&gt; {
        return parseInt(element)
    })
})
</code></pre>
<p>This way there is no need to manually create <code>finalErr</code>, push elements into it and then return it at the end.</p>
<h2>Different Algorithm</h2>
<p>There are <a href="https://codereview.stackexchange.com/search?q=3sum">multiple posts about this problem on code review</a> (and <a href="https://stackoverflow.com/search?q=3sum">SO as well</a>). This buzzfeed article explains multiple approaches including <a href="https://fizzbuzzed.com/top-interview-questions-1/#the-hash-map-solution" rel="nofollow noreferrer"><em>The hash map solution</em></a> and <a href="https://fizzbuzzed.com/top-interview-questions-1/#twopointer" rel="nofollow noreferrer"><em>the two pointer trick</em></a>, the latter of those two is a great solution.</p>
<blockquote>
<h3>Two pointer trick</h3>
<p>The ‘two pointer trick’ gives a really nice solution to 3sum that doesn’t require any extra data structures. It runs really quickly and some interviewers ‘expect’ this solution (which might be somewhat unfair, but now that you’re seeing it, it’s to your advantage).<br><br>
For the two pointer solution, the array must first be sorted, then we can use the sorted structure to cut down the number of comparisons we do. The idea is shown in this picture:<br><br>
<a href="https://fizzbuzzed.com/assets/img/2pointer3sum.svg" rel="nofollow noreferrer"><img src="https://fizzbuzzed.com/assets/img/2pointer3sum.svg" alt="1"></a></p>
</blockquote>
<blockquote>
<pre><code>vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {
 vector&lt;vector&lt;int&gt;&gt; output;
 sort(nums.begin(), nums.end());
 for (int i = 0; i &lt; nums.size(); ++i) {
   // Never let i refer to the same value twice to avoid duplicates.
   if (i != 0 &amp;&amp; nums[i] == nums[i - 1]) continue;
   int j = i + 1;
   int k = nums.size() - 1;
   while (j &lt; k) {
     if (nums[i] + nums[j] + nums[k] == 0) {
       output.push_back({nums[i], nums[j], nums[k]});
       ++j;
       // Never let j refer to the same value twice (in an output) to avoid duplicates
       while (j &lt; k &amp;&amp; nums[j] == nums[j-1]) ++j;
     } else if (nums[i] + nums[j] + nums[k] &lt; 0) {
       ++j;
     } else {
       --k;
     }
   }
 }
 return output;
</code></pre>
</blockquote>
<p><sup><a href="https://fizzbuzzed.com/top-interview-questions-1/#twopointer" rel="nofollow noreferrer">1</a></sup></p>
    </div>