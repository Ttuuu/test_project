<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Lazy versus eager</h3>

<blockquote>
  <p>I don't materialize any of the IEnumerables</p>
</blockquote>

<p>Perhaps you should, because you're enumerating them many times, throwing away work again and again:</p>

<ul>
<li>In <code>Main</code>, that <code>nameMapping.Count()</code> debug output enumerates <code>nameMapping</code>, calling <code>GetName(node.Texture.Source)</code> for every item.</li>
<li>In <code>MapClasses</code>, there's a materializing <code>ToArray</code> call.</li>
<li>In <code>GetFieldValue</code>, <code>mapping.FirstOrDefault</code> has to enumerate <code>mapping</code> until it finds the first match. Because <code>mapping</code> is that same lazy <code>nameMapping</code> sequence, this too ends up calling <code>GetName(node.Texture.Source)</code> many times. It doesn't help that <code>GetFieldValue</code> gets called a lot - very likely resulting in <span class="math-container">\$O(n^2)\$</span> performance.</li>
<li>In <code>RecursiveSplitting</code>, you're enumerating the given sequence with a <code>foreach</code> loop. There's also a debug <code>Count()</code> call there, and you're appending several <code>Where</code> and <code>Select</code> calls to the given sequence, resulting in more work for deeper recursive calls.</li>
</ul>

<p>Or, in other words:</p>

<pre><code>var lazy = items.Select(DoExpensiveWork);   // Returns a select wrapper, cheap.
lazy.Count();                               // Enumerates, doing expensive work.
lazy.FirstOrDefault(AlwaysFalse);           // Enumerates again, repeating expensive work.
// DoExpensiveWork has been called twice for every item, but all the results have been thrown away.
// Enumerating 'lazy' will repeat that work.

// versus:

var eager = items.Select(DoExpensiveWork).ToArray();    // Materializes immediately, expensive.
eager.Count();                                          // No enumeration required, cheap.
eager.FirstOrDefault(AlwaysFalse);                      // Enumerates materialized results, cheap.
// DoExpensiveWork has been called once for every item, and the results are stored.
// Enumerating 'eager' simply returns those results without repeating any work.
</code></pre>

<h3>Use the right data structure</h3>

<p>Repeated <code>FirstOrDefault</code> calls, where the selector just compares a single property, are an indication that you should be using a lookup table or dictionary instead - those offer <span class="math-container">\$O(1)\$</span> lookup instead of <span class="math-container">\$O(n)\$</span>. Linq's <code>ToLookup</code> and <code>ToDictionary</code> methods are useful here. Originally, your code took about 17 seconds on my system. With an <code>ILookup</code>, that got cut down to about 0.3 second. Memory consumption got similarly reduced.</p>
    </div>