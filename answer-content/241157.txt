<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm is slow in some cases because of the time complexity <code>O(n^2)</code>. (starting the second loop from <code>i+1</code> makes it twice faster than starting from 0, but it doesn't change the time complexity which has much greater impact on performance)</p>

<p>To improve your time complexity you need to reduce the amount of times you look at items in the array. One way of doing it is by first sorting it (more precisely, sorting index-value pairs to keep record of the original indexing) and then iterating over the sorted array once (<code>O(n)</code>) while taking advantage of the fact that it is sorted. I'll leave you the task of learning about integer sorting algorithms (of time complexity <code>O(n log n)</code>), and only explain how to use the sorted array to find the final answer.</p>

<p>You can look at both edges of the array (smallest and biggest number), if their sum is too small you can increase it by advancing the lower-edge index to look at a bigger number, and if the sum is too big you can decrease it by advancing the higher-edge index to look at a smaller number. Repeat it until you reach the needed sum, then get the original indices and increment them to get the IDs you need for the output.</p>

<p>As @vnp hinted, there is a better solution than mine (with time complexity <code>O(n)</code>) using a hash table.</p>
    </div>