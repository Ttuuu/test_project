<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some high level coding style notes:</p>

<ol>
<li><p>Try to eliminate code that looks like it's copied and pasted (DRY - Don't Repeat Yourself), and define it in functions.  Your various color functions are mostly identical with the exception of one digit (the color code) -- you can avoid repeating yourself by defining a function that implements the shared part and defining the colors in terms of that.</p></li>
<li><p>Professional coders (especially those working on large shared codebases) rely heavily on static typing to improve correctness and readability; modern Python has built in support for static typing, and while it's optional it goes a long way toward making code look professional IMO.  If you get in the habit of using typing and a static type checker (<code>mypy</code>) you'll find that you spend a lot less time debugging silly typos too!</p></li>
<li><p>It's generally considered good style to not have lines of code be super long -- opinion varies on this, but modern style guides usually suggest a maximum width of 120 characters, and I personally try to keep it under 80.  The fact that your output contains lots of blank space that might make it annoying to view in a normal terminal is more of a UX issue than a code review one, but assuming it's actually a requirement to left-pad everything with 53 spaces, I think that should be implemented in code (again, in a reusable function because DRY) rather than copy+pasted into all your strings.</p></li>
<li><p>Again this is more UX than actual coding, but: proofread!  It's "candidate", not "cantidate".  :)</p></li>
</ol>

<p>Here's how I'd apply those notes to the print statements in your code:</p>

<pre><code>from enum import IntEnum
from typing import Optional

# Command prompt colors.
class Color(IntEnum):
    """MS-DOS command prompt color codes."""
    BLACK = 0
    RED = 1
    GREEN = 2
    YELLOW = 3
    BLUE = 4
    MAGENTA = 5
    CYAN = 6
    WHITE = 7
    GRAY = 8

def color_text(text: str, color: Optional[Color]) -&gt; str:
    """Wraps text in the specified color."""
    if color is None:
        return text
    return '\033[0;3' + hex(color.value)[-1] + 'm' + text + '\033[0m'

def pp(text: str, color: Optional[Color] = None, left_padding: int = 53) -&gt; None:
    """Pretty-print text with optional coloring and default left-padding of 53 spaces."""
    print(' ' * left_padding + color_text(text, color))

#Start Menu
pp('-' * 80)
pp('VoteBot v1.5.0')
pp('Copyright 2020.')
pp('Author:')
pp('')
pp('Hit any key and press enter to begin.')
pp('-' * 80)
vote = input(' ' * 53)

#start of main code
while vote == 'start' or '1' or '2' or '3' or '4':
    pp("\n" * 5000)  # this is gross -- maybe use a system("cls") instead?
    # ... etc
    pp('-' * 80)
    pp('Vote here to choose the winning team. '
       'Please choose by entering the number corresponding to your choice.')
    pp('-' * 80)
    pp('1. Team 1 (Candidate 1, Candidate 2)', Color.RED)
    pp('2. Team 2 (Candidate 1, Candidate 2)', Color.YELLOW)
    pp('3. Team 3 (Candidate 1, Candidate 2)', Color.GREEN)
    pp('4. Team 4 (Candidate 1, Candidate 2)', Color.BLUE)
    # ... etc
</code></pre>

<p>The signature of <code>pp</code> is designed to narrow your output statements and keep the text aligned for readability; the function name itself is abbreviated, the padding is built into the function so the actual arguments don't need to include it, and the color argument goes at the end so that it doesn't cause the width of the line before the text to vary.</p>

<p>Colors have been defined in an <code>IntEnum</code> because that makes it impossible (with static typechecking) to pass anything that's not a valid color into the <code>color_text</code> function; the alternative would be to use a regular <code>int</code> (or worse yet, the <code>str</code> representation) and then validate at runtime that it falls within the expected range.</p>
    </div>