<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Advise</h2>

<ul>
<li><p>Your methods are difficult to read because you chose to use predominantly single character variable names. Multi-character descriptive variable names are much easier to associate with a value, making the code magnitudes easier to read &amp; maintain. Also, when implementing a binary search it is typical to use <code>hi</code>, <code>lo</code> &amp; <code>mid</code> as variable names.</p></li>
<li><p>Whenever you nest a ternary statements, this should be an immediate red flag, that you are not writing clear &amp; maintainable code. As soon as you write a nested ternary statement I would advise you to pause, and consider what functionality you are trying to achieve and consider different ways to express that functionality. I'm not going to say that nested ternary statements are always a sign that your doing something wrong, but <em>nested ternary statements is <strong>always</strong> a sign you should stop and think about what your doing.</em></p></li>
</ul>

<h2>Algorithmic Advise</h2>

<p>I am assuming the algorithm is locating the largest element in a semi-sorted array that has two (and only two) distinctly sorted sequences with a pivot index contains largest value in the array.</p>

<ul>
<li><p>The three conditions in your switch case are, generally doing the same thing. Each case is returning the largest element in a the array, but can't use the loop because the array is too small. We can cover these conditions in the final return.</p></li>
<li><p>You should also check for general error cases such as <code>null</code> or the empty set (<code>new int[0]</code>) being passed into the function.</p></li>
<li><p>Since the logic for checking if the current value of the binary search is the pivot index contains a lot of logic to do correctly, I would create a method <code>isPivotIndex()</code>.</p></li>
</ul>

<p>Putting all that together, your solution could look something like this.</p>

<p><strong>Java Code:</strong> <em>(<strong><a href="http://ideone.com/UZLz20" rel="nofollow">ideone example link</a></strong>)</em></p>

<pre><code>int findLargestValueInSemiSortedArray(int arr[]) {
  if(arr==null || arr.length==0)
    throw new IllegalArgumentException();

  int hi  = arr.length; /* exclusive upper bound */
  int low = 0;          /* inclusive lower bound */
  int mid;
  while(low &lt; hi) {
    mid  = low/2 + hi/2;
    if(isPivotIndex(arr,mid))
      return arr[mid];
    if(arr[hi-1] &lt; arr[mid])
      low = mid + 1;
    else
      hi  = mid;
  }
  /* Array was actually sorted, either ascending or descending    */
  /* Note that return this covers corner cases of arr.length &lt;= 3 */
  return max(arr[0], arr[arr.length-1]); 
}

int max(final int a, final int b) {
  return (a &gt; b) ? a : b;
}

boolean isPivotIndex(final int[] arr, final int index) {
  int b = arr[index];
  int a = (index &gt; 0) ?            arr[index-1] : Integer.MAX_VALUE;
  int c = (index &lt; arr.length-1) ? arr[index+1] : Integer.MAX_VALUE;
  return a &lt;= b &amp;&amp; b &gt; c;
}
</code></pre>

<p>The above is much more readable, has fewer lines of code, and is easier to check for correctness. </p>

<ol>
<li><p>It immediately throws an exception on invalid input. </p></li>
<li><p>It uses <code>isPivotIndex()</code> method to isolate complex logic &amp; maintain a single level of abstraction.</p></li>
<li><p>It uses a clever final return to handle corner cases.</p></li>
</ol>

<hr>

<p>Let's consider how the final return covers the corner cases in your original <code>switch</code> statement.</p>

<p><strong>Case 1:</strong> (<code>arr.length == 1</code>)</p>

<ul>
<li><code>max(arr[0],arr[arr.length-1])</code> will compare the same values and return <code>arr[0]</code>.</li>
</ul>

<p><strong>Case 2:</strong> (<code>arr.length == 2</code>)</p>

<ul>
<li><code>max(arr[0],arr[arr.length-1])</code> will evaluate exactly the same as your ternary statement.</li>
</ul>

<p><strong>Case 3:</strong> (<code>arr.length == 3</code>)</p>

<ul>
<li><code>max(arr[0],arr[arr.length-1])</code> will return the larger of <code>arr[0]</code> and <code>arr[2]</code>. If <code>arr[1]</code> happened to be the max value it would have been the pivot index in the binary search loop and the method would have already returned.</li>
</ul>
    </div>