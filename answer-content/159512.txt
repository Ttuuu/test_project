<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few notes:</p>

<ul>
<li><p>Your <code>escapeCharacterClasses</code> function is broken. In multiple ways. For one, I get an error because <code>new RegExp</code> doesn't accept the <code>flags</code> argument (<code>"g"</code> in this case), if the first argument is a regex literal. (Edit: Well, it's broken in my outdated browser, at least. According to the comments, ES6 allows flags to be set on literals, but my browser doesn't allow it - despite handling other ES6 features fine.) You can only supply the flag argument if the pattern is a string.<br>
Secondly, the pattern makes no sense as far as I can tell. You have a big character class, <code>[...]</code>, but you're using <code>|</code> as though you meant it to be a branching expression instead, i.e. <code>(a|b)</code>. So what you have (if it could run at all) is a regex that matches <code>\</code>, <code>s</code>, <code>S</code>, <code>w</code>, <code>W</code>, <code>d</code>, <code>D</code>, and <code>|</code> as individual characters, and replace them with <code>\\s</code>. Which makes no sense as far as I can tell.<br>
Even if it was a branching statement, it would, as far as I can tell, replace <em>everything</em> with <code>\\s</code>. A pattern like <code>/(\s|\S|\s|\W|\d|\D)/g</code> matches, well, everything. Again: Makes no sense.</p></li>
<li><p>JavaScript convention is that functions and variables are <code>camelCase</code> and only constructors are <code>PascalCase</code>. You're mixing things: In most function the arguments are <code>camelCase</code>, but in <code>parseTokens</code> they're <code>PascalCase</code>, etc.. Be consistent.</p></li>
<li><p>Also make others be consistent. JavaScript is case-sensitive, so I'd recommend making the tokens case-sensitive too. I.e. your example of replacing <code>{{ App_Root }}</code> with <code>app_root</code> shouldn't work. </p></li>
</ul>

<p>Anyway, all of this can be made a lot simpler. You can actually do this in one go, if you want:</p>

<pre><code>function t9r(template, interpolations) {
  return template.replace(/\{\{\s*([^}\s]+)\s*\}\}/g, (_, token) =&gt; interpolations[token] );
}
</code></pre>

<p>That'll replace any <code>{{ token }}</code> stuff in the string with a property from the <code>interpolations</code> object.</p>

<p>Better yet, you can be stricter about it, and require tokens to only consist of word characters and digits - like a property name. The one above is a bit too liberal in what it allows, if you ask me. And you add the option to throw an error if something doesn't have an interpolation. And use some ES6 interpolation while we're at it to generate the error message:</p>

<pre><code>function t9r(template, interpolations, throwErrors) {
  throwErrors = throwErrors === false ? false : true; // default to true
  return template.replace(/\{\{\s*(\w+)\s*\}\}/g, (marker, token) =&gt; {
    if(throwErrors &amp;&amp; !interpolations.hasOwnProperty(token)) {
      throw new Error(`Missing interpolation for '${token}'`);
    }
    return interpolations[token] || marker;
  });
}
</code></pre>

<p>Now the tokens must be only word characters. And if you explicitly set <code>throwErrors</code> to <code>false</code>, you just get the string back with all possible replacements made, and the impossible ones untouched (i.e. still written as <code>{{ foo }}</code>).</p>

<p>If you want something that just pulls out the token names present in the template string, you can do:</p>

<pre><code>function t9rTokens(template) {
  var tokens = [];
  template.replace(/\{\{\s*(\w+)\s*\}\}/g, (_, token) =&gt; {
    tokens.push(token);
  });
  return tokens;
}
</code></pre>

<p>Of course, in that case it'd be much better to move the regex pattern into a reusable constant, rather than repeat it in two functions.</p>
    </div>