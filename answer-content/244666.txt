<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some small remarks:</p>
<ul>
<li><p>according to the documentation, you want to output <code>irst-fay</code> on <code>first</code>, but your code will output <code>irstf-ay</code> instead</p>
</li>
<li><p>your code will only work on lower case words, but not on "Apple"</p>
</li>
<li><p>instead of <code>print!("{} ", format!(...))</code> use <code>print!(...)</code></p>
</li>
<li><p>instead of <code>nth(0)</code> use <code>next()</code></p>
</li>
<li><p>I recommend you to format your code with <code>rustfmt</code></p>
</li>
<li><p>instead of <code>&amp;word[word.chars().next().unwrap().len_utf8()..]</code> you can use <code>c.len_utf8()</code> if you name your match instead of using <code>_</code>, e.g.</p>
<pre><code>match word.chars().nth(0).unwrap() {
     'a' | 'e' | 'i' | 'o' | 'u' | 'y' =&gt; print!("{}-hay ", word.trim())),
      c =&gt; print!("{}-{}ay ", &amp;word[c.len_utf8()..].trim(), c),
};
</code></pre>
</li>
<li><p>if you know that your index will end up at a proper UTF8 boundary you can use <code>&amp;word[1..]</code> and <code>&amp;word[..1]</code> instead of your indexing, but your variant is a lot safer. <strong>Well done here</strong>, as invalid string slicing is a common error in first Rust experiences :)</p>
</li>
</ul>
    </div>