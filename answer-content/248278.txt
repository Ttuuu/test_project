<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When dealing with recursion, its important to note down what your base and recursive cases are and go from there. These different cases will essentially become the structure of your function.</p>
<p>You've already figured out the different cases for your problem:</p>
<ol>
<li>If <code>n == 0</code></li>
<li>If 8 is in the ones digit place (<code>n % 10 == 8</code>)</li>
<li>If 8 isn't in the ones digit place (<code>n % 10 != 8</code>)</li>
</ol>
<p>If <code>n == 0</code>, then we just return 0.</p>
<p>If <code>n % 10 == 8</code>, then we know we have one 8, but we need to call <code>count8</code> again with <code>n / 10</code> as our input parameter to <code>count8</code>. <s>When we return out of this call, we add 1 to our result before returning it since we had already found one 8.</s> Now add 1 (the 8 we already found) to the result of the <code>count8</code> call.</p>
<ul>
<li>In this case, you will want to check if the next digit is an 8 as well. If it is, then you will want to increment your result by 1 before you return. You can do this before or after the first recursive call. Just make sure to pass in <code>n / 10</code> after you've "removed" the back-to-back 8's.</li>
</ul>
<p>If <code>n % 10 != 8</code>, then we simply call <code>count8</code> with <code>n / 10</code> as our input parameter and return the result from this call.</p>
<p>Hopefully this paints a picture in how you can structure your function in a clearer way.</p>
    </div>