<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Organize</strong></p>

<p>I believe you would do well to restructure your code. You have two functions, why not write one more, and then separate your testing from your actual code? </p>

<pre><code>if __name__ == '__main__':
    x = [1,2,3,3,2,0]

    result = find_monotone_sequences(x)  # Wrap your code in this function

    print(" all Outputs ")
    result_all_combinations = {}

    for k, v in result.items():
        result_all_combinations[k] = []
        for item in v:
            result_all_combinations[k].extend(all_subcombinations(item))

    print(result_all_combinations)
    #Output:
    #{'increasing': [[1, 2], [2, 3], [1, 2, 3]],
    # 'equal': [[3, 3]],
    # 'decreasing': [[3, 2], [2, 0], [3, 2, 0]]}
</code></pre>

<p><strong>Use <code>collections.defaultdict</code></strong></p>

<p>Next, take advantage of some built-in features:</p>

<pre><code>result = {"increasing": [],
      "equal": [],
      "decreasing": [],
      }
</code></pre>

<p>This is a dictionary where every value <em>defaults to an empty list</em>. Another word for that is a <code>collections.defaultdict</code>:</p>

<pre><code>from collections import defaultdict

result = defaultdict(list)  # Note: no parens after list - passing in function
</code></pre>

<p>Now you don't have to provide the explicit names and values!</p>

<p><strong>Use your iterators</strong></p>

<p>Next, you should take advantage of the iterator you are <em>already creating!</em></p>

<pre><code>prev = x[0] 
curr = x[1] #keep track of two items together during iteration, previous and current

prev_state = two_item_relation(prev, curr) #keep track of previous state
result[prev_state].append([prev]) #handle first item of list

x_shifted = iter(x)
next(x_shifted) #x_shifted is now similar to x[1:]
</code></pre>

<p>Instead of accessing <code>x[0]</code> and <code>x[1]</code>, why not use the iterator? </p>

<pre><code>xiter = iter(x)
prev = next(xiter)
curr = next(xiter)
prev_state = two_item_relation(prev, curr) #keep track of previous state
result[prev_state].append([prev]) #handle first item of list

for curr in xiter:
    # etc...
</code></pre>

<p><strong>Recognize patterns in your code (use <code>itertools</code>!)</strong></p>

<p>Finally, I'd like to point out the behavior of your main loop:</p>

<pre><code>for curr in x_shifted: 
    curr_state = two_item_relation(prev, curr)
    if prev_state == curr_state: #compare if current and previous states were same.
        result[curr_state][-1].append(curr) 
    else: #states were different. aka a change in trend
        result[curr_state].append([])
        result[curr_state][-1].extend([prev, curr])
    prev = curr
    prev_state = curr_state
</code></pre>

<p>This loops over the input values, comparing each value with the prior one, and determines a 'state'. Depending on the state, the input values are broken into <em>groups</em> corresponding to the state. </p>

<p>Or: the input sequence is <em>grouped by</em> the computed state.</p>

<p>It turns out there's an app for that:  <a href="https://docs.python.org/3.5/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby</code></a> will take a sequence and a key function, and break the sequence into groups according to the values taken on by the key!</p>

<p>This means your can rewrite your code into a simple processing loop that computes the state and associates it with the values (except the initial member, of course). Furthermore, if you investigate the <strong>recipes</strong> section of the <code>itertools</code> module, you will find a function named <code>pairwise</code> that allows a sequence to be processed in pairs:</p>

<pre><code>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)
</code></pre>

<p>Adding this function to your code enables you to do this:</p>

<pre><code>seq = x  # x is not a very good name
relations = [(two_item_relation(*pair), *pair) for pair in pairwise(seq)]
</code></pre>

<p>There is still the matter of the special treatment of the first value, but you can do it with the values all in hand.</p>

<p>(If you're just learning Python, the <code>*pair</code> syntax "flattens" the pair in place. It is equivalent to writing: <code>pair[0], pair[1]</code> where-ever <code>*pair</code> is seen. Thus <code>relation(*pair)</code> is like <code>relation(pair[0], pair[1])</code>.)</p>
    </div>