<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your code, you are using arrays to check whether the value is stored.  As you have noted, that operation is \$O(n)\$.  The solution to this is to use objects to check instead.  That operation is \$O(1)\$, meaning that the algorithm goes from \$O(n^2)\$ to \$O(n)\$.</p>

<p>However, there is a problem with storing using objects, namely that all keys need to be strings.  Because of this, we have to convert the strings back into integers after we are done.</p>

<p>Hence, our steps become:</p>

<ol>
<li>Create a <code>currentValues</code> object.  Initialize it to contain the values of the first list.</li>
<li>Create a <code>commonValues</code> object, leave it empty.</li>
<li>For each of the arrays, except for the first:

<ol>
<li>Iterate through the array.  If <code>currentValues</code> contains the value, add it to <code>commonValues</code></li>
<li>Set <code>currentValues = commonValues</code>, and reset <code>commonValues</code> to be an empty object again.</li>
</ol></li>
<li>Finally, take the <code>currentValues</code> object, and convert its keys back into integers.</li>
</ol>

<p>Some code that does the above (I'm no expert with Javascript, while the code works, there may be sub-optimal code here):</p>

<pre><code>var arrays  = [
    [1, 4, 6, 78, 8, 9, 124, 44],
    [44, 6, 9],
    [124, 44, 16, 9]
];
function getCommonElements(arrays){//Assumes that we are dealing with an array of arrays of integers
  var currentValues = {};
  var commonValues = {};
  for (var i = arrays[0].length-1; i &gt;=0; i--){//Iterating backwards for efficiency
    currentValues[arrays[0][i]] = 1; //Doesn't really matter what we set it to
  }
  for (var i = arrays.length-1; i&gt;0; i--){
    var currentArray = arrays[i];
    for (var j = currentArray.length-1; j &gt;=0; j--){
      if (currentArray[j] in currentValues){
        commonValues[currentArray[j]] = 1; //Once again, the `1` doesn't matter
      }
    }
    currentValues = commonValues;
    commonValues = {};
  }
  return Object.keys(currentValues).map(function(value){
    return parseInt(value);
  });
}
console.log(getCommonElements(arrays)); //Prints [9,44]
</code></pre>
    </div>