<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very nicely code.</p>

<p>Only some nits.</p>

<p><strong>Help</strong></p>

<p>"I wrote a manual page for it" --&gt; Perhaps it, or a condensed version for option <code>-h</code>?</p>

<pre><code>    case 'h':
        printf("blah blah\n);
        exit (EXIT_SUCCESS);
</code></pre>

<p><strong>&gt; vs &lt;</strong></p>

<p>Conceptually, when looking for "smallest values", I'd like to find a <code>&lt;</code>.  Perhaps:</p>

<pre><code> // if (roll[i] != 0 &amp;&amp; min &gt; roll[i]) {
 if (roll[i] != 0 &amp;&amp; roll[i] &lt; min) {
</code></pre>

<p><strong>Theoretical UB</strong></p>

<p>If for <em>some reason</em> <code>if (roll[i] != 0 &amp;&amp; min &gt; roll[i])</code> is never true, <code>j</code> remains uninitialized and UB later in <code>rollsum -= roll[j];</code>.</p>

<p>Recommend to declare <code>j</code> in the <code>while</code> loop and initialize it.</p>

<p><strong>Theoretical UB</strong></p>

<p>Code relies on <code>modifier</code> never getting/having the value of <code>INT_MIN</code> - which of course it should not with sane input.  But let's have some fun.</p>

<p>The 2 lines incurs UB when <code>INT_MIN</code> is involved.</p>

<pre><code>d.modifier = (n == 0) ? DEFMODIFIER : sign * n;
printf(" %c %u", (d.modifier &lt; 0) ? '-' : '+', abs(d.modifier));
</code></pre>

<p><code>getnumber(char **s)</code> also has UB potential (<code>n = n * 10 + **s - '0';</code> can still overflow) with input for values near/above <code>INT_MAX</code>.</p>

<p>Candidate fix/improve for a full range <code>getnumber</code></p>

<pre><code>// No reason to pass `char **`,  pass a `char *`
// Moving sign detection here too.
static int getnumber(const char *s) {
  int n = 0;
  int sign = *s;
  if (size == '-' || size == '+') s++;

  // As there are more neg int than pos int, code accumulates on the neg side
  while (isdigit((unsigned char) *s)) {  // Cast to avoid UB of *s &lt; 0
    int digit = *s - '0';
    if (n &lt;= INT_MIN/10 &amp;&amp; (n &lt; INT_MIN/10 || digit &gt; -(INT_MIN%10))} {
      return -1;
    }
    n = n*10 - digit;
  }

  if (sign != '-') {
    if (n &lt; -INT_MAX) {
      return -1;
    }
    n = -n;
  }
  return n;
}
</code></pre>

<p>GTG</p>
    </div>