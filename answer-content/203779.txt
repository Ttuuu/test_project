<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would redo this completely. First some things that should be addressed by the rewrite:</p>

<ul>
<li>Define functions for small, separate tasks that do simple things.</li>
<li>Not mess up the global namespace too much (by having variables lying around, as well as calling code (which is better protected by a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a>).</li>
<li>Obey Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, especially by using <code>ALL_CAPS</code> for global constants and following the scheme of first defining all functions and afterwards calling them.</li>
<li>Have nice <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a> explaining what each function does.</li>
<li>Have meaningful names that explain what each variable/function represents</li>
</ul>

<hr>

<p>So, lets separate this into separate tasks. The first task is reading this weird data format into a more normal one, for example a list of words (which are strings):</p>

<pre><code>def get_words(data):
    words = filter(None, re.split(r'\|\+\+\||\|\/\/\|', data))
    words_int = [map(int, re.findall(r'\|(\d*)\|', word)) for word in words]
    return map(lambda word: "".join(map(chr, word)), words_int)
</code></pre>

<p>The next task is taking a list of words and shifting each character by some offset. This procedure is usually called a Caesar shift:</p>

<pre><code>def caesar_shift(word, offset):
    return "".join(map(lambda c: chr(ord(c) + offset), word))
</code></pre>

<p>Then we just need to loop over all possible offsets to get all possible clear texts:</p>

<pre><code>words = get_words(data)

for offset in range(-100, 100):
    words_ = [caesar_shift(word, offset) for word in words]
    print " ".join(words_)
</code></pre>

<p>But we can be a bit more clever. First, note that it does not make sense to shift the lowest value lower than the lowest printable ASCII value (<code>\t</code> is number 9). The same is true for the maximum value (the largest printable value, <code>~</code> is 126)</p>

<p>Furthermore, a plaintext that contains unprintable characters is probably wrong. We can therefore exclude all of those:</p>

<pre><code>from itertools import chain
import string

PRINTABLE = set(string.printable)
MIN_PRINTABLE = ord(min(PRINTABLE))
MAX_PRINTABLE = ord(max(PRINTABLE))

min_chr = min(chain(*words))
max_chr = max(chain(*words))

for offset in range(MIN_PRINTABLE - ord(min_chr),
                    MAX_PRINTABLE - ord(max_chr) + 1):  # printable ASCII range
    words_ = [caesar_shift(word, offset) for word in words]
    text = " ".join(words_)
    if all(c in printable for c in text):
        print text
</code></pre>

<p>And finally, we can be even more clever and take a dictionary and count how many words of the decoded clear text are in there. We then select the cleartext with the highest number as the chosen clear text. (Here I actually gave longer words a higher score if they are in the dictionary. The result is the same in this case, though.)</p>

<pre><code>def get_dictionary(file_name):
    with open(file_name) as f:
        for line in f:
            yield line.split("/")[0].strip()   

# This works on most linux machines, might have to download it manually, though:
dictionary = set(get_dictionary("/usr/share/hunspell/en_US.dic"))

def decode(words):
    min_chr = min(chain(*words))
    max_chr = max(chain(*words))
    for offset in range(MIN_PRINTABLE - ord(min_chr),
                        MAX_PRINTABLE - ord(max_chr) + 1):  # printable ASCII range
        words_ = [caesar_shift(word, offset) for word in words]
        text = " ".join(words_)
        if all(c in printable for c in text):
            score = 0
            if dictionary is not None:
                score = sum(len(word) for word in words_ if word in dictionary)
            yield score, text
</code></pre>

<hr>

<p>We then wrap it all together:</p>

<pre><code>from itertools import chain
import string

PRINTABLE = set(string.printable)
MIN_PRINTABLE = ord(min(PRINTABLE))
MAX_PRINTABLE = ord(max(PRINTABLE))


def get_words(data):
    """Read the weird data format into a list of (encoded) words"""
    words = filter(None, re.split(r'\|\+\+\||\|\/\/\|', data))
    words_int = [map(int, re.findall(r'\|(\d*)\|', word)) for word in words]
    return map(lambda word: "".join(map(chr, word)), words_int)

def caesar_shift(word, offset):
    """Shift each character in word by offset"""
    return "".join(map(lambda c: chr(ord(c) + offset), word))

def get_dictionary(file_name):
    """Read a dictionary file in the hunspell format.
    Yields each word.
    """
    with open(file_name) as f:
        for line in f:
            yield line.split("/")[0].strip()    

def decode(words, dictionary=None):
    """Decode the text consisting of words.
    Considers only plaintexts where each character is printable
    If dictionary is given it also calculates a score for each plain text.
    The score is the sum of the length of all words included in the dictionary.

    Yields tuples of (score, text) for each plain text. If no dictionary is given, all scores are zero.
    """
    min_chr = min(chain(*words))
    max_chr = max(chain(*words))
    for offset in range(MIN_PRINTABLE - ord(min_chr),
                        MAX_PRINTABLE - ord(max_chr) + 1):  # printable ASCII range
        words_ = [caesar_shift(word, offset) for word in words]
        text = " ".join(words_)
        if all(c in printable for c in text):
            score = 0
            if dictionary is not None:
                score = sum(len(word) for word in words_ if word in dictionary)
            yield score, text

if __name__ == "__main__":
    data = """|125||104||120||118||++||107||100||118||++||100||118||110||104||103||++||112||104||++||119||114||++||112||100||110||104|
|++||100||113||++||104||113||102||114||103||104||117||++||105||114||117||++||114||120||117||++||120||115||103||100||119|
|104||118||//||++||119||107||108||118||++||108||118||++||112||104||++||119||104||118||119||108||113||106||++||108||119|
|++||114||120||119||//||++||108||105||++||108||119||++||122||114||117||110||118||++||108||++||122||108||111||111||++|
|101||104||++||118||104||113||103||108||113||106||++||108||119||++||119||114||++||119||107||104||++||117||104||118||119|
|++||114||105||++||124||114||120||++||100||118||++||122||104||111||111||++||100||118||++||100||++||103||104||102||114|
|103||104||117||//||++||119||108||117||//|"""
    words = get_words(data)
    dictionary = dictionary = set(get_dictionary("/usr/share/hunspell/en_US.dic"))
    # Let's just hope the maximum score makes sense:
    print max(decode(words, dictionary))[1]
    # zeus has asked me to make an encoder for our updates this is me testing it out if it works i will be sending it to the rest of you as well as a decoder tir
</code></pre>
    </div>