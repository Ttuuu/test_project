<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Store the first k elements in a temporary array temp[0..k-1]  </p>
</blockquote>

<p>You are not doing that  </p>

<blockquote>
  <p>Find the smallest element in temp[], let the smallest element be min</p>
</blockquote>

<p>You are not doing that  </p>

<blockquote>
  <p>For each element x in arr[k] to arr[n-1]...</p>
</blockquote>

<p>You are starting on 0 because you skipped step 1</p>

<p>Nothing in there about a binary search<br>
Not less operations the with the shifts</p>

<p>This </p>

<pre><code>if (testArray[i] &lt;= result[0])
{
    continue;
}
else
{
</code></pre>

<p>Can be  </p>

<pre><code>if (testArray[i] &gt; result[0])
{
</code></pre>

<p>Other than that looks good</p>

<p>Just following what I think are the instructions<br>
It is \$\mathcal{O}(n \times k)\$ as the first k elements are not free </p>

<pre><code>private int[] FindKBiggestNumbersM(int[] testArray, int k)
{
    int[] result = new int[k];
    int indexMin = 0;
    result[indexMin] = testArray[0];
    int min = result[indexMin];

    for (int i = 1; i &lt; testArray.Length; i++)
    {
        if(i &lt; k)
        {
            result[i] = testArray[i];
            if (result[i] &lt; min)
            {
                min = result[i];
                indexMin = i;
            }
        }
        else if (testArray[i] &gt; min)
        {
            min = testArray[i];
            result[indexMin] = min;
            for (int r = 0; r &lt; k; r++)
            {
                if (result[r] &lt; min)
                {
                    min = result[r];
                    indexMin = r;
                }
            }
        }
    }
    return result;
}
</code></pre>
    </div>