<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview!</p>

<h2>Formatting</h2>

<p>Get an IDE such as PyCharm or VSCode that's capable of linting. It will give you several "PEP8" suggestions, such as newlines around functions, that will make your code more legible. Some particulars that will be suggested:</p>

<ul>
<li><code>paddle</code> = <code>Paddle</code> (classes)</li>
<li><code>black</code> = <code>BLACK</code> (global constants)</li>
<li><code>Ball</code> = <code>ball</code> and vice versa - instance variables should be lowercase, classes uppercase</li>
</ul>

<h2>Avoid globals</h2>

<p>They're a messy way of tracking information. In particular, <code>ball</code> and <code>block</code> instances, and the <code>screen</code> instance should be moved to local variables, maybe class members.</p>

<h2>Simplify logic</h2>

<pre><code>if Paddle.x + 80 &lt; 0:
</code></pre>

<p>becomes</p>

<pre><code>if Paddle.x &lt; -80:
</code></pre>

<h2>Global code</h2>

<pre><code>pygame.init()
#window
swidth = 800
sheight = 600
screen = pygame.display.set_mode((swidth,sheight))
</code></pre>

<p>Stuff like this should move into your <code>main</code> function.</p>

<h2>Long methods</h2>

<p><code>main</code> should be subdivided into several subroutines for legibility and maintainability.</p>

<h2>Magic numbers</h2>

<p>"44" doesn't mean much to us, and in six months it probably won't mean much to you either. It's best to put this and similar quantities into named constants.</p>

<h2>Nested <code>all</code></h2>

<pre><code>if all(all(item != 1 for item in item)for item in level1):
</code></pre>

<p>You don't need an inner <code>all</code>. One level of <code>all</code> and two inner comprehension loops will work.</p>

<h2>Level data</h2>

<p>Your <code>level1</code> array is a reasonable representation of the level during program runtime. However, it's verbose to construct manually. You'd probably be better off representing this with a more compact string-based format and parsing it out on program load.</p>
    </div>