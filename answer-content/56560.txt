<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This should be a short review mainly because your code looks pretty nice. </p>

<p>I don't have any experience with the Amazon API, but from what I can tell you are using it as I would expect it to be used.</p>

<p>The only points that I want to speak on and can nit-pick are:</p>

<ol>
<li>Your variables <code>asin_regex</code> and <code>isbn_regex</code> are <em>slightly</em> misleading. In Python there is a distinction between regular expression <em>patterns</em> and regular expression <em>objects</em>. The suffix <code>_regex</code> implies that, by itself, the variable can recognize expressions which, in turn, implies the variable is a regular expression object. Because your variables cannot, by themselves, recognize expressions, I would use the suffix <code>_pattern</code>.</li>
<li><p>Your logic in <code>get_amazon_id</code> is completely fine. Its my personal preference, in this case where you are simply returning inside the if blocks, to just use if statements, no <code>elif</code> or <code>else</code> blocks:</p>

<pre><code>if asin_search:
    return asin_search.group(1)
if isbn_search:
    return isbn_search.group(1)

return None
</code></pre>

<blockquote>
  <p>The above is strictly personal preference, simply getting another version out there. </p>
</blockquote>

<p>However, what I <strong>would</strong> recommend doing is use a for loop to reduce some of the minor code repetition and make your code more flexible:</p>

<pre><code>for search in asin_search, isbn_search:
    if search:
        return search.group(1)
return None
</code></pre>

<p>The above code would be best if, say, for some reason another ID type came out. So, instead of having to add another if statement, all you need to do is add <code>new_id_search</code> to the for loop <code>list</code>.</p></li>
<li><p>I would change your regex patterns to use the <code>\w</code> and <code>\d</code> characters:</p>

<pre><code>asin_regex = r'/(\w{10})'
isbn_regex = r'/(\d{10})' 
</code></pre>

<p>The <code>\d</code> character would just make your currently short regex even shorter, while the <code>\w</code> character helps protect against the case that <em>for some unknown reason</em> the ASIN or ISBN contains lower-case characters.</p></li>
<li><p>Finally, I would capitalize the first word of all your comments (unless it is a variable name).</p></li>
</ol>
    </div>