<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some observations that may help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Return something useful from the subroutines</h2>

<p>Almost every single one of the routines is declared as returning <code>void</code>.  Something is wrong there.  For example, if <code>addrecord</code> fails for some reason such as invalid input data, it would be nice if the function returned a value indicating this fact.</p>

<h2>Eliminate global variables</h2>

<p>My rewrite of this code uses no global variables, so clearly they are neither faster nor necessary.  Eliminating them allows your code to be more readable and maintainable, both of which are important characteristics of well-written code.  Global variables introduce messy linkages that are difficult to spot and error prone.</p>

<h2>Use better naming</h2>

<p>The name <code>flowcontrol</code> is not really helpful, since it does much more than simply reading -- all of the processing, including output, is done there.  Names like <code>line</code> are fine in context, but <code>myfile</code> is not such a good name.  Variable and function names should tell the reader <em>why</em> they exist, ideally without further comments necessary.  So instead of <code>spacer()</code> I'd probably name it <code>print_empty_lines()</code> for example.</p>

<h2>Use string concatenation</h2>

<p>The menu includes these lines:</p>

<pre><code>std::cout &lt;&lt; "Welcome to the student database version 1.101" &lt;&lt; '\n';
std::cout &lt;&lt; "&lt;-------------------------------------------&gt;" &lt;&lt; '\n';
std::cout &lt;&lt; "          What would you like to do?         " &lt;&lt; '\n';
</code></pre>

<p>Each of those is a separate call to <code>operator&lt;&lt;</code> but they don't need to be.  Another way to write that would be like this:</p>

<pre><code>std::cout 
    &lt;&lt; "Welcome to the student database version 1.101\n"
    &lt;&lt; "&lt;-------------------------------------------&gt;\n" 
    &lt;&lt; "          What would you like to do?         \n"
    // etc.
</code></pre>

<p>This reduces the entire menu to a single call to <code>operator&lt;&lt;</code> because consecutive strings in C++ (and in C, for that matter) are automatically concatenated into a single string by the compiler.</p>

<h2>Don't duplicate important constants</h2>

<p>The filename is hardcoded right now (see next suggestion), but worse than that, it's done in five completely indpendent places.  Better would be to create a constant:</p>

<pre><code>static const char *FILENAME = "namelist.txt";
</code></pre>

<h2>Consider the user</h2>

<p>Instead of having a hardcoded filename, it might be nice to allow the user to control the name and location of the file.  For this, it would make sense to use a command line argument and then pass the filename to the functions as needed.</p>

<h2>Make better use of objects</h2>

<p>The only member function of <code>student</code> is <code>writeto</code> which is not a good function name and may as well be a static function by the way it's written.  Instead, I'd suggest something like this:</p>

<pre><code>bool appendTo(const std::string &amp;filename) const {
    std::ofstream datastore{"datastore.txt", std::ios_base::app};        
    if (datastore) {
        datastore   &lt;&lt; 
            "Number : " &lt;&lt; number     
            "\nName :"  &lt;&lt; firstname &lt;&lt; ' ' &lt;&lt; lastname
            "\nDOB : "  &lt;&lt; birthday
            "\nAge : "  &lt;&lt; age
            "\nGrade : "&lt;&lt; grade
            "\n*"
            "\n----------------------------------------------\n";
    }
    bool result{datastore};
    return result;
}
</code></pre>

<p>Note that now it takes the filename as a parameter and return <code>true</code> if the write was successful.  It is also <code>const</code> because it doesn't alter the underlying <code>student</code> data structure.</p>

<h2>Understand the uniqueness of <code>main</code></h2>

<p>The end of <code>flowcontrol()</code> is this:</p>

<pre><code>    main();//restarts the process;
}
</code></pre>

<p>However, that's not legal C++.  You can't take the address of <code>main</code> nor call it.  It may seem to work with your compiler but it's explicitly <em>not</em> guaranteed by the standard and is <em>undefined behavior</em> meaning that the program might do anything and that it's not predictable.  If you need to repeat something, use a loop.</p>
    </div>