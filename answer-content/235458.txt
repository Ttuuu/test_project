<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Member variables are initialized by constructors <em>in the order they are declared</em>, not the order that are listed in the <em>mem-initializer-list</em> for a constructor.  This can lead to unexpected results.  Many compilers will issue a warning for this if you set the warning level higher (which you should be routinely doing, typically with <code>/W4</code> or <code>-w4</code>).  For <code>Snake</code>, the members will be initialized in this order: <code>body</code>, <code>head</code>, <code>direction</code>, <code>oldDirection</code>.  This is the order they should be listed in the constructor.</p>

<p>Some of your initializers (<code>DXGraphicsEngine()</code>, <code>body(std::vector&lt;rge::v2di&gt;())</code>) aren't doing anything that doesn't happen by default and should be omitted.</p>

<p>The <code>switch</code> statement in some functions like the second <code>Snake</code> constructor and in <code>Snake::MoveSnake</code> have unnecessary braces in the case statements.  For readability, the <code>case</code> labels are often indented.</p>

<p>The body for <code>Snake::ExtendSnake</code> can be rewritten as <code>body.emplace_back(body.back());</code></p>

<p>There are places where you use <code>this-&gt;</code> to access member variables where it is unnecessary.  Where it is necessary (like <code>Snake::SetDirection</code>), you should rename the local variable to something that does not shadow a member variable.  For <code>SetDirection</code>, you can use <code>Snake::SetDirection(Direction dir)</code>.  Elsewhere, you're assigning to <code>this-&gt;color =</code>, which can just be <code>color =</code>.  Or place the initializer in the mem-iniitializer-list (<code>SnakeTile(): color(120, 130, 250) { }</code>).</p>

<p>Rather than using <code>vector&lt;Tile *&gt;</code>, look into using a <a href="https://en.cppreference.com/w/cpp/memory" rel="nofollow noreferrer">smart pointer</a> (like <code>shared_ptr</code> or <code>unique_ptr</code>) so you don't have to do all that manual memory management.</p>

<p>The <code>FieldGrid</code> constructors can start off with <code>field.resize(width)</code> to avoid growing the array in the <code>i</code> loop.  This could also be accomplished with the <em>mem-initializer-list</em>, but you'd have to be careful about specifying the list sine the <code>width</code> member will be initialized <em>after</em> <code>field</code>.</p>

<p>Consider using some of the standard C++ <a href="https://en.cppreference.com/w/cpp/numeric/random" rel="nofollow noreferrer">random library</a> classes rather than using <code>rand</code>.</p>

<p>Some functions can take parameters by <code>const &amp;</code> to avoid making copies of the parameters.  <code>FieldGrid::ClearSnake(const std::vector&lt;rge::v2di&gt; &amp;body)</code>.  Also, you can use range-based for loops:</p>

<pre><code>for (const auto &amp;b: body) {
    delete field[b.x][b.y];
    field[b.x][b.y] = new EmptyTile();
}
</code></pre>

<p>In your classes derived from <code>Tile</code> you should use the <code>override</code> keyword when overriding virtual members from a base class.  This will result in a compilation error if you make a mistake in the function signature or change something.</p>

<pre><code>CollisionMessage OnCollide() override {
}
bool IsFree() override { return true; }
</code></pre>

<p>In addition, <code>IsFree</code> can be <code>const</code>.</p>
    </div>