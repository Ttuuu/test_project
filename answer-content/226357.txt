<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First thing's first, you probably don't want to leave the <code>#[allow(dead_code)]</code> option on. If the method is meant to be part of the public API, make it <code>pub</code>.</p>

<p>It's also best to split your tests up into different test functions so that they all run every time. The way you've written it, when one fails, the tests stop and don't execute the other examples. In order to effectively refactor the code, I had to split them up.</p>

<pre><code>#[test]
fn zero() {
    assert_eq!(num_digits(0), [0]);
}

#[test]
fn single_digit_negative() {
    assert_eq!(num_digits(-1), [-1]);
}

#[test]
fn triple_digit_negative() {
    assert_eq!(num_digits(-123), [-1, -2, -3]);
}    

#[test]
fn single_digit_positive() { 
    assert_eq!(num_digits(1), [1]);
}        

#[test]
fn double_digit_positive() {
    assert_eq!(num_digits(12), [1, 2]);
}

#[test] 
fn large_positive() {
    assert_eq!(num_digits(456464), [4, 5, 6, 4, 6, 4]);
}
</code></pre>

<p>With that out of the way, let's talk about idiomatic Rust. In Rust, it is far more common to use functional style iterators rather than imperative loops. However, I've found that sometimes it's better to just write the imperative loop rather than jump through hoops to write the equivalent map/reduce. I would say that your loop is absolutely fine, suited to its purpose, and avoids converting the numbers to strings. Although it leaves me wishing that Rust had <code>do {} while cond</code> syntax. That's a failing of the language though, not one of yours. The <code>break</code> is the right call here and preferable to this "trick" you sometimes see.</p>

<pre><code>while {
    result.push(x % 10);
    x /= 10;
    x != 0
} { }
</code></pre>

<p>I prefer the break you used over abusing this quirk of the language.</p>

<p>If you do wish to pursue an approach using iterators though, you can. You see the <code>fold</code> function takes a sequence and returns a single value via reduction. There is also an <code>unfold</code> function which does the opposite. It takes a seed value and produces a sequence from it, which is exactly what you're doing here. Rust doesn't have an <code>unfold</code> function, but it does have <a href="https://doc.rust-lang.org/std/iter/fn.from_fn.html" rel="nofollow noreferrer">std::iter::from_fn</a>, which is <em>very</em> close in functionality.</p>

<pre><code>fn num_digits(num: i32) -&gt; Vec&lt;i32&gt; {
    /*
     * Zero is a special case because
     * it is the terminating value of the unfold below,
     * but given a 0 as input, [0] is expected as output.
     * w/out this check, the output is an empty vec.
     */
    if num == 0 {
        return vec![0];
    }

    let mut x = num;
    let mut result = std::iter::from_fn(move || {
        if x == 0 {
            None
        } else {
            let current = x % 10;
            x /= 10;
            Some(current)
        }
    })
    .collect::&lt;Vec&lt;i32&gt;&gt;();

    result.reverse();
    result
}
</code></pre>

<p>Now, is that actually any better? I, personally, don't feel like it is.
It <em>could</em> be if we changed the method to return the iterator instead of the vector.
If we did that, then it could be lazily evaluated instead of calculating every item in the sequence up front.
That could make this alternative approach worthwhile <strong><em>if</em></strong> we were dealing with very large integers that would generate very large vectors, but that's a pretty big if.</p>
    </div>