<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Currently you are manipulating the image one pixel at once. Instead you can work on the whole array as one when using the <code>numpy</code> interface:</p>

<pre><code>from PIL import Image
import numpy as np

def read_image(image_path):
    img = Image.open(image_path)
    return np.asarray(img, dtype="int32")

def write_image(img, image_path):
    img = Image.fromarray(np.asarray(img, dtype="uint8"), "RGBA")
    img.save(image_path)

def picture_reset_pixels(img, from_color, to_color, target_color):
    mask = (img &gt;= from_color).all(axis=-1) &amp; (img &lt;= to_color).all(axis=-1)
    img[mask] = target_color

if __name__ == "__main__":
    from_color = (100, 100, 100, 255)
    to_color = (150, 150, 150, 255)
    target_color = (0, 0, 0, 255)
    filename = "test.png"
    img = read_image(filename)
    picture_reset_pixels(img, from_color, to_color, target_color)
    write_image(img, filename)
</code></pre>

<p>Note that I chose not to return the modified image since the function modifies it inplace. If you want to avoid that, just add <code>img = img.copy()</code> as the first line and add <code>return img</code> at the end.</p>

<p>Also note that this assumes that your image has an alpha channel. If not you need to change <code>"RGBA"</code> to <code>"RGB"</code> and of course have the colours be only three-tuples.</p>
    </div>