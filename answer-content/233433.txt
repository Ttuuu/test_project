<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a whole your approach looks good, except for a couple of issues I'd suggest to fix:</p>

<ul>
<li><p><strong><code>__init__</code></strong> method<br>
Avoid repetitive indexing of nested structures like <code>self.config['httpd-conf']</code>.<br>Instead use assigned instance variable with <code>f-string</code> formatting:</p>

<pre><code>def __init__(self, config_file):
    self.config_file = config_file
    self.config = self.load_config()
    self.httpd_conf = self.config['httpd-conf']
    self.backup_file = f'{self.httpd_conf}.bak'
    self.syntax_check_cmd = self.config['syntax-check-cmd'].split()
    self.reload_cmd = self.config['reload-cmd'].split()
</code></pre></li>
<li><p><strong><code>find_diff</code></strong> method<br>
No need to convert a <em>generator</em> returned by <code>difflib.unified_diff</code> function into <code>list</code> with <code>diffs = list(...)</code> - the subsequent <strong><code>''.join(diffs)</code></strong> itself will take care of consuming generator.</p></li>
<li><p><code>call_httpd_commands</code> method<br>
This method is redundant as its main effect is reloading <code>httpd</code> server, but you already have the appropriate method for that purpose - <strong><code>reload_httpd</code></strong>. <br>Thus <code>call_httpd_commands</code> method's statements are just moved there and the old method is eliminated:</p>

<pre><code>def reload_httpd(self):
    try:
        subprocess.run(self.syntax_check_cmd, check=True)
        subprocess.run(self.reload_cmd, check=True)
    except subprocess.CalledProcessError as e:
        logging.exception("Reloading failed: %s", e)
</code></pre></li>
</ul>
    </div>