<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sadly, I have to disagree with some parts of Toby Speights answer.</p>
<h1>Heap performance</h1>
<p>Using a <code>std::priority_queue</code> (or falling back onto <code>std::make_heap</code>) sounds like a good idea at the first moment - until you look at what <code>heapify</code> actually does.</p>
<ul>
<li><p><code>std::priority_queue::pop</code> basically has to move the last element into the first place, and then bubble it down using likely <span class="math-container">\$\mathcal{O}(\log T)\$</span> bubble down operations (since it was on the lowest level before, it will likely return there).</p>
</li>
<li><p><code>std::priority_queue::push</code> (not <code>push_back</code>) then inserts the changed element at the last position of the heap, then bubbling it up until it reaches its final position. This depends on the actual time values on the heap, so I call this <span class="math-container">\$R\$</span> bubble up operations.</p>
</li>
<li><p><code>heapify</code> instead changes the value of the front element directly, and then bubbles it down. Using the values from above, this will take <span class="math-container">\$\mathcal{O}(\log T) - R\$</span> bubble down operations.</p>
</li>
</ul>
<p>Unless the newly inserted value will be on the lowest level of the heap (i.e. <span class="math-container">\$R = 0\$</span>), heapify will require less operations (<span class="math-container">\$\mathcal{O}(\log T) - R\$</span>) than <code>pop</code> + <code>push</code> (<span class="math-container">\$\mathcal{O}(\log T) + R\$</span>).</p>
<h1>Time compression</h1>
<p>The suggested time compression format, while likely working, seems a bit overkill. Unless testing shows it's measurably faster in the intended use case I'd stay with the more readable current version.</p>
    </div>