<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me collect a couple of thoughts here.</p>

<ul>
<li><p>When the input validation is not successful, users immediately get the <code>"&gt;&gt;"</code> prompt without any notification that their input wasn't accepted. Maybe add a hint that no action was performed?</p></li>
<li><blockquote>
  <p>Almost every example online uses <code>char</code> or <code>int</code> for the input, are there benefits to this?</p>
</blockquote>

<p>The input that you ask for so far is one out of <code>1</code>, <code>2</code>, <code>q</code> or <code>Q</code>, i.e., 4 entries from the ASCII table. Using a single <code>char</code> for this is a reasonable choice, but might be limiting when the program grows. Maybe you want to ask users for paths, tokens, anything with more than one character? Having setup everything with <code>std::string</code> in the first place might be the more pragmatic approach, as it simplifies things (e.g. one function for both the one-<code>char</code>-only and multi-<code>char</code>-input).</p></li>
<li><p>In <code>GetInput()</code>, you are doing more work than necessary:</p>

<pre><code>string s = "";
</code></pre>

<p>You want an empty string instance to be passed to <code>std::getline</code>, then default-construct it with <code>std::string s;</code> instead of initializing it with an empty string literal (remember that the type of <code>""</code> is <code>const char[1]</code>, <code>std::string s = "";</code> is not a no-op), see also Item 4 in Scott Meyer's Effective C++.</p></li>
<li><p>You flush the standard output a lot of time, when you actually just want a newline <code>\n</code> to be printed out. See <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">this thread</a> for more details.</p></li>
<li><p>This is in my opinion the most severe point: the menu logic doesn't scale well. What do you have to change when you need to add a third option? You need to adjust the initial check <em>and</em> you need another <code>else if</code> branch:</p>

<pre><code>input.find_first_not_of("123qQ") // ...

/* ... */ 

else if (input == "3") { /* ... */ }
</code></pre>

<p>The number of options to make this approach unreadable and hard to maintain is quite low, so think about an alternative here. To give you an idea of how this 
could be improved:</p>

<pre><code>struct MenuAction {
   std::string description;
   std::function&lt;void()&gt; action;
};

static const std::map&lt;std::string, MenuAction&gt; actionTable {
   {"1", { "Add entry", [](){ std::cout &lt;&lt; "Add entry" &lt;&lt; "\n";  }}},
   {"2", { "Edit entry", [](){ std::cout &lt;&lt; "Edit entry" &lt;&lt; "\n";  }}},
   {"q", { "Quit", [](){ std::cout &lt;&lt; "Quit" &lt;&lt; "\n";  }}}
};
</code></pre>

<p>Then, you can display available options (assuming C++17 is available) via</p>

<pre><code>for (const auto&amp; [key, value] : actionTable)
   std::cout &lt;&lt; key &lt;&lt; ". " &lt;&lt; value.description &lt;&lt; "\n";
</code></pre>

<p>and the original <code>if</code>-<code>else if</code>-<code>else</code> logic boils down to</p>

<pre><code>while (actionTable.count(input) == 0)
   input = GetInput();

actionTable.at(input).action();
</code></pre>

<p>Maintaining user options is now identical to maintaining the <code>std::map</code> instance.</p></li>
<li><p>Minor detail; you naming scheme doesn't seem to be consistent. <code>GetInput()</code> starts with an upper case letter, while <code>mainMenu()</code> with a lower case letter.</p></li>
<li><p>This is very rare, but you <em>could</em> use a <code>do</code>-<code>while</code> construct here to reduce the number of calls to <code>GetInput()</code>:</p>

<pre><code> std::string input;

 do
    input = GetInput();
 while (actionTable.count(input) == 0);
</code></pre>

<p>It seems at least debatable to me whether this is worth it, but as it crossed my mind, I couldn't resist suggesting it :)</p></li>
</ul>
    </div>