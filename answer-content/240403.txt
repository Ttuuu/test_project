<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>More constants</h2>

<p>This:</p>

<pre><code>    self.url: str = 'https://www.instagram.com/{name}/'
</code></pre>

<p>appears to be a constant, so it can join the others in class scope. While you're doing that, you can also pull the URL from <code>self.driver.get('https://www.instagram.com/accounts/login')</code> into a constant; and also pull the base URL out. In other words:</p>

<pre><code>class InstagramPV:
    MAX_WORKERS: int = 8
    N_PROCESSES: int = 8

    BASE_URL = 'https://www.instagram.com/'
    PROFILE_URL_FMT = BASE_URL + '{name}/'
    LOGIN_URL = BASE_URL + 'accounts/login'
</code></pre>

<h2>Nested <code>get</code></h2>

<p>These:</p>

<pre><code>load_and_check.get('graphql').get('user').get('edge_owner_to_timeline_media').get('count')
</code></pre>

<p>won't actually do what you want, which is a fail-safe object traversal. For that you need to provide defaults that are empty dictionaries:</p>

<pre><code>self.posts = (
    load_and_check.get('graphql', {})
    .get('user', {})
    .get('edge_owner_to_timeline_media', {})
    .get('count')
)
</code></pre>

<p>Also, the first part should be factored out into its own temporary variable, since it's used three times:</p>

<pre><code>user = (
    load_and_check.get('graphql', {})
    .get('user', {})
)
</code></pre>

<h2>Methods for reuse</h2>

<pre><code>self.driver.execute_script("return document.body.scrollHeight")
</code></pre>

<p>should be factored out into a new method for re-use.</p>

<h2>Static function</h2>

<p>This:</p>

<pre><code>def get_fields(self, nodes: Dict, *keys) -&gt; Any:
    """
    :param nodes: The json data from the link using only the first two keys 'graphql' and 'shortcode_media'
    :param keys: Keys that will be add to the nodes and will have the results of 'type' or 'URL'
    :return: The value of the key &lt;fields&gt;
    """
    fields = nodes['graphql']['shortcode_media']
    for key in keys:
        fields = fields[key]
    return fields
</code></pre>

<p>doesn't ever use <code>self</code>, which is a big clue that it doesn't belong as an instance method. You should just make it a <code>@staticmethod</code>. The only reason I don't recommend it moving to global scope is that it still has knowledge of the Instagram data format, with its reference to <code>graphql</code>.</p>

<h2>Dictionary traversal</h2>

<p>The loop in <code>get_fields</code> can be replaced with a call to <code>functools.reduce(dict.get, keys, media)</code>. Also, <code>keys</code> - even though it is a variadic argument - can still receive a type hint, and should be <code>Iterable[str]</code>. <code>nodes</code> itself, if you don't know a lot about the structure of the dictionary, can still be narrowed to <code>nodes: Dict[str, Any]</code>.</p>

<h2>Context manager for response</h2>

<p>Now that you're using the streaming interface for Requests (nice!), it's more important that you use the response object as a context manager. For more information read <a href="https://github.com/psf/requests/issues/4136" rel="nofollow noreferrer">https://github.com/psf/requests/issues/4136</a></p>

<p>Basically:</p>

<pre><code>with open(self.folder / f'Video{number}.mp4', 'wb') as f, \
     self.http_base.get(link, stream=True) as response:
    shutil.copyfileobj(response.raw, f)
</code></pre>
    </div>