<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Starting at the bottom of the code:</p>

<p>You don't have an <code>if __name__ == '__main__':</code> block. Unless things have changed in Python 3, you really ought to have one. (This distinguishes "module setup" code that should be run on every import of this .py file, from "main program" code that should only run when the .py file is run as a program.) Arguably it's just boilerplate in this case, but I think it's <em>good-habit-forming</em> boilerplate.</p>

<hr>

<pre><code>font = ("Helvetica", 12)

reset_button = tk.Button(
    canvas.master,
    font=font,
    text="Reset",
    background="hotpink",
    foreground="white",
    bd=0,
    command=reset,
)
</code></pre>

<p>On the other hand, this feels like <em>bad</em> boilerplate. Global variables are never nice, even when you promise their values are constant. Kneejerk, I would prefer to write</p>

<pre><code>reset_button = tk.Button(
    canvas.master,
    font=("Helvetica", 12),
    text="Reset",
    background="hotpink",
    foreground="white",
    bd=0,
    command=reset,
)
</code></pre>

<p>But you'd have to duplicate that <code>font=("Helvetica", 12)</code> assignment in several places! Well, programming is the art of detecting and removing duplication. Let's take the duplicated code and factor it out:</p>

<pre><code>def make_button(canvas, text, command):
    return tk.Button(
        canvas.master,
        font=("Helvetica", 12),
        text=text,
        background="hotpink",
        foreground="white",
        bd=0,
        command=command,
    )

reset_button = make_button(canvas, "Reset", reset)
canvas.create_window(0, -250, window=reset_button)

rotate_clockwise_button = make_button(canvas, "Rotate 120째 clockwise", rotate_clockwise)
canvas.create_window(
    0, -150, window=rotate_clockwise_button
)

rotate_anticlockwise_button = make_button(canvas, "Rotate 120째 anticlockwise", rotate_anticlockwise)
canvas.create_window(
    0, -200, window=rotate_anticlockwise_button
)

reflect_A_button = make_button("Reflect about perp. bisector of BC", reflect_A)
canvas.create_window(0, 100, window=reflect_A_button)

[...]
</code></pre>

<p>Now we see some more repetition. We also see a bunch of one-use global variables, such as <code>reset_button</code>, which don't need to be global (or exist at all, really). We also see one surprising asymmetry: you wrote the call to <code>canvas.create_window</code> as a three-liner in one place, whereas it's a one-liner in every other place.</p>

<p>So let's factor out the repetition and eliminate the asymmetry:</p>

<pre><code>def create_button(canvas, x, y, text, command):
    canvas.create_window(x, y, window=make_button(canvas, text, command))

canvas = screen.getcanvas()
create_button(canvas, 0, -250, "Reset", reset)
create_button(canvas, 0, -150, "Rotate 120째 clockwise", rotate_clockwise)
create_button(canvas, 0, -200, "Rotate 120째 anticlockwise", rotate_anticlockwise)
create_button(canvas, 0, 100, "Reflect about perp. bisector of BC", reflect_A)
create_button(canvas, 0, 150, "Reflect about perp. bisector of AC", reflect_B)
create_button(canvas, 0, 200, "Reflect about perp. bisector of AB", reflect_C)
</code></pre>

<p>What took you 72 lines in the original code, now takes 21 lines.</p>

<hr>

<p>I suggest applying this kind of redundancy-removal everywhere you can in your code, and then re-posting it as a new question. There are more interesting possibilities to discuss, re your interest in triangle symmetries. For example, maybe instead of hard-coding ideas like "the altitude through A hits the midpoint of BC; the altitude through B hits the midpoint of AC; the altitude through C hits the midpoint of AB," maybe you could encode the general principle that "the altitude through (x) hits the midpoint of (the two labeled points that aren't x)." You <em>might</em> approach that in roughly the same way that I approached the idea of "how to create a button with text (x) and command (y)."</p>
    </div>