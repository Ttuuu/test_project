<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code as presented suffers from an algorithmic problem known as <a href="https://en.wikipedia.org/wiki/Joel_Spolsky#Schlemiel_the_Painter's_algorithm" rel="nofollow noreferrer">The Algorithm of Shlemiel the Painter</a>. For example, after calculating 5! = 120 and going on to calculate 6!, the Factorial function has to determine 1×2×3×4×5×6, even though it has just been calculated what the product of the first five terms is. Not particularly important in this particular case because the numbers involved are so small, but it’s still something to be kept in mind. To address this concern, storing the last value of the factorial is helpful as then a single multiplication operation suffices to find out the new value.</p>

<p>Additionally, because the expression is symmetric, it’s only necessary to look for solutions where a ≥ b ≥ c. All other solutions will be permutations of what was found.</p>

<p>With that in mind, the code can be simplified just to this:</p>

<pre><code>#include &lt;iostream&gt;

int main()
{
    int const MAX = 11;
    for(int a = 0, af = 1; a &lt; MAX; af *= ++a)
    {
        for(int b = 0, bf = 1; b &lt;= a; bf *= ++b)
        {
            for(int c = 0, cf = 1; c &lt;= b; cf *= ++c)
            {
                if(af + bf + cf == a * b * c)
                {
                    std::cout &lt;&lt; "a: " &lt;&lt; a &lt;&lt; std::endl;
                    std::cout &lt;&lt; "b: " &lt;&lt; b &lt;&lt; std::endl;
                    std::cout &lt;&lt; "c: " &lt;&lt; c &lt;&lt; std::endl;
                    std::cout &lt;&lt; std::endl;
                }
            }
        }
    }
</code></pre>

<p>A more advanced technique would be to factor out the generation of the factorial sequence. Alas, without C++20 coroutines it’s clumsy. The main function becomes very pretty and clear:</p>

<pre><code>int main()
{
    int const MAX = 11;
    for(auto [a, af] : factorials_upto{MAX})
    {
        for(auto [b, bf] : factorials_upto{a + 1})
        {
            for(auto [c, cf] : factorials_upto{b + 1})
            {
                if(af + bf + cf == a * b * c)
                {
                    std::cout &lt;&lt; "a: " &lt;&lt; a &lt;&lt; std::endl;
                    std::cout &lt;&lt; "b: " &lt;&lt; b &lt;&lt; std::endl;
                    std::cout &lt;&lt; "c: " &lt;&lt; c &lt;&lt; std::endl;
                    std::cout &lt;&lt; std::endl;
                }
            }
        }
    }
}
</code></pre>

<p>but the code enabling that is less so:</p>

<pre><code>#include &lt;tuple&gt;

class factorial_iterator
{
public:
    factorial_iterator(int value): m_value{value}, m_product{1}
    {
    }

    std::tuple&lt;int, int&gt; operator *() const
    {
        return { m_value, m_product };
    }

    factorial_iterator&amp; operator ++()
    {
        m_product *= ++m_value;

        return *this;
    }

    bool operator !=(factorial_iterator const&amp; other) const
    {
        return m_value != other.m_value;
    }

private:
    int m_value;
    int m_product;
};

struct factorials_upto
{
    int m_end;

    friend factorial_iterator begin(factorials_upto const &amp;)
    {
        return {0};
    }

    friend factorial_iterator end(factorials_upto const&amp; fu)
    {
        return {fu.m_end};
    }
};
</code></pre>
    </div>