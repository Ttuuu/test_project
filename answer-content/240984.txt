<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are many issues with your posted example that prevent it from being sanely parsed by XML, including lack of closing tags and lack of a starting <code>xml</code> tag. You say that the content is generated: if you generated it, you should try to fix this. Anyway.</p>

<pre><code>import re

pat = re.compile('name="(.*?)".*'
                 'line-rate="([0-9.]*)"')

with open('test.xml') as f:
    for line in f:
        match = pat.search(line)
        if match:
            print(match.expand(r'\1 \2'))
</code></pre>

<p>This makes many assumptions:</p>

<ul>
<li>The attributes actually are in the same order every time (in your example, they aren't, despite you saying that they should be)</li>
<li>The file is guaranteed to have at most one line-rate/name pair per line</li>
<li>Those two attributes are always on the same line as each other</li>
</ul>

<p>If all of those conditions are satisfied, the above works.</p>

<h2>Actual XML</h2>

<p>If (as it seems you suggested in a now-rolled-back edit) your input can actually be valid XML, then a method that will perform more validation is</p>

<pre><code>from xml.sax import parse, ContentHandler

class Handler(ContentHandler):
    def startElement(self, name, attrs):
        name, rate = attrs.get('name'), attrs.get('line-rate')
        if name and rate:
            print(f'{name} {rate}')

parse('test.xml', Handler())
</code></pre>

<p>I do not know if it is faster, but it's probably a better idea to do this and halt-and-catch-fire if the XML is malformed, which SAX will do for you.</p>
    </div>