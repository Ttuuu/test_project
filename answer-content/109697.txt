<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Complexity</h1>

<h2>Sequence definition</h2>

<p>$$ F_{n+2} = F_{n+1} + F_n $$</p>

<p>which means that your complexity is \$ O(n) \$.</p>

<h2><a href="https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form" rel="noreferrer">Matrix definition</a></h2>

<p>$$ 
{
  \left ( 
    \begin{matrix}
      1 &amp; 1 \\
      1 &amp; 0
    \end{matrix} 
  \right )
} ^ n
=
\left (
  \begin{matrix}
    F_{n+1} &amp; F_n     \\
    F_n     &amp; F_{n-1}
  \end{matrix}
\right )
$$</p>

<p>As you can see with matrix definition we can improve complexity using <a href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring#Basic_method" rel="noreferrer">exponentiation by squaring</a> which tells us that </p>

<p>$$
A^{2n} = A^n \times A^n,
A^{n+1} = A^n \times A
$$</p>

<p>Which means that complexity using matrix definition is \$ O(\log n) \$</p>

<h1>Big integers</h1>

<p>Fibonacci numbers are fast growing sequence, so in order to store values you have to use <a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic" rel="noreferrer">arbitrary-precision arithmetic</a>.</p>
    </div>