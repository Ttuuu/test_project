<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Other answers have pointed out the code issues, but you also asked about potential improvements in efficiency.  Currently this program runs comparisons in <strong>O(n log n)</strong> time (per comparison), mainly due to the sorting algorithm.  (Any default library sorting algorithm is going to have average case <strong>O(n log n)</strong> time.)  Can we do better?  Sure.  This problem can be solved in <strong>O(2n + 2m)</strong> time (<strong>n</strong> being the number of characters per word and <strong>m</strong> being the number of unique letters in each word, strictly equal to or less than <strong>n</strong> by definition, so worst case <strong>O(4n)</strong>):</p>

<ol>
<li>Make a <code>Dictionary&lt;char, int&gt;</code>. (Maybe change <code>int</code> to <code>long</code> if you're testing <em>really</em> big data...)</li>
<li>For each character in the string, if its key is not in the dictionary, add it, setting the value to 1.  If it is in the dictionary, add 1 to its value.  This gives you a list of counts for each character in the string.</li>
<li>For each character in the other strings to compare, simply repeat 1 and 2.</li>
<li>Loop through keys on the dictionaries and compare your counts.  If any key exists in one dictionary and not the other, or there are two values with different counts, the words are not anagrams.  Otherwise, they are.</li>
</ol>

<p>Note: This comes at the expense of a some memory to store those dictionaries, but that's usually the case when you trade one resource (memory) for another (time).  The benefits most likely won't be noticeable for small data sets like yours (your longest example has only 4 letters), but for larger data sets, this algorithm will scale more gracefully.</p>

<p>You could also improve on this with some obvious sanity checks: e.g. if the strings are not the same length you can immediately return <code>false</code> without even bothering to check anything else, etc.</p>

<p>If you're only comparing 2 words, you could also combine the last 2 steps - only keep one dictionary, and on the second word you decrease the counts in the dictionary for each letter (immediately shortcut returning <code>false</code> if a key is not found in the second word, and removing any entry whose count is reduced to 0), then check that the dictionary is empty at the end.  (This only works for comparing just 2 words, because it destroys the dictionary in the process, but might be more efficient overall.)</p>
    </div>