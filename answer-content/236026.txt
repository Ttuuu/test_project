<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't Return Values from <code>void</code> Functions</h2>

<pre><code>    if (!A || !B)
        return false;
    else if (A == B)
        return false;
</code></pre>

<p>The function <code>void swapNode(List *listNode, char nameA[30], char nameB[30])</code> is declared void, which means it doesn't return a value, yet it attempts to return false in two places. Some compilers actually report this as an error. Rather than <code>return false;</code> it should just be <code>return;</code>. </p>

<p>The two if statements above could be rewritten as one if statement</p>

<pre><code>    if ((!A || !B) || (A == B))
    {
        return;
    }
</code></pre>

<h1>Missing Error Checking</h1>

<p>The C programming memory allocation functions <code>malloc(size_t size)</code>, <code>calloc(size_t count, size_t size)</code> and <code>realloc( void *ptr, size_t new_size)</code> may fail. If they do fail then they return NULL. Any time one of these functions are called, the result should be tested to see if it is NULL. Referencing fields through a NULL pointer yields unknown behavior and is generally a bug.</p>

<pre><code>Node *safeMalloc(size_t size)
{
    Node* newNode = malloc(size);
    if (newNode == NULL)
    {
        fprintf(stderr, "Memory allocation failed in safeMalloc\n");
        exit(EXIT_FAILURE);
    }

    return  newNode;
}

Node *createNewNode(int point, char name[30], Node *prev, Node *next)
{
    Node *newNode = safeMalloc(sizeof(*newNode));
    newNode-&gt;point = point;
    strcpy(newNode-&gt;name, name);
    newNode-&gt;next = next;
    newNode-&gt;prev = prev;

    return newNode;
}
</code></pre>

<h2>Declarations of Node Structs</h2>

<p>It might have been easier to write the struct declarations as </p>

<pre><code>typedef struct node
{
    int point;
    char name[30];
    struct node *next;
    struct node *prev;
} Node;

typedef struct list
{
    Node *head;
    Node *tail;
    int count;
} List;
</code></pre>

<h2>Complexity</h2>

<p>The function <code>void swapNode(List *listNode, char nameA[30], char nameB[30])</code> can be simplified by breaking it into 2 functions, one that does the comparisons and then calls a swaping function as necessary:</p>

<pre><code>void doSwap(Node *A, Node*B)
{
    Node p=*A;
    *A=*B;
    *B=p;

    B-&gt;next = A-&gt;next;
    B-&gt;prev = A-&gt;prev;

    A-&gt;next = p.next;
    A-&gt;prev = p.prev;
}

void swapNode(List *listNode, char nameA[30], char nameB[30])
{
    Node *A = NULL, *B = NULL;
    Node *temp = listNode-&gt;head;

    for (int i = 0; i &lt; listNode-&gt;count; i++)
    {
        if (compareName(temp-&gt;name, nameA))
        {
            A = temp;
        }
        else if (compareName(temp-&gt;name, nameB))
        {
            B = temp;
        }
        temp = temp-&gt;next;
        if (A &amp;&amp; B)
        {
            break;
        }
    }

    if ((A &amp;&amp; B) &amp;&amp; (A != B))
    {
        doSwap(A,B);
    }
}
</code></pre>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<h2>A Good Habit for Programming in C and C++</h2>

<p>For readability and maintainability a good good habit (best practice) to get into is to always put the actions in <code>if</code> statements and loops into braces (<code>{</code> and <code>}</code>) as shown in the previous example. One of the major causes of bugs is to add a single line to the contents of an iff statement and to forget to add the necessary the necessary braces. This type of problem is very hard to track down when it doesn't result in a compiler error.</p>

<h2>Leaks</h2>

<blockquote>
  <p>Are there any errors like memory leak in my code?  </p>
</blockquote>

<p>If the code was part of a larger project there would be memory leaks, the function <code>free(void *ToBeFreed)</code> is never called. It might be better if some linked list operations such as <code>deleteNode()</code> were added to the code. </p>
    </div>