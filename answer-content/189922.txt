<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Feedback:</strong></p>
<ul>
<li><p>The Haskell <code>pyths</code> is not very efficient, and it contains duplicate answers.</p>
</li>
<li><p><code>fun</code> instead of <code>val</code>/<code>val rec</code> is syntactic sugar for function declarations.</p>
</li>
<li><p>Instead of <code>generateIntsUpTo n</code>, use <code>List.tabulate (n, fn i =&gt; i+1)</code>.</p>
</li>
<li><p>Using <code>rev</code> to achieve a tail-recursive function can be a good choice. Neither SML/NJ's or Moscow ML's <code>List.tabulate</code> is tail-recursive, though. If you're worrying about performance here, consider the fact that you don't actually need to store these numbers in lists -- this is purely a convenience so that you can use list comprehensions to iterate their combinations.</p>
</li>
</ul>
<p><strong>Pythagorean triples in Standard ML</strong></p>
<blockquote>
<p>I wanted to do it using the minimum amount of custom code.</p>
</blockquote>
<p>To achieve the same efficiency as the Haskell <code>pyths</code> and use the minimum amount of custom code, here is one version that uses <code>List.filter</code>, <code>List.concat</code> and <code>List.tabulate</code>:</p>
<pre><code>fun isPythTriple (x, y, z) = x*x + y*y = z*z
fun tab1 n f = List.tabulate (n, fn i =&gt; f (i+1))
fun pyths n =
    List.filter isPythTriple (
      List.concat (tab1 n (fn x =&gt;
      List.concat (tab1 n (fn y =&gt;
                   tab1 n (fn z =&gt; (x,y,z)))))))
</code></pre>
<p>This takes several seconds for <code>pyths 10</code>; there really is not reason to generate <em>O(nÂ³)</em> list elements when the solution subset is so sparse.</p>
<blockquote>
<p>I have been thinking on write my own recursive functions</p>
</blockquote>
<p>Writing your own helper functions is really not something that should be avoided. Generally, using library functions is good, but Standard ML's library is somewhat limited. For example, <code>List.tabulate</code> can't iterate a range of numbers without generating the list in memory. And as you're hinting at, the multiple nested <code>foldr</code>s does not make the code particularly readable.</p>
<p>You could for example combine <code>List.tabulate</code> and <code>List.filter</code> to reduce memory consumption:</p>
<pre><code>fun tabfilter (from, to, f) =
    if from &gt; to then [] else
      case f from of
           SOME value =&gt; value :: tabfilter (from+1, to, f)
         | NONE       =&gt;          tabfilter (from+1, to, f)

fun isPythTriple (x, y, z) = x*x + y*y = z*z

fun pyths n =
    List.concat (tabfilter (1, n, fn x =&gt;
      SOME (List.concat (tabfilter (1, n, fn y =&gt;
        SOME (tabfilter (1, n, fn z =&gt; Option.filter isPythTriple (x, y, z))))))))
</code></pre>
<p>This runs orders of magnitude faster. Still, it is a little convoluted.</p>
<p>A plain recursive version:</p>
<pre><code>fun isPythTriple (x, y, z) = x*x + y*y = z*z
fun pyths n =
    let fun loop (0, _, _) = []
          | loop (x, 0, _) = loop (x-1, n, n)
          | loop (x, y, 0) = loop (x, y-1, n)
          | loop (t as (x, y, z)) =
            if isPythTriple t then t :: loop (x,y,z-1) else loop (x,y,z-1)
    in rev (loop (n, n, n)) end
</code></pre>
<p>And a tail-recursive variant of the same:</p>
<pre><code>fun isPythTriple x y z = x*x + y*y = z*z
fun pyths n =
    let fun loop 0 _ _ res = res
          | loop x 0 _ res = loop (x-1) n n res
          | loop x y 0 res = loop x (y-1) n res
          | loop x y z res =
            let val res' = if isPythTriple x y z
                           then (x,y,z) :: res
                           else res
            in loop x y (z-1) res'
            end
    in loop n n n [] end
</code></pre>
    </div>