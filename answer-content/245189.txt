<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Edit: Sorry for the ridiculously long answer. I've added an alternative (better) way of doing this at the bottom.</p>
<p>Here are a few things you could improve:</p>
<h2><code>class TicTacToe</code></h2>
<p>There's no need for this class. You can get (probably) rid of it.</p>
<h2>Spaces</h2>
<p>Overall, your code is well-formatted, but there a few instances like these, where you missed spaces:</p>
<pre><code>if(turnNumber%2 == 0)    |&gt;   if (turnNumber % 2 == 0)
pattern=&gt;{               |&gt;   pattern =&gt; {
def startGame: Unit ={   |&gt;   def startGame(): Unit = {
</code></pre>
<hr>
<h2>Type aliases</h2>
<p>I don't know about you, but I like using type aliases because they help me remember what each type represents. It's also handy when you have to refactor your code, e.g., if you want to represent moves using tuples representing the row and column (<code>(Int, Int)</code>) or you want to make a <code>Board</code> class instead of just using an array of characters, you don't have to change your method signatures - they can still return and accept objects of type <code>Player</code> and <code>Board</code>.</p>
<pre><code>type Player = Char
type Board = Array[Player]
</code></pre>
<hr>
<h2>Unnecessary braces and the <code>main</code> method</h2>
<p>Instead of</p>
<pre><code>def main(args: Array[String]): Unit = {
    startGame
}
</code></pre>
<p>you could make it a one-liner</p>
<pre><code>def main(args: Array[String]) = startGame
</code></pre>
<p>However, it'd be much more helpful to announce instructions before starting the game (I know those instructions don't match your own game, but bear with me).</p>
<pre><code>def main(args: Array[String]): Unit = {
    println("Welcome to Tic Tac Toe!")
    println("To play, enter the row and column of the cell where you want to move when prompted")
    println("Both the row and column must be numbers from 1 to 3")

    runGame()
}
</code></pre>
<hr>
<h2><code>startGame</code></h2>
<p>Rather than <code>startGame</code>, I feel like you should name it <code>runGame</code>, but that's entirely subjective, and you should pick whatever feels more intuitive to you.</p>
<p>More importantly, I think the <code>startGame</code> should be a nilary method rather than a nullary method, i.e., it should have an empty parameter list so that it looks like a proper method call rather than a property access. Currently, it looks very confusing when you just have <code>startGame</code> to run the entire game, since it looks like an unused expression.</p>
<hr>
<h2>Storing the board</h2>
<p>Using a 1-D array of characters to represent a board is fine for now, although not very good functional programming style. There are a lot of other issues here, though.</p>
<h3><code>board.update</code></h3>
<p>You can use <code>board(atPosition) = nextPlayer(board)</code> instead of <code>board.update(atPosition, nextPlayer(board))</code>, since the <code>update</code> method is one of Scala's special methods that let you use syntactic sugar.</p>
<h3>Adding the current board to the game</h3>
<p>Currently, you use <code>List(board) ++ game</code>, which creates a new list and then concatenates <code>game</code> to it. A better approach would be <code>board :: game</code>, which is more idiomatic and simpler.</p>
<h3>Why using a <code>List[Array[Char]]</code> is bad</h3>
<p>First of all, there is absolutely no reason to maintain a list of all the past boards. You don't use the <code>game</code> variable everywhere. You can just have a single <code>Array[Char]</code> to keep track of the current board. Even if you do need to be able to go back to a previous move, you can just maintain a <code>List[Move]</code> and use it to reconstruct the board at a specific time.</p>
<p>Second, every single board you store in <code>game</code> refers to the exact same object! You're not copying <code>board</code> anywhere, so when you write the below code, you're getting the head of <code>game</code>, updating it, and then prepending that same board back onto <code>game</code>.</p>
<pre><code>val board: Array[Char] = game.head
board.update(atPosition, nextPlayer(board))
</code></pre>
<p>A better solution would be to use tuples or a case class of your making. I'm going to just use tuples for now, because case classes would bloat the code.</p>
<pre><code>type Row = (Player, Player, Player)
type Board = (Row, Row, Row)
</code></pre>
<p>Now that the board's 2-D, let's also make our moves 2-D, actually. They'll represent the row and column of each move. I made them 1-indexed in my code because I also make the user pick a number from 1 to 3 instead of 0 to 2 because I feel it'd be easier. By also internally using 1 instead of 0, we'll reduce off-by-one errors.</p>
<pre><code>type Move = (Int, Int)
</code></pre>
<hr>
<h2>Variables</h2>
<p>At the top of your object, you have a ton of variables, of which you need only one - patterns (which I'm going to rename to <code>winCases</code>, because that is more descriptive to me). There's no need to make separate public variables for <code>l1</code>, <code>l2</code>, etc. You can just do it like this (I used <code>Set</code> because the order doesn't matter):</p>
<pre><code>val winCases = Set(
    Set((1, 1), (1, 2), (1, 3)),
    Set((2, 1), (2, 2), (2, 3)),
    Set((3, 1), (3, 2), (3, 3)),
    Set((1, 1), (2, 1), (3, 1)),
    Set((1, 2), (2, 2), (3, 2)),
    Set((1, 3), (2, 3), (3, 3)),
    Set((1, 1), (2, 2), (3, 3)),
    Set((1, 3), (2, 2), (3, 1)),
  )
</code></pre>
<p><code>startBoard</code> can just be a local variable in <code>runGame</code> and doesn't have to be accessible by everyone.</p>
<p><code>winConditions</code> we won't need because the whole <code>isWon</code> method can be refactored. There's absolutely no need to make a new string for each element of <code>patterns</code>/<code>winCases</code>.</p>
<hr>
<h2>Finding the winner</h2>
<p>I don't like the fact that your <code>isWon</code> method prints the winner instead of only returning whether or not someone has won the game. A better way to do it would be to return a player and let the calling method decide what to display to the user. For that, I made this method:</p>
<pre><code>def findWinner(board: Board): Either[Unit, Option[Player]] =
    if (isWinner(player1, board)) Right(Some(player1))
    else if (isWinner(player2, board)) Right(Some(player2))
    else if (isTie(board)) Right(None)
    else Left(())
</code></pre>
<p>Having an <code>Either[Unit, Option[Player]]</code> lets us encode multiple things into that single value. If it's a <code>Left</code>, we know the game will continue. If it's a <code>Right</code>, the game's ended. If it's the latter, containing a <code>Some</code>, there's a winner, and if it's a <code>None</code>, there's a tie.</p>
<hr>
<h2>Back to <code>startGame</code>/<code>runGame</code></h2>
<p>Among other things, I've renamed the <code>playGameAt</code> function to <code>playRound</code>. I also changed the signature. It takes the current board and player, and outputs the winner of the game. If there's a winner, it's a <code>Some</code>. If there's a tie, it's a <code>None</code>.</p>
<pre><code>def playRound(board: Board, curr: Player): Option[Player]
</code></pre>
<p>Here's how the new function looks:</p>
<pre><code>@tailrec
def playRound(board: Board, curr: Player): Option[Player] = {
  printBoard(board)
  println(s"Player $curr's move")
  val move = nextMove(board)
  val newBoard = moveTo(curr, move, board)
  findWinner(newBoard) match {
    case Right(possWinner) =&gt; possWinner
    case Left(_)           =&gt; playRound(newBoard, nextPlayer(curr))
  }
}
</code></pre>
<p>I've put the call to <code>printBoard</code> at the very top, because even though all tic-tac-toe boards are the same (unless you're playing a special variant), I personally would like to see the board I'm going to be moving on before I actually select a move. It's totally subjective, but I prefer it this way.</p>
<p>The print statement lets you know which player is supposed to move. The way you have it now, the users have to scroll up to see whose move it is currently, and this seems more helpful.</p>
<p>After that, it gets the next move with the <code>nextMove</code> function (which I'll put in later), creates a <em>new</em> board using that move, and tries to find the winner (see above for how the <code>findWinner</code> method works). If the game's ended, it returns the winner (or <code>None</code> if it's a tie). If not, it plays another round using a new board and the other player.</p>
<p><code>nextPlayer</code> is implemented like this, by the way:</p>
<pre><code>def nextPlayer(curr: Player): Player =
    if (curr == player1) player2
    else player1
</code></pre>
<p>The entire <code>runGame</code> function looks like this:</p>
<pre><code>def runGame() = {
    @tailrec
    def playRound(board: Board, curr: Player): Option[Player] = ...

  val startBoard = (
    (default, default, default),
    (default, default, default),
    (default, default, default)
  )

  val winner = playRound(startBoard, player1)
  winner match {
    case Some(player) =&gt; println(s"Player $player won!")
    case None         =&gt; println("Tie")
  }
}
</code></pre>
<p>Here, <code>startBoard</code> is just a local variable, because I don't think there's any reason for anybody outside this method to know about it. <code>default</code> is a <code>Char</code> that represents a cell where no one's moved. <code>player1</code> and <code>player2</code> are used to mark where Player 1 and Player 2 moved, respectively.</p>
<pre><code>val default = ' '
val player1 = 'x'
val player2 = 'o'
</code></pre>
<p>I also moved the print statement from <code>isWon</code> to here, so that there could be a customized message. Otherwise, if there was a tie, nothing would happen.</p>
<hr>
<h2>User input</h2>
<p>It doesn't make sense to me that you're using a <code>JOptionPane</code> and displaying everything in the terminal. Why not make the user input also come from the console? We can write our <code>nextMove</code> method like this:</p>
<pre><code>@tailrec
def nextMove(board: Board): Move = {
  val move = (nextRowOrCol("Row"), nextRowOrCol("Column"))

  if (isValid(move, board)) {
    move
  } else {
    println("That move is already taken. Please enter a different move.")
    nextMove(board)
  }
}
</code></pre>
<p>The above code reads a row and column using the helper function <code>nextRowOrCol</code>, then checks if it's a valid move, i.e., no one's moved there already. If it is, it just returns it, and if not, it gets the user to re-enter a move. I'll add the <code>isValid</code> function a little below.</p>
<p><code>nextRowOrCol</code> is implemented like this (prompt can be either "Row" or "Column"). It uses regex to ensure that the input is a number between 1 and 3. Like the <code>nextMove</code> function, if the row or column inputted is valid, it returns it directly, otherwise, it prompts the user(s) again.</p>
<pre><code>private def nextRowOrCol(prompt: String): Int = {
  val input = readLine(s"$prompt: ")

  if (input.matches("[1-3]")) {
    input.toInt
  } else {
    println("Please enter a number from 1 to 3")
    nextRowOrCol(prompt)
  }
}
</code></pre>
<hr>
<h2>The entire code</h2>
<p>As the heading says, here's the entire code. You'll notice that it's wayyy longer than what you have currently, mostly because I used tuples, which complicated everything, but also because your original solution didn't have a lot of functionality.</p>
<p>I'm sure you can find a way to make it shorter, especially if you use your own case classes to represent everything. I've made almost every function that deals with tiny details like destructuring tuples <code>private</code>, but the public functions shouldn't need to be changed much even if you do decide to make a <code>case class Board</code> or something like that.</p>
<pre><code>import scala.io.StdIn.readLine
import scala.annotation.tailrec

object TicTacToe {

  type Player = Char
  type Move = (Int, Int)
  type Row = (Player, Player, Player)
  type Board = (Row, Row, Row)

  val winCases = Set(
    Set((1, 1), (1, 2), (1, 3)),
    Set((2, 1), (2, 2), (2, 3)),
    Set((3, 1), (3, 2), (3, 3)),
    Set((1, 1), (2, 1), (3, 1)),
    Set((1, 2), (2, 2), (3, 2)),
    Set((1, 3), (2, 3), (3, 3)),
    Set((1, 1), (2, 2), (3, 3)),
    Set((1, 3), (2, 2), (3, 1)),
  )

  val default = ' '
  val player1 = 'x'
  val player2 = 'o'

  def main(args: Array[String]) = {
    println("Welcome to TicTacToe!")
    println("To play, enter the row and column of the cell where you want to move when prompted")
    println("Both the row and column must be numbers from 1 to 3")

    runGame()
  }

  def runGame() = {
    @tailrec
    def playRound(board: Board, curr: Player): Option[Player] = {
      printBoard(board)
      println(s"Player $curr's move")
      val move = nextMove(board)
      val newBoard = moveTo(curr, move, board)
      findWinner(newBoard) match {
        case Right(possWinner) =&gt; possWinner
        case Left(_)           =&gt; playRound(newBoard, nextPlayer(curr))
      }
    }

    val startBoard = (
      (default, default, default),
      (default, default, default),
      (default, default, default)
    )

    val winner = playRound(startBoard, player1)
    winner match {
      case Some(player) =&gt; println(s"Player $player won!")
      case None         =&gt; println("Tie")
    }
  }

  def findWinner(board: Board): Either[Unit, Option[Player]] =
    if (isWinner(player1, board)) Right(Some(player1))
    else if (isWinner(player2, board)) Right(Some(player2))
    else if (isTie(board)) Right(None)
    else Left(())

  def moveTo(player: Player, move: Move, board: Board): Board = {
    val (row0, row1, row2) = board
    val (r, c) = move

    def updateTuple[T](tup: (T, T, T), ind: Int)(f: T =&gt; T): (T, T, T) = 
      ind match {
        case 1 =&gt; tup.copy(_1 = f(tup._1))
        case 2 =&gt; tup.copy(_2 = f(tup._2))
        case 3 =&gt; tup.copy(_3 = f(tup._3))
      }

    updateTuple(board, r) {
      row =&gt; updateTuple(row, c)(_ =&gt; player)
    }
  }

  def isWinner(player: Player, board: Board): Boolean =
    winCases.exists(winCase =&gt;
      winCase.forall(move =&gt; playerAt(move, board) == player)
    )

  def isTie(board: Board): Boolean = !board.productIterator.exists {
    row =&gt; row.asInstanceOf[Row].productIterator.contains(default)
  }

  def playerAt(move: Move, board: Board): Player = {
    val (r, c) = move
    elementAt(elementAt(board, r), c)
  }

  private def elementAt[T](tup: (T, T, T), ind: Int): T =
    ind match {
      case 1 =&gt; tup._1
      case 2 =&gt; tup._2
      case 3 =&gt; tup._3
    }

  @tailrec
  def nextMove(board: Board): Move = {
    val move = (nextRowOrCol("Row"), nextRowOrCol("Column"))

    if (isValid(move, board)) {
      move
    } else {
      println("That move is already taken. Please enter a different move.")
      nextMove(board)
    }
  }

  private def nextRowOrCol(prompt: String): Int = {
    val input = readLine(s"$prompt: ")

    if (input.matches("[1-3]")) {
      input.toInt
    } else {
      println("Please enter a number from 1 to 3")
      nextRowOrCol(prompt)
    }
  }

  def isValid(move: Move, board: Board): Boolean = 
    playerAt(move, board) == default

  def nextPlayer(curr: Player): Player =
    if (curr == player1) player2
    else player1

  def printBoard(board: Board): Unit =
    print(
      "__________________\n" + 
      tup2String(
        mapTuple(board) {row =&gt; tup2String(row, "|")},
        "------\n"
      )
    )

  private def tup2String[T](tup: (T, T, T), sep: String): String =
    s"${tup._1}$sep${tup._2}$sep${tup._3}\n"

  private def mapTuple[T, R](tup: (T, T, T))(f: T =&gt; R): (R, R, R) =
    (f(tup._1), f(tup._2), f(tup._3))
}
</code></pre>
<hr>
<p>Edit:</p>
<h2>An alternative way of storing the board</h2>
<p>Working with tuples is really annoying, and even with case classes, you'd have to define your own methods and stuff. A nicer way to store the board would be to just maintain a list of all the moves anyone's ever made. Every move should contain where that move was made and the player who made that move, so let's makes these two types. By the way, the <code>Move</code> from before is more like <code>Coord</code> here.</p>
<pre><code>type Coord = (Int, Int)
type Move = (Coord, Player)
</code></pre>
<p>Now everywhere we use <code>board: Board</code>, we just replace that with <code>moves: List[Move]</code>.</p>
<p><code>playRound</code> doesn't change all that much. The variable <code>move</code> now has to include the current player because of how we defined <code>Move</code> above, and the <code>newMoves</code> variable (analogous to <code>newBoard</code>) is constructed by prepending <code>moves</code> to the pre-existing list of moves, which is a lot easier than creating a <code>moveTo</code> function that does all sorts of crazy stuff inside. Everywhere else, just remember that <code>board</code> has been replaced with <code>moves</code>.</p>
<pre><code>@tailrec
def playRound(moves: List[Move], curr: Player): Option[Player] = {
  println(s"Player $curr's move")
  val move = (nextMove(moves), curr)
  val newMoves = move :: moves
  printBoard(newMoves)
  findWinner(newMoves) match {
    case Right(possWinner) =&gt; possWinner
    case Left(_)           =&gt; playRound(newMoves, nextPlayer(curr))
  }
}
</code></pre>
<p><code>runGame</code> only has 1 change: instead of manually creating a variable called <code>startBoard</code> filled with the default character (<code>' '</code>), you can use <code>List.empty</code> (or <code>Nil</code>):</p>
<pre><code>val winner = playRound(List.empty, player1)
</code></pre>
<hr>
<p><code>playerAt</code> is a lot simpler now. It tries to find a move with the given coordinates, and if no move with those coordinates is found in our <code>List[Move]</code>, then <code>default</code> is chosen.</p>
<pre><code>def playerAt(coord: Coord, moves: List[Move]): Player =
    moves.find(move =&gt; move._1 == coord).map(_._2).getOrElse(default)
</code></pre>
<hr>
<p><code>isTie</code> is also a lot simpler - just check if 9 moves have been made!</p>
<pre><code>def isTie(moves: List[Move]): Boolean = moves.size == 9
</code></pre>
<hr>
<p><code>printBoard</code> is the only one with big-ish changes (the good kind). You can just use <code>map</code> and <code>mkString</code> now that we're not using tuples.</p>
<pre><code>def printBoard(moves: List[Move]): Unit =
    print(
      1 to 3 map { r =&gt;
          1 to 3 map { c =&gt;
            playerAt((r, c), moves)
          } mkString "|"
      } mkString ("__________\n", "\n------\n", "\n")
    )
</code></pre>
<hr>
<p>The entire code:</p>
<pre><code>import scala.io.StdIn.readLine
import scala.annotation.tailrec

object TicTacToe2 {

  type Player = Char
  type Coord = (Int, Int)
  type Move = (Coord, Player)

  val winCases: Set[Set[Coord]] = Set(
    Set((1, 1), (1, 2), (1, 3)),
    Set((2, 1), (2, 2), (2, 3)),
    Set((3, 1), (3, 2), (3, 3)),
    Set((1, 1), (2, 1), (3, 1)),
    Set((1, 2), (2, 2), (3, 2)),
    Set((1, 3), (2, 3), (3, 3)),
    Set((1, 1), (2, 2), (3, 3)),
    Set((1, 3), (2, 2), (3, 1))
  )

  val default = ' '
  val player1 = 'x'
  val player2 = 'o'

  def main(args: Array[String]) = {
    println("Welcome to TicTacToe!")
    println(
      "To play, enter the row and column of the cell where you want to move when prompted"
    )
    println("Both the row and column must be numbers from 1 to 3")
    printBoard(List.empty)

    runGame()
  }

  def runGame() = {
    @tailrec
    def playRound(moves: List[Move], curr: Player): Option[Player] = {
      println(s"Player $curr's move")
      val move = (nextMove(moves), curr)
      val newMoves = move :: moves
      printBoard(newMoves)
      findWinner(newMoves) match {
        case Right(possWinner) =&gt; possWinner
        case Left(_)           =&gt; playRound(newMoves, nextPlayer(curr))
      }
    }

    val winner = playRound(List.empty, player1)
    winner match {
      case Some(player) =&gt; println(s"Player $player won!")
      case None         =&gt; println("Tie")
    }
  }

  def findWinner(moves: List[Move]): Either[Unit, Option[Player]] =
    if (isWinner(player1, moves)) Right(Some(player1))
    else if (isWinner(player2, moves)) Right(Some(player2))
    else if (isTie(moves)) Right(None)
    else Left(())

  def isWinner(player: Player, moves: List[Move]): Boolean =
    winCases.exists { winCase =&gt;
      winCase.forall(move =&gt; playerAt(move, moves) == player)
    }

  def isTie(moves: List[Move]): Boolean = moves.size == 9

  def playerAt(coord: Coord, moves: List[Move]): Player =
    moves.find(move =&gt; move._1 == coord).map(_._2).getOrElse(default)

  @tailrec
  def nextMove(moves: List[Move]): Coord = {
    val coord = (nextRowOrCol("Row"), nextRowOrCol("Column"))

    if (isValid(coord, moves)) {
      coord
    } else {
      println("That move is already taken. Please enter a different move.")
      nextMove(moves)
    }
  }

  private def nextRowOrCol(prompt: String): Int = {
    val input = readLine(s"$prompt: ")

    if (input.matches("[1-3]")) {
      input.toInt
    } else {
      println("Please enter a number from 1 to 3")
      nextRowOrCol(prompt)
    }
  }

  def isValid(coord: Coord, moves: List[Move]): Boolean =
    playerAt(coord, moves) == default

  def nextPlayer(curr: Player): Player =
    if (curr == player1) player2
    else player1

  def printBoard(moves: List[Move]): Unit =
    print(
      1 to 3 map { r =&gt;
          1 to 3 map { c =&gt;
            playerAt((r, c), moves)
          } mkString "|"
      } mkString ("__________\n", "\n------\n", "\n")
    )
}
</code></pre>
<hr>
<p>By the way, here's a small change you can make concerning the <code>isValid</code> method. Instead of returning a boolean, return an <code>Option</code> with which you can do <code>getOrElse</code>. If you write a <code>validate</code> function like this:</p>
<pre><code>def validate(coord: Coord, moves: List[Move]): Option[Coord] =
    Option.when(playerAt(coord, moves) == default)(coord)
</code></pre>
<p>you can use it in <code>nextMove</code> like this, which looks much more idiomatic. The only thing is that you'll have to drop the <code>tailrec</code> annotation.</p>
<pre><code>def nextMove(moves: List[Move]): Coord = {
  val coord = (nextRowOrCol("Row"), nextRowOrCol("Column"))

  validate(coord, moves).getOrElse {
    println("That move is already taken. Please enter a different move.")
    nextMove(moves)
  }
  }
</code></pre>
<hr>
<p>Let me know if there's anything I did wrong or can improve.</p>
    </div>