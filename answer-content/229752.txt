<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public enum SizeSmall
    {
        length = 200,
        breadth = 300,
        height = 150,
    }
    public enum SizeMedium
    {
        length = 300,
        breadth = 400,
        height = 200,
    }
    public enum SizeLarge
    {
        length = 400,
        breadth = 600,
        height = 250
    }
</code></pre>
</blockquote>

<p>Your use of the <code>enum</code> type is a little unusual. Normally an <code>enum</code> represents discrete values of the same kind, but yours each describes a parcel definition. A more "correct" way to define your dimension limits by <code>enum</code> types could be:</p>

<pre><code>public enum Lengths 
{
  Small = 200,
  Medium = 300,
  Large = 400
}

public enum Breadths
{
  Small = 300,
  Medium = 400,
  Large = 200
}

public enum Heights 
{
  Small = 150,
  Medium = 200,
  Large = 250
}
</code></pre>

<hr>

<p>You don't tell if the input dialog was given by the assignment, but anyway I find it a little laborious, not least because the user has to determine which side of the parcel is the length, the breadth and the height. Normally I would take the longest dimension for the length, but your lengths are actually shorter than the breadths? </p>

<p>Therefore I would help the user by letting him/her enter the dimensions more or less arbitrarily at one single prompt:</p>

<p>Start by letting the user enter units (it is counter intuitive that the units is entered after the values):</p>

<pre><code>Console.Write("Enter units to use [m, cm, mm]: ");
</code></pre>

<p>Then the input with the max values as guidance: </p>

<pre><code>Console.Write("Enter the size (L, B, H) (max: 400 x 200 x 250 mm) ");
</code></pre>

<p>Then when done, it's your programs job to first parse the input and then determine the right parcel by comparing the input with the parcel dimensions and maybe exchange the values for length and breadth if necessary etc.</p>

<hr>

<p>Another thing that I would be frustrated about if I had to use your program, is that it evaluates the input as the last thing before it gives me the answer. A more user friendly approach would be to evaluate each input when it is entered - and letting the user enter a new value until a valid one is entered or until a an "exit program" token is specified.</p>

<hr>

<p>You are very polite and descriptive in dialogue with the user, which is normally fine in human to human interaction (and maybe AI to human interaction) but in a plain calculation dialogue no one expects a detailed conversation so make it shorter and more precise. If needed you can provide a help function for each prompt or something like that.</p>
    </div>