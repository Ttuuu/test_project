<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hi Mahmoud and welcome to CodeReview!</p>

<p>It is great that you want to learn C++. Your project already is advanced and it is quite an achievement that you came to a working solution. As the project is large, I
will more focus on overall design than on small improvements. Also, I lack a windows build machine, so I cannot run the program, though I expect it to work just fine.</p>

<h1>General</h1>

<ul>
<li>Only make functions public, that are really required from the outside of a class.</li>
<li>Review your naming. There are quite some examples of functions where the intent is not really clear (<code>hit_built_points_down()</code>, <code>refresh_final_points()</code>). Why is isn't  <code>isvalid</code> in <code>Game::regame()</code> called <code>invalid</code>? </li>
<li>Separate the data storage, game logic and state display. If you want to exchange the user interface at one point in the future, why should you need to touch the Board storage?  </li>
<li>Keep constructors lightweight. You should only initialize internal variables, no logic belongs here.</li>
<li>Reduce the number of includes in the headers. Only add headers that are required (because you reference a type defined in them).</li>
<li>Learn about passing variables by reference (Piece::get_body()).</li>
</ul>

<h1>Game</h1>

<ul>
<li>Do not put the loop in the constructor. Move it out of game, as it's intent is "running multiple games in a row". Same for <code>Game::regame()</code>.</li>
<li>Why do you configure a speed when you override it before the first use? Remove it for now, too many moving parts are harder to handle.</li>
<li>You don't need <code>check_move</code> and <code>check_rotate</code> functions. Create a copy of the current piece, move and rotate and then check for collisions.</li>
</ul>

<h1>Board</h1>

<ul>
<li>Consider changing the design. Why not having a vector of rows where each row consists of multiple cells? If your data-structure makes a cell available via its coordinates, what does the cell need to store in extent? Also, having a row based data-structure allows for easier deletion and prepending of rows. </li>
<li>You should store width and height as a constant, it will not change during the game.</li>
</ul>

<h1>Piece</h1>

<ul>
<li>Do not call <code>srand(time(0))</code> here, it is not related to a "Piece". This should be done at the main class. Also pass the type as a parameter.</li>
<li>I would not pass the Cell to the constructor, you can easily move the piece afterwards.</li>
<li>As said further, remove the <code>next_</code> functions and simply copy the piece and do collision checking with the copy.</li>
<li>Remove <code>set_body</code> it is not referenced from anywhere.</li>
</ul>

<h1>Cell</h1>

<ul>
<li><code>shift_copy</code> should be split into two functions, a copy constructor and a shift (move?) function. You already have both.</li>
</ul>
    </div>