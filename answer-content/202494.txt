<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Make up your mind. <code>dynamic_fgets</code> returns the same information via return value (<code>return *rtr</code>) and the in-out parameter (<code>char ** rtr</code>). Chose one.</p></li>
<li><p>Do not cast <code>malloc</code> return value. In C it is redundant, and may cause hard-to-find bugs.</p>

<p>If, for any reason, you feel you need to cast it, be consistent and cast <code>realloc</code> as well.</p>

<p>Ditto for <code>sizeof(char)</code>. It is 1 by definition; if you still want to spell it out in a call to <code>malloc</code>, do so for <code>realloc</code>.</p></li>
<li><p><code>*rtr = realloc(*rtr, ....)</code> is dangerous, for it leads to memory leak. Shall <code>realloc</code> fail, the memory pointed by <code>*rtr</code> prior to the call is lost. Consider instead</p>

<pre><code>char * tmp = realloc(*rtr, ....);
if (tmp == NULL) {
    // whatever recovery strategy you may come up with, e.g. free(*rtr);
    ....
    return error_indication;
}
*rtr = tmp;
.... // Business as usual
</code></pre></li>
<li><p>Every call to <code>dynamic_fgets</code> allocates 1024 bytes for <code>buf</code>, which is never <code>free</code>d. 1024 bytes per call leaked.</p></li>
<li><p>An unconditional reallocation looks strange. Chances are that what <code>fgets</code> have read is fitting into an allocated space just fine. Consider testing for <code>\n</code> first, and <code>realloc</code> only if necessary.</p></li>
<li><p><code>strncat(*rtr, buf, bufsize)</code> must find a terminating <code>\0</code> in a memory pointed by <code>*rtr</code>, which leads to quadratic time complexity. You should track where the terminator was placed by the previous iteration.</p></li>
<li><p><code>buf</code> is unnecessary. You may read directly into <code>*rtr</code> (plus offset, see the above bullet), thus sparing a copy.</p></li>
</ul>
    </div>