<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing I'm going to do first is create an enum with only two values. This represents a binary value and is more memory-efficient than passing around a bunch of <code>u8</code>s. This way 16 <code>Bit</code>s can be represented as 16 actual bits in memory (though this isn't guaranteed).</p>

<pre><code>/// a single bit
#[derive(Clone, Copy, Debug)]
enum Bit {
    /// 1, high
    H1 = 1,
    /// 0, low
    L0 = 0,
}
use Bit::*; // allow us to just use `L0` and `H1` without the `Bit::` prefix
</code></pre>

<p>It is likely much faster to split a number into bits using numerical operators. There are a couple ways of doing it.</p>

<ol>
<li>Iterating a mask</li>
</ol>

<p>With this we increase our mask each time, building an array from it. The <code>15 - i</code> is there because we want the MSB at index 0.</p>

<pre><code>/// convert a number to 16 bits by sliding a mask across it
fn into_bits_mask(num: u16) -&gt; [Bit; 16] {
    let mut out = [L0; 16];

    for i in 0..16 {
        out[15 - i] = if num &amp; (1u16 &lt;&lt; i) &gt; 0 {
            H1
        } else {
            L0
        };
    }

    out
}
</code></pre>

<ol start="2">
<li>Shifting the number with a static mask</li>
</ol>

<p>This is essentially the same thing, but we shift the number instead of the mask.</p>

<pre><code>/// convert a number to 16 bits by right-shifting it
fn into_bits_shift(num: u16) -&gt; [Bit; 16] {
    let mut out = [L0; 16];

    for i in 0..16 {
        out[15 - i] = if (num &gt;&gt; i) &amp; 1u16 &gt; 0 {
            H1
        } else {
            L0
        };
    }

    out
}
</code></pre>

<p>We can then modify these to output an array of 4 nibbles. </p>

<pre><code>/// convert a number to 4 nibbles by sliding a mask across it
fn into_nibbles_mask(num: u16) -&gt; [[Bit; 4]; 4] {
    let mut out = [[L0; 4]; 4];

    for i in 0..16 {
        let mask = 1u16 &lt;&lt; (15 - i);
        out[i / 4][i % 4] = if num &amp; mask &gt; 0 {
            H1
        } else {
            L0
        };
    }

    out
}

/// convert a number to 4 nibbles by right-shifting it
fn into_nibbles_shift(num: u16) -&gt; [[Bit; 4]; 4] {
    let mut out = [[L0; 4]; 4];

    for i in 0..16 {
        out[i /4][i % 4] = if (num &gt;&gt; (15 - i)) &amp; 1u16 &gt; 0 {
            H1
        } else {
            L0
        };
    }

    out
}
</code></pre>

<p>There is room for more optimization here, of course.</p>

<p>Here's a working example: <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=b010e34728d554e995e0de4ddb4b1eed" rel="nofollow noreferrer">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=b010e34728d554e995e0de4ddb4b1eed</a></p>

<p>EDIT: I was asked about using iterators, so here's my most iterator-function styled method</p>

<pre><code>/// convert a number to 4 nibbles using iterator methods
fn into_nibbles_iter(num: u16) -&gt; Vec&lt;Vec&lt;Bit&gt;&gt; {
    // split into nibbles
    [num &gt;&gt; 12, num &gt;&gt; 8, num &gt;&gt; 4, num]
        .iter()
        .map(|nibble| {
            // mask off each bit
            [nibble &amp; 8, nibble &amp; 4, nibble &amp; 2, nibble &amp; 1]
                .iter()
                // convert to Bits
                .map(|b| if b &gt; &amp;0 { H1 } else { L0 })
                .collect()
        })
        .collect()
}
</code></pre>

<p>And here's a new playground link demonstrating it: <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=5ecda81379c3cab749709f551109adfb" rel="nofollow noreferrer">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=5ecda81379c3cab749709f551109adfb</a></p>
    </div>