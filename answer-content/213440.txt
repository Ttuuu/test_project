<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    x++;
</code></pre>
</blockquote>

<p>This is very inefficient.</p>

<p>The intended approach is probably to write a successor function which takes a "perfect"<sup>1</sup> number and gives the next one by manipulating its digits. The optimal approach probably starts by getting a fast calculation for the number of "perfect" numbers with <span class="math-container">\$d\$</span> digits.</p>

<p>But even if you want to use brute force, there's an easy speed-up by a factor of 10:</p>

<pre><code>let i = 0, prefix = 0;
while (i &lt; n) {
    prefix++;
    lastDigit = 10 - digitSum(prefix);
    if (lastDigit &gt;= 0 &amp;&amp; lastDigit &lt;= 9) i++;
}
</code></pre>

<hr>

<p><sup>1</sup> The term "perfect number" already means something else, and they should have chosen a different name.</p>
    </div>