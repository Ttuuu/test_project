<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>find_current_element</code> is a poor name, <code>find_nonempty</code> would better describe what it's doing.</li>
<li><code>find_current_element</code> is a strange form of iteration where you constantly resume the function from where it left off. This would be better described using a generator function.</li>
<li>Your function is good as you're swapping items in the list rather than <code>list.insert(0, value)</code>.</li>
<li>You don't need to invert the list twice as you can just work backwards, appending to the end.</li>
<li>Since we can do this by mutating the original list, I won't return the new list.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def find_nonempty(values, is_empty):
    for i in reversed(range(len(values))):
        if not is_empty(values[i]):
            yield i

def push(values, is_empty):
    good_index = len(values) - 1
    for i in find_nonempty(values, is_empty):
        values[i], values[good_index] = values[good_index], values[i]
        good_index -= 1
</code></pre>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; list_ = [" ", " ", "X", " ", " ", "Z", " ", "Y", " "]
&gt;&gt;&gt; push(list_, lambda i: i == " ")
&gt;&gt;&gt; list_
[' ', ' ', ' ', ' ', ' ', ' ', 'X', 'Z', 'Y']
</code></pre>

<p>Personally I would just use two list comprehensions, if I were to not use <code>list.sort</code>, as the logic would be much clearer.</p>

<pre class="lang-py prettyprint-override"><code>def push(values, is_empty):
    return (
        [v for v in values if is_empty(v)]
        + [v for v in values if not is_empty(v)]
    )
</code></pre>
    </div>