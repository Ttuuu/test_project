<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks OK for what it does so far, but there are some things you might want to do to improve it:</p>

<h2>Always use <code>{}</code> for production rules</h2>

<p>It's not technically wrong to simply have <code>printf(...)</code> to the right of a rule, but when your lexer gets more complex (and when you start also using a parser) you may find it easier to troubleshoot if you always use <code>{}</code> to enclose production rules -- even empty ones.</p>

<h2>Think about explicitly handling whitespace</h2>

<p>It's very common for a parser to need to ignore whitespace. If that's the case, it's usually good to do so explicitly with a rule just above the error-handling rule(s) I mention below.</p>

<pre><code>[ \t\n]+   { /* ignore whitespace */ }
</code></pre>

<h2>Consider a "catch-all" rule for illegal tokens</h2>

<p>Right now, pretty much any random character will be accepted.  This might be fine, but especially while you're learning, you may find it useful to put a catch-all rule at the bottom of your list of rules:</p>

<pre><code>.   { printf("Bad character: %s\n", yytext); }
</code></pre>

<h2>Consider adding support for multiline comments</h2>

<p>As your original (pre-edit) code had it, handling multiline comments is different but not too difficult.  You can add this to your definitions (the first part of a <code>flex</code> file):</p>

<pre><code>%x c_comment
</code></pre>

<p>Then add these rules to the rules section (second part of a <code>flex</code> file):</p>

<pre><code>"/*"   { BEGIN(c_comment); }
&lt;c_comment&gt;[^*]*        { }
&lt;c_comment&gt;"*"+[^*/]*   { }
&lt;c_comment&gt;"*/"         { printf("Ignored a multiline comment\n"); BEGIN(INITIAL); }
</code></pre>

<p>This defines a <em>start condition</em> called <code>c_comment</code> and switches into that condition when it finds the opening pair of characters for a comment.  The next rule ignores everyting that is not a <code>*</code> character. The next line ignores all <code>*</code> characters that are <strong>not</strong> followed by a <code>/</code>.  The point to these two rules is to match as many characters as possible.  For performance reasons, you would generally want to write your lexer so that it matches strings that are as long as possible for each rule.  This helps the lexer go faster.  </p>

<p>Finally, the last rule finds the closing pair of characters and switches back into the initial context.  You will also often see <code>BEGIN(0)</code> for that -- the statements are identical in function, but I prefer the more verbose <code>BEGIN(INITIAL)</code> form because I think it's easier to understand.  </p>
    </div>