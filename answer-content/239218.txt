<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Enumerate</h1>

<p><code>for i in range(len(y)):</code> is an antipattern.  If you want indices (<code>i</code>) and the values at those indices (<code>y[i]</code>) the Pythonic way is using <code>enumerate</code>:</p>

<pre><code>for i, yi in enumerate(y):
</code></pre>

<h1>Start indices</h1>

<p>Let's take a moment and split this task into two parts: the start indices and the stop indices.  First, the start indices:</p>

<pre><code>start = []
if y[0]:
    start.append(0)
for i in range(len(y)):
    if y[i] and not y[i-1]:
        start.append(i)
</code></pre>

<p>That almost looks like it could be replaced by list comprehension ...</p>

<pre><code>start = [i for i, yi in enumerate(y) if yi and not y[i-1]]
</code></pre>

<p>... except for that <code>y[i-1]</code> part, which may wrap around and grab a value from the end of the array.  What you really want to do is <code>zip</code> the <code>y[i]</code> and <code>y[i-1]</code> sequences together.  We just need to start the <code>y[i-1]</code> sequence off with a leading <code>False</code> value:</p>

<pre><code>start = [i for i, (y1, y2) in enumerate(zip([False] + y[:-1], y)) if y2 &gt; y1]
</code></pre>

<h1>Stop indices</h1>

<p>The stop indices are similar, zipping <code>y[i]</code> with <code>y[i+1]</code> with a trailing <code>False</code>:</p>

<pre><code>stop = [i for i, (y1, y2) in enumerate(zip(y, y[1:] + [False])) if y2 &lt; y1]
</code></pre>

<h1>Groupby</h1>

<p>And now for something completely different.</p>

<p><code>itertools.groupby()</code> takes sequential items with matching keys, groups them together, and emits them together with their key.  We just need the <code>True</code> and <code>False</code> values to be the key, and attach the index numbers to the <code>True</code>/<code>False</code> values.</p>

<pre><code>&gt;&gt;&gt; [list(group) for key, group in groupby(enumerate(x), key=lambda ix: ix[1])]
[[(0, True)],
 [(1, False), (2, False)],
 [(3, True), (4, True), (5, True)],
 [(6, False)],
 [(7, True)],
 [(8, False), (9, False), (10, False)],
 [(11, True), (12, True)],
 [(13, False)],
 [(14, True)]]
</code></pre>

<p>(output reformatted to show one inner list per line, for clarity)</p>

<p>But we only want the groups where the <code>key</code> is <code>True</code>:</p>

<pre><code>&gt;&gt;&gt; [list(group)
...  for key, group in groupby(enumerate(x), key=lambda ix: ix[1])
...  if key]
[[(0, True)],
 [(3, True), (4, True), (5, True)],
 [(7, True)],
 [(11, True), (12, True)],
 [(14, True)]]
</code></pre>

<p>For each group, we want the first and the last items in the group:</p>

<pre><code>&gt;&gt;&gt; [[group[0], group[-1]]
...  for group in (list(group)
...                for key, group in groupby(enumerate(x),
...                                          key=lambda ix: ix[1])
...                if key)]
[[(0, True), (0, True)],
 [(3, True), (5, True)],
 [(7, True), (7, True)],
 [(11, True), (12, True)],
 [(14, True), (14, True)]]
</code></pre>

<p>Actually, we only want the indices stored in those items:</p>

<pre><code>start_stop = [[group[0][0], group[-1][0]]
              for group in (list(group)
                            for key, group in groupby(enumerate(x),
                                                      key=lambda ix: ix[1])
                            if key)]
</code></pre>

<p>Which gives:</p>

<pre><code>&gt;&gt;&gt; start_stop
[[0, 0], [3, 5], [7, 7], [11, 12], [14, 14]]
</code></pre>

<hr>

<p>In the comments, <a href="https://codereview.stackexchange.com/users/98493/graipher">Graipher</a> suggests:</p>

<blockquote>
  <p>Personally, I would make getting the groups a generator expression assigned to a variable and then iterator over that in a list comprehension ... </p>
</blockquote>

<pre><code>from itertools import groupby
from operator import itemgetter

groups = (list(group) for key, group in groupby(enumerate(x), key=itemgetter(1))
                      if key)
start_stop = [[group[0][0], group[-1][0]] for group in groups]
</code></pre>

<blockquote>
  <p>... using <code>operator.itemgetter</code> (instead of the <code>lambda ix: ix[1]</code>) for some more readability.</p>
</blockquote>

<hr>

<p>In the comments, <a href="https://codereview.stackexchange.com/users/98633/roottwo">RootTwo</a> suggests:</p>

<blockquote>
  <p>This could be simplified by grouping the indices directly instead of using <code>enumerate</code>:</p>
</blockquote>

<pre><code>[(group[0], group[-1]) for group in (
 list(group) for key, group in groupby(range(len(x)), key=x.__getitem__) if key)]
</code></pre>

<hr>

<p>Timings, for a list of 15,000,000 entries (the original <code>x</code> list, replicated one million times):</p>

<pre><code>Original:   7.3 seconds
AJNeufeld:  6.4 seconds
Graipher:   5.5 seconds
RootTwo:    3.1 seconds
</code></pre>
    </div>