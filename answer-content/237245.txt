<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By</p>

<blockquote>
  <p>doesn't e get modified all times</p>
</blockquote>

<p>I think you are asking why <code>e</code> retains its original value even after it gets changed by recursive calls.</p>

<p>Part of the misunderstanding is the way <code>e</code> is defined:</p>

<pre><code>int e;
</code></pre>

<p>If you had instead said:</p>

<pre><code>static int e;
</code></pre>

<p>then yes, every time the value gets changed in a recursive call, the value in the calling function will also get changed.
With static storage there is only a single instance of <code>e</code>.
Defining it that way would indeed have produced incorrect results.</p>

<p>If you had instead said:</p>

<pre><code>auto int e;
</code></pre>

<p>then no, the recursive calls will not affect the value in the calling function.
Each invocation of the function causes storage to be <em>auto</em>matically allocated on the stack for another instance of <code>e</code>.
If it recurses a thousand times, at the deepest level there will be a thousand distinct instances of <code>e</code> on the stack.
And at each level, the function can see only its own copy.</p>

<p>Now C has a history of letting programmers be lazy (one of its major faults), and if one omits the word "auto" or "static" the compiler notices the context and decides what you really meant.</p>

<p>In this case, it did the right thing (it almost always does) and knew that you really meant "auto", and allocated a separate storage location for each invocation.</p>

<p>Most programmers <em>do</em> omit the keyword <code>auto</code>, but I prefer to always use it, both to remind me that it <em>isn't</em> static, global, external, or (in older versions) block common, and to make it easier to find when I'm searching for definitions.</p>
    </div>