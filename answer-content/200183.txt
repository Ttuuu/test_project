<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would follow <a href="https://codereview.stackexchange.com/questions/200176/python-cleaning-up-date-strings-to-return-as-strings/200179#200179">@Mathias answer</a> for the Pythonic comments, however...</p>

<blockquote>
  <p>I think my best bet is not to convert to type datetime, but to try to match strings.</p>
</blockquote>

<p>I disagree, <strong>Don't Reinvent the wheel</strong>.</p>

<p>Instead of manually cleaning these dates, there are some really good libraries that can do this for you. Check out the <a href="https://dateutil.readthedocs.io/en/stable/" rel="noreferrer">python-dateutil</a> library.</p>

<p>To avoid the special cases of <code>12-10-1887</code> being the 12th of October, not the 10th of December, you can use <code>parser.parse(d, dayfirst=True)</code> which will assume day-month format rather than month-day.</p>

<p>As @Mathias mentioned, dateutil is similar to pandas, so this would work with <code>.to_datetime(dayfirst=True)</code> too, <a href="https://pandas.pydata.org/pandas-docs/version/0.20/generated/pandas.to_datetime.html" rel="noreferrer">see the docs</a>.</p>

<hr>

<pre><code>from dateutil import parser

def cleanup(dates):
    for date in dates:
        try:
            yield parser.parse(date, dayfirst=True)
        except (ValueError, TypeError) as e:
            print("Exception {} on unhandled date {}".format(e, date))

if __name__ == "__main__":
    dates = [1858.0, '1-12-1963', '1945-2', '7-2018', '1789-7-14']
    for date in cleanup(dates):
        print(date)
</code></pre>
    </div>