<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Making a pool of coroutines seems not to be the way why we invented coroutines. Coroutines means to be lightweight, so that they can be created in very large numbers. Rather than limiting the number of coroutines, I think the right way to do this is to limit the running coroutines, and:</p>

<p>use an <code>asyncio.Semaphore</code></p>

<pre><code>async def worker(semaphore, coro):
    async with semaphore:
        await coro()


async def scheduler(corotines):
    tasks = []
    semaphore = asyncio.BoundedSemaphore(pool_size)
    for coro in corotines:
        tasks.append(loop.create_task(worker(coro))
    await asyncio.gather(*tasks)


loop.run_until_complete(scheduler(coroutines))
loop.close()
</code></pre>

<p>check out <a href="https://quentin.pradet.me/blog/how-do-you-limit-memory-usage-with-asyncio.html" rel="nofollow noreferrer">this article</a> for a full example.</p>
    </div>