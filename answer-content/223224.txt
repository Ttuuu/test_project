<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>
<p>The thread functions <code>function_count1</code> and <code>function_count2</code> are practically identical. It would be simpler to have one function that is prameterized based on some input argument.</p>
<p>I don't like global modifiable state. Pass in the variables as parameters to your function. This allows your functions to be much more flexable in how they work.</p>
<h2>Implementation</h2>
<p>You do things multiple times (I know its only two in both cases). But it would be simpler to write things in terms of loops. This will make the code easier to modify.</p>
<h2>Code Review</h2>
<p>Global state is never a good idea.</p>
<pre><code>pthread_mutex_t count_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condition_var = PTHREAD_COND_INITIALIZER;
int count = 1;
</code></pre>
<hr>
<p>Multiple variables number like this implies an array.</p>
<pre><code>    pthread_t thread1, thread2;
</code></pre>
<p>If we use a loop here:</p>
<pre><code>    if( (ret=pthread_create( &amp;thread1, NULL, &amp;function_count1, "thread1")) )
    {..}

    if( (ret=pthread_create( &amp;thread2, NULL, &amp;function_count2, "thread2")) )
    {...}
</code></pre>
<p>And here:</p>
<pre><code>    pthread_join( thread1, NULL);
    pthread_join( thread2, NULL);
</code></pre>
<hr>
<p>Here you are checking something from multiple loops outside the confines of a mutex.</p>
<pre><code>    while(count &lt;= 10)
    {
        pthread_mutex_lock( &amp;count_mutex );
</code></pre>
<hr>
<p>Normally when using conditional variable you use a loop (not an if). The loop checks the condition until it is true. While false you wait on the condition. Your solution works because the main code is inside the <code>else</code> and you repeat using the outer loop. I think using a while loops makes it neater.</p>
<pre><code>        if (count % 2 != 0)
        {
            pthread_cond_wait(&amp;condition_var, &amp;count_mutex);
            printf("%s : counter = %d\n", (char *)arg, count++);
        }
        else
        {
            pthread_cond_signal(&amp;condition_var);
        }
        // Or use this:
        while (count % 2 != 0)
        {
            pthread_cond_wait(&amp;condition_var, &amp;count_mutex);
        }
        printf("%s : counter = %d\n", (char *)arg, count++);
        pthread_cond_signal(&amp;condition_var);
</code></pre>
<hr>
<h2>I would implement like this:</h2>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;

void* threadAction(void* arg);


typedef struct ThreadInfo
{
    char const*         name;
    int*                counter;
    int                 div;
    int                 rem;
    pthread_mutex_t*    mutex;
    pthread_cond_t*     cond;
    pthread_t           thread;
} ThreadInfo;

int main()
{
    int             count           = 1;
    pthread_mutex_t count_mutex     = PTHREAD_MUTEX_INITIALIZER;
    pthread_cond_t  condition_var   = PTHREAD_COND_INITIALIZER;

    ThreadInfo  threads[2] = {{"thread-0", &amp;count, 2, 0, &amp;count_mutex, &amp;condition_var}, {"thread-1", &amp;count, 2, 1, &amp;count_mutex, &amp;condition_var}};

    for (int loop = 0; loop &lt; 2; ++loop)
    {
        int ret;
        ret=pthread_create(&amp;threads[loop].thread, NULL, &amp;threadAction, threads + loop);
        if (ret != 0)
        {
            printf("%s creation failed: %d\n", threads[loop].name, ret);
            exit (EXIT_FAILURE);
        }
    }

    for (int loop = 0; loop &lt; 2; ++loop)
    {
        pthread_join(threads[loop].thread, NULL);
    }

    exit(EXIT_SUCCESS);
}
void* threadAction(void* arg)
{
    ThreadInfo* info = (ThreadInfo*)arg;

    pthread_mutex_lock(info-&gt;mutex);
    while((*info-&gt;counter) &lt;= 10)
    {
        while ((*info-&gt;counter) % info-&gt;div != info-&gt;rem)
        {
            pthread_cond_wait(info-&gt;cond, info-&gt;mutex);
        }
        printf("%s : counter = %d\n", info-&gt;name, (*info-&gt;counter)++);
        pthread_cond_signal(info-&gt;cond);
    }
    pthread_mutex_unlock(info-&gt;mutex);
    return NULL;
}
</code></pre>
    </div>