<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Use <code>const</code></strong></p>

<p>As code does not modify the string at <code>qiact_reply</code>, uses <code>const</code> for greater functionality (function can then accept <code>const char *</code>) and open to more optimizations.  It also conveys to the caller that <code>qiact_repl</code> data is not changed.</p>

<p><strong>Use integer</strong></p>

<p>I'd expect <code>CTX_ACTIVE</code> to be <code>1</code> and not <code>'1'</code> and scan accordingly.  As defined, it works in OP's code, but is unusual.</p>

<p><strong><code>size_t</code></strong></p>

<p>Good use of <code>size_t</code> for array indexing.</p>

<p><strong>Why <code>CTX_MAX_CNT</code>?</strong></p>

<p><code>CTX_MAX_CNT</code> appears secondary.  I'd limit parsing to the length of the string <code>qiact_reply</code>.</p>

<p><strong>IP: No range protection</strong><sup>1</sup></p>

<p>Pedantic code would insure range is [0...255].  That is easier to do with <code>strtol()</code> than <code>strtoul()</code>.  Not  a big issue though.</p>

<p><strong>Parsing unclear</strong></p>

<p>Subjective: I found the code difficult to assess how well it catches all corner cases of invalid input detection.  To that end, I offer an alternative below.  It has weakness<sup>1</sup> too, but I can see them easier.</p>

<p>I've allowed for liberal acceptance of white-space.</p>

<p>I also like the clear idea that <code>*ctx_ip</code> is only changed when the function returns <code>true</code>.  Alternative code may want to clear <code>*ctx_ip</code> on <code>false</code>.</p>

<pre><code>#define IP_FMT " \"%3" SCNu8 " .%3" SCNu8 " .%3" SCNu8 " .%3" SCNu8 " \""

static bool ctx_get_ip2(const char *qiact_reply, uint8_t ctx_id, struct ip_addr *ctx_ip) {

  if (IS_INVALID_CTX_ID(ctx_id) || (NULL == qiact_reply)) {
      return false; // bad ID or pointer
  }

  const char *s = qiact_reply;
  while (*s) {
    struct ip_addr my_ctx_ip;
    int my_ctx_id;
    char my_ctx_state;
    // Use %n to record scanning offset
    int n = 0;
    sscanf(s, " +QIACT: %2d , %c , 1 ," IP_FMT " %n",  &amp;my_ctx_id, &amp;my_ctx_state, //
        &amp;my_ctx_ip.ip[0], &amp;my_ctx_ip.ip[1], &amp;my_ctx_ip.ip[2], &amp;my_ctx_ip.ip[3],   //
        &amp;n);
    if (n == 0) {
      return false;  // Parsing incomplete, Invalid syntax
    }
    if (my_ctx_id == ctx_id) {
      if (my_ctx_state != CTX_ACTIVE) {
        return false;  // Not active
      }
      *ctx_ip = my_ctx_ip;
      return true;  // Success!
    }
    s += n;  // advance to next
  }
  return false;  // record not found
}
</code></pre>
    </div>