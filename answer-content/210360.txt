<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general your code looks good. But I have some little annotations (improvements) for you.</p>

<h3>1. I'd prefer direct initialization of <code>itr</code> for sake of readability:</h3>

<pre><code>myMapType::const_iterator itr = myMap.find(2);
</code></pre>

<p>instead of </p>

<pre><code>myMapType::const_iterator itr;
itr = myMap.find(2);
</code></pre>

<p>That said you could also avoid </p>

<pre><code>typedef std::map&lt;int, runFunc&gt; myMapType;
</code></pre>

<p>completely using the <code>auto</code> keyword:</p>

<pre><code>auto itr = myMap.find(2);
</code></pre>

<h3>2. Make use <code>std::function</code> and lambda bindings</h3>

<p>For the callable value parameter of the <code>std::map</code> I'd prefer to use an appropriate <a href="https://en.cppreference.com/w/cpp/utility/functional/function" rel="nofollow noreferrer"><code>std::function</code></a> value type and <a href="https://en.cppreference.com/w/cpp/language/lambda" rel="nofollow noreferrer"><em>lambda function bindings</em></a> to the instance to operate on.</p>

<pre><code>testClass t1;

std::map&lt;int, std::function&lt;void()&gt;&gt; myMap;
myMap.emplace(1, [&amp;t1](){t1.testFunc1();});
myMap.emplace(2, [&amp;t1](){t1.testFunc2();});
</code></pre>

<p>This will give you greater flexibility for later changes and use of other classes than just <code>testClass</code>. Also you can get rid of that other type definition then:</p>

<pre><code>typedef void(testClass::*runFunc)(void);
</code></pre>

<p>As soon you want to use your map for the general case you can clearly see the benefits:</p>

<pre><code>class A {
public:
     void print() { std::cout &lt;&lt; "print() from class A.\n"; }
};

class B {
public:
     void print() { std::cout &lt;&lt; "print() from class B.\n"; }
};

// ...
int main() {
    A a;
    B b;

    std::map&lt;int, std::function&lt;void()&gt;&gt; myMap;
    myMap.emplace(1, [&amp;a](){a.print();});
    myMap.emplace(2, [&amp;b](){b.print();});

}
</code></pre>

<hr>

<p>Here's my set of changes in whole (you can check it's still working as intended <a href="http://coliru.stacked-crooked.com/a/ddc6f12661f9f89b" rel="nofollow noreferrer">here</a>): </p>

<pre><code>#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;functional&gt;

class testClass
{
public:
    void testFunc1() { std::cout &lt;&lt; "func1\n"; }
    void testFunc2() { std::cout &lt;&lt; "func2\n"; }
};

int main() {
    testClass t1;

    std::map&lt;int, std::function&lt;void()&gt;&gt; myMap;
    myMap.emplace(1, [&amp;t1](){t1.testFunc1();});
    myMap.emplace(2, [&amp;t1](){t1.testFunc2();});

    auto itr = myMap.find(2);

    if (itr != myMap.end()) {
        (itr-&gt;second)();
    }
}
</code></pre>
    </div>