<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I haven't checked whether your logic following the <code>//check: X, Y + 1</code> comments is correct, but it can be refactored as follows. You're basically checking 8 directions (N, NE, E, SE, S, SW, W, NW), each uniquely identified by a <code>dx</code> and a <code>dy</code> between -1 and 1. You need to exclude the case where <code>dx</code> and <code>dy</code> are both 0. </p>

<pre><code>dx    -1 0 +1
dy -1 NW N NE
    0  W .  E
   +1 SW S SE
</code></pre>

<p>That would give code like this:</p>

<pre><code>for (int dx = -1; dx &lt;= 1; dx++) {
    for (int dy = -1; dy &lt;= 1; dy++) {
        if (dx == 0 &amp;&amp; dy == 0)
            continue;

        if (x + dx &lt; 0 || x + dx &gt; 7 || y + dy &lt; 0 || y + dy &gt; 7)
            continue;

        if (Bord[y + dy, x + dx] != oppositeColor)
            continue;

        int i = 2;
        while (i &lt;= 7)
        {
            if (x + i * dx &lt; 0 || x + i * dx &gt; 7 || y + i * dy &lt; 0 || y + i * dy &gt; 7)
                break;
            if (Bord[y + i * dy, x + i * dx] == Color.None)
                break;
            if (Bord[y + i * dy, x + i * dx] == color)
            {
                return true;            
            }
            i++;
        }
    }
}
</code></pre>
    </div>