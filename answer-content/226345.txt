<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>if (line.empty()) throw std::logic_error("Invalid input");
</code></pre>

<p><code>std::logic_error</code> is used for "violating logical preconditions or class invariants", which generally translates to programmer error (and means it's seldom the correct exception type to use).</p>

<p>Invalid input data certainly doesn't fit this category, and we should probably use <code>std::runtime_error</code> instead.</p>

<hr>

<pre><code>for (int i = 0; i &lt; 4; i++)
{
    std::string line;
    std::getline(file, line);
    if (line.empty()) throw std::logic_error("Invalid input");
    std::istringstream iss(line);

    if (i == 0) ...
    else if (i == 1) ...
    else if (i == 2) ...
    else if (i == 3) ...
}
</code></pre>

<p>A for loop with a separate branch for every iteration? Hmm.</p>

<p>We can avoid this by abstracting the code that needs to be repeated (reading a line) into a separate function, and then do something like:</p>

<pre><code>objects.count = ReadObjectCount(readLine(file));
objects.weights = ReadObjectWeights(readLine(file), objects.count);
objects.minWeight = CalculateMinWeight(objects.weights);
objects.startingOrder = ReadObjectOrder(readLine(file), objects.count);
objects.endingOrder = ReadObjectOrder(readLine(file), objects.count);
...
</code></pre>

<p>It's probably neater to calculate the min weight after we've read all of the weights, instead of doing it as we go.</p>

<hr>

<p>The <code>amountOfObjects</code> should be a <code>std::size_t</code>, since it can't be negative, and should match the vectors' index type.</p>

<p>Similarly, the order vectors should contain <code>std::size_t</code> if they represent indices into a vector.</p>

<p>Presumably weights can also never be negative. So we should use an unsigned type like <code>std::uint32_t</code> or <code>std::uint64_t</code> for them, and be consistent (the current code uses both <code>int</code> and <code>long long</code>).</p>

<hr>

<pre><code>std::vector&lt;int&gt; readOrder(std::istringstream&amp; iss, int const amountOfObjects) 
{
    std::vector&lt;int&gt; v;
    v.reserve(amountOfObjects);
    int i = 1;
    while(!iss.eof() &amp;&amp; i &lt;= amountOfObjects)
    {
        int number;
        iss &gt;&gt; number;
        if (number - 1 &gt; amountOfObjects) throw std::logic_error("Too high index in order");
        v.push_back(number-1);
        i++;
    }
    if (v.size() != amountOfObjects) throw std::logic_error("Too few values in line");
    return v;
}
</code></pre>

<p>We should check that we read each number successfully by checking the stream state. (Again, we can abstract that into a separate function).</p>

<p>Presumably the indices must be <code>&gt;= 0</code> (as well as less than the object count), so we should check that if we aren't using an unsigned type.</p>

<p>Maybe something like:</p>

<pre><code>std::size_t readValue(std::istringstream&amp; iss)
{
    std::size_t value;
    iss &gt;&gt; value;

    if (!iss) // check if we failed to read the value
        throw std::runtime_error("Invalid input.");

    return value;
}

std::vector&lt;std::size_t&gt; readOrder(std::istringstream iss, std::size_t objectCount)
{
    std::vector&lt;std::size_t&gt; v;
    v.reserve(objectCount);

    for (auto i = std::size_t{0}; i != objectCount; ++i)
        v.push_back(readValue(iss, objectCount));

    std::string anything;
    iss &gt;&gt; anything;

    if (!anything.empty() || !iss.eof())
        throw std::runtime_error("Extra stuff at end of line.");

    OffsetAndCheckValues(v); // do the range checking and -1

    return v;
}
</code></pre>

<p>Doing the range checking and offsetting by 1 later (after reading all the values), makes the <code>readValue</code> function more reusable.</p>

<hr>

<p>In C++ it's usual to iterate using the pre-increment operator (<code>++i</code>), because it reflects the intent more accurately (we don't need a temporary unincremented variable).</p>

<p>It's also more common to use <code>!=</code> as the end condition, instead of <code>&lt;</code>, since this translates better to using iterators.</p>

<p>Make sure to use the appropriate type for iteration (e.g. <code>std::size_t</code> for iterating over vector indices).</p>

<pre><code>for (std::size_t i = 0; i != objects.count; ++i)
</code></pre>

<hr>

<p>It's good to use descriptive names, but some of them are a bit excessive. At some point the longer names just hinder readability.</p>

<pre><code>std::vector&lt;bool&gt; visited(objects.count);
...
    std::size_t cycleSize = 0;
    std::uint64_t cycleMin = MaxWeight;
    std::uint64_t cycleSum = 0;
</code></pre>

<hr>

<p>Prefer to <code>return</code> or <code>continue</code> early to avoid unnecessary indentation:</p>

<pre><code>    if (visited[i])
        continue;

    // no need to indent this code...
</code></pre>

<hr>

<p>Note that <code>numberOfElementsInCycle</code> (and others) aren't used if we have visited the vertex, so could be declared after this check.</p>
    </div>