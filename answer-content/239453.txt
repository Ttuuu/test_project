<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>In the sort() function its currently hardcoded to merge sort which I assume is not intentional. However, if you do allow the user to give an input you should do some error checking. You'll currently get unexpected behaviour if the user enters anything other than 1 or 2.</p></li>
<li><p>You should use std::swap rather than implementing your own swap function. Some types can make optimisations over what you've done.</p></li>
<li><p>From a design point of view I would argue that c++ is not an inherently object oriented language and that bubblesort and mergesort should be free functions taking a pair of iterators, to allow them to be more easily reused. You've pretty much done this for merge sort already, it uses none of the members of the Sorter class so could just be made a free function.</p></li>
<li><p>Your bubble sort implementation is inefficient. It should check if the vector is sorted after each pass, rather than doing the outer loops you could do <code>while(!isSorted(vector))</code> or similar.</p></li>
<li><p>Merge sort has a very big lambda in it for combine. From a readability  point of view I would pull that out into a separate function.</p></li>
<li><p>Both mergesort and bubblesort use indices with operator[] to get the elements from the vector. The preferred way to do this in c++ is using iterators, see <a href="https://stackoverflow.com/questions/131241/why-use-iterators-instead-of-array-indices">https://stackoverflow.com/questions/131241/why-use-iterators-instead-of-array-indices</a></p></li>
<li><p>In <code>count()</code> register is deprecated (and strictly is removed since c++17). You should probably avoid using it to improve compatibility.</p></li>
<li><p>I would need to think about it more, but I question if <code>while (*(array + i))</code> in count will always behave as expected. You assume that the array has an end sentinel value that will dereference to null. I don't that's guaranteed. As far as I know there is not an easy way to get the size from a c style array. The normal way to handle this is to require the user to pass in the size as well. </p></li>
<li><p><strong>Update</strong> on capacity(). Your use of capacity() in the merge sort is not correct. You should use size() instead. size() tells you the number of elements currently in the vector whereas capacity() tells you how many elements the vector reserved space for internally. i.e. if you insert more than this number of things into the vector it will internally reserve more space and do reallocate all the elements. It's important to note that the capacity can be greater than the number of elements in the vector. In your case it works ok as the constructor with a pair of iterators initialises the capacity equal to the size. However, I don't think this is guaranteed and is complier dependant. To see the difference try the following code:</p></li>
</ul>

<pre><code>    std::vector&lt;int&gt; v;
    std::cout &lt;&lt; 0 &lt;&lt; " " &lt;&lt; v.size() &lt;&lt; " " &lt;&lt; v.capacity() &lt;&lt;"\n";
    for( int i = 0; i &lt; 10; ++i)
    {
        v.push_back(i);
        std::cout &lt;&lt; i &lt;&lt; " " &lt;&lt; v.size() &lt;&lt; " " &lt;&lt; v.capacity() &lt;&lt;"\n";
    }

0 0 0
0 1 1
1 2 2
2 3 4
3 4 4
4 5 8
5 6 8
6 7 8
7 8 8
8 9 16
9 10 16
</code></pre>
    </div>