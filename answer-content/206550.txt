<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking good. The code is pretty readable on the first pass, names are clear, it appears well organized and is running well. I won't comment on the gameplay, but do have some feedback and ideas on the JS/coding:</p>

<h3>Scoping</h3>

<p>Be careful about scoping, making sure you use local variables when appropriate, and class properties when appropriate. Try to reduce your global variables. To make this work, pass in inputs, and return results a functional way as much as you can. For example, the <code>setup</code> function could accept a variable called <code>options</code>, which it uses to build all the elements. Right now it depends on a global variable. This function also calls <code>snake1.body.push</code>, when <code>snake1</code> is defined well below and must be "hoisted" to the outer scope. This makes it hard to follow on first reading. Maybe this whole function can be part of your snake class.</p>

<p>I see that this code also has complex scoping:</p>

<pre><code>const moveTimer = window.setTimeout(
    () =&gt; snake1.move.call(snake1),
    options.speed
  );
</code></pre>

<p>This code sits inside the <code>snake</code> class, of which <code>snake1</code> is an instance, so this is effectively "talking about itself in the third person"... I think <code>() =&gt; snake1.move.call(snake1)</code> is the same thing as <code>() =&gt; this.move.call(this)</code> which is the same thing as <code>() =&gt; this.move()</code>. Oh, you can also drop the unused variable <code>moveTimer</code>.</p>

<h3><code>checkBumpedHead</code>.</h3>

<p>I like that this functional, in the input =&gt; output sense. <code>const gameOver = this.checkBumpedHead()</code>. This is great-- calling a function, looking for the result and acting upon it. No side-effects or unneeded state. </p>

<p>But the body of the method is doing some strange things: <code>const gameOver = 0;</code> This defines a local variable, a constant, but this is not used. Instead, a property of this is used:
<code>
    this.gameOver = 1;
    ...<br>
    return this.gameOver;
</code>
This is pretty confusing because there are two variables with the same name but different scopes in the same place. I'd just use a <code>let gameOver</code> and return it at the end, removing the <code>this.</code> completely.</p>

<p>Digging into the logic, maybe <code>forEach</code> isn't the right iterator here. You are looping through all the body elements, but skipping the head one. Skipping is "filtering", and can be accomplished with:</p>

<pre><code>this.body.filter(body =&gt; body.className !== 'head')
</code></pre>

<p>Then, you're looking to see if the elements hit each other. This is looking for <em>some</em> items that match, therefore:</p>

<pre><code>.some(body =&gt; this.body[0].style.top == body.style.top  &amp;&amp;
      this.body[0].style.left == body.style.left)
</code></pre>

<p>After a bit, I realized that <code>this.body[0].style</code> actually means "head". I also see that <code>body</code> is used to both represent the all the elements of the body as well as individual elements. This is confusing to use the same name to mean two different things. Addressing both of those issues, </p>

<pre><code>checkBumpedHead() {
 const head = this.body[0].style
 return this.body
   .filter(el =&gt; el.className !== 'head')
   .some(el =&gt; head.top == el.style.top  &amp;&amp; head.left == el.style.left)
</code></pre>

<h3>Linter</h3>

<p>Lots of the unused variables and scoping problems will be picked up with a good IDE/Editor or ESLint. I highly recommend them.</p>
    </div>