<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, really great work!</p>

<p>The first thing that jumped out was how you start the game loop (printing the welcome message and calling menu() at the bottom.</p>

<p>I would use this handy little guy:</p>

<pre><code>if __name__ == "__main__":
   print('Welcome Message')
   menu()
</code></pre>

<p>This says: if my <code>__name__</code> is <code>"__main__"</code> (which is what happens when you say: <code>python wordgame.py</code> you will run the code in that block.</p>

<p>Next up is the use of <code>global</code>. Obviously, you want to be able to pass around some data while you play the game. This is a great job for an object or a dictionary.</p>

<p>To make this work nicely, add a parameter to the <code>menu</code> function (since this is for now your entry point) called <code>state</code>.</p>

<pre><code>def menu(state=dict()):
    # some code
    state['wordlist'] = wordlist
    # more code
    state['name'] = name
</code></pre>

<p>This will make testing (another noble pursuit) much easier because you can inject a state into your game and test things out without having to play through all the scenarios!</p>

<p>This is not a full solution to passing around a state dictionary, but maybe you'll want to do that in your new block defined above (maybe with some defaults).</p>

<p>Next up, a common python construct you will start seeing more and more as you spend time in the community is a context manager. Context Managers are a lot like functions, they take away some of the boilerplate code and let us get down to business.</p>

<pre><code>def delete():
    with shelve.open('wordlists.dat') as shelf:
        for key in shelf.keys():
            print(key)
        delete_key = input("Do you want to delete:")
        if delete_key == key in shelf.keys():
            del shelf[key]
            shelf.sync()
        else:
            print("Please type in the correct file")
            return delete()
    return menu()
</code></pre>

<p>What's the difference? Now every time we call the <code>delete</code> function, we open the file automatically and close it automatically after we break out of that block.</p>

<p>There are of course many more things that could be done but great work so far and please feel free to leave comments and so forth to keep the conversation going.</p>
    </div>