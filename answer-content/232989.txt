<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Reinderein's answer, there are still a lot of things that could be improved in your code.</p>

<h1>Hardcoded values</h1>

<p>You use hardcoded values, which make the code hard to use if you want to modify the inputs or the code itself. Consider the following line:</p>

<pre><code>new = Image.frombytes("RGB", (1920, 1080), data)# change value if not 1920 x 1080
</code></pre>

<p>Why not just use the <code>height</code> and <code>width</code> variables that are already defined?</p>

<h1>Data checks</h1>

<p>Your procedure requires that the 2 input images are the same size. It would be good practice to check if this is the case before trying to combine them, and raise a relevant exception if they are not.</p>

<h1>Encapsulation</h1>

<p>It makes sense to encapsulate the image combining procedure in a function: pass that function 2 images, output the combined image. That way, the code is much more reusable and easy to test.</p>

<p>Adding a <code>__main__</code> guard is a good idea for using the function.</p>

<h1>Single responsibility</h1>

<p>The image combining procedure should do just that. Your code also prints a bunch of stuff in the middle of doing that, and it really shouldn't.</p>

<h1>Style</h1>

<p>Your use of comments is inconsistent and all over the place. It makes the code hard to read.</p>

<h1>Performance</h1>

<p>There is a lot of room for improvements here, and the previous review barely tackles it. Using a single call to <code>struct.pack()</code> in the loop is probably better than 3, but the codes still takes minutes to run with 1920x1080 images. To be fair, I didn't have the patience to wait until it's done processing.</p>

<p>Given how slow the code is, I understand why you included <code>print</code> statements to your loop to monitor how far along the processing is, but consider this code:</p>

<pre><code>for y in range(1080):
    for x in range(1920):
        if ((y + x) % 2) == 0: 
            print("Even", y)
        else:
            print("Odd", y)
</code></pre>

<p>This alone takes minutes to run. Comparing to this:</p>

<pre><code>for y in range(1080):
    for x in range(1920):
        if ((y + x) % 2) == 0: 
            _ = "foo"
        else:
            _ = "bar"
</code></pre>

<p>This runs almost instantly. The lesson here is that <code>print</code> is slow, and should not be in an inner loop, even if you discard the single responsibility principle.</p>

<p>Another bottleneck is the following line in the inner loop:</p>

<pre><code>data += struct.pack("B", R) + struct.pack("B", G) + struct.pack("B",B)
</code></pre>

<p>This appends more data to the <code>data</code> variable each time the line is run, which is a bit over 2 million times for your sample images. This means reallocating memory to fit the progressively larger variable a LOT of times, which is a slow process.</p>

<p>I have no experience with <code>struct</code> binary data and don't know how to preallocate the memory to fit the final data. Luckily for me, PIL has a <code>Image.fromarray()</code> method which take NumPy arrays as an input, which are easy to work with. That way, you can pre-allocate the required memory with something like <code>data = np.zeros((height, width, 3), "uint8")</code>, and modify the values as needed without reallocating memory.</p>

<p>Using this method, the required time to combine two 1920x1080 px images drops to a couple of seconds.</p>

<h1>Putting it all together</h1>

<p>Here is an example of what the code could look like after applying all these recommendations:</p>

<pre><code>from PIL import Image
import numpy as np


def combine_images(image_1, image_2):
    """Combines two PIL images in a checkerboard pattern

    :param image_1: the first PIL image to combine
    :param image_2: the second PIL image to combine

    :return: A PIL Image"""

    image_1 = image_1.convert("RGB")
    image_2 = image_2.convert("RGB")

    if (image_1.size != image_2.size):
        raise ValueError("Images must be the same size")
    width, height = image_1.size

    data = np.zeros((height, width, 3), "uint8")
    for y in range(height): 
        for x in range(width):
            if ((y + x) % 2) == 0:
                data[y][x] = image_1.getpixel((x, y))
            else:
                data[y][x] = image_2.getpixel((x, y))
    return Image.fromarray(data)


if __name__ == "__main__":
    image_1 = Image.open(input("Path to image 1:\n"))
    image_2 = Image.open(input("Path to image 2:\n"))
    output = input("Path to output:\n")

    combine_images(image_1, image_2).save(output, "PNG")

    print("Done!")
</code></pre>
    </div>