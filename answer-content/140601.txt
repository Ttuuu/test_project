<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Handling arguments and errors</h2>

<p>In C, <code>args</code> is conventionally called <code>argv</code>.</p>

<p>Do not contaminate <code>stdout</code> with error messages, which should go to <code>stderr</code> instead.  One way to write error messages to <code>stderr</code> is using <code>fprintf(stderr, …)</code>.  However, a more idiomatic and informative way is using <code>perror()</code>.  For example, <code>perror(args[1])</code> might print an error message like <code>blah.txt: No such file or directory</code>.</p>

<p>An even friendlier solution is to interpret the spec in such a way that there aren't so many possible error conditions.  For example, if there are no files specified you could just read from <code>stdin</code>, and if there are multiple files specified you could process them all.</p>

<h2>Code structure</h2>

<p>I'm not a fan of the <code>while</code>–<code>for</code>–<code>if</code>–<code>for</code>–<code>if</code> nesting, especially since the body of <code>if (line[i] == ' ')</code> only runs once per line.  I think that the code would be tidier if you searched for the space delimiter using <code>strchr()</code>.  If you are on a system where <code>strsep()</code> is available (such as <a href="https://developer.apple.com/library/ios/documentation/System/Conceptual/ManPages_iPhoneOS/man3/strsep.3.html">BSD</a> or <a href="https://www.gnu.org/software/libc/manual/html_node/Finding-Tokens-in-a-String.html">GNU</a>), use that instead.  Otherwise, <a href="//stackoverflow.com/a/9021615/1157100"><code>strtok()</code>, <code>strtok_r()</code>, or <code>strtok_s()</code></a> could also work.</p>

<p>You don't need <code>printf("%s", …)</code> when <code>puts(…)</code> will do.</p>

<h2>Suggested solution</h2>

<pre><code>#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#define BUFFER_SIZE 42

int toggle_case(FILE *file) {
    char line[BUFFER_SIZE], *word, *mask;
    while (fgets(line, BUFFER_SIZE, file)) {
        if (!(mask = strchr(line, ' '))) {
            fprintf(stderr, "Invalid input: %s\n", line);
            return -1;
        }

        for (*mask++ = '\0', word = line; *word &amp;&amp; *mask; mask++, word++) {
            if (*mask == '1') {
                *word = toupper(*word);
            }
        }
        puts(line);
    }
    return 0;
}

int main(int argc, char *argv[]) {
    FILE *file = stdin;
    if (argc &lt;= 1) {
        toggle_case(stdin);
    } else for (int i = 1; i &lt; argc; i++) {
        if (NULL == (file = fopen(argv[i], "r"))) {
            perror(argv[i]);
            return EXIT_FAILURE;
        }
        int err = toggle_case(file);
        fclose(file);
        if (err) return EXIT_FAILURE;
    }
}
</code></pre>
    </div>