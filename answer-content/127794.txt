<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Don't pass C-style arrays in C++.  They will decay to pointers, which is probably not what you want.</p>

<p>Instead, replace them with a storage container, such as an <a href="http://en.cppreference.com/w/cpp/container/vector" rel="nofollow"><code>std::vector</code></a>:</p>

<pre><code>std::vector&lt;int&gt; pg(20);
</code></pre>

<p></p>

<pre><code>// pass by const reference
// r doesn't get modified in the function
int max(std::vector&lt;int&gt; const&amp; r, int n)
</code></pre>

<p>This will also help your code look more C++-like, which is something that is still quite needed here.</p></li>
<li><p>This is quite hard to read:</p>

<blockquote>
<pre><code>int pg[20],tmr[20],i,j,n,pf=0,rs[20],m,avail=0;
</code></pre>
</blockquote>

<p>You can eliminate <code>i</code> and <code>j</code> by initializing them in the <code>for</code> loops.  Since you're still doing this outside of the loops, you really need to transition away from older C programming practices such as these.</p>

<p>You should also strongly consider declaring or initializing the variables as close their first usages as possible.  This will especially make it easier to keep track of variables in the event that any are no longer used and should then be removed.</p></li>
<li><p>You may need to make this more modular so that <code>main()</code> can have much less work to do.  It should mostly gather input from the user, call the necessary functions, then display the final results returned by those functions.</p>

<p>It may also help with simplifying all those conditionals, which do look quite unattractive.  With all of that, along with the poor naming, I have no idea what that aspect of the code is supposed to do.</p></li>
</ul>
    </div>