<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not an answer but an elaboration on <a href="https://codereview.stackexchange.com/a/200211">@Mathias Ettinger's answer</a>.  </p>

<p>Being new to Pandas, I didn't understand what all is going on in his code. So I dove in, and in the process drew up the text below. I'm posting it here for the sake of completeness and reference. Hopefully it helps others too. </p>

<p>As is often the case, the best way is to try to understand is from the bottom upwards (instead of top-down).  </p>

<pre><code>def populate_url_params(df):  
    df['URL parameters'] = df.apply(build_url_params, axis=1)  
</code></pre>

<p><code>df['URL parameters']</code> has data type <code>&lt;class 'pandas.core.series.Series'&gt;</code> allright. But <code>build_url_params</code> takes a parameter <code>series</code>. So what are series and how does apply work? First, apply. The <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html" rel="nofollow noreferrer">official <code>apply</code> doc</a> reads  </p>

<blockquote>
  <p>Apply a function along an axis of the DataFrame.<br>
  Objects passed to the function are Series objects whose index is [in this case] the DataFrame’s columns (axis=1).  </p>
</blockquote>

<p>Where "Series objects whose index is the DataFrame’s columns", in Excel speak would mean (if axis=1!) 'a row of cells with their column name'.  </p>

<p>What confused me was the <a href="https://stackoverflow.com/a/26240208/1016065">this explanation</a> of Series where it says</p>

<blockquote>
  <p>the Series is the datastructure for a single column of a DataFrame.  </p>
</blockquote>

<p>We're dealing with a <em>row</em> (not a column) of named cells. I think of my dataframe here as a bunch of rows with column names. IMHO a better definition is from <a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html" rel="nofollow noreferrer">Pandas intro to Data Structures</a>  </p>

<blockquote>
  <p>Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). The axis labels are collectively referred to as the index.  </p>
</blockquote>

<p>It all became much clearer when I put in a bunch of <code>print</code> statements in  </p>

<pre><code>def build_url_params(serie):  
    parameters = serie[~pd.isnull(serie)].to_dict()  
    return urlencode(parameters)  
</code></pre>

<p><code>serie</code>:  </p>

<pre><code>one        NaN  
two        foo  
three    bacon  
Name: 0, dtype: object  
</code></pre>

<p><code>~pd.isnull(serie)</code>:  </p>

<pre><code>one      False  
two       True  
three     True  
Name: 0, dtype: bool  
</code></pre>

<p><code>serie[~pd.isnull(serie)]</code>  </p>

<pre><code>two      foo  
three    bacon  
Name: 0, dtype: object  
</code></pre>

<p><code>parameters</code>:  </p>

<pre><code>{'two': 'foo', 'three': 'bacon'}  
</code></pre>

<p>And so on for each line in the csv. Then the final <code>print(df)</code>:  </p>

<pre><code>    one  two  three       URL parameters  
0   NaN  foo  bacon  two=foo&amp;three=bacon  
1  spam  bar    NaN     one=spam&amp;two=bar  
</code></pre>

<p>So yes, you can think of a Series as a single column of mixed data with name labels. In this particular case, you could think of it as a row of named cells turned 90 degrees counterclockwise. </p>

<p>Also, <code>serie[~pd.isnull(serie)]</code> I find really nifty. Note the <a href="https://stackoverflow.com/questions/8305199/the-tilde-operator-in-python">tilde <code>~</code> operator</a>. Demo above. </p>
    </div>