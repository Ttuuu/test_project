<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>MovieSearchComponent</h1>
<ul>
<li>With the <code>useState</code> the common pattern is to name the state update function matching with the state value, i.e. <code>movieList</code> and <code>setMovieList</code>. This makes it clear what state the function will update.</li>
<li>I had to read and reread your description of <code>addMovie</code> and compare it against the <em>actual</em> implementation. It isn't clear if the function is to add <em>a</em> movie, add an array of movies, or, based on the implementation, replace existing movie array list. The name of the function and the result of the function executing should match. In your description you say <code>addMovie</code> updates the <code>movielist</code> array, so for the sake of code review I'll assume that to mean the third option with state <em>replacement</em>. In this case the callback function can simply be <code>setMovieList</code>. Update the prop name as well.</li>
</ul>
<p>Code suggestions</p>
<pre><code>import React, { Fragment } from 'react';

...

const MovieSearchComponent = () =&gt; {
  const [movieList, setMovieList] = useState&lt;Movie[]&gt;([]);

  return (
    &lt;Fragment&gt;
      &lt;MovieSearch setMovieList={setMovieList} /&gt;
      &lt;MovieResultList movieList={movieList}/&gt;      
    &lt;/Fragment&gt;
  )
};
</code></pre>
<h1>MovieSearch</h1>
<ul>
<li>Update prop <code>addMovie</code> to <code>setMovieList</code>.</li>
<li>Values like <code>apiKey</code> and <code>baseurl</code> that <em>never</em> change don't need to be in the functional component body and continually redefined. Declare them externally in the file.</li>
<li>It may be better to extract the synthetic event data and allow the event object to be returned to the event pool as quickly as possible. Extract and pass the event's target's value to <code>setMovieSearchResults</code>.</li>
<li>Handle the <code>fetch</code> request's unhappy paths, i.e. a not-successful responses or errors handling successful responses. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful" rel="nofollow noreferrer">Checking that the fetch was successful</a>.</li>
<li>You should always standardize and sanitize user input.</li>
</ul>
<p>Code suggestions</p>
<pre><code>const apikey = 'api_key=***************dad4';
const baseurl = 'https://api.themoviedb.org/3/search/movie?'

const Search = styled.input`
  color: green;
`;

const MovieSearch = ({ setMovieList }) =&gt; { 
    const searchTMDBapi = e =&gt; {
        const { value } = e.target;

        // Simple example: URI encode and lowercase
        // ... there's more you could do
        const query = encodeURI(value.toLowerCase());

        setMovieSearchResults(query);
    }

    const setMovieSearchResults = debounce(query =&gt; {
        fetch(baseurl + apikey + '&amp;language=en-US&amp;query=' + query + '&amp;page=1&amp;include_adult=false')
          .then(response =&gt; {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data =&gt; setMovieList(data.results))
          .catch(console.error);
  }, 500);

  return &lt;Search placeholder="Search" onChange={searchTMDBapi}/&gt;
}
</code></pre>
<h1>MovieResultList</h1>
<ul>
<li>Pretty simple &amp; clean component. Only suggestion here might be to tighten up variables by using object destructuring.</li>
</ul>
<p>Code suggestions</p>
<pre><code>const MovieResultList = ({ movieList }) =&gt; (
  &lt;div&gt;
    &lt;ul&gt;
      {movieList.map(({ id, original_title }) =&gt; &lt;li key={id}&gt;{original_title}&lt;/li&gt;)}
    &lt;/ul&gt;
  &lt;/div&gt;
);
</code></pre>
    </div>