<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well done. This is not a complete review, but instead a (short) list of possible improvements I found when I skimmed your code.</p>

<h1>Documentation</h1>

<p>First of all: <strong><em>thank you!</em></strong> It's great to have documentation. </p>

<p>Note that there is some debate whether to put the documentation into the header or the source. I'd like to remark that I would put only a <code>@brief</code> description in the header and a complete documentation into the source. That way, one can get a quick overview of all functions and look into the details if they found the correct one. However, that's <strong>personal preference</strong>, and in a team project you would stick to whatever guideline is already present. The generated documentation by doxygen will stay the same, either way.</p>

<h1>Matrices and <code>arr[][SIZE]</code></h1>

<p>While it's possible to model a matrix this way, it's inflexible. The game is now stuck at a size that was chosen when it was compiled. If you want to enable other board sizes, you have to add some logic to keep the board in the matrix anyway, so a variable <code>SIZE</code> will be necessary. Also, interesting boards like 4x6 are downright impossible at the moment.</p>

<p>Furthermore, there is a lot of duplication, as <code>unsigned char matrix[][SIZE]</code> is everywhere in the code. If you <em>really</em> want to follow the approach, use a type alias:</p>

<pre><code>typedef unsigned char board_type[][SIZE];
</code></pre>

<p>However, with arbitrary board sizes in mind, you probably want to introduce a proper matrix type at some point:</p>

<pre><code>struct board_type {
    unsigned width;
    unsigned height;
    unsigned char * actual_board;
};
</code></pre>

<p>Whether you use a single allocated <code>malloc(sizeof(*actual_board)*SIZE*SIZE)</code> or <code>SIZE</code> times <code>malloc(sizeof(*actual_board)*SIZE)</code> is, at least for small sizes, not important. The former is easier to handle in terms of memory, the latter is easier in terms of access.</p>

<p>In case you ever want to swap between those, a set of small <code>inline</code> function can come in handy:</p>

<pre><code>unsigned char board_get(struct board_type *board, unsigned row, unsigned col) {
    assert(row &lt; board-&gt;height);
    assert(col &lt; board-&gt;width);
    return board-&gt;actual_board[row * board-&gt;width + col];
    // or, if actual_board is a `unsigned char**`
    return board-&gt;actual_board[row][col];
}

void board_set(struct board_type *board, unsigned row, unsigned col, unsigned char value) {
    assert(row &lt; board-&gt;height);
    assert(col &lt; board-&gt;width);
    board-&gt;actual_board[row * board-&gt;width + col] = value;
    // or, if actual_board is a `unsigned char**`
    board-&gt;actual_board[row][col] = value;
}
</code></pre>

<h1><code>pow</code> is not for integers</h1>

<p>The <code>pow</code> function takes a <code>double</code> for both arguments, and that's fine. However, it's a complete overkill for simple integers. <a href="https://codereview.stackexchange.com/questions/145221/disproving-euler-proposition-by-brute-force-in-c/145228#145228">In a past review, I share some more details,</a> but for your game a simple bitshift is enough:</p>

<pre><code>unsigned long pow_integral(unsigned char base, unsigned char exponent) {
    if(base == 2) {
        return (1lu &lt;&lt; exponent);
    } else {
        // exercise; use "double-and-add" method for logarithmic speed
    }
}
</code></pre>

<h1>No magic numbers</h1>

<p>Just like documentation, this is a great feature of your code. There are no magic numbers in the code, every number is properly <code>define</code>d to provide some self-documentation. However, some comments on <code>#define</code>s are usually expected, and Doxygen <em>should</em> give out some warnings.</p>

<p>There is a single magic number, though, in <code>main</code>. See "blindness" below.</p>

<h1>C99 has <code>bool</code></h1>

<p>That being said, occasionally there is <code>bool success = 1</code> or <code>0</code>. Due to <code>bool</code>, it's clear that they mean <code>true</code> and <code>false</code>. You could, however, just <code>#include &lt;stdbool.h&gt;</code> and instead use the language defined boolean.</p>

<h1>Tabs and spaces</h1>

<p>There are tabs and spaces mixed in the code. It's not evident in the code here on StackExchange, but on GitHub. You probably want to fix this, as several editors use 8 spaces for tabs, not 4.</p>

<h1><code>perror</code> is not for general errors</h1>

<p><a href="https://en.cppreference.com/w/c/io/perror" rel="nofollow noreferrer"><code>perror</code></a> will show the user supplied string, as well as a textual description of the error code stored on <strong><em><code>errno</code></em></strong>. None of the SDL functions set <code>errno</code> as far as I know, so <code>perror</code> won't report the correct errors.</p>

<p>Instead, use <code>printf</code> or <code>fprintf</code> and <a href="https://wiki.libsdl.org/SDL_GetError" rel="nofollow noreferrer"><code>SDL_GetError</code></a>.</p>

<h1>Early returns</h1>

<p>Some of your functions have a return code ready, for example <code>initSDL</code>:</p>

<pre><code>bool initSDL(SDL_Window **gWindow,SDL_Renderer** gRenderer)
{
    bool success = 1;
    TTF_Init();
    if( SDL_Init( SDL_INIT_VIDEO ) &lt; 0 )
    {
        perror( "SDL could not initialize!" );
        success = 0;
    }
    else
    {
        *gWindow = SDL_CreateWindow( "2048", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );
        if( gWindow == NULL )
        {
            perror( "Window could not be created!" );
            success = 0;
        }
        else
        {
            *gRenderer = SDL_CreateRenderer( *gWindow, -1, SDL_RENDERER_ACCELERATED );
            if( gRenderer == NULL )
            {
                perror( "Renderer could not be created!" );
                success = 0;
            }
            else
            {
                SDL_SetRenderDrawColor( *gRenderer, g_bg.r,g_bg.g,g_bg.b,g_bg.a );

            }
        }
    }

    return success;
}
</code></pre>

<p>This code suffers a little bit from the <a href="https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)" rel="nofollow noreferrer">pyramid of doom</a>. However, in none of the <code>if</code>s do we actually clean up resources, so we can instead write the following:</p>

<pre><code>bool initSDL(SDL_Window **gWindow,SDL_Renderer** gRenderer)
{
    TTF_Init();
    if( SDL_Init( SDL_INIT_VIDEO ) &lt; 0 )
    {
        fprintf(stderr, "SDL could not initialize: %s\n", SDL_GetError());
        return false;
    }
    *gWindow = SDL_CreateWindow( "2048", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );
    if( gWindow == NULL )
    {
        fprintf(stderr, "Window could not be created: %s\n", SDL_GetError());
        return false;
    }
    *gRenderer = SDL_CreateRenderer( *gWindow, -1, SDL_RENDERER_ACCELERATED );
    if( gRenderer == NULL )
    {
        fprintf(stderr, "Renderer could not be created: %s\n", SDL_GetError());
        // What about gWindow?
        // We should probably do something about it
        return false;
    }
    SDL_SetRenderDrawColor( *gRenderer, g_bg.r,g_bg.g,g_bg.b,g_bg.a );
}
</code></pre>

<h1>Resource management and boolean blindness</h1>

<p>As hinted in the code above, when <code>CreateWindow</code> succeeds but <code>CreateRenderer</code> fails, the <code>gWindow</code> isn't properly destroyed. Furthermore, <code>initSDL</code>'s caller cannot find out <em>why</em> the initialization failed. Enums are usually the solution in that circumstance, at least as long as we don't clean up.</p>

<p>That being said, <code>exit(0)</code> in <code>main</code> is off. A zero exit value indicates that the game was able to run and exit. However, if <code>initSDL</code> fails, then the game cannot run, and we should probably report that to the operating system:</p>

<pre><code>if(!initSDL(&amp;gWindow,&amp;gRenderer)){exit(EXIT_FAILURE);};
</code></pre>

<h1>Always use (proper) blocks for <code>if</code>s</h1>

<p>However, the line is strange for another reason: it doesn't follow your usual indentation. Let's fix that:</p>

<pre><code>if(!initSDL(&amp;gWindow,&amp;gRenderer)){
    exit(EXIT_FAILURE);
}; // &lt;&lt;--- ?
</code></pre>

<p>There was a stray semicolon. While it's not an error, it indicates that the code was previously <code>if(!initSDL(&amp;gWindow,&amp;gRenderer))exit(0);</code>, then some things got changed, and changed back.</p>

<p>If you use braces all the time (with proper indentation), it's easier to see conditionals, so make sure to make the code as clean as possible.</p>

<h1>Readability</h1>

<p>The compiler doesn't care whether you write</p>

<pre><code>a=foo(), b=too(), c=quux()+a*b; if(a&lt;b)c-=t;
</code></pre>

<p>but a human will have a hard time. Make your code easy for humans too:</p>

<pre><code>a = foo();
b = too();
c = quux() + a * b;

if ( a &lt; b ) {
    c -= t;
}
</code></pre>

<p>At least <code>move_x</code> and <code>move_y</code> can be improved that way.</p>

<h1>Naming</h1>

<p>In computer sciences, there are two hard problems: naming, caches and off-by one errors. Here we focus on the first one.</p>

<h2>Use prefixes only if they have a meaning</h2>

<p>The <code>gRenderer</code> and <code>gWindow</code> have a <code>g</code> prefix that's not explained. None of the other variables have a prefix.</p>

<p>If <code>g</code> is a common prefix for SDL objects, then it's fine, however, I <em>guess</em> it's for <code>g</code>ame. However, it's strange that the board itself then is prefix-free.</p>

<p>That being said...</p>

<h2>Name by function, not by form</h2>

<p>The board is called <code>matrix</code> throughout the whole game. However, <code>matrix</code> is a term from Mathematics or a film title, but doesn't quite fit the "board" function. <code>board</code> on the other hand would be a perfect name. Also, the plural is a lot easier, in case you ever want to implement a variant where the player plays on two boards at the same time.</p>

<h2>Don't surprise the others</h2>

<p>The <code>SDLclose</code> and <code>SDLclear</code> took me by surprise. Both functions don't follow the usual <code>SDL_&lt;name&gt;</code> approach, because both aren't from <code>SDL</code>.</p>

<p>In C++, you would put those functions into your own namespace, but in C, use a prefix that you defined. Alternatively, follow the <code>initSDL</code> approach and call the functions <code>clearSDL</code> and <code>closeSDL</code>. Those names are completely unambiguous.</p>

<h1>Symmetry between creation and destruction</h1>

<p>There is something amiss in <code>SDLclose</code>:</p>

<pre><code>void SDLclose(SDL_Window* gWindow)
{
    SDL_DestroyWindow( gWindow );
    gWindow = NULL;
    TTF_Quit();
    SDL_Quit();
}
</code></pre>

<p>Given that we act on a local pointer, <code>gWindow = NULL</code> isn't visible from the outside. This is probably just a small mistake. However, if <code>SDLclos</code> and <code>initSDL</code> were to be used in a symmetric way, we'd end up with</p>

<pre><code>void SDLclose(SDL_Window** gWindow)
{
    SDL_DestroyWindow( *gWindow );
    *gWindow = NULL;
    TTF_Quit();
    SDL_Quit();
}
</code></pre>

<p>Here, <code>*gWindow = NULL</code> makes sense. However, as <code>SDLclose</code> is one of the few functions that don't have accommodating documentation, it's not clear what the intended behaviour is, so I'd stick to the former, e.g. </p>

<pre><code>/**
 * @brief Destroy the @a gWindow and quit SDL.
 *
 * @param gWindow is the window that will be destroyed.
*/
void SDLclose(SDL_Window* gWindow)
{
    //! @warning `gWindow` **must not** be used afterwards.
    SDL_DestroyWindow( gWindow );
    TTF_Quit();
    SDL_Quit();
}
</code></pre>
    </div>