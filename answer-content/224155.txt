<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Verification Method</h3>

<p>I'm counting 14 branches in your code. And still others have found edge cases that you don't cover. In order to find a good solution; one that covers all cases, we need a <strong>verification method</strong>. I believe Pieter's algorithm is very smart. But as with any solution, we need to be able to verify the results.</p>

<p>What better way than to brute-force all possible permutations and find the one that matches the specified pattern with the most number of insertions ..</p>

<hr>

<p>I present a brute-force for the sole purpose of verifying any candidate solution to this problem. It is not optimized for performance, and it shouldn't be.</p>

<p>Tests</p>

<pre><code>[TestMethod]
public void Verification()
{
    // verify all possible permutations while debugging ..
    var p1 = Helper.Permutate(null).OrderBy(x =&gt; x).ToArray();
    var p2 = Helper.Permutate("").OrderBy(x =&gt; x).ToArray();
    var p3 = Helper.Permutate(" ").OrderBy(x =&gt; x).ToArray();
    var p4 = Helper.Permutate("dog").OrderBy(x =&gt; x).ToArray();
    var p5 = Helper.Permutate("aabab").OrderBy(x =&gt; x).ToArray();
    var p6 = Helper.Permutate("aa").ToArray();
    var p7 = Helper.Permutate("baaaa").OrderBy(x =&gt; x).ToArray();

    // verify the results
    var max1 = Helper.GetMaxPossibleInsertions(null);      // -1
    var max2 = Helper.GetMaxPossibleInsertions("");        //  2
    var max3 = Helper.GetMaxPossibleInsertions(" ");       //  4
    var max4 = Helper.GetMaxPossibleInsertions("dog");     //  8
    var max5 = Helper.GetMaxPossibleInsertions("aabab");   //  3
    var max6 = Helper.GetMaxPossibleInsertions("aa");      //  0
    var max7 = Helper.GetMaxPossibleInsertions("baaaa");   // -1
}
</code></pre>

<p>Code</p>

<pre><code>static class Helper        
{
    public static int GetMaxPossibleInsertions(string s = "", char c = 'a', int n = 3)
    {
        var max = -1;
        var k = n - 1;
        var pattern = new Regex($@"[{c}]{{{n}}}", RegexOptions.Compiled);
        var permutations = Permutate(s, c, k).Where(p =&gt; !pattern.IsMatch(p)).ToArray();

        max = permutations
            .Select(p =&gt; p.Count(x =&gt; x == c) - s.Count(x =&gt; x == c))
            .DefaultIfEmpty(max)
            .Max();

        return max;
    }

    public static IEnumerable&lt;string&gt; Permutate(string s = "", char c = 'a', int k = 2)
    {
        if (s == null)
            yield break;
        if (k &lt; 1) k = 1;
        var buffer = new StringBuilder(s);
        foreach (var p in Permutate(buffer, c, k, 0, s.Length).Distinct()/*.OrderBy(x =&gt; x)*/)
        {
            yield return p;
        }
    }

    static IEnumerable&lt;string&gt; Permutate(StringBuilder buffer, char c, int k, int m, int i)
    { 
        // any intermediate result is a permutation
        yield return buffer.ToString();
        if (m &lt; k)
        {
            // recursively find permutations with an inserted character
            buffer.Insert(i, c);
            foreach (var p in Permutate(buffer, c, k, m + 1, i))
            {
                yield return p;
            }
            buffer.Remove(i, 1);
        }
        if (i &gt; 0)
        {
            // recursively find permutations with the insertion index moved back
            foreach (var p in Permutate(buffer, c, k, 0, i - 1))
            {
                yield return p;
            }
        }
    }
}
</code></pre>
    </div>