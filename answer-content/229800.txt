<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Parameter Passage to Functions</strong><br>
The code isn't exactly working as expected, the variables <code>forward_count</code> and <code>backward_count</code> that are passed from <code>main()</code> into <code>please_conform()</code> are being passed by <code>value</code> rather than by <code>reference</code> so they are still zero when the function <code>please_conform()</code> returns. The vector <code>caps</code> is being passed by <code>reference</code> when it should be passed by <code>value</code> because the vector is not being changed in <code>please_conform()</code>. It might be better if the variables <code>forward_count</code> and <code>backward_count</code> were local to <code>please_conform</code> and a single variable possible of type char was returned that indicated the direction.</p>

<p><strong>Duplication of Code</strong><br>
This code repeats several times in the function <code>please_conform()</code>:</p>

<pre><code>            positions.push_back(std::make_tuple(start, end, caps[end]));
            if (caps[end] == 'F')
            {
                forward_count++;
            }
            else
            {
                backward_count++;
            }
</code></pre>

<p>There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code multiple times it is better to encapsulate it in a function. If it is possible to loop through the code that can reduce repetition as well.</p>

<p><strong>Complexity</strong><br>
The functions <code>please_conform()</code> and <code>speak_commands()</code> are both too complex and should be broken into smaller functions. Both functions violate the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> that states</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>One of the functions that should be added for <code>please_conform()</code>  is described in <em>Duplication if Code</em> above. It is important to note that if the tuple contained one more field which was the character indicating the director there would be less duplication of code and the variables <code>forward_count</code> and <code>backward_count</code> would not be need in <code>please_conform()</code>.</p>

<p>The comparison of <code>forward_count</code> and <code>backward_count</code> in the begining of the function <code>speak_commands()</code> would probably be better as it's own function. This function could iterate through the tuples incrementing <code>forward_count</code> and <code>backward_count</code> and then return the direction that wins the comparison.  This function could be called either by <code>main()</code> or by <code>speak_commands()</code></p>

<p>The idea behind this is to keep breaking actions up into smaller and smaller functions until each function does only one thing.</p>

<p>Here is one possible re-write of the <code>speak_command()</code> function.</p>

<pre><code>char which_cap_to_flip(std::vector&lt; std::tuple&lt;std::size_t, std::size_t, char&gt; &gt;&amp; positions)
{
    unsigned forward_count = 0;
    unsigned backward_count = 0;

    for (auto cap: positions)
    {
        if (std::get&lt;2&gt;(cap) == 'F')
        {
            forward_count++;
        }
        else
        {
            backward_count++;
        }
    }

    return  (forward_count &lt; backward_count) ? 'F' : 'B';
}

void speak_commands(std::vector&lt; std::tuple&lt;std::size_t, std::size_t, char&gt; &gt;&amp; positions)
{
    char cap_to_flip = which_cap_to_flip(positions);

    for (std::size_t i = 0; i &lt; positions.size(); ++i)
    {
        if (std::get&lt;2&gt;(positions[i]) == cap_to_flip &amp;&amp;
            std::get&lt;0&gt;(positions[i]) == std::get&lt;1&gt;(positions[i]))
        {
            std::cout &lt;&lt; "People in position " &lt;&lt; std::get&lt;0&gt;(positions[i]) &lt;&lt; " flip your cap!\n";
        }
        else if (std::get&lt;2&gt;(positions[i]) == cap_to_flip &amp;&amp;
                 std::get&lt;0&gt;(positions[i]) != std::get&lt;1&gt;(positions[i]))
        {
            std::cout &lt;&lt; "People in positions " &lt;&lt; std::get&lt;0&gt;(positions[i]) &lt;&lt; " through " &lt;&lt; std::get&lt;1&gt;(positions[i]) &lt;&lt; " flip your caps!\n";
        }
    }
}
</code></pre>
    </div>