<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is some refactoring that could be made.</p>

<h2>Naming</h2>

<p><code>EvenThread</code> and <code>OddThread</code> aren't really threads since they don't implement the <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html" rel="nofollow noreferrer"><code>Thread</code></a> class. There are two options:</p>

<ol>
<li>Rename the two classes to something more appropriate/fitting with its purpose

<ul>
<li>e.g., <code>EvenRunner</code>/<code>OddRunner</code></li>
</ul></li>
<li>Move the thread management to the <code>InterThreadCommunicationEvenOddExample.main</code> method. This is more standard.</li>
</ol>

<h2>Redundancy</h2>

<ul>
<li><code>OddThread</code> and <code>EvenThread</code> have almost the same functionality; a <code>NumberThread</code> could be created that paramaterizes the parity (e.g., a <code>Parity</code> enum parameter). This would be ideal since the logic in <code>run()</code> would only need to be changed <strong>once</strong> if needed.</li>
<li>The above point could be applied to <code>getNextOdd</code> and <code>getNextEven</code> in a similar manner.</li>
</ul>

<h2>Modifiers</h2>

<p>Some variables could use tighter modifiers to better convey their purpose.</p>

<ul>
<li><code>NumberResource numberResource</code> could be <code>final</code> in all of its occurrences.</li>
<li><code>private boolean isEven(int number)</code> could be made <code>static</code> since it is constant with respect to each <code>NumberResource</code> instance; furthermore, a semantic argument <em>could</em> be made that <code>isEven(number)</code> is not asking whether the <code>NumberResource</code> instance is even but rather asking if the provided <code>number</code> is even.</li>
</ul>

<h2>Threads</h2>

<ul>
<li>There is no need to call <code>Thread.sleep()</code> inside <code>EvenThread.run()</code> or <code>OddThread.run()</code>, since there is a <code>wait()</code> and <code>notify()</code> statement in the <code>NumberResource</code>'s block. A single thread at a time will "wake up" from the <code>wait()</code> call after <code>notify()</code> is called in another thread, so removing the <code>Thread.sleep()</code> calls won't burn CPU cycles.</li>
<li>If the <code>Thread.sleep()</code> call is there for the sole purpose of text not flashing quickly onto the screen, then that is fine. Though moving the <code>Thread.sleep()</code> into the <code>NumberResource</code> method(s), before the <code>notify()</code> call, would cause text to be printed more evenly.</li>
</ul>

<h2>Empty <code>catch</code> statements</h2>

<ul>
<li>Either log something here or write a comment explaining why no action is taken here.</li>
<li>Allowing <code>getNextOdd</code>/<code>getNextEven</code> to throw an <code>InterruptedException</code> exception might even be cleaner.</li>
<li>A javadoc string for each method/class could clarify this as well.</li>
</ul>

<h2>Spacing</h2>

<p>Overall, the spacing is fine and consistent, but <code>3</code> empty lines between each class method seems like too much, but this is subjective.</p>

<hr>

<p>It is interesting to note that the overall output order of the messages is <strong>not</strong> guaranteed since <code>notify()</code> is called inside of <code>getNextOdd</code>/<code>getNextEven</code>; however, it is guaranteed that each <code>Even Thread::{num}</code> message will be strictly increasing (by <code>2</code>). The same goes for each <code>Odd Thread::{num}</code> message.
Below is an example of some of the refactoring comments made above (except adding <code>Javadocs</code>).</p>

<pre><code>public class InterThreadCommunicationEvenOddExample {
    public static void main(String[] args) throws InterruptedException {
        final NumberResource numberResource = new NumberResource();
        final Thread[] numberThreads = new Thread[] {
            new Thread(new NumberRunner(numberResource, Parity.EVEN)),
            new Thread(new NumberRunner(numberResource, Parity.ODD)),
        };

        for (Thread numberThread : numberThreads) {
            numberThread.start();
        }

        for (Thread numberThread : numberThreads) {
            numberThread.join();
        }
    }
}

class NumberResource {
    private int number = 0;

    public synchronized int getNextNumber(Parity parity) throws InterruptedException {
        while (getParity(number) != parity) {
            wait();
        }
        final int nextNumber = number++;
        notify();
        return nextNumber;
    }

    private static Parity getParity(final int number) {
        return number % 2 == 0 ? Parity.EVEN : Parity.ODD;
    }
}

class NumberRunner implements Runnable {
    private final NumberResource numberResource;
    private final Parity parity;

    NumberRunner(final NumberResource numberResource, final Parity parity) {
        this.numberResource = numberResource;
        this.parity = parity;
    }

    @Override
    public void run() {
        while (true) {
            try {
                System.out.printf("%s Thread::%d\n", parity.name(), numberResource.getNextNumber(parity));
            } catch (InterruptedException e) {
                System.out.println("Interrupted while trying to retrieve next number.");
                return;
            }
        }
    }
}

enum Parity {
    EVEN,
    ODD,
}
</code></pre>
    </div>