<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Appart from the optimization provided by <a href="https://codereview.stackexchange.com/a/216642/84718">@CiaPan</a>, you could try using an inner function to reduce the need for attributes lookups and accelerate symbols resolution speed:</p>

<pre><code>class Solution(object):
    def isSymmetric(self, root):
        if root is None:
            return True

        def isMirror(left, right):
            if left is None and right is None:
                return True
            elif left is None or right is None:
                return False
            elif left.val != right.val:
                return False
            else:
                return isMirror(left.left, right.right) and isMirror(left.right, right.left)

        return isMirror(root.left, root.right)
</code></pre>

<p>Alternatively, you could try the iterative approach which is usually implemented using a <code>deque</code> to perform a breadth first search:</p>

<pre><code>from collections import deque


class Solution(object):
    def isSymmetric(self, root):
        if root is None:
            return True

        rights = deque([root.right])
        lefts = deque([root.left])
        while lefts:
            left = lefts.popleft()
            right = right.popleft()
            if left is None and right is None:
                pass
            elif left is None or right is None:
                return False
            elif left.val != right.val:
                return False
            else:
                lefts.append(left.left)
                lefts.append(left.right)
                rights.append(right.right)
                rights.append(right.left)

        return True
</code></pre>
    </div>