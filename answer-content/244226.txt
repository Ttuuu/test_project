<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>G. Sliepen wrote a rather comprehensive review, I'm going to expand on one point in their review, and add 2 others.</p>
<blockquote>
<p><strong>Avoid using namespace std and/or #include &lt;bits/stdc++.h&gt;</strong></p>
</blockquote>
<blockquote>
<p>I see you forgot to add std:: to some standard library types, implying that you have using namespace std somewhere or are using the non-standard #include &lt;bits/stdc++.h&gt;.</p>
</blockquote>
<p>The LeetCode is doing this for you and it is promoting bad habits that you need to unlearn. The proper includes for this code are</p>
<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;
</code></pre>
<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<p><strong>More on Private, Protected and Public</strong><br>
I see that you do learn from your <a href="https://codereview.stackexchange.com/questions/244186/leetcode-1146-snapshot-array">previous reviews</a> and that is a good thing. In the following code the keyword <code>private:</code> is not necessary, when you first open a class declaration and variables, methods and functions are private by default.</p>
<pre><code>class Solution {
private:
    const int prime = 19260817;
    const int a_decimal = 65;
    const int char_size = 26;
    std::string res = "";
    std::vector&lt;int&gt; exponent;
</code></pre>
<p>You will find that a lot of C++ programmers are no long using the first section of a class declaration because it is better to put the public interfaces at the beginning of a class so that users of that class can find the public interfaces easily. This actually applies to most object oriented programming languages. The general hierarchy is public first, then protected and then private.</p>
<p><strong>Class File Structure</strong><br>
My concern here is that you're only learning C++ through <code>LeetCode</code> that you are learning some bad habits that will need to be replaced at some point. C++ is generally broken up into header files and source files. You are fairly familiar with the header file grammar but you are not familiar with the source file grammar.</p>
<p>Historically the C++ programming language grew out of the C programming language which already had separate header files and source files. Unlike Java and C# most of the member functions and methods have function prototypes in the class declaration and the actual functions are defined in a <code>.cpp</code> file. There are a couple of reasons for this, the first is that it allows bugs to be fixed in the code while not affecting the public interfaces. This means that patches or updated dynamically linked libraries can be developed and shipped to fix bugs without redoing the entire application. The other reason is that compile / build times are improved by reducing the contents of the header files.</p>
<p>There are 2 exceptions to this,</p>
<ol>
<li>For performance reasons if a function or method is not very complex it can be included in the header so that the compiler can try to <code>inline</code> it. This means that the code of the function will replace the function call where it is used.</li>
<li>There are complete libraries such as the <a href="https://www.boost.org/" rel="nofollow noreferrer">Boost Library</a> in <code>.hpp</code> files that provide a great deal of additional functionality (maybe even a binary search).</li>
</ol>
<p>This is what the solutions class might look like in this case:</p>
<p><strong>Solution.h</strong></p>
<pre><code>#ifndef LEETCODE1044_SOLUTION_H
#define LEETCODE1044_SOLUTION_H

#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;

class Solution {
private:
    const int prime = 19260817;
    const int a_decimal = 65;
    const int char_size = 26;
    std::string res = "";
    std::vector&lt;int&gt; exponent;

    // Wikipedia
    // The Rabin–Karp algorithm or Karp–Rabin algorithm is a string - searching algorithm that uses hashing to find an exact match of a pattern string in a text.
    // It uses a rolling hash to quickly filter out positions of the text that cannot match the pattern,
    // and then checks for a match at the remaining positions.
    const std::string rabin_karp_search(const int length, const std::string&amp; base);

    // Wikipedia
    // binary search is a search algorithm that finds the position of a target value within a sorted array.
    // Binary search compares the target value to the middle element of the array.
    // If they are not equal, the half in which the target cannot lie is eliminated and the search continues on the remaining half,
    // again taking the middle element to compare to the target value, and repeating this until the target value is found.
    // If the search ends with the remaining half being empty, the target is not in the array.

    const std::string get_longest_binary_search(std::string base_string, std::string res);

public:
    const std::string longestDupSubstring(const std::string base_string);

};

#endif //LEETCODE1044_SOLUTION_H
</code></pre>
<p><strong>Solution.cpp</strong></p>
<pre><code>#include "Solution.h"

const std::string Solution::rabin_karp_search(const int length, const std::string &amp;base)
{
    if (length == 0) {
        return "";
    }

    std::unordered_map&lt;int, std::vector&lt;int&gt;&gt; hash_map = std::unordered_map&lt;int, std::vector&lt;int&gt;&gt;(); // hash memorization
    long long curr = 0; // current hash
    int index;

    for (index = 0; index &lt; length; index++) {
        curr = ((curr * char_size) % prime + (base[index] - a_decimal)) % prime;
    }

    hash_map[curr] = std::vector&lt;int&gt;(1, 0);

    for (index = length; index &lt; base.length(); index++) {
        curr = ((curr - (long long) exponent[length - 1] * (base[index - length] - a_decimal)) % prime + prime) % prime;
        curr = (curr * char_size + (base[index] - a_decimal)) % prime;

        if (hash_map.find(curr) == hash_map.end()) {
            hash_map[curr] = std::vector&lt;int&gt;(1, -~index - length);

        } else {
            for (const auto iter : hash_map[curr]) {
                if (std::strcmp((base.substr(iter, length)).data(), base.substr(-~index - length, length).data()) == 0) {
                    return base.substr(iter, length);
                }
            }

            hash_map[curr].push_back(-~index - length);
        }
    }

    return "";
}

const std::string Solution::get_longest_binary_search(std::string base_string, std::string res)
{
    int lo = 0;
    int hi = base_string.length();

    while (lo &lt;= hi) {
        int mid = lo + ((hi - lo) &gt;&gt; 1);
        std::string temp = rabin_karp_search(mid, base_string);

        if (temp.length() == 0) {
            hi = mid - 1;

        } else {
            if (temp.length() &gt; res.length()) {
                res = temp;
            }

            lo = -~mid;
        }
    }

    return res;
}

const std::string Solution::longestDupSubstring(const std::string base_string)
{
    res = "";
    exponent = std::vector&lt;int&gt;(base_string.length(), 1);
    int index;

    for (index = 1; index &lt; base_string.length(); index++) {
        exponent[index] = (exponent[index - 1] * char_size) % prime;
    }

    return get_longest_binary_search(base_string, res);
}
</code></pre>
    </div>