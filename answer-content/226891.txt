<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General thoughts</h3>

<p>You have managed to create a somewhat elegant API that balances between a state machine pattern and a regex engine. This is reusable for small and context-free use cases, but will get to haunt you if you need to <em>tokenize</em> more complex and context-bound grammars. </p>

<p>I can only add to VisualMelon's spot-on review:</p>

<ul>
<li>Tuples are fantastic constructs for internal data representation of an API, utility classes to avoid boiler-plate classes/structs. For the public connection points of any API however, they are more of a code smell. They somehow hurt readability. I feel a class name adds so much more to an input or result argument.</li>
<li>There is room for improvement when dealing with escape characters and sequences. Currently only the double quote gets escaped. You could make a mini API for this.</li>
</ul>

<h3>Commandline API</h3>

<p>Although this API is kept very simple, it already shows how you'd have to manage/corrupt your token design, just to be able to maintain simple regex patterns.</p>

<blockquote>
<pre><code>public enum CommandLineToken
{
    // .. other

    [Regex(@"[\=\:\,\s]")]
    ValueBegin,

    [QText(@"([a-z0-9\.\;\-]*)")]
    Value,
}
</code></pre>
</blockquote>

<p>In my opinion, there should not be a distinction between <code>ValueBegin</code> and <code>Value</code>. They are both <code>Value</code> syntactically, only their semantics differ. I would never allow semantics to hurt my API design. This is a good example to show that regex only has benefits for the simpler grammars. Another proof to that point is that you required to make a custom pattern matcher <code>QTextAttribute</code>, because a regex would be too much pain to write (if even possible for balanced and escaped delimiters). </p>

<p>I like the API for its simplicity, and I see use cases for it. However, I'm afraid for most use cases, as more functionality is added over time, you'd end up with convoluted tokens and complex regexes to maintain. A next step is to ditch the regex engine and go for a full blown <strong>lexer</strong>.</p>
    </div>