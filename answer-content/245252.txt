<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Reliability</h1>
<p>I get that this program is meant for you to continue learning python, but <em>please</em> don't use any passwords generated by this program. Especially since your strength check is really weak. I.E, this function that checks the strength thinks <code>Password123</code> is a strong password. Don't use it :-).</p>
<h1>Checking password strength</h1>
<p>This function can be reduced to the following:</p>
<pre><code>import re

def check_password_strength(password: str) -&gt; bool:

    tests = [
        re.compile(r'\w{8,}'),
        re.compile(r'\d+'),
        re.compile(r'[a-z]'),
        re.compile(r'[A-Z]')
    ]

    return not any(test.search(password) == None for test in tests)
</code></pre>
<p>Instead of creating individual variables for each regex, make a list and loop through it checking the password against each value in the list.</p>
<p>Take a look at <a href="https://github.com/dropbox/zxcvbn" rel="nofollow noreferrer"><code>zxcvbn</code></a>, which is a password strength tester written by Dropbox. It's in javascript, but if you understand the main algorithm you'll be able to write it in python.</p>
<h1>Type Hints</h1>
<p>These allow you to display what types of parameters are accepted and what types are returned by your functions. Take a look at the function above for an example. Accepts <code>password</code> as a <code>str</code>, and returns a <code>bool</code>(ean) value.</p>
<h1>Creating strings</h1>
<p>This</p>
<pre><code>password = ''
for c in range(length):
    password += random.choice(chars)
print(password)
</code></pre>
<p>can be written like this (thanks <a href="https://codereview.stackexchange.com/users/98493/graipher">Graipher</a>)</p>
<pre><code>password = ''.join(random.choices(chars, k=length))
</code></pre>
<p>The <code>_</code> just means the variable in the loop isn't used, and should be ignored.</p>
    </div>