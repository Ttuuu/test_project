<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can simplify your code even farther yet.  with a bit of refactoring in your class you can make properties out of the tax calculation and the net annual pay functions. a Dictionary for the formtypes, so that you can map different strings to the same value and a Dictionary to map the departmentid to the appropriate string, this eliminates the function for that:</p>

<pre><code>class Employee
{
    readonly Dictionary&lt;string,int&gt; formTypes = new Dictionary&lt;string, int&gt;()
    {
        {"W2",0 },
        {"w2",0 },
        {"1099", 1 }
    };
    readonly Dictionary&lt;int, string&gt; devTypes = new Dictionary&lt;int, string&gt;()
    {
        {0,"Unknown" },
        {1,"Object-Oriented" },
        {2,"Scripts" }
    };
    public Employee() { }

    public string Name { get; set; }
    public string Zip { get; set; }
    public int Age { get; set; }
    public double Pay { get; set; }
    public int DepartmentId { get; set; }
    public string DevType
    {
        get
        {
            return devTypes[DepartmentId];
        }
    }
    public double Tax
    {
        get
        {
            return CalculateTax(Pay);
        }
    }
    public double NetAnnualPay
    {
        get
        {
            return AnnualPay(Pay) - Tax;
        }
    }
    public string GetTaxForm { get; set; }

    private double CalculateTax(double basis)
    {
        double monthlyTax;

        if (formTypes[GetTaxForm] == 0)
        {
            monthlyTax = .07 * basis;
        }
        else
        {
            monthlyTax = 0;
        }
        return 12 * monthlyTax;
    }
    private double AnnualPay(double amount) =&gt; 12 * amount;
}
</code></pre>

<p>The advantage of this is that, instead of looping through each item in the list, you can load them automatically by setting the list as the datasource for the datagridview.  To get the currency format, you can set the defaultcellstyle.format for those columns:</p>

<pre><code>DataTable dt = new DataTable("Employee Data");
private void LoadAllButton_Click(object sender, System.EventArgs e)
{
    employees = JsonConvert.DeserializeObject&lt;List&lt;Employee&gt;&gt;(File.ReadAllText("JSON.json"));              
    dataGridView1.DataSource = employees;
    dataGridView1.Columns["Pay"].DefaultCellStyle.Format = "C";
    dataGridView1.Columns["Tax"].DefaultCellStyle.Format = "C";
    dataGridView1.Columns["NetAnnualPay"].DefaultCellStyle.Format = "C";
    var formTypes = employees.Select(x =&gt; x.GetTaxForm).Distinct().ToArray();
    comboBox1.Items.AddRange(formTypes);
}
</code></pre>

<p>To filter the data. I would suggest a combobox.  the load method above shows how to dynamically load the combobox according to the different form types in the data.  In the <code>SelectedValueChanged</code> event handler one can reload the datagridview with the filtered data:</p>

<pre><code>private void comboBox1_SelectedValueChanged(object sender, System.EventArgs e)
{
    string formType = comboBox1.SelectedItem.ToString();
    var filteredList = (from emp in employees
                       where emp.GetTaxForm == formType
                       select emp).ToList();
    dataGridView1.DataSource = filteredList;
}
</code></pre>
    </div>