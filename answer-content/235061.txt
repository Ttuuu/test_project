<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem I have with both versions is that you are adding functionality from all different items into 1 place.</p>

<p>The first red flag for me is </p>

<pre><code>Class Cart extends Shop {
</code></pre>

<p>Does a Cart really extend a Shop?  You also have functionality for an order, a product etc. inside the Cart.</p>

<p>What I have started to do is to break this down into what can be tangible classes, the scope of these classes will (hopefully) be clear enough to be extended to uses beyond what is here, but the idea is to look at what is responsible for what...</p>

<pre><code>Class Shop  {
    // Details including name, address, contact details etc.

    public function getProduct ( int $productID ) : Product {

    }
}

// Details of a particular Products
Class Product   {
    // Product description etc.
</code></pre>

<p>The next method can be used in a multitude of situations, so in itself it is worth becoming a public method...</p>

<pre><code>    public function getStock()   {
        return $this-&gt;quantity;
    }
}
</code></pre>

<p>An Order is created once a user has saved a Cart.  You can use a Builder pattern to create an Order from all of the details required, you can include things like payment status/method, Customer details, delivery &amp; special instructions etc.</p>

<p>For this example just say it is a Cart</p>

<pre><code>// A user places an Order
class Order {
    public function __construct( Cart $cart )   {
        $this-&gt;cart = $cart;
    }
</code></pre>

<p>Again an Order can be processed all over the place, so other methods which allow you to update the items in a cart, change delivery details etc.  can be used in different pages.  Once they have been updated, the next method can process save of the Order.</p>

<pre><code>    // Save order - returns true/false depending on if saved OK
    public function save()  {
        // Save order - all parts including items in the order, delivery details etc.
        return true;
    }
}

// A Cart is a list of items the customer wants to buy
Class Cart  {
    private $items = [];

    // Returns list of items out of stock or true if OK.
    public function checkStock ()   {
        $errors = [];
        // Check that each item in the cart has enough stock
        foreach ( $items as $item ) {
            if ( $item["product"]-&gt;getStock() &gt; $item["quantity"] ) {
                // Store list of messages about item being out of stock
                $errors[] = 'Not enough stock';
            }
        }

        return !empty($errors) ? $errors : true;
    }

    // Add a particular item to a cart
    public function addItem ( Product $product, $quantity ) : bool {
        $this-&gt;items[] = [ "product" =&gt; $product, "quantity" =&gt; $quantity];

        return true;
    }
}
</code></pre>

<p>The above class are some of the tangible objects in the system, others may include Customers, Delivery types and anything else.</p>

<p>You then need something to put these together.  This is the controller in MVC, and links to the actions the user makes in the front end.</p>

<p>When you click on save a cart (or depending on your requirements after payment etc.)  This will call <code>checkoutCart()</code>.  This uses the methods in the various other class, so asks a <code>Cart</code> to check the stock (which then calls the <code>Product</code> methods), it then creates an <code>Order</code> and assuming everything goes OK it calls the <code>Order</code> method to save the Order.</p>

<pre><code>// Controller for Checkout page
Class CheckoutController  {
    // Final save to create an Order
    public function checkoutCart()  {
        // Retrieve cart for session
        $checkCart = $cart-&gt;checkStock();
        if ( $checkCart !== true ) {
            // Stock levels no longer can fulfill order
            // Exit with information about items no longer available
        }
        $order = new Order($cart);
        if ( $order-&gt;save() )   {
            // Message order created
        }
        else    {
            // Message order not created
        }
    }
}

// Controller for Item page
Class ItemPageController  {
    public function addItemToCart() {
        // Retrieve cart/shop for session

        $product = $shop-&gt;getProduct($this-&gt;request-&gt;post-&gt;product_id);
        $cart-&gt;addItem($product, $this-&gt;request-&gt;post-&gt;quantity);
        // Message to say item added
    }
}
</code></pre>
    </div>