<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>As a general rule, I'd tend to prefer the built in C++ <code>bool</code> over the Windows-specific <code>BOOL</code>.</p>
</li>
<li><p>Your <code>sanitizePath</code> seems less than ideal, at least to me. Passing them parameter by reference, then creating a local copy from the reference seems like kind of a waste. If you want a local copy, just pass by value. Regardless of that, <code>std::string</code> already provides a function to search for the position you want, so I'd probably use that.</p>
<pre><code> std::string sanitizePath(std::string const &amp;input) {
     auto pos = input.find_last_not_of("/\\");
     return input.substr(0, pos+1);
 }
</code></pre>
</li>
<li><p>After a few decades of using C++, I've gotten to the point that almost any time I see an <code>open</code> and matching <code>close</code> operation, my immediate reaction is to use RAII--define a class that does the <code>open</code> in its ctor, and the matching close in its dtor. It looks to me like file searching fits this pattern, and probably benefits from the RAII treatment.</p>
</li>
<li><p>Likewise, if I'm going to iterate through a collection of objects, my reaction is to think about whether I can define an actual iterator, so I can off-load as much work as possible onto standard algorithms (and such).</p>
</li>
<li><p>I'd avoid using <code>std::endl</code>. In this case, it probably doesn't make a huge difference, but I'd still form the habit of using <code>'\n'</code> when you want a <code>new-line</code>.</p>
</li>
<li><p>You might want to consider using a <code>std::filesystem::recursive_directory_iterator</code>, which already implements an iterator interface for file searching. Using it, the code for <code>findFiles</code> would reduce down to something like this:</p>
<pre><code> int findFiles(std::filesystem::path const&amp; fspath, const std::string&amp; fs)
 {
     std::filesystem::recursive_directory_iterator di { fspath };
     int count = 0;

     for (auto const&amp; file : di) {
         if (file.path().filename() == fs) {
             std::cout &lt;&lt; file.path().string() &lt;&lt; "\n";
             ++count;
         }
     }
     return count;
 }
</code></pre>
</li>
</ol>
    </div>