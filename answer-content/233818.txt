<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<p>Give your class a more meaningful name, that begins with a capital letter -as all classes should in Java-, e.g. <code>CaesarCipher</code>.</p>

<p>The <code>operation()</code> method's name doesn't tell us anything about what it actually does. If it weren't for the <code>//Encryption</code> comment, there would be no indication that this class does something even related to encryption/decryption.</p>

<p>The variable <code>shift_String</code> uses snake_case while all the other ones use camelCase; pick one and stick to it (and since this is Java, I'd recommend camelCase as it is the accepted standard). </p>

<p>More generally, try using names that actually describe what the variable/method/class represents or does (what is <code>d</code>? what about <code>test</code>?). You could for example declare one String, say <code>userInput</code>, and reuse it whenever you want to store the user's input, that way you don't need to declare two variables where one has the same name as the other appended with <code>String</code> everytime.</p>

<p>Also, shortened names like <code>out</code> or <code>d</code> don't really have any benefit over slightly longer, clearer ones, other than making the very first time you type the name a tiny bit shorter. Giving them more meaningful names will make the code easier to read later, and you shouldn't be worried about typing a few more characters each time; let your IDE do its job!</p>

<h2><code>final</code> keyword</h2>

<p>This recommendation is more based on my own opinions, but I think it's justified here since you've made use of it yourself.</p>

<p>Mark all method arguments as <code>final</code>; this will prevent you from accidentally reassigning them (which you really shouldn't do anyways).</p>

<p>Make all your instance &amp; local variables <code>final</code> when appropriate; this simply indicates that once they are assigned a value, that value should not and will not change in the future. It may seem like you're simply adding more unnecessary fluff to an already very verbose language, but I personally think it helps writing clearer code as well as making it easier to debug. </p>

<p>If you want to read more about Java's use of the <code>final</code> keyword, I recommend this answer : <a href="https://softwareengineering.stackexchange.com/questions/98691/excessive-use-final-keyword-in-java">https://softwareengineering.stackexchange.com/questions/98691/excessive-use-final-keyword-in-java</a>.</p>

<h2>Code Optimization &amp; Reusability</h2>

<p>The <code>text</code> variable is declared but never used.</p>

<p>Redundant checks in <code>main()</code> :</p>

<pre><code>if(decision == 1) {
    boolean test = true;
    out = operation(field, shift, test);
}
else if(decision == 2) {
    boolean test = false;
    out = operation(field, shift, test);
}
else if(decision != 1 &amp;&amp; decision != 2) {
    out = "Invalid choice!";
}
</code></pre>

<p>Your last <code>else if</code> could be replaced by a simple <code>else</code>, since the only way you'll get there is if <code>decision</code> is neither equal to 1 nor to 2. In this same snippet, you could also get rid of the <code>test</code> variable altogether, or maybe declare it before those conditionals and place the <code>out = operation(field, shift, test);</code> at the end. Additionnaly, what does <code>test</code> mean? What is it testing for?</p>

<p>You may want to implement another cipher later; if that's the case, then creating a simple <code>Cipher</code> interface might be worthwhile. You should also make <code>caesar</code> a separate class from <code>main()</code> and decouple it from all the user interface stuff, that way you can use it whenever you want, wherever you want. The interface might look something like this :</p>

<pre><code>public interface Cipher {
    public String encrypt(final String text);

    public String decrypt(final String cipherText);
}
</code></pre>

<p>Use an <code>enum</code> to represent the two choices given to the user. This might be overkill for this case as you'd only have two possible values (<code>ENCRYPT</code> and <code>DECRYPT</code>, for example), but it would certainly make the code even more readable.</p>

<p>There's more that could be said, about user input validation, or using magic numbers in <code>operation()</code>, and more, but I'll leave it to other users.</p>

<h2>Exception Handling &amp; User Input</h2>

<p>What happens if the user decides to type "oiuahffduht$$$" when you ask them for the shift value? Your program breaks and the user has to manually start it again! <em>Always assume the worst from the user</em>. Ideally, you'd want to handle such cases in your code via exception handling. If you're not familiar with the concept, you can take a look at this link which covers all the basics of EH in Java : <a href="https://stackify.com/specify-handle-exceptions-java/" rel="nofollow noreferrer">https://stackify.com/specify-handle-exceptions-java/</a>.</p>

<p>So what can we do here? If you look at the Java documentation for <code>Integer.parseInt()</code> -or check its signature from your favorite IDE, you'll see that it can throw a <code>NumberFormatException</code>, so let's catch it. Keeping the same logic and syntax as your original code, it might look something like this :</p>

<pre><code>String shift_String = JOptionPane.showInputDialog("Please enter shift to the right:");

try {
    shift = Integer.parseInt(shift_String);
}
catch (NumberFormatException e) {
    // Handle the exception
}
</code></pre>

<p>There's lots of different ways you can handle the exception; you could simply show the user the contents of the exception or the stack trace, you could end the program... Personally, I think the best way to handle this case would be to show a new dialog that says something along the lines of <em>"Error, you must enter a number"</em>, then show that previous input box and asks for the same thing again. That way the user won't have to close/reopen the program and they'll know what went wrong.</p>

<h2>Magic Numbers</h2>

<p>In your <code>operation()</code> method, you use a bunch of "magic numbers" (64, 90, 26...). So what's a magic number? It's basically a hardcoded value (not necessarily a 'number') that is present in your code without any explanation of why it's there or what it means.</p>

<p>Imagine if someone who's not familiar with ASCII were to read your code (though maybe they shouldn't be writing code in the first place). They might think you're using some crazy voodo magic to turn numbers into letters, who knows? So give these numbers names! </p>

<p>Or, maybe try a different approach entirely, where you would store all the possible characters in a String, then make use of the wonderful modulo operator like so : </p>

<pre><code>private static final String ALPHABET = "abcdefghijklmnopqrstuvwxyz";

public static String encrypt(final String text, final int shift) {
        final String lowerCaseText = text.toLowerCase();
        String cipherText = "";

        for (int i = 0; i &lt; lowerCaseText.length(); i++) {
            final int charPosition = ALPHABET.indexOf(lowerCaseText.charAt(i));
            final int newCharPosition = (shift + charPosition) % 26;
            final char newChar = ALPHABET.charAt(newCharPosition);

            cipherText += newChar;
        }

        return cipherText;
    }
</code></pre>

<p>Now you don't even have to deal with those annoying numbers anymore!</p>

<p>By the way, I haven't tested this, and I don't claim it to be more efficient or readable.</p>
    </div>