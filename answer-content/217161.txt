<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's usually best to return as early as possible for invalid cases. This avoids unnecessary nesting and complexity.</p>

<p>e.g. the <code>main()</code> function has a lot of redundant code:</p>

<pre><code>int main(int argc, string argv[])
{
    //check for valid key and save
    int valid = 0;
    if (argc == 2)
    {
        valid = check(argv[1]);        
    }
    else 
    {
        printf("Usage: ./vigenere keyword\n");
        return 1;
    }

    ...
    if (valid == 1)
    {
        ...
    }
    else
    {
        printf("Usage: ./vigenere keyword\n");  
        return 1;
    }
}
</code></pre>

<p>and could be shortened to:</p>

<pre><code>int main(int argc, string argv[])
{
    if (argc != 2 || check(argv[1]) != 0)
    {
        printf("Usage: ./vigenere keyword\n");
        return 1;
    }

    ...
}
</code></pre>

<p>The main loop of the program could be abstracted to a separate function (after checking for a valid key / printing usage on error).</p>

<hr>

<p>Similarly <code>check()</code> could be written as:</p>

<pre><code>int check (string argv)
{
    for (int i = 0, n = strlen(argv); i &lt; n; i++)
    {
        if (!isalpha(argv[i]))
        {
            return 1;
        }
    }

    return 0;
}
</code></pre>

<hr>

<p><code>check()</code> is not an informative name for a function. It should at least be <code>check_key</code>, or <code>is_all_alpha</code> or something. <code>shift()</code> is a similarly cryptic name.</p>

<hr>

<p>By using <code>strlen</code>, we are unnecessarily iterating the string twice (once to find the null at the end, then again to process it). We can simply run until we find a null character:</p>

<pre><code>for (int j = 0; plaintext[j]; ++j)
</code></pre>

<hr>

<p>Don't use magic numbers. What are <code>122</code>, <code>26</code>, or <code>97</code>?</p>

<hr>

<p>Variables should be declared as close to their point of usage as possible, and initialized with real values. (<code>key</code>, <code>index</code>, <code>new_code</code>).</p>

<hr>

<p>It would be better to use another variable (e.g. <code>keyword</code>) as an alias, rather than using <code>argv[1]</code> throughout the code.</p>

<p>There is no need to <code>strlen()</code> the keyword for every character.</p>

<hr>

<p>The main loop always ends up printing a char. The rest of the code just decides what the char will be. So perhaps it could be abstracted into a function. Also, since we are expected to treat both 'a' and 'A' the same, we can simplify things by only outputting letters in lowercase.</p>

<p>I'd be inclined to do something like this (not tested):</p>

<pre><code>string key = argv[1];
int key_len = strlen(key);
int key_i = 0;
for (int j = 0; plaintext[j]; ++j)
{
    char p = plaintext[j];
    char c = !isalpha(p) ? p : encode_char(p, key[key_i++ % key_len]);
    printf("%c", c);
}

printf("\n");
...

char encode_char(char plaintext, char key)
{
    assert(isalpha(plaintext)); // #include &lt;assert.h&gt;

    int k = shift(tolower(key));
    int p = shift(tolower(plaintext));

    return unshift((p + k) % 26);
}
</code></pre>
    </div>