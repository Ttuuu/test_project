<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>overall and good stuff</h1>

<p>This is pretty good.  I definitely wouldn't call the code dirty.  Good stuff:</p>

<ul>
<li>The indentation is good</li>
<li>putting double quotes around variable substitutions is a best practice</li>
<li>using <code>$()</code> for command substitution is the best practice also</li>
<li>the <code>#!</code> is good</li>
<li>providing meaningful output to the user is nice</li>
<li>the variable names are ok</li>
</ul>

<h1>suggestions</h1>

<ul>
<li>I get putting <code>rm -r out; mkdir out</code> on one line sounds good because they're related, but it doesn't help the readability here.  If you want to tie them together so that the <code>mkdir</code> doesn't run unless <code>rm</code> succeeds then you could do <code>rm -r out &amp;&amp; mkdir out</code>.  Otherwise I'd put them on two lines.  Breaking up things with blank lines, as you've already done, is enough to make clear which things belong together.</li>
<li><code>for f in src/*.md</code> certainly works most of the time, but will break if there's any white space in a filename.  Fixing this involves <a href="https://unix.stackexchange.com/a/321757/79839">using find</a>.  <a href="https://unix.stackexchange.com/a/9499/79839">This answer</a> is part of a duped question, but it may be a bit easier to follow.</li>
<li>Having <code>f</code> and <code>filename</code> as variables is a bit confusing.  For something this short it is pretty harmless which is why I said they were ok above.  If you want to tweak this <code>f</code> might make more sense as <code>fullpath</code> or <code>fqfn</code>.  And <code>filename</code> might be better as <code>basename</code> or <code>base</code>.</li>
<li>add <code>if ! which pandoc</code>... near the top to catch if <code>pandoc</code> is missing.</li>
</ul>

<pre><code>if ! which pandoc &gt; /dev/null; then
        echo you need pandoc
        exit 1
fi
</code></pre>

<h1>further reading</h1>

<ul>
<li><a href="https://www.shellcheck.net/" rel="nofollow noreferrer">shellcheck</a> is handy.  You can run it locally or in your CI pipeline or manually paste something into their site.</li>
<li><a href="https://sap1ens.com/blog/2017/07/01/bash-scripting-best-practices/" rel="nofollow noreferrer">bash best practices by Yaroslav Tkachenko</a> is a nice quick read on bash best practices.</li>
<li><a href="https://google.github.io/styleguide/shellguide.html" rel="nofollow noreferrer">google shell style guide</a> is even more in-depth with best practices.</li>
<li><a href="https://stackoverflow.com/a/21613044/2002471">env is good for portability</a> but this is rarely an issue with <code>bash</code>.  It might become a more current problem if Apple dumps bash after <a href="https://www.theverge.com/2019/6/4/18651872/apple-macos-catalina-zsh-bash-shell-replacement-features" rel="nofollow noreferrer">adopting zsh as the default</a>.</li>
</ul>
    </div>