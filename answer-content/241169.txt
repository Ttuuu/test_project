<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a solution that doesn't use as many deep features of PostScript, although it might be considered twisted in its own way. It stores temporary variables at the bottom of the stack instead of at the top, and does this by rotating the entire stack repeatedly. Even so, it seems efficient enough.</p>

<p>First, a version that modifies the array in place.</p>

<pre><code>% Very general map that operates on an existing array.                                              
% Does not pollute dictionary. Allows natural access to stack.                                      
% Efficiency may vary since it rotates the entire stack a lot.                                      

/map {          % array f map --                                                                    
                                        % ... array f                                               
    count count 1 add roll              % array f ...                                               
    count 1 sub index                   % array f ... array                                         
    length 1 sub 0 exch 1 exch          % array f ... 0 1 (n-1)                                     
    {                                   % array f ... i                                             
        count count roll                % i array f ...                                             
        count 2 sub index               % i array f ... array                                       
        count 1 sub index               % i array f ... array i                                     
        get                             % i array f ... array[i]                                    
        count 3 sub index               % i array f ... array[i] f                                  
        exec                            % i array f ... f(array[i])                                 
        count 2 sub index               % i array f ... f(array[i]) array                           
        exch                            % i array f ... array f(array[i])                           
        count 1 count sub roll          % array f ... array f(array[i]) i                           
        exch put                        % array f ...                                               
    } for
    count 0 count sub roll              % ... array f                                               
    pop pop                             % ...                                                       
} bind def
</code></pre>

<p>Second, a version that leaves the array unmodified and returns a new array:</p>

<pre><code>% Very general map that returns a new array.                                                        
% Does not pollute dictionary. Allows natural access to stack.                                      
% Efficiency may vary since it rotates the entire stack a lot.                                      

/mapc {         % array f map -- array                                                              
                                        % ... array f                                               
    exch dup length array               % ... f array newarr                                        
    count count 2 add roll              % f array newarr ...                                        
    count 2 sub index                   % f array newarr ... array                                  
    length 1 sub 0 exch 1 exch          % f array newarr ... 0 1 (n-1)                              
    {                                   % f array newarr ... i                                      
        count count roll                % i f array newarr ...                                      
        count 3 sub index               % i f array newarr ... array                                
        count 1 sub index               % i f array newarr ... array i                              
        get                             % i f array newarr ... array[i]                             
        count 2 sub index               % i f array newarr ... array[i] f                           
        exec                            % i f array newarr ... f(array[i])                          
        count 4 sub index               % i f array newarr ... f(array[i]) newarr                   
        exch                            % i f array newarr ... newarr f(array[i])                   
        count 1 count sub roll          % f array newarr ... array f(array[i]) i                    
        exch put                        % f array newarr ...                                        
    } for
    count 0 count sub roll              % newarr ... f array                                        
    pop pop                             % newarr ...                                                
    count 1 count sub roll              % ... newarr                                                
} bind def
</code></pre>
    </div>