<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are looking for elegant you can consider the functional paradigm. Here I have added a function SelectPair which maps 2 elements of an IEnumerable to a single element; allowing the 2 characters of the hex string to be extracted together.</p>

<p>The main code then reduces to </p>

<pre><code>static string HexStringToString(string hexString) 
{
    return 
        String.Join(
            "",
            hexString
                .ToCharArray()
                .SelectPair(
                    (ch1,ch2) =&gt; ch1.ToString() + ch2)
                .Select(
                    hexChar =&gt; (char) Convert.ToByte(hexChar, 16)));
}
</code></pre>

<p>SelectPair is an extension method, which can be reused elsewhere.</p>

<pre><code>public static class LinqExt
{
    public 
    static
    IEnumerable&lt;TResult&gt;
    SelectPair&lt;TSource, TResult&gt;(
        this
        IEnumerable&lt;TSource&gt;                list,
        Func&lt;TSource,TSource,TResult&gt;       onPair)
    {
        var odd   = default(TSource);
        var isOdd = true;

        foreach(var item in list)
        {
            if (isOdd)
            {
                odd = item;
            }
            else
            {
                yield return onPair(odd, item);
            }

            isOdd = !isOdd;
        }
    }           
}
</code></pre>
    </div>