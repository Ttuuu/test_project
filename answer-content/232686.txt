<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks almost neat and clean, but there are still some areas where you could improve it.  </p>

<ul>
<li>Althought braces may be optional for single line <code>if</code> statements your code will get less error-prone by using them.  </li>
<li>Some more vertical spacing (new lines) would improve the readability of the code.  </li>
<li>The class <code>EitherRequiredAttribute</code> could be named better. I would suggest to name it <code>AtLeastOneRequiredAttribute</code>. Using this name makes the purpose of the class and the annotation more clear.  </li>
<li>You only check if <code>valueX == null</code> hence you could omit both <code>value1</code> and <code>value2</code> and just check if the call to <code>GetValue()</code> returns <code>null</code>.  </li>
<li><p>Instead of having   </p>

<pre><code>var property1 = validationContext.ObjectType.GetProperty(_field1);
if (property1 == null)
    return new ValidationResult(string.Format("Unknown property: {0}", _field1), new[] { _field1 });  
var property2 = validationContext.ObjectType.GetProperty(_field2);
if (property2 == null)
    return new ValidationResult(string.Format("Unknown property: {0}", _field2), new[] { _field2 });  
</code></pre>

<p>you could introduce a method <code>bool TryGetProperty(string, ValidationContext, out PropertyInfo)</code>.  </p></li>
</ul>

<p>Implementing the mentioned points would lead to  </p>

<pre><code>[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
public class AtLeastOneRequiredAttribute : ValidationAttribute
{
    private readonly string _field1;
    private readonly string _field2;

    public EitherRequiredAttribute(string field1, string field2) =&gt; (_field1, _field2) = (field1, field2);

    protected override ValidationResult IsValid(object value, ValidationContext validationContext)
    {
        if (!TryGetProperty(_field1, validationContext, out var property1))
        {
            return new ValidationResult(string.Format("Unknown property: {0}", _field1), new[] { _field1 });
        }

        if (!TryGetProperty(_field2, validationContext, out var property2))
        {
            return new ValidationResult(string.Format("Unknown property: {0}", _field2), new[] { _field1 });
        }

        if (property1.GetValue(validationContext.ObjectInstance) != null ||
            property2.GetValue(validationContext.ObjectInstance) != null)
        {
            return ValidationResult.Success;
        }

        return new ValidationResult(string.Format("Either or both of \"{0}\" and \"{1}\" are required", _field1, _field2), new[] { _field1, _field2 });
    }
    private bool TryGetProperty(string fieldName, ValidationContext validateionContext, out PropertyInfo propertyInfo)
    {
        return (propertyInfo = validateionContext.ObjectType.GetProperty(fieldName)) != null;
    }
}
</code></pre>

<p>Althought methods named <code>TryGetXXX</code> are indicating that no exception should be thrown by calling them, this method will throw if <code>fieldName</code> is either <code>null</code> or <code>WhitheSpace</code>.</p>
    </div>