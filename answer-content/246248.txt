<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Pythonic code comes in three main veins:</p>
<ol>
<li>That it follows <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>.</li>
<li>Using features of Python that make code <em>easier to read</em>.<br>
This doesn't mean shorter or use new features.</li>
<li>That it follows Python norms.<br>
These are more norms in the sense that <code>map</code>, <code>filter</code> and <code>reduce</code> are no longer 'Pythonic' but are not mentioned in PEP 8.</li>
</ol>
<p>In short these can be summed up as follow norms that make your code <em>easy to read</em>.</p>
<hr>
<p>Your code doesn't do this.</p>
<ol>
<li>
<ul>
<li><p>You shouldn't have spaces around parentheses. <code>isList( x )</code> vs <code>isList(x)</code>.</p>
</li>
<li><p>You should use <code>snake_case</code> for function names. <code>isList</code> vs <code>is_list</code>.</p>
</li>
<li><p>You should not have expressions on the same lines as <code>if</code>s or <code>def</code>s</p>
<pre class="lang-py prettyprint-override"><code>def isList( x ): return isinstance( x, list )
</code></pre>
<p>vs</p>
<pre class="lang-py prettyprint-override"><code>def is_list(x):
    return isinstance(x, list)
</code></pre>
</li>
<li><p>You should indent with 4 spaces.</p>
</li>
<li><p>You shouldn't have white space at the end of lines.</p>
</li>
<li><p>You should have two newlines between top level functions (and classes).</p>
</li>
<li><p>You should use descriptive variable names, what are <code>xs</code>, <code>x</code>, <code>hd</code>, <code>tl</code>?</p>
</li>
</ul>
</li>
<li>
<ul>
<li>You should not have parentheses around if expressions. <code>if ( len(xs) == 0 ):</code> vs <code>if len(xs) == 0:</code>.</li>
<li>You can use truthy rather than <code>len</code>. <code>if len(xs) == 0:</code> vs <code>if not xs:</code></li>
<li>You can use tuple unpacking with the <code>*</code> operator rather than <code>xs[ 1: ]</code>.</li>
<li>Not is not a function it is a keyword. It does not need parentheses.</li>
</ul>
</li>
<li>
<ul>
<li><p>You shouldn't abuse list comprehensions to contain mutability.</p>
<pre class="lang-py prettyprint-override"><code>[ acc := acc + [x] ... ]
</code></pre>
</li>
</ul>
</li>
</ol>
<p>In all more Pythonic versions of these functions would look like the following:</p>
<pre><code># helper function
def is_list(value):
    return isinstance(value, list)


def flatten3_h(*values):
    if not values:
        return []  # base case, empty list/tuple
    head, *tail = values
    if not is_list(head):
        return [head] + flatten3_h(*tail)
    return flatten3_h(*head) + flatten3_h(*tail)


def flatten4(*values):
    flattened = []
    for value in values:
        flattened += (
            [value]
            if not is_list(value) else
            flatten4(*value)
        )
    return flattened
</code></pre>
<blockquote>
<p>I'm wondering which is more Pythonic</p>
</blockquote>
<p>At this point they are both fairly Pythonic. But I would prefer to maintain <code>flatten4</code>.</p>
    </div>