<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The conclusion misses the point</h2>
<p>Your code technically does touch on what makes a list readonly, but the example you've used to display that behavior suggests a completely different problematic scenario, i.e. that of mutable objects. This by itself has nothing to do with lists, regardless of whether they're readonly or not.</p>
<p>So your example is not good. Not because the code doesn't work, but because it gets distracted by a completely unrelated problem, and the outcome you show is more related to that problem than it is to the readonly-ness of the collection.</p>
<pre><code>UserList1 - with a private setter - has been modifed!
Evil Alice IS an Admin.
...

UserList2 - which is IReadOnlyList - remains unchanged.
Alice is NOT an Admin.
...
</code></pre>
<p>While technically you did change the list by creating new users and overwriting the old users, it's not really a good example. <code>User</code> is a mutable class, and in your example I would be perfectly capable of doing this:</p>
<pre><code>for (var i = 0; i &lt; x.UserList2.Count; i++)
{
    x.UserList2[i].IsAdmin = true;
}
</code></pre>
<p>The mutability of your <code>User</code> class is a problem, but <code>IReadOnlyList&lt;T&gt;</code> does not protect you against that.</p>
<p>Had <code>User</code> been immutable, that's a different story. The combination of an immutable class contained in an <code>IReadOnlyList&lt;T&gt;</code> would guard against that.</p>
<p>But <em>even then</em>, you need to make sure that the object you expose as an <code>IReadOnlyList&lt;T&gt;</code> cannot be cast back to a mutable type, e.g:</p>
<pre><code>IReadOnlyList&lt;string&gt; readOnlyList = new List&lt;string&gt;() { "a" };
        
(readOnlyList as List&lt;string&gt;).Add("b");
        
Console.WriteLine(String.Join(",", readOnlyList)); // prints "a, b"
</code></pre>
<p>So you really need many different components before you could validate your example as a valid example.</p>
<p>But this is supposed to be a <strong>simple</strong> example on the purpose of <code>IReadOnlyList&lt;T&gt;</code>, and you've really overcomplicated it with several unnecessary distractions.</p>
<p>So here's my attempt to provide a clear example of the difference:</p>
<hr>
<h2>My version of this answer</h2>
<p>There's a difference between setting a list:</p>
<pre><code>myObject.MyList = new List&lt;string&gt;();
</code></pre>
<p>and setting the members of a list:</p>
<pre><code>myObject.MyList.Add("new value");
</code></pre>
<p>These are two different actions, each of which you can guard against, but in a different way.</p>
<p><strong>Private setters</strong> guard against the list itself being set:</p>
<pre><code>public class PublicSetListClass
{
    public List&lt;string&gt; MyList { get; set; } = new List&lt;string&gt;() { "original" };
}

var myObject1 = new PublicSetListClass();
myObject1.MyList = new List&lt;string&gt;() { "new" };  // this is allowed

public class PrivateSetListClass
{
    public List&lt;string&gt; MyList { get; private set; } = new List&lt;string&gt;() { "original" };
}

var myObject2 = new PrivateSetListClass();
myObject2.MyList = new List&lt;string&gt;() { "new" };  // this is NOT allowed!
</code></pre>
<p>But public setters do not guard against the list's content being altered:</p>
<pre><code>myObject1.MyList.Add("added");   // this is allowed
myObject2.MyList.Add("added");   // this is ALSO allowed!
</code></pre>
<p><strong><code>IReadOnlyList&lt;T&gt;</code></strong>, on the other hand, guards against the content of the list being altered:</p>
<pre><code>// this is the same PublicSetListClass object from before
myObject1.MyList.Add("added");  // this is allowed

public class PublicSetReadOnlyListClass
{
    public IReadOnlyList&lt;string&gt; MyList { get; set; } = new List&lt;string&gt;() { "original" };
}

var myObject3 = new PublicSetReadOnlyListClass();
myObject3.MyList.Add("added");  // this is NOT allowed
</code></pre>
<p>But <code>IReadOnlyList&lt;T&gt;</code> does not guard against the list itself being replaced!</p>
<pre><code>myObject1.MyList = new List&lt;string&gt;() { "new" };  // this is allowed
myObject3.MyList = new List&lt;string&gt;() { "new" };  // this is ALSO allowed!
</code></pre>
<p>So if you want a list that cannot be replaced and whose content cannot be altered, you need to <strong>both</strong> use a private setter and use an <code>IReadOnlyList&lt;T&gt;</code> type (or any other readonly collection type):</p>
<pre><code>public class PrivateSetReadOnlyListClass
{
    public IReadOnlyList&lt;string&gt; MyList { get; private set; } = (new List&lt;string&gt;() { "original" }).AsReadOnly();
}

var myObject4 = new PrivateSetReadOnlyListClass();

myObject4.MyList = new List&lt;string&gt;() { "new" };  // this is NOT allowed
myObject4.MyList.Add("added");                    // this is NOT allowed
</code></pre>
<p>Notice I also added the <code>.AsReadOnly()</code> cast to prevent consumers from casting this readonly list back to its mutable <code>List&lt;string&gt;</code> type. This would require the consumer to actively decide to recast it, but it should be guarded against when the consumer can be assumed to be malevolent.</p>
<p><strong>To summarize</strong>, there are three different solutions at play here:</p>
<ul>
<li>If you don't want the list to be overwritten, give it a private setter.</li>
<li>If you don't want the list's elements to be altered, make it a readonly list (or any other readonly collection type</li>
<li>For further protection, ensure that the object you expose cannot be cast back to a writeable collection type</li>
<li>If you dont want the properties of the list elements themselves to be altered, then those elements' type must be immutable.</li>
</ul>
<p>To make this list property, its elements, and its elements' properties truly immutable, you have to comply with all four of the bullet points.</p>
<hr>
<h2>Comparing your answer to mine</h2>
<p>This is obviously subjective, but I wanted to point out exactly what I changed about your approach:</p>
<ul>
<li>In the beginning of the answer, I very quickly highlighted the two distinct behaviors we were comparing (setting a list vs setting the list's content) without elaborating. This helps readers give structure to the more verbose part of the answer that follows that introduction, which helps them understand that when they read the first behavior, they can already compare it to what the second behavior is going to be. This lowers the cognitive load as you've provided a thread to follow.
<ul>
<li>Compare this to your answer, where both the "first" and "second" parts don't actually address the concrete result. They are two preparatory sections (and not very small ones at that).</li>
<li>Additionally, by providing a terse summary of the content in the beginning, readers who already understand this problem (or even those who don't even know what a list is) can quickly decide that they don't need to read the whole thing. It's a nice-to-have, really.</li>
</ul>
</li>
<li>The demo code is terse and to the point, directly using <code>list.Add()</code> and <code>list = new ...</code> and nothing else, to highlight the specific behaviors that we're addressing.</li>
<li>I broke up the demo code into small, independent pieces, each of which can be digested by themselves, as they all focus on one particular behavior. Each digestible snippet is max 3 lines long (class definition with one property, object initialization, using the object)
<ul>
<li>Comparatively, your code is formatted in a way that I need to read the whole thing before I can then understand the individual steps and why they are different - this requires a much bigger cognitive load. While I was able to follow it, keep in mind that your target audience is already learning about something that is new/foreign to them, so you want to reduce that cognitive load as much as possible.</li>
</ul>
</li>
<li>I used <code>string</code> instead of <code>User</code>, since the specific type of your list elements doesn't actually matter when we're discussing list behavior by itself. The fact that your list types are generic doubly proves that point, though using a concrete class instead of a generic type parameter does lower the cognitive load somewhat. But if you use a complex type for that, you're actually increasing that cognitive load again.</li>
<li>In your example, there wasn't really a purpose to doing the same thing for all five elements of the array. So I stuck to a list with one element. This meant I could skip the <code>for</code> loops, which simplifies the example and again reduces the cognitive load.</li>
</ul>
    </div>