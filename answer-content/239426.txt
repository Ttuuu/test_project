<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design</h1>

<p>References are different from pointers in two ways:</p>

<ul>
<li><p>they are designed to be aliases to the objects they refer to, so syntactically they are treated with special care;</p></li>
<li><p>they cannot be rebound.</p></li>
</ul>

<p>You cannot always emulate the first bullet with an <code>optional</code> — for example, there's no general way to make <code>opt.f()</code> call <code>opt.value().f()</code>.  You still have to resort to some other syntax like <code>opt-&gt;value()</code>.  Therefore, my advice is to simply treat <code>opt_ref&lt;T&gt;</code> like an immutable nullable pointer that does not own the referred-to object — don't follow <code>std::reference_wrapper</code>.</p>

<h1>Code Review</h1>

<blockquote>
<pre><code>using type = typename std::reference_wrapper&lt;T&gt;::type;
</code></pre>
</blockquote>

<p><a href="https://en.cppreference.com/w/cpp/utility/functional/reference_wrapper#Member_types" rel="nofollow noreferrer"><code>typename std::reference_wrapper&lt;T&gt;::type</code></a> is just <code>T</code>.  Also, the standard terminology is <code>value_type</code>.</p>

<blockquote>
<pre><code>T&amp; get() { return data.value().get(); }
const T&amp; get() const { return data.value().get(); }
bool has_value() const { return data.has_value(); }
T&amp; value_or(T&amp;&amp; other) const { return data.value_or(other); }
</code></pre>
</blockquote>

<p><code>has_value</code> is <code>noexcept</code>.  Why does <code>value_or</code> take an rvalue reference?  To introduce dangling references as in <code>opt.value_or(1)</code>?  Take an lvalue reference instead.</p>

<blockquote>
<pre><code>bool operator == (const T&amp; t) { return data.value() == t; }
bool operator == (const std::nullopt_t&amp;) {return !data.has_value(); }
</code></pre>
</blockquote>

<p>I'm not sure this is the right approach.  The first <code>==</code> compares values (and throws an exception if there is no value), whereas the second <code>==</code> compares the references themselves.  You can imitate the behavior of <code>std::optional</code>:</p>

<pre><code>bool operator==(const opt_ref&lt;T&gt;&amp; a, const opt_ref&lt;T&gt;&amp; b)
{
    if (a.has_value() != b.has_value()) {
        return false;
    } else if (!a.has_value()) { // and !b.has_value()
        return true;
    } else {
        return a.get() == b.get();
    }
}
</code></pre>

<blockquote>
<pre><code>operator T&amp;() { return data.value().get(); }
operator const T&amp;() const { return data.value().get(); }
operator std::reference_wrapper&lt;T&gt;() { return data.value(); }
operator const std::reference_wrapper&lt;T&gt;() const { return data.value(); }
</code></pre>
</blockquote>

<p>As I said before: are you sure you want this (especially the implicit conversions to <code>reference_wrapper</code>)?</p>

<h1>Other functionalities</h1>

<p>Consider:</p>

<ul>
<li><p><code>operator*</code> and <code>operator-&gt;</code>;</p></li>
<li><p><code>explicit operator bool</code>;</p></li>
<li><p><code>has_value</code>;</p></li>
<li><p>...</p></li>
</ul>
    </div>