<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As pointed out by <strong>Blindman67</strong>: in <code>render(wrapper, items);</code>, <code>items</code> is not defined.</p>

<ol>
<li><blockquote>
<pre><code>const url = 'http://moviedatas.com/movies';
</code></pre>
</blockquote>

<p>Const variable used only one time, you can remove it and write <code>url: http://moviedatas.com/movies</code></p>

<p>Same for</p>

<pre><code>const wrapper = $(this);
</code></pre></li>
<li><p>Use ES6 arrow function shortcut syntax <code>() =&gt;</code></p>

<blockquote>
<pre><code>    success: function(response) {
        movieList.each(function() {
            const wrapper = $(this);

            render(wrapper, items);
        });
    },
</code></pre>
</blockquote>

<p>7 lines in one, shorter is cleaner.</p>

<pre><code>success: (response) =&gt; movieList.each(() =&gt; render($(this), response.items)),
</code></pre></li>
<li><blockquote>
<pre><code>error: function(error) {
    onError(movieList);
}
</code></pre>
</blockquote>

<p>If you don't use <code>error</code> XHR response, just write</p>

<pre><code>error: () =&gt; onError(movieList)
</code></pre></li>
<li><p>Write <a href="http://usejsdoc.org/about-getting-started.html" rel="nofollow noreferrer">jsDoc</a> docstring above functions to help developers and IDE understanding what is happening.</p></li>
<li><p>If functions are becoming inline, you may write them directly in caller function.</p></li>
</ol>

<h2>Full review (without docstring)</h2>

<pre class="lang-js prettyprint-override"><code>function loadMovies() {
   const movieList = $('.movie_list');

   // setOnLoading
   movieList.each(() =&gt; $(this).html('Loading...'));

   $.ajax({
       method: 'GET',
       url    : 'http://moviedatas.com/movies',
       data   : { count: 10 },
       success: (response) =&gt; movieList.each(() =&gt; render($(this), response.items))
       error  : () =&gt; movieList.each(() =&gt; $(this).html(''));
   });
}

function render(wrapper, items) {
   const template = `&lt;div class="movie_item"&gt;
     &lt;div class="title"&gt;{title}&lt;/div&gt;
     &lt;div class="desc"&gt;{description}&lt;/div&gt;
    &lt;/div&gt;`;

   let movies = '';

   for (let i = 0; i &lt; items.length; i++) {
       movies += template
           .replace('{title}', items[i].title)
           .replace('{description}', items[i].description);
   }

   wrapper.html(movies);
}
</code></pre>

<p>Also, I don't understand the logic of getting a movie list data and then iterating over a movie list HTML to put movies in. It becomes a list of list of movies...</p>
    </div>