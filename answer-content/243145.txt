<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, install <a href="https://www.shellcheck.net/" rel="nofollow noreferrer">Shellcheck</a> and routinely run it on your scripts, or configure your editor to run it automatically. Now, Shellcheck is <em>pretty rigorous</em> and you would be forgiven for not solving all its warnings, but at the very least be aware of them.</p>
<blockquote>
<pre><code>#!/bin/bash
</code></pre>
</blockquote>
<p>On some systems there’s a more up to date bash installed in a different location. In general you’d want to use</p>
<pre><code>#!/usr/bin/env bash
</code></pre>
<p>Though in the case of Bash on Linux I think yours is OK.<sup>1</sup></p>
<p>Next, enable stricter error checking:</p>
<pre><code>set -euo pipefail
</code></pre>
<p>From <code>help set</code>:</p>
<blockquote>
<ul>
<li><code>-e</code>  Exit immediately if a command exits with a non-zero status.</li>
<li><code>-u</code>  Treat unset variables as an error when substituting.</li>
<li><code>-o</code> <code>pipefail</code> the return value of a pipeline is the status of
the last command to exit with a non-zero status,
or zero if no command exited with a non-zero status</li>
</ul>
</blockquote>

<p>Regarding your variables, there’s a convention to use <code>UPPER_CASE</code> for environment variables, and <code>snake_case</code> for others. Not mandatory, but a nice way to distinguish them.</p>
<blockquote>
<pre><code>wget $STORE_URL/$1 -O ./$ZIP
</code></pre>
</blockquote>
<p>Even though <em>in this specific case</em> there are no spaces or other special characters in your variables, <em>always</em> double-quote them to prevent string splitting — there’s simply no reason ever not to do so, and it gets you into the habit of spotting potential errors when quotes are missing.</p>
<blockquote>
<pre><code>cd ~/Downloads
</code></pre>
</blockquote>
<p>That directory might or might not exist. As we’re talking about a GNOME environment, you might want to use something like <code>$(xdg-user-dir DOWNLOAD)</code> to get the actual download directory. The same is <em>usually</em> true for the path <code>~/.local/share</code>, but <a href="https://help.gnome.org/admin/system-admin-guide/stable/extensions.html.en" rel="nofollow noreferrer">the GNOME shell extensions documentation</a> makes it sound as if the path is actually hard-coded.</p>
<blockquote>
<pre><code>rm $ZIP
</code></pre>
</blockquote>
<p>This will not be executed if the script failed earlier due to an error. To ensure cleanup on error or if the user aborted the script, replace this with a <a href="https://ss64.com/bash/trap.html" rel="nofollow noreferrer">trap</a>.</p>
<p>Resulting script:</p>
<pre><code>#!/usr/bin/env bash

# Install a target gnome shell extension defined via url

set -euo pipefail

store_url="https://extensions.gnome.org/extension-data"
extensions_path="$HOME/.local/share/gnome-shell/extensions/"
zip="gnome-extension.zip"

cd "$(xdg-user-dir DOWNLOAD)"
wget "$store_url/$1" -O "$zip"
trap 'rm "$zip"' ERR INT TERM EXIT

uuid=$(unzip -c "$zip" metadata.json | grep uuid | cut -d \" -f4)

if [[ ! -d "$extensions_path/$uuid" ]]; then
    mkdir "$extensions_path/$uuid"
    unzip -q "$zip" -d "$extensions_path/$uuid"
    gnome-shell-extension-tool -e "$uuid"
fi

gnome-shell --replace &amp;
</code></pre>
<hr>
<p><sup>1</sup> On macOS, on the other hand, it’s a <em>bad idea</em> since the Bash version of <code>/bin/bash</code> is eternally stuck at 3.2 <a href="https://thenextweb.com/dd/2019/06/04/why-does-macos-catalina-use-zsh-instead-of-bash-licensing/" rel="nofollow noreferrer">due to licensing issues</a>, and if you want to use any more recent Bash features you need to rely on a user-installed version with a different path.</p>
    </div>