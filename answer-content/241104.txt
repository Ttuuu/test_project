<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Simply having an immutable map initialized within a static block. 
Also, placing lambdas can achieve higher goal:   </p>

<pre><code>private static final Map&lt;String, String&gt; mapCodes = new HashMap&lt;&gt;();     
static {
              final Map&lt;String, String&gt; items = EnumSet.allOf(Maps.class)
                    .stream()
                    /*.filter(// Can do some filtering excluding values)  */
                    .collect(Collectors.toMap(Maps::code, Maps::description));  

              mapCodes.putAll(items);
}
</code></pre>

<p>Depending on the level of re-usability, recommended is accessing to unique values plus Enum instances.</p>

<pre><code>.collect(Collectors.toMap(Maps::code, m-&gt; m));
</code></pre>

<p>Also, in getter method can reinforce immutability as:</p>

<ul>
<li>Guava: <code>ImmutableMap.copyOf(mapCodes) //Recommended: Protects original map values of being mutated</code></li>
</ul>

<p>Or:</p>

<ul>
<li>Java Collections: <code>Collections.unmodifiableMap(mapCodes)</code></li>
</ul>
    </div>