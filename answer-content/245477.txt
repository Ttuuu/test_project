<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When dealing with collections, it would be difficult to avoid loops. However, I can think of 3 possible ways that would help you convert objects back and forth without repeating the code.</p>
<p>The first one is to add a constructor to <code>StudentRecoredRequest</code> that accepts <code>Student</code> object.</p>
<p>Example :</p>
<pre><code>public class StudentRecoredRequest
{
    public string FirstName { get; set; }
    
    public string LastName  { get; set; }
    
    public DateTime DateOfBirth   { get; set; }
    
    public string Address    { get; set; }
    
    public StudentRecoredRequest() { }
    
    public StudentRecoredRequest(Student student)
    {
        FirstName = student.FirstName;
        LastName = student.SurName;
        DateOfBirth = student.DateOfBirth;
        Address = student.Address1;     
    }               
}
</code></pre>
<p>with this, you would be able to pass Student object directly :</p>
<pre><code>var studentInfo = new StudentRecoredRequest(stud);
</code></pre>
<p>And you can add more methods to handle the conversion or add more options. Another advantage is that you can define an implicit operator on the class to cast Student into StudentRecoredRequest something like :</p>
<pre><code>public class StudentRecoredRequest
{
    public string FirstName { get; set; }
    
    public string LastName  { get; set; }
    
    public DateTime DateOfBirth   { get; set; }
    
    public string Address    { get; set; }
    
    public StudentRecoredRequest() { }
    
    public StudentRecoredRequest(Student student)
    {
        FirstName = student.FirstName;
        LastName = student.SurName;
        DateOfBirth = student.DateOfBirth;
        Address = student.Address1;     
    }
    
    public static implicit operator StudentRecoredRequest(Student student) =&gt; new StudentRecoredRequest(student);   
}
</code></pre>
<p>which would give you this :</p>
<pre><code>var studentInfo = (StudentRecoredRequest) stud;
</code></pre>
<p>the second way is to use extensions, something like this :</p>
<pre><code>public static IEnumerable&lt;StudentRecoredRequest&gt; ToStudentRecoredRequest(this IEnumerable&lt;Student&gt; students)
{
    foreach(var stud in students)
    {
        yield return new StudentSystemRecordRequest
        {
            FirstName = student.FirstName,
            LastName = student.SurName,
            DateOfBirth = student.DateOfBirth,
            Address = student.Address1
        };
    }
}
</code></pre>
<p>usage :</p>
<pre><code>var studentInfo = result.ToStudentRecoredRequest();
</code></pre>
<p>The third way is to use <a href="https://stackoverflow.com/questions/1051182/what-is-data-transfer-object"><strong>Data Transfer Object (DTO)</strong></a> This DTO would make things easier for transfer data between objects, you could use this pattern to link two objects for easier maintainability and extensibility.</p>
    </div>