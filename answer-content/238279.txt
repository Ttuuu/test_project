<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some of the places where you use <code>push_back</code> would be better served using <code>emplace_back</code>.  In <code>add_vertex</code>, using <code>vertices_.emplace_back(info, false);</code> would construct the Vertex directly in the vector and avoid creating a temporary object.</p>

<p>The first <code>for</code> loop in <code>print</code> should use <code>const auto &amp;from_to_pair</code> (like you are with the other range based for loops) to avoid making a copy of all those map elements.</p>

<p>To reduce memory and help with cache usage, and since it is only used internally, consider making <code>visited</code> a separate (private) vector, rather than bundling it with <code>Vertex</code>.  By adding that one <code>bool</code> to <code>Vertex</code> (along with <code>Info</code>) there will probably be 3 or 7 padding bytes added to the struct.  If you put <code>visited</code> in a separate vector you can reclaim that memory, and not even have it allocated when you aren't using it.  You could use <code>std::vector&lt;bool&gt;</code>, which packs all the bools into bits and has some restrictions, or <code>std::vector&lt;char&gt;</code>.  Resize it before you use it, then clear it when you're done.  This would then let you get rid of the <code>unvisit_all</code> method, unless you want to keep it around to resize that new vector properly.  If this vector is declared <code>mutable</code>, then your <code>is_connected</code> and <code>contains_loops</code> could potentially be declared <code>const</code>, which would be the expectation given their names.  Or this new vector could be a local variable in the functions that need it, and passed to the other functions that need it as a parameter, which would be a necessary step (but not the only step) to make the class friendlier for multithreaded use.</p>

<p>And one note on style:  Your use of spaces is a bit atypical.  It is more common to see a space between keyword and paren, and between close paren and the curly bracket, like <code>if (condition) {</code>.  However, you are consistent in your usage which is good.  Also, sometimes you have a blank line between functions and other times you don't.  You could be more consistent in your use of spacing there.</p>
    </div>