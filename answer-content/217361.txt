<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have only questions, but maybe some of these are useful.</p>

<ul>
<li>It is desirable to fail fast and in a predictable manner to improper <code>LINKEDLIST_GENERATE</code> commands, maybe with a comment saying what's wrong.</li>
<li><code>LINKEDLIST_GENERATE_HEADER_PUBLIC</code>, <em>etc</em> is probably too confusing; could it could be simplified? You include <code>FMOD</code>; these defines appear interconnected.</li>
<li><code>owner</code> for every node is potentially wasteful, are you sure you need it? Same thing, <code>count</code>, are you sure you need it? It makes it so much harder to maintain the proper state.</li>
<li>Are you sure that you want to do memory allocation internal to the list? It would be much simpler to hand that over to the user. I see <code>l_new(100)</code>, that contradicts <code>PFX##_new(void)</code>; not sure what's going on there.</li>
<li>Are all of those functions needed? Eg, <code>PFX##_remove_prv, cur, nxt</code>, but the user could easily duplicate pointers.</li>
<li>In your examples, it's possible to have a <code>l_new</code> that's null and crash. I'm not sure whether checking the pre-conditions in each function is better, or the user is required to verify that the list is not null, but I think you should document it.</li>
<li><a href="https://en.wikipedia.org/wiki/Cycle_detection#Floyd's_Tortoise_and_Hare" rel="nofollow noreferrer">Floyd's algorithm</a> provides great cycle-detection with minimal code. Might be useful when you implement <code>splice</code> and <code>concat</code>. Maybe a debug function that checks if it's in a valid state.</li>
</ul>

<p>I think it's a very valid use of the pre-processor to generate repeated code.</p>
    </div>