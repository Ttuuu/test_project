<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a quick comment for now. Unfortunately, <code>except ValueError or TypeError</code> does not do what you think it does. Python tries to be readable English where possible, but here it doesn't quite work. The parser parses this statement as:</p>

<pre><code>except (ValueError or TypeError)
</code></pre>

<p>where the second part follows the rules of the <code>or</code> operator. If the first argument is truthy, return that truthy value, if not return the truthiness of the second argument.</p>

<p>For integers, which are falsey for <code>0</code> and truthy otherwise, this means:</p>

<pre><code>1 or 2 -&gt; 1
0 or 2 -&gt; 2
0 or 0 -&gt; 0
</code></pre>

<p>In addition, by default all objects are truthy if they exist (unless overwritten by the class itself). Since <code>ValueError</code> exists, it is parsed like this:</p>

<pre><code>except (ValueError or TypeError) -&gt; except ValueError
</code></pre>

<p>In other words, this cannot actually catch a <code>TypeError</code>:</p>

<pre><code>try:
    raise TypeError
except ValueError or TypeError:
    print("caught!")
# TypeError: ...
</code></pre>

<p>Instead, use a tuple for multiple exceptions to be caught by the same <code>except</code> statement:</p>

<pre><code>try:
    raise TypeError
except (ValueError, TypeError):
    print("caught!")
# caught!
</code></pre>

<p>Be careful not to use the tuple without parenthesis, which meant something else in Python 2 and is a <code>SyntaxError</code> in Python 3:</p>

<pre><code>try:
    raise TypeError
except ValueError, TypeError:
    print("caught!")
# Python 2: TypeError: ...
# Python 3: SyntaxError: ...
</code></pre>

<p>was the same as</p>

<pre><code>try:
    raise TypeError
except ValueError as TypeError:
    print("caught!")
# TypeError: ...
</code></pre>

<p>In other words, it overwrites the variable <code>TypeError</code> with the specific caught <code>ValueError</code>, which is not the exception being raised here.</p>
    </div>