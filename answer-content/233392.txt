<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Consolidation and unified conditionals</em></h3>

<ul>
<li><p>the primary difference <code>dir_2 - dir_1</code> occurs twice in the initial approach: once at the 1st assignment and another time - in the last <code>if</code> condition. <br>Thus, <em>Extract variable</em> technique can be applied to avoid repetition:</p>

<pre><code>prime_diff = final_diff = dir_2 - dir_1
</code></pre>

<p>where <code>prime_diff</code> is the primary/initial difference and the <code>final_diff</code> is <em>derivative</em> final difference that may or may not be modified due to further conditions</p></li>
<li><p>the 1st condition <code>if diff &gt; 180</code> and last sub-check <code>(dir_2 - dir_1 &gt; 180)</code> are essentially the same expression, thus, can beforehand be extracted into a variable to avoid repetition:</p>

<pre><code>gt180 = prime_diff &gt; 180    # greater than 180 (gt)
</code></pre></li>
<li><p>the crucial <code>if ... elif</code> conditional containing 2 statements can be unified to a single <code>or</code> conditional with 1 consolidated statement:</p>

<pre><code>if gt180 or prime_diff &lt; -180: 
</code></pre></li>
<li><p>the 1st sub-check <code>dir_2 &gt; dir_1</code> in the last conditional <code>if dir_2 &gt; dir_1 and (dir_2 - dir_1 &gt; 180):</code> is redundant because <code>dir_2 - dir_1 &gt; 180</code> will be <strong><code>True</code></strong> only when <code>dir_2</code> is greater than <code>dir_1</code> in any way.</p></li>
</ul>

<hr>

<p>The final <strong><code>get_wind_dir_difd</code></strong> function is simplified to the following:</p>

<pre><code>def get_wind_dir_difd(dir_1, dir_2):
    """
    Figures out the shortest way to get from dir_1 to dir_2. Positive nunber go clockwise, negative numbers go counter clockwise.
    NOTE: The direction 0 and 360 are the same.
    :param dir_1: int. The direction of the first wind.
    :param dir_2: The direction of the second wind.
    :return: int. The what to add (can be a negative number too) to the first wind dir to get to the second wind dir.
    """
    prime_diff = final_diff = dir_2 - dir_1
    gt180 = prime_diff &gt; 180    # greater than 180 (gt)

    if gt180 or prime_diff &lt; -180:
        final_diff = 360 - abs(prime_diff)
        if gt180:
            final_diff = -final_diff

    return final_diff
</code></pre>

<hr>

<p>Test results:</p>

<pre><code>    val1  val2  diff  what_diff_should_be  bad_answer 
0    120    30   -90                  -90             
1    340    20    40                   40             
2     20   340   -40                  -40             
3    310    10    60                   60             
4     10   310   -60                  -60             
5      0   300   -60                  -60             
6    300     0    60                   60             
7    190   180   -10                  -10             
8    180   190    10                   10             
9    200   220    20                   20             
10   220   200   -20                  -20             
11    10   190   180                  180             
12   360     0     0                    0             
13     0   360     0                    0             
14   340    20    40                   40             
15   350     0    10                   10             
16   350   360    10                   10             
17    40   360   -40                  -40             
18   180     0  -180                 -180             
19     0   180   180                  180        
</code></pre>
    </div>