<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your answer is a big step up from your original code but we can do better.</p>

<p><code>Dimension2 = 1</code> does no do anything.  <code>Dimension2</code> is being initiated in the <code>For</code> loop.</p>

<h2>Selecting and Activating Objects</h2>

<p>It is rarely necessary to Select or Activate an Object. You should to fully qualify your Objects rather than it is to rely on the default active objects.  Fully qualifying references will make your code more robust and easier to debug.   </p>

<blockquote>
<pre><code>Sheet22.Visible = True
Sheet22.Activate
</code></pre>
</blockquote>

<p>Above you are temporarily making Sheet22 visible and active when all you need to do is qualify the range.</p>

<blockquote>
<pre><code>For Dimension1 = LBound(MpnQty, 1) To UBound(MpnQty, 1)
    For Dimension2 = LBound(MpnQty, 2) To UBound(MpnQty, 2)
        Sheet22.Range("A2").Offset(Dimension1, Dimension2).Value = MpnQty(Dimension1, Dimension2)
    Next Dimension2
Next Dimension
</code></pre>
</blockquote>

<p>Consider using a temp variable to shorten the worksheet reference.</p>

<blockquote>
<pre><code>Dim ws1 as Worksheet
Set ws = Sheet1
Dimension1 = ws1.Range("A2", ws1.Range("A2").End(xlDown)).Count - 1
</code></pre>
</blockquote>

<p>I prefer to use <code>With Blocks</code></p>

<blockquote>
<pre><code>With Sheet1 
    Dimension1 = .Range("A2", .Range("A2").End(xlDown)).Count - 1
End With
</code></pre>
</blockquote>

<p>Note: I omitted <code>Cells</code> because it is the default property of <code>Range</code>.</p>

<h2>Ranges and Arrays</h2>

<p><code>Range("A2").Value</code> returns a single scalar value because it contains only one cell.  <code>Range("A2:B2").Value</code> is a multiple cell range which returns an array of values that can be directly assigned to a variant variable or another range.</p>

<p>There are several nuances to resizing ranges, assigning ranges values to variants and assigning arrays to ranges.  So practice!!  </p>

<h2>Refactored Code</h2>

<p>Here is how I would write it:</p>

<pre><code>Dim Data() As Variant

With Sheet1
    Data = .Range("A2:B2", .Range("A2").End(xlDown)).Value
End With

With Sheet22
    Data = .Range("A2:B2").Resize(UBound(Data), UBound(Data, 2)).Value = Data
End With
</code></pre>
    </div>