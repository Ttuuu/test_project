<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Review covers only minor stuff.</p>

<p><strong>getline()</strong></p>

<p>Avoid a technical exploit when size == 0.  Although this code passes sizes more than 0, the function is hackable with size == 0.</p>

<p>When <code>sz == 0</code>, as type <code>size_t</code>, <code>sz-1</code> is a huge value.  Simply + 1 on the left-hand side instead.</p>

<pre><code>// while (i &lt; sz-1 &amp;&amp; el == false)
while (i + 1 &lt; sz &amp;&amp; el == false)
</code></pre>

<p><strong>Advanced: getline()</strong></p>

<p>When a rare reading error occurs, <code>getchar()</code> returns <code>EOF</code>.  Standard functions like <code>fgets()</code> return <code>NULL</code> even if some characters were successfully read prior to the error.  This differs from OP's <code>getline()</code> functionality.  Since <code>getline()</code> uses a return of 0 to indicate end-of-file (and no data read), a parallel functionality to <code>fgets()</code> would also return 0 when an input error occurs (even if some good data read prior).  </p>

<p>Easy, yet pedantic, change suggested:</p>

<pre><code>if (i &lt; sz) {
    // add if
    if (c == EOF &amp;&amp; !feof(stdin)) {  // EOF due to error
      i = 0;
    }
    s[i] = '\0';
}
</code></pre>

<p><strong>Consider <code>const</code></strong></p>

<p>When the source data does not change, using <code>const</code> can make for 1) more clarity in function usage 2) greater applicability as then <code>const char *f;  copy(..., f);</code> is possible.  3) potentially more efficient code. </p>

<pre><code>// void copy(char to[], char from[]);
void copy(char to[], char const from[]);
</code></pre>

<p><strong>Advanced: Consider <code>restrict</code></strong></p>

<p><code>restrict</code>, roughly, implies that the data referenced by pointer only changes due to the code's function without side effects.  Should <code>from/to</code> overlap, <code>copy()</code> as presently coded, can dramatically fail.  <code>restrict</code> informs the caller that <code>to/from</code> should not overlap and thus allows the compiler to perform additional optimizations based on that.</p>

<pre><code>// void copy(char to[], char const from[]);
void copy(char * restrict to, char const * restrict from);
</code></pre>

<p><strong>Inconsistent documentation/function</strong></p>

<p>Code is described as "trim trailing tabs and blanks" yet then trims <code>' '</code>, <code>'\t'</code> and <code>'\n'</code>.  Recommended consistent documentation and function.</p>

<p><strong>Sentinels</strong></p>

<p>When printing string test output, especially ones with white-space removal, use sentinels to help show problems.</p>

<pre><code>// printf("%s", line);
printf("&lt;%s&gt;", line);
</code></pre>

<p><strong><code>bool</code> deserves boolean syntax</strong></p>

<p>Style issue.</p>

<pre><code>// while (i &lt; sz-1 &amp;&amp; el == false) {
while (i &lt; sz-1 &amp;&amp; !el) {
</code></pre>

<hr>

<p>No major issues noted.  Well done.</p>
    </div>