<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is too long for me to review thoroughly, but on a cursory glance (I'll just go go top to bottom):</p>

<ol>
<li><code>#include &lt;iostream&gt;</code> is unneeded</li>
<li>There is no point in calling clear in the destructor. This class should not have any code in the destructor at all. The smart pointers are meant to clean up nicely.</li>
<li>There is no point passing int as a const reference</li>
<li>You are too attached to vectors. It may be fine for the specific task, but for a more library-oriented class this would be a burden. But even if you stick to vectors, having a type alias would help readability and maintanability</li>
<li>Node* find_min_node(const std::unique_ptr&amp; curr_node) const;
It should really be const Node*</li>
<li>BinarySearchTree::BinarySearchTree(const BinarySearchTree&amp; other_tree) {
if (other_tree.tree_size == 0) return;
this constructor does not initialize the fields. Which is quite strange because the default constructor does.</li>
<li><code>std::vector&lt;int&gt;::iterator it_e = values.end() - 1;</code> This is incorrect. If values is empty it will give you an invalid iterator. You check it with &lt; later in the code, but this is not correct C++, you can only compare iterators from the same container, which are [begin, end+1]. It will probably work just because vector iterators are likely to be just numbers, but it can break with any library or compiler update.</li>
<li>min_val will break horribly if the tree is empty</li>
<li>Your insert code suggests that the tree can not contain duplicate values. It is totally fine, but for me it would be unexpected from a class with such a generic name.</li>
</ol>
    </div>