<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>There's a very serious architectural problem with your code. There's essentially no separation of concerns. The logic of the game is intertwined with user interactions and the game configuration. It makes the code:</p>

<ul>
<li><p>essentially untestable. It's impossible to write decent unit-tests for a method if the only visible effect is something being printed to the screen (and, possibly, a change of the internal state of an object).</p></li>
<li><p>hard to modify. You can't change just the logic or just the user interaction part. You'll have to update both.</p></li>
<li><p>very hard to read. Too many things are going on at the same time.</p></li>
</ul></li>
<li><p>You need to separate the logic of the game from all other things. Create a bunch of small, reusable, testable methods. For instance, you need to check if the player can go to a specific room. Good. Make it a method. Name it properly (for instance, <code>can_go(self, direction)</code>). Write unit tests for it. Identify the next small reusable component. Create a method for it. Keep doing it until the code becomes testable and readable. </p></li>
<li><p>One class should have one well-defined responsibility. Your <code>Player</code> class does too much. It stores everything, including the location, items and so on. Move things to where they belong. Create a <code>Location</code> class that stores the current position and processes all movements. Create a <code>Bag</code> class that represents a bag of items and handles all operations for items (like finding a new one or using an existing one). A rule of thumb: you should be able to describe what instances of the class represent without using the word <b>and</b>. The same goes for methods. </p></li>
<li><p>Create separate functions or classes for displaying the information to the user and reading her commands. It has nothing to do with the logic of the game. Keep the concerns separated. </p></li>
<li><p>Using expressions like <code>world[new_room_name].lock is True</code> is a terrible practice. If something is a bool, treat as such. It's just <code>world[new_room_name].lock</code>.</p></li>
<li><p>Get rid of useless comments. They shouldn't tell what the code does. Ideally, the code should be self-documenting. Comments  <code># Removes the item that you picked up from the room</code> or <code># Creates World Dict which stores Rooms</code> are far worse than no comments whatsoever. They're litter. Burn them.</p></li>
<li><p>It would be nice to load the game config (rooms, items and so on) from a file instead of having them hard-coded in your application. It'll make your app more flexible and readable (those long declarations occupy a lot of space and clutter the code). At least move them to a separate <code>.py</code> config file. Don't mix the logic with them.</p></li>
</ol>
    </div>