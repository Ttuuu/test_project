<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Indentation</h1>
<p>The standard indentation style in Ruby is two spaces, not four.</p>
<h1>Single-quoted strings</h1>
<p>If you don't use string interpolation, it is helpful if you use single quotes for your strings. That way, it is immediately obvious that no string interpolation is taking place.</p>
<h1>Frozen string literals</h1>
<p>Immutable data structures and purely functional code are always preferred, unless mutability and side-effects are required for clarity or performance. In Ruby, strings are always mutable, but there is a magic comment you can add to your files (also available as a command-line option for the Ruby engine), which will automatically make all literal strings immutable:</p>
<pre class="lang-rb prettyprint-override"><code># frozen_string_literal: true
</code></pre>
<p>It is generally preferred to add this comment to all your files. In your case, you are only actually mutating one of the many strings in your code, the one assigned to <code>ciphered</code>.</p>
<p>You can make <em>only</em> this string mutable by either not using a literal to initialize it:</p>
<pre class="lang-rb prettyprint-override"><code>ciphered = String.new
</code></pre>
<p>Or by using the <a href="https://ruby-doc.org/core/String.html#method-i-2B-40" rel="nofollow noreferrer">unary prefix <code>String#+@</code> operator for strings</a>, which turns a frozen string into a mutable string:</p>
<pre class="lang-rb prettyprint-override"><code>ciphered = +''
</code></pre>
<h1>Linting</h1>
<p>You should run some sort of linter or static analyzer on your code. <a href="https://www.rubocop.org/" rel="nofollow noreferrer">Rubocop</a> is a popular one, but there are others.</p>
<p>Rubocop was able to detect all of the style violations I pointed out, and also was able to autocorrect all of them. Note, however, that automatically adding the magic comment broke the code originally, because Rubocop does not automatically detect which strings are mutated. So, I had to add the <code>+</code> manually afterwards. That's where good tests come in handy!</p>
<h1>Inconsistent use of parentheses</h1>
<p>Sometimes, you use parentheses around arguments, and sometimes you don't. The general rule is to always use parentheses around arguments <em>if</em> you have arguments, and leave out the parentheses only for "procedure-like" methods such as <code>puts</code>, <code>attr_reader</code>, <code>require</code>, <code>private</code>, etc.</p>
<p>For example, you are using parentheses for <code>split</code> and <code>index</code> but not for <code>include?</code>.</p>
<h1>Constants</h1>
<p>There is no need to re-compute <code>low_alpha</code>, <code>high_alpha</code>, and <code>length_alpha</code> every time you call the method. Their values will always be the same. Therefore, it makes sense to turn them into <em>constants</em> and initialize them at the beginning of the file:</p>
<pre class="lang-rb prettyprint-override"><code>LOW_ALPHA = ('a'..'z').to_a
HIGH_ALPHA = ('A'..'Z').to_a   
LENGTH_ALPHA = LOW_ALPHA.length
</code></pre>
<h1>Object#freeze</h1>
<p><a href="https://ruby-doc.org/core/Object.html#method-i-freeze" rel="nofollow noreferrer"><code>Object#freeze</code></a> is a method that allows you to freeze an object. A frozen object will no longer allow itself to be modified. It is good practice in general to freeze objects that you don't intend to modify, both as a signal to the reader that this object will not be modified, and as a safety net, in case you ever accidentally try to modify it regardless.</p>
<p>We already made all but one of our strings frozen, so let's do that with the arrays as well:</p>
<pre class="lang-rb prettyprint-override"><code>LOW_ALPHA = ('a'..'z').to_a.freeze
HIGH_ALPHA = ('A'..'Z').to_a.freeze
LENGTH_ALPHA = LOW_ALPHA.length
</code></pre>
<p>Numbers are immutable anyway, no need to freeze them.</p>
<h1><code>length</code> vs. <code>size</code></h1>
<p>Many Ruby collections have both <code>length</code> and <code>size</code> methods, but some have only one. In general, <em>IFF</em> a collection has a <code>size</code> method, then that method is guaranteed to be "efficient" (usually constant time), whereas <code>length</code> may or may not be efficient (linear time for iterating through the collection and counting all the elements), depending on the collection.</p>
<p>In your case, you are using an array, for which both are constant time, but if you want to guarantee efficiency, then it is better to explicitly use <code>size</code> instead.</p>
<h1><code>String#chars</code></h1>
<p>Instead of using <a href="https://ruby-doc.org/core/String.html#method-i-split" rel="nofollow noreferrer"><code>String#split</code></a>, you can use <a href="https://ruby-doc.org/core/String.html#method-i-chars" rel="nofollow noreferrer"><code>String#chars</code></a> to create an array of characters:</p>
<pre class="lang-rb prettyprint-override"><code>chars = str.chars
</code></pre>
<h1><code>String#each_char</code></h1>
<p>Actually, you don't need the array of characters at all. Instead, you can use the <a href="https://ruby-doc.org/core/String.html#method-i-each_char" rel="nofollow noreferrer"><code>String#each_char</code></a> iterator directly:</p>
<pre class="lang-rb prettyprint-override"><code>str.each_char do |char|
</code></pre>
<h1>The conditional expression is â€¦ an expression</h1>
<p>In Ruby, the <em>conditional expression</em> <code>if</code> / <code>else</code> is an <em>expression</em>, not a statement. (In fact, everything in Ruby is an expression, there are no statements.) Therefore, the conditional expression evaluates to a value, it evaluates to the value of the branch that was taken.</p>
<p>This means you can remove the duplicated <code>ciphered &lt;&lt; X</code> from each branch, and instead pull it out of the conditional expression:</p>
<pre class="lang-rb prettyprint-override"><code>ciphered &lt;&lt; if LOW_ALPHA.include?(char)
              i = LOW_ALPHA.index(char)
              shifted = (i + shift) % LENGTH_ALPHA

              LOW_ALPHA[shifted]
            elsif HIGH_ALPHA.include?(char)
              i = HIGH_ALPHA.index(char)
              shifted = (i + shift) % LENGTH_ALPHA

              HIGH_ALPHA[shifted]
            else
              char
            end
</code></pre>
<h1>Code duplication</h1>
<p>Speaking of duplicated code: Your <code>then</code> branch and your <code>elsif</code> branch are virtually identical. We can simplify them by extracting the duplicated code into a method:</p>
<pre class="lang-rb prettyprint-override"><code>def encrypt_letter(char, alphabet, shift)
  i = alphabet.index(char)
  shifted = (i + shift) % LENGTH_ALPHA

  alphabet[shifted]
end
</code></pre>
<p>and then using this method in the two branches instead:</p>
<pre class="lang-rb prettyprint-override"><code>ciphered &lt;&lt; if LOW_ALPHA.include?(char)
              encrypt_letter(char, LOW_ALPHA, shift)
            elsif HIGH_ALPHA.include?(char)
              encrypt_letter(char, HIGH_ALPHA, shift)
            else
              char
            end
</code></pre>
<h1>Higher-level iterators</h1>
<p>Ruby has many powerful iteration methods in its collections library. Using <code>each</code> (or in this case <code>each_char</code>) directly is almost always sub-optimal. This particular pattern that you are using:</p>
<ul>
<li>Initialize an accumulator. (In this case the string assigned to <code>ciphered</code>.)</li>
<li>Iterate over the collection and add to the accumulator.</li>
<li>Return the accumulator.</li>
</ul>
<p>Is known as a <a href="https://wikipedia.org/wiki/Fold_(higher-order_function)" rel="nofollow noreferrer"><em>Fold</em></a>, and is available in Ruby in two forms, <a href="https://ruby-doc.org/core/Enumerable.html#method-i-each_with_object" rel="nofollow noreferrer"><code>Enumerable#each_with_object</code></a> and <a href="https://ruby-doc.org/core/Enumerable.html#method-i-inject" rel="nofollow noreferrer"><code>Enumerable#inject</code></a>. Using <code>Enumerable#each_with_object</code>, we can further simplify your code to:</p>
<pre class="lang-rb prettyprint-override"><code>def caesar_cipher(str, shift)
  str.each_char.each_with_object(+'') do |char, ciphered|
    ciphered &lt;&lt; if LOW_ALPHA.include?(char)
                  encrypt_letter(char, LOW_ALPHA, shift)
                elsif HIGH_ALPHA.include?(char)
                  encrypt_letter(char, HIGH_ALPHA, shift)
                else
                  char
                end
  end
end
</code></pre>
<h1>The <em>right</em> higher-level iterator!</h1>
<p>But actually, what you are doing here is simply transforming each element of the collection. You don't need something as powerful as a <em>fold</em> for that. This is a much simpler operation called <a href="https://wikipedia.org/wiki/Map_(higher-order_function)" rel="nofollow noreferrer"><em>Map</em></a>, and it is also available in Ruby as <a href="https://ruby-doc.org/core/Enumerable.html#method-i-map" rel="nofollow noreferrer"><code>Enumerable#map</code></a>:</p>
<pre class="lang-rb prettyprint-override"><code>str.each_char.map do |char|
  if LOW_ALPHA.include?(char)
    encrypt_letter(char, LOW_ALPHA, shift)
  elsif HIGH_ALPHA.include?(char)
    encrypt_letter(char, HIGH_ALPHA, shift)
  else
    char
  end
end.join
</code></pre>
<h1>Rubocop, revisited</h1>
<p>I didn't mention this before, but in addition to the style violations I mentioned at the beginning, Rubocop was also complaining about the complexity and the length of the <code>caesar_cipher</code> method. At this point, Rubocop is actually happy with everything!</p>
<p>But we can do better.</p>
<h1>The Algorithm</h1>
<p>What the Caesar Cipher is really doing, is shifting the alphabet. You have recognized this, as can be seen by your variable names (<code>shift</code>), but you are not really taking advantage of it.</p>
<p>What we can do, is take our alphabets, <em>shift them</em>, and then use them for a key-value mapping, i.e. a <a href="https://ruby-doc.org/core/Hash.html" rel="nofollow noreferrer"><code>Hash</code></a>:</p>
<p>Now, our entire code looks like this:</p>
<pre class="lang-rb prettyprint-override"><code>#!/usr/bin/env ruby
# frozen_string_literal: true

LOW_ALPHA = ('a'..'z').to_a.freeze
HIGH_ALPHA = ('A'..'Z').to_a.freeze

def caesar_cipher(str, shift)
  low_encrypted = LOW_ALPHA.rotate(shift)
  high_encrypted = HIGH_ALPHA.rotate(shift)

  character_map =
    Hash.new { |_, k| k }
        .merge((LOW_ALPHA.zip(low_encrypted) + HIGH_ALPHA.zip(high_encrypted)).to_h)
        .freeze

  str.each_char.map(&amp;character_map).join
end
</code></pre>
<p>Okay, there's a lot going on here. We are using <a href="https://ruby-doc.org/core/Array.html#method-i-rotate" rel="nofollow noreferrer"><code>Array#rotate</code></a> to create the shifted character arrays:</p>
<pre class="lang-rb prettyprint-override"><code>LOW_ALPHA.rotate(3)
# =&gt; ["d", "e", "f", â€¦, "a", "b", "c"]
</code></pre>
<p>Then we use <a href="https://ruby-doc.org/core/Array.html#method-i-zip" rel="nofollow noreferrer"><code>Array#zip</code></a> to create an array of pairs with the original character and the encrypted character:</p>
<pre class="lang-rb prettyprint-override"><code>LOW_ALPHA.zip(LOW_ALPHA.rotate(3))
# =&gt; [["a", "d"], ["b", "e"], ["c", "f"], â€¦, ["x", "a"], ["y", "b"], ["z", "c"]]
</code></pre>
<p>With <a href="https://ruby-doc.org/core/Array.html#method-i-2B" rel="nofollow noreferrer"><code>Array#+</code></a> we concatenate the two arrays together, and then call <a href="https://ruby-doc.org/core/Array.html#method-i-to_h" rel="nofollow noreferrer"><code>Array#to_h</code></a>, which turns an arrays of pairs (two-element arrays) into a hash, which looks like this:</p>
<pre class="lang-rb prettyprint-override"><code>{
  'a' =&gt; 'd',
  'b' =&gt; 'e',
  'c' =&gt; 'f',
# â€¦
  'x' =&gt; 'a',
  'y' =&gt; 'b',
  'z' =&gt; 'c',

  'A' =&gt; 'D',
  'B' =&gt; 'E',
  'C' =&gt; 'F',
# â€¦
  'X' =&gt; 'A',
  'Y' =&gt; 'B',
  'Z' =&gt; 'C',
}
</code></pre>
<p>This contains our entire encryption scheme.</p>
<p>We have already created a hash with a default value that will simply return the key for any unknown key (so that, e.g. <code>'!'</code> maps to <code>'!'</code>) and use <a href="https://ruby-doc.org/core/Hash.html#method-i-merge" rel="nofollow noreferrer"><code>Hash#merge</code></a> to merge these two hashes into one.</p>
<p>Last, we call <code>map</code> as before, but now, as our transformation function, we simply pass the hash itself. For that, we use the <code>&amp;</code> operator, which turns a <a href="https://ruby-doc.org/core/Proc.html" rel="nofollow noreferrer"><code>Proc</code></a> into a block. But wait, we don't have a <code>Proc</code>, we have a <code>Hash</code>? Indeed, but <code>Hash</code> implements <a href="https://ruby-doc.org/core/Hash.html#method-i-to_proc" rel="nofollow noreferrer"><code>Hash#to_proc</code></a>, which converts the hash into a proc that is equivalent to using the hash's <a href="https://ruby-doc.org/core/Hash.html#method-i-5B-5D" rel="nofollow noreferrer"><code>Hash#[]</code></a> method.</p>
<h1>The power of strings</h1>
<p>The <a href="https://ruby-doc.org/core/String.html" rel="nofollow noreferrer"><code>String</code></a> class in Ruby is really powerful as well. For example, it has the method <a href="https://ruby-doc.org/core/String.html#method-i-tr" rel="nofollow noreferrer"><code>String#tr</code></a> which does the same thing as the <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/tr.html" rel="nofollow noreferrer">POSIX <code>tr</code> utility</a>, it <em>translates</em> characters in a string. This is really the right method to use for this job:</p>
<pre class="lang-rb prettyprint-override"><code>#!/usr/bin/env ruby
# frozen_string_literal: true

LOW_ALPHA = ('a'..'z')to_a.join.freeze
HIGH_ALPHA = ('A'..'Z')to_a.join.freeze

def caesar_cipher(str, shift)
  low_encrypted = LOW_ALPHA.chars.rotate(shift).join.freeze
  high_encrypted = HIGH_ALPHA.chars.rotate(shift).join.freeze

  str.tr(LOW_ALPHA + HIGH_ALPHA, low_encrypted + high_encrypted)
end
</code></pre>
<h1>Final thoughts</h1>
<p>Lastly, I just want to give you something to think about, without any comments from me:</p>
<pre class="lang-rb prettyprint-override"><code># frozen_string_literal: true

class CaesarCipher
  LOWER = ('a'..'z').to_a.join.freeze
  UPPER = ('A'..'Z').to_a.join.freeze

  def initialize(key)
    self.encrypted = (LOWER.chars.rotate(key) + UPPER.chars.rotate(key)).join.freeze
  end

  def encrypt(str)
    str.tr(LOWER + UPPER, encrypted)
  end

  alias_method :call, :encrypt

  def to_proc
    -&gt;str { encrypt(str) }
  end

  private

  attr_accessor :encrypted

  freeze
end

caesar5 = CaesarCipher.new(5)

puts caesar5.encrypt('What a string!') # Bmfy f xywnsl!
puts caesar5.('Abc') # Fgh
puts CaesarCipher.new(3).('Xyz') # Abc
puts CaesarCipher.new(1).('Test') # Uftu
puts CaesarCipher.new(10).('Zoo') # Jyy

puts ['What a string!', 'Abc'].map(&amp;caesar5)
</code></pre>
    </div>