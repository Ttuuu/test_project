<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wherever you place <code>static</code> will change the behaviour of your program tremendously. In the end, we have <span class="math-container">\$2^3 = 8\$</span> combinations, so let's check some of them. </p>

<p>A <code>random_device</code> may fall back to a pseudorandom engine if no hardware-device for random numbers is available. If you <strong>don't</strong> use <code>static</code> on <code>random_device</code> in this case, all your strings <em>may</em> end up the same, as the pseudorandom engine <em>may</em> get initialized with a implementation defined fixed seed, e.g.</p>

<pre><code> std::random_device a;
 std::random_device b;
 assert(a() == b());  // worst case if no hardware-device or a low-effort implementation is used
</code></pre>

<p>In this case, a <code>mt19937</code> would get seeded with the same value all the time, and we end up with the same string in every call. This changes if either <code>mt19937</code> or <code>random_device</code> is static, and <em>may</em> change if <code>dist</code> is static, as a <code>uniform_int_distribution</code> <em>can</em> use several calls to the generator for its internal state.</p>

<p>Of course, if <code>mt19937</code> is static, you may as well change <code>random_device</code> to a <code>static</code> variant, as it will get evaluated only once. This is the closest your get to a single <code>srand()</code> call at the start of your program. Your <code>uniform_int_distribution</code> still loses its internal state, though.</p>

<p>In the end, it depends on whether we want two <code>generateRandomChar</code> calls to correlate to each other. If they shall not correlate at all, we need to reseed our PRNG with a new non-deterministic number and cannot use <code>static</code> at all.</p>

<p>Or, to put it in another way: if we use <code>static</code> for <em>all</em> three values, then</p>

<pre><code>generateRandomChar(10) + generateRandomChar(10)
</code></pre>

<p>is the same as
    generateRandomChar(20)
If we use <code>static</code> on <code>mt19937</code>, then both <em>may</em> be the same, depending on both <code>_len</code> and <code>dist</code>.</p>

<p>Either way, if you want to have more control over the generation, you can just provide a generator in your function:</p>

<pre><code>template &lt;typename Generator&gt;
std::string generateRandomChar(Generator &amp; gen, const unsigned int _len)
    {
        ...
    }
</code></pre>

<p>Same holds for the distribution.</p>

<hr>

<p>Other than that, I'd use <code>sizeof</code> instead of <code>61</code> to make sure that I don't accidentally change the pool of possible characters without changing the number bounds in <code>dist</code>'s constructor:</p>

<pre><code>static constexpr char alphanum[] = "0123456789"
                                   "abcdefghijklmnopqrstuvwxyz"
                                   "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
std::random_device rd;
std::mt19937 gen(rd());
std::uniform_int_distribution&lt;&gt; dis(0, sizeof(alphanum) - 1);
</code></pre>
    </div>