<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I won't comment on the <code>Json</code> stuff, as it doesn't seem to be the main subject to the question.</p>

<p>I'm not sure, I quite understand where to use this, so if you have a concrete real use case feel free to update the question with it.</p>

<p>You can't for instance use it in a switch like:</p>

<pre><code>  TestEnum te = TestEnum.Analyze;

  switch (te)
  {
    case TestEnum.Analyze:
      Console.WriteLine("Analyze");
      break;
    case TestEnum.Test:
      Console.WriteLine("Test");
      break;
    default:
      break;
  }
</code></pre>

<p>because the-enum properties aren't constant.</p>

<p>You can do:</p>

<pre><code>  TestEnum te = TestEnum.Analyze;

  switch (te)
  {
    case TestEnum t when t == TestEnum.Analyze:
      Console.WriteLine("Analyze");
      break;
    case TestEnum t when t == TestEnum.Test:
      Console.WriteLine("Test");
      break;
    default:
      break;
  }
</code></pre>

<p>but IMO that may be tedious in the long run.</p>

<hr>

<p>The overall impression is, that your cast system is messy. Trying to debug it to find a way for a string or an enum value is confusing, and you (I) easily lose track of the path. IMO you rely too heavily on casting to and from <code>string</code>.</p>

<hr>

<p>Be aware, that this:</p>

<blockquote>
  <p><code>public static TestEnum Analyze { get { return new EnumType&lt;TestEnum&gt;("ANALYZE"); } }</code></p>
</blockquote>

<p>is different than this:</p>

<pre><code>public static TestEnum Analyze { get; } = new EnumType&lt;TestEnum&gt;("ANALYZE");
</code></pre>

<p>Where the first returns a new instance of <code>Analyze</code> for every call, the latter only instantiates one the first time it is called - just like a static (readonly) property or field should behave. Related to that, I think that each "enum"-property should be a singleton, and only instantiated once. You instantiate various instances of each property in the cast methods. I don't like that. Further I think, I would make the constructor of <code>TestEnum</code> private to prevent unauthorized instantiation of invalid enum values. If you make the constructor private, you can't specify <code>T</code> with the constraint <code>new()</code>. But that is OK, if you make each <code>enum</code> value a singleton - only instantiated where defined.</p>

<hr>

<p>As for the initialization of the static enum-properties it goes for <code>All</code>:</p>

<blockquote>
<pre><code>public static IEnumerable&lt;T&gt; All
 =&gt; typeof(T).GetProperties()
   .Where(p =&gt; p.PropertyType == typeof(T))
   .Select(x =&gt; (T)x.GetValue(null, null));
</code></pre>
</blockquote>

<p>where</p>

<pre><code>public static IReadOnlyList&lt;T&gt; All { get; } = 
  typeof(T).GetProperties()
  .Where(p =&gt; p.PropertyType == typeof(T))
  .Select(x =&gt; (T)x.GetValue(null, null))
  .ToList();
</code></pre>

<p>will be much more efficient as reflection is only activated once. Notice that I've changed <code>IEnumerable&lt;T&gt;</code> to <code>IReadOnlyList&lt;T&gt;</code> in order to cache the query. Repeatedly using reflection may be a bottleneck - especially if you have many enum-properties.</p>

<hr>

<p>You can and should narrow down the properties searched for by using <code>BindingFlags</code> in <code>All</code>: </p>

<pre><code>typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Static)...
</code></pre>

<hr>

<blockquote>
<pre><code>    public override bool Equals(object obj)
    {
        try
        {
            if(obj.GetType() == typeof(string))
            {
                return Value == (string)obj;
            }

            return Value == obj as T;
        }
        catch(Exception ex)
        {
            return false;
        }
    }
</code></pre>
</blockquote>

<p>This seems overly complicated and a catch block here is unnecessary:</p>

<pre><code>public override bool Equals(object obj)
{
  if (obj is T other) return ReferenceEquals(this, other) || Value == other.Value;
  return obj is string value &amp;&amp; Value == value;
}
</code></pre>

<hr>

<p>Here:</p>

<blockquote>
<pre><code>    public static implicit operator EnumType&lt;T&gt;(string s)
    {
        if (All.Any(dt =&gt; dt.Value == s))
        {
            return new T { Value = s };
        }
</code></pre>
</blockquote>

<p>I think, I would do:</p>

<pre><code>public static implicit operator EnumType&lt;T&gt;(string s)
{
  if (All.FirstOrDefault(dt =&gt; dt.Value == s) is T e)
  {
    return e;
  }
  else
</code></pre>

<p>In this way, the already created enum is reused. </p>
    </div>