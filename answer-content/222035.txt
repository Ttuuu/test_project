<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a couple of simplifications that could be made:</p>

<p>A feature of <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> that could be used here is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default parameters</a>:</p>

<pre><code>const combine = (cur = '', n = 0) =&gt; {
</code></pre>

<p>Then the first call to that function doesn't need to pass any parameters:</p>

<pre><code>combine();
</code></pre>

<hr>

<p>The arrow function in the imperative approach feels too brief to warrant the need for brackets:</p>

<blockquote>
<pre><code>[...strDigits[digits[n]]].forEach(x =&gt; {
  combine(cur + x, n + 1);
});
</code></pre>
</blockquote>

<p>So that could be shortened to a single line:</p>

<pre><code>[...strDigits[digits[n]]].forEach(x =&gt; combine(cur + x, n + 1));
</code></pre>

<p>But if that is longer than your desired maximum length of a line of code, pull out the arrow function:</p>

<pre><code>const combineNext = x =&gt; combine(cur + x, n + 1);
[...strDigits[digits[n]]].forEach(combineNext);
</code></pre>

<p>Actually, in an <em>imperative</em> solution, I might expect to see a <code>for...of</code> loop, which should be faster:</p>

<pre><code>for (const x of [...strDigits[digits[n]]]) {
  combine(cur + x, n + 1);
}
</code></pre>

<hr>

<p>I considered suggesting that the keys of <code>strDigits</code> be integers instead of string literals, each element in <code>digits</code> would be a string so the types would then be different.</p>
    </div>