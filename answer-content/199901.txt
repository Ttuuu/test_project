<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not really comparing before and after. Without seeing the data that comes in that's a bit hard. Instead I'll focus on the new code.</p>

<p>In general, a lot of your variables could benefit from clearer naming. If you use more than one word for a name, which is good, use underscores <code>_</code> to separate them, like <code>$on_first_name_app</code>. You've already done this in a couple of places. Being consistent is important to make code more readable.</p>

<p>There are also quite a few typos in your variable names and comments. When you fix those, make sure not to fix the typos in the URLs as those have been there before, and you <strong>have to retain existing behavior</strong> when you refactor code.</p>

<ul>
<li><p>regarding <code>$onfirsnameapp</code>:</p>

<p>It's best practice in Perl to declare variables as late as possible. You can move the <code>my $onfirsnameapp</code> down to where you assign it.</p>

<blockquote>
<pre><code>elsif (grep(/(tapp\d{11})/, $set{fromreferer})) 
</code></pre>
  
  <p>{'/greather_ten_digits'}    </p>
</blockquote>

<p>You seem to be using <code>grep</code> for a single scalar regular expression match. <code>$set{fromreferrer}</code> is just a string, not an array, so <code>grep</code> doesn't really make sense. You also don't need the capture group there.</p>

<p>You can shorten this to:</p>

<pre><code>elsif ( $set{fromreferer} =~ m/tapp\d{11}/ ) { '/greather_ten_digits' }
</code></pre>

<p>Similarly in the next one you can also remove the <code>grep</code> and the capture group. In addition, you can use a different delimiter than <code>//</code> with <code>m</code> to get rid of the backslash <code>\</code> escape.</p>

<pre><code>elsif ( $set{fromreferer} =~ m/tapp\d{10}/ ) {
     $1 if $set{fromreferer} =~ m{.:?(tapp\d{10})/?};
}
</code></pre>

<p>This <code>grep</code> thing keeps appearing throughout the code.</p></li>
<li><p><code>my $onafterappurl //= '';</code></p>

<p>The <code>//=</code> assignment is useless. A new lexical variable will always be <code>undef</code> unless you assign it something. If you want it to be an empty string, just say so.</p>

<pre><code>my $onafterappurl = q{};
</code></pre>

<p>I prefer <code>q{}</code> over <code>''</code> because it's clearer that it means an empty string.</p></li>
<li><p><code>%add_sesion</code> (it's <em>session</em> with two s).</p>

<p>I don't understand why this is a dispatch table. None of this is complicated, and each of them are only used once. This is useless and the code could just be written as code at the time where it's called.</p></li>
</ul>

<p>Besides these points, the code is fine. If you pick better names and add some comments as to why things are done, I would like it a lot more though. </p>

<p>When you write comments, try to explain the business logic decisions. The code already clearly shows that a value is assigned an empty string because it's used as a string later. But some of deeply nested decisions where the redirect is issued would really benefit from explaining <em>why</em> this happens.</p>

<p>Finally, when you refactor code, always work with unit tests to be on the safe side. Look at <a href="https://metacpan.org/pod/Plack::Test" rel="nofollow noreferrer">Plack::Test</a> if you haven't to build some tests for this. You can also use a combination of <a href="https://p3rl.org/Test::WWW::Mechanize" rel="nofollow noreferrer">Test::WWW::Mechanize</a> and <a href="https://p3rl.org/LWP::Protocol::PSGI" rel="nofollow noreferrer">LWP::Protocol::PSGI</a> if you feel more comfortable with having a <code>$mech</code> object in your tests.</p>
    </div>