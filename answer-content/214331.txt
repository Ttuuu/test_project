<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The class is not a "business logic layer" class, because it is still deeply rooted in the user interface. You cannot execute the logic of this class without a valid form control, and therefore you need a user interface to execute the logic.</p>

<p>The whole point of a "business logic layer" is to centralize the logic that does not require the user interface into its own collection of classes.</p>

<p>What the <code>MillInsController</code> appears to behave like is a UserControl, which can be used to build a reusable user interface component. This is still a valid pattern, but not as a separate class. Usually a UserControl is created as a pairing of view + controller code that can be embedded within other user controls.</p>

<p>I really don't see much business logic in this class. It runs basic form validations (did you put something in the field) and does basic data conversions from strings to numeric types. Beyond that it calls to a data access layer.</p>

<p>Additional observations:</p>

<ul>
<li><p>The <code>PipeSize</code> variable is declared and initialized, but never used.</p></li>
<li><p>The <code>InitMillForm</code> method could be cleaned up by using a dictionary of values to set the form fields where the key in the dictionary is the year, and the value could be the prefix:</p>

<pre><code>var year = DateTime.Now.Year;
var preferences = new Dictionary&lt;int, string&gt;()
{
    { 2016, "ES" },
    { 2017, "ET" },
    { 2018, "EU" },
    { 2019, "EV" },
    { 2020, "EW" },
    { 2021, "EX" },
    { 2022, "EY" },
    { 2023, "EZ" }
};

millform.Controls["txtPrefEnd"].Text = preferences[year];
millform.Controls["txtPrefStart"].Text = preferences[year];
</code></pre></li>
<li><p><strong>Inconsistent variable naming conventions.</strong> You will see camelCase used for local variables more than PascalCase (e.g. pipeSize instead of PipeSize)</p></li>
<li><p><strong>Stringly typed code.</strong> When inserting a new ... whatever it is that you are inserting (inside the <code>foreach (var pipe in pipes)</code> loop) you are passing a bunch of string arguments. Consider creating a class to represent the thing you are inserting, and using proper data types. For instance, the Diameter should most likely be a <code>decimal</code> instead of a <code>string</code>.</p></li>
<li><p><strong>Needless instantiation of MillInsController.</strong> The <code>InsertMillData</code> method creates a new instance of itself, and then never uses it. This code should be removed. I'm not sure why an instance method of a class would need to create another instance of itself, when it is already able to call instance methods on itself.</p></li>
<li><p><strong>Refactor code in <code>if</code> statements.</strong> Code that checks conditions inside an <code>if</code> statement could be refactored into its own method, and given a proper name so you can come back to this code in 6 months and know that:</p>

<pre><code>if ((pipePrefix + PipeNumberStart).Length &lt; 8 || (pipePrefix + PipeNumberEnd).Length &lt; 8)
</code></pre>

<p>Really means:</p>

<pre><code>if (IsInvalidPipeNumberRange(pipePrefix, PipeNumberStart, PipeNumberEnd))

...

private bool IsInvalidPipeNumberRange(string pipePrefix, string pipeNumberStart, string pipeNumberEnd)
{
    return (pipePrefix + pipeNumberStart).Length &lt; 8
        || (pipePrefix + pipeNumberEnd).Length &lt; 8
}
</code></pre></li>
</ul>
    </div>