<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Design</strong></p>

<ul>
<li>First of all, is there a particular reason why you're not using a <code>StreamReader</code>?</li>
<li>Reading one byte at a time is a bad idea if you care about performance, but if you read multiple bytes at once there's a risk of reading too much, and not all streams support reverting to a previous position. You'll want to read into a buffer for performance sake, but you don't want to throw away what's left in that buffer. That's why <code>StreamReader</code> is a class that wraps a given stream, instead of a static, stateless (extension) method.</li>
<li>Judging by the name and first argument type this looks like a general-purpose, reusable method (reading lines from any kind of stream), but it also contains a few very specific notes (timeout, not authenticated context). If it's meant to be used only in a specific context then I wouldn't make it a public extension method.</li>
<li>Your method returns <code>null</code> when the given stream throws an exception, and it returns an empty string when the end of the stream has been reached. Not only is that inconsistent with the similarly named <code>StreamReader.ReadLine</code> method, it also hides problems from the caller by gobbling up exceptions, and it doesn't let the caller differentiate between an actual empty line and the end of the stream. This behavior isn't documented either (which is especially important for general-purpose reusable methods).</li>
</ul>

<hr>

<p><strong>Performance</strong></p>

<ul>
<li>When it comes to performance, always measure! I ran a few tests against code that's using a <code>StreamReader</code>, and the code you've shown here is quite a bit slower. Reading one byte at a time incurs a lot more call overhead, if not anything else, and it shows.</li>
<li>If you know how much data you need, then it's best to allocate a buffer up-front. However, keep in mind that the number of bytes isn't necessarily equal to the number of characters, depending on encoding and actual string content.</li>
<li>A <code>Queue</code> or <code>List</code> can be more <em>convenient</em> than an array, but they're still using arrays internally, and as you're adding items they'll occasionally need to allocate a larger array to make room for new items, so they're not necessarily more <em>efficient</em>. Also, several <code>Stream</code> and <code>Encoding</code> methods contain overloads that work with arrays and offset/counts, so you're often better off with arrays.</li>
<li>Minor point: writing to a <code>ref</code> variable is slightly slower than writing to a local variable. It's not clear to me why <code>bodySize</code> even needs to be passed by <code>ref</code>?</li>
</ul>

<hr>

<p><strong>Other notes</strong></p>

<ul>
<li>Heslacher already pointed to a thread that shows why regions are considered an anti-pattern. You seem to be using them as comments - so why not just use actual comments instead? However, quite a few of them are just repeating what the code already says, so they're just wasting space. In general, I'd only add comments to explain why code does what it does or how it's meant to be used. What it does should usually be clear from the code itself.</li>
<li><code>bodySize</code> is not a very descriptive name, and not a name I'd expect in a general-purpose method. I'd rename this to something like <code>maxLength</code> or <code>maxLineLength</code>.</li>
<li>Edge-case: if <code>bodySize</code> is more than 0, and if the given stream contains more leading <code>'\n'</code> characters than <code>bodySize</code>, then this method ignores <code>bodySize</code> and returns the first full line after those newline characters, with <code>bodySize</code> ending up being negative.</li>
</ul>
    </div>