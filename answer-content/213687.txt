<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>  // Variable declaration

  int number; // User entered number to digitize
  int power;  // Power to generate divisor
</code></pre>
</blockquote>

<p>So <code>//</code> is a C++ comment that is only available in newer versions of C.  </p>

<p>Declaring variables at the beginning of the block is an old C standard that you don't need in newer versions of C.  The modern standard (in C and most other languages) is to put variable declarations as close to first use as possible.  For <code>number</code>, you're pretty much there.  For <code>power</code>, it could be declared with the  initialization.  </p>

<pre><code>    /* Power to generate divisor */
    int power = getNumLength(number);
</code></pre>

<p>I put the comment on a separate line so as to be more readable and to avoid side scroll (not so much here as in other examples).  </p>

<p>I would have probably have written that </p>

<pre><code>    int digit_count = count_digits(number);
</code></pre>

<p>That's clearer in my opinion and does not require an explanatory comment.  We're counting the number of digits and storing the result in a variable.  We'll know what the variable is later, because we call it <code>digit_count</code>.  </p>

<p>I prefer snake_case, particularly in C.  It relies less on the reader (who may not be a native English speaker) being able to recognize capital letters.  That said, camelCase is quite common.  Which to use is up to you so long as you do so consistently.  </p>

<p>I also changed to a four column indent.  That is more common than two column in code.  The only place that I'd recommend two column is in markup languages like HTML and XML.  They don't have methods, so their indent increases with their complexity.  With code, if you are indenting so much that you are running out of space on the screen, that may be a sign that you should push code into separate functions or methods.  </p>

<h3>An alternate approach</h3>

<blockquote>
<pre><code>  int divisor; // the divisor from power
  int i;  // loop counter

  for(i = power - 1; i &gt;=0; i--)
  {
    divisor = (int)pow(10, i);
    printf("%d  ", number / divisor);
    number = number % divisor;
  }
</code></pre>
</blockquote>

<p>You are using the rather expensive <code>pow</code> function in each iteration of your for loop.  </p>

<p>Consider </p>

<pre><code>    for (int divisor = buildInitialDivisor(number); divisor &gt; 0; divisor /= BASE) {
        printf("%01d  ", number / divisor);
        number %= divisor;
    }
</code></pre>

<p>This declares the loop variable as part of the loop declaration.  </p>

<p>This uses a constant <code>BASE</code> instead of the <a href="https://stackoverflow.com/q/47882/6660678">magic number</a> 10.  This improves readability and makes the program easier to modify.  </p>

<p>I changed from <code>%d</code> to <code>%01d</code>.  Now if you wanted to display, say, two digits at a time, you could change that to <code>%02d</code> and change <code>BASE</code> to 100.  It should zero pad the number so as to always print two digits.  Of course, it would print a single leading digit as two digits too.  That might be undesirable.  You might consider how you could fix that.  </p>

<p>The <code>%=</code> is just a shorter syntax.  Your original line and the revised one will do the exact same thing.  <a href="https://www.tutorialspoint.com/cprogramming/c_assignment_operators.htm" rel="nofollow noreferrer">Assignment operators in C</a>.  </p>

<p>This gets rid of <code>pow</code> and replaces it with a different function and then divides on each iteration.  </p>

<p>This gets rid of your <code>i</code> variable which only tracked the number of iterations.  We can do that directly.  </p>

<p>I prefer to always put the curly brackets on the same line as the code structure.  Either form is fine so long as you are consistent.  But you'll see both as you go, so might as well start recognizing them now.  </p>

<p>This also requires </p>

<pre><code>const int BASE = 10;
</code></pre>

<p>and </p>

<pre><code>int buildInitialDivisor(int number) {
    int divisor = 1;
    while (number / BASE &gt;= divisor) {
        divisor *= BASE;
    }

    return divisor;
}
</code></pre>

<p>But it gets rid of your <code>getNumLength</code> function.  </p>

<h3>Recursion</h3>

<p>You may not have gotten there yet, but when you get to recursion, you might try this problem again.  Recursion often helps when you need to reverse the natural order of output.  This is because you can display while returning from the recursion.  So rather than building the largest divisor first, you can incrementally increase the size of the divisor (or better yet, decrease the number, always using the same divisor).  </p>

<p>You also might try this again after learning <code>sprintf</code> and character arrays.  </p>
    </div>