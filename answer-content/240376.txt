<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some random thoughts here:</p>

<h1>Structure</h1>

<p>It is a bit surprising that I need to include <code>file.tpp</code> to get the definition of templates.  The confusion may be reduced by either making <code>file.h</code> include <code>file.tpp</code>, or renaming <code>file.h</code> to something like <code>file_fwd.h</code>.</p>

<h1>Interface</h1>

<p>Do you really need open and closed states?  The implementation is simpler if the closed state is not supported (i.e., streams open at construction and close at destruction).  Then, you can drop <code>open</code> and <code>close</code>, as well as the <code>fileOpened</code> member.</p>

<p>The public function <code>writeMembers</code> has an <code>std::index_sequence</code> parameter.  I guess keeping it parallel to <code>writeOneMember</code> is cleaner:</p>

<pre><code>template &lt;std::size_t    I, typename F, typename M&gt;
void writeOneMember(F&amp; files, M&amp; members, T const&amp; data);

template &lt;std::size_t... I, typename F, typename M&gt;
void   writeMembers(F&amp; files, M&amp; members, T const&amp; data);
</code></pre>

<p>(Also I don't think you need to pass empty types like <code>std::index_sequence</code> by const reference.)</p>

<h1>Implementation</h1>

<blockquote>
<pre><code>File(std::string&amp;&amp; fileName = "");
File(std::string const&amp;  fileName);
~File();
</code></pre>
</blockquote>

<p>I don't think you need the destructor — it's just <code>{}</code> after all.  The two constructors can also be merged, thanks to <code>std::string</code> supporting move semantics: (I )</p>

<pre><code>File(std::string fileName = {})
    : baseFileName{std::move(fileName)}
{
    open();
}
</code></pre>

<p>I'm surprised that assigning a braced-init-list to a scalar even compiles (<a href="https://wandbox.org/permlink/TEtMCu6h2N99bNMu" rel="nofollow noreferrer">I can't get that to compile</a>).  Anyway, you don't need them — fold expressions are simpler:</p>

<pre><code>(expression, ...);
</code></pre>

<p>Also, the capture of many lambdas may be simplified to just <code>[&amp;]</code> (unless you really want to be explicit; I wouldn't for immediately invoked lambdas like this).</p>
    </div>