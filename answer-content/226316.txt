<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can decide between to structural design patterns:</p>

<ul>
<li><a href="https://www.oodesign.com/template-method-pattern.html" rel="nofollow noreferrer">Template Method Pattern</a></li>
<li><a href="https://www.oodesign.com/strategy-pattern.html" rel="nofollow noreferrer">Strategy Pattern</a></li>
</ul>

<p>I would go with the Template Method Pattern because you do not reuse the algorithm which is a benefit of the Strategy Pattern.</p>

<p>In the first step we need to create an abstract class which has all the common code and a invocation of an abstract method where the algorithms distinguish. </p>

<pre class="lang-java prettyprint-override"><code>abstract class PersistentAction {

    private final Connection connection;
    private final String username;
    private final String password;

    PersistentAction(Connection connection, String username, String password) { /* ... */ }

    final boolean execute(String query) {
        try(PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, credential.getUsername());
            statement.setString(2, credential.getPassword());
            ResultSet result = statement.executeQuery();
            return evaluate(result);
        } catch(SQLException e) {
            return false;
        }
    }

    abstract boolean evaluate(Result result);
}
</code></pre>

<p>After that we can create our algorithms which extends from our abstract class and implement the abstract method.</p>

<pre class="lang-java prettyprint-override"><code>class HasNextEvaluation extends PersistentAction {

    @Override
    protected boolean evaluate(ResultSet result) {
        return result.next();
    }

}

class ConstantTrue extends PersistentAction {

    @Override
    protected boolean evaluate(ResultSet result) {
        return true;
    }

}
</code></pre>

<p>After the two steps we can achieve the following:</p>

<pre class="lang-java prettyprint-override"><code>public class DatabaseHandler {

    private static final Connection connection = createConenction();

    public static boolean checkLogin(String username, String password) {
        String query = "select * from users where username = ? and password = ? ";

        PersistentAction action = new HasNextEvaluation(connection, username, password);
        return action.execute(query);
    }

    public static boolean registerUser(String username, String password) {
        String query = "select * from users where username = ? and password = ? ";

        PersistentAction action = new ConstantTrue(connection, username, password);
        return action.execute(query);
    }
}
</code></pre>

<p>From here I would improve the parameter list <code>checkLogin(String username, String password)</code> by using an <a href="https://refactoring.guru/introduce-parameter-object" rel="nofollow noreferrer">Paramter Object</a>.</p>

<pre class="lang-java prettyprint-override"><code>public static boolean checkLogin(Credential credential) {
    /* ... */
}
</code></pre>

<p>There are two benefits that are in my mind. The first is the short parameter list and the second one is that you could have multiple types of credentials:</p>

<ul>
<li>username and password</li>
<li>email and password</li>
<li>mobile number</li>
<li>(even with biometrics ðŸ‘€) </li>
</ul>
    </div>