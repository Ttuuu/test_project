<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is nothing I can test here, so I will only make a couple superficial remarks.</p>
<p>You do not offer a lot of insight into your application. If you say you have a problem with overlapping queries, then you should address the root of the problem. I have the impression that you simply devised a <strong>workaround</strong>. It may do the job but at the expense of performance or reliability. It could also create more problems.</p>
<h1>Repetition</h1>
<p>What is immediately apparent is that you have a hardcoded path repeated multiple times across your code.
At the top of your code you should define a variable for '/root/progress_data'. Then if you decide to change the file name or path you will have only one line to change.</p>
<p>But Python has a library for <strong>temp files</strong>: <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">https://docs.python.org/3/library/tempfile.html</a>. This is what you should be using.</p>
<p>The date format <code>"%Y-%m-%d"</code> could be made a variable too.</p>
<h1>Security</h1>
<p>Does your program really need to run as root ?</p>
<h1>Maximize your try/catch/finally blocks</h1>
<p>You repeat this twice:</p>
<pre><code>os.remove(f'/root/progress_data/{progress_hash}')
</code></pre>
<p>To ensure that the file gets removed at the end of the process you could place this line of code in a <strong>finally</strong> block.</p>
<p>Same goes for the return value:</p>
<pre><code>return json_response({
    "success": False,
    'result': "Error while generating report",
})

return json_response({
    "success": True,
    'data': report,
})
</code></pre>
<p>Keep only one return but use variables for the response depending on the outcome of the execution.</p>
<p>Thus your code will be shorter, more straightforward and easier to comprehend. But I still think the idea is wrong.</p>
<p>I would probably use a database instead of temp files. It can be a small self-contained DB file like SQLite. You need a simple table with details of the job, some kind of unique identifier and a column to update the status of the job. Then your API can query the table and say "ready" when the column has been to updated to the finished status.</p>
<p>This looks clumsy to me. I would ditch the idea and go back to the drawing board. If you are stuck my suggestion would be to post on Stack Overflow for guidance but add more context to your question, explain how the API is used, what your constraints are.</p>
    </div>