<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When I feel a design is overcomplicated (read: "big objects/functions"), I take a step back and think about the concerns. You have multiple objects and files, so which one should you start with? I always try to start from the top – the largest thing, the thing highest in the call stack, and/or the thing closest to the user – this approach reduces (or at least highlights) complexity faster than starting from the bottom up. This would be your component.</p>

<p>Here's all the things your component does:</p>

<ul>
<li>Use the factory to get data</li>
<li>Use additional switch statements based on the type of things returned from ListItemFactory to do not much</li>
<li>Render a list given a set of (ideally) interchangeable items.</li>
</ul>

<p>The multiple switch statements with the same cases are a smell, and in this case it looks like you've built your component to use concrete types, when it should be using some shared interface (abstract type). This is the whole reason for using factories and duck-typed objects (aka <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">Liskov substitution principle</a>, the L in <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID</a>). You shouldn't have to worry about the concrete type, only that everything shares the same behavior – in this case these things must all return state that's compatible with ListMarqueeSelection's <em>items</em> prop: IListItem, INewsListItem, IAnnouncementListItem, IDirectoryListItem. Use TypeScript to enforce that if you want, but omit mentions of the concrete classes in your component.</p>

<p>To explain more fully, if you're using a factory, you shouldn't see any references to the underlying object types (e.g. IListItem) after calling the factory; otherwise, you're going to have to update the component anytime you want to add a new object type, and this is a violation of the <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" rel="nofollow noreferrer">Open-closed principle</a> (the O in SOLID). You should be able to add new types of lists without modifying the component – only the factory. In your case, it's probably as simple as just removing the switch statement, and storing <em>items</em> with setState(). Here I feel like TypeScript is working against you, and if you omit the type casting, your code gets cleaner.</p>

<p>I would write your component to look more like this:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>import listFactory from 'wherever';

const MarqueeThing = ({ items }) =&gt; (
  &lt;ul&gt;
    {items.map(item =&gt; (&lt;li&gt;{item.text}&lt;/li&gt;))}
  &lt;/ul&gt;
);

class List extends Component {
  constructor(props) {
    super(props);
    this.state = { items: [] }
  }
  
  componentDidMount() {
    const listFetcher = listFactory(this.props.listType)
    listFetcher.fetch().then(items =&gt; this.setState({ items });
  }
  
  render() {
    if (!this.state.items.length) {
      return 'Loading...';
    }
    
    return (&lt;MarqueeThing items={this.state.items} /&gt;);
  }
}</code></pre>
</div>
</div>


<p>On to the factory – here's all the things your ListItemFactory does:</p>

<ul>
<li>Select what kind of thing to return (the switch-statement)</li>
<li>Fetch data</li>
<li>Transform data</li>
</ul>

<p>Factories typically just do the first thing – they may or may not actually instantiate classes (often they just return the class type), and they certainly don't have intimate details about the construction of the things they return.</p>

<p>I would start by moving the code in each switch statement to a separate object (you already have these – IListItem, INewsListItem, IAnnouncementListItem, IDirectoryListItem). After doing so, the factory can just return the object type, and the switch statement can simply be replaced with a dictionary. The component that uses the factory's returned object type can then instantiate/invoke.</p>

<p>I would rewrite your factory to look more like this:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>import newsItemFetcher from 'wherever';
import directoryItemsFetcher from 'wherever';

export default (listType) =&gt; {
  const lookup = {
    'News': newsItemsFetcher,
    'Directory': directoryItemsFetcher,
    // ...
  }
  return lookup[listType];
}</code></pre>
</div>
</div>


<p>Then, you just need to make sure each of the items returned from the factory has a <em>.fetch()</em> that returns a Promise.</p>

<p>Finally, on to the concrete objects returned from the factory. At this point, these are data providers masquerading as models. They're functions and transformations, and they return data in the same format, but it's the transformation that's important, not the data. This is a common problem people have with OOP - they focus too much on the object's properties, and not enough on the messages (function calls / behavior). Alan Kay, the guy that coined the term OOP regrets the name for this reason.</p>

<p>With that in mind, I would update all of your I*Item things to simply be a function that returns a promise, and this is the code that's in the factory's switch statement. Then, you could remove the <em>.fetch()</em> in the component, and simply do:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const fetch = listFetcherFactory(this.props.listType);
fetch().then(items =&gt; this.setState({ items });</code></pre>
</div>
</div>


<p>Please excuse my rough code - if you need clarification, please ask.</p>
    </div>