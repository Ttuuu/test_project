<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For me, the problem starts with the nested loops showing no specification of <em>what is to be achieved</em>, not even a suggested abstraction (being the body of a function given a <em>name</em>).  </p>

<p>Observations:</p>

<ul>
<li>the output does seem to depend on the order of elements of <code>lista</code><br>
(even beyond its order: <code>lista[3][i-1]</code>)<br>
• hope <code>lista[2][i] &gt;= listc[1][j]</code> is never True for <code>i</code> 0<br>
 (unless you <em>want</em> <code>lista[3][-1]</code> accessed)</li>
<li>the output does <em>not</em> seem to depend on the order of elements of <code>listc</code>  </li>
<li>both <code>lista</code> and <code>listc</code> are not changed<br>
→ the "range conditions" won't change unless at least one index changes  </li>
<li>all of "the increments" share the condition <code>lista[0][i] == listc[0][j]</code></li>
<li>the conditions between <code>lista[6/7][i]</code> and <code>listc[1][j]</code> are <em>not</em> complementary for including equality in both cases

<ul>
<li>implying <code>red</code>/<code>green</code> possibly getting incremented twice in a single iteration (not using <code>else</code>)</li>
</ul></li>
</ul>

<p>idea:  </p>

<ul>
<li>document, in the code, what is to be achieved<br>
Python supports this with <a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="noreferrer">docstrings</a></li>
<li>use telling names</li>
<li>have a tool help you sticking to <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="noreferrer">The Python Style Guide</a></li>
<li>order <code>listc</code></li>
<li>for each <code>i</code>, iterate only that part of the ordered <code>listc</code> where <code>lista[0][i] == listc[0][j]</code></li>
<li>ignore if <code>lista</code> and <code>listc</code> are not "rectangular":</li>
</ul>

<p>food for thought: untested result of refactoring (get tool support for such, too)<br>
(here extracting local variables, mostly)</p>

<pre><code>list_c = sorted(listc)
for i in range(len(lista[1])):
    red = green = black = 0
    a0i = lista[0][i]
    first = bisect_left(list_c[1], a0i)
    beyond = bisect_right(list_c[1], a0i, first)
    if first &lt; beyond:
        a2i = lista[2][i]
        a3i = lista[3][i]
        c2i = list_c[2][i]
        a8i_intended = lista[8][i] == 'intended value'
        for j in range(first, beyond):
            c1j = list_c[1][j]
            if (c1j &lt;= a3i or c1j &gt;= a2i):
                if lista[7][i] &gt;= c1j and lista[6][i] &lt;= c1j and a8i_intended:
                    red += c2i
                if a3i &gt;= c1j and lista[7][i] &lt;= c1j and not a8i_intended:
                    red += c2i
                if lista[6][i] &gt;= c1j and a2i &lt;= c1j and a8i_intended:
                    green += c2i
                if lista[7][i] &gt;= c1j and a2i &lt;= c1j and not a8i_intended:
                    green += c2i
                if a2i &gt;= c1j and lista[3][i - 1] &lt;= c1j:
                    black += c2i
    toc = timeit.default_timer()
    if i % 100 == 0:
        print('processing algorithm: {}'.format(toc - tic))
        print('we are at row {}'.format(i))
    output[0].append(lista[1][i])
    output[1].append(red)
    output[2].append(green)
    output[3].append(black)
</code></pre>

<p>afterthought:  it may be better to handle <code>listc[1][j] &lt;= lista[3][i]</code> and <code>lista[2][i] &lt;= listc[1][j]</code> separately</p>
    </div>