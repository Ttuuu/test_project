<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've got a random string inside your function, it is unhelpful, you should remove that. If, however, you meant to make a comment, you should have used the comment sign (<code>#</code>).</p>

<p>For the existence of methods, combining <code>dir</code> and <code>if .. in</code> is inneficient as lists lookups are \$\mathcal{O}(n)\$ but attribute access is usually done through an instance's <code>__dict__</code>. You have two possibilities: either you execute it nonetheless and handle the <code>AttributeError</code> if it didn't exist, or use the <code>getattr</code> function to retrieve the method and then you execute it. The advantages of the latter being that:</p>

<ol>
<li>You can easily encapsulate that behaviour in a function;</li>
<li>You can use the third parameter of <code>getattr</code> to provide a default value in case the attribute doesn't exist.</li>
</ol>

<p>Something like this should be very generic, remove functionalities as you don't need them:</p>

<pre><code>def do_nothing(*args, **kwargs):
    pass

def execute_method(name, instance, *args, **kwargs):
    method = getattr(name, instance, do_nothing)
    return method(*args, **kwargs)
</code></pre>

<p>Going through the rest of the code, you may also allow to pass the names of the files as parameters.</p>

<p>Proposed improvements look like:</p>

<pre><code>FILES_TYPES = [
    RubricaManager,
    RectifiedRubricaManager,
    RectificationSpreadsheetManager,
    GPSManager,
]
METHODS = [
    'load_data',
    'spreadsheet_to_array',
    'headers_array',
    'get_used_indexes',
    'remove_duplicity_by_timestamp',
    'array_to_dictionary',
]


def do_nothing(*args, **kwargs):
    pass


def execute_method(name, instance, *args, **kwargs):
    method = getattr(name, instance, do_nothing)
    return method(*args, **kwargs)


def main(filenames=('File1.xlsx', 'File2.xlsx', 'File3.xlsx', 'File4.xlsx')):
    for filename, cls in zip(filenames, FILES_TYPES):
        spreadsheet = cls(filename)
        for method_name in METHODS:
            execute_method(method_name, speadsheet)
</code></pre>
    </div>