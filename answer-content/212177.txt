<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall this is a lot of procedural code to process. That is fine to use but I would suggest you look into an MVC structure, or at least OOP - abstracting bits of code into controller methods and other functions or static methods that can be called by these pages, as well as tested by unit tests. I know that might be a lot to expect from a beginner but it is worth learning about and utilizing. </p>

<p>The code already uses <a href="http://php.net/require" rel="nofollow noreferrer"><code>require</code></a> for <code>mail.php</code>. I would suggest abstracting the repeated function <code>random_str()</code> into a single file,  along with any other common functions, and then using <code>require</code> to include it wherever necessary, which would be inline with the <a href="https://deviq.com/don-t-repeat-yourself/" rel="nofollow noreferrer"><em><strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself</em> principle</a>. That way any updates to the function can be done in one spot instead of multiple. If you use OOP/MVC techniques as recommended above, that function could be static method of a class - e.g. <code>Authentication</code>, <code>AuthenticationController</code>, <code>Registration</code>, <code>RegistrationController</code>, etc.</p>

<p>Also, those variables listed at the top of <em>registration.php</em> which do not change can be stored as constants - either with <a href="http://php.net/define" rel="nofollow noreferrer"><code>define()</code></a> or the <a href="http://php.net/const" rel="nofollow noreferrer"><code>const</code></a> keyword - especially the latter if there is an appropriate class created to associate those with. And a common convention for constants is for them to be named using all capitalized letters. While this is not a requirement, many believe it helps when reading the code to distinguish constants from other values.</p>

<p>The sequential queries in <em>registration.php</em> i.e. <code>"SELECT * FROM acc WHERE serial=?"</code> and <code>"SELECT verify FROM acc WHERE serial=?"</code> make me wonder if <code>serial</code> is a primary/foreign key of one or both of those tables, and if those two queries could be combined into a single query where the tables are <code>JOIN</code>ed one those fields.</p>

<p>It would be a good habit to use the <a href="http://php.net/manual/en/language.operators.comparison.php" rel="nofollow noreferrer">Identical comparison operator</a> (i.e. <code>===</code>) where appropriate instead of the Equal comparison operator (i.e. <code>==</code>) unless you are sure that type-juggling is fine for your use case. And the same is true for the Not Identical Operator (i.e. <code>!==</code>) vs Not equal (i.e. <code>!=</code> or <code>&lt;&gt;</code>).</p>
    </div>