<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of tiny tidbits:</p>

<ol>
<li><p>You could easily make <code>Token</code> immutable (removing the property setters) by passing <code>type</code> and <code>index</code> into the constructor as such:</p>

<pre><code>public Token((bool Success, string Token, int Length) match, TToken type, int index)
{
    (bool success, string token, int length) = match;
    this.Length = success ? length : 0;
    this.Text = success ? token : string.Empty;
    this.Type = type;
    this.Index = index;
}
</code></pre></li>
</ol>

<p>then you just have to adjust <code>Consume</code> in the <code>State</code> class like so:</p>

<pre><code>public Token&lt;TToken&gt; Consume(string value, int offset)
{
    return new Token&lt;TToken&gt;(_match(value, offset), Token, offset);
}
</code></pre>

<ol start="2">
<li><code>Token</code> and <code>State</code> are, in my opinion, screaming to have their own interfaces:</li>
</ol>

<pre><code>    public interface IState&lt;TToken&gt; where TToken : Enum
    {
        bool IsToken { get; }

        TToken Token { get; }

        IEnumerable&lt;TToken&gt; Next { get; }

        IToken&lt;TToken&gt; Consume(string value, int offset);
    }

    public interface IToken&lt;TToken&gt; where TToken : Enum
    {
        int Length { get; }

        string Text { get; }
    }
</code></pre>

<p>(adjust accordingly in the bunch of places they're used)</p>
    </div>