<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know this is a code review and I should improve the code rather than write a new one, I'd like to share with you how I would have done it.</p>

<pre><code>def longest_matching_word(s, d):
    def is_valid(word, s=s):
        if not word and not s:
            return True
        if not s and word:
            return False
        if word and word[0]==s[0]:
            return is_valid(word[1:], s[1:])
        return is_valid(word, s[1:])
    return max(filter(is_valid, d), key=len)
</code></pre>

<pre><code>S = "abppplee" 
D = {"ale", "bale", "able", "apple", "kangaroo"}

longest_matching_word(S, D) # -&gt; 'apple'
</code></pre>

<p>In the way it's done, it's easier to debug and maintain (no state or variable, so less things that can go wrong). </p>

<p>Thanks to the lazy <code>filter</code> object, for large sets, it will use nearly no memory at all.</p>

<p>The complexity is <code>O(n)</code>. One interesting things for large sets is that <code>multiprocessing.map</code> can be applied to more efficiently use the computer's resources.</p>

<p>And if you think about it, it's not that complicated to understand:</p>

<p><a href="https://i.stack.imgur.com/y7sUf.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/y7sUf.gif" alt="Visualisation of the algorithm"></a></p>

<p>It is also very readable, there is no mysterious variables, questionable loops, everything has a purpose that can be deduced.</p>

<p>I hope it gives you ideas...</p>
    </div>