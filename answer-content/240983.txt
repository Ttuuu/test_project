<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This doesn't have to be complicated. Definitely avoid Approach 1 - having a dedicated class for state combinations is not a good idea. Follow vaguely Approach 2, but</p>

<ul>
<li>Do not have a <code>class OffState</code>, nor a class for any specific state</li>
<li>Do not have a dedicated class for <code>EvaluateCanTurnOnState</code></li>
<li>Track states with enumeration members</li>
<li>Have an equipment superclass, where each subclass implements a state transition predicate</li>
</ul>

<p>Example:</p>

<pre><code>from enum import Enum
from typing import Type, List


class Equipment:
    States: Type[Enum]

    def __init__(self):
        self.state: Equipment.States = None

    def change(self, new_state: 'Equipment.States'):
        if not self.can_change(new_state):
            raise ValueError(
                f'{type(self).__name__} cannot change '
                f'from {self.state} to {new_state}'
            )
        self.state = new_state

    def can_change(self, new_state: 'Equipment.States') -&gt; bool:
        raise NotImplementedError()


class ExclusiveEq(Equipment):
    class States(Enum):
        OFF = 0
        ON = 1

    def __init__(self, name: str):
        super().__init__()
        self.name = name

    def __str__(self):
        return self.name

    def can_change(self, new_state: 'ExclusiveEq.States') -&gt; bool:
        if new_state != self.States.ON:
            return True
        return all(
            not isinstance(r, ExclusiveEq)
            or r is self
            or r.state != self.States.ON
            for r in registry
        )


registry: List[Equipment] = [
    ExclusiveEq('blender'),
    ExclusiveEq('coffeemaker'),
    ExclusiveEq('ion cannon'),
]

registry[0].change(ExclusiveEq.States.ON)
registry[0].change(ExclusiveEq.States.OFF)
registry[1].change(ExclusiveEq.States.ON)
registry[1].change(ExclusiveEq.States.OFF)
registry[2].change(ExclusiveEq.States.ON)

try:
    registry[0].change(ExclusiveEq.States.ON)
    raise AssertionError('This should have failed')
except ValueError:
    pass
</code></pre>
    </div>