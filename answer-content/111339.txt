<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm seems efficient time-wise, but it is wasteful of space. As a minor point, it also constrains the input space a little more than necessary (<code>totalSum - 2 * leftSums[i]</code> requires that no prefix of <code>A</code> have a sum larger than <code>Long.MAX_VALUE / 2</code> or smaller than <code>Long.MIN_VALUE / 2</code>, whereas a different formulation extends those limits such that no prefix (or suffix) can have a sum larger than <code>Long.MAX_VALUE</code> or smaller than <code>Long.MIN_VALUE</code>).</p>

<p>Try this:</p>

<pre><code>class Solution {
    public int solution(int A[]) {
        // currentDiff is right - left for the current partition.
        // Initially, we partition at P = 1.
        long currentDiff = -A[0];

        for (int i = 1; i &lt; A.length; i++) {
            currentDiff += A[i];
        }

        // Now test each partition. minDiff is the minimum difference
        // found so far.
        long minDiff = Math.abs(currentDiff);
        for (int i = 1; i &lt; A.length - 1; i++) {
          currentDiff -= 2 * A[i];  // A[i] moves from right to left.
          minDiff = Math.min(minDiff, Math.abs(currentDiff));
        }
        return (int) minDiff;
    }
}
</code></pre>

<p>This requires only \$O(1)\$ additional memory.</p>
    </div>