<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>According to the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a>, function and variable names
should be <em>“lowercase, with words separated by underscores as necessary to improve readability.”</em> In your case I'd suggest</p>

<pre><code>def median_of_sorted_arrays(a, b):
</code></pre>

<p>Your code determines the median correctly. However, it modifies the
passed arguments, which might be unexpected to the caller:</p>

<pre><code>a = [-5, 3, 6, 12, 15]
b = [-12, -10, -6, -3, 4, 10]

print(findMedianSortedArrays(a, b))   # prints 3
print(findMedianSortedArrays(a, b))   # prints 13.5
</code></pre>

<p>This could be fixed by accessing the lists via subscripting:</p>

<pre><code>i = 0
j = 0
while i &lt; len(a) and j &lt; len(b):
    if (a[i] &lt; b[j]):
        combined.append(a[i])
        i += 1
    else:
        combined.append(b[j])
        j += 1
combined.extend(a[i:])
combined.extend(b[j:])
</code></pre>

<p>The next possible improvement is to get rid of the additional storage:
Instead of storing elements from <code>a</code> or <code>b</code> into the <code>combined</code> list
you could just <em>count</em> how many elements have been merged so far,
until the median element is found.</p>

<p>A more efficient algorithm is described in</p>

<ul>
<li><a href="https://www.geeksforgeeks.org/median-two-sorted-arrays-different-sizes-ologminn-m/" rel="nofollow noreferrer">Median of two sorted arrays with different sizes in O(log(min(n, m)))</a></li>
</ul>

<p>The basic idea is to partition both <code>a</code> and <code>b</code> into </p>

<pre><code>a[:i] + a[i:]
b[:j] + b[j:]
</code></pre>

<p>such that the following conditions are satisfied:</p>

<pre><code>i + j = (len(a) + len(b) + 1) // 2
a[i-1] &lt;= b[j]
b[j-1] &lt;= a[i]
</code></pre>

<p>and this can be done efficiently with a binary search. Then the “union”
of the first (resp. second) halves is the first (resp. second) half of the <code>combined</code> array, so that the median is</p>

<pre><code>max(a[i - 1], b[j - 1])   # if the total length is odd
(max(a[i - 1], b[j - 1]) + min(a[i], b[j])) / 2 # if the total length is even
</code></pre>
    </div>