<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code:</p>

<pre><code>int i = 0;
while (i&lt;len &amp;&amp; *source != '\0') {
    *destination++ = *source++;
    i++;
}
*destination = '\0';
</code></pre>

<p>shouldn't be doing a byte-by-byte copy. (It should also be a <code>for</code>-loop instead of a <code>while</code> loop, but that's beside the point.) Instead, you should probably just call <code>memcpy</code>:</p>

<pre><code>memcpy(destination, source, len);
destination[len] = '\0';
</code></pre>

<p>The reference for <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fgets.html" rel="nofollow noreferrer"><code>fopen</code></a> says that:</p>

<blockquote>
  <p>Upon successful completion, <code>fopen()</code> shall return a pointer to the object controlling the stream. Otherwise, a null pointer shall be returned, and <code>errno</code> shall be set to indicate the error. </p>
</blockquote>

<p>Your invocation here:</p>

<pre><code>rfp = fopen(INFILE, "r");
if (rfp == NULL)
    exit(EXIT_FAILURE);
</code></pre>

<p>is throwing away the error information. In the failure block, you should be calling <code>perror</code> to see why exactly the call failed.</p>

<p>This:</p>

<pre><code>while (fgets(line, LINE_SIZE, rfp) != NULL) {
</code></pre>

<p>assumes that <code>NULL</code> only happens if an EOF is encountered, but that isn't necessarily the case. You need to check <code>feof</code>, and if it isn't an EOF, then something bad has happened and you need to again call <code>perror</code> and bail.</p>

<p>A note about the <code>fgets</code> documentation described in the POSIX standard. The "CX" in this text:</p>

<blockquote>
  <p>... <a href="http://pubs.opengroup.org/onlinepubs/9699919799/help/codes.html#CX" rel="nofollow noreferrer">[CX]</a> and shall set <code>errno</code> to indicate the error. </p>
</blockquote>

<p>indicates that support for setting <code>errno</code> is in an extension; however, from the same standard:</p>

<blockquote>
  <p>The functionality described is an extension to the ISO C standard. Application developers may make use of an extension as it is supported on all POSIX.1-2017-conforming systems.</p>
</blockquote>

<p>So as long as you're targeting a system that doesn't violate POSIX, you should be able to use it. Even if a system violated POSIX and didn't set <code>errno</code>, you should still be checking <code>feof</code>; the condition where <code>fgets</code> returns <code>NULL</code> and <code>errno</code> is set to an error would just never be seen. The worst that would happen is a <code>perror</code> indicating that the system doesn't know what the error is, but <em>you</em> still know that there's an error.</p>

<p>Lastly: do some light reading here - <a href="https://stackoverflow.com/questions/461449/return-statement-vs-exit-in-main">https://stackoverflow.com/questions/461449/return-statement-vs-exit-in-main</a></p>

<p>I don't recommend calling <code>exit</code> at the end of <code>main</code>; simply <code>return</code>.</p>
    </div>