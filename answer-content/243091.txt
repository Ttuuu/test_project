<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no need for unordered maps, especially not for two of them. Also, since you are dealing with indices and counts, you should make them <code>std::size_t</code>, not <code>int</code> or generic. The datatype for storing parent-rank-tuples should look like this:</p>

<pre><code>std::vector&lt;std::tuple&lt;std::size_t, std::size_t&gt;&gt; data;
</code></pre>

<p>Performance will be a good deal better because <code>vector</code> is faster than <code>unordered map</code> and in addition to that, there's only one lookup required to get both parent and rank, like this:</p>

<pre><code>auto [parent, rank] = data[i];
</code></pre>

<p>or like this:</p>

<pre><code>std::tie(parent, rank) = data[i];
</code></pre>

<p>If you want the union-find datastucture to work on arbitrary objects instead of indices, create a generic wrapper class that translates objects to indices and then invokes the non-generic version. This way, the <code>unordered_map</code> lookup is done only once for each argument, even if the non-generic version subsequently performs several recursions.</p>
    </div>