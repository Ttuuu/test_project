<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You write information to the stack in two places, and both of them look like this:</p>

<pre><code>st.push("(" + i);
</code></pre>

<p>That means <code>st.peek().charAt(0) == '('</code> is always true, and you can remove it.</p></li>
<li><p>The only remaining place that reads the values in the stack reads</p>

<pre><code>st.pop().charAt(1)
</code></pre>

<p>That means it isn’t necessary to add the parenthesis at all when pushing, and the stack can be a stack of <code>Integer</code>s instead of <code>String</code>s.</p>

<pre><code>Stack&lt;Integer&gt; st = new Stack&lt;&gt;();
ArrayList&lt;Integer&gt; indicesList = new ArrayList&lt;Integer&gt;();

for (int i = 0; i &lt; input.length(); i++) {
    if (st.isEmpty()) {
        if (input.charAt(i) == ')')
            indicesList.add(i);
        if (input.charAt(i) == '(')
            st.push(i);
    } else {
        if (input.charAt(i) == ')')
            st.pop();
        if (input.charAt(i) == '(')
            st.push(i);
    }
}

while (!st.isEmpty())
    indicesList.add(st.pop());

StringBuffer buff = new StringBuffer();
for (int i = 0; i &lt; input.length(); i++) {
    if (!indicesList.contains(i))
        buff.append(input.charAt(i));
}

return buff.toString();
</code></pre>

<p>This is important for correctness, too, because <strong>integers could have been longer than one character</strong>. But now that’s fixed for free. Avoiding trips through data types that don’t really match up is good when possible.</p></li>
<li><p><code>input.charAt(i)</code> is repeated, but it doesn’t have to be.</p>

<pre><code>for (int i = 0; i &lt; input.length(); i++) {
    char c = input.charAt(i);

    if (st.isEmpty()) {
        if (c == ')')
            indicesList.add(i);
        if (c == '(')
            st.push(i);
    } else {
        if (c == ')')
            st.pop();
        if (c == '(')
            st.push(i);
    }
}
</code></pre></li>
<li><p><code>st</code> being empty only matters when the character is <code>')'</code>, and you do the same thing in either case when it’s <code>'('</code>. The conditions are more natural turned inside-out.</p>

<pre><code>if (c == '(') {
    st.push(i);
} else if (c == ')') {
    if (st.isEmpty())
        indicesList.add(i);
    else
        st.pop();
}
</code></pre></li>
<li><pre><code>for (int i = 0; i &lt; input.length(); i++) {
    if (!indicesList.contains(i))
        buff.append(input.charAt(i));
}
</code></pre>

<p>This loop has the potential to be very slow, because it searches <code>indicesList</code> for every character of the input. In total, that takes time proportional to the number of unbalanced parentheses multiplied by the length of the input. One way to avoid that is to replace <code>indicesList</code> with an array of booleans indicating whether the character at the same position should be excluded from the result:</p>

<pre><code>Stack&lt;Integer&gt; st = new Stack&lt;&gt;();
boolean[] exclude = new boolean[input.length()];

for (int i = 0; i &lt; input.length(); i++) {
    char c = input.charAt(i);

    if (c == '(') {
        st.push(i);
    } else if (c == ')') {
        if (st.isEmpty())
            exclude[i] = true;
        else
            st.pop();
    }
}

while (!st.isEmpty())
    exclude[st.pop().intValue()] = true;

StringBuffer buff = new StringBuffer();

for (int i = 0; i &lt; input.length(); i++) {
    if (!exclude[i])
        buff.append(input.charAt(i));
}

return buff.toString();
</code></pre></li>
</ol>
    </div>