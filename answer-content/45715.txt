<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If in doubt, use <code>fold</code>.</p>

<pre><code>let split n  = let one, append, empty = Seq.singleton, Seq.append, Seq.empty
               Seq.fold (fun (m, cur, acc) x -&gt; 
                           if m = n then (1, one x, append acc (one cur))
                           else (m+1, append cur (one x), acc))
                        (0, empty, empty)
               &gt;&gt; fun (_, cur, acc) -&gt; append acc (one cur)
</code></pre>

<p>This has the advantage over the other proposed solution that it does not force the re-evaluation of IEnumerables: each element in the input sequence is touched only once(*).</p>

<p>If you're not used to <code>fold</code>, this is arguably less readable than the solutions proposed in the other answer. However, using <code>fold</code> to solve problems <em>like</em> this one is highly idiomatic F#, so I think it's worth considering anyway. </p>

<p>It works like this. We use <code>Seq.fold</code> to thread an accumulator through the sequence. 
<code>fold</code> applies a function to each element of a sequence. However, for each element, the function gets both the element and an accumulator, and must produce a new accumulator. That function is the anonymous one:</p>

<pre><code>                      fun (m, cur, acc) x -&gt; 
                           if m = n then (1, one x, append acc (one cur))
                           else (m+1, append cur (one x), acc)
</code></pre>

<p>The accumulator contains a "current segment" <code>cur</code>, how many elements is in that segment <code>m</code>, and the segments we have already built <code>acc</code>. It has to produce a new accumulator. There are two cases: either we have enough elements to finalise the current segment (<code>m=n</code>), or we don't. If we do, we move the current segment to the 
complete segments (<code>append acc (one cur)</code>) and start a new segment with the current element (<code>1</code> and <code>one x</code>). If we don't, we add the current element to the current segment (<code>m+1</code> and <code>append cur (one x)</code>). </p>

<p>The end-user of course doesn't care for our accumulator, so once the fold completes, we compact it by the line:</p>

<pre><code>               &gt;&gt; fun (_, cur, acc) -&gt; append acc (one cur)
</code></pre>

<p>That is, we lose the counter <code>_</code>, and add the current (likely of length &lt; n) segment <code>cur</code> to our accumulated result segments <code>acc</code>. </p>

<p>This is idiomatic in two ways: First, <code>fold</code> is just very handy in so many cases. Second, if you think about how you'd implement this in an old-fashioned imperative language without native support for sequences, you'd have some kind of loop over the elements (<code>m</code>), a segment you're currently building (<code>cur</code>), and a collection of completed segments (<code>acc</code>). What we do in F# is make all this <em>state</em> explicit in one place: it all lives in the arguments to the anonymous function. </p>

<p>You'll note that the first line</p>

<pre><code>let split n = ...
</code></pre>

<p>doesn't actually mention the sequence <code>s</code>. We're exploiting here that 
functions are values, so instead of writing, say</p>

<pre><code>let split n s = ... s
</code></pre>

<p>we can just write</p>

<pre><code>let split n = ...
</code></pre>

<p>This is called points-free programming. It's idiomatic, but it's debated whether it is a "good" idiom. I like it, though. </p>

<p>(*) I'm assuming that Seq.append has O(1) running time. I should certainly hope so, but I wasn't able to verify it. </p>
    </div>