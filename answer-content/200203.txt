<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think there's a good reason for renaming <code>std::string</code> like this:</p>

<pre><code>using string_t = std::string;
</code></pre>

<p>It just serves to make the code harder to read (because I have to <em>remember</em> this alias).  Just use <code>std::string</code> as is.  Similarly, use <code>char</code> where appropriate (as it is, <code>format()</code> and <code>fprint()</code> aren't consistent in this respect.</p>

<hr>

<p>This function:</p>

<pre><code>template &lt;typename T&gt; inline string_t to_string(const T &amp;f) { return std::to_string(f); }
</code></pre>

<p>catches all <code>T</code> not otherwise overloaded.  I'd be inclined to</p>

<pre><code>using std::to_string;
</code></pre>

<p>That then leaves us free to write a catch-all template, something like</p>

<pre><code>template &lt;typename T&gt;
std::string to_string(const T&amp; val)
{
    std::ostringstream s;
    s &lt;&lt; val;
    return s.str();
}
</code></pre>

<p>The advantage to this is that many class authors will have written <code>operator&lt;&lt;(std::ostream&amp;, T);</code> already, which saves you bullying them to also write a <code>to_string(T)</code>.</p>

<p>We could constrain this template (with Concepts, or with <code>std::enable_if</code>, or with an anonymous template argument).</p>

<hr>

<p>Exercise: Extend the code to work with other kinds of string (e.g. <code>std::wstring</code>).</p>
    </div>