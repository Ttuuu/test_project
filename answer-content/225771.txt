<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Error Handling</h2>

<p>You are relying on <code>OAuthGetRequestTokenAsync</code> to catch all exceptions for you.</p>

<blockquote>
<pre><code>flickr.OAuthGetRequestTokenAsync(callbackUrl, r =&gt;
{
    if (r.HasError)
        tcs.TrySetException(r.Error);
    else
        tcs.TrySetResult(r.Result);
});
</code></pre>
</blockquote>

<h3>Unhandled errors</h3>

<p>However, <code>OAuthGetRequestTokenAsync</code> internally calls  <code>FlickrResponder.GetDataResponseAsync</code>, which as you can see in the <a href="https://github.com/samjudson/flickrnet-experimental/blob/master/src/Internals/FlickrResponderAsync.cs" rel="nofollow noreferrer">Reference Source</a> does not catch all exceptions.</p>

<p>Most exceptions are caught and provided to the <em>callback</em>:</p>

<blockquote>
<pre><code>// .. snippet from FlickrNet.Internals.FlickrResponder.GetDataResponseAsync()
if (e.Error != null)
{
    result.Error = e.Error;
    callback(result);
    return;
}
</code></pre>
</blockquote>

<p>But some are thrown to the caller:</p>

<blockquote>
<pre><code>// .. snippet from FlickrNet.Internals.FlickrResponder.GetDataResponseAsync()
using (var responseReader = new StreamReader(response.GetResponseStream()))
{
    string responseData = responseReader.ReadToEnd();

    throw new OAuthException(responseData, ex);
}
</code></pre>
</blockquote>

<hr>

<h3>Refactored Code</h3>

<p>To wrap this call in an async task, I would also catch these exceptions and handle them in the <code>Task.TrySetException</code>. In addition, since you provide a public API, I suggest to avoid <code>NullReferenceException</code> and check required arguments against <code>null</code>. Perhaps <code>callbackUrl</code> should also be checked early against <code>null</code>. I'm not sure about this, you'd have to verify.</p>

<pre><code>public static Task&lt;OAuthRequestToken&gt; OAuthGetRequestTokenAsync(
    this Flickr flickr, string callbackUrl)
{
    if (flickr == null) throw new ArgumentNullException(nameof(flickr));
    var tcs = new TaskCompletionSource&lt;OAuthRequestToken&gt;();
    try
    {
        flickr.OAuthGetRequestTokenAsync(callbackUrl, r =&gt;
        {
            if (r.HasError)
                tcs.TrySetException(r.Error);
            else
                tcs.TrySetResult(r.Result);
        });
    } 
    catch (Exception uncaughtError)
    {
        tcs.TrySetException(uncaughtError);
    }

    return tcs.Task;
}
</code></pre>
    </div>