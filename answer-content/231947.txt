<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>D - Dependency Inversion Principle</p>
<p>Not applicable, I think</p>
</blockquote>
<p>Classes should depend on abstractions and not concretions (paraphrased).</p>
<p>You have the interface and abstract class definition that can be used by consumers of your types. This allows consumers of your library the ability to apply DI.</p>
<p>That said, the code, as is, looks to be following the <em>spirit</em> of the principal.</p>
<p>My preference is to keep things simple (KISS).</p>
<h3><a href="https://deviq.com/explicit-dependencies-principle/" rel="noreferrer">Explicit Dependencies Principle</a></h3>
<blockquote>
<p>Methods and classes should explicitly require (typically through
method parameters or constructor parameters) any collaborating objects
they need in order to function correctly.</p>
</blockquote>
<p>Which you also appear to be following.</p>
<p>If a type is to be used and reused externally you should put yourself in the shoes of those using your type and possible pain points.</p>
<p>If <code>Encrypt</code> is to be used as a dependency</p>
<pre><code>//cto
public SomeClass(Encrypt encrypt) {
    //...
}
</code></pre>
<p>Some DI containers may have issue with activating implementations based on the string constructor argument. But I also see that as an implementation concern.</p>
<p>Code should also be intuitive. It should be genuine to its intent/responsibility</p>
<p>You stated</p>
<blockquote>
<p>It encrypts any given string and outputs a hash.</p>
</blockquote>
<p>The initial interface</p>
<pre><code>interface IHash
{
    string Hash();
}
</code></pre>
<p>could be implemented to hash not just strings.</p>
<p>Even the wording of the sentence can influence the design</p>
<pre><code>//It encrypts any given string and outputs a hash.
public interface IEncrypt {
    string Hash(string input);
}
</code></pre>
<p>Have a look at the following</p>
<pre><code>// Abstract class implements interface
public abstract class Encrypt : IEncrypt
{    
    public abstract string Hash(string password);
}

// Encrypt using BCrypt.NET library
public class BcryptEncrypt : Encrypt
{    
    // Output hash
    public override string Hash(string password) =&gt; BCrypt.Net.BCrypt.HashPassword(password);
}

// Encrypt using SHA256
public class SHA256Encrypt : Encrypt
{
    // Output hash
    public override string Hash(string password)
    {
        using (SHA256 hash = SHA256Managed.Create())
        {
            return String.Concat(hash.ComputeHash(Encoding.UTF8.GetBytes(password)).Select(item =&gt; item.ToString("x2")));
        }
    }
}
</code></pre>
    </div>