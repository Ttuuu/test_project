<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've already reviewed some of your other code, so I will only add new items in an attempt not to repeat posts</p>

<p><strong>Booleans</strong></p>

<p>There is no reason to recreate a feature that already exists. By checking for a <code>"yes"</code> or <code>"no"</code> or a <code>1</code> or <code>0</code> value you are recreating a boolean. Simpler to just use TRUE/FALSE this way you can check your variables like so.</p>

<pre><code>if ($this-&gt;session-&gt;userdata('xtr'))
//instead of
if ($this-&gt;session-&gt;userdata('xtr') == "yes")

//OR
if ($remember)
//instead of
if ($remember == 1)
</code></pre>

<p><strong>Redirects</strong></p>

<p>I'm not familiar with CodeIgniter, but if <code>redirect()</code> interrupts the current code flow and physically redirects to a new page, then there is no reason to use an else statement. As it will never be processed. Save yourself from those indents.</p>

<p><strong>Variables in Statements</strong></p>

<p>Defining a variable in a statement is bad! There are few exceptions to this rule, and even those exceptions can be avoided. Declaring a variable in any kind of statement is wrong. A couple of reasons for this. First, it could be accidental and your IDE and PHP will have no way of telling you because it is valid code. Second, it adds unnecessary complexity to the statement that hinders legibility.</p>

<pre><code>$postUser = $this-&gt;input-&gt;post('username');
$userData = $this-&gt;usermodel-&gt;getUserByUsername($postUser);
if (is_null($userData ))
</code></pre>

<p>And I already mentioned <code>is_null()</code> in my last review :)</p>

<p><strong>outputArray</strong></p>

<p>I've already mentioned how I think the "error" element should be a boolean. This is to serve two purposes. First, was the one I already mentioned, about not recreating a feature. The second was to do away with the "success" element. No reason to have two separate elements that accomplish more or less the same thing. If there is an error, then success is obviously false. If there is no error, then success is obviously true. So you see, you can just use the "error" element for both.</p>

<p>There is also unnecessary duplication here. I would create a default <code>$outputArray</code> at the beginning of my <code>submit()</code> method that contains default values. Then, instead of recreating the array every time I wanted to set the message, I would just set the "message" directly. The only time you need to do anything extra is when you have "success" in which case you need to change the value of "error" to false.</p>

<pre><code>$outputArray = array(
    'error' =&gt; TRUE,
    'message' =&gt; 'There was a problem submitting the form! Please refresh the window and try again!'
);

if ($this-&gt;form_validation-&gt;run() !== FALSE) {
    //etc...

    if ($this-&gt;auth-&gt;login($this-&gt;input-&gt;post('username'), $this-&gt;input-&gt;post('password'), $this-&gt;input-&gt;post('remember')))
    {
        // Login was successful
        $outputArray['error'] = FALSE;
        $outputArray['message'] = 'Sending to control panel!';
    }
    else
    {
        // Login failed
        $outputArray['message'] = 'Incorrect username and password combination!';
    } 
}
</code></pre>

<p><strong>Default Values</strong></p>

<p>The cool thing about if/else statements is that the else is usually unnecessary. When coding, be a pessimist. Assume the worst will happen and perform that action by default. Then you only have to plan for success. You could technically do it the other way around, but better this way in case you miss something. That way the script is already prepared to handle an error.</p>

<p>So here's an example using the code from above...</p>

<pre><code>$outputArray['message'] = 'Incorrect username and password combination!';

if ($this-&gt;auth-&gt;login($this-&gt;input-&gt;post('username'), $this-&gt;input-&gt;post('password'), $this-&gt;input-&gt;post('remember')))
{
    // Login was successful
    $outputArray['error'] = FALSE;
    $outputArray['message'] = 'Sending to control panel!';
}
</code></pre>

<p><strong>Shortening Your Code</strong></p>

<p>This line is rather bulky...</p>

<pre><code>if ($this-&gt;auth-&gt;login($this-&gt;input-&gt;post('username'), $this-&gt;input-&gt;post('password'), $this-&gt;input-&gt;post('remember')))
</code></pre>

<p>You don't really use these anywhere else, but I still think it would be worth it to set these up as variables to improve legibility. Since you do, use the "username" only once more, I would set them towards the top of the method so that they can be used in both places. So...</p>

<pre><code>$username = $this-&gt;input-&gt;post('username');
$password = $this-&gt;input-&gt;post('password');
$remember = $this-&gt;input-&gt;post('remember');
//usage
if ($this-&gt;auth-&gt;login($username, $password, $remember))
</code></pre>

<p><strong>Methods</strong></p>

<p>Your <code>submit()</code> and <code>login()</code> methods have not been defined as public/private/protected. By default it is set to public, but you should not depend upon PHP always providing a default, or the same default.</p>

<p><strong>Magical toarray Method</strong></p>

<p>Well, not so magical, because it doesn't exist, but you can get the same functionality out of PHP's <code>get_object_vars()</code> function. So, assuming that the only public properties you have in the <code>$userData</code> class are the ones you are seeking, or at the very least you do not mind having extra unused properties in your <code>$userData</code> array, you can get the same results for your <code>$userData</code> array like so:</p>

<pre><code>$userData = get_object_vars($userData);
//instead of...
$userData = array('userID' =&gt; $userData-&gt;userID, 'firstName' =&gt; $userData-&gt;firstName, 'lastName' =&gt; $userData-&gt;lastName, 'email' =&gt; $userData-&gt;email, 'username' =&gt; $userData-&gt;username);
</code></pre>

<p><strong>Final Thoughts</strong></p>

<p>What is "xtr"? Your variables should be a bit more descriptive than that.</p>

<p><strong>UPDATE</strong></p>

<p><strong>Methods</strong></p>

<p>A public method or property is one you can access from outside the current scope of a class. Whether in the traditional <code>$class-&gt;</code> method or the static <code>class::</code> method. In other words, if you were to load this class into another file and create a new instance of it, that file will be able to use any public methods or properties simply by calling the class.</p>

<p>Private and protected methods and properties are just the opposite. Both are only accessible from within the class themselves. You can only call them within the class via <code>$this-&gt;</code> or statically via <code>class::</code>. If you were to load this class into another file and create a new instance of it, all private and protected methods and properties would be invisible to it and inaccessible. They are only available within the class' scope. So if the file used the public method <code>getPrivateData</code> to retrieve the private property <code>$privateData</code> it would not know where that information came from and would not be able to specifically ask for the <code>$privateData</code> property. This is ideal for information you do not wish someone to have access to, such as a password or something else critical in nature. The difference between private and protected is that a protected method or property is used for class inheritance and only a child class and the parent class can access them whereas private methods and properties are only accessible by the parent and invisible to the child.</p>

<p>If this is not clear enough you'll have to look at the PHP documentation.</p>

<p><strong>NULL</strong></p>

<p>If you are specifically looking for NULL you should use the <code>is_null()</code> function or the absolute equality <code>===</code> operator instead of loose equality <code>==</code> operator. Doing a loose comparison of NULL will return TRUE for empty strings, "null", "NULL", null, NULL, and 0, not sure about FALSE... So you might as well use a boolean comparison (<code>! $userData</code>) as to use the loose comparison. They will both return more or less the same thing and the later is cleaner.</p>

<pre><code>if ($userData === null)
//OR
if (is_null($userData))
</code></pre>

<p><strong>One Last Thing</strong></p>

<p>As I mentioned earlier, if you are a "coding pessimist", there is no need for all these else statements. We set the <code>$outputArray['message']</code> with a default value that handled the first error should it occur. This is being pessimistic. We are assuming the code will fail and have already set up our code to handle it should it do so. We laugh at the optimists for they assume their code will work and will eventually be proven wrong when they meet an error they never expected. We do not want to be optimistic. We pity the hesitant coder for their many if/else statements are hard to read and their code heavily indented. We do not want to be hesitant. We are pessimists and we have handled all eventualities before they occur. We tell our code it is wrong and challenge it to "Trial by If Statements". And we do it again and again until we are satisfied. Each time telling it how it is wrong and what it can do to get better. We are emotionally abusive to our code, but it will grow the stronger for it. Only once our code has proven itself and passed all of our tests will we declare it fit and can be proud of it.</p>

<p>Excuse my fun little rant, but if you read it and take it to heart you'll have the right mindset. To clarify, once inside each if statement our code has literally told us it is not wrong and the previous statement about it (error) is no longer valid. So we do it again and again until there are no more if statements. Because we assume our code is wrong there is no need for else statements, and should some unforseen error occur we don't have to do anything extra to it because we have already assumed it is wrong. This can be done with any if/else block.</p>
    </div>