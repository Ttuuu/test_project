<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and welcome to Code Review! I'll dive right in:</p>

<hr>

<h3>Project Structure</h3>

<p>Java projects <strong>tend</strong> to have a following structure:</p>

<pre>
Module
^-src
  ^-main
    ^-java
      ^-Your applications top level package
        ^-your application
    ^-resources
      ^-property files and such
  ^-test
    ^-java
      ^-Your applications test packages
        ^-your applicationtests
    ^-resources
      ^-property files for tests
</pre>

<p>Your applications top level package should have a reasonably unique name. The convention in most cases is to reverse the domain where it is hosted.For example, if you were writing an applet hosted at codereview.stackexchange.com, convention says your package inside the main/java directory would be something like</p>

<pre>
^-com
  ^-stackexchange
    ^-codereview
      ^-appName
</pre>

<p></p><hr>
I see you are coding to an interface! Good, this is commonly held as a best practice. However, the package structure around this type of coding is very opinion based.
You could keep each interface and implementation alone in there own directory like so:

<pre>
appName
^-sub1
  ^-interface1
  ^-impl1
^-sub2
...
</pre>

<p>and some choose to make a second "impl" subdirectory:</p>

<pre>
^-sub1
  ^-impl
    ^-impl1
  ^-interface1
</pre>

<p>These are just examples of common use</p>

<hr>

<p>On to actual code ~</p>

<hr>

<h3>CalculatorLongImp</h3>

<p><strong>I noticed you don't track how many 20s you receive</strong>, is this intentional?</p>

<p>The method lemonadeChange breaks convention: the method returns a boolean true/false based on where or not the bills passed could make a valid transaction. For readability, convention here is to make such Boolean methods a true/false question. A name more in line with convention would be isValid, or IMHO, isValidTransaction</p>

<p>Also, as @herdistheword commented, 'acc' isnt a very descriptive name. To write good code means to write code that others could maintain. Do you think another developer could look at that name and know what it is? if not, consider renaming it.</p>

<p>SPEAKING OF ACC: At the end of your method, you check if acc is 0 or not, and then return a true or false. I would recommend making acc a <code>boolean</code>, replacing <code>acc = 0</code> with <code>acc = true</code>, replacing <code>acc++</code> with <code>acc = false</code>, and then finally replacing your last <code>if(){}else{}</code> block with a simple <code>return acc</code>. Same results, less work.</p>

<hr>

<h3>Writing Tests</h3>

<p>The bests tests are tests that have been in mind since the inception of the project. One approach to better tests is to <strong>design your code based on the tests it needs to pass</strong>. This way, you know upfront what you need to test, and what tests your code must pass to meet requirements.</p>

<blockquote>
  <p>The application is calculating the exchange from the bill for lemonade. Lemonade costs 5$ and client may pay with 5$, 10$ or 20$. At the beginning there is no change available.</p>
</blockquote>

<p>From the above, you have a guideline for what to test:</p>

<blockquote>
  <p>The application is calculating the exchange from the bill for lemonade. Lemonade costs 5$</p>
</blockquote>

<p>Your first test should be proof that it correctly calculates the necessary change for a test case</p>

<blockquote>
  <p>Clients may pay with 5$, 10$ or 20$</p>
</blockquote>

<p>That's three cases, each one should return true in a test(In some of these you will need to 'initialize' your change before your assert test)</p>

<blockquote>
  <p>At the beginning there is no change available</p>
</blockquote>

<p>So test use with a 10 or 20 as the first transaction should return false</p>

<p>That's 5 good tests just from your requirements statement, and its easy to see that code that can pass all 5 tests is at least adjacent to done
</p><hr>
My last suggestion is to look at your tests. I mentioned above,

<blockquote>
  <p>(In some of these you will need to 'initialize' your change before your assert test)</p>
</blockquote>

<p>If you keep in mind that every time you call new Calculator, you reset your 5s/10s/20s to zero, you will see that some of your tests are expecting money to be there when it is not.</p>
    </div>