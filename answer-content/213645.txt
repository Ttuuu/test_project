<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>prezzo()</code> function is very inefficient: for every line, you scan every line in <code>OR</code> to for a matching <code>o</code>, which makes your algorithm O(<em>n</em><sup>2</sup>).  To make it worse, you call it from twice from <code>ordine_min()</code>, doubling the work!  Ideally, the calculations should be done in one single pass through <code>OR</code>.</p>

<p>Your code is also very hard to read and understand, due to cryptic naming — <code>OR</code>, <code>i</code>, <code>OR[k][2] * OR[k][3]</code>.  Using destructuring assignments can help improve readability.</p>

<pre><code>from collections import Counter

def ordine_min(ordini):
    prezzi_neg = Counter()
    for ordine, articolo, quantità, prezzo in ordini:
        # The Counter can efficiently find the maximum total.  We calculate
        # negative prices to trick it into finding the minimum instead.
        prezzi_neg[ordine] -= quantità * prezzo
    for ordine, prezzi_neg in prezzi_neg.most_common(1):
        return -prezzi_neg, ordine
</code></pre>
    </div>