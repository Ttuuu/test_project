<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me start by saying, that I have respect for Mike Brant, and have been enjoying his posts for quite a while now.  However, I disagree with some of his review.</p>

<ol>
<li><code>$regex_config</code> can not store the the replacement values as associative keys unless the regex patterns that use the same replacement value are merged.  This is not explained in the <code>...</code> (yatta-yatta).  The key clash would be on <code>el</code>.</li>
<li>Simply throwing <code>1</code> at the end of <code>preg_replace()</code> is NOT going to provide the desired output.  <a href="https://3v4l.org/EWnRp" rel="nofollow noreferrer">Declaring a replacement limit on the call will only limit the replacements PER array element.</a> The damage is evident in this output: <a href="https://3v4l.org/J9cl7" rel="nofollow noreferrer">meses =&gt; mês = mê</a></li>
<li>Most trivially, <code>array_values()</code> doesn't need to be called because <code>preg_replace()</code> is "key ignorant" regarding the array inputs.</li>
</ol>

<hr>

<ol>
<li>For this process to maintain accuracy, there needs to be a <code>return</code> as soon as a replacement occurs on the input string.  To avoid calling multiple replacements, iterate the array of pattern-replacement pairs.</li>
<li>You can avoid using capture groups and shorten your replacement strings in a couple places by implementing the <code>\K</code> metacharacter (restart fullstring match).  This way you don't need to use <code>$1</code> or rewrite a literals from the pattern into the replacement.</li>
<li>If you need to add case-sensitivity to your replacement process, you can check the last character of the incoming string.  If it is uppercase, assume the whole string is in CAPS and call <code>mb_strtoupper()</code>.</li>
<li>I don't have a sample string to test against <code>~[áó].*eis$~iu</code>, but I wonder if this is accurate/correct and my Portuguese is not too sharp.</li>
<li><p>After my implementation of <code>\K</code> you can see that two pairs of patterns are making the same replacement.  If you don't expect to be making lots of future adjustments to this set of regex patterns, you could combine the patterns with a pipe.  Here's what I mean: <code>'~(?:[áó].*eis|[eé]is)$~iu' =&gt; 'el',</code> and <code>'~(?:[rzs]\Kes|s)$~iu' =&gt; ''</code></p></li>
<li><p>I am using the regex patterns as the keys because they will all logically be unique.  the same cannot be said about the replacement values (not without merging anyhow).</p></li>
</ol>

<hr>

<p>Code: (<a href="https://3v4l.org/vpHGS" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>function is_allcaps($string)
{
    $last_letter = mb_substr($string, -1, 1, 'UTF-8');
    return $last_letter === mb_strtoupper($last_letter, 'UTF-8');
    // otherwise use cytpe_upper() and setlocale()
}

function plural_to_singular($string)
{
    // quick return of "untouchables"
    if(preg_match('~^(?:[oó]culos|parab[eé]ns|f[eé]rias)$~iu', $string))
    {
        return $string;
    }

    $regex_map = [
        '~[õã]es$~iu' =&gt; 'ão',
        '~(?:[áó].*e|[eé])is$~iu' =&gt; 'el',
        '~[^eé]\Kis$~iu' =&gt; 'l',
        '~ns$~iu' =&gt; 'm',
        '~eses$~iu' =&gt; 'ês',
        '~(?:[rzs]\Ke)?s$~iu' =&gt; ''
    ];

    foreach ($regex_map as $pattern =&gt; $replacement)
    {
        $singular = preg_replace($pattern, $replacement, $string, 1, $count);
        if ($count)
        {
            return is_allcaps($string) ? mb_strtoupper($singular) : $singular;

        }
    }
    return $string;
}

$words = array(
    'óculos' =&gt; 'óculos',
    'papéis' =&gt; 'papel',
    'anéis' =&gt; 'anel',
    'PASTEIS' =&gt; 'PASTEL',
    'CAMIÕES' =&gt; 'CAMIÃO',
    'rodas' =&gt; 'roda',
    'cães' =&gt; 'cão',
    'meses' =&gt; 'mês',
    'vezes' =&gt; 'vez',
    'luzes' =&gt; 'luz',
    'cristais' =&gt; 'cristal',
    'canções' =&gt; 'canção',
    'nuvens' =&gt; 'nuvem',
    'alemães' =&gt; 'alemão'
);

foreach($words as $plural =&gt; $singular)
{
    echo "$plural =&gt; $singular = " , plural_to_singular($plural) , "\n";
}
</code></pre>
    </div>