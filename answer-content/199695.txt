<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking at this code, I have several remarks, let me start with your questions:</p>

<h1>Is my create member function idiomatic?</h1>

<p>No, I barely see it. Mostly because it doesn't add value. Either classes are small enough so it doesn't matter, or copy/assign ain't supported, or it can be defaulted.</p>

<p>In this case, it looks better to have a virtual method <code>clone</code> on the nose or make the structure templated (preferred by me).</p>

<h1>Is there a way that I could avoid using the virtual function get_word?</h1>

<p>In general I would make the node type would be a template argument, yes. Otherwise, you could cast (similar to CRTP), however that requires knowledge of the available types.
For this specific case, I realize this ain't possible, however, it does make sense having only one node.</p>

<h1>Ownership</h1>

<p>You have some memory leaks in your code. I suggest to use a simple rule of thumb: always use unique_ptr instead of new/delete. Or when possible, just store by value in the map.</p>

<h1>Relevance of member functions</h1>

<p><code>prefix_apply</code> is a very good example of a function that should be a free function. You make a copy and adapt the whole structure. Why not build up a new map?</p>

<p>At the same time, it is very specific, so you could replace it by the visitor pattern. </p>

<h1>Rule of five</h1>

<p>Applying the rule of five allows you to move instead of copying. Most of the time, I even write move operations with the copy variant deleted.</p>

<h1>Public members</h1>

<p>Just don't, this is very hard to maintain. Especially when you encounter a specific implementation is buggy.</p>

<h1>Purpose and performance</h1>

<p>It looks like you are trying to make an ever growing string pool in which you want to share strings. How about using <code>std::unordered_set</code> or just a vector on which to unique/erase.
Both variants will be more memory efficient and most like more performant.</p>
    </div>