<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Note</h2>

<p>Code review is for working code, not a generic <em>"How I might write some functionality?"</em> which I feel your example is. I must take the code at face value and that it is in accordance to the site rules.</p>

<h2>General points</h2>

<ul>
<li>The array <code>otherarray</code> is poorly named and should be <code>otherArray</code>.</li>
<li>Additionally the names <code>array</code> and <code>otherarray</code> are extremely poor and give no clue as to what they hold. Never name variable to their type, name them for what they represent. </li>
<li>Why use the more complicated bracket notation for accessing <code>fields</code> there is no need. <code>item.fields.image['fields']</code> can be <code>item.fields.image.fields</code></li>
<li>Single parameters for Arrow functions do not need to be delimited with <code>(</code>...<code>)</code>  thus <code>array.forEach((item) =&gt; {</code> can be <code>array.forEach(item =&gt; {</code></li>
<li>Reduce complexity by assigning long property paths in the outer loop (see example for <code>item.fields.image.sys.id</code>)</li>
<li>This is inline code and not a good example of quality code. Always encapsulate functionality in a function.</li>
<li>As a function you can extract the two arrays via parameter destructuring (see examples).</li>
<li><p>It may or may not be a requirement that you copy the reference to <code>fields</code> to the first array, meaning that any changes to the original will appear in the copied reference. </p>

<p>As your intent is unclear I will just point out that you can make a shallow copy using <code>item.fields.image.fields = {...asset.fields}</code> or if the left side exists you may want to just copy over existing fields and add new ones with <code>Object.assign(item.fields.image.fields,asset.fields);</code></p></li>
</ul>

<h2>Complexity</h2>

<p>Without the data I must make an assumption that there is only a one to one match for <code>otherarray</code> and <code>array</code> on items <code>sys.id</code> which makes the inner loop inefficient because you keep looping after you have found the only match. If this is not the case then you would be assigning the last match in which case you would use a <code>for ; ;</code> or <code>while</code> loop to iterate backward to find the last match.</p>

<h3>Reducing inner iterations via <code>Array.some</code> or <code>for...of</code></h3>

<p>You could use <code>array.some</code> to find the first match which can greatly reduce the number of iterations needed. Or more efficiently you can use a <code>for...of</code> loop and <code>break</code> once a match is found. Both solutions below.</p>

<h3>Example using <code>Array.some</code></h3>

<pre><code>function assignFieldsToMatchId({array, otherArray}) { 
    array.forEach(item =&gt; {
        const id = item.fields.image.sys.id;
        otherArray.array.some(asset =&gt; {
            if (id === asset.sys.id) {
                item.fields.image.fields = asset.fields;
                return true; // breaks out of the inner loop.
            }
            return false;
        })
    });
}
assignFieldsToMatchId(object);  /// You need to ensure otherarray is named otherArray
</code></pre>

<h3>Example using inner <code>for...of</code></h3>

<pre><code>function assignFieldsToMatchId({array, otherArray}) { 
    array.forEach(item =&gt; {
        const id = item.fields.image.sys.id;
        for (const asset of otherArray.array) {
            if (id === asset.sys.id) {
                item.fields.image.fields = asset.fields;
                break;
            }
        }
    });
}
assignFieldsToMatchId(object); /// You need to ensure otherarray is named otherArray
</code></pre>

<h3>Example using only <code>for...of</code></h3>

<p>Using <code>for...of</code> loops are always slightly more efficient than the <code>Array</code> iterators like <code>forEach</code></p>

<pre><code>function assignFieldsToMatchId({array, otherArray}) { 
    for (const item of array) {
        const id = item.fields.image.sys.id;
        for (const asset of otherArray.array) {
            if (id === asset.sys.id) {
                item.fields.image.fields = asset.fields;
                break;
            }
        }
    }
}
assignFieldsToMatchId(object); /// You need to ensure otherarray is named otherArray
</code></pre>
    </div>