<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not a complete review, but rather two simpler alternatives that illustrate how you can cut the some of the inner control flow using the <code>in</code> keyword. This keyword tests for membership of an object in an iterable. In this case, you want to test for membership of <code>'a'</code> in the name of each element of <code>cities</code>.</p>

<p>The first takes the same approach as your code</p>

<pre><code>cities = ["New York", "Shanghai", "Munich", "Tokyo", "Dubai", "Mexico City", "São Paulo", "Hyderabad"]

a_city, no_a_city = [],[]
for city in cities:
    if 'a' in city:
        a_city.append(city)
    else:
        no_a_city.append(city)

print("a_city:", a_city)
print("no_a_city:", no_a_city)
</code></pre>

<p>The membership test using <code>in</code> is a drop-in replacement for the harder-to-read and more error-prone explicit loop over the characters.</p>

<p>An even cleaner solution makes use of the built-in <code>set</code> data type. In simplistic terms, a <code>set</code> is like a <code>list</code>, except that it is not ordered and does not contain duplicates. </p>

<pre><code># a set is constructed with {}, unlike the the [] used for lists
cities = {"New York", "Shanghai", "Munich", "Tokyo", "Dubai", "Mexico City", "São Paulo", "Hyderabad"}

# we can also construct one using the `set` builtin function (analogous to `list`)
a_city = set(city for city in cities if 'a' in city)

# subtracting one set from another is well-defined and does the obvious thing
no_a_city = cities - a_city


print("a_city:", a_city)
print("no_a_city:", no_a_city)
</code></pre>

<p>Check out <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="noreferrer">the docs</a> for a flavor of the kinds of rich membership and comparison that sets allow. These operations can typically be expected to be more efficient than equivalent algorithms on lists, mainly due to the fact that sets are guaranteed not to have duplicate elements.</p>
    </div>