<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, it is great that you wrote this algorithm and that it works. I'll try to collect all remarks that I would normally note while reviewing this code having the formal task.</p>

<p><strong>Package naming</strong></p>

<p>According to <a href="https://www.oracle.com/technetwork/java/codeconventions-150003.pdf" rel="nofollow noreferrer">Java style guides</a> you are not allowed to name a package using capitals letters. The correct package name will be <code>foo</code>. However, <code>foo</code> is an extremely bad package name. It doesn't carry any meaningful information.  Taking into account that you are given a charts API your package could have been <code>com.yourcompanyname.charts</code>.</p>

<p><strong>Why do you use <code>java.awt</code> API?</strong></p>

<p>The task doesn't say that you should rely on the <code>java.awt</code> API. It might be that your app will expose its API through HTTP, have a CLI API, or have no UI. Using these APIs you explicitly force clients to stick to <code>java.awt</code>.</p>

<p><strong>Define your own domain classes</strong></p>

<p>Instead of the provided <code>Color</code> and <code>Point</code>, you could use your specific implementations that are designed to solve your business task. </p>

<p><strong>Initialization of points</strong></p>

<p>Initialization of points <code>topLeftCord</code>, <code>bottomRightCor</code> is broken in two steps. You assign a point in the field declaration and you set up coordinates in the constructor. Instead, it is better to perform initialization in one place.</p>

<p><strong>Boolean operations</strong></p>

<p>The following considered a code smell:</p>

<pre><code>if (condition) {
    return false;
}
return true;
</code></pre>

<p>Instead you can just:</p>

<pre><code>return !condition;
</code></pre>

<p><strong>Too much comments</strong></p>

<p>Often if you face a need to explain the code you are writing in a comment, it means that you can extract/structure your code in the way that your code will be self-explaining. Try to break up your complex conditions into methods/classes and use them so that a reader won't have to 'parse' blocks of 'if' conditions that carry 5 or more statements.</p>

<p><strong>Immutability</strong></p>

<p>Many places in your code are not designed to be mutable. For instance, points and color in the <code>Chart</code>. Make them final.</p>

<p><strong>Color declaration</strong></p>

<p>Why <code>BG_COLOR</code> is a constant? Why do you need this declaration in the first place? I would remove it. Also, the name violates <a href="https://www.oracle.com/technetwork/java/codeconventions-150003.pdf" rel="nofollow noreferrer">the Java style convention</a>.</p>

<p><strong>Do not create a <code>main</code> class</strong></p>

<p>Instead, you are supposed to cover your API with unit tests that prove that it works the way it is defined in the tasks. Not to say, it shouldn't be called <code>Foo</code>.</p>
    </div>