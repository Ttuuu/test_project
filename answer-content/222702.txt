<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Single responsibility</h3>

<p><code>PlayGame</code> is asking the user how many rounds to play, and it handles each round - all in the same loop. It also handles 'low-level' input validation, and it attempts to 'reset' the game after every round. That's too many different responsibilities for a single method.</p>

<p><code>Reset</code> doesn't reset anything, but it does show the results of the current game and it starts a new game - but only if the current game is in the last round.</p>

<p>That's all fairly confusing. It's better when classes and methods have a single, clearly defined responsibility, for example:</p>

<ul>
<li><code>int GetIntInput(string prompt, int minValue, int maxValue)</code> for input handling. This would keep asking until the user has given valid input. A boolean variant (for yes/no input) would also be useful.</li>
<li><code>void PlayGame(int rounds)</code> would play a single game. Internally, I would indeed use a for loop: <code>for (int round = 0; round &lt; rounds; round++) { ... }</code>. After that loop, it would display the results of the game and then return.</li>
<li><code>void Main(string[] args)</code> would ask the user how many rounds to play, and then call <code>PlayGame</code>. Afterwards, it can ask the user if they want to play again. This avoids the recursion between your <code>PlayGame</code> and <code>Reset</code> methods, which can lead to a stack overflow when playing many games in succession.</li>
<li>Methods like <code>bool Ties(string myChoice, string opponentChoice)</code> and <code>bool Beats(string myChoice, string opponentChoice)</code> would let you simplify the round-handling logic a bit.</li>
</ul>

<h3>Problems</h3>

<ul>
<li>In the <code>roundsInput</code> validation, the final <code>else</code> block will never be executed. It should be moved out of the <code>if (int.TryParse(numOfRounds, out roundsInput))</code> body.</li>
<li><code>else if (roundsInput &lt; 1 || roundsInput &gt; 10)</code> can be simplified to just <code>else</code>. The check above already takes care of the range check.</li>
<li>During gameplay, chosing anything other than 1, 2 or 3 causes the game to use your last choice again. It would be better to continue asking for valid input before proceeding.</li>
</ul>

<h3>Other notes</h3>

<ul>
<li>It's better to declare variables as close to where they will be used as possible, and to initialize them immediately, instead of declaring them up-front at the start of a method.</li>
<li><code>ArrayList</code> is an old type that was created before C# had generics. Nowadays you should use <code>List&lt;T&gt;</code> instead. With <code>rpsList</code> as a <code>List&lt;string&gt;</code>, the compiler knows that <code>rpsList[index]</code> will return a string, so you don't need those <code>ToString()</code> calls, and you can use the <code>==</code> operator for string comparisons instead of <code>Equals</code>.</li>
<li>The strings <code>"rock"</code>, <code>"paper"</code> and <code>"scissors"</code> are repeated several times throughout the code. It's easy to introduce a bug by making a typo. Use constants instead: <code>public const string Rock = "rock";</code>. Or rather, use an <code>enum</code>: <code>public enum Choice { Rock, Paper, Scissor }</code>. This makes it clear that a <code>Choice</code> can only be one of these 3 values, whereas a string can hold any possible string value.</li>
<li><code>out</code> variables can be declared inline. Also note that the results of <code>Console.ReadLine()</code> are only used once. This means that input parsing can be simplified to <code>if (int.TryParse(Console.ReadLine(), out int rounds))</code>.</li>
<li>Instead of repeating <code>rpsList[computer]</code>, you might as well store the choice directly (and rename that variable to something more descriptive): <code>opponentChoice = rpsList[r.Next(0, rpsList.Count)];</code>.</li>
<li>Instead of <code>if (condition) { ... }</code>, it's better to use an early-out return to reduce nesting: <code>if (!condition) return; ...</code>.</li>
<li>Static fields may seem like a convenient way to communicate between methods, but they lead to dependencies between methods that are hard to track, ultimately leading to code that is difficult to manage. It's better to communicate via parameters and return values only. In this case, <code>roundsInput</code> and <code>player</code> should be local variables in <code>PlayGame</code>, and <code>inPlay</code> and <code>Reset</code> are better solved in a different way (by letting <code>Main</code> or another top-level method handle the restarting).</li>
<li><code>if (wins &gt; loses) .. if (wins == loses) .. if (wins &lt; loses) ..</code> can be simplified to <code>if (wins &gt; loses) .. else if (wins == loses) .. else ..</code>. This also ensures that, even when a condition is modified, you never get more then one message.</li>
</ul>
    </div>