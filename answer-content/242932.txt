<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you mentioned about removing parentheses like you did in <code>def input expr</code> method definition, in general <a href="https://github.com/rubocop-hq/ruby-style-guide#method-parens" rel="nofollow noreferrer">is a bad practice</a>. My suggestions:</p>

<ul>
<li>Start running <a href="https://github.com/rubocop-hq/rubocop#installation" rel="nofollow noreferrer"><code>rubocop -a your_path/file.rb</code></a> to auto-correct most of style problems in your code.</li>
<li>Fix manually variable names like <code>parsedTokens</code> or method names like <code>parseTokens</code> to be <a href="https://github.com/rubocop-hq/ruby-style-guide#snake-case-symbols-methods-vars" rel="nofollow noreferrer">snake cased</a>.</li>
<li>Most of the time, there are no good reasons to use <a href="https://github.com/rubocop-hq/ruby-style-guide#no-class-vars" rel="nofollow noreferrer">class variables</a> like you did in <code>@@operators</code>. Actually, I'd move those vars. out of <code>OperatorInfo</code> and remove that class definition, then defining them as constants in the main class as:</li>
</ul>

<pre><code>class Interpreter
  # .freeze is to really define these variables as constants (immutables)
  OPERATORS = { '=' =&gt; 0, '+' =&gt; 1, '-' =&gt; 1, '*' =&gt; 2, '/' =&gt; 2, '%' =&gt; 2 }.freeze
  ASSIGNMENT_OPERATOR = '='.freeze
</code></pre>

<ul>
<li>You can define readers in a single call, like:</li>
</ul>

<pre><code>  class ParseUnit
    attr_reader :overall_index, :nest_level, :index_in_level
</code></pre>

<ul>
<li>If possible, define sub classes like <code>OperatorNode</code> in separate files. If not, defining them under <code>private</code> <a href="https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/UselessAccessModifier" rel="nofollow noreferrer">isn't really effective</a>:</li>
</ul>

<pre><code>class Interpreter
  def self.calling_inner_class
    OperatorNode
  end

  private
  class OperatorNode
    # ...
  end
end

Interpreter.calling_inner_class # Interpreter::OperatorNode
# This shouldn't work for private classes
Interpreter::OperatorNode # =&gt; Interpreter::OperatorNode
</code></pre>

<p>An option to make them really private is adding <a href="https://apidock.com/ruby/Module/private_constant" rel="nofollow noreferrer"><code>private_constant</code></a> to every class definition like:</p>

<pre><code>class Interpreter
  def self.calling_inner_class
    # This operates normally
    OperatorNode
  end

  class OperatorNode
    # ...
  end
  private_constant :OperatorNode
end

Interpreter.calling_inner_class # Interpreter::OperatorNode
# Throwing an error, which is correct
Interpreter::OperatorNode # NameError: private constant Interpreter::OperatorNode referenced
</code></pre>
    </div>