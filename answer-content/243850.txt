<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To be honest this is very over-engineered. The same can be done with very little to no JavaScript by taking advantange of the features of CSS. But one by one.</p>
<hr>
<p>First off the class name <code>content</code> is bad choice. It is very generic. It runs into the danger to be used in some other context on the same page and it doesn't describe what you are using it for. Something like <code>selectable</code> would be better.</p>
<hr>
<p>Using <code>className</code> to identify elements is for one verbose, for the other unrelatiabe. An element, for example, that has both the classes <code>content</code> and <code>selected</code> could have a <code>className</code> <code>"content selected"</code> or <code>"selected content"</code> or <code>"content selected someOtherClass"</code>, etc. Just because you set it to <code>"content selected"</code> there is no guarantee that it will stay that.</p>
<p>Instead you should use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList" rel="nofollow noreferrer"><code>classList</code></a> property. It allows you the set, remove, toggle and check for separate classes (and more).</p>
<p>So, for example, the block</p>
<pre><code>const selectedContentReference = document.querySelectorAll('.selectedContent');
for (div of selectedContentReference) {
  if (div.parentNode.className == 'content') {
    div.className = 'selectedContent contentThatShouldBeHidden';
  }
  else if (div.parentNode.className == 'content selected') {
    div.className = 'selectedContent';
  }
}
</code></pre>
<p>can become:</p>
<pre><code>const selectedContentReference = document.querySelectorAll('.selectedContent');
for (div of selectedContentReference) {
  const parentIsSelected = div.parentNode.classList.contains("selected");
  div.classList.toggle("contentThatShouldBeHidden", !parentIsSelected);
}
</code></pre>
<hr>
<p>There is more that could be said to the JavaScript, however all this class toggling is unnecessary. By using, for example, the CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator" rel="nofollow noreferrer">child combinator</a> and the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not" rel="nofollow noreferrer"><code>:not</code> pseudo class</a> you can show and hide the approprate texts depending on the <code>selected</code> class on the parent element alone.</p>
<p>Using the same HTML and limiting the <code>toggle</code> function to:</p>
<pre><code>// Moving the list of elements outside the function, because the list doesn't change
const contentReference = document.querySelectorAll('.content');

function toggle(el) {
  for (div of contentReference) { div.classList.remove("selected"); }
  el.classList.add("selected");
}
</code></pre>
<p>and following CSS:</p>
<pre><code>.content:not(.selected) &gt; .selectedContent, 
.content.selected &gt; .notselectedContent {
   display: none;
}
</code></pre>
<hr>
<p>And as I mentioned at the beginning it is possible to do this without JavaScript. HTML has such a toggling feature built in: radio buttons. And CSS can be used to style elements depending on if a radio button is selected (<code>:checked</code>) or not, even if the radio button isn't visible.</p>
<p><a href="https://jsfiddle.net/27kw8qe1/" rel="nofollow noreferrer">https://jsfiddle.net/27kw8qe1/</a></p>
    </div>