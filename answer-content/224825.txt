<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Interesting question;</p>

<p><strong>High Level Overview</strong></p>

<p>The code is close to good, I definitely would not go for a recursive solution. These challenges often have at least 1 test with a really long string.</p>

<p><strong>Naming</strong></p>

<ul>
<li>Some of your naming choices are unfortunate:

<ul>
<li><code>possibleStrs</code> -&gt; I would go for <code>possibleStrings</code>, or <code>combinations</code>, or <code>out</code></li>
<li>I prefer <code>&lt;verb&gt;&lt;thing&gt;</code> over <code>&lt;thing&gt;&lt;verb&gt;</code>; so <code>mapDigits</code> over <code>digitMap</code> or even <code>generatePossiblePhoneWordCombinations</code></li>
</ul></li>
</ul>

<p><strong>Comments</strong></p>

<ul>
<li>I like your approach to commenting</li>
</ul>

<p><strong>JSHint.com</strong></p>

<ul>
<li>Your code is only missing 2 semicolons, consider using <a href="http://jshint.com/" rel="nofollow noreferrer">http://jshint.com/</a> to perfect your code</li>
</ul>

<p><strong>Production Code</strong></p>

<ul>
<li>Remove all references to <code>console.log()</code></li>
<li>You are mixing variable declarations and logic, I would group the variable declarations up front</li>
</ul>

<p><strong>Alternatives</strong></p>

<ul>
<li><p>The below could use a built-in function</p>

<pre><code>const indexes = []; // index addresses of charsets, in order
for (let i = 0; i &lt; length; i++) {
  indexes.push(0);
}
</code></pre>

<p>could be</p>

<pre><code>const indexes = Array(length).fill(0);
</code></pre></li>
</ul>

<p><strong>Counter Proposal</strong></p>

<p>The logic you are using afterwards is a little convoluted, and is hard to read. 
In essence, you can convert the input string to an array, and use that array to keep track of your state.</p>

<pre><code>// "23" should return ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
function mapDigits(s){

  const digitMapping = {
    2: ['a', 'b', 'c'],
    3: ['d', 'e', 'f'],
    4: ['g', 'h', 'i'],
    5: ['j', 'k', 'l'],
    6: ['m', 'n', 'o'],
    7: ['p', 'q', 'r', 's'],
    8: ['t', 'u', 'v'],
    9: ['w', 'x', 'y', 'z']
  }

  //Get the digits, ignore ones and zeroes
  let digits = s.split('').filter(i =&gt; i &gt; 1);
  let out = [], tmp = [];

  //Some shortcuts
  if(!digits.length){
    return out;
  }
  if(digits.length == 1){
    return digitMapping[digits[0]];
  }

  //We're still here, prep out and digits (shift modifies digits)
  out = digitMapping[digits.shift()];

  while(digits.length){
    const nextLetters = digitMapping[digits.shift()];
    tmp = out;
    out = [];
    tmp.forEach(s =&gt; nextLetters.forEach(c =&gt; out.push(s+c)));   
  }

  return out;
}


console.log(mapDigits("23"));
</code></pre>
    </div>