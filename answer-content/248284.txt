<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than <code>system()</code> you should <code>popen()</code>.</p>
<p>The difference is that system runs the command in a sub process with no access to this processes, while popen runs the command in a sub processes <strong>but</strong> provides accesses to the input and output streams of the sub processes.</p>
<p>This will allow you to run the sub-processes and stream input to the processes directly (from the input field you provided for standard input) and then read output from the processes and write it to the output field in your user interface.</p>
<pre><code>FILE*  proc = popen(command);
std::string inputFromUser = getUserInputFromUI();
// Using fwrite() correctly left to user.
// You need to check for errors and continue etc.
fwrite(inputFromUser.c_str(), 1, inputFromUser.size(), proc);

char  buffer[100];
std::size_t size;
while((size = fread(buffer, 1, 100, proc)) != 0) {
    // Check for read errors here.
    sendToUserInterface(std::string(bufffer, buffer + size));
}

pclose(proc);
 
</code></pre>
<hr>
<p>Sorted of related you don't need to save your pythong script as a file. The python command accept the <code>-</code> as a name which means read the script from the standard input rather than from the named file.</p>
<p>So you can run the python command (with popen()) then write the script you want to execute to the input stream of the file produced.</p>
<p>This will remove the need for any intermediate files.</p>
    </div>