<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming modern C#, there are a couple of things you could do to be more concise:</p>

<ol>
<li><p>Instead of the dance with <code>while((line = reader.NextLine())...)</code> you can just use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.file.readlines" rel="nofollow noreferrer"><code>File.ReadLines</code></a> and <code>foreach</code> over that.</p></li>
<li><p>You can declare variables inside the <code>TryGetValue</code> like so: <code>charToCount.TryGetValue(currentChar, out int count)</code> where you can use <code>count</code> afterwards without having to declare it on its own line.</p></li>
<li><p>While keeping score of your most seen <code>char</code> inside the loop is certainly more efficient (as @pattpass did in their answer), you could also extract the character with the highest count at the end with a still readable oneliner: </p>

<pre><code>return charToCount.OrderByDescending(cc =&gt; cc.Value).First().Key;
</code></pre></li>
<li><p>What's completely absent in your method is error handling. What happens if the file does not exist or you aren't allowed to access it? It seems like you handle empty files with returning <code>\0</code> and <code>0</code>. It is debatable if that's what one would expect.</p></li>
</ol>

<p>All in all, your code could look somewhat likes this:</p>

<pre><code>static char GetMostRepeatedChar(string filename)
{
    // you could also not handle this case here and delegate
    // that responsibility to the caller
    if(!File.Exists(filename))
    {
        return '\0';
    }

    var charCount = new Dictionary&lt;char, int&gt;();
    foreach (var line in File.ReadLines(filename))
    {
        foreach (var c in line)
        {
            charCount.TryGetValue(c, out int count);
            charCount[c] = count + 1;
        }
    }

    if (charCount.Count == 0)
    {
        // this is debatable and depends on the real use case
        // in production code you should never throw a raw 'Exception'
        // but rather something more specific
        throw new Exception("empty file"); 
    }

    return charCount.OrderByDescending(cc =&gt; cc.Value).First().Key;
}
</code></pre>
    </div>