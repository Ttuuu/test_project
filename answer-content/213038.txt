<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The anonymous functions and hardcoded values can be abstracted. For example:</p>

<pre><code>function click(value){
    utils.clickHotspotElementAtIndex(view, value, Function);
}

function tests(value){
    expect(utils.verifyHotSpotHasBeenHiglightedAtIndex(view, value)).toBe('true');
}

function test () {
    [0, 1, 2].map(tests);
}
</code></pre>

<p>Then the asynchronous code can be modernized via <code>async/await</code>:</p>

<pre><code>async function sequencer() {
    const clicks = [1, 0, 2].map(click);
    await Promise.all(clicks);
}

function run() {
    beforeEach(sequencer);
    it('Then allow highlighting multiple responses', test);
}
</code></pre>

<p>And the call can simply be a one-liner:</p>

<pre><code>describe('When a user selects a multiple-response Hotspot response', run);
</code></pre>

<p><strong>References</strong></p>

<ul>
<li><p><a href="https://jasmine.github.io/tutorials/async" rel="nofollow noreferrer">Jasmine Tutorial: Asynchronous work</a></p></li>
<li><p><a href="https://lavrton.com/javascript-loops-how-to-handle-async-await-6252dd3c795/" rel="nofollow noreferrer">JavaScript loops - how to handle async/await</a></p></li>
</ul>
    </div>