<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to speed it up further, you can use slice assignment instead of the inner "for" loop:</p>

<pre><code>def primes_slice(limit):
    is_prime = [False] * 2 + [True] * (limit - 1)
    for n in range(int(limit**0.5 + 1.5)): # stop at ``sqrt(limit)``
        if is_prime[n]:
            is_prime[n*n::n] = [False] * ((limit - n*n)/n + 1)
    return [i for i, prime in enumerate(is_prime) if prime]
</code></pre>

<p>That lets C code do the former inner loop for you under the covers, at the expense of some complicated stuff on the right side of the slice assignment.  Even that can go away if you use the bitarray package for is_prime, which also reduces the memory footprint considerably.  This tweak gives me about a 2x speed boost with n = 10,000,000</p>

<pre><code>$ time ./prime_rosetta_slice.py 1e7
664579

real    0m1.134s
user    0m0.797s
sys     0m0.344s
$ time ./prime_rosetta_upto.py 1e7
664579

real    0m2.242s
user    0m1.875s
sys     0m0.281s
</code></pre>

<p>For the next performance improvement, try keeping only odd numbers &gt; 2 in is_prime and then manually returning 2 as a special case.</p>
    </div>