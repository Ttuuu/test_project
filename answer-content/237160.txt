<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    var sortedStr = string.Concat(str.OrderBy(c =&gt; c));
    string.Concat(sortedStr.OrderBy(c =&gt; c));
</code></pre>
</blockquote>

<p>I think the second line is redundant as you don't bind its result to anything.</p>

<hr>

<blockquote>
  <p><code>var anagrams = new List&lt;List&lt;string&gt;&gt;();</code></p>
</blockquote>

<p>This is also redundant, because you actually have the lists of anagram items in the dictionary. So instead of moving the anagram lists from the dictionary to this list, you can just query the dictionary like:</p>

<pre><code>return anagramsTable.Select(kvp =&gt; kvp.Value).ToList();
</code></pre>

<p>at the end of the method.</p>

<hr>

<p>Instead of this:</p>

<blockquote>
<pre><code>    if (anagramsTable.ContainsKey(sortedStr))
    {
      anagramsTable[sortedStr].Add(str);
    }
    else
    {
      var values = new List&lt;string&gt;();
      values.Add(str);
      anagramsTable.Add(sortedStr, values);
    }
</code></pre>
</blockquote>

<p>You should use (as BCdotWEB mentions) <code>TryGetValue()</code>:</p>

<pre><code>    if (!anagramsTable.TryGetValue(sortedStr, out var anagrams))
    {
      anagramsTable[sortedStr] = anagrams = new List&lt;string&gt;();
    }

    anagrams.Add(sortedStr);
</code></pre>

<hr>

<p>You could go the full linq way though:</p>

<pre><code>public static List&lt;List&lt;string&gt;&gt; find(List&lt;string&gt; strList)
{
  return strList.GroupBy(s =&gt; string.Concat(s.OrderBy(c =&gt; c))).Select(gr =&gt; gr.ToList()).ToList();
}
</code></pre>
    </div>