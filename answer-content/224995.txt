<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reviewing your current app</h2>

<p>Nice work so far! Calculators make educational projects because you can incrementally scale up the complexity. As the application grows, numerous design decisions in maintaining expression state need to be made and interesting parsing and equation evaluation situations arise. Here are some thoughts on the current code:</p>

<h3>Typo</h3>

<p><code>showResult: this.state.result</code> should be <code>show: this.state.result</code>. This typo causes <kbd>=</kbd> to break.</p>

<h3>Keep style consistent</h3>

<p>Code with inconsistent style is difficult to read and increases the cognitive load on any humans working with the code, increasing the chances of bugs.</p>

<ul>
<li>Instead of switching between snake_case and camelCase, use camelCase always in JS (class/component names are PascalCase).</li>
<li>Although semicolons are, in most cases, optional (my preference is to always include them), the code switches back and forth between including them and not.</li>
<li>Avoid goofy variable names like <code>math_it_up</code>. This is distracting and unclear.</li>
<li>Remove <code>console.log</code> calls from code before releasing it.</li>
</ul>

<h3>Separate concerns</h3>

<p>Even though pains were taken to separate <code>renderCalculationKeys</code> and <code>renderNumbers</code>, they're virtually identical code. Both share the same overburdened <code>onClick</code> handler which uses nested conditionals to differentiate the actions. Conditionals are undesirable because they make state and flow difficult to reason about and have low semantic value. Using separate handlers makes it possible to eliminate this conditional and compartmentalize handler logic into distinct chunks.</p>

<h3>Use ES6 syntax</h3>

<ul>
<li><code>math_it_up</code> takes advantage of first-class functions and is easily extensible for new operations you might wish to add. Arrow functions can simplify this abstraction, eliminating noisy <code>return</code> keywords. Calling the returned function whenever code elsewhere in the class needs an evaluation is a bit of a burden; wrapping this object in an <code>evaluate()</code> function simplifies the calling code.</li>
<li>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring</a> to avoid repeating <code>this.state</code>. If React 16.8 is available for your project, try <a href="https://reactjs.org/docs/hooks-intro.html" rel="nofollow noreferrer">hooks</a>.</li>
</ul>

<h3>Additional remarks</h3>

<ul>
<li>The <code>Key</code> component is misleadingly named because it actually renders plural <code>Keys</code>.</li>
<li>Temporary variables like <code>const arr = [...]</code> which are used only once on the next line could be <code>map</code>ed in one statement, cutting out the extra step. Even if it is kept, the name <code>arr</code> could be clearer as <code>numbers</code> or <code>operators</code>.</li>
<li><code>this.state.result ? this.state.result : null</code> could be <code>this.state.result || null</code>.</li>
<li>Since the component is a calculator, consider calling it <code>Calculator</code> instead of <code>App</code>, which is usually a generic top-level container.</li>
</ul>

<hr>

<h2>A rewrite suggestion</h2>

<p>Since you've asked for the ability to add multiple numbers, you might find that the current code is a bit unwieldy due to the excessive state. There are a few ways to solve this. The approach I took is to store the expression in an array called <code>this.state.expr</code>. This makes it possible to use the length of the expression array to determine which buttons cause which action in a given state. This isn't a general solution should you wish to expand to longer equations, but it's a reasonable choice for supporting the current desired functionality.</p>

<p>A user may want the option to start a fresh expression by pressing a number key directly after <kbd>=</kbd> was pressed. This can be achieved with a <code>justComputed</code> flag.  I've also used parsing to avoid leading zeroes like <code>007</code>. I left Infinity as the outcome of division by zero and chose to ignore numerical overflow.</p>

<p>Here's a version that addresses the above points in addition to supporting multi-digit numbers:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class Calculator extends React.Component {
  state = {expr: ["0"], justComputed: false};
  
  evaluate() {
    const {expr} = this.state;
    return {
      "+": (x, y) =&gt; x + y,
      "-": (x, y) =&gt; x - y,
      "/": (x, y) =&gt; x / y,
      "*": (x, y) =&gt; x * y,
    }[expr.splice(1, 1)](...expr.map(e =&gt; +e));
  }
  
  handleEq = e =&gt; {
    if (this.state.expr.length === 3) {
      this.setState({
        expr: ["" + this.evaluate()], 
        justComputed: true
      });
    }
  };

  handleNum = e =&gt; {
    const {justComputed, expr} = this.state;
    const num = e.target.name;

    if (justComputed) {
      this.setState({
        expr: [num], 
        justComputed: false
      });
    }
    else if (expr.length === 2) {
      this.setState({expr: expr.concat(num)});
    }
    else {
      this.setState({
        expr: expr.concat(+(expr.pop() + num) + "")
      });
    }
  };
  
  handleOp = e =&gt; {
    const {expr} = this.state;
    const op = e.target.name;
    
    if (expr.length === 1) {
      this.setState({
        expr: expr.concat(op), 
        justComputed: false
      });
    }
    else if (expr.length === 2) {
      this.setState({expr: expr.pop() &amp;&amp; expr.concat(op)});
    }
    else {
      this.setState({expr: ["" + this.evaluate(), op]});
    }
  };
  
  render() {
    const {expr} = this.state;
    return (
      &lt;div&gt;
        &lt;Keys 
          handleNum={this.handleNum} 
          handleOp={this.handleOp} 
          handleEq={this.handleEq} 
        /&gt;
        &lt;h1&gt;{expr.length &lt; 3 ? expr[0] : expr[2]}&lt;/h1&gt;
      &lt;/div&gt;
    );
  }
}

const Keys = ({handleNum, handleOp, handleEq}) =&gt; 
  &lt;div&gt;
    {[..."0123456789"].map(e =&gt;
      &lt;button
        key={e}
        name={e} 
        onClick={handleNum}
      &gt;{e}&lt;/button&gt;
    )}
    {[..."+-/*"].map(e =&gt;
      &lt;button
        key={e}
        name={e} 
        onClick={handleOp}
      &gt;{e}&lt;/button&gt;
    )}
    &lt;button
      key="="
      name="="
      onClick={handleEq}
    &gt;=&lt;/button&gt;
  &lt;/div&gt;
;

ReactDOM.render(&lt;Calculator /&gt;, document.getElementById("root"));</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id="root"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<hr>

<h2>Next steps</h2>

<p>Some features you might consider adding:</p>

<ul>
<li>Show the current expression as it's being built in a separate element.</li>
<li>Support negative numbers.</li>
<li>Add a <kbd>.</kbd> decimal button. Ensure that states such as <code>1.2.3</code> are disallowed.</li>
<li>Add undo/redo/history support and/or <kbd>CE</kbd>, <kbd>C</kbd> and <kbd>Backspace</kbd> buttons.</li>
<li>Add CSS and create an attractive UI.</li>
<li>Make it possible to add long expressions such as <code>5+3*5/-2-7</code>.</li>
<li>Add functions such as sqrt, sin, cos, tan, log, etc.</li>
<li>Add support for parenthesis.</li>
<li>Support big integers and scientific notation.</li>
</ul>
    </div>