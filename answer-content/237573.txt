<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Remove unnecessary steps</h2>

<pre><code>for (int i = 0; i &lt; field_number - 1; ++i) 
{ /*read discard*/ }
double value;
// read the needed value now
</code></pre>

<p>This will make sure that it will not do unnecessary steps if the value needed is the very first one.</p>

<h2>Do not copy around</h2>

<p>I believe Rcpp would provide some way to access underlying <code>char*</code>. That can be used to construct <code>std::string_view</code>, or use the <code>char*</code> directly.</p>

<h2>Use better standard library functions</h2>

<p>My first candidate is famous (infamous) function called <code>std::from_chars</code>. It was accepted in C++17, but the support for that is only available with VC++'s standard library (I'm as surprised as you are, the reader, though getting FP parsing right is very hard). Basically it ignores all of the limitations of standard streams, from buffer structures to locales.</p>

<p>The second candidate would be <code>std::strtod</code>, or some such. Notice that <code>std::stod</code> is not a good alternative, because it requires copying parts of the string.</p>

<h2>Going beyond standard</h2>

<p>One of the good options is <a href="https://github.com/fmtlib/fmt" rel="noreferrer">fmtlib</a>. It has convenient interface, and is actively developed. Part of it is event coming to standard library, but unfortunately not the one we are interested in.</p>

<p>I'm not sure how faster it will get, but perhaps <a href="https://www.boost.org/doc/libs/1_72_0/libs/spirit/doc/html/index.html" rel="noreferrer">Boost.Spirit</a> may be a good candidate. It will certainly be strong spirits to your compiler.</p>

<h2>Facts</h2>

<p>Of course, the benchmarks will tell which way is better. May be everything I've told is heresy. </p>

<h2>Alternative implementation</h2>

<pre><code>#include &lt;charconv&gt;
#include &lt;string_view&gt;
#include &lt;cmath&gt;

double strparse(std::string_view s, int field, int a, int b) {
    double candidates[3];
    auto format = std::chars_format::fixed;
    auto start_point = s.data();
    auto end_point = s.data() + s.size();
    switch (field) {
    case 0:
        start_point = std::from_chars(start_point, end_point, candidates[0], format);
    case 1:
        start_point = std::from_chars(start_point, end_point, candidates[1], format);
    case 2:
        start_point = std::from_chars(start_point, end_point, candidates[2], format);
    }

    double ad = a;
    double bd = b;
    return std::abs(ad + bd - candidates[field]);
}
</code></pre>

<p>Well, here you have it. No copying around, manual loop unroll to prevent unnecessary steps, exact flags to maximize performance in standard library calls.</p>

<p><a href="https://godbolt.org/z/x9jD3X" rel="noreferrer">Godbolt link</a>.</p>

<p>Unfortunately I do not have convenient access to a windows machine to test the implementation.</p>
    </div>