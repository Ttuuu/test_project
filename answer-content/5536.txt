<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The fastest way to do this would be to align your data on 16-byte boundaries, then the entire copy just becomes 5 copies through XMM registers.</p>

<p>This is over <strong><em>twice as fast</em></strong> as your version on my machine.</p>

<p>Store your data like this:</p>

<pre><code>#include &lt;xmmintrin.h&gt;
struct Data
{
    union
    {
        int i[20];
        __m128 v[5];
    };
};
</code></pre>

<p>Then the copy function is just:</p>

<pre><code>void memcpyv5(__m128* __restrict b, const __m128* __restrict a)
{
    __m128 t0 = a[0];
    __m128 t1 = a[1];
    __m128 t2 = a[2];
    __m128 t3 = a[3];
    __m128 t4 = a[4];
    b[0] = t0;
    b[1] = t1;
    b[2] = t2;
    b[3] = t3;
    b[4] = t4;
}

// Example
Data dst, src;
memcpyv5(dst.v, src.v);
</code></pre>

<p>Assembly output:</p>

<pre><code>__Z8memcpyv5PU8__vectorfPKS_:
LFB493:
    pushq   %rbp
LCFI2:
    movq    %rsp, %rbp
LCFI3:
    movaps  16(%rsi), %xmm3
    movaps  32(%rsi), %xmm2
    movaps  48(%rsi), %xmm1
    movaps  64(%rsi), %xmm0
    movaps  (%rsi), %xmm4
    movaps  %xmm4, (%rdi)
    movaps  %xmm3, 16(%rdi)
    movaps  %xmm2, 32(%rdi)
    movaps  %xmm1, 48(%rdi)
    movaps  %xmm0, 64(%rdi)
    leave
    ret
</code></pre>
    </div>