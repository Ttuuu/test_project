<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should be able to get away with handling only two error cases (empty or no parameter) and three path possibilities: Absolute path, relative path which starts with <code>./</code> and other ("dangerous") paths:</p>

<pre><code>mkcd() {
    if [ -z "${1:-}" ]
    then
        printf '%s\n' 'Usage: mkcd PATH'
        return 2
    fi

    case "$1" in
        /*|./*) break;;
        *) set -- "./$1";;
    esac

    mkdir -p "$1" &amp;&amp; cd "$1"
}
</code></pre>

<p>You won't need the <code>--</code> separator. It might be surprising that <code>mkcd foo/../bar</code> would create <em>both</em> directories if they don't exist, but that's more to do with <code>mkdir</code> than the script.</p>

<p>Of course, this doesn't recursively simplify the path, which you'd need to do if you want to create the simplest absolute path defined (as printed by <code>readlink -f</code>, which is not in POSIX). But this would be surprising behavior, since <code>cd foo/../..</code> fails even when <code>../</code> exists.</p>
    </div>