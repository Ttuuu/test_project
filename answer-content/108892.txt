<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've essentially created a "View Model" for your API requests, which there's nothing wrong with doing that. Sometimes you want to abstract away your internal Domain Model and not have it exposed as params in the request.</p>

<p>That being said, you can DRY things up a bit by creating a base class:</p>

<pre><code>class ApiModel
  include ActiveModel::Validations
  include ActiveModel::Conversion
  include ActiveModel::Naming

  EMAIL_FORMAT = /\A[-a-z0-9_+\.]+\@([-a-z0-9]+\.)+[a-z0-9]{2,4}\z/i

  def initialize(attributes = {})
    attributes.each do |name, value|
      raise KeyError, "Attribute key '#{name}' is not supported" unless respond_to? "#{name}="
      send "#{name}=", value
    end
  end

  def persisted?
    false
  end
end
</code></pre>

<p>Now your <code>EmailChecker</code> class becomes a 4-liner:</p>

<pre><code>class EmailChecker &lt; ApiModel
  attr_accessor :email
  validates_format_of :email, :with =&gt; EMAIL_FORMAT
end
</code></pre>

<p>Next, I'd like to focus on the <code>initialize</code> method. In your version:</p>

<pre><code>def initialize(attributes = {})
  attributes.each do |name, value|
    send("#{name}=",value)
  end
end
</code></pre>

<p>The <code>send</code> method call is left unguarded. You can specify keys in the Hash that do not correspond to setter methods in your object, leaving developers scratching their heads about why a method is not supported. Instead, this is an opportunity to fail early, and fail loud[er]. I would test to see if the attribute key is a valid setter, and then throw your own exception:</p>

<pre><code>def initialize(attributes = {})
  attributes.each do |name, value|
    raise KeyError, "Attribute key '#{name}' is not supported" unless respond_to? "#{name}="
    send "#{name}=", value
  end
end
</code></pre>

<p>Raising a <code>KeyError</code> is more appropriate here, because the <em>real</em> problem is having an incorrect key in the <code>attributes</code> argument. The error message is informative to developers so they can fix the problem, yet does not give away any secrets.</p>

<p>For instance, if you send <code>{ foo: 'bar' }</code> as the attributes, then you'll get the following error message:</p>

<blockquote>
  <p><strong>KeyError:</strong> Attribute key 'foo' is not supported</p>
</blockquote>

<p>The <code>persisted?</code> method is kind of confusing to me. This object is not persisted, so why even have this method? Unless this is overriding functionality baked in from the <code>ActiveModel</code> mixins, I would just remove it.</p>
    </div>