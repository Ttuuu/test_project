<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python 3.8 adds <a href="https://docs.python.org/3/library/math.html?highlight=isqrt#math.isqrt" rel="nofollow noreferrer">math.isqrt()</a>.  Using this, you can make a much less cryptic perfect square check:</p>
<pre><code>high == math.isqrt(high) ** 2
</code></pre>
<hr>
<h2>Memory Optimization (speed too!)</h2>
<p>Using a list of Boolean flags:</p>
<pre><code>numbers = [False]*2 + [True]*(n-2)
</code></pre>
<p>is very space inefficient.  You are using 28 bytes per flag!  By packing 8 flags into one byte, youâ€™d achieve a 99.5% memory usage reduction.  Doing this packing yourself would be slow and awkward.  Fortunately, there is a package that does this for you: <a href="https://pypi.org/project/bitarray/" rel="nofollow noreferrer"><code>bitarray</code></a>.</p>
<pre><code>numbers = bitarray.bitarray(n)
numbers.setall(True)
numbers[0:2] = False
</code></pre>
<p>Notice that slice assignment from a scalar Boolean?  It gets better when you use it to cross off the multiples of a prime candidate:</p>
<pre><code>if prime_candidate:
    result.append(index)
    numbers[index*index::index] = False
</code></pre>
<p>and done!</p>
<hr>
<h2>Integer division</h2>
<p>You should really use integer division <code>//</code> in <code>find_first_multiple_odds()</code>:</p>
<pre><code>x = p * ((low // p) + (low % p != 0))
...
return (x - low) // 2
</code></pre>
<hr>
<h2>PEP-8</h2>
<ul>
<li>use <code>snake_case</code> function names.  <code>UpperCase</code> is for class names</li>
<li>use a space around binary operators</li>
</ul>
    </div>