<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This:</p>
<pre><code>if (UserDetails.accessId == 2 || UserDetails.accessId == 3)
</code></pre>
<p>Consider using an Enum instead of hardcoding integer values eg:</p>
<pre><code>enum AccessLevel : int
{
    None = 0,
    Manager = 2,
    SuperUser = 3
}
</code></pre>
<hr>
<p>You can use <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/verbatim" rel="nofollow noreferrer">verbatim strings</a> for your SQL statements:</p>
<pre><code>string sql = @"SELECT f.id, f.Document_Reference, f.document_name,
f.path, f.version, f.section,
date(f.last_review_date), date(f.review_date),
u.username, f.date_modified
from files f join users u on f.user_modified = u.id;";
</code></pre>
<hr>
<p>There is <strong>repetitive code</strong>: <code>bunifuFlatButton1_Click</code> and <code>viewFile_Click</code> are almost the same. Surely you can merge both into one function and pass the control name as argument. Then your code becomes and shorter and easier to maintain.</p>
<hr>
<p>Here you set the header titles for your DGV:</p>
<pre><code>                        //Assign Header Titile for each column loaded
                        data.Columns[0].HeaderText = "ID";
                        data.Columns[1].HeaderText = "Document Reference";
                        data.Columns[2].HeaderText = "Document Name";
                        data.Columns[3].HeaderText = "Path";
                        data.Columns[4].HeaderText = "Version Number";
                        data.Columns[5].HeaderText = "Section";
                        data.Columns[6].HeaderText = "Last Review Date";
                        data.Columns[7].HeaderText = "Next Review Date";
                        data.Columns[8].HeaderText = "User Last Modified";
                        data.Columns[9].HeaderText = "Modified Date";

                        //Hide Specific columns
                        data.Columns[0].Visible = false;
                        data.Columns[3].Visible = false;
</code></pre>
<p>There is nothing wrong with that but personally I prefer to separate design from programming logic as much as possible. So I would just edit the DGV in design mode and put the header titles directly in it. You can also hide some columns by default. That makes the code shorter (less scrolling).
The one thing that I change at runtime is the column width so that it fits the cell contents. Most attributes are otherwise static.</p>
<hr>
<p>I think you can can simplify this part:</p>
<pre><code>    //Open NewDocument Form
    bool Isopen = false;

    foreach (Form f in Application.OpenForms)
    {
        if (f.Text == "New Document")
        {
            Isopen = true;
            f.BringToFront();
            if (f.WindowState == FormWindowState.Minimized)
            {
                f.WindowState = FormWindowState.Normal;
            }
            break;
        }
    }
    
    if (Isopen == false)
    {
        var newDoc = new AddNewDocument(this);
        newDoc.Show();
    }
</code></pre>
<p>Basically you can check if a form is open or not in a more concise fashion:</p>
<pre><code>public bool CheckIfFormIsOpen(string formname)
{
    bool formOpen= Application.OpenForms.Cast&lt;Form&gt;().Any(form =&gt; form.Name == formname);

    return formOpen;
}
</code></pre>
<p>Have a look <a href="https://stackoverflow.com/a/21215534/6843158">here</a></p>
<hr>
<p>The good thing is that there are adequate <strong>comments</strong> and the code is quite clear to understand.</p>
<hr>
<p>You can probably declutter the code further by removing <strong>unused imports</strong> unless you have more code in this form that relies on those imports.</p>
    </div>