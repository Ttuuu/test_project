<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not really sure if your code matches the intention of the task, albeit you possibly might get the expected results.</p>

<p>At first, you are producing a new array, whereas the task is <em>'all elements raise their values'</em>, which I read that you should modify the array in place.</p>

<p>Then I'd rather assume that you should implement a single operation in a function which then gets called <code>M</code> times, example:</p>

<pre><code>void applyOperation(int array[], size_t length, size_t begin, size_t end, int operator);

int array[] = { 1, 1, 1, 4, 5, 6 };
applyOperation (array, sizeof(array)/sizeof(*array), 1, 5, 2);
applyOperation (array, sizeof(array)/sizeof(*array), 2, 3, 10);
// print result
</code></pre>

<p><code>M</code> is 2, function is called twice (I renamed <code>N</code> to <code>length</code>...).</p>

<p>Whether you now implement the function to execute one operation at a time or all at once, you shouldn't iterate over the entire array and then check if the index is in the range, instead you'd iterate over the range directly:</p>

<pre><code>void applyOperation(int array[], size_t length, size_t begin, size_t end, int operator)
{
    --begin; --end; // they want one-based indices? bad idea for C++,
                    // but OK, then let's adjust them to zero-based...

    for(;; begin != end; ++begin)
    {
         array[begin] += operator;
    }
}
</code></pre>

<p>Looks much easier, doesn't it? What's actually lacking yet is checking the range of <code>begin</code> and <code>end</code>, assuming you manage this yourself...</p>

<p>Now <em>if</em> you want to have all operations in one single go, then it is much more comprehensive if you iterate over the operations in first place:</p>

<pre><code>void applyOperations(int input[], int operations[], int N, int M)
{
    for(int i = 0; i &lt; M; ++i, operations += 3)
    // this assumes: each operation occupies three subsequent values
    {
         // now using operations[0] as begin, operations[1] as end
         // and operations[2] as operator just like above

         // it might be unacceptable to modify the operations array, then you'd
         // need a separate loop variable compared to above; but IF it is,
         // then you should keep the operations const anyway:
         //int const operations[]
    }
}
</code></pre>

<p>Finally: You tagged the question C++ – your code could as well be good old C, though. In C++, you'd rather use <code>std::array</code> or <code>std::vector</code> than raw arrays. Whichever you use, you don't have to provide size/length separately, both come with their own member function <code>size()</code> giving the number of elements (not size in bytes as <code>sizeof</code> operator does, so you'd avoid the ugly <code>sizeof(x)/sizeof(*x)</code> at the same time – even more important: you could provide a bad value for <code>length</code>, this cannot happen with the C++ containers as these manage their length/size on their own).</p>

<pre><code>void applyOperation(std::vector&lt;int&gt; values, size_t begin, size_t end, int operator)
{
    --begin; --end;
    for(;; begin != end; ++begin)
    {
         values[begin] += operator;
    }
}
</code></pre>

<p>The loop still looks similar, but range checking would now use <code>values.size()</code> instead of a length parameter.</p>

<p>One final note: Did you notice that I changed the parameter types to <code>size_t</code>? Two reasons for this:</p>

<ol>
<li><code>size_t</code> is an unsigned type. Negative indices are meaningless in the given task, so why allow them at all?</li>
<li><code>size_t</code> mapped to the native type large enough to hold an object of maximum size on given system (which means at the same time that it will always be large enough to index any member in an array). This is obviously not relevant in given case, as your arrays' sizes most likely won't ever exceed the range of ordinary <code>int</code> - but you simply <em>cannot</em> fail this way, so if you get used to it, you'll be well prepared for the future...</li>
</ol>
    </div>