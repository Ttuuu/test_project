<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Static Code Analysis</h2>
<p>Let me walk you through some of <a href="https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287" rel="nofollow noreferrer">my favorite static code analysis tools</a>:</p>
<ul>
<li><strong><a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d" rel="nofollow noreferrer">Type annotations</a></strong>: You don't use any. They are awesome and everybody should use them for Python 3.6+. As nobody should use Python versions below 3.6, just everybody should use them^^</li>
<li><a href="https://github.com/psf/black" rel="nofollow noreferrer">black</a> and <a href="https://github.com/timothycrosley/isort" rel="nofollow noreferrer">isort</a>: For general formatting, I like to use the autoformatter black. Your code is already good when it comes to this / PEP8</li>
<li><a href="https://pypi.org/project/flake8/" rel="nofollow noreferrer">Flake8</a>: May style checks. For example, the parameter to <code>create_cells</code> should be lowercase (<code>cell</code>, not <code>CELL</code>).</li>
<li><a href="https://pypi.org/project/mccabe/" rel="nofollow noreferrer">McCabe</a>: To check if there are parts which are hard to understand, I use <code>python -m mccabe --min 5  yourscript.py</code>. It only complains about the game loop.</li>
</ul>
<h2>Other comments</h2>
<h3>main function</h3>
<p>I usually like to put everything in functions. You could put the game loop in a <code>main</code> function and then add:</p>
<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    main()
</code></pre>
<p>This has the advantage that you can import parts of this file without executing it. This makes testing sometimes way easier.</p>
<h3>Properties and YAGNI</h3>
<p>Python has the <a href="https://www.mattlayman.com/blog/2017/pythonic-code-the-property-decorator/" rel="nofollow noreferrer">property decorator</a>. In your case, however, I would simply remove <code>get_cells</code> and access <code>.cells</code> directly. It makes the code easier to read and if you need it, you can still introduce the property later.</p>
<p>There is <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a> - you ain't gonna need it. Don't create abstractions if you don't need them. The method <code>to_reset</code> seems to be a good example.</p>
<h3>Docstring Style</h3>
<p>Your docstring style is very similar to <a href="https://numpydoc.readthedocs.io/en/latest/format.html" rel="nofollow noreferrer">numpydoc</a>; maybe you can change it to be consistent with that. This especially means that you don't need to document all methods within the class docstring. Instead, you document the method within the method. Many editors can then also use this to show help about the method.</p>
<h3>Naming</h3>
<p>Good names are hard to find. We want names that are clear in the context, but also not Java-style overly long names.</p>
<p>Here are some examples which I find hard to understand:</p>
<ul>
<li>timer2: Usually when you have to add numbers, that is a sign that it's not a good name</li>
<li>player_play: Should be called <code>is_players_turn</code>, but that is already a method</li>
<li>is_player_turn(): I'm not sure what <code>self.board_logic.check_winner</code> is doing, so I'm uncertain what a good name would be. But as this method is only called once, I'm wondering if the method itself is really necessary.</li>
</ul>
<h3>Enums</h3>
<p>I don't know what <code>self.board_logic.current_player() == "o"</code> is doing, but maybe the method could return an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a> and you could compare against an enum? String comparisons are prone to typo errors</p>
    </div>