<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ul>
<li>Your final <code>return</code> statement is redundant.</li>
<li>The use of <code>const</code> is correct here (<code>rawObjectKey</code>, <code>rawObjectValue</code>) because you only assign these variables once. Many developers tend to use <code>let</code> or <code>var</code> here incorrectly.</li>
<li>Your method is a bit convoluted with those almost-equal code blocks. <code>convertedObject = {...convertedObject, ...</code></li>
</ul>

<hr>

<h2>Alternative</h2>

<p>You could write this more compact, DRY and using built-in function <code>reduce</code>. We start with an empty object <code>{}</code> and inject each entry with the flattened data to obtain the result.</p>

<pre><code> const convertedObject = Object.entries(rawObject).reduce(
  (acc, item) =&gt; { 
    acc[item[0]] = item[1] != null ? item[1].value : null;
    return acc;
  }, {});
</code></pre>

<hr>

<h2>Future Releases</h2>

<p>There is a thing called <a href="https://medium.com/bsadd/optional-chaining-in-react-native-805a374788d3" rel="nofollow noreferrer"><em>optional chaining</em></a> aka <a href="https://ponyfoo.com/articles/null-propagation-operator" rel="nofollow noreferrer"><em>null propagation</em></a> aka <a href="https://www.beyondjava.net/elvis-operator-aka-safe-navigation-javascript-typescript" rel="nofollow noreferrer">the Elvis operator</a>. It's not standard Typescript (yet?), but is already supported in <a href="https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining" rel="nofollow noreferrer">babel-plugin-proposal-optional-chaining</a>.</p>

<p>This is a feature request to track. If ever implemented, it would allow us to call something like <code>item[1]?.value:null</code> instead of <code>item[1] != null ? item[1].value : null</code>.</p>
    </div>