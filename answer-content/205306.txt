<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure what <code>"TimeUtil.h"</code> contains, but the standard facilities (in <code>std::chrono</code>) are to be preferred for portable code:</p>
<pre><code>#include &lt;chrono&gt;

int main()
{
    auto begin_time = std::chrono::high_resolution_clock::now();

    // ...

    auto end_time = std::chrono::high_resolution_clock::now();
    auto duration
        = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end_time-begin_time);

    std::cout &lt;&lt; "[" &lt;&lt; duration.count() &lt;&lt; "ms] "
              &lt;&lt; longestAcceptableWord &lt;&lt; std::endl;
}
</code></pre>
<p>It's better to separate the actual logic into its own function, separate from the timing and file opening housework.</p>
<p><code>badLetters</code> can have static duration.</p>
<p>We don't need to separately construct and open the input file (and we'd be more flexible if we didn't hard-code that input - why not just read from standard input?).  Also, no need to explicitly close it if we're not using the return value of <code>close()</code> - just let the destructor do its job!</p>
<p><code>while (!eof())</code> is an anti-pattern: we should <code>while (getline())</code> instead.  The latter actually attempts a read, whereas the former only determines whether the <em>previous</em> read hit end of file.</p>
<p><code>std::string</code> has <code>find_first_of</code> which tests for all the characters in a set concurrently.  The set does need to be passed as a null-terminated string (or as a <code>std::string</code> or <code>std::string_view</code>), but that's not hard to arrange.</p>
<h1>Modified code</h1>
<p>Applying the advice above, we get:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;

#include &lt;chrono&gt;

std::string findLongestLineNotContaining(std::istream&amp; in,
                                         const char *badLetters)
{
    std::string longestAcceptableWord;
    std::string currentLine;
    while (getline(in, currentLine))
    {
        if (currentLine.length() &gt; longestAcceptableWord.length() &amp;&amp;
            currentLine.find_first_of(badLetters) == currentLine.npos)
        {
            // Word is longer than the current longest word found,
            // and doesn't have any bad letters, so make it the new
            // longest word found.
            longestAcceptableWord = currentLine;
        }
    }
    return longestAcceptableWord;
}


int main()
{
    namespace chr = std::chrono;
    auto begin_time = chr::high_resolution_clock::now();

    static const char *badLetters = "gkmqvwxz";
    std::ifstream in("words.txt");
    std::string longestAcceptableWord
        = findLongestLineNotContaining(in, badLetters);

    auto end_time = chr::high_resolution_clock::now();
    auto duration = chr::duration_cast&lt;chr::milliseconds&gt;(end_time - begin_time);

    std::cout &lt;&lt; "[" &lt;&lt; duration.count() &lt;&lt; "ms] "
              &lt;&lt; longestAcceptableWord &lt;&lt; std::endl;
}
</code></pre>
    </div>