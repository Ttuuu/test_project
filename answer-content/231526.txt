<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After @konjin's great answer, I ended up with this wonderful code:</p>

<pre><code>const state = {}
let beforeCallbacks = []
let afterCallbacks = []
let globalId = 0

const deleteId = (id, type) =&gt; {
  type === 'a'
    ? afterCallbacks = afterCallbacks.filter(e =&gt; e.id !== id)
    : beforeCallbacks = beforeCallbacks.filter(e =&gt; e.id !== id)
}

export const register = (fn, type = 'a') =&gt; {
  const id = globalId++
  (type === 'a' ? afterCallbacks : beforeCallbacks).push({ fn, id })
  return () =&gt; deleteId(id, type)
}

export const setState = async (key, value) =&gt; {
  for (const e of [...beforeCallbacks, { fn: () =&gt; { state[key] = value } }, ...afterCallbacks]) {
    const v = e.fn(key, value)
    if (v instanceof Promise) await v
  }
}
export const stateEmpty = () =&gt; !Object.keys(state).length
export const getState = (key) =&gt; state[key]
</code></pre>

<p>I used his idea in <code>setState()</code> to create an array where <code>state[key] = value</code> is sandwiched between the before and after calls.</p>

<p>I followed his advice  of assigning <code>{}</code> to state, and adding curly brackets like Batman said :D </p>

<p>I implemented de-registration by adding an ID to each one, rather than deleting the function, as I want to make sure I can assign the same function and de-register it without side effects.</p>

<p>His answer IS the accepted answer.</p>

<p>Thanks!</p>
    </div>