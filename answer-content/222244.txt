<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        continue  # Forbid a dice-roll that lands on a snake
</code></pre>
</blockquote>

<p>This may prevent finding the shortest path - it's possible to imagine a board with two long ladders, where the first ladder passes the bottom of the second ladder, but a snake descends from after the top of the first ladder to before the bottom of the second ladder.  Be careful: if you do follow snakes, you'll need some logic to get you out of loops.</p>

<hr>

<blockquote>
<pre><code>if __name__ == "__main__":
</code></pre>
</blockquote>

<p>This is great - good work!</p>

<hr>

<p>What you probably want to do is to convert the board to a <em>directed graph</em> whose edges are straight runs of board and whose nodes are the destinations of the snakes and ladders.</p>

<p>It might be possible to work with a map of the board, with all the squares containing the number of moves until the end:</p>

<ul>
<li>Initially, all squares contain <code>None</code>.</li>
<li>Now work backwards from the end position, marking how many die throws are necessary to reach the end from there (the first few squares will be <code>1</code>, for example).  But don't write anything at the top of a snake or bottom of a ladder.</li>
<li>Whenever you reach a square that's already marked, check to see if it's already the same or less than you're about to write to it; if so, then stop exploring that branch.</li>
<li>If you reach the top of a ladder, you can mark the bottom square with the same number as the top square.</li>
<li>If you reach the bottom of a snake, the converse applies - mark the top of it with the same number as the bottom.</li>
<li>When you've completed exploring all branches, the number in the beginning square will be the minimum number of turns needed to reach the top.</li>
</ul>

<p>It should become obvious that the distinction between snakes and ladders is unimportant here - they just have beginnings and ends, so can be combined into a single list, or just be properties of their beginning and end squares.</p>
    </div>