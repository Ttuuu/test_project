<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code needs <span class="math-container">\$m \times n\$</span> loops. I don't think looping can be avoided (application or database), but a number of round-trips can be avoided if source of names and items are same. This will improve the latency introduced by repeated network calls to distant database or web-services. For example:                      </p>

<ol>
<li>In case of database - stored procedure can be called to return user data-set required for filter method.</li>
<li>In case of web-service - coarse grained API calls can be made (if available from service provider).      </li>
</ol>

<p>Another way to improve the turnaround time for processing each user by introducing some parallelism; e.g., with the help of Java8's parallel streams.                                                                  </p>

<pre><code>users.parallelStream().forEach(user -&gt; processUser(user));
</code></pre>

<p>Code inside outer loop moved into <code>processUser()</code> which uses <code>parallelStream</code> further down the line.</p>

<pre><code>private static void processUser(String user) {
    try {
        getNamesCorrespondingtoUser(user).parallelStream().forEach(id -&gt; {
            List&lt;String&gt; items = getItemsCorrespondingtoId(user, id);
            filter(items, user, id);
        });
    } catch(Exception e) {
    }
}
</code></pre>
    </div>