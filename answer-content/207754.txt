<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The initial data is not formatted as proper JSON. There appear to be mismatched quotes around values like <code>front</code>, <code>back</code>, etc... try running the snippet below to see the error that is caused by this.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const blueprints = {
  12: {color: red, views: [{name: "front}, {name: "back}, {name: "top}, {name: "bottom}]},
  231: {color: white, views: [{name: "front}, {name: "back}]},
  73: {color: black, views: [{name: "front}, {name: "back}, {name: "top}, {name: "bottom}]},
  4: {color: silver, views: [{name: "front}, {name: "back}, {name: "top}, {name: "bottom}]},
}
 </code></pre>
</div>
</div>

<p>Also, unless <code>red</code>, <code>white</code>, <code>black</code> and <code>silver</code> are defined as variables, they need to be enclosed in quotes as string literals. See the rewrite below for a sample of this.</p>
<hr>
<p>The indentation is inconsistent- the first level in the <code>.map()</code> callback is four spaces and then two spaces within the <code>if</code> block. Stick with one or the other.</p>
<hr>
<p>You could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" rel="nofollow noreferrer">Array.prototype.reduce()</a> to conditionally add the desired elements to an output array, reducing the need to call <code>.filter()</code>:</p>
<pre><code>const result = idArray.reduce((output,id) =&gt; {
  const bluePrint = bluePrints[id];
  //conditionally add to output and then return it
  return output;
}, []);
</code></pre>
<p>You could also use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" rel="nofollow noreferrer"><code>Object.keys()</code></a> to iterate over the keys of <code>bluePrints</code> instead of <code>idArray</code>, though it appears to be slightly slower (see performance link below).</p>
<pre><code>const result = Object.keys(bluePrints).reduce((output,id) =&gt; {
  const bluePrint = bluePrints[id];
  //conditionally add to output and then return it
  return output;
}, []);
</code></pre>
<p><a href="https://jsperf.com/dataextraction" rel="nofollow noreferrer">See a comparison of the three snippets in this jsPerf</a>.</p>
<hr>
<p>One other change for readability would be to move that filter function outside the call to <code>.map()</code> or <code>.reduce()</code>:</p>
<pre><code>const viewIsTopOrBottom = view =&gt; view.name === 'top' || view.name === 'bottom'
</code></pre>
<p>Then that function can be called within the call to <code>.some()</code>:</p>
<pre><code>const exists = bluePrint.views.some(viewIsTopOrBottom);
</code></pre>
<p>And then that boolean <code>exists</code> could be eliminated by moving the call to <code>.some()</code> into the conditional statement of the <code>if</code>:</p>
<pre><code>if (bluePrint.views.some(viewIsTopOrBottom)) {
  //add to array
</code></pre>
<hr>
<h3>Proposed Rewrite</h3>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const idArray = ["12", "231", "73", "4"];
  const bluePrints = {
    12: {color: "red", views: [{name: "front"}, {name: "back"}, {name: "top"}, {name: "bottom"}]},
    231: {color: "white", views: [{name: "front"}, {name: "back"}]},
    73: {color: "black", views: [{name: "front"}, {name: "back"}, {name: "top"}, {name: "bottom"}]},
    4: {color: "silver", views: [{name: "front"}, {name: "back"}, {name: "top"}, {name: "bottom"}]},
  };
const viewIsTopOrBottom = view =&gt; view.name === 'top' || view.name === 'bottom';
const result = idArray.reduce((output,id) =&gt; {
  const bluePrint = bluePrints[id];
  if (bluePrint.views.some(viewIsTopOrBottom)) {
    output.push({
      colorId: id,
      views: bluePrint.views
    });
  }
  return output;
}, []);
console.log('result,', result);</code></pre>
</div>
</div>

    </div>