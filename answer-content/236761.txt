<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>IgnoreUntilNewLine</code> is too long in my opinion.  I'd simplify it to <code>ignore_line</code>.</p>

<p>It probably makes sense to provide the manipulator object in the library instead of letting the user declare one:</p>

<pre><code>struct ignore_line_t {
    constexpr explicit ignore_until_newline_t() = default;
    // ...
};
inline constexpr ignore_line_t ignore_line{};
</code></pre>

<p>so the user can use it directly in a <code>&gt;&gt;</code> chain:</p>

<pre><code>stream &gt;&gt; tmp.x &gt;&gt; tmp.y &gt;&gt; TU::ignore_line
</code></pre>

<p>Incidentally, we can go further and provide a similar helper for <code>getline</code> to fit in the chain:</p>

<pre><code>class getline {
    std::string&amp; dest;
public:
    explicit getline(std::string&amp; s)
        : dest{s}
    {
    }
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is, getline man)
    {
        return std::getline(is, man.dest);
    }
};
</code></pre>

<p>so your example can be written simply as</p>

<pre><code>stream &gt;&gt; tmp.x &gt;&gt; tmp.y &gt;&gt; TU::ignore_line &gt;&gt; TU::getline(tmp.line)
</code></pre>
    </div>