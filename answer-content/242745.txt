<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of</p>

<pre><code>list1 = []
for element in test:
    list1.append(element)
for x in list1:
    A,B,C,D,E,F,G,H,I = list1
</code></pre>

<p>you could simply write </p>

<pre><code>A,B,C,D,E,F,G,H,I = test
</code></pre>

<hr>

<p>Regardless, here's a slightly different approach.</p>

<p>Assuming that the input <code>json</code> structure is <code>{ 'country': [{ }, ..., { }] }</code>, 
I'd slightly modify <code>self.data</code>:</p>

<pre><code> self.data = {country['Cname'].lower(): country
              for country in json.loads(r.text)['country']}
</code></pre>

<p>then access this dictionary whenever required. Possibly by overwriting <code>__getitem__</code>:</p>

<pre><code>def __getitem__(self, key):
    return self.data[key.lower()]
</code></pre>

<p>Then you can access the inner dictionary using <code>[ ]</code>:</p>

<pre><code>GlobalDataLoader(API_KEY,PROJECT_TOKEN)['china']
GlobalDataLoader(API_KEY,PROJECT_TOKEN)['china']['population']
</code></pre>

<p>Here I've renamed the <code>Data</code> class: I don't expect the constructor of a class named <code>Data</code> to access the internet, and the data seems to be global.
Still, I'd remove the <code>self.get_data()</code> call from <code>__init__</code>.</p>

<p>On the other hand, if you are not planning to reuse the <code>(API_KEY, PROJECT_TOKEN)</code> for a specific <code>GlobalDataLoader</code> instance, then I wouldn't store these in the instances. Instead do something like</p>

<pre><code>data = GlobalDataLoader(project_secrets)
</code></pre>

<p>where</p>

<pre><code>class GlobalDataLoader:    
    def __init__(self, project_secrets):
        self.load_data(project_secrets)

    def load_data(self, project_secrets):
        url = f"https://www.parsehub.com/api/v2/projects/{project_secrets['project_token']}/last_ready_run/data"
        r = requests.get(url, params={"api_key": project_secrets['api_key']})
        self.data = {country['Cname'].lower(): country
                     for country in json.loads(r.text)['country']}

    def __getitem__(self, key):
        return self.data[key.lower()]
</code></pre>

<hr>

<p>That being said, don't hard-code secrets into the source code.</p>

<pre><code>API_KEY = "XXX"
PROJECT_TOKEN = "XXX"
RUN_TOKEN = "XXX"
</code></pre>

<p>You don't want this as a habit when you start using version control systems. Store these in a separate file. If you <em>have to</em> store that in a VCS, then encrypt it (e.g. use <code>gitcrypt</code>). </p>

<p>To reuse the idea of a wrapped dictionary, you could write a</p>

<pre><code>class ProjectSecretsLoader:
    def __init__(self, config_file_path):
        self.load_config(config_file_path)

    def load_config(self, config_file_path):
        self.config_data = dict() # TODO

    def __getitem__(self, key):
        return self.config_data[key]
</code></pre>

<p>then do</p>

<pre><code>config_file_path = "..."
project_secrets = ProjectSecretsLoader(config_file_path)
data = GlobalDataLoader(project_secrets)
</code></pre>

<hr>

<p>Last, but not least <code>requests.get</code> might fail, <code>json.loads</code> might fail. The result of <code>json.loads</code> might not have the structure you expect, or might be missing the country you will eventually try to look up, etc. In these cases specific exceptions will be raised, which ideally should be handled, otherwise the program will crash.</p>
    </div>