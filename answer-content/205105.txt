<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This method revolves around one big piece of code repeated four times: Trying to read a number until it succeeds. We can refactor that into a separate method, accepting a string as argument containing the prompt to the user:</p>

<pre><code>private int GetNumber(string message)
{
    int result;
    Console.WriteLine(message);
    while (!int.TryParse(Console.ReadLine(), out result))
    {
        Console.WriteLine(Message.notValidNumber);
        Console.WriteLine(message);
    }
    return result;
}
</code></pre>

<p>The while loop for the first set of coordinates then becomes:</p>

<pre><code>    int validationStage = 0;

    do
    {
        xCurrent = GetNumber(requestXCoord(validationStage));
        yCurrent = GetNumber(requestYCoord(validationStage));
    }
    while (!validatePosition(board, player, xTarget, yTarget, validationStage));
</code></pre>

<p><code>do while</code> is a while loop where the breaking condition is evaluated at the end of the loop, instead of the start. This is useful in this situation because we know we will have to evaluate the loop body at least once.</p>

<h3>ValidationStage</h3>

<p>Using ints as flags like this is confusing. When reading the code, it isn't immediately clear what you mean. <code>Enums</code> are make for this purpose:</p>

<pre><code>public enum Stage
{
    SelectCurrent,
    SelectTarget
}
</code></pre>

<p>However, at this point, the only difference the stage makes is the string in the prompt and the logic in the validation method. For clarity, it is better to use the string immediately (else we would have to figure out what <code>requestXYCoord</code> does) and split the validation method (since they check for different things). Especially when you're going to start adding more rules (like checking for legal moves, instead of just looking whether the space is free, or forced moves) you don't want these two validation steps in the same method.</p>

<pre><code>public static Board MovePiece(Board board, Player player)
{
    int xCurrent = 0;
    int yCurrent = 0;
    int xTarget = 0;
    int yTarget = 0;

    do
    {
        xCurrent = GetNumber(Message.currentX);
        yCurrent = GetNumber(Message.currentY);
    }
    while (!IsValidCurrentPosition(board, player, xCurrent, yCurrent));

    do
    {
        xTarget = GetNumber(Message.targetX);
        yTarget = GetNumber(Message.targetY);

    }
    while (!IsValidTargetPosition(board, player, xTarget, yTarget));


    PerformMove(board, player, xCurrent, yCurrent, xTarget, yTarget);

    return board;
}

private int GetNumber(string message)
{
    int result;
    Console.WriteLine(message);
    while (!int.TryParse(Console.ReadLine(), out result))
    {
        Console.WriteLine(Message.notValidNumber);
        Console.WriteLine(message);
    }
    return result;
}

private static Board PerformMove(Board board, Player player, int xCurrent, int yCurrent, int xTarget, int yTarget)
{
    if (canMakeMove(board, player, xCurrent, yCurrent, xTarget, yTarget))
    {
        switchOwnership(board, player, xCurrent, yCurrent, xTarget, yTarget);
        return board;
    }
    return null;
}

private static void switchOwnership(Board board, Player player, int xCurrent, int yCurrent, int xTarget, int yTarget)
{
    board.tiles[xTarget, yTarget].OwnedBy = player;
    board.tiles[xCurrent, yCurrent].OwnedBy = null;
}

private static bool canMakeMove(Board board, Player player, int xCurrent, int yCurrent, int xTarget, int yTarget)
{
    return board.tiles[xCurrent, yCurrent].OwnedBy == player
                    &amp;&amp; board.tiles[xTarget, yTarget].OwnedBy == null;
}

private static bool IsValidCurrentPosition(Board board, Player player, int x, int y)
{
    if (x &lt; 0 || y &lt; 0 || x &gt; 7 || y &gt; 7)
    {
        Console.WriteLine(Message.outOfBounds);
        return false;
    }
    else if (board.tiles[x, y].OwnedBy == null)
    {
        Console.WriteLine(Message.emptySpace);
        return false;
    }
    else if (board.tiles[x, y].OwnedBy != player)
    {
        Console.WriteLine(Message.opponentOwns);
        return false;
    }

    return true;
}

private static bool IsValidTargetPosition(Board board, Player player, int x, int y)
{
    if (x &lt; 0 || y &lt; 0 || x &gt; 7 || y &gt; 7)
    {
        Console.WriteLine(Message.outOfBounds);
        return false;
    }
    else if (board.tiles[x, y].OwnedBy == null &amp;&amp; step == 1)
    {
        return true;
    }
    else if (board.tiles[x, y].OwnedBy == player &amp;&amp; step == 1)
    {
        Console.WriteLine(Message.youOwnThis);
        return false;
    }
    else if (board.tiles[x, y].OwnedBy != player)
    {
        Console.WriteLine(Message.opponentOwns);
        return false;
    }

    return true;
}
</code></pre>
    </div>