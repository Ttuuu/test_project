<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using 1201ProgramAlarm's comment, the code ran slightly faster but was still slower than taking multiples of 3(effectively 6). However finding if the current composite number is in the multplicative group mod 30 seemed to be the one that took up a long time and could have been memoisation. This is done by precomputing how many times one adds the prime to reach the next composite that needs to be marked and also precomputing the squares(since the counting starts from i*i).</p>

<p>Improved code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

int main(){
    const unsigned int res[8] = {1,7,11,13,17,19,23,29};
    const unsigned int N = 1000000000;
    unsigned int nextelem[8][8][2]={}; //res[i]+nextelem[i][j][0]*res[j]=nextelem[i][j][1]
    unsigned int startk[8]={}; //res[i]*2=res[startk[j]]
    unsigned int i,j,k,ii,jj,kk;
    u_int8_t *primes = calloc(N/30+1,sizeof(char));
    //jth bit of primes[i]: 30*i+res[j]
    primes[0] = '\x01';
    unsigned int ub = sqrt(N)/30+1;
    unsigned int t = N/30+1;
    for(i=0;i&lt;8;++i){// genning nextelem
        for(j=0;j&lt;8;++j){
            for(k=2;k&lt;30;k+=2){
                for(ii=0;ii&lt;8;++ii){
                    if(res[ii]==(res[i]+k*res[j])%30){
                        break;
                    }
                }
                if(ii!=8){
                    nextelem[i][j][0]=k;
                    nextelem[i][j][1]=ii;
                    break;
                }
            }
        }
    }
    for(i=0;i&lt;8;++i){// genning startk
        for(j=0,k=(res[i]*res[i])%30;j&lt;8;++j){
            if(res[j]==k){
                startk[i]=j;
                break;
            }
        }
    }
    for(i=0;i&lt;ub;++i){
        for(j=0;j&lt;8;++j){
            //current number is i*30+res[j]
            if(primes[i]&gt;&gt;j&amp;1){// jth bit is set to 1
                continue;
            }
            // we start from the square and go up, have a lookup table to figure how much to increment
            ii=i*30+res[j];
            jj=ii*ii;
            k=startk[j];
            while(jj&lt;N){
                primes[jj/30]|=1&lt;&lt;k; // jj not a prime
                jj+=nextelem[k][j][0]*ii;
                k=nextelem[k][j][1];
            }
        }
    }
    // counting primes
    k=3; // 2,3,5
    for(i=0;i&lt;t-1;++i){
        for(j=0;j&lt;8;++j){
            if(primes[i]&gt;&gt;j&amp;1){
                continue;
            }
            ++k;
        }
    }
    for(j=0;j&lt;8;++j){
        if(primes[i]&gt;&gt;j&amp;1){
            continue;
        }
        if(i*30+res[j]&gt;N){
            break;
        }
        ++k;
    }
    printf("Number of primes equal or less than %d: %d\n",N,k);
    free(primes);
    return 0;
}
</code></pre>

<p>Just a nice property the multiplicative group is actually isomorphic to Z2xZ4=(11)x(7) so startk only consists of either res[0]=1 or res[5]=7^2=19</p>

<p>Timings with -O3:</p>

<pre><code>Multiples of 30: 2.70
Multiples of 3: 3.57
</code></pre>

<p>which is a nice improvement.</p>
    </div>