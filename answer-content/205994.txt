<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Undefined behavior</h2>

<p>In <code>unit_conversion()</code>, when incorrect type is specified, nothing is returned, which causes undefined behavior. It would be better to either throw exception, return <code>std::optional</code>, terminate, in that order (in my opinion). Even better would be fixing the interface, of course, but more about it later.</p>

<h2>Use <code>true</code>/<code>false</code> instead of 1/0</h2>

<p>It is quite a bit confusing in C++, so it is better to use their correctly typed alternatives.</p>

<h2>Ignoring existence of references</h2>

<p>In many places code accepts <code>std::string</code>s and <code>std::vector</code>s by value. Copying non-scalar object (e.g. container like) is probably expensive, thus better avoided by passing by reference. To get read-only view, use <code>const T&amp;</code>, where <code>T</code> is the corresponding type, or use <code>T&amp;</code> if mutation of the object is needed.</p>

<h2>Too much stuff in main</h2>

<p>Usually <code>main()</code> configures/boots the program, provides arguments from <code>argv</code>, etc. I would try to simplify that error handling and possibly delegate it to another function. Naming the <code>std::find</code>s would be good as well, as it doesn't seem to be too explicit at the moment. Very long lines make the code quite hard to read too. One can split long iostream statements like this:</p>

<pre><code>std::cout &lt;&lt; "line 1"
          &lt;&lt; "line 2";
</code></pre>

<h2>Better design</h2>

<p>My personal favorite is <code>std::chrono::duration</code> like design. Basically, it is a base metric:</p>

<pre><code>template &lt;typename Ratio&gt;
class distance {
    double ticks;
public:
    explicit distance(double ticks): 
            ticks(ticks)
    {}
    //conversion constructors, from other ratios
    //operators for +, -, *, /

};
</code></pre>

<p>The instances of the class store <code>ticks</code> times <code>Ratio</code> meters. So, for example this:</p>

<pre><code>using decimeter = distance&lt;std::deci&gt;;
decimeter mydistance(2);
</code></pre>

<p>will mean that <code>mydistance</code> represents 2 decimeters (<a href="https://en.cppreference.com/w/cpp/numeric/ratio/ratio" rel="noreferrer">std::ratio</a>), e.g. 1/10 * 2 meters. Note that <code>std::deci</code> is sort of a compile time constant for 1/10.</p>

<p>Then, one can easily keep writing aliases:</p>

<pre><code>using meter = distance&lt;std::ratio&lt;1&gt;&gt;;
using kilometer = distance&lt;std::kilo&gt;;
using centimeter = distance&lt;std::centi&gt;;
</code></pre>

<p>Writing conversion constructors isn't too hard either, the main thing is to get the math right:</p>

<ol>
<li><p>Normalize distance (e.g. convert to meters by multiplying by its ratio)</p></li>
<li><p>Convert to the desired distance type (by multiplying by the desired ratio)</p></li>
</ol>

<p>Equality checks is done roughly the same way. Here is the sketch of what I'm talking about:</p>

<pre><code>#include &lt;ratio&gt;

template &lt;typename Ratio&gt;
class distance {
    double ticks;
public:
    explicit distance(double ticks) :
        ticks(ticks)
    {}

    template &lt;typename Ratio2&gt;
    distance(distance&lt;Ratio2&gt; other) {
        using divided = std::ratio_divide&lt;Ratio2, Ratio&gt;;
        ticks = other.count() * divided::num / divided::den;
    }

    double count() {
        return ticks;
    }
};

template &lt;typename Ratio1, typename Ratio2&gt;
bool operator==(distance&lt;Ratio1&gt; d1, distance&lt;Ratio2&gt; d2) {
    double normalized1 = d1.count() * Ratio1::num / Ratio1::den;
    double normalized2 = d2.count() * Ratio2::num / Ratio2::den;
    return normalized1 == normalized2;
}

using meter = distance&lt;std::ratio&lt;1&gt;&gt;;
using centimeter = distance&lt;std::centi&gt;;
using decimeter = distance&lt;std::deci&gt;;

#include &lt;iostream&gt;

int main() {
    meter _1m(1);
    centimeter _100cm(100);
    std::cout &lt;&lt; std::boolalpha &lt;&lt; "Is 100 centimeters a meter? " 
              &lt;&lt; (_100cm == _1m) &lt;&lt; '\n';

    decimeter _1dcm(1);
    std::cout &lt;&lt; "Is 1 decimeter equal to 100 centimeters? "
              &lt;&lt; (_1dcm == _100cm) &lt;&lt; '\n';
}
</code></pre>

<p><a href="https://wandbox.org/permlink/Wq1UA8SBKb3m98DY" rel="noreferrer">Demo on Wandbox</a>.</p>
    </div>