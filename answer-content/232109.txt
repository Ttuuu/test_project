<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I apologize that this answer became a "stream of consciousness"-type answer. I found it difficult to properly categorize what I wanted to say.</p>

<hr>

<p>There's a fair amount to be said in <code>add_players</code>. The way you have things set up is quite confusing. You have fairly deep nesting, and multiple returns at multiple different levels of nesting.</p>

<p><code>if pla not in (a for i in players for a in i)</code> is also confusing. Think about <code>for i in players</code>. You're referring to each player as <code>i</code>? Also, your intent with that generator expression seems to be to flatten <code>players</code> so you can check if a name already exists. Flattening doesn't seem necessary though since each "player" is a name and score. Why check if a name is equal to a score?</p>

<p>You also have a <code>while len(players) &lt; 4</code> inside of a <code>while True</code>. I can't really see the point of the <code>while True</code> though.</p>

<p>I would also use much more descriptive names. Once you reduce the nesting, you'll have a lot more room to work with.</p>

<p>Finally, <code>add_players</code> really shouldn't be adding to a global <code>players</code>. <code>players</code> should be returned from <code>add_players</code> and assigned at the call site.</p>

<p>Altogether, I'd write this closer too:</p>

<pre><code>def add_players():
    players = []

    while len(players) &lt; 4:
        new_name = input("Enter Player Names (can have up to 4) &gt;&gt;&gt; ")

        if new_name:
            if new_name not in (name for name, _ in players):
                players.append([new_name, 0])
                print("Player {} added".format(new_name))

            else:
                print("Name already in players' list")

        else:
            break

    return players
</code></pre>

<p>Notice now there's a single <code>return</code>, and it's returning the players for the caller to use.</p>

<hr>

<p>Please don't take this the wrong way, but the design of the rest of the program doesn't make much sense:</p>

<ul>
<li><p>Why is <em>everything</em> inside of <code>main</code>? Ideally, the <code>main</code> function should be a small function at the end of your program that just calls a few other functions.</p></li>
<li><p>Why is a <code>Score</code> class <em>inside</em> of the <code>home</code> function?</p></li>
<li><p><code>Score</code> also doesn't seem like it should even be a class. All of the methods of the class are static, and it seems like you're only using <code>Score</code> to score a word by calling the <code>Score</code> constructor. If you never use an instance of a class, it shouldn't be a class. Just make <code>Score</code> into a <code>score_word</code> function. I'd also pass a word into the function instead of asking inside of the function. Functions are harder to test when they produce their own data.</p></li>
<li><p>You're catching a <code>NameError</code> in <code>undo</code>. I'm guessing this is in case <code>Score()</code> hadn't been called yet? Don't do this. I can't think of a time when it's ever appropriate to catch a <code>NameError</code>. Any time a <code>NameError</code> happens, it means you have flawed logic in your program. You should fix the issue instead of putting an <code>try/except</code> band-aid over it. If the function requires <code>temp_p</code> and <code>temp_v</code> (which need better names), you need to ensure that that data is available. Either pass it in, or ensure that they're properly initialized ahead of time.</p></li>
</ul>

<hr>

<hr>

<p>There's more that can be dug out here, but I need to start getting ready for work. I'll just make a few broad suggestions:</p>

<ul>
<li><p>Please take much more care when writing code. A lot of this code seems like it was written quickly without much second-thought. I would focus on the <em>intent</em> of the code before it's written.</p>

<p>Ask yourself, "What <em>exactly</em> should this code do?", and "What are the appropriate tools to do what I'm trying to do?". Doing things like using classes as normal functions and writing code like <code>(a for i in players for a in i)</code> that <em>technically</em> works (but doesn't really do exactly what you want) makes your code hard to understand, and will make it difficult to add to later.</p></li>
<li><p>Don't nest everything. Really, all of these functions should be "top-level", outside of everything else. If you nest thing <code>A</code> inside of thing <code>B</code>, that suggests that <code>A</code> is deeply connected to <code>B</code> and wouldn't have a valid meaning outside of <code>B</code>. Really though, that's not the case here. <code>Score</code> would have the same meaning even if it were outside of <code>home</code>, and all the functions would have the same meaning even if they were outside of <code>main</code>.</p>

<p>Nesting conveys a certain association meaning, and if used improperly, gives the reader the wrong initial idea about how the code works. Nesting also forces you to use more indentation, which generally makes code harder to read.</p></li>
</ul>

<p>With the above criticisms out of the way, I'll note what is good here:</p>

<ul>
<li><p>You're following proper naming guidelines. You have functions starting with lowercase, classes starting with uppercase, and <code>_</code> to separate "words" in names. </p></li>
<li><p>You're using idiomatic shortcuts like <code>if pla:</code> to check if a collection is empty or not.</p></li>
<li><p>You tried to have all the functionality start from a <code>main</code> instead of being loose in the script. This makes code easier to run and test.</p></li>
<li><p><code>letter_val</code> is a good use of a dictionary.</p>

<ul>
<li>I'll note though that it's a constant, <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="nofollow noreferrer">so it should be in all uppercase</a>.</li>
</ul></li>
</ul>

<p>Keep at it. There's a lot to be improved here, but there's promise too.</p>
    </div>