<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think inheritance is unnecessary here. It has some drawbacks:</p>

<ul>
<li><code>AlarmHelper</code> does not use the <code>SQLiteOpenHelper</code> just passes it to the superclass. This is a superfluous dependency.</li>
<li>If you want to add a new constructor parameter to <code>EntityHelper</code> (or modify an existing one) you have to change every subclass.</li>
<li>It's hard to test the logic in <code>AlarmHelper</code>.</li>
</ul>

<p>I would go with composition.</p>

<p>First, a new <code>EntityMapper</code> interface:</p>

<pre><code>public interface EntityMapper&lt;T extends Entity&gt; {
    T bind(Cursor cursor);
    ContentValues bind(T entity);
    String getTable();
    Enum&lt;?&gt;[] getColumnsEnum();
}
</code></pre>

<p>(You might be able to find a better name.)</p>

<p>Then an <code>AlarmMapper</code> (it's methods are the same as <code>AlarmHelper</code>):</p>

<pre><code>public final class AlarmMapper implements EntityMapper&lt;Alarm&gt; {
    public ContentValues bind(Alarm entity) {
        ...
    }

    public Alarm bind(Cursor cursor) {
        ...
    }

    public String getTable() {
        ...
    }

    public Enum&lt;?&gt;[] getColumnsEnum() {
        ...
    }
}
</code></pre>

<p>Here is the modified <code>EntityHelper</code>:</p>

<pre><code>public class EntityHelper&lt;T extends Entity&gt; {
    private final SQLiteOpenHelper dbHelper;
    private final EntityMapper&lt;T&gt; entityMapper;

    public EntityHelper(SQLiteOpenHelper dbHelper, EntityMapper&lt;T&gt; entityMapper) {
        this.dbHelper = dbHelper;
        this.entityMapper = entityMapper;
    }

    ...

    public boolean delete(long id) {
        ...
        int count = db.delete(entityMapper.getTable(), 
            "_id = ?", new String[] { String.valueOf(id) });
        ...
    }

    ...
}
</code></pre>

<p>Finally, you can create a factory which is the only place where <code>EntityHelper</code> is created and the only place where it has to be changed if it gets a new dependency:</p>

<pre><code>public class EntityHelperFactory {

    private final SQLiteOpenHelper dbHelper;

    public EntityHelperFactory(SQLiteOpenHelper dbHelper) {
        this.dbHelper = checkNotNull(dbHelper, "dbHelper cannot be null");
    }

    public &lt;T extends Entity&gt; EntityHelper&lt;T&gt; create(EntityMapper&lt;T&gt; entityMapper) {
        return new EntityHelper&lt;T&gt;(dbHelper, entityMapper);
    }
}
</code></pre>

<p>See also: <em>Effective Java, 2nd Edition</em>, <em>Item 16: Favor composition over inheritance</em></p>
    </div>