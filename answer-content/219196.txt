<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>just some other refactoring hints:</p>

<ul>
<li>encapsulate the check in a own <code>UserUsageController</code> class</li>
<li>then you can test it better</li>
<li>maybe the check for midnight is dependend on timezone?</li>
</ul>

<p>user returning over time zone:</p>

<ul>
<li>show the welcome screen also if the last visit longer then a 8 hours - maybe user comes there at 23:00 and again at 02:00 - then it also not make sense to show the welcome screen</li>
</ul>

<p>short time user:</p>

<ul>
<li>maybe only set the lastVisitDate if the user has used the app more then 2 minutes (for example if he enter the app because he accidently tap on a push notification)</li>
<li>or set the last visit date only when the user exits the welcome screen</li>
</ul>

<p>sample implementation (thanks to @Martin-R for code deduplication):</p>

<pre><code>import UIKit

class UserUsageController {

    static let greetingDateKey = "greetingDate"

    static func isReturning(now: Date = Date(), minHours: Int = 8) -&gt; Bool {

        let lastGreeting = getLastVisit() ?? .distantPast

        let dayBefore = isDayBefore(now: now, last: lastGreeting)
        let leastTime = isLeastTime(now: now, last: lastGreeting, minHours: minHours)
        return dayBefore &amp;&amp; leastTime
    }

    private static func isDayBefore(now: Date, last: Date) -&gt; Bool {
        return Calendar.current.compare(now, to: last, toGranularity: .day) == .orderedDescending
    }

    private static func isLeastTime(now: Date, last: Date, minHours: Int) -&gt; Bool {
        let hours = Calendar.current.dateComponents([.hour], from: last, to: now ).hour ?? 0
        return hours &gt; minHours
    }

    static func setLastVisit(date: Date = Date()){
        UserDefaults.standard.set(date, forKey: greetingDateKey)
    }

    static func getLastVisit() -&gt; Date? {
        return UserDefaults.standard.object(forKey: greetingDateKey) as? Date
    }
}
</code></pre>

<p>Tests:</p>

<pre><code>let df = DateFormatter()
df.dateFormat = "yyyy/MM/dd HH:mm"

UserUsageController.setLastVisit(date: df.date(from: "2019/04/20 01:00")! )
assert(false == UserUsageController.isReturning(now: df.date(from: "2019/04/20 09:00")!))
assert(false == UserUsageController.isReturning(now: df.date(from: "2019/04/20 23:00")!))

UserUsageController.setLastVisit(date: df.date(from: "2019/04/20 22:00")! )

assert(false == UserUsageController.isReturning(now: df.date(from: "2019/04/21 01:00")!))
assert(true == UserUsageController.isReturning(now: df.date(from: "2019/04/21 01:00")!,
                                               minHours: 1))
assert(false == UserUsageController.isReturning(now: df.date(from: "2019/04/21 06:59")!))
assert(true == UserUsageController.isReturning(now: df.date(from: "2019/04/21 07:00")!))
assert(true == UserUsageController.isReturning(now: df.date(from: "2019/04/21 08:00")!))
assert(true == UserUsageController.isReturning(now: df.date(from: "2019/04/22 08:00")!))
</code></pre>

<p>Usage:</p>

<pre><code>
// in calling class

if UserUsageController.isReturning() {
    // OpenWelcomeScreen
}


// onClose at welcomeScreen
UserUsageController.setLastVisit()

</code></pre>
    </div>