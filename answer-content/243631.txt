<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Making shebang line more portable</h2>

<p>Fixing the <code>perl</code> binary to <code>/usr/bin/perl</code> in the shebang will not work if you are using <code>perlbrew</code> instead of the system <code>perl</code>. Using <code>/usr/bin/env perl</code> will be a more portable alternative.</p>

<h2>use <code>strict</code> and <code>warnings</code> pragmas to catch error at an early stage</h2>

<p>By adding <code>warnings</code> you will get quite a few warnings, as discussed below.</p>

<h2>Unescaped left brace in a regex is deprecated and will be illegal from perl version 5.32 on</h2>

<p>You have two lines (line 11 and 21) where you have used a literal <code>{</code> in your regex without escaping it. The warning you will get is:</p>

<pre><code>Unescaped left brace in regex is deprecated here (and will be fatal in Perl 5.32), passed through in regex; marked by &lt;-- HERE in m/([A-z][A-z0-9]*)\s+:([A-z][A-z0-9]*) ({ &lt;-- HERE [^}]*})/ 
</code></pre>

<h2>Unrecognized escape <code>\s</code> used in substitution text</h2>

<p>On line 12 you have a <code>\s</code> in the substitution text. This is not a valid escape in a text string (it is only valid in the regex part of the substitution operator).</p>

<pre><code>Unrecognized escape \s passed through at ./p.pl line 12.
</code></pre>

<p>You can replace <code>\s+</code> with a single space for example.</p>

<h2>\1 better written as $1</h2>

<p>Replace all uses of the back references <code>\1</code>, <code>\2</code>, <code>\3</code> with <code>$1</code>, <code>$2</code>, <code>$3</code>, see <a href="https://perldoc.perl.org/perlre.html#Warning-on-%5c1-Instead-of-%241" rel="noreferrer">perldoc perlre</a> for the details behind this warning.</p>

<h2>Use <code>say</code> instead of <code>print</code> to avoid having to type <code>\n</code> at the end of a string.</h2>

<p>Since perl version 5.10 you can add <code>use feature qw(say)</code> to your program to use this feature.</p>

<h2>use <code>local</code> to avoid clobbering special (global) variables</h2>

<p>Even if it is not necessary in your short program, you should localize <code>$/</code> when you set it to <code>undef</code>: This will avoid bugs from creeping in at a later time when your program grows larger. If you do not localize the variable it will be set globally for your whole program to <code>undef</code>.</p>

<h2>Use dedicated parsing modules to simplify maintenance and readability of your code</h2>

<p>Your code is already starting to become hard to read and maintain (due to the complicated syntax of the regexes). Consider using a dedicated grammar and a parser like <a href="https://metacpan.org/pod/Regexp::Grammars" rel="noreferrer"><code>Regexp::Grammars</code></a> to make your program readable and easier to maintain.</p>

<p>Here is a modified version of your code incorporating some of the changes suggested above:</p>

<pre><code>#!/usr/bin/env perl

use feature qw(say);
use strict;
use warnings;

local $/ = undef;
while(&lt;&gt;) {
    say "#include &lt;SDL2/SDL.h&gt;\n#include &lt;stdint.h&gt;\n";
    s/.include ([^;]+);/#include "$1"/g;
    s/^include ([^;]+);/#include &lt;$1&gt;/g;
    s/entry:/int main(void) {/g;
    s/entry ([A-z][A-z0-9]*)\s*,\s*([A-z][A-z0-9]*)\s*:/int main(int $1, char* $2\[\]) {\n\tSDL_Init(SDL_INIT_EVERYTHING);/g;
    s/([A-z][A-z0-9]*)\s+:u(8|16|32|64)(\**)/uint$2_t$3 $1/g;
    s/([A-z][A-z0-9]*)\s+:(8|16|32|64)(\**)/int$2_t$3 $1/g;
    s/([A-z][A-z0-9]*)\s+:Color\s+(\{[^}]+\})/struct { uint8_t r, g, b, a; }$1 = $2/g;
    s/([A-z][A-z0-9]*)\s+:Color/struct { uint8_t r, g, b, a; }$1;/g;
    s/([A-z][A-z0-9]*)\s+:-([A-z][A-z0-9]*)/struct $2 $1/g;
    s/([A-z][A-z0-9]*)\s+:Win\s*{([^}]+)}/SDL_Window* $1 = SDL_CreateWindow($2)/g;
    s/([A-z][A-z0-9]*)\s+:Win/SDL_Window* $1/g;
    s/([A-z][A-z0-9]*)\s+:Ren\s*{([^}]+)}/SDL_Renderer* $1 = SDL_CreateRenderer($2)/g;
    s/([A-z][A-z0-9]*)\s+:Ren/SDL_Renderer* $1/g;
    s/@([A-z][A-z0-9]*)\s*\(([^)]+)\)/typedef struct $1 {$2} $1;/g;
    s/([A-z][A-z0-9]*)\s+:@@\s*\(([^)]+)\)/struct {$2}$1;/g;
    s/@/struct /g;
    s/([A-z][A-z0-9]*)\s+:([A-z][A-z0-9]*) (\{[^}]*\})/$2 $1 = $3/g;
    s/([A-z][A-z0-9]*)\s+:([A-z][A-z0-9]*)/$2 $1/g;
    s/Wait\s+a\s+minute!!!/SDL_Delay(60*1000);/g;
    s/wait\s+([0-9bx]+)/SDL_Delay($1)/g;
    s/clear\s+([A-z][A-z0-9]*)/SDL_RenderClear($1)/g;
    s/set\s+([A-z][A-z0-9]*)\s+color\s+to\s+([A-z][A-z0-9]*)/SDL_SetRenderDrawColor($1, $2.r, $2.g, $2.b, $2.a)/g;
    s/set\s+([A-z][A-z0-9]*)\s+([A-z][A-z0-9]*)\s+to\s+([A-z0-9*\/+-]+)/$1.$2 = $3/g;
    s/show\s+([A-z][A-z0-9]*)/SDL_RenderPresent($1)/g;
    s/([A-z][A-z0-9]*)\s([A-z][A-z0-9]*\**)\s+([A-z][A-z0-9]*)\s*:/void $1($2 $3) {/g;
    s/([A-z][A-z0-9]*)\s*:/void $1(void) {/g;
    s/-!-/}/g;
    print;
}

say "";
</code></pre>
    </div>