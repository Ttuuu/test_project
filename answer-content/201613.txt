<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some important inefficient elements in the posted implementation.</p>

<h3>Inserting into a sorted array</h3>

<p>To insert Alice's next score into the array of sorted scores,
the posted appends Alice's score at the end and then sorts the array.
What's the typical time complexity of sorting an array?</p>

<blockquote class="spoiler">
  <p> \$O(n \log n)\$</p>
</blockquote>

<p>Is it possible to do better?</p>

<blockquote class="spoiler">
  <p> When you have a list of sorted values, you can use <em>binary search</em> to find the position to <em>insert</em> a value so that the list stays sorted.</p>
</blockquote>

<p>The general idea of <em>binary search</em> goes something like this: pick the middle position <code>m</code> of the array. Is it bigger than the value? Then pick the middle position between 0 and <code>m</code>. Or else if the value was smaller, then pick the middle between <code>m</code> and the end of the array. Follow the same logic, in each step dividing the interval to check by 2, quickly converging on the target position.</p>

<p>What would be the time complexity to find that position using binary search?</p>

<blockquote class="spoiler">
  <p> \$O(\log n)\$</p>
</blockquote>

<p>That's a lot faster than \$O(n \log n)\$.</p>

<p>By the way, since Alice's score only increases,
the range of values to search for the correct position shrinks,
so the fast solution just keeps getting faster for finding the higher scores.</p>

<p>By the way, once you found the right position, do you actually need to <em>insert</em> into the array?</p>

<blockquote class="spoiler">
  <p> No, in this particular challenge, you could just overwrite the position with the new value.</p>
</blockquote>

<p>Why is that even a question, why not just insert the value and be done with it?</p>

<blockquote class="spoiler">
  <p> Inserting a value into an array typically requires copying the values that come after the insertion position, which is expensive. Depending on the programming language and how arrays work, a reallocation of the entire array (copying all elements) may also happen, which is even more expensive.</p>
</blockquote>

<p>And keep in mind that we have to do this <code>m</code> times, where <code>m</code> is the number of scores of Alice.</p>

<p>What is the overall time complexity of the solution with sorting?</p>

<blockquote class="spoiler">
  <p> \$O(m n \log n)\$</p>
</blockquote>

<p>What is the overall time complexity when we replace sorting with binary search? (Without shrinking the search range, to keep the theory simple.)</p>

<blockquote class="spoiler">
  <p> \$O(m \log n)\$</p>
</blockquote>

<p>If we take into account the shrinking of the search range, then we can achieve a performance faster than \$O(m + n)\$.</p>

<h3>Processing the two lists together</h3>

<p>An alternative linear time solution is possible if we process the two lists together:</p>

<ul>
<li>Compute the ranks of the leaderboard (see the next section of my answer)</li>
<li>Iterate over the scores of Alice, in increasing order</li>
<li>From the end of the leaderboard, find the next score that is  greater than or equal to Alice's current score

<ul>
<li>If that score is equal to Alice's, then Alice's rank is the same as of that score</li>
<li>Otherwise (the score is greater than Alice's), Alice's rank is 1 + the rank of that score</li>
</ul></li>
<li>Repeat for all scores of Alice. Note that when looking for the next leaderboard score, you can continue from the position of the last one found, do not restart from the end</li>
</ul>

<p>This algorithm visits all elements of the two arrays once, performing a constant number of operations for each. What is the overall time complexity?</p>

<blockquote class="spoiler">
  <p> \$O(m + n)\$</p>
</blockquote>

<p>This is not as good as using binary search that can skip many leaderboard scores at once, but probably fast enough for this exercise, and simpler to implement.</p>

<h3>Computing the rank</h3>

<p>The current implementation recomputes the ranks up until Alice's position for every single position.
That's unnecessary.
You could compute the ranks just once up front, and store in an array.
Then, once you know Alice's position, you could use the index of that position to find the rank directly.</p>

<h3>Style</h3>

<p>It's recommended to declare variables right before you need them.
For example <code>i</code> and <code>rank</code> are declared too early,
when they are only used after the sorting step.
The reason to delay declaration as much as possible is to reduce the possibility of mistakes: a variable is not defined yet, a use by mistake is likely going to crash badly and so you discover the problem early.
Otherwise it may get overlooked.</p>

<hr>

<p>A common convention to improve readability is to add spaces around operators, after commas, before <code>(</code> and after <code>)</code>, for example:</p>

<pre><code>function ladder(arr1, arr2) {
  while (arr2.length) {
    let i = 0
</code></pre>
    </div>