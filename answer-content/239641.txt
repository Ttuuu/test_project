<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using static file-scope variables </p>

<pre><code>static struct timeval lnm_current_time;
// ...
static FILETIME lnm_win32_filetime;
</code></pre>

<p>makes your code thread-unsafe: Two “simultaneous” invocations of your function from different threads access the same memory. (For other potential drawbacks of static file-scope variables see for example <a href="https://softwareengineering.stackexchange.com/q/294737/83021">Are file-scope <code>static</code> variables in C as bad as <code>extern</code> global variables?</a> on Software Engineering.)</p>

<p>And there is no reason to use static variables here. With function local variables </p>

<pre><code>uint64_t lnm_getus(void) {
    uint64_t us;
#if defined(__unix__) || defined(unix) || defined(__unix) || defined(__CYGWIN__)
    struct timeval lnm_current_time;
    gettimeofday(&amp;lnm_current_time, NULL);
    // ...
#elif defined(_WIN32) || defined(__WINDOWS__)
    FILETIME lnm_win32_filetime;
    GetSystemTimeAsFileTime(&amp;lnm_win32_filetime);
    // ...
#endif
    return us;
}
</code></pre>

<p>the variables are defined exactly where they are needed, which makes the code easier to read and to argue about, and avoids the threading problem.</p>
    </div>