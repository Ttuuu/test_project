<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.  It's definitely improved over the last version, but there's more you could do.</p>

<h2>Omit the class name from member function declarations</h2>

<p>It was probably just a typo or cut-and-paste error, but within the <code>Dungeon</code> class in <code>wumpus.h</code> we have this:</p>

<pre><code>bool Dungeon::move_wumpus();
</code></pre>

<p>As you know (because this is the only place it's done otherwise) the extra qualification is not necessary here.  Instead, that should be:</p>

<pre><code>bool move_wumpus();
</code></pre>

<h2>Always <code>return</code> an appropriate value</h2>

<p>Your <code>shoot_array()</code> routine has control paths that cause it to end without <code>return</code>ing any <code>bool</code> value.  This is an error and should be fixed, probably most easily by simply adding <code>return false;</code> to the end.</p>

<h2>Prefer <code>std::array</code> to <code>std::vector</code> when fixed size is known at compile time</h2>

<p>The way this game is constructed, there will always be 20 room, each with 3 neighbors.  For that reason, the <code>get_neighbor_room</code> should probably return a <code>std::array&lt;Room_number, 3&gt;</code> instead of a <code>std::vector&lt;int&gt;</code>.</p>

<h2>Don't create the random device every time</h2>

<p>The <code>get_random</code> code is currently this:</p>

<pre><code>int get_random(int min, int max)
{
    std::random_device rd;
    std::mt19937 mt(rd());
    std::uniform_int_distribution&lt;int&gt; distribution(min, max);
    return distribution(mt);
}
</code></pre>

<p>But we don't really need a new <code>rd</code> or a new <code>mt</code> each time.  I'd make both of these static.</p>

<h2>Don't hide loop exit conditions</h2>

<p>In the <code>hunt_the_wumpus</code> routine, there are two nested loops both of which are <code>while (true)</code> but neither really continues forever.  Rather than hide the exit condition, state it up front to make it easier to read and understand.  For instance, the inner loop could be this:</p>

<pre><code>for (bool gamme_over = false;  ) {
</code></pre>

<p>Then this rather perplexing bit of code at the end of the loop:</p>

<pre><code>    else if (in == "s" || in == "S" || in == "Shoot" || in == "shoot") {
        game_over = d1.shoot_arrow(select_rooms_to_shoot());
        if (game_over == true) { break; }
        game_over = d1.move_wumpus();
    }
    if (game_over == true) {
        break;
    }
}
</code></pre>

<p>Becomes this:</p>

<pre><code>    else if (in == "s" || in == "S" || in == "Shoot" || in == "shoot") {
        game_over = d1.shoot_arrow(select_rooms_to_shoot());
        if (!game_over) { 
            game_over = d1.move_wumpus();
        }
    }
}
</code></pre>

<p>Avoid a bunch of confusing <code>break</code> and <code>continue</code> statements and simplify and shorten the code at the same time.</p>

<h2>Simplify the room connection code</h2>

<p>The <code>connect_rooms()</code> code is quite long and complex.  It can be much simplified by using a better algorithm.  Select two rooms at a time, connect them to each other (if they're not already connected) and move those to another vector.  Continue until the first vector is empty.  Then do that three more times.  </p>

<h2>Make your classes work harder</h2>

<p>The <code>room_is_full_connected</code> should be a member function of <code>Room</code>.  Here are functions I'd add to <code>Room</code>:</p>

<pre><code>// return true if the passed room is already connected to this one
bool isConnected(const Room&amp; other) const;
// return the number of connections from this room
bool connectionCount() const;
// return true if the passed room is this one or is connected
bool isSelfOrConnected(const Room&amp; other) const;
// connect this room to the other
bool connect(Room&amp; other);
// hazard checks
bool nearWumpus() const;
bool nearBat() const;
bool nearPit() const;
</code></pre>

<h2>Look out for member functions</h2>

<p>There is a function in the current code with this prototype:</p>

<pre><code>int select_room_to_move(Dungeon&amp; d1);
</code></pre>

<p>Since it's being passed a non-const reference to a <code>Dungeon</code> anyway, it seems likely that this should instead be a member function.</p>

<h2>Simplify user input</h2>

<p>The <code>select_rooms_to_shoot</code> is much longer and much more convoluted than necessary.  Consider a cleaner approach:</p>

<pre><code>std::vector&lt;int&gt; select_rooms_to_shoot()
{
    std::vector&lt;int&gt; tar_rooms;
    for(bool bad_input{true}; bad_input;  ) {
        std::cout &lt;&lt; "Enter rooms you want to shoot the arrow (e.g. 2-3-12, eg 4-5, eg 2)\n";

        std::string in;
        if (std::getline(std::cin, in)) {
            // replace non-digits with spaces
            std::transform(in.begin(), in.end(), in.begin(), 
            [](char ch){
                return std::isdigit(ch) ? ch : ' ';
            });
            std::istringstream ist{ in };
            int roomnum;
            while (ist &gt;&gt; roomnum) {
                tar_rooms.push_back(roomnum);
            }
            bad_input = tar_rooms.empty() || tar_rooms.size() &gt; 3;
        }
    }
    return tar_rooms;
}
</code></pre>
    </div>