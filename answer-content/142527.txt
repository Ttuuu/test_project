<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Performance</h3>

<p>In this function, <code>get_lowest_grade(...)</code> will get called once for every student:</p>

<blockquote>
<pre><code>def get_lowest_grade_students(students: list) -&gt; list:
    """Returns the students with the lowest grade
    from a list of students[name, grade]."""
    return [s for s in students if s[1] == get_lowest_grade(students)]
</code></pre>
</blockquote>

<p><code>exclude_lowest_grade_students</code> has the same flaw.</p>

<p>Another performance issue is the repeated list creations.
Especially the one that creates the list without the lowest scoring students:
as this list will typically have similar size as the original,
it's a waste of memory.</p>

<h3>Algorithm</h3>

<p>Excluding the lowest scoring students in order to find the second lowest scoring students in the remaining group is a bit awkward. This awkwardness may have contributed to the performance traps in the implementation.</p>

<p>It would be simpler to actually find the 2nd lowest score, and then filter by that score. </p>

<p>As a follow up exercise, generalizing to find the k-th lowest score, without actually sorting the entire list, is an interesting problem to crack (see selection sort).</p>

<h3>Named tuples</h3>

<p>Although the main purpose of the exercise is nested lists,
you might appreciate to learn about <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="noreferrer"><em>named tuples</em></a>.
Using named tuples,
you could replace meaningless indexes like this:</p>

<blockquote>
<pre><code>names = [s[0] for s in students]
</code></pre>
</blockquote>

<p>with code like this:</p>

<pre><code>names = [s.name for s in students]
</code></pre>

<p>To make this possible, you can create a <code>Student</code> named tuple with:</p>

<pre><code>from collections import namedtuple

Student = namedtuple('Student', ['name', 'score'])
</code></pre>

<p>And append students to the <code>students</code> list with:</p>

<pre><code>students.append(Student(name, grade))
</code></pre>

<h3>Coding style</h3>

<p>The coding style is almost spotless, there are only two minor violations of <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>:</p>

<ul>
<li>There should be no spaces around keyword parameters, so instead of <code>min(students, key = lambda x: x.score)</code>, it should be <code>min(students, key=lambda x: x.score)</code></li>
<li>There should be two blank lines before function definitions</li>
</ul>
    </div>