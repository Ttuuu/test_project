<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, communicating through father-son relation component-wise should be with the event bus and props whereas it is recommended to send events from father to son with props.</p>

<p>I would use a prop to change the specific instance of the dice because you will be triggering a single event to a single die.
If you would indeed want this to happen, I would use a single data property to bind all the dice from the father component.</p>

<p>With your implementation - all dice would reset/re-roll and you would get unknown behavior in the future if you would want to re-use your die.
This would be a bad practice and you want to implement components as a single monad with a designed functionality without side effects. (more on monads <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)" rel="nofollow noreferrer">here</a>)</p>

<p>Secondly I would stick with 'die' or 'dice' for the sake of consistency and readability.</p>

<p>Thirdly, Vue has $emit as a native prototype so there's no need to configure it in your main.js you probably already know it but here's the <a href="https://vuejs.org/v2/guide/components-custom-events.html" rel="nofollow noreferrer">resource</a>.
Also, a bit petty but alas, You're not using Bootstrap but you are importing it to your project.</p>

<p><strong>PS</strong></p>

<p>Another solution would be using <a href="https://vuex.vuejs.org/" rel="nofollow noreferrer">Vuex</a> for non father-son relation, perhaps holding an array of dice and changing their state that would trigger a single event for the responsible die</p>

<p><strong>Edit</strong></p>

<p>Here's a working git <a href="https://github.com/Natanhel/GameDiceExample" rel="nofollow noreferrer">example of using props with your code</a></p>
    </div>