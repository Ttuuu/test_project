<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, very nice code I have to say, well written.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>public static &lt;K&gt; Map&lt;K, Object&gt; merge(
   Map&lt;K, Object&gt; l,
   Map&lt;K, Object&gt; r)
{
</code></pre>
<p>I'd use more descriptive names, like <code>base</code> and <code>addition</code> or something like that. I'm just a little bit tired right now, sorry, to come up with better names. What you want the names to convey is "this is the base, and this one will override values in base".</p>
<hr>
<pre class="lang-java prettyprint-override"><code>         if (lValue instanceof Map &amp;&amp; rValue instanceof Map) {
            Map&lt;K, Object&gt; lMap = (Map&lt;K, Object&gt;)lValue;
            Map&lt;K, Object&gt; rMap = (Map&lt;K, Object&gt;)rValue;
            
            l.put(key, merge(lMap, rMap));
            
            continue;
         }
         
         if (lValue instanceof List || rValue instanceof List) {
</code></pre>
<p>I'd use <code>else if</code> instead of <code>continue</code>, would make it much easier to read.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>if (lValue instanceof Map &amp;&amp; rValue instanceof Map) {
</code></pre>
<p><code>instanceof</code> will throw a <code>NullPointerException</code> if the given object is <code>null</code>, so you want to check that first.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>   public static &lt;K&gt; Map&lt;K, Object&gt; merge(
      Map&lt;K, Object&gt; l,
      Map&lt;K, Object&gt; r)
   {
      // ...
      return l;
   }
</code></pre>
<p>This is confusing. Either manipulate the given object, or return a copy of it, and make sure that you make the behavior clear in the documentation.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>            List&lt;Object&gt; lList = (List&lt;Object&gt;)lValue;
            List&lt;Object&gt; rList = (List&lt;Object&gt;)rValue;
            
            if (rList != null)
               lList.addAll(rList);
</code></pre>
<p>You're manipulating the <code>List</code> instance, which might or might not be desired from the callers point of view.</p>
    </div>