<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I hope there are tests.  Because when I attempted to refactor some parts
I wasn't quite sure if it retained the meaning or not.</p>

<p>There are docstrings, but I think the exceptional situations should at
least be mentioned, i.e. "Malformed input will raise an exception
instead of returning empty output." or so.</p>

<p>Reuse computed values, e.g. <code>serial_number.toString()</code>, to reduce the
lines of code to read; it will be probably optimised away regardless.</p>

<p>Some variables don't have the best names, e.g. <code>thirteen</code> doesn't tell
anything about the intended use.</p>

<p><code>sgtin96_company_prefix_len_partitions</code> can be <code>final</code> too.</p>

<p>The inner part of the loop could reuse the same computation.  Also
<code>substring</code> isn't the best option here - <code>charAt</code> is potentially more
performant, but also requires changing <code>parseInt</code> to something
different; see also
<a href="https://stackoverflow.com/questions/4968323/java-parse-int-value-from-a-char">this SO post</a>:</p>

<pre><code>int parsed = Character.getNumericValue(thirteen.charAt(i));
if (i%2 == 0) {
    termB += parsed;
} else {
    termA += parsed;
}
</code></pre>

<p>The return value should be more structured than a map, the easiest way
for that would be a value class with three members:</p>

<pre><code>public static class EPCID {
    /**
     * Encoded Filter Value
     */
    private final String filterValue;
    /**
     * Item Reference
     */
    private final String itemReference;
    /**
     * Serial Number
     */
    private final String serialNumber;
    /**
     * Encoded GTIN-14
     */
    private final String gtin14;

    public EPCID(String filterValue, String itemReference, String serialNumber, String gtin14) {
        this.filter_value = filterValue;
        this.item_reference = itemReference;
        this.serial_number = serialNumber;
        this.gtin14 = gtin14;
    }

    public String getFilterValue() {
        return this.filterValue;
    }

    public String getItemReference() {
        return this.itemReference;
    }

    public String getSerialNumber() {
        return this.serialNumber;
    }

    public String getGtin14() {
        return this.gtin14;
    }
}
</code></pre>

<p>Which is then returned from the method:</p>

<pre><code>/**
 * ...
 * @return the decoded EPCID
 */
public static EPCID decode(String sgtin96_epc) {
    ...
    return new EPCID(filter_value.toString(), item_reference_and_indicator, serial_number.toString(), gtin14);
}
</code></pre>

<p>Possibly change the data types if <code>String</code> isn't actually the best
option there.  If the map is really needed I'd add a conversion/view to
the value class instead.</p>

<p>The helper functions (binary to hex and back) should probably be moved
into a separate class if used anywhere else since they aren't really
part of this classes responsibility.</p>

<p>The zero-fill function can be a bit nicer by exiting early and using
<a href="https://stackoverflow.com/questions/9128737/fastest-way-to-set-all-values-of-an-array"><code>Arrays.fill</code></a>
instead of the <code>replace</code> call, which does more than you need it to:</p>

<pre><code>private static String zeroFill(String s, int n) {
    int fill = n - s.length();
    if (fill == 0) {
        return s;
    }
    char[] zeroes = new char[fill];
    Arrays.fill(zeroes, '0');
    return zeroes + s;
}
</code></pre>

<p>If it's a concern the whole class should be profiled for unnecessary
allocations btw. since it's using a lot of string contenations
etc. which could possibly be avoided by using
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html" rel="nofollow noreferrer"><code>StringBuilder</code></a>,
or by preallocating space.</p>

<p>That <code>serial_number</code> is sometimes a <code>Long</code> and sometimes a <code>String</code> is
hopefull not an issue?  E.g. a leading zero doesn't have to be
preserved?</p>

<p>The serial number check can be moved out of the <code>encode</code> method easily:</p>

<pre><code>private static void checkSerialNumber(Long serial_number) {
    String serial_number_string = serial_number.toString();
    if (serial_number_string.length() &gt; 1 &amp;&amp; serial_number_string.charAt(0) == '0') {
        throw new IllegalArgumentException("serial number may not begin with 0");
    }
}
</code></pre>

<p>This also highlights one question:  In which situation, except it being
<code>0</code>, does this raise an exception?</p>

<p>Unless I'm missing something, <code>sgtin96_company_prefix_len_partitions</code>
could very well be a regular two-dimensional array instead of a map.</p>

<p>The naming scheme is all over the place; at least constants should be
uppercase though, that makes it a bit easier to understand.</p>

<p>Some common code can still be factored out,
e.g. <code>binaryToInt(string.substring(...))</code> can be moved into a separate
method as it's used quite often:</p>

<pre><code>private static Integer binarySubstringToInt(String bin, int start, int end) {
    return Integer.parseInt(bin.substring(start, end), BIN);
}
</code></pre>

<p>The method <code>getPartitionsByPartitionValue</code> returns an opaque <code>int[]</code>
array.  It would be better if the return value actually had some
meaningful name.  The method is also linearly scanning the list, which
is per se bad; since the input value is already verified, I'd rather
have a pre-constructed array somewhere, where it would be just
<code>array[partition_value]</code> instead.</p>
    </div>