<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://www.boost.org/doc/libs/1_67_0/libs/mp11/doc/html/mp11.html#tuple" rel="nofollow noreferrer">Boost’s implementation</a> has a few details I spot:</p>

<pre><code>// tuple_for_each
namespace detail
{

template&lt;class Tp, std::size_t... J, class F&gt; BOOST_CONSTEXPR F tuple_for_each_impl( Tp &amp;&amp; tp, integer_sequence&lt;std::size_t, J...&gt;, F &amp;&amp; f )
{
    using A = int[sizeof...(J)];
    return (void)A{ ((void)f(std::get&lt;J&gt;(std::forward&lt;Tp&gt;(tp))), 0)... }, std::forward&lt;F&gt;(f);
}

template&lt;class Tp, class F&gt; BOOST_CONSTEXPR F tuple_for_each_impl( Tp &amp;&amp; /*tp*/, integer_sequence&lt;std::size_t&gt;, F &amp;&amp; f )
{
    return std::forward&lt;F&gt;(f);
}

} // namespace detail

template&lt;class Tp, class F&gt; BOOST_CONSTEXPR F tuple_for_each( Tp &amp;&amp; tp, F &amp;&amp; f )
{
    using seq = make_index_sequence&lt;std::tuple_size&lt;typename std::remove_reference&lt;Tp&gt;::type&gt;::value&gt;;
    return detail::tuple_for_each_impl( std::forward&lt;Tp&gt;(tp), seq(), std::forward&lt;F&gt;(f) );
}
</code></pre>

<ul>
<li>it uses <code>remove_reference</code> </li>
<li>it forwards the tuple by reference to the helper rather than copying it</li>
<li>it uses constexpr</li>
</ul>

<p>It doesn’t return the tuple of results though, but rather just returns the function object.  So you would <code>make_tuple</code> instead of <code>(void)</code>-int the results.</p>

<p>Incomputable: In your version, can you use return type deduction and avoid the horrendous meta-computation for the return type?  Let <code>make_tuple</code> do the argument deduction on the results and figure it out.</p>
    </div>