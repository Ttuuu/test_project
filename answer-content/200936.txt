<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs</h2>

<p>The <code>censor()</code> function prints its progress as a triangle of text, as <code>censored_text</code> lengthens one character at a time.  Did you accidentally indent the <code>print()</code> statement one level too far?  In any case, it would be better practice to <code>return</code> its output, so that the caller can choose to <code>print()</code> it instead (or do something else with it).</p>

<p>"Censoring" implies that all appearances of the <code>word</code> should be replaced.  However, your <code>censor()</code> function only replaces the first occurrence, since <code>count</code> is never reset to 0.</p>

<p>Your <code>detect_word_start(text, word)</code> function is basically <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="noreferrer"><code>text.index(word)</code></a>, with some differences:</p>

<ul>
<li><p>If the <code>word</code> is not found, it returns <code>None</code>, whereas <code>text.index(word)</code> would raise a <code>ValueError</code> exception.  Since the <code>censor()</code> function <strong>doesn't handle the possibility that the <code>word</code> never appears in the <code>text</code>,</strong> your code could crash.  (I would expect the <code>censor()</code> function to return the <code>text</code> unmodified, if there is nothing to redact.)</p></li>
<li><p>It returns a <strong>one-based index</strong>, which is very unconventional in Python, where indexes start from 0.  (Your <code>censor()</code> function also counts characters starting from 1, so at least you are consistent.)</p></li>
<li><p>It <strong>misses some possible results</strong> because it makes one pass through the <code>text</code>, and will not backtrack.  For example, <code>detect_word_start('coconut', 'con')</code> and <code>detect_word_start('nonoperational', 'nope')</code> both return <code>None</code>.</p>

<p>That might be acceptable behaviour, if you are only searching for complete space-delimited words.  However, from the way the code was written, it appears that this behaviour was unintended.</p></li>
</ul>

<h2>More expressive and efficient code</h2>

<p>Counting loops are usually better written using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code></a>.</p>

<p>Python supports <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="noreferrer">chained comparisons</a>:</p>

<blockquote>
  <p>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>…</p>
</blockquote>

<p>Here is the same code, preserving your 1-based indexing convention and other censorship bugs:</p>

<pre><code>def censor(text, word):
    word_start = detect_word_start(text, word)
    censored_text = ''
    for i, char in enumerate(text, 1):
        if word_start &lt;= i &lt; word_start + len(word):
            censored_text += '*'
        else:
            censored_text += x
    return censored_text
</code></pre>

<p>We can save a few lines using a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer">conditional expression</a>.  (I know, it looks worse, but there's a reason that you'll see…)</p>

<pre><code>def censor(text, word):
    word_start = detect_word_start(text, word)
    censored_text = ''
    for i, char in enumerate(text):
        censored_text += '*' if (word_start &lt;= i &lt; word_start + len(word)) else x
    return censored_text
</code></pre>

<p>There is an efficiency problem with your code.  Python strings are immutable.  Therefore, <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="noreferrer">building strings using <code>+=</code> concatenation is not optimal</a>:</p>

<blockquote>
  <p>Concatenating immutable sequences always results in a new object. This means that building up a sequence by repeated concatenation will have a quadratic runtime cost in the total sequence length.</p>
</blockquote>

<p>A way to avoid that performance problem would be to construct the result using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer"><code>''.join(…)</code></a> along with a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="noreferrer">generator expression</a>:</p>

<pre><code>def censor(text, word):
    word_start = detect_word_start(text, word)
    return ''.join(
        '*' if word_start &lt;= i &lt; word_start + len(word) else x
        for i, char in enumerate(text)
    )
</code></pre>

<h2>Simple solution</h2>

<p>There is a very simple solution, using <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="noreferrer"><code>str.replace()</code></a> and the <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="noreferrer"><code>*</code> operation on a string</a>:</p>

<pre><code>def censor(text, word):
    return text.replace(word, '*' * len(word))
</code></pre>
    </div>