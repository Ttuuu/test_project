<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Fully Qualify Ranges</h2>

<p>Your code assumes that the correct worksheet will be active when the code is ran.  You should get in the habit of <strong>Fully Qualifying</strong> all range references.  This will ensure that your code will work as intended no matter what worksheet is activated.</p>

<p>Technically, to be fully <strong>Fully Qualified</strong> a range needs to be referenced by workbook and worksheet.</p>

<blockquote>
  <p>ThisWorkbook.Worksheets("Sheet1").Range ("A2:C7")</p>
</blockquote>

<p>Or</p>

<blockquote>
  <p>Workbooks("Some Book").Worksheets("Sheet1").Range ("A2:C7")</p>
</blockquote>

<p>But in general it is acceptable to exclude the workbook if you are not going to be working with multiple workbooks.</p>

<blockquote>
  <p>Worksheets("Sheet1").Range ("A2:C7")</p>
</blockquote>

<p>With statement blocks should be used so that you don't have to repeatedly requalify your ranges.</p>

<blockquote>
  <p>With ThisWorkbook.Worksheets("Sheet1")</p>
  
  <p>For Each a in .Range ("A2:C7")</p>
</blockquote>

<h2>Dynamic Ranges and Relative References</h2>

<p>Dynamic Ranges should be used when working with records.  In this way, you will not have to rewrite you code every time a recorded is added or deleted.</p>

<p>This applies to both ranges</p>

<blockquote>
<pre><code>With ThisWorkbook.Worksheets("Sheet1")
    With .Range("A2", .Range("A" &amp; .Rows.Count).End(xlUp))
        For Each a In .Cells
            arr.Add a, a
        Next
    End With
End With
</code></pre>
</blockquote>

<p>and formulas and FormulaArray</p>

<blockquote>
<pre><code>Range("F2").FormulaArray = "=IFERROR(INDEX(OFFSET($C1,1,0,COUNTA($A:$A)-1,1),MATCH(1,((OFFSET($A1,1,0,COUNTA($A:$A)-1,1)=$E2)*(OFFSET($B1,1,0,COUNTA($A:$A)-1,1)=F$1)),0)),"""")"
</code></pre>
</blockquote>

<p>Having the macro hard the ranges for the FormulaArray is an acceptable middle ground.  I would do this to prevent the formulas from slowing up the workbook.</p>

<h2>Error Handling</h2>

<p>It is best to reduce the scope of <code>On Error Resume Next</code> as much as possible.  This will give you better information when something goes wrong.</p>

<blockquote>
<pre><code>On Error Resume Next
For Each a In var
    arr.Add a, a
Next
On Error GoTo 0
</code></pre>
</blockquote>

<p>Or</p>

<pre><code>For Each a In var
    On Error Resume Next
    arr.Add a, a
    On Error GoTo 0
Next
</code></pre>

<h2>Variable Naming</h2>

<p>Don't not use <code>l</code> as a variable name.  It is too hard to distinguish from <code>1</code>.</p>

<p><code>l = 1</code> does nothing.  The <code>For l = 1</code> initiates <code>l</code> to <code>1</code>.</p>

<p><code>arr</code> should only be used to name arrays variables.  Personally, I default to <code>data</code>, <code>result</code> or <code>results</code>.</p>

<p>Although there is nothing wrong with <code>a</code>, I prefer <code>v</code>, <code>key</code>, or <code>item</code>.</p>

<hr>

<h2>Alternate Methods</h2>

<p>Here are some other ways of pivoting the data without using worksheet formulas.</p>

<h2>Indexing Array Using ArrayList to Sort Headers</h2>

<p>This uses <code>ArrayList</code> to store and sort the headers.  The position of the headers in the <code>ArrayList</code> is used as indices for a 2 dimensional array.</p>

<pre><code>Sub PivotDataIndexedArray()
    Dim key As Variant, data() As Variant
    Dim rowHeaders As Object, columnHeaders As Object
    Set rowHeaders = CreateObject("System.Collections.ArrayList")
    Set columnHeaders = CreateObject("System.Collections.ArrayList")

    With ThisWorkbook.Worksheets("Sheet1")
        With .Range("A2", .Range("A" &amp; .Rows.Count).End(xlUp))
            For Each key In .Value
                If Not rowHeaders.Contains(key) Then rowHeaders.Add key
            Next
            For Each key In .Offset(0, 1).Value
                If Not columnHeaders.Contains(key) Then columnHeaders.Add key
            Next

            data = .Cells.Resize(, 3).Value
        End With

        Dim results() As Variant
        Dim n As Long
        ReDim results(1 To rowHeaders.Count + 2, 1 To columnHeaders.Count + 2)

        'Add names
        rowHeaders.Sort
        For n = 0 To rowHeaders.Count - 1
            results(n + 2, 1) = rowHeaders(n)
        Next

        'Add categories
        columnHeaders.Sort
        For n = 0 To columnHeaders.Count - 1
            results(1, n + 2) = columnHeaders(n)
        Next

        Dim r As Long, c As Long

        'Add dates
        For n = 1 To UBound(data)
            r = rowHeaders.IndexOf(data(n, 1), 0)
            c = columnHeaders.IndexOf(data(n, 2), 0)
            results(r + 2, c + 2) = data(n, 3)
        Next

        .Range("F1").Resize(UBound(results), UBound(results, 2)).Value = results

    End With

End Sub
</code></pre>

<h2>ADODB CrossTab Query</h2>

<p>An <code>ADODB.Connection</code> query can be used to pivot the data.  The source data should be the only data on the worksheet, otherwise, you would have to specify the datas' range on the worksheet in the query (e.g [Sheet1$A1:C7]).</p>

<pre><code>Sub PivotDataADODBQuery()
    Const SQL As String = "TRANSFORM First([Date])" &amp; vbNewLine &amp; _
          "SELECT [Name]" &amp; vbNewLine &amp; _
          "FROM [Sheet1$]" &amp; vbNewLine &amp; _
          "GROUP BY [Name]" &amp; vbNewLine &amp; _
          "PIVOT [Certificate];"

    Dim conn As Object
    Dim rs As Object
    Set conn = CreateObject("ADODB.Connection")

    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source='" &amp; ThisWorkbook.FullName &amp; "';Extended Properties='Excel 12.0;HDR=YES;IMEX=1';"
    conn.Open

    Set rs = conn.Execute(SQL)

    With ThisWorkbook.Worksheets("Sheet2")
        .Cells.ClearContents

        Dim c As Long

        For c = 0 To rs.Fields.Count - 1
            .Cells(1, c + 1).Value = rs.Fields(c).Name
        Next

        .Range("A2").CopyFromRecordset rs
    End With

    rs.Close
    conn.Close

End Sub
</code></pre>
    </div>