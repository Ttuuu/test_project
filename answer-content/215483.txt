<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Double-quote variables used as command arguments</h3>

<p>Although in many places in the posted code the variables used as command arguments are correctly double-quoted, there are more than a few exceptions, for example <code>parseArgs $@</code>, which should be <code>parseArgs "$@"</code> to preserve arguments with spaces. </p>

<p>It's a good habit to <a href="https://unix.stackexchange.com/questions/171346/security-implications-of-forgetting-to-quote-a-variable-in-bash-posix-shells">systematically double-quote variables</a> used as command arguments.</p>

<h3>Collect argument lists in arrays instead of strings</h3>

<p>The <code>createBackUp</code> function collects arguments for the rsync command in a string and executes it. This will not work if some elements (here <code>$srcDir</code>, <code>$snapDir</code>, or <code>$LATEST_SNAP</code>) contain spaces.</p>

<p>You can make it safe by using an array instead:</p>

<pre><code>createBackUp() {   
    snapDir="$dstDir/$1" # ................. Name of the snap dir.
    logFile="$logDir/$1.log" # ............. Name of the log file.

    RSYNC_CMD=("rsync") # ................... Rsync Command.
    RSYNC_CMD+=("--archive") # .............. Enable recursion and preserve infos.
    RSYNC_CMD+=("--verbose") # .............. Increase amount of infos printed.
    RSYNC_CMD+=("--human-readable") # ....... Output number in readable format.
    RSYNC_CMD+=("--progress") # ............. Show progress during transfer.
    RSYNC_CMD+=("--delete") # ............... Delete files from receiving side.
    RSYNC_CMD+=("--link-dest=$LATEST_SNAP") # "latest" symbolic link to hardlink.
    RSYNC_CMD+=("$srcDir") # ................ Source directory to backup.
    RSYNC_CMD+=("$snapDir") # ............... Destination directory to backup in.

    # Create backup and save the output in a log file.
    $cmdPrefix "${RSYNC_CMD[@]}" 2&gt;&amp;1 | tee "$logFile"
}
</code></pre>

<p>I also dropped the <code>function</code> keyword which is not recommended in Bash.</p>

<h3>Simplify using arithmetic context</h3>

<p>The <code>calculateDaysFromBackupOfSameSet</code> uses several arithmetic operations and conditions which could be simplified and made more readable using <em>arithmetic context</em>:</p>

<pre><code>calculateDaysFromBackupOfSameSet() {
    local i todayInDay daysToBackup
    local todayInSec=$(date +%s)

    ((todayInDay = todayInSec / SEC_PER_DAY))
    ((daysToBackup = 2 ** (setsMax - 2)))
    local daysElapsed=daysToBackup

    for ((i = 1; i &lt; daysToBackup; i *= 2)); do
        if ! ((todayInDay &amp; i)); then
            ((daysElapsed = i * 2))
            break
        fi
    done

    echo "$daysElapsed"
}
</code></pre>

<p>I also eliminated some repeated <code>daysToBackup / 2</code>.
I believe this is equivalent to the original, but I haven't tested it.
Excuse me if I made an error, the point is more to demonstrate the power of the arithmetic context.</p>
    </div>