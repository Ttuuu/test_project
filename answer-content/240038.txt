<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One immediate improvement is realizing that for e.g the input <code>14 7</code>, all combinations like <code>x x x x x x 9</code> and above can never sum to <code>14</code>, because even for the minimal case <code>x = 1</code>, <code>9 + 6*1 = 15</code>. So you can vastly reduce the number of combinations you need to check by using </p>

<pre><code>k = {i for i in combinations_with_replacement(range(1, x - y + 2), y) if sum(i) == x}
</code></pre>

<p>For the input <code>14 7</code> this constitutes a difference of 77520 possible combinations down to 3432.</p>

<p>This adds a constraint only on the last number, but you could take this to its logical extreme and write code that always aborts the combinations once the sum has been reached.</p>

<p>One other thing you should do is use better names and use functions. I have no idea that <code>k</code> is a list of combinations of numbers, or what this means. Also, using <code>i</code> (and <code>j</code>, <code>k</code>, <code>n</code>, too, for that matter) for anything other than an integer is not helpful either.</p>

<p>I would at least rewrite your code to this:</p>

<pre><code>from itertools import combinations_with_replacement
try:  # Python 3.8+
    from math import prod
except ImportError:
    from functools import reduce
    from operator import mul
    def prod(x):
        """Returns the product of all elements of `x`, similar to `sum`."""
        return reduce(mul, x, 1)

def maximum_product_with_sum(x, n):
    """Return the maximum product of all `n` positive numbers that sum to `x`."""
    r = range(1, x - n + 2)
    candidates = {candidate 
                  for candidate in combinations_with_replacement(r, n)
                  if sum(candidate) == x}
    return max(map(prod, candidates), default=1)

if __name__ == "__main__":
    for _ in range(int(input())):
        x, n = tuple(map(int, input().split()))
        print(maximum_product_with_sum(x, n))
</code></pre>

<p>Note that I also added some short <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer"><code>docstring</code></a>s to describe what each function does and simplified getting the maximum, your inner call to <code>max</code> was not needed. The optional keyword argument argument <code>default</code> of <code>max</code> is the default value if the iterable is empty.</p>

<p>I also added a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script from another script without the code being run.</p>

<p>Here is the performance measured against your second function (the first one is way too slow) once for the input <code>x 7</code> and once for <code>14 n</code>:</p>

<p><a href="https://i.stack.imgur.com/ozoxN.png" rel="noreferrer"><img src="https://i.stack.imgur.com/ozoxN.png" alt="enter image description here"></a></p>

<p>You can see that this code is not only faster in general, it also becomes much faster if <code>n &gt; x / 2</code>.</p>
    </div>