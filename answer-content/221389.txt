<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>The API should preferrably consist of its own contracts (interfaces and <a href="https://en.wikipedia.org/wiki/Data_transfer_object" rel="nofollow noreferrer">DTO's</a>). The problem with your API is that it returns data that is too much flattened to be usable for consumers other than your intended application. </p>

<p>Ask yourself this:</p>

<ul>
<li>What if someone wants a different string layout for <code>PhoneNumberViewModel.Customer</code>?</li>
</ul>

<blockquote>
<pre><code> .Select(x =&gt; new PhoneNumberViewModel
    {
        // A specific string concatenation is bad practice for an API -&gt;
        Customer = $"{x.Customer.Title} {x.Customer.FirstName} {x.Customer.LastName}",
        PhoneNumber = x.Value
    })

 public class PhoneNumberViewModel // &lt;- make a DTO from this
    {
        public string PhoneNumber { get; set; }
        public string Customer { get; set; } // &lt;- reference a Customer DTO here
    }
</code></pre>
</blockquote>

<h3>Tips</h3>

<ul>
<li>Make your own DTO objects, keep OO-principles into account (don't flatten objects to <code>string</code>)</li>
<li>Use dedicated mappers from/to your domain or <a href="https://en.wikipedia.org/wiki/Data_access_object" rel="nofollow noreferrer">DAO</a> and the DTO. You could use a <a href="https://automapper.org/" rel="nofollow noreferrer">framework</a> for this.</li>
</ul>

<h3>Argument Guards</h3>

<p>Distinguish arguments that are not set from those that have an incorrect value. There is also a simpler way of checking a <code>Nullable&lt;&gt;</code> against either <code>null</code> or a value.</p>

<blockquote>
<pre><code>if (!customerId.HasValue || customerId.Value == 0)
{
      throw new ArgumentNullException(nameof(customerId));
}
</code></pre>
</blockquote>

<pre><code>if (customerId == null) // &lt;- calls customerId.HasValue
{
      throw new ArgumentNullException(nameof(customerId));
}
if (customerId == 0) // &lt;- calls customerId.Value
{
      throw new ArgumentException("The value cannot be 0.", nameof(customerId));
}
</code></pre>

<h2>Q&amp;A</h2>

<blockquote>
  <p>Where should one convert the Entity PhoneNumber.cs to its ViewModel 
  PhoneNumberViewModel.cs?</p>
</blockquote>

<p>Convert data to view models on the client. <code>PhoneNumberViewModel</code> should not be a contract in your service at all. Instead, create a DTO and let your controller map from DAO to DTO. In enterprise code, however, you might want to use <a href="https://en.wikipedia.org/wiki/Multitier_architecture" rel="nofollow noreferrer">multiple layers</a> and refactor your server alltogether.</p>
    </div>