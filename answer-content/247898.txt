<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I took a look at it and will elaborate on my few findings below.</p>
<p>First of all, your default export is wrong, but most likely you knew about it and you have already fixed it in your local version (might be also some pasting issue) - it's a no brainer. <code>SimpleLocalStorageCache</code> vs. <code>CacheSimpleLocalStorageCache</code>. Also I don't think it's necessary to export the interface <code>CacheItem</code> as it's most likely an internal interface to be used. Do not leak it, to prevent misuse :-)</p>
<p>Next, looking at the constructor <code>constructor(private key: string, private durationInSeconds: number) {}</code> it's quite nice that you've used constructor assignment, thumbs up for that. What I think is a bit weird though, is the fact, that you've decided that the consumer of the API has to pass in seconds. That's a bit odd if we look at for example the parameters of <code>setTimeout</code>.</p>
<p>Another thing that bugs me with the seconds/calculation is, that I would except it to be converted to milliseconds inside the constructor. That's a one time calculation and isn't required to be done each time a consumer of this API is calling the <code>update</code> function.</p>
<p>I noticed that I can pass in functions which get's lost:</p>
<pre><code>import Storage from "yourStorageImplementation";

const TWO_SECONDS = 2;
const instance = new Storage("someKey", TWO_SECONDS);
instance.update(() =&gt; console.log("this will be lost!"));
</code></pre>
<p>Fetching the exact same, results in this unexpected behavior:</p>
<pre class="lang-js prettyprint-override"><code>instance.get() // -&gt; { data: undefined, expiration: /*some value */ }
</code></pre>
<p>If you don't support persisting functions, which is fine, prevent the consumer of the API to pass in such data. This could be achieved by e.g. adjusting the generic to only allow <code>strings, booleans, and objects with key, value pairs</code> maybe extend/reduce this to your needs:</p>
<pre class="lang-js prettyprint-override"><code>class SimpleLocalStorageCache&lt;T extends string | number | boolean | { [key: string]: string | number | boolean }&gt; { ... }
</code></pre>
<p>Alternatively you could do filter out just any function like:</p>
<pre class="lang-js prettyprint-override"><code>type IsNotFuction&lt;X&gt; = X extends (...args: any[]) =&gt; any ? never : X;

class SimpleLocalStorageCache&lt;T&gt; {
  ...
  update(data: IsNotFuction&lt;T&gt;): void {
    const durationInMilliseconds = this.durationInSeconds * 1000;
    
    localStorage.setItem(
      this.key,
      JSON.stringify({
        data,
        expiration: Date.now() + durationInMilliseconds,
      })
    );
  }
}

// Usage, isn't quite handy:
const storage1 = new SimpleLocalStorageCache&lt;() =&gt; void&gt;("someKey", 2); // It's required to provide the generic here, meeeh!
console.log(storage1.update(() =&gt; alert("bla"))) // Errors here!
console.log(storage1.get());
</code></pre>
<p>I do like the solution and most of my write up is opinionated. Below are some suggestions I came up with while fiddling around with your solution:</p>
<p><strong>Suggestion:</strong> Do you intend to extend it for <code>sessionStorage</code> and let the user decide the caching strategy? Is there a plan to properly support functions?</p>
<p><strong>Suggestion:</strong> What do you think about a fluent API for this extension. Wouldn't it be nice to support something like: <code>new Storage("key", 2).update(/* some data */).get();</code> to immediately fetch the result again?</p>
    </div>