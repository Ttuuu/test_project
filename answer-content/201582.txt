<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What I recommend to improve to author - is to move calculation out of <code>IO</code> routines and make reusable function similar to listed below. Below is a Swift version which looks a bit different due Swift syntax. But C/C++ code can be nearly the same with the difference of array allocation.</p>

<hr>

<p>Swift 4 version.</p>

<p>According to documentation for <code>Array</code> data type the complexity is O(1).</p>

<blockquote>
  <p>Reading an element from an array is \$O(1)\$. Writing is \$O(1)\$ unless the
  arrayâ€™s storage is shared with another array, in which case writing is
  O(n), where n is the length of the array.</p>
</blockquote>

<p>See: <a href="https://developer.apple.com/documentation/swift/array/1540606-subscript" rel="nofollow noreferrer">The Apple documentation for <code>subscript()</code></a></p>

<p>So, first we can safely allocate array of needed size. Then we can store intermediate sums at provided boundaries. In second part of calculation we finding maximum by summing intermediate values.</p>

<pre><code>func arrayManipulation(n: Int, queries: [[Int]]) -&gt; Int {

   var result = Array(repeating: 0, count: n)

   for query in queries {
      let left = query[0] - 1
      let right = query[1] - 1
      let amount = query[2]
      result[left] += amount
      if (right + 1) &lt; n {
         result[right + 1] -= amount
      }
   }

   var max = 0
   var x = 0
   for i in 0 ..&lt; n {
      x += result[i]
      if max &lt; x {
         max = x
      }
   }

   return max
}
</code></pre>
    </div>