<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've followed some conventions very well like CAPS for constants. Very nice. Here are some points:</p>

<h1>Standard library imports precede 3rd party ones</h1>

<pre><code>import pygame
import random
</code></pre>

<p>should be changed to</p>

<pre><code>import random

import pygame
</code></pre>

<p>The middle line is to differentiate between the two types of imports</p>

<h1>Two lines after imports</h1>

<p>There should be two lines after imports</p>

<pre><code>import random

BOARD_SIZE_WIDTH = 25
</code></pre>

<p>to</p>

<pre><code>import random


BOARD_SIZE_WIDTH = 25
</code></pre>

<h1>Better equate <code>False</code> to <code>not True</code></h1>

<p>This </p>

<pre><code>while self.foodOnBoard == False:
</code></pre>

<p>can be changed to</p>

<pre><code>while not self.foodOnBoard:
</code></pre>

<h1>While True</h1>

<p>Better add <code>if cond</code> directly instead of <code>if cond == True</code></p>

<p>From this</p>

<pre><code>while gameRunning == True:
</code></pre>

<p>to this:</p>

<pre><code>while gameRunning:
</code></pre>

<h1>No object inheritance for classes in Python3</h1>

<p>Though your actual code runs on Python 3.8, you can leave out object inheritance for classes. From this:</p>

<pre><code>class cobra(object):
</code></pre>

<p>to this</p>

<pre><code>class cobra:
</code></pre>

<h1>Caps for classes</h1>

<p>Class names should be PascalCase. <code>cobra</code> becomes <code>Cobra</code>. <code>gold_mine</code> becomes <code>GoldMine</code> for class name.</p>

<h1>Don't nest classes</h1>

<p>Nesting classes means putting one class inside the other</p>

<pre><code>class cobra(object):
    numberOfSegments = 1
    sizeOfSegments = SEGMENT_SIZE
    segments = []

    def __init__(self, posX, posY, direction):
        self.posX = posX
        self.posY = posY
        self.direction = direction

    class segment(object):
        def __init__(self, posX, posY):
            self.posX = posX
            self.posY = posY
...
</code></pre>

<p>Putting it outside increases readability.</p>

<pre><code>class segment(object):
    def __init__(self, posX, posY):
        self.posX = posX
        self.posY = posY


class cobra(object):
    numberOfSegments = 1
</code></pre>

<p>You then modify</p>

<pre><code>cobra.add_segment(cobra.segment(posX, posY))
</code></pre>

<p>to</p>

<pre><code>cobra.add_segment(segment(posX, posY))
</code></pre>

<p>in main and update_segments</p>

<h1>Snake case for variables</h1>

<p><code>numberOfSegments</code> should be <code>number_of_segments</code></p>

<h1>Additional brackets remove the need for backslash</h1>

<p>Adding <code>()</code> to conditionals eliminate the need for <code>\</code>:</p>

<p>From this:</p>

<pre><code>    if (cobra.posX &lt; 0) or (cobra.posY &lt; 0) or (cobra.posX &gt; BOARD_SIZE_WIDTH - 1)\
    or (cobra.posY &gt; BOARD_SIZE_HEIGHT - 1) or (board.spaces[cobra.posX][cobra.posY] == COBRA):
</code></pre>

<p>to that:</p>

<pre><code>    if ((cobra.posX &lt; 0) or 
        (cobra.posY &lt; 0) or 
        (cobra.posX &gt; BOARD_SIZE_WIDTH - 1) or
        (cobra.posY &gt; BOARD_SIZE_HEIGHT - 1) or 
        (board.spaces[cobra.posX][cobra.posY] == COBRA)):
</code></pre>

<h1>Return True directly</h1>

<p>In</p>

<pre><code>def check_collision(board, cobra):
    ...
        collision = True
    else:
        collision = False

    return collision
</code></pre>

<p>returning True or False directly might be more readable</p>

<pre><code>def check_collision(board, cobra):
    ...
        return True
    else:
        return False
</code></pre>

<p>or as <a href="https://codereview.stackexchange.com/questions/205637/nibbles-snake-game-in-python/236041?noredirect=1#comment462275_236041">@Linny suggested</a></p>

<pre><code>def check_collision(board, cobra):
    return (
        (cobra.posX &lt; 0) or 
        (cobra.posY &lt; 0) or 
        (cobra.posX &gt; BOARD_SIZE_WIDTH - 1) or
        (cobra.posY &gt; BOARD_SIZE_HEIGHT - 1) or 
        (board.spaces[cobra.posX][cobra.posY] == COBRA))
</code></pre>

<h1>Rearchitecture</h1>

<p>I suggest an <code>events()</code> function to have all events in it then call it in main so that your main remains clutter-free</p>

<p>I also suggest a <code>Food</code> class and a <code>display()</code> method added to both <code>Food</code> and <code>Cobra</code>. Imagine if the characters were more then just rectangles, then you'd do:</p>

<pre><code>                if self.spaces[x][y] == COBRA:
                    Cobra.display(x, y)
                elif self.spaces[x][y] == FOOD:
                    Food.display(x, y)
</code></pre>

<p><code>update_segments</code> as well as <code>check_collision</code> can be a methods tied to board.</p>

<h1>Miscellaneous</h1>

<ul>
<li>Two lines needed after classes</li>
<li>You might want to hide the welcome message and lib version. See <a href="https://stackoverflow.com/questions/51464455/why-when-import-pygame-it-prints-the-version-and-welcome-message-how-delete-it">here</a>.</li>
<li>These three constants are better suited as functions:</li>
</ul>

<pre><code>EMPTY_RECT = pygame.Rect(0, 0, BOARD_SPACE_SIZE, BOARD_SPACE_SIZE)
COBRA_RECT = pygame.Rect(0, 0, BOARD_SPACE_SIZE, BOARD_SPACE_SIZE)
FOOD_RECT = pygame.Rect(0, 0, BOARD_SPACE_SIZE, BOARD_SPACE_SIZE)
</code></pre>
    </div>