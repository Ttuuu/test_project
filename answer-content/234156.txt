<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're making a text interface, remember to put a prompt character with spaces like <code>&gt;</code> so I know where to type. Even better would be to get an argument from <code>sys.argv</code> but I digress. Also, you should specify that specifically an integer greater than 1 is required, and raise an <code>Exception</code> otherwise. </p>

<p>After reading the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">pseudocode on Wikipedia</a> your implementation is perfect. However your code is hard to read: include some comments. <code>primes_in_range</code> - in range of what? <code>d</code> - what is "d"? Since we have the ability to write variable names we should take advantage of it. </p>

<p>As for speed optimizations: in your first program you are storing the primes into a <code>list</code>. If you read the <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">time complexity for Python collections</a>, <code>set</code> is more efficient for deleting items - O(1) instead of O(n). After using a <code>set</code> instead of a <code>list</code>, I managed to <strong>significantly</strong> reduce the time it took for your code to run by more than 1000X. </p>

<p><a href="https://i.stack.imgur.com/nVS1X.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/nVS1X.png" alt="enter image description here"></a></p>

<p>In fact, after using a <code>set</code> instead of a <code>list</code> I was able to calculate primes up to 1,000,000 in 0.30 seconds, whereas using the <code>list</code> did not finish even after 20 minutes on my Core i7. </p>

<p>Your second solution has nothing horribly wrong with it, it's simply just a brute force algorithm. That's why it takes forever. Consider trying the <a href="https://en.wikipedia.org/wiki/Sieve_of_Atkin" rel="nofollow noreferrer">Sieve of Atkin algorithm.</a></p>
    </div>