<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The "odd" check in the constructor is a bit obfuscated, and it does not need to be executed at runtime.  A simpler <code>static_assert</code> to check for odd (and non-negative) would report errors sooner.</p>

<pre><code>std::static_assert(SIZE &gt;= 0 &amp;&amp; (SIZE &amp; 1) == 1);
</code></pre>

<p>Having <code>operator[]</code> perform a range check is atypical.  The <code>operator[]</code> is typically fast, with no error checking, while an <code>at</code> member function will perform range checks.  However, your use case may require otherwise.</p>

<p>It won't work with const arrays, as there is no const version of the array access operator.  <code>constexpr</code> versions can also do the range checking at compile time, if you're accessing elements using constants and not variables.</p>

<p><strong>Future expansion</strong></p>

<p>You can add in <code>begin</code> and <code>end</code> members (et. al.) for use with iteration and range based for loops.</p>

<p>Using <code>std::array</code> as the underlying storage type can make it a bit easier to implement.</p>

<p>This class could be modified/expanded to allow generic upper and lower bounds, rather than balanced ones.</p>
    </div>