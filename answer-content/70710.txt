<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Style</strong>  </p>

<p>Initializing of multiple variables on one line <strong>removes readability</strong>.<br>
Writing <code>for</code> loops on one line <strong>removes readability</strong>.  </p>

<p>Dead code should be deleted (<code>// p = i + 1</code>)  </p>

<p><s><strong>Bug</strong>  </s></p>

<p>It seems that you have a little unnoticed bug in your code. Your loop  </p>

<blockquote>
<pre><code>for (int i = 0; i &lt; A.Length - 1; i++) {  
</code></pre>
</blockquote>

<p>misses the last element of your array.
</p>

<p><strong>Problem</strong>  </p>

<p>Let us assume we have an array <code>A</code> containing 8 elements like  </p>

<p>3 5 7 2 5 2 1 3</p>

<p>The ideal divider would be if the arrays left half summed up would be equal to the right half summed up.<br>
Unfortunatetly here  </p>

<p>sumLeft = A[0] + A[1] + A[2] + A[3] == 17<br>
sumRight = A[4] + A[5] + A[6] + A[7] == 11<br>
difference = sumLeft - sumRight == 6   </p>

<p>So as we see that the left half <code>&gt;</code> right half let us take the last element of the left side and check if <code>2 * A[half-1] &lt;= difference</code> wich is <code>2 * 2 &lt;= 6</code> so we can do </p>

<p>sumLeft = sumLeft - A[3] == 15<br>
sumRight = sumRight + A[3] == 13<br>
difference = difference - 2 * A[3] == 2  </p>

<p>Or simplified for <code>sumLeft &gt; sumRight</code>  </p>

<pre><code>difference = sumLeft - sumRight;
while (2*A[currentHalf-1] &lt;= difference)
{
    currentHalf = currentHalf -1;
    sumLeft = sumLeft - A[currentHalf]
    sumRight = sumRight + A[currentHalf]
    difference = difference - 2 * A[currentHalf];
}
</code></pre>

<p><strong>EDIT : Based on @Dmitry's comments I rechecked the algorithm and came to the result that this algorithm only works for positive numbers.</strong></p>

<p>And my implementation of the above  </p>

<pre><code>public int solution(int[] A)
{
    int length = A.Length;
    int sumLeft = 0;
    int sumRight = 0;

    int currentArrayHalf = length / 2;

    for (int i = 0; i &lt; currentArrayHalf; i++)
    {
        sumLeft = sumLeft + A[i];
        sumRight = sumRight + A[i + currentArrayHalf];
    }

    Boolean isEven = length % 2 == 0;

    if (!isEven) { sumRight = sumRight + A[length - 1]; }

    int step = 1;
    if (sumLeft &gt; sumRight)
    {
        step = -1;
        if (isEven)
        {
            currentArrayHalf--;
        }
    }

    int difference = Math.Abs(sumLeft - sumRight);
    if (difference == 0) { return difference; }

    while (currentArrayHalf &gt;= 0 &amp;&amp; currentArrayHalf &lt; length &amp;&amp; 2 * A[currentArrayHalf] &lt;= difference)
    {
        sumLeft = sumLeft - A[currentArrayHalf];
        sumRight = sumRight + A[currentArrayHalf];
        difference = difference - 2 * A[currentArrayHalf];
        currentArrayHalf = currentArrayHalf + step;
    }

    return difference;
}
</code></pre>
    </div>