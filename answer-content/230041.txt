<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li>Why isn't <code>PaidDate</code> a <code>DateTime</code>?</li>
<li>What is a "Shopping"? (I realize that often naming things is hard, but be careful when inventing new English words that do not adequately describe their contents, because the next person to maintain this code will find it harder to do so when they have to first decipher various terms.)</li>
<li>Use descriptive names: <code>item</code> is way too vague.</li>
<li><code>TotalCosts</code> and <code>Total</code> should be camelCased.</li>
<li><code>sum = item.Amount + sum;</code> can be shortened to <code>sum += item.Amount;</code>.</li>
<li>Don't do <code>if (item.ApplicationUserId == user.Id)</code>, instead use LINQ to extract the relevant records, e.g. <code>expenseDetails.Shoppings.Where(x =&gt; x.ApplicationUserId == user.Id)</code>. And if <code>PaidDate</code> was a <code>DateTime</code>, you could easily also include that in the LINQ query and immediately calculate the sum.</li>
<li>Why do you do <code>Total.ToList()</code>? How can it be anything else?</li>
</ul>

<hr>

<p>But all of that is IMHO just plugging some small holes, while ignoring the massive dam breach elsewhere: surely this logic could be done easily in one SQL query? </p>

<p>On a related note: is there even a point to have a <code>List&lt;double&gt; Total</code>? I wouldn't be surprised if all you did with those is add them up. </p>

<p>And if you're not adding them up and always assume that the first item is the sum of <code>Shoppings</code> etc. and use this to display them elsewhere: please don't. In such cases always use the key-value pair structure, so you'd know that value X is definitely the sum of the <code>Shoppings</code>.</p>
    </div>