<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use default member initialization where appropriate</h2>

<p>You always want to set <code>m_Fullscreen</code> to <code>false</code> when creating a new <code>Window</code>. Instead of setting this variable in the constructor, just initialize it where you declare it:</p>

<pre><code>class Window {
    ...
    bool m_Fullscreen = false;
</code></pre>

<p>It doesn't seem a big deal here, but once you have more member variables or more constructors, you will see that this is the preferred way to do this.</p>

<h2>Avoid creating trivial single-line private member functions</h2>

<p>Functions like the following are rather pointless to have:</p>

<pre><code>void Window::setWindowSizeCallback()
{
    glfwSetWindowSizeCallback(m_Window, static_WindowSizeCallback);
}
</code></pre>

<p>You are writing a lot of boiler plate here (5 lines in windows.cpp and windows.h combined), for no gain at all: this function is only used once, and calling <code>glfwSetWindowSizeCallback()</code> is roughly just as readable as <code>setWindowSizeCallback()</code>.</p>

<h2>Don't center the window after creating it</h2>

<p>The desktop environment's window manager will take care of placing new windows on the screen, and will usually take care of ensuring there is minimum overlap with existing windows, and might allow users to configure this behaviour. By forcing the window to be centered, you might cause undesirable results.</p>

<h2>Don't make <code>getWindow()</code> public</h2>

<p>The whole point of this class is to abstract away the details of GLFW's C API. So don't expose <code>m_Window</code> to users of your class. If a user of this class would need this pointer, it probably means you should add a new member function instead that performs the desired action on the window.</p>

<h2>Put <code>class Window</code> inside <code>namespace GLFW</code></h2>

<p>This makes it clear that you are providing a GLFW window, and it avoids conflicts with other libraries that might expose a class with the same name. It will also provide a nice home for any other classes that you might need to add, if your goal is to provide full coverage of GLFW's functions.</p>

<h2>Avoid declaring multiple variables on a single line</h2>

<p>Instead of:</p>

<pre><code>int m_Width, m_Height;
</code></pre>

<p>Just write:</p>

<pre><code>int m_Width;
int m_Height;
</code></pre>

<p>It generally is easier to read and to modify. Also, if things belong together, such as:</p>

<pre><code>int m_PosX, m_PosY;
</code></pre>

<p>Maybe they should be put into their own class or struct, like:</p>

<pre><code>struct {
    int x;
    int y;
} m_Pos;
</code></pre>

<p>Or if you use things like coordinates often, consider using a library that provides you with classes that do this. If this is going to be used for an application using Vulkan or OpenGL, I recommend using the <a href="https://glm.g-truc.net/%20GLM" rel="nofollow noreferrer">GLM library</a>, which provides a class <code>vec2</code> that is perfect for 2D coordinates.</p>

<h2>Consider alternatives to GLFW</h2>

<p>I would seriously recommend that you look to alternatives for GLFW. It has issues. You already encountered one: toggling between fullscreen and windowed mode. Almost every other library just has a function that looks like <code>setFullScreen(Window *w, bool fullscreen)</code>, and they take care of everything, including choosing the right monitor, remembering the original size, and so on. I strongly suggest you look at the <a href="https://www.libsdl.org/%20Simple%20DirectMedia%20Layer" rel="nofollow noreferrer">SDL2 library</a>, which has a better, friendlier API, can do much more than GLFW, and is very well supported on many platforms.</p>
    </div>