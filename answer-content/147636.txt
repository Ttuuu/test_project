<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is unnecessary:</p>

<blockquote>
<pre><code>if s == []:
    return [s]
</code></pre>
</blockquote>

<p>You can safely remove it, the program will still work.</p>

<p>This step is not so great:</p>

<blockquote>
<pre><code>if subset not in sets:
    sets.append(subset)
</code></pre>
</blockquote>

<p>For two reasons:</p>

<ul>
<li>Checking if a list contains some items is an \$O(n)\$ operation</li>
<li>Comparing sets is not free either</li>
</ul>

<p>A more efficient solution is to count from <code>0</code> until <code>1 &lt;&lt; n</code>, and use the bitmap of the count to decide the elements that are part of a subset.</p>

<pre><code>def subsets(s):
    sets = []
    for i in range(1 &lt;&lt; len(s)):
        subset = [s[bit] for bit in range(len(s)) if is_bit_set(i, bit)]
        sets.append(subset)
    return sets

def is_bit_set(num, bit):
    return num &amp; (1 &lt;&lt; bit) &gt; 0
</code></pre>

<p>That is, in a subset, each element may be either present, or not. So each element has only 2 possible states: in or out. 1 or 0. If we look at the binary representation of numbers from 0 to <code>2^n -1</code>, where <code>n</code> is the number of elements, for example when <code>n=3</code>, we have:</p>

<pre><code>    cba
0 = 000
1 = 001
2 = 010
3 = 011
4 = 100
5 = 101
6 = 110
7 = 111
</code></pre>

<p>There are 8 possible subsets, and the bits represent whether an element is in the subset or not.
This is the idea used by the program:</p>

<ul>
<li>The outer loop goes from <code>0</code> until <code>2^n - 1</code>.</li>
<li>The inner loop goes from <code>0</code> until <code>n - 1</code>.</li>
<li><code>1 &lt;&lt; bit</code> is 1 shifted to the left <code>bit</code> times.</li>
</ul>

<p>For example, when <code>i = 3</code>, that corresponds to bits <code>011</code>.
We loop from <code>0</code> until <code>2</code>, comparing <code>i</code> against <code>001</code>, <code>010</code>, and <code>100</code>.
For these values, the expression <code>i &amp; (1 &lt;&lt; bit)</code> will be evaluated as
<code>011 &amp; 001 = 001</code>, <code>011 &amp; 010 = 010</code>, and <code>011 &amp; 100 = 000</code>, respectively.
The first two are greater than 0, the last one is not.</p>
    </div>