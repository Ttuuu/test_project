<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In merge sort, instead of repeatedly writing <code>(beginPtr + endPtr) / 2</code> like this:</p>

<blockquote>
<pre><code>mergeSort(toSort, buffer, beginPtr, (beginPtr + endPtr) / 2);
mergeSort(toSort, buffer, (beginPtr + endPtr) / 2, endPtr);
mergeParts(toSort, buffer, beginPtr, (beginPtr + endPtr) / 2, endPtr);
</code></pre>
</blockquote>

<p>It would be better to store in a variable and write it only once:</p>

<pre><code>int midPtr = beginPtr + (endPtr - beginPtr) / 2;
mergeSort(toSort, buffer, beginPtr, midPtr);
mergeSort(toSort, buffer, midPtr, endPtr);
mergeParts(toSort, buffer, beginPtr, midPtr, endPtr);
</code></pre>

<hr>

<p>When you call the 4 sorting methods, there's quite a lot of boilerplate code.
Since all the sorting methods have the same signature (as they should),
you could create a helper function that takes the original array and a sort function as parameter:</p>

<pre><code>void runSort(int arr[], int length, void (*sort)(int[], int))
{
    int arrCopy[SIZE];
    std::copy(arr, arr + length, std::begin(arrCopy));
    auto start = Clock::now();
    sort(arrCopy, SIZE);
    auto end = Clock::now();
    printArray(arrCopy, SIZE);
    std::cout &lt;&lt; "Time taken (nanoseconds): " &lt;&lt; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(end - start).count() &lt;&lt; std::endl;
}
</code></pre>

<p>Then running the 4 sort functions becomes a lot simpler:</p>

<pre><code>runSort(arr, SIZE, bubbleSort);
runSort(arr, SIZE, insertionSort);
runSort(arr, SIZE, quickSort);
runSort(arr, SIZE, mergeSort);
</code></pre>
    </div>