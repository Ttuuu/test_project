<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's what I'd do:</p>

<p><strong><kbd><a href="http://coliru.stacked-crooked.com/a/023fe3ef59ecc614" rel="nofollow noreferrer">Live On Coliru</a></kbd></strong></p>

<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;

struct foo_struct {
    std::vector&lt;int&gt; bar_vector;

    foo_struct(std::vector&lt;int&gt; v = {}) : bar_vector(std::move(v)) {}
};

#include &lt;boost/fusion/adapted/struct.hpp&gt;
BOOST_FUSION_ADAPT_STRUCT(foo_struct, bar_vector)

#include &lt;boost/spirit/include/qi.hpp&gt;
namespace qi = boost::spirit::qi;
template &lt;typename Iterator&gt;
struct foo_parser : qi::grammar&lt;Iterator, foo_struct()&gt; {
    foo_parser() : foo_parser::base_type(start) {
        using namespace qi;
        start = int_ % "," &gt;&gt; eps;
    }

  private:
    qi::rule&lt;Iterator, foo_struct()&gt; start;
};

#include &lt;boost/spirit/include/karma.hpp&gt;
namespace karma = boost::spirit::karma;

template &lt;typename OutputIterator&gt;
struct foo_generator : karma::grammar&lt;OutputIterator, foo_struct()&gt; {
    foo_generator() : foo_generator::base_type(start) {
        using namespace karma;
        start = int_ % "," &lt;&lt; eps;
    }

  private:
    karma::rule&lt;OutputIterator, foo_struct()&gt; start;
};

#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;iomanip&gt;
int main() {
    using It = std::string::const_iterator;
    using Out = boost::spirit::ostream_iterator;
    std::string const input{ "5,3,2" };

    foo_struct foo;
    parse(input.begin(), input.end(), foo_parser&lt;It&gt;{}, foo);

    std::copy(begin(foo.bar_vector), end(foo.bar_vector), std::ostream_iterator&lt;int&gt;(std::cout &lt;&lt; "Input: ", ","));

    foo_generator&lt;Out&gt; gen;
    std::cout &lt;&lt; "\nOutput: " &lt;&lt; format(gen, foo) &lt;&lt; "\n";
}
</code></pre>

<p>Prints</p>

<pre><code>Input: 5,3,2,
Output: 5,3,2
</code></pre>

<h2>Notes:</h2>

<ul>
<li>The <code>eps</code> fix is based on this issue: <a href="https://stackoverflow.com/questions/19823413/spirit-qi-attribute-propagation-issue-with-single-member-struct">https://stackoverflow.com/questions/19823413/spirit-qi-attribute-propagation-issue-with-single-member-struct</a></li>
<li><p>You might have noticed that your grammar failed to skip whitespace. The reason was that the rules failed to declare a skipper (see <a href="https://stackoverflow.com/questions/17072987/boost-spirit-skipper-issues/17073965#17073965">https://stackoverflow.com/questions/17072987/boost-spirit-skipper-issues/17073965#17073965</a>).</p>

<p>I fixed it using my guideline that the grammar should be in charge of what is skippable, not the caller.</p></li>
<li><p>Many call sites were simplified by relying on ADL for name lookup</p></li>
<li>I elected to demo <code>karma::format</code> as a shorthand to generate to an output stream</li>
<li><p>You should consider verifying that all input is consumed:</p>

<pre><code>start = int_ % "," &gt;&gt; eoi;
</code></pre>

<p>It is convenient that now you can drop the <code>eps</code>, while you'll be told when remaining unparsed is not parsed:</p>

<pre><code>bool ok = parse(input.begin(), input.end(), foo_parser&lt;It&gt;{}, foo);
</code></pre></li>
</ul>
    </div>