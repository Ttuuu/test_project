<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Abstraction</h3>

<p>One thing that makes code more elegant is abstraction.  Consider adding something like </p>

<pre><code>class ArbitraryBaseNumber {

    private final int number;
    private final int base;

    public ArbitraryBaseNumber(int number, int base) {
        this.number = number;
        this.base = base;
    }

    public static ArbitraryBaseNumber valueOf(String number, String base) {
         int radix = Integer.parseInt(base);
         int n = Integer.parseInt(number, radix);
         return new ArbitraryBaseNumber(n, radix);
    }

    public String toString(int radix) {
         return Integer.toString(number, radix);
    }

    @Override
    public String toString() {
        return toString(base);
    }

    public int toInteger() {
         return number;
    }

    public getBase() {
        return base;
    }

}
</code></pre>

<p>I think that arbitrary is more descriptive than random.  Usually when something is random in computer science, it is created by a random number generator.  But you're not doing that here.  Random may be correct English, but it makes for confusing code here.  Arbitrary does not cause that same confusion.  </p>

<p>Now, code like </p>

<blockquote>
<pre><code>        String number1 = args[1];
        int baseOfNumber1 = Integer.parseInt(args[2]);
        String number2 = args[3];
        int baseOfNumber2 = Integer.parseInt(args[4]);
</code></pre>
</blockquote>

<p>Can be written </p>

<pre><code>        ArbitraryBaseNumber operand1 = ArbitraryBaseNumber.valueOf(args[1], args[2]);
        ArbitraryBaseNumber operand2 = ArbitraryBaseNumber.valueOf(args[3], args[4]);
</code></pre>

<p>And code like </p>

<blockquote>
<pre><code>        int number1Dec = randomBaseToDecimal(number1, baseOfNumber1);
        int number2Dec = randomBaseToDecimal(number2, baseOfNumber2);
</code></pre>
</blockquote>

<p>could just be </p>

<pre><code>        int number1Dec = operand1.toInteger();
        int number2Dec = operand2.toInteger();
</code></pre>

<p>Although I would actually approach this differently.  </p>

<p>I think that it's a bit odd to call Java integers <code>Dec</code>.  They are actually stored in binary.  They are often converted to strings as decimal numbers, but they aren't stored that way.  </p>

<h3>Delegation</h3>

<p>When you have something like </p>

<blockquote>
<pre><code>      // calculate and print out
        int solutionDec = 0;
        if (operator.equals("+")) {
            solutionDec = number1Dec + number2Dec;
        } else if (operator.equals("-")) {
            solutionDec = number1Dec - number2Dec;
        } else if (operator.equals("x")) {
            solutionDec = number1Dec * number2Dec;
        } else if (operator.equals("/")) {
            solutionDec = number1Dec / number2Dec;
        }
</code></pre>
</blockquote>

<p>Consider writing a method.  </p>

<pre><code>    public int calculate(char operator, int a, int b) {
        switch (operator) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
            case 'x':
                return a * b;
            case '/':
                return a / b;
            default:
                throw new IllegalArgumentException("Unrecognized operator:  [" + operator + "]");
        }
    }
</code></pre>

<p>As <a href="https://codereview.stackexchange.com/a/210318/71574">previously suggested</a>, we can use a <code>switch</code> with a default behavior of throwing an exception.  This can save a lot of <code>operator.equals</code> calls.  </p>

<p>I added <code>'*'</code> accidentally but then kept it as more intuitive.  This way, it will accept either <code>*</code> or <code>x</code>.  </p>

<p>By using <code>return</code>, we can exit from both the <code>switch</code> and the method.  This saves us also having to write <code>break;</code> each time.  </p>

<p>Adding <code>[]</code> to the exception message makes it easier to tell where the operator begins and ends.  Sometimes that gets lost.  For example, if someone enters a period where the operator should be.  </p>

<p>I changed from a <code>String</code> operator to a character operator.  You would use it like </p>

<pre><code>    public int calculate(String operator, ArbitraryBaseNumber operand1, ArbitraryBaseNumber operand2) {
        return calculate(operator.charAt(0), operand1.toInteger, operand2.toInteger);
    }
</code></pre>

<p>which you would call like </p>

<pre><code>        int solution = calculate(operator, operand1, operand2);
</code></pre>

<p>In the background, I would expect this to make the evaluation more efficient, since all your operators are single characters.  </p>

<h3>Putting it together</h3>

<pre><code>        ArbitraryBaseNumber operand1 = ArbitraryBaseNumber.valueOf(args[1], args[2]);
        ArbitraryBaseNumber operand2 = ArbitraryBaseNumber.valueOf(args[3], args[4]);

        int solution = calculate(args[0], operand1, operand2);

        String result;
        if (args.length == 6) {
            result = Integer.toString(solution, Integer.parseInt(args[5]));
        } else {
            result = Integer.toString(solution);
        }

        System.out.println(result);
</code></pre>

<p>That's the entire body of the <code>main</code> method except for the part that displays your help message.  </p>

<p>I moved the parsing of the operator and the base of the solution later in the method.  The operator isn't a big deal either way.  The problem with the base of the solution is that you created parallel logic.  You checked <code>args.length == 6</code> in two places.  This merges that into one check, which is generally more reliable.  If you do have to separate the logic, consider something like </p>

<pre><code>        Integer solutionBase = null;
        if (args.length == 6) {
            solutionBase = Integer.parseInt(args[5]);
        }
</code></pre>

<p>and then later </p>

<pre><code>        String result = (solutionBase == null) ? Integer.toString(solution)
                                               : Integer.toString(solution, solutionBase);
</code></pre>

<p>That tends to be more robust in regards to future changes (e.g. adding another argument or allowing an arbitrary number of operators and operands).  </p>

<p>Or in this case, you might do </p>

<pre><code>        int solutionBase = 10;
        if (args.length == 6) {
            solutionBase = Integer.parseInt(args[5]);
        }
</code></pre>

<p>And then at the end </p>

<pre><code>        System.out.println(Integer.toString(solution, solutionBase));
</code></pre>

<p>Now we have the same logic at the end regardless of the number of arguments.  </p>

<h3>Reinventing the wheel</h3>

<p>It is of course possible that you wanted to write your own versions of <code>parseInt</code> and <code>toString</code>.  You can certainly do that (using the <a href="/questions/tagged/reinventing-the-wheel" class="post-tag" title="show questions tagged 'reinventing-the-wheel'" rel="tag">reinventing-the-wheel</a> tag would tell us that's what you're doing).  But I would still suggest making them match the original versions' method signatures unless you have a strong reason to change them.  Then you could just replace the standard versions with your versions in this code.  </p>
    </div>