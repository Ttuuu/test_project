<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to what @dfhwze has said, I wanted to give some suggestions on general ruby best practice and readibility:</p>

<h2>Multiline Blocks</h2>

<p>In <code>PriceCalculator#start_billing</code>, <code>PriceCalculator#count_items</code> and in a couple other methods you use muliline blocks like so:</p>

<pre><code>foobar.each { |*args|
  # do stuff
  # more stuff
}
</code></pre>

<p>The use of <code>{}</code> is really only intended for single line blocks -- when you have more than one line inside of the block, it's best to use <code>do ... end</code>. This will make your code a bit easier to read. From my example:</p>

<pre><code>foobar.each do |*args|
  # do stuff
  # more stuff
end
</code></pre>

<h2>Method Definitions</h2>

<p>In ruby, while it's valid syntax to define methods like <code>def some_method argument</code>, it's really easy to misread that as <code>def some_method_argument</code>, and so it's considered better practice to put parentheses around your method definitions, like so: <code>def some_method(argument)</code>.</p>

<h2>Other</h2>

<p>I just wanted to take a look at this method:</p>

<pre><code>def calculate_bill quantity
  price = {}
  quantity.each { |item,value| 
    if SaleItems.all[item].nil? 
      price[item] = quantity[item]*Items.all[item]
    else   
      price[item] = (((quantity[item]/SaleItems.all[item]['units']).floor)*SaleItems.all[item]['price']) + ((quantity[item]%SaleItems.all[item]['units'])*Items.all[item])
    end 
    }
    price
end
</code></pre>

<p>Specifically, in the if statement, you could take advantage of a common ruby idiom for generating hashes, and instead of generating a <code>price</code> hash just return the hash you want:</p>

<pre><code>def calculate_bill quantity
  quantity.map { |item,value| [item, SalesItems.all[item].nil? ? quantity[item]*Items.all[item] : (((quantity[item]/SaleItems.all[item]['units']).floor)*SaleItems.all[item]['price']) + ((quantity[item]%SaleItems.all[item]['units'])*Items.all[item])] }.to_h
end
</code></pre>

<p>(note how I used the <code>{}</code> for a one line block). If you wanted to expand this to make it a bit more readable:</p>

<pre><code>def calculate_bill quantity
  quantity.map do |item,value|
    v = if SalesItems.all[item].nil?
      quantity[item]*Items.all[item]
    else
      (((quantity[item]/SaleItems.all[item]['units']).floor)*SaleItems.all[item]['price']) + ((quantity[item]%SaleItems.all[item]['units'])*Items.all[item])
    end
    [item, v]
  end.to_h
end
</code></pre>

<p>I'd also recommend breaking up that massive formula into some smaller pieces with better variable names to make it easier to tweak it later if you need to.</p>
    </div>