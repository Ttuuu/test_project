<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First things first - I assume you used the macro recorder to create this. Maybe you recorded one thing and then wrote the rest based on that. I want to congratulate you on trying this out! It's pretty much how we all start. I also want to welcome you to code review and give you more congrats on wanting to get better at this! But, you came here and want advice, so I'm going to write it. I hope it doesn't come off as condescending or mean, and if it does - I apologize, that's not my intent.</p>

<h3>Variables</h3>

<p>You haven't defined any of your variables -</p>

<p><a href="https://i.stack.imgur.com/gkZSp.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/gkZSp.png" alt="enter image description here"></a>
<sub>code inspection courtesy of <a href="https://github.com/rubberduck-vba/Rubberduck/" rel="nofollow noreferrer">VBA Rubberduck</a> - a VBE add-in maintained by the code review community</sub></p>

<p>It's great that you're using variables, but you need to define them and give them a type!</p>

<p>When you don't define your variable, VBA will declare it as a <em>Variant</em> type that can hold any type of data. While this may be more flexible, it adds processing time to your macro as VBA decides or tests for the type. Additionally, since a Variant can be any type of data, you may miss out on valuable troubleshooting information on <em>Type Mismatch</em></p>

<p>So if <code>FECHA</code> is a text value, you need</p>

<pre><code>Dim fecha As String
</code></pre>

<p>If it's a date or time, <a href="https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/data-types/" rel="nofollow noreferrer">pick the right type</a>. One thing to remember is <a href="http://stackoverflow.com/questions/26409117/why-use-integer-instead-of-long/26409520#26409520">integers are obsolete</a>. According to <a href="https://msdn.microsoft.com/en-us/library/office/aa164506(v=office.10).aspx" rel="nofollow noreferrer">msdn</a> VBA <em>silently</em> converts all integers to <code>long</code>.</p>

<p>One way to ensure you've declared all your variables is using <code>Option Explicit</code>. Always turn on <code>Option Explicit</code>. You can have it automatically by going to Tools -&gt; Options in the VBE and checking the <strong>Require Variable Declaration</strong> option. This way if you have any variables not defined, the compiler will let you know.</p>

<p>That being said, I don't know my (Spanish?) too well - obviously <code>FECHA</code> is probably date and <code>RESPONSABLE</code> might be a person or department. But then, what's <code>CRESPONSABLE</code>? How is it different than <code>RESPONSABLE</code>? Always give your variables <em>meaningful names</em> - and use entire words. I'll make the assumption that maybe this is an employee that does a task and the other is that employee's supervisor. Maybe better names for your variables would be -</p>

<pre><code>Dim responsibleParty As String
Dim responsiblePartySupervisor As String
</code></pre>

<p>Then when you're assigning these variables values in the code, you (and I) will know what type of data that should be as well as what type of <em>information</em> is held in that variables. "Oh that's Joe and Steve from Shipping."</p>

<p>You also have all your variables in <code>ALLCAPS</code> - <a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a> have <code>camelCase</code> for local variables and <code>PascalCase</code> for other variables and names. Your <code>ALLCAPS</code> come off as <strong>constants</strong> to me.</p>

<h3>Speed</h3>

<p>This is slow you say? Well, even if you didn't, I would know it is because of your usage of <code>.Select</code>. Be sure to avoid things like <code>.Select</code> - it just slows the code down by needing to fiddle with the spreadsheet while doing everything else behind the scenes. There's a good question on StackOverflow <a href="http://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba-macros">addressing this</a>.</p>

<p>Essentially there's no reason to write a macro that uses sheet commands like <code>select</code> and <code>offset</code>. For instance this little block here -</p>

<blockquote>
<pre><code>Range("B5").Select
FECHA = ActiveCell.Value
ActiveCell.Offset(1, 0).Select
NROREMITO = ActiveCell.Value
ActiveCell.Offset(1, 0).Select
CTIPOREMITO = ActiveCell.Value
ActiveCell.Offset(0, 1).Select
TIPOREMITO = ActiveCell.Value
ActiveCell.Offset(1, -1).Select
CPROVEEDOR = ActiveCell.Value
ActiveCell.Offset(0, 1).Select
PROVEEDOR = ActiveCell.Value
ActiveCell.Offset(1, -1).Select
CRESPONSABLE = ActiveCell.Value
ActiveCell.Offset(0, 1).Select
RESPONSABLE = ActiveCell.Value
ActiveCell.Offset(34, -1).Select
OBSERVACIONES = ActiveCell.Value
ActiveCell.Offset(-2, 3).Select
TOTART = ActiveCell.Value
ActiveCell.Offset(0, 6).Select
CMVTOT = ActiveCell.Value
ActiveCell.Offset(-30, 11).Select
ITEMTOT = ActiveCell.Value
</code></pre>
</blockquote>

<p>could be rewritten</p>

<pre><code>Dim startColumn As Long
startColumn = 2
Dim startRow As Long
startRow = 5
With Sheet1
    FECHA = .Cells(startRow, startColumn).Value
    NROREMITO = .Cells(startRow + 1, startColumn).Value
    CTIPOREMITO = .Cells(startRow + 2, startColumn).Value
    TIPOREMITO = .Cells(startRow + 2, startColumn + 1).Value
    CPROVEEDOR = .Cells(startRow + 3, startColumn).Value
    PROVEEDOR = .Cells(startRow + 3, startColumn + 1).Value
    CRESPONSABLE = .Cells(startRow + 4, startColumn).Value
    RESPONSABLE = .Cells(startRow + 4, startColumn + 1).Value
    OBSERVACIONES = .Cells(startRow + 38, startColumn).Value
    TOTART = .Cells(startRow + 36, startColumn + 3).Value
    CMVTOT = .Cells(startRow + 36, startColumn + 9).Value
    ITEMTOT = .Cells(startRow + 6, startColumn + 2).Value
End With
</code></pre>

<p>Right, but that's not very clear. If my calculations are correct (which they may not be) you want cells <code>B5:B9, C7:C9, D11, B43, E41, K41</code>. Which you could put in there instead of all that <code>row+i, column+j</code>. </p>

<p>But more likely, you'd benefit from an <em>array</em>. Something like</p>

<pre><code>Dim data As Variant
ReDim data(1 To 12)
Dim dataRange As Range
Set dataRange = Union(Sheet1.Range("B5:B9"), Sheet1.Range("C7:c9"), Sheet1.Range("D11"), Sheet1.Range("B43"), Sheet1.Range("E41"), Sheet1.Range("K41"))
Dim dataCell As Range
Dim index As Long
index = 1
For Each dataCell In dataRange
    data(index) = dataCell.Value
    index = index + 1
Next
</code></pre>

<p>This isn't the best way to do it, but I'm kind of going through this process in full to make it more clear, I would skip all the intermediate steps, personally, but that might be too much to bite off at once.</p>

<h3>Formulas</h3>

<p>I see you're writing formulas. Those are okay if you <em>need</em> formulas at the end, but if you don't need the formulas, just write the values.</p>

<p>But let's talk about formulas - some formulas are <strong>*volatile</strong> - which is to say they are <em>not</em> stable. They recalculate everytime something on the sheet changes. Something like <code>=Rand()</code> will recalculate everytime <em>anything</em> changes. That's slow, isn't it? <code>RAND</code> is <em>very</em> volatile - but others are volatile too - especially <code>OFFSET</code> <em>and</em> <code>INDIRECT</code>. These formulas slow worksheets down like crazy! Avoid them, always, if possible.</p>

<p>If you cannot avoid them (which I bet you can), then you need to make it so they aren't always recalculated, especially not during your macro. Do this by sandwiching your macro with</p>

<pre><code>Application.Calculate = xlManual
'code
Application.Calculate = xlAutomatic
</code></pre>

<p>Now <em>nothing</em> will recalculate while you're running your code.</p>

<h3>Misc</h3>

<p>Worksheets have a <code>CodeName</code> property - View Properties window (<kbd>F4</kbd>) and the <code>(Name)</code> field (the one at the top) can be used as the worksheet name. This way you can avoid <code>Sheets("CONCAT")</code> and instead just use <code>concatSheet</code>.</p>

<p>Instead of hard-coding ranges (like I did), if they are static, assign them a <em>named range</em> property. e.g. instead of <code>Sheets("mySheet").Range("A1:A10")</code> you can have <code>mysheet.Range("MyNamedRange")</code>.</p>

<blockquote>
<pre><code> While ActiveCell.Value &lt;&gt; ""
</code></pre>
</blockquote>

<p>Instead of <code>""</code> use the built-in constant <code>vbNullString</code>.</p>

<p>Speaking of this -</p>

<blockquote>
<pre><code>While ActiveCell.Value &lt;&gt; ""
   ActiveCell.Offset(1, 0).Select
Wend
</code></pre>
</blockquote>

<p>You can find the last row like this </p>

<pre><code>Dim lastRow As Long
lastRow = concatSheet.Cells(concatSheet.Rows.Count, 1).End(xlUp).Row
</code></pre>

<p>There is a <a href="http://stackoverflow.com/a/11169920/1161309">standard</a> way to find lastRow and lastColumn. That post explains why.</p>

<p>Always be explicit in your references - don't take what sheet or book you're in for granted
<a href="https://i.stack.imgur.com/Lb2sg.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Lb2sg.png" alt="enter image description here"></a></p>

<p>Lastly, this syntactic sugar -</p>

<blockquote>
<pre><code>[B6] = Val([B6]) + 1
</code></pre>
</blockquote>

<p>Is, in general, bad practice. Be explicit!</p>
    </div>