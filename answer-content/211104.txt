<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I would have expected an empty line between your includes and the declaration of <code>Node</code>.</p></li>
<li><p>You seem inordinately fond of having extra-whitespace at the end of lines. Loose it, both in the code and in the output, as it at best irritates co-workers and diff.</p></li>
<li><p>Consider using smartpointers, specifically <code>std::unique_ptr</code> for the link- and root-pointer. That way, you won't leak your tree. Admittedly, not freeing might be an intentional optimisation for faster shutdown, but that seems unlikely.<br>
<a href="https://www.youtube.com/watch?v=JfmTagWcqoE&amp;t=15m57s" rel="nofollow noreferrer">Yes, you have as much recursion as in <code>inorder()</code>, using an explicit stack could avoid that. Or much more iteration. Or having back-pointers. Or a custom area-allocator.</a></p></li>
<li><p>As a matter of course, I would always put the links first in any kind of node-class.</p></li>
<li><p><code>newNode</code> is very expansively written, and if the value_type isn't trivially constructible, might not be optimisable by the compiler from initialisation+assignment for all members to just initialisation. Why ask it to?</p>

<pre><code>Node* newNode(int value) {
    return new Node{value};
    // Or if you move the links: `new Node{nullptr, nullptr, value}`
    // With C++20: `new Node{.data = value}`
}
</code></pre>

<p>That can easily be used for non-copyable, non-movable, and even only in-place-constructible types.</p></li>
<li><p>Prefer <code>nullptr</code> for nullpointer-constants, if you actually need one. That is more type-safe, and sometimes enables additional optimisations.</p></li>
<li><p>Try to take advantage of references to simplify calling your functions.</p></li>
<li><p><code>insert()</code> drops any duplicate values. Is that intentional? If so, that needs to be called out in a comment, or made more obvious from the code-structure!</p></li>
<li><p><code>insert()</code> has no need to recurse:</p>

<pre><code>void insert(Node* &amp;root, int value) {
    auto p = &amp;root;
    while (*p &amp;&amp; p[0]-&gt;data != value)
        p = p[0]-&gt;data &gt; value ? &amp;p[0]-&gt;left : &amp;p[0]-&gt;right;
    if (!*p)
        *p = newNode(value);
}
</code></pre></li>
<li><p><code>inorder()</code> only needs to know the root-node, not where the pointer to it is saved. Also, it never modifies anything. Thus, it should accept <code>Node const*</code> or <code>Node const&amp;</code>.</p></li>
<li><p><code>inorder()</code> cannot throw by design, so mark it <code>noexcept</code>.</p></li>
<li><p>Try to minimize the level of indentation. Guards at the start of a function are quite idiomatic.</p></li>
<li><p>What does <code>inorder()</code> do in order? Ah, printing. So, why not call it <code>print_inorder()</code>?</p>

<pre><code>void print_inorder(const Node *root) noexcept {
    if (!root)
        return;
    print_inorder(root-&gt;left);
    printf("%d\n", root-&gt;data);
    print_inorder(root-&gt;right);
}
</code></pre></li>
<li><p>Some would suggest favoring iostreams over stdio for added type-safety, but there are downsides for that too.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>.</p></li>
<li><p>Naturally, for any further use you would want to wrap your data-structure in its own class-template with members for observing, modifying, iterating, and ctors / dtor for enforcing the invariants and manage the resources. But ensuring full re-usability is probably far out-of-scope at the moment.</p></li>
</ol>
    </div>