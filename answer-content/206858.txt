<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree that the object-oriented design could be improved.  I'll provide an alternative design, and discuss the reasons for the changes below.</p>

<h3>Restaurant.java</h3>

<p>Your <code>Main</code> class, and particularly your <code>main()</code> function, has a lot of code.  I'd prefer to see an elegant skeleton, with most of the logic delegated to other classes:</p>

<pre><code>import java.util.Scanner;

public class Restaurant {
    public static void main(String[] args) {
        try (Scanner in = new Scanner(System.in)) {
            Menu menu = Menu.parse(in);
            System.out.println(menu);

            while (in.hasNextLine()) {
                String line = in.nextLine();
                try {
                    Order order = Order.parse(menu, line);
                    System.out.println(order);
                } catch (IllegalArgumentException badOrder) {
                    System.out.println("Invalid order input: " + line);
                }
            }
        }
    }
}
</code></pre>

<p>What the code above does is build a <code>Menu</code>, then take orders.  (And once we've built the menu, why shouldn't we be able to take orders from <em>multiple</em> customers, one per line?)</p>

<p>Note that I've introduced a <strong><code>Menu</code> class and an <code>Order</code> class — objects that I think are missing</strong> in your object-oriented modeling.  (Your <code>.printOrders()</code> prints while it parses — too much work for one function.)  Also observe that each class knows how to <strong>parse itself, and supports a human-friendly <code>.toString()</code> representation</strong> — a pattern that I shall repeat with each item on the menu.  (In this respect, your <code>printOrders()</code> was <strong>inconsistent: it calls <code>System.out.println(tempFood)</code>, but <code>tempCombo.internalPrint()</code></strong>.)</p>

<h3>Menu.java</h3>

<p>You store the menu using six separate lists and maps: <code>burgers</code>, <code>snacks</code>, <code>drinks</code>, <code>foods</code>, <code>combos</code>, and <code>comboSeq</code>, mostly to facilitate the output ordering implemented in <code>printSequence()</code>.  <strong>Having so many data structures and classes leads to duplicated code</strong>, both in parsing (<code>if (type.equals(…)) …</code> etc.) and in printing (<code>for (Burger tempBurger: burgers) …</code> etc.).</p>

<p>It would be better to <strong>store all of the data in one list, and treat the sorting problem as a sorting problem</strong>.  I've used an enum to help with the sorting: the declaration order of the <code>ItemType</code> enums is used by the <code>Comparator</code> in <code>.toString()</code>.</p>

<p>Storing all of the menu items in the same list would, of course, require the single items and the combos to have a common type.  I don't recommend making <code>Combo</code> a subclass of <code>Food</code>, especially since combos lack a name and a pre-determined price, and are constructed quite differently.  Rather, they should each inherit from a common interface or abstract class (<code>Item</code>).</p>

<p>Error messages should probably be printed to <code>System.err</code> rather than <code>System.out</code>.</p>

<pre><code>import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.function.BiFunction;
import java.util.stream.Collectors;

public class Menu {
    public enum ItemType {
        Burger(SingleItem::parse),
        Snack(SingleItem::parse),
        Drink(SingleItem::parse),
        Combo(ComboItem::parse);

        private final BiFunction&lt;Menu, String, Item&gt; parser;

        ItemType(BiFunction&lt;Menu, String, Item&gt; parser) {
            this.parser = parser;
        }

        public static ItemType byName(String name) {
            return Enum.valueOf(ItemType.class, name);
        }
    }

    public static abstract class Item {
        private final int itemNumber;
        private ItemType type;

        protected Item(int itemNumber, ItemType type) {
            this.type = type;
            this.itemNumber = itemNumber;
        }

        public int getItemNumber() {
            return this.itemNumber;
        }

        public ItemType getItemType() {
            return this.type;
        }

        public abstract int getPrice();
    }

    private List&lt;Item&gt; items = new ArrayList&lt;&gt;();

    private Menu() {}

    public static Menu parse(Scanner in) {
        for (Menu menu = new Menu(); ; ) {
            switch (in.next()) {
              case "add":
                String typeName = in.next();
                ItemType type = ItemType.byName(typeName);
                try {
                    Item item = type.parser.apply(menu, typeName + in.nextLine());
                    menu.items.add(item);
                } catch (IllegalArgumentException badCombo) {
                    System.err.println("Error: " + badCombo.getMessage());
                }
                break;
              case "end":
                in.nextLine();      // Consume the newline after "end"
                return menu;
              default:
                System.err.println("Error: unknown command");
            }
        }
    }

    public int getItemCount() {
        return this.items.size();
    }

    public Item getItem(int i) throws IllegalArgumentException {
        try {
            return this.items.get(i);
        } catch (IndexOutOfBoundsException e) {
            throw new IllegalArgumentException();
        }
    }

    public String toString() {
        List&lt;Item&gt; items = new ArrayList&lt;&gt;(this.items);
        items.sort(Comparator.comparing(Item::getItemType));
        return items.stream()
                    .map(Item::toString)
                    .collect(Collectors.joining(System.lineSeparator()));
    }
}
</code></pre>

<h3>SingleItem.java</h3>

<p>Your <code>Burger</code>, <code>Drink</code>, and <code>Snack</code> classes are nearly identical.  One class for all of them suffices.</p>

<pre><code>import java.util.Scanner;

public class SingleItem extends Menu.Item {
    public static Menu.Item parse(Menu menu, String line) {
        Scanner s = new Scanner(line);
        return new SingleItem(menu.getItemCount(), Menu.ItemType.byName(s.next()), s.next(), s.nextInt());
    }

    private final String name;
    private final int price;

    public SingleItem(int itemNumber, Menu.ItemType type, String name, int price) {
        super(itemNumber, type);
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return this.name;
    }

    @Override
    public int getPrice() {
        return this.price;
    }

    public String toString() {
        return String.format(
            "#%d %s: %s (%d)", this.getItemNumber(), this.getItemType(), this.getName(), this.getPrice()
        );
    }
}
</code></pre>

<h3>ComboItem.java</h3>

<p>As mentioned above, combos need to have a base class in common with <code>Food</code>.  Otherwise, you can't reuse code to handle both, even if you have similarly named methods (such as <code>Food.getOrderNum()</code> and <code>Combo.getOrderNum()</code>).</p>

<p>I'll mention here that the parsing code in your <code>main()</code>:</p>

<blockquote>
<pre><code>ArrayList&lt;Food&gt; trf = new ArrayList&lt;&gt;();
trf.add(foods.get(c1));
trf.add(foods.get(c2));
trf.add(foods.get(c3));

Combo tempCombo = new Combo(trf, counter);
</code></pre>
</blockquote>

<p>… would be more succinctly written as <code>Combo combo = new Combo(<a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html#asList%27T...%28" rel="nofollow noreferrer">Arrays.asList(c1, c2, c3)</a>, counter)</code>.  Of course, that means that your <code>Combo(ArrayList&lt;Food&gt;, int)</code> constructor needs to be <code>Combo(List&lt;Food&gt;, int)</code> instead — it's better practice anyway, not to insist on a particular implementation of <code>List</code>.  I also recommend <strong>dropping the meaningless <code>temp…</code> prefixes in variable names throughout your code</strong>.</p>

<p><code>System.out.printf()</code> would be more readable than <code>System.out.println(… + … + … + … + …)</code>.</p>

<pre><code>import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class ComboItem extends Menu.Item {
    public static Menu.Item parse(Menu menu, String line) {
        Scanner s = new Scanner(line = line.replaceFirst("^Combo +", ""));
        try {
            ComboItem combo = new ComboItem(menu.getItemCount());
            // Items must be listed in ascending order
            for (int i = -1, j; s.hasNextInt(); i = j) {
                j = s.nextInt();
                if (j &lt;= i) throw new IllegalArgumentException();
                combo.include(menu, j);
            }
            return combo;
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid combo input: " + line);
        }
    }

    private final List&lt;Menu.Item&gt; subItems = new ArrayList&lt;&gt;();

    public ComboItem(int itemNumber) {
        super(itemNumber, Menu.ItemType.Combo);
    }

    public void include(Menu menu, int itemNumber) throws IllegalArgumentException {
        this.subItems.add(menu.getItem(itemNumber));
    }

    @Override
    public int getPrice() {
        return -50 + this.subItems.stream().mapToInt(Menu.Item::getPrice).sum();
    }

    public String toString() {
        return String.format(
            "#%d %s: (%d)%n", this.getItemNumber(), this.getItemType(), this.getPrice()
        ) +
        this.subItems.stream()
            .map(item -&gt; "    " + item.toString())
            .collect(Collectors.joining(System.lineSeparator()));
    }
}
</code></pre>

<h3>Order.java</h3>

<p>This class is pretty straightforward, and follows naturally from the principles stated above.</p>

<pre><code>import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Order {
    public static Order parse(Menu menu, String line) {
        Order order = new Order();
        for (Scanner in = new Scanner(line); in.hasNextInt(); ) {
            order.add(menu.getItem(in.nextInt()));
        }
        return order;
    }

    private List&lt;Menu.Item&gt; items = new ArrayList&lt;&gt;();

    public void add(Menu.Item item) {
        this.items.add(item);
    }

    public int getPrice() {
        return this.items.stream().mapToInt(Menu.Item::getPrice).sum();
    }

    public String toString() {
        return String.format(
            "--- Order ---%n%s%nTotal: %d",
            this.items.stream.map(item).collect(Collectors.joining(System.lineSeparator())),
            this.getPrice()
        );
    }
}
</code></pre>
    </div>