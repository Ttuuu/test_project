<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>As per Java naming convention, user-defined types should be capitalized.  In this case, <code>diceGame</code> should be <code>DiceGame</code>.</p></li>
<li><p>Prefer to have variables defined in the lowest scope possible.  This is especially useful in not having to worry about whether or not a variable is still in use.</p>

<p>Since <code>dice1</code> and <code>dice2</code> are only used within the loop, you can just initialize them in there:</p>

<pre><code>// these can be removed
int dice1;
int dice2;

// ...

int dice1 = 1 + (int) ((Math.random() * (6 - 1)) + 1);
int dice2 = 1 + (int) ((Math.random() * (6 - 1)) + 1);
</code></pre></li>
<li><p>These:</p>

<pre><code>theSum = theSum + diceSum;
totalSum = totalSum + theSum;
</code></pre>

<p>can be rewritten as this:</p>

<pre><code>theSum += diceSum;
totalSum += theSum;
</code></pre>

<p>This works in similar cases when you're accumulating a total with an arithmetic operator.</p></li>
<li><p><code>theSum</code> is not a descriptive name.  The sum of what?  Based on the code alone, it's hard to tell exactly what it's used for, especially when you have <code>diceSum</code>, <code>finalSum</code>, and <code>totalSum</code>.</p></li>
<li><p>I agree with @200_success' suggestion about creating a <code>Die</code> class.  With that, you can create any number of <code>Die</code> objects instead of <code>int</code> variables.  You can even have  a data structure, such as an array, that holds these objects.  You could have one array of <code>Die</code> objects instead of having to define multiple ones, especially if you end up needing as many as, say, 100 dice.</p></li>
</ul>
    </div>