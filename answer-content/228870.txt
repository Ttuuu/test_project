<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not looking bad for as far as I can see. If the example file is accurate for the lengths of the input files, then I don't forsee any real problems, though others may of course disagree.</p>

<p>Naming:</p>

<p><code>cmdline</code> is quite a... short name for a function. I'd think cmd_line for snake_case convention. However, what it does is create what's basically a text file in a bytes buffer by means of running a program. While you could call that a command line execution if you're working from a terminal, I'd name it after the invoked program, or something more generic like <code>get_input_data</code>. Since generic is always survivable at best, I'd pick something like <code>get_needle_results</code> or something like that.</p>

<p>For a module like subprocess which you can guess does creative things dependent on what platform you're on, it's always advisable to grab the docs:</p>

<blockquote>
  <p><em>args</em> should be a sequence of program arguments or else a single string. By default, the program to execute is the first item in <em>args</em> if <em>args</em> is a sequence. If <em>args</em> is a string, the interpretation is platform-dependent and described below. See the <em>shell</em> and <em>executable</em> arguments for additional differences from the default behavior. Unless otherwise stated, it is recommended to pass args as a sequence.</p>
</blockquote>

<p>And your platform matters - a lot. If you never switch platform or <code>needle</code> implementation, then you can do what you're doing, but if not you're risking a collossal headache with potentially giving it wrong arguments. Therefore, you might want to restructure it to a list of arguments.</p>

<p>And if you don't, use f-strings, the best invention since the list comprehension:</p>

<pre class="lang-py prettyprint-override"><code>cmd = 'needle -datafile EBLOSUM62 -auto Y' + ' -asequence ' + file1 +' -bsequence ' + file2 +  ' -sprotein1 Y -sprotein2 Y ' + ' -auto -stdout'
# Becomes:
cmd = f'needle -datafile EBLOSUM62 -auto Y -asequence {file1} -bsequence {file2} -sprotein1 Y -sprotein2 Y  -auto -stdout'
</code></pre>

<p>Which is shorter and more readable. </p>

<pre class="lang-py prettyprint-override"><code>        results = cmdline(cmd)

        results = results.decode("utf-8")
</code></pre>

<p>These can be combined:</p>

<pre class="lang-py prettyprint-override"><code>        results = cmdline(cmd).decode("utf-8")
</code></pre>

<p>So can these:</p>

<pre class="lang-py prettyprint-override"><code>        identity = re.search(r"\d{1,3}\.\d*\%", results)
        identity = identity.group()
        identity = identity.replace('%', '')
# New:
        identity = re.search(r"\d{1,3}\.\d*\%", results).group().replace('%', '')
</code></pre>

<pre class="lang-py prettyprint-override"><code>if blast_two_sequences(file1, file2) is not None:
    identity, result = blast_two_sequences(file1, file2)
</code></pre>

<p>And ouch... you're actually running your entire program twice. If your needle executions are counted, you might have noticed this. You should refactor this to:</p>

<pre class="lang-py prettyprint-override"><code>output = blast_two_sequences(file1, file2)
if output is not None:
    identity, result = output 
# Or if you work with Python 3.8+
if output := blast_two_sequences(file1, file2) is not None:
    identity, result = output 
</code></pre>

<p>You should also put a guard around the actual execution, so that a later scripter can import your functions and use them without executing your script on import:</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    file1 = "/Users/catuf/Desktop/file1.txt"
    file2 = "/Users/catuf/Desktop/file2.txt"
    if output := blast_two_sequences(file1, file2) is not None:
        identity, result = output 
</code></pre>

<p>Exceptions:</p>

<p>There's a small issue you have - you have a bare <code>except</code> in your code. That means that if weird stuff happens, your program will just ignore it and return none. In your case, I would recommend removing the <code>try:</code> statement completely, and you'll be informed about any problems that arise. If you're watching out for specific Exceptions, narrow your <code>except:</code> to those, and preferably restrict your try/except to directly around the origin lines of these Exceptions. </p>

<p>This will obsolete your <code>None</code> check on the outside. Exceptions showing up on your screen is a good thing - it means you'll be notified when the unexpected happens and you have some unknown error - because now you can go fix it.</p>
    </div>