<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You should make this a function.</li>
<li>You should use 4 spaces for indentation.</li>
<li>If <code>s</code> becomes a count of numbers in a dictionary, then <code>in</code> becomes performs in <span class="math-container">\$O(1)\$</span> time, where lists perform in <span class="math-container">\$O(n)\$</span> time.</li>
<li>Using <code>quit</code> isn't really idiomatic, and was added to make exiting the REPL easier.</li>
<li>Rather than <code>for j in range(0, len(s))</code> you can use <code>for item in s</code>.</li>
<li>Use better variable names, <code>s</code> and <code>j</code> are just meh.</li>
<li>You can use a comprehension, with <code>any</code> to reduce noise.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>import collections


def has_two_sum(items, target):
    items = collections.Counter(map(int, items))
    for item in map(int, items):
        remainder = target - item
        if items.get(remainder, 0) &gt;= (2 if item == remainder else 1):
            return True
    return False


if has_two_sum(s, target):
    print('yes')
else:
    print('no')
</code></pre>

<p>Or you can write it in on of these one liners, which look like garbage:</p>

<pre class="lang-py prettyprint-override"><code>s=collections.Counter(map(int,s));print(['no','yes'][any(map(lambda i:s.get(t-i,0)&gt;=1+(i==t-i),s))])
f=set();print(['no','yes'][any(map(lambda i:(t-i in f,f.add(i))[0],s))])
</code></pre>
    </div>