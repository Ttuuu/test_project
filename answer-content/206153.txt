<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, cut your work load in half.  You only need to consider pairs where <code>i &lt; j</code>, so:</p>

<pre><code>for i in range(M-1):
    for j in range(i+1, M):
        # ...
</code></pre>

<p>If you actually need both <code>(i, j)</code> and <code>(j, i)</code>, then you only need the 50 million closest pairs, and can duplicate &amp; swap every pair in the list as the last step.   More savings!</p>

<p>Record &amp; sort the first 100 million (50 million?) pairs.  Then, as new pairs are generated, if closer than the worst stored pair, use <code>bisect.bisect()</code> to find insertion spot, add the new pair, and kick out the worst pair.   </p>

<p>Time: <span class="math-container">\$O(n^2 log k)\$</span>, 
Space: <span class="math-container">\$O(k)\$</span>, n is number of points, k is desired number of pairs. </p>
    </div>