<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would begin with more descriptive variable names.  Something like <code>formattedString</code> and <code>splitComponents</code> would work in this case. The <code>postDec</code> or <code>splitComponents</code> variable is never mutated so that can be declared as a let.</p>

<pre><code>extension String {
    var usdFormatted: String {
        var formattedString = self
        let splitComponents = self.components(separatedBy: ".")
    }
}
</code></pre>

<p>Next I would want to address a couple issues with the extension.  The first glaring issue is that if you call this on a value that isn't numeric or separated by a period, it will crash. For this, I would recommend a <code>guard</code> statement before we begin doing any processing.  This will provide a quick exit when a value is found that we don't want to use.</p>

<pre><code>extension String {
    var usdFormatted: String {
        var formattedString = self
        guard let currency = Double(self) else {
            return formattedString
        }

        let splitComponents = self.components(separatedBy: ".")
    }
}
</code></pre>

<p>Now that we have addressed cases like <code>ABC</code> and <code>14FOO</code>, we can look forward to handling the other logic that you have provided.</p>

<p>This also provides an interesting point where we now have a floating point value to work with.  We can now take a shortcut and work directly with that floating point value.  We can convert it to a string and specify the level of accuracy that we would like from that value.  This can be done using <code>String(format: "%.2f", currency)</code>.  The format string signifies that we are providing a floating point value <code>%f</code>, and by passing in the <code>.2</code> we can specify the precision for the string. </p>

<p>That will leave us with this:</p>

<pre><code>extension String {
    var usdFormatted: String {
        var formattedString = self
        guard let currency = Double(self) else {
            return formattedString
        }

        formattedString =  "$" + String(format: "%.2f", currency)
        return formattedString
    }
}
</code></pre>

<p>A little bit of cleanup can be done since <code>formattedString</code> is unnecessary at this point, so that can be removed and you would end up with this extension:</p>

<pre><code>extension String {
    var usdFormatted: String {          
        guard let currency = Double(self) else {
            return self
        }

        return "$" + String(format: "%.2f", currency)
    }
}
</code></pre>

<p>The only thing to note that would differ from this change is that it would provide rounding. If you did not want rounding to round up for any reason in this, you could accomplish this by adjusting the return statement like this <code>return "$" + String(format: "%.2f", currency.rounded(.down))</code>.</p>
    </div>