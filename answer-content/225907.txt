<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>int n = 0;</code> This initialization is not used.  It could simply be <code>int n;</code>, or could be <code>int n = !(num &amp; 1);</code> inside the loop, to restrict the scope of <code>n</code>.</p>

<hr>

<p>This loop:</p>

<pre><code>int k = 0;
while (num) {
    ...
    k++;
}
</code></pre>

<p>could be written as:</p>

<pre><code>for(int k = 0; num; k++) {
    ...
}
</code></pre>

<hr>

<p>Since you are doing bit manipulation, instead of using addition, you should probably use a “binary or” operation to merge the bit into your accumulator:</p>

<pre><code>    b = b | (n &lt;&lt; k);
</code></pre>

<p>or simply:</p>

<pre><code>    b |= n &lt;&lt; k;
</code></pre>

<hr>

<h2>Bug</h2>

<p>You are not inverting the most significant zero bits.  Assuming an 8-bit word size, the binary compliment of 9 (<code>0b00001001</code>) should be <code>0b11110110</code>, not <code>0b00000110</code>.   And the compliment of that should return to the original number (<code>0b00001001</code>), but instead yields <code>0b00000001</code>.</p>

<hr>

<p>And, as mentioned by @Martin R, you could simply <code>return ~num;</code></p>
    </div>