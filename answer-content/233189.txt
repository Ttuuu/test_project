<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In a high-level language, I would write it as:</p>

<pre class="lang-py prettyprint-override"><code>def put_nibble(buf: array[byte], n: int):
    buf[0] = '0' + ((n shr 3) bitand 1)
    buf[1] = '0' + ((n shr 2) bitand 1)
    buf[2] = '0' + ((n shr 1) bitand 1)
    buf[3] = '0' + ((n shr 0) bitand 1)

def char_to_nibble(ch: byte) -&gt; int:
    if '0' &lt;= ch &lt;= '9': return ch
    ch = ch bitor 0x20  # convert to lowercase
    if 'a' &lt;= ch &lt;= 'z': return ch - 'a' + 10
    error

def byte_to_binary(b: str):
    buf = byte[8]  # reserve memory on the stack
    hi = char_to_nibble(b[0])
    put_nibble(buf, hi)
    lo = char_to_nibble(b[1])
    put_nibble(but + 4, lo)
    sys_write(1, buf, 8)
</code></pre>

<p>This way you avoid comparing each possible digit on its own.</p>

<p>The above code also reduces memory access to the memory on the stack, since it doesn't need any external strings for the bit patterns.</p>

<p>Sure, the <code>put_nibble</code> code looks a bit repetitive, but you can merge all the <code>'0' + â€¦</code> together into a single addition:</p>

<pre><code>add dword [buf], 0x30303030  ; 0x30 == '0'
</code></pre>

<p>You could also compute the buffer for a whole nibble in a register and then write it to memory in a single instruction:</p>

<pre><code>; input: al = the nibble to print
; output: ebx = 4 bytes ASCII buffer containing the 4 binary digits
xor ebx, ebx

rcr al, 1
adc ebx, '0'
rol ebx, 8

rcr al, 1
adc ebx, '0'
rol ebx, 8

rcr al, 1
adc ebx, '0'
rol ebx, 8

rcr al, 1
adc ebx, '0'
rol ebx, 8

mov [buf], ebx
</code></pre>

<p>Once you have translated the above high-level code into assembler, you probably want to optimize the code a bit. Or just use a compiler to do the heavy work for you. Write your code in C or in Go, assemble it into machine code and look at the result. Some keywords for searching:</p>

<ul>
<li>go tool objdump</li>
<li>gcc -S binary.c -O2</li>
</ul>

<p>By the way, you should not place the string literals for the prompt and the bit patterns in a <code>writeable</code> segment since they are not intended to be overwritten by any part of your program.</p>
    </div>