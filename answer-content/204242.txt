<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not knowing anything about RubberDuck, I'm a little frightened by the necessity that the <code>CodeString</code> come from a particular <code>ICodeModule</code>, but that this is not (cannot be?) verified. Obviously if modules are not the only source of <code>CodeString</code>s then this abstraction is probably necessary, but if the calling code is always aware of the module from which the code-string came then I'd be inclined to make this a static method taking both as parameters, so that you can't accidently use a <code>CodeStringPrettifier</code> for one module with a <code>CodeString</code> from another (especially so, since the class and interface have no means of conveying with which module they associate, which means consumers presented with an <code>ICodeStringPrettifier</code> have no real way to 'realise' that they are not interchangeable, not least because the class lacks inline documentation (<code>///</code>); does the interface have inline documentation?).</p>

<p>The method is readable enough if you ask me, but perhaps it would be better to split those loops out into their own methods. That would certainly reduce the number of variables floating around, and all the usual reasons why pulling self-contained logic out into independent methods is good.</p>

<p>I'd rename <code>index</code> to <code>prettifiedPosition</code>, which tallies with <code>originalPosition</code> and is much clearer as to what it represents. Alternatively, I'd be inclined to move the return within the loop, and not have the variable at all, and rather <code>throw</code> if the end of the loop is reached: no (immediately apparent) good can come from reaching the end of the loop, and this saves initialising <code>index</code>.</p>

<p>Replacing the <code>return</code> would break the (I'm guessing unexpected?) behaviour that occurs when there are no non-white-space characters before the caret: the second loop will run to completion, and <code>index</code> will be left as it was initialised. It might then need dedicated handling, but I think either way that it is better to clearly document such edge cases, rather than to leave them to work through non-obvious means (there is no explanation as to why <code>index</code> should be <code>0</code>). Test-cases for this (e.g. caret at start; caret at start after <code>" "</code>) would also be nice, though I guess they wouldn't come under "AutoComplete".</p>
    </div>