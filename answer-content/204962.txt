<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't be overly verbose</h2>

<p>Your prompts are very verbose, and you use a lot of newlines. Keep it simple. If you ask "how many", then people naturally expect to enter a natural number. If you ask for "cost", then people will naturally assume they can enter some value with two digits after the comma.</p>

<p>If you prompt something, replace the newline after the prompt with a space, then the cursor will be after the question.</p>

<p>You also don't need to read a whole line into a buffer, and then use <code>sscanf()</code> on the buffer, you can directly use <code>scanf()</code> to read a value from the standard input. I would just write:</p>

<pre><code>printf("How many shops will be visited? ");
int total_shops;
if (scanf("%d", &amp;total_shops) != 1) {
    fprintf(stderr, "Invalid input!\n");
    return 1;
}
</code></pre>

<p>Also, try to use <code>\n</code> only at one end of format strings, instead of both at the start and the end.</p>

<h2>Don't use the <code>_ptr</code> postfix</h2>

<p>I would avoid using prefixes or postfixes that describe the type of a variable. It is usually not necessary.</p>

<h2>Use structs to organize your data</h2>

<p>You have a number of shops, and each shop has a number of ingredients. Instead of making <code>total_cost_ingredients_ptr</code> a pointer to pointer, it is better to define a struct that represents a shop, and then to create an array out of the shops, like so:</p>

<pre><code>struct shop {
    int num_ingredients;
    float *ingredient_costs;
};

struct shop *shops = calloc(num_shops, sizeof(*shop));

for (int i = 0; i &lt; num_shops; i++) {
     int num_ingredients = ...; /* Read number of ingredients */

     shops[i].num_ingredients = num_ingredients;
     shops[i].ingredient_costs = calloc(num_ingredients, sizeof(*shops[i].ingredient_cost));
     ...
}
</code></pre>

<p>Later on you can then refer to ingredient number <code>j</code> in shop <code>i</code> as: <code>shops[i].ingredient_costs[j]</code>.</p>

<p>Note that I used <code>calloc()</code> here instead of <code>malloc()</code>. It is slightly easier to use the former to allocate arrays, and it will also pre-zero the allocated memory for you.</p>

<h2>Move actions to be done after the last shop data is read to after the loop</h2>

<p>Whenever you see this pattern:</p>

<pre><code>for (int i = 0; i &lt; num; i++) {
    ...
    if (i == num - 1)
        do_something();
}
</code></pre>

<p>Just move that last part out of the loop:</p>

<pre><code>for (int i = 0; i &lt; num; i++) {
    ...
}

do_something();
</code></pre>

<h2>Move long sections of code into functions</h2>

<p>You created <code>read_positive_int()</code> and <code>read_real_positive_float()</code> for relatively trivial code, but you forgot to put the code to read all ingredients for a shop into its own function. You can structure the code like so:</p>

<pre><code>void read_shop_ingredients(struct shop *shop) {
    ...
}

int main() {
    struct shop *shops = ...;
    ...
    for (int i = 0; i &lt; num_shops; i++) {
         read_shop_ingredients(&amp;shops[i]);
    }
}
</code></pre>

<h2>Don't store temporary data longer than necessary</h2>

<p>You are storing the cost of each individual ingredient in <code>const_ingredients</code>, but you are actually only interested in the sum of the ingredients for each store. So don't store the individiual costs, but while reading the costs, add them immediately to the <code>total_costs_ingredients</code>.</p>

<h2>Don't use a 2D array for 1D data</h2>

<p>You basically copy&amp;pasted the code for <code>costs_ingredients</code> to <code>total_costs_ingredients</code>, creating a 2D array where one of the dimensions is just 1 item big. That's not very efficient. Also, if you use the struct approach, it would've been obvious right away.</p>

<p>So with this in mind, the struct can be changed to:</p>

<pre><code>struct shop {
    float total_ingredient_costs;
};
</code></pre>

<p>And a struct with just one element is a bit overkill; you could have gotten away with allocating just a single 1D array in your code:</p>

<pre><code>float *total_ingredient_costs = calloc(num_shops, sizeof(*total_ingredient_costs));
</code></pre>

<h2>Use <code>return</code> instead of <code>exit()</code> if possible</h2>

<p>There is no need to call <code>exit()</code> inside <code>main()</code>, just use <code>return 1</code> to exit with an error code.</p>

<h2>Don't clear local variables at the end of a function</h2>

<p>While it is certainly good to call <code>free()</code> for every piece of memory you allocated with <code>malloc()</code> and <code>calloc()</code>, there is no need to set the pointers to <code>NULL</code> here.</p>
    </div>