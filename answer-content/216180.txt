<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If they're asking for optimization I would generally understand that they want you to improve performance over multiple calls, they also talk about pre-processing so in this case I would consider caching or pre-calculating results. </p>

<p>The trivial way would be to pre-calculate all the possible results.</p>

<pre><code>let sums = []; 
for (let i = 0; i&lt;lst.length; i++) {
  sums[i] = [];
  for (let j = i; j &lt; lst.length; j++) {
    sums[i][j] = lst
            .slice(i,j)
            .reduce((acc, x) =&gt; acc + x, 0);
  }
}

const sum = (i,j) =&gt; sums[i][j];

console.log(sum(1,3));    
</code></pre>

<p>This is fine for a 5 element array. You are doing 5 pre-calculations. If the array had a thousand elements that would be about 500,000 calculations (and 500,000). The trick to understand here is that <code>sum(i, j)</code> is equal to <code>sum2(i) - sum2(j)</code> where <code>sum2(x)</code> is the sum of all elements starting at <code>x</code>. So you could rewrite this as:</p>

<pre><code>const sums = lst.map( (v,i) =&gt; lst.slice(i).reduce((acc, x) =&gt; acc + x) );

const sum = (i,j) =&gt; sums[i] - sums[j];

console.log(sum(1,3));    
</code></pre>

<p>Although it is a personal preference, I would calculate the values on demand, something like this:</p>

<pre><code>let   sums = []; 

const sum = (i,j) =&gt; sum2(i) - sum2(j);

const sum2 = (k) =&gt; {
  if (!sums[k] ) {
    console.log(`calculating _sum(${k})`);
    sums[k] =
          lst
            .slice(k)
            .reduce((acc, x) =&gt; acc + x, 0);
  }
  return sums[k];
}

console.log(sum(1,3));    
console.log(sum(2,3)); 
</code></pre>
    </div>