<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your code is generally the right idea (in terms of algorithm), but the actual Python implementation is not very efficient. This is because it includes a lot of list slicing, string concatenation and it builds a list of strings. I don't know which criteria you consider for improvement, but the following code is smaller (in terms of lines of code), and runs approximately two times as fast as your solution and the solution of Justin (mentioned in the answer of Garfield Tong). It simply iterates over the string once, and uses a few variables to keep track of the longest substring.</p>

<pre class="lang-py prettyprint-override"><code>def long_repeat(line):
    count = 1
    max_count = 0
    prev_ch = None
    for ch in line:
        if ch == prev_ch:
            count += 1
            max_count = max(max_count, count)
        else:
            count = 1
        prev_ch = ch
    return max_count
</code></pre>

<p><strong>Other feedback</strong></p>

<p>When running <code>pylint</code> over your code, it says:</p>

<blockquote>
  <p>Do not use `len(SEQUENCE)` to determine if a sequence is empty</p>
</blockquote>

<p>So instead of <code>if len(lengths) &gt; 0:</code> it is more Pythonic to write <code>if lengths:</code>.</p>

<p>Also, you could use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to determine the lengths:</p>

<pre class="lang-py prettyprint-override"><code>lengths = [len(substring) for substring in substrings]
</code></pre>

<p>Actually, using built-in functions <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> you could write it like this, although I'm not sure if it's more readable (it depends on personal preference):</p>

<pre class="lang-py prettyprint-override"><code>if substrings:
    return max(map(len, substrings))
else:
    return 0
</code></pre>
    </div>