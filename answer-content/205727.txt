<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When it comes to performance you do nothing wrong in the algorithm, bubble and cocktail sort are just not efficient per design <code>(O(n^2))</code>.</p>

<hr>

<p>This </p>

<blockquote>
<pre><code>        for (int currentElementIndex = 0; currentElementIndex &lt; elementsPendingToSort; currentElementIndex++)
        {
            if (unsortedList.Count.Equals(currentElementIndex + 1))
            {
                continue;
            }
            ...
</code></pre>
</blockquote>

<p>... can be simplified to:</p>

<pre><code>        for (int currentElementIndex = 0; currentElementIndex &lt; elementsPendingToSort - 1; currentElementIndex++)
        {
           ...
</code></pre>

<p>where the stop condition is: <code>currentElementIndex &lt; elementsPendingToSort - 1</code> instead of just <code>currentElementIndex &lt; elementsPendingToSort</code>.</p>

<p>And a similar change can be made in <code>CocktailSort</code>.</p>

<hr>

<p><code>BubbleSort</code> can be improved slightly in this way:</p>

<pre><code>  public static List&lt;long&gt; SortAscending(List&lt;long&gt; unsortedList)
  {
    int elementsPendingToSort = unsortedList.Count;
    do
    {
      int newStop = 0;
      for (int currentElementIndex = 0; currentElementIndex &lt; elementsPendingToSort - 1; currentElementIndex++)
      {
        if (unsortedList[currentElementIndex] &gt; unsortedList[currentElementIndex + 1])
        {
          newStop = currentElementIndex + 1;
          long temporalValueHolder = unsortedList[currentElementIndex];
          unsortedList[currentElementIndex] = unsortedList[currentElementIndex + 1];
          unsortedList[currentElementIndex + 1] = temporalValueHolder;
        }
      }
      elementsPendingToSort = newStop;
    } while (elementsPendingToSort &gt; 0);
    return unsortedList;
  }
}
</code></pre>

<p>Here the <code>anyElementSwapped</code> is replaced by <code>newStop</code> and <code>elementsPendingToSort</code> is set to <code>newStop</code> after the current iteration. This is an optimization when more elements are  placed in their right position in the same iteration.</p>

<hr>

<p>This </p>

<blockquote>
<pre><code>          long temporalValueHolder = unsortedList[currentElementIndex];
          unsortedList[currentElementIndex] = unsortedList[currentElementIndex + 1];
          unsortedList[currentElementIndex + 1] = temporalValueHolder;
</code></pre>
</blockquote>

<p>is candidate for a <code>Swap</code> method that may be generic and made as an extension method:</p>

<pre><code>  public static void Swap&lt;T&gt;(this IList&lt;T&gt; data, int x, int y)
  {
    T tmp = data[x];
    data[x] = data[y];
    data[y] = tmp;
  }
</code></pre>

<hr>

<p>These methods seem superfluous:</p>

<blockquote>
<pre><code>  private static void SwapUpwards(List&lt;long&gt; list, int indexToSwap)
  {
    long temporalValueHolder = list[indexToSwap];
    list[indexToSwap] = list[indexToSwap + 1];
    list[indexToSwap + 1] = temporalValueHolder;
  }

  private static void SwapDownwards(List&lt;long&gt; list, int indexToSwap)
  {
    long temporalValueHolder = list[indexToSwap - 1];
    list[indexToSwap - 1] = list[indexToSwap];
    list[indexToSwap] = temporalValueHolder;
  }
</code></pre>
</blockquote>

<p>as it's just a matter of calling a general <code>Swap</code> function with the right indices.</p>

<hr>

<p>In my opinion it is wrong to have a static method that takes a list of data, sort it and return a reference to it:</p>

<blockquote>
<pre><code>public static List&lt;long&gt; SortAscending(List&lt;long&gt; unsortedList)
{
  ...
  return unsortedList;
}
</code></pre>
</blockquote>

<p>I would expect the input argument list to be left untouched and that the method returns a new sorted list. The <code>IEnumerable&lt;T&gt;.OrderBy()</code> works like that and on the other hand <code>List&lt;T&gt;.Sort()</code> sorts the current instance, and returns <code>void</code>.</p>

<p>I would choose either to return void and sort the argument list or return a sorted copy of the original list.</p>

<hr>

<p>It is always a good idea to be precise and descriptive when it comes to naming of variables and methods, and it is always a question of habits and conventions. In my opinion your naming of the variables in these algorithms is too "verbose" and they make two rather uncomplicated algorithms look more complicated than necessary. </p>

<hr>

<p>Below I've refactored the algorithms in respect to naming, DRY-principle, and I have tried to generalize them as generic extension methods:</p>

<pre><code>public static class SortExtensions
{
  public static void Swap&lt;T&gt;(this IList&lt;T&gt; data, int x, int y)
  {
    T tmp = data[x];
    data[x] = data[y];
    data[y] = tmp;
  }

  public static void BubbleSort&lt;T&gt;(this IList&lt;T&gt; data, bool ascending = true, IComparer&lt;T&gt; comparer = null)
  {
    if (data == null || data.Count &lt; 2) return;

    comparer = comparer ?? Comparer&lt;T&gt;.Default;
    Func&lt;T, T, bool&gt; mustSwap = ascending ? (Func&lt;T, T, bool&gt;)((a, b) =&gt; comparer.Compare(a, b) &gt; 0) : ((a, b) =&gt; comparer.Compare(a, b) &lt; 0);

    int maxIndex = data.Count;

    do
    {
      int newMaxIndex = 0;

      for (int index = 0; index &lt; maxIndex - 1; index++)
      {
        if (mustSwap(data[index], data[index + 1]))
        {
          data.Swap(index, index + 1);
          newMaxIndex = index + 1;
        }
      }
      maxIndex = newMaxIndex;
    } while (maxIndex &gt; 0);
  }

  public static void CocktailSort&lt;T&gt;(this IList&lt;T&gt; data, bool ascending = true, IComparer&lt;T&gt; comparer = null)
  {
    if (data == null || data.Count &lt; 2) return;

    comparer = comparer ?? Comparer&lt;T&gt;.Default;
    Func&lt;T, T, bool&gt; mustSwap = ascending ? (Func&lt;T, T, bool&gt;)((a, b) =&gt; comparer.Compare(a, b) &gt; 0) : ((a, b) =&gt; comparer.Compare(a, b) &lt; 0);

    int startIndex = 0;
    int endIndex = data.Count;
    bool swapped = false;

    do
    {
      swapped = false;
      for (int index = startIndex; index &lt; endIndex - 1; index++)
      {
        if (mustSwap(data[index], data[index + 1]))
        {
          swapped = true;
          data.Swap(index, index + 1);
        }
      }

      endIndex--;
      if (!swapped)
        break;

      for (int index = endIndex; index &gt; startIndex; index--)
      {
        if (mustSwap(data[index - 1], data[index]))
        {
          swapped = true;
          data.Swap(index, index - 1);
        }
      }

      startIndex++;
    } while (swapped);
  }
}
</code></pre>
    </div>