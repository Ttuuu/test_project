<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No, I've compiled your code with C90 and it doesn't reverse the given string.</p>

<ul>
<li><code>int main(int argc, char *argv[])</code> If you're not compiling from the command line with arguments to be used by the program, then <code>int main()</code> suffices.</li>
<li>Passing argument by pointer is used when you want the value of the variable changed. Say I have a variable <code>int var</code> and a function <code>change(.)</code>, I want change to alter the value of <code>var</code>. If I declare change as <code>void change(int n)</code> and I call <code>change(var)</code>, function <code>change</code> will take a copy of <code>var</code> named <code>var</code> but it's only a copy, its address is different from the original <code>var</code>. Any change you make on copy <code>var</code> will not affect the original <code>var</code>. If i declare change as <code>void change(int* n)</code>, then change will only accept <code>int</code> pointers, I have to pass the address, <code>&amp;var</code> into <code>change</code> as <code>change(&amp;var)</code>. Now working on this address is exactly like working on the initial <code>var</code>.</li>
</ul>

<p>To understand pointer-array relationship read <a href="http://en.wikipedia.org/wiki/Pointer_%28computer_programming%29#C_arrays" rel="nofollow noreferrer">wikipedia</a>.</p>

<pre><code>int array[5];      // Declares 5 contiguous integers 
int *ptr = array;  // Arrays can be used as pointers 
ptr[0] = 1;        // Pointers can be indexed with array syntax 
*(array + 1) = 2;  // Arrays can be dereferenced with pointer syntax 
*(1 + array) = 3;  // Pointer addition is commutative 
2[array] = 4;      // Subscript operator is commutative 
</code></pre>

<p>Array names are not really pointers but can be used as pointers. Instead of  <code>strreverse(&amp;str[0])</code>, you can do <code>strreverse(str)</code>. Same result.</p>

<p>You've passed argument as pointer but your code still fails, why?</p>

<ul>
<li>One thing to know about <code>fgets</code> is that unless there is an <code>[EOF][2]</code> which you can only get from an input file or <kbd>Ctrl</kbd>+<kbd>Z</kbd> if you run from the command line, <code>fgets</code> exits when the length argument is reached or it encounters a newline. In summary, <code>fgets</code> reads the newline as a character when you press enter key, increasing your desired length by 1. So if I had entered <code>"my string"</code> + <kbd>Enter</kbd>, your variable <code>str</code> becomes <code>"my string\n"</code>.</li>
<li>So you got the length of the string into <code>len</code>. The array <code>string</code> is zero-based, calling <code>string[len]</code> return the <code>char</code> after the desired last one. The last char is <code>string[len - 1]</code>. </li>
</ul>

<p>You should have done this;</p>

<pre><code>char string2[len];

for(i=0; i&lt;len; i++){
  c=string[i];      //variable c is unimportant
  string2[len-i-1] = string[i];  //observe the -1, when i = 0, string2[len - 1] = string[0]
}
string2[len] ='\0';
</code></pre>

<p>Now that you're done reversing, you need to understand the implication of your next move.</p>

<pre><code>string = string2;
</code></pre>

<p><code>string</code> is a pointer, but that doesn't make it any less of a variable, it's a pointer variable, it also has an address. And if I declare a pointer variable to its address, that pointer will also have an address. Going back to what I said earlier, when you call <code>change(&amp;var)</code>, a copy of the address of <code>var</code> is passed into the function, so when you change the value of this pointer, it no longer holds the address of var. You may think about dereferencing, like this </p>

<pre><code>*string = *string2;
</code></pre>

<p>but this will only alter the first value of the array since <code>*string</code> is same as <code>string[0]</code>. The solution is to copy element by element.</p>

<pre><code>for(i=0; i&lt;=len; i++)
  string[i] = string2[i];
</code></pre>

<p>Now your string is reversed.</p>

<p><em>Read this <a href="http://en.wikipedia.org/wiki/In-place_algorithm" rel="nofollow noreferrer">wikipedia article</a> to understand how an array can be reversed faster.</em></p>
    </div>