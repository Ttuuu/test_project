<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Object to class</h2>

<p>Each object inside your <code>allQuestions</code> array follows the exact same "format":</p>

<pre><code>{
    question: 
    choices: 
    correctAnswer: 
}
</code></pre>

<p>To make this simpler, we can extract a "class" from this so we can more easily store the questions. That might look like this:</p>

<pre><code>function QuizQuesiton(question, choices, correctAnswer) {
    this.question = question;
    this.choices = choices;
    this.correctAnswer = correctAnswer;
}
</code></pre>

<p>Now, when creating a question, we can simply instantiate this class like this:</p>

<pre><code>new QuizQuestion("question", ["choices", "choices"], #);
</code></pre>

<p>Then, if you want to create an array of these, you can do this:</p>

<pre><code>[
    new QuizQuestion("question", ["choices", "choices"], #),
    new QuizQuestion("question", ["choices", "choices"], #),
    new QuizQuestion("question", ["choices", "choices"], #),
    ...
];
</code></pre>

<hr>

<h2>Simplification with variables</h2>

<p>There are quite a few places where you could both simplify and speed up your code if you used variables to access repeated data.</p>

<p>For example, in:</p>

<blockquote>
<pre><code>$(document).ready(function() {
</code></pre>
</blockquote>

<p>you could store</p>

<ul>
<li><code>$(".jumbotron");</code></li>
<li><code>$("#next");</code></li>
<li><code>$("#result");</code></li>
</ul>

<p>Then, you wouldn't have to access the DOM as much.</p>

<p>Also, here:</p>

<pre><code>allQuestions[currentquestion].choices[i] + '&lt;/label&gt;&lt;/div&gt;&lt;br/&gt;';
</code></pre>

<p>Why not use that <code>choices</code> variable that you spent so much time creating?</p>

<hr>

<h2>Please show your ID - er, <em>class</em>, I mean</h2>

<p>Check here:</p>

<blockquote>
<pre><code>...'" id="option' + i + '"&gt;...
</code></pre>
</blockquote>

<p>This is not the point of IDs. IDs in HTML are meant for specific, unique, and special elements. If you have to create a bunch of elements that should all have the same ID and to circumvent it you are just sticking a number to the end of the ID, the you're doing something wrong.</p>

<p>Here, you should instead be using a class <code>"options"</code>. Then, you can get all the elements with this class using</p>

<pre><code>$(".options");
</code></pre>

<p>Then, you can use an index to target specific elements with this class.</p>
    </div>