<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<p>Your implementation is quite good, but ofcourse there are always some things that can be improved upon.</p>

<ol>
<li>Use a <code>if __name__ == '__main__'</code> guard, see what they do.</li>
<li><code>opening</code> <code>closing</code> and <code>mapping</code> could be done a bit simpler

<ul>
<li>You may use <code>list</code> over the values, to create a list, </li>
<li>And you may <code>zip</code> those in a dictionary with the <code>zip</code> keyword.</li>
</ul></li>
<li>If you need to add alot of corner cases, your algorithm is likely off somewhere else.</li>
<li>Consider adding <em>Testcases</em>, <em>Docstrings</em>, or both in the form of <em>Doctest</em>. To make it easier to Test your algorithm.</li>
</ol>

<h1>Alternative code</h1>

<pre><code>def is_matched(expression):
    """
    Finds out how balanced an expression is.
    With a string containing only brackets.

    &gt;&gt;&gt; is_matched('[]()()(((([])))')
    False
    &gt;&gt;&gt; is_matched('[](){{{[]}}}')
    True
    """
    opening = tuple('({[')
    closing = tuple(')}]')
    mapping = dict(zip(opening, closing))
    queue = []

    for letter in expression:
        if letter in opening:
            queue.append(mapping[letter])
        elif letter in closing:
            if not queue or letter != queue.pop():
                return False
    return not queue

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>
    </div>