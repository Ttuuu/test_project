<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have to come up with a trickier algorithm here rather than doing a brute force approach. </p>

<p>Let's try to think about a couple of cases here.</p>

<ol>
<li><code>123</code>, its sum of digits is <code>6</code>. If we decrease <code>3</code> by <code>1</code>, then we'll have to increase <code>2</code> by <code>1</code> (as you're trying to get the least larger element) <code>-&gt;</code> <code>132</code> </li>
<li><code>1293</code>, sum of digits is <code>15</code>. If we decrement <code>3</code> and increment <code>2</code> (<code>9</code> is already a maximum digit so we cannot increment it) then we'll get <code>1392</code>. But is it really the least greater value? Well, no, <code>1329</code> is. So, what we should do it increment <code>2</code>, substitute <code>9</code> with <code>3</code> and decrement <code>3</code> (as <code>2</code> was just incremented). <code>9</code> must go to the end to minimise the value as much as possible.</li>
<li><code>129993</code> - here we have a similar case as #2. The only difference is that the full <code>999</code> must go to the end <code>-&gt;</code> <code>132999</code>.</li>
<li><code>12920</code> - another interesting case. But again, find the first non-zero digit from the left, then if <code>9</code>s are its immediate neighbours move them to  the end, decrement <code>2</code> and put <code>0</code> before it -&gt; <code>13019</code>.</li>
</ol>

<p>Hopefully, based on examples above it's clear which steps have to be implemented (we move from right to left):</p>

<ul>
<li>Find the rightmost digit that can be decremented. So, <code>0</code> cannot be such a digit as it's minimal already. If such digit doesn't exist then there's no solution. Decrement it.</li>
<li>Find the closest digit to the left of the digit from step <code>1</code> that can be incremented. So, <code>9</code> cannot be such a digit as it's maximum already. If there's no such digit then just prepend <code>0</code> to the start of the current number. Increment the digit.</li>
<li>Now, sort all the digits after the digit from step <code>2</code> in ascending order.</li>
<li>You have a solution now!</li>
</ul>

<p><strong>UPDATE</strong></p>

<p>As a bonus, a quick implementation of the approach in <strong>Python</strong>. I'll leave it up to you to improve this solution (if possible :) )</p>

<pre><code>def solve(n):
    size = len(n)

    trailing_zeros = list()
    first_nines = list()

    i = size - 1
    while i &gt;= 0:
        if int(n[i]) != 0:
            break
        trailing_zeros.append(n[i])
        i -= 1

    if i &lt; 0:
        print ("No solution!")
        return

    first_non_zero_digit = int(n[i])
    i -= 1
    while i &gt;= 0:
        if int(n[i]) != 9:
            break
        first_nines.append(n[i])
        i -= 1

    if i &lt; 0:
        remaining = '1'
    else:
        increased_digit = int(n[i]) + 1
        remaining = ''.join(n[:i]) + str(increased_digit)

    print(remaining + ''.join(trailing_zeros) + str(first_non_zero_digit - 1) + ''.join(first_nines))
</code></pre>
    </div>