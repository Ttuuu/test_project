<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few big picture observations: </p>

<ul>
<li><p>You really shouldn’t have this much animation code in your view controller.</p>

<p>For example, rather than using view controller containment, I might do a “modal” presentation with a <code>modalPresentationStyle</code> of <code>.overCurrentContext</code>. That gets you out the child view controller containment code. And you can move your animation code into an animator object (see WWDC 2013 video <a href="https://developer.apple.com/videos/play/wwdc2013/218/" rel="nofollow noreferrer">Custom Transitions Using View Controllers</a>). You’ll end up with a radically simplified view controller.</p>

<p>When you first do this, it’s going to seem complicated because you’ll be dealing with all sorts of objects with which you are likely unfamiliar, but when you’re done, you’ll end up with an implementation that abstracts the details of how the presentation is performed out of this parent view controller. All of this will be incorporated into specific, animation-related objects and is in keeping with the single responsibility principle.</p>

<p>Anyway, when you’re done, the parent view controller will just be presenting and dismissing the view controllers associated with these two popup views.</p></li>
<li><p>The annotation view feels a bit like a keyboard. So it begs the question of whether a proper keyboard might be more appropriate implementation. See <a href="https://stackoverflow.com/a/57244936/1271826">https://stackoverflow.com/a/57244936/1271826</a>. Then you get the standard keyboard appearance and disappearance UI for free.</p>

<p>It’s a bit hard to say in this scenario, because we’re not seeing what is shown in the parent view controller and the interaction between these popup views and the main scene, but it’s something to consider.</p></li>
</ul>

<p>And now, a bunch of tactical observations:</p>

<ol>
<li><p>I’d rename:</p>

<ul>
<li><code>CardState.collpased</code> to be <code>.collapsed</code>.</li>
<li><code>CardType.annotaion</code> to <code>.annotation</code>.</li>
<li><code>annotationVC.annotaionSelected</code> to <code>.annotationSelected</code></li>
<li><code>caardHandleHeight</code> to <code>cardHandleHeight</code></li>
<li><code>selectedAnnotaionType</code> to <code>selectedAnnotationType</code></li>
<li><code>AnnotaionListViewController</code> to <code>AnnotationListViewController</code></li>
</ul></li>
<li><p>You have a lot of unnecessary <code>self</code> references. I’d personally remove all of them except where they’re absolutely needed (e.g. closures and <code>init</code> methods). This eliminates cruft from your code. It also has the virtue of bringing the <code>self</code> references into stark relief. This prompts us to then more clearly reason about whether you really want strong references or <code>weak</code>/<code>unowned</code> references (see next point). But if you have unnecessary <code>self</code> references all over the place, these sorts of issues don’t jump out at you like they might otherwise.</p></li>
<li><p>In your closures, use <code>weak</code> or <code>unowned</code> references (such as in <code>annotationVC.closeAction</code> or <code>annotationVC.annotationSelected</code>) because you are likely introducing strong reference cycles. A child object should not have any strong references to the parent.</p></li>
<li><p>You don’t need the quotes in:</p>

<pre><code>guard let self = self else { return }
</code></pre></li>
<li><p>Consider:</p>

<pre><code>self?.view.gestureRecognizers?.map { $0.isEnabled = false }
</code></pre>

<p>You really should use <code>forEach</code>. We use <code>map</code> for transforming a sequence of objects into other objects, whereas <code>forEach</code> is for performing a block of code for each. Clearly we’re not performing any transformation here, so <code>forEach</code> is appropriate.</p></li>
<li><p>If this view containment survives your rewrite, make sure to call <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621405-didmove" rel="nofollow noreferrer"><code>didMove(toParent:)</code></a> when you’re done adding the subview:</p>

<pre><code>addChild(chatVC)
view.addSubview(chatVC.view)
chatVC.view.frame = ...
chatVC.view.clipsToBounds = true
chatVC.didMove(toParent: self)      // add this line
</code></pre>

<p>As the <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621405-didmove" rel="nofollow noreferrer">documentation</a> says:</p>

<blockquote>
  <p>If you are implementing your own container view controller, it must call the <code>didMove(toParent:)</code> method of the child view controller after the transition to the new controller is complete ...</p>
</blockquote></li>
<li><p>Make sure you’re in the right coordinate system. When adding a subview, you set its <code>frame</code> relative to its superview’s <code>bounds</code> (not the superview’s <code>frame</code>). Often you won’t see problems because a view’s <code>frame</code> and <code>bounds</code> might be the the same or similar enough in most scenarios, but (a) in certain cases it can cause problems; and (b) it suggests a conceptual misunderstanding of coordinate systems.</p></li>
<li><p>You have a line that says:</p>

<pre><code>return UIDevice().userInterfaceIdiom == .pad ? UIScreen.main.bounds.height * 0.4  : 300
</code></pre>

<p>A couple of problems here:</p>

<ul>
<li><p>I think you mean <code>UIDevice.current</code> not <code>UIDevice()</code>.</p></li>
<li><p>You shouldn’t rely on <code>UIScreen.main</code> as you have no assurance that the current view is taking up the whole height of the screen.<br> </p></li>
</ul>

<p>Bottom line, you should do you calculations based upon the view height and you should respond to size changes (e.g. in <code>layoutSubviews</code> of <code>UIView</code> subclass or in <code>viewDidLayoutSubviews</code> in view controller). Or, better, use constraints instead of manipulating frame settings manually.</p></li>
<li><p>I personally wouldn’t round the bottom corners of your presented views (with the black background showing through in the lower corners). Sure, on the top it’s fine, but on the bottom it sort of breaks the sliding-from-the-bottom visual metaphor.</p></li>
<li><p>Very minor observation, but I’m not sure why <code>AnnotationListViewController</code> and <code>ChatViewController</code> have static <code>viewController</code> method, rather than just using <code>init</code> (e.g. <code>ChatViewController()</code>). It’s not a big deal, but seems curious. </p></li>
</ol>
    </div>