<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Numpyification</h1>
<p><code>get_subgrids</code> essentially rearranges a numpy array with a minimum of numpy. It could be done with numpy itself, for example:</p>
<pre><code>def get_subgrids(grid: np.ndarray) -&gt; np.ndarray:
    """Divide the input grid into 9 3x3 sub-grids"""

    swapped = np.swapaxes(np.reshape(grid, (3, 3, 3, 3)), 1, 2)
    return np.reshape(swapped, (9, 9))
</code></pre>
<p>The downside I suppose is that swapping the middle two axes of a 4D array is a bit mind-bending.</p>
<h1>Performance</h1>
<p>Almost all time is spent in <code>get_candidates</code>. I think the reasons for that are mainly:</p>
<ul>
<li>It gets called too often. For example, after filling in a cell (such as in <code>fill_singles</code>), rather than recompute the candidates from scratch, it would be faster to merely remove the new value from the candidates in the same row/col/house.</li>
<li>If a cell is filled, the list of candidates is just the filled-in value, but the expensive set computation is done anyway. That's easy to avoid just by moving those statement inside the <code>if</code>.</li>
</ul>
<h1>Algorithmic performance</h1>
<p>This solver only makes use of Naked Singles as a "propagation technique", adding Hidden Singles is in my experience a very large step towards an efficient solver.</p>
    </div>