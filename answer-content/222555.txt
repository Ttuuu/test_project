<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Responses to your questions</h2>

<blockquote>
  <p><em>Is it good to use javascript and jQuery mix?</em></p>
</blockquote>

<p>If you are going to include the jQuery library, you might as well use it whenever possible. That may mean converting expressions like  </p>

<pre><code>document.getElementById('toFile')
</code></pre>

<p>to </p>

<pre><code>$('#toFile')
</code></pre>

<p>and </p>

<pre><code>target.value = extractNouns(target.value).join('\n');
</code></pre>

<p>to </p>

<pre><code>target.val(extractNouns(target.val()).join('\n');
</code></pre>

<p>However, there are some people who believe jQuery isn't as relevant in today's web. For more information, check out <a href="http://youmightnotneedjquery.com/" rel="nofollow noreferrer">youmightnotneedjquery.com/</a>, which offers alternatives to many of the utilities jQuery offers, like the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" rel="nofollow noreferrer">Fetch API</a> for AJAX requests.</p>

<blockquote>
  <p><em>And is it correct way use php query to fetch product code and product code ending?</em></p>
</blockquote>

<p>It is difficult to tell what "<em>correct way</em>" means. Do you mean is it acceptable to use PHP to generate Javascript code inline? If so, there are many factors, like who would be reading your code (including your future self), etc. Refer to answers to <a href="https://softwareengineering.stackexchange.com/q/126671/244085"><em>Is it considered bad practice to have PHP in your JavaScript</em></a>.</p>

<p>The product codes and endings timeoutId used to generate <code>regexNounFilters</code> could be output using <a href="https://php.net/implode" rel="nofollow noreferrer"><code>implode()</code></a> and the values stored in <code>$std</code> inside the <code>foreach</code> could be returned in a callback passed to <a href="https://php.net/array_map" rel="nofollow noreferrer"><code>array_map()</code></a> - </p>

<p>So instead of:</p>

<blockquote>
<pre><code>foreach ($data as $key) {
    $separator = ($key != end($data)) ? ", " : '';
    $std = "/^(" . $key-&gt;code . ")([a-zA-Z0-9]{" . $key-&gt;ec . "})$/";
    echo $std.$separator;
}
</code></pre>
</blockquote>

<p>Something like this could be used:</p>

<pre><code>echo implode(", ", array_map(function($key) {
    return "/^(" . $key-&gt;code . ")([a-zA-Z0-9]{" . $key-&gt;ec . "})$/";
}, $data);
</code></pre>

<h2>Other review feedback</h2>

<p>At the start of the JavaScript code I see this:</p>

<blockquote>
<pre><code>toFile.focus();
</code></pre>
</blockquote>

<p>where is <code>toFile</code> defined? is it just utilizing that element using the <em>id</em> attribute? If so, this is basically a global variable reference, which can lead to trouble/confusion in the future as the code grows. Refer to answers to <a href="https://stackoverflow.com/q/3434278/1575353"><em>Do DOM tree elements with ids become global variables?</em></a>. It would be wise to utilize <code>document.getElementById('toFile')</code>, as is done in the second callback in the <em>keyup</em> event handler. </p>

<hr>

<p>In the <em>keyup</em> event listener on <code>toFile</code>, <code>timeoutId</code> is assigned to two separate timers, </p>

<blockquote>
<pre><code>timeoutId = setTimeout(function() {
    const data = toFile.value.split("\n");
    const result = data.unique();
    info.textContent = result.length !== data.length ? "Duplicate removed" : "";
    toFile.value = result.join('\n');
}, 100);

timeoutId = setTimeout(function() {
    onInput(document.getElementById('toFile'));
}, 3000);
</code></pre>
</blockquote>

<p>Should the first assignment be preserved? Because the second one overwrites it, there is not any way the first can be cleared via <code>clearTimeout()</code>. If the first should be clearable, use a different name for those two timer ids.</p>

<hr>

<p>The DOM queries could be optimized by saving references in variables - 
for example, <code>$('#status')</code> appears in the <code>beforeSend</code> and <code>success</code> handlers of the AJAX call. </p>

<blockquote>
<pre><code>beforeSend: function(xhr) {
    // Let them know we are saving
    $('#status').html('Saving...');
},
</code></pre>
</blockquote>

<p>A reference could be stored to the DOM element before the call to <code>$.ajax()</code> - e.g. </p>

<pre><code>const successContainer = $('#status') 
</code></pre>

<p>Then the <code>beforeSend</code> callback could be simplified to a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">function partial</a>:</p>

<pre><code>beforeSend: successContainer.html.bind(successContainer, "Saving..."),
</code></pre>

<p>And the success callback can also utilize that variable:</p>

<pre><code>success: function(toFile) {
    // You can get data returned from your ajax call here. ex. jqObj.find('.returned-data').html()
    // Now show them we saved and when we did
    var d = new Date();
    statusContainer.html('Saved! Last: ' + d.toLocaleTimeString());
},
</code></pre>

<p>A function partial could also be used to simplify the second timer:</p>

<pre><code>timeoutId = setTimeout(onInput.bind(null, document.getElementById('toFile')), 3000);
</code></pre>

<hr>

<p>You didn't include the HTML so I am not sure which element(s) this targets:</p>

<blockquote>
<pre><code>$('.form').submit(function(e) {
</code></pre>
</blockquote>

<p>But I would guess it is a <code>&lt;form&gt;</code> tag with attribute <code>class="form"</code>. If that is the case, the class attribute isn't necessary, even for CSS. The form element(s) could be selected with the tag name:</p>

<pre><code>$('form').submit(function(e) {
</code></pre>
    </div>