<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have 3 comments in your method that devide it into 3 "named sections".</p>

<p>The proper representation of "named sections" in Java (and most other programming languages) is a <em>method</em> (aka <em>function</em>/<em>procedure</em>).</p>

<p>So your method should look like this:</p>

<pre><code>public static ArrayList&lt;Stack[]&gt; move(Stack&lt;Integer&gt; first, Stack&lt;Integer&gt; second, Stack&lt;Integer&gt; third) {         
      ArrayList&lt;Stack[]&gt; returnArrayList = new ArrayList&lt;&gt;();
      moveFirst(first, second, third, returnArrayList);
      moveSecond(first, second, third, returnArrayList);
      moveThird(first, second, third, returnArrayList);
      return returnArrayList;
}
</code></pre>

<p>And the code in that named sections would be moved to this new methods:</p>

<pre><code> public static ArrayList&lt;Stack[]&gt; moveFirst(Stack&lt;Integer&gt; first, Stack&lt;Integer&gt; second, Stack&lt;Integer&gt; third, ArrayList&lt;Stack[]&gt; returnArrayList) {   
  if (!first.isEmpty()) {
        Stack&lt;Integer&gt; newFirst = new Stack();
        newFirst.addAll(first);

        Stack&lt;Integer&gt; newSecond = new Stack();
        newSecond.addAll(second);

        Stack&lt;Integer&gt; newThird = new Stack();
        newThird.addAll(third);

        if (newSecond.isEmpty() || (int) newFirst.peek() &lt; (int) newSecond.peek()) {
            newSecond.add(newFirst.pop());
        }
        Stack[] newStacks = {newFirst, newSecond, newThird};
        returnArrayList.add(newStacks);
    }

    if (!first.isEmpty()) {

        Stack&lt;Integer&gt; newFirst = new Stack();
        newFirst.addAll(first);

        Stack&lt;Integer&gt; newSecond = new Stack();
        newSecond.addAll(second);

        Stack&lt;Integer&gt; newThird = new Stack();
        newThird.addAll(third);
        if (newThird.isEmpty() || (int) newFirst.peek() &lt; (int) newThird.peek()) {
            newThird.add(newFirst.pop());
        }
        Stack[] newStacks = {newFirst, newSecond, newThird};
        returnArrayList.add(newStacks);
    }
}
</code></pre>

<p>I skip the copy of the others...</p>

<p>Next thing to do is to use the refactoring capability of your IDE:<br>
 in the method <code>moveFirst</code>:  </p>

<ul>
<li>place the cursor on variable Name  <code>first</code> in the line <code>if (!first.isEmpty()) {</code> (either one)</li>
<li>From the IDEs refactoring tools select "Rename in File"</li>
<li>change the name of <code>first</code> to <code>a</code></li>
<li>place the cursor on variable Name  <code>second</code> in the line <code>newSecond.addAll(second);</code></li>
<li>From the IDEs refactoring tools select "Rename in File"</li>
<li>change the name of <code>second</code> to <code>b</code></li>
<li>place the cursor on variable Name  <code>third</code> in the line <code>newThird.addAll(third);</code></li>
<li>From the IDEs refactoring tools select "Rename in File"</li>
<li>change the name of <code>third</code> to <code>c</code></li>
<li>repeat this to rename <code>newFirst</code>, <code>newSecond</code> and <code>newThird</code> to <code>d</code>, <code>e</code> and <code>f</code> respectively.</li>
</ul>

<p>The new names are rather poor by intension to make a point soon....</p>

<p>It should now look like this:</p>

<pre><code>public static ArrayList&lt;Stack[]&gt; movea(Stack&lt;Integer&gt; a, Stack&lt;Integer&gt; b, Stack&lt;Integer&gt; c, ArrayList&lt;Stack[]&gt; returnArrayList) {   
  if (!a.isEmpty()) {
        Stack&lt;Integer&gt; d = new Stack();
        d.addAll(a);

        Stack&lt;Integer&gt; e = new Stack();
        e.addAll(b);

        Stack&lt;Integer&gt; f = new Stack();
        f.addAll(c);

        if (e.isEmpty() || (int) d.peek() &lt; (int) e.peek()) {
            e.add(d.pop());
        }
        Stack[] newStacks = {d, e, f};
        returnArrayList.add(newStacks);
    }

    if (!a.isEmpty()) {

        Stack&lt;Integer&gt; d = new Stack();
        d.addAll(a);

        Stack&lt;Integer&gt; e = new Stack();
        e.addAll(b);

        Stack&lt;Integer&gt; f = new Stack();
        f.addAll(c);
        if (f.isEmpty() || (int) d.peek() &lt; (int) f.peek()) {
            f.add(d.pop());
        }
        Stack[] newStacks = {d, e, f};
        returnArrayList.add(newStacks);
    }
}
</code></pre>

<p>Then go to method <code>moveSecond</code></p>

<ul>
<li>place the cursor on variable Name  <code>second</code> in the line <code>if (!first.isEmpty()) {</code> (either one)</li>
<li>From the IDEs refactoring tools select "Rename in File"</li>
<li>change the name of <code>second</code> to <code>a</code></li>
<li>place the cursor on variable Name  <code>first</code> in the line <code>newSecond.addAll(first);</code></li>
<li>change the name of <code>first</code> to <code>b</code></li>
<li>place the cursor on variable Name  <code>third</code> in the line <code>newThird.addAll(third);</code></li>
<li>From the IDEs refactoring tools select "Rename in File"</li>
<li>change the name of <code>third</code> to <code>c</code></li>
<li>repeat this to rename <code>newFirst</code>, <code>newSecond</code> and <code>newThird</code> to <code>e</code>, <code>d</code> and <code>f</code> respectively (mind the new order of <code>e</code> and <code>d</code>).</li>
</ul>

<p>the result shuld be like this:</p>

<pre><code>public static ArrayList&lt;Stack[]&gt; moveFirst(Stack&lt;Integer&gt; b, Stack&lt;Integer&gt; a, Stack&lt;Integer&gt; c, ArrayList&lt;Stack[]&gt; returnArrayList) {   
    if (!a.isEmpty()) {

        Stack&lt;Integer&gt; e = new Stack();
        e.addAll(b);

        Stack&lt;Integer&gt; d = new Stack();
        d.addAll(a);

        Stack&lt;Integer&gt; f = new Stack();
        f.addAll(c);
        if (e.isEmpty() || (int) d.peek() &lt; (int) e.peek()) {
            e.add(d.pop());
        }
        Stack[] newStacks = {e, d, f};
        returnArrayList.add(newStacks);

    }

    if (!a.isEmpty()) {
        Stack&lt;Integer&gt; e = new Stack();
        e.addAll(b);

        Stack&lt;Integer&gt; d = new Stack();
        d.addAll(a);

        Stack&lt;Integer&gt; f = new Stack();
        f.addAll(c);

        if (f.isEmpty() || (int) d.peek() &lt; (int) f.peek()) {
            f.add(d.pop());
        }

        Stack[] newStacks = {e, d, f};
        returnArrayList.add(newStacks);

    }
}
</code></pre>

<p>If you now look at this two methods, you see that the logic is exactly the same in both except the order in which the new <code>stack</code> objects are created. 
The only <em>important</em> difference is the order of arguments in the method signature.</p>

<p>This means that you can change you original method to this:</p>

<pre><code>public static ArrayList&lt;Stack[]&gt; move(Stack&lt;Integer&gt; first, Stack&lt;Integer&gt; second, Stack&lt;Integer&gt; third) {         
      ArrayList&lt;Stack[]&gt; returnArrayList = new ArrayList&lt;&gt;();
      moveFirst(first, second, third, returnArrayList);
      //moveSecond(second, first, third, returnArrayList);
      moveFirst(second, first, third, returnArrayList);
      moveThird(first, second, third, returnArrayList);
      return returnArrayList;
}
</code></pre>

<p>And guess what: this will also work with the method <code>moveThird</code>:</p>

<pre><code>public static ArrayList&lt;Stack[]&gt; move(Stack&lt;Integer&gt; first, Stack&lt;Integer&gt; second, Stack&lt;Integer&gt; third) {         
      ArrayList&lt;Stack[]&gt; returnArrayList = new ArrayList&lt;&gt;();
      moveFirst(first, second, third, returnArrayList);
      //moveSecond(second, first, third, returnArrayList);
      moveFirst(second, first, third, returnArrayList);
      //moveThird(first, second, third, returnArrayList);
      moveFirst(third, second, first, returnArrayList);
      return returnArrayList;
}
</code></pre>

<p>Now you can delete the methods <code>moveSecond</code> and <code>moveThird</code>.</p>

<p>You can use the same technique to merge the two <code>if</code> blocks into a single parameterized method.</p>
    </div>