<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, having parameters in initialization is <strong>overloading</strong> - and no it's not possible in VBA. Your best bet is to create constants and a new function for assigning those constants to properties.</p>
<hr>
<ol>
<li><p><code>Call</code>ing functions/subs is obsolete. Just do <code>Sub argument, argument</code> or <code>x = function(argument)</code></p>
</li>
<li><p>Always turn on <code>Option Explicit</code>. You can have it automatically by going to Tools -&gt; Options in the VBE and checking the <strong>Require Variable Declaration</strong> option. This way if you have any variables not defined, the compiler will let you know. Right now you have nothing declared in your test module.</p>
</li>
<li><p>Sub <code>Test</code> and Function <code>test22222</code> tell me <em>nothing</em> about what they do. Name your procedures something useful - this may just be throw-away for you, but it's on code review, so by definition it's <em>not</em>.</p>
</li>
<li><p><code>Function test22222(ByVal X As cTable)</code> - why is this a function? It doesn't have a return <em>type</em> so it would be a <code>sub</code> instead.</p>
</li>
<li><p>Naming, besides just being clear and concise, you should adhere to <a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a> - variables would be camelCase and only constants would be UPPER_CASE</p>
</li>
</ol>
<h3>Readability</h3>
<blockquote>
<pre><code>'---------------------------------------------- DataRowStart'
Public Property Get DataRowStart() As Long
    DataRowStart = pDataRowStart
End Property

Public Property Let DataRowStart(Value As Long)
    pDataRowStart = Value
End Property

'---------------------------------------------- TableColStart'
Public Property Get TableColStart() As Long
    TableColStart = pTableColStart
End Property
</code></pre>
</blockquote>
<p>You may think these headers make the code more clear, but it would actually be more clear without the clutter.</p>
<blockquote>
<pre><code>pHeaderRow = 1
pDataRowStart = 2
pTableColStart = 1
</code></pre>
</blockquote>
<p>The usage of constants would be a good idea here</p>
<pre><code>Const HEADER_ROW as Long = 1
Const DATA_ROW_START as Long = 2
Const TABLE_COLUMN_START as Long = 1
</code></pre>
<p>This moves it out of the initialization and makes it easier to see that they are constants when in use.</p>
<p>In your properties you use the variable <code>value</code> a lot. Try to make it more precise. Also, I avoid using variables named <code>Value</code> and <code>Sheet</code> because they are key words for the VBE.</p>
<h3>cTable</h3>
<p>So you've made a Class, that is great! They are sometimes difficult to start using because they seem so foreign (to many VBA writers). What I suggest is to think of this class as what it is - an <strong>object</strong>. That object then has properties.</p>
<p>For example, a <a href="https://docs.microsoft.com/en-us/office/vba/api/Excel.Range(object)" rel="nofollow noreferrer"><code>Range</code></a> is an <em>object</em> and it has properties like <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.range.count" rel="nofollow noreferrer"><code>count</code></a> and <code>value</code>.</p>
<p>Objects can also have <strong>methods</strong>. With <code>Range</code> you can do something complex like <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.range.autofilter" rel="nofollow noreferrer"><code>AutoFilter</code></a> or something simple like <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.range.clear" rel="nofollow noreferrer"><code>clear</code></a></p>
<p>By remembering how VBA uses its object, you can build you own objects in the same way. This would suggest that if you feel you're overdoing it, and your object isn't that complex, then yes you are overdoing it.</p>
<p>Right now your class creates <em><strong>two objects</strong></em> - Dictionaries. Dictionaries are already objects (or classes) with properties and methods. Putting two of those into a single object means that your class is a <strong>collection</strong>. So then let's see if this <em>collection of dictionaries</em> would have some of these properties -</p>
<p>Header row, header names? Yes. Beginning rows and columns - I don't know, wouldn't that be a property of the <em>source</em> sheet? Speaking of the sheet - are both of these dictionaries always coming from the same sheet or file? If not, then maybe your class should be an object instead of a collection of objects.</p>
<p>Would a collection of dictionaries open a workbook? Probably not. That's probably something you'd want to do outside of the class, but that's just my opinion. There's no right or wrong here, just what you think makes sense. But, consider all the properties you didn't use in your test - why not? Because they aren't inherent to the object?</p>
<blockquote>
<pre><code>If pFileName - "" Then
Else
    HeaderName = ""
</code></pre>
</blockquote>
<p>Instead of <code>""</code> VBA has a constant for that - <code>vbNullString</code>. Always prefer that over empty quotes.</p>
<blockquote>
<pre><code>  With FromSht
     .Activate
</code></pre>
</blockquote>
<p>No! Be sure to avoid things like <code>.Activate</code> - it just slows the code down by needing to fiddle with the spreadsheet while doing everything else behind the scenes. There's a good question on StackOverflow <a href="http://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba-macros">addressing this</a>. If you know the target sheet, just use the target sheet.</p>
<p>Speaking of target sheet</p>
<blockquote>
<pre><code>Public Property Let HeaderRow(Value As Long)
    pHeaderLastCol = Cells(pHeaderRow, Columns.Count).End(xlToLeft).Column
    pHeaderRow = Value
End Property
</code></pre>
</blockquote>
<p>This <code>Cells</code> is just assuming it needs to use the <code>ActiveSheet</code>. If you need to use a specific sheet, give that sheet a name. Either a variables or an actual name. Worksheets have a <code>CodeName</code> property - View Properties window (<kbd>F4</kbd>) and the <code>(Name)</code> field (the one at the top) can be used as the worksheet name. This way you can avoid <code>Sheets("mySheet")</code> and instead just use <code>mySheet</code>.</p>
<p>Your formatting of the functions in the class is good - great usage of the line continuation <code>_</code>.</p>
<p>I know you mentioned you're new to Classes, and great job, but in this instance your dictionary is already an object, and I don't really see any properties or methods of the class that you don't just get from the dictionary. Also, as I already mentioned, this is sort of a <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/collection-object" rel="nofollow noreferrer">collection</a> anyway.</p>
    </div>