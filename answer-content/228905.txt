<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not fully versed on the use of streams in PHP, so I may miss stuff. You also haven't specified the context in which this will be used, or a threat-model, so it's hard to asses if it's "secure".</p>

<h1>Efficiency</h1>

<p>You should <a href="https://www.php.net/manual/en/function.fclose.php" rel="nofollow noreferrer">close</a> the socket when you're done with it. </p>

<p>What are the <code>sleep(1)</code> lines for? You're <em>already</em> waiting for data to become available on the socket.</p>

<p>I would be tempted to make your timeouts and retry count optional arguments with default values, but that's not a huge deal. </p>

<h1>Security</h1>

<p>Most of the security concerns are probably outside your control. </p>

<p>How do you know if the server you're opening the socket to is the one you actually wanted? Do you care if a 3rd party is reading these messages? Could a 3rd party alter the messages in transit?</p>

<p>Very likely these aren't problems you need to worry about, but depending on the application they might be.</p>

<h1>Code Quality</h1>

<ul>
<li>Calling <code>exit()</code> from an error handler probably isn't a great idea. If this is going to be used in a web-service of any kind, then this is actually a security issue: Anyone who can cause problems with your connection to the whois server can now break your site. </li>
<li>Format the comment at the top as a <a href="https://en.wikipedia.org/wiki/PHPDoc" rel="nofollow noreferrer">PHPDoc</a> to help IDEs and intellisense.</li>
<li>Don't do multiple assignments on one line.</li>
<li>Don't name a variable <code>$null</code>. You could name it <code>$dummy</code> or <code>$temp</code> or have separate <code>$read</code> and <code>$except</code>. You may also have the option of passing anonymous empty arrays in-line.</li>
<li><code>return</code> isn't typically written like a function; it's a language command on the level of <code>try</code> or <code>class</code>.</li>
<li>When you're writing a loop, your first thought should be a <code>for</code> loop (or <code>foreach</code>), which will serve just fine here.</li>
<li>Use type-signatures for your functions.</li>
</ul>

<p>All that get's us this far:</p>

<pre class="lang-php prettyprint-override"><code>/* Return raw WHOIS data for domain.
 * 
 * @param string $domain The domain to ask about.
 * @param int $timeout The time to spend waiting for the WhoIs server, 
 *   which we will do at least twice.
 * @param int $tries How many times to poll the open socket for data.
 */
function whois(string $domain, int $timeout = 3, int $tries = 5):string {
    $retval = 0;
    $whoisServer = getTld($domain) . ".whois-servers.net";

    set_error_handler("whoisWarningHandler", E_WARNING);
    $whois = fsockopen($whoisServer, 43);
    restore_error_handler();

    stream_set_timeout($whois, $timeout);
    stream_set_blocking($whois, false);
    fwrite($whois, $domain . "\r\n");

    for($try = 1; ($try &lt;= $tries) &amp;&amp; !$retval; $try++){
        printf(
            'WhoIs try %d. Already waited %d seconds; will wait %d more.',
            $try, ($try - 1) * %timeout, $timeout)
        if(stream_select([$read], [], [], $timeout)){
            $retval = filter_var(
                fread($whois, 65535),
                FILTER_DEFAULT,
                FILTER_FLAG_STRIP_HIGH);
        }
    }

    fclose($whois);

    return $retval;
}
</code></pre>

<h1>Error handling</h1>

<p>Your best bet here is to trash your work so far and start over in any other language besides PHP.</p>

<p>There are <em>at least <strong>four</strong></em> different kinds of failures you should be concerned about:</p>

<ul>
<li>Exceptions could be thrown.

<ul>
<li>Don't assume we know where this might happen. Generally, if an expected exception happens then, as long as the necessary logging and cleanup are happening, it's appropriate for the system to crash.</li>
</ul></li>
<li>Warnings could be thrown, and can also cause execution to stop or otherwise jump.

<ul>
<li>fsockopen does this, as you've noticed.</li>
<li>stream_select does this.</li>
</ul></li>
<li>Functions can set error flags which you need to then inspect.

<ul>
<li>fsockopen does this.</li>
</ul></li>
<li>Functions can return values that represent failure.

<ul>
<li>Most functions do this.</li>
</ul></li>
</ul>

<p>You need to make sure that, no matter what happens, failures are logged appropriately and system resources like the socket you're opening get closed. Depending on the nature of the failure, you may also want execution to continue in a predictable way.</p>

<p>This can get really ugly and verbose if you try to brute-force cover every angle. My suggestion would be to write a function that takes as an argument a function that takes an open socket as an argument. The outer function can be in charge of setting up and then closing the socket "no matter what", and the inner function can focus on happy-path business logic. </p>

<p>In practice, as I said before, the efficient way forward is to either accept your code as imperfect, or start over in a different language. </p>
    </div>