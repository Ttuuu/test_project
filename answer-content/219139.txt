<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it looks pretty good. One possible way to make it faster is in this part:</p>

<pre><code>for ( int i = 0; i&lt; k ; i++ ) {
    for ( int j = i; j&lt; k ; j++ ) {
        int w = just_primes[i]+just_primes[j];
        if ( w &gt;= 1000000 &amp;&amp; w &lt;= 2000000 ) {
            p = w - 1000000;
            conjunct[p]++;
        }
    }
}
</code></pre>

<p>Notice that for each value of justprimes[i] you are currently testing all values of justprimes[j] and after this you are testing if the sum is in the desired interval.</p>

<p>One way to work around this is by using a two pointer method that tells us the biggest possible value j can take for any value of i, and also by breaking out of the loop as soon as j becomes to small. </p>

<pre><code>int high = k-1;
    for ( int i = 0; i&lt; k ; i++ ) {
        for ( int j = high; j&gt;=i ; j-- ) {
            int w = just_primes[i]+just_primes[j];
            if(w&lt; 1000000) break;
            if ( w &lt;= 2000000 ) {
                p = w - 1000000;
                conjunct[p]++;
            }
            else{
                while( just_primes[i]+ just_primes[high] &gt; 2000000 &amp;&amp; high &gt; 0){
                    high --;
                }
            }
        }
    }
</code></pre>

<p>This seems to give a 15% speed boost in my computer.</p>
    </div>