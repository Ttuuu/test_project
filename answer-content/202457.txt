<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few considerations.</p>

<p><strong>DEFPARAMETER vs. DEFVAR</strong></p>

<p>The first three definitions should be given with <code>defparameter</code> instead of <code>defvar</code>. The first operator is used for values that do not change, unless they are modified in the source file and then recompiled. The second for variables that can be modified at run time but, when reloaded and recompiled, does not modify the current run-time value (i.e. are not re-initialized).</p>

<p><strong>Comparison operators on more than one value</strong></p>

<p>In Common Lisp is very handy the possibility of using all the comparison operators with more then one argument. For instance if you want to check if the numbers <code>a</code>, <code>b</code> and <code>c</code> are all equal, you can simply write <code>(= a b c)</code>; if you want to check that they are all different among them (that is that the are no two values equal), you can write <code>(\= a b c)</code>. This can simplify the function <code>is-move-free</code> as well as make non necessary the function <code>is-same</code>.</p>

<p><strong>Semplification of the <code>win</code> functions</strong></p>

<p>In effect they have all the same pattern: you compare three value starting with a certain index and then incrementing that index with the same value two times. For this reason I suggest a more simple function that includes all the three:</p>

<pre><code>(defun win (board)
  (flet ((check (start increment)
                (= (elt board start) (elt board (incf start increment)) (elt board (incf start increment)))))
    (some #'check '(0 3 6 0 1 2 0 2) '(1 1 1 3 3 3 4 2))))
</code></pre>

<p>Note:</p>

<ol>
<li><p>The use of the <code>flet</code> to define an internal function: <code>defun</code> should be used only for top level functions. In case of internal recursive functions you should use <code>labels</code> instead of <code>flet</code>.</p></li>
<li><p>The use of <code>incf</code> which performs a side-effect incrementing the value of a variable (which is safe in this case since in Common Lisp parameters are passed by value).</p></li>
<li><p>The use of <code>some</code> which is a functional that returns a true value if some predicate is at least once true when applied to one (or more) lists. In this case the predicate is <code>check</code> and it is applied to the list of starting indexes, and the list of the increments.</p></li>
</ol>

<p><strong>The final code</strong></p>

<p>Here is the entire code with my modifications:</p>

<pre><code>(defparameter p1 88) ; char code for 'X'
(defparameter p2 79) ; char code for 'O'
(defparameter tie 49) ; arbitrary constant to represent ties

(defun is-move-free (move board)
  (let ((player (elt board move)))
    (/= p1 p2 player)))

(defun win (board)
  (flet ((check (start increment)
                (= (elt board start) (elt board (incf start increment)) (elt board (incf start increment)))))
    (some #'check '(0 3 6 0 1 2 0 2) '(1 1 1 3 3 3 4 2))))

;;; This function gets the players move, plays it if possible
;;; then gets the next move. The game will play out in it's
;;; entirety through recursively calling this function.
(defun get-player-move (player board move-num)
  (apply #'format t " ~C | ~C | ~C ~%-----------~% ~C | ~C | ~C ~%-----------~% ~C | ~C | ~C~%" (mapcar #'code-char board)) ; Print the board
  (if (&gt;= move-num 9) ; if all the moves have been played, and there is no winner
      tie               ; return the tie constant
      (let ((move (- (parse-integer (read-line)) 1))) ; get the move from input, and convert it to list location
        (if (is-move-free move board)
            (let ((board (substitute player (elt board move) board))) ; apply the move, and get the new board
              (if (win board) ; check if this was the winning move
                  (elt board move) ; return the winner
                  (get-player-move (if (= player p1) p2 p1) board (+ move-num 1)))) ; continue the game
            (get-player-move player board move-num))))) ; move again, if the move was taken

(let ((result (get-player-move p1 '(49 50 51 52 53 54 55 56 57) 0)))
  (if (= result tie)
      (format t "It's a tie!")
      (format t "The winner is ~C" (code-char result))))
</code></pre>

<p>Note the use of the more common indentention convention for the <code>if</code>, as well as the semplification of the <code>format</code>.</p>

<p><strong>An iterative version</strong></p>

<p>Common Lisp has been designed to be used both with applicative (i.e. functional) style, as well as imperative (i.e. with side-effect) style. So, instead of using the applicative style of creating each time a new board with <code>substitute</code> and passing it to a recursive call of the function <code>get-player-move</code>, an alternative could be a simple iterative style, like for instance:</p>

<pre><code>(defun get-player-move (player board move-num)
  (loop
    (apply #'format t " ~C | ~C | ~C ~%-----------~% ~C | ~C | ~C ~%-----------~% ~C | ~C | ~C~%" (mapcar #'code-char board)) ; Print the board
    (let ((move (- (parse-integer (read-line)) 1)))
      (when (is-move-free move board)
        (setf (elt board move) player)
        (when (win board) (return player))
        (incf move-num)
        (when (= move-num 9) (return tie))
        (setf player (if (= player p1) p2 p1))))))
</code></pre>

<p>Note that in this case, since the board is modified, one should create it initially with <code>(list 49 50 51 52 53 54 55 56 57)</code>, instead of using a constant like <code>'(49 50 51 52 53 54 55 56 57)</code>.</p>
    </div>