<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use <code>open</code> in a <code>with</code></h2>

<p>...so that you can be guaranteed of file closure regardless of any potential exceptions.</p>

<h2>Use f-strings</h2>

<p>So that something like this:</p>

<pre><code>x='Tab_'+str(i)
</code></pre>

<p>turns into</p>

<pre><code>x = f'Tab_{i}'
</code></pre>

<h2>Computers are good at repetition</h2>

<pre><code>a.append(random.choice(name)+'_'+str(i))
a.append(random.choice(ssn)+'_'+str(i))
a.append(random.choice(address)+'_'+str(i))
a.append(random.choice(dob)+'_'+str(i))
a.append(random.choice(phone)+'_'+str(i))
</code></pre>

<p>can be</p>

<pre><code>a.extend(f'{random.choice(n)}_{i}' for n in (name, ssn, address, dob, phone))
</code></pre>

<h2>Injection attacks</h2>

<p>Unless you're <em>really</em> confident about the source, safety and validity of your data, constructing a string and sending it off as executable SQL is enemy number one of database security. This is what prepared statements are for. It's unclear what flavour of SQL you need, so it's unclear which library you'll need for this.</p>

<h2>Combined assignment/increment</h2>

<pre><code>count=count+1
</code></pre>

<p>can be</p>

<pre><code>count += 1
</code></pre>
    </div>