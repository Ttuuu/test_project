<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To my understanding you want a new column <code>qc1</code> that takes value 1 if the current element matches the previous 5 elements and takes value 0 otherwise.</p>

<p>This feels like a great application of run-length encoding. I'll borrow the great example data from @minem:</p>

<pre><code>mydata &lt;- data.frame(ta = 1:13)
mydata[2:3, 1] &lt;- 1L
mydata[6:12, 1] &lt;- 2L
mydata$ta
#  [1]  1  1  1  4  5  2  2  2  2  2  2  2 13
</code></pre>

<p>The run-length encoding tells us how many times each value is repeated in a row:</p>

<pre><code>rle(mydata$ta)
# Run Length Encoding
#   lengths: int [1:5] 3 1 1 7 1
#   values : int [1:5] 1 4 5 2 13
</code></pre>

<p>We read from this output that we have 5 runs: 1 repeated 3 times, 4 repeated 1 time, 5 repeated 1 time, 2 repeated 7 times, and 13 repeated 1 time. For each run, we know the first 5 values won't be preceded by 5 identical elements (<code>0</code> in the output), while elements 6 and onward will (<code>1</code> in the output). So the number of <code>0</code>s at the beginning of each run is:</p>

<pre><code>with(rle(mydata$ta), pmin(lengths, 5))
# [1] 3 1 1 5 1
</code></pre>

<p>And the number of <code>1</code>s at the end of each run is:</p>

<pre><code>with(rle(mydata$ta), pmax(lengths-5, 0))
# [1] 0 0 0 2 0
</code></pre>

<p>So we just need to <a href="https://stackoverflow.com/a/25961969/3093387">interleave these two vectors</a> within a call to <code>rep</code> to yield your eventual one-liner for this operation:</p>

<pre><code>mydata$qc1 &lt;- with(rle(mydata$ta),
                   rep(rep(0:1, length(values)), c(rbind(pmin(lengths, 5), pmax(lengths-5, 0)))))
mydata
#    ta qc1
# 1   1   0
# 2   1   0
# 3   1   0
# 4   4   0
# 5   5   0
# 6   2   0
# 7   2   0
# 8   2   0
# 9   2   0
# 10  2   0
# 11  2   1
# 12  2   1
# 13 13   0
</code></pre>

<p>If you were planning to do this with a bunch of different window sizes, then a function would make the most sense, which would take the window size as an argument. Here I'll split up the calculation into smaller pieces for readability:</p>

<pre><code>window.repeat &lt;- function(vals, window.size) {
  r &lt;- rle(vals)
  num.run &lt;- length(r$values)
  run.0s &lt;- with(r, pmin(lengths, window.size))
  run.1s &lt;- with(r, pmax(lengths-window.size, 0))
  rep(rep(0:1, num.run), c(rbind(run.0s, run.1s)))
}
</code></pre>

<p>Now we could, for instance, label each element with whether it had 2 or more repeats before it:</p>

<pre><code>mydata$qc1 &lt;- window.repeat(mydata$ta, 2)
mydata
#    ta qc1
# 1   1   0
# 2   1   0
# 3   1   1
# 4   4   0
# 5   5   0
# 6   2   0
# 7   2   0
# 8   2   1
# 9   2   1
# 10  2   1
# 11  2   1
# 12  2   1
# 13 13   0
</code></pre>
    </div>