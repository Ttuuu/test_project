<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A somewhat more advanced alternative could be to use iostream operators.  In your example you are writing the hex data to a string, and then writing the string to a file.  You could argue that this is inefficient, and the hex data could be directly written to the file in the first place without using the string for temporary storage.</p>

<p>Here is an example of one way you could do this.  Note however that although it is marginally more efficient, it is also more verbose and more difficult to read.  This is a good lesson that sometimes code that is more efficient to run is not necessarily more efficient for a human to read and maintain.</p>

<p>When optimising your code you need to strike a balance between the fastest leanest code possible, and something that other people can easily understand.  Otherwise what is the point of saving a few seconds of execution time over the life of your program when it takes other less experienced people in your team hours to figure out what the code does?</p>

<pre><code>#include &lt;cstdint&gt;  // uint8_t etc.
#include &lt;fstream&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

// We'll make a typedef so we don't have to keep typing the whole vector thing
// everywhere, and we'll use the newer uint8_t type rather than the less obvious
// 'unsigned char'.
typedef std::vector&lt;uint8_t&gt; buffer;

// We need to make a custom type so we can control which function the compiler will call.
struct hexbuffer {
    // Taking a const reference is risky, but we know in this case the lifetime of the
    // hexbuffer will match the lifetime of innerbuf, so we will be safe.  This is
    // another potentially dangerous optimisation that requires careful understanding
    // of variable scope and lifetime.  If we get it wrong the program could crash,
    // and worst case someone could exploit the crash and use it to hack into the
    // computer running this program.
    const buffer&amp; innerbuf;
};

// This is our iostream function.  All it does is wrap the parameter up in the custom
// type so that the intended operator function below is the one that gets called.
hexbuffer hexify(const buffer&amp; b)
{
    return { b };
}

// This operator overload is what does all the work.  Overloads require a unique function
// signature, which we achieve here by having one of the parameters be our custom type.
std::ostream&amp; operator &lt;&lt; (std::ostream&amp; s, const hexbuffer&amp; h)
{
    // Set up the stream first as it only has to be done once.
    s &lt;&lt; std::setw(2) &lt;&lt; std::setfill('0') &lt;&lt; std::hex;

    // Write the hex data.
    for (auto c : h.innerbuf) {
        s &lt;&lt; (int)c &lt;&lt; ' ';
    }

    // iostream operators require us to return the same value we were passed.  This
    // allows them to &lt;&lt; be &lt;&lt; chained &lt;&lt; together.  In other languages you see this
    // same pattern as().chained().functions().
    return s;
}

// Now all the hard stuff is done, actually using it is pretty easy.
int main()
{
    buffer example{'5', '1', '5', '7', '9'};

    // We can use our function to write to the console.
    std::cout &lt;&lt; hexify(example) &lt;&lt; std::endl;

    // Or we can use it to write to a file.
    std::ofstream f("text.bin");
    f &lt;&lt; hexify(example);
    f.close();

    return 0;
}
</code></pre>
    </div>