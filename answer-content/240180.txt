<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see much benefit to the enum. The <code>Notification.permission</code> string (or the return value of <code>requestPermission()</code>) is already pretty clear: <code>'denied'</code>, <code>'granted'</code>, or <code>'default'</code>. The specification <a href="https://notifications.spec.whatwg.org/#api" rel="noreferrer">requires</a> that it be one of those, if <code>window.Notification</code> exists. Passing around a number instead of a more intuitive string seems a bit odd.</p>

<p>In Javascript, at least in my opinion, classes are generally useful when you want to <a href="https://codereview.stackexchange.com/a/239951">bundle state data with methods</a>. If you're not using instance properties, consider using plain functions (or an object of functions, if you have multiple related ones) instead; the intent of the code will be clearer, and it'll look a bit simpler.</p>

<p><code>.then(success, fail)</code> is generally <a href="https://stackoverflow.com/q/24662289">considered an antipattern for promises</a>. Unless you <em>deliberately want</em> the somewhat odd control flow it results in, it would be better to use <code>.then</code> followed by <code>.catch</code>, so that your <code>catch</code> can catch errors that may occur in the <code>.then</code>.</p>

<p>But <a href="https://mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/" rel="noreferrer">exceptions should be exceptional</a>. They require unwinding the whole call stack and, when you're working with a self-contained script, generally don't provide any control flow benefits. Rather than throwing, it might be preferable to just check the permission result, and if it's not <code>'granted'</code>, log an error and exit.</p>

<pre><code>const canNotify = async () =&gt; {
    if (Notification.permission === 'default') {
        await Notification.requestPermission()
    }
    const { permission } = Notification;
    if (permission !== 'granted') {
        console.error(`Notifications not permitted. Permission status: ${permission}`);
        return;
    }
    return true;
};
const makeNotification = (notification) =&gt; {
    new Notification(notification.title, notification);
};
async function main() {
    if (!canNotify()) {
        return;
    }
    const notifications = new Notifications();
    notifications.add(makeNotification);
    findReviews(notifications);
}

main()
</code></pre>

<p>I'm unsure about the usefulness of the <code>Notifications</code> class. It makes sense if you're expecting to add multiple separate observers, but it sounds like you may only want to notify the user <em>once</em>, using the most preferred method available (whether that's a <code>Notification</code>, an <code>alert</code>, a <code>SpeechSynthesisUtterance</code> or sound, etc). In such a case, rather than having a <code>Notifications</code> and an array of observers, consider making a function that looks at permissions/userscript settings and returns a function that calls the right method.</p>

<pre><code>const makeNotifier = async () =&gt; {
  if (canNotify()) {
    return notification =&gt; new Notification(notification.title, notification);
  } else if (preferAlerts) {
    return notification =&gt; alert(notification.title);
  }
  // etc
};
const notifier = await makeNotifier();
// pass around notifier
</code></pre>

<p>Cookies are meant for saving settings associated with a user which get sent to the server with every request. Here, since you're just trying to persist data across pageloads, it would be more appropriate to use <a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage" rel="noreferrer"><code>localStorage</code></a>, which doesn't get sent to the server, is much easier to interface with, and has a much larger storage limit.</p>

<p>Remember to <a href="https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75" rel="noreferrer">always use <code>const</code> whenever possible</a>. When you use <code>let</code>, you're sending the message to other readers of the code: "I may reassign this variable in the future, so watch out, don't take its current value for granted!" Code is generally easier to read when you don't have to worry about reassignment.</p>

<p>Rather than calling <code>review.title()</code> and <code>review.amount()</code> multiple times, you can store their values into variables (which can make things clearer when you want to distinguish the current values from the previous values).</p>

<pre><code>function findReviews(notifications) {
    // Find and notify the user about new reviews.
    //
    // 1.   This is provided a fully initialized Notifications object.
    // 2.   Take data from localStorage to allow comparisions with the previous
    //      page load. This is important as otherwise the code would
    //      continuously notify users of all active reviews.
    // 3.   For each review on the page:
    //      1.  Verify if there are new reviews - comparing with the stored value.
    //      2.  Notify the user if there is a new review.
    //      3.  Update the cookie to the new value.
    // 4.   Save the new review counts in localStorage
    // 5.   Reload the page.
    const storedReviewCounts = JSON.parse(localStorage.reviewNotifications || '{}');
    for (const review of Review.findAll()) {
        const prevAmount = storedReviewCounts[review.title()] || 0;
        const reviewQueueName = review.title();
        const currentAmount = review.amount();
        console.log(reviewQueueName, prevAmount, "-&gt;", currentAmount, prevAmount &lt; currentAmount);
        if (prevAmount &lt; currentAmount) {
            notifications.notify({
                "title": currentAmount + " reviews in " + reviewQueueName,
                "icon": "https://cdn.sstatic.net/Sites/codereview/img/apple-touch-icon.png?v=0a72875519a4",
            })
        }
        storedReviewCounts[reviewQueueName] = currentAmount;
    }
    localStorage.reviewNotifications = JSON.stringify(storedReviewCounts);
    setTimeout(function () { window.location.reload(); }, 60 * 1000);
}
</code></pre>

<p>In your <code>Review</code> class, rather than using hard-to-read chained <code>.children</code>, you can use <code>querySelector</code> to select the right descendant - or, use a selector to select a child, then navigate upwards to an ancestor with <code>.closest</code>. Look at the elements you want to target in your browser tools, and figure out a <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors" rel="noreferrer">CSS selector</a> which can target it. Using the <code>.closest</code> route, you can get to an anchor like <code>&lt;a href="/review/close"&gt;Close Votes&lt;/a&gt;</code> easily, at which point it's probably easier to just extract the information directly and put it into an object than to navigate to a parent <code>object</code> and later search through it to find the child again.</p>

<p>The selector</p>

<pre><code>#content .fs-subheading [href^="/review/"]
</code></pre>

<p>will select elements:</p>

<ul>
<li>inside the element with the <code>content</code></li>
<li>inside an element with a class name of <code>fs-subheading</code></li>
<li>which have an <code>href</code> attribute which starts with <code>/review/</code></li>
</ul>

<p>From here, you can get the queue name. Then navigate to the whole right cell container, so you can get to the left cell, so you can get to the review count inside the left cell.</p>

<pre><code>function getReviews() {
    return [...$('#content .fs-subheading [href^="/review/"]')].map((reviewAnchor) =&gt; {
        const reviewQueueName = reviewAnchor.textContent;
        const rightCell = reviewAnchor.closest('.grid');
        const leftCell = rightCell.previousElementSibling;
        const count = Number(leftCell.querySelector('[title]').title.replace(/,/g, ''));
        return { reviewQueueName, count };
    });
}
</code></pre>

<p>This'll return an array of objects with a <code>reviewQueueName</code> and <code>count</code> properties.</p>

<p>It's probably not an issue for most users now that the bug has been fixed, but I habitually put <code>window</code> before <code>setTimeout</code> to avoid a <a href="https://stackoverflow.com/a/56484395">bug certain versions of Chrome had</a> when running userscripts with <code>setTimeout</code>.</p>

<p>Putting all these ideas together, and you get:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>throw new Error('Using Stack Snippet to hide large amount of repeated code. This is not runnable.');

function getReviews() {
    return [...$('#content .fs-subheading [href^="/review/"]')].map((reviewAnchor) =&gt; {
        const reviewQueueName = reviewAnchor.textContent;
        const rightCell = reviewAnchor.closest('.grid');
        const leftCell = rightCell.previousElementSibling;
        const count = Number(leftCell.querySelector('[title]').title.replace(/,/g, ''));
        return { reviewQueueName, count };
    });
}

function notifyOnNewReviews(notifier) {
    // Find and notify the user about new reviews.
    //
    // 1.   This is provided a notifier function.
    // 2.   Take data from localStorage to allow comparisions with the previous
    //      page load. This is important as otherwise the code would
    //      continuously notify users of all active reviews.
    // 3.   For each review on the page:
    //      1.  Verify if there are new reviews - comparing with the stored value.
    //      2.  Notify the user if there is a new review.
    //      3.  Update the localStorage object to the new value.
    // 4.   Save the new review counts in localStorage
    // 5.   Reload the page.
    const storedReviewCounts = JSON.parse(localStorage.reviewNotifications || '{}');
    for (const review of getReviews()) {
        const { reviewQueueName, count: currentAmount } = review;
        const prevAmount = storedReviewCounts[reviewQueueName] || 0;
        console.log(reviewQueueName, prevAmount, "-&gt;", currentAmount, prevAmount &lt; currentAmount);
        if (prevAmount &lt; currentAmount) {
            notifier({
                title: currentAmount + " reviews in " + reviewQueueName,
                icon: "https://cdn.sstatic.net/Sites/codereview/img/apple-touch-icon.png?v=0a72875519a4",
            })
        }
        storedReviewCounts[reviewQueueName] = currentAmount;
    }
    localStorage.reviewNotifications = JSON.stringify(storedReviewCounts);
    window.setTimeout(function () { window.location.reload(); }, 60 * 1000);
}

async function canNotify() {
    if (Notification.permission === 'default') {
        await Notification.requestPermission();
    }
    const { permission } = Notification;
    if (permission !== 'granted') {
        console.error(`Notifications not permitted. Permission status: ${permission}`);
        return;
    }
    return true;
}

async function makeNotifier () {
    const preferAlerts = true; // or whatever logic you want
    if (await canNotify()) {
        return notification =&gt; new Notification(notification.title, notification);
    } else if (preferAlerts) {
        return notification =&gt; alert(notification.title);
    }
    // etc
}

async function main() {
    const notifier = await makeNotifier();
    notifyOnNewReviews(notifier);
}
main();</code></pre>
</div>
</div>


<p>Works on Stack Overflow. It <em>probably</em> works here as well, but since I can't review yet, I'm not 100% sure.</p>
    </div>