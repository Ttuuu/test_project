<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>In the context of function parameter passing, char* and char[] are equivalent (because char[] decays to char*).</p>

<p>Anyway, I would rather use <code>title_case(char* s)</code> because it more clearly expresses the truth: what you really get within the function is a pointer to the first character of the array.</p></li>
<li><p>Accepting char* as string parameter implicitly suggests that the passed string will be '\0'-terminated. As you probably know, there are many known security issues with this.
If that's not the case, that means if you cannot guarantee the '\0'-ending always, consider passing the string length also, for ex.: 
<code>title_case(char* s, size_t len)</code> </p></li>
<li><p>The cast from char to int <code>(int)s[0]</code> should not be needed, because conversion from smaller to the bigger integral type is always done implicitly and should trigger no warning on any compiler I know.</p></li>
</ol>

<p>4.The strlen() in this loop <code>for(i = 1; i &lt; strlen(str); ++i)</code> is called on every iteration, so the overall complexity will be quadratic. The common practice to avoid this is to store length into a variable and then use it, like:</p>

<pre><code>size_t len = strlen(str);
for (i = 1; i &lt; len; ++i) ...
</code></pre>

<ol start="5">
<li>The more concise way with linear complexity would be something like this</li>
</ol>

<p>&gt;</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;

void title_case(char *s)
{
    if (s == NULL) return;

    for (char *p = s; *p != '\0'; ++p)
        *p = (p == s || *(p-1) == ' ') ? toupper(*p) : tolower(*p);
}

int main()
{
    char s[] = "this is some     title";
    title_case(s);
    printf("%s\n", s);
}
</code></pre>

<p>Note: In the boolean expression <code>p == s || *(p-1) == ' '</code> short-circuit evaluation capability of C/C++ is used: if p==s is true, then *(p-1) is not evaluated. Otherwise we would dereference invalid pointer -&gt; which would lead to undefined behaviour.</p>

<p><strong>Edited:</strong> Emphasize quadratic complexity issue, as proposed in comments by @sudo</p>
    </div>