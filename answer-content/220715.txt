<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice. Good use of the carry to add the 1.</p>

<p>One point. Arrays only grow from the end. <code>Array.unshift()</code> means that each item must be moved up and is <span class="math-container">\$O(n)\$</span> complexity (making the whole function approx <span class="math-container">\$O(n^{log(n)})\$</span> ) while <code>Array.push()</code> is only <span class="math-container">\$O(1)\$</span> but then you will have to reverse but would still be <span class="math-container">\$O(n)\$</span> overall.</p>

<p>You could also pre-allocate the array and slice the result array if there is no extra digit.</p>

<pre><code>function plusOne(digits) {
    var i = digits.length, carry = 1, tmp;
    const res = [];
    while (i-- &gt; 0 || carry) {
        tmp = (i &gt;= 0 ? digits[i] : 0) + carry;
        carry = tmp / 10 | 0;
        res.push(tmp % 10);
    }
    return res.reverse();
}
</code></pre>

<ul>
<li>If you must use function expressions use a <code>const</code>. Eg <code>const plusOne = function</code></li>
</ul>
    </div>