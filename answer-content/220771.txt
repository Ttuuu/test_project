<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, you code is actually bugged. <code>isDead</code> isn't checking if the age is less than zero. It's also more complicated than it needs to be. You can just return the result of the condition directly. It would be better written as:</p>

<pre><code>def is_dead(age):
    return age &lt; 0 or age &gt; 120
    # Or return not (0 &lt;= age &lt;= 120)
</code></pre>

<p>and along the same lines, the age check in <code>get_earthlings</code> could be reduced to <code>if 0 &lt;= age &lt;= 120:</code>.</p>

<hr>

<p>Storing the names and ages as two separate lists, nested inside another list is needlessly confusing. This is an example of maintaining <a href="https://stackoverflow.com/questions/5559159/what-is-meant-by-parallel-lists-in-python?lq=1">"parallel" lists</a> to maintain data, and most of the time, it should be avoided. What if you remove data from one list and forget to remove it from the other? Now you have weird bugs.</p>

<p>This is the perfect case for a class with <code>age</code> and <code>name</code> fields:</p>

<pre><code>class Earthling:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # A simple Higher Order helper method
    # Not really necessary, but a good example
    def change_age(self, f, other_num): # f is an operator
        self.age = f(self.age, other_num)

    # I flipped the check because it works out a little nicer
    def is_alive(self):
        return 0 &lt;= self.age &lt;= 120
</code></pre>

<p>Then, use it like:</p>

<pre><code>e = Earthling("Name", 10)
e.change_age(operator.sub, 20)
print(e.age) # Prints -10
print(e.is_alive()) # False
</code></pre>

<p>Or, just have a single list of tuples where the first element in the tuple is the name, and the second is the age. Just keep the data grouped together when they're a part of the same conceptual object.</p>

<hr>

<pre><code>if is_dead(new_age):
    print(earthling, "at previous age", earthlings[1][index], "(new age", str(new_age) + ") had operator '" + get_op_name(operator) + "' applied with paramater", random_value, "and died.")
else:
    print(earthling, "at previous age", earthlings[1][index], "(new age", str(new_age) + ") had operator '" + get_op_name(operator) + "' applied with paramater", random_value, "and lived.")
</code></pre>

<p>These lines contain <em>lots</em> of duplication. Whenever you see code that's identical like this in multiple places, stop and think if you can make the code simpler. If you ever need to update the code in the future, you have multiple places to change, and that's not ideal.</p>

<p>In this case, it's actually very easy to fix this up:</p>

<pre><code># Pick the status here
status_str = "lived" if e.is_alive() else "died"

# Then plug it in here
print(e.name, "at previous age", previous_age, "(new age", str(new_age) + ") had operator '"
      + get_op_name(operator) + "' applied with paramater", random_value, "and", status_str)
</code></pre>

<p>I'm picking what the status to print is ahead of time since that's the only part that changes in the two cases, then I just plug that in at the end.</p>

<p>Unfortunately, with the change to classes, this messes up maintaining the previous age. You could do something like <code>old_age = e.age</code> before changing it, or even save the old age in <code>e</code>; although the latter seems a little smelly.</p>

<hr>

<p><code>get_op_name</code> is pretty inefficient, but it doesn't really need to be efficient. That function will likely never be a performance concern, but if it ever was, you could using some form of "two-way" dictionary idea. Either maintain two dictionaries, or store both "directions" of translations in a single dictionary. Both ways suffer from the downside of having data duplicated, but since the data likely won't change during the operation of the program, that shouldn't be a big deal.</p>

<hr>

<p>For picking the random operation, I find this to be a little neater:</p>

<pre><code>random.choice(list(ops_table.values()))
</code></pre>

<p>Unfortunately, <code>values</code> doesn't return a sequence, so it needs to be converted into a list (or another sequence type) before being given to <code>choice</code>.</p>
    </div>