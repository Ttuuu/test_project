<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Optimization and restructuring</h3>

<p><code>Node</code> class constructor (<code>__init__</code> method)</p>

<ul>
<li>the arguments <code>keyParam, childrenParam</code> introduce unneeded verbosity and better named as just <strong><code>key</code></strong> and <strong><code>children</code></strong></li>
<li>the whole <code>if ... else ...</code> condition for ensuring <code>children</code> list is simply replaced with <strong><code>self.children = children or []</code></strong> expression</li>
</ul>

<hr>

<p>The initial <code>dfsWithDepth</code> function should be renamed to say <strong><code>find_max_depth</code></strong> to follow PEP8 style guide naming conventions.</p>

<p>The former parameters <code>currentDepth, currentMaxContainer</code> become unneeded. <br>Within the crucial recursive function it's worth to capture "empty" node and node with no children beforehand. That's achieved by the following condition:</p>

<pre><code>if node is None or not node.children:
    return 1
</code></pre>

<p>The remaining recursive search relies on the crucial <code>find_max_depth</code> and builtin <code>max</code> functions calls and accumulates the final <strong><em>max depth</em></strong> through traversing all subsequent sub-trees (child nodes).</p>

<p>The final optimized version:</p>

<pre><code>class Node:
    """
    Node in a tree, with children stored in a list.
    """

    def __init__(self, key, children=None):
        self.key = key  # some id of the node; not strictly required, but often needed.
        self.children = children or []


def find_max_depth(node):
    if node is None or not node.children:
        return 1
    return 1 + max(map(find_max_depth, node.children))
</code></pre>

<hr>

<p>Testing (I've added additional 5th level for demonstration):</p>

<pre><code># Construct tree
rootNode = Node('n1')
rootNode.children = [Node('n2'), Node('n3')]
tempNode = rootNode.children[0]  # n2
tempNode.children = [Node('n3'), Node('n4')]
tempNode = tempNode.children[1]  # n4
tempNode.children = [None, Node('n5')]
tempNode = tempNode.children[1]  # n5
tempNode.children = [Node('name7')]

print(find_max_depth(rootNode))   # 5
</code></pre>
    </div>