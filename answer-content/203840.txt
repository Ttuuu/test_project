<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Convolution Filter</h1>
<p>In CG this type of processing is call a <a href="https://en.wikipedia.org/wiki/Kernel_(image_processing)#Convolution" rel="noreferrer">convolution filter</a> and there are many strategies used to <a href="https://en.wikipedia.org/wiki/Kernel_(image_processing)#Edge_Handling" rel="noreferrer">handle edges</a></p>
<p>As the previous answer points out for performance you are best to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" rel="noreferrer">typed arrays</a> and avoid creating arrays for each cell you process.</p>
<p>In your example</p>
<blockquote>
<pre><code>for (let i = 1; i &lt;= kernelSize; i++) {
    adjacentValues = adjacentValues.concat(this._getAdjacentValues(row, col, i, grid));
}
const average = adjacentValues.reduce((a, b) =&gt; a + b, 0) / adjacentValues.length;
</code></pre>
</blockquote>
<p>You can do the reduce in the loop you create the sub array in, and avoid the 9 new arrays you create and the need to iterate again.</p>
<p>Example substitute value at edges.</p>
<pre><code>const edgeVal = 0;
var val, sum = 0;
for (let i = 0; i &lt; 9; i++) {
    val = grid[row + (i / 3 | 0) - 1];
    if (val !== undefined) {
         val = val[col + (i % 3) - 1];
         sum += val !== undefined ? val : edgeVal;
    } else {
         sum += edgeVal;
    }
}
const average = sum / 9;
</code></pre>
<p>Or ignore edges</p>
<pre><code>var val;
var sum = 0;
var count = 0;
for (let i = 0; i &lt; 9; i++) {
    val = grid[row + (i / 3 | 0) - 1];
    if (val !== undefined) {
         val = val[col + (i % 3) - 1];
         if (val !== undefined) {
            sum += val;
            count ++;
         }
    }
}
const average = sum / count;
</code></pre>
<p>Better yet, work on flattened arrays to avoid the double indexing for 2D arrays, and create the result array at the start rather than pushing to it each cell.</p>
<h2>Workers</h2>
<p>Convolution filters are ideally suited for parallel processing with an almost <code>n / p</code> performance increase (n is number of cells, p is number of processing nodes).</p>
<p>Using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" rel="noreferrer">web workers</a> on a i7 4 core (8 virtual cores) can give you a 8 times performance increase (On chrome (maybe others) you can get a core count at <code>window.clientInformation.hardwareConcurrency</code>)</p>
<p>Attempting to use more workers than available cores will result in slower processing.</p>
<h2>GPU</h2>
<p>For the ultimate performance the GPU, via webGL is available and will provide realtime processing of very large data sets (16M and above), A common non CG use is processing layers in convolutional neural network.</p>
<p>An example of a <a href="https://webglfundamentals.org/webgl/lessons/webgl-image-processing.html" rel="noreferrer">convolution filter</a> (About halfway down the page) using webGL can easily be adapted to most data types, however doubles will only be available on a small number of hardware setups.</p>
    </div>