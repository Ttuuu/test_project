<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Main remarks</strong></p>

<ol>
<li><p><em>Use the existing <code>Comparator</code> abstraction</em></p>

<p>If you're solving a problem for comparisons, make a <code>Comparator</code>. Instead of having a method that compares <code>Date</code> instances on some util class, have a method there that returns a <code>Comparator</code> instead. Or even, make a standalone <code>Comparator</code> class. In this case, don't forget to document that it's not consistent with <code>equals()</code>.</p></li>
<li><p><em>Don't forget about time zones</em></p>

<p>If you want to do calendar operations on a <code>Date</code> (and yes comparing by day is just that), then make sure you think about time zones. As it is, your code just takes the server's default time zone (which may be fine for your use case). It's just better to make this explicit, which also makes this more reusable and easier to test. </p>

<p>Why is <code>TimeZone</code> important for calendar operations? Well since a single <code>Date</code> instance can fall on different calendar days depending on the <code>TimeZone</code>. If you have users in different time zones, they'll expect their entered dates to be interpreted vs. the time zone they're in.</p></li>
<li><p><em>Use the right tool for the job: <code>java.util.Calendar</code></em></p>

<p>Using <code>SimpleDateFormat</code> is clever, but it's just not the tool for the job. Use <code>Calendar</code>. The <code>SimpleDateFormat</code> class will be making a <code>Calendar</code> under the hood anyway, it will just also have to figure out formating it, and then after all the formatting, you'll just convert it to a number, while <code>Calendar</code> already has the numbers you need to compare.</p></li>
</ol>

<p><strong>Minor remarks</strong></p>

<ol>
<li><p><em>String is <code>Comparable</code> too</em></p>

<p>Your conversion from <code>String</code> to <code>Long</code> is unnecessary, you could have compared the Strings directly. The format you use yields <code>String</code>s that have the same ordering as the respective <code>Long</code> instances.</p></li>
<li><p><em>Use primitives whenever possible</em></p>

<p>If you did want to use numbers then prefer primitives if possible. <code>Long.parseLong()</code> and <code>Long.compare()</code> could help you avoid the boxes.</p></li>
</ol>

<p><strong>Example code</strong></p>

<pre><code>public static Comparator&lt;Date&gt; byDayComparator(final TimeZone timeZone) {
    return new Comparator&lt;Date&gt;() {
        @Override
        public int compare(Date date1, Date date2) {
            return truncateToDay(date1).compareTo(truncateToDay(date2));
        }

        private Date truncateToDay(Date date) {
            Calendar calendar = Calendar.getInstance(timeZone);
            calendar.setTime(date);
            calendar.set(Calendar.HOUR_OF_DAY, 0);
            calendar.set(Calendar.MINUTE, 0);
            calendar.set(Calendar.SECOND, 0);
            calendar.set(Calendar.MILLISECOND, 0);
            return calendar.getTime();
        }
    };
}
</code></pre>
    </div>