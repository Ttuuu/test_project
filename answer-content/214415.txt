<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the good news: your code looks pretty good. It's indented properly, spelled properly, spaced properly, capitalized properly, and uses the right Python style. Good work!</p>

<p>Here are a couple of nits:</p>

<ol>
<li><p>This is a "program." (As opposed to just a module, or package, or library.) So use the standard python idiom for programs at the bottom:</p>

<pre><code>if __name__ == '__main__':
    Main.get_longest_word("abppplee", {"ale", "bale", "able", "apple", "kangaroo"})
</code></pre>

<p>This mechanism is to allow your code to be loaded (via <code>import myprogram</code>) without having the main entry point automatically get invoked. That lets you load it up in the interpreter and browse around before you call it.</p></li>
<li><p>Use docstrings! Write down the problem you are trying to solve, and any notes about inputs or outputs for functions. Especially data formats.</p>

<p>For coding puzzle type problems, the docstring is a great place to copy the puzzle specification. This lets you refer back to it, lets you remember what you were doing when you wrote this code, and lets you paste it up at CodeReview with ease!</p>

<pre><code>#!/usr/bin/env python3
""" Given a string S and a set of words D, find the longest word in D that is a subsequence of S.

    Word W is a subsequence of S if some number of characters, possibly zero, can be deleted from S to form W, without reordering the remaining characters.

    Note: D can appear in any format (list, hash table, prefix tree, etc.)

    For example, given the input of S = "abppplee" and D = {"able", "ale", "apple", "bale", "kangaroo"} the correct output would be "apple".

      - The words "able" and "ale" are both subsequences of S, but they are shorter than "apple".
      - The word "bale" is not a subsequence of S because even though S has all the right letters, they are not in the right order.
      - The word "kangaroo" is the longest word in D, but it isn't a subsequence of S.
"""
</code></pre></li>
</ol>

<p>Now here are some possible improvements:</p>

<h3>In <code>create_dictionary</code></h3>

<pre><code>def create_dictionary(string):
    dictionary = {}
    index = 0

    for letter in string:
        if letter in dictionary:
            dictionary[letter].append(index)
        else:
            dictionary[letter] = [index]
        index += 1
    return(dictionary)
</code></pre>

<p>First, congratulations! You have written the hand-coded version of how to manage a dictionary whose values are lists. You got it right, your code works, and you should <em>never do that again</em> because it's boring. Instead, use <a href="https://docs.python.org/3/library/collections.html?highlight=collections%20defaultdict#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict(list)</code></a>. A <code>defaultdict</code> remembers a <strong>factory function</strong> that it will call whenever it is asked about a <strong>key</strong> but doesn't have a corresponding <strong>value.</strong></p>

<p>The word <code>list</code> is not just the name of a Python data type, it's also the function to call when you want to construct one! (Just like you use the name of every class as it's constructor:  <code>my_obj = MyClass(1, 2, "hello")</code>) So when you want a dictionary that looks up lists, it's much easier to assume that there will always be a list in the dictionary, but it might be empty. That's what <code>defaultdict(list)</code> will get you:</p>

<pre><code>import collections  # somewhere at top of file

def create_dictionary(s):
    dictionary = collections.defaultdict(list)
    index = 0

    for letter in string:
        dictionary[letter].append(index)    # defaultdict FTW!
        index += 1
    return(dictionary)
</code></pre>

<p>Next, give up your love affair with integers! Ned Batchelder gave a nice talk on the subject, so here's a link to that: <a href="https://www.youtube.com/watch?v=EnSu9hHGq5o" rel="noreferrer">https://www.youtube.com/watch?v=EnSu9hHGq5o</a>  </p>

<p>The idea is that many (most?) python loops don't need to use integers to index over things. And when you <em>do</em> need an integer index (and in this case you do!) there are better ways than maintaining your own integer index variable. Here's one such way: the <a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate" rel="noreferrer"><code>enumerate()</code></a> built-in function.</p>

<p>With enumerate, you can write a loop that iterates over the values from some iterable along with an automatically-associated integer:</p>

<pre><code>    # No index=0 here
    for index, letter in enumerate(string):
        dictionary[letter].append(index) 
        # No index+=1 here!
</code></pre>

<p>The <code>index, string</code> pair is called a <a href="https://docs.python.org/3/library/stdtypes.html?highlight=tuple#tuple" rel="noreferrer"><code>tuple</code></a>, and it is a built-in type just like <code>list</code>. The act of assigning or iterating using multiple target variables that take their values from a single tuple is called <strong>tuple unpacking</strong>. (Remember that phrase, you'll need it when you want to ask for help on the subject.)</p>

<h3>In <code>get_longest_word</code></h3>

<p>The issue I have with this function is not one of Python, but rather of design. You are given some words, <code>d</code>. You want to find the longest word that is a subsequence of the string <code>s</code>. How do you do it?</p>

<p>In your case, the answer is "look at <strong>every single word</strong> in <code>d</code>, ignore the ones that are not subsequences of <code>s</code>, pick the longest one that remains."</p>

<p>There are a couple of better (read: faster, more efficient) ways of doing that job. Let me make one simple suggestion: sort the words!</p>

<p>In Python, there are <strong>Iterables</strong> and <strong>Sequences</strong>. An iterable is something you can iterate. A sequence is something you can access using <code>s[i]</code>. It's possible to have an infinite iterable, by writing an infinite generator function. It's not possible to have an infinite sequence, since you'll run out of memory trying to store it.</p>

<p>In <em>this particular case</em> it seems okay to assume that <code>d</code> is going to be a sequence: a finite list or tuple. So the fastest way to find the "longest word" is to start by looking at long words first. Because once you find a long word that is a subsequence, you can stop - there are no shorter ones!</p>

<p>The way to sort things in Python is the <a href="https://docs.python.org/3/library/functions.html?highlight=sorted#sorted" rel="noreferrer"><code>sorted</code></a> built-in function. (Yes, it takes an iterable. No, it won't sort an infinite one. Yeesh!) By default, it sorts things by comparing the items using the "native" comparison. You can specify a <code>key</code> function, however, to sort using some different mechanism. Let's use the length of the words, which is the <code>len</code> function
(function <code>len(x) -&gt; int</code> returns the length of the list/string/whatever). And let's reverse the order, so that the big ones come first:</p>

<pre><code>d = sorted(d, key=len, reverse=True)
</code></pre>

<p>Now, instead of needing to check the length and update the longest-word-so-far variable, you can just return immediately once you find a subsequence.</p>

<h3>In <code>get_word_is_substring</code></h3>

<p>Let's talk about default values. You say:</p>

<pre><code>index_of_last_letter_found = None
</code></pre>

<p>But <code>:! grep letter_found %</code> in Vim tells me:</p>

<pre><code>    index_of_last_letter_found = None
        if letter in dictionary and (index_of_last_letter_found is None or dictionary[letter][-1] &gt; index_of_last_letter_found):
                if index_of_last_letter_found is None or index_of_last_letter_found &lt; dictionary[letter][index]:
                    index_of_last_letter_found = dictionary[letter][index]
</code></pre>

<p>You're spending a lot of keystrokes checking for <code>None</code>. And all you do is compare using <code>&lt;</code>, and assign new values. Why not just set the default value to some value that you know is going to be "too low"? Since string index values start at 0, maybe -1 would make sense:</p>

<pre><code>index_of_last_letter_found = -1
</code></pre>

<p>While were at it, shorten that variable name. Names should be as long as they need to be, <em>and no longer!</em></p>

<pre><code>def get_word_is_substring(word, dictionary):
    last_index = -1  # Index of last letter found

    for letter in word:
        if letter in dictionary and dictionary[letter][-1] &gt; last_index:
            index = 0
            while index &lt; len(dictionary[letter]):
                if last_index &lt; dictionary[letter][index]:
                    last_index = dictionary[letter][index]
                    break
                else:
                    index += 1
        else:
            return False
    return True
</code></pre>

<p>That's a lot more readable, since there are fewer tests and fewer characters.</p>

<p>Next, let's go back and work on your fetish for simple integer arithmetic. Now that you've watched Ned Batchelder's talk, you can see that <code>index += 1</code> is not the way!</p>

<pre><code>for index in dictionary[letter]:
    if last_index &lt; index:
        last_index = index
        break
</code></pre>

<p>(There are some other ways to find the first element in an iterable that matches a condition. See <a href="https://stackoverflow.com/questions/2361426/get-the-first-item-from-an-iterable-that-matches-a-condition">here</a> for many of them. But this is nice and clear, and works.)</p>

<p><strong>Some words on "style"</strong></p>

<p>The above code may be somewhat more difficult to understand because I changed the meaning of <strong>index</strong>. In your original code, <code>index</code> was an index into the list of indices that pointed to where letters occur in the master sequence. In my updated version <code>index</code> means the actual indices from the list. I have removed one level of indirection.</p>

<p>This is an example of why "too short" variable names are actually a good thing. You'll find a lot of people use very small names, like <code>ch</code> or <code>i</code>, to represent loop variables. This is because most of the time, loop variables are not a "concept" or a "noun". Instead, they are a subscript. We write <code>a[i]</code> because the original Teletype devices hand-carved out of wood by our pioneer forbears would not allow writing 𝓐ᵢ.</p>

<p>But we don't really <em>care</em> about <code>i</code>, or about <code>a[i]</code>. We care about the thing stored there, and its properties. So, I encourage you to use short little 1-letter and 2-letter names when you are indexing a sequence, or when you're stuck in some other language that doesn't provide the nice looping options that Python does. Then you could say:</p>

<pre><code>for i ...
    index = s_dict[letter][i]
</code></pre>

<p>And there would be no confusion between <code>index</code> and that-loop-variable.</p>

<p>Next, the structuring of your escape clauses: I see a lot of people being taught to code in a way that puts exit conditions last. You're doing that in your loop:</p>

<pre><code>    for letter in word:
        if letter in dictionary and dictionary[letter][-1] &gt; last_index:
            # much code here
        else:
            return False
</code></pre>

<p>But moving the exit condition to the top (by reversing the sense of the <code>if</code> statement) makes it clear what the alternatives are (if this is true, leave, otherwise ...) and reduces the indentation level of your code (by removing the <code>else</code> indent). Some people would have you use two-space tabs to address the indentation problem. Those people are all young with good eyesight. They're also quite wrong. :-)</p>

<pre><code>    for letter in word:
        if letter not in dictionary or dictionary[letter][-1] &lt;= last_index:
            return False

        # much code here
</code></pre>

<p>Lastly, there's the name. You called it <code>get_word_is_substring</code>, but we want <em>subsequences</em> not substring, and there's no reason to say <code>get_</code> at the beginning. In fact, the <code>word</code> can be assumed, since you're passing it in, so:</p>

<pre><code>def is_subsequence(word, s_dict):
    last_index = -1  # Index (in s) of last letter found

    for letter in word:
        if letter not in s_dict or s_dict[letter][-1] &lt;= last_index:
            return False

        for index in s_dict[letter]:
            if last_index &lt; index:
                last_index = index
                break

    return True
</code></pre>

<p>(Note: Because I suggested <code>s_dict</code> be a <code>defaultdict</code>, you could eliminate the <code>if</code> test entirely and rely on the <code>for ... else</code> construct, which is <a href="https://docs.python.org/3/tutorial/controlflow.html?highlight=statement#break-and-continue-statements-and-else-clauses-on-loops" rel="noreferrer">rather obscure.</a> I don't recommend it, simply because it's non-intuitive, hard to understand, and because spelling out the failure conditions is better than leaving them to the language. ("explicit is better than implicit"))</p>

<h3>The class</h3>

<p>Finally, let's talk about the class:</p>

<pre><code>class Main:
</code></pre>

<p>But first! Here's another video for you to watch, Jack Diederich's talk at Pycon 2012 entitled: "Stop Writing Classes!": <a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="noreferrer">https://www.youtube.com/watch?v=o9pEzgHorH0</a></p>

<p>As Jack says, "The signature of 'this shouldn't be a class' is that it has two methods, one of which is <code>__init__</code>."</p>

<p>In this case, you've created a class, but you don't store any data and you only call one method from the outside. It should be a function.</p>
    </div>