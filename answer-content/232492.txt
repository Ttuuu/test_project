<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Keeping references to potentially dangling pointers</h3>

<p>I can see a potential problem with the line</p>

<pre><code>vertices[ver.first].parent = &amp;vertices[curr_vertex];
</code></pre>

<p>if the <code>std::vector&lt;Vertex&gt; vertices</code> would be reorganised due to changes in length.
The address you take there isn't stable.</p>

<p>Maybe a better solution would be to keep a </p>

<pre><code>std::vector&lt;std::unique_ptr&lt;Vertex&gt;&gt; vertices;
</code></pre>

<p>instead of keeping copies of the <code>Vertex</code> instances.</p>

<p>Then you can change </p>

<pre><code>vertices[ver.first].parent = &amp;vertices[curr_vertex];
</code></pre>

<p>to</p>

<pre><code>vertices[ver.first].parent = vertices[curr_vertex].get();
</code></pre>

<p>Since all the vertices are in private scope of the <code>Graph</code> class the <code>std::unique_ptr&lt;Vertex&gt;</code> instances stored to the <code>vertices</code> vector will never invalidate, as long you guarantee to remove all child <code>Vertex</code> instances when a parent <code>Vertex</code> instane is removed from the graph (Well, that's not an operation in question here, but needs to be considered for production code).</p>

<h3>2. Inconsistent error handling</h3>

<p>Here</p>

<pre><code>else
{
    std::cerr &lt;&lt; "Negative weight\n";
}
</code></pre>

<p>you just use kind of errorneous input being reported to the console, while you throw exceptions for other cases.</p>

<p>For this condition you should rather do</p>

<ul>
<li>throwing an exception</li>
<li>applying an <code>assert()</code> call in 1st place</li>
<li><p><strong>clarify from the function signature</strong></p>

<p>If <em>Negative weight</em> is erroneous input you should make that clear in 1st place:</p>

<pre><code>  void Graph::add_edge(std::size_t src , std::size_t dest, unsigned weight)
                                                        // ^^^^^^^^
</code></pre>

<p>This way violations would be covered by the compiler, before runtime detects that flaw.</p></li>
</ul>

<h3>3. Storing unnecessary information</h3>

<p>In your code example <code>parent</code> is never used besides storing the information. I am aware that you might have been simplified the actual usage of <code>parent</code> with this review question, but with the code context you give, that member variable doesn't make any sense.</p>
    </div>