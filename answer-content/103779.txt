<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple remarks on the benchmark itself:</p>

<ul>
<li>It is much too short. On my machine, it ends in approx 30 microseconds, with large variations between runs. You need to run your function more times to eliminate noise and to make sure you're well over whatever clock resolution your timer has.</li>
<li>It is timing I/O, which you really don't want. I/O is slow and irregular. Unless that's specifically what you want to measure, make sure your tests do no I/O. e.g. I ran your code with 1 million iterations:

<ul>
<li>With the output in the tested function: ~2.4s</li>
<li>Without the output: ~0.6s</li>
</ul></li>
</ul>

<p>So increase the number of iterations, and remove all output from your function - it should have a way of returning what it found or signaling an error if it failed.</p>

<p>For the performance aspect, <code>std::function</code> has a drawback: there's pretty much no way for the compiler to do inlining, and the call can be more expensive than a plain function call (I'm not familiar with the details of <code>std::function</code>, but you'll find a lot of relevant info but searching for "std::function performance" or "overhead"). Whether that matters or not depends on the specific piece of code of course, but it does appear to matter here.</p>

<p>What you can try is using a template instead. The modification is very simple: change the signature from</p>

<pre><code>void brents_fun(std::function&lt;double (double)&gt; f, ...)
</code></pre>

<p>to</p>

<pre><code>template &lt;typename Func&gt;
void brents_fun(Func f, ...)
</code></pre>

<p>(And move the whole definition into a header while you're at it.)</p>

<p>On my machine, after having removed the output from the function and again for one million runs, this reduces the execution time from ~0.61s to ~0.48s - not huge, but not just line-noise either.</p>

<p>That's all I have on that front, hopefully someone else will chime in with other improvements.</p>

<hr>

<p>Coding style looks good to me, applied consistently. Variable names are a bit cryptic but that's due to following the pseudo-code in the article. I wouldn't change them.</p>

<p>One thing I would change is the spacing in your function calls, e.g.</p>

<pre><code>std::swap(a,b);
brents_fun(f,a,b,TOL,MAX_ITER);
</code></pre>

<p>to</p>

<pre><code>std::swap(a, b);
brents_fun(f, a, b, TOL, MAX_ITER);
</code></pre>

<hr>

<p>The "loop" in <code>main</code> is very very strange. If you need to do three different things one after the other, using a loop is a strange idea. Just call your three tests, the loop and <code>if</code> are just noise. Go back to a loop version if you put your test "parameters" in a vector.<br>
You can use anonymous block if you want to isolate each test though.</p>

<pre><code>{
  double a = -1.5;
  double b = 0;
  auto f = [](double x){ return (x+1) * (x+2) * (x+3); };
  brents_fun(f,a,b,TOL,MAX_ITER);
}
{
  double a = -10;
  double b = 10;
  auto f = [](double x){ return (x*x*x -4*x - 9); };
  brents_fun(f,a,b,TOL,MAX_ITER);
}
</code></pre>

<p>If you do keep a loop, declare the loop variable inside the <code>for</code> itself, and take the habit of starting at <code>0</code>. (Array indexes are 0-based in C++ and quite a few other languages).</p>

<pre><code>for (int test = 0; test &lt; 3; ++test) { ... }
</code></pre>

<p>(Or use the <code>for (element: container)</code> form if you get the parameters in a container.)</p>
    </div>