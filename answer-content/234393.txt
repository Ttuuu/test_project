<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just to tell you upfront, your code looks good, is easy to read and everything is well named. But it can be improved nevertheless.</p>

<p>First thing, <code>public</code> methods should always validate its method arguments. Passing <code>null</code> would lead to a nasty <code>NullReferenceException</code> at the start of the most outer <code>foreach</code> loop.  </p>

<p>I would suggest making the <code>constants</code> a class level variable being filled in the constructor, because the types won't usually change while your code is running.  </p>

<p>By restricting <code>FieldType</code> of the <code>constants</code> to <code>KeyValuePair&lt;string, string&gt;</code> will eliminate the <code>if</code> inside the most inner loop and will limit the <code>constants</code> to a smaller number.  </p>

<p>Omitting braces <code>{}</code> although they may be optional can be dangerous because it may lead to hidden and therfor hard to find bugs. I would like to encourage you to use them.</p>

<p>Implementing the mentioned points will look like this  </p>

<pre><code>private readonly List&lt;FieldInfo&gt; constants = new List&lt;FieldInfo&gt;();
public ctor()
{
    constants.AddRange(typeof(AuthConsts).GetFields());
    constants.AddRange(typeof(ClientConsts).GetFields());
    constants.AddRange(typeof(ContactConsts).GetFields());
    constants.AddRange(typeof(AddressConsts).GetFields());
    constants.AddRange(typeof(ReferenceConsts).GetFields());
}

public List&lt;BindDto&gt; GenerateBinds(IEnumerable&lt;Form&gt; forms)
{
    if (forms == null) { throw new ArgumentNullException(nameof(forms)); }

    var neededType = typeof(KeyValuePair&lt;string, string&gt;);
    var binds = new List&lt;BindDto&gt;();
    var keyValueConstants = constants.Where(c =&gt; c.FieldType == neededType);

    foreach (var form in forms)
    {
        var formResponses = form.response.ToObject&lt;Dictionary&lt;string, string&gt;&gt;();

        IEnumerable&lt;string&gt; formFields = formResponses.Keys;

        foreach (var field in formFields)
        {
            foreach (var constant in keyValueConstants)
            {
                var templateString = (KeyValuePair&lt;string, string&gt;)constant.GetValue(this);

                if (templateString.Key == field)
                {
                    binds.Add(new BindDto(templateString.Value, formResponses[field]));
                }
            }
        }
    }

    return binds;
}
</code></pre>
    </div>