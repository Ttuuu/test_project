<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's simpler to write an iterative solution.</p>

<p>A recurrence relation is required to rotate/calculate new positions after each execution, but we can use a <em>queue</em> to take care of the positions.</p>

<p>Like this:</p>

<pre><code>function josIterative(n, k) {
let queue = [];
for (let i = 1; i &lt;= n; i++) queue.push(i);

let deathOrder = [];

while (queue.length !== 1) {
    for (let skip = 1; skip &lt; k; skip++) queue.push(queue.shift());
    deathOrder.push(queue.shift());
}

console.log("Death order is " + deathOrder.join(" "));
return queue[0]; //survivor
}

console.log(josIterative(7, 3) + " is survivor");
</code></pre>
    </div>