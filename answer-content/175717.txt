<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're essentially copying <a href="http://en.cppreference.com/w/cpp/algorithm/copy" rel="noreferrer"><code>copy_if</code></a> with some additional debug messages. One can rewrite your code with</p>

<pre><code>std::copy_if(all_items.begin(), all_items.end(), std::back_inserter(filter_items),
             [&amp;bad_ids](const mystruct&amp; item)
{
     return std::find(bad_ids.begin(), bad_ids.end(), item.id) == bad_ids.end();
});
</code></pre>

<p>But that's not necessarily more efficient, because <code>copy_if</code> and <code>remove_copy_if</code> are usually implemented as</p>

<pre><code>for(; first != last; ++first) {
    if(predicate(*first)){     // copy if; remove_copy_if would negate
        *result = *first;
        result++;
    }
}
</code></pre>

<p>A more efficient way would be a faster predicate, e.g. instead of <code>find(bad_idsâ€¦)</code> you could use</p>

<pre><code>for(const auto &amp; item : all_items) {
    if(item.id &lt; 151 || 152 &lt; item.id) {
        filtered_items.push_back(item);
    }
}
</code></pre>

<p>But that's not as flexible anymore. That being said, we're talking about a small code snippet. As always, you should measure the time your code needs. And in this case, the output by <code>cout</code> will most likely take the most time.</p>

<p>For now, use the variant that you understand best. Your code is fine, there's not much one can improve at that point without resorting to personal preference because it's too short.</p>

<p>By the way, I would call <code>filter_items</code> <code>filter<strong>ed</strong>_items</code> instead, since it doesn't actually filter items. It is a <code>std::vector</code> of items that have been filter<strong>ed</strong>.</p>
    </div>