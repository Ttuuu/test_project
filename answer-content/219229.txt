<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview! And welcome to coding! Publishing and reviewing your code is
one of the best ways to get better at coding. And we're going to make you better, no matter how much it hurts. ;-)</p>

<p>First, congratulations! You've written a fair amount of code in a single project, and you managed to produce a somewhat complex app, with graphics, alternative input, event handling, etc. This is a pretty ambitious first project.</p>

<p>I have some suggestions about the organization and structure, and the coding style.</p>

<h2>Organization and Structure</h2>

<h3>Modules</h3>

<p>You have too many modules. A good starting rule for breaking code into different modules is this: always put everything in one file. By the time you need to break that
rule, you'll know what and how and when to break it. For now, you don't need to break it -- just put everything into <code>calculadora.py</code>.</p>

<p>On a side note, the fact that you were importing a module at the <em>bottom</em> of one of
your files instead of at the top is a sign that you should merge the modules together if possible. Needing to do that kind of thing should set off your internal alarms
that something is wrong.</p>

<h3>Functions</h3>

<p>There are three good reasons to create a function: (1) to standardize operations that you perform more than one time; (2) to "abstract away" low-level operations to a separate layer; (3) to isolate a valuable operation for re-use.</p>

<p>Reason #3 is generally rare. But you aren't doing enough of #1 and #2. Consider this:</p>

<pre><code>root = tk.Tk()
root.geometry("640x640")
visor = frame_display.DisplayContainer(root)
numeros = frame_botoes.ButtonsContainer(root)
root.mainloop()
</code></pre>

<p>The first four lines of that block "create the application". The fifth line "runs the application". You might put that in a class, if you have learned classes yet. Otherwise, just put that into two functions:</p>

<pre><code>app = create_application()
run_application(app)
</code></pre>

<p>Or consider this code:</p>

<pre><code>self.button_1 = tk.Button(self, text="1", padx=button_padx, pady=button_pady, command=lambda: calculadora.pressNumber(1))
self.button_2 = tk.Button(self, text="2", padx=button_padx, pady=button_pady, command=lambda: calculadora.pressNumber(2))
self.button_3 = tk.Button(self, text="3", padx=button_padx, pady=button_pady, command=lambda: calculadora.pressNumber(3))
self.button_4 = tk.Button(self, text="4", padx=button_padx, pady=button_pady, command=lambda: calculadora.pressNumber(4))
</code></pre>

<p>There are more lines of this (5..0), but these four are enough to make the point: this is a repeated operation and could be a function!</p>

<p>What's more, these lines appear lower down:</p>

<pre><code>self.button_1.grid(row=0, column=0, sticky="nswe")
self.button_2.grid(row=0, column=1, sticky="nswe")
self.button_3.grid(row=0, column = 2, sticky="nswe")
self.button_4.grid(row=1, column=0, sticky="nswe")
</code></pre>

<p>These lines are "in parallel" with the button creation lines above. So they could be part of the same method. Let's try:</p>

<pre><code>def make_button(self, text, row, column):
    new_button = tk.Button(self, text=text, padx=self.BUTTON_PADX, pady=self.BUTTON_PADY,
                           command=lambda: press_button(text))
    new_button.grid(row=row, column=column, sticky=self.BUTTON_STICKY)
    self.buttons.append(new_button)
</code></pre>

<p>Then you could replace a lot of that text with something like:</p>

<pre><code>self.make_button('1', 0, 0)
self.make_button('2', 0, 1)
self.make_button('3', 0, 2)
self.make_button('4', 1, 0)
self.make_button('5', 1, 1)
</code></pre>

<h3>Pro-tip: Visual Organization</h3>

<p>When you're writing code, it's important to communicate to the <em>next guy</em>
what you are trying to do. Sometimes the next guy is "future you" who will be reading this a year from now. Sometimes the next guy is another junior developer that will take over your project when you get promoted. But there's almost always going to be a "next guy" and your code is really written for him or her, more than for the compiler.</p>

<p>One trick you can use is to visually organize things. Then you will write code that "decodes" the visual organization. It's worth spending 15 minutes to make life easy for yourself, or for the next guy. Things like putting configuration into a docstring and parsing the string instead of putting 10 different values in separate quotation marks.</p>

<p>You could do something like this:</p>

<pre><code>button_layout = """
    1 2 3 +
    4 5 6 -
    7 8 9 *
    ( 0 ) /
    CCC . =
""".strip('\n').splitlines()

for row, line in enumerate(button_layout):
    extra_col = 0

    for col, ch in enumerate(line.split()):
        if ch == 'CCC':
            self.make_clear_button(row, col)
            extra_col = 1
        else:
            self.make_button(ch, row, col + extra_col)

self.num_rows = row + 1
self.num_cols = col + 1
</code></pre>

<p>This would let you visually arrange the keys in different shapes, and the code would "figure out" where to put the buttons, and how many rows and columns were present.</p>

<p>Note that doing this provides <em>absolutely no value</em> to your program. The buttons are going to be created no matter what. But it lets you explore different shapes for the window just by moving characters around, and it lets the "next guy" see and understand how the buttons are arranged in a way that 30+ lines of <code>row=3, col=0 ... row=4, col=2</code> just cannot do.</p>

<h2>Coding Style</h2>

<h3>PEP-8</h3>

<p>The official Python coding style document is <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. You may have learned a different style from reading code written in Java or some other language. But you're going to be considered "out of spec" if you deviate from PEP-8.</p>

<p>That said, PEP-8 contains a lot of good advice for beginning coders. It's a fairly well-reasoned document, with just a few things that are totally wrong (IMO). But I
ignore those things in favor of having a common standard, and you should too. Conform!</p>

<p>To quickly summarize:</p>

<ul>
<li><p>Use <code>snake_case</code> for all names except classes. Classes are <code>PascalCase</code> just like every other language.</p></li>
<li><p>Use <code>ALL_CAPS</code> for "constants". If a class or object has an all-caps attribute,
then it's a class constant or an object constant. If a module has an all-caps variable at the top, it's a module constant. This despite the fact of <code>math.pi</code> and <code>math.e</code> and <code>math.tau</code>. "Do as we say, not as we do." :-)</p></li>
</ul>

<h3>Importing names</h3>

<p>You can import names from a module using <code>from module import name</code>. Or you can import a module and refer to <code>module.name</code> instead. You should choose the style based on
clarity and frequency of use.</p>

<p>For some reason, you do this:</p>

<pre><code>from tkinter import Frame
from tkinter import StringVar
</code></pre>

<p>Then you make use of <code>Frame</code> and <code>StringVar</code> 4 + 1 times, respectively. On the other hand, you <em>don't</em> import <code>Button</code> but refer to <code>tk.Button</code> 25 times!</p>

<p>I suggest that your default should be to not import any names explicitly, and to prefer to spell out the <code>module.name</code> form. It's okay to abbreviate the module name, which you do (<code>tkinter</code> -&gt; <code>tk</code>):</p>

<pre><code>import tkinter as tk

class DisplayContainer(tk.Frame):
    def __init__(...):
        ...
        self.text_display = tk.StringVar()
</code></pre>

<p>Then if you find yourself repeating <code>tk.Button</code> 25 times (which you should not: see
the note about functions above) you can do an additional import of that one name. Or you could just stash it in a local variable if every occurrence is within the same
function:</p>

<pre><code>button = tk.Button
this = button(...)
that = button(...)
another = button(...)
</code></pre>

<h3>Comments</h3>

<p>If your comment says in English (or Portuguese!) the same thing the code says in Python, delete the comment.  Don't do this:</p>

<pre><code># Call ButtonsContainer widgets creation
self.createWidgets()
</code></pre>

<p>Comments should explain:</p>

<ul>
<li><p>Details that come from the problem domain</p>

<pre><code># Per tax code, deduction does not apply if children &gt; 12 yrs old
</code></pre></li>
<li><p>Code constructs that are particularly dense or complex (particularly: nested comprehensions in Python)</p>

<pre><code># Flatten list-of-lists, ignoring short names.
all_planets = [planet for sublist in planets for planet in sublist if len(planet) &lt; 6]
</code></pre></li>
<li><p>Things that are not obvious from the code, including side effects.</p>

<pre><code># Note: this call flushes stdout
</code></pre></li>
<li><p>Things that are missing.</p>

<pre><code># Note: NOT calling end_row() here!
</code></pre></li>
</ul>
    </div>