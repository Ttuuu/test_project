<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Like the other answers before mine, the problem is about big values of exp n. If you took pen and paper and try for example to multiplicate 1331 (<span class="math-container">\$11^3\$</span>) and 11 to obtain number 14641 (<span class="math-container">\$11^4\$</span>) you do in this way:</p>

<pre><code> 1331 x 
   11
-------
 1331 +
1331
-------
14641
</code></pre>

<p>So basically if you have <span class="math-container">\$11^n\$</span> and you want to calculate <span class="math-container">\$11^{n+1}\$</span> it can be calculated with the sum of the <span class="math-container">\$11^n\$</span> and <span class="math-container">\$11^n * 10\$</span>. To avoid problem due to the dimensions of numbers you can write the the numbers with strings. In the case of number 1331 we can use sum the strings <code>01331</code> and <code>13310</code> and calculate string <code>14641</code>.</p>

<p>I defined a class called <code>PowerOfEleven</code> and a main method containing the tests below:</p>

<pre><code>public class PowerOfEleven {
    private static String ELEVEN = "11";
    private static String ZERO = "0";
    private static String ONE = "1";

    public static void main(String[] args) {
        assertEquals(calculatePower(0), "1");
        assertEquals(calculatePower(1), "11");
        assertEquals(calculatePower(2), "121");
        assertEquals(calculatePower(3), "1331");
        assertEquals(calculatePower(4), "14641");
        assertEquals(calculatePower(5), "161051");
        assertEquals(calculatePower(6), "1771561");
    }
}
</code></pre>

<p>The method <code>calculatePower</code> calculates for every n the number <span class="math-container">\$11^n\$</span> using the sum of strings like when you use pen and paper:</p>

<pre><code>public static String calculatePower(int n) {
    if (n == 0) { return ONE; }
    String number = ELEVEN ;
    for (int i = 1; i &lt; n; ++i) {
        String first = ZERO  + number;
        String second = number + ZERO;
        number = sum(first, second);
    }
    return number;
}
</code></pre>

<p>I'm adding the strings putting one zero before the first string and another zero after the second string, so for example for number 1331 you obtain strings <code>01331</code> and <code>13310</code>.
I defined a method for the sum of the strings like below:</p>

<pre><code>private static String sum(String s1, String s2) {
    final int n = s1.length();
    char[] arr1 = s1.toCharArray();
    char[] arr2 = s2.toCharArray();

    StringBuilder result = new StringBuilder();
    int remainder = 0;
    for (int i = n - 1; i &gt;= 0; --i) {
        int firstDigit = Character.getNumericValue(arr1[i]);
        int secondDigit = Character.getNumericValue(arr2[i]);
        int value = firstDigit + secondDigit + remainder;
        remainder = 0;
        if (value &gt;= 10) {
            value = value - 10;
            remainder = 1;
        }
        result.append(Character.forDigit(value, 10));
    }
    if (remainder &gt; 0) {
        result.append(remainder);
    }

    return result.reverse().toString();
}
</code></pre>

<p>The method uses a <code>StringBuilder</code> object to store the result : when you sum the digits of the two strings starting from the end you obtain a new digit and a remainder that can be 0 or 1. The new digit obtained from the sum is appended at the of the <code>StringBuilder</code>, so you have to reverse the <code>StringBuilder</code> result to obtain the real value. </p>

<p>Note : @slepic idea of using Pascal triangle if implemented  simplifies my idea of sum of strings and surely improves performance.</p>
    </div>