<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Lets look at your code</p>

<pre><code>namespace App\Controllers;

class Welcome extends {
    private $twig;

    public function __construct(\Twig_Environment $twig) {
        $this-&gt;twig = $twig;
    }

    public function getTemplate() {
        return $this-&gt;twig-&gt;render('/templates/welcome.html', array());
    }
}
//------------------------
namespace App\Controllers;

class Base {
    private $twig;

    public function __construct(\Twig_Environment $twig) {
        $this-&gt;twig = $twig;
    }

}
</code></pre>

<p>You have 3 Big issues here:</p>

<ol>
<li><code>class Welcome extends {</code> - extends what</li>
<li><code>private $twig;</code> this property is private, which means only the class it's defined in can access it</li>
<li><code>public function __construct</code></li>
</ol>

<p>Lets fix these (this simplest way):</p>

<pre><code>namespace App\Controllers;
class Welcome extends Base {
    protected $twig; //use protected - even though private would work this way

    public function __construct(\Twig_Environment $twig) {
        $this-&gt;twig = $twig;
    }

    public function getTemplate() {
        return $this-&gt;twig-&gt;render('/templates/welcome.html', array());
    }
}
//------------------------
namespace App\Controllers;

class Base {

    /*public function __construct(\Twig_Environment $twig) {
        parent::__construct($twig); //or omit the constructor all togather
    }*/

}
</code></pre>

<p>In this simple example, you can just Nuke the guts of the child class as there is nothing specific to that class in the code shown.  This happens to be the whole point of inheritance. </p>

<p>I left the constructor in comments, in this minimal example its not needed.  But you may want it in the future, so you can use <code>parent</code> to call the parent classes version of any <code>protected/public</code> methods.  Regardless if <code>$twig</code> is private we will want to try to re-use as much of the parent code as we can.  If it's private you have no choice but to use the parent's version, or set it after the fact.</p>

<p>If you want to keep <code>$twig</code> private for some reason, keep in mind the property is only visible within the <code>Base</code> class.  So any work you do directly on it must also be in that same class.  This means you can setup a method to return it, or set it in the parent class and call it from the child class.  This is rather trivial so I don't think it warrants an example, but if you want one, just let me know.</p>

<p>To be honest I use <code>private</code> about 10% of the time.  Only when I have some value only the parent class should "know" about.  And example would be say you have a base class that connects to the DB.  Well the act of connecting and the data needed for that is largely irrelevant to the child classes.  They don't (nor should they) care how the DB connection happened as the parent can take care of that without any need for the child to be aware of it.  All the child needs is whatever connection resource you get from the act of connecting.</p>

<p>When thinking about OOP, one very good thing to learn is called <code>S.O.L.I.D</code> </p>

<p><a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/SOLID</a></p>

<blockquote>
  <p><strong>Single</strong> responsibility principle[6]
      A class should have only a single responsibility, that is, only changes to one part of the software's specification should be able to affect the specification of the class.</p>
  
  <p><strong>Open architecture</strong> "Software entities ... should be open for extension, but closed for modification."</p>
  
  <p><strong>Liskov substitution principle</strong>
      "Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program." See also design by contract.</p>
  
  <p><strong>Interface segregation principle</strong> "Many client-specific interfaces are better than one general-purpose interface."</p>
  
  <p><strong>Dependency</strong> inversion principle
      One should "depend upon abstractions, [not] concretions."</p>
</blockquote>

<p>By having the template object private, your breaking rule Number2 or the <code>Open architecture</code>.  You could make Base an Abstract class (if it doesn't extend a concrete class), this way your not tempted to use it as a concrete Object. That's mostly <code>5</code>. If the parent is "responsible" for creating the template, there is no need for the child to take on that responsibility <code>1</code> and some of <code>3</code> (by not duplicating the code, we insure that <code>Welcome</code> can seamlessly replace <code>Base</code> etc...  Because this is not 100% code you control, a Controller must meet certain specifications for example, there is only so much you can do.  A controller is also generally the end result of a Request so you won't have much need of interfaces etc. Because you can't just load a controller at will and use it.  Interfaces are for type hinting your inputs to insure they posses the methods the interface demands.  That is the contract for the object.</p>

<p>These are "general" guide lines, you should try to use.  But that doesn't mean you have to use all of them. For example don't make abstract classes and interfaces just because they are part of SOLID principals, due it because it's the correct thing to do for that object.</p>

<p>Cheers!</p>
    </div>