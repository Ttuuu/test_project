<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know a lot of JavaScript, but I'll explain how to solve this problem in general using any programming language in <code>O(n)</code> time, where <code>n</code> is the number of elements in any of the input arrays. Of course, if the arrays are of different sizes, then they are not a rotation of one another.</p>

<p>The key observation is, <strong>array B is a rotation of array A, if B is a subarray of the A concatenated with itself</strong>. For example, <code>A = [5, 3, 4]</code> and <code>B = [3, 4, 5]</code>. Observe that B is a subarray of A' = [5, <strong>3, 4, 5</strong>, 3, 4].</p>

<p>However, you don't literally need to double array <code>A</code>. Instead, wrap around once you fall off the end of <code>A</code>, and keep going. This gives the following algorithm:</p>

<pre><code>IS-ROTATION(A, B)
  m = A.length
  n = B.length

  if m â‰  n; then
    return false
  endif

  i = j = 0

  while i &lt; 2m &amp;&amp; j &lt; n; do
    if i &gt;= m; then
      if j &gt; 0 &amp;&amp; A[i % m] == B[j]; then
        j++
      else
        return false
      endif
    else if A[i] == B[j]; then
      j++
    else
      j = 0
    endif
    i++
  done

  return j &gt;= n
</code></pre>
    </div>