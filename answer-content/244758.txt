<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Namespaces</h2>
<p>Have a read through <a href="https://stackoverflow.com/questions/125319/should-using-directives-be-inside-or-outside-the-namespace">https://stackoverflow.com/questions/125319/should-using-directives-be-inside-or-outside-the-namespace</a> . I agree with StyleCop's default recommendation of moving <code>using</code> within the namespace:</p>
<pre><code>namespace RockPaperScissorsLizardSpock
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
</code></pre>
<h2>Public members</h2>
<p>If you leave these public:</p>
<pre><code>    public Choice roundWinner;
    public Choice roundLoser;
    public string verb;
</code></pre>
<p>then there is no point to your constructor at all. The user can assign member values whenever they want. But that's not a great idea; it makes debugging and verifiability more difficult. Instead, keep your constructor, and mark these <code>public readonly</code>. See <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly</a> for more details.</p>
<h2>C# now has interpolation!</h2>
<pre><code>string.Format("\n{0} wins this round. {1}", p.Name, winningRule);
</code></pre>
<p>can be</p>
<pre><code>$"\n{p.Name} wins this round. {winningRule}"
</code></pre>
<h2>Integer intervals</h2>
<pre><code>p.Move_Int != 1 &amp;&amp; p.Move_Int != 2 &amp;&amp; p.Move_Int != 3 &amp;&amp; p.Move_Int != 4 &amp;&amp; p.Move_Int != 5
</code></pre>
<p>Assuming that this is non-nullable, then this should be</p>
<pre><code>p.Move_Int &lt; 1 || p.Move_Int &gt; 5
</code></pre>
<p>That said, you're parsing user input in a somewhat non-friendly way:</p>
<pre><code>int.Parse(Console.ReadLine())
</code></pre>
<p>If a person enters a letter accidentally, this will explode with an exception. Consider <code>TryParse</code> instead, and deal with the failure case nicely.</p>
<h2>Side effects</h2>
<p><code>PlayerMove</code> does two things - sets the player's <code>Move_Enum</code> <em>and</em> returns it. To confuse things even further, you're modifying an argument player's move rather than <code>this</code>. I propose that you instead</p>
<ul>
<li>Do not return anything</li>
<li>Do not accept a <code>HumanPlayer p</code></li>
<li>Set <code>this.Move_Enum</code> based on the input.</li>
</ul>
<h2>Re-entrance</h2>
<p>There's no reason for <code>Game</code> to be <code>static</code>. For testing purposes in particular, it's useful for this to be instantiated as a normal class.</p>
    </div>