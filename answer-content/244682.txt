<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You ask for speed up, so let's get timing data for the version you posted.  I've appended this to your code</p>
<pre><code>from timeit import default_timer as timer
args = (2, 1234567, 2345678)
print(args)
foo = gap(*args)

def timedGap():
    start = timer()
    gap(*args)
    end = timer()
    return end-start

(timedGap() for dummy in range(1, 3))
timings = tuple((timedGap() for dummy in range(1, 10)))
print( ( min(timings), sum(timings)/len(timings),  max(timings) ) )
print(foo)
</code></pre>
<p>This is configured to search for a pair of twin primes in the range [ 1 234 567, 2 345 678 ].  It prints the arguments to <code>gap()</code>, then runs <code>gap()</code> once to get the result, stored in <code>foo</code>.  Then runs <code>timedGap()</code> three times, discarding the timing data, in an attempt to do whatever priming is possible.  Then runs <code>timedGap()</code> ten times to gather run time statistics.  What is reported is (minimal time, average time, and maximal time) then the contents of <code>foo</code>.</p>
<p>On my hardware, your code produces the following output (with timings truncated to milliseconds for readability).</p>
<pre><code>(2, 1234567, 2345678)
(0.889..., 0.928..., 0.956...)
[1234757, 1234759]
</code></pre>
<p>The same timing protocol is used subsequently.</p>
<p>First, a prime is <code>2</code>, <code>3</code>, congruent to <code>1</code> modulo <code>6</code> or congruent to <code>5</code> modulo <code>6</code>.  (Proof 1)  So in prime(x), you should only be testing one-third of <code>range(2,x)</code>.  Also, the smallest prime divisor of a composite number is no greater than the square root of that number.  (Proof 2)  This means we can rewrite <code>prime(x)</code> as follows.</p>
<pre><code>from math import sqrt, floor
def prime(x):
    """Test that x is a prime number.  Requires x is a positive integer."""
    if not( (x &gt; 0) and isinstance(x, int) ):
        raise ValueError("x must be a positive integer.")
    # Note that the original prime() incorrect returns nothing when passed 1 as input.  Let's fix that.
    # 1 is not prime.
    if (x == 1):
        return False
    # We check 2, 3, AND 5 explicitly so that we can start the subsequent range at 6.
    # Note that this leaves only (1/2)(2/3)(4/5) = 4/15 ~= 25% of integers to check further.
    if (x == 2) or (x == 3) or (x == 5):
        return True
    if (x % 2 == 0) or (x % 3 == 0) or (x % 5 == 0):
        return False
    # Rather than alternately increment by 2 and 4, test twice per block of 6.
    for i in range(6, floor(sqrt(x)) + 1, 6):
        if x %(i+1) == 0:
            return False
        if x %(i+5) == 0:
            return False
    return True
</code></pre>
<p>and timing (truncated at microseconds):</p>
<pre><code>(2, 1234567, 2345678)
(0.000657..., 0.000676..., 0.000729...)
[1234757, 1234759]
</code></pre>
<p>so that's more than 1000-times faster.</p>
<p>We could replace the checks with <code>x % 2</code>, <code>x % 3</code>, and <code>x % 5</code>, with <code>math.gcd(x,30) &gt; 1</code>, but this doesn't save enough time to bother.</p>
<p>I don't have time to improve your <code>gap()</code>, but here are some comments/observations.</p>
<p>We already know that all primes except 2 and 3 are congruent to 1 or 5 modulo 6, so the only possible prime gaps start at 2 and have odd length, start at 3 and have even length, or start at a prime congruent to 1 or 5 modulo 6 and have length congruent to 5-5=0, 5-1=4, 1-5=2, or 1-1=0 modulo 6.  (And the collection of integers that are congruent to 0, 2, or 4 modulo 6 is the even integers.)  This should allow us to reject impossible <code>p</code>s much faster.</p>
<p>(A brief style comment: <code>p</code> and <code>q</code> are common labels for prime numbers and <code>m</code> is a common label for an integer.  <strong>Much</strong> better argument names for <code>gap()</code> are <code>start</code>, <code>end</code>, and <code>gapSize</code>.)</p>
<p>Observations:</p>
<ul>
<li>The list of primes less than the least potential member of a sought pair are of no use to us, so retaining them (and modifying a list of them) is a waste of time and space.</li>
<li>We only need to iterate through potential least members of the pair to find the first pair and we can stop as soon as the second member would be outside of the search range.</li>
<li>So let <code>i</code> be the potential first prime in the pair and have it range from <code>q</code> to <code>m - p</code>, only taking values where <code>i</code> and <code>i + p</code> are congruent to <code>1</code>s and <code>5</code>s modulo <code>6</code>.  (For instance, if <code>p</code> is <code>2</code>, then the least member must be congruent to <code>5</code> modulo <code>6</code> and the greater member is automatically congruent to <code>1</code> modulo <code>6</code>.)</li>
</ul>
<p>Proof 1:</p>
<p>An integer, <code>N</code>, is congruent to <code>a</code> modulo <code>6</code> if there is an integer <code>k</code> such that <code>N == a+6k</code>.</p>
<ul>
<li>If <code>N</code> is congruent to <code>0</code> modulo <code>6</code> then <code>N = 0 + 6k</code> and <code>6</code> divides <code>N</code>, so <code>N</code> is not prime.</li>
<li>If <code>N</code> is congruent to <code>2</code> modulo <code>6</code> then <code>N = 2 + 6k = 2(1+3k)</code> and <code>2</code> divides <code>N</code>, so either <code>N = 2</code> or <code>N</code> is not prime.</li>
<li>If <code>N</code> is congruent to <code>3</code> modulo <code>6</code> then <code>N = 3 + 6k = 3(1+2k)</code> and <code>3</code> divides <code>N</code>, so either <code>N = 3</code> or <code>N</code> is not prime.</li>
<li>If <code>N</code> is congruent to <code>4</code> modulo <code>6</code> then <code>N = 4 + 6k = 2(2+3k)</code> and <code>2</code> divides <code>N</code>, so <code>N</code> is not prime.  (We can skip "<code>N = 2</code>" as a possibility because <code>2+3k</code> can never be <code>1</code>.)</li>
</ul>
<p>We have found that for <code>N</code> to be prime, either <code>N = 2</code>, <code>N = 3</code>, <code>N</code> is congruent to <code>1</code> modulo <code>6</code>, or <code>N</code> is congruent to <code>5</code> modulo <code>6</code>.</p>
<p>Proof 2:</p>
<p>Suppose that <code>N</code> is a composite number, so that it has at least two prime divisors.  Assume further that all the prime divisors are greater than the square root of <code>N</code>.  This is a contradiction.  Call the two smallest prime divisors of <code>N</code> by the names <code>p</code> and <code>q</code>.  Note that <code>p &gt; sqrt(N)</code> and <code>q &gt; sqrt(N)</code> and that <code>pq</code> is a divisor of <code>N</code> so is no greater than <code>N</code>.  But, <code>pq &gt; sqrt(N)sqrt(N) = N</code>, which is a contradiction.  Therefore, any composite integer has a prime divisor no greater than its square root.</p>
    </div>