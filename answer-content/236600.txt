<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the good suggestions from @TobySpeight, I noted the following (in source order):</p>

<p>HugeInt.h:</p>

<ul>
<li><code>#include &lt;ostream&gt;</code> instead of <code>&lt;iostream&gt;</code> (pet peeve of mine)</li>
<li>Use long long instead of long (some platforms - notably Windows - has <code>sizeof(long)==sizeof(int)</code> even of 64-bit platforms)</li>
<li>default and copy constructors should just be defaulted (<code>= default</code>) rather than be explicitly defined since you're not doing anything non-default.</li>
<li>maybe construct from <code>std::string_view</code> rather than <code>const char*</code>, and maybe make that constructor explicit</li>
<li>why is <code>HugeInt radixComplement() const</code> public? </li>
</ul>

<p>HugeInt.cpp:</p>

<ul>
<li>internal functions should be in an unnamed namespace (or be static)</li>
<li><code>HugeInt::HugeInt(const char *const str)</code>

<ul>
<li>use const for constant values (e.g. <code>len</code>)</li>
<li>keep the scope of variables as short as possible</li>
<li>probably want to check for illegal characters</li>
</ul></li>
<li>The conversion to long double overflows, when pwrOf256 gets too large (and turns into <code>+inf</code>) you end up with NaN after multiply by zero ruining the result</li>
<li>You'd probably want to implement operator+/- in terms of +=/-= if you're going for speed rather than the other way round (but there are many other performance optimizations possible, so no big deal)</li>
<li>Starting out I wouldn't have bothered with operator++/-- they're not really common for bigint classes IME</li>
<li><code>isZero</code> relies on undefined behavior, if the number is zero you're reading past the start of <code>digits</code></li>
<li><code>toRawString</code> has the same issue</li>
</ul>
    </div>