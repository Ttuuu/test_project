<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the project but ...</p>

<h2>Separation of Concerns</h2>

<p>It is best to keep your procedure under 40 lines.  Generally speaking, it is best to identify each task that is to be performed, divide the tasks up and have subprocedures that process one or two of them at a time.  The main method would be responsible for passing data between the methods as parameters.  It is much easier to debug and modify a small block of code then it is to run complex subroutine before you can test a code block.</p>

<h2>Qualify References</h2>

<p>You should avoid selecting and activating objects whenever possible.  Using fully qualified ranges will make the code more efficient and less fragile.  </p>

<p>This line fails if <code>rDataSheet</code> is not the ActiveSheet because of the cells within the range not being qualified to <code>rDataSheet</code>.  They are referencing the cells on the ActiveSheet.</p>

<blockquote>
<pre><code>With rDataSheet.Range(Cells(1, 1), Cells(1, colCount))
</code></pre>
</blockquote>

<p>Here is how to properly reference ranges:</p>

<blockquote>
<pre><code>With rDataSheet
    .Range(.Cells(1, 1), .Cells(1, colCount))
</code></pre>
</blockquote>

<h2>Generating Unique Keys</h2>

<p>It is important to use a delimiter when creating a key.  </p>

<p>Generating keys for the table below without using a delimiter only yields two unique keys, even though, all rows are unique.</p>

<p>+----------+----------+
| Column A | Column B |
+----------+----------+
| 12       | 34       |
+----------+----------+
| 123      | 4        |
+----------+----------+
| 1234     |          |
+----------+----------+
| ABC      | DF       |
+----------+----------+</p>

<h2>User Experience (UX)</h2>

<ul>
<li>Hyperlinking to a hidden sheet. I'm guessing you'll fix this using the <code>Worksheet_FollowHyperlink</code> event</li>
<li>330 hidden WorkSheets?  You probably just delete them between runs but wouldn't it be easier to create a new Workbook for the report?</li>
</ul>

<h2>Naming Convention</h2>

<ul>
<li><code>headerColl</code>: This is obviously the Column Headers. Oh, my mistake, it is the columns used to generate unique keys.  But doesn't "concatenate each cell in the row into a temp string variable" suggest that each cell in the row is part of the unique key?  This explains why there is a worksheet for each key.  Otherwise, all the rows per each key worksheet would be identical.  Anyway, I would use <code>keyColumns</code>.</li>
<li>rDataLastRow: DataLastRow</li>
<li>rDataSheet: DataSheet, wsData</li>
<li><p>tempStr1: There is value in being able to watch tempStr1 in the Locals Window or add a watch. But in my opinion, it is just clutter.  Helper variables should be used to make the code more readable.  This looks easier to read to me:</p>

<pre><code>For x = 1 To UBound(headerArray)
    str1 = str1 &amp; Cells(y, headerArray(x))
Next x
</code></pre></li>
</ul>

<h2>Can it be done faster?</h2>

<p>Hell yeah.
Altough, not 100% to specs, this code is over 8 times faster. </p>

<pre><code>Option Explicit
Private Const Delimiter As String = "|"

Sub Main()
    Dim t As Double: t = Timer
    Application.ScreenUpdating = False
    Dim groups As New Scripting.Dictionary, subDic As Scripting.Dictionary
    Set groups = getRowsGroupedByDuplicateKeyColumns(ThisWorkbook.Worksheets(1), 1, 2, 3, 4)

    Dim wbReport As Workbook
    Set wbReport = CreateReport(groups)

    Dim key As Variant
    For Each key In groups
        Set subDic = groups(key)
        AddDuplicatesWorksheet wbReport, subDic
    Next
    Debug.Print Round(Timer - t, 2)
End Sub

Private Function CreateReport(ByRef groups As Scripting.Dictionary) As Workbook
    Dim wb As Workbook
    Set wb = Workbooks.Add
    Dim subDic As Scripting.Dictionary
    Dim key As Variant, results As Variant

    For Each key In groups
        Set subDic = groups(key)
        '.......
    Next

    Set CreateReport = wb
End Function

Private Sub AddDuplicatesWorksheet(wbReport As Workbook, subDic As Scripting.Dictionary)
    Dim key As Variant, results() As Variant, rowData() As Variant

    Dim r As Long, c As Long
    For Each key In subDic
        rowData = subDic(key)
        If r = 0 Then ReDim results(1 To subDic.count, 1 To UBound(rowData) + 1)

        r = r + 1
        results(r, 1) = key
        For c = 1 To UBound(rowData)
            results(r, c + 1) = rowData(c)
        Next
    Next

    With wbReport.Worksheets.Add
        .Range("A1").Resize(UBound(results), UBound(results, 2)).Value = results
    End With

End Sub

Private Function getRowsGroupedByDuplicateKeyColumns(ByRef ws As Worksheet, ParamArray KeyColumns() As Variant) As Scripting.Dictionary
    Dim dic As New Scripting.Dictionary
    Dim data() As Variant
    With ws
        data = .Range(.Range("A1", .Range("A1").End(xlToRight)), .Range("A1", .Cells(.Rows.count, 1).End(xlUp))).Value
    End With

    Dim key As Variant, keyData() As Variant, rowData() As Variant
    Dim r As Long, c As Long, keyIndex As LongPtr
    ReDim keyData(0 To UBound(KeyColumns))
    ReDim rowData(1 To UBound(data, 2))

    For r = 2 To UBound(data)
        For c = 0 To UBound(KeyColumns)
            keyIndex = KeyColumns(c)
            keyData(c) = data(r, keyIndex)
        Next
        For c = 1 To UBound(data, 2)
            rowData(c) = data(r, c)
        Next
        key = Join(keyData, Delimiter)
        If Not dic.Exists(key) Then dic.Add key, New Scripting.Dictionary
        dic(key).Add r, rowData
    Next
    Set getRowsGroupedByDuplicateKeyColumns = dic
End Function
</code></pre>
    </div>