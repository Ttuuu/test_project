<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I always just use an additional variable:</p>

<pre><code>auto first= true;

for (auto const&amp; x : list) {
    if (first) first = false; else separator(x);
    action(x);
}
</code></pre>

<p>In your case, <code>separator(x)</code> would be <code>std::cout &lt;&lt; ", "</code> (<code>x</code> isn’t actually used), and <code>action(x)</code> would be <code>std::cout &lt;&lt; x</code>.</p>

<p>I normally abhor mutating variables inside a loop and try to use standard library algorithms on lambdas without side-effects instead. But in this case I believe having an additional boolean flag is simply the most economical, most readable solution.</p>

<p>This is also one of the very few cases (the only?) where I’m using a single-line <code>if</code>…<code>else</code>.</p>

<p>The <strong>advantage</strong> of this method is that you don’t have to duplicate <code>action(x)</code>. Even if it’s just a single, simple expression, having such a duplication makes the logic disjointed and harder to follow.</p>

<p>The <strong>disadvantage</strong> is that the condition <code>first</code> has to be checked on <em>every</em> loop iteration. My suspicion is that the CPU’s branch predictor will handle this extremely well so it shouldn’t impact performance. Still, it’s conceptually irksome.</p>
    </div>