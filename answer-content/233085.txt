<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Make the process <em>approach</em> atomic</h3>

<p>The script first wipes out <code>${war}/${domain}</code>,
then populates it with content from <code>wget</code> commands,
and restores content from backup.</p>

<p>The <code>wget</code> commands are a serious risk here.
If any of the source sites is down or experiencing instability at the time the script runs,
your site can end up in an inconsistent state.</p>

<p>At the minimum, it would be better to fetch all external resources before you start rewriting your content.</p>

<p>An even better way would be to try to make the process as atomic as possible:
build up the new content in a dedicated directory isolated from production,
but on the same partition,
and when all is ready, make the switch in fast directory rename operations.</p>

<h3>Separate your backups from your production environment</h3>

<p>The <code>$war</code> directory looks clearly in the heart of the production environment.
In that directory, you create backup directories side by side with the <code>$domain</code> directory.
I suggest to create the backups elsewhere.
Ideally on a different filesystem partition.</p>

<p>Closely related to this, the backup directories are somewhere in <code>$war/...</code>,
and the original content is also somewhere in <code>$war/...</code>.
I think this invites mistakes.
If you had distinct variable name prefixes such as <code>$backup_...</code> and <code>$content</code>,
that would reduce the risk of mistakes.</p>

<h3>Syntax error</h3>

<p>I don't understand what this is doing in a Bash script:</p>

<blockquote>
<pre><code>db-username_and_db-name="DB_CREDENTIALS"
</code></pre>
</blockquote>

<p>This is an invalid statement in all Bash versions that I know.</p>

<h3>Bash scripts should have a shebang</h3>

<p>The posted code has no shebang.
Since the question is tagged <code>bash</code>,
maybe it's implied it's really there in your version,
but just for the record, every Bash script should start with a shebang.</p>

<h3>Watch out for things that may go wrong</h3>

<p>Toby already mentioned this in his review,
but I think it deserves to be stressed.
Many things can go wrong in this script:</p>

<ul>
<li>If <code>mysqldump</code> fails for some reason, the script will keep going without a backup created. That can lead to data loss, and it's to be avoided.</li>
<li>If any of the <code>wget</code> commands fail for some reason, the script will keep going and update the sitemap and the DB. That can lead to inconsistent state of your site that's difficult to debug.</li>
</ul>

<p>My suggestion is similar to Toby's:
put <code>set -euo pipefail</code> near the top of the script,
to make it stop executing when something goes wrong unexpectedly.</p>

<h3>Double-quote variables used in command arguments</h3>

<p>You did that correctly for the most part,
you missed just one here:</p>

<blockquote>
<pre><code>cp "${war}/${domain}"/${domain}.png               "${war}/mediawiki_specific_backups"/${domain}.png
</code></pre>
</blockquote>

<h3>Use more variables</h3>

<p>The term <code>${war}/mediawiki_general_backups</code> comes up repeatedly.
It would be better if it was in a variable.
Editors with Bash support will make it possible to rename, see, find easily all occurrences.</p>

<h3>Make long pipelines easier to read and understand</h3>

<p>Take for example this:</p>

<blockquote>
<pre><code>wget "${latest_mediawiki_core}" -O - | tar -xzv --strip-components 1 -C "${war}/${domain}"
</code></pre>
</blockquote>

<p>I think it's better to write flags before arguments.
The text closer to the left is naturally easier to read.
And the flags pack a lot of important details in little space,
and the URL argument is long and not very interesting to read.</p>

<p>Secondly, it's easier to understand code when there is a single statement per line.
A good way to achieve that is by splitting the line at each command in the pipeline.</p>

<p>That is, I suggest writing like this:</p>

<pre><code>wget -O- "${latest_mediawiki_core}" \
| tar -xzv --strip-components 1 -C "${war}/${domain}"
</code></pre>

<h3>Simplify</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>rm "${war}"/mediawiki_specific_backups/*
rm "${war}"/mediawiki_specific_backups/.* # If I won't run this, a specific backup of .htaccess, in that directory, won't get deleted;
</code></pre>
</blockquote>

<p>Why not simply:</p>

<pre><code>rm -r "${war}"/mediawiki_specific_backups
</code></pre>
    </div>