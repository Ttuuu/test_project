<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I probably can't say much about the algorithm but I see many things which can help you improve your use of C++ and programming in general.</p>

<ul>
<li><h3>Don't use <code>using namespace std</code></h3>

Why? You pollute the whole <code>std</code> namespace into your program which could lead to name clashes. More about it <a href="//stackoverflow.com/q/1452721">here</a>.</li>
<li><h3>Use const and constexpr</h3>

<p>Consider these declarations:</p>

<blockquote>
<pre><code>//settings:
int iter = 5;
int resolution = 50;
double power = 8.0;
double maxlength = 2.0;
double rangemin = -1.75;
double rangemax = 1.75;
</code></pre>
</blockquote>

<p>In your program you can now happily modify these parameters by
   accident. Since they should be constants say so with the keyword
   <code>const</code>:</p>

<pre><code>const int iter = 5;
const int resolution = 50;
const double power = 8.0;
const double maxlength = 2.0;
const double rangemin = -1.75;
const double rangemax = 1.75;
</code></pre>

<p>If C++11 is available, even better: make them <code>constexpr</code>:</p>

<pre><code>constexpr int iter = 5;
constexpr int resolution = 50;
constexpr double power = 8.0;
constexpr double maxlength = 2.0;
constexpr double rangemin = -1.75;
constexpr double rangemax = 1.75;
</code></pre>

<p>This makes these variables true constants. That means they eat up no
   memory. They are just aliases for the numbers.</p></li>
<li><h3>Use <code>auto</code> whenever possible</h3>

<p>You don't have to mention types explicitly. Instead use <code>auto</code>. So we get:</p>

<pre><code>constexpr auto iter = 5;
constexpr auto resolution = 50;
constexpr auto power = 8.0;
constexpr auto maxlength = 2.0;
constexpr auto rangemin = -1.75;
constexpr auto rangemax = 1.75;
</code></pre></li>
<li><h3>omit <code>return 0</code> in <code>main()</code></h3>

<p>In C++, <code>return 0</code> gets automatically inserted into the <code>main</code> function if you don't write it. So for this special case it is not necessary to write the <code>return</code>.</p></li>
<li><h3>Avoid declaring several variables on one line</h3>

<p>Consider this in your code:</p>

<blockquote>
<pre><code>double progress, progdiv = 100.0 / pow((double(resolution) + 1), 3.0);

//...

//Display progress in console:
progress += progdiv;
</code></pre>
</blockquote>

<p>My compiler shows a warning in the last line:</p>

<blockquote>
  <p>variable 'progress' is uninitalized when used here</p>
</blockquote>

<p>That means <code>progress</code> can have any value here and gets added here.</p>

<p>So better write two lines and initialize:</p>

<pre><code>auto progress = 0.0;
auto progdiv = 100.0 / pow((double(resolution) + 1), 3.0);
</code></pre></li>
<li><h3>Avoid <code>std::endl</code></h3>

<p>This is really a very common beginners' trap. Even some books use <code>std::endl</code> all the time but it is wrong.</p>

<p>First of all, <code>std::endl</code> is nothing but this:</p>

<pre><code>'\n' + `std::flush`
</code></pre>

<p>So it gives you a new line (What you want) and the performs a expensive flush of the output sequence which is in 99.9% of the cases not necessary. So stick to <code>\n</code>.</p></li>
<li><h3>Declare variables as late as possible:</h3>

<p>This:</p>

<blockquote>
<pre><code>//reset for next point:
xpoint = xpos;
ypoint = ypos;
zpoint = zpos;
cx = xpos;
cy = ypos;
cz = zpos;
</code></pre>
</blockquote>

<p>Should be:</p>

<pre><code>//reset for next point:
auto xpoint = xpos;
auto ypoint = ypos;
auto zpoint = zpos;
auto cx = xpos;
auto cy = ypos;
auto cz = zpos;
</code></pre>

<p>Unlike in old C Standard, you can declare variables as late as possible. They should be declared when they are needed. This avoids mistakes.</p>

<p>Same goes for this:</p>

<pre><code>auto r = sqrt(xpoint*xpoint + ypoint*ypoint + zpoint*zpoint);
auto phi = atan(ypoint/xpoint);
auto theta = acos(zpoint/r);
</code></pre></li>
<li><h3>Limit your line length</h3>

<p>Consider this nice line:</p>

<blockquote>
<pre><code>//other variables:
double length = 0.0;
double density = 0.0; //Named 'density' since the 3d-volume has density=1 if the point is in the set and density=0 if point is not in the set
</code></pre>
</blockquote>

<p>You should limit your line length to a value (80 or 100 are common) so you can read all the code without scrolling to the right. With this limit you can also open two code pages next to each other. More about it <a href="//softwareengineering.stackexchange.com/q/604/">here</a>.</p>

<p>Most IDEs support a visible line length marker. In mine it looks like this:</p>

<p></p>

<p>So better like this:</p>

<pre><code>double length = 0.0;
//Named 'density' since the 3d-volume has density=1 if the point is in the 
//set and density=0 if point is not in the set
double density = 0.0; 
</code></pre></li>
<li><h3>Avoid long functions</h3>

<p>Your <code>main</code> function is very long and it's hard to grasp from looking at it what is going on. Prefer shorter functions which only do one thing. The <code>main</code> does several things (user input, calculation etc). Split that into smaller functions. And the smaller functions into even smaller functions. This way you also have the option to run the algorithm without any user input, maybe for unit tests.</p></li>
</ul>

<hr>

<p>Refactored, the code looks like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;fstream&gt;

/* Mandelbulb: https://en.wikipedia.org/wiki/Mandelbulb
 *
 * The sequence v(n+1) = v(n)^power + c is iterated several times for every
 * point in 3d space. v(0) and c are equal to that point.
 * If the length of  v(n) does not exceed 'maxlength' (i.e. it does not diverge)
 * then the point is an element of the mandelbulb set
 * and saved to the file.
*/

struct Parameters{
    const int iter;
    const int resolution;
    const double power;
    const double maxLength;
    const double rangemin;
    const double rangemax;
};

void printParameters(std::ostream &amp;os, const Parameters &amp;parameters);

void calculation(
        std::ostream &amp;calcOutput,
        std::ostream &amp;progressOutput,
        bool progressOutputOn,
        const Parameters &amp;parameters);

bool sequenceLoop(double xpos, double ypos, double zpos, int iter, 
                    double power, double maxLength);

bool sequence(double &amp;xpoint, double &amp;ypoint, double &amp;zpoint, double power,
              double maxLength, double cx, double cy, double cz);


void printParameters(std::ostream &amp;os, const Parameters &amp;parameters)
{
    os &lt;&lt; '\n'
     &lt;&lt; "+--------------------+" &lt;&lt; '\n'
     &lt;&lt; "|Mandelbulb generator|" &lt;&lt; '\n'
     &lt;&lt; "+--------------------+" &lt;&lt; '\n'
     &lt;&lt;'\n'
     &lt;&lt; "Standard settings:" &lt;&lt; '\n'
     &lt;&lt; "Iterations:    " &lt;&lt; parameters.iter &lt;&lt; '\n'
     &lt;&lt; "Power:     " &lt;&lt; parameters.power &lt;&lt; '\n'
     &lt;&lt; "Maxlength: " &lt;&lt; parameters.maxLength &lt;&lt; '\n'
     &lt;&lt; "rangemin:  " &lt;&lt; parameters.rangemin &lt;&lt; '\n'
     &lt;&lt; "rangemax:  " &lt;&lt; parameters.rangemax &lt;&lt; '\n'
     &lt;&lt; "Resolution:    " &lt;&lt; parameters.resolution &lt;&lt; '\n'
     &lt;&lt;'\n';
}

void calculation(
        std::ostream &amp;calcOutput,
        std::ostream &amp;progressOutput,
        bool progressOutputOn,
        const Parameters &amp;parameters)
{
    auto div = (parameters.rangemax - parameters.rangemin) 
            / double(parameters.resolution);
    //first line contains distance between points for other scripts to read
    calcOutput &lt;&lt; div &lt;&lt; '\n';

    auto progress = 0.0;
    auto progdiv = 100.0 / pow((double(parameters.resolution) + 1), 3.0);

    //x,y,z-loop:
    for(auto xpos = parameters.rangemin; 
        xpos &lt;= parameters.rangemax; xpos += div) {

        for(auto ypos = parameters.rangemin; 
            ypos &lt;= parameters.rangemax; ypos += div) {

            for(auto zpos = parameters.rangemin; 
                zpos &lt;= parameters.rangemax; zpos += div) {

                if(progressOutputOn) {
                    //Display progress in console:
                    progress += progdiv;
                    progressOutput &lt;&lt; "               \r"
                                   &lt;&lt; progress &lt;&lt; "%\r";
                    progressOutput.flush();
                }

                if(sequenceLoop(xpos, ypos, zpos, parameters.iter, 
                                parameters.power, parameters.maxLength))
                {
                    calcOutput &lt;&lt; xpos &lt;&lt; "   " &lt;&lt; ypos &lt;&lt; "  " &lt;&lt; zpos &lt;&lt; '\n';
                }
            }
        }
    }

    if(progressOutputOn) {
        progressOutput &lt;&lt; '\n'
                  &lt;&lt; "Done." &lt;&lt; '\n';
    }
}

bool sequenceLoop(
        double xpos,
        double ypos,
        double zpos,
        double power,
        int iter,
        double maxLength)
{
    auto xpoint = xpos;
    auto ypoint = ypos;
    auto zpoint = zpos;

    for(auto i = 0; i &lt;= iter; i++)
    {
        if(!sequence(xpoint, ypoint, zpoint, power, maxLength,
                     xpos, ypos, zpos)) {
            return false;
        }
    }
    return true;
}

bool sequence(
        double &amp;xpoint,
        double &amp;ypoint,
        double &amp;zpoint,
        double power,
        double maxLength,
        double cx,
        double cy,
        double cz)
{
    auto r = sqrt(xpoint*xpoint + ypoint*ypoint + zpoint*zpoint);
    auto phi = atan(ypoint/xpoint);
    auto theta = acos(zpoint/r);

    xpoint = pow(r, power) * sin(power * theta) * cos(power * phi) + cx;
    ypoint = pow(r, power) * sin(power * theta) * sin(power * phi) + cy;
    zpoint = pow(r, power) * cos(power * theta) + cz;

    return r &lt; maxLength;
}

int main()
{
    constexpr Parameters parameters{ 5, 50, 8.0, 2.0, -1.75, 1.75 };

    printParameters(std::cout, parameters);

    constexpr auto outputFileName = "Mandelbulb.xyz";
    std::ofstream ofs (outputFileName);

    calculation(ofs, std::cout, true, parameters);
}
</code></pre>

<p>I hope this gives some idea how to make the code more readable. I think it can be still improved further.</p>

<p>For a bit of speedup, I suggest to turn off the progress echoing in the console with <code>progressOutputOn = false</code> for the method <code>calculation</code>.</p>

<p>As mentioned in the comments, maybe you can split up the calculation into several threads. For example:</p>

<pre><code>xpoint = pow(r, power) * sin(power * theta) * cos(power * phi) + cx;
ypoint = pow(r, power) * sin(power * theta) * sin(power * phi) + cy;
zpoint = pow(r, power) * cos(power * theta) + cz;
</code></pre>

<p>These 3 points get calculated one after each other. But they are independent of each other, so probably they can be excecuted in parallel. I sould try that out with <code>std::async</code>. </p>

<p>That's my first thought but maybe even the whole algorithm needs to be set up differently to have it ready for parallel computation.</p>

<p>Now that you have the code cleaned up, you can measure the time between the calculations to see how the speed is (also with other parameters).</p>
    </div>