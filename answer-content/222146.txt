<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Deque</h3>

<p>If you need both <em>Stack</em> and <em>Queue</em> operability, consider using a <a href="https://docs.oracle.com/javase/8/docs/api/index.html?java/util/Deque.html" rel="nofollow noreferrer">Deque</a>.</p>

<p>Summary of Deque methods</p>

<pre><code>-           First Element (Head)                   Last Element (Tail)
-           Throws exception     Special value     Throws exception     Special value
- Insert    addFirst(e)          offerFirst(e)     addLast(e)           offerLast(e)
- Remove    removeFirst()        pollFirst()       removeLast()         pollLast()
- Examine   getFirst()           peekFirst()       getLast()            peekLast()
</code></pre>

<hr>

<h3>Implementation</h3>

<p>Your code is really convoluted for what you want to achieve. Use a deque instead of the list <code>private final List&lt;T&gt; scores;</code> Depending on <code>highestIsBest</code>, you'd either use the <em>Head</em> or <em>Tail</em> functions. The code below can be simplified using the deque operations described above.</p>

<blockquote>
<pre><code> T lastScore = scores.get(scores.size() - 1);
        if (highestIsBest) {
            if (newScore.compareTo(lastScore) &gt; 0) {
                scores.remove(lastScore);
                scores.add(newScore);
                sortScores();
                return true;
            }
        } else {
            if (newScore.compareTo(lastScore) &lt; 0) {
                scores.remove(lastScore);
                scores.add(newScore);
                sortScores();
                return true;
            }            
        }
</code></pre>
</blockquote>
    </div>