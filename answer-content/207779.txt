<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally, when reading your code, I think you need to consider the <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself" rel="nofollow noreferrer">DRY principle</a>. I will elaborate on this through several specific examples, but it's generally a good thing to keep in mind and understand when you code anything. This principle also means you should almost <em>never</em> copy-paste code exactly: that's a sign that there's a cleaner way to organize the code. </p>

<p>If you have any questions about any of my suggestions, feel free to ask them in comments.</p>

<h1>Avoid similarly named hardcoded variables</h1>

<p>You hard define a set of very similarly named variables (multiple times):</p>

<pre><code>Treasure1_Row = random.randint(0,8)
Treasure1_Col = random.randint(0,8)
Treasure2_Row = random.randint(0,8)
Treasure2_Col = random.randint(0,8)
# ...
Treasure11_Row = random.randint(0,8)
Treasure11_Col = random.randint(0,8)
Treasure12_Row = random.randint(0,8)
Treasure12_Col = random.randint(0,8)

Bandit1_Row = random.randint(0,8)
Bandit1_Col = random.randint(0,8)
Bandit2_Row = random.randint(0,8)
Bandit2_Col = random.randint(0,8)
# ...
Bandit11_Row = random.randint(0,8)
Bandit11_Col = random.randint(0,8)
Bandit12_Row = random.randint(0,8)
Bandit12_Col = random.randint(0,8)
</code></pre>

<p>Generally you should use lists instead, and use a loop to assign all the list elements the same thing. <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List comprehensions</a> can make your code even more succinct. Here's how:</p>

<pre><code>treasures_row = [random.randint(0,8) for i in range(12)]
treasures_col = [random.randint(0,8) for i in range(12)]
bandits_row = [random.randint(0,8) for i in range(12)]
bandits_col = [random.randint(0,8) for i in range(12)]
</code></pre>

<p>Even more idiomatically, you could store the coordinates as two-tuples, instead of having separate lists for the rows and cols:</p>

<pre><code>treasures = [(random.randint(0,8), random.randint(0,8)) for i in range(12)]
bandits = [(random.randint(0,8), random.randint(0,8)) for i in range(12)]
</code></pre>

<p>This will of course require reorganizing other parts of your code, but the benefits far outweigh the downsides. I will now go over how to fix all the places that reference the treasure and bandit lists.</p>

<pre><code>        if current[0] == Treasure1_Row and current[1] == Treasure1_Col\
           or current[0] == Treasure2_Row and current[1] == Treasure2_Col\
           # ...
           or current[0] == Treasure7_Row and current[1] == Treasure7_Col\
           or current[0] == Treasure8_Row and current[1] == Treasure8_Col:
</code></pre>

<p>can now become:</p>

<pre><code>        if (current[0], current[1]) in treasures[:8]:
</code></pre>

<p>The <code>[:8]</code> is called a <a href="https://stackoverflow.com/a/509295/8117067">slice</a>, and it returns a list containing the first 8 elements of the original list.</p>

<h1>Use more loops</h1>

<p>Mostly, you want to create your lists in list-comprehensions; so this:</p>

<pre><code>for i in range(8):
    b=[]
    for j in range(8):
        b.append(' ')
    boardeasy.append(b)
</code></pre>

<p>will become:</p>

<pre><code>boardeasy = [[' ' for j in range(8)] for i in range(8)]
</code></pre>

<p>This block can be shrunk significantly because it repeats:</p>

<pre><code>    print("  1   2   3   4   5   6   7   8")
    print("---------------------------------")
    print ('|  ' + boardeasy[0][0] + '| ' + boardeasy[0][1] + ' | ' + boardeasy[0][2] + ' | ' + boardeasy[0][3] + ' | ' + boardeasy[0][4] + ' | ' + boardeasy[0][5] + ' | ' + boardeasy[0][6] + ' | ' + boardeasy[0][7] + ' | ' + '1')
    print("---------------------------------")
    # ...
    print ('|  ' + boardeasy[7][0] + '| ' + boardeasy[7][1] + ' | ' + boardeasy[7][2] + ' | ' + boardeasy[7][3] + ' | ' + boardeasy[7][4] + ' | ' + boardeasy[7][5] + ' | ' + boardeasy[7][6] + ' | ' + boardeasy[7][7] + ' | ' + '8')
    print("---------------------------------")
</code></pre>

<p>To start with, most print statement repeat <code>|</code>. Python has a built in string operation for this: it's called <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a>. Here's how to use it; you go from this:</p>

<pre><code>    print('|  ' + boardeasy[0][0] + '| ' + boardeasy[0][1] + ' | ' + boardeasy[0][2] + ' | ' + boardeasy[0][3] + ' | ' + boardeasy[0][4] + ' | ' + boardeasy[0][5] + ' | ' + boardeasy[0][6] + ' | ' + boardeasy[0][7] + ' | ' + '1')
</code></pre>

<p>to this (while also centering the character in the first column):</p>

<pre><code>    print('| ' + ' | '.join(boardeasy[0][:8]) + ' | ' + '1')
</code></pre>

<p>But we can make it even better because the board rows are also very repetitious among each other. You can fix this with a simple for-loop:</p>

<pre><code>    print("  1   2   3   4   5   6   7   8")
    print("---------------------------------")
    for row in range(8):
        print ('| ' + ' | '.join(boardeasy[row][:8]) + ' | ' + str(row + 1))
        print("---------------------------------")
</code></pre>

<p>(I could also automate the first line, but we'll get to that in a second.)</p>

<h1>Don't split functions with the same content; use parameters</h1>

<ul>
<li><code>table_game_easy</code>, <code>table_game_medium</code>, and <code>table_game_hard</code> should be combined into one function.</li>
<li><code>easy_level</code>, <code>med_level</code>, and <code>hard_level</code> should be combined into one function.</li>
</ul>

<p>There are more ways to reduce redundancy, but try to find them on your own. If you have any more questions, you can comment on this post or ask a new question.</p>
    </div>