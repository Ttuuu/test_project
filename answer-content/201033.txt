<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I didnâ€™t use new to create the stack in main(). Do I need to call the destructor? If no, why? If yes, how should I do it?</p>
</blockquote>

<p>You do not need. It will be automatically called.</p>

<blockquote>
  <p>What should top() return if the stack is empty?</p>
</blockquote>

<p>To be honest, it is your implementation you can do what you want. You can throw exception if you want.</p>

<blockquote>
  <p>I feel I have some misunderstanding about private. I put top_node in the private section, but why I am able to access top_node in the copy constructor?</p>
</blockquote>

<p>It seems natural for me that you can, it is a class member function.
You can read more here. <a href="https://stackoverflow.com/questions/4117002/why-can-i-access-private-variables-in-the-copy-constructor">Why can I access private variables in the copy constructor?</a></p>

<blockquote>
  <p>According to the rule of three, how will I define the assignment operator for stack? Can you give one example?</p>
</blockquote>

<p>I would start using smart pointers in first place. It will really simplify all you need. Anyway there is also rule of five.</p>

<h1>using namespace std</h1>

<p>Don't do that.
<a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">why-is-using-namespace-std-considered-bad-practice</a></p>

<h1>Using new</h1>

<p>In modern C++ code you should never see <code>new</code>.
Read about smart pointers and use them. This will solve many problems.</p>

<h1>C.48: Prefer in-class initializers to member initializers in constructors for constant initializers</h1>

<p>This </p>

<pre><code>MyStack(): top_node(nullptr), count(0){};
</code></pre>

<p>Could be simply</p>

<pre><code>Node* top_node {nullptr};
size_t count {0};
</code></pre>

<p>and</p>

<pre><code>MyStack() = default;
</code></pre>
    </div>