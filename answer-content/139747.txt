<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Readability</h2>

<p><strong>1</strong> - Variable naming.  I did a double-take when I first looked at the code, because it was tagged <a href="/questions/tagged/vba" class="post-tag" title="show questions tagged 'vba'" rel="tag">vba</a> instead of <a href="/questions/tagged/lolcode" class="post-tag" title="show questions tagged 'lolcode'" rel="tag">lolcode</a>.  While variable names like <code>colz</code> and <code>dun</code> are cute, <code>columnCount</code> and <code>finished</code> make it a lot easier to tell at a glance what the values you're storing in them actually represent (especially if I have to strain my scroll-wheel finger to find the declarations). </p>

<p><strong>2</strong> - Side scrolling. VBA has a line continuation  operator, <code>_</code>. Even with my monitor set to its usual eyestrain-o-visionâ„¢ resolution setting and the VBE window maximized, lines like this <em>still</em> require scrolling to the side:</p>

<pre><code>columnsToCombine = "'" &amp; Selection.Cells(1, colz + 1).Offset(rowOffset:=-1, columnOffset:=0).Value &amp; "' to '" &amp; Selection.Cells(1, selectionCols).Offset(rowOffset:=-1, columnOffset:=0).Value &amp; "'"
</code></pre>

<p>Breaking them up into multiple lines makes it easier to see the whole thing at the same time.</p>

<p><strong>3</strong> - Superfluous syntax.  This is probably personal preference more than anything, but using parentheses when they aren't required just adds noise:</p>

<pre><code>If (Sheets(mtrx).Cells(1, coltot) &gt; 0) Then
</code></pre>

<p>They also add an albeit trivial amount of work for the compiler when it evaluates the line of code to determine that it can simply ignore them.  This is what the compiler sees:</p>

<pre><code>If Sheets(mtrx).Cells(1, coltot) &gt; 0 Then
</code></pre>

<p>Do the compiler a solid and just leave them out.  Granted it isn't this...</p>

<pre><code>If ((Sheets(mtrx).Cells(((((1)))), ((coltot)))) &gt; (((0)))) Then
</code></pre>

<p>...but I'd reserve parentheses for places where you need to either override or emphasize the operator precedence.</p>

<hr>

<h2>Object references</h2>

<p>Every time you use <code>Sheets</code>, you are implicitly referencing <code>ActiveWorkbook</code>, and every time you use <code>Range</code>, you are implicitly referencing <code>ActiveSheet</code>.  On top of that, you are repeatedly retrieving the same object from the <code>Sheets</code> collection when all you need to do is grab a reference.  You get the <em>name</em> of the <code>ActiveSheet</code> here...</p>

<pre><code>mtrx = ActiveSheet.Name
</code></pre>

<p>... and then every time you need to reference that sheet, you retrieve it from the <code>Sheets</code> collection, i.e.:</p>

<pre><code>If (Sheets(mtrx).Cells(rotot, 1) &gt; 0) Then
</code></pre>

<p>From a performance standpoint, this isn't free - not only is it a function call, Excel has to find the reference and return it. It would make much more sense to just <em>get the reference</em>...</p>

<pre><code>Dim matrix as Worksheet
Set matrix = ActiveSheet
</code></pre>

<p>...and use it:</p>

<pre><code>If matrix.Cells(rotot, 1) &gt; 0 Then
</code></pre>

<p>Same thing with <code>Sheets(dbase)</code> - you are actually discarding the reference that Excel returns for you here:</p>

<pre><code>Sheets.Add After:=ActiveSheet
</code></pre>

<p>Again, just grab the reference for use later:</p>

<pre><code>Dim dbase As Worksheet
Set dbase = matrix.Parent.Sheets.Add(After:=matrix)
</code></pre>

<p>Finally, take advantage of <code>With</code> blocks, <em>especially</em> in loops.  This section of code...</p>

<pre><code>Do
    If (Sheets(mtrx).Cells(rotot, 1) &gt; 0) Then
        rotot = rotot + 1
    Else
        dun = True
    End If
Loop Until dun
</code></pre>

<p>...is repeating the call <code>Sheets(mtrx)</code> every time through the loop. Behind the scenes, Excel dereferences the implicit <code>.</code> in <code>Sheets</code> to <code>ActiveWorkbook</code>, then calls its <code>Sheets</code> property, and finally requests and returns the <code>mtrx</code> item. And... it is <em>always going to return the exact same thing</em>. That is a <strong><em>ton</em></strong> of meaningless processing to do potentially thousands of times.  If you wrap the loop in a <code>With</code> block, you are only requesting the reference <em>once</em> (although see below under <strong>Refactoring opportunities</strong> about this specific code section):</p>

<pre><code>With Sheets(mtrx)
    Do
        If .Cells(rotot, 1) &gt; 0 Then
            rotot = rotot + 1
        Else
            dun = True
        End If
    Loop Until dun
End With
</code></pre>

<hr>

<h2>Variables</h2>

<p>You have <strong><em>way</em></strong> to many.  I'd start by getting rid of the ones that @Mat'sMug already identified as not being used, and then move on to variables like <code>v</code>.  You set <code>v</code> on line 68...</p>

<pre><code>v = newcol
</code></pre>

<p>...and never assign to it again until it pops up <em>105 lines later</em> as a loop limit:</p>

<pre><code>For newcol = 1 To v
</code></pre>

<p>Neither value changes in between, and <code>newcol</code> mysteriously switches from being the limit to being the counter. If you use a generic loop counter more than once, just reuse one (although if you follow some of the refactoring suggestions this becomes much less necessary).</p>

<p>I already touched on using meaningful names earlier in this ramble, but this seems like an appropriate place to bring up naming <em>conventions</em>.  While this is arguably an issue of taste, the <a href="https://msdn.microsoft.com/en-us/library/ms229012(v=vs.110).aspx" rel="nofollow noreferrer">current suggested .NET naming conventions</a> are a good place to start. The <em>specific</em> convention doesn't matter nearly as much as <em>consistency</em>, because it provides hints as to what exactly an identifier represents.  Currently, your variables use a seemingly random mixture of Pascal case (<code>RowName</code>), camel case (<code>columnsToCombine</code>), all lower case (<code>newcol</code>), Hungarian notation (<code>iName</code>), Code Golf notation (<code>r</code>), and Pirate notation (<code>Arr</code>).</p>

<hr>

<h2>Refactoring opportunities</h2>

<p><strong>1</strong> - This section of code is incredibly inefficient (and should be properly structured instead of using a <code>Goto</code> - why the much preferable <code>Exit For</code> is commented out is completely beyond me...):</p>

<pre><code>    Dim sheetExists As Variant
    Dim Sheet As Worksheet
    Dim iName As Integer

    Dim dbaseOld As String
    dbaseOld = dbase    ' save the original proposed name of the new worksheet

    iName = 0

    sheetExists = False
CheckWorksheetNames:

    For Each Sheet In Worksheets    ' loop through every worksheet in the workbook
        If dbase = Sheet.Name Then
            sheetExists = True
            iName = iName + 1
            dbase = Left(dbase, Len(dbase) - 1) &amp; " " &amp; iName
            GoTo CheckWorksheetNames
            ' Exit For
        End If
    Next Sheet
</code></pre>

<p>First, there is no reason for <code>sheetExists</code> to be a <code>Variant</code> - it is only used as a <code>Boolean</code>, but the <em>real</em> reason is that you are repeatedly iterating through the <em>exact same</em> collection of Worksheets. Remember, this isn't free from a performance standpoint.  I'd collect the names <em>once</em>, and <em>then</em> find a unique name.  A <code>Scripting.Dictionary</code> would be my weapon of choice for it's fast hash lookups, and I'd extract it to it's own function:</p>

<pre><code>Private Function GetUniqueSheetName(book As Workbook, ByVal proposed As String) As String
    Dim existing As New Scripting.Dictionary
    Dim sheet As Worksheet

    For Each sheet In book.Worksheets
        existing.Add sheet.Name, vbNull
    Next

    Dim unique As String
    unique = proposed
    Dim suffix As Long
    Do
        If Not existing.Exists(unique) Then
            GetUniqueSheetName = unique
            Exit Function
        End If
        suffix = suffix + 1
        unique = proposed &amp; " " &amp; suffix
    Loop
End Function
</code></pre>

<p><strong>2</strong> - The code under the banner...</p>

<pre><code>'--------------------------------------------------
'This section determines how many rows and columns the matrix has
</code></pre>

<p>...can be pretty much eliminated - there are much easier methods for determining the last row and column of a Worksheet.  You can simply do this:</p>

<pre><code>With Sheets(mtrx)
    'Number of rows in column A
    rotot = .Range("A" &amp; .Rows.Count).End(xlUp).Row
    'Number of columns in row 1
    coltot = .Range("XFD" &amp; 1).End(xlToLeft).Column
End With
</code></pre>

<p><strong>3</strong> - I've already spent <em>way</em> to much time on this to do another example refactor (hopefully another user will tackle it), but the workhorse code under the banner...</p>

<pre><code>'--------------------------------------------------
'This section actually does the conversion
</code></pre>

<p>... is also really inefficient.  Instead of writing individual values, I'd lean more toward generating a <code>Collection</code> of rows to write, and then writing the whole thing at once.  Reading from and writing to cells are <em>incredibly</em> expensive operations when there are alternatives. You can get an immediate performace gain by reading the entire working range from <code>Sheets(mtrx)</code> into an array...</p>

<pre><code>Dim matixValues As Variant
With Sheets(mtrx)
    matixValues = .Range(.Cells(rowz + 1, colz + 1), .Cells(rowtot, coltot)).Value
End With
</code></pre>

<p>...and then working with the array instead:</p>

<pre><code>For col = LBound(matixValues, 2) To UBound(matixValues, 2)
    For ro = LBound(matixValues, 1) To UBound(matixValues, 1)
        If matixValues(ro, col) &lt;&gt; 0 Or all = vbNo Then
        '...
        End If
    Next
Next
</code></pre>

<hr>

<h2>Miscellaneous</h2>

<p><strong>1</strong> - Use built in constants. You do this in some places, like...</p>

<pre><code>InputBox("How many HEADER ROWS?" &amp; vbNewLine ...
</code></pre>

<p>...and...</p>

<pre><code>If colz = vbNullString Then GoTo EndMatrixMacro
</code></pre>

<p>...but then use <code>""</code> and <code>Chr(10)</code> elsewhere.  In the first case, <code>vbNullString</code> is a better choice because of how the compiler treats them (building a string literal instead of using a null pointer).  In the second case there are 2 issues.  First, you are making a function call that will always not only return the same value (<code>vbLf</code>), but return it as a <code>Variant</code> instead of a <code>String</code> (see the section on <a href="https://stackoverflow.com/documentation/vba/877/declaring-variables/2960/type-hints#t=201608262343260109946">String-returning built-in functions here</a>). This is essentially the same as <code>CStr(Chr(10))</code>, because you are using it with a string concat operator (<code>&amp;</code>) - and in fact, your usages end up getting cast <em>back</em> to <code>Variant</code>s because of the implicit <code>Variant</code> declarations.</p>

<p><strong>2</strong> - Make sure you eliminate the possibility of unintentionally changing the Application state to the extent possible.  You call <code>Application.Calculation = xlCalculationManual</code>, but don't have any error handling for the code section that lies between it and the line where you turn it back on.  <code>Application.ScreenUpdating</code> will (usually) correct itself when execution stops. <code>Application.Calculation</code> will not - it will persist with the whatever you set it to.</p>

<p>Best practice would actually be not <em>assuming</em> that the user has <code>Application.Calculation</code> set to <code>xlCalculationAutomatic</code>.  Instead, cache the current setting and revert to it, i.e.:</p>

<pre><code>    On Error GoTo CleanExit
    Dim calcState As XlCalculation

    calcState = Application.Calculation
    Application.Calculation = xlCalculationManual
    '...
CleanExit:
    Application.Calculation = calcState
End Sub
</code></pre>

<p><strong>3</strong> - Only use named parameter notation when you aren't supplying all the parameters. Calls like this...</p>

<pre><code>.Offset(rowOffset:=-1, columnOffset:=0)
</code></pre>

<p>...don't need it, and make it harder to pick out the actual values being passed.  Even if I didn't already know that they are row and column, I can see it with IntelliSense...</p>

<p><a href="https://i.stack.imgur.com/tG0Ah.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/tG0Ah.png" alt="IntelliSense for Offset"></a></p>

<p>...and if I if that didn't help, I should probably be looking it up in either the Object Browser or the documentation. I'd reserve it for cases where you aren't supplying all of the parameters or skipping an optional one.</p>

<p><strong>4</strong> - You don't need to set variables to their default values immediately after declaring them:</p>

<pre><code>Dim sheetExists As Variant
Dim Sheet As Worksheet
Dim iName As Integer

`... nothing to do with iName or sheetExists here.
iName = 0
sheetExists = False
</code></pre>

<p>Note that even though <code>sheetExists</code> is (mis)declared as a <code>Variant</code>, it will still default to <code>False</code> when treated as a <code>Boolean</code>:</p>

<pre><code>Dim foo As Variant
Debug.Print foo = False  'Prints True
</code></pre>
    </div>