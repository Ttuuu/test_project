<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll add :</p>

<ul>
<li>Why not using your <code>vector</code> in your <code>prime(...)</code> function?</li>
<li>Using <code>std::endl</code> sending a <code>'\n'</code> and then flushes the output buffer. So <code>std::endl</code> is more expensive in performance. </li>
<li>Since <code>least_prime_factor</code> can be computed at compile time, maybe try to make it <code>constexpr</code> (plus use an <code>std::array</code> for <code>Primes</code>).</li>
<li>You mix out outputting functions from <code>&lt;iostream&gt;</code> (<code>std::cout</code>) and from <code>&lt;cstdio&gt;</code> (<code>printf(...)</code>); try to be coherent.</li>
<li>Instead of printing <code>"1 x "</code> (and then conditionally <code>"N x "</code> for each value, or <code>" N"</code> if it's the last), just print <code>"1"</code> (and then, unconditionally print <code>" x N"</code> for each)</li>
<li>You can print result directly from <code>factorise</code> instead of <code>ret.push_back(Primes[x]);</code>, so you avoid returning a vector by value and iterate over it.</li>
<li>Don't mix types, neither in comparison operations nor in arithmetic operations. Here, you have <code>long long</code>, <code>int</code>, <code>double</code> (as the result of <code>sqrt(..)</code>, but also with <code>1e7</code>) and <code>unsigned int</code> (<code>vector::size()</code> return a <code>vector::size_type</code> which is an <code>unsigned int</code>). Mixing signed and unsigned, integer and floating point, in arithmetic or comparison is a very bad idea.</li>
</ul>

<p>And, yeah, try to space your code, it'll help readability.</p>

<p>note: I fixed indent in your code for a more readable, but it seems you rejected :/</p>
    </div>