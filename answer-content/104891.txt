<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start by analysing the current algorithm.</p>

<p>Each day that plants are dying, we iterate through all living plants. So the worst case would be if only one plant dies each day. In this case, we can see that the algorithm will take \$O(N^2)\$ time.</p>

<p>For example, the input sequence \$ 1, 2, 2, 2, 2, \ldots, 2\$ will exhibit this quadratic behaviour.</p>

<p>From the problem statement, \$1 \leq N \leq 10^5\$, so we will have to do better than \$O(N^2)\$.</p>

<hr>

<p>We start with the easy case, when the current plant has more pesticide in it than the one to its immediate left. Then we know that the current plant dies after one day.</p>

<p>Otherwise, we look for the right-most plant to the left of us that has less pesticide than the current plant.</p>

<p>If there is no such plant then we know that the current plant will never die.</p>

<p>So suppose there is such a plant, and let's say it's at index \$i\$. I claim that the current plant (at index \$k\$) will die on day
$$\max \left\{ d[j] \,\middle|\, i &lt; j &lt; k \right\} + 1,$$
where \$d[j]\$ is the day on which plant \$j\$ dies.</p>

<p>What this means is that for plant \$k\$ to die, I have to wait for all the plants between plant \$i\$ and plant \$k\$ to die, at which point \$i\$ will be to the immediate left of \$k\$, and then I have to wait one more day.</p>

<p>So far, we still have an \$O(N^2)\$ algorithm. If we think about the input \$ 1, 2, 2, 2, 2, \ldots, 2\$, for every plant we have to iterate all the way back to the start to find the plant with less pesticide in it.</p>

<hr>

<p>Let's think about the following input:</p>

<p>$$ 2, 5, 1, 10, 3, 11 $$</p>

<p>The first plant will never die, and the second plant will die on day one.</p>

<p>For the third plant, we look at the previous two values and see that they both have more pesticide than the third, so the third plant will never die. The key here is that <em>we can now forget that the first and second plants ever existed</em>.</p>

<p>Why? Because any plant waiting for the first or second plant to die will have to wait for the third plant to die first.</p>

<p>The fourth plant dies on day one.</p>

<p>For the fifth plant, we look at the previous two values, 1 and 10. The fifth plant will die a day after the 10, and again we can forget the 10 ever existed, because any plant waiting for the 10 to die will have to wait for the 3 to die first.</p>

<hr>

<p><strong>Spoilers</strong></p>

<p>How would this look in code? Suppose we have a stack containing pairs of the amount of pesticide in the plant and the day on which the plant dies.</p>

<p>If we are in the interesting case, where the plant doesn't die on day one, then we keep popping elements off the stack while they have at least as much pesticide as the current plant. While we're popping elements, we keep track of the maximum number of days it takes for these plants to die.</p>

<p>If we have popped all elements off the stack, the current plant will never die. Otherwise, the plant will die on the maximum number of days that we've seen, plus one.</p>

<p>One we have calculated the number of days it takes for the plant to die, we push it onto the stack.</p>

<p>Since exactly \$N\$ elements are pushed onto the stack, we cannot have more than \$N\$ pops. So we can see that this algorithm is \$O(N)\$.</p>
    </div>