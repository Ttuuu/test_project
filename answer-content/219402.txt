<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some general tips:</p>

<ol>
<li>The runner should use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> to parse arguments. It most definitely should not hardcode passwords.</li>
<li><code>(object)</code> is redundant in Python 3 class definitions.</li>
<li><p>I'd recommend running <em>any</em> Python code through Black, flake8 and mypy with a strict configuration like this one:</p>

<pre><code>[flake8]
doctests = true
exclude =
    .git
max-complexity = 5
max-line-length = 120
ignore = W503,E203

[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
<li>You reuse variable names with completely different semantics. This is a really bad idea for understanding what the code is doing and following along even otherwise trivial logic. For example, <code>settings = json.loads(settings)</code> means that settings is originally a <code>str</code>, effectively a serialized JSON object, and afterwards a <code>dict</code>. These have completely different semantics and interaction patterns. The easiest way to deal with this is to treat almost every variable as <em>immutable,</em> and naming the variables according to what they <em>really</em> are. For example, <code>settings = json.loads(serialized_settings)</code>.</li>
<li>Names should be descriptive, for example <code>password_database = PasswordDatabase()</code>.</li>
<li>Don't use <code>*args</code> and <code>**kwargs</code> unless you <em>need</em> dynamic parameter lists. Rather than indexing <code>*args</code> you should use named parameters. If they have default values those should go in the method signature.</li>
<li><code>.get(foo, None)</code> can be simplified to <code>.get(foo)</code> - <code>get()</code> returns <code>None</code> by default.</li>
<li><code>if foo is None</code> can in the vast majority of cases be changed to the more idiomatic <code>if foo</code>.</li>
<li>I would highly recommend using a well-known open format such as the KeePass one for storing this data.</li>
<li><p>This should not be in there:</p>

<pre><code>if not sample == settings["enc_sample_content"]:
    raise ValueError(
        "Cannot open PassDB: incorrect password provided")
</code></pre></li>
<li>There is a lot of encoding and decoding happening, which greatly obfuscates the state and looks unnecessary in several places.</li>
<li>I would not trust this sort of code without a comprehensive test suite.</li>
</ol>

<p>With the caveat that I'm not a cryptographer:</p>

<ol>
<li>Salting does not make sense unless you're hashing the password (which you don't want to do in this case). I'll refrain from any other comments on how the salting is done unless someone corrects this.</li>
</ol>
    </div>