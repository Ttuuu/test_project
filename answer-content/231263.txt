<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since I wasn't previously aware of the SQL Server 2008 requirement, I've added a segment about SQL Server 2008 here. I still endorse everything in my original review, and strongly prefer that method.</p>

<p>Overall, I think the premise of the original review is still the best approach:</p>

<ol>
<li>Convert to <code>datetimeoffset</code> with the appropriate time zone</li>
<li>Use that everywhere instead of a raw <code>datetime</code></li>
</ol>

<p>We still have functionality available to us in SQL Server 2008, but not as convenient as <code>AT TIME ZONE</code></p>

<ol>
<li><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/switchoffset-transact-sql?redirectedfrom=MSDN&amp;view=sql-server-ver15" rel="nofollow noreferrer"><code>SWITCHOFFSET</code></a></li>
<li><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/todatetimeoffset-transact-sql?view=sql-server-ver15" rel="nofollow noreferrer"><code>TODATETIMEOFFSET</code></a></li>
</ol>

<p>To use this, I would reformulate the problem into a few steps:</p>

<ol>
<li>Determine the appropriate time zone of the data</li>
<li>Convert the data to be time-zone aware using <code>TODATETIMEOFFSET</code></li>
<li>Swap to UTC using <code>SWITCHOFFSET</code></li>
<li>Get your timestamp</li>
</ol>

<p>When getting a datetime from the timestamp, it'll largely be the same in reverse.</p>

<p>In terms of where you should change things, I think it would look like this:</p>

<ol>
<li>Update <code>dbo.fn_dtLastSundayInMonth</code> to return a <code>date</code> instead of a <code>datetime</code> (b/c we don't have any meaningful time information). </li>
<li>Update <code>dbo.fn_dtIsCEST</code> to return the offset instead of just a bit flag.</li>
<li>Add a new function, <code>dbo.fn_dtToOffset</code> that takes a date, derives the offset, and converts it using <code>TODATETIMEOFFSET</code></li>
<li>Update <code>dbo.fn_dtToEcmaTimestamp</code> and inverse to either consume an offset or convert it inside, and use <code>SWITCHOFFSET</code> as needed if UTC is desired.</li>
</ol>

<p>Otherwise my same general comments apply from the previous review.</p>

<p>I do think that, given the additional complexity vs <code>AT TIME ZONE</code>, you should consider converting your data to include the values as a <code>datetimeoffset</code>. This could either be a computed column (absolutely don't put a UDF in there, as all queries touching the table will tank), or creating a new column entirely, and then gradually transition your applications to use the new column insead of the old one.</p>

<hr>

<p><strong>Note</strong> - the rest of this answer assumes that you can use SQL Server 2016+ features.</p>

<p>You are overcomplicating this problem. There are only two pieces of functionality you need to solve this problem:</p>

<ol>
<li><a href="https://docs.microsoft.com/en-us/sql/t-sql/data-types/datetimeoffset-transact-sql?view=sql-server-ver15" rel="nofollow noreferrer"><code>datetimeoffset</code></a></li>
<li><a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/at-time-zone-transact-sql?view=sql-server-ver15" rel="nofollow noreferrer"><code>AT TIME ZONE</code></a></li>
</ol>

<p>Using <code>datetimeoffset</code> lets you encode the timezone as part of the data. Then you can ignore the complexities of time zone math, and use standard APIs.</p>

<p><code>AT TIME ZONE</code> lets you take an arbitrary <code>datetime</code> or <code>datetimeoffset</code>, and returns a <code>datetimeoffset</code> of the targetted time zone. Two main points here:</p>

<ol>
<li>If the input does not have time zone information, then it will assume the target time zone. <strong>It will handle DST</strong> if necessary (see <a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/at-time-zone-transact-sql?view=sql-server-ver15#remarks" rel="nofollow noreferrer">the docs</a> for your example specifically)</li>
<li>If the input does have time zone information, then it will do whatever time zone math necessary to convert.</li>
</ol>

<p>This turns your operations into:</p>

<pre><code>DECLARE @dtDateTimeInLocal datetimeoffset = @in_DateTime AT TIME ZONE 'CENTRAL EUROPEAN STANDARD TIME';
DECLARE @dtDateTimeUtc datetimeoffset = @dtDateTimeInLocal AT TIME ZONE 'UTC';
DECLARE @timestamp bigint = dbo.fn_dtToEcmaTimestamp( @dtDateTimeUtc );
RETURN @timestamp;
</code></pre>

<p>If manually converting things to UTC is too much to ask of your users, then <code>dbo.fn_dtToEcmaTimestamp</code> can do the <code>AT TIME ZONE 'UTC'</code> and assume that the caller has a time-zone aware value.</p>

<p>If all of your data is already in CEST, you could also update the tables to be <code>datetimeoffset</code> using a similar method. Then moving forward you can always add data to be timezone aware, and this problem goes away.</p>

<p>A few final notes:</p>

<ol>
<li>You should consider not using scalar UDFs, as they are the root of all evil. Use inline table-valued functions instead.</li>
<li>If they are necessary for &lt;&lt;reasons&gt;&gt;, then you should create them <code>WITH SCHEMABINDING</code> for performance reasons</li>
<li>I strongly prefer <code>CREATE OR ALTER</code> instead of this dynamic stuff you have going on with an <code>ALTER</code> later</li>
<li>Instead of leaving test cases as comments, investigate a framework like <a href="https://tsqlt.org/" rel="nofollow noreferrer">tSQLt</a> to write unit tests in. This will make it much easier to do things like verify that my proposed solution doesn't change the behavior.</li>
<li>In <code>dbo.fn_dtLastSundayInMonth</code>, you can just use <a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/eomonth-transact-sql?view=sql-server-ver15" rel="nofollow noreferrer"><code>EOMONTH</code></a> to simplify it a lot</li>
<li>In <code>dbo.fn_dtLastSundayInMonth</code>, you are <a href="https://stackoverflow.com/a/5925176/3076272">overcomplicating</a> your modular arithmatic.</li>
</ol>
    </div>