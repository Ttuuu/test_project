<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<pre><code>def __init__(self, start, end, weight):
</code></pre>

<p>can be</p>

<pre><code>def __init__(self, start: Vertex, end: Vertex, weight: float):
</code></pre>

<p>depending on a few things, including the order of declaration of your classes, <code>Vertex</code> might need to be <code>'Vertex'</code> here.</p>

<p>For another example, this</p>

<pre><code>def vertex_from_name(self, name):
</code></pre>

<p>can turn into</p>

<pre><code>def vertex_from_name(self, name: str) -&gt; Vertex:
</code></pre>

<h2>Efficient lookups</h2>

<p>To make this more efficient:</p>

<pre><code>    return next((v for v in self.vertices if v.name == name), None)
</code></pre>

<p>Consider maintaining a string-to-<code>Vertex</code> dictionary to reduce this lookup from O(n) to O(1) in time.</p>

<h2>Premature materialization</h2>

<p>These:</p>

<pre><code>    return [e for e in self.edges if (e.start == v) or (e.end == v)]


    return [e.start for e in self.edges if e.end == v] + [e.end for e in self.edges if e.start == v]
</code></pre>

<p>require that the entire results be stored to an in-memory list. To return the generator directly and reduce this memory requirement, the first one can be</p>

<pre><code>    return (e for e in self.edges if v in {e.start, e.end})
</code></pre>

<p>and the second one can be</p>

<pre><code>yield from (e.start for e in self.edges if e.end == v)
yield from (e.end for e in self.edges if e.start == v)
</code></pre>

<h2>Set-membership tests</h2>

<p>This:</p>

<pre><code>""" Given a list of lists, merges e1 root list with e2 root list and returns merged list."""
</code></pre>

<p>is probably better-expressed as accepting a list of <code>set</code>, not a list of <code>list</code>s. That will make these two tests:</p>

<pre><code>        if e1 in i:
            xroot = i
        if e2 in i:
            yroot = i
</code></pre>

<p>faster. This:</p>

<pre><code>    self.sets = [[v] for v in self.vertices]
</code></pre>

<p>would then become</p>

<pre><code>    self.sets = [{v} for v in self.vertices]
</code></pre>

<h2>Strings as iterables</h2>

<p>This</p>

<pre><code>v = [Vertex(x) for x in ["A", "B", "C", "D", "E", "F"]]
</code></pre>

<p>can be</p>

<pre><code>v = [Vertex(x) for x in 'ABCDEF']
</code></pre>

<h2>Convenience functions</h2>

<p>Consider making a convenience function to turn this</p>

<pre><code>g.add_edge("A", "B", 9)
g.add_edge("A", "C", 12)
g.add_edge("A", "D", 9)
g.add_edge("A", "E", 11)
g.add_edge("A", "F", 8)
g.add_edge("B", "C", 10)
g.add_edge("B", "F", 15)
g.add_edge("C", "D", 8)
g.add_edge("D", "E", 14)
g.add_edge("E", "F", 12)
</code></pre>

<p>into</p>

<pre><code>g.add_edges(
    ("A", "B", 9),
    ("A", "C", 12),
    ("A", "D", 9),
    ("A", "E", 11),
    ("A", "F", 8),
    ("B", "C", 10),
    ("B", "F", 15),
    ("C", "D", 8),
    ("D", "E", 14),
    ("E", "F", 12),
)
</code></pre>
    </div>