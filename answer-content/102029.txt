<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I second what <a href="https://codereview.stackexchange.com/users/30786/vince-panuccio">Vince Panuccio</a> stated in his <a href="https://codereview.stackexchange.com/a/102028/29371">answer</a>   </p>

<blockquote>
  <p>I don't think this class should have a reason to exist. A key is just that, a key. If you have duplicate keys and duplicate values what you're essentially after is a grouping or a dictionary or with a set or list as its value.  </p>
</blockquote>

<hr>

<p><strong>Bug alert</strong>  </p>

<p>This will break with an <code>StackOverflowException</code> </p>

<blockquote>
<pre><code>public TValue this[TKey index]
{
    get
    {
        this.ContainsKey(index);
        return this[index];
    }
    set
    {
        this[index] = value;
    }
}  
</code></pre>
</blockquote>

<p>by calling <code>this.ContainsKey()</code> which again refers to the <code>Item</code> (<code>this[TKey]</code>) property  and if we would omit this call, it would just break again with a <code>StackOverflowException</code> based on the <code>return this[index];</code> which is reffering the property getter itself again.  </p>

<p>Setting aside this <strong>big bug</strong>, an argument named <code>index</code> usually indicates some kind of numerical type. So a better parameter name would be in this case just <code>key</code>.   </p>

<hr>

<p>The ctor </p>

<blockquote>
<pre><code>public DuplicateDictionary(List&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; list)
{
    foreach(KeyValuePair&lt;TKey, TValue&gt; kvp in list)
    {
        this.Add(kvp);
    }
}  
</code></pre>
</blockquote>

<p>could be easily improved by using the <code>AddRange()</code> method of the <code>List&lt;T&gt;</code> like so  </p>

<pre><code>public DuplicateDictionary(List&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; list)
{
    this.AddRange(list);
}
</code></pre>

<p>but that isn't really needed in this way because you also have a ctor which takes an <code>Dictionary&lt;TKey, TValue&gt;</code> as a parameter. I suggest to replace both ctors by a different one which only takes an <code>IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;</code> like so  </p>

<pre><code>public DuplicateDictionary(IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; items)
{
    this.AddRange(items);
}  
</code></pre>

<p>which can be called using a <code>Dictionary</code> and a <code>List</code>.  </p>

<p>This looks good but we can still do better by using the ctor of the <code>List</code> instead like so  </p>

<pre><code>public DuplicateDictionary(IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; items)
    : base(items)
{  } 
</code></pre>
    </div>