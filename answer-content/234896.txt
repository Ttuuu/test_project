<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid <code>using</code> too much <code>namespace</code></h1>

<p>You risk having identical names mapped onto each other. Either be more selective in what you are <code>using</code>, or create short aliases if you want to avoid typing long namespace names, like:</p>

<pre><code>namespace fs = ghc::filesystem;
</code></pre>

<p>You already ran into this problem with <code>is_empty()</code>.</p>

<h1>Don't <code>#include</code> headers you don't need</h1>

<p>In <code>wrap.h</code>, you <code>#include &lt;ghc/filesystem.hpp&gt;</code>, but nothing in that header file uses it. You should remove it, unless you plan to make the functions take <code>ghc::filesystem::path</code>'s as parameters instead of <code>std::string</code>s.</p>

<h1>Use <code>enum class</code> where possible</h1>

<p>A regular <code>enum</code> is not very type-safe. Prefer an <code>enum class</code>.</p>

<h1>Be consistent in how you return results</h1>

<p>Your private functions just return <code>std::vector&lt;std::string&gt;</code>, but the public functions take a reference to a <code>std::vector&lt;std::string&gt;</code>. Why is there a difference? Since the vector of strings is the result, just <code>return</code> it everywhere.</p>

<h1>Make the private member functions <code>static</code></h1>

<p>There is no reason for the private member functions not to be <code>static</code> in your class. But, then you'll realize that everything is <code>static</code>, which brings us to:</p>

<h1>There is no need to use a <code>class</code></h1>

<p>You are not storing any state in <code>class Wrap</code>, and all functions are or can be made <code>static</code>. So there is no reason to use a <code>class</code> here at all. You could move all the public member functions out of the class into <code>namespace dir</code>. The private member functions don't have to appear in <code>wrap.h</code> at all anymore.</p>

<h1>Why the underscores?</h1>

<p>Why write <code>FILE_</code> and <code>type_</code>? Unless they are macros you should be able to declare those symbols in your own classes and namespaces without the trailing underscore.</p>

<h1>Avoid redundant tests for empty directories</h1>

<p>There is no need to test for the directory being empty; your loops handle empty directories perfectly fine. You are adding unnecessary overhead in the common case where a directory is not empty, and if it is empty, your loops will just do nothing, so there is no performance penalty.</p>

<h1>Use range-for where appropriate</h1>

<p>You can use range-for to iterate over a directory, just like an STL container. So for example, in <code>Wrap::number_of_entities_in_directory()</code>, you can write:</p>

<pre><code>for(auto entity: directory_iterator(secure_file_path)) {
    if(type == mode::FILE &amp;&amp; is_regular_file(entity))
        ++counter;
    else if(type == mode::FOLDER &amp;&amp; is_directory(entity))
        ++counter;
}
</code></pre>

<h1>Consider using STL algorithms</h1>

<p>Instead of writing your own loops, you could use STL algorithms. In fact, the whole function could be rewritten as:</p>

<pre><code>#include &lt;algorithm&gt;
namespace fs = ghc::filesystem;
...
int Wrap::number_of_entities_in_directory(string file_path, mode type) {
    directory_iterator it(file_path);
    return std::count_if(fs::begin(it), fs::end(it), [type](const directory_entry &amp;ent){
        return type == FOLDER ? is_directory(ent) : is_regular_file(ent);
    });
}
</code></pre>
    </div>