<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code Style</strong></p>

<p>Use the standard JavaDoc markup when writing comments. You will be able to generate documentation and it allows you to use ready made tools for documenting stuff like method parameters and related classes. Also people expect to see JavaDoc style comments and are used to reading them, so by rolling out your own style you're adding unnecessary cognitive load to the reader.</p>

<pre><code>/**
 * Creates a new Song with the specified information.
 *
 * @param name Song name
 * @param singer Singer name
 * @param price Song price, in USD.
 * @param numTracks I have no idea why a song would have several tracks. :)
 */
public Song(String name, String singer, double price, int numTracks) {
</code></pre>

<p>Maybe you meant the <code>numTracks</code> parameter to be <code>trackNumber</code>? But is it a track number in a recording the song was in or is it a sorting number in your collection? The name should describe the purpose of the parameter more accurately.</p>

<p>Fields that are not meant to be changed should be final. I would rather see each field on their own line.</p>

<pre><code>private final String title;
private final String artist;
</code></pre>

<p><a href="https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency">You should not use float or double types for currency</a>. I would also rather attach the currency code to any monetary value too, but that's probably just me working in the banking sector.</p>

<pre><code>/**
 * Song cost in cents (USD).
 */
private int cost;
</code></pre>

<p>When initializing fields in a constructor, you should use the same names for the constructor parameters as you have in the fields. That way the reader does not have to wonder what parameter goes to which field and you don√§'t have to spend time trying to figure out synonyms. And in case you were wondering, using "this." in this context is not code clutter.</p>

<pre><code>public Song(String title, String artist, int cost, int tracks) {
    this.title = title;
    this.artist = artist;
    this.cost = cost;
    this.tracks = numTracks;
}
</code></pre>

<p>You are creating your own list data type in the <code>SongCollection</code> class. The class is now responsible for both being a song collection and implementing an extensible list data type. If you want to reinvent the wheel, you should extract the list data type into a separate class to maintain <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="noreferrer">single responsibility principle</a>. Otherwise just use the java.util.ArrayList class.</p>

<pre><code>public class SongCollection {
    private List&lt;Song&gt; collection = new ArrayList&lt;&gt;();
</code></pre>

<p>You're duplicating the <code>Song</code> constructor in the <code>SongCollection</code> class by requiring the user to pass all the same parameters to <code>addSong(...)</code> as you have in the constructor for Song. Instead, have addSong accept just a Song object.</p>

<pre><code>public void addSong(Song song) {
    ...
</code></pre>

<p><strong>Song Formatting</strong></p>

<p>The <code>toString()</code> method is usually nothing more than a debugging aid. As the JavaDoc says: the result should be a concise but informative representation that is easy for a person to read. You're placing the whole complex formatting logic into the toString method, which again breaks the single responsibility principle and makes the class hard to maintain (the SongCollection class has three responsibilities at the moment). Instead you should encapsulate the formatting into a separate <code>SongFormatter</code> and <code>SongCollectionFormatter</code> classes. The topic is also fairly complex, so it's probably worth another post once you get it done.</p>
    </div>