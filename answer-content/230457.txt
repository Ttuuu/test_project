<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @AustinHastings pointed out, the itertools.product solution below doesn't work right unless you start at the beginning.  So here's an alternate solution:</p>

<pre><code>DIGIT  =  '0123456789'
LETTER = 'ACDEFGHJKMNPQRTUVWXYZ'
DIGLET = DIGIT + LETTER

def mbi_gen(start=None):
    pattern = [DIGIT[1:],   # leading non-zero digit
               LETTER,
               DIGLET,
               DIGIT,
               LETTER,
               DIGLET,
               DIGIT,
               LETTER,
               LETTER,
               DIGIT,
               DIGIT
              ]
    if start:
        indices = [pattern[i].index(c) for i,c in enumerate(start)]
    else:
        indices = [0]*len(pattern)

    while True:
        yield ''.join(pat[i] for pat,i in zip(pattern, indices))

        for i in range(len(indices)-1, -1, -1):
            indices[i] += 1
            if indices[i] &lt; len(pattern[i]):
                break

            indices[i] = 0
</code></pre>

<p><code>mbi_gen()</code> is a generator and can be used like so:</p>

<pre><code>MBI = mbi_gen()

for n in range(10000):
    print(next(MBI))
</code></pre>

<p>or to generate a list of 10000 MBIs:</p>

<pre><code>MBIs = list(it.islice(mbi_gen('3C12D34EF56'), 10000)
</code></pre>

<h3>itertools.product()</h3>

<p>This is a task made for <code>itertools.product()</code>.  As the docs say, <code>product(A, B, C)</code> is equivalent to <code>((a,b,c) for a in A for b in B for c in C)</code>.  The <code>c</code> cycles the fastest, then 'b' and <code>a</code> is the slowest.  Like an odometer.  </p>

<pre><code>import itertools as it

DIGIT  =  '0123456789'
LETTER = 'ACDEFGHJKMNPQRTUVWXYZ'
DIGLET = DIGIT + LETTER

def mbi_gen(start=None):
    pattern = [DIGIT[1:],   # leading non-zero digit
               LETTER,
               DIGLET,
               DIGIT,
               LETTER,
               DIGLET,
               DIGIT,
               LETTER,
               LETTER,
               DIGIT,
               DIGIT
              ]

    yield from (''.join(seq) for seq in it.product(*pattern))
</code></pre>
    </div>