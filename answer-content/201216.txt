<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Following the input from Joop Eggen, I believe the below algorithm works and it is much faster than the original solution in the question. Making a list of all permutations will have an enormously large number of entries for large numbers (like 125658452143250) and will probably stall your computer.</p>

<pre><code>import itertools


def next_smaller(number):
    new_number = number
    digit = [int(i) for i in str(number)]
    digits = len(digit)-1
    index_1 = digits-1

    while index_1 &gt;= 0:
        index_2 = digits
        while index_2 &gt; index_1:
            if digit[index_2] &lt; digit[index_1]:
                digit[index_2], digit[index_1] = digit[index_1], digit[index_2]
                _first = digit[0:index_1+1]
                _second = digit[index_1+1:]
                _second.sort(reverse=True)
                digit = _first + _second
                new_number  = int(''.join(str(i) for i in digit))
                print(f'the next smaller number is: {new_number}')
                return new_number

            else:
                index_2 -= 1

        index_1 -= 1

    return new_number


def main():
    number = int(input('give me a number please: '))
    solution=[number]

    counter = 0

    while counter&gt;-1:
        new_number = next_smaller(number)
        if new_number &lt; number:
            number = new_number
            solution.append(number)
            counter += 1

        else:
            print(f'smallest number is found ...\n'
                  f'number of smaller numbers is {counter}')
            break

    print(f'solution is \n {solution}')


if __name__ == "__main__":
    main()
</code></pre>

<p>Thanks to Ruud van der Ham below is a more Pytonic version of the function:</p>

<pre><code>def next_smaller(number):
    new_number = number
    digit = list(str(number))  # there is no need to convert to numbers. Characters are ok.
    digits = len(digit)-1

    for index_1 in range(digits-1, -1, -1):  # this is prefered over while
        for index_2 in range(digits, index_1-1, -1):  # this is prefered over while
            if digit[index_2] &lt; digit[index_1]:
                digit[index_2], digit[index_1] = digit[index_1], digit[index_2]
                _first = digit[0:index_1+1]
                _second = digit[-1:index_1:-1]  # by just backward slicing, there's no need for sort
                digit = _first + _second
                new_number = int(''.join(digit))
                return new_number
    return new_number
</code></pre>
    </div>