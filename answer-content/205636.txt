<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Its pretty good:</p>

<p>Don't do this:</p>

<pre><code>using namespace cv;
using namespace std;
</code></pre>

<p>Its a bad habit that one day will get you into a lot of trouble. The reason the namespace names are so short is so that adding <code>std::</code> or <code>cv::</code> before identifiers is not overburdensome.</p>

<p>Read more about the issues: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std” considered bad practice?</a></p>

<p>I suppose this is valid:</p>

<pre><code>int main(int argv, char** argc) {
</code></pre>

<p>But most people use this:</p>

<pre><code>int main(int argc, char* argv[]) {
                         ^^^^   =&gt; argv: argument value
                       ^     ^^ =&gt; Easier to see its an array of pointers rather **
             ^^^^               =&gt; argc: argument count
</code></pre>

<h2>Declare variables at point of usage.</h2>

<p>In C++ we don't tend to declare all the variables at the top of the function. It is much nicer to declare them just before you use them. Remember all objects have constructors that are run so declaring it before you need it may cost you in execution if you don't need it.</p>

<p>But the main reason is that types are important. If you declare it at the point you use it then it becomes easy to see the type and thus reason about it. If I have to scroll back to the top of the function it makes it hard to keep track of thing.</p>

<h2>Streams can detect when they have gone bad.</h2>

<p>Not opening the file is not the only type of error. So only testing for that seems like a short cut that may backfire.</p>

<pre><code>    if (!textFile.is_open()) {
        return -1;
    }
</code></pre>

<p>I would use:</p>

<pre><code>    if (!textFile) {    // If a std::fstream is used in a boolean context
        return -1;      // it converts itself to bool be checking is_good()
    }                   // which will fail if you can't read from it in any
                        // way.
</code></pre>

<p>Not sure if that is true for <code>VideoCapture</code> type (have a look). But given the read works like a std::stream (see the while loop) I am suspecting it does.</p>

<pre><code>    if (!vid.isOpened()) {
        return -2;
    }
</code></pre>

<h3>Prefer pre-increment</h3>

<pre><code>        for (int i = 0; i &lt; curFrame.rows; i += 1) {
            for (int j = 0; j &lt; curFrame.cols; j += 1) {
</code></pre>

<p>Sure that works. But prefer <code>++i</code> (or <code>++j</code>). It is more idiomatic. Also when you start incrementing using iterators the pre-increment is the cheapest increment.</p>

<h2>Don't need found</h2>

<pre><code>                bool found = false;
                if (curPixel[j][0] != pastPixel[j][0]) {
                    numDiff += 1;
                    found = true;
                } else if (!found &amp;&amp; curPixel[j][1] != pastPixel[j][1]) {
                    numDiff += 1;
                    found = true;
                } else if (!found &amp;&amp; curPixel[j][2] != pastPixel[j][2]) {
                    numDiff += 1;
                }
</code></pre>

<p>Each of those pieces of code are completely unique. Because you use <code>else</code> only one of those branches can be executed.</p>

<p>I would simplify and write as:</p>

<pre><code>            numDiff += ((curPixel[j][0] != pastPixel[j][0]) ||
                        (curPixel[j][1] != pastPixel[j][1]) ||
                        (curPixel[j][2] != pastPixel[j][2]))  ? 1 : 0;
</code></pre>

<p>Based on Toby's comments this can be simplified too:</p>

<pre><code>            numDiff += curPixel[j] != pastPixel[j] ? 1 : 0;
</code></pre>

<h2>Cloning is probably expensive</h2>

<pre><code>        pastFrame = curFrame.clone();
</code></pre>

<p>Have your tried to see if a move operation exists?</p>

<pre><code>        pastFrame = std::move(curFrame);
</code></pre>

<h2>Don't manually close files</h2>

<pre><code>    textFile.close();
</code></pre>

<p>Unless you are checking to see if the close worked and generating an error message when it fails. Otherwise just let the constructor call close and throw away any potential exceptions that are generated.</p>

<p>On the same note. Do you really need to manually release the <code>vid</code>?</p>

<pre><code>    vid.release();
</code></pre>

<h2>Version 2</h2>

<pre><code>#include "opencv2\opencv.hpp"
#include &lt;fstream&gt;

int main(int argc, char* argv[])
{
    std::ofstream textFile("diffs.txt");    
    if (!textFile.is_open()) {
        return -1;
    }

    cv::VideoCapture vid("E:\\videos\\video.mkv");
    if (!vid.isOpened()) {
        return -2;
    }

    int numFrames = 0;

    cv::Mat pastFrame;
    vid.read(pastFrame);

    cv::Mat curFrame;
    while (vid.read(curFrame)) {
        int numDiff = 0;
        for (int i = 0; i &lt; curFrame.rows; ++j) {

            cv::Vec3b* curPixel = curFrame.ptr&lt;cv::Vec3b&gt;(i);
            cv::Vec3b* pastPixel = pastFrame.ptr&lt;cv::Vec3b&gt;(i);

            for (int j = 0; j &lt; curFrame.cols; ++j) {
                numDiff += curPixel[j] != pastPixel[j] ? 1 : 0;
            }
        }
        numFrames += 1;
        double size = curFrame.rows * curFrame.cols;
        textFile &lt;&lt; numFrames &lt;&lt; ","
                 &lt;&lt; fixed 
                 &lt;&lt; setprecision(2) &lt;&lt; numDiff / size * 100
                 &lt;&lt; "\n";
        pastFrame = curFrame.clone();
    }
}
</code></pre>
    </div>