<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your concept of "string" seems incomplete.  I would look to firm up that definition and precisely match the need.  Is <code>""</code> a string?  Do you want "valid identifiers" (<code>/^[^\d\W]\w+$/</code>) or "plausible ASCII words"  (<code>/^[A-Za-z]+$/</code>) or just "not numbers"  (<code>!/ ^ ( [+-]? \d* \.? \d+ (?:[Ee][+-]?\d+)? ) $/x</code>)?  </p>

<p>I like <code>use warnings FATAL =&gt; 'all';</code> so that I don't miss a warning in the midst of other output.  </p>

<p>A fat arrow between arguments of different purpose can enhance readability.</p>

<p>Coding in functional style (with <code>grep</code> and <code>map</code> instead of <code>@output</code>) is a natural fit to this kind of problem.  </p>

<p>Plain old recursion is suited to the task and would obviate the need for experimental features.  </p>

<p>Having <code>extract_strings</code> take a ref (as it does now) and return a list simplifies the logic even further.</p>

<pre><code>print join ', ' =&gt; extract_strings($nested);

sub extract_strings {
    grep /^[a-zA-Z]/ =&gt; map { ref eq 'ARRAY' ? extract_strings($_) : $_ } @{ $_[0] } 
}
</code></pre>

<p>If returning a ref is necessary, wrap and unwrap accordingly:</p>

<pre><code>sub extract_strings {
    [ grep /^[a-zA-Z]/ =&gt; map { ref eq 'ARRAY' ? @{ extract_strings($_) } : $_ } @{ $_[0] } ]
}
</code></pre>
    </div>