<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>
<pre><code>        if (intersects) {
            isSingle = false;
            break;
        }
</code></pre>
<p>This looks like a bug. The variable <code>isSingle</code> is already false. Setting it to false here does nothing.</p>
<h2>Code Review:</h2>
<p>You use <code>std::vector</code> but don't include its header.</p>
<pre><code>    std::vector &lt;Rect&gt; overlaps;
</code></pre>
<p>You should fix that.</p>
<hr>
<p>References and Const correctness.</p>
<p>This is a big part of C++.</p>
<ol>
<li><p>If you are not modifying an object, prefer to use reference than making a copy of an object.</p>
</li>
<li><p>Prefer const references over normal references to prevent accidental modification.</p>
<p>for (auto rect_1: detected) {</p>
</li>
</ol>
<p>Here you are making a copy of the object from the array detected into the object <code>rect_1</code>. Personally I would use a const reference to prevent the overhead of a copy:</p>
<pre><code>for (auto const&amp; rect_1: detected) {
</code></pre>
<hr>
<p>The code looks mostly fine:</p>
<p>I think the only bug is here:</p>
<pre><code>            if (rect_1 == rect_2) {
                continue;
            }
</code></pre>
<p>This tells you if two rectangles are equivalent not if they are the same rectangle. If you have two distinct but otherwise identical rectangle then by my logic they would overlap and thus not be in the single's list.</p>
<p>So you need a way to determine if these are the same object. Personally I would do that by changing your <code>for</code> loops to use references and then comparing the objects' addresses.</p>
<pre><code>    for (auto const&amp; rect_1: detected) {
              ^^^^^^
        ...
        for (auto const&amp; rect_2: detected) {
                  ^^^^^^
            if ( &amp; rect_1 ==  &amp; rect_2) {
                ^^^          ^^^
                continue;
            }

            test(rect_1, rect_2);
</code></pre>
<p>Your other alternative is to make sure you never compare an object with itself. This also brings into mind that you do twice as many comparisons as you need to. You compare every rectangle against every other rectangle. But if <code>A &amp; B</code> overlap then we already know that <code>B &amp; A</code> will overlap.</p>
<pre><code>for(std::size_t loop = 0l; loop &lt;  detected.size(); ++loop) {
    for(auto check = loop + 1; check &lt; detected.size(); ++check) {
        test(detected[loop], detected[check]);
</code></pre>
<hr>
<blockquote>
<p>in the code below "...object addresses" -- aren't <code>rect_1</code> and <code>rect_2</code> references already? If so, why can't we just do <code>if (rect_1 == rect_2)</code></p>
</blockquote>
<p>No. Because the <code>==</code> is supposed to compare the equality (is the state the same) of two objects. It is not supposed to be a test of equivalence (is it the same object).</p>
<p>Note: You can declare <code>operator==</code> to test if the objects are the same but that would be terrible practice and would cause a lot of issues with people expecting the normal operation. So don't do that. The above statement is said assuming you are following the normal idioms of the language.</p>
<p>I assume you are coming from a Java like background. The term <em>reference</em> in C++ has a different meaning than in Java. A reference means another name for an object (they are not like Java references (which in C++ we would call <em>pointers</em>). So a reference is another name for an object but the test <code>operator==</code> will compare if the two objects' state are the same (not if they are the same object).</p>
<blockquote>
<p>Also, if I use <code>auto const&amp;</code>, I would have to change my return type to <code>vector&lt;Rect&amp;&gt;</code>...is that idiomatic? I think the OpenCV API expects <code>vector&lt;Rect&gt;</code></p>
</blockquote>
<p>No. You can pass a reference to the vector and it will copy the object into the vector. You don't want to hold references in a vector.</p>
    </div>