<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>funtools.singledispatch()</h3>
<p>Take a look at the code for <code>functools.singledispatch()</code>. It's different in that it dispatches based on the type of the first argument.  Look at how it wraps the first function with an object, so a separate controller object isn't needed.  It also has code to deal with method resolution order if the overloaded functions are at different places in the class inheritance heirarchy.</p>
<h3>inspect.Signature</h3>
<p>In Python callable signatures can be pretty complicated. Args can be positional, keyword, or both, or positional only, keyword only, and can have default values.  Take a look at the <code>inspect.Signature</code> class.  It represents the signature of a callable and has a <code>bind()</code> method that can check if some args match the signature.  It can simplify your code and handle the complications.</p>
<pre><code>from inspect import signature

class OverloadedFunction(object):
    """An overloaded function.

    This is a proxy object which stores a list of functions. When called,
    it calls the first of its functions which matches the given arguments."""

    def __init__(self):
        """Initialize a new overloaded function."""

        self.registry = list()

    def register(self, function):
        """Add a new function and it's signature to the registry."""

        self.registry.append(function, signature(function))

    def __call__(self, *args, **kwargs):
        """Call the first matching registered
        function with the given call parameters."""

        # Get the first function which can handle the given arguments
        for function, signature in self.registry:
            try:
                signature.bind(*args, **kwargs)
                return function(*args, **kwargs)

            except TypeError:
                # If no function can be found, raise an exception
                raise OverloadedFunctionError(
                    "Failed to find matching function for given arguments: "
                    "args={}, kwargs={}".format(args, kwargs)
                )
</code></pre>
    </div>