<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Reviewing your function</h3>

<p>Looking at <code>updateData()</code> shows:</p>

<ol>
<li>(reading signature only) there's no return value. So it does something inside, potentially modifying state (outside your function scope)</li>
<li>(reading body) it has two responsibilities: (1) retrieve data from server via http query; (2) actual update of variable <code>data</code> by assigning retrieved data to it.</li>
<li>it calls itself in two conditional branches. In fact it's a <strong>recursive function</strong>.</li>
</ol>

<p>Improve:</p>

<p>(1) The function could return <em>retrieved data</em>. This would make it a <em>pure function</em> representing query part (of CQRS).</p>

<p>(2) This violates CQRS. You could improve by separating <em>query</em> (http data retrieval) from command (updating state: assigning a new value to a variable).</p>

<p>(3) recursive calls of same HTTP GET request in order to keep state up-to-date  are conceptually called <strong>long-polling</strong>. This polling is usually implemented as consecutive GET requests between <em>intervals</em> using a <em>timer</em>. To reduce unnecessary updates, the polling makes advantage of HEAD requests using <code>modifiedSince</code> header and <code>E-tags</code> (both telling if server has updated data or no change since last fetch).
A resource-friendly alternative to long-polling is the use of <strong>web-socket</strong> protocol.</p>

<h3>Web-sockets</h3>

<p>An event-based communication between server and client via a dedicated socket-connection. This connection is opened once allowing bi-directional asynchronous text-messages. Thus the server can send an update-notification (either including updated data or to allow the client to retrieve data in a separate GET request).</p>

<p>There are web-socket libraries for both JavaScipt (client) and PHP (server).</p>
    </div>