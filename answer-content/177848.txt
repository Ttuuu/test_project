<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a simple implementation but its performance wouldn't scale well for large <code>numberOfCacheCells</code> values.</p>

<p>In particular, <code>_orderList.Remove(toRemove);</code> looks like it's O(n) rather than O(1).</p>

<p>The <code>Dictionary&lt;int, int&gt; _cache</code> operations are probably O(1) because of hashing; it's the <code>List&lt;KeyValuePair&lt;int, int&gt;&gt; _orderList</code> operations that are problematic.</p>

<p>There are never "holes" in the LRU list because you only ever remove the oldest item (the class doesn't support removing arbitrary items). So a "circular list buffer" or double-ended queue is possibly the container that you want to use instead of <code>List</code>. I don't think there is such a container built-in to .NET, though you could implement one yourself. An adequate alternative is <code>LinkedList</code>, adequate because its operations are O(1).</p>

<hr>

<p>I wouldn't normally fuss, except that "cache" sounds like it might be performance-sensitive; and, yes, reading the question you linked to, it does say,</p>

<blockquote>
  <p><strong>Follow up:</strong><br>
  Could you do both operations in <strong>O(1)</strong> time complexity?</p>
</blockquote>

<hr>

<p>Also your <code>get</code> implementation could be slightly faster using <code>_cache.TryGetValue</code> so that it only has to access <code>_cache</code> once.</p>
    </div>