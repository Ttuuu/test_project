<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before I begin, I want to call out something really positive. It's great that you're using parameters when reading data from the database; it's very easy to fall into the trap of using plain string concatenation, and there are liable to be severe consequences in doing so.</p>
<h3>Capitalize public property names in <code>UserDetails</code></h3>
<p>Since these are all public properties, the <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members#names-of-properties" rel="nofollow noreferrer">general guidelines from Microsoft</a> say they should be <code>UserId</code> and <code>AccessId</code>, not <code>userId</code> and <code>accessId</code></p>
<h3>Mark <code>UserDetails</code> as <code>static</code></h3>
<p>Because all the members are <code>static</code>.</p>
<h3>Use <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties" rel="nofollow noreferrer">auto-implemented properties</a> in <code>UserDetails</code></h3>
<p>Since your fields are all private, and there's nothing special in either the getters or the setters, you should use auto-implemented properties. Auto-implemented properties can be used for <code>static</code> properties, and in a <code>static</code> class:</p>
<pre><code>public static class UserDetails {
    public static string UserName {get;set;}
    public static int UserId {get;set;}
    public static int AccessId {get;set;}
}
</code></pre>
<h3>Replace multiple <code>if</code> blocks which test on the same expression (<code>accessId</code>) with a <code>switch</code> in the <code>Dashboard</code> constructor</h3>
<pre><code>switch (userDetails.AccessId) {
    case 2:
        viewRequestedDocumentsToolStripMenuItem.Visible = false;
        adminControlToolStripMenuItem.Visible = false;
        break;
    case 3:
        requestDocumentAmendmentToolStripMenuItem.Visible = false;
        viewRequestedDocumentsToolStripMenuItem.Visible = false;
        labelRoom.Visible = false;
        adminControlToolStripMenuItem.Visible = false;
        break;
    case 4:
        technical.Visible = false;
        labelRoom.Visible = false;
        production.Visible = false;
        settings.Visible = false;
        welcomeText.Text = $"Hello {UserDetails.Username}! \n Your account is set as inactive.";
        break;
}
</code></pre>
<h3>Refactor repetitive "find form or open new" code in <code>Dashboard</code></h3>
<p>You have code like the following multiple times in <code>Dashboard.cs</code>:</p>
<pre><code>var found = findForm("Request Document Amendment");
if (found is null)
{
    var newDoc = new Request_Document_Amendment();
    newDoc.Show();
}
</code></pre>
<p>Firstly, do you expect there to be multiple windows of the same type with different values of the <code>Text</code> property? If not, I think it much more expressive to search for a form of a particular type.</p>
<p>Also, if you pass in type information to <code>findForm</code> and the form is not found, <code>findForm</code> can use that type information to create a new form instance of that type.</p>
<p>Something like this <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generic-methods" rel="nofollow noreferrer">generic method</a>:</p>
<pre><code>private TForm findOrOpenForm&lt;TForm&gt;() where TForm : Form, new() {
    var found = Application.OpenForms.OfType&lt;TForm&gt;().FirstOrDefault();
    if (!(found is null)) {
        found.BringToFront();
        if (found.WindowState == FormWindowState.Minimized) {
            found.WindowState = FormWindowState.Normal;
        }
    } else {
        found = new TForm();
        found.Owner = this;
        found.Show();
    }
    return found; // This allows further actions outside of `findOrOpenForm`; you may not need it.
}
</code></pre>
<p>which you could then call like this:</p>
<pre><code>private void requestDocumentAmendmentToolStripMenuItem_Click(object sender, EventArgs e) =&gt; 
    findOrOpenForm&lt;Request_Document_Amendment&gt;();
</code></pre>
<p>(NB. It may be possible to simplify this even further, but I think it would require some reflection.)</p>
<h3>Consider using <a href="https://dev.mysql.com/doc/dev/connector-net/6.10/html/M_MySql_Data_MySqlClient_MySqlParameterCollection_Add_2.htm" rel="nofollow noreferrer"><code>Add</code></a> with an explicit data type instead of <a href="https://dev.mysql.com/doc/dev/connector-net/6.10/html/M_MySql_Data_MySqlClient_MySqlParameterCollection_AddWithValue.htm" rel="nofollow noreferrer"><code>AddWithValue</code></a></h3>
<p>When you use <code>AddWithValue</code> to add parameters, you're relying on the MySQL provider to figure out the corresponding data type based the object that's been passed in. I know that -- at least in SQL Server -- there may be performance penalties if the algorithm guesses incorrectly (<a href="https://www.dbdelta.com/addwithvalue-is-evil/#:%7E:text=To%20follow%20best%20practices%2C%20avoid,and%20worth%20a%20few%20keystrokes." rel="nofollow noreferrer">link1</a>, <a href="https://blogs.msmvps.com/jcoehoorn/blog/2014/05/12/can-we-stop-using-addwithvalue-already/" rel="nofollow noreferrer">link2</a>); I don't know if the same holds true for MySQL, but I would suggest checking this.</p>
<h3>Consider using a <a href="https://dev.mysql.com/doc/dev/connector-net/8.0/html/T_MySql_Data_MySqlClient_MySqlDataReader.htm" rel="nofollow noreferrer"><code>DataReader</code></a> instead of <code>DataTable</code> and <code>DataAdapter</code></h3>
<p>Per <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/dataadapters-and-datareaders" rel="nofollow noreferrer">Microsoft</a>:</p>
<blockquote>
<p>You can use the ADO.NET DataReader to retrieve a read-only, forward-only stream of data from a database.</p>
</blockquote>
<p>Since you're only retrieving a single row of data, and you're not reusing the retrieved data in any way (outside of the single row check), I think a <code>MySqlDataReader</code> is a better choice here.</p>
    </div>