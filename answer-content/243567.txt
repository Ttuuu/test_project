<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is well structured and division between math core and gui is neat, some my thoughts about math part.
Your <code>Fleissner</code> constructor is the following:</p>

<blockquote>
<pre><code>public Fleissner(String text) {
    this.text = text;
    // determine needed grille-size
    int length = text.length();
    if (length == 0) {
      length++;
    }
    while (true) {
      // grilles with size &gt; 64 cannot be displayed
      if (length &gt; 64) {
        grilleSize = 64;
        substringSize = grilleSize / 4;
        sizeSqrt = (int) Math.sqrt((double) grilleSize);
        break;
      }
      // conditions for grille-size-numbers.
      // Possible are - for example - 2x2, 4x4, 6x6 and 8x8
      if (Math.sqrt((double) length) % 2 == 0 &amp;&amp; length % 4 == 0) {
        grilleSize = length;
        substringSize = grilleSize / 4;
        sizeSqrt = (int) Math.sqrt((double) grilleSize);
        break;
      }
      length++;
    }
  }
}
</code></pre>
</blockquote>

<p>You can construct a maximal grille of 8 X 8 characters, with possible options of 2 X 2, 4 X 4, 6 X 6 and 8 X 8 grilles according to the length of the string you are using; you can achieve the same result in a less complicate the way like this:</p>

<pre><code>public Fleissner(String text) {
    this.text = text;
    final int l = text.length();
    int length = 2;
    for (;l &gt; length * length &amp;&amp; length &lt; 8; length += 2);
    this.grilleSize = length * length;
    this.substringSize = grilleSize / 4;
    this.length = length;       
}
</code></pre>

<p>In your method <code>fleissnerEncryption</code> you have the following lines:</p>

<blockquote>
<pre><code>if (text.length() &lt; grilleSize) {
     while (text.length() &lt; grilleSize) {
        text = text + (char) ('a' + (int) (Math.random() * (('z' - 'a') + 1)));
     }
}
</code></pre>
</blockquote>

<p>You can use <code>Random.ints</code> method and rewrite like this:</p>

<pre><code>int l = text.length();
if (l &lt; grilleSize) {
    new Random().ints(grilleSize - l, 'a', 'z' + 1)
                .forEach(i -&gt; { text = text + (char)i; });
}
</code></pre>

<p>The most complicate part is about writing the String result; you have the following lines:</p>

<blockquote>
<pre><code>String result = "Encrypted:        ";
int length = result.length();
result += "|  Grille:\n";
for (int i = 0; i &lt; out.length; i++) {
  for (int j = 0; j &lt; out[0].length; j++) {
    if (j == sizeSqrt) {
      for (int k = 0; k &lt; length - 2 * sizeSqrt; k++) {
        result += " ";
      }
      result += "|  ";
    }
    result += out[i][j] + " ";
  }
  result += "\n";
}
</code></pre>
</blockquote>

<p>Using <code>String.join</code> method and <code>Collections.nCopies</code> you can rewrite it in the following way:</p>

<pre><code>String result = "Encrypted:        ";
l = result.length();
String spaces = String.join("", Collections.nCopies(l - 2 * length, " "));
result += "|  Grille:\n";
for (char[] row : out) {
    result += String.join(" ", new String(Arrays.copyOfRange(row, 0, length)).split(""));
    result += spaces;
    result += " |  ";
    result += String.join(" ", new String(Arrays.copyOfRange(row, length, row.length)).split(""));
    result += "\n";
}

return result;
</code></pre>

<p>The method <code>fleissnerEncryption</code> can be rewritten like this:</p>

<pre><code>public String fleissnerEncryption() {

    // If text is too short for grille, the grille will be filled up with random chars ('a' - 'z')
    int l = text.length();
    if (l &lt; grilleSize) {
        new Random().ints(grilleSize - l, 'a', 'z' + 1)
                    .forEach(i -&gt; { text = text + (char)i; });
    }

    if (l != grilleSize) {
        text = safeSubstring(text, 0, grilleSize);
    }

    out = encrypt();

    //Convert array "out" to String in desired format
    String result = "Encrypted:        ";
    l = result.length();
    String spaces = String.join("", Collections.nCopies(l - 2 * length, " "));
    result += "|  Grille:\n";
    for (char[] row : out) {
        result += String.join(" ", new String(Arrays.copyOfRange(row, 0, length)).split(""));
        result += spaces;
        result += " |  ";
        result += String.join(" ", new String(Arrays.copyOfRange(row, length, row.length)).split(""));
        result += "\n";
    }

    return result;
}
</code></pre>

<p>The following line in your code :</p>

<blockquote>
<pre><code>int[] ar = {0 * substringSize, 1 * substringSize, 2 * substringSize, 3 * substringSize, 4 * substringSize};
</code></pre>
</blockquote>

<p>It can be rewritten with <code>IntStream</code> :</p>

<pre><code>int[] ar = IntStream.rangeClosed(0, 5).map(i -&gt; i * substringSize).toArray();
</code></pre>

<p>The name of your package <code>Fleissner</code> should be <code>fleissner</code>. By convention, package names usually start with a lowercase letter</p>
    </div>