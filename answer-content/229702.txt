<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Programming:</strong></p>

<ol>
<li>You can see that OpenSSL uses Chinese Remainder Theorem (CRT) for RSA modular exponentiation. CRT gives you approximately 4x speed up.</li>
<li>There is nothing wrong with a small public key exponent <code>e</code> as long as a proper padding applied. Except 2, when public exponent is 2, you will have <a href="https://en.wikipedia.org/wiki/Rabin_cryptosystem" rel="nofollow noreferrer">Rabin-Cryptosystem</a>. See security section;</li>
<li>The commons public keys are {3, 5, 17, 257 or 65537}. This helps to reduce the number of multiplications. This is considered helpful if you consider client's low power devices.</li>
<li>The modular exponentiation should be performed modular version of repeated squaring method. Or you can use <a href="https://docs.python.org/2/library/functions.html#pow" rel="nofollow noreferrer">pow</a> function of python which already has fast modular multiplication. In your case, firstly the power is calculated this means that the number becomes bigger and bigger and therefore slow.</li>
</ol>

<p><strong>Security:</strong></p>

<ol>
<li>RSA is a trapdoor function and should never be used without a proper padding.</li>
<li>For Encryption you can use <a href="https://en.wikipedia.org/wiki/PKCS_1" rel="nofollow noreferrer">PKCS#1.5 padding</a> scheme or better use <a href="https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding" rel="nofollow noreferrer">Optimal Asymmetric Encryption Scheme</a> (OAEP).</li>
<li>For signatures you can use <a href="https://en.wikipedia.org/wiki/Probabilistic_signature_scheme" rel="nofollow noreferrer">Probabilistic Signature Scheme</a> (RSA-PSS).</li>
<li>Normally RSA is not used for encryption. It is used for signatures.</li>
<li>Usually, we prefer hybrid cryptosystem in that public key algorithms are used for key exchange/establishment then a symmetric algorithm is used.</li>
<li>There is once useful case is where RSA encryption is used, <a href="https://en.wikipedia.org/wiki/Key_encapsulation" rel="nofollow noreferrer">RSA-KEM</a> where it is used to establish key for symmetric algorithms</li>
<li>Never use small private exponent, this is insecure.</li>
</ol>
    </div>