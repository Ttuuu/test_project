<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Getting it running</h1>

<p>Currently the code that's posted does not run - it fails with a SyntaxError. This part can be easily overcome by changing the single quotes here</p>

<pre><code>print(
            "\nWelcome to URL Generator v3.0                         VERSION 
UPDATE: 31/08/2018       \n--------------------------------                      --------------------------          \n\n1.Direct/Combined     2.Indirect                      1. Multiple offer link added \n3.Console             4.Facebook                      2. Facebook link added \n                                                      3. Multipe language support  \n5.Exit \n---------------------------------                     -------------------------- "
    )
</code></pre>

<p>into triple quotes like this for a multiline string:</p>

<pre><code>print(
            """\nWelcome to URL Generator v3.0                         VERSION 
UPDATE: 31/08/2018       \n--------------------------------                      --------------------------          \n\n1.Direct/Combined     2.Indirect                      1. Multiple offer link added \n3.Console             4.Facebook                      2. Facebook link added \n                                                      3. Multipe language support  \n5.Exit \n---------------------------------                     -------------------------- """
    )
</code></pre>

<p>Triple quotes is <a href="https://docs.python.org/3.2/tutorial/introduction.html#strings" rel="nofollow noreferrer">one of the ways</a> python allows you to enter multiline string literals in your code.</p>

<h1>Fixing the infinite loop</h1>

<p>This code</p>

<pre><code>choice = 0 
while choice &lt;= 5:
        print(
            """\nWelcome to URL Generator v3.0                         VERSION 
UPDATE: 31/08/2018       \n--------------------------------                      --------------------------          \n\n1.Direct/Combined     2.Indirect                      1. Multiple offer link added \n3.Console             4.Facebook                      2. Facebook link added \n                                                      3. Multipe language support  \n5.Exit \n---------------------------------                     -------------------------- """
    )
</code></pre>

<p>is an infinite loop.</p>

<p>When run, the string literal is printed over and over again forever since the boolean expression governing the while loop always evaluates to <code>True</code>. It seems to me that you want the part of retreiving a user's input to be in a while loop. Perhaps something like this would work:</p>

<pre><code>lang = 0
print("\nLanguage:\n---------\n1. English \n2. German\n3. French ")
while lang == 0:
    try:
        lang = int(input("\nSelect Language:  "))
        print("\nThanks..\n")
    except:
        print("\nPlease enter a number!")

choice = 0 
while choice == 0:
    try:
        choice = int(input("\nSelect URL generator: "))
        print("\nThanks..\n")
    except:
        print("\nPlease enter a number!")
</code></pre>

<p>This code will continue asking for the language selection from the user until he or she enters input that can be successfully cast to an integer. It does the same for the choice input. You might want to also implement logic to only allow the user to continue (break out of the while loop) if he or she enters not just any input that can be cast to an integer, but one of the few integers that your program is expecting (ie. language should be 1, 2 or 3.).</p>

<p>Notice the keep point that each while loop can be exited since the boolean expression governing it can be satisfied if the user enters the input you're expecting and the loop terminates.</p>

<h1>General Pointers</h1>

<ul>
<li>Be consistent in your indentation - choose either two or four spaces and be consistent in using one or the other throughout the program. This will make your code more readable and more easy to work with.</li>
<li>Just as you implemented a try-except pattern for checking that the user provides an integer for the language selection, you will want to do the same throughout your program - whenever you're using this pattern: <code>int(input("Please enter .."))</code>. As written, your program will error out if a user enters in any input that not an integer in these scenarios. Since this is a commonly needed operation in your program, you should implement this try-except pattern to retrieve user input in a general-use function to be used over and over.</li>
<li>You might want to allow your user-entered strings to be any case. This would allow your tool to be more user friendly. Something like this <code>multiple =str(input("\nWould you like to create a multiple offer link? Y/N ")).lower()</code> would do the trick.</li>
</ul>
    </div>