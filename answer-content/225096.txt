<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>T4 Review</h3>

<hr>

<p><a href="https://nlog-project.org/schemas/NLog.xsd?r=redirect" rel="nofollow noreferrer">NLog.xsd</a> is available, so you could have saved yourself the trouble manually creating the xml, when you could have generated classes from the xsd (using T4 perhaps :p) instead. Then you could create the NLog.xml in memory using POCO's before serialising it using built-in xml serialisation.</p>

<hr>

<p>With your current settings, your xml is generated nested below the T4.</p>

<blockquote>
<pre><code>&lt;#@ template debug="false" hostspecific="false" language="C#" #&gt;
// ..
&lt;#@ output extension=".xml" #&gt;
</code></pre>
</blockquote>

<p>But you might want to generate the xml in a different location. What you could is attaching the T4 to the host (VS IDE) and writing to a different path. The standard output file will only contain log entries.</p>

<pre><code>&lt;#@ template debug="false" hostspecific="true" language="C#" #&gt;
// ..
&lt;#@ output extension=".log" #&gt;

&lt;# 
 // Get the Visual Studio API as a service:
 var dte = ((IServiceProvider)this.Host).GetCOMService(typeof(DTE)) as DTE;

 // Get the location of the NLog.xml file:
 var nlogFile = this.Host.ResolvePath(@"Configuration\NLog.xml");
#&gt;
</code></pre>

<p>Writing to another file than the standard output is facilitated using <a href="https://www.nuget.org/packages/T4.TemplateFileManager/" rel="nofollow noreferrer">TemplateFileManager</a>. A tutorial can be found <a href="https://t4-editor.tangible-engineering.com/blog/re-using-t4-template-for-multiple-model-diagrams.html" rel="nofollow noreferrer">here</a>.</p>

<pre><code>&lt;#@ include file="TemplateFileManagerV2.1.ttinclude" #&gt;

&lt;# 
    TemplateFileManager manager = TemplateFileManager.Create(this); 
    // create a new output file 
    manager.StartNewFile(nlogFile);
#&gt;
</code></pre>

<hr>

<p>One massive step forward is to use Runtime T4, rather than Design T4. This way you can build re-usable templates with markup and code-behind. <a href="https://t4-editor.tangible-engineering.com/T4-Editor-Visual-T4-Editing.html" rel="nofollow noreferrer">Tangible T4 Extensions for VS</a> is available as plugin for an IDE. I leave it up to you to find out how these work. I use Runtime T4 to generate classes all over my solution.sln. The power of these beasts is huge!</p>
    </div>