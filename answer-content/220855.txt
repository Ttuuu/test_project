<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are just two minor points that I would like to add on top of <a href="https://codereview.stackexchange.com/users/46840/carcigenicate">@Carcigenicate</a>'s <a href="https://codereview.stackexchange.com/a/220771/92478">answer</a>.</p>

<hr>

<p>In the answer, a class was introduced as possible way to structure the code. While not limited to classes, practice has proven that at least a short bit of documentation can often work wonders. As you may know, Python has an official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide</a>, which also has some recommendations on function/method documentation. It <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">recommendeds</a> to have at least a short oneliner in <code>"""triple quotes"""</code> immediately after the function definition.</p>

<pre class="lang-py prettyprint-override"><code>class Earthling:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def change_age(self, f, age_update):
        """combine the earthlings age with the update using the given operator f"""
        self.age = f(self.age, age_update)

    def is_alive(self):
        """Check if the earthling is still alive, i.e. between 0 and 120 years old"""
        return 0 &lt;= self.age &lt;= 120
</code></pre>

<p>Though it might seem overkill in this simple example, I find it a reasonable exercise to try to convey the gist of the method in question in a few words. This may also help to make sure that your functions are not to complex. Of course you are not limited to a single line and can also write longer documentation strings. To quote from the style guide:</p>

<blockquote>
<pre><code>"""Return a foobang

Optional plotz says to frobnicate the bizbaz first.
"""
</code></pre>
</blockquote>

<hr>

<p>Another pet peeve of mine is string formatting. You were advised to use</p>

<pre class="lang-py prettyprint-override"><code>print(e.name, "at previous age", previous_age, "(new age", str(new_age) + ") had operator '"
      + get_op_name(operator) + "' applied with paramater", random_value, "and", status_str)
</code></pre>

<p>which closely follows your original use of <code>print</code>. I personally don't like the implicit whitespace put between the arguments of <code>print</code> when used this way. I prefer to use explicit string formatting. Since you have not indicated the Python version in use, I will present you two variants. The first way may only be used in Python 3.6 (see <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">What's new in Python 3.6</a>?) and higher, and looks as follows:</p>

<pre class="lang-py prettyprint-override"><code>print(f"{e.name} at previous age {previous_age} (new age {new_age}) had operator"
      f"'{get_op_name(operator)}' applied with paramater {random_value} and {status_str}")
</code></pre>

<p>These are called f-strings for short.</p>

<p>The second and older way which works in Python 2.7 and all of the versions of Python 3 I'm aware of uses <code>.format(...)</code>:</p>

<pre class="lang-py prettyprint-override"><code>print(
    "{} at previous age {} (new age {}) had operator '{}' applied with paramater {} and {}".format(
        e.name, previous_age, new_age, get_op_name(operator), random_value, status_str)
)
</code></pre>

<p>By the look and feel I prefer f-strings, though you sometimes just cannot have them if you have to be backwards compatible with Python 2.7.</p>

<p>You can read more about the topic at <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">this blog post</a>, which has a nice comparison of the different ways strings can be formatted in Python.</p>
    </div>