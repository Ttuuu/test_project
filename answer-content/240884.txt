<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Missing Implementation</h1>
<ul>
<li><code>lastAccessed</code> and <code>lastUpdated</code> are not set beside in the entry constructor.</li>
<li>a file's size is usually affected by its content.</li>
<li>addEntry and deleteEntry should affect the parent of entry that was added/removed.</li>
<li>Validations and error handling. For example, having 2 different files with the same name in the same directory.</li>
</ul>
<hr>
<h1>Interfaces</h1>
<p>Use interfaces instead of classes so clients will not be affected by the implementation.</p>
<p>I believe that your "implicit interface" aka the public functions are affected by the implementation. I think that if you <strong>started your coding with defining an interface, the code would be different.</strong></p>
<p>Here is an example of how the interface should look like:</p>
<pre><code>interface IEntry{
   
    void delete();  //no need to return anything, just perform a command
   
    void changeName(String name);
    String getName();
    
    long getSizeInBytes(); // specify the units of size

    String getFullPath();
    
    //return class instead of long
    SomeDateTimeClass getCreationTime();
    SomeDateTimeClass getLastUpdatedTime();
    SomeDateTimeClass getLastAccessed();
}
interface  IDirectory extends IEntry{
    int numberOfFiles();
    void addEntry(IEntry entry);
   
    void deleteEntry(IEntry entry);  //no need to return anything, just perform a command
           
    Iterable&lt;IEntry&gt; getContents(); //return the most basic type
}
</code></pre>
<h3>Don't use status codes</h3>
<p>Returning booleans to indicate if an operation was performed, is a simplified form of status codes. It is better to throw exceptions if the function is misused. for example, delete an entry that doesn't exist.</p>
<hr>
<h1>Avoiding Nulls</h1>
<p>The problem with reference types is that they always can be Null. But how you know if they <strong>should</strong> be Null.</p>
<p>One solution is to use the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" rel="nofollow noreferrer">Optional class</a>.</p>
<p>Another solution is to design the classes in such a way so you don't need the Null as I described at Root Directory.</p>
<p>I wrote <a href="https://medium.com/free-code-camp/how-to-get-rid-of-nullpointerexception-3cdf9199f9fb" rel="nofollow noreferrer">an article</a> about this if you are interested.</p>
<hr>
<h1>Naming</h1>
<ul>
<li><p>Don't use one letter as a name, it cannot mean anything. Also, don't use abbreviations it means too many things.</p>
</li>
<li><p>I see you wrote <code>this.content = content;</code> so I wonder why not doing the same thing in <code>Entry</code>.</p>
</li>
<li><p>In <code>Entry</code> you have  function <strong>change</strong>Name and in <code>File</code> you have function <strong>set</strong>Content. Choose one term and stick to it.</p>
</li>
<li><p><code>Directory.fileList</code> contains also directories so it is a confusing name.</p>
</li>
</ul>
<hr>
<h1>The Root Directory</h1>
<p>The root directory is similar to a regular directory but also little different:</p>
<ul>
<li>It has no parent</li>
<li>It cannot be deleted</li>
</ul>
<p>So I think it should have its own class, let's call it RootDirectory.</p>
<h2>No parent</h2>
<p>In your current design, when the parent field is null it means this is the root directory. Based on that you have different logics for <code>getFullPath</code> and <code>delete</code>.</p>
<p>If the root directory doesn't have a parent why it should include this field?
writing the specific code for the root directory in RootDirectory class simplifies the code.</p>
<h2>delete</h2>
<p>If the root directory cannot be deleted why it should have a delete function?</p>
<p>I suggest splitting the interface to IDeleteable and IEntry. File and Directory should implement IDeleteable, RootDirectory should not.</p>
<hr>
<h1>Directory</h1>
<h2>getContents</h2>
<p>You return a <strong>reference</strong> to fileList which is a member of Directory class. The return type is <strong>ArrayList</strong>. Let's imagine someone using your classes and wrote the following code:</p>
<pre><code>ArrayList childs = directory.getContents()
childs.Add(someEntry)
</code></pre>
<p>the result of this code is that fileList is changed without the Directory class knowing about it. Returning a "read-only type" avoids this problem. Iterable is "read-only type" since it only allows iterating.</p>
<p>I didn't understand why <code>getContents</code> is protected and not public.</p>
<h2>numberOfFiles</h2>
<p>You are implicit doing a few things:</p>
<ul>
<li>Split between files and directories</li>
<li>Count the files</li>
<li>Sum the count of all directories</li>
<li>Sum the 2 above</li>
</ul>
<p>I think writing the code in the above way is more readable and using <strong>Java Streams</strong> it should be very easy.</p>
<h2>size</h2>
<p>Using java streams will make the code shorter and more readable.</p>
    </div>