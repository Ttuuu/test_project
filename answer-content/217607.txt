<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a review of your Scala solution.</p>

<p>It appears to be written by someone who doesn't understand Scala (and Functional Programming) or just doesn't like it. Witness all the semicolons in the <code>readInputFile()</code> method.</p>

<p>There are a number of curious aspects to the code. I'll touch on just a few.</p>

<pre><code>import java.util.{Scanner, Map, LinkedList}
import java.lang.Long
</code></pre>

<p>Why import Java's <code>LinkedList</code> and <code>Long</code>? Scala offers a native <code>Long</code> as well as a number of collection types with various performance characteristics.</p>

<pre><code>val emptyUserInfo: LinkedList[UserInfo] = new LinkedList[UserInfo]()

val lsUserInfo: LinkedList[UserInfo] = usermap.getOrElse(userId, emptyUserInfo)
</code></pre>

<p>Why create an <code>emptyUserInfo</code> if you <em>might</em> use it? Why not create it only when you need it?</p>

<p>And there's this funny <code>if</code>/<code>else if</code> pattern that occurs several times.</p>

<pre><code>if       (someCondition) ...
else if (!sameCondition) ...
</code></pre>

<p>Why test for a condition that is <em>guaranteed</em> to be true?</p>

<p><strong>fault tolerance</strong></p>

<p>In general, the code doesn't appear to be very resilient. It throws an error if the input file can't be found, or if any of the <code>userId</code> fields or the <code>currTimeStamp</code> fields can't be parsed. If the <code>status</code> field, on the other hand, is not as expected (maybe an unexpected space on the end) then the entire record is silently dropped without notice.</p>

<p><strong>Scala style</strong></p>

<p>Idiomatic Scala adheres to the principles of Functional Programming, in particular: limited mutability. It's also a good idea to use the type system to capture and manage the possibility of errors.</p>

<p>Here's an implementation of your basic task, redesigned with these principles in mind. This produces the same output as your code, as far as my limited testing can determine.</p>

<pre><code>import util.Try

val inFormat = raw"\s*(\w+)\s*,\s*(\d+)\s*,\s*(open|close)\s*".r
case class Stats(timestamp :Long, accumulator :Long, sessionCount :Int)

val file = Try(io.Source.fromFile(fileName))

val data = file.map(_.getLines().flatMap{line =&gt;
  Try{line match {case inFormat(a,b,c) =&gt; (a, if(c=="open") -b.toLong
                                              else           b.toLong)}
  }.fold(_ =&gt; {println(s"bad input: $line");None}, Some(_))
}.foldLeft(Map[String,Stats]().withDefaultValue(Stats(0,0,0))){
  case (m,(id,thisTS)) =&gt;
    val Stats(prevTS, acc, cnt) = m(id)
    if (prevTS &lt; 0 &amp;&amp; thisTS &lt; 0) {
      println("missing close")
      m + (id -&gt; Stats(prevTS, acc, cnt+1))
    } else if (prevTS &gt; 0 &amp;&amp; thisTS &gt; 0) {
      println("missing open")
      m + (id -&gt; Stats(thisTS, acc - prevTS + thisTS, cnt+1))
    } else if (prevTS &lt; 0 &amp;&amp; thisTS &gt; 0)  //open--&gt;close
      m + (id -&gt; Stats(thisTS, acc + prevTS + thisTS, cnt+1))
    else //close--&gt;open
      m + (id -&gt; Stats(thisTS, acc, cnt))
})

val result = file.map(_.close).flatMap(_ =&gt; data.map(_.foreach{
  case (id,Stats(_,total,count)) =&gt; println(s"{$id,${total/count}}")}))
</code></pre>

<p>The final <code>result</code> is either <code>Failure(/*exception type here*/)</code> or <code>Success(())</code>. (The <code>Success</code> is empty because <code>println()</code> returns <code>Unit</code>.) Also, faulty input is recognized and reported. There are no mutable variables or data structures.</p>

<p>It's not uncommon for Scala coders to forego cherished FP principles when efficiency and throughput becomes an issue, but it's usually a good idea to start with best practices and then deviate only when a good profiler indicates where it's necessary.</p>
    </div>