<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your plaintext, ciphertext and key all just alphabets, it is not difficult(or just say easy) for bruteforce, only need <code>56 ** length</code> </p>

<p>Why not using bytes crack difficult will raise up to <code>256 ** length</code></p>

<p>And you can use base64 for user friendly ciphertext/key output.</p>

<h3>create_key</h3>

<p>You can use <code>os.urandom</code> to generate random bytes as OTP key, and no need for filter input strings, as they can all be encrypted</p>

<pre><code>def create_key(_string, db_cursor):
    ...
    retval = base64.b64encode(os.urandom(len(_string)))
    ...
</code></pre>

<h3>encode_cipher</h3>

<pre><code>def encode_cipher(_string, key):
    key = base64.b64decode(key)
    retval = ""
    for k, v in zip(_string, key):
        retval += chr(ord(k) ^ ord(v))
    return base64.b64encode(retval)
</code></pre>

<h3>decode_cipher</h3>

<pre><code>def decode_cipher(encoded, key):
    retval = ""
    encoded = base64.b64decode(encoded)
    key = base64.b64decode(key)
    for k, v in zip(encoded, key):
        retval += chr(ord(k) ^ ord(v))
    return retval
</code></pre>
    </div>