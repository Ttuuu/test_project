<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My main comment is that you need to concentrate on avoiding duplication of
code and on writing smaller functions.  50 lines or so is the sort of max length I use.  You also use long names that are often
too long giving the code a very dense appearance and making it difficult ot
read.  Smaller functions, reduced variable scope and hence shorter name sizes
will help here.</p>

<p>In function <code>boradcastDiscovery</code>, the name could be better as the current
(misspelt) name doesn't say what the function does. <code>getGateway()</code> perhaps?</p>

<p>In this function we have:</p>

<pre><code>struct sockaddr_in upnpControl,
       broadcast_addr;

SOCKET sock = INVALID_SOCKET;
sock = socket(AF_INET, SOCK_DGRAM, 0);
if (sock == INVALID_SOCKET)
    return WSAGetLastError();

if(setsockopt(sock, SOL_SOCKET, SO_BROADCAST, searchIGDevice, sizeof(searchIGDevice)) == SOCKET_ERROR)
    return WSAGetLastError();

struct sockaddr_in upnpControl;
upnpControl.sin_family = AF_INET;
upnpControl.sin_port = htons(0);
upnpControl.sin_addr.s_addr = INADDR_ANY;
if (bind(sock, (sockaddr*)&amp;upnpControl, sizeof(upnpControl)) == SOCKET_ERROR)
    return WSAGetLastError();
</code></pre>

<p>This could easily be extracted to a function:</p>

<pre><code>static int
getBroadcastSocket(char *device, size_t size)
{
    SOCKET sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock == INVALID_SOCKET) {
        return -1;
    }
    int status = setsockopt(sock, SOL_SOCKET, SO_BROADCAST, device, size);
    if (status != SOCKET_ERROR) {
        struct sockaddr_in s;
        s.sin_family = AF_INET;
        s.sin_port = htons(0);
        s.sin_addr.s_addr = INADDR_ANY;
        status = bind(sock, (sockaddr*)&amp;s, sizeof s);
    }
    if (status == SOCKET_ERROR) {
        close(sock);
        return -1;
    }
    return sock;
}
</code></pre>

<p>Notice that <code>sock</code> is closed on error.</p>

<p>Another example is in code such as this which extracts a field from a string
and is repeated numerous times thoughout the whole code:</p>

<pre><code>if(strstr(responseHeader, "\r\n\r\n")) {
    // Move the pointer to the first digit
    pLen = strstr(responseHeader, "Content-Length: ") + 16;
    ZeroMemory(pBodyLen, 5);
    // Get the body length
    while(*pLen != '\r') {
        pBodyLen[j] = *pLen;
        *pLen++;
        ++j;
    }
</code></pre>

<p>This should be extracted into a suitable function.  Also of note in this code
are:</p>

<ul>
<li>the use of explicit lengths (16 and 5 here), which is bad practice;</li>
<li>the lack of checks for target buffer overflow (often difficult);</li>
<li>the use of variable <code>j</code> which was initialize far away at the start of the
function;</li>
<li>inappropriate loop type - a <code>for</code> would be better.</li>
</ul>

<p></p><hr>
A few other comments:

<ul>
<li><p>The address "239.255.255.250" would be better if extracted to a #define at the top
perhaps.</p></li>
<li><p>The code</p>

<pre><code>char *proto = NULL,
...
proto = (char *)MALLOC(4);
ZeroMemory(proto, 4);
if(protocol == TCP_PROTOCOL)
    StringCbPrintf(proto, 4, "TCP");
else
    StringCbPrintf(proto, 4, "UDP");
</code></pre></li>
</ul>

<p>would be better as</p>

<pre><code>    const char *proto = (protocol == TCP_PROTOCOL) ? "TCP" : "UDP";
</code></pre>

<ul>
<li><p>Some of your calls to <code>ZeroMemory</code> often look redundant.  The sizes in these
calls and in calls to <code>StringCbPrintf</code> are often explicit numbers rather than
using <code>sizeof</code>, which would be better.</p></li>
<li><p>The huge xml strings are distracting and would, I think, be better extracted
into suitably named functions, passing in the target buffer and the parameters
that need to be printed into the strings.</p></li>
<li><p>Variables should be defined close to their first point of use and initialised
on use if possible.  For example there is no benefit in writing:</p>

<pre><code>SOCKET sock = INVALID_SOCKET;
sock = socket(AF_INET, SOCK_STREAM, 0);
</code></pre>

<p>when you could write</p>

<pre><code>SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
</code></pre></li>
<li><p>you are using TCP so you don't have to create a complete string before
sending it.  For example instead of writing</p>

<pre><code>createHeader(header, ...);
createRequest(request, ...);
concatenate(combined, header, request);
send(combined);
</code></pre>

<p>you can instead do:</p>

<pre><code>createHeader(header, ...);
send(header);
createRequest(request, ...);
send(request);
</code></pre></li>
</ul>

<p>Hopefully you will find something above that is of use :-)</p>
    </div>