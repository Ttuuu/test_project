<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @Alex Schimp suggested <a href="http://automapper.codeplex.com/" rel="nofollow">AutoMapper</a> is a an excellent tool for this scenario and exactly what it was built for. I use AutoMapper all of the time to translate between domain models and view models and it greatly simplifies the process and eliminates a lot of coding for the translation between the two. It does a great job of handling the mapping, especially if you keep the field names the same between the domain and the view.  So in the example of where the view may not need the ID then AutoMapper will figure out that it does not need to map it to the view just because it is not present.  The other advantage of this is if your models change you do not have to remember to update your translation code as well. As long as there is a clear mapping that AutoMapper can figure out then the translation layer is automatically handled. There are also methods for more advanced translations in AutoMapper if the default ones are not sufficient. Your approach of using DTO's is excellent and will pay off in the long run for ease of maintenance,  extensibility and scalability. Martin Fowler discuses the benefits of the <a href="http://martinfowler.com/eaaCatalog/dataTransferObject.html" rel="nofollow">DTO design pattern</a> in his book <a href="http://martinfowler.com/books/eaa.html" rel="nofollow">Patterns of Enterprise Application Architecture</a>.</p>
    </div>