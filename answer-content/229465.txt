<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><em>I think everyone has some code they are embarrassed and not proud of and today I have decided to show mine.</em></p>
</blockquote>

<h2>A pattern to get out of this mess ..</h2>

<p>That's an impressive amount of nested if-statements. As you can see, the behavior of collision handling depends both on the current instance's type and the provided instance's type. There is a pattern suited for this kind of complexity: the <a href="https://en.wikipedia.org/wiki/Visitor_pattern" rel="nofollow noreferrer">Visitor Pattern</a>.</p>

<h3><code>GameObject</code></h3>

<p>You first declare a base method in <code>GameObject</code> that redirects the generic collision handling to a specific method based on the type of <code>other</code>.</p>

<pre><code>void collisionHandling (GameObject other) {
    if (this.overlap(other)) {
        if ((other instanceof Ship)) {
            collisionHandling((Ship)other);
        } else if ((other instanceof Bullet)) {
            collisionHandling((Bullet)other);
        } 
        // and so on ..
    }
}
</code></pre>

<h3>Derived Classes</h3>

<p>Class <code>Heart</code> could then override any such method. </p>

<pre><code>@Override
void collisionHandling (Ship ship) {
    Game.ship.dead = false;
    if (Ship.lives &lt; 5) Game.ship.incLives();
    this.hit();
}
</code></pre>

<p>Class <code>ShieldSprite</code> would override that method with different behavior.</p>

<pre><code>@Override
void collisionHandling (Ship ship) {
    Game.ship.dead = false;
    Ship.invul = true;
    Game.shipInvulCounter = 400;
    this.hit();
}
</code></pre>

<p>By implementing this pattern, the cyclomatic-complexity of collision handling method gets reduced drastically and all logic sits at the right place, which makes the design object-oriented.</p>
    </div>