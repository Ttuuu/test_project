<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Security-wise your code is OK. There is <strong>not a single variable</strong> put inside your query string - so you can tell that it's 100% safe. </p>

<p>Regarding the search quality, like you rightfully noted in the comment, there is also a "_" wildcard character.</p>

<p>Besides, as it is noted in the <a href="https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_like" rel="nofollow noreferrer">mysql manual</a>, a backslash character must be escaped with <em>three</em> slashes as well.</p>

<p>So for the bullet-proof escaping for LIKE you could come up with a function </p>

<pre><code>function escapeForLike($str) {
    $str = str_replace("\\", "\\\\\\\\", $str);
    $str = str_replace("%", "\%", $str);
    $str = str_replace("_", "\_", $str);
    return $str;
}
</code></pre>

<p>Using this function and some <a href="https://phpdelusions.net/pdo_examples/select#prepare" rel="nofollow noreferrer">improvements that PDO offers</a>, you can make your code like this</p>

<pre><code>$a = escapeForLike($_GET["a"]);
$b = escapeForLike($_GET["b"]);
$sql="SELECT * FROM table WHERE ColA LIKE :txtA AND ColB LIKE :txtB";
$query = $db-&gt;prepare($sql);
$query-&gt;execute(['txtA' =&gt; "%$a%", 'txtB' =&gt; "%$b%"]);
</code></pre>
    </div>