<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>"<em>What you should add</em>" is an off-topic question for <strong>Code Review</strong>.  Here, we only review complete, working code.  You will get feedback on areas of your program that need work, where code could be designed better, perform better, handle input or errors more gracefully.  "<em>What you should add</em>" is an open-ended question that you (or your program's users) should answer.</p>

<hr>

<h2>Imports</h2>

<p>Imports should be listed at the top of the file, preceded only by a <code>"""docstring"""</code> if one is present.</p>

<p>Importing inside of functions</p>

<pre><code>def start():
    import time
    ...
</code></pre>

<p>leads to needed to import the same modules over and over again, and provides little benefit.  It is only useful in cases of optional functionality, where an module may not be installed and failing to importing it would not prevent the rest of the program from running.  This is not the case here.  Move all your imports out of method to the top of the file:</p>

<pre><code>import time
import math

def start():
    ...
</code></pre>

<h2>Infinite Recursion</h2>

<p>If you eventually add the capability of storing values in variables, so you could do more complex calculations, involving long chains of operations, would you want your calculator to <em><strong>CRASH</strong></em> after 500 computations?</p>

<p>Python's stack is not unlimited.</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getrecursionlimit()
1000
</code></pre>

<p>With a limit of 1000 calls, your implementation of <code>main()</code> calling <code>start()</code>, which calls <code>main()</code>, which calls <code>start()</code>, which calls <code>main()</code>, which calls <code>start()</code>, which calls ... will crash after 500 calls of <code>main()</code> and 500 calls of <code>start()</code>.  And any values stored in variables would probably be lost.</p>

<p>Don't use infinite recursion where a simple <code>while ...:</code> loop would do.</p>

<h2>Exit</h2>

<p>Don't use <code>exit()</code>.  This unconditionally terminates the Python interpreter.  Unit tests written in Python will not be able to examine results and report success or failure if the code it is testing calls <code>exit()</code>.  A caller which expects to continue executing after using the calculator cannot recover from <code>exit()</code>.  Never, ever use it.</p>

<h2>Garbage Output</h2>

<pre><code>print(' \n' * 30)
</code></pre>

<p>Why is there a space before the newline?  Did you mean to print out "space" "newline" "space" "newline" "space" "newline" ... "space" "newline" "space" "newline"?  How is that different from just printing out 30 newlines?</p>

<h2>Error Recovery</h2>

<p>If the user enters an invalid value at the <code>"First number- "</code> prompt, such as <code>1.000.000</code>, the program will crash with a <code>ValueError</code>.  You should use <code>try: ... catch ...: ...</code> blocks to catch illegal input problems, and recover.</p>

<p>Similarly, you should be prepared for errors in calculation, such as division by zero, or square-roots of negative numbers.</p>

<h2>Printing</h2>

<pre><code>    print("If given diameter, Circumference is " + (aa * math.pi))

    print("If given radius, Area is ")
    print(aa ** 2 * math.pi)

    print("the square root of", + aa, "is", + (aa ** (1.0 / 2)))
</code></pre>

<p>In the first case, you are joining a string and the results of a calculation.  In the second, you are using 2 print statements.  In the third, you're using separate arguments to the print statement to print multiple values.  Pick one style, and be consistent.</p>

<p>Additionally, the leading <code>+</code> signs are not needed in the expression arguments <code>+ aa</code> or <code>+ (aa ** (1.0 / 2))</code>.  You are not concatenating the value with the previous string; it is a separate argument.  Parenthesis are not required around the <code>(aa ** (1.0 / 2))</code> calculation.  It is not necessary to write <code>(1.0 / 2)</code>; using <code>(1 / 2)</code> would work just fine, as would simply <code>0.5</code>.</p>

<pre><code>    print("If given diameter, Circumference is", aa * math.pi)

    print("If given radius, Area is", aa ** 2 * math.pi)

    print("the square root of", aa, "is", aa ** 0.5)
</code></pre>

<h2>Bug</h2>

<p>If you ask for "area", after printing the result, the program will then ask for the second number, and will then <code>print("Invalid input")</code>.</p>

<h2>Flotsam &amp; Jetsam</h2>

<ul>
<li>After most calculations, you have a delay of 2.5 seconds.  After square root, you have a delay of 3 seconds.  After circumference, no delay at all.  Intended differences?  Accidental?  Maybe you should have the delay in exactly one spot, so it is consistent.</li>
<li><code>Devide</code> should be spelt <code>Divide</code></li>
<li>When you ask for a function value, 1 through 8, you accept floating point values, instead of integers.  It works, but is odd.</li>
</ul>
    </div>