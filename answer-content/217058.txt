<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a cleaner way to write your algorithm, relying on iterators and <code>&lt;algorithm&gt;</code>. Cleaner is almost always better, because you can more easily reason about your code and spot the bugs' origin. Let me ask you a few questions:</p>

<ul>
<li><p>what are those <code>i</code> and <code>n</code> variables? (there's a good chance you'll have to look back at your code, and maybe match your code and what you know / remember about the algorithm you used; whereas <code>first</code>, <code>last</code> are always iterators to the first and past the last elements, no need to check). By the way <code>n</code> isn't even used.</p></li>
<li><p>how will your functions react if given an empty vector? If <code>i</code> isn't coherent with the vector's size? (idem, you'll need to check, think about the division result, etc).</p></li>
<li><p>what will your function return if given an empty vector? <code>0</code> seems a good choice, but in some contexts, the absence of elements should be discriminated from the presence of null values. With iterators, <code>last</code> is the default "void" or "failure" value.</p></li>
<li><p>the requirements are also clearly stated in the <code>&lt;algorithm&gt;</code> implementation: for instance, <code>std::nth_element</code> could be used here but requires iterators to be random access iterators. You won't use it on a linked list. On the other hand, <code>std::min_element</code> only requires forward iterators, so is compatible with a linked list. Having the least two elements at the beginning would look like </p></li>
</ul>

<p>this:</p>

<pre><code>std::iter_swap(first, std::min_element(first, last));
std::iter_swap(std::next(first), std::min_element(std::next(first), last));
</code></pre>

<p>So here's for instance what I'd consider a cleaner code:</p>

<pre><code>template &lt;typename Iterator&gt;
auto bottom_progressive_sum(Iterator first, Iterator last) {
    if (first == last) return last;
    if (std::next(first) == last) return first;
    while (std::next(first) != last) {
        std::iter_swap(first, std::min_element(first, last));
        std::iter_swap(std::next(first), std::min_element(std::next(first), last));
        *std::next(first) += *first;
        ++first;
    }
    *std::next(first) += *first;
    return ++first;
}
</code></pre>
    </div>