<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) I would use a simple <code>lock</code> to do the synchronization. <code>ReaderWriterLockSlim</code> outperforms regular <code>lock</code> only in <a href="https://stackoverflow.com/a/4217893/1386995">very specific scenarios</a> and it only makes sense if you want to write on one thread and read on another thread in parallel. Which is not the use case that you have. Alternatively, consider using <code>ConcurrentDictionary</code>, that has a built-in thread-safe <a href="https://msdn.microsoft.com/en-us/library/ee378677(v=vs.110).aspx" rel="nofollow noreferrer">GetOrAdd</a> method.</p>

<p>2) <code>Func&lt;TValue&gt; func = () =&gt; GetOrSetValue(key);</code> - this lambda looks like an unnecessary overhead. Just move <code>InvokeWithWriteLock</code> into the base class, and remove the lambda.</p>

<p>3) By calling both <code>ContainsKey</code> and <code>GetValue</code> you are doing the dictionary lookup twice on every request. You should use <code>Dictionary.TryGetValue</code> method instead.</p>

<p>4) The weak reference implementation looks weird. It looks like in most scenarios the values would be removed from the cache straight away, unless the reference to those values was stored elsewhere. Is there really a usecase for such cache? A more common approach is to attach a timestamp to key or value, and update it every time the key/value is accessed. Then you should periodically check the dictionary and remove items that were not accessed long enough. </p>

<p>5) I think <code>ICache</code> or <code>IMemoizer</code> are better names for the interface.</p>
    </div>