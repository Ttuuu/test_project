<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As far as I'm able to understand you might want to have a look at type erasure:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;
#include &lt;memory&gt;

struct IBase
{
    virtual ~IBase() = default;
    virtual void dosmth() const = 0;
};

struct SomeClass1 : public IBase
{
    int i;

    SomeClass1() : i(33) {}
    SomeClass1(int h) : i(h) {}

    void dosmth() const override { std::cout &lt;&lt; "SomeClass1: " &lt;&lt; i &lt;&lt; "\n"; };
};

struct SomeClass2 : public IBase
{
    int d;

    SomeClass2() : d(43) {}
    SomeClass2(int s) : d(s) {}

    void dosmth() const override { std::cout &lt;&lt; "SomeClass2: " &lt;&lt; d &lt;&lt; "\n"; };
};

void func1()
{
    std::cout &lt;&lt; "hello!\n";
}
void func2()
{
    std::cout &lt;&lt; "bye!\n";
}

struct ClassInfoBase
{
    std::function&lt;void()&gt; SomeFunction;

    virtual std::unique_ptr&lt;IBase&gt; createInstance() const = 0;
    virtual std::unique_ptr&lt;IBase&gt; createInstance(int p) const = 0;
};

template&lt;class T&gt;
struct ClassInfo : public ClassInfoBase
{
    std::unique_ptr&lt;IBase&gt; createInstance() const override
    {
        return std::make_unique&lt;T&gt;();
    }
    std::unique_ptr&lt;IBase&gt; createInstance(int p) const override
    {
        return std::make_unique&lt;T&gt;(p);
    }
};

struct Mapper
{
    std::unordered_map&lt;std::string, std::unique_ptr&lt;ClassInfoBase&gt;&gt; Mappings;

    template&lt;class Class, class Function&gt;
    void registerClass(const std::string &amp;name, Function f)
    {
        auto info = std::make_unique&lt;ClassInfo&lt;Class&gt;&gt;();
        info-&gt;SomeFunction = std::move(f);
        Mappings[name] = std::move(info);
    }
};

int main()
{
    Mapper m;

    //register some classes at startup
    m.registerClass&lt;SomeClass1&gt;("SomeClass1", func1);
    m.registerClass&lt;SomeClass2&gt;("SomeClass2", func2);


    //create instances by name (or enum)
    auto instance1 = m.Mappings["SomeClass1"]-&gt;createInstance();
    auto instance2 = m.Mappings["SomeClass1"]-&gt;createInstance(2);
    auto instance3 = m.Mappings["SomeClass2"]-&gt;createInstance();
    auto instance4 = m.Mappings["SomeClass2"]-&gt;createInstance(8);

    m.Mappings["SomeClass1"]-&gt;SomeFunction();
    instance1-&gt;dosmth();
    instance2-&gt;dosmth();
    instance3-&gt;dosmth();
    instance4-&gt;dosmth();
    m.Mappings["SomeClass2"]-&gt;SomeFunction();
}
</code></pre>

<p><a href="https://ideone.com/zTd7Ub" rel="nofollow noreferrer">https://ideone.com/zTd7Ub</a></p>
    </div>