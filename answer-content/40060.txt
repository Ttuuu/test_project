<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My question is about why I am not embracing each method implementation with a using and disposing the Context as soon as the query is done.
  Some of my methods, as Find and GetAll return collections. I would want to be able to iterate through them using LINQ, only this is not possible if the Context is disposed, as it would be in the original Repository model.</p>
</blockquote>

<p>A Linq enumerable isn't enumerated when it's created: it's enumerated when you try to work with it.</p>

<p>If we want to dispose the context within each each method, I think you can do that by realizing the data, i.e. by reading it all into a concrete object such List or EnumerableQuery, before you dispose the context ... something like this (untested code ahead):</p>

<pre><code>public IEnumerable&lt;T&gt; GetAll()
{
    using (Context context = new Context())
    {
        IEnumerable&lt;T&gt; enumerable = context.Set&lt;T&gt;();
        // enumerate into a List before disposing the context
        List&lt;T&gt; list = new List&lt;T&gt;(enumerable);
        return list;
    }
}

public virtual IQueryable&lt;T&gt; Find(Expression&lt;Func&lt;T, bool&gt;&gt; predicate)
{
    using (Context context = new Context())
    {
        IEnumerable&lt;T&gt; enumerable = context.Set&lt;T&gt;().Where(predicate);
        // enumerate into a EnumerableQuery before disposing the context
        // see https://stackoverflow.com/a/6765404/49942 for further details
        EnumerableQuery&lt;T&gt; queryable = new EnumerableQuery&lt;T&gt;(enumerable);
        return queryable;
    }
}
</code></pre>

<p>Beware that <a href="https://stackoverflow.com/questions/6765350/listt-to-implement-iqueryablet#comment32145235_6765404">this is expensive if the data set is huge</a>, if you don't actually want all the data you queried.</p>
    </div>