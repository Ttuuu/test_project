<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General points</h2>

<ul>
<li>There is no need to add <code>localStorage</code> to the <code>Repository</code> object as it is part of the global this.</li>
<li>You can access localStorage values directly by the key name <sup><strong>[.1]</strong></sup>.  Eg setting <code>localStorage.myData = "Hi World"</code>, getting <code>const message = localStorage.myData</code>, to check if it exists <code>localStorage.myData !== undefined</code>, to empty a value <code>localStorage.myData = undefined</code>, and to delete <code>delete localStorage.myData</code></li>
<li>LocalStorage should not be trusted. Calling <code>JSON.parse</code> on data from local storage should always be wrapped in a try catch in case the data has been modified by a 3rd party.</li>
<li>Using <code>filter</code> to remove items from an array is not as efficient as locating the item's index and splicing it. Even better would be to store the todo array as a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> indexed by <code>uuid</code> see second example.</li>
<li>You have some poor naming due to the repeated prefixing of todo to all the functions. I can imagine that the Repository is called <code>todoList</code> and thus is would be <code>todoList.addTodo</code>  <code>todoList.removeTodo</code> and so on.  Would be far more readable if you drop the todo . Eg <code>todoList.add</code>,  <code>todoList.remove</code>, ...</li>
<li>You are repeating code. Both <code>add</code> and <code>remove</code> functions filter (remove) a todo. I would be better for <code>add</code> to call <code>remove</code></li>
</ul>

<h2>Good OO design</h2>

<p>Javascripts class syntax is something you should avoid as it forces you to create objects with poor encapsulation (if you don't use the "abomination" that is <code>#</code> private  prefix) Javascript has several very robust object patterns that provide air tight encapsulation and should be used if you wish to follow good OO design.</p>

<p>The examples shows and immediately invoked function (IIF) pattern that defines the Object <code>Repository</code> as a function returning an ad hock <code>Object</code> that encapsulates via closure.</p>

<p>The <code>todos</code> array (or map) is isolated and not directly accessible. It uses a getter to return the array of todos as a shallow copy</p>

<h2>Examples</h2>

<p>Both examples use IIF pattern to encapsulate the object created from the named <code>Repository</code></p>

<p>Note that it has slightly different behavior than your object.</p>

<p>You can instantiate the object with or without the <code>new</code> token. Eg <code>todos = Repository()</code> or <code>todos = new Repository()</code> </p>

<p>The first example store data in an array that it keeps private, copied on creation and copied when accessed via the getter <code>todos</code>.</p>

<h3>IFF ad hock</h3>

<pre><code>export default Repository = (() =&gt; {
    const save = (todos) =&gt; localStorage.todos = JSON.stringify(todos);
    const load = () =&gt; {
        try { return localStorage.todos ? JSON.parse(localStorage.todos) : [] }
        catch(e) { return [] }
    }
    return function(todos = []) {
        todos = [...todos]; 
        return Object.freeze({
            get todos() { return [...todos] },
            remove(todo, saveChanges = true) {
                const idx = todos.findIndex(item =&gt; item.uuid !== todo.uuid);                
                idx &gt; -1 &amp;&amp; todos.splice(idx, 1);  
                saveChanges &amp;&amp; save(todos);                
            },                
            add(todo, saveChanges = true) {
                this.remove(todo, false);
                todos.push(toDo);
                saveChanges &amp;&amp; save(todos);
            },
            save() { save(todos) },
            load() {
                load().forEach(todo =&gt; this.add(Object.assign(new Todo(), todo), false));
                return this.todos;
            }
        });
    }
})();
</code></pre>

<h3>IFF with Map</h3>

<p>This example uses a map to improve the efficiency of removing items and reduces the source size. It behaves identically to the first example.</p>

<p>Also as using <code>this</code> does present a security concern (even in modules) thus example references self via the named constant <code>API</code></p>

<pre><code>export default Repository = (() =&gt; {
    const save = (todos) =&gt; localStorage.todos = JSON.stringify(todos);
    const load = () =&gt; {
        try { return localStorage.todos ? JSON.parse(localStorage.todos) : [] }
        catch(e) { return [] }
    }
    return function(todosInit = []) {
        const API = Object.freeze({
            get todos() { return [...todos.values()] },
            remove(todo, saveChanges = true) {
                todos.delete(todo.uuid);
                saveChanges &amp;&amp; API.save();                
            },                
            add(todo, saveChanges = true) {
                API.remove(todo, false);
                todos.set(todo.uuid, todo);
                saveChanges &amp;&amp; API.save();
            },
            save() { save(API.todos) },
            load() {
                load().forEach(todo =&gt; API.add(Object.assign(new Todo(), todo), false));
                return API.todos;
            }
        });
        return API;
    }
})();
</code></pre>

<h2>Notes</h2>

<p><sup><strong>[.1]</strong> Note that <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Basic_concepts" rel="nofollow noreferrer">MDN localStorage</a> page cites <a href="https://2ality.com/2012/01/objects-as-maps.html" rel="nofollow noreferrer">"The pitfalls of using objects as maps"</a> as reason not to use direct key access. Why only warn on localStorage why not have the same warning on every Object? Get with it MDN!!</sup></p>
    </div>