<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As pointed out by @bullseye, the <code>itertools</code> library provides <code>combinations()</code>.</p>

<p>If you are trying to learn how to implement your own version, here is a simple recursive version:</p>

<pre><code>def combinations(seq, r):
    """returns a list of all r-length combinations of the elements of seq."""

    if len(seq) == r:
        # only one combination
        return [seq]

    elif r == 0:
        # yield an empty seq of the same type as seq
        return [seq[:0]]

    else:
               # combinations that _include_ seq[0]                    + those that exclude seq[0]
        return [seq[:1] + tail for tail in combinations(seq[1:], r-1)] + combinations(seq[1:], r)
</code></pre>

<p>Example:</p>

<pre><code>combinations((1,2,3,4), 3), combinations('abcde', 3)
</code></pre>

<p>Output:</p>

<pre><code>([(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)],
 ['abc', 'abd', 'abe', 'acd', 'ace', 'ade', 'bcd', 'bce', 'bde', 'cde'])
</code></pre>

<p>Here is an alternative version that generates the combinations lazily:</p>

<pre><code>def combinations(seq, r):
    if len(seq) == r:
        # only one combination
        yield seq

    elif r == 0:
        # yield an empty seq of the same type as seq
        yield seq[:0]

    else:
        # yield all combinations that _include_ seq[0]
        yield from (seq[:1] + tail for tail in combinations(seq[1:], r-1))

        # yield all combinations that _exclude_ seq[0]
        yield from combinations(seq[1:], r)
</code></pre>
    </div>