<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Initialization</h1>

<p>As written, your robot lander can land at any X,Y coordinate on your grid, but will always be facing in the positive Y-axis direction.  This seems unreasonable.  If wind, turbulence can cause a position uncertainty, which requires initializing the robot at a particular X,Y coordinate, it seems reasonable to assume it might also land in any facing.</p>

<pre><code>Robot() {
   this(0, 0, 0);
}

Robot(int x, int y) {
    this(x, y, 0);
}

Robot(int x, int y, int initial_facing) {
    // ...
}
</code></pre>

<hr>

<h1>Commands &amp; Instructions</h1>

<p>Your instructions are a series of single letter commands, but you can't actually send a single command to the robot.  You should separate the individual commands from the series of instructions.  Something like:</p>

<pre><code>void turn_left() { ... }
void turn_right() { ... }
void move_forward() { ... }

public void command(char command_letter) {
    switch (command_letter) {
        case 'L': turn_left(); break;
        case 'R': turn_right(); break;
        case 'F': move_forward(); break;
        default: throw new IllegalArgumentException("Invalid command: "+command_letter);
    }
}

public void instructions(String moves) {
    for (char command_letter : moves.toCharArray()) {
        command(command_letter);
    }
}
</code></pre>

<hr>

<h1>Where am I?</h1>

<p><code>position()</code> returns a <code>String</code> containing the coordinates of the robot.  If a control program wants to query the position of the robot, in order to determine what commands should be sent to send it to the desired location, it would need to parse that string back into integer values.</p>

<p>Consider instead returning the actual integer positions, possibly like:</p>

<pre><code>public int[] position() {
    return new int[]{ x, y };
}
</code></pre>

<p>Alternately, you might want to create a <code>class Position</code> which can store the x,y location of the robot.  Or you could use <code>java.awt.Point</code></p>

<pre><code>public Point position() {
    return new Point(x, y);
}
</code></pre>

<p>Perhaps override the <code>toString()</code> method to return a human friendly description of the robot, including its position.  Or maybe a <code>position_as_string()</code> method.</p>

<p>Which way is the robot facing?  Can't directly tell!  You currently have to query the <code>position()</code>, then <code>move("F")</code>, followed by <code>position()</code>, and then compare the positions to determine which way the robot is facing!  How about adding a <code>facing()</code> method?</p>

<hr>

<p>Learn how to write proper unit tests.  For example, with JUnit5, you could write:</p>

<pre><code>import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

class RobotTests {

    private final Robot robot = new Robot();

    @Test
    void starts_at_origin() {
        assertEquals("0:0", robot.position());
    }

    @Test
    void move_forward_twice() {
        robot.move("FF");
        assertEquals("0:2", robot.position());
    }

    @Test
    void move_and_turn_right() {
        robot.move("FFRF");
        assertEquals("1:2", robot.position());
    }

    @Test
    void three_rights_make_a_left() {
        robot.move("FFRRRFF");
        assertEquals("-2:2", robot.position());
    }

    @Test
    void but_one_left_does_not() {
        robot.move("FFLFF");
        assertEquals("-2:2", robot.position());
    }
}
</code></pre>

<p>Notice that each test is run in a brand-new <code>RobotTests</code> instance, so you don't need to call <code>robot.reset()</code> between each.</p>

<p>If you run this unit test, you'll find 4 of 5 tests pass, one test fails.  I'll leave you to figure out why.</p>

<hr>

<h2>Additional Concerns</h2>

<p><code>currentDirection</code> taking on the values <code>0</code>, <code>1</code>, <code>2</code> and <code>3</code> to represent the 4 cardinal directions is limiting.  If later, you want to add in diagonal moves (<code>NW</code>, <code>SW</code>, <code>SE</code>, or <code>NE</code>), would you use the values 4 and above to represent them?  Or would you renumber the original 4 directions to be <code>0</code>, <code>2</code>, <code>4</code> and <code>6</code>, and use <code>1</code>, <code>3</code>, <code>5</code>, and <code>7</code> for the diagonal directions?</p>

<p>You might be tempted to use an <code>enum</code> for the direction values, but I think that would be a bad idea.  I would use <code>0</code>, <code>90</code>, <code>180</code>, and <code>270</code> as direction values.  These have physical <em>meaning</em>.  If later your robot is allowed a more realistic <code>double x, y;</code> coordinate system, you could also change to use <code>double currentDirection;</code> and allow turns of a fraction of a degree.  With <code>enum</code>, you'd lose this possible future flexibility.</p>

<p>As an alternative, you might also consider using a directional vector:</p>

<pre><code>int dx=0, dy=1;   // currentDirection = 0Â°
</code></pre>

<p>And move_forward simply becomes:</p>

<pre><code>x += dx;
y += dy;
</code></pre>

<p>And a turn right could become:</p>

<pre><code>int old_dx = dx;

dx = dy;
dy = -old_dx;
</code></pre>
    </div>