<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few things you could try...</p>

<p>Including those mentioned by @tinstaafl</p>

<p>I think that you can avoid a lot of the computations. I had a brief look at the Wikipedia page, it seems that you are otherwise properly following the algorithm.</p>

<pre><code>#include&lt;bitset&gt;
#include&lt;vector&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")

// this rarely helps--if anything it makes the code much bigger and you lose
// on the Instruction Cache!
//#pragma GCC optimization ("unroll-loops")

// As a long time programmer, I never ever do that (I delete such statement when
// I see them!) It's never safe it ignore namespaces.
using namespace std;

// Never do that; redefine a basic type using a macro?! Big no no!
// Also with any modern C/C++, you want to use typedef instead.
#define int long long

const int LIM = 1e9;
bitset&lt;100000000&gt; sieve;
void compute(int limit) 
{ 
    // to really be complete, you should verify the max. size
    // since you want to be able to access `limit` you must make sure
    // that this offset is also valid
    if(limit + 1 &gt;= sieve.size())
        throw out_of_range("limit too large");

    // Do you really need these optimizations? Do they buy you anything?
    // It looks like your loops below start at 1 anyway, so you should
    // decide on one or the other anyway!
    if (limit &gt; 2) 
        cout&lt;&lt;"2 ";
    if (limit &gt; 3) 
        cout&lt;&lt;"3 ";

    // as mentioned by @tinstaafl replace (x * x &lt; limit) with (x &lt; sqrt(limit))
    // but "cache" that limit like so:
    // also something to make a habit of is to use pre-increment, here it makes
    // no difference since all your variables are numbers, but when dealing with
    // iterators (for example) it's a different story!
    //for (int x = 1; x * x &lt; limit; x++) { 
    int const sqrt_limit(sqrt(limit));
    for (int x = 1; x &lt; sqrt_limit; ++x) { 

        // see note in inner loop
        x_square = x * x;

        // apply same here
        //for (int y = 1; y * y &lt; limit; y++) { 
        for (int y = 1; y &lt; sqrt_limit; ++y) { 

            // you calculate x * x and y * y multiple times
            // it often helps to have intermediate variables
            // (especially if you have intermediate calls which
            // could prevent the compiler from optimizing)
            // also X can be calculated outside the loop
            y_square = y * y;

            //int n = (4 * x * x) + (y * y); 
            int n = 4 * x_square + y_square; 

            if (n &lt;= limit &amp;&amp; (n % 12 == 1 || n % 12 == 5)) 
                sieve.flip(n); 

            // this one seems to be used twice, either it's wrong or
            // at least you can optimize by calculating it once only
            //n = (3 * x * x) + (y * y); 
            n = 3 * x_square + y_square; 

            {
                // if it is wrong and both are not the same, keep as you've done

                if (n &lt;= limit &amp;&amp; n % 12 == 7) 
                    sieve.flip(n);

                // so? same or needs fixing?
                n = (3 * x * x) - (y * y); // &lt;- fix this...

                if (x &gt; y &amp;&amp; n &lt;= limit &amp;&amp; n % 12 == 11) 
                    sieve.flip(n);
            }
    // OR
            {
                // they are the same, then you can simplify on 'n'
                // this optimization is always available, it's up to you to
                // know which of the 3 equations give you the smallest number
                //
                // This is most certainly what you are looking for...
                if(n &gt; limit)
                    break;

                // remember that the % involves a division
                // and again the compile may or may not be able to optimize...
                // here I do it manually to be sure
                int const n_mod12 = n % 12;
                if (n_mod12 == 7)
                    sieve.flip(n);

                if (x &gt; y &amp;&amp; n_mod12 == 11) 
                    sieve.flip(n);
            }
        } 
    } 

    // same sqrt() optimization
    //for (int r = 5; r * r &lt; limit; ++r) { 
    for (int r = 5; r &lt; sqrl_limit; ++r) { 

        if (sieve.test(r)) { 

            // same optimization as above, pre-calculate square
            int r_square(r * r);
            //for (int i = r * r; i &lt; limit; i += r * r) 
            for (int i = r_square; i &lt; limit; i += r_square) 
                sieve.reset(i);
        } 
    } 

    // if you can eliminate an if() from inside your loops, do it
    //for(int i=sieve._Find_first();i&lt; sieve.size();i = sieve._Find_next(i))
    for(int i = sieve._Find_next(1); i &lt; sieve.size(); i = sieve._Find_next(i))

    {
        //if(i==0||i==1)continue; -- not necessary, we won't get 0 and 1
        cout&lt;&lt;i&lt;&lt;" ";
    }
    cout&lt;&lt;endl;
}

// as mentioned by Toby Speight, you should use `int`, but of course...
// since you did that `#define int long long` ...
signed main()
{
    compute(LIM);
    return 0;    
}
</code></pre>

<p>The <strong>HUGE</strong> thing that C/C++ let you do but you should never ever do is:</p>

<pre><code>#define int long long
</code></pre>

<p>That's going to get you fired from any sensible software company...</p>

<p>The next one is these two lines I added:</p>

<pre><code>                if(n &gt; limit)
                    break;
</code></pre>

<p>That will probably be enough to get your algorithm to go fast. Right now you continue testing even when <code>n</code> is always going to be larger than <code>limit</code>.</p>

<p>One final comment, it is really rare in C/C++ that you would use an inclusive limit. There is of course nothing against that, but it makes the entry test (which I added) look really weird for an old C/C++ programmer. I understand that the Wikipedia page used an inclusive limit and thus you decided to use that...</p>
    </div>