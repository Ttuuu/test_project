<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This sorts the list in reverse, but that's still sorting, no issue there. But I think that should be noted in the code, since it is important and may not be expected. There are plenty of comments that explain the minutia, but not bigger things such as that. There is also no mention of what algorithm <code>max_heap</code> uses.</p>

<p>The way <code>max_heap</code> works is, to me, very confusing. At the face of it, it is not at all obvious what kind of iteration is happening here. The way the algorithm picks up where it left off after bubbling-up an item is remeniscent of <a href="https://en.wikipedia.org/wiki/Gnome_sort" rel="nofollow noreferrer">Gnome sort</a>, slowly walking over all the items in between again. That's clever, but a more conventional setup with a nice counted for-loop and a while-loop inside of it to bubble-up an item would not need to make repeated passes over the entire list.</p>

<p>So unless I made a mistake in my reasoning, and that is easily possible because this is a quite confusing arrangement, <code>max_heap</code> may take quadratic time in the worst case. That is not good, it can be done in linear time using the classic <a href="https://www.geeksforgeeks.org/time-complexity-of-building-a-heap/" rel="nofollow noreferrer">bottom-up heap construction</a>, or at least in O(n log n) time using two loops, one over all the items and an other to bubble-up that item. O(n log n) construction isn't <em>too</em> bad, that is the overall complexity of HeapSort anyway, but O(nÂ²) heap construction is a waste of a good algorithm. But maybe I'm wrong and maybe your algorithm isn't quadratic time, let me know, and add comments explaining the bigger picture.</p>

<p>The way <code>max_heap</code> is used is an other issue. First, <code>sort_heap</code> throws away a useful property of Heap Sort: it can be done in-place. That is done by extracting an item from the heap, which "shrinks" the heap by one place, then the extracted item goes into the space that was emptied at the end of the heap. That way, the sorted array is built up from the end, at the same time that the heap is being used up. It's a nice trick. Using it is not mandatory of course. This trick is why a max heap is usually used rather than a min heap: the biggest item is needed first, to put it at the end of the array.</p>

<p>A bigger issue is that <code>max_heap</code> keeps being used every time an item is removed from the heap. It's a very expensive way to restore the heap property, and there is a much better solution: grab the last item in the heap, make it the new root, then restore the heap property top-down (aka "bubble down"). That way only O(log n) work is involved per iterating of the sorting loop, instead of however much <code>max_heap</code> costs (which depends on the algorithm used, but at least linear time).</p>

<p>Due to this and the quadratic time <code>max_heap</code> (overall leading a cubic time algorithm), I would say that this algorithm does not match what Heap Sort is supposed to be.</p>
    </div>