<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't add much to what have already been written, other than when it comes to performance, you'll often find Linq (<code>long numAs = input.Count(c =&gt; c.Equals('a'));</code>) to be rather slow compared to a more traditional <code>for</code> or <code>while</code> loop. But if you insists on Linq, you could go all in like:</p>
<pre><code>long CountChars(string data, long length, char c = 'a')
{
  if (string.IsNullOrEmpty(data) || length &lt;= 0) return 0;

  long repetitions = length / data.Length;
  long remSize = length % data.Length;

  return data
    .Select((ch, i) =&gt; (ch, i))
    .Where(chi =&gt; chi.ch == c)
    .Sum(chi =&gt; chi.i &lt; remSize ? repetitions + 1 : repetitions);
}
</code></pre>
<p>Here is used the overload of <code>Select()</code> that provides the index along with each element to map to a value tuple, from which it is possible to filter by <code>'a'</code> and finally sums up the repetitions: if the index is lesser than the size of the reminder then <code>repetitions + 1</code> should be summed otherwise only the repetitions for each found <code>'a'</code>.</p>
<hr>
<p>A traditional approach using <code>while</code>-loops - essentially using the same approach as above could look like:</p>
<pre><code>long CountChars(string data, long length, char c = 'a')
{
  if (string.IsNullOrEmpty(data) || length &lt;= 0) return 0;

  long count = 0;
  long repetitions = length / data.Length + 1; // + 1 for the possible extra 'a' in the reminder
  long remSize = length % data.Length;

  int i = 0;

  while (i &lt; remSize)
  {
    if (data[i++] == c)
      count += repetitions;
  }

  repetitions--;
  while (i &lt; data.Length)
  {
    if (data[i++] == c)
      count += repetitions;
  }

  return count;
}
</code></pre>
<p>With this approach the string <code>s</code> (<code>data</code>) is only parsed once.</p>
    </div>