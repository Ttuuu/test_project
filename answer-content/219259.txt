<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Object Oriented Programming Improvements</strong></p>

<p>The first thing you can do to improve code like this is to use dependency injection, instead of instantiating objects with <code>new</code> inside of objects.</p>

<pre><code>// Setup your class hierarchies like this.

abstract class Controller
{
    protected $model;

    protected function __construct(Model $model)
    {
        $this-&gt;model = $model;
    }
}

class RootController extends Controller // or HomeController extends Controller
{
    public function __construct(Model $model)
    {
        parent::__construct($model);
    }
}
</code></pre>

<p>Then you execute:</p>

<pre><code>$controller = new RootController(new RootModel());  // But, read on.
</code></pre>

<p>Notice the use of type hinting in the <code>__construct</code> function. Program to an interface, not an implementation. </p>

<p>Use abstract classes (which you cannot make an instance of) to factor out common properties and methods into one place. Extend abstract classes with specific species of classes. This is where the power of polymorphism via the Strategy Pattern comes in to play!</p>

<p>By type hinting with abstract classes, or interface types, you will not have to change your code simply because a different species of child object need to be used at some other point in time.</p>

<p>If you find that the parents of several classes should have the same functionality or constants, factor again and define a PHP Interface and slap it on to a class like this.</p>

<pre><code>class RootController extends Controller implements Printable
{
    public function __construct(Model $model)
    {
        parent::_construct($model);
    }
}
</code></pre>

<p>Where in this case, <code>Printable</code> would be a set of virtual functions, and or constants, that form a contract, forcing any class that implements <code>Printable</code> to define certain public functions / hooks so that it can be used as a "Printable" object by unrelated code in other places.</p>

<p><strong>Model-View-Controller Improvements</strong></p>

<p>In terms of MVC, you may want to consider how a <code>Model</code> is going to send data to a <code>View</code>. Using a <code>Controller</code>'s method as the working area for passing dat from a <code>Model</code> to a <code>View</code> is common. If a <code>Controller</code>'s method can act as a working space for a particular command, then "M" and "V" (<code>Model</code> and <code>View</code>) can use "C's" method as a place to coordinate things.</p>

<p>Given the following, you could use your programming knowledge to devise a solution where a <code>View</code> is passed data from a <code>Model</code>, without injecting an instance of said <code>Model</code> into a <code>View</code>. In other words, you do not want to do this.</p>

<pre><code>abstract class View
{
    protected $model;

    protected function __construct(Model $model)
    {
        $this-&gt;model = $model;
    }
}

class NewsletterView extends View
{
    public function __construct(Model $model)
    {
        parent::__constrcut($model);
    }
}
</code></pre>

<p>Summarizing, there are two well known options:</p>

<ol>
<li><p>Use a method of a <code>Controller</code> (i.e. a command). Have the <code>Model</code> pass a data structure (array or iterable object) to the <code>View</code>.</p></li>
<li><p>Give the <code>View</code> a reference to the <code>Model</code> and delegate the chore of getting data to the <code>Model</code> within the <code>View</code>. However, as noted this is not what you want to do.</p></li>
</ol>

<p>Note that option #2 can create <em>strong coupling</em> between a <code>Model</code> and a <code>View</code>, because the <code>View</code> <em>must then use methods off of the</em> <code>Model</code> instance to get at data. If a <code>Model</code>'s methods change (such as the names, or method parameters), the <code>View</code> will have to change, accordingly.</p>

<p>What you want to do is have a setup like this.</p>

<pre><code>abstract class Controller
{
    protected $model;
    protected $view;

    protected function __construct(Model $model, View $view)
    {
        $this-&gt;model = $model;
        $this-&gt;view = $view;
    }
}

class NewsletterController extends Controller // or HomeController extends Controller
{
    public function __construct(Model $model, View $view)
    {
        parent::__construct($model, $view);
    }

    /**
    * A totally made up method.
    */
    public function register(array $suscriberData) 
    {
        $viewData = $this-&gt;model-&gt;addSubscriber($suscriberData));
        $this-&gt;view=&gt;updateRegistrationPage($viewData);
    }
}
</code></pre>

<p>Then you execute:</p>

<pre><code>$controller = new NewsletterController(new NewsletterModel(), new NewsletterView());
</code></pre>

<p>(<strong>Note</strong>: A dependency injection container can resolve class dependencies off screen and just issue you the object you request! Very handy, but not mandatory.)</p>

<p>Your URL to such a command would be:</p>

<p><em><a href="http://yourdomain.com/newsletter/register" rel="nofollow noreferrer">http://yourdomain.com/newsletter/register</a></em></p>

<p>Where "newsletter" is your <code>Controller</code>, and "register" is the <em>command</em>.</p>

<p>Typically, the machinery of a framework (Front Controller / Router / Dispatcher), or just good programming generally, handles transforming the path component of a URL (<code>REQUEST_URI</code>) into an instance of a <code>Controller</code>. In that case, because instances are being created dynamically, you will want to use a class autoloader (as in <a href="https://www.php-fig.org/psr/psr-4/" rel="nofollow noreferrer">PHP-FIG PSR-4</a>) at minimum. Using an autoloader can eliminate all but one <code>require</code> statement for accessing classes. You will need one <code>require</code> statement to bring your autoloader code into scope. :-)</p>

<p>This is why people are encouraged to use namespaces with their OO PHP code. Using a PSR-4 compliant autoloader will automatically find and load your custom classes! The implication being, that your <code>include_path</code> no longer needs to list every dog-on path that you have classes loading from! ;-)</p>

<p>However, if you use modular HTML templates for your web pages (<code>require header.php</code>, <code>require footer.php</code>, <code>require aside.php</code>, etc ..), be sure to have the location of those files in your <code>include_path</code>!</p>

<p>Dependency injection containers are not mandatory, but they do simplify the usage of objects by decoupling where a class is instantiated from where it is used. In other words, a DI container is a very precise gumball machine for objects and other data. :-)</p>
    </div>