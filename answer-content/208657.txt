<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bug: if the winning move is the one that fills the board, the game ends in draw instead of a win. This is because you check for a draw before you check for a win. </p>

<p>You can simplify things a bit: only the current player can win, so there is no need to check if the other player has won.</p>

<p><code>main</code> doesn’t need a <code>return 0</code>, it is implied.</p>

<p>Besides the redundancies already pointed out, <code>checkWin</code> is also a bit redundant, you can simply check to see if three values in a row are equal, it doesn’t matter what value they have. Thus, </p>

<pre><code>board[0,i] == board[1,i] &amp;&amp; board[0,i] == board[2,i]
</code></pre>

<p>suffices.</p>

<p>That said, a lot of the work done here would be simpler if the board was stored in a flat array with <code>index = i + 3*j</code>.</p>

<p>In this case, resetting the board is a simple call to <code>std::fill</code>, and checking to see if the board is full is a single call to <code>std::all_of</code>. Of course, if the board is a class, as suggested in the earlier answer, then you can implement an indexing operation that converts the <code>(i,j)</code> pair to a linear index.</p>
    </div>