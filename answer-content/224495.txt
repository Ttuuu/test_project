<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks quite succinct and sufficient. The only suggestions I would offer are minor tweaks:</p>

<ul>
<li><p>for the imperative solution, a <code>for...of</code> loop could be used to eliminate the need to do bookkeeping on the counter variable and use it to index into the string to get each character:</p>

<pre><code>for(const c of s) {
  if (par[c]) {
    rep.push(par[c]);
  } else {
  if (rep.pop() !== c) {
    return false;
  }
}
</code></pre></li>
<li><p>for the functional solution, the callback function could be declared on a previous line, and then the <code>return</code> line can be reduced to a single line:</p>

<pre><code>const pushOrPopMatch = x =&gt; par[x] ? rep.push(par[x]) : rep.pop() === x
return [...s].every(pushOrPopMatch) &amp;&amp; !rep.length;
</code></pre>

<p>That line defining <code>pushOrPopMatch()</code> is 73 characters long, which some might argue is too long for a line, given it would be inside a function and indented at least two spaces, so it may not be ideal</p></li>
</ul>
    </div>