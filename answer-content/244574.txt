<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have analyzed your code and suggest the following changes:</p>
<ul>
<li><p>the second loop over  <code>j</code> to find the <code>startdate</code> is superfluous and can be included in the search loop by using a simple <code>if</code>.</p>
</li>
<li><p>avoid using <code>Redim Preserve</code> in a loop, it's time consuming as each time the array has  to be copied completely; <code>Dim</code> the array once to a set maximum and shorten it once after the loop.</p>
</li>
<li><p>from your code I am deducting that the array <code>deaths()</code> is filled from scratch for each loop over <code>i</code>. Therefore, <code>k</code> should be set to zero within the <code>i</code>-loop.</p>
</li>
<li><p>in the end, the whole array <code>deaths()</code> is copied cell-by-cell to a target range. This can be done in one statement, which is multiple times faster than touching each element.</p>
<pre><code>  Sub ImportCSSEDeaths()

      Dim i As Long, j As Long, k As Long
      Dim lastrow As Long, clastrow As Long, lastcol As Long
      Dim deaths() As Long
      Dim startDate As Date
      Dim filePath As String
      Dim wb As Excel.Workbook, ws As Excel.Worksheet, cws As Excel.Worksheet

      Set cws = ThisWorkbook.Sheets("Raw_Data")
      clastrow = cws.Cells(Rows.count, "b").End(xlUp).row

      filePath = "C:\Users\chris.h\Desktop\COVID\Other_Data\CSSE\CSSE_Deaths.xlsx"
      Set wb = Excel.Workbooks.Open(filePath)
      Set ws = wb.Worksheets(1)
      lastrow = ws.Cells(Rows.count, "b").End(xlUp).row
      lastcol = ws.Cells(1, Columns.count).End(xlToLeft).Column

      For i = 2 To lastrow
          'puts country row deaths into array
          With ws
              k = 0  ' deaths() is zero-based! Option Base 0
              ReDim deaths(lastcol) ' cannot get larger than this
              For j = 3 To lastcol
                  If .Cells(i, j).Value &lt;&gt; 0 Then
                      deaths(k) = .Cells(i, j).Value
                      If k = 0 Then
                          startDate = .Cells(1, j).Value
                      End If
                      k = k + 1
                  End If
              Next j
          End With
          ReDim Preserve deaths(k - 1) ' shrink once to actual size

          'finds startdate in compiled data and enters array values down column E
          With cws
              For j = 2 To clastrow
                  If .Cells(j, "a").Value = ws.Cells(i, "a").Value And _
                  .Cells(j, "b").Value = ws.Cells(i, "b") And _
                  .Cells(j, "c").Value = startDate Then
                      ' copy deaths(0..ub) to .cells(j..ub+j,"e") in one step
                      Dim dest As Range
                      Set dest = .Cells(j, "e") ' first cell in destination
                      Set dest = dest.Resize(UBound(deaths) + 1, 1)
                      dest.Value = Application.Transpose(deaths)
                  End If
              Next j
          End With
      Next i

      wb.Close False
  End Sub  ' ImportCSSEDeaths()
</code></pre>
</li>
</ul>
<p><strong>Edit: delete rows with a null value</strong></p>
<p>Following your comment, your routine <code>Delete_Extras()</code> not only searches row-by-row but does so for 11 times. You will probably have noticed that not all matching lines got deleted on the first pass.<br>
One way to fix this is to loop from the end to the beginning of the range, so that deleting a row does not affect rows yet unprocessed.<br>
Instead, I suggest the following: filter the range for a "0" in column H and delete all visible rows in one command, like this</p>
<pre><code>    Sub Delete_Extra_Rows_Based_On_Value()
    ' autofilter a range and delete visible rows
    ' 2020-07-01
    
        Dim cws As Worksheet
        Dim lastrow As Long
        Dim result As Range
        
        Set cws = ThisWorkbook.Worksheets("H:\Raw_Data")
        lastrow = cws.Cells(Rows.count, "B").End(xlUp).row
        
        With Application
            .ScreenUpdating = False
            .EnableEvents = False
            .Calculation = xlCalculationManual
            .DisplayAlerts = False
        End With
        
        ' clear any existing filters
        If cws.AutoFilterMode Then cws.ShowAllData
        ' apply filter
        With cws.Range("A1:H" &amp; lastrow)
            .AutoFilter Field:=8, Criteria1:=0
            ' delete matching rows
            .Offset(1, 0).SpecialCells(xlCellTypeVisible).Delete
            .AutoFilter
        End With
        
        With Application
            .ScreenUpdating = True
            .EnableEvents = True
            .Calculation = xlCalculationAutomatic
            .DisplayAlerts = True
        End With
    End Sub
</code></pre>
    </div>