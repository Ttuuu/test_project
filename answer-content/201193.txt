<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I normally don't write performance-sensitive code like this, but I think I managed to find a few improvements:</p>

<ul>
<li>Writing to <code>out</code> parameters is slower than using local variables, so you only want to assign to <code>result</code> once. This makes a big difference.</li>
<li>Rejecting null/empty input right away might improve performance in some cases, perhaps because it enables some JIT optimizations.</li>
<li>Overflow always causes a mismatch between the first input digit and the resulting value, so a single check should be sufficient.</li>
</ul>

<p>And a few bug-fixes:</p>

<ul>
<li><code>"00000000001"</code> was rejected because it has 11 digits, but it's a valid input. Leading zeroes should be ignored for length/overflow checks.</li>
<li><code>"4\05"</code> was parsed as <code>4</code>, but it's an invalid input. <code>input.Length</code> should be used instead of checking for null-terminators.</li>
<li><code>""</code> was parsed as <code>0</code>, but it's an invalid input.</li>
</ul>

<hr>

<p>According to my tests the following (safe) implementation is roughly 10%-15% faster. An unsafe variant should increase that to some 20%:</p>

<pre><code>public static bool TryParseInt(string input, out int result)
{
    // This check sometimes improves performance - perhaps the extra guarantees enable some JIT optimizations?
    if (input == null || input.Length == 0)
    {
        result = default(int);
        return false;
    }

    var length = input.Length;
    var isNegative = input[0] == '-';
    var offset = isNegative ? 1 : 0;

    // It's faster to not operate directly on 'out' parameters:
    int value = 0;
    for (int i = offset; i &lt; length; i++)
    {
        var c = input[i];
        if (c &lt; '0' || c &gt; '9')
        {
            result = default(int);
            return false;
        }
        else
        {
            value = (value * 10) + (c - '0');
        }
    }

    // Inputs with 10 digits or more might not fit in an integer, so they'll require additional checks:
    if (length - offset &gt;= 10)
    {
        // Overflow/length checks should ignore leading zeroes:
        var meaningfulDigits = length - offset;
        for (int i = offset; i &lt; length &amp;&amp; input[i] == '0'; i++)
            meaningfulDigits -= 1;

        if (meaningfulDigits &gt; 10)
        {
            // Too many digits, this certainly won't fit:
            result = default(int);
            return false;
        }
        else if (meaningfulDigits == 10)
        {
            // 10-digit numbers can be several times larger than int.MaxValue, so overflow may result in any possible value.
            // However, we only need to check the most significant digit to see if there's a mismatch.
            // Note that int.MinValue always overflows, making it the only case where overflow is allowed:
            if (!isNegative || value != int.MinValue)
            {
                // Any overflow will cause a leading digit mismatch:
                if (value / 1000000000 != (input[length - 10] - '0'))
                {
                    result = default(int);
                    return false;
                }
            }
        }
    }

    // -int.MinValue overflows back into int.MinValue, so that's ok:
    result = isNegative ? -value : value;
    return true;
}
</code></pre>
    </div>