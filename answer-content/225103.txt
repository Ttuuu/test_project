<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the concerns about redundancy and verbosity are probably well placed.</p>
<h2><code>andalso</code></h2>
<p>The short circuiting logical AND is <code>andalso</code>. It can be used to simplify the code:</p>
<pre><code>is_point({X, Y}) -&gt; is_number(X) andalso is_number(Y).
</code></pre>
<p>Generally, the pattern:</p>
<pre><code>// pseudo code
if f(x)
  return true
else
  return false
</code></pre>
<p>can be replaced with <code>return f(x)</code>. Or in languages like Erlang where everything is an expression, <code>f(x)</code> alone is sufficient.</p>
<h2>Atoms</h2>
<p>In Erlang, it is idiomatic to use atoms as the first level of data validation:</p>
<pre><code>is_point({point, X, Y}) -&gt; is_number(X) andalso is_number(Y).
</code></pre>
<p>More importantly, it aids in readability and debugging. Atoms let points be distinguished from football scores:</p>
<pre><code>1&gt; point:is_point({point, 3, 2}).
true
2&gt; point:is_point({football_score, 3, 2}).
** exception error: no function clause matching 
point:is_point({football_score,3,2})
(/erlang/point.erl line 4) 
</code></pre>
<p>Note that using atoms and good function names provides most of what we want to start debugging this type of problem. Football scores are not points and "letting it crash" provides better information than <code>badarg</code>.</p>
<h2>Message passing</h2>
<p>Labeling data with atoms lets us distinguish <code>{rhombus, P1, P2}</code> from <code>{rectangle, P1, P2}</code> and <code>{circle, P1, P2}</code>.</p>
<h2>Try-catch</h2>
<p>Taking error handling code out of <code>point:is_point</code> is consistent with the "unwritten code is bug free" heuristic. If crashes are problematic, the <em>caller</em> should wrap the call to <code>point:is_point/1</code> in a <code>try-catch-finally</code> block. The <em>caller</em> can handle the exception at whatever granularity it needs. And we can avoid the close coupling that coordinated error handling requires whenever the defaults are good enough.</p>
    </div>