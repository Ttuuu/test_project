<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks pretty good. Some suggestions:</p>

<ol>
<li><a href="https://stackoverflow.com/a/669486/96588"><code>[[</code> is preferred over <code>[</code> in Bash</a>.</li>
<li>This script could benefit from <code>set -o errexit -o nounset -o pipefail</code>. You'll need to set <code>cpu_cores=0</code> before referring to it in the loop, but that's just best practice.</li>
<li>Dividing by one isn't going to do much :)</li>
<li><p>The quotes are a cute feature, but I'd much rather see a summary of the point in them than the full sentences. Something like</p>

<blockquote>
  <p>Treat 15 minute load average above 1 as critical.</p>
</blockquote>

<p>A useful tactic I've found when dealing with comments is to think how you could name things to avoid comments altogether. Code can't lie, and names are very much like comments enshrined in code, so if you for example rename <code>minute15</code> to <code>quarter_load_average</code> or something else human readable you should be able to remove the</p>

<blockquote>
  <ol>
  <li>Find out a load was before 15 minutes.</li>
  </ol>
</blockquote>

<p>comment above it.</p></li>
<li>Since you're only interested in one row from <code>/proc/cpuinfo</code> I would <code>grep</code> for it. Your goal of making the script stand-alone should be weighed against at least

<ul>
<li>maintainability, which will suffer greatly if you only use builtin commands,</li>
<li>speed, which is already <a href="https://unix.stackexchange.com/q/169716/3645">not great for <code>read</code></a>, and</li>
<li>availability of <code>grep</code>, which is pretty much universal by now.</li>
</ul></li>
<li>You can redirect a line to standard input using <code>some_command &lt;&lt;&lt; "$line"</code> to avoid redundant <code>echo</code>s. So <code>echo "$quarter_load_average*100/1" | bc</code> could instead be <code>bc &lt;&lt;&lt; "$quarter_load_average*100/1"</code>.</li>
</ol>
    </div>