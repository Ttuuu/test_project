<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I would like to point out that it has been a great
pleasure to read the code with consistent formatting, helpful
comments, and clear logic.  The following points might be subjective
and nitpicky, but they don't represent my general impression.</p>
<h1>Argument parsing</h1>
<blockquote>
<p>The program <em>should</em> follow the <a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html#tag_12_02" rel="nofollow noreferrer">Utility Argument Syntax</a>,
however, it doesn't follow guidelines [...] 9 (<code>-u</code> does not need
to be the first argument).</p>
</blockquote>
<p>Wouldn't requiring <code>-u</code> to come before the operands make the
implementation easier though?  I'm thinking along these lines:</p>
<pre><code>let (buffered, operands) = match args.get(0) {
    None =&gt; {
        args.push("-".into());
        (true, &amp;args[..])
    }
    Some(arg) if *arg == "-u" =&gt; (false, &amp;args[1..]),
    Some(_) =&gt; (true, &amp;args[..]),
};
</code></pre>
<h1><code>BufRead</code> and <code>Write</code></h1>
<p>Instead of <code>&amp;mut dyn BufRead</code>, it's more common to take <code>BufRead</code> by
value.  The reason is that mutable references to <code>BufRead</code>
automatically implement <a href="https://doc.rust-lang.org/std/io/trait.BufRead.html#impl-BufRead-3" rel="nofollow noreferrer"><code>BufRead</code></a>.</p>
<p>Instead of taking an argument of type <code>&amp;mut BufWriter&lt;impl Write&gt;</code>, it
suffices to take <code>Write</code>, since the functionality of <code>BufWriter</code> can
be accessed via <code>Write</code>.</p>
<p>Result:</p>
<pre><code>fn dump_buffered_single&lt;R, W&gt;(mut src: R, mut dest: W) -&gt; io::Result&lt;()&gt;
where
    R: BufRead,
    W: Write,
{
    // ...
}
</code></pre>
    </div>