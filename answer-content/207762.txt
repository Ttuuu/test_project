<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<h2>PEP 8</h2>

<p>There are rules in Python, how you should format your code. If you want to write proper code, you should follow it: <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a></p>

<h2>Use an IDE</h2>

<p>I suggest using a good IDE for Python, since it will give you hints about errors in your code. As I opened your code, my IDE found <strong>6 warnings</strong> and <strong>79 weak warnings</strong>. Here is a list of IDEs: <a href="https://realpython.com/python-ides-code-editors-guide/" rel="nofollow noreferrer">https://realpython.com/python-ides-code-editors-guide/</a></p>

<h2>Remove unused code</h2>

<p>If there is any unused code, please remove it. See line 22 to 24:</p>

<pre><code># displays screen size
def function():
    print(initialStr)
</code></pre>

<h2>Organize Imports</h2>

<ul>
<li>You should remove unused imports, like <code>import subprocess</code>.</li>
<li>In your case, it may be okay to use <code>from tkinter import *</code>, but in general, you shouldn't. See here why: <a href="https://stackoverflow.com/questions/2386714/why-is-import-bad">https://stackoverflow.com/questions/2386714/why-is-import-bad</a> Instead, write <code>import tkinter</code> or <code>import tkinter as tk</code> (see example).</li>
</ul>

<h2>Use f-Strings</h2>

<p>In line 12 to 13 you built a String this way:</p>

<pre><code>width, height = pyautogui.size()
initialStr = "Screen Size: " + str(width) +" - " +str(height)
</code></pre>

<p>Instead, you could use f-Strings, which make it way easier:</p>

<pre><code>width, height = pyautogui.size()
initialStr = f"Screen Size: {width} - {height}"
</code></pre>

<p>More information: <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">https://realpython.com/python-f-strings/</a></p>

<h2>Use IntVar for iterations</h2>

<p>Since all possible values for iterations are integers, you should use an IntVar instead of DoulbeVar here (line 97, <code>iterations = DoubleVar()</code>). Your Iterations Scale will still work fine.</p>

<h2>Use if <strong>name</strong> == "<strong>main</strong>"</h2>

<p>Wrap your main code with <code>if __name__ == "__main__":</code>. See here why: <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">https://stackoverflow.com/questions/419163/what-does-if-name-main-do</a></p>

<h2>Use constants</h2>

<p>It's nice to declare constants, especially inside classes, so they are not in global scope. This way, you can modify simple values easily, no need for searching them inside your code. See example.</p>

<h2>Merge similar functions in one</h2>

<p>There is a programmer inside joke that says "no self respecting ethical programmer would ever consent to write a bomb Baghdad function. They would write a bomb city function to which Baghdad could be passed as a parameter." (source: <a href="https://codereview.stackexchange.com/a/204210/179357">https://codereview.stackexchange.com/a/204210/179357</a>).</p>

<p>From line 26 to 52 you wrote the following code:</p>

<pre><code>#saves mouse position 1
def position():
    time.sleep(2)
    global xmouse, ymouse
    xmouse, ymouse = pyautogui.position()
    print(str(xmouse)+","+str(ymouse))

    w2 = Label(ro, text="Position 1 set: "+str(xmouse)+","+str(ymouse)).grid(row=2,columnspan=2)

#saves mouse position 2
def position2():
    time.sleep(2)
    global xmouse2, ymouse2
    xmouse2, ymouse2 = pyautogui.position()
    print(str(xmouse2)+","+str(ymouse2))

    w3 = Label(ro, text="Position 2 set: "+str(xmouse2)+","+str(ymouse2)).grid(row=4,columnspan=2)


#saves mouse position 3
def position3():
    time.sleep(2)
    global xmouse3, ymouse3
    xmouse3, ymouse3 = pyautogui.position()
    print(str(xmouse3)+","+str(ymouse3))

    w4 = Label(ro, text="Position 3 set: "+str(xmouse3)+","+str(ymouse3)).grid(row=6,columnspan=2)
</code></pre>

<p>As you can see, you wrote nearly the same code three times. Whenever you see this, you should write one function and pass a parameter to determine, which position you address. I fixed this in my example below.</p>

<h2>Avoid global</h2>

<p>Using globals like you did in line 29 <code>global xmouse, ymouse</code> is bad programming style. See here why: <a href="https://stackoverflow.com/questions/423379/using-global-variables-in-a-function">https://stackoverflow.com/questions/423379/using-global-variables-in-a-function</a></p>

<h2>Shadowing scope variables</h2>

<p>It seems like you have been trying to declare variables and to modify them iside your functions. For example:
You declare <code>label</code> in line 117:</p>

<pre><code>label = Label(ro, text="Cycles are unset (Default=5)").grid(row=11,columnspan=2)
</code></pre>

<p>In function <code>sel</code> you try to override the <code>label</code> (line 57):</p>

<pre><code>label = Label(ro, text="Number of cycles: "+str(iterations.get())).grid(row=11,columnspan=2)
</code></pre>

<p>But this way you cannot address <code>label</code> from outer scope, instead you define a <strong>new</strong> variable, which is useless. Now your workaround by using <code>global</code> might come into mind. There are two solutions to this problem:</p>

<ol>
<li>Pass the variable as a <strong>parameter</strong>. E.g. <code>def sel(label):</code></li>
<li>Use <strong>classes</strong>, define <strong>members</strong> and reference them inside your <strong>methods</strong>. I suggest this way, as I did in my example below.</li>
</ol>

<h2>Reuse objects</h2>

<p>Now since we understand how to reference variables, we might manipulate them instead of creating new ones. So instead of creating new Labels and placing them <strong>over</strong> other labels (you can see that in your GUI, yikes!), you can simply modify them by using <code>label.config(text="foo")</code>.</p>

<h2>Don't block your GUI</h2>

<p><code>time.sleep(int)</code> blocks your whole GUI. It may work for your 2-second freeze to find mouse positions, but it's not nice for executing your autoklick event. Instead, you should start new threads.  Simply look at my example, you can find an implementation there.</p>

<h2>Add a way to cancel autoclicking</h2>

<p>It's a very important feature for your Autoclicker to be able to interrupt the script. See example</p>

<hr>

<h1>Example</h1>

<p><strong>autoclicker.py</strong></p>

<pre><code>import tkinter as tk
import pyautogui
import time
import threading


# inherits from Tk class, so each autoclicker is a Tk itself
class Autoclicker(tk.Tk):

    POSITION_COUNT_DEFAULT = 3

    TITLE = "AutoClicker1.0"

    ITERATIONS_MIN = 5
    ITERATIONS_MAX = 100
    ITERATIONS_RESOLUTION = 1

    TIMER_MIN = .2
    TIMER_MAX = 5
    TIMER_RESOLUTION = .2

    DELAY = 2  # in s

    # creates all widgets, variables...
    def __init__(self, pos_count=POSITION_COUNT_DEFAULT):

        tk.Tk.__init__(self)

        self.title(self.TITLE)

        self.pos_count = pos_count
        self.positions = [None] * pos_count

        # variables for scales and checkbuttons
        self.iterations = tk.IntVar()
        self.timer = tk.DoubleVar()
        self.doubleclick = tk.BooleanVar()

        width, height = pyautogui.size()
        self.label_dim = tk.Label(self, text=f"Screen Size: {width} x {height}")

        self.labels_position = []
        self.buttons_position = []

        for i in range(pos_count):
            self.labels_position.append(tk.Label(self, text=f"Position {i + 1} is unset"))
            self.buttons_position.append(tk.Button(self, text=f"Set Position {i + 1}",
                                                   command=lambda i_cpy=i: self.position(i_cpy)))

        self.scale_iterartions = tk.Scale(
            self,
            variable=self.iterations,
            orient=tk.HORIZONTAL,
            from_=self.ITERATIONS_MIN,
            to=self.ITERATIONS_MAX,
            resolution=self.ITERATIONS_RESOLUTION,
            label="Iterations:"
        )
        self.scale_timer = tk.Scale(
            self,
            variable=self.timer,
            orient=tk.HORIZONTAL,
            from_=self.TIMER_MIN,
            to=self.TIMER_MAX,
            resolution=self.TIMER_RESOLUTION,
            label="Timer:"
        )
        self.checkbutton_doubleclick = tk.Checkbutton(self, variable=self.doubleclick, text="Doubleclick")
        self.button_start = tk.Button(self, text="Start", command=self.start)
        self.label_error = tk.Label(self, foreground="red")

        # layout
        self.label_dim.pack()
        for i in range(pos_count):
            self.labels_position[i].pack()
            self.buttons_position[i].pack()
        self.scale_iterartions.pack()
        self.scale_timer.pack()
        self.checkbutton_doubleclick.pack()
        self.button_start.pack()
        self.label_error.pack()

        # set keyboard events
        self.bind("&lt;Key-Escape&gt;", self.cancel)

        # init cancel var, needed to interrupt autoclicking
        self.cancel = False

    # saves mouse positions
    def position(self, i):
        self.set_busy(True)  # lock ui

        def callback():
            time.sleep(self.DELAY)
            self.positions[i] = pyautogui.position()
            xmouse, ymouse = self.positions[i]
            self.labels_position[i].config(text=f"Position {i + 1} set: {xmouse}, {ymouse}")
            self.set_busy(False)  # unlock ui

        threading.Thread(target=callback).start()

    # locks/unlocks all widgets
    def set_busy(self, busy):
        state_new = tk.DISABLED if busy else tk.NORMAL 
        for button in self.buttons_position:
            button.config(state=state_new)
        self.scale_iterartions.config(state=state_new)
        self.scale_timer.config(state=state_new)
        self.checkbutton_doubleclick.config(state=state_new)
        self.button_start.config(state=state_new)

    # starts autoclicking
    def start(self):

        def callback():
            for _ in range(self.iterations.get()):
                for position in range(self.pos_count):
                    if not self.cancel:
                        if self.doubleclick.get():
                            pyautogui.doubleClick(self.positions[position])
                        else:
                            pyautogui.click(self.positions[position])
                        time.sleep(self.timer.get())
            self.cancel = False
            self.set_busy(False)  # unlock ui

        # checks for unset variables, if one or more are unset it returns an error
        if None in self.positions:
            self.label_error.config(text="ERROR: Some positions are not set")

        # if all settings have been set then the program can start autoclicking
        else:
            self.set_busy(True)  # lock ui
            self.cancel = False
            self.label_error.config(text="")
            threading.Thread(target=callback).start()

    # interrupts autoclicking (press Escape-Key)
    def cancel(self, _):
        self.cancel = True


if __name__ == "__main__":
    # change the parameter to any number of positions you want to have
    Autoclicker(2).mainloop()
</code></pre>
    </div>