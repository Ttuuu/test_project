<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>toDigitsRev</h1>

<p>You can combine these two cases:</p>

<pre><code>toDigitsRev 0 = []
toDigitsRev n
  | n &lt; 0 = []
</code></pre>

<p>I think having one case makes the code clearer:</p>

<pre><code>toDigitsRev
  | n &lt;= 0 = []
</code></pre>

<h1>doubleEveryOther</h1>

<p>You are correct to write <code>doubleEveryOther</code> as a recursive function, but ... you don't need to call <code>length</code> on every call!</p>

<p>Think of a way to writing <code>doubleEveryOther</code> but with calling <code>length</code> at most once.</p>

<h1>length and reverse</h1>

<p>As you become more familiar with Haskell you learn that you should be wary of calling <code>length</code> and <code>reverse</code> on lists. In this case it is not a big deal because the lists involved are very short, but, in general, if you find yourself using these functions a lot it's an indication that you are using the wrong data structure.</p>

<p>As a bonus exercise, see if you can figure out a way to implement the <code>validate</code> function without using <code>length</code> or <code>reverse</code>.</p>
    </div>