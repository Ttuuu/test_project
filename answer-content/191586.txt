<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Why do you have both: static methods and static instance? You should either remove the <code>instance</code> property (as if you had a "static" class, just make <code>eventDictionary</code> static), or keep it, but make methods non-static (singleton (anti-)pattern).</p></li>
<li><p>I'm pretty sure this line should throw <code>NullReferenceException</code>.</p>

<blockquote>
<pre><code>//Add event to the Dictionary for the first time
thisEvent += listener;
</code></pre>
</blockquote>

<p>If <code>thisEvent</code> was not found in a dictionary, it should be <code>null</code> at this point.</p></li>
<li><p>This does not look reusable to me:</p>

<blockquote>
<pre><code>//Re-usable structure/ Can be a class to. Add all parameters you need inside it
public struct EventParam
{
    public string param1;
    public int param2;
    public float param3;
    public bool param4;
}
</code></pre>
</blockquote>

<p>The meaning of those fields is extremely unclear, and the suggestion to "add all parameters you need" sounds like a bad idea. What if two events need different sets of parameters? What if one of them needs two floats? How will this architecture evolve then? I see two ways to make this class reusable. </p>

<ul>
<li>One is to use weakly typed parameters, so instead of passing <code>EventParam</code> you pass <code>object</code> and trust that event handlers will do the cast correctly. Very usafe, but easy to implement. </li>
<li>A much better approach is to use generic methods and instead of <code>EventParam</code> use generic argument as parameter. It is harder to implement properly though.</li>
</ul></li>
</ol>
    </div>