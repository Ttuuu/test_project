<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>EntryPoint</h3>

<p>Your entry point code does not make sense to me. You have prepared for asynchronously launching tasks, throtling maximum 2 tasks concurrently. However, you forgot to add tasks to <code>taskList</code> and use an <code>await</code> rather than <code>Task.Run</code>. You did implement this pattern correctly at <code>InitalizeSenderAsync</code>.</p>

<blockquote>
<pre><code>var throttler = new SemaphoreSlim(initialCount: 2);
List&lt;Task&gt; taskList = new List&lt;Task&gt;();
// .. code
await Task.WhenAll(taskList);
</code></pre>
</blockquote>

<hr>

<h3>Threading</h3>

<ul>
<li>API operations that chain async code calls, should use <code>ConfigureAwait(false);</code> in order not to postback to the initially captured synchronization context.</li>
<li><code>InitalizeSenderAsync</code> updates a local variable <code>i = i - 1;</code> from multiple threads; use <code>Interlocked.Decrement(ref i);</code> instead for decrementing an int atomically.</li>
</ul>
    </div>