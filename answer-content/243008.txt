<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Matrix indexing</h2>

<p>The <code>display</code> function is a handful. It's often better to use a matrix library like <code>numpy</code> to allow better indexing features. For instance,</p>

<pre class="lang-py prettyprint-override"><code>import numpy as np
one_thru_nine = list(range(1,10))
print(one_thru_nine)
matrix = np.array(one_thru_nine).reshape(3,3)
print(matrix)
print(matrix[0, 1])
print(matrix[1, 1])
print(matrix[2, 2])
</code></pre>

<pre class="lang-bsh prettyprint-override"><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]
[[1 2 3]
 [4 5 6]
 [7 8 9]]
2
5
9
</code></pre>

<p>(Disclaimer: <code>np.array(one_thru_nine).reshape(3,3)</code> is not really an ideal way of initializing <code>numpy</code> arrays, it's just for demonstration purposes.)</p>

<p>Of course, do beware of <a href="https://en.wikipedia.org/wiki/Zero-based_numbering" rel="nofollow noreferrer">zero-indexing</a>. </p>

<h2>Magic numbers</h2>

<p>As a rule of thumb, avoid <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic numbers</a>. Try not to put raw integers into code. </p>

<pre class="lang-py prettyprint-override"><code>return 0 &lt; box_num &lt; 10
</code></pre>

<p>will be more readable as </p>

<pre class="lang-py prettyprint-override"><code>min_boxes, max_boxes = 0, 10
return min_boxes &lt; box_num &lt; max_boxes
</code></pre>

<p>Similarly, I can understand what <code>Turn=3</code> does, but it's unintuitive.</p>

<h2>If-Else statements</h2>

<pre class="lang-py prettyprint-override"><code>else:
  pass
</code></pre>

<p>is redundant. If you don't have anything to do when <code>if</code> and <code>elif</code> conditions fail, you don't have to add the <code>else</code> statement altogether -- unlike some other languages.</p>

<p>That is, you can just do: </p>

<pre class="lang-py prettyprint-override"><code>while True:
  if condition_one:
    do_something()
  elif condition_two:
    do_something_else()
</code></pre>

<h2>Class declaration</h2>

<p>You don't need to put parentheses next to class declarations if you are not inheriting from a super class. </p>

<pre class="lang-py prettyprint-override"><code>class Board():
   def __init__(self):
</code></pre>

<p>can just be</p>

<pre class="lang-py prettyprint-override"><code>class Board:
   def __init__(self):
</code></pre>

<h2>Casing</h2>

<p>As a general rule of thumb, in classes are in <a href="https://techterms.com/definition/pascalcase" rel="nofollow noreferrer">PascalCase</a> and everything else (modules, variables, functions, methods) are in <a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">snake_case</a>. As such, <code>from AskUser import ask_user as As</code> should be reformatted as <code>from ask_user import ask_user as as_as</code> or something similar.</p>

<p>Similarly, things like <code>Turn</code> should be <code>turn</code>. </p>

<h2>Wrap your module with <code>main</code></h2>

<p>In general, if you are not declaring globals, and you declare functions that you will actually call as main (perhaps you're familiar with <code>C</code> or <code>Java</code>?) you should wrap them in a statement of</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
  board = Board()
  turn = randint(0,1) ... 
</code></pre>

<p>If you don't get into the habit of this, you'll end up executing code you don't want to when you're just importing code from other modules.</p>

<h2>Others</h2>

<ul>
<li>I don't see the use of <code>valid</code> and <code>invalid_message</code> anywhere? </li>
</ul>
    </div>