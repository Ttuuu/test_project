<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I had a very short look at <code>lightblog/application/controllers/Pages.php</code> and I noticed that these two values were not used in the <code>page()</code> method:</p>

<pre><code>$data['pages']
$data['posts']
</code></pre>

<p>Then I realized that you hand over <code>data</code> to other objects and they might be using these two values. Who knows? This makes your code very hard to understand and to debug. </p>

<p>Basically you're treating the <code>$data</code> array as a sort of object you hand over to other classes.</p>

<p>But wait, did I say 'object'? But what if it was? Clearly you have a need to keep data accessible, but why use an array that you need to recreate every time? Why not use a class?</p>

<p>Now I don't have any idea how your code is structure, and which class would be the best to use for this. But it would make sense to extend the basic CodeIgniter controller class to hold this data, like so:</p>

<pre><code>class Data_Controller extends CI_Controller 
{
    private $data;

    public function __construct()
    {
        parent::__construct();
        $this-&gt;data = $this-&gt;Static_model-&gt;get_static_data();
        $this-&gt;data['pages'] = $this-&gt;Pages_model-&gt;get_pages();
        $this-&gt;data['categories'] = $this-&gt;Categories_model-&gt;get_categories();
        $this-&gt;data['posts'] = $this-&gt;Posts_model-&gt;sidebar_posts($limit=5, $offset=0);
        $this-&gt;data['page'] = $this-&gt;Pages_model-&gt;get_page($page_id);
    }


    public function getData()
    {
        return $this-&gt;data;
    }

}
</code></pre>

<p>or something to the same effect and then extend this for your pages class:</p>

<pre><code>class Pages extends Data_Controller {

    public function __construct()
    {
        // currently this whole method doesn't do anything, it can be removed
        parent::__construct();
    }

    public function page($page_id) {
        $data = $this-&gt;getData();
        ..........................

    }

}
</code></pre>

<p>And, of course, those controller classes that don't need all that data can just extend <code>CI_Controller</code>.</p>

<p>I'm sure there are other ways of doing this. I don't like the fact that now you still collect all that information without actually knowning if it is needed. I would make the retrieval of the data dependent on the fact that it is actually used. In other words use getter methods, not a data array. I'll give an example for 'pages' and 'posts', but you have to create the other ones yourself:</p>

<pre><code>class Data_Controller extends CI_Controller 
{

    public function getPages()
    {
        return $this-&gt;Pages_model-&gt;get_pages();
    }

    public function getCatagories()
    {
        return $this-&gt;Categories_model-&gt;get_categories();

    }

}
</code></pre>

<p>If you need to buffer the data you can do:</p>

<pre><code>class Data_Controller extends CI_Controller 
{

    public function getCatagories()
    {
        static $buffer = NULL;
        if (is_null($buffer)) $buffer = $this-&gt;Categories_model-&gt;get_categories();
        return $buffer;
    }

}
</code></pre>

<p>Keep in mind that this buffer will work for all instances of <code>Data_Controller</code>. That can be an advantage, or a disadvantage.</p>

<p>OK, that was a bit long. I hope you got some new ideas from my ramblings.</p>
    </div>