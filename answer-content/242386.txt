<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My first feedback about <code>IFileValidator</code> interface would be to have an <code>Exists()</code> method, just like how you're having one in <code>IDirectoryValidator</code> interface. Plus the Validator interfaces are doing much more than validation I feel. For example, it is also trying to get a list of subdirectories and files. It is good if Validators only handle the job of validations and let the classes who implement them handle the other jobs. In fact, you can have one more interface called <code>IValidator</code> like</p>

<pre><code>interface IValidator
{
    bool Validate();
}

interface IDirectoryValidator: IValidator
{

}

interface IFileValidator : IValidator
{

}

class DirectoryValidator : IDirectoryValidator
{
    private string mPath;

    public DirectoryValidator(string path)
    {
        mPath = path;
    }

    public bool Validate()
    {
        // You can have following validations implemented in this class
        // Check if the path is a valid string, if so
        // Check if path exists, if so 
        // Check if the directory is accessible and so on...

        return false;
    }
}

class FileValidator : IFileValidator 
{
    private string mPath;

    public FileValidator(string path)
    {
        mPath = path;
    }

    public bool Validate()
    {
        // You can have following validations implemented in this class
        // Check if the file path is valid string, if so
        // Check if path exists, if so 
        // Check if the file is accessible and so on...

        return false;
    }
}
</code></pre>

<p>Of course, this is just an idea, on how Validators can just have the validation logic. </p>

<p>Also, I see <code>GetFiles()</code> is being called multiple times like in <code>FilesInDirectoriesEqual()</code> and <code>DirectoriesContainsSameAmountOfFiles()</code> for the same path. It means you're trying to access your drives again and again. If your drives are huge then it might take time to access every folder and file. Hence, to improve it based on your needs you can make it a one-time operation. </p>

<p>Looking at the code I sense you're using just two paths to compare at a time. If it so, you can pass them inside the constructor of the class and run <code>GetFiles()</code> or <code>GetDirectories()</code> and store it in a property. It can significantly improve performance.</p>
    </div>