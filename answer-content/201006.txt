<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Preface: this may be off-topic since I am really reviewing the code in the linked blog post rather than what the user posted.  However, since the two are linked, I think this may be helpful.</p>

<hr>

<p>Part of a code review (IMO) is to check assumptions.  Here you're assuming that initializing a vector takes a long time.  </p>

<p>The simplest check is to first compile a just the initialization and see how long it take.  Using a vector with 134217728 elements, it takes 2.5 seconds. Yeah, I'd say that's worth optimizing!</p>

<hr>

<p>Since we're optimizing performance, let's check to see how fast this new method really is.  Ideally I'd use perf to check, but I'm on a Mac so I'm going to use Instruments.  Also, I commented out all the IO from the code you posted.  As another user mentioned, it was annoying that you used DNDEBUG to control std::cout because if I defined DNDEBUG my assert wouldn't work and the test would be invalid. </p>

<p><a href="https://i.stack.imgur.com/fGbpW.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/fGbpW.png" alt="enter image description here"></a></p>

<p>This report is for 1099511627776 elements in the vector and 10000 accesses.  This is a very short sample which sort of skews the results.  Since the number of accesses directly sways the percents, the percents are not really important. If you knew what kinds of parameters you'd have in production, then obviously you should test with those. Still, it shows some slow sections.</p>

<p>I've highlighted two lines which take a long time.  These are the calls to new/delete for the underlying vectors.  They take about 0.15 seconds alone.</p>

<p>There is another algorithm to solve this problem with no expensive memory operations in the constructors or destructors.  Use a map!  Store index as key and value as value. I made a quick and dirty implementation and ran it against this implementation.  Below are some timed graphs.  I used -O3 for all versions.</p>

<p><a href="https://i.stack.imgur.com/jzbL0.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jzbL0.png" alt="enter image description here"></a></p>

<p>When you're only looking at the data 1000 times, std::vector is really slow as we knew from the first test.  It spends too long in the constructor.  So long that I stopped running it after a few values...</p>

<p>The submitted code is fast but the operator[] has too much going on.  Yes, it is O(1), but a big constant.  It may be surprising that map::operator[] is still faster despite being log(n).  I think (unverified) this may be because for a really big array, the InitializedArray::operator[] will have cache misses.  The map, on the other hand, is really small.  It only has the 1000 elements in it.</p>

<p><a href="https://i.stack.imgur.com/PckLL.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/PckLL.png" alt="enter image description here"></a></p>

<p>When doing 100000 elements on a big array, InitializedArray::operator[] is almost slow enough to offset the vector.  I didn't test this, but it looks like with only a few more accesses or a few more array elements the std::vector will be faster again.  This should give you a sense of what range of values InitializedArray is worth using.</p>

<hr>

<p>There's a line in the linked blog post:</p>

<blockquote>
  <p>In principle, we could make read accesses a bit more efficient, by skipping the complex initialization and just returning init_val. In this C++ implementation this isn't possible, however, because when you overload operator [], you can't discriminate between read and write accesses to the element.</p>
</blockquote>

<p>I believe this is true, but you could abandon operator[] and have separate functions for lvalues and rvalues.  However, I'm not sure how that would help rewrite operator[] (perhaps move constructor code to after the first write?).</p>

<hr>

<p>If you would like to see the test scripts/map version, let me know in the comments.</p>
    </div>