<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks good. All necessary type signatures are there, no type is too strict nor too generic. The indentation style is familiar, and the braces on <code>data Gaussian</code> are easy to read, so no worries about that.</p>

<p>However, there are a few oddities. Let's face them.</p>

<h1><code>Num</code>'s <code>signum</code></h1>

<p>There aren't any laws for <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#t:Num" rel="nofollow noreferrer"><code>Num</code></a> in the Haskell report, however there are some expectations. The operations on <code>(+)</code> and <code>(*)</code> should implement a <a href="https://en.wikipedia.org/wiki/Ring_(mathematics)" rel="nofollow noreferrer">ring</a> and that's certainly true here. However, <code>Num</code>'s documentation indicates that the following should hold:</p>

<pre><code>abs x * signum x = x -- (1)
</code></pre>

<p>Unfortunately, we cannot take the easy way and just use</p>

<pre><code>signum x = x / abs x
</code></pre>

<p>since the result is unlikely to be in <code>Gaussian</code>'s domain. As we cannot hold (1), we're free to do whatever we want, but it should be reasonable. How does it become reasonable? By <em>documenting your decision</em>:</p>

<pre><code>signum = id -- &lt; your documentation here &gt;
</code></pre>

<h1>Prefix vs. postfix documentation</h1>

<p>That took me by surprise. Most of Haskell's documentation is placed <em>before</em> the documented item, not after. The same holds for most other documentation in other languages, where the documentation is placed before or in the function itself:</p>

<pre class="lang-c prettyprint-override"><code>/** @brief Calculates the absolute value of a Gaussian integer.
 *  @param x is a Gaussian integer
 *  @returns x's absolute value
*/
int g_abs(gint x) {
    return x.r * x.r + x.i * x.i;
}
</code></pre>

<pre class="lang-py prettyprint-override"><code>def g_abs(x):
    """Returns the absolute value of x"""
    return x.r * x.r + x.i * x.i
</code></pre>

<p>The usual <a href="https://haskell-haddock.readthedocs.io/en/latest/markup.html" rel="nofollow noreferrer">Haddock documentation</a> also placed the documentation before the item, although it's possible to use postfix.</p>

<p>You're welcome to stay in the postfix style, but you should indicate that your documentation refers to the preceding item, for example with Haddock's <code>^</code>:</p>

<pre><code>i :: Gaussian
i = 0 :+ 1
--^ The imaginary unit, equal to sqrt(-1).
</code></pre>

<p>That removes possible ambiguity.</p>

<h1><code>two = 2 :: Integer</code> and <code>x ^ two</code></h1>

<p>The line <code>two = 2 :: Integer</code> violates the DRY principle, thus any optimization or bugfix on <code>x ^ two</code> needs to get repeated throughout the program, which is error prone.</p>

<p>However, there is a greater issue. GHC rewrites <code>x ^ 2</code> to <code>x * x</code> (see <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.Real.html#%5E" rel="nofollow noreferrer">Note [Inlining (^)</a> in <code>base</code>'s documention). An explicit variable <em>might</em> hinder that process.</p>

<p>Instead, you should provide a <code>square</code> function or just immediately multiply a value with itself. Both variants will get rid of the warnings and additional bindings, for example:</p>

<pre><code>--| The Num instance for Gaussian.
--  We use the euclidean norm as abs. norm(a + bi) = a^2 + b^2
instance Num Gaussian
  where
    ...
    abs (a :+ b) = (a * a + b * b) :+ 0
    signum = id -- chosen at random
    ...
</code></pre>

<p>By the way: if you chose <code>square x = x ^ (2 :: Int)</code> you won't need to repeat your documentation.</p>

<h1>Precision</h1>

<p>You always want to stay as precise as possible, unless you are aiming for speed. Therefore, you should try to stay in exact types till the very last moment in <code>magnitude</code>.</p>

<p>Instead of</p>

<pre><code>magnitude :: Floating c =&gt; Gaussian -&gt; c
magnitude (a :+ b) = sqrt $ (square $ fromInteger a) + (square $ fromInteger b)
</code></pre>

<p>use</p>

<pre><code>magnitude :: Floating c =&gt; Gaussian -&gt; c
magnitude (a :+ b) = sqrt $ fromInteger (square a + square b)
</code></pre>

<p>You could also reuse <code>abs</code> if you split it into two functions:</p>

<pre><code>instance Num Gaussian where
    ...
    abs x = (absIntegral x :+ 0)
    ...

absIntegral :: Gausian -&gt; Integer
absIntegral (a :+ b) = square a + square b

magnitude :: Floating c =&gt; Gaussian -&gt; c
magnitude = sqrt . fromInteger . absIntegral
</code></pre>
    </div>