<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is some general recommendation for your code.</p>

<p><strong>1) When using collections, I suggest that you use the interface instead of the implementation in the left part. It will be easier when refactoring and if you want to change the implementation.</strong></p>

<p><em>Before</em></p>

<pre class="lang-java prettyprint-override"><code>private static final HashMap&lt;EntityType, IndexedData&gt; dataTables = new HashMap&lt;EntityType, IndexedData&gt;();

</code></pre>

<p><em>After</em></p>

<pre class="lang-java prettyprint-override"><code>private static final Map&lt;EntityType, IndexedData&gt; dataTables = new HashMap&lt;EntityType, IndexedData&gt;();

</code></pre>

<p><strong>2) Instead of using the <code>java.util.HashMap</code> implementation with <code>Enum</code> as a key, I suggest that you use the <code>java.util.EnumMap</code> implementation instead.</strong></p>

<p><strong><a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/EnumMap.html" rel="nofollow noreferrer">Javadoc</a></strong></p>

<blockquote>
  <p>Implementation note: All basic operations execute in constant time. They are likely (though not guaranteed) to be faster than their HashMap counterparts. </p>
</blockquote>

<p><em>Example</em></p>

<pre class="lang-java prettyprint-override"><code>    private static final Map&lt;EntityType, IndexedData&gt; dataTables = new EnumMap&lt;&gt;(EntityType.class);
</code></pre>

<p><strong>3) The constant should be all uppercase with words separated by underscores ("_"); it's a naming convention, not required, but highly recommended.</strong></p>

<p><em>Before</em></p>

<pre class="lang-java prettyprint-override"><code>    private static final HashMap&lt;EntityType, IndexedData&gt; dataTables = new HashMap&lt;EntityType, IndexedData&gt;();

</code></pre>

<p><em>After</em></p>

<pre class="lang-java prettyprint-override"><code>    private static final HashMap&lt;EntityType, IndexedData&gt; DATA_TABLES = new HashMap&lt;EntityType, IndexedData&gt;();

</code></pre>

<p><strong>4) When comparing <code>Enum</code> with else-if, I suggest that you use a Switch-case instead; since the switch case can be faster than the if-else in some cases</strong></p>

<ul>
<li><a href="https://stackoverflow.com/questions/6705955/why-switch-is-faster-than-if">https://stackoverflow.com/questions/6705955/why-switch-is-faster-than-if</a></li>
<li><a href="https://stackoverflow.com/questions/10287700/difference-between-jvms-lookupswitch-and-tableswitch">https://stackoverflow.com/questions/10287700/difference-between-jvms-lookupswitch-and-tableswitch</a></li>
</ul>

<p>Also, in my opinion, it makes the code more readable and easier to refactor.</p>

<p><em>Before</em></p>

<pre class="lang-java prettyprint-override"><code>
    public static boolean hasDisplayName(EntityType entityType)
    {
        return !(entityType == NOTIFICATION
                || entityType == SERVICE
                || entityType == TICKET
                || entityType == DEVICE);
    }

</code></pre>

<p><em>After</em></p>

<pre class="lang-java prettyprint-override"><code>    public static boolean hasDisplayName(EntityType entityType)
    {
        switch (entityType)
        {
            case NOTIFICATION:
            case SERVICE:
            case TICKET:
            case DEVICE:
                return false;

            default:
                return true;
        }
    }

</code></pre>
    </div>