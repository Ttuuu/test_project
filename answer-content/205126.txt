<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Do not name things with data type prefixes</strong></p>

<p><code>clsAutoFactory</code>.  No.  Instead: <code>AutoFactory</code></p>

<p>Names should be what they are in the problem domain - autos in this case. How a thing is implemented - is it an array? a class? an integer? etc. is not what's important, we can read code and the IDE is real smart. Writing code that is descriptive is the thing.</p>

<hr>

<p><strong>Unnecessary interfaces</strong></p>

<p>There is no reason for any interfaces at this point. Just inherit from <code>Auto</code> class. Half the code goes away! Perhaps make it an abstract class and override methods as needed. I bet there is common code and/or default behavior. </p>

<p>In general <code>interface</code>s are for giving unrelated classes similar behavior. A <code>Parrot</code> might implement the <code>Idogable</code> so it can bark like a dog even though a <code>Parrot</code> is not a <code>Dog</code>. But a BMW is an Auto.</p>

<hr>

<blockquote>
  <p>I am implementing the factory method</p>
</blockquote>

<p>You wrote a factory class not a factory method. </p>

<p>A factory method would be a method in some other class that does the factory thing. The code simple enough at this point that you could create a factory method - say a method in the <code>Auto</code> class; but I am not saying you should.</p>

<p>There are 3 "levels" of factory design which facilitates increasing construction complexity. i.e. factory method, factory (a simple class), and abstract factory for very complex things. The abstract factory may be appropriate if you were creating multiple auto makes with multiple models with multiple individual options; and perhaps different kinds like SUV, sports car, truck.</p>

<hr>

<p>Ditto to <a href="https://codereview.stackexchange.com/a/205108/10221">what @JAD said</a></p>

<hr>

<p><strong><code>switch</code> default</strong></p>

<p>this is a perfect place for catching errors. If the <code>default</code> case is hit then obviously that model has not been implemented in your code. So capture that fact and let the user know.</p>

<hr>

<p>Be more specific with auto instance names. <code>model</code> is too generic.</p>

<p>Not this:</p>

<pre><code>IAuto model = factory.createModel(ModelType.Audi);
model.start();
model.stop();
</code></pre>

<p>but this:</p>

<pre><code>IAuto myAudi = factory.createModel(ModelType.Audi);
myAudi.start();
myAudi.stop();
</code></pre>
    </div>