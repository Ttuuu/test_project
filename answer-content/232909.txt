<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Include Order</h2>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;vector&gt;
#include &lt;array&gt;
#include &lt;set&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include "dhth.hpp"
</code></pre>

<p>I always put the most significant at the top and then work down to the least significant. The reason for this is that if I miss a required header file in the most significant include then I will spot it during compilation.</p>

<p>Here you put the most significant class last "dhth.hpp". This is the most important header to "dhth.cpp" so it should go first. At the moment if this header file requires something like <code>vector</code> (lets just imagine) to work correctly that fact is hidden from you because you have included this in the source file first. If you look at from another developer that is building "TheLandOfWump.cpp" and he #includes your header file "dhth.hpp" but finds it does not compile because you forgot to include <code>vector</code> he is going to be pissed that you have not included the required headers in your file (why does he need to include <code>vector</code> in his source file if he is not using it.</p>

<p>So load headers from most significant to least.</p>

<pre><code> #include "HeaderForThisSource.h"

 #include "OtherHeadersForThisProject.h"

 #include &lt;Headers For libraries you use&gt;

 #include &lt;Standard C++ Libraries&gt;

 #include &lt;C Libraries&gt;
</code></pre>

<p>Within each group some thinks it is worth sorting them (alphabetically). Personally I don't but I do group them with each block. For the C++ headers I will list all the stream stuff together all the iterator stuff together and all the algorithm stuff together.</p>

<p>Though I don't use alphabetical sorting I do trying and making the grouping logical.</p>

<hr>

<p>Not quite is bad as <code>using namespace std;</code> but close.</p>

<pre><code>using std::vector;
using std::array;
using std::set;
using std::map;
using std::string;
using std::cout;
using std::endl;
</code></pre>

<p>Is it really that hard to prefix standard types with <code>std::</code>?</p>

<hr>

<p>Two points:</p>

<pre><code>using grid_point = array&lt;int, 2&gt;;
</code></pre>

<p>Not sure an array is the best type?</p>

<pre><code>std::pair?  std::tuple? struct Point {int x,y};
</code></pre>

<hr>

<p>Random. You are doing it wrong.</p>

<pre><code>grid_point Get_A_Random_Grid_Point(int rows, int cols) {
    dhth::Rand rand;
    return grid_point{ rand(1, rows), rand(1, cols) };
}
</code></pre>

<p>The random number generator is not supposed to be created everytime you need a random number. You create it once then use it multiple times so you get a sequence of numbers that are random from the same generator.</p>

<p>In this context you can do this by marking it a static member of the function. But I am sure you want to use it other contexts so making it a global object or accessed from a static function on Rand may be a better choice.</p>

<pre><code>grid_point Get_A_Random_Grid_Point(int rows, int cols) {
    static dhth::Rand rand;
    return grid_point{ rand(1, rows), rand(1, cols) };
}
</code></pre>

<hr>

<p>Not sure that catching the exception here is a good thing.</p>

<pre><code>string citos(Cave_Item item) noexcept {  // citos - Cave_Item to std::string
    try {
        switch (item) {
        case Cave_Item::breeze: return string{ "breeze" };
        case Cave_Item::stench: return string{ "stench" };
        case Cave_Item::pit: return string{ "pit" };
        case Cave_Item::ladder: return string{ "ladder" };
        case Cave_Item::player: return string{ "player" };
        case Cave_Item::wumpus: return string{ "wumpus" };
        case Cave_Item::gold: return string{ "gold" };
        default:
            std::abort();
        }
        return string{ "error" };
    }
    catch (...)
    {
        try { 
            cout &lt;&lt; "Failed to make string\n"; 
            return string{ "error" };
        }
        catch (...) {
            std::abort();
        }
    }
}
</code></pre>

<p>Just let the exception propogate all the way out and close the application. If this function fails then something has gone terribly wrong with the application and trying to continue is a mistake.</p>

<p>In main you can catch all exceptions and report on them.</p>

<pre><code>int main()
{
     try {
         runGame();
     }
     // Catch print error message then re-throw the exception.
     // This way the external systems will know the application
     // failed abnormally.
     //
     // Also use std::cerr for error messages.
     catch(std::exception const&amp; e) {
         std::cerr &lt;&lt; "Exception: " &lt;&lt; e.what() &lt;&lt; "\n";
         throw;
     }
     catch(...) {
         std::cerr &lt;&lt; "Exception: Unknown\n";
         throw;
     }
}  
</code></pre>

<hr>

<p>You should only mark a function <code>noexcept</code> if it cant throw an exception.</p>

<pre><code>Cave::Cave() noexcept
</code></pre>

<p>Again I don't like your use of <code>std::abort()</code> here. Simply allow the exception to propogate up to main and force the application to exit. That way you make sure all the resources are correctly released via the destructors.</p>

<pre><code>{
    try {
        init();
    }
    catch (...) {
        try {
            cout &lt;&lt; "Failed to initialize\n";
        }
        catch (...) {
            std::abort();
        }
    }
}
</code></pre>

<p>So 1: remove <code>noexcept</code> 2: Remove the try/catch 3: Catch the exception in main.</p>

<hr>

<p>Always put braces around sub statements:   </p>

<pre><code>    if (cave_item == Cave_Item::wumpus) Fill_Adjacent(loc, Cave_Item::stench);
</code></pre>

<p>It looks innocuous enough. But there are situations where this will fail. So it is good habit to always put braces around the statements of an <code>if</code>, even if there looks to only be one.</p>

<pre><code>    if (cave_item == Cave_Item::wumpus) {
        Fill_Adjacent(loc, Cave_Item::stench);
    }
</code></pre>

<p>This protects you from some enthusiastic amateur breaking the code by changing <code>Fill_Adjacent()</code> from a method to inline macro. I have seen that happen.</p>

<p>Also using two lines is always nice for when you are debugging. Its hard to tell with the interactive debugger has decided to activate the if statement if it is all on one line. If it is on two lines simply stepping through this immediately shows that the if was activated.</p>

<hr>

<p>Not sure it is worth using the <code>at()</code> method.</p>

<pre><code>    cout &lt;&lt; "This part of the cave (" &lt;&lt; loc.at(0) &lt;&lt; ", " &lt;&lt; loc.at(1) &lt;&lt;
        ") contains:\n";
</code></pre>

<p>We know a location is 2 places. So 0 and 1 are always valid. So why are we forcing a check to see if they are valid? I would use <code>loc[0]</code> and <code>loc[1]</code> unverified check because I know the array always has two elements (actually I would probably use a Point class so there is no need to worry and x and y cords have named members that are checked by the compiler at compile time).</p>

<hr>

<p>Again I would always use braces around the sub expression.</p>

<pre><code>    for (auto item : cave[loc]) cout &lt;&lt; "    " &lt;&lt; citos(item) &lt;&lt; "\n";
</code></pre>

<p>And put it on two lines so it is easy to read:</p>

<pre><code>    for (auto item : cave[loc]) {
        cout &lt;&lt; "    " &lt;&lt; citos(item) &lt;&lt; "\n";
    }
</code></pre>
    </div>