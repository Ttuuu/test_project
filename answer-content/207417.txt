<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would suggest keeping the async API intact and also inject the table as it is the actual dependency, not the context. (Explicit Dependency Principle)</p>

<p>As this is meant to be used by derived classes, its members should be <code>virtual</code> to allow derived classes to <code>override</code> the default beahvior if needed</p>

<pre><code>public abstract class BaseRepository&lt;TEntity&gt; : IBaseRepository&lt;TEntity&gt; 
    where TEntity : TableEntity, new() {
    private readonly CloudTable table;

    protected BaseRepository(CloudTable table) {
        this.table = table;
        this.table.CreateIfNotExists(); //using synchronous API
    }

    public CloudTable Table {
        get {
            return this.table;
        }
    }

    public virtual Task AddEntity(TEntity entity) {
        TableOperation insertOperation = TableOperation.Insert(entity);
        return table.ExecuteAsync(insertOperation);
    }

    public virtual Task AddRange(IEnumerable&lt;TEntity&gt; entities) {
        /// Define a batch operation.
        TableBatchOperation batchOperation = new TableBatchOperation();
        foreach (var entity in entities) {
            batchOperation.Insert(entity);
        }
        return table.ExecuteBatchAsync(batchOperation);
    }

    public virtual Task&lt;TEntity&gt; Delete(TEntity entity) {
        TableOperation insertOperation = TableOperation.Delete(entity);
        return table.ExecuteAsync(insertOperation);
    }

    public virtual Task Edit(TEntity entity) {
        TableOperation insertOperation = TableOperation.InsertOrMerge(entity);
        return table.ExecuteAsync(insertOperation);
    }

    public virtual Task&lt;IEnumerable&lt;TEntity&gt;&gt; FindBy(Expression&lt;Func&lt;TEntity, bool&gt;&gt; predicate) {
        throw new NotImplementedException();
    }

    public virtual async Task&lt;IEnumerable&lt;TEntity&gt;&gt; GetAll() {
        TableQuery&lt;TEntity&gt; tableQuery = new TableQuery&lt;TEntity&gt;();
        List&lt;TEntity&gt; list = new List&lt;TEntity&gt;();
        // Initialize the continuation token to null to start from the beginning of the table.
        TableContinuationToken continuationToken = null;

        do {
            // Retrieve a segment (up to 1,000 entities).
            TableQuerySegment&lt;TEntity&gt; tableQueryResult =
                await table.ExecuteQuerySegmentedAsync(tableQuery, continuationToken);

            // Assign the new continuation token to tell the service where to
            // continue on the next iteration (or null if it has reached the end).
            continuationToken = tableQueryResult.ContinuationToken;
            list.AddRange(tableQueryResult.Results);
            // Loop until a null continuation token is received, indicating the end of the table.
        } while (continuationToken != null);
        return list;
    }
}
</code></pre>

<p>The table reference would be the responsibilty of the derived class</p>

<pre><code>public class AccountRepository : BaseRepository&lt;Account&gt;, IAccountRepository {
    public AccountRepository(AnimalHubContext context)
        : base(context.TableClient.GetTableReference(typeof(Account).Name))
    {
    }

    //...code removed for brevity
}
</code></pre>

<p>The asynchronous API should be maintained through out the class, other wise if a synchronous API exists, that should be used if not taking advantage of the async API</p>

<p>For example</p>

<pre><code>public virtual void AddEntity(TEntity entity) {
    TableOperation insertOperation = TableOperation.Insert(entity);
    table.Execute(insertOperation);
}
</code></pre>
    </div>