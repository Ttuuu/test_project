<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going through your code from top to bottom.</p>

<h2>Entity</h2>

<ul>
<li><p>In your current code, an entity does not change after it has been constructed. Therefore all its fields should be marked as <code>final</code>, for example:</p>

<pre><code>private final String name;
</code></pre></li>
<li><p>Making the fields <code>final</code> will produce a compile error in one of the constructors. 
Currently, the constructor with more arguments calls the constructor with fewer arguments. It should be the other way round: the simple constructors should call the more complete ones:</p>

<pre><code>public Entity(String name, char symbol, boolean walkable) {
    this(name, symbol, walkable, false);
}

public Entity(String name, char symbol, boolean walkable, boolean multifarious) {
    this.name = name;
    this.symbol = symbol;
    this.walkable = walkable;
    this.multifarious = false;
}
</code></pre></li>
<li><p>The field name <code>walkable</code> sounds strange. I first thought you meant <code>canWalk</code>, but that guess was wrong. To avoid this confusion, you should add a short comment:</p>

<pre><code>// If true, other entities can walk on this entity.
</code></pre></li>
<li><p>In the <code>toString</code> method, it might look more natural to say:</p>

<pre><code>public String toString() {
    String walkableStr = walkable ? "walkable" : "not walkable";
    return name + ", " + symbol + ", " + walkableStr;
}
</code></pre></li>
</ul>

<h2>Field</h2>

<p>My first thought was: what the hell is a <code>List&lt;List&lt;List&lt;Entity&gt;&gt;&gt;</code>, and is it really intended? Then I saw that it is indeed needed. It just looks really complicated and overdesigned at first.</p>

<p>To avoid this first impression, it helps when you add a comment to this variable:</p>

<pre><code>// positions[x][y] lists the entities at that cell.
</code></pre>

<p>This comment has the added benefit of clearly saying whether <code>x</code> or <code>y</code> comes first. While the order <code>x, y</code> is most common, there's enough code out there that uses <code>y, x</code> or <code>row, col</code>. Therefore readers of your code cannot be sure until they see the actual code.</p>

<p>Typo: <code>allready</code> should be <code>already</code>.</p>

<p>If you have lots of entities, <code>List.contains</code> will become slow because it searches the complete list from the beginning until the end. Instead you should use a <code>HashSet&lt;Entity&gt;</code> instead of the <code>List&lt;Entity&gt;</code> since <code>Set.contains</code> is faster.</p>

<p>No part of your program should write directly to <code>System.out</code> or <code>System.err</code>. If your game becomes successful one day, you probably want to port it to Android, iOS, Windows, Linux, other platforms. Not all of them have <code>System.out</code>, and they differ in how they accept input from the user. Therefore it's a good idea to define a <code>UserInterface</code> for everything related to user interaction:</p>

<pre><code>interface UserInterface {

    void inform(String message);

    /* The user tried to make a mistake, such as placing an entity 
     * on a cell where there already is another entity. */
    void error(String message);

    String ask(String prompt);

    /* An internal programming error has happened. This is not the user's fault. */
    void programmingError(String message);
}
</code></pre>

<p>This can be used for talking to the user. The last method in that interface is when you as the programmer made a mistake, such as passing negative coordinates. You may still want to inform the user, but the user cannot do anything about the error anyway. An entirely different case is when the user tries to place an entity on an invalid location. Currently you handle these types of errors in the same way, but you shouldn't.</p>

<p>The <code>removeEntity</code> method is unused.</p>

<p>In <code>removeEntity</code> you forgot to remove the entity from <code>placedEntities</code>. Watch out when removing a multifarious entity that is on the field in several locations. It's probably better to use a <code>Multiset</code> (from Google Guava) or a <code>Map&lt;Entity, Integer&gt;</code> to count how often each entity is on the field.</p>

<p>To make adding or removing entities faster, you should store them in a different way, in order to avoid the 2-dimensional <code>for</code> loop in <code>removeEntity</code>. It's better to remember for each entity at which positions it is. Again, Google Guava is a great library that contains a <code>Table</code> class and a <code>Multimap</code> for exactly this purpose.</p>

<p>While I'm here, by using Guava's Multimap you could also replace your <code>List&lt;List&lt;List&lt;Entity&gt;&gt;&gt;</code> with a <code>Multimap&lt;Location, Entity&gt;</code>, which explains more directly what the field really contains.</p>

<p>In <code>Field.toString</code> you mention:</p>

<pre><code>// only the last entity of a list is drawed on the field
</code></pre>

<p>This comment is deeply hidden. It should be placed right at the <code>positions</code> field. The whole positions field might then be:</p>

<pre><code>/**
 * Stores the entities that are currently at the given location on the field.
 * Entities that are added later are placed "on top" of the previous entities.
 * All but the topmost entity must be walkable.
 */
private final ListMultimap&lt;Location, Entity&gt; entities = ArrayListMultimap.create();
</code></pre>

<h2>Main</h2>

<p>The main class is short and to the point. Very nice.</p>

<p>In addition to the main class, it would be good to have some unit tests for the <code>Entity</code> and <code>Field</code> classes. It's easy to automatically test for invalid placements:</p>

<pre><code>@Test
public void entity_cannot_be_placed_twice() {
    Field field = new Field(5, 5, true, ' ');
    Entity player = new Entity("Player", '#', false);
    field.addEntity(player, 2, 2);

    try {
        field.addEntity(player, 2, 2);
        fail();
    } catch (IllegalArgumentException e) {
        assertEquals("the entity is already on the board", e.getMessage());
    }

    try {
        field.addEntity(player, 0, 1);
        fail();
    } catch (IllegalArgumentException e) {
        assertEquals("the entity is already on the board", e.getMessage());
    }
}
</code></pre>

<p>As soon as you have these automatic tests and run them regularly, you don't have to worry about accidentally breaking code that used to work before.</p>
    </div>