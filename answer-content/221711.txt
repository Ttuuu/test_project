<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You tagged <a href="/questions/tagged/c%2b%2b11" class="post-tag" title="show questions tagged 'c++11'" rel="tag">c++11</a>, but your code does not look like C++11. You do not implement move construction and move assignment. You should implement them. Here's a sample implementation using the <a href="https://stackoverflow.com/q/3279543">copy-and-swap idiom</a>.</p>

<pre><code>friend void swap(Vector&amp; a, Vector&amp; b)
{
    using std::swap;
    swap(a.capacity, b.capacity);
    swap(a.sizet, b.sizet);
    swap(a.arr, b.arr);
}

Vector(Vector&amp;&amp; v)
    :Vector{}
{
    swap(*this, v);
}

Vector&amp; operator=(Vector v)
{
    swap(*this, v);
    return *this;
}
</code></pre>

<p>This way, you don't have to define a separate copy assignment operator.</p></li>
<li><p>Your default constructor sets <code>arr</code> to <code>new int</code>. This makes no sense and cannot be handled by the destructor. You should set <code>arr</code> to <code>nullptr</code>.</p></li>
<li><p>Use <code>++i</code>, not <code>i++</code>, in discarded-result expressions. See <a href="https://stackoverflow.com/a/484492">Difference between <code>i++</code> and <code>++i</code> in a loop?</a>.</p></li>
<li><p>Consider using standard algorithms instead of hand-crafted loops when plausible. For example:</p>

<pre><code>for (int i = 0; i &lt; sizet; i++)
    arr[i] = v.arr[i];
}
</code></pre>

<p>Can be replaced by</p>

<pre><code>std::copy_n(v.arr, sizet, arr);
</code></pre>

<p>You will need to <code>#include &lt;algorithm&gt;</code> for this to work.</p></li>
<li><p>Your copy constructor uses assignment instead of member initializer clauses. You should use member initializer clauses uniformly. Now your copy constructor should look like this:</p>

<pre><code>Vector(const Vector&amp; v)
    :capacity{v.capacity},
     sizet{v.sizet},
     arr{new int[v.sizet]} // to avoid dependence on member declaration order
{
    std::copy(v.arr, v.arr + sizet, arr);
}
</code></pre></li>
<li><p>Where is the <code>const</code> overload for <code>operator[]</code>, <code>at</code>, <code>front</code>, and <code>back</code>?</p></li>
<li><p>Your <code>push_back</code> is incorrect. It does not allocate any memory. You will get an out-of-range error when <code>capacity</code> exceeds the actual capacity. Same applies to <code>resize</code>.</p></li>
<li><p><code>size()</code> should be <code>const</code>.</p></li>
<li><p>Your <code>at</code> does the same job as <code>operator[]</code>. <code>at</code> should check for out-of-range errors and raise an exception if <code>index &gt;= sizet</code>.</p></li>
<li><p><code>front</code> and <code>back</code> should return a reference instead of a value.</p></li>
<li><p>The implementation of <code>back</code> is wrong. It should return <code>arr[sizet - 1]</code>.</p></li>
</ol>
    </div>