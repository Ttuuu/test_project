<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, there is no need for this to be a class at all. Your class has only two static methods, so they might as well be stand-alone functions. In this regard Python is different from e.g. Java, where everything is supposed to be a class.</p>

<hr>

<p>Your <code>get_factors</code> function can be sped-up significantly by recognizing that if <code>k</code> is a factor of <code>n</code>, then so is <code>l = n / k</code>. This also means you can stop looking for factors once you reach <span class="math-container">\$\sqrt{n}\$</span>, because if it is a square number, this will be the largest factor not yet checked (and otherwise it is an upper bound). I also used a <code>set</code> instead of a <code>list</code> here so adding a factor multiple times does not matter (only relevant for square numbers, again).</p>

<pre><code>from math import sqrt

def get_factors(n):
    '''
    Takes a number and returns a list of factors
    :param number: The number for which to find the factors
    :return: a list of factors for the given number
    '''
    factors = set()
    for i in range(1, int(sqrt(n)) + 1):
        if n % i == 0:
            factors.add(i)
            factors.add(n // i)
    return list(sorted(factors))  # sorted might be unnecessary
</code></pre>

<p>As said, this is significantly faster than your implementation, although this only starts to be relevant for about <span class="math-container">\$n &gt; 10\$</span>.</p>

<p><a href="https://i.stack.imgur.com/yy9A1.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/yy9A1.png" alt="enter image description here"></a></p>

<p>(Note the log scale on both axis.)</p>

<hr>

<p>As for your main function:</p>

<p>First figure out how many rows and columns you will have. For this I would choose the factor that is closest to <span class="math-container">\$\sqrt{n}\$</span>:</p>

<pre><code>k = min(factors, key=lambda x: abs(sqrt(n) - x))
rows, cols = sorted([k, n //k])   # have more columns than rows
</code></pre>

<p>Then you can use <code>numpy.arange</code> to get the x- and y-coordinates of the grid:</p>

<pre><code>x = np.arange(0, quad_width + 1, quad_width / cols)
y = np.arange(0, quad_height + 1, quad_height / rows)
</code></pre>

<p>From this you now just have to construct the cells:</p>

<pre><code>def get_cells(x, y):
    for x1, x2 in zip(x, x[1:]):
        for y1, y2 in zip(y, y[1:]):
            yield [x1, x2, x2, x1, x1], [y1, y1, y2, y2, y1]
</code></pre>

<p>Putting all of this together:</p>

<pre><code>import numpy as np

def get_partitions(n, width, height):
    factors = get_factors(n)
    k = min(factors, key=lambda x: abs(sqrt(n) - x))
    rows, cols = sorted([k, n //k])   # have more columns than rows

    x = np.arange(0, width + 1, width / cols)
    y = np.arange(0, height + 1, height / rows)

    yield from get_cells(x, y)

if __name__ == "__main__":
    for cell in get_partitions(56, 1980, 1080):
        plt.plot(*cell, marker='o')
    plt.show()
</code></pre>

<p><a href="https://i.stack.imgur.com/xmGj4.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/xmGj4.png" alt="enter image description here"></a></p>
    </div>