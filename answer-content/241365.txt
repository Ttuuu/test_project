<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The choice of data structure is fundamentally sound (but more on that later).</p>

<p>The first thing that jumped out to me in your code is actually not directly related to performance: you could drastically improve readability by declaring variables where you use them rather than at the beginning, and by assigning better names. Don’t be afraid that declaring variables inside a loop will lead to performance degradation! First off, in most cases <em>it doesn’t</em>. And secondly, where it does the difference in performance is usually negligible, and <em>will not contribute sufficiently to be noticed</em>. If, <em>and only if</em>, that’s not the case does it make sense to change this.</p>

<p>Some more points regarding readability:</p>

<ol>
<li>Since you’re already using uniform initialisation, use <code>{…}</code> instead of <code>(…)</code> in your initialisation of <code>result</code>. Writing <code>({…})</code> is pretty unusual and consequently tripped me up.</li>
<li>Since C++11 there’s no need to put a space between template argument list terminators (<code>&gt; &gt;</code> vs. <code>&gt;&gt;</code>).</li>
<li>Don’t use integer literals in place of boolean values: don’t write <code>while (1)</code>, write <code>while (true)</code>.</li>
<li>Your (C-style) casts to <code>float</code> are unnecessary. Remove them.</li>
<li>Make more variables <code>const</code> — in particular <code>result</code>! You don’t want to accidentally modify that. You will also need to change your lookup to using <code>find</code> then, unfortunately.</li>
</ol>

<p>Now on to performance improvements. There are effectively two things to improve.</p>

<p>First off, two things about <code>unordered_map</code>:</p>

<ol>
<li>Although the choice of this structure is algorithmically correct, C++’s standard library specification of it is <em>poor</em> due to a fault in the standard wording, which forbids efficient implementations. The structure is therefore a cache killer.</li>
<li>In your case a general string hash is overkill: you only need to check the first letter of each word to determine which move was played.</li>
</ol>

<p>You could exploit the second point by providing a custom <code>Hash</code> template argument to <code>std::unordered_map</code> which only returns the first character. But given the first point, I would suggest ditching <code>std::unordered_map</code> altogether and just using a 256×256 array as a lookup table (or, if you want to optimise space, subtract some common value from the first character or find a <a href="https://en.wikipedia.org/wiki/Perfect_hash_function" rel="nofollow noreferrer">perfect hash function</a> for the letters “r”, “p” &amp; “s”).<sup>1</sup></p>

<p>And now something more mundane, since the execution time of your program is at any rate completely dominated by IO: <code>std::cin</code> and <code>std::cout</code> are by default synchronised with C’s buffered standard IO, which makes them excruciatingly slow. To fix this, put <a href="https://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio" rel="nofollow noreferrer"><code>std::ios_base::sync_with_stdio(false)</code></a> a the beginning of your <code>main</code> function. Similarly, untie standard output from standard input via <a href="https://en.cppreference.com/w/cpp/io/basic_ios/tie" rel="nofollow noreferrer"><code>std::cin.tie(nullptr)</code></a>. Secondly, replace <code>std::endl</code> with <code>"\n"</code>. <code>std::endl</code> flushes the stream each time, which is slow. It’s also unnecessary to set the stream format manipulators in every loop (although I don’t expect this to change the performance).</p>

<p>— It’s worth noting that none of that had a measurable impact on the performance of the code on my machine. In fact, <em>formatted input via <code>std::cin</code></em> totally dominates the runtime. This is surprising and disappointing (because there’s no reason for it: it hints at a broken standard library implementation). Using <code>scanf</code> is significantly faster, which should not happen. Of course using <code>scanf</code> also requires changing the type of <code>m1</code> and <code>m2</code> (you can use a static buffer of size <code>sizeof "scissors"</code>). It’s worth emphasising that it’s really IO that’s slow, and not the <code>std::string</code>s: simply replacing the <code>std::strings</code> with static buffers has almost no perceptible impact on runtime (likely due to <a href="https://stackoverflow.com/a/21710033/1968">SSO</a>). It’s really <code>std::cin</code> vs <code>scanf</code>.</p>

<hr>

<p><sup>1</sup> We’re in luck, and the character codes of “r”, “p” and “s” in common encodings differ in the lower two bits, so that we only need a 4×4 lookup and minimal recoding:</p>

<pre><code>static int const result[4][4] = {
//    p      r   s
    { 0, 0,  1, -1},     // paper
    { 0, 0,  0,  0},
    {-1, 0,  0,  1},     // rock
    { 1, 0, -1,  0}      // scissors
};

…

int const winner = result[move1[0] &amp; 3][move2[0] &amp; 3];
</code></pre>

<p>But of course given what I said about the IO bottleneck that’s completely unnecessary obfuscation.</p>
    </div>