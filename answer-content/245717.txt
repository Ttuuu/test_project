<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-java prettyprint-override"><code>public static void findSum(int[] a, int sum, int i, int j) {
</code></pre>
<p><code>a</code> is not a good name, neither is <code>i</code> and <code>j</code>.</p>
<p>Neither is <code>findSum</code>, as I would expect it to find and return an <code>int</code>. <code>printSum</code> would be a better choice.</p>
<hr>
<p>You don't need a <code>return</code> at the end of the function.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>if(i == a.length)
    return;
if(j==a.length)
    return;
</code></pre>
<hr>
<p>This is not very fault tolerant, you should check whether the given values exceed the length of the arrays. That way you will also catch faulty input.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>sum = (a[i] + a[j] &gt; sum) ? (a[i] + a[j]) : sum;
</code></pre>
<p>I'm not a fan of ternary operator constructs, and with these variable names the code ends up extremely hard to read.</p>
<hr>
<p>There are a few possible solutions to this, another is to use two nested loops.</p>
<pre class="lang-java prettyprint-override"><code>int sum = -1;

for (int firstIndex = 0; firstIndex &lt; numbers.length; firstIndex++) {
    int firstValue = numbers[firstIndex];
    
    for (int secondIndex = 0; secondIndex &lt; numbers.length; secondIndex++) {
        if (firstIndex != secondIndex) {
            int secondValue = numbers[secondIndex];
            int newSum = firstValue + secondValue;
            
            if (newSum &gt; sum) {
                sum = newSum;
            }
        }
    }
}
</code></pre>
<p>The number of iterations over the array is n^n, though, we are iterating over the array once of every of its items. Looking for the two biggest values in a single run (without any recursion) and returning the sum of these is for sure the most efficient one.</p>
    </div>