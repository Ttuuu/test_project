<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Your code is too low-level. <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#p3-express-intent" rel="nofollow noreferrer">It expresses implementation details instead of intent.</a> That's why your code looks like "C with <code>cout</code>s instead of <code>printf</code> and <code>new</code>/<code>delete</code> instead of <code>malloc</code>/<code>free</code>" instead of C++.</p></li>
<li><p><a href="https://codereview.stackexchange.com/users/6499/roland-illig"><strong>Roland Illig</strong></a> has already told you that you should use <code>std::swap</code> instead of building a new one from scratch. <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#p13-use-support-libraries-as-appropriate" rel="nofollow noreferrer">You should use existing libraries, especially the standard library, whenever possible.</a></p>

<p>That said, your own implementation of <code>swap</code> is also questionable. This is C++, not C. We have <em>references</em>. Using <em>pointers</em> makes the code less readable, and puts burden on the user of the function. So you should change it to:</p>

<pre>
void swap(int&amp; x, int&amp; y)
{
    int temp = x;
    x = y;
    y = temp;
}
</pre>

<p>And the calls to it can be changed from <code>swap(&amp;foo, &amp;bar)</code> to <code>swap(foo, bar)</code>. Still, <code>std::swap</code> is preferable.</p></li>
<li><p>Again, <a href="https://codereview.stackexchange.com/users/6499/roland-illig"><strong>Roland Illig</strong></a> has already told you that you should use the <code>std::sort</code> instead of building a new bubble sort from scratch. <code>std::sort</code> typically uses <a href="https://en.wikipedia.org/wiki/Quicksort" rel="nofollow noreferrer">quicksort</a>, which has <span class="math-container">\$O(n \log n)\$</span> time complexity; whereas bubble sort has <span class="math-container">\$O(n^2)\$</span> time complexity. It should be obvious that <code>std::sort</code> is much more efficient.</p></li>
<li><p>Your parameter lists are <em>so</em> C-ish. (pointer, size) parameter pairs are everywhere. <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f24-use-a-spant-or-a-span_pt-to-designate-a-half-open-sequence" rel="nofollow noreferrer">They are error-prone.</a> Consider using spans. (Spans are currently not available in the standard library; consider using the one from <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#gsl-guidelines-support-library" rel="nofollow noreferrer">GSL</a>)</p>

<p>You even have parameter lists like <code>(int*&amp; Array, const int&amp; nSizeOld, const int&amp; nSize)</code>. Don't pass by const reference for builtin types. Just pass by value, as in <code>int nSizeOld</code>, <code>int nSize</code>. And letting a pointer denote an array with sizes littered everywhere holds a great welcome party for errors. </p></li>
<li><p>Don't use <code>_tmain</code> and <code>_TCHAR</code>. They are not portable. (Strictly speaking, they are not proper C++.) <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#p2-write-in-iso-standard-c" rel="nofollow noreferrer">You should write in ISO standard C++.</a> Use <code>main</code> and <code>char</code> instead.</p>

<pre>
// Correct prototype of the main function
int main(int argc, char* argv[])
{
    // ...
}
</pre></li>
<li><p>Don't make such liberal use of "naked" <code>new</code>s and <code>delete</code>s. <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#r11-avoid-calling-new-and-delete-explicitly" rel="nofollow noreferrer">Explicit calls to <code>new</code>s and <code>delete</code>s are very error prone.</a> <code>std::vector</code>s should be preferred from the beginning.</p></li>
<li><p>You have four <code>for</code> loops in total. The first three use <code>i++</code>, whereas the last one uses <code>++i</code>. Please consistently use <code>++i</code>.</p></li>
</ol>

<p>As a conclusion: you should refactor your code to express intent.</p>
    </div>