<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a version using techniques I referenced in my comment on <a href="https://codereview.stackexchange.com/a/90198/6172">this answer</a>:</p>

<pre><code>public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Split&lt;T&gt;(this IEnumerable&lt;T&gt; fullBatch, int chunkSize)
{
    if (chunkSize &lt;= 0)
    {
        throw new ArgumentOutOfRangeException(
            "chunkSize",
            chunkSize,
            "Chunk size cannot be less than or equal to zero.");
    }

    if (fullBatch == null)
    {
        throw new ArgumentNullException("fullBatch", "Input to be split cannot be null.");
    }

    var cellCounter = 0;
    var chunk = new List&lt;T&gt;(chunkSize);

    foreach (var element in fullBatch)
    {
        if (cellCounter++ == chunkSize)
        {
            yield return chunk;
            chunk = new List&lt;T&gt;(chunkSize);
            cellCounter = 1;
        }

        chunk.Add(element);
    }

    yield return chunk;
}
</code></pre>

<p>Note I'm doing the following:</p>

<ol>
<li>Pre-allocating list size to be the chunk size (i.e. minimizes re-allocations while adding to the list)</li>
<li>Using the "state machine" of <code>yield return</code> so that the evaluation is lazy (can be effectively used in LINQ)</li>
<li>Extension method on <code>IEnumerable&lt;T&gt;</code> so that it plays nicely with LINQ</li>
<li>Use the proper overloads on the exception constructors as to provide all the pertinent information</li>
</ol>
    </div>