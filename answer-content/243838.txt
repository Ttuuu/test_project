<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions.</p>
<h2>Donâ€™t edit the parameter values, create your own instance / copy</h2>
<p>In my opinion, this is a bad habit, since some objects in Java are not immutable (Collections, Date, ect) when passed as parameters, you will edit the original instance of the caller. In your code, since the string is immutable, you are fine, but keep this in mind.</p>
<h3>HammingDistanceImpl#distance</h3>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>public int distance(String first, String second) {
   first = first.trim().toLowerCase();
   //[...]
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>public int distance(String first, String second) {
   String firstValue = first.trim().toLowerCase();
   //[...]
}
</code></pre>
<h2>Move the conversion of the string in the method <code>flipFyString</code></h2>
<p>Since this method seems to need the trimmed and lowered case version of it, I suggest that you do this in the method.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>public int distance(String first, String second) {
   first = first.trim().toLowerCase();
   first = flipFyString(first);
   //[...]
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>public int distance(String first, String second) {
   first = flipFyString(first);
   //[...]
}

private String flipFyString(String str) {
   String value = str.trim().toLowerCase();
   //[...]
}
</code></pre>
<h2>Use <code>java.lang.StringBuilder</code> instead of <code>java.lang.StringBuffer</code> (<code>flipFyString</code>)</h2>
<p>As stated in the <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/StringBuffer.html" rel="nofollow noreferrer">java documentation</a>, the <code>java.lang.StringBuilder</code> class is recommended over the <code>java.lang.StringBuffer</code> since it performs no synchronization and is generally faster.</p>
<h2>Extract the result of <code>.length()</code> in variables</h2>
<p>In your code, instead of calling multiples times the method, I suggest that you extract the result in a variable and reuse it.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>//[...]
if (first.length() - second.length() == 1 || first.length() - second.length() == 2
      || first.length() - second.length() == 3) {
   return calculatedDistance(second, first);
}
//[...]
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>//[...]
int firstLength = firstValue.length();
int secondLength = secondValue.length();

if (firstLength - secondLength == 1 || firstLength - secondLength == 2 || firstLength - secondLength == 3) {
   return calculatedDistance(secondValue, firstValue);
}
//[...]
</code></pre>
<h2>Instead of using a variable to store the value, return the result directly</h2>
<p>In your code, you can directly return the result, instead of storing it into a variable and then, returning it. This will make the code shorter and easier to read.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>//[...]
if (first.length() == second.length() / 2) {
   int result2 = calculatedDistance(first, second.substring(second.length() / 2, second.length()));
   return result2;
}
//[...]
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>//[...]
if (first.length() == second.length() / 2) {
   return calculatedDistance(first, second.substring(second.length() / 2, second.length()));
}
//[...]
</code></pre>
<h2>Review your logic, since you have duplicated condition 'first.length() == second.length() / 2'</h2>
<p>You have two <code>if</code> with the same condition, the second one is dead code at the moment.</p>
    </div>