<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with Glorfindel that the best result is achieved by thinking of the problem in a different way. Still, improvements can be made to the code that speed it up by about a factor of 3:</p>

<pre><code>toDigits :: Int -&gt; [Int]
toDigits 0 = []
toDigits x = let (d, m) = x `divMod` 10
             in d `seq` m : toDigits d

isSumofFifth n = n == sum (map (^5) (toDigits n))

main :: IO ()
main = do
  let result = sum (filter isSumofFifth [9..9999999])
  putStrLn $ "Result is: " ++ show result
</code></pre>

<p>First the <code>divMod</code> function is used to compute the quotient and modulus in a single step rather than separately, which saves time, as they are expensive operations.</p>

<p>More importantly, the <code>toDigits</code> function can be changed to generate the digits in reverse order, which is fine for this problem, and thereby avoid a series of concatenations. In this code, each digit is generated as needed, while in the original, the first digit can't be read until all of the others are generated and then concatenated together from a series of single-element lists. This causes a lot of copying.</p>

<p>Another small speed-up is achieved by the <code>seq</code> operator, which insures that d is fully calculated when m is returned, avoiding extra processing.</p>
    </div>