<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not sure I can give you a breakdown of your code as to why and how I would do things differently, but here are my two cents.</p>
<ul>
<li>The very first thing I would say is try to use const and let instead of var, it's the more modern syntax.</li>
<li>Also as @slepic mentioned it, shift is a very costly operation. It has to create a new array and therefore it's O(n), while push just adds one to the and and it's O(1) on some cases and O(n) on other log(n) cases.</li>
<li>The last thing is that whenever I see while loops, for loops, i++ and stuff like that with array operations, I get the feeling in the back of my head that there has to be a way to write this with array operations like map, filter, reduce etc. The reason why I say this is that a lot of work has gone into these array operations to be as performance optimal as possible, and you just can't compete with them with your own loops.</li>
</ul>
<p>So I came up with a solution to the problem, it's my first try, feel free to improve on it!</p>
<p>The thoughtprocess behind it is the following:
You have the number of chunks you want at the end, so first create an array that long and later map each element to a subarray of the original array.
Now the question is what is the rule to create the subarrays. From your post I see that every subarray has the same modulo with regards to the number of chunks needed.</p>
<pre><code>into_subarrays(myArray, chunks=2){
  // Create the array that is as long as the number of chunks needed, and starts with 1
  if(chunks === 1) return myArray;
  const result = Array.from(Array(chunks), (_, i) =&gt; i + 1);
  result.map(modulo =&gt; {
     // Map each element of the array to a subarray of the original array
     return myArray.filter(aElement =&gt; {
                      // The subarray can only contain the elements of the original array
                      // that have the same modulo 
                      // the reason I used a ternary operator here is that the last 
                      // element of the array would otherwise be empty. This part probably
                      // can be improved on.
                      return modulo === aElement ? 
                                        true : 
                                        aElement % lengthOfArray === modulo
                         })
                   })
  return result;
}

</code></pre>
    </div>