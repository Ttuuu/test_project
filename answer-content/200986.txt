<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bit field</h1>
<p>Just a quick note on the large and hacky switch statement you use to create selected options.</p>
<p>The variable <code>art</code> is a bit field, with the first bit for the top selection and to the third bit the bottom. The whole switch can be simplified with a bit of binary logic and math</p>
<pre><code>art = art &lt; 8 ? art : 0; // to make art does not contain values out of range.

$(["naturnah","stadtnah","innerst√§dtisch"].reduce((str, name, i) =&gt; {
    return `${str}&lt;option 
      value="${(1 &lt;&lt; i).toString(2).padStart(3,"0")}" 
      ${art &amp; (1 &lt;&lt; i) ? " selected" : ""}&gt;${name}&lt;/option&gt;`;
  },""
).appendTo("#route-update-routetype");

$update_route_type.trigger('contentChanged');
</code></pre>
<p>To check a bit you use bitwise <code>&amp;</code> (and) to mask (remove) all unwanted bits. If the result is not zero the bit is on. To create the mask shift 1 left to the bit position you want.</p>
<pre><code>const isBitOn = (bitField, bit) =&gt; !(bitField &amp; (1 &lt;&lt; bit));
//                                 ^          ^    ^^ ^^^ bit number
//                                 |          |    ||
//                                 |          |    || shift left
//                                 |          |   
//                                 |          | bitwise &amp; to mask out unwanted bits
//                                 |
//                                 | Not to check result is not zero
</code></pre>
    </div>