<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Edited my answer, thank you again to @typelogic for pointing out that my original only worked for a single pass. And since fixing it would have made my answer too close to his original posting, I decided to switch it up to make it a more readable version for beginners!</p>

<pre><code>bubbleUp :: (Ord a) =&gt; [a] -&gt; [a]
bubbleUp [] = []
bubbleUp [x] = [x]
bubbleUp (x:y:xs) = smaller : bubbleUp (larger : xs)
  where
    smaller = min x y
    larger = max x y

bubbleSort :: (Ord a) =&gt; [a] -&gt; [a]
bubbleSort l = foldl (\acc _ -&gt; bubbleUp acc) l [0 .. length l]
</code></pre>

<p>The fold uses the list to be sorted as the accumulator, and each iteration it will do a single bubbleUp, and the acc gets "passed on" to get bubbled up on again. This happens length l times to really make sure each item is where it belongs.</p>

<p>I challenge you to speed it up, there are early exit conditions for bubbleSort (namely a single pass with no swaps), and you can shrink down the search space as items get sorted!</p>
    </div>