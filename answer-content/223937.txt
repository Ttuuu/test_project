<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code isn't functional, neither in the sense of working properly, nor in the sense of respecting the principles of functional programming.</p>

<p>To parse a file, you need a way to consume the file. How would you do it with your function?</p>

<pre><code>csvStringView fh = readFile(filepath.csv);
csvToken tok = csvFirstMatch(fh); 
// ???
</code></pre>

<p>You could imagine to compute a new <code>string_view</code> from the token length:</p>

<pre><code>// ...
auto fh2 = remove_prefix(fh, tok.length);
csvToken tok2 = csvFirstMatch(fh2);
</code></pre>

<p>But you'll need to do it an unspecified number of times. So either you do this in a loop, but a loop isn't functional, or you muscle-up your parsing function to return not only the token, but also the stream:</p>

<pre><code>std::pair&lt;Token, std::string_view&gt; parse_token(std::string_view stream);
</code></pre>

<p>That's well and good, but once you consider it, you realize you need to take up a new challenge: how will you chain or compose in any way two calls to <code>parse_token</code> if the return type isn't the same as the argument type?</p>

<p>The answer is actually quite obvious since we're talking about functional programming: you need a function to do that. Let's say we want to combine several parsers in an either/or way. We have a <code>parse_quoted_cell</code> and <code>parse_unquoted_cell</code> for instance and want to have the result of the fitting one:</p>

<pre><code>auto parse_result = parse_quoted_cell(stream);
if (parse_result.first.type == Token::failure)
    return parse_unquoted_cell(stream);
return parse_result;
</code></pre>

<p>That can be easily generalized:</p>

<pre><code>using Parse_result = std::pair&lt;Token, Stream&gt;;
using Parser = std::function&lt;Parse_result(Stream)&gt;;

Parser either_or(Parser f, Parser s) {
    return [f,s](Stream s) {
        auto res = f(stream);
        if (res.first.type == Token::failure) return s(stream);
        return res;
    };
}
</code></pre>

<p>"Either / or" isn't the only composition type you need. There's also an "and then". For instance, to parse a cell, you need to either parse a quoted or an unquoted cell, but also either a separator or the end of file. How would you do that? With a function, of course, and it would look like this:</p>

<pre><code>Parser and_then(Parser f, Parser s) {
    return [f,s](Stream s) {
        auto res = f(stream);
        if (res.first.type == Token::failure) return res;
        auto res2 = s(res.second);
        return Parse_result(combine(res.first, res2.first), res2.second);
    };
}
</code></pre>

<p>Now we can create our cell parser from our building blocks:</p>

<pre><code>Parser parse_cell = and_then(either_or(parse_quoted_cell, parse_unquoted_cell),
                             either_or(parse_separator, parse_eof));
</code></pre>

<p>It is rather interesting to see that <code>parse_quoted_cell</code> can itself be built from other building blocks:</p>

<pre><code>Parser parse_quoted_cell = and_then(and_then(parse_quote, parse_unquoted_cell),
                                    parse_quote);
</code></pre>

<p>There are many cases where the same parser must be applied an unknown number of times. For instance, to parse the whole file, <code>parse_cell</code> should be applied repeatedly, until the end of file:</p>

<pre><code>Parser parse_file = repeat(parse_cell);
</code></pre>

<p>where <code>repeat</code> can be defined recursively:</p>

<pre><code>Parser repeat(Parser p) {
     return [p](Stream s) {
        auto res = p(stream);
        if (res.first.type == Token::failure) return res;
        auto res2 = repeat(p)(res.second);
        return Parse_result(combine(res.first, res2.first), res2.second);
    };
}
</code></pre>

<p>I admit that I didn't review your code in detail, but I feel like you should think the whole thing through again and then submit a revised program for a more detailed review.</p>
    </div>