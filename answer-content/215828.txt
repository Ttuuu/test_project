<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>You cannot use a <code>return</code> in a <code>__construct()</code> method.  If you need to check for any "badness", you can use <code>throw</code>/<code>try</code>/<code>catch</code>.<br>Relevant resources: <a href="https://stackoverflow.com/q/14295761/2943403">Return false from __constructor</a> &amp; <a href="https://stackoverflow.com/q/5918084/2943403">PHP - constructor function doesn't return false</a> (In the end, I support Sam's advice about writing class constants.)</li>
<li>Regarding your regex patterns, they can be simplified.

<ul>
<li><code>/\r\n|\r|\n/</code> is more simply expressed as <code>/\R/</code> (I expect you will never need to contend with a solitary <code>\r</code> -- you could have also used <code>/\r?\n/</code>.)</li>
<li><code>/[\t]/</code> does not need to be expressed inside of a character class, so the square brackets can be omitted. (<code>/\t/</code>)</li>
</ul></li>
<li><p>Now I am going to recommend that you completely abandon the contents of your <code>symbs()</code> method.  Using regex is a sub-optimal tool for parsing your tab-delimited .md files.  Using a combination of <code>file()</code> with iterative calls of <code>str_getcsv()</code> and a declaration of the your delimiting character makes for a concise and robust one-liner.  So brief that you may choose to avoid writing the dedicated method entirely.</p>

<pre><code>public static function symbs($i) {
    return array_map(function($line){ return str_getcsv($line, "\t"); }, file($i-&gt;symbolsPath));
    // PHP7.4: return array_map(fn($line) =&gt; str_getcsv($line, "\t"), file($i-&gt;symbolsPath));
}
// I tested this code locally using your .md file to make sure it worked as expected
</code></pre></li>
<li><p>Try to avoid single-use variable declarations.  There are some cases where declaring variables improves the readability, but something straight forward like a datetime string generator is pretty safe to just inject into its final location in your script.</p></li>
<li>It is best to keep your variable declarations in reasonable proximity to the place(s) they are used.  This will save you and other developers from having to do too much scanning to find what they need.</li>
<li>It would be a good idea for you to get familiar with PSR Coding Standards. 
Most relevant to this question, please obey the <a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">PSR-2 recommendations</a>.</li>
</ol>
    </div>