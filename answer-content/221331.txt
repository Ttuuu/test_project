<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Memory check</h1>

<p>Running the provided test program under Valgrind reveals quite a few problems:</p>

<pre class="lang-none prettyprint-override"><code>valgrind --leak-check=full ./221317   
==9150== Memcheck, a memory error detector
==9150== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9150== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==9150== Command: ./221317
==9150== 
Expected: 3     Actual: 3

Expected: 45    Actual: 45
Expected: 10    Actual: 10
Expected: 32    Actual: 32
Expected: 12    Actual: 12
Expected: 11    Actual: 11
Expected: 12    Actual: 12
Expected: 1     Actual: 1
Expected: -1    Actual: -1
Expected: 0     Actual: 0
Expected: 56    Actual: 56

Expected: 32    Actual: 32
Expected: 3     Actual: 3
Expected: 45    Actual: 45
Expected: 10    Actual: 10
Expected: 12    Actual: 12
Expected: 11    Actual: 11
Expected: 12    Actual: 12
Expected: 1     Actual: 1
Expected: -1    Actual: -1
Expected: 0     Actual: 0
Expected: 56    Actual: 56

Expected: 45    Actual: 45
Expected: 10    Actual: 10
Expected: 1     Actual: 1
Expected: 0     Actual: 0
Expected: 1     Actual: 1

Actual:     [ 45, 10, 3, 45, 10, 12, 11, 12, 1, -1, 0, 56 ]
Expected:   [ 45, 10, 3, 45, 10, 12, 11, 12, 1, -1, 0, 56 ]

==9150== Conditional jump or move depends on uninitialised value(s)
==9150==    at 0x4837041: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109FE6: LinkedList&lt;int&gt;::removeValue(int const&amp;) (221317.cpp:84)
==9150==    by 0x1097A2: main (221317.cpp:212)
==9150== 
==9150== Invalid free() / delete / delete[] / realloc()
==9150==    at 0x483708B: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109FE6: LinkedList&lt;int&gt;::removeValue(int const&amp;) (221317.cpp:84)
==9150==    by 0x1097A2: main (221317.cpp:212)
==9150==  Address 0x1fff0006d0 is on thread 1's stack
==9150==  in frame #2, created by main (221317.cpp:166)
==9150== 
Expected: 1 Actual: 1
Expected: 0 Actual: 0
Expected: 1 Actual: 1
==9150== Conditional jump or move depends on uninitialised value(s)
==9150==    at 0x4837041: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109FE6: LinkedList&lt;int&gt;::removeValue(int const&amp;) (221317.cpp:84)
==9150==    by 0x1098A1: main (221317.cpp:215)
==9150== 
==9150== Invalid free() / delete / delete[] / realloc()
==9150==    at 0x483708B: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109FE6: LinkedList&lt;int&gt;::removeValue(int const&amp;) (221317.cpp:84)
==9150==    by 0x1098A1: main (221317.cpp:215)
==9150==  Address 0x1fff0006d0 is on thread 1's stack
==9150==  in frame #2, created by main (221317.cpp:166)
==9150== 
Expected: 1 Actual: 1
==9150== Conditional jump or move depends on uninitialised value(s)
==9150==    at 0x4837041: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109FE6: LinkedList&lt;int&gt;::removeValue(int const&amp;) (221317.cpp:84)
==9150==    by 0x1098F6: main (221317.cpp:216)
==9150== 
==9150== Invalid free() / delete / delete[] / realloc()
==9150==    at 0x483708B: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109FE6: LinkedList&lt;int&gt;::removeValue(int const&amp;) (221317.cpp:84)
==9150==    by 0x1098F6: main (221317.cpp:216)
==9150==  Address 0x1fff0006d0 is on thread 1's stack
==9150==  in frame #2, created by main (221317.cpp:166)
==9150== 
Expected: 1 Actual: 1
Expected: 0 Actual: 0
==9150== Conditional jump or move depends on uninitialised value(s)
==9150==    at 0x4837041: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109FE6: LinkedList&lt;int&gt;::removeValue(int const&amp;) (221317.cpp:84)
==9150==    by 0x1099A0: main (221317.cpp:218)
==9150== 
==9150== Invalid free() / delete / delete[] / realloc()
==9150==    at 0x483708B: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109FE6: LinkedList&lt;int&gt;::removeValue(int const&amp;) (221317.cpp:84)
==9150==    by 0x1099A0: main (221317.cpp:218)
==9150==  Address 0x1fff0006d0 is on thread 1's stack
==9150==  in frame #2, created by main (221317.cpp:166)
==9150== 
Expected: 1 Actual: 1
Actual:     [ 10, 10, 12, 11, 12, 1, -1 ]
Expected:   [ 10, 10, 12, 11, 12, 1, -1 ]

==9150== 
==9150== HEAP SUMMARY:
==9150==     in use at exit: 64 bytes in 4 blocks
==9150==   total heap usage: 16 allocs, 16 frees, 73,952 bytes allocated
==9150== 
==9150== 16 bytes in 1 blocks are definitely lost in loss record 2 of 3
==9150==    at 0x4835DEF: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109D94: LinkedList&lt;int&gt;::insert(int, int const&amp;) (221317.cpp:95)
==9150==    by 0x109B27: LinkedList&lt;int&gt;::append(int const&amp;) (221317.cpp:21)
==9150==    by 0x109233: main (221317.cpp:173)
==9150== 
==9150== 48 (32 direct, 16 indirect) bytes in 2 blocks are definitely lost in loss record 3 of 3
==9150==    at 0x4835DEF: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==9150==    by 0x109DEB: LinkedList&lt;int&gt;::insert(int, int const&amp;) (221317.cpp:101)
==9150==    by 0x109B27: LinkedList&lt;int&gt;::append(int const&amp;) (221317.cpp:21)
==9150==    by 0x109316: main (221317.cpp:181)
==9150== 
==9150== LEAK SUMMARY:
==9150==    definitely lost: 48 bytes in 3 blocks
==9150==    indirectly lost: 16 bytes in 1 blocks
==9150==      possibly lost: 0 bytes in 0 blocks
==9150==    still reachable: 0 bytes in 0 blocks
==9150==         suppressed: 0 bytes in 0 blocks
==9150== 
==9150== For counts of detected and suppressed errors, rerun with: -v
==9150== Use --track-origins=yes to see where uninitialised values come from
==9150== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
</code></pre>

<p>All these problems are caused by shadowing <code>old</code> here:</p>

<blockquote>
<pre><code>        Node *old;
        if (ptr -&gt; data == data) {
            old = Head;
            ...
        }
        else {
            ...
            Node *old = ptr -&gt; next;
            ...
        }
        delete old; // Delete the node from memory
</code></pre>
</blockquote>

<p>Changing to <code>else { ... old = ptr -&gt; next; ... }</code> fixes them.</p>

<h1>Rule of Five</h1>

<p>The class has a non-trivial destructor and an owning raw pointer member.  Those are both signs that we need to proved user-defined copy/move constructors and assignment operators.</p>

<p>Without those, consider what happens when a <code>LinkedList</code> is copied.  Both lists now share the same <code>Head</code>.  If we delete one of the lists, it cleans up its memory, so the other one now has a dangling pointer.  That's a recipe for Undefined Behaviour (in its destructor, if not earlier).</p>

<p>A small amendment to the test program will soon expose the problem:</p>

<pre><code>{
    LinkedList&lt;char&gt; s;
    s.append('a');
    auto s2 = s;
}
</code></pre>

<p>It's worth running the new test under Valgrind (or other memory checker) so that you learn to recognise the symptoms there (which will help if you come across similar bugs in future):</p>

<pre class="lang-none prettyprint-override"><code> Invalid read of size 8
    at 0x10A0F9: LinkedList&lt;char&gt;::~LinkedList() (221317.cpp:127)
    by 0x109AD0: main (221317.cpp:226)
  Address 0x4d75528 is 8 bytes inside a block of size 16 free'd
    at 0x483708B: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    by 0x10A111: LinkedList&lt;char&gt;::~LinkedList() (221317.cpp:128)
    by 0x109AC1: main (221317.cpp:228)
  Block was alloc'd at
    at 0x4835DEF: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    by 0x10A1E6: LinkedList&lt;char&gt;::insert(int, char const&amp;) (221317.cpp:95)
    by 0x10A147: LinkedList&lt;char&gt;::append(char const&amp;) (221317.cpp:21)
    by 0x109A96: main (221317.cpp:227)

 Invalid free() / delete / delete[] / realloc()
    at 0x483708B: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    by 0x10A111: LinkedList&lt;char&gt;::~LinkedList() (221317.cpp:128)
    by 0x109AD0: main (221317.cpp:226)
  Address 0x4d75520 is 0 bytes inside a block of size 16 free'd
    at 0x483708B: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    by 0x10A111: LinkedList&lt;char&gt;::~LinkedList() (221317.cpp:128)
    by 0x109AC1: main (221317.cpp:228)
  Block was alloc'd at
    at 0x4835DEF: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    by 0x10A1E6: LinkedList&lt;char&gt;::insert(int, char const&amp;) (221317.cpp:95)
    by 0x10A147: LinkedList&lt;char&gt;::append(char const&amp;) (221317.cpp:21)
    by 0x109A96: main (221317.cpp:227)
</code></pre>

<p>The thing to pick up here is that the second memory block in the report was deleted in <code>~LinkedList()</code> and again in <code>~LinkedList()</code>, at the same line.  That suggests that two objects have deleted the same memory (unless we knew that some code was explicitly calling destructors, but that's rare, and we tend to inspect such code very carefully).  The first block is also relevant - that's us attempting to access <code>ptr-&gt;next</code> from <code>s2</code>'s destructor after <code>s</code> was deleted.</p>

<p>At a minimum, we could write:</p>

<pre><code>LinkedList(const LinkedList&amp;) = delete;
LinkedList&amp; operator=(const LinkedList&amp;) = delete;
</code></pre>

<p>A more useful fix would be to actually implement these, and probably also the versions that accept rvalue references (because we can simply move the contents much more efficiently than copying would be):</p>

<pre><code>LinkedList(const LinkedList&amp;);
LinkedList(LinkedList&amp;&amp;);
LinkedList&amp; operator=(const LinkedList&amp;);
LinkedList&amp; operator=(LinkedList&amp;&amp;);
</code></pre>
    </div>