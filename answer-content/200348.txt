<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python is often described as a "batteries included" kind of language, and this is no exception.</p>

<p>There's a module just for IP address manipulation and another module to generate random numbers. Put together, they do exactly what you want, in a way that's slightly more readable (IMO).</p>

<p>For this example, I'll assume that the variable <code>v</code> contains either <code>4</code> or <code>6</code>.</p>

<pre><code>from random import getrandbits
from ipaddress import IPv4Address, IPv6Address

if v == 4:
    bits = getrandbits(32) # generates an integer with 32 random bits
    addr = IPv4Address(bits) # instances an IPv4Address object from those bits
    addr_str = str(addr) # get the IPv4Address object's string representation
elif v == 6:
    bits = getrandbits(128) # generates an integer with 128 random bits
    addr = IPv6Address(bits) # instances an IPv6Address object from those bits
    # .compressed contains the short version of the IPv6 address
    # str(addr) always returns the short address
    # .exploded is the opposite of this, always returning the full address with all-zero groups and so on
    addr_str = addr.compressed 

print(addr_str)
</code></pre>

<p>Here, <code>addr_str</code> will hold a fully random IPv4 or IPv6 address.</p>

<p>You can even generate random addresses from a subnet like this:</p>

<pre><code>from random import getrandbits
from ipaddress import IPv4Network, IPv4Address

# network containing all addresses from 10.0.0.0 to 10.0.0.255
subnet = IPv4Network("10.0.0.0/24") 

# subnet.max_prefixlen contains 32 for IPv4 subnets and 128 for IPv6 subnets
# subnet.prefixlen is 24 in this case, so we'll generate only 8 random bits
bits = getrandbits(subnet.max_prefixlen - subnet.prefixlen)

# here, we combine the subnet and the random bits
# to get an IP address from the previously specified subnet
addr = IPv4Address(subnet.network_address + bits)
addr_str = str(addr)

print(addr_str)
</code></pre>

<p>Here, <code>addr_str</code> will always contain IP addresses like <code>10.0.0.184</code>, <code>10.0.0.42</code> and so on. It works the same way with IPv6 addresses, except in that case you'd have to import <code>IPv6Network</code> and <code>IPv6Address</code> instead.</p>
    </div>