<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Part of code review is challenging assumptions, so to begin with I'd like to challenge the motivation for this code.</p>

<p>You say you want to avoid "Storing the UID (unique id) in the table along with the id". Why would you have two? Any one of those is enough to uniquely identify a row - they are both unique, after all. If you mean the <a href="https://en.wikipedia.org/wiki/Surrogate_key" rel="noreferrer">surrogate key</a> (serial number, UUID or similar) and the business key (for example username), then it absolutely makes sense to store both of them in the same table. Surrogate keys have been discussed for decades, but the industry consensus nowadays seems to be:</p>

<ol>
<li>The business key <em>should</em> be exposed to end users. That is, a user should know their own username and employee number, even if these are created by the system.</li>
<li>Tables should have a surrogate key, and this key should <em>not</em> be exposed to end users. This does not just include direct user interfaces, but also for example URLs. The reason for this is to be sure that the surrogate key remains an implementation detail which could later be <em>changed,</em> such as when moving from a guessable serial number to a <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" rel="noreferrer">UUID</a>.</li>
</ol>

<p>You also want to avoid a "[c]omplex and costly algorithm". Version-4 UUIDs are probably the cheapest unguessable surrogate keys you can get your hands on these days without massive implementation effort, as long as you use pretty much any database other than MySQL - <a href="https://www.postgresql.org/docs/current/uuid-ossp.html" rel="noreferrer">PostgreSQL</a> has them, as does the major closed-source databases.</p>

<p>The last reason is related to unguessable IDs, already discussed above.</p>

<p>All in all it looks like implementing v4 UUIDs in MySQL is probably the cheapest option if you <em>must</em> use that database, otherwise you can just use an existing, safe, fast and F/LOSS solution.</p>

<hr>

<p>That said, some suggestions for the Python code:</p>

<ul>
<li><code>__init__</code> takes an optional <code>rounds</code> parameter, but the only place that's used it's called <code>shuffling_method</code>, which seems inconsistent. Changing the number of rounds doesn't constitute changing the "method".</li>
<li>Rather than assigning <code>u</code> and <code>v</code> at the same time you can save one operation by assigning <code>u</code> first and reusing its value to define <code>v</code>.</li>
<li>Naming is incredibly important for maintainability. I basically have to read the entire code block to <em>guess</em> what <code>a</code>, <code>b</code>, <code>c</code>, <code>m</code>, <code>u</code>, <code>v</code> and <code>x</code> mean. A good variable name is better than a good comment, and will allow the reader to understand a piece of code with as little context as possible.</li>
<li>Having twinned methods <code>encrypt</code> and <code>_encrypt</code>, <code>decrypt</code> and <code>_decrypt</code> is a code smell. If they are doing the same thing, why are they not one method? If they are doing different things, why are they named effectively the same?</li>
<li>There are four different <a href="https://en.wikipedia.org/wiki/Jenkins_hash_function" rel="noreferrer">Jenkins hash functions</a>, but it's not obvious which one this is. That would be very helpful for someone trying to verify the implementation.</li>
<li>This comes under the category of implementing your own crypto, since you're trying to make the sequence non-guessable. This hash function looks fairly niche based on the Wikipedia article, and it even <a href="https://www.eng.tau.ac.il/~yash/C2_039_Wool.pdf" rel="noreferrer">looks like the Jenkins hash without an additional secret is guessable</a>.</li>
</ul>
    </div>