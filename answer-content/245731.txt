<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Apart from performance, there are several other problems in your implementation which the other answers did not address.</p>
<ol>
<li><a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="nofollow noreferrer">This should not be a class</a>. It should be a function, because it being a class offers no advantage whatsoever and it makes its usage more complex.</li>
<li>The variable <code>palindrome</code> is unnecessary and confuses the reader: this variable is <em>always</em> going to be <code>True</code>. So remove it.</li>
<li>Don’t cast the result of a division to <code>int</code>. Use integer division instead.</li>
<li>The <code>if len(s) == 1</code> check is redundant: its logic is already subsumed in the subsequent code.</li>
<li>Use descriptive variable names: <code>s</code> for an arbitrary string is fine but <code>i</code> to denote the middle index of a sequence is cryptic.</li>
</ol>
<p>An improved implementation (without changing the algorithm) would look as follows:</p>
<pre><code>def is_palindrome(n: int) -&gt; bool:
    s = str(n)
    mid = len(s) // 2
    for i in range(mid):
        if s[i] != s[-i - 1]:
             return False
    return True
</code></pre>
<p>Or, using a generator expression:</p>
<pre><code>def is_palindrome(n: int) -&gt; bool:
    s = str(n)
    mid = len(s) // 2
    return all(s[i] == s[-i - 1] for i in range(mid))
</code></pre>
<p>… and of course this whole loop could also be replaced with <code>return s[:mid] == s[: -mid - 1 : -1]</code> because Python gives us powerful subsetting.</p>
<hr>
<p>I also want to address a misconception in your question:</p>
<blockquote>
<p>looking up a value in a dictionary has lower time complexity than searching through a list,</p>
</blockquote>
<p>That’s only true if the dictionary has the same size as the sequence (more or less …), and if looking up the key is <em>constant</em>. Neither is true in your case. But what’s more, you still need to <em>construct</em> the list/dictionary, and you completely omit the complexity of these operations.</p>
<p>In fact, the first thing your dictionary does is <em>also</em> construct the sequence — namely, by invoking <code>str(x)</code>. It then goes on to <em>traverse the whole list!</em> Because that’s what <code>i:j for i,j in enumerate(str(x))</code> does.</p>
<p>So before even starting your algorithm proper, it has already performed <em>more work</em> than your other implementation which, after all, only needs to traverse <em>half</em> the string. Even if you stopped at this point and returned, the second implementation would already be slower than the first, and you haven’t even finished constructing the dictionary yet (constructing the dictionary from key: value mappings <em>also</em> takes time).</p>
<p>As for the actual algorithm, you’re <em>still</em> traversing half the string, so once again you are doing the same work as your initial algorithm. This means you have the same asymptotic complexity. But even that part of the second algorithm is slower, because a dictionary is a much more complex data structure than a plain sequence, and each key access of the dictionary (<code>s[p]</code>) is substantially slower than the same access on a string or list would be.</p>
    </div>