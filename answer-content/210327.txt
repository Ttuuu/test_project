<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have looked through your code. Here are a few things I notice</p>

<ol>
<li>StringBuilder instead of using <code>+=</code> on <code>String</code>, for more efficient string concatenation.</li>
</ol>

<p>Creating a new instance of StringBuilder and using that would work better than using the + operator on Strings. Something like this:</p>

<p><code>StringBuilder builder = new StringBuilder();
// inside the loop call the following
builder.append("some string to append");
// ...
// later on when you need the string
builder.toString();</code></p>

<ol start="2">
<li>More descriptive variable names</li>
</ol>

<p>Try to explain what your variable represents instead of just calling it <code>wholeString</code>. To you, you may very well remember the significance of each variable and what it represents, but this is a good coding practice to get into because code will be read more than written and it would be easier for anyone else reading your code to immediately tell what it's doing without having to in many cases even read comments. This is called "self-documenting code".</p>

<ol start="3">
<li>JDK 8+ Files API</li>
</ol>

<p>After JDK 8 you can call lines() using the Files API. Although your approach is correct using BufferedReader and FileReader, you may want to consider switching to using the lines() method and operating on the Stream returned because it is a bit less verbose which makes reading it easier.</p>

<ol start="4">
<li>Succinct method chaining using Stream over iterative approach</li>
</ol>

<p>If you switch to using Stream for the file, you can easily adopt a more functional approach of calling filter or other stream related functions on it. This is a bit cleaner to read than the iternative while loop to remove the newlines in my view.</p>

<ol start="5">
<li>Multiline comments using multiline comment syntax</li>
</ol>

<p>For in-depth explanations and long comments that span to multiple lines, you can use the following notation:</p>

<p>/*</p>

<p>This comment </p>

<p>spans</p>

<p>multiple lines</p>

<p>*/</p>

<p>However, with that being said - I think the comments in this code are a bit much. Using self documenting variables as mentioned above, comments can be lessened and the code would be more readable too.</p>

<p>Hope that helps, let me know if you have any questions on the feedback I've given.</p>
    </div>