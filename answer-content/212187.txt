<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tried to wrap my head around this file format (what a weird one?!) and came to the realization that it is a lot easier to build the tree structure if you read the file from the bottom-up, would you agree? Based on that, I came up with this much simpler implementation where I only maintain a stack (last in, first out) of field names. The output is the same for your example data and I hope I did not miss anything.</p>

<pre><code>fdfAnnotate &lt;- function(fdfLines) {
    fields &lt;- vector(length = length(fdfLines), mode = "character")
    store &lt;- NULL
    for (i in rev(seq_along(fdfLines))) {
        line &lt;- fdfLines[i]
        if (grepl("/V", line)) {
            fields[i] &lt;- paste(store, collapse = ".")
            store &lt;- head(store, -1)
        } else if (grepl("/T [(]", line)) {
            name &lt;- sub(".*[(](.*)[)].*", "\\1", line)
            store &lt;- c(store, name)
        } else if (grepl("/Kids \\[", line)) {
           store &lt;- head(store, -1)
        }
    }
    data.frame(fdfLines, fields, stringsAsFactors = FALSE)
}
</code></pre>

<p>Some general comments or other recommendations</p>

<ol>
<li>Considering this will go on CRAN, I would try to limit package dependencies as much as possible. Here I replaced <code>stringr::str_extract</code> with a call to the base <code>sub</code></li>
<li>You are not using the commonly accepted syntax, to list a few: use <code>&lt;-</code> for assignments; use double quotes instead of single quotes; use a space after a comma,  between binary operators, after <code>if</code>, before <code>{</code></li>
<li>The code is making a lot of assumptions about the input, essentially that the input comes from a valid fdf file. Maybe some of these assumptions ought to be tested</li>
<li>Are the regex patterns strong enough? For example, should you be using <code>^</code> and <code>$</code> where appropriate?</li>
</ol>
    </div>