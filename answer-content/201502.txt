<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll ignore the 'PluralSight' code.</p>

<p>Note that you have implemented a breadth-first traversal. As far as I'm concerned, a spec which doesn't specify how the tree is traversed is insufficient, but you must document this behaviour (e.g. with inline documentation (<code>///</code>), or otherwise make a statement that the order is undefined (otherwise people will unwittingly assume it is dependable). Assumptions should always be documented in some manner (ideally via the type system, otherwise through exceptions, and finally as inline documentation and comments)</p>

<h2>Constructor</h2>

<p><code>TreeNodeIterator</code> will fail if you pass <code>null</code> to the constructor, with <code>MoveNext</code> always returning true, and <code>Current</code> throwing a confusing <code>NullReferenceException</code>. Throw in the constructor! In your recent questions, you've done a lot of checking for <code>null</code>, but not nearly enough of throwing <code>ArgumentExceptions</code>. Fail fast with good error messages, and your API will be significantly harder to misuse.</p>

<p>Of course, if you want to support accepting a <code>null</code> Tree (which would be an empty tree) then this will need change elsewhere in the code, and would warrant documentation.</p>

<h2><code>MoveNext()</code> and <code>Reset()</code></h2>

<p>What is this doing?</p>



<pre><code>if (_tree == null)
{
    Reset();
    return true;
}
</code></pre>

<p>This says "if I was supplied null, then please perpetually pretend I have data... or otherwise never run me".</p>

<p>My guess is that this was <em>meant</em> to check <code>_current</code>, and that <code>Reset()</code> is meant to clear the queue, and requeue <code>_tree</code> (which it should do, as part of the <code>IEnumerator</code> contract). This has not been achieved, which makes the Enumerator single-use (without documentation to support this). You also shouldn't be calling <code>Reset</code> from <code>MoveNext()</code>: <code>IEnumerators</code> shouldn't auto-reset (though I can't find an authoritative reference for this...).</p>

<p>Also, that <code>while</code> should be an <code>if</code>. I'd be inclined to make it an <code>else if</code>, which would reduce the nesting, and make the 3 possible paths much clearer. Stripping the <code>_tree == null</code> gives you a much cleaner method:</p>

<pre><code>public bool MoveNext()
{
    if (Q.Count &gt; 0)
    {
        _current = Q.Dequeue();

        if (_current.Left != null)
        {
            Q.Enqueue(_current.Left);
        }

        if (_current.Right != null)
        {
            Q.Enqueue(_current.Right);
        }

        return true;
    }
    else
    {
        return false;
    }
}
</code></pre>

<h2><code>TreeNode&lt;T&gt;</code></h2>

<p>I'm guessing you were proscribed the highly mutable <code>TreeNode&lt;T&gt;</code>. It's probably worth documenting that the iterator makes no attempt to handle the case where the data in a <code>TreeNode&lt;T&gt;</code> is changed during iteration, and that doing so is unsupported (unless you specifically try to support it in some way). It's also perfectly possible that nice <code>TreeNode&lt;T&gt;</code> to be part of a graph with cycles, in which case your iterator will never terminate (again, this might warrant documentation).</p>

<p>I'd also consider making the iterator <code>internal</code> or even <code>private</code> (within <code>TreeNode&lt;T&gt;</code>), since it is an implementation detail (judging by the lack of tests which don't go through <code>TreenNode&lt;T&gt;</code>, and the behaviour when passed <code>null</code>.</p>

<h2>Misc</h2>

<ul>
<li><p><code>_tree</code> and <code>Q</code> should probably be <code>readonly</code>.</p></li>
<li><p><code>Q</code> is a terrible and inconsistent name (i.e. private but upper-case with no underscore). <code>_queue</code> would be significantly better in the context. (You could argue that <code>_queue</code> is still not great, because it describes the thing, not what it does, which is to provide a traversal frontier, but I think it would be fine).</p></li>
<li><p>You might consider throwing if <code>Current</code> is called before <code>MoveNext</code>. <em>Some</em> of the BCL throws <code>InvalidOperationException</code>, because it makes no sense to ask for a value which doesn't exist yet. However, other pats of it do not for (as far as I can gather) performance reasons. You also don't do anything to mitigate calling <code>Current</code> after <code>MoveNext</code> has returned <code>false</code> (e.g. it will continue to return whatever happened to be last rather than throw): again, the BCL is inconsistent in this regard between <code>IEnumerator&lt;T&gt;</code> and <code>IEnumerator</code> (more reasons to avoid manually enumerating things... (as opposed to using <code>foreach</code>)). </p></li>
</ul>

<h2>Personal Preference Stuff</h2>

<ul>
<li><p>A little more care given to white-space would be nice. You have a few seemingly randomly empty lines, and I'd personally want more padding in other places (e.g. between the back-to-back <code>if</code>s, otherwise they can feel like an <code>if</code>, <code>else if</code> pair, and after the fields before the constructor)</p></li>
<li><p>Empty methods (<code>Dispose()</code>) scare me. I always leave a comment in an empty method indicating that it is meant to be empty, otherwise it looks like I've forgotten to implement it. Doing nothing is kind-of-OK, but ideally this would set some internal state to indicate the <code>IEnumerator</code> has been disposed and can no-longer be used.</p></li>
</ul>
    </div>