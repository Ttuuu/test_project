<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your assumption is not quite correct.</p>

<ul>
<li>Even number of letters: every letter must occur even amount of times (not necessarily twice)</li>
<li>Odd number letters: one letter must occur an odd amount of times, every other letter the same as above.</li>
</ul>

<p>For example, <code>aaa</code> is a valid palindrome where no letter occurs once or twice.</p>

<p>As to your code, it is way too complex. If you look closely it has a complexity of \$O(n^2)\$, with <code>n</code> being the length of the string, because you have nested loops:
 you call <code>findUnique()</code> which contains a loop over the letters in a loop over the letters. </p>

<p>You just have to count all the letters and check if there are letters with odd counts. If there are more than one letter with an odd counts the string does not satisfy the above palindrome condition. Furthermore, since a string with an even number letters must not have a letter with an odd count it is not necessary to check whether string length is even or not:</p>

<ul>
<li><code>even + odd = odd</code></li>
<li><code>n * even = even</code></li>
</ul>

<p>The function could look like this:</p>

<pre><code>function canRearrangeToPalindrome(str)
{
    var letterCounts = {};
    var letter;
    var palindromeSum = 0;
    for (var i = 0; i &lt; str.length; i++) {
        letter = str[i];
        letterCounts[letter] = letterCounts[letter] || 0;
        letterCounts[letter]++;
    }
    for (var letterCount in letterCounts) {
        palindromeSum += letterCounts[letterCount] % 2;
    }

    return palindromeSum &lt; 2;
}
</code></pre>
    </div>