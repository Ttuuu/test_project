<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code:</strong></p>

<pre><code>#include &lt;sys/time.h&gt;
</code></pre>

<p>Note that this isn't cross-platform. We can use <code>SDL_GetTicks()</code> instead.</p>

<hr>

<pre><code>const int RESX = 960;
const int RESY = 540;
const float ROTSPEED = 0.03;
const float MOVESPEED = 0.08;
const float STRAFEMOVESPEED = 0.05657;
char placeDist = 3;

char MAP[32][32] = {
</code></pre>

<p>I don't think any of these need to be globals. We could declare them in <code>main</code> instead. It might be worth grouping some of them into a <code>settings</code> struct.</p>

<hr>

<pre><code>char MAP[32][32]
</code></pre>

<p>We should use named variables, instead of magic numbers.</p>

<hr>

<pre><code>  float posX = 3, posY = 4;
  float dirX = 1, dirY = 0; //direction vector
  float planeX = 0, planeY = 0.66; //camera plane
</code></pre>

<p>These aren't used until after we've initialized SDL, so we can (and should) declare them later.</p>

<hr>

<pre><code>  if( SDL_Init( SDL_INIT_VIDEO ) &lt; 0 )  {
    printf( "SDL could not initialize! SDL_Error: %s\n", SDL_GetError() );
  }
</code></pre>

<p>If we fail to initialize sdl, we probably shouldn't continue running the program! We could add a <code>return EXIT_FAILURE;</code> in there. The same problem exists with the window and renderer.</p>

<p>It would be neater to move the SDL initialization into a separate function.</p>

<hr>

<pre><code>  char running = 1;
</code></pre>

<p>We could use <code>&lt;stdbool.h&gt;</code> for this.</p>

<hr>

<pre><code>    SDL_Rect rect;
    rect.w = 1;
</code></pre>

<p>This isn't used in the input handling, so it can be declared later.</p>

<hr>

<pre><code>  float oldPlaneX, oldDirX;
  if(keystate[SDL_SCANCODE_RIGHT]) {
    oldDirX = dirX;
    dirX = dirX * cos(ROTSPEED) - dirY * sin(ROTSPEED);
    dirY = oldDirX * sin(ROTSPEED) + dirY * cos(ROTSPEED);
    oldPlaneX = planeX;
    planeX = planeX * cos(ROTSPEED) - planeY * sin(ROTSPEED);
    planeY = oldPlaneX * sin(ROTSPEED) + planeY * cos(ROTSPEED);
  }
  if(keystate[SDL_SCANCODE_LEFT]) {
    oldDirX = dirX;
    dirX = dirX * cos(-ROTSPEED) - dirY * sin(-ROTSPEED);
    dirY = oldDirX * sin(-ROTSPEED) + dirY * cos(-ROTSPEED);
    oldPlaneX = planeX;
    planeX = planeX * cos(-ROTSPEED) - planeY * sin(-ROTSPEED);
    planeY = oldPlaneX * sin(-ROTSPEED) + planeY * cos(-ROTSPEED);
  }
</code></pre>

<p>Yikes. We could really do with a <code>vec2</code> struct, and some math functions (<code>vec2_rotate</code>, <code>vec2_add</code>, <code>vec2_sub</code> etc.)</p>

<p>It would be neater (and less repetitious) to apply the camera movement as a separate stage after getting the input. We just need to set a variable to <code>+1.f</code> when the right key is pressed, and <code>-1.f</code> when the left key is pressed. Then we multiply the <code>ROTSPEED</code> by this variable. e.g.:</p>

<pre><code>struct vec2 {
    float x, y;
};

struct vec2 vec2_rotate(struct vec2 v, float angle) {
    struct vec2 out;
    out.x = v.x * cos(angle) - v.y * sin(angle);
    out.y = v.x * sin(angle) + v.y * cos(angle);
    return out;
}

...

    float rotation = 0.f;
    if (keystate[SDL_SCANCODE_RIGHT]) rotation += +1.f;
    if (keystate[SDL_SCANCODE_LEFT])  rotation += -1.f;

    if (rotation != 0.f) {
        float angle = rotation * ROTSPEED;
        dir = vec2_rotate(dir, angle);
        plane = vec2_rotate(plane, angle);
    }
</code></pre>

<p>We can do a similar thing for the other movement inputs.</p>

<hr>

<p>Note that we need to take into account the frame-rate when applying the movement in order to be completely consistent with the speed at which the camera moves. <a href="https://gafferongames.com/post/fix_your_timestep/" rel="nofollow noreferrer">We might need to use an accumulator or something similar.</a></p>

<hr>

<pre><code>        for (unsigned char step = 0; step &lt; 26; step += 1) {
            ...
            if (MAP[mapX][mapY] != 0) step = 27;
        }
</code></pre>

<p><code>26</code> deserves a variable name. We should also use <code>break;</code> to escape the loop instead of changing the loop variable (it won't stop working if we change the number of steps, or the loop condition).</p>

<hr>

<p>The raycasting code should really be moved into a separate function returning the distance.</p>

<p>It would be a good idea to handle maps that aren't bounded by walls (we'd need to check that we don't step out of bounds).</p>

<hr>

<p><strong>Performance:</strong></p>

<p>The ray-casting code is already very fast. Drawing to the screen and calling <code>SDL_RenderPresent</code> takes the most time, and there's probably not a lot we can do about that.</p>

<p>Note that <code>SDL_RenderDrawRect</code> is actually for outlining rectangles, so it draws multiple lines internally. So technically we should be using <code>SDL_RenderFillRect</code> instead, though it doesn't seem to make much of a difference in performance.</p>
    </div>