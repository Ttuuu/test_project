<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In terms of the basic thread locking, it looks like it is doing the right thing, but there are a number of issues in how you are calculating the account balance, and also some escaped locking as well.</p>

<p>Note, your post is titled "Synchronized implementation", but it is not, it is a locked implementation. Synchronization is different, and, in this case, it may be a simpler mechanism.</p>

<h3>Locking</h3>

<p>Even if you don't catch exceptions, you should always use the try/finally mechanism for locking. Here, for example, it's possible that the addition may throw an exception (even though you don't catch it):</p>

<pre><code>public void addAmount(double amount) {
    this.accountLock.writeLock().lock();
    try {
        this.balance.add(new BigDecimal(amount));
    } finally {
        this.accountLock.writeLock().unlock();
    }
}
</code></pre>

<p>In case you think that's extreme, well, the amount could be <code>NaN</code> or <code>infinity</code>, and that would throw a <code>NumberFormatException</code>, etc. Even if it were impossible for the logic to throw an error, you should still use the try/finally mechanism because it makes the logic obvious.</p>

<p>The balance method has the most to gain:</p>

<pre><code>public double getBalance() {
    this.accountLock.readLock().lock();
    try {
        return this.balance.setScale(2, RoundingMode.HALF_DOWN).doubleValue();
    } finally {
        this.accountLock.readLock().unlock();
    }
}
</code></pre>

<p>You are also leaking the lock through the public method to get it. You really should not allow other people to manipulate the lock strategy you have in your class. It is intended to be internal for a reason.</p>

<p>Speaking of that lock, you should also make it final...  </p>

<pre><code>private final ReadWriteLock accountLock;
</code></pre>

<h3>Bugs</h3>

<p>The most glaring issue is not with your locking, but with the balance management itself. BigDecimals are immutable. They cannot be changed. This does nothing: <code>this.balance.add(new BigDecimal(amount));</code> .... that should be <code>this.balance = this.balance.add(new BigDecimal(amount));</code>.</p>

<p>The <code>accountNumber</code> and <code>accountHolder</code> should be final as well.</p>

<p>Finally, the getBalance method will not always return a 2-decimal double value. Not all values in binary floating-point are representable in decimal.</p>
    </div>