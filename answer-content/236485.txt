<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few comments:</p>

<p>Eliminate extra/unused imports</p>

<p>Might be better to load quotes from a file (or from a "Quote of the Day" web site (RSS feed).  That way you don't have to edit the source to add new ones.</p>

<p>It's not necessary to make a separate Clock class. It seems to complicate things.  The code below has one function on a callback timer.  It "over samples" the time 5x per second.  When the second or day (could be anything) changes, a function is called to update the time/date/phrase.</p>

<p>Time format displays seconds whether display_seconds is True or False.</p>

<p>class FullScreenApp isn't used.</p>

<p>Here's my take on the display part.  Getting quotes from a file or URL is an exercise for the reader:</p>

<pre><code>import datetime
import random

import tkinter as tk

MESSAGE_WIDTH = 400
SHOW_SECONDS = False
BLINK_COLON = True

""" DICTIONARY PHRASES """
phrases = [
    "I never had a policy; I have just tried to do my very best each and every day. -- Abraham Lincoln",
    "There are some things you learn best in calm, and some in storm. -- Willa Cather",
    "If a man does his best,\n what else is there? -- George S. Patton",
    "Better to write for yourself and have no public, than to write for the public and have no self. -- Cyril Connolly",
    "Life is far too important a thing ever to talk seriously about. -- Oscar Wilde",
    "Indeed, history is nothing more than a tableau of crimes and misfortunes. -- Voltaire",
    "In great affairs men show themselves as they wish to be seen; in small things they show themselves as they are. -- Nicholas Chamfort",
    "The first step to getting the things you want out of life is this: Decide what you want. -- Ben Stein",
    "Life is what happens to you while you're busy making other plans. -- John Lennon",
    "For four-fifths of our history, our planet was populated by pond scum. -- J. W. Schopf",
    "History will be kind to me for I intend to write it. -- Sir Winston Churchill",
    "History is the version of past events that people have decided to agree upon. -- Napoleon Bonaparte",
    "You create your opportunities by asking for them. -- Patty Hensen",
    "If everyone had a dad like mine, no one would have sex tapes. -- Tina Fey"
    ]

root = tk.Tk()
root.configure(bg="black")

prev_time = datetime.datetime(1,1,1)

time_display = tk.StringVar(root, " "*len(" HH:MM:SS PM "))
date_display = tk.StringVar(root, " "*len("aaa, bbb dd, YYYY"))
phrase_display = tk.StringVar(root, " "*len(max(phrases, key=len)))
author_display = tk.StringVar(root, " "*MESSAGE_WIDTH)

def tick():
    global prev_time

    curr_time = datetime.datetime.now()

    if curr_time.second != prev_time.second:
        update_time(curr_time)

    if curr_time.second//15  != prev_time.second//15:    # this is for testing, it makes the quote update every 15 seconds
#    if curr_time.day != prev_time.day:                  # normally use this one to update quote every day
        update_phrase()

    if curr_time.day != prev_time.day:
        update_date(curr_time)

    prev_time = curr_time

    root.after(200, tick)


def update_date(curr_time):
    date_display.set(f"{curr_time:%a, %b %d, %Y}")


def update_phrase():
    phrase, author = random.choice(phrases).split('--')                              
    phrase_display.set(phrase.strip())
    author_display.set(f"-- {author.strip()}")


def update_time(curr_time):
    #       colon            no colon 
    fmt=[["   %H:%M %p  ", "   %H %M %p  "],        # without seconds
         [" %H:%M:%S %p ", " %H %M %S %p "]      # with seconds
        ][SHOW_SECONDS][BLINK_COLON and curr_time.second % 2]

    time_display.set(f"{curr_time:{fmt}}")


# Removes the window bar at the top creating a truely fullscreen
#root.wm_attributes('-fullscreen','true')
tk.Button(root, text="quit", bg="black", fg="red", command=root.quit).pack()

#Spacer
tk.Label(root, text="", fg="white", bg="black").pack()

# this displays the clock known as clock
clock = tk.Label(root, textvariable=time_display, bg='black',fg='white',font=("helvetica",60))
clock.pack()

# Add the date to the tkinter window
date = tk.Label(root, textvariable=date_display, fg="white", bg="black", font=("helvetica", 30), width=16)
date.pack()

#double height Spacer
tk.Label(root, text="\n\n", fg="white", bg="black").pack()

# Add the phrase to the tkinter window
text = tk.Message(root, textvariable=phrase_display, fg="white", bg="black", font=("helvetica", 17), width=400, justify="left")
text.pack()

author = tk.Message(root, textvariable=author_display, fg="white", bg="black", font=("helvetica", 17), width=400, justify='right', anchor='e')
author.pack()

#Spacer
tk.Label(root, text="", fg="white", bg="black").pack()

# starts the clock
tick()

root.mainloop()

# In some developement environments root.quit doesn't fully destroy the application; hence
# the call to root.destroy().  But clicking the close button (the 'X') on a window does destroy
# the application, so calling root.destroy() raises a TclError for trying to destroy it a
# second time.  This quiets the error message. 
try:
    root.destroy()
except tk.TclError:
    pass
</code></pre>
    </div>