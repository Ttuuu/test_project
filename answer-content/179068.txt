<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using a <code>set</code> makes the problem O(N lg N) as associated directories are lg N for each insert, delete and find. Unless you use the hash version of the associated directories, in which case you can't find next in O(1) as worst case is O(N).</p>

<p>Sorting with a comparison function always result in O(N lg N), but other specialized sorts doesn't, like counting sort.</p>

<p>So we could try with a specialization of counting sort, lets call it existence sort as we are not interested in how many but only in if it exists.</p>

<p>Further we prune the range of numbers in the original array to only those between 1 and 100000 included.</p>

<p>Pseudo code for a this method:</p>

<pre><code>min = 1
max = 100000

bool num[100000] = false // 100000 long array of bool, add 1 (one) if your language array index start at 0 (zero)


for (i = 1; i &lt; 1000000; i++) {
  can = A[i];
  if(can &gt;= min &amp;&amp; can &lt;= max) {
    num[can] = true;    // register numbers that exist in our range
  }
}

for (i = min; i &lt;= max; i++)
  if (!num[i])
    return i;
</code></pre>
    </div>