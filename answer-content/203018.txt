<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use <code>numpy</code> in conjunction with <code>itertools</code> for this.</p>

<p>First, <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations("ABCD", 2)</code></a> gives <code>AB AC AD BA BC BD CA CB CD DA DB DC</code>, i.e. the combination of each element with each other, including <code>AB</code> and <code>BA</code>, but excluding the combination of each element with itself (so <code>AA</code>).</p>

<p>With this we can use simple numpy element-wise operations:</p>

<pre><code>from itertools import permutations
import numpy as np

def graipher(a):
    a = np.array(a)  # to make sure, better call this outside and remove it here
    final = []
    for x, y in permutations(a, 2):
        d = (x - y)**2
        m = d.sum()
        final.append(d[-1] / (2*m))
    return np.array(final).reshape(len(a), -1)

if __name__ == "__main__":
    a = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
    print(graipher(a).tolist())
# [[0.16666666666666666, 0.16666666666666666],
#  [0.16666666666666666, 0.16666666666666666],
#  [0.16666666666666666, 0.16666666666666666]]
</code></pre>

<p>For the small example you gave, this is not actually faster (but also not slower). It is also a lot more readable, IMO.</p>

<p>For a random sample of shape 100 x 100, this code takes about 33 ms to compute the final result, whereas yours takes more than a second.</p>

<hr>

<p>Some comments on your code explicitly:</p>

<ul>
<li>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which is well worth a read. It recommends using <code>lower_case</code> for variable (and function) names.</li>
<li>In your innermost loop, you calculate <code>p</code> every iteration, but only the last iteration contains the value you care about. You can therefore pull it out of the loop.</li>
<li>Your code works only for <code>n x n</code> inputs, whereas the algorithm (and my code) works for <code>n x k</code> inputs.</li>
</ul>
    </div>