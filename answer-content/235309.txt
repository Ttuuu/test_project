<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We're missing an include of <code>&lt;stddef.h&gt;</code> to define <code>size_t</code> (or any of the other headers which define it).</p>

<p>We're missing an include of <code>&lt;stdlib.h&gt;</code>, needed for <code>malloc()</code> and friends (and this would define <code>size_t</code> for us, too).</p>

<p>With those fixed, and sufficient minor changes to the test program, I managed to compile with only a few warnings.</p>

<blockquote>
<pre><code>DEST = malloc(sizeof(Array(TYPE)));                                     \
DEST-&gt;size = 0;                                                         \
</code></pre>
</blockquote>

<p>Oops!  If <code>malloc()</code> returns a null pointer, we have undefined behaviour.  Replace with </p>

<pre><code>DEST = malloc(sizeof(Array(TYPE)));                                 \
if (DEST) {                                                         \
    DEST-&gt;size = 0;                                                 \
</code></pre>

<p>Similarly, when we delete, let's accept a null pointer:</p>

<pre><code>#define aFree(DEST)                             \
    if (DEST) {                                 \
        free(DEST-&gt;data);                       \
    }                                           \
    free(DEST)
</code></pre>

<p>We have a dangerous <code>realloc()</code>:</p>

<blockquote>
<pre><code>#define aResize(DEST) { \
    DEST-&gt;cap *= 2;                                                         \
    DEST-&gt;data = realloc(DEST-&gt;data, DEST-&gt;cap * DEST-&gt;typeSize);           \
}
</code></pre>
</blockquote>

<p>If the <code>realloc()</code> fails, then we have a null pointer in <code>data</code> and <strong>no way to access the old contents</strong>.  The standard idiom is to check the return value <em>before</em> assigning it to <code>data</code>.  We're going to need some way to report failure, too.</p>

<p>In <code>aAppend()</code>, we should be using the <code>aResize()</code> we've defined instead of resizing to fit - as it is, we're going to reallocate on every single call.</p>

<hr>

<p>Overall, I think that writing everything as macros is a poor choice.  It's probably better to use macro expansion (or equivalent technique, such is multiple includes with varying definitions) to create a set of (small, inlinable) functions for a given type. </p>

<p>The macros we have here look like functions, but can't be used like functions (in particular, <code>aNew</code> expands to a declaration and a statement, and <code>aAdd</code> and <code>aFree</code> both expand to multiple statements, making them dangerous and confusing near conditionals.</p>

<p>It's frustrating that the array control block must be allocated from dynamic memory - C++ programmers expect to be able to create <code>std::vector</code> objects on the stack, with only the object storage itself on the heap.</p>
    </div>