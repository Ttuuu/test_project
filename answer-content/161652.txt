<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As already mentioned in the other answers, in Java 8 you can use lambdas and the stream API to remove a lot of boilerplate. </p>

<p>Both your solutions can be converted to use streams.</p>

<p>Solution 1 - two methods:</p>

<pre><code>public List&lt;Integer&gt; oddNumbers(List&lt;Integer&gt; numbers) {
    return numbers.stream().filter(n -&gt; (n % 2) != 0).collect(Collectors.toList());
}

public List&lt;Integer&gt; evenNumbers(List&lt;Integer&gt; numbers) {
    return numbers.stream().filter(n -&gt; (n % 2) == 0).collect(Collectors.toList());
}
</code></pre>

<p>Solution 2 - as single method:</p>

<pre><code>public void filter(List&lt;Integer&gt; numbers, List&lt;Integer&gt; oddNumbers, List&lt;Integer&gt; evenNumbers) {
    Map&lt;Boolean, List&lt;Integer&gt;&gt; partitions = numbers.stream().collect(Collectors.partitioningBy(n -&gt; (n % 2) == 0));
    evenNumbers.addAll(partitions.get(true));
    oddNumbers.addAll(partitions.get(false));
}
</code></pre>
    </div>