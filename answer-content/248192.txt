<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a short review;</p>
<ul>
<li>Why hardcode the batch length to 500 ?</li>
<li>Why not have the batch length be a nice constant ?</li>
<li>You have even hard coded the length in the function name, which is really unfortunate</li>
<li><code>batchNumber++</code> is more canonical than <code>batchNumber += 1</code></li>
<li>I would have gone for <code>maxIndex = Math.min(startingIndex + 500, dataArray.length);</code> because now you have a lot of calls to <code>func</code> with <code>undefined</code> as a <code>document</code> value</li>
<li><code>await</code> requires <code>runFunctionInBatchesOf500</code> to be <code>async</code> (it is missing now)</li>
<li>I would use <code>Array.prototype.slice()</code> to create batches as an array, and then use <code>forEach</code> on each slice/batch</li>
<li><code>const doc = getDocFromPath(key);</code> &lt;- where does <code>key</code> come from, an evil global?</li>
</ul>
<p>I personally would be mildly evil by adjusting the Array prototype so that I can keep chaining, FP style;</p>
<pre><code>Array.prototype.mapSlice = function arrrayMapSlice(n){
  //Just return `this` if we get a non-sensical parameter
  if(isNaN(n) || n &lt;= 0){
    return this;
  }
  let start = 0, out = [];
  while(start &lt; this.length){
    out.push(this.slice(start, start+=n));
  }
  return out;
} 

async function runBatches(list, f, batchSize){
   batchSize = batchSize || 500;
   list.mapSlice(batchSize).forEach(batch =&gt; {
     const firestoreBatch = this.firestore.batch();
     batch.forEach(document =&gt; f(document, firestoreBatch ));
   });
   await batch.commit();
}
</code></pre>
    </div>