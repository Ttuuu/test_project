<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The small things</h3>

<pre><code>    s &lt;- get
    let candidates = fst s
    let visited = snd s
</code></pre>

<p>could be simplified to</p>

<pre><code>    (candidates, visited) &lt;- get
</code></pre>

<p>(It is technically a little bit stricter but it's not a problem because you don't rely on laziness here.)</p>

<pre><code>    let ret = blah in
    ret
</code></pre>

<p>is equivalent to</p>

<pre><code>    blah
</code></pre>

<p>At the end of <code>dfsGetNext</code> you return either <code>0</code> or <code>1</code>, which is strange because the return type is <code>Vertex</code>, and although it is a synonym for <code>Int</code> (so this type checks), <code>0</code> and <code>1</code> don't look like vertices.</p>

<p>My guess is that you intended either:</p>

<ul>
<li>to return a boolean to indicate whether the DFS ended, so <code>Bool</code> would be a more appropriate type;</li>
<li>to return the visited vertex, so, rather than returning dummy sentinel values, <code>Maybe Vertex</code> would be a more appropriate type.</li>
</ul>

<p>Assuming that <code>0</code> and <code>1</code> are meant to be booleans, and with the other changes above, we get:</p>

<pre class="lang-hs prettyprint-override"><code>-- Also isolating the monad, and applying it to the result type in the function instead
type DFS = ReaderT Env (StateT DFSState Identity)

dfsGetNext :: DFS Bool
dfsGetNext = do
    graph &lt;- ask
    (candidates, visited) &lt;- get
    case candidates of
       []     -&gt; return False
       (x:xs) -&gt; if elem x visited 
                 then put (xs, visited) &gt;&gt; return True
                 else put ((getNeighbors x graph) ++ xs, visited ++ [x]) &gt;&gt; return True
</code></pre>

<h3>Getting fancy</h3>

<p>There's a more direct implementation of DFS. To do a DFS starting from a vertex <code>v</code>:</p>

<ol>
<li>If <code>v</code> has already been visited, stop; otherwise...</li>
<li>Visit <code>v</code></li>
<li>Recursively run a DFS from each neighbor of <code>v</code></li>
</ol>

<p>In particular, this description doesn't require you to explicitly keep track of "pending candidate vertices", nor to iterate a "single step" function like <code>dfsGetNext</code>; the DFS is directly defined.</p>

<pre class="lang-hs prettyprint-override"><code>-- The state now only contains the visited vertices, not the candidates (which is implicit in the recursive structure of dfsFrom)
type DFS = ReaderT Graph (State Visited)

dfsFrom :: Vertex -&gt; DFS ()
dfsFrom v = do
  visited &lt;- get
  if v `elem` visited then                     -- 1
    pure ()
  else do
    put (visited ++ [v])                       -- 2
    graph &lt;- ask
    let neighbors = getNeighbors v graph
    for_ neighbors dfsFrom                     -- 3
</code></pre>

<p>Now you can "run" that DFS, interpreting it as a function as follows:</p>

<pre class="lang-hs prettyprint-override"><code>-- dfs from 0
dfs :: Graph -&gt; [Vertex]
dfs graph = dfsFrom 0 `runReaderT` graph `execState` []
</code></pre>

<p>Your "single step" version does have one distinguishing feature, which is that you can easily interrupt the DFS at any time to inspect the state for example. But you can also do that with the recursive version, by passing a function (<code>visit</code> below) that will be called when visiting a node. Clients of the DFS are free to define it however they wish.</p>

<p>It's also useful to generalize the <code>DFS</code> monad to support additional effects relevant to users rather than to the DFS itself. This is straightforward since you're already using monad transformers, by changing the base monad from <code>Identity</code> to something else. Here I chose <code>IO</code> for simplicity and concreteness, but it might as well be a type parameter <code>m</code>.</p>

<pre class="lang-hs prettyprint-override"><code>type DFSIO = ReaderT Graph (StateT Visited IO)

dfsFromIO :: (Vertex -&gt; DFSIO ()) -&gt; Vertex -&gt; DFSIO ()
dfsFromIO visit v = do
  visited &lt;- get
  if v `elem` visited then
    pure ()
  else do
    visit v
    put (visited ++ [v])
    graph &lt;- ask
    let neighbors = getNeighbors v graph
    for_ neighbors (dfsFromIO visit)
</code></pre>

<p>Another possibility is to call <code>visit</code> at the very start of the function, before checking whether the vertex was visited, or at the very end, on the neighboring vertices, where the function could also have access to the cost of the edges being crossed.</p>

<p>Running this new version <code>dfsFromIO</code> is as straightforward as running <code>dfsFrom</code> (only replacing <code>execState</code> with <code>execStateT</code> since the base monad is no longer <code>Identity</code>):</p>

<pre class="lang-hs prettyprint-override"><code>-- dfs from 0
dfsIO :: (Vertex -&gt; DFSIO ()) -&gt; Graph -&gt; IO [Vertex]
dfsIO visit graph = dfsFromIO visit 0 `runReaderT` graph `execStateT` []
</code></pre>

<p>For example you can print every visited vertex as follows:</p>

<pre class="lang-hs prettyprint-override"><code>main :: IO ()
main = void (dfsIO (\v -&gt; liftIO (print v)))
</code></pre>

<hr>

<p>Full gist: <a href="https://gist.github.com/Lysxia/4733f8d670c84e5b886f74d2d106d1f5" rel="nofollow noreferrer">https://gist.github.com/Lysxia/4733f8d670c84e5b886f74d2d106d1f5</a></p>
    </div>