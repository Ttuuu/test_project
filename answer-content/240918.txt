<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One issue to consider: what if an element in the array is 0, and thus falsey? Then <code>if (prev &amp;&amp;</code> will not be fulfilled:</p>

<pre><code>console.log(hasConsecutiveNums([-1, 0, 1], 3)) // false... oops
</code></pre>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function hasConsecutiveNums(array, N) {
  if (array.length &lt; N) return false;
  if (N === 0) return true;
  const sortedArray = array.slice().sort((a, b) =&gt; a - b);
  let count = 0;
  let prev = null;
  for (const num of sortedArray) {
    if (prev &amp;&amp; num === prev + 1) {
      count++;
    } else {
      count = 1;
    }
    if (count === N) return true;
    prev = num;
  }

  return false;
}

console.log(hasConsecutiveNums([-1, 0, 1], 3)) // false... oops</code></pre>
</div>
</div>


<p>Another tweak to make the code a bit more elegant would be to assign <code>prev</code> to the first element of the array first, and initialize <code>count</code> to <code>1</code>, thus starting comparison on the <em>second</em> element rather than on the first, avoiding the need to compare against <code>null</code>.</p>

<p>With this method, you also need to return <code>true</code> immediately if the array's length is only 1, like the other answer recommends, otherwise there won't be any iterations within which <code>return true</code> could be reached:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function hasConsecutiveNums(array, N) {
  if (array.length &lt; N) return false;
  if (N &lt;= 1) return true;
  const sortedArray = array.slice().sort((a, b) =&gt; a - b);
  let prev = sortedArray.shift();
  let count = 1; // first element of the array is already in prev
  for (const num of sortedArray) {
    if (num === prev + 1) {
      count++;
    } else {
      count = 1;
    }
    if (count === N) return true;
    prev = num;
  }

  return false;
}

console.log(hasConsecutiveNums([1, 4, 5, 6], 3)) // true
console.log(hasConsecutiveNums([1, 4, 5, 6], 4)) // false
console.log(hasConsecutiveNums([-1, 0, 1], 3)) // true</code></pre>
</div>
</div>


<p>If, as the comment notes, you'd want <code>[1, 2, 2, 3]</code> to return <code>true</code>, de-duplicate the numbers with a Set:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function hasConsecutiveNums(array, N) {
  if (array.length &lt; N) return false;
  if (N &lt;= 1) return true;
  const sortedArray = [...new Set(array.slice().sort((a, b) =&gt; a - b))];
  let prev = sortedArray.shift();
  let count = 1; // first element of the array is already in prev
  for (const num of sortedArray) {
    if (num === prev + 1) {
      count++;
    } else {
      count = 1;
    }
    if (count === N) return true;
    prev = num;
  }

  return false;
}

console.log(hasConsecutiveNums([1, 4, 5, 6], 3)) // true
console.log(hasConsecutiveNums([1, 4, 5, 6], 4)) // false
console.log(hasConsecutiveNums([-1, 0, 1], 3)) // true
console.log(hasConsecutiveNums([1, 2, 2, 3], 3)) // true</code></pre>
</div>
</div>

    </div>