<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>you can remove main method and use <code>extends App</code>. It's safe 3 line of code.</li>
<li>replace <code>Array('1', '2', '3', '4', '5', '6', '7', '8', '9')</code> on <code>('1' to '9').toArray</code></li>
<li>I prefer always use type annotation if it is not clear. E.g.: <code>val nextMove: Int = readMove(board)</code></li>
<li>use Intellij autoformat (ctrl + alt + L)</li>
<li>it is good idea to say user what is wrong with his input before prompt new one</li>
<li><code>[Char].toString.matches("[1-9]")</code> may be replaced on <code>[Char].isDigit</code></li>
<li><strong>don't use return keyword</strong>, especially in <code>foreach</code>, <code>map</code> and so on. It is not what you want, at least in this cases. <code>foreach</code> + <code>forall</code> + <code>return</code> should be replaced on <code>contains</code> + <code>forall</code> or something.</li>
<li>usually <code>list map f</code> used only for non-chained calls, but not for <code>list map m filter filter collect g</code>, because it is unclear for reader. UPDATE: also this syntax used for symbol-named functions, like <code>+</code>, <code>::</code>, <code>!</code> (in akka).</li>
<li>you can use special type for positive digit, for example, <code>case class PosDigit(v: Int) {require(v &gt;= 0 &amp;&amp; v &lt;= 9, s"invalide positive digit: $v")}</code></li>
<li>there is no essential reason to pass board as argument. Commonly if argument is passed, it is not changed. In your code it is not.</li>
</ol>
<p>UPDATE for 10. In functional programming the clear way is to pass immutable collection to function and return new one if you need. It is programming without side effects. In OOP there is way to use mutable collection of class (or class's object). Scala both OOP and FP language.</p>
<p>Sorry for my English.</p>
    </div>