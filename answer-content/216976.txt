<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is one using a while loop and simple subtaction:</p>

<pre><code>$packSizes = [250,500,1000,2000,5000];
$number = 3000;              

function optimizePacks($packSizes,$number)
{
    //insure packs are in decending order
    rsort($packSizes);
    //create a default array
    $results = array_fill_keys($packSizes, 0);

    while($number &gt; 0){
        echo "---------- $number ----------\n";

        foreach($packSizes as $size){
            if($size &lt;= $number) break;
        }
        ++$results[$size];
        $number -= $size;
    }
    return $results;
}

$tests = [
    1,      // (1 x 250)
    251,    // (1 x 500)
    501,    // (1 x 500 and 1 x 250)
    12001   // (2 x 5000 and 1 x 2000 and 1 x 250)

];

foreach($tests as $test) print_r(optimizePacks($packSizes,$test));
</code></pre>

<p>Output</p>

<pre><code>---------- 1 ----------
Array
(
    [5000] =&gt; 0
    [2000] =&gt; 0
    [1000] =&gt; 0
    [500] =&gt; 0
    [250] =&gt; 1
)
---------- 251 ----------
---------- 1 ----------
Array
(
    [5000] =&gt; 0
    [2000] =&gt; 0
    [1000] =&gt; 0
    [500] =&gt; 0
    [250] =&gt; 2 //deviates from your example output (see below)
)
---------- 501 ----------
---------- 1 ----------
Array
(
    [5000] =&gt; 0
    [2000] =&gt; 0
    [1000] =&gt; 0
    [500] =&gt; 1
    [250] =&gt; 1
)
---------- 12001 ----------
---------- 7001 ----------
---------- 2001 ----------
---------- 1 ----------
Array
(
    [5000] =&gt; 2
    [2000] =&gt; 1
    [1000] =&gt; 0
    [500] =&gt; 0
    [250] =&gt; 1
)
</code></pre>

<p><a href="http://sandbox.onlinephpfunctions.com/code/0ad57a353b8ba28e6673a82e47791eeb76be9dc6" rel="nofollow noreferrer">Sandbox</a></p>

<p>These 2 examples are at odds with each other</p>

<pre><code>251,    // (1 x 500)
501,    // (1 x 500 and 1 x 250)
</code></pre>

<p>The first one you make one incomplete <code>500</code> part box</p>

<p>The second one you make a 500 (complete box) and an extra 250 with one part. </p>

<p>So the question is, why is the first one only 1 box as it should be 250 x 2 boxes. Conversely why is the second 2 boxes when it could be 1000 x 1 boxes.</p>

<p>So either you fit them in the smallest box that can contain them with the extra overflowing. Or you put them in complete boxes and put the remainder in the smallest box.</p>

<p><strong>UPDATE</strong></p>

<pre><code>If you want the reverse I came up with this:

$packSizes = [250,500,1000,2000,5000];

function optimizePacks($packSizes,$number)
{
    //insure packs are in ascending order
    sort($packSizes);
    //create a default array
    $results = array_fill_keys($packSizes, 0);

    while($number &gt; 0){
        echo "---------- $number ----------\n";

        foreach($packSizes as $size){
            if($size &gt;= $number) break;
        }

        ++$results[$size];
        $number -= $size;
    }
    return $results;
}

$tests = [
    1,      // (1 x 250)
    251,    // (1 x 500)
    501,    // (1 x 500 and 1 x 250)
    12001   // (2 x 5000 and 1 x 2000 and 1 x 250)

];

foreach($tests as $test) print_r(optimizePacks($packSizes,$test));
</code></pre>

<p>Output</p>

<pre><code>---------- 1 ----------
Array
(
    [250] =&gt; 1
    [500] =&gt; 0
    [1000] =&gt; 0
    [2000] =&gt; 0
    [5000] =&gt; 0
)
---------- 251 ----------
Array
(
    [250] =&gt; 0
    [500] =&gt; 1
    [1000] =&gt; 0
    [2000] =&gt; 0
    [5000] =&gt; 0
)
---------- 501 ----------
Array
(
    [250] =&gt; 0
    [500] =&gt; 0
    [1000] =&gt; 1  //deviates from your example output
    [2000] =&gt; 0
    [5000] =&gt; 0
)
---------- 12001 ----------
---------- 7001 ----------
---------- 2001 ----------
Array
(
    [250] =&gt; 0
    [500] =&gt; 0
    [1000] =&gt; 0
    [2000] =&gt; 0
    [5000] =&gt; 3  //deviates from your example output
)
</code></pre>

<p>This also points out how the last example is at odds with this way.  Which is to fit the most parts in the smallest size box.  This may be a bigger box but it will not overflow.  For example it wont pick 5000 for 1 part.</p>

<p>I used a pretty nice trick with the foreach in the above code, that let me simplify it greatly.  </p>

<p>This only works if you sort it ASC, because if we don't find a box that can hold the full number, the last iteration leaves <code>$size</code> at the Max value in the array (its the last one after all).  Which is exactly what we want because then we subtract that from <code>$number</code> and repeat the process.</p>

<p>However if we do find a box that can contain all the parts, we simply exit (break) the foreach loop.  This will be the smallest box that can fit all the parts (naturally).  And we also subtract this which will leave <code>$number</code> at <code>&lt;= 0</code> and break the while loop which completes the function and returns the results.</p>

<p><a href="http://sandbox.onlinephpfunctions.com/code/819b718d62c299823a9ceff8be4137ede5ed187a" rel="nofollow noreferrer">Sandbox</a></p>

<p>If you really want them (the sizes, compare the 2 results in my examples) in the other order, we can either send them in that order and build the default first, or sort one way build the default then reverse the array (which should be faster then sort).</p>

<pre><code>function optimizePacks($packSizes,$number)
{
    //insure packs are in decending order
    rsort($packSizes);
    //create a default array (baking in the order)
    $results = array_fill_keys($packSizes, 0);
    //flip the order
    $packSizes = array_reverse($packSizes);


    while($number &gt; 0){
</code></pre>

<p><a href="http://sandbox.onlinephpfunctions.com/code/ca83f122677c0847861bab94cd77b0a1d7928b31" rel="nofollow noreferrer">Sandbox</a></p>

<p><strong>Summery</strong></p>

<p>Essentially you can't have both of these (or your mixed examples) without a whole lot of conditional statements that would violate using a dynamic array of sizes.  You could do that with fixed sizes and special if conditions, for example.  This is because your inconsistently applying your rules.</p>

<p>Hope it helps, I get some weird enjoyment out of figuring this stuff out... lol</p>
    </div>