<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have re-invented the wheel which makes for a rather poor answer to an interview question (Academic context would be different).  A good interview answer emphasises knowledge of the inbuilt  capabilities balanced with an appreciation of development priorities.  Simple code that uses inbuilt libraries is quick to code, robust, widely understandable and maintainable.  I would expect to see something like:</p>

<pre><code>log.info(new String("/A A/B B/C C").replaceAll(" ", "%20"));
</code></pre>

<p>Even better would be the following proving an appreciation of Test driven development:</p>

<pre><code>@Test
public void test() {
    final String actualResult = new String("/A /B /C /D ").replaceAll(" ", "%20");
    assertEquals("/A%20/B%20/C%20/D%20", actualResult);
}
</code></pre>

<p>Otherwise your coding practice is reasonable.</p>

<ul>
<li>You have used Java naming conventions. +1 </li>
<li>You have mostly named for the problem domain. +1 </li>
<li>Your code is readable. +1 </li>
</ul>

<p><strong>Expanding on Interview aspect</strong>
The ability to stick closely to the requirements is an important skill in a developer but should not mean blindly following them.  The specification is a <em>reflection</em> of requirements.  Requirements shouldn't specify implementation details and may be in error.  Spotting bogus things and having the <em>strength of character</em> to call them out in a <em>constructive manner</em> are important skills in a developer.  A skilled interviewer can also use coding questions to test your reaction and behaviour as well as your technical/coding skills. As an interviewer I will often ask the impossible or unreasonable question.  It is not there to trick you or catch you out, it is to test how you will react to something you will encounter in reality.</p>
    </div>