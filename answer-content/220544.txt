<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to codereview.se and thanks for sharing your code.</p>

<h2>Constructors</h2>

<p>As Mentioned by @SharonBenAsher a constructor should only set up the state (instance variables) of the instance.</p>

<p>This implicitly excludes calling any methods on the arguments passed and the use of the <code>new</code> keyword. 
A constructor should only have assignments of parameters to instance variables.</p>

<p>The dependencies should be instantiates <em>before</em> calling the constructor.
But this only applies for <em>dependencies</em>, that is: classes that provide <em>additional logic</em>.
The class <code>ArrayList</code> does not apply to that.
It is a <em>data structure</em> something to hold and organize <em>data</em>.
But it should be created at the variable declaration:</p>

<pre><code>public class Stack 
{
    Scanner scan;
    public ArrayList&lt;String&gt; stack = new ArrayList&lt;String&gt;();

    public Stack(Scanner scan) 
    {
        this.scan = scan; // I also doubt that the scanner is needed here at all.
    }
</code></pre>

<p>When following the other answers suggestions (extract user IO out of this class, explicitly call the method doing the logic) both of your classes en up with <em>default constructors</em> (having no arguments and doing nothing) which you don't even need to write at all.</p>

<h2>visibility scopes</h2>

<p>Most of your instance variables have no visibility key word which makes them <code>package private</code> (that is: accessible by other classes in same package) or are declared to be <code>public</code>.
This violates the <em>information hiding/encapsulation</em> paradigm of object oriented programming.
Always restrict the visibility to the least necessary scope. 
For instance variables should almost ever be declared <code>private</code> (and there should be no <em>getter/setter</em>).</p>

<p>The same applies to methods. 
A class should have one <code>public</code> method as <em>entry point</em> for a service.
This methods may call other methods in the same class but this other methods should be <code>private</code>.</p>

<h2>avoid state</h2>

<p>Your PostfixCalculator uses an <em>instance variable</em> (<code>infixNotation</code>) to accumulate the result. 
This is called a <em>mutable state</em>.
Mutable state limits the re-usability of an object.
That is: each time you need an object of this class you have to create a new instance (using the <code>new</code> operator) instead of passing an existing instance around.</p>

<h2>do not initialize with <code>null</code></h2>

<p>You initialize your instance variables with <code>null</code>.
This prevents you from using the <code>final</code> key word on them which would indicate to you (and the compiler) that this variable will never change (and therefore) never be <code>null</code> which in turn prevents you from doing <em>Null Checks</em> all over the code.</p>

<h2>code duplication</h2>

<p>Your code is quite "algorithm driven". That resulted in lots of code duplication like this:</p>

<blockquote>
<pre><code>while(!stk.isEmpty())  
{
    if(stk.peek().equals("(")) 
    {
        stk.pop();
    }
    else if (stk.peek().equals(")")) 
    {
        stk.pop();
    }
    else 
    {
        postfixNotation = postfixNotation + stk.peek();
        stk.pop();
    }
}
</code></pre>
</blockquote>

<p>A little more "OO-ish" approach could look like this:</p>

<pre><code>while(!stk.isEmpty()) 
{
    if(!Arrays.asList( "(" , ")" ).contains(stk.peek())
    {
        postfixNotation = postfixNotation + stk.peek();
    }
    stk.pop();
}
</code></pre>

<p>Since Java after all is an <em>object oriented</em> you should start looking for oo-Approaches to your problems.</p>

<h2>Naming</h2>

<p>Finding good names is the hardest part in programming. So always take your time to think carefully of your identifier names.</p>

<h3>Choose your names from the problem domain</h3>

<p>You have some identifiers which are named after their technical implementation like this:</p>

<pre><code> Scanner scan = null;
 Stack stk = null;
</code></pre>

<p>They should have names that reveal their task within your application. </p>

<pre><code>Scanner userInput
Stack notationElements
</code></pre>

<h3>Avoid abbreviations</h3>

<p>In your code you use some abbreviations such as <code>stk</code>. Although this abbreviation makes sense to you (now) anyone reading your code being not familiar with the problem (like me) has a hard time finding out what this means. 
Especially for me as a German native the abbreviation <em>Stk</em> stands for <em>St√ºck</em> meaning <em>piece</em> or <em>item</em>. </p>

<p>If you do this to save typing work: remember that you way more often read your code than actually typing something. Also for Java you have good IDE support with code completion so that you most likely type a long identifier only once and later on select it from the IDEs code completion proposals.</p>
    </div>