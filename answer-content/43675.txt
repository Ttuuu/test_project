<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For what its worth, here is another algorithm. It tries to find the largest palindrome by searching for the largest possible palindrome first, and if not found, gradually for smaller ones. Not tested for speed but should be significantly faster.</p>

<pre><code>static string FindLargestPalindrome(string data, int minLength) {
    int length = data.Length;

    // test from max length to min length
    for (int size = length; size &gt;= minLength; --size)
        // establish attempt bounds and test for the first palindrome substring of given size
        for (int attemptIdx = 0, attemptIdxEnd = length - size + 1; attemptIdx &lt; attemptIdxEnd; ++attemptIdx)
            if (IsPalindrome(data, attemptIdx, size))
                return data.Substring(attemptIdx, size);

    return null;
}

static bool IsPalindrome(string data, int idxStart, int count) {
    int idxEnd = idxStart+count-1;

    while (idxStart &lt; idxEnd &amp;&amp; data[idxStart] == data[idxEnd]) {
        ++idxStart;
        --idxEnd;
    }

    return idxStart &gt;= idxEnd;
}
</code></pre>
    </div>