<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>But why?</h1>

<p>This is a clever trick but is terrible code. </p>

<p>Bad naming, poor use of appropriate declaration types <code>const</code>, <code>var</code> and <code>let</code>, full of redundant code, full of bugs, inappropriate use of logic operators (Strict equality rather than <code>==</code>) and so long winded it looks like it's deliberately obfuscated.</p>

<h2>Redundant</h2>

<ul>
<li><code>strict = Boolean(strict)</code> this is in a function only called from within. You only ever pass a boolean.</li>
<li>You create a <code>revocable</code> proxy on the object <code>global</code> at the end of the function you return the <code>revoke</code> function as the third item in an array. Yet the calling function ignores the revoke function, not even keeping a reference. The function is thus never used. So why use a revocable proxy in the first place, and why return it when its not used.</li>
<li>Each time you call <code>deburr</code> you create a new string, eg <code>deburr(String(property))</code> If its that important why are you not doing it within the function <code>deburr</code></li>
<li>No reason to use the name <code>toggle-strict</code>. It forces you to use bracket notation for no reason. You could have used <code>toggleStrict</code></li>
<li>Use <code>Object.defineProperties(</code> when creating several properties, rather than many lines of <code>defineProperty</code></li>
<li>Redefining a function name is redundant. <code>Object.definePropertie(togglestrict, "setScopeWithEval", { value: function setScopeWithEval(func) {</code> the second function name is not needed as yoiu do not use it at any point.</li>
<li>I do not understand why you assign <code>togglestrict.toString</code> to itself??? You effectively do <code>togglestrict.toString.toString = togglestrict.toString;</code> Is here a reason??</li>
<li>The whole last section is just so strange, I can not workout the reasoning. It can be replaced with just a few lines. See Example A</li>
<li>The loop iterating the chunks is duplicating the string, when only the global name and the directive "use strict" change. See Example B</li>
</ul>

<h2>Bugs.</h2>

<ul>
<li>This code will not work in a module as modules are automatically in strict mode.</li>
<li>This code will not work within a function, or javascript that is in strict mode as <code>with</code> is prohibited in strict mode.</li>
<li>The <code>set</code> handler on the global proxy needs to return <code>true</code> or will throw an error in strict mode. eg <code>toggleableStrict("b = 2;'toggle strict';b=false;'toggle strict';b=false;")</code></li>
<li>When not in strict mode the <code>set</code> handler incorrectly sets false to <code>undefined</code>  <code>toggleableStrict("b = 2;'toggle strict';b=false;console.log('b: '+b)")()</code>  output <code>b: undefined</code></li>
<li>Throws syntax error for <code>toggleableStrict("(()=&gt;{'toggle strict';console.log('hi there');})()");</code></li>
</ul>

<p>There are plenty more bugs, but you get the picture. I get the feeling you have not done any form of rigorous testing on this code.</p>

<h2>Problems.</h2>

<ol>
<li><p>Testing the code I found it hard to know if I was in strict mode or not. As it is toggled, it easy to lose track of just how many toggles had been performed.    </p></li>
<li><p>Not for development. It is next to useless as a development tool as you lose the ability to trace errors effectively. I can see no reason why someone would use this in release code.</p></li>
<li><p>Unmanageable. This is so poorly written that it was next to impossible to work out what it was doing. In fact I gave up on what <code>deburr</code> does, and after seeing the proxy was a mess I did not bother going further into that. I am sure there are many more issues associated.</p></li>
</ol>

<h2>Examples</h2>

<p>Examples as referenced above</p>

<h3>Example A</h3>

<pre><code>// you had...
let togglestrict = {
    ['toggle-strict']() {
        func.bind(firstProxy)(...args, ...arguments)
    }
} ["toggle-strict"];
Object.defineProperty(togglestrict, "setScopeWithEval", {
    value: function setScopeWithEval(func) {
        scope_evals.push(func)
    }
})
Object.defineProperty(togglestrict, "toString", {
    value: function toString() { return `function ${this.name}() { [shim code] }` }
})
Object.defineProperty(togglestrict.toString, "toString", {
    value: togglestrict.toString
})
return togglestrict;

//======================================================================================
// Can be writen as
return Object.defineProperties(() =&gt; { func.bind(firstProxy)(...args, ...arguments) }, {
    setScopeWithEval : {value : (func) =&gt; {scope_evals.push(func)}},
    toString : {value : () =&gt; `function toggle-strict() { [shim code] }`},
});    
</code></pre>

<h3>Example B</h3>

<pre><code>// you had
for (var i = 0; i &lt; chunks.length; i++) {
    if (i % 2 == 0) {
        chunks[i] = `
            ;with(_a) {
                this.addGlobalSource((() =&gt; {
                    "use strict";
                    ${chunks[i]}
                    return (_, no_result) =&gt; {
                        try{
                            return eval(_) || no_result;
                        } catch(e) {
                            return no_result
                        }
                    }
                })())
            }`
    } else {
        chunks[i] = `
            ;with(_b) {
                this.addGlobalSource((() =&gt; {
                    ${chunks[i]}
                    return (_, no_result) =&gt; {
                        try{
                            return eval(_) || no_result;
                        } catch(e) {
                            return no_result
                        }
                    }
                })())
            }`
    }
}

//======================================================================================
// can be
for (let i = 0; i &lt; chunks.length; i++) {
    chunks[i] = `
        ;with(_${i % 2 ? "b" : "a"}) {
            this.addGlobalSource((() =&gt; {
                ${i % 2 ? "" : "'use strict';"}
                ${chunks[i]}
                return (_, no_result) =&gt; {
                    try{
                        return eval(_) || no_result;
                    } catch(e) {
                        return no_result
                    }
                }
            })())
        }`;

}
</code></pre>
    </div>