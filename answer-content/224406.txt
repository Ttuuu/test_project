<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you only want to enumerate <code>source</code> once, then you'll have to cache it somehow. Either by materializing it immediately, as you do, or whenever the first group is enumerated, but that's more complicated.</p>

<p>If you don't mind duplicate entries in your groups and throwing on duplicate labels, then your code can be simplified to the following:</p>

<pre><code>public static IDictionary&lt;string, IEnumerable&lt;IGrouping&lt;object, T&gt;&gt;&gt; MultiGroupBy&lt;T&gt;(
    this IEnumerable&lt;T&gt; source,
    params (string label, Func&lt;T, object&gt; keySelector)[] groupings)
{
    if (source == null) throw new ArgumentNullException(nameof(source));
    if (groupings == null) throw new ArgumentNullException(nameof(groupings));

    var materializedSource = source.ToArray();
    return groupings.ToDictionary(
        grouping =&gt; grouping.label,
        grouping =&gt; materializedSource.GroupBy(grouping.keySelector));
}
</code></pre>

<p>This materializes <code>source</code> up-front, but each grouping is lazily evaluated. Some quick enumeration tests with randomly generated strings show a roughly 40% speed improvement. I haven't measured memory consumption, but I expect that to be a bit higher due to the extra references/values stored in <code>materializedSource</code>.</p>

<p>I suspect the main reason for the speed difference is that your code performs a lookup into <code>results</code> for every item/grouping combination, something that separate <code>GroupBy</code> calls don't need to do.</p>

<hr>

<p>Other notes:</p>

<ul>
<li>That <code>using GetEnumerator/while MoveNext</code> construction can be simplified to a <code>foreach</code> loop.</li>
<li>You do not guard against duplicate labels, so you can end up with mixed results (and even mixed key types).</li>
</ul>
    </div>