<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you did a pretty good job overall.</p>

<p>You can simplify your code by making <code>CounterService.make</code> not return an effect since you only call <code>ZIO.succeed</code> in it. <code>make</code> can return directly a <code>CounterService</code> and that way no need to call <code>unsafeRun</code> in your main app.</p>

<p>I also think that the <code>HttpRoutes</code> class is not really necessary since it only has a single method <code>counterRoutes</code> that you call once. You could just put this function inside an object and ditch the intermediate class. The values that are already implicit (execution context, runtime) can be passed implicitly as well.</p>

<pre class="lang-scala prettyprint-override"><code>def counterRoutes(interpreter: GraphQLInterpreter[zio.ZEnv, _])(
  implicit ec: ExecutionContext, runtime: Runtime[zio.ZEnv]): Route = {
    path("graphql") {
      AkkaHttpAdapter.makeHttpService(interpreter)
    }
  }

routes.counterRoutes(graphQl.interpreter)
</code></pre>
    </div>