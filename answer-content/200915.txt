<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Your leading whitespace is much smaller than is typical. Prefer 4 spaces for a level of indent.</p></li>
<li><p>In java we typically put the curly brace <code>{</code> on the same line. If you insist on doing it on a new line, do it consistently (<code>main</code>) and don't add a blank line of whitespace before the curly brace.</p></li>
<li><p>Variable names need to be clear and descriptive. <code>str</code> is meaningless - perhaps <code>word</code>? Likewise, <code>firstVow</code> is confusing, since nobody's getting married. Surely you mean <code>firstVowel</code>. Extra characters come at no charge, so if they make the variable name more descriptive, use them.</p></li>
<li><p>Closeable resources need to be closed <em>always</em>. Use either <code>try-with-resources</code> or a <code>finally</code> block to close open resources. Otherwise an exception in the middle of execution will prevent the resource from being closed.</p></li>
<li><p>Variables should be defined in the most constraining scope possible. All of your variables can and should be method variables, defined at the time of first need.</p></li>
<li><p>You repeat code to see if a character is a vowel. Using either a method so you're only writing the code once or a Set to hold all vowels would be better.</p></li>
<li><p><code>for</code> loops would be easier to read than <code>while</code> loops, since you need all three statement anyway.</p></li>
<li><p>Your last block of work (word starts with a consonant) assumes there'll eventually be a vowel in the word.</p></li>
<li><p>It's generally preferable that methods return a value rather than performing direct IO themselves. If you don't follow that, the pattern you used for the first two blocks (multiple <code>System.out.print</code> calls) is much easier to read than the one big print with everything mushed together. If you do return a value, using a <code>StringBuilder</code> might be a better idea than using string concatenation.</p></li>
<li><p>In several places you store a character and use to that with an <code>indexOf</code> when the index is just <code>i</code> or <code>0</code>. You should simplify that down.</p></li>
<li><p>In a couple of places you do <code>if (condition) { } else if (!condition) { }</code>. It's OK to just do <code>if (condition) { } else { }</code></p></li>
</ul>
    </div>