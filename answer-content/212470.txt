<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CR, nice challenge</p>

<p>A few comments about the code</p>

<ul>
<li><p>Many unnecessary conversion</p>

<p>Python is a duck typed language, if it talks like a duck, walks like a duck... it must be a duck!</p>

<p>This means that</p>

<blockquote>
<pre><code>p ^= int(x)
</code></pre>
</blockquote>

<p>Here <code>x</code> is already an <code>int</code>, same goes for the <code>str</code> conversion later</p></li>
<li><p>Use <code>_</code> variable names for variable you don't use</p>

<blockquote>
  <p><code>for i in range(int(t)):</code></p>
</blockquote>

<p>Replace the <code>i</code> with <code>_</code></p></li>
<li><p>You could return directly</p>

<blockquote>
<pre><code>if p % 2 == 0:
    return "Even"
else:
    return "Odd"
</code></pre>
</blockquote>

<p>Instead, you could do which uses a ternary operator</p>

<pre><code>return "Even" if p % 2 == 0 else "Odd"
</code></pre></li>
<li><p>As for the speedup</p>

<p>I've used <a href="https://stackoverflow.com/questions/10670379/find-xor-of-all-numbers-in-a-given-range">this SO link</a> to inspire me, which does a way better job of explaining this then I could ever do</p>

<p>In short there is a trick to get the XOR'd product of a certain range</p>

<p>Using the method from the link, I get a massive speedup,</p>

<p>For these timings: <code>range(1, 1000)</code></p>

<pre><code>Bitmagic:  0.023904799999999997
OP: 2.2717274
</code></pre></li>
</ul>

<h1>Code</h1>

<pre><code># https://stackoverflow.com/questions/10670379/find-xor-of-all-numbers-in-a-given-range
def bit_magic(bound):
    magic = [bound, 1, bound + 1, 0]
    return magic[bound % 4]

def bitwise_check(lower_bound, upper_bound):
    p = bit_magic(upper_bound) ^ bit_magic(lower_bound - 1)
    return "Odd" if p &amp; 1 else "Even"

def main():
    n = int(input("Number of testcases: "))
    for _ in range(n):
        lower_bound, upper_bound = map(int, input().split())
        print(bitwise_check(lower_bound, upper_bound))

if __name__ == '__main__':
    main()
</code></pre>
    </div>