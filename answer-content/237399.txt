<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will have to agree that you do have a bit much <code>synchronized</code> blocks. All of them could go away if you would use for example <code>Collections.synchronizedList</code> around your <code>ArrayList</code> or <code>CopyOnWriteArrayList</code>.</p>

<p>Your <code>fun statistics()</code> could be an alternative constructor to <code>Statistics</code></p>

<p>A few other Kotlin-related tips:</p>

<pre><code>var max = if (count &gt; 0) liveTransactions.first().amount else BigDecimal(0)
</code></pre>

<p>Can be written as <code>liveTransactions.firstOrNull()?.amount ?: BigDecimal(0)</code></p>

<p>Actually:</p>

<pre><code>val amounts = liveTransactions.map {it.amount}
val max = amounts.fold(BigDecimal(0)) { a, b -&gt; a.max(b) }
val sum = amounts.fold(BigDecimal(0)) { a, b -&gt; a.plus(b) }
</code></pre>

<p>I would recommend against the <code>forEach</code>. Sure, you need to loop through the array three times, but right now you're doing one loop and three things in every iteration so effectively it has about the same performance.</p>

<hr>

<p><code>TransactionInFutureException</code> and <code>TransactionBeforeThreshold</code> are really just different versions of <code>IllegalArgumentException</code>, so I would not add my own exceptions here but just use the existing <code>IllegalArgumentException</code>.</p>
    </div>