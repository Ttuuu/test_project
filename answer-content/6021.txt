<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should not be using <a href="http://msdn.microsoft.com/en-us/library/system.random.aspx"><code>Random</code></a> to generate coupons. Your coupons will be somewhat predictable: if someone can see a few coupons (especially a few consecutive coupons), they will be able to reconstruct the seed and generate all the coupons. <code>Random</code> is ok for most numeric simulations and for some games, it's not good at all when you need to generate unpredictable values. Your coupons act like passwords; you need cryptographic-quality randomness. Fortunately, there is a crypto-quality random generator in the C# library: <a href="http://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider.aspx"><code>System.Security.Cryptography.RNGCryptoServiceProvider</code></a>.</p>

<p>This RNG returns bytes. There are 256 possible values in a byte. Your coupons can only use one of 62 characters, so you need to reject bytes that do not map to ASCII letters or digits.</p>

<p>Also, you should <a href="http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx">use <code>StringBuilder</code></a> when building a string chunk by chunk. Resolve it into a string when you've finished building it.</p>

<pre><code>StringBuilder coupon = new StringBuilder();
RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
byte[] rnd = new byte[1];
int n = 0;
while (n &lt; coupon.Length) {
    rng.GetBytes(rnd);
    char c = (char)rnd[0];
    if ((Char.IsDigit(c) || Char.IsLetter(c)) &amp;&amp; rnd[0] &lt; 127) {
        ++n;
        coupon.Append(rnd[0]);
    }
}
return coupon.ToString();
</code></pre>

<p>You can make the generation about 4 times faster by rejecting fewer values. Instead of accepting only the 62 values that map to the characters you want, divide by 4 to get one of 64 equiprobable values, and accept 62 of these (mapping them to the right characters) and reject 2.</p>

<pre><code>while (n &lt; coupon.Length) {
    rng.GetBytes(rnd);
    rnd[0] %= 64;
    if (rnd[0] &lt; 62) {
        ++n;
        coupon.Append((byte)((rnd[0] &lt;= 9 ? '0' : rnd[0] &lt;= 35 ? 'A' - 10 : 'a' - 36) + rnd[0]);
    }
}
</code></pre>
    </div>