<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><sub><i>Assuming you used python-3.x.</i></sub></p>

<hr>

<h1><code>Parser.peek</code></h1>

<p>This method can be simplified:</p>

<pre><code>def peek(self):
    if self.position + 1 == len(self.expression):
        return "EOF"
    return self.expression[self.position + 1]
</code></pre>

<p>The <code>else</code> is necessary, since the method will finish if the condition is satisfied.</p>

<hr>

<h1><code>Parser.advance</code></h1>

<p>This method can be improved, with the same reasons defined above:</p>

<pre><code>def advance(self):
    self.pretty_print_stack()
    if (self.position + 1) &gt;= len(self.expression):
        return self.tokens
    self.position += 1
</code></pre>

<hr>

<h1><code>Parser.parse_rparen</code></h1>

<p>This function can be improved:</p>

<pre><code>def parse_rparen(self):
    self.pretty_print_stack()
    if self.current() == ")":
        self.paren_state -= 1
        if self.paren_state &lt; 0:
            raise Exception(f"Imbalanced parentheses")
        self.advance()
    else:
        raise Exception(f"Expected right parentheses at position {self.position}")
</code></pre>

<p>Raising an <code>Exception</code> will stop the program (<a href="https://stackoverflow.com/questions/438894/how-do-i-stop-a-program-when-an-exception-is-raised-in-python">if you don't catch it</a>), so an <code>else</code> here is unnecessary.</p>

<hr>

<h1><code>Parser.is_paren</code></h1>

<p>This function can be simplified:</p>

<pre><code>def is_paren(self):
    return self.current() in "()"
</code></pre>

<p>This is the same as you had before, but more pythonic.</p>

<hr>

<h1><code>Parser.pretty_print_stack</code></h1>

<p>This function can be simplified:</p>

<pre><code>def pretty_print_stack(self):
    if self.verbose:
        pretty_printed = "".join([
            f"&gt;{char}&lt;" if idx == self.position else char for idx, char in enumerate(self.expression)
        ])
        current_frame = inspect.currentframe()
        caller_frame = inspect.getouterframes(current_frame, 2)
        print(f"{pretty_printed:&lt;20} Position {self.position}, in {caller_frame[1][3]}, paren_state: {self.paren_state} peek: {self.peek()}")
</code></pre>

<p>Utilizing <a href="https://www.geeksforgeeks.org/join-function-python/" rel="nofollow noreferrer"><code>.join()</code></a> and <a href="https://www.geeksforgeeks.org/generator-expressions/" rel="nofollow noreferrer">generator expressions</a>, you can reduce the amount of clutter code in this function.</p>

<hr>

<h1>Other Suggestions</h1>

<ul>
<li><a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">Documentation Strings</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">Type Hints</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">Method Naming</a></li>
</ul>
    </div>