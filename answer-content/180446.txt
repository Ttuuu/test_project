<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some of the things that may make your code better:</p>

<ul>
<li><p>you can pass the whole <code>newspaper</code> object into the format string and use a <em>multi-line string</em>:</p>

<pre><code>newspaper_string = """
    {newspaper.name} | Library of Congress No.: {newspaper.lccn} | {newspaper.place_of_publication}
    Published from {newspaper.start_year} to {newspaper.end_year} by {newspaper.publisher}
""".format(newspaper=newspaper_json)
</code></pre>

<p>Or, unpack the dictionary into keyword arguments:</p>

<pre><code>newspaper_string = """
    {name} | Library of Congress No.: {lccn} | {place_of_publication}
    Published from {start_year} to {end_year} by {publisher}
""".format(**newspaper_json)
</code></pre>

<p>Same goes for the <code>issues_string</code> string definition.</p></li>
<li><p>you can further improve that by using <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-strings</code></a> (Python 3.6+)</p></li>
<li>there is not a lot of reasoning behind not using the full words instead of abbreviated for the function names - for instance, <code>download_newspaper</code> instead of <code>dwnld_newspaper</code></li>
<li>the <code>parse_date()</code> is called twice per single iteration of the <code>for issue in get_json(url)['issues']</code> loop. You can do it once and save the result into a variable</li>
<li><p><code>validate_chronam_url</code> body may be simplified and improved to:</p>

<pre><code>domain_matches = 'chroniclingamerica.loc.gov/lccn/sn' in url
is_json = '.json' in url

return domain_matches and is_json
</code></pre></li>
<li><p>you can use <code>json.load(data, ...)</code> instead of <code>json.loads(data.read(), ...)</code></p></li>
<li><p>you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a> for the <code>assemble_issue</code> function:</p>

<pre><code>return ''.join(dwnld_page(page['url']) for page in get_json(url)['pages'])
</code></pre></li>
<li><p>you don't need a <code>return</code> in the <code>lccn_to_disk</code> function</p></li>
</ul>

<p>Some other thoughts:</p>

<ul>
<li>not sure that returning an exception instance in case things go wrong is a good idea. Either let them fail and propagate or handle - e.g. log the error and exit </li>
<li>consider using <code>requests</code> which would not only simplify the JSON response parsing part (there is a <code>response.json()</code> built-in method), but would also make the subsequent requests faster if you would <a href="http://docs.python-requests.org/en/master/user/advanced/#session-objects" rel="nofollow noreferrer">use a single session instance</a></li>
<li>it feels like having a <code>Newspaper</code> class might be a good idea. At least you would have a nice way to hide the string representation of a newspaper representation string inside the <code>__repr__</code> magic method</li>
<li>if performance is a concern, aside from <code>requests.Session</code>, you may improve on JSON parsing by switching to <code>ujson</code> parser </li>
</ul>
    </div>