<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general I think your code is pretty good.  It is a simple function, and it does not need to get fancy. </p>

<p>I do think one bit could be a bit cleaner.  I believe this format string:</p>

<pre><code>format_str = lambda v1, v2, p: f"{v1:0&gt;2}{p[0]}{v2:0&gt;2}{p[1]}"
format_str(d, h, ("d","h"))
</code></pre>

<p>would be simpler and therefore clearer as:     </p>

<pre><code>format_str = "{:0&gt;2}{}{:0&gt;2}{}"
format_str.format(d, 'd', h, 'h')
</code></pre>

<p>I think the <code>lambda</code> here is not helping readability.</p>

<h2>More Pythonic?</h2>

<p>For this simple case I don't think you really need anything more Pythonic.  But let's have some fun and illustrate using some Python libraries.</p>

<h3><code>datetime</code> library</h3>

<p>First thing to consider is maybe using standard Python lib for doing some of the date and time math. The library could build those values for you like so:</p>

<pre><code>import datetime as dt

# build a datetime from the number of seconds passed in
a_time = dt.datetime.utcfromtimestamp(seconds)

# get d, h, m, s
d, h, m, s = dt.timedelta(seconds=seconds).days, a_time.hour, a_time.minute, a_time.second
</code></pre>

<h3>Stacked ifs</h3>

<p>You asked specifically about the stacked ifs. In this case the ifs are not stacked very deep, so what follows is rather severe overkill :-)</p>

<p>Here is a general way to get the elements following the first non-zero element.</p>

<pre><code># get values fllowing first non zero value and their labels
non_zero = tuple(it.dropwhile(lambda x: not x[0], zip(values, 'dhms')))
</code></pre>

<p>Yikes, this is that an eyesore! But is does show how to get the elements following the first non-zero element in a general way, IE: No stacked ifs needed.</p>

<h3>How does that work?</h3>

<p>Let's break it down a bit.  Starting from the inside:</p>

<pre><code>zip(values, 'dhms')
</code></pre>

<p>This will produce a sequence of tuples looking something like:    </p>

<pre><code>[(0, 'd'), (1, 'h'), (1, 'm'), (5, 's')]
</code></pre>

<p>Note how the use of <code>zip()</code> allows the labels to be associated with their elements.  This allows the next step to keep the labels with their values.</p>

<p>Then:</p>

<pre><code>it.dropwhile(lambda x: not x[0], zip(values, 'dhms')))
</code></pre>

<p>uses <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer"><code>itertools.dropwhile()</code></a> to drop the leading tuples which start with <code>0</code>. Finally:        </p>

<pre><code>non_zero = tuple(it.dropwhile(lambda x: not x[0], zip(values, 'dhms')))
</code></pre>

<p>will produce a tuple so that we can get the number of elements to help produce the format string:</p>

<pre><code># a format string
format_str = "{:0&gt;2}{}{:0&gt;2}{}" if len(non_zero) &gt; 1 else " {:0&gt;2}sec"
</code></pre>

<p>And then bring it all together with:</p>

<pre><code># format the string
return format_str.format(*it.chain.from_iterable(non_zero or ((0, 0),)))
</code></pre>

<p><a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable()</code></a> flattens the <code>non_zero</code> tuple, to make the <code>format()</code> a little easier:      </p>

<h3>Complete recast function</h3>

<pre><code>import datetime as dt
import itertools as it

def pprint_time2(seconds):

    # build a datetime from the number of seconds passed in
    a_time = dt.datetime.utcfromtimestamp(seconds)

    # get d, h, m, s
    values = dt.timedelta(seconds=seconds).days, a_time.hour, a_time.minute, a_time.second

    # get values following first non zero value and their labels
    non_zero = tuple(it.dropwhile(lambda x: not x[0], zip(values, 'dhms')))

    # a format string
    format_str = "{:0&gt;2}{}{:0&gt;2}{}" if len(non_zero) &gt; 1 else " {:0&gt;2}sec"

    # format the string
    return format_str.format(*it.chain.from_iterable(non_zero or ((0, 0),)))
</code></pre>
    </div>