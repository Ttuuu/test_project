<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Line continuations</h2>
<p>Multi-line strings like this:</p>
<pre><code>intro = \
  "DesmOEIS\n" \
  "A tool for converting OEIS sequences to Desmos lists.\n" \
  "\n" \
  "Type id=&lt;OEIS id&gt; (without the brackets) to convert a sequence. \n" \
  "Type help for a list of all valid commands. \n" \
  "Type exit to close the application. \n" \
</code></pre>
<p>are better-represented as parenthesized expressions:</p>
<pre><code>intro = (
    "DesmOEIS\n" 
    "A tool for converting OEIS sequences to Desmos lists.\n" 
    "\n" 
    "Type id=&lt;OEIS id&gt; (without the brackets) to convert a sequence.\n" 
    "Type help for a list of all valid commands.\n" 
    "Type exit to close the application.\n" 
)
</code></pre>
<p>Also note that the second level of indentation should be at four spaces and not two.</p>
<h2>Consider case-insensitive commands</h2>
<p>It would be easy, and a user quality-of-life improvement, to compare strings against lowered input:</p>
<pre><code>cmd = input().lower()
</code></pre>
<p>If you want to get really fancy you could implement unambiguous prefix string matching, i.e. <code>hel</code> would match <code>help</code>, but that is more advanced.</p>
<h2>List parsing</h2>
<p>Rather than this:</p>
<pre><code>    # Multiple commands are comma separated
    cmds = cmd.split(', ')
</code></pre>
<p>it would be safer to split only on a comma, and then strip every resulting entry.</p>
<h2>Dictionary literals</h2>
<pre><code>args = dict()
</code></pre>
<p>can be</p>
<pre><code>args = {}
</code></pre>
<h2>Unpacking</h2>
<pre><code>        i = i.split("=")

        cmd = i[0]
        value = i[1]
</code></pre>
<p>can be</p>
<pre><code>cmd, value = i.split('=')
</code></pre>
<h2>Replace or ltrim</h2>
<pre><code># Remove the preceding A if included
id = id.replace('A', '')
</code></pre>
<p>does not do what you say it does. It replaces 'A' <em>anywhere</em> in the string. Instead, consider <code>lstrip('A')</code> which removes any number of 'A' from the left, or if you want to be more precise, use regular expressions and <code>'^A'</code>.</p>
<h2>Character repetition</h2>
<pre><code>    for i in range(0, 6 - length):
        id = "0" + id
</code></pre>
<p>can be</p>
<pre><code>id = '0'*(6 - length) + id
</code></pre>
<h2>Requests parameters</h2>
<pre><code>url = f"https://oeis.org/search?q=id:{id}&amp;fmt=text"
r = requests.get(url)
</code></pre>
<p>should use a dict argument to <code>params</code> instead of baking those into the URL; read
<a href="https://2.python-requests.org/en/master/user/quickstart/#passing-parameters-in-urls" rel="nofollow noreferrer">https://2.python-requests.org/en/master/user/quickstart/#passing-parameters-in-urls</a></p>
<h2>Requests checking for failure</h2>
<p>Call <code>r.raise_for_status()</code> after your <code>get</code>. Otherwise the failure mode for HTTP requests will be hidden.</p>
<h2>Pathlib</h2>
<p>Consider the <code>pathlib.Path</code> alternatives to these calls:</p>
<pre><code>if not os.path.exists(dir):
    os.makedirs(dir)
</code></pre>
<h2>Setters and getters</h2>
<p>This kind of boilerplate:</p>
<pre><code>@property
def args(self):
    return self._args

@args.setter
def args(self, args):
    self._args = args
</code></pre>
<p>is somewhat unpythonic. <code>_args</code> is not a strictly private variable by anything other than convention. You are not gaining anything from these properties. Delete them and rename <code>_args</code> to <code>args</code> if you're going to let users modify this member.</p>
<h2>Unit tests</h2>
<p>Great; you have some! Consider mocking away <code>requests.get</code> in your tests; otherwise this could not strictly be considered a unit test.</p>
    </div>