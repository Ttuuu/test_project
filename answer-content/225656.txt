<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So now basically rewriting the whole answer. As OP asks:</p>

<blockquote>
  <p>Basically I'm looking for a way to [...] avoid making a lot of if
  statements and parameter combination manually</p>
</blockquote>

<p>This answer provides an alternate solution to tackle exactly that. Precisely, it is easier to maintain and can be adapted to other models as well.</p>

<p>In the whole code I only found a single special case: If <code>strPosi</code> and <code>strLvl</code> are set, the <code>.Where</code> differs. In all other cases you execute the exact same code.</p>

<p>I divided the whole method in 3 methods. Starting with <code>GetParamsToExecute</code>. This method uses <code>GetProperties</code> and <code>GetValue</code> to dynamically generate a list of all parameters not null. Thus, it can be <strong>reused</strong> for other models as well, but has a <strong>costly</strong> operation with <code>GetProperties</code>.</p>

<pre><code>private List&lt;string&gt; GetParamsToExecute(object model)
{
    List&lt;string&gt; paramsToExecute = new List&lt;string&gt;();
    foreach (var p in model.GetType().GetProperties())
    {
        if (p.GetValue(model, null) != null)
        {
            paramsToExecute.Add(p.Name);
        }
    }
    return paramsToExecute;
}
</code></pre>

<p>Second, I created a method <code>ExecuteParams</code>, this method is <strong>model specific</strong> and executes all specific <code>.Where</code> clauses for the <code>MultipleParameterSearch</code> model. It covers the special case of <code>strPosi</code> and <code>strLvl</code> in an intial if-statement and covers the rest of the code to execute in a switch case.</p>

<pre><code>private IQueryable&lt;Model&gt; ExecuteParams(IQueryable&lt;Model&gt; source, List&lt;string&gt; paramsToExecute, MultipleParameterSearch multiple)
{
    if (paramsToExecute.Contains("strPosi") &amp;&amp; paramsToExecute.Contains("strLvl"))
        {
            source = source.Where(a =&gt; a.Pieza == String.Concat(multiple.strPosi, multiple.strLvl));
            paramsToExecute.Remove("strPosi");
            paramsToExecute.Remove("strLvl");
        }

        foreach (var p in paramsToExecute)
        {
            switch (p)
            {
                case "strCod":
                    source = source.Where(a =&gt; a.CodProd == multiple.strCod &amp;&amp; a.Stock &gt; 0);
                    break;
                case "strRack":
                    source = source.Where(a =&gt; a.Partida == multiple.strRack &amp;&amp; a.Stock &gt; 0);
                    break;
                case "strPosi":
                    source = source.Where(a =&gt; a.Pieza.Contains(multiple.strPosi) &amp;&amp; a.Stock &gt; 0);
                    break;
                case "strLvl":
                    source = source.Where(a =&gt; a.Pieza.Substring(1).Contains(multiple.strLvl.ToString()) &amp;&amp; a.Stock &gt; 0);
                    break;
                case "intCantMin":
                    source = source.Where(a =&gt; a.Stock &gt;= multiple.intCantMin);
                    break;
                case "intCantMax":
                    source = source.Where(a =&gt; a.Stock &lt;= multiple.intCantMax);
                    break;
                default:
                    throw new ArgumentException(string.Format(
                        CultureInfo.InvariantCulture,
                        "The parameter {0} was not found.",
                        p));
        }
    }

    return source;
}
</code></pre>

<p>And lastly the actual <code>MultipleParameterSearch</code>: (EDIT: Added the proper check and return if no parameter is set)</p>

<pre><code>public ActionResult MultipleParameterSearch(MultipleParameterSearch multiple)
{
    var paramsToExecute = GetParamsToExecute(multiple);
    if(!paramsToExecute.Any()) {
        return Json(multiple, JsonRequestBehavior.AllowGet);
    }

    using (ELECTROPEntities db = new ELECTROPEntities())
    {
        try
        {
            var x = ExecuteParams(getData(db), paramsToExecute, multiple).ToList();
            return PartialView("multi", x);
        }
        catch (Exception ex)
        {
            return Json(ex.ToString(), JsonRequestBehavior.AllowGet);
        }
    }
}
</code></pre>

<p>It works because whether you execute <code>.Where(ConditionA &amp;&amp; ConditionB)</code> or <code>.Where(ConditionA).Where(ConditionB)</code> makes no difference. As my version adds an iterative approach with the the foreach-loop as well as the performance-killer in <code>GetParamsToExecute</code>, it should be less performant than the original. Thus, I'm pretty sure that this is not the optimal solution, but it is easier to maintain then the if cluster before and can be adapted to other models by adding appropriate <code>ExecuteParams</code> methods for these models.</p>

<p>If it is adapted for other models it would be better to have a general <code>ExecuteParams</code> which is called by every action and then chooses the fitting <code>ExecuteParamsForModelX</code> accordingly. This makes your actions uniform and dislocates the execution parts completely.</p>

<pre><code>Action1(ModelType1) {
    ExecuteParams(model);
}

Action2(ModelType2) {
    ExecuteParams(model2);
}

ExecuteParams(object model) {
    if(model.GetType().Equals(typeof(ModelType1)) 
    {
        ExecuteParamsForModelType1(model);
    }
    // or switch-case or whatever ...
}
</code></pre>
    </div>