<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Use consistent formatting</h2>

<p>The code as posted has inconsistent indentation which makes it hard to read and understand. Pick a style and apply it consistently. </p>

<h2>Use more whitespace</h2>

<p>Lines like this one:</p>

<pre><code>for(int i=0;i&lt;5;i++){
</code></pre>

<p>are easier for most humans to read and understand with more whitespace like this:</p>

<pre><code>for (int i = 0; i &lt; 5; i++) {
</code></pre>

<h2>Don't use <code>system("cls")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions <code>cls()</code> and <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  For example, if your terminal supports <a href="http://en.wikipedia.org/wiki/ANSI_escape_code" rel="nofollow noreferrer">ANSI Escape sequences</a>, you could use this:</p>

<pre><code>void Clear()
{
    std::cout &lt;&lt; "\x1b[2J";
}
</code></pre>

<h2>Minimize the scope of variables</h2>

<p>The variable <code>movement</code> is only used within <code>InputHandle</code>.  This means that instead of a parameter, it could and should be a local variable within the member functions rather than a passed parameter.</p>

<h2>Only update when needed</h2>

<p>The current code updates the screen as fast as possible whether or not there's any reason to do so.  This causes an annoying flicker on my computer and needlessly impedes the quick response of the program to user input.  I'd suggest instead modifying the <code>InputHandle</code> routine to return a <code>bool</code> which is <code>true</code> only if the player's position has changed.</p>

<h2>Prefer <code>std::array</code> to raw C-style arrays</h2>

<p>Modern C++ provides <code>std::array</code> as an enhancement of a raw C array because it has knowledge of its own size, which helps with bounds checking.</p>

<h2>Eliminate "magic numbers"</h2>

<p>This code has a number of "magic numbers," that is, unnamed constants such as 4, 5, etc.  Generally it's better to avoid that and give such constants meaningful names.  That way, if anything ever needs to be changed, you won't have to go hunting through the code for all instances of "5" and then trying to determine if this <em>particular</em> 5 is relevant to the desired change or if it is some other constant that happens to have the same value.</p>

<h2>Simplify your code</h2>

<p>The current code contains this function:</p>

<pre><code>bool CheckWinCondition(int &amp;pX, int &amp;pY)
{
    if (pX == 3 &amp;&amp; pY == 4) {
        return true;
    }
    return false;
}
</code></pre>

<p>This can be simplified:</p>

<pre><code>bool CheckWinCondition(int &amp;pX, int &amp;pY)
{
    return pX == 3 &amp;&amp; pY == 4;
}
</code></pre>

<h2>Use a portable library</h2>

<p>You are right to want to eliminate the use of <code>conio.h</code> because it is neither standard nor portable.  For example, your constants for keys don't work on my machine at all.  One possible alternative would be to use the <code>ncurses</code> library.  See <a href="https://codereview.stackexchange.com/questions/215366/ncurses-snake-game">Ncurses Snake game</a> for inspiration on how to use the <code>ncurses</code> library in C++.</p>

<h2>Use better names</h2>

<p>The function <code>CheckWinCondition</code> and variable <code>maze</code> are good, descriptive names, but <code>InputHandle</code> and <code>pX</code> are not as good.  I'd probably change <code>InputHandle</code> to <code>handleUserInput</code> and <code>pX</code> to simply <code>x</code>.  Also, <code>CheckWinCondition</code> could be named <code>isPlayerAtGoal</code> to make it easy at a glance to understand what <code>true</code> and <code>false</code> might mean.</p>

<h2>Don't use macros for constants</h2>

<p>Instead of having <code>KEY_UP</code> and friends as old-style <code>#define</code> values, a better, more C++ approach is to use <code>constexpr</code> instead. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es31-dont-use-macros-for-constants-or-functions" rel="nofollow noreferrer">ES.32</a> and <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#con5-use-constexpr-for-values-that-can-be-computed-at-compile-time" rel="nofollow noreferrer">Con.5</a>.</p>

<h2>Use an object</h2>

<p>The <code>Maze</code> would make a rather obvious object.  It could include the maze structure, the player's current position and the goal's location.  Methods (member functions) could include all of the current free-standing functions and the <code>main</code> could be reduced to this:</p>

<pre><code>int main() {
    Maze maze;
    maze();
}
</code></pre>

<h2>Further hints</h2>

<p>Here's a rewritten <code>display()</code> function written using <code>ncurses</code> as a member function:</p>

<pre><code>void Maze::display() const 
{
    clear();
    for (int row = 0; row &lt; height; row++) {
        for (int col = 0; col &lt; width; col++) {
            addch(tokenAt(row, col));
            addch(' ');
        }
        addch('\n');
    }
}
</code></pre>

<p>The <code>clear()</code> and <code>addch()</code> functions are from <code>ncurses</code> and <code>tokenAt()</code> looks like this:</p>

<pre><code>char Maze::tokenAt(int row, int col) const {
    return (col == x &amp;&amp; row == y) ? 'P' : maze[row][col];
}
</code></pre>

<p>Here's the member function that actually runs the maze:</p>

<pre><code>void Maze::operator()() {
    initscr();
    noecho();
    nodelay(stdscr, TRUE);
    keypad(stdscr, TRUE);
    display();   
    while (!isPlayerAtGoal()) { 
        if (handleUserInput()) {
            display();
        }
    }
    endwin();
    std::cout &lt;&lt; "Congrats, you finished the maze!\n";
}
</code></pre>
    </div>