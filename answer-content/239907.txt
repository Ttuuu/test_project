<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Logically, the code looks correct but from performance perspective, there are few things that can be improved. Let's look at the 2 points:  </p>

<ul>
<li><strong>Time Complexity: O(n)</strong> - 1 loop, 1 reduce and 1 Math.min. All run in O(n) time.</li>
<li><strong>Space Complexity: O(n)</strong> - Two arrays - defArr and l which have size n</li>
</ul>

<p>There is <code>nothing can be done for time complexity</code> but <code>space complexity can be reduced to constant space</code>. No need to have additional arrays. One can simply loop and store intermediate values in temporary variables.</p>

<p>I have re-written the same. Inside the loop, at each <em>index</em>, the difference is calculated and compared to a <em>min</em> variable. If the new min is lesser than existing one; then update min otherwise do next iteration.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>A = []
A[0] = 3
A[1] = 1
A[2] = 2
A[3] = 4
A[4] = 3

function solution(A) {
  let sum = A.reduce((total, value) =&gt; total + value, 0)
  let min = Number.POSITIVE_INFINITY
  let cumulativeSum = 0
  for (let i = 0; i &lt; A.length - 1; ++i) {
    cumulativeSum = cumulativeSum + A[i]
    sum = sum - A[i]
    diff = Math.abs(sum - cumulativeSum)
    if (diff &lt; min) {
      min = diff
    }
  }
  return min
}

console.log(solution(A))</code></pre>
</div>
</div>


<p>Hope it helps. Revert for any doubts/clarifications.</p>
    </div>