<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You are including too little. <code>std::unique_ptr</code> needs <code>&lt;memory&gt;</code>, <code>std::swap</code> needs <code>&lt;utility&gt;</code>, <code>std::invalid_argument</code> needs <code>&lt;stdexcept&gt;</code>.</p>
</li>
<li><p>Defining and using a ctor for your <code>Node</code> instead of using aggregate-initialization forces you to make unnecessary, maybe costly or even impossible, copies. Considering your interface, that's very surprising for your clients.</p>
<p>Remove all ctors from <code>Node</code>, and use <a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" rel="nofollow noreferrer">aggregate-initialization</a> instead.</p>
</li>
<li><p>I honestly have no idea why you defined the private <code>.display(std::ostream&amp;)</code>. Just put it back into <code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, SingleLinkedList const&amp;)</code>.</p>
</li>
<li><p>Defining <code>.display()</code> needlessly chains your code to <code>std::cout</code>. Otherwise, you could include <code>&lt;ostream&gt;</code> instead of <code>&lt;iostream&gt;</code> and avoid initializing all the C++ streams.</p>
</li>
<li><p>If you want to stream a single character, don't stream a string. Needless inefficiency is bad.</p>
</li>
<li><p>Users expect an iterator-interface, and it would make copying, printing, as well as inserting and deleting at specific points easier and/or more efficient. Enabling use of standard algorithms is also nice.</p>
<p>You should implement <a href="https://en.cppreference.com/w/cpp/named_req/ForwardIterator" rel="nofollow noreferrer"><em>ForwardIterator</em></a>s.</p>
</li>
<li><p>Your names are outlandish (<code>.getSize()</code> =&gt; <code>.size()</code>, <code>.push()</code> / <code>insertTail()</code> =&gt; <code>.push_back()</code>, <code>.insertHead()</code> =&gt; <code>.push_front()</code>, <code>.deleteHead()</code> =&gt; <code>.pop_front()</code>, <code>.deleteTail()</code> =&gt; <code>.pop_back()</code>). That means no standard algorithms to you, and it's much harder to work with.</p>
</li>
<li><p>I would expect <code>.search()</code> to return an iterator. As you don't have any, maybe a pointer. But certainly not a <code>bool</code>, that's what <code>.contains()</code> would be for.</p>
</li>
<li><p>You don't allow construction from <code>std::initializer_list&lt;T&gt;</code>, nor an Iterator-pair. That's disappointing.</p>
</li>
<li><p>You know <code>pointer != nullptr</code> is the same as <code>pointer</code> in a boolean context? The same for <code>pointer == nullptr</code> and <code>!pointer</code>.</p>
</li>
<li><p>Avoid mixing iostreams and stdio without good reason. Also, only use <code>std::endl</code> if you need an explicit flush. But, maybe you do...</p>
</li>
<li><p>You know you can fuse two string-literals simply by not separating them with anything but whitespace, including newlines?</p>
</li>
</ol>
    </div>