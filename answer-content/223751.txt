<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Initially, I thought maybe the process is slower as it uses two memory containers, as opposed to simply comparing two halves of a single string.</p>
</blockquote>

<p>I think you hit on an excellent idea right there. I'd read a line of input into a string, the compare the first half of the string to the second half in reverse order.</p>

<ul>
<li>You can use <code>std::getline</code> to read the string.</li>
<li>You can use <code>your_string.size() / 2</code> to get half the length.</li>
<li>You can use <code>your_string.cbegin()</code> to get an iterator to the beginning of the string.</li>
<li>You can use <code>your_string.crbegin()</code> to get a reverse iterator to the string (one that iterates through from the end to the beginning).</li>
<li>You can use <code>std::mismatch</code> to compare the two halves of the string.</li>
<li>As Deduplicator pointed out, you probably want a function that does nothing but check whether a string is a palindrome.</li>
</ul>

<p>If you wanted to minimize changes to your code, you could just read the string into the deque, then to do the comparison, pop one element from the front, and one element from the back, and compare them. The input was palindromic if and only if all the elements match until the deque has fewer than two elements.</p>
    </div>