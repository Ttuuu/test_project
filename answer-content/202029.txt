<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Is it C++14 compatible?</em> - it compiles successfully with <code>-std=C++14</code>, and I don't see anything else to give me concern in that respect.</p>

<hr>

<p>I'm assuming it's intentional that <code>default_value</code> can be written; users need to be aware that writing to the iterator at this stage will affect all future values, which may be surprising. </p>

<p>It's not as easy as I'd like to make a <code>const</code> version: when I tried instantiating with a <code>std::list::const_iterator</code>, I got an error from <code>return *first++;</code>:</p>

<blockquote>
<pre><code>201933.cpp:24:30: error: binding reference of type ‘int&amp;’ to ‘const int’ discards qualifiers
                 return *first++;
                              ^~
</code></pre>
</blockquote>

<p>I didn't expect that, but a simple fix is:</p>

<pre><code>    using reference = typename std::iterator_traits&lt;InputIterator&gt;::reference;

    reference next() {
        if (first == last) {
            return default_value;
        } else {
            return *first++;
        }
    }
</code></pre>

<p>However, this makes it no longer useful to specify a non-default <code>ValueType</code> template argument.</p>

<hr>

<p>In the constructor, we can <em>move</em> the start and sentinel values:</p>

<pre><code>    template &lt;typename ... ArgTypes&gt;
    endless_stream(InputIterator first, Sentinel last, ArgTypes&amp;&amp; ... args) :
        first{std::move(first)},
        last{std::move(last)},
        default_value(std::forward&lt;ArgTypes&gt;(args)...)
    {}
</code></pre>

<p>Although iterators are generally cheap to copy, this seems a good habit to have in general.</p>
    </div>