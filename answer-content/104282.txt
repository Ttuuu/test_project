<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can improve the following:</p>

<blockquote>
<pre><code>            if getargspec(function).args[0] != "self":
                print(self.__format_debug_string(function, *args, **kwargs))
            else:
                print(self.__format_debug_string(function, *args, **kwargs))
                print("[debug] Parent attributes: {}".format(pformat(args[0].__dict__)))
</code></pre>
</blockquote>

<p>If the code is executed no matter the statement, and it always goes first, move it above the condition: (and don't forget to reverse the condition)</p>

<pre><code>            print(self.__format_debug_string(function, *args, **kwargs))
            if getargspec(function).args[0] == "self":
                print("[debug] Parent attributes: {}".format(pformat(args[0].__dict__)))
</code></pre>

<p>As for this:</p>

<blockquote>
<pre><code>    debug_string = ""
    debug_string += "[debug] {}\n".format(pformat(function))
    debug_string += "[debug] Passed args: {}\n".format(pformat(args))
    debug_string += "[debug] Passed kwargs: {}\n".format(pformat(kwargs))
    debug_string += "[debug] Locals: {}".format(pformat(function.__code__.co_varnames))
    return debug_string
</code></pre>
</blockquote>

<p>You can remove the <code>= ""</code> entirely:</p>

<pre><code>    debug_string =  "[debug] {}\n".format(pformat(function))
    debug_string += "[debug] Passed args: {}\n".format(pformat(args))
    debug_string += "[debug] Passed kwargs: {}\n".format(pformat(kwargs))
    return debug_string + "[debug] Locals: {}".format(pformat(function.__code__.co_varnames))
</code></pre>

<p>It may not look as visually stimulating, but, it's not as redundant.</p>

<blockquote>
  <p>Is it a good idea to create an empty string, and then add to, and re-assign it to build an output string?</p>
</blockquote>

<p>If you were directly printing these then it would be a bad idea, but in this case, not really. However, I suppose you could move them to an object, or an array and return the result of a <code>join</code> function.</p>

<p>You could even return it as an array, and print each <code>[debug]</code> result. Which would remove the need for the <code>\n</code>s at the end, and DRY up the <code>[debug]</code> at the beginning of the strings (<em>put it in the loop, not altogether</em>)</p>

<hr>

<p>You've got a few too long lines, by PEP8 standard:</p>

<blockquote>
<pre><code>debug -- Whether or not you want to output debug info. Generally, a global DEBUG variable is passed in here.
debug_string += "[debug] Locals: {}".format(pformat(function.__code__.co_varnames))
print(self.__format_debug_string(function, *args, **kwargs))
print("[debug] Parent attributes: {}".format(pformat(args[0].__dict__)))
</code></pre>
</blockquote>

<hr>

<p>As for your documentation:</p>

<blockquote>
<pre><code>function, it will print out the arguments of

Keyword arguments:
</code></pre>
</blockquote>

<p>I'm a bit confused by that, grammatically.</p>

<p><code>__call__</code> is a more complex function (in my mind, at least) than <code>__format_debug_string</code>, but it has no documentation.</p>

<hr>

<blockquote>
  <p>Is this Python 3, and Python 2.7 compatible?</p>
</blockquote>

<p>It ran fine when I tested it in Python 2.7.9 and 3.1.1</p>
    </div>