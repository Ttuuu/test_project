<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some recommendations:</p>

<ul>
<li>Running your code through a linter like <a href="https://pypi.org/project/pycodestyle/" rel="nofollow noreferrer"><code>pycodestyle</code></a>, then learning what the messages mean and applying them to your code is going to make your code more idiomatic, and therefore easier to understand for Python veterans.</li>
<li>I would use an external command like <code>time my_script.py</code> to time the execution. This will shorten your code a fair bit (and besides, you would never put timing code into production code). Sure, it's a little bit less accurate, but for Euler Project questions you just want a ballpark estimate.</li>
<li>Use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> rather than <code>input()</code>. That makes your scripts, well, scriptable, so that they can be used easier within the context of a bigger project, and they can be re-run quicker on the command line.</li>
<li><p>The only things on the top level of your script should be a <a href="https://stackoverflow.com/q/6908143/96588">shebang line</a> like <code>#!/usr/bin/env python3</code>, imports, class/function definitions, and <a href="https://stackoverflow.com/q/419163/96588">the following</a>:</p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre>

<p>This way, anything declared in the script can be <em>imported</em> by other scripts without running the algorithm.</p></li>
<li><a href="https://www.slideshare.net/pirhilton/how-to-name-things-the-hardest-problem-in-programming" rel="nofollow noreferrer">Naming</a> is one of the most difficult but also most useful skills in programming. If you can think of any better names for <code>n</code>, <code>t</code>, <code>num</code>, <code>j</code>, etc, the program will be much easier to understand for someone without all the context you have.</li>
<li>You hard code the list <code>[2, 3, 5, 7]</code> three times in your code, but only once (at most) should be necessary.</li>
<li>On a related note, starting with a list of the four first primes is very arbitrary. Why not the first million? Or the first <strong>one?</strong></li>
<li><code>isPrime</code> (or <code>is_prime</code> as it should be in idiomatic Python) is a good name, but there is no explanation for which algorithm you're using to check primality. You can introduce the algorithm name in one of several ways:

<ul>
<li>As a comment.</li>
<li>By refactoring the entire contents of <code>isPrime</code> into a separate method and naming <em>that</em> according to the algorithm. This only really makes sense if either <code>isPrime</code> ends up containing something more than just the call to the other function (a "vacuous" function) or if you intend to implement multiple algorithms in your code and swap them out dynamically (for example, using the fastest algorithm based on the size of the numbers you're dealing with).</li>
<li>More complex means like a dispatcher, but this is not applicable in this situation.</li>
</ul></li>
<li>Rather than <code>round(sqrt(n))</code> you can use <code>floor(sqrt(n))</code>, it'll be faster half the time.</li>
<li>Every time you run <code>isPrime</code> you build up a list of primes, but it goes out of context and has to be recomputed for every number. Your code will be much faster for long lists of input if you save all the primes calculated so far for subsequent runs. For example, you could create an <code>ErathostenesSieve</code> class which has a field <code>sieve</code> which contains the primes detected so far, and it could even be a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a> from which you can take an arbitrary number of primes.</li>
<li>If you start with <code>l = 2</code> or even <code>l = res[-1]</code> you can remove <code>if l!=1:</code>.</li>
<li>Do not append to <code>prime_fst</code> until you're sure the number is prime. That way you won't ever have to <code>sort</code> the list or <code>remove</code> from it.</li>
</ul>

<p>By the way: Don't be discouraged by the amount of suggestions! IMO this is a very good start, and learning programming is an infinite journey which can be incredibly rewarding.</p>
    </div>