<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can refactor this method (and <code>downloadLatestFileAWS</code>, too), to take an optional completion handler parameter:</p>

<pre><code>func requestDownloadLinkForAWS(completion: @escaping ((Result&lt;URL, Error&gt;) -&gt; Void)? = nil) {
    ...

    do {
        ...
        downloadLatestFileAWS(dataResponse.bucketName, dataResponse.folderName, dataResponse.version, completion: completion)
    } catch let error {
        completion?(.failure(error))
    }
}

func downloadLatestFileAWS(_ bucket: String, _ folder: String, _ version, completion: @escaping ((Result&lt;URL, Error&gt;) -&gt; Void)? = nil) {
    ...
    completion?(.success(url)) // the file URL of the saved file
}
</code></pre>

<p>Then you can test it:</p>

<pre><code>func testDownload() {
    var result: String?

    let expectation = self.expectation(description: "download")
    requestDownloadLinkForAWS { result in
        if case .failure(_) = result {
            XCTFail("Download failed")
        }
        expectation.fulfill()
    }
    wait(for: [expectation], timeout: 10)
}
</code></pre>

<p>By the way, by adding a completion handler to the download method, it also offers you the opportunity to have the caller specify what UI updates should take place when the download is done. For example, you generally donâ€™t want to bury those UI updates within <code>downloadLatestFileAWS</code>. Also, rather than just printing the error to the Xcode console, the caller can now specify what it wants to do when an error occurs.</p>

<p>That having been said, you might not want to actually perform network requests in unit tests. You might, instead <a href="https://www.swiftbysundell.com/articles/mocking-in-swift/" rel="nofollow noreferrer">mock the network service</a>, or use <code>URLProtocol</code> to <a href="https://vojtastavik.com/2019/09/12/mocking-network-calls-using-urlprotocol/" rel="nofollow noreferrer">mock it behind the scenes</a>.</p>

<p>But either way, you can make your methods testable by providing them with completion handler closures.</p>
    </div>