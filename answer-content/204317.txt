<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>i'm using static methods from other class here, the UsersTable class, and i feel this is a "code smell".</p>
</blockquote>

<p>Some people hate static methods, others prize them for the micro-optimization... if your method is idempotent (or, in the case of a query, not dependent upon class state) you're not in code smell territory.</p>

<p><strong>validation.php</strong></p>

<pre><code>private static $emailValidationRegex = '/^[^\s@]+@[^\s@]+\.[^\s@]+/';
</code></pre>

<p>If the string never changes, why assign it to a variable? (Consider using a class constant if you feel the string <em>must</em> be separate or - better yet - just use the quoted string directly in the single place that it is needed)</p>

<p><code>x@y.z</code> may try signing up - I hope you require that users confirm their email address in order to complete account activation if a valid email address is a business requirement.</p>

<p><strong>users-table.php</strong></p>

<pre><code>$statement = "SELECT * FROM `users`";
</code></pre>

<p>This may qualify as a microptimization quibble, (depends upon your DDL) however, I'd recommend explicitly specifying the columns in queries to avoid an extra check against the information schema.</p>

<pre><code>$statement = "SELECT * FROM `users` WHERE `id` = '$id' "
            . "LIMIT 1";
</code></pre>

<p>Don't invite <a href="https://xkcd.com/327/" rel="nofollow noreferrer">Little Bobby Tables</a> into your database - use <a href="https://phpdelusions.net/pdo" rel="nofollow noreferrer">prepared statements</a>.</p>

<p><strong>login.php</strong></p>

<pre><code>require_once('../config.php');
require_once('database.php');
require_once('users-table.php');
require_once('validation.php');
</code></pre>

<p>No <a href="https://www.php-fig.org/psr/psr-4/" rel="nofollow noreferrer">PSR-4 Autoloader</a> ..? (You'll want one - save yourself a lot of hassle in the future)</p>

<p><strong>Note:</strong> I may have missed a few bugs, however, I will say that you're on the right track in terms of producing consistent, formatted code - keep at it!</p>
    </div>