<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thank you for releasing your code! You have some clever solutions and I would like to add few more points to the previous answers.</p>

<h1>Naming</h1>

<h2>Piece</h2>

<p>The class <code>Pawn</code> confuses me, not because it is to complicated, but because of its name. <code>Pawn</code> is used to validate a movement and to do a move of a piece on the board, while the name suggests that it is the piece on the board. So with other words: <em>It is not a piece it is a utility of a piece</em></p>

<p>The abstract class <code>Piece</code> could be renamed to <code>AbstractMovements</code> and <code>Pawn</code> to <code>PawnMovements</code>.</p>

<p>Note the appended <em>s</em> to the names, which indicates that it is a utility class. You can find some in the Java-World like <code>Collections</code>, <code>Objects</code> and so on.</p>

<h2>Move</h2>

<p>Additional the class <code>MoveImpl</code> is not responsible for a move. The moves are done by the implementations of <code>Piece</code> (<code>AbstractMovements</code>). Actual <code>MoveImpl</code> response is to extract the movement information from the users input and delegate it to a <code>Piece</code>. I think it would make sense to rename the abstract class <code>Move</code> to <code>Reader</code> and <code>MoveImpl</code> to <code>ComandLineReader</code>.</p>

<h1><a href="http://wiki.c2.com/?PrimitiveObsession" rel="noreferrer">Primitive Obsession</a></h1>

<blockquote>
  <p>Primitive Obsession is using primitive data types to represent domain ideas. For example, we use a String to represent a message [...]</p>
</blockquote>

<p>The code-base contains a heavy use of <code>int</code> to represent a <code>Position</code> as a <code>source</code> and <code>destination</code>, <code>String</code> gets abused to represent a <code>Piece</code> and <code>String[][]</code> represents the board.</p>

<h2>Examples</h2>

<p>The method signiture of <code>validateForPiece</code> in <code>Piece</code> could look like </p>

<pre class="lang-java prettyprint-override"><code>public boolean validateForPiece(Position source, Position destination)
</code></pre>

<p>or the class <code>MoveImpl</code> like</p>

<pre class="lang-java prettyprint-override"><code>public class MoveImpl implements Move {

    Piece piece;
    Position source;
    Position destination;

    // ...
}
</code></pre>

<p>With the new data-types the if-statements can be clearer. For example</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public boolean checkMiddlePieces(int srcX, int srcY, int destX, int destY) {
   if(srcX==destX &amp;&amp; srcY!=destY) { /*..*/ }
   // ..
}
</code></pre>
</blockquote>

<p>could be look like</p>

<pre class="lang-java prettyprint-override"><code>public boolean checkMiddlePieces(Position source, Position destination) {
    if(source.hasSameRowAs(destination) &amp;&amp; source.hasNotSameColoumAs(destination)) { /*.. */ }
    // ..
}
</code></pre>

<h1>The Main Class</h1>

<p>The <code>main</code> looks like a <em>Factory</em> with super power. It should be possible to move these if-statements into its own class. The main class could interact with with a class called <code>ChessGame</code> or something like that, that knows all your chess logic. </p>

<p>To check if the player enters the correct task at the correct time you could use the <a href="https://en.wikipedia.org/wiki/State_pattern" rel="noreferrer">State Pattern</a>. The <code>InputState</code> makes it possible for example that the user can't enter <em>"Display"</em> five times in a row or don't <em>"Move"</em> before <em>"Display"</em> or <em>"Board"</em></p>

<pre class="lang-java prettyprint-override"><code>public class Main {
    private ChessGame chessGame = new ChessGame();

    public static void main(String[] args) throws IOException {
         Move move = new MoveImpl();
         System.out.println("Input:");
         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
         String input = br.readLine();

         chessGame.play(input);
    }
}

public class ChessGame {

    private InputState inputState;

    public ChessGame() {
       // user needs to enter first "Board" or "Display"
       this.inputState = new InformationInputState(this); 
     }

    void setState(InputState inputState) {
        this.inputState = inputState;
    }

    public void play(String input) {
       inputState.execute(input); 
    }
}

interface InputState {
    void execute(ChessGame, String input);
}

class MoveInputState implements InputState {

    private ChessGame chessGame;

    // constructor

    public void execute(String input) {
        if (input.equals("Move")) {
            // ..
            chessGame.setState(new InformationInputState(chessGame))
        }
    }
}

class InformationInputState implements InputState {

    private ChessGame chessGame;

    // constructor

    public void execute(String input) {
        if (input.equals("Board")) {
            // ..
            chessGame.setState(new MoveInputState(chessGame))
        } else if ("Display") {
            // ..
            chessGame.setState(new MoveInputState(chessGame))
        }
    }
}
</code></pre>
    </div>