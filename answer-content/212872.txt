<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#!/usr/bin/env python3

import os

import dotenv
import requests

dotenv.load_dotenv()
token = os.environ['DO_API_TOKEN']
domain = os.environ['DO_DOMAIN']
subdomain = os.environ['DO_SUBDOMAIN']

records_url = f'https://api.digitalocean.com/v2/domains/{domain}/records/'
session = requests.Session()
session.headers = {
    'Authorization': 'Bearer ' + token
}


def get_current_ip():
    return requests.get('https://api.ipify.org').text.rstrip()


def get_sub_info():
    records = session.get(records_url).json()
    for record in records['domain_records']:
        if record['name'] == subdomain:
            return record


def update_dns():
    current_ip_address = get_current_ip()
    sub_info = get_sub_info()
    subdomain_ip_address = sub_info['data']
    subdomain_record_id = sub_info['id']
    if current_ip_address == subdomain_ip_address:
        print('Subdomain DNS record does not need updating.')
    else:
        response = session.put(records_url + subdomain_record_id, json={'data': current_ip_address})
        if response.ok:
            print('Subdomain IP address updated to ' + current_ip_address)
        else:
            print('IP address update failed with message: ' + response.text)


if __name__ == '__main__':
    update_dns()
</code></pre>

<ol>
<li>The script will not work if any variables are missing, so use <code>[...]</code> instead of <code>.get(...)</code> to throw an error ASAP if needed.</li>
<li>The DO URLs always start with <code>/{domain}/records/</code> so I included that in the top level constant.</li>
<li>A <code>requests.Session</code> makes multiple requests to the same domain faster as it keeps the connection open, and it lets you specify info like headers once.</li>
<li>A few times you create a variable and immediately return it. You can just return the expression directly.</li>
<li>I felt that the <code>check_ip_url</code> constant didn't add anything, so I inlined it. This is mostly a preference.</li>
<li>Most of the comments do not help readers in any way, so I removed them. But if you want to describe what a function does, use a docstring.</li>
<li>Calling <code>.json()</code> on a response parses the text as JSON for you.</li>
<li>Moving the values of one dict to another dict before finally extracting them just adds another layer, so I just returned <code>record</code> directly.</li>
<li>You called <code>get_sub_info()</code> twice which meant two identical requests. To speed things up, I extracted a variable.</li>
<li>Again, <code>requests</code> makes JSON easy to use, now with the <code>json=</code> argument. This both converts the dictionary to a JSON string and sets the content type. But even without this, you really should have been using <code>json.dumps</code> rather than string concatenation.</li>
<li><code>response.ok</code> is typically how you check if a request succeeded, or by checking the value of <code>response.status_code</code>. I've never seen anyone using the <code>in</code> operator on a response.</li>
<li>There's no reason to <code>return</code> when a function is ending anyway.</li>
</ol>
    </div>