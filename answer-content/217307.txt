<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You now have two methods of setting up the board.  The first is direct initialization:</p>

<pre><code>board = [0, 1, 2,
         3, 4, 5,
         6, 7, 8]
</code></pre>

<p>and the second is a resetting an already existing board:</p>

<pre><code>def clear_board():
    for i in range(9):
        board[i] = i
</code></pre>

<p>I hate that there are two.  It would be easy to make a mistake and change one (for example, changing to a 4x4 grid) but not the other.</p>

<hr>

<p><code>board_layout()</code> is an odd name for the function that prints the board.  It is not laying out the board.  I might call it <code>print_board()</code>.</p>

<p>I dislike seeing the same thing over and over.  In <code>board_layout()</code>, you have <code>board[ ]</code> appear 9 times in the format string.  If you wanted to change the name of the game board, you'd have to edit the code in 9 places in this one function.  You can eliminate these duplicates using the <code>.format()</code> command, instead of using a f-string.  I know, seems like going backwards; f-strings are supposed to be an improvement!</p>

<pre><code>''' 
*************
* {} | {} | {} *
*-----------*
* {} | {} | {} *
*-----------*
* {} | {} | {} *
*************
'''.format(*board)
</code></pre>

<p><code>*board</code> takes the <code>board</code> list, takes the individual elements and "splats" them all as the arguments to the <code>.format()</code> call.  Each argument, in turn, is substituted into the next <code>{}</code> format code.</p>

<hr>

<p>Jumping ahead.</p>

<pre><code>        winning_list = [[board[0], board[1], board[2]], [board[3], board[4], board[5], ],
                        [board[6], board[7], board[8]], [board[0], board[4], board[8]],
                        [board[2], board[4], board[6]],
                        [board[0], board[3], board[6]], [board[1], board[4], board[7]],
                        [board[2], board[5], board[8]]]
</code></pre>

<p>Again, here we have <code>board[ ]</code> repeated 24 times!  There has got to be a better way.  And there is.  First, create as a global constant, a list of list of winning indices.  Since these will never be modified, I've used tuples instead of lists.</p>

<pre><code>WINNING_ROWS = ((0, 1, 2), (3, 4, 5), (6, 7, 8),  # Rows
                (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Columns
                (0, 4, 8), (2, 4, 6))             # Diagonals
</code></pre>

<p>Now we just need to use these indices to check for a win condition.  We can even use chained comparisons to make the test more concise:</p>

<pre><code>    for i, j, k in WINNING_ROWS:
        if board[i] == board[j] == board[k] == 'x':
            print('X wins')
</code></pre>

<p>That tests <code>board[i] == board[j]</code> AND <code>board[j] == board[k]</code> AND <code>board[k] == 'x'</code>, but we haven't repeated any of the terms in the test.</p>

<pre><code>        elif board[i] == board[j] == board[k] == 'o':
            print('O wins')
</code></pre>

<p>And now we have.</p>

<p>Whenever you repeat code, you should think "maybe a loop" or "maybe a function".  A loop doesn't seem right here.  Let's use a function:</p>

<pre><code>def has_won(player):
    for i, j, k in WINNING_ROWS:
        if board[i] == board[j] == board[k] == player:
            return True
    return False
</code></pre>

<p>Now you can use <code>if has_won('x'):</code> to check in the <code>'x'</code> player has won after they have made their move, and <code>if has_won('o'):</code> to check if the <code>'o'</code> player has won after they have made theirs.</p>

<p>We can condense this function.  The <code>all()</code> function will test each of its arguments, and return <code>True</code> only if all of the arguments are true.  We can use list comprehension to extract each index in turn from the row tuples:</p>

<pre><code>def has_won(player):
    for row in WINNING_ROWS:
        if all(board[idx] == player for idx in row):
            return True
    return False
</code></pre>

<p>Like the <code>all()</code> function, there is an <code>any()</code> function, which returns <code>True</code> if any of its arguments are true.  Again, we'll use list comprehension to loop over each row in <code>WINNING_ROWS</code>:</p>

<pre><code>def has_won(player):
    return any(all(board[idx] == player for idx in row) for row in WINNING_ROWS)
</code></pre>

<p>For any of the winning rows, if all of the board locations contain the player's symbol, <code>True</code> is returned.  Pretty darn concise, if you want to use it.</p>

<hr>

<p>Checking for a valid spot:</p>

<pre><code>if board[player_move] != 'x' and board[player_move] != 'o':

if board[npc] != 'o' and board[npc] != 'x':
</code></pre>

<p>Effectively the same test, repeated twice.  And <code>board[pos]</code> referenced twice in each test.  Don't Repeat Yourself.  DRY.  As opposed to Write Everything Twice, or WET.  You want DRY code, not WET code.  The <code>in</code> operator will test if the item on the left of <code>in</code> is contained in the container on the right.</p>

<pre><code>def is_valid_move(move):
    return board[move] not in ('x', 'o')
</code></pre>

<p>Not bad.  But is <code>12</code> a valid move?  How about <code>-1</code>?  Note that <code>-1</code> will not cause an <code>IndexError</code>, it will just return the last element of the list (<code>board[8]</code>).</p>

<pre><code>def is_valid_move(move):
    return move in range(9) and board[move] not in ('x', 'o')
</code></pre>

<hr>

<p>Elephant in the room.</p>

<p>You play the game, win, play again, loose, play again, tie, play again.  What is the stack trace at this point?</p>

<pre><code>main() -&gt; check_winner() -&gt; end() -&gt; main() -&gt; check_winner() -&gt; end() -&gt; main() -&gt; check_winner() -&gt; end() -&gt; main() -&gt; check_winner() -&gt; end() ...
</code></pre>

<p>If you make a mistake and enter invalid input in the <code>end()</code> method, you could even have <code>end() -&gt; end()</code> repeats in that stack trace.</p>

<p>Do not use recursion as a substitute for looping!</p>

<hr>

<p>Here is a possible implementation, which doesn't use recursion.  Note that there are no global variables, other than the constant <code>WINNING_ROWS</code>.  Since <code>board</code> is no longer global, it can be created brand new each time a game is started.  </p>

<pre><code>import random

WINNING_ROWS = ((0, 1, 2), (3, 4, 5), (6, 7, 8),
                (0, 3, 6), (1, 4, 7), (2, 5, 8),
                (0, 4, 8), (2, 4, 6))

def print_board(board):
    row  = "  {} | {} | {}\n"
    line = " ---+---+---\n" 
    print(((row + line) * 2 + row).format(*board))

def has_won(player, board):
    return any(all(board[idx] == player for idx in row) for row in WINNING_ROWS)

def is_valid_move(move, board):
    return move in range(9) and board[move] not in ('x', 'o')

def player_move(board):
    print_board(board)
    while True:
        try:
            move = int(input('Please select as spot: '))
            if is_valid_move(move, board):
                return move
        except ValueError:
            pass
        print('Invalid input.', end='  ')

def npc_move(board):
    while True:
        move = random.randint(0, 8)
        if is_valid_move(move, board):
            return move

def play_game():

    board = list(range(9))
    player = 'x'

    for _ in range(9):
        if player == 'x':
            move = player_move(board)
        else:
            move = npc_move(board)

        board[move] = player

        if has_won(player, board):
            print_board(board)
            print(f"{player.upper()} wins!")
            return

        player = 'o' if player == 'x' else 'x'

    print("Tie game")

def main():
    answer = 'y'

    while answer == 'y':
        play_game()

        answer = ''
        while answer not in ('y', 'n'):
            answer = input('Play again? (Y/N): ').lower()


if __name__ == '__main__':
    main()
</code></pre>
    </div>