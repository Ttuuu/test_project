<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my opinion, your code would benefit considerably from a better naming convention.</p>

<p>In Prolog, a good predicate name makes clear <strong>what each argument denotes</strong>.</p>

<p>For example, when I see:</p>

<pre>
prereqs(460, 233).
</pre>

<p>then I have no idea what the arguments are. I see it is about prerequisites, but in which direction? Is 460 a prerequisite ofÂ 233, or is it the other way around? Also, why is this called "prereq<b>s</b>" although each clause only denotes a <em>single</em> prerequisite?</p>

<p>A much more descriptive name for this predicate would be (for example!):</p>

<pre>
prerequisite_of_course(460, 230).
</pre>

<p>because this makes clear <em>what is the prerequisite of what</em>. Another very good, descriptive name would be for example:</p>

<pre>
<b>course_prerequisite(230, 460).</b>
</pre>

<p>You will find that, if you use more descriptive names, then <em>emitting output yourself will become unnecessary</em>: The predicate name alone will make the situation perfectly clear. <em>Let the toplevel do the printing for you!</em></p>

<p>The variable names in:</p>

<pre>
prereq(X, Y) :-
    prereqs(X, Z),
    prereq(Z, Y).
</pre>

<p>could also be improved considerably by choosing more descriptive names or abbreviations, such as <code>Req</code>, <code>Course</code> etc. For transitive relations between courses, you can for example use:</p>

<p><code>Course0</code> &amp;rightarrow; <code>Course1</code> &amp;rightarrow; ... &amp;rightarrow; <code>Course</code></p>
    </div>