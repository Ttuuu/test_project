<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>It's common to write down access modifier for fields</li>
<li>Defining one field per line makes the code more readable because you dont have to scan each declaration line for multiple variables</li>
<li><p>Initialization of integers with '0' is not required because '0' is its default.</p>

<pre><code> private double firstNumber;
 private double secondNumber;
 private double resultNumber;
 private bool calcDone = false;
 private Operations operation = Operations.None;
 private string separator = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
</code></pre></li>
</ul>

<hr>

<blockquote>
<pre><code>result.Content = $"{button.Content}";
</code></pre>
</blockquote>

<p>can be simplified by</p>

<pre><code>result.Content = button.Content;
</code></pre>

<hr>

<p>There are multiple occurences of <code>result.Content.ToString() == "0"</code>. Maybe it makes sense to put it in a property and use the the property instead:</p>

<pre><code>private bool IsInputEmpty =&gt; result.Equals("0");
</code></pre>

<hr>

<p><strong>Using MVVM</strong></p>

<p>In WPF it is common to prefer <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" rel="noreferrer">MVVM</a> over code behind. It is nonessential for such an simple application like a calculator - But for pracice it would be a nice exercise to convert it to MMVM using <a href="https://www.codeproject.com/Articles/238657/How-to-use-Commands-in-WPF-2" rel="noreferrer">commands and data binding</a>.</p>

<hr>

<p><strong>Use OOP to abstract your logic and separate state</strong></p>

<p>Your solution consists of big nested switch statements and global state (firstNumber, secondNumber, resultNumber, calcDone, operation). That kind of solutions are really hard to maintain because each case of the switch has access to the whole state, some cases require a defined state and it is not clear what are the transisions from one state to another.</p>

<p>It is better to think about more abstract concepts and try to design them via the power of object oriented programming ;). Actually there are many patterns that have proven themselves.. In your case I would check the <a href="https://en.wikipedia.org/wiki/State_pattern" rel="noreferrer">State Pattern</a></p>

<p>For the caluclator, meaningful stats may be</p>

<ul>
<li>EmtpyInput</li>
<li>OneNumberEntered</li>
<li>OneNumberAndOperatorEntered</li>
<li>ResultShown</li>
</ul>

<p>properties / behavior of states:</p>

<ul>
<li>There is <strong>only one active state</strong> (the initial state is EmptyInput)</li>
<li>Each state has only the required attributes (e.g. EmptyInput has no attributes,  OneNumberEntered has the entered number as attribute).</li>
<li>Each state can not be created without the attributes it needs. Therefore it is not possible to create invalid states</li>
<li>Each state can say which input can be handled and which not (e.g. corresponding buttons can be disabled)</li>
<li>Each state can change the active state.</li>
</ul>

<p>A simple impl. could look like:</p>

<pre><code>public interface IContext
{
    void ChangeState(State state);
}

public abstract class State
{
    public State(IContext context)
    {
        this.Context = context;
    }

    protected IContext Context { get; }

    public abstract void HandleInput(string input);

    public abstract bool CanHandleInput(string input);
}

public class EmptyInput : State
{
    public EmptyInput(IContext context) : base(context)
    {}

    public override bool CanHandleInput(string input) =&gt; "0123456789".Contains(input);

    public override void HandleInput(string input)
    {
        this.Context.ChangeState(new OneNumberEntered(context, input));
    }
}
</code></pre>

<p>The ViewModel or the MainWindow should implement the IContext interface, hold the active state and pass all input to the active state. That approach is understandable and maintainable because the complexity has been separated in different simple states and the problem of "handling input" can be handled for each state with the corresponding context information separatly.
    ....</p>
    </div>