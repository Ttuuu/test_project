<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The main problem</h2>

<p>The main issue here is that you define <code>i</code> in function of it being a "factor of 3", and then also try to use this number as a "factor of 5". This doesn't make any sense - as there is no inherent relationship between being a threefold and a fivefold number.</p>

<p>It would've made sense if you were doing it for 3 and 6, for example, because 3 and 6 are related:</p>

<pre><code>//i*3 is obviously always a multiple of 3
sum += 3 * i;

if ((3*i) % 2 == 0)
{
    //Now we know that i*3 is also a multiple of 6
}
</code></pre>

<p>But that is not the case here.</p>

<hr>

<h2>The <code>for</code> loop's readability</h2>

<p>I understand your idea, you wanted to only iterate over factors of three which keep the multiple under 1000. While I will suggest to change this approach (later in the answer), your approach could've been written in a much more readable manner:</p>

<pre><code>for( int i = 0 ; i &lt; 1000 ; i+=3 )
</code></pre>

<p>This will iterate over <code>i</code> values of <code>0,3,6,9,12,15,...</code> and will skip all values inbetween.</p>

<p>The benefit here is that you don't need to work with <code>i*3</code> all the time, you can just use <code>i</code> itself.</p>

<p><em>You will need to iterate over the multiple of 5 separately. However, should you keep using this approach, I would always suggest splitting these loops anyway.</em></p>

<hr>

<h2>The algorithm</h2>

<p>Your approach works, but it's not the easiest approach. If I put your approach into words:</p>

<blockquote>
  <p><em>Add every multiple of 3 to the sum.</em></p>
  
  <p><em>Also add the multiple of 5, but only if it's still below 1000, and it's not already divisble by 3.</em></p>
</blockquote>

<p>The issue here is in how you handle the multiples of five. You're working with an <code>i</code> that is defined as the allowed values for threefolds. For any i &gt; 200, you're effectively having to manually exclude this value. <strong>You're using a different approach for the 5 than you are using for the 3, even though the logic is exactly the same</strong>. That's not a reusable approach.</p>

<p>Secondly, there is a <strong>readability problem</strong>. Your code should be trivially readable, and I simply wasn't able to understand your intention. I had to google what the question was before I could understand what your code was trying to achieve.</p>

<p>So let me offer a better approach, first putting it into words:</p>

<blockquote>
  <ul>
  <li>Check every number from 0 to 1000 (not including 1000)</li>
  <li><strong>If</strong> it is divisible by 3 <strong>or</strong> it is divisible by 5, <strong>then</strong> add it to the sum.</li>
  </ul>
</blockquote>

<p>This can be put into code, step by step:</p>

<pre><code>// Check every number from 0 to 1000 (not including 1000)
for(int i = 0; i &lt; 1000; i++)
{
    var isDivisibleBy3 = i % 3 == 0;
    var isDivisibleBy5 = i % 5 == 0;

    //If it is divisible by 3 or it is divisible by 5
    if(isDivisibleBy3 || isDivisibleBy5)
    {
        //then add it to the sum
        sum += i;
    }
}
</code></pre>

<p>Note how the code exactly mirrors my algorithm description.</p>

<p>You don't <em>need</em> to use the booleans. I simply added them to simplify the example. <code>if(i % 3 == 0 || i % 5 == 0)</code> would be equally okay to use because it's still reasonably readable.   </p>

<p>If the calculations become more complex, I suggest always using the booleans so you neatly break your algorithm down to small and manageable steps. It will do wonders for your code readability, and it does not impact performance (the compiler will optimize this in a release build).</p>

<hr>

<h2>A LINQ variation</h2>

<p>This can be further shortened using LINQ:</p>

<pre><code>var sum = Enumerable.Range(0,1000)
              .Where(i =&gt; i % 3 == 0 || i % 5 == 0)
              .Sum();
</code></pre>

<p>LINQ is just a nicer syntaxt, but it uses a <code>for</code>/<code>foreach</code> iteration in the background, so I suspect it won't be much more performant than the previous example. But I do consider this highly readable.</p>

<hr>

<h2>Maximizing performance</h2>

<p>The previous suggestion maximizes readability, but it does so at the cost of performance, as it now has to loop over 1000 values and evaluate them all. You already linked several other answer that clearly dive deeper into the code in order to maximize the performance, I hope you can see that this dramatically impacts the readability.</p>

<p><a href="https://www.mathblog.dk/project-euler-problem-1/" rel="noreferrer">For example</a>:</p>

<pre><code>public void Solve(){
    result = SumDivisbleBy(3,999)+SumDivisbleBy(5,999)-SumDivisbleBy(15,999);
}

private int SumDivisbleBy(int n, int p){
    return n*(p/n)*((p/n)+1)/2;
}
</code></pre>

<p>By itself, I would have no idea what this code does. I can sort of understand the intention of <code>Solve()</code>, but it's not quite apparent how <code>SumDivisbleBy()</code> works.</p>

<p><code>SumDivisbleBy()</code> has effectively become <strong>impossible to maintain</strong>. If you needed to introduce a change, you would effectively have to reverse engineer it before you can alter it. This means that starting from scratch is the better option, which is clearly not a good thing.</p>

<p>However, when performance is the main focus, this is acceptable. I would, however, strongly urge you to <strong>document the algorithm in comments</strong> specifically to help future readers in understanding how/why this works.</p>

<p>Note that <strong>AlanT</strong>'s answer contains a more readable variant of the <code>SumDivisbleBy()</code> method, which already helps a lot with understanding the algorithm. The clear naming used clarifies <strong>what</strong> the algorithm does, which is the main goal of writing readable code (explaining <em>why</em> something works is only a secondary goal and not always required).</p>
    </div>