<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are really great answers here, but i want to show you how do i think when i see comments (and every time i want to add one).</p>

<blockquote>
  <p>Comments are used normally when you want to clarify your code. But, if
  your code is clear enough, the comment will become redundant. And
  reading redundant things makes ourselves feels like we are wasting
  time, so naturally the comment start to be innecesary: deletable.</p>
</blockquote>

<p>I will suppose you understood the given answers by others here, so i will focus on comments:</p>

<pre><code>def is_month_valid(month):
    return 0 &lt; month &lt;= 12 ## If month is between 1 and 12, return 
</code></pre>

<p>If you are in a situation where you <em>want to keep your comment</em> because you find it clearer than your code: <strong>Make your code look a bit more like that comment</strong>. </p>

<p>For example, you could try thinking:</p>

<pre><code>return 0 &lt; month &lt;= 12    ## If month is between 1 and 12, return
return 1 &lt;= month &lt;= 12 
return is_between(month, 1, 12)
return is_the(month).between(1, 12)
return comparable(month).is_between(1, 12)  ## Or you could call is_month_valid(comparable(month)) instead and this gives you...
return month.is_between(1, 12) ## If month is between 1 and 12, return
## Also, if month.is_between(1, 12): return... I think the other answers actually answers why this should be discarded. If not, keep reading and think why.
</code></pre>

<p>All of them are valid solutions. And if you see, the last one will make the comment really redundant:</p>

<pre><code>def is_month_valid(month):
    return month.is_between(1, 12) ## If month is between 1 and 12, return 
</code></pre>

<p>So, why you will keep this comment? The code is clear, and actually, that comment is making your code look unclean, so you don't have another choice than delete that.</p>

<p>Yay!!... Fixed? ... Is this better? We just focus on readability and nothing else? Not exactly. <strong>You have to keep in mind the complexity that each solution has</strong>. So:</p>

<pre><code>return 0 &lt; month &lt;= 12    ## If month is between 1 and 12, return
</code></pre>

<p>This is a pretty good solution. Why? Is readable to the point it makes the comment redundant. And you don't need nothing else to make it work. But</p>

<pre><code>return 1 &lt;= month &lt;= 12    ## If month is between 1 and 12, return
</code></pre>

<p>Is this better? The comment now is more redundant. And you didn't add complexity. This is like a free change. Also, this doesn't allow numbers between (0, 1) as valid months. So yes, this is actually better.</p>

<pre><code>return is_between(month, 1, 12) ## If month is between 1 and 12, return
</code></pre>

<p>Well, at least for me, this is less legible than previous ones. And needs you to create another function to make it work. Is this function worth enough? Well, one could point that if you create it you could reuse that function in different places, like in <code>is_between(year, 1, 10000)</code>. And it allows you to centralize integer validations here... <strong>But, you have to decide. That's programming actually: Take decisions and justify them.</strong> (<strike>Like naming things...</strike>)</p>

<pre><code>return is_the(month).between(1, 12) ## If month is between 1 and 12, return
</code></pre>

<p>This is actually more redundant and more readable. But, now, you've created a <em>class</em> (another function) with an arguable name, and also another function associated (like a <em>method</em>). However, this maintains the pros from last solution. At this point, this is starting to feel like an unnecessary over engineered solution, but we are just explaining our thinkings.</p>

<pre><code>return comparable(month).is_between(1, 12) ## If month is between 1 and 12, return
</code></pre>

<p>Why <code>is_the</code> an arguably name? Think that some time has passed and you see a function called <em>is_the</em>. My main reaction would be "What the heck is this thing!". It says nothing. You can't know it's purpose without reading it inner code. So, this solution fixes a bit that arguably name. Now <code>month</code> is <em>comparable</em> to 1 and 12. However, this is still over engineering for a little advantage (helps to <em>dry</em>).</p>

<pre><code>return month.is_between(1, 12) ## If month is between 1 and 12, return
</code></pre>

<p>Now, this is better. That code is more redundant and readable than previous solutions. But, what is its price? Now, every time you want to call <code>is_month_valid</code> you depend on sending a <em>comparable object</em> first: <code>is_month_valid(comparable(month))</code>. And don't forget you still have to create <em>comparable</em> and <em>is_between</em> too to make this work. But, is this over engineered solution needed? That will depend on how necessary is this in your program: how much this helps to <em>dry</em>, and how probably is this going to change in the future. If it's not stable, could cause <em>more problems than fixes</em>.</p>

<p>Of course, for every solution exists a better one <em>at a particular time</em>. To get them you just have to continue over engineering it and balance their pros and cons. I will not continue doing that because i think is clear now. And looking at the size of your program, i'm sure the last solution is too much, while the second one (<code>1 &lt;= month &lt;= 12</code>) is simple and clear.</p>

<hr>

<p>And keep doing the same for every comment you have, or you are tempted to make. </p>

<pre><code>monthlist1 = [1,3,5,7,8,10,12] ## monthlist for months with 31 days.
monthlist2 = [4,6,9,11] ## monthlist for months with 30 days.
monthlist3 = 2 ## month with month with 28 days.
</code></pre>

<p>Wouldn't those lines be replaceable with this?</p>

<pre><code>months_with_31_days = [1,3,5,7,8,10,12] ## monthlist for months with 31 days.
months_with_30_days = [4,6,9,11] ## monthlist for months with 30 days.
month_with_28_days = 2 ## month with month with 28 days.
</code></pre>

<p>Redundant comments now, they are just messing with your code.</p>

<pre><code>months_with_31_days = [1,3,5,7,8,10,12]
months_with_30_days = [4,6,9,11]
february = 2 ## And month_with_28_days? Isn't that just february?.
</code></pre>

<p>Also, like <em>@heather</em> said, i would prefer to make a function <em>days_in_month</em> instead of this. But, my focus here is to show how do i think when facing comments.</p>

<hr>

<pre><code>for month in monthlist: ## iterate through monthlist.
</code></pre>

<p>I know this is going to dissapear, but, is that comment actually needed? Is <code>for (each) month in monthlist:</code> less clear than <em>iterate through monthlist</em>? I'm sure most programmers are going to recognize what is this line doing by just reading it. In this case, i think the comment isn't needed.</p>

<hr>

<pre><code>if month == mon: ## Check if the parameter month equals to any month with 31 days.
</code></pre>

<p>This is an interesting comment, because you need some context to understand this code. You can't just read that and know what is happening. You need this picture:</p>

<pre><code>def is_day_valid(month, day):
    ...
    for mon in months_with_31_days:
        if month == mon: ## Check if the parameter month equals to any month with 31 days.
</code></pre>

<p>Now, you can understand why you use <code>mon</code> instead of <em>month</em>, and why is there another <em>month</em> variable. <strong>This situation; when you need some context to understand a line; is undesirable</strong>. <em>Luckily</em>, you've put a comment with the required context to understand it, but, is necessary? This was solved by <em>@Gerrit0</em>:</p>

<pre><code>if month in months_with_31_days: ## Check if the parameter month equals to any month with 31 days.
</code></pre>

<p>That comment does add noise! Remove it and its perfect. But what can you do if you needed that <em>for</em>?</p>

<pre><code>for month_with_31_days in months_with_31_days:
    if month == month_with_31_days: ## Check if the parameter month equals to any month with 31 days.
</code></pre>

<p>Now is possible to forget that <code>for</code> line while reading the <code>if</code> line if you want. You don't care which <em>month with 31 days</em> it is, but you know if you enter inside that <code>if</code> block is because <code>month</code> have 31 days. And you can over engineer solutions like we did previously for getting more readability in that single line... Check for example <code>if days_in(month) == 31:</code>, that will move the previous <em>for</em> line from <code>is_day_valid</code>. <strong>Try to make functions short and readable</strong>. With less lines of code in each function, you have less probability to need more context.</p>

<hr>

<p>What about this?</p>

<pre><code>date = input("Enter the date in mm/dd/yyyy format: ") ## Input date in the given format.
</code></pre>

<p>If you read that line, you know you are asking the user for an input and saving it in a variable called <code>date</code>. You are actually saying less in that comment. However, redundant and needless. And what about dividing that user interaction into another function. For example:</p>

<pre><code>date = ask_user_for_input_a_date()
</code></pre>

<p>Too verbose, and unnecessary in this case. However, i want to point that, when you start to have multiple inputs, you will start asking yourself where to ask those inputs. The same happens with the outputs. One good practice for novice is to divide your <code>main</code> function like:</p>

<pre><code>def main():
    inputs = take_inputs() ## You could validate inputs inside if you want
    solution = solve_problem(inputs) 
    show(solution)
</code></pre>

<p>You gather all needed information before starting your problem (<em>group your inputs</em>), then solve the problem completely (<em>group your outputs</em>) and lastly show your solution. If you have problems related to inputs, you know where to start looking for. The same applies to the core logic of your problem and final presentation. This is a nice starting point, and fit well on problems that don't need user interaction <strong>while</strong> solving it. </p>

<hr>

<p>However, nice start, seriously. I've started my programming life with the same problem; <em>date validation</em>, and my code was a lot worse than yours :) </p>
    </div>