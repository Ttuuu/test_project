<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I have the following questions with regards to the above code:</p>
  
  <ol>
  <li><p>Is there a smarter way to approach this question?</p></li>
  <li><p>How can I improve the space and time complexity of the given question?</p></li>
  <li><p>Have I gone too overboard by using BigInteger Library for this question?</p></li>
  </ol>
</blockquote>

<p>Yes, as follows, and yes. Consider</p>

<blockquote>
  <blockquote>
    <p>Modulus your output to 10^9+7</p>
  </blockquote>
</blockquote>

<p>You seem to have taken that instruction rather literally. Multiplication is not constant time when you're working with <code>BigInteger</code>. If all of the multiplications are carried out instead in <code>long</code>s modulo M=10^9+7 then they become effectively constant time.</p>

<p>This gives you two main options:</p>

<ol>
<li>Compute the two values you currently compute, modulo M, and then use <a href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers" rel="nofollow noreferrer">extended Euclid</a> to compute a multiplicative inverse M (which is prime by design) to perform the division.</li>
<li>Use a simple sieve to compute the prime factorisation of each number up to n; then find the power of each prime independently as <span class="math-container">\$\nu_p \left(\binom{n}{r}\right) = \nu_p (n!) - \nu_p(r!) - \nu_p((n-r)!)\$</span> and <span class="math-container">\$\nu_p(k!) = \sum_{i=1}^k \nu_p(i) \$</span>. Finally multiply together the appropriate prime powers modulo M.</li>
</ol>

<p>Postscript: it occurs to me that if you take the first of these alternatives, using <code>BigInteger</code> <em>would</em> mean that you don't need to implement Euclid yourself, as you could use <code>BigInteger.modInverse</code>. It would still be advisable to apply <code>mod</code> frequently to keep the size of the integers down, but "to avoid reimplementing the wheel" is a good reason to use <code>BigInteger</code>.</p>
    </div>