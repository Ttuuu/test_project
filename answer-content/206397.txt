<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid regular expressions</h2>

<blockquote>
  <p>Some people, when confronted with a problem, think “I know, I'll use regular expressions.” Now they have two problems. -- <em>Jamie Zawinsky</em></p>
</blockquote>

<p>Your problem is simple enough that you don't need any regular expressions to solve it. The input format is very simple: it's a single command with underscores separating the various parameters. The right tool for this job is to simply split the input using <code>'_'</code> as the separator. Since you are using the <code>String</code> class to hold strings, use <code>indexOf()</code> to find the position of the next separator. For example, to loop over all tokens:</p>

<pre><code>String input = ...;
int start = 0;
int pos;

while ((pos = input.indexOf('_', start)) != -1) {
    String token = input.substring(start, pos);
    // do something with this token
    start = pos + 1;
}
</code></pre>

<p>Instead of a loop though, you probably want to write a class that will handle finding the next token for you, such that you can write something like:</p>

<pre><code>String input = ...
Tokenizer tokenizer(input);

String type = tokenizer.get_next_token();
if (type != "MSv2")
    return false;

String shield = tokenizer.get_next_token();
...

String command = tokenizer.get_next_token();

if (command == "speed")
    // handle speed command
else if (command == "direction")
    // handle direction command
else ...
</code></pre>

<p>This code avoids the overhead of using the regular expression library, and avoids having to <code>Match()</code> multiple regular expressions against the same input string. Your code will be faster and consume less flash memory and RAM.</p>

<h2>Avoid casting <code>String</code>s to <code>char</code> arrays and back</h2>

<p>Don't use <code>String</code> if you are going to use functions like <code>strtol()</code> a lot. It is better to use <code>Serial.readBytes()</code> and read directly into a <code>char</code> array than to first read it into a <code>String</code> and then convert it. Or if you really want to use <code>String</code>, use the <code>c_str()</code> member function to get access to the underlying <code>char</code> array, like so: <code>strtol(string.c_str(), NULL, 16)</code>.</p>

<h2>Don't forget to account for the NUL terminator</h2>

<p>C strings must always be terminated by a NUL byte. When you convert a <code>String</code> to a <code>char</code> array, you must ensure the array has room for the NUL byte. So if you have a <code>String</code> of 2 characters, the <code>char</code> array must be at least 3 characters long. But, as mentioned above, just use <code>c_str()</code> and you will avoid this issue.</p>

<h2>Avoid global variables</h2>

<p>You can move the declaration of <code>toWrite</code> into <code>loop()</code>. Keep variable declarations close to where they are actually used.</p>

<h2>Check that parsing of numbers actually succeeded.</h2>

<p>You call <code>strtol()</code> but you don't check if the value was correctly parsed. What happens if the wrong command is sent to the Arduino, or if there is a glitch on the serial bus and the message is garbled? What damage might be done if <code>strtol()</code> returns <code>0</code>? If safety is important, also consider adding a checksum to the message.</p>
    </div>