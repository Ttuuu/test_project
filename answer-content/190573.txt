<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Reactions on your points:</p>

<ol>
<li>The extra classes for <code>Time</code>, <code>TimeSpan</code>, etc. make it easier to read
and use, although you have some extra code.</li>
<li>Structs are not used to often, classes have more possibilities. It is better to not have a lot of parameters, so adding an new Time object is better.</li>
<li>I think it can be a bit more complex. See: <a href="https://stackoverflow.com/a/371348/200824">Why is it important to override GetHashCode when Equals method is overridden?
</a></li>
</ol>

<p>Overal it looks good. Some points:</p>

<ul>
<li><p>It would be good to also add some unittests, to see how to use it. </p></li>
<li><p>Add access modifiers to the classes.</p></li>
<li><p>Use string interpolation.</p>

<pre><code>public override string ToString() =&gt; $"{_startDate} - {_endDate}";
</code></pre></li>
<li><p>Do not use Exception but a more specialised exception or a custom exception.</p></li>
</ul>

<p><strong>Update:</strong></p>

<ul>
<li>The if conditions in <code>GetOverlappingTime</code> are a bit hard to read. It would be good to make simple (Extention) methods for those.</li>
</ul>

<p>Like: </p>

<pre><code>public TimeSpan GetOverlappingTime(DateRange range)
{
    if (range.AreOutOfRange(_startDate, _endDate)) { return TimeSpan.Zero; }
    if (range.AreInRange(_startDate, _endDate)) { return _endDate - _startDate; }
    // ...
 }

public static class Extentions
{
    public static bool AreOutOfRange(this DateRange range, DateTime startDate, DateTime endDate)
    {
        return startDate &gt;= range._endDate || endDate &lt;= range._startDate;
    }

    public static bool AreInRange(this DateRange range, DateTime startDate, DateTime endDate)
    {
        return startDate &gt;= range._startDate &amp;&amp; endDate &lt;= range._endDate;
    }
}
</code></pre>
    </div>