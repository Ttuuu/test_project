<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Making the code more modern</h1>

<p>Your code looks very old. This is because the <code>&lt;iostream.h&gt;</code> header in line 1 is not used anymore since about the year 1998. Same for the <code>&lt;dos.h&gt;</code> and <code>&lt;conio.h&gt;</code> headers.</p>

<p>To get your program to compile with a modern C++ compiler, I had to replace the first paragraph of your code with this:</p>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;iostream&gt;

using std::cin;
using std::cout;
using std::endl;

extern "C" {
    void clrscr();
    bool kbhit();
    void delay(int);
    int getch();
}
</code></pre>

<p>I only did this change to make your code valid for my compiler. It won't run after these changes. Therefore you should not apply these changes to your code. Just leave your code as it is. Don't be surprised though when you try to run your code in a more modern environment, as this won't work.</p>

<h2>Putting text on the screen</h2>

<p>I noticed that you use long sequences of <code>\n</code> and <code>\t</code> to place the text on the screen. Since you are using the <code>clrscr</code> function, I suppose that the function <code>gotoxy</code> is also defined. If so, you can replace this code:</p>

<pre class="lang-cpp prettyprint-override"><code>    clrscr();

    cout &lt;&lt; "\n\n\n\n\n\n\n\n\n\n\t\t\t\tGAME OVER!!!\n\t\t\t\tFINAL SCORE: " &lt;&lt; score;
</code></pre>

<p>with this code:</p>

<pre class="lang-cpp prettyprint-override"><code>    clrscr();

    gotoxy(32, 10);
    cout &lt;&lt; "GAME OVER!!!";
    gotoxy(32, 11);
    cout &lt;&lt; "FINAL SCORE: " &lt;&lt; score;
</code></pre>

<p>This code takes more vertical space than before, but there is no need anymore to count the number of <code>\n</code> characters in the string.</p>

<h2>Input methods</h2>

<p>You are using two fundamentally different input methods:</p>

<ol>
<li><p><code>cin &gt;&gt; choice</code>, which reads a character, but the program only sees this character after Enter has been pressed. This is not suitable for a snake game.</p></li>
<li><p><code>getch()</code>, which reads a single key without requiring the Enter key. This function works closely together with <code>kbhit()</code>.</p></li>
</ol>

<p>You should not mix these two, at least not in the same phase of the game. There is the dialog phase ("play again?"), which should use <code>cin &gt;&gt; choice</code>, and there is the playing phase, which should use <code>kbhit()</code> and <code>getch()</code> (in this order).</p>

<h2>Reducing the scope of variables</h2>

<p>Your code declares (among others) these variables:</p>

<pre class="lang-cpp prettyprint-override"><code>unsigned int i, j, k;
</code></pre>

<p>These variables are used later by pieces of code that are completely unrelated to each other. Therefore it doesn't make sense that these unrelated code pieces use the same variables. One of these pieces is:</p>

<pre class="lang-cpp prettyprint-override"><code>    for (i = 0; i &lt; no_rows; i++)
    {
        for (j = 0; j &lt; no_columns; j++)
            board[i][j] = ' ';
    }
</code></pre>

<p>After the opening parenthesis of each <code>for</code> loop, you should <em>declare</em> the variable, which is then <em>in scope</em> for the rest of the <code>for</code> loop. The changed code is:</p>

<pre class="lang-cpp prettyprint-override"><code>    for (unsigned int i = 0; i &lt; no_rows; i++)
    {
        for (unsigned int j = 0; j &lt; no_columns; j++)
            board[i][j] = ' ';
    }
</code></pre>

<p>When you do that in the other <code>for</code> loops as well, there will be a compile error:</p>

<pre class="lang-cpp prettyprint-override"><code>        head_map[i] = temp1;
        board[head_map[i].row][head_map[i].column] = token;
</code></pre>

<p>This compile error means that your code is somewhat unusual. You used <code>i</code> in a loop, and usually that variable is not needed after the loop. Not so in this case.</p>

<p>When the <code>for</code> loop is finished, <code>i</code> will be the same as <code>snake_length</code>. Therefore you can replace the code with the very similar:</p>

<pre class="lang-cpp prettyprint-override"><code>        head_map[snake_length] = temp1;
        board[head_map[snake_length].row][head_map[snake_length].column] = token;
</code></pre>

<p>This makes the intention of the code a bit clearer, since for experienced programmers the variable name <code>i</code> means a variable that changes its value often, such as in your loops that fill the board with spaces. That name <code>i</code> would be misleading here, since the code handles the tail of the snake. The expression <code>head_map[snake_length]</code> expresses this more clearly than the expression <code>head_map[i]</code>.</p>

<h2>Redundant conditions</h2>

<p>Further down, you have this code:</p>

<pre class="lang-cpp prettyprint-override"><code>        if((key_press == 'w' || key_press == 'W') &amp;&amp; (key_press != 's' || key_press != 'S') &amp;&amp; (direction_head != 'D'))
</code></pre>

<p>This code is redundant. If the pressed key is <code>'w'</code> or <code>'W'</code>, it cannot be <code>'s'</code> at the same time. Therefore you don't need to check for <code>'s'</code> at all.</p>

<p>Furthermore, the expression <code>key_press != 's' || key_press != 'S'</code> will always be true. There are 3 cases:</p>

<ol>
<li><code>key_press != 's'</code>: the first condition is true, therefore the whole expression is true.</li>
<li><code>key_press != 'S'</code>: the second condition is true, therefore the whole expression is true.</li>
<li>any other key: both conditions are true, therefore the whole expression is true.</li>
</ol>

<p>Therefore, the simplified code is:</p>

<pre class="lang-cpp prettyprint-override"><code>        if((key_press == 'w' || key_press == 'W') &amp;&amp; (true) &amp;&amp; (direction_head != 'D'))
</code></pre>

<p>This can be further simplified to:</p>

<pre class="lang-cpp prettyprint-override"><code>        if((key_press == 'w' || key_press == 'W') &amp;&amp; direction_head != 'D')
</code></pre>

<h2>Pausing the game</h2>

<pre class="lang-cpp prettyprint-override"><code>        if(key_press == 'p' || key_press == 'P')
            delay(5000);
</code></pre>

<p>This looks wrong. When I press the <code>'p'</code> key, I expect the game to pause until I explicitly continue it by pressing <code>'p'</code> again. Waiting 5 seconds is something entirely different.</p>

<p>To implement the pause correctly, you should define a global variable:</p>

<pre class="lang-cpp prettyprint-override"><code>bool paused = false;
</code></pre>

<p>After that, adjust the code from above:</p>

<pre class="lang-cpp prettyprint-override"><code>    if(kbhit())
    {
        ...

        if(key_press == 'p' || key_press == 'P')
            paused = !paused;
    }

    if (paused)
        return;
</code></pre>

<p>Since the second part of the <code>Input</code> function does not deal with the input at all but instead moves the snake, that part is skipped as long as the game is paused.</p>

<h2>Final words</h2>

<p>Your code is structured well, especially since the code of the <code>main</code> function gives a rough overview over the whole game flow, just as it should.</p>

<p>You named the functions well, which makes the <code>main</code> function easy to grasp.</p>

<p>There are many more things that can be said about your code, but they are not urgent. Getting a few ideas and thinking about them is easier than getting a hundred tips at once.</p>
    </div>