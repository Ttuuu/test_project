<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I applaud any use sequential machine.  A <em>primitive</em> that simulates a state machine... fruit only the tree of J could produce... why resist?</p>

<p>So while in that way <code>;:</code> is quintessential J, state machines are, on the other hand, procedural in mindset.  Idiomatic J, by contrast, tends to frame the problem as a <em>whole</em> -- to solve in a single leap, rather than step by step.</p>

<p>How can we do that in this case?</p>

<p>The big trick is to encode the directions as complex numbers.  An <code>L</code> just multiplies the current direction by <em>i</em>, or <code>0j1</code> in J.  And an <code>R</code> multiplies by <code>0j_1</code>.  Then your direction at any point in time is just the scan product <code>*/\</code> of your starting position and the sequence of encoded <code>L</code> and <code>R</code>.  For this step, <code>M</code> is encoded as <code>1</code>, since it doesn't alter the direction.</p>

<p>Making the above concrete, let's see how the first example looks.  The encoded commands (top) and their scan product (bottom):</p>

<pre><code>┌───┬───┬──┬────┬────┬───┬─┬───┬───┬───┐
│0j1│0j1│1 │0j1 │1   │0j1│1│0j1│1  │1  │
├───┼───┼──┼────┼────┼───┼─┼───┼───┼───┤
│0j1│_1 │_1│0j_1│0j_1│1  │1│0j1│0j1│0j1│
└───┴───┴──┴────┴────┴───┴─┴───┴───┴───┘
</code></pre>

<p>We end facing <code>N</code>, as desired.</p>

<p>Similarly, thinking of adding complex numbers as vector addition, the final position is just the sum of the initial position and every direction vector corresponding to an <code>M</code>.  The latter sum is just the sum of the element-wise product of the bottom row above, and the boolean mask of <code>M</code>s:</p>

<pre><code>┌───┬──┬──┬────┬────┬─┬─┬───┬───┬───┐
│0j1│_1│_1│0j_1│0j_1│1│1│0j1│0j1│0j1│
├───┼──┼──┼────┼────┼─┼─┼───┼───┼───┤
│0  │0 │1 │0   │1   │0│1│0  │1  │1  │
└───┴──┴──┴────┴────┴─┴─┴───┴───┴───┘
</code></pre>

<p>Using your code for argument parsing, and putting this all together, we get:</p>

<pre><code>NB. convert direction to complex number

j =: 0j1 ^ 'ENWS' i. ]                            

NB. full solution

final =. 3 : 0
  'a b dir cmds' =. y
  dirs=. */\ (j dir) , 0j1 ^ 'ML.R' i. cmds       NB. all directions
  pos =. (a j.&amp;". b) + +/ dirs * 0 , 'M' = cmds   NB. all positions
  (+. pos) ; j inv {: dirs
)
</code></pre>

<p>and running it:</p>

<pre><code>f=. 0 : 0
5 5
1 2 N
LMLMLMLMM
3 3 E
MMRMMRMRRM
)

input =.  _4]\ 2 }. '' cut (' ',LF) charsub f

echo input
echo final"1 input
</code></pre>

<p>produces:</p>

<pre><code>┌─┬─┬─┬──────────┐
│1│2│N│LMLMLMLMM │
├─┼─┼─┼──────────┤
│3│3│E│MMRMMRMRRM│
└─┴─┴─┴──────────┘
┌───┬─┐
│1 3│N│
├───┼─┤
│5 1│E│
└───┴─┘
</code></pre>

<p><a href="https://tio.run/##fZA7b4MwFIX3@yuOMtQQIgeaZkmVpVI6YQY6dElaAQHFiJd4RK2q/nZ6TUrH2h7uPdb5jq/zkcbgSSKpq2va9jjrNk16XVfoaxbLpkg/UA1lnLZEOfY7uLmHN4hD8PoioCVO@GcRGXg2FAW6uhgMmCjTVVRgL7EB4wgQEWKTjKQ8d8LcfLLKQsflcn2ElZvOxmpOV74Mp3Tj@M0ySREH/Y3QMaSpO8OzIuTybiER23DgrCc4lnAZKRRHzqAZwj49MyxHmt7GI3Lo6oqv3eQne8yY7U5TbLElD/cIyFe3rWjDEx5IqdCcMFRkE@mqGXrzJLw/nI5s@JYQAgmLloBY@c82kkvUdkOMjChNLjUmz62c/m7h3aTxBw" rel="nofollow noreferrer" title="J – Try It Online">Try it online!</a></p>
    </div>