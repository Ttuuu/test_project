<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to C++.  Nice and readable C++ code!</p>

<p>I'm not familiar with SFML, but here are my suggestions about improving the code:</p>

<ul>
<li><p>When you get familiar with C++, comments like these can be deleted: <code>// Includes //</code> <code>// Declare function //</code> <code>// Start program //</code>.</p></li>
<li><p>You don't need to declare a function first if you define it immediately after.</p></li>
<li><p>These constants can be made <code>constexpr</code>:</p>

<pre><code>const int WIDTH = 1280;
const int HEIGHT = 960;
</code></pre>

<p>Also, <code>ALL_CAPS</code> names are generally reserved for macros.  Constants can use <code>lower_case</code> names instead.</p></li>
<li><p>This <code>if</code> statement (note that <code>::EventType</code> is sometimes included but sometimes omitted):</p>

<pre><code>if (event.type == sf::Event::EventType::Closed) {
    // ...
} else if (event.type == sf::Event::MouseButtonPressed) {
    // ...
}
</code></pre>

<p>can be replaced by a <code>switch</code> statement since <a href="https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Event.php#af41fa9ed45c02449030699f671331d4a" rel="nofollow noreferrer"><code>event.type</code> happens to be an enum</a>.  Also, since you are using <a href="/questions/tagged/c%2b%2b20" class="post-tag" title="show questions tagged 'c++20'" rel="tag">c++20</a>, you can use the <code>using enum</code> feature to simplify your code if your compiler supports it:</p>

<pre><code>switch (event.type) {
    using enum sf::Event::EventType;
case Closed:
    // ...
    break;
case MouseButtonPressed:
    // ...
    break;
}
</code></pre></li>
<li><p>This:</p>

<pre><code>int mouse_x = mouse.getPosition(render_window).x;
int mouse_y = mouse.getPosition(render_window).y;
std::cout &lt;&lt; mouse_x &lt;&lt; " " &lt;&lt; mouse_y &lt;&lt; std::endl;
</code></pre>

<p>can be simplified with structured bindings since <a href="https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Vector2.php" rel="nofollow noreferrer"><code>Vector2i</code></a>, the return type of <code>getPosition</code>, seems to have public members.  (I almost wrote "don't use <code>std::endl</code>," but then I realized that flushing semantics is appropriate here!)</p>

<pre><code>auto [x, y] = mouse.getPosition(render_window);
std::cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; std::endl;
</code></pre></li>
<li><p>The rendering code deserves a separate function:</p>

<pre><code>image.setPixel(mouse_x, mouse_y, sf::Color::White);

// Get random size of snowflake //

int size = (rand() % 20) + 10;

for (int i = 1; i &lt; size; i++) {
    image.setPixel(mouse_x + i, mouse_y, sf::Color::White);
    image.setPixel(mouse_x - i, mouse_y, sf::Color::White);
    image.setPixel(mouse_x, mouse_y + i, sf::Color::White);
    image.setPixel(mouse_x, mouse_y - i, sf::Color::White);
    image.setPixel(mouse_x + i, mouse_y + i, sf::Color::White);
    image.setPixel(mouse_x - i, mouse_y - i, sf::Color::White);
    image.setPixel(mouse_x + i, mouse_y - i, sf::Color::White);
    image.setPixel(mouse_x - i, mouse_y + i, sf::Color::White);
}
</code></pre>

<p>Also, consider using the <code>&lt;random&gt;</code> library instead of <code>rand</code>:</p>

<pre><code>std::mt19937_64 engine{std::random_device{}()}; // global or static
</code></pre>

<p>then</p>

<pre><code>std::uniform_int_distribution&lt;int&gt; dist{10, 29}; // clearer than (rand() % 20) + 10
int size = dist(eng);
</code></pre></li>
</ul>
    </div>