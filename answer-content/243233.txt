<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Answers to your questions</h1>

<blockquote>
  <p>How would you rate my code? What to improve?</p>
</blockquote>

<p>It is certainly not the worst code, but there are areas of improvement, which I'll discuss below.</p>

<blockquote>
  <p>How to improve its readability? (I tried an object oriented implementation in order to improve readability, I don't know whether that's right)</p>
</blockquote>

<p>I would start to use a code formatter to ensure the code is formatted in a consistent way. Your use of spaces is very inconsistent, some lines have spaces between literally everything where spaces are possible, and in others there is no space to be seen except for the indentation.</p>

<p>Apart from that, avoid abbreviating variable and function names unnecessarily. For example, instead of <code>wid</code> write <code>widget</code>, instead of <code>imgs</code> write <code>images</code>. Unnecessary abbreviations might make it harder to search the code, and make things confusing. (For example, if you didn't see its declaration before, can you tell if <code>wid</code> a widget, a width or a window ID?)</p>

<blockquote>
  <p>Is there a best practice I'm not following or missing?</p>
</blockquote>

<p>Yes, we'll discuss them.</p>

<blockquote>
  <p>I've used some global varibles, is that bad?</p>
</blockquote>

<p>It's best to avoid using global variables as much as possible. If they are really necessary then by all means use them, but the issue is that they pollute the global namespace, make it harder to modularize your code, and might result in issues if you have multithreaded code.</p>

<blockquote>
  <p>I've just heard the term unit test cases. Does this program require that?</p>
</blockquote>

<p>No, programs don't require unit test cases. They are however a method for ensuring your code has a high quality.</p>

<h1>When writing C++ code, prefer to use C++ libraries</h1>

<p>Instead of using the C version of GTK, I strongly advise you to use <a href="https://www.gtkmm.org/en/" rel="nofollow noreferrer">gtkmm</a> instead. It should result in shorter, cleaner code, and will probably help get rid of the global <code>GtkWidget</code> variables.</p>

<h1>Avoid forward declarations</h1>

<p>Unless you have functions with circular dependencies, you should not need to write forward declarations of functions. Just ensure that a function that is called by other functions comes before those other functions in your source code.</p>

<p>Doing this avoids repeating yourself.</p>

<h1>Avoid <code>using namespace std</code></h1>

<p>See <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">this StackOverflow question</a> for a rationale.</p>

<h1>Class member value initialization</h1>

<p>Instead of initializing values in the body of the constructor, prefer using a member initializer list, like so:</p>

<pre><code>class KNearestNeighbors {
    int k;
    ...
    KNearestNeighbors (int n_neighbors = 5): k(n_neighbors) {}
</code></pre>

<p>While it is trivial here, once you have member variables with non-trivial types it has <a href="https://stackoverflow.com/questions/926752/why-should-i-prefer-to-use-member-initialization-list">certain advantages</a>.</p>

<h1>Avoid writing empty constructors and destructors</h1>

<p>C++ provides default constructors and destructors for you if you don't specify them yourself. So for example in <code>class sudoku</code>, you can avoid writing the constructor and destructor. In general, don't write what you don't need to write.</p>

<h1>Have <code>sudoku::solve()</code> return a <code>sudoku</code></h1>

<p>What is the difference between an unsolved Sudoku and a finished one? It's just that some more of its squares have been filled with numbers. So the solution to a Sudoku is just another Sudoku (albeit a trivial one). You can use this to return the result of the <code>solve()</code> function, and this also gets rid of another global variable. Also, instead of passing in a whole new array to <code>solve()</code>, I would expect the member function <code>solve()</code> to solve the current sudoku.</p>

<p>Another issue is that a given configuration might not have a solution, so apart from the resulting 9x9 squares, it might be nice to return a value indicating whether it was solved correctly or not. There are several ways to do this, you could use a <code>std::pair&lt;sudoku, bool&gt;</code> to return the 9x9 squares and a boolean, or maybe add a <code>bool solved</code> member variable to <code>class sudoku</code> itself, or use the C++17 <code>std::optional&lt;sudoku&gt;</code>.</p>

<p>With this in place, it should be possible to rewrite your <code>solve()</code> to not have an <code>int arr[9][9]</code> parameter.</p>

<h1>Use <code>hypotf()</code> to calculate the distance between two points</h1>

<p>For example, in <code>scanner::distance()</code>, you could write:</p>

<pre><code>return std::hypotf(i - p.x, j - p.y);
</code></pre>

<h1>Try to separate computation from presentation</h1>

<p>To avoid the different components of your program depending too much on each other, you should try to separate computation from presentation. For example, in <code>scanner::preprocessing()</code>, you are showing the intermediate results in windows. However, now you've tightly coupled this function with the way you output those results. It would be better to just optionally return the intermediate results, and leave it up to the GUI code to present those results if desired.</p>
    </div>