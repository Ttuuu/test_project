<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prefer constants to macros</h1>
<p>Preprocessor macros are tricky to use correctly - they have no namespace, no type and global scope.  We can replace <code>SIZE</code> with a private constant member:</p>
<pre><code>#include &lt;cstdint&gt;

class Stack
{
     // private
     constexpr std::size_t array_length = 50;
}
</code></pre>
<p>I renamed it, because we might later want to creat <code>size()</code> and <code>capacity()</code> members to act like the standard containers.</p>
<h1>Avoid <code>using namespace std;</code></h1>
<p>The <code>std</code> namespace isn't one that's designed to be imported wholesale like that.  Avoid surprises, and be clear where identifiers come from, by importing just the names you need, in the smallest reasonable scope - or just qualify them fully (<code>std::</code> is intentionally very short!).</p>
<h1>Don't mix errors with output</h1>
<p>Error messages should be streamed to <code>std::cerr</code> rather than <code>std::cout</code>.</p>
<h1>Improve the error reporting</h1>
<p>Do you see the problem with <code>pop()</code>?</p>
<blockquote>
<pre><code>int Stack::pop() {
    if (tos == 0) {
        cout &lt;&lt; "Stack underflow " &lt;&lt; endl;
    }
    else {
        return stackArray[--tos];
    }
}
</code></pre>
</blockquote>
<p>In the underflow case, there's no <code>return</code> statement.  Silly errors like that suggest that you compiled without a good set of warnings enabled.</p>
<p>We don't have any way to indicate to the program (rather than the end user) that overflow or underflow has occurred; the C++ way to do so is to throw an exception in those cases.  Then the program can decide whether and how to inform the user about the problem.</p>
    </div>