<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a cool idea.  You can improve the code by using the STL utilities that support currying/composition.</p>

<p>For currying, there is <code>std::bind</code> and <code>std::bind_front</code>:</p>

<pre><code>// this is the STL way to curry functions
auto demoSTL() {
    auto sum1 = std::bind_front(sum, 1);
    auto sum123 = std::bind_front(sum1, 2, 3);
    auto call = sum123();
    return call;
}
</code></pre>

<p>You can make template wrappers around <code>std::bind_front</code> to make the interface look like your <code>$</code> function. Here's some starter code: <a href="https://godbolt.org/z/S-kni4" rel="nofollow noreferrer">https://godbolt.org/z/S-kni4</a>.</p>

<p>One major advantage of the STL functions is that they do type checking for you.  It's always nice to have (relatively) bug free code written for you for free!  So you might as well use that instead of writing complex <code>enable_if</code>s and <code>tuple_cat</code>s.</p>

<p>One of the hard parts of currying as you've implemented it is checking whether the <code>operator()</code> should return a value or another currying object.  This is a bit easier if you are restricted to function pointers (as your code is).  But if you want to support all callables, it's harder.  Consider this case:</p>

<pre><code>struct Overloaded {
    int foo(int) { /*...*/ }
    int foo(int, int) { /*...*/ }
};
</code></pre>

<p>What should <code>$(foo)(1)</code> do?  Should it call the first overload or curry the second one?</p>

<p>You can get around this problem and simplify your code by changing the interface a little bit. Let the user decide when a function should be called.  Then <code>$(foo)(1)()</code> calls the first overload and <code>$(foo)(1)(2)()</code> calls the second overload.  Let <code>std::bind_front</code> deal with compiler errors in case the programmer puts the call in the wrong place.  This allows you to support all callables.</p>

<p>I don't have as much to say about composition.  Note that the raw language already has good support for composition with calls like <code>multiply2(sum4(5))</code> (or a lambda that does the same thing)... if you would rather write <code>compose(sum4, multiply2)(5)</code> then you can write wrappers, but it gets a pretty ugly (IMO) when you have more than one input/output.  Might be easier to just write a lambda every time you want to compose functions.</p>
    </div>