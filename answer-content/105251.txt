<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you know what the named matches are up front (ie if you know what the pattern looks like, you can simply use <code>array_intersect_key</code> to extract only the values that have a specific key from the <code>$matches</code> array:</p>

<pre><code>$names = ['foo' =&gt; null];

$pattern = '#^(?&lt;foo&gt;.*)$#';//changed ^ to $ at the end ;)
$str = '123';
if (preg_match($pattern, $str, $matches))
{//or return here
    $matches = array_intersect_key($matches, $names);
}
return $matches;
</code></pre>

<p>Of course, if you are <em>not</em> in control of the names that will be used in the pattern, you'll have to <em>either</em> iterate over the <code>$matches</code> array like you're doing now. However, I'd recommend you <em>don't</em> use <code>unset</code> on the <code>$matches</code> array, but rather copy the relevant values to a new one and return that array instead:</p>

<pre><code>$returnValue = [];//new array
foreach ($matches as $k =&gt; $v) {
    if (!is_int($k)) {
        $returnValue[$k] = $v;
    }
}
</code></pre>

<p>There are a couple of reasons for this:</p>

<ul>
<li>It's considered bad practice to change the array you're iterating over inside the loop. It can cause issues in certain cases, and it will definitely bite you if you decide to pick up another language</li>
<li>PHP's memory management and copy-on-write mechanisms work well with code like the loop above: the new array will be assigned a reference to the value in <code>$matches</code>, but once the function returns, <code>$matches</code> is GC'ed. The values not referenced by <code>$returnValue</code> will be GC'ed, the other values are then <em>"owned"</em> by the return array (that's not 100% accurate, but it's true enough for now)</li>
<li>It's probably the most efficient (in terms of readability <em>and</em> execution time) approach.</li>
</ul>

<h3>Time to get silly</h3>

<p>Just for the fun of it: you can opt for an inception-style <code>preg_match_all</code> call on the regex you're passing to <code>preg_match</code> (regex matching on a regex... let's be honest, that sounds a tad absurd). It's silly, but it <em>can</em> be done:</p>

<pre><code>$pattern = '#^(?&lt;foo&gt;.*)$#';//changed ^ to $ at the end ;)
$str = '123';
$names = null;
if (preg_match_all('/(?&lt;=\?&lt;)([^&gt;]+)/', $pattern, $matches))
{//create an assoc array containing the match names
    $names = array_fill_keys($matches[0], null);
}

$matches = null;
if (preg_match($pattern, $str, $matches))
{
    if ($names) {
        //gets only the named keys
        $matches = array_intersect_key($matches, $names);
    }
    return $matches;
}
//throw exception, return null, or do something else here
</code></pre>

<p>Now, this is not exactly the way to go, but in some cases it might happen that you're processing a string, but what regex you apply to it can change depending on any number of reasons. In that case, <code>array_intersect_key</code> is definitely worth a look, seeing as it only returns the keys that exist in <em>all</em> of the arguments you pass to it:</p>

<pre><code>class Foo
{
    const DOMAIN_PATTERN = '/(?&lt;=@)(?&lt;domain&gt;[^@\.]+)(?=\.)/';//or something
    const EXTENSION = '/\.(?&lt;extension&gt;[a-z]{3,4})$/';

    protected static $names = [
        'domain'     =&gt; null,
        'extension'  =&gt; null,
    ];

    protected $mode = null;

    public function setValidationOptions(array $options)
    {//based on these options, one or more specific regex's will be applied to the data
        $this-&gt;mode = $options;
        return $this;
    }
    public function validateString($string)
    {
        $regex = $this-&gt;getPatterns();
        $result = [];
        foreach ($regex as $pattern) {
            if (preg_match($string, $pattern, $matches)) {
                $result = array_merge(
                    $result,
                    array_intersect_keys(
                        $matches,
                        static::$names
                    )
                );
            }
        }
        return $result;
    }
}
</code></pre>

<p>This is just a crude example of how you <em>could</em> use <code>array_intersect_key</code> to handle regex matches with named sub-patterns</p>
    </div>