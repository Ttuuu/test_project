<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the algorithm is unacceptable. We can do much better than completely dumb brute-force which results in \$O(n^3)\$.</p>

<ol>
<li>Get all points.</li>
<li>Sort them by x-coordinate then y-coordinate, discarding duplicate points.</li>
<li>Make a histogram of the y-coordinates.</li>
<li>Go through the array and find runs of points with the same x-coordinate:

<ol>
<li>For every y-coordinate, add \$(size\_of\_run - 1) * (points\_with\_y - 1)\$ to the result.</li>
</ol></li>
</ol>

<p>That is \$O(n * log(n))\$, due to sorting.</p>

<hr>

<p>Now, let's look how you coded your solution:</p>

<ol>
<li>Don't leave commented-out code around. It seriously obscures things. Your version-control-system is for recovering old versions when needed. You use one, right?</li>
<li>Keep your line-length reasonable. Horizontal scrolling is hard work and murder on reading-speed.<br>
Yes, you only have comments off-screen to the right, but how would anyone know for sure beforehand?</li>
<li>Never import a namespace that isn't designed for it. Even if you don't have any name-conflicts now, it's only a question of time and luck. Read "<a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std;” considered bad practice?</a>" for the details.</li>
<li>What can go wrong, will go wrong, earlier or later. So don't assume input will succeed, verify it. Or at least ask for exceptions on error, that's acceptable for such a small program.</li>
<li>Consider using <code>std::vector</code> to avoid the arbitrary limit. Which you should have verified too, even though it was in the requirements. Anyway, I'm astounded those automatic arrays don't blow the Default stack's limit.</li>
<li>Use your own point-class, or better yet <code>std::pair</code>. That makes it far easier than manipulating component-arrays in parallel.</li>
<li>Consider extracting a few well-named functions, both for organisation and possible re-use.</li>
</ol>
    </div>