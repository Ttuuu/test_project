<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So you wanna be a master of Pokemon? Do you have the skills to make a Pokedex?</p>

<p>The Pokedex is a piece of complicated machinery. As a result, this code review will be more focused on the conceptual approach; how your data relates to other data and the best ways to represent that data. It will not cover implementation details, such as whether the actual data is derived from text files, databases, is hardcoded, etc. Nor will it cover how best to organize the code in different files. So... here we go...</p>

<p>There are quite a lot of things to think about when creating a Pokedex, even one as simple as what you've got going on. So first we'll take a look at design decisions.</p>

<p><strong>1: Types</strong></p>

<p>There are (currently) eighteen types that a Pokemon can be. These types are well-defined and discrete; that is to say, there are no gradients between types and the set of available types do not change dynamically. As a result, types are best represented as an enum.</p>

<pre><code>enum class Type {
  Fire,
  Water,
  Grass,
  Electric,
  Fighting,
  Flying,
  Poison,
  Ground,
  Ice,
  Psychic,
  Ghost,
  Dragon,
  Fairy,
  Steel,
  Dark,
  Rock,
  Normal,
  Bug
};
</code></pre>

<p>There are also no correlations between types and integral values, so the order in the enum does not matter.</p>

<p>In addition, you will want a function somewhere that takes a type and returns a string, being human-readable.</p>

<pre><code>std::string TypeToStr(Type type) {
  switch(type) {
  case Type::Fire:
    return "Fire";
  case Type::Water:
    return "Water";
  ...
  default:
    return "ERROR"; //should never get here if you accounted for all types
}
</code></pre>

<p><strong>2: Items</strong></p>

<p>We're gonna need this later. Trust me</p>

<pre><code>enum class Item {
  WaterStone,
  FireStone,
  Thunderstone,
  MoonStone,
  LeafStone
};
</code></pre>

<p>And a method to get the human-readable name</p>

<pre><code>std::string ItemToStr(Item item) {
  switch(item) {
  case Item::WaterStone:
    return "Water Stone";
  case Item::FireStone:
    return "Fire Stone";
  case Item::Thunderstone:
    return "Thunderstone";
  ...
  default:
    return "ERROR"; //Should not get here if you accounted for all items
  }
}
</code></pre>

<p><strong>3: Evolution</strong></p>

<p>Most people know Pokemon can evolve. Many of these evolutions are linear (a Krabby can evolve into only a Kingler). But some have branched evolutions. Eevee, in Generation I, can evolve into Jolteon, Flareon or Vaporeon. So what to do? We could store the three pieces of evolution data three times for each Pokemon, even though Eevee is the only one in Gen I that will use more than one. I consider that to be wasteful. We could store evolution data in a vector. That's better, but there's a clever and simple solution: go backwards.</p>

<p>No Pokemon can be evolved to from more than one base form. Let me repeat that: There are no two Pokemon that evolve into the same thing. So we can store our evolution data one per Pokemon and instead of the evolution data saying "This is what you need to do to get to the next stage and this is what the next stage is" it will say "This is how the previous stage got to this form and this is what the previous stage was".</p>

<p>So what does the evolution data look like? Well, in Generation I there are three ways a Pokemon can evolve: Level up (at a certain level), Trade and Stone (with a certain stone). So we have method, data and form. This is what it may look like in code:</p>

<pre><code>class Evo {
public:
  Evo(int from) :
    fromID(from)
  {}

  virtual std::string ToStr() = 0;

  int fromID;
};

class EvoTrade : public Evo {
public:
  EvoTrade(int from) :
    Evo(from)
  {}

  virtual std::string ToStr() {
    return " by trading.";
  }
};

class EvoLevel : public Evo {
public:
  EvoLevel(int from, int lvl) :
    Evo(from),
    level(lvl)
  {}

  virtual std::string ToStr() {
    return " by reaching level " + std::to_string(level) + ".";
  }

  int level;
};

class EvoStone : public Evo {
public:
  EvoStone(int from, Item evo_stone) :
    Evo(from),
    stone(evo_stone)
  {}

  virtual std::string ToStr() {
    return " by using a " + ItemToStr(stone) + ".";
  }

  Item stone;
};
</code></pre>

<p><strong>5: Genders</strong></p>

<p>Pokemon have different chances of being male or female. There are also some that are genderless (many legendaries and also Ditto, and some whose design just calls for gender-agnosticism).</p>

<p><strong>6: Pokemon</strong></p>

<p><em>Finally</em> we can get here. Okay.</p>

<p>Pokemon can have one or two types (in the dex; in battle, there are cases where they can have three). There are a couple ways to handle this. You could contain a single Type variable and essentially use a bitfield as has been mentioned before, but since a Pokemon can only have up to two types, I think this is overkill. Instead, I would recommend simply having two Type variables. Of course, this presents an extra conundrum.</p>

<p>If we have our Pokemon contain two Type variables, what do we do if the Pokemon has only one type? Say it's a Voltorb, which as you know is Electric only. The second Type variable must contain a valid value, so what do we do? We could introduce a nineteenth type in our enum that serves to mark a type as None, but there is another way. The way the games do it (last I checked) internally is set both variables to the same type. So that is the approach we will follow.</p>

<pre><code>class Pokemon {
public:
  std::string name;
  double height, weight; //Metric
  double gender_ratio; //Chance of Male, -1 means genderless
  Evo* evo_data;
  int dex_num;
  Type type_1;
  Type type_2;
  std::function&lt;std::vector&lt;std::string&gt;(int)&gt; get_next_stages;

  Pokemon(int dex_number, const std::string&amp; new_name, double new_height, double new_weight, double male_chance) :
    name(new_name),
    height(new_height),
    weight(new_weight),
    gender_ratio(male_chance),
    dex_num(dex_number),
    evo_data(nullptr)
  {}
  ~Pokemon() {
    delete evo_data;
  }

  std::string ToStr() {
    auto evolves_to = get_next_stages(dex_num);
    std::string answer = 
      "Number: " + std::to_string(dex_num) +
      "\nName: " + name;

      if(type_1 == type_2)
        answer += "\nType: " + TypeToStr(type_1);
      else
        answer += "\nTypes: " + TypeToStr(type_1) + '/' + TypeToStr(type_2);

      answer += "\nHeight: " + std::to_string(height) + 'm' +
      "\nWeight: " + std::to_string(weight) + "kg" +
      "\nMale/Female: ";

      if(gender_ratio &lt; 0)
      {
        answer += "Genderless";
      }
      else
      {
        answer += std::to_string(gender_ratio) + '/';
        answer += std::to_string(1 - gender_ratio);
      }

      for(auto str : evolves_to)
        answer += '\n' + str;

      return answer;
  }

  //These next methods are used to chain setups; they are much more
  //flexible than defining constructors for every possible
  //combination of data setup. And we need to go through methods
  //to set this data up (at least, some of the data) because there
  //are some things we want to do with them

  Pokemon&amp; set_types(Type type) {
    type_1 = type_2 = type;
    return *this;
  }
  Pokemon&amp; set_types(Type type_a, Type type_b) {
    type_1 = type_a;
    type_2 = type_b;
    return *this;
  }

  Pokemon&amp; set_evo_data(Evo* evo) {
    evo_data = evo;
    return *this;
  }
};
</code></pre>

<p><strong>7: Final notes</strong></p>

<p>So what does method chaining look like? Consider the Pokemon class above.</p>

<pre><code>Pokemon p1(1, "Bulbasaur", 0.7, 6.9, 87.5)
  .set_types(Type::Grass, Type::Poison);
Pokemon p2(5, "Charmeleon", 1.1, 19, 87.5)
  .set_types(Type::Fire)
  .set_evo_data(new EvoLevel(4, 16));
</code></pre>

<p>And what about printing that data?</p>

<pre><code>//Assuming a collection of Pokemon
std::vector&lt;Pokemon&gt; mons;
//Fill out the data
//...

auto next_stages = [&amp;mons](const int id){
  std::vector&lt;std::string&gt; answer;

  auto found = std::find_if(mons.begin(), mons.end(), [id](const Pokemon&amp; mon){
    return mon.evo_data != nullptr &amp;&amp; mon.evo_data-&gt;fromID == id;
  });

  if(found != mons.end())
  {
    answer.push_back("Evolves into " + found-&gt;name + found-&gt;evo_data-&gt;toStr());
  }

  return answer;
};

//While filling out the data, put this function as the get_next_stages function
</code></pre>
    </div>