<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a comment in the OP by @EricLippert that reveals how trivial this should be.  There is absolutely no need to sort the array, already nicely demonstrated by @gfv.  I wrote a little sample in DotNet Core 2.0 that generates a large list, shuffles that list, and then removes the last item.  The challenge is to find that missing item.</p>

<p>The answer to the challenge is in the <code>FindMissingNumber</code> method.  Everything else is setting up the challenge.  You have many fine answers here already.  I just wanted to try something with DotNet Core 2.0! </p>

<pre><code>    static void Main(string[] args)
    {
        // Trigger jittr to compile method to omit that time later.
        FindMissingIndex(new int[] { 1, 2, 3 });

        var maximum = 100000;
        var sampleList = GetSampleList(maximum);

        var stopwatch = Stopwatch.StartNew();
        var missing = FindMissingNumber(sampleList);
        stopwatch.Stop();

        Console.WriteLine($"List Ranging from 1 to {maximum:N0}");
        Console.WriteLine($"Missing Value = {missing:N0}");
        Console.WriteLine($"Elapsed {stopwatch.Elapsed.TotalMilliseconds} milliseconds");

        // Sanity check to confirm answer:
        var correct = true;
        foreach (var value in sampleList)
        {
            if (value == missing)
            {
                correct = false;
                break;
            }
        }
        Console.WriteLine($"Sanity Check returns {correct}.");

        Console.WriteLine();
        Console.WriteLine("Press ENTER key to close.");
        Console.ReadLine();
    }

    private static IList&lt;int&gt; GetSampleList(int maximum)
    {
        const int lowerLimit = 3;
        const int upperLimit = 1000000;
        if (maximum &lt; lowerLimit || maximum &gt; upperLimit)
        {
            throw new ArgumentException($"{nameof(maximum)} must be between {lowerLimit:N0} and {upperLimit:N0}.");
        }
        // Create a list of consecutive integers from 1 to maximum
        var list = Enumerable.Range(1, maximum).ToList();
        // Randomize the list with a Fisher Yates shuffle.
        // The reason to impose a shuffle is to make it more challenging by not having a sorted list.
        FisherYatesShuffle(list);
        // Remove last item to spark the challenge to find the missing item.
        list.RemoveAt(list.Count - 1);
        return list;
    }

    private static Random _random = new Random();
    private static void FisherYatesShuffle(IList&lt;int&gt; list)
    {
        for (var i = list.Count - 1; i &gt; 0; --i)
        {
            int swapIndex = _random.Next(0, i + 1);
            if (swapIndex != i)
            {
                var swapValue = list[i];
                list[i] = list[swapIndex];
                list[swapIndex] = swapValue;
            }
        }
    }

    private static int FindMissingNumber(IList&lt;int&gt; list)
    {
        ulong theoreticalSum = ((ulong)(list.Count + 1) * (ulong)(list.Count + 2)) / 2UL;
        ulong actualSum = 0;
        foreach (var value in list)
        {
            actualSum += (ulong)value;
        }
        if (actualSum == theoreticalSum)
        {
            return list.Count + 1;
        }
        else
        {
            return (int)(theoreticalSum - actualSum);
        }
    }
</code></pre>
    </div>