<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think I may have thrown you slightly when I mentioned lazy quantifiers.  The truth is, using greedy quantifiers improves pattern efficiency.</p>

<p>Regarding your atomic grouping, I don't see any benefit (in my pattern anyhow) because I am actively avoiding the need to backtrack in each "alternative" (the expressions between the pipes).</p>

<p>For the single and double quote and multiline comment alternatives, I want the dot to match "any character AND new lines".  For the inline comment alternative, I want the dot to match "any non-newline character".  For this reason, I am using "inline modifiers", specifically <code>(?s)</code> where needed.</p>

<p>I try to use pattern delimiting characters that do not occur in my pattern.  This helps to make the pattern more readable and prevents having to do unnecessary escaping.</p>

<pre><code>~                        # pattern delimiter
(?|                      # branch reset
(")(?:[^"\\]|\\(?s).)*"  # capture double quote, match any non-double-quote/non-backslash unless backslash is followed by any character (used as an escaping character)
|                        # OR
(')(?:[^'\\]|\\(?s).)*'  # capture single quote, match any non-single-quote/non-backslash unless backslash is followed by any character (used as an escaping character)
|                        # OR
(#|//).*                 # capture hash or two-slashes, match the rest of the line                         # OR
(/\*)(?s).*?\*/          # capture \*, match zero or more of any character (including newlines), then */ (lazy quantifier)
|                        # OR
(&lt;!--)(?s).*?--&gt;)        # capture &lt;!--, match zero or more of any character (including newlines) (lazy quantifier)
)                        # end branch reset
~                        # pattern delimiter
</code></pre>

<p>(<a href="https://regex101.com/r/27LzpN/3" rel="nofollow noreferrer">Pattern Demo</a>)</p>

<p>Implementation: (<a href="https://3v4l.org/napru" rel="nofollow noreferrer">PHP Demo</a>)</p>

<pre><code>const PATTERN = &lt;&lt;&lt;'PATTERN'
~(?|(")(?:[^"\\]|\\(?s).)*"|(')(?:[^'\\]|\\(?s).)*'|(#|//).*|(/\*)(?s).*?\*/|(&lt;!--)(?s).*?--&gt;)~
PATTERN;

const LOOKUP = [
    '#'    =&gt; 'gainsboro',
    '//'   =&gt; 'lightgrey',
    '/*'   =&gt; 'silver',
    '&lt;!--' =&gt; 'darkgrey',
    "'"    =&gt; 'mint',
    '"'    =&gt; 'aqua'
];

echo preg_replace_callback(PATTERN, function($m) {
        return "&lt;span style=\"color:" . LOOKUP[$m[1]] . ";\"&gt;{$m[0]}&lt;/span&gt;";
    }, $string);
</code></pre>

<p>By declaring the lookup array as a constant, scoping issues are avoided inside of the <code>preg_replace_callback()</code> callback function.  In other words, you don't have to pass in the lookup array with <code>use()</code>.</p>

<p>I am using <a href="https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc" rel="nofollow noreferrer">nowdoc syntax</a> when declaring the pattern constant so that I don't need to escape any quotes.  I am declaring a constant for no other reason than the fact that the pattern will not change in the script.</p>

<p>By wrapping the whole expression in a "<a href="https://www.regular-expressions.info/branchreset.html" rel="nofollow noreferrer">branch reset</a>" (<code>(?|...)</code>), you can avoid calling <code>end($m)</code> inside the custom function to access the captured group.  The branch reset ensures that each capture group is always the second element in the matches output (at <code>[1]</code>).  If you removed the branch reset in the Regex101 demo above, you will see that the captured "marker" matches will have differing indexes.</p>

<p>Hmm...  If your code is relying on the different indexes as part of a lookup-based replacement, then don't use the branch reset -- it's a good chance to break out one of the new weapons: <a href="https://stackoverflow.com/a/52098132/2943403">array_key_last($m)</a>.</p>

<p>Test Input:</p>

<pre><code>$string = &lt;&lt;&lt;'STRING'
//single line comment

random text ... #another comment

Multiline comments:

/* this is a multiline comment

with 'squote and "dquote"

matches the whole thing */

// single line 'squoted' "dquoted" comment w/ extra " for no reason

More comments &lt;!-- yatta yatta
yatta
yatta --&gt;

Quotes:

"also matches strings with \" escaped quotes or 'the other kind of quotation marks in it' "

a "nested 'squote with nested \"dquote\"'" assuming only outermost quoting matters for formatting

'matches the end quote because it it not escaped \\'
STRING;
</code></pre>

<p>Output (unrendered):</p>

<pre><code>&lt;span style="color:lightgrey;"&gt;//single line comment&lt;/span&gt;

random text ... &lt;span style="color:gainsboro;"&gt;#another comment&lt;/span&gt;

Multiline comments:

&lt;span style="color:silver;"&gt;/* this is a multiline comment

with 'squote and "dquote"

matches the whole thing */&lt;/span&gt;

&lt;span style="color:lightgrey;"&gt;// single line 'squoted' "dquoted" comment w/ extra " for no reason&lt;/span&gt;

More comments &lt;span style="color:darkgrey;"&gt;&lt;!-- yatta yatta
yatta
yatta --&gt;&lt;/span&gt;

Quotes:

&lt;span style="color:aqua;"&gt;"also matches strings with \" escaped quotes or 'the other kind of quotation marks in it' "&lt;/span&gt;

a &lt;span style="color:aqua;"&gt;"nested 'squote with nested \"dquote\"'"&lt;/span&gt; assuming only outermost quoting matters for formatting

&lt;span style="color:mint;"&gt;'matches the end quote because it it not escaped \\'&lt;/span&gt;
</code></pre>

<p>Reasons to re-invent the wheel.  The wheel that you need is very narrow and employing/loading a complete library may be overkill in terms of performance or memory consumption for your task.</p>

<p>In terms of step count, my pattern is slightly more efficient than yours.  Though to be honest, I have been informed (by Stackoverflow regex gurus who I respect) that step count is not a reliable metric to gauge pattern efficiency.  I generally use it, though, as a rough indicator of pattern efficiency.</p>

<p>I reckon taking these opportunities to sharpen regular expression knowledge is a healthy exercise for programmers.  The more you work with regular expressions, the less scary they become.</p>

<p>I am purposely not bothering to acknowledge any tinfoil-hat fringe cases regarding premature-terminating substrings like:</p>

<ul>
<li><code>/* arithmetic symbols include: +-*/  */</code> and</li>
<li><code>&lt;!-- This is a long --&gt; arrow --&gt;</code></li>
</ul>

<p>because these deliberate monkeywrenches are not commonly escaped by slashes and they can be sensibly overcome by recrafting the comment.  Such as:</p>

<ul>
<li><code>/* re-ordered arithmetic symbols include: +-/* */</code> and</li>
<li><code>&lt;!-- I only use short -&gt; arrows in comments--&gt;</code></li>
</ul>
    </div>