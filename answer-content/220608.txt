<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since other answers have focused on the code quality itself, I'll focus on performance.</p>

<p>Recursive Fibonacci by itself is <span class="math-container">\$O(2^n)\$</span> time.</p>

<p>Memoized fibonacci is linear time (check out <code>functools.lru_cache</code> for a quick and easy one). This is because fibonacci only sees a linear number of inputs, but each one gets seen many times, so caching old input/output pairs helps a lot.</p>

<p>Golden-ratio based solutions are approximately <span class="math-container">\$O(\log(n))\$</span>, using <span class="math-container">\$\text{Fib}(n) = \frac{\phi^n - (1 - \phi)^n}{\sqrt 5}\$</span>, where <span class="math-container">\$\phi\$</span> is the golden number. Note that without arbitrary precision numbers, this approach becomes inaccurate at large values of n. With increased precision, note that the cost of a multiplication increases as well, making the whole process a bit slower than log(n).</p>
    </div>