<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Others have discussed some broad concepts. I'll add some small but concrete items:</p>

<p><strong>1</strong> A new <code>Cell</code> starts with 0 by default. Do one or the other not both:</p>

<pre><code>area[y][x] = new Cell();
area[y][x].setEmpty();
</code></pre>

<p><strong>2</strong> There is no need to keep recomputing <code>getAmountOfEmptyCells()</code>, you could keep a counter in <code>Area</code> that is updated with each <code>Cell</code></p>

<p><strong>3</strong> Please make all fields <code>private</code> unless they are intended to be shared (you should always default to private in an OO language).</p>

<p><strong>4</strong> Don't call your class <code>Component</code> :) It is very well known existing piece of AWT/Swing (your <code>JFrame</code> already extends <a href="https://docs.oracle.com/javase/7/docs/api/java/awt/Component.html" rel="nofollow noreferrer"><code>java.awt.Component</code></a>!). I think possibly <code>Area</code> is a little general as well. Try something like <code>Board</code>/<code>BoardUI</code> instead of <code>Area</code>/<code>Component</code>.</p>

<p><strong>5</strong> Avoid having two sources of <code>gameState</code>. I actually think this should live inside <code>Area</code>. </p>

<pre><code>statusOfGame = GamesState.DEFEAT;
component.setGameState(statusOfGame);
</code></pre>

<p><strong>6</strong> <code>GameWindow2048.myKey</code> is a classname in lower case!</p>

<p><strong>7</strong> The logic in <code>GameWindow2048.myKey</code> which makes actually moves and changes <code>gameState</code> would be better located inside <code>Area</code>. It is part of your "core" layer and a trigger (such as a key press) should only <em>call</em> the logic. Imagine having more triggers for the same action (swipe on a tablet, mouse-drag on desktop, voice control, mind control ...)</p>

<p><strong>8</strong> <code>Area</code> should be constructed externally and <em>passed in</em> to your UI layer. This is the key tenet that lets you keep "ui" and "core" separate.</p>

<pre><code>area = new Area(inARow, valueOfCellToWin);
</code></pre>

<p><strong>9</strong> <code>Direction</code> should be moved into <code>Area</code>.  Again, the "core" layer should have zero knowledge of UI classes.</p>

<p><strong>10</strong> <code>area[0].length</code> I think it is reasonable for <code>Area</code> to have an <code>int size;</code> field instead of doing this.</p>

<p><strong>11</strong></p>

<pre><code>(Math.abs(new Random().nextInt()%10) != 9) ? 1 : 2;
</code></pre>

<p>I think perhaps it would be better like</p>

<pre><code>private static final Random r = new Random();
...
powerOf2 = r.nextInt(10) == 9 ? 2 : 1; // 10% chance of a "2"
</code></pre>

<p><strong>12</strong> Seeing this inside a for loop scares me as a reader! Perhaps the inner loop should be going the other direction to keep pushing cells?</p>

<pre><code>y-=2; //as we may need to move this cell even higher
</code></pre>
    </div>