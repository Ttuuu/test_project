<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Or since the check functions build on previous functions should I structure it the following way</p>
</blockquote>

<p>This is not a case that makes you go for inheritance. You should go for inheritance to solve the problem of "repeating same properties in more than 1 class", for example, you have 2 classes <code>Lion</code> and <code>Cheetah</code></p>

<pre><code>class Lion{
    protected $speed;
    protected $age;
    protected $home;
    protected $sex;
    protected $preferredPrey;

    protected $maneColor;
} 

class Cheetah{
    protected $speed;
    protected $age;
    protected $home;
    protected $sex;
    protected $preferredPrey;

    protected $eyeStripesThickness;
} 
</code></pre>

<p>Instead of doing that you go with this:</p>

<pre><code>class Predator{
    protected $speed;
    protected $age;
    protected $home;
    protected $sex;
    protected $preferredPrey;
} 
class Lion extends Predator{
    protected $maneColor;
}
class Cheetah extends Predator{
    protected $eyeStripesThickness;
}
</code></pre>

<p>As you see, this solved the problem of repeating the same properties in the classes, and of course to repeat the same <strong>changes</strong> you made to a property that is shared between the <code>Lion</code> and <code>Cheetah</code>, now if you need to add, remove, change a property between <code>Lion</code> and <code>Cheetah</code> do it in only 1 place i.e. "The parent class". That makes your code <em>crazy</em>-easier to maintain and organized. Think of:</p>

<pre><code>Animal
Animal&gt;Predator
Animal&gt;prey
Animal&gt;marine
Animal&gt;Predator&gt;Lion
Animal&gt;Predator&gt;Cheetah
Animal&gt;prey&gt;gazelle
Animal&gt;prey&gt;Goat
Animal&gt;marine&gt;Dolphin
</code></pre>

<h3>Back to your question, <code>Base</code> or <code>Base</code> and <code>Helper</code> ?</h3>

<p>Do you have, or will have another Class that will extend <code>Base</code>  other than <code>Helper</code>? I guess "no" , so there is no need for this <code>Helper</code> class.</p>

<h3>Other notes on the code</h3>

<ul>
<li><p>As said by the earlier answer this is just a class that groups some function that you need to use in your projects to reduce your coding (your own framework), it has no properties, just a group of random functions.</p></li>
<li><p>The functions that don't need the object, better to be <strong>static</strong>, so you can call them without creating the object and calling it's <code>__construct</code> function, for example <code>location</code>, <code>clean_html</code> , <code>clean_json</code> all don't depend on the object, so make them static so you can call them without creating the object - e.g.</p>

<pre><code>public static function clean_html($html) {
    return htmlspecialchars($html, ENT_QUOTES, 'utf-8');
}
</code></pre></li>
<li><p>This</p>

<pre><code>isset($_SESSION['admin']) &amp;&amp; $_SESSION['admin'])
</code></pre>

<p>can be replaced with this</p>

<pre><code>!empty($_SESSION['admin'])
</code></pre></li>
<li><p>The class is using <code>$_SESSION['admin']</code> and <code>$_SESSION['logged_in']</code> but it doesn't set them. It's better to also include functions that set these variables in this class, so the maintainer of your class in the future (you or someone else) can edit the class without depending on the outside world of the class, make it self-contained and ask yourself </p>

<blockquote>
  <p>"If I edited this class later will I have to go <strong>outside</strong> the class to check something ?"</p>
</blockquote></li>
</ul>
    </div>