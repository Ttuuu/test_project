<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>__device__
mirror(int index , int lB, int uB)
</code></pre>

<p>You've got an extra space before the first comma, and I think you're missing the function's return type entirely. You should <em>always</em> compile your code with <code>-Wall</code> and fix <em>all</em> the warnings before posting it (or before running it). There's no point in shipping code with bugs.</p>

<p>Similarly funky whitespace on this line:</p>

<pre><code>            index = uB-1 -(index-uB);
</code></pre>

<hr>

<p>Anyway, if you're looking to speed up a piece of code with loops in it, your first thought should be, "How do I get rid of these loops?"</p>

<p>Consider that after you "mirror" <code>index</code> off of both boundaries, you'll simply have reduced its overall value by <code>2*(uB - lB)</code>. Proof:</p>

<pre><code>index = uB-1 - (index-uB);
index = lB + (lB-index);
</code></pre>

<p>means</p>

<pre><code>index = lB + lB - (uB - 1 - index + uB);
</code></pre>

<p>means</p>

<pre><code>index = 2*lB - 2*uB + 1 + index;
</code></pre>

<p>means</p>

<pre><code>index = index - (2*(uB - lB) - 1);
</code></pre>

<p>Hmm... I see you have an extra <code>-1</code> in there. Was that intentional? Let's see if we can reproduce it in a test case.</p>

<pre><code>assert(mirror(0, 0, 3) == 0);
assert(mirror(1, 0, 3) == 1);
assert(mirror(2, 0, 3) == 2);
assert(mirror(3, 0, 3) == 2);
assert(mirror(4, 0, 3) == 1);
assert(mirror(5, 0, 3) == 0);
assert(mirror(6, 0, 3) == 1);
assert(mirror(7, 0, 3) == 2);
assert(mirror(8, 0, 3) == 2);
</code></pre>

<p>Yep, the two boundaries behave differently! The moral of the story is: <em>Always test your code.</em></p>

<p>Now that we know how the code behaves (which, honestly, probably <em>isn't</em> how you <em>intended</em> it to behave) â€” we can modify it safe in the knowledge that we won't introduce bugs. We just have to keep all our test cases passing. (Of course we should write some test cases with negative inputs, too.)</p>

<p>Any time you have code with repeated addition, you should think about whether it can be replaced with multiplication; and any time you have repeated subtraction, you should think about whether it can be replaced with division (which is to say, modulus).</p>

<pre><code>int mirror(int index, int lB, int uB) {
    int n = uB - lB;
    int period = 2*n - 1;  // the pattern repeats with this period
    int mod_p = (index - lB) % period;
    if (mod_p &lt; n) {
        return lB + mod_p;
    } else {
        return uB - 1 - (mod_p - n);
    }
}
</code></pre>
    </div>