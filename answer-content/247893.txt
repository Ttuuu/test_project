<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are talking about a "secure" version then please state what you mean with it. What are you protecting against and which security requirements do you have extracted?</p>
<pre><code>if (is_post_request() &amp;&amp; is_request_same_domain() &amp;&amp; isset($_POST['add-list-submit'])) {
</code></pre>
<p>This only indicates what it is doing. But it is doing too much on a line. If this is some particular check then please implement it in a well named function.</p>
<blockquote>
<p>Convert the $_FILES array to a cleaner version</p>
</blockquote>
<p>What does that even mean, a "cleaner version"?</p>
<pre><code>function rearrange_files_array($file)
</code></pre>
<p>So it is apparently a rearranged array, but why? Please document your functions if it is not clear what they are doing. Furthermore, here even the "how" is missing: <strong>how</strong> is the array rearranged?</p>
<pre><code>$errors['form'] = 'Please upload the images.';
</code></pre>
<p>Is this something that a user could do? I just select the images. If they don't get loaded into variables then I cannot fix that myself.</p>
<pre><code>$errors['form'] = 'Only PNG and JPG file formats are allowed.';
...
$errors['form'] = 'Max file size is 2.5 MB.';
</code></pre>
<p>You have run into a common problem: putting all possible information in the error message while keeping the parameters generic. Please fix the error message so that the extensions and max file size are dynamic. Currently you would have to adjust both the function <em>and</em> the content of the error message separately to achieve one thing.</p>
<p>You did let the extensions be the 2nd parameter of the <code>has_valid_file_extension</code> method. That's a good thing and you should perform the same for checking the file size. It will also bring the error and value of the file size closer together.</p>
<p>It seems that you fall through the <code>if</code> statements when error checking; I'd expect the script to perform some kind of action, right? Currently only an error is set, but the script seems to continue.</p>
<pre><code>$imageTypes = [IMAGETYPE_GIF, IMAGETYPE_JPEG, IMAGETYPE_PNG, IMAGETYPE_SWF, IMAGETYPE_PSD, IMAGETYPE_BMP, IMAGETYPE_TIFF_II, IMAGETYPE_TIFF_MM, IMAGETYPE_JPC, IMAGETYPE_JP2, IMAGETYPE_JPX, IMAGETYPE_JB2, IMAGETYPE_SWC, IMAGETYPE_IFF, IMAGETYPE_WBMP, IMAGETYPE_XBM, IMAGETYPE_ICO];
</code></pre>
<p>That's strange, I thought only JPEG and PNG were allowed. This is probably a more generic method. But even in that case: <strong>check the file extension first</strong> before running this method. You don't want to be checking some exotic file type only to find out that it is not allowed anyway; <em>always bring down the number of options / states of a program as soon as possible</em>.</p>
<p>You may also wan to check that the extension is correct for the given image type, I don't see that happening.</p>
<p>As an aside: <em>Obviously the method <code>getimagesize</code> is named terribly badly as it returns all kinds of information, but that's something to blame on PHP, not your script.</em></p>
<pre><code>return false; // Invalid Image Type
</code></pre>
<p>This wipes out the actual error message, which means it will be impossible to inform the user correctly. You'd better return result which contains an error string or use a similar construct. I applaud you for at least including a comment, but if you have to type such comments then the code itself is often not verbose enough.</p>
<pre><code>return false; // One Bit Image
</code></pre>
<p>Huh? No, that seems to be the bit <strong>depth</strong>. So it would be  B/W or rather monochrome image.</p>
<pre><code>else {
    return true;
}
</code></pre>
<p>Just <code>return true</code> is enough here, the application has nowhere to go after all.</p>
<hr>
<p>All in all, it's not a bad attempt to me, but a few repairs and a lot of polishing seems in order.</p>
    </div>