<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should check the input for a valid string:</p>

<pre><code>  if (string.IsNullOrWhiteSpace(stringToEncode))
    return stringToEncode;
</code></pre>

<p>The check for <code>Convert.Count == 0</code> is a little strange in that <code>Convert</code> is a private field and only set in one method where we can assume it will be constructed equally every time it is called:</p>

<blockquote>
  <p><code>if (Convert == null || Convert.Count == 0) BuildConversionMappings();</code></p>
</blockquote>

<p>But no real harm done, without that check you could just simplify the call like this:</p>

<pre><code>Convert = Convert ?? BuildConversionMappings();
</code></pre>

<hr>

<p>You can set the capacity of the <code>StringBuilder</code> which is a performance improvement:</p>

<pre><code>  StringBuilder sb = new StringBuilder(stringToEncode.Length);
</code></pre>

<hr>

<p>You use <code>continue</code> a couple of times in your loop:</p>

<blockquote>
<pre><code>    if (Convert.ContainsKey(c))
    {
      sb.Append(Convert[c]);
      continue;
    }

    if (char.IsDigit(c))
    {
      ...
</code></pre>
</blockquote>

<p>If you replace <code>continue</code> with <code>else if</code> statements it will IMO give a more readable code:</p>

<pre><code>  for (int i = 0; i &lt; stringToEncode.Length; i++)
  {

    char c = stringToEncode[i];
    if (Convert.ContainsKey(c))
    {
      sb.Append(Convert[c]);
    }
    else if (char.IsDigit(c))
    {
      nums.Push(c);
      if (i == stringToEncode.Length - 1
         || !char.IsDigit(stringToEncode[i + 1]))
      {
        while (nums.Count &gt; 0)
        {
          sb.Append(nums.Pop());
        }
      }
    }
    else
    {
      sb.Append(c);
    }
  }
</code></pre>

<p>That said, I think you main method and main loop are quite good and easy to read and understand, and the <code>Dictionary</code> idea is just the way to go. But the way you build the dictionary is maybe a little cumbersome.</p>

<p>To the bone you just map between two sets of chars (except for the numbers):</p>

<pre><code>  const string keys =    "abcdefghijklmnopqrstuvwxyz ";
  const string values =  "1abc2efg3ijklm4opqrs5uvw yy";
</code></pre>

<p>You could look up by finding the index of chars from the input string in <code>keys</code> and fetch the corresponding <code>value</code> from <code>values</code> (lower case). But that would require two look ups per char, and therefore the Dictionary is much better. A <code>Dictionary&lt;char, char&gt;</code> can be build from the above <code>keys</code> and <code>values</code> in the following way:</p>

<pre><code>private static Dictionary&lt;char, char&gt; ConstructMap()
{
  const string keys =    "abcdefghijklmnopqrstuvwxyz ";
  const string values =  "1abc2efg3ijklm4opqrs5uvw yy";

  IEnumerable&lt;(char c, char cm)&gt; map = keys.Zip(values, (c, cm) =&gt; (c, cm));
  return map.ToDictionary(ccm =&gt; ccm.c, ccm =&gt; ccm.cm);
}
</code></pre>

<p>because <code>string</code> implements <code>IEnumerable&lt;char&gt;</code></p>

<hr>

<p>Just for the exercise I implemented a quite old school indexed <code>for</code>-loop like this:</p>

<pre><code>private static readonly Dictionary&lt;char, char&gt; charMap = ConstructMap();

public static string HHEncode(string data)
{
  char[] result = new char[data.Length];

  for (int i = 0; i &lt; data.Length; i++)
  {
    if (charMap.TryGetValue(char.ToLower(data[i]), out char value))
    {
      result[i] = value;
    }
    else if (char.IsDigit(data[i]))
    {
      int j = i + 1;
      while (j &lt; data.Length &amp;&amp; char.IsDigit(data[j])) j++;

      j--;
      for (int k = 0; k &lt;= (j - i) / 2; k++)
      {
        result[i + k] = data[j - k];
        result[j - k] = data[i + k];
      }
      i = j;
    }
    else
    {
      result[i] = data[i];
    }
  }

  return new string(result);
}
</code></pre>

<p>The main difference to yours is how I handle numbers</p>
    </div>