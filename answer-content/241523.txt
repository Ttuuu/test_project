<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>üìå Preface</h1>

<p>"Best Practises" are very subjective, so your question cannot really be answered in that regard, but I will try to give you some tips nonetheless.</p>

<p>To lead into the rest of my answer I would say <a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0" rel="nofollow noreferrer">one of the most beginner-friendly resources for learning a functional style in javascript is this Medium article</a> (without going into a lot of the nitty-gritty theoretical stuff). By reading this I think you will come to understand a lot of the ideas that come with functional programming.</p>

<p><br></p>

<hr>

<p><br></p>

<h1>üíÅ‚Äç‚ôÄÔ∏è Paradigm vs. Style</h1>

<p>With that out of the way, let us start with a shocker: Javascript is not really a functional programming language. Yep, I said it. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/About_JavaScript" rel="nofollow noreferrer">Javascript is more a procedural (or object-oriented) language</a> (some newer features have allowed for more functional-ish style but it remains very procedural). But all that ofcourse does not mean you cannot <em>apply</em> a functional style, which I think is more the core of your question?</p>

<p>Presuming I did correctly interpret your question, let me paraphrase to you the first two sentences of the Wikipedia page about FP:</p>

<blockquote>
  <p>[...] functional programming is a programming paradigm where programs are constructed by <strong>applying</strong> and <strong>composing</strong> functions. It is a <strong>declarative</strong> programming paradigm [...], rather than a <em>sequence of imperative statements</em> [...].</p>
</blockquote>

<p>This means that, when writing your programs, you do not tell the computer exactly what to do every <em>step</em> of the way (i.e. <code>for (let i = 0; i &lt; n; i++)</code>) but rather you chunk a problem into smaller sub-problems, solve those, and compose a function that calls your smaller functions to solve the bigger problem. This leads me to my first tip. Javascript functions come in two forms: procedures, and lambda's. I am not going into the details that differentiate the two, but rather I would like to tell you about lambda's.</p>

<p><br></p>

<hr>

<p><br></p>

<h1>üí° Tip 1: Embrace expressions</h1>

<p>You seem to know javascript's lambda syntax, since you use the arrrow notation (<code>x =&gt; y</code>), but you are using it in a procedural way. What I mean by that, is that you append a block to each lambda, as such:</p>

<pre class="lang-js prettyprint-override"><code>const doSomething = (arg1, arg2) =&gt; { /*steps*/ };
</code></pre>

<p>This kind of defeats the purpose of the notation, and is basically another syntax for the procedural functions of JS:</p>

<pre class="lang-js prettyprint-override"><code>function doSomething (arg1, arg2) { /*steps*/ }
</code></pre>

<p>In Javascript, <code>x =&gt; y</code> means <em>a function that takes x and returns y</em>. So a lot of your functions can be simplified. Let's change a couple to make it clear:</p>

<pre class="lang-js prettyprint-override"><code>const sayHello = (name) =&gt; {
    return `Hello, ${name}!`;
};
// can be
const sayHello = name =&gt; `Hello ${name}!`;
</code></pre>

<p>and</p>

<pre class="lang-js prettyprint-override"><code>const addNums = (x, y) =&gt; {
    return x + y;
};
// can be
const add = (x, y) =&gt; x + y;
</code></pre>

<p><br></p>

<hr>

<p><br></p>

<h1>üí° Tip 2: Spice up your functions</h1>

<p>But then what is the purpose of the lambda notation, and why is your code defeating its purpose? To put it simply: a lambda is a function that takes <em>zero or one argument(s)</em>, maybe transforms it, and yields a result. <a href="https://en.wikipedia.org/wiki/Lambda_calculus#The_lambda_calculus" rel="nofollow noreferrer">Wikipedia's article about lambda calculus says the same</a>, but with more jargon:</p>

<blockquote>
  <p>[...] all functions in the lambda calculus are anonymous functions, having no names. They only accept <strong>one</strong> input variable, with <strong>currying</strong> used to implement functions with several variables.</p>
</blockquote>

<p>You use a lot of functions as procedures (sequence of steps) which you cannot have in FP, and you are using multiple parameter functions which are also disallowed (or rather just do not exist in FP). But, you might ask, how are you supposed to do anything with just one parameter and a single expression body? Let us take a snippet of your code and refactor it into a nice functional style:</p>

<pre class="lang-js prettyprint-override"><code>// Original
const createButton = (text, func) =&gt; {
    const button = document.createElement('button');
    const buttonText = document.createTextNode(text);
    button.appendChild(buttonText);

    button.addEventListener('click', () =&gt; {
        return func();
    });

    return button;
};
</code></pre>

<pre class="lang-js prettyprint-override"><code>// Functional alternative
// Some setup, notice the currying for multiple arguments.
const text = text =&gt; document.createTextNode(text);
const newButton = () =&gt; document.createElement("button");
const listen = event =&gt; handler =&gt; target =&gt; {
  // Javascript was not meant to be used purely functionally,
  // so we have to use a block with several statements to
  // mutate the target, and then return it (mutation will never
  // happen in functional programming, as you might know).
  target.addEventListener(event, handler);
  return target;
};
const append = child =&gt; target =&gt; {
  // Same story: we have to return the target after mutating it.
  target.append(child);
  return target;
};

// Here comes the true power of functional programming: composition
const onClick = listen("click");
const addLabel = label =&gt; append(text(label));
const sayHi = () =&gt; console.log("Hi!");
const sayBye = () =&gt; console.log("Bye.");
const button = label =&gt; handler =&gt;
  addLabel(label)(
    onClick(handler)(
      newButton()));

const friendlyButton = button(":)")(sayHi);
const sadButton = button(":(")(sayBye);

// Try it out!
document.body.append(friendlyButton, sadButton);
</code></pre>

<p>Ok, giant code sample with weird and maybe hideous things. Let me explain it!</p>

<p>Firstly I would like to say that Javascript is a great language, but the DOM is not the best part to use FP for, because it's an amalgamation of mutation and imperativeness, which are the arch-enemies of FP. But let us do it anyways because it is fun!</p>

<p>The first statement of the refactor goes as follows:</p>

<pre class="lang-js prettyprint-override"><code>const text = text =&gt; document.createTextNode(text);
</code></pre>

<p>which is essentially a function that, when called with an argument <code>text</code> will create a textNode with <code>text</code> being its text. Now this is a bit of a weird one, because we made a function that takes an argument, and then calls another function with that very argument, so we basically aliased it. Aliasing is the same as storing it in a variable with another name, so why not write it like this:</p>

<pre class="lang-js prettyprint-override"><code>const text = document.createTextNode;
</code></pre>

<p><code>text</code> is equal to <code>document.createTextNode</code>, so <code>text("Hi!")</code> is equal to <code>document.createTextNode("Hi!")</code>.</p>

<blockquote>
  <p>Now JS is a bit weird (and full of <em>side-effects</em>), so we have to specify that the <code>this</code> of <code>document.createElement</code> is <code>document</code> (<code>document.createElement.bind(document)</code>). The peculiarities of Javascript's <code>this</code> go far beyond the purpose of this post so if you do not understand what that meant, just wrap it in a function like so: <code>x =&gt; y(x)</code>;</p>
</blockquote>

<p>The first real weirdness happens in the <code>listen</code> function:</p>

<pre class="lang-js prettyprint-override"><code>const listen = event =&gt; handler =&gt; target =&gt; { /*...*/ };
</code></pre>

<p><strong>What?</strong> A function that returns a function that returns a function that returns something else?! Yep, that is functional programming baby! But why would we do this? Because it allows for very easy <em>composition</em>. Notice how later on, we defined the function <code>onClick</code>, which is a composed <code>listen</code>:</p>

<pre class="lang-js prettyprint-override"><code>const onClick = listen("click");
// This means the following:
const onClick = handler =&gt; target =&gt; target.addEventListener("click", handler);
</code></pre>

<p>So we made a function that always adds a <code>click</code> eventlistener to a target. We can take this a step further:</p>

<pre class="lang-js prettyprint-override"><code>// Let's make a function that makes an element yell "OUCH!" on click!
const ouch = onClick(() =&gt; console.log("OUCH!"));
// This means the following:
const ouch = target =&gt; target.addEventListener("click", () =&gt; console.log("OUCH!"));

// Try it out!
const boxingDummy = ouch(addLabel("Don't hit me!")(newButton()));
document.body.append(boxingDummy);
</code></pre>

<p>I hope that made it clear why you would write programs in such a weird (coming from procedural programming) way. I would link you the wiki article but that is just unintelligble jibberish to me too.</p>

<p><br></p>

<hr>

<p><br></p>

<h1>üí° Tip 3: <a href="https://www.youtube.com/watch?v=b7kxtIGaNpw" rel="nofollow noreferrer">Lose control</a></h1>

<p>You seem to really rely on the imperativeness of Javascript to perform tasks in a set order, which does not fit well in a functional style -- most functional languages do not even allow it. The great functional programming evangelists have thought about this long and hard, and showed us how you do not need loops, if's or sequences to create complete and functional (in the literal sense) programs. Taking, for example, another function you wrote:</p>

<pre class="lang-js prettyprint-override"><code>const view = () =&gt; {
    const component = document.createElement('div');

    // create a button element that has a callback function that will append the returned value to the DOM

    component.appendChild(createButton('Hello', () =&gt; {
        return component.appendChild( createText( sayHello('Kristian') ) );
    }));

    component.appendChild(createButton('Add Numbers', () =&gt; {
        return component.appendChild( createText( addNums(3, 7) ) );
    }));

    component.appendChild( createButton('Log', simpleLog) );

    component.appendChild(createButton('Add to array', () =&gt; {
        console.log( `Original array: [${myList}] - New array: [${addToArray(4)}]`);
    }));

    return component;
};
</code></pre>

<p>Pardon the joke, but this looks really WET... (as in, the opposite of <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>). You call <code>component.appendChild(createButton(/*...*/))</code> a lot of times. Apart from that being a bit of a code smell, it also is a really great place to put in some FP magic. Analysing the abstract meaning of your code, let me write that out in a more functional style:</p>

<pre><code>// Remember our previous functions?
// I made them nice and generic so they are
// reusable here!
const appendButton = label =&gt; action =&gt; append(button(label)(action));
const add = x =&gt; y =&gt; x + y;
const addFive = add(5);
const saySix = () =&gt; console.log(addFive(1));
const fold = (...functions) =&gt; value =&gt; functions.reduce(
  (result, fun) =&gt; fun(result),
  value);
const component = document.createElement("div");
const view = fold(
  appendButton("Hello")(sayHi),
  appendButton("Add five to one")(saySix)
  /* etc... */);

// Try it out!
document.body.append(view(component));
</code></pre>

<p>BAM! No blocks, no loops, no if's! Instead of a sequence of statements, we use a fold to abstract away a lot of the DOM boilerplate. Higher-order functions such as fold(left) are very important functions to keep in your arsenal. <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)" rel="nofollow noreferrer">I suggest reading up on it a bit</a>, if the article isn't too crytographic (there's a joke that says functional programmers tend to lose their ability to explain FP as soon as they understand, and I think that applies perfectly on most wiki pages).</p>

<p><br></p>

<hr>

<p><br>
Well that should be about it. To summarise:</p>

<ul>
<li>Javascript DOM isn't the best place to apply FP (in my humble opinion), but go ahead and break the rules!</li>
<li><a href="https://www.nhs.uk/conditions/repetitive-strain-injury-rsi/" rel="nofollow noreferrer">Don't get RSI</a>: <code>(x) =&gt; { return y; }</code> is the same as <code>x =&gt; y</code>.</li>
<li>Procedures are <em>so 1970</em>; compose a function from functions to solve your problems (and most importantly: be able to reason about your solution).</li>
<li>Currying and higher-order functions are a functional programmer's best friends, conquer the world with them.</li>
</ul>
    </div>