<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>JavaScript</h2>

<h3>The loop that generates people - an expensive bridge to cross</h3>

<p><a href="https://i.stack.imgur.com/ybMID.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ybMID.jpg" alt="bridge toll"></a></p>

<blockquote>
  <p><em>”...DOM access is actually pretty costly - I think of it like if I have a bridge - like two pieces of land with a toll bridge,  and the JavaScript engine is on one side, and the DOM is on the other, and every time I want to access the DOM from the JavaScript engine, I have to pay that toll”</em><br>
      - John Hrvatin, Microsoft, MIX09, in <a href="https://channel9.msdn.com/Events/MIX/MIX09/T53F" rel="nofollow noreferrer">this talk <em>Building High Performance Web Applications and Sites</em></a> at 29:38, also cited in the <a href="https://books.google.com/books?id=ED6ph4WEIoQC&amp;pg=PA36&amp;lpg=PA36&amp;dq=John+Hrvatin+%22DOM%22&amp;source=bl&amp;ots=2Wrd5G2ceJ&amp;sig=pjK9cf9LGjlqw1Z6Hm6w8YrWOio&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwjcmZ7U_eDeAhVMGDQIHSfUAdoQ6AEwAnoECAgQAQ#v=onepage&amp;q=John%20Hrvatin%20%22DOM%22&amp;f=false" rel="nofollow noreferrer">O'Reilly <em>Javascript</em> book by Nicholas C Zakas Pg 36</a>, as well as mentioned in <a href="https://www.learnsteps.com/javascript-increase-performance-by-handling-dom-with-care/" rel="nofollow noreferrer">this post</a></p>
</blockquote>

<p>Bearing in mind that was stated more than 10 years ago and browsers likely have come along way since then, it is still wise to be aware of this.</p>

<p>This code block makes quite a few redundant DOM look-ups - 30 (based on the value I see assigned to <code>manNumber</code>) to be exact:</p>

<blockquote>
<pre><code>for (let i = 0; i &lt; manNumber; i++) {
  if (i &lt; (manNumber * leftStreet)) {
    street[i] = document.getElementById('path-2');
  } else {
    street[i] = document.getElementById('path-1');
  }
</code></pre>
</blockquote>

<p>It would be more efficient to look up those two elements outside the loop - preferably once the DOM is ready...</p>

<pre><code>const path1 = document.getElementById('path-1');
const path2 = document.getElementById('path-2');
</code></pre>

<p>The inside that loop, use those references:</p>

<pre><code>for (let i = 0; i &lt; manNumber; i++) {
  street[i] = i &lt; (manNumber * leftStreet) ? path2 : path1;
}    
</code></pre>

<h3>selecting elements to get innerHTML</h3>

<p>The function <code>fillElement()</code> uses <code>querySelector</code> to get elements by the <em>id</em> attribute:</p>

<blockquote>
<pre><code>function fillElement (ele) {
  // Inner
  modalInner.innerHTML = document.querySelector('#js-modal-template-'+ele).innerHTML;
}
</code></pre>
</blockquote>

<p>It isn't wrong to use <code>querySelector</code> to get elements by <em>id</em> but using <code>getElementById()</code> "<em>is definitely faster</em>" <sup><a href="https://www.sitepoint.com/community/t/getelementbyid-vs-queryselector/280663/2" rel="nofollow noreferrer">1</a></sup> (see <a href="https://jsperf.com/getelementbyid-vs-queryselector" rel="nofollow noreferrer">this jsPerf test for comparison</a>). </p>

<h3>Redundant click handler code</h3>

<blockquote>
<pre><code>$('.mic-g').on('click', function (e) {
  fillElement('cineteca');
  modal.replay();
  modalOpenTimeline.replay();
});

// Belgrado / Kinoteka
$('.belgrado-g').on('click', function(e) {
  fillElement('kinoteka');
  modal.replay();
  modalOpenTimeline.replay();
});
//And on and on for more selectors...
</code></pre>
</blockquote>

<p>It would be better to observe clicks on the document and look for the class names on the target element. Those class names could be put into a mapping of class names to values to be passed to <code>fillElement()</code>. Something like below (untested):</p>

<pre><code>const classModalMapping = {
  'mic-g': 'cineteca',
  'belgrado-g': 'kinoteka',
  //...etc. 
}
$(document).click(function(e) {
  $(e).target.classList.forEach(function(className) {
    if (className in classModalMapping) {
      fillElement(classModalMapping[className]);
      modal.replay();
      modalOpenTimeline.replay(); 
    }
  });
});
</code></pre>

<h2>CSS</h2>

<p>The rulesets for <code>.modal-text-title</code> and <code>.modal-text-inner</code> both have padding rules where the left and right values are identical. Those can be condensed to a single value. </p>

<blockquote>
<pre><code>padding: 120px 5% 20px 5%;
</code></pre>
</blockquote>

<p>Can be condensed to:</p>

<pre><code>padding: 120px 5% 20px;
</code></pre>

<p>And </p>

<blockquote>
<pre><code>padding: 0 5% 20px 5%;
</code></pre>
</blockquote>

<p>Can be condensed to:</p>

<pre><code>padding: 0 5% 20px;
</code></pre>

<p><sup>1</sup><sub><a href="https://www.sitepoint.com/community/t/getelementbyid-vs-queryselector/280663/2" rel="nofollow noreferrer">https://www.sitepoint.com/community/t/getelementbyid-vs-queryselector/280663/2</a></sub></p>
    </div>