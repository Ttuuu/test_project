<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Doing it with folds pretty much begs you to create a custom accumulator and recursive function or fold within a fold like that. </p>

<p>A couple notes. I don't think <code>foldr</code> is tail-recursive. Also <code>(λ (x acc) (cons* x acc))</code> is redundant. You can just use <code>cons*</code></p>

<p>You're also using <code>(reverse lst)</code> in a few different places. You could create a separate definition here, or refactor. </p>

<pre><code>(define (unzip lst)
  (define (template lst) ;;a list of null lists 
    (if (null? lst)      ;;of the proper length
        '()
        (foldl (λ (x acc) (cons '() acc)) '() (car lst))))
  (define (cons* heads tails)
    (reverse (foldl (λ (hd tl acc) 
                       (cons (cons hd tl) acc)) 
                    '() heads tails)))
  (reverse 
      (foldl cons* template lst)))
</code></pre>

<p>Not much chage, but perhaps a bit easier to see what's going on. If your wanting to do it with a single fold, thats a bit tricker.</p>

<pre><code>(define (unzip L)
 (define (mangle glob) 
   (let loop ((news '()) (acc glob))
      (if (or (null? (car acc)) (pair? (car acc))) 
          (cons (reverse news) (car acc))
          (loop (cons (car acc) news) (cdr acc)))))
  (reverse (apply foldl (lambda z (mangle z))'() L)))
</code></pre>

<p>Notice the lambda is just grabbing a list off all arguments, and we are <code>apply</code>ing foldl to the lists of lists, as if we are folding multiple lists. However arity is unknown so I've got to take all the arguments as a list, and figure out what is new and what was the accumulator on each round. As is this will choke on a list of lists of lists, but maybe an interesting approach.</p>
    </div>