<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Why do most people (on the internet) recommend using recursion because it's simpler and easier to write the program? Logically I thought that we should write it in a way that is fast and simple.</p>
</blockquote>

<p>This is a perceptive question.  I wrote an article about exactly this topic in 2004, which you can read here:</p>

<p><a href="https://docs.microsoft.com/en-us/archive/blogs/ericlippert/how-not-to-teach-recursion" rel="noreferrer">https://docs.microsoft.com/en-us/archive/blogs/ericlippert/how-not-to-teach-recursion</a></p>

<p>Summing up: there are <em>two</em> good reasons to teach people to use recursion to solve Fib:</p>

<ul>
<li>First, because it clearly illustrates what you have learned today. <strong>A naive translation of a recursive definition into a recursive function can often lead to poor performance</strong>.  That's an important lesson for beginners to take away. (EXERCISE: How many <em>additions</em> does your naive recursive program execute for a given n? The answer may surprise you.)</li>
<li>Second, because the first lesson then gives us an opportunity to lead the beginner to learn <strong>how to write a recursive algorithm so that it performs well</strong>.</li>
</ul>

<p>Unfortunately, as you have discovered, a great many people on the internet have not internalized that <strong>teaching recursion via fib is solely useful as an illustration of bad uses of recursion and how to fix them</strong>, and not in itself an example of a good use of recursion.</p>

<p>It would be much better if people attempting to teach recursion did so by providing a mix of good and bad recursive algorithms, and taught how to spot and avoid the bad ones. </p>

<blockquote>
  <p>Is there a better way than these two methods?</p>
</blockquote>

<p>Another lesson you'll quickly learn is that asking "which is better?" is a sure way to get back the reply: "can you describe a clear metric for betterness?"</p>

<p>So: <em>can you describe a clear metric for betterness?</em></p>

<p>If the goal is to print out the nth fib number, you can do way "better" than either of your solutions:</p>

<pre><code>unsigned long long fibs[] = { 1, 1, 2, 3, 5, 8, ... }
if (0 &lt;= n &amp;&amp; n &lt; sizeof(fibs... blah blah blah))
   cout &lt;&lt; fibs[n];
</code></pre>

<p>Done. There are only so many fib numbers that fit into a long. You can look them up on the internet, copy them into your program, and you've got a short, fast fib program with no loops at all.  That's "better" to me.</p>

<p>But remember, the point of this exercise is to teach you something about recursion, so by that metric my program is certainly not "better".</p>

<blockquote>
  <p>are these methods complex?</p>
</blockquote>

<p>By "these methods" I think you mean "methods of writing recursively-stated algorithms into code other than naive recursion and unrolling the recursion into a loop".</p>

<p>That's a matter of opinion. Let me put it this way. </p>

<p>I work on a compiler team, and I interview a lot of people. My standard coding question involves writing a simple recursive algorithm on binary trees that is inefficient when written the naive way, but can be made efficient by making a few simple refactorings.  If the candidate is unable to write that clear, straightforward, efficient code, that's an easy no-hire.</p>

<p>Where things get interesting is when I ask "suppose you had to remove the left-hand recursion from this tree traversal; how might you do it?"  </p>

<p>There are standard techniques for removing recursions.  Dynamic programming reduces recursions. You could make an explicit stack and use a loop.   You could make the whole algorithm tail recursive and use a language that supports tailcalls. You could use a language with cocalls. You could use continuation passing style and build a "trampoline" execution loop.</p>

<p>Some of these techniques are, from the perspective of the novice, terribly complicated.  I ask the question because I want to know what is in the developer's toolbox.</p>
    </div>