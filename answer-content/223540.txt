<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've got <em>way too much</em> code.  You are not using the built-in tools Python provides to solve this problem, making your job much, much harder.</p>

<hr>

<p>In your <code>check(value)</code> function, you are checking:</p>

<pre><code>if value % 2 == 0:
    # ...
elif value % 2 != 0:
    # ...
</code></pre>

<p>If <code>value % 2 == 0</code> is <code>False</code>, then <code>value % 2 != 0</code> is guaranteed to be <code>True</code>.  There is no need for the <code>elif ...:</code>; you could simply use an <code>else:</code> clause.</p>

<p>In both cases, you assign <code>amount = int( ... / 2)</code>.  Python has built-in integer division operator, <code>//</code>, so these statements could become simply <code>amount = ... // 2</code>.  In the second case, because <code>value</code> is odd, you divide <code>value - 1</code> by two.  This "subtract 1" is unnecessary.  Using integer division (or dividing and then casting to an integer) will truncate the result to an integer.</p>

<p>Afterwards, in the first case, when <code>value % 2</code> is zero, you assign <code>value = 0</code>, where as in the second case, when <code>value % 2</code> is one, you assign <code>value = 1</code>.  You could simply assign <code>value = value % 2</code>.</p>

<pre><code>def check(value):
    amount = value // 2
    value = value % 2
    return value, amount
</code></pre>

<p>Or slightly shorter:</p>

<pre><code>def check(value):
    return value % 2, value // 2
</code></pre>

<p>Or even better, use the built-in function <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod(a,b)</code></a> which does the same thing.  But you will have to swap the variables you assign to, because <code>divmod(a,b)</code> returns the result of the division first, and the modulo remainder second:</p>

<pre><code>amount, value = divmod(value, 2)
</code></pre>

<hr>

<p>In your <code>binary_sum(*args)</code> function, you are given a variable number of lists, and you want to take one element from each list, then take the next element from each list, and then take the next element from each list, and so on.  In Python, this is the <code>zip()</code> function.  (Note: "zip" is short for "zipper", not zip-compression.)</p>

<pre><code>for addends in zip(*args):
    # ...
</code></pre>

<p>Except we have a wrench in the works; you want to start from the end and work towards the front.  That is hard.  It is easier if each list is <a href="https://docs.python.org/3/library/functions.html?highlight=reversed#reversed" rel="nofollow noreferrer"><code>reversed()</code></a>, so starting from the start is starting from what was the end.  We can then <code>zip()</code> those <code>reversed()</code> lists together:</p>

<pre><code>for addends in zip(*map(reversed, args)):
    # ...
</code></pre>

<p>Except we have another wrench in the works; the lists aren't all the same length, and <code>zip</code> stops when any of the lists runs out of items.  You need to add 0's at the start, so they are the same length.  Except we've reversed the lists, so we need to add 0's to the end.  That's easy.  We just need <a href="https://docs.python.org/3/library/itertools.html?highlight=zip_longest#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest(*args, fillvalue=0)</code></a> to provide the extra 0's.</p>

<pre><code>from itertools import zip_longest

for addends in zip_longest(*map(reversed, args), fillvalue=0):
    # ...
</code></pre>

<p>Now <code>addends</code> is first the 1's column digits, then the 2's column digits, then the 4's column digits, and so on.  We can just sum the <code>addends</code> together, along with any carry from the previous column:</p>

<pre><code>digits = []
carry = 0
for addends in zip_longest(*map(reversed, args), fillvalue=0):
    total = sum(addends) + carry
    carry, digit = divmod(total, 2)
    digits.append(digit)
</code></pre>

<p>And then, add the carry bits to end once you've run out of columns:</p>

<pre><code>while carry &gt; 0:
    carry, digit = divmod(carry, 2)
    digits.append(digit)
</code></pre>

<p>Finally, since we've generated the result in the wrong order, you'll have to reverse it again, so the most significant digit is first.</p>

<pre><code>from itertools import zip_longest

def binary_sum(*args):
    digits = []

    carry = 0
    for addends in zip_longest(*map(reversed, args), fillvalue=0):
        total = sum(addends) + carry
        carry, digit = divmod(total, 2)
        digits.append(digit)

    while carry &gt; 0:
        carry, digit = divmod(carry, 2)
        digits.append(digit)

    return digits[::-1]
</code></pre>

<p>A few tests:</p>

<pre><code>&gt;&gt;&gt; binary_sum([1,1,1,0])
[1, 1, 1, 0]
&gt;&gt;&gt; binary_sum([1,1,1,0], [1,0])
[1, 0, 0, 0, 0]
&gt;&gt;&gt; binary_sum([1,1,1,1], [1])
[1, 0, 0, 0, 0]
&gt;&gt;&gt; binary_sum([1,1,1,1], [0,0,0,1])
[1, 0, 0, 0, 0]
&gt;&gt;&gt; binary_sum([1,1,1,1], [1,0,0,0])
[1, 0, 1, 1, 1]
&gt;&gt;&gt; binary_sum([1], [1], [1], [1], [1])
[1, 0, 1]
</code></pre>
    </div>