<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The accepted answer is great, but it's probably important to note that the suggested solution doesn't actually pass the actual test cases because the prompt specifies that order must be maintained.</p>
<p>So <code>solution([1,2,4)] = 1</code> but <code>solution([4,2,1]) = 0</code>.</p>
<p>Regardless, here is my ELI5 of the accepted answer:</p>
<pre><code>"""
First, we must recognize that any "lucky triple" (i.e. 1,2,4) is atomically composed of
pairs of multiples. 1,2,4 is a lucky triple because 1,2 and 2,4 are multiples.

Having previously attempted recursive solutions, that don't approach the problem from the
perspective of multiple pairs, easily time out at the more extreme-sized test cases.

In order to find a more heuristic solution that can be more efficient, let's approach some
test cases from the perspective of our atomic multiple pairs.

l = [1, 2, 4, 8] # simple test case with all unique numbers that are all multiples

multiple_pairs = [(1, 2), (1, 4), (1, 8), (2, 4), (2, 8), (4, 8)]

now let's work out the answer by hand first.

solution = sum([(1, 2, 4), (1, 2, 8), (1, 4, 8), (2, 4, 8)]) = 4

the first thing we might notice, however seemingly insignificant, is that every gateway
number (middle) is always a 2 or a 4. Never 1 or 8, which also happen to be the min and max.

Another interesting aspect of 1 and 8 are that they either have no multiples(8) or it's not
a multiple of anything else (1). These numbers can't be gateway numbers.

To derive this fact from our multiple_pairs, we can count every number's multiples and the
numbers they're multiples of.

has_multiples = {1: 3, 2: 2, 4: 1, 8: 0}
multiples_of = {1: 0, 2: 1, 4: 2, 8: 3}

1 has no multiples_of and 8 has no multiples. Let's take a closer look at the numbers that
have both, and see how we can connect them to the concept of gateway numbers.

A gateway number, by definition, needs to have numbers that can come both before and after.
In terms of multiples, a gateway number needs to have both multiples and multiples_of.

Let's take 2 for example. There is one number (1) that can come before 2 and two numbers
(4, 8) that can come after 2. Only knowing this information, we can deduce that 2 will be
the gateway number twice in our solution set, reusing the multiples_of twice and both
has_multiples to create two unique triples [(1, 2, 4), (1, 2, 8)].

Likewise for 4 [(1, 4, 8), (2, 4, 8)].

What's interesting here is that if take their respective has_multiples and multiples_of,
we can also come up with the same number of gateway triples by multiplying them.

has_multiples[2] * multiples_of[2] = 2
has_multiples[4] * multiples_of[4] = 2

If we apply this same formula to 1 and 8, they both result in 0, which makes sense.
If we extrapolate this formula to something more generic, we can conclude that for the
test case [1, 2, 4, 8], the formula has_multiples[n] * multiples_of[n] for every number in l
summed, results in the right number of lucky triples! (0 + 2 + 2 + 0 = 4)

Now let's apply a more nuanced test case, say

l = [1, 1, 2, 4] # with duplicates

multiple_pairs = [(1, 2), (1, 4), (2, 4)]

has_multiples = {1: 2, 2: 1, 4: 0}
multiples_of = {1: 0, 2: 1, 4: 0}

The answer should be...

solution = sum([(1, 1, 2), (1, 1, 4), (1, 2, 4)]) = 3

Unfortunately, this invalidates the equation derived from the previous test case.
0 + 1 + 0 = 1

Sure, there is still legitimately one triple with 2 as a gateway number, but now with
duplicates introduced we see 1 (the duplicate) as a gateway number as well.

In both cases of 1 as a gateway number, 1 is using its duplicate as a multiples_of, along
with both has_multiples. This pattern is not very different from the previous formula,
since in this case we can still add 1's has_multiples and multiples_of to get the number
of triples where 1 is a valid gateway number. (2 + 0 = 2)

Combining this with the last formula, we arrive at the correct answer 3.

Lastly, and we won't have to get into the subject with much detail, but a test case like
[1, 1, 1] breaks both formulas from above, so we can treat it as a base case, where 3 or
more of one number contributes one triple.
"""
from collections import Counter
from itertools import combinations


def solution(l):
    triples = 0
    l_counter, has_multiples, multiples_of = Counter(l), Counter(), Counter()
    for n, m in combinations(sorted(l_counter), 2):
        if m % n == 0:
            has_multiples[n] += 1
            multiples_of[m] += 1
    for unique_number, count in l_counter.items():
        triples += has_multiples[unique_number] * multiples_of[unique_number]
        if count &gt; 1:
            triples += has_multiples[unique_number] + multiples_of[unique_number]
            if count &gt; 2:
                triples += 1
    return triples
</code></pre>
    </div>