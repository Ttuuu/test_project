<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's suppose that you've implemented the <a href="https://codereview.stackexchange.com/a/189529/11728">suggestion made by vnp</a>, so that the line now reads:</p>

<pre><code>nextFibonacci = (fibonacciNumbers[i - 1] + fibonacciNumbers[i]) % m
</code></pre>

<p>Could there still be an improvement? The Pisano period modulo <span class="math-container">\$m\$</span> is <a href="http://oeis.org/A001175/a001175_1.pdf" rel="nofollow noreferrer">at most <span class="math-container">\$6m\$</span></a> and so the period-finding approach takes <span class="math-container">\$O(m)\$</span> steps, each of which involves the addition of numbers with <span class="math-container">\$O(\log m)\$</span> digits, for an overall runtime of <span class="math-container">\$O(m\log m)\$</span>.</p>

<p>There is an alternative approach, which is to compute the <span class="math-container">\$n\$</span>th Fibonacci number modulo <span class="math-container">\$m\$</span> using the <a href="https://en.wikipedia.org/wiki/Fibonacci_sequence#Matrix_form" rel="nofollow noreferrer">recurrence</a> <span class="math-container">$$ \eqalign{F_{2n−1} &amp;= F_{n}^2 + F_{n−1}^2 \\ F_{2n} &amp;= (2F_{n−1} + F_{n}) F_{n}}. $$</span> This can be implemented efficiently using recursion and <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer">memoization</a>, for example you could use the <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>@functools.lru_cache</code></a> decorator, like this:</p>

<pre><code>from functools import lru_cache

@lru_cache(maxsize=None)
def fibonacci_modulo(n, m):
    """Return the nth Fibonacci number modulo m."""
    if n &lt;= 1:
        return n % m
    elif n % 2:
        a = fibonacci_modulo(n // 2, m)
        b = fibonacci_modulo(n // 2 + 1, m)
        return (a * a + b * b) % m
    else:
        a = fibonacci_modulo(n // 2 - 1, m)
        b = fibonacci_modulo(n // 2, m)
        return (2 * a + b) * b % m
</code></pre>

<p>This takes <span class="math-container">\$O((\log n)^2)\$</span> multiplications of numbers with <span class="math-container">\$O(\log m)\$</span> digits, for an overall runtime of <span class="math-container">\$O((\log n \log m)^2)\$</span>. So this approach  would be an improvement on period-finding in cases where <span class="math-container">$$(\log n)^2\log m ≪ m.$$</span> For example, in the case <span class="math-container">\$n=10^{17}-1, m=10^5\$</span> given in the question, we have <span class="math-container">\$(\log n)^2\log m \approx 6000\$</span> and on this test case <code>fibonacci_modulo</code> is much faster than <code>get_fibonacci_huge</code>:</p>

<pre><code>&gt;&gt;&gt; n = 10**17 - 1
&gt;&gt;&gt; m = 10**5
&gt;&gt;&gt; timeit(lambda:get_fibonacci_huge(n, m), number=1)
0.09250206896103919
&gt;&gt;&gt; fibonacci_modulo.cache_clear()
&gt;&gt;&gt; timeit(lambda:fibonacci_modulo(n, m), number=1)
0.0001637069508433342
</code></pre>

<p>(Note the use of <code>cache_clear</code> to ensure that we have an empty cache and so the timing comparison is fair.)</p>
    </div>