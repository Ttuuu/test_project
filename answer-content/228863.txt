<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Naming: According to PEP8, you should make all these names snake_case. This is good, but the important bits here are:</p>

<ol>
<li>Do the same thing consistently</li>
<li>Have a clear word seperator.</li>
</ol>

<p>Basically, this means you can use snake_case, camelCase, or even TitleCase, but the last one is generally used only for classes. I'm personally partial to camelCase for functions/methods and snake_case for variables, but snake_case for both is more common, and that's what I'll be using here.</p>

<p>Most important, naming should be meaningful. What does this function do? It parses a list of strings, and returns part of those strings. You've called these strings <code>names</code>, so we'll use something like that.</p>

<p>Also, keep names short. This makes it easier to read.</p>

<p>You first build a list, append to it, convert to a set, then convert to a list again to make them unique. In this case, I'd recommend to start out with a set. The role of this function is to figure out unique <em>prefixes</em> though - not full names. </p>

<pre class="lang-py prettyprint-override"><code>def get_prefixes(long_names):
    short_names = set()  # set instead of list.
    for name in long_names:
        short_names.add(name[:3])  # Just slice a string if prefix length is constant.
    return list(unique_names)  # Use sorted() instead of list if you care about that.
    # Can return right away. No need to reassign it first.
</code></pre>

<p>What else is easily noticeable? This is a rather straightforward loop. Python has a special tool to make this operation a bit easier: list/set/dict/generator comprehensions. Making this a set comprehension later cast to a list:</p>

<pre class="lang-py prettyprint-override"><code>def get_prefixes(long_names):
    return list({name[:3] for name in long_names})
# If you insist on regex:
def get_prefixes(long_names):
    return list({re.search(r"[A-Z]{1}[a-z]{2}", name) for name in long_names})
</code></pre>

<p>That's a lot more shorter, and others reading your code can read it easier.</p>

<p>@Austin Hastings here goes into stdlib usage. If you're looking for performance, that's what you should do. If you're looking to write good production code, that's what you should do. However, I'm going to assume part of this is learning how to code, so I'll rewrite this function.</p>

<pre class="lang-py prettyprint-override"><code>def uniquepattern(names):
    [other stuff happens]
    for singlepattern in unique_names:
        dct['%s' % singlepattern] = []
</code></pre>

<p>Why do string % formatting here? There's no reason, since that list already contains strings and only strings. You can just use it as key. Or even better, combine it with the dict declaration:</p>

<pre class="lang-py prettyprint-override"><code>    dct = {key, [] for key in unique_names}
</code></pre>

<p>Now lets have a look at filling that dict:</p>

<pre class="lang-py prettyprint-override"><code>    for singelelist in names:  # Spelling error here. 
            number = re.search(r"[A-Z]{1}[a-z]{2}", singelelist)
            number = number.group()

            for singlepattern in unique_names:
                if number == singlepattern:
                    dct[singlepattern].append(singelelist)
</code></pre>

<p>That's a double iteration. I really can't figure out why we need that, since we can easily grab the prefixes from the names themselves:</p>

<pre class="lang-py prettyprint-override"><code>    for name in names:
        dct[name[:3]].append(name)
</code></pre>

<p>And even if we need to use regexes to accomodate for variable prefix length, it's easy:</p>

<pre class="lang-py prettyprint-override"><code>    for name in names:
        dct[re.search(r"[A-Z]{1}[a-z]{2}", name).group()].append(name)
</code></pre>

<p>This single loop means that we don't use <code>unique_names</code> more than once, which means we can merge it into where it's used.</p>

<p>So for the entire function we get a much more modest:</p>

<pre class="lang-py prettyprint-override"><code>def name_sorter(names):
    dct = {key: [] for key in get_prefixes(names)}
    for name in names:
        dct[name[:3]].append(name)
    return dct
</code></pre>

<p>And they say python code can't be concise...</p>

<p>So our full script would become:</p>

<pre class="lang-py prettyprint-override"><code>def get_prefixes(long_names):
    return list({name[:3] for name in long_names})

def name_sorter(names):
    dct = {key: [] for key in get_prefixes(names)}
    for name in names:
        dct[name[:3]].append(name)
    return dct

if __name__ == "__main__":
    scaffold_names_list = ['Spp1Aa1', 'Spp1Aa1', 'Spp2Aa1', 'Spp3Aa1', 'Spp4Aa1', 'Spp5Aa1']
    patterns = name_sorter(scaffold_names_list)
    print(patterns)
</code></pre>

<p>Note that I included a <code>if __name__ == "__main__":</code> guard. This means that other scripts can import this file without actually running any code, only making the functions available. But if any script is executed directly, python sets the <code>__name__</code> variable to the string <code>"__main__"</code>, and it is executed. This is widely considered good practice.</p>
    </div>