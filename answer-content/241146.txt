<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you use <strong>Interlocked.Increment(ref _runCount) than the operation is thread-safe if the value is already initialized.</strong></p>

<p>Interlocked is a class designed just for the case when you need to share primitive type value between threads. Regarding to <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked?redirectedfrom=MSDN&amp;view=netframework-4.8" rel="nofollow noreferrer">.NET Framework documentation</a>: "Interlocked Class provides atomic operations for variables that are shared by multiple threads." See the documentation for more details.</p>

<p>You can also see a similar question without ConcurentDictionary aspect on Stack Overflow: <a href="https://stackoverflow.com/questions/17975884/c-sharp-variable-thread-safety">C# variable thread safety</a>.</p>

<p><strong>Lazy initialization and ConcurrentDictionary are used here for the scenario when two concurrent threads try to initialize value, however, they both see that the value is not initialized, so they both start to read from a database and initialize the new value.</strong></p>

<p><strong>With lazy initialization in ConcurrentDictionary when concurrent Thread B completes the invocation after Thread A, it discards the value it has created and uses (increments) the value that Thread A already created.</strong></p>

<p>Your code is <a href="https://andrewlock.net/making-getoradd-on-concurrentdictionary-thread-safe-using-lazy/" rel="nofollow noreferrer">exactly the same as this one</a> where you can find a more detailed explanation of your code including steps why each part of your code is important. </p>

<p>So, if your question is whether the value _runCount is thread-safe in your code snippet and whether is it the right solution, the short answer is: <strong>Yes, it is</strong> and all parts of the code are important for your described use case.</p>
    </div>