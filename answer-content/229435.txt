<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, you could do what you want with some relatively "grey" magic, although I have not done this specific thing myself in the past. By the way, you still have to decide what code you will replace the default constructor with. If I understand well what you are trying to do, you would want the default constructor throwing an <code>ArgumentException</code>, is that right?</p>

<p>If you have some patience and a bit of spare time (not too much, really), the <a href="https://en.wikipedia.org/wiki/ILAsm" rel="nofollow noreferrer">IL Assembler</a> does not appear to have any problem with an explicit default parameterless constructor. As <a href="https://codeblog.jonskeet.uk/2008/12/10/value-types-and-parameterless-constructors/" rel="nofollow noreferrer">Guess Who</a>* "successfully" (ok, no serious customization was performed anyway) poked around a long time ago, it appears to be feasible to do whatever you want inside an empty constructor for a custom type extending <code>ValueType</code>. You can use the article for a bit of guidance.</p>

<p>So, what I would try is:</p>

<ul>
<li>Create an additional constructor in your almost-done type, receiving a dummy parameter (say, an <code>int</code>) and throwing an <code>ArgumentException</code> with the text informing that the the default empty constructor is not intended to be called directly (or any other exception you see fit).</li>
<li>"Bake" the almost-done type in a class library alone.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/ildasm-exe-il-disassembler" rel="nofollow noreferrer">Disassemble</a> the library back to CIL.</li>
<li>Read and <strong>understand</strong> a few basics of CIL so that I can...</li>
<li>...remove the dummy <code>int</code> parameter from my constructor without causing other side effects in the code, so it would become the empty constructor.</li>
<li>Reassemble back using the ILAssembler directly from the disassembled, tampered IL code.</li>
</ul>

<p>Then, <strong>boom</strong>, magically, I can never create an empty array of pre-initialized NonEmptyStrings anymore (for example <code>NonEmptyString[] strings = new NonEmptyString[100]</code>).</p>

<p>I assume this is grey area and you could feel better going with your <code>bool</code> solution anyway, but <strong>if</strong> you decide to give this a shot, I would very much like to know how this worked out.</p>

<p>*Also known as <strong>Jon Skeet</strong>!</p>
    </div>