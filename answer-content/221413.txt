<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<p>Run <code>shellcheck</code> on this script - almost all variable expansions are unquoted, but need to be quoted.  That will also highlight the non-portable <code>echo -e</code> (prefer <code>printf</code> instead) and a dodgy use of <code>$((</code> where <code>$( (</code> would be safer.</p>

<p>I recommend setting <code>-u</code> and <code>-e</code> shell options to help you catch more errors.</p>

<h1>Flexibility</h1>

<p>Instead of requiring users to change to the top directory of the project, we could allow them to specify one or more directories as command-line arguments, and use current directory as a fallback if no arguments are provided:</p>

<pre><code>dirs=("${@:-.}")
</code></pre>

<h1>Finding files</h1>

<p><code>allFiles</code> will include directories and other non-regular files, if they happen to end in <code>.js</code>.  We need to add a file type predicate:</p>

<pre><code>allFiles=$(find "${dirs[@]}" -name "$fileExt" -type f)
</code></pre>

<p>Since we're using Bash, it makes sense to take advantage of array variables - though we'll still have problems for filenames containing whitespace.  To fix that, we need to read answers to <a href="//stackoverflow.com/q/23356779"><em>How can I store the “find” command results as an array in Bash?</em></a>:</p>

<pre><code>allFiles=()
while IFS=  read -r -d ''; do
    allFiles+=("$REPLY")
done &lt; &lt;(find ./ -name "$fileExt" -type f -print0)
</code></pre>

<p>It may almost be simpler to set <code>globstar</code> shell option and then remove non-regular files from the glob result.</p>

<h1>Counting comment lines</h1>

<p>I didn't follow your Perl code, but I have an alternative approach using <code>sed</code>:</p>

<ul>
<li>convert all lines from initial <code>/**</code> to final <code>*/</code> to begin with <code>//</code> instead,</li>
<li>then keep only the lines beginning with optional whitespace then <code>//</code>:</li>
</ul>



<pre><code>sed -e '\!^[[:blank:]]*/\*\*!,\!\*/!s/.*/\\\\/' \
    -e '\|^[[:blank:]]*//|!d'
</code></pre>

<p>(Actually, that's a lot less pretty than I'd hoped!)</p>

<h1>Blank lines</h1>

<p>Here, we've used the regular expression that matches comment lines.  We want <code>'^[[:blank:]]*$'</code> instead, to match lines that contain <em>only</em> (optional) whitespace.</p>

<h1>All lines</h1>

<p>Again, over-complicated: just <code>cat</code> the files together and then use <code>wc -l</code>.</p>

<h1>Printing</h1>

<p>I find it easier to visualise output formatting if we simply use a here-document:</p>

<pre><code>cat &lt;&lt;EOF
Total comments lines is: $commentLines.
Total blank lines is: $blankLines.
Total all lines is: $allLines.
EOF
exit
</code></pre>

<hr>

<h1>Modified code</h1>

<pre><code>#!/bin/bash
set -eu

fileExt='*.js'
dirs=("${@:-/usr/lib/nodejs/lodash}")

allFiles=()
while IFS=  read -r -d ''; do
    allFiles+=("$REPLY")
done &lt; &lt;(find "${dirs[@]}" -name "$fileExt" -type f -print0)

commentLines=$(sed -e '\!^[[:blank:]]*/\*\*!,\!\*/!s/.*/\\\\/' \
                   -e '\|^[[:blank:]]*//|!d' \
                   "${allFiles[@]}" | wc -l)
blankLines=$(cat "${allFiles[@]}" | grep -c '^[[:blank:]]*$')
allLines=$(cat "${allFiles[@]}" | wc -l)

cat &lt;&lt;EOF
Total comment lines is: $commentLines.
Total blank lines is: $blankLines.
Total all lines is: $allLines.
EOF
</code></pre>

<p>Although this makes three passes over the input files, that might be an acceptable trade-off against the complexity of a single-pass approach here (and is already the approach taken in the original code).</p>

<hr>

<h1>Single-pass version using <code>awk</code></h1>

<p>A single-pass version doesn't require us to use an array to store the filenames; we can simply stream the file contents into a suitable counting function.  We could implement that counting function in shell, but it's probably easier to write a short <code>awk</code> program.  Note that with no arrays, we can make this a POSIX shell program:</p>

<pre><code>#!/bin/sh
set -eu

fileExt='*.js'

find "${@:-.}" -name "$fileExt" -type f -print0 | xargs -0 cat |
    awk 'BEGIN { all = 0; blank = 0; comment = 0;  incomment = 0; }

         { ++all
           if ($0 ~ "/\\*") { incomment = 1 }
           if (incomment) { ++comment; if ($0 ~ "\\*/") incomment = 0; }
           else { blank += ($0 ~ "^[[:blank:]]*$"); comment += ($0 ~ "^[[:blank:]]*//") } }

         END { print "Total comment lines is:", comment
               print "Total blank lines is:", blank
               print "Total all lines is:", all }'
</code></pre>
    </div>