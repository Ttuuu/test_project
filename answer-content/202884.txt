<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the dictionary is overkill.  Plus adds a lot more code with the TryGet.  I would make a class to help and hide the magic strings.  </p>

<p>As a side note magic strings should be made into constants so they are maintained in one place and if a typo you just need to fix it in one place.    Also having a 1 or 2 being passed in also seems magic to me. I would make that into an enum.  If we left it as an int then when coming back I have no idea what values I can pass in.  Is negative numbers allowed?  What about 9999? </p>

<pre><code>public enum RefNumber
{
    One = 1,
    Two = 2,
}
</code></pre>

<p>I'd create a class to hold the magic strings </p>

<pre><code>public static class ControlsNames
{
    private const string GenericPrefix = "coolControl";
    private const string DepartmentSufix = "Department";
    private const string JobTitleControlSuffix = "JobTitle";
    private const string DirectDialControlSuffix = "DDI";
    private const string EmailDialControlSuffix = "Email";
</code></pre>

<p>Looking at your example you always format with the Prefix then refnumber then optional suffix.  I'll make a method in the class to handle that for us</p>

<pre><code>private static string FormatName(string suffix, RefNumber refNumber)
{
     return string.Concat(GenericPrefix, (int)refNumber, suffix);
}
</code></pre>

<p>Now we just need to make an easy way to know what suffix we need. I'm going to make some static methods that will do that for us and return back the string.  The only exception is Generic we don't want a suffix but we can just pass in string.empty</p>

<pre><code>public static string Generic(RefNumber refNumber)
{
    return FormatName(string.Empty, refNumber);
}

public static string Department(RefNumber refNumber)
{
    return FormatName(DepartmentSufix, refNumber);
}

public static string JobTitle(RefNumber refNumber)
{
    return FormatName(JobTitleControlSuffix, refNumber);
}

public static string DirectDial(RefNumber refNumber)
{
    return FormatName(DirectDialControlSuffix, refNumber);
}

public static string Email(RefNumber refNumber)
{
    return FormatName(EmailDialControlSuffix, refNumber);
}
</code></pre>

<p>Now we don't have any dictionary or TryGets and the code looks like this now</p>

<pre><code>public void DoStuffWithControls()
{
    string genericControl1 = ControlsNames.Generic(RefNumber.One);
    string genericControl2 = ControlsNames.Generic(RefNumber.Two);
    string departmentControl1 = ControlsNames.Department(RefNumber.One);;
    string departmentControl2 = ControlsNames.Department(RefNumber.Two); ;

    EnquiryForm.GetEnquiryControl(genericControl1, EnquiryControlMissing.Exception).Value = "some value";
    EnquiryForm.GetEnquiryControl(departmentControl1, EnquiryControlMissing.Exception).Value = "some value";
    EnquiryForm.GetEnquiryControl(genericControl1, EnquiryControlMissing.Exception).AnotherProperty = "some other value";
    EnquiryForm.GetEnquiryControl(genericControl2, EnquiryControlMissing.Exception).Value = "some value";
    EnquiryForm.GetEnquiryControl(genericControl2, EnquiryControlMissing.Exception).AnotherProperty = "some other value";
    EnquiryForm.GetEnquiryControl(departmentControl2, EnquiryControlMissing.Exception).Value = "some value";
}
</code></pre>
    </div>