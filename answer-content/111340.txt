<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Correctness</h2>
<p>I assume this is a toy problem and you don't need to worry about overflow/underflow? If you do, you should be using <code>longs</code> to do all your math, and either returning a long or casting back to an int before you return it.</p>
<h2>Performance</h2>
<p>You don't need to keep an array of all the left sums. You can get away with just two ints, one containing the sum of numbers on the left and the other containing the sum of numbers on the right. In your second loop, look at the <code>i</code>th element. Add it to the leftSum and subtract it from the rightSum. Use that to do your math.</p>
<h2>General</h2>
<p>This also cleans up the math you're doing. <code>totalSum - 2 * leftSums[i]</code> is not at all intuitive. <code>Using Math.abs</code> is nice. Using <code>Math.min()</code> would be even nicer.</p>
<p>Java variables start with lowercase letters. <code>int[] A</code> doesn't conform to that standard. Also, abbreviations should be avoided in variable names. <code>minDiff</code> would be better as <code>minimumDifference</code>, and <code>diff</code> would be better as <code>difference</code>.</p>
<p>If I were to code this, it would look something like:</p>
<pre><code>public final class Summer {

    public int solve(final int[] values) {

        long leftSum = 0;
        long rightSum = 0;
        for (int i = 0; i &lt; values.length; i++) {
            rightSum += values[i];
        }

        long minDifference = Integer.MAX_VALUE;
        for (int i = 0; i &lt; values.length; i++) {
            leftSum += values[i];
            rightSum -= values[i];
            final long difference = Math.abs(leftSum - rightSum);
            minDifference = Math.min(minDifference, difference);
        }

        return (int) minDifference;
    }
}
</code></pre>
    </div>