<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, congratulations, the result looks really good and that's a lot of work for an exercise! I particularly like how you frequently used standard algorithms.</p>

<p>That is also quite a lot of code to review! You'll excuse me if I don't review it all, actually a tiny part of it. But rather than getting into the details, I'll underline an important principle: what isn't relevant for one program only should be written as a library. A programmer should strive to minimize the code related only to the problem at hand, so that he, or others, can re-use what he's done of his time and sweat. So let's examine how your concrete problem presents itself: you have to 1) read/parse input, 2) build a graph-like structure from the input and 3) display that structure. That could (should?) have been 3 different code reviews.</p>

<h2>Input parsing</h2>

<p>There are of course many ways to read input and parse it. Yours isn't bad, but isn't good either because it is too specific for the task at hand. The format is LISP-like (with the addition of a comma between the elements of a list), and it would be a good exercise to write a parser for such a format. If I remember correctly, writing a parser for a simple calculator is the theme of the first few chapters of the book, and you could draw inspiration from it. Write a function <code>Token get_next_token(std::istream&amp; is)</code>, and functions to consume the token list according to a BNF grammar that might look like this:</p>

<pre><code>List : ( Atom, ... ) | Nil
Atom : int | string | List
</code></pre>

<p>Or you could have tried to write an efficient csv-reader, because your input is very close to this format once you've got rid of the parenthesis:</p>

<pre><code>name, year, predecessor1, ... predecessorN,
</code></pre>

<p>But try to find a more general angle to tackle the problem, rather than checking manually <code>is</code>'s state n times in your <code>operator &gt;&gt;</code>.</p>

<p>If input reading / parsing isn't something you're interested in, then go for the quick and dirty, instead of submitting 200 lines of code for the same effect (a non-reusable piece of code). With modern C++ you can prototype more or less the same way you'd do with Python:</p>

<pre><code>struct Language : std::vector&lt;std::string&gt; {};
std::istream&amp; operator&gt;&gt;(std::istream&amp; is, Language&amp; language) {
    std::string line;
    if (!std::getline(is, line)) return is;
    language.clear();
    auto wb = line.begin();
    while (true) {
        auto we = std::find(wb, line.end(), ',');
        if (we == line.end()) break;
        language.emplace_back(wb, std::remove_if(wb, we, [](unsigned char c) {
            return std::isspace(c) || c == '(' || c == ')';
        }));
        wb = ++we;
    }
    return is;
}

auto parse_languages(std::istream&amp; is) {
    std::vector&lt;Language&gt; res;
    std::copy(std::istream_iterator&lt;Language&gt;(is), std::istream_iterator&lt;Language&gt;(),
              std::back_inserter(res));
    return res;
}
</code></pre>

<p>Then you go on to the things that are of enough interest to warrant generalized code.</p>

<h2>Graph-like structure</h2>

<p>You have chosen to put your languages directly onto a grid, with connections between languages looking just like an after-thought. It can work in this example because layers are chronological, and because connections aren't too many nor too concentrated. But if you want to improve the lay-out of your languages, you should try to organize them into a data structure reflecting the connections.</p>

<p>Something as simple as <code>std::map&lt;std::string, Language&gt;</code> could be used to that effect. You can then explore the hierarchical links to determine the height of your grid (for now you just have a magical constant, <code>20</code>, which you probably chose after trial-and-error but would fail in other circumstances), but also to compute a weight for each language: then the heaviest language (the weight being the cumulated number of ascendants and descendants) can be displayed more centrally to avoid ungraceful crossings as much as possible.</p>

<p>You can then distribute your language into decade-layers, with heaviest languages in the middle. That's the occasion to write an algorithm that can be reused to. For instance:</p>

<pre><code>template &lt;typename RandomIterator, typename Comp&gt;
auto heaviest_in_the_middle(RandomIterator first, RandomIterator last, Comp comp) {
    if (std::distance(first, last) &lt; 3) return;
    std::sort(first, last, comp);
    const auto begin = first;
    const auto end = last;
    while (first &lt; last) {
        std::iter_swap(first++, --last);
        ++first, --last;
    }
    std::sort(begin, --first, comp);
    std::sort(first, end, std::not_fn(comp)); // C++17. else std::not2
}
</code></pre>

<h2>Drawing figures</h2>

<p>Drawing an arrow and drawing an ellipsis around a text aren't trivial tasks either and would justify a review on their own. I don't know the library you relied upon but by its name, so I can't review your code (which seems a bit complicated to be honest, unless FLTK is really, really low level).</p>

<p>Again, congratulations, and I'm aware that my review only scratches at the surface of your code, but it surely deserves a review and I have only so much time to spare.</p>
    </div>