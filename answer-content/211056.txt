<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nesting of the function calls</p>

<pre><code>promiseTree('root', [
  promiseTree('child', [
    promiseTree('grandchild', [
      promiseTree('great grandchild')
    ])
  ])
])
</code></pre>

<p>is one issue with the code at the question relevant to the expected result. The innermost nested function (argument) is executed first. See and highlight line 15 at   <a href="https://astexplorer.net/#/gist/777805a289e129cd29706b54268cfcfc/5a2def5def7d8ee91c052d9733bc7a37c63a6f67" rel="nofollow noreferrer">https://astexplorer.net/#/gist/777805a289e129cd29706b54268cfcfc/5a2def5def7d8ee91c052d9733bc7a37c63a6f67</a>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function promiseTree (name, children) {
  console.log(name, children, arguments[0], arguments); // arguments[0] is "great grandchild"
}

promiseTree('root', [
  promiseTree('child', [
    promiseTree('grandchild', [
      promiseTree('great grandchild')
    ])
  ])
])</code></pre>
</div>
</div>


<p>If necessary, can link to a primary resource for verification of the fact that the innermost (argument) function is expected to be expected to be executed first in JavaScript.</p>

<hr>

<p>The pattern at the question which uses multiple <code>Promise.resolve()</code> and <code>Promise.all()</code> is unnecessary. </p>

<p>Either recursion, <code>Array.prototype.reduce()</code> or <code>async/await</code> can be used to handle <code>Promise</code> execution in sequential order. </p>

<p>Note that <code>Promise</code> constructor or functions passed to <code>Promise.all()</code> do not necessarily execute in sequential order.</p>

<p>The array returned from <code>Promise.all()</code> will be in the same order as the elements in the iterable passed to <code>Promise.all()</code>, that is, for example, if the fifth element of the iterable is resolved before the first element of the iterable passed, the resulting array of values will still be in the exact order of indexes of the input iterable.</p>

<p>The logging of the times is not entirely accurate, as <code>Promise.all()</code> does not resolve until all elements of the iterable (whether the element is a <code>Promise</code> value or not a <code>Promise</code>) are resolved.</p>

<p>Given that <code>Promise</code> all is being used without <code>Array.prototype.map()</code> and using a reflect pattern, any rejected <code>Promise</code> will result in halting the <code>Promise</code> chain and <code>.catch()</code> being executed.</p>

<p>If there is a nested array structure, that array can be flattened (for example, using <code>Array.prototype.flat())</code> before performing sequential operations.</p>

<pre><code>const flatten  = arr =&gt; {
  arr = arr.flat();
  return arr.find(a =&gt; Array.isArray(a)) ? flatten(arr) : arr
}

flatten([1,[2, [3, [4]]]]) // [1, 2, 3, 4]
</code></pre>

<p></p>

<p>An an example of using both <code>Array.prototype.reduce()</code> and <code>async/await</code> to perform operations in sequential order, accepting a function, <code>Promise</code> or other value</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const testPromise = (id) =&gt; new Promise((res, rej) =&gt; {
  const time = Math.floor(Math.random() * 1000)
  setTimeout(() =&gt; {
    console.log(`resolved promise '${id}' after ${time} milliseconds`);
    res(id)
  }, time)
});
const fn = (...arr) =&gt; {
  const res = [];
  return arr.reduce((promise, next) =&gt; {
      return promise.then(() =&gt; testPromise(next).then(data =&gt; {
        console.log(data);
        res.push(data)
      }).catch(err =&gt; err))
    }, Promise.resolve())
    .then(async() =&gt; {
      for (let value of res) {
        console.log(await (typeof value === 'function' ? value() : value))
      }
      return 'done'
    })
}

fn(1, () =&gt; 2, 3, Promise.resolve(4), testPromise(5)).then(data =&gt; console.log(data))</code></pre>
</div>
</div>


<p>An approach using <code>async/await</code></p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const fn = async() =&gt; {
  let order = 0
  const promiseTree = name =&gt;
    new Promise(res =&gt; res(`${name} order:${order++}`))

  const res = [await promiseTree('root'), [
    await promiseTree('child'), [
      await promiseTree('grandchild'), [
        await promiseTree('great grandchild')
      ]
    ]
  ]];
  return res;
}

fn()
.then(console.log)</code></pre>
</div>
</div>


<blockquote>
  <p>I would like to be able to create the tree structure, but execute the
  async functions in order from the root node down, or more precisely
  execute the affects of the async function in order, the execution of
  the promises is not really important.</p>
</blockquote>

<p>To 1) execute N asynchronous operations in parallel (return a <code>Promise</code> object) which resolves to a value 2) create the data structure in order of input</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// do asynchronous stuff, resolve `props`: Array of `[index, value]`
const fn = (...props) =&gt; 
  new Promise(resolve =&gt; 
    setTimeout(resolve, Math.floor(Math.random() * 1000), props));

// accepts string of characters delimited by space or array
// returns Array
const promiseTree = tree =&gt; 
  Promise.all(
    // check if `tree` is String or Array
    [...(!Array.isArray(tree) &amp;&amp; typeof tree === 'string' 
      ? tree.split` ` 
      : tree).entries()] // use `.entries()` method of Array
    .map(([index, prop]) =&gt; fn(index, prop))) // do asynchronous stuff
  .then((result, res = [], t = []) =&gt; // define `res`, `t` Arrays
    result.map(([index, prop]) =&gt; 
      !res.length // first iteration
      ? res.push(prop, t) // push first value
      : index &lt; result.length-1 // check index
        ? t.push(prop, t = []) // `.push()` to `t`, re-declare `t` as `[]`
        : t.push(prop)) // `.push()` last value `prop` to `t`
    &amp;&amp; res) // return `res`

Promise.all(
[
  // space delimited String passed to `promiseTree`
  promiseTree('root child grandchild greatgrandchild') 
  .then(console.log)
  // Array passed to `promiseTree`
, promiseTree([...Array(4).keys()])
  .then(console.log)
]);</code></pre>
</div>
</div>

    </div>