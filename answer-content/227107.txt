<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>(Missing) Specification</h2>

<p>You are lacking a clear specification (comments). The way you implemented it, you consider <em>not exists</em> and <em>don't know whether it exists</em> as one and the same. I would expect a method called <code>DirectoryExists</code> to:</p>

<ul>
<li>return <code>true</code> when the directory exists</li>
<li>return <code>false</code> when it does not exist</li>
<li>throw an exception when unabe to determine existence</li>
</ul>

<p>Let consumers handle exceptions:</p>

<pre><code>catch (WebException)
{
    //return false;
    throw;                  // if we don't log here, remove the catch altogether
}
</code></pre>

<p>It may very well be possible you cannot find a way to determine when to return <code>false</code>. In such case, the method either returns <code>true</code> or throws an exception. I would allow such behavior to be forward-compatible in case we ever do find a way to return <code>false</code> without impacting legacy consumer code.</p>

<p>If the purpose of this method is not to swallow exceptions (as your question title suggests), and only to return <code>true</code> or <code>false</code>, you should definately put in the specification that the method is a sand-box.</p>

<h3>Valid paths</h3>

<p>Isn't it possible that an empty path means the current directory?</p>

<blockquote>
<pre><code>if (String.IsNullOrEmpty(directory))
    throw new ArgumentException("No directory was specified to check for");
</code></pre>
</blockquote>

<p>Not sure whether edge cases could escape your code below. But I would favour dispatching as much as we can to built-in functionality.</p>

<blockquote>
<pre><code>// Ensure directory is ended with / to avoid false positives
if (!directory.EndsWith("/"))
    directory += "/";
</code></pre>
</blockquote>

<p><code>GetFullPath</code> ensures at most one folder separator are appended. So I've turned the condition around. Always add the separator, and let <code>GetFullPath</code> clean it up.</p>

<pre><code>directory = Path.GetFullPath(directory + "/");
</code></pre>
    </div>