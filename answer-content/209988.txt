<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<h3>Simplifying block of <code>if</code> statements</h3>

<p>The set of <code>if</code> statements is a bit repetitive, especially since the values match the property names of the nested JSON object that is stored in <code>localStorage</code>. A simpler way to implement this would be to declare <code>tempJSON</code> first, with the nested location values at <code>0</code>, then iterate through <code>locationLog</code> and increment the appropriate nested value. One can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" rel="nofollow noreferrer"><code>Object.hasOwnProperty()</code></a>:</p>

<pre><code>if (tempJSON.location.hasOwnProperty(locationLog[i])) {
    tempJSON.location[locationLog[i]]++;
</code></pre>

<p>Or use the <code>in</code> operator:</p>

<pre><code>if (locationLog[i] in tempJSON.location) {
    tempJSON.location[locationLog[i]]++;
</code></pre>

<p>Both will work the same. For the discussion of the difference, see answers to <a href="https://stackoverflow.com/q/13632999/1575353"><em>if (key in object) or if(object.hasOwnProperty(key)</em> on SO</a>.</p>

<h3>Iterating over <code>locationLog</code></h3>

<p>Since your code is using <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like <code>let</code>, it can also utilize the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loop construct instead of setting up variable <code>i</code> and using it to index into the array.</p>

<pre><code>for (const location of locationLog) {
    if (location in tempJSON.location) {
</code></pre>

<h3>Default to using <code>const</code> for variables to avoid unintentional re-assignment</h3>

<p>Variables that should not be re-assigned, like <code>tempJSON</code> can be declared with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> instead of <code>let</code>. If you determine later that re-assignment should be allowed (e.g. in a loop or conditional expression) then use <code>let</code>.</p>

<h3>variable <code>statJSON</code></h3>

<p>That may be a global variable or else you just didn't include the local declaration (and assignment) but if it is a global variable then consider making it a local variable. In the scope of the code you included, it appears superfluous...</p>

<h2>Rewritten code</h2>

<p>See the snippet below utilizing the feedback above.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var hasAttorney = false;
var hasMoney = true;
var money = 0;
var AC = 1;
var hasAC = true;
var currentlocation = "home";
var locationLog = ["relative", "shelter", "relative"]; //push locations

//Builds a JSON object with game stats
function MakeStats() {
    const tempJSON = {
        "location": {
            "home": 0,
            "motel": 0,
            "relative": 0,
            "shelter": 0,
            "apartment": 0
        },
        "moneyLeft": money,
        "ACLeft": AC,
        "finalDestination": currentlocation,
        "hasAttorney": hasAttorney,
        "hasAC": hasAC,
        "hasMoney": hasMoney
    };
    for (const location of locationLog) {
      if (location in tempJSON.location) {
        tempJSON.location[location]++;
      }
    }
    
    //localStorage not allowed in SE snippets for security reasons
    //localStorage.setItem("playerStats", JSON.stringify(tempJSON));
    console.log(tempJSON);
}
MakeStats();</code></pre>
</div>
</div>

    </div>