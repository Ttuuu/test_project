<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>The algorithm</strong></p>

<p>Given two string \$S\$ and \$Z\$, \$S\$ is a permutation of \$Z\$ if and only if they have the same multiset of characters. The fastest way of checking this is to sort the characters in each of the two strings which will produce two new strings \$S'\$ and \$Z'\$. Finally, if \$S' = Z'\$, \$S\$ is a permutation of \$Z\$. For example: \$S = \text{stop}\$, \$Z = \text{spot}\$, \$S' = Z' = \text{opst}\$.</p>

<p>You can improve the performance: </p>

<pre><code>Create a HashMap&lt;String, Integer&gt;, call it "map",
For each "word" in the word file, do:
    Sort "word" by characters ("fdsbs" -&gt; "bdfss")
    If "word" is not in "map":
        Put "word" into "map" with value "1"
    Else:
        map.put(word, map.get(word) + 1) # Increment count
</code></pre>

<p>In order to process an input word, just sort it by characters and do a simple lookup from <code>map</code>. Summa summarum:</p>

<pre><code>import java.util.*;
import java.io.File;
import java.io.FileNotFoundException;

public class Anagrams {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.println("Enter number of test cases: ");
        int testCases = Integer.parseInt(in.nextLine());

        File file = new File("/path/to/words.txt");
        Map&lt;String, Integer&gt; map = readFile(file);

        for (int i = 0; i &lt; testCases; i++) {
            String s = sort(in.nextLine());
            System.out.println(map.getOrDefault(s, 0) - 1);
        }
    }

    private static Map&lt;String, Integer&gt; readFile(File file) {
        Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();

        try (Scanner fileScanner = new Scanner(file)) {
            while (fileScanner.hasNext()) {
                String word = sort(fileScanner.next());

                if (map.containsKey(word)) {
                    map.put(word, map.get(word) + 1);
                } else {
                    map.put(word, 1);
                }
            }
        } catch (FileNotFoundException ex) {
            return null;
        }

        return map;
    }

    private static String sort(String input) {
        char[] chars = input.toCharArray();
        Arrays.sort(chars);
        return new String(chars);
    }
}
</code></pre>
    </div>