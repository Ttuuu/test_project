<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, your biggest problem is the length of the scope of variables. You declare/define all the variables at the beginning before all the code. This is not required, nor is it any good. When I try to read the code I have no chance to find the usage of variables as I have to scan all(!) lines if it is altered somewhere. Such long scope is real evil. As you said the code is unreadable and thus unmaintainable. your variable names get long and longer to avoid name collisions. So we start to move the variable definitions down in the code to the place where they are needed first.</p>

<pre><code># [...]

primes = [2,3]
exponent = 3
limit = int(10**exponent)
for number in range(len(primes)+2, limit, 1):
    possibly_prime = Primer(number, primes)     # feeds primer with numbers and past primes...
    if type(possibly_prime) == int:
        primes.append(possibly_prime)           # when prime is found it gets put into cycles

window = [0, limit]
primes_for_triangulation = []
use_primes_up_to = e**(exponent)
primes_in_window = []
for prime in primes:#creating a list from part of list
    if prime &lt; use_primes_up_to:
        primes_for_triangulation.append(prime)
    else:
        pass
    if prime &gt;= window[0] and prime &lt; window[1]:#remenant from when window was different than zero to limit
        primes_in_window.append(prime)
    else:
        pass

triangulation = []
wave_amplitude = []
for x in range(window[0], window[1], 1):# For every x down the number line the skipping stones hops over unkown primes diving into previous ones...
    possibly_wave_amplitude, possibly_triangulated = (Triangulation(primes_for_triangulation, x))
    if type(possibly_triangulated) == int: #... if its int theyre in the air
        triangulation.append(possibly_triangulated)
        wave_amplitude.append(possibly_wave_amplitude)

true = []
false = []
true_wave_amplitude = []
false_wave_amplitude = []
for tri in range(0, len(triangulation), 1): # seperating 2 list into 4 by true or false
    if triangulation[tri] in primes:
        true.append(tri)
        true_wave_amplitude.append(wave_amplitude[tri])
    else:
        false.append(tri)
        false_wave_amplitude.append(wave_amplitude[tri])

primes_by_limited_division = []
for number in range(4, limit, 1):                                   # looking for primes...
    limited_division = Primer(number, primes_for_triangulation)     # ...by limited prime list
    if type(limited_division) == int:
        primes_by_limited_division.append(limited_division)

false_quotient = []
true_quotient = []
for possibly_prime in primes_by_limited_division:   # seperating a list into 2 by true or false
    if possibly_prime in primes:
        true_quotient.append(possibly_prime)
    else:
        false_quotient.append(possibly_prime)

 # [...]
</code></pre>

<p>much better now. Now we have the chance to extract functions. From</p>

<pre><code>primes = [2,3]
exponent = 3
limit = int(10**exponent)
for number in range(len(primes)+2, limit, 1):
    possibly_prime = Primer(number, primes)     # feeds primer with numbers and past primes...
    if type(possibly_prime) == int:
        primes.append(possibly_prime)           # when prime is found it gets put into cycles
</code></pre>

<p>we make</p>

<pre><code>def get_primes(limit):
    primes = [2,3]
    for number in range(len(primes)+2, limit, 1):
        possibly_prime = Primer(number, primes)     # feeds primer with numbers and past primes...
        if type(possibly_prime) == int:
            primes.append(possibly_prime)           # when prime is found it gets put into cycles
    return primes

exponent = 3
limit = int(10**exponent)
primes = get_primes(limit)
</code></pre>

<p>If you do that with all your first level loops (and move the function definitions before all the remaining (unintended) code, this remaing code at the bottom be much more readable. At least if you chose good function names. You also immediately see what parameters a function needs. At this point you can improve naming and refactor your functions.</p>

<hr>

<p>Now we also do this for the block</p>

<pre><code>window = [0, limit]
primes_for_triangulation = []
use_primes_up_to = e**(exponent)
primes_in_window = []
for prime in primes:#creating a list from part of list
    if prime &lt; use_primes_up_to:
        primes_for_triangulation.append(prime)
    else:
        pass
    if prime &gt;= window[0] and prime &lt; window[1]:#remenant from when window was different than zero to limit
        primes_in_window.append(prime)
    else:
        pass
</code></pre>

<p>We get</p>

<pre><code>def get_primes_for_triangulation(primes, use_primes_up_to):
    primes_for_triangulation = []
    for prime in primes:                                # creating a list from part of list
        if prime &lt; use_primes_up_to:
            primes_for_triangulation.append(prime)
    return primes_for_triangulation

def get_primes_in_window(primes, window):
    primes_in_window = []
    for prime in primes:                                # creating a list from part of list
        if prime &gt;= window[0] and prime &lt; window[1]:    # remenant from when window was different than zero to limit
            primes_in_window.append(prime)
    return primes_in_window

use_primes_up_to = e**(exponent)
primes_for_triangulation = get_primes_for_triangulation(primes, use_primes_up_to)

window = [0, limit]
primes_in_window = get_primes_in_window(primes, window)
</code></pre>

<p>As I said before we now have a chance to take a close look at the extracted functions. We notice that they are trivial and can be replaced by list comprehension.</p>

<pre><code>def get_primes_for_triangulation(primes, use_primes_up_to):
    return [p for p in primes if p &lt; use_primes_up_to]

def get_primes_in_window(primes, window):
    # remenant from when window was different than zero to limit
    return [p for p in primes if p &gt;= window[0] and p &lt; window[1]]
</code></pre>

<p>You may now inline the comprehensions directly in your main body as the comprehensions are trivial. Note: Sometimes it is desirable to keep the functions as the main code may be more readable and one has the chance to add docstrings to explain the algorithms inside the functions.</p>

<hr>

<p>Now let's have a look at <code>Primer</code>. We start with your function</p>

<pre><code>def Primer(number, numbers):                    # Generates primes by modulus for every prime in numbers
    iteration = 0
    while number % numbers[iteration] != 0:     # as long as number modulus prime givesw remainder it keeps dividing
        iteration +=1
        if iteration == len(numbers):           # Every former prime in list of primes hass been divided with remainder
            return number
        else:
            pass
</code></pre>

<p>We immediately see there is a superfluous else branch that we remove</p>

<pre><code>def Primer(number, numbers):                    # Generates primes by modulus for every prime in numbers
    iteration = 0
    while number % numbers[iteration] != 0:     # as long as number modulus prime givesw remainder it keeps dividing
        iteration +=1
        if iteration == len(numbers):           # Every former prime in list of primes hass been divided with remainder
            return number
</code></pre>

<p>If you iterate over a range or any other iterable (list, ...) you use a for loop. All the error prone fiddling with indices (off by one, ...) are gone. We rewrite to</p>

<pre><code>def Primer(number, numbers):                    # Generates primes by modulus for every prime in numbers
    for n in numbers:
        if number % n == 0:
            return
    return number
</code></pre>

<p>Now we see a function that returns a single number that was passed as a parameter or it returns <code>None</code>. This smells like a boolean test. So the function</p>

<ul>
<li>shall return a boolean</li>
<li>shall have a name starting with <code>is_</code> allowing it to be used in a readable test</li>
</ul>

<p>The caller now gets a bool which is no problem as he knows the number anyway. We get</p>

<pre><code>def is_divisible(number, numbers):                    # Generates primes by modulus for every prime in numbers
    for n in numbers:
        if number % n == 0:
            return True
    return False
</code></pre>

<p>which we shorten with the help of <code>any</code> to</p>

<pre><code>def is_divisible(number, numbers):                    # Generates primes by modulus for every prime in numbers
    return any(number % n == 0 for n in numbers)
</code></pre>

<p>which we now could easily inline as well.</p>

<p>Now to the caller. Your function</p>

<pre><code>def get_primes(limit):
    primes = [2,3]
    for number in range(len(primes)+2, limit, 1):
        possibly_prime = Primer(number, primes)     # feeds primer with numbers and past primes...
        if type(possibly_prime) == int:
            primes.append(possibly_prime)           # when prime is found it gets put into cycles
    return primes
</code></pre>

<p>has to use the new test like</p>

<pre><code>def get_primes(limit):
    primes = [2,3]
    for number in range(len(primes)+2, limit, 1):
        if not is_divisible(number, primes):
            primes.append(number)           # when prime is found it gets put into cycles
    return primes
</code></pre>

<p>we got rid of this type test and <code>possibly_prime</code> and have a nice readable function. No we do the inlining where we invert the logic to better fit the caller</p>

<pre><code>def get_primes(limit):
    primes = [2,3]
    for number in range(len(primes)+2, limit, 1):
        if all(number % n != 0 for n in primes):
            primes.append(number)           # when prime is found it gets put into cycles
    return primes
</code></pre>

<p>Nice and readable. So readable, that we immediately start doubting the algorithm. Especially the range is horrible. Why start at <code>len(primes)+2</code>? Why step <code>1</code>? Why test for the whole list of primes?</p>
    </div>