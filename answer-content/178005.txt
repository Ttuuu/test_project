<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Algorithm</h1>

<p>You could actually skip looking up the maximum element in the range. This is because it gets cancelled anyways:
 $$y = {{e^{x - x_{max}}} \over {\Sigma e^{x - x_{max}}}} ={ {e^x \over e^{x_{max}}} \over {{{1} \over {e^{x_{max}}}}\Sigma e^x}} = {{e^x} \over {\Sigma e^x}} $$</p>

<p>Also, currently the results are stored in place, i.e. the original input data will be lost. This might not always be wanted, so maybe accept an iterator to write the results to?</p>

<h1><code>static_assert</code> vs. SFINAE</h1>

<p>I personally like the SFINAE approach more in this case, because it's easier to introduce another overload if needed (e.g. for iterators over associative containers) and you get immediate error reporting. That said, if the decision is final that you won't ever need another overload, <code>static_assert</code> works fine.</p>

<h1>iterator <code>value_type</code></h1>

<p>Well, if the container is nicely conforming to standard library guidelines, you'll be fine with using <code>std::iterator_traits&lt;It&gt;::value_type</code>. For custom containers, this might not be the case, though - for those cases you could use <code>decltype(*beg)</code> instead.</p>
    </div>