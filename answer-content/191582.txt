<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks like you have complicated things bit.</p>

<ol>
<li><p>Avoid patterns if functionalities can be achieved through simple properties, i think Fluent interface pattern is used.</p></li>
<li><p>MailManagaer should implement IValidate interface, to check the validity of the mail before sending mail</p>

<pre><code> public interface IValidate
 {
     bool IsValid();
 }
</code></pre></li>
<li><p>MailManager should interface IMailManager interface for sending the message</p>

<pre><code>public interface IMailManager
{
     void Send()
}
</code></pre></li>
<li><p>We can extend the functionalities by create new extension methods on IMailManager </p>

<pre><code> public static class MailManagerExtensions
 {
      public static IMailManager Draft(this IMailManager mailManager, ....)
      {
      }
 }
</code></pre></li>
<li><p>Create overloaded constructors for MailManager, and expose properties</p>

<pre><code> public MailManager(string fromAddress, List&lt;string&gt; toAddresses, string subject)
 public MailManager(string fromAddress, List&lt;string&gt; toAddresses, string subject, ....)
</code></pre></li>
<li><p>Usage of the class is as follows</p>

<pre><code>IMailManager mailManager = new MailManager(.....);
mailManager.send();
</code></pre></li>
</ol>
    </div>