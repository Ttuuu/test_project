<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some thoughts on how to further improve your program.</p>

<h2>Use all required <code>#include</code>s</h2>

<p>The program refers to <code>CHAR_BIT</code> which is defined in <code>&lt;climits&gt;</code> but only <code>&lt;limits&gt;</code> is currently included.  Similarly, <code>std::size</code> is defined in <code>&lt;iterator&gt;</code>.</p>

<h2>Eliminate unused variables</h2>

<p>The <code>idx</code> is sometimes used and sometimes ignored.  My thought is that allowing a parameter that is silently ignored is not as good as simply throwing a compile-time error.  For that reason, I'd remove <code>idx</code> from those calls.</p>

<h2>Use the C++ version of <code>#include</code> files</h2>

<p>Instead of <code>&lt;assert.h&gt;</code> a C++ program should include <code>&lt;cassert&gt;</code> to avoid polluting the global namespace.</p>

<h2>Reconsider the use of templates</h2>

<p>The current code allows me to do this:</p>

<pre><code>Register&lt;std::string&gt; stringreg{};
Register&lt;std::ostream&gt; streamreg{};
Register&lt;double&gt; doublereg{3.141};
auto madness{stringreg};
</code></pre>

<p>The only complaint from the compiler is about a narrowing conversion with <code>doublereg</code>.  It's hard to imagine that these "Register" types would be useful, with the possible exception of a <code>double</code> register.  For that reason, I'd suggest either using the four concrete sizes without templates or adding further restrictions via <code>std::enable_if</code>.</p>

<h2>Consider a more efficient data structure</h2>

<p>Processors, either real or simulated, don't typically do that much bit reversal.  Also endianness, on processors where it can be changed, is typically a global value and not a per-register value.  For all of those reasons, I would suggest that using native types such as <code>uint_fast8_t</code> or <code>uint_least8_t</code> (depending on whether speed or size is important to your program) might be a better choice.  Reversals and bit manipulation on integral types is not that hard.  Operations such as mask-and-shift are likely to be much more important than bit reversals.  </p>

<p>My typical approach with things like this is to actually write sample code <em>first</em>, as though I had already created the <code>Register</code> class and then let the proposed uses guide the design.</p>

<h2>Consider automating tests</h2>

<p>There are a number of ways to automate testing.  The code you've presented has a good start at exercising the options, but what it doesn't have is a way to automatically verify the results.  I often use <a href="https://freedesktop.org/wiki/Software/cppunit/" rel="nofollow noreferrer"><code>cppunit</code></a> for unit tests like this, but there are other unit test frameworks as well.</p>
    </div>