<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>the posted code does not compile!  Please post code that compiles.  When compiling, always enable the warnings, then fix those warnings.  (for <code>gcc</code>, at a minimum use: <code>-Wall -Wextra -Wconversion -pedantic -std=gnu17</code> )  Note, other compilers have a different set of options to accomplish the same thing</p>

<p>here is what the compiler outputs when given the posted code:</p>

<pre><code>gcc -ggdb -Wall -Wextra -Wconversion -pedantic -std=gnu11 -c "untitled.c" 

untitled.c: In function ‘BilateralFilterFastCompressive’:

untitled.c:15:18: warning: implicit declaration of function ‘_mm_malloc’ [-Wimplicit-function-declaration]
     mZ = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT); // Should be initialized to Zero
                  ^~~~~~~~~~

untitled.c:15:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     mZ = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT); // Should be initialized to Zero

                                               ^
untitled.c:15:64: error: ‘AVX_ALIGNMENT’ undeclared (first use in this function)
     mZ = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT); // Should be initialized to Zero
                                                                ^~~~~~~~~~~~~

untitled.c:15:64: note: each undeclared identifier is reported only once for each function it appears in

untitled.c:16:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     mT = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT); // Buffer
                                               ^

untitled.c:17:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     mC = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT);
                                               ^

untitled.c:18:47: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     mS = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT);
                                               ^

untitled.c:19:52: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     mCOmega = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT);
                                                    ^

untitled.c:20:52: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     mSOmega = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT);
                                                    ^

untitled.c:21:55: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     mCFiltered = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT);
                                                       ^

untitled.c:22:55: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     mSFiltered = (float*)_mm_malloc(numRows * numCols * sizeof(float), AVX_ALIGNMENT);
                                                       ^

untitled.c:24:5: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
     memset(mZ, 0.0f, numRows * numCols * sizeof(float));
     ^~~~~~

untitled.c:24:5: warning: incompatible implicit declaration of built-in function ‘memset’

untitled.c:24:5: note: include ‘&lt;string.h&gt;’ or provide a declaration of ‘memset’

untitled.c:24:40: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     memset(mZ, 0.0f, numRows * numCols * sizeof(float));
                                        ^

untitled.c:28:26: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
     paramL      = paramK * rangeStd;
                          ^

untitled.c:1:23: error: ‘M_PI’ undeclared (first use in this function); did you mean ‘M_PIf’?
 #define M_PIf (float)(M_PI)
                       ^

untitled.c:29:28: note: in expansion of macro ‘M_PIf’
     paramTau    = paramK / M_PIf;
                            ^~~~~

untitled.c:30:19: warning: implicit declaration of function ‘ceilf’ [-Wimplicit-function-declaration]
     paramN      = ceilf((paramK * paramK) / M_PIf);
                   ^~~~~

untitled.c:30:19: warning: incompatible implicit declaration of built-in function ‘ceilf’

untitled.c:30:19: note: include ‘&lt;math.h&gt;’ or provide a declaration of ‘ceilf’

untitled.c:33:41: warning: conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     vParamD = (float*)_mm_malloc(paramN * sizeof(float), AVX_ALIGNMENT);
                                         ^

untitled.c:37:31: warning: implicit declaration of function ‘expf’ [-Wimplicit-function-declaration]
         vParamD[ii - 1] = 2 * expf(-(ii * ii) / (2 * paramTau * paramTau));
                               ^~~~

untitled.c:37:31: warning: incompatible implicit declaration of built-in function ‘expf’

untitled.c:37:31: note: include ‘&lt;math.h&gt;’ or provide a declaration of ‘expf’

untitled.c:37:47: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         vParamD[ii - 1] = 2 * expf(-(ii * ii) / (2 * paramTau * paramTau));
                                               ^

untitled.c:45:5: warning: implicit declaration of function ‘ImageConvolutionGaussianKernel’ [-Wimplicit-function-declaration]
     ImageConvolutionGaussianKernel(mCFiltered, mCOmega, mT, numRows, numCols, spatialStd, paramK);
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

untitled.c:71:5: warning: implicit declaration of function ‘_mm_free’ [-Wimplicit-function-declaration]
     _mm_free(mZ);
     ^~~~~~~~

untitled.c: In function ‘InitOmegaArrays’:

untitled.c:91:23: warning: implicit declaration of function ‘cosf’ [-Wimplicit-function-declaration]
         mCOmega[ii] = cosf(paramOmega * mI[ii]);
                       ^~~~

untitled.c:91:23: warning: incompatible implicit declaration of built-in function ‘cosf’

untitled.c:91:23: note: include ‘&lt;math.h&gt;’ or provide a declaration of ‘cosf’

untitled.c:92:23: warning: implicit declaration of function ‘sinf’ [-Wimplicit-function-declaration]
         mSOmega[ii] = sinf(paramOmega * mI[ii]);
                       ^~~~

untitled.c:92:23: warning: incompatible implicit declaration of built-in function ‘sinf’

untitled.c:92:23: note: include ‘&lt;math.h&gt;’ or provide a declaration of ‘sinf’

untitled.c: In function ‘UpdateArrays’:

untitled.c:104:33: warning: conversion to ‘float’ from ‘int’ may alter its value [-Wconversion]
         mO[ii] += (iterationIdx * paramD) * (mC[ii] * mSFiltered[ii] - mS[ii] * mCFiltered[ii]);
                                 ^

untitled.c: In function ‘UpdtaeOutput’:

untitled.c:147:28: error: ‘outFactor’ undeclared (first use in this function)
         mO[ii] = mI[ii] + (outFactor * (mO[ii] / (1.0f + mZ[ii])));
                            ^~~~~~~~~

untitled.c:141:84: warning: unused parameter ‘rangeStd’ [-Wunused-parameter]
 void UpdtaeOutput(float* mO, float* mZ, float* mI, int numRows, int numCols, float rangeStd, float paramL) {
                                                                                    ^~~~~~~~

untitled.c:141:100: warning: unused parameter ‘paramL’ [-Wunused-parameter]
 void UpdtaeOutput(float* mO, float* mZ, float* mI, int numRows, int numCols, float rangeStd, float paramL) {
                                                                                                    ^~~~~~

Compilation failed.
</code></pre>

<p>Of course, if you had posted the <code>#include</code> statements for the needed header files that would have helped a lot.</p>

<p>Strongly suggest honoring the right margin (usually column 72 or 80) by breaking/indenting the lines, similar to:</p>

<pre><code>mSFiltered = (float*)_mm_malloc(
    numRows * numCols * sizeof(float), AVX_ALIGNMENT);  
</code></pre>

<p>then the code would be much easier to read and understand.</p>

<p>There are a lot of 'random' blank lines in the posted code.  For ease of readability and understanding, 1) separate code blocks ( <code>for</code> <code>if</code> <code>else</code> <code>while</code> <code>do...while</code> <code>switch</code> <code>case</code> <code>default</code> via a single blank line.    2) separate functions by 2 or 3 blank lines (be consistent)  3) follow the axiom: <em>only one statement per line and (at most) one variable declaration per statement.</em></p>

<p>if, by <code>_mm_malloc</code> a call to <code>malloc()</code> is being performed then: 1) in C the returned type is <code>void*</code> which can be assigned to any pointer.  Casting just clutters the code, making it more difficult to understand, debug, etc.  2) always check (!=NULL) the returned value to assure the operation was successful.  3) <code>malloc()</code> already allocates at the maximum alignment </p>

<p>To obtain the maximum speed of execution, Suggest setting the optimization level to the max value.  I.E.  <code>-o3</code> in <code>gcc</code></p>

<p>regarding: </p>

<pre><code>for (ii = 0; ii &lt; numRows * numCols; ii++)
{
    varTmp = mC[ii] * mSOmega[ii] + mS[ii] * mCOmega[ii];
    mC[ii] = mC[ii] * mCOmega[ii] - mS[ii] * mSOmega[ii];
    mS[ii] = varTmp;
}
</code></pre>

<p>1) varTmp can be eliminated by assigning the first statement directly to <code>mS[ii]</code></p>

<p>2) Although the compiler should optimize the <code>for()</code> statement, suggest this:</p>

<pre><code>for (ii = 0; ii &lt; numRows * numCols; ii++)
</code></pre>

<p>be changed to:</p>

<pre><code>int size = numRows * numCols;
for (ii = 0; ii &lt; size; ii++)
</code></pre>
    </div>