<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Superficial review</h1>
<ul>
<li>Naming: If this is an octree, let's call it <code>Octree</code> rather than <code>Quadtree</code>!</li>
<li>Naming: Pick a naming convention and stick with it.  We have a mix of camel-case, snake-case and pascal-case for members and variables.  A particularly confusing name is in <code>for(Element* Element:this-&gt;objects)</code>, where a variable has the same name as a type.</li>
<li>Spelling: "Boundary" and "boundaries" both need an 'a'.</li>
<li>Prefer <code>double</code> to <code>float</code>, unless you have a demonstrated problem of storage (in this case, we might need <code>Element</code> to contain <code>float</code> members, but the octree can use a higher precision).</li>
<li>Prefer strongly-typed constants rather than macro definitions (although I think <code>MAX_LEVELS</code> shouldn't be a constant at all - see below).</li>
<li>The <code>contains()</code> member is a pure lookup, so should be declared <code>const</code>.</li>
<li>Avoid owning objects by raw pointers; instead, use smart pointers with automatic memory management.</li>
</ul>
<h1>Missing code</h1>
<p>I had to infer the <code>Quadtree</code> and <code>Element</code> class definitions (so I might have come up with something different to what you have):</p>
<pre><code>#include &lt;glm/glm.hpp&gt;

#include &lt;vector&gt;

class Quadtree;

struct Element
{
    glm::vec3 pos;
    float weight;
    Quadtree* parent_group;
};

class Quadtree
{
    unsigned level = 0;
    Quadtree* trees[2][2][2];
    glm::vec3 vBoundriesBox[8];
    bool leaf;
    float combined_weight = 0;
    std::vector&lt;Element*&gt; objects;

public:
    Quadtree(Quadtree* parent,
             const glm::vec3(&amp;)[8],
             unsigned level);
    Quadtree(const Quadtree&amp;) = delete;
    void operator=(const Quadtree&amp;) = delete;

    void AddObject(Element* object);
    void Update();
    bool contains(Quadtree* child, Element* object);
};
</code></pre>
<p>And also the constructor:</p>
<pre><code>#include &lt;algorithm&gt;

Quadtree::Quadtree(Quadtree*,
                   const glm::vec3 (&amp;children)[8],
                   unsigned level)
    : level{level}, leaf{true}, objects{}
{
    using std::begin;
    using std::end;
    std::copy(begin(children), end(children),
              begin(vBoundriesBox));
}
</code></pre>
<h1>Missing tests</h1>
<p>This would have been much easier to review with a working test set, using either a C++ test framework or just a simple <code>main()</code>.</p>
<h1>Re-write</h1>
<p>I'm going to start with a similar <code>Element</code> structure, but I don't see a need for an element to know its container here, so I'll remove the intrusive pointer:</p>
<pre><code>struct Element
{
    glm::vec3 pos;
    float weight;
};
</code></pre>
<p>Now for the octree.  Start with its bounding box, which can be described using two vectors (I'm assuming the usual mathematical right-handed coordinates):</p>
<pre><code>glm::vec3 near_bottom_left;
glm::vec3 far_top_right;
</code></pre>
<p>As these don't change, they can be declared <code>const</code>.  It's also useful to know the midpoint, so we can allocate points to their quadrants.</p>
<p>We should also have a <code>level</code> member, but I'll change its meaning so that it's then maximum depth permitted <em>below</em> this level.  That means we no longer need <code>MAX_LEVELS</code> to tell us how deep the tree can go - it's simply specified as a property of the top node and propagated down until it reaches zero.</p>
<p>We'll want to record the aggregate properties, but I won't actually implement the updating of these as you seem to be comfortable with that part.</p>
<pre><code>double total_weight;
glm::vec3 mean_position;
</code></pre>
<p>Finally, to make it an actual <em>tree</em>, we need some children:</p>
<pre><code>Octree* children[8];
std::vector&lt;Element&gt; objects;
</code></pre>
<p>For the user interface, we'll need a constructor and some way to add an element:</p>
<pre><code>public:
    explicit Octree(glm::vec3 far_bottom_left,
                    glm::vec3 near_top_right,
                    unsigned max_depth);

    void add(Element e);
</code></pre>
<p>The constructor is easy to implement:</p>
<pre><code>Octree::Octree(glm::vec3 far_bottom_left,
               glm::vec3 near_top_right,
               unsigned max_depth)
    : far_bottom_left{far_bottom_left},
      near_top_right{near_top_right},
      middle{0.5f * far_bottom_left + 0.5f * near_top_right},
      level{max_depth}
{}
</code></pre>
<p>There's a bit more work for <code>add()</code>, but we can start with the simplest case:</p>
<pre><code>void Octree::add(Element e)
{
    if (objects.empty() &amp;&amp; is_leaf()) {
        objects.emplace_back(std::move(e));
        return;
    }
}
</code></pre>
<p>Another simple case is at the final level:</p>
<pre><code>    if (level == 0) {
        objects.emplace_back(std::move(e));
        return;
    }
</code></pre>
<p>I've assumed an <code>is_leaf</code> method; we'd better define that:</p>
<pre><code>bool Octree::is_leaf() const
{
    // we're a leaf node if all children are null
    return std::all_of(std::begin(children), std::end(children),
                       [](auto&amp; x){return !x;});
}
</code></pre>
<p>Now, the more difficult case - delegate to the appropriate child node:</p>
<pre><code>    const bool left = e.pos.x &lt; middle.x;
    const bool down = e.pos.y &lt; middle.y;
    const bool far = e.pos.z &lt; middle.z;
    auto&amp; child = children[4*left + 2*down + far];
    if (!child) {
        // TODO: create a new node
    }
    child.add(std::move(e));
</code></pre>
<p>The <code>TODO</code> comment needs filling in.  How do we determine the bounds of the new child node?  We can start with the bounds of the parent, and move either the left or the right bound to the middle so that the point is still contained, then repeat in the other two dimensions:</p>
<pre><code>        glm::vec3 fbl = far_bottom_left;
        glm::vec3 ntr = near_top_right;
        (left ? fbl : ntr).x = middle.x;
        (down ? fbl : ntr).y = middle.y;
        (far ? fbl : ntr).z = middle.z;
        child = std::make_unique&lt;Octree&gt;(fbl, ntr, level-1);
        // move any directly-held object
        for (auto&amp; o: objects)
            add(std::move(o));
        objects.clear();
</code></pre>
<hr>
<h1>Putting it all together</h1>
<p>There were a couple of bugs in my thoughts above; having corrected them, we get:</p>
<pre><code>#include &lt;glm/glm.hpp&gt;

#include &lt;algorithm&gt;
#include &lt;iterator&gt;
#include &lt;iosfwd&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

struct Element
{
    glm::vec3 pos;
    float weight;
};

class Octree
{
    // geometry
    const glm::vec3 far_bottom_left;
    const glm::vec3 near_top_right;
    const glm::vec3 middle;

    // limit to tree depth
    unsigned level;

    // aggregate properties from constituent objects
    double total_weight = 0;
    glm::vec3 mean_position = {};

    // subtree objects - any or all may be null
    // index using (left=4, right=0) + (bottom=2, top=0) + (far=1, near=0)
    std::unique_ptr&lt;Octree&gt; children[8] = {};
    // directly held elements - empty unless all children are null
    std::vector&lt;Element&gt; objects = {};

public:
    explicit Octree(glm::vec3 far_bottom_left,
                    glm::vec3 near_top_right,
                    unsigned max_depth);

    void add(Element e);

    std::ostream&amp; print(std::ostream&amp;, const std::string&amp; indent) const;

    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Octree&amp; o) {
        return o.print(out, {});
    }

private:
    bool is_leaf() const;
};


Octree::Octree(glm::vec3 far_bottom_left,
               glm::vec3 near_top_right,
               unsigned max_depth)
    : far_bottom_left{far_bottom_left},
      near_top_right{near_top_right},
      middle{0.5f * far_bottom_left + 0.5f * near_top_right},
      level{max_depth}
{}


void Octree::add(Element e)
{
    if (level == 0 || objects.empty() &amp;&amp; is_leaf()) {
        objects.emplace_back(std::move(e));
        return;
    }
    const bool left = e.pos.x &lt; middle.x;
    const bool down = e.pos.y &lt; middle.y;
    const bool far = e.pos.z &lt; middle.z;
    auto&amp; child = children[4*left + 2*down + far];
    if (!child) {
        glm::vec3 fbl = far_bottom_left;
        glm::vec3 ntr = near_top_right;
        (left ? ntr : fbl).x = middle.x;
        (down ? ntr : fbl).y = middle.y;
        (far ? ntr : fbl).z = middle.z;
        child = std::make_unique&lt;Octree&gt;(fbl, ntr, level-1);
        // move any directly-held object
        auto to_move = std::move(objects);
        objects.clear();
        for (auto&amp; o: to_move)
            add(std::move(o));
    }
    child-&gt;add(std::move(e));
}


bool Octree::is_leaf() const
{
    // we're a leaf node if all children are null
    return std::all_of(std::begin(children), std::end(children),
                       [](auto&amp; x){return !x;});
}
</code></pre>
<p>To test it, here's some output operators:</p>
<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const glm::vec3&amp; pos)
{
    return os &lt;&lt; '(' &lt;&lt; pos.x
              &lt;&lt; ',' &lt;&lt; pos.y
              &lt;&lt; ',' &lt;&lt; pos.z
              &lt;&lt; ')';
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Element&amp; e)
{
    return os &lt;&lt; e.pos;
}

std::ostream&amp; Octree::print(std::ostream&amp; os, const std::string&amp; indent) const
{
    os &lt;&lt; indent
       &lt;&lt; "Octree " &lt;&lt; far_bottom_left
       &lt;&lt; " to " &lt;&lt; near_top_right &lt;&lt; '\n';
    if (!os) { return os; }
    for (auto const&amp; e: objects) {
        os &lt;&lt; indent &lt;&lt; "- " &lt;&lt; e &lt;&lt; '\n';
    }
    if (!os) { return os; }
    for (auto i = 0u;  i &lt; std::size(children);  ++i) {
        if (children[i]) {
            os &lt;&lt; indent
               &lt;&lt; (i &amp; 1 ? "far" : "near") &lt;&lt; ' '
               &lt;&lt; (i &amp; 2 ? "bottom" : "top") &lt;&lt; ' '
               &lt;&lt; (i &amp; 4 ? "left" : "right") &lt;&lt; ": \n";
            children[i]-&gt;print(os, indent+"  ");
            if (!os) { return os; }
        }
    }
    return os;
}
</code></pre>
<p>And a test program to show we're producing the right output, and to measure execution time:</p>
<pre><code>#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    {
        // Visual test - do these few points go into the right boxes?
        Octree tree{{0,0,0}, {1,1,1}, 3};

        std::mt19937 gen;
        std::uniform_real_distribution&lt;float&gt; dis{0,1};

        for (auto i = 0u;  i &lt; 20;  ++i) {
            tree.add({{dis(gen), dis(gen), dis(gen)}, 1});
        }

        std::cout &lt;&lt; tree;
    }

    std::cout &lt;&lt; std::endl;

    {
        // Timing test
        Octree tree{{0,0,0}, {1,1,1}, 5};

        std::mt19937 gen;
        std::uniform_real_distribution&lt;float&gt; dis{0,1};

        auto const starttime = std::chrono::high_resolution_clock::now();

        auto const chunk = 10000;
        for (auto i = 0u;  i &lt; 20;  ++i) {
            for (auto j = 0;  j &lt; chunk;  ++j) {
                tree.add({{dis(gen), dis(gen), dis(gen)}, 1});
            }
            auto const now = std::chrono::high_resolution_clock::now();
            auto const time_in_ms
                 = duration_cast&lt;milliseconds&gt;(now - starttime);
            std::cout &lt;&lt; chunk*(i+1) &lt;&lt; " points: "
                      &lt;&lt; time_in_ms.count() &lt;&lt; " ms\n";
        }
    }
}
</code></pre>
<p>My results:</p>
<pre class="lang-none prettyprint-override"><code>Octree (0,0,0) to (1,1,1)
near top right: 
  Octree (0.5,0.5,0.5) to (1,1,1)
  near top right: 
    Octree (0.75,0.75,0.75) to (1,1,1)
    near top right: 
      Octree (0.875,0.875,0.875) to (1,1,1)
      - (0.992881,0.957507,0.996461)
    near top left: 
      Octree (0.75,0.875,0.875) to (0.875,1,1)
      - (0.792207,0.878431,0.959492)
  near top left: 
    Octree (0.5,0.75,0.75) to (0.75,1,1)
    - (0.725839,0.970593,0.98111)
  near bottom left: 
    Octree (0.5,0.5,0.75) to (0.75,0.75,1)
    - (0.503663,0.655741,0.797929)
far top right: 
  Octree (0.5,0.5,0) to (1,1,0.5)
  near top right: 
    Octree (0.75,0.75,0.25) to (1,1,0.5)
    - (0.798106,0.80028,0.297029)
  far top right: 
    Octree (0.75,0.75,0) to (1,1,0.25)
    - (0.964889,0.967695,0.157613)
  near bottom left: 
    Octree (0.5,0.5,0.25) to (0.75,0.75,0.5)
    - (0.740647,0.743132,0.474759)
near bottom right: 
  Octree (0.5,0,0.5) to (1,0.5,1)
  near bottom right: 
    Octree (0.75,0,0.75) to (1,0.25,1)
    near top left: 
      Octree (0.75,0.125,0.875) to (0.875,0.25,1)
      - (0.814724,0.135477,0.905792)
      - (0.835009,0.126987,0.968868)
  far bottom right: 
    Octree (0.75,0,0.5) to (1,0.25,0.75)
    - (0.913376,0.221034,0.632359)
  near top left: 
    Octree (0.5,0.25,0.75) to (0.75,0.5,1)
    - (0.678735,0.398739,0.75774)
far bottom right: 
  Octree (0.5,0,0) to (1,0.5,0.5)
  - (0.957167,0.109862,0.485376)
near top left: 
  Octree (0,0.5,0.5) to (0.5,1,1)
  far top left: 
    Octree (0,0.75,0.5) to (0.25,1,0.75)
    near top right: 
      Octree (0.125,0.875,0.625) to (0.25,1,0.75)
      - (0.211924,0.933993,0.68136)
    near top left: 
      Octree (0,0.875,0.625) to (0.125,1,0.75)
      - (0.112465,0.915736,0.639763)
near bottom left: 
  Octree (0,0,0.5) to (0.5,0.5,1)
  far top right: 
    Octree (0.25,0.25,0.5) to (0.5,0.5,0.75)
    - (0.392227,0.422088,0.655478)
  far bottom right: 
    Octree (0.25,0,0.5) to (0.5,0.25,0.75)
    far top left: 
      Octree (0.25,0.125,0.5) to (0.375,0.25,0.625)
      - (0.278498,0.188382,0.546881)
    far bottom left: 
      Octree (0.25,0,0.5) to (0.375,0.125,0.625)
      - (0.308167,0.0975404,0.547221)
  near top left: 
    Octree (0,0.25,0.75) to (0.25,0.5,1)
    - (0.0357117,0.361294,0.849129)
far bottom left: 
  Octree (0,0,0) to (0.5,0.5,0.5)
  near bottom left: 
    Octree (0,0,0.25) to (0.25,0.25,0.5)
    far top right: 
      Octree (0.125,0.125,0.25) to (0.25,0.25,0.375)
      - (0.173865,0.171187,0.301913)
    near bottom right: 
      Octree (0.125,0,0.375) to (0.25,0.125,0.5)
      - (0.141886,0.00478348,0.421761)
</code></pre>
<pre class="lang-none prettyprint-override"><code>10000 points: 15 ms
20000 points: 27 ms
30000 points: 38 ms
40000 points: 49 ms
50000 points: 59 ms
60000 points: 69 ms
70000 points: 78 ms
80000 points: 88 ms
90000 points: 98 ms
100000 points: 107 ms
110000 points: 118 ms
120000 points: 129 ms
130000 points: 140 ms
140000 points: 152 ms
150000 points: 163 ms
160000 points: 172 ms
170000 points: 181 ms
180000 points: 190 ms
190000 points: 199 ms
200000 points: 208 ms
</code></pre>
    </div>