<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If your purpose is the same as stated by @sachin then my remarks are below.</p>

<p><strong>Person</strong>:</p>

<ul>
<li>Why did you name it <em>person</em> instead of <em>contact</em>, some can think that you will manage different kinds of contacts in the future.</li>
<li>Since the only usage you made of <code>favourite</code> is a test on it, then store it as a <code>boolean</code> there is no need to use a string and string comparison for that. Note also that the convention is to use <em>is</em> as a prefix for getters on boolean; <code>isFavourite</code> is a better name.</li>
<li><code>getFullName</code> is a computed value, you can compute it when required if you want.</li>
<li><code>equals</code> and <code>hashCode</code> are missing. Since you plan to use this class in a collection, those are two important methods. If you consider that each entry is a different one then you may keep it as is but this have many drawback.</li>
</ul>

<p><strong>ContactList</strong>:</p>

<ul>
<li><code>addContacts(String, String, String, String, String, boolean)</code> can delegate to <code>addContacts(Person)</code> so that you have one single point to change when inserting into the list. I have used the method with all those <code>String</code> parameters to show the complexity of those kind of methods. If you want to follow the <em>SOLID</em> principles, you should better have one class (Maybe a builder like @Sachin suggets) to create a valid <code>Person</code> from different combination of parameters and keep your <code>ContactList</code> cleaner by only managing the contacts, not the creation. I would have named this method with a singular form <code>addContact</code> because they are used to add one contact. And maybe follow the method names used in the collections Api: <code>add(Contact)</code>.</li>
<li><code>getTotalContacts</code>, again <code>getSize()</code> or <code>size()</code> are more common.</li>
<li><code>removeContacts(String)</code>. Instead of looping trough the list to find the name then loop again in the list (via indexOf) you can just save the <code>Person</code> and remove it via your <code>removeContacts(Person)</code> method. But since you have decided to allow many contacts with the same name, you should better loop until none is found.</li>
<li><code>displayFavouriteContacts</code>. Again, to follow the <em>SOLID</em> principles, this should not be done by <code>ContactList</code> but by another class that use a method on <code>ContactList</code> to retrieve the favourites and then display them. In case you don't know, think about testsing; how could you test your method via a unit test ?</li>
<li><code>personList</code>. You are using an <code>ArrayList</code> but there may be better types of collections. And with a good implementation of <code>equals</code> and <code>hashCode</code> in <code>Person</code> you can benefit from them.</li>
</ul>

<p>Finally, I am not sure that it will perform better but your code can gain by using the Java 8 streams and functional style.</p>

<p>You duplicate almost all the code in each <code>getPhone..()</code> methods, but the only variation is the predicate. By creating a method that use a predicate to filter the stream of contacts you can quickly reduce the duplication. You can also a mapping function to select the properties that you want:</p>

<pre><code>public List&lt;String&gt; getPhoneByLastName(String lastName) {
  return getPhoneBy(p -&gt; p.getLastName().equals(lastName));
}

public List&lt;String&gt; getPhoneBy(Predicate&lt;Person&gt; predicate) {
  return collect(predicate, Person::getPhone);
}

private &lt;T&gt; List&lt;T&gt; collect(Predicate&lt;Person&gt; predicate, Function&lt;Person, T&gt; collector) {
  return personList.stream()
            .filter(predicate)
            .map(collector)
            .collect(Collectors.toList());
}
</code></pre>
    </div>