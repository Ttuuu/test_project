<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>equals</code> method is <em>not</em> transitive (e.g. <code>Point(2, 2) == Point.Wildcard</code> and <code>Point.Wildcard == Point(3, 3)</code> but <code>Point(2, 2) != Point(3, 3)</code>. See <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html" rel="nofollow noreferrer">Any.equals - stdlib - Kotlin Programming Language</a> for more details on the requirements for <code>equals</code>. You might also consider using <a href="https://www.javadoc.io/doc/com.google.guava/guava-testlib/20.0" rel="nofollow noreferrer"><code>EqualsTester</code></a> from <code>guava-testlib</code> for testing your own implementations of <code>equals</code>.</p>

<p>If you define your own method instead of defining a custom, non-transitive <code>equals</code> implementation than your existing solution can become much simpler:</p>

<pre><code>data class Point(val line: Int, val column: Int) {
    companion object {
        val wildcard = Point(-1, -1)
    }

    infix fun matches(other: Point): Boolean {
        return this == other || other === wildcard || this === wildcard
    }
}
</code></pre>

<p>Notes:</p>

<ol>
<li><code>Point(2, 2) matches Point(-1, -1)</code> will return <code>false</code>.</li>
<li><code>Point(2, 2) matches Point.wildcard</code> will return <code>true</code>.</li>
<li>If you want both to return <code>true</code> then replace the <code>===</code> with <code>==</code> in <code>matches</code>.</li>
<li>Marking <code>matches</code> as <code>infix</code> is purely optional but it seems to me like a good fit.</li>
</ol>
    </div>