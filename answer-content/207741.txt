<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can easily decouple the scoring-algorithm from the container used to score dice-rolls by using templates. Not that you actually need a container, if you have the right iterators.</p>

<p>Anyway, why aren't you prepared to deal with more dice being thrown?</p>

<p>Also, consider making it data-driven:</p>

<pre><code>template &lt;class InputIt, class Sentinel = InputIt&gt;
auto score(InputIt first, Sentinel last) {
    constexpr auto cap = 8;
    constexpr unsigned goals[][3] = {
        {1, 3, 1000},
        {6, 3,  600},
        {5, 3,  500},
        {4, 3,  400},
        {3, 3,  300},
        {2, 3,  200},
        {1, 1,  100},
        {5, 1,   50},
    };
    unsigned char dice[cap] = {};
    for (; first != last; ++first)
        ++dice[(unsigned)*first % cap];
    auto result = 0ULL;
    for (auto [which, count, reward] : goals) {
        auto&amp; x = dice[which % cap];
        result += x / count * reward;
        x %= count;
    }
    return result;
}
</code></pre>

<p>Global mutable state is best avoided. Why is the random-generator and related things global?</p>

<p>For some reason, you have extra-newlines surrounding the <code>return</code> of your scoring-function. Maybe you should automate indentation?</p>

<p><code>main()</code> is your only function where the opening brace doesn't have its own line. While there is Nothing wrong with that, try for consistency.</p>

<p><code>return 0;</code> is implicit for <code>main()</code>.</p>
    </div>