<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like that the code uses event delegation to determine what action to take based on the element that was clicked. </p>

<p>It is a good habit to use <code>const</code> when declaring a variable until it is determined that re-assignment is necessary- then use <code>let</code>. </p>

<p>There is a typo in the function name <code>eventListiners</code>...</p>

<p>In <code>eventListiners</code> the element with <em>id</em> <code>task-form</code> is selected using <code>querySelector()</code>:</p>

<blockquote>
<pre><code>document.querySelector('#task-form').addEventListener('submit', getTask);
</code></pre>
</blockquote>

<p>It is faster to use <code>document.getElementById()</code><sup><a href="https://www.sitepoint.com/community/t/getelementbyid-vs-queryselector/280663/2" rel="nofollow noreferrer">1</a></sup> or even just for property <code>document.forms[0]</code> (presuming it is the first form on the page- if not, adjust <code>0</code> accordingly). Other functions use <code>querySelector</code> when  <code>document.getElementById()</code> could be used instead. </p>

<p>The function <code>removeTask()</code> stores an array in <code>tasks</code>, and at the end of the function that variable is overwritten with a string. It might be confusing to someone trying to read your code to keep track of variable types. If the string value was used more than once it would be wise to use a different variable but because it is only used once it can be eliminated by substituting the assigned value where it is used. </p>

<p>The functions <code>onClick()</code> and <code>removeTask()</code> use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/event" rel="nofollow noreferrer"><code>window.event</code></a> instead of  accepting <code>event</code> as a formal argument (like <code>getTask()</code> does). It is best to accept the event parameter in the handler function instead of referencing that global property. </p>

<blockquote>
  <p>You <em>should</em> avoid using this property in new code, and should instead use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event" rel="nofollow noreferrer"><code>Event</code></a> passed into the event handler function. This property is not universally supported and even when supported introduces potential fragility to your code. </p>
  
  <blockquote>
    <p><strong>Note</strong>: This property can be fragile, in that there may be situations in which the returned Event is not the expected value. In addition, <code>Window.event</code> is not accurate for events dispatched within <a href="https://developer.mozilla.org/en-US/docs/Glossary/shadow_tree" rel="nofollow noreferrer">shadow trees</a>.
    <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/event" rel="nofollow noreferrer">2</a>.</p>
  </blockquote>
</blockquote>

<p>The function <code>storeTask()</code> sets <code>tasks</code> based on the localStorage values:</p>

<blockquote>
<pre><code>if(localStorage.getItem('tasks') === null){
 tasks = [];
} else {
  tasks = JSON.parse(localStorage.getItem('tasks'));
};
</code></pre>
</blockquote>

<p>This can be simplified to:</p>

<pre><code>const tasks = JSON.parse(localStorage.getItem('tasks')) || [];
</code></pre>

<p>The function <code>clearTasks()</code> loops over the list child nodes and removes them. This could be simplified by setting the <code>innerHTML</code> of the list element to an empty string. </p>

<pre><code>taskList.innerHTML = '';
</code></pre>

<p>The function <code>onClick()</code> checks <code>Event.target.className</code> for exact values. It would be simpler to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/contains" rel="nofollow noreferrer"><code>target.classList.contains()</code></a> - e.g.</p>

<pre><code>if(event.target.classList.contains('fa-remove')) {
  removeTask();
};

// Clear Tasks
if(event.target.classList.contains('clear-tasks')) {
</code></pre>

<p>The <code>forEach</code> at the end of <code>addTasksFromStorage()</code> can be simplified from </p>

<blockquote>
<pre><code>tasks.forEach(task =&gt; {
    addTaskToList(task)
  });
</code></pre>
</blockquote>

<p>to just: </p>

<pre><code>tasks.forEach(addTaskToList);
</code></pre>
    </div>