<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Starting with the <a href="https://codereview.stackexchange.com/a/237952/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/213275/sam-stafford">@SamStafford</a>, you could take this even further and make it a nice inheritance exercise by using a sub-class of <code>str</code> that compares true to any other character:</p>

<pre><code>class WildCard(str):
    def __eq__(self, other):
        # all other strings are equal to the wildcard
        return isinstance(other, str)

STAR = WildCard("*")

def build_common_pattern(words):
    """Build a pattern matching all input words.
    WILD matches any single character."""
    pattern = list(words[0])
    for word in words:
        assert len(word) == len(pattern)
        pattern = [p if c == p else STAR for c, p in zip(word, pattern)]
    return "".join(pattern)
</code></pre>

<p>This way you avoid having to do many string slices, although this makes it only perform better for really large strings (patterns with each character having a 50% chance to be a wildcard and a length of more than 1k characters):</p>

<p><a href="https://i.stack.imgur.com/hIbFr.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/hIbFr.png" alt="enter image description here"></a></p>

<hr>

<p>However, this does not solve the exact problem your code solves, since it does not build a dictionary mapping patterns to words that match it. For this I can only give you some stylistic advice on how to improve your code.</p>

<ul>
<li><p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommends <code>lower_case</code> for functions and variables.</p></li>
<li><p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict(set)</code></a> to avoid having to check if you have seen a pattern before.</p></li>
<li><p><code>range</code> starts by default at <code>0</code>, and so do slices.</p></li>
<li><p>Use the same way I used above to avoid string slices and iterate over the word/pattern instead.</p></li>
</ul>



<pre><code>from collections import defaultdict
from itertools import combinations

def build_buckets(words):
    buckets_dict = defaultdict(set)
    for word in words:
        for number_spaces in range(len(word) + 1):  # loop through all spaces of word
            buckets = combinations(range(len(word)), number_spaces)
            for indices in map(set, buckets):  # for each index in this combination
                new_word = "".join(c if i not in indices else "*"
                                   for i, c in enumerate(word))
                buckets_dict[new_word].add(word)
    return buckets_dict
</code></pre>

<p>Note that this is probably a futile effort, since if there were no wordlist, the number of patterns grows exponentially. Since you do have a wordlist it does not, but the number of patterns will still increase rapidly. For 15 words of length 15, your code already takes almost 2 seconds.</p>
    </div>