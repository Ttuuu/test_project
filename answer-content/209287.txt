<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What is all this for?</p>

<pre><code>typedef typename std::remove_const&lt;typename std::remove_reference&lt;decltype(*std::declval&lt;ForwardIterator&gt;())&gt;::type&gt;::type Real;
</code></pre>

<p>That's a really complex way of doing something.</p>

<p>Let's break this down.</p>

<pre><code>using T1 = std::declval&lt;ForwardIterator&gt;  // Returns the reference version of `ForwardIterator`



using T2 = decltype(*T1())                // Creates a temporary object.
                                          // De-reference the temporary
                                          // Gets the type of the de-referenced value.2


using T3 = std::remove_reference&lt;T2&gt;::type; // removes references.
using T4 = std::remove_const&lt;T3&gt;::type;     // removes an const ness.
</code></pre>

<p>Simpler to write:</p>

<pre><code>typedef typename std::iterator_traits&lt;ForwardIterator&gt;::value_type Real;
</code></pre>

<p>Or if you want to use the modern syntax.</p>

<pre><code>using Real = typename std::iterator_traits&lt;ForwardIterator&gt;::value_type;
</code></pre>

<p>Or if you are like me and hate using the <code>typename</code> everywhere you can create your own <code>template using</code> to make this simpler.</p>

<pre><code>template&lt;typename I&gt;
using IterValue = typename std::iterator_traits&lt;I&gt;::value_type;
</code></pre>

<p>Now in your code you can use:</p>

<pre><code>template&lt;class ForwardIterator, ReturnType = IterValue&lt;ForwardIterator&gt;&gt;
ReturnType mean(ForwardIterator first, ForwardIterator last)
{
    BOOST_ASSERT_MSG(first != last, "At least one sample is required to compute the mean.");
    int i = 1;            // The i value is always an int no matter what the data type is

    ReturnType mu = 0;
    for(auto it = first; it != last; ++it) {
        mu = mu + (*it - mu)/i;             // Sure!
        i += 1;
    }
    return mu;
}
</code></pre>
    </div>