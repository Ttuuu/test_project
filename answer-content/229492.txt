<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Setting up logging</h2>

<p>You might be interested in <a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="nofollow noreferrer"><code>logging.basicConfig</code></a>, which can setup everything you setup there as well. It's not sufficient if you want for example both a file and a stream logger, but for a small, static configuration like this it's perfectly suitable. Your code up there becomes a simple:</p>

<pre class="lang-py prettyprint-override"><code>logging.basicConfig(format="[%(levelname)s] %(asctime)s %(message)s", level=logging.DEBUG)
logger = logging.getLogger(__name__)
</code></pre>

<p>And you're done. (<a href="https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler" rel="nofollow noreferrer">The default stream is <code>sys.stderr</code></a>.)</p>

<p>Do note that in no way, shape or form is the long form wrong - it's easier extendable, for one. However, for a quick script it might be easier to use basicConfig.</p>

<h3>Module-level logging</h3>

<p>I'd recommend you use a different logger for every different file, and have all of them be named the way you did that one. However, if you then also include the <code>%(name)</code> parameter in your format string, your logging messages will each contain the filename of the file they're logging from. This will help in debugging if you don't know exactly where the problems come from. I personally also include <code>%(lineno)</code> for the line number. Personally, I always use the <code>.format</code> method for my logging strings, which makes it look like this:</p>

<pre class="lang-py prettyprint-override"><code>logging.basicConfig(format="{levelname: &lt;8}:{asctime}:{name: &lt;30}:{lineno: &lt;4}:{message}", level=logging.DEBUG, style="{")
# Or with % formatting:
logging.basicConfig(format="%(levelname)-8s:%(asctime)s:%(name)-30s:%(lineno)-4s:%(message)s", level=logging.DEBUG)
</code></pre>

<p>Which tells me exactly where a logging statement was made as well. You won't have to search for your own exact wording anymore when you resume debugging your code for that one weird issue 3 months from now. You can just grab filename and linenumber and you're at the right location.</p>
    </div>