<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is neat and easy to read and understand.  Good job!  Here are some things that may help you improve your program.</p>

<h2>Write portable code</h2>

<p>This code can easily compile and run on Linux as well as Windows with a few small changes.  First, eliminate <code>#include &lt;windows.h&gt;</code> because it won't be needed.  Next, instead of using <code>Sleep(100)</code> we could use this:</p>

<pre><code>    std::this_thread::sleep_for(100ms);
</code></pre>

<p>That makes it portable, but there's a better way.</p>

<h2>Understand your code libraries</h2>

<p>The <code>cv::waitKey</code> takes as its argument, the number of milliseconds to show the image.  So what this means is that you can simply delete the line that says <code>Sleep(100)</code> and change the <code>while</code> loop to this:</p>

<pre><code>while (cv::waitKey(100) != 27) {
</code></pre>

<h2>Eliminate unused variables</h2>

<p>The variable <code>frame</code> in your main code is defined but never used.  Since unused variables are a sign of poor code quality, you should seek to eliminate them.  Your compiler is probably smart enough to warn you about such things if you know how to ask it to do so.</p>

<h2>Use <code>const</code> and <code>constexpr</code> where practical</h2>

<p>It's good that you used a named variable for <code>size</code> in <code>main</code> but it could be improved slightly by also declaring it <code>const</code> or better, <code>constexpr</code>.  I'd do the same with the title, rather than repeating the string:</p>

<pre><code>auto constexpr title = "Conway game of life";
</code></pre>

<p>Also the <code>UPSAMPLING</code> constant would be better as a <code>constexpr int</code> rather than a <code>#define</code>.  Making that change allows for type checking and costs nothing in terms of runtime performance.</p>

<h2>Use only required <code>#include</code>s</h2>

<p>The code has several <code>#include</code>s that are not needed.  This clutters the code and makes it more difficult to read and understand.  Only include files that are actually needed.  In this case, the only required includes are these:</p>

<pre><code>#include &lt;opencv2/opencv.hpp&gt;
#include &lt;random&gt;
#include &lt;vector&gt;
</code></pre>

<h2>Don't reseed the random number generator more than once</h2>

<p>The program currently constructs and reseeds the random number generator with every call to <code>random</code>.  This is really neither necessary nor advisable.  Instead, just call it once when the program begins.  We can do that by making the first two variables <code>static</code> like this: </p>

<pre><code>inline int random(int bottom, int top) {
    static std::random_device dev;
    static std::mt19937 rng(dev());
    std::uniform_int_distribution &lt;std::mt19937::result_type&gt; dist(bottom, top - 1);
    return dist(rng);
}
</code></pre>

<h2>Make data members <code>private</code></h2>

<p>There doesn't appear to be any reason for data members of <code>Board</code> to be public, so best practice is to make them private.</p>

<h2>Simplify expressions</h2>

<p>The code contains some expressions which seem overly verbose.  For example, instead of this:</p>

<pre><code>if (!cells[y][x]) {
    if (aliveNs == 3) {
        ret[y][x] = true;
    }
} else {
    if (aliveNs &lt; 2 || aliveNs &gt; 3) {
        ret[y][x] = false;
    } else {
        ret[y][x] = true;
    }
}
</code></pre>

<p>I would write this:</p>

<pre><code>ret[y][x] = (aliveNs == 3) || (aliveNs == 2 &amp;&amp; cells[y][x]);
</code></pre>

<h2>Use standard library functions</h2>

<p>The constructor for <code>Board</code> is currently this:</p>

<pre><code>Board(int width, int height) : width(width), height(height) {
    this-&gt;cells = std::vector &lt; std::vector &lt; bool &gt;&gt; (height, std::vector&lt;bool&gt;(width, false));
    std::random_device dev;
    std::mt19937 rng(dev());
    std::uniform_int_distribution &lt;std::mt19937::result_type&gt; distX(0, width - 1);
    std::uniform_int_distribution &lt;std::mt19937::result_type&gt; distY(0, height - 1);
    for (int i = 0; i &lt; (width * height) / 2; i++) {
        int x = distX(rng);
        int y = distY(rng);
        cells[y][x] = true;
    }
}
</code></pre>

<p>That's not wrong, but it's much more complicated than it needs to be.  Here's how I'd write that:</p>

<pre><code>Board(int width, int height, float density = 0.5) : 
    width(width),
    height(height),
    cells((width + 2) * (height + 2))
{
    std::random_device dev;
    std::mt19937 rng(dev());
    std::bernoulli_distribution b(density);
    std::generate(cells.begin(), cells.end(), [&amp;b, &amp;rng](){ return b(rng); });
}
</code></pre>

<p>Now instead of explicitly looping, we use <code>std::generate</code> and we use <a href="https://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution" rel="nofollow noreferrer"><code>std::bernoulli_distribution</code></a> explicitly to show that 50% of the cells should be populated by default, but it's a parameter (<code>density</code>) that may be altered by the caller.  I've also changed the member data variable to this:</p>

<pre><code>const unsigned width;
const unsigned height;
std::vector &lt;bool&gt; cells;
</code></pre>

<p>By having a single <code>vector</code>, we have a more compact structure.  This requires some adjustments to the rest of the code, as shown in the following suggestion.</p>

<h2>Use iterators instead of indexing</h2>

<p>The double array indexing is not a particularly efficent way of traversing a data structure.  Better, in my view, would be to use a single dimension array and then use an iterator.  For instance, here is how I would write the <code>aliveNeighbors</code> function:</p>

<pre><code>inline int aliveNeighbors(std::vector&lt;bool&gt;::const_iterator it) const {
    static const std::array&lt;int, 8&gt; deltas {
        -2-1-width, -2-width, -2+1-width,
            -1,             +1,
        +2-1+width, +2+width, +2+1+width,
    };
    return std::accumulate(deltas.begin(), deltas.end(), 0, [this, it](int neighbors, int delta){
                return neighbors + *(it+delta);
            });
}
</code></pre>

<p>This uses a number of things.  First, it uses a <code>static const std::array</code> to store the <code>deltas</code> to the neighbors, given an iterator.  That is, it allows the program to compute the location of each neighbor.  Next, we use <code>std::accumulate</code> to iterate through the <code>deltas</code> and count the neighbors.  It uses a <em>lambda</em> as the function to accumulate the neighbor count.  There is another implicit feature that helps simplify the code.  That feature is the next suggestion.</p>

<h2>Simplify range checking by eliminating the need for it</h2>

<p>The existing <code>aliveNeighbors</code> code does a lot of checking to make sure that all of the checked neighbors are in range.  That's much better than not checking and overrunning the bounds of the board, but there's a simpler way to accomplish the same effect.  You may have noticed that the initialization of <code>cells</code> above was this:</p>

<pre><code>cells((width + 2) * (height + 2))
</code></pre>

<p>The purpose for the additional two rows and two columns is to act as a frame around the real board.  This allows the <code>aliveNeighbors</code> code above to omit checking because the calling code assures that the iterator is always within the real board.  So <code>nextRound()</code> looks like this:</p>

<pre><code>void nextRound() {
    std::vector &lt;bool&gt; ret(cells.size());
    auto src = cells.begin() + 3 + width;
    auto dst = ret.begin() + 3 + width;
    for (auto y{height}; y; --y) {
        for (auto x{width}; x; --x) {
            int aliveNs = aliveNeighbors(src);
            *dst = (aliveNs == 3) || (aliveNs == 2 &amp;&amp; *src); 
            ++src;
            ++dst;
        }
        src += 2;
        dst += 2;
    }
    std::swap(cells, ret);
}
</code></pre>

<p>The last line uses <code>swap</code> as described in the next suggestion.</p>

<h2>Use <code>swap</code> to replace large data structures</h2>

<p>Unlike Java, C++ requires the programmer to manage memory.  While modern C++ makes this mostly fairly painless, there are some aspect to be aware of.  This is a slight variation on the <a href="https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom"><em>copy-and-swap</em> idiom</a>.  Here, the <code>ret</code> is created and then populated, and then swapped with the original <code>cells</code> array.  Because <code>ret</code> goes out of scope at the end of the function, the <em>destructor</em> will run.  By using <code>swap</code>, the destructor will operate on the previous version of <code>cell</code>, neatly releasing the memory.</p>

<h2>Fix the bug</h2>

<p>In the current version of <code>render</code> we have this code:</p>

<pre><code>cv::Mat ret = cv::Mat::zeros(width * UPSAMPLING, height * UPSAMPLING, CV_8UC3);
</code></pre>

<p>The problem is that the first two arguments to <code>zeros</code> are <em>rows</em> and <em>columns</em>, so these should be swapped for the code to work correctly for non-square boards.  The same reversal is required for the <code>ret.at&lt;&gt;</code> line.</p>

<h2>Thoughts on efficiency</h2>

<p>Since a delay is part of the program, making the program run faster isn't necessarily a goal, but here are some thoughts on efficiency if you wanted to explore this further.  First, I realized belatedly that I hadn't answered your question about the return value for <code>Board::render()</code>.  In my view, you have it exactly right in the code now.  Returning a reference would be an error because, as soon as the function ends and the <code>ret</code> variable goes out of scope, the destructor is called, rendering a reference invalid.  When you return <em>by value</em> as the current code has it, notionally, a copy is created.  (I say "notionally" because most compilers are, in fact, smart enough to implement <a href="https://en.cppreference.com/w/cpp/language/copy_elision" rel="nofollow noreferrer">Named Return Value Optimization (NRVO)</a> to avoid actually making a copy.)  Also, while you could allocate on the heap and return a pointer, freeing that memory now becomes another problem.  For all of these reasons, I'd say that the way you have it is just right.</p>

<p>However, one option for a possible efficiency gain would be for the <code>Board</code> object to contain two copies of the board and simply keep track of which is the current view within <code>nextRound()</code> and <code>render()</code>.  That way instead of reallocating a new one (and destroying one) on each call to <code>nextRound</code>, the program could simply use the same two vectors and simply swap them each loop iteration.</p>
    </div>