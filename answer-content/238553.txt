<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several things that make it is needlessly difficult to figure out what this code is supposed to do.  </p>

<ul>
<li>Using lots of global variables (<code>f</code>, <code>min_xy</code>, <code>min_vex</code>, etc.) for passing data in to and out of functions makes it difficult to see when a 
variable's value might be set or changed.  </li>
<li>Many variables with similar, non-descriptive names (<code>list1</code>, <code>list3</code>, 
<code>center2</code>, <code>center3</code>, etc.) make it more difficult to figure out what the variables purpose is.</li>
<li>No docstrings describing what a function does or how it is used.</li>
</ul>

<p>Presuming your system isn't too old, it's likely that the processor has multiple cores. So one way to speed things up would be to use the <code>multiprocessing</code> library. First, create a list of <code>(rgb_file, depth_file)</code> pairs.
Then use a process pool to process the list.</p>

<p>Something like:</p>

<pre><code>from multiprocessing import Pool

from collections import default dict
from pathlib import Path


def process_pair(rgb, depth):
    # code to process one image goes here
    ...


if __name__ == '__main__':

    base = Path('G:/SENDA/Proband_123/GAIT')
    skeleton_path = base / 'RG1_results/skeleton'
    image_path = base / 'RG1_Depth/selected'

    rgb_depth_pairs = defaultdict(list)

    for skeleton in skeleton_path.iterdir():
        rgb_depth_pairs[skeleton.stem].append(skeleton)

    included_extensions = ['bmp']
    images = [fn for ext in included_extensions for fn in image_path.glob(f'*.{ext}')]

    for image in images:
        rgb_depth_pairs[image.stem].append(image)

    rgb_depth_pairs = [item for item in rgb_depth_pairs.items() if len(item)==2]


    with Pool() as p:
        p.starmap_async(process_pairs, rgb_depth_pairs)
</code></pre>

<p>(Note: This code has not been tested or otherwise debugged)</p>
    </div>