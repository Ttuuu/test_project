<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As Joseph's answer illustrates a regular expression could be used to eliminate the <code>for</code> loop, though it would need to be <a href="https://codereview.stackexchange.com/a/153702/120114">escaped</a> and surrounded by word boundary meta characters<sup><a href="https://codereview.stackexchange.com/questions/200787/search-and-replace-freecodecamp-intermediate-algorithm-scripting#comment386849_200856">1</a></sup>.</p>

<p>The current code has a <code>for</code> loop which iterates from zero to one less than the length of the input string <code>str</code>. In the example code </p>

<blockquote>
<pre><code>console.log(myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped"));
</code></pre>
</blockquote>

<p>That string has 42 characters so the <code>for</code> loop iterates from zero to 41. The first <code>if</code> checks <code>before === newStr[a]</code>. In that example string, <code>newStr</code> is an array with nine elements so after <code>a</code> has a value of 10 or more it is comparing <code>before</code> with <code>undefined</code>, which will never evaluate to <code>true</code>.</p>

<p>The second conditional block, which starts with:</p>

<blockquote>
<pre><code>if (before[0] === before[0].toUpperCase()) {
</code></pre>
</blockquote>

<p>is evaluated on every iteration of the loop, so if <code>before</code> starts with an uppercase character, it that conditional will always evaluate to <code>true</code>. This leads to <code>str.replace()</code> being called <strong>on every iteration of the loop</strong> regardless of whether the previous block was executed. That whole block could be moved before the <code>for</code> loop and used to assign a value to the string used in the call to <code>str.replace()</code> later in the loop.</p>

<p>The code also uses <code>let</code> for <code>newStr</code> and <code>var</code> for <code>swap</code>. Both variables are never re-assigned so <code>const</code> can be used. This helps avoid accidental re-assignment if and when code is expanded.</p>

<p>The <code>for</code> loop could be replaced with a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code> Loop</a> which would simplify the syntax- especially eliminating the need to increment the counter variable <code>a</code> for dereferencing the string characters. </p>

<p>The name <code>newStr</code> would be better called <code>words</code> since it is an array of word. </p>

<p>Putting the advice above together gives code like this:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function myReplace(str, before, after) {
  const words = str.split(' ');
  let newSubstr = after;
  if (before[0] === before[0].toUpperCase()) {
    newSubstr = after[0].toUpperCase() + after.slice(1);
  }
  for (word of words) {
    if (word === before) {
      str = str.replace(before, newSubstr);
    }
  }
  return str;
}
console.time &amp;&amp; console.time('replace');
const replacedStr = myReplace("A quick brown fox Jumped over the lazy dog", "Jumped", "leaped");
console.timeEnd &amp;&amp; console.timeEnd('replace');
console.log('replaced string: ', replacedStr);</code></pre>
</div>
</div>


<p>Since the string gets split into an array, that array could be used to hold the sub-strings with replacements and then joined after the loop. This does seem slightly slower compared to the previous example. </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function myReplace(str, before, after) {
  const words = str.split(' ');
  let newSubstr = after;
  if (before[0] === before[0].toUpperCase()) {
    newSubstr = after[0].toUpperCase() + after.slice(1);
  }
  for ([index, word] of words.entries()) {
    if (word === before) {
      words.splice(index, 1, newSubstr)
    } 
  }
  return words.join(' ');
}
console.time &amp;&amp; console.time('replace');
const replacedStr = myReplace("A quick brown fox Jumped over the lazy dog", "Jumped", "leaped");
console.timeEnd &amp;&amp; console.timeEnd('replace');
console.log('replaced string: ', replacedStr);</code></pre>
</div>
</div>

    </div>