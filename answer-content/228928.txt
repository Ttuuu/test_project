<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ul>
<li>Your design uses a dedicated repository and service for each entity. This might look like a great idea at first, but you'll soon realise the drawbacks of this design. </li>
<li>Having a service as a glorified wrapper of a repository doesn't add much value to the service. </li>
<li>I would question whether a service should yield <code>IQueryable</code>. I find a service to be in charge of <strong>encapsulation</strong> of your domain. Return materialized collections instead. </li>
<li>Endpoints that require data lookup should directly call the repository, while endpoints that require business logic should pass the service.</li>
</ul>

<h3>Repository</h3>

<p>The repository is the lower layer of the two. I could imagine a repository for an entity makes sense. However, you might get some conflicting concerns. Let's say we have an entity <code>Offer</code> with a list of <code>OfferLines</code>. Which repository is responsible for what when we save an offer?</p>

<ul>
<li>OfferRepository saves offer, and offer lines are saved by OfferLineRepository?</li>
<li>OfferRepository saves offer together with all child entities?</li>
<li>Both repositories allow to save offer lines?</li>
</ul>

<h3>Service</h3>

<p>A service is higher level layer. Defining a service by entity might be too technical. Consider a service as a facade for a feature, or a set of related concepts. Having an <code>OfferService</code> and <code>OfferLineService</code> don't make sense to me.</p>

<h2>Aggregate Root</h2>

<p>A more meaningful design is to pick an aggregate root for a set of entities. These entities may include classes that represent tables, views, complex types and memory-only classes that all share a same concept. I would design both layers this way: <code>OfferRepository</code> and <code>OfferService</code>. <code>OfferLines</code> are part of the aggregate root <code>Offer</code>.</p>

<p>So is it worth using common services and repositories... I think it is, but focus on grouping by functionality, not by entity type.</p>
    </div>