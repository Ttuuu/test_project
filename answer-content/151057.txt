<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Providing a working example for the answer @vnp describes. Similar to the accepted answer, but avoids overflow.</p>

<p>1) Find the expected XOR value of all numbers in range.<br>
2) Find the actual XOR value of all numbers in the number array.<br>
3) XOR the expected and actual to get missing number.</p>

<p>As @vnp mentioned, the expected value is found in constant time using the "mod 4 trick". Because the min could be something other than 1, an extra steps are needed to get the expected value only over the range indicated.</p>

<pre><code>public static int FindMissingNumber(int[] numbers, int min, int max) {
    int expected1 = GetExpectedXor(min - 1);
    int expected2 = GetExpectedXor(max);
    int expected = expected2 ^ expected1;
    int actual = GetXor(numbers);

    int missingNumber = expected ^ actual;

    return missingNumber;
}

// Returns the expected value resulting from performing a bitwise XOR over all numbers from 1 to max (inclusive).
private static int GetExpectedXor(int max) {
    switch (max % 4) {
        case 0: return max;
        case 1: return 1;
        case 2: return max + 1;
        case 3: return 0;
        default: throw new Exception();
    }
}

private static int GetXor(int[] numbers) {
    int v = numbers[0];

    for (int i = 1; i &lt; numbers.Length; i++) {
        v = v ^ numbers[i];
    }

    return v;
}
</code></pre>
    </div>