<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Except all that @JAD said, which I totally agree with. I will give me five cents also after taking your comment in mind.</p>

<blockquote>
  <p>I want to cancel the other pings when one of the ping responses is successful. This should be the default behaviour - so I don't want to expose this implementation detail to the other clients.</p>
</blockquote>

<p>First and foremost, there is a much cleaner and concise way of canceling your <code>Parallel.ForEach</code>. Check <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallelloopstate.break?view=netframework-4.8#System_Threading_Tasks_ParallelLoopState_Break" rel="nofollow noreferrer">ParallelLoopState.Break</a> method, I believe it does exactly the same thing you want to achieve without polluting your class with any unnecessary to business logic stuff - like <code>CancellationTokenSource</code> or <code>ParallelOptions</code>.</p>

<p>Second, you probably forgot to put <code>Ping</code> class in <code>using</code> statement. <code>Ping</code> class inherits <code>IDisposable</code> type which means that it will be a good practice to put it in <code>using</code> statement. </p>

<p>Third, I don't mind having fancy stuff like <code>volatile</code> field, but if I want to use something that fancy I want my code to "scream out loud" - <em>"Hey, this makes sense here and it's probably the only way of achieving it."</em> However, this is not the case here. It is not obvious to me why this property is <code>static</code> in the first place (perhaps the example is not good enough) also I don't see why it is <code>volatile</code> as well.</p>

<blockquote>
  <p>Although the volatile keyword can help you in thread safety in certain situations, it is <strong>not</strong> a solution to all of your thread concurrency issues. You should know that marking a variable or an object as volatile <strong>does not</strong> mean you donâ€™t need to use the lock keyword. The volatile keyword is <strong>not</strong> a substitute for the lock keyword. It is only there to help you avoid data conflicts when you have multiple threads trying to access the same data.<sup><a href="https://www.infoworld.com/article/3229360/how-to-use-the-volatile-keyword-in-c.html" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<p>You are never accessing <code>_result</code> in your multithreaded code (unless I am wrong), you only try to assign it. With the same success, you can remove <code>volatile</code> keyword and the code will work as intended (again, unless I am missing something) because you are not changing the state. In other words, you don't care if <code>_result</code> is set to <code>true</code> one time, two times or three times and in what order simply because this is your business logic - you only need to know if at least one host is available.</p>

<p>With all the comments above the code looks like this</p>

<pre><code>using System;
using System.Net.NetworkInformation;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        private bool _result = false;
        private readonly string[] _hostsToPing = { "netflix.com", "google.com", "reddit.com" };

        private bool IsOneOfTheHostsAvailable()
        {
            Parallel.ForEach(_hostsToPing, (host, state) =&gt;
            {
                if (state.ShouldExitCurrentIteration) return; // &lt;-- personal preference
                // I just hate .NET world putting brackets and new lines for nothing

                using (var ping = new Ping())
                {
                    var reply = ping.Send(host);
                    if (reply?.Status == IPStatus.Success)
                    {
                        _result = true;
                        Console.WriteLine($"Pinged {host}");
                        state.Break();
                    }
                }

            });

            return _result; // you can even further remove _result by simply returning
            // IsCompleted property of ParallelLoopResult but many will argue this is more 
            // readable so it's up to you
        }


        private static void Main()
        {
            var program = new Program();
            var oneOfTheHostsIsAvailable = program.IsOneOfTheHostsAvailable();
            Console.WriteLine($"One of the hosts is available: {oneOfTheHostsIsAvailable}");
        }
    }
}
</code></pre>

<p>In the end, I will try to emphasize one thing - <em>Don't use features you don't fully understand.</em> This might not be the case for you but maybe the case for others, it is better that you do something in 50 lines of code but fully understands it than coding it in 5-6 lines with fancy stuff but then don't know why it works. Time will pass, you will gain more experience and you will eventually come to the place where you will do it in 5-6 lines, but don't try to force this process.</p>
    </div>