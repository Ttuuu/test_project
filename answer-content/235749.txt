<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>WARNINGS</strong></p>

<p>First of all, let's listen to the warning we get when we run this and get rid off it:</p>

<blockquote>
  <p>UserWarning: Using slow pure-python SequenceMatcher. Install
  <code>python-Levenshtein</code> to remove this warning   warnings.warn('Using slow
  pure-python SequenceMatcher. Install <code>python-Levenshtein</code> to remove this
  warning')</p>
</blockquote>

<p>You can fix that by installing the mentioned package:</p>

<pre class="lang-bsh prettyprint-override"><code>pip install python-Levenshtein
</code></pre>

<p>I'm not sure how much it'll improve the speed, but it's usually a good idea to listen to warnings and try to fix them.</p>

<hr>

<p><strong>Your code returns wrong data!</strong> </p>

<p>Shouldn't you only return "Marcie Lank" (or the other name that's matching her) in the output since she's the only one with a ratio over 85?</p>

<p>Having the above in mind, I'd do the following: </p>

<ul>
<li>use <code>itertools.combinations</code> which will pair each element with each other element in the iterable only once.</li>
<li>add only the authors with ratio &gt; 85 to the new dictionary and assign an uuid() to it</li>
<li>follow PEP8 style-guide</li>
</ul>

<pre class="lang-py prettyprint-override"><code>import itertools
import uuid

from fuzzywuzzy import fuzz


def process_authors(max_ratio=85):
    """Compare authors against each other and return the ones with
    a ratio greater than 85... etc

    :return: (dict) A dictionary containing ... etc
    """

    all_authors = {
        'Trevor Jacobs': None,
        'Josh Francis': None,
        'Marcie Lank': None,
        'Marcie H. Lank': None
    }
    result = {}

    for author_1, author_2 in itertools.combinations(all_authors, 2):
        author_1, author_2 = " ".join(author_1.split()), " ".join(author_2.split())
        ratio = fuzz.ratio(author_1, author_2)
        if ratio &gt; max_ratio and all_authors[author_1] not in result:
            result[author_1] = str(uuid.uuid1())

    return result


print(process_authors())
</code></pre>

<blockquote>
  <p><code>{'Marcie Lank': '0342fa08-38a7-11ea-905b-9801a797d077'}</code></p>
</blockquote>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> aspects:</p>

<ul>
<li>always use docstrings;</li>
<li>variable names should be <em>snake_case</em>d. The same goes for function names</li>
<li>In Python, the <code>==</code> operator compares the values of both the operands and checks for value equality. Whereas <code>is</code> operator checks whether both the operands refer to the same object or not. </li>
</ul>

<p>In my opinion, the use of a dict to store the initial authors is a bit overkill since you're not using any property of that. I'd just store all the authors in a list.</p>

<hr>

<p><strong>About timings</strong></p>

<p>Oh yes, with the new code, it takes ~1 second to process 700 items and ~14 seconds to process a 2700 items dict so there's also that ^_^. It probably can be further improved but I'll let that to you or other reviewers.</p>
    </div>