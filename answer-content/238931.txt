<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><a href="https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#styleguide" rel="nofollow noreferrer">Document your code. In the code.</a>  </li>
<li><p>Be sure you got the specification right.<br>
Very helpful here is giving <em>test</em> serious consideration early on.<br>
• testing <code>order in which each value was generated must be preserved</code><br>
 looks a nightmare</p>

<p>One way to present the approach coded:<br>
1) generate six sums<br>
2) if this sextuple is not admissible, start over<br>
<em>Alternatives</em>:<br>
2b) while sextuple is not admissible, delete oldest sum and append a new one<br>
  This still results in six sums generated in a row.<br>
2c) while sextuple is not admissible, delete smallest sum and append a new one<br>
  This still preserves <code>the order in which each value was generated</code><br>
  - but it skews the distribution.<br>
<strong>But:</strong> What if the <strong><em>real</em></strong> requirement was<br>
<em>Generate</em> six pseudo-random values with a distribution identical to the one from a procedure as sketched, <em>with <strong>utmost efficiency</strong></em><br>
(You'd have to define <em>efficiency</em>.)</p></li>
<li>Name things for what they can/will be used for. Difficult to guess for (<code>test</code>,) <code>genAttribute()</code>, <code>checkFinalArray()</code></li>
<li>Parametrise where it does not add effort<br>
What if you next wanted seven values each from five rolls of tetrahedral dice, three over a threshold of eleven and a total of at least 42?</li>
<li>sometimes it pays to take a step back and try to look at the requirements specification from a different angle:<br>
The sum of the three largest values out of four may seem to require identifying those three values.<br>
From a distance, it looks like the total minus the minimum.</li>
</ul>

<p>I started putting in writing what I think should do:</p>

<pre><code>   /** @param &lt;code&gt;nSums&lt;/code&gt; count of sums to return
    *  @param &lt;code&gt;nDraws&lt;/code&gt; count of summands for each sum
    *  @param &lt;code&gt;from&lt;/code&gt; lower bound for summands
    *  @param &lt;code&gt;to_inclusive&lt;/code&gt; upper bound for summands
    *  @param &lt;code&gt;threshold&lt;/code&gt; for "big enough"
    *  @param &lt;code&gt;requiredCount&lt;/code&gt; count of sums required to be
    *                                                   "big enough"
    *  @param &lt;code&gt;lowestTotal&lt;/code&gt; total to reach
    *
    *  @return &lt;code&gt;nSums&lt;/code&gt; of &lt;code&gt;nDraws&lt;/code&gt; values each
    *   but the smallest among those
    *   - &lt;em&gt;if&lt;/em&gt;&lt;br/&gt;
    *    - at least &lt;code&gt;requiredCount&lt;/code&gt; 
    *               sums reach &lt;code&gt;threshold&lt;/code&gt; &lt;em&gt;and&lt;/em&gt;&lt;br/&gt;
    *    - the total is &lt;code&gt;lowestTotal&lt;/code&gt;, at least */
    public static int[]
    sufficientTopSums(int nSums, int nDraws, int from, int to_inclusive,
        int threshold, int requiredCount, int lowestTotal) {
        // Start with a queue filled with very negative values
        // keep a total and a count of sufficiently high sums

        // check int range suffices
        assert((long)(nDraws - 1) * to_inclusive &lt; Integer.MAX_VALUE / nSums);
        final int veryNegative = Integer.MIN_VALUE/nDraws;
        Queue&lt;Integer&gt; q = new ArrayDeque&lt;&gt;(Collections.nCopies(
            nSums, veryNegative));
        for (int total = veryNegative * nSums, sufficient = 0 ; ; ) {
            int replaced = q.remove();
            // account for value removed
            total -= replaced;
            if (threshold &lt;= replaced)
                sufficient--;
            // generate &amp; keep new sum
            int sum = sumIgnoringMin(nDraws, from, to_inclusive);
            q.add(sum);
            // account for new value
            if (threshold &lt;= sum)
                sufficient++;
            if (lowestTotal &lt;= (total += sum)
                &amp;&amp; requiredCount &lt;= sufficient)
                return q.stream().mapToInt(x-&gt;x).toArray();
        }
    }
    public static void main(String[] args) {
        System.out.println(Arrays.toString(
            sufficientTopSums(6, 4, 1, 6, 15, 2, 75)));
    }

    static final java.util.Random dice = new java.util.Random();
    private static final int[] NO_INTS = {};

   /** @param &lt;code&gt;nDraws&lt;/code&gt; count of values to draw
    *  @param &lt;code&gt;from&lt;/code&gt; lower bound for values
    *  @param &lt;code&gt;to_inclusive&lt;/code&gt; upper bound for values
    *  @return sum of draws, excluding minimal value drawn */
    static int sumIgnoringMin(int nDraws, int from, int to_inclusive) {
        int to = to_inclusive - from + 1;
        int min = Integer.MAX_VALUE,
            sum = from * (nDraws);
        while (0 &lt;= --nDraws) {
            int drawn = dice.nextInt(to);
            if (drawn &lt; min)
                min = drawn;
            sum += drawn;
        }
        return sum - min - from;
    }
</code></pre>

<p>and stumbled upon not really knowing what representation to choose for the return value.<br>
Oh, well, <code>int[]</code> and <code>Collection&lt;Integer&gt;</code> can be converted easily enough.<br>
For lack of array rotation support, I went for a <code>Queue&lt;Integer&gt;</code>.</p>
    </div>