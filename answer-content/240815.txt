<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Spacing</h2>

<p>I don't find it necessary for these two statements to occupy four lines each:</p>

<pre><code>    privacy = (
        user
            .get('is_private')
    )

    followed_by_viewer = (
        user
            .get('followed_by_viewer')
    )
</code></pre>

<p>They're better off as</p>

<pre><code>privacy = user.get('is_private')
followed_by_viewer = user.get('followed_by_viewer')
</code></pre>

<h2>Else</h2>

<pre><code>    media = ['graphql', 'shortcode_media', *keys]
    if list(nodes.keys())[0] == 'node':
        media = ['node', *keys]
</code></pre>

<p>I think would be more appropriately represented as</p>

<pre><code>if list(nodes.keys())[0] == 'node':
    media = ['node', *keys]
else:
    media = ['graphql', 'shortcode_media', *keys]
</code></pre>

<h2>God-class</h2>

<p>You have a class, and it's pretty reasonably laid-out now, but it probably has too many responsibilities. Consider separating it out into:</p>

<ul>
<li>an <code>InstagramScraper</code>, containing your current

<ul>
<li><code>username</code></li>
<li><code>password</code></li>
<li><code>http_base</code></li>
<li><code>driver</code></li>
<li><code>check_availability</code></li>
<li><code>login</code></li>
</ul></li>
<li>an <code>InstagramData</code>, containing your current

<ul>
<li><code>videos</code></li>
<li><code>pictures</code></li>
<li><code>downloading_video_images</code></li>
</ul></li>
</ul>

<p>Your <code>InstagramScraper</code> should not hold onto videos, pictures or even an instance of <code>InstagramData</code> as members. You should rework your code so that an <code>InstagramData</code> is constructed and returned by one method of <code>InstagramScraper</code>, probably calling into your other helper methods to get the necessary data.</p>

<p>This will make unit testing easier.</p>

<h2>Unit Tests</h2>

<p>It's time. Since you are serious about this project, you need tests. This is not an easy thing so will require some research and experimentation. You will want to pick a unit-testing framework - maybe <a href="https://pypi.org/project/nose/" rel="nofollow noreferrer">nose</a>, or maybe bare <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest</a>, etc. Read some walkthroughs. You'll also need to rely on mocking, because you have lots of external dependencies - to <code>requests</code> and <code>selenium</code>. Once you have a few test methods in place, use a tool to measure your coverage while executing your tests. See how high you can get your coverage! You might even find some bugs during this process.</p>
    </div>