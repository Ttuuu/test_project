<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bugs</h1>
<p>There was one bug if no networks or pools existed, then calculation of <code>longest_net</code> and <code>longest_pool</code> respectively would fail, since <code>max()</code> would be called on an empty list.  The solution is to add a <code>default</code> kw-arg</p>
<pre class="lang-none prettyprint-override"><code>-    longest_net = max(len(net.name()) for net in nets)
-    longest_pool = max(len(pool.name()) for pool in pools)
+    longest_net = max((len(net.name()) for net in nets), default=0)
+    longest_pool = max((len(pool.name()) for pool in pools), default=0)
</code></pre>
<h1>Use libvirt API</h1>
<p>Based on @MichaelHampton's advice I moved the code to the libvirt API, basing off of the changes made in <a href="https://codereview.stackexchange.com/a/244398/85095">the answer by @Peilonrayz</a>.</p>
<p>The crucial difference is to make a connection to libvirt in <code>__main__</code> (otherwise we'd run into problems with interactive authentication on the console if curses already initialised):</p>
<pre class="lang-none prettyprint-override"><code> if __name__ == '__main__':
-    curses.wrapper(main)
+    conn = libvirt.open(None)
+    curses.wrapper(main, conn)
</code></pre>
<p>Then in <code>main(stdscr, conn)</code>:</p>
<pre class="lang-none prettyprint-override"><code>     while True:
-        vms = virsh('list', '--all')[2:][:-1]
-        nets = virsh('net-list', '--all')[2:][:-1]
-        pools = virsh('pool-list', '--all')[2:][:-1]
+        vms = conn.listAllDomains()
+        nets = conn.listAllNetworks()
+        pools = conn.listAllStoragePools()
</code></pre>
<p>Other than that it's just moving away from array-of-strings to method calls on libvirt objects, e.g.:</p>
<pre class="lang-none prettyprint-override"><code>-    longest_net = max(len(net[0]) for net in nets)
-    longest_pool = max(len(pool[0]) for pool in pools)
+    longest_net = max((len(net.name()) for net in nets))
+    longest_pool = max((len(pool.name()) for pool in pools))
</code></pre>
<p>I also needed to create a 'vms' array just like the 'pools' and 'nets' array for <code>print_table</code> now.  As this function however operates much on strings while the API returns integer constants, the least-effort approach taken by me was to convert all integers to strings via dictionaries and not touch <code>print_table</code> itself.  Particularly <code>virDomain.state()</code> returns <code>[state, reason]</code> with both being integers;  in order to pretty-print this I created a dictionary which then can be used like this:</p>
<pre class="lang-python prettyprint-override"><code>state_string = {
    libvirt.VIR_DOMAIN_NOSTATE: 'nostate',
    libvirt.VIR_DOMAIN_RUNNING: 'running',
    libvirt.VIR_DOMAIN_BLOCKED: 'blocked',
    libvirt.VIR_DOMAIN_PAUSED: 'paused',
    libvirt.VIR_DOMAIN_SHUTDOWN: 'shutdown',
    libvirt.VIR_DOMAIN_SHUTOFF: 'shutoff',
    libvirt.VIR_DOMAIN_CRASHED: 'crashed',
    libvirt.VIR_DOMAIN_PMSUSPENDED: 'pmsuspended',
}
print(state_string[vm.state()[0]])
</code></pre>
<p>Similarly, the start/stop is handled via objects which reads much better:</p>
<pre class="lang-none prettyprint-override"><code>-            commands = stop_commands if c == curses.KEY_F2 else start_commands
-            virsh(commands[sel], args[sel][sel_i][arg_indexes[sel]])
+            if c == curses.KEY_F2:
+                args[sel][sel_i].destroy()
+            else:
+                args[sel][sel_i].create()
</code></pre>
<h1>Add other hypervisors</h1>
<p>As we are now using the libvirt API, it's quite easy to add support for accessing other hypervisors via URI. I used <code>getopt</code> to parse a <code>-c URI</code> CLI argument:</p>
<pre class="lang-none prettyprint-override"><code> if __name__ == '__main__':
-    conn = libvirt.open(None)
+    import sys
+    import getopt
+    try:
+        opts, args = getopt.getopt(sys.argv[1:], 'c:')
+    except getopt.GetoptError as err:
+        print(err)
+        sys.exit(1)
+
+    uri = None
+    for o, a in opts:
+        if o == '-c':
+            uri = a
+
+    try:
+        conn = libvirt.open(uri)
+    except libvirt.libvirtError:
+        print('Failed to open connection to the hypervisor')
+        sys.exit(1)
+
     curses.wrapper(main, conn)
</code></pre>
<p>This allows to monitor remote hypervisor instances or the system one, e.g.:</p>
<pre class="lang-none prettyprint-override"><code>$ ./virtop.py -c 'qemu+ssh://username@ip.of.vm.host/system' 
</code></pre>
<h1>Final code</h1>
<pre><code>#! /usr/bin/env python3

import libvirt
import curses

state_string = {
    libvirt.VIR_DOMAIN_NOSTATE: 'nostate',
    libvirt.VIR_DOMAIN_RUNNING: 'running',
    libvirt.VIR_DOMAIN_BLOCKED: 'blocked',
    libvirt.VIR_DOMAIN_PAUSED: 'paused',
    libvirt.VIR_DOMAIN_SHUTDOWN: 'shutdown',
    libvirt.VIR_DOMAIN_SHUTOFF: 'shutoff',
    libvirt.VIR_DOMAIN_CRASHED: 'crashed',
    libvirt.VIR_DOMAIN_PMSUSPENDED: 'pmsuspended',
}

active_string = {
    0: 'inactive',
    1: 'active',
}


def print_table(stdscr, head_color, sel_color, sel_i, x, y, cols, gray_sel, items):
    total_len = sum(col[1] + 1 for col in cols)
    stdscr.insstr(y, x, ' ' * total_len, head_color)
    if sel_i &gt; -1:
        stdscr.addstr(y + sel_i + 1, x, ' ' * total_len, sel_color)

    for c, (name, minsize, gray) in enumerate(cols):
        stdscr.addstr(y, x, name, head_color)
        for i, item in enumerate(items, 1):
            color = curses.color_pair(
                (sel_i == (i - 1))
                + (3 if gray and gray_sel(item) else 0)
            )
            stdscr.addstr(y + i, x, item[c], color)
        x += minsize + 1


def print_help(stdscr, help_color, helps):
    height, width = stdscr.getmaxyx()
    stdscr.insstr(height - 1, 0, ' ' * width, help_color)
    max_len = max(len(h[1]) for h in helps) + 1
    offset = 0
    for key, name in helps:
        stdscr.insstr(height - 1, offset, key)
        stdscr.insstr(height - 1, offset + len(key), name, help_color)
        offset += len(key) + max_len


def set_x_if_true(x):
    return 'X' if x else ' '


def render(stdscr, vms, nets, pools, sel, sel_i):
    pool_diff = 2
    longest_net = max((len(net.name()) for net in nets), default=0)
    longest_pool = max((len(pool.name()) for pool in pools), default=0)
    longest_net = max(longest_net, longest_pool - pool_diff)
    height, width = stdscr.getmaxyx()
    net_offset = width - longest_net - 9 - pool_diff - 3
    vm_width = net_offset - 3 - 9 - 1 - 2

    vm_table = [("ID", 3, False), ("VM", vm_width - 1, True), ("STATUS", 9, False)]
    net_table = [("NET", longest_net, True), ("STATUS", 8, False), ("A", 1, False), ("P", 1, False)]
    pool_table = [("POOL", longest_net + pool_diff, True), ("STATUS", 8, False), ("A", 1, False)]
    vms = [
        ['-' if vm.ID() == -1 else str(vm.ID()), vm.name(), state_string[vm.state()[0]]]
        for vm in vms
    ]
    nets = [
        [net.name(), active_string[net.isActive()], set_x_if_true(net.autostart()), set_x_if_true(net.isPersistent())]
        for net in nets
    ]
    pools = [
        [pool.name(), active_string[pool.isActive()], set_x_if_true(pool.autostart())]
        for pool in pools
    ]

    tables = [
        (0, 0, 0, vm_table, lambda vm: vm[2] != state_string[libvirt.VIR_DOMAIN_RUNNING], vms),
        (1, net_offset, 0, net_table, lambda net: net[1] != active_string[1], nets),
        (2, net_offset, len(nets) + 2, pool_table, lambda pool: pool[1] != active_string[1], pools)
    ]

    head_color = curses.color_pair(2)
    sel_color = curses.color_pair(1)
    for (sel_c, x, y, table, sel_test, items) in tables:
        print_table(stdscr, head_color, sel_color, sel_i if sel == sel_c else -1, x, y, table, sel_test, items)

    print_help(
        stdscr,
        curses.color_pair(1),
        [("TAB", "Next"), ("F1", "Start"), ("F2", "Stop"), ("F10", "Quit")]
    )


def main(stdscr, conn):
    curses.curs_set(0)
    curses.halfdelay(20)
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, 0, 6)
    curses.init_pair(2, 0, 2)
    curses.init_pair(3, 8, -1)
    curses.init_pair(4, 8, 6)
    sel = 0
    sel_i = 0

    while True:
        vms = conn.listAllDomains()
        nets = conn.listAllNetworks()
        pools = conn.listAllStoragePools()

        args = [vms, nets, pools]
        arg_indexes = [1, 0, 0]

        stdscr.clear()
        render(stdscr, vms, nets, pools, sel, sel_i)
        stdscr.refresh()
        c = stdscr.getch()

        if c == curses.KEY_F10:
            exit()
        elif c == ord('\t'):
            sel = 0 if sel == 2 else sel + 1
        elif c == curses.KEY_DOWN or c == curses.KEY_UP:
            sel_i += -1 if c == curses.KEY_UP else 1
        elif (c == curses.KEY_F1 or c == curses.KEY_F2) and sel_i &lt; len(args[sel]):
            if c == curses.KEY_F2:
                args[sel][sel_i].destroy()
            else:
                args[sel][sel_i].create()

        if sel_i == -1:
            sel_i += 1
        if sel_i &gt;= len(args[sel]):
            sel_i = len(args[sel]) - 1


if __name__ == '__main__':
    import sys
    import getopt
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'c:')
    except getopt.GetoptError as err:
        print(err)
        sys.exit(1)

    uri = None
    for o, a in opts:
        if o == '-c':
            uri = a

    try:
        conn = libvirt.open(uri)
    except libvirt.libvirtError:
        print('Failed to open connection to the hypervisor')
        sys.exit(1)

    curses.wrapper(main, conn)
</code></pre>
<h1>Remarks</h1>
<p>This code is now with almost no error handling and since the libvirt functions may throw exceptions quite often (e.g. when starting if it's already started), this needs to be addressed.  Also a <code>usage()</code> function documenting the <code>-c</code> option would be nice, I was too lazy for that. :-)</p>
<p>I'm personally not so proficient with python and more a C person, so the code might not be the most pythonic.</p>
<p>Also I can only recommend you looking into virt-manager which is basically what you did here.  While it's a GUI solution it allows connecting to remote instances, so your server does not need to run X or Wayland, although a virt-manager-tui would be cool as well.</p>
    </div>