<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>A function</h3>

<blockquote>
<pre><code>    bool flag = false;
    int alphabet_len = 52;

    for(int i = 0; i &lt; alphabet_len; i++)
    {
        password[0] = alphabet[i];
        password[1] = password[2] = password[3] = password[4] = '\0';
        if(!strcmp(hash, crypt(password, salt)))
        {
            flag = true;
            break;
        }
        for(int j = 0; j &lt; alphabet_len; j++)
        {
            password[1] = alphabet[j];
            password[2] = password[3] = password[4] = '\0';
            if(!strcmp(hash, crypt(password, salt)))
            {
                flag = true;
                break;
            }
            for(int k = 0; k &lt; alphabet_len; k++)
            {
                password[2] = alphabet[k];
                password[3] = password[4] = '\0';
                if(!strcmp(hash, crypt(password, salt)))
                {
                    flag = true;
                    break;
                }
                for(int l = 0; l &lt; alphabet_len; l++)
                {
                    password[3] = alphabet[l];
                    password[4] = '\0';
                    if(!strcmp(hash, crypt(password, salt)))
                    {
                        flag = true;
                        break;
                    }
                    for(int m = 0; m &lt; alphabet_len; m++)
                    {
                        password[4] = alphabet[m];
                        if(!strcmp(hash, crypt(password, salt)))
                        {
                            flag = true;
                            break;
                        }
                    }
                    if(flag)
                        break;
                }
                if(flag)
                    break;
            }
            if(flag)
                break;
        }
        if(flag)
            break;
    }

    if(flag)
</code></pre>
</blockquote>

<p>If you define a function, you could get rid of <code>flag</code>.  E.g. </p>

<pre><code>bool find_password(string alphabet, int alphabet_len, char salt[]) {
    for(int i = 0; i &lt; alphabet_len; i++)
    {
        password[0] = alphabet[i];
        password[1] = password[2] = password[3] = password[4] = '\0';

        if (!strcmp(hash, crypt(password, salt)))
        {
            return true;
        }

        for (int j = 0; j &lt; alphabet_len; j++)
        {
            password[1] = alphabet[j];
            password[2] = password[3] = password[4] = '\0';

            if (!strcmp(hash, crypt(password, salt)))
            {
                return true;
            }

            for (int k = 0; k &lt; alphabet_len; k++)
            {
                password[2] = alphabet[k];
                password[3] = password[4] = '\0';

                if (!strcmp(hash, crypt(password, salt)))
                {
                    return true;
                }

                for (int l = 0; l &lt; alphabet_len; l++)
                {
                    password[3] = alphabet[l];
                    password[4] = '\0';

                    if (!strcmp(hash, crypt(password, salt)))
                    {
                        return true;
                    }

                    for (int m = 0; m &lt; alphabet_len; m++)
                    {
                        password[4] = alphabet[m];

                        if (!strcmp(hash, crypt(password, salt)))
                        {
                            return true;
                        }
                    }
                }
            }
        }
    }

    return false;
}
</code></pre>

<p>Which you'd use like </p>

<pre><code>    if (find_password(alphabet, strlen(alphabet), make_salt(argv[1]), password))
</code></pre>

<h3>Recursive</h3>

<p>Now, if you automate the increasing length, you could have </p>

<pre><code>bool find_password(string alphabet, int alphabet_len, string salt, char password[])
{
    return find_password(alphabet, alphabet_len, salt, password, 0, 5);
}

bool find_password_recursive(string alphabet, int len, string salt, char password[], int i, int n) {
    if (i &gt;= n)
    {
        return false;
    }

    for (int j = 0; j &lt; len; j++)
    {
        password[i] = alphabet[j];

        if (!strcmp(hash, crypt(password, salt))
         || find_password(alphabet, len, salt, password, i + 1, n)
           )
        {
            return true;
        }
    }

    password[i] = '\0';

    return false;
}
</code></pre>

<p>Short variable names used to avoid scrolling.  </p>

<p>We can clear <code>password[i]</code> exactly once here.  In the loop, we keep changing it.  We only have to clear once after finishing the loop.  We don't have to clear later characters, as we already cleared those.  </p>

<h3>Static globals</h3>

<p>C allows file scoped variables through the use of the static keyword.  E.g. </p>

<pre><code>static string alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
</code></pre>

<p>These would be defined outside of any function and be accessible to functions in the same file.  </p>

<p>Now we don't have to keep passing <code>alphabet</code> and <code>alphabet_len</code> around everywhere.  </p>

<h3>A useful return</h3>

<p>But do we really want our function to return a Boolean value and modify one of the inputs?  A general rule is to only do one of those things.  So we'd really prefer to use the function like </p>

<pre><code>    char *password = find_password(make_salt(argv[1]), 5);
    if (password)
    {
        printf("Password: %s\n", password);

        free(password);
    }
    else
    {
        printf("Password not found\n");
    }
</code></pre>

<p>And with the proper helper function, we can.  </p>

<pre><code>char *find_password(char *salt, int maximum_length)
{
    char *password = calloc(maximum_length + 1, sizeof password[0]);
    if (!password)
    {
        /* Panic:  perhaps output or log an error message, but certainly */
        exit(-1);
    }

    char *result = find_password_recursive(salt, password, 0, maximum_length);
    if (!result)
    {
        free(password);
    }

    return result;
}
</code></pre>

<p>And </p>

<pre><code>char * find_password_recursive(char * salt, char *password, int index, int maximum_length) {
    if (index &gt;= maximum_length)
    {
        return NULL;
    }

    for (int i = 0; alphabet[i]; i++)
    {
        password[index] = alphabet[i];

        if (!strcmp(hash, crypt(password, salt))
         || find_password(salt, password, index + 1, maximum_length)
           )
        {
            return password;
        }
    }

    password[index] = '\0';

    return NULL;
}
</code></pre>

<p>A downside of this approach is that the allocation for the password is implicit but the <code>free</code> needs to be explicit.  An alternative would be to allocate the password explicitly and pass it into the function.  Then both would be explicit.  C doesn't have good support for making both implicit while allowing the results to be used by the caller.  </p>

<p>Both <code>calloc</code> and <code>free</code> are from <code>stdlib.h</code>, as is <code>NULL</code>.  </p>

<p>This time, I used the native C names rather than the <code>cs50.h</code> names.  Remember to include <code>bool.h</code> if you drop <code>cs50.h</code> and continue using true and false.  </p>

<p>Now if we want to lengthen (or shorten) the potential passwords, we just have to call <code>find_password</code> with a larger <code>maximum_length</code>.  </p>
    </div>