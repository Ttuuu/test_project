<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Includes</h1>
<p>We have included <code>&lt;iostream&gt;</code> twice, but missed <code>&lt;cstdio&gt;</code>.</p>
<h1>Misspelt standard library identifiers</h1>
<p><code>std::printf</code>, <code>std::uint8_t</code> and <code>std::uint64_t</code> are consistently misspelt.  You might sometimes get away with this, as your standard library is allowed to add global-namespace versions of those identifiers; since it's not <em>required</em> to do so, you have a portability bug.</p>
<h1>Use appropriate size type</h1>
<p><code>std::size_t</code> is the appropriate type to use for the size of an object, rather than <code>std::uint64_t</code> (which could be unnecessarily big, or - theoretically, at least for now - too small).</p>
<h1>Conversion function shouldn't have side-effects</h1>
<p>The <code>printf()</code> calls within <code>convertLittleToBig</code> make it unusable in any serious program.</p>
<h1>Consider a standard algorithm</h1>
<p>The <code>&lt;algorithm&gt;</code> header provides a very useful <code>std::copy()</code> function we can use if we have a reverse iterator to copy from or to.  We can get suitable iterators from <code>std::span</code> views onto the inputs (from C++20 onwards).</p>
<h1>Avoid raw pointers</h1>
<p>We could do better, using a template to accept values and return by value, inferring the size from the argument type:</p>
<pre><code>#include &lt;algorithm&gt;
#include &lt;span&gt;

template&lt;typename T&gt;
T convertLittleToBig(const T&amp; val)
{
    auto in = std::as_bytes(std::span(&amp;val, 1));
    T result;
    auto out = std::as_writable_bytes(std::span(&amp;result, 1));
    std::copy(in.rbegin(), in.rend(), out.begin());
    return result;
}
</code></pre>
<p>That's much simpler - no counting needed, and the caller doesn't need to use <code>sizeof</code> (to work with odd-sized values, they need to be passed as arrays).</p>
<p>This is how we'd use it in a simple test program:</p>
<pre><code>#include &lt;cstddef&gt;
#include &lt;cstdlib&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
    
std::string to_hex(auto const&amp; val)
{
    std::ostringstream oss;
    oss &lt;&lt; std::hex &lt;&lt; std::setfill('0');
    auto in = std::as_bytes(std::span(&amp;val, 1));
    for (auto c: in) {
        oss &lt;&lt; std::setw(2) &lt;&lt; std::to_integer&lt;unsigned int&gt;(c);
    }
    return oss.str();
}

// hex-print the value and its reversal
void demo_endian_swap(auto const&amp; val)
{
    std::cout &lt;&lt; to_hex(val) &lt;&lt; " -&gt; "
              &lt;&lt; to_hex(convertLittleToBig(val)) &lt;&lt; '\n';
}

#include &lt;array&gt;
int main() {
    // Demonstrate a selection of types
    demo_endian_swap(std::uint16_t{0x1234});
    demo_endian_swap(std::uint64_t{0x123456789abcde});
    demo_endian_swap(std::array&lt;unsigned char,5&gt;{1,2,3,4,5});
    //demo_endian_swap("abc");    // Invalid - can't return an array
    //demo_endian_swap(std::string{"abc"}); // oops - reverses whole structure
}
</code></pre>
<p>Example output:</p>
<pre class="lang-none prettyprint-override"><code>3412 -&gt; 1234
debc9a7856341200 -&gt; 00123456789abcde
0102030405 -&gt; 0504030201
</code></pre>
    </div>