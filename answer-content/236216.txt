<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Coding style</h3>

<p>There is a well-established coding style for Python, the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8 coding style</a>, and conformance to that style can be checked online at <a href="http://pep8online.com" rel="nofollow noreferrer">PEP8 online</a>.</p>

<p>In your case it reports “missing space around operator” in almost every
code line. Fixing those issues increases the legibility of your code.</p>

<h3>Program structure</h3>

<p>It is better to separate the I/O from the actual computation. With a <em>function</em> to compute the number of common divisors you make your code more readable and reusable. In addition you can <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><em>document</em></a> each function and add <a href="https://docs.python.org/3.7/library/doctest.html" rel="nofollow noreferrer"><em>test cases</em></a> easily.</p>

<p>A <a href="https://docs.python.org/3.7/library/__main__.html" rel="nofollow noreferrer"><em>check for main</em></a> allows to run the script directly, or import it as a module.</p>

<p>So the overall program structure should be</p>

<pre><code>def num_common_factors(a, b):
    """ Return the number of common factors of a and b. """
    # ... TODO ...


if __name__ == "__main__":
    a, b = map(int, input().split())
    print(num_common_factors(a, b))
</code></pre>

<p>Note also that reading the input line and the mapping to integers can be combined into a single statement.</p>

<h3>Simplify (and fix) your code</h3>

<p>Your solution is the “brute-force” approach: Test every possible number (in a suitable range) if it is a divisor of both numbers. That can be improved considerably (see below), but let's first discuss how your solution can simplified. First, the limit can be computed using the built-in <code>min()</code> function:</p>

<pre><code>lim = min(a, b)
</code></pre>

<p>Then note that a <code>range()</code> <em>excludes</em> the upper bound, so you probably want</p>

<pre><code>for num in range(1, lim + 1):
</code></pre>

<p>I would also avoid abbreviations, i.e. <code>limit</code> instead of <code>lim</code>. Finally the code can be written more concisely by summing a <em>generator expression:</em></p>

<pre><code>def num_common_factors(a, b):
    """ Return the number of common factors of a and b. """
    limit = min(a, b)
    return sum(1 for i in range(1, limit + 1) if a % i == 0 and b % i == 0)
</code></pre>

<h3>Mathematics helps!</h3>

<p>The problem can be solved more efficiently using some maths. Every common divisor of <code>a</code> and <code>b</code> is a divisor of the <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor" rel="nofollow noreferrer">“greatest common divisor”</a> of <code>a</code> and <code>b</code>, and vice versa. So the task can be split into two separate problems:</p>

<ul>
<li>Determine the greatest common divisor <span class="math-container">\$ g = \gcd(a, b) \$</span>. This can be done efficiently using the <a href="https://en.wikipedia.org/wiki/Euclidean_algorithm" rel="nofollow noreferrer">Euclidian algorithm</a>, but even better, Python has a built-in function <a href="https://docs.python.org/3.7/library/math.html#math.gcd" rel="nofollow noreferrer">math.gcd</a> for that.</li>
<li>Count the number of divisors of <span class="math-container">\$ g \$</span>.</li>
</ul>

<p>So our function would be</p>

<pre><code>from math import gcd


def num_common_factors(a, b):
    """ Return the number of common factors of a and b.

    Example 1: 10 and 25 have the 2 common factors 1, 5.
    &gt;&gt;&gt; num_common_factors(10, 25)
    2

    Example 2: 720 and 24 have the 8 common factors 1, 2, 3, 4, 6, 8, 12, 24.
    &gt;&gt;&gt; num_common_factors(720, 24)
    8
    """
    g = gcd(a, b)
    return num_divisors(g)
</code></pre>

<p>where I also have added two test cases as examples.</p>

<p>Now we are left with the second task: counting the number of divisors. A simple implementation would be</p>

<pre><code>def num_divisors(n):
    """Return the number of divisors of n."""

    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count
</code></pre>

<p>which again can be done by summing a generator expression:</p>

<pre><code>def num_divisors(n):
    """Return the number of divisors of n."""

    return sum(1 for i in range(1, n+1) if n % i == 0)
</code></pre>

<p>But this can be done far more efficiently using the prime number factorization: If
<span class="math-container">$$
 n = p_1^{e_1} \, p_2^{e_2} \cdots p_k^{e_k}
$$</span>
is the factorization of <span class="math-container">\$ n \$</span> into prime numbers <span class="math-container">\$ p_i \$</span>
with exponents <span class="math-container">\$ e_i \$</span>, then 
<span class="math-container">$$
 \sigma_0(n) = (e_1+1)(e_2+1) \cdots (e_k+1)
$$</span>
is the number of divisors of <span class="math-container">\$ n \$</span>, see for example
<a href="https://en.wikipedia.org/wiki/Divisor_function" rel="nofollow noreferrer">Wikipedia: Divisor function</a>. Example:
<span class="math-container">$$
 720 = 2^4 \cdot 3^2 \cdot 5^1 \Longrightarrow
  \sigma_0(720) = (4+1)(2+1)(1+1) = 30 \, .
$$</span></p>

<p>Here is a possible implementation (translated from the JavaScript <a href="https://codereview.stackexchange.com/a/120646/35991">here</a> to Python):</p>

<pre><code>def num_divisors(n):
    """Return the number of divisors of n."""

    count = 1   # Number of divisors
    factor = 2  # Candidate for prime factor of n

    # If n is not a prime number then it must have one factor
    # which is &lt;= sqrt(n), so we try these first:
    while factor * factor &lt;= n:
        if n % factor == 0:
            # factor is a prime factor of n, determine the exponent:
            exponent = 1
            n /= factor
            while n % factor == 0:
                exponent += 1
                n /= factor

            # factor^exponent is one term in the prime factorization of n,
            # this contributes as factor exponent + 1:
            count *= exponent + 1

        # Next possible prime factor:
        factor = 3 if factor == 2 else factor + 2

    # Now n is either 1 or a prime number. In the latter case,
    # it contributes a factor 2:
    if n &gt; 1:
        count *= 2

    return count
</code></pre>

<h3>Testing</h3>

<p>As already mentioned above, test cases can be added to each function, and verified with the <a href="https://docs.python.org/3.7/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code></a> module. Running the tests after each modification of the code helps to find programming errors.</p>

<p>We already added two test cases to the <code>num_common_factors()</code> function. Now we'll do this for the <code>num_divisors()</code> divisors function, which is essential to the program, and where a programming error can easily lead to wrong results.</p>

<p>One option is to compute a bunch of values using an alternative program and use the results as test cases. I chose <a href="https://pari.math.u-bordeaux.fr/gp.html" rel="nofollow noreferrer">PARI/GP</a> to compute the number of divisors of <span class="math-container">\$ 1, \ldots, 20 \$</span>, <span class="math-container">\$ 100, \ldots, 119\$</span>, and <span class="math-container">\$ 10000, \ldots, 10019 \$</span>:</p>

<pre><code>? vector(20, n, numdiv(n))
%1 = [1, 2, 2, 3, 2, 4, 2, 4, 3, 4, 2, 6, 2, 4, 4, 5, 2, 6, 2, 6]
? vector(20, n, numdiv(99+n))
%2 = [9, 2, 8, 2, 8, 8, 4, 2, 12, 2, 8, 4, 10, 2, 8, 4, 6, 6, 4, 4]
? vector(20, n, numdiv(9999+n))
%3 = [25, 4, 8, 4, 12, 16, 4, 2, 24, 2, 32, 8, 6, 8, 8, 4, 12, 16, 4, 4]
</code></pre>

<p>and added these as test cases to the <code>num_divisors()</code> function:</p>

<pre><code>def num_divisors(n):
    """Return the number of divisors of n.

    &gt;&gt;&gt; [num_divisors(n) for n in range(1, 21)]
    [1, 2, 2, 3, 2, 4, 2, 4, 3, 4, 2, 6, 2, 4, 4, 5, 2, 6, 2, 6]

    &gt;&gt;&gt; [num_divisors(n) for n in range(100, 120)]
    [9, 2, 8, 2, 8, 8, 4, 2, 12, 2, 8, 4, 10, 2, 8, 4, 6, 6, 4, 4]

    &gt;&gt;&gt; [num_divisors(n) for n in range(10000, 10020)]
    [25, 4, 8, 4, 12, 16, 4, 2, 24, 2, 32, 8, 6, 8, 8, 4, 12, 16, 4, 4]
    """
    ... remaining function omitted ...
</code></pre>

<p>Testing is done by running </p>

<pre><code>python -m doctest -v countcommonfactors.py 
</code></pre>

<p>on the command line (assuming that “countcommonfactors.py” is the name of your Python script).</p>
    </div>