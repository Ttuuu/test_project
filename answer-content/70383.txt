<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code flow</strong>  </p>

<p>The code flow is really confusing. You are checking for <code>isArrayproperty</code> then proceed without the need of <code>isArrayproperty</code> then again checking <code>isArrayproperty</code>.  </p>

<p>This is a strong indicator that <strong>this method is doing to much</strong>. It should be at least splitted into 2 methods. One method for processing an <code>ArrayProperty</code> and one for a default property.  </p>

<p>By using guard conditions like <strong>@BCdotNET</strong> suggested you can reduce horizontal spacing.  </p>

<p>So instead of </p>

<blockquote>
<pre><code>if (itemproperties != null)
{
    if (propName.Contains("."))
    {  
</code></pre>
</blockquote>

<p>you can use  </p>

<pre><code>if (itemproperties == null) { return null; }
if (!propertyName.Contains("."))
{
    return (record != null) ? itemaccessor[propertyName].GetValue(record) : null;
}
</code></pre>

<p>This  </p>

<blockquote>
<pre><code>IList arrayList = ((IEnumerable)record) as IList;

foreach (var item in arrayList)
{
    var propertyInfo = item.GetType().GetProperty(propertyName);

    if (propertyInfo == null)
        return null;
    if (arrayList.IndexOf(item) == index)
    {
        return propertyInfo.GetValue(item, null);
    }
}  
</code></pre>
</blockquote>

<p>could be simplified to  </p>

<pre><code>IList arrayList = ((IEnumerable)record) as IList;
if (arrayList.Count &lt;= index) { return null; }

var item = arrayList[index];
var propertyInfo = item.GetType().GetProperty(propertyName);

return propertyInfo.GetValue(item, null);
</code></pre>

<p><strong>Codeduplication</strong>  </p>

<p>You are awful often calling <code>actualproperty.IndexOf('[')</code>, exactly 4 times. Do you think the value could magically change ?  </p>

<p>Declare a variable which holds the value.  </p>

<p><strong>General</strong>  </p>

<p>Declaring multiple variables on the same line removes readability of the code. Especially if the first variable is initialized by calling a method.  </p>

<blockquote>
<pre><code>int complexPropertyCount = propertyNameList.Count(), index = 0;  
</code></pre>
</blockquote>

<p>This should be better written like  </p>

<pre><code>int complexPropertyCount = propertyNameList.Count();
int index = 0;
</code></pre>

<p>Why do you use the extension method <code>Count()</code> instead of the <code>Length</code> property ?  </p>

<p><strong>Style</strong></p>

<p>You should always be consistent with your code style. Sometimes you are using braces <code>{}</code> for single <code>if</code> statements, sometimes not. In my opinion you should use them always, but that is a matter of taste.  </p>

<p><strong>Naming</strong>  </p>

<p>Based on the <a href="http://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow">naming guidlines</a> variable names should be named using <code>camelCase</code> casing. So e.g <code>propertyinfo</code> should be <code>propertyInfo</code>.  </p>

<p><strong>Refactoring</strong>  </p>

<p>Taken the above into account your former code should be reduced to  </p>

<pre><code>if (itemproperties == null) { return null; }
if (!propertyName.Contains("."))
{
    return (record != null) ? itemaccessor[propertyName].GetValue(record) : null;
}

bool isArrayProperty = propertyName.IndexOf('[') != -1;

if (isArrayProperty)
{
    return GetArrayValue(view, propertyName, record);
}
else
{
    return GetDefaultValue(view, propertyName, record);
}
</code></pre>

<p>where <code>GetArrayValue()</code> is simplified to  </p>

<pre><code>private object GetArrayValue(object view, String propertyName, object record)
{
    PropertyDescriptorCollection itemProperties = view.GetItemProperties();

    int index = GetIndexValue(propertyName);
    string[] propertyNameList = GetArrayPropertyNames(propertyName);

    Tuple&lt;object, PropertyDescriptorCollection&gt; tuple = DoSomething(record, propertyNameList, itemProperties);
    record = tuple.Item1;
    itemProperties = tuple.Item2;

    propertyName = propertyNameList[propertyNameList.Length - 1];

    IList arrayList = ((IEnumerable)record) as IList;

    if (arrayList.Count &lt;= index) { return null; }

    object item = arrayList[index];
    var propertyInfo = item.GetType().GetProperty(propertyName);

     return propertyInfo.GetValue(item, null);
}   
</code></pre>

<p>by extracting  </p>

<pre><code>private int GetIndexValue(String propertyName)
{
    int openBracketIndex = propertyName.IndexOf('[');
    int closeBracketIndex = propertyName.IndexOf(']');

    string strindex = propertyName.Substring(openBracketIndex + 1, closeBracketIndex - openBracketIndex - 1);
    return Convert.ToInt32(strindex);
}
private String[] GetArrayPropertyNames(String propertyName)
{
    string[] propertyNameList = propertyName.Split('.');

    int openBracketIndex = propertyName.IndexOf('[');
    string property = propertyName.Substring(0, openBracketIndex);

    for (int i = 0; i &lt; propertyNameList.Length; i++)
    {
        openBracketIndex = propertyNameList[i].IndexOf('[');
        if (openBracketIndex &gt; -1)
        {
            if (property.Contains("."))
            {
                property = propertyNameList[i].Substring(0, openBracketIndex);
            }
            propertyNameList[i] = property;
            break;
        }
    }

    return propertyNameList;
}  
</code></pre>

<p>and the <code>DoSomething()</code> method (please change it to a meaningful name yourself)  </p>

<pre><code>private Tuple&lt;object, PropertyDescriptorCollection&gt; DoSomething(object record, String[] propertyNameList, PropertyDescriptorCollection itemProperties)
{
    for (int i = 0; i &lt; propertyNameList.Length - 1; i++)
    {
        var propertyDescriptor = itemProperties.Find(propertyNameList[i], true);
        if (propertyDescriptor != null)
        {
            record = propertyDescriptor.GetValue(record);
            itemProperties = TypeDescriptor.GetProperties(record);
        }
    }

    return new Tuple&lt;object, PropertyDescriptorCollection&gt;(record, itemProperties);
}  
</code></pre>

<p>which is also used by the <code>GetDefaultValue()</code> method  </p>

<pre><code>private object GetDefaultValue(object view, String propertyName, object record)
{
    PropertyDescriptorCollection itemProperties = view.GetItemProperties();
    string[] propertyNameList = propertyName.Split('.');

    Tuple&lt;object, PropertyDescriptorCollection&gt; tuple = DoSomething(record, propertyNameList, itemProperties);
    record = tuple.Item1;
    itemProperties = tuple.Item2;

    String actualproperty = propertyNameList[propertyNameList.Length - 1];

    var propertyinfo = record.GetType().GetProperty(actualproperty);

    if (propertyinfo == null &amp;&amp; view is CollectionViewAdv)
    {
        var sourceType = (view as CollectionViewAdv).SourceType;
        if (sourceType != null &amp;&amp; typeof(ICustomTypeDescriptor).IsAssignableFrom(sourceType))
        {
            return itemProperties.Find(actualproperty, true).GetValue(record);
        }
        return null;
    }

    if (!itemaccessor.ContainsKey(propertyName))
    {
        PropertyAccessor accessor = new PropertyAccessor(propertyinfo);
        itemaccessor.Add(propertyName, accessor);
        return accessor.GetValue(record);
    }

    if (record == null) { return null; }

    return itemaccessor[propertyName].GetValue(record);
}
</code></pre>
    </div>