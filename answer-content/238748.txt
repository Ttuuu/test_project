<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following are only a few quick notes on the C++ language usage from a first reading. I didn't have enough time to fully get through the whole code (might revisit later) and make suggestions on the overall design. I hope this is still considered an ok answer:</p>

<hr>

<p><code>TTL_INLINE</code> is pointless. It is used only on declarations of member functions which are defined in the class itself. Member functions defined in a class are <code>inline</code> automatically. Especially in a (class) template definition there is no point to <code>inline</code> at all, because being a template already imparts the same semantics as <code>inline</code> does.</p>

<hr>

<pre><code>static const LogType kDebug=(1U &lt;&lt; 0);
</code></pre>

<p>It doesn't matter so much for variables of integral type, but if you want to declare a compile-time constant it is advisable to always declare it <code>constexpr</code>. This guarantees that the variable is indeed a compile-time constant (and you will get an error message if it isn't.</p>

<p><code>static</code> is pointless for global <code>const</code> (or <code>constexpr</code>) variables, because they have internal linkage in C++ anyway (but not in C!).</p>

<p>So, better:</p>

<pre><code>constexpr LogType kDebug=(1U &lt;&lt; 0);
</code></pre>

<p>Similarly there is no point in having the unnamed namespace in</p>

<pre><code>namespace {
    int const fd_terminal = 0;
}
</code></pre>

<hr>

<pre><code>template &lt;size_t const kLogSize, uint32_t max_log_in_queue, uint32_t const kDelayMicro&gt;
</code></pre>

<p><code>const</code>-qualifying a template parameter is pointless. They cannot be modified anyway.</p>

<hr>

<p><code>addFd__</code>, <code>LOG_HEADER__</code>, <code>clock__</code>, <code>timer__</code>: Identifiers containing a double underscore <em>in any place</em> are reserved for the C++ compiler/standard library in all contexts.</p>

<p>You are not allowed to define them as macro or declare them in any way. Doing so causes the program to technically have undefined behavior and will definitively get you in trouble if the compiler/standard library actually uses one of the reserved names.</p>

<p>Note that the same is true for identifiers starting with a single underscore followed by an upper case letter. Identifiers starting with a single underscore are always reserved in the global scope.</p>

<p>Use a different naming scheme instead.</p>

<hr>

<p>Your <code>Logger</code> class has a custom destructor, but you are not defining a copy constructor and copy assignment operator. This is by itself is a violation of the <a href="https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three">rule of 0/3/5</a>. Violating this rule in most cases causes undefined behavior when the copies of objects of the class are made.</p>

<p>However, in your particular case the class is non-copyable because it contains a non-copyable type (<code>std::thread</code>) and is also non-movable because of the user-declared destructor. Therefore you won't be able to copy class objects anyway.</p>

<p>You might still want to be explicit about it though and delete the copy operations:</p>

<pre><code>Logger(const Logger&amp;) = delete;
Logger&amp; operator=(const Logger&amp;) = delete;
Logger(Logger&amp;&amp;) = delete;
Logger&amp; operator=(Logger&amp;&amp;) = delete;
</code></pre>

<p>The <code>Timer</code> class has a similar issue.</p>

<hr>

<pre><code>template &lt;typename T&gt;
T Argument(T value) noexcept
{
    return value;
}
</code></pre>

<p>This seems dangerous, because there is no guarantee that the copy constructors involved in this are actually <code>noexcept</code>. Instead you can simply pass-on the a reference:</p>

<pre><code>template &lt;typename T&gt;
const T&amp; Argument(const T&amp; value) noexcept
{
    return value;
}
</code></pre>

<p>which is guaranteed to not throw and also never requires copy constructor calls.</p>

<p>However <code>StringPrint</code> itself also has the same problem. It is however only a symptom of the much larger issue that you are not checking the types passed to your logger functions at all. In reality you should only accept types matching the format specification. Everything else will, silently, lead to undefined behavior.</p>

<p>In general, I'd suggest not using the C IO library which fundamentally has this type-safety problem. Instead have a look at e.g. the <code>fmt</code> library, which also inspires the upcoming C++20 <code>std::format</code>.</p>

<hr>

<p>(This one might be a bit pedantic, I think it is not a problem in practice.)</p>

<p><code>uint32_t</code>, <code>size_t</code>, <code>snprintf</code> and all the other C type aliases and functions are not guaranteed to be introduced into the global namespace when you include the <code>&lt;c...&gt;</code> header versions.</p>

<p>From what I can tell the POSIX header <code>unistd.h</code> guarantees that <code>size_t</code> and all the symbols from <code>stdio.h</code> are introduced in the global namespace and the POSIX header <code>netinet/in.h</code> guarantees that <code>uint32_t</code> is introduced, but you might want to just always prefix <code>std::</code> (or add a using declaration), just to be sure.</p>
    </div>