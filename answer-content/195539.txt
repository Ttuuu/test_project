<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Coding points</h1>

<h2>Fields and Properties</h2>

<p>In C#, properties should be PascalCased (<em>Owner, Balance, Transaction</em>, in Account).<br>
I would push for no public fields (<em>Name</em>, in Bank), always expose properties rather than fields.<br>
If a property should not be changed outside the class, it should have no public getter. If it should not be changed at all then it should be readonly (or have no setter, if a property)</p>

<pre><code>public abstract class Account
{
    public int Owner { get; private set; }

    public decimal Balance { get; private set; }

    public List&lt;Transaction&gt; Transactions { get; }

    public Account(int owner, decimal balance)
    {
        this.owner = owner;
        this.balance = balance;
        transactions = new List&lt;Transaction&gt;();
    }
//...
</code></pre>

<h2>Return values</h2>

<p>We always return <code>true</code> from <code>Withdrawal</code>. Under what conditions can it return false?  If it can never return <code>false</code>, why do we have a return value.<br>
If we do want/need the return value, why do <code>Transfer</code> and <code>Deposit</code> not have one?</p>

<h2>Exceptions</h2>

<p>This can be argued, but I would say that we should not be using exceptions for the various checks.  <em>'Insufficient Funds'</em> is not really an unexpected, out of the norm, problem. It is the sort of thing we should expect to occur and for which we should allow.</p>

<p><em>'Invalid Account'</em>, has better qualification for being an exception - if we have reached this part in the processing - somehow selecting an account and getting an account id - and then find that there is no account of that id, then that would be an unexpected, out of the norm occurrence. </p>

<p><strong>Note:</strong><br>
The docs for <code>ApplicationException</code> note that is should not be used. Don't inherit from it, don't throw it, don't catch unless you re-throw <a href="https://msdn.microsoft.com/en-us/library/system.applicationexception%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396" rel="nofollow noreferrer">ApplicationException</a></p>

<h2>Using Type for account creation</h2>

<p>Using the <code>Type</code> and the <code>Activator</code> to create account instances seems (to me) a bit strange.  I would say that an enum for account type (or a name for easier extension - arguable) and a <a href="https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29" rel="nofollow noreferrer">Factory</a> of some sort would be more usual. Yes, it can be argued that this is what using the <code>Type</code> and the <code>Activator</code> is doing but in an interview situation, showing that one knows about and understands the design pattern is good. <br>
We have hard-wired the account creation into the Bank. If we wish to change how accounts are created then we need to open up and change the Bank. If we pass in a factory (as an interface) then we can change the way that accounts are created without needing to change the Bank.</p>

<p></p><h1>Design Points</h1>

<h2>Transactions</h2>

<p>The code for the different transaction types seems to be missing (or else I am just missing it). Either way, it seems overkill to have different classes for each transaction type. <br>
At one extreme, we can create a single Transaction account that includes fields for all transaction types even though some fields (say, <em>OtherAccount</em>) will not be used. <br>
Or, we can create classes for each set of data needed (say, <em>`SingleAccountTransaction'</em>, <em>'TwoAccountTransaction'</em>). OK, it saves only a single class (so far) but classes which are different only in name seems wasteful. <br>
Again, a Factory to create the transactions would allow us to encapsulate the behaviour and change it if we desired.</p>

<h2>Accounts</h2>

<p>At the moment, we have the following account types
</p><ol>
<li>Account</li>
<li>SavingsAccount</li>
<li>CheckingAccount</li>
<li>MoneyMarketAccount</li>
<li>IndividualAccount</li>
</ol>

<p>All (as far as I can see) to implement the $1000 limit on withdrawals from the Individual account.</p>

<p>As with the Transactions above, this seems overkill. If the only difference between the accounts are the rules for withdrawals (or deposits or transfers or any other transaction, or any other rules), then we should encapsulate the rules and have a single Account class that can be instantiated with a set of rules (Factory to the rescue again).</p>

<p>At the moment, we not only have the proliferation of Accounts but the code in the <code>Withdrawal()</code> ends up getting replicated in <code>Account</code> and <code>Individual</code> account because we need to override all the functionality - this will be a maintenance problem if we change core rules and need to update it through all the account types. <br>
We can restructure things so that we put the common pieces in the base class and call them from the derived classes, putting only the specific pieces in the derived classes but this can get messy if the order of checks is important and varies between account type, or we have special cases (say we are allowed to have an overdraft on some checking accounts). </p>

<p>The more types of account we have, the more onerous it becomes to maintain a different class for each account type. If the only difference is the rules, the encapsulate the rules.</p>

<p>As a bonus, in an interview situation (at a certain level), many, if not most, of the answers offered will be polymorphic Account types.  Being able to offer and defend a different answer will make one stand out. :D</p>

<h1>Update:</h1>

<p>Adding an <code>if</code> block into the base class will work for this limited situation but is very cumbersome when the are lots of different account types with lots of different rules. The good part of the polymorphic accounts is that it removes the need for switch statements based upon the account type.</p>

<p>The intent of <code>encapsulating the rules</code> is to have some mechanism for configuring the transactions and then have the factory inject into the <code>Account</code> the specific configuration for each account type. We do not want any explicit checks for <code>AccountType</code> in the <code>Account</code> code.</p>

<p>We can configure the transactions in a few ways</p>

<ol>
<li>A set of rules for the transaction (like the balance and amount rules for withdrawals). </li>
<li>Transaction objects which have the rules embedded within themselves - though if we are not careful, this can get as messy as the accounts themselves in terms of class proliferation</li>
<li>Probably lots of other that I can't think of right now</li>
</ol>

<p>There can be a lot of code and moving pieces in this, so for a few account types/transactions/rules it is probably overkill but as I said, in an interview, if one can show an understanding of why inheritance and polymorphism is not always the best answer, what the alternatives are and the pros and cons of these, it will probably make one stand out.</p>
    </div>