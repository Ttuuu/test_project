<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a more efficient way to implement <code>getNumBits</code> (compared to @Reinderien's answer), if you use some bitwise magic:</p>
<pre><code>function getNumBits(x){
  x |= x &gt;&gt; 1;
  x |= x &gt;&gt; 2;
  x |= x &gt;&gt; 4;
  x |= x &gt;&gt; 8;
  x |= x &gt;&gt; 16;
  x -= (x &gt;&gt; 1) &amp; 0x55555555;
  x = ((x &gt;&gt; 2) &amp; 0x33333333) + (x &amp; 0x33333333);
  return (((x &gt;&gt; 4) + x) &amp; 0x0f0f0f0f) * 0x01010101 &gt;&gt; 24;
}
</code></pre>
<p>The first part (the <code>|=</code> operations) overlay the number with it's own bit shifts in order to turn all the bits into 1-bits except the bits to the left of the left-most 1-bit. Then the second part counts these 1-bits using <a href="https://www.playingwithpointers.com/blog/swar.html" rel="nofollow noreferrer">this algorithm</a>.</p>
<p>If you know that the number of bits is going to have an upper limit in some specific cases, then you can write even shorter functions to use in these cases. All you need is to understand how this bit count algorithm works.</p>
    </div>