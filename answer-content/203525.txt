<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This will be a pretty simple review, ignoring some stuff like how you're handling position and whatnot.</p>
<hr>
<p>All right. I cloned the directory from github, extracted it, changed the jpeg file paths and managed to <code>RunGame</code> once. After that I always get a compile error</p>
<blockquote>
<p>Constant expression required in GameLogic.RunGame CreateGameItem on <code>objectType.Ship</code></p>
</blockquote>
<p>even though I know it is properly declared as an <code>enum</code>.</p>
<hr>
<h3>Structure</h3>
<p>Anyhow. First, as I said, I cloned the directory. Your indentation is not right. I show <code>0</code> indentation for all first level, when those should be <code>+4</code>. Only <code>labels</code> should be at 0.</p>
<p>In general, your code appears to have good order, every block is a block, you have good usage of white space in the procedures.</p>
<p>I, personally, am not a fan of spacing out declarations so all the variable types are aligned, I don't see the use. But there's nothing <em>wrong</em> with that.</p>
<p>However, you declare all variables at the top of all of your procedures - try to declare variables as close to their usage as possible. e.g.</p>
<pre><code>Dim generateIncSpaceObjectsRound1 As StopWatch
Set generateIncSpaceObjectsRound1 = New StopWatch
' etc etc
generateIncSpaceObjectsRound1.Start
</code></pre>
<p>It's just generally good practice - it makes it easier to keep track of something instead of needing to scroll up to make sure you know what you're looking at.</p>
<hr>
<h3>Variables</h3>
<p>You missed a couple <code>Option Explicit</code>s in <code>CheckCollisions</code> and <code>DestroyObject</code> modules, not a big deal.</p>
<p>Your naming, in general, is pretty good. You seem to usually give good descriptive names to your variables, which is wonderful. I mean I don't know about using <code>x</code> and <code>y</code> unless they are actually x and y positions, and your <code>iterator as IBoundControl</code> should probably be renamed. A few others that could use some work -</p>
<pre><code>CreateGameItem.CreateGameItem val as ObjectType
CheckCollisions.CheckIfCollided
 first As IBoundControl, second As IBoundControl
 hOverlap As Boolean
 vOverlap As Boolean
</code></pre>
<p>Try to name booleans as what they are, like <code>isHorizontalCollision</code>. The same can be said for something like <code>Function HandleShipIncSpaceObjectCollisions() As Boolean</code> - "Handle" doesn't return true/false. Neither does <code>CheckIfCollided</code> - maybe <code>CollisionDetected</code>.</p>
<pre><code>GameLogic.HandleSendKeys caseNum as Long
</code></pre>
<p>This is the case number that you use to evaluate your select case for a number, yeah? You're passing a keycode, left, right or space. Assuming you don't want to use constants or an Enum, you're passing the <code>userKeyPressCode</code> right?</p>
<pre><code>SpaceObject(ALL) ImgPathWay As String, ImageName As String
</code></pre>
<p>Pick "Img" or "Image" - not both. (pick "image")</p>
<p>But, your <em><strong>consistency</strong></em> on naming just isn't there. In GameLogic you seem to be using <code>camelCase</code> very well for your variables, but in most of the other modules you seem to use <code>PascalCase</code>. <a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a> have <code>camelCase</code> for local variables and <code>PascalCase</code> for other variables and names. But, the real issue is that you aren't consistent across the project.</p>
<p>Constants -</p>
<blockquote>
<pre><code>Private Const BSHIFT_32 = 4294967296# ' 2 ^ 32
Const interval = 3
</code></pre>
</blockquote>
<p>Constant naming is half right here, but you didn't <em>type</em> either constant. They do need types.</p>
<p>In <code>SpaceObjectFactory</code> you have a bunch of</p>
<blockquote>
<pre><code>Dim width As Long
Dim height As Long
width = 15 'or 20 or 40
height = 30 'or 20 or 40
</code></pre>
</blockquote>
<p>Now there's some use for constants</p>
<pre><code>Const SHIP_WIDTH As Long = 15
Const SHIP_HEIGHT As Long = 30
</code></pre>
<p>Or if you wanted to get all fancy you could enum (or whatever) that out and create an object for pulling it through the Interface depending on the object.</p>
<p>Since users need to change the path to the images, I'd do that at the top of <code>SpaceObjectFactory</code> -</p>
<pre><code>Public Const PATH_TO_IMAGES As String = "C:\Users\Aggretsuko\"
'...
With New SpaceObjectShip
        .ImgPathWay = PATH_TO_IMAGES &amp; "SpaceShip.jpg"
</code></pre>
<p>That way the user can just change it once. Or, you know, you could create a check that validates that the current directory of the project holds the image files and automate that whole thing, import them or throw a handled error.</p>
<p>There's also something fishy about using <code>board.height</code> - I don't see you set the <code>GameBoard.Size</code> anywhere. But maybe I'm missing it, in which case I apologize. Either way, there should be a constant <em>somewhere</em> that defines these parameters.</p>
<hr>
<h3>Factory and interface</h3>
<p>You have a <code>SpaceObjectFactory</code> and then <code>ISpaceObject</code>. I'm no pro at OOP, but I'm going to take a stab at this. So you have a factory <em>module</em> that can create 5 different object <em>classes</em>. First, I think the factory should be a <em>class</em>.</p>
<p>Next there are the 5 objects - Alien, Comet, Missile, Ship and Star. But each one of these <em>Class</em> objects have the exact same properties and methods, except that they have different <code>Private Type</code>s -</p>
<blockquote>
<pre><code>SetInitialLeft
SetInitialTop
width
height
ImgPathWay
ImageName
Self
IspaceObject_ImagePathway
IspaceObject_ImageName
IspaceObject_Left
IspaceObject_Top
IspaceObject_Height
IspaceObject_Width
IBoundControl_Control
IBoundControl_SpaceObject
</code></pre>
</blockquote>
<p>Now, let's look at what your <code>ISpaceObject</code> Interface offers -</p>
<blockquote>
<pre><code>left
top
width
height
ImageName
ImagePathway
</code></pre>
</blockquote>
<p>This seems pretty redundantly-redundant. You have the interface to define how any of the factory's objects work. <em>And</em> they all work pretty much the same, hence the factory. Maybe the properties differ, which is why you have different types of objects.</p>
<p>So you setup a factory to make different objects, setup an interface to determine what these factory objects do, and then proceeded to create all of these class modules for the factory's objects. I think you can be more clever than that!</p>
<p><sub>Oh, and Missle.Jpeg should be renamed Missile.Jpeg.</sub></p>
    </div>