<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To me, the main problem with your solution is readability. It took me some time to understand what exactly you're doing to solve a <strong>Hackerrank</strong> task.</p>

<p><strong>Simplify Code</strong></p>

<p>For instance, consider the following block of yours:</p>

<pre><code>...
if (data &lt; current.data &amp;&amp; current.prev == null) {
     current.prev = nodeToInsert;
     nodeToInsert.next = current;
     return nodeToInsert;
}
...
</code></pre>

<p>Doing it in a <code>while</code> loop is a bit confusing as you can directly compare <code>data</code> with <code>head.data</code> - as per problem statement the list is sorted and so the smallest element is in the current head. Move it out of the loop. Additionally, remove <code>current.prev == null</code> as the head is the first element by definition. </p>

<pre><code>if (data &lt; head.data) {
    head.prev = nodeToInsert;
    nodeToInsert.next = head;
    return nodeToInsert;
}
</code></pre>

<p>Another block that can be simplified is:</p>

<pre><code>if (data &gt;= current.data &amp;&amp; current.next == null) {
    current.next = nodeToInsert;
    nodeToInsert.prev = current;
    break;
}
</code></pre>

<p>Here, you check if <code>current</code> is a tail (last element) and then add your <code>nodeToInsert</code> to it. But then <code>data &gt;= current.data</code> is redundant since <code>current.next == null</code> is sufficient to say whether an element is a tail or not. Hence:</p>

<pre><code>if (current.next == null) {
    current.next = nodeToInsert;
    nodeToInsert.prev = current;
    break;
}
</code></pre>

<p>Or even here:</p>

<pre><code>if (data &gt;= current.data &amp;&amp; data &lt;= current.next.data) {
    DoublyLinkedListNode temp = current.next;
    current.next = nodeToInsert;
    nodeToInsert.prev = current;
    temp.prev = nodeToInsert;
    nodeToInsert.next = temp;
    break;
}
</code></pre>

<p>You can remove <code>data &gt;= current.data</code> as it's given (initially <code>current = head</code> and so the check was made before the loop started):</p>

<pre><code>if (data &lt;= current.next.data) {
    DoublyLinkedListNode temp = current.next;
    current.next = nodeToInsert;
    nodeToInsert.prev = current;
    temp.prev = nodeToInsert;
    nodeToInsert.next = temp;
    break;
}
</code></pre>

<p><strong>Add useful comments</strong></p>

<p>You could've commented crucial blocks of your code better to make it easier to understand what you're doing. For instance:</p>

<pre><code>// if current is the last element then add the new element after it
if (current.next == null) {
    current.next = nodeToInsert;
    nodeToInsert.prev = current;
    break;
}
</code></pre>

<p>Or </p>

<pre><code>// if the new element is not greater than the next one 
// then insert it between the current element and the next one
if (data &lt;= current.next.data) {
    DoublyLinkedListNode temp = current.next;
    current.next = nodeToInsert;
    nodeToInsert.prev = current;
    temp.prev = nodeToInsert;
    nodeToInsert.next = temp;
    break;
}
</code></pre>

<p><strong>Static method</strong></p>

<p>Well, I know, <strong>Hackerrank</strong> forces you to use the static <code>sortedInsert()</code> method so there's nothing you can do about it.</p>
    </div>