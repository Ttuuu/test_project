<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Resource Management.</h2>
<p>Copy the list. You have obeyed the rule of three. But you don't provide the strong exception guarantee on your copy assignment operator. Basically this means that assignment either works and you make a copy of the new list from the source into the dest, <strong>BUT</strong> if it fails then the object i sleft unchanged.</p>
<pre><code>    List &amp;operator=(const List &amp;copy) {

        clear();         //  Here you destroy the current state.
        append(copy);    //  If this fails.
                         //  you can not reset the state of the object.
        return *this;
    }
</code></pre>
<p>This is called the basic exception guarantee. That's fine but you need to document it because most people expect the strong exception gurantee. Also using the copy and swap idiom mkae providing this gurantee easy,</p>
<pre><code>    // Copy assignment with copy and swap.
    List&amp; operator=(List const&amp; rhs)
    {
        List  tmp(rhs);    // Copy:  Make  copy into a temporary.
        rhs.swap(*this);   // Swap;  (exception safe)
        return *this;
    }
</code></pre>
<p>Moving the list. You have the move constructor. But I am not convinced it is correct. But you also missed the move assignment operator.</p>
<pre><code>    List(List &amp;&amp;move) : List() {
        std::swap(m_sentinel, move.m_sentinel);
        std::swap(m_head,     move.m_head);

        // Why not swap these members?
        m_tail   =            move.m_tail;
        m_length =            move.m_length;
    }
</code></pre>
<p>The requirement is that the object that was moved is left in a valid state (Though indeterminate). I am not convinced this is valid state. If I call methods on this object it should not cause bad things to happen (though I should not expect to know what could happen).</p>
<p>Currently:</p>
<pre><code> List&lt;int&gt;  list;
 list.append(6);

 // Some badly written function.
 // That **may** take ownership of the list but it may not.
 sendListSomewhere(std::move(list));

 // If the list was moved.
 // This will append `5` to the list that was moved
 // not to the current list.
 //
 // If the list was not moved
 // then it adds 5 to the current list locally.
 if (list.empty()) {
    list.append(5);
 }
</code></pre>
<p>Also the move assignment operator has not been written.</p>
<pre><code> List&lt;int&gt;  z;
 z = std::move(list);
</code></pre>
<p>Also you should mark the move operator as non throwing (by using noexcept). This will allow the standard containers to use your list in the most optimal way possible and still provide the strong exception guarantee.</p>
<pre><code>std::vector&lt;List&lt;int&gt;&gt;   x;
x.puhs_back();
x.push_back();  // If List does not have an noexcept move constructor
                // then vector must fall back to using copy constructor
                // when the internal structure of x is resized.
                //
                // Alternatively if the move constructor is noexcept
                // then a resize can use the move constructor
                // and still provide the strong exception guarantee.
</code></pre>
<h2>Sentinel</h2>
<pre><code>Node *m_sentinel,
     *m_head,
     *m_tail;
</code></pre>
<p>You don't really need head/tail if you are using a sentinel. The head is the element after the sentinel. The tail is the one before the sentinel. There is no need to keep track of these values. (Now I see you are using a singly linked list so no previous. So you will need tail (just not head).</p>
<p>Also don't be lazy with the declarations.</p>
<pre><code>Node* m_sentinel,
Node* m_head,
Node* m_tail;
</code></pre>
<p>In C++ (unlike C) the <code>*</code> or the <code>&amp;</code> tend to be placed with the type not the variable (its part of the type and the type is much more important in C++ than C).</p>
<h2>Placement New is not needed.</h2>
<pre><code> typename std::aligned_storage&lt;sizeof(T), alignof(T)&gt;::type m_data;
 Node(const T &amp;data, Node *next)
     : m_next(next)
 {
     new(&amp;m_data) T(data);
 }
</code></pre>
<p>I would just have written:</p>
<pre><code> T data;
 Node(Node* next, T const&amp; data, Node* next)
      : m_next(next)
      , m_data(data)
 {}
</code></pre>
<p>I would also add a move version of the Node constructor.</p>
<pre><code> Node(Node* next, T&amp;&amp; data)
      : m_next(next)
      , m_data(std::forward&lt;T&gt;(data)
 {}
</code></pre>
<p>Also for complex types of <code>T</code> you should allow the object T to be built in place by forwarding the constructor arguments for T.</p>
<pre><code> template&lt;typename... Args&gt;
 Node(Node* next, Args...&amp;&amp; args)
      : m_next(next)
      , m_data(std::forward&lt;Args&gt;(args)...)
 {}
</code></pre>
<p>Hate the use of assert.<br>
It means that production code runs and behaves differently from test code. In my opinion code should behave the same way no matter what (otherwise things become hard to diagnose when things go wrong).</p>
<pre><code>            Iterator_ &amp;operator++() {
                assert(m_node != m_node-&gt;m_next);
                m_node = m_node-&gt;m_next;
                return *this;
            }
</code></pre>
<p>Not sure why you are using reinterpret_cast.</p>
<pre><code>            ValueReferenceType &amp;operator*() const {
                return reinterpret_cast&lt;ValueReferenceType&gt;(m_node-&gt;m_data);
            }
</code></pre>
<p>There should be no need to use this type.</p>
<p>Another insert.</p>
<pre><code>        List &amp;insert(const T &amp;element, size_t index = 0) {
            if (index &gt; m_length) {
                assert(0);
                index = m_length;
            }
</code></pre>
<p>So in test code it terminates. But in production code you add it to the end of the list. That will confuse somebody one day.  Throw an exception....</p>
<p>Insert should not be that hard. The point of using the sentinel is to make the need for testing for empty list irelavant.</p>
<pre><code>   List&amp; insert(T const&amp; element, std::size_t index = 0)
   {
       if (index &gt; m_length) {
           throw XXX("XXXX");
       }

       Node*  mark = sentinel;
       while(index != 0) {
           --index;
           mark = mark-&gt;m_next;
       }


       // Deliberately not updating m_head as it is always
       // the one after the sentinel (so I am not storing it).


       mark-&gt;m_next = new Node(mark-&gt;m_next, element);
       return *this;
   }
       
</code></pre>
<p>Same thing with the append. You don't need to check the size.</p>
<pre><code>        List &amp;append(const T &amp;element) {
            Node *old_tail = m_tail;
            m_tail = new Node(element, m_sentinel);
            if (!m_length) m_head = m_tail; // Our first element, that makes the tail and head the same
            else old_tail-&gt;m_next = m_tail;

            ++m_length;
            return *this;
        }

        // This is what I would do.
        List&amp; append(T const&amp; element)
        {
            m_tail-&gt;m_next = new Node(m_sentinel, element);
            m_tail = m_tail-&gt;m_next;

            // Deliberately not updating m_head as it is always
            // the one after the sentinel (so I am not storing it).

            ++m_length;
            return *this;
        }
</code></pre>
<p>Same thing with the remove. You don't need to check the size.</p>
<pre><code>        List&amp; remove(size_t index)
        {
            if (index &gt;= m_length) {
                throw std::out_of_range("Removal out of bounds");
            }

           Node*  mark = sentinel;
           while(index != 0) {
               --index;
               mark = mark-&gt;m_next;
           }

           old = mark-&gt;m_next;
           mark-m_next = old-&gt;m_next;
           --m_length;

           delete old;
           return *this;
        }
</code></pre>
<h2>Comparison.</h2>
<p>This test to see if it is the same objext. It does not test to see if the list contain the same elements. I would expect the latter.</p>
<pre><code>        bool operator==(const List &amp;cmp) const {
            return m_head == cmp.m_head;
        }
</code></pre>
<h2>I would do it like this:</h2>
<p>Note: this compiles and works on the one test I tried.<br>
But it has not been code reviewed or tested in any meaningful way and thus is liable to contain errors.</p>
<pre><code>namespace ThrosAnvil
{

    template&lt;typename T&gt;
    class LinkedList
    {
        struct Node
        {
            Node(Node* prev, Node* next)
                : prev(prev)
                , next(next)
            {
                prev-&gt;next = this;
                next-&gt;prev = this;
            }
            virtual ~Node() {}
    
            Node*       next;
            Node*       prev;
        };
        struct DataNode: public Node
        {
            DataNode(Node* prev, Node* next, T const&amp; data)
                : Node(prev, next)
                , data(data)
            {}
            DataNode(Node* prev, Node* next, T&amp;&amp; data)
                : Node(prev, next)
                , data(std::forward&lt;T&gt;(data))
            {}
            template&lt;typename... Args&gt;
            DataNode(Node* prev, Node* next, Args&amp;&amp; ...args)
                : Node(prev, next)
                , data(std::forward&lt;Args&gt;(args)...)
            {}
            T           data;
        };
    
        Node    sentinel;
    
            template&lt;typename ResultType&gt;
            struct IteratorBase
            {
                Node* current;
                IteratorBase(Node* node)
                    : current(node)
                {}
                bool operator==(IteratorBase const&amp; rhs) const      {return current == rhs.current;}
                bool operator!=(IteratorBase const&amp; rhs) const      {return !(*this == rhs);}
    
                IteratorBase&amp; operator++()                          {current = current-&gt;next;return *this;}
                IteratorBase&amp; operator--()                          {current = current-&gt;prev;return *this;}
                IteratorBase  operator++(int)                       {IteratorBase result(*this); ++(*this);return result;}
                IteratorBase  operator--(int)                       {IteratorBase result(*this); --(*this);return result;}
    
                ResultType&amp; operator*() const                       {return static_cast&lt;DataNode*&gt;(current)-&gt;data;}
                ResultType* operator-&gt;() const                      {return &amp;static_cast&lt;DataNode*&gt;(current)-&gt;data;}
            };
        public:
            using iterator          = IteratorBase&lt;T&gt;;
            using const_iterator    = IteratorBase&lt;T const&gt;;
    
            // Default
            LinkedList()
                : sentinel(&amp;sentinel, &amp;sentinel)
            {}
            // Copying␣
            LinkedList(LinkedList const&amp; copy)
                : LinkedList()
            {
                for(auto const&amp; val: copy) {
                    push_back(val);
                }
            }
            LinkedList&amp; operator=(LinkedList const&amp; rhs)
            {
                LinkedList      tmp(rhs);
                tmp.swap(*this);
                return *this;
            }
            // Moving
            LinkedList(LinkedList&amp;&amp; move) noexcept
                : LinkedList()
            {
                move.swap(*this);
            }
            LinkedList&amp; operator=(LinkedList&amp;&amp; rhs) noexcept
            {
                rhs.swap(*this);
                return *this;
            }
            // Destroying
            ~LinkedList()
            {
                Node* next;
                for(Node* loop = sentinel.next; loop != &amp;sentinel; loop = next)
                {
                    next = loop-&gt;next;
                    delete loop;
                }
            }
            // Swap
            void swap(LinkedList&amp; other) noexcept
            {
                using std::swap;
                swap(sentinel.next-&gt;prev, other.sentinel.next-&gt;prev);
                swap(sentinel.prev-&gt;next, other.sentinel.prev-&gt;next);
                swap(sentinel.next, other.sentinel.next);
                swap(sentinel.prev, other.sentinel.prev);
            }
    
            // Copying value into list
            void push_back(T const&amp; value)      {new DataNode(sentinel.prev, &amp;sentinel, value);}
            void push_front(T const&amp; value)     {new DataNode(&amp;sentinel, sentinel.next, value);}
    
            // Moving value into list
            void push_back(T&amp;&amp; value)           {new DataNode(sentinel.prev, &amp;sentinel, std::forward&lt;T&gt;(value));}
            void push_front(T&amp;&amp; value)          {new DataNode(&amp;sentinel, sentinel.next, std::forward&lt;T&gt;(value));}
    
            // Emplaning value into list
            template&lt;typename... Args&gt;
            void emplace_back(Args&amp;&amp; ...args)   {new DataNode(sentinel.prev, &amp;sentinel, std::forward&lt;Args&gt;(args)...);}
            template&lt;typename... Args&gt;
            void emplace_front(Args&amp;&amp; ...args)  {new DataNode(&amp;sentinel, sentinel.next, std::forward&lt;Args&gt;(args)...);}
    
    
            iterator begin()                    {return iterator(sentinel.next);}
            iterator end()                      {return iterator(&amp;sentinel);}
            const_iterator begin()  const       {return const_iterator(sentinel.next);}
            const_iterator end()    const       {return const_iterator(&amp;sentinel);}
            const_iterator cbegin() const       {return const_iterator(sentinel.next);}
            const_iterator cend()   const       {return const_iterator(&amp;sentinel);}
    };
    
    template&lt;typename T&gt;
    void swap(LinkedList&lt;T&gt;&amp; lhs, LinkedList&lt;T&gt;&amp; rhs)
    {
        lhs.swap(rhs);
    }
}
</code></pre>
    </div>