<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall good and reviews so far covered key aspects. IMHO, It is always good practice to build safety nets in your code to handle exceptions. One such case would be to handle boundary/corner cases. Declaring in the requirements as below</p>

<blockquote>
  <p>Unsorted array of whole integers in range of 1000 to 9000  Kth
  smallest element you want to find</p>
</blockquote>

<p>is good, but it should be factored in the program to handle scenarios with input values not in the expected range. By handling I don't mean any specific way. You can explore and choose one as you see fit. But one quick   and dirty generalisation of what you wrote that can work with arrays comprising +ve and/or -ve integers and/or 0's might be of interest. Here you go:</p>

<pre><code>def kthSmallest(lst,k):
    # Base case
    if k &gt; len(lst):
            return None
    # Case for negative elements, zeros
    m = max(lst)
    if m &lt;= 0:
        m = abs(min(lst))
        if m == 0:
            m = len(lst)

    items= [0] *  (2 * m + 1)
    for i in range(len(lst)):
         new_index =lst[i]+ m
         items[new_index] += 1
    count = 0
    for i, item in enumerate(items):
        count += item
        if count &gt;= k:
            print(i)
            return  i - m    
</code></pre>
    </div>