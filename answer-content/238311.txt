<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The biggest change you can do is to the value function. Because most of what you are building is actually provided via <code>HashMap</code>'s<a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry" rel="nofollow noreferrer"><code>entry</code></a> API. This could reduce the body of your value function to simply this:</p>

<pre><code>match self.values.entry(arg) {
    Entry::Occupied(val) =&gt; val.into_mut(),
    Entry::Vacant(slot) =&gt; slot.insert((self.calculation)(arg)),
}
</code></pre>

<p>You could also mess with <code>Entry</code>'s <a href="https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert_with" rel="nofollow noreferrer"><code>or_insert_with</code></a> function, but I personally prefer the approach above.</p>

<p>You may also consider using <a href="https://doc.rust-lang.org/std/clone/trait.Clone.html" rel="nofollow noreferrer"><code>Clone</code></a> instead of <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html" rel="nofollow noreferrer"><code>Copy</code></a>. The advantage of <code>Clone</code> are that it is more explicit and that it should support more types. The disadvantage obviously is that <code>clone</code> can be arbitrarily expensive. In general I'd say you want <code>Clone</code> for a generic interface such as this.</p>

<p>Finally, I understand it's an exercise, but the names are a bit plain:</p>

<ul>
<li><code>Cache</code> is very generic: what do you actually cache? Call it something like <code>FunctionResultCache</code> or <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer"><code>Memoizer</code></a></li>
<li><code>value</code> is also a bit weird. What you're doing in essence is wrapping a function, so I'd name this <code>call</code> or <code>invoke</code> or something similar. </li>
</ul>
    </div>