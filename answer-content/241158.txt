<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If there are duplicate points in your list, and the closest point turns out to be one of these points, this line of code will remove all of the duplicates:</p>
<pre><code>x_points_2 = [x for x in x_points if x != closest_xpoint_1]
</code></pre>
<p>So, instead of returning the 2 closest points, it may return just one of the closest, and some other nearby point.</p>
<hr>
<p>Finding the n-smallest, n-closest, etc is usually best done using Python's <a href="https://docs.python.org/3/library/heapq.html#heapq.nsmallest" rel="nofollow noreferrer">heapq.nsmallest(n, iterable, key=None)</a> function.</p>
<blockquote>
<p>Return a list with the n smallest elements from the dataset defined by <em>iterable</em>. <em>key</em>, if provided, specifies a function of one argument that is used to extract a comparison key from each element in <em>iterable</em> (for example, <code>key=str.lower</code>). Equivalent to: <code>sorted(iterable, key=key)[:n]</code>.</p>
<p>[This function] perform best for smaller values of n. For larger values, it is more efficient to use the sorted() function. Also, when <code>n==1</code>, it is more efficient to use the built-in min() and max() functions. If repeated usage of these functions is required, consider turning the iterable into an actual heap.</p>
</blockquote>
<p>Example: a closest <em>n</em> points function, with n defaulting to 2:</p>
<pre><code>import heapq

def closest_points(list_of_tuples, x_value, n=2):
    return heapq.nsmallest(n, list_of_tuples, lambda pnt:abs(pnt[0] - x_value))
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; closest_points([(4, 6), (2, 5), (0, 4), (-2, 3)], 6)
[(4, 6), (2, 5)]
</code></pre>
    </div>