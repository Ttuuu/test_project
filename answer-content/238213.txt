<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure exactly what your metric is for being "elegant", but here's a bit of a different approach that I think is fairly "clean" and "simple" to follow:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const string1 = 'AYUKB17053UI903TBC';
const string2  = 'ABKUY01357IU039BCT';

function sortPieces(str) {
    const piecesArray = [];
    let lastPiece = [];
    let lastType;
    for (const char of str) {
        const nextType = (char &gt;= "0" &amp;&amp; char &lt;= "9") ? "number" : "letter";
        if (nextType === lastType || !lastType) {
            // either same type as previous char or first char in string
            lastPiece.push(char);
        } else {
            // different type of char than previous char, start a new piece
            piecesArray.push(lastPiece.sort());
            lastPiece = [char];
        }
        lastType = nextType;
    }
    piecesArray.push(lastPiece.sort());
    return piecesArray.flat().join("");    
}

let result = sortPieces(string1) 
console.log(result === string2, result);</code></pre>
</div>
</div>


<hr>

<p>This could also be done by just adding each sorted piece directly to a results array which then removes the need to use <code>.flat()</code> at the end.    One could also use:</p>

<pre><code>result = result.concat(lastPiece.sort())
</code></pre>

<p>too, but I don't generally like the fact that <code>.concat()</code> makes a whole new result array every time you call it (which seems less efficient to me if doing it a bunch of times) so that's why I used this:</p>

<pre><code>result.push(...lastPiece.sort())
</code></pre>

<p>instead since you can add one array onto the other this way without making a whole new copy of the accumulated array every time (though it may be making a copy of <code>lastPiece</code> each time).  Since <code>.flat()</code> could be implemented in native code, it may be plenty efficient (as used in the first implementation).</p>

<p>Anyway, here's an implementation that uses <code>result.push(...lastPiece.sort());</code> to accumulate results as you go:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const string1 = 'AYUKB17053UI903TBC';
const string2  = 'ABKUY01357IU039BCT';

function sortPieces(str) {
    const result = [];
    let lastPiece = [];
    let lastType;
    for (const char of str) {
        const nextType = (char &gt;= "0" &amp;&amp; char &lt;= "9") ? "number" : "letter";
        if (nextType === lastType || !lastType) {
            // either same type as previous char or first char in string
            lastPiece.push(char);
        } else {
            // different type of char than previous char, start a new piece
            result.push(...lastPiece.sort());
            lastPiece = [char];
        }
        lastType = nextType;
    }
    result.push(...lastPiece.sort());
    return result.join("");    
}

let result = sortPieces(string1) 
console.log(result === string2, result);</code></pre>
</div>
</div>


<hr>

<p>FYI, in a <a href="https://jsperf.com/sort-pieces/1" rel="nofollow noreferrer">little performance benchmarking</a>, the first option here is faster in Firefox and the second option here is faster in Chrome.  Apparently Chrome is more efficient with <code>result.push(...lastPiece.sort());</code> or worse with <code>.flat()</code>.</p>
    </div>