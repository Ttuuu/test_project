<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Restructuring and micro-optimization</h3>

<p>Hard-coded table size <code>54</code> is better defined as class constant:</p>

<pre><code>T_SIZE = 54
</code></pre>

<p>Encapsulate the crucial list/table at least as <em>protected</em> property <code>self._Table</code>.</p>

<p>Calling <code>self._get_value(key)</code> and the condition <code>if self._Table[val] == None</code> are repeated in most crucial methods. To reduce that noisy repetition an additional method can be defined which will return a tuple of calculated value <code>val</code> and <code>is_empty</code> ("empty slot" flag):</p>

<pre><code>def _check_value(self, key):
    val = self._get_value(key)
    is_empty = self._Table[val] is None
    return val, is_empty
</code></pre>

<p>It doesn't make sense to construct <code>if ... else</code> conditional if the 1st <strong><code>if</code></strong> branch <strong><code>return</code></strong> 's immediately.</p>

<p>Both <strong><code>delete</code></strong> and <strong><code>lookup</code></strong> methods, on existing item, will perform <strong>2</strong> access/lookup operations on <code>self._Table[val]</code>:</p>

<ul>
<li><code>key in self._Table[val]</code></li>
<li><code>self._Table[val].index(key)</code> </li>
</ul>

<p>To reduce access operations there we can apply <strong><code>try/except</code></strong> <em>trick</em> and returning the needed result in each separate block. See the final implementation below:</p>

<pre><code>class HashTable:
    T_SIZE = 54

    # Initialize the table with a fixed size
    def __init__(self):
        self._Table = [None] * HashTable.T_SIZE

    def _get_value(self, key):
        total = hash(key)
        return total % HashTable.T_SIZE

    def _check_value(self, key):
        val = self._get_value(key)
        is_empty = self._Table[val] is None
        return val, is_empty

    def insert(self, key):
        val, is_empty = self._check_value(key)
        col = False  # Collision flag
        index = 0

        if is_empty:  # Empty slot - turn into list of keys to avoid extra cases
            self._Table[val] = [key]
        else:
            self._Table[val].append(key)  # Collision - append
            col = True
            index = len(self._Table[val]) - 1

        return val, col, index

    def delete(self, key):
        val, is_empty = self._check_value(key)
        if is_empty:  # Deleting unexisting element
            return -1, 0

        try:
            index = self._Table[val].index(key)
            self._Table[val].remove(key)
            return val, index
        except ValueError:  # No match was found in list, element does not exist
            return -1, 0

    def lookup(self, key):
        val, is_empty = self._check_value(key)
        if is_empty:
            return -1, 0
        try:
            index = self._Table[val].index(key)
            return val, index
        except ValueError:  # No match was found in list, element does not exist
            return -1, 0

    def clear(self):
        self.__init__()
</code></pre>

<p>In case if <code>_get_value</code> method won't be used in standalone context - you may easily inline it into <code>_check_value</code> method.</p>

<p>Sample usage:</p>

<pre><code>h = HashTable()
h.insert('abc')
h.insert('abc')
print(h.lookup('abc'))
print(h.lookup('1abc'))
print(h.delete('abc'))
print(h.delete('abc'))
print(h.delete('abc'))
</code></pre>

<p>The output (consecutively):</p>

<pre><code>(8, 0)
(-1, 0)
(8, 0)
(8, 0)
(-1, 0)
</code></pre>
    </div>