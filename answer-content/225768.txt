<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Write inline documentation in Doxygen format</h1>

<p>You are making a good effort to document the functions, variables and macros you declare. It would be even better if you use a standardized format for it, like <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">Doxygen</a>. This can then be processed by tools to provide that documentation in HTML and PDF format, and those tools can even check if you describe all input and output parameters of functions, and whether you forgot to document anything.</p>

<h1>In addition to documenting assumptions, <code>assert()</code> them</h1>

<p>If a function requires that a parameter that's passed in is non-<code>NULL</code>, add an <code>assert()</code> statement at the start of that function to check that. You can disable the
<code>assert()</code>-statements when making a release build by adding <code>-DNDEBUG</code> to the compiler flags. But during development, this helps debugging issues.</p>

<h1>Avoid macros where possible</h1>

<p>Don't <code>#define</code> anything you could just as well have written as a const variable or as a function. The problem with macros is that it is easy to forget necessary parentheses, or to evaluate macro arguments with side-effects multiple times. Constants and inlined functions are just as performant as macros. Also, you get stronger typing. So for example, instead of:</p>

<pre><code>#define MASK(x) (x &gt;= INT_SIZE ? 0xFFFFFFFF : (1 &lt;&lt; x) - 1)
</code></pre>

<p>Write:</p>

<pre><code>static inline int mask(int x) {
    if (x &gt;= INT_SIZE)
        return 0xFFFFFFFF;
    else
        return (1 &lt;&lt; x) - 1;
}
</code></pre>

<p>Note that the above already hints at an issue: the constant <code>0xFFFFFFFF</code> is larger than the maximum value of an int. Maybe this should return an <code>unsigned int</code>? And while you are at it, you should probably just <code>assert(x &lt; INT_SIZE)</code>.</p>

<h1>Make functions <code>static</code> where possible</h1>

<p>If you have a function that is only used in the file it is defined in, you should make it <code>static</code>. This is especially important for libraries, as it prevents these function names leaking into the global namespace. Also, it allows the compiler to make more aggressive optimizations.</p>

<h1>Use a code formatter</h1>

<p>There are some inconsistencies in your code with spaces around braces and math operators, there's mixed <code>/* ... */</code> and <code>// ...</code> comment styles, newlines around code blocks, and so on. Use a code formatter like indent, astyle or clang-format to ensure everything has a consistent style. This also makes it easier if you have other people contributing to your code.</p>

<h1>Remove unnecessary parentheses and casts</h1>

<p>This is rather personal, but I believe that adding unnecessary parentheses to expressions more often makes them less readable than that it improves readability.
For example:</p>

<pre><code>symbolT sym1 = *((symbolT*)ptr1);
</code></pre>

<p>This can be written as:</p>

<pre><code>symbolT sym1 = *(symbolT*)ptr1;
</code></pre>

<p>Also, you can avoid explicit casts to <code>double</code> in some cases. For example:</p>

<pre><code>kraftSum += 1 / (double)(1 &lt;&lt; symbols[k].codeLen);
</code></pre>

<p>Can be rewritten as:</p>

<pre><code>kraftSum += 1.0 / (1 &lt;&lt; symbols[k].codeLen);
</code></pre>

<p>The <code>1.0</code> makes it explicit to the compiler that you want to do a floating point division.</p>

<h1>Don't indent inside header guards</h1>

<p>Don't indent code inside <code>#ifndef FOO_GUARD</code> ... <code>#endif</code>. This would indent all but two lines in a file. This doesn't really improve readability, it just shifts everything to the right, resulting in shorter lines and useless whitespace at the left.</p>

<p>Alternatively to the header guard style you are using, you can also just put <code>#pragma once</code> at the start of each header file. All major compilers for all major platforms support this.</p>

<h1>Consider delaying I/O error checking</h1>

<p>When you are writing to the output, you check the return value of <code>fwrite()</code> every time. It is good practice to do error checking for all functions that might return an error. However, you will have noticed it adds a lot of lines to the code. Wouldn't it be nice if that can be avoided? It would save typing and makes the code look nicer. With most functions operating on a <code>FILE *</code>, the C library actually keeps track of the error state for each file. You can check whether the stream is still OK at any time by calling <code>ferror()</code>. The chance of an error actually occuring is low, and if it does, then delaying the error message a bit is not a problem. So in this case, you can just call <code>fwrite()</code> without checking the results, and just check <code>ferror()</code> once at the end. If <code>ferror()</code> returns a non-zero value, print an error and return an error.</p>
    </div>