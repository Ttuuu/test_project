<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In both GET query strings and POST bodies, the key-value pairs are <a href="https://en.wikipedia.org/wiki/Percent-encoding" rel="nofollow noreferrer">percent-encoded</a>.  Therefore, <code>username</code> and <code>%75%73%65%72name</code> would be considered semantically equivalent keys, and your parser should also look for the percent-encoded variants in the input.  Conversely, the function should automatically percent-decode any value that it finds, both for symmetry and utility.</p>

<p>Why not return the result instead of returning <code>void</code>?</p>

<p>However, I'd prefer a design that avoids <code>malloc()</code> altogether, because <code>malloc()</code> could fail, and your caller could easily forget to <code>free()</code> the allocated memory.  Consider writing a parser that helps you iterate over the keys and values, overwriting the <code>input</code> with the decoded results.  It's kind of ugly, but avoids <code>malloc()</code> altogether.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

/**
 * Percent-decodes a string in-place.
 */
static void percentDecode(char *s) {
    /* TODO */
}

/**
 * Returns a pointer to the beginning of the a key-value pair, writing
 * a NUL delimiter to the input.  Advances input to the next key-value pair.
 */
char *keyValuePair(char **input) {
    return strsep(input, "&amp;");
}

/**
 * Splits keyValue into two strings, and performs percent-decoding on both.
 * Returns a pointer to the key, and advances keyValue to point to the value.
 */    
char *extractKey(char **keyValue) {
    char *key = strsep(keyValue, "=");
    percentDecode(key);
    percentDecode(*keyValue);
    return key;
}

int main() {
    char *input = strdup("username=johndoe&amp;password=password123");
    for (char *key; (key = keyValuePair(&amp;input)); ) {
        char *value = key;
        if (0 == strcmp("password", extractKey(&amp;value))) {
            printf("Found %s: %s\n", key, value);
        }
    }
    free(input);
}
</code></pre>
    </div>