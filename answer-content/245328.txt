<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>My recursive solution:</strong></p>
<p>Logic: You are taking a string.
You are appending three types of strings to the <code>ALL_VALUES</code> list.</p>
<ol>
<li>0th indexed character pair with all other characters for each string in the recursion stack.</li>
<li>Each string that is in recursion stack.</li>
<li>List of all characters individually.</li>
</ol>
<p>Now you are adding the string characters, all characters pair with 0th positioned character and rest all removing the leftmost character and doing it recursively.</p>
<pre><code>ALL_VALUES = []


def find_all_subsets(string):
    if string:
        ALL_VALUES.extend(
            [string] + ([string[0] + character for character in string[1:]])
        )
        find_all_subsets(string[1:])


find_all_subsets(string)
print(set(ALL_VALUES + list(string)))
</code></pre>
<p><strong>Outputs:</strong></p>
<pre><code>string = "ABCD"  # Output {'A', 'B', 'CD', 'D', 'BD', 'C', 'BC', 'AD', 'AB', 'AC'}

string = "ABC"  # Output = {'AC', 'C', 'AB', 'A', 'BC', 'B'}
</code></pre>
    </div>