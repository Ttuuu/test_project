<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd argue that no, this does not make the code easier to understand. Instead of a combination of familiar general-purpose constructs (<code>using</code> and <code>foreach</code>), you now have an undocumented custom special-purpose construct <code>Using(outer, inner)</code> that must be understood before one can make sense of the code. This use-case seems too uncommon to be worth that trade-off.</p>

<p>The main problem I have with the original piece of code is that it looks like a 'camel' because of the <code>Disposable.Create</code> hump at the start. Your alternative is still a camel, just with a bigger hump at the front and a flatter one at the back. With a <code>DisposeAll</code> extension method, you could turn it into a dromedary. It's still a tall hump, but now the shape actually matches its single-loop nature:</p>

<pre><code>using (_logger.BeginScope().CorrelationHandle("TestBundle").AttachElapsed())
using (Disposable.Create(() =&gt; cache.Values.DisposeAll()))
{
    _logger.Log(Abstraction.Layer.Service().Meta(new { TestBundleFileName = testBundle.FileName }));
    foreach (var current in tests)
    {
        using (_logger.BeginScope().CorrelationHandle("TestCase").AttachElapsed())
        {
            // TODO
        }
    }
}
</code></pre>

<p>Another thing you can do is to move the loop body to a separate method or local function.</p>
    </div>