<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unit tests should be put in the file they're testing</h1>

<p>It's <a href="https://doc.rust-lang.org/book/second-edition/ch11-03-test-organization.html" rel="nofollow noreferrer">recommended to put the unit tests into the same file</a> as the functions you're testing. This prevents your code from getting out of sync with your tests more easily. Also, you don't want one single large <code>tests.rs</code>for all your unit tests.</p>

<h1>Use proper types in traits</h1>

<p>At the moment, as soon as we use any function from <code>Vector3</code>, we end up with a <code>KVector3</code>:</p>

<pre><code>pub trait Vector3 {
    fn dot(&amp;self, v : KVector3) -&gt; f64;
    fn cross(&amp;self, v : KVector3) -&gt; KVector3; // here

    fn zero() -&gt; KVector3;  // here
    fn i_hat() -&gt; KVector3; // here
    fn j_hat() -&gt; KVector3; // here
    fn k_hat() -&gt; KVector3; // here
}
</code></pre>

<p>That's probably not what you intended. Use <code>Self</code> instead here. Furthermore, all your functions are fixed to <code>f64</code>, but one can implement all functions from <code>Vector3</code> for <em>any</em> number type. The following interface encapsulates that:</p>

<pre><code>pub trait Vector3 {
    type Output;

    fn dot(&amp;self, v: Self) -&gt; Self::Output;
    fn cross(&amp;self, v: Self) -&gt; Self;

    fn zero() -&gt; Self;
    fn i_hat() -&gt; Self;
    fn j_hat() -&gt; Self;
    fn k_hat() -&gt; Self;
}
</code></pre>

<h1>Use <code>derive</code> for canonical implementations</h1>

<p>If you use <code>#[derive(PartialEq, Debug)]</code> you don't have to implement both variants yourself.</p>

<h1>Consider generics for your structs (and traits)</h1>

<p>Your <code>KVector3</code> only supports <code>f64</code>. However, we can imagine a situation where we want to store <code>f32</code>, for <a href="https://stackoverflow.com/questions/2079906/float-vs-double-on-graphics-hardware">example for GPU calculation</a>. We can use <code>KVector3</code> also in that circumstance if we make it generic.</p>

<h1>Add documentation and examples</h1>

<p>Since you're working on a <em>reusable</em> library you want to have some documentation at hand. Furthermore, <a href="https://doc.rust-lang.org/book/second-edition/ch14-02-publishing-to-crates-io.html#making-useful-documentation-comments" rel="nofollow noreferrer">examples in your documentation are automatically checked with <code>cargo test</code></a>.</p>
    </div>