<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is technically safe. </p>

<p>There are some side effects that could help a hacker to penetrate elsewhere, namely a flawed error reporting. The error reporting must be flexible, allowing the same code base behave differently based on the server's role:</p>

<ul>
<li>on a dev server all errors are better to be shown on-screen (which your code does)</li>
<li>but on a live server not a single word from the system error message should be shown outside. </li>
</ul>

<p>To serve these rather contradicting demands your code should never output errors by itself but let PHP to do it instead. And then PHP could be told what to do with error messages by means of couple configuration settings, one of which, <code>display_errors</code> you are already using.</p>

<p>So, long story short, all this fuss is about this small part, <code>var_dump($err-&gt;getMessage());</code>. but you must remember that hackers are cunning. They could overload your database server to make PHP throw an error on connection, and then get a lot of useful information from the error message. To prevent that, just never have a code like this. Most of time an exception thrown must be left alone. But the connection is a special case, as it reveal the database credentials in the stack trace. To prevent this, you can just re-throw the exception, as it shown in my article on <a href="https://phpdelusions.net/pdo_examples/connect_to_mysql#error_handling" rel="nofollow noreferrer">connecting to MySQL using PDO</a>. So connection.php could be rewritten this way:</p>

<pre><code>try {
    $usersConn = new PDO('mysql:host=HOSTNAME HERE;dbname=DB NAME HERE;charset=utf8', 'USERNAME HERE', 'PASSWORD HERE');  
    $usersConn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $usersConn-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
}
catch(PDOException $err) {
    throw new \PDOException($e-&gt;getMessage(), (int)$e-&gt;getCode());
}
</code></pre>

<p>so it will never leak anything sensitive, neither in the browser on a properly configured live server, nor even leak the database password into the logs.</p>
    </div>