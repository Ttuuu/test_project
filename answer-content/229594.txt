<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few points:</p>

<ul>
<li><p>Reversing the string <code>m</code> multiple times is unnecessary. Slicing can be done on the original string using correct indices. <code>m[::-1][i:i+3][::-1]</code> is equivalent to <code>m[-i-3:len(m)-i]</code>. Another approach is to traverse the indices in the reverse order <code>for i in range(len(m)-1, -1, -3)</code> and then perform slicing accordingly.</p></li>
<li><p>The logic can be simplified using <code>str.join</code>. <code>m2.append(',')</code> can be omitted. And you can just do</p>

<pre><code>m3 = ','.join(m2[::-1])
</code></pre></li>
<li><p>Further improvements can be achieved by using list comprehensions and traversing the string from the beginning rather than in the reverse order. Some calculation for the indices are needed:</p>

<pre><code>def formatting(n):
    m = str(n)  # Turn it into string
    num_digits = len(m)
    seg1_len = (num_digits % 3) or 3  # Calculate length of the first segment
    segments = [m[:seg1_len], *(m[i:i+3] for i in range(seg1_len, num_digits, 3))]
    return ','.join(segments)
</code></pre></li>
<li><p>Python 3's built-in <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">formatting specification</a> actually supports the thousands separator. So you can just do this to achieve the same functionality:</p>

<pre><code>formatted_n = f"{n:,}"
</code></pre>

<p>Or equivalently:</p>

<pre><code>formatted_n = "{:,}".format(n)
</code></pre></li>
</ul>
    </div>