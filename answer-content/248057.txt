<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Personally, I find the function name <code>binary_to_decimal_converter</code> more explicit than necessary, I'd call it <code>binary_to_decimal</code>.</p>
</li>
<li><p>Your input type is wrong. A binary number is a string. Your input is a number (technically an <code>int</code>). Numbers don't have digits/bits/whatever and aren't binary/decimal/whatever. Number <em>representations</em> have digits/bits/whatever and are binary/decimal/whatever. At most you could argue that <code>int</code> is internally a binary representation, but that wouldn't really be true (I think it's base 2<sup>31</sup> or so) and also none of our business. For all we know, it's just a number, and we can do number things with it. Like multiplying it with other numbers. But you can't ask it for a digit. Because it doesn't have any. Try <code>3141[2]</code>, you'll get an error. Unlike <code>'3141'[2]</code>, which gives you <code>'4'</code>. So since you're talking about binary and decimal, your input and output should be strings. (End of numbers-vs-number-representations rant :-)</p>
</li>
<li><p>You compute the number from the "binary" with your own code, but then you make the f-string do the whole second half of the job, conversion from the number to decimal. Rather seems like cheating.</p>
</li>
<li><p>It's inefficient and more complicated than necessary to use powers like you do. Instead, you could just double the current value before adding the next bit.</p>
</li>
</ul>
<p>Code doing all that, converting the given binary to a number (int) and then to decimal:</p>
<pre><code>def binary_to_decimal(binary):
    number = 0
    for bit in binary:
        number *= 2
        if bit == '1':
            number += 1
    decimal = ''
    while number:
        digit = '0123456789'[number % 10]
        decimal = digit + decimal
        number //= 10
    return decimal or '0'
</code></pre>
<p>Test:</p>
<pre><code>&gt;&gt;&gt; binary_to_decimal('1111101100')
'1004'
</code></pre>
    </div>