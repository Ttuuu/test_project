<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It seems you simply need process a fixed set of work items in parallel with a fixed degree of parallelism and in an async compatible way. <a href="https://blogs.msdn.microsoft.com/pfxteam/2012/03/05/implementing-a-simple-foreachasync-part-2/" rel="nofollow noreferrer">Stephen Toub has written a very elegant way to do that in just a couple lines of code.</a></p>

<pre><code>public static Task ForEachAsync&lt;T&gt;(this IEnumerable&lt;T&gt; source, int dop, Func&lt;T, Task&gt; body) 
{ 
    return Task.WhenAll( 
        from partition in Partitioner.Create(source).GetPartitions(dop) 
        select Task.Run(async delegate { 
            using (partition) 
                while (partition.MoveNext()) 
                    await body(partition.Current); 
        })); 
}
</code></pre>

<p>Your new code would be:</p>

<pre><code>await ForEachAsync(GetWorkItems(), dop: 16, body: async item =&gt; {
 await ProcessItem(item); //TODO
});
</code></pre>

<p>There is no need to explicitly maintain a queue. But if you want to, you can du that by feeding <code>ConcurrentQueue.GetConsumingEnumerable()</code> into that <code>ForEachAsync</code> helper.</p>
    </div>