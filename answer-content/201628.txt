<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some nitpicks:</p>

<ul>
<li><p>Comments are still confusing/distracting</p></li>
<li><p><code>const_iterator::operator const_iterator()</code> should be moved to <code>iterator</code> instead (it doesn't make sense to convert a <code>const_iterator</code> to a <code>const_iterator</code>). Also, it should pass <code>before_begin</code> to the <code>const_iterator</code> constructor as well.</p></li>
<li><p>Ther return types of <code>iterator::operator-&gt;()</code> should be <code>T*</code> instead of <code>T&amp;</code>.</p></li>
<li><p>Similarly, the return type of <code>const_iterator::operator-&gt;()</code> should be <code>const T*</code>.</p></li>
<li><p>The destructor should be <code>noexcept</code>.</p></li>
<li><p>While technically allowed, it might surprise users that the move assignment operator extends the lifetime of the elements originally contained in <code>*this</code>.</p></li>
<li><p><code>clear()</code> still doesn't update <code>tail</code>.</p></li>
<li><p><code>emplace</code> doesn't update <code>tail</code>.</p></li>
<li><p><code>emplace</code> has no value to return if both <code>if</code> conditions evaluate to <code>false</code>. Maybe throw an error message?</p></li>
<li><p>There's code duplication in <code>push_front</code> and <code>emplace_front</code>. This could be fixed by having <code>push_front</code> call <code>emplace_front</code> internally.</p></li>
<li><p>Inconsistent handling of an empty list in <code>pop_front</code> and <code>pop_back</code>: The former throws an exception, whereas the latter silently does nothing.</p></li>
<li><p>I'm still not sure if <code>SingleLinkedList&lt;T&gt;::operator&lt;&lt;</code> needs to be part of <code>SingleLinkedList</code>. Since different users will have different opinions on the output format, they'll likely will write their own print functions anyways.</p></li>
</ul>
    </div>