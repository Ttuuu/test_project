<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Readability is essential for correct and maintainable programs.</p>

<hr>

<p>For example,</p>

<p><code>traverse.go</code>:</p>

<pre><code>package main

import (
    "fmt"
    "strconv"
)

func main() {
    test := map[string]interface{}{
        "root": map[string]interface{}{
            "inner": []interface{}{
                map[string]string{"name": "obj1"},
                map[string]string{"name": "obj2"},
            },
        },
    }
    fmt.Println(
        TraverseToStr(test, []string{"root", "inner", "0", "name"}),
    )
}

func TraverseToUint64(data interface{}, path []string) (uint64, error) {
    val, err := Traverse(data, path)
    if err != nil {
        return 0, err
    }
    return val.(uint64), nil
}

func TraverseToStr(data interface{}, path []string) (string, error) {
    val, err := Traverse(data, path)
    if err != nil {
        return "", err
    }
    return val.(string), nil
}

func TraverseToMap(data interface{}, path []string) (map[string]interface{}, error) {
    val, err := Traverse(data, path)
    if err != nil {
        return nil, err
    }
    return val.(map[string]interface{}), nil
}

func TraverseToArray(data interface{}, path []string) ([]interface{}, error) {
    val, err := Traverse(data, path)
    if err != nil {
        return nil, err
    }
    return val.([]interface{}), nil
}

func Traverse(data interface{}, path []string) (interface{}, error) {
    var ok bool
    current := data
    for _, p := range path {
        switch current.(type) {
        case map[string]string:
            if current, ok = current.(map[string]string)[p]; !ok {
                return nil, fmt.Errorf("key not found in map: %s", p)
            }
        case map[string]interface{}:
            if current, ok = current.(map[string]interface{})[p]; !ok {
                return nil, fmt.Errorf("key not found in map: %s", p)
            }
        case []interface{}:
            i, err := strconv.ParseInt(p, 10, 64)
            if err != nil {
                return nil, fmt.Errorf("integer required, got: %s", p)
            }
            array := current.([]interface{})
            if i &lt; 0 || i &gt;= int64(len(array)) {
                return nil, fmt.Errorf("index %d out of bounds for %v", i, array)
            }
            current = array[i]
        default:
            return nil, fmt.Errorf("cannot traverse %T\n", current)
        }
    }
    return current, nil
}
</code></pre>

<p>Playground: <a href="https://play.golang.org/p/fMcDZr1AZy_X" rel="nofollow noreferrer">https://play.golang.org/p/fMcDZr1AZy_X</a></p>

<hr>

<p><strong>Commentary:</strong></p>

<p>Readability is essential for correct and maintainable programs.</p>

<hr>

<pre><code>fmt.Println(
    TraverseToStr(test, []string{"root", "inner", "0", "name"}),
)
</code></pre>

<p>The primary line of code should be obvious. The first read through, we focus on the primary line, returning later to read error handling and other secondary details.</p>

<p><code>TraverseToStr</code> is the primary code, fmt.Println is a secondary detail. We highlight the primary code on a separate line.</p>

<hr>

<pre><code>func TraverseToUint64(data interface{}, path []string) (uint64, error) {
    val, err := Traverse(data, path)
    if err != nil {
        return 0, err
    }
    return val.(uint64), nil
}
</code></pre>

<p>In Go, don't ignore errors.</p>

<p>Unnecessary conditional indentation is hard to read. An idiosyncratic coding style is extrememly hard to read. Return immediately on error. <a href="https://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow" rel="nofollow noreferrer">CodeReviewComments: Indent Error Flow</a></p>

<hr>

<pre><code>func TraverseToMap(data interface{}, path []string) (map[string]interface{}, error) {
    val, err := Traverse(data, path)
    if err != nil {
        return map[string]interface{}{}, err
    }
    return val.(map[string]interface{}), nil
}
</code></pre>

<p>Replace <code>make(map[string]interface{})</code>, a built-in function call, with <code>map[string]interface{}{}</code>, a composite literal value. </p>

<pre><code>func TraverseToMap(data interface{}, path []string) (map[string]interface{}, error) {
    val, err := Traverse(data, path)
    if err != nil {
        return nil, err
    }
    return val.(map[string]interface{}), nil
}
</code></pre>

<p>However, on error, return the zero value, <code>nil</code> for a map.</p>

<hr>

<pre><code>i, err := strconv.ParseInt(p, 10, 64)
if err != nil {
    return nil, fmt.Errorf("integer required, got: %s", p)
}
array := current.([]interface{})
if i &lt; 0 || i &gt;= int64(len(array)) {
    return nil, fmt.Errorf("index %d out of bounds for %v", i, array)
}
current = array[i]
</code></pre>

<p>Replace a stream of code with the basic Go error pattern.</p>

<p>Don't overuse the "if expression; simple-statement statement" form. </p>

<hr>

<pre><code>if i &lt; 0 || i &gt;= int64(len(array)) {
    return nil, fmt.Errorf("index %d out of bounds for %v", i, array)
}
</code></pre>

<p>When you see this error message,</p>

<pre><code>invalid operation: i &lt; len(array) (mismatched types int64 and int)
</code></pre>

<p>and this fix,</p>

<pre><code>if int(i) &lt; len(array) {
}
</code></pre>

<p>stop and think. <code>i</code> may be negative. <code>i</code> is <code>int64</code>, <code>int(i)</code> will discard high-order bits when <code>int</code> is implemented as 32-bits.</p>

<hr>

<p><a href="https://golang.org/ref/spec" rel="nofollow noreferrer">The Go Programming Language Specification</a></p>

<p><a href="http://www.gopl.io/" rel="nofollow noreferrer">The Go Programming Language</a></p>

<p>"I though that" is not sufficient justification. Use authoritative sources.</p>

<p>Go is strongly typed. Types <code>interface{}</code>, <code>map[string]string</code>, and map[string]interface{} are distinct and have different memory layouts.</p>

<hr>

<p>When the code is readable, it's possible to read much of the code and prove it correct.</p>

<p>Sometimes it can be hard to establish invariants for maps. "The iteration order over maps is not specified and is not guaranteed to be the same from one iteration to the next." <a href="https://golang.org/ref/spec" rel="nofollow noreferrer">The Go Programming Language Specification</a>. Also, since the <a href="https://golang.org/doc/go1.12" rel="nofollow noreferrer">Go 1.12 release</a>, "fmt: Maps are now printed in key-sorted order to ease testing." Which leads some to believe, incorrectly, that maps are sorted.</p>

<p>For this code, it's important to note that maps are not read iteratively in a for loop in random order. All map accesses are deterministic.</p>
    </div>