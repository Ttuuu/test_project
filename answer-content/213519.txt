<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This algorithm does not sort anything. In fact, it is broken in at least two ways. Let's illustrate that with a simple example:</p>

<pre><code>import operator, itertools
array = list(zip(range(10), itertools.repeat(5), reversed(range(10))))

keys = deque(map(operator.itemgetter, range(3)))
print(chainedSort(array, keys))
print(keys)
</code></pre>

<p>Here we are contructing a list of 3-tuples that are already sorted, and we are asking to sort it according to their first element first, then their second one and then the third one. Since their first element is sorted, the principles behind your algorithm should make it so that the second and third comparison function are never executed (since there is no repeating elements according to the first comparison function). However the results are very deceptive:</p>

<pre><code>[(8, 5, 1), (7, 5, 2), (6, 5, 3), (5, 5, 4), (4, 5, 5), (3, 5, 6), (2, 5, 7), (1, 5, 8), (0, 5, 9), (9, 5, 0)]
deque([])
</code></pre>

<p>Not only is it not sorted in any meaningful way, but the keys have been completely depleted; meaning that all 3 functions have been called. This is something that was meant to be avoided. Also note that the <code>keys</code> passed to this function are modified in-place, which is an unexpected side-effect that should at least be documented, at best avoided. Using variable number of arguments is prefered here to simplify the calling site:</p>

<pre><code>def chained_sort(iterable, *keys):
    if not keys:
        return sorted(iterable)

    keys = deque(keys)
    # rest of the code
</code></pre>

<p>Now about that "sorting" behaviour, I see at least 3 issues:</p>

<ol>
<li>you check for item equality with the next key function instead of the same that you just used to sort; this is not desirable as you are trying to find groups of elements that compare equal according to the actual sort so you can sort them with the following function: you must use the same key function that you used to sort; this is why in my example the result is mostly reversed, the second key function find the whole list equal so your algorithm end up sorting it according to the third key function;</li>
<li>your index management is a mess in <code>checkSort</code> and mainly lead to skipping the last element in your slices;</li>
<li>you call <code>checkSort</code> on sub-lists but apply the resulting slices on the original list, meaning you won't sort sub-lists but random bit of the original list.</li>
</ol>

<p>Fixing the second point is easy enough as you really don't need to special case for <code>i+1</code> before assigning to <code>j</code>. Just use a simpler loop and then find out if the slice <code>[i:j]</code> represents more than one element to add it to <code>slices</code>. A simple substraction tells you how many items are in the slice. Two other points worth noting: you should cache the value of <code>f(lst[i])</code> instead of recomputing it for all elements that compare equal, and you can use a <code>slice</code> object instead of storing these weird tuples:</p>

<pre><code>&gt;&gt;&gt; a = 'just a testing string'
&gt;&gt;&gt; s = slice(7, 14)
&gt;&gt;&gt; a[s]
'testing'
&gt;&gt;&gt; a[7:14]
'testing'
</code></pre>

<p>Also transforming this function into a generator can simplify its writting:</p>

<pre><code>def check_sort(array, cmp_function):
    i, ln = 0, len(array)
    while i &lt; ln-1:
        key = cmp_function(array[i])
        j = i + 1
        while j != ln and key == cmp_function(array[j]):       
            j += 1
        if j - i &gt; 1:  # Keep only slices of more than 1 elements
            yield slice(i, j)
        i = j
</code></pre>

<p>But while loops feels weird so I’d rather write it like:</p>

<pre><code>def check_sort(array, cmp_function):
    i = None
    key = None
    for j, item in enumerate(array):
        if i is None:
            i = j
            key = cmp_function(item)
            continue

        keyed = cmp_function(item)
        if keyed != key:
            if j - i &gt; 1:
                yield slice(i, j)
            i = j
            key = keyed

    if i is not None and i != j:
        # Special case of the last slice as it can't be
        # generated from the loop. Be sure to check that
        # 1) it exists and 2) it is more than 1 element.
        yield slice(i, j + 1)
</code></pre>

<p>But, all in all, we’re still left with 2 issues.</p>

<p>So, what you really need is a way to group elements by the same key you used to sort them. Fortunately, this is exactly what <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> is for. Once your groups are formed, just check their length to know if you must apply the next key function on this very same group or if you are done for this path. The simplest implementation uses recursion:</p>

<pre><code>import itertools


def check_sorted(iterable, key, next_keys=(), reverse=False):
    for _, group in itertools.groupby(iterable, key=key):
        grouped = list(group)
        if len(grouped) &gt; 1:
            yield chained_sort(grouped, *next_keys, reverse=reverse)
        else:
            yield grouped



def chained_sort(iterable, *keys, reverse=False):
    if not keys:
        return sorted(iterable, reverse=reverse)

    keys = iter(keys)
    key = next(keys)
    result = sorted(iterable, key=key, reverse=reverse)
    return list(itertools.chain.from_iterable(check_sorted(result, key, keys, reverse)))
</code></pre>

<p>Since recursion is limited in Python, you’ll have to write a looping version if you plan on supporting more than 500 key functions at once.</p>
    </div>