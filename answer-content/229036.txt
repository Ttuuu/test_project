<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Early returns are OK.</p>

<pre><code>if (args &lt; 4) {
    printf(....);
    return;
}
....
</code></pre>

<p>emphasizes where the business logic is.</p></li>
<li><p>The condition <code>(c = **++argv) != '\n'</code> looks sort of strange. It is indeed possible to embed a newline in an argument, but it doesn't warrant a special case. It is just one way to malform an argument, and there are plenty of them.</p></li>
<li><p><code>c = d;</code> does nothing. The very first statement after <code>goto DOWN1</code> overrides <code>c</code>.</p></li>
<li><p>Avoid <code>goto</code>s. I don't see the compelling reason to have them here. Just move the code under <code>DOWN1</code> label to where it belongs, and see the <code>goto</code>s disappearing. Better yet, factor it out into a function.</p></li>
<li><p>There is no reason to copy the rest of the argument into <code>s</code>. You may directly pass it to <code>atof</code>. I understand the desire to sanitize the argument, but the way you do it is incorrect. It allows multiple dots, and misinterprets some well-formed floats (those with exponents, like <code>1e2</code>). Let <code>atof</code> do its job correctly. Better yet, use <code>strtod</code>, and check where it stopped parsing.</p></li>
<li><p>Avoid globals. The bullet above eliminates <code>s</code>. To eliminate global <code>sign</code>, don't cramp everything to <code>calc</code>. Just compute the number, and push it. Let <code>calc</code> only deal with operators.</p></li>
<li><p>All error messages should go to <code>stderr</code>.</p></li>
</ul>
    </div>