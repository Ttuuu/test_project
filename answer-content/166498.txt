<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are just shuffling and truncating the array, I don't see much point in generating an array of keys, calling a loop with incrementing and a conditional break.  In your function, I recommend just three lines maximum:</p>

<ul>
<li>Check that <code>$list</code> is an array, if not, return an empty array <strong>not the non-array value</strong>.  Returning an empty array means <code>foreach()</code> will not iterate it and not choke on.  A warning message of your choice when <code>$list</code> is not an array would be a good touch, of course.</li>
<li>Shuffle <code>$list</code>.</li>
<li>Truncate <code>$list</code> using <code>array_slice()</code> to its first four elements and return it.</li>
</ul>

<p>Code: (<a href="http://sandbox.onlinephpfunctions.com/code/cf9fc2c58c9207dc73f51e3b113abfe1de983a75" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>function shuffle_assoc($list){ 
  if(!is_array($list)) return []; 
  shuffle($list); 
  return array_slice($list,0,4);
} 

$arr[] = array('img' =&gt; "http://placehold.it/150x150", 'link' =&gt; '#1', 'text1' =&gt; "ONE 1", 'text2' =&gt; 'ONE 2');
$arr[] = array('img' =&gt; "http://placehold.it/200x150", 'link' =&gt; '#2', 'text1' =&gt; "TWO 1", 'text2' =&gt; 'TWO 2');
$arr[] = array('img' =&gt; "http://placehold.it/250x150", 'link' =&gt; '#3', 'text1' =&gt; "THREE 1", 'text2' =&gt; 'THREE 2');
$arr[] = array('img' =&gt; "http://placehold.it/300x150", 'link' =&gt; '#4', 'text1' =&gt; "FOUR 1", 'text2' =&gt; 'FOUR 2');
$arr[] = array('img' =&gt; "http://placehold.it/350x150", 'link' =&gt; '#5', 'text1' =&gt; "FIVE 1", 'text2' =&gt; 'FIVE 2');
$arr[] = array('img' =&gt; "http://placehold.it/400x150", 'link' =&gt; '#6', 'text1' =&gt; "SIX 1", 'text2' =&gt; 'SIX 2');
$arr[] = array('img' =&gt; "http://placehold.it/450x150", 'link' =&gt; '#7', 'text1' =&gt; "SEVEN 1", 'text2' =&gt; 'SEVEN 2');

foreach(shuffle_assoc($arr) as $value){
    echo "&lt;p&gt;&lt;img src=\"{$value['img']}\"&gt;&lt;/p&gt;";
    echo "&lt;p&gt;{$value['link']}&lt;/p&gt;";
    echo "&lt;p&gt;{$value['text1']}&lt;/p&gt;";
    echo "&lt;p&gt;{$value['text2']}&lt;/p&gt;";
    echo '&lt;hr&gt;';
}
</code></pre>

<p>p.s. My preference about outputting variables with strings is to use double quotes and curly braces around variables instead of toggling between strings and variables using concatenation.  If you are going use concatenation to output your data, commas are faster than dots.</p>

<hr>

<p>p.p.s. If you would like to compact your code (at a cost to maintainability), you could eliminate the custom function call and implode the random selections to display.</p>

<p>Code: (<a href="https://3v4l.org/FRTdE" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>foreach (array_rand($arr, 3) as $index) {
    $row = $arr[$index];
    $row['img'] = "&lt;img src=\"{$row['img']}\"&gt;";
    echo '&lt;p&gt;' , implode('&lt;/p&gt;&lt;p&gt;', $row) , '&lt;/p&gt;&lt;hr&gt;';
}
</code></pre>
    </div>