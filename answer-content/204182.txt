<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Consider alternatives to linked lists</h2>

<p>You are wondering whether this is the most efficient way to implement a stack. If you store <code>int</code>s, then the overhead of maintaining a linked list is quite large. Another option would be to keep the integer values in a dynamically allocated array. That way, the only other piece of information you need to store is the size of your stack. The drawback of an array is that if you grow the stack, you have to grow the memory for it, which can be expensive, but if you do this in a smart way the overhead will probably still be less than with linked lists.</p>

<p>You can also go for a hybrid approach: have <code>struct NODE</code> contain a fixed number of <code>int</code>s, say 8 or 16, and only allocate another <code>struct NODE</code> when the previous one is full.</p>

<h2>Don't use all-capital names for types</h2>

<p>All-capital identifiers are normally used for macros. It's always best to follow conventions. When defining a new struct, I recommend this pattern:</p>

<pre><code>typedef struct foo {
    ...
} foo_t;
</code></pre>

<h2>Avoid recursion if it is easy to do so</h2>

<p>Your function <code>display()</code> cleverly uses recursion to display all the elements in the stack. However, without any optimizations enabled, if your stack is very large, this will actually cause a lot of real stack space to be used! With optimization enabled, the compiler will most likely perform a tail call optimization, but in this case you can easily rewrite the function as a loop:</p>

<pre><code>void display(node *head)
{
    for(node *it = head; it; it = it-&gt;next)
        printf("%d\n", it-&gt;data);
}
</code></pre>

<h2>Ensure a pointer is not NULL before dereferencing it</h2>

<p>Your functions <code>pop()</code> and <code>Top()</code> blindly dereference the pointer <code>top</code>. If you would call these functions when the stack is empty, your program will crash.</p>

<h2>Rename the variable <code>top</code></h2>

<p>This variable is effectively a private variable that you shouldn't access directly, only via the stack manipulation functions that you created (<code>push()</code>, <code>pop()</code> and <code>Top()</code>). Already there is the issue that it has the same name as the function <code>Top()</code>, and while C is case-sensitive, this solution is not pretty. Rename the function <code>Top()</code> to <code>top()</code>, so it matches the other functions, and rename the pointer <code>top</code> to something like <code>stack_top</code> or <code>top_</code>.</p>
    </div>