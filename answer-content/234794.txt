<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's too much code here to give it all a thorough review; I recommend using a profiler to identify the function that's the performance bottleneck and posting another question about that specific function.</p>

<p>I will give a review of the first 100 lines, though, just to hopefully get you started on breaking some bad habits.</p>

<ol>
<li><p>Group your imports at the top of the script, and have one import statement per module.  It looks like this script is assembled by copying and pasting different found fragments, each with their own dependencies; either separate the script into independent modules or collect all those dependencies in one place.  Attempt to import only the members of each module that you need.</p></li>
<li><p>Use an arg parsing library (e.g. <code>argparse</code>) instead of <code>if flag in sys.argv</code>.  It'll make your code more readable and it will make it easier to add new arguments without messing up the parsing of your existing arguments.</p></li>
<li><p>Add linebreaks between distinct blocks of code, <strong>especially</strong> around function and class definitions.</p></li>
<li><p>The advice about not doing your own argument parsing goes quadruple for defining your own functions.  Instead of:</p></li>
</ol>

<pre><code>    def print(*msg, **kwargs):
        if "sep" in list(kwargs):
            sep = str(kwargs["sep"])
        else:
            sep = " "
        if "file" in list(kwargs):
            if kwargs["file"] == sys.stderr:
                logger.warn(sep.join(msg))
            else:
                logger.info(sep.join(msg))
        else:
            logger.info(sep.join(msg))
</code></pre>

<p>do:</p>

<pre><code>    def print(*msg, sep=" ", file=None):
        if file == sys.stderr:
            logger.warn(sep.join(msg))
        else:
            logger.info(sep.join(msg))
</code></pre>

<p>There are entirely better ways to write this type of function IMO, but the above edit preserves everything about how it functions while dispensing with the manual <code>**kwargs</code> parsing.</p>

<ol start="5">
<li>DRY (Don't Repeat Yourself).  Instead of:</li>
</ol>

<pre><code>if os.path.isfile(path):
    try:
        settings = eval(open(path).read())
    except:
        print('DEBUG: error while reading settings reseting the settings...', flush=True,file=sys.stderr)
        with open(path, 'w+') as fh:
            fh.write("{'font': 'Arial', 'size': 12, 'color': 'black', 'bg': 'white', 'text': 'normal'}")
            settings={'font': 'Arial', 'size': 12, 'color': 'black', 'bg': 'white', 'text': 'normal'}
        print('done!')
else:
    with open(path, 'w+') as fh:
        fh.write("{'font': 'Arial', 'size': 12, 'color': 'black', 'bg': 'white'}, 'text': 'normal'")
        settings={'font': 'Arial', 'size': 12, 'color': 'black', 'bg': 'white', 'text': 'normal'}
</code></pre>

<p>you can do something like:</p>

<pre><code>def write_default_settings(path: str) -&gt; Dict[str, Union[str, int]]:
    settings = settings={'font': 'Arial', 'size': 12, 'color': 'black', 'bg': 'white', 'text': 'normal'}
    with open(path, 'w+') as fh:
        fh.write(str(settings))
    return settings

if os.path.isfile(path):
    try:
        settings = eval(open(path).read())
    except:
        print('DEBUG: error while reading settings reseting the settings...',  file=sys.stderr)
        settings = write_default_settings(path)
        print('done!')
else:
    settings = write_default_settings(path)
</code></pre>

<p>(I'm not sure if this logic is even correct, just observing that there's a lot of unnecessary copying and pasting going on.)</p>

<ol start="6">
<li>Avoid using globals if possible.  Here's how I'd write the <code>update_settings</code> interface (with strong typing):</li>
</ol>

<pre><code>from typing import TypedDict

class Settings(TypedDict):
    font: str
    size: int
    color: str
    bg: str
    text: str

def update_settings(settings: Settings, path: str, font: str, size: int) -&gt; None:
    """Update the font in the settings and write the new settings to the given path."""
    settings['size'] = size
    settings['font'] = font
    with open(path, 'w+') as fh:
        fh.write(str(settings))
</code></pre>

<ol start="7">
<li>I'm going to ignore my own advice about globals and arg parsing and just fix this code as-is, because it's silly:</li>
</ol>

<pre><code>if "-debug" in sys.argv:
    debug = True

try:
    if debug == True:
        DEBUG = True
    else:
        pass
except:
    DEBUG=False
</code></pre>

<p>Almost all of this code is pointless.  You're creating a new variable only to assign its value to another variable, you have a <code>try</code>/<code>except</code> around code that can't possible raise, and you have an <code>else</code> that just <code>pass</code>es.  This entire block can be much more simply and clearly written as a single line:</p>

<pre><code>DEBUG = ("-debug" in sys.argv)
</code></pre>

<ol start="8">
<li>Again, ignoring my advice about globals because maybe in this case it's easier to just make <code>DEBUG</code> a global than to keep track of it everyplace that you might need debug traces, but get in the habit of returning early when something is a no-op, and not re-implementing the same code in multiple places and in different ways:</li>
</ol>

<pre><code>def print_debug(*msg):
    global DEBUG
    new = ''
    for i in msg:
        new += str(i)
    msg = new
    if DEBUG == True:
        print('DEBUG:', flush=True)
        print(msg,file=sys.stderr,flush=True)
</code></pre>

<p>should be:</p>

<pre><code>def print_debug(*msg):
    global DEBUG
    if not DEBUG:
        return
    print('DEBUG:', file=sys.stderr)
    print(*msg, file=sys.stderr, sep="")
</code></pre>

<p>Your <code>print</code> function already knows how to <code>join</code> the <code>*msg</code> arg list, so don't re-implement the join in the caller as a <code>for</code> loop; just pass it on through.  Since the function should do nothing when <code>DEBUG</code> is false, just check that immediately and return if you know there's nothing to do.</p>

<p>The <code>flush</code> arg you keep passing to your <code>print</code> function does nothing, so I've removed it.  (Another drawback of the <code>*kwargs</code> syntax, since any keyword is accepted you can make coding errors like this and nothing will happen at runtime to let you know what you did wrong.)</p>
    </div>