<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In C++ <code>&amp;</code>/<code>*</code> belongs with type. E.g. <code>void swapCard(Card&amp; a, Card&amp; b);</code></p>

<hr>

<p>The CTOR member init list becomes easier to read (IMO) when formatted like this:</p>

<pre><code>Deck() 
    : m_cardIndex {0}
    , m_playerHand {}
    , m_dealerHand {}
</code></pre>

<hr>

<p>You can and should use <code>enum class</code> over the "normal" one.<br>
(Taken from <a href="https://stackoverflow.com/questions/18335861/why-is-enum-class-preferred-over-plain-enum">here</a>):</p>

<blockquote>
  <p><strong>What is the difference between two?</strong></p>
  
  <ul>
  <li><p>enum classes - enumerator names are local to the enum and their values do not implicitly convert to other types (like another enum or int)</p></li>
  <li><p>Plain enums - where enumerator names are in the same scope as the enum and their values implicitly convert to integers and other types</p></li>
  </ul>
  
  <p>enum classes should be preferred because they cause fewer surprises that could potentially lead to bugs.</p>
</blockquote>

<hr>

<p>You're already wrapping your random number generation in a separate namespace so why not your own classes in general?<br>
E.g.:</p>

<pre><code>namespace ConsoleBlackjack
{

class Card
{
[...]

} // namespace ConsoleBlackjack
</code></pre>

<hr>

<p>Subjective but <code>iii</code>/<code>jjj</code> seem unusual for a loop variable. Any specific reason for doing it this way?</p>

<hr>

<p>Perhaps you could make use of <a href="https://en.cppreference.com/w/cpp/algorithm/random_shuffle" rel="nofollow noreferrer">std::shuffle</a> instead of having to roll your own.</p>

<hr>

<p>It would be good to get rid of your magic numbers (e.g. 5, 13, 17, 21, 52, 51 etc.). Instead turn them into named constants.<br>
<code>CS_MAX</code> and <code>CR_MAX</code> should IMO also be turned into separate named constants instead of riding with the enums. </p>

<hr>

<p>Use compiler warnings. I'm not sure which compiler you use but you should always enable and try to fix the compiler warnings.
The way you enable them differs by compiler. It's best to look this up based on your compiler.</p>

<hr>

<p>You're missing a <code>default</code> statement in your <code>switch</code>es. This is a good reason to use compiler warnings. In this case you didn't miss any fields but it still complains because you put constants in there that should be separate (see above).</p>

<hr>

<p>You should declare the RNG parts <code>static</code> as they are expensive. Have a look at <a href="https://codereview.stackexchange.com/questions/213842/rock-paper-scissors-engine">this excellent code</a> to see how it can be done (specifically the <code>RockPaperScissors RockPaperScissors::random()</code> part).</p>
    </div>