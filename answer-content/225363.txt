<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you will quickly realize, a lot of Project Euler problems involve prime numbers. It is therefore a good idea to write a good prime generating function early on. I usually use a simple <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a>. With that function it is easy to write a function that gets the prime factorization of a number (something you will also need again). After you got that, just use the built-in <code>max</code>.</p>

<pre><code>from math import sqrt
from itertools import takewhile

def prime_sieve(limit):
    prime = [True] * limit
    prime[0] = prime[1] = False

    for i, is_prime in enumerate(prime):
        if is_prime:
            yield i
            for n in range(i * i, limit, i):
                prime[n] = False

def prime_factors(n, primes=None):
    limit = int(sqrt(n)) + 1
    if primes is None:
        primes = prime_sieve(limit)
    else:
        primes = takewhile(lambda p: p &lt; limit, primes)
    for p in primes:
        while n % p == 0:
            yield p
            n //= p
    if n &gt; 1:  # n is prime
        yield n

if __name__ == "__main__":
    print(13195, max(prime_factors(13195)))
    print(600851475143, max(prime_factors(600851475143)))
</code></pre>
    </div>