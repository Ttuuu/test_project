<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Thread safety</h2>

<p>I've not tested this, but it looks solid enough, since the only non-trivial logic is held in <code>lock</code> statements. Encapsulation is accordingly good.</p>

<p>Depending on the load, and if performance is critical, some reader/writer locking might help to ease contention (e.g. if the lock object already exists, you don't need to write-lock the dictionary to retrieve it, and if the count is non-zero when you release the lock, you don't need to write-lock to remove it), but it will dramatically increase the complexity.</p>

<h2>Naming API</h2>

<p><code>Lock</code> isn't a great name: it doesn't lock anything, it just gives you a handle to a <code>LockObject</code>, which you happen to have to release. <code>Unlock</code> similarly. Personally I avoid split prepositions</p>

<p><code>Locked</code> isn't a great method name either: <code>Locked</code> suggests a state, not an operation. I'd rather call these <code>RunLocked</code>, or <code>RunExclusive</code> or something.</p>

<hr>

<p>I don't like this:</p>

<pre><code>return action == null ? default( TResult ) : action();
</code></pre>

<p>It means that if <code>action == null</code>, then the system goes to all that effort just to return a meaningful-but-made-up value. What use case could this have? This may end up obscuring a bug later on, when something which <em>shouldn't</em> be <code>null</code> ends up being <code>null</code>, and this code covers up the fact by returning <code>default(TResult)</code>. In the very least this behaviour should be clearly documented, but I'd much rather it just throw an <code>ArgumentException</code> with a helpful error message.</p>

<p>The same goes for <code>action?.Invoke();</code> in the other overload.</p>

<hr>

<p>As always, I'll suggest inline-documentation (<code>///</code>) on the type and public members: it is little (well spent) effort; makes it so much easier to exploit the API without having to leave the IDE; and improves maintainability, as anyone working on the code can see inline what it is meant to be doing and avoid breaking that contract.</p>

<hr>

<p>Why is this <code>static</code>? I'd much sooner make this non-static, and provide a static instance if that is a meaningful concept. That way, if you need to lock on the same type for different purposes then you can. Making this static needlessly restricts the applicable use-cases.</p>

<h2>Dodgy <code>try...finally</code></h2>

<p>The <code>try...finally</code> constructs in the <code>Locked</code> methods are a bit dodgy... <code>Unlock</code> will throw if <code>lockObject</code> is <code>null</code>, which means you should be entering the <code>try</code> knowing that it is not <code>null</code>. The quick-and-easy solution is to move the call to <code>Lock</code> out of the <code>try</code>. If <code>Lock</code> can crash (it's not immediately clear how under normal circumstances it would, thought), then you need to consider that specifically.</p>

<h2>Other misc</h2>

<ul>
<li><p><code>allready</code> is misspelt in one of the comments.</p></li>
<li><p>The <code>lockTable</code> can (and arguably should) be <code>readonly</code>.</p></li>
<li><p>I'd consider replacing the <code>Counter++</code> and <code>Counter--</code> with dedicated <code>Increment()</code>/<code>Decrement()</code> methods in <code>LockObject</code> (making <code>counter</code> private), since any other usage would (presently) make no sense.</p></li>
<li><p>Many people object to the <code>if</code> without <code>{}</code> construct: you only have one usage, so I'd consider putting the braces in.</p></li>
<li><p>Personally I like to make the accessibility of everything explicit (i.e. mark private members and classes <code>private</code>); it just saves the reader having to remember anything, and avoids any confusion when coming from languages with different defaults.</p></li>
</ul>
    </div>