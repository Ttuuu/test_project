<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks quite reasonable, there are only a few minor things that stand out to me.</p>

<p>You're constructing a new array every time a recursive call is made. For example, if the property passed is <code>foo.bar.baz.qux.quuz</code>, you will be constructing the following arrays of properties:</p>

<pre><code>['foo', 'bar', 'baz', 'qux', 'quuz'] // initial call to `set`
['bar', 'baz', 'qux', 'quuz'] // 2nd call (recursive)
['baz', 'qux', 'quuz'] // 3rd call (recursive)
['qux', 'quuz'] // 4th call (recursive)
['quuz'] // 5th call (recursive)
</code></pre>

<p>These are all <em>entirely separate</em> arrays - when you <code>.slice</code>, you create a new array, it's not just a reference to a particular subset of the old array's indicies. Admittedly, it's unreasonable for a property list to be large enough for this to be a problem, but it seems a bit inelegant for space complexity. If you want to keep going the recursive route, you could fix it by creating the array only <em>once</em> in the initial call, then passing along an index to access.</p>

<p>Since the <code>property</code> is actually expected to be an array of propertie<strong>s</strong>, it would make more sense to pluralize the variable name. Also, since you're worried about purity, if you want to make it a bit more functional, rather than <a href="https://eslint.org/docs/rules/no-param-reassign" rel="nofollow noreferrer">reassigning the parameter</a> (which is better avoided when possible), put the result into a <em>different</em> variable, maybe by using a default argument:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function set (object, propertyStr, value, properties = propertyStr.split('.'), i = 0) {
  if (i === properties.length - 1) {
    object[properties[i]] = value;
  } else {
    set(object[properties[i]], '', value, properties, i + 1);
  }
}

const object = {
  position: {
    x: 5
  }
};
set(object, 'position.x', 1);
console.log(object);</code></pre>
</div>
</div>


<p>But note that the function is still <em>fundamentally impure</em>, because its purpose is to mutate an argument. (That's not a <em>problem</em> unless you want it to be one, just something to keep in mind when discussing purity)</p>

<p>I think the recursion aspect makes things a bit more confusing than they need to be. I'd prefer to use <code>reduce</code> to iterate over the properties and access the last object, then assign the value to the last property on that last object:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const object = {
  position: {
    nested: {
      x: 5
    }
  }
};


function set(object, propertyStr, value) {
  const properties = propertyStr.split('.');
  const lastProperty = properties.pop();
  const lastObject = properties.reduce((a, prop) =&gt; a[prop], object);
  lastObject[lastProperty] = value;
}

set(object, 'position.nested.x', 'with pop');
console.log(object);


// If you want to avoid the .pop mutation, then:
function setNoPop(object, propertyStr, value) {
  const properties = propertyStr.split('.');
  const lastObject = properties.slice(0, properties.length - 1)
    .reduce((a, prop) =&gt; a[prop], object);
  lastObject[properties[properties.length - 1]] = value;
}

setNoPop(object, 'position.nested.x', 'no pop');
console.log(object);</code></pre>
</div>
</div>


<p>The code will currently throw an error if an intermediate property doesn't exist or, in strict mode, is not an object. If you want an error to be thrown in this situation, that's OK, but you might prefer for the function to return a boolean indicating success or failure.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const object = {
  position: {
    nested: {
      x: 5
    }
  }
};

const isObj = param =&gt; typeof param === 'object' &amp;&amp; param !== null;
function set(object, propertyStr, value) {
  const properties = propertyStr.split('.');
  const lastProperty = properties.pop();
  const lastObject = properties.reduce((a, prop) =&gt; isObj(a) ? a[prop] : null, object);
  if (isObj(lastObject)) {
    lastObject[lastProperty] = value;
    return true;
  } else {
    return false;
  }
}

const success1 = set(object, 'position.nested.x', 'with pop');
console.log(success1);
const success2 = set(object, 'position.doesNotExist.x', 'with pop');
console.log(success2);</code></pre>
</div>
</div>

    </div>