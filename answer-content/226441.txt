<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are not much to add to what have already been said about coding style and conventions.</p>

<p>A little optimization on the input check could be that if <code>head.next == null</code> then you can leave early as well:</p>

<pre><code>  if (head == null || head.next == null || k &lt;= 0)
    return head;
</code></pre>

<p>Now it's known that there are at least two elements in the list, so calculating the length can be done as:</p>

<pre><code>  ListNode runner = head.next;
  int length = 2;

  while (runner.next != null)
  {
    runner = runner.next;
    length++;
  }
</code></pre>

<p>and with the <code>length</code> - the offset from the current head to the new head can be calculated:</p>

<pre><code>  int offset = length - k % length;
  if (offset == 0)
    return head;
</code></pre>

<p>and if <code>zero</code> it's time to leave without any changes.</p>

<p>Remaining is to iterate down to the new head, but before that, the current tails next it set to point to head, so the list forms a loop:</p>

<pre><code>  runner.next = head;
</code></pre>

<p>Then loop to the new head:</p>

<pre><code>  runner = head;
  while (offset &gt; 1)
  {
    runner = runner.next;
    offset--;
  }
</code></pre>

<p>and at last the new head and tail are established:</p>

<pre><code>  head = runner.next;
  runner.next = null;

  return head;
</code></pre>

<hr>

<p>Put together it could look like:</p>

<pre><code>public ListNode RotateRightHH(ListNode head, int k)
{
  if (head == null || head.next == null || k &lt;= 0)
    return head;

  ListNode runner = head.next;
  int length = 2;

  while (runner.next != null)
  {
    runner = runner.next;
    length++;
  }

  int offset = length - k % length;
  if (offset == 0)
    return head;

  runner.next = head;

  runner = head;
  while (offset &gt; 1)
  {
    runner = runner.next;
    offset--;
  }

  head = runner.next;
  runner.next = null;

  return head;
}
</code></pre>

<p>What is done in the above differs not much from your version, but the use of a lot fewer variables and maybe some clearer names makes it - IMO - a more easy to follow picture of the method.</p>
    </div>