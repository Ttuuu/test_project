<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Defect per line of code.</h1>

<p>Code defects AKA bugs have a strong correlation to the number of lines of code <sup>(<a href="https://www.mayerdan.com/ruby/2012/11/11/bugs-per-line-of-code-ratio" rel="nofollow noreferrer">*1</a>)</sup>. Across all languages, coding styles, and domains there is a consistent defect rate. The industry average is about 20 per 1000 lines of code.</p>

<p>The metric is simple. </p>

<blockquote>
  <p>"... a count of lines in the text of the program's source code excluding comment lines." <sup>(<a href="https://en.wikipedia.org/wiki/Source_lines_of_code#Measurement_methods" rel="nofollow noreferrer">*2</a>)</sup></p>
</blockquote>

<p>One of the simplest ways to reduce defects is to reduce the number of lines. This dose not mean putting everything in one line is a good idea, nor does it mean that sprawling out what would be a single line, to many lines, does not add to the line count.</p>

<h2>Reducing your code</h2>

<p>So with that in mind your code is a little low density, meaning that there are more lines than are needed to do what you want done.</p>

<p>Reducing your code while still using the same logic yields the following</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const path = 'rootFolder/folder1/exampleFolder1/folder3/folder3/subFolder123/file2.md';

const info = path.split('/').map((name, index, dirs) =&gt; {
    const item = {name};
    if (index &lt; dirs.length - 1) {
        item.url = '';
        for (let i = 0; i &lt;= index; i++) {
            item.url += `/${dirs[i]}`;
        }
    }
    return item;
});

console.log(info);</code></pre>
</div>
</div>


<p>Ignoring the top and bottom lines we now have 10 lines.</p>

<p>This is still a little long as the inner loop is just a <code>Array.join</code> but limited to the current index. </p>

<p>If we look for ways to reduce the size we can see that the need to exclude the <code>URL</code> from the file name is adding complexity. Unless there is a good reason to not have the URL we can just treat all items equally.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const path = 'rootFolder/folder1/exampleFolder1/folder3/folder3/subFolder123/file2.md';

const dirs = path.split('/');
const info = [];
while (dirs.length) { 
    info.unshift({ url : "/" + dirs.join("/"), name : dirs.pop() });
}

console.log(info);</code></pre>
</div>
</div>


<p>We are now down to 5 lines. And personally <code>info</code> can share the declaration with <code>dirs</code></p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const path = 'rootFolder/folder1/exampleFolder1/folder3/folder3/subFolder123/file2.md';

const info = [], dirs = path.split('/');
while (dirs.length) { 
    info.unshift({ url : "/" + dirs.join("/"), name : dirs.pop() });
}

console.log(info);</code></pre>
</div>
</div>


<p>We have reduced the number of lines from 12 to 4, reducing the chance of defect by over half.</p>

<hr>

<p><sup>
- (*1) <a href="https://www.mayerdan.com/ruby/2012/11/11/bugs-per-line-of-code-ratio" rel="nofollow noreferrer">Steve McConnell, Code Complete</a>
</sup></p>

<p><sup>
- (*2) <a href="https://en.wikipedia.org/wiki/Source_lines_of_code#Measurement_methods" rel="nofollow noreferrer">wiki, Source lines of code</a>
</sup></p>
    </div>