<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Gameplay</h2>

<p>So I played the game:</p>

<pre><code>Do you wish to fight a creature?"
                1) Yes
                2) No1

        No items found

    You have come across a DOG

    Do you wish to fight it, this will be a battle to the death and
    your hp is "100".
    1) Yes.
    2) No.
    Enter option: 1

            The enemy hit you for 7 damage

            Your health is now 93

            ... many lines elided ...

            Your level is 1.5
Do you wish to fight a creature?"
                1) Yes
                2) No2

            You gave up. You loose.
</code></pre>

<p>There are some glaring problems here. First, the extra quotation mark. Next,
for some reason you are not printing a newline or a prompt after the Yes/No
menu, so the user's choice is echoed after "No". Third, I don't know what that
"No items found" message is for, but it's not appropriate at that point in the
game. Fourth, all the hit/counter-hit turns are spaced evenly. It would
probably be better if the lines were grouped into paragraphs. Finally, "loose"
means "released" or "not tight". You want to say "You lose" (1 'o') which is
the opposite of "You win".</p>

<h2>Coding Style</h2>

<p>Your coding style is pretty jarring. The official Python coding style guide is
in <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a>, which I recommend you follow slavishly until you develop
strong opinions about a different style.</p>

<h3>Organization</h3>

<p>You have an <code>enemy</code> module, but I don't see a very good reason to keep that
code separate. I suggest you just bundle it into the same file as the rest of
your game source code. Python is not Java, and you don't need one file per
class or anything. Putting related things together is the right thing to do.</p>

<h3>Orthography</h3>

<p>The simple rules for PEP-8 naming:</p>

<ul>
<li><p>Use <code>snake_case</code> names for functions, methods, module, variables, and
attributes.</p></li>
<li><p>Use <code>PascalCase</code> for class names.</p></li>
<li><p>Use <code>ALL_CAPS</code> for module- or class-level "constant" values. (Even though the
standard library uses lower case. Do as they say, not as they do.)</p></li>
</ul>

<h3>Organization</h3>

<p>Use this layout until you have to use a different one, and can justify the
need.</p>

<pre><code>#!/usr/bin/env python
""" Docblock describing the program or module.
"""
import from __future__  # Usually not present

__dundernames__         # Usually not present

import standard libary modules

import 3rd party modules

import project local modules

GLOBAL_CONSTANTS

Global_variables    # Location here is PEP8. Cap is my thing.

class ClassName:
    pass

def some_function():
    pass

def main():
    pass

if __name__ == '__main__':
    main()
</code></pre>

<h2>Design</h2>

<p>You have two classes, but they don't have methods. So I suspect you aren't
comfortable with deep OO designs or anything just yet. That's fine, but I'm
going to pitch my ideas in that direction. As you learn more OO, you'll know
different ways to approach this same problem.</p>

<h3>Create a TextInterface class</h3>

<p>You are sending a lot of messages to the screen. And in those messages, you are
working to try to insert newlines and manage the appearance of the message in
some kind of consistent manner.</p>

<p>Instead of trying to manage this using triple-quoted strings with embedded
newlines, why not create a dedicated class with methods to manage that for you?
Create a TextInterface class with methods that reflect the <em>kind</em> of output you
are sending:</p>

<pre><code>class TextInterface:
    def stat_change(self, msg):
        print(f"\n{msg}")

    def found_item(self, msg):
        print(f"\n{msg}")
</code></pre>

<p>Then you can consistently change the formatting of all messages of a particular
"type" by editing one function. All you have to do is pick the right type for
each message you print.</p>

<h3>Use parameters/return instead of globals</h3>

<p>If you are treating a global variable as read-only, don't access it as a global
(even if it exists at global scope). Instead, pass that value as an argument to
the functions that need it.</p>

<p>Similarly, if you are setting a global variable inside a function, consider if
you could just return the value from the function instead:</p>

<pre><code>def ITEM_CHANCE():
    global ITEM
    item_chance = random.randint(1,1000)
    if item_chance &gt; 1 and item_chance &lt; 80:
        ITEM = Ring
        Player.hp += ITEM.hp_bonus
        print('''
        Your health has increased by 10!''')
        print(f'''
        You found a {ITEM.name}!!!''')
</code></pre>

<p>This could be:</p>

<pre><code>def maybe_drop_item():
    drop_probabilities = (
        (Ring, 80),
        (Sword, 35),
        (Shield, 100),
    )
    drop_items, weights = zip(*drop_probabilities)
    cum_dist = list(itertools.accumulate(weights))

    # Chance of no drop
    if cum_dist[-1] &lt; 1000:
        cum_dist.append(1000)
        drop_items.append(None)

    randval = random.random() * cum_dist[-1]
    item = drop_items[bisect.bisect(cum_dist, randval)]
    return item
</code></pre>

<p>Once you randomly choose an item, you can describe it while using it (I notice
you have the Player as type <code>Enemy</code>, so make this a method on that class):</p>

<pre><code>class Enemy:
    def use_item(self, item):
        if item is None:
            return

        TextInferface.found_item("You found a {item.name}!!!")

        if item.hp_bonus:
            self.hp += item.hp_bonus
            TextInterface.stat_bonus(f"Your health has increased by {item.hp_bonus}!")
        if item.damage_bonus:
            self.damage += item.damage_bonus
            TextInterface.stat_bonus(f"Your damaged has increased by {item.damage_bonus}!")

        if item.shield:
            self.shield += item.shield:
            TextInterface.stat_bonus(f"Enemy damages reduced by {item.shield}!")
</code></pre>

<p>(Note: this last function treats shields as permanent items, while your code
applies them only to the current enemy. If you don't like that change, feel
free to adjust it.)</p>
    </div>