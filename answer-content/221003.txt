<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several things you can do to improve this code.</p>

<p>First of all the code above isn't a valid C++ code. To run it you need to add:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;Windows.h&gt;

int main()
{
    ... // your code posted above
}
</code></pre>

<p>Please next time you ask a question post the full code.</p>

<p>Then your Menu:</p>

<pre><code>std::cout &lt;&lt; "-CONSTRUCTION MENU-" &lt;&lt; std::endl &lt;&lt; std::endl;

std::cout &lt;&lt; "1. Barrack" &lt;&lt; std::endl &lt;&lt; std::endl;

std::cout &lt;&lt; "Build: ";
</code></pre>

<p>Consider writing it like this:</p>

<pre><code>std::cout &lt;&lt; "-CONSTRUCTION MENU-\n\n"
&lt;&lt; "1. Barrack\n\n"
&lt;&lt; "Build: ";
</code></pre>

<ul>
<li><p><code>\n</code> should be used instead of <code>std::endl</code>. The reason is <code>std::endl</code>
not only gives you a new line, it also does an expensive buffer
flushing operation which is rarely necessary.</p></li>
<li><p>No need to call <code>std::cout</code> several times after each other. Statements
can be chained.</p></li>
</ul>

<p>Then your Percentage display:</p>

<pre><code>std::string sentence[10] = { "1%", "2%","3%", "4%", "5%", "6%", "7%", "8%", "9%" };

for (int index = 0; sentence[index] != sentence[9]; index++)
{
    ...// statements inside
}
</code></pre>

<p>Several things are wrong here:</p>

<ul>
<li>You are using a plain C array to hold the sentence variables. This is
very bad because a C array does not know about its size. Instead you
use the magic number '9' to finish iterating over the strings.
Please study the default C++ containers <code>std::array</code> or
<code>std::vector</code>. In this case I would go for array since you don't want
to add more values at run time.</li>
<li>The size is wrong. You declared space for 10 elements but only put
in 9.</li>
<li><code>sentence</code> is a very bad name. You don't store sentences. Consider
using <code>percentages</code> instead.</li>
</ul>

<p>Now we can write this instead:</p>

<pre><code>std::array&lt;std::string, 9&gt; percentages = { "1%", "2%","3%", "4%", "5%", "6%", "7%", "8%", "9%" };

for (const auto&amp; sentence : sentences)
{
    ...// statements inside
}
</code></pre>

<p>So the world is OK now? Not at all. You shouldn't use an array for numbers in the first place. Consider building the numbers in a loop instead:</p>

<pre><code>for (int i = 1; i &lt;= 9; ++i) {
    std::cout &lt;&lt; std::to_string(i) &lt;&lt; '%' &lt;&lt; "\b\b";
    Sleep(150);
}
</code></pre>

<p>I removed the <code>std::flush</code> here since I don't see its purpose.</p>

<p>As a side hint it is a good practice to use <code>++i</code> instead of <code>i++</code>. If you use objects later instead of ints you save an expensive copy.</p>

<p>Now we come to another dark chapter of your snippet. Your program is mixed with non-portable statements:</p>

<pre><code>Sleep(150);
</code></pre>

<p>Consider using std facilities here:</p>

<pre><code>#include &lt;chrono&gt;
#include &lt;thread&gt;

...


std::this_thread::sleep_for(std::chrono::milliseconds(150));
</code></pre>

<p>The big advantage here is that this is portable now.</p>

<p>The next candidate is:</p>

<pre><code>system("pause");
</code></pre>

<p>Since you just want the program to wait with a message at the end you can do this:</p>

<pre><code>std::cout &lt;&lt; "Press any key...";
std::cin.get();
</code></pre>

<p>The last statement we get to is this:</p>

<pre><code>system("cls");
</code></pre>

<p>No easy answer here. The fact is that the standard does not provide a portable solution here. You could wrap the statement in a function and make it portable for different platforms like this:</p>

<pre><code>void clear_screen()
{
#if defined _WIN32
    std::system("cls");
#elif defined __unix__
    std::system("clear");
#elif defined (__APPLE__)
    std::system("clear");
#endif
}
</code></pre>

<p>We should also replace the </p>

<pre><code>#include &lt;windows.h&gt; 
</code></pre>

<p>with </p>

<pre><code>#include &lt;cstdlib&gt;
</code></pre>

<p>So now also on Linux / MAC the clear should work.</p>

<p>As a last word. A function should only do one thing. You should separate the program in well defined parts. Here is my reworked solution with all the improvements already mentioned, dividing the program into parts:</p>

<pre><code>#include &lt;array&gt;
#include &lt;chrono&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;thread&gt;

void clear_screen()
{
#if defined _WIN32
    std::system("cls");
#elif defined (__unix__) 
    std::system("clear");
#elif defined (__APPLE__)
    std::system("clear");
#endif
}

std::string get_user_choice()
{
    std::string choice;
    std::cout &lt;&lt; "-CONSTRUCTION MENU-\n\n"
        &lt;&lt; "1. Barrack\n\n"
        &lt;&lt; "Build: ";
    std::cin &gt;&gt; choice;
    return choice;
}

void print_progress(int start, int end)
{
    for (auto i = start; i &lt;= end; ++i) {
        std::cout &lt;&lt; std::to_string(i) &lt;&lt; '%' &lt;&lt; "\b\b";
        std::this_thread::sleep_for(std::chrono::milliseconds(150));
    }
}

void print_building_completed()
{
    clear_screen();
    std::cout &lt;&lt; "Building done\n";
    std::cout &lt;&lt; "Press any key...";
    std::cin.get();
}

int main()
{
    auto building = get_user_choice();
    if (building == "1" || building == "Barrack" || building == "barrack"){
        print_progress(0, 100);
        print_building_completed();
    }
}
</code></pre>
    </div>