<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In response on my post, this is the updated version. Thanks to Toby Speight, vnp, Mast and Null for their reviews and suggestions.</p>

<p>Changed:</p>

<ul>
<li>Switched to streams</li>
<li>Removed dynamic memory allocation</li>
<li>It should work on really large files</li>
<li>Uses the return value of the function</li>
<li>Have a progress bar if the file size is larger than 5 MB</li>
</ul>

<p>*blank line</p>

<pre><code>/*
 * Encryptor
 * File encryptor/decryptor.
 * Works on any kind of file.
 * Uses XOR encryption supplying a private key on a separate file
 * that very same key file is used for both encrypt and decrypt
 * example:
 * create a file named key.txt and inside of it, write these characters: mZq4t7w!
 * save the file and use it as a key to encrypt and decrypt any file
 *
 * For encryption:
 * Supply the "raw" file to be encrypted, use the key file and name the output file
 *
 * For decryption:
 * Supply the output file (encrypted), use the key file and the output file will be "raw" again.
 */
// Plans for the future:
// 1.- Add a command line option to display outputs
// 2.- Create a file and a header file, include the key string length into it and compare values, to avoid
//      any modification or "hacking"

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;

// function that will encrypt/decrypt the file
// gets 3 args., input filename, key filename and output filename
int Encrypt(const std::string&amp; file_in, const std::string&amp; keyFile_in, const std::string&amp; file_out);

int main(int argc, char** argv)
{
    // if user uses help, indicate the use of the program, exit.
    if(argc == 2)
    {
        if((argv[1][0] == '-') &amp;&amp; (argv[1][1] == 'h'))
        {
            std::cout &lt;&lt; "\nUso: " &lt;&lt; argv[0] &lt;&lt;
                    " \"in file\" \"file with key\" \"out file\"\n" &lt;&lt; std::endl;;
        }
    }
    else if(argc == 4)// user typed 3 arguments, everything ok, do the magic
    {
        std::string input(argv[1]);
        std::string key(argv[2]);
        std::string output(argv[3]);

        return Encrypt(input, key, output);
    }
    else // if there's no arguments or the user typed more than 3 arguments,
         //tell user to use help though -h option, exit.
    {
        std::cout &lt;&lt; "\nExecute with " &lt;&lt; argv[0] &lt;&lt;
                "-h for more information\n" &lt;&lt; std::endl;
    }
    return 0;
}

int Encrypt(const std::string&amp; file_in, const std::string&amp; keyFile_in, const std::string&amp; file_out)
{
    const int FileSizeThreshold = 5 * 1024 * 1024; // initialize to 5 MB
    bool biggerThanThreshold = false;

    // Work on the key file
    std::ifstream keyFile(keyFile_in, std::ios_base::in | std::ios_base::binary);
    if(!keyFile.is_open())
    {
        std::cerr &lt;&lt; "Couldn't open file " &lt;&lt; keyFile_in &lt;&lt; std::endl;
        return -1;
    }

    // get the file size and store it, to use it as string length
    // go to beggining of the file and read its contents into a buffer
    keyFile.seekg(0, std::ios_base::end);
    std::streamsize keyFileSize = keyFile.tellg();
    keyFile.seekg(0, std::ios_base::beg); // go to beggining of file

    std::string keyFileBuffer;
    keyFileBuffer.resize(keyFileSize);
    keyFile.read( (char*)&amp;keyFileBuffer[0], keyFileSize);
    keyFile.close();
    // Done working with tye key file

    // Work on the input file
    std::ifstream inputFile(file_in, std::ios_base::in | std::ios_base::binary);
    if(!inputFile.is_open())
    {
        std::cerr &lt;&lt; "Couldn't open file " &lt;&lt; file_in &lt;&lt; std::endl;
        return -1;
    }

    // get the file size and store it, to use it as limit to read and write the files (input / output)
    inputFile.seekg(0, std::ios_base::end);
    std::streamsize inputFileSize = inputFile.tellg();
    inputFile.seekg(0, std::ios_base::beg); // go to beggining of file

    // if the file is 1 byte in size or is empty, exit
    if(inputFileSize &lt;= 1)
    {
        std::cerr &lt;&lt; "File is empty or the size is really small (not worthy)" &lt;&lt; std:: endl;
        return -2;
    }

    if(inputFileSize &gt; FileSizeThreshold )
    {
        std::cout &lt;&lt; "File size is " &lt;&lt;
            inputFileSize/1024/1000 &lt;&lt; "," &lt;&lt; (inputFileSize/1024)%1000 &lt;&lt; " MB... " &lt;&lt;
            "Activating stream mode." &lt;&lt; std::endl;

        biggerThanThreshold = true;
    }

    // do the XOR encryption
    // for each character in the buffer, XOR it using the key characters
    // use moddulus on the key character array using the key file size to avoid reading outside of array
    // example:
    //      i = 20 keyFileSize = 8 (8 bytes)
    //      i % keyFileSize = 4
    // character in the 5th position of the key array will be use to XOR the buffer character at 21th position
    // write the result directly to the output files

    // Work on the output file at the same time as the input file
    // so we can avoid to allocate memory
    std::ofstream outFile(file_out, std::ios_base::out | std::ios_base::binary);
    if(!outFile.is_open())
    {
        std::cerr &lt;&lt; "Couldn't open file " &lt;&lt; file_out &lt;&lt; std::endl;
        return -1;
    }

    char charBuffer = 0;
    int tick = inputFileSize / 30;

    if(biggerThanThreshold)
    {
        std::cout &lt;&lt; "Progress: ";
    }

    // write directly from the input file, to the output file, without storing any buffer or allocating extra memory
    // if the app fails or crashes, the output file will be incomplete, not a big deal atm
    // it should work with files more than 1 GB
    for(int i = 0; i &lt; inputFileSize; ++i)
    {
        inputFile.get(charBuffer);
        outFile.put(charBuffer ^ keyFileBuffer[i%keyFileSize]);

        // if the file is bigger than the threshold, show some kind of neat progress bar
        if(i % tick == 0 &amp;&amp; biggerThanThreshold)
        {
            std::cout &lt;&lt; "#";
        }
    }

    if(biggerThanThreshold)
    {
        std::cout &lt;&lt; " 100%!!" &lt;&lt; std::endl;
    }

    // Close both files and get out!
    inputFile.close();
    outFile.close();

    std::cout &lt;&lt; "Finished!" &lt;&lt; std::endl;

    return 0;
}
</code></pre>
    </div>