<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CR.  There is a lot of room for improvement with your code.  Let's start with the simple stuff and work our way up.</p>

<p>CR prefers use of braces always with <code>if</code> or <code>for</code> or <code>foreach</code>.</p>

<p>Hungarian Notation is heavily frowned upon, so get rid of names prefaced with <code>m_</code>.</p>

<p>Underscores internal to variable names are also frowned upon, so <code>sleep_time</code> would be better as <code>sleepTime</code> (or better altogether with a different name: see further below).</p>

<p>Names should meaningful and create clarity rather than confusion.  So <code>m_threads</code> isn't the number of threads running, but rather its the number of tasks you will start.  Thus that variable name should have "tasks" in it rather than "threads".</p>

<p>You should place your code into its own class.  For instance, <code>class ThroughputTester</code>.  There would be class level properties or fields named <code>TaskCount</code>, <code>TargetThroughput</code>, and <code>TossesPerSecond</code>.  I would not have these as constant fields, since it makes your code rigid and only applicable to the one set of values.  Rather these could be readonly properties set in the constructor, which allows for experimentation with different sets of values.</p>

<p>You could also have a <code>CreateDefault</code> method to create an instance with the same values as your constants.</p>

<pre><code>public class ThroughputTester
{
    public ThroughputTester(int taskCount, int targetThroughput, int tossesPerSecond)
    {
        TaskCount = taskCount;
        TargetThroughput = targetThroughput;
        TossesPerSecond = tossesPerSecond;
    }

    public int TaskCount { get; }
    public int TargetThroughput { get; }
    public int TossesPerSecond { get; }

    public static ThroughputTester CreateDefault =&gt; new ThroughputTester(100, 2000, 2000);

}
</code></pre>

<p>Your use of <code>Random</code> is fragile and runs into issues, particularly since you have it in a method with a loop.  The better usage would be to define the <code>Random</code> instance at the class level instead of inside a method.</p>

<p><code>sleep_time</code> leaves me wondering what it represents.  Is it seconds or milliseconds?  Can't tell from a vague name like <code>time</code>.  It could be renamed <code>sleepMilliseconds</code>.  Alternatively, you could use the <code>Thread.Sleep(TimeSpan)</code> signature (see <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.sleep?view=netcore-3.1#System_Threading_Thread_Sleep_System_TimeSpan_" rel="nofollow noreferrer">link here</a>) along with the <code>TimeSpan.FromMilliseconds</code> or <code>TimeSpan.FromSeconds</code> methods.</p>

<p>That said, even <code>Thread.Sleep</code> has some negativity associated with it.  You should read this answer for <a href="https://stackoverflow.com/a/8815944/2152078">Why is Thread.Sleep so harmful</a>.</p>
    </div>