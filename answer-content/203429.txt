<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to make the code "easier to read and look neater", the first thing that I would do is to <a href="http://rubberduckvba.com/Indentation" rel="nofollow noreferrer">run it through an indenter</a>. This is currently haphazard at best, and makes it difficult to follow.</p>

<hr>

<p>The second thing I would do for ease of readabilty and maintenance is to extract the top portion of the <code>Sub</code> where you build the <code>Headers</code> array and calculate the column indexes into a function. This <code>Sub</code> is doing 2 things, and everything above <code>'retrieving information using Index Match</code> can be treated as an atomic procedure.</p>

<hr>

<p>I'd replace the string literals <code>""</code> with the constant <code>vbNullString</code> - it's more readable and doesn't require a memory allocation. While you're at it, I'd get rid of all of the other magic numbers that you're using.  For example, <code>FundingSheet.Rows(3)</code> would be much more readable as <code>FundingSheet.Rows(HEADER_ROW)</code>.</p>

<hr>

<p>I'm not sure I understand why you declare <code>AccountNumber As Variant</code>, and then repeatedly cast it to a <code>String</code> with <code>CStr(AccountNumber)</code>. If you're using it as a <code>String</code>, declare it as a <code>String</code>. Declare it as a <code>String</code> and then just cast it once when you assign it:</p>

<pre><code>AccountNumber = CStr(Cell.Value)
</code></pre>

<hr>

<p>Avoid 1 based indexing like <code>Dim Headers(1 To 21, 1 To 2)</code> unless there is a good reason to do so. The default array base is zero, you aren't <em>setting</em> the <code>Option Base</code>, and there is nothing in the procedure where having a base of 1 is relevant. All it does is add cognative load when you've scrolled down to the bottom of the <code>Sub</code> and trying to process the indexing.</p>

<hr>

<p>Regarding the comment <code>'B/c there is no naming convention, many different static data names</code>, you should consider passing the sheet name to the <code>Sub</code> as a parameter instead of hard coding it (presumably in a copied and pasted version of the procedure).  It isn't clear from your description if the same applies to the hard coded column headers, but those can also be passed as a parameter if they are not fixed (and would be another reason to extract the top portion as a function).</p>

<hr>

<h2>Performance</h2>

<p>This code is slow because you are writing VBA code as if it were intended to be a function on a worksheet. If you need it to function independently (for example, in a UDF), that might be appropriate, but it is never going to be performant. Take a look at the top of the <code>Sub</code>. You're basically trying to build a lookup table, but then promptly discarding (or ignoring) the captured information later in the code and relying on <code>Application.Index</code> and <code>Application.Match</code> to get your column definitions in the correct order. This section (line break added for clarity)...</p>

<blockquote>
<pre><code>For i = LBound(Headers) To UBound(Headers)

    If Headers(x, 2) = "" Then
        x = x + 1
    Else
        Cell.Offset(0, x).Value = Application.Index(FundingSheet.Columns(Headers(x, 2)), _
            Application.Match(CStr(AccountNumber), FundingSheet.Columns(Headers(1, 2)), 0))
        x = x + 1
    End If

    If x = 22 Then Exit For
Next i
</code></pre>
</blockquote>

<p>...is repeating the row lookup <em>for every single column</em>. That is <em>incredibly</em> inefficient. It <em>might</em> make sense if this was a UDF (and would be inefficient as a user function too), because each cell in a column would need to find the appropriate row. It's silly in this context though, because the <code>Application.Match</code> is going to return <strong><em>exactly the same thing</em></strong> for each of the 22 times that you call it.</p>

<p>For each account, you need to do two things; First, find the row that contains the account data, Second, copy the data based on the column lookup. I'd consider using a <code>Scripting.Dictionary</code> for the column lookup - you're doing a fairly simply column mapping between source column and destination column, so once you have the mapping built you can do lookups on <em>that</em> instead of repeatedly using <code>Application.Index</code>. Find the row target row <strong><em>once</em></strong> before you loop through the <code>Headers</code> array, and then just map the columns to the correct destinations. That would be a huge first step in improving the performance.</p>

<hr>

<p>That said...</p>

<p>You're using Excel as if it was database. The <strong><em>real</em></strong> solution would be to use <em>an actual database</em> as a back-end and use Excel to simply present the data. If you can't do that for some logistical reason (IT resistance, for example), then stop treating Excel as a spreadsheet when you <em>retrieve</em> data from it. Open <a href="https://support.microsoft.com/en-us/help/278973/excelado-demonstrates-how-to-use-ado-to-read-and-write-data-in-excel-w" rel="nofollow noreferrer">an ADO connection</a>, and just query for your lookup results. ADO doesn't care about the column order, and you can just request columns by name and write them where they need to go. This is going to be <em>way</em> faster than using the Excel lookups (the driver is optimized for this), and you can request multiple results in one operation.</p>

<p>If Excel is your "database", then take advantage of the database tools that are available.</p>
    </div>