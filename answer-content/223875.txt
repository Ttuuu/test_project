<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Creating an Unique ID Without Loops</h2>

<p>The problem with incrementing the next ID based on the last cell in a column is you will have to sort the data to ensure that it is in ID order.  This really can take away from the user experience.    A better approach would be to use the <code>WorksheetFunction.Max()</code> to find the current max ID.</p>

<h2>"<strong>I am very bad at loops</strong>"</h2>

<p>You should start by watching these videos:</p>

<ul>
<li><p><a href="https://www.youtube.com//watch?v=c8reU-H1PKQ&amp;index=5&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 5 - Selecting Cells (Range, Cells, Activecell, End, Offset)</a></p></li>
<li><p><a href="https://www.youtube.com//watch?v=wGauctajWPQ&amp;index=16&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 15 - Do Until and Do While Loops</a></p></li>
<li><a href="https://www.youtube.com//watch?v=_ZVSV9Y7TGw&amp;index=17&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 15a - Find and FindNext</a></li>
<li><a href="https://www.youtube.com//watch?v=JyWrLH7monI&amp;index=18&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 16 - For Next Loops</a></li>
<li><a href="https://www.youtube.com//watch?v=R2nlDu-2E4o&amp;index=19&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 17 - For Each Loops</a></li>
</ul>

<p>Notice that the first video teaches you how to define ranges.  Well,  If you are having problems with loops in Excel then chances are you are having problems defining the range to loop over.  </p>

<p>The best advice that I can give you when you are having problems with a coding pattern is to practice it.  Printout a worksheet with several different types of loops and every morning choose a couple of the patterns and type them up several times until you can recite them from memory.  Another great way to practice is to start answering questions on Stackoverflow.com.  This will challenge you with unique situations that you would not normally see.  Your answers will get progressively better or time as you respond to the comments from other users.</p>

<h2>Miscellaneous</h2>

<p>TextBox1, TextBox2 TextBox3 ... ugh!!  In the time it takes you to the write comments to describe what each one does, you could have just gave them meaningful names.  I generally preface all my textboxes with <strong>txt</strong> like this txtShipFrom, txtShipTo, txtShipDate but simply using shipFrom, shipTo, shipDate also works.</p>

<p><code>Sheets("Arkiv")</code> is used 6 times.  Using <code>With  Sheets("Arkiv")</code> will not only make you code easier to read, modify, and debug but is also more efficient (the compiler only has to resolve the reference 1 time).</p>

<p>Refactored code:</p>

<pre><code>Sub AddNewShippingRow_Click()
    Dim inputs As Variant
    Dim ID As Long
    Dim nextRow As Range

    ID = getNextShippingID
    Set nextRow = getNextShippingRow

    inputs = Array(ID, shipFrom.Text, shipTo.Text, shipDate.Text, NP.Text, desc.Text, gramEx.Text, tareWeight.Text, Weight.Text, dims.Text)

    nextRow.Resize(UBound(inputs) + 1).Value = inputs
End Sub

Function getNextShippingRow() As Range
    With Sheets("Arkiv")
        Set getNextShippingRow = .Cells(.Rows.Count, 1).End(xlUp).Offset(1)
    End With
End Function

Function getNextShippingID() As Long
    With Sheets("Arkiv")
        getNextShippingID = WorksheetFunction.Max(.Range("A1", .Cells(.Rows.Count, 1).End(xlUp))) + 1
    End With
End Function
</code></pre>

<p>In my refactored code I simplified the main subroutine by using helper functions to perform some of the tasks.  The fewer tasks that a subroutine performs the easier it is to read, modify and debug.  </p>

<p>For instance say that you wanted to change the way you create your ID's because we are using a helper function we can modify and test that function without have to run the larger block of code.</p>

<p>Here I modify and tested 4 different versions <code>getNextShippingID()</code> without having to make any changes to the main routine.  Of course, I would have to change the datatype of the main routines ID variable but that is not to after I completed my testing.</p>

<pre><code>Function getNextShippingID() As Double
    getNextShippingID = CLng(Date) &amp; (Timer * 100)
End Function

Function getNextShippingID() As Double
    Const StartDate As Date = #1/1/2019#
    getNextShippingID = CLng(Date - StartDate) &amp; (Timer * 100)
End Function

Function getNextShippingID() As Double
    getNextShippingID = Format(Now, "ddmmyyhhmmssnn")
End Function

Function getNextShippingID() As String
    Dim s As String
    s = CreateObject("Scriptlet.TypeLib").GUID
    getNextShippingID = Mid(s, 2, Len(s) - 4)
End Function
</code></pre>
    </div>