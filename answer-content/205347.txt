<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is really not that bad. Despite the variable names not being in English, I'm able to get the gist of it. Here are some useful things that I think would improve the situation.</p>

<h1>Avoid Globals</h1>

<p>Your first header is mainly a list of global variables. Globals are difficult to work with because they can be changed by any code anywhere in your app. So when a problem occurs with a global, good luck tracking down where it occurs since it could be anywhere. If you put your global data into classes, you'll have minimized the number of places where it could be going wrong.</p>

<p>Let's start with the textures you use. Textures make up a large part of most video games. It would probably make sense to have an object which handles textures. It could load them from disk, give them to code to use, cache recently used textures, etc. I would probably make either a <code>TextureFactory</code> class, or a <code>TextureCache</code> class to handle these sorts of tasks. It might not be necessary here since you only have about 5-10 textures, but any more than that and you'll probably want something to organize them.</p>

<h1>Use <code>struct</code> or <code>class</code> to Combine Data</h1>

<p>Notice how after the texture declarations, you have corresponding declarations of rectangles. This is a clue that you should be creating either a <code>struct</code> or <code>class</code> that holds both the texture and its rectangle.</p>

<p>Next you declare a bunch of variables for things like the number of lives, current level, the number of blocks on screen, spacing of various elements. These fall into 2 broad categories - game state, and rendering constants. I would make 2 classes for these: <code>GameState</code> which holds things like the number of lives left and the current level, and <code>GameRenderer</code> which holds data related to rendering. I notice there's an <code>SDL_Renderer</code>, so you should probably also put that into your <code>GameRenderer</code> class.</p>

<p>You make a lot of use of <code>std::pair</code> for storing coordinates and impact counts. <code>std::pair</code> is a difficult class to deal with because it's so non-specific. Its data members, <code>first</code> and <code>second</code> are meaningless. You should make a <code>Point</code> or <code>Vector</code> <code>class</code> to hold coordinates. You should then make a <code>Block</code> <code>struct</code> or <code>class</code> to hold a <code>Point</code> or <code>Vector</code> and an impact count. Then your <code>koordinateBlockovaVektor</code> vector would be declared as just:</p>

<pre><code>std::vector&lt;Block&gt; koordinateBlokovaVektor;
</code></pre>

<h1>Naming</h1>

<p>I  don't speak your language, but I assume <code>Logika</code> is <code>Logic</code> and <code>Crtaj</code> is <code>Draw</code>? If so, I would recommend using more descriptive names, like <code>UpdateGameState()</code> and <code>RenderGame()</code> (or whatever that would be in your native tongue).</p>

<p>I would also avoid putting the type name into the variable's name. So a <code>std::vector</code> doesn't need to have <code>Vektor</code> in it's name. If you had a <code>class</code> or <code>struct</code> for your textures, you could simply call the rectangle the <code>bounds</code> or <code>frame</code> or something along those lines. Something like this:</p>

<pre><code>struct GameTexture {
    SDL_Texture* image;
    SDL_Rect bounds;
};
</code></pre>

<p>Then to access one, you could do:</p>

<pre><code>GameTexture pozadina;
// ... fill it out ...
SDL_RenderCopy(renderer, pozadina.image, NULL, &amp;pozadina.bounds);
</code></pre>
    </div>