<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your test <code>numbers.length == 0 || numbers.length == 1</code> could be simplified as <code>numbers.length &lt; 2</code>.</p>

<p>Multiple <code>return</code> statement should be avoided.  You could set <code>indexForUniqueElements</code> to <code>numbers.length</code> when less than 2, and use just one return statement at the end.</p>

<p>You are reading each element from the <code>numbers[index]</code> array multiple times.  Once in the duplicate test as the lhs, once in the duplicate test as the rhs, and possibly a third time to copy it into its new location.   You could read the number once, into a local variable, and then reference the local variable.  An enhanced <code>for</code> loop will do this for you, but you'd lose the index, which you use for testing against <code>numbers[index+1]</code>.  You could instead test against the last value you read (cached in a local variable), and then you'd be free to use the enhanced for loop.  The only difficultly is how to handle the first value, which has no previous.  This can be trivially handled by using the first value in the array as the last value, and starting the fill-in index at 1.</p>

<p>Here is a simple implementation of the above.  Each element of the <code>numbers[]</code> array is read from only once, apart from the first element (which is read twice):</p>

<pre><code>public int removeDuplicates(int[] numbers) {
     int idx = 0;
     if (numbers.length &gt; 0) {
         int last = numbers[idx++];
         for (int number : numbers)
             if (number != last)
                 last = numbers[idx++] = number;
     }
     return idx;
 }
</code></pre>
    </div>