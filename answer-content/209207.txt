<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Indenting</h1>

<p>I don't like this style</p>

<pre><code>def get_digits_minimum_length(filenames: List[str], file_prefix: str,
                              file_type: str, start_number: int) -&gt; int:
</code></pre>

<p>I'm more a fan of</p>

<pre><code>def get_digits_minimum_length(
    filenames: List[str], file_prefix: str, file_type: str, start_number: int
) -&gt; int:
</code></pre>

<p>...</p>

<p>or</p>

<pre><code>def get_digits_minimum_length(
    filenames: List[str], 
    file_prefix: str, 
    file_type: str, 
    start_number: int,
) -&gt; int:
    ...
</code></pre>

<p>But since recently, I use a code formatter (<a href="https://github.com/ambv/black" rel="nofollow noreferrer">black</a>) to do this</p>

<h1><code>Pathlib.Path</code></h1>

<p>Using <code>pathlib.Path</code> instead of <code>os</code> can make things a lot easier. It has builtin globbing, and you can easily generate the new name</p>

<h1>separate the program</h1>

<p>All in all this is a rather simple program:</p>

<ol>
<li>Find the files who are structured <code>"{prefix}{number}.{suffix}"</code></li>
<li>Extract <code>number</code></li>
<li>Generate a new number</li>
<li>Generate the new name</li>
<li>Move the files</li>
</ol>

<p>Your program makes a few strange splits between the functions.</p>

<p>If you need to do this via a temporary directory, use <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory" rel="nofollow noreferrer"><code>tempfile.TemporaryDirectory</code></a> as a context manager</p>

<p>All in all this can be done quite simple</p>

<pre><code>def find_files(directory, prefix, suffix):
    """find the files in `directory` wich start with `prefix` and end with `.suffix`"""
    directory = Path(directory)

    filename_pattern = re.compile(
        re.escape(prefix) + "(?P&lt;number&gt;[0-9]+)\." + re.escape(suffix), re.I
    )
    for file in directory.glob(f"{prefix}*.{suffix}"):
        match = filename_pattern.search(file.name)
        if not match:
            continue
        yield int(match.group("number")), file
</code></pre>

<p>This generator yield the number (as <code>int</code>) and the filename (as <code>Path</code>) of all the files that comply with the prefix and suffix</p>

<pre><code>def rename_files(files, prefix, suffix, start_num=0):
    """Generates the new filename"""
    files = sorted(files)
    last_file_num = files[-1][0]
    max_num = max(last_file_num, start_num + len(files))
    num_length = len(str(max_num))
    for new_number, (_, file) in enumerate((files), start_num):
        new_name = f"{prefix}{str(new_number).zfill(num_length)}.{suffix}"
        yield file, new_name
</code></pre>

<p>This one yields the file and the new proposed name. To calculate how long the number needs to be, it takes into account the lingest existing number and the starting number + amount of files to rename.</p>

<p>It also keeps the existing order, ordered via the number, not lexigraphically, so <code>spam1.txt</code> comes before <code>spam02.txt</code></p>

<p>the method to move the files takes this generator as input, and does the moving on the fly:</p>

<pre><code>def move(renames, practice=True):
    for file, new_name in renames:
        new_file = file.with_name(new_name)
        print(f"renaming {file.name} to {new_name}")
        if not practice:
            os.rename(file, new_file)
</code></pre>

<p>This was tested with </p>

<pre><code>if __name__ == "__main__":
    prefix = "spam"
    suffix = "txt"
    files = find_files(DATA_DIR, prefix, suffix)
    renames = rename_files(files, prefix, suffix)
    move(renames, practice=False)
</code></pre>

<blockquote>
<pre><code>renaming spam00.txt to spam0000.txt
renaming spam002.txt to spam0001.txt
renaming spam004.txt to spam0002.txt
renaming spam005.txt to spam0003.txt
renaming spam7.txt to spam0004.txt
renaming spam009.txt to spam0005.txt
renaming spam037.txt to spam0006.txt
renaming spam045.txt to spam0007.txt
renaming spam089.txt to spam0008.txt
renaming spam2000.txt to spam0009.txt
</code></pre>
</blockquote>

<p>I tested this with:</p>

<pre><code>DATA_DIR = Path("data/test")
testfiles = """eggs010.txt
spam00.txt
spam002.txt
spam004.txt
spam005.txt
spam5.dat
spam7.txt
spam009.txt
spam037.txt
spam045.txt
spam089.txt
spam2000.txt"""

for filename in testfiles.split("\n"):
    file = DATA_DIR / filename.strip()
    file.touch()
</code></pre>
    </div>