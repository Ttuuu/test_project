<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>groupby</code></h1>

<p>When iterating over the values in a column, it is bad practice to hardcode the values (<code>for pivot in [1, 2, 3]</code>). A better way would have been <code>for pivot in df["dof"].unique()</code>, but the best way is with <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html" rel="nofollow noreferrer"><code>DataFrame.groupby</code></a> </p>

<p>To see what happens in the <code>groupby</code>, I try it first with an iteration, and printing the groups</p>

<pre><code>for pivot, data in df.groupby("dof"):
    print(pivot)
    print(data)
</code></pre>

<p>Then I get to work with one of the <code>data</code> to mold it the way I want. In this case, we don't need the column <code>dof</code> any more, since we have it in the <code>pivot</code> variable, and we rename the columns using <code>rename</code></p>

<pre><code>for pivot, data in df.groupby("dof"):
    print(pivot)
    print(
        data.drop(columns="dof").rename(
            mapper={
                column_name: f"{column_name}{pivot}"
                for column_name in data.columns
            },
            axis=1,
        )
    )
</code></pre>

<p>Then we can use <code>pd.concat</code> to stitch it together</p>

<pre><code>pd.concat(
    [
        data.drop(columns="dof").rename(
            mapper={
                column_name: f"{column_name}{pivot}"
                for column_name in data.columns
            },
            axis=1,
        )
        for pivot, data in df.groupby("dof")
    ],
    axis=1,
)
</code></pre>

<h1>unstack</h1>

<p>An alternative is with <code>unstack</code>:</p>

<p>From you description, <code>dof</code> is part of the index, so add it there. Then you can use <code>DataFrame.unstack</code> to bring it to the columns.</p>

<blockquote>
<pre><code>df2 = df.set_index("dof", append=True).unstack("dof")
</code></pre>
</blockquote>

<pre><code>        foo foo foo bar bar bar qux qux qux
dof     1   2   3   1   2   3   1   2   3
idxA idxB                                   
100 101 10  11  12  30  31  32  50  51  52
100 102 13  14  15  33  34  35  53  54  55
200 101 16  17  18  36  37  38  56  57  58
200 102 19  20  21  39  40  41  59  60  61
</code></pre>

<p>If you are okay with a <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html" rel="nofollow noreferrer"><code>MultiIndex</code></a>, which will be handier then the concatenated strings in most cases, you can leave it at that. If you want it in the form you have it, you can do <code>df2.columns = df2.columns.map(lambda x: f"{x[0]}{x[1]}")</code>. </p>
    </div>