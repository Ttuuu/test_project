<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reusable</h2>
<p>One of programmings main attributes it the ability to reuse code. You should always write code with this in mind</p>
<p>When you create code think about how you may need to do the same thing over and over. Write a function to do that task in such a way so that you can add it to a library. This will reduce the amount of work needed to complete the current project and future projects</p>
<h2>User friendly</h2>
<p>You can be the greatest programming in the world but if you lack good UI design skills your code will never be great</p>
<p>It is more important to concentrate on the front end than how you do the back-end because users, the ones that ultimately pay for every line of code, never see a line of it</p>
<p>This does not mean you can write bad code. You want reduce your work, and you get that by writing good code.</p>
<p>Some good UI tips</p>
<ul>
<li>Reduce the amount of work a user must do to use your app is one of the best ways to create a good user interface.</li>
<li>Be entertaining, animations and additional quirks go a long way to providing a good user experience. BUT never let the entertainment get in the way of usability.</li>
<li>Provide feedback. Use tooltips, cursors... etc to help the user use the interface. Again the feedback should never get in the way of the interfaces basic use.</li>
</ul>
<h2>Javascript</h2>
<ul>
<li>Use direct object reference to access elements by their id</li>
<li>Create utility functions to reduce code size and noise</li>
<li>Use up to date JS syntax to reduce code size and keep your skills relevant</li>
<li>In many cases <code>while</code> loops suit the algorithm better than <code>for</code> loops</li>
<li><code>splice</code> will return an array of items spliced. You can use bracket notation to get the spliced item</li>
</ul>
<h2>DOM</h2>
<ul>
<li>Use CSS to hold page styles, don't embed style into the HTML</li>
<li>If you are not relying on a server to process input you can avoid the <code>&lt;form&gt;</code> and associated overhead</li>
<li>The input element will not always get focus on load. You can force focus in JS</li>
<li>Don't add javascript code inline</li>
</ul>
<h2>Example</h2>
<ul>
<li>Uses utilities that I wrote for other apps.</li>
<li>UI friendly
<ul>
<li>Focuses on text input so user need not click it to add content</li>
<li>Scrambles on enter and button click</li>
<li>Inserts new scrambled text at the top of the output so user need not scroll to see new result</li>
<li>Reduce spacing between lines</li>
<li>Does not scramble empty like strings</li>
<li>Adds titles for tool tips to provide user feed back</li>
<li>Adds placeholder to input for more information for the user</li>
<li>Adds simple animation to focus users eye on new result and provide a little entertainment (I bet you use this version a few more second than average app doing the same basic functionality)</li>
<li>Can be used without having to touch the mouse.</li>
</ul>
</li>
<li>Uses CSS to set element styles</li>
<li>Uses direct object reference to access elements (rather than <code>getElementById</code>)</li>
</ul>
<p>I also slightly changed how the phrase is scrambled. It first scrambles the words and then scrambles the characters in each word. The shuffle (JS utility) function takes a second argument that modifies each item as they are shuffled</p>
<p>With all the extras and excluding the utility functions the code below is only a little longer then your original function and took me very little time to write.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// DOM utility functions
const tag = (type, props = {}) =&gt; Object.assign(document.createElement(type), props);
const insert = (el, ...sibs) =&gt; sibs.reduce(
    (el, sib) =&gt; (el.insertBefore(sib, el.children[0] ? el.children[0] : null), el), el
);
const addEvent = (el, type, func, opts = {}) =&gt; (el.addEventListener(type, func, opts), el);


// JS utility functions
const shuffle = (a, mod = i =&gt; i, l = a.length) =&gt; {
    while (l) { a.push(mod(a.splice(Math.random() * (l--) | 0, 1)[0])) } 
    return a;
};


// Application code
const SCRAMBLE_FRAMES = 40; // in frames 40/60 is 2/3rds of a second

addEvent(scrambleBut, "click", scramble);
addEvent(phraseEl, "keyup", e =&gt; e.code === "Enter" &amp;&amp; scramble());
phraseEl.focus();
const wordShuffle = word =&gt; shuffle([...word]).join("");
const animateShuffle = (el, count = SCRAMBLE_FRAMES) =&gt; {        
    el.textContent = shuffle(el.textContent.split(" "), wordShuffle).join(" ");
    if (count &gt; 0) { requestAnimationFrame(()=&gt; animateShuffle(el, count -1)) } 
}
function scramble() {    
    const phraseText = phraseEl.value.trim();
    if (phraseText) {
        var scrambleRes;
        insert(outputEl, scrambleRes = tag("p", {textContent: phraseText}));
        animateShuffle(scrambleRes);
    }
    phraseEl.focus();
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
    background-color: pink;
    font-family: arial;
}
p {
    margin-block-start: 0.2em;
    margin-block-end: 0.2em;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;h1&gt;Phrase Scrambler&lt;/h1&gt;
&lt;label&gt;Phrase:&lt;/label&gt;
&lt;input type="text" id="phraseEl" placeholder="Enter a phrase" title="Type a phrase, hit enter or click scramble to scramble the phrase"&gt;&lt;br&gt;
&lt;button type="button" id="scrambleBut" title="Click to scramble current phrase"&gt;Scramble&lt;/button&gt;
&lt;div id="outputEl"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>