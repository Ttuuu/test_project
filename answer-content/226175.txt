<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>You biggest problem is encapsulation.<br>
You treat your three different properties as three different data items rather than as a single data item. I feel it would be more logical to combine the data into a single item.</p>

<p>I suppose you did it this way because of the design of the input file. If given the chance I would change the format of this file. Define the properties of each item (start, end, weight) all on the same line. But even if you can't change the format I would still try and encapsulate the data into a single item.</p>

<h2>Error</h2>

<p>If the input file is mis-formed then you probably will not detect it and simply fill the input arrays with garbage values.</p>

<h1>Code Review</h1>

<p>Please no:</p>

<pre><code>#define min(a,b) ((a) &lt; (b) ? (a) : (b))
</code></pre>

<p>There is no reason to use macros (apart from the one thing they are good at which is conditional compilation of code, preferably to take into account different system implementations).</p>

<p>Looks like <code>MAX_VERTEXES</code> and <code>MIN_VERTEXES</code> and <code>MAX_WIGHT</code> should simply be global static state, rather than passed around the application. Note global variables are OK iff they are constant (ie non mutable).</p>

<pre><code>int constexpr MaxVertexes = 1000000;
int constexpr MinVertexes = 2;
int constexpr MaxWeight   = 6500;
</code></pre>

<p>The other thing you should note is that all capitol identifiers are traditionally reserved for macros. Using them as variable names is iffy at best going to cause issues at worst. Please make sure all non macros use standard variable names.</p>

<p>If things are non mutable then mark them with <code>const</code> or <code>constexpr</code> to indicate that they are non mutable. This will make sure the compiler tells you about an error if you accidentally change their value.</p>

<p>I would throw exception if the file name is not passed or the file did not open. Opps having read it threw now I see you do throw on open. I would change the order though so all the throwing is at the top. Then your code is all at the same indent level.</p>

<pre><code>    std::ifstream file;
    if (argc &gt;= 2)
    {
        file.open(argv[1]);
    }
    else
    {
        throw std::exception("No parameter passed");
    }
    std::string line;

    if (file.is_open())
    {
</code></pre>

<p>Your code is of the form:</p>

<pre><code>    if (isGood()) {
         doGoodStuff();
    }
    else {
         throw error;
    }
</code></pre>

<p>Putting all your error tests at the top puts all your explicit checking and error handling at the top.</p>

<pre><code>    // Check pre-conditions.
    if (!isGood()) {
         throw error;
    }

    // All your pre-conditions have been checked.
    doGoodStuff();
</code></pre>

<p>So your code above I would have written like this:</p>

<pre><code>    std::ifstream file;
    if (argc &lt; 2)
    {
        throw std::exception("No parameter passed");
    }

    // Initialize and open in one go.
    std::ifstream file(argv[1]);

    if (!file)   // don't specifically check for a good state
    {            // there are several bad states so check to see if the file
                 // is not bad.
        throw std::exception("Unable to open file");
    }

    // Now spend time reading the file.
</code></pre>

<p>Exceptions. The <code>std::exception</code> is the base class and has several derived types for different situations. In pre C++11 this class did not even take a string in the constructor so you could not use it like this:</p>

<pre><code>std::exception("No parameter passed");
</code></pre>

<p>I would choose the more generic <code>std::runtime_error</code>. You will need to include <code>&lt;stdexcept&gt;</code> to get the definition.</p>

<p>OK this loop is absolutely <strong>not</strong> needed.</p>

<pre><code>        for (int z = 0; z &lt; 4; z++)
</code></pre>

<p>In the code you basically go:</p>

<pre><code>        for (int z = 0; z &lt; 4; z++) {
            if (z == 0) {taskOne();}
            if (z == 1) {taskTwo();}
            if (z == 2) {taskThree();}
            if (z == 3) {taskFour();}
        }
</code></pre>

<p>This whole construct can simply be replaced with:</p>

<pre><code>       taskOne();
       taskTwo();
       taskThree();
       taskFour();
</code></pre>

<p>In the next section you never check that any read operation worked. Any stream operation should be checked to make sure it worked.</p>

<pre><code>        iss &gt;&gt; n;
</code></pre>

<p>Did that actually read the value? Or is <code>n</code> left in its original state (thus causing you to add the last value read repeatedly). If you have a one off error then this kind of thing results in the last value being placed into the data twice (common issue).</p>

<pre><code>                startingOrder.reserve(n);
                for (int a = 0; a &lt; n; a++)
                {
                    int d;
                    iss &gt;&gt; d;
                    startingOrder.push_back(d - 1);
                }
</code></pre>

<p>I would so something more like this:</p>

<pre><code>                startingOrder.reserve(n);
                while(iss &gt;&gt; d) {
                    startingOrder.push_back(d - 1);
                }
                if (startingOrder.size() != n) {
                    throw std::runtime_exception("Malformed input file .... some text");
                }
</code></pre>

<p>Technically you don't even need a loop you can simply use istream iterators to initiate an array. But while learning I would use the loop form and graduate to this form once you have started understanding more of the standard library.</p>

<pre><code>                // How to create an array from stream iterators.
                startingOrder = std::vector&lt;int&gt;(std::istream_iterator&lt;int&gt;{iss},
                                                 std::istream_iterator&lt;int&gt;{});
</code></pre>

<p>Don't see the point in this.</p>

<pre><code>        file.close();
</code></pre>

<p>I would just let the destructor do its job and close the file.</p>

<p>This function header is not const correct.</p>

<pre><code>long long calculateLowestCostOfWork(int const &amp;n, int const &amp;MAX_WEIGHT, int const &amp;minWeightGlobally, std::vector&lt;int&gt;&amp; weights, std::vector&lt;int&gt;&amp; startingOrder, std::vector&lt;int&gt;&amp; endingOrder)
</code></pre>

<p>You pass several parameters by reference that are non-mutable (all the input arrays).</p>

<p>This is a bad habit (not using the curly braces).</p>

<pre><code>    for (int i = 0; i &lt; n; i++)
        permutation[endingOrder[i]] = startingOrder[i];
</code></pre>

<p>When you don't put braces only the one next statement is part of the loop. The trouble is that it is not always obvious that there are two (or more) statements and thus you could have some hard to find errors.</p>

<pre><code>    // Not immediately obvious example. But still not 100% easy to spot.
    // But a lot of code reviewers can still easily miss this.
    for (int i = 0; i &lt; n; i++)
        permutation[endingOrder[i]] = startingOrder[i];
        plop[i] = pile[i];

    // This kind of thing has happened to me
    #define UpdatePerm(permutation, endingOrder, startingOrder, plop, pile, i) \
        permutation[endingOrder[i]] = startingOrder[i]; \
        plop[i] = pile[i]

    // ... Lots of other code.

    for (int i = 0; i &lt; n; i++)
        UpdatePerm(permutation, endingOrder, startingOrder, plop, pile, i);
</code></pre>

<p>Moral of the story always put the braces on and you will never be wrong.</p>

<pre><code>     for (int i = 0; i &lt; n; i++) {
        UpdatePerm(permutation, endingOrder, startingOrder, plop, pile, i);
     }

     // In your case:
     for (int i = 0; i &lt; n; i++) {
        permutation[endingOrder[i]] = startingOrder[i];
     }
</code></pre>

<p>Only putting the try around one function seems strange.</p>

<pre><code>try
{
    readFromFile(argc, argv,MAX_VERTEXES, MIN_VERTEXES, n, minWeightGlobally, weights, startingOrder, endingOrder);
}
catch (...)
{
    std::cout &lt;&lt; "Error";
}

std::cout &lt;&lt; calculateLowestCostOfWork(n,MAX_WEIGHT,minWeightGlobally,weights,startingOrder,endingOrder);
</code></pre>

<p>In the main I would have all the code inside the try block. So that any future errors would be caught by the try (people change code and don't always check were the code is use). But in addition to just printing error I would print the message as well. Then I would re-throw the exception so that the external operating system knows there was an error.</p>

<pre><code>try
{
    // All real code that is not simply initializing constants.

    readFromFile(argc, argv,MAX_VERTEXES, MIN_VERTEXES, n, minWeightGlobally, weights, startingOrder, endingOrder);
    int result = calculateLowestCostOfWork(n,MAX_WEIGHT,minWeightGlobally,weights,startingOrder,endingOrder);
    std::cout &lt;&lt; result &lt;&lt; "\n";
}
catch (std::exception const&amp; e) {
    std::cerr &lt;&lt; "Error: " &lt;&lt; e.what() &lt;&lt; "\n";
    throw;
}
catch (...) {
    std::cerr &lt;&lt; "Error: Unknown?\n";
    throw;
}
</code></pre>

<p>One variable per line please.</p>

<pre><code>std::vector&lt;int&gt; weights, startingOrder, endingOrder;
</code></pre>

<p>This is simply horrible to read and make sure you got correct.</p>

<p>Let us have meaningful names.</p>

<pre><code>int n=0;
</code></pre>

<p>I did a search of the code for the variable <code>n</code> to see where it is used. Do you know how many times <code>n</code> is in the code. Use meaningful names so it becomes easy to search and see the variables. Its not used by the way.</p>
    </div>