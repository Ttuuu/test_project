<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is quite short, which is good. On the other hand, it is equally unreadable as short, which makes it worse.</p>

<ul>
<li><p>You chose really bad variable names. Most of them are one-letter variables and do not tell the reader anything about what they contain or what their purpose is.</p></li>
<li><p>Your code looks inconsistent. Sometimes you write a space around operators, like in <code>h = ""</code>, and sometimes you leave out the space, as in <code>Sep="-"</code>.</p></li>
<li><p>Your habit of adding a comment to every line of code might come from the 1960s, where many programs were written in assembly language and were not abstracted enough to be understandable without a detailed explanation. 60 years later, the programming languages have evolved and are much more expressive. Having this many comments is a sign that the code is not as clearly written as possible.</p></li>
<li><p>You are using the <code>==</code> and <code>!=</code> operators, which should not be used in reliable JavaScript programs. Prefer to use the <code>===</code> and <code>!==</code> operators instead.</p></li>
</ul>

<pre><code>function NumToWordsInt(NumIn) {
//-------------------------------------------------------
//Convert Integer Number to English Words
//Using a Single Loop String Triplets (SLST) Methods
//Mohsen Alyafei 10 July 2019
//Call it for a whole number and fractional separately
//-------------------------------------------------------
</code></pre>

<p>Your introductory comment mentions that this function could be applied to fractions. This doesn't make sense. While <code>1.1</code> is pronounced as <code>one dot one</code>, the fraction <code>1.100</code> has the same mathematical value but would be pronounced as <code>one dot one thousand</code>. Therefore you should omit the last sentence from the documentation.</p>

<pre><code> if (NumIn==0) return "Zero";
 var  Ones = ["", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"];
 var  Tens = ["", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"];
 var Scale = ["", "Thousand", "Million", "Billion", "Trillion", "Quadrillion", "Quintillion", "Sextillion", "Septillion", "Octillion", "Nonillion", "Decillion"];
</code></pre>

<p>Your code currently creates these arrays anew at every call of the function. This is not necessary since these arrays are never modified. The JavaScript compiler should be smart enough to recognize this and optimize that part for you, so that these arrays are placed in some static storage. As of 2019, I don't know how optimizing the JavaScript compilers are, so if you benchmark your program and find out that this single function is the bottleneck, this might be a thing to optimize.</p>

<pre><code> var N1, N2, Sep, L, j, i, h,Trplt,tns="", NumAll = "";
</code></pre>

<p>It's hard to see what all these variables are used for. Regarding the names, you should not omit vowels. Say <code>Triplet</code> instead of <code>Trplt</code>, to clearly tell the reader that the code is not about <code>Trumpletters</code>.</p>

<pre><code>//----------------- code start -------------------
</code></pre>

<p>Instead of this line you should rather just insert an empty line into the code. This makes it much more obvious that there is a pause here, and a new section starts.</p>

<pre><code>        Trplt[2] != "0" ? Sep="-":Sep=" ";
</code></pre>

<p>The <code>?:</code> operator is meant to be used for simple expressions, not as a way to structure code. Currently you mention <code>Sep=</code> twice, which can be rewritten like this:</p>

<pre><code>       sep = triplet[2] !== '0' ? '-' : ' ';
</code></pre>

<p>This change makes the code look much lighter. The main action (assigning some value to <code>sep</code>) is clearly presented at the very left. The variable names do not use abbreviations, the <code>!==</code> operator makes the comparison predictable and the single quotes make the strings look lighter than the double quotes from before.</p>

<pre><code>        N1 = Number(Trplt[0]);      //Get Hundreds digit
</code></pre>

<p>You could have omitted the comment <code>Get Hundreds digit</code> if you had renamed <code>N1</code> to <code>hundreds</code> or <code>hundredsDigit</code>.</p>

<pre><code>        N2 &gt; 19 ? tns = Tens[Number(Trplt[1])] + Sep + Ones[Number(Trplt[2])]:tns = Ones[N2]
</code></pre>

<p>This line is very long and complicated. Can you read it aloud and remember what it does? I cannot, therefore I would write it like this:</p>

<pre><code>        if (rem100 &gt; 19)
            tens = Tens[+triplets[1]] + sep + Ones[+triplets[2]];
        else
            tens = Ones[+rem100];
</code></pre>

<p>Sure, it's a bit longer but the if-then-else structure is clearly visible, which allows a reader to quickly understand what is happening here. The <code>?:</code> that is deeply hidden in the middle of the line is not that clear.</p>

<pre><code>        (h + " " + tns).trim()
        return NumAll.trim();
</code></pre>

<p>When you explain to a human how to spell out the numbers, you would probably not need to mention that extraneous whitespace needs to be trimmed. Yet your code does exactly that. This is another sign that your code is not as human-like as it could be.</p>

<p>Since you didn't provide any unit tests, it is hard to see whether this code works as intended. It is also hard to read and hard to step through using a debugger, because of the many badly named variables.</p>

<p>To improve the code, I started with your code and finally arrived at the following code:</p>

<ul>
<li>There are no comments because the code is expressive enough.</li>
<li>The code is structured into manageable pieces that fit on a single screen each.</li>
<li>There is one function for small numbers, one function for large numbers, and a self-test.</li>
<li>All variables are lowercase and have expressive names.</li>
<li>The constants are line-wrapped so that they fit comfortably on a screen.</li>
<li>The constants are arranged in groups of 5 (or 3 for the long words in <code>scale</code>).</li>
</ul>

<pre><code>(function () {
    "use strict";

    const ones = [
        "Zero", "One", "Two", "Three", "Four",
        "Five", "Six", "Seven", "Eight", "Nine",
        "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen",
        "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"
    ];
    const tens = [
        "", "", "Twenty", "Thirty", "Forty",
        "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"
    ];
    const hundred = "Hundred";
    const scale = [
        "", "Thousand", "Million",
        "Billion", "Trillion", "Quadrillion",
        "Quintillion", "Sextillion", "Septillion",
        "Octillion", "Nonillion", "Decillion"
    ];

    function strRem1000(rem1000) {
        const result = [];
        if (rem1000 &gt;= 100) {
            result.push(ones[rem1000 / 100 | 0], hundred);
        }

        const rem100 = rem1000 % 100;
        if (rem100 === 0) {
            // do nothing
        } else if (rem100 &lt; 20) {
            result.push(ones[rem100]);
        } else if (rem100 % 10 === 0) {
            result.push(tens[rem100 / 10]);
        } else {
            result.push(tens[rem100 / 10 | 0] + '-' + ones[rem100 % 10]);
        }

        return result.join(' ');
    }

    function toLongNumber(n) {
        let result = [];

        if (n === '0') {
            return ones[0];
        }

        let scaleIndex = 0;
        for (let end = n.length; end &gt; 0; end -= 3) {
            const start = Math.max(0, end - 3);

            let aaa = n.substring(start, end);
            let nnn = parseInt(aaa, 10);
            if (nnn &gt; 0) {
                if (scaleIndex &gt; 0) {
                    result.unshift(scale[scaleIndex]);
                }
                result.unshift(strRem1000(nnn));
            }
            scaleIndex++;
        }

        return result.join(' ');
    }

    function test() {
        function testcase(n, words) {
            const result = toLongNumber(n)
            if (result !== words) {
                console.log('expected', words, 'for', n, 'got', result);
            }
        }

        testcase('0', 'Zero');
        testcase('5', 'Five');
        testcase('10', 'Ten');
        testcase('20', 'Twenty');
        testcase('21', 'Twenty-One');
        testcase('75', 'Seventy-Five');
        testcase('100', 'One Hundred');
        testcase('150', 'One Hundred Fifty');
        testcase('157', 'One Hundred Fifty-Seven');
        testcase('999', 'Nine Hundred Ninety-Nine');
        testcase('1000', 'One Thousand');
        testcase('10000', 'Ten Thousand');
        testcase('123456', '' +
            'One Hundred Twenty-Three Thousand ' +
            'Four Hundred Fifty-Six');
        testcase('123456789', '' +
            'One Hundred Twenty-Three Million ' +
            'Four Hundred Fifty-Six Thousand ' +
            'Seven Hundred Eighty-Nine');
        testcase('1000000890', 'One Billion Eight Hundred Ninety');
        testcase('1000000000000000000000000000000000', 'One Decillion');
    }

    test();
})();
</code></pre>
    </div>