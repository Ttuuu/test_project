<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few remarks:</p>

<ol>
<li><p>The biggest obvious issue is the violation of encapsulation. All methods which allow you to modify the id set are public which means that outside code can change it and break the inherent assumption that each instance will have a unique id.  </p>

<p>The only code which should be able to modify the id set are the constructor and destructor.</p>

<p>If you now say "ah, that won't matter it's just my code and I know not to do this" - programming is a skill and like any skill you get better at it through practice. Which typically means writing code. Therefore you should take any opportunity to practicing writing good code since that helps to form good habits. There is no excuse for being sloppy.</p></li>
<li><p>This:</p>

<blockquote>
<pre><code>return s_usedID.count(id) == 1 ? true:false
</code></pre>
</blockquote>

<p>can be written more succinctly as:</p>

<pre><code>return s_usedID.count(id) == 1;
</code></pre></li>
<li><p>The implementation is obviously not thread-safe. Just something to be aware of.</p></li>
<li><p>One way to improve it, is to just use a variable to store the current maximum id and return the next one higher if you need a new one. If an id gets freed up then you could just not worry about it.
If you really want to re-use returned id's then store them in a <code>returnedIds</code> set. The basic logic then becomes:</p>

<ul>
<li>If <code>returnedIds</code> has any elements pop first element from set and return it</li>
<li>Else new id becomes current_max_id + 1</li>
</ul></li>
</ol>
    </div>