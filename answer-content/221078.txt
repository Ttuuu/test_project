<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following remarks may be nitpicks. Since your code is already quite good, it's all I have to say. :)</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;
</code></pre>

<p>Since all the above headers are from the standard C library, they should be in alphabetical order.</p>

<p>When you include other headers like <code>&lt;sys/type.h&gt;</code>, the order is sometimes important. But not in your simple program.</p>

<pre><code>#define SIZE 3
</code></pre>

<p>Having this constant means that anyone else may later change the 3 into a 5 and can expect that the program still works reasonably well. If your code doesn't provide this guarantee, you should add a small comment explaining that this constant should not be modified.</p>

<pre><code>// Draws the board along with rows/cols, numbered.
void draw_board(char board[])
</code></pre>

<p>Function signatures in C should not contain arrays since these behave surprisingly in several cases (like multi-dimensional arrays). Also, it sounds strange to say "to draw the board, given a character array". The function signature would sound a lot better like this:</p>

<pre><code>void draw_board(tic_tac_toe_board *board)
</code></pre>

<p>This changes the wording to "draw the board, given a board", which is a bit redundant, but it focuses on the problem domain instead of the technical level, which makes the code easier to understand, especially if you want to explain programming to laymen.</p>

<p>To make the above function signature valid, you need to declare the <code>tic_tac_toe_board</code> as a type:</p>

<pre><code>typedef struct {
    char cell[SIZE * SIZE];
} tic_tac_toe_board;
</code></pre>

<p>With this type definition, your code may look like this:</p>

<pre><code>void init_board(tic_tac_toe_board *board)
{
    for (int i = 0; i &lt;  SIZE * SIZE; i++)
        board-&gt;cell[i] = '-';
}
</code></pre>

<p>It's a bit more effort to write <code>board-&gt;cell[i]</code> instead of the simple <code>board[i]</code> from before, but it's worth it since you can now talk about <em>a tic-tac-toe board</em>, without having to mention that it is implemented as a character array.</p>

<p>Having this abstraction also means that you can easily extend the board by recording the history of moves, just in case you want to implement an undo feature later:</p>

<pre><code>typedef struct {
    char cell[SIZE * SIZE];
    int moves_count;
    int moves[SIZE * SIZE];
} tic_tac_toe_board;
</code></pre>

<p>Next topic, the communication with the user:</p>

<pre><code>    printf("%c, pick your position (xy, rc): ", player);
</code></pre>

<p>That message is a mistake: <code>xy</code> is not the same as <code>rc</code> since <code>r</code> corresponds to <code>y</code>, not x. It should be either <code>(xy, cr)</code> or <code>(yx, rc)</code>.</p>

<pre><code>    scanf("%s", posinput);
</code></pre>

<p>Instead of reading a string here, there's a completely different idea. Most keyboards have a numeric block, which by coincidence consists of 3×3 keys. When you map the keyboard layout as follows, the human players just need a single key instead of two to enter a coordinate, plus the position on the keyboard matches exactly the position on the board:</p>

<pre><code>7 8 9
4 5 6
1 2 3
</code></pre>

<p>It only works for 3×3 though. But if you accept that limitation:</p>

<pre><code>int pos;
if (scanf("%d", &amp;pos) == 1) {
    int row = (SIZE - 1) - (pos - 1) / SIZE;
    int col = (pos - 1) % SIZE;
    int board_pos = col + row * SIZE;
}
</code></pre>

<p>Going further in your code:</p>

<pre><code>if (board[pos] == 'x' || board[pos] == 'o')
    return false;
</code></pre>

<p>I would rather say <code>board[pos] != '-'</code>, for 3 reasons: it is shorter, it is faster, and when you add a third player someday the code is still correct.</p>

<pre><code>// Returns true if there are three of the same chars in a row.
// b = board, p = player. Shortened for readability.
</code></pre>

<p>A very nice comment. Short, to the point, and informative.</p>

<p>The rest of the code looks good already. There's just one missing thing. Anecdotal evidence suggests that in the game of tic-tac-toe, players familiar with each other will <a href="https://www.youtube.com/watch?v=iSHPVCBsnLw" rel="noreferrer">tie 100% of the time</a> due to the limited number of outcomes. I suggest you implement the tie rule. It's very simple: if <code>SIZE * SIZE</code> moves have been played and there is still no winner, it's a tie.</p>
    </div>