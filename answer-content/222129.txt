<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes you can stop re-rendering. Just don't <code>.setState()</code> :)</p>

<p>I think what would are trying to achieve is the illusion of all the band data being on hand, when search is snappy.</p>

<p>UX-wise you have a choice to make:</p>

<ul>
<li>is search instantaneous, or</li>
<li>is search an activity</li>
</ul>

<h3>Live search</h3>

<ul>
<li>if you have the artist list, search in-memory, that's always best!</li>
<li>if you must make a network call, maintain cache of responses:

<ul>
<li>either in-memory / localStorage cache, or</li>
<li>set response header and rely on browser to cache the responses</li>
</ul></li>
<li>when search input is changed:

<ul>
<li>if you have matches in cache, display them</li>
<li>if you don't, kick off async fetch, but don't change the screen</li>
<li>when you get the results, if input changed yet again, don't display</li>
<li>[maybe] after a timeout (input idle, NNNms passed, results not ready) show spinner</li>
<li>when you have matches in cache that match the input, display them</li>
</ul></li>
</ul>

<p>Here's a first, ugly pass at how I'd start prototyping this flow:</p>

<pre><code>const [current, setCurrent] = useState("");
const [, refresh] = useState();
const [lastChangeTime, setLastChangeTime] = useState(0);
const [lastData, setLastData] = useState([]);

const search = async (what) =&gt; {
  global_cache[what] = await (await fetch(`${url}/?q=${what}`)).json();
  // FIXME ugly, consider observing cache
  refresh(Math.random());
};

const timeout = (ms) =&gt; new Promise(
  resolve =&gt; setTimeout(resolve, ms));

const kickSpinner = async () =&gt; {
  await timeout(500);
  refresh(Math.random());
}

const change = (e) =&gt; {
  setLastChangeTime(Date.now());
  setCurrent(e.target.value);
  search(e.target.value);
  kickSpinner();
};

// FIXME ugly, not functional, maybe redux?
const data = global_cache[current];

if (data) {
  // FIXME ugly, may loop, maybe useEffect?
  setLastData(data);
}

const spinner = (Date.now() - lastChangeTime) &gt;= 500;

return (data?
          &lt;BandList data={data}&gt;:
          spinner?
            &lt;Spinner/&gt;:
            &lt;BandList data={lastData}&gt;);
</code></pre>

<h3>Activity</h3>

<ul>
<li>require user to hit Enter or click the search button</li>
<li>gray out current screen or show "loading..." or a snipper</li>
<li>show list of matches when you have them.</li>
</ul>
    </div>