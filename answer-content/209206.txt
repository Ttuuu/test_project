<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your approach is rather good but your implementation is hardly extensible.</p>

<p>For starter, you don't need <code>l4</code> as you can update <code>l3</code> directly instead:</p>

<pre><code>l3 = {x['id']: {'av': x['av']} for x in l1}
for d in l2:
    l3[d['id']].update(nv=d['nv'])
</code></pre>

<p>Second, you can <a href="https://docs.python.org/3/library/stdtypes.html#dict.pop" rel="noreferrer"><code>pop</code></a> the id so you don't have to know the other keys in the various dictionaries:</p>

<pre><code>l3 = {d.pop('id'): d for d in l1}
for d in l2:
    l3[d.pop('id')].update(d)
</code></pre>

<p>But this approach has the drawback of modifying all input dictionaries. To mitigate that, we can start with an empty dictionary, update with every keys (including <code>id</code>) and pop the extra key afterwards. This is easily done using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>defaultdict</code></a>:</p>

<pre><code>from collections import defaultdict


result = defaultdict(dict)
for sequence in (l1, l2):
    for dictionary in sequence:
        result[dictionary['id']].update(dictionary)
for dictionary in result.values():
    dictionary.pop('id')
</code></pre>

<p>There are few overheads using this approach compared to the first version, but it is way easier to generalize so you are able to merge more than 2 lists. Speaking of which, in such case, you should define a function taking a <a href="https://stackoverflow.com/q/36901/5069029">variable number of lists</a> to merge:</p>

<pre><code>import itertools
from collections import defaultdict


def merge(shared_key, *iterables)
    result = defaultdict(dict)
    for dictionary in itertools.chain.from_iterable(iterables):
        result[dictionary[shared_key]].update(dictionary)
    for dictionary in result.values():
        dictionary.pop(shared_key)
    return result
</code></pre>

<p>Usage be like</p>

<pre><code>merge('id', l1, l2)
</code></pre>
    </div>