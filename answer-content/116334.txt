<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few style changes in Python.
The main one is Python uses 4 spaces, not 2, as it's standard indent size.
This is important as <em>indent size matters</em> in Python.
Also most variables are <code>snake_case</code>.
So my code examples may have small changes.</p>

<hr>

<ol>
<li><p>I would recommend splitting the displaying and formatting into separate functions.
This is as then you can manipulate the output. Which can be nice.</p>

<p>This means that you would have to change your returns.</p>

<p>Changing this allows you to remove the two empty lines at the beginning,
for having to explicitly call <code>print</code>.<br>
And you can print both files and targets at the same time:</p>

<pre><code>print("\n\n".join([
    col_print("Files",
        [...]
    ),
    col_print("Targets",
        [...]
    )
]))
</code></pre></li>
<li><p>You could pass <code>termwidth</code> and <code>padsize</code> as default values.
This allows you to change them if you wish at a later point.</p>

<pre><code>def col_print(title, array, pad_size=1, term_width=150):
    ...
</code></pre></li>
<li><p>You may want to change <code>maxitemwidth</code> so there is only one <code>len</code>.
It makes the code slightly easier to understand.
This is as I originally was a bit confused when I saw the <code>len(max(...))</code>.</p>

<pre><code>max_item_width = max(map(len, array))
</code></pre></li>
<li><p>Division changed in Python3.</p>

<p>Rather than doing <code>int(a / b)</code> you can do <code>a // b</code>.
Python2 division can be nice at times, and so they kept it in.</p>

<p>Python3 division automatically casts <code>a</code> and <code>b</code> to floats.</p>

<p>In short this means that you don't have to do things like <code>a / float(int(b / c))</code>.
Instead you can do <code>a / (b // c)</code>. Which is much more readable.</p></li>
</ol>

<p>At this point the code looks quite nice:</p>

<pre><code>def col_print(title, array, term_width=150, pad_size=1):
    indent = " " * 4
    pad = " " * pad_size
    title += "\n"

    if not array:
        return title + indent + "&lt;None&gt;"

    max_item_width = max(map(len, array))
    num_rows = int(math.ceil(len(array) / ((term_width + pad_size) // (max_item_width + pad_size))))

    return title + "\n".join(
        indent + pad.join(item.ljust(max_item_width) for item in array[index::num_rows])
        for index in range(num_rows)
    )
</code></pre>
    </div>