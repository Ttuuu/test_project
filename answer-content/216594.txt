<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some things that immediately hit me were not about the implementation of the algorithm but the look of the code, it's not idiomatic Ruby, it looks like Java.</p>

<ol>
<li>Most Rubyists use 2 spaces instead of 4.</li>
<li>Why all the getters and setters? Setters are quite often a code smell, make sure you really need them (you may do but if you can draw a line under an object's period of mutability - hopefully by the end of initialization - you'll do yourself a favour).</li>
<li>Camel case is the Java-y bit, so no <code>setPointer</code> and friends. <code>pointerData</code> would be <code>pointer_data</code> in idiomatic Ruby.</li>
<li>You only need <code>def pointer</code> for the getter and <code>def pointer= val</code> for the setter, or to use the <code>attr_</code>… helpers.</li>
<li>… and you've used the <code>attr_</code> helpers, so why is there even a <code>setPointer</code> at all? Just use <code>previous_node.pointer = next_node</code> (to give one example) and cut out the middle man. Same goes for all the others, why write a getter/setter to wrap another getter/setter?</li>
<li><code>self.node = nil</code> in the intializer is unnecessary and if you were going to do it you'd probably use <code>@node = nil</code>.</li>
<li><code>self.node = node</code>, again, why not access the instance variable directly if you know there's no extra processing going on? <code>@node = node</code> is more idiomatic.</li>
<li>No need to write <code>return</code> unless you want an early return, everything's an expression so the last expression in a method will become its return value.</li>
<li><code>pointer_data = current_node.pointer.nil? ? nil : current_node.pointer.data</code> - why use a ternary where an <code>&amp;&amp;</code> or <code>||</code> will do? <code>pointer_data = current_node.pointer &amp;&amp; current_node.pointer.data</code> is terser.</li>
<li>To be even more up to date and terse you could use the new safe-navigation operator, <code>&amp;.</code>, e.g. <code>pointer_data = current_node.pointer&amp;.data</code></li>
<li>You're returning <code>true</code> and <code>false</code> from methods that are changing state. Return either <code>self</code> or the particular state changed (take a look at what happens when you do <code>[] &lt;&lt; 1</code> or <code>[1,2,3].delete 2</code> in a REPL). Methods that return <code>true</code> or <code>false</code> are usually suffixed with <code>?</code> and side effects will probably surprise the consumer.</li>
</ol>

<p>Once you've cleaned up all of that then the algorithm will be clearer. Some more thoughts on the code that are stylistic but not about Ruby per se.</p>

<p>Firstly, I'd allow the head node to be set in the <code>initialize</code> method - why make a 1 line operation into 2? Secondly, I'd be clearer in my naming, <code>node</code> is a bit abstract, if you're really talking about the position of a node - the head, then call it <code>head</code>:</p>

<pre><code>def initialize head=nil # &lt;- this makes it optional
  @head = head # &lt;- this takes care of setting to nil anyway
</code></pre>

<p><code>while ! current_node.pointer.nil?</code> is the same as <code>while current_node.pointer</code> but the latter is much easier to understand. No one likes a double negative.</p>

<p><code>def initialize(data = nil, pointer = nil)</code> Optional arguments are nice <em>until</em> you start using them in multiple positions, something like <code>def initialize(data = nil, pointer: nil)</code> is better, or <code>def initialize(data: nil, pointer: nil)</code>, it depends on what you think is most likely to be used / easier on the consumer of the library - think about the interface all the time.</p>

<p>This brings me to my last point - where are the examples for running it? Where are the tests? I've pasted my own version using the advice I've given but does it work? I don't know. Any refactoring can (will!) break things which is why you need examples/tests to fall back on and check your work. It's also where you I'd advise you should start in future. If you don't know how you want the code to be called then you won't do a good job writing it.</p>

<p>I hope that helps.</p>

<pre><code>module LinkedList

  class List
    attr_accessor :node


    def initialize head=nil
      @head = head
    end


    def add(node)
      if @head.nil?
        @head = node
      else
        current_node = @head
        while current_node.pointer do
          current_node = current_node.pointer
        end
        current_node.pointer = node
      end
      self
    end


    def get(node)
      current_node = @head
      data_match = nil
      while current_node.pointer and data_match do
        data_match = current_node.data if node.data == current_node.data
        current_node = current_node.pointer
      end
      current_node
    end


    def remove(node)
      previous_node = nil
      current_node = @head
      next_node = current_node.pointer
      while current_node do
        if current_node.data == node.data and current_node.data == @head.data
          @head = next_node
          return node
        end
        if current_node.data == node.data
          # This looks like it will fail as previous_node is nil afaics
          previous_node.pointer = next_node
          return node
        end
        previous_node = current_node
        current_node = next_node
        next_node = current_node.pointer
      end
      nil
    end


    def print
      current_node = @head
      while current_node do
        pointer_data = current_node.pointer&amp;.data
        puts "data=#{current_node.data}, pointer=#{pointer_data}"
        current_node = current_node.pointer
      end         
      puts # puts *what*?
    end

  end

  class Node
    attr_accessor :data
    attr_accessor :pointer

    def initialize(data: nil, pointer: nil)
      @data = data
      @pointer = pointer
    end
  end

end
</code></pre>
    </div>