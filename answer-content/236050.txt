<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, as per <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> I'd recommend you follow the best practices.</p>

<p><a href="https://www.python.org/dev/peps/pep-0008/#id34" rel="nofollow noreferrer"><h2>Naming conventions</h2></a></p>

<ul>
<li><code>allNagiosInfo</code> -&gt; this is most likely a constant, so: <code>ALL_NAGIOS_INFO</code></li>
<li><code>nagiosEntry</code>, <code>nagiosBaseURL</code>, <code>nagiosUsername</code>, <code>nagiosPassword</code>, <code>nagiosAuthType</code> -&gt; <code>nagios_entry</code>, <code>nagios_base_url</code>, <code>nagios_username</code>, <code>nagios_password</code>, <code>nagios_auth_type</code>.</li>
</ul>

<p>And so on with the naming, you got the idea. </p>

<p><strong>Summary:</strong> </p>

<blockquote>
  <p>Variable names should be lowercase, with words separated by
  underscores as necessary to improve readability.</p>
</blockquote>

<p><a href="https://www.python.org/dev/peps/pep-0008/#id23" rel="nofollow noreferrer"><h2>Imports</h2></a></p>

<blockquote>
  <p>Imports should be grouped in the following order:</p>
  
  <ul>
  <li>Standard library imports.</li>
  <li>Related third party imports.</li>
  <li>Local application/library specific imports.</li>
  <li>You should put a blank line between each group of imports.</li>
  </ul>
</blockquote>

<p>Also, don't import modules that you're not using (e.g: <code>time</code>, <code>urllib</code>).
So, that means you could rewrite your imports as follows:</p>

<pre class="lang-py prettyprint-override"><code>import requests
from requests.auth import HTTPBasicAuth, HTTPDigestAuth
from bs4 import BeautifulSoup
</code></pre>

<hr>

<p>This:</p>

<pre class="lang-py prettyprint-override"><code>nagios_base_url = nagios_entry[0]
nagios_username = nagios_entry[1]
nagios_password = nagios_entry[2]
nagios_auth_type = nagios_entry[3]
</code></pre>

<p>Can be rewritten as:</p>

<p><code>nagios_base_url, nagios_username, nagios_password, nagios_auth_type = nagios_entry</code></p>

<p>Since all the requests that you're doing are suffixed with the same url, I'd just define that before the <code>if</code>s:</p>

<pre class="lang-py prettyprint-override"><code># ...
for nagios_entry in ALL_NAGIOS_INFO:
    nagios_base_url, nagios_username, nagios_password, nagios_auth_type = nagios_entry
    full_url = "{}/cgi-bin/status.cgi?host=all".format(nagios_base_url)

    if nagios_auth_type == "Basic":
        response = requests.get(full_url, auth=HTTPBasicAuth(nagios_username, nagios_password))

    if nagios_auth_type == "Digest":
        response = requests.get(full_url, auth=HTTPDigestAuth(nagios_username, nagios_password))
</code></pre>

<p>You have way too many prints which can be rewritten as a single print:</p>

<pre class="lang-py prettyprint-override"><code>print("""Nagios Server at {}@{}: 

Hosts:

    Up          - {}
    Down        - {}
    Unreachable - {}
    Pending     - {}
    Problems    - {}
    Types       - {}

Services:

    OK          - {}
    Warning     - {}
    Unknown     - {}
    Critical    - {}
    Problems    - {}
    Types       - {}
""".format(
        nagios_username, nagios_base_url, hosts_up, hosts_down, hosts_unreachable, hosts_pending,
        hosts_problems, hosts_types, service_ok, service_warning, service_unknown, service_critical,
        service_problems, service_types
    )
)
</code></pre>

<p>You can also look at <a href="https://docs.python.org/2/library/textwrap.html#textwrap.dedent" rel="nofollow noreferrer"><code>textwrap.dedent</code></a> if you want to play around with the <code>\t</code>s.</p>

<hr>

<h2>Security</h2>

<p>As you said, it's not recommended to keep your passwords in the code. There's no perfect solution for this, but we can enumerate some of the most used ones:</p>

<ul>
<li>config files which have to be added to <code>.gitignore</code> so they get excluded from the repo</li>
<li>environment variables (mostly used on Unix based distros)</li>
<li>some powerful hashing technique to generate a master password (master password -&gt; secure key-&gt; encrypt data by the key)</li>
</ul>

<hr>

<h2>Scraping</h2>

<p>When scraping things, you can usualy go a specific element by using an <code>xpath</code> or a <code>selector</code>. I usually use the <code>lxml</code> module when I have to quickly put together something because it allows me to use xpaths (though bs might as well offer that - didn't actually play with that for a while now)</p>

<p><strong>Example for lxml usage</strong></p>

<pre class="lang-py prettyprint-override"><code>from lxml import html
import requests

res = requests.get(some_url)
tree = html.fromstring(res.content)
tds = tree.xpath('//table//td[@class="plaintext"]/text()[normalize-space()]')
</code></pre>

<hr>

<p>Now, your code is not very portable and if you plan on adding more servers, you'll find yourself having a hard time integrating those as well. The first thing that I'd do is to find the proper data structure for my data. In your scenario, a dictionary looks like the best choice out there:</p>

<pre class="lang-py prettyprint-override"><code>NAGIOS_DATA = {
    'http://example.com/nagios/cgi-bin/status.cgi?host=all': {
        'user': 'user',
        'password': 'password',
        'auth_type': 'Basic'
    },
    'https://network2.example.com/nagios/cgi-bin/status.cgi?host=all': {
        'user': 'user',
        'password': 'password',
        'auth_type': 'Digest'
    },
    'https://anothernetwork.example.com/nagios/cgi-bin/status.cgi?host=all': {
        'user': 'user',
        'password': 'password',
        'auth_type': 'Basic'
    },
}
</code></pre>

<p><em>INFO: don't forget that the <code>password</code> can be defined in a config file and imported here</em></p>

<p>Now, that's debatable if it's the best structure that you can use because I don't know the entire logic of your app, but it'll do for now.</p>

<p>Using the above, we can now do:</p>

<pre class="lang-py prettyprint-override"><code>import requests
from requests.auth import HTTPBasicAuth, HTTPDigestAuth
from bs4 import BeautifulSoup


NAGIOS_DATA = {
    'http://example.com/nagios/cgi-bin/status.cgi?host=all': {
        'user': 'user',
        'password': 'password',
        'auth_type': 'Basic'
    },
    'https://network2.example.com/nagios/cgi-bin/status.cgi?host=all': {
        'user': 'user',
        'password': 'password',
        'auth_type': 'Digest'
    },
    'https://anothernetwork.example.com/nagios/cgi-bin/status.cgi?host=all': {
        'user': 'user',
        'password': 'password',
        'auth_type': 'Basic'
    },
}


def get_url_response(url, user, password, auth_type):
    """Get the response from a URL.

    Args:
        url (str): Nagios url
        user (str): Nagios username
        password (str): Nagios password
        auth_type (str): Nagios auth_type

    Returns: Response object
    """

    if auth_type == "Basic":
        return requests.get(url, auth=HTTPBasicAuth(user, password)) 
    return requests.get(url, auth=HTTPDigestAuth(user, password))


def main():
    """
    Main entry to the program.
    """

    for url, auth_data in NAGIOS_DATA.items():
        user, password, auth_type = auth_data["user"], auth_data["password"], auth_data["auth_type"]
        response = get_url_response(url, user, password, auth_type)

        if response.status_code == 200:
            html = BeautifulSoup(response.text, "html.parser")
            # ... and so on


if __name__ == '__main__':
    main()
</code></pre>

<p>I haven't finished the whole review because I want you to go ahead and do the rest. Some things that I've added to the program:</p>

<ul>
<li>functions: writing functions will let you reuse the functionality they contain at a later point + it's easier to test the code inside them. <em>Homework: could you think of a way of splitting them even further?</em></li>
<li><a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a>: having docstrings within a function will tell others (and most important, the future-you) what that function does.</li>
</ul>
    </div>