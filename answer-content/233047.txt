<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Duplicate Code</h2>

<p>These lines of code:</p>

<pre><code>    m = [int(i) for i in numbers.split()]
    n = [int(i) for i in numbers.split()]
</code></pre>

<p>assign the same result to the variables <code>m</code> and <code>n</code>.  This results in double the needed work being performed.  The <code>numbers</code> string is being split twice, and all the terms are being converted from strings to integers twice.</p>

<p>You only need the first line:</p>

<pre><code>    m = [int(i) for i in numbers.split()]
</code></pre>

<p>Or expressed more functionally:</p>

<pre><code>    m = list(map(int, numbers.split()))
</code></pre>

<h2>Directly return values</h2>

<p>You do not need to assign values to variables before returning them.  You can simply return the calculations:</p>

<pre><code>    return max(m), min(m)
</code></pre>

<h2>Variable Names</h2>

<p><code>m</code>, <code>h</code>, <code>n</code>, and <code>l</code> are terrible variable names.  They convey almost no meaning.  The reader might be able to guess <code>h</code> represents the high value, and <code>l</code> represents the low value, but make it easier on them; use <code>low</code> and <code>high</code> as the variable names.  Perhaps <code>nums</code> or <code>values</code> instead of <code>m</code>.  As mentioned above, <code>n</code> is not needed.</p>

<h2>Reworked code</h2>

<p>Here is one possible refactoring of your <code>high_and_low</code> function:</p>

<pre><code>def high_and_low(numbers):

    values = list(map(int, numbers.split()))
    return max(values), min(values)
</code></pre>

<h2>Type Hints and Docstrings</h2>

<p>You can additionally help the reader (and method caller) by providing type hints and docstrings:</p>

<pre><code>from typing import Tuple

def high_and_low(numbers: str) -&gt; Tuple[int, int]:
    """
    Parse a string of space separated integers and return the
    highest and lowest integers found in the string.

    &gt;&gt;&gt; high_and_low("123 956 334 421 -543")
    (956, -543)
    """

    values = list(map(int, numbers.split()))
    return max(values), min(values)
</code></pre>

<p>In a Python REPL, the user can type <code>help(high_and_low)</code> to get usage information for the function (the <code>"""docstring"""</code> of the function).</p>

<p>The Python <code>doctest</code> module can extract <code>&gt;&gt;&gt;</code> lines from the <code>"""docstring"""</code> and execute them, and compare the output with the line(s) which follow, to ensure the function behaves as described.</p>

<pre class="lang-none prettyprint-override"><code>aneufeld$ python3.8 -m doctest -v high_and_low.py 
Trying:
    high_and_low("123 956 334 421 -543")
Expecting:
    (956, -543)
ok
1 items had no tests:
    high_and_low
1 items passed all tests:
   1 tests in high_and_low.high_and_low
1 tests in 2 items.
1 passed and 0 failed.
Test passed.
</code></pre>
    </div>