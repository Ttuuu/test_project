<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Elegance is the wrong criterion. The key criterion is correctness, which implies readability and maintainability.</p>

<p>As you read text, you notice misspelled words. Does that mean that you laboriously spell-check each word, letter-by-letter? In fact, most likely, you quickly and unconsciously scan the shape of the words. Only if the shape of a word seems odd do you pause and slowly check the spelling letter-by-letter.</p>

<p>Since readablity is so important, we choose a few idiomatic, instantly recognizable code forms. For example,</p>

<pre><code>if err != nil {
    // ...
    return ...
}
// ...
return ...
</code></pre>

<p>Even if, in a particular case, we could write</p>

<pre><code>return err == ...
</code></pre>

<p>The first, general form always works. The second, specialized form may not.</p>

<p>The second form is less maintainable.</p>

<p>If we find that </p>

<pre><code>return err == ...
</code></pre>

<p>is insufficient, we probably have to replace it with the first form</p>

<pre><code>if err != nil {
    // ...
    return ... 
}
// ...
return ...
</code></pre>

<p>To summarize, prefer a single, easily recognizable code form</p>

<pre><code>if err != nil {
    // ...
    return ...
}
// ...
return ...
</code></pre>

<p>in particular</p>

<pre><code>if err != nil {
    return false
}
return true
</code></pre>

<hr>

<p><strong>Idiomatic Go</strong></p>

<blockquote>
  <p><a href="https://github.com/golang/go/wiki/CodeReviewComments#go-code-review-comments" rel="nofollow noreferrer">Go wiki: Go Code Review Comments</a></p>
  
  <p>This page collects common comments made during reviews of Go code, so
  that a single detailed explanation can be referred to by shorthands.</p>
  
  <p><a href="https://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow" rel="nofollow noreferrer">Indent Error Flow</a></p>
  
  <p>Try to keep the normal code path at a minimal indentation, and indent
  the error handling, dealing with it first. This improves the
  readability of the code by permitting visually scanning the normal
  path quickly. For instance, don't write:</p>

<pre><code>if err != nil {
  // error handling
} else {
  // normal code
}
</code></pre>
  
  <p>Instead, write:</p>

<pre><code>if err != nil {
  // error handling
  return // or continue, etc.
}
// normal code
</code></pre>
  
  <p>If the if statement has an initialization statement, such as:</p>

<pre><code>if x, err := f(); err != nil {
  // error handling
  return
} else {
  // use x
}
</code></pre>
  
  <p>then this may require moving the short variable declaration to its own
  line:</p>

<pre><code>x, err := f()
if err != nil {
  // error handling
  return
}
// use x
</code></pre>
</blockquote>

<hr>

<p>For readability, don't be idiosyncratic. Conform to the familiar Go standard library <a href="https://golang.org/pkg/os/" rel="nofollow noreferrer"><code>os</code> package</a> names. For example,</p>

<pre><code>func Stat(name string) (FileInfo, error)

func IsExist(err error) bool
</code></pre>

<p>For your function,</p>

<pre><code>func isFileExist(name string) bool {
    _, err := os.Stat(name)
    if err != nil {
        return false
    }
    return true
}
</code></pre>
    </div>