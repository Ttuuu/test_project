<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would pull out the generation of the next circle and the generation of all circles into their own functions. This allows you to test those parts without having to plot the result, allowing some speed comparisons:</p>

<pre><code>def place_circle(centers, rads, size_x, size_y, size_r):
    center = random.uniform(*size_x), random.uniform(*size_y)
    rad = random.uniform(*size_r)
    if centers and rads:
        while collide(center, rad, centers, rads):
            center = random.uniform(*size_x), random.uniform(*size_y)
            rad = random.uniform(*size_r)
    return center, rad

def place_circles(ncirle, size_x, size_y, size_r):
    centers, rads = [], []
    for n in range(ncircle):
        center, rad = place_circle(centers, rads, size_x, size_y, size_r)
        centers.append(center)
        rads.append(rad)
        # print(n)
    return centers, rads
</code></pre>

<p>You can then use this like this in your main function:</p>

<pre><code>centers, rads = place_circles(ncircle, sizex, sizey, (min_r, max_r))
for center, rad in zip(centers, rads):
    add_circle(ax, center=center, r=rad, face_color=color, edge_color=BLACK)
</code></pre>

<p>Note that I made <code>(0, 0, 0, 0)</code> global constant called <code>BLACK</code> and removed the whitespace around <code>=</code> for keywords (as recommended by Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>).</p>

<p>Now, we can test how long it takes to find a place for 1000 circles:</p>

<pre><code>%timeit place_circles(1000, (0, 1000), (0, 1000), (1, 200))
3.33 s ± 139 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>

<p>With this baseline, you can try to improve the performance.</p>
    </div>