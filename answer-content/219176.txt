<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        if (lookup.ContainsKey(transmitter))
        {
          var receiverLookup = lookup[transmitter];
</code></pre>
</blockquote>

<p>This searches for the <code>KeyValuePair</code> twice. There's a more efficient approach:</p>

<pre><code>        if (lookup.TryGetValue(transmitter, out var receiverLookup))
</code></pre>

<hr>

<blockquote>
<pre><code>      var ungrouped = receivers.Except(blocksTracker).ToArray();

      foreach (var receiver in ungrouped)
      {
        blocks.Add(new Block(){Id = receiver, status = "red"});
        blocksTracker.Add(receiver);
      }
</code></pre>
</blockquote>

<p>The <code>ToArray()</code> there is unnecessary: the enumerable can be left as a lazy enumerable because the only use is to iterate over it once.</p>

<hr>

<blockquote>
<pre><code>          var intersection = receivers.Intersect(receiverLookup).ToArray();
          if (intersection.Length &gt; 0)
          {
             blocks.Add(new Block() { Id = transmitter, status = "yellow"});
             blocksTracker.Add(transmitter);
            foreach (var receiver in intersection)
            {
              blocks.Add(new Block(){Id = receiver, status = "yellow"});
              blocksTracker.Add(receiver);
            }
          } else  
          {
            blocks.Add(new Block(){Id = transmitter, status = "red"});
            blocksTracker.Add(transmitter);   
          }
</code></pre>
</blockquote>

<p>This seems rather complicated. I think the whole thing could be simplified:</p>

<pre><code>var transmittersPaired = new HashSet&lt;string&gt;();
var receiversPaired = new HashSet&lt;string&gt;();

foreach (var transmitter in transmitters)
{
    if (lookup.TryGetValue(transmitter, out var receiverLookup) &amp;&amp; receiverLookup.Any())
    {
        transmittersPaired.Add(transmitter);
        foreach (var receiver in receiverLookup)
        {
            receiversSeen.Add(receiver);
        }
    }
}

var blocks = new List&lt;Block&gt;();
foreach (var transmitter in transmitters)
{
    blocks.Add(new Block { Id = transmitter, status = transmittersPaired.Contains(transmitter) ? "yellow" : "red" });
}
foreach (var receiver in receivers)
{
    blocks.Add(new Block { Id = receiver, status = receiversPaired.Contains(receiver) ? "yellow" : "red" });
}
</code></pre>

<p>There's still some repeated code, which might be simplified in one of two ways. If there's a guarantee that the transmitters and receivers will never share IDs then <code>transmittersPaired</code> and <code>receiversPaired</code> could be merged into one set, and the <code>foreach</code> loops at the end could be merged into one loop over <code>transmitters.Concat(receivers)</code>. Alternatively, a method could be factored out.</p>
    </div>