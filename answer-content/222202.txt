<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is my first post for suggesting improvements so I may be way off the mark but I think you should</p>

<ol>
<li>Use docstrings in each function and preferably have an overall docstring</li>
<li>Use a helper function (in my case <code>find_n_term</code>) so this module can be re-used by other programmers</li>
<li>Use the guard <code>if __name__ == "__main__"</code> so others users can import the module and it won't run automatically </li>
</ol>

<pre><code>"""Problem:
    Odd terms in a sequence are of the Fibonacci series
    Even terms in a sequence are of the prime number series
    e.g:
    1,2,1,3,2,5,3,7,5
    Find the nth term in the series"""


def fib(n):
    """Return the nth fibonacci number"""
    fib_numbers = [1, 1]
    if n in (1, 2):
        return 1
    for i in range(2, n):
        fib_numbers.append(fib_numbers[i - 1] + fib_numbers[i - 2])
    return fib_numbers[-1]


def prime(n):
    """Return the nth prime number"""
    prime_number = 2
    counter = 3
    prime_count = 1
    if n == 1:
        return 2
    while prime_count &lt; n:
        is_prime = True
        for i in range(2, counter):
            if counter % i == 0:
                is_prime = False
                break
        if is_prime:
            prime_count += 1
            prime_number = counter
        counter += 1
    return prime_number


def find_n_term(n):
    """Return the nth term in a sequence where odd terms are from the
    fibonacci sequence and even terms from the primer number sequence"""
    if n % 2 == 0:
        output = prime(n // 2)
        print("Prime number:", output)
    else:
        output = fib((n + 1) // 2)
        print("Fib number:", output)


if __name__ == "__main__":
    for i in range(1,10):
        find_n_term(i)

</code></pre>
    </div>