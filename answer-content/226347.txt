<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Performance optimization</h3>

<blockquote>
<pre><code>int listLength = 0;
while (tail != null) {
    listLength += 1;
    tail = tail.next;
}
</code></pre>
</blockquote>

<p>Since <code>head != null</code> we can start listLength at 1 and keep our tail by checking <code>tail.next != null</code> rather than <code>tail != null</code>.</p>

<pre><code>int listLength = 1;
while (tail.next != null) {
    listLength += 1;
    tail = tail.next;
}
</code></pre>

<p>Now we no longer have to search for <code>kthnode</code> because it's <code>tail</code>.</p>

<blockquote>
<pre><code>// no longer required
while (kthnode.next != null) {
    kthnode = kthnode.next;
}
kthnode.next = head;
</code></pre>
</blockquote>

<p>Instead, we can now append the old head to the tail.</p>

<pre><code>tail.next = head;
</code></pre>

<h3>Misc</h3>

<ul>
<li>Since the challenge uses mathematical style variable names, such as <code>k</code>, I suggest to rename <code>listLength</code> to <code>n</code>.</li>
<li>The challenge states <code>k</code> can be asserted non-negative, so I presume <code>k &gt; 0</code>. On the other hand, your method is public, so any input could be provided. The challenge does not specify how to handle 'wrong' input. Several ways to perform the argument checks have already been suggested in other answers. One other possibility is to use a sand-box. Left-rotations (<code>k &lt; 0</code>) are inversional equivalents of right-rotations. So the following relaxation on <code>k</code> deals with any right-rotation, even the ones specified as left-rotation: <code>k = (k % n + n) % n;</code>.</li>
</ul>
    </div>