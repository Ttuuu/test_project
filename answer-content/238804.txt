<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>in this function:</p>

<pre><code>void list_remove(List* head, int index)
</code></pre>

<p>there is the statement:</p>

<pre><code>head = head-&gt;next;
</code></pre>

<p>is a problem as this changes the parameter on the stack, not the actual list</p>

<p>in function: <code>main()</code>  this statement:</p>

<pre><code>List list = *array_to_list((int[]){1, 2, 3, 4}, 4);
</code></pre>

<p>will result in the variable <code>list</code> containing the contents of the first instance of the struct, NOT a pointer to the head of the list</p>

<p>in function: <code>main()</code>, this function call:</p>

<pre><code>list_insert_all(&amp;list, (int[]){1, 2, 3, 4}, 4);
</code></pre>

<p>results in all the parameters being inserted into the list, however;  the earlier call to:</p>

<pre><code>List list = *array_to_list((int[]){1, 2, 3, 4}, 4);
</code></pre>

<p>also called: <code>list_insert_all()</code>, so the parameters are now in the list twice</p>

<p>in function: <code>list_insert()</code> in the <code>for()</code> loop, this statement:</p>

<pre><code>prev = head;
</code></pre>

<p>is executed <code>index</code> number of times, however; when <code>index</code> is 0, then that statement is never executed, so the following code:</p>

<pre><code>prev-&gt;next = item;
</code></pre>

<p>is working with an uninitialized variable <code>prev</code></p>

<p>it is a very poor programming practice to name variables the same as a struct type with the only difference being capitalization.  The compiler will not have a problem, but the humans reading the code will have a problem.</p>

<p>I have not examined the rest of the code, but the above should be enough to get you pointed in the right direction</p>

<p>EDIT:</p>

<p>in the function: <code>free_list()</code> the body of the function tries to <code>free()</code> the first entry in the list, however; that first entry is an actual instance of the list node, on the stack in the <code>main()</code> function.  Trying to <code>free()</code> something on the stack will result in a crash.  This is another good reason to have a 'head' pointer on the stack that points to the first list 'node'</p>
    </div>