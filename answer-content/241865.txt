<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I give it a 0 because I tied the bot and the bot still wins.</p>

<p>Just kidding.</p>

<p>Without considering some of the ways this could be made simpler and more compact (ie. strictly from a style guide point of view), this would be rated exactly a 4.88/10 (at least, that's what <code>pylint</code> is claiming):</p>

<pre><code>************* Module rps
rps.py:3:13: C0303: Trailing whitespace (trailing-whitespace)
rps.py:6:47: C0303: Trailing whitespace (trailing-whitespace)
rps.py:7:13: C0303: Trailing whitespace (trailing-whitespace)
rps.py:9:19: C0326: No space allowed before bracket
for tries in range (1,4):
                   ^ (bad-whitespace)
rps.py:9:21: C0326: Exactly one space required after comma
for tries in range (1,4):
                     ^ (bad-whitespace)
rps.py:13:25: C0326: Exactly one space required after comma
        choices = ['Rock','Paper','Scissors']
                         ^ (bad-whitespace)
rps.py:13:33: C0326: Exactly one space required after comma
        choices = ['Rock','Paper','Scissors']
                                 ^ (bad-whitespace)
rps.py:15:19: C0326: Exactly one space required before assignment
        bot_guess  = random.choice(choices) #Will randomly pick from the list 'choices'
                   ^ (bad-whitespace)
rps.py:17:0: C0301: Line too long (106/100) (line-too-long)
rps.py:21:110: C0303: Trailing whitespace (trailing-whitespace)
rps.py:21:0: C0301: Line too long (110/100) (line-too-long)
rps.py:32:22: C0303: Trailing whitespace (trailing-whitespace)
rps.py:35:23: C0303: Trailing whitespace (trailing-whitespace)
rps.py:38:22: C0303: Trailing whitespace (trailing-whitespace)
rps.py:41:23: C0303: Trailing whitespace (trailing-whitespace)
rps.py:44:23: C0303: Trailing whitespace (trailing-whitespace)
rps.py:45:58: C0303: Trailing whitespace (trailing-whitespace)
rps.py:59:37: C0303: Trailing whitespace (trailing-whitespace)
rps.py:1:0: C0114: Missing module docstring (missing-module-docstring)
rps.py:6:0: C0103: Constant name "user_point" doesn't conform to UPPER_CASE naming style (invalid-name)
rps.py:7:0: C0103: Constant name "bot_point" doesn't conform to UPPER_CASE naming style (invalid-name)

-----------------------------------
Your code has been rated at 4.88/10
</code></pre>

<p>It is OK to ignore the last 2 messages. Pylint thinks variable that are declared outside functions are supposed to be constants. But in this case the script is so short that creating functions doesn't make sense.</p>

<ul>
<li>formatting on the trailing comments:</li>
</ul>

<pre><code>bot_guess  = random.choice(choices) #Will randomly pick from the list 'choices'
while user_guess not in choices:#if the user tries to put in anything other then the choices given
</code></pre>

<p>much nicer to do: <code>&lt;code&gt;&lt;one space&gt;#&lt;one space&gt;&lt;comment&gt;</code></p>

<pre><code>bot_guess  = random.choice(choices) # will randomly pick from the list 'choices'
while user_guess not in choices: # if the user tries to put in anything other then the choices given
</code></pre>

<ul>
<li>The <code>if-elif</code> statements used to determine the winner can be simplified quite a bit. Think about it like this: there are only 3 outcomes, so you should only need 3 checks, at most. There are several ways to do it, but here is one I thought of:</li>
</ul>

<pre><code>    if user_guess == bot_guess:
        print('Tie!')
    elif choices.index(user_guess) == (choices.index(bot_guess) + 2) % 3:
        print('The bot earns a point!')
        bot_point += 1
    else:
        print('The user earns a point')
        user_point += 1
</code></pre>

<ul>
<li><p>The list <code>choices = ['Rock','Paper','Scissors']</code> is treated as a constant, so declare it at the top of the file, right after the import statements (and it actually <em>should</em> be in all UPPER CASE). Since the content won't change, it would be good practice to use a tuple instead of a list (just swap the square brackets <code>[...]</code> for parens <code>(...)</code>).</p></li>
<li><p>Python 3.4 introduced a <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">feature called f-strings</a> that make string formatting a lot cleaner. Read the link for all â€ he details, but the main takeaway from it is that if you prefix a string literal with an <code>f</code>, it allows for string interpolation "on the fly":</p></li>
</ul>

<pre><code>print('After ' + str(tries) + ' tries. ' + ' The score is') # NO!!!
print(f'After {tries} tries, the score is') # YES!!!!
</code></pre>

<ul>
<li>The <code>try-except</code> block is not needed. You can replace it with:</li>
</ul>

<pre><code>user_guess = ''
bot_guess  = random.choice(choices)
while True:
    user_guess = input('Rock Paper Scissors? ')
    if user_guess in choices:
        break
    else:
        print("you must pick a choice from the list!")
</code></pre>

<ul>
<li>You could also combine the <code>user_point</code> and <code>bot_point</code> into a single <code>points</code> variable, and assign negative points for the bot and positive points for the user. This is kind of like taking the users side: you earn points by winning, and lose them when the bot wins. The downside is that you can't keep track of how many points each player has earned, only the difference between the 2.</li>
</ul>

<p>So in the end, I get this:</p>

<pre><code>#!/usr/bin/env python3

import random

CHOICES = ('Rock', 'Paper', 'Scissors')
points = 0
print('Lets play Rock Paper Scissors')
for tries in range(1, 4):
    user_guess = ''
    bot_guess = random.choice(CHOICES)
    while True:
        user_guess = input('Rock Paper Scissors? ')
        if user_guess in CHOICES:
            break
        else:
            print("you must pick a choice from the list!")
    print(f"The bot did {bot_guess}")
    if user_guess == bot_guess:
        print('Tie!')
    elif CHOICES.index(user_guess) == (CHOICES.index(bot_guess) + 2) % 3:
        print('The bot earns a point!')
        points -= 1
    else:
        print('The user earns a point!')
        points += 1
if points &gt; 0:
    print(f'After {tries} tries, THE USER IS THE WINNER BY {points}!!!')
elif points == 0:
    print(f'After {tries} tries, IT\'S A TIE!!!')
else:
    print(f'After {tries} tries, THE BOT IS THE WINNER BY {points * -1}!!!')
</code></pre>
    </div>