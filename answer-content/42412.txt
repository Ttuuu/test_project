<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>New to this site, so hope this is in correct format. I did a rewrite of your code. I also notice others has entered some of the same conclusions, so some redundancy.</p>

<p>I assume this is a school project and as such I will omit some things that I otherwise would have used. Among other things <code>struct</code>'s.</p>

<p>Ended up with a rather big rewrite. It is not certain you will find it useful, but hopefully you can draw something from it. I almost feel a bit rude here, but.</p>

<p>As this text likely is easier to read and understand with the complete source for the rewrite in one collective file i have <a href="http://codepad.org/4dqrfHMR">pasted it here</a>.</p>

<p>OK. Lets start.</p>

<hr>

<p>Firstly I will mention that I use the <code>fprintf()</code> version. This is from habit as if I later find the need to output to something else then <code>stdout</code> it is easy to change. I also have some coding style when it comes to <code>printf()</code> that I have found to be working well.</p>

<p>I have also not used <code>gets_s()</code> as it simply is not available on my system.</p>

<h1>User input</h1>

<p>When we look at your code one of the things that is most clear is the redundancy in user input functions. The functions:</p>

<pre><code>float wages_loop();
float other_loop();
float interest_loop();
float dividends_loop();
</code></pre>

<p>can be merged into one function. If we notice we repeat our selves, we should take a good long look at what we are doing and how we can re factor the code.</p>

<p>Secondly it is a good rule to have as number one:</p>

<ol>
<li>A function should: <strong>Do one thing, and do it well.</strong></li>
</ol>

<p>A second thing that we use when appropriate is helper functions. This both helps us splitting up the code into manageable parts, as well as make the code much less redundant.</p>

<p>Lets start with confirmations. We have repeated requests for confirmation where answer is <code>y</code> for yes and <code>n</code> for no. Using the power of <code>printf()</code> we can then make a general confirmation function.</p>

<p>Secondly we have input by float and int. Dividing this into functions we can end up with something like this. (Hopefully they should be rather self-explaining).</p>

<p>We should have had both <code>int</code> and <code>float</code> versions + some error checking, but this should be an OK starter. For <code>int</code> input I cast the float.</p>

<pre><code>static int confirm(char *title)
{
        char buf[10];

        fprintf(stdout, "%s (y or n) ", title);
        while (1) {
                fgets(buf, sizeof(buf), stdin);
                switch (*buf) {
                case 'y': case 'Y':
                        return 1;
                case 'n': case 'N':
                        return 0;
                }
                fprintf(stderr, "Please answer with y for Yes or n for No: ");
        }
}

static float get_float(char *title) {
        char buf[80];

        fputs(title, stdout);
        fgets(buf, sizeof(buf), stdin);
        return atof(buf);
}

static float get_info_float(char *type)
{
        float amount, total = 0;

        fprintf(stdout, "\n -- %s --\n", type);
        do {
                amount = get_float("\n Enter amount: ");
                total += amount;
                fprintf(stdout, "\n Do you have any more %s? ", type);
        } while(confirm(""));

        return total;
}
</code></pre>

<p>In the <code>get_info_float()</code> function we could also have informed the user to enter <code>0</code> to abort request for values. That would perhaps be more user-friendly then a <em>"y/n request - one more?"</em> for each input.</p>

<h1>Result printing</h1>

<p>The next thing we can take a look at is printing information. I like to put these into separate functions. Usually there would have been the use of <code>struct</code> instead of loads of parameters, but lets go for it this time.</p>

<p>The two main print functions can be defined like this:</p>

<pre><code>static void print_result(
                float wages,
                float income_other,
                float interests,
                float dividends,
                float income_dep,
                float income_adj
) {
        int hdr_w = 29;

        fprintf(stdout,
                "\n\n"
                "-----------------------------------------------\n"
                "  %-*s: %.2f\n"
                "  %-*s: %.2f\n"
                "  %-*s: %.2f\n"
                "  %-*s: %.2f\n"
                "  %-*s: %.2f\n"
                "\n"
                "  %-*s: %.2f\n"
                "-----------------------------------------------\n"
                "\n"
                ,
                hdr_w, "YOUR WAGES", wages,
                hdr_w, "YOUR OTHER INCOME", income_other,
                hdr_w, "YOUR INTEREST", interests,
                hdr_w, "YOUR DIVIDEND", dividends,
                hdr_w, "YOUR INCOME AFTER DEPENDENTS", income_dep,
                hdr_w,
                (
                 income_adj &lt; 0 ?
                 "Your income tax RETURN is" :
                 "Your income tax OWED is"
                ),
                income_adj
        );
}
static void print_filing_stats(
              int files_s,
              int files_mj,
              int files_ms,
              int files_sh
) {
        int hdr_w = 44;

        fprintf(stdout,
                "%-*s: %i\n"
                "%-*s: %i\n"
                "%-*s: %i\n"
                "%-*s: %i\n"
                ,
                hdr_w, "Number of Singles Filing", files_s,
                hdr_w, "Number of Married Filing Jointly", files_mj,
                hdr_w, "Number of Married Filing Separately",files_ms,
                hdr_w, "Number of Single Head of Household Filing", files_sh
        );
}
</code></pre>

<p>Note the use of a variable to adjust the labels/headers namely by <code>hdr_w</code>. This makes it very easy to make nice prints as well as adjusting the width if we find ourselves expanding or removing print data.</p>

<p>I am also always very strict in the formatting as it makes it that much easier to maintain and keep track of.</p>

<p>If you are not used to the ternary operator, <code>income_adj &lt; 0 ? "one thing" : "other thing"</code> you can separate that out to <code>if</code>'s, but I find it rather powerful in combination with <code>printf</code>.</p>

<h1>Income groups</h1>

<p>Your biggest function is the income testing and re-calculation. As you are familiar with arrays we can simplify this a lot by using them. We declare one <em>adjustment</em> array for each filing type, and one holding the different income groups.</p>

<p>These could have been local to functions, but decided instead to have them in global scope and declare them as <code>const</code> â€“ as such they should not be modified. We could further set them <code>static</code> if you are familiar with that.</p>

<pre><code>const float adjust_SH[]  = { 0.000, 0.038, 0.074, 0.110, 0.138, 0.154, 0.350 };
const float adjust_S[]   = { 0.028, 0.075, 0.096, 0.135, 0.155, 0.174, 0.350 };
const float adjust_MJ[]  = { 0.000, 0.052, 0.083, 0.122, 0.146, 0.163, 0.350 };
const float adjust_MS[]  = { 0.023, 0.072, 0.089, 0.131, 0.152, 0.172, 0.350 };

const int income_group[] = { 6000, 9000, 15000, 21000, 25000, 30000 };

#define STATUS_S        1
#define STATUS_MJ       2
#define STATUS_MS       3
#define STATUS_SH       4

#define STATUS_MIN      1
#define STATUS_MAX      4

#define INCOME_GR_LEN   6
</code></pre>

<p>Instead of checking the income by <code>if</code>'s we can now make a short function doing the same by looping. Also note in your original code that you do not need to check for both bigger and lower in each <code>if</code> statement. You can simply start at bottom and say </p>

<pre><code>if (income &lt;= 6000)      ... do something
else if (income &lt;= 9000) ... do something etc.
</code></pre>

<p>As by <code>else if</code> you will not have to check that it is greater then. Anyhow, by array we can also do this:</p>

<pre><code>/*
 * Return index of adjust_XX array for income group.
 */
static int get_income_group(float income)
{
        int i;

        for (i = 0; i &lt; INCOME_GR_LEN; ++i) {
                if (income &lt;= income_group[i])
                        return i;
        }
        return i; /* As the adjust arrays are one item longer then the
                   * income_group array, this will give us last index. */
}
</code></pre>

<h1>Filing / Status types</h1>

<p>Instead of using the a bit cumbersome acronyms and check by <code>char</code> we print a short menu and ask for numeric input. As we already have the <code>get_float()</code> helper function this also makes it for a short and concise function:</p>

<pre><code>static int get_status() {
        int status = 0;

        fputs(  "\n"
                " Status types:\n"
                "   1. Single Fileing\n"
                "   2. Married Filing Jointly\n"
                "   3. Married Filing Separately\n"
                "   4. Single Head of Household Fileing\n"
                "\n"
                ,
                stdout
        );

        do {
                status = (int)get_float("Enter Status type number: ");
        } while (status &lt; STATUS_MIN &amp;&amp; status &gt; STATUS_MAX);

        return status;
}
</code></pre>

<h1>Adjusted income</h1>

<p>By this the final <code>adjust_income()</code> function can be written like:</p>

<pre><code>static float get_income_adjusted(
                float inc_dep,
                int status
) {
        float adjusted_income = 0;
        int inc_group;

        /* If we are to follow the same requirement as in the
         * "if" chain in the original function, we check that
         * income minus dep is above 0. */
        assert(inc_dep &gt; 0);
        if (inc_dep &lt; 0) {
                fprintf(stderr, "FAIL!\n");
                return 0.0;
        }

        inc_group    = get_income_group(inc_dep);

        /* Switch status / filing type and multiply by array 
         * value given index by income group */
        switch (status) {
        case STATUS_SH:
                adjusted_income = inc_dep * adjust_SH[inc_group];
                break;
        case STATUS_S:
                adjusted_income = inc_dep * adjust_S[inc_group];
                break;
        case STATUS_MJ:
                adjusted_income = inc_dep * adjust_MJ[inc_group];
                break;
        case STATUS_MS:
                adjusted_income = inc_dep * adjust_MS[inc_group];
                break;
        }

        return adjusted_income;
}
</code></pre>

<h1>Back to main()</h1>

<p>To stitch it together we can go back to <code>main()</code>. We already have discussed the print functions, and as such there is one tricky thing left, and that is the global counters for type of filing. We can solve this by yet another array, else we would likely have passed a <code>struct</code> by address, but lets do it this way:</p>

<pre><code>int main(void)
{
        int loop,
            filing,
            filings[] = {0, 0, 0, 0};

        loop = 1; // = confirm("Should we start? ");

        while (loop) {

                filing = process_filing();
                filings[filing] += 1;

                loop = confirm("Would you like to file another? ");
        }

        print_filing_stats(
                filings[0],
                filings[1],
                filings[2],
                filings[3]
        );

        fprintf(stderr, "\nPress enter to quit. ");
        getchar();

        return 0;
}
</code></pre>

<p>We use the <code>filings[] = {0, 0, 0, 0};</code> array to count type of filing returned by 
process filing. Look at the signature for <code>print_filing_stats()</code> to get how it is stitched together.</p>

<h1>Final count up</h1>

<p>Now the final piece of the puzzle is the <code>process_filing()</code> function. The main motor. By now it is simply a row of instructions and function calls that should be easy to follow.</p>

<pre><code>#define DEP_FACTOR       2800
int process_filing()
{
       float wages,
              income_other,
              interests,
              dividends,
              income_dep,
              income_adj,
              sum;
        int dependents,
            status;

        wages           = get_info_float("Wages");
        income_other    = get_info_float("Other income");
        interests       = get_info_float("Interest");
        dividends       = get_info_float("Dividends");

        dependents      = DEP_FACTOR * (int)get_info_float("Dependents");

        sum             = wages + income_other + interests + dividends;
        income_dep      = sum - dependents;

        status = get_status();

        income_adj = get_income_adjusted(
                        income_dep,
                        status
        );

        print_result(
                wages,
                income_other,
                interests,
                dividends,
                income_dep,
                income_adj
        );

        return status;
}
</code></pre>

<h1>Final note</h1>

<p>I have mostly looked at the structuring of the code, and not validated a correct result. Hope it or some of it can be useful anyhow.</p>
    </div>