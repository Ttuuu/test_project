<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First a special problem: Unicode 0 is a terminator char in strings in C/C++.
Modified UTF (i.e. UTF-8) deals with this by also doing the encoding for what officially should be one byte 0. As decoding poses no problem. You might consider this. For instance simply requiring modified UTF-16 on input as you check the terminator.</p>
<pre><code>    if (codepoint &lt;= 0x007F &amp;&amp; codepoint != 0) {
</code></pre>
<p>Now the actual review:</p>
<ul>
<li><p>(Optional) To cope with modified (<code>*str</code>) UTF-16, generating modified UTF-8:</p>
<pre><code>  if (codepoint &lt;= 0x007F &amp;&amp; codepoint != 0) {
</code></pre>
</li>
<li><p>You are now giving the result to cout using an extra nul byte as terminator.</p>
</li>
<li><p>There should be a byte output stream. <em>An output stream parameter could be appended to per byte, without intermediate arrays; and only at the end might need a NUL byte.</em> If <code>str</code> occupies N UTF bytes, then the result will at most need 2<em>N UTF bytes. _N UTF-16 bytes ~ to N/2 code points ~ max 2</em>N UTF-8 (N/2 * 4-byte sequences)._</p>
<p>That terminator should be added outside the loop.</p>
</li>
<li><p>Creating arrays is superfluous, immediately return the single bytes. <em>(This would be the case for delivering the result somewhat like <code>cout &lt;&lt; ((codepoint &gt;&gt; 6) &amp; 0x1F) | 0xC0</code>)</em></p>
</li>
<li><p>You nicely validate the input for illegal UTF-16 chars above the max. In java one would throw an exception, you just discard the char.</p>
</li>
<li><p><em>(A matter of taste)</em> Maybe consider an API with a string length as input parameter instead of relying on a NUL terminator. If the area of application is file based, that
would even be more natural.</p>
</li>
</ul>
    </div>