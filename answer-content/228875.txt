<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, you can get rid of the <code>if</code>. I'd leverage a <code>Function mapToOutput</code>, with value either <code>x -&gt; x</code> (no change) or <code>x -&gt; String.valueOf(x) + System.getProperty("line.separator")</code> (your other logic).</p>

<p>Keep in mind that it may not actually be desirable to do this, though - it adds complexity, while only saving you a little repetition. I've done it below, and also added some comments on the rest of your code:</p>

<pre><code>public class ByteStreamTest {

    private static File input;
    private static File output;
    private static Function mapToOutput;

    public static void main(String args[]) throws Exception {
        new ByteStreamTest().write(true);
        new ByteStreamTest().write(false);     
    }

    public ByteStreamTest() {}

    public void write(boolean asText) {

        input = new File(getClass().getClassLoader().getResource("input.txt").getPath());

        if (asText) {
            output = new File(getClass().getClassLoader().getResource("output-text.txt").getPath());
            mapToOutput = x -&gt; x; // could replace with Function.identity()
        } else {
            output = new File(getClass().getClassLoader().getResource("output-bytes.txt").getPath());
            mapToOutput = x -&gt; String.valueOf(x) + System.getProperty("line.separator");
        }
</code></pre>

<p>The block above is effectively setting the <em>parameters</em> for the block below:</p>

<pre><code>        FileInputStream in = null;
        FileWriter fw = null;
</code></pre>

<p>These could go in a try-with-resources, e.g. <code>try (FileInputStream in = new FileInputStream(input); FileWriter fw = new FileWriter(output)) { ...</code></p>

<pre><code>        try {

            in = new FileInputStream(input);
            fw = new FileWriter(output);
</code></pre>

<p>I'm a big fan of either <code>fr</code> and <code>fw</code> (in this case you're not using a <code>FileReader</code>, so the point is moot), <strong>or</strong> <code>in</code> and <code>out</code>, but not the two mixed together :)</p>

<pre><code>            int c;
</code></pre>

<p>Why <code>c</code>? It's not a great name.</p>

<pre><code>            while ((c = in.read()) != -1) {
                fw.write(mapToOutput.apply(c));
            }

            in.close();
            fw.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
</code></pre>

<p>It would be good to have a <code>finally</code> block to close your resources, or else create them in a try-with-resources. This try-catch <em>does not</em> guarantee your resources will be closed.</p>

<pre><code>    }
}
</code></pre>
    </div>