<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>There is no docstring. What kind of object is a <code>LetterCounter</code>?</p></li>
<li><p>The <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="noreferrer">Python style guide</a> recommends restricting lines to 79 characters. If you did this, then we wouldn't have to scroll the code horizontally to read it.</p></li>
<li><p>The <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="noreferrer">Python style guide</a> recommends naming constants (like <code>superscript_digits</code>) using <code>ALL_CAPITALS</code>. It's not compulsory to follow this guide but it makes it easier to collaborate with other Python programmers.</p></li>
<li><p>Instead of:</p>

<pre><code>superscript_digits = ''.join(['\u2070','\u00b9','\u00b2','\u00b3','\u2074','\u2075','\u2076','\u2077','\u2078','\u2079'])
</code></pre>

<p>add an <a href="https://docs.python.org/3/reference/lexical_analysis.html#encoding-declarations" rel="noreferrer">encoding declaration</a> to the start of the source code:</p>

<pre><code># -*- coding: utf-8 -*-
</code></pre>

<p>and write:</p>

<pre><code>SUPERSCRIPT_DIGITS = "⁰¹²³⁴⁵⁶⁷⁸⁹"
</code></pre></li>
<li><p>The function <code>int_to_superscript</code> is short, and only called once, so it would make sense to inline it at its single point of use.</p></li>
<li><p>There is no need for the call to <code>list</code> in <code>sorted(list(self.items()))</code>: <a href="https://docs.python.org/3/library/functions.html#sorted" rel="noreferrer"><code>sorted</code></a> accepts an iterable.</p></li>
<li><p>Referring to tuple elements by index, for example <code>x[0]</code> and <code>x[1]</code>, makes it hard for the reader to understand what the elements are. It is clearer to use <em>tuple unpacking</em> to assign meaningful names to the elements. So instead of:</p>

<pre><code>value_count = sorted(list(self.items()))
return ' '.join( '{}{}'.format(x[0], LetterCounter.int_to_superscript(x[1])) for x in value_count )
</code></pre>

<p>write something like:</p>

<pre><code>return " ".join("{}{}".format(key, str(count).translate(SUPERSCRIPT_TRANS))
                for key, count in sorted(self.items())
</code></pre>

<p>or, if you are happy to use <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="noreferrer">formatted string literals</a>:</p>

<pre><code>return " ".join(f"{key}{str(count).translate(SUPERSCRIPT_TRANS)}"
                for key, count in sorted(self.items()))
</code></pre></li>
</ol>

<h3>2. Revised code</h3>

<pre><code># -*- coding: utf-8 -*-

from collections import Counter

# Code point mapping from digits to superscript digits.
SUPERSCRIPT_TRANS = str.maketrans("0123456789", "⁰¹²³⁴⁵⁶⁷⁸⁹")

class LetterCounter(Counter):
    """Subclass of Counter with readable string conversion using sorted
    ordering of keys and superscript digits for counts.

    &gt;&gt;&gt; print(LetterCounter("HELLOWORLD"))
    D¹ E¹ H¹ L³ O² R¹ W¹

    """
    def __str__(self):
        return " ".join(f"{key}{str(count).translate(SUPERSCRIPT_TRANS)}"
                        for key, count in sorted(self.items()))
</code></pre>

<h3>3. Answers to questions</h3>

<ol>
<li><p>If you want a mapping with sorted views of its keys and items, then you need the <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="noreferrer">sortedcontainers</a> package, which has the <a href="http://www.grantjenks.com/docs/sortedcontainers/sorteddict.html#sortedcontainers.SortedItemsView" rel="noreferrer"><code>SortedItemsView</code></a> that you are looking for. (The package has no <code>SortedCounter</code>, but it is not difficult to write one by subclassing <a href="http://www.grantjenks.com/docs/sortedcontainers/sorteddict.html" rel="noreferrer"><code>SortedDict</code></a>.)</p></li>
<li><p>It is rarely a good idea to leave dead code (like the subscripts in your example). The problem is that dead code does not get tested, and so as the live code changes it is easy to forget to make corresponding changes to the dead code, so that when you come to try to resurrect the dead code you find that it is broken.</p></li>
<li><p>The <a href="http://www.grantjenks.com/docs/sortedcontainers/sorteddict.html" rel="noreferrer">pickling protocol</a> uses its own special methods like <code>__getstate__</code>, not <code>__repr__</code>.</p></li>
<li><p>There are situations in which it's useful for <code>eval(repr(o))</code> to return an object similar to <code>o</code>, but otherwise you are free to redefine <code>__repr__</code> however you like.</p></li>
</ol>
    </div>