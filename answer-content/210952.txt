<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome!</p>

<p>You may be interested in viewing <a href="https://golang.org/src/container/list/list.go" rel="nofollow noreferrer">the Go API implementation of a linked list</a>. Their implementation is not restricted to just integer node data.</p>

<h2>Use <code>go fmt</code></h2>

<p>A few of your lines have trailing whitespace. Likewise, some of your formatting isn't standard for Go.</p>

<p>If you run <code>go fmt</code> on the source code, it cleans all that up for you.</p>

<h2>Don't unnecessarily export things</h2>

<p>Your type <code>LinkedList</code> is exported. If this is for a library, you should add a comment explaining it's usage (used to generate documentation: see <a href="https://blog.golang.org/godoc-documenting-go-code" rel="nofollow noreferrer">Godoc</a>). If it's not for a library, it shouldn't be exported.</p>

<p>Going forward, I'll assume it's not meant for a library. Otherwise the fields of <code>LinkedList</code> also need to be exported, and the <code>node</code> type as well.</p>

<h2>Avoid extra typing when initializing a <code>struct</code></h2>

<p>When initializing a <code>struct</code>, you don't have to initialize the fields to values that would already be the default.</p>

<p>See <a href="https://golang.org/ref/spec#Composite_literals" rel="nofollow noreferrer">Â§Composite Literals</a> in the language specification for more details.</p>

<pre><code>n := node{
    item: val,
    next: nil,
}
</code></pre>

<p>Can be written as:</p>

<pre><code>n := node{
    item: val,
}
</code></pre>

<p>And</p>

<pre><code>l := linkedList{
    first: nil,
    last:  nil,
}
</code></pre>

<p>Becomes</p>

<pre><code>l := linkedList{}
</code></pre>

<h2>Combine variable declarations:</h2>

<p>We <a href="https://golang.org/ref/spec#Variable_declarations" rel="nofollow noreferrer">can combine</a> multiple variable declarations under one <code>var</code> keyword.</p>

<pre><code>var ptr2 *node
var ptr3 *node
var prev *node
</code></pre>

<p>Becomes either</p>

<pre><code>var ptr2, ptr3, prev *node
</code></pre>

<p>Or</p>

<pre><code>var (
    ptr2 *node
    ptr3 *node
    prev *node
)
</code></pre>

<p>I prefer the shorter notation most times when the variables are of the same type, but either is better.</p>

<h2>Use the specific <code>Printf</code> verb</h2>

<p>You use the <code>%v</code> verb, but here we know at compile time that we're printing integers. You can safely use <code>%d</code> instead.</p>

<h2>Return an <code>error</code> instead of <code>panic()</code>ing</h2>

<p>Unless you expect to always <code>recover()</code> from the <code>panic()</code>, you should return an <code>error</code> value instead. This is more common.</p>

<pre><code>func (l *linkedList) swapLL() {
    if l.first == nil {
        panic("First element cannot be null")
    }

    if l.first.next == nil {
        return
    }

    //...
}
</code></pre>

<p>Becomes</p>

<pre><code>func (l *linkedList) swapLL() error {
    if l.first == nil {
        return fmt.Errorf("List cannot be empty")
    }

    if l.first.next == nil {
        return nil
    }

    //...

    return nil
}
</code></pre>

<p>This now makes it easy to check for the error:</p>

<pre><code>if err := l.swapLL(); err != nil {
    log.Fatal(err)
}
</code></pre>

<h2>Conclusion</h2>

<p>Here is the final source I ended up with.</p>

<pre><code>package main

import (
    "fmt"
    "log"
)

type linkedList struct {
    first, last *node
}

type node struct {
    item int
    next *node
}

func (l *linkedList) add(val int) {
    n := node{
        item: val,
    }

    if l.first == nil {
        l.last = &amp;n
        l.first = &amp;n
    } else {
        l.last.next = &amp;n
        l.last = &amp;n
    }
}

func (l *linkedList) traverse() {
    for n := l.first; n != nil; n = n.next {
        fmt.Printf("%d ", n.item)
    }

    fmt.Println()
}

func (l *linkedList) swapLL() error {
    if l.first == nil {
        return fmt.Errorf("List cannot be empty")
    }

    if l.first.next == nil {
        return nil
    }

    ptr1 := l.first

    var ptr2, ptr3, prev *node

    for ptr1 != nil &amp;&amp; ptr1.next != nil {
        //Allocate resources
        ptr2 = ptr1.next
        ptr3 = ptr2.next

        //swap
        ptr2.next = ptr1
        ptr1.next = ptr3

        //hook to the previous pair
        if prev == nil {
            l.first = ptr2
        } else {
            prev.next = ptr2
        }

        //advance
        prev = ptr1
        ptr1 = ptr3
    }

    return nil
}

func main() {
    l := linkedList{}

    l.add(10)
    l.add(20)
    l.add(30)
    l.add(40)

    l.traverse()

    if err := l.swapLL(); err != nil {
        log.Fatal(err)
    }

    l.traverse()
}
</code></pre>

<p>Hope this helps!</p>
    </div>