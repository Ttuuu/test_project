<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the comments below, where a family of operators all follow a common pattern, I've just addressed one of them; understand that to mean that my comments likely apply equally to the others of that family.</p>

<h2>Prefer initialization of members to assignment</h2>

<p>Instead of</p>

<pre><code>Rational::Rational()
{
    _p = 0;
    _q = 1;
}
</code></pre>

<p>we normally write</p>

<pre><code>Rational::Rational()
  : _p{0},
    _q{1}
{
}
</code></pre>

<p>And in modern C++, we delegate to a different constructor:</p>

<pre><code>Rational::Rational()
    : Rational{0}
{
}
</code></pre>

<p>In truth, if we controlled the interface, we'd just declare the first argument with a default of <code>0</code> and not even need to write a default constructor:</p>

<pre><code>  Rational(long long = 0, long long = 1);
</code></pre>

<p>The other constructors should also initialize rather than assign:</p>

<pre><code>Rational::Rational(long long p, long long Q)
    : _p{p},
      _q{Q}
{
    validate(_p, _q);
}

Rational::Rational(const Rational&amp; rat)
    : _p{rat._p},
      _q{rat._q}
{
}
</code></pre>

<p>Alternatively, delegate the copy constructor, too:</p>

<pre><code>Rational::Rational(const Rational&amp; rat)
    : Rational{rat._p, rat._q}
{
}
</code></pre>

<h2>Prefer standard exception types</h2>

<p>Here you throw a <code>const char*</code>:</p>

<pre><code>if (rat._p == 0)
    throw "Division by zero not allowed";
</code></pre>

<p>Instead, we can use the Standard Library exception type for this:</p>

<pre><code>if (rat._p == 0)
    throw std::domain_error{"Division by zero not allowed"};
</code></pre>

<p>You'll need to include <code>&lt;stdexcept&gt;</code> for this.</p>

<h2>Inline the argument validation</h2>

<p>Instead of a stand-alone <code>validate()</code> function, it's clearer to test the argument in the constructor:</p>

<pre><code>Rational::Rational(long long p, long long Q)
    : _p{p},
      _q{Q}
{
    if (_q == 0)
        throw std::domain_error{"Zero Denominator"};
}
</code></pre>

<p>If we use the constructor in the input stream operator, then there's no need for <code>validate()</code> any more, and we've reduced duplication even further:</p>

<pre><code>istream&amp; operator&gt;&gt; (istream&amp; is, Rational&amp; rat)
{
    long long p, q;
    is &gt;&gt; p &gt;&gt; q;
    rat = {p, q};
    return is;
}
</code></pre>

<h2>No need to call <code>simplify()</code> on already-reduced values</h2>

<p>All the binary arithmetic operators follow the same (correct) pattern:</p>

<pre><code>Rational Rational::operator+ (const Rational&amp; rat)
{
    Rational result(*this);

    result += rat;
    result.simplify();

    return result;
}
</code></pre>

<p>The assignment operator (here, <code>+=</code>) has already called <code>simplify()</code>, so there's no need for us to repeat it:</p>

<pre><code>Rational Rational::operator+ (const Rational&amp; rat)
{
    return Rational{*this} += rat;
}
</code></pre>

<h2>But you should call <code>simplify()</code> when constructing:</h2>

<pre><code>Rational::Rational(long long p, long long Q)
    : _p{p},
      _q{Q}
{
    if (_q == 0)
        throw std::domain_error{"Zero Denominator"};
    simplify();
}
</code></pre>

<p>If you don't do that, then <code>Rational{1,2} != Rational{2,4}</code> for example.</p>

<h2>You can cheat with the overloads of binary operators</h2>

<p>The interface makes you overload the binary operators with both <code>const Rational&amp;</code> and <code>long long</code>.  But there's a default promotion from <code>long long</code> to <code>Rational</code> so that wasn't really necessary (and isn't any more efficient if the compiler is doing its job properly).  We can explicitly construct a <code>Rational</code> to save us repeating ourselves:</p>

<pre><code>Rational Rational::operator+(long long num) const
{
    return *this + Rational{num};
}

Rational operator+(long long num, const Rational&amp; rat)
{
    return Rational{num} + rat;
}
</code></pre>

<p>At least we could, if the header had declared <code>operator+()</code> properly (with <code>const</code>):</p>

<pre><code>  Rational operator+(const Rational&amp;) const;
</code></pre>

<p>Oddly, the <code>long long</code> overload <em>is</em> declared const, so perhaps that was just to trip you up.</p>

<h2>Simplify expressions</h2>

<p>Here's a very long-winded way to write a simple test:</p>

<pre><code>bool Rational::operator== (const Rational&amp; rat) const
{
    bool result;

    if ((this-&gt;_p == rat._p) &amp;&amp; (this-&gt;_q == rat._q))
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return result;
}
</code></pre>

<p>I'd write that without the temporary, as:</p>

<pre><code>bool Rational::operator==(const Rational&amp; rat) const
{
    return _p == rat._p &amp;&amp; _q == rat._q;
}
</code></pre>

<h2>Bug: comparison operators</h2>

<p>(Conventionally, we implement our comparators in terms of <code>operator&lt;()</code> and <code>operator==</code>; many algorithms require only <code>&lt;</code>, and <code>using namespace std::rel_ops</code> can allow us to default the others.  But I'll go with your approach).</p>

<p>This is integer division:</p>

<pre><code>if (_p / t_q &gt; rat._p / rat._q)
</code></pre>

<p>It's almost certainly not what you meant, as it will report <code>1/2</code> and <code>1/3</code> as equal (both expressions truncate, and <code>0 == 0</code>).  Perhaps</p>

<pre><code>return double(_p)/q &gt; double(rat._p)/rat.q;
</code></pre>

<p>(I've simplified to a simple <code>return</code>, as for <code>operator==()</code> above).  If you had control over the header, you could could consider adding</p>

<pre><code>explicit operator double() const { return double(_p)/q; }
</code></pre>

<p>Then the comparison becomes:</p>

<pre><code>return static_cast&lt;double&gt;(*this) &gt; static_cast&lt;double&gt;(rat);
</code></pre>

<p>An alternative approach is to use the binary <code>operator-()</code> that you wrote:</p>

<pre><code>auto diff = *this - rat;
# We know the denominator is kept positive
return diff._p &gt; 0;
</code></pre>

<h2>A bug in increment/decrement</h2>

<pre><code>Rational&amp; Rational::operator++()
{
    this-&gt;_p++;
    this-&gt;_q++;

    return *this;
}
</code></pre>

<p>This should add 1 to the value.  Either write it as</p>

<pre><code>Rational&amp; Rational::operator++()
{
     return (*this) += 1;
}
</code></pre>

<p>Or re-write the arithmetic:</p>

<pre><code>Rational&amp; Rational::operator++()
{
    _p += _q;
    return *this;
}
</code></pre>

<h2>Write unary operators in terms of the binary ones</h2>

<p>Having written binary operators, it's simplest to re-use them for the unary ones, using the identities <code>+x == x</code> and <code>-x == 0-x</code>:</p>

<pre><code>Rational Rational::operator-() const
{
    return 0 - *this;
}

Rational Rational::operator+() const
{
    return *this;
}
</code></pre>

<h2>Simplify <code>pow()</code></h2>

<p>You don't need to special-case <code>exp==0</code>, if you start with <code>result = 1;</code> and multiply successively:</p>

<pre><code>Rational Rational::pow (unsigned exp) const
{
    Rational result{1}

    for (unsigned i = 0;  i &lt; exp;  ++i)
        result *= *this;

    return result;
}
</code></pre>

<p>There are more efficient methods for large <code>exp</code>, but I'll leave you to research that if you're interested.</p>

<h2>Prefer iteration to recursion</h2>

<p>Euclid's Algorithm is naturally recursive, but C++ works better with iterative algorithms, as this conserves stack space.  It may be that your compiler performs tail-call elimination, but that's not mandated by C++ specifications.  If it doesn't, or if you want to help it, or simply improve your understanding, you could convert it to iterative form:</p>

<pre><code>long long gcd(long long p, long long q)
{
    while (q) {
        auto t = p%q;
        p = q;
        q = t;
    }
    return p;
}
</code></pre>

<p>or</p>

<pre><code>long long gcd(long long p, long long q)
{
    while (q) {
        std::swap(p, q);
        q %= p;
    }
    return p;
}
</code></pre>

<p>I've also changed the return type to match the possible results.</p>

<p>It's also a good idea to give <code>gcd</code> internal linkage, so it doesn't collide with any other definition when used in a program.  You can declare it <code>static</code> or put it into an anonymous namespace.</p>

<h2>Check input stream when reading</h2>

<p>The <code>&gt;&gt;</code> stream operator ignores errors in reading to <code>p</code> and <code>q</code>.  This can cause it to try to construct a <code>Rational</code> from uninitialised data.  Also, there's a bug, because it doesn't read the separating <code>:</code> that you write (I found this using unit test - see end of answer):</p>

<pre><code>std::istream&amp; operator&gt;&gt;(std::istream&amp; is, Rational&amp; rat)
{
    long long p, q;
    char sep;
    if (is &gt;&gt; p &gt;&gt; sep &gt;&gt; q &amp;&amp; sep == ':')
        rat = {p, q};
    return is;
}
</code></pre>

<h2><s>A bug somewhere</s></h2>

<p>The very first test I wrote, failed:</p>

<pre><code>int main()
{
    Rational r1{1,4};
    Rational r2{2,4};

    return (r1 + r2 != Rational{3/4});
}
</code></pre>

<p>But this was a bug in the test!  <code>Rational{3/4}</code> means <code>Rational{0}</code> (integer division), but I meant <code>Rational{3,4}</code>.  I improved the test:</p>

<pre><code>int verify(Rational actual, Rational expected, const char *expression)
{
    if (actual != expected)
        std::cerr &lt;&lt; expression &lt;&lt; " was " &lt;&lt; actual &lt;&lt; " but should be " &lt;&lt; expected &lt;&lt; '\n';
    return (actual != expected);
}

#define TEST(a, b) verify(a, b, #a)

int main()
{
    Rational r1{1,4};
    Rational r2{2,4};

    return TEST(r1 + r2, Rational{3}/Rational{4})
        +  TEST(2 * r1 - r2, 0);
}
</code></pre>

<p>This prints diagnostics for failing tests, and is a step on the way towards employing a real unit-test framework:</p>

<blockquote>
  <p>r1 + r2 was 3:4 but should be 0:1</p>
</blockquote>

<p>When I fixed the error, I got a nice clean build+run.</p>

<hr>

<h1>If you were allowed to change the class definition...</h1>

<p>I know it's not up for review, but I would fix the following issues:</p>

<h2>Don't <code>use namespace std;</code></h2>

<p>You know about this one</p>

<h2>Don't include <code>&lt;iostream&gt;</code> in headers</h2>

<p>There's <code>&lt;iosfwd&gt;</code> that provides forward definitions of classes including <code>ostream</code> and <code>istream</code>.</p>

<h2>Constructors should be <code>constexpr</code></h2>

<pre><code>  constexpr Rational (long long p = 0, long long Q = 1);
  constexpr Rational (const Rational&amp;);
</code></pre>

<p>This allows us to create user-defined literals, e.g.</p>

<pre><code>constexpr Rational operator""_r(unsigned long long p)
{
    // default conversion
    return p;
}
</code></pre>

<p>Then we can write <code>1_r/4</code> or <code>1/4_r</code> instead of <code>Rational{1,4}</code> and so on.</p>

<h2>Use <code>constexpr</code> elsewhere that you can</h2>

<p>Most of the methods depend only on their arguments, so can be declared <code>constexpr</code>.  This can transfer computation from run-time to compile-time, and is desirable.  It's also necessary for user-defined literals to work.</p>

<h2>Allow any integer type to convert to <code>Rational</code></h2>

<p>We can do this with Concepts:</p>

<pre><code>template&lt;typename T&gt;
constexpr Rational::Rational(T p, T q) requires (std::is_integral&lt;T&gt;::value)
    : _p{p},
      _q{q}
{
    if (_q == 0)
        throw std::domain_error{"Zero Denominator"};
    simplify();
}
</code></pre>

<p>If you don't have Concepts, you can use <code>std::enable_if</code> instead, but it's noticeably more verbose.</p>

<p>One problem that can now arise is that <code>unsigned long long</code> won't necessarily fit, so we'll have to have to test for overflow, or provide an overload:</p>

<pre><code>constexpr Rational::Rational(unsigned long long p, unsigned long long q)
    : Rational{static_cast&lt;long long&gt;(p), static_cast&lt;long long&gt;(q)}
{
    // Were the static_cast&lt;&gt; both valid?
    constexpr unsigned long long max_ll =  std::numeric_limits&lt;long long&gt;::max();
    if (p &gt; max_ll || q &gt; max_ll)
        throw std::domain_error{"value out of range"};
}
</code></pre>

<h1>Reduce the binary operators</h1>

<p>The binary operators that take integers as the second argument are not required, as default promotions will convert the argument to a <code>Rational</code>.  I suspect they were declared so that a plain <code>int</code> would convert (the compiler is not allowed a two-step conversion <code>int</code> -&gt; <code>long long</code> -&gt; <code>Rational</code>, but we've now provided a constructor taking any integer type, which addresses that problem.</p>

<p>The binary operators that take integers as the first argument don't need to be friends, as they can all be re-written using the public interface (and they too can be generic).  You can either promote the first argument to <code>Rational</code> or you can re-order the arguments; here's one of each:</p>

<pre><code>template&lt;typename T&gt;
Rational operator-(T a, Rational b)
{
    return -b + a;
}

template&lt;typename T&gt;
Rational operator*(T a, Rational b)
{
    return Rational{a} * b;
}
</code></pre>

<p>You can add optionally add <code>requires std::is_integral&lt;T&gt;::value</code> if you're using Concepts (if you don't, a violation will be reported from the <code>Rational</code> constructor, so it doesn't add significant value).</p>

<h2>Let C++ declare your comparison operators</h2>

<p>If you provide <code>operator&lt;</code> and <code>operator==</code>, you can get all the others by <code>using namespace rel_ops;</code> where you want them.</p>

<p>When we move to C++20, we can use the new "spaceship" operator <code>&lt;=&gt;</code> instead; that simplifies our work even further.</p>

<h2>Make <code>simplify()</code> return a reference to the object</h2>

<p>Most places where <code>simplify</code> is called are of the form:</p>

<pre><code>simplify();
return *this;
</code></pre>

<p>By allowing <code>simplify()</code> to return that reference, we can reduce all those to</p>

<pre><code>return simplify();
</code></pre>

<hr>

<h1>My version</h1>

<p>I've made nearly all the changes above (including the changes to the class definition that were out of scope for you) and I'm assuming C++17 with concepts.  My compilation command is</p>

<pre class="lang-sh prettyprint-override"><code>g++ -std=c++17 -fPIC -g \
    -Wall -pedantic -Wextra -Wwrite-strings -Wno-parentheses -Weffc++ \
    -fconcepts
</code></pre>

<h2>Header file</h2>

<pre><code>#ifndef _RATIONAL_H_
#define _RATIONAL_H_

#include &lt;iosfwd&gt;
#include &lt;stdexcept&gt;
#include &lt;type_traits&gt;
#include &lt;utility&gt;

class Rational
{
    long long p;
    long long q;

    constexpr Rational&amp; simplify();

public:
    template&lt;typename T&gt; constexpr Rational(T p, T q = 1) requires std::is_integral&lt;T&gt;::value;
    constexpr Rational(unsigned long long p = 0, unsigned long long q = 1);
    constexpr Rational(const Rational&amp;);

    // assignment operators
    constexpr Rational&amp; operator=(const Rational&amp;);
    constexpr Rational&amp; operator+=(const Rational&amp;);
    constexpr Rational&amp; operator-=(const Rational&amp;);
    constexpr Rational&amp; operator*=(const Rational&amp;);
    constexpr Rational&amp; operator/=(const Rational&amp;);

    // arithmetic operators
    constexpr Rational operator+(const Rational&amp;) const;
    constexpr Rational operator-(const Rational&amp;) const;
    constexpr Rational operator*(const Rational&amp;) const;
    constexpr Rational operator/(const Rational&amp;) const;
    constexpr Rational operator-() const;
    constexpr Rational operator+() const;

    // comparison operators
    constexpr bool operator==(const Rational&amp;) const;
    constexpr bool operator&lt;(const Rational&amp;) const;

    // increment and decrement operators
    constexpr Rational operator++(int);
    constexpr Rational operator--(int);
    constexpr Rational&amp; operator++();
    constexpr Rational&amp; operator--();

    // type conversion
    constexpr explicit operator double();

    // stream operators
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const Rational&amp;);
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp;, Rational&amp;);

    // arithmetic functions
    constexpr Rational pow(unsigned exp) const;
    constexpr Rational inverse() const;
};


template&lt;typename T&gt;
constexpr Rational::Rational(T p, T q) requires (std::is_integral&lt;T&gt;::value)
    : p{p},
      q{q}
{
    if (q == 0)
        throw std::domain_error{"zero Denominator"};
    simplify();
}

template&lt;typename T&gt;
constexpr Rational operator+(T a, Rational b)
{
    return Rational{a} + b;
}

template&lt;typename T&gt;
constexpr Rational operator-(T a, Rational b)
{
    return Rational{a} - b;
}

template&lt;typename T&gt;
constexpr Rational operator*(T a, Rational b)
{
    return Rational{a} * b;
}

template&lt;typename T&gt;
constexpr Rational operator/(T a, Rational b)
{
    return Rational{a} / b;
}

template&lt;typename T&gt;
constexpr bool operator==(T a, Rational b)
{
    return Rational{a} == b;
}

template&lt;typename T&gt;
constexpr bool operator&lt;(T a, Rational b)
{
    return Rational{a} &lt; b;
}

#endif
</code></pre>

<h2>Implementation</h2>

<pre><code>#include "rational.h"
#include &lt;iostream&gt;
#include &lt;limits&gt;

constexpr Rational operator""_r(unsigned long long p)
{
    // default conversion
    return p;
}

namespace {
    constexpr long long gcd(long long p, long long q)
    {
        return q ? gcd(q, p%q) : p;
    }
}

constexpr Rational::Rational(unsigned long long p, unsigned long long q)
    : Rational{static_cast&lt;long long&gt;(p), static_cast&lt;long long&gt;(q)}
{
    // Retrospectively justify static_cast&lt;&gt; above
    constexpr unsigned long long max_ll = std::numeric_limits&lt;long long&gt;::max();
    if (p &gt; max_ll || q &gt; max_ll)
        throw std::domain_error{"value out of range"};
}

constexpr Rational::Rational(const Rational&amp; rat)
    : Rational{rat.p, rat.q}
{
}

constexpr Rational&amp; Rational::simplify()
{
    // Fix negative denominators
    if (q &lt; 0) {
        p = -p;
        q = -q;
    }

    // Reduce by greatest common divisor
    const auto denom = gcd(p, q);
    p /= denom;
    q /= denom;

    return *this;
}

constexpr Rational&amp; Rational::operator=(const Rational&amp; rat)
{
    p = rat.p;
    q = rat.q;
    return *this;
}

constexpr Rational&amp; Rational::operator+=(const Rational&amp; rat)
{
    p = p * rat.q + q * rat.p;
    q *= rat.q;
    return simplify();
}

constexpr Rational&amp; Rational::operator-=(const Rational&amp; rat)
{
    p = p * rat.q - q * rat.p;
    q *= rat.q;
    return simplify();
}

constexpr Rational&amp; Rational::operator*=(const Rational&amp; rat)
{
    p *= rat.p;
    q *= rat.q;
    return simplify();
}

constexpr Rational&amp; Rational::operator/=(const Rational&amp; rat)
{
    if (rat.p == 0)
        throw std::domain_error{"Division by zero not allowed"};
    return *this *= rat.inverse();
}

constexpr Rational Rational::operator+(const Rational&amp; rat) const
{
    return Rational{*this} += rat;
}

constexpr Rational Rational::operator-(const Rational&amp; rat) const
{
    return Rational{*this} -= rat;
}

constexpr Rational Rational::operator*(const Rational&amp; rat) const
{
    Rational result(*this);

    result *= rat;
    result.simplify();

    return result;
}

constexpr Rational Rational::operator/(const Rational&amp; rat) const
{
    Rational result(*this);

    result /= rat;
    result.simplify();

    return result;
}

constexpr Rational Rational::operator-() const
{
    return 0 - *this;
}

constexpr Rational Rational::operator+() const
{
    return *this;
}


constexpr bool Rational::operator==(const Rational&amp; rat) const
{
    return p == rat.p &amp;&amp; q == rat.q;
}

constexpr bool Rational::operator&lt;(const Rational&amp; rat) const
{
    return p * rat.q  &lt;  q * rat.p;
}


constexpr Rational Rational::operator++(int) // Postfix
{
    Rational temp{*this};
    p += q;
    return temp;
}

constexpr Rational Rational::operator--(int) // Postfix
{
    Rational temp{*this};
    p -= q;
    return temp;
}

constexpr Rational&amp; Rational::operator++()
{
    return *this += 1;
}

constexpr Rational&amp; Rational::operator--()
{
    return *this -= 1;
}

constexpr Rational::operator double()
{
    return static_cast&lt;double&gt;(p) / q;
}


std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Rational&amp; rat)
{
    return os &lt;&lt; rat.p &lt;&lt; ":" &lt;&lt; rat.q;
}

std::istream&amp; operator&gt;&gt;(std::istream&amp; is, Rational&amp; rat)
{
    long long p, q;
    char sep;
    if (is &gt;&gt; p &gt;&gt; sep &gt;&gt; q &amp;&amp; sep == ':')
        rat = {p, q};
    return is;
}

constexpr Rational Rational::pow(unsigned exp) const
{
    auto x = *this;
    Rational r{1};
    for (;  exp;  exp /= 2) {
        if (exp%2) r *= x;
        x *= x;
    }
    return r;
}

constexpr Rational Rational::inverse() const
{
    return {q, p};
}
</code></pre>

<h2>Tests</h2>

<pre><code>#include "rational.h"
#include &lt;sstream&gt;
using namespace std::rel_ops;

int verify(bool result, Rational aval, Rational bval, const char *a, const char *op, const char *b, const char *file, int line)
{
    if (!result)
        std::cerr &lt;&lt; file &lt;&lt; ":" &lt;&lt; line &lt;&lt; ": "
                  &lt;&lt; a &lt;&lt; " " &lt;&lt; op &lt;&lt; " " &lt;&lt; b &lt;&lt; "  --  "
                  &lt;&lt; aval &lt;&lt; " " &lt;&lt; op &lt;&lt; " " &lt;&lt; bval &lt;&lt; "\n";
    return !result;
}

template&lt;typename A, typename B&gt;
int verify(A aval, B bval, const char *a, const char *b, const char *file, int line)
{
    if (!(aval == bval))
        std::cerr &lt;&lt; file &lt;&lt; ":" &lt;&lt; line &lt;&lt; ": "
                  &lt;&lt; a &lt;&lt; " == " &lt;&lt; b &lt;&lt; "  --  "
                  &lt;&lt; aval &lt;&lt; " == " &lt;&lt; bval &lt;&lt; "\n";
    return !(aval == bval);
}

#define TEST_OP(a, op, b) verify((a) op (b), (a), (b), #a, #op, #b, __FILE__, __LINE__)
#define TEST_EQUAL(a, b) verify((a), (b), &amp;#a[0], &amp;#b[0], &amp;__FILE__[0], __LINE__)

int main()
{
    int errors{};

    errors += TEST_OP(Rational(1,2), ==, 1_r/2);
    errors += TEST_OP(Rational(1,2), ==, 1/2_r);
    errors += TEST_OP(Rational(1,2), ==, 2/4_r);
    errors += TEST_OP(2/4_r, ==, 1/2_r);
    errors += TEST_OP(-1/2_r, ==, 1/-2_r);
    errors += TEST_OP(2u, ==, 2_r);
    errors += TEST_OP(2_r, ==, 2u);
    errors += TEST_OP(Rational(1,2), !=, 1/3_r);

    errors += TEST_OP(1/3_r, &lt;, 2/5_r);
    errors += TEST_OP(2/5_r, &gt;, 1/3_r);
    errors += TEST_OP(1/3_r, &lt;=, 2/5_r);
    errors += TEST_OP(1/3_r, &lt;=, 1/3_r);


    errors += TEST_EQUAL(1/3_r + 1/4_r, 7/12_r);
    errors += TEST_EQUAL(1/4_r - 1/3_r, -1/12_r);
    errors += TEST_EQUAL(1/5_r * 5, 1);
    errors += TEST_EQUAL(-2_r * -2_r, 4);
    errors += TEST_EQUAL(1/5_r / 3, 1/15_r);

    Rational x;
    errors += TEST_EQUAL(x, 0);
    errors += TEST_EQUAL(++x, 1);
    errors += TEST_EQUAL(x++, 1);
    errors += TEST_EQUAL(x, 2);
    errors += TEST_EQUAL(x = 1/2_r, 1/2_r);
    errors += TEST_EQUAL(++x, 3/2_r);
    errors += TEST_EQUAL(++x, 5/2_r);
    errors += TEST_EQUAL(x--, 5/2_r);
    errors += TEST_EQUAL(x--, 3/2_r);
    errors += TEST_EQUAL(x, 1/2_r);

    errors += TEST_EQUAL(Rational(2,3).pow(3), 8/27_r);
    errors += TEST_EQUAL((2/3_r).inverse(), 3/2_r);

    {
        std::stringstream buf;
        Rational r;
        buf &lt;&lt; 1/4_r;
        errors += buf.str() != "1:4";
        buf &gt;&gt; r;
        errors += TEST_EQUAL(r, 1/4_r);
    }
    {
        std::stringstream buf("2:5");
        Rational r;
        buf &gt;&gt; r;
        errors += TEST_EQUAL(r, 2/5_r);
    }

    {
        std::stringstream buf("2bar");
        Rational r;
        buf &gt;&gt; r;
        errors += TEST_EQUAL(r, 0);
    }

    return errors;
}
</code></pre>
    </div>