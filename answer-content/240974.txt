<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>List indices (coordinates) in most programming languages start at 0.  If you want to present a coordinate system that starts at 1 instead, rather than fighting with the native data structures by adding "dummy" entries and then trying to remember to filter them out, you can make life easier by building an abstraction layer that cleanly separates the "native" representation (i.e. a list of lists) from the interface that you want to use in the rest of your code.  For example:</p>

<pre><code>from typing import Tuple

class Board:
    """
    A square game board with a fixed size.  Spaces are accessed by 2D
    coordinates that are numbered starting at 1, so a board of size 3
    goes from [1, 1] (upper left) to [3, 3] (lower right).
    All elements in the board are single-character strings.
    """
    def __init__(self, size: int):
        self._grid = [['_' for _ in range(size)] for _ in range(size)]

    def __str__(self) -&gt; str:
        return (
            # Horizontal lines between rows
            '+'.join(['---'] * len(self._grid)) + '\n'
        ).join(
            # The rows themselves
            ' ' + ' | '.join(row) + ' \n'
            for row in self._grid
        )

    def __getitem__(self, coords: Tuple[int, int]) -&gt; str:
        x, y = coords
        return self._grid[y-1][x-1]

    def __setitem__(self, coords: Tuple[int, int], value: str) -&gt; None:
        assert len(value) == 1, "Only single characters allowed!"
        x, y = coords
        self._grid[y-1][x-1] = value

board = Board(3)
board[3, 3] = 'X'
print(board)
</code></pre>

<pre><code> _ | _ | _
---+---+---
 _ | _ | _
---+---+---
 _ | _ | X
</code></pre>

<p>In this example, the class <code>Board</code> abstracts away the internal list and provides its own interface where spaces are specified as <code>[1...size, 1...size]</code> instead of <code>[0...size-1][0...size-1]</code>, so you can write code that's 1-indexed without having to account for the difference anywhere but inside the <code>Board</code> implementation.  </p>

<p>Using the "multiple key" syntax on the getter and setter (i.e. <code>[X, Y]</code> instead of <code>[X][Y]</code>) will help make it more obvious to readers of your code that this is a custom data structure that doesn't necessarily follow the same conventions as normal lists and dicts, and allows you to use something that looks more like Cartesian notation.</p>

<p>By implementing <code>__str__</code> you can control how the object is printed; rather than needing to remember to use <code>print_board()</code> when you want to pretty-print the board (and having that output be at odds with <code>print(board)</code>, now <code>print(board)</code> itself will do the thing you want.</p>
    </div>