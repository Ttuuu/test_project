<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Motherboards with multiple processors, processors with multiple cores, and the processor's microarchitecture will greatly affect the benefits of parallel processing, and multithreading.</p>

<p>Without knowing your motherboard and which processors are used, I am very limited as to what techniques will help or penalize your approach.</p>

<p>It appears you have not implemented any thread synchronization, communications or division of tasks for optimized allocation of resources.</p>

<p>There is not much chance you can take advantage of multithreading your app. Unless your workstation uses an Intel micro architecture such as Haswell where every core has its own L1 cache, the motherboard has dual memory access, and the PCIe bus is not shared with the memory bus.</p>

<p>In a nutshell, you have to split up the tasks. Running the same code on multiple threads is not going to help much. Your task list is bringing in data from the hard drive (SSD would help, or RAM disk), and store it in memory, search the data, store the results. Given your system architecture if any of these tasks can run simultaneously you can allocate those tasks to separate threads.</p>

<p>Basically you do not want multiple threads accessing the same cache memory. Set up your memory to best utilize the size of your on chip cache.  You would have to coordinate the resources between the threads with cooperative multitasking. Set up a queue between the processes that coordinates the threads to prevent accessing the same resources at the same time.</p>

<p>I doubt you can get a big boost from multitasking. Your best chance for performance gains is in optimizing your search.</p>

<p>Just because your CPU is at 99% does not mean each core is crunching your code. Most likely they are sitting in wait loops waiting for access to resources.</p>

<p>With 4 cores you should likely be running 3 or fewer threads. Your code be penalized for your uncooperative method.  You likely have a lot of cache eviction going on.</p>

<p>If you are going to use multiple threads, put in pauses to allow the other threads to get out of their wait loop. Keep loop iterations small.</p>

<p>You biggest problem is an 18GB flat file with no indexing.</p>

<p>You want to have the data stored in a way where as much of the processing is done in the data structure and organization.</p>

<p>Get rid of the CSV.  The only way to increase performance would be to break up the job to run on separate workstations.</p>

<p>Look into how search engines store the key words.  There are some open source projects that work fairly well.  Consider using Google's search services if you don't care they are going to analyze your data to find a way to capitalize on it. If you were to use 3rd party resources READ THE TERMS OF SERVICE! It is absolutely amazing how little people know what Google is doing.  More and more are learning from Google and doing the same appalling stuff.</p>

<p>A project like Heritrix, Solr, or even Sphider will do much better than an un-indexed CSV flat file.</p>

<p>Break the file into pieces and store them in pieces.  But only if you have a legitimate reason for keeping the CSV files. Why use your code to do that task when it can be done off line. </p>

<p>Your best bet is to index the data.</p>

<p>In PHP I use a text file technique that beats CSV.  I organize the data into huge arrays serialize them and save them as text files. Convert your CSV into arrays, serialize then, gzip them and store. </p>

<p>Size the arrays to fit in L1 or L2 cache. Pad them if necessary to organize then on memory page boundaries. </p>

<p>If you have not read Intel's 64 and IA-32 Architectures Optimization Reference Manual, read it.  All programmers should be familiar with it.</p>

<p>You don't have to read all 642 pages.  At a minimum read Chapter 3 and read the User/Source Coding Rules, search the document using this search phrase: "User/Source Coding Rule". Lots of tips for multithreading.</p>

<p>The most important: Source coding rules pertaining to branching (if else), loops (while), and variable declaration and organization.</p>

<p>My number one programming rule for fast code: Use arrays to eliminate branches in your code (see Intel's Optimization Manual).</p>

<p>This is assuming that retrieval of comments and generation of the HTML takes about 50-100 micro-seconds per comment is an improvement over Disqus.  The number of comments in the database has no affect on performance. The query is a single simple, query for all the records (including threading) associated with the topic.</p>
    </div>