<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Right, I get the description, it's probably useful in the described
circumstances, though I'd also say that having all these special/single
case conversions like <code>PROPER-LIST</code>, <code>NESTED-LISTS</code> and <code>NESTED-VECTORS</code>
is a bit much.</p>

<ul>
<li><code>LIST-TO-STRING</code> could just be <code>(format NIL "~{~A~}" (or list '(NIL)))</code> -
there are ways to do it all just in the <code>FORMAT</code> of course, but that'd
also be less readable.</li>
<li>Instead of the test bench you could also use a library.</li>
<li><code>CONVERT</code> from vector to vector could just be using <code>(copy-seq object)</code>?</li>
<li>In the string to symbol conversion <code>ELT</code> on a string should probably
be <code>(char object 0)</code>.</li>
<li>I'm pretty sure <code>ARRAY-TO-NESTED-LISTS</code> and <code>-VECTORS</code> could be
simplified and use less memory.  Then again, these might not be used
intentionally on big arrays anyway.</li>
<li><p><code>CONVERT</code> to <code>PROPER-LIST</code> can be a bit simpler:</p>

<pre><code>(let* ((copy (copy-list object))
       (last (last copy))
       (cdr (cdr last)))
  (unless (listp cdr)
    (setf (cdr last) (list cdr)))
  copy))
</code></pre></li>
<li><p>The conversions to <code>NUMBER</code> should reuse some code, e.g.:</p>

<pre><code>(defun to-number (object)
  (let ((obj (read-from-string (princ-to-string object))))
    (if (numberp obj)
        obj
        (error "~A cannot be converted to a number." object))))
</code></pre>

<p>For strings it would possibly a bit more costly.</p></li>
</ul>

<p>Unexpected behaviour:</p>

<ul>
<li><code>(convert 42 'character)</code> raises an error while <code>(convert 1 'character)</code>
doesn't.  That's correct from the description of the other similar
methods, but I'd also like a nicer error.</li>
<li><code>CONVERT</code> to symbols uses <code>INTERN</code> without a target package, that's
probably not so nice overall, I'd suggest a keyword argument (also in
case other methods would need some options).</li>
<li>The conversion from string to vector is probably wanted, but also
unexpected: A string is a vector after all.</li>
<li><code>CONVERT</code> from string to symbol will depend a lot on the reader,
<code>":foo"</code> will be read as keyword <code>:FOO</code> (upper case), while <code>"foo"</code> will
be read as regular symbol <code>|foo|</code> (lower case), which is a weird
distinction.</li>
</ul>

<p>Also some conversions are missing that should <em>probably</em> be there for
completeness sake, like the rest of the numerical tower, <code>DOUBLE-FLOAT</code>,
<code>COMPLEX</code> etc.?</p>

<p>Overall looks good to me, but it's also a difficult topic to get right
IMO.</p>
    </div>