<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The cyclic import dependencies can only be removed in one way: By removing one of them. :)</p>

<p>As I see it now, you have:</p>

<ul>
<li>Client, which needs to create the MateSearcher object, and also know about the API.</li>
<li>An API</li>
<li>An implementation class</li>
</ul>

<p>Naturally, the implementation class - <code>MateSearcher</code> - needs to be aware of the API, so that's not an import that you want to remove.</p>

<p>I'd recommend putting a <code>ChessFactory</code> class (or rather, <code>object</code>) in the same package as the <code>MateSearcher</code>. It can look something like this:</p>

<pre><code>object ChessFactory {
    fun mateSearcher(): Searcher = MateSearcher()
}
</code></pre>

<p>Some things to note here:</p>

<ul>
<li>It's an object, not a class, meaning the method can be called with <code>ChessFactory.mateSearcher()</code> (no need for a companion object)</li>
<li>The method declares to return a <code>Searcher</code>, it doesn't need to declare that it is a <code>MateSearcher</code> since that will make the client aware about the implementation details.</li>
</ul>

<p>Now, removing the construction of the <code>MateSearcher</code> leaves your <code>Chess</code> class with... two interfaces and a data class. The <code>Chess</code> class is basically wrapping them, which I personally don't find very useful, but I'll leave that to you to decide whether to keep it or not.</p>

<hr>

<p>Looking a bit closer at what the <code>Chess</code> class contains,</p>

<pre><code>class Chess {
    interface Move {
        override fun toString(): String
    }
    data class TextMove(val text: String): Move { override fun toString() = text }
    interface Searcher {
        var board: String
        fun findBestMove(): Move
    }
}
</code></pre>

<p>The <code>Move</code> interfaces specifies that a <code>toString</code> method should exist. Such an interface <em>always</em> exists. It's also not recommended to make your code dependent on the return values of <code>toString</code>. The <code>toString</code> method should be used for only one thing: Printing information to you, the programmer. Its results should not be shown to users of the program and its implementation details should not be important for the application logic. 
It's currently hard to tell what your <code>Move</code> interface should contain as the only implementation is your <code>TextMove</code> class, which makes me doubt that you need the <code>Move</code> interface at all. What other implementations will you have?</p>

<p>Your generic <code>Move</code> class should possibly have methods like <code>Move.validate(ChessBoard)</code> and <code>Move.perform(ChessBoard)</code>.</p>

<hr>

<p>You have code in your <code>MateSearcher</code> that is commented with <code>Complicated code that should not be exposed to the client</code>. I'd like to make you aware of the fact that that function is marked <code>private</code>, and no function or field marked <code>private</code> will ever be exposed to anything else other than the class itself, no matter if we're implementing an interface or not.</p>

<hr>

<p>The <code>Searcher</code> interface stings a bit to me, especially when looking at your usage of it. Let me ask you this: What if I have a <code>Searcher</code> and call <code>findBestMove()</code> without setting the <code>board</code>? That shouldn't be allowed, right? Why is the board not a parameter to <code>findBestMove()</code>?</p>

<p>Making this change would leave us with:</p>

<pre><code>interface Searcher {
    fun findBestMove(board: String): Move
}
</code></pre>

<p>Which could be changed to:</p>

<pre><code>typealias Searcher = (board: String) -&gt; Move
</code></pre>

<p>Which, in my opinion, is more Kotlinic (like Pythonic but for Kotlin), and it would make it easier to use lambdas or method references for the searcher.</p>
    </div>