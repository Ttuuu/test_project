<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>But what do you think of this approach?</p>
</blockquote>
<p>Comments below are less about Python and more about design and test.</p>
<p><strong>Negatives</strong></p>
<p>I suggest using the absolute value of <code>number</code> rather than <code>math.log10(number)</code>.</p>
<p><strong>Lack of edge case testing</strong></p>
<p>I'd expect code to have been tested with various edge cases as they are specified in the requirements.</p>
<pre><code> 999000000000.0, 100000000000.0, 1000000000.0, 1000000.0, 1.0, 0.01, 0.005, math.nextafter(0.0,1.0)
</code></pre>
<p>And importantly the above values' next smallest value.</p>
<pre><code>smaller= math.nextafter(x, 0.0)
</code></pre>
<p>Also test with negatives and very large values like <span class="math-container">\$10^{20}\$</span>.</p>
<p>IMO, I think OP will find unacceptable results.</p>
<p><strong>Conceptual alternative code</strong></p>
<p>Rather than adding 1 and using <code>&gt;</code>, I would use <code>&gt;=</code>. This works even if <code>math.floor()</code> is omitted.</p>
<pre><code># digits = 1 + math.floor(math.log10(number))
# if digits &gt; 12:

digits = math.floor(math.log10(number))
if digits &gt;= 12:
</code></pre>
<p>This better matches the coding goal.</p>
<p><strong>Pedantic</strong></p>
<p><code>number / 10**12</code> will impart a rounding error in the quotient before printing, which is in effect a 2nd rounding.  When output is abc.def, values near abc.def +/- 0.0005 (scaled to <span class="math-container">\$10^{12}\$</span>) may exhibit an incorrect rounding of the original <code>number</code>.  A solution is to round once converting the <code>number</code> to text, which is later manipulated.  Rarely is this degree of correctness needed.</p>
<p><strong>Money</strong></p>
<p>For <em>money</em>, I'd expect using <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>Decimal</code> floating point</a>.  Unclear to me what OP is using given my scant Python experiences.</p>
    </div>