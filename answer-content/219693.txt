<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me add a few quick comments to the other review(s).</p>

<p>In general, pay attention to const correctness to reduce the chances of making mistakes and also to avoid unnecessary - and potentially expensive - copies.</p>

<ul>
<li><p>You have plenty of "getters" of the form <code>get_...</code> (e.g. <code>get_version()</code>, and so on) that don't modify the state of the object. Write these as <code>get_version() const</code>.</p></li>
<li><p>It seems that you pass not-cheap-to-copy objects like <code>std::string</code> always by-value meaning they are copied. Is this really necessary? By default, a better instinct is to always write them by const-ref, like <code>add_arg(const std::string&amp; arg, const std::string&amp; value)</code>, and so on. You should have a good reason for <em>not</em> doing this.</p></li>
<li><p>Your constructors violate good practices. Read through <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#S-ctor" rel="nofollow noreferrer">the relevant rules for constructors on C++ Core Guidelines</a>.</p></li>
<li><p>In <code>build_request()</code>, define <code>std::string req</code> just before the line <code>if(!method.empty())</code> to improve readability.</p></li>
<li><p>In <code>random_user_agent()</code>, you don't need <code>push_back</code> but instead initialize the vector to hold these values directly by a constructor call. You can then make the vector <code>const</code> as well.</p></li>
</ul>
    </div>