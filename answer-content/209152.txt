<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code review outset</h2>

<p>The already given answers are good, but I want to address something else. Your code, while functional and no doubt created with some forethought and expertise, is not very readable. There is a lot of number (and index) magic going on that is not easily readable.</p>

<p>Keep in mind that randomized behaviors are considerably harder to troubleshoot (compared to deterministic algorithms). I'm not saying they can't be tested, but it's easier for problem to only present themselves in certain cases (which are not consistently repoducible). This increases your need for readable code as you can't rely on <a href="https://stackoverflow.com/questions/11782951/what-is-shotgun-voodoo-programming">shotgun programming</a> for debugging.</p>

<p>I also think your solution is a bit overengineered. There is a lot of number magic in your solution that usually requires a developer to know the intended soltuion before they can read and understand it.</p>

<p>I want to rebuild the solution in a way that maximizes readability. The main components to enhance your readability here are:</p>

<ul>
<li>Reframing the problem</li>
<li>LINQ</li>
<li>Yield return</li>
</ul>

<p>I could take this further into the territory of thread-safety and the likes but your original code does not seem to focus on it (and you don't mention it) so I'm not delving into it either.</p>

<p><strong>My answer isn't much shorter than yours</strong>. The core intention of my answer is to reduce the number magic and instead rely on well-established or well-named programming concepts that ensure that other developers quickly understand the code.</p>

<hr>

<h2>Reframing the problem</h2>

<p>As a minor semantical argument, I would rephrase your description. You are not, as your title describes it, selecting random elements from a list. Since you're avoiding repetition, it would be more correct to say that you are <strong>selecting</strong> (sequential) <strong>elements of a randomly ordered list</strong>. </p>

<p>The latter inherently implies that no repetition occurs (assuming there are no duplicates in the starting list, which would also be the case for your original code).   </p>

<p>When you think about it in the second way, you (or others) are less likely to overlook the repetition that is inherent to purely random selections. This mindset is also what leads to redesigning the shuffling algorithm.</p>

<p>The latter is often referred to as "randomized" instead of "random", specifically because "randomized" implies a random order of the elements and not a repeated random pick.</p>

<hr>

<h2>The shuffling algorithm</h2>

<p>Using LINQ, this is actually not that hard:</p>

<pre><code>Random random = new Random();

var shuffledList = originalList.OrderBy(x =&gt; random.Next());
</code></pre>

<p>The principle is simple: each element is given a random integer value, and then the list is ordered by this integer value. Therefore, you end up with a randomly shuffled list. If you now iterate over the list:</p>

<pre><code>foreach(var element in shuffledList)
{
    Console.WriteLine(element.ToString());
}
</code></pre>

<p>You will see that it's impossible to repeat yourself. I also hope you agree that this is more readable.</p>

<hr>

<h2>Fetching more items than the list contains</h2>

<p>Due to the <a href="https://en.wikipedia.org/wiki/Pigeonhole_principle" rel="nofollow noreferrer">pigeonhole principle</a>, when you want to generate a longer list of (randomized) items than your original list, you're going to have to introduce double entries. However, as you described, you still want to ensure that everything is used once before the first duplicate enters the list.</p>

<p>This process could be broken down in three steps:</p>

<ol>
<li>Shuffle the original list</li>
<li>Provide each element of this shuffled list sequentially until you've reached the end.</li>
<li>Repeat.</li>
</ol>

<p>However, there is a big pitfall here: if you first generate an infinite randomized list, you're going to end up with an infinite amount of shuffling, and thus you're never going to be able to get the resulting list.</p>

<p>This is where <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield" rel="nofollow noreferrer">yield return</a> saves the day. In short, the <code>yield</code> keyword will ensure that the method will <strong>halt</strong> when returning an item, and will only continue <strong>if and when</strong> the next item is retrieved.</p>

<p>If the caller stops iterating over the list, the method no longer continues its processing. If the caller keeps iterating over the list, then you keep supplying and reshuffling the list.<br>
In your case, you will provide an infinitely long list (the caller will at some point stop asking for more items), but it's just as possible to make the list end by simply calling <code>return</code> in the method.</p>

<hr>

<h2>Combining the above</h2>

<p>We can compose the three step process in code:</p>

<pre><code>public IEnumerable&lt;T&gt; GetShuffledInfiniteList(IEnumerable&lt;T&gt; originalList)
{
    Random random = new Random();

    // 3. Repeat
    for(;;)
    {
        // 1. Shuffle the original list
        var shuffledList = originalList.OrderBy(x =&gt; random.Next());

        // 2. Provide each element of this shuffled list sequentially until you've reached the end.
        foreach(var element in shuffledList)
            yield return element;
    }
}
</code></pre>

<p>This satisfies your second requirement:</p>

<blockquote>
  <p>Select <code>n</code> random elements from a <code>IList&lt;T&gt;</code> without repeating any elements until all elements have been selected at least once. As above while taking into consideration that elements can appear more than once only if all elements have been selected previously an equal number of times.</p>
</blockquote>

<p>However, it does not yet satisfy your first requirement:</p>

<blockquote>
  <p>Select <code>n</code> random elements from a <code>IList&lt;T&gt;</code> without repeating any elements where n&lt;=list.Count. Multiple calls to this operation can be made from different parts of the program without repeating the elements until all elements have been used exactly once.</p>
</blockquote>

<p>The missing factor is that my current example only works in scope of a single method call. To address this issue, we have to move the implementation to a class, and rely on a "stackable" retrieval method. However, the core logic can be maintained.</p>

<hr>

<h2>Implementing the first requirement</h2>

<p>I added the full implementation below. The only addition here is that we track the current index to know where we left off. When the current index grows beyond the list size, the list is reshuffled and the index is reset to 0.</p>

<p>You can use <code>GetElement</code> to get a single item, or <code>GetElements()</code> in order to iterate over the collection for an indefinite amount of iterations.</p>

<pre><code>public class ShuffledInfiniteList&lt;T&gt;
{
    private readonly IEnumerable&lt;T&gt; _originalList;
    private readonly Random _random;

    private IEnumerable&lt;T&gt; _shuffledList;
    private int _currentIndex;

    public ShuffledInfiniteList(IEnumerable&lt;T&gt; originalList)
    {
        _random = new Random();

        _originalList = originalList;
        ShuffleList();

    }

    private void ShuffleList()
    {
        _shuffledList = _originalList.OrderBy(x =&gt; _random.Next());
        _currentIndex = 0;
    }

    public T GetElement()
    {
        if (_currentIndex &gt;= _originalList.Count())
            ShuffleList();

        var element = _shuffledList.ElementAt(_currentIndex);

        _currentIndex++;

        return element;
    }

    public IEnumerable&lt;T&gt; GetElements()
    {
        for (; ; ) yield return GetElement();
    }
}
</code></pre>

<hr>

<h2>Summary</h2>

<p>This alternate version is considerably more readable as it avoind syntactically difficult to understand concepts (swapping elements in an array, complex index calculations, ...).  </p>

<p>Just to be clear, the operations in your original code were understandable ("this number is decreased by 1"), but the <em>intention</em> of the operations was not easily understandable ("why is this number decreased by 1?").</p>
    </div>