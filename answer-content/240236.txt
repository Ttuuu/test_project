<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This problem is an <a href="https://en.wikipedia.org/wiki/Absorbing_Markov_chain" rel="nofollow noreferrer">"absorbing Markov chain"</a>, and the expected number of steps can be solved analytically.</p>

<p>The Markov chain has a node or state corresponding to each of the DNA blocks.  The <code>miniscramble</code> routine, along with the steps of the DNA modification process, can be used to define the transition probablities between states.  For example, 0x000 can transistion to 0x100, 0x200, 0x300, ... (only the first digit changes).  Similarly 0xD05 can go to 0xD15 ...0xDF5 (only the second digit changes) and so on.  Any node &gt;= 0xDAC is an absorbing node.</p>

<p>The code could be cleaner, but it demonstrates the point.</p>

<pre><code>import numpy as np
import matplotlib.pyplot as plt

def make_transition_table(rad_strength, rad_duration):
    # Hi, Med, Lo transition weights
    H = rad_strength*10
    M = rad_strength*10 - rad_duration
    L = rad_strength*5 + rad_duration

    transition_probability = []

    # for digits 0, 1, 2, 3
    # picks    0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
    weights = [0, 0, 0, 0, 0, 0, 0, 0, H, H, H, H, M, M, L, L]
    total = sum(weights)
    probabilities = [w/total for w in weights]
    transition_probability.extend(probabilities for _ in '0123')

    # for digits 4, 5, 6, 7, 8, 9, A, B
    # picks    0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
    weights = [0, 0, L, L, H, H, 0, 0, 0, 0, H, H, L, L, 0, 0]
    total = sum(weights)
    probabilities = [w/total for w in weights]
    transition_probability.extend(probabilities for _ in '456789AB')

    # for digits C, D, E, F:
    #picks     0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
    weights = [L, L, M, M, H, H, H, H, 0, 0, 0, 0, 0, 0, 0, 0]
    total = sum(weights)
    probabilities = [w/total for w in weights]
    transition_probability.extend(probabilities for _ in 'CDEF')

    return transition_probability


rad_strength = 1
rad_duration = 2
transition = make_transition_table(rad_strength, rad_duration)

# build table of all transitions
# P[i][j] = prob to go from i to j
P = []

for i in range(0xFFF + 1):
    d0, rem = divmod(i, 0xFF)
    d1, d2 = divmod(rem, 0xF)

    row = [0]*4096

    if d0 &lt; 0xD:
        start = d1*0xF + d2
        for c, j in enumerate(range(start, start + 0xF00 + 1, 0x100)):
            row[j] = transition[d0][c]

    elif d0 == 0xD:
        if d1 &lt; 0xA:
            start = d0 * 0xFF + d2
            for c, j in enumerate(range(start, start + 0xF0 + 1, 0x10)):
                row[j] = transition[d1][c]

        elif d1 == 0xA:
            if d2 &lt; 0xC:
                start = d0 * 0xFF + d1 * 0xF
                for c, j in enumerate(range(start, start + 0xF + 1, 0x1)):
                    row[j] = transition[d2][c]

    P.append(row)

# convert to numpy array to do to more easily 
# select Q and do the matrix math
P = np.array(P)

Q = P[:0xDAB,:0xDAB]

I = np.identity(Q.shape[0])

N = np.linalg.inv(I - Q)

# this is the same a N*1 as shown in the Wikipedia article
avg_steps = np.sum(N, axis=1)

# change indices for avg_steps to view different
# ranges of starting points
plt.plot(avg_steps[:0x801])
</code></pre>

<p><a href="https://i.stack.imgur.com/1Qj5N.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/1Qj5N.png" alt="Expected number of steps to reach DNA 'DAC'"></a></p>
    </div>