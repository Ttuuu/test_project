<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately the exercise is a bit abstract to me, because I cannot visualize the data you are manipulating. A data sample would have been welcome to better comprehend your purpose.</p>

<h2>A few comments anyway</h2>

<ul>
<li>I don't see the code for <code>FindLastRow</code></li>
<li>You have multiple references to C17, so it should be defined as a <strong>constant</strong> variable. It could be named START_CELL or something. Using uppercase is common practice.</li>
<li>999: another <strong>magic number</strong> that also appears multiple times. It should be made a constant too, MAX_ITERATIONS or something. Or it could be passed as a parameter to <code>CheckOccurance</code> (you already have 3). The aim is to <strong>avoid repetition</strong>, and leave room for <strong>flexibility</strong> (because you might want to change that value at some point).</li>
<li>Warning: <code>CheckOccurance</code> is a typo</li>
<li>You also have more 'arbitrary' values like 3, 4... I suppose they are offsets. Again it would better to use variables instead because they are more <strong>descriptive</strong>, this will make your code more <strong>readable</strong>, easier to understand and will reduce the risk of errors, especially if you shift rows/columns later. <em>And here, doing a search &amp; replace on 3 or 4 is not an option.</em></li>
<li>This line has 3 <strong>hardcoded values</strong>: <code>ws.Range(Cells(lastUsedRow, 3), Cells((occur * 999) + 16, 3)).value = key &amp; "-" &amp; x</code>. And <code>x</code> is not the most <strong>meaningful</strong> name for a variable.</li>
<li>Rather than using ranges like <code>"C17:C" &amp; LRow</code> with hardcoded references it would be better to use <strong>named ranges</strong>. They are more descriptive and more flexible. Like variables, you define them once, and reuse them multiple times. <a href="https://helpdeskgeek.com/office-tips/why-you-should-be-using-named-ranges-in-excel/" rel="noreferrer">Why You Should Be Using Named Ranges in Excel</a></li>
<li>Using <code>ActiveSheet</code> is tricky, because the context could change, for example your macro could switch to another sheet or workbook, and ruin your assumptions. It would be safer to retrieve a named reference (from <code>ActiveSheet.Name</code>) to a variable and then use that variable. If you have no sheet selected, this property returns Nothing.</li>
<li>If you are concatenating just two cells maybe using an array and JOINing is a bit overblown: <code>strCell = Join(Array(wsSource(i, 1), wsSource(i, 3)), "|")</code>. But the best is to run a benchmark and test performance using different approaches. Don't be afraid to experiment. Good code is code that is efficient while remaining intelligible.</li>
<li>I don't understand why you declare your variable like this: <code>Dim wsSource As Worksheet</code> and then use it like this: <code>wsSource = .Range("C17:U" &amp; LRow).value</code>. Did you mean <code>Range</code> ?</li>
<li>The choice of <strong>data type</strong> for your variables is not always optimal: several variables are of type Double. From the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/double-data-type" rel="noreferrer">doc</a>: "Double (double-precision floating-point) variables are stored as IEEE <strong>64-bit (8-byte)</strong> floating-point numbers ranging in value from: -1.79769313486231E308 to -4.94065645841247E-324 for negative values and 4.94065645841247E-324 to 1.79769313486232E308 for positive values". Performance matters when you are doing arithmetic operations in loops.</li>
<li>Even <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/long-data-type" rel="noreferrer">Long</a> is more than enough: "Long (long integer) variables are stored as signed 32-bit (4-byte) numbers ranging in value from -2,147,483,648 to 2,147,483,647."</li>
<li>FYI: Total number of rows and columns on a worksheet: 1,048,576 rows by 16,384 columns (source: <a href="https://support.office.com/en-gb/article/excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3" rel="noreferrer">Excel specifications and limits</a>). So when working with columns, <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/integer-data-type" rel="noreferrer">Integer</a> is sufficient: "Integer variables are stored as 16-bit (2-byte) numbers ranging in value from -32,768 to 32,767".</li>
<li><strong>But but but</strong> surprise: "In recent versions, however, VBA converts all integer values to type Long, even if they're declared as type Integer. So there's no longer a performance advantage to using Integer variables; in fact, Long variables may be slightly faster because VBA does not have to convert them." (Source: <a href="https://docs.microsoft.com/en-us/previous-versions/office/developer/office2000/aa164506(v=office.10)?redirectedfrom=MSDN" rel="noreferrer">The Integer Data Types</a>).</li>
</ul>

<hr>

<h2>Code structure</h2>

<ul>
<li>Overall, tabulation is OK except <code>UniqueListWithSumQty</code></li>
<li>Usage of <strong>With</strong> where appropriate</li>
<li><p>Some <strong>line spacing</strong> would be desirable, calls to external methods eg. <code>Call CheckOccurance</code> should be highlighted and not drowned with the rest of the code because it is important to be able to follow the processing stream.</p></li>
<li><p>One problem: <strong>lack of comments</strong>. There are important for you too, because in a few weeks or months, you will have lost your train of thought and you will have to re-analyze your own code. It is also very helpful to put some data sample in comments when you extract or compute data, to have an idea of what the values look like. For example, when you extract rows from a range, copy-paste a row or a small portion of your range and add it to comment.</p></li>
<li>It is important not just to document the individual steps, but also the general logic of your code, for this you add a few lines of comments at the top of your module.</li>
</ul>

<p>The code is quite short, but unfortunately it's not as easy to understand as it should be, because there are too many hardcoded values, and the underlying data is not known.</p>

<hr>

<h2>Strategy</h2>

<p>Obviously this is what you are interested in and this is where I am going to be the least helpful, because I lack some insight.</p>

<p>First of all, you did not give a clear definition of what qualifies as duplicate data. You've mentioned order numbers but that's the only thing we know. So I am assuming that you are really looking for duplicate order numbers but maybe that's not the whole story. You mention 'concatenating 2 fields' but what are they ?</p>

<p>Maybe all of this was not even necessary, because Excel now has built-in tools to find duplicate data: <a href="https://www.wikihow.com/Find-Duplicates-in-Excel" rel="noreferrer">How to Find Duplicates in Excel</a>. But then, it this was not sufficient for your purpose it should have been made clear and maybe we could propose a better approach.</p>

<p>A <code>COUNTIF</code> might suffice. You even use it in your code. Maybe there is a reason but what was it, I am wondering.
Dictionaries are certainly useful, but in the present case ?</p>
    </div>