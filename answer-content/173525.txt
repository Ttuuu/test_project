<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You can use <code>max()</code> with a generator expression rather than passing a list to it: <code>max(len(join[0] + ' on ' + join[1] for join in joins)</code>.</li>
<li>Use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a> rather than using <code>zip</code> with <code>range()</code>: <code>for index, join in enumerate(joins):</code>.</li>
<li>You may want to convert the <code>join</code> to a <code>namedtuple</code> as it is being indexed a lot(<code>join[0]</code>, <code>join[1]</code>, <code>table_tuple[0]</code> etc). Namedtuple based version would be more readable.</li>
<li><p>Here instead of appending the object to a list and then accessing it using index to perform some actions on it you can assign it to a variable and perform actions on that.</p>

<pre><code>for index, join in enumerate(joins):
    button = QPushButton(join[0] + ' on ' + join[1], dialog)
    button.move(10, 10 + index * PUSHBUTTONHEIGHT)
    button.clicked.connect(self.pick_join_settings)
    button.joinTag = join
    options.append(button)
</code></pre></li>
<li><p><code>init_ui</code> is doing lot of repetitive stuff on the buttons created, this repetitive stuff can be moved to a separate method.</p>

<pre><code>def init_ui(self):
    """
    Handles generating the main interface. This consists of a column of
    buttons, which get enabled when they become relevant, and a textbox
    from where the output from compile_query can be copied.
    """
    table_button = QPushButton('Select tables', self)
    self._perform_action_on_button(table_button, move=(50, 50), connect=self.pick_tables, set_enabled=True)
    self.column_button = QPushButton('Select columns', self)
    self._perform_action_on_button(self.column_button, move=(50, 100), connect=self.pick_table_for_columns, set_enabled=False)
    ...


@staticmethod
def _perform_action_on_button(button, move, connect, set_enabled):
    button.move(*move)
    button.clicked.connect(connect)
    table_button.setEnabled(set_enabled)
</code></pre></li>
</ul>
    </div>