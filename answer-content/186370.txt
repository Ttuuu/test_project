<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Guard clauses in <code>GetMaxNumber</code></h2>

<p>Well done for considering dodgy/edge-case input. However...</p>

<p>The spec you provide says nothing about what to do with a null or empty list. This is a design decision. If you can't make a design decision, then you should document the fact that you've overlooked it as clearly as possible by violently throwing an ArgumentException when either condition is reached. Returning an empty list is about as unhelpful as this could possibly be.</p>

<p>There are only 2 things I could possibly imagine being the 'correct' behaviour: return zero (meaningful output); or throw (violently reject the input).</p>

<h2>Naming</h2>

<ul>
<li><p><code>GetMaxNumber</code> returns more than one number</p></li>
<li><p>no idea what the variable name <code>visit</code> is meant to evoke</p></li>
<li><p><code>firstKNumbers</code> is really misleading: perhaps "currentMaxMin" or something? The parameter documentation is even less helpful: what is K? how do I process them? what does it meant to apply recursive solution?!</p></li>
<li><p><code>number2</code> isn't terribly meaningful, <code>rhs</code> might be better, or even <code>rightHandSide/Operand</code></p></li>
</ul>

<h2>Misc</h2>

<ul>
<li><p>I would make the <code>maxMin</code> array a custom (immutable) data-type, especially given you are returning it as part of the public API. Presently you are explicitly documenting which way round they are (which is good), but an array is considerably more powerful than just a Pair, and you don't need (and aren't using) any of that power. <code>thing.Max</code> is much clearer than <code>thing[0]</code>.</p></li>
<li><p>The spec says nothing about returning the minimum number (granted the spec isn't especially clear)</p></li>
<li><p>Is there a good reason why <code>GetMaxNumberHelper</code> is public? It isn't obvious what any of the arguments are without understanding the code and it doesn't have any guard clauses: hide it away.</p></li>
<li><p>I would be inclined to implement this iteratively (rather than recursively), should someone decide to feed thousands of numbers into it, but that's probably not terribly important.</p></li>
<li><p><code>length</code> is never used in <code>GetMaxNumberHelper</code></p></li>
<li><p>I'd feel more comfortable passing an <code>IReadOnlyList&lt;double&gt;</code> to this API: you have no reason to modify, and are not modifying it, so give the consumer options and reassure them that you aren't going to mangle their data. (You could even rearrange it to take an <code>IEnumerable&lt;double&gt;</code> with a bit of effort)</p></li>
</ul>
    </div>