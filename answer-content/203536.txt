<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Like mentioned in <a href="https://codereview.stackexchange.com/a/203531/29371">Peter Taylor's answer</a> you have some bugs in your code. </p>

<ul>
<li>The primes aren't calculated properly</li>
<li>The divisors aren't calculated properly  </li>
</ul>

<p><strong>Let's first dig into the primes because thats the easiest.</strong></p>

<p>In the <code>FindPrimes()</code> method you are calculating the upper border like  </p>

<pre><code>var sqrt = (int) Math.Sqrt(upperLimit);
</code></pre>

<p>til which you check wether <code>composite[p] == false</code>. </p>

<p>This <strong>incorrect</strong> as it stands, you need to <code>+ 1</code> here like so  </p>

<pre><code>var sqrt = (int) Math.Sqrt(upperLimit) + 1;
</code></pre>

<p>another problem comes with big numbers in this loop  </p>

<pre><code>for (int i = p * p; i &lt; upperLimit; i += p)
    composite[i] = true;  
</code></pre>

<p>because if <code>(p * p) &gt; int.MaxValue</code> it becomes negativ and will run for a very loooong time (and maybe never ends). Adding a second loop condition will fix this as well.   </p>

<p>If we take into account that all numbers divisible by <code>2</code> can't be primes, we can speed this up as well by starting the fomrer loop at <code>3</code> and only check each second number. The same trick can be used for the last loop.</p>

<p>Making this a <code>static</code> method now the <code>FindPrimes()</code> method looks like so  </p>

<pre><code>private static IEnumerable&lt;int&gt; FindPrimes(int upperLimit)
{
    var composite = new BitArray(upperLimit);
    var sqrt = (int)Math.Sqrt(upperLimit) + 1;

    if (sqrt &gt;= 2) { yield return 2; }

    for (int i = 4; i &lt; upperLimit &amp;&amp; i &gt; 0; i += 2)
    {
        composite[i] = true;
    }

    for (int p = 3; p &lt; sqrt; p += 2)
    {
        if (composite[p]) { continue; }

        yield return p;

        for (int i = p * p; i &lt; upperLimit &amp;&amp; i &gt; 0; i += p)
        {
            composite[i] = true;
        }
    }

    if (sqrt % 2 == 0)
    {
        sqrt++;
    }

    for (int p = sqrt; p &lt; upperLimit; p += 2)
    {
        if (!composite[p])
        {
            yield return p;
        }
    }
}
</code></pre>

<p>now the primes will be calculated properly. </p>

<p><strong>Let us now calculate the divisors</strong></p>

<p>The main problem lies in trying to be clever. Instead of yielding a <code>Tuple&lt;int, int&gt;</code> let us just <code>yield</code> the single factors. We can maybe speed this up (if the compiler doesn't optimize it anyway) by calculating the upper border here as well.  </p>

<p>Currently you have  </p>

<pre><code>    foreach (var prime in primesList)
    {
        if (prime * prime &gt; _number)
            break; 
</code></pre>

<p>to exit the loop. We can avoid the multiplication here if we once calculate the sqrt of <code>_number</code> and compare this with <code>prime</code> like so  </p>

<pre><code>private static IEnumerable&lt;int&gt; FindPrimeFactors(IEnumerable&lt;int&gt; primesList, int number)
{
    int upperLimit = (int)Math.Sqrt(number) + 1;

    foreach (var prime in primesList)
    {
        if (prime &gt; upperLimit) { break; }

        while (number % prime == 0)
        {
            number = number / prime;
            yield return prime;

            upperLimit = (int)Math.Sqrt(number) + 1;
        }
    }

    if (number &gt; 1) { yield return number; }
}  
</code></pre>

<p>I have timed this and yielding single factors isn't slower than yielding a <code>Tuple&lt;int,int</code>.</p>

<p>The method is now <code>static</code> as well and takes an additional parameter. After we have calculated <strong>only</strong> the primefactors we now need to calculate the divisors like so  </p>

<pre><code>public static IEnumerable&lt;int&gt; FindDivisors(int number)
{
    var primes = FindPrimes(number);
    var factors = FindPrimeFactors(primes, number);
    var divisors = new HashSet&lt;int&gt; { 1 };

    foreach (var factor in factors)
    {
        var set = new HashSet&lt;int&gt;();

        foreach (int x in divisors)
        {
            set.Add(x * factor);
        }

        divisors.UnionWith(set);
    }

    return divisors.OrderBy(d =&gt; d);
}
</code></pre>
    </div>