<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>if (!depots.get(depotNo).getVehicles().isEmpty())
{
    ... lots of code
} else {
    System.out.println("There are no vehicles in the Depot to reassign");
}
</code></pre>

<p>Here the <code>println</code> is performed and then the method returns. In that case it is better to perform a <strong>positive</strong> if and then exit early:</p>

<pre><code>if (depots.get(depotNo).getVehicles().isEmpty()) {
    System.out.println("There are no vehicles in the Depot to reassign");
    return;
}
</code></pre>

<p>... lots of code</p>

<p>That does the same thing, but it means you don't have to indent the code. It immediately makes clear what the program does if the depot is empty, and then lets the reader forget about it.</p>

<p>Note that you either use Egyptian brackets (braces) or you don't. Most Java programmers do use it, so I would place the brace at the end of the <code>if</code> statement. However, if you don't then:</p>

<pre><code>} else {
</code></pre>

<p>is not consequent, you would use:</p>

<pre><code>}
else
{
</code></pre>

<p>instead.</p>

<hr>

<pre><code> do
</code></pre>

<p>Generally there is no need to document a <code>do ... while</code> loop, but if the <code>while</code> is that far away, you need to make clear what the loop does here.</p>

<hr>

<pre><code>String depotSelection = "";
</code></pre>

<p>This is not very Java-like. In Java you declare the variable as late as possible. And if you assign it a value anyway, then you don't first need to assign the empty string to it.</p>

<hr>

<pre><code>int i = 0; // used to count which depot selected
</code></pre>

<p>Why not call it <code>selectedDepotNr</code> in that case? Then you don't need the comment anymore. Besides, a <em>count</em> is not an identifier.</p>

<p>And it defaults to zero? Why? Is zero some kind of magic value?</p>

<hr>

<pre><code>System.out.println("Depots");
</code></pre>

<p>You are mixing the user interface code with the "business logic", which is not a good idea. If you create a method then you need to separate the retrieval of user input and the actual running of the code. That of course also goes for <code>input.nextLine</code>.</p>

<hr>

<pre><code>depots.get(depotNo).listVehicles();
</code></pre>

<p>There there is a depot that performs output. First of all, it is entirely unclear that <code>listVehicles</code> produces output at all (<code>printVehicles</code> is better), but nowadays we try and not let the data object perform the output itself, let alone let it choose where to output it.</p>

<hr>

<pre><code>depots.get(depotNo).listVehicles();
System.out.printf("%nSelect the registration number of the vehicle you wish to reassign: %n");
vehicleSelection = input.nextLine();
for (Vehicle vehicle : depots.get(depotNo).getVehicles())
</code></pre>

<p>Here <code>depots.get(depotNo)</code> gets called twice in quick succession, with the same <code>depotNo</code>. In that case you should assign to a <code>depot</code> variable so the method is only called <em>once</em>. Lookup the DRY principle.</p>

<hr>

<pre><code>!depotSelection.equals(vehicle.getDepot())
</code></pre>

<p>So the source must not equal the destination, but that's kind of added to an afterthought. And it seems to break if <code>getDepot()</code> return a <code>Depot</code> type instead of a <code>String</code>. If it returns a <code>String</code> representing a location then certainly the method is not named correctly. So it is wrong either way.</p>

<hr>

<pre><code>i++;
</code></pre>

<p>Oh, dear, that doesn't happen at the right place at all. First of all, how do you determine if <code>i</code> remains valid? Doesn't it overflow, because it is 2 loops deep? If the <code>do ... while</code> gets executed twice then you're in trouble, right?</p>

<hr>

<pre><code>System.out.printf("%nThe vehicle is either already assigned to the depot, or the depot does not exist%n%n");
</code></pre>

<p>Ah, right, so how would you feel as a user if you got this message? Now you will have to find out which one of the two errors is happening?</p>

<hr>

<pre><code>if (validLocation) {
</code></pre>

<p>Wait, I'm pretty sure that I just saw an <code>if (!validLocation)</code>! what about <code>else</code>?</p>

<hr>

<pre><code>} while (!exit);
</code></pre>

<p>I don't know but I presume that we could use <code>break LABEL</code> if that's necessary. Removes an unnecessary boolean, for instance.</p>

<hr>

<pre><code>depots.get(i).makeVehicle(v);
</code></pre>

<p>I've never seen a depot make a vehicle. If the code doesn't seem to fit reality then the code is wrong. It really is that simple. You are reassigning, why not <code>assignVehicle</code>?</p>

<hr>

<p>What you've programmed is unfortunately what we call spaghetti-code. All kinds of loops and branches (<code>if</code> and such) and mixing of methods, UI code.</p>

<p>The design is not correct either. <code>vehicle.getDepot()</code> means that a vehicle has got a specific depot assigned to it. Is that a changing depot? In that case it is not part of the vehicle object. Maybe there is a <em>map</em> somewhere with a vehicle -&gt; depot mapping, but making a depot part of a vehicle is not a good design.</p>

<p>Besides that, the depots already list which vehicles are present. Having two related references stored at different locations is just asking for the program to get into an invalid state. If that's present then the update needs to be performed <em>within a single, indivisible method</em>, i.e. more or less at the same time.</p>

<p>I would expect at least the following methods to implement the UI logic (in a separate UI class):</p>

<ul>
<li><code>Depot selectOriginatingDepot()</code>;</li>
<li><code>void listVehiclesByRegistration(Depot depot)</code>;</li>
<li><code>Vehicle selectVehicleByRegistration()</code>;</li>
<li><code>Depot selectTargetDepot(Depot originatingDepot)</code>.</li>
</ul>

<p>Furthermore, I would expect the following methods for the business logic (so no printing or scanner usage, use a logger if you have to):</p>

<ul>
<li><code>Optional&lt;Depot&gt; getDepotByLocation(String location)</code>;</li>
</ul>

<p>This is already there, but it requires some rewriting using <code>Optional</code>.</p>

<ul>
<li><code>Optional&lt;Vehicle&gt; Depot#getVehicleByRegistration(String registration)</code>;</li>
</ul>

<p>Now if the <code>Optional</code> is "empty" then you can simply let UI code ask again.</p>

<hr>

<p>By using more methods you will have fewer boolean to worry about for each specific method. Furthermore, by using smarter constructs such as <code>Optional</code> and e.g. <code>HashTable</code> you might find that you can program this entire piece of code without using a single booleanor nested loops for that matter.</p>
    </div>