<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I generally prefer <code>foreach</code> to <code>for</code>, but in the case where you are using the index variable to iterate through two lists at once, <code>for</code> is a pretty good option. I still try to use <code>.Zip()</code> instead, as the other answer demonstrated, but sometimes that can get hairy. Here are some smaller improvements that don't involve changes to the overall structure.</p>

<ul>
<li>It's always a good idea to use descriptive names

<ul>
<li>I would rename <code>LstA</code> to <code>DigitsOfA</code> (same for B, and Sum)</li>
<li>I would rename <code>GetDigit</code> to <code>GetDigits</code></li>
</ul></li>
<li>It's usually<sup>1</sup> a good idea to delay declaration of a variable until it's used

<ul>
<li>A related concept is reducing variable scope; not using a global variable if a local variable will do. This doesn't have any technical impact, but it does have a readability impact: If I see you using a variable but have to scroll up to see how that variable was declared, the flow of my reading has been interrupted. We could call this "spatial scope".</li>
<li>Here, this would mean declaring <code>sum</code> and <code>carry</code> just before the <code>for</code> loop, instead of at the top of the function.</li>
<li>You could even declare <code>sum</code> inside the loop. It does <em>seem</em> inefficient to instantiate a new variable every iteration of the loop, but (1) the impact will probably be low, even negligible, (2) you can generally trust the compiler to do <a href="https://stackoverflow.com/questions/8535846/is-it-better-to-declare-a-variable-inside-or-outside-a-loop/8536197#8536197">something smart</a> (3) if making my program a tiny bit easier to read also makes it a tiny bit slower, that's a trade I'll gladly make every time.</li>
</ul></li>
<li>I usually prefer <code>var</code> over explicit types when declaring a variable

<ul>
<li>This is the subject of a fair amount of debate, but here's my reasoning. It's easier for me to read <pre>
var prices = new Dictionary&lt;Fruit, decimal&gt;();
var lemon = new Lemon();
var price = 17.50;
prices.Add(lemon, price);
</pre> than <pre>
Dictionary&lt;Fruit, decimal&gt; prices = new Dictionary&lt;Fruit, decimal&gt;();
Lemon lemon = new Lemon();
decimal price = 17.50;
prices.Add(lemon, price);
</pre> In the former, the information I immediately want to know (what are the variables' names? how are they used?) all flows nicely down the left edge.</li>
</ul></li>
<li>It's nearly always easier (to write and to read) to use LINQ's <code>.ToList()</code> than to call <code>List.Add()</code> in a loop.

<ul>
<li>This means you can initialize your lists quite easily as <code>var digitsOfA = GetDigits(a).ToList();</code></li>
</ul></li>
<li>Implicit braces do make your code shorter and prettier, but they are also the source of a very common bug. You write <pre>
if (awake)
    GetCoffee();
</pre> then I come along and update your code to <pre>
if (awake)
    GetCoffee();
    GetBreakfast();
</pre>All of a sudden I'm eating breakfast while I'm still asleep. And if you're thinking I'd have to be a real bonehead to make that mistake, you're right! But it's a mistake I've made before, it's a mistake that will be made again... And it's a mistake that would be <em>impossible</em> if the original code were<pre>
if (awake)
{
    GetCoffee();
}
</pre> So consider very carefully how likely it is that others might modify your code in the future, or that you might modify it before you have your coffee... I recommend the braces every time.</li>
<li>You can dodge the whole brace issue, however, by modular arithmetic instead of <code>if</code>: <pre>
carry = sum / 10;
sum = sum % 10;
</pre></li>
<li>I quite like the <code>GetDigits</code> function as it stands! That's an excellent use of <code>yield return</code>, in my opinion.</li>
</ul>

<p><sup><sup>1</sup>This advice does not apply to Javascript, thanks to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer">variable hoisting</a></sup></p>
    </div>