<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Granularity</h1>

<p>All code can be said to have a level of granularity. This is a measure of how many functions it contains. Low granularity has fewer larger functions that has benefits of faster run-times at the expense of readability, while high granularity has many smaller functions, trading off performance for more readable and maintainable code.</p>

<p>Just how granular to make some code is something that comes from experience as there are no hard and fast rules to go by. However there is a general rule of thumb that increasing granularity should always reduce code complexity and source code size. </p>

<h3>Too granular</h3>

<p>Your code is too granular, </p>

<ul>
<li>It is bloated with the source required only to define functions, call and pass arguments. </li>
<li>It adds un-needed complexity with arguments transforming the abstraction implied by naming from one <code>value</code> to another <code>of</code> and then back again to <code>value</code>.</li>
<li>It has forced you to repeat code.</li>
<li>It contains a function that is only an alias for existing functions <code>find</code> is an alias for <code>Array.find</code> and provides no additional processing.</li>
</ul>

<p>The function <code>getLabel</code> processes  the result of <code>find</code> returning <code>"No info"</code> for undefined results. But this is repeated in the calling function.</p>

<h3>Reducing granularity to improve code</h3>

<p>Reducing granularity will not always improve code, well I should say very seldom and only in the case where the code is already too granulated.</p>

<p>Your module can be done in a single function</p>

<pre><code>export default (value, type) =&gt; {
    var array, result;
    switch (type) {
        case 'paymentMethod':
            array = paymentMethods;
            break;
        case 'paymentTerm':
            array = paymentTerms;
            break;
        case 'dateType':
            array = dateTypes;
    }
    if (array) { result = array.find(item =&gt; item.value === value) }
    return result &amp;&amp; result.label || "No info"
}
</code></pre>

<p>Or as there are only a few cases in the <code>switch</code> use <code>if</code> <code>else</code></p>

<pre><code>export default (value, type) =&gt; {
    var array, result;
    if(type === "paymentMethod") { array = paymentMethods }
    else if(type === "paymentTerm") { array = paymentTerms }
    else if(type === "dateType") { array = dateTypes }

    if (array) { result = array.find(item =&gt; item.value === value) }
    return result &amp;&amp; result.label || "No info"
}
</code></pre>

<p>This can be even further reduced by using <code>type</code> to index the array via bracket notation, replacing the unwieldy <code>switch</code> or <code>if</code> <code>else</code> statements </p>

<pre><code>const types = {paymentMethods, paymentTerms, dateTypes};
export default (value, type) =&gt; {
    var result;    
    const name = type + "s";
    if (types[name]) { result = types[name].find(item =&gt; item.value === value) }
    return result &amp;&amp; result.label || "No info";
}
</code></pre>

<p>Or if the names are not always pluralized with an s.</p>

<pre><code>const types = {paymentMethod:paymentMethods, paymentTerm:paymentTerms, dateType:dateTypes};
export default (value, type) =&gt; {
    var result;    
    if (types[type]) { result = types[type].find(item =&gt; item.value === value) }
    return result &amp;&amp; result.label || "No info";
}
</code></pre>

<h3>Your questions</h3>

<blockquote>
  <p>What would be more ES6, faster and concise way to achieve this?</p>
</blockquote>

<ul>
<li>More ES6? Not really, the  ES6 - eness of the code has not changed.</li>
<li>Faster? Yes there is less code to execute and few function states to create, push, and pop from the call stack.</li>
<li>Concise? Yes in my view it is much more concise. From 17 lines and three functions to 6 lines, one function, and no repeated code.</li>
</ul>
    </div>