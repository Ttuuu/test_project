<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The reason that you are getting so many more entries is because of this list comprehension:</p>

<pre><code> students_plus_codes = [x + str(" - " + y) for y in students for x in code_list]
</code></pre>

<p>It's a nested <code>for</code> loop. If we expand it we can see what is happening:</p>

<pre><code>students_plus_codes = []
for y in students:  # students has 24 items
    for x in code_list:  # code_list has 24 items
        students_plus_codes.append(x + str(" - " + y))
</code></pre>

<p>So for every iteration of <code>students</code> you do 24 iterations of <code>code_list</code>. </p>

<p>Fortunately, python has a builtin function called <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> that will merge lists for us. So we can replace the nested list comprehension with this line:</p>

<pre><code>students_plus_codes = list(zip(students, code_list))
</code></pre>

<p>Which results in a list of tuples:</p>

<pre><code>[('Aljoša', '256D2B'), ('Blažka', 'OEGJL9'), ('Nana', 'GB1PJL'), ('Kaja', 'F0P0F2'), 
 ('Alja', '62KU94'), ... ('Matic', 'E7CJIP'), ('Marija', '1D2UCL'), ('Žiga T.', '6X1DD5')]
</code></pre>

<h3>Generating the codes:</h3>

<p>First, I would replace <code>for i in range(24):</code> with <code>for i in range(len(students)):</code> as this allows you to change the number of students without having to change other aspects of your code. In this instance <code>24</code> is a <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic number</a> that could cause issues down the line.</p>

<p>You could even create a function that generates each code, then you can use an easy to read list comprehension.</p>

<pre><code># &lt;=python3.5
def generate_code(n, characters):
    return ''.join([random.choice(characters) for _ in range(n)]) 

# &gt;=python3.6
def create_code(n, characters):
    return ''.join(random.choices(characters, k=n))
</code></pre>

<h3>Printing the codes:</h3>

<p>It isn't ideal to join the names and codes as a single string as this makes it hard to use them separately later. For this reason, I used a list of tuples to match them as pairs. To print them the <code>for</code> loop has two variables, <code>student</code> and <code>code</code> that takes advantage of <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">unpacking</a> and then prints them using the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer"><code>format</code></a> function.</p>

<pre><code>for student, code in students_plus_codes:
    print('{} - {}'.format(code, student))
</code></pre>

<hr>

<h3>Altogether:</h3>

<pre><code>import random
import string


def create_code(n, characters):
    return ''.join(random.choices(characters, k=n))


students = ["Aljoša", "Blažka", "Nana", "Kaja", "Alja", "Tjaša", "Ana",
           "Gal", "Danijela", "Alma", "Neja", "Žiga K.", "Patricija", "Aja",
           "Kristjan",  "Urban",  "Janja", "Lea", "Žana", "Aljaž", "Tilen",
           "Matic", "Marija", "Žiga T."]

# It generates the code and puts it in a list
key_size = 6
chars = string.ascii_uppercase + string.digits
code_list = [create_code(key_size, chars) for _ in range(len(students))]

# Combines the two lists (students and codes) into a list of tuples
students_plus_codes = list(zip(students, code_list))

for student, code in students_plus_codes:
    print('{} - {}'.format(code, student))
</code></pre>
    </div>