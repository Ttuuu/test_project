<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are allocating and deallocating memory all over the place. That is not only an expensive operation by itself, it also destroys locality of reference, and wastes much memory for bookkeeping:</p>

<ul>
<li>A <code>std::vector&lt;T&gt;</code> is quite an extravagance where a simple <code>std::pair&lt;T, T&gt;</code> suffices.</li>
<li>A <code>std::set</code> is a sorted, node-based container. Convenient, but better use a <code>std::vector</code> and sort it once.</li>
<li>The only good thing about the <code>std::string</code> in the <code>stringpool</code> is that a single character will not allocate an extra-buffer due to SSO.</li>
<li>The least you can do with <code>newSet</code> is <code>std::move()</code> it.</li>
<li>Same for <code>newset</code>. Did you see the different casing there?</li>
<li>How you copy complex elements in the for-range-loops is just cruel.</li>
<li>You could <code>std::move()</code> the return-value. Not that it makes that much difference after the rest.</li>
</ul>

<p>Iterating over candidate-sets is a very slow way to find clusters of interchangable elements. Just use a proper union-find-datastructure.</p>

<p>Thus, while your code may work, it is <em>really</em> slow, especially as the problem-size grows O(n²) will become problematic. </p>

<p>An alternative, doing only three allocations, and using a proper union-find-datastructure, reducing time-complexity to O(n*log(n)):</p>

<pre><code>auto findUnion(
    std::size_t n,
    std::span&lt;std::pair&lt;std::size_t, std::size_t&gt;&gt; pairs
) {
    std::vector&lt;std::size_t&gt; r(n);
    std::iota(begin(r), end(r), n-n);
    const auto find = [&amp;](auto a){
        if (a == r[a])
            return a;
        return r[a] = find(r[a]);
    };
    for (auto [a, b] : pairs) {
        if (a &lt; 0 || b &lt; 0 || a &gt;= n || b &gt;= n)
            throw std::out_of_range();
        a = find(a);
        b = find(b);
        r[a] = r[b] = std::min(a, b);
    }
    for (auto&amp; x : r)
        x = r[x];
    return r;
}

auto findLargest(
    std::string s,
    std::span&lt;std::pair&lt;std::size_t, std::size_t&gt;&gt; pairs
) {
    const auto n = size(s);
    const auto unions = findUnion(n, pairs);
    std::vector&lt;std::size_t&gt; indices(n);
    std::iota(begin(indices), end(indices), n-n);
    std::sort(begin(indices), end(indices), [&amp;](auto a, auto b){
        return std::tie(unions[a], a) &lt; std::tie(unions[b], b);
    });
    std::vector&lt;char&gt; buffer(n);
    for (auto i = n-n; i &lt; n;) {
        auto j = i;
        for (; j &lt; n &amp;&amp; unions[indices[j]] == unions[indices[i]]; ++j)
            elements[j - i] = s[indices[j]];
        j -= i;
        if (j &gt; 1) { // need not be optional
            std::sort(data(buffer), data(buffer) + j);
            while (j)
                s[indices[i++]] = buffer[--j];
        }
    }
    return std::move(s);
}
</code></pre>

<ul>
<li><a href="https://en.cppreference.com/w/cpp/container/span" rel="nofollow noreferrer"><code>std::span</code></a> was expected for C++17, but got pushed back to C++20. See <a href="https://stackoverflow.com/questions/45723819/what-is-a-span-and-when-should-i-use-one">"<em>What is a “span” and when should I use one?</em>"</a> for details, and where to get an implementation. Most only need C++11.</li>
<li>One could probably improve efficiency marginally by coalescing the allocations and not depending on the compiler to cut out useless initializations, possibly using C++20 <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique" rel="nofollow noreferrer"><code>std::make_unique_default_init</code></a> to avoid manual allocation.</li>
</ul>
    </div>