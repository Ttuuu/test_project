<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few things I noticed:</p>

<hr>

<blockquote>
<pre><code>public PropertyComparer(params string[] properties)
{
  var type = typeof(T);
  Properties = properties
      .Select(name =&gt; type.GetProperty(name))
      .ToArray();
}
</code></pre>
</blockquote>

<p>There is no need for the lambda and it could be written as:</p>

<pre><code>    Properties = properties
        .Select(type.GetProperty)
        .ToArray();
</code></pre>

<p>but for this to be clear the name <code>properties</code> should be changed to <code>propertyNames</code>.</p>

<hr>

<blockquote>
<pre><code>public bool Equals(T x, T y) =&gt;
          Properties.Aggregate(true, (eq, p) =&gt; eq &amp;&amp; Equals(p.GetValue(x), p.GetValue(y)));
</code></pre>
</blockquote>

<p>This <code>Aggregate</code> could simplified with <code>All</code> which would stop checking other properties if the result of <code>Equals</code> would be <code>false</code> for any of them:</p>

<pre><code>public bool Equals(T x, T y) =&gt; Properties.All(p =&gt; Equals(p.GetValue(x), p.GetValue(y)))
</code></pre>

<hr>

<blockquote>
<pre><code>var selector =
  Expression.Lambda&lt;Func&lt;T, T&gt;&gt;(
      Expression.New(ctor,
          ctor.GetParameters()
              .Select(p =&gt; fields.Contains(p.Name)
                  ? (Expression)Expression.PropertyOrField(itemParam, p.Name)
                  : (Expression)Expression.Constant(p.ParameterType.IsValueType
                      ? Activator.CreateInstance(p.ParameterType) : null,
                      p.ParameterType))
              .ToArray(),
          itemType.GetProperties().Cast&lt;MemberInfo&gt;().ToArray()),
      itemParam);
</code></pre>
</blockquote>

<p>Unless I didn't find the difference this exact same block of code seems to occur twice in your code, both in the <code>SelectAnonymous</code> and the <code>GroupAnonymousBy</code>.</p>

<hr>

<p>The method <code>GroupEntitiesBy</code> uses a magic number <code>2</code> in this line</p>

<blockquote>
<pre><code>.Single(m =&gt; m.GetParameters().Length == 2)
</code></pre>
</blockquote>

<p>I guess you are looking here for a <code>GroupBy</code> with two parameters.</p>

<blockquote>
<pre><code>var method = typeof(Queryable).GetMethods()
           .Where(m =&gt; m.Name == "GroupBy")
           .Single(m =&gt; m.GetParameters().Length == 2)
           .MakeGenericMethod(itemType, itemType.Derive());
</code></pre>
</blockquote>

<p>It'd be safer to serch for parameters by type I think rather then relying on the count. If for whatever reason they add another <code>GroupBy</code> overload with two parameters in future it could break. The same goes for <code>Single</code>. Also the string <code>"GroupBy"</code> could be replaced with <code>nameof(Queryable.GroupBy)</code>.</p>

<hr>

<blockquote>
<pre><code>var notMappedCtor = typeof(NotMappedAttribute).GetConstructor(new Type[0]);
</code></pre>
</blockquote>

<p>This line in the <code>Derive</code> method could use <code>Type.EmptyTypes</code> in place of the empty array.</p>

<p>I also don't like the huge lambda here <code>GroupTypes.GetOrAdd(baseType, t =&gt;</code>. It would make more sense to make it a testable helper method in another class than immediately saving and <em>hiding</em> the result in a dictionary.</p>

<hr>

<p>Other than these few nitpicks I find this an amazingly clean and useful piece of code that <em>demonstrates</em> how practical expression-trees and dynamic code generation could be and I have to study it more ;-)</p>
    </div>