<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code should be correct, maintainable, robust, reasonably efficient, and, most importantly, readable.</p>
<hr>
<p>To be certain that the code is correct, carefully read the specification and related documents.</p>
<p><a href="https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation" rel="nofollow noreferrer">Forsythâ€“Edwards Notation</a></p>
<p><a href="https://www.chessclub.com/help/PGN-spec" rel="nofollow noreferrer">PGN-SPEC</a></p>
<p><a href="https://en.wikipedia.org/wiki/Portable_Game_Notation" rel="nofollow noreferrer">Portable Game Notation</a></p>
<p><a href="https://en.wikipedia.org/wiki/Algebraic_notation_(chess)" rel="nofollow noreferrer">Algebraic notation (chess)</a></p>
<p><a href="https://en.wikipedia.org/wiki/Chess" rel="nofollow noreferrer">Chess</a></p>
<p>For a code review, compare the specification and the code implementing it side-by-side.</p>
<hr>
<p>In chess, there are pieces placed on squares which are organized into ranks and files to form a board. There doesn't appear to be any references to these basic concepts, apart from board, in <code>decodeFen</code>. Therefore, comparison of code to specification is difficult.</p>
<p>"PGN is "Portable Game Notation", a standard designed for the representation of chess game data using ASCII text files. PGN data is represented using a subset of the eight bit ISO 8859/1 (Latin 1) character set." Therefore,</p>
<pre><code>var board [8][8]int8
</code></pre>
<p>is incorrect. Characters are not type <code>int8</code> (8-bit signed integers). Characters are type <code>byte</code> (8 bits).</p>
<pre><code>var board [8][8]byte
</code></pre>
<p>The code</p>
<pre><code>for _, char := range row { ... }
</code></pre>
<p>expects a UTF-8 encoded string. UTF-8 encoding is not the same as ISO 8859/1 encoding.</p>
<p>Go is a safe, statically typed language. The code</p>
<pre><code>board[r][col_ind] = int8(char)
</code></pre>
<p>is a failed attempt to correct errors when ISO 8859/1 encoding is decoded as UTF-8 encoding.</p>
<p>The <code>decodeFen</code> code is a "stream-of-conciousness" code that is hard to read and prove correct. The code is missing fundamental concepts like functions to encapsulate complexity and implementation details. For example, organize <code>decodeFen</code> as a series of calls to parse functions for each FEN field.</p>
<hr>
<p>As an example, consider the FEN piece placement field. Here's a first draft:</p>
<p><code>pieces.go</code>:</p>
<pre><code>package main

import (
    "errors"
    "fmt"
    "strings"
)

type Board [8][8]byte

const (
    whitePieceLetters = "PNBRQK"
    blackPieceLetters = "pnbrqk"
    pieceLetters      = whitePieceLetters + blackPieceLetters
)

func isPiece(p byte) bool {
    for i := 0; i &lt; len(pieceLetters); i++ {
        if p == pieceLetters[i] {
            return true
        }
    }
    return false
}

var (
    ErrRankOutOfRange = errors.New("rank out of range")
    ErrFileOutOfRange = errors.New("file out of range")
    ErrPieceInvalid   = errors.New("piece invalid")
)

func parseFENPieces(board *Board, pieces string) error {
    ranks := strings.Split(pieces, "/")
    if len(ranks) != len(board) {
        return ErrRankOutOfRange
    }
    for r, rank := range ranks {
        f := 0
        for i := 0; i &lt; len(rank); i++ {
            piece := rank[i]
            if piece &gt;= '0' &amp;&amp; piece &lt;= '9' {
                for j := byte(0); j &lt; piece-'0'; j++ {
                    if f &gt;= len(board[0]) {
                        return ErrFileOutOfRange
                    }
                    board[r][f] = '-'
                    f++
                }
            } else {
                if f &gt;= len(board[0]) {
                    return ErrFileOutOfRange
                }
                if !isPiece(piece) {
                    return ErrPieceInvalid
                }
                board[r][f] = piece
                f++
            }
        }
        if f != len(board[0]) {
            return ErrFileOutOfRange
        }
    }
    return nil
}

func main() {
    fens := []string{
        // https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation
        "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2",
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2",
    }
    var board Board
    for _, fen := range fens {
        fields := strings.Split(fen, " ")
        if len(fields) &gt; 0 {
            pieces := strings.Split(fen, " ")[0]
            fmt.Println(pieces)
            err := parseFENPieces(&amp;board, pieces)
            fmt.Println(err)
            for i := range board {
                fmt.Printf("%c\n", board[i])
            }
        }
    }
}
</code></pre>
<p>Playground: <a href="https://play.golang.org/p/-pPnCs2GMao" rel="nofollow noreferrer">https://play.golang.org/p/-pPnCs2GMao</a></p>
<p>Output:</p>
<pre><code>rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR
&lt;nil&gt;
[r n b q k b n r]
[p p p p p p p p]
[- - - - - - - -]
[- - - - - - - -]
[- - - - - - - -]
[- - - - - - - -]
[P P P P P P P P]
[R N B Q K B N R]
</code></pre>
<p>Use chess terminology to match the specification.</p>
<p>The chess board data structure is ubiquitous. Give it a type:</p>
<pre><code>type Board [8][8]byte
</code></pre>
<p>In Go, arguments are passed by value. For an array, the value is the entire array. Therefore, for efficiency, we use a pointer (8 bytes or 4 bytes) rather than an array (64 bytes).</p>
<p>Input must be valid. Make no assumptions about external input. Report errors.</p>
<p>Don't use magic values: 49 is '0', 57 is '9'.</p>
<p>And so forth.</p>
    </div>