<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>// Both s_weights and s_values will have the same length.
private static int[] s_weights; // array holding the weights of the items.
private static int[] s_values; // array holding the values of the items.
private static Dictionary&lt;(int, int), long&gt; s_memo; // memoization dictionary.

// NOTE: I cannot use an array instead of a dictionary here, cause it
// will be a very large 2d array and will give OutOfMemoryException.

public static void Run(int n, int maxWeight, int[] weights, int[] values)
{
</code></pre>
</blockquote>
<p>In general: IMO it's bad design if you use static members as state members. Here it's maybe unimportant because it's just an exercise, but in real world you shouldn't do that, because it's asking for trouble if you for instance run the code in two different threads at the same time.</p>
<p>So change them to instance members and provide a static starter method like:</p>
<pre><code>public class Knapsack
{
  private int n;
  private int maxWeight;
  private int[] weights;
  private int[] values;

  public Knapsack(int n, int maxWeight, int[] weights, int[] values)
  {
    this.n = n;
    this.maxWeight = maxWeight;
    this.weights = weights;
    this.values = values;
  }

  public long Run()
  {
    // TODO: The algorithm
  }

  public static long Solve(int n, int maxWeight, int[] weights, int[] values)
  {
    Knapsack solution = new Knapsack(n, maxWeight, weights, values);
    return solution.Run();
  }
}
</code></pre>
<hr>
<p>Besides that, I won't mention that you should separate the input handling and the processing into different classes.</p>
<hr>
<p>When it comes to the algorithm it self, I have tried to clean it up a bit:</p>
<pre><code>private static long Solve(int weightLeft, int numberOfItemsToConsider)
{
  // simple base case.
  if (weightLeft == 0 || numberOfItemsToConsider == 0) return 0;

  // If already calculated, get it from the dictionary.
  if (s_memo.TryGetValue((weightLeft, numberOfItemsToConsider), out var cachedValue))
    return cachedValue;

  long result = Solve(weightLeft, numberOfItemsToConsider - 1);

  // Can we take the current item? If yes, calculate the solution.
  if (weightLeft &gt;= s_weights[numberOfItemsToConsider - 1])
  {
    long takeCurrent = s_values[numberOfItemsToConsider - 1] + Solve(weightLeft - s_weights[numberOfItemsToConsider - 1], numberOfItemsToConsider - 1);
    // Maximize the value between the two cases, taking or not taking the item.
    result = Math.Max(takeCurrent, result);
    // Add the result to the memo dictionary.
  }

  s_memo[(weightLeft, numberOfItemsToConsider)] = result;
  return result;
}
</code></pre>
<p>It doesn't do much performance wise but, is maybe a little easier to follow.</p>
<hr>
<p>A significant performance gain you'll only get, if you substitute the <code>s_memo</code>-dictionary with a two dimensional jagged array:</p>
<pre><code>static long[][] valueTable = null;

public static void Run(...) {
  valueTable = Enumerable.Range(0, n + 1).Select(i =&gt; Enumerable.Range(0, maxWeight + 1).Select(_ =&gt; -1L).ToArray()).ToArray();
</code></pre>
    </div>