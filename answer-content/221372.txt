<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem with catching <code>NullPointerException</code> is “which one did you catch?”  A <code>null</code> can be returned from <code>getGrandParent()</code>, and using that return value without checking will cause the exception.  <strong>OR</strong> a bug in <code>getGrandParent()</code> might cause an exception while trying to find the parent’s parent, and you are obscuring the bug by assuming the <code>NullPointerException</code> results from a properly returned <code>null</code> value.</p>

<p>You can use <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Optional.html" rel="noreferrer"><code>Optional</code></a> to properly capture the <code>null</code> and not call subsequent function. </p>

<pre><code>Optional&lt;Boolean&gt; isRequired = Optional.ofNullable(context)
                          .map(Context::getGrandParent)
                          .map(GrandParent::getParent)
                          .map(Parent::getChild)
                          .map(Child::isRequired);

if (!isRequired.isPresent()) {
    LOG.error("Unable to determine if processing is required.");
} else if (isRequired.get()) {
    // continue with business logic
}
</code></pre>

<p>The <code>Context::</code>, <code>GrandParent::</code>, <code>Parent::</code>, <code>Child::</code> class types are, of course, WAG's.  You'll need to supply the corrent types based on the type returned by the previous stage.</p>

<p>Alternately, you could use <code>.getOrElse(Boolean.FALSE)</code> at the end of the <code>.map()</code> chain.</p>
    </div>