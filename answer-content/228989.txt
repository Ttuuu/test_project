<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Modularization</strong><br>
Generally I like well modularized C programs and libraries, however, in this case the library would benefit from having all the functions in one file. This would allow all the function access to certain functions that the user should not see.</p>

<p>The functions that the user should not see are:</p>

<ul>
<li><code>stack_resize(struct stack *, size_t)</code></li>
<li><code>stack_diagnose(const char *type, const char *diagnostic)</code></li>
<li><code>stack_error(const char *str)</code></li>
<li><code>stack_warn(const char *str)</code></li>
</ul>

<p>The above functions should be defined as static functions within the module so that they do not impact the global name space.</p>

<p>It might be better if the function <code>void stack_push(void *val, size_t size, struct stack *stack)</code> called <code>stack_resize(struct stack *, size_t)</code> rather than forcing the user to resize the stack.</p>

<p><em>Note: none of the functions in <code>stack_diagnostics.c</code> are declared as externs where they are used or in a header file so that they are declared at run time; this could possibly cause some compilers to complain.</em></p>

<p><strong>Possible Problems in the Code</strong><br>
I see two possible problems in the following code:  </p>

<pre><code>    if(!newsize)
        stack_error("resizing stack to size 0");
    else if(newsize &lt; 16)
        stack_warn("resizing stack to size less than 16");
</code></pre>

<p>The first is that while the allocation error is reported, it is not handled. If <code>stack_resize</code> is called internally then there really should be error handling. If <code>stack_resize</code> is called explicitly by the user then the function should return at this point so that the user can handle the allocation error.</p>

<p>The second problem I see is that while in the rest of the function the <code>if</code> and <code>else</code> clauses are wrapped in braces this code is not wrapped in braces. First this is inconsistent and second for maintenance reasons it would be better if all <code>if</code> and <code>else</code> clauses were compound statements to allow for expansion of the code. </p>

<p><strong>Include Files</strong><br>
Some compilers can't find the include file <code>stack.h</code> which is local to the code when it is used as </p>

<pre><code>#include &lt;stack.h&gt;
</code></pre>

<p>While that usage would be correct if the file was in a library folder somewhere, it is not correct within the source code for the library itself unless a <code>-I</code> flag is set during the build.</p>

<p>It's not really clear what <code>stack_internal.h</code> is for.</p>
    </div>