<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>CommandTimeout:</strong></p>

<p>Allowing the client to specify a given command's execution time threshold by making it a read/write property is good improvement from the first post of this class, that you did not mention in your <em>"outline of what I have done and why"</em>, so I am mentioning it here. </p>



<pre class="lang-vb prettyprint-override"><code>Public Property Get CommandTimeout() As Long
    CommandTimeout = this.CommandTimeout
End Property

Public Property Let CommandTimeout(ByVal value As Long)
    this.CommandTimeout = value
End Property
</code></pre>

<p><strong>Managing The Connection Object:</strong></p>

<p>Since I am on the topic of things you forgot to mention, In both of <code>GetDisconnectedRecordset</code> and <code>QuickExecuteNonQuery</code>, you wrote this: </p>

<pre class="lang-vb prettyprint-override"><code>If Not CurrentConnection Is Nothing Then: If (CurrentConnection.State And adStateOpen) = adStateOpen Then CurrentConnection.Close
Set CurrentConnection = Nothing
</code></pre>

<p>Bit-wise comparisons, specifically with respect to the <code>Connection</code> object's state, is good, but you could probably make the code look more friendly: </p>

<pre class="lang-vb prettyprint-override"><code>If Not CurrentConnection Is Nothing Then
    If (CurrentConnection.State And adStateOpen) = adStateOpen Then
        CurrentConnection.Close
    End If
End If
Set CurrentConnection = Nothing 
</code></pre>

<p><strong>OutPut Parameters:</strong></p>

<blockquote>
  <p>"Also, If output parameters are used, you need a way to return them, so I use the following in ADODBWrapper to do so"</p>
</blockquote>

<p>You are indeed able to return parameters, from your <code>OuputParameters</code> property, in the sense that you are returning the ACTual <code>Parameter</code> object, but why do that if you only want to access a parameter's value? As you have it now, one would have to write code like the following, just to get a value: </p>

<pre class="lang-vb prettyprint-override"><code>Private Sub GetOutputParams()

    Dim SQLDataAdapter As ADODBWrapper
    Dim rsDisConnected As ADODB.Recordset
    Dim InputParam As String
    Dim OutPutParam As Integer

        Set SQLDataAdapter = New ADODBWrapper

        SQLDataAdapter.DeriveParameterDirection = True

        On Error GoTo CleanFail
        InputParam = "Val1,Val2,Val3"
        Set rsDisConnected = SQLDataAdapter.GetDisconnectedRecordSet(CONN_STRING, adUseClient, _
                                                                     "SCHEMA.SOME_STORED_PROC_NAME", _
                                                                     adCmdStoredProc, InputParam, OutPutParam)


        Sheet1.Range("A2").CopyFromRecordset rsDisConnected

       '***************************************************
       'set the parameter object only to return the value? 
        Dim Param As ADODB.Parameter 
        If SQLDataAdapter.OuputParameters.Count &gt; 0 Then 
            Set Param = SQLDataAdapter.OuputParameters(1)
            Debug.Print Param.Value
        End If
       '***************************************************

CleanExit:
    Exit Sub

CleanFail:
    If SQLDataAdapter.HasADOError Then Debug.Print SQLDataAdapter.ErrorsToString()
    Resume CleanExit

End Sub
</code></pre>

<p>If you change the private <code>PopulateOutPutParameters</code> procedure In <code>ADODBWrapper</code> to add only the <code>Parameter.Value</code> to <code>OutPutParameters</code> collection like this: </p>

<pre class="lang-vb prettyprint-override"><code>Private Sub PopulateOutPutParameters(ByRef Parameters As ADODB.Parameters)

    Dim Param As ADODB.Parameter

    Set this.OuputParameters = New Collection

    For Each Param In Parameters
        Select Case Param.Direction
            Case adParamInputOutput

                this.OuputParameters.Add Param.value

            Case adParamOutput

                this.OuputParameters.Add Param.value

            Case adParamReturnValue

                this.OuputParameters.Add Param.value

        End Select
    Next

End Sub
</code></pre>

<p>Then you could do this in the client code: </p>

<pre class="lang-vb prettyprint-override"><code>If SQLDataAdapter.OuputParameters.Count &gt; 0 Then
    Debug.Print SQLDataAdapter.OuputParameters(1)
End If
</code></pre>

<p>Saying all of that, it would still be nice to have a way to map parameters without the client having to know their ordinal position as determined by the way a stored procedure was written, but this is much easier said than done. </p>
    </div>