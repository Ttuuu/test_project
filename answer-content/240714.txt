<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unnecessary Generator</h1>

<p>You've got an unnecessary generator expression here:</p>

<pre><code>def bezier_curve(control_points, number_of_curve_points):
    return [
        bezier_point(control_points, t)
        for t in (
            i / (number_of_curve_points - 1) for i in range(number_of_curve_points)
        )
    ]
</code></pre>

<p>You don't need to generate <code>i / (n-1)</code>; you could simply pass that argument to the <code>bezier_point()</code> function:</p>

<pre><code>def bezier_curve(control_points, number_of_curve_points):
    return [ bezier_point(control_points, i / (number_of_curve_points - 1))
             for i in range(number_of_curve_points)
           ]
</code></pre>

<p>Slight optimization: instead of computing <code>number_of_curve_points - 1</code> <span class="math-container">\$O(N)\$</span> times (pure Python will not cache the result), precompute it:</p>

<pre><code>def bezier_curve(control_points, number_of_curve_points):
    last_point = number_of_curve_points - 1
    return [ bezier_point(control_points, i / last_point )
             for i in range(number_of_curve_points)
           ]
</code></pre>

<h1>Tail Recursion</h1>

<p>Python does not do Tail Call Optimization, so with M control points, you will recursively enter and exit M calls, for each of the N points along your curve.  That is M*N unnecessary stack frame entry/exits.  You should do the looping yourself:</p>

<pre><code>def bezier_point(control_points, t):
    while len(control_points) &gt; 1:
        control_linestring = zip(control_points[:-1], control_points[1:])
        control_points = [(1 - t) * p1 + t * p2 for p1, p2 in control_linestring]
    return control_points[0]
</code></pre>

<p>Since we loop while <code>len(control_points) &gt; 1</code>, it should be guaranteed that <code>control_points</code> will only have one point when the loop exits, so <code>return control_points[0]</code> is safe.  The exception is if the function is called with zero control points, but then <code>control_points[0]</code> will properly fail with an <code>IndexError</code>.</p>
    </div>