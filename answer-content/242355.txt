<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few places in the code where you have an array and you want to construct another array from it. Rather than <code>forEach</code> followed by <code>push</code>, it's more appropriate to use <code>Array.prototype.map</code> to transform one array into another. For example:</p>

<pre><code>useEffect(() =&gt; {
    let tempOptions = [];
    initialOptions.forEach(option =&gt; tempOptions.push({ 'text': option, 'isAvailable': true, 'shouldShow': true }));
    setOptions(tempOptions);
}, []);
</code></pre>

<p>can turn into</p>

<pre><code>useEffect(() =&gt; {
    const newOptions = initialOptions.map(text =&gt; ({ text, isAvailable: true, shouldShow: true }));
    setOptions(newOptions);
}, []);
</code></pre>

<p>As you can see above, properties that are valid identifiers don't need to be quoted (and probably shouldn't, to cut down on noise), and by planning ahead with variable names, you can sometimes use shorthand properties rather than having to list both the key and its value. In addition, you should <a href="https://softwareengineering.stackexchange.com/q/278652">always use <code>const</code></a> to declare variables when possible - don't use <code>let</code> unless you wish to warn the reader of the code that you may have to reassign the variable later.</p>

<p>You can use <code>.map</code> in the second <code>useEffect</code> call too, to great effect:</p>

<pre><code>useEffect(() =&gt; {
    console.log('Build available and selected options');
    const optionToText = option =&gt; option.text;
    const availableOptionsText = options
        .filter(option =&gt; option.isAvailable &amp;&amp; option.shouldShow)
        .map(optionToText);
    const selectedOptionsText = options
        .filter(option =&gt; !option.isAvailable)
        .map(optionToText);

    setAvailableOptions(availableOptionsText);
    setSelectedOptions(selectedOptionsText);
}, [options]);
</code></pre>

<p>In <code>updateStateOfOption</code>, you are <em>mutating</em> the <code>isAvailable</code> property of one of the <code>options</code> array objects:</p>

<pre><code>const updateStateOfOption = clickedOption =&gt; {
    const tempOptions = [...options];
    tempOptions.forEach(option =&gt; {
        if (option.text === clickedOption) {
            option.isAvailable = !tempOptions.find(option =&gt; option.text === clickedOption).isAvailable
        }
    });
    setOptions(tempOptions);
}
</code></pre>

<p>Spreading an array only creates a shallow copy - each element in the original array is still a reference to one of the elements in the new array, so mutating an element in the new array changes an element in the old array too. Since this is React, such mutation should be avoided. Instead, use <code>findIndex</code> to find the index of the matching option, then create a new array by spreading the parts of the array <em>before</em> the option, then declaring a new (modified) object, then spreading the parts of the array <em>after</em> the option:</p>

<pre><code>const updateStateOfOption = clickedOption =&gt; {
    const clickedIndex = options.findIndex(option =&gt; option.text === clickedOption);
    const newOptions = [
        ...options.slice(0, clickedIndex),
        { ...options[clickedIndex], isAvailable: !options[clickedIndex].isAvailable },
        ...options.slice(clickedIndex + 1),
    ];
    setOptions(newOptions);
}
</code></pre>

<p>You have the same issue in the next <code>useEffect</code> too. This time, you can change every element of the array by using <code>.map</code> and spreading the previous option into an object, then assigning the new <code>shouldShow</code> property:</p>

<pre><code>useEffect(() =&gt; {
    const newOptions = options.map(option =&gt; ({
        ...option,
        shouldShow: availableFilterValue === '' || option.text.toLowerCase().startsWith(availableFilterValue.toLocaleLowerCase())
    }));
    if (newOptions.length !== 0) {
        setOptions(newOptions);
    }
}, [availableFilterValue]);
</code></pre>

<p>You can use <code>||</code> instead of the conditional operator here, if you want:</p>

<pre><code>fieldValue={availableFilterValue ? availableFilterValue : ''}
</code></pre>

<p>can be</p>

<pre><code>fieldValue={availableFilterValue || ''}
</code></pre>
    </div>