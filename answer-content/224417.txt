<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>GroupBy vs ToLookup</h1>

<p>From reference source: <a href="https://github.com/microsoft/referencesource/blob/master/System.Core/System/Linq/Enumerable.cs" rel="noreferrer">Linq Enumerable</a></p>

<p><code>Dictionary&lt;object, HashSet&lt;T&gt;&gt;&gt;</code> can be replaced with a <code>ILookup&lt;object, T&gt;</code>. </p>

<blockquote>
<pre><code>public static ILookup&lt;TKey, TSource&gt; ToLookup&lt;TSource, TKey&gt;(
    this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TKey&gt; keySelector) 
{
    // impl ..
}
</code></pre>
</blockquote>

<p>There is also an overload in case you require compliant behavior with <code>HashSet&lt;T&gt;</code>.</p>

<blockquote>
<pre><code>public static ILookup&lt;TKey, TSource&gt; ToLookup&lt;TSource, TKey&gt;(
    this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TKey&gt; keySelector, 
    IEqualityComparer&lt;TKey&gt; comparer)
{
    // impl ..
}
</code></pre>
</blockquote>

<p>This is much faster than <code>GroupBy</code>. Have a look at the implementation of the latter.</p>

<blockquote>
<pre><code>public static IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(
    this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TKey&gt; keySelector) 
{
    return new GroupedEnumerable&lt;TSource, TKey, TSource&gt;(source, keySelector, IdentityFunction&lt;TSource&gt;.Instance, null);
}
</code></pre>
</blockquote>

<p>And <code>GroupedEnumerable</code> wraps <code>Lookup</code>.</p>

<blockquote>
<pre><code>public IEnumerator&lt;IGrouping&lt;TKey, TElement&gt;&gt; GetEnumerator() 
{
    return Lookup&lt;TKey, TElement&gt;.Create&lt;TSource&gt;(source, keySelector, elementSelector, comparer).GetEnumerator();
}
</code></pre>
</blockquote>

<hr>

<h3>Refactored Code</h3>

<p>Pieter's answer could be updated with a performance boost substituting <code>GroupBy</code> with <code>ToLookup</code>, also including Peter's micro-optimized <code>ToList</code>.</p>

<pre><code>public static IDictionary&lt;string, ILookup&lt;object, T&gt;&gt; MultiLookupBy&lt;T&gt;(
    this IEnumerable&lt;T&gt; source, params (string Label, Func&lt;T, object&gt; Getter)[] groupings)
{
    if (source == null) throw new ArgumentNullException(nameof(source));
    if (groupings == null) throw new ArgumentNullException(nameof(groupings));

    var materializedSource = source.ToList();
    return groupings.ToDictionary(
        grouping =&gt; grouping.Label, 
        grouping =&gt; materializedSource.ToLookup(grouping.Getter));
}
</code></pre>

<p>And your test code would change a bit.</p>

<pre><code> sb.AppendLine($"Results for {result.Key}:");
 foreach (var dict in result.Value)
 {
     sb.AppendLine($"{dict.Key}: {dict.Count()} [{(string.Join(", ", dict))}]");
 }
 sb.AppendLine();
</code></pre>

<p>I get performance close to the initial OP with this refactored code.</p>
    </div>