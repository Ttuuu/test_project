<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the biggest thing you have to take into account is <strong>Separation of Concerns</strong>. You should definitely <em>separate page and element definitions from the actual logic of the test</em>. Put your element locators into <a href="https://selenium-python.readthedocs.io/page-objects.html#page-object-classes" rel="nofollow noreferrer">Page Objects</a> and reference page object attributes in your tests. You can, for instance, have a Search page, a Search Results page, a Booking page on a high level which, in turn, may consist of inner page objects defining blocks/parts of a page.</p>

<p>Another way to abstract things away is <strong>Behavior Driven Development</strong> which would, at least, make you think of the actions and conditions on the target site pages and describe them in a natural language. There are a few Python packages for BDD, in particular - <a href="https://behave.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>behave</code></a> which can be, of course, used with selenium: <a href="https://www.blazemeter.com/blog/using-the-behave-framework-for-selenium-bdd-testing-a-tutorial" rel="nofollow noreferrer">Using the behave Framework for Selenium BDD Testing: A Tutorial</a></p>
    </div>