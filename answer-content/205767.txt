<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Temporary result holder, <code>eventListGrouped</code>, is not necessary if you are going to return it directly. Each <code>case</code> can just <code>return ...</code> instead of storing value (<code>eventListGrouped = ...</code>. And, in the <code>default</code> case, you can just <code>return Enumerable.Empty&lt;...&gt;()</code>.</li>
<li><p>Minus the edge <code>default</code> case where you log an error and return an empty enumerable, the rest of code is essentially branching on slightly different group reduce. However, we can't really convert to a dictionary since the key of <code>IGrouping&lt;TKey,TValue&gt;</code> is different for each item. While it is possible use the <code>IEnumerable&lt;TValue&gt;</code> interface, but that would mean losing type inference on <code>TKey</code>. Re-accessing <code>TKey</code> would require a runtime casting, which could be error prone if you are not careful.</p>

<p>It is easy to notice that last four properties (<code>EventDurationSeconds</code>, <code>EventCount</code>, <code>OeeEventTypeColourHex</code>, <code>OeeEventTypeName</code>) of <code>EventListGroup</code> is initialized the way. And, we can extract these like so:</p>

<pre><code>EventListGroup CreateEventListGroup(IEnumerable&lt;EventListRow&gt; source, Action&lt;EventListGroup&gt; setup)
{
    var result = new EventListGroup
    {
        EventDurationSeconds = source.Sum(e =&gt; e.EventDurationSeconds),
        EventCount = source.Count(),
        OeeEventTypeColourHex = source.Max(e =&gt; e.OeeEventTypeColourHex),
        OeeEventTypeName = source.Max(e =&gt; e.OeeEventTypeName)
    };
    setup(result);

    return result;
}
</code></pre>

<p><em>The first property <code>GroupID</code> seems the same, but the <code>TKey</code> is different in each case.</em></p>

<p>With <code>setup</code> used to inject any extra properties that doesn't fit into the observed pattern:</p>

<pre><code>.Select(group =&gt; CreateEventListGroup(group, result =&gt;
{
    result.GroupID = group.Min(e =&gt; e.StartDateTime.CimToSql());
    result.GroupName = group.Min(e =&gt; e.StartDateTime.ToString("MMM dd yyyy HH:00tt"));
}));
</code></pre></li>
</ul>

<hr>

<p>Full code:</p>

<pre><code>public virtual IEnumerable&lt;EventListGroup&gt; GetEventsGrouped(IEnumerable&lt;EventListRow&gt; eventList, GroupByEventData groupBy)
{
    switch (groupBy)
    {
        case GroupByEventData.Hour:
            return eventList
                .GroupBy(e =&gt; new { e.StartDateTime.Date, e.StartDateTime.Hour })
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Min(e =&gt; e.StartDateTime.CimToSql());
                    result.GroupName = group.Min(e =&gt; e.StartDateTime.ToString("MMM dd yyyy HH:00tt"));
                }));
        case GroupByEventData.Day:
            return eventList
                .GroupBy(e =&gt; new { e.Date })
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Min(e =&gt; e.Date.CimToSql());
                    result.GroupName = group.Min(e =&gt; e.Date.ToString("MMM dd yyyy"));
                }));
        case GroupByEventData.Week:
            return eventList
                .GroupBy(e =&gt; new { Week = e.StartDateTime.GetWeekNumber(), e.StartDateTime.Year })
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Min(e =&gt; e.StartDateTime.CimToSql());
                    result.GroupName = "Wk " + group.Key.Week + ", " + group.Key.Year;
                }));
        case GroupByEventData.Month:
            return eventList
                .GroupBy(e =&gt; new { e.StartDateTime.Month, e.StartDateTime.Year })
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Min(e =&gt; e.StartDateTime.CimToSql());
                    result.GroupName = group.Key.Month + "/" + group.Key.Year;
                }));
        case GroupByEventData.Year:
            return eventList
                .GroupBy(e =&gt; new { e.StartDateTime.Year })
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Min(e =&gt; e.StartDateTime.CimToSql());
                    result.GroupName = group.Key.Year.ToString();
                }));
        case GroupByEventData.Job:
            return eventList
                .GroupBy(e =&gt; e.JobID ?? -1)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt; (e.JobName ?? "No Job"));
                }));
        case GroupByEventData.Product:
            return eventList
                .GroupBy(e =&gt; e.ProductID ?? -1)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt; (e.ProductName ?? "No Product"));
                }));
        case GroupByEventData.System:
            return eventList
                .GroupBy(e =&gt; e.SystemID)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt; (e.SystemName ?? "No System"));
                }));
        case GroupByEventData.EventDefinition:
            return eventList
                .GroupBy(e =&gt; e.EventDefinitionID)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt; (e.EventDefinitionName ?? "No Event Definition"));
                }));
        case GroupByEventData.EventCategory01:
            return eventList
                .GroupBy(e =&gt; e.EventCategory01ID ?? -1)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt; (e.EventCategory01Name ?? "Unassigned"));


                }));
        case GroupByEventData.EventCategory02:
            return eventList
                .GroupBy(e =&gt; e.EventCategory02ID ?? e.EventCategory01ID ?? -1)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt;
                        (e.EventCategory01Name ?? "Unassigned") +
                        (e.EventCategory02Name != null ? (this.GetEventCategoryDelimiter() + e.EventCategory02Name) : ""));


                }));
        case GroupByEventData.EventCategory03:
            return eventList
                .GroupBy(e =&gt; e.EventCategory03ID ?? e.EventCategory02ID ?? e.EventCategory01ID ?? -1)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt;
                        (e.EventCategory01Name ?? "Unassigned") +
                        (e.EventCategory02Name != null ? (this.GetEventCategoryDelimiter() + e.EventCategory02Name) : "") +
                        (e.EventCategory03Name != null ? (this.GetEventCategoryDelimiter() + e.EventCategory03Name) : ""));
                }));
        case GroupByEventData.EventCategory04:
            return eventList
                .GroupBy(e =&gt; e.EventCategory04ID ?? e.EventCategory03ID ?? e.EventCategory02ID ?? e.EventCategory01ID ?? -1)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt;
                        (e.EventCategory01Name ?? "Unassigned") +
                        (e.EventCategory02Name != null ? (this.GetEventCategoryDelimiter() + e.EventCategory02Name) : "") +
                        (e.EventCategory03Name != null ? (this.GetEventCategoryDelimiter() + e.EventCategory03Name) : "") +
                        (e.EventCategory04Name != null ? (this.GetEventCategoryDelimiter() + e.EventCategory04Name) : ""));

                }));
        case GroupByEventData.EventCode:
            return eventList
                .GroupBy(e =&gt; e.EventCodeID ?? -1)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt; (e.EventCodeName ?? "Unassigned"));
                }));

        case GroupByEventData.OeeEventType:
            return eventList
                .GroupBy(e =&gt; e.OeeEventType)
                .Select(group =&gt; CreateEventListGroup(group, result =&gt;
                {
                    result.GroupID = group.Key.ToString();
                    result.GroupName = group.Max(e =&gt; (e.OeeEventTypeName ?? "None"));
                }));

        default:
            Log.WriteError(string.Format("Group by: \"{0}\" not coded for", groupBy), "EventService.GetEventsGrouped");
            return Enumerable.Empty&lt;EventListGroup&gt;();
    }

    EventListGroup CreateEventListGroup(IEnumerable&lt;EventListRow&gt; source, Action&lt;EventListGroup&gt; setup)
    {
        var result = new EventListGroup
        {
            EventDurationSeconds = source.Sum(e =&gt; e.EventDurationSeconds),
            EventCount = source.Count(),
            OeeEventTypeColourHex = source.Max(e =&gt; e.OeeEventTypeColourHex),
            OeeEventTypeName = source.Max(e =&gt; e.OeeEventTypeName)
        };
        setup(result);

        return result;
    }
}
</code></pre>
    </div>