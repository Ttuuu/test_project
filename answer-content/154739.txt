<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bear in mind the other answers about open sets and related tables -- they are almost always the better option, and probably are the better option in this exact case.</p>

<p>However, <em>if</em> the enum is the appropriate device in C# -- and you are <em>certain</em> that the C# code should drive any change, rather than the database -- my preferred approach is to store the underlying value type in the database (<code>bigint</code>, <code>int</code>, <code>smallint</code>, <code>tinyint</code>) <em>and then constrain the column with the valid enum values</em>.</p>

<p>If you want to take it <em>even further</em>, in many database engines, you can use a database UDF (preferably an inline table function) to tie the value to the text string.</p>

<p>e.g...</p>

<pre><code>public enum Foo : byte { Bar = 1, Bax = 2, Baz = 3 }

public class Fooable
{ 
    public string Name { get; set } 
    public Foo Foo { get; set; }
}
</code></pre>

<p>and...</p>

<pre class="lang-sql prettyprint-override"><code>/* SQL Server 2008 upwards */
CREATE TABLE fooable
(
    name VARCHAR(100),
    foo TINYINT
)

ALTER TABLE fooable 
  ADD CONSTRAINT ck_fooable_foo_inrange
  CHECK (foo_col IN (1, 2, 3))

CREATE FUNCTION tf_foo()
RETURNS TABLE AS RETURN (
    SELECT * FROM (VALUES
        (1, "Bar"),
        (2, "Bax"),
        (3, "Baz")
    ) x(enum_value, enum_text)
)
</code></pre>

<p>Depending on how much time you want to commit to this, it is <em>possible</em> to autogenerate the <code>ALTER TABLE</code> and <code>CREATE FUNCTION</code> statements based on the defined enum values, by using a post-build task to reflect over the enum members -- T4 text templating is one possible route.</p>

<p>But, really, go back and look at the related table/foreign key approach.  In the long-run you will get more mileage out of that than out of this.  The key to the above approach is the <em>certainty</em> that a C# enum is the canonical source of a valid range of values.  I highly doubt you have that, if you are wrestling with using strings to store your data.</p>
    </div>