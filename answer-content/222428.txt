<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>To simplify your input you could change <code>word == explicit_word</code> to <code>explicit_word in word</code>.</p>

<p>This can lead to the <a href="https://en.wikipedia.org/wiki/Scunthorpe_problem" rel="nofollow noreferrer">Scunthorpe problem</a>, and so from here you can check if the word only contains prefixes and suffixes.</p>

<p>Given <a href="https://dictionary.cambridge.org/grammar/british-grammar/word-formation/prefixes" rel="nofollow noreferrer">the amount of common prefixes alone</a>, it's unlikely you'd catch all variations using a blacklist alone. It would also catch gibberish/semigibberish that you may not have thought of - "Antioverfucked" / "Overantifucked".</p></li>
<li><p>Your code misses words without spaces "I don't give afuck" and so you may want to perform a 'similarity check'.</p>

<p>This could also match thinks like "sexx".</p></li>
<li><p>Your code doesn't reasonably handle ZWSP and other forms of Unicode abuse.</p>

<pre><code>&gt;&gt;&gt; print('exp\u200blitive')
exp​litive
&gt;&gt;&gt; 'exp\u200blitive' == 'explitive'
False
&gt;&gt;&gt; print('exp\u1DD3litive')
expᷓlitive
</code></pre></li>
<li><p>Your code doesn't reasonably detect leet speak.</p></li>
<li><p>Your code doesn't reasonably detect creative Unicode character selections.</p>

<pre><code>&gt;&gt;&gt; print('\u2131\u01DA\u0255\u212A')
ℱǚɕK
</code></pre></li>
<li><p>Your code doesn't reasonably handle phonetic abuse.</p>

<p>"Phuck" is pronounced "Fuck".</p>

<p>"Bend Dover" sounds like "bend over".</p>

<p>"I CUP" spelt out is "I see you pee".</p>

<p>"See you next Tuesday" each starting phonetic spells "CU...".</p></li>
</ul>

<hr>

<p>When I say doesn't reasonably, I mean if someone combined the above to get something ridiculous like "4n7ipᷓhǚ​ɕK" your word list would have to be ridiculous in size to match it.</p>

<p>It should also be fairly obvious that someone probably will find a way to bypass your check no matter what you do.</p>

<h1>Practicality vs Perfection</h1>

<p>Given how widespread leet speak is you should handle that at a bare minimum. This is fairly easy, you just 'translate' from this alphabet. And perform the checks you're already doing.</p>

<p>You should then probably use a 'similar check' to match "sexx" or "afuck". This is as duplicating a letter or missing a space is readable and easy.<br>
This check may result in problems as "Scunthorpe" could be understood as "s cunt thorp e" so would be split into two two known words and two extra letters, and then the similarity check my come back low enough to say it's a swearword.</p>

<p>From here ZWSP and other unicode abuse probably are the next most common. And with things like <a href="https://pypi.org/project/deasciiify/" rel="nofollow noreferrer"><code>deasciiify</code></a> it's only getting easier.</p>
    </div>