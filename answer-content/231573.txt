<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ol>
<li><p>Since this is an <code>async</code> function, it seems likely the caller may want to know when it's done and if it succeeded.  To do that, you need to reject upon error.  That means rethrow after logging inside your catch.  This allows the error to get back to the caller as a rejected promise.</p></li>
<li><p>Simplify by changing <code>config.archives.reduce()</code> to <code>config.archives.some()</code>.  This will also be faster in cases where there is a match because <code>.some()</code> will short-circuit the iteration as soon as a match is found.</p></li>
<li><p>Change <code>return dir.indexOf(v.slice(-1) === '\\' ? v : (v + '\\')) === 0;</code> to <code>return dir.indexOf(v) === 0;</code>.  It appears the point of this code is to allow partial matches where <code>v</code> is a subset of <code>dir</code>, but starts matching at the beginning.  If that's the case and if I understood what you're trying to do here, then you don't need to make sure that <code>v</code> has a trailing slash on it as that won't change the outcome.</p></li>
<li><p>Remove <code>|| config.archives.includes(dir)</code>.  It appears that is redundant since a full match will have already been found in the previous iteration through <code>config.archives</code>.</p></li>
<li><p>Coding style.  I prefer <code>if (condition) { do something }</code> rather than <code>if (condition) continue</code> as I just think it's easier to read and follow.</p></li>
<li><p>You have a lot of references to <code>config.archives</code>.  I would suggest either just using archivesOG instead or make a shorter named local variable such as just <code>archives</code> that you can refer to everywhere except when assigning back to it.</p></li>
<li><p><code>r1</code> and <code>r2</code> could have much more meaningful names.</p></li>
<li><p>The code <code>dir.indexOf(v.slice(-1) === '\\' ? v : (v + '\\')) === 0;</code> begs to be put in a function with  a meaningful name.  It takes a bit of a pause when reading this code to figure out what that's doing.  If it has a meaningful function name such as <code>normalizePathEnd()</code> or something like that, the code will be a lot easier to read without having to follow the detail of the string manipulation.  Also, your code as you show it has two copies of this concept which also begs to be in a utility function.</p></li>
</ol>
    </div>