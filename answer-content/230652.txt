<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid stringly-typed data</h2>

<p>Given this sequence of operations:</p>

<pre><code>Socket data(bytes) -&gt; decode("utf-8")(string) -&gt; decode_ascii6()(string) -&gt; decode_msg_1()(dict)
</code></pre>

<p>and based on the <a href="https://en.wikipedia.org/wiki/Automatic_identification_system#Message_format" rel="nofollow noreferrer">specification for AIS</a>, UTF-8 is not an appropriate decode format. ASCII should be used instead - it's a fixed-width character format, and from what I read, none of the characters in the format deviate from that.</p>

<p>I discourage your approach in #1. Binary data are binary data; having any concern for performance rules out a string-based representation.</p>

<h2>Generators and message boundaries</h2>

<p>You should probably have a more nuanced approach to buffering. You should only <code>yield</code> after ensuring that your buffer ends on the boundary of a message, delimited by an ASCII newline byte. Another 'gotcha' is that <code>recv</code> only returns <em>up to</em> the number of bytes you specify, so you'll need to have logic to measure the returned result and deal with this.</p>

<p>The sanest way to represent this is two different generator functions. The first asks for 4096 bytes, yields chunks of one line at a time, and maintains a local buffer between loop iterations of incomplete lines.</p>

<p>The second generator function iterates over the result of the first generator function and does the actual unpacking into structured message objects.</p>

<h2>Modularize your file</h2>

<p>There's enough going on here - you have a bunch of documentation, a bunch of functions, etc. - that it's worth breaking out your file into multiple files in a module. It's still executable from the outside via <code>python -m</code>. I've made a <a href="https://github.com/M0r13n/pyais/pull/1" rel="nofollow noreferrer">pull request</a> doing only this.</p>
    </div>