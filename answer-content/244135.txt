<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In regards to speed, I'm not seeing a whole lot you could improve. One thing that comes to mind is the use of lower level APIs -- i.e. don't use File and BufferedImage. You could, for example, use a <code>DataOutputStream</code> (<a href="https://docs.oracle.com/javase/10/docs/api/java/io/DataOutputStream.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/10/docs/api/java/io/DataOutputStream.html</a>) which, from my understanding, is one of Java's lowest level APIs for writing data to a file. You could do something like this:</p>
<pre class="lang-java prettyprint-override"><code>DataOutputStream stream = new DataOutputStream(new FileOutputStream("path/to/file"));
</code></pre>
<p>Then with this, you can use methods like <code>writeByte</code> to continuously populate the image file, rather than doing it in one whole buffer. I don't know if in the end this produces a faster result, but it produces a result such that the user could stop the program partway through and still end up with an image.</p>
<p>The caveat here is that you need to research what the proper metadata for a PNG file looks like and output that manually.</p>
<hr>
<p>Something you could also try is using one loop as opposed to two.</p>
<p>To do that, you would do something like this:</p>
<pre class="lang-java prettyprint-override"><code>for(int i = 0; i &lt; width * height; i++) {
    //row=floor(n / width)
    //col=n-(row*width)
}
</code></pre>
<p>(I think I did the math right on those row and col numbers but you might want to check me).</p>
<p>This might be faster -- I don't know if the extra computations will slow things down, but it'd be worthy to try out.</p>
<hr>
<p>Finally, unrelated to speed: a lot of things in your code are hardcoded right now (i.e. the width, height, and file name).</p>
<p>I would instead export everything to a separate function for generating random images, and that function could take parameters width, height, and file name. Then, in your main function, you use some sort of user input to determine what to pass to that function (e.g. command-line arguments or STDIN).</p>
<p>Additionally, having a separate function makes it unit-testable.</p>
    </div>