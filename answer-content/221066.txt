<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Card:</h2>

<ol>
<li><p>Consider renaming <code>card_value</code> to just <code>value</code>. Since it belongs to an instance of the <code>Card</code> class, there is no point in restating the "card" part.</p></li>
<li><p>What purpose does the <code>suits</code> list of name-value pairs serve? It seems it's only used once in your script. In fact, it doesn't make sense to associate a suit with a number, especially since you just rely on indices later in <code>generate_deck</code> and never actually use the number portion of the pairs.</p></li>
<li><p>Consider changing the <code>values</code> list to a dictionary that maps a numerical value to its corresponding string name. For example:</p></li>
</ol>

<p><code>values = { 1: 'Ace', 2: 'Two', 3: 'Three', 4: 'Four', ... }</code></p>

<p>This would eliminate your reliance on passing in indices to initialize a card with a particular value, since that logic is a bit convoluted as it requires decrementing a card's value by one (or, in the case of Ace = 11, simply doesn't make sense).</p>

<p>Refactor your code for this accordingly.</p>

<h2>Entity:</h2>

<ol>
<li><p>Why not rename this to <code>Player</code>? In game dev, you usually only give something the generic name of <code>Entity</code> if that class is going to be an abstract class. Otherwise, you could argue that anything is an entity, including a card. Technically, the house is also a <code>Player</code>.</p></li>
<li><p>You are currently using <code>deposit</code> for both positive and negative values. That works and is fine from a technical standpoint, but it's not from a logical one. Consider using two separate methods, <code>deposit</code> and <code>withdraw</code>, that serve opposite purposes.</p></li>
<li><p><code>calc_card_value</code> isn't informative—what you're really doing is computing a <code>hand_value</code>. Moreover, your logic/efficiency can be simplified quite a bit, especially if you use my dictionary suggestion above for <code>Card</code>:</p></li>
</ol>

<pre><code>total_value = 0

for card in self.cards:

    if total_value &gt; 21 and card.value == 'Ace':
        total_value -= 10
    else:
        total_value += card.value

return total_value
</code></pre>

<p>This eliminates unnecessarily looping over the cards twice and is a bit more compact. A downside/tradeoff is that you're checking the conditional on each iteration.</p>

<p><strong>EDIT:</strong> This is a classic example of trying to optimize something and breaking the code in the process. I am wrong—you do need two loops here. My code doesn't do what you'd expect.</p>

<p>Instead, to keep the code more compact while still using two loops, I'd use a list comprehension:</p>

<pre><code>total_value = sum([card.value for card in self.cards])

if total_value &gt; 21:
     for card in self.cards:
          if card.card_value == "Ace":
               total_value -= 10
          if total_value &lt;= 21:
               break
</code></pre>

<h2>Global methods</h2>

<ol>
<li><p><code>generate_deck</code> is good.</p></li>
<li><p><code>deal_card</code> makes more sense as part of a <code>BlackjackGame</code> class that manages the game (more on this later/throughout the rest of the review).</p></li>
<li><p>Let's take a look at <code>check_winner</code>:</p>

<p>a. The logic would be much cleaner if this were part of a class like <code>BlackjackGame</code> that has members for the house and the player.</p>

<p>b. You should define a class constant in <code>BlackjackGame</code> for the <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">"magic number"</a> of 21: <code>BLACKJACK = 21</code>. That way, everyone can reference it as <code>BlackjackGame.BLACKJACK</code> (however, this isn't that big of a deal; 21 is well known as Blackjack in... Blackjack!).</p></li>
<li><p><code>play_game</code> would also be much simpler if it were part of <code>BlackjackGame</code>. You could then just rename it to <code>play</code>, deal the cards to the members <code>self.house</code> and <code>self.player</code>, and so on.</p></li>
</ol>

<p>The code is also a bit long for this function, mainly because you're doing two things: taking input for the player, and then taking "input" for house/the computer. Consider splitting those two code segments into their own methods and calling them here one after the other. The method for the player's scenario could return a boolean indicating whether the player bust or not. So something like:</p>

<pre><code>#deals 2 cards to the player, and one for the dealer
deal_card(house, deck)
deal_card(player, deck)
deal_card(player, deck)
#prints the current card on the table
player.print_current_cards()
house.print_current_cards()
#runs player and house scenarios
player_bust = self.determine_player_outcome()

if player_bust:
    player.withdraw(bet)
else:
    cycle_dealing_to_house()
    self.check_winner(bet)
</code></pre>

<p>Notice how your conditional for <code>if not bust</code> was also redundant—that's already covered by the <code>else</code> after <code>if bust</code>.</p>

<h2>Main</h2>

<ol>
<li><p>Your logic for getting the player's name is really convoluted. You're calling main from within main... Don't you end up with two instances of the game running? Instead, do this:</p>

<p>a. Split this into a global function called <code>get_player_name()</code>:</p>

<pre><code>while True:
    name = input('What is your name?').capitalize()
    if name is not "":
        return name
    else:
        print("You need to type a name!")

</code></pre>

<p>Then, main doesn't need to care about these details anymore; it just calls <code>get_player_name</code> and is guaranteed to either cycle the print statement or get a valid name and continue.</p></li>
<li><p>Same goes for depositing money—create a function named <code>ask_player_to_deposit_money</code> or something shorter, and run a similar loop inside its body. Then call it inside main and store the return value in a variable.</p></li>
<li><p>Remember to create a <code>BlackjackGame</code> class and consolidate the player/house construction in there.</p></li>
<li><p>The rest of the code is fine.</p></li>
</ol>

<h2>Testing</h2>

<p>I recommend looking into the <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code> framework for Python</a>. Unit testing allows you to isolate functionally independent parts of a program and to test them separately from the rest to ensure that they function as intended.</p>

<p>You can of course also test the game manually by playing it, but it would be tedious to run through every scenario by hand.</p>
    </div>