<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to corereview.se and thanks for sharing your code.</p>

<h1>general coding</h1>

<h2>avoid <em>odd ball solutions</em></h2>

<p>In your inner and outer loop, you use different methods to declare the loop counter variable. 
The better way would have bee to find a solution that does not need this odd cod style. </p>

<p>But since you decided to do so you should have placed a <em>comment</em> <strong>why</strong> you had to do this.</p>

<p>Same is with opening braces <code>{</code>: In your method signature, you place them at a new line, in the rest of the code you put them on the same line as the preceding statement.</p>

<p>THere is a hot discussion out there where to put these opening braces. 
I don't want to contribute to that argument, 
but all agree that you should decide on either one place and stick to that throughout your code.</p>

<h1>business approach</h1>

<p>The code does basically three things:</p>

<ol>
<li>find start point</li>
<li>connect elements</li>
<li>reorder the input array</li>
</ol>

<p>You chose a procedural approach to the problem. This is not bad by itself, but since <em>Java</em> is an <em>object oriented</em> language you should start looking for OO approaches.</p>

<p>But OOP doesn't mean to "split up" code into random classes.</p>

<p>The ultimate goal of OOP is to reduce code duplication, improve readability and support reuse as well as extending the code.</p>

<p>Doing OOP means that you follow certain principles which are (among others):</p>

<ul>
<li>information hiding / encapsulation</li>
<li>single responsibility</li>
<li>separation of concerns</li>
<li>KISS (Keep it simple (and) stupid.)</li>
<li>DRY (Don't repeat yourself.)</li>
<li>"Tell! Don't ask."</li>
<li>Law of demeter ("Don't talk to strangers!")</li>
</ul>

<p>A more OOish approach could look like this:</p>

<pre><code>private static void sortPairs(String[][] input) {
    Map&lt;String,String&gt; routes = convertToMap(input);
    String start =  findFirstStart(routes);
    reorderArray(routes, start, input);
}
private static Map&lt;String,String&gt; convertToMap(
         String[][] input) {
    Map&lt;String,String&gt; routes = new HashMap();
    for(String[] route : input)
       routes.put(route[0][1]);
    return routes;
}
private static String findFirstStart( 
        Map&lt;String,String&gt; routes) {
     return routes.keySet()
          .stream()
          .filter(city-&gt;!routes.values().contains(city))
          .findAny()
          .get();
}
private static void reorderArray(
        Map&lt;String,String&gt; routes, 
        String start, 
        String[][] input) {
     for(int i = 0 ; i &lt; input.length) {
         String end = routes.get(start);
         input[i][0]=start;
         input[i][1]=end;
         start = end;
     }
}
</code></pre>
    </div>