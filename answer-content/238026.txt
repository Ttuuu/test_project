<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The <code>split</code> function</h1>

<blockquote>
<pre><code>vector&lt;string&gt; split(string s, string delimiter)
{
    size_t pos_start = 0, pos_end, delim_len = delimiter.length();
    string token;
    vector&lt;string&gt; res;

    while ((pos_end = s.find(delimiter, pos_start)) != string::npos)
    {
        token = s.substr(pos_start, pos_end - pos_start);
        pos_start = pos_end + delim_len;
        res.push_back(token);
    }

    res.push_back(s.substr(pos_start));
    return res;
}
</code></pre>
</blockquote>

<p><code>delim_len</code> should be declared as <code>const</code>, because it doesn't change.  Or simply drop it; it is only used in one place.</p>

<p>This function forces all substrings to be first copied into the <code>token</code> variable and then copied into the vector — that's two copies.  It can be reduced to one copy by using <a href="https://en.cppreference.com/w/cpp/utility/move" rel="noreferrer"><code>std::move</code></a> (defined in <a href="https://en.cppreference.com/w/cpp/header/utility" rel="noreferrer"><code>&lt;utility&gt;</code></a>) on the argument to <code>push_back</code>, or by simply dropping the <code>token</code> variable.</p>

<p>The function should have <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="noreferrer"><code>std::string_view</code></a> (defined in <a href="https://en.cppreference.com/w/cpp/header/string_view" rel="noreferrer"><code>&lt;string_view&gt;</code></a>) parameters instead of <code>std::string</code> parameters for efficiency.</p>

<p>Putting everything together:</p>

<pre><code>auto split(std::string_view s, std::string_view delimiter)
{
    std::vector&lt;std::string&gt; result;

    std::size_t pos_start = 0, pos_end;
    while ((pos_end = s.find(delimiter, pos_start)) != s.npos) {
        res.push_back(s.substr(pos_start, pos_end - pos_start));
        pos_start = pos_end + delimiter.size();
    }

    res.push_back(s.substr(pos_start));
    return res;
}
</code></pre>

<h1><code>vector_to_string</code></h1>

<blockquote>
<pre><code>string vector_to_string(vector&lt;string&gt; v)
{
    string s;

    for (auto &amp;e : v)
    {
        reverse(e.begin(), e.end());
        s += e + " ";
    }

    return s;
}
</code></pre>
</blockquote>

<p><code>vector_to_string</code> is a non-descriptive name — <code>reverse_join</code> may be better.  The delimiter should be an argument rather than hard coded.</p>

<p>This function should strip the last space instead of letting its caller do so.  Note that this function performs two operations logically (reverse and join).</p>

<p>Copying the whole vector takes a lot of space; consider copying one string at a time.</p>

<p>And yes, there is a simpler way to do this using <a href="https://en.cppreference.com/w/cpp/algorithm/accumulate" rel="noreferrer"><code>std::accumulate</code></a> (defined in <a href="https://en.cppreference.com/w/cpp/header/numeric" rel="noreferrer"><code>&lt;numeric&gt;</code></a>):</p>

<pre><code>auto result = std::accumulate(v.begin(), v.end(), std::string{},
                              [](std::string lhs, std::string_view rhs) {
                                  lhs += rhs;
                                  lhs += ' ';
                                  return lhs;
                              });
result.pop_back();
</code></pre>

<h1><code>reverse_words</code></h1>

<blockquote>
<pre><code>string reverse_words(string str)
{
    vector&lt;string&gt; v = split(str, " ");
    string s = vector_to_string(v);
    return s.substr(0, s.length() - 1);
}
</code></pre>
</blockquote>

<p>Again, <code>std::string_view</code> parameter.  Even if the stripping happens here, it should be done using <code>pop_back</code> to avoid copying the string and enable <a href="https://stackoverflow.com/q/12953127/9716597">named return value optimization</a>.</p>

<h1>Simplification</h1>

<p>Here's a simplification, using streams to do the split job:</p>

<pre><code>#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

std::streamsize read_spaces(std::istream&amp; is)
{
    std::streamsize count = 0;
    while (is.peek() == ' ') {
        is.get();
        ++count;
    }
    return count;
}

// const std::string&amp; because std::istringstream is constructed from a std::string
std::string reverse_words(const std::string&amp; string)
{
    std::istringstream iss{string};
    std::ostringstream oss{};

    for (std::string word; iss &gt;&gt; word;) {
        std::reverse(word.begin(), word.end());
        oss &lt;&lt; word &lt;&lt; std::string(read_spaces(iss), ' ');
    }
    return oss.str();
}

int main()
{
    assert(reverse_words("The quick brown fox jumps over the lazy dog.") == "ehT kciuq nworb xof spmuj revo eht yzal .god");
    assert(reverse_words("apple") == "elppa");
    assert(reverse_words("a b c d") == "a b c d");
    assert(reverse_words("double  spaced  words") == "elbuod  decaps  sdrow");
    assert(reverse_words("") == "");
    assert(reverse_words("ab   ba   cd") == "ba   ab   dc");
}
</code></pre>

<p>(<a href="https://wandbox.org/permlink/a8plELDQUvH8IsTI" rel="noreferrer">live demo</a>)</p>

<h1>Miscellaneous</h1>

<blockquote>
<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
</code></pre>
</blockquote>

<p>Sort the <code>#include</code>s in alphabetical order to each navigation.</p>

<blockquote>
<pre><code>using namespace std;
</code></pre>
</blockquote>

<p>Avoid global <code>using namespace std;</code>.  It brings in many common identifiers from the <code>std</code> namespace and causes name clashes.  Although it doesn't matter too much for a small program, get into the habit of explicitly qualifying names with <code>std::</code> instead.  An alternative is using declarations (<code>using std::string, std::vector;</code>), which only pulls in the specified names.  See <a href="https://stackoverflow.com/q/1452721/9716597">Why is <code>using namespace std;</code> considered bad practice?</a> for more information.</p>
    </div>