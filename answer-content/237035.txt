<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You present undocumented code<br>
(yours, truly? <code>StringBased</code> looks <em>different</em>).  </p>

<p>let me try and just code it more tersely, correcting the iterative variety:</p>

<pre class="lang-java prettyprint-override"><code>/** check a &lt;code&gt;CharSequence&lt;/code&gt; to be a &lt;em&gt;palindrome&lt;/em&gt; */
static interface Palindrome {
    /** @return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;word&lt;/code&gt;
     *  is a &lt;em&gt;palindrome&lt;/em&gt; else &lt;code&gt;false&lt;/code&gt; */
    boolean isPalindrome(CharSequence word);

    static class StringBased implements Palindrome {
        public boolean isPalindrome(CharSequence word) {
            if (word == null || 0 == word.length())
                return false;
            String lowerCasedWord = word.toString().toLowerCase();
            for (int i = 0, j = word.length() - 1; i &lt; j; i++, j--)
                if (lowerCasedWord.charAt(i) != lowerCasedWord.charAt(j))
                    return false;
            return true;
        }
    }
    static class Recursive implements Palindrome {
        public boolean isPalindrome(CharSequence input) {
            int last;
            return input.length() &lt;= 1
                || input.charAt(0) == input.charAt(last = input.length()-1)
                   &amp;&amp; isPalindrome(input.substring(1, last));
        }
    }
    static class Iterative implements Palindrome {
        public boolean isPalindrome(CharSequence input) {
            int length = input.length();
            for( int i = 0; i &lt; length/2; i++ )
                if (input.charAt(i) != input.charAt(length-i-1))
                    return false;
            return true;
        }
    }
    public static void main(String[] args) {
        Palindrome[]checkers = {
                new StringBased(),
                new Recursive(),
                new Iterative()
            };
        String [] checks = { "", "a", "aa", "ab", "Aba", "abc", "aaba", };
        System.out.print('\t');
        for (String check: checks)
            System.out.print("\t\"" + check + '"');
        for (Palindrome checker: checkers) {
            System.out.print('\n' + checker.getClass().getSimpleName() + ":\t");
            for (String check: checks)
                System.out.print(checker.isPalindrome(check) + "\t");
        }
    }
}
</code></pre>

<p><code>StringBased</code> still is different (<code>Evitareti</code> is <code>isPalindromeIterative()</code>):</p>

<blockquote>
<pre><code>              ""      "a"     "aa"    "ab"    "Aba"   "abc"   "aaba"
StringBased:  false   true    true    false   true    false   false   
Recursive:    true    true    true    false   false   false   false   
Iterative:    true    true    true    false   false   false   false   
Evitareti:    false   false   true    false   false   false   true    
</code></pre>
</blockquote>

<p><code>StringBased</code> and <code>Recursive</code> use O(n) additional space.<br>
With respect to time,  </p>

<ol>
<li><strong>DON'T assume</strong>: model &amp; <strong>measure</strong><br>
(using a framework, microbenchmarking where appropriate (e.g. here))</li>
<li>your mileage <strong>will</strong> vary</li>
</ol>
    </div>