<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Please don't have white space at the end of lines. There is never a need for anything other than a new line at the end of a line.</li>
<li>You don't need to use <code>enumerate(nums)</code> to build <code>vals</code> - <code>i</code> is never used.</li>
<li>You can use <code>collections.defaultdict(int)</code> to remove the need for the <code>if</code> in the <code>for</code> when you make <code>vals</code>.</li>
<li>You can use <code>collections.Counter</code> to create <code>vals</code>.</li>
<li>You can use <code>itertools.combinations_with_replacement</code> to reduce your nested for loops into one. This has the same <span class="math-container">\$O\$</span>, but may help in the future if you want to do four sum.</li>
<li>It is confusing to use <code>i</code> and <code>j</code> to not be related to the same thing. <code>i</code> is "index", where <code>j</code> is "num2".</li>
<li>Since <code>valid</code> is just a Boolean, you can compress the <code>if</code>-<code>else</code> to not need the <code>if</code>.</li>
<li><p>I believe your <code>vaild</code> check is erroneous. If <code>j</code> and <code>target_val</code> are the same but <code>vals[j] == 1</code> then your code will happily still plop it out. I also think your output is erroneous on <code>num == j</code> and <code>vals[num] == 2</code>.</p>

<p>You can make a <code>collections.Counter</code> of the values and then check if this counter is a subset of the global one.</p></li>
<li><p>I suggest making two functions:</p>

<ol>
<li>A generator function, one that produces values that add to the desired sum.</li>
<li>A function to filter duplicate values and normalize output.</li>
</ol></li>
</ol>

<pre><code>class Solution:
    def _three_sum(self, nums: List[int]) -&gt; Iterator[Tuple[int, int, int]]:
        if len(nums) &lt; 3:
            return

        vals = set(nums)
        for i, j in itertools.combinations_with_replacement(vals, 2):
            k = -(i+j)
            if k not in vals:
                continue
            yield i, j, k

    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:
        output = set()
        amounts = collections.Counter(nums)
        for result in self._three_sum(nums):
            if all(
                amount &lt;= amounts[num]
                for num, amount in collections.Counter(result).items()
            ):
                output.add(tuple(sorted(result)))
        return [list(vals) for vals in output]
</code></pre>

<hr>

<p>To answer your questions:</p>

<ol>
<li>No.</li>
<li>If you change <code>_three_sum</code> to <code>_n_sum</code> then the <code>threeSum</code> function will work fine.</li>
<li>I'm not sure what you mean by it but, <code>list(vals)</code> is a Pythonic way to write it. Albeit possibly more confusing. It is preferred to just use <code>itertools</code>.</li>
<li><p>This is off-topic here, and no this would probably not be extendable to more than sum of three.</p>

<p>I know of <a href="https://cs.stackexchange.com/a/108835">this answer on CS.SE</a> that sets the foundation for an n-sum solution. Whilst the question clearly has a different goal, you should be able to dissect the answer and mold it to what you need.</p></li>
</ol>
    </div>