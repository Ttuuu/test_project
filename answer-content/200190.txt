<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>tasks = []
while urls:
    tasks.append(fetch(session, urls.pop()))
</code></pre>
</blockquote>

<p>can be largely simplified to</p>

<pre><code>tasks = [fetch(session, url) for url in urls]
</code></pre>

<hr>

<blockquote>
  <p>Is it possible to remove the result of a specific url from <code>results</code> in case of an exception - making <code>return (url, '')</code> unnecessary?</p>
</blockquote>

<p>Yes, somewhat. <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer"><code>asyncio.gather</code></a> accept a <code>return_exceptions</code> parameters. Set it to <code>True</code> to avoid a single exception failing the <code>gather</code> call. You must filter them out afterwards anyway:</p>

<pre><code>import asyncio
import aiohttp


async def fetch(session, url):
    async with session.get(url, ssl=False) as response:
        return await response.text()


async def main():
    urls = [
        'http://www.python.org',
        'http://www.jython.org',
        'http://www.pypy.org'
    ]
    async with aiohttp.ClientSession() as session:
        tasks = [fetch(session, url) for url in urls]
        results = await asyncio.gather(*tasks)

    for url, result in zip(urls, results):
        if not isinstance(result, Exception):
            print(f'{url}: {len(result)}')
        else:
            print(f'{url} FAILED')


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    loop.close()
</code></pre>
    </div>