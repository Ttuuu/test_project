<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Addendum</h3>

<p>I noticed VisualMelon also suggested this:</p>

<blockquote>
  <p><em>Personally I wouldn't use a tuple for the public part, but this would allow you to accept an <code>IEnumerable</code>/<code>IReadOnlyList&lt;WeightedChoice&lt;T&gt;&gt;</code> or
  something which would reduce the effort of using the type.</em></p>
</blockquote>

<p>I would just like to express why I think this is an important point, both from the view as a consumer, and as a maintenance developer of the API.</p>

<h2>Usability</h2>

<p>As consumer of your API, I need to create two lists and have to manage that the items across lists are synchronized.</p>

<pre><code>var chooser = BiasedOptionChooser&lt;char&gt;.Create(
    options: new char[] { 'a', 'b', 'c' },
    weights: new int[] { 37, 13, 50 });
</code></pre>

<p>In my object-oriented world, I would rather have related data grouped together in a class.</p>

<pre><code>var chooser = BiasedOptionChooser&lt;char&gt;.Create(
    new[] { 
        new Option&lt;char&gt;('a', 37), 
        new Option&lt;char&gt;('b', 13), 
        new Option&lt;char&gt;('c', 50) });
</code></pre>

<h2>Maintenance</h2>

<p>As developer maintaining your code, I like the idea of this class <code>Option</code>. If ever we need to extend the functionality of the algorithm, we'd only have to add a property to the class, without having to change the signature! This makes versioning and handling compatibility issues easier.</p>
    </div>