<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your problem is difficult in trying for a genetic algorithm to create a long program for which the only outputs are a single binary ('problem is solved', 'problem is not solved') and that you are trying to find a single algorithm that solves all five problems, as seen by you promoting those that solve the first problem to the gene pool of the second.</p>

<p>You might want to add a scoring function, e.g., how close the ore got to box with a huge bonus for getting to the box.   You can then kill a reasonable number (say half) for each new level.</p>

<p>You may find that this is not really a solvable problem, especially since your mutations are random op code swaps.  You could experiment with swapping a random subsequence of the program instead.</p>

<p>Otherwise, you are putting two frogs in a blender and hoping that 'Puree' creates one bigger frog.</p>
    </div>