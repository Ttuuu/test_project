<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm sorry to be so straightforward: <strong>This is madness!</strong> Your code seems to indicate a sincere lack of several language features.</p>

<h2>Pointer to const</h2>

<p>You define <code>MEM</code> to be of type <code>uint8_t*</code>, but it actually points to  values of <code>const uint8_t</code>. To account for this difference you cast the <code>const</code> away in both constructors. If you'd ever (accidentally) write to the memory <code>MEM</code> points to, <a href="https://stackoverflow.com/q/25209838">undefined behavior</a> might ensue. So it should be at least of type <code>uint8_t const *</code>.</p>

<h2>Memory leak in constructor</h2>

<p>As you have suspected, your code leaks memory. Both constructors assign <code>new uint8_t</code> to <code>MEM</code> before overwriting it directly afterwards. Now there is no way to reference the values created on the heap with <code>new</code>. Both allocations are not necessary since <code>MEM</code> always points to one of the two static variables. Therefore you should also not try to delete them once <code>Zeroth</code> goes out of scope.</p>

<p>Since we are at the constructor: why do you accept an 32bit integer as argument when all you care about is one bit and all your internal values are stored in an <code>uint8_t</code>? I also find it unintuitive to treat all the even numbers as false, and all the odd ones as true (this is basically a consequence of your bit mask). Often all values except 0 are treated as truthy values (exempt of this rule are exit codes, where 0 is usually seen as success).</p>

<h2>isPresent/isNotPresent</h2>

<p>Those functions do not even compile on a 64bit platform, since the completely unnecessary cast to <code>int</code> narrows the bidwidth of the pointer type from 64bit to 32bit. Apart from that, there is a whole lot of other weird things going on here.</p>

<p>Let's try to break this down:</p>

<pre class="lang-cpp prettyprint-override"><code>(int)&amp;(*this-&gt;MEM)
</code></pre>

<p><code>this-&gt;MEM</code> is a pointer. You then for whatever reason decided to dereference (<code>*this-&gt;MEM</code>) it to get the value it's pointing to. After that, you take the address of the value (<code>&amp;(*this-&gt;MEM)</code>), which should be the same as <code>this-&gt;MEM</code>. And if all of this weren't enough, you then try to cram the address into an <code>int</code> (<code>(int)&amp;(*this-&gt;MEM)</code>).</p>

<p>Same procedure for the value you try to compare it with:</p>

<pre class="lang-cpp prettyprint-override"><code>(int)&amp;Zeroth::UnitSet
</code></pre>

<p>You have the value <code>Zeroth::UnitSet</code>, take the address of it <code>&amp;Zeroth::UnitSet</code> and then try to cram this address into a 32bit integer.</p>

<p>You get the same effect using</p>

<pre><code>bool isPresent() const { return &amp;Zeroth::UnitSet == this-&gt;MEM; }
bool isNotPresent() const { return &amp;Zeroth::NullSet == this-&gt;MEM; }
</code></pre>

<p>without all this madness.</p>

<h2>Memory footprint</h2>

<p>The internal state of your class is represented by a pointer to a const <code>uint8_t</code>. As I have already tried to tell you in the comments, the size of the pointer is 32bit or 64bit depending on which type of architecture your compiler tries to target. This 4 to 8 times larger than the 8bit you would need to store the value. If you stick with the value, there are far less possibilities to shoot yourself in the foot.</p>

<pre><code>class ZerothVal {

public:
    ZerothVal() = default;  // see https://en.cppreference.com/w/cpp/language/default_constructor

    ZerothVal(uint8_t VAL) {
        val = (VAL &amp; 0x1 ? ZerothVal::UnitSet : ZerothVal::NullSet);
    }

    bool isPresent() const { return val == ZerothVal::UnitSet; }
    bool isNotPresent() const { return val == ZerothVal::NullSet; }

    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const ZerothVal&amp; data);

private:
    const uint8_t NullSet = 0;
    const uint8_t UnitSet = 1;

    uint8_t val = ZerothVal::NullSet;
};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const ZerothVal&amp; data) {
    return os &lt;&lt; (data.isPresent() ? 'T' : 'F');
}
</code></pre>

<h2>Operator support</h2>

<p>Since you'd like to implement some kind of bool value, I'd highly recommend implementing the <a href="https://www.artima.com/cppsource/safebool.html" rel="nofollow noreferrer">Safe Bool Idiom</a>. For you that would mean that you have to implement <code>operator bool()</code> for your class (see <a href="https://stackoverflow.com/a/4600316">this SO post</a> for an explanation).</p>
    </div>