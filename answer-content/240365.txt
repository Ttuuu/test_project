<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A more concise approach would be to use <code>Object.entries</code> to get the 0th key and value at once:</p>

<pre><code>const [stageName, stageValues] = Object.entries(sleepStage)[0];
</code></pre>

<p>Yes, the <code>[0]</code> looks weird, but unless you know the keys and/or in advance, you <em>have</em> to use a method which iterates over them, and then you need to extract the first item. In Javascript, there's no good way of avoiding the <code>[0]</code> - there's nothing like <code>Object.prototype.getFirstEntry</code>.</p>

<p>You could nest the destructuring on the left side, but that looks much less readable IMO:</p>

<pre><code>const [[stageName, stageValues]] = Object.entries(sleepStage);
</code></pre>

<p>Ideally, in this sort of situation, you would fix the input data so that the keys are predictable and static:</p>

<pre><code>const sleepStages = [
  { name: 'deep', values: Array(40) },
  { name: 'light', values: Array(40) },
  { name: 'rem', values: Array(40) },
  { name: 'awake', values: Array(40) },
]
</code></pre>

<p>Then, in the loop, you could do:</p>

<pre><code>const { name, values } = sleepStage;
</code></pre>
    </div>