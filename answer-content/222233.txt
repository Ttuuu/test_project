<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this function is unnecessary.</p>

<p>We can deal with defective classes (that don't properly implement the standard <code>LessThanComparable</code> concept) by either fixing them (preferable) or by providing a comparator argument to <code>std::max</code>:</p>

<pre><code>auto const b_lessthan = [](const B&amp; a, const B&amp; b){ return !(a&gt;=b); };

std::max({B{}, B{}, B{}, B{}, B{}}, b_lessthan);
</code></pre>

<p>Sure, you could make a generic adapter using the same <code>if constexpr</code> chain as in this code, but are the defective types really that common?</p>

<hr>

<p>We can arrange for <code>std::max()</code> to return an lvalue by passing it an initialiser list of <code>std::reference_wrapper</code> for its arguments:</p>

<pre><code>template&lt;typename... T&gt;
constexpr auto&amp; ref_max(T... args)
{
    return std::max({std::ref(args)...,}).get();
}
</code></pre>

<hr>

<p>We now have</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;cassert&gt;

int main()
{
    static_assert(std::max(1, 2) == 2);

    int a = 1;
    int b = 5;
    int c = 3;
    int d = 2;

    assert(std::max({a, b, c, d}) == b);

    ref_max(b, c, d) = 4;

    assert(b == 4);

    // This gives a compilation error because the static assertion failed
    // (void)std1::max(A{}, A{});

    // This works
    auto const b_lessthan = [](const B&amp; a, const B&amp; b){ return !(a&gt;=b); };

    std::max({B{}, B{}, B{}, B{}, B{}}, b_lessthan);
}
</code></pre>

<p>Which isn't so very different than the <code>main()</code> in the question.</p>
    </div>