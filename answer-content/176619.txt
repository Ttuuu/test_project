<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all: "Lines of Code" doesn't mean a thing if it is <em>unreadable</em> code.</p>

<h1>Dry</h1>

<p>The <strong>don't repeat yourself</strong> principle, <em>(which also handily removes duplicate lines and therefore greatly reduces LoC)</em></p>

<p>Your <code>def move()</code> and the main game (which should really be in a function!) are both <strong>WET</strong> ("write everything twice") because each player has the same possible moves; that is were I can shave off the most lines, making them DRY.</p>

<p>If I change the <code>move()</code> function so that it has as a player as argument we avoid a lot of repetition. Same goes for the other <code>if Player_Num == ??</code>.</p>

<h1>PEP8 &amp; Readability</h1>

<p>There is this amazing thing called PEP, which helps all python programmers to make the code more readable, if we adhere this we can improve the following:</p>

<ol>
<li>Naming should be <code>setup_players</code> instead of <code>Setup_Players</code> for functions.</li>
<li>String formatting looks a lot nicer then string concat in prints.</li>
<li>Use a if <code>__name__ == "__main__":</code> body.</li>
<li>Don't catch bare <code>Exception</code>.</li>
</ol>

<hr>

<h1>The code, the bad and the ugly</h1>

<p>I kinda rewrote all you had for a more readable structure,</p>

<p>First of all, why 2 different functions for the setup of the game? In my opinion this would be better suited in 1 function:</p>

<pre><code>def setup_game():
    players=6
    while True:
        try:
            print("How many players are in the game?")
            players = int(input())
            if players &gt; 4 or players &lt; 2:
                print("Must be less than 5 and greater than 1")
            else:
                break
        except ValueError:
            print("Must be a number")

    names = {}
    for i in range(1,players+1):
        while True:
            name = input("What is the name of Player {}? ".format(i))
            if not name in names:
                names[name] = 0
                break
            else:
                print('Cannot have duplicate names')
    return names
</code></pre>

<p>Here I return the players as a dictionary where the KEY is the players name and value the current_position; the only drawback is that there cannot be any duplicate names.</p>

<p><strong>Now for the juicy part!</strong></p>

<pre><code>def move_player(player, current_pos):
    snake_squares = {16: 4, 33: 20, 48: 24, 62: 56, 78: 69, 94: 16}
    ladder_squares = {3: 12, 7: 23, 20: 56, 47: 53, 60: 72, 80: 94}

    throw = roll_dice()
    next_pos = current_pos + throw
    print("{0} rolled a {1} and is now on {2}".format(player, throw, next_pos))

    if next_pos in snake_squares:
        print("Player got bitten by a snake and is now on square {}".format(snake_squares[next_pos]))
        next_pos = snake_squares[next_pos]
    elif next_pos in ladder_squares:
        print("Player climbed a ladder and is now on square {}".format(ladder_squares[next_pos]))
        next_pos = ladder_squares[next_pos]
    return next_pos
</code></pre>

<p>That looks a lot better no more long <code>if playerx == x</code>, and it shows all players have to do the same.</p>

<p>Secondly for the main game which I rewrote in a function also no more <code>if playerx == x</code> because we can iterate quite nicely over a dictionary.</p>

<pre><code>def game(players):
    print("{}, Welcome To Snakes And Ladders".format(" ".join(players)))
    input("Press Enter")
    while True:

        # Foreach player
        for player, current_pos in players.items():

            # Move player
            players[player] = move_player(player, current_pos)

            # Check win
            if players[player] &gt; 100:
                return player

            # Next player
            input("Press Enter")


if __name__ == "__main__":
    players = setup_game()
    winner = game(players)
    print("Player {} won the game".format(winner))
</code></pre>

<p>If you <strong>HAVE</strong> to shave off some more lines, feel free to do so yourself.</p>
    </div>