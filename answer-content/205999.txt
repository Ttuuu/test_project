<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good job refactoring. It looks much neater without the globals / <code>Manager</code> class. Good effort with cleaning up allocated memory, but we can do better (see below). The csv output is a good idea too. :)</p>

<ul>
<li>Use <code>&lt;cassert&gt;</code> not <code>&lt;assert.h&gt;</code>. (If a standard library header ends in <code>.h</code> it's a C header, and there should be a version that starts with <code>c</code> for C++).</li>
<li>It's best to <a href="https://stackoverflow.com/a/14243688/673679">include local headers first</a> (it's easier to ensure a header is independent and includes everything it needs to), so <code>NPuzzle.h</code> should be included before the standard library headers.</li>
<li>Header files need an <a href="https://en.wikipedia.org/wiki/Include_guard" rel="nofollow noreferrer">include guard</a> to prevent multiple definitions. With modern compilers, the easiest way is to add <code>#pragma once</code> as the first line. Otherwise you need to use preprocessor definitions.</li>
<li>Generally, a header file is used for code that needs to be accessed elsewhere (by <code>#include</code>ing the header). However, we only need to put the declarations of functions in the header (and include other headers that declare the appropriate types). The definitions of functions can be placed in an accompanying <code>.cpp</code> file, along with everything that those functions depend on. (See modified code below).</li>
</ul>

<hr>

<ul>
<li><p><code>start</code> and <code>end</code> and <code>t</code> can be initialized with the correct values where they're used, instead of declared early with an intermediate value:</p>

<pre><code>auto start = std::chrono::system_clock::now();
...
auto end = std::chrono::system_clock::now();
auto t = std::chrono::duration&lt;double&gt;(end - start);
</code></pre></li>
</ul>

<hr>

<ul>
<li>The <code>const Board b</code> arguments to functions should nearly all be <code>const Board&amp; b</code>. The <a href="https://stackoverflow.com/questions/270408/is-it-better-in-c-to-pass-by-value-or-pass-by-constant-reference">general rule</a> is that builtin types (and classes that effectively only contain a built in type) should be passed by value, and anything larger by <code>const&amp;</code>. The idea is to avoid copying unless we actually have to, and we don't want to copy the board vector if we can avoid it.</li>
</ul>

<hr>

<ul>
<li>I'd suggest rearranging the variables used in the <code>main</code> and <code>solve</code> functions a little. It might be better for <code>solve</code> to take the generated board as input (generating the board isn't <code>solving</code>, and probably shouldn't be timed either), and produce the solution vector as output (rather than doing that in the print function). This way, the <code>open</code> and <code>closed</code> lists can be internal as well.</li>
<li>I guess the reason the <code>open</code> and <code>closed</code> lists are external is because of the need to cleanup data. However, we can solve this by cleaning up as we go along (i.e having strong ownership of the <code>Container</code>s by the relevant data structure).</li>
<li>Although it might seem slow to store <code>Container</code>s by value in the priority queue we can actually use move semantics to avoid any extra copying.</li>
</ul>

<hr>

<ul>
<li><code>up()</code> <code>down()</code> <code>left()</code> and <code>right()</code> can be refactored into one function taking an <code>x</code> and <code>y</code>offset.</li>
<li>Since we're using a <code>std::vector</code> instead of a C-style array, we don't need to copy data manually, and <code>swapPos</code> can use <code>std::vector</code>'s copy constructor. We can also use <code>std::swap</code> to do the actual swapping of the zero value.</li>
</ul>

<hr>

<p><strong>Bugs:</strong> in <code>solvable</code>:</p>

<ul>
<li><p>Since the number zero represents a blank tile, not an actual index, it should simply be ignored in the inversion calculation:</p>

<pre><code>int inversions(
    const Board&amp; b,
    const int n)
{
    auto count = 0;

    for (auto i = 0; i &lt; n * n - 1; ++i)
    {
        for (auto j = i + 1; j &lt; n * n; ++j)
        {
            if (b[i] == 0 || b[j] == 0)
                continue;

            if (b[i] &gt; b[j])
                ++count;
        }
    }

    return count;
}
</code></pre></li>
<li><p>The <code>else if</code> in solvable needs to check both conditions again, not just <code>count &amp; 1</code>. This is because we're checking two conditions in the <code>if</code> statement. If we passed the first check in the <code>if</code>, but not the second, we'll end up (erroneously) in the <code>else-if</code> clause.</p>

<pre><code>    ...
    if (((n - zero.y) &amp; 1) &amp;&amp; !(count &amp; 1))
    {
        return true;
    }
    else if (!((n - zero.y) &amp; 1) &amp;&amp; (count &amp; 1)) // check both conditions!
    {
        return true;
    }
</code></pre></li>
<li><p>We can condense this logic quite a bit. The last <code>if ... else if</code> is actually saying that one of the two variables must be odd, and the other even. (Also, if we make sure that <code>n</code> is even, we can check the y-position is in an even row from the top, instead of based on n.)</p>

<pre><code>bool isEven(int i)
{
    return ((i % 2) == 0);
}

bool solvable(
    const Board&amp; b,
    const int n)
{
    auto i = inversions(b, n);

    if (!isEven(n))
        return isEven(i);

    return isEven(findZero(b, n).y) != isEven(i);
}
</code></pre></li>
</ul>

<hr>

<p>Modified code:</p>

<p><em>Npuzzle.h</em>:</p>

<pre><code>#pragma once

#include &lt;vector&gt;

namespace Npuzzle
{

    using Board = std::vector&lt;int&gt;;

    Board createBoard(
        const int n);

    void printBoard(
        const Npuzzle::Board&amp; b,
        const int n);

    void printSolution(
        std::vector&lt;Npuzzle::Board&gt; const&amp; solution,
        const int n);

    void writeBoard(
        const Npuzzle::Board&amp; b,
        const int n);

    std::vector&lt;Npuzzle::Board&gt; solve(
        Npuzzle::Board b, // note: this copy is intentional! we need to copy the starting position so we can move it into the priority queue.
        const int n);

} // Npuzzle
</code></pre>

<p><em>Npuzzle.cpp</em> (Everything that isn't <code>main</code>! Unchanged code cut for length).</p>

<pre><code>#include "Npuzzle.h"

#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;cstdint&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;random&gt;
#include &lt;numeric&gt;
#include &lt;queue&gt;
#include &lt;set&gt;
#include &lt;unordered_map&gt;

namespace Npuzzle
{

    using i64 = std::uint_fast64_t;

    namespace Structures
    {
        struct Point
        {
            int x, y;
        };

        struct Container
        {
            int heuristic;
            Board board;
        };

        struct LessThanByHeur
        {
            bool operator()(
                const Container&amp; lhs,
                const Container&amp; rhs) const
            {
                return lhs.heuristic &gt; rhs.heuristic;
            }
        };
    }

    using set = std::priority_queue&lt;Structures::Container, std::vector&lt;Structures::Container&gt;, Structures::LessThanByHeur&gt;;
    using map = std::unordered_map&lt;i64, i64&gt;;


    Structures::Point findZero(
        const Board&amp; b, // by ref!
        const int n)
    {
        for (auto i = 0; i &lt; n * n; ++i)
        {
            if (b[i] == 0)
            {
                return{ i % n, i / n };
            }
        }

        assert(false); // added this so we get some warning in debug mode at least!
        return{ -1, -1 };
    }

    int inversions(
        const Board&amp; b, // by ref!
        const int n)
    {
        auto count = 0;

        for (auto i = 0; i &lt; n * n - 1; ++i)
        {
            for (auto j = i + 1; j &lt; n * n; ++j)
            {
                if (b[i] == 0 || b[j] == 0) // ignore the blank tile!
                    continue;

                if (b[i] &gt; b[j])
                    ++count;
            }
        }

        return count;
    }

    bool isEven(int i)
    {
        return ((i % 2) == 0);
    }

    bool solvable(
        const Board&amp; b, // by ref!
        const int n)
    {
        auto i = inversions(b, n);

        if (!isEven(n))
            return isEven(i);

        return isEven(findZero(b, n).y) != isEven(i);
    }

    Board createBoard(
        const int n)
    {
        // snip! (unchanged)
    }

    Board decode(
        i64&amp; code,
        const int n)
    {
        // snip! (unchanged)
    }

    i64 encode(
        const Board&amp; b, // by ref!
        const int n)
    {
        // snip! (unchanged)
    }

    int linear(
        const Board&amp; b, // by... well, you get the idea!
        const int n)
    {
        // snip! (unchanged)
    }

    int manhattan(
        const Board&amp; b,
        const int n)
    {
        // snip! (unchanged)
    }

    int heuristic(
        const Board&amp; b,
        const int n)
    {
        // snip! (unchanged)
    }

    Board swapPos(
        const Board&amp; b,
        const int n,
        const Structures::Point&amp; oldZero,
        const Structures::Point&amp; newZero)
    {
        Board move = b; // use std::vector copy constructor!

        auto oldIndex = oldZero.x + (oldZero.y * n);
        auto newIndex = newZero.x + (newZero.y * n);

        std::swap(move[oldIndex], move[newIndex]);

        return move;
    }

    bool inBounds(
        const Structures::Point&amp; point,
        const int n)
    {
        return (point.x &gt;= 0 &amp;&amp; point.x &lt; n &amp;&amp; point.y &gt;= 0 &amp;&amp; point.y &lt; n);
    }

    Board makeMove(
        const Board&amp; b,
        const Structures::Point&amp; offset,
        const int n)
    {
        Structures::Point zero = findZero(b, n);
        auto newPos = Structures::Point{ zero.x + offset.x, zero.y + offset.y };

        if (!inBounds(newPos, n))
            return{ }; // returns empty vector

        return swapPos(b, n, zero, newPos);
    }

    bool duplicate(
        const Npuzzle::Board&amp; b,
        Npuzzle::map&amp; closed,
        const int n)
    {
        return (closed.count(Npuzzle::encode(b, n)) != 0);
    }

    void addQueue(
        Npuzzle::Board&amp;&amp; b, // by r-value reference! i.e. it has to be `std::move`d in
        const Npuzzle::Board&amp; parent,
        Npuzzle::set&amp; open,
        Npuzzle::map&amp; closed,
        const int n)
    {
        closed.emplace(Npuzzle::encode(b, n), Npuzzle::encode(parent, n));

        open.push({ Npuzzle::heuristic(b, n), std::move(b) }); // constructs a Container (moving b into place), then moves the container into the priority queue

        // note that std::move(b) has to be the last thing we do with b
        // this should be enforced by modern compilers, as the initialization order of the Container (initialized by the {}) should be well-defined
    }

    std::vector&lt;Npuzzle::Board&gt; makeSolution( // extracted from the print function!
        Npuzzle::i64 b,
        Npuzzle::map const&amp; closed,
        const int n)
    {
        std::vector&lt;Npuzzle::Board&gt; solution;

        do
        {
            auto p = b;

            solution.push_back(Npuzzle::decode(b, n));

            b = closed.at(p);
        } while (b != 0);

        std::reverse(solution.begin(), solution.end()); // easier than iterating backwards

        return solution;
    }

    void addMoves(
        const Npuzzle::Board&amp; b,
        Npuzzle::set&amp; open,
        Npuzzle::map&amp; closed,
        const int n)
    {
        auto moves = std::array&lt;Npuzzle::Board, 4u&gt; // there will always be 4, so we can use a std::array
        {
            Npuzzle::makeMove(b, { 0, -1 }, n), // up
            Npuzzle::makeMove(b, { 0, 1 }, n), // down
            Npuzzle::makeMove(b, { -1, 0 }, n), // left
            Npuzzle::makeMove(b, { 1, 0 }, n), // right
        };

        for (auto&amp; move : moves) // range-based for loop is a bit easier (note the &amp; is because we want to move the board out of the array)
        {
            if (!move.empty() &amp;&amp; !duplicate(move, closed, n))
            {
                addQueue(std::move(move), b, open, closed, n);
            }
        }
    }

    void printBoard(
        const Board&amp; b,
        const int n)
    {
        // snip! (unchanged)
    }

    void printSolution(
        std::vector&lt;Board&gt; const&amp; solution,
        const int n)
    {
        for (auto const&amp; board : solution)
        {
            system("CLS");

            printBoard(board, n);

            std::this_thread::sleep_for(std::chrono::milliseconds(25));
        }
    }

    void writeBoard(
        const Board&amp; b,
        const int n)
    {
        // snip! (unchanged)
    }

    std::vector&lt;Npuzzle::Board&gt; solve(
        Board b,
        const int n)
    {
        Npuzzle::set open;
        Npuzzle::map closed;

        addQueue(std::move(b), Npuzzle::Board(n * n), open, closed, n);

        while (!open.empty()) // we should eventually run out of positions...
        {
            auto curr = std::move(open.top());
            open.pop();

            if (curr.heuristic == 0)
            {
                return makeSolution(Npuzzle::encode(curr.board, n), closed, n);
            }
            else
            {
                addMoves(curr.board, open, closed, n);
            }
        }

        assert(false); // if we get here, we're attempting to solve an unsolvable problem...
        return{ };
    }

} // Npuzzle
</code></pre>

<p><em>main.cpp</em>:</p>

<pre><code>#include "Npuzzle.h"

#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;

int main()
{
    auto n = 4;
    auto b = Npuzzle::createBoard(n);
    //auto b = Npuzzle::Board{ 0, 14, 11, 2, 15, 1, 10, 12, 5, 7, 3, 8, 6, 13, 9, 4 }; // unsolvable!

    auto start = std::chrono::system_clock::now();

    auto solution = Npuzzle::solve(b, n);

    auto end = std::chrono::system_clock::now();
    auto t = std::chrono::duration&lt;double&gt;(end - start);

    Npuzzle::printSolution(solution, n);

    std::cout &lt;&lt; std::endl;
    std::cout &lt;&lt; std::fixed;
    std::cout &lt;&lt; std::setprecision(5);
    std::cout &lt;&lt; solution.size() &lt;&lt; " steps in " &lt;&lt; t.count() &lt;&lt; " secs.";

    std::cin.get();

    return 0;
}
</code></pre>
    </div>