<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>is it working now and i have an evil hack in there:</p>

<ul>
<li>Same values inside a loop</li>
<li>You do have only 5 groups</li>
<li>Division by 0 must be escaped</li>
<li>Not building a string and then eval, just have list of functions, that makes code smaller and runs faster</li>
<li>No hashing need because results do not repeat unless you do many times the same digits combo...</li>
<li>Attention, evil hack: Generate combination of functions by increasing some digit 
and viewing its bits : 12, 34, 56 as digits from 0-3 what are function indexes.</li>
</ul>

<p>There it is:</p>

<pre><code>                    fa = self.ops [op_bits &amp; 3]
                fb = self.ops [(op_bits &amp; 12) &gt;&gt; 2 ]
                fc = self.ops [(op_bits &amp; 48) &gt;&gt; 4 ]
</code></pre>

<p>enjoy the crap:</p>

<pre><code>    from tkinter import Tk, Frame, Label, Button, IntVar, Entry, Text, W, N, WORD, INSERT


class Application(Frame):

    #extract constant fields:

    op_str = ['+', '-' , '*' , '/']

    ops = [lambda a,b : a+b if (a is not None and b is not None) else None,
                    lambda a,b : a-b if (a is not None and b is not None) else None, 
                    lambda a,b : a*b if (a is not None and b is not None) else None,
                    lambda a,b :  a/b if (b != 0 and a is not None and b is not None) else None, 
                   ]

    max_combinations = 1 &lt;&lt; 6

    group_strs    = ['((%d%s%d)%s%d)%s%d', '%d%s(%d%s(%d%s%d))', '%d%s((%d%s%d)%s%d)', '(%d%s%d)%s(%d%s%d)', '(%d%s(%d%s%d))%s%d']

        #clumsy a lil bit
    groups = [lambda a,b,c,d,fa,fb,fc :  fc(fb(fa(a,b),c),d),
              lambda a,b,c,d,fa,fb,fc :  fa(a,fb(b,fc(c,d))),
            lambda a,b,c,d,fa,fb,fc :  fa(a,fc(fb(b,c),d)),
            lambda a,b,c,d,fa,fb,fc :  fb(fa(a,b), fc(c,d)),
            lambda a,b,c,d,fa,fb,fc :  fc(fa(a,fb(b,c)),d),


                          ]    


    def __init__(self, master=None):
        super().__init__(master)
        self.pack()
        self.create_widgets() 







    def create_widgets(self):

        self.entries = []  
        self.vars = [IntVar() for _ in range (5)]
        self.texts = ['Enter target number' , 
                      'Enter first number', 
                      'Enter second number', 
                      'Enter third number', 
                      'Enter fourth number']


        for index, var in enumerate(self.vars):
            Label(self, text=self.texts[index], bg="black", fg="white", font="none 12 bold").grid(row=2*index, column=0, sticky=N)
            e = Entry(self, textvariable= self.vars[index] , width=20, bg="white")
            e.grid(row=2*index+1, column=0, sticky=N)
            self.entries.append(e)

        Button(self, text="Solve", width=6, command=self.solver).grid(row=12, column=0, sticky=N)
        self.output = Text(self, width=60, height=10, wrap=WORD, background="white")
        self.output.grid(row=13, column=0, columnspan=1, sticky=N)   

    def solver(self):
        self.output.delete(1.0, INSERT)
        target = self.vars[0].get()
        numbers = [e.get() for e in self.vars[1:]]


        count = 0
        for gr_num, group in enumerate(self.groups):


            for op_bits in range(0,self.max_combinations):
                count += 1
                #evil hacks here
                fa = self.ops [op_bits &amp; 3]
                fb = self.ops [(op_bits &amp; 12) &gt;&gt; 2 ]
                fc = self.ops [(op_bits &amp; 48) &gt;&gt; 4 ]
            # or even shorter like
            # fs = [(op_bits &amp; (3 &lt;&lt; x)) &gt;&gt; x for x in range(0,self.max_combinations) ]

                my_eval = group(*numbers, fa,fb,fc)
                print('my_eval' , my_eval, ' =' , *numbers, fa,fb,fc,  )
                if my_eval == target:
                    formula = self.group_strs[gr_num] % (numbers[0],self.op_str[op_bits &amp; 3],numbers[1],self.op_str[(op_bits &amp; 12) &gt;&gt; 2],numbers[2],self.op_str[(op_bits &amp; 48) &gt;&gt; 4],numbers[3])
                    Answer = formula,"=",target , ' found in ' , count , 'iterations'
                    #seen.add(formulaKey)
                    #insert value in output Textbox
                    self.output.insert(INSERT, Answer) 
                    self.output.insert(INSERT, '\n')
                    return

        self.output.insert(INSERT, 'Solution could not be found in ' + str(count) +  ' iterations')






root = Tk()
app = Application(master=root)
app.master.title("target number solution")
app.mainloop()
</code></pre>
    </div>