<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome back! I'm going to take a moment to talk about modules and classes before I start reviewing your code.</p>

<h1>Modules and Classes</h1>

<p>Python code is stored in source files with a <code>.py</code> extension. These are <strong>modules</strong>. If you write a "program" in python -- something meant to be run from the command line, like <code>python mygame.py</code> -- your program is still a module, although it has some unusual properties (like <code>__name__</code> is set to <code>"__main__"</code> instead of the module name).</p>

<h2>Modules</h2>

<p>Regardless, the python execution process starts by parsing all of your code, from the top of the file to the bottom. It produces a parse tree, which converts to an AST (except for possibly 3.8+ where the parser might emit the AST directly), which is then compiled into byte code. The byte code is then either stored in a <code>.pyc</code> file (non-main modules) or just executed directly from memory.</p>

<p>Each module when loaded into memory is made up of nothing but executable statements. The executable statements are all the code that you put "up against the wall" on the left margin, and also class definitions and function definitions.</p>

<p>Again: <strong>class definitions are executable code</strong>.</p>

<p>Also: <strong>function definitions are executable code</strong></p>

<h2>Classes</h2>

<p>A class definition is "executed" when you reach the point in the code flow that it appears. That means if you have a module like:</p>

<pre><code>A = 1

class Dog:
    pass

B = 1
</code></pre>

<p>then the class definition is executed after <code>A = 1</code> and before <code>B = 1</code>. This is also true for function definitions: they are executed where they appear in the code flow.</p>

<p>A class definition consists of some book-keeping code for creating the class and linking it with its parents and metaclass, plus creating a new entry in the module's namespace, <strong>plus</strong> all the code you type inside the class definition.</p>

<p>Most of the time, the "code you type inside the class definition" consists of class-level constants, class-level variable initialization, and function (method) definitions, which we already mentioned as being executable code.</p>

<p>If you type code that is "actual code" -- that is, call functions, print results, whatever -- it will be executed in the order in which it appears in the class (top to bottom) whenever the class definition is executed. As we have discussed, that means in the order in which the class appears in the file.</p>

<h1>Your code</h1>

<p>Your code looks good. It conforms to a lot of PEP-8, modulo a few nits like the number of blank lines between things. </p>

<p>There is too much code up against the wall. You have skipped over the <code>if __name__ == '__main__':</code> check. Please correct that, even if you do naught but move everything into one big <code>main()</code>.</p>

<h2>Too many names</h2>

<p>One problem you suffer from is too many names. Worse, the names are formatted incorrectly.</p>

<pre><code>nec_starting_health = 80
nec_starting_strength = 10
nec_starting_mobility = 10
nec_starting_energy = 20
</code></pre>

<p>These are supposed to be constants -- you only use them to set other values. But constants should be in UPPER_SNAKE_CASE.</p>

<p>But rather than change that, I'd suggest you just make these numbers part of the appropriate class. You could have something like:</p>

<pre><code>class Necromancer(...):
    STARTING_ENERGY = 20
    STARTING_HEALTH = 80
</code></pre>

<p>Instead, I suggest that you just hard-code the numbers into the <code>Necromancer.__init__</code> function, which is the only place they'll be used. Use named parameters for clarity:</p>

<pre><code>class Necromancer(Character):
    """ ... """
    def __init__(self):
        super().__init__(health=80, strength=10, mobility=10, energy=20)
</code></pre>

<p>This does the same things, with less typing: it conveys that these are magic numbers specific to the initial setup of the Necromancer class, it documents what number is what attribute, and it lets you change them in one place. Admittedly, it doesn't let you change them from outside the module, but I'd call that a feature ;-).</p>

<p>One side effect of this would be creating <code>max_XXX</code> attributes, for attributes where you wanted to be able to gain them back. This seems obvious to me, and you could move these functions into the <code>Character</code> base class if you made the attributes explicit, instead of trying to sneak references to those outside names in your subclass methods.</p>

<h2>Extra code in class <code>Character</code></h2>

<p>As you mentioned yourself, all this code is extra:</p>

<pre><code>turn = False

is_target = True

is_dazed = False
is_stunned = False
is_debilitated = False
is_confused = False
is_terrified = False

while is_debilitated:
    mobility = 0
</code></pre>

<p>It might be that you planned to indent that under the <code>def __init__()</code> that appears above it. In which case you probably meant something like <code>self.turn = False</code>. Otherwise, you are defining a <em>class variable</em> <code>turn</code> which will be shared by everything that is an instance or subclass-instance of <code>Character</code>. </p>

<p>The <code>is_...</code> attributes clearly should be instance attributes -- move them into your <code>__init__</code> method. The <code>while is_debilitated</code> is not executed, since you defined <code>is_debilitated = False</code> just a few lines higher. But since you don't do anything to change <code>is_debilitated</code> inside your loop, that will be an infinite loop and hang your program if you ever actually run the code. I think you meant <code>if</code> instead of <code>while</code>, and you meant for it to be located someplace else.</p>

<h2>DRY: Missing class <code>Attribute</code></h2>

<p>You have four attributes, and you have written <code>gain</code> and <code>lose</code> methods for all four. Why not just have your attributes be of <code>class Attribute</code> and write <code>gain</code> and <code>lose</code> methods once, for the class:</p>

<pre><code>player1.gain_energy(1) --&gt; player1.energy.gain(1)
</code></pre>

<h2>DRY: Missing function: <code>use_ability()</code></h2>

<p>Your class Necromancer has a bunch of "ability" methods. They all share the same common code:</p>

<pre><code>def call_ghost(self):
    if self.is_stunned:
        print("Stunned...ability unsuccessful.")
    elif self.is_confused:
        confused_test = roll_d_x(2)
        if confused_test == 1:
            print("Confused...ability unsuccessful.")
    else:
        success = self.success_check()
        if success:

            ### NOTE: This part is different

        else:
            print("Ability failed.")
</code></pre>

<p>So why not write a function (method) for that:</p>

<pre><code>def use_ability(self, ability):
    """Common framework for ability methods."""
    # ...
    # as before
    # ...
    if success:
        ability()
    # ...
    # as before ...
</code></pre>

<p>Then you can code the individual ability methods as <code>_methodname</code> to indicate they're tricky, and drop all the boilerplate code at the beginning and end, just assuming you succeeded.</p>

<h2>Class <code>Minion</code></h2>

<p>This seems like it should be a subclass of <code>Character</code>, but perhaps there should be a common parent class <code>Combatant</code> or something that both <code>Minion</code> and <code>Character</code> can derive from? Or perhaps <code>Minion</code> should be the parent of <code>Character</code>?</p>

<h2>Missing attribute: <code>name</code></h2>

<p>Instead of <code>Minion attack failed</code> print <code>f"{self.name}'s attack failed"</code> or perhaps <code>type(self).__name__</code> to get the class name ("Character's attack failed", "Ghost's attack failed", etc.)</p>

<h2>Bogus attribute: <code>turn</code>.</h2>

<p>The turn is a game concept, not a character concept. Don't store it in the character or minion. Store it at the game level.</p>

<h2>Missing function: player turn</h2>

<p>You have a lot of code inside the game while loop for executing the player1 and player2 turns. Move that into a function.</p>

<p>That's it for this pass. Good luck!</p>
    </div>