<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The answer by @Graipher addresses many of the issues with your code very well, and I am not going to repeat those here. This answer only addresses one potential <strong>safety issue</strong> existing in your original code (and not addressed in @Graipher's answer), and has a few additional observations resulting from the shortcomings of PyYAML.</p>

<h3>Safety issue</h3>

<p>The use of PyYAML's <code>yaml.load()</code> is documented to be potentially unsafe. Uncontrolled YAML input can lead to a wiped harddrive or worse. There briefly existed a version of PyYAML in the summer of 2018 addressing this, but that version was retracted because of problems, which still have not been solved (at least not within six months).</p>

<p>There is seldom, if ever, need to use <code>yaml.load()</code>, instead <strong>always</strong> use <code>yaml.safe_load()</code>. If you happen to have tags in your YAML, just register the constructors for them on <code>yaml.SafeLoader</code> instead of the (default) unsafe <code>Loader</code>.</p>

<h3>Performance</h3>

<p>YAML loaders/dumpers are slow, especially compared to loader/dumpers for much simpler formats such as JSON. You should consider postponing the dumping of changes from memory to file, if the config file is not used by any other program (i.e. only preserves configuration for the current program).</p>

<p>@Graipher's code for the <code>Config</code> class can be adapted to optionally postpone the dump to the config file:</p>

<pre><code>class Config(dict):
    def __init__(self, filename, auto_dump=True):
        self.filename = filename
        self.auto_dump = auto_dump
        self.changed = False
        if os.path.isfile(filename):
            with open(filename) as f:
                # use super here to avoid unnecessary write
                super(Config, self).update(yaml.load(f) or {})

    def dump(self, force=False):
        if not self.changed and not force:
            return
        with open(self.filename, "w") as f:
            yaml.safe_dump(self, f)
        self.changed = False

    def updated(self):
        if self.auto_dump:
            self.dump(force=True)
        else:
            self.changed = True

    def __setitem__(self, key, value):
        super(Config, self).__setitem__(key, value)
        self.updated()

    def __delitem__(self, key):
        super(Config, self).__delitem__(key)
        self.updated()

    def update(self, kwargs):
        super(Config, self).update(kwargs)
        self.updated()
</code></pre>

<p>You could additionally make the object dump to file if it goes out of scope, but I  would just call <code>cfg.dump()</code> explicitly.</p>

<h3>YAML 1.2 vs 1.1 and other PyYAML issues</h3>

<p>The YAML standard was updated in 2009 to version 1.2, but PyYAML still only supports YAML 1.1. This can lead to several surprises, including:</p>

<ul>
<li><p>The scalars <code>Off</code>, <code>On</code>, <code>Yes</code> and <code>No</code> are (still) loaded as booleans by PyYAML (as well as all-caps and all-lowercase versions of these strings)</p></li>
<li><p>Scalars with a leading zero are considered octal if all of the other characters are in the <code>[0-7]</code> range (instead of requiring a leading <code>0o</code> as specified in YAML 1.2).</p></li>
<li><p>Scalars that have the form of a sexagesimal are loaded by PyYAML as integers instead of a string</p></li>
</ul>

<p>You should also be aware that your configuration file will lose any comments, special anchor names on mappings and sequences, (superfluous) quotes around scalars, and that cannot preserve specific style (flow/block) on nodes (enforcing one of three styles "globally") and that any non-ASCII input might get dumped as escape sequences.</p>

<p>If you want to address any or all of those problems with PyYAML, you should consider using <code>ruamel.yaml</code> (disclaimer I am the author of that package). You could e.g. replace the <code>__init__</code> and <code>dump</code> methods of the updated version of class <code>Config</code> with:</p>

<pre><code>from ruamel.yaml import YAML

class Config(dict):
    def __init__(self, filename, auto_dump=True):
        self.filename = filename
        self.auto_dump = auto_dump
        self.changed = False
        self.yaml = YAML()
        self.yaml.preserve_quotes = True
        # uncomment and adapt to your specific indentation
        # self.yaml.indent(mapping=4, sequence=4, offset=2)
        if os.path.isfile(filename):
            with open(filename) as f:
                # use super here to avoid unnecessary write
                super(Config, self).update(self.yaml.load(f) or {})

    def dump(self, force=False):
        if not self.changed and not force:
            return
        with open(self.filename, "w") as f:
            yaml.dump(self, f)
        self.changed = False
</code></pre>
    </div>