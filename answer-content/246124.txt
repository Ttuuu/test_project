<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstring</h1>
<p>You can document the behaviour of the method with a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a></p>
<h1>typing</h1>
<p>You can add typing, to clarify for the caller what type the different arguments and variables are</p>
<h1><code>TST.putItem</code></h1>
<p>Apart from the name, which according to PEP-8 would be better as <code>put_item</code>, should not be an ordinary method of the TST.  The <code>self</code> is only used as to recursively call the same method. This can be a helper method in the global namespace, or a <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer"><code>staticmethod</code></a></p>
<p>The same comment goes for the <code>GetItem</code></p>
<h1><code>get</code></h1>
<pre><code>def get(self, key):

    node = self.getItem(self.rootNode, key, 0)

    if node == None:
        return -1

    return node.value
</code></pre>
<p>-1 is a bad sentinel value. How will the caller distinguish between a <code>node.value</code> of <code>-1</code> or a non-existent key?</p>
<p>Better would be to either raise a <code>KeyError</code> if the value is not in the tree, or mimic the behaviour of <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get(key\[, default_value\])</code></a>, with an explicit default value.</p>
<h1>tuple unpacking</h1>
<p>Instead of explicitly sending the index with it, you can use tuple unpacking.</p>
<hr>
<p>My take on your Ternary search tree:</p>
<p>With added typing hints, implementing the <code>__getitem__</code> and <code>__setitem__</code> magic methods.</p>
<p>The <code>put_item</code> and <code>get_item</code> can be put on the <code>Node</code> class as well. Which you choose is a matter of taste</p>
<pre><code>import typing

V = typing.TypeVar("V")


class Node:
    def __init__(
        self, character: str, value: typing.Optional[V] = None
    ) -&gt; None:
        self.character: str = character
        self.left: typing.Optional[Node] = None
        self.middle: typing.Optional[Node] = None
        self.right: typing.Optional[Node] = None
        self.value: typing.Optional[V] = value


class TernarySearchTree:
    def __init__(self) -&gt; None:
        self.root: typing.Optional[Node] = None

    def __setitem__(
        self, key: typing.Union[str, typing.Iterable[str]], value: V
    ) -&gt; None:
        self.root = TernarySearchTree.put_item(self.root, key=key, value=value)

    put = __setitem__

    @staticmethod
    def put_item(
        node: typing.Optional[Node],
        key: typing.Union[str, typing.Iterable[str]],
        value: V,
    ) -&gt; Node:
        c: str
        c, *rest = key

        if node is None:
            node = Node(c)

        if c &lt; node.character:
            node.left = TernarySearchTree.put_item(
                node=node.left, key=key, value=value
            )
        elif c &gt; node.character:
            node.right = TernarySearchTree.put_item(
                node=node.right, key=key, value=value
            )
        elif rest:
            node.middle = TernarySearchTree.put_item(
                node=node.middle, key=rest, value=value
            )
        else:
            node.value = value
        return node

    def __getitem__(self, key: typing.Union[str, typing.Iterable[str]]) -&gt; V:
        return TernarySearchTree.get_item(self.root, key=key).value

    def get(
        self,
        key: typing.Union[str, typing.Iterable[str]],
        default_value: typing.Optional[V] = None,
    ) -&gt; typing.Optional[V]:
        try:
            return self[key]
        except KeyError:
            return default_value

    @staticmethod
    def get_item(
        node: typing.Optional[Node],
        key: typing.Union[str, typing.Iterable[str]],
    ) -&gt; Node:
        if node is None:
            raise KeyError

        c: str
        c, *rest = key

        if c == node.character and not rest:
            return node

        if c &lt; node.character:
            return TernarySearchTree.get_item(node=node.left, key=key)
        if c &gt; node.character:
            return TernarySearchTree.get_item(node=node.right, key=key)
        return TernarySearchTree.get_item(node=node.middle, key=rest)


if __name__ == "__main__":

    tst = TernarySearchTree()

    tst.put("apple", 100)
    tst["orange"] = 200
    tst.put("orb", 150)

    print(tst["orange"])
</code></pre>
    </div>