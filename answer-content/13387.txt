<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No, it's not thread-safe. Between the call to <code>Interlocked.Increment()</code> and the <code>if</code> check, another thread could call <code>Interlocked.Increment()</code>. That means both of them could see that <code>_counter</code> is 101, which means a call to <code>_methodToCall</code> would be skipped.</p>

<p>But this is exactly why <code>Interlocked.Increment()</code> returns the incremented value. So the thread-safe version would be:</p>

<pre><code>public void PerformCall()
{
    if (Interlocked.Increment(ref _counter) % _cycleValue == 0)
        _methodToCall();                
}
</code></pre>

<p>This is exactly why writing code like this is hard (although this is a simple situation, so it's not that hard here). It's much easier to write correct multi-threaded code, if you lock all shared values.</p>

<p>Also, if you do something like this, you need to be sure that inserting a row in your code is also thread-safe. And the same applies to <code>SaveChanges()</code>. For example, if you used something like <code>ConcurrentQueue</code> in a straightforward way, it would be possible for <code>SaveChanges()</code> to save more than 100 items at a time, because new items could have been inserted between the call to <code>Interlocked.Increment()</code> and the final dequeue from the queue. This may not be a problem for you, but you should think about that.</p>
    </div>