<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>let courseFilter = this.newFilterArr.find(k =&gt; k.key === 'courseId'),
    rateTypeFilter = this.newFilterArr.find(k =&gt; k.key === 'rateTypeId');
</code></pre>

<p>I would consider making your filter an object instead of an array. The keys are probably unique and known ahead of time, thus could be a type.</p>

<pre><code>    if (courseFilter &amp;&amp; rateTypeFilter) {
        return x['courseId'] === courseFilter.filtered.id &amp;&amp; x['rateTypeId'] === rateTypeFilter.filtered.id;
    } else if (courseFilter &amp;&amp; !rateTypeFilter) {
        return x['courseId'] === courseFilter.filtered.id
    } else if (!courseFilter &amp;&amp; rateTypeFilter) {
        return x['rateTypeId'] === rateTypeFilter.filtered.id;
    }
</code></pre>

<p>This code is a good example of a function doing too many things. You can just progressively filter, filtering by <code>courseId</code> first, and whatever results from that, you filter with <code>rateTypeId</code>.  The condition with the <code>&amp;&amp;</code> is not necessary. </p>

<p>This could be rewritten as:</p>

<pre><code>class Filter {
  courseId:string
  rateTypeId:string
}

function Optimiz() {
  const filter:Filter = this.newFilterObj

  // Match only if filter is a truthy value. Otherwise, just add it.
  this.rateSetupDataUi = this.originalRateSetupDataUI
    .filter(x =&gt; filter.courseId ? x.courseId === filter.courseId : true)
    .filter(x =&gt; filter.rateTypeId ? x.rateTypeId === filter.rateTypeId : true)
}
</code></pre>

<h2>Nitpicks</h2>

<ul>
<li>I advise against a single <code>let</code>/<code>var</code>/<code>const</code> and recommend a <code>let</code>/<code>var</code>/<code>const</code> <em>per</em> variable. Prepending/appending requires needlessly modifying the first and last lines, respectively. And if you move variables around, you will still have to add <code>let</code>/<code>var</code>/<code>const</code>.</li>
<li><code>x['courseId']</code> and <code>x['rateTypeId']</code> don't need to be in bracket notation, as the property names don't have invalid characters.</li>
</ul>
    </div>