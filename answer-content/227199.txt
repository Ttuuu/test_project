<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>for num in nums[1:]</code> is the prefered way to iterate over a partition of an array; if you are worried about performance, it actually is faster, because accessing by index is more expensive in python than copying then iterating values (you can play with snippets of timeit to verify that claim, but I'm fairly sure of that - accessing by index in python involves way more checks and operations than it does in a language like C).</p>

<p>The performance issue with your program, if there is one, isn't there. The copy is just done once in the outter loop, and since it is repeated by num your inner loop is way more costy. Mind this: since every iteration can in the worst case double the number of items in <code>keys</code>, your program is actually of complexity <code>O(2^n)</code> where n is the array length.</p>

<p>In a matter of using more efficient structures you can also use <code>Counter</code> from <code>collections</code> that saves a bit of verbosity (it has zero as default value) and computation time (it is optimized C structure).</p>

<p>Without optimizing the algorithm, which I believe is part of the challenge :</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter

class Solution:

    def findTargetSumWays(self, nums: List[int], S: int) -&gt; int:
        counts = Counter()
        counts[-nums[0]] += 1
        counts[nums[0]] += 1
        for num in nums[1:]:
            new = Counter()
            for key in counts.keys():
                new[key + num] += counts[key]
                new[key - num] += counts[key]
            counts = new
        return counts[S]
</code></pre>
    </div>