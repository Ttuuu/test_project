<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Your code is fine</strong></p>

<p>There's nothing wrong with the way you've implemented it. It's readable, and will have reasonable O(n) performance.</p>

<p><strong>Alternative implementation</strong></p>

<p>You've mentioned l is created by concatenation of two lists. As far as I understood one of the lists contains only clients with <code>bool=false</code> and one only clients with <code>bool=true</code>. Some clients will appear on both lists. Example:</p>

<pre><code>val l1 = List(
  Client("87658763", Some(Instant.EPOCH), false),
  Client("87658769", Some(Instant.EPOCH), false),
)

val l2 = List(
  Client("87658769", Some(Instant.EPOCH), true)
)
</code></pre>

<p>If this is correct, then an alternative way to implement you function is:</p>

<pre><code>val m1 = l1.map(c =&gt; (c.key, c.time) -&gt; c).toMap
val m2 = l2.map(c =&gt; (c.key, c.time) -&gt; c).toMap

(m1 ++ m2).values.toList
</code></pre>

<p>Or for better (most likely) performance you can use the <code>breakOut</code> trick which will do the mapping and List to Map transformation in single step.</p>

<pre><code>val m1: Map[(String, Option[Instant]), Client] = l1.map(c =&gt; (c.key, c.time) -&gt; c)(scala.collection.breakOut)
val m2: Map[(String, Option[Instant]), Client] = l2.map(c =&gt; (c.key, c.time) -&gt; c)(scala.collection.breakOut)

(m1 ++ m2).values.toList
</code></pre>

<p>Whether this solution is more elegant than your's is subjective. I leave it up to you to decide which one you like more. Whether it's faster should be determined by measurement under production-like load.</p>

<p><strong>First measure &amp; profile</strong></p>

<p>First of all, if you're doing these operations once per the pair of mentioned API calls, then it's likely that the performance will get dominated by the API calls, not this code. If you're doing it more often, then you could remember the results. Before optimising the code I recommend you to measure the performance and determine where is the bottleneck.</p>

<p><strong>Performance factors</strong></p>

<p>If you come to a conclusion that performance of this code is indeed critical, then most likely the problem will be one of these:</p>

<ul>
<li>allocation of garbage - <code>groupBy</code>, <code>map</code>, <code>toList</code> each allocate a new data structure.  No, the Scala compiler does not optimise this in any way. While allocation is a cheap process, all the garbage will have to be collected, and Garbage Collection can be expensive in some scenarios.</li>
<li>passes over the data set - <code>groupBy</code>, <code>map</code>, <code>toList</code> each is an O(n) operation iterating over the data. Additional these operations may slow down if the data won't easily fit in CPUs cache.</li>
</ul>

<p>Which one will be dominant, will depend on Heap and GC configuration, the size of <code>l</code>, other workloads in the JVM and other factors. Both can be improved by doing as small number of passes over the data as possible.</p>

<p><strong>Less passes over the data</strong></p>

<p>These are the hints I can give on reducing the number of passes over the data, in this, and other similar situations:</p>

<ul>
<li>Check If you can avoid some collection conversions. Maybe the <code>Iterable[Client]</code> returned by <code>my</code> is ok, and you don't have to convert it <code>toList</code>. </li>
<li>Use breakOut.   </li>
<li>Try doing more in single step. <code>foldLeft</code> is a powerful operation which lets you combine many operations on a collection into one (at the expense of readability).    </li>
<li>Use mutable structures under the hood. Keep immutables in the API.</li>
</ul>
    </div>