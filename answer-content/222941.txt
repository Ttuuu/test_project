<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd prefer to include the C++ header <code>&lt;cassert&gt;</code>, to be consistent.  Use the C compatibility headers only in code that must compile with a C compiler.</p>

<p>I don't see the need for the final argument <code>c</code> to <code>Linear()</code>, given that it's passed to <code>point&lt;1,T&gt;::coords()</code>, for which the only valid value is <code>0</code>.  Also there's an inaccurate comment there: <code>a,b boundary of the 1D cuboid, a&lt;=b</code> - but we need <strong><code>a&lt;b</code></strong> to avoid division by zero.</p>

<p>I don't see a good reason for creating a reciprocal and multiplying by that, instead of simply dividing.  It appears to me to be unnecessary duplication:</p>

<blockquote>
<pre><code>   T x_d = (p.coord(c)-a.coord(c)) * (1/(b.coord(c) - a.coord(c)));
</code></pre>
</blockquote>

<p>becomes:</p>

<pre><code>    T x_d = (p.coord(c)-a.coord(c)) / (b.coord(c) - a.coord(c));
</code></pre>

<p>We might want to make a helper function for these very similar "portion" computations.</p>

<p>We can make <code>point::coord()</code> <code>constexpr</code>, and all the members of <code>LinearInterpolator</code> can be made both <code>constexpr</code> and <code>static</code>.</p>

<p>Instead of the <code>static_cast</code> of 1.0 to <code>T</code>, we might make a simple constant:</p>

<pre><code>private:
    static constexpr T unity = 1.0;
</code></pre>

<p>BTW, a "1D cuboid" is normally called a <em>line</em>, and a "2D cuboid" a <em>rectangle</em>.</p>
    </div>