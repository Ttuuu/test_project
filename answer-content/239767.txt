<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Non-const static variables</h1>

<p>Your code shows a lot of good practices:</p>

<ul>
<li>variables are always initialized when possible</li>
<li>variables have proper names (and you stuck to a single naming scheme)</li>
<li>no unecessary <code>std::endl</code></li>
</ul>

<p>However, there is one drawback:</p>

<pre class="lang-c prettyprint-override"><code>static int random_number;
</code></pre>

<p>That line right there is, at least from my point of view, a flaw. <code>static</code> variables are a nice escape hatch in some circumstances, but here it's unnecessary. We can easily use another argument to <code>finder</code>, for example:</p>

<pre class="lang-cpp prettyprint-override"><code>guess_stats finder(comparison_function &amp;&amp; cmp, int random_number) {
   ...
}
</code></pre>

<p>Or we could combine the comparison function with the number to be guessed in a struct, similar to <code>guess_stats</code>.</p>

<p>Either variant makes sure that our changes in <code>finder</code> won't spill into the rest of our program flow. While we don't intend to change <code>random_number</code> in <code>finder</code>, it's easy to accidentally write <code>random_number++</code> or press <code>&lt;Tab&gt;</code> in an IDE with the wrong completion. If we were to use multiple <code>finder</code> variants in separate threads, we would have a hard time to debug the behaviour, especially if there is more than a single <code>static</code> variable.</p>

<p>However, I guess you've used <code>random_number</code> as a static variable to ease the use of <code>compare</code>. There are other ways that we will inspect at the end of this review.</p>

<p>Note that <code>const static</code> or <code>constexpr static</code> variables on the other hand are fine, as they cannot lead to debugging troubles (unless you <code>const_cast</code> them, but at that point we're deep within undefined behaviour territory).</p>

<h1>Q&amp;A</h1>

<blockquote>
  <p>Although I don't expect there will be, are there any edge-cases I may not have seen?</p>
</blockquote>

<p>What happens if I use the following comparison?</p>

<pre class="lang-cpp prettyprint-override"><code>int compare(int unused) {
    return 1;
}
</code></pre>

<p>Sure, that's not a valid comparison, however, there is nothing in <code>finder</code> that blocks us from using such a function. Given that a binary search should take at most <span class="math-container">\$\log_2(n)+1\$</span> steps, we can introduce a simple limit of 33 iterations.</p>

<blockquote>
  <p>Are there any algorithmic changes that I could make to have less time-complexity? I don't think so (because this is only O(log n) as it is), but I may be surprised to find out.</p>
</blockquote>

<p>That's all correct, and from an <span class="math-container">\$\mathcal O\$</span> analysis there's nothing to improve.</p>

<blockquote>
  <p>Are there any better ways to generate random numbers? </p>
</blockquote>

<p>There's the <a href="https://en.cppreference.com/w/cpp/header/random" rel="nofollow noreferrer"><code>&lt;random&gt;</code></a> header. We can use the example code from <a href="https://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution" rel="nofollow noreferrer"><code>uniform_int_distribution</code></a> to generate a random number:</p>

<pre class="lang-cpp prettyprint-override"><code>int main(void)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;int&gt; dist(0, std::numeric_limits&lt;int&gt;::max());

    const int random_number = dist(gen);

    ...
}
</code></pre>

<p>However, keep in mind that this usually won't seed a <code>mt19937</code> correctly and <a href="https://codereview.stackexchange.com/questions/109260/seed-stdmt19937-from-stdrandom-device">there are ways around that issue</a>.</p>

<h1>Getting rid of <code>random_number</code></h1>

<p>Given that we use <code>&lt;functional&gt;</code>, we use at least C++11. Therefore, we have lambdas at hand. We can use this to our advantage to get rid of <code>random_number</code> in <code>main</code>:</p>

<pre class="lang-cpp prettyprint-override"><code>int main(void)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;int&gt; dist(0, std::numeric_limits&lt;int&gt;::max());

    const int random_number = dist(gen);

    auto compare = [random_number](int guess) {
        if (guess &gt; random_number) {
            return 1;
        } else if (guess &lt; random_number) {
            return -1;
        }
        return 0;  
    };

    guess_stats stats = finder(compare);
    ...
}
</code></pre>

<p>We don't even need to change <code>finder</code> to use the new comparison, thanks to <code>std::function&lt;int(int)&gt;&amp;&amp;</code>.</p>
    </div>