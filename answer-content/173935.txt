<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay so first of the obligatory <a href="https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons">Singletons are bad practice</a> so you probably shouldn't make it easy to write bad code. </p>

<p>Ignoring the fact that the class probably shouldn't exist at all we can look at the code.</p>

<pre><code>static T&amp; GetInstance() {
  static MemGuard g; // clean up on program end
  if (!m_instance) {
    m_instance = new T(); 
  }
  return *m_instance;
}
</code></pre>

<p>If multiple threads access this instance simultaneously before it is created, you have a data race and <code>m_instance</code> may end up be being constructed multiple times or other kinds of undefined behaviour. You need to add mutex locks around the <code>if</code> block or use <code>std::call_once</code> which is preferred.</p>

<p>As it is supposed to be a singleton you're not supposed to be able to create more instances as the meaning of a singleton is to just have one instance but it appears that it is fully possible to construct multiple instances of <code>Test</code>  simply by creating them as local variables. So this is a design flaw in your template. </p>

<p>A much better way of creating a singleton is to rely on C++11 <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm" rel="noreferrer">Magic Statics (N2660)</a>. And simply do this:</p>

<pre><code>class Test{
private:
    Test(); // Disallow instantiation outside of the class.
public:
    Test(const Test&amp;) = delete;
    Test&amp; operator=(const Test &amp;) = delete;
    Test(Test &amp;&amp;) = delete;
    Test &amp; operator=(Test &amp;&amp;) = delete;

    static auto&amp; instance(){
        static Test test;
        return test;
    }
}; 
</code></pre>

<p>Which is much easier to write than your code, it's thread safe and fixes the issues with allowing <code>Test</code> to be instantiated. The properties of magic statics guarantee that <code>test</code> will be initialised exactly once the first time the function body is entered by any thread, even in the presence of multiple threads that might otherwise cause a data-race. The instance will be deconstructed when your <code>main()</code> function returns (in the static destruction stage) which makes the whole <code>MemGuard</code> thing unnecessary.</p>
    </div>