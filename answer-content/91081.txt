<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot of code here, (258 lines), so I'm not going to give a full review, but rather, a few suggestions on what you can improve in general.</p>

<ul>
<li>My first suggestion is to be consistent, and clear with your whitespace usage. For example, on some lines, you have something like this: <code>self.thaco=thaco</code>, and on other lines you have something like this: <code>prof= "cleric"</code>. Both of these should be changed to something like <code>variable = value</code>. This makes it clearer to read. You should also have whitespace between operators, for example: <code>x &gt;= y</code>, and two blank lines in between function and class declarations.</li>
<li>Another suggestion would be to add comments and docstrings explaining what your code does. For example:</li>
</ul>

<hr>

<pre><code>def my_function(arguments):
    """
    This is a docstring. Put an explanation of
    your function or class here, and put your code below.
    """
    pass
</code></pre>

<hr>

<ul>
<li>When naming classes, variables, and functions, it's important to give them good names. For example, I have no idea what the variable <code>self.thaco</code> is used for from just looking at it. Names should be descriptive of what they are used for, but not too long either. After all, nobody wants to have to type an name like <code>this_is_the_x_position_of_the_player</code>.</li>
<li>You have quite a few functions which are just large, hard-to-read blocks of code. See if you can separate certain actions out into smaller, more easy to read functions. This is for the benefit of you, and someone who might want to read your code.</li>
<li>I'd also create a generalized function for choosing player decisions, rather than large <code>if</code>/<code>elif</code>/<code>else</code> blocks. Here's what I'd implement.</li>
</ul>

<hr>

<pre><code>def player_decision(player_input, possible_choices):
    """
    Return a value based on the player's input.
    """
    if player_input in possible_choices:
        return possible_choices[player_input]
    else:
        print "Invalid choice!"
</code></pre>

<hr>

<ul>
<li><code>player_input</code> would simply be the string the player inputs, and <code>possible_choices</code> is a dictionary of possible choices and their return values.</li>
<li>Finally, I'd recommend reading Python's official style guide, <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>.</li>
</ul>

<p>Anyway's, I hope this helps you with your project!</p>
    </div>