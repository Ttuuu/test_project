<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Alternative approach</h2>

<p>Instead of using attributes and reflection, I'd go for a set of generic methods that take type-specific date and value-selector methods as parameters.</p>

<p>First, a method that returns items grouped by time segment:</p>

<pre><code>public static IEnumerable&lt;TimeSegmentItems&lt;T&gt;&gt; GetItemsPerTimeSegment(
    IEnumerable&lt;T&gt; items,
    DateTime from,
    DateTime to,
    TimeSpan segmentDuration,
    Func&lt;T, DateTime&gt; getTimestamp) { ... }

// Contains all items within a given time segment,
// as well as the last item from the preceding time segment
// (that item determines the initial state):
public class TimeSegmentItems&lt;T&gt;
{
    public DateTime Start { get; }
    public DateTime End { get; }
    public IEnumerable&lt;T&gt; Items { get; }
}
</code></pre>

<p>Then, a utility method for obtaining the dominant value for a given time segment:</p>

<pre><code>public static TValue GetDominantValue&lt;TItem, TValue&gt;(
    IEnumerable&lt;TItem&gt; items,
    DateTime from,
    DateTime to,
    Func&lt;TItem, DateTime&gt; getTimestamp,
    Func&lt;TItem, TValue&gt; getValue) { ... }
</code></pre>

<p>Together, they allow you to do the following:</p>

<pre><code>GetItemsPerTimeSegment(myValues, fromDate, toDate, TimeSpan.FromMinutes(5), m =&gt; m.Date)
    .Select(segment =&gt; new MyModel {
        Value = GetDominantValue(segment.Items, segment.Start, segment.End, m =&gt; m.Date, m =&gt; m.Value),
        ActuallyAnEnum = GetDominantValue(segment.Items, segment.Start, segment.End, m =&gt; m.Date, m =&gt; m.ActuallyAnEnum),
    });
</code></pre>

<p>Which can further be streamlined, but that's the gist of it.</p>

<h2>Comparison</h2>

<p>Comparing this to your original approach:</p>

<ul>
<li>Reflection and <code>dynamic</code> are both relatively slow, and especially with <code>dynamic</code> you lose compile-time checking. This approach should be more succinct, more robust and (much) faster.</li>
<li>With attributes, you are limited to types that you can add attributes to. This approach lets you work with any type, and even create different 'views' for the same type, at the cost of having to write type-specific logic (the date and value selectors, and the final result-building code).</li>
<li>Instead of a single public method that does everything, these utility methods each focus on a specific task, which makes them more reusable. You can swap the dominant-value logic for average-value logic without having to touch the time-segment grouping logic. You can also build an attribute/reflection-based layer on top of this that removes the need for type-specific code, if necessary.</li>
</ul>
    </div>