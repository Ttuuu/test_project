<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use portable constructs</h1>

<p>Variable-length arrays are not standard C++.  Using such non-standard extensions hampers your code because you can't easily use different compilers (this can possibly even exclude entire target platforms).</p>

<h1>Avoid importing all of <code>std</code> into the global namespace</h1>

<p>Namespaces provide us with an important service, separating the large and growing set of identifiers in <code>std</code> from those of our own code.  It's actively harmful to reverse that benefit with <code>using namespace std</code>.</p>

<h1>Always test for errors when reading</h1>

<p>Formatted input such as <code>std::cin &gt;&gt; n &gt;&gt; k</code> should <em>always</em> test the state of the stream before using the read values.</p>

<h1>Use clearer names</h1>

<p>We don't have to use names like <code>t</code> just because that's what the question uses to describe the number of test cases.  Similarly, <code>hrs</code> took me much longer to comprehend than would <code>horse</code> - and that's not going to push your line lengths.</p>

<h1>Know your standard library</h1>

<p>What we have is a priority queue of horses, ordered by the time they next return, with the horse's number as tie-breaker.  We have <code>std::priority_queue</code> with insertion/removal times that scale as <em>O(log n)</em>, so iterating over the <code>k</code> previous riders to find which horse we get will scale as <em>O(k log n)</em>.</p>

<p>The algorithm is pretty simple - for each member of the queue in front of us, take the next horse from the stable (a <code>std::priority_queue</code>), add its running time to its next-available time, and insert it back into the stable.  The horse at the front of the stable after <code>k-1</code> iterations will be ours.</p>
    </div>