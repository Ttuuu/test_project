<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think i would go for LINQ approach. For this simple operation, it is short and easy to understand. Don't reinvent the wheel, use LINQ.</p>

<p>Here is another shorter version of LINQ : </p>

<pre><code>public static bool IsIsogram(string input)
{
    var preprocessedInput = Regex.Replace (input.ToLower(), "[ -]", "").Dump();
    return preprocessedInput.Length == preprocessedInput.Distinct().Count();
}
</code></pre>

<p>But i would like to introduce another approach which is recursive. There is no need to use HashSets or Dictionaries within the implementation. </p>

<pre><code>public static bool IsIsogram( string input){
    if (string.IsNullOrEmpty(input))
    {
        throw new ArgumentNullException(nameof(input));
        //or we can return true , no character,  no repeated character :) 
    }
    var preprocessedInput = Regex.Replace(input.ToLower(), "[ -]", "");
    if (input.Length==1)
    {
        return true;
    }
    var firstHalf = preprocessedInput.Substring(0,preprocessedInput.Length/2);
    var secondHalf = preprocessedInput.Remove(0,preprocessedInput.Length/2);

    if (firstHalf.Intersect(secondHalf).Any())
    {
        return false;
    }

    return IsIsogram(firstHalf) &amp;&amp; IsIsogram(secondHalf);
}
</code></pre>

<p>The input string is divided into two string and checked for any intersected characters. If there is an intersecting character then, returns false.
 If there is not any intersected character then, each string divided into two substrings and called the method for each recursively. </p>
    </div>