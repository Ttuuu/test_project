<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I haven't really tried to follow your code, but it sounds like you're complicating things unnecessarily by talking about "permutation matrices" instead of just "permutations." IIUC, it's trivial to get from a permutation matrix to a permutation or vice versa. The hard part is getting from an integer index ("give me the 42nd permutation of these elements") to the actual permutation.</p>

<p>So, the non-trivial functions you're looking for are</p>

<pre><code>def nth_permutation(num_elements, which):
    [...]

def index_of_permutation(num_elements, which):
    [...]
</code></pre>

<p>The speedy algorithm for <code>nth_permutation</code> is described <a href="https://stackoverflow.com/questions/7918806/finding-n-th-permutation-without-computing-others">here (with C and PHP code)</a>
and <a href="http://code.activestate.com/recipes/126037-getting-nth-permutation-of-a-sequence/" rel="nofollow noreferrer">here in Python, although apparently the first version doesn't produce permutations in the traditional order and the second version is quadratic</a>.</p>

<hr>

<p>On your actual code, I'm confused by this passage:</p>

<pre><code>    res, bit = divmod(res, base)
    if res + bit == 0:
        bit = 0
</code></pre>

<p>How can <code>res + bit == 0</code>, unless <code>(res == 0) and (bit == 0)</code>? But if <code>(bit == 0)</code>, then it's redundant to assign <code>bit = 0</code>.</p>

<hr>

<p>I also don't understand the significance of <code>35</code>. Is it significant that there are 10+26-1 non-zero "digits" available in base 36? If <code>35</code> was picked completely at random, then you should really make it a <em>parameter</em> to the function. It'd be what I called <code>num_elements</code> in my signatures above.</p>

<hr>

<p>Trivial nit: you forgot</p>

<pre><code>from operator import itemgetter
</code></pre>

<hr>

<pre><code>big_number = digits[0]
pos = 0
base = b = 35
for digit in digits[1:]:
    big_number += b * digit
    pos += 1
    base -= 1
    b *= base
</code></pre>

<p>This looks suspiciously like "convert string to int." Is this essentially equivalent to</p>

<pre><code>alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXY"
big_string = ''.join([alphabet[i] for i in digits])
big_number = int(big_string[::-1]], 35)
</code></pre>

<p>?</p>
    </div>