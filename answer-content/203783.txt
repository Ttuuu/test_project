<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>load_be_data</strong> </p>

<ol>
<li>Parameter name is not very descriptive. I'd say that 'file_path' would be better.</li>
<li>Assuming that there is some end user, it would be better to add some descriptive messages for different kinds of exceptions instead of printing the message. Also, it is a good practice to note where the exception was caught. For example, 'Exception with message XYZ was raised in load_the_data'.</li>
</ol>

<p><strong>get_files</strong></p>

<p>I don't think there is any reason to create a local variable.
Just do :</p>

<pre><code>def get_files():
    return glob("backend_data/*.json")
</code></pre>

<p><strong>send_to_be</strong></p>

<ol>
<li>Again, parameter name is not descriptive.</li>
<li>Is there any reason why do you want to return boolean value instead of raising the error? The 'most pythonic' way is to ask for forgiveness than permission <a href="https://docs.python.org/3.4/glossary.html" rel="nofollow noreferrer">EAFP</a>. In my opinion, what should happen here is that the function should raise an exception when something bad happens or continue when everything is okay. This would help you because you wouldn't need to handle errors separately. </li>
</ol>

<p>Try this in <code>persist_dump</code>:</p>

<pre><code>try:
    send_to_be(load_be_data(f))
    sleep(300)
except (some exception) as ex:
    print("Exception thrown in ...")
    remove(f)
    sleep(1)
</code></pre>

<ol start="3">
<li>Both "insert" and "update" should be a global variables (so you can possibly reuse them somewhere else).</li>
<li>If <code>create_new_component</code> and <code>update_component</code> are not calculated inside the method, it would be good to make them global variables.</li>
</ol>

<p><strong>persist_dump</strong></p>

<p>I don't think that it is a good idea to call <code>persist_dump</code> recursively. Assuming that you script will run for a while you are using more memory than you need to. Additionally, at some point in the future you might get <code>RuntimeError: maximum recursion depth exceeded</code>. </p>
    </div>