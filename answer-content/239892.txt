<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My main piece of advice is to think in terms of general solutions rather than trying to handle each case separately.  For example, taking this function:</p>

<pre><code>def convert_to_standard(a1,a2,b1,b2):
    if a1 &lt;= b1 and a2 &lt;= b2:
        return (a1,a2,b1,b2)
    elif a1 &gt;= b1 or a2 &gt;= b2:
        a_1 = min(a1,b1)
        b_1 = max(a1,b1)
        a_2 = min(a2,b2)
        b_2 = max(a2,b2)
        return (a_1,a_2,b_1,b_2)
</code></pre>

<p>If <code>a1 &lt;= b1</code> then <code>min(a1, b1)</code> is the same as <code>a1</code>, right?  And so on for the other values in your <code>if</code> statements.  This can in fact be written as:</p>

<pre><code>def convert_to_standard(a1, a2, b1, b2):
    return (
        min(a1, b1),
        min(a2, b2),
        max(a1, b1),
        max(a2, b2),
    )
</code></pre>

<p>Because it's hard to keep track of which value is which, I'd personally want to express this as two coordinate pairs rather than a single 4-tuple.  I'd also use the name "normalize" for this operation:</p>

<pre><code>from typing import Optional, Tuple

Rect = Tuple[Tuple[int, int], Tuple[int, int]]

def normalize(rect: Rect) -&gt; Rect:
    """
    Given a rectangle specified as a pair of arbitrary opposite corners,
    normalize to a pair where the first is the lower left and second is upper right.
    """
    (ax, ay), (bx, by) = rect
    return (
        (min(ax, bx), min(ay, by)),
        (max(ax, bx), max(ay, by)),
    )

</code></pre>

<p>In your problem description:</p>

<blockquote>
  <p>The other square is 6 units wide and has a variable positive integer height h (to make the task simpler).</p>
</blockquote>

<p>this does not actually make the task simpler, it makes it harder, because now you have to deal with different formats of input.  It would be simpler IMO to write a function that takes two rectangles in a standardized format and returns a rectangle representing their intersection, since it's easier to reason about that sort of straightforward geometric problem than to solve a particular special case subset of it.  </p>

<pre><code>def bottom(rect: Rect) -&gt; int:
    return rect[0][1]

def top(rect: Rect) -&gt; int:
    return rect[1][1]

def left(rect: Rect) -&gt; int:
    return rect[0][0]

def right(rect: Rect) -&gt; int:
    return rect[1][0]

def overlaps(a: Rect, b: Rect) -&gt; bool:
    """
    Computes whether two normalized rectangles have a non-zero overlap.
    """
    return (
        top(a) &gt; bottom(b)      # top of a is not below b
        and top(b) &gt; bottom(a)  # top of b is not below a
        and right(a) &gt; left(b)  # right of a is not left of b
        and right(b) &gt; left(a)  # right of b is not left of a
    )
</code></pre>

<p>etc.</p>

<p>If your input is in a specialized format, I think it's still better to write the general-purpose rectangle code and then add a bit of code to translate the input into a normalized rectangle.</p>
    </div>