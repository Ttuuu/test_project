<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, this looks good to me! I have some minor comments.</p>

<p><strong>General comments</strong></p>

<ul>
<li><p>Consider compiling with <code>-Wconversion</code>. It will give you a couple of hints where you implicitly convert between <code>std::vector::size_type</code> (usually <code>std::size_t</code>) and <code>int</code>. Whether you work with <code>unsigned</code> data types for skills and quantities might be a matter of taste, but I think you should be aware of the conversion issue. Also, this compiler flags gives you (on my machine)</p>

<blockquote>
  <p>implicit conversion loses integer precision: <code>unsigned long</code> to <code>int</code> [-Wshorten-64-to-32]</p>

<pre><code>int remainingPossibilities = skills.size() - p;
</code></pre>
</blockquote>

<p>which should definitely worth tackling even if the problem description specifies input characteristics that make a digit loss impossible.</p></li>
<li><p>Not that this will be an issue for this example, but when you want to be as fast as possible, don't use <code>&lt;iostream&gt;</code>, but <code>&lt;cstdio&gt;</code> instead.</p></li>
</ul>

<p><strong>Input handling/parameter types</strong></p>

<ul>
<li><p>When retrieving the input data, don't pass non-<code>const</code> references, but prefer returning by value instead. (N)RVO will make sure there is no overhead. As you have more than one value, define a small, custom type for this. So, I'd suggest going with</p>

<pre><code>struct TestCaseInput {
   int nToChoose;
   std::vector&lt;int&gt; skills;
};

TestCaseInput getData();
int minTrainingTime(TestCaseInput&amp; input);
</code></pre>

<p>cf. the Core Guidelines on this topic, <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f20-for-out-output-values-prefer-return-values-to-output-parameters" rel="noreferrer">F.20</a> and <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f21-to-return-multiple-out-values-prefer-returning-a-struct-or-tuple" rel="noreferrer">F.21</a></p></li>
<li><p><code>std::vector::emplace_back</code> makes sense when you can in-place construct an object with given parameters, but when you pass the already existing object to this function, it's probably clearer to use <code>push_back</code>. In the case of an integral value, it doesn't matter anyhow whether you move-construct or copy it. As an alternative, you could also</p>

<pre><code>std::vector&lt;int&gt; skills(n); // Allocates and set all values to zero

for (int i = 0; i &lt; n; i++)
    std::cin &gt;&gt; skills[i]; // No temporary variable required
</code></pre>

<p>And also have a look at the combination of <code>std::copy_n</code> and <code>std::istream_iterator</code> that @papagaga suggests to eliminate the manual loop here.</p></li>
</ul>

<p><strong>Main function <code>minTrainingTime</code></strong></p>

<ul>
<li><p>In the first loop, you read <code>skills[high]</code> in every iteration, even though this value doesn't change. Instead, just read it once and save it in a variable. Or, leave it as it is and verify that the compiler optimizes this away anyway.</p></li>
<li><p>You can also replace this whole first loop by including <code>&lt;numeric&gt;</code> and using <code>std::accumulate</code> with an initial value <code>high*skills[high]</code> and <code>std::minus&lt;&gt;{}</code> as the binary operation parameter.</p></li>
<li><p>If you can <code>const</code>-qualify a variable, do so:</p>

<pre><code>const int remainingPossibilities = skills.size() - p;
</code></pre></li>
<li><p>But if can alternative reduce the scope of such a variable and by that even eliminate another one (the loop counter <code>i</code>), do so instead (as long as the negative influence on the readability is not too big, which I think is ok here):</p>

<pre><code>// remainingPossibilities is now superfluous, just use the for loop for
// the initialization and count differently:
for (int n = skills.size() - p; n != 0; n--) { /* ... */ }
</code></pre></li>
<li><p>You <em>might</em> want to consider an additional level of indirection for the function <code>minTrainingTime</code> here, as it can equally well operate on random access iterators instead of indices. This way, you eliminate the dependency of this function on the actual value type that you are using (which also considerably reduces the number of <code>-Wconversion</code> warnings at one go), as well as the dependency on the container type. Using some of the above hints, the resulting function template looks e.g. like this:</p>

<pre><code>template &lt;class RandomAccesIt, class T&gt;
auto minTrainingTime(RandomAccesIt first, RandomAccesIt last, T p)
{
    using value_type = typename RandomAccesIt::value_type;
    auto low = first, high = std::next(first, p - 1);
    const value_type init = std::distance(low, high)*(*high);

    value_type currentResult = std::accumulate(first, high, init, std::minus&lt;&gt;{});
    value_type minResult = currentResult;

    for (auto n = std::distance(first, std::prev(last, p)); n != 0; --n) {
        currentResult -= *++high - *low++;
        currentResult += p*(*high - *std::prev(high));
        minResult = std::min(minResult, currentResult);
    }

    return minResult;
}
</code></pre>

<p>and can be deduced and invoked by <code>minTrainingTime(skills.begin(), skills.end(), p)</code>.</p></li>
</ul>
    </div>