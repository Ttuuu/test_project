<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For idiomatic Python:</p>

<ul>
<li>You should not put spaces between the brackets and the values in function calls.</li>
<li>You should use <code>snake_case</code> for variables.</li>
</ul>

<hr>

<p>You've said you have concerns over finding the parent node that is the ancestor. Lets say we have the tree:</p>

<pre><code>   A
 B
C D
</code></pre>

<p>Since that all left nodes are smaller than the current value in binary trees we know that <span class="math-container">\$B &lt; A\$</span>, <span class="math-container">\$C &lt; B\$</span> and <span class="math-container">\$D &lt; A\$</span>. We also know that the right nodes are larger than the current node, and so <span class="math-container">\$B &lt; D\$</span>. And so we know <span class="math-container">\$C &lt; B &lt; D &lt; A\$</span>.</p>

<p>From this we can see that logically <code>if node.parent.left == node</code> is the same as <code>if node.parent.value &gt; target</code>.</p>

<p>The benefit to the former is you don't have to create <code>target</code>.</p>

<hr>

<p>Your implementation is awkward, <code>successor</code> should always be called duplicating the input.</p>

<pre><code>successor(node, node.value)
</code></pre>

<p>If you don't then you'll have problems. Say <span class="math-container">\$A = 1\$</span>, and <span class="math-container">\$\text{node} = D\$</span>. The successor to <span class="math-container">\$D\$</span> is <span class="math-container">\$A\$</span>, however <code>successor(node, 1)</code> will incorrectly return <span class="math-container">\$B\$</span>.</p>

<p>To fix this just define <code>target_value</code> in <code>successor</code>.</p>

<pre><code>def successor(node):
    if node.right:
        node = node.right
        while node.left:
            node = node.left
    else:
        target_value = node.value
        while node:
            node = node.parent
            if node.value &gt; target_value:
                break
    return node
</code></pre>

<hr>

<p>If you follow what you've seen online you can reduce the amount of lines of code:</p>

<pre><code>def successor(node):
    if node.right:
        node = node.right
        while node.left:
            node = node.left
    else:
        while node != node.parent.left:
            node = node.parent
        node = node.parent
    return node
</code></pre>

<hr>

<p>It should be noted that if there is no successor in the tree all implementations will raise an <code>AttributeError</code>.</p>

<p>This is rather confusing, and so you may want to change it to a different error.</p>

<pre><code>def successor(node):
    try:
        if node.right:
            node = node.right
            while node.left:
                node = node.left
        else:
            while node != node.parent.left:
                node = node.parent
            node = node.parent
        return node
    except AttributeError:
        raise ValueError('No successor exists.') from None
</code></pre>
    </div>