<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally "template vs polymorphism" is a complex topic. A simple rule of thumb: if it is high level (e.g., service you instantiate a few times) go virtual, if it is low level (you need to create a array of million these objects) then go template.</p>

<p>In your case... honestly your interface makes little sense to me - it is difficult to make any advices.</p>

<p>Say, is there any point in <code>Bar</code> class? It simply holds an <code>int</code> and serves no other purpose. Just having a common function and variable doesn't imply that you need to have a shared basic class. If it had virtual destructor then I could understand to a certain degree.</p>

<p>Why <code>OpampBar</code> is a class? It just holds two integers. Why not make it a struct with public members? Why make it unnecessarily complicated?</p>

<p>What is this <code>BasicBar</code> and what is this <code>pins</code> raw pointer? Is it a pointer to an array? A pointer to data that doesn't belong to it? Why not use <code>std::vector&lt;int&gt;</code>? There are lots of well made classes and functions in STL, why not utilize them?</p>

<p>What is the point of <code>BarService</code>? It is an interface class. I know of two purposes of interface classes: (1) To allow your program to switch between different derived classes easily. (2) Hide implementation. Is this the case? (Well, it can also serve as poor man's <code>concept</code> substitude... but I doubt that you use any SFINAE).</p>

<p>You need to watch and read tutorials on C++. There are plenty for free - just google it. There are lots of CppCon videos on YouTube where they explain additions to C++ (you gotta learn what was added in C++11/14 as well as what STL already had for 20 years).</p>
    </div>