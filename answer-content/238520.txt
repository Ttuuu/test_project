<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions for you to improve your code.</p>

<hr>

<blockquote>
<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;fstream&gt;
#include &lt;stdexcept&gt;
#include &lt;algorithm&gt;
</code></pre>
</blockquote>

<p>Sort the <code>#include</code> directives in alphabetical order.  This helps navigation.</p>

<hr>

<blockquote>
<pre><code>using std::vector;
using std::string;
using std::fstream;
using std::ios_base;
using std::runtime_error;
using std::cout;
using std::max_element;
using std::min_element;
</code></pre>
</blockquote>

<p>This is much better than <code>using namespace std;</code>, but I still suggest getting into the habit of explicitly qualifying the names with <code>std::</code> as soon as possible (especially for those names which you only use once, e.g., <code>max_element</code>).  For small programs like this it doesn't matter, but for larger programs, qualification adds clarify — when I see <code>string</code>, does it mean <code>std::string</code>?  <code>Jewelry::string</code>, a string of pearls?  Or <a href="https://minecraft.gamepedia.com/String" rel="nofollow noreferrer"><code>Minecraft::string</code></a>, used to craft bows and fishing rods?  This problem is especially evident for common identifiers, like <code>count</code>, <code>arg</code>, or <code>data</code> — these are all top level names in <code>std</code>!</p>

<p>Moreover, using unqualified names sometimes cause ADL (argument dependent lookup), an additional phase for name lookup, to kick in.  As a result, an attempt to call a function in the standard library may end up inadvertently calling a function in an irrelevant namespace.  Such problems come up often in large programs, so again, it's better to get into the habit of using <code>std::</code>.</p>

<p>It is acceptable to use <code>using</code> declarations or derivatives <strong>in reduced scopes</strong>, to reduce clutter.  But using them globally for the whole program is likely to cause problems.  Moreover, <code>std::</code> is only 5 characters — reducing clutter is more relevant for things like</p>

<pre><code>boost::math::double_constants::pi
</code></pre>

<p>or </p>

<pre><code>boost::multiprecision::number&lt;
    boost::multiprecision::mpfr_float_backend&lt;300&gt;,
    boost::multiprecision::et_off
&gt;;
</code></pre>

<hr>

<blockquote>
<pre><code>const string distances_file_name = "distances.txt";
</code></pre>
</blockquote>

<p>Use <a href="https://en.cppreference.com/w/cpp/language/constexpr" rel="nofollow noreferrer"><code>constexpr</code></a> <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>std::string_view</code></a> (defined in header <a href="https://en.cppreference.com/w/cpp/header/string_view" rel="nofollow noreferrer"><code>&lt;string_view&gt;</code></a>) for string constants:</p>

<pre><code>constexpr std::string_view file_name{"distances.txt"};
</code></pre>

<p>or</p>

<pre><code>using namespace std::literals;
constexpr auto file_name = "distances.txt"sv;
</code></pre>

<hr>

<blockquote>
<pre><code>vector&lt;double&gt; load_file_of_doubles_to_vector ( string file_name )
{
    vector&lt;double&gt; distances;
    fstream my_file ( file_name, ios_base::in );
    double temporary_number;
    while ( my_file &gt;&gt; temporary_number )
    {
        distances.push_back ( temporary_number );
    }
    if ( !my_file.is_open() )
    {
        throw runtime_error ( string ( "Failed to load " ) + file_name );
    }
    return distances;
}
</code></pre>
</blockquote>

<p>The parameter type should be <code>std::string_view</code> to avoid redundant copies.</p>

<p>The file stream should be of type <a href="https://en.cppreference.com/w/cpp/io/basic_ifstream" rel="nofollow noreferrer"><code>std::ifstream</code></a> instead of <code>std::fstream</code> because it is used for input only.  Then, you can omit the <code>in</code> option, which is the default for <code>std::ifstream</code>.</p>

<p><code>string ( "Failed to load " ) + file_name</code> is too verbose.  Use <code>"Failed to load "s</code>.</p>

<p>Consider using <a href="https://en.cppreference.com/w/cpp/iterator/istream_iterator" rel="nofollow noreferrer"><code>std::istream_iterator</code></a>, <a href="https://en.cppreference.com/w/cpp/iterator/back_inserter" rel="nofollow noreferrer"><code>std::back_inserter</code></a> (both defined in <a href="https://en.cppreference.com/w/cpp/header/iterator" rel="nofollow noreferrer"><code>&lt;iterator&gt;</code></a>), and <a href="https://en.cppreference.com/w/cpp/algorithm/copy" rel="nofollow noreferrer"><code>std::copy</code></a> to read the values:</p>

<pre><code>// requires NTBS as argument
auto load_file(std::string_view file_name)
{
    // std::string_view doesn't have c_str()
    std::ifstream in{file_name.data()};
    if (!in.is_open()) {
        // assuming 'using namespace std::literals;'
        throw std::runtime_error{"the file doesn't exist"};
    }

    std::vector&lt;double&gt; data;
    std::copy(std::istream_iterator&lt;double&gt;{in},
              std::istream_iterator&lt;double&gt;{},
              std::back_inserter(data));
    return data;
}
</code></pre>

<hr>

<blockquote>
<pre><code>void print_distances_mean_max_min ( const vector&lt;double&gt;&amp; distances_vector )
{
    if ( distances_vector.empty() )
    {
        throw runtime_error ( string ( "There are no entries in " ) + distances_file_name );
    }
    double total_distance = 0;
    for ( auto&amp; n : distances_vector )
    {
        total_distance += n;
    }
    cout &lt;&lt; "The sum of all distances is: " &lt;&lt; total_distance &lt;&lt; "\n";
    double max_distance = 0;
    max_distance = *max_element ( distances_vector.begin(), distances_vector.end() );
    cout &lt;&lt; "The maximum distance is: " &lt;&lt; max_distance &lt;&lt; "\n";
    double min_distance = 0;
    min_distance = *min_element ( distances_vector.begin(), distances_vector.end() );
    cout &lt;&lt; "The minimum distance is: " &lt;&lt; min_distance &lt;&lt; "\n";
    double mean_distance = 0;
    mean_distance = total_distance / distances_vector.size();
    cout &lt;&lt; "The average(mean) distance is: " &lt;&lt; mean_distance &lt;&lt; "\n";
}
</code></pre>
</blockquote>

<p>IMO, this function is unnecessary and can be built into <code>main</code> directly, because it doesn't have a coherent logic — it just shows what the program does.</p>

<p>Catching exceptions in the main function and printing the messages helps the end user know what kind of error happened.</p>

<p>Don't reinvent the wheel — use <a href="https://en.cppreference.com/w/cpp/algorithm/accumulate" rel="nofollow noreferrer"><code>std::accumulate</code></a> or <a href="https://en.cppreference.com/w/cpp/algorithm/reduce" rel="nofollow noreferrer"><code>std::reduce</code></a> (defined in header <a href="https://en.cppreference.com/w/cpp/header/numeric" rel="nofollow noreferrer"><code>&lt;numeric&gt;</code></a>) to calculate sums.</p>

<p>You can calculate the minimum and maximum values simultaneously in
<span class="math-container">\$\lfloor 3(N-1)/2 \rfloor\$</span> comparisons using <a href="https://en.cppreference.com/w/cpp/algorithm/minmax_element" rel="nofollow noreferrer"><code>std::minmax_element</code></a>, which returns a <a href="https://en.cppreference.com/w/cpp/utility/pair" rel="nofollow noreferrer"><code>std::pair</code></a> of iterators pointing to the minimum and maximum elements respectively.  Then, we can use a <a href="https://en.cppreference.com/w/cpp/language/structured_binding" rel="nofollow noreferrer">structured binding</a> to conveniently obtain the two iterators and dereference them to get the values:</p>

<pre><code>int main()
try {
    auto data = load_file(file_name);
    if (data.empty()) {
        throw std::runtime_error{"no entries"};
    }

    auto sum = std::accumulate(data.begin(), data.end(), 0.0);
    auto mean = sum / data.size();
    auto [min_it, max_it] = std::minmax_element(data.begin(), data.end());

    std::cout &lt;&lt; "The sum of all distances is: " &lt;&lt; sum &lt;&lt; '\n'
              &lt;&lt; "The maximum distance is: " &lt;&lt; *max_it &lt;&lt; '\n'
              &lt;&lt; "The minimum distance is: " &lt;&lt; *min_it &lt;&lt; '\n'
              &lt;&lt; "The average (mean) distance is: " &lt;&lt; mean &lt;&lt; '\n';
} catch (std::runtime_error&amp; error) {
    std::cerr &lt;&lt; "Runtime error: " &lt;&lt; error.what() &lt;&lt; '\n';
    return 1;
} catch (...) {
    std::cerr &lt;&lt; "Unknown error\n";
    return 2;
}
</code></pre>

<hr>

<p>I've made an <a href="https://wandbox.org/permlink/p9dRR8dL5tugZO3n" rel="nofollow noreferrer">online demo</a> by putting everything together so that you can play with the code.</p>
    </div>