<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#[derive(Copy, Clone)]
enum Bucket&lt;K: Clone, V: Clone&gt; {
    Entry((K, V, usize, usize)),
    Empty,
    Tombstone
}
</code></pre>
<p>The general recommendation is not to put type constraints on your structs/enums but only on your impls. This enum works fine K and V aren't clone, so you don't need restrictions.</p>
<pre><code>pub struct Dictionary&lt;K: Clone + Hash, V: Clone&gt; {
    capacity: usize,
    size: usize,
    table: Vec&lt;Bucket&lt;K, V&gt;&gt;
}
</code></pre>
<p><code>capacity</code> is just <code>table.len()</code> You don't really need your own copy of the vec length, just use the one on Vec.</p>
<pre><code>fn lookup(&amp;self, key: &amp;K) -&gt; Option&lt;(K, V, usize)&gt; { 
</code></pre>
<p>Throughout your api you return Clones of your keys and values. This generally decreases the usefulness of your implementation because it is only useful for things with cheap clones. Generally, such an item returns borrows not object to overcome this.</p>
<pre><code>    let mut index = (key_hash % self.capacity) as usize;
</code></pre>
<p>You unnecessarily cast to usize a lot. As long as you stick to usize you shouldn't be needing to cast at all.</p>
<pre><code>        let current: Bucket&lt;K, V&gt; = self.table.get(index).unwrap().clone();
</code></pre>
<p>If you are just going to <code>.unwrap()</code> how about using <code>self.table[index]</code> instead?</p>
<pre><code>pub fn from_vecs(mut key_vec: Vec&lt;K&gt;, mut value_vec: Vec&lt;V&gt;) -&gt; Dictionary&lt;K, V&gt; {
</code></pre>
<p>Typically such methods would be defined to a generatic Iterator or IntoIter rather than being restricted to Vec.</p>
<pre><code>pub fn from_tuples(tuples: Vec&lt;(K, V)&gt;) -&gt; Dictionary&lt;K, V&gt; {
</code></pre>
<p>Rust has a standard interface: std::iter::FromIterator which would typically want to implement in this case.</p>
<pre><code>pub fn get(&amp;self, key: &amp;K) -&gt; Result&lt;V, String&gt; {
</code></pre>
<p>Typically, looking up a missing a key wouldn't be considered an error and would return Option rather than Error. As it stands creating an error with a String will be somewhat ineffecient because it'll allocate memory for the string.</p>
<pre><code>pub fn keys(&amp;self) -&gt; Vec&lt;&amp;K&gt; {
</code></pre>
<p>Such functions are typically implemented as Iterators not Vecs.</p>
<pre><code>impl&lt;K, V&gt; fmt::Display for Dictionary&lt;K, V&gt;
</code></pre>
<p>This should probably be implementing std::fmt::Debug instead</p>
<pre><code>    let mut output_str = String::new();
    output_str.push_str("{");
</code></pre>
<p>Firstly, its not helpful to build your String and write it into the formatter, just write directly to the formatter. Secondly, Formatter has a number of methods to help write debug style format like this. In particular, checkout the debug_map() method.</p>
    </div>