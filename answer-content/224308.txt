<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Stylistically, the <code>for</code> loop is more readable.  As a general rule, if you start the loop at 1, then I would prefer the termination condition to use <code>&lt;=</code>; if you start counting from 0, then <code>&lt;</code> would be better.</p>

<hr>

<p>The design of this function is conceptually flawed.  It will return an unused filename, but presumably you will eventually want to create a file with the name.  However, it is possible that someone else will have created a file with the same name, creating a conflict.  This <strong>possible race condition</strong> means that you can never be certain that the filename returned by this function is actually unused.</p>

<p>The way to make that guarantee is to <em>actually create the file</em>, such that you effectively grab a reservation on that name.  You can do that by calling <code><a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.file.open" rel="noreferrer">File.Open</a>(<em>path</em>, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.filemode" rel="noreferrer">FileMode.CreateNew</a>)</code>.  The caller would have to delete the file if it doesn't want it.</p>

<pre><code>private static string CreateNextAvailableFile(string fileNamePrefix)
{
    string name;
    for (int i = 1; i &lt;= 99; ++i)
    {
        try
        {
            FileStream fs = File.Open(name = $"{fileNamePrefix}_{i}.png", FileMode.CreateNew);
            fs.Close();
            return name;
        }
        catch (IOException e)
        {
            // Did File.Open() fail due to name collision or another
            // reason? Unfortunately, no specific "FileAlreadyExists"
            // exception exists.  This is a heuristic, and can be
            // fooled by a race condition where the file was deleted
            // just now by someone else.
            if (!File.Exists(name)) throw;
        }
    }

    throw new ApplicationException("Unable to get free filename");
}
</code></pre>

<p>As the comment notes, .NET unfortunately has no way to tell whether the <code>IOException</code> was due to a filename collision or something else.  The code above is therefore also vulnerable to a race condition, but it's better than your race condition, because:</p>

<ul>
<li>This race condition is only triggered when there is an underlying I/O problem (such as insufficient permissions to create a file, or a read-only filesystem), <em>and</em> the file in question is deleted during the split-second between the <code>File.Open()</code> call and the exception handler.</li>
<li>This code fails in a safer way: if the race condition is triggered, it will throw an <code>IOException</code>.  (Arguably, such an <code>IOException</code> would happen anyway, later on.)  However, it's harder to tell what might be the consequences of your race condition: it might fail to detect a collision, and lead to data being overwritten.</li>
</ul>
    </div>