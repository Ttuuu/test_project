<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>

<p>At the end of the first loop,
how many numbers will be in <code>numbers_entered</code>?
10? Hopefully.
In reality: 10 minus invalid entries,
and I'm not sure that was your intention.</p>

<p>This way the invalid entries will be skipped, and there will always be 10 entries in list:</p>

<pre><code>while True:
    number = raw_input('Enter an integer: ')
    if number.isdigit():
        number = int(number)
        numbers_entered.append(number)
        break
    else:
        print 'That was not an integer!'
</code></pre>

<h3>Handling invalid input</h3>

<p>The user input <em>should be</em> valid,
invalid inputs should be the exception.
So you can simplify the handling of invalid user inputs using exceptions:</p>

<pre><code>try:
    number = int(raw_input('Enter an integer: '))
    numbers_entered.append(number)
except ValueError:
    print 'That was not an integer!'
</code></pre>

<p>See also the <a href="https://docs.python.org/2/glossary.html">glossary</a>, and search for the word "forgiveness" in it.</p>

<h3>Using list comprehensions</h3>

<p>List comprehensions are awesome.
The loops could be replaced by list comprehensions
(with the help functions), for example:</p>

<pre><code>def read_int():
    while True:
        try:
            return int(raw_input('Enter an integer: '))
        except ValueError:
            print 'That was not an integer!'

numbers = [read_int() for _ in range(10)]

odd_numbers = [item for item in numbers if item % 2]

if odd_numbers:
    print 'The largest odd number entered was {}.'.format(max(odd_numbers))
else:
    print 'No odd number was entered.'
</code></pre>

<h3>Prefer <code>.format(...)</code> for formatting</h3>

<p>Instead of formatting with <code>%</code>,
the new preferred way is using <code>.format(...)</code>:</p>

<pre><code>print 'The largest odd number entered was {}.'.format(max(odd_numbers))
</code></pre>

<p>Notice that there's no need to call <code>str(...)</code> when using this style.</p>

<h3>Readability</h3>

<p>This statement would have been better on a single line:</p>

<blockquote>
<pre><code>print 'The largest odd number entered was %s.' % str(max(
        odd_numbers))
</code></pre>
</blockquote>
    </div>