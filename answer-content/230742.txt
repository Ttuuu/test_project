<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You lack several features:</p>

<ul>
<li>logging to files, not just CMD; to this end you'd better make an interface class for logger and pass only pointer to the interface. Otherwise you'll end up with too many if/else and hard-to-maintain code.</li>
<li>option for printing the time of the message. Even the C++ style support isn't available in C++17 there is a C-style version you can use.</li>
<li>your logger is not suitable for multi-threading environment (std::cout thread safe but won't necessarily print characters in the order you desire).</li>
<li>consider switching <code>&lt;&lt; std::endl;</code> with <code>&lt;&lt; "\n";</code></li>
<li>functionality that helps user to write the input parameter <code>std::string_view message</code>; since it isn't C++20 and <code>std::format</code> isn't available... current standard methods aren't very convenient. Though, it doesn't have to be a part of the logger and you can just use, say, the same fmt library. Also you might want to avoid making the message at all if logger is going to filtrate it anyways.</li>
<li>The functionality that determines whether to print the message: add verbose level, don't just rely on the message type. At times you don't care if a low-level function returns a warning or an error, but if you'd still want to print info from a high level function. </li>
<li>Current version is not portable. Consider making an interface that is portable, even if the implementation isn't - at most make a different class for other platforms when the time comes. Changing interface will be much harder.</li>
<li><code>Logger::get_error_string</code> why return a <code>std::string</code> and not a <code>std::string_view</code> or <code>const char*</code>? Though, it won't matter much if you have short-string-optimization.</li>
<li>You don't want every method to be in <code>.cpp</code> consider moving quick ones in the header. This way optimizer has more freedom and will be able to inline them if it chooses to. Though, you shouldn't move everything to header as then compilation times will increase. </li>
<li><p>Also no need for declaring default constructor, you can just declare default initialization of the class members when you declare the variables</p>

<pre><code>const HANDLE    m_console_handle    = GetStdHandle(STD_OUTPUT_HANDLE); 
LogLevel        m_current_log_level = LogLevel::Trace;
LoggerSettings  m_settings          = {};
</code></pre></li>
<li><p>About <code>Logger::get_file_name</code> - just use <code>size_t</code> instead of <code>int</code> for <code>index</code> and <code>i</code> to avoid awkward casting. (Though this way you'll have a bug when <code>pathfile</code> is an empty string...) Also, your error/warning configuration is too strict, checkout where you can configure it. It shouldn't be an error but a warning without the casting. Moreover, why not use <code>std::string</code> or <code>std::string_view</code> functions? And this method should be static.</p>

<pre><code>static std::string_view Logger::get_file_name(std::string_view filepath)
{
   auto index = filepath.find_last_of('\\');

   if(index != std::string::npos)
   {
      return filepath.substr(0,index);
   }

   return {};
}
</code></pre></li>
</ul>
    </div>