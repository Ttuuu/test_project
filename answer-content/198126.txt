<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A different approach would be to use the fact that the operation you have to implement is a 2-D convolution. That is, you take the mask given by the hourglas,</p>

<pre><code>mask = [[1, 1, 1], [0, 1, 0], [1, 1, 1]]
</code></pre>

<p>you place it over the top-left part of the array, multiply element-wise between the elements of the mask and the array below, and sum everything. Then you move the mask one to the right and repeat. Once you reach the right border, you move one row down and repeat.</p>

<p>As you can see, this is exactly the described operation. The SciPy library has a built-in function for this: <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.convolve2d.html" rel="noreferrer"><code>scipy.signal.convolve2d</code></a>:</p>

<pre><code>result = convolve2d(arr, mask, 'valid')
</code></pre>

<p>The result will be an array containing the "hourglas sum" for each position where you can place the mask, i.e. for each hourglas:</p>

<pre><code>[[ 7  4  2  0]
 [ 4  8 10  8]
 [ 3  6  7  6]
 [ 3  9 19 14]]
</code></pre>

<p>Then all you need to do is to get the maximum of that output array. As the result will be a NumPy array, you can call the <code>max()</code> method:</p>

<pre><code>result.max()
</code></pre>

<p>As there are already multiple good answers going over the coding style and other suggestions for more pythonic code, I won't go over that here.</p>
    </div>