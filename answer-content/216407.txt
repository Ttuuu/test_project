<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I question the value of this template class.  We hide many important members of <code>std::unordered_map</code> (including <code>crbegin()</code>, <code>empty()</code>, <code>reserve()</code>, <code>at()</code>, <code>try_emplace()</code>) for no good reason.  The additional functions that are provided have no business being members: they are perfectly implementable as free functions without privileged access.</p>

<p>Considering the members in turn:</p>

<ul>
<li><code>insert()</code>: only instantiable if <code>T</code> is convertible to the map's <code>value_type</code>.  Unnecessarily copies the argument.</li>
<li><code>operator()</code>: unnecessary, given that we have <code>operator[]</code>.</li>
<li><code>operator[]</code>: unnecessarily copies its argument.</li>
<li><code>find()</code>, <code>size()</code> <code>begin()</code>, <code>end()</code>: required only because the map is private.</li>
<li><code>exists()</code>: should be a free function.  If this is generic, why is the parameter called <code>userId</code>?</li>
<li><code>remove()</code> - why not just use the <code>erase()</code> that accepts a key?  Or do we have to build with pre-C++11 library?</li>
</ul>

<hr>

<p>When I've wanted to provide something like the <code>exists()</code> here, I've made it a standalone template function that can work with many kinds of container:</p>



<pre><code>/*
 * contains()
 * A convenience overload that searches from beginning to end of a container.
 *
 * If an iterator is supplied, it will be written with the found position or
 * container.end() as appropriate.
 */
template&lt;typename T, typename U&gt;
inline bool contains(const T&amp; container, const U&amp; value)
{
    using std::begin;
    using std::end;
    return find(begin(container), end(container), value) != end;
}

template&lt;typename T, typename U, typename Iter&gt;
    /* Iter should be a T::iterator or T::const_iterator */
inline bool contains(T&amp; container, const U&amp; value, Iter&amp; it)
{
    using std::begin;
    using std::end;
    return (it = find(begin(container), end(container), value)) != end;
}
</code></pre>



<pre><code>/*
 * Overloads for pointer-to-const values within containers of pointer-to-mutable.
 */
template&lt;typename T, typename U&gt;
inline bool contains(const T&amp; container, const U* value)
{
    using std::begin;
    using std::end;
    return find(begin(container), end(container), value) != end;
}

template&lt;typename T, typename U, typename Iter&gt;
inline bool contains(const T&amp; container, const U* value, Iter&amp; it)
{
    using std::begin;
    using std::end;
    return (it = find(begin(container), end(container), value)) != end;
}
</code></pre>



<pre><code>/*
 * Overloads for maps (by key)
 */
template&lt;typename T&gt;
inline bool contains(const T&amp; container, const typename T::key_type&amp; key)
{
    return container.find(key) != container.end();
}

template&lt;typename T, typename Iter&gt;
inline bool contains(T&amp; container, const typename T::key_type&amp; key, Iter&amp; it)
{
    return (it = container.find(key)) != container.end();
}

template&lt;typename T&gt;
inline bool contains(const T&amp; container, const typename T::key_type&amp; key,
                     typename T::mapped_type&amp; result)
{
    typename T::const_iterator it;
    return contains(container, key, it) &amp;&amp; (result = it-&gt;second, true);
}
</code></pre>
    </div>