<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice code.
Let's look at the function signatures.
As gbartonowen noted, two typos on <code>corlor</code> for <code>color</code>.
The keyword defaults are lovely,
thank you for appropriately dealing with a <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic number</a>, and defaulting the filespec.
Lots of keywords will lead to a somewhat long signature, though, as reported by <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer"><code>$ flake8</code></a>:</p>

<pre><code>E501 line too long (106 &gt; 79 characters)
</code></pre>

<p>Recommend you always run such a linter before sharing code.
And heed the linter's advice.
In the same vein we see things like <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> wants spaces in the <code>w, h, k</code> assignment,
or <code>(w * h, k)</code> expression.
And, this being python rather than java,
<a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">snake-case</a> identifiers of <code>d</code> and <code>dist_matrix</code> would be much more appropriate.
Python convention says the Gentle Reader should expect <code>D</code> to be a class.
(Yes, I know this clashes with conventions of the mathematical community,
something had to give. Ok, on to more substantive comments.)</p>

<p>An identifier of <code>data</code> is always on the vague side,
it's a bit like naming your variable <code>the_thing</code>.
Yes, it's accurate, but often it could be a little more informative.
Consider a rename along these lines:</p>

<pre><code>    img = np.asarray(Image.open(image), dtype='int32')
</code></pre>

<p>(Hmmm, as I look at that, maybe we'd like identifiers of <code>in_file</code> and <code>out_file</code>?)</p>

<p>The <code>cdist()</code> call, which defaults to Euclidean, is pretty interesting,
since RGB is not a <a href="https://en.wikipedia.org/wiki/Color_difference" rel="nofollow noreferrer">perceptually uniform</a> color scheme.
Consider mapping to <a href="https://en.wikipedia.org/wiki/CIELAB_color_space" rel="nofollow noreferrer">Lab*</a> colorspace and using that for comparisons.</p>

<p>It is slightly tricky for a naive caller to correctly pass in <code>area</code>,
so it warrants mention in the docstring you're going to write,
or <em>at least</em> in a comment.
Similarly for the <code>modification</code> signature.
Consider <a href="https://en.wikipedia.org/wiki/Design_by_contract" rel="nofollow noreferrer">raising an error</a> if <code>c1 &lt; c2</code> or <code>r1 &lt; r2</code> does not hold.</p>

<p>The <code>l, r</code> identifiers are well chosen,
and I eventually puzzled out their meaning,
but I wouldn't mind a comment mentioning "left, right",
as I kept thinking in terms of "row".
I also wouldn't mind seeing comments explaining the need for each <code>reshape()</code>.</p>

<p>If speed is a concern, then figuring out how to get <code>modification()</code>
to broadcast values to a sub-rectangle would be the thing to focus on.</p>

<p>The saturating aspect of <code>[2, 0, 0]</code> is slightly surprising,
please comment on it, and how it deliberately interacts with <code>clip()</code>.
Also, the list is not pythonic, this should definitely be the tuple <code>(2, 0, 0)</code>.
A more descriptive name, perhaps <code>red_modification</code>, would be appropriate.</p>

<p>Protecting <code>def modification</code> so <code>import</code> won't see it
<em>kind of</em> make sense, but is a little weird.
You don't want that example to be part of your public API, that's fine.
But consider using <code>def _modification</code> in the usual way,
so the <code>__main__</code> clause is just a one-liner.</p>

<p>Well, OK, two lines, as the magic tuple <code>(36, 35, 30)</code>
needs a name like <code>dark_gray</code>.</p>

<p>Looks good, ship it!</p>
    </div>