<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The code</h1>

<p>Before switching to a better algorithm, let's polish the code first. Almost every line of your code can be improved.</p>

<ol>
<li><p>Get rid of <code>#define ll long long int</code>. This is a standard way to lower the quality of your code. If you mean <code>long long</code>, use <code>long long</code>.</p></li>
<li><p>Qualify names from the <code>std</code> namespace with <code>std::</code>.</p></li>
<li><p>Make the parameter <code>temp</code> a const reference (<code>const std::vector&lt;long long&gt;&amp; temp</code>). Copying a vector is expensive.</p></li>
<li><p>Remove the unnecessary parameter <code>n</code>, which can be calculated with <code>temp.size()</code> if I correctly understand the code.</p></li>
<li><p>Avoid declaring a bunch of variables at the start of a scope, which makes it hard to follow the logic of the code.</p></li>
<li><p>Be consistent with your spacing:</p>

<ul>
<li><p>insert a space after a control keyword, and remove whitespace immediately enclosed by parentheses: <code>if (max &lt; len)</code>, not <code>if( max == 1 )</code>;</p></li>
<li><p>insert a space around <code>=</code>: <code>mymax = -1</code>, not <code>count=0</code>;</p></li>
<li><p>insert a space around binary operators: <code>flag == 0</code>, <code>i &lt; n</code>, <code>temp.begin() + maxIndex + max</code>, not <code>flag==0</code>, <code>i&lt;n</code>, or <code>temp.begin()+maxIndex+max</code>.</p></li>
</ul></li>
<li><p>Remove all trailing whitespaces (whitespace characters at the end of each line).</p></li>
<li><p>Always use prefix <code>++</code> instead of postfix <code>++</code> in a discarded-value expression.</p></li>
<li><p>You are using <code>long long</code> for two different purposes: the value type, and the index type. Use <code>std::size_t</code> or <code>std::vector&lt;long long&gt;::size_type</code> for the second, and templatize the first (or at least make a type alias to it). In fact, restricting yourself to <code>std::vector</code> is not necessary — any container will do.</p></li>
</ol>

<h1>The algorithm</h1>

<p>The better algorithm with <span class="math-container">\$\operatorname{O}(n)\$</span> time complexity is described in <a href="https://codereview.stackexchange.com/a/235547/188857">Joop Eggen's answer</a> — scan the sequence and find the maximum length and count the subsequences simultaneously. Standard algorithms can be of great help here to simplify the code and avoid manual loops. For example, <a href="https://en.cppreference.com/w/cpp/algorithm/is_sorted_until" rel="nofollow noreferrer"><code>std::is_sorted_until</code></a> can be used to find contiguous increasing subsequences.</p>

<p>Here's how I'd put the whole thing together:</p>

<pre><code>template &lt;class RandomIt, class Compare = std::less&lt;&gt;&gt;
auto count_longest_sorted_subsequences(RandomIt first, RandomIt last, Compare comp = {})
{
    using Diff = typename std::iterator_traits&lt;RandomIt&gt;::difference_type;
    Diff size{};
    Diff count{};
    for (auto it = first; it != last;) {
        first = std::exchange(it, std::is_sorted_until(first, last, comp));
        if (it - first == size) {
            ++count;
        } else if (it - first &gt; size) {
            size = it - first;
            count = 1;
        }
    }
    return count;
}
</code></pre>

<p>Usage example:</p>

<pre><code>std::array arr{2, 7, 1, 8, 2, 8, 1, 8, 2, 8};
assert(count_longest_sorted_subsequences(arr.begin(), arr.end()) == 5);
</code></pre>
    </div>