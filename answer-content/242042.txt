<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Avoid overloading the == operator (and other operators) as this is a tricky business, and best avoided - so I wouldn't go down that route.</p>

<hr>

<p>OK next the code.</p>

<h1>Enums and Integer representations</h1>

<p>If you can alter the Individual and IndividualDm classes.</p>

<p>Add something that returns the integer value as the Enum...</p>

<p>Simple version: Models.Database.Individual</p>

<pre><code>public int Status {get; set;} // Assume this is the integer status value already implemented.

public IndividualStatus StatusType =&gt; (IndividualStatus)Status;
</code></pre>

<p>Simple version: Models.Domain.IndividualDm</p>

<pre><code>public StatusModel Status {get;set;}

public IndividualStatus StatusType =&gt; (IndividualStatus)Status.Id;

</code></pre>

<p>If don't have the control (or any change the Status int may not exist as an Enum), then an Extension method or a simple conversion factory, would do. Happy to expand on this, if you want.</p>

<hr>

<h1>Design-Patterns</h1>

<p>Your business logic is asking a bunch of questions, that I feel should be better represented in your domain models, and logical flow (e.g. Services)</p>

<p>For me, there is a lot of missing business logic information, and so this is just a earlier opinion, and based on a lot of assumptions.</p>

<p>Basic Rules / Model Questions</p>

<ol>
<li>The storedIndividual.StatusType must be InProgress to be allowed to continue? (This is an assumption, as the code doesn't actually say this).</li>
<li>Has the Status changed?</li>
<li>Act on the change, with different processes.</li>
<li>Store the change / send an event of the change</li>
</ol>

<p>Services type logic that runs the code...</p>

<pre><code>var storedIndividual = _individualStore.GetById(request.Id);

// This is just a simple inversion of InProgress to make it a bit more flexible, see implementation in class
if (storedIndividual.IsClosed()) {
  return; // Or throw, or some specific error code
}

// Assumption, no action is need if the status hasn't changed.
var hasStatusChanged = storedIndividual.HasStatusChanged(individual.StatusType );
if (!hasStatusChanged) {
  return; // Or throw, or some specific error code
}

if (individual.StatusType == IndividualStatus.Submitted) {
  // SetFinishedIndividualFormValues
  // SendSubmittedFileEmail
  return;
}

if (individual.StatusType == IndividualStatus.Disqualified) {
  // SetFinishedIndividualFormValues
  return;
}

// SendStatusChange
// NB. It feels natural to me to call storedIndividual.SetStatus(individual.StatusType), here - but it really depends.

</code></pre>

<pre><code>namespace Models.Database{

  public class Individual {
    ...
    // Assumption, Individual represents a record case, such as a mortgage application (?)
    // This could be expand further if there are other status that could allow it to be open.
    public bool IsClosed =&gt; this.StatusType!= IndividualStatus.InProgress; 

    public bool HasStatusChanged(IndividualStatus newStatus) {
        return this.StatusType != newStatus;
    }
  } 


</code></pre>
    </div>