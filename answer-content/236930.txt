<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unnecessary type checking</h1>

<p>In <code>update_h_params</code>, you write</p>

<pre><code>if type(h_params) != dict:
            raise TypeError('The argument must be a dictionary.')
</code></pre>

<p>In Python, we don't care about the actual types of objects, only the interfaces they offer. This ideology is often referred to as <a href="https://stackoverflow.com/questions/4205130/what-is-duck-typing">Duck Typing</a>, stemming from the notion that if something "walks like a duck, and quacks like a duck, its probably a duck." In this method you don't actually care whether or not the user passed a <code>dict</code>, only that whatever they gave you implements an <code>items()</code> method that returns an iterator of tuples. Your end users may very well have a reason to be using a different flavor of dictionary down the road, such as an <code>OrderedDict</code> or a <code>defaultdict</code>, which would be needlessly rejected by the current implementation.</p>

<h1>Using <code>__methods</code> as "private" methods</h1>

<p>The double-underscore syntax for method names is <a href="https://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private">not intended for creating "private" methods</a>. Rather, it's a tool to add namescrambling to method names so that subclasses don't accidentally overwrite a critical method. This doesn't appear to apply to your class.</p>

<p>To mark an attribute or method as "private", a single underscore will suffice.</p>

<h1>Re-inventing logging</h1>

<p>Each time you write</p>

<pre><code>if self.verbose:
   print('&lt;some_string&gt;')
</code></pre>

<p>could be more idiomatically replaced by using the standard <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer"><code>logging</code></a> module. This has the added benefit of being much more configurable and will lead to fewer surprises when other developers try to use your code and receive unexpected writes to <code>stdout</code>.</p>

<h1>Duplicate constants</h1>

<p>I'd advise replace the attribute </p>

<pre><code>self.AVAILABLE_DIST_F = ["L1_norm", "L2_norm"]
</code></pre>

<p>with a single class attribute</p>

<pre><code>class kMeans:
    AVAILABLE_DIST_F = ["L1_norm", "L2_norm"]
    ...
</code></pre>

<p>As currently implemented, a new list will be created for each <code>kMeans</code> instance you create, which is a minor, but unnecessary, memory overhead. This also would more clearly convey that <code>AVAILABLE_DIST_F</code> does not change on an instance-by-instance basis.</p>

<h1>Naming Conventions</h1>

<p>Per <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">PEP-8</a>, it is recommend that class names use the <code>CapsWords</code> convention. Therefore, you may wish to rename <code>kMeans</code> to <code>KMeans</code>.</p>

<h1>TMI in Docstrings</h1>

<p>In your docstring for <code>kMeans</code>, you document each of the public methods your class provides, along with a short synopsis of their functionality. It is worth noting that standard Python documentation generating tools, such as <a href="https://www.sphinx-doc.org/en/master/" rel="nofollow noreferrer">sphinx</a>, will create blocks such as this automatically, making this section somewhat unnecessary. In addition, by documenting methods in two separate locations, you make your class liable to have its methods change without the associated documentation being updated along with them. I'd advise documenting your method in their own respective docstrings and restricting the class-level docstring to the high-level overview of your class' interface.</p>

<h1>Using Type Hints</h1>

<p>You currently only note the expect types of various method parameters in docstrings. This information can be more effectively conveys by adding <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">type hints</a> to the methods themselves. For example, you <code>update_h_params</code> method could be re-written as</p>

<pre><code>from typing import Dict, Any

def update_h_params(self, h_params: Dict[str, Any]):
    ...
</code></pre>

<p>Using this feature helps many editors and static type checking tools analyze your program more appropriately. Both PyCharm and <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> fully support these annotations. </p>
    </div>