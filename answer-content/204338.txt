<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here you are using a lot of threads - are you sure it is needed? Perhaps try and implement a divide and conquer pattern.
Try and have a look at this example :
<a href="https://www.justsoftwaresolutions.co.uk/threading/multithreading-in-c++0x-part-8-futures-and-promises.html" rel="nofollow noreferrer">parallel_for_each</a></p>

<pre><code>//*************************
//
//parallell for-each version
//*************************
// code recursively divides up the range into smaller and smaller pieces. 
// Obviously an empty range doesn't require anything to happen, and a single-point range just requires calling f on the one and only value. 
// For bigger ranges then an asynchronous task is spawned to handle the first half, and then the second half is handled by a recursive call.
//
template&lt;typename Iterator,typename Func&gt;
void parallel_for_each(Iterator first,Iterator last,Func f)
{
    ptrdiff_t const range_length=last-first;
    if(!range_length)
        return;
    if(range_length==1)
    {
        f(*first);
          return;
    }

    Iterator const mid=first+(range_length/2);

    std::future&lt;void&gt; bgtask = std::async(&amp;parallel_for_each&lt;Iterator,Func&gt;,first,mid,f);
    try
    {
        parallel_for_each(mid,last,f);
    }
    catch(...)
    {
        bgtask.wait();
        throw;
    }
    bgtask.get();   
}
</code></pre>
    </div>