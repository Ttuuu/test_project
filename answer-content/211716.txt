<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've already made a decent effort to <strong>make your types immutable</strong> by setting its properties in a constructor and providing get-only access, not set - like you have with <code>Location.Name</code> for example. This is good practice whenever it is reasonable to do so (because, among other things, this means you can pass objects around without ever worrying that something else will change their state unexpectedly). However, I note that <code>Location.Exits</code> is a public field, which means it could be replaced with another array while the program is running - but the house is supposed to be fixed in structure. It would be better as a get-only public property, passed as another parameter in the constructor.</p>

<p>More subtly, not only could someone do something like <code>currentLocation.Exits = ...</code>, which the above advice would prevent; someone could also do <code>currentLocation.Exits[0] = ...</code>, and again they are changing something that is supposed to be fixed. (When I say "someone", understand that that could mean "you, by mistake", especially in a larger more complex program). Since you mentioned you have been learning about <strong>interfaces</strong>, the public get accessor for <code>Location.Exits</code> should be an <code>IEnumerable&lt;Location&gt;</code>, which lets things enumerate through the exits array to see what they are, but not change them. (<em>If you've not used generics yet, don't worry too much about this for now</em>).</p>

<p>So it would end up like this:</p>

<pre><code>abstract class Location
{
    public Location(string name, Location[] exits)
    {
        Name = name;
        _exits = exits;
    }

    public string Name { get; }

    private Location[] _exits;
    public IEnumerable&lt;Location&gt; Exits =&gt; _exits;

    // ...
}
</code></pre>

<p>(<em>Secretly, I'm not super-happy about passing in exits as an array, either. Again, someone could change that array after creating the <code>Location</code>. I'd rather pass in exits as an <code>IEnumerable&lt;Location&gt;</code> and copy them into a new array or other container type private to the <code>Location</code>. But that raises some design and object ownership questions that aren't too relevant here so let's not worry about that</em>).</p>

<hr>

<p>Digging deeper on locations/exits - a couple of things here, which are probably too large a change to worry about for this exercise, but something to think about in future.</p>

<p>Firstly, <code>OutsideWithDoor</code> inherits from <code>Outside</code> and implements the <code>IHasExteriorDoor</code> interface. This works for your purposes, but means the question of whether or not an exit from one location to the next has a door depends on the type of the locations, whereas logically speaking it's a property of the connection between them. (It's also limited to only one door per location, and a few other tricky bits - <strong>prefer to avoid unnecessary inheritance</strong>, and <strong>prefer composition over inheritance</strong>). So, I would suggest a <code>LocationConnection</code> type, where <code>Location</code>s are joined by <code>LocationConnection</code>s rather than directly to other <code>Location</code>s, and a <code>LocationConnection</code> can either have a door or not (a boolean property).</p>

<p>Secondly, <code>Location</code> exits are bi-directional, that is, if you can go from one location to another, you can always go back, too. That makes sense (if you go from the kitchen to the dining room, it'd be very odd to be unable to go back to the kitchen!) but depends on your initialization code always getting that right, which is a common source of bugs. (What if the building was a mansion, with a hundred rooms!?) This problem could go away if that <code>LocationConnection</code> type were well-implemented, someone could travel along it in either direction and it only needs to be coded once. Something to bear in mind in future: <strong>whenever you have to remember to write BA if you write AB, someone's going to forget to do it</strong>. Make their (your) lives easier!</p>

<p>Introducing that new type may be a bigger change than is really justified for this code review, but it could solve a couple of potential problems.</p>

<hr>

<p>A couple of very minor comments on <code>ShowGoThroughExteriorDoorButton</code>. Firstly, the name of the method is OK, but it sounds like it's <em>always</em> going to show that button. I'd call it <code>ShowOrHide...</code>, though that's just my personal preference. Also, the if-statement in that method is a bit inelegant. I'd write simply:</p>

<pre><code>GoThroughExteriorDoorButton.Visible = (location is IHasExteriorDoor);
</code></pre>

<p>...which gets rid of those naked <code>true</code> and <code>false</code> values, and also gets rid of that ugly <code>return</code> halfway through the method. In general, <strong>prefer methods to have a single point of exit, at the end</strong>, though this isn't always practical, especially when you start to use exceptions.</p>

<hr>

<p>Always specify <strong>access modifiers</strong>, especially <code>private</code> for all those fields on the <code>ExploreTheHouseForm</code>. Also, a common convention for <strong>private fields</strong> is to prefix them with an underscore, e.g. <code>private Location _currentLocation;</code>, though this is not universally followed - I like it because it helps make obvious what's a parameter or local variable, and what's a member variable.</p>
    </div>