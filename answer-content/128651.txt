<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first, purely aesthetic impression that strikes me is the level of nesting in your main <code>crawl</code> function. Consider extracting the core of that function. This might only be to a local function within <code>crawl</code>, but trying to make functions which have less than 7 (*or some fairly small number) generally makes code easier to follow.</p>

<p><a href="https://fsharpforfunandprofit.com/posts/designing-with-types-single-case-dus/" rel="nofollow">Consider wrapping primitives in single-case discriminated unions</a> to make passing variables safer. E.g. you could create a type to wrap the string url which is passed around such as:</p>

<pre><code>type Url = Url of string
</code></pre>

<p>Another option to reduce nesting is to pass a function into <code>crawl</code> which will be executed having completed the request, so would be of signature <code>DownloadResult -&gt; Url list</code> (or maybe <code>DownloadResult -&gt; Async&lt;Url list&gt;</code>) allowing you to return the set of next URLs to fetch. By doing this you've decoupled the ability to fetch a URL from what you ultimately want to do with the result. This pattern is the functional equivalent of the <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" rel="nofollow">dependency inversion principle</a>.</p>

<p>I'd question why you've chosen to write all content straight to disk then pass the file path around. Perhaps you know that you're planning on downloading large files, but I'd suggest for a first implementation it might be simpler to just pass an array of bytes or a stream around. My second thought would be to pass the response stream in the <code>DownloadResult</code>. This allows you to delegate to the handler what it's going to do with the content, rather that build that assumption into <code>crawl</code>.</p>
    </div>