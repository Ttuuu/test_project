<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>You may assume that each input would have exactly one solution. </p>
</blockquote>

<p>So there's no need to iterate over <code>num</code> twice. In fact, you won't even iterate over it for the full range, because you can return when you found the solution. </p>

<p>With the input given, I'd try this:  </p>

<pre><code>nums = [2, 7, 11, 15]
target = 9

def twoSum(nums, target):
    for i in nums:
        for m in nums[nums.index(i)+1:]:
            if i + m == target:
                return [nums.index(i), nums.index(m)]

print(twoSum(nums, target))        
</code></pre>

<p>Say <code>i + m</code> is your target twoSum, you iterate over nums for each i and then look in the rest of num if there's any <code>m</code> for which <code>i + m = target</code>, and return when found. </p>

<p><strong>Edit:</strong> This fails if you have duplicate integers in nums that add up to target, and it'll be slower if the solution is two elements near the end of nums.  </p>

<p>Also: thank you for mentioning <a href="https://leetcode.com/problems/two-sum/description/" rel="nofollow noreferrer">Leetcode</a>, it's new to me. Nice! </p>
    </div>