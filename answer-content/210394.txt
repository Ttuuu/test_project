<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with commenter @vnp, who says, "The question would greatly benefit from adding <code>getMedianWord</code> code directly. As posted, it is on the verge of being closed as hypothetical." All the interesting stuff is going on in <code>getMedianWord</code>.</p>

<p>TLDR: yep, your use of <code>pthread_create</code> and <code>pthread_join</code> looks fine.</p>

<p>However, I couldn't be sure of that without knowing the declaration of <code>getMedianWord</code>, for which I had to click through to <a href="https://github.com/richardrobinson0924/unique_words/blob/master/frequency.c#L47-L48" rel="nofollow noreferrer">frequency.c</a>:</p>

<pre><code>void *getMedianWord(void *vargp) {
    char *filename = *(char **) vargp;
</code></pre>

<p>Okay, this is fine.</p>

<hr>

<p>However, you could do better by passing the char pointer itself as your <code>void*</code> argument, instead of passing the <em>address</em> of the pointer. That is, if you rewrote your <code>getMedianWord</code> function —</p>

<pre><code>void *getMedianWord(void *vargp) {
    const char *filename = vargp;
</code></pre>

<p>— then you could rewrite your <code>main</code> loop correspondingly —</p>

<pre><code>for (int i = 1; i &lt; argc; ++i) {
    pthread_create(&amp;tid[i], NULL, getMedianWord, argv[i]);
}
</code></pre>

<p>Notice that I've made two other cosmetic changes here. First, I put braces around every compound statement; see <a href="https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/" rel="nofollow noreferrer">goto fail</a> for why. Second, I took your complicated <code>actual_args</code>/<code>i + 1</code> logic and turned it into an idiomatic loop running over the half-open range <code>[1, argc)</code>. Use the most common idioms you can! It saves your reader some brain cells.</p>

<p>The functional change here is replacing <code>&amp;argv[...]</code> with simply <code>argv[...]</code>. (The cast to <code>void*</code> is not required in C. And likewise the cast back from <code>void*</code> inside <code>getMedianWord</code> is not required in C, although it would be required if you wanted to port this code to C++.)</p>

<hr>

<p>I won't very closely review the rest of <code>getMedianWord</code> because you didn't post it.</p>

<p>It is definitely <strong>not</strong> thread-safe, though; there's a data race on <code>file_index</code>. Look up the <code>_Atomic</code> keyword. </p>

<hr>

<p>I notice that <code>getMedianWord</code> spends most of its time <em>reading from files</em>, which means that it's not likely to parallelize very well. You'll end up being bounded by the speed of your file-reading. Splitting up those reads into different threads doesn't achieve any speedup; in fact it probably <em>wastes</em> time because now you have to wait for a context-switch between each pair of reads. (OTOH, the files will be buffered at the stdio level and also probably brought into memory at the OS level, so maybe I'm wrong about its hurting. I think I'm right about its not helping, though.)</p>

<p>Try reading all the files into memory first, and then splitting up <em>just the computational processing</em> of those files into multiple threads.</p>

<p>In other words, think of "the filesystem" as a contended resource which will destroy your parallelism if everyone's trying to access it at once. (Also think of the <code>malloc</code>/<code>free</code> heap and <code>stdout</code> as contended resources. Looks like you're doing well on those fronts.)</p>

<hr>

<p>Your <code>WordArray word_array[MAX_WORDS];</code> is a <a href="https://en.cppreference.com/w/c/language/array#Variable-length_arrays" rel="nofollow noreferrer">variable-length array</a>, which might blow up your (thread's) stack if <code>MAX_WORDS</code> is increased to, say, <code>2000000 / sizeof(WordArray)</code> — that is, if <code>MAX_WORDS * MAX_STRING &gt;= 2000000</code>. So watch out for that.</p>
    </div>