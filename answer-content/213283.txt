<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While your goal may be to "make it so the reader can understand the current method they are reading", I actually found it very confusing to read the code.</p>

<p>Consider:</p>

<pre><code>from games_engine import GamesEngine
from report_on_game import ReportOnGame
from report_on_many_games import ReportOnManyGames
</code></pre>

<p>Ok, so <code>games_engine</code>, <code>report_on_game</code>, and <code>report_on_many_games</code> all modules, but only one class from each module is imported to the top-level namespace; the modules themselves are not added to the top-level namespace.  Later:</p>

<pre><code>report_on_game.set_end_of_game_reporting(False)
games_engine.play_game(1000000)
report_on_many_games.report_outcome_statistics()
</code></pre>

<p>Wait.  None of those modules were imported to the top-level namespace.  What is going on???  Confusion!!!  This continues with <code>self.report_on_game</code> and <code>self.game_state</code> and <code>self.game_rules</code> and so on.  Is <code>report_on_game</code> a module name, a global variable name, or a class member???  The answer is all three!  This same name different semantics does not help readability.</p>

<p>One class per file is not the Pythonic way of doing things, and as you can see, it is causing naming confusion.  I'd recommend one file ... maybe <code>tic_tac_toe.py</code> with all 5 of your classes in that one file, and perhaps even the <code>main</code> function</p>

<hr>

<p><code>GameEngine.play_game</code> doesn't play a game.  It plays a bunch of games.  Separate this into two functions: one to play a game, and one which repeatedly calls the former to play multiple games.</p>

<pre><code>def play_game(self):

    self.game_state = GameState()
    game_in_progress = True

    while game_in_progress:
        game_in_progress = self.make_move()

    # Maybe add end-of-game reporting here.


def play_games(self, number_of_games):

    for _ in range(number_of_games):
        self.play_game()

    # Maybe add end-of-all-games reporting here
</code></pre>

<hr>

<p>Why does <code>self.make_move()</code> return <code>game_in_progress</code>?  Perhaps <code>GameState</code> should contain the <code>in_progress</code> member.  After all, whether the game is over (and even who won!), is part of the game state!</p>

<pre><code>def play_game(self):
    self.game_state = GameState()

    while self.game_state.in_progress:
        self.make_move()

    # Maybe add end-of-game reporting here.
</code></pre>

<hr>

<p><code>make_move()</code> should really be called <code>make_random_move()</code> to be clear that it is just making random moves.</p>

<hr>

<p><code>GameRules.game_over()</code> is both returning a value directly, and returning a value through an evil, secret, underhanded modifying <code>self.winning_letter</code> state variable.</p>

<p>It could simply return one of 4 values:  <code>"X"</code>, <code>"O"</code>, <code>"Tie"</code> or <code>""</code>.  An empty string, which is a <code>False</code>-ish value would indicate the game is not yet over, while the other three <code>True</code>-ish values would simultaneously indicate the game is over as well as who won.</p>

<hr>

<p>You are confusing classes for method containers, and creating classes with no data.</p>

<p>Consider <code>ReportOnGame</code>.  It has no per-instance data, just two static methods and a class variable.  There is never a reason to create a <code>ReportOnGame()</code> instance because it doesn't contain any data, and yet you create 1 million instances of it.</p>

<p>Yes, you do access <code>self.report_on_game.end_of_game_report</code> and call <code>self.report_on_game.end_of_game_reporter(...)</code>, which appears to be using an instance of the <code>ReportOnGame()</code> object, but since that instance has no instance data, you could just as easily wrote:</p>

<pre><code>if ReportOnGame.end_of_game_report:
    ReportOnGame.end_of_game_reporter(self.game_state, win_result)
</code></pre>

<p>and never created the objects.</p>

<p>But it doesn't end there.  The <code>.end_of_game_report</code> is a global variable contained in different class in a module from <code>GameEngine</code>.  Why does that foreign class &amp; module have a flag that controls what <code>GameEngine</code> does?</p>

<p>It would be (slightly) better for <code>ReportOnGame</code> to internally check the flag when reporting:</p>

<pre><code>class ReportOnGame:
    end_of_game_report = False
    #...
    @staticmethod
    def end_of_game_reporter(board, result='Its a tie'):
        if ReportOnGame.end_of_game_report:
             print(board)
             # ... etc ...
</code></pre>

<p>And then you could unconditionally call <code>ReportOnGame.end_of_game_reporter(self.game_state, win_result)</code> in <code>GameEngine</code>, without needing to reach into another class in another module to access the global variable.</p>

<p>But <code>ReportOnGame.end_of_game_reporter(...)</code> is still just a static function; it does not warrant a class.</p>

<hr>

<p>How would I re-write this?</p>

<p>As I mentioned above, it would be inside a single <code>tic_tac_toe.py</code> module.</p>

<p>End of game reporting would simply be a function:</p>

<pre><code>def end_of_game_report(board, result):
    print(board)
    if result != 'Tie':
        print(result + ' won.')
    else:
        print("Tie game.")
</code></pre>

<p><code>GameEngine</code> could have a <code>reporters</code> member, containing a list of methods to call to report the game result:</p>

<pre><code>class GameEngine:
    def __init__(self, *reporters):
        self._reporters = reporters

engine = GameEngine(end_of_game_report)
engine.play(5)
</code></pre>

<p>After each game is over, the engine would need to call all of the reporters, passing in the board state and result.</p>

<pre><code>for reporter in self._reporters:
    reporter(self._board, win_result)
</code></pre>

<p>And if you don't want a report after each game, you simply don't need to pass <code>end_of_game_report</code> in the list of reporters.  If it is not in the list, it doesn't get called.  No boolean flags required.</p>

<p>As for <code>ReportOnManyGames</code>, the 3 static variables can be replaced with a counter dictionary.  An object of that class can be made callable, so it can be used as a reporter, above.</p>

<pre><code>class ReportOnManyGames:

    def __init__(self):
        self._counts = { 'X':0, 'O':0, 'Tie':0 }

    def __call__(self, board, result):
        self._counts[result] += 1

    def report_outcome_statistics(self):
        total_games = sum( self._counts.values() )

        print('Proportion of X wins: {:5.2f}%'.format(self._counts['X'] / total_games * 100))
        # ... etc ...
</code></pre>

<p>Now you can create a callable object which keeps track of the total wins and ties.</p>

<pre><code>summarizer = ReportOnManyGames()

engine = GameEngine(summarizer)    # omit end_of_game_report, since we have a million games
engine.play(1_000_000)

summarizer.report_outcome_statistics()
</code></pre>
    </div>