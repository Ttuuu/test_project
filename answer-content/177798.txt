<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not a review of the coding style and syntax, but of the algorithm used. </p>

<h2>Permutations and randomised rule based selection.</h2>

<p>A random search for a set of permutations is never a good method, especially if the set of previous results reduce the size of the set of valid permutations for the next set.</p>

<h3>Random solution guessing</h3>

<p>Your problem is finding one of a set of solutions. There are only a finite set of possible solutions. </p>

<p>Your code uses a random guess method. </p>

<p>Each iteration you randomly guess a possible combination then test its validity. Because the set of valid solutions gets smaller each year, your code needs to make more guesses as the number of valid solutions gets smaller but the set you are guessing in remains the same size.</p>

<p>This method also has been limited (to 50) and thus you could always have a chance of not finding a solution. For the first year there is a relatively small chance of not finding a solution, but this grows quickly. In three years you will need to (on average) run the code 5 times to find a solution. </p>

<p>Also the limit you must surely have seen is that after 4 years there are no more possible solutions, as everyone has given to everyone. This should be obvious from the code as well, but it still tries to guess a solution where there is none.</p>

<p>There is no need for the code to throw an error. The solutions are known and fixed, so there is no need to guess.</p>

<h3>Systematic solution computation.</h3>

<p>To do this effectively you need to know the set of all valid solutions. Once you have that set you just randomly select one. There is no need to search for valid solutions as you are only selecting from known valid values.</p>

<p>Pre-computation of the set of valid solutions has a limit, as the possible number of solutions quickly grows with the complexity of a solution. For 6 people there are 80 solutions that are valid, for 10 people that is approaching a million. For 20 people you need to start applying some serious optimisation and storage compression to use this method.</p>

<h3>Abstraction</h3>

<p>If you compute them systematically and hold them as an abstracted data set, e.g. each person is a letter <code>A,B,C,D,E,F</code> that identifies them both as an entry in the data struc and a position in the abstracted data, e.g. <code>"A"</code> is 1st person in a solution string and the first person in the <code>people</code> array. A solution for a particular year is a string e.g. <code>"CDEFAB"</code> which means person <code>A</code> gives to <code>C</code>, person <code>B</code> gives to <code>D</code>, <code>C</code> to <code>E</code> and so on.</p>

<p>If you ignore the previous year the possible solutions are only 80.</p>

<h3>Computing permutations.</h3>

<p>For your data the following is all valid solutions.</p>

<pre><code>var allValidSolutions = "DCFEBA,DCFEAB,DCEFBA,DCEFAB,ECFADB,ECFABD,ECFBDA,ECFBAD,ECAFDB,ECAFBD,ECBFDA,ECBFAD,FCEADB,FCEABD,FCEBDA,FCEBAD,FCAEDB,FCAEBD,FCBEDA,FCBEAD,CDFEBA,CDFEAB,CDEFBA,CDEFAB,EDFACB,EDFABC,EDFBCA,EDFBAC,EDAFCB,EDAFBC,EDBFCA,EDBFAC,FDEACB,FDEABC,FDEBCA,FDEBAC,FDAECB,FDAEBC,FDBECA,FDBEAC,CEFADB,CEFABD,CEFBDA,CEFBAD,CEAFDB,CEAFBD,CEBFDA,CEBFAD,DEFACB,DEFABC,DEFBCA,DEFBAC,DEAFCB,DEAFBC,DEBFCA,DEBFAC,FEBADC,FEBACD,FEABDC,FEABCD,CFEADB,CFEABD,CFEBDA,CFEBAD,CFAEDB,CFAEBD,CFBEDA,CFBEAD,DFEACB,DFEABC,DFEBCA,DFEBAC,DFAECB,DFAEBC,DFBECA,DFBEAC,EFBADC,EFBACD,EFABDC,EFABCD".split(",");
</code></pre>

<p>This was created with the following code. <strong><em>Note</em></strong> this is a brute force method. You should do some research into optimal methods if you need to include more than a dozen people.</p>

<pre><code>function permutations2Of(chars) {
    var i,j;
    const count = chars.length;
    const sets = [];
    for (i = 0; i &lt; count; i ++) {
        for (j = 0; j &lt; count; j ++) {
            if (j !== i) { sets.push(chars[j] + chars[i]) }
        }
    }
    return sets;
}
function isSetValid(set, ofSet) {
    var i = 0;
    while (i &lt; ofSet.length) {
        if (set.indexOf(ofSet[i ++]) === -1) { return false }
    }
    return true;
}
function findUnique(arr, ofSet, result = [], index = 0, current = "") {
    var i;
    const testSet = index === arr.length - 1; 
    for (i = 0;  i &lt; arr[index].length; i ++)  {
        const aSet = current + arr[index][i];
        if (testSet) {
            if (isSetValid(aSet, ofSet)) { result.push(aSet) }
        } else {
            result = findUnique(arr, ofSet, result, index + 1, aSet);
        }
    }
    return result;
}
const AB = permutations2Of("CDEF");
const CD = permutations2Of("ABEF");
const EF = permutations2Of("ABCD");
const combos = findUnique([AB, CD, EF], "ABCDEF");
</code></pre>

<p>This is based on the smallest unit being a couple (e.g. <code>AB</code> is the first and second person, and they can give only to persons <code>"CDEF"</code>)</p>

<p>It calculates all the possible permutations for each couple and then calculates all the possible permutations for all couples.</p>

<p>The  function <code>findUnique</code> uses recursion to create all possible solutions and then calls the function <code>isValidSet</code> to test if the solution should be kept.</p>

<p>The set of solutions should only be calculated once; once computed it can be retrieved from a data store and filtered when there is a need for extra rules to be applied - e.g. last years results.</p>

<h3>Random solution without the guesswork.</h3>

<p>Now it is very easy to find the first years arrangement.</p>

<pre><code>var secretSantas = combos[Math.random() * combos.length | 0];
</code></pre>

<p>And convert to your data:</p>

<pre><code>const baseCode = "A".charCodeAt(0);
secretSantas.split("").forEach((id, index) =&gt; {
    const personIndex = id.charCodeAt(0) - baseCode;
    people[index].current = people[personIndex];
});
</code></pre>

<h3>Additional rules.</h3>

<p>The above does not consider the previous year's gifts, but that can be stored as the abstracted string e.g. <code>"DEFGAB"</code>. As there are only 4 people for each person to give to there are only 4 years before you are forced to repeat. If you limit the repeat only to 4 years then after the 3<sup>rd</sup> year everyone will know who is giving to who (if anybody bothered to keep track that is).</p>

<p>So the better rule is to just not repeat two years. You can't give to the person you gave to last year.</p>

<p>Then you can use a filter on the <code>combos</code> array to eliminate any invalid combination due to previous years results.</p>

<pre><code>const lastYearsCombo = "CDEFAB".split("");
const comboFiltered = combos.filter(combo =&gt; {
     for (var i = 0; i &lt; lastYearsCombo.length; i++) {
         if (combo[i] === lastYearsCombo[i]) { return false }
     }
     return true;
});
</code></pre>

<p><code>comboFiltered</code> will only have 17 possible combinations as the rest have been eliminated due to the previous year. The random selection is still the same.</p>

<pre><code>var secretSantas = comboFiltered[Math.random() * comboFiltered.length | 0];
</code></pre>
    </div>