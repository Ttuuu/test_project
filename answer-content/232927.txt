<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Testing elegance</h2>
<p>Testing ignores the method and only focuses on the result. If however you add testing that includes criteria that focus on what you may call the elegant parts of the solution this can help you create better solutions.</p>
<p>Personally elegance is a fit, performant and lean, in that order.</p>
<ul>
<li>Fit, it <em>must</em> pass all test.</li>
<li>Performant it must be as fast and use as little memory as possible.</li>
<li>Lean, the code must be as compact and neat as possible.</li>
</ul>
<p>You can test all these and iterate to a more elegant solution. However the last point is subjective and this can be hard to test. Personally I measure lean as number of lines (including empty lines) and the number of tokens used.</p>
<p>The last to criteria are always comparative, one solution compared to another as they have no value in isolation.</p>
<p>The  sample solution is in my book is far from elegant</p>
<ul>
<li>It is overly verbose, names too long, not using shorthand styles (short circuiting and decremented operators) contains redundant length check at start.</li>
<li>Poor use of comparisons as it forces type checking for each comparison.  <code>&gt;=</code> should use <code>!== 0</code> as its quicker.</li>
<li>Has a wasted variable. There is no need for the variable <code>lengthA</code></li>
</ul>
<p>One can rewrite the function as</p>
<pre><code>function bubbleDown(arr) {
    var wIdx = arr.length, rIdx = wIdx;
    while (rIdx--) { arr[rIdx] &amp;&amp; (arr[--wIdx] = arr[rIdx]) }
    while (wIdx--) { arr[wIdx] = 0 }
}
</code></pre>
<p>Slightly faster by avoiding the type checks</p>
<pre><code>function bubbleDown(arr) {
    var w = arr.length, r = w;
    while (r-- !== 0) { arr[r] !== 0 &amp;&amp; (arr[--w] = arr[r]) }
    while (w-- !== 0) { arr[w] = 0 }
}
</code></pre>
<p>And slower but lean. Sucks that <code>Array.fill</code> is so much slower than a while loop.</p>
<pre><code>function bubbleDown(arr) {
    var w = arr.length, r = w;
    while (r--) { arr[r] &amp;&amp; (arr[--w] = arr[r]) }
    arr.fill(0, 0, w);
}
</code></pre>
<p>The first two are up to 10% faster (last 30% slower) and easier to read and maintain (if that was important as having passed all tests it never needs to be read or changed), and all 3 are elegant.</p>
    </div>