<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>from_iterable</code></h1>

<p>Based on my answer to <a href="https://codereview.stackexchange.com/a/232694/123200">this</a> linked list question</p>

<pre><code>def from_iterable(iterable: Iterable[T]) -&gt; Tuple[_Node[T], _Node[T], int]:
    """Constructs a node-list from an iterable.
    Returns a tuple of (head, last_node, list_length). head and last_node will be None if iterable is empty."""
    it = iter(iterable)

    try:
        head = current = _Node(next(it))
        count = 1
    except StopIteration:
        return None, None, 0

    for count, t in enumerate(it, 2):
        current.tail = current = _Node(t)

    return head, current, count
</code></pre>

<blockquote>
<pre><code>n = _Node.from_iterable(range(6))
</code></pre>
</blockquote>

<pre><code>(
  _Node(data=0, tail=_Node(data=1, tail=_Node(data=2, tail=_Node(data=3, tail=_Node(data=4, tail=_Node(data=5, tail=None)))))),
  _Node(data=5, tail=None),
  6
)
</code></pre>

<h1><code>remove</code></h1>

<p>For the <code>remove</code> you can use 2 ways to make it more clear: you can do the check whether the head is the element to remove outside of the loop, and use the <code>pairwise</code> itertools recipe to iterate over the node 2 by 2</p>

<pre><code>from itertools import tee
def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)



def remove(self, elem: T): 
    if self.head.data == elem:
        self._pop_head()
        self._size -= 1
        return
    for first, second in pairwise(self._node_iter()):
        if second.data == elem:
            first.remove_next()
            self._size -= 1
            return
    raise ValueError(f"{elem} not in list.")
</code></pre>

<p>Or you can use <code>pop</code> This results in cleaner code, but 2 iterations until the index</p>

<pre><code>def remove(self, elem: T):
    for i, value in enumerate(self):
        if value == elem:
            self.pop(i)
            return
    raise ValueError(f"{elem} not in list.")
</code></pre>
    </div>