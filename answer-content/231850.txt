<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Constructor injection is indeed preferable, but it's not the only way to inject dependencies - <em>property injection</em> is just as valid, and in the case of a WPF <code>Window</code>, the only dependency that should be injected, is the ViewModel - and <code>Window</code> already has a property exposed for that: <code>DataContext</code>.</p>

<p>Assuming a <em>Model-View-ViewModel</em> architecture, I cannot think of a single valid reason to constructor-inject anything into a View. The role of the View in MVVM is to be nothing more than a simple I/O device <em>presenting</em> data to the user, and exposing means for that user to provide inputs.</p>

<p>That means a View needing dependencies injected is highly suspicious, because it suggests that the View is at least partly doing the ViewModel's job, and this is going to make that logic much more difficult to test than if it were done elsewhere: the idea behind separating the View from the ViewModel isn't just to leverage the powerful XAML data bindings, it's also to get as much of the <em>not-stricly-presentation</em> concerns out of the View so that they can be unit-tested without popping up a UI.</p>

<p>Now, as I said in an earlier comment, maybe I'm doing this wrong, but I've never had issues with this approach: I remove the <code>StartupUri</code> in the <code>App.xaml</code> markup, and then edit <code>App.xaml.cs</code> to override <code>OnStartup</code> as follows:</p>

<pre><code>protected override void OnStartup(StartupEventArgs e)
{
    base.OnStartup();
    // if you're using an IoC container, this is where you set it up:
    // ...

    // if you're using an IoC container, this is where you resolve your VM's dependencies:
    // ...
    // otherwise, just new it up:
    var vm = new MainWindowViewModel(/*ctor-inject dependencies manually here*/);
    var window = new MainWindow { DataContext = vm };
    window.ShowDialog();
}
</code></pre>

<p>The IoC configuration code should go into its own method (could be in <code>App.xaml.cs</code>, or in some static helper), of course. But the point remains: the view doesn't have any dependencies, other than its view model.</p>

<p>The <code>MainWindow.xaml.cs</code> code-behind might look like this:</p>

<pre><code>public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContextChanged += MainWindow_DataContextChanged;
    }

    MainWindowViewModel ViewModel =&gt; DataContext as MainWindowViewModel;

    private void MainWindow_DataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
    {
        var vm = ViewModel;
        if (vm != null)
        {
            vm.Close += HandleViewModelCloseCommand;
        }
    }

    private void HandleViewModelCloseCommand(object sender, EventArgs e)
    {
        Close();
    }
}
</code></pre>

<p>Everything else belongs in the ViewModel: any <code>ICommand</code> you might want to inject, any service, unit-of-work/repository, "business logic" worker objects - none of these are dependencies of the window itself.</p>

<p>Since a WPF window needs no dependencies, the base premise falls apart, and all that code can be deleted.</p>
    </div>