<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without looking too deeply into it, a few things immediately pop out:</p>

<ul>
<li>This class is likely too large with its ~250 lines of code.</li>
<li>It has quite a bit of internal state, stored in 10 instance variables.</li>
<li><a href="http://php.net/manual/en/class.sessionhandlerinterface.php" rel="nofollow noreferrer">SessionHandlerInterface</a> requires implementing 6 methods, but this class has an entire 17 public methods.</li>
</ul>

<p>It's likely doing several things that could be extracted to other classes or functions. A good candidate for extraction is the <code>create_sid()</code> function. It seems to me that this has been taken from some 3rd party website or library, as its dash_separated_name doesn't fit in with other camelCasedNames in this class.</p>

<p><strong>1.</strong> Replying to your comment:</p>

<blockquote>
  <p>For me, since everything in this class deals with sessions and how they are handled [--], doesn't it make sense to keep them together [--].</p>
</blockquote>

<p>I guess it comes down to an age-old question: which criteria should you use for splitting up your code to modules/classes/functions/etc?</p>

<p>A good guideline to follow, is the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>, which states:</p>

<blockquote>
  <p>A class should have only one reason to change.</p>
</blockquote>

<p>I would expect MySQLSessionHandler to change when you need to change something in the relationship of how you're storing the session data to MySQL database.</p>

<p>However I would not expect changing how session ID is generated to require a change in MySQLSessionHandler. The SID does not have much to do with MySQL - you might use the same ID generator for FileSessionHandler or PostgresSessionHandler.</p>

<p><strong>2.</strong> Replying to another comment:</p>

<blockquote>
  <p>[--] decided to add getters in the case that a user would want some sort of external control.</p>
</blockquote>

<p>Follow the <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">You ain't gonna need it</a> principle:</p>

<p>Don't add methods/properties to a class just-in-case. Have a clear purpose and clear plan how you'd expect your class to be used. Unless you're really sure, it's better to leave it out. Less is more.</p>

<p>Design first for your own specific use case. Leave out everything you don't actually need. Then try to use it in another project - see if it works as is, or do you need to improve it somehow. Only after having found it useful in several places of your own, consider sharing it with a wider audience.</p>
    </div>