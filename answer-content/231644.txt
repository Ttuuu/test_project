<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With 1719 numbers in <code>big_A</code>, <code>S(big_A)</code> will have 1478340 numbers, and <code>S(S(big_A))</code> will have over 1 trillion (1092745316970) numbers.  Adding up that many numbers will take a significant amount of time.</p>

<p>Most of the numbers are the same.  <code>S(S([3,2,1]))</code> has 21 numbers, and with a sum of 58, a lot of those numbers will be <code>3</code>.  If you can figure out how many numbers are <code>3</code>â€™s, you could multiply instead of add, saving significant time.</p>

<p>Consider just the maximum value in the input to the transform.  It immediately dominates the two values in the next row, and three in the next row, and so on until it reaches either edge of the output rows:</p>

<pre><code>*** *** *** max *** *** *** *** *** ***
  *** *** max max *** *** *** *** ***
    *** max max max *** *** *** ***
      max max max max *** *** ***
        max max max max *** ***
          max max max max ***
            max max max max
              max max max
                max max
                  max
</code></pre>

<p>The sum of all of the values is <code>(4*7) * max + sum(left_side) + sum(right_side)</code>.  So, if you can find the maximum in the input, and the location of the maximum, you can divide the problem into a directly calculated chunk, and 2 sub-problems.  Recursive divide &amp; conquer, FTW.</p>

<p>Code left to student. </p>
    </div>