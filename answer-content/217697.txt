<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<p>Your code looks quite good in general, but there is always something to nitpick on, isn't it?</p>

<p>Python comes with an official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide</a>, often just called PEP8. It has quite an extensive collection of style best practices you should follow in Python.</p>

<p>I think one of the most often cited "rules" is to use <code>snake_case</code> for variable and function names. You seem to follow that partly, since your variable names are written in <code>snake_case</code> while your function names use <code>camelCase</code>. I personally prefer snake case because it blends more nicely with the rest of the Python and NumPy/SciPy names.</p>

<p>Another rule (appropriately titled <a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow noreferrer">Whitespace in Expressions and Statements</a> - <a href="https://www.python.org/dev/peps/pep-0008/#pet-peeves" rel="nofollow noreferrer">Pet Peeves</a>), I personally consider as more "essential" than the previous one, is to put a space after you have written a <code>,</code>, e.g. while listing function arguments. It helps to avoid visual clutter IMHO. E.g.</p>

<pre class="lang-py prettyprint-override"><code>p = {'mass':80.0, 'stiffness':8200.0, 'resting_length':1.0, 'gravity':9.81,
'aoa':1/5*np.pi} # aoa stands for angle_of_attack
x0 = [0, 0.85, 5.5, 0, 0, 0]
x0 = resetLeg(x0,p)
p['total_energy'] = computeTotalEnergy(x0,p)
sol = step(x0,p)

plt.plot(sol.y[0],sol.y[1], color='orange')
plt.show()
</code></pre>

<p>would become</p>

<pre class="lang-py prettyprint-override"><code>p = {'mass': 80.0, 'stiffness': 8200.0, 'resting_length': 1.0, 'gravity': 9.81,
     'aoa': 1/5*np.pi} # aoa stands for angle_of_attack
x0 = [0, 0.85, 5.5, 0, 0, 0]
x0 = resetLeg(x0, p)
p['total_energy'] = computeTotalEnergy(x0, p)
sol = step(x0, p)

plt.plot(sol.y[0], sol.y[1], color='orange')
plt.show()
</code></pre>

<p>As you can see I also added some indentation to the parameter dictionary defintion to make it more clear which parts belong together. This effect can also be nicely shown in the body of <code>step</code>, where you could go from</p>

<pre class="lang-py prettyprint-override"><code>sol2 = integrate.solve_ivp(fun=lambda t, x: stanceDynamics(t, x, p),
t_span = [sol.t[-1], sol.t[-1]+max_time], y0 = x0,
events=events, max_step=0.0001)
</code></pre>

<p>to</p>

<pre class="lang-py prettyprint-override"><code>sol2 = integrate.solve_ivp(
    fun=lambda t, x: stanceDynamics(t, x, p),
    t_span=[sol.t[-1], sol.t[-1]+max_time],
    y0=x0, events=events, max_step=0.0001
)
</code></pre>

<p>I think it's hard to argue that this does not look more easy to read.</p>

<p>Since you do not try to rename the <code>integrate</code> submodule from SciPy to something shorter, there is no need to use the <code>from ... import ... as ...</code> syntax. Instead you could just use <code>from scipy import integrate</code>.</p>

<p>The last thing I would like to talk about here in this section is documentation. You have already mentioned that this is on your to-do list, and it definitely should be. The official Style Guide has a nice concise <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">section on that topic</a>, too, but since your specifically working in the scientific Python stack, I think it might be worth pointing you to the <a href="https://numpydoc.readthedocs.io/en/latest/format.html" rel="nofollow noreferrer">documentation style used in NumPy</a> and SciPy. Using this docstyle for step would yield something like:</p>

<pre class="lang-py prettyprint-override"><code>def step(x, p):
    '''
    Take one step from apex to apex/failure.

    Parameters
    ----------
    x : array_like
        state vector with 6 elements
    p : dict
        physical parameters used in the differential equations

    Returns
    -------
    object
        a solution object from scipy.integrate.solve_ivp with all phases
    '''
    # your code here
</code></pre>

<p>Elaborating further on this topic would clearly be to much for this review, so please read the ressources linked above to get more information.</p>

<h2>Performance</h2>

<p>Solving differential equations is not my area of expertise, so there are probably way more fundamental changes other members of the community can come up with in order to help you. I will nevertheless try to give you some insights I gained while working with your code.</p>

<p>I did some profiling on your code using the <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">cProfile module</a> from Python, and, as one might already has expected, most of the time is spent on numerically solving the ODEs in SciPy (I think I saw some Runge-Kutta pop op here and there). Furthermore, the profiler told me that solving the stance dynamics takes most of the time outside of the SciPy backend out of the three solutions. That was in line with my expectations since that's the call to <code>integrate.solve_ivp</code> where <code>max_step</code> is two orders of magnitude smaller. With your other parameters that lead to around <code>13610</code> calls to <code>stanceDynamics</code> (through the lambda expression of course). So that was my first point to look at.</p>

<p>The first micro-optimization I came up with was to replace <code>leg_length = np.sqrt((x[0]-x[4])**2 + (x[1]-x[5])**2)</code> with the well known <code>hypot</code> function found in Python's <a href="https://docs.python.org/3/library/math.html#math.hypot" rel="nofollow noreferrer">math module</a> as well as in <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.hypot.html" rel="nofollow noreferrer">NumPy</a> to form <code>leg_length = np.hypot(x[0]-x[4], x[1]-x[5])</code>. The effects where minuscule, but that was also within my expectations. </p>

<p>So what to do next? I recently got to know (read: no expert here!) a Python package called <a href="http://numba.pydata.org/" rel="nofollow noreferrer">Numba</a> which allows just-in-time compilation of Python code in order to improve performance, especially if Python code is called within tight loops. Great plus: it's quite easy to use (most of the time) and works on Python code as well as with NumPy. With a little help Numba seems reasonable capable to deduce the datatype of parameters you put into a function on it's own. I went from your original code</p>

<pre class="lang-py prettyprint-override"><code>def stanceDynamics(t, x, p):
    alpha = np.arctan2(x[1]-x[5] , x[0]-x[4]) - np.pi/2.0
    leg_length = np.sqrt((x[0]-x[4])**2 + (x[1]-x[5])**2)
    xdotdot = -p["stiffness"]/p["mass"]*(p["resting_length"] - leg_length) * np.sin(alpha)
    ydotdot =  p["stiffness"]/p["mass"]*(p["resting_length"] - leg_length)*np.cos(alpha) - p["gravity"]
    return np.array([x[2], x[3], xdotdot, ydotdot, 0, 0])
</code></pre>

<p>to the following</p>

<pre class="lang-py prettyprint-override"><code>import numba as nb

@nb.jit
def stanceDynamics2(t, x, stiffness, mass, resting_length, gravity):
    alpha = np.arctan2(x[1] - x[5], x[0] - x[4]) - np.pi / 2.0
    leg_length = np.hypot(x[0]-x[4], x[1]-x[5])
    xdotdot = -stiffness / mass * (resting_length - leg_length) * np.sin(alpha)
    ydotdot = stiffness / mass * (resting_length - leg_length) * np.cos(alpha) - gravity
    return np.array([x[2], x[3], xdotdot, ydotdot, 0, 0])
</code></pre>

<p>As you can see, the dictionary vanished from the function signature and was replaced by the plain values in order to help Numba deduce the type (and save some dictionary lookups). You can see the result of this when looking at the profiler output (10 repetitions for each variant):</p>

<pre class="lang-none prettyprint-override"><code>   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   136100    2.985    0.000    3.550    0.000 slip.py:102(stanceDynamics)
   136100    0.565    0.000    0.565    0.000 slip.py:115(stanceDynamics2)
</code></pre>

<p>In the overall timing averaged over ten runs that gives you a performance gain of about 25-30% (or about ~240ms in absolute values) on my not so powerful laptop<sup>1</sup> here. Your results may vary.</p>

<p>As I said, there is possibly a lot more to gain here, but I would consider this at least as a respectable achievement for the amount of effort needed to implement those changes.</p>

<hr>

<p><sup>1</sup> Intel Core i5 460M, Python 3.7.3 [MSC v.1915 64 bit (AMD64)] :: Anaconda, Inc. on win32</p>
    </div>