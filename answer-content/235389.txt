<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The really big suggestion (which I'm sure you're going to hear a lot) is to not use <code>global</code> variables.  Declaring global <em>constants</em> is fine, but when you have state that any function might modify at any time it rapidly gets hard to figure out what state your app is in at any given point.</p>

<p>So with that in mind, your <code>board_update</code> function should not exist.  I see that the main point of it is to be able to identify the board spaces that make up a win condition.  Here's how you could restructure that logic to not rely on global variables:</p>

<pre><code>from random import choice
from typing import List, Optional

winning_rows = [
    # horizontal
    (0, 1, 2),
    (3, 4, 5),
    (6, 7, 8),
    # vertical
    (0, 3, 6),
    (1, 4, 7),
    (2, 5, 8),
    # diagonal
    (0, 4, 8),
    (2, 4, 6),
]

def check_winner(board: List[str]) -&gt; Optional[str]:
    """Return the winning player (if any).
    Players are 'X' (human) and 'O' (computer)."""
    for player in ['X', 'O']:
        for row in winning_rows:
            if all([board[space] == player for space in row]):
                return player
    return None

def ai_move(board: List[str]) -&gt; int:
    """Compute the best move for player 'O' (the AI)."""

    def winning_move(
        player: str, 
        opponent: str
    ) -&gt; Optional[int]:
        """Return the winning move for the given player vs the opponent, 
        or None if there's no winning move."""
        for spaces in winning_rows:
            row = [board[space] for space in spaces]
            if row.count(player) == 2 and not opponent in row:
                return next(s for s in spaces if board[s] != player)
        return None  # no winning move

    # Check to see if there's a move that would win the game for O.
    move = winning_move(board, 'O', 'X')
    if move is not None:
        return move  # Winner!

    # Check to see if there's a move that would win the game for X.
    move = winning_move(board, 'X', 'O')
    if move is not None:
        return move  # Blocked!

    # Otherwise make a random move.
    return choice([
        space for space in range(len(board)) if board[space] not in ('O', 'X')
    ])
</code></pre>

<p>Note that the board itself (because it will change) should not be a global, but the set of <code>winning_rows</code> can be a global constant since it's defined by the rules of the game rather than a particular game in progress.</p>
    </div>