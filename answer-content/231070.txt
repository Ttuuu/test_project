<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance.</h2>

<ul>
<li><code>map</code> and <code>flatMap</code> create copies of the arrays. </li>
<li>For each new item added to the result you rebuild the whole results object <code>({ ...ac, [a]: null})</code> </li>
<li>For each property in the result you create a temp object to hold the key value pair.</li>
</ul>

<p>These CPU, memory allocation, and GC burdens that can be avoided. </p>

<p>Some will argue that the overhead for small data sets is trivial and thus inconsequential. </p>

<p>Performance always matters and coding without though of performances leads to poor design habits that will bite. Many small inconsequential performance extras can quickly sum up to overall poor performance. Especially true in JavaScript where the target platform's capabilities vary so greatly. What is inconsequential on a top end desktop can be unusable on a $15 tablet.</p>

<h2>Design</h2>

<p>If you have followed the Code Review posting rules and your code is production code then it is very poor quality, as it is flat, in the global scope, and not reusable at all.</p>

<p>You should always write code inside a function. Even if its just an example writing functions will result in better design.</p>

<h2>Style</h2>

<ul>
<li>The indenting is poor and obscuring the logic.</li>
<li>You have redundant code. Unneeded brackets <code>()</code> in <code>headersMap</code>.</li>
<li>Poor naming of the <code>_.reduce</code> callbacks arguments</li>
</ul>

<h2>Rewrite</h2>

<p>Using your algorithm and rewriting into a named function your code is more readable, reusable, and cleaner (name space wise) as</p>

<pre><code>function namedEvents(eventList) {
    const map = ({onClick, children}) =&gt; onClick ? {onClick} : _.map(children, map);
    const reduce = (result, child) =&gt; ({...result, [child]: null});
    return _.reduce(
        _.map(_.flatMap(eventList, map), 'onClick'),
       reduce, 
       {}
    );
}
</code></pre>

<p>Avoiding the needless re-creation of results for each entry you get</p>

<pre><code>function namedEvents(eventList) {
    const map = ({onClick, children}) =&gt; onClick ? {onClick} : _.map(children, map);
    const reduce = (result, child) =&gt; (result[child] = null, result);
    return _.reduce(
        _.map(_.flatMap(eventList, map), 'onClick'),
       reduce, 
       {}
    );
}
</code></pre>

<h2>Redesign</h2>

<p>To avoid the CPU overhead the code can be written as a simple recursive function. The functions below are an order of magnitude quicker than your algorithm. </p>

<p>There is no need to load lodDash.js thus improving the page load time.</p>

<p>As you already use recursion I will assume that there are no cyclic references in the dataset.</p>

<p>Your code ignores children if <code>onClick</code> is truthy so will do the same</p>

<p>For the best re-usability the key <code>"onClick"</code> name can be passed as an argument. </p>

<pre><code>function namedEvents(eventList, results = {}, key = "onClick") {
    for (const child of eventList) {
        if (child[key]) { results[child[key]] = null }
        else if (child.children) { namedEvents(child.children, results, key) }
    }
    return results;
}
</code></pre>

<p>or</p>

<pre><code>function namedEvents(eventList, results = {}, key = "onClick") {
    for (const child of eventList) {
        if (child[key]) { 
            results[child[key]] = null;
        } else if (child.children) { 
            namedEvents(child.children, results, key);
        }
    }
    return results;
}
</code></pre>

<p>Or not having an adaptive <code>key</code> name</p>

<pre><code>function namedEvents(eventList, results = {}) {
    for (const {onClick, children} of eventList) {
        if (onClick) { results[onClick] = null }
        else if (children) { namedEvents(children, results) }
    }
    return results;
}
</code></pre>

<p>Or</p>

<pre><code>function namedEvents(eventList, results = {}) {
    return eventList.reduce((result, {onClick, children}) =&gt; 
            onClick? (results[onClick] = null, results) : 
                children ? namedEvents(children, results) : results,
        results
    );
}
</code></pre>
    </div>