<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've discovered that node.js v10 supports <code>.finally()</code> for promises (or you could employ a polyfill) so it could be slightly improved by moving the <code>close()</code> logic into a <code>.finally()</code> handler.  </p>

<pre><code>function getBlocked(data) {
    let openDb;

    return MongoClient.connect(url).then(db =&gt; {
        openDb = db;
        const blQ = {blocked_user:data.tag_search_mail};
        return db.collection("block_list").find(blQ,{"_id":0}).toArray();
    }).then(results =&gt; {
        let blocked = results.map(item =&gt; item.blocker);
        return blocked;     // make this the resolved value of the promise
    }).finally(() =&gt; {
        if (openDb) {
            openDb.close().catch(err =&gt; {
                console.log("Error closing db: ", err);
            })
        }
    });
}
</code></pre>

<hr>

<p>Now, it seems as an additional improvement for this particular usage, you can move the <code>.finally()</code> clause to a place where you don't have to save the <code>db</code> variable to the higher scope because all paths with a successfully open <code>db</code> go through one promise chain (assuming no exception in the <code>.then()</code> handler is thrown before <code>db.collection()</code> is called:</p>

<pre><code>function getBlocked(data) {
    return MongoClient.connect(url).then(db =&gt; {
        const blQ = {blocked_user:data.tag_search_mail};
        return db.collection("block_list").find(blQ,{"_id":0}).toArray().finally(() =&gt; {
            db.close().catch(err =&gt; {
                console.log("Error closing db: ", err);
            });
        });
    }).then(results =&gt; {
        let blocked = results.map(item =&gt; item.blocker);
        return blocked;     // make this the resolved value of the promise
    });
}
</code></pre>
    </div>