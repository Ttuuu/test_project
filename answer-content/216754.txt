<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Simplifying redundancy</h2>
<p>You could do something like iterating over the id attribute of each input element, calling a function to add the handler.</p>
<pre><code>['priority', 'assignedTo', 'vendorticket'].forEach(addChangeHandler);

function addChangeHandler(inputId) {
    $("#" + inputId).change(function() { //Input/Select tag
        var output = ("#" + inputId + "-result"); 
        var data = {
            column: inputId,
            id: 15
        };
        data[inputId] = $(this).val()
        $.post({
            url: 'includes/view.func.php', // Updating database based on specified row id, column, and value
            data: data,
            success: function(result) {
                $(output).html(result); //Output span either "Saved" or "Save Failed"
            }
        });
    }); 
}
</code></pre>
<p>Note the code uses the shortcut method <a href="https://api.jquery.com/jQuery.post/" rel="nofollow noreferrer"><code>$.post()</code></a> to allow skipping the request type.</p>
<p>But a simpler technique would be to add a generic change handler that would be called after any change event on any of those inputs. This can be done by combining the selectors passed to the jQuery function:</p>
<pre><code>$('#priority, #assignedTo, #vendorticket')
</code></pre>
<p>This can then be used to add a generic function handler that can get the <em>id</em> of the input using <a href="https://api.jquery.com/attr" rel="nofollow noreferrer"><code>.attr('id')</code></a>:</p>
<pre><code>$('#priority, #assignedTo, #vendorticket').change(changeHandler);
function changeHandler() {
    var inputId = $(this).attr('id');
    var output = ("#" + inputId + "-result"); 
    var data = {
        column: inputId,
        id: 15
    };
    data[inputId] = $(this).val()
    $.post({
        url: 'includes/view.func.php', // Updating database based on specified row id, column, and value
        data: data,
        success: function(result) {
            $(output).html(result); //Output span either "Saved" or "Save Failed"
        }
    }); 
}
</code></pre>
<p>If you had a lot more input elements to add to that list, a class could be applied and they could be selected by class name (e.g. <code>$('.inputToWatch')</code>) or else if they were all child elements of a container then a child selector might simplify things (e.g. <code>$('#containerElement input')</code>.</p>
<h3>Simplifying the success function</h3>
<p>The success function could be replaced with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Creating_a_bound_function" rel="nofollow noreferrer">a bound function</a> - i.e. a function bound to <code>$(output).html</code>:</p>
<pre><code>success: $().html.bind($(output))
</code></pre>
<p>These changes are visible in <a href="http://phpfiddle.org/main/code/87gi-1vy4" rel="nofollow noreferrer">this phpfiddle</a>.</p>
<p>You could also use the other syntax of <code>$.ajax()</code> i.e. <code>Query.post( url [, data ] [, success ] [, dataType ] )</code></p>
<pre><code>$.post('includes/view.func.php', data, $().html.bind($(output))); 
</code></pre>
    </div>