<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, refer my comment under your question: "Is there a good reason for parallel vectors at all? Or should it be a single vector of <code>struct {int, int, ...}</code>?"</p>

<p>Assuming there is a good reason: Putting it all together, applying consistent style and making a few optimising tweak...</p>

<p>I have "borrowed" from @Quuxplusone for the <code>parallel_sort</code> with C++17 <a href="https://en.cppreference.com/w/cpp/language/fold" rel="nofollow noreferrer">"comma operator" fold expression to expand the parameter pack</a>. (He is using option (2) on that page, with "op" = ","). </p>

<p>No more need for the pair because the information is in the "array index position" after the sorting is done. </p>

<p>I changed your <code>3-way old_target_*</code> to <code>std:swap</code> and changed the <code>while</code> to an <code>if</code>. That's the same no? </p>

<p>A utility function makes the testing cleaner. </p>

<p>Code formatting using <a href="https://github.com/oschonrock/stamp/blob/master/.clang-format" rel="nofollow noreferrer">my standard <code>.clang-format</code></a>. You may disagree with this config, but it is consistent. </p>

<p>A type alias for the <code>value_t</code> = <code>int</code> just in case you want to change it. It could be templated, but this would get complicated and might be overkill? </p>

<pre><code>#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;numeric&gt;
#include &lt;cassert&gt;

using std::size_t;
using value_t = int;

void reorder(std::vector&lt;value_t&gt;&amp; vect, std::vector&lt;size_t&gt; index) {
  for (size_t i = 0; i &lt; vect.size(); i++) {
    if (index[i] != i) {
      std::swap(vect[index[i]], vect[i]);
      std::swap(index[index[i]], index[i]);
    }
  }
}

template &lt;typename Vector, typename... Vectors&gt;
void parallel_sort(Vector&amp; keyvector, Vectors&amp;... vectors) {
  std::vector&lt;size_t&gt; index(keyvector.size());
  std::iota(index.begin(), index.end(), 0);
  std::sort(index.begin(), index.end(),
            [&amp;](size_t a, size_t b) { return keyvector[a] &lt; keyvector[b]; });

  (reorder(keyvector, index), ..., reorder(vectors, index));
}

void test(const std::vector&lt;value_t&gt;&amp; vec, const std::vector&lt;value_t&gt;&amp; res) { 
  assert(vec == res); 
}

value_t main() {
  std::vector&lt;value_t&gt; order{1, 0, 3, 2};
  std::vector&lt;value_t&gt; v1{100, 200, 300, 400};
  std::vector&lt;value_t&gt; v2{100, 200, 300, 400};
  std::vector&lt;value_t&gt; v3{400, 200, 3000, 4000};
  std::vector&lt;value_t&gt; v4{500, 200, 360, 400};

  parallel_sort(order, v1, v2, v3, v4);

  test(v1, {200, 100, 400, 300});
  test(v2, {200, 100, 400, 300});
  test(v3, {200, 400, 4000, 3000});
  test(v4, {200, 500, 400, 360});
}

</code></pre>

<p>My only other thought on this solution is that it does a lot of copying. Not only does it construct the index, but then it makes a copy of that index, as a working area, for each vector it sorts. For small vectors this is absolutely fine. But for big structures you might want to follow @Quuxplusone's other quicksort approach. </p>

<p>Alternatively we should consider refactoring the code above, such that it only runs through reorder() once, ie it only needs one "copy" of index (and therefore doesn't actually need a copy, because it can be discarded after that single swap run). </p>

<p>See final code below for the relevant changes:</p>

<ul>
<li>No more reorder function, just a <code>std::swap</code> wrapper to swap specific elements of a vector.</li>
<li>This <code>swap_elements</code> is called once for each vector in the pack, in
the inner loop, using the now familiar fold expression.</li>
<li>Added a fold expression <code>assert()</code> to ensure the vectors are all the same size and thus prevent UB. </li>
<li>As a bonus the code is now so simple that we can easily add  deduction, ie vectors of anything. </li>
<li>Bonus #2: Add the <code>std::less&lt;&gt;</code> as the first param, so you can reverse sort or similar. </li>
</ul>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

using std::size_t;

template &lt;typename T&gt;
void swap(size_t i, size_t j, std::vector&lt;T&gt;&amp; v) {
  std::swap(v[i], v[j]);
}

template &lt;typename Comp, typename Vec, typename... Vecs&gt;
void parallel_sort(const Comp&amp; comp, Vec&amp; keyvec, Vecs&amp;... vecs) {
  (assert(keyvec.size() == vecs.size()), ...);
  std::vector&lt;size_t&gt; index(keyvec.size());
  std::iota(index.begin(), index.end(), 0);
  std::sort(index.begin(), index.end(),
            [&amp;](size_t a, size_t b) { return comp(keyvec[a], keyvec[b]); });

  for (size_t i = 0; i &lt; index.size(); i++) {
    if (index[i] != i) {
      (swap(index[i], i, keyvec), ..., swap(index[i], i, vecs));
      std::swap(index[index[i]], index[i]);
    }
  }
}

template &lt;typename T&gt;
void test(const std::vector&lt;T&gt;&amp; vec, const std::vector&lt;T&gt;&amp; res) {
  assert(vec == res);
}

int main() {
  using value_t = int;
  using vec_t   = std::vector&lt;value_t&gt;;

  vec_t order{1, 0, 3, 2};
  vec_t v1{100, 200, 300, 400};
  vec_t v2{100, 200, 300, 400};
  vec_t v3{400, 200, 3000, 4000};
  vec_t v4{500, 200, 360, 400};

  parallel_sort(std::less&lt;&gt;(), order, v1, v2, v3, v4);

  test(v1, vec_t{200, 100, 400, 300});
  test(v2, vec_t{200, 100, 400, 300});
  test(v3, vec_t{200, 400, 4000, 3000});
  test(v4, vec_t{200, 500, 400, 360});
}
</code></pre>

<ul>
<li><a href="https://cppinsights.io/s/16c0a5a8" rel="nofollow noreferrer">CppInsights link</a> which shows us the templates which get instantiated. You can clearly see the way the fold expression gets expanded:</li>
</ul>

<pre><code>(((swap_elements(index.operator[](i), i, keyvector) , 
  swap_elements(index.operator[](i), i, __vectors1)) , 
  swap_elements(index.operator[](i), i, __vectors2)) , 
  swap_elements(index.operator[](i), i, __vectors3)) , 
 swap_elements(index.operator[](i), i, __vectors4);
</code></pre>

<p>This code could work well for quite large vectors. </p>
    </div>