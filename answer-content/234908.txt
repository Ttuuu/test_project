<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for you.</p>

<p>1) In the <code>search</code> method, extract the <code>sortedArray[mid]</code> into a variable.</p>

<pre class="lang-java prettyprint-override"><code>//[...]
int currentMid = sortedArray[mid];

if (currentMid == key) {
//[...]
} else if (currentMid &gt; key) {
//[...]
} else if(currentMid &lt; key){
//[...]
}
</code></pre>

<p>For the array part, instead of passing an array, you can use the <code>varargs</code>. In my opinion, it will be easier to test since you donâ€™t need to create a new array each time, but it can be uglier since the other parameters are also integers.</p>

<pre class="lang-java prettyprint-override"><code>public class BinarySearchTest {
    private BinarySearch binarySearchCUT;
    private static final int UNSUCCESSFUL = -1;

    @Before
    public void setUp(){
        binarySearchCUT = new BinarySearch();
    }

    @Test
    public void testShouldReturnUnsuccessfulOnEmptyArray() {
        assertEquals(UNSUCCESSFUL, binarySearchCUT.binSearch(0));
    }

    @Test
    public void testShouldReturnUnsuccessfulOnLeftBound() {
        assertEquals(UNSUCCESSFUL, binarySearchCUT.binSearch(0, 1, 2, 4, 7, 8, 12, 15, 19, 24, 50, 69, 80, 100));
    }

    @Test
    public void testShouldReturnUnsuccessfulOnRightBound() {
        assertEquals(UNSUCCESSFUL, binarySearchCUT.binSearch(101, 1, 2, 4, 7, 8, 12, 15, 19, 24, 50, 69, 80, 100));
    }

    @Test
    public void testShouldReturnSuccessfulOnLeftBound() {
        assertEquals(0, binarySearchCUT.binSearch(1, 1, 2, 4, 7, 8, 12, 15, 19, 24, 50, 69, 80, 100));
    }

    @Test
    public void testShouldReturnSuccessfulOnRightBound() {
        assertEquals(12, binarySearchCUT.binSearch(100, 1, 2, 4, 7, 8, 12, 15, 19, 24, 50, 69, 80, 100));
    }

    @Test
    public void testShouldReturnSuccessfulOnMid() {
        assertEquals(7, binarySearchCUT.binSearch(19, 1, 2, 4, 7, 8, 12, 15, 19, 24, 50, 69, 80, 100));
    }

    @Test
    public void testShouldReturnSuccessfulOnMidGreaterThanGivenNumber() {
        assertEquals(5, binarySearchCUT.binSearch(12, 1, 2, 4, 7, 8, 12, 15, 19, 24, 50, 69, 80, 100));
    }

    @Test
    public void testShouldReturnSuccessfulOnMidLesserThanGivenNumber() {
        assertEquals(10, binarySearchCUT.binSearch(69, 1, 2, 4, 7, 8, 12, 15, 19, 24, 50, 69, 80, 100));
    }

    static class BinarySearch {
        public int binSearch(int key, int... sortedArray) {
            return search(0, sortedArray.length - 1, key, sortedArray);
        }

        private static int search(int start, int end, int key, int... sortedArray) {
            int mid = start + ((end-start)/2);

            if (mid &gt;= start &amp;&amp; mid &lt;= end) {
                int currentMid = sortedArray[mid];

                if (currentMid == key) {
                    return mid;
                } else if (currentMid &gt; key) {
                    return search(start, mid-1, key, sortedArray);
                } else if(currentMid &lt; key){
                    return search(mid+1, end, key, sortedArray);
                }
            }

            return -1;
        }
    }
}

<span class="math-container">```</span>
</code></pre>
    </div>