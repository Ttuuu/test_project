<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An empty container like a list or deque is False, so it isn't necessary to use <code>len()</code> on them.  This is more "pythonic"</p>

<pre><code>while queue:
    ...

    if not adjacency_nodes:
        ...
</code></pre>

<p>It seems wasteful to add a path to the queue only to discard it because it is too long.  It would be better to check the length before making a copy of the path and adding it to the queue.  Moreover, if <code>len(path) == is cutoff - 1</code> the only possible solution is if <code>target_node</code> is in <code>adjacency_nodes</code>.  So, something like this might be faster:</p>

<pre><code>from collections import deque

def algorithm(G, source_node, target_node, pusher, cutoff=5):

    if source_node not in G:
        return

    queue = deque([[source_node]])

    while queue:
        path = queue.popleft()

        adjacency_nodes = G[path[-1]]

        if not adjacency_nodes:
            continue

        if len(path) == cutoff - 1:
            if target_node in adjacency_nodes:
                pusher(path[:] + [target_node])

        elif len(path) &lt; cutoff - 1:
            queue.extend(path[:] + [node] for node in adjacency_nodes)
</code></pre>

<p>If you are trying to optimize for speed, use the profiler in the standard library to see where the algorithm is spending time.</p>

<p>The algorithm is basically a breadth first search of the graph.  Because there is a depth cutoff, a depth first search might be faster because there isn't the overhead of copying the path and keeping the queue of paths to search.  But the only way to know is to implement it and see.</p>

<p>Lastly, the <a href="https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.simple_paths.all_simple_paths.html#networkx.algorithms.simple_paths.all_simple_paths" rel="nofollow noreferrer">networkx library</a> provides <code>all_simple_paths(G, source, target, cutoff=None)</code> which is a generator of all simple paths from <code>source</code> to <code>target</code> with a maximum length <code>cuttoff</code>. FYI, networkx uses a DFS search (<a href="https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/simple_paths.html#all_simple_paths" rel="nofollow noreferrer">source code</a>).</p>
    </div>