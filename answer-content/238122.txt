<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>there.</p>

<p>This is my first answer, so If I screw up or some of my suggestion are 'too strong', let me know. I'll try to correct it.</p>

<p>I'm just renaming 'nth' and 'rth' to 'n' and 'r' at some places in my code, please keep that in mind.</p>

<p>One more thing, I can't add a comment yet (not enough rep), so could you tell me what purpose 'eval' servers in your code, I couldn't figure it out.</p>

<pre><code>    if type(num) == str:
    num = int(eval(num))

    if type(b_coefficient) == str:
    b_coefficient = eval(b_coefficient)
</code></pre>

<p>Are you consider to take expressions as input? If you are even then you can move 'eval' out of functions (like you did in the second example) to the input, (as soon as you input), so functions and the rest of code is streamlined.</p>

<p>Also, you don't need to check <code>if type(num) == str</code> . In python3, the input is 'str' by default. So, if there's an expression you can evaluate it directly.</p>

<p>Now, coming to the code, I'll try to simplify things I'm able to.</p>

<hr>

<h1>Simple Optimization</h1>

<p>Solving 'Combinations' as a factorial needs unnecessary computations when they could be avoided. You are calculating three factorials, then the result. But, it could be simplified. (Considering r &lt;= (n-r) and the fact that nCr = nC(n-r))</p>

<p><a href="https://i.stack.imgur.com/cYCXi.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/cYCXi.png" alt="enter image description here"></a></p>

<p>So, if you modify you factorial and combination functions, you'll save some computation.</p>

<pre><code>def factorial(n, end_point=1) :
    result = 1
    for i in range(end_point, n+1):
        result *= i
    return result

def combination(n, r) :
    r = min(r, n - r)
    c = factorial(n, n-r+1) // factorial(r)
    return c
</code></pre>

<p>And if you didn't know, '//' is integer division in python 3. So, if you do this then you won't need to convert output to and integer.</p>

<h1>Don't repeat yourself</h1>

<p>You can simplify pascal's triangle by doing this</p>

<pre><code>def pascal_triangle_c_entry(n, r):
    return combination(n-1, r-1)
</code></pre>

<hr>

<h1>Streamline Stuff</h1>

<p>You can break your 'binomial_term_coeff_finder' function in smaller functions. A start would be to make a new 'group' output formatter funtion. It would be called whenever you called 'binomial_term_coeff_finder' with 'output = 0'.</p>

<pre><code>def output_formatter(nth, rth, a, b_coeff) :
    d = n - r
    return "("+str(nth)+"C"+str(rth)+") ("+str(a)+")^"+str(d)+" ("+str(b_coeff)+"x)^"+str(rth)   
    # You don't need the outermost str
</code></pre>

<p>Now you don't need the choice (output) 0 and you can delete that.
For choice 1 and 2, you can merge them so the function will only return 'resultant_coefficient' and format the output as desired, because the choice 1 and 2 are doing the same thing.
The only time you use choice 1 is in choice 'b' of your main function i.e. 'term coefficient finder'.</p>

<pre><code>b_coefficient = input("Enter b's coeff: ")
if type(b_coefficient) == str:
    b_coefficient = eval(b_coefficient)
binomial_term_coefficient_finder(nth, rth, a, b_coefficient, 1)
</code></pre>

<p>So, replace this by - </p>

<pre><code>b_coefficient = input("Enter b's coeff: ")
b_coefficient = eval(b_coefficient)  # Again idk why you'd need that
resultant_coeff = binomial_term_coefficient_finder(nth, rth, a, b_coefficient)
print(output_formatter(nth, rth, a, b_coefficient))
print("Coefficient of x^"+str(rth)+"\n:", resultant_coeff)
</code></pre>

<hr>

<h1>Don't complicate</h1>

<p>In your 'first_count_terms' function, I don't know why you're using 'insert' method. If I'm missing something, let me know. Also, you don't need to print first 'count' terms, since you're only generating 'count' terms. imo, this would be better - </p>

<pre><code>def first_count_terms(n, count, a, b_coefficient):
    print(count, "Terms are:") # Same as print(str(count)+" Terms are:")
    for r in range(count):
        print(output_formatter(n, r, a, b_coefficient))
# I used output_formatter call here, which is equivalent to binomial_fun call with choice 0
</code></pre>

<hr>

<p>In your following function, ditch the second line. You don't need a predefined list when using list comprehension.</p>

<pre><code>def first_terms_with_coefficients(nth, count, a, b_coefficient):
    terms = []  # This line is unnecessary
    terms = [binomial_term_coefficient_finder(nth, rth, a, b_coefficient, 2) for rth in range(count)]
    # don't forget to remove '2' from the arguments if you consolidated the function earlier.
    print(terms)
</code></pre>

<hr>

<p>Your 'stopper' function is unnecessarily complicated. You can just do,</p>

<pre><code>def stopper():
    choice = input('Stop? (y/n) : ')
    if choice == 'y' :
        raise SystemExit
</code></pre>

<p>However, I can't comment on whether you need a stopper function at all, because I don't know how your calculator exits from a code. </p>

<hr>

<p>The inner while loop in the below code serves no purpose you can just remove it and the last two lines of your code and it'll behave the same.</p>

<pre><code>while True:
    print("Choose a for Pas_Tri entry(C)\nChoose b for term coefficient finder\nChoose c for first nth terms\nChoose d for c but with coeff")
    choice = input("&gt;&gt; ")
    while choice != "a" or choice != "b" or choice != "c" or choice != "d":
        if choice == "a":
            nth = int(input("Enter nth: "))
            rth = int(input("Enter rth: "))
.
.
.
                b_coefficient = eval(b_coefficient)
            first_terms_with_coefficients(nth, count, a, b_coefficient)

        stopper()
        print("Choose a for Pas_Tri entry(C)\nChoose b for term coefficient finder\nChoose c for first nth terms\nChoose d for c but with coeff")
        choice = input("&gt;&gt; ")
</code></pre>
    </div>