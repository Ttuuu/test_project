<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't believe there is a "<strong>right way</strong>" or a "<strong>wrong way</strong>" as such (well maybe there is a wrong way :)).  I think it all depends on the context of the situation and what is required.</p>

<p>However, I've always been a fan of using ViewModels and DTO's so will suggest that the approach you are doing is a "<strong><em>accepted</em></strong>" way.  When I first used this approach I had the same kind of problems that you mention in that some views shared data sets and I didn't want to duplicate those properties everywhere.  My approach in this instance was to use inheritance.  However, I ended up often having 3 levels deep and any changes to objects became difficult after a while.</p>

<p>In retrospect of that I am approaching ViewModel creation slightly differently these days.  I've read a few articles that suggest you should just have one big flat ViewModel and duplicate the properties as required.  This means the ViewModel is specific to your need and although you may have a slight class explosion and duplication you can be confident when changing one viewModel you will not effect anything else in the project.  Also tools such as <strong>AutoMapper</strong> (as suggested by Kevin) help with not having to worry about the mapping between Model and ViewModel anyway.</p>

<p>However I still like the thought of sharing common information so an alternative approach is to break down the properties into sub ViewModels.  So in your example above you could take this approach:</p>

<p>Create a bunch of Viewmodels that contain explicit separation of data concerns:</p>

<pre><code>public class UserInformationViewModel
{
    [Required]
    public String FirstName { get; set; }
    [Required]
    public String LastName { get; set; }
}

public class UserContactDetailsViewModel
{
    [Required]
    [DataType(DataType.EmailAddress)]
    public String Email { get; set; }       
}

public class UserPasswordViewModel
{
    [DataType(DataType.Password)]
    public String Password { get; set; }
    [Required]
    [DataType(DataType.Password)]
    public String VerifyPassword { get; set; }
}
</code></pre>

<p>Now create using composition any top level view models for the different view requirements of the system:</p>

<pre><code>public class CreateUserViewModel
{
    private UserInformationViewModel _information;

    public UserInformationViewModel Information
    {
        get { return _information ?? (_information = new UserInformationViewModel()); }
        set { _information = information; }
    }

    private UserContactDetailsViewModel _contactDetails;

    public UserContactDetailsViewModel ContactDetails
    {
        get { return _contactDetails ?? (_contactDetails = new UserContactDetailsViewModel()); }
        set { _contactDetails = information; }
    }
    private UserPasswordViewModel _password;

    public UserPasswordViewModel Verification
    {
        get { return _password ?? (_password = new UserPasswordViewModel()); }
        set { _password = information; }
    }   
}

public class EditUserViewModel
{
    [HiddenInput(DisplayValue = false)]
    [ReadOnly(true)]
    public int Id { get; set; }

    private UserInformationViewModel _information;  
    public UserInformationViewModel Information
    {
        get { return _information ?? (_information = new UserInformationViewModel()); }
        set { _information = information; }
    }

    private UserContactDetailsViewModel _contactDetails;    
    public UserContactDetailsViewModel ContactDetails
    {
        get { return _contactDetails ?? (_contactDetails = new UserContactDetailsViewModel()); }
        set { _contactDetails = information; }
    }   
}

// For details view I would use either inheritence or simply add the Verification attribute onto a new
// class.  Lets go with inheritence for now
public class UserDetailsViewModel 
{
    private UserPasswordViewModel _password;

    public UserPasswordViewModel Verification
    {
        get { return _password ?? (_password = new UserPasswordViewModel()); }
        set { _password = information; }
    }   
}
</code></pre>

<p><strong>Mapping model to ViewModel</strong></p>

<p>As Kevin has suggested there are great tools out there already that do this for you.  I haven't personally used any of them but I have heard good things about <a href="http://automapper.codeplex.com/">AutoMapper</a>.</p>

<p><strong>Making use of Partials for sub view models</strong></p>

<p>Because we have now separated the different elements into components I would consider creating a different partial view per view model.  This way even your views become re-usable and you share common view presentation around.</p>

<p>i.e</p>

<pre><code>UserContactDetailsViewModel =&gt; _UserContactDetails.cshtml
UserInformationViewModel    =&gt; _UserInformation.cshtml
UserPasswordViewModel       =&gt; _UserNewPassword.cshtml
UserPasswordViewModel       =&gt; _UserEditPassword.cshtml
</code></pre>

<p>Doing this each view requirement would be a case of incorporating the partials in as required.</p>

<p><strong>Pitfalls on view model composition and partials</strong>:
On problem with this approach I had was that when using these viewModels within the views the resultant elements created meant that the bindings did not come back on posts.</p>

<p>What was happening was that I would render a partial as such</p>

<pre><code>@Html.Partial("_UserInformation", Model.Information)
</code></pre>

<p>However that was great until I looked at the resultant html elements created.</p>

<pre><code>&lt;input id = "Firstname" name="Firstname" type="text" /&gt; // etc
</code></pre>

<p>The problem here is that on binding back there will be no Firstname element on our encapsulating viewModel.  What the input really should have looked like was</p>

<pre><code>&lt;input id = "Information_Firstname" name="Information_Firstname" type="text" /&gt; // etc
</code></pre>

<p>What I ended up doing was creating an extension method that would handle this for me without worrying about any of this.  So I ended up righting code like so to generate the correct element naming.</p>

<pre><code>@Html.Partial("_UserInformation", model =&gt; model.Information)
</code></pre>

<p>As for how that works, I'll leave you to figure that one out, or I might post it if you go down this route?  However what that partial does is ends up printing exactly what you need:</p>

<pre><code>&lt;input id = "Information_Firstname" name="Information_Firstname" type="text" /&gt; // etc
</code></pre>

<p><strong>Summary</strong>
I like your approach.  You are correct in that class explosion might be a problem but I think this potentially is outweighed by the clear separation of concerns in the system.  As for TDD, I don't think every class in an application needs testing.  For example if you classes are DTO's there's nothing to test, so class explosion might not necessarily be a cause for concern (or a reason to not go down this route).</p>

<p>Well just my two cents.  I hope you get some answers and reviews that enable you to produce code that you are happy and proud of.  After all, isn't that what we are after :)</p>
    </div>