<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before some more detailed performance analysis, it's important to note some low-hanging fruit in terms of code quality.</p>

<h2>Global imports</h2>

<p>Unless you have a really good reason, <code>from numpy import matrix</code> should be at the top of the file in global scope.</p>

<h2>Deprecated library classes</h2>

<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html" rel="nofollow noreferrer"><code>matrix</code> is deprecated</a>. Use <code>ndarray</code> instead.</p>

<h2>Do not reconstruct constants</h2>

<p><code>matrix('1 1; 1 0', object)</code> should not be parsed and reconstructed every time. Save it outside of function scope. If you need it to be modified later, modify a copy. Copying will be cheaper than parsing.</p>

<h2>Redundant branches</h2>

<p>In this:</p>

<pre><code>    if n % 2 == 0:
        return F
    if n % 2 != 0:
        return F * matrix('1 1; 1 0', object)
</code></pre>

<p>The second <code>if</code> is not necessary because its condition is guaranteed to be <code>True</code>.</p>

<h2>Expression simplification</h2>

<pre><code>int((-1)**(n+1))
</code></pre>

<p>It's probable that <code>n</code> is already an integer based on how your function is set up (though documentation and/or type hints would help to clarify this). The fact that a <code>float</code> is produced when the exponent is negative is probably due to Python assuming that it effectively needs to do a division, which is reasonable. All things considered, rather than doing the exponentiation - which is common in pure math, because of simplicity of analysis - you should consider doing the "piece-wise" thing instead. Rather than</p>

<pre><code>return F[0,0] if n &gt; 0 else int((-1)**(n+1)) * F[0,0]
</code></pre>

<p>consider</p>

<pre><code>y = F[0,0]
if n &lt;= 0 and n%2 == 0:
    y = -y
return y
</code></pre>
    </div>