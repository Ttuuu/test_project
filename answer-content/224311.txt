<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance</h2>

<p>The main cost of your implementation is in two areas, the sorting and the set memebership test.</p>

<p>When you do check for parents, it is generally advisable to update each of the parent of each of the ones you looked at, such that they would only be one step away from their parent the next time. Here is how it could look:</p>

<pre><code>  def shortcut(self, vertex, parent):
    while self.parents[vertex] != -1:
      next = self.parents[vertex]
      self.parents[vertex] = parent
      vertex = next

  def getparent(self, vertex):
    start = vertex
    while self.parents[vertex] != -1:
      vertex = self.parents[vertex]

    self.shortcut(start, vertex)
    return vertex
</code></pre>

<p>It can be shown that this assymtotically reduces the cost of the set membership test in this kind of union based data-structure.</p>

<p>You can also cut these comparisons short when you have found the full minimal spanning tree, which would save you all the extra parent lookups for all the edges following in the sorted sequence. You can do this by checking whether you are done after adding an edge with <code>len(mst) == len(self.graph) - 1</code>, and then do a break or return the result, so the code (the loop in the kruskal function) would look like this:</p>

<pre><code>    for edge in self.edges:
        vertex, neighbour, weight_edge = edge
        x_par = self.getparent(vertex)
        y_par = self.getparent(neighbour)
        if x_par != y_par:
          self.union(x_par, y_par)
          mst.append(edge)
          total += weight_edge
          if len(mst) == len(self.graph) - 1:
            break
</code></pre>

<p>For sorting you have two problems:</p>

<ol>
<li>You specify a key function manually, which means the algorithm will have to call that key function.</li>
<li>You sort more of the problem than you really need to.</li>
</ol>

<p>The first part comes from that <code>sort</code> may be implemented in a faster language (it looks to be so in my installation), which means that it generally runs faster if it never have to enter python code, which the manual key function breaks. If you however changes the order of attributes in how you store your edges, such that the weight is first, then you can use the default comparison, which will do lexiographic ordering, which in turn means you get it sorted primarily on the edge weights.</p>

<p>For the second part, the main problem is that you only need to search until you get the <code>n-1</code> edges needed to finish the minimum spanning tree, so you only need this amount sorted. It would therefore be advisable to use a sorting scheme, such as heapsort, where you can stop half-way through and only need to effectively pay in performance for the amount you needed. The downside is that the <code>heapq</code> python module looks to be mainly implemented in python, which means its actual performance might be slower unless you really only need a very small subset (this would typically depend on the graph).</p>

<h2>Convenience</h2>

<p>There are a few areas in the code, which with some improvement would be more convinient/better future-proofed.</p>

<p>The main one here is the need for a simpler way to add several edges to a graph, or even construct a graph with edges already in it. Here is how I would do it:</p>

<pre><code>  def __init__(self, edges=None):

    self.graph = []
    self.edges = []
    self.parents = {}
    self.size = {}
    self.add_edges(edges)

  def add_edges(self, edges=None):
    if edges is not None:
      for edge in edges:
        self.add_node(*edge)
</code></pre>

<p>The construction of your graph would then be this simple:</p>

<pre><code>  g = Graph([
    (0, 1, 10) 
    (0, 2, 6) 
    (0, 3, 5) 
    (1, 3, 15) 
    (2, 3, 4) ])
</code></pre>

<p>In the union fuction, we could parameterize the if statement as follows:</p>

<pre><code>    child, parent = (x_par, y_par) if self.size[x_par] &lt;= self.size[y_par] else (y_par, x_par)
    self.parents[child] = parent 
    self.size[parent] += self.size[child]
</code></pre>

<p>This would also seperate the orthogonal parts of the logic, which would make it easier to maintain.</p>

<p>Lastly it would be a good idea to have the <code>kruskal</code> method just return <code>mts, total</code> and then print outside, as this would allow actual use of the class in code outside of problems where this is the final solution.</p>
    </div>