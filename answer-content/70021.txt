<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The class design is not so good.
For example,
why does an item have a <code>quantity</code> property?
When you buy 3 cartons of milk,
is that a milk object with <code>quantity = 3</code>?
No, quantity is the property of your shopping basket, not the milk.</p>

<p>I recommend to rewrite <code>Item</code> this way:</p>

<pre><code>public class Item {
    private final long code;
    private final String name;
    private double rate;

    protected Item(long code, String name, double rate) {
        this.code = code;
        this.name = name;
        this.rate = rate;
    }

    @Override
    public String toString() {
        return "Item [name=" + name + ", rate=" + rate + ", code=" + code + "]";
    }

    public long getCode() {
        return code;
    }

    public String getName() {
        return name;
    }

    public double getRate() {
        return rate;
    }

    public void setRate(double rate) {
        this.rate = rate;
    }
}
</code></pre>

<p>That is:</p>

<ul>
<li><code>name</code> and <code>code</code> cannot be changed (why should they)
<ul>
<li>so I made them final</li>
<li>no setters</li>
</ul></li>
<li>Only <code>rate</code> is allowed to change, as that's a requirement</li>
<li>Only one constructor, no need for others, and definitely no need for a default constructor setting meaningless dummy values</li>
</ul>

<p>I made the constructor <code>protected</code>.
The reason is that you have a requirement to ensure unique codes.
That's a form of <em>instance control</em>,
and a common way to implement is the <em>factory pattern</em>.
So I suggest to create an <code>ItemFactory</code> class with a public <code>createItem</code> method that can create <code>Item</code> objects, and keep track of their codes in a <code>Map</code>,
to check and prevent duplicates.</p>

<p>In the <code>Shop</code> class,
instead of <code>ArrayList&lt;Item&gt; ItemList</code>,
there should be a <code>Map&lt;Item, Integer&gt; items</code> to track the available items and their quantities.</p>

<p>Finally,
make sure that all classes have one clear responsibility.
For example, if the main responsibility of the <code>Shop</code> class is to manage the inventory (items and their quantities),
then it should not have the responsibility of parsing user input from the console. That responsibility should go to another class.</p>
    </div>