<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is one case where you might find the use of C-style I/O actually faster. There is some overhead to C++ I/O (it isn't much, but it is there). For 50 million, it's ~3x faster for me.</p>

<pre><code>#include &lt;cstdio&gt;

std::FILE* f = std::fopen("/home/awesome/Desktop/large_numbers.txt", "w");
for(unsigned long i = 0; i &lt; max; ++i) {
    std::fprintf(f, "%lu\n", i);
}
std::fclose(f);
</code></pre>

<p>That having been said, this is nothing more than an artificial test of your operating system I/O subsystem and the hardware lying underneath it.</p>

<p>Edit: Here is the code for comparison:</p>

<pre><code>int main() 
{
    std::ios::sync_with_stdio(false);
    const unsigned long max = 50000000;

    std::ofstream myFile;
    myFile.open("C:\\include\\large_numbers.txt");

    auto begin = std::chrono::steady_clock::now();
    for (unsigned long i = 0; i &lt; max; ++i) {
        myFile &lt;&lt; i &lt;&lt; '\n';
    }
    auto end = std::chrono::steady_clock::now();
    std::cout &lt;&lt; "Took " &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end - begin).count() &lt;&lt; '\n';
}
</code></pre>

<p>On Yuushi Machine: This takes <strong>32877ms</strong><br>
On Loki's Machine: This takes <strong>11851ms</strong>  </p>

<p>For comparison, the following code:</p>

<pre><code>int main() 
{
    const unsigned long max = 50000000;
    FILE* f = std::fopen("C:\\include\\large_numbers.txt", "w");

    auto begin = std::chrono::steady_clock::now();
    for (unsigned long i = 0; i &lt; max; ++i) {
        std::fprintf(f, "%lu\n", i);
    }
    std::fclose(f);
    auto end = std::chrono::steady_clock::now();
    std::cout &lt;&lt; "Took " &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end - begin).count() &lt;&lt; '\n';
}
</code></pre>

<p>On Yuushi Machine: This takes <strong>13245ms</strong>.<br>
On Loki's Machine: This takes <strong>08420ms</strong>.</p>

<p>Yuushi: Compiled with VS2015RC with default Release settings (so /O2).<br>
Loki's: Compiled with clang-602.0.53 with --std=c++14 -O3  (Loki's machine uses SSD drives)</p>

<p>Second Edit: Trying this on other systems/configurations (so gcc 4.9.2 on cygwin and gcc5 on OS X) actually reverses these results - the C++ version is faster for me.</p>
    </div>