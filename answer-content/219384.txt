<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Global variables</h2>

<p>You never need to execute <code>global variable_name</code> in the global scope; variables created in the global scope are automatically global variables.  So the following statements should all be removed:</p>

<pre><code>global list_previous_jug_states 
global list_running_count 
global list_running_index 
global list_volumes 
global list_jug_max
</code></pre>

<p>JSYK: You rarely need <code>global variable_name</code> inside of functions.  If a function references a variable that it has not created, and that variable exists in the global scope, that variable is automatically brought into the function scope.  It is only necessary when you want to create (<code>variable_name = ...</code>) or modify (<code>variable_name += 10</code>) a global variable inside a function scope.  Note that modifying an object (ie, dictionary, list, etc) held in a global variable is not modifying the global variable itself, so <code>variable_name[x] = y</code> would not require <code>global variable_name</code>.</p>

<hr>

<h2>class CreateJugs</h2>

<p>This class is ill-named.  A class is (usually) an item ... a noun such as a person, place or thing.  It is rarely an action.  "Create" is an action.  Functions do things (actions), so you could have <code>def create_jug():</code>, but <code>class CreateJugs</code> is calling something which should be a thing by a name that describes an action.</p>

<p>Moreover, a class is an object ... singular.  It shouldn't have a plural name.</p>

<p>A better name for the class might be simply <code>Jug</code>.</p>

<p><code>max</code> is a built-in function name in Python.  You should avoid using it as the name of a class member (<code>self.max</code>).</p>

<p>If you want a property of a jug, you must already have a jug object, so repeating <code>jug_</code> in the property name is redundant.  In the following statement, you are using <code>jug</code> 4 times.  Would it be any less clear to remove <code>jug_</code> from the property name?  Or would it actually be clearer, because it is shorter and more concise?</p>

<pre><code>to_jug_max = list_jug_max[to_jug].jug_max
</code></pre>

<p>Base on the above points, I would instead write:</p>

<pre><code>class Jug:

    def __init__(self, name, capacity):
        self._name = name
        self._capacity = capacity

        list_jug_max.append(self)

    @property
    def capacity(self):
        return self._capacity
</code></pre>

<p>But the only places where <code>Jug</code> objects are used, are the following statements:</p>

<pre><code>jug_state.append(list_jug_max[x].max)
from_jug_max = list_jug_max[from_jug].jug_max
to_jug_max = list_jug_max[to_jug].jug_max
</code></pre>

<p>You are only ever using the Jug objects to access a single property: the jug's capacity.  (Worse, you are doing so inconsistently ... sometimes directly getting the <code>.max</code> member, other times accessing the <code>.jug_max</code> property!)</p>

<p>Since the jugs are created using the values in <code>list_volumes</code>, you could completely remove the class and <code>list_jug_max</code>, and replace the above statements with:</p>

<pre><code>jug_state.append(list_volumes[x])
from_jug_max = list_volumes[from_jug]
to_jug_max = list_volumes[to_jug]
</code></pre>

<hr>

<h2>set_fill_states</h2>

<p>The variable <code>list_binary_states</code> is only used in the function <code>set_fill_states</code>.  Why make it <code>global</code>?</p>

<hr>

<p>You are using <code>'0' * (number_jugs - len(binary_state)) + binary_state</code> to pad a string with leading 0's.  There is a built-in function which does this:</p>

<pre><code>binary_state = binary_state.rjust(number_jugs, '0')
</code></pre>

<p>Without the need for getting the length of <code>binary_state</code> separately, you can now convert the number into binary, remove the prefix, and add the padding in one statement:</p>

<pre><code>binary_state = bin(i)[2:].rjust(number_jugs, '0')
</code></pre>

<p>Or, using format strings for formatting a number as binary, without a prefix, in a certain field width, with leading zeros:</p>

<pre><code>binary_state = f"{i:0{number_jugs}b}"
</code></pre>

<hr>

<p>Why:</p>

<pre><code>list_binary_states = list_binary_states[0:len(list_binary_states)-1]
</code></pre>

<p>Shouldn't starting with all the jugs filled be a valid possibility?</p>

<p>If you want to remove the last item of a list, you can simply use a slice that ends one element before the end of the list:</p>

<pre><code>list_binary_states = list_binary_states[:-1]
</code></pre>

<hr>

<p>Python comes with a lot of built-in capability.  That includes sorting.</p>

<p>You've implemented a selection sort (<span class="math-container">\$O(N^2)\$</span>), where you search for items by counting the number of <code>'1'</code> characters in a N character string, making this sort into a <span class="math-container">\$O(N^3)\$</span> complexity.  Ouch!</p>

<pre><code>list_binary_states.sort(key=lambda item: item.count('1'))
</code></pre>

<p>Done in 1 statement, in <span class="math-container">\$O(N \log N)\$</span> time.</p>

<hr>

<pre><code>for n in range (len(list_binary_states)):
    # ...
    list_running_index.append([n])
</code></pre>

<p>This is simply:</p>

<pre><code>list_running_index = list(range(len(list_binary_states)))
</code></pre>

<p>Without that, the loop becomes ...</p>

<pre><code>for n in range (len(list_binary_states)):
    jug_binary_state = list_binary_states[int(n)]
    # ...
</code></pre>

<p>... with no other references to <code>n</code> (which was alway an integer, so there was never a need to evaluate <code>int(n)</code>).  Since you are only using <code>n</code> to index into <code>list_binary_states</code>, which is what you are looping over, you can replace this loop with:</p>

<pre><code>for jug_binary_state in list_binary_states:
    # ...
</code></pre>

<hr>

<pre><code>    jug_state = []
    for x in range (number_jugs):
        if int(jug_binary_state[x]) == 1: 
            jug_state.append(list_jug_max[x].max)
        else:
            jug_state.append (0)
</code></pre>

<p>Now, <code>jug_binary_state</code> is a string of length <code>number_jugs</code>.  So we can loop over the characters of the string, instead of over the number of jugs.  <code>list_volumes</code> is a list (of length <code>number_jugs</code>) of the maximum volume of each jug.  We just need to zip the characters and the volumes together, to construct the <code>jug_state</code>.</p>

<pre><code>    jug_state = []
    for ch, volume in zip(jug_binary_state, list_volumes):
        if ch == '1':
            jug_state.append(volume)
        else:
            jug_state.append(0)
</code></pre>

<p>Or, using list comprehension:</p>

<pre><code>    jug_state = [ volume if ch == '1' else 0
                  for ch, volume in zip(jug_binary_state, list_volumes) ]
</code></pre>

<hr>

<h2>make_moves</h2>

<pre><code>for from_jug in range (number_jugs):
    for to_jug in range (number_jugs):
        if to_jug == from_jug: continue  
        #Empty from_jug, ignore to_jug
        #Fill from_jug, ignore to_jug
        #Move as much from from_jug to to_jug
</code></pre>

<p>For each <code>from_jug</code>, you loop over each possible <code>to_jug</code>, and then ignore the <code>to_jug</code> for the "Empty" and "Fill" possible moves.  But you are still evaluating the new state for these moves for every <code>to_jug</code>, only to discarding the duplicate states.  Why?  That is a lot of extra work.</p>

<p>How about moving the "Empty" and "Fill" steps out of the inner loop?</p>

<pre><code>for from_jug in range (number_jugs):
    #Empty from_jug
    #Fill from_jug
    for to_jug in range (number_jugs):
        if to_jug == from_jug: continue  
        #Move as much from from_jug to to_jug
</code></pre>

<hr>

<p>Move common steps out of <code>if</code> statements.  Here, you are always create <code>new_jug_state</code> the same way:</p>

<pre><code>        if from_jug_state &lt; (to_jug_max-to_jug_state):
            new_jug_state = jug_state [:]
            #...
        else:
            new_jug_state = jug_state [:]
            #...
</code></pre>

<p>And if <code>transfer_amount</code> is set to <code>from_jug_state</code>, the last two statements of the <code>else</code> clause would do what the last two statements of the "then" clause would do:</p>

<pre><code>        if ...:
            # ...
            new_jug_state[from_jug] = 0
            new_jug_state[to_jug] = to_jug_state + from_jug_state
        else:
            # ...
            new_jug_state[from_jug] = from_jug_state - amount_transfer
            new_jug_state[to_jug] = to_jug_state + amount_transfer
</code></pre>

<p>So you can simplify this to:</p>

<pre><code>        if ...:
            # ...
            transfer_amount = from_jug_state
        else:
            # ...
        new_jug_state[from_jug] = from_jug_state - amount_transfer
        new_jug_state[to_jug] = to_jug_state + amount_transfer
</code></pre>

<hr>

<p>What does <code>make_moves()</code> return?  A boolean or a tuple?</p>

<pre><code>return True

return False, 0
</code></pre>

<p>Always return the same kind of thing from a function.  If the function returns a boolean, only return a boolean.  If the function returns a tuple of values, always return a tuple of values.  Don't change what it returned; the caller won't know what to expect, so won't know how to interpret the results without going to heroic efforts.   The tuple <code>False, 0</code> is truthy value (not a falsy value) because the tuple contains more than 0 values!</p>

<hr>

<p>Use functions!  <code>make_moves()</code> is a long function.  It has easy-to-make sub-functions, like <code>fill_a_jug()</code>, <code>empty_a_jug()</code>, <code>pour_between_jugs()</code>, which will help a reader of the code understand what the function does at a high level without being bogged down with lower level details, and the reader can look at the sub-functions separately for the lower-level details.</p>

<hr>

<h2>Don't modify lists while you iterate over them</h2>

<pre><code>for item in list_previous_jug_states:

    make_moves(...) # Appends to list_previous_jug_states
</code></pre>

<p>While it can be made to work, you've had to use global variables, maintain other lists (<code>list_running_count</code>, <code>list_running_index</code>) to determine how many steps were required to reach the current step, and where a given step came from.</p>

<p>Consider an alternate strategy:</p>

<pre><code>visited = { state: None for state in initial_states }
current_states = initial_states
steps = 0

while not solved:

    new_states = []

    for state in current_states:
        for new_state in valid_moves(state):
            if new_state not in visited:
                visited[new_state] = current_state
                new_states.append(new_state)

    current_states = new_states
    steps += 1
</code></pre>

<p>Here, I'm looping over all of the <code>current_state</code> values, and building up a new list of <code>new_states</code>, for the next step.  When all the new states that are reachable from all of the current states have been determined, that list of new states replaces the <code>current_states</code>, and the process repeats for the next step.</p>

<p>The <code>visited</code> dictionary keeps track of the previous state that the current state was reached from.  Once a solution has been found, simply trace the path back to the initial state (<code>None</code>) to determine the shortest solution path.</p>

<p>Like mentioned in my <a href="https://codereview.stackexchange.com/a/219072/100620">previous answer</a>, you will need to use a <code>tuple</code> for the states, to allow them to be used as a key in the <code>visited</code> dictionary.</p>

<hr>

<p>This "N-Jug" problem can be <em>simplified</em> (as in, less code) into an "N+1 Jug" problem, with just the "Pour from Jug A to Jug B" moves.  Simply create one additional jug with a capacity equal to the sum of all other jug capacities, and initialize it with a volume equal to its capacity less the volume initially contained in the remaining jugs.  With this extra jug called "Jug 0", the "Fill Jug A" move becomes "Pour from Jug 0 to Jug A", and the "Empty Jug A" move becomes "Pour from Jug A to Jug 0".</p>
    </div>