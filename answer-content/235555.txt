<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To know the answer to your comparison to <span class="math-container">\$N\$</span>, you need to attempt at least:</p>

<ul>
<li><span class="math-container">\$N\$</span> <code>next</code> calls if you test with <span class="math-container">\$\lt\$</span> (succeeding will result to <code>False</code>) or <span class="math-container">\$\ge\$</span> (succeeding will result to <code>True</code>);</li>
<li><span class="math-container">\$N+1\$</span> <code>next</code> calls in all 4 other cases.</li>
</ul>

<p>Obviously, if the iterator length is fewer than <span class="math-container">\$N\$</span> there will be less calls.</p>

<p>So, in order to simplify things, you could extract the first <span class="math-container">\$N+1\$</span> elements of the iterator and count them to compare this count to <span class="math-container">\$N\$</span>:</p>

<ul>
<li>extracting can be simplified with <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a></li>
<li><p>counting can be done using either</p>

<ul>
<li><p><code>enumerate</code> and dumping the content into a 1-length <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a></p>

<pre><code>from itertools import islice
from collections import deque


def compare_length(iterable, n, operation):
    chunck = islice(iterable, max(0, n+1))
    try:
        (length, _) = deque(enumerate(chunk, 1), maxlen=1)
    except ValueError:
        length = 0
    return operation(length, n)
</code></pre></li>
<li><p><code>sum</code></p>

<pre><code>from itertools import islice


def compare_length(iterable, n, operation):
    chunck = islice(iterable, max(0, n+1))
    length = sum(1 for _ in chunck)
    return operation(length, n)
</code></pre></li>
</ul></li>
</ul>

<p>The former should be more efficient, the latter more readable. As suggested in the question, this function takes the operation to perform as its third argument and compares <code>min(&lt;iterable length&gt;, n+1)</code> to <code>n</code>. This is sufficient in most cases.</p>

<hr>

<p>If you truly want to reduce the amount of <code>next</code> calls needed for <span class="math-container">\$\lt\$</span> and <span class="math-container">\$\ge\$</span>, you can keep your class approach and factorize the <code>min(&lt;iterable length&gt;, n)</code> part into an helper method:</p>

<pre><code>from itertools import islice


class ILengthComparator:
    def __init__(self, iterable):
        self._iterable = iterable

    def _length_up_to(self, n):
        return sum(1 for _ in islice(self._iterable, max(0, n)))

    def __eq__(self, n):
        return self._length_up_to(n+1) == n

    def __ne__(self, n):
        return self._length_up_to(n+1) != n

    def __lt__(self, n):
        return self._length_up_to(n) &lt; n

    def __le__(self, n):
        return self._length_up_to(n+1) &lt;= n

    def __gt__(self, n):
        return self._length_up_to(n+1) &gt; n

    def __ge__(self, n):
        return self._length_up_to(n) &gt;= n
</code></pre>

<hr>

<p>Lastly, if you want to avoid consuming the iterator while performing those tests, you can check <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee</code></a>.</p>
    </div>