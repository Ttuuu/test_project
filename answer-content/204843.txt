<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>... for formatting a String into USD ...</p>
</blockquote>

<p>A <em>string</em> is not the appropriate type to hold a monetary amount. What would your
extension method return if called on the string <code>"abc"</code> or <code>"?ü§¨"</code> ? A price is a <em>number</em>
and should be stored as such. Possible choices are</p>

<ul>
<li>An <em>integer</em> holding the price in units of the smallest denomination (e.g. cents), or</li>
<li>A <a href="https://developer.apple.com/documentation/foundation/decimal" rel="nofollow noreferrer"><code>Decimal</code></a> which represents a base-10 number with up do 38 decimal digits.</li>
</ul>

<p>Creating a textual representation of a number is the job for a 
<a href="https://developer.apple.com/documentation/foundation/numberformatter" rel="nofollow noreferrer"><code>NumberFormatter</code></a>.
It has options to specify the desired number of fractional digits, and even
has a dedicated <a href="https://developer.apple.com/documentation/foundation/numberformatter/style/currency" rel="nofollow noreferrer"><code>.currency</code></a>
style.</p>

<p>Using a number formatter has several advantages over ‚Äúmanually‚Äù formatting the price,
such as:</p>

<ul>
<li>It chooses the appropriate style according to the user's locale.</li>
<li>It puts the currency symbol at the correct position.</li>
<li>It rounds the number to the correct number of decimal places.</li>
</ul>

<p>Formatting a US dollar currency value is as simple as</p>

<pre><code>let formatter = NumberFormatter()
formatter.numberStyle = .currency
formatter.currencyCode = "USD"

let usPrice: Decimal = 1234.56
let displayString = formatter.string(for: usPrice)!
print(displayString)
</code></pre>

<p>This produces the string <code>$1,234.56</code> if the user's locale is "en_US".
On my device (with a german locale) it produces <code>1.234,56¬†$</code>.</p>
    </div>