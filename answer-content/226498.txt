<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Lack of Error Checking</strong><br>
There are two types of error checking that would improve the code. The first is checking user input, for instance if the value for the size of the array is negative the program will crash when it tries to allocate the memory for the array. The second is that the value returned from <code>calloc(size_t count, size_t size)</code> may be NULL if the call to <code>calloc()</code> fails for some reason. The function <code>calloc()</code> can fail if there is not enough memory to allocate the array.</p>

<p>It is generally a good practice to always check the return value of <code>calloc()</code>, while computers today have a lot of memory there are cases such as in embedded programming where there may not be enough memory.</p>

<pre><code>    int *array;
    array = (int*)calloc(number, sizeof(int));
    if (array == NULL)
    {
        // report error and handle clean up
    }
</code></pre>

<p><strong>Avoid Pointer Arithmetic When Possible</strong><br>
The code could just as easily use <code>temp_array[i]</code> as <code>*(temp_array + i)</code>. Using an index is makes it easier to write, read and debug the code. </p>

<p>Pointers can be used to move through an array quickly in a linear fashion, but then it would be better to increment the pointer rather than adding an offset to the pointer.</p>

<p><strong>DRY Code</strong><br>
There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code multiple times it is better to encapsulate it in a function. One place where this code could be encapsulated is allocating memory for arrays. A function could take a number and return an allocated array of integers if the allocation doesn't fail.</p>

<p><strong>Complexity</strong><br>
The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principe that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>There are at least 3 possible functions in <code>main()</code>.<br>
  - Allocate array memory<br>
  - Get the user input<br>
  - Copy distinct integers<br>
  - Calculate and print the answer  </p>

<p><strong>Algorithm</strong><br>
Rather than removing duplicates from the input array it might be better to go through the input array and copy a value to the <code>sub_array</code> only once. The check for zero is invalid since valid integers in the array can include zero and negative numbers.</p>
    </div>