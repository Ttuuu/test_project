<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some great things you're doing in this code.</p>
<ol>
<li>Not placing logic into your controller</li>
<li>Using repositories to control your data</li>
<li>Using requests to validate data in</li>
</ol>
<p>Some things that could be improved.</p>
<ol>
<li>Repositories are tightly coupled</li>
<li><code>store</code> method on the controller is tightly coupled to a repository</li>
<li>Lack of interfaces controlling repositories</li>
</ol>
<p>I'll step through all the areas that could be improved to add some context.</p>
<p>When you explicitly create an instance of a class within in a method of another class, you are binding the instantiation of not just the required class instance but the specific class itself, this is always true when you call static methods on classes, as such I'd recommend that you don't use static methods at all.</p>
<p>It's much more desirable in most cases to loosly couple class instances and Laravel provides an easy way to do this through its IoC implementation or <code>App</code> instance.</p>
<p>The IoC doesn't explicitly require an interface <em>but</em> it is preferable to make it easier on you as a developer, it also allows you to achieve a better design overall by ensuring that some object oriented design principles are adhered to. The go to design I use is <a href="https://medium.com/successivetech/s-o-l-i-d-the-first-5-principles-of-object-oriented-design-with-php-b6d2742c90d7" rel="nofollow noreferrer">SOLID</a>. SOLID outlines 5 rules to keep your code consise and maintainable. In this case by using the IoC we are enforcing (<strong>L</strong>) Liskovs substitution principle, (<strong>I</strong>) Interface segragation, and (<strong>D</strong>) Dependency Inversion.</p>
<p>An example.</p>
<pre><code>// app\Repositories\TrainingRepositoryInterface

interface TrainingRepositoryInterface {
    // No longer a static function
    public function create(Request $request)
}

// app\Repositories\TrainingRepository

class TrainingRepository implements TrainingRepositoryInterface {
    public function create(Request $request) {
        //
    }
}
</code></pre>
<p>With an interface we can bind it to an instance in a provider. We now have interface segregation.</p>
<pre><code>// AppProvider.php (register function only)

public function register() {
    $this-&gt;app-&gt;bind(TrainingRepositoryInterface::class, TrainingRepository::class);
}
</code></pre>
<p>We now have Liskovs substitution principle in place, we can use this to swap out <code>TrainingRepository</code> for another repository that has the same interface if we want to.</p>
<p>In your controller we can complete this implementation by injecting the interface now it is registered.</p>
<pre><code>// app\Http\Controllers\TrainingsController

class TrainingsController extends Controller {
    protected $trainingRepository;
    
    public function constructor(TrainingRepositoryInterface $trainingRepo) {
        $this-&gt;trainingRepository = $trainingRepo;
    }

    public function store(Request $request) {
        $this-&gt;trainingRepository-&gt;create($request);
        return view('home.training.show')
    }
}
</code></pre>
<p>Repeat the process with your other repositories:</p>
<ol>
<li>Create interfaces</li>
<li>Bind interfaces to concrete classes in a provider</li>
<li>Inject these repositories in the constructor of your training repository using the interfaces instead of manually instantiating them.</li>
</ol>
<p>You now have a de-coupled implementation with interface segregation, an inverted dependency model and all your instances are substitutable by switching out the instances in the IoC.</p>
<p>I hope this helps.</p>
    </div>