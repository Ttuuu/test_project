<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might want to experiment instead of <code>Roll</code> as the main object entity, try <code>Dice</code>. Generally speaking, in object oriented programming, we want to have the class that preferably maps to a specific object or in another word, prefer nouns for our classes over verbs. I do realize <code>Roll</code> can also be a noun but one can argue that it's just easily an action being taken place.</p>

<p>The reason why I suggest this is that this will likely help organize your functions and think about your objects more concretely. For example, if I'm thinking in term of a "Dice", what can I configure a dice with? Such as.. how many sides of a dice do I want? maybe, what are the faces of this dice? Another question would be, what type of actions can I do with a single dice? In your case, primarily we can "roll" a dice. Methods in a class is more intuitive with verbs or actions that the object can take. Also, our dice object can have interactions with other objects in the future, maybe we eventually want to build our chatbot to allow playing crabs or monopoly. We should theoretically be able to use the same <code>Dice</code> object as long as we keep its responsibilities very specific to what a dice can do.</p>

<p>Here is an example of how you may want to rearrange and hopefully, we will gain clarity and reusability:</p>

<pre><code>/* I encourage using ES6 classes, by the way you should prefer function
   expressions over function declarations as there are hoisting properties
   that may catch you by surprise and honestly it's rare to see.
*/

class Dice {
    constructor(numOfFaces) {
        this.numOfFaces = numOfFaces;
        this.faceUpValue = null;
    }

    roll() {
        this.faceUpValue = Math.floor(Math.random() * this.numOfFaces + 1);
        return this.faceUpValue; // this is arbitrary, I prefer this method to not return face up value;
    }

    value() {
        return this.faceUpValue;
    }
}

// I'm going to introduce this Roll class just to show how we may organize this code.
class Roll {
    constructor(numOfDice) {
        this.numOfDice = numOfDice;
        this.dices = [];
        const numOfFaces = 10;
        for(let i = 0; i &lt; numOfDice; i++) {
            // notice that we can create dices with different faces if we wanted
            const newDice = new Dice(numOfFaces);
            this.dices.push(newDice);
        }
    }

    doIt() {
        this.dices.forEach((dice) =&gt; {
            dice.roll();
        }
    }

    getDiceValues() {
        this.dices.map((dice) =&gt; {
            return dice.value();
        }
    }
}

// sample code, putting it all together
const numOfDices = 6;
const roller = new Roll(numOfDices);

roller.doIt();
console.log(roller.getDiceValues());

// reroll
roller.doIt();
console.log(roller.getDiceValues());
</code></pre>

<p>This illustration mostly just show how we can improve clarity and help us figure out where our code might go. In your original snippet, there is a lot functions just living on the global scope, we want to generally try to avoid those as much as possible. Generic functions generally are bad organization as it doesn't give any context to the function and the pattern definitely won't scale as we add more functionalities. Sometimes the trick is just figure out what new entity to create and code will often naturally find its place to where it belongs.</p>
    </div>