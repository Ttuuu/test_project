<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Only call <code>srand</code> <em>once</em>.  Continually reseeding it can result in non-random random numbers.</p>

<p>The statements in <code>ClearScreen</code> should be on separate lines.  With them all spread out like that it is hard to see what it is doing (which doesn't seem to actually clear the screen, just move the cursor to the top left of the console).</p>

<p>In <code>main</code>, the <code>if</code> statements should have curly braces because the two statement bodies are on multiple lines.  This can avoid future bugs when adding code.  It can also be condensed into one statement with the ternary operator.  And the two constants (20 and 40) can be turned into named constants so that no commentary would be necessary.</p>

<p>In <code>draw</code>, the checks for <code>x</code> or <code>y</code> equaling 1, height, or width can be removed and the <code>std::cout &lt;&lt; '#';</code> being placed outside the appropriate loop (modified to print the entire line of <code>'#'</code> characters for the top and bottom row).  Then you can create a local variable <code>char ch</code> to hold the character that you want to print, and have only one <code>std::cout &lt;&lt; ch</code> instead of repeating them.</p>

<p>In <code>eatFruit</code>, you don't need to determine the position of the new body segment.  Just increase the length of <code>snake</code> (copying in the value of the snake's last segment, since you'll draw again before you move), and the following call to <code>move</code> will update it when the previous end moves off of that spot.</p>

<p><code>generateFruit</code> can use a <code>do</code>/<code>while</code> loop instead of recursion.</p>

<p>You might also consider putting in the pause right after the <code>draw</code>, rather than after the <code>input</code>.  This may make the snake a bit more responsive to user input.</p>
    </div>