<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have to use <code>System.arraycopy()</code> to get best performance on array copies.</p>

<p>Another Small Point : Your point of 'final array can be less in size' is ignored during the 2d array creation. i.e., the second dimension cannot be <code>partitionSize</code>. It has to be dynamic based on the which partition it is.</p>

<p>The below code is high performance and also it is taking care of this last partition size also in the final returned 2d array.</p>

<pre><code>private static byte[][] partition2(byte[] in, int partitionSize)
{
    int partitionCount =  (int)Math.ceil((double)in.length / (double) partitionSize);

    byte[][] temp = new byte[partitionCount][];

    for (int p = 0; p &lt; partitionCount; p++)
    {
        int start = p * partitionSize;
        int len = (p != partitionCount - 1) ? partitionSize : in.length - start;
        byte[] partition = new byte[len];

        System.arraycopy(in, start, partition, 0, len);

        temp[p] = partition;
    }        

    return temp;
}
</code></pre>

<p>With this snippet, you will be able to feel the difference if the input array size is significant.</p>
    </div>