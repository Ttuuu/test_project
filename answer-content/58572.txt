<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After reading the answers from Stavros and Jesper, I decided to make some test of various implementation of this function. The results are shown at the end of the code, measured by the method: <code>timer:tc(test_pyth,testx,[N])</code>. I was surprised to see that the method 4 is slightly faster then the 3, and I was even more surprised to see that if I remove all the <code>when</code> guards it becomes a little slower.</p>

<p>The version from John is, in my opinion, a good compromise between code efficiency and coding effort (writing, reading, maintenance).</p>

<p>Re-reading the algorithm, I realize that I forgot to test the case <code>A + B + C =&lt; N</code> (a differnet problem tha the one I intent to solve...), so I have tested much longer lists. the initial code can be optimized like this:</p>

<pre><code>test2(M) -&gt;
    [{A,B,C} || A &lt;- lists:seq(1,M-2), B&lt;- lists:seq(A+1,max(M-A-1,A)), C &lt;- lists:seq(B+1,max(M-A-B,B)), A*A+B*B == C*C].
</code></pre>

<p><em>[edit]</em>
I add 2 tests compliant with john algorithm</p>

<pre><code>-module(test_pyth).


-export([test1/1,test2/1,test3/1,test4/1,test2b/1,test4b/1,test/0]).

test1(M)-&gt;
    Test = fun(i,i,i,i) -&gt; [];(A,B,C,R) when A*A+B*B == C*C -&gt; [{A,B,C}|R]; (_,_,_,R)-&gt;R end,
    L = fun(Max) -&gt;
            A1 = 1,
            A2 = Max-2,                
            L1 = fun L1(A,R) when A &gt; A2 -&gt; R;             
                L1(A,R) -&gt;
                    B2 = Max-1,
                    B1 = A+1,          
                        L2 = fun L2(B,Rb) when B &gt; B2 -&gt; Rb;    
                            L2(B,Rb) -&gt;
                                C2 = Max,
                                C1 = B+1,    
                                L3 = fun L3(C,Rc) when C &gt; C2 -&gt; Rc;
                                        L3(C,Rc) -&gt; L3(C+1,Test(A,B,C,Rc))          
                                end,                                 
                                L2(B+1,L3(C1,Rb))                    
                            end,                                      
                            L1(A+1,L2(B1,R))                          
                end,                                             
                L1(A1,[])                                        
    end,
    L(M).


test2(M) -&gt;
    [{A,B,C} || A &lt;- lists:seq(1,M-2), B&lt;- lists:seq(A+1,M-1), C &lt;- lists:seq(B+1,M), A*A+B*B == C*C].

test2b(M) -&gt;
    [{A,B,C} || A &lt;- lists:seq(1,M-2), B&lt;- lists:seq(A+1,max(M-A-1,A)), C &lt;- lists:seq(B+1,max(M-A-B,B)), A*A+B*B == C*C].

test3(M) -&gt; loop(1,M-2,[]).

loop(A,A2,R) when A &gt; A2 -&gt; R;
loop(A,A2,R) -&gt; loop(A+1,A2,loop(A,A+1,A2+1,R)).

loop(_A,B,B2,R) when B &gt; B2 -&gt; R;
loop(A,B,B2,R)-&gt; loop(A,B+1,B2,loop(A,B,B+1,B2+1,R)).

loop(_A,_B,C,C2,R) when C &gt; C2 -&gt; R;
loop(A,B,C,C2,R) when A*A+B*B == C*C -&gt; loop(A,B,C+1,C2,[{A,B,C}|R]);
loop(A,B,C,C2,R) -&gt; loop(A,B,C+1,C2,R).

test4(M) -&gt; loop4(1,M-2,[]).

loop4(A,A2,R) when A &gt; A2 -&gt; R;
loop4(A,A2,R) -&gt; loop4(A+1,A2,loop4(A,A+1,A2+1,R)).

loop4(_A,B,B2,R) when B &gt; B2 -&gt; R;
loop4(A,B,B2,R) -&gt; loop4(A,B+1,B2,loop4(A,B,B+1,B2+1,R)).

loop4(_A,_B,C,C2,R) when C &gt; C2 -&gt; R;
loop4(A,B,C,C2,R) -&gt; 
    case A*A+B*B -C*C of 
        0 -&gt; loop4(A,B,C+1,C2,[{A,B,C}|R]);
        _ -&gt;loop4(A,B,C+1,C2,R)
    end.


test4b(M) -&gt; loop4b(1,M-2,[],M).

loop4b(A,A2,R,_M) when A &gt; A2 -&gt; R;
loop4b(A,A2,R,M) -&gt; loop4b(A+1,A2,loop4b(A,A+1,M-A-A,R,M),M).

loop4b(_A,B,B2,R,_M) when B &gt; B2 -&gt; R;
loop4b(A,B,B2,R,M) -&gt; loop4b(A,B+1,B2,loop4b(A,B,B+1,M-A-B,R,M),M).

loop4b(_A,_B,C,C2,R,_M) when C &gt; C2 -&gt; R;
loop4b(A,B,C,C2,R,M) -&gt; 
    case A*A+B*B -C*C of 
        0 -&gt; loop4b(A,B,C+1,C2,[{A,B,C}|R],M);
        _ -&gt;loop4b(A,B,C+1,C2,R,M)
    end.


run_all(V) -&gt;
    L = [{_T1,R},{_T2,R},{_T3,R},{_T4,R},{_T5,R1},{_T6,R1}] = [run(T,V) || T &lt;- [test1,test2,test3,test4,test2b,test4b]],
    [X || {X,_R} &lt;- L].

run(T,V) -&gt;
    {T1,V1} = timer:tc(?MODULE,T,[V]),
    {T1/1000000,lists:sort(V1)}.

test() -&gt;
    T500 = run_all(500),
    T1000 = run_all(1000),
    io:format("%% testx(500)  -&gt; 1: ~5.2f, 2: ~5.2f, 3: ~5.2f, 4: ~5.2f, 2b: ~5.2f, 4b: ~5.2f~n", T500),
    io:format("%% testx(1000) -&gt; 1: ~5.2f, 2: ~5.2f, 3: ~5.2f, 4: ~5.2f, 2b: ~5.2f, 4b: ~5.2f~n", T1000).


%% non native compilation
%% testx(500)  -&gt; 1:  3.63, 2:  2.19, 3:  2.07, 4:  2.01, 2b:  0.37, 4b:  0.33
%% testx(1000) -&gt; 1: 29.61, 2: 17.64, 3: 16.55, 4: 16.00, 2b:  2.97, 4b:  2.66

%% native compilation
%% testx(500)  -&gt; 1:  1.03, 2:  0.64, 3:  0.35, 4:  0.23, 2b:  0.11, 4b:  0.03
%% testx(1000) -&gt; 1:  9.49, 2:  5.47, 3:  2.68, 4:  1.71, 2b:  0.91, 4b:  0.27
</code></pre>
    </div>