<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have much to say, but this stuff does look useful. The types are designed to be exposed to the world, so it's transparent to the consumer and could make the intentions clear.</p>

<p>There is one huge problem: </p>

<pre><code>public string Text { get; set; }
</code></pre>

<p>Anyone can change this value and by-pass all the rules: I assume this is a typo and you intended for this to be getter-only.</p>

<h2>General Stuff</h2>

<p>This all needs documenting, to explain what the different classes do. <code>SpaceIfNewLine</code> is one example that baffles me completely: I would expect <code>Line</code> to fail if someone threw a complete text at it. I don't like this behaviour, because we shouldn't allow the user to accidently overlook that and give them nonsensical but meaningful results to trip over later (fail fast and all that); if you want this behaviour, then it must be documented clearly. <code>NotMultiline</code> and <code>NoSpace</code> with <code>Word</code> make much more sense to me.</p>

<p>I don't like how you swap <code>null</code> or <code>""</code> and vice-versa in places. Perhaps this is completely necessary in your domain, but receiving a <code>null</code> all too often indicates a programming error (not necessarily on the part of the component that produces the <code>null</code> originally), and quietly coercing it obscures this from the caller.</p>

<p>The behaviour of <code>ValueObject&lt;T&gt;</code> really needs documentating: it is completely opaque to the consumer, and will create confusion if someone extends a class that extends it. <code>Word</code> etc. should probably be <code>sealed</code>.</p>

<h2>Exceptions</h2>

<p>The exceptions this produces will be cryptic: "Must be IsNullOrEmpty". I would ditch the <code>CallerMemberName</code> stuff and just force yourself to write a clear message, or atleast change it to $"String value violates rule {rule}" (where the grammar won't go funky) and rename it to a <code>TextRuleViolationException</code>, or something like that: it shoudn't be used by things that aren't 'rules', because then the message would be meaningless.</p>

<p>Buffering the <code>CallerMemberName</code> bit inside a <code>TextException Violated(string rule)</code> method in <code>String&lt;T&gt;</code> would avoid misuse of this otherwise public API from outside, and save you typing <code>new</code> in each rule, which you seem to be very keep to avoid.</p>

<p>There is also no provision for informing the user <em>what</em> was in violation: as it <code>first</code> or <code>last</code> that went wrong when I tried to create my name? Your code cannot adequately support the stringy constructor for <code>Name</code> (which I don't think should exist anyway) without some addition method to perform the conversion, catch the exception, and annotate it with the parameter name.</p>
    </div>