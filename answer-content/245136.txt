<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think I can review all of that, but here are some thoughts to your questions and some general remarks.</p>
<h1><code>const</code>/<code>let</code></h1>
<p>I would guess this is simply that your programming style colliding with the trend in JavaScript towards functional programming where mutability is an anti-pattern and generally avoided.</p>
<p>The first step to using <code>const</code> is to avoid reusing variables. This on the first look seems like it would introduce a lot of superfluous variables, but usually alternative syntaxes or patterns can get around that.</p>
<p>Just one example: Instead of</p>
<pre><code>let s = this.string;
s = s.replace(/^\/.*?[^\\]\//g, '');
s = s.replace(/^@@\/.*?[^\\]\//g, '@@');
</code></pre>
<p>one <em>could</em> write</p>
<pre><code>const s = this.string;
const s1 = s.replace(/^\/.*?[^\\]\//g, '');
const s2 = s1.replace(/^@@\/.*?[^\\]\//g, '@@');
</code></pre>
<p>or (in this case) better would be</p>
<pre><code>const s = this.string
            .replace(/^\/.*?[^\\]\//g, '')
            .replace(/^@@\/.*?[^\\]\//g, '@@');
</code></pre>
<h1><code>String.prototype</code></h1>
<p>Modifying a prototype is generally a bad idea. It affects all scripts globally and that's also the reason there is no way to "export" it: You can't limit it to just your script. It effects all scripts in the same environment, which can lead to unexpected errors.</p>
<p>In your case it's not really needed IMO anyway. Using <code>left(length)</code> doesn't give much more information than just <code>slice(0, length)</code>, and <code>right(length)</code> can similarly be expressed as <code>slice(-length)</code>.</p>
<p>If you do prefer separate functions just use regular functions.</p>
<p>BTW, <code>x.left(2) === "##"</code> can be better expressed as <code>x.startsWith("##")</code>.</p>
<h1><code>throw</code></h1>
<p>Yeah, this is bad. Combined with setting the state of the class the execution and data flow is completely in-transparent for the reader. A better understandable (albeit verbose) way would be to have each function return a status and after calling it check if the status requires aborting. Something like this pseudo code:</p>
<pre><code>_categorizeSyntax() {
    const commentStatus = this._lookForComments();
    if (isFinished(commentStatus)) { return commentStatus; }

    const domainStatus = this._lookForDomains();
    if (isFinished(domainStatus)) { return domainStatus; }

   // etc.
}

_lookForComments() {
    if ( this.toParse.left(2) === "!#" ) {
        this.syntax['uboPreParsingDirective'] = this.string;
        return { isValid: "not sure" };
    }    
    // etc.
 }

 isFinished(result) {
      return result.hasOwnProperty("isValid");
 }
</code></pre>
<h1><code>class</code></h1>
<p>A thing that plays into this is the use of a class. I believe having all functionality in the constructor and using the class as a "data dump" is an anti-pattern, but I can't find a proper name for it.</p>
<p>It would be better to put the logic in a regular function that in the end returns an plain data object containing the result of the parsing.</p>
<p>Generally functions are much better readable if they <em>only</em> reads its parameters (and not read from the "global" state) and <em>only</em> return data (instead of mutating the "global" state) - so-called "pure" functions.</p>
<p>The state could be, for example, instead passed around as a parameter (again pseudo code):</p>
<pre><code>_categorizeSyntax({string: "The string to be parsed"}) // Inital state.

_categorizeSyntax(state) {
    const commentState = this._lookForComments(state);
    if (isFinished(commentState)) { return commentState; }

    const domainState = this._lookForDomains(commentState);
    if (isFinished(domainState)) { return domainState; }

   // etc.
   return state;
}

_lookForComments(state) {
    if ( state.string.left(2) === "!#" ) {
        return {
           ...state,
           syntax: { "uboPreParsingDirective": state.string },
           isValid: "not sure"
        };
    }    
    // etc.
    return state;
 }

 isFinished(result) {
      return result.hasOwnProperty("isValid");
 }
</code></pre>
<p>Another way to do it would be use the functional "either" pattern/monad, but that would too much here.</p>
<h1><code>getRichText</code>/<code>escapeHTML</code></h1>
<p>Some final thoughts about <code>getRichText</code> and <code>escapeHTML</code> (although there aren't seemed to used in this code):</p>
<p>It would be better to use existing libraries or built in functionality for standardized things like <code>escapeHTML</code>. If this code runs in a browser it would make sense to let the browser build the HTML. Depending what you are doing with the created HTML elements it also would make sense to directly return a list of DOM elements instead of HTML in strings. For example:</p>
<pre><code>getRichText() {
        const elements = [];
        for ( let key in this.syntax ) {
            if ( this.syntax[key] ) {
                const span = document.createElement("span");

                span.classList.add(key);
                if ( ! this.isValid || this.isValid === "mismatch" ) {
                    span.classList.add("error");
                }

                // Use Unicode non-breaking space instead of HTML entity
                const text = this.syntax[key].replace(/ /g, "\u00A0");
                span.textContent = text;

                elements.push(span);
            }
        }
        return elements;
    }
}
</code></pre>
<p>If needed the text representation of a DOM element can be got with <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML" rel="nofollow noreferrer"><code>.outerHTML</code></a>.</p>
<p>And if the code isn't running in a browser or you really want a string instead of DOM elements, then you should consider a template engine.</p>
    </div>