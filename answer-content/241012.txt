<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<hr>

<h2><code>or-l</code> Is a Poor Name</h2>

<hr>

<p>The OP procedure <code>or-l</code> is correct in that it yields correct results for its inputs. This <code>or-l</code> short-circuits only in the sense that recursive calls through the provided arguments cease when a true value is encountered; yet, this is not the behavior of <a href="https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29" rel="nofollow noreferrer"><code>or</code></a>, which is a <em>special form</em>. The <code>or-l</code> procedure always evaluates <em>all</em> of its arguments, where the <code>or</code> special form evaluates its arguments sequentially until a true value is encountered.</p>

<p>Consider:</p>

<pre class="lang-none prettyprint-override"><code>scratch.rkt&gt; (or #t (/ 1 0))
#t
scratch.rkt&gt; (or-l #t (/ 1 0))
; /: division by zero
</code></pre>

<p>Here <code>or</code> does not evaluate <code>(/ 1 0)</code> because it is a special form which only evaluates forms as needed. But, <code>or-l</code> is a <em>procedure</em> which always evaluates all of its arguments; <code>(/ 1 0)</code> is evaluated before the procedure body is entered, and this evaluation results in an error.</p>

<p>The name <code>or-l</code> should be reconsidered. The name suggests that this procedure applies <code>or</code> to a list, which it does not; it applies <code>or</code> to an unspecified number of arguments. It would be better, perhaps, to call it <code>or-proc</code> to emphasize that it behaves similarly to <code>or</code>, but that it is a procedure and thus evaluates its arguments.</p>

<hr>

<h2>A Better Way</h2>

<hr>

<p>OP has written a somewhat lengthy recursive function which is then applied via <code>map</code> and an anonymous function to a list of boolean lists to achieve OP goal:</p>

<pre><code>(define or-proc
  (lambda x
    (if (null? x)
        #f
        (if (car x)
            #t
            (apply or-proc (cdr x))))))
</code></pre>

<pre class="lang-none prettyprint-override"><code>(map (lambda (x) (apply or-proc x)) '((#t #t) (#f #t) (#t #f) (#f #f)))
'(#t #t #t #f)
</code></pre>

<p>A simpler and cleaner approach would be to take advantage of built-in Racket features such as <a href="https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._ormap%29%29" rel="nofollow noreferrer"><code>ormap</code></a>. Note that <code>(ormap identity '(#t #f))</code> is equivalent to <code>(or (identity #t) (identity #f))</code>, i.e. <code>(or #t #f)</code>.</p>

<p>With this in mind, here is a better <code>or-l</code> procedure which actually takes a list argument:</p>

<pre><code>(define (or-l xs)
  (ormap identity xs))
</code></pre>

<p>This procedure can be used more cleanly with the list-of-lists input provided by OP:</p>

<pre class="lang-none prettyprint-override"><code>scratch.rkt&gt; (map or-l '((#t #t) (#f #t) (#t #f) (#f #f)))
'(#t #t #t #f)
</code></pre>
    </div>