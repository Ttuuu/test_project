<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Single letter names should be used sparingly, especially <code>l</code> as it can be mistaken for uppercase <code>i</code> or the number one. Also you should add spaces either side of the arithmetic operators you're using.</p>

<p>You're just printing the <code>count</code> result. If you're printing a result of a calculation, at the very least wrap it in some text or print the input alongside it so the user can parse what the number means:</p>

<pre><code>print ("{} result: {}".format(number, count))
</code></pre>

<p>But what if you want to use the count for something? Generally speaking, printing the result of a calculation is often throwing away work. You should return a list of the counts, and then you could print that returned list if that's all you want.</p>

<p>You could also simplify your loop using the built in <code>sum</code> function with a generator expression. A generator is like a <code>for</code> loop collapsed into a one line expression. Here's how it could look:</p>

<pre><code>digits = str(number)
count = sum(number % (int(digit)) == 0 for digit in digits) 
</code></pre>

<p>What this does is evaluates each number like your <code>for</code> loop and creates a boolean value. However it also gets the sum result of all of these booleans. Python can coerce a boolean to an integer (where <code>False</code> is <code>0</code> and <code>True</code> is <code>1</code>), so you'll get the sum result you want. <em>Except</em> that you also need to ignore when it's <code>0</code>. You can do that by adding an <code>if</code> at the end of your generator expression, and if that condition evaluates as <code>False</code> then Python skips that value.</p>

<pre><code>count = sum(number % (int(digit)) == 0 for digit in digits if number != '0') 
</code></pre>

<p>Though I'd split that over two lines as you should try keep to a 79 character limit. Now that we're doing this, I'd personally think it's better to make <code>digits</code> a list of the integers, rather than converting them in your calculation. It would involve a list comprehension, which is a lot like a generator expression above but it creates a full list of the values. You just need to turn the integer into a string, then that string into a list and then each element of the list into an integer.</p>

<pre><code>digits = [int(i) for i in list(str(number))]
</code></pre>

<p>This gives you the count in one line, and you could condense the function to only a few lines:</p>

<pre><code>def count_div_digits(nums):
    results = []
    for number in nums:
        digits = [int(i) for i in list(str(number))]
        results.append(sum(number % digit == 0 for digit in digits
                           if number != 0))
    return results
</code></pre>
    </div>