<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Validate your inputs</h3>

<p>As <a href="https://codereview.stackexchange.com/users/3219/glenn-jackman">@glenn-jackman</a> pointed out, validate your inputs.
If the script argument should be either 0 or 1,
then enforce that rule, by checking the value,
and exit with an error if it's some other value.
It's always good to fail early,
for example to avoid confusing crashes later due to an unexpected value,
or to avoid doing unnecessary work.</p>

<h3>Look for corner cases</h3>

<p>The script increases or decreases brightness in increments of 0.2,
unless the value is 1.0 or 0.2.
This is fragile.
What if the current value is 0.9?
The script will not prevent going to 1.1, 1.3, ..., or 0.1, -0.1, ..., and so on.
This is a bug waiting to happen.</p>

<p>To correctly enforce upper and lower limits,
you need an appropriate technique.
As you discovered, Bash cannot do floating point math.
I would recommend Awk instead.
It's lightweight and universally available.</p>

<h3>Always double-quote variables in program arguments</h3>

<p>As a good rule of thumb,
always double-quote variables used in program arguments,
for example here:</p>

<blockquote>
<pre><code>if [ $current_brightness != "1.0" ]; then                                                    
...

xrandr --output eDP-1-1 --brightness $new_brightness
</code></pre>
</blockquote>

<p>Write like this instead:</p>

<pre><code>if [ "$current_brightness" != "1.0" ]; then                                                    
...

xrandr --output eDP-1-1 --brightness "$new_brightness"
</code></pre>
    </div>