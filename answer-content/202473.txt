<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How can I print 64-bit decimal numbers in freestanding environment?<br>
  suggests me some improvements...</p>
</blockquote>

<p><strong>Create test cases</strong></p>

<p>Post lacks a good way to assess its correctness.  Since the goal is to <em>print</em> rather than form a <em>string</em>, that is later printed, (a better function IMO), we will do things the simply, but a bit the hard way and visually compare output.</p>

<p>Test case code</p>

<pre><code>#include &lt;inttypes.h&gt;
#include &lt;limits.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;

void print_uint64_dec(uint64_t u) {
  if (u &gt;= 10) {
    uint64_t udiv10 = u/10;
    u %= 10;
    print_uint64_dec(udiv10);
  }
  putchar((int)u + '0');
}

void print_int64_dec(int64_t i) {
  uint64_t u = (uint64_t) i;
  if (i &lt; 0) {
    putchar('-');
    u = -u;
  }
  print_uint64_dec(u);
}

int main(void) {
  int64_t ia[] = {INT64_MIN + 1, 0, 10, INT64_MAX/2, INT64_MAX - 1};
  for (size_t index = 0; index&lt; sizeof ia/sizeof ia[0]; index++) {
    int64_t i = ia[index];
    print_int64_dec(i-1); putchar('\n');
    print_int64_dec(i+0); putchar('\n');
    print_int64_dec(i+1); putchar('\n');
  }
}
</code></pre>

<p>And its output:</p>

<pre><code>-9223372036854775808
-9223372036854775807
-9223372036854775806
-1
0
1
9
10
11
4611686018427387902
4611686018427387903
4611686018427387904
9223372036854775805
9223372036854775806
9223372036854775807
</code></pre>

<p>OP code produced the same results.</p>

<hr>

<p><strong>Plan for the future</strong></p>

<p>"processor doesn't have 64 bit division, and I can't rely on libgcc" --&gt; accepting this as a given, this curious restriction could easily be removed later.  To that end, recommend to encapsulate this specialized code - <strong>and only the specialized part needed</strong> - the divide and mod of a <code>int64_t</code>, without the print part.</p>

<p>Something like</p>

<pre><code>static unsigned mod10(uint64_t *u) {
  uint64_t dividend = *u;
  uint64_t quo = 0;
  uint64_t div = 0xA000000000000000; //largest shifted 10
  while (div &gt;= 10) {
    quo &lt;&lt;= 1; // quo *= 2;
    if (dividend &gt;= div) {
      dividend -= div;
      quo++;
    }
    div &gt;&gt;= 1;
  }
  *u = quo;
  return (unsigned) dividend;
}

void print_uint64_dec(uint64_t u) {
  if (u &gt;= 10) {
    #if CURIOUS_CODE_NEEDED
      uint64_t udiv10 = u;
      u = mod10(&amp;udiv10);
    #else
      uint64_t udiv10 = u/10;
      u %= 10;
    #endif
    print_uint64_dec(udiv10);
  }
  putchar((int)u + '0');
}
</code></pre>

<hr>

<p><strong>Simplify</strong></p>

<p>I just had too much trouble following the "invented other way".  I recommend to  re-write to <strong>only replace</strong> the missing /10, mod 10 functionality in  a stand-alone function.  When a target platform lacks standard functionality, do not entangle your fill-in-the-gap code with the rest of user code.  Keep them separate.</p>

<hr>

<p><strong>Minor - Use consistent types</strong></p>

<p>Code   converts <code>intmax_t</code> to <code>uint64_t</code> as if  <code>intmax_t</code> is always a 64-bit type.  <code>(u)intmax_t</code> is at least a 64-bit type.  Choose <code>(u)intmax_t</code> or <code>(u)int64_t</code>.</p>

<p><strong>Minor - Avoid UB</strong></p>

<p><code>intmax_t num ... -num</code> is UB when <code>num == INTMAX_MIN</code>.  Simply enough to fix. Negate an <em>unsigned</em> type</p>

<pre><code>// uint64_t n = num &lt; 0 ? -num : +num;
uint64_t n = num;
if (num &lt; 0) n = -n;
// OR
uint64_t n = num &lt; 0 ? -(uintmax_t)num : num;
// Or various other approaches.
</code></pre>

<p><strong>Minor - Missing  headers</strong></p>

<p>I needed the below to compile your code.</p>

<pre><code>#include &lt;limits.h&gt;
#include &lt;stdint.h&gt;
</code></pre>
    </div>