<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since this is the fifth answer I shall try not to repeat many things that have already been said.</p>

<hr>

<blockquote>
<pre><code>    public void addAll(int index, CustomDoubleLinkedList list) {
        int originalSize = list.size();
        if (originalSize &gt; 0) {
</code></pre>
</blockquote>

<p>If this were instead <code>if (originalSize == 0) return;</code> then the rest of the method could save one level of indentation.</p>

<blockquote>
<pre><code>            if (index == originalSize) {
</code></pre>
</blockquote>

<p>I don't understand this line at all, and I think it might be buggy. Why compare an index into this list with the length of the other one?</p>

<blockquote>
<pre><code>            for (int i = 0; i &lt; originalSize; i++) {
                E e = (E) list.get(i);
</code></pre>
</blockquote>

<p>There are two big problems with that line. Firstly, <code>list.get(i)</code> on a linked list inside a loop. This turns a method which should take linear time into a method which takes quadratic time. Secondly, the cast: this would be unnecessary if the argument were properly typed (as <code>CustomDoubleLinkedList&lt;? extends E&gt;</code>).</p>

<hr>

<blockquote>
<pre><code>    public void clear() {
        /*
         * Realmente podríamos eliminar el primero, el último y poner el tamaño a 0,
         * pero de esta forma nos aseguramos liberar memoria
         */
        CustomNode&lt;E&gt; cn = this.first;
        for (int i = 0; i &lt; this.length; i++) {
            CustomNode&lt;E&gt; next = cn.nextItem;
            cn.item = null;
            cn.nextItem = null;
            cn.prevItem = null;
            cn = next;
        }
        this.first = null;
        this.last = null;
        this.length = 0;
    }
</code></pre>
</blockquote>

<p>The reasoning in the comment assumes either that the class is somehow leaking its nodes (in which case you should fix that problem instead) or that the garbage collector is broken (which is highly unlikely). So this turns a method which should take constant time into a method which takes linear time for no good reason.</p>

<hr>

<blockquote>
<pre><code>    /**
     * Elimina todos los elementos que coincidan
     *
     * @param element
     */
    public void remove(Object element) {
        for (int i = 0; i &lt; this.length; i++) {
            CustomNode&lt;E&gt; node = searchNode(i);
</code></pre>
</blockquote>

<p>Was this really what the spec asked for? <code>java.util.Collection.remove</code> removes one instance (and returns a <code>bool</code> indicating whether it found one to remove or not).</p>

<p>Also, this has the same problem of turning a linear method into a quadratic one by using <code>searchNode</code> inside a loop.</p>

<hr>

<blockquote>
<pre><code>    public int indexOf(E element) {
        int index = -1;
        for (int i = 0; i &lt; this.length; i++) {
            // for (CustomNode&lt;E&gt; node = first; node != null; node = node.nextItem) {
            CustomNode&lt;E&gt; node = searchNode(i);
</code></pre>
</blockquote>

<p>Same problem. In fact, worse: it seems that you commented out the correct solution, which might make the interviewer think that you couldn't get it to work.</p>

<hr>

<blockquote>
<pre><code>            CustomNode&lt;E&gt; aux = last;
            return aux;
</code></pre>
</blockquote>

<p>Why not just <code>return last;</code>?</p>

<hr>

<blockquote>
<pre><code>    private void deleteNode(CustomNode&lt;E&gt; node) {
        final E element = node.item;
</code></pre>
</blockquote>

<p>What's <code>element</code> for?</p>

<hr>

<p>While I can't be sure what the interviewer meant by "academic", I think it's very probable that they expected to see every method implemented with the best possible asymptotic complexity.</p>
    </div>