<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To get you started:</p>

<hr>

<h1>Naming</h1>

<p>Hungarian notation (e.g., <code>bValid</code>) is not generally used in C++.  C++ is a statically typed language, so the compiler will do type checking.  Also, the common naming scheme in C++ is:</p>

<ul>
<li><p><code>snake_case</code> for variables and functions;</p></li>
<li><p><code>CamelCase</code> (or <code>Like_this</code>) for classes; and</p></li>
<li><p><code>ALL_CAPS</code> for macros.</p></li>
</ul>

<p>You can come up with your own naming scheme if you have a good reason, but sticking to the common one is better in general.</p>

<p>Macro names are not subject to scopes, so avoid common names like <code>Item_hpp</code> (or <code>ITEM_HPP</code>).  You can append a <a href="https://www.random.org/strings/?num=1&amp;len=10&amp;digits=on&amp;upperalpha=on&amp;loweralpha=on&amp;format=plain" rel="nofollow noreferrer">random string</a>: <code>ITEM_HPP_h0hCHfEa5Y</code>.</p>

<p><code>Item</code> and <code>Items</code> are way too similar.  Consider using a distinctive name such as <code>Collection</code> instead of <code>Items</code> for clarity.</p>

<hr>

<h1><code>ContinueOptions</code></h1>

<p>This function should be named <code>confirm_continue</code> because it simply forces the user to press <code>Y</code> and then continue.  If the user chooses not to continue, the system says "Please try again." (<em>sad face</em>)</p>

<blockquote>
<pre><code>//When called this asks the user how many items they would like to add and the item number has to be greater than 5.
//Through the parameter is passed a vector of items.
</code></pre>
</blockquote>

<p>???  Not sure what that means ...</p>

<p><code>cInputCommandPrompt</code> is not a good name because it stores the input rather than the prompt (which is what you show to the user).  <code>input</code> is enough.</p>

<p>This is a bit scary:</p>

<blockquote>
<pre><code>std::toupper(static_cast&lt;unsigned char&gt;(cInputCommandPrompt))
</code></pre>
</blockquote>

<p>Technically yes, this prevents UB.  I never saw that before (and never wrote that), but it's right the more I think about it.  You can declare the variable as <code>unsigned char</code> in the first place.  Or just use <code>char</code> ...</p>

<p><code>"Press ""y"" to continue: "</code> is equivalent to <code>"Press y to continue"</code>.  You are concatenating three string literals.</p>

<p><code>#include &lt;cctype&gt;</code> is missing for <code>std::toupper</code>.  Also, <code>std::tolower</code> is more commonly used for case-insensitive comparison.</p>

<p>Also, the logic is a bit convoluted.  Here's an attempt at simplification:</p>

<pre><code>// requires '#include &lt;limits&gt;'
constexpr auto stream_max = std::numeric_limits&lt;std::streamsize&gt;::max();

template &lt;typename T&gt;
auto&amp; input(std::string_view prompt, T&amp; value) // requires '#include &lt;string_view&gt;'
{
    std::cout &lt;&lt; prompt;
    return std::cin &gt;&gt; value;
}

void confirm_continue()
{
    char ch{};
    while (!input("Press 'y' to continue: ", ch) &amp;&amp; std::tolower(ch) == 'y') {
        std::cin.clear();
        std::cin.ignore(stream_max, '\n'); // has special meaning
        std::cout &lt;&lt; "Please try again.\n";
    }
}
</code></pre>

<p>This is arguably clearer.  See <a href="https://en.cppreference.com/w/cpp/io/basic_istream/ignore" rel="nofollow noreferrer">cppreference</a> for the use of <code>stream_max</code>.</p>

<hr>

<h1><code>AdditionalMenu</code></h1>

<p>The advertised <code>2. Search for specific item</code> functionality results in <code>Invalid input. Try again!</code>.  At least use something like <code>Coming soon ...</code>.</p>

<p>The two kinds of invalid input can be unified somehow.</p>

<p>Similar simplification:</p>

<pre><code>void additional_menu(Items&amp; items)
{
    while (true) {
        int option{};
        if (input("Enter a number from the additional menu: ", option)) {
            switch (option) {
            case 0:
                return;                             // exit additional menu
            case 1:
                items.DeleteAnItem();
                confirm_continue();
                continue;
            case 2:
                std::cout &lt;&lt; "Coming soon ...\n\n";
                continue;
            }
        } else {
            std::cin.clear();
            std::cin.ignore(stream_max, '\n');
        }
        std::cout &lt;&lt; "Invalid input. Try again!\n";
    }
}
</code></pre>

<p>The <code>main</code> function can be simplified analogously.</p>

<hr>

<p><code>Item</code></p>

<p>Only <code>#include</code> necessary headers.  You only need <code>&lt;string&gt;</code>.</p>

<p>The <code>Item</code> class doesn't maintain any class invariant, so use an <a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" rel="nofollow noreferrer">aggregate</a> (which is basically an all-public class) to get rid of the constructor and observer functions:</p>

<pre><code>#include &lt;string&gt;

struct Item {
    std::string name;
    double price;
    int quantity_sold;

    const double sale() const noexcept
    {
        return price * quantity_sold;
    }
};
</code></pre>

<p>Now the <code>Item.cpp</code> file can be removed.</p>

<hr>

<h1><code>Items</code></h1>

<p>As I said before, rename to <code>Collection</code> or something like that.
And rename <code>ItemsVec</code> to <code>items</code>.</p>

<p>Comments like <code>//The vector&lt;Items&gt;ItemsVec is private so only member functions/procedures have access to it.</code> are unnecessary because competent programmers are familiar with the basic language constructs.</p>

<p>Now the individual functions:</p>

<h2>Delete an item</h2>

<p><code>std::cin.ignore();</code> ignores <strong>one character</strong>, not "anything that is left" ;)
Use <code>std::cin &gt;&gt; std::ws</code> instead.  Consider handling invalid input?</p>

<p>Use <a href="https://en.cppreference.com/w/cpp/algorithm/find" rel="nofollow noreferrer"><code>std::find_if</code></a> (requires <code>#include &lt;algorithm&gt;</code>) + <a href="https://en.cppreference.com/w/cpp/language/lambda" rel="nofollow noreferrer">lambda</a> to find the item:</p>

<pre><code>bool Items::delete_item()
{
    std::string name;
    std::cout &lt;&lt; "Input name of item that you wish to delete: ";
    getline(std::cin &gt;&gt; std::ws, name);

    auto it = std::find_if(items.begin(), items.end(),
                           [&amp;](const Item&amp; item) { return item.name == name; });
    if (it == items.end()) { // not found
        std::cout &lt;&lt; "We couldn't find the item you're trying to delete\n";
        return false;
    } else {
        items.erase(it);
        std::cout &lt;&lt; name &lt;&lt; " has been deleted.\n";
        return true;  
    }
}
</code></pre>

<h2>Check for existence</h2>

<p>It should be <code>ensure_nonexistent</code> based on the return value.</p>

<p>Similarly:</p>

<pre><code>bool Items::ensure_nonexistent(std::string name)
{
    auto it = std::find_if(items.begin(), items.end(),
                           [&amp;](const Item&amp; item) { return item.name == name; });
    if (it == items.end()) {
        return true;
    } else {
        std::cout &lt;&lt; "Try again! There's already an item with that name.\n";
        return false;
    }
}
</code></pre>

<h2>Add new item</h2>

<p>The function can be simplified analogously, but note that this:</p>

<pre><code>Item NewItem(sInputName, dInputSalePrice, iInputQuantity);
ItemsVec.push_back(NewItem);
</code></pre>

<p>introduces overhead by copying the item.  Use move semantics:</p>

<pre><code>Item item{/* ... */};
items.push_back(std::move(item)); // #include &lt;utility&gt;
</code></pre>

<p>or simply:</p>

<pre><code>items.push_back(Item{name, price, quantity});
</code></pre>

<h2><code>GetItemInformation</code></h2>

<p>The name is deceptive!  It's actually <code>add_items</code>.</p>

<h2>Calculate total quantity</h2>

<p>Make the function <code>const</code>.  Use <a href="https://en.cppreference.com/w/cpp/algorithm/accumulate" rel="nofollow noreferrer"><code>std::accumulate</code></a>: (<code>#include &lt;numeric&gt;</code>)</p>

<pre><code>int Items::total_quantity_sold() const noexcept
{
    return std::accumulate(items.begin(), items.end(), 0,
        [](int sum, const Item&amp; item) { return sum + item.quantity_sold; });
}
</code></pre>

<p>Similarly for <code>CalculateTotalSales</code>.</p>

<h2>Most / least sold item</h2>

<p>Similarly, use <a href="https://en.cppreference.com/w/cpp/algorithm/max_element" rel="nofollow noreferrer"><code>max_element</code></a> and <a href="https://en.cppreference.com/w/cpp/algorithm/mix_element" rel="nofollow noreferrer"><code>min_element</code></a>:</p>

<pre><code>int Items::most_sold_index() const noexcept
{
    auto it = std::max_element(items.begin(), items.end(),
        [](const Item&amp; lhs, const Item&amp; rhs)
        {
            return lhs.quantity_sold &lt; rhs.quantity_sold;
        });
    return it - items.begin();
}
int Items::least_sold_index() const noexcept
{
    auto it = std::min_element(items.begin(), items.end(),
        [](const Item&amp; lhs, const Item&amp; rhs)
        {
            return lhs.quantity_sold &lt; rhs.quantity_sold;
        });
    return it - items.begin();
}
</code></pre>

<p><code>int</code> is actually not the correct type for indexes.  It doesn't matter in this case, but <code>std::vector&lt;Items&gt;::size_type</code> is better.  Or <code>std::vector&lt;Items&gt;::const_iterator::difference_type</code> ...</p>

<h1>Other calculations</h1>

<p>Instead of the verbose</p>

<blockquote>
<pre><code>double Items::CalculateEstimatedOperationalCost()
{
    double dTotalSales = CalculateTotalSales();
    double dEstimatedOperationalCost = dTotalSales * 0.5;
    return dEstimatedOperationalCost;
}
double Items::CalculateTaxPaid()
{
    double dTaxPaid = CalculateTotalSales() * 0.2;
    return dTaxPaid;
}
double Items::CalculateProfit()
{
    double dTotalProfit = 0;
    double dTotalSales = CalculateTotalSales();
    dTotalProfit = dTotalSales - CalculateTaxPaid() - CalculateEstimatedOperationalCost();
    return dTotalProfit;
}
</code></pre>
</blockquote>

<p>Do</p>

<pre><code>double Items::estimated_operational_cost() const
{
    return total_sales() * 0.5;
}
double Items::tax() const
{
    return total_sales() * 0.2;
}
double Items::profit()
{
    return total_sales() - tax() - estimated_operational_cost();
}
</code></pre>

<p>This is a <em>lot</em> better.</p>

<hr>

<h1>Miscellaneous</h1>

<p>Sort <code>#include</code> directives in alphabetical order to ease navigation.</p>
    </div>