<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You cannot be faster than the library doing operations one bit at a time.</p>

<p>If you want to be fast first understand that the hardware itself does addition in 32-bit or 64-bit integer sizes.  So you should be doing so also.  If you check the implementation of Java's BigInteger class, you will find it internally stores the BigInteger as an integer array.  This is because Java already optimized addition for the underlying hardware.</p>

<p>Secondly, as pointed out in the previous answer, at the end of addition, you need a while loop which continues doing carries as long as adding 1 to the next bit (or 32/64-bit word) causes another carry.</p>

<p>You can make code faster than Java's BigInteger class but in the case of addition, you simply will not gain much as everything is already optimized for this trivial operation.  If mutability is desired then making your own BigInteger class which allows this could speed things up, but you will have to rewrite your code to do the math with hardware optimized sizes and not individual bits.</p>

<p>For example of addition, using arrays of integers and even better multiplication which can be much faster than the O(n^2) of Java BigInteger, see this code:
<a href="https://github.com/tbuktu/ntru/blob/master/src/main/java/net/sf/ntru/arith/Sch%C3%B6nhageStrassen.java" rel="nofollow noreferrer">https://github.com/tbuktu/ntru/blob/master/src/main/java/net/sf/ntru/arith/Sch√∂nhageStrassen.java</a></p>
    </div>