<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have suggestions for you.</p>

<ol>
<li><p>The <code>unvisited</code> should be renamed <code>unvisitedIndexes</code> in my opinion.</p></li>
<li><p>I suggest that you create a method to build the <code>unvisited</code> set to separate the logic from the main method.</p></li>
</ol>

<pre class="lang-java prettyprint-override"><code>public static int friendsCircle(char[][] friends) {
   Set&lt;Integer&gt; unvisited = buildUnvisitedSet(friends);
}

private static Set&lt;Integer&gt; buildUnvisitedSet(char[][] friends) {
   Set&lt;Integer&gt; unvisited = new HashSet&lt;&gt;();
   for (int i = 0; i &lt; friends.length; i++) {
      unvisited.add(i);
   }
   return unvisited;
}
</code></pre>

<ol start="3">
<li><p>Instead of using <code>visited[currVertex] == false</code> and <code>visited[i] == false</code>, you can use <code>!visited[currVertex]</code> and <code>!visited[i]</code>.</p></li>
<li><p>You can make a method to check if the current node is visited or not, instead of handling the array each time.</p></li>
</ol>

<pre class="lang-java prettyprint-override"><code>public static int friendsCircle(char[][] friends) {
   //[...]
   if (isNotVisited(visited, currVertex)) {
      //[...]
   }
   //[...]
}

public static boolean isNotVisited(boolean[] visited, int index) {
   return !visited[index];
}
</code></pre>

<ol start="5">
<li>I suggest that you extract the logic that finds the friend position in a method, this will make the code shorter and easier to read.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>public static int friendsCircle(char[][] friends) {
   //[...]
   int friendPosition = findFriendPosition(friends, visited, currVertex);
   if (friendPosition != -1) {
      stack.push(friendPosition);
   }
   //[...]
}

private static int findFriendPosition(char[][] friends, boolean[] visited, int currVertex) {
   for (int i = 0; i &lt; friends[currVertex].length; i++) {
      if (friends[currVertex][i] == 'Y' &amp;&amp; isNotVisited(visited, i)) {
         return i;
      }
   }
   return -1;
}
</code></pre>

<h2>Refoctored code</h2>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
   char[][] friends = {
      {'Y', 'Y', 'N', 'N'},
      {'Y', 'Y', 'Y', 'N'},
      {'N', 'Y', 'Y', 'N'},
      {'N', 'N', 'N', 'Y'}
   };
   System.out.println(friendsCircle(friends));
}

public static int friendsCircle(char[][] friends) {

   boolean[] visited = new boolean[friends.length];
   Set&lt;Integer&gt; unvisitedIndexes = buildUnvisitedSet(friends);

   Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();
   int connectedComponents = 0;

   // dfs on friends matrix
   while (!unvisitedIndexes.isEmpty()) {
      stack.push(unvisitedIndexes.iterator().next());
      connectedComponents++;

      while (!stack.isEmpty()) {
         int currVertex = stack.pop();

         if (isNotVisited(visited, currVertex)) {
            visited[currVertex] = true;
            unvisitedIndexes.remove(currVertex);

            int friendPosition = findFriendPosition(friends, visited, currVertex);
            if (friendPosition != -1) {
               stack.push(friendPosition);
            }
         }
      }
   }

   return connectedComponents;
}

private static int findFriendPosition(char[][] friends, boolean[] visited, int currVertex) {
   for (int i = 0; i &lt; friends[currVertex].length; i++) {
      if (friends[currVertex][i] == 'Y' &amp;&amp; isNotVisited(visited, i)) {
         return i;
      }
   }
   return -1;
}

public static boolean isNotVisited(boolean[] visited, int index) {
   return !visited[index];
}

private static Set&lt;Integer&gt; buildUnvisitedSet(char[][] friends) {
   // The only alternative I could think of, instead of
   // tracking unvisited nodes, was to put visited nodes
   // in a set and then do setOfAllNodes.removeAll(visited)
   // to see which nodes are still unvisited
   Set&lt;Integer&gt; unvisited = new HashSet&lt;&gt;();
   for (int i = 0; i &lt; friends.length; i++) {
      unvisited.add(i);
   }
   return unvisited;
}
</code></pre>
    </div>