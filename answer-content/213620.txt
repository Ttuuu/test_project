<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some comments, with security issues <strong>highlighted:</strong></p>

<ul>
<li>Why would you remove whitespace from URLs? It is perfectly valid for URLs to contain whitespace, unencoded or encoded as <code>+</code> or <code>%20</code>. <strong>If your backend code can't handle whitespace there are much bigger fish to fry.</strong> In general:

<ul>
<li>Blacklisting is more dangerous than whitelisting, because it's easy to omit some values.</li>
<li>Whitelisting parts of values (such as characters in a URL) is more dangerous than whitelisting entire values, because clever hackers often find a way to escape the sandboxing attempt by combining parts. For example, depending on how you pass values to your backend, <code>%20</code> in a URL may or may not be replaced with a space character.</li>
<li>Blanket removal of parts of the input limits your application severely while providing very little security (because of the above). A better solution is to <em>escape</em> the input and <em>test the escaping</em> using previously insecure values. This escaping <em>should</em> be provided by the official libraries (such as SQL or shell escaping).</li>
<li>An even better solution is to let the library do the escaping for you, for example with parametric SQL queries, because now you don't need to remember to escape every value yourself, only to use parameters rather than string concatenation.</li>
</ul></li>
<li>Why would you lowercase the URL? There's no security issue with uppercase characters that I've ever heard of. And again, limiting the URL space like this is a bad trade-off.</li>
<li><strong><a href="https://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards" rel="nofollow noreferrer">Redirecting to a URL without checking it against a strict whitelist first</a></strong> is a well-known security issue.</li>
<li>Similarly, <strong>not validating the username parameter is a massive issue</strong> - what if I specify something like <code>u=../../etc/passwd</code>?</li>
<li><strong>Why would you implement your own HMAC generator?</strong> It's built right into <a href="https://docs.python.org/3/library/hmac.html" rel="nofollow noreferrer">the standard library</a>, even in Python 2.</li>
<li>What is the purpose of the <code>message_rendered_at</code> cookie?</li>
<li>Guessing the MIME type indicates that someone could send a JavaScript, PDF or other potentially harmful file as their avatar. If this is shown to other people that could lead to <strong>remote code injection.</strong> This has already happened on many sites with Bitcoin mining scripts. At best you should instead convert all avatars to a single format (PNG is ideal for this) and serve that. If you really need some flexibility then allow a small set of well-known formats and change the file extension when saving it. Then use a <code>dict</code> to map file extension to MIME type.</li>
<li><code>ordenary</code> is not an English word as far as I know. <code>ordinary</code> would not be a good function name either, because it gives the programmer no idea what it actually does. One thing I've found useful to determine better names for things is to use <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> and validate them using <code>mypy</code> with strict settings (not allowing <code>Any</code> type). It takes some getting used to, but doing this properly should tell you exactly what goes into and comes out of any function. A function which takes a <code>Request</code> to <code>/foo</code> and returns a <code>Response</code>, for example, could be a <code>respond_to_foo_request</code>.</li>
<li>Some of the imports are unused.</li>
</ul>
    </div>