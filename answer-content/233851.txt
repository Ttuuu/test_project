<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>It is custom/industry de facto standard to place the parameter to be changed first, as done in <code>memcpy</code>, <code>strcpy</code> etc (this tradition goes all the way back to assembler).</p>

<p>So you should do <code>void vec2_unit (vec2_t* dst, const vec2_t* src);</code>.</p></li>
<li><p>Regarding in-place or not, it is mostly a matter of style in this case. </p>

<p>Functions/APIs working on "immutable" objects (objects not modified by the function) are often considered better style when that option is available, since that minimizes the chance of caller-side bugs.</p>

<p>The discussion about in-place vs immutable mostly makes sense for larger data types, where taking a copy of the data object is regarded as costly. A struct with 2 <code>double</code> isn't really that heavy to copy<sup>(note 1)</sup>, so you could design this API with an immutable object interface. You could even get away with passing the structs to/from the functions by value, which is otherwise normally frowned upon.</p>

<p>Note: if these functions will reside in the same translation unit as the caller code (which doesn't seem likely here?), the whole discussion about performance is pointless since they will be inlined anyway in that case.</p></li>
<li><p>If you go for the immutable version, it could be written as</p>

<p><code>void vec2_unit (vec2_t* restrict dst, const vec2_t* restrict src);</code></p>

<p>This tells the compiler and the caller both that these two objects shall <em>not</em> be the same one. That will in turn increase performance, but it will not allow you to pass the same object as both source and destination.</p></li>
</ul>

<hr>

<p><sup>(note 1)</sup> We can assume that systems using <code>double</code> are able to copy it in a few instructions. Systems where copying a <code>double</code> would be lots of work, such as small microcontroller systems, shouldn't be using <code>double</code> (or <code>float</code>) in the first place, since they lack a FPU. I would safely assume that any program using floating point is meant to run on a Cortex M3 or bigger. </p>
    </div>