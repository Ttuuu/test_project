<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You’re being a bit verbose, adding elements one at a time in a loop to the <code>output</code> array.  You can use <code>.extend()</code> to add several elements at once, and use a slice to extract the required elements from the <code>inputMatrix</code> rows:</p>

<pre><code>output.extend( inputMatrix[top_row][left_col:right_col+1] )
</code></pre>

<p>Unfortunately, you can’t slice a column (without using <code>numpy</code>), but you can still use list comprehension:</p>

<pre><code>output.extend( inputMatrix[row][right_col] for row in range(top_row, bottom_row+1) )
</code></pre>

<p>Adding the elements at the bottom of the spiral would require a slice using a negative step, but <code>left_col-1</code> will initially evaluate to <code>-1</code> so <code>inputMatrix[bottom_row][right_col:left_col-1:-1]</code> doesn’t work as desired.  You’d need to special case <code>left_col == 0</code> and use the slice <code>[right_col:None:-1]</code> or <code>[right_col::-1]</code>.  Alternately, you could use list comprehension.</p>

<p>Going up the left side is exactly like going down the right side: use list comprehension.</p>

<pre><code>output.extend( inputMatrix[row][left_col] for row in range(bottom_row, top_row-1, -1) )
</code></pre>

<hr>

<p>Notice I used <code>row</code>, instead of <code>i</code>, as the loop index.  I feel this makes the code a little clearer.</p>

<hr>

<p>An alternative method of doing the spiral copy would be to separate the index generation from the copy.</p>

<pre><code>output = [ inputMatrix[r][c] for r, c in spiral(len(inputMaxtrix), len(inputMatrix[0])) ]
</code></pre>

<p>where <code>spiral(rows, cols)</code> is a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator function</a> for the spiral coordinates.  Writing the spiral generator left as an exercise to the student.</p>
    </div>