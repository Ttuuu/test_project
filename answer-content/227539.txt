<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a pretty definitive post by Ned Batchelder on how to chunk a list over on SO: <a href="https://stackoverflow.com/a/312464/4029014">https://stackoverflow.com/a/312464/4029014</a></p>

<p>The Python3 version looks like this:</p>

<pre><code>def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]
</code></pre>

<p>So you could process your list using this structure:</p>

<pre><code>MAX_API_BATCH_SIZE = 100

for batch in chunks(dict_list, MAX_API_BATCH_SIZE):
    batch_done = API_CALL_FUNCTION(batch)
</code></pre>

<p>Note that there is already a method on lists for concatenating a second list: it's <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=extend#more-on-lists" rel="nofollow noreferrer"><code>extend</code></a>. So you can say:</p>

<pre><code>    return_list.extend(batch_done)
</code></pre>

<p>Your code is obviously example code, which is a violation of how CodeReview works (so this question probably should have been asked on SO directly). Regardless, it should be in a function either way:</p>

<pre><code>MAX_API_BATCH_SIZE = 100

def process_records_through_api(records, batch_size=None):
    """ Process records through the XYZ api. Return resulting records. """

    batch_size = (MAX_API_BATCH_SIZE if batch_size is None or batch_size &lt; 1 
                  else batch_size)
    result = []

    for batch in chunks(records, batch_size):
        result.extend(api_function(batch))

    return result
</code></pre>
    </div>