<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><strong>Constraints</strong></p>
  
  <p>\$3 ≤ N ≤ 10^7\$<br>
    \$1 ≤ M ≤ 2 \cdot 10^5\$<br>
    \$1 ≤ a ≤ b ≤ N\$<br>
    \$0 ≤ k ≤ 10^9\$</p>
</blockquote>

<p>You should verify that every value you read from the user is a valid value in your program.</p>

<p>As far as complexity goes, a suffix tree with a complexity of \$O(N\log{}N)\$ compared to your current \$O(MN)\$ solution that adds difference to every value in the range \$[A,B]\$.  With \$N \sim 10^7\$, an \$O(N\log{}N)\$ solution may still be too slow.  </p>

<p>For this problem, I would employ a max prefix sum scan on a difference array.  To generate a set of range differences, we adjust \$arr_{a} \mathrel{{+}{=}} k\$ and \$arr_{b+1} \mathrel{{-}{=}} k\$.  Going back to your sample data, your difference array would look like this:</p>

<pre><code>         #   1.......................N...N+1
5 3      #   0     0     0     0     0     0
1 2 100  # 100     0  -100     0     0     0       
2 5 100  # 100   100  -100     0     0  -100
3 4 100  # 100   100     0     0  -100  -100
</code></pre>

<p>To calculate the max prefix sum, accumulate the difference array to \$N\$ while taking the maximum accumulated prefix. (<code>*</code>) denotes new max found.</p>

<pre><code>DiffArray  100  100    0    0  -100  -100
PrefixSum  100*
Max = 100

DiffArray  100  100    0    0  -100  -100
PrefixSum       200*
Max = 200

DiffArray  100  100    0    0  -100  -100
PrefixSum            200
Max = 200

DiffArray  100  100    0    0  -100  -100
PrefixSum                 200
Max = 200

DiffArray  100  100    0    0  -100  -100
PrefixSum                       100
Max = 200
</code></pre>

<p>Building a difference array in \$O(M)\$ and finding the max prefix sum in \$O(N)\$ results in a \$O(M+N)\$ linear algorithm.</p>
    </div>