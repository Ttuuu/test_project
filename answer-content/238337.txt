<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The line-too-long can be fixed by wrapping the long string. There are at least two obvious ways to do it.  First, use a triple quoted string.  This lets the string include span multiple lines.  A possible problem is that the string now includes the extra spaces at the beginning of the second and third lines.  However, those will get removed by the call to <code>split()</code>.</p>

<pre><code>morse_alphabet = """.- -... -.-. -.. . ..-. --. .... .. .---
                    -.- .-.. -- -. --- .--. --.- .-. ... -
                    ..- ...- .-- -..- -.-- --.."""
</code></pre>

<p>A second possibility is to take advantage of the interpreter concatenating adjacent strings.</p>

<pre><code>morse_alphabet = (".- -... -.-. -.. . ..-. --. .... .. .---"
                  " -.- .-.. -- -. --- .--. --.- .-. ... -"
                  " ..- ...- .-- -..- -.-- --..")
</code></pre>

<p>In both cases, <code>morse_alphabet = morse_alphabet.split()</code> will split the string on whitespace characters and return a list of the morse codes.</p></li>
<li><p>A comparison is needed somewhere, to find the longest length of '-'s.  It can be explicit, as in your code.  Or implicit, as in the built in <code>max()</code> function.  The code can be simplified by using a generator expression to calculate the lengths of the dash runs.</p>

<pre><code>def count_longest_dash_run(code):
    return max(len(dashrun) for dashrun in code.split('.'))
</code></pre></li>
<li><p>For a small program like this, pulling out the <code>print(...)</code> into a separate function is probably overkill.  But using either an f-string or <code>str.format()</code> or would be better than concatenating strings using '+'.</p>

<pre><code>print(f"{key}: {value}")
</code></pre>

<p>or</p>

<pre><code>print("{}: {}".format(key, value))
</code></pre></li>
<li><p>About documentation.  </p>

<p>I find type hints to needlessly clutter the code for small programs like this.  For larger projects they can help document expected types.</p>

<p>Docstrings should tell someone how to use the thing being documented (class, function, module, method, etc.).  They should be complete and correct.  Here, the docstring for <code>encode_string()</code> says "Encodes the entire string into the morse code.", which is not correct.  It encodes the string into morse code, <strong>without spaces between the letters</strong>.</p>

<p>The docstring for <code>challenge()</code> says "prints out the result of the challenge."  But no one will remember what the challenge was next week/month/year.  Similarly for the optional challenges.</p></li>
<li><p>I'm not sure what your asking here.  </p></li>
</ol>

<p>Other things.</p>

<p>You can iterate over a list of 2-tuples like so:</p>

<pre><code>for key, value in self.words:
    ...
</code></pre>

<p>The encoding could be done using <code>str.maktrans()</code> and <code>str.translate()</code>.</p>

<p>Using <code>collections.defaultdict</code> lets you skip doing a special case for when a key isn't in the dictionary.  For example, if <code>__init__</code> had <code>self.encoded_words = defaultdict(list)</code>, then</p>

<pre><code>def find_matching_codes(self):
    for word, encoded in self.words:
        self.encoded_words[encoded].append(word)
</code></pre>
    </div>