<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Factor out common code into subroutines</h2>

<p>Several places use largely identical code which could be factored out into a routine instead.  For example, you could use a subroutine for converting each number into its ASCII equivalent.  Here's one way to do that:</p>

<pre><code>;----------------------
; StoreDec
;
; ENTRY: 
;   es:di ==&gt; *end* of target string
;   ax = number to convert to decimal string
;
; EXIT: 
;   es:di ==&gt; one before last written digit
;
; TRASHED: 
;   ax, bx, dx, flags
; 
StoreDec proc
    std         ; move backward
    mov bx, 10  ; use base 10
nextDigit:
    xor dx, dx  ; zero top part
    div bx      ; remainder:quotient in dx:ax
    xchg ax, dx ; 
    add al, '0' ; convert quotient to ASCII digit
    stosb
    mov ax, dx  ; recover remainder
    or ax, ax   ; is it zero?
    jne nextDigit
    ret
StoreDec endp
</code></pre>

<h2>Study the intruction set</h2>

<p>A few cases in the current code have sequences like this one:</p>

<pre><code>SUB AL,'0'
CMP AL,0
JB WrongInput
</code></pre>

<p>Because the <code>sub</code> instruction already sets the flags, the <code>cmp</code> instruction can simply be deleted.</p>

<h2>Minimize register usage</h2>

<p>With assembly language programming, minimizing the use of resources is often vital.  One of the most precious resources is the processor's registers.  Write comments to help you keep track of which registers are used for which purposes.  It is possible to refactor this code so that none of the numeric variables are used and everything needed is stored in registers, given appropriate care.</p>

<h2>Think of the user</h2>

<p>I'd probably prefer to at least have the option of specifying the number <span class="math-container">\$Z\$</span> on the command line.  When the program begins, the command line argument(s), if any, are located in the DOS <a href="https://en.wikipedia.org/wiki/Program_Segment_Prefix" rel="nofollow noreferrer">PSP</a>.  I'd suggest looking there first and then only issuing prompts if a command line argument is missing or invalid.</p>

<h2>Fix the bug(s)</h2>

<p>The stated input parameters are not enforced very well.  For example, if the user enters 9000000 as the input value, the program falsely claims that:</p>

<pre><code>000000 has no solution below 1000
</code></pre>

<p>First, the program should validate that the input is within the stated range and second, the program should inform the user of the faulty input rather than wasting many CPU cycles creating an incorrect answer.</p>

<h2>Rethink the algorithm</h2>

<p>The algorithm used in this code is extremely inefficient and can easily be improved to much much faster.  First, let's look at the mathematics:</p>

<p>The difference of two squares <span class="math-container">\$x^2 - y^2 = (x+y)(x-y)\$</span>.  So instead of doing two multiplication operations and a subtraction, we can do two addition/subtractions and one multiply.  This is usually beneficial because adding and subtracting is very often faster than multiplication or division.</p>

<p>Next, notice that we can keep the sum and difference and don't really need to recover the actual X and Y values until the end.  For simplicity, in the alternative implementation I wrote, I keep <span class="math-container">\$x, sum\$</span> and <span class="math-container">\$diff\$</span>.  </p>

<p>You've already correctly observed that the only difference between, say -5 and +5 for <span class="math-container">\$z\$</span> is that the values of the corresponding <span class="math-container">\$x, y\$</span> pair are reversed.  We can further exploit this fact by noting that if we only look for the absolute value of <span class="math-container">\$z\$</span>, we can observe that if the value of <span class="math-container">\$x^2 - y^2 &gt; |z|\$</span>, there's no point in further incrementing the <span class="math-container">\$x\$</span> value because that will only make the number even larger.  We can then test for this and increment <span class="math-container">\$y\$</span> if we observe this condition.  </p>

<p>Lastly, it is obvious that if <span class="math-container">\$x = y, x^2 - y^2 = 0\$</span> and also that if we're only looking for a positive value, then <span class="math-container">\$x &gt; y\$</span>.  </p>

<p>Putting all of these observations together, the algorithm is:</p>

<ol>
<li>store <span class="math-container">\$|z|\$</span> and sign separately.  Hereafter we use <span class="math-container">\$z\$</span> to mean <span class="math-container">\$|z|\$</span>.</li>
<li>set <span class="math-container">\$x = y = sum = diff = 0\$</span></li>
<li>compare <span class="math-container">\$(x+y)(x-y) , z\$</span></li>
<li>if <span class="math-container">\$(x+y)(x-y) = z\$</span>, we're done</li>
<li>if <span class="math-container">\$(x+y)(x-y) &gt; z\$</span>, go to step 9</li>
<li>increment <span class="math-container">\$x, sum, diff\$</span></li>
<li>if <span class="math-container">\$x &gt; 1000\$</span>, there is no answer</li>
<li>go to step 3</li>
<li>increment <span class="math-container">\$y\$</span></li>
<li>if <span class="math-container">\$y &gt; 1000\$</span>, there is no answer</li>
<li>set <span class="math-container">\$x = y+1\$</span> and recalculate <span class="math-container">\$sum, diff\$</span></li>
<li>go to step 3</li>
</ol>

<p>When we print the result, the only difference is that if the original sign of <span class="math-container">\$z\$</span> was negative, then swap <span class="math-container">\$x, y\$</span></p>

<h2>Be aware of real machines</h2>

<p>It's unlikely you'll encounter anything less than a <code>.386</code> machine these days, but be aware that your use of 32-bit registers <code>EAX</code>, etc. means that this code will not run correctly on a real 8088 or 8086 machine.  </p>

<h2>Return an error code</h2>

<p>When the program returns, it has the option of returning an error code.  I'd suggest that a value of 0 would mean that suitable <span class="math-container">\$x, y\$</span> values have been found, an error code of 1 would mean not found, and an error code of 2 could mean "bad input."  The return value goes into the <code>al</code> register when executing <code>int 21h, function 4ch</code>.</p>
    </div>