<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Review</strong></p>

<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using white-space only where necessary (so the blank line after <code>def squarefree(n):</code> could go, as could the trailing space) and using <em>four spaces</em> as indentation.</p>

<p>Normally I would consider it best practice for a function like this to return actually <code>True</code> or <code>False</code>. Your function returns <code>False</code> or  a truthy value, which also works, but is not as clean. Consider changing it from <code>return n</code> to <code>return True</code>.</p>

<hr>

<p><strong>Alternate implementation</strong></p>

<p>As <a href="https://codereview.stackexchange.com/users/82612/dair">@Dair</a> mentioned in the comments, depending on your use-case for this, it would be faster to write a sieve that gets all square-free numbers up to some limit.</p>

<p>Starting with the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a>, taken from another of <a href="https://codereview.stackexchange.com/a/150447/98493">my answers</a>, this could be implemented like this:</p>

<pre><code>def squarefree(n):
    """
    Check if n is a square-free number, i.e. is divisible by no other perfect square than 1.

    Args:
        n     positive integer to check
    Returns:
        n     if n is a square-free number
        False else
    """
    for i in range(2, round(n**0.5) + 1):
        if n % (i**2) == 0:
            return False
    return n


def square_free_sieve(limit):
    """Generator that yields all square free numbers less than limit"""
    a = [True] * limit
    # Needed so we don't mark off multiples of 1^2
    yield 1
    a[0] = a[1] = False
    for i, is_square_free in enumerate(a):
        if is_square_free:
            yield i
            i2 = i * i
            for n in range(i2, limit, i2):
                a[n] = False

test1 = [n for n in range(100) if squarefree(n)]
test2 = list(square_free_sieve(100))
assert test1 == test2
</code></pre>

<p>When generating all square free numbers up to 100,000, your code needs about 3.5s, while the sieve only takes 0.05s, which is about 70 times faster.</p>
    </div>