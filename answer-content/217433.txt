<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The class is doing too much: it is not the task of the <code>Account</code> class to <em>also</em> keep a database of all accounts. Remember: <em>one class (or function), one responsibility</em>. By the same principle, <code>menuSelection</code> does too much in your main program.</p></li>
<li><p>Use the initializer list in your constructor, i.e., do <code>Account::Account() : name_(), id_(0), balance(0) {}</code>. But even better, you should always <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-zero" rel="nofollow noreferrer">try to avoid defining default operations</a>, as per C.20 of the C++ Core Guidelines.</p></li>
<li><p>Pass complex (i.e., not built-in types) by const-ref. This includes strings and Account types. For example, rather do <code>void Account::setName(const std::string&amp; userName) { ... }</code>. Another possibility - if your compiler is recent enough - is to use <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer">std::string_view</a>.</p></li>
<li><p>Avoid throwing character strings and throw proper objects instead, see <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#e14-use-purpose-designed-user-defined-types-as-exceptions-not-built-in-types" rel="nofollow noreferrer">E.14</a>.</p></li>
<li><p>You seem to have an invariant which says that the balance can never be negative. I would enforce this more consistently by writing a private function like <code>void checkInvariant() { ... }</code> that makes things like <code>assert(balance &gt; 0)</code> (but be careful when comparing floating point values to constant values; it should be done with a threshold). Then, you can add this check to suitable functions and the invariant is nicely enforced by the class itself.</p></li>
<li><p>The above can help you catch errors like in <code>withdraw</code>: is it acceptable that the amount becomes negative here?</p></li>
</ul>
    </div>