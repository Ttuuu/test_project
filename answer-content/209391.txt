<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There isn't really much here to comment on, since there isn't even AI involved.</p>

<p>The only thing that stands out to me is your use of a silent "catch-all" <code>try</code> block:</p>

<pre><code>try:
    retry = browser.find_element_by_link_text('Try again')

except: # Big problem here
    continue

else:
    retry.click()
</code></pre>

<p>You're catching every exception, and simply ignoring them. In this <em>particular</em> case the ramifications aren't huge. Say in the future though you add a second function to do some processing and decide to put it in the <code>try</code> (for whatever reason). Something like:</p>

<pre><code>try:
    retry = browser.find_element_by_link_text('Try again')
    do_something_with_retry(retry) # This throws. Would you ever know that though?

except:
    continue

else:
    retry.click()
</code></pre>

<p>And lets say that <code>do_something_with_retry</code> is improperly tested, or some unforeseen circumstance comes up, and suddenly <code>do_something_with_retry</code> starts throwing exceptions. Would you ever even know that there was an exception thrown? How would you debug your code failing in that case? It would be <em>much</em> better to be specific about what you need to catch, and deal with that only. As you can see in the <a href="https://selenium-python.readthedocs.io/api.html#selenium.webdriver.remote.webdriver.WebDriver.find_element_by_link_text" rel="nofollow noreferrer">API
 documentation</a>, <code>find_element_by_link_text</code> is documented to throw a <code>NoSuchElementException</code> if something fails. Catch that instead, so irrelevant errors aren't silently ignored as well: </p>

<pre><code>try:
    retry = browser.find_element_by_link_text('Try again')

except NoSuchElementException as e: # Be specific!
    continue

else:
    retry.click()
</code></pre>

<p>Now anything other than a <code>NoSuchElementException</code> will cause your program to crash. <em>This is a good thing though</em>. You don't want fundamentally broken code to run.</p>

<p>Don't make your code vulnerable to silly mistakes that may happen in the future. Silly mistakes happen (like improperly tested functions). It's best that they fail catastrophically so they can be detected and fixed.</p>

<p>Of course though, the better option to handling the addition of <code>do_something_with_retry</code> would be, if possible, to just not group it in the <code>try</code> in the first place. Again though, mistakes happen.</p>

<hr>

<p>As for </p>

<blockquote>
  <p>Currently it takes alot of tries to get a high score for the bot. Can the logic be improved?</p>
</blockquote>

<p>That involves writing up an AI to play the game, and is no small feat. That would be beyond the scope of a Code Review unfortunately.</p>
    </div>