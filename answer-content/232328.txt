<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You should really look into the algorithm. If you do, you will see that encoding and decoding are essentially the same operation, though with negated key.</p></li>
<li><p>Avoid passing a <code>std::string</code> or the like by constant reference. Accepting a <code>std::string_view</code> by value is generally more flexible and efficient.</p></li>
<li><p><code>.reserve()</code> enough space at the start, and you won't have any wasteful reallocations.</p></li>
<li><p>Always test with a few trivial examples to weed out brokenness. In your case, <code>z</code> and <code>Z</code> are broken for 25 of the 26 possible keys for each direction.</p></li>
<li><p>Use <code>auto</code> to avoid repeating types, and potentially getting a costly mismatch.</p></li>
<li><p>Consider using an in-place transformation instead.</p></li>
</ol>
    </div>