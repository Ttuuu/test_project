<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Don't declare <code>enum</code> <code>const</code></h2>

<p>In <code>snake.h</code>, the <code>direction</code> <code>enum</code> is declared as <code>const</code> but this is an error, since only functions and objects can be declared <code>const</code>.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>Snake::getSnakeSize()</code> doesn't alter the underlying <code>Snake</code> and so it should be declared <code>const</code>.  Additionally, I'd name it <code>size()</code> to be consistent with standard library functions.</p>

<h2>Simplify your code</h2>

<p>The current <code>Snake::add()</code> code is this:</p>

<pre><code>void Snake::add() {

    Snake_segment newSegment;
    newSegment.xPos = snakeContainer[snakeContainer.size() - 1].prevxPos;
    newSegment.yPos = snakeContainer[snakeContainer.size() - 1].prevyPos;

    snakeContainer.push_back(newSegment);
}
</code></pre>

<p>However, it could be simplified into a single line:</p>

<pre><code>void Snake::add() {
    snakeContainer.push_back({
            snakeContainer.back().prevxPos, 
            snakeContainer.back().prevyPos, 
            snakeContainer.back().prevxPos, 
            snakeContainer.back().prevyPos, 
            });
}
</code></pre>

<p>Similarly, the <code>follow</code> code could be simplified by using iterators.</p>

<pre><code>void Snake::follow() {
    auto it = snakeContainer.begin();
    for (auto prev = it++; it != snakeContainer.end(); ++it, ++prev) {
        it-&gt;prevxPos = it-&gt;xPos;
        it-&gt;prevyPos = it-&gt;yPos;
        it-&gt;xPos = prev-&gt;prevxPos;
        it-&gt;yPos = prev-&gt;prevyPos;
    }
}
</code></pre>

<p>In both of these case, futher simplification could be obtained by introducing a <code>struct Coord { unsigned x, y; };</code></p>

<pre><code>void Snake::follow() {
    auto it = snakeContainer.begin();
    for (auto prev = it++; it != snakeContainer.end(); ++it, ++prev) {
        it-&gt;prev = it-&gt;curr;
        it-&gt;curr = prev-&gt;prev;
    }
}
</code></pre>

<h2>Use <code>static constexpr</code> for class constants</h2>

<p>The current code has internal <code>const</code> variables for the width and height and then wrapper accessors, but this is much simplified by simply using public <code>static constexpr</code> variables and no wrapper.  That's assuming you have a C++11 compiler.  If not, the next best thing would be plain <code>const</code> and no wrapper.</p>

<h2>Reconsider the class interfaces</h2>

<p>Mostly the classes make sense to me, but it seems that the <code>score</code> should actually be maintained by the <code>Board</code> class and then returned to a caller on request via a <code>const</code> method.  Also, it seems that <code>divisor</code> should be calculated and stored by the <code>app</code> class as a <code>float</code>.  This would remove a lot of ugly <code>static_cast</code>s as well.  Also, it may make sense for the <code>Board</code> to own the <code>Snake</code>.</p>

<h2>Add helper functions for clarity</h2>

<p>I would advise converting from a comment to an <code>enum</code> or an <code>enum class</code> and then using that.  </p>

<pre><code>enum Tile { Open = 1, Wall, Body, Food };
</code></pre>

<p>Next, I'd suggest using helper functions to make the code easier to read and understand.  For example:</p>

<pre><code>bool Board::isEmpty(Coord coord) const {
    return at(coord) == Open;
}

bool Board::place(Coord coord, int item) {
    if (item != Open &amp;&amp; !isEmpty(coord)) {
        return false;
    }
    map[coord.y * width + coord.x] = item;
    return true;
}

int Board::at(Coord coord) const {
    return map[coord.y * width + coord.x];
}
</code></pre>

<p>Here's the corresponding <code>update</code> function.</p>

<pre><code>void Board::update(sf::RenderWindow&amp; win) {
    auto newHead{snake.moveHead()};
    place(snake.follow(), Open);
    switch (at(snake.headLocation())) {
        case Wall: 
        case Body: 
            win.close();
            break;
        case Food: 
            place(snake.headLocation(), Open);
            place(snake.add(), Body);
            m_score += 100;
            genFood();
    }
    place(newHead, Body);
}
</code></pre>

<p>With this, note that there is no longer any need to loop through all coordinates and no need for a separate collision detection routine.  Also, <code>move</code> is eliminated in favor of the two distinct calls that were in it.  In this rewrite, <code>moveHead()</code> returns the location of the new head, and <code>follow()</code> returns the old location of the last segment.  Since those are the only two nodes of the snake that change from one iteration to the next, those are the only two cells that need updating.</p>

<h2>Don't use <code>std::endl</code> if <code>'\n'</code> will do</h2>

<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.  Also, you can make things a little neater.  Instead of this:</p>

<pre><code>        std::wcout &lt;&lt; L"You lose!" &lt;&lt; std::endl;
        std::wcout &lt;&lt; L"Score: " &lt;&lt; score &lt;&lt; std::endl;

I would recommend writing it like this:       

        std::wcout &lt;&lt; L"You lose!\nScore: " &lt;&lt; score &lt;&lt; '\n';
</code></pre>

<h2>Don't overuse <code>std::random_device</code></h2>

<p>For some implementations, <code>std::random_device</code> is actually driven by a hardware-based generator and the quality of the generated random numbers may actually drop precipitously if too many random numbers are drawn too quickly.  For that reason, it's better not to overuse <code>std::random_device</code>.  Instead, seed a pseudorandom generator (PRG) once from <code>std::random_device</code> and then use the PRG.  Here's a rewrite of the <code>genFood()</code> routine that does just that:</p>

<pre><code>void Board::genFood() {
    static std::random_device rd;
    static std::mt19937 gen(rd());
    static std::uniform_int_distribution&lt;unsigned&gt; disX(1, width - 2);
    static std::uniform_int_distribution&lt;unsigned&gt; disY(1, height - 2);

    while (!place({disX(gen), disY(gen)}, Food))
    {  /* keep attempting until it works */ }
}
</code></pre>

<h2>Think of the user</h2>

<p>How often does it happen that the user starts a game, only to immediately ask to quit?  It seems unlikely to me, so I would eliminate the Play/Quit prompt entirely.  Future enhancements that might be nice would be to display the score and length of snake as the game is being played.</p>
    </div>