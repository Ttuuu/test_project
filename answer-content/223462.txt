<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll comment on two specific things I noticed while briefly reviewing (I hope I don't come across as harsh where I'm just stating observations):</p>

<ul>
<li><p><strong>OOP</strong>: One thing that stood out to me immediately is the dictionaries. The beauty of OOP is that it allows object hierarchies, and for those objects to inherit properties from their base class. A good rule of thumb: If you ever find yourself copy-pasting code, you're doing something wrong. Both <code>CAT_BEHAVIOR</code> and <code>MOUSE_BEHAVIOR</code> have the same entries in the dictionary with just different value assignments—why not make those keys properties of the <code>Animal</code> base class?</p></li>
<li><p><strong>Comments and functions</strong>: For the math calculations, your comments were helpful (even though I still didn't understand the math; I didn't have time to carefully review it, unfortunately). That said, there are a lot of "useless" comments, or ones that don't belong in good code. These are "what" comments that basically restate what the code is doing instead of providing insight. For example, <code>mice = None  # Object to store all the mice</code>, <code>House.mice = []  # Object to store all the mice</code>, and <code>self.create_mice()  # Create all the mice</code>. And of course their cat variants. As well as these two: <code># Create self.mice_number mice in the house</code> and <code># Draw all the mice</code>. There are also comments on things that are in fact unclear because of poor naming (either on your part or pygame's). For example: <code>pygame.display.flip()  # Update whole window area</code>. I would wrap this in a function named exactly that: <code>update_window_area(self)</code>. But this by far is the worst offender, in my opinion: <code>edit_parameters_after_doing_turn()  # General stuff after turn of all Animals</code>. Not only is the function itself quite long and doing multiple complex computations, but the name itself is also not too informative (and the comment doesn't help!). Consider giving each animal an <code>Update</code> method—<code>Update</code> is pretty idiomatic in game dev as a loop that should run on each frame update/tick. Within <code>Update</code>, use multiple low-level methods that do one thing each.</p></li>
</ul>
    </div>