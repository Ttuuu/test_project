<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class Combinations
{        
    private int[] _array; // holds the initial array; Assumed to contain different elements!!!
    private int _k; // the k elements needed to be chosen from that array
    private int[] _pushForward; // a kind of a counter to keep track how much we need to move forward each column
    private List&lt;int[]&gt; _results; // the results (all combinations); 
    private int[] _element; // the working element that is changed all the time

    public List&lt;int[]&gt; GetAllCombinations(int[] array, int k)
</code></pre>
</blockquote>

<p>This is rather un-object-oriented. The most OO way of doing this would be for <code>Combinations</code> to have a constructor which takes <code>array</code> (and possibly <code>k</code>, although arguments can be made either way). If you don't want to be OO, the exposed API method should be <code>static</code> and should not use fields to pass data to other methods.</p>

<p>I'm missing some documentation to say what assumptions are made about the contents of <code>array</code>. Can it contain duplicate values? Must it be ordered?</p>

<p>Why is the return value <code>List&lt;int[]&gt;</code>? I can see a strong argument for <code>ISet&lt;ISet&lt;int&gt;&gt;</code>, and also a strong argument for <code>IEnumerable&lt;ISet&lt;int&gt;&gt;</code> with lazy enumeration, but I can't see why the order of the combinations matters, or the order within a combination matters.</p>

<hr>

<blockquote>
<pre><code>        // basic sanity check
        if (len &lt; k)
            throw new ArgumentException("Array length can't be less than number of selected elements");

        if (k &lt; 1)
            throw new ArgumentException("Number of selected elements can't be less than 1");
</code></pre>
</blockquote>

<p>The sanity checks are reasonable, but why throw an exception? IMO the correct thing to do is to return an empty set of solutions.</p>

<hr>

<blockquote>
<pre><code>        _pushForward = new int[k]; // they are initialized to Zero already, no need to initialize again

        // the first element can move up to this position (in permutations); subsequent elements could move +1
        int maxStepsForward = len - _k + 1; 
</code></pre>
</blockquote>

<p>This is where I start getting confused. What are these two variables for?</p>

<blockquote>
<pre><code>    // col - the initial column handled in this recurse; can be between 0..k-1
    // maxSteps - correction for the max index; max index that this for loop can reach 
    private void GetCombinations(int col, int maxSteps)
    {
        for (int j = col + _pushForward[col]; j &lt; maxSteps; j++)
</code></pre>
</blockquote>

<p>Nope, still confused. It's not obvious to me why the algorithm is correct, which means that more comments are required.</p>

<hr>

<blockquote>
<pre><code>            if (col &lt; _k - 1)
                GetCombinations(col + 1, maxSteps + 1);
            // else, just add the element
            else if (col == _k - 1)
</code></pre>
</blockquote>

<p>Not just <code>else</code>?</p>

<p>As a matter of taste, I prefer to have the special case dealt with inside the recursive call.</p>

<hr>

<blockquote>
<pre><code>                // element is copied to new place in memory (shallow copy - works on ints) as working copy is constantly changed 
                int[] insert = new int[_k];
                _element.CopyTo(insert, 0);
                // new element is added to result list
                _results.Add(insert);
</code></pre>
</blockquote>

<p>The last comment there is unnecessary, but the first one is helpful (and an important point).</p>

<hr>

<p>The simpler way of implementing <code>GetCombinations</code> would be</p>

<pre><code>    // Generate combinations recursively and add them to _results.
    // Each combination's indices are in increasing order.
    // Pre-condition: _element[0 .. col-1] select col indices in increasing order.
    private void GetCombinations(int col)
    {
        if (col == _k)
        {
             // _element holds indices which need to be mapped to _array
             int[] insert = new int[_k];
             for (int i = 0; i &lt; _k; i++) insert[i] = _array[_element[i]];
             _results.Add(insert);
             return;
        }

        // To maintain the condition that the selected indices are in increasing order,
        // we must start with the index after the largest already selected one.
        int min = col == 0 ? 0 : _element[col - 1] + 1;
        for (_element[col] = min; _element[col] &lt; _array.Length; _element[col]++)
        {
            GetCombinations(col + 1);
        }
    }
</code></pre>

<p>It can be improved by adding a sanity check that <code>min</code> isn't too high; and the evaluation of <code>min</code> can be removed by adding an extra parameter:</p>

<pre><code>    // Generate combinations recursively and add them to _results.
    // Each combination's indices are in increasing order.
    // Pre-condition: _element[0 .. col-1] select col indices in increasing order.
    // Pre-condition: min is the smallest index which is larger than the selected ones.
    private void GetCombinations(int col, int min = 0)
    {
        if (col == _k)
        {
             // _element holds indices which need to be mapped to _array
             int[] insert = new int[_k];
             for (int i = 0; i &lt; _k; i++) insert[i] = _array[_element[i]];
             _results.Add(insert);
             return;
        }

        // Since _element is in increasing order, we require _element[_k - 1] &lt;= _array.Length - 1
        // By induction, we find that _element[_k - j] &lt;= _array.Length - j
        // Substituting subst col = _k - j, j = _k - col:
        // _element[col] &lt;= _array.Length - (_k - col)
        for (_element[col] = min; _element[col] &lt; _array.Length + col - _k; _element[col]++)
        {
            GetCombinations(col + 1, _element[col] + 1);
        }
    }
</code></pre>
    </div>