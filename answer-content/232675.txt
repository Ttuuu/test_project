<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<pre class="lang-py prettyprint-override"><code>print("""
___|                 |     |     |           
\___ \   __|  __| _` | __ \  __ \  |  _ \  __| 
  | (    |   (   | |   | |   | |  __/ |    
_____/ \___|_|  \__,_|_.__/ _.__/ _|\___|_|    
""")
</code></pre>

<p>What does that even mean? Scrabble?</p>

<p>There are many possible replacements.</p>

<p>For example:</p>

<pre><code>print("""

       _/_/_/_/    _/_/_/_/   _/_/_/_/     _/       _/_/_/_/    _/_/_/_/    _/        _/_/_/_/
      _/         _/         _/     _/    _/ _/     _/     _/   _/     _/   _/        _/
     _/_/_/_/   _/         _/_/_/_/    _/   _/    _/_/_/_/    _/_/_/_/    _/        _/_/_/_/
           _/  _/         _/ _/       _/_/_/_/   _/     _/   _/     _/   _/        _/
    _/_/_/_/  _/_/_/_/   _/    _/    _/     _/  _/_/_/_/    _/_/_/_/    _/_/_/_/  _/_/_/_/


""")
</code></pre>

<p>But it's your wish if you don't want to change it!</p>

<hr>

<h2>add_scores</h2>

<p><strong>Always</strong> add a return statement when you don't want the upcoming code to be executed</p>

<pre><code>except KeyError:
    print("Word must consist of letters only.")
    add_score()

dbl_or_trip = input("Is word [D]ouble or [T]riple or [N]either?&gt; ")
</code></pre>

<p>Regardless of whether there was <code>KeyError</code> or not, <code>dbl_or_trip = input(...</code> is executed.<br>
If there was a <code>KeyError</code>, then after <code>add_score()</code> was executed, it moves on to the next line.</p>

<p><code>value</code> is declared inside the scope of <code>try</code>. That's bound to create some errors. declare <code>value = None</code> before executing the <code>try</code> statement</p>

<hr>

<h2>add_players</h2>

<p>There's not much improvement here, except that you can use<br>
<code>print("Player {} added.".format(new_player))</code> instead of <code>print(f"Player {new_player} added.")</code></p>

<p>Also, you can add <code>print()</code> statement after taking the input to make the text easier to read.</p>

<hr>

<h2>view_scores</h2>

<p>Again, you can use <code>print(f'{something}')</code> instead of <code>print('%s' % 'something')</code></p>

<hr>

<h2>end_game</h2>

<p>And yet again, you can use <code>f'{something}'</code></p>

<p>Also, why do you do <code>__name__ = "end"</code>? It works even if you remove that.</p>

<blockquote>
  <p>Also the reason I set <strong>name</strong> to "end" in the end_game() function is because if I did not, end game would run the if statement at the end of the code and then repeat main() putting the user in an endless loop that can only be escaped by CTRL+C.</p>
</blockquote>

<p>That is not true. After <code>end_game()</code> is called, the code automatically returns to the line that was being run.</p>

<pre class="lang-py prettyprint-override"><code>def foo():        # Line 1
    return 'bar'  # Line 2
                  # Line 3
foo()             # Line 4
print('1')        # Line 5
</code></pre>

<p>This does not create an endless recursion. After <code>'bar'</code> was returned, The function ends, but the code does not continue from line 3. It goes on to the next line that was being run while calling the function which was line 4. So the code proceeds to line 5. In other words, functions are not a part of the executing code.</p>

<hr>

<h2>undo</h2>

<p>Again, <strong>always</strong> add a return statement when you don't want the upcoming code to be executed</p>

<pre><code>    except NameError:
        print(no_change)
        home()

    undo_ind = True
    main()
</code></pre>

<p>After <code>home()</code> is executed, the code will proceed to execute <code>undo_ind = True</code> and <code>main()</code>, which we don't want to happen.</p>

<p><code>undo_ind is False</code> <em>should always</em> be replaced with <code>not undo_ind</code>.</p>

<hr>

<h2>Misc</h2>

<ul>
<li><p>You should not run <code>add_players()</code> outside <code>if __name__ == '__main__'</code>. If the module was imported, It would automatically ask for player names.</p></li>
<li><p>Also, you can create a function <code>begin</code> which calls <code>add_players()</code> and then <code>main()</code></p></li>
</ul>
    </div>