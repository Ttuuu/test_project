<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Personally I would use lex(flex) and yacc(bison) to do the same thing.</p>

<h3>Edit:</h3>

<p>After just doing it. I change my mind.<br>
If all I was doing was an expression parser I would write a recursive descent parser like "Jerry Coffin" did. But if there was any chance that it would grow beyond just a simple expression parser (like having variables and state or any more complex functionality like functions) then I would use this technique.</p>

<h3>Back to Description</h3>

<p>These tools are a pain to learn when you are starting but are so darn useful when parsing stuff that I think it is a definite advantage to learn. The first time will take you a while but once you get used to them they become really easy.</p>

<p>I don't think its as fast as the hand written recursive descent parser. But it is so intuitive to read (if you have done CS at Uni) that the extra clarity makes up for a lot.</p>

<p>This is all it takes:</p>

<h3>Lexer.l</h3>

<p>Note: The definition of a number is slightly more complex than it could be (ie I could simplify it). This is because I ripped it straight out of a C parser. The definition for numbers is slightly more complicated in C (as leading 0 indicates an octal number (though I have removed the octal part from this example)).</p>

<p>But numbers support an optional leading '-' to indidicate negative numbers (though not as it stands a leading '+' (but that would not be hard to add)).</p>

<p>It also supports number using the standard exponent format ie <code>1.34e10</code>.</p>

<pre><code>%option c++
%option noyywrap

DIGIT           [0-9]
DIGIT1          [1-9]
INTNUM          {DIGIT1}{DIGIT}*
FRACT           "."{DIGIT}+
FLOAT           ({INTNUM}|0){FRACT}?
EXP             [eE][+-]?{DIGIT}+
NUMBER          -?{FLOAT}{EXP}?

WHITESPACE      [ \t\n]
%{
#define IN_LEXER
#include "parser.tab.h"
%}


%%

\+              {return '+';}
\-              {return '-';}
\*              {return '*';}
\/              {return '/';}
\(              {return '(';}
\)              {return ')';}
{NUMBER}        {return yy::Parser::token::NUMBER;}

{WHITESPACE}    {/*IGNORE*/}
.               {throw std::runtime_error("Invalid Character in Lexer");}

%%
</code></pre>

<h3>Parser.y</h3>

<p>Note: because of the way shift reduce parser work. The precedence of operators are implied by their position in the grammar. So '+' and '-' have the same precedence but have a lower precedence than '*' and '/'. So because the '(' and ')' are at the lowest level these operators have the highest precedence.</p>

<p>Also if precedence is the same the expression will be evaluated from left to right thus giving you the correct order you would expect from normal mathematics.</p>

<pre><code>%skeleton "lalr1.cc"
%require "2.1a"
%define "parser_class_name" "Parser"

%{
// The type of the $$ value
#define YYSTYPE double

// Forward declarations used here
class FlexLexer;
int yylex(void*, FlexLexer&amp; lexer);
double getNumber(FlexLexer&amp; lexer);
%}


%parse-param {FlexLexer&amp;          lexer}
%parse-param {double&amp;             result}
%lex-param   {FlexLexer&amp;          lexer}

%%

expression
    :    additive_expression                                 {result = $1;}

additive_expression
    :    multiplicative_expression                           {$$ = $1;}
    |    additive_expression '+' multiplicative_expression   {$$ = $1+$3;}
    |    additive_expression '-' multiplicative_expression   {$$ = $1-$3;}
    ;

multiplicative_expression
    :    primary_expression                                  {$$ = $1;}
    |    multiplicative_expression '*' primary_expression    {$$ = $1*$3;}
    |    multiplicative_expression '/' primary_expression    {$$ = $1/$3;}
    ;

primary_expression
    :    NUMBER                                              {$$ = getNumber(lexer);}
    |    '(' expression ')'                                  {$$ = $2;}
    ;


%%
</code></pre>

<h3>Utility.cpp</h3>

<pre><code>#include "FlexLexer.h"
#include "parser.tab.h"
#include &lt;sstream&gt;

// The lexer calls this function
// To get the next token from the lexer.
// So all we do is ask the lexer for this token.
int yylex(void*, FlexLexer&amp; lexer)
{
     return lexer.yylex();
}

// If the last value returned by the lexer (last token)
// is yy::Parser::token::NUMBER then the text of the input
// represents a number. So we ask the lexer for the text of
// the last token so we can covert it into a double.
double getNumber(FlexLexer&amp; lexer)
{
    char const*     begin   = lexer.YYText();
    char const*     end     = begin + lexer.YYLeng();
    std::string     numberString(begin, end);

    double     result       = stod(numberString);

    return result;
}

// This function is called if there is an error in parsing the
// expression. You could just display the error message.
//
// This function takes an extra step and get the token that
// caused the error and incorporates it into the error message.
void yy::Parser::error(yy::location const&amp;, std::string const&amp; msg)
{
    std::string         lastToken(lexer.YYText(), lexer.YYText() + lexer.YYLeng());
    std::stringstream  extended;
    extended &lt;&lt; msg &lt;&lt; " -&gt; Last Token: '" &lt;&lt; lastToken &lt;&lt; "' At line: " &lt;&lt; lexer.lineno();

    throw std::runtime_error(extended.str());
}
</code></pre>

<h3>main.cpp</h3>

<pre><code>#include "FlexLexer.h"
#include "parser.tab.h"

int main()
{
    // Get user input
    std::cout &lt;&lt; "Expression:";
    std::string     line;
    std::getline(std::cin, line);

    // Set up lexer to read from a stream
    std::stringstream   lineStream(line);
    yyFlexLexer         lexer(&amp;lineStream);

    // Set up parser tp read from lexer
    // and put output in result
    double              result;
    yy::Parser          parser(lexer, result);

    // Now do the parsing.
    parser.parse();

    std::cout &lt;&lt; "Result: " &lt;&lt; result &lt;&lt; "\n";
}
</code></pre>

<h3>Makefile</h3>

<pre><code>SRC     = lex.yy.cpp parser.tab.cpp utility.cpp main.cpp
OBJ     = $(patsubst %.cpp,%.o, $(SRC))
all:    exp

exp:    $(OBJ)
    g++ -o $@ $(OBJ)

%.o: %.cpp
    g++ -c $&lt;

lex.yy.cpp: lexer.l parser.tab.cpp
    flex lexer.l
    mv lex.yy.cc lex.yy.cpp

parser.tab.cpp:  parser.y
    bison -d parser.y
    mv parser.tab.c parser.tab.cpp
</code></pre>
    </div>