<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Edward's answer.</p>
<h2>Use <code>enum class</code> instead of <code>enum</code></h2>
<pre><code>enum class Outcome { user, bot, draw };
enum class Choice { rock, paper, scissors };
</code></pre>
<p>This does two things:</p>
<ul>
<li>Inject the names into the <code>enum class</code>, rather than into the surrounding namespace. (You then have to write <code>Outcome::user</code> instead of <code>user</code>, until C++20's <code>using enum</code> is available)</li>
<li>Remove any implicit conversion to/from the underlying type.</li>
</ul>
<h3>A better random generation alternative</h3>
<p>You want equiprobable numbers between 0 and 2 inclusive, to be able to get one of <code>Choice</code>s values. Improving on Edward's answer, this would be:</p>
<pre><code>Choice getBotChoice() {
    constexpr static std::array&lt;Choice,3&gt; choices{ rock, paper, scissors };
    static auto rnd{std::mt19937{std::random_device{}()}};
    std::uniform_int_distribution&lt;int&gt; distribution(0,choices.size() - 1);
    return choices[distribution(rnd)];
}
</code></pre>
    </div>