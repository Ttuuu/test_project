<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For the sake of completion and because, "why not?", I make a complete, and I do mean complete list of function in 1, 2, 3 and 6, yes I said 6 dimension.
Note that I've split up the operations, so that if you want to for example rotate around the X axis in 3 dimension (whatever direction) you will need the Flip AND  Flip Diag function.
Furthermore, since I couldn't figure out what to call the axis of the higher dimensions, all axis are now labeled X0 through X5, instead of x, y, z, w/t, etc.
Please note that while I do believe that the functions for 6 dimensions are correct, I offer no guarantee.
That being said, whatever dimension you want to work in, this list of functions should allow you to reach all rotations and symmetries, 2 for 1d, 8 for 2d, 48 for 3d and I do believe 240 for 6d, but I suppose that is irrelevant.
Also, I've "reversed" the deltaSwap function for no other reason than I think somehow it's more correct this way, so do beware that using the deltaSwap function from earlier examples will yield an incorrect result.
The naming scheme can be somewhat confusing, at least I had a hard time coming up with one, but here's an explanations as fa as I can explain it.</p>

<p>FlipX0_2D() result in what we would consider a "mirrored" image or patter, thus it "flips" the pattern in the direction of the vector (I think that's the right terminology) that is X0, or just plain x if you prefer.
FlipDiagX0_X1_2D() and FlpDiagX1_X0_2D() is slightly more confusing, but basically ascending order means ascending order means it flippes in the direction perpendicular to the diagonal "vector" going through 0,0, and descending of course means the reverse.
I should've changed the order I suppose, but this make more sense to me for some reason.
If in doubt, test in 2D.
The same principles of course goes for higher dimensions.
Lastly I'd very much like to hear if anyone finds an application for this, and I'd also appreciate suggestions as to how I can improve my somewhat confusing explanation.</p>

<p>Best regards.</p>

<pre><code>#include &lt;stdint.h&gt;

static inline uint64_t deltaSwap( uint64_t b, int delta, uint64_t mask )
{
    if( ( ( mask&lt;&lt;delta )^mask ) == 0xffffffffffffffff )
        return ( ( b&gt;&gt;delta )&amp;mask )|( ( b&amp;mask )&lt;&lt;delta );
    uint64_t t = ( b^( b &gt;&gt; delta ) )&amp;mask;
    return b^t^( t &lt;&lt; delta );
}

//1D

uint64_t brFlip_X0_1D( uint64_t b )
{
    b = deltaSwap( b, 32, 0x00000000ffffffff );
    b = deltaSwap( b, 16, 0x0000ffff0000ffff );
    b = deltaSwap( b,  8, 0x00ff00ff00ff00ff );
    b = deltaSwap( b,  4, 0x0f0f0f0f0f0f0f0f );
    b = deltaSwap( b,  2, 0x3333333333333333 );
    b = deltaSwap( b,  1, 0x5555555555555555 );
    return b;
}

//2D

uint64_t brFlip_X1_2D( uint64_t b )
{
    b = deltaSwap( b, 32, 0x00000000ffffffff );
    b = deltaSwap( b, 16, 0x0000ffff0000ffff );
    b = deltaSwap( b,  8, 0x00ff00ff00ff00ff );
    return b;
}

uint64_t brFlip_X0_2D( uint64_t b )
{
    b = deltaSwap( b,  4, 0x0f0f0f0f0f0f0f0f );
    b = deltaSwap( b,  2, 0x3333333333333333 );
    b = deltaSwap( b,  1, 0x5555555555555555 );
    return b;
}

uint64_t brFlipDiag_X0_X12D( uint64_t b )
{
    b = deltaSwap( b, 28, 0x00000000f0f0f0f0 );
    b = deltaSwap( b, 14, 0x0000cccc0000cccc );
    b = deltaSwap( b,  7, 0x00aa00aa00aa00aa );
    return b;
}

uint64_t brFlipDiag_X1_X0_2D( uint64_t b )
{
    b = deltaSwap( b, 36, 0x000000000f0f0f0f );
    b = deltaSwap( b, 18, 0x0000333300003333 );
    b = deltaSwap( b,  9, 0x0055005500550055 );
    return b;
}

//3D

uint64_t brFlipX2_3D( uint64_t b )
{
    b = deltaSwap( b, 32, 0x00000000ffffffff );
    b = deltaSwap( b, 16, 0x0000ffff0000ffff );
    return b;
}

uint64_t brFlipX1_3D( uint64_t b )
{
    b = deltaSwap( b,  8, 0x00ff00ff00ff00ff );
    b = deltaSwap( b,  4, 0x0f0f0f0f0f0f0f0f );
    return b;
}

uint64_t brFlipX0_3D( uint64_t b )
{
    b = deltaSwap( b,  2, 0x3333333333333333 );
    b = deltaSwap( b,  1, 0x5555555555555555 );
    return b;
}

uint64_t brFlipDiagX0_X1_3D( uint64_t b )
{
    b = deltaSwap( b,  6, 0x00cc00cc00cc00cc );
    b = deltaSwap( b,  3, 0x0a0a0a0a0a0a0a0a );
    return b;
}

uint64_t brFlipDiagX1_X0_3D( uint64_t b )
{
    b = deltaSwap( b, 10, 0x0033003300330033 );
    b = deltaSwap( b,  5, 0x0505050505050505 );
    return b;
}

uint64_t brFlipDiagX0_X2_3D( uint64_t b )
{
    b = deltaSwap( b, 30, 0x00000000cccccccc );
    b = deltaSwap( b, 15, 0x0000aaaa0000aaaa );
    return b;
}

uint64_t brFlipDiagX2_X0_3D( uint64_t b )
{
    b = deltaSwap( b, 34, 0x0000000033333333 );
    b = deltaSwap( b, 17, 0x0000555500005555 );
    return b;
}

uint64_t brFlipDiagX1_X2_3D( uint64_t b )//16,4
{
    b = deltaSwap( b, 24, 0x00000000ff00ff00 );
    b = deltaSwap( b, 12, 0x0000f0f00000f0f0 );
    return b;
}

uint64_t brFlipDiagX2_X1_3D( uint64_t b )
{
    b = deltaSwap( b, 40, 0x0000000000ff00ff );
    b = deltaSwap( b, 20, 0x00000f0f00000f0f );
    return b;
}

//6D

uint64_t brFlipX5_6D( uint64_t b )
{
    b = deltaSwap( b, 32, 0x00000000ffffffff );
    return b;
}
uint64_t brFlipX4_6D( uint64_t b )
{
    b = deltaSwap( b, 16, 0x0000ffff0000ffff );
    return b;
}
uint64_t brFlipX3_6D( uint64_t b )
{
    b = deltaSwap( b,  8, 0x00ff00ff00ff00ff );
    return b;
}
uint64_t brFlipX2_6D( uint64_t b )
{
    b = deltaSwap( b,  4, 0x0f0f0f0f0f0f0f0f );
    return b;
}
uint64_t brFlipX1_6D( uint64_t b )
{
    b = deltaSwap( b,  2, 0x3333333333333333 );
    return b;
}
uint64_t brFlipX0_6D( uint64_t b )
{
    b = deltaSwap( b,  1, 0x5555555555555555 );
    return b;
}

uint64_t brFlipDiagX5_X4_6D( uint64_t b )
{
    b = deltaSwap( b,48, 0x000000000000ffff );
    return b;
}
uint64_t brFlipDiagX4_X5_6D( uint64_t b )
{
    b = deltaSwap( b,16, 0x00000000ffff0000 );
    return b;
}
uint64_t brFlipDiagX5_X3_6D( uint64_t b )
{
    b = deltaSwap( b,40, 0x0000000000ff00ff );
    return b;
}
uint64_t brFlipDiagX3_X5_6D( uint64_t b )
{
    b = deltaSwap( b,24, 0x00000000ff00ff00 );
    return b;
}
uint64_t brFlipDiagX5_X2_6D( uint64_t b )
{
    b = deltaSwap( b,36, 0x000000000f0f0f0f );
    return b;
}
uint64_t brFlipDiagX2_X5_6D( uint64_t b )
{
    b = deltaSwap( b,28, 0x00000000f0f0f0f0 );
    return b;
}
uint64_t brFlipDiagX5_X1_6D( uint64_t b )
{
    b = deltaSwap( b,34, 0x0000000033333333 );
    return b;
}
uint64_t brFlipDiagX1_X5_6D( uint64_t b )
{
    b = deltaSwap( b,30, 0x00000000cccccccc );
    return b;
}
uint64_t brFlipDiagX5_X0_6D( uint64_t b )
{
    b = deltaSwap( b,33, 0x0000000055555555 );
    return b;
}
uint64_t brFlipDiagX0_X5_6D( uint64_t b )
{
    b = deltaSwap( b,31, 0x00000000aaaaaaaa );
    return b;
}
uint64_t brFlipDiagX4_X3_6D( uint64_t b )
{
    b = deltaSwap( b,24, 0x000000ff000000ff );
    return b;
}
uint64_t brFlipDiagX3_X4_6D( uint64_t b )
{
    b = deltaSwap( b, 8, 0x0000ff000000ff00 );
    return b;
}
uint64_t brFlipDiagX4_X2_6D( uint64_t b )
{
    b = deltaSwap( b,20, 0x00000f0f00000f0f );
    return b;
}
uint64_t brFlipDiagX2_X4_6D( uint64_t b )
{
    b = deltaSwap( b,12, 0x0000f0f00000f0f0 );
    return b;
}
uint64_t brFlipDiagX4_X1_6D( uint64_t b )
{
    b = deltaSwap( b,18, 0x0000333300003333 );
    return b;
}
uint64_t brFlipDiagX1_X4_6D( uint64_t b )
{
    b = deltaSwap( b,14, 0x0000cccc0000cccc );
    return b;
}
uint64_t brFlipDiagX4_X0_6D( uint64_t b )
{
    b = deltaSwap( b,17, 0x0000555500005555 );
    return b;
}
uint64_t brFlipDiagX0_X4_6D( uint64_t b )
{
    b = deltaSwap( b,15, 0x0000aaaa0000aaaa );
    return b;
}
uint64_t brFlipDiagX3_X2_6D( uint64_t b )
{
    b = deltaSwap( b,12, 0x000f000f000f000f );
    return b;
}
uint64_t brFlipDiagX2_X3_6D( uint64_t b )
{
    b = deltaSwap( b, 4, 0x00f000f000f000f0 );
    return b;
}
uint64_t brFlipDiagX3_X1_6D( uint64_t b )
{
    b = deltaSwap( b,10, 0x0033003300330033 );
    return b;
}
uint64_t brFlipDiagX1_X3_6D( uint64_t b )
{
    b = deltaSwap( b, 6, 0x00cc00cc00cc00cc );
    return b;
}
uint64_t brFlipDiagX3_X0_6D( uint64_t b )
{
    b = deltaSwap( b, 9, 0x0055005500550055 );
    return b;
}
uint64_t brFlipDiagX0_X3_6D( uint64_t b )
{
    b = deltaSwap( b, 7, 0x00aa00aa00aa00aa );
    return b;
}
uint64_t brFlipDiagX2_X1_6D( uint64_t b )
{
    b = deltaSwap( b, 6, 0x0303030303030303 );
    return b;
}
uint64_t brFlipDiagX1_X2_6D( uint64_t b )
{
    b = deltaSwap( b, 2, 0x0c0c0c0c0c0c0c0c );
    return b;
}
uint64_t brFlipDiagX2_X0_6D( uint64_t b )
{
    b = deltaSwap( b, 5, 0x0505050505050505 );
    return b;
}
uint64_t brFlipDiagX0_X2_6D( uint64_t b )
{
    b = deltaSwap( b, 3, 0x0a0a0a0a0a0a0a0a );
    return b;
}
uint64_t brFlipDiagX1_X0_6D( uint64_t b )
{
    b = deltaSwap( b, 3, 0x1111111111111111 );
    return b;
}
uint64_t brFlipDiagX0_X1_6D( uint64_t b )
{
    b = deltaSwap( b, 1, 0x2222222222222222 );
    return b;
}
</code></pre>
    </div>