<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Remember, <code>let</code> variable bindings are local to the scope. In your example you have two scopes inside the <code>getUnits</code> function:</p>

<pre><code>function getUnits(country) {
  // function scope
  if (imperialCountries.indexOf(country) === -1) {
    // scope 1
  } else {
    // scope 2
  }
}
</code></pre>

<p>If you declare a variable using the <code>let</code> keyword in either of the inner scopes, it <strong>will be unbound</strong> once that scope finishes.</p>

<p>When you declare variables with the <code>var</code> keyword they will still be bound outside of the inner scopes of the given function. Effectively, using <code>var</code> as in your example, is the same as this:</p>

<pre><code>function getUnits(country) {
  var units;

  if (imperialCountries.indexOf(country) === -1) {
    units = 'metric';
  } else {
    units = 'imperial';
  }
}
</code></pre>

<p>If you wish to use <code>let</code> then just replace the <code>var</code> in the above example with it.</p>

<p>One more thing, since the <code>imperialCountries</code> variable is a <code>const</code>, it might be better to keep it outside of the <code>getUnits</code> function. (Unless you do not wish to pollute the global namespace)</p>
    </div>