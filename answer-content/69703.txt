<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a special case of <a href="http://en.wikipedia.org/wiki/Josephus_problem#k.3D2" rel="nofollow">Josephus problem</a>: </p>

<blockquote>
  <p>There are people standing in a circle waiting to be executed. The
  counting out begins at some point in the circle and proceeds around
  the circle in a fixed direction. In each step, a certain number of
  people are skipped and the next person is executed. The elimination
  proceeds around the circle (which is becoming smaller and smaller as
  the executed people are removed), until only the last person remains,
  who is given freedom. The task is to choose the place in the initial
  circle so that you are the last one remaining and so survive.</p>
</blockquote>

<p>100 gunmen scenario described in the question is equivalent to
<code>josephus(100, 2, 1)</code>. To get entire sequence use </p>

<pre><code>import java.util.*;

public static void main(String[] argv) 
{
    System.out.println(josephus(100,2,1));
}
</code></pre>

<p>Last man standing is on position <code>josephus(100,2,1).get(99)</code>.</p>

<p>Most efficient in case of step == 2 is analytical solution (see @rolfl 's answer) with <code>O(1)</code> run time.</p>

<p>If step parameter changes from from 2 to 3 or more, run time increases to <code>O(N)</code>.</p>

<pre><code>// remove N elements in equal steps starting at specific point
static List&lt;Integer&gt; josephus(int N, int step, int start)
{
    if (N &lt; 1 || step &lt; 1 || start &lt; 1) return null;

    List&lt;Integer&gt; p = new LinkedList&lt;Integer&gt;();
    for (int i = 0; i &lt; N; i++)
        p.add(i+1);

    List&lt;Integer&gt; r = new LinkedList&lt;Integer&gt;();
    int i = (start - 2) % N;
    for (int j = N; j &gt; 0; j--) {
        i = (i + step) % N--;
        r.add(p.remove(i--));
    }

    return r;
}
</code></pre>
    </div>