<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't repeat yourself</h3>

<p>There is redundant logic in the processing of the <code>-d</code> and <code>--delimiter=...</code> options. I would eliminate that, to be something more like this:</p>

<pre><code>-d|--delimiter)
  [ $# -gt 1 ] &amp;&amp; arg=$1 || arg=
  parseDelimiter "$arg"
  ;;
--delimiter=*)
  parseDelimiter "${1#*=}"
  ;;
</code></pre>

<p>Where <code>parseDelimiter</code> is a function that will parse the passed argument and set <code>delimiter</code> appropriately, or exit with an error.</p>

<h3>A simpler pattern in <code>case</code> (maybe)</h3>

<p>Instead of <code>,|.|\;|:|\|)</code>, perhaps <code>[,.\;:\|])</code> is slightly simpler and easier to type (less likely you mistype something, for example less likely to forget a <code>|</code> between the different allowed values).</p>

<h3>Assign positional arguments to descriptive variables early on</h3>

<p>Near the end of the script I see <code>done &lt;"${1:-/dev/stdin}"</code>, and wonder:
<em>what was <code>$1</code> again?</em>
I think it's easier to understand when positional arguments are assigned to variables with descriptive names early on in a script.</p>

<h3>Prefer comments on their own lines</h3>

<p>I read code from top to bottom,
and this line makes my eyes make an unnecessary detour to the right:</p>

<blockquote>
<pre><code>status=true                     # until a command fails
</code></pre>
</blockquote>

<p>I would have preferred that comment on its own line just before the code it's referring to.</p>

<p>Incidentally, I don't understand what this comment is trying to say.
The <code>status</code> variable is used to determine the exit status of the program.
In this script, it will be "failure" if some failure happened in the loop body, otherwise "success".</p>

<p>I would have named this <code>exit_status</code>, and then at the end of the script do <code>exit "$exit_status"</code>, rather than the current <code>exec $status</code>, which I find a bit odd.</p>
    </div>