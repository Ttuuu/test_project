<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Style</strong></p>

<ol>
<li>I don't like the name <code>AutoBuildCommandLineHelper</code> for a class which implements an interface like <code>IAutoBuildCommandLineArgs</code>. I would have named it <code>AutoBuildCommandLineArgs</code></li>
<li>You have made <code>ParamSpecifier</code> a named constant but not the quotes you strip of the parameter value.</li>
</ol>

<p><strong>Possible Bugs</strong></p>

<ol>
<li>If I read <code>IsSpecified()</code> correctly then it accepts arguments starting with <code>Name</code>. Given that <code>Name</code> seems to be the one letter abbreviation this means if I specify an invalid argument which happens to start with a letter of a valid argument then <code>IsSpecified()</code> will return true.</li>
<li>If you call <code>ParameterValue()</code> on an argument which does not have (i.e. doesn't require) a parameter it will throw an <code>IndexOutOfRangeException</code> as <code>values</code> will only have 1 entry</li>
</ol>

<p><strong>Design</strong></p>

<p>When you want to add a new command line option you have to do 5 or 6 things:</p>

<ol>
<li>Add a new class representing the new option</li>
<li>Register that class with the IoC container (this could possibly happen automagically depending on the container used)</li>
<li>Add a new property to <code>IAutoBuildCommandLineArgs</code></li>
<li>Add a new property to <code>AutoBuildCommandLineHelper</code></li>
<li>Add a new property to <code>AutoBuildCommandLineHelper</code> constructor</li>
<li>Add a new assignment in <code>AutoBuildCommandLineHelper</code> constructor to copy parameter into property</li>
</ol>

<p>Seems a bit involved. I hacked together an alternative version which should fit DI just nicely:</p>

<pre><code>public enum Option
{
    NoLog,
    Quiet,
    Server,
    LogLevel,
    Help,
}

public interface ICommandLineOptions
{
    bool Has(Option option);
    string ValueOf(Option option);
}

public class CommandLineOptions : ICommandLineOptions
{
    private class CommandLineOption
    {
        public CommandLineOption(Option type, string shortKey, string longKey, string description, bool requiresParam)
        {
            Type = type;
            Short = shortKey;
            Long = longKey;
            Description = description;
            RequiresParam = requiresParam; 
        }

        public readonly Option Type;
        public readonly string Short;
        public readonly string Long;
        public readonly string Description;
        public readonly bool RequiresParam;
    }

    private static readonly List&lt;CommandLineOption&gt; _AllOptions = 
        new List&lt;CommandLineOption&gt;
        {
            new CommandLineOption(Option.NoLog,     "n", "nolog",    "Don't log",          false),
            new CommandLineOption(Option.Quiet,     "q", "quiet",    "Run quietly",        false),
            new CommandLineOption(Option.Server,    "s", "server",   "Run in server mode", false),
            new CommandLineOption(Option.LogLevel, "ll", "loglevel", "Set log level",      true),
            new CommandLineOption(Option.Help,      "?", "help",     "Print help",         false),
        };

    private static const char _ParamSpecifier = ':';
    private static readonly char[] _Switches = { '-', '/' };
    private static readonly char[] _Quotes = { '"', '\'' };

    private Dictionary&lt;Option, string&gt; _AvailableOptions = new Dictionary&lt;Option, string&gt;();

    public CommandLineOptions(string[] args)
    {
        foreach (var arg in args.Select(a =&gt; a.Trim(_Switches)))
        {
            var parts = arg.Split(new char[] {_ParamSpecifier }, 2, StringSplitOptions.RemoveEmptyEntries);

            var option = _AllOptions.FirstOrDefault(o =&gt; o.Short == parts.First().ToLower() || o.Long == parts.First().ToLower());
            if (option == null)
                throw new ArgumentException(string.Format("Unknown command line option {0}", arg));
            if (option.RequiresParam &amp;&amp; parts.Length == 1)
                throw new ArgumentException(string.Format("Command line option {0} is missing required parameter", arg));
            _AvailableOptions[option.Type] = option.RequiresParam ? parts.Last().Trim(_Quotes) : "";
        }
    }

    public bool Has(Option option)
    {
        return _AvailableOptions.ContainsKey(option);
    }

    public string ValueOf(Option option)
    {
        string value;
        if (!_AvailableOptions.TryGetValue(option, out value))
            throw new ArgumentException(string.Format("Option {0} not present", option));
        return value;
    }
}
</code></pre>

<p>When you want to add a new option you have to do 2 things:</p>

<ol>
<li>Add a new entry to the <code>enum</code></li>
<li>Add a new entry to the <code>_AllOptions</code> dictionary</li>
</ol>

<p>From a DI perspective anything which needs access to the options just depends on <code>ICommandLineOptions</code>. </p>

<p>If you wanted to get real fancy you could make <code>CommandLineOption</code> public, add an interface <code>ICommandLineOption</code> for it and make <code>CommandLineOptions</code> take a dependency on a collection of <code>ICommandLineOption</code>s. Then you could register all the options you want to support in the container rather than hard coding them in <code>CommandLineOptions</code>.</p>
    </div>