<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Inheritance</h3>

<p>At least in theory, the inheritance you've used here is somewhat dangerous--it's possible to convert a <code>JSONPretify</code> to a <code>std::string</code> implicitly, and probably more importantly, to convert a <code>JSONPretify *</code> to a <code>std::string *</code> implicitly. If a user ends up deleting a <code>JSONPretify</code> via a <code>std::string *</code>, you get undefined behavior.</p>

<p>Since <code>std::string</code> doesn't have any virtual functions, you're not overriding any virtual functions. That means you're not gaining <em>much</em> by using inheritance. If you really want to use inheritance anyway, I'd at least consider using private inheritance. This prevents implicit conversion to the base class, removing (most of) the danger. A user could still convert to the base class using an explicit cast, but at least you're forcing them to do it explicitly.</p>

<h3>Use of <code>this-&gt;</code></h3>

<p>Although some languages require that you use <code>this-&gt;</code> (or equivalents such as <code>self</code>) to refer to member variables/functions, C++ does not--and doing so adds a great deal of visual noise that distracts and hurts readability. It should be avoided unless truly necessary (which it's not here).</p>

<h3>Variable names</h3>

<p>That leads directly to looking at some of the variable names, such as <code>insert</code>. Picking good names is often difficult, but there's not such a shortage of names that we need to have a single statement using the same name for both a function and a variable, such as: <code>this-&gt;insert(pos_obj_start+1, insert);</code>. I'd rename the variable to something like <code>leader</code> or perhaps <code>prolog</code>.</p>

<h3>Consider default arguments to reduce repetition</h3>

<p>For example, you have two nearly identical constructors:</p>

<pre><code>JSONPretify(std::string j){
    this-&gt;assign(j);
    pretify();
};
JSONPretify(std::string j, bool colon_space){
    this-&gt;assign(j);
    pretify();
    if(colon_space)
        insertColonSpaces();
};
</code></pre>

<p>I'd at least consider collapsing these down to one with a default argument:</p>

<pre><code>JSONPretify(std::string j, bool colon_space = false){
    this-&gt;assign(j);
    pretify();
    if(colon_space)
        insertColonSpaces();
};
</code></pre>

<p>This will normally retain the same behavior--you can invoke it as:</p>

<pre><code>JSONPretify(input);
JSONPretify(input, false); // same as above
JSONPretify(input, true);
</code></pre>

<h3>Add a little safety</h3>

<p>Although it's <em>probably</em> not a big deal, I'm guessing you don't normally want to allow implicit conversions from <code>std::string</code> to <code>JSONPretify</code>, so you might as well mark the constructor that can be invoked with only one argument as <code>explicit</code>.</p>

<pre><code>explicit JSONPretify(std::string j, bool colon_space = false) {
    this-&gt;assign(j);
    pretify();
    if(colon_space)
        insertColonSpaces();
};
</code></pre>

<h3>Avoid boolean parameters</h3>

<p>When looking at client code, I doubt it's immediately obvious how <code>JSONPretify(foo, true)</code> differs from <code>JSONPretify(foo, false)</code> (i.e., it's not obvious what the Boolean is controlling). I'd consider using an <code>enum</code> instead:</p>

<pre><code>enum class colons { tight, spaced };

explicit JSONPretify(std::string j, colons spacing=colons::tight) {
    this-&gt;assign(j);
    pretify();
    if(spacing == spaced)
        insertColonSpaces();
};
</code></pre>

<p>This would be invoked something like:</p>

<pre><code>JSONPretify(foo, colons::spaced);
</code></pre>

<p>or:</p>

<pre><code>JSONPretify(foo, colons::tight);
</code></pre>

<p>...which seems quite a bit clearer, at least to me (though some might prefer a name other than <code>tight</code>).</p>

<h3>Spelling</h3>

<p>I hesitate to even mention this, but it seems like the class name should have two "t"s: <code>JSONPrettify</code>.</p>
    </div>