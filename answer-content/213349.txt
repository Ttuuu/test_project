<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are using the older, legacy <code>java.io.File</code> and <code>java.io.FileReader</code> classes for opening a newer <code>java.nio.file.Path</code> object.  The <code>nio</code> stands for "new IO", and can make use of high-efficiency byte-buffers and operating system calls for file reading and writing.  You may (or may not) see an improvement if you use the newer <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newBufferedReader(java.nio.file.Path)" rel="nofollow noreferrer"><code>Files.newBufferedReader(Path)</code></a> method from <code>java.nio.file</code> to open the file.</p>

<p>(You cannot specify the buffer size using the <code>newBufferedReader()</code> method, but your 4MB buffer was likely not helping you since the operating system would limit itself to transferring the drive's block-size memory chunks anyway.)</p>

<p>The <code>TokenIterator</code> constructor is <code>private</code>, and only called from <code>forPath(...)</code>.  The <code>forPath(...)</code> method does preparatory work for the constructor, creating a <code>BufferedReader</code>, <code>StringBuilder</code> and reading one character from the reader to prime the <code>TokenIterator</code>.  These are all internal details which could be hidden completely inside the constructor:</p>

<pre><code>private final StringBuilder sb = new StringBuilder();

public TokenIterator(Path path) {
    try {
       reader = Files.newBufferedReader(path);
       ch = reader.read();
    } catch (IOException e) {
       throw new UncheckedIOException(e);
    }
}
</code></pre>

<p><code>TokenIterator</code> is declared as an <code>AutoCloseable</code> resource, but you are not taking advantage of that in your <code>main</code> function, so possibly leaking a resource:</p>

<pre><code>public static void main(String[] args) {

    try (TokenIterator it = new TokenIterator(Paths.get("item_games.txt"))) {
        long start = System.currentTimeMillis();

        for (String s : it) { /* no-op */ }

        System.out.printf("Token iteration time: %d", System.currentTimeMillis() - start);
    }  // TokenIterator is auto-closed here.

}
</code></pre>
    </div>