<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Everytime you pass something without <em>ByVal</em> you <strong>are</strong> passing it <em>ByRef</em>, which is general, isn't necessary.</p>

<p>I also see you passing a <code>Scripting.Dictionary</code> around, <em>ByRef</em>. I'd pass this as an object, but I also always use late-binding. I think this indicates you should create a custom <em>Class</em> to replace the dictionary. </p>

<blockquote>
<pre><code>Private Function GetStatements() As Scripting.Dictionary
</code></pre>
</blockquote>

<p>It's strange to pass nothing to a function. It's a function because you're creating and returning the object. Even if you just pass <code>UsedRange</code> it would make more sense, though I see how you ended up there.</p>

<blockquote>
<pre><code>Private Function NewDBConnection() As ADODB.Connection
</code></pre>
</blockquote>

<p>It looks to me like you <em>could</em> just have your connection string as a constant and you could open the connection without this entire function. However, I don't think that would be <em>better</em> than this - if just for readability and clarity.</p>

<h3>Variables</h3>

<p>You have a lot of pretty generically named variables e.g. <code>Conn</code>, <code>Rng</code>, etc. You're also using <code>ProperCase</code> for variables, when they should use <code>camelCase</code>. So if we were to evaluate your variables</p>

<blockquote>
<pre><code>Dim ActSh As Worksheet 
</code></pre>
  
  <p>This is ActiveSheet, a built-in variable, I don't think it's needed. If it is, then it needs to tell me what's on the sheet.</p>

<pre><code>Dim Conn As ADODB.Connection
</code></pre>
  
  <p>I mean, this is okay..</p>

<pre><code>Dim Stmt As Scripting.Dictionary
</code></pre>
  
  <p>Why would a statement be a dictionary? You've lost me with this name</p>

<pre><code>Dim Sh As Variant
</code></pre>
  
  <p>This is a <em>key</em> right?</p>

<pre><code>Dim ConStr As String
</code></pre>
  
  <p>connectionString is better</p>

<pre><code>Dim Rng As Range
</code></pre>
  
  <p>Tell me what range this is - I know it's a range when you declare it as a range</p>

<pre><code>Dim Row As Long
</code></pre>
  
  <p>I avoid using things like Row or Column because they are key words in the VBE. I usually go with targetRow or currentRow</p>

<pre><code>Dim RowHdr As Long
</code></pre>
  
  <p>Characters are free! rowHeader would be better, but it sounds like a string, not a long. headerRow sounds better.</p>

<pre><code>Dim RowCount As Long rowCount
Dim Col As Long targetColumn
Dim ColSh As Long
Dim ColSQL As Long
</code></pre>
  
  <p>I'm not sure what these are - use the name to tell me what I want to know!</p>

<pre><code>Dim ColCount As Long columnCount
Dim ValHdr As String
Dim ValSh As String
Dim ValSQL As String
</code></pre>
  
  <p>Same, tell me what these are!</p>

<pre><code>Dim Val As String
</code></pre>
  
  <p>A value as a string. You know what I'm going to say, right?
      Dim Sh As Worksheet
   ?
      Dim Rs As ADODB.Recordset
   I see this a lot, so I guess it's okay</p>
</blockquote>

<h3>Function Names</h3>

<blockquote>
<pre><code>Private Function ExecSQLStmt(Conn As ADODB.Connection, ByVal ShName As String, SQLStmt As String) As Boolean
</code></pre>
</blockquote>

<p>This is an execute function that returns a boolean - why? Either it's executing and returns nothing, or it's executing and returning a result, right?</p>

<blockquote>
<pre><code>Private Function CheckStatements(Stmt As Scripting.Dictionary) As Boolean
</code></pre>
</blockquote>

<p>If this is a boolean function, try to name it as such e.g. <code>IsValidStatement</code> or some such.</p>

<h3>GetStatements</h3>

<p>With the variable naming as it is, it's very difficult to tell exactly what's happening upon a cursory glance.</p>

<ul>
<li>With usedrange</li>
<li>for each row</li>
<li>for each column</li>
<li>check if cell = !SHEET or !SQL</li>
<li>Set sheet or statement</li>
<li>If we're not on row 1, exit for</li>
</ul>

<p>Seems your first check would just be to loop through only the rows you want, instead of looping through everything just to exit on row 2? I mean it's difficult to tell what exactly the goal is, but if you just want the header row to be row 1, why not just get row 1? You're setting these values within the <code>If</code> but then looping and replacing them without doing anything with them.</p>

<ul>
<li>If there's both a header and a statement then</li>
<li>Get range values and place them into the dictionary, if they aren't empty</li>
</ul>

<p>Seems pretty straight forward. In fact, you could just take everything into an array first and you wouldn't need the dictionary</p>

<pre><code>Private Function GetMyValues(ByVal target As Range) As Variant
    GetMyValues = target
End Function
</code></pre>

<p>Bam! No need to look at the sheet again. Now you can loop through the array and store your results in another array or just expand your current array. Then when you are done, print them back out as an array.</p>

<h3>Error handling?</h3>

<blockquote>
<pre><code>Private Function GetStrValue(Rng As Range) As String
    'Get the value of a cell, but do not throw and error if the cell
    'contains and error. Intead, just return an empty string

    Dim Val As String
    Val = ""

    On Error Resume Next
    Val = Rng.value
    On Error GoTo 0

    GetStrValue = Val
End Function
</code></pre>
</blockquote>

<p>When you declare a string it is declared as <code>vbNullString</code> which is a constant for your <code>""</code>. So, first, no need to set it to anything if it's going to be nothing. Second, always use <code>vbNullString</code> when you can instead of <code>""</code></p>

<p>Third, I don't see a way for this to throw an error, unless you don't pass it a valid range. This function, as far as I can see, not needed at all.</p>
    </div>