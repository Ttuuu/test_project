<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have already discussed this in a comment below <a href="https://codereview.stackexchange.com/a/216184/92478">Quuxplusone's answer</a>, but I thought I would make this up into an supplementary answer.</p>

<p>The constructor will leak <code>m_errstr = new char[512];</code> if one of the exceptions is ever thrown. C++ only <a href="https://isocpp.org/wiki/faq/exceptions#ctors-can-throw" rel="nofollow noreferrer">guarantees</a> that the memory which was allocated for the object itself will be freed on exception. However, this will not cover memory allocated in the construction process itself. As was already mentioned, the destructor is not run if the body of the constructor throws. You can read about it on the <a href="https://isocpp.org/wiki/faq/exceptions#selfcleaning-members" rel="nofollow noreferrer">ISO C++ FAQ</a> or try it yourself using the <a href="https://wandbox.org/permlink/gtnYuuA7X7FfS5HS" rel="nofollow noreferrer">example</a> of Quuxplusone.</p>

<p>I also want to point out an observation on the copy constructor. You're using <code>strcpy</code> to transfer the error message to the copied object there. According to the <a href="https://en.cppreference.com/w/cpp/string/byte/strcpy" rel="nofollow noreferrer">documentation</a>, using <code>strcpy</code> with an <code>dest</code> parameter not large enough to hold the value to copy will result in <strong>undefined behavior</strong>. Since there is no pre-allocation of <code>m_errstr</code> there, bad bad things may happen to you (up to and including <a href="https://devblogs.microsoft.com/oldnewthing/?p=633" rel="nofollow noreferrer">time travel</a>).</p>

<p>Fortunately the documentation also has an example how to fix this issue (code theirs):</p>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;memory&gt;

int main()
{
    const char* src = "Take the test.";
//  src[0] = 'M'; // can't modify string literal
    auto dst = std::make_unique&lt;char[]&gt;(std::strlen(src)+1); // +1 for the null terminator
    std::strcpy(dst.get(), src);
    dst[0] = 'M';
    std::cout &lt;&lt; src &lt;&lt; '\n' &lt;&lt; dst.get() &lt;&lt; '\n';
}
</code></pre>

<p>As a bonus it shows how to use a smart pointer with char arrays, which can be a reasonable solution to the memory leak problem.</p>
    </div>