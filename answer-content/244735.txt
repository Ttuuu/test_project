<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Paths</h2>
<pre><code>sys.path.append('..')
</code></pre>
<p>is scary. If it needs to happen at all, it should not be done at the global level - that will interfere with other consumers of your program's symbols.</p>
<p>If it can be avoided, don't do this at all.</p>
<h2>Type hints</h2>
<p>In a function signature as long and complex as this:</p>
<pre><code>def __init__(
    self,
    input_shape,
    classes_file,
    image_width,
    image_height,
    train_tf_record=None,
    valid_tf_record=None,
    anchors=None,
    masks=None,
    max_boxes=100,
    iou_threshold=0.5,
    score_threshold=0.5,
):
</code></pre>
<p>type hints would help. <code>image_width</code> and <code>image_height</code> can probably be <code>image_width: int, image_height: int</code> for instance.</p>
<h2>Context manager</h2>
<pre><code>    self.class_names = [
        item.strip() for item in open(classes_file).readlines()
    ]
</code></pre>
<p>should close the file after it's done:</p>
<pre><code>with open(classes_file) as f:
    self.class_names = [item.strip() for item in f]
</code></pre>
<p><code>readlines</code> can be replaced with implicit iteration over the file handle.</p>
<h2>Path formation</h2>
<pre><code>Path(os.path.join('..', 'Data', 'Photos'))
</code></pre>
<p>should be</p>
<pre><code>Path('..') / 'Data' / 'Photos'
</code></pre>
<p>You also write <code>os.path.join</code> elsewhere that a <code>Path</code> would be nicer.</p>
<p><code>os.path.isdir</code> and <code>shutil.move</code> should similarly be replaced with a call to a <code>Path</code> member.</p>
<h2>Interpolation</h2>
<pre><code>f'Got more than one configuration'
</code></pre>
<p>does not need to be an f-string since there are no fields.</p>
<h2>Throw-away values</h2>
<pre><code>    labels_frame = self.get_adjusted_labels(new_dataset_conf)
    if new_dataset_conf.get('augmentation'):
        labels_frame = self.augment_photos(new_dataset_conf)
</code></pre>
<p>The first assignment should be in an <code>else</code>, since you throw it away in one case.</p>
<h2>Exception logging</h2>
<pre><code>        default_logger.error(issue)
        raise ValueError(issue)
</code></pre>
<p>Pass the exception to <code>error(exc_info=)</code>; read about it here:</p>
<p><a href="https://docs.python.org/3.8/library/logging.html#logging.Logger.debug" rel="nofollow noreferrer">https://docs.python.org/3.8/library/logging.html#logging.Logger.debug</a></p>
<h2>Logic inversion</h2>
<pre><code>not (epoch + 1) % self.n_epochs == 0
</code></pre>
<p>should be</p>
<pre><code>(epoch + 1) % self.n_epochs != 0
</code></pre>
    </div>