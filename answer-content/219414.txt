<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've tagged this <a href="/questions/tagged/linq" class="post-tag" title="show questions tagged 'linq'" rel="tag">linq</a> so you're clearly aware of Linq, but this is not a Linq-like approach. The closest approximation in Linq is <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.groupby?view=netframework-4.8#System_Linq_Enumerable_GroupBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__" rel="nofollow noreferrer"><code>GroupBy</code></a>, so that can serve as a model:</p>

<ol>
<li>Instead of <code>string property</code> take <code>Func&lt;TSource, TKey&gt;</code>.</li>
<li>Instead of <code>List&lt;List&lt;T&gt;&gt;</code> (which, apart from anything else, violates the principle of coding to the interface instead of the implementation) return <code>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</code> (or, if you don't care about the value itself, <code>IEnumerable&lt;IEnumerable&lt;TSource&gt;&gt;</code>).</li>
</ol>

<p>Also, in Linq style, favour lazy implementation with <code>yield return</code>.</p>

<p>I would advise you to rewrite from scratch with those principles in mind.</p>

<hr>

<p>But I must address one major problem in this code, lest you repeat it in the rewrite:</p>

<blockquote>
<pre><code>    for (int i = 0; i &lt; inputs.Count(); i++)
    {
        var current = inputs.ElementAt(i);
</code></pre>
</blockquote>

<p>This is absolutely the wrong way to iterate over an <code>IEnumerable</code>. The right way is</p>

<pre><code>    foreach (var current in inputs)
    {
</code></pre>

<p>Otherwise if <code>inputs</code> is lazy you do far more work than necessary, and potentially execute side-effects more times than you might expect.</p>

<hr>

<p>Also,</p>

<blockquote>
<pre><code>    if (previousSelector == null)
</code></pre>
</blockquote>

<p>is problematic. What if this method is used with objects which actually have <code>null</code> as a value of the relevant property? I think the best approach is to use the current <code>IGrouping</code>: either initialise that to <code>null</code> and test whether it's null, or initialise it to a grouping with key <code>default(T)</code> and replace the special case with a special case which doesn't return an empty grouping.</p>
    </div>