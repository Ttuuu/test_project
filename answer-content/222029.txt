<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review Solution 1</h3>
<p>Sacrificing usability for the common consumer of your API in order to gain some usability for specific consumers that happen to subscribe on a multitude of events, should never be considered best practice.</p>
<blockquote>
<pre><code>Action&lt;Game1, EventArgs&gt; InitializeEvent;
public virtual void Initialize(object o, EventArgs e) 
{ 
    // the average consumer does not want to cast here 
    // if he only wants to be subscribed to this event -&gt;
    InitializeEventArgs initializeEventArgs = (InitializeEventArgs)e; 
}
</code></pre>
</blockquote>
<h3>Review Solution 2</h3>
<p>Grouping events together is a better approach, since the common consumer is not impacted. It is an augmentation, rather than a substitution, of the event pattern. Though your implementation using a <code>struct</code> is viable, I would opt to use a more common approach - the <a href="http://www.informit.com/articles/article.aspx?p=708378&amp;seqNum=3" rel="nofollow noreferrer">Callback Interface</a>.</p>
<blockquote>
<pre><code>public struct Events
{
    public Action&lt;Game1, MoveEventArgs&gt; MoveEvent { get; set; }
    public Action&lt;Game1, InitializeEventArgs&gt; InitializeEvent { get; set; }
    public Action&lt;Game1, DrawEventArgs&gt; DrawEvent { get; set; }
    public Action&lt;Game1, LoadContentEventArgs&gt; LoadContentEvent { get; set; }
}
</code></pre>
</blockquote>
<hr>
<h3>Proposed Solution</h3>
<p>You should determine whether to use either events, a callback interface or a mixture of both.</p>
<p>Let's assume you would like consumers to be able to subscribe to single events, and allow specific consumers to subscribe to all of them. The mixture of events and a callback interface could be implemented as follows.</p>
<p>Create event arguments</p>
<pre><code>public class MoveEventArgs : EventArgs { /* .. impl */ }
public class InitializeEventArgs : EventArgs { /* .. impl */ }
public class DrawEventArgs : EventArgs { /* .. impl */ }
public class LoadContentEventArgs : EventArgs { /* .. impl */ }
</code></pre>
<p>Create a callback interface that bundles handlers for all the relevant events.</p>
<pre><code> public interface IGameListener
 {
      void OnMove(Game1 game, MoveEventArgs e);
      void OnInitialize(Game1 game, InitializeEventArgs e);
      void OnDraw(Game1 game, DrawEventArgs e);
      void OnLoadContent(Game1 game, LoadContentEventArgs e);
 }
</code></pre>
<p>As discussed, you may want to create an <a href="https://blogs.oracle.com/corejavatechtips/listeners-vs-adapters" rel="nofollow noreferrer">adapter</a>. This allows derived classes to decide which event handlers to override.</p>
<pre><code>public abstract class GameAdapter : IGameListener
{
      public virtual void OnMove(Game1 game, MoveEventArgs e) {}
      public virtual void OnInitialize(Game1 game, InitializeEventArgs e) {}
      public virtual void OnDraw(Game1 game, DrawEventArgs e) {}
      public virtual void OnLoadContent(Game1 game, LoadContentEventArgs e) {}
}
</code></pre>
<p><code>Game1</code> uses events and allows for registration of specific listeners. If you don't like to 'pollute' the game with these actions, you could let a <a href="https://en.wikipedia.org/wiki/Mediator_pattern" rel="nofollow noreferrer">mediator</a> perform the registration of the callback interface. <em>Argument checks are omitted for brevity.</em></p>
<pre><code> public class Game1
 {
        public event Action&lt;Game1, MoveEventArgs&gt; MoveEvent;
        public event Action&lt;Game1, InitializeEventArgs&gt; InitializeEvent;
        public event Action&lt;Game1, DrawEventArgs&gt; DrawEvent;
        public event Action&lt;Game1, LoadContentEventArgs&gt; LoadContentEvent;

        public void Register(IGameListener listener)
        {
            MoveEvent += listener.OnMove;
            InitializeEvent += listener.OnInitialize;
            DrawEvent += listener.OnDraw;
            LoadContentEvent += listener.OnLoadContent;
        }

        public void Unregister(IGameListener listener)
        {
            MoveEvent -= listener.OnMove;
            InitializeEvent -= listener.OnInitialize;
            DrawEvent -= listener.OnDraw;
            LoadContentEvent -= listener.OnLoadContent;
        }

        // other instance code ..
 }
</code></pre>
    </div>