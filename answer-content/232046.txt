<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know this isn't a fancy OO solution with controllers and value objects, but this (IMHO) is a straight forward and simple solution which does exactly what it says on the tin.</p>

<p>One of the big problems I have is that you almost seem to be cramming in loads of OO for very little gain.  You have 20 classes, one for each variable with some processing.  Now if that processing was specific to that variable and it sometimes can be fairly complex I could understand, but especially in your X class (I know this is just an example) you do something with both classes A and B - so firstly why is it in class X and not class A ( AB is in A ), but it also adds cross dependency of classes which doesn't fit with OO principles.</p>

<p>In my version, the basic concept is the same, convert the sequence of answers to a bit mask and then do something based on that bitmap, but in this case the things it calls are firstly just basic functions.  You can tune them to do whatever you want which allows you to build the OO structure based on real things (like entities, email etc.)...</p>

<pre><code>// Function names are doStuffn - where n is the mask for the option
function doStuff1() { 
    return "a"; 
}
function doStuff2() {
    return "b";
}
function doStuff3() {
    return "ab";
}
function doStuff5($values) {
    // Call the method to do whatever option 1 does, plus add the value
    // from option 1 and some text.
    return doStuff1().$values[0]."ac";
}
</code></pre>

<p>Then the part which calls these...</p>

<pre><code>// Calculate mask
$mask = 0;
$bit = 1;
foreach ( $values as $answer ) {
    if ( $answer )  {
        $mask += $bit;
    }
    $bit &lt;&lt;= 1;
}

// Call the function based on the mask
$fn = "doStuff".$mask;
if ( function_exists($fn) ) {
    echo $mask . "=&gt;" . ($fn($values));
}
</code></pre>
    </div>