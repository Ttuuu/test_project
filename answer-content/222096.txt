<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Test cases are very limited.  You might want to normalise equivalent addresses before hashing; for example, these addresses are all equivalent:</p>

<ul>
<li><code>user@example.org</code></li>
<li><code>user@Example.Org</code></li>
<li><code>"user"@example.org</code></li>
</ul>

<p>It's probably desirable that they hash to the same value.</p>

<p>Simply splitting on <code>@</code> is naive - it's better to split on <em>unquoted</em> <code>@</code>, or more simply, just on the last <code>@</code>, given that DNS names don't contain <code>@</code>.</p>

<p>It's probably worth reading <a href="https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx/" rel="nofollow noreferrer"><em>I Knew How To Validate An Email Address Until I Read The RFC</em></a>.  After that, start looking for an email address parsing library for Python; I haven't used it, but it appears that <a href="https://github.com/mailgun/flanker" rel="nofollow noreferrer">Flanker</a> will handle the parsing much more robustly than this code.</p>
    </div>