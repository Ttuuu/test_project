<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Nested types</h3>

<p>All “dependent” types are defined within the scope of <code>LinkedList</code>, which is good. To reference those types from within <code>LinkedList</code> you don't have to prefix the outer type. For example,</p>

<pre><code>public func index(before i: LinkedList&lt;Element&gt;.LinkedListIndex&lt;Element&gt;) -&gt; LinkedList&lt;Element&gt;.LinkedListIndex&lt;Element&gt; 
</code></pre>

<p>can be shortened to</p>

<pre><code>public func index(before i: LinkedListIndex&lt;Element&gt;) -&gt; LinkedListIndex&lt;Element&gt;
</code></pre>

<p>This applies at several places in your code.</p>

<h3>Nested generics</h3>

<p>There are several nested <em>generic</em> types:</p>

<pre><code>fileprivate class LinkedListNode&lt;T&gt; 
private struct NodeChain&lt;Element&gt;
public struct LinkedListIterator&lt;T&gt;: IteratorProtocol
public struct LinkedListIndex&lt;T&gt;: Comparable
</code></pre>

<p>All these types are <em>only</em> used with the generic placeholder equal to the <code>Element</code> type of <code>LinkedList</code>, i.e.</p>

<pre><code>private var headNode: LinkedListNode&lt;Element&gt;?
private var tailNode: LinkedListNode&lt;Element&gt;?

public typealias Iterator = LinkedListIterator&lt;Element&gt;
public typealias Index = LinkedListIndex&lt;Element&gt;
</code></pre>

<p>So these nested type do not need to be generic: They can simply use the <code>Element</code> type of <code>LinkedList</code>, i.e.</p>

<pre><code>fileprivate class LinkedListNode {
    public var value: Element
    public var next: LinkedListNode?
    public weak var previous: LinkedListNode?

    public init(value: Element) {
        self.value = value
    }
}
</code></pre>

<p>which is then used as</p>

<pre><code>private var headNode: LinkedListNode?
private var tailNode: LinkedListNode?
</code></pre>

<p>The same applies to the other nested generic types listed above. This allows to get rid of the distracting <code>&lt;T&gt;</code> placeholders and some type aliases. It becomes obvious that the same element type is used everywhere.</p>

<h3>Another simplification</h3>

<p>The <code>while true { ... }</code> loop in <code>NodeChain.init</code> is not nice for (at least) two reasons:</p>

<ul>
<li>A reader of the code has to scan the entire loop body in order to understand that (and when) the loop is eventually terminated.</li>
<li>An artificial <code>return nil</code> is needed to make the code compile, but that statement is never reached.</li>
</ul>

<p>Both problems are solved if we use a <code>while let</code> loop instead:</p>

<pre><code>init?&lt;S&gt;(of sequence: S) where S: Sequence, S.Element == Element {
   // ...

    while let nextElement = iterator.next() {
        let nextNode = LinkedListNode(value: nextElement)
        currentNode.next = nextNode
        nextNode.previous = currentNode
        currentNode = nextNode
        nodeCount += 1
    }
    tail = currentNode
    count = nodeCount
}
</code></pre>

<p>It also is not necessary to make the <code>head</code> and <code>node</code> properties of <code>NodeChain</code> implicitly unwrapped optionals (and does not make much sense for constant properties anyway). Simple non-optional constant properties will do:</p>

<pre><code>    let head: Node&lt;Element&gt;
    let tail: Node&lt;Element&gt;
</code></pre>

<h3>Structure</h3>

<p>You have nicely structured the code by using separate extensions for the various protocol conformances.</p>

<p>In that spirit, <code>var first</code> should be defined with the <code>Collection</code> properties, and <code>var last</code> should be defined with the <code>BidirectionalCollection</code> properties.</p>

<h3>To guard or not to guard</h3>

<p>(This paragraph is surely opinion-based.) The <code>guard</code> statement was introduced to get rid of the “if-let pyramid of doom,” it allows to unwrap a variable without introducing another scope/indentation level.</p>

<p>The <code>guard</code> statement can be useful with other boolean conditions as well, to emphasize that some condition has to be satisfied, or otherwise the computation can not be continued.</p>

<p>But I am not a fan of using <code>guard</code> for every “early return” situation, in particular not if it makes the statement look like a double negation. As an example,</p>

<pre><code>guard !(range.lowerBound == startIndex &amp;&amp; range.upperBound == endIndex) else {
    headNode = nodeChain.head
    tailNode = nodeChain.tail
    return
}
</code></pre>

<p>is in my opinion much clearer written as</p>

<pre><code>if range.lowerBound == startIndex &amp;&amp; range.upperBound == endIndex {
    headNode = nodeChain.head
    tailNode = nodeChain.tail
    return
}
</code></pre>

<h3>Performance</h3>

<p>One issue that I noticed: You do not implement the <code>isEmpty</code> property, so that the default implementation for collection is used. As a consequence, each call to <code>isEmpty</code> creates two instances of <code>LinkedListIndex</code> (for <code>startIndex</code> and for <code>endIndex</code>), compares them, and then discards them. A dedicated </p>

<pre><code>public var isEmpty: Bool { return count == 0 }
</code></pre>

<p>property would be more efficient.</p>

<h3>A bug</h3>

<p>There seems to be a problem with the copy-on-write semantics:</p>

<pre><code>var l1 = LinkedList([1, 2, 3])
let l2 = l1
l1.removeFirst()
l1.removeLast()
</code></pre>

<p>makes the program abort with a “Fatal error: Unexpectedly found nil while unwrapping an Optional value.”</p>
    </div>