<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can write this better.  The best way to explain it is to see the code example in <a href="https://docs.python.org/3.8/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">Python's itertools module</a>:</p>

<pre><code>def combinations(iterable, r):
    # combinations('ABCD', 2) --&gt; AB AC AD BC BD CD
    # combinations(range(4), 3) --&gt; 012 013 023 123
    pool = tuple(iterable)
    n = len(pool)
    if r &gt; n:
        return
    indices = list(range(r))
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)
</code></pre>

<p>This generates the combinations of length 'r' efficiently using counting.  You can create all combinations by either adding length-1 'nulls' to the pool or just iterating over the lengths.</p>

<p>Combination generation is a bit hard to grok, and really you should step through this example until you get it.  It's a variation on the idea of manually counting used throughout many algorithms.  </p>

<p>The base idea for combinations('ABCD', 2) is to start with 'AB' (first <code>yield</code>), increment the last letter 'AC' then 'AD' with the <code>for j</code> loop doing nothing, on the next loop i will be the index 0, so 'A' -&gt; 'B' and the second resets to one more than the first character and you yield 'BC'.</p>

<p>Trace the code.  Keep hacking!  Keep notes.</p>
    </div>