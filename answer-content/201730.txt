<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>temp</code> isn't a great name for your accumulator.  Call it something like <code>total</code>, which gives a much clearer indication of what role it plays.</p>

<p>First, let's separate the logic from the I/O, to make it easier to test:</p>

<pre><code>def sum_3s_and_5s(n):
    total = 0
    for i in range(n):
        if (i%3==0 or i%5==0):
            total+=i
    return total

if __name__ == "__main__":
    print(sum_3s_and_5s(10))
</code></pre>

<p>We can now focus on the implementation of <code>sum_3s_and_5s</code>.  We can write the same algorithm more succinctly:</p>

<pre><code>def sum_3s_and_5s(n):
    return sum([i * (i%3==0 or i%5==0) for i in range(n)])
</code></pre>

<p>This doesn't change the time complexity, of course - it still scales as O(<em>n</em>).  What we need to do is think about the mathematics.  What we're looking for is the sum of all the multiples of 3 in the range, added to all the multiples of 5, less the multiples of 15 (which are otherwise double-counted).  Let's write a function to count multiples of <em>k</em> in a given range:</p>

<pre><code>def sum_multiples(n, k):
    return sum([i * (i%k==0) for i in range(n)])

def sum_3s_and_5s(n):
    return sum_multiples(n,3) + sum_multiples(n,5) - sum_multiples(n, 15)
</code></pre>

<p>You might not think that's an improvement - and you'd be right, because we're now reading the whole range three times instead of once.  But we can work or <code>sum_multiples</code>, to make it O(<em>1</em>).  Remember the formula for triangular numbers: sum(i){0,n} = Â½n(n+1).  The sum of all the multiples of <em>k</em> is just <em>k</em> times the sum of integers from 0 to n/k.  That gives us:</p>

<pre><code>def sum_multiples(n, k):
    # subtract 1 from n, as range is exclusive
    n = (n-1) // k
    return k * n * (n + 1) // 2
</code></pre>

<p>Now it doesn't matter how big <em>n</em> gets, the calculation is constant time (or perhaps O(log <em>n</em>) if we get into big integers).</p>
    </div>