<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Remark on you DDD</h2>

<p>I've never thought this is possible:</p>

<pre><code>val email = Email("invalid") ?: throw IlllegalArgumentException
</code></pre>

<p>Kotlin was created with the intention of null-safety / explicit nullability, and your factory violates it. It allowes classes to be instanceated directly as NULL - this is really weird and for people admiring and working with Kotlin it's very confusing.</p>

<h2>Improve current solution</h2>

<p>I don't see an improvement for your current solution. I can only recommend to make a Factory class which would genereate all the boilterplate code for all of your generates classes, including converters. But I have a suggestion...</p>

<h2>Suggestion</h2>

<p>I would go away from extending a companion object and define 'Nullable' Builders, which inherit from generic one:</p>

<pre><code>abstract class NullableValue&lt;T, D&gt;(
    private val init: () -&gt; T,
    private val value: D,
    private val check: (D) -&gt; Boolean
) {
    fun isValid(): Boolean = check(value)

    fun getOrNull(): T? = if (isValid()) init() else null
}
</code></pre>

<p>Define class and the builder:</p>

<pre><code>class Email(val email: String)

class NullableEmail(val email: String) : NullableValue&lt;Email, String&gt;(
    init = { Email(email) },
    value = email,
    check = { "^.+@.+\\..+".toRegex().matches(it) }
)

class NonBlankString(val string: String)

class NullableNonBlankString(val string: String) : NullableValue&lt;NonBlankString, String&gt;(
    init = { NonBlankString(string) },
    value = string,
    check = String::isNotBlank
)
</code></pre>

<p>And you can use them:</p>

<pre><code>    NullableEmail("").getOrNull() // will be null
    NullableNonBlankString("abc").getOrNull() // will be NonBlankString.class

    Converter&lt;NonBlankString, String&gt; { value -&gt;
        value.toString()
    }
</code></pre>

<hr>

<p>If you want more reusability, we can use <a href="https://sourcemaking.com/design_patterns/strategy" rel="nofollow noreferrer">strategy pattern</a>:</p>

<pre><code>interface Nullable&lt;T&gt; {

    fun isValid(): Boolean

    fun getOrNull() : T?
}

abstract class NullableValue&lt;T, D&gt; (
    private val init: () -&gt; T,
    private val value: D,
    private val check: (D) -&gt; Boolean
) : Nullable&lt;T&gt;  {
    override fun isValid(): Boolean = check(value)

    override fun getOrNull(): T? = if (isValid()) init() else null
}

class NullableEmail(val email: String) : Nullable&lt;Email&gt; by NullableByRegex&lt;Email&gt; (
    init = { Email(email) },
    value = email
)
</code></pre>
    </div>