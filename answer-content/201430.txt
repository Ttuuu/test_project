<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things I've noticed.</p>

<ol>
<li>You use <code>List</code> to represent the input data. Lists are inefficient (linear) for things like <code>input.size</code> (which you do twice on the same input) and <code>input.slice()</code>.</li>
<li>Both <code>countInversions()</code> and <code>splitInversions()</code> are recursive but they're not tail recursive, so that's going to eat up stack space.</li>
<li><code>splitInversions()</code> sends its passed parameters to <code>mergeSort()</code> which means that every time it calls itself (recurses) it re-sorts already sorted data.</li>
<li>Your calculations return an <code>Int</code>, which is going to be too small for a large data set such as the <code>inversions.txt</code> you've linked to.</li>
</ol>

<p>But generally I find the whole thing rather too complicated.</p>

<p>Here's an alternative algorithm that is smaller, faster, and more memory efficient.</p>

<pre><code>def countInversions(input :Vector[Int]) :Long = {
  val idxBuf = input.indices.sortBy(input).toBuffer
  input.indices.foldLeft(0L){ case (sum,x) =&gt;
    val idx = idxBuf.indexOf(x)
    idxBuf.remove(idx)  //side effect
    sum + idx
  }
}
</code></pre>
    </div>