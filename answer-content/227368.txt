<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From my understanding of the subject your implementation seem correct but there are numerous things you could fix or improve there.</p>

<h2>Specific remarks</h2>

<ol>
<li>Use actually predicted values for printing i.e.</li>
</ol>

<pre><code>    # Predicted by Genetic algorithm
    a, b = sub_population[0]
</code></pre>

<ol start="2">
<li><p>Your initialisation of <code>X</code> is dangerous and prevents the algorithm to converge on some values since <code>X[0] = 2*X[1]</code>, while they are supposed to be independant variables. Use random values instead.</p></li>
<li><p>Don't use <code>X</code> and <code>y</code> from global context in <code>select_best_parents</code> you could have ugly surprises if these are used elsewhere in the program. Add them to function parameters.</p></li>
<li><p>Your mutation function uses magic numbers, you could make <code>[-4, 4]</code> interval a parameter of your GA to make it more generic.</p></li>
<li><p>You could make a function of the main's <code>for</code> to segregate well what is part of algorithm and what is parameters. </p></li>
<li><p>You could extract your sorting key (MSE) as a separate function so it's easier to replace.</p></li>
</ol>

<h2>General remarks</h2>

<ol>
<li><p>If you want to validate your approach you need more than a single test value. So for example after you make a and b (3 and 2) parameters, you can use a loop or a variety of examples to prove it converges toward these values.</p></li>
<li><p>I find odd and damaging scientific programmers often pass on object oriented design. Using classes could be handy to pass the variables from core function to core function using object context rather than extending parameters of every function as needed, so it would to propose a catalog of different implementations of GA mutation, for instance. Consider migrating to an object oriented design if these are later goals</p></li>
<li><p>It could be beneficial to separate the usage example from the core GA functions in two distinct modules and files. They are independent parts that can be improved and extended separatedly.</p></li>
<li><p>I believe you can support more than two dimensions using a bit of tidying and genericizing in generate_data, crossover, and select_best_parents.</p></li>
<li><p>Improve style and formatting a bit, trying to follow PEP8. Keyword don't need spaces, two spaces between function definitions, use docstrings rather than comments etc. </p></li>
</ol>
    </div>