<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Conventions</h2>
<ul>
<li>Use meaningful and camel-cased names <code>var GI1</code> <code>GIUS</code> ..</li>
<li>Use <code>var</code> when the instance type is the same as the declaring type <code>CimSession session =</code></li>
</ul>
<h2>Design</h2>
<p>I suggest to create a class to store the info you require from the cim interface.</p>
<pre><code> class CimInfo
 {
     public CimInfo(CimInstance cim)
     {
         UserName = GetProperty(cim, "UserName");
         BootUpState = GetProperty(cim, "BootUpState");
         Manufacturer = GetProperty(cim, "Manufacturer");
         Model = GetProperty(cim, "Model");
     }

     private static string GetProperty(CimInstance cim, string name)
     {
         if (cim == null) throw new ArgumentNullException(nameof(cim));
         return cim.CimInstanceProperties[name].Value.ToString();
     }

     public string UserName { get; }
     public string BootUpState { get; }
     public string Manufacturer { get; }
     public string Model { get; }
 }
</code></pre>
<p>The async operations can be merged and rewritten using the new class. Since you only have need of one cim instance, we could also avoid looping all queried results.</p>
<p>Notes:</p>
<ul>
<li>Perhaps there is an alternative available for <code>QueryInstances</code> that only returns the first result.</li>
<li>If <code>CimSession</code> implements <code>IDisposable</code>, use a <code>using</code> block for it.</li>
</ul>
<p>snippet</p>
<pre><code>var cimInfo = await Task.Run(() =&gt;
  {
      var session = CimSession.Create(computerHostName);
      var queryResults = session.QueryInstances(nameSpace, WQL, 
          "SELECT Username, BootUpState, Manufacturer, Model FROM Win32_ComputerSystem");
      return new CimInfo(queryResults.FirstOrDefault());
  });
</code></pre>
<p>And the output could be</p>
<pre><code>TextBoxUserName.Text = cimInfo.UserName;
TextBoxBootUpState.Text = cimInfo.BootUpState;
TextBoxManufacturer.Text = cimInfo.Manufacturer;
TextBoxModel.Text = cimInfo.Model;
</code></pre>
    </div>