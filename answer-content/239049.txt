<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most elegant and declarative approach in my opinion is using <code>reduce</code>.</p>

<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; list_ = [" ", " ", "X", " ", " ", "Z", " ", "Y", " "]
&gt;&gt;&gt; reduce(lambda xs, x: xs + [x] if x.strip() != "" else [x] + xs, list_, [])
[' ', ' ', ' ', ' ', ' ', ' ', 'X', 'Z', 'Y']
</code></pre>

<p>How it works: <code>reduce</code> takes 3 arguments: a function, a list, and an initial value. It then calls the function consistently for each element in the list, and each time replaces the saved initial value with return of this function, which is called with the current version of (now not initial, but <em>accumulated</em>) value as a first argument, and current element of a list as a second argument, and then returns accumulated value. </p>

<p>With this we can using a single line loop through the list and conditionally append or prepend values to the new list, returning it at the end.</p>

<p>More: <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">https://docs.python.org/3/library/functools.html#functools.reduce</a></p>
    </div>