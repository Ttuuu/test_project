<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Isolate platform-specific code</h2>

<p>If you must have <code>stdafx.h</code>, (and it's not necessary here) consider wrapping it so that the code is portable:</p>

<pre><code>#ifdef WINDOWS
#include "stdafx.h"
#endif
</code></pre>

<h2>Use include guards in all <code>.h</code> files</h2>

<p>It's better to include guards than <code>#pragma once</code> because, by definition, a <code>#pragma</code> is compiler-specific and non-portable, while the include guards are explicitly part of the C++ standard.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rs-guards" rel="nofollow noreferrer">SF.8</a></p>

<h2>Use <code>nullptr</code> rather than <code>NULL</code></h2>

<p>Modern C++ uses <code>nullptr</code> rather than <code>NULL</code>.  See <a href="http://stackoverflow.com/questions/1282295/what-exactly-is-nullptr/1283623#1283623">this answer</a> for why and how it's useful.  </p>

<h2>Use <code>const</code> where possible</h2>

<p>The <code>getHeight</code>, <code>findValue</code>, and a few other functions do not (and should not) alter the tree and should therefore be declared <code>const</code>.  A number of the parameters should also be <code>const</code>.</p>

<h2>Provide a destructor</h2>

<p>Right now, there is no explicit destructor and so this class leaks memory.  That's a bug that should be fixed by providing a destructor that deletes the allocated memory.</p>

<h2>Fix the bugs</h2>

<p>The <code>deleteVertex</code> does not work properly.  In particular, if the deleted node has two children, the routine finds node <code>B</code> and the parent of <code>B</code>, <code>C</code>.  The problem is that if <code>B</code> already has any children, these pointers are overwritten.  Even with that fixed, however, there are other problems which I'll leave it to you to find.  I'd recommend tracing through the code, making a diagram as you go. </p>
    </div>