<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>find_segment</code> loads the json file every time it is called. It would be much faster to load the data once and return a dict mapping province to segments.  Also, <code>key</code> doesn't appear to be used, so remove that for-loop</p>

<pre><code>def load_research(filename='research.geojson'):
    """loads json data from filename and return a dict of segments
       keyed by province."""

    with open(filename, encoding='utf-8-sig') as f:
        dct_research = json.load(f)

    data = {}

    for feature in dct_research['features']:
        province = feature.get("properties", {}).get("name")
        segments = feature.get("properties", {}).get("segments")
        data[province] = segments

    return data
</code></pre>

<p>In <code>main()</code> it looks like <code>province</code>, <code>constituency</code>, and <code>segments</code> only depend on <code>feature</code> and not on <code>key</code>.  So calculate them before the <code>for key ...</code> loop.  That should speed things up a lot.</p>

<pre><code>def main():
    # load data into a dict keyed by province
    research = load_research()

    with open('maroc-swing.json') as f:
        dct_constituencies = json.load(f)

    d = []
    for feature in dct_constituencies['features']:

        province = feature.get("properties", {}).get("name_1", "")
        constituency = feature.get("properties", {}).get("name_4", "")

        # this is now a dict lookup rather than loading a json file
        segments = research[province]

        for key in feature.get("properties", {}).get("results", {}):
            d.append({"Party Affiliation": key,
                      "Province": province,
                      "Constituency Name": constituency,
                      "segments": segments})

    column_names = ["Province", "Constituency Name", "Party Affiliation", "segments"]
    df = pd.DataFrame(d, columns=column_names)

    df.to_csv("constituencies_with_segments.csv")
</code></pre>

<p>NB. I haven't tested the code, so there may be some typos etc.</p>
    </div>