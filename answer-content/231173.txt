<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find it a bit conflicting that the <code>register()</code> method has been put in the <code>Person</code> interface. Should the Person be responsible for registering itself at all? It also creates a bit of a confusion in the <code>RegisteredPerson</code> class, whose name implies that it is registered when it is in fact unregistered until it's register() method is called successfully.</p>

<p>In true OO fashion, if RegisteredPerson is a public class, it should not be possible to be instantiate it unless it is actually registered in the registry. In my opinion, if you want to differentiate <code>UnregisteredPerson</code> and RegisteredPerson in the class hierarchy, they should have their own interfaces and the implementation should be made in a way that the instantiation (and existence) of concrete RegisteredPerson objects is completely hidden inside the registry.</p>

<p>Something along these lines:</p>

<pre><code>interface PersonRegistry {
    RegisteredPerson findByName(String name);
    RegisteredPerson register(UnregisteredPerson person);
}
</code></pre>
    </div>