<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Apart from other reviews I show you an alternative how you can make this really short with <code>LINQ</code> and <code>Regex</code>:</p>

<p>OK, the first solution wasn't perfect. This one will however do it correctly:</p>

<pre><code>var alphabet = Enumerable.Range(97, 26).Select (i =&gt; (char)i + "+");
var pattern = "(" + string.Join("|", alphabet) + ")";

var compressed2 =
    Regex.Matches(str, pattern)
    .Cast&lt;Match&gt;().Select (m =&gt; new 
    { 
        Char = m.Groups[1].Value[0], 
        Count = m.Groups[1].Value.Length 
    })
    .Aggregate (string.Empty, (result, nextGroup)  =&gt; 
        result.ToString() 
        + nextGroup.Char 
        + (nextGroup.Count &gt; 1 ? nextGroup.Count.ToString() : string.Empty));
</code></pre>

<p>For: </p>

<pre><code>var str = "aaabbccdddeezbbb";
</code></pre>

<p>the result is:</p>

<blockquote>
  <p>a3b2c2d3e2zb3</p>
</blockquote>

<ul>
<li>First get letter groups with regex and their lengths</li>
<li>Then aggregate them to the final string</li>
</ul>
    </div>