<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>More than half of your code is being used to convert from one data format to another (from two lat and long list to tuples and then from a list of lists to an array).</p>

<p>The easiest to understand version would be to use <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.loadtxt.html" rel="nofollow noreferrer"><code>numpy.loadtxt</code></a>:</p>

<pre><code>def read_two_column_file(file_name):
    return np.loadtxt(file_name, delimiter=", ")
</code></pre>

<p>This is then a 2D <code>numpy.array</code>. However, <a href="http://akuederle.com/stop-using-numpy-loadtxt" rel="nofollow noreferrer">this is actually a lot slower than it could be</a>, so you could also use <code>pandas.read_csv</code> instead:</p>

<pre><code>import pandas as pd

def read_two_column_file(file_name):
    return pd.read_csv(file_name, header=None).values
</code></pre>

<p>Which one is faster depends on the size of your file.</p>

<p>Now we need to modify the <code>display_points</code> function to work with this new data format:</p>

<pre><code>def display_points(points):
    plt.figure()
    plt.ylabel('longitude')
    plt.xlabel('latitude')
    plt.title('longitude vs latitude')
    plt.scatter(points[:, 0], points[:, 1])
    plt.show()
</code></pre>

<p>Now for the actual calculation. First, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer"><code>itertools.combinations_with_replacement</code></a> to get all pairs of points. Then you can insert them directly into the correct row of an array:</p>

<pre><code>from itertools import combinations_with_replacement

def main():

    points = read_two_column_file(file_name)

    adj_matrix = np.empty(len(points)**2)
    for i, (point1, point2) in enumerate(combinations_with_replacement(points, 2)):
        adj_matrix[i] = haversine(point1, point2)
    adj_matrix.reshape((len(points), len(points))

    print(adj_matrix)
    display_points(points)
</code></pre>

<p>This can probably be further improved by using <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.meshgrid.html" rel="nofollow noreferrer"><code>numpy.meshgrid</code></a> to get the combinations of points and using <a href="https://stackoverflow.com/a/29546836/4042267">a vectorized version of the haversine function</a>.</p>
    </div>