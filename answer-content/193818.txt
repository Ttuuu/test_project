<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a few comments to say about the <code>main()</code> method. It is doing the following:</p>

<ol>
<li>define the test data</li>
<li>define all possible validators and initialize all of them upfront.</li>
<li>validate the input by applying validators</li>
<li>it knows when a validator should be applied </li>
<li>somewhere inside the validation code block, the method decides that it is now time to do the calculation</li>
<li>the method is also responsible for producing all the output (from validation as well as from calculation) </li>
</ol>

<p>so we see that the method is responsible for quite a lot of processing.  This has several issues, the most obvious one is breach of the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single responsibility principle</a>.  There are other issues here that need addressing:</p>

<ol>
<li><p>this calculator is not very useful for the user since it cannot take any user input. test data, as well as "real" user input, should come as run time input.  this may be from the command line, from an API call or from some kind of UI. havong the input specified at run time will allow you to modify the test data without need for recompile.</p></li>
<li><p>if <code>ZeroValueValidator</code> is applicable only for division, then perhaps the operator needs to determine which <code>Validator</code>s to apply? another approach can be that each <code>Validator</code> can say whether it is applicable for a given calculation? so I believe the order of validation procesing should be: first parse the String expression into an <code>Expression</code> instance that holds operand/s and operator/s (that can perhaps be defined as enum?). then apply further "mathematical" validation.</p></li>
<li><p>there should be a clear separation between the validation and calculation steps. This will make things clearer and also allow for modifications to one step without affecting the other.</p></li>
<li><p>you should consider having the validators throw a custom exception.  this is a perfect fit for that mechanism.  Java even have some predefined exceptions that you cen reuse like <code>IllegalArgumentException</code> and <code>ArithmeticException</code>. the benefit of throwing java predefined exceptions is that they already have documentation and users of the calculator will be able to know what went wrong.</p></li>
<li><p>other areas for separation of concerns can be output production, validator instantiation, etc. </p></li>
</ol>
    </div>