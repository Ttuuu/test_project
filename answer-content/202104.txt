<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a lot of repeat code that could be refactored out but the OP's concern is performance.  The reason that the code is so slow is that it is unnecessarily looping over the cells of the range to be highlighted.  Formats can and should be applied in to the entire range at once.  </p>

<pre><code>  HighlightIt Application.Intersect(Me.Range("H:I"), Me.UsedRange), False
</code></pre>

<p>Unlike working with values, it is more efficient to apply formatting to entire rows and columns then it is to the cells <code>UsedRange</code>.</p>

<pre><code>  HighlightIt Columns("H:I"), False
</code></pre>

<p>Excel data and metadata is stored as xml inside that Excel document which is actually a zip file.  Applying formatting to entire rows and columns creates css rules that will be applied to all the cells of the rows and columns.  Formatting blocks of cells causes Excel to create a node for each cell.</p>

<p>To demonstrate this I created a workbook with 2 worksheets that only had a single value in A1.   Sheet1 had columns A:J formatted, whereas Sheet2 had <code>Range("A1:J100")</code> formatted.  I then change the file extension to <code>.zip</code> and extracted all the files.  </p>

<p><a href="https://i.stack.imgur.com/AburT.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/AburT.jpg" alt="enter image description here"></a>  </p>

<p>Notice that although sheet2 is 12 times larger than sheet1.</p>

<h2>Sheet1 XML</h2>

<p><a href="https://i.stack.imgur.com/HQm9o.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/HQm9o.jpg" alt="enter image description here"></a></p>

<h2>Sheet2 XML</h2>

<p><a href="https://i.stack.imgur.com/bgsfE.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/bgsfE.gif" alt="enter image description here"></a></p>

<h2>Refactored Code</h2>

<pre><code>Private Sub Worksheet_SelectionChange(ByVal target As Range)
    Application.ScreenUpdating = False

    Dim r As Range
    'Set target for all columns that have this functionality
    Set r = Intersect(Columns("H:L"), target)
    If Not r Is Nothing Then HighlightIt Columns("H:L"), False

    'Column N maps to columns H &amp; I
    Set r = Application.Intersect(target, Columns("N"))
    If Not r Is Nothing Then
        HighlightIt r.Offset(ColumnOffset:=-6)
        HighlightIt r.Offset(ColumnOffset:=-5)
    End If

    'Column O:Q maps to columns J:L
    Set r = Application.Intersect(target, Columns("O:Q"))
    If Not r Is Nothing Then HighlightIt r.Offset(ColumnOffset:=-5)

    Application.ScreenUpdating = True
End Sub

'utility sub for highlighting/unhighlighting
Sub HighlightIt(rng As Range, Optional hilite As Boolean = True)
    If rng Is Nothing Then Exit Sub
    With rng
        .Font.Color = IIf(hilite, vbWhite, vbBlack)
        .Font.Bold = hilite
        .Font.Size = IIf(hilite, 20, 14)
    End With
End Sub
</code></pre>

<h2>Create Mock Data</h2>

<pre><code>Sub Prep()
    Dim cell As Range
    Application.ScreenUpdating = False
    For Each cell In Range("A1").Resize(20000, 82)
        cell.Value = cell.Address(0, 0)
    Next
    Columns.AutoFit
    Application.ScreenUpdating = True
End Sub
</code></pre>

<h2>Demo</h2>

<p><a href="https://i.stack.imgur.com/Yek1S.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Yek1S.gif" alt="enter image description here"></a></p>

<p>Real time example using 20000 rows X 82 columns on a slow computer.</p>
    </div>