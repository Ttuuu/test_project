<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an interesting challenge! Here are some ways you could improve your code.</p>

<h1>Globals</h1>

<p>None of your variables should be global. It makes it significantly harder to figure out where a variable is changing. Given that you reset <code>sum</code> and <code>perf</code> to 0 every time you enter <code>func()</code>, they should be locally declared within the function. <code>i</code> is only used within <code>func()</code> as well. You should prefer declaring variables as close to their first use as possible to make it easier to find the declaration. For loops, it's often best to declare them in the loop like this:</p>

<pre><code>for (int i = 0 ; i &lt; k; i++) {
    ...
}
</code></pre>

<p>This also avoids problems that can occur with re-using loop index variables. Notice that you assign to <code>i</code> at the start of the last loop in <code>func()</code>, but then it is never incremented or checked in that loop. It's entirely superfluous, and confusing to read.</p>

<p><code>func()</code> should return a count rather than incrementing a global variable. For example you could make a local variable and use it like this:</p>

<pre><code>int func(int index, int val) {
    int numPerfectPartitions = 0;
    if (index == k) {
        ...
        if (sum == n) {
            ...
            if (perf &gt;= 2) {
                numPerfectPartitions++;
            }
        }
    }
    else {
        a[index]=val;
        for (...) {
            numPerfectPartitions += func(index + 1, a [ index ] + 1);
        }
    }
    return numPerfectPartitions;
}
</code></pre>

<h1>Naming</h1>

<p>I feel like your names are too vague. <code>perfect()</code> is OK. I would name it <code>isPerfect()</code> just to be more clear, and since it returns what is essentially a Boolean value.</p>

<p><code>n</code> and <code>k</code> match the text of the challenge, but are bad variable names. I recommend changing <code>n</code> to <code>desiredSum</code> since that's the target number you're trying to reach. (Or even <code>target</code>.) I would name <code>k</code> <code>numPartitions</code> since that's the number of partitions.</p>

<p><code>a</code> is probably best called something like <a href="https://en.wikipedia.org/wiki/Addition#Notation_and_terminology" rel="nofollow noreferrer"><code>addends</code> or <code>summands</code></a>. This is a case where there's no real-world analog, so the names get a little technical. But <code>a</code> is just too vague.</p>

<p><code>count</code> is an OK name, but what is it a count of? <code>numFound</code> would be better.</p>

<p><code>func()</code> tells you literally nothing other than that the function is a function, which anyone who can read C already knows. Since it finds partitions, why not call it <code>findPartitions()</code>?</p>

<h1>Performance</h1>

<p>I'll admit that I don't know off the top of my head of a significantly better way to do this. I suspect that if you first found the perfect squares between 1 and <code>n</code>, then you could find the partitions more quickly. For example, generate all perfect squares between 1 and <code>n</code>, and then find all combinations of 2 through <code>k</code> of the perfect squares that sum to less than or equal to <code>n</code>. Subtract that sum from <code>n</code> to find a new, smaller sum <code>m</code>, and then generate all combinations of the remaining (non-perfect-square) numbers that sum to <code>m</code>. Since you're summing to a smaller value, you should have fewer permutations to go through.</p>
    </div>