<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple of things I think you should consider, on top of what Sanchit has pointed out.</p>

<p>The two things I can see are:</p>

<ul>
<li>why are you 'reinventing the wheel'</li>
<li>if you <em>have</em> to do your own binary search, there are some things you should do right</li>
</ul>

<h1>Not-Reinventing-the-wheel</h1>

<p>The 'right' way to do this is (and throw away your binary search code):</p>

<pre><code>public void insert(long value) throws Exception { // put element into array
    if (nElems == MAX)
        throw new IllegalStateException("Can not add more elements.");
    int j = Arrays.binarySearch(a, 0, nElems, value);
    if (j &lt; 0) {
        // this is a new value to insert (not a duplicate).
        j = - j - 1;
    }
    System.arraycopy(a, j, a, j+1, nElems - j);
    a[j] = value;
    nElems++;
}
</code></pre>

<h1>Re-inventing the wheel</h1>

<p>If you <strong>have</strong> to reinvent this wheel (it's homework, or something), then consider this:</p>

<ul>
<li>curIn is redundant, and should be the return value of your binarySearch function.</li>
<li>the 'standard' in Java is to return the position of the value in the array, or, if the value does not exist in the array, return <code>- ip - 1</code> where 'ip' is the 'insertion point' or where the new value <em>should</em> be. i.e. in the array [1, 2, 4, 5] a binary search for '4' should return '2' (4 is at position 2). A search for '3' should return '-3' because <code>- (-3) - 1</code> is <code>+3 - 1</code> or <code>2</code> which is the place the 3 should go if it is inserted. This allows a single binary search to produce the answer to two questions: <code>is it in the array, and if it is, where is it?</code> and also <code>if it isn't, where should it go?</code></li>
<li>technically your code has a slight bug for large values of MAX.... your binary search should do <code>upperbound + lowerbound &gt;&gt;&gt; 1</code> because that will give the right values if/when <code>upperbound + lowerbound</code> overflows.</li>
</ul>
    </div>