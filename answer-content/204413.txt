<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For flat objects (i.e. whose values are only primitive types), there's <code>Object.assign()</code>, which shallow-copies all <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" rel="nofollow noreferrer" title="enumerable">enumerable</a> keys and values from one object to the other:</p>

<pre><code>Object.assign(data, body);
</code></pre>

<p>However, in your case, shallow-copying means the <code>dateObj</code> member of the <code>body</code> would get copied by reference, instead of creating a new object and recursively copying its keys and values.</p>

<p>You can also try using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals" rel="nofollow noreferrer" title="spread operator">spread operator</a> <code>...</code>, which was introduced recently:</p>

<pre><code>let data = new Data();

Object.assign(data, {
    // Shallow-copy all keys and values from body:
    ...body,

    // Overwrite certain keys:
    date: new Date(body.date),
    dateObj: { ...body.dateObj },
});
</code></pre>

<p>Whether or not this code is readable or intuitive is up to you to decide.</p>

<p>Also, as a minor note, <code>Object.assign</code> returns the first object you pass to it, so instead of this:</p>

<pre><code>let data = new Data();
Object.assign(data, { /* ...properties */ });
</code></pre>

<p>You can write this:</p>

<pre><code>let data = Object.assign(new Data(), { /* ...properties */ });
</code></pre>
    </div>