<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It should be noted, that dictionary file is completely unusable because it contains swarms of gibberish like <code>b</code>, <code>z</code>, <code>th</code>, <code>tryt</code> <code>oread</code> <code>asse</code> <code>parate</code>, and misses a lot e.g. <code>words</code>.</p>

<p>Anyway, my idea is to use a lookup table with both start/end letters so we can tell sooner if a word is possible at any given input text range.</p>

<blockquote>
<pre><code>word length:
    first + last letter:
        word
        word
        ..........
    first + last letter:
        word
        word
        ..........
    ..........
word length:
    first + last letter:
        word
        word
        ..........
    first + last letter:
        word
        word
        ..........
    ..........
..........
</code></pre>
</blockquote>

<p>Compared to OP's it takes twice as long to build the lookup table for 2.5MB text: ~150 ms:</p>

<pre><code>function downloadText(url) {
    return new Promise(resolve =&gt; {
        var req = new XMLHttpRequest();
        req.onload = () =&gt; resolve(req.responseText);
        req.open('get', url);
        req.send();
    });
}

function buildLookupTable(text) {
    text = text.toLowerCase();
    var LUT = {minLen: 1, maxLen: 0};
    var rxWord = /\w+/gm;
    for (var match; match = rxWord.exec(text); ) {
        var word = match[0];
        var wordLen = word.length;
        if (wordLen &gt; LUT.maxLen)
            LUT.maxLen = wordLen;

        var fringeHub = LUT[wordLen];
        if (!fringeHub)
            fringeHub = LUT[wordLen] = {};

        var fringe = word[0] + word.slice(-1);
        var words = fringeHub[fringe];
        if (!words)
            words = fringeHub[fringe] = new Set();
        words.add(word);
    }

    // Fix the dictionary a bit: remove all 1-letter nonwords (except I and A)
    LUT[1] = LUT[1] ? {aa: LUT[1].aa, ii: LUT[1].ii} : undefined;
    return LUT;
}
</code></pre>

<p>But parsing is much faster: all possible splittings are calculated in 300ms when running the test <strong>10k times</strong> (the first answer was ready in under 100ms!), compared to OP's 600ms.</p>

<pre><code>function parsePhrase(text, LUT, start) {
    start = start || 0;
    var phrases = [];
    var maxNext = Math.min(text.length, start + LUT.maxLen - 1);
    var firstChar = text[start];
    var wordLen = LUT.minLen;
    for (var next = start + wordLen; next &lt;= maxNext; next++, wordLen++) {
        var fringeHub = LUT[wordLen];
        if (!fringeHub)
             continue;

        var words = fringeHub[firstChar + text[next - 1]];
        if (!words)
             continue;

        var word = text.substring(start, next);
        if (!words.has(word))
             continue;

        if (next == text.length) {
            phrases.push([word]);
            break;
        }

        parsePhrase(text, LUT, next).forEach(phrase =&gt;
            phrases.push([word].concat(phrase))
        );
    }
    return phrases;
}
</code></pre>

<p>It's recursive and doesn't lowercase the text. That might be added in a wrapper if needed.<br>
In case only a check is needed without listing the words, the end of the function is simplified:</p>

<pre><code>        if (next == text.length || parsePhrase(text, LUT, next))
            return true;
    }
    return false;
}
</code></pre>

<p>Usage:</p>

<pre><code>downloadText('https://raw.githubusercontent.com/Icepickle/wordlist/master/words2.txt')
    .then(buildLookupTable)
    .then(lut =&gt; {
        // the dictionary doesn't have 'words' so the next will be empty:
        console.log(parsePhrase('trytoreadmeasseparatewords', lut).map(w =&gt; w.join(' ')));
        // 'word' will work (plus 60+ variants with gibberish thanks to the "dictionary")
        console.log(parsePhrase('trytoreadmeasseparateword', lut).map(w =&gt; w.join(' ')));
    });
</code></pre>
    </div>