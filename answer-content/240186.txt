<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems pretty reasonable. I mean, I definitely wouldn't put this in production code because it relies on parsing a class name out of <code>__PRETTY_FUNCTION__</code>, and that's not necessarily guaranteed to keep working in future versions of GCC let alone Clang (and <code>__PRETTY_FUNCTION__</code> isn't even supported at all on MSVC; they have <code>__FUNC_SIG</code> instead).</p>

<p>In fact, I just tested on Godbolt, and your <code>to_string&lt;T&gt;()</code> function doesn't work at all on Clang. Furthermore, even on GCC, it has trouble with corner cases like <code>A&lt;';'&gt;</code> â€” <a href="https://godbolt.org/z/UNVRQL" rel="nofollow noreferrer">https://godbolt.org/z/UNVRQL</a></p>

<hr>

<p>Nitpicks on your test code: The rule of thumb I follow is that every polymorphic method should have <em>exactly one of</em> <code>virtual</code>, <code>override</code>, or <code>final</code> (and really nothing should ever have <code>final</code>). So your repetition of <code>virtual</code> is just clutter, to me.</p>

<p>Ditto your use of <code>std::endl</code> (which flushes) versus plain old <code>"\n"</code> (which also flushes if you're outputting to a line-buffered stream such as <code>std::cout</code>). You could save some typing there.</p>

<hr>

<p>You misspell "labeled" in at least two places: <code>LabledClass</code> and <code>labled_classes</code>. These are implementation details, but it's still important to spell things right so that you can grep for them later.</p>

<p>You pass <code>const std::string_view&amp; id</code> by reference. This is unidiomatic. <code>string_view</code> is already a trivially copyable type, the size of two pointers. It doesn't make sense to force one of those onto the stack just so you can take its address and pass it by reference. Pass <code>string_view</code> by value.</p>

<hr>

<pre><code>    //checl all products inherit from interface_type
    std::apply([](auto&amp;&amp;... tuple_elem) {
        ((static_check&lt;decltype(tuple_elem.data)&gt;()), ...);
    }, labled_classes{} );
</code></pre>

<p>Typo: <code>checl</code> for <code>check</code>. And this is waaay more complicated than it needs to be. Just <code>static_assert</code> the thing you want to assert:</p>

<pre><code>static_assert(std::is_base_of_v&lt;interface_type, products&gt; &amp;&amp; ...);
</code></pre>

<p>In fact, let's use the idiomatic <code>CamelCase</code> for template arguments, and keep them short:</p>

<pre><code>template&lt;class Base, class... Ps&gt;
[...]
    static_assert(std::is_base_of_v&lt;Base, Ps&gt; &amp;&amp; ...);
</code></pre>

<hr>

<pre><code>std::apply([&amp;result, &amp;id](auto&amp;&amp;... tuple_elem) {
    (( tuple_elem.label == id ?
       result = std::make_unique&lt;decltype(tuple_elem.data)&gt;() :
       result ), ...);
}, labled_classes{} );
</code></pre>

<p>This complexity is a little more irreducible, but still, doing it all with a <code>tuple</code> and <code>std::apply</code> seems like way more template instantiations than you really ought to have here. What's wrong with a good old-fashioned chain of <code>if</code>s?</p>

<p>Also, nit: if you're capturing everything by reference, just write <code>[&amp;]</code>. It saves brain cells for the reader of your code.</p>

<pre><code>int dummy[] = {
    ([&amp;]() { if (id == to_string&lt;Ps&gt;()) result = std::make_unique&lt;Ps&gt;(); }(), 0) ...
};
</code></pre>

<p>We could even short-circuit as soon as we find the match. That's easy if we leave <code>result</code> null at first; then <code>result</code> will be null if and only if we should still be doing string comparisons.</p>

<pre><code>static std::unique_ptr&lt;Base&gt;
create(std::string_view id, std::unique_ptr&lt;Base&gt; default_type = nullptr)
{
    static_assert(std::is_base_of_v&lt;Base, Ps&gt; &amp;&amp; ...);

    std::unique_ptr&lt;Base&gt; result = nullptr;
    int dummy[] = {
        ([&amp;]() {
            if (result == nullptr &amp;&amp; id == to_string&lt;Ps&gt;()) {
                result = std::make_unique&lt;Ps&gt;();
            }
        }(), 0) ...
    };
    if (result == nullptr) {
        result = std::move(default_type);
    }
    return result;
}
</code></pre>

<p>At this point it's no longer clear why you need <code>struct factory</code> at all. So personally I'd get rid of it, and rename the now-free function <code>create</code> to <code>makeUniqueByName</code> or something.</p>
    </div>