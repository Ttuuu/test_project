<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not really clear what you mean by "functional".</p>

<p>The use of <code>reduce</code> is nifty, and correctly done, but it seem like <a href="https://en.wikipedia.org/wiki/Cargo_cult" rel="nofollow noreferrer">cargo cult</a> programming. The realization that a lot of loop-like actions can be represented in terms of <code>reduce</code> (fold, aggregate, etc) is <em>important</em> to functional programing, but it should no more be your first choice than a while-loop.</p>

<p>The fact that it's verbose isn't necessarily a problem. It <em>suggests</em> that you might be failing at a general goal:</p>

<blockquote>
  <p>Write what you mean.</p>
</blockquote>

<p>One of the things that makes functional programming good is that it helps us do that.<br>
Javascript has limited tools for directly declaring lists. What you <em>mean</em> to do is declare a Dictionary from the Set of <code>duration</code> values to the Count of the source array Filtered by the respective duration. Or even better you could use a grouping function.</p>

<p>You could bring in a library for the task, which may be a good idea, or you could compromise a little.</p>

<pre><code>function getCounts(items, key){
  let c = {};
  for(let item of items){
    c[key(item)] = items.filter(function(i){
        return key(i) === key(item);
      }).length;
  }
  return c;
};
counts = getCounts(durations, function(i){ return i['duration']; })'
</code></pre>

<p>You'll notice that that's quite inefficient. We could make it less wasteful, but it'd be less terse. </p>
    </div>