<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As there is already an answer which is a good starting point, I just wanted to point out some flaws in your code which might help to improve it.</p>

<h2>Use instances instead of class methods</h2>

<p>I assume you want to do something like this <code>Game.get_game_details</code> which makes sense. However, maybe you should wrap the code in the class method in an instance to leverage local state and make it more readable. Here is an example:</p>

<pre class="lang-rb prettyprint-override"><code>def self.get_game_details(game_selection)
  Game.new(RemoteGame.new(game_selection.to_i - 1).to_h)
end

class RemoteGame
  HEADERS = { "x-rapidapi-host" =&gt; ENV["HOST"], "x-rapidapi-key" =&gt; ENV["API_KEY"]
}.freeze

  def initialize(id)
    @id = id
  end

  def to_h
    JSON.parse(response.body)
  end

  private

    attr_reader :id

    def response
     RestClient.get("#{DETAIL_URL}#{game.slug}", headers)
    end

    def game
      @_game ||= Game.all[id].slug
    end
end
</code></pre>

<h2>Naming</h2>

<p>Disclaimer: These are just assumptions!</p>

<p>If the <code>get_game_details</code> is on <code>Game</code> you should consider remove <code>game_details</code> as it's already implicit in the class name. Better might be <code>Game.find</code>.</p>

<p>The method parameter <code>game_selection</code> looks more like an <code>id</code> or <code>slug</code>, you should consider renaming it to reflect the name.</p>

<h2>Data structure to store local Games</h2>

<p>You always need to subtract <code>-1</code> from the <code>id</code> so it seems like your local data structure has a different index than your remote data structure. Consider bringing them in sync. One assumption is that you use an array locally which is 0 indexed. 
Maybe you should use a key / value store instead (Hash).</p>

<pre class="lang-rb prettyprint-override"><code>class Game
  @local_repository = {}

  class &lt;&lt; self
    attr_accessor :local_repository

    def all
      local_repository
    end

    def find(id)
      local_repository[id]
    end
  end
end

game = Game.new(id: 1, name: "Name")
Game.all[game.id] = game
Game.find(1)
</code></pre>

<h1>Rating associations</h1>

<p>As your remote data structure already indicates, a <code>Game</code> has many <code>Ratings</code>. You should reflect that with a composition in your architecture. </p>

<pre class="lang-rb prettyprint-override"><code>class Rating
  attr_reader :name, :percentage

  def initialize(name, percentage)
    @name = name
    @percentage = percentage
  end
end

class Game
  def ratings
    @_ratings ||= []
  end
end

game = Game.new
game.ratings &lt;&lt; Rating.new("Recommended", 50)
</code></pre>

<p>Another indicator that a class is missing here is that you have the same pre / suffix for several methods:</p>

<ul>
<li>recommended_rating</li>
<li>exceptional_rating</li>
<li>meh_rating</li>
<li>skip_rating</li>
</ul>

<p>These methods all have the <code>_rating</code> suffix so we should extract a <code>Rating</code> class. This also gives us the flexibility to add another rating in the future very easily. Instead of adding another method to <code>Game</code>, we only need to create a new instance of <code>Rating</code> (<a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle</a>). </p>
    </div>