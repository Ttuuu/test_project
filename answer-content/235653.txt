<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Doi9t's answer, which gives good advice, I'll add that your function name, <code>extractBirthdayFromRodneCislo</code>, is wrong, as it merely prints the birthday instead extracting it.</p>

<p>The easy fix is to rename the function <code>extractBirthdayFromRodneCislo</code>, which may fit you case, but doesn't allow you to do anything more fancy than that.</p>

<p>The better way to do things would be to return the date, allowing you to do anything with it after calling the method.</p>

<p>I'm completely new to Java, so I might miss something here, but it seems that the <code>java.time.LocalDate</code> datatype is a good fit for the job.</p>

<p>So your function becomes something like this:</p>

<pre><code>public static LocalDate extractBirthdayFromRodneCislo(String rodneCislo) {

    // your logic here

    return LocalDate.of(year, month, day);
}
</code></pre>

<p>This approach has the added advantage that, should there be a mistake in the input string leading to an invalid date, it will throw an exception instead of silently accepting an invalid date – if you pass <code>622754/1234</code> to your function or Doi9t's, it will not care that <code>1962 -23 54</code> is not an acceptable output and print it just like any other date.</p>

<p>This illustrates to another problem: input validation. Your code doens't care if the input is indeed a Rodne Cislo. It will take any string as input. It may fail if <code>Integer.parseInt</code> encounter non-digit characters, but will accept strings that are too long, too short, has a properly placed <code>/</code> character or not (comments pointed out that Czech people don't always include the <code>/</code>, any other character in this place, etc., leading to a big risk of improperly parsing the string.</p>

<p>One possible tool for validating strings are regular expressions (regex). A lot of different patterns can be used to validate the input string, a simple one would be:</p>

<pre><code>^[0-9]{6}\/[0-9]{3}[0-9]?$
</code></pre>

<p>If you are unfamiliar with regex, here is a breakdown of this expression:</p>

<pre><code>^[0-9]{6}\/?[0-9]{3}[0-9]?$

^                                 # start with (no leading characater)
 [0-9]{6}                         # 6 digits
         \/?                      # may or may not include a "/" character
            [0-9]{3}              # 3 additional digits
                    [0-9]?        # 1 optional additional digit
                          $       # ends here (no trailing character)
</code></pre>

<p>Checking if the input string matches this pattern will call out a lot of invalid input strings, although it doesn't check if the month and day numbers are within valid ranges – it is definitely possible, but will get nasty quite quickly, and the <code>LocalDate.of()</code> method already takes care of it.</p>

<p>Another nice thing about regex is that you can extract specific ranges within the expression easily with capture groups. A little modifications on the previous expression gives (with explanation):</p>

<pre><code>^([0-9]{2})([0-9]{2})([0-9]{2})\/?[0-9]{3}[0-9]?$

^                                                     # starts with (no leading characater)
 ([0-9]{2})                                           # 2 digits, capture them in group 1
           ([0-9]{2})                                 # 2 digits, capture them in group 2
                     ([0-9]{2})                       # 2 digits, capture them in group 3
                               \/?                    # an optional "/" character
                                  [0-9]{3}            # 3 digits
                                          ([0-9]?)    # 1 optional digit, capture it in group 4
                                                  $   # ends here (no trailing character)
</code></pre>

<p>You can then used the captured strings to parse the numbers (groups 1 to 3), or identify if the birth year is before or after 1954 (group 4).</p>

<p>My final take on the problem is this code:</p>

<pre><code>import java.time.LocalDate;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

class Main {
    public static void main(String[] args) {
        System.out.println(extractBirthdayFromRodneCislo("535223/1234"))
        // &gt; 2053-02-23
        System.out.println(extractBirthdayFromRodneCislo("530223/123"))
        // &gt; 1953-02-23
        System.out.println(extractBirthdayFromRodneCislo("7503121234"))
        // &gt; 1975-03-12
        System.out.println(extractBirthdayFromRodneCislo("753312/1234"))
        // &gt; Throws an exception (invalid month)
        System.out.println(extractBirthdayFromRodneCislo("753312/12345"))
        // &gt; Throws an exception (doesn't match pattern)
    }

    public static LocalDate extractBirthdayFromRodneCislo(String rodneCislo){
        Pattern p = Pattern.compile("^([0-9]{2})([0-9]{2})([0-9]{2})\\/?[0-9]{3}[0-9]?$");

        Matcher m = p.matcher(rodneCislo);

        if (!m.matches()){
            // Input doesn't match the pattern
            // throw a relevant exception
            // although I can't seem to do that propely with Java
        }

        int year = Integer.parseInt(m.group(1));
        if (year &lt; 54 &amp;&amp; !m.group(4).isEmpty()){
          year += 2000;
        }else{
          year += 1900;
        }

        int month = Integer.parseInt(m.group(2));
        if (month &gt; 12){month -= 50;}

        int day = Integer.parseInt(m.group(3));

        return LocalDate.of(year, month, day); // will throw an exception if month or day ends up invalid
    }
}
</code></pre>
    </div>