<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The reality is that your data structure is forcing you to do nested loops.  There is no two ways around doing nested loops unless you change your data structure.</p>
<p>If you want to change you data structure, you can get this two an <code>O(n)</code> complexity operation from it's current state of <code>O(m x n)</code> (where <code>n</code> is number of stages and <code>m</code> is max number of tasks in any stage).</p>
<p>The simplest approach might be to <code>initialTasks</code> from an <code>Array</code> to a <code>Set</code>.  So something like...</p>
<pre><code>const stagesTasks = [
  {
    "dataTestID": "stage-0",
    "headerText": "Backlog",
    "initialTasks": new Set(["task 1", "task 2", "task 3"])
  },
  {
    "dataTestID": "stage-1",
    "headerText": "To Do",
    "initialTasks": new Set(["task 4", "task 5", "task 6"])
  },
  {
    "dataTestID": "stage-2",
    "headerText": "Ongoing",
    "initialTasks": new Set(["task 7", "task 8"])
  },
  {
    "dataTestID": "stage-3",
    "headerText": "Done",
    "initialTasks": new Set(["task 9"])
  }
];

const getStageByTask = (task) =&gt; {
 return stagesTasks.find( (stage) =&gt; stage.initialTasks.has(task) ) || null;
}
</code></pre>
<p>A few other thoughts:</p>
<ul>
<li>I am guessing that you are fairly new to development and/or javascript, so I would heavily make the recommendation to use <code>;</code> to terminate your lines.   In javascript, generally speaking, it is very forgiving about not using line terminators, but there are a few gotchas out there to be aware of in knowing how to write JS without <code>;</code>.  I would suggest you use them until you are thoroughly familiar with these cases.</li>
<li><code>getStageName</code> is probably not a very good name for the function, as you are not just returning a name, but an object.  Perhaps <code>getStageByTask</code> or similar?</li>
<li>Make sure you are using <code>const</code> (in this case), or <code>let</code>`var<code>when declaring your variables.  So</code>const getStageName = ...`.</li>
</ul>
    </div>