<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So you want a queue with a maximum size, and you don't want the same item to be enqueued again.</p>

<p>There are a few problems with the code:</p>

<ul>
<li><code>Load</code> is not thread-safe: it's not preventing other threads from enqueuing items after the queue-count check, so it's possible to add more items than allowed.</li>
<li><code>Enqueue</code> does not check the queue count at all, so it's even trivial to add more items than allowed!</li>
<li><code>Load</code> silently ignored items without letting the caller know. Even if it returned how many items were actually added, a caller still wouldn't know which ones. I don't think you need this method at all: a caller can easily loop over some items and call <code>Enqueue</code> directly.</li>
<li><code>Enqueue</code> doesn't tell whether it succeeded either. If a method can fail then it should communicate that to its callers (for example by naming it <code>TryEnqueue</code> instead, and by letting it return a boolean). It's also a good idea to document its behavior.</li>
<li><code>Dequeue</code> does not check the return value of <code>queue.TryDequeue</code>. That will cause a <code>NullReferenceException</code> on the <code>Console.WriteLine</code> line if the queue was empty. Again, documentation is a good idea: does it return <code>null</code> if the queue is empty, or should the caller expect an exception?</li>
<li>Using two concurrent collections internally seems like overkill. They won't help you enforce the maximum count restriction either, so if that's important to you then you'll need to use some kind of locking. And if you do that, you might as well use non-concurrent collections internally, since the locks ensure that they're only accessed by one thread at a time.</li>
</ul>
    </div>