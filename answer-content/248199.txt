<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The final edited code is posted at the bottom.</p>
<ol>
<li>You should just use a Python list to represent the board, as it looks like you are using the dictionary as a list anyway. Dictionaries are useful when you need to have a unique value map to another value. In this situation, you can just use the user's input to access a value in a list. Since lists start at index 0, we also need to update the winning combinations list as well:</li>
</ol>
<pre class="lang-py prettyprint-override"><code>board = [' '] * 9  # Creates a list with 9 items, where each item is ' '.
winning_combinations = ((0, 1, 2), (3, 4, 5), (6, 7, 8),  # Horizontals
                        (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Verticals
                        (0, 4, 8), (2, 4, 6))             # Diagonals
</code></pre>
<p>We can then update the <code>check_if_full</code> to be the following:</p>
<pre class="lang-py prettyprint-override"><code>def check_if_full():
    if ' ' not in board:
        print('GAME OVER')
        exit()
</code></pre>
<ol start="2">
<li>You're <code>print_board</code> function is fine, but it can written in a more concise way. Consider:</li>
</ol>
<pre class="lang-py prettyprint-override"><code>def print_board():
    # We store each row string here. Usually if you are joining many strings
    # together, it's more efficient to append them to a list then join them.
    # Here it doesn't matter, but keeps things short and concise.
    output = []
    # Because the length of each row is constant, we can just step by the length of each row in our loop.
    for row_start in range(0, len(board), 3):
        # Nicer way to creating the row string, without string concatenation
        output.append("{}|{}|{}\n".format(board[row_start], board[row_start + 1], board[row_start + 2]))
        output.append("-+-+-\n")
    # Joins the strings in the list.
    print("".join(output))
</code></pre>
<p>If you don't like this way, your original function is fine. Here it is, but with updated accesses to the <code>board</code>.</p>
<pre class="lang-py prettyprint-override"><code>def print_board():
    print(board[0] + '|' + board[1] + '|' + board[2])
    print('-+-+-')
    print(board[3] + '|' + board[4] + '|' + board[5])
    print('-+-+-')
    print(board[6] + '|' + board[7] + '|' + board[8])
    print('\n')
</code></pre>
<ol start="3">
<li>It is best practice to make sure your functions only do one thing when possible. This makes it easier to reason what a function does because it keeps your functions shorter and you know exactly what it should be doing. So your <code>who_starts</code> function should only decide who starts the game, it shouldn't choose who is assigned to what side and also ask for user input. You should separate it into two functions <code>who_starts</code> and <code>assign_sides</code>. I will rename <code>who_starts</code> to <code>starts_first</code>:</li>
</ol>
<pre class="lang-py prettyprint-override"><code>def assign_sides():
    sides = ['X', 'O']
    player_side = None
    comp_side = None

    if random.random() &gt; 0.5:
        # Computer wins
        print('The computer won.\n')
        comp_side = random.choice(sides)
        sides.remove(comp_side)
        player_side = sides[0]
        print(f"The computer has chosen to be {comp_side}.")
        print(f"You will be {player_side[0]}.")
    else:
        print('You won.\n')
        while True:
            player_side = input('Choose your side: ').upper()
            if player_side not in sides:
                print('You can only choose X or O\n')
            else:
                sides.remove(player_side)
                comp_side = sides[0]
                print(f'You have chosen to be {player_side}.')
                print(f'The computer will be {comp_side}.')
                break

    return player_side, comp_side


# Chooses who goes first. If True, the player goes first. Otherwise the computer
# goes first.
def starts_first():
    # You can actually just have this in the play function, but to be explicit
    #we'll make it its own function.
    return random.random() &gt; 0.5

# This is what play will look like after our changes
def play():
    player, computer = assign_sides()
    user_goes_first = starts_first()
    while True:
        if user_goes_first is True:
            # The player won, so will start first
            player_place(player), ai_place(computer)
        else:
            # The computer won, starting first
            ai_place(computer), player_place(player)
</code></pre>
<ol start="4">
<li>You can simplify your <code>check_win</code> function. Instead of checking if either the user or AI wins after a move has been made, you just have to check if the current player has one after their move has been made. So if the user makes their move, then we only check if they have won. This same logic applies to the AI. We then get the following adjustments:</li>
</ol>
<pre class="lang-py prettyprint-override"><code>def player_place(side):
    check_if_full()
    while True:
        try:
            local = int(input('Choose somewhere to place it (1-9): ')) - 1
            if local not in range(0, 9):
                print('Invalid number. ')
            else:
                if board[local] != ' ':
                    print('This place is already occupied. \n')
                else:
                    board[local] = side
                    print_board()
                    time.sleep(0.5)
                    if did_win(side):
                        print("You won!")
                        exit()
                    break
        except ValueError:
            print('Enter a number! ')


def ai_place(side):
    check_if_full()
    local = random.randint(0, len(board) - 1)
    while board[local] != ' ':
        local = random.randint(0, len(board) - 1)
    board[local] = side
    time.sleep(1)
    print_board()
    time.sleep(0.5)

    if did_win(side):
        print("Computer won! Game over")
        exit()


def did_win(side):
    # The following is called tuple unpacking. Because each item in
    # winning_combinations is a tuple, we can simply `unpack` it by
    # writing (square1, square2, square3), where each variable
    # represents the value in the tuple. We can then use these directly
    # without having to go tuple[index]. This makes for digestible code.
    for (square1, square2, square3) in winning_combinations:
        row = [board[square1], board[square2], board[square3]]
        # all checks whether all items in an iterable are the same. The argument
        # given is a list comprehension (which just returns a list). Thus we are
        # checking if every item in the row is equal to the current player's side.
        if all(item == side for item in row):
            return True
    return False
</code></pre>
<p>If anything is unclear, feel free to comment.</p>
<p>Final Code:</p>
<pre class="lang-py prettyprint-override"><code># Simple TIC TAC TOE game
import random
import time

board = [' '] * 9
winning_combinations = ((0, 1, 2), (3, 4, 5), (6, 7, 8),  # Horizontals
                        (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Verticals
                        (0, 4, 8), (2, 4, 6))             # Diagonals


#  Displays the visual output in the terminal
def print_board():
    output = []
    for row_end in range(0, len(board), 3):
        output.append("{}|{}|{}\n".format(
            board[row_end], board[row_end + 1], board[row_end + 2])
        )
        output.append("-+-+-\n")
    print("".join(output))


# Assigns each player to either 'X' or 'O'
def assign_sides():
    sides = ['X', 'O']
    player_side = None
    comp_side = None

    if random.random() &gt; 0.5:
        # Computer wins
        print('The computer won.\n')
        comp_side = random.choice(sides)
        sides.remove(comp_side)
        player_side = sides[0]
        print(f"The computer has chosen to be {comp_side}.")
        print(f"You will be {player_side[0]}.")
    else:
        print('You won.\n')
        while True:
            player_side = input('Choose your side: ').upper()
            if player_side not in sides:
                print('You can only choose X or O\n')
            else:
                sides.remove(player_side)
                comp_side = sides[0]
                print(f'You have chosen to be {player_side}.')
                print(f'The computer will be {comp_side}.')
                break

    return player_side, comp_side


# Chooses who goes first. If True, the player goes first. Otherwise the computer goes first.
def starts_first():
    # You can actually just have this in the play function, but to be explicit we'll make it its own function.
    return random.random() &gt; 0.5


#  Allows the player place X or O in the board. The 'side' means whether X or O
def player_place(side):
    check_if_full()
    while True:
        try:
            local = int(input('Choose somewhere to place it (1-9): ')) - 1
            if local not in range(0, 9):
                print('Invalid number. ')
            else:
                if board[local] != ' ':
                    print('This place is already occupied. \n')
                else:
                    board[local] = side
                    print_board()
                    time.sleep(0.5)
                    if did_win(side):
                        print("You won!")
                        exit()
                    break
        except ValueError:
            print('Enter a number! ')


def ai_place(side):
    check_if_full()
    local = random.randint(0, len(board) - 1)
    while board[local] != ' ':
        local = random.randint(0, len(board) - 1)
    board[local] = side
    time.sleep(1)
    print_board()
    time.sleep(0.5)

    if did_win(side):
        print("Computer won! Game over")
        exit()


def did_win(side):
    # The following is called tuple unpacking. Because each item in
    # winning_combinations is a tuple, we can simply `unpack` it by
    # writing (square1, square2, square3), where each variable
    # represents the value in the tuple. We can then use these directly
    # without having to go tuple[index]. This makes for digestible code.
    for (square1, square2, square3) in winning_combinations:
        row = [board[square1], board[square2], board[square3]]
        # all checks whether all items in an iterable are the same. The argument
        # given is a list comprehension (which just returns a list). Thus we are
        # checking if every item in the row is equal to the current player's side.
        if all(item == side for item in row):
            return True
    return False


def check_if_full():
    if ' ' not in board:
        print('GAME OVER')
        exit()


def play():
    player, computer = assign_sides()
    user_goes_first = starts_first()
    while True:
        if user_goes_first is True:
            player_place(player), ai_place(computer)
        else:
            ai_place(computer), player_place(player)


#  Driver code
if __name__ == '__main__':
    play()
<span class="math-container">```</span>
</code></pre>
    </div>