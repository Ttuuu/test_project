<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can take advantage of <a href="https://reactjs.org/docs/conditional-rendering.html" rel="nofollow noreferrer">conditional rendering</a> to concisely render the <code>iconFile</code> if it exists, and use the conditional operator to construct the outer class name. Using two separate classes for nearly identical functionality is pretty <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">WET</a>, I wouldn't recommend it.</p>

<p>Because the <code>iconFile</code> variable actually contains a <em>string</em> (if it exists), not a <a href="https://developer.mozilla.org/en/docs/Web/API/File" rel="nofollow noreferrer"><code>File</code></a>, consider naming it something else, maybe <code>iconPath</code>:</p>

<pre><code>&lt;label htmlFor={radioId} className="radio-buttons"&gt;
    &lt;div className={"label-inner" + (iconPath ? "" : " no-img")}&gt;
        {iconPath &amp;&amp; &lt;div&gt;&lt;img src={"/img/" + iconPath} /&gt;&lt;/div&gt;}
        &lt;div&gt;&lt;span&gt;{text}&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/label&gt;
</code></pre>

<p>You currently reference properties of <code>this.props</code> a lot. Consider destructuring them all immediately instead.</p>

<p>Since you're using ES6+ syntax, <a href="https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75" rel="nofollow noreferrer">always use <code>const</code></a>, never use <code>var</code>.</p>

<p>It sounds like <code>Field</code> is using the <code>component</code> prop as a tag name. Because variable tag names in JSX need to be upper-case, and because <code>Component</code> could easily be mistaken for <code>React.Component</code>, consider using a different name, maybe <code>Tag</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Field = ({ name, Tag, type, value, id }) =&gt; (
    &lt;Tag name={name} type={type} value={value} id={id} /&gt;
);
class RadioImage extends React.Component {
    render() {
        const { radioGroup, value, iconPath, text } = this.props;
        const radioId = radioGroup + value.replace(" ", "");
        return (
            &lt;div className="option"&gt;
                &lt;Field
                    name={radioGroup}
                    Tag="input"
                    type="radio"
                    value={value}
                    id={radioId}
                /&gt;
                &lt;label htmlFor={radioId} className="radio-buttons"&gt;
                    &lt;div className={"label-inner" + (iconPath ? "" : " no-img")}&gt;
                        {iconPath &amp;&amp; &lt;div&gt;&lt;img src={"/img/" + iconPath} /&gt;&lt;/div&gt;}
                        &lt;div&gt;&lt;span&gt;{text}&lt;/span&gt;&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/label&gt;
            &lt;/div&gt;
        );
    }
}

ReactDOM.render(
    // The Fragments below can be replaced with &lt;&gt;  &lt;/&gt; with an up-to-date Babel
    // (Stack Snippets do not support it)
    &lt;React.Fragment&gt;
        &lt;RadioImage radioGroup="radioGroup" value="value1" text="text1" /&gt;
        &lt;RadioImage radioGroup="radioGroup" value="value2" iconPath="iconPath" text="text2 with icon" /&gt;
    &lt;/React.Fragment&gt;
    ,
    document.getElementById('root')
);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="root"&gt;&lt;/div&gt;
&lt;script src="https://unpkg.com/react@16/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>


<p>You might consider avoiding IDs when possible - they <a href="https://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-variables">implicitly create global variables</a>, which aren't always the best idea when avoidable. You can move the <code>&lt;input&gt;</code> inside the <code>&lt;label&gt;</code> so that no <code>htmlFor={radioId}</code> is needed.</p>

<p>You can make <code>RadioImage</code> a stateless functional component if you want, it doesn't look to have any need to be stateful:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Field = ({ name, Tag, type, value, id }) =&gt; (
    &lt;Tag name={name} type={type} value={value} id={id} /&gt;
);
const RadioImage = ({ radioGroup, value, iconPath, text }) =&gt; (
    &lt;div className="option"&gt;
        &lt;label className="radio-buttons"&gt;
            &lt;Field
                name={radioGroup}
                Tag="input"
                type="radio"
                value={value}
            /&gt;
            &lt;div className={"label-inner" + (iconPath ? "" : " no-img")}&gt;
                {iconPath &amp;&amp; &lt;div&gt;&lt;img src={"/img/" + iconPath} /&gt;&lt;/div&gt;}
                &lt;div&gt;&lt;span&gt;{text}&lt;/span&gt;&lt;/div&gt;
            &lt;/div&gt;
        &lt;/label&gt;
    &lt;/div&gt;
);
ReactDOM.render(
    // The Fragments below can be replaced with &lt;&gt;  &lt;/&gt; with an up-to-date Babel
    // (Stack Snippets do not support it)
    &lt;React.Fragment&gt;
        &lt;RadioImage radioGroup="radioGroup" value="value1" text="text1" /&gt;
        &lt;RadioImage radioGroup="radioGroup" value="value2" iconPath="iconPath" text="text2 with icon" /&gt;
    &lt;/React.Fragment&gt;
    ,
    document.getElementById('root')
);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.option {
  border: 1px solid black;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="root"&gt;&lt;/div&gt;
&lt;script src="https://unpkg.com/react@16/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>

    </div>