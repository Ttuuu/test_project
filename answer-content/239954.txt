<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For each state, you're only interested in the final two items in its <code>countData</code> array, so there's no need for a nested loop. For example, rather than</p>

<pre><code>for (var i = 0; i &lt; countData.length; ++i) {
  if (i == countData.length - 2) {
    yesterdayTeraphy.push(countData[i].terapia_intensiva);
    yesterdaySintomi.push(countData[i].ricoverati_con_sintomi);
    // ...
</code></pre>

<p>you can do</p>

<pre><code>const len = countData.length;
yesterdayTeraphy.push(countData[len - 2].terapia_intensiva);
yesterdaySintomi.push(countData[len - 2].ricoverati_con_sintomi);
// ...
</code></pre>

<p>But, to go further - since you're using the same sort of thing with the 2nd last day and the last day, you can abstract it into a function. Also, rather than having so many individual variable names, you can have an <em>object</em> containing the cumulative count for each day, eg:</p>

<pre><code>// cumulativeToday:
{
  hospital: 10,
  home: 20,
  // ...
}
</code></pre>

<p>To construct such an object concisely, create a map of the italian words (the dataset properties) to the English property name you want:</p>

<pre><code>const italianToEnglish = {
  totale_ospedalizzati: 'hospital',
  isolamento_domiciliare: 'home',
  // ...
};
const cumulativeYesterday = {};
const cumulativeToday = {};

const addToCumulative = (cumulative, stateDay) =&gt; {
  for (const [italian, english] of Object.entries(italianToEnglish)) {
    cumulative[english] = (cumulative[english] || 0) + stateDay[italian];
  }
};
for (const stateArr of filtererdData) {
  addToCumulative(cumulativeToday, stateArr.pop());
  addToCumulative(cumulativeYesterday, stateArr.pop());
}
</code></pre>

<p>Then, to construct the differences (eg <code>var totSwabs = totTodaySwabs - totYesterdaySwabs;</code>), iterate over the <code>italianToEnglish</code> object and subtract the <code>cumulativeYesterday</code> value from the <code>cumulativeToday</code> value:</p>

<pre><code>const diffs = {};
for (const [key, todayValue] of Object.entries(cumulativeToday)) {
  diffs[key] = todayValue - cumulativeYesterday[key];
}
</code></pre>

<p>With this approach, for example, data previously in <code>totTodaySwabs</code> will be in <code>cumulativeToday.swabs</code>, <code>totYesterdaySwabs</code> will be in <code>cumulativeYesterday.swabs</code>, <code>totSwabs</code> will be in <code>diffs.swabs</code>.</p>

<p>Note that it's a <em>lot</em> nicer-looking to iterate over arrays using <code>for..of</code> than ordinary <code>for</code> loops, which require manual iteration and can get pretty ugly.</p>

<p>Also note that <code>const</code> should be strongly preferred over <code>var</code> in modern Javascript - <code>const</code> variables tell the reader of the code that the variable is not going to be reassigned, which makes things easier to read (one less thing to have to worry about while analyzing the code).</p>

<p>If code is going to need to run on ancient browsers which don't support ES2015 syntax like <code>const</code>, the best solution for maintainable code is to use <a href="https://babeljs.io/" rel="nofollow noreferrer">Babel</a> to automatically transpile to ES5 for production, while keeping the source code concise and modern.</p>
    </div>