<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without really understanding what you're attempting to do (and sorry, not enough time to dig into the subject matter), I've rewritten you code a little and profiled it.<br>
The biggest bottleneck I see have to do with the panda/numpy definitions, there is a lot of code querying what your data structure is to determine how to handle it. Perhaps review all your cells in the data frame and ensure they're defined correctly?  </p>

<p><img src="https://i.imgur.com/nSiOrqul.png" alt="Profiling Output"></p>

<p>Full image (but I'm pretty sure it's not helpful): <a href="https://i.imgur.com/nSiOrqu.png" rel="nofollow noreferrer">https://i.imgur.com/nSiOrqu.png</a></p>

<p>A lot of those hints come from the exceptions which are raised - something you could have found easily if you didn't disable them with <code>continue</code>. More on that later.</p>

<p><img src="https://i.imgur.com/uF5ae12.png" alt="Exceptions"></p>

<p>Onto the code. Firstly was the imports, make sure you have them defined - when I loaded up your code I had a missing import, and that could have been either your paste (missing) or settings on your computer.</p>

<pre><code>import pandas as pd
import statsmodels.api as sm
import itertools
</code></pre>

<p>Next is you're missing the entry point for your python code, always have this as it performs several things. First, it lets people reading your code understand where it begins and ends, secondly if you use tools like an auto-documentor, they load your code to perform reflection on all the objects.<br>
Currently your code would just execute immediately on loading (that's loading, not executing), and that's not good - think of it like your car taking off in gear as soon as you turn the engine on.</p>

<pre><code>if __name__ == "__main__":
</code></pre>

<p>Is your standard entry point for python code. Next, we have data initialisations at the top of the code - again, they should be after the entry point, or better yet, external (like an .ini file) and imported at runtime. The code comes out to:</p>

<pre><code>if __name__ == "__main__":
    data = [['01-01-2018', 150, 661, 396, 286, 786], ['01-02-2018', 231, 341, 57, 768, 941],
            ['01-03-2018', 486, 526, 442, 628, 621],
            ['01-04-2018', 279, 336, 140, 705, 184], ['01-05-2018', 304, 137, 800, 94, 369],
            ['01-06-2018', 919, 340, 372, 494, 117],
            ['01-07-2018', 947, 920, 848, 716, 719], ['01-08-2018', 423, 20, 313, 368, 909],
            ['01-09-2018', 422, 678, 656, 604, 674],
            ['01-10-2018', 422, 678, 656, 604, 674], ['01-11-2018', 337, 501, 743, 606, 991],
            ['01-12-2018', 408, 536, 669, 903, 463]]
    df = pd.DataFrame(data, columns=['date', 'A', 'B', 'C', 'D', 'E'])
    result = param(df)
    print(result)
</code></pre>

<p>When looking at the function <code>def param(data_param):</code>, the first thing that my IDE highlighted was <code>mod_score_param</code> was used inside a loop on a conditional path - but never initialised outside the loop.<br>
When you write code, you need to be aware of what scope your variables have. Usually variables used inside loops are discarded at the end of the loop. This changes the start of <code>def param(data_param):</code> slightly to:</p>

<pre><code>    seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(
        itertools.product(p, d, q))]  # Generate all different combinations of seasonal p, q and q triplets

    mod_score_param = pd.DataFrame({
        'id': w,
        'param': x,
        'param_seasonal': y,
        'results_aic': z,
    })

    for i in data_param:
</code></pre>

<p>The next modification I did was to extract the call to the stats package into it's own function, this is because we try to adhere to the Single Responsibility Principle (from S.O.L.I.D) where each function should only perform a single action - it makes it much easier to track down bugs, and we usually only change a single line of code when fixing problems (great when our single change doesn't work - we don't need to debug 10 <strong>new</strong> lines of code to find out what went wrong on top of the original bug).<br>
Much easier in the long-run (and the code looks very clean). Here is the function:</p>

<pre><code>def model_params(data_param, i, param, param_seasonal):
    results = sm.tsa.statespace.SARIMAX(data_param[i],
                                        order=param,
                                        seasonal_order=param_seasonal,
                                        enforce_stationarity=False,
                                        enforce_invertibility=False).fit()
    return results.aic
</code></pre>

<p>So the caller becomes:</p>

<pre><code>            try:
                results = model_params(data_param, i, param, param_seasonal)
                w.append(i)
                x.append(param)
                y.append(param_seasonal)
                z.append(results)
</code></pre>

<p>The exception was modified slightly too:</p>

<pre><code>            except Exception as e:
                print("Exception reached: ", e)
                continue
</code></pre>

<p>So we can see immediately what is broken and needs fixing. It's important with any coding - you should <em>never</em> let your exceptions be silenced, because it will lead to bigger problems in the future.<br>
If they are known, catch them with the appropriate exception handler, such as <code>ZeroDivisionError</code> or <code>TypeError</code>, and handle them at the time of the exception.<br>
If they don't match any existing error type, create a custom error handler and handle that particular error before continuing on.</p>

<p>That wraps up my code review and attempt to help you find the slow down in your code. Please apply these changes and see if the modifications to your data frame definitions (such as defining the frequency of the date strings - that's one of the warnings I saw) make the intended improvements.<br>
Good Luck!</p>
    </div>