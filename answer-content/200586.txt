<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Models typically do not implement <code>INotifyPropertyChanged</code> interface. So binding directly to model properties has two main consequences:</p>

<p>1) <a href="https://blog.jetbrains.com/dotnet/2014/09/04/fighting-common-wpf-memory-leaks-with-dotmemory/" rel="nofollow noreferrer">It creates a memory leak</a>.</p>

<p>2) It disables <code>ViewModel -&gt; View</code> notifications. Models do not fire <code>PropertyChanged</code> event, so UI will not update itself when you change model properties from code. Updates coming in the opposite direction (from UI to your model) will still work though. </p>

<hr>

<p>Your approach will work fine, if your <code>DeviceModel</code> is immutable. Meaning that you update it as</p>

<pre><code>//setter fires PropertyChanged event
Device = new DeviceModel(...);
</code></pre>

<p>Then you can use <code>OneTime</code> binding in xaml to avoid memory leaks</p>

<pre><code>&lt;Border DataContext="{Binding Device}"&gt;
    &lt;TextBlock Text="{Binding SomeDeviceProperty, Mode=OneTime}"/&gt;
&lt;/Border&gt;
</code></pre>
    </div>