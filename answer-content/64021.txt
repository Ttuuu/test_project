<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The only weak point is that the implementation is not copy safe nor there exist mechanism for ensuring copy protection. I would hide its underlying type and return as <code>sync.Locker</code>, so it can't be mis-used:</p>

<pre><code>type spinLock uint32

func (sl *spinLock) Lock() {
    for !atomic.CompareAndSwapUint32((*uint32)(sl), 0, 1) {
        runtime.Gosched() //without this it locks up on GOMAXPROCS &gt; 1
    }
}

func (sl *spinLock) Unlock() {
    atomic.StoreUint32((*uint32)(sl), 0)
}

func SpinLock() sync.Locker {
    return &amp;spinLock{}
}
</code></pre>

<p>An alternative I've seen in <code>sync.Cond</code> is to <a href="http://golang.org/src/pkg/sync/cond.go#L112" rel="noreferrer">embed an auxiliary type for copy-protection</a>, although it would complicate the implementation unnecessary.</p>
    </div>