<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You include the modern random.</p>

<pre><code>#include &lt;random&gt;
</code></pre>

<p>But in your code you use the old <code>srand()</code> and <code>rand()</code> functions. Also your usage of these functions is not correct.</p>

<pre><code>        time_t tim = time(NULL);
        srand(tim + rand());
        fX = rand() % (nFieldWidth - 2) + 1;
        fY = rand() % (nFieldHeight - 2) + 1;
</code></pre>

<p>Here you are abusing the seeding of rand. The point about seeding is to have a starting point. Once you have established a starting point the following sequence of number <strong>should</strong> have an even distribution and be somewhat randomish (Lets not get into the argument that rand is not good at either that's what it was supposed to be). By re-seeding before each call to rand you are throwing away any chance at even distribution.</p>

<p>The standard argument is that you should use <code>srand()</code> once in the application (just after startup is good). Then simply call <code>rand()</code> when you need a new value.</p>

<pre><code>int main()
{
    srand(time());
    ...
    // CODE that uses rand()
}
</code></pre>

<p>Now coming back to the problem with rand() family. We have all know that rand has been pretty broken for a while (its fine for simple problems (like games like this)). But as a result the modern <code>&lt;random&gt;</code> library was introduced that has a much better random library and it is simply just a much better idea to use this new library (even in small games like this).</p>

<pre><code>int main()
{
    std::default_random_engine generator;
    std::uniform_int_distribution&lt;int&gt;   widthDistribution(1,nFieldWidth-1);
    std::uniform_int_distribution&lt;int&gt;   heightDistribution(1,nFieldHeight-1);

    // Some stuff

    fX = widthDistribution(generator);
    fY = heightDistribution(generator);
</code></pre>

<hr>

<p>Sure:</p>

<pre><code>typedef std::deque&lt;Snake_segment&gt; Snake_container;
</code></pre>

<p>The modern way of doing this is:</p>

<pre><code>using Snake_container = std::deque&lt;Snake_segment&gt;;
</code></pre>

<p>Personally not a fan of "Snake Case"</p>

<hr>

<p>These are not const!!!</p>

<pre><code>// Constant variables
int nScreenWidth;
int nScreenHeight;
</code></pre>

<hr>

<p>OK. So this is a C application (that happens to use some C++ features).</p>

<pre><code>void clear(wchar_t* buf);
void update(HANDLE hConsole, Snake_container&amp; body, wchar_t* buf);
void directionCheck(char value);
void move(Snake_container&amp; body, wchar_t* buf);
void genFood(wchar_t* buf);
void clearOnly(wchar_t* buf);
</code></pre>

<p>If we created some class types we can group these function somewhat more logically and potentially isolate the variables so you don't accidently cause tight coupling between them.</p>

<p>I can see:</p>

<ul>
<li>Screen Object</li>
<li>Snake Object (That can be drawn on a screen)

<h2>* There seems to be a <code>wchar_t</code> buffer being passed around.</h2></li>
</ul>

<p>Manual memory management:</p>

<pre><code>    wchar_t* temp = new wchar_t[nScreenWidth * nScreenHeight];
</code></pre>

<p>This is a bad idea. If there is an exception it leaks (OK in this context maybe not) but it is a bad habit. Get used to using containers (or smart pointers) when you need dynamic allocation. This simply looks like a buffer. So use std::vector</p>

<pre><code>    std::vector&lt;wchar_t&gt;  temp(nScreenWidth * nScreenHeight);
</code></pre>

<p>All memory management handeled.</p>

<p>In modern C++ it is very rare to see naked new/delete.</p>

<hr>

<p>Always check that the read worked.</p>

<pre><code>        std::cin &gt;&gt; choice;

        // Should be:

        if ((std::cin &gt;&gt; choice) &amp;&amp; (choice == 1 || choice ==2)) {
           // user question worked.
        }
        else {
           // user input failed.
</code></pre>

<h2>            }</h2>

<p>Looks like a snake constructor:</p>

<pre><code>    // Sets up the snake body
    Snake_container body;
    Snake_segment head;
    head.posx = nFieldWidth / 2; head.posy = nFieldHeight / 2;
    body.push_back(head);
    Snake_segment tail = head;
</code></pre>

<p>You should isolate this code in its own class.</p>

<hr>
    </div>