<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the suggestions given by 1201ProgramAlarm's <a href="https://codereview.stackexchange.com/a/224194">answer</a>, I have the following suggestions.</p>

<p>First, your (over)use of RTTI seems overkill here.  Even dynamic polymorphism is not necessary.  A simple class is enough:</p>

<pre><code>enum class Species { cat, dog };

struct Animal {
    Species species;
    std::string name;
};
</code></pre>

<p>(You are missing <code>#include &lt;string&gt;</code>)</p>

<p>Second, you maintain two queues.  Since this is an animal shelter, why not merge them?  You can use <code>vector</code> to accommodate for adopters that prefer a specified species.</p>

<pre><code>std::vector&lt;Animal&gt; animals;
</code></pre>

<p>Third, <code>dequeue</code> returns <code>void</code>.  This is <em>abandonment</em>, not adoption.  It should return the <code>Animal</code>.  (An animal protectionist can even go further and mark the function <code>[[nodiscard]]</code>.)</p>

<p>Also, let <code>print</code> accept an <code>ostream&amp;</code>, so you can print to any stream.</p>

<p>Here's the revised version:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

enum class Species { cat, dog };

std::string to_string(Species species)
{
    switch (species) {
    case Species::cat:
        return "cat";
    case Species::dog:
        return "dog";
    default:
        throw std::invalid_argument{"Unrecognized species"};
    }
}

struct Animal {
    Species species;
    std::string name;
};

class Shelter {
public:
    void enqueue(Animal animal)
    {
        animals.push_back(animal);
    }
    // adopt a specific species
    Animal dequeue(Species species)
    {
        auto it = std::find_if(animals.begin(), animals.end(),
                               [=](const Animal&amp; animal) {
                                   return animal.species == species;
                               });
        if (it == animals.end())
            throw std::logic_error{"No animal to adopt"};
        Animal animal = std::move(*it);
        animals.erase(it);
        return animal;
    }
    // adopt any animal
    Animal dequeue()
    {
        if (animals.empty())
            throw std::logic_error{"No animal to adopt"};
        Animal animal = std::move(animals.front());
        animals.erase(animals.begin());
        return animal;
    }
    void print(std::ostream&amp; os)
    {
        for (const auto&amp; animal : animals) {
            os &lt;&lt; animal.name &lt;&lt; " (" &lt;&lt; to_string(animal.species) &lt;&lt; ")\n";
        }
    }
private:
    std::vector&lt;Animal&gt; animals;
};

int main()
{
    Shelter shelter;
    shelter.enqueue({Species::dog, "Max"});
    shelter.enqueue({Species::cat, "Trace"});
    shelter.enqueue({Species::cat, "Han"});
    shelter.enqueue({Species::dog, "Shaun"});
    shelter.enqueue({Species::dog, "Tiger"});
    shelter.enqueue({Species::cat, "Meow"});

    shelter.print(std::cout);
    std::cout &lt;&lt; "\n";

    auto new_pet = shelter.dequeue();
    shelter.print(std::cout);
    std::cout &lt;&lt; "\n";

    auto new_dog = shelter.dequeue(Species::dog);
    shelter.print(std::cout);
}
</code></pre>

<p>Output:</p>

<pre><code>Max (dog)
Trace (cat)
Han (cat)
Shaun (dog)
Tiger (dog)
Meow (cat)

Trace (cat)
Han (cat)
Shaun (dog)
Tiger (dog)
Meow (cat)

Trace (cat)
Han (cat)
Tiger (dog)
Meow (cat)
</code></pre>
    </div>