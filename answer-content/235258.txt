<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>There's no way to access the tree's nodes, so <code>contain_sub</code> is useless to clients.</li>
<li>Even if it works, <code>contain_sub</code> doesn't return anything in two of its branches and looks gnarly.</li>
<li>Use smart pointers or have a good reason not to.</li>
<li>Don't copy items unless you're copying the tree itself; you're doing this a lot.</li>
<li>Regarding iterators: remember that there are multiple ways to traverse a binary tree (pre/post/in/level order, and reverse).</li>
<li>use_consistentNamingConventions (<code>getNumberLeftNodes</code> vs <code>get_size</code>).</li>
<li>When would <code>getNumberLeftNodes</code> ever be useful to a client?</li>
<li>Test your interface if you're going to write test code. 100% coverage is completely reasonable for a data structure.</li>
<li><code>insert_at_sub</code> could reduce to else returning the new node instead of having two returns</li>
<li>"destroy" is semantically inaccurate for C++, it should be something like "erase".</li>
<li><code>destroy</code> is pretty inefficient and needs revising. Don't repeatedly traverse trees if you don't have to.</li>
</ul>

<hr>

<p>At a high level, why is this binary tree useful? Why not sort a vector or a list? Does this require fewer comparisons? Fewer pointer indirections? Fewer bytes allocated? It looks very slow at a cursory glance. If it's more optimal in some way than another data structure, write a test to demonstrate that.</p>
    </div>