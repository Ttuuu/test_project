<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>functions</h1>
<p>Your script does a few things</p>
<ul>
<li>iterate over the files</li>
<li>recursively iterate over the subdirectories</li>
<li>parse the files</li>
<li>concatenate the results</li>
</ul>
<p>Better would be to separate those in different functions.</p>
<p>The extra advantages is that you can test these functions separately, you can document them with a docstring, and add typing information</p>
<h1>comments</h1>
<p>You comment what the code does. Python is luckily so expressive that almost anyone can understand what a particular line does. what is more difficult is the why you do certain steps, and why you do them in a certain order. This is what should be commented</p>
<h1>global variables</h1>
<p>Your <code>big_file</code> method changes the global state of the program. That makes it more difficult to reason about, and also makes it difficult if you want to use this methon on 2 separate directories. Here you append to <code>big_text</code>. If you want to keep it like this, I would pass it on as a function parameter, instead of a global variable</p>
<pre><code>def big_file(path, big_text = None):
    if big_text is None:
        big_text = []
    
    ...
            big_file(path + '/' + i, big_text=big_text) 
</code></pre>
<h1><code>pathlib.Path</code></h1>
<p>Most file operations are simpler when using the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>  module. It will be a lot more robust than manually concatenating paths like in <code>path + '/' + i</code></p>
<h1>error handling</h1>
<p>You have a <code>try-except</code> block with a bare except. Better here would be to catch the errors you expect specifically and handle those, and let other, unexpected error bubble up. <code>Fail hard, fail fast</code>, instead of covering up bugs can help you write more stable and correct software</p>
<h1>logging</h1>
<p>Instead of using <code>print</code>, you can use the <code>logging</code> module. That way you can make a distinction between different levels of importance, and filter some out if needed</p>
<h1>generators</h1>
<p>To prevent a <code>MemoryError</code> you can use generators. these are special functions that do their work piece by piece, and can work without keeping the whole structure in memory</p>
<p>You can have 1 generator generate the files</p>
<pre><code>def iterate_files(path: Path) -&gt; typing.Iterator[Path]:
    """Recursively iterates over `path`, yielding all the correct files"""
    for file in path.glob("*"):
        if file.is_dir():
            yield from iterate_files(file)
        else:
            # or a check that the file has a certain suffix
            yield file
</code></pre>
<p>Then you feed this iterator to the parser generator</p>
<pre><code>def parse_files(files: typing.Iterator[Path]) -&gt; typing.Iterator[str]:
    """Parse the xml files."""
    for file in files:
        try:
            xml = ET.parse(path + '/' + i).getroot()
            yield ET.tostring(xml, encoding='unicode')
        except &lt;stricter exception&gt;:
            logging.warn(f"error in {file}")
            raise
</code></pre>
<p>In the last except, you can have different <code>except</code> blocks with different result</p>
<p>You can then feed this to another generator which writes it to a file:</p>
<pre><code>def write_to_file(
    text_iterator: Typing.Iterable[str], output_filehandle: typing.TextIO
) -&gt; Typing.Iterable[str]:
    for chunk in text_iterator:
        output_filehandle.write(chunk)
        yield chunk
</code></pre>
<h1>putting it together</h1>
<pre><code>if __name__ == "__main__":
    path = Path("PLC 2360")
    files = iterate_files(path)
    parsed_filed = parse_files(files)
    
    with Path(&lt;output_path&gt;).open("w") as output_filehandle:
        parsed_filed_after_writing = write_to_file(
            text_iterator=parse_files, output_filehandle=output_filehandle
        )
    ...
</code></pre>
<p>In that last part, I've opened the file in the main part of the script, taking into account the principles of <a href="https://rhodesmill.org/brandon/talks/#clean-architecture-python" rel="nofollow noreferrer">clean</a> <a href="https://rhodesmill.org/brandon/talks/#hoist" rel="nofollow noreferrer">architecture</a></p>
    </div>