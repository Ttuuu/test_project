<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It definitely seems like a hack.</p>

<ul>
<li><p>A first smell is that changing the function signature by just renaming variables will break it.
If <code>a</code> is available in <code>locals()</code>, it has to match <code>a</code> in the function signature.
Even just a capital <code>A</code> in either spot will break the behaviour.</p>

<p>This requires you to change names in multiple locations if you only wanted to change it in one.</p></li>
<li><p>Next, it is hard to follow and debug.
It is certainly very surprising behaviour to anyone just getting to know your code.</p>

<p>Your functions return surprising results that no longer correspond to the <em>very arguments the caller provided</em>.
Instead, they are influenced by global state and cannot be overridden:</p>

<pre class="lang-py prettyprint-override"><code>  # Some Arguments
  a = 2
  b = 3
  c = 4
  d = 5

  @AbsorbContext(context = locals())
  def func (a: int, b: int, /, c: int = 0, *, d: int = 1):
      return (a * b + c) * d

  print(func(1, 2, 1, 1))  # Expected to return 3, returns 50
</code></pre></li>
<li><p>Variable names like <code>a</code>, <code>b</code>, <code>c</code>, ... make sense now, but in a larger context, more elaborate variable names are needed.
These are then blocked for usage, and a person declaring new variables has to check <em>every decorated function</em> for collisions.</p>

<p>Not only that, also <code>def</code> and <code>class</code> definitions have to be regarded, since these also bind to names.
Built-ins can also collide, though function parameters shadowing built-ins is a terrible idea and rare.
Same is true for <code>import *</code>: terrible idea in the first place, but <code>@AbsorbContext</code> turns it into proper chaos.</p>

<p>Situations like this can arise (fails because <code>check_array</code> is a function):</p>

<pre class="lang-py prettyprint-override"><code>  def check_array():
    pass

  # check_array = True  # uncommenting works

  @AbsorbContext(context = locals())
  def func (a: int, check_array: bool, /, c: int = 0, *, d: int = 1):
      return (a * int(check_array) + c) * d
</code></pre>

<p><code>check_array</code> is a generic name which is easily imagined to be that of a function, or a function parameter.</p></li>
<li>Providing <code>context=globals()</code> as a default argument to <code>__init__</code> will use <code>globals()</code> of the module where <code>AbsorbContext</code> is defined.
This will break behaviour if that class is imported, which you will probably be doing.
<code>context</code> should not have a default argument.</li>
<li><code>AbsorbContent</code> could have been a function and therefore shorter.
Did you leverage <code>self</code> to access state?
Decorator functions can do this through closure.</li>
<li><p>Situations in which run-time should <em>definitely</em> error out are silently overridden:</p>

<pre class="lang-py prettyprint-override"><code>  # Some Arguments
  a = 2
  b = 3
  c = 4
  d = 5

  @AbsorbContext(context = locals())
  def func (a: int, b: int, /, c: int = 0, *, d: int = 1):
      return (a * b + c) * d

  print(func(1, 2, 1, 1, 1, 1, 1, 1, 1, 1))  # Expected to error out
</code></pre>

<p>Here, a <code>TypeError</code> for mismatched function arguments and parameters is expected, but it works and returns <code>50</code>.
This bug might not be found immediately, even though it should definitely fail-fast.</p></li>
</ul>

<hr>

<p>In the spirit of your "absorption" approach, you could use <code>**kwargs</code> in <code>play</code> to collect (absorb) all unused keyword arguments which the function has no use for.
<code>sheet_music</code> then remains as a mandatory positional argument in all cases:</p>

<pre class="lang-py prettyprint-override"><code>class Instrument:
    pass


class ElectricKeyboard(Instrument):
    def __init__ (self):
        Instrument.__init__(self)
    def play (self, sheet_music: list, foot_pedal: bool = True, **kwargs):
        print("Playing Keyboard")
        # play some music


class ElectricGuitar(Instrument):
    def __init__ (self):
        Instrument.__init__(self)
    def play (self, sheet_music: list, foot_pedal: bool = True, guitar_pick: bool = True, **kwargs):
        print("Playing Guitar")
        # play some music


class Kazoo(Instrument):
    def __init__ (self):
        Instrument.__init__(self)
    def play (self, sheet_music: list, **kwargs):
        print("Playing Kazoo")
        # play some music


instruments = [ElectricGuitar(), ElectricKeyboard(), Kazoo()]

for instrument in instruments:
    instrument.play("sheet_music", foot_pedal=True)
    instrument.play("sheet_music")
    instrument.play("sheet_music", guitar_pick=True)
</code></pre>

<p>Now, all those <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">ducks</a> quack properly.</p>

<hr>

<p>Collecting <code>instruments</code> and then iterating over them calls for identical interfaces.
This is because lists are homogeneous.
They should contain items of identical type (think of a list of text files; you can safely call <code>.read()</code> on all of these).
This is another hint that the <em>sibling</em> approach might be off.</p>

<p>Instead, you could look into <em>composition</em> and implement a <code>MusicGroup</code> class with <em>has-a</em> relations towards the instruments played by the musical group.
<code>MusicGroup</code> then has methods like <code>play_guitars</code> to play all available guitars.
<code>play_guitars</code> can have a specialized signature, which only makes sense for guitars.
Then, you can give <code>MusicGroup</code> a <code>play</code> or maybe <code>play_all</code> method to call all <code>play_&lt;instrument&gt;</code> methods.
The <code>play_all</code> method would forward all required <code>**kwargs</code>, or better still, manually forward them to each specific function.</p>

<p>Your inheritances and attempt to treat all siblings equally might be a case of      <a href="https://en.wikipedia.org/wiki/Circle%E2%80%93ellipse_problem" rel="nofollow noreferrer">the Circle-Ellipse problem</a>.
Your instruments certainly all fulfill the <em>is-a</em> relationship towards <code>Instrument</code>, but that does not necessarily warrant inheritance if their behaviours differ too much.</p>
    </div>