<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Prefer Constants Over Macros</strong><br>
The line </p>

<pre><code>#define MAX_TREE_HEIGHT 1000
</code></pre>

<p>might be better written as </p>

<pre><code>const size_t MAX_TREE_HEIGHT = 1000;
</code></pre>

<p>In C++ constants are preferred over macros because constants are type safe and provide more error checking at compile time.</p>

<p><strong>Prefer new Type(); Over malloc()</strong><br>
The C++ programming language allowed <code>malloc()</code>, <code>calloc()</code> and <code>free()</code> for backwards comparability with the C programming language, however, it also introduced <code>new Type()</code> and <code>delete()</code>. Generally <code>new</code> and <code>delete</code> are preferred over the older C language functions. Using <code>new</code> has these benefits: </p>

<ul>
<li>new is an operator, malloc is a function</li>
<li>new returns the proper type so the cast is not necessary</li>
<li>new executes constructors to properly initialize the new object, the use of malloc requires additional code to initialize the new object.</li>
<li>new automatically performs the error checking for failed memory allocation and throws an exception if the allocation failed. For malloc additional code needs to be added to make sure malloc did not return NULL (or nullptr in the case of C++).</li>
<li>new knows the amount of memory to allocate for the object, malloc requires the programmer to specify the size of the object.</li>
</ul>

<p>References about new versus malloc can be found <a href="https://www.includehelp.com/cpp-tutorial/difference-between-new-and-malloc.aspx" rel="nofollow noreferrer">here</a>, <a href="https://techdifferences.com/difference-between-new-and-malloc.html" rel="nofollow noreferrer">here</a> and <a href="https://stackoverflow.com/questions/184537/in-what-cases-do-i-use-malloc-vs-new">this stackoverflow question</a>.</p>

<p>When allocating arrays in C <a href="https://www.geeksforgeeks.org/calloc-versus-malloc/" rel="nofollow noreferrer"><code>calloc()</code> is preferred over <code>malloc()</code></a> for two reasons, first it is clear that an array is being allocated because there are two arguments, one is the size of the array and the other is the size of the object. The second reason is that calloc() clears the memory of the objects (initializes the entire array contents to zero), malloc() requires the programmer to clear the contents of the array.</p>

<p><strong>Namespaces</strong><br>
Namespaces were added to the definition of the C++ language to prevent collisions of function names and variables. Operators such as <code>cin</code> and <code>cout</code> can be overloaded to display the contents of objects. In this case the overloaded NAMESPACE::cout may include references to std::cout. Generally <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice"><code>using namespace std;</code> is considered a bad programming practice</a> because it can cause function name or variable name collisions. For maintainability reasons never put <code>using namespace std;</code> into a header file.</p>

<p><strong>Use Container Classes When Possible</strong><br>
The array allocated by this line</p>

<pre><code>    struct MinHeap* minHeap = createMinHeap(size);
</code></pre>

<p>might be better as the C++ container class std::vector or even std::vector (does the code really need the pointers).</p>

<p>std::vector is a variable sized array of any type, it grows as needed.</p>
    </div>