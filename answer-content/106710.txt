<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>/// &lt;summary&gt;
/// Extract SemVer format from string into an array
/// &lt;/summary&gt;
/// &lt;param name="version"&gt;A version in the SemVer format&lt;/param&gt;
/// &lt;returns&gt;An array of string composed by SemVer format&lt;/returns&gt;
/// &lt;example&gt;
/// v0 will give [0, "", ""]
/// v1.2.3-foobar will give [1, 2, 3]
/// &lt;/example&gt;
private static string[] ExtractSemVer(string version)
{
    var semver = new string(version.Where(c =&gt; c.Equals('.') || Char.IsDigit(c)).ToArray());
    return !semver.Contains('.')
        ? new[] { semver, String.Empty, String.Empty }
        : new List&lt;string&gt;(
            semver.Split(new[] { '.' }, StringSplitOptions.RemoveEmptyEntries))
            {
                String.Empty,
                String.Empty
            }.ToArray();
}  
</code></pre>
</blockquote>

<p>this method isn't doing what the example in the documentation promises.  </p>

<p>For a value of <code>v1.2.3-foobar</code> it will return an array having <strong>5</strong> elements <code>"1", "2", "3", "", ""</code>. For a value like <code>1.2</code> it will return an array having <strong>4</strong> elements <code>"1", "2", "", ""</code>.   </p>

<p>In addition it seems overly complicated mostly because of this ugly tenary expression. </p>

<p>The condition <code>semver.Contains('.')</code> isn't needed. We can just <code>Split</code> by a dot and then use <code>Enumerable.Repeat()</code> to concat the remaining empty strings like so  </p>

<pre><code>private static readonly int maxVersionParts = 3;
private static string[] ExtractSemanticVersion(string version)
{
    var semanticVersions = new string(version.Where(c =&gt; c.Equals('.') || Char.IsDigit(c)).ToArray());

    string[] values = semanticVersions.Split(new[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
    int neededValues = maxVersionParts - values.Length;

    return values.Concat(Enumerable.Repeat(string.Empty, neededValues)).ToArray();
}
</code></pre>

<hr>

<blockquote>
<pre><code>public static string WriteVersions(IList&lt;Version&gt; versions)
{
    Func&lt;bool, string&gt; lineOrEmpty = b =&gt; b ? Environment.NewLine : String.Empty;
    Func&lt;int, int, bool&gt; isLimit = (n, limit) =&gt; n + 1 &lt; limit;
    Func&lt;int, string&gt; line = n =&gt; lineOrEmpty(isLimit(n, versions.Count));

    var stringBuilder = new StringBuilder("## Evolutions" + Environment.NewLine + Environment.NewLine);
    for (var i = 0; i &lt; versions.Count; i++)
    {
        stringBuilder.AppendFormat("### {0}{1}{1}",
            versions[i].Name,
            Environment.NewLine);
        for (int index = 0; index &lt; versions[i].Evolutions.Length; index++)
        {
            var length = versions[i].Evolutions.Length;
            stringBuilder.AppendFormat("* {0}{1}",
                versions[i].Evolutions[index],
                lineOrEmpty(!String.IsNullOrEmpty(line(i)) || isLimit(index, length)));
        }
        stringBuilder.Append(line(i));
    }
    return stringBuilder.ToString();
}  
</code></pre>
</blockquote>

<p>this method looks overly complex and is IMO named wrong. A much better name would just be <code>Format()</code> or <code>FormatVersions()</code>.  </p>

<p>It also adds an additional new line if the <code>Evolutions</code> does not contain any items.  </p>

<p>Assume the following setup  </p>

<pre><code>var versions = new[]
{
new Version { Name = "v0", Evolutions = new[] { "Add foo 0", "Add bar 1" }},
new Version { Name = "v2", Evolutions = new string[0]},
new Version { Name = "v1", Evolutions = new[] { "Add foo 6", "Add bar 7" }}
};
</code></pre>

<p>the output of your method is  </p>

<blockquote>
<pre><code>## Evolutions

### v2


### v1

* Add foo 6
* Add bar 7

### v0

* Add foo 0
* Add bar 1  
</code></pre>
</blockquote>

<p>By using a <code>foreach</code>, a little bit of linq "magic" and <code>string.Join()</code> we can get a "better" output with a more readable and maintainable code like so  </p>

<pre><code>private static readonly string separator = Environment.NewLine + "* ";
public static string WriteVersions(IList&lt;Version&gt; versions)
{

    var stringBuilder = new StringBuilder("## Evolutions");
    stringBuilder.AppendLine().AppendLine();

    foreach (var version in versions)
    {
        stringBuilder.Append("### ")
            .AppendLine(version.Name)
            .AppendLine();

        IEnumerable&lt;string&gt; evolutions = version.Evolutions.Where(s =&gt; !string.IsNullOrWhiteSpace(s));
        if (evolutions.Any())
        {
            stringBuilder.Append("* ")
                .AppendLine(string.Join(separator, evolutions))
                .AppendLine();
        }
    }

    return stringBuilder.ToString().TrimEnd(Environment.NewLine.ToArray());
}  
</code></pre>

<p>Another hint regarding readability is to add vertical space (new lines) to group related code together and separate unrelated code.  </p>
    </div>