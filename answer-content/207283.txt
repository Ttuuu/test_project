<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't use <code>using namespace std;</code></h2>

<p><a href="https://stackoverflow.com/a/1453605/5416291">It's bad practice</a> that can cause a lot of problems that are easy to avoid, most people are used to the prefix, and three letters aren't that hard to type.</p>

<hr>

<h2>Don't write C code in C++</h2>

<p>They are different languages with different standard libraries, different conventions and standard practices.</p>

<p>The C++ version of <code>&lt;stdio.h&gt;</code> is <code>&lt;cstdio&gt;</code>. Always prefer the C++ headers of the C library when writing in C++. They always begin with <code>c</code> and won't end in <code>.h</code>. To that end the <a href="https://stackoverflow.com/a/20238349/5416291"><code>&lt;iostream&gt;</code> is preferred</a> for printing in C++.</p>

<p>In C++ it is preferred to declare the type specifier with the type not the variable.</p>

<pre><code>vector&lt;element&gt; &amp;v
</code></pre>

<p>would be declared</p>

<pre><code>vector&lt;element&gt;&amp; v
</code></pre>

<p>You should also eschew C style arrays and <code>char*</code> arrays. Prefer <a href="https://en.cppreference.com/w/cpp/container/array" rel="nofollow noreferrer"><code>std::array</code></a> for arrays you know the size of at compile time and <a href="https://en.cppreference.com/w/cpp/container/vector" rel="nofollow noreferrer"><code>std::vector</code></a> for arrays you don't know the size of or that need to change size. (<code>std::array</code> is not dynamic and can't be resized)</p>

<p>You can replace the <code>char*</code> array with an <code>std::array&lt;char&gt;</code> or <code>std::array&lt;std::string&gt;</code></p>

<p>And don't declare multiple variables on a single line. it is error prone and difficult to read. You did keep most variables on separate lines but you did declare:</p>

<pre><code>vector&lt;element&gt; a, b;
</code></pre>

<hr>

<h2>Don't use Global variables</h2>

<p>They are <a href="https://stackoverflow.com/a/35216229/5416291">dangerous</a> and can lead to hard to find bugs. Can they have a usefulness? Sure. I use them to name Magic Numbers and there are probably other uses but in this case almost definitely not. You could absolutely pass your vector by reference.</p>

<hr>

<h2>Don't <code>return 0</code> from <code>main()</code></h2>

<p>The compiler will generate it for you and the implication is that you might return anything other than 0.</p>

<hr>

<h2>Use proper return types</h2>

<p>Don't return <code>int</code> from functions that don't have a return value. They should be marked <code>void</code>. Your compiler also should have warned you about this.</p>

<p>So turn up your compiler warnings. this will help you tremendously. <code>W4</code> on VS or <code>Wall</code> on gcc/Clang. <code>Werror</code> is also useful and highly recommended.</p>

<hr>

<h2>Use proper encapsulation</h2>

<p>Your class member variables are exposed. This is almost as error prone as global variables and defeats the entire concept of encapsulation. This is however sometimes done with POD types. which I think is what your <code>element</code> essentially is. Switch to a struct (which is the publicly accessable user-defined type) and pull out the functions and you'll have:</p>

<pre><code>struct element {
    long long id;
    std::string name;
    int bmi;
    int max_bmi;
    bool remove;
};

    bool is_lower_id(element a, element b) {
        return a.id &lt; b.id;
    }
    bool is_same(element a, element b) {
        return (a.id == b.id) &amp;&amp;
            (0 == a.name.compare(b.name));
    }
    void update_bmi(element&amp; a){
        this-&gt;bmi = a.bmi;
        this-&gt;max_bmi = max(this-&gt;max_bmi, a.bmi);
    }
    void print() {
        printf("id/name bmi(max) : %lld/%s %d(%d)\n",
            this-&gt;id, this-&gt;name.c_str(), this-&gt;bmi, this-&gt;max_bmi);
    }
</code></pre>

<p>Then prefer member initialization where possible. You have for loop dedicated to initializing every elements <code>remove</code> to true. That can be done with brace initialization. <code>bool remove{ true }</code></p>

<hr>

<p>You use a Yoda conditional in your <code>is_same()</code> function. These are considered outdated and difficult to read. Also any decent linter should catch the typo that they are used to prevent. You also unnecessarily use the <code>std::string</code> <code>compare</code> method. You don't need the conversion to int only to compare the int to 0 and convert to Boolean. Two strings can be compared with <code>==</code>.</p>

<p>You should also pass by const reference in those functions to avoid unnecessary copying.</p>

<p>By removing your <code>printf</code> call and using <code>std::cout</code> those functions now look like this:</p>

<pre><code>bool is_lower_id(const element&amp; a, const element&amp; b)
{
    return a.id &lt; b.id;
}

bool is_same(const element&amp; a, const element&amp; b)
{
    return a.id == b.id &amp;&amp; a.name == b.name;
}

void update_bmi(element&amp; lhs, element&amp; rhs) {
    lhs.bmi = rhs.bmi;
    lhs.max_bmi = std::max(lhs.max_bmi, rhs.bmi);
}

void print(const element&amp; elem) {
    std::cout &lt;&lt; elem.id &lt;&lt; elem.name &lt;&lt; elem.bmi &lt;&lt; elem.max_bmi &lt;&lt; '\n';
}
</code></pre>

<p>However you can overload the comparison operators for user defined types and this is the perfect opportunity for that! It should look something like this.</p>

<pre><code>bool operator==(const element&amp; lhs, const element&amp; rhs) { return (lhs.id == rhs.id) &amp;&amp; (lhs.name == rhs.name); }
bool operator!=(const element&amp; lhs, const element&amp; rhs) { return !operator==(lhs, rhs); }
bool operator&lt; (const element&amp; lhs, const element&amp; rhs) { return lhs.id &lt; rhs.id; }
bool operator&gt; (const element&amp; lhs, const element&amp; rhs) { return operator&lt; (rhs, lhs); }
bool operator&lt;=(const element&amp; lhs, const element&amp; rhs) { return !operator&gt; (lhs, rhs); }
bool operator&gt;=(const element&amp; lhs, const element&amp; rhs) { return !operator&lt; (lhs, rhs); }
</code></pre>

<p>Now all the traditional comparators will work with your user defined type.</p>

<hr>

<p>In <code>print_list</code> why do you do this?:</p>

<pre><code>printf("%s:%d\n", __func__, __LINE__);
</code></pre>

<p>I'm not certain what purpose this serves. After all most compilers and IDE's will give you the line of a function in the case of an error or exception. But by all means put it back in if you need it. This is also a great opportunity to use a ranged-for loop. They're less error-prone and neater and easier to read.</p>

<pre><code>void print_list(std::vector&lt;element&gt;&amp; vec)
{
    for (auto&amp; elem : vec)
    {
        print(elem);
    }
}
</code></pre>

<hr>

<p>Now for your <code>update_list</code> function. If I understand correctly you have two vectors. If an element of vector two doesn't exist in vector one then it is added. In your code you remove values from the second vector if adding it to the first leaving the second vector populated with the duplicates. However you seem only really interested in the (no-longer)global vector. If you don't need the vectors of duplicates then you can greatly simplify your code.</p>

<p>Switch to an <a href="https://en.cppreference.com/w/cpp/container/map" rel="nofollow noreferrer"><code>std::map</code></a> and set the keys to the element.id. This will keep your collection sorted and make merging non-duplicates fantastically easy. (this assumes elements that share an id are implicitly duplicate. Before you insert the new elements into the map test to see if they exist in the old one and update_max_bmi accordingly.</p>

<pre><code>void update_list_v2(std::map&lt;int, element&gt;&amp; lhs, std::map&lt;int, element&gt;&amp; rhs)
{
    for (auto&amp; elem : rhs)
    {
        if (lhs.count(elem.first)) // checks if the key from new data exists in the old data
        {
            update_bmi(elem.second, lhs[elem.first]);
        }
        lhs.insert(elem);
    }
}
</code></pre>

<p>*Note I passed both containers to the function and used the more common convention of naming them lhs (left-hand side) and rhs (right-hand side).</p>

<hr>

<p>Putting it all together (using @Edward's aggregate initialization) it will look something like this:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;

struct element
{
    int id;
    std::string name;
    int bmi;
    int max_bmi;
};

bool operator==(const element&amp; lhs, const element&amp; rhs) { return (lhs.id == rhs.id) &amp;&amp; (lhs.name == rhs.name); }
bool operator!=(const element&amp; lhs, const element&amp; rhs) { return !operator==(lhs, rhs); }
bool operator&lt; (const element&amp; lhs, const element&amp; rhs) { return lhs.id &lt; rhs.id; }
bool operator&gt; (const element&amp; lhs, const element&amp; rhs) { return operator&lt; (rhs, lhs); }
bool operator&lt;=(const element&amp; lhs, const element&amp; rhs) { return !operator&gt; (lhs, rhs); }
bool operator&gt;=(const element&amp; lhs, const element&amp; rhs) { return !operator&lt; (lhs, rhs); }

void update_bmi(element&amp; lhs, element&amp; rhs) {
    lhs.max_bmi = std::max(lhs.max_bmi, rhs.bmi);
}

void print(const element&amp; elem) {
    std::cout &lt;&lt; elem.id &lt;&lt; elem.name &lt;&lt; elem.bmi &lt;&lt; elem.max_bmi &lt;&lt; '\n';
}

void print_list(const std::map&lt;int, element&gt;&amp; vec) {
    for (auto&amp; elem : vec) {
        print(elem.second);
    }
}

void update_list_v2(std::map&lt;int, element&gt;&amp; lhs, std::map&lt;int, element&gt;&amp; rhs)
{
    for (auto&amp; elem : rhs)
    {
        if (lhs.count(elem.first)) // checks if the key from new data exists in the old data
        {
            update_bmi(elem.second, lhs[elem.first]);
        }
        lhs.insert(elem);
    }
}

int main()
{
    std::map&lt;int, element&gt; a = {
        { 12, { 12, "a", 12 } },
        { 11, { 11, "b", 11 } },
        { 13, { 13, "c", 13 } },
        { 5, { 5, "d", 5 } },
        { 6, { 6, "e", 6 } },
        { 7, { 7, "f", 7 } }
    };
    std::map&lt;int, element&gt; b ={
        { 12, {12, "a", 20} },
        { 1, { 1, "x", 5 } },
        { 13, { 13, "c", 5 } },
        { 5, { 5, "d", 10 } },
        { 6, { 6, "e", 6 } },
        { 99, { 99, "y", 5 } }
    };

    update_list_v2(a, b);
    print_list(a);
}
</code></pre>
    </div>