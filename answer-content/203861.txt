<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Your implementations</strong></p>

<p>Your <code>toggle-doors</code> functions are slower than they need be. Let's look at the first one: </p>

<pre><code>(defn- toggle-doors
  "Toggles the state of every nth door."
  [doors every-n]
  (mapv #(if (multiple-of? % every-n)
           (not %2)
           %2)
        (oneth-range), doors))
</code></pre>

<p>This knocks on every one of the <code>doors</code>, flipping its state only if its number divides by <code>every-n</code>. So the <code>toggle-doors-for</code> function does <code>max-n * max-n</code> door knocks in all. </p>

<p>A better way to <code>toggle-doors</code> is to knock only on the doors that need toggling:</p>

<pre><code>(defn toggle-doors [doors every-n]
  (reduce (fn [ds i] (assoc ds i (not (ds i))))
          doors
          (range (dec every-n) (count doors) every-n)))
</code></pre>

<p>(I've changed <code>defn-</code> to <code>defn</code> to be able to exercise the function from the REPL.)</p>

<p>This knocks on about <code>1 / every-n</code> of the doors. So the number or knocks in <code>toggle-doors-for</code> is now roughly</p>

<pre><code>max-n * (1 / 1 + 1 / 2 + ... 1 / max-n)
</code></pre>

<p>... which, according to <a href="https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)#Rate_of_divergence" rel="nofollow noreferrer">this</a>, is about</p>

<pre><code>max-n * ln (max-n)
</code></pre>

<p>This is like the improvement from bubble-sort to quick-sort. On this basis, for a <code>max-n</code> of 100, </p>

<ul>
<li>your version does 10,000 knocks;</li>
<li>mine does about 460 (482, in fact).</li>
</ul>

<p>So mine is roughly 20 times as fast as yours. </p>

<p><strong>My preferred approach</strong></p>

<p>We are looking for the doors that are hit an odd number of times by an open/close event. We can find these as follows:</p>

<pre><code>(defn hundred-doors []
  (let [steps (range 1 101)
        hits (fn [step] (range step 101 step))
        changes (mapcat hits steps)
        change-counts (frequencies changes)
        opens (filter (comp odd? val) change-counts)]
        (sort (map key opens))))

   (hundred-doors)       
=&gt; (1 4 9 16 25 36 49 64 81 100)
</code></pre>

<p>Taking each line in turn ...</p>

<ul>
<li><code>steps</code> is the range of intervals for the passes through the doors;</li>
<li><code>hits</code> returns the sequence of doors hit by the pass with the given step;</li>
<li><code>changes</code> is the whole sequence of door hits;</li>
<li><code>change-counts</code> maps each door to the number of hits it gets;</li>
<li><code>opens</code> filters the map entries for oddness of number of hits.</li>
</ul>

<p>The answer is the keys of the <code>opens</code> entries, sorted for display.</p>

<p>You can abbreviate this cascade of computations using the <code>-&gt;&gt;</code> threading macro:</p>

<pre><code>(defn hundred-doors []
  (-&gt;&gt; (range 1 101)
        (mapcat (fn [step] (range step 101 step)))
        (frequencies)
        (filter (comp odd? val))
        (map key)
        (sort)))
</code></pre>

<hr>

<p>Despite appearances, this is not so different from your solution. </p>

<ul>
<li>It turns the sequence of door hits into an explicit data structure.</li>
<li>A hit, instead of flipping the state of a door, increments its hit-count.</li>
</ul>
    </div>