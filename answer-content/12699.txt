<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't really help you with the performance bit, only tell you to wrap them in <code>microtime()</code> tags and see which one performs better for you. Systems are slightly different. The one suggestion I can give you is to remove <code>array_keys()</code> from your code.</p>

<p><strong>!!UPDATE!!</strong></p>

<p>If you were following Corbin and my argument below, then I finally have an answer for you. I was getting for and foreach confused. For and while loops <strong>do</strong> call any functions passed in as arguments on every iteration, foreach <strong>does not</strong>. Which is why its better to call functions such as <code>strlen()</code> and <code>count()</code>, just to give a couple of examples, outside of a for or while loop. The overhead we were experiencing was not from foreach but from <code>array_keys()</code>. When <code>array_keys()</code> is called it must generate a new array, which is why it is almost twice as slow. So it is best to drop the <code>array_keys()</code> function all-together and just iterate over the array and retrieve the key value pair. Sorry for any confusion this may have caused.</p>

<p>Sources:</p>

<ul>
<li><a href="http://www.phpbench.com/" rel="nofollow noreferrer">http://www.phpbench.com/</a></li>
<li><a href="https://stackoverflow.com/questions/3430194/performance-of-for-vs-foreach-in-php">https://stackoverflow.com/questions/3430194/performance-of-for-vs-foreach-in-php</a></li>
<li><a href="https://stackoverflow.com/questions/1740575/php5-does-the-copy-of-an-array-for-a-foreach-incur-overhead">https://stackoverflow.com/questions/1740575/php5-does-the-copy-of-an-array-for-a-foreach-incur-overhead</a></li>
</ul>

<p><strong>!!END OF UPDATE!!</strong></p>

<p>To the best of my knowledge there is no security risk with any of those implementations. You are iterating a construct that already exists. Any security issues would have happened before this point. Except of course if you are using user supplied data, such as GET and POST. These you should sanitize and validate before using, which is something you could do with one of those foreach loops. Or you could also check out <a href="http://php.net/manual/en/function.filter-input-array.php" rel="nofollow noreferrer"><code>filter_input_array()</code></a> and its cousins.</p>

<p>I know I personally would not use the second implementation due to the lack of legibility. At least with the first and third implementations you can visually see that a value is being changed. The second is not readily obvious. However, it is most likely the more efficient. I have used both the first and third myself, but more often use the third. Think it has to do with what mood I'm in. Hope this helps, I'm interested to hear what others might have to say :)</p>
    </div>