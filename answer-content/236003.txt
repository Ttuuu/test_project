<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've actually run into a big gotcha here. Scheme doesn't actually specify the order to evaluate operands. This can be a problem for code with side effects, especially if you aren't careful to encapsulate the order you expect explicitly. Any time you see an exclamation mark at the end of the function, pay attention to ensure a correct and defined semantic order. </p>

<pre><code>(define (pop-print)
  (display (stack-pop! stack))
  (newline))
</code></pre>

<p>Something like this is fine, as <code>(define ...)</code> creates an implicit <code>begin</code> in the syntax. <code>(define (x a) (zig a) (zag b))</code> gets transformed into something closer to <code>(let ((x (lambda (a) (begin (zig a) (zig b))</code>. <code>cond</code> has a similar effect.</p>

<p>However ...</p>

<pre><code>(define (add)
  (stack-push! stack
           (+ (stack-pop! stack)
          (stack-pop! stack))))
</code></pre>

<p>is also fine, because order doesn't matter, but we aren't sure which <code>pop</code> will get its number first. Divide and subtract may randomly behave incorrectly, especially on different Scheme implementations. </p>

<p>Your swap is so close though, but to be right it would have needed to use a <code>begin</code> and a <code>let*</code> instead of the normal <code>let</code>. The Star version behaves as if you explicitly nested each sequential binding, whereas <code>let</code> is allowed to make bindings in any order. <code>begin</code> likewise forces text-order sequential evaluation.</p>

<pre><code>(define (swap)
  (let* ((first (stack-pop! stack))
         (second (stack-pop! stack)))
    (begin (stack-push! stack first)
           (stack-push! stack second))))
</code></pre>

<p>Here's a method of forcing order via nested lambda notation, as every time you invoke a function, you're creating a new binding environment. </p>

<pre><code>(define (two-args f) ;takes a function as an argument
 (lambda () ;explicitly return a function of zero arguments
   ((lambda (x) 
            ((lambda (y) 
                     (stack-push! stack (f y x))) 
                                  ; the deeper term has priority
             (stack-pop! stack))
    (stack-pop! stack))
</code></pre>

<p>And then define the functions in terms of above</p>

<pre><code>(define add      (two-args +))
(define subtract (two-args -))
(define multiply (two-args *))
(define divide   (two-args /))
</code></pre>

<p>And a little trickier</p>

<pre><code>(define swap     
  (two-args (lambda (y x)(begin (stack-push! stack x)
                                y))
</code></pre>

<p>Why are you initializing the <code>words</code> hash table every time though the <code>repl</code>? You could initialize it at creation like so...</p>

<pre><code>(define words 
  (let ((temp (make-hash-table))
    (begin  
      (hash-table-set! temp "bye" '(quit))
      ...
      temp)))
</code></pre>

<p>As for the exception handler, I can't comment as I don't know that much about them in Scheme.</p>
    </div>