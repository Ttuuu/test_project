<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Unused Imports</h2>

<p>You've imported <code>threading</code>, but you are not using it anywhere in this module.</p>

<h2>Dunder</h2>

<p>Dunder, or double-underscore, members have special meaning in Python.  Specifically, the Python interpreter does a form of name-mangling, to prevent member names defined in the parent class from colliding with member names defined in a derived class.  This also prevents the derived class from accessing members defined in the parent class.  I doubt this is what you were intending here.  Avoid creating your own double underscores members.</p>

<h2>Class Variables</h2>

<p>Java lets you initialize member variables outside the constructor; Python does not.  What you are doing is ugly, dangerous, and will bite you down the road.</p>

<pre><code>class IntCoder:

    _memory = []                 # Class member
    _pointer = 0                 # Class member
    _relative_base = 0           # Class member

    def __init__(self, memory: List[int]):
        self._memory = memory    # Instance member
</code></pre>

<p>This code creates 3 class member variables (Ie, <code>static</code> in Java terminology), and then the <code>IntCoder()</code> constructor creates one instance member, shadowing the first class member.</p>

<p>When Python looks up <code>self.member</code>, it first looks in the <code>self</code> object's dictionary for <code>member</code>.  If that fails, it will also look in the class's dictionary.  Assignments to <code>self.member</code> will always create <code>member</code> in the object instance.</p>

<p>Now consider:</p>

<pre><code>    self._pointer += 4
</code></pre>

<p>If <code>_pointer</code> is defined in the instance object, this is interpreted as:</p>

<pre><code>    self._pointer = self._pointer + 4
</code></pre>

<p>If <code>_pointer</code> is not defined in the instance object, but exists in the class, this is interpreted as looking up the class member, and creating the instance member:</p>

<pre><code>    self._pointer = IntCoder._pointer + 4
</code></pre>

<p>Yikes!  Mutating code interpretation!</p>

<p>You really want each <code>IntCoder</code> to have its own, independent state, so they each should create their own instance members in the constructor:</p>

<pre><code>class IntCoder:

    def __init__(self, memory: List[int]):
        self._memory = memory 
        self._pointer = 0      
        self._relative_base = 0
</code></pre>

<h2>Pointer Management</h2>

<p>These next few items all go together ...</p>

<h3><code>self.read_pointer()</code></h3>

<p>Never called.  Why is this here?</p>

<h3><code>instruction</code> fetching</h3>

<pre><code>    instruction = self._memory[self.__pointer]
</code></pre>

<p>Looks like that could have been <code>instruction = self.read_pointer()</code>.  But ...</p>

<h3>Separation of concerns</h3>

<pre><code>    def __add(self, first, second, result):
        self._memory[result] = first + second
        self.__pointer += 4
</code></pre>

<p>Whoa, whoa, hold the phone.  Ok, I understand you are adding the values <code>first</code> and <code>second</code> together, and storing the result in memory at address <code>result</code>.  But where the heck did that <code>self.__pointer += 4</code> come from?  And why 4?</p>

<pre><code>        if opcode == 1:
            self.__add(self.__val(self.__pointer + 1, mode1), self.__val(self.__pointer + 2, mode2), self.__index(self.__pointer + 3, mode3))
</code></pre>

<p>Ok, looking back, we can see that we got a value using from <code>self._pointer + 1</code>, a second value using <code>self._pointer + 2</code>, and use <code>self._pointer + 3</code> to get the address to store the result.  So that explains 3 of the increment of 4...</p>

<pre><code>        instruction = self._memory[self.__pointer]
</code></pre>

<p>Oh ya, and the instruction itself in the 4th value.</p>

<p>What is the <code>IntCoder</code> really doing?  It is:</p>

<ol>
<li>Fetching the opcode</li>
<li>Fetching the first operand, or index to it</li>
<li>Fetching the second operand, or index to it</li>
<li>Fetching the destination address or index</li>
</ol>

<p>Or, to summarize, it is fetching, ... and implicit in the fetch is an increment of the pointer.</p>

<pre><code>    def _fetch(self):
        value = self._memory[self._pointer]
        self._pointer += 1
        return value
</code></pre>

<p>Now you can use:</p>

<pre><code>        instruction = self._fetch()
</code></pre>

<p>and know that if you called <code>_fetch()</code> again, the next value would be read, and then the next, and the next.  No need to externally code <code>self._pointer += 1</code> anymore.  Let's do the same for <code>_val()</code>:</p>

<pre><code>    def _val(self, mode):
        index = self._fetch()
        if mode == 0:
            return self._memory[index]
        if mode == 1:
            return index
        if mode == 2:
            return self._memory[index + self._relative_base]
        raise ValueError(f"Unknown parameter mode {mode}")
</code></pre>

<p><strong>Note</strong>: Python 3.6 introduced f-strings, which allow you to embed variables right in strings, rather than needing <code>.format(...)</code></p>

<p>If you also added the <code>_fetch()</code> to <code>_index</code>, you'd could now write:</p>

<pre><code>        if opcode == 1:
            self._add(self._val(mode1), self._val(mode2), self._index(mode3))
</code></pre>

<p>and</p>

<pre><code>    def _add(self, first, second, result):
        self._memory[result] = first + second
</code></pre>

<h2>Decoding Instructions</h2>

<p>A large chain of <code>if opcode == 0:  elif opcode == 1:  elif opcode == 2:  elif opcode == 3: ...</code> is an indication of doing something wrong, or at least the non-Pythonic way.</p>

<p>Methods are first class objects in Python, and can be used as values and stored in containers.  Which means you can use a dictionary to decode and dispatch based on the opcode:</p>

<pre><code>class IntCoder:

    def __init__(self):
        self._opcodes = { 1: self._add,
                          2: self._mul,
                          3: self._in,
                          ...
                        }

    def _step(self):
        instruction = self._fetch()
        opcode = instruction % 100
        mode1 = (instruction // 100) % 10
        mode2 = (instruction // 1000) % 10
        mode3 = instruction // 10000

        try:
            self._opcodes[opcode](mode1, mode2, mode3)
        except KeyError:
            raise ValueError('Unknown opcode {opcode} in instruction {instruction-1}')

    def _add(self, mode1, mode2, mode3):
        a = self._val(mode1)
        b = self._val(mode2)
        dst = self._index(mode3)
        self._memory[dst] = a + b

    def _in(self, mode1, mode2, mode3):
        index = self._index(mode1)
        self._memory[index] = self.get_input()
</code></pre>

<p>Note we've changed thing a bit.  The responsibility for fetching the values to add, and the destination to store the results into has moved into the individual functions.  Additionally, we are passing unnecessary information to the <code>_in()</code> method; it doesn't need the <code>mode2</code> and <code>mode3</code> values, but it needs those arguments since with this dispatch method, all the methods have to use a common parameter list.</p>

<h2>Iterators</h2>

<p>The following is creating and storing a generator expression, to walk through the list of values, returning the values one at a time:</p>

<pre><code>self.input_values = (n for n in input_values)
</code></pre>

<p>Internally, <code>for n in input_values</code> is walking through <code>input_values</code>, return each value one at a time.  It works because <code>input_values</code> is an iterable.  We can retrieve an iterator for that iterable object and use that directly.</p>

<pre><code>self.input_values = iter(input_values)
</code></pre>

<p>Then you could pass in any <code>input_values: Iterable[int]</code>, instead of just lists.</p>
    </div>