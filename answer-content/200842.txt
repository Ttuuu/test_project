<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2><code>bool</code> is not <code>int</code></h2>

<p>The <code>bool</code> type is a full-fledged first class type in C++.  If I were an interviewer reading this code, I'd be perplexed:</p>

<pre><code>bool res = areAnagrams(str1, str2);
if (res == 1)
{
    std::cout &lt;&lt; "Strings are anagram\n";
}
else
{
    std::cout &lt;&lt; "Strings are not anagram\n";
}
</code></pre>

<p>A similar thing is being done here:</p>

<pre><code>if (str1.compare(str2) == 0)
{
    return true;
}
else
{
    return false;
}
</code></pre>

<p>First, we are comparing a <code>bool</code> to <code>1</code> (an <code>int</code>) which is odd enough.  Next, if we're returning the result of the comparison, why don't we <em>return the result of the comparison</em>?</p>

<pre><code>return !str1.compare(str2);
</code></pre>

<p>Better still:</p>

<pre><code>return str1 == str2;
</code></pre>

<h2>Understand references</h2>

<p>The prototype of the <code>toLower</code> function is this:</p>

<pre><code>std::string toLower(std::string str);
bool areAnagrams(std::string&amp; str1, std::string&amp; str2);
</code></pre>

<p>So reading this, the <code>toLower</code> makes a <em>copy</em> of its argument and <code>areAnagrams</code> uses references.  However, the first few lines of the latter function are these:</p>

<pre><code>str1 = toLower(str1);
str2 = toLower(str2);
</code></pre>

<p>There's little point to making copies and then assigning the copy back to the original.  What I would recommend instead is to have <code>toLower</code> take a reference and <code>areAnagrams</code> pass by value.  That way, we have a much more logical interface in which <code>toLower</code> modifies the passed string but <code>areAnagrams</code> does not.</p>

<h2>Use <code>auto</code> to simplify code</h2>

<p>The better choice for <code>res</code> in <code>main</code> would be to declare it <code>auto</code> instead of explicitly naming <code>bool</code>.</p>

<h2>Consider the use of <code>locale</code></h2>

<p>Rather than writing your own <code>toLower</code>, why not use the one in <code>&lt;locale&gt;</code>?  Here's how that might look:</p>

<pre><code>auto&amp; facet{std::use_facet&lt;std::ctype&lt;char&gt;&gt;(std::locale())};
facet.tolower(&amp;str1.front(), &amp;str1.back());
facet.tolower(&amp;str2.front(), &amp;str2.back());
</code></pre>

<h2>Use better naming</h2>

<p>The function <code>toLower</code> is a good name because (with the suggested change mentioned above) it says what it actually does.  However, <code>res</code> is not a good name and it's not necessary to have a separate variable anyway.  Instead of this strange construction:</p>

<pre><code>bool res = areAnagrams(str1, str2);
if (res == 1)
{
    std::cout &lt;&lt; "Strings are anagram\n";
}
else
{
    std::cout &lt;&lt; "Strings are not anagram\n";
}
</code></pre>

<p>I would probably instead have written this:</p>

<pre><code>std::cout &lt;&lt; "Strings " &lt;&lt; (areAnagrams(str1, str2) ? "are" : "are not")
          &lt;&lt;  " anagrams\n";
</code></pre>

<p>Although, as @TobySpeight points out in a comment, better for the purposes of translating the string into another language would be to keep the strings intact.  One way to do that:</p>

<pre><code>std::cout &lt;&lt; (areAnagrams(str1, str2) ? "Strings are anagrams\n"
                  : "Strings are not anagrams\n");
</code></pre>

<h2>Declare variables each on a separate line</h2>

<p>Clarify variable declaration by declaring each one on a single line. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-name-one" rel="nofollow noreferrer">Guideline ES.10</a></p>

<h2>Consider namespace or <code>static</code></h2>

<p>During an interview, I'd probably ask why you chose not to encapsulate the functions in a namespace, and why the functions are not <code>static</code>.  There are arguments both ways for each of those; be aware of what they are and be able to explain and defend your choices.</p>
    </div>