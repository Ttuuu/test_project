<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How about extracting tasks common to all source types into an (abstract) base class that, in turn, implements your ISyncer interface?</p>

<p>I would also change the error reporting by using exceptions, rather than have the method return a string in case of error.</p>

<p>Edit, code example (C#-ish pseudo code)</p>

<pre><code>abstract class SyncerBase : ISyncer
{
    sealed List&lt;T&gt; Map(List source, List target)
    {
        // Mapping magic here
    }

    sealed SaveToDB(List dataToSave, params ...)
    {
        // Your database access here
    }
}
</code></pre>

<p>Put utility methods and common stuff for all your synchronizers in that base class, and inherit it.</p>

<pre><code>class StundentSyncer : SyncerBase
{
    // Constructor as in your code
    void Sync(string file)
    {
        var XMLstudents = _reader.ReadAll();
        var students = Map(XMLstudents); // calling base class here!
        // Manipulate student list here as needed
       SaveToDB (students, database params here) // base class here, too
    }
}
</code></pre>
    </div>