<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With regard to the academic solution, perhaps they were referring to things like you would see in an assignment such as line lengths, appropriate naming and use of visibility modifiers, no compilation errors, etc.</p>

<ul>
<li>I feel your javadocs could have been better, equally there are <code>@params</code> that have no detail about the expected parameter such as in the <code>add(E element)</code> and <code>addAtBegin(E element)</code> methods.</li>
<li>There were a few places where you should have used generics such as the <code>addAll(int index, CustomDoubleLinkedList list)</code> method should have been <code>public void addAll(int index, CustomDoubleLinkedList&lt;? extends E&gt; list)</code></li>
</ul>

<p>There were a few improvements you could make to the unit tests as well. While it looks like the code coverage is 90%, there are lots of edge cases and subtleties that aren't clear and the unit tests tell as much about what you can do with a class as what you can't do with it.</p>

<ul>
<li>You are mixing jUnit 4 and 5

<ul>
<li><code>org.junit.Assert.assertEquals</code> is jUnit 4, while</li>
<li><code>org.junit.jupiter.api.Assertions.assertThrows</code> is jUnit 5.</li>
</ul></li>
<li>If you are using jUnit 5 the <code>public</code> is not required for each method. It was excluded for the class but not the tests.</li>
<li>You didn't use the <code>&lt;&gt;</code> operator on any of the instantiations of the <code>CustomDoubleLinkedList</code>.</li>
<li>Ideally you should have one assert per method.

<ul>
<li>This isn't a hard and fast rule but for testing a method like <code>isEmpty()</code> it may be preferable. </li>
<li>If the list should return true to <code>isEmpty()</code> once everything has been removed, a test should assert that.</li>
</ul></li>
</ul>

<pre class="lang-java prettyprint-override"><code>@Test
public void isEmpty() {
    strList = new CustomDoubleLinkedList();

    assertEquals(true, strList.isEmpty());
    strList.add("pos 0");
    assertEquals(false, strList.isEmpty());

}
</code></pre>

<p>could become something more like the below</p>

<pre class="lang-java prettyprint-override"><code>@Test
public void emptyListReturnsTrueOnIsEmpty() {
    strList = new CustomDoubleLinkedList();
    assertTrue(strList.isEmpty());
}

@Test
public void nonEmptyListReturnsFalseOnIsEmpty() {
    strList = new CustomDoubleLinkedList();
    strList.add("pos 0");
    assertFalse(strList.isEmpty());
}

@Test
public void addedToAndRemovedFromListReturnsTrueOnIsEmpty() {
    strList = new CustomDoubleLinkedList();
    strList.add("pos 0");
    strList.remove("pos 0");
    assertTrue(strList.isEmpty());
}
</code></pre>

<p>While you have said you were asked not to implement Java Collections, the Deque interface <code>getFirst()</code> method says you should throw a no such element exception if the deque is empty. This test throws a null pointer instead</p>

<pre><code>@Test
public void test() {
    strList = new CustomDoubleLinkedList&lt;&gt;();
    strList.getFirst();
}
</code></pre>
    </div>