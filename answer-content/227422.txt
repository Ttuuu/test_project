<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>GetHashCode</code> will mostly be used in collections using hash tables internally, like dictionaries or hash sets. If you know that you are only going to test for equality, it is safe to not implement <code>GetHashCode</code>.</p>

<ul>
<li><p>Instead of letting the projector return a list of values, better store a list of accessor delegates. If you create a list of values, this list will have to be created each time you are comparing values. Accessors are created once.</p></li>
<li><p><code>Private Sub New()</code> cannot be called from outside the class. No need to throw an exception. You can even drop it completely, because when you provide any other constructor with parameters, the default constructor (i.e. the constructor without parameters) will not be generated by VB.</p></li>
<li><p>Calling <code>GetHashCode</code> on a list, only gets a hash code for the list object, without considering the list entries. We must calculate a combined hash code ourselves.</p></li>
<li><p>Our comparer will be more generic, if we don't assume the values to be of type <code>String</code> and instead operate on <code>Object</code>.</p></li>
</ul>

<p>My suggestion:</p>

<pre><code>Public Class ValuesEqualityComparer(Of T)
    Implements IEqualityComparer(Of T)

    ReadOnly _valueAcessors As IList(Of Func(Of T, Object))

    ' We can drop the parameter-less constructor. The other one replaces this one. 
    ' Now, you must provide a an argument for New.
    'Private Sub New()
    'End Sub

    Public Sub New(valueAcessors As IList(Of Func(Of T, Object)))
        _valueAcessors = valueAcessors
    End Sub

    Public Overloads Function Equals(x As T, y As T) As Boolean _
        Implements IEqualityComparer(Of T).Equals

        Return _valueAcessors.All(Function(v) Object.Equals(v(x), v(y)))
    End Function

    Public Overloads Function GetHashCode(obj As T) As Integer _
        Implements IEqualityComparer(Of T).GetHashCode

        Dim hash As Integer = 17
        For Each v In _valueAcessors
            hash = hash * 23 + If(v(obj), 0).GetHashCode()
        Next
        Return hash
    End Function
End Class
</code></pre>

<p>You would create a comparer like this</p>

<pre><code>Dim comparer = New ValuesEqualityComparer(Of TestClass)(
    {Function(x) x.Id,
     Function(x) x.Name})
</code></pre>

<p>Note, <code>IList</code> is compatible with arrays and <code>List(Of T)</code>. I am using an array literal here. See also: <a href="https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable" rel="nofollow noreferrer">How to: Initialize an Array Variable in Visual Basic</a></p>
    </div>