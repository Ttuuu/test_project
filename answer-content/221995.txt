<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At first: well done, your code quality is already at a high level!
Here are some remarks that you could integrate besides the class approach mentioned before.</p>

<h3>The <code>assert</code> statement works only if python is in debug mode</h3>

<p>It's not running when you interpret it with optimization flags, see <a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" rel="nofollow noreferrer">officialdocs</a>. It is meant as a debug tool that helps tracking down bugs. For your purpose of validation I'd suggest implementing a custom function that raises an exception manually.</p>

<h3>The <code>assert</code> statements are scattered in every function</h3>

<p>This makes it unnecessarily harder to understand what the function actually does. I recommend either factoring out the asserts, or, and that's what I'd prefer, do in two steps: First do syntax check of the id, meaning a check if the format is correct. Then do all your processing. And second, after the processing, you do a logical check of the data, meaning if the syntactically correct string contained actually meaningful data.</p>

<h3>The naming of the functions appears inconsistent</h3>

<p>In <code>extract_info_from_national_id()</code> it reads:</p>

<pre><code>info['birth_century'] = extract_birth_century(int(national_id_str[0]))
info['date_of_birth'] = convert_birthdate(national_id_str[0:7])
info['birth_governorate'] = get_birth_governorate(national_id_str[7:9])
info['sequence_in_computer'] = national_id_str[9:13]
info['gender'] = get_gender(int(national_id_str[12]))
</code></pre>

<p>So every function is meant to convert a string into something more meaningful, which makes me expect a standardized naming pattern. I'd probably stick to <code>get_something()</code>.</p>

<h3>You can build a string splitter</h3>

<p>In <code>extract_info_from_national_id()</code> you do the string splitting. That mixes different levels of abstraction. One could go for a simple function <code>split_enid</code> that returns a dictionary or a named tuple, which holds the different substrings, but nicely accessible by name. Once done, you can use it like this:</p>

<pre><code>enid_strs = splid_enid(notional_id)
info['birth_century'] = get_birth_century(enid_strs.birth_century)
info['date_of_birth'] = convert_birthdate(enid_strs.birthdate)
info['birth_governorate'] = get_birth_governorate(splitted_enid.governorate)
...
</code></pre>

<p>Keep going, I like your code!</p>
    </div>