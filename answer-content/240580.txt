<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Const initializers</h2>

<p>In your constructor:</p>

<pre><code>Row(std::string _name, long LC)
</code></pre>

<p><code>_name</code> would be better-represented by a <code>const std::string &amp;_name</code>.</p>

<p>Similarly,</p>

<pre><code>process_imp(std::vector&lt;std::string&gt; statement)
</code></pre>

<p>should be</p>

<pre><code>process_imp(const std::vector&lt;std::string&gt; &amp;statement)
</code></pre>

<h2><code>getNumber</code></h2>

<p>This has a C twang. C++ is able to do all of this for you.</p>

<p>First of all, if you wanted to keep it mostly as-is, do not use the ASCII code 48 directly; simply write <code>'0'</code>. That said,</p>

<ul>
<li>You should use something like <code>atoi</code>, though <code>atoi</code> itself does not support error detection, so this is ruled out. <code>atol</code> has similar issues.</li>
<li><code>sscanf</code> would work but is a C-ism.</li>
<li><code>istringstream</code> would do what you want.</li>
</ul>

<h2>string comparison</h2>

<pre><code>statement.front() == std::string("LTORG")
</code></pre>

<p>does not need to construct a string on the right-hand side; simply compare the string literal, and the left-hand side's overloaded <code>==</code> will do the right thing.</p>

<h2>enums</h2>

<pre><code>//find the type of statement
unsigned short type = 0;
</code></pre>

<p>should be using an <code>enum</code> to capture the different possible types.</p>
    </div>