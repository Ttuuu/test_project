<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thank you for the great question and the great review @Peilonrayz ! Don't have much to criticize, only a few things which I would personally change. It's my first heap implementation, so please double check my suggestions...</p>

<ul>
<li>Getting the parent/child is a bit of magic numbering, maybe put that into a separate function</li>
<li>Both in heapify/inv_heapify the words child and parent exist. However, if I'm not mistaken, one really focuses on the current node + its children, the other one on the current node + its parents. </li>
<li>A line such as "child+=1" seems a bit weird to me. "idx_child+=1" seems cleaner</li>
<li>Are the words heapify / inv_heapify chosen correctly here? Wikipedia states that "heapify: create a heap out of given array of elements". Thus, I would expect an array as function input. Instead, it receives an index...</li>
<li>While the function name "compare" seems common (e.g. std::string::compare()), I like to name boolean returning functions with a "has" or "is" prefix. In a case of maxheap we could name it "is_bigger_than" (similar to operator.gt = "greater than", but could be custom function)</li>
</ul>

<p>Putting everything together...:</p>

<pre><code>class Heap:
    def __init__(self):
        self.lst = []
        self.is_bigger_than = operator.gt

    def add(self, x):
        self.lst.append(x)
        idx_node = len(self.lst) - 1
        self._siftup(idx_node)

    def pop(self):
        if len(self.lst) == 0:
            print("Error: Heap empty!")
        else:
            lst = self.lst
            lst[0], lst[-1] = lst[-1], lst[0]  # switch first with last element
            res = lst.pop()  # pop last element
            self._siftdown(0)
            return res

    def _siftup(self, inode):
        lst = self.lst
        iparent = self._get_parent(inode)
        if iparent &gt;= 0 and self.is_bigger_than(lst[inode], lst[iparent]):
            lst[inode], lst[iparent] = lst[iparent], lst[inode]
            self._siftup(iparent)

    def _siftdown(self, inode):
        lst = self.lst
        ichildren = self._get_children(inode)
        for ichild in ichildren:  # do I need to sift down
            if ichild &lt; len(lst) and self.is_bigger_than(lst[ichild], lst[inode]):
                lst[ichild], lst[inode] = lst[inode], lst[ichild]
                self._siftdown(ichild)

    def _get_parent(self, idx_child):
        idx_parent = int((idx_child - 1) / 2)  # zero-based array
        return idx_parent

    def _get_children(self, idx_parent):
        idx_children = 2 * idx_parent + 1, 2 * idx_parent + 2
        return idx_children
</code></pre>
    </div>