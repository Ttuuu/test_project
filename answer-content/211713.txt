<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a lot of <a href="https://en.wikipedia.org/wiki/Primality_test" rel="nofollow noreferrer">primality tests</a> out there. Calculating all factors and then checking the length of that list to be 2 is one of the slower ones.</p>

<p>A faster one is just to test if any number smaller than <span class="math-container">\$\sqrt{n}\$</span> divides the number evenly. If it does, the number is not prime and you can move on to the next number:</p>

<pre><code>from math import sqrt

def is_prime(n):
    if n in (2, 3, 5, 7, 11):  # special case small primes
        return True
    if n % 2 == 0 or n == 1:  # special case even numbers and 1
        return False
    for i in range(3, int(sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True
</code></pre>

<p>Then you can get all numbers starting with <code>num</code> using <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> and skip all which are not prime using <code>filter</code>:</p>

<pre><code>from itertools import count

if __name__ == "__main__":
    num = int(input())
    next_prime = next(filter(is_prime, count(num)))
    print(next_prime)
</code></pre>

<p>For the upper bound of <span class="math-container">\$2\cdot 10^9\$</span> given in the problem statement this takes about 2ms on my machine.</p>

<p>If this was not fast enough you could first have run a probabilistic test like <a href="https://en.wikipedia.org/wiki/Primality_test#Miller%E2%80%93Rabin_and_Solovay%E2%80%93Strassen_primality_test" rel="nofollow noreferrer">Miller-Rabin</a> to weed out some composite numbers and only run this for the once passing it.</p>
    </div>