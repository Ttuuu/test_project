<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/237875/100620">Torben Putkonen's answer</a> is good, but it still has some flaws.</p>

<p>If <code>stringBuilder.length() == 199</code>, and you add message with string length 53, then the string length with become <code>199 + 1 + 53 == 253 &lt; MAX_CAPACITY</code>.  Now you have a problem.  If you add another string, say length 50, you exceed the capacity and set <code>errorsDropped = true;</code>.</p>

<p>Now, when <code>toString()</code> is called, the <code>stringBuilder().toString() + ",..."</code> is returned, which is 257 characters!  This is too big for the "RDBMS TABLE.COLUMN with MAX length of 255".</p>

<p>There are two approaches you can take:</p>

<ol>
<li>Limit the accumulation length to 251 characters (255 less the 4 characters in <code>",..."</code>)</li>
<li>Allow the accumulation length to reach 255 characters, but remove the last message(s) if insufficient room exists to add <code>",..."</code> when necessary.</li>
</ol>

<p>Demonstrating approach #2, incorporating Torben's <code>private static final</code> members &amp; removal of redundant fields.  <em>Note</em>: Assumes the error messages themselves have no embedded commas.</p>

<pre><code>public class ErrorCodeStringBuilder {

    private static final int MAX_CAPACITY = 255;
    private static final String ELLIPSES = "...";

    private StringBuilder stringBuilder = new StringBuilder(20);
    private boolean overflow = false;

    public void append(String str) {
        if (!overflow) {
            if (stringBuilder.length() &gt; 0)
                stringBuilder.append(',');

            stringBuilder.append(str);

            int length = stringBuilder.length();
            if (length &gt; MAX_CAPACITY) {
                int last_comma = stringBuilder.lastIndexOf(",", MAX_CAPACITY - ELLIPSES.length());
                stringBuilder.replace(last_comma + 1, length, ELLIPSES);
                overflow = true;
            }
        }
    }

    @Override
    public String toString() {
       return stringBuilder.toString();
    }
}
</code></pre>

<p>Using <code>.lastIndexOf(",", MAX_CAPACITY - ELLIPSES.length())</code> ensures we find a comma at position 252 or earlier.  If the second last message ends at 253, and another message is added with a comma at position 254, an earlier comma will be found, and the these last two messages are replaced with the ellipses.</p>

<p><em>Bonus</em>: This even handles the edge case of the first string longer than 252 characters.  If the first string is 300 characters, then <code>last_comma</code> will become <code>-1</code> (not found), and <code>.replace(last_comma + 1, length, ELLIPSES)</code> will replace starting from index 0 ... which is the entire string.</p>
    </div>