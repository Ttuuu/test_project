<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    // Exceptional case for 0 and 1
    sieve[0] = false;
    sieve[1] = false;
</code></pre>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/KISS_principle" rel="nofollow noreferrer">KISS</a>. Deleting these lines of code will not affect correctness in any way, so delete them to remove distractions.</p>

<hr>

<blockquote>
<pre><code>    for prime in 2..limit {
        if !sieve[prime] {
            continue;
        }
</code></pre>
</blockquote>

<p><code>sieve</code> is not the most helpful name, because some people write their sieves with <code>true</code> indicating a composite number and others with <code>true</code> indicating a prime number. <code>is_prime</code> would be explicit. If <code>!is_prime[prime]</code> offends your aesthetics then <code>prime</code> could also be renamed.</p>

<hr>

<blockquote>
<pre><code>        if count == n {
            return prime as u32;
        }
</code></pre>
</blockquote>

<p>The need to cast here is worrying, and suggests that the types are wrong: either <code>limit</code> should be <code>u32</code> or the return value should be <code>u64</code>.</p>

<hr>

<blockquote>
  <p>The main objective is to find the <span class="math-container">\$n\$</span>th prime quickly when <span class="math-container">\$n\$</span> might grow to huge numbers.</p>
</blockquote>

<p>What counts as <em>huge</em>? Depending on the answer, it might make sense to trade increased complexity for a reduction in memory usage and segment the sieve. It might even be worth pre-calculating (or borrowing from resources like the <a href="https://primes.utm.edu/" rel="nofollow noreferrer">Prime Pages</a>) a lookup table of every millionth prime and switching to a sieve which allows you to sieve an arbitrary range rather than having to start at 2.</p>
    </div>