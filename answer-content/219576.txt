<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>premium_cost</code></h1>

<p>There is no reason to include the return of this <code>premium_cost</code> in <code>ground_shipping_cost</code>. Use a different method here</p>

<h1>DRY</h1>

<p>You are correct. There are too many <code>if</code> statements. If you want to introduce an new threshold for the cost, this will include a adding an extra clause, and changing the limits for the preceding and following thresholds. This is just waiting for errors to pop up. Better would be to keep a dict of the thresholds, and iterate over them to get this price factor:</p>

<pre><code>def ground_shipping_cost(weight):
    thresholds = {2: 1.5, 6: 3.0, 10: 4.0, float("inf"): 4.75}
    flat_cost = 20
    for threshold, factor in sorted(thresholds.items()):
        if weight &lt;= threshold:
            break
    return flat_cost + weight * factor
</code></pre>

<p><code>thresholds</code> is a <code>dict</code>, with the cost per weight unit as value, and the threshold as key.</p>

<p>The <code>drone_shipping_cost</code> can be tackled comparably.</p>

<p>Now you have 2 methods that, starting from a list of thresholds, tries to determine the cost factor. We can easily refactor this out:</p>

<pre><code>def get_factor(thresholds, value):
    for threshold, factor in sorted(thresholds.items()):
        if value &lt;= threshold:
            return factor

def ground_shipping_cost(weight):
    thresholds = {2: 1.5, 6: 3.0, 10: 4.0, float("inf"): 4.75}
    flat_cost = 20
    return flat_cost + get_factor(thresholds, weight)


def drone_shipping_cost(weight):
    thresholds = {2: 4.5, 6: 9.0, 10: 12.0, float("inf"): 14.75}
    return weight * get_factor(thresholds, weight)
</code></pre>

<h1>Cheapest costs</h1>

<p>Your <code>cheapest_shipping</code> method calculates the costs for the different shipping methods, finds the cheapest one and formats this into a string. This string formatting is also very repetitive, and should be done somewhere else. <code>cheapest_shipping</code> will be the most clear if it only returned which method is the cheapest, and the corresponding cost. This also allow you to test this method with unit tests further on.</p>

<p>Since methods are real objects in Python, and you can pass references to them on and store these in dicts, calculating the costs for the different methods can be simplified a lot:</p>

<pre><code>def cheapest_shipping(weight):
    methods = {
        "drone": drone_shipping_cost,
        "standard ground": ground_shipping_cost,
        "premium ground": lambda weight: 125,
    }
    results = {method: calculation(weight) for method, calculation in methods.items()}
</code></pre>

<p>To look for the cheapest option among those, you can use the built-in <code>min</code>:</p>

<pre><code>cheapest_method = min(results, key=lambda method: results[method])

return cheapest_method, results[cheapest_method]
</code></pre>

<p>Note: the <code>lambda weight: 125</code> is the equivalent of </p>

<pre><code>def premium_shipping(weight):
    return 125
</code></pre>

<p>and <code>"premium ground": premium_shipping,</code> in the <code>methods</code> dict</p>

<p>And this can be called and formatted using <code>str.format</code> or <code>f-strings</code> in Python 3.6+</p>

<pre><code>method, cost = cheapest_shipping(4)
f"You should use {method} shipping as it will only cost {cost}"
</code></pre>

<blockquote>
<pre><code>'You should use standard ground shipping as it will only cost 23.0'
</code></pre>
</blockquote>

<h1>Further refactoring</h1>

<p>You can even refactor this one step further, and have 1 generalized cost calculation method that take a <code>flat_cost</code> and <code>thresholds</code> as arguments</p>

<pre><code>def get_shipping_cost(weight, thresholds=None, flat_cost=0):
    if thresholds is None:
        return flat_cost
    return flat_cost + weight * get_factor(thresholds, weight)
</code></pre>

<p>then you can define the different shipping methods like this:</p>

<pre><code>shipping_methods = {
    "drone": {"thresholds": {2: 4.5, 6: 9.0, 10: 12.0, float("inf"): 14.75}},
    "standard ground": {
        "flat_cost": 20,
        "thresholds": {2: 1.5, 6: 3.0, 10: 4.0, float("inf"): 4.75},
    },
    "premium ground": {"flat_cost": 125},
}

def cheapest_shipping2(methods, weight):
    results = {
        method: get_shipping_cost(weight, **parameters)
        for method, parameters in methods.items()
    }
    cheapest_method = min(results, key=lambda method: results[method])
    return cheapest_method, results[cheapest_method]

method, cost = cheapest_shipping2(shipping_methods, 4)
</code></pre>

<h1>different <code>min</code></h1>

<p>Instead of using <code>min</code> with the cost as key, you can reverse the <code>results</code> dictionary:</p>

<pre><code>def cheapest_shipping2(methods, weight):
    results = {
        get_shipping_cost(weight, **parameters): method
        for method, parameters in methods.items()
    }

    cost, method = min(results.items())
    return method, cost
</code></pre>

<p>In case of an ex aequo, this can have different results than the other method</p>

<h1>even further refactoring.</h1>

<p>Now all shipping methods are calculated with <code>get_shipping_cost</code>. If you want to use different functions for the different shipping methods, you can do something like this:</p>

<pre><code>def cheapest_shipping3(methods, weight, default_cost_method=get_shipping_cost):
    results = {
        parameters.pop("method", default_cost_method)(
            weight, **parameters
        ): method
        for method, parameters in methods.items()
    }
    cost, method = min(results.items())
    return method, cost

shipping_methods2 = {
    "drone": {"thresholds": {2: 4.5, 6: 9.0, 10: 12.0, float("inf"): 14.75}},
    "standard ground": {
        "flat_cost": 20,
        "thresholds": {2: 1.5, 6: 3.0, 10: 4.0, float("inf"): 4.75},
    },
    "premium ground": {"method": lambda weight: 125},
}

method, cost = cheapest_shipping3(shipping_methods2, 4)
</code></pre>

<p>please note that the <code>parameters.pop</code> mutates the original <code>shipping_methods2</code> after the execution:</p>

<pre><code>{
    "drone": {"thresholds": {2: 4.5, 6: 9.0, 10: 12.0, inf: 14.75}},
    "standard ground": {
        "flat_cost": 20,
        "thresholds": {2: 1.5, 6: 3.0, 10: 4.0, inf: 4.75},
    },
    "premium ground": {},
}
</code></pre>

<p>To prevent this, we need to make a copy of the <code>methods</code>:</p>

<pre><code>def cheapest_shipping3(methods, weight, default_cost_method=get_shipping_cost):
    methods_copy = {
        method: parameters.copy()
        for method, parameters
        in methods.items()
    }
    results = {
        parameters.pop("method", default_cost_method)(
            weight, **parameters
        ): method
        for method, parameters in methods_copy.items()
    }
    cost, method = min(results.items())
    return method, cost
</code></pre>
    </div>