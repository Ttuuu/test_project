<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If TDD means writing code to pass tests of increasing complexity, then I think that this process will perforce be inefficient use of coder time. This is because code for the next test will always have to be redesigned to embrace harder test cases.
To me, TDD just meant having a good list of tests written before any code was written. The code first written would therefore be an attempt to pass ALL tests for each separate block of the code, e.g. input validation code block or the year conversion code block.
In the above situation, I'd also put in a test for year 0 AD just in case execution arrived at it after a subtraction. Likewise with years before 9999 BC or after 9999 AD as these are good nominal boundaries for most applications.</p>

<p>I'm not convinced that the loop algorithm above is faster than, let's say, an algo that set millenia, centuries, decades and digits to the year using 4 successive switch statements and hard-coded conversion strings.</p>

<pre><code>package romanYears;

    /** A small class to allow generation &amp; manipulation of years in Roman numeral format. 
 *  This program covers all years from 9999 BC to 9999 AD inclusive.
 *  Input year strings MUST CONFORM to the format: YYYY BC or YYYY AD, where YYYY is a 
 *  positive integer between 1 and 9999 inclusive. 
 *  Only ONE space is allowed before the era string, "BC" or "AD".
 */

public class Numerals
{
    private static String era;                                                                                              // Era initials, e.g. "BC" or "AD"
    private static int year;                                                                                                // Arabic year alone, e.g. 1916
    private static String yearSt;                                                                                           // Input year string with era and space removed

    final static String[][] numerals = {                                                                                    // NUMERALS FOR ARABIC TO ROMAN CONVERSION ...

                                {"I",                                                                                       // ... XXX1
                                 "II",                                                                                      // ... XXX2
                                 "III",                                                                                     // ... XXX3
                                 "IV",                                                                                      // ... XXX4
                                 "V",                                                                                       // ... XXX5
                                 "VI",                                                                                      // ... XXX6
                                 "VII",                                                                                     // ... XXX7
                                 "VIII",                                                                                    // ... XXX8
                                 "IX" },                                                                                    // ... XXX9

                                { "X",                                                                                      // ... XX1X
                                  "XX",                                                                                     // ... XX2X
                                  "XXX",                                                                                    // ... XX3X
                                  "XL",                                                                                     // ... XX4X
                                  "L",                                                                                      // ... XX5X
                                  "LX",                                                                                     // ... XX6X
                                  "LXX",                                                                                    // ... XX7X
                                  "LXXX",                                                                                   // ... XX8X
                                  "XC" },                                                                                   // ... XX9X

                                { "C",                                                                                      // ... X1XX
                                 "CC",                                                                                      // ... X2XX
                                 "CCC",                                                                                     // ... X3XX
                                 "CD",                                                                                      // ... X4XX
                                 "D",                                                                                       // ... X5XX
                                 "DC",                                                                                      // ... X6XX
                                 "DCC",                                                                                     // ... X7XX
                                 "DCCC",                                                                                    // ... X8XX
                                 "CM" },                                                                                    // ... X9XX

                                { "M",                                                                                      // ... 1XXX
                                  "MM",                                                                                     // ... 2XXX
                                  "MMM",                                                                                    // ... 3XXX
                                  "MV" + "\u0305",                                                                          // ... 4XXX
                                  "V" + "\u0305",                                                                           // ... 5XXX
                                  "V" + "\u0305" + "M",                                                                     // ... 6XXX
                                  "V" + "\u0305" + "MM",                                                                    // ... 7XXX
                                  "V" + "\u0305" + "MMM",                                                                   // ... 8XXX
                                  "MX" + "\u0305" }                                                                         // ... 9XXX
                                };


    public Numerals(String stringYear)                                                                                      // Full Arabic year as a string, e.g. 1916 AD
    {
        if (stringYear.equals(""))
        {
            throw new IllegalArgumentException("Invalid input !", new Throwable("Empty string"));
        }
        if (stringYear.length() &lt; 4)
        {
            throw new IllegalArgumentException("Invalid input !", new Throwable("String too short"));
        }
        era = stringYear.substring(stringYear.length() - 2);
        if (!era.equals("BC") &amp;&amp; !era.equals("AD"))                                                                         // Invalid era string, i.e not BC or AD
        {
            throw new IllegalArgumentException("Invalid input !", new Throwable("Era string wrong"));
        }
        yearSt = stringYear.substring(0, stringYear.length() - 3);
        if (!yearSt.equals(yearSt.trim()))
            throw new IllegalArgumentException("Invalid input !", new Throwable("More than 1 space before era"));
        try
        {
            year = Integer.parseInt(yearSt);
        }
        catch (Exception e)
        {
            throw new IllegalArgumentException("Invalid input !", new Throwable("Year in wrong format"));
        }
        if (year &lt; 0) throw new IllegalArgumentException("Invalid input !", new Throwable("Negative year"));
        if (year == 0) throw new IllegalArgumentException("Invalid input !", new Throwable("No year 0 BC or 0 AD"));
        if (year/1000 &gt; 9) throw new IllegalArgumentException("Invalid input !", new Throwable("Year out of range"));
    }

    public String getEra()
    {
        return era;
    }     

    public int getYear()
    {
        return year;
    }

    public static void main(String[] args)
    {
        Numerals numerals;
        String rYear,
               margin = "      ";                                                                                           // Column margin when printing output
        String[] testYears = {                                                                                              // Invalid input formats ...

                "",                                                                                                         // Blank input
                "?",                                                                                                        // Input char invalid &amp; too short
                "9BC",                                                                                                      // No space between year and era &amp; too short
                "0 BC",                                                                                                     // Invalid year
                "0 AD",                                                                                                     // Invalid year
                "1 AB",                                                                                                     // Invalid era string
                "1 A.D.",                                                                                                   // Era has periods
                "AD 12",                                                                                                    // Era before year
                "1 ad",                                                                                                     // Era lower case
                "? BC",                                                                                                     // Year has invalid char
                "-157 BC",                                                                                                  // Negative year
                "33.3 BC",                                                                                                  // Non-integer year
                "10  BC",                                                                                                   // Double spacing before era
                "9 BC",                                                                                                     // Low BC year &amp; IX test
                "99 AD",                                                                                                    // Low AD year &amp; XCIX vs IC test
                "432 AD",                                                                                                   // CD test
                "999 AD",                                                                                                   // CM test &amp; XCIX test
                "1001 AD",                                                                                                  // MI test
                "1492 AD",                                                                                                  // MCD test
                "1690 AD",                                                                                                  // MDC test
                "1789 AD",                                                                                                  // Bastille test !
                "1899 AD",                                                                                                  // Just before MCM test
                "1900 AD",                                                                                                  // MCM test
                "2018 AD",                                                                                                  // This year test
                "4018 AD",                                                                                                  // MV-prime test
                "5092 AD",                                                                                                  // V-prime test
                "8999 AD",                                                                                                  // Just before MX-prime test
                "9999 AD",                                                                                                  // Just before X-prime test
                "11700 AD"                                                                                                  // Out of allowed range input
        };

        for (String testYear : testYears)
        {
            try
            {
                numerals = new Numerals(testYear);                                                                          // Check validity of each year string
            }
            catch (Exception iae)
            {
                System.out.printf("\n%8s%4s%-60s", testYear, margin, iae.getMessage()                                       // Invalid =&gt; Output error message
                        + " Cause: " + iae.getCause().getMessage());
                continue;                                                                                                   // ... and break out of value loop
            }
            try                                                                                                             // Valid year string ...
            {
                year = numerals.getYear();                                                                                  // ... set year parameter ...
                rYear = numerals.convertToRomanYear();                                                                      // ... and try conversion to Roman
            }
            catch (Exception iae)                                                                                           // Can't convert to Roman ...                                                                                       
            {
                System.out.printf("\n%8s%4s%-60s", testYear, margin, iae.getMessage() 
                        + " Cause: " + iae.getCause().getMessage());                                                        // ... Output error
                continue;                                                                                                   // ... and break value loop
            }
                                                                                                                            // Successful conversion to Roman 
            System.out.printf("\n%8s%4s%-60s", testYear, margin, rYear);                                                    // =&gt; Output Roman conversion
        }

    }



    /** Converts a year in Arabic numerals to its Roman year equivalent string.
     *  @return A String holding the converted year.
     * */
    public String convertToRomanYear()
    {
        StringBuilder romanYear = new StringBuilder();                                                                      // Initialise output string
        int period = 1000, 
            numPeriods;                                                                                                     // Period, e.g. 1000, 100, 10

        for (int decExp = 3; decExp &gt; -1; decExp--)                                                                         // Generate period substrings
        {
            numPeriods = year / period;
            romanYear.append(switch(numPeriods)
            {
                case 0 -&gt; "";
                case 1, 2, 3, 4, 5, 6, 7, 8, 9 -&gt; numerals[decExp][numPeriods - 1];                                             // New switch statement (Java 14)
                default -&gt;  throw new IllegalArgumentException("Invalid input !", new Throwable("number of periods"));
            });
        }
            year -= numPeriods * period;                                                                                    // Remove converted digit from year
            period /= 10;
        }
        return romanYear.toString() + " " + era;                                                                            // Conversion to output String
    }
}

  OUTPUT
  ======
              Invalid input ! Cause: Empty string                         
       ?      Invalid input ! Cause: String too short                     
     9BC      Invalid input ! Cause: String too short                     
    0 BC      Invalid input ! Cause: No year 0 BC or 0 AD                 
    0 AD      Invalid input ! Cause: No year 0 BC or 0 AD                 
    1 AB      Invalid input ! Cause: Era string wrong                     
  1 A.D.      Invalid input ! Cause: Era string wrong                     
   AD 12      Invalid input ! Cause: Era string wrong                     
    1 ad      Invalid input ! Cause: Era string wrong                     
    ? BC      Invalid input ! Cause: Year in wrong format                 
 -157 BC      Invalid input ! Cause: Negative year                        
 33.3 BC      Invalid input ! Cause: Year in wrong format                 
  10  BC      Invalid input ! Cause: More than 1 space before era         
    9 BC      IX BC                                                       
   99 AD      XCIX AD                                                     
  432 AD      CDXXXII AD                                                  
  999 AD      CMXCIX AD                                                   
 1001 AD      MI AD                                                       
 1492 AD      MCDXCII AD                                                  
 1690 AD      MDCXC AD                                                    
 1789 AD      MDCCLXXXIX AD                                               
 1899 AD      MDCCCXCIX AD                                                
 1900 AD      MCM AD                                                      
 2018 AD      MMXVIII AD                                                  
 4018 AD      MV̅XVIII AD                                                 
 5092 AD      V̅XCII AD                                                   
 8999 AD      V̅MMMCMXCIX AD                                              
 9999 AD      MX̅CMXCIX AD                                                
11700 AD      Invalid input ! Cause: Year out of range  
</code></pre>

<p>Of course, this is a simple enough piece of coding. With more complex situations it may well be that writing code to pass successively harder tests may make for a shorter development cycle time. But I think that a lot depends on the way the coder approaches the task. More logical types may find TDD is faster, more conceptual people might find an all-in-one approach easier and quicker.</p>
    </div>