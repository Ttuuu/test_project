<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to go out on a limb and assume you come from a java world based on your comments over your methods, and the use of your fields instead of properties. Neither of these things are bad, just not what we are used to seeing in the C# world. If you are using Visual Studio you can type a triple forwards slash and it will make a xml style comment that intellisense can and will use. example use would be</p>

<pre><code>    /// &lt;summary&gt;
    /// Add a rover
    /// &lt;/summary&gt;
    public void AddRover()

    /// &lt;summary&gt;
    /// Is the rover dead?
    /// &lt;/summary&gt;
    /// &lt;returns&gt;returns true if the rover is dead&lt;/returns&gt;
    /// &lt;remarks&gt;https://xkcd.com/695/&lt;/remarks&gt;
    public bool RoverDead()

    /// &lt;summary&gt;
    /// Move the rover a desired amount
    /// &lt;/summary&gt;
    /// &lt;param name="xChange"&gt;the amount to move the rover on the x coordinate&lt;/param&gt;
    /// &lt;param name="yChange"&gt;the amount to move the rover on the y coordinate&lt;/param&gt;
    public void MoveRover(int xChange, int yChange)
</code></pre>

<p>Another helpful thing to learn about is the power of some of the testing frameworks at your disposal. As it sits right now NUnit is probably the most popular. MSTest isn't horrible. I've never used xUnit so I can't speak for it. whichever you choose is up to you. In terms of speed and easiest to setup MSTest will be the way to go. I also recommend using Fluent assertions (search for it using Nuget) with it, but that is more of a personal preference then anything else.</p>

<p>Now I'm not going to get into the debate of what style of testing to use be it test-after (write a test after you've written your production code) TDD, BDD or a combination there of. I will say though that if you write your test first and try to make your tests pass your code will be more testable. Just like writing production code has a certain art to it, so does writing good tests. It all takes practice.</p>

<p>With that said I will focus now on a comment made in a post up above by Abbas</p>

<blockquote>
  <p>If this can be applied in real life, the Mars Rover could keep going indefinitely, as long as the change of X is equal to the change of Y. Example:</p>

<pre><code>Start X: 0
Start Y: 0
Name: test
Starting LifeTime: 2
</code></pre>
  
  <p>Now give 5 as input for xChange and yChange and voila... infinite power for the fella!</p>
</blockquote>

<p>Instead of typing in those values that he speaks of a the console window you can write a test to assume certain things.</p>

<pre><code>[TestClass]
public class RoverTests
{
    [TestMethod]
    public void AfterMovingRoverLifeDecreases()
    {
        var rover = new Rover(0, 0, "test", 6);
        rover.MoveRover(2, 4);
        Assert.AreEqual(0, rover.lifeTime, "rover moved 6, so life should be 0");
    }

    [TestMethod]
    public void AbbasFoundThisBug()
    {
        var rover = new Rover(0, 0, "test", 2);
        rover.MoveRover(5, 5);
        Assert.AreEqual(-8, rover.lifeTime, "rover moved 10, so life should be -8");
    }
}
</code></pre>

<p>those tests fails currently (I did that on purpose). It took 17ms to run on my PC and said the following.</p>

<pre><code>Test Name:  AfterMovingRoverLifeDecreases
Test Outcome:   Failed
Test Duration:  0:00:00.017907
Result Message: Assert.AreEqual failed. Expected:&lt;0&gt;. Actual:&lt;4&gt;. rover moved 6, so life should be 0

Test Name:  AbbasFoundThisBug
Test Outcome:   Failed
Test Duration:  0:00:00.0006728
Result Message: Assert.AreEqual failed. Expected:&lt;-8&gt;. Actual:&lt;2&gt;. rover moved 10, so life should be -8
</code></pre>

<p>(I guessed at the assertions for how much life should be remaining and how to calculate life)</p>
    </div>