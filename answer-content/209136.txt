<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can be solved as a graph problem using any graph search algorithm such as <a href="https://en.wikipedia.org/wiki/Depth-first_search" rel="nofollow noreferrer"><code>DFS</code></a>, or my favorite, <a href="https://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search" rel="nofollow noreferrer"><code>iterative deepening DFS (IDDFS)</code></a>. You can use <a href="https://en.wikipedia.org/wiki/Breadth-first_search" rel="nofollow noreferrer"><code>BFS</code></a>, but you will end up running out of memory if the list of numbers is sufficiently large.</p>

<h3>Preparation:</h3>

<ul>
<li>Choose a graph search algorithm</li>
<li>You will start with an empty graph and build it up as you progress with the search.</li>
<li>The nodes in your graph consist of a set of (value, operator) pairs</li>
</ul>

<h3>Implementation</h3>

<ul>
<li>To begin, your root node contains the number zero.</li>
<li>The successors of the current node are made of nodes containing some (value, operator) pair that is not already in the current node. Make sure to consider all combinations (ex. <code>+2</code>, <code>-2</code>, <code>+3</code>, <code>-3</code>)</li>
<li><s>Your goal is that the sum of the values in the current node sum up to the target <code>S</code></s></li>
<li>Your goal is that the sum of the values in the current node sum up to the target <code>S</code>, but you keep running the algorithm until you have run out of nodes</li>
</ul>

<p><em>Doing it this way, you build the graph as you search it.</em></p>

<p>As long as you make sure not to repeat the digits used to create a node, you will be guaranteed to find a solution quickly or quickly find that there is no solution</p>
    </div>