<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>using std::cout;</code>, while better than including the entire namespace, is still worse than simply using the <code>std::</code> prefix. If typing it annoys you too much, you can just make a macro in your editor to type it for you when you press a certain key combo.</p>

<p>Overall this looks much more like a C program than a C++ one. Assuming your algorithm works as intended you can take some steps to make this more C++ idiomatic?</p>

<ul>
<li>Replace the array with a vector and get rid of raw pointers.</li>
<li>Enforce const when possible.</li>
<li>Drop <code>return 0</code> from <code>main</code> because the compiler will generate it for you. This refers excplicitly to the <code>return 0</code> at the end of <code>main</code>. <a href="http://c0x.coding-guidelines.com/5.1.2.2.3.html" rel="nofollow noreferrer">Exiting from <code>main</code> by reaching the end automatically returns 0</a>. So adding the <code>return</code> statement is just duplicate code.</li>
<li><a href="//softwareengineering.stackexchange.com/q/59880">Prefer prefix over postfix operator</a>.</li>
<li>Move the logic into a class so you don't have to pass everything on every call to <code>nextCombination</code>.</li>
<li>You can overload <code>operator&lt;&lt;</code> to print the current line.</li>
<li>Eliminate magic numbers.</li>
</ul>

<p>Keeping all this in mind, the rewrite could look something like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

class Combinatorics {
public:
    Combinatorics(std::vector&lt;int&gt; const&amp; v, int const&amp; n, int const&amp; r)
        : elements{v}
        , n{n}
        , r{r}
    {}

    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Combinatorics const&amp; obj);

    bool next() {
        int lastNotEqualOffset = r - 1;
        while (elements[lastNotEqualOffset] == n - r + (lastNotEqualOffset + 1)) {
            --lastNotEqualOffset;
        }
        if (lastNotEqualOffset &lt; 0) {
            return false;
        }
        ++elements[lastNotEqualOffset];
        for (int i = lastNotEqualOffset + 1; i &lt; r; ++i) {
            elements[i] = elements[lastNotEqualOffset] + (i - lastNotEqualOffset);
        }
        return true;
    }

private:
    std::vector&lt;int&gt; elements;
    int n;
    int r;
};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Combinatorics const&amp; obj) {
    std::copy(obj.elements.begin(), obj.elements.end(), std::ostream_iterator&lt;int&gt;(os, " "));
    return os;
}

int main() {
    constexpr int n = 7;
    constexpr int r = 3;
    int total = 0;
    Combinatorics combinatorics{{1, 2, 3}, n, r};
    do {
        std::cout &lt;&lt; combinatorics &lt;&lt; "\n";
        ++total;
    } while (combinatorics.next());
    std::cout &lt;&lt; total &lt;&lt; "\n";
}
</code></pre>

<p>You simply pass all your data into the constructor upfront and then call <code>next</code> until every repetition has been done. (I kept <code>n</code> and <code>r</code> because they are used in the math context, normally you should try to avoid short variable names like that).</p>
    </div>