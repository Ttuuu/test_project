<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code</h2>

<blockquote>
<pre><code>limit = 1000000
triangle = []
pentagonal = []
hexagonal = []
triangle_number = []
</code></pre>
</blockquote>

<p>Global variables do not help readability.</p>

<p>What's the difference between <code>triangle</code> and <code>triangle_number</code>? Those names don't help me understand what they represent.</p>

<hr>

<blockquote>
<pre><code>class Shape:
    def __init__(self, term):
        self.term = term

    def triangle(self):
        return int(self.term * (self.term + 1) / 2)

    def pentagonal(self):
        return int(self.term * (3 * self.term -1) / 2)

    def hexagonal(self):
        return int(self.term * (2 * self.term - 1))
</code></pre>
</blockquote>

<p>A shape doesn't have a term: it has <em>sides</em>. Concretely, since we're talking regular shapes, it has two properties: the number of sides and the length of each side. This class doesn't make sense to me.</p>

<p>If you really want to practise structuring code with classes, the class should probably be a <code>Solver</code>.</p>

<hr>

<blockquote>
<pre><code>    for _, terms in enumerate(hexagonal):
        if len(triangle_number) == 3:
            break
        elif terms in triangle and terms in pentagonal:
            triangle_number.append(terms)
            print(terms)
</code></pre>
</blockquote>

<p>If you're testing <code>x in ys</code> then <code>ys</code> had better be a <code>set</code>, not a <code>list</code>, or you have to do a linear search.</p>

<hr>

<h2>Algorithm</h2>

<p>The current algorithm can be summed up as such:</p>

<pre><code>fix a large limit
generate `limit` terms in each of the sequences
for term in first_sequence
    if term in second_sequence and term in third_sequence:
        term is a candidate solution
</code></pre>

<p>The limit is guesswork, so it might be too small and not find the solution, or be too large and waste lots of time generating terms.</p>

<p>If you note that all of the sequences are strictly increasing, you can instead do a kind of merge:</p>

<pre><code>while problem not solved:
    initialise each of the sequences at the first term
    if all sequences have the same current term:
        term is a candidate solution
    advance one of the sequences which has the smallest current term
</code></pre>

<hr>

<p>Project Euler is more about maths than programming. Let's look again at those term formulae: <span class="math-container">$$T_n = \frac{n(n+1)}{2} \\ H_n = n(2n−1)$$</span>
We can rewrite the latter as <span class="math-container">$$H_n = \frac{(2n−1)(2n)}{2}$$</span>
Can you spot a major simplification which you can make to the search?</p>

<p>There are more sophisticated mathematical improvements, but this isn't the place. Check out the Project Euler discussion thread which you gain access to after solving the problem, and if you can distill out questions from that then ask them on our sister site <a href="//math.stackexchange.com">math.stackexchange.com</a>.</p>
    </div>