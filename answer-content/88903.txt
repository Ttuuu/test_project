<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the text several categories are described. OOD would try and capture those categories as classes. There's the categories of imported goods and goods that are not imported. The there's the categories of tax exempted goods and goods with tax. 
If you are only ever gonna have one perfurme or one dog food this approach is over kill. The main idea is to show how to codify classifications even when they intersect</p>

<p>You can use it like this</p>

<pre><code>var book = new Product("book", 4.56m);
</code></pre>

<p>or for those that you can have in multiple variations you can subclass</p>

<pre><code>class DogFood : TaxedProduct{...}

var dogFood = new DogFood(...);
var importedDogFood = new Imported&lt;DogFood&gt;(...);
</code></pre>

<p>The class hierachi could look something like this</p>

<pre><code>public abstract class Product
{
    public string Name { get; protected set; }
    public decimal Price { get; protected set; }

    public abstract decimal Taxes
    {
        get;
    }
}


public class TaxedProduct : Product
{
    public Taxed(string name, decimal price){
        Name = name;
        Price = price;
    }
    public Taxed(){}
    public override decimal Taxes
    {
        get
        {
            return Price * .1m;
        }
    }
}

public class Imported&lt;TProduct&gt; : Product where TProduct : Product, new()
{
    TProduct _base = new TProduct();
    public Imported(string name, decimal price) {
         Price = _base.Price = price;
         Name = _base.Name = name;
    }
    public override decimal Taxes
    {
        get
        {
            return Price * .05m + _base.Taxes;
        }
    }
}
</code></pre>
    </div>