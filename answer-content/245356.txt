<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I have sorted it by alphabetical order</p>
</blockquote>
<p>A year from now are you going to remember that the data is supposed to be presorted?  Adding a comment notating it would be helpful.  Better yet would be suffix it to the routines name:</p>
<blockquote>
<pre><code>Public Sub BuildTMProductDictionaryFromSortedTable()
</code></pre>
</blockquote>
<p>The best approach is not to rely on the data being sorted in the first place.  The reason we use dictionaries in the first place is for lightning fast lookups and the ability to check if a key exists.  Simply, store a new collection each time you create a key in the dictionary and use the key to retrieve the collection as needed.</p>
<pre><code>    If Not productGroup.Exists(product) Then productGroup.Add product, New Collection
    On Error Resume Next
    productGroup(product).Add tmData(i, 2)
    On Error GoTo 0
</code></pre>
<p>It is best to limit the scope of <code>On Error Resume Next</code> as much as possible by using <code>On Error GoTo 0</code>.   The tighter the scope the better chance we will find the errors while debugging.</p>
<blockquote>
<pre><code>Public Sub BuildTMProductDictionary()
</code></pre>
</blockquote>
<p>So you have a sub routine that builds the compiles the data just the way you want it.  Excellent! Now what?  You could, of course, add some more functionality to the method but that isn't what you should be doing.  Ideally, every routine should do as few things as possible and do them flawlessly in a very easy to read manor.</p>
<p>It would be better to change <code>BuildTMProductDictionary()</code> from a sub routine to a function and have it return the data.</p>
<p>Something like this:</p>
<pre><code>Public Function GetTMProductDictionary()
    Const productCol As Long = 1, serviceCol As Long = 1
    
    Dim Data As Variant
    Data = Sheet1.ListObjects("Table1").DataBodyRange.Value

    Dim productGroup As New Dictionary
    Dim i As Long
    
    For i = LBound(Data, 1) To UBound(Data, 1)
        If Not productGroup.Exists(Data(i, productCol)) Then productGroup.Add Data(i, productCol), New Collection
        
        On Error Resume Next
        productGroup(Data(i, productCol)).Add Data(i, serviceCol)
        On Error GoTo 0            
    Next
    
    Set GetTMProductDictionary = productGroup
End Function
</code></pre>
<p>This is pretty good but is the function as simple as it can be?  What does it actually do?</p>
<ul>
<li>Retrieve data</li>
<li>Compile the data</li>
<li>Return the data</li>
</ul>
<p>If the function is compiling data, it really need to return it.  But does it need to retrieve the data?</p>
<ul>
<li>No not really.  We could pass the data in as a parameter.</li>
</ul>
<p>What effects would passing the data in as a parameter have our overall design?</p>
<ul>
<li><p>By decoupling data gathering from data processing makes it far easier to test the code.  In this case we could make a test table an a unit test that will run regardless independently from the actual data.</p>
</li>
<li><p>It reduces the size of the method, which in turn, makes the code easier to read and modify.</p>
<p>Public Function GetTMProductDictionary(Data As Variant)
Const productCol As Long = 1, serviceCol As Long = 1</p>
<pre><code>  Dim productGroup As New Dictionary
  Dim i As Long

  For i = LBound(Data, 1) To UBound(Data, 1)
      If Not productGroup.Exists(Data(i, productCol)) Then productGroup.Add Data(i, productCol), New Collection

      On Error Resume Next
      productGroup(Data(i, productCol)).Add Data(i, serviceCol)
      On Error GoTo 0            
  Next

  Set GetTMProductDictionary = productGroup
</code></pre>
<p>End Function</p>
</li>
</ul>
<p>How does this effect the meaning of our names?  Should the variable names remain the same?</p>
<ul>
<li>Robert Martin's (aka Uncle Bob), <a href="https://www.youtube.com/channel/UCWFcVR9ULVRZ5UeweZPOTbQ/featured" rel="nofollow noreferrer">in his clean code video series on YouTube</a> brings up a good point:</li>
</ul>
<blockquote>
<p>The larger the scope of the more descriptive the names should be.</p>
</blockquote>
<p>Lets take a closer look at the names.  Can they be simplified or improved?  Can they be shortened or generalized?</p>
<p><code>GetTMProductDictionary()</code>, <code>productCol</code>, <code>serviceColThis</code> all makes sense.</p>
<p>But <code>productGroup</code>?  What is a <code>productGroup</code>?  Its a dictionary.  How many dictionaries are there in this small function? Only 1.  Why not just call  it
<code>Dictionary</code>?  I name my dictionaries <code>Map</code> or <code>somethingMap</code> because it is a simple and clean naming pattern and I hate seeing <code>dic</code>.</p>
<p>So now we have a <code>Map</code>.  Maps use key/value pairs.  The <code>Map</code> doesn't care if the key is a product group or that the product group or that the value is a collection.  Does knowing about product groups and services even help us review the code?  Maybe...just a little.</p>
<p>What would happen if we just generalized the code?  If we gave everything simple, common, familiar, and meaningful names that we see every time we work with this type of code?  What would it look like?</p>
<pre><code>Public Function GetMapCollection(Data As Variant, keyColumn As Long, valueColumn As Long)
    Dim Map As New Dictionary
    Dim i As Long
    
    For i = LBound(Data, 1) To UBound(Data, 1)
        If Not Map.Exists(Data(i, keyColumn)) Then Map.Add Data(i, keyColumn), New Collection
        
        On Error Resume Next
        Map(Data(i, keyColumn)).Add Data(i, valueColumn)
        On Error GoTo 0            
    Next
    
    Set GetMapCollection = Map
End Function
</code></pre>
<p>Looks to me that we found a generic reusable function hiding in the code.  Not only has the data retrieval and compilation been decouple but the context, in which, the compiled data is going to used has been washed away.</p>
<p>This is what we should strive for when we are refactoring.   Our methods should be so small and simple that they only know the bare minimum.</p>
<h2>Addendum</h2>
<p>I modified the function to use only dictionaries and added sample usage.</p>
<p><a href="https://i.stack.imgur.com/hd5zM.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/hd5zM.png" alt="Locals Window"></a></p>
<pre><code>Sub Usage()
    Dim productGroupServices As Scripting.Dictionary
    Dim serviceProductGroups As Scripting.Dictionary
    
    Dim tmData As Variant
    tmData = Sheet1.ListObjects("Table1").DataBodyRange.Value

    Set productGroupServices = GetUniqueGroups(tmData, 1, 2)
    
    Set serviceProductGroups = GetUniqueGroups(tmData, 2, 1)
    
    Stop
End Sub

Public Function GetUniqueGroups(Data As Variant, keyColumn As Long, valueColumn As Long) As Dictionary
    Dim Map As New Dictionary
    Dim i As Long
    Dim Key As Variant
    Dim Value As Variant
    
    For i = LBound(Data, 1) To UBound(Data, 1)
        Key = Data(i, keyColumn)
        Value = Data(i, valueColumn)
        
        If Not Map.Exists(Key) Then Map.Add Key, New Dictionary
        If Not Map(Key).Exists(Value) Then Map(Key).Add Value, Value
    Next
    
    Set GetUniqueGroups = Map
End Function
</code></pre>
    </div>