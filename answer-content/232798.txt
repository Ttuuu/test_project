<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your code too good to be True! I hope to code like you one day!  </p>

<p>Even so, there always exists improvements, no matter how few.</p>

<h1>Bug</h1>

<p>In the <code>save_values</code> function, there is a line <code>os.remove(f)</code> which raises an error, but is caught by the <code>except</code> statement, which just moves on to the next line of the code. Is <code>import os</code> statement missing? I believe so.</p>

<h1>Improvements</h1>

<p>I don't believe there are any improvements for <code>make_optimal_move</code>, but I will add them if I find any.</p>

<hr>

<p><code>from enum import Enum, IntEnum, unique</code><br>
<code>import numpy as np</code></p>

<p><code>Enum</code> and <code>np</code> is not used. Do you plan to use them later? Removing it is your wish.</p>

<hr>

<p>In <code>class Agent</code>, signature of method 'Agent.make_move()' doesn't match the signature of base method in the class 'Player'. </p>

<p>The signature of <code>Agent.make_move()</code> is <code>make_move(self, winner, learn)</code> while the signature of <code>class Player</code> is <code>make_move(self, winner, learn=False)</code>. </p>

<p>The signatures should always be the same.</p>

<hr>

<p>Use ternary operators.</p>

<p>In the <code>Agent.make_move</code> function</p>

<pre><code>if learn:
    epsilon = 0.8
else:
    epsilon = 1
</code></pre>

<p>can be replaced with </p>

<pre><code>epsilon = 0.8 if learn else 1
</code></pre>

<p>and in <code>Agent.reward</code> function</p>

<pre><code>if winner is self.tag:
    R = 1
elif winner is None:
    R = 0
else:
    R = -1
</code></pre>

<p>can be replaced with</p>

<pre><code>return 0 if winner is None else 1 if winner is self.tag else -1
</code></pre>

<hr>

<p>According to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> rules, variables in functions should be lower case.</p>

<hr>

<p>In <code>Jaipur.pick_commodity</code>,<br>
<code>if sum(self.market.values()) == 0</code> can be replaced with <code>if not sum(self.market.values())</code></p>

<p>and you can remove the redundant parenthesis in <code>return (None, 0)</code> and <code>return (picked_commodity, pick_count)</code></p>

<p>See <a href="https://medium.com/the-andela-way/idiomatic-python-coding-the-smart-way-cc560fa5f1d6" rel="nofollow noreferrer">idiomatic</a> coding.</p>

<p>Also, <code>pick_count = 0</code> can be removed. It is changed in the <code>if</code> statement or <code>else</code> statement anyway.</p>

<hr>

<p>In the <code>Player.get_state</code> method, <code>hand</code> is not used, so you can remove it.</p>

<hr>

<p>Define static methods with <code>@staticmethod</code></p>

<p><code>Player.get_possible_trades</code>, <code>Agent.calc_value</code>, and <code>Jaipur.pprint</code> are static.</p>

<hr>

<p>In <code>Player.trade</code>, you are using <code>==</code> to compare <code>give</code> and <code>take</code> to <code>None</code>. You should always use <code>is</code> instead of <code>==</code> to compare a value and <code>None</code></p>

<p>Remove the redundant parenthesis in the line <code>if(set(give).intersection(set(take))):</code></p>

<p>Now, </p>

<pre><code>if len(give) != len(take):
    return 

if len(give) &lt; 2:
    return 

if set(give).intersection(set(take)):
    return
</code></pre>

<p>can be replaced with </p>

<pre><code>if len(give) != len(take) or len(give) &lt; 2 or set(give).intersection(set(take)):
    return
</code></pre>

<hr>

<p>If I get more improvements, I'll be sure to edit them in!</p>
    </div>