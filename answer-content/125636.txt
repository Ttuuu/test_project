<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very strange approach for quite a few reasons.</p>

<p>First, the fact that this is an extension of <code>UITableViewCell</code> makes absolutely no sense to me.  The method is completely procedural.  It takes in an array of views (any views... from any where).  From these views, it creates an array of colors to preserve the current background color.  Then executes a function, <code>f</code> (which by the way, <a href="https://github.com/realm/SwiftLint" rel="nofollow">SwiftLint</a> would never allow a single-letter variable name like this) (and you should definitely be using <a href="https://github.com/realm/SwiftLint" rel="nofollow">SwiftLint</a>).  And function <code>f</code> may or may not even change the colors of any of these views.  And then we use parallel arrays, a <em>very</em> procedural approach, to reset these colors.</p>

<p><em>And would we even notice the color change at all?</em></p>

<p>Or is the intent here to <em>hide</em> the color change?</p>

<hr>

<p>As for a more concrete review of some of the code you have, this function:</p>

<blockquote>
<pre><code>private func backgroundColors(views: [UIView]) -&gt; [UIColor?] {
    var colors = [UIColor?]()
    for view in views {
        colors.append(view.backgroundColor)
    }
    return colors
}
</code></pre>
</blockquote>

<p>Could be replaced with a single line of code.</p>

<pre><code>let backgroundColors = views.map { $0.backgroundColor }
</code></pre>

<p>But... to make our code less procedural... why don't we build a tuple array:</p>

<pre><code>let viewColorPairs = views.map { ($0, $0.backgroundColor) }
</code></pre>

<p>And then when it comes time to reset the background colors:</p>

<pre><code>for (view, color) in viewColorPairs {
    view.backgroundColor = color
}
</code></pre>

<p>So now we've eliminated your first two functions, and your <code>preserveBackgroundColors</code> function is simplified into:</p>

<pre><code>func preserveBackgroundColors(views: [UIView], @noescape closure: () -&gt; Void) {
    let viewColorPairs = views.map { ($0, $0.backgroundColor) }
    closure()
    for (view, color) in viewColorPairs {
        view.backgroundColor = color
    }
}
</code></pre>
    </div>