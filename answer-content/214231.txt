<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree that it looks silly but more about the design and less the code, I would generally consider it an abuse to modify an object’s state with a getter (<a href="https://stackoverflow.com/a/13876247">second opinion from SO</a>). An acceptable exception would be for cache fields, but this isn’t quite that. In this case there’s no documentation that this behavior will happen either. Such behavior would be clearer in a method name that specifies the effect.</p>

<p>There’s not too much to do in terms of making it more elegant. There’s no reason to have the <code>else</code> after the first return, saving a line. Then, you can eliminate another line and the if altogether knowing that the state is always going to be <code>false</code> in the end and just grab the value to return (unconditional set might be less efficient?)</p>

<p>I would scrap <code>DidHitBounds</code> as a property (considering the getter is confusing and the setter adds no value, <code>HitBounds</code> could be an auto-property) and instead name a method <code>GetAndResetHitBoundsState</code>. Then what’s going on is a least a bit more clear when you call that new method.</p>

<p>e.g.
</p>

<pre><code>public bool HitBounds { get; set; }

///&lt;summary&gt;Return the hit-bounds state, and reset that state to &lt;c&gt;false&lt;/c&gt;.&lt;/summary&gt;
///&lt;returns&gt;Pre-reset hit-bounds state.&lt;/returns&gt;
public bool GetAndResetHitBoundsState()
{
    bool result = HitBounds;
    HitBounds = false;
    return result;
}
</code></pre>

<p>I suspect the true elegant solution involves understanding how your field is set and received, it smells like something that could be “more elegant” with events or threads but that’s obviously not a simple change.</p>
    </div>