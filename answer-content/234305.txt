<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wish I could make a more comprehensive suggestion regarding the gigantic mass under <code>while not done:</code>. The sheer amount of duplication there is unsustainable.  I'm pretty tired though, so I'll have to stick to simpler issues.</p>

<p>In that chunk, you do something along these lines, <em>many</em> times:</p>

<pre><code>if turn == 0:
    spaces_list[#].color = RED
    turn = 1

 elif turn == 1:
    spaces_list[#].color = YELLOW
    turn = 0
</code></pre>

<p>At the very least, I'd try to work on that. Something like creating a <code>toggle_state</code> function:</p>

<pre><code>def toggle_function(index: int) -&gt; None:
    global turn

    if turn == 0:
        spaces_list[index].color = RED
        turn = 1

    elif turn == 1:
        spaces_list[index].color = YELLOW
        turn = 0
</code></pre>

<p>Now, you can do</p>

<pre><code>if spaces_list[35].color == WHITE:
    toggle_state(35)

elif spaces_list[28].color == WHITE:
    toggle_state(28)
</code></pre>

<p>Instead of</p>

<pre><code>if spaces_list[35].color == WHITE:
    if turn == 0:
        spaces_list[35].color = RED
        turn = 1
    elif turn == 1:
        spaces_list[35].color = YELLOW
        turn = 0
elif spaces_list[28].color == WHITE:
    if turn == 0:
        spaces_list[28].color = RED
        turn = 1
    elif turn == 1:
        spaces_list[28].color = YELLOW
        turn = 0
</code></pre>

<p>You could even really push your luck with readability (although it will still be better), and have <code>toggle_state</code> return whether or not it made a change:</p>

<pre><code>def toggle_state(index: int) -&gt; bool:
    global turn

    if spaces_list[index].color == WHITE:
        if turn == 0:
            spaces_list[index].color = RED
            turn = 1

        elif turn == 1:
            spaces_list[index].color = YELLOW
            turn = 0

        return True

    else:
        return False
</code></pre>

<p>Now, you can do:</p>

<pre><code>toggle_state(35) or toggle_state(28) or . . .
</code></pre>

<p>or, something like</p>

<pre><code>any(toggle_state(i) for i in [35, 28, . . .]
</code></pre>

<p>Things to note though:</p>

<ul>
<li><p>This is still bad. In the first suggestion, you're still needing to refer to the index number in both the <code>== WHITE</code> check, and when passing the number to the <code>toggle_state</code>. This kind of duplication can leads to errors, although it's still better than your current solution.</p></li>
<li><p>The second suggestion introduces weird behavior conceptually. Why is <code>toggle_state</code> returning whether or not it did anything? Because I couldn't think of a cleaner way to do it. It doesn't make a ton of sense, but it still allows for much cleaner code.</p></li>
<li><p>Both rely on <code>global turn</code>, and this immediately suggests that the code stinks (it does). Ideally, doing something like returning a state including <code>turn</code> and <code>spaces_list</code> would be more proper, but I think that detracts from the main point here: reducing duplication.</p></li>
</ul>

<p>Beyond that though, you have too many magic numbers floating around with no clear purpose. Ideally, you should aim for that chunk to be simplified using a loop or similar construct. As long as you have everything in a rigid, hardcoded style though, that will be difficult.</p>
    </div>