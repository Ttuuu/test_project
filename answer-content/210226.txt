<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>timer</code> function should probably go away, to use the built-in <code>timeit</code> instead; or at least <code>timer</code> should wrap <code>timeit</code>.</p>

<p>I'm unclear on why <code>re1</code> and <code>re2</code> are separate. Just have them in the same string. If you want to make it clear that they're separate parts of the regex, you could show the construction of the regex as a concatenation, i.e.</p>

<pre><code>rg = re.compile('.*?'  # Prefix to do foo
                # This is a SQL GUID
                '([A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12})',
                re.IGNORECASE | re.DOTALL)
</code></pre>

<p>Also, you should not have an outer group on that regex.</p>

<p>Your <code>else</code> after <code>return guid1</code> is redundant, since the previous block has already returned.</p>

<p><code>lines = dict()</code> should be <code>lines = {}</code>. There's a reason for this: generally, shorter code is considered more "Pythonic" (as long as it doesn't become arcane or difficult to understand). A dictionary literal is short, simple, and easy to understand.</p>

<p>Here:</p>

<pre><code>if str(element) in line:
</code></pre>

<p>You've already stated in the function doc that <code>element</code> is assumed to be a string, so you don't need to convert it using <code>str</code>.</p>

<p>Here:</p>

<pre><code>unique_ids_dict[element] = find_device_IDs(path, element)
</code></pre>

<p>Your data structure use is a little strange. You're constructing a dictionary by element of single-key dictionaries by element of GUIDs. It would probably make more sense to change <code>find_device_IDs</code> such that it doesn't return a dictionary, and instead just returns a set.</p>

<p>Speed tips:</p>

<ul>
<li>Sort out your data structure strategy, mentioned above</li>
<li>Don't re-compile your regex every time an inner function is called. Compile your regex once, at the global level</li>
</ul>

<p>This:</p>

<pre><code>num_exceptions_dict = dict()
    for elem in search_list:
        num_exceptions_dict[elem] = find_num_occurences(path, elem, 
            search_with_in_deviceID, list(unique_ids_dict[elem].values())[0])
</code></pre>

<p>should probably be reduced to something like</p>

<pre><code>num_exceptions_dict = {
    elem: find_num_occurences(path, elem, search_with_in_deviceID,
                              unique_ids_dict[elem].values())
    for elem in search_list
}
</code></pre>

<p>The performance-affecting change is to avoid re-constructing an inner list. But there's something more sinister going on there. A dictionary is <em>unordered</em>, but you're taking element <code>[0]</code> of an arbitrarily ordered list of <code>values()</code>. If you actually do intend to pull a non-deterministic value from the dictionary, then fine; but this is probably not your intention.</p>

<p>This:</p>

<pre><code>search_with_in_deviceID = ["Exception occurred", "Packet record has been added"]
</code></pre>

<p>should be a tuple instead of a list, since you aren't changing it; so:</p>

<pre><code>search_within_device_ID = ('Exception occurred', 'Packet record has been added')
</code></pre>

<p>I'm going to suggest that you attempt to address the issues that I've raised, above, in particular with respect to the structure of your dictionary and the non-deterministic behaviour of your <code>values</code> call; and then submit a new question so that further performance issues may be addressed.</p>
    </div>