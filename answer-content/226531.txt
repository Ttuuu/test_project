<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wouldn't bother with the <code>numRows == 1</code> special case (it is redundant and just adds code), but you should be checking that <code>numRows &gt;= 0</code> and throwing an argument exception if it is not (and ideally testing for that as well); currently it treats <code>numRows &lt; 0</code> as <code>numRows == 1</code> which makes no sense at all.</p>

<hr>

<p>As always, this would benefit from inline documentation, qualifying what the method does, and what it expects of the caller (e.g. a non-negative number of rows).</p>

<hr>

<p>You might consider <code>var</code> for <code>result</code> and <code>row</code>. Within the method it is fine for <code>result</code> to be <code>List&lt;Ilist&lt;int&gt;&gt;</code>, and will have the nice side-effect of removing a little unnecessary indirection (I'm assuming the CLR won't/can't optimise that away).</p>

<hr>

<p>You might consider using the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.-ctor?view=netframework-4.8#System_Collections_Generic_List_1__ctor_System_Int32_" rel="noreferrer"><code>List(int)</code></a> constructor to improve the memory characteristics of your method, since you know in an advance how large each list will be. Alternatively, if performance matters enough that you will actually benchmark this, then consider an immutable return type (<code>IReadOnlyList&lt;IReadOnlyList&lt;int&gt;&gt;</code>) and use arrays directly.</p>

<hr>

<p>I don't like the spacing in your code: I would at the very least separate the <code>== 0</code> and <code>== 1</code> cases with an empty line. They are logically distinct, and having them mushed together fails to convey this.</p>

<hr>

<p><code>TestMethod1</code> is a poor name, and the text fails to check that the length of the output is correct (it could return 6 rows and you'd never know). Tests for edge cases (<code>0</code>, <code>1</code>) and invalid arguments (<code>-1</code>) are important.</p>

<hr>

<p>Your <code>row</code> variable is all over the place. I would put it inside the loop, and add the first one directly as <code>result.Add(new List&lt;int&gt;() { 1 })</code>. As it is, you could use <code>prevRow = row</code>, which would avoid a lookup.</p>

<hr>

<p>Again, if you really care about performance, you should be benchmarking it with a realistic use case (unfortunately those don't exist for such tasks, and optimisation is basically pointless), but you could avoid making 2 lookups from the previous row for the 'inner' entries. Something like this should work:</p>

<pre><code>// inside for (i...)
int left = 0;
for (int j = 0; j &lt; i - 1; j++)
{
    int right = prevRow[j];
    row.Add(left + right);
    left = right;
}
row.Add(1);
results.Add(row)
</code></pre>

<p>This would also allow you to remove the <code>numRows == 1</code> special case, which would be amusing. Alternatively you could start at <code>j = 1</code> and bake the <code>row.Add(1)</code> first entry.</p>

<hr>

<p>You might also consider a lazy version producing an <code>IEnumerable&lt;IReadOnlyList&lt;int&gt;&gt;</code>: this would probably be slower than a non-lazy version for small inputs, but would enable you to handle larger triangles when you would otherwise run out of memory (would be linear rather than quadratic), and the improved memory characteristics may even lead to better performance.</p>
    </div>