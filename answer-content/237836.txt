<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>recsolve</code> method changes a value in the grid, then validates the entire puzzle, recursing if it's valid or aborting if that change broke the puzzle.  However, changing one number only impacts three things.  The column/row for the value that's been changed and the box that contains it.  A change to the top left box isn't going to impact if the bottom right box is valid, so there's not point testing it.  Providing an overload of the <code>isValid</code> method that takes in the coodinates of the changed cell can result in a significant speed improvement.</p>

<p>The recursive call in <code>recsolve</code> becomes:</p>

<pre><code>if (s.isValid(x,y) &amp;&amp; recsolve(s)) {
</code></pre>

<p>And <code>isValid</code> would look something like:</p>

<pre><code>public boolean isValid(int changedX, int changedY) {
    int boxChangedX = changedX - changedX % fWidth;
    int boxChangedY = changedY - changedY % fHeight;

    return isValidSet(getRow(changedY))
            &amp;&amp; isValidSet(getCol(changedX))
            &amp;&amp; isValidSet(getBox(boxChangedX, boxChangedY));
}
</code></pre>

<p>Note, I've extracted a common function, which checks if the values returned from <code>getRow</code>, <code>getCol</code> or <code>getBox</code> contain a valid set of values..</p>

<pre><code>private boolean isValidSet(int[] knownData) {
    int[] values = new int[size + 1];
    for (int i : knownData) {
        if (values[i] != 0) {
            return false;
        }
        values[i] = i;
    }
    return true;
}
</code></pre>

<p><strong>Other thoughts</strong></p>

<ul>
<li>Give parameter variables descriptive names, they're often expanded by intellisense... <code>Sudoku(int w, int h, int size, String raw)</code>, <code>w</code> could be <code>width</code>.  Variable naming in general could be more expressive.</li>
<li>We don't tend to prefix <code>this.</code> unless there's a name clash, so just <code>fWidth = w;</code> is fine...</li>
<li><p>When an <code>if</code> always returns, you don't need to have an <code>else</code>.   So, rather than:</p>

<blockquote>
<pre><code>if (values[i] != 0) {
    return false;
} else {
    values[i] = i;
}
</code></pre>
</blockquote>

<p>Prefer:</p>

<pre><code>if (values[i] != 0) {
  return false;
}
values[i] = i;
</code></pre></li>
</ul>
    </div>