<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>list -&gt; set -&gt;list</code> conversion seems pretty wasteful, especially if there are not too many dupes. Besides, it introduces <span class="math-container">\$O(N)\$</span> space complexity. Even though <code>set</code> promises a constant time inserts and lookups, the constant could be quite large (for large sets) due to the poor referential locality (hence plenty of cache misses). That said, since you try to sort/heapify an entire list, the time complexity would be at least <span class="math-container">\$O(N \log N)\$</span>.</p>

<p>The kata doesn't specify how big <code>n</code> could be. If it is comparable to <code>N</code>, there is nothing you could do, besides ditching the set. Just sort the list, and linearly traverse it discarding dupes.</p>

<p>However, if <code>n</code> is much less than <code>N</code>, consider using a fixed-size heap of at most <code>n</code> entries. Bite the bullet and implement <code>sift_down</code> with a couple of twists:</p>

<ol>
<li>If you hit an element equal to the one being sifted, discard the latter.</li>
<li>If the element is sifted beyond <code>n</code>, discard it.</li>
</ol>

<p>Once the entire list is processed, either the heap is not filled completely (return <code>None</code>, or return the maximum.</p>

<p>The time complexity of this approach is <span class="math-container">\$O(N \log n)\$</span>, and the space complexity is <span class="math-container">\$O(n)\$</span>.</p>
    </div>