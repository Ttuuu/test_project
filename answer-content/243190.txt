<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>What is your opinion on the solving-algorithm?</p>
</blockquote>

<p>Let's do a performance test, here's my test case:</p>

<pre><code>int[][] sudoku = {
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,3,0,8,5},
    {0,0,1,0,2,0,0,0,0},
    {0,0,0,5,0,7,0,0,0},
    {0,0,4,0,0,0,1,0,0},
    {0,9,0,0,0,0,0,0,0},
    {5,0,0,0,0,0,0,7,3},
    {0,0,2,0,1,0,0,0,0},
    {0,0,0,0,4,0,0,0,9}};
</code></pre>

<p>On my PC, it took about 10 seconds. As Sudoku solving algorithms go, that's not horrible, but it's also not great. I can wait 10 seconds, but 10 seconds is a lot for a computer, it would be more reasonable to take some miliseconds (or less).</p>

<p>An important technique in constraint solving is propagating the consequences of choosing a particular value for a variable (the cells of a sudoku are variables in Constraint Satisfaction jargon). Propagating the consequences of filling in a cell means filling in other cells that have become "fillable". Doing this prevents the main recursive solver from trying options that are not consistent with the board, but <code>checkRow/checkColumn/checkBlock</code> still think are OK because the cell that would block that value is still empty. Roughly speaking, the more propagation, the better (up to a point).</p>

<p>The easiest propagation strategy is filling in <a href="http://hodoku.sourceforge.net/en/tech_singles.php#n1" rel="nofollow noreferrer">Naked Singles</a>. This can be done by trying all values for all empty cells, but a more efficient technique is collecting a set (or bitmask) of the possible values for all cells at once, and then going through them and promoting the singleton sets to filled-in cells. This is iterated until no more Naked Singles can be found. I benchmarked some code that implements that, that brings the test case that I'm using to around 2.2 seconds.</p>

<p>There are more propagation strategies for Sudoku, for example <a href="http://hodoku.sourceforge.net/en/tech_singles.php#h1" rel="nofollow noreferrer">Hidden Singles</a>. Again they could be found by brute force, but an alternative strategy is re-using the sets/masks from filling in the Naked Singles and using them to find values that are in exactly one of the cells in a row/column/block. There are various ways to do it. I benchmarked this as well, and by analysing the rows and columns (but not blocks) for Hidden Singles, the time improved to less than 0.3 miliseconds.</p>

<p>I can make that code available if you'd like, but perhaps you'd like to try your own approached to these techniques first.</p>

<p>More advanced propagation strategies are possible. Ultimately Sudoku is a game of intersecting AllDifferent constraints, for which there are special propagation techniques based on graph algorithms. There is a video about that <a href="https://www.coursera.org/lecture/solving-algorithms-discrete-optimization/3-2-3-inside-alldifferent-asyks" rel="nofollow noreferrer">on Coursera</a>.</p>

<p>An other possible technique is filling the board in a different order: by order of most-constrained variable (aka cell) first (a common technique in Constraint Satisfaction). The same bitmasks/sets can be used for that as are used for finding Naked Singles. For this benchmark, this technique only helped when not filling Hidden Singles, improving the time to around 80 miliseconds.</p>
    </div>