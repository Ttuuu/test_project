<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good effort. Still, there are many points even without going into allocator-support:</p>

<ol>
<li><p>You are missing a very important ctor (and the corresponding deduction guide):</p>

<pre><code>template &lt;class InputIt, SFINAE_here&gt;
vector(InputIt first, InputIt last);
</code></pre>

<p>Not only is it very useful in its own right, but copy-ctor and initializer_list-ctor can be trivially implemented in terms of it.</p></li>
<li><p>You are missing <code>.assign()</code>. The version using an iterator-range would be the preferred building-block for construction from an iterator-range which has to be counted for getting the size.</p></li>
<li><p>You are missing assignment from initializer_list, <code>.insert()</code>, <code>.data()</code>, and reverse-iterator-support.</p></li>
<li><p>Members should accept <code>const_iterator</code>s as inputs and return <code>iterator</code>s.</p></li>
<li><p>You can use the injected class-name (<code>Vector</code>) instead of specifying the template-parameters (<code>Vector&lt;T&gt;</code>). As a bonus, that is future-proof in case you later decide to add the allocator-support.</p></li>
<li><p><code>std::allocator&lt;T&gt;</code> is a trivial empty class. As such, any space it uses is wasted. Either use empty base optimization or just create it on-demand.</p></li>
<li><p>You are missing comparison operators.</p></li>
<li><p>Using in-class-initializers allows you to simplify your ctors. The default ctor can then even be made trivial by <code>= default;</code>-ing it in-class.</p></li>
<li><p><code>Vector&lt;T&gt;::Vector(size_type initial_size, const T&amp; value)</code> is unsafe. If an exception gets thrown when allocating, all pointer-members are still indeterminate on entrance to the dtor. If one gets thrown later, all but <code>.dynamic_array</code> will be indeterminate, with equally bad results.</p></li>
<li><p><code>Vector&lt;T&gt;::Vector(size_type initial_size)</code> creates an ephemeral <code>T</code> and then copy-constructs all members using the previous ctor. While that works for many types, for some it is silently wrong, inefficient, or won't even compile.</p></li>
<li><p>Don't pessimize the common case by checking for self-assignment. Simply swap everything.</p></li>
<li><p><code>void Vector&lt;T&gt;::resize(size_type new_size, const T&amp; value)</code> really should go for just enough if it has to reallocate.</p></li>
<li><p>Point 10 also applies to <code>void Vector&lt;T&gt;::resize(size_type new_size)</code>.</p></li>
<li><p><code>.insert()</code>, <code>.push_back()</code>, and <code>.resize()</code> from a <code>const&amp;</code> must work right even if passed an element of the container!</p></li>
<li><p><code>.erase(Iter, Iter)</code> should return the passed iterator if the range is empty, not anything else.</p></li>
<li><p><code>std::uninitialized_move()</code> was introduced in C++17, no need for <code>std::uninitialized_copy()</code> + move-iterators.</p></li>
<li><p>There is a good reason to avoid doubling capacity on reallocation: If you stay below that, re-use of returned memory becomes possible.</p></li>
<li><p>Non-member <code>swap()</code> should also be <code>nowxcept</code>.</p></li>
</ol>
    </div>