<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the simplicity of your function, it's pretty easy to understand the implementation.</p>

<p>Couple things I would consider:</p>

<p>A function "computeCountUniqueWords" does a very specific task that counts the number of unique words given a string. But depending on the context of this code(for example, where it's being used, maybe just as a utility library), I probably would prefer a more general function that just gets the unique words in an array and implement "computeCountUniqueWords" based on it. It's a little more functional and have a more general utility. For example:</p>

<pre><code>const getUniqueWords = (string) =&gt; {
  ...
  return uniqueWords; 
}

const computeCountUniqueWords = (string) =&gt; {
  return getUniqueWords(string).length;
}
</code></pre>

<p>Actually a lot of the times, you'll realize that the code reads very well without "computeCountUniqueWords" function by just calling <code>getUniqueWords(paragraph).length</code>.</p>

<p>Second thing to consider is what type of string data this function will run on. If performance is not a consideration such as we are processing a small number of strings(even possibly in the millions of words), I would keep the function written as is for the sake for readability and simplicity. </p>

<p>But if this is used on the scale of google crawler or something done frequently such as on mouse move event then the implementation as it stands would be inefficient and not ideal. If we think about it, we can do the 3 operations (splitting strings based on spaces, testing if the string is a valid word and remove uniqueness in one loop through the input string). As it stands, it's probably looping through the input string 3 times which can be a big deal for a very large input string or in a DOM environment, it could hurt the frames per second of the page.</p>
    </div>