<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Type annotations and more descriptive variable names (from my perspective, preferably in English, heh) would make it easier for others to navigate the code and make specific suggestions, but here's how I'd suggest splitting the task up:</p>

<ol>
<li><p>Have a function that will read the file and return a <code>List[str]</code> of all the strings (i.e. split the file on blank lines and remove all the newlines).  If memory ends up being a limiting factor, you'd want to implement this as a generator instead (and you'll end up potentially doing two passes through the file), but if you can hold the whole file in memory then it's easier to just read it once and hold the whole thing as a list.</p></li>
<li><p>Have a function that finds all the words of length M in a particular string that repeat exactly once (i.e. it returns a set of words).  You can maybe do this via some tricky regexing, or just brute-force trying every M-slice of the string and looking for repeat occurrences in the remainder of the string.  This will be relatively slow (the brute force method will be roughly O(n^2), a regex might be faster), but you won't have to call it very many times, hopefully.</p></li>
<li><p>Go through the list and start using that repeating-subset-finding function.  Each time you get the set of words from a substring, intersect it with your set.  Once you have one (and this might happen on the first string you check), that's your secret word!  You finished the hard part.</p></li>
<li><p>Now that you know the secret word, the rest is easy.  Go through the list and use the builtin <code>find</code> function to find the indices you're after.</p></li>
<li><p>If you want to optimize further (I ended up implementing this below), do two types of search: first get a list of candidates from the shortest input string, and then go through all the other inputs and verify that each of those occurs once, eliminating bad candidates as you go.  The number of <code>find()</code> operations you need to do will shrink as you eliminate candidates, and once you're down to one you're finished.</p></li>
</ol>

<pre><code>from typing import List, Set, Tuple

def get_secret_word(input_file: str) -&gt; Tuple[str, List[int]]:
    """Returns the secret word and a list of its indices."""

    def load_file(input_file: str) -&gt; Tuple[int, List[str]]:
        """Returns length of the needle and all the haystacks."""
        with open(input_file) as file:
            length = int(file.readline())
            strings = [""]
            line = file.readline()
            while line:
                line = line.strip()
                if line:
                    strings[-1] += line
                else:
                    strings.append("")
                line = file.readline()
            return length, strings

    def generate_words(length: int, haystack: str) -&gt; Set[str]:
        """Returns words of this length that occur in this haystack."""
        return {haystack[i:i+length] for i in range(len(haystack)-length+1)}

    def find_known_words(needles: Set[str], haystack: str) -&gt; Set[str]:
        """Search the haystack for this set of needles,
        and return just the needles that were found once."""
        found = set()
        for needle in needles:
            i = haystack.find(needle)
            if i == -1:   # zero occurrences
                continue
            i = haystack.find(needle, i + len(needle))
            if i == -1:   # exactly one occurrence
                found.add(needle)                
        return found

    # Load up the file.
    length, haystacks = load_file(input_file)

    # Build an initial set of needles from the smallest haystack.
    needles = generate_words(length, min(haystacks, key=len))
    for haystack in haystacks:
        # Our secret word is the one that is unique
        # in ALL haystacks.  Process of elimination...
        if len(needles) == 1:
            break
        needles &amp;= find_known_words(needles, haystack)
    assert len(needles) == 1, "No secret word found!"
    secret = needles.pop()

    # Return the secret word and a list of its indices in the input strings.
    return secret, [haystack.find(secret) for haystack in haystacks]
</code></pre>
    </div>