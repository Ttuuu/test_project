<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this review, I am only looking at options for addressing the loops. With the number of rows you have described, finding efficiencies in the loops should have a big payoff. </p>

<p>Don't collapse lines of code using ":", it is not necessary, breaks indenting and makes it harder to find some lines. </p>

<h2>Loop 1</h2>

<pre><code>'get count of fields (columns) with data
Dim colCount As Long
colCount = rDataSheet.Cells(1, Columns.count).End(xlToLeft).Column

For z = 1 To headerColl.count
    'find the needed header from header collection and get the column number
    With rDataSheet.Range(Cells(1, 1), Cells(1, colCount))
        Set rFind = .Find(What:=headerColl(z), LookAt:=xlWhole, MatchCase:=False, SearchFormat:=False)
        If Not rFind Is Nothing Then
            'gives me the column number
            colNum = rFind.Column
            'add column number to headerArray
            If z &lt;&gt; headerColl.count + 1 Then
                headerArray(z) = colNum
            End If
        End If
    End With
Next z
</code></pre>

<p>You use the Excel model with <code>Range</code>, <code>.Find</code>, <code>.Column</code>. With your current example, this would only loop 3 times, so is not significant in terms of performance. However, this presents a good training opportunity. </p>

<p>You work with a single range(<code>rDataSheet.Range(Cells(1, 1), Cells(1, colCount))</code>), but you set that range each time in the loop. If you were using Excel objects, you coud set the <code>With</code> statement outside of the loop and save some performance time there.</p>

<p>But you are only working with the values, so this allows us to use Arrays.</p>

<pre><code>Dim dataValues as Variant
Dim hCollValue as Variant ' Must be variant to work in a for each loop
dataValues = rDataSheet.Range(Cells(1, 1), Cells(1, colCount)).Value
'For each hCollValue in headerColl ' was For z = 1 To headerColl.count
For z = 1 To headerColl.count
    'find the needed header from header collection and get the column number
    For i = LBound(dataValues) to UBound(dataValues)
        If UCase(CStr(dataValues(i,1))) = UCase(CStr(headerColl(z)) Then
            headerArray(z) = i
            Exit For
        End If
    Next i
Next z
</code></pre>

<p>Iterating through the entire loop to find the one value (noting that I exit when the first one is found) can be cheaper than calling the equivalent Excel function. You can see now that I am not touching Excel at all during that loop. Because of the use of Variants, I have cast them to strings, and taken the UpperCase to conduct a case-insensitive search.</p>

<p>The array returned by a <code>Range</code> of values is always two-dimensional. Because we are taking it from a single column, the array is only one wide, hence why I have used <code>dataValues(i,1)</code></p>

<p>Point to note in your original loop:</p>

<pre><code>            'If z &lt;&gt; headerColl.count + 1 Then ' This can never be false, because you are in a loop
            '    headerArray(z) = colNum
            'End If
</code></pre>

<p>Another thing to consider is the use of a custom class that acts as a data structure. In that way, you could:</p>

<pre><code>For Each MyCustomClass in headerColl
    ....
        If dV = MyCustomClass.HeaderTitle Then
            MyCustomClass.ColumnNumber = i
        End If
    ....
Next MyCustomClass
</code></pre>

<p>Could be a real game changer if you tie lots of data or logic to these items. I suggest a <code>Class</code> and not a <code>Type</code> because you cannot iterate over a <code>Type</code> collection in VBA and there are some other wrinkles.</p>

<h2>Loop 2</h2>

<pre><code>'create temp strings
For y = 2 To dataRowCount
    For x = 1 To UBound(headerArray)
        tempStr1 = Cells(y, headerArray(x))
        str1 = str1 &amp; tempStr1
        tempStr1 = vbNullString
    Next x
    rDataSheet.Cells(y, aggCol) = str1
    str1 = vbNullString
Next y
</code></pre>

<p>This is where you are going to get the real performance hit. I am also finding it difficult to unpack the loop and what you are trying to achieve. If I am interpreting this right, you are creating a temporary string out of the values across the row (selected columns only), and putting this string into another column on the same row. Except in a different sheet.</p>

<p>Note: Always use qualified ranges, as you can't really tell which is the active sheet once the code is running.</p>

<pre><code>Dim sourceStrings as Variant ` this will be a multi-dimensional array
Dim targetArray(dataRowCount - 2 + 1, 1) as String

Dim unionRange as Range
Dim r as Long, r2 as Long
With [ThisSheet] ' whatever you have set this sheet too - qualify all ranges.
    For r = LBound(headerArray) to UBound(headerArray)
        If unionRange is Nothing Then
            set unionRange = .Range(.Cells(2, headerArray(r)),.Cells(dataRowCount, headerArray(r)) )
        Else
            set unionRange = Union(unionRange, .Range(.Cells(2, headerArray(r)),.Cells(dataRowCount, headerArray(r))))
        End If
    Next r
End With 
sourceStrings = unionRange.Value

For r = LBound(sourceStrings,1) to UBound(sourceStrings,1) ' loop through the first dimension - but "1" is optional default and not really needed here.
    targetArray(r) = vbNullString '""
    For r2 = LBound(sourceStrings,2) to UBound(sourceStrings,2) ' loop through the second dimension
        targetArray(r) = targetArray(r) &amp; sourceStrings(r, r2)
    Next r2
Next r  
With rDataSheet
    .Range(.Cells(2,aggCol),.Cells(dataRowCount,aggCol)).Value = targetArray
End With 
</code></pre>

<p>The first <code>r</code> loop seems a bit complicated, but it is short (3 iterations in your example) and it now sets up the quicker array.
DISCLAIMER: I have not tested this. Possible may require some tweaking if Excel does funky things with values from a multi-area range.</p>

<p>Instead of switching in and out of Excel (headers * rowcount + rowcount) times, you would only do it (headers + insert values) times - which in this case is about 4 times. </p>

<h2>Loop 3</h2>

<p>Sometimes, there is not much that can be done. I have had a quick look, but I don't think using Arrays here is going to help much because of the diverse amount of data and Excel object items (not just <code>.Value</code>) that are used. Avoid using <code>.Select</code>.</p>
    </div>