<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>for ease of readability and understanding:</p>

<ol>
<li>consistently indent the code.  indent after every opening brace '{'. unindent before every closing brace '}'.  Suggest each indent level be 4 spaces.</li>
<li>use meaningful variable and parameter names.  Names should indicate <code>content</code> or <code>usage</code>  (or better, both)</li>
<li>separate code blocks ( <code>for</code> <code>if</code> <code>else</code> <code>while</code> <code>do...while</code> <code>switch</code> <code>case</code> <code>default</code> ) by a single blank line.</li>
<li>separate functions by 2 or 3 blank lines (be consistent)</li>
<li>it is best to not introduce random blank line</li>
<li>is is best to not introduce random indenting</li>
<li>follow the axiom: <em>only one statement per line and (at most) one variable declaration per statement.</em>  </li>
<li>Treat the closing brace '}' as a separate statement.</li>
<li>regarding: <code>int main(int argc, char *argv[])</code>  since neither parameter is being used, suggest using: <code>int main( void )</code></li>
<li>regarding: <code>void print(int STCK[][DM_STCK], int DM_S)</code>  since 'int DM_S' is not used, either eliminate that parameter or the first line in the body of the function should be: <code>(void)DM_S;</code></li>
<li>it is a bad programming practice to include header files those contents are not being used.  I.E. suggest removing the statement: <code>#include &lt;stdlib.h&gt;</code></li>
<li>strongly suggest removing the label: <code>ODINO_0</code> and replacing any 'goto' to <code>ODINO_0</code> with the three lines of code following the label.  Similar considerations exist for <code>ODINO_1</code> and <code>ODINO_2</code></li>
<li>since <code>DM_S</code> is being passed as a <code>size_t</code>, any other variables used with it should also be declared as <code>size_t</code>, not <code>int</code></li>
<li>for ease of readability and understanding: DO NOT use all CAPS for variable, parameter, and function names. (all CAPS is considered 'shouting')  It is appropriate to use all caps for macro names.</li>
<li>for ease of readability and understanding: insert a (reasonable) space: inside parens, inside square brackets, after commas, after semicolons, around C operators</li>
</ol>
    </div>