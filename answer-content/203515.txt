<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Ridiculously Large Bug</h2>

<p>Okay this is a tiny bit embarrassing, but apparently I'm an idiot.</p>

<p>Remember when I said I recently had this in CS class? Well apparently I hadn't been paying attention. In the slightest... Regular expressions have parentheses. To be syntactically valid, these parentheses need to be correctly balanced.</p>

<p>How this makes for a ridiculously large bug? For that we need to realize that Regular expressions can't recognize syntactically valid regular expressions. To determine whether partentheses in an arbitrary string are balanced, you need <strong>some</strong> way to count the opening and closing parens. That's simply not possible with regular expressions.</p>

<p>That leads to the "unfortunate" circumstance that the following regular expression is not correctly recognized by the Parser:</p>

<pre><code>(a)(b)
</code></pre>

<p>BEHOLD! The true ridiculousness of the bug. This is not even remotely complicated an expression. It's just that this doesn't get dealt with correctly.</p>

<p>The solution is to do one of the following things:</p>

<ul>
<li>Rewrite the whole parser as a "recursive descent parser" (which is what I did in the end</li>
<li>Use something like ANTLR (which conveniently is already in the project) to generate a parser that can deal with parenthesized expressions</li>
<li>Change how groups are recognized (this may have been the easiest instant fix)</li>
</ul>

<p>The following is how groups are now extracted:</p>

<pre><code>    private static string DescendGroup(string specifier)
    {
        int length = 0;
        int openingCount = 0;
        bool escapeToggle = false;
        foreach (var digit in specifier) 
        {
            if (digit == '(' &amp;&amp; !escapeToggle)
            {
                openingCount++;
                escapeToggle = false;
            }
            if (digit == ')' &amp;&amp; !escapeToggle)
            {
                openingCount--;
                escapeToggle = false;
                if (openingCount &lt;= 0)
                {
                    return openingCount == 0 ? specifier.Substring(0, length + 1) : "";
                }
            }
            if (digit == '\\')
            {
                escapeToggle = !escapeToggle;
            }
            length++;
        }
        return "";
    }
</code></pre>

<h3>Minor additional corrections</h3>

<p>While I was at this rewrite, I also extracted the Expressions and Atoms into dedicated files, which reduces the knowledge required to correctly deal with the project.</p>

<p>I also changed <code>Group</code> to no longer invoke the parser in it's constructor. That is tight coupling and not even really the job of Group.</p>
    </div>