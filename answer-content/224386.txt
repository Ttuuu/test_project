<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In terms of the times on LeetCode, they can be dependent upon the server load as much as the code.  I tried your code and got a range of times from 100 ms to 136 ms.  Holding onto the last node is a better solution than repeatedly trying to find it but on a list of only a few nodes I don't know how much impact it would have.</p>

<p>In terms of the code, this strikes me as a good place to use the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/member-access-operators" rel="nofollow noreferrer">Null Condtional Operator (?.)</a>.  We can get around the repeated null check on the tailnode by using a dummy head for the return list.</p>

<pre><code>public ListNode AddTwoNumbers(ListNode l1, ListNode l2) 
{
    ListNode l3 = new ListNode(-1);  // dummy head
    ListNode tailNode = l3;
    int remainder = 0;
    while (l1 != null || l2 != null) {

        var sum = (l1?.val ?? 0) + 
                  (l2?.val ?? 0) + 
                  remainder;
        l1 = l1?.next;
        l2 = l2?.next;

        if (sum &gt; 9) {
            remainder = sum / 10;
            sum = sum % 10;
        }
        else {
            remainder = 0;
        }
       tailNode.next = new ListNode(sum);
       tailNode = tailNode.next;

    }
    if (remainder != 0) {
        tailNode.next = new ListNode(remainder);
    }
    return l3.next; // skip the dummy head when returning
}
</code></pre>
    </div>