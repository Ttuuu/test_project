<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some points.</p>

<ul>
<li><p><code>window</code> is the default object. You don't need to use is. It is highlighted by the fact you don't use it sometimes <code>window.document</code>, or <code>window.TaskManager</code> but then for objects you are unsure of <code>window.addEventListener</code> you add it.</p></li>
<li><p>It is not a good idea to stack <code>requestAnimationFrame</code> requests. </p>

<ol>
<li><p>Events related to mouse movements can fire at rates much higher than the display refresh rate of 60fps.</p></li>
<li><p>It introduces an up to 16ms delay on the event (and yes users will notice it as a sluggish response). </p></li>
<li><p>If used in conjunction with standard event handlers you will be handling events out of order. </p></li>
<li><p>Completely decouples the handler from the event.</p></li>
</ol></li>
<li><p>You have decoupled (ignoring above point) the event from the handler because you don't pass on the event object. If you are going to manage events you should pass on the event object so that the handler can access the event.</p></li>
<li><p><code>registerTask</code> will happily push events to the stack without checking if the supplied object is a valid. When you come to handling the event eg <code>processTasksOnScroll</code> it will throw if <code>task.target</code> or <code>task.callback</code> do not result in a function reference. If it throws none of the following events will be handled.</p></li>
<li><p>If any of the tasks throws an uncaught error then all following tasks will not be called.</p></li>
</ul>

<p>Without knowing more about the project its hard to say more about this approch.</p>

<p>I do feel personally that events should not be one to many. For each event object created there should be one unbroken execution path that completely handles the event. Having events trigger more events is just going to result in an unmanageable mess, as you add code to conditional communicate between handlers wanting priority, or exclusivity.</p>

<p>That is not to say you can not have one handler for many events and then selectively redirect the event to a specific handler. </p>
    </div>