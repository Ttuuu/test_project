<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>x</code> and <code>y</code> are terrible variable names.  <code>length1</code> and <code>length2</code> would be better.</p>

<hr>

<pre><code>matrix = [[-1]*(x) for val in range (0,y)]
</code></pre>

<p>You are not using <code>val</code> in this list comprehension.  Convention is to use <code>_</code> for throw-away, variables needed for syntax reasons, but not actually used.</p>

<p><code>0</code> is the default minimum in <code>range()</code> statements.  If you loop from <code>0</code> to some limit, you don't need to mention the <code>0</code>; you can just use <code>range(y)</code>.</p>

<p>You are never reading the <code>-1</code> value anywhere.  The value is always overwritten by another value before it is read.  To make this clearer, store <code>None</code> instead of <code>-1</code> in the matrix you are creating.</p>

<pre><code>matrix = [ [None] * x  for _ in range(y) ]
</code></pre>

<hr>

<p>Using <code>i-1 &lt; 0</code> is an awkward way of writing <code>i == 0</code>.  Similarly, <code>i-1 &gt;= 0</code> can be written simply as <code>i &gt; 0</code>, or perhaps even <code>i</code>, since non-zero values are "Truthy".</p>

<hr>

<p>The following is awkward and hard to understand.  6 statements, 4 assignments, two conditionals.  What does it do?  What does it mean?</p>

<pre><code>    val1 = 0
    val2 = 0
    if i-1 &gt;= 0:
      val1 = matrix[i-1][j]
    if j-1 &gt;= 0:
      val2 = matrix[i][j-1]
</code></pre>

<p>Python has a <code>x if cond else y</code> trinary operator, which may help simplify and clarify the code.</p>

<pre><code>    val1 = matrix[i-1][j] if i &gt; 0 else 0
    val2 = matrix[i][j-1] if j &gt; 0 else 0
</code></pre>

<p>That a lot more concise.  Two statements which look the similar; the differences should be clear, and it should be easier to understand what those differences mean.</p>

<pre><code>  for i in range(y):
    for j in range(x):

      if word1[j] == word2[i]:
        matrix[i][j] = 1
        if i &gt; 0 and j &gt; 0:
          maxtrix[i][j] += matrix[i-1][j-1]

      else:
        val1 = matrix[i-1][j] if i &gt; 0 else 0
        val2 = matrix[i][j-1] if j &gt; 0 else 0
        matrix[i][j] = max(val1, val2)
</code></pre>

<hr>

<p>The statement <code>return matrix[y-1][x-1]</code> returns the last column of the last row.  You don't actually need to know the dimensions of the matrix for this.  Simply <code>return matrix[-1][-1]</code>.</p>

<hr>

<p>After you generate row 1, you no longer need row 0 of the matrix.  After you generate row 2, you no longer need row 1 of the matrix.  After you generate row 3, you no longer need row 2 of the matrix.  This means you could solve the problem in <span class="math-container">\$O(m)\$</span> memory, instead of <span class="math-container">\$O(m*v)\$</span> memory, by simply maintaining a <code>prev_row</code> and <code>next_row</code>, instead of an entire <code>matrix</code>.</p>
    </div>