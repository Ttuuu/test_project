<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Refactoring</strong></p>

<p>I took the code you had and spent about 10 minutes just refactoring it as I believe that is a good way to get to OOD and OOP.  Refactoring is simply rearrangement of the code (to start). The idea is to make is easy to understand. </p>

<p>Here's an example of a refactor (below). Couple of things about VS2013 refactoring that I don't care for 1) When you generate methods they come up static sometimes when you don't want that 2) If you have global vars, and you generate a method it will name the input parm the same thing. I didn't change those two things to show you what happens.</p>

<pre><code>namespace Cash
{
 public class product
  {
    public bool is_import { get; set; }

    public bool is_other { get; set; }

    public string prod_name { get; set; }

    public decimal prod_price { get; set; }
}
</code></pre>

<p>I moved the vars to global scope, as it makes sense, but is a preference only. I do this myself to remind of the need to initialize the content and to ensure they are always re-inited later.</p>

<pre><code>internal class Program
{
    private decimal _Total_tax = 0;

    private bool isImport = false;

    private bool isOther = false;

    private List&lt;product&gt; productList = new List&lt;product&gt;();

    private string productName = string.Empty;

    private decimal productPrice = 0;

    private string selectedMenuItem = string.Empty;

    public decimal Total_tax
    {
        get
        {
            return this._Total_tax;
        }

        set
        {
            this._Total_tax = value + Total_tax;
        }
    }
</code></pre>

<p>This section has many repeating patterns. Each if statement calls <code>customRound</code> (twice), when you see repeating patterns you can think about abstracting them.  </p>

<p>One thing that comes to mind is passing in a product, or a superclass of product with a tax field.  All products have prices and all products will have a tax even if it's zero.  Taxes are not usually a part of the product itself but could be a decoration of the product.</p>

<pre><code>public decimal CalcTax(decimal price, bool is_other, bool is_import)
{
    decimal _price = 0;

    if (is_import == true &amp;&amp; is_other == true)
    {
        _price = customRound((price * 15) / 100) + price;
        Total_tax = customRound((_price - price));
    }

    if (is_import == true &amp;&amp; is_other == false)//
    {
        _price = customRound((price * 5) / 100) + price;
        Total_tax = customRound((_price - price));
    }

    if (is_import == false &amp;&amp; is_other == true)
    {
        _price = customRound((price * 10) / 100) + price;
        Total_tax = customRound((_price - price));
    }

    if (is_import == false &amp;&amp; is_other == false)
    {
        _price = price;
        Total_tax = customRound((_price - price));
    }

    return _price;
}

public decimal customRound(decimal num)
{
    return Math.Round(num * 20.0M, MidpointRounding.AwayFromZero) / 20.0M;
}

public void Print(List&lt;product&gt; prod_list)
{
    var result = prod_list.GroupBy(x =&gt; new { x.prod_name, x.prod_price, x.is_other, x.is_import })
                                     .Select(x =&gt; new
                                     {
                                         prod_name = x.Key.prod_name,
                                         sum = x.Sum(z =&gt; z.prod_price),
                                         count = x.Count(),
                                         prod_price = x.Key.prod_price,
                                         is_other = x.Key.is_other,
                                         is_import = x.Key.is_import,
                                     });

    foreach (var item in result)
    {
        if (item.count &gt; 1)
        {
            Console.WriteLine(item.prod_name + ": " + string.Format("{0:0.00}", CalcTax(item.sum, item.is_other, item.is_import)) + " (" + item.count + " @ " + item.prod_price + ")");
        }
        else
        {
            Console.WriteLine(item.prod_name + ": " + string.Format("{0:0.00}", CalcTax(item.sum, item.is_other, item.is_import)));
        }
    }

    Console.WriteLine("Sales Taxes: " + string.Format("{0:0.00}", Total_tax));
    Console.WriteLine("Total: " + string.Format("{0:0.00}", prod_list.Sum(item =&gt; item.prod_price) + Total_tax));
    Console.ReadLine();
}
</code></pre>

<p>This is the main entry point and now looks more like a controller than a large bunch of code. </p>

<pre><code>public void ShowMenu()
{
    while (true)
    {
        Initialize();

        selectedMenuItem = GetAnswers(selectedMenuItem);

        if (UserSelectedEnd()) break;

        isImport = CheckImport(isImport);

        isOther = CheckOther(selectedMenuItem, isOther);

        productPrice = EnterPrice(productPrice);

        productName = EnterProductName(productName);

        AddProduct(productName, isImport, isOther, productPrice, productList);
    }
}
</code></pre>

<p>This is how refactoring would have clued me into the need to pass product around:</p>

<pre><code>public void ShowMenu()
{
    while (true)
    {
        Initialize();

        selectedMenuItem = GetAnswers(selectedMenuItem);

        if (UserSelectedEnd()) break;

        var product = new product();

        GetImportAnswer(product);

        GetOtherAnswer(product);

        GetPriceAnswer(product);

        GetProductName(product);

        productList.Add(product);
    }
}
</code></pre>

<p>These are the auto generated methods from Visual Studio Note they are all Static (not necessarily a good thing).  Refactoring into small chunks like this allows you to start thinking about separation of concerns.  Over time you'll automatically do this because it's much easier to understand.</p>

<pre><code>private static void AddProduct(string productName, bool isImport, bool isOther, decimal productPrice, List&lt;product&gt; productList)
{
    productList.Add(new product { is_import = isImport, prod_name = productName, prod_price = productPrice, is_other = isOther });
}
</code></pre>

<p><strong>Note:</strong> Each of these methods below could have taken a product instance in as a parameter.  I find it is often much better to pass class instances when dealing with lots of properties.  This would be a redesign of your program where a new product is instantiated at top of question loop. </p>

<pre><code>private static bool CheckImport(bool isImport)
{
    Console.WriteLine("Is this product an import? (Y/N)");

    isImport = (Console.ReadLine().ToUpper().Equals("Y")) ? true : false;
    return isImport;
}

private static bool CheckOther(string selectedMenuItem, bool isOther)
{
    isOther = (selectedMenuItem.Equals("2")) ? true : false;
    return isOther;
}

private static decimal EnterPrice(decimal productPrice)
{
    Console.WriteLine("***Please enter the price***");
    productPrice = Convert.ToDecimal(Console.ReadLine());
    return productPrice;
}

private static string EnterProductName(string productName)
{
    Console.WriteLine("Please enter the descriptive name of the product");
    productName = Console.ReadLine();
    return productName;
}

private static string GetAnswers(string selectedMenuItem)
{
    Console.WriteLine("Sales Tax");
    Console.WriteLine();
    Console.WriteLine("***Please Select the Item Type***");
    Console.WriteLine("1. Book, Food or Medical Product");
    Console.WriteLine("2. Other");
    Console.WriteLine("Please select a menu option or 0 to end:");
    selectedMenuItem = Console.ReadLine();
    return selectedMenuItem;
}
</code></pre>

<p>If I wanted to use the product as a parameter, the code above would look like this: </p>

<pre><code>private void GetImportAnswer(product prod)
{
    Console.WriteLine("Is this product an import? (Y/N)");

    prod.is_import = (Console.ReadLine().ToUpper().Equals("Y")) ? true : false;
}

private void GetOtherAnswer(product prod)
{
    prod.is_other = (selectedMenuItem.Equals("2")) ? true : false;
}

private void GetPriceAnswer(product prod)
{
    Console.WriteLine("***Please enter the price***");
    prod.prod_price = Convert.ToDecimal(Console.ReadLine());
}

private void GetProductName(product prod)
{
    Console.WriteLine("Please enter the descriptive name of the product");
    prod.prod_name = Console.ReadLine();
}

private  string GetAnswers(string selectedMenuItem)
{
    Console.WriteLine("Sales Tax");
    Console.WriteLine();
    Console.WriteLine("***Please Select the Item Type***");
    Console.WriteLine("1. Book, Food or Medical Product");
    Console.WriteLine("2. Other");
    Console.WriteLine("Please select a menu option or 0 to end:");
    selectedMenuItem = Console.ReadLine();
    return selectedMenuItem;
}
private static void Main(string[] args)
{
    Program prog = new Program();
    prog.ShowMenu();
}
private void Initialize()
{
    selectedMenuItem = null;
    productName = string.Empty;
    isImport = false;
    isOther = false;
    productPrice = 0;
}
private bool UserSelectedEnd()
{
    if (selectedMenuItem.Equals("0"))
    {
        Print(productList);
        return true;
    }
    return false;
}
</code></pre>

<p>Anyway, I thought you showed some good C# skills. You'll find a good job!</p>
    </div>