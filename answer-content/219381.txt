<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming Convention</h2>

<hr>

<p>To answer I think your method names are unnecessarily long and overly descriptive.</p>

<p><em>executeNbpParserEngine</em> is a little more readable then <em>executeNBPParserEngine</em> as it doesn't hide Parse.
When working with acronyms:
One should take into account if the abbreviation is well known such as XML, HTTP, JSON.
if the abbreviation is at the end ex. <em>executeParserEngineFromNBP</em> then it is even more readable.
<a href="https://stackoverflow.com/questions/2236807/java-naming-convention-with-acronyms">read more here</a></p>

<p>I.e When I read the function name <strong><em>findDaysBetweenFirstAndSecondDate</em></strong>
It's difficult to read.
Your function name should work with your arguments name and return type to give a more accurate description.</p>

<h2>Code review:</h2>

<hr>

<p>1: Initialise the Scanner Object in line as it will improve Maintainability if you need multiple constructors in the future.</p>

<pre><code>private Scanner scanner = new Scanner(in); 
</code></pre>

<p>2: Switch <em>executeNBPParserEngine</em> to <em>executeNbpParserEngine</em> it a bit cleaner
3: <em>findDaysBetweenFirstAndSecondDate</em> to <em>getDaysBetween</em></p>

<p>Also, you do not have to declare a variable just run collect on the return from LocalDate: datesUntil.</p>

<pre><code>public List&lt;LocalDate&gt; getDaysBetween(String startDateString, String endDateString) {
    LocalDate startDate = LocalDate.parse(startDateString);
    LocalDate endDate = LocalDate.parse(endDateString);
    return startDate.datesUntil(endDate.plusDays(1)).collect(Collectors.toList());
}
</code></pre>

<p>4: Combine <em>getSellingRateFromDOM</em> &amp;&amp; <em>getBuyingRateFromDOM</em> as they are too similar.
change to </p>

<pre><code>  float getFieldFromDOM(Element eElement,String tag) {
return Float.parseFloat((eElement
        .getElementsByTagName(tag)
        .item(0)
        .getTextContent().replaceAll(",", ".")));
</code></pre>

<p>}</p>

<p>Also, add final strings that contain tag ex.kurs_kupna</p>

<pre><code>private final String BUY_RATE_TAG = "kurs_kupna";
private final String SELL_RATE_TAG = "kurs_sprzedazy";
</code></pre>
    </div>