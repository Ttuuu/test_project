<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have only 2 things to note.</p>

<ol>
<li><p>Returning the same status code as the remote server could lead to confused clients of your API due to incorrect status codes. What if the remote server has returns a 5xx status code? Your server didn't have an internal server error, the remote did, but then why is your server returning a 5xx status code?</p>

<p>Instead, I recommend replacing it with returning a fixed status code (or something depending on the status code the remote API returned). The method name is <code>Get</code>, so I'd go with a <code>404 Not Found</code>.</p></li>
<li><p>Use attributes. In ASP.NET and ASP.NET Core the runtime can figure out which method to call by the http method and the name of it (call <code>Get</code> when an http get request comes, <code>Post</code> when a post comes etc), but it would be a lot more obvious not only for the runtime but also for developers if you named your methods a good name (e.g <code>GetName</code>) and decorate it with attributes specifying the route and the http request method to respond to.</p>

<p>Plus, you could also do yourself and any future developer a favor by specifying where the parameter to the method comes from. Right now it's part of the URI string (also called query parameters), but other methods might accept JSON to deserialize, you can do this by adding an attribute to the parameter. More about it <a href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/parameter-binding-in-aspnet-web-api" rel="nofollow noreferrer">here</a>.</p></li>
</ol>

<p>Putting number 2 into code:</p>

<pre class="lang-cs prettyprint-override"><code>[Route("Result/GetName")]
[HttpGet]
public async Task&lt;ActionResult&lt;Models.Result&gt;&gt; GetName([FromUri] string name) 
{
    // ...
}
</code></pre>
    </div>