<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is the typical situation where a hash table that maps elements to their frequency count is particularly well suited.</p>

<pre><code>(defun occurrences (lst)
  (let ((table (make-hash-table)))                   ; [1]
    (loop for e in lst
          do (incf (gethash e table 0)))             ; [2]
    (sort (loop for k being the hash-key of table    ; [3]
                  using (hash-value v)
                collect (cons k v))                         
          #'&gt;= :key #'cdr)))                         ; [4]
</code></pre>

<ol>
<li><p>We create the hash table: the key will be an element of the list, the value will be the frequency count. Note that it is not necessary to initialize it because the <code>gethash</code> function provide an initialization of the value for a key not already present in the table.</p></li>
<li><p>For each element of the list we increment (<code>incf</code>) the frequency value associated to it. This value is obtained by <code>gethash</code>, and if it is not yet in the table, it is initialized by default to 0 (the last parameter of <code>gethash</code>).</p></li>
<li><p>At the end, we use the “loop over hash table” syntax to collect all the pairs <code>(key count)</code> in a list, and we sort the list over the second element.</p></li>
</ol>

<p>This solution is simple, very efficient and elegant.</p>

<p>If you want to use only lists, here is a solution that has the same complexity of the sorting algorithm:</p>

<pre><code>(defun occurrences (lst)
  (if (null lst)                                            ; [1]
      nil
      (let ((sorted (sort (copy-list lst) #'string&lt;=)))     ; [2]
        (do ((c 1)                                          ; [3]
             (l (cdr sorted) (cdr l))                       ; [4]
             (el (car sorted) (car l))                      ; [5]
             (res nil))                                     ; [6]
            ((null l)                                       ; [7]
             (sort (cons (cons el c) res) #'&gt;= :key #'cdr)) ; [8]
          (if (eql (car l) el)                              
              (incf c)                                      ; [9]
              (progn
                (push (cons el c) res)                      ; [10]
                (setf c 1)))))))
</code></pre>

<ol>
<li>If the list is empty return nil.</li>
<li>Sort the element by their names (assuming they are atoms), so that equal elements are contiguous.</li>
<li>Start a loop. The variabile <code>c</code> count how many equal elements are found (the frequency).</li>
<li><code>l</code> is used to scan the sorted list. It starts from the second element of <code>sorted</code>.</li>
<li><code>el</code> is the current element, while <code>(car l)</code> is the second one.</li>
<li><code>res</code> is used to accumulate the result.</li>
<li>The iteration stops when <code>l</code> reaches the end of the list.</li>
<li>The result is obtained by adding the last couple (element, frequency) to the result, and sorting it by frequency.</li>
<li>The body of the loop: if the first element is equal to the second one increment the counter and continue to iterate.</li>
<li>Otherwise, a new element is found. So push the old one with its frequency on the result, and reset the counter to 1.</li>
</ol>
    </div>