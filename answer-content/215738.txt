<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><a href="https://sourcemaking.com/design_patterns/command" rel="nofollow noreferrer">Command Pattern</a></h1>

<blockquote>
  <p>[The] Command [Pattern] decouples the object that invokes the operation from the one that knows how to perform it.</p>
</blockquote>

<p>In our case this means, that a <code>Command</code> invokes a method of <code>TextPad</code>. Though it is the way around and <code>TextPad</code> invokes a <code>Command</code>.</p>

<p>For example, when we look into the method <code>display</code> in <code>TextPad</code>:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public void display() {
   DisplayCommand displayCommand = new DisplayCommand(this);
   displayCommand.execute();
}
</code></pre>
</blockquote>

<p>Actually the logic should not be in a <code>Command</code> instead it needs to be in the <code>TextPad</code> itself. In the following I extract the logic out of the <code>DisplayCommand</code> into <code>TextPad</code></p>

<pre class="lang-java prettyprint-override"><code>public void display() {
    List&lt;String&gt; list = this.textPad.getLines();
    list.subList(m, n).forEach(System.out::println);
}
</code></pre>

<p>After that we can invoke the method in <code>DisplayCommand</code>.</p>

<pre class="lang-java prettyprint-override"><code>@Override
public void execute() {
    textPad.display();
}
</code></pre>

<hr>

<p>The <code>TextPad</code> should work totally independent of <code>Command</code>. Additionally the fields <code>Stack&lt;Command&gt; undo</code> and <code>Stack&lt;Command&gt; redo</code> do not belong into <code>TextPad</code> but inside <code>TextPadDriver</code>.</p>

<hr>

<h2>Why this Way?</h2>

<p>Currently the code base violates against some opp-principles.</p>

<h3><a href="https://refactoring.guru/smells/feature-envy" rel="nofollow noreferrer">Feature Envy</a></h3>

<blockquote>
  <p>A method accesses the data of another object more than its own data.</p>
</blockquote>

<p>All implementations of <code>Command</code> operates on <code>TextPad</code>. For that the <code>TextPad</code> needs to offer its fields like <code>lines</code> and <code>clipBoard</code>. But actual the a <code>Command</code> should <a href="https://martinfowler.com/bliki/TellDontAsk.html" rel="nofollow noreferrer">Tell, Don't Ask</a> a <code>TextPad</code>.</p>

<p>So the preferred way is </p>

<pre class="lang-java prettyprint-override"><code>@Override
public void execute() {
    textPad.display();
}
</code></pre>

<h2><a href="https://en.wikipedia.org/wiki/Law_of_Demeter" rel="nofollow noreferrer">Law of Demeter</a></h2>

<blockquote>
  <p>Only talk to your immediate friends.</p>
</blockquote>

<p>This "problem" coheres with the Feature Envy, because every <code>Command</code> gets an instance of <code>TextPad</code> but only needs a sub information of it like <code>lines</code> or <code>clipBoard</code>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>this.textPad.getLines().remove(i)
</code></pre>
</blockquote>

<p>The Law of Demeter do not allow the above statements, because you talk via <code>remove</code> to a "frind" (<code>lines</code>) of your "frind" (<code>textPad</code>), but you are only allow to talk to your "immediat friend" (<code>textPad</code>).  </p>

<p>A valid statement under the Law of Demeter is </p>

<pre class="lang-java prettyprint-override"><code>this.textPad.removeLine(i)
</code></pre>

<hr>

<h1>Empty Methods</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>@Override
public void undo() {

}
</code></pre>
</blockquote>

<p>To have a empty method is totally valid, but it is better to leave it with a comment</p>

<pre class="lang-java prettyprint-override"><code>@Override
public void undo() {
    // nothing to do here
}
</code></pre>

<p>The benefits are that as a reader, I know that you are aware that you are not implementing it, and that you will know in the future that you have not forgotten the implementation.</p>

<hr>

<h1>Constructor Chaining</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public DisplayCommand(TextPad textPad, int m, int n) {
   this.textPad = textPad;
   this.m = m;
   this.n = n;
}

public DisplayCommand(TextPad textPad) {
   this.textPad = textPad;
   this.m = 0;
   this.n = this.textPad.getLines().size();
}
</code></pre>
</blockquote>

<p>It exists a constructor for all arguments <code>DisplayCommand(TextPad textPad, int m, int n)</code> and a constructor, which takes only one argument DisplayCommand(TextPad textPad) and sets <code>m</code> and <code>n</code> to some default values. </p>

<p>It is possible to chain the one-argument constructor to the full-args constructor.</p>

<pre class="lang-java prettyprint-override"><code>public DisplayCommand(TextPad textPad, int m, int n) {
    this.textPad = textPad;
    this.m = m;
    this.n = n;
}

public DisplayCommand(TextPad textPad) {
    this(textPad, 0, textPad.getLines().size());
}
</code></pre>
    </div>