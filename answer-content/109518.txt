<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can offer a different possibility of correctly initializing a mt19937 random number generator:</p>

<pre><code>auto RandomlySeededMersenneTwister () {
    std::mt19937 rng(std::random_device{}());
    rng.discard(700000);
    return rng;
}
</code></pre>

<p>According to this <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/lfsr04.pdf" rel="noreferrer">paper</a> ("Improved long-period generators based on linear recurrences modulo 2", F. Panneton, P. L'Ecuyer, M. Matsumoto in AVM TOMS Volume 32 Issue 1, March 2006 Pages 1-16), especially figure 4 in chapter 7, one can obtain a mersenne twister state of high quality even when its initialization variables have only a few bits set to a non-zero value. You need to perform about 700000 random number generations (or twists) during/after the initialization phase.</p>

<p>This certainly extends to your case and is much easier to implement. It is, of course, much slower, but random number generator initialization should always only be triggered once in every binary, so this is probably negligible in many cases.</p>

<p>Also, this solution makes it much easier to reproduce results, as it is not needed to save 624 numbers but only one.</p>

<p>Another advantage is the fact, that you can be sure that you get a nice equal distribution. The original solution does not guarantee this property and relies instead on the quality of the source random number generator and its interaction with mt19937.</p>
    </div>