<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The way you're handling add "modes" is a little clunky. It seems that only one of <code>_add</code> or <code>_sub</code> should ever be true at the same time. By making these two separate variables, you need to make sure that invariant is maintained everywhere. You've definitely helped make sure it's safe by using the <code>add</code> and <code>sub</code> functions, but those are band-aids on an awkward design.</p>

<p>The easiest way to simplify this is just to have one variable. Something like:</p>

<pre><code>_is_adding = True
</code></pre>

<p>If this is true you're adding, if it's not, you're subtracting. Now <code>find_mode</code> can be much simpler:</p>

<pre><code>def find_mode():
    return 0 if _is_adding else 1
</code></pre>

<p>And <code>add</code> and <code>sub</code> simply becomes:</p>

<pre><code>def add():
    global is_adding
    is_adding = True

def sub():
    global is_adding
    is_adding = False
</code></pre>

<p>Although,</p>

<hr>

<p>I think you're overusing globals here. In some cases, like UI callbacks, they may be the cleaner (but not only) option. <code>find_mode</code> for example though itself does not need to rely on globals. <em>If</em> you can cleanly pass data in instead of relying on globals, you should. I'd change it to:</p>

<pre><code>def mode_number(is_adding: bool) -&gt; int:  # I added some type hints in and renamed it
    return 0 if is_adding else 1

. . .

mode = simple_mode(mode_number(_is_adding))
</code></pre>

<p>The gain here is incredibly small because of how simple the functions involved are. In general though, it's a good habit to get into. Functions that explicitly take as arguments all the data they need, and return all the data that they produce are much easier to understand. </p>

<p><code>simple_mode</code> and <code>find_mode</code> are kind of odd though if you think about them. Why translate add/sub into a number just to then translate it back to <code>"Add"</code>/<code>"Subtract"</code>? I think this makes more sense:</p>

<pre><code>def format_mode(is_adding: bool) -&gt; str:
    return "Add" if is_adding else "Subtracting"

. . .

mode = format_mode(_is_adding)
</code></pre>

<hr>

<p>I think <code>simplify</code> is a bad name for a function. What's it "simplifying"? If I'm writing a function that turns something into a string, I usually call it <code>format_*</code> (although that's just a habit of mine). Give some description though. I'd probably call it <code>format_time</code>, and adding some simple type hints make the types clearer:</p>

<pre><code>def format_time(_time: int) -&gt; str:
    return time.strftime('%H:%M:%S', time.localtime(_time))
</code></pre>

<p>I'm not sure I 100% agree with calling the parameter <code>_time</code> to avoid the name collision, since a prefix <code>_</code> typically means a "private" attribute, but I can't offhand think of a better name either, since the function is pretty broad in its purpose.</p>

<hr>

<pre><code>end_time-start_time-(-2211688800))
</code></pre>

<p>What the heck is -2211688800? That seems to offset the date by 70.1 years. Whatever it's purpose I see two problems:</p>

<ul>
<li><p>If that's meant to offset today's date to reach a certain format, it'll be outdated from the second it's written. You should see if you can automate the creation of that number.</p></li>
<li><p>Magic numbers, especially large unusual like that should be named. Something like:</p>

<pre><code>TIME_OFFSET = 2211688800

. . .

end_time - start_time - (-TIME_OFFSET)
</code></pre></li>
</ul>

<p>Also, <code>x - (-y)</code> is the same as <code>x + y</code> (unless <code>x</code> and <code>y</code> are some custom type with odd math laws). It should just be:</p>

<pre><code>end_time - start_time + TIME_OFFSET
</code></pre>

<hr>

<p>The <code>Flask</code> import seems to be unneeded.</p>
    </div>