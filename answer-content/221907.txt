<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>cd "${BASH_SOURCE%/*}"

: &gt; "$css_path"
</code></pre>
</blockquote>

<p>What happens if  <code>cd</code> fails?  Nothing good.  Make a habit of always, always testing the result of <code>cd</code> (and synonyms like <code>pushd</code>) for failure.   Bash's <code>-e</code> switch will promote all error exits to fatal script errors; a less extreme approach is simply:</p>

<pre><code>cd … || exit 1
</code></pre>

<hr>

<blockquote>
<pre><code>if [[ -z "$unsupported" &amp;&amp; -z "$invalid_class_name" ]]
</code></pre>
</blockquote>

<p>This is testing the <em>first elements</em> of these two arrays for zero length.  You want to test the lengths of the arrays instead.  </p>

<p>When testing for zero, the use of arithmetic <code>(( … ))</code> is a nice touch: it returns truth for non-zero and false for zero.  </p>

<p>When a conditional includes an <code>else</code> block, avoid negating the condition.  In other words: prefer <code>if x then yes else no</code>  over <code>if not x then no else yes</code>.</p>

<pre><code> if (( ${#unsupported[@]} || ${#invalid_class_name[@]} )) 
</code></pre>

<hr>

<blockquote>
<pre><code>filename="$(name_ext="${file##*/}"; echo "${name_ext%.*}")"
ext="${file##*.}"
</code></pre>
</blockquote>

<p>This is awkward.  Most of the fault rests with Bash itself.  A regular expression is a little cleaner:</p>

<pre><code>[[ $file =~ ([^/]*)\.([^.]*)$ ]] &amp;&amp; filename=${BASH_REMATCH[1]} ext=${BASH_REMATCH[2]}
</code></pre>

<hr>

<blockquote>
<pre><code>if [[ "$mime" = "unsupported" ]]; then
</code></pre>
</blockquote>

<p>Quotes aren't needed around variables (or literal strings that lack whitespace) inside <code>[[ … ]]</code>.</p>

<hr>

<blockquote>
<pre><code>  printf ".%s::before { background-image: url(data:%s;base64,%s); }\n" \
  "$filename" "$mime" "$base64str" \
  &gt;&gt; "$css_path"
</code></pre>
</blockquote>

<p>It's good practice to indent continuations.  In the specific case of <code>printf</code>, it can be helpful to align variables with their format-string placeholders.</p>

<hr>

<blockquote>
<pre><code>unsupported+=("$file")

invalid_class_name+=("$file")
</code></pre>
</blockquote>

<p>If these exist in the shell that invokes your script, their initial values will persist and muck things up.  Make a habit of zeroing variables you intend to append to (or increment, etc.).  At the same time, improve readability by expressly declaring your arrays as such: </p>

<pre><code>declare -a unsupported=() invalid_class_name=()
</code></pre>

<hr>

<blockquote>
<pre><code>: &gt; "$css_path"
</code></pre>
</blockquote>

<p>This could be annoying if the script fails.  Consider taking a backup of the output file before zeroing it, and restoring the backup on error exit.</p>
    </div>