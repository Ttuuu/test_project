<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are doing an \$O(n^2)\$ search over a sorted list, which very often implies an affirmative answer to the infamous "can we do better?" question. For this particular problem, you can get \$O(n)\$ performance by simultaneously scanning from the front and back of the list of primes:</p>

<pre><code>def prime_sieve(n):
    # returns all primes smaller than n
    sieve = [True] * n
    sieve[:2] = [False, False]  # 0 and 1 are not primes
    primes = []
    for prime, is_prime in enumerate(sieve):
        if not is_prime:
            continue
        primes.append(prime)
        for not_prime in range(prime*prime, n, prime):
            sieve[not_prime] = False
    return primes

def sum_of_primes(value):
    primes = prime_sieve(value)
    lo = 0
    hi = len(primes) - 1
    while lo &lt;= hi:
        prime_sum = primes[lo] + primes[hi]
        if prime_sum &lt; value:
            lo += 1
        else:
            if prime_sum == value:
                yield primes[lo], primes[hi]
            hi -= 1
</code></pre>

<p>Notice that, since generating all primes below <code>n</code> <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Algorithm_complexity" rel="noreferrer">can be done in \$O(n \log \log n)\$ time</a>, it is now the prime generation that dominates the total time, i.e. using this faster algorithm makes finding the pairs virtually free (when compared to finding the primes themselves).</p>

<p>A sample run:</p>

<pre><code>&gt;&gt;&gt; list(sum_of_primes(42))
[(5, 37), (11, 31), (13, 29), (19, 23)]
</code></pre>
    </div>