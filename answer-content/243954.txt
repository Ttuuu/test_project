<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions.</p>
<h2>Extract some of the logic to methods.</h2>
<p>In your code, I see at least three sections of code that could be in methods. In my opinion, those extraction will help with the reading and make the code a bit shorter.</p>
<ol>
<li>The validation of the parameters.</li>
</ol>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>if (string == null || target == null || string.length() == 0 || target.length() == 0 || string.length() &lt; target.length()) {
   return "";
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>public String minWindow(String string, String target) {
   //[...]
   if (haveInvalidParameters(string, target)) {
      return "";
   }
   //[...]
}

private boolean haveInvalidParameters(String string, String target) {
   return string == null || target == null || string.length() == 0 || target.length() == 0 || string.length() &lt; target.length();
}
</code></pre>
<ol start="2">
<li>The map initialization.</li>
</ol>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>//[...]
Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(targetLength);
for (char character : target.toCharArray()) {
   map.put(character, -~map.getOrDefault(character, 0));
}
//[...]
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>public String minWindow(String string, String target) {
   //[...]
   Map&lt;Character, Integer&gt; map = initializeMap(target, targetLength);
   //[...]
}

private Map&lt;Character, Integer&gt; initializeMap(String target, int targetLength) {
   Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(targetLength);
   for (char character : target.toCharArray()) {
      map.put(character, -~map.getOrDefault(character, 0));
   }
   return map;
}
</code></pre>
<ol start="3">
<li>The substring section.</li>
</ol>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>public String minWindow(String string, String target) {
   //[...]
   return flag == true ? string.substring(minLeft, -~minRight) : "";
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>public String minWindow(String string, String target) {
   //[...]
   return applySubstring(string, minLeft, minRight, flag);
}

private String applySubstring(String string, int minLeft, int minRight, boolean flag) {
   return flag == true ? string.substring(minLeft, -~minRight) : "";
}
</code></pre>
<h2>Try to keep the variable declarations at the top of the blocks.</h2>
<p>Generally in Java, we try to put the variable declarations at the top of the blocks.</p>
<ul>
<li><a href="https://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141270.html#16817" rel="nofollow noreferrer">Code Conventions for the Java (Revised April 20, 1999)</a></li>
</ul>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>int left = 0, right = 0;
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>int minLeft = 0, minRight = 0, min = string.length();
int left = 0, right = 0;
</code></pre>
<h2>You can simplify the boolean expression</h2>
<pre class="lang-java prettyprint-override"><code>return flag == true ? string.substring(minLeft, -~minRight) : "";
</code></pre>
<p><strong>is equals to</strong></p>
<pre class="lang-java prettyprint-override"><code>return flag ? string.substring(minLeft, -~minRight) : "";
</code></pre>
    </div>