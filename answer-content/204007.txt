<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Remove redundant comments</h2>

<p>Your code is heavy with comments, quite some which are just stating the obvious. If you have a function called <code>clear_screen()</code>, then you don't need a comment saying it clears the screen. Just rely on descriptive function names (which you have!) to convey the meaning. Less comments means less clutter, and makes the code itself easier to read.</p>

<p>Of course, not all comments are redundant, for example the one explaining the regex in <code>calculate_answer()</code> is very good to have.</p>

<h2>Use appropriate names for functions and variables</h2>

<p>You have a function <code>num_press(self, num)</code> that is called not only when a number is pressed, but also when operator buttons are pressed. The name of this function is therefore misleading. In this case, <code>button_press()</code> would be too generic perhaps, unless you would make that a function that handles all buttons. Maybe <code>add_input(self, character)</code> is better?</p>

<h2>Don't unnecessarily use array indices in for-loops</h2>

<p>If you are iterating over an array in a for-loop, you often don't need to know the actual index. For example, you can rewrite <code>reconfigure_operator_buttons()</code> to get rid of the variable <code>i</code> and make the code more compact:</p>

<pre><code>def reconfigure_operator_buttons(self):
    for button in self.button_list:
        if button.cget("text") in "-+/*.=":
            button.configure(bg="#d14302")

            if button.cget("text") == "=":
                button.configure(command=self.calculate_answer)
</code></pre>

<p>In case you actually need a numeric index while iterating over a container, you can use the <code>enumerate()</code> function, like so:</p>

<pre><code>    for i, button in enumerate(self.button_list):
        ...
</code></pre>

<h2>Configure elements completely before adding to a container</h2>

<p>In <code>create_number_buttons()</code>, you are using an iterator because you are modifying an element that you just added to a list. Try to first complete all operations on the element, only then add it to the container. For example:</p>

<pre><code>def create_number_buttons(self):
    button_characters = "789*456/123-0.=+"
    self.button_list = []
    i = 0

    #Row starts at row 2 as I will have the entry field on row 0 and AC on row 1.
    for row_counter in range(2,6):
        for column_counter in range(4):
            button = Button(root, bg="#11708e", fg="white", pady=25, padx=35, text=button_characters[i], font=("Helvetica", 20, 'bold'))
            button.grid(row=row_counter, column=column_counter, sticky="NSEW")
            button.configure(command = lambda character=button_characters[i]: self.num_press(character))
            self.button_list.append(button)
            i += 1
</code></pre>

<h2>Only call <code>reconfigure_operator_buttons()</code> once</h2>

<p>You are calling it for every button you add, you only need to call it once. Or maybe this is just an indentation typo?</p>

<h2>Give names to magic constants</h2>

<p>In your code, you give colors to elements of the GUI. While a color like <code>"white"</code> is quite self-explanatory, something like <code>"#302e2e"</code> is not. Assign the color value to a variable that you can reuse. In this case, don't name the variable after the color itself, but give it a more meaningful name, like <code>number_button_color</code>. An advantage is that you can later easily change the actual color used by changing only a single line.</p>

<h2>Reduce indentation if possible</h2>

<p>In <code>validate_input()</code>, you have a structure that looks like:</p>

<pre><code>if modify_type == '1':
    ...long piece of code...
else:
    return True
</code></pre>

<p>You can instead rewrite this like so:</p>

<pre><code>if modify_type != '1':
    return True

...long piece of code...
</code></pre>

<h2>Consider using a more data-driven approach for creating the button layout</h2>

<p>Instead of having nested for-loops and if-statements to arrange your buttons and to assign functions to them, you could instead define a list with the parameters for all the buttons, and go through that list only once. For example:</p>

<pre><code>buttons = [
    #chr. x  y  color                  command
    ("7", 0, 0, number_button_color,   lambda: self.num_press("7")),
    ("8", 1, 0, number_button_color,   lambda: self.num_press("8")),
    ("9", 2, 0, number_button_color,   lambda: self.num_press("9")),
    ("*", 3, 0, operator_button_color, lambda: self.num_press("*")),
    ...
]

for (character, x, y, color, command) in buttons:
    button = Button(character, bg=color, ...)
    button.grid(x, y, ...)
    button.configure(command=command)
    ...
</code></pre>

<h2>Improve separation between presentation and logic</h2>

<p>While you have created two classes, one for the GUI and one for the actual logic behind it, your code freely calls GUI functions in <code>CalculatorFunctions</code>. Try to avoid changing the GUI at all in that class. It would be better to have the logic class update its own state, and have the GUI class read and present this state.</p>

<p>One way to do this is to not have buttons directly call functions in the <code>CalculatorFunctions</code> class, but instead have it call a function in the <code>CalculatorGUI</code> class which will in turn call the required function in <code>CalculatorFunctions</code>, but also read the state and update the <code>text_box</code>. For example:</p>

<pre><code>class CalculatorFunctions:
    def init(self, ...):
        self.current_text = ""
        ...

    def num_press(self, num):
        self.current_text.append(num)
    ...

class CalculatorGUI(CalculatorFunctions):
    def gui_num_press(self, num):
        self.num_press(num)
        self.text_box.set(self.current_text)
    ...
</code></pre>
    </div>