<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Simplify For Loops by Using Ranged For Loops</strong><br>
<a href="https://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">Ranged for loops</a> have existed in C++ since C++11. A ranged for loop is basically the equivalent of a <code>foreach</code> loop in PHP or C#. The functions <code>displayMap()</code>, <code>map_intersect()</code> and <code>map_difference()</code>. Using ranged for loops in these functions removes the need for the header file <code>iterator</code>.</p>
<p>Compare the following functions to the ones in the question:</p>
<pre><code>void displayMap(std::map&lt;std::string, unsigned long &gt;&amp; map)
{
    for (auto file: map)
    {
        std::cout &lt;&lt; "File Name: " &lt;&lt; file.first &lt;&lt; " Size: " &lt;&lt; file.second &lt;&lt; " bytes" &lt;&lt; "\n";
    }

    std::cout &lt;&lt; std::endl;
}

std::map&lt;std::string, unsigned long &gt; map_intersect(std::map&lt;std::string, unsigned long &gt; const
    &amp; source, std::map&lt;std::string, unsigned long &gt; const&amp; dest)
{
    std::map&lt;std::string, unsigned long &gt; intersections;
    for (auto file : dest)
    {
        if (source.find(file.first) != source.end())
        {
            intersections.insert(std::pair&lt;std::string, unsigned long&gt;(file.first, file.second));
        }
    }

    return intersections;
}

std::map&lt;std::string, unsigned long &gt; map_difference(std::map&lt;std::string, unsigned long &gt; const
    &amp; source, std::map&lt;std::string, unsigned long &gt; const&amp; dest)
{
    std::map&lt;std::string, unsigned long &gt; differences = source;
    for (auto file: dest)
    {
        if (source.find(file.first) != source.end())
        {
            differences.erase(file.first);
        }
    }

    return differences;
}
</code></pre>
<p>The use and declaration of iterators is not required and simplifies the code.</p>
<p><strong>Variable Names</strong><br>
While the variable names are not <code>a</code>, <code>b</code>, <code>c</code> they are abbreviations and make the code less readable. The functions above have replaced some of the variable names as examples.</p>
<p>In <code>main()</code> I would also lengthen the variable names of at least the lists:</p>
<pre><code>    std::map&lt;std::string, unsigned long &gt; sourceFiles, destinationFiles, intersections, differences;
</code></pre>
<p><strong>Put Variable Declarations on Separate Lines</strong><br>
To make code easier to maintain, each map/list should be declared on its own line.</p>
<pre><code>    std::map&lt;std::string, unsigned long &gt; sourceFiles;
    std::map&lt;std::string, unsigned long &gt; destinationFiles;
    std::map&lt;std::string, unsigned long &gt; intersections;
    std::map&lt;std::string, unsigned long &gt; differences;
</code></pre>
<p>This makes adding or deleting variables easier as well as making the code more readable.</p>
<p><strong>Use std::string Rather than C Style Strings</strong><br>
Rather than use old style C strings initialize std::strings with <code>argv[1]</code> and <code>argv[2]</code>.</p>
<pre><code>    std::string source(argv[1]);
    std::string destination(argv[2]);
</code></pre>
<p>This ensures that the types match in the function calls.</p>
    </div>