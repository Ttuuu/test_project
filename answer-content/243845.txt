<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll comment on C style:</p>
<pre class="lang-c prettyprint-override"><code>#define BUF_SIZE (1 &lt;&lt; 10) // approx 2 KiB or 1024 chars
```n
This comment makes no sense.  A `char` in C is, by definition, 1 byte.  `1 &lt;&lt; 10` bytes is exactly 1024 `char`s.  I suppose I can understand if you're coming from Java where `char` is a UTF-16 code unit.

```c
char* next_token() {
    char* buf = malloc(BUF_SIZE * sizeof(char));
</code></pre>
<p>Again, <code>sizeof(char)</code> is <em>defined</em> to be 1. <code>malloc(BUF_SIZE)</code> is sufficient.  If you want your code to be robust against someday using, say, <code>wchar_t</code> instead of <code>char</code>, then idiomatic practice instead is to do <code>char* buf = malloc(BUFSIZE * sizeof *buf);</code>.</p>
<p>Also, you should verify that <code>malloc</code> succeeds.</p>
<pre class="lang-c prettyprint-override"><code>    char cc;
    // consume leading whitespaces
    while (isspace(cc=getchar())) ;
</code></pre>
<p>Personally I'd break this up instead of embedding the assignment.</p>
<pre class="lang-c prettyprint-override"><code>    int nofs = 1;
</code></pre>
<p>I can't decipher what this variable name means. "No filesytem"? "Number Fs"?  "North of South"?</p>
<p>C is not so archaic that there is some tiny limit on lengths of variable names.  Use descriptive names.</p>
<pre class="lang-c prettyprint-override"><code>            buf = realloc(buf, BUF_SIZE*nofs*sizeof(char));
</code></pre>
<p>Others have already mentioned that you should grow your buffer exponentially.</p>
<p><code>x = realloc(x, ...)</code> is an anti-pattern.  Always assign to a temporary variable first; otherwise if <code>realloc</code> fails, you've lost your original pointer and will leak the memory.</p>
<p>As with <code>malloc</code>, <code>sizeof(char)</code> is useless, and you should check for <code>realloc</code> failure.</p>
<pre class="lang-c prettyprint-override"><code>    // trim buffer
    buf = realloc(buf, (i+1)*sizeof(char));
</code></pre>
<p>Same thing here as before about <code>realloc</code>.</p>
    </div>