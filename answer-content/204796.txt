<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use <code>with ... as ...:</code> statements to open files, and automatically close them.
Then you don't have to clutter up your program with explicit close statements.</p>

<pre><code>outFile = open("output.count.txt", "w+")

# ... code here

#close the output file      
outFile.close()   
</code></pre>

<p>Becomes:</p>

<pre><code>with open("output.count.txt", "w+") as outFile:

    # ... code here
</code></pre>

<hr>

<p>This is ugly and unreadable:</p>

<pre><code>outFile.write("FileName\tTotal\tSecondary\tSupplementary\tduplicates\tmapped\tpaired in sequencing\tread1\t"
    "read2\tproperly paired\twith itself and mate mapped\tsingletons\twith mate mapped to a different chr\twith mate mapped to a different chr (mapQ&gt;=5)\n")
</code></pre>

<p>The <code>\t</code> runs into the next field name, so the eye sees "tTotal".
It would be better to actually list your field names in a readable form,
and let the computer properly separate them:</p>

<pre><code>fields = ["FileName", "Total", "Secondary", "Supplementary", "duplicates", "mapped",
          "paired in sequencing", "read1", "read2", "properly paired",
          "with itself and mate mapped", "singletons", "with mate mapped to a different chr",
          "with mate mapped to a different chr (mapQ&gt;=5)"]

outFile.write("\t".join(fields) + '\n')
</code></pre>

<p>Looping through one iterable, processing each one and creating a new list be
often done cleaner using list comprehension:</p>

<pre><code>    list = []
    #add the file name to array. 
    list.append(file)
    #get values from output file.
    for line in counts_file:
        list.append(line.split('+')[0])
</code></pre>

<p>Could become (without the "file" at the start of the list):</p>

<pre><code>    values = [ line.split('+')[0] for line in counts_file ]
</code></pre>

<p>But you take the resulting list and add a <code>\t</code> character between each value,
so maybe instead:</p>

<pre><code>    values = "\t".join( line.split('+')[0] for line in counts_file )
</code></pre>

<p>Now, you want to print out the values to the outFile, with the <code>file</code> at the start.  f-strings are a new feature in Python.  They let you format a string
with local variables interpolated into the string.  This makes it easy:</p>

<pre><code>    outFile.write(f"{file}\t{values}\n")
</code></pre>

<p>As a bonus, each line doesn't end with a trailing tab character.</p>

<hr>

<p>Resulting code would be something like:</p>

<pre><code>with open("output.count.txt", "w+") as outFile:

    fields = ["FileName", "Total", "Secondary", "Supplementary", "duplicates", "mapped",
              "paired in sequencing", "read1", "read2", "properly paired",
              "with itself and mate mapped", "singletons", "with mate mapped to a different chr",
              "with mate mapped to a different chr (mapQ&gt;=5)"]

    outFile.write("\t".join(fields) + '\n')

    for file in glob.glob(".flag.txt"):
        with open(file, 'r') as counts_file:
           values = "\t".join( line.split('+')[0] for line in counts_file )
           outFile.write(f"{file}\t{values}\n")
</code></pre>
    </div>