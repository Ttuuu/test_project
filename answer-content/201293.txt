<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm requires O(<em>N</em>) additional storage and has more than O(<em>N</em>) complexity (because <code>cumulative.append</code> gets more expensive as <code>cumulative</code> gets larger).</p>

<p>Python has a priority queue implementation, called <code>heapq</code>.</p>

<p>We can use this to implement an algorithm of O(<em>N</em> log <em>K</em>) complexity and  O(<em>K</em>) additional storage much more simply, but note that we need to store the <em>negative</em> of the number to turn Python's min-heap into the max-heap we need:</p>

<pre><code>import heapq

def kthSmallest(iterable, k):
    smallest = []
    for value in iterable:
        if (len(smallest) &lt; k):
            heapq.heappush(smallest, -value)
        else:
            heapq.heappushpop(smallest, -value)
    if (len(smallest) &lt; k):
        return None
    return -smallest[0]
</code></pre>

<p>We don't even need that loop, as Python provides an equivalent function for us (but this returns a max-heap, so we select the last element instead of negating the first):</p>

<pre><code>import heapq

def kthSmallest(iterable, k):
    smallest = heapq.nsmallest(k, iterable)
    if (len(smallest) &lt; k):
        return None
    return smallest[-1]
</code></pre>
    </div>