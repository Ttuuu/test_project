<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you suggested, you have a lot of redundant code. And rightfully so you want to adhere to the DRY principle.</p>

<p>All these input methods have the same pattern internally..</p>

<blockquote>
<pre><code>static void Main(string[] args)
{
    GetWeightInput();
    GetHeightInput();
    GetWidthInput();
    GetDepthInput();

    Console.ReadLine();
}
</code></pre>
</blockquote>

<h3>Road to DRY</h3>

<p>..ideally you would like to be able to call them like this:</p>

<pre><code>static void Main(string[] args)
{
    var weight = AskInteger("Enter weight of parcel: ");
    var height = AskInteger("Enter height of parcel: ");
    var width = AskInteger("Enter width of parcel: ");
    var depth = AskInteger("Enter depth of parcel: ");

    Console.WriteLine("press any key to terminate the application..");
    Console.ReadKey(true);
}
</code></pre>

<h3>Advanced road to DRY</h3>

<p>Or if you would provide a complex object <code>Request</code> with 4 properties and a lambda to provide both a message to the user as a setter expression to materialise the request:</p>

<pre><code>static void Main(string[] args)
{
    var request = new Request();
    AskInteger(request, x =&gt; x.Weight);
    AskInteger(request, x =&gt; x.Height);
    AskInteger(request, x =&gt; x.Width);
    AskInteger(request, x =&gt; x.Depth);

    Console.WriteLine("press any key to terminate the application..");
    Console.ReadKey(true);
}
</code></pre>

<p>How you would implement <code>AskInteger</code> is a challenge I leave to you.</p>

<hr>

<h3>Misc</h3>

<ul>
<li>Don't pollute your code with regions that have no added value.  <code>#region User Weight Input Validation</code></li>
<li>Try to avoid meaningless comments <code>_isInvalidInput = true;//reset value to true</code></li>
</ul>
    </div>