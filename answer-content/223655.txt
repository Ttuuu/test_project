<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Takning all considerations by VisualMelon and Pieter Witvoet into account a solution could now be:</p>

<pre><code>static public IEnumerable&lt;T&gt; SkipLast&lt;T&gt;(this IEnumerable&lt;T&gt; data, int count)
{
  if (data == null) throw new ArgumentNullException(nameof(data));
  if (count &lt;= 0) return data;

  if (data is ICollection&lt;T&gt; collection)
    return collection.Take(collection.Count - count);

  IEnumerable&lt;T&gt; Skipper()
  {
    using (var enumer = data.GetEnumerator())
    {
      T[] queue = new T[count];
      int index = 0;

      while (index &lt; count &amp;&amp; enumer.MoveNext())
        queue[index++] = enumer.Current;

      index = -1;
      while (enumer.MoveNext())
      {
        index = (index + 1) % count;
        yield return queue[index];
        queue[index] = enumer.Current;
      }
    }
  }

  return Skipper();
}
</code></pre>

<hr>

<p><strong>Update</strong></p>

<p>In order to optimize when the data set is empty, a <code>MoveNext()</code> call could be made before the allocation of a potentially large queue array:</p>

<pre><code>static public IEnumerable&lt;T&gt; SkipLast2&lt;T&gt;(this IEnumerable&lt;T&gt; data, int count)
{
  if (data == null) throw new ArgumentNullException(nameof(data));
  if (count &lt;= 0) return data;

  if (data is ICollection&lt;T&gt; collection)
    return collection.Take(collection.Count - count);

  return Skipper();

  IEnumerable&lt;T&gt; Skipper()
  {
    using (var enumer = data.GetEnumerator())
    {
      if (!enumer.MoveNext())
        yield break;

      T[] queue = new T[count];
      queue[0] = enumer.Current;
      int index = 1;

      while (index &lt; count &amp;&amp; enumer.MoveNext())
        queue[index++] = enumer.Current;

      index = -1;
      while (enumer.MoveNext())
      {
        index = (index + 1) % count;
        yield return queue[index];
        queue[index] = enumer.Current;
      }
    }
  }
}
</code></pre>
    </div>