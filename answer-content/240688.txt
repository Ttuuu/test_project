<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I use something similar to what you have but with certain deviations. In fact, I have two classes with slightly different interfaces and slightly different purposes. So I'd like to advise on general design direction as I believe here lies the main issues.</p>

<p>1) You should try and be clear as what the class does and what it's purpose: what rules it ought to abide by and why.</p>

<p>For example, in your case in one place one could store the a property as <code>float</code> and another try to read it as <code>double</code> which would result in error. Do you even want it to be an error? Why not store all floating points as a <code>long double</code> in the first place? Same problem with <code>bool, char, int</code> and despite all these three overlapping options you don't have one for <code>int64</code> or even <code>std::size_t</code> for various architectures.</p>

<p>One of the main principles of programming is <a href="https://en.wikipedia.org/wiki/KISS_principle" rel="nofollow noreferrer">KISS</a> and it is generally preferable to stick to it instead of making over-complicated "smart" solutions that result in bugs and errors. One of the two classes that I use has the following purpose:</p>

<p>a. provide configuration parameters to all classes that have access to it. source of these configuration parameters can be either user / external class / configuration file / command line / and even configurable by a parent class.</p>

<p>To accommodate such a large variety of uses one ought to make it as compatible as possible. Thus it is essentially a <code>map&lt;string,string&gt;</code> (<code>boost::ptree</code> is a better version of it) and if one wants to store <code>double, int64</code> or whatever just serialize it into a string and backwards on reading. One only needs to write conversion functions back and forward. Nothing too complex.</p>

<p>For instance, in your case, it is hard to obtain data from configuration file / user that isn't a string. How does the configuration file / user lets the program know what type the data is? is it <code>float</code>? <code>bool</code>? <code>char</code>? <code>vector2d</code>? How does one distinguish the types from the text? It should be as simple as possible.</p>

<p>b. it needs to be thread-safe as multitude classes can use it simultaneously (even if mostly use it for reading, some may still perform a write). Thus a mutex is used to guard its methods.</p>

<p>In your case, if one added a property in one thread while in another thread one reads a completely different property it will cause a data race and it results in rare but troublesome errors.</p>

<p>2) The other class that I use deviates from your class' purpose more significantly but has some nice extra features that you should consider to incorporate.</p>

<p>It isn't property set but rather a "resource map" and/or "shared variables".
Imagine you have following scenario: variety of your classes use a class, say <code>GPU_Context</code>, and you want to instantiate it only once and share it among all other classes. To do that I simply implemented a method that performs unique instantiation (according to the user provided method) in the "resource map" class and shared the instance of "resource map" for all relevant classes.</p>

<p>Unlike "property set" the "resource map" stores shared pointers to a virtually destructible class (I suppose one can utilize <code>std::any</code> instead for this purpose in C++17) so they can be whatever. And its main functions are <code>init_resource</code> (initiates the resource; does nothing if the resource is already set or already being initialized), <code>ser_resource</code> (if it is already being initialized or set then it throws exception), <code>get_resource</code> (with option for default initialization; otherwise throws exception if the resource is not already set), <code>wait_for_resource</code> (waits until the resource is set). It is not hard to implement these with usage of <code>std::promise</code> and <code>std::shared_future</code>.</p>
    </div>