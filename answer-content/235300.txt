<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few extra points to the current answers:</p>

<ul>
<li>Tree will create a default copy constructor which will not behave as expected.
As root is a raw pointer it will just do a shallow copy, assuming T is copiable (i.e. create a new pointer to the same data.)
This will create unexpected behaviour if you copy the Tree and then modify one of the copies.
As they both point to the same data both will be modified.
You should either disable copying of Tree and Node, e.g. <code>Tree(const Tree&amp;) = delete;</code>
or write a custom copy that does a full deep copy of the data. The deep copy for Node would look something like this:</li>
</ul>

<pre><code>Node&lt;T&gt;(const Node&lt;T&gt;&amp; src)
: val(src.val)
 {
    if(src.pLeft)
    {
        pLeft=*src.pLeft;
    }
    if(src.pRight)
    {
        pLeft=*src.pRight;
    }
 }
</code></pre>

<p>and something similar for Tree. NB I haven't done the copy-assignment here, you can either do something very similar to the copy constructor or implement a swap function and use that, see <a href="https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom">https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom</a>.</p>

<ul>
<li><p>I would strongly recommend using smart pointers. This would prevent the memory leak in Node,
and would implicitly prevent copying if you use <code>unique_ptr</code>.</p></li>
<li><p>Your Tree allows duplicate elements, I'm not sure if this is intentional, but it has some
not entirely obvious behaviour. <code>add</code> will perfectly happily add multiple of the same data,
and <code>destroy</code> will only remove the first matching element. If this is intentional it should probably
be documented. In most cases it is probably not necessary for a search tree to have duplicate elements.</p></li>
<li><p>Consider adding ways to add/remove multiple elements at once. This is probably quite a common 
thing to do. The standard way would be a templated function taking a start and end iterator,
that you can loop though.</p></li>
<li><p>The performance of the tree is dependant on the order elements are added. This is not necessarily
a problem, but is something to be aware of. If your tree is very unbalanced (e.g. the left nodes go a lot deeper than the right)
some nodes will have to do many more checks to find than others. If you are interested in this
you might want to look at self-balancing trees such as a red-black tree.</p></li>
</ul>
    </div>