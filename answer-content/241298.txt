<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you mentioned, the nested comprehension is not very intuitive. I had to write it out for understanding.</p>

<p>I am also not sure I understood your requirements correctly. Please correct any wrong assumptions. These are the attempts:</p>

<pre class="lang-py prettyprint-override"><code>from itertools import chain

def join(vars_):
    filtered = (element for element in vars_ if element)
    return chain.from_iterable(filtered)


num = ((1, 2), None, [1, (2, 3)], None)
let = (('a', 'b'), ['a', ('b', 'c')], None, None)
vars_all = (let, num)

for i, vars_ in enumerate(zip(*vars_all), start=1):
    print(f"Case {i}:", join(vars_))
</code></pre>

<p>It returns</p>

<pre class="lang-py prettyprint-override"><code>Case 1: &lt;itertools.chain object at 0x00000221C73F3940&gt;
Case 2: &lt;itertools.chain object at 0x00000221C73F3940&gt;
Case 3: &lt;itertools.chain object at 0x00000221C73F3940&gt;
Case 4: &lt;itertools.chain object at 0x00000221C73F3940&gt;
</code></pre>

<p>So not what you really asked for. However, the <code>chain object</code> behaves like a normal list in most circumstances. It supports the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow noreferrer"><code>Sequence</code> interface</a> (but not the <code>MutableSequence</code> interface):</p>

<pre class="lang-py prettyprint-override"><code>from collections.abc import MutableSequence, Sequence
from itertools import chain


def join(vars_):
    filtered = (element for element in vars_ if element)
    return chain.from_iterable(filtered)


num = ((1, 2), None, [1, (2, 3)], None)
let = (("a", "b"), ["a", ("b", "c")], None, None)
vars_all = (let, num)

for i, vars_ in enumerate(zip(*vars_all), start=1):
    print(f"Case {i}:", list(join(vars_)))
    print("\tIs Sequence:", isinstance(vars_, Sequence))
    print("\tIs MutableSequence:", isinstance(vars_, MutableSequence))
    print(
        "\tIs MutableSequence (cast to list):", isinstance(list(vars_), MutableSequence)
    )
</code></pre>

<p>will print</p>

<pre class="lang-py prettyprint-override"><code>Case 1: ['a', 'b', 1, 2]
        Is Sequence: True
        Is MutableSequence: False
        Is MutableSequence (cast to list): True
Case 2: ['a', ('b', 'c')]
        Is Sequence: True
        Is MutableSequence: False
        Is MutableSequence (cast to list): True
Case 3: [1, (2, 3)]
        Is Sequence: True
        Is MutableSequence: False
        Is MutableSequence (cast to list): True
Case 4: []
        Is Sequence: True
        Is MutableSequence: False
        Is MutableSequence (cast to list): True
</code></pre>

<p>So if a caller requires a list, they can cast to that type specifically. It is perhaps more pythonic to not do that in the function already (duck-typing).</p>

<p>Another point to note is that if both elements are <code>None</code>, an empty iterable is returned. This will still behave similar to <code>None</code> in boolean contexts. It allows for simpler code and maybe more predictable returns. See if that still fulfills your requirements. If not, this final suggestion will fulfill your tests as specified:</p>

<pre class="lang-py prettyprint-override"><code>from itertools import chain


def join(vars_):
    if not any(vars_):
        return None
    filtered = (element for element in vars_ if element)
    return list(chain.from_iterable(filtered))


num = ((1, 2), None, [1, (2, 3)], None)
let = (("a", "b"), ["a", ("b", "c")], None, None)
vars_all = (let, num)

for i, vars_ in enumerate(zip(*vars_all), start=1):
    print(f"Case {i}:", join(vars_))
</code></pre>

<p>will return</p>

<pre class="lang-py prettyprint-override"><code>Case 1: ['a', 'b', 1, 2]
Case 2: ['a', ('b', 'c')]
Case 3: [1, (2, 3)]
Case 4: None
</code></pre>

<p>for Python 3.8.1.
I hope you agree that this is more readable, intuitive and also debuggable.
The early <code>return</code> makes it easier to understand. The additional <code>itertools</code> import is very cheap.</p>

<p>Finally, a one-liner version of the above is</p>

<pre class="lang-py prettyprint-override"><code>def join(vars_):
    return list(chain.from_iterable(elem for elem in vars_ if elem)) or None
</code></pre>

<p>Lastly, two notes:</p>

<ol>
<li>notice the <code>start</code> keyword for <code>enumerate</code></li>
<li>leading underscores denote (private) implementation details; use <a href="https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles" rel="nofollow noreferrer"><em>trailing</em> underscores</a> for variable names that otherwise shadow built-ins; better to avoid these all-together, though</li>
</ol>
    </div>