<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you weren't using EntityFrameworkCore, my suggestion would look something like this:</p>

<ol>
<li>Get the list of values from database 1</li>
<li>Use <code>SqlBulkCopy</code> to insert a bunch of them into some table on database 2</li>
<li>Join to that table in your "GetDeletablePersonProfiles" query.</li>
</ol>

<p>Unfortunately, based on some cursory googling, it looks like EntityFrameworkCore <a href="https://github.com/aspnet/EntityFrameworkCore/issues/7256" rel="nofollow noreferrer">doesn't support bulk operations</a> (<a href="https://github.com/borisdj/EFCore.BulkExtensions" rel="nofollow noreferrer">this extension</a> does, however). I'll admit - I don't know a ton about EFC, but based on what you're doing I assume the following is possible:</p>

<ol>
<li>Get the list of values from database 1 (you're already doing this)</li>
<li>In the code you execute, dump the values from the XML into a table (better performance than joining to the XML)</li>
<li>Use that table in your query</li>
</ol>

<p>Specifically, the main change I would suggest is taking this:</p>

<pre><code>AND [PersonIdf] IN (
    SELECT PersonIdf
    FROM (
        SELECT PersonIdf = XTbl.value('(PersonIdf)[1]', 'bigint')
        FROM @PersonIdfs.nodes('/root') AS XD(XTbl)
    ) AS XmlToData
)
</code></pre>

<p>And turn it into this (you'll notice that I've also transformed both of your <code>EXISTS</code> into <code>JOIN</code>s; they're easier to read and accomplish the same task.</p>

<pre><code>SELECT PersonIdf = XTbl.value('(PersonIdf)[1]', 'bigint')
  INTO #MyFunTempTable
  FROM @PersonIdfs.nodes('/root') AS XD(XTbl);

SELECT DISTINCT PersonProfile.[Id]
  FROM [authorization].[PersonProfile]
    INNER JOIN #MyFunTempTable PersonIdfList
      ON PersonProfile.PersonIdf = PersonIdfList.PersonIdf
    LEFT OUTER JOIN [authorization].[ProfilesToReplace]
      ON PersonProfile.ProfileId = ProfilesToReplace.ProfileId
  WHERE ProfilesToReplace.ProfileId IS NULL
</code></pre>

<p>It would also be good to make this a stored procedure, so that you don't have to worry about GetDeletablePersonProfiles.sql being replaced by a malicious actor.</p>

<p>You could also split it into two stages, using <code>ExecuteSqlCommand</code> to insert the values into a table (can't be a temp table anymore) and then you should really just need LINQ to get the values back.</p>

<p>You can also get an ADO.NET <code>DbConnection</code> object from the database context using <code>_dbContext.Database.GetDbConnection()</code>, and if you know that this is a SQL Server connection I've heard that you can cast that to a <code>SqlConnection</code> object, at which point you have access to the <code>SqlBulkCopy</code> method. This is questionable at best, but it might provide clean enough/performant enough code to be worthwhile. I'm definitely not endorsing this approach, but I'll put it out there.</p>
    </div>