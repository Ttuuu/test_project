<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't use wildcard imports.</h2>

<p>Import tkinter with <code>import tkinter as tk</code>, and then prefix all of your calls to tkinter classes with <code>tk.</code>. For example:</p>

<pre><code>import tkinter as tk

window = tk.Tk()
...
title = tk.Label(window, text="Basic Converter", font="Calibri 16")
filemenu = tk.Menu(window)

...
</code></pre>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> is a set of guidelines that most python programmers follow, and it recommends against wildcard imports. </p>

<h2>Don't call grid or pack inline</h2>

<p>In python, <code>x().y()</code> always returns the value of <code>y()</code>. In tkinter, <code>grid</code>, <code>pac</code>, and <code>place</code> all return <code>None</code>. Thus, when you do this:</p>

<pre><code>arrow = Label(window, text="---&gt;", font="Calibri 20").grid(row=1, column=1)
</code></pre>

<p>... all you're doing is setting <code>arrow</code> to <code>None</code>, which renders <code>arrow</code> useless. Plus, doing it inline (or worse, sometimes in line and sometimes now) makes the code hard to read.</p>

<p>Which leads us to the next point...</p>

<h2>Separate layout from widget creation.</h2>

<p>I see this mistake all the time: create a widget, call grid, create a widget, call grid, ... This results in code that is hard to read, and makes it hard to visualize the layout. If you have to change the layout, such as changing the order of two rows, it's easier if those two rows are together in the code rather than intermixed with other code.</p>

<p>As a rule of thumb, create all widgets within a given group together, and lay them out together.</p>

<p>For example:</p>

<pre><code>title = Label(window, text="Basic Converter", font="Calibri 16")
inputEntry = Entry(window)
arrow = Label(window, text="---&gt;", font="Calibri 20")
convertButton = Button(window, text='Convert!', command=converter)
outputEntry = Entry(window, textvariable=result)
scrollbar = Scrollbar(window)   #left scrollbar
...
title.grid(columnspan=3)
inputEntry.grid(row=1, column=0)
arrow.grid(row=1, column=1)
convertButton..grid(row=2, column=1)
outputEntry.grid(row=1, column=2)
scrollbar.grid(row=2, column=0, sticky = NE + SE)
...
</code></pre>

<p>In this specific example everything is in the root window so it doesn't matter quite so much, but if you used multiple frames for organizing your widgets this would make it much easier to see which widgets were grouped together.</p>

<h2>Make your UI responsive</h2>

<p>When I resized your window, the layout didn't respond very well. This is what I see when I resize the program; notice how the scrollbars are the wrong size, the listboxes didn't expand, etc.</p>

<p><a href="https://i.stack.imgur.com/cArnh.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/cArnh.png" alt="screenshot"></a></p>

<p>Tkinter makes this easy to do, but you have to use the options tkinter gives you. Think about what should happen when the user resizes the program. This becomes much easier when you group all of your calls to <code>grid</code> together. </p>
    </div>