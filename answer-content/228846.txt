<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><blockquote>
  <p>1) Would it have been better to let the called function handle the printing of error messages, exiting the program, etc, instead of the main function?</p>
</blockquote>

<p>It is always better to separate error handling from the rest of the code. But you could have placed the error handling in a separate function.</p>

<p>Related to this, you could have created a more meaningful loop condition in the caller than <code>while(1)</code>. Also, the presence of <code>continue</code> in a C program is always "code smell"; it is a dead certain indication that a loop can be rewritten in better ways. There is a very sound programming rule saying that C code should never jump non-conditionally upwards - this applies to <code>continue</code> and <code>goto</code> both. </p>

<p>For example you could create a separate function for error handling the type <code>input_status</code>, which could either be part of user_input.h/user_input.c, or defined in the caller, whatever makes most sense program design-wise.</p>

<pre><code>bool input_status_ok (input_status status)
{
  if(status == INPUT_FAILED)
  {
    fprintf(stderr, "Unable to read user input\n");
    exit(EXIT_FAILURE);
    return false; // never executed but might block potential compiler warnings
  }
  if (status == INPUT_TOOLONG)
  {
    fprintf(stderr, "Entry exceeds %d characters\n", MAX_STR_LEN);
    return false;
  }
  return true;
}
</code></pre>

<p>(In case of a whole lot of different error codes, we could perhaps replace the <code>if</code> chain with a <code>switch</code>.)</p>

<p>With that out of the way of your loop, you can have one loop checking the errors returned by the function, and another, outer loop for checking the data contents:</p>

<pre><code>bool user_cancel = false;

while (!user_cancel)
{
  do 
  {
    status = get_user_input("Enter your name: ", user_input, sizeof(user_input));
  } while( !input_status_ok(status) );

  if (user_input[0] == CANCEL) /* user entered Ctrl+X (^x) to cancel */
  {
    fprintf(stderr, "User cancelled\n");
    user_cancel = true;
  }
}
</code></pre>

<p>We've now separated error handling of the function result from error handling of the data contents. There are no icky non-conditional branches and the code is overall easier to read.</p></li>
<li><blockquote>
  <p>2) Would it have been better to pass a pointer to the function so that it could allocate the appropriate memory, instead of passing it a fixed array?</p>
</blockquote>

<p>No, it is always better to leave allocation to the caller when you have that option. That way, you separate memory allocation from algorithm which is better program design - meaning your function will only do its designated task, and it won't care if the memory used is allocated statically, on the stack or on the heap.</p></li>
</ul>

<hr>

<blockquote>
  <p>3) Any potential issues with the program or improvements that can be made to the code?</p>
</blockquote>

<ul>
<li><p>Avoid "magic numbers" - add something like <code>#define CANCEL 0x18u</code> instead of using the magic number 0x18 in the middle of the code.</p></li>
<li><p>Never write functions with an empty parenthesis for the parameter list in C, such as <code>void flush_input()</code>. This is obsolete style and has poor type safety, since it means "function that accepts any parameters". C is different from C++ here, in C++ the empty parenthesis is encouraged and equivalent to <code>(void)</code>.</p></li>
<li><p>Avoid assignment inside conditions. This is problematic for many reasons:  </p>

<ul>
<li>Assignments introduce an extra side-effect that might have dependencies in relation to the right-hand side of the assignment.</li>
<li>The classic == vs = bug. All modern compiler can check for this, but if you never write = inside conditions you don't need to worry. (Better yet, you won't have to deal with people who's been living under a rock since the 1980s and therefore still suggest that you should use the unreadable <a href="https://en.wikipedia.org/wiki/Yoda_conditions" rel="nofollow noreferrer">Yoda conditions</a> )</li>
<li>Mashing as many operations as possible into a single line makes the code harder to read.    </li>
</ul>

<p>Instead, simply write:</p>

<pre><code>char *pNewline = strchr(user_input, '\n');
if (pNewline == NULL)
</code></pre></li>
<li><p>You should place all library <code>#includes</code> in the h file. This documents all library dependencies to the user of your code, who should only need to read the public h file.</p></li>
</ul>
    </div>