<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>well done providing doc strings</li>
<li>sticking to the <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">Style Guide for Python Code</a> makes Python code easier to grasp, especially for someone who didn't write it</li>
<li>to make the naming more convincing, you should factor out <code>sequential_deterministic_stand_in_for_seeing_the_required_result()</code> and <code>sequential_deterministic_stand_in_for_checking_the_result()</code><br>
As a bonus, this removed implementation detail from the docstrings of "the oracle functions".</li>
<li>the nested loops in <code>oraclesort()</code> seem to iterate <em>all</em> permutations of elements from <code>input_seq</code> - as indicated in the docstring.<br>
Using <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">itertools.permutations()</a> is easier to read and should test sequences of like length, only.<br>
(Strictly faster than the related bogobogosort for not repeatedly checking the same sequence.)</li>
<li>instead of determining the index of the minimum value and using slices to construct <code>input_lst_without_min</code>, you could use just determine the minimum value, compare it to the start of the candidate sequence and remove it from the sequence to sort recursively:<br>
<code>input_lst_without_min = input_seq[:]</code><br>
<code>input_lst_without_min.remove(min(input_seq))</code></li>
</ul>
    </div>