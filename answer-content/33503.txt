<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>UPDATE:</em><br>
A more complete benchmark script:</p>

<pre><code>$start = $first = $str = null;//create vars, don't benchmark this
//time preg_match
$start = microtime(true);
$first = $str = implode(',', range(213,9999));
if (preg_match('/^[^,]+/', $str, $match))
{
    $first = $match[0];
}
echo $first, PHP_EOL, microtime(true) - $start, ' time taken&lt;br/&gt;', PHP_EOL;
//time str* functions
$start = microtime(true);
$first = $str = implode(',', range(213,9999));
$first = substr($str, 0, strpos($str, ','));
echo $first, PHP_EOL, microtime(true) - $start, ' time taken&lt;br/&gt;', PHP_EOL;
//now explode + current
$first = null;
$start = microtime(true);
$str = implode(',', range(213, 9999));
$first = current(explode(',', $str));
echo $first, PHP_EOL, microtime(true) - $start, ' time taken';
</code></pre>

<p>The result varried a little, but after 100 runs, the averages amounted to:</p>

<pre><code>#1 substr+strpos: ~.0022ms as 1//base for speed
#2 preg_match: ~.0041 as ~2//about twice as slow as #1
#3 explode: ~.00789 as ~4//about 4 times &lt;=&gt; #1, twice as slow &lt;=&gt; regex
</code></pre>

<hr>

<p>You're absolutely right, exploding a string, constructing an array to get just the first value is a waste of resources, and it is not the fastest way to get what you want.<br>
Some might run to regex for help, and chances are that, in your case that will be faster. But nothing I can think of will beat the speed of PHP's string functions (which are very close to the C string functions). I'd do this:</p>

<pre><code>$first = substr($var, 0, strpos($var, ','));
</code></pre>

<p>If the comma isn't present (say <code>$var = '123'</code>), then your current approach will assign <code>123</code> to <code>$first</code>. To preserve this behaviour, I'd go for:</p>

<pre><code>$first = strpos($var, ',') === false ? $var : substr($var, 0, strpos($var, ','));
</code></pre>

<p>This is to say: if <code>strpos</code> returns false, then there is no comma at all, so assign the entire string to <code>$first</code>, else get everything in front of the first comma.</p>

<p>For completeness sake (and after some initial bench-marking), using <code>preg_match</code> did indeed prove to be faster than using <code>explode</code> with large strings (<code>$var = implode(',', range(1, 9999));</code>), when using this code:</p>

<pre><code>$first = $var = implode(',', range(1,9999));
if (preg_match('/^[^,]*/',$var, $match))
{
    $first = $match[0];
}
</code></pre>

<p>But honestly, I wouldn't use regex in this case.</p>

<p>In the interest of fairness, and to to clarify how I found the regex to be faster:</p>

<pre><code>$start = microtime(true);
$first = $str = implode(',', range(213,9999));
if (preg_match('/^[^,]+/', $str, $match))
{
    $first = $match[0];
}
echo $first, PHP_EOL, $str, PHP_EOL, microtime(true) - $start, ' time taken';
$first = null;
$start = microtime(true);
$str = implode(',', range(213, 9999));
$first = current(explode(',', $str));
echo $first, PHP_EOL, microtime(true) - $start, ' time taken';
</code></pre>
    </div>