<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since the goal is the best possible implementation of this algorithm, I'd suggest the following. However, faster <a href="https://en.wikipedia.org/wiki/Sorting_algorithm" rel="noreferrer">algorithms</a> do exist.</p>

<ol>
<li>To conform to <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a> make sure you have two blank lines after your imports and surrounding function definitions.</li>
<li>Since, you aren't editing each item, but rather adding and removing items until the list is sorted, I'd use the <em>while</em> keyword.</li>
<li>The builtin min function is faster than looping through yourself. If you want to make your own minimum function as an exercise you can always do that and replace <em>min</em> with your own <em>my_min</em> say</li>
</ol>

<p>My Code:</p>

<pre><code>def my_sort2(my_list):
    unsorted_list = [*my_list]
    sorted_list = []
    while len(unsorted_list) &gt; 0:
        shortest_num = min(unsorted_list)
        sorted_list.append(shortest_num)
        unsorted_list.remove(shortest_num)
    return sorted_list
</code></pre>

<p>When timing mysort2 vs your mysort, I get a 12% improvement on my machine.</p>

<p>Timing code: (Not the nicest but it does the job)</p>

<pre><code>t1 = inf
t2 = inf
for _ in range(1000):
    t1 = min(t1, timeit.timeit(
        stmt=f'my_sort(random_list)',
        setup=f'from __main__ import my_sort, random_list',
        number=100))
    t2 = min(t2, timeit.timeit(
        stmt=f'my_sort2(random_list)',
        setup=f'from __main__ import my_sort2, random_list',
        number=100))
</code></pre>
    </div>