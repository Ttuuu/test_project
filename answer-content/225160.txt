<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>To <code>sudo</code> or not to <code>sudo</code></h3>

<blockquote>
  <p>I'm also wondering if it's better to only run the commands that need it with sudo or if I should rerun the whole script as sudo after prompting for the password like this:</p>

<pre><code>if [[ "$EUID" != 0 ]]; then
    warning "Please run as root"
    sudo "$0" "$@"
fi
</code></pre>
</blockquote>

<p>Can the script do its job without <code>root</code> permissions? This script cannot, because it wants to modify files that are normally only editable by <code>root</code>, such as <code>/opt</code> and <code>/usr/bin</code>. Therefore, the script requires <code>root</code> permissions. A good way to handle this is to check if the user has <code>root</code> permission, and exit if that's not the case, for example:</p>

<pre><code>if [[ "$EUID" != 0 ]]; then
    warning "Please run as root"
    exit 1
fi
</code></pre>

<p>There's really no need to include the complexity of getting root permission in the script. With the above simple check, the user can either switch to the <code>root</code> user, or rerun the script with <code>sudo</code>. The rest of the script can assume the privilege (and responsibility) of <code>root</code>.</p>

<h3>About logging</h3>

<blockquote>
  <p>I first wanted to save the logs to a log file at <code>"$HOME/.logs/ffupgrade.log"</code>, but I'm not sure whether that is good practice or whether I should log to <code>syslog</code>.</p>
</blockquote>

<p>I don't really know. But I can reason about it.</p>

<p>Does this really belong to <code>syslog</code>? The script upgrades Firefox. Let's look at something similar, for example, what happens when you upgrade software using the standard package manager of a Linux system. I just upgraded something in a Debian system I have at hand, and it didn't log anything about it in <code>syslog</code>. It may be relevant whether the upgrade is happening on explicit user action or automatically. I would conclude that when a user upgrades a package manually, it's not noteworthy enough to add to <code>syslog</code>.</p>

<p>On the other hand, what happens if you keep logging to <code>~/.logs</code>? It accumulates forever without cleanup. You might want to log somewhere else that is subject to log a rotation policy in your systems by default, or document how to set it up in the script. This could be a valid argument, except that I doubt your Firefox upgrade logs will ever accumulate to anything significant. So... I would not bother about rotation. If the script is only going to run as <code>root</code>, then I would log somewhere more visible than <code>~/.logs</code>, let's say <code>/var/log</code>.</p>

<blockquote>
  <p>When logging to a file, I would add another variable <code>logfile</code> at the beginning and adapt the functions like so (similarly for <code>success</code> and <code>warning</code>)</p>
</blockquote>

<p>I would add a <code>logger</code> <em>function</em> to encapsulate that logic, overriding the <code>logger</code> <em>program</em>, and then you won't need to touch the other functions.</p>

<h3>Use <code>local</code> for local variables</h3>

<p>It's good to use <code>local</code> for local variables in functions to avoid setting values in the global scope, which can be a source of nasty errors.</p>

<h3>Double quote variables used on the command line</h3>

<p><code>$fflink</code> here should be enclosed in double-quotes:</p>

<blockquote>
<pre><code>ffinstalled_version="$($fflink --version | sed 's/[^0-9]*//g')"
</code></pre>
</blockquote>

<h3>Comparing versions</h3>

<p>I have a doubt about comparing versions.
The script removes all non-numeric characters, and then compares values lexicographically.
Are you sure that will work reliably?
It would have been good to include some example versions in comments, to help assure readers.</p>

<p>Also, to remove non-numeric characters, I would use <code>tr -cd 0-9</code> instead of <code>sed 's/[^0-9]*//g'</code>.</p>

<h3>Verify exit codes</h3>

<p>The script does some things, and tells some things to the user that might not be true, for example here:</p>

<blockquote>
<pre><code>sudo chmod 755 "$ffbin"
success "permissions set"
sudo ln -s "$ffbin/firefox" "$fflink"
success "symlink created"
sudo rm "/opt/$fffile"
success "tarball removed from /opt"
success "Firefox was upgraded"
</code></pre>
</blockquote>

<p>Even if those commands fail, the script will print success messages, and happily carry on.</p>

<h3>Use better variable names</h3>

<p>What is <code>vind</code>?</p>

<h3>Use verbose mode more</h3>

<p>I would add <code>-v</code> to all interesting commands that support it, for example <code>rm</code>, <code>mv</code>.</p>

<h3>Replace <code>1&gt;&amp;2</code> with <code>&gt;&amp;2</code></h3>

<p>The default file descriptor redirected is <code>1</code>, no need to spell it out explicitly.</p>

<h3>Simple is better than complex</h3>

<p><code>[ $# != 1 ]</code> is probably more natural and therefore easier to understand than <code>[ $# -ne 1 ]</code>.</p>
    </div>