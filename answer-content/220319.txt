<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the test is ok. Remember what you're testing is this</p>

<pre><code>const signIn = (
  username,
  password,
  successCallback,
  errorCallback,
) =&gt; {
  Auth.signIn(username, password)
    .then(user =&gt; successCallback(user))
    .catch(err =&gt; errorCallback(err));
};
</code></pre>

<p>and NOT <code>Auth</code>. Here Auth is just a dependency so you will stub its functionality. Considering that its interface is Promise-based, you need to test both cases - therefore having a test that verifies your expected (promise solved) and the one with the error is correct.</p>

<p>There are some changes I would add, though. For instance, rather than creating my own <code>successCallback</code> and <code>errorCallback</code> I would use <a href="https://jestjs.io/docs/en/jest-object.html#jestfnimplementation" rel="nofollow noreferrer">mock functions</a>, that would allow me to have further information</p>

<pre><code>const successCallback = jest.fn();
const rejectCallback = jest.fn();
</code></pre>

<p>and I can check there if they were called or not and verify their arguments.</p>

<pre><code>expect(successCallback).toHaveBeenCalledWith(mockUser);
expect(rejectCallback).not.toHaveBeenCalled();
</code></pre>

<p>and the other way around for the other test.</p>

<p>Then, I would take advantage of async/await for the tests, so we don't need to ensure that ugly done function is called. Basically, we declare the arrow function of the test as async, we await the promise calls and just by having the arrow function to be finished ensures our tests have passed.</p>

<p>An example of these changes would be something like this</p>

<pre><code>it('invokes the success callback on success', async () =&gt; {
    jest
      .spyOn(Auth, 'signIn')
      .mockImplementation(() =&gt; Promise.resolve(mockUser));
    const successCallback = jest.fn();
    const rejectCallback = jest.fn();
    await signIn('jon', 'snow', successCallback, rejectCallback)
    expect(Auth.signIn).toHaveBeenCalledWith('jon', 'snow');
    expect(successCallback).toHaveBeenCalledWith(mockUser);
    expect(rejectCallback).not.toHaveBeenCalled();
  });
</code></pre>

<p>Another step would be that we have strings all over our tests, such as "jon" and "snow". If we already have a mocked user we could reference them from there by using <code>mockUser.username, mockUser.password</code></p>

<p>That leaves us with the tests looking like this</p>

<pre><code>it('invokes the success callback on success', async () =&gt; {
    jest
      .spyOn(Auth, 'signIn')
      .mockImplementation(() =&gt; Promise.resolve(mockUser));
    const successCallback = jest.fn();
    const rejectCallback = jest.fn();
    await signIn(mockUser.username, mockUser.password, successCallback, rejectCallback)
    expect(Auth.signIn).toHaveBeenCalledWith(mockUser.username, mockUser.password);
    expect(successCallback).toHaveBeenCalledWith(mockUser);
    expect(rejectCallback).not.toHaveBeenCalled();
  });

  it('invokes the error callback on err', async () =&gt; {
    jest
      .spyOn(Auth, 'signIn')
      .mockImplementation(() =&gt; Promise.reject(mockUser));

    const successCallback = jest.fn();
    const rejectCallback = jest.fn();
    await signIn(mockUser.username, mockUser.password, successCallback, rejectCallback);
    expect(Auth.signIn).toHaveBeenCalledWith(mockUser.username, mockUser.password);
    expect(rejectCallback).toHaveBeenCalledWith(mockUser);
    expect(successCallback).not.toHaveBeenCalled();
  });
</code></pre>

<p>As you can see they are pretty similar, so we could somewhat extract that functionality to a method with the common assertions.</p>

<p>We could create a function like this</p>

<pre><code>const assertSignIn = async (mockedResponse, shouldBeCalledCallback, shouldNotBeCalledCallback) =&gt; {
        jest
            .spyOn(Auth, 'signIn')
            .mockImplementation(() =&gt; mockedResponse);
        const successCallback = jest.fn();
        const rejectCallback = jest.fn();
        await signIn(mockUser.username, mockUser.password, successCallback, rejectCallback)
        expect(Auth.signIn).toHaveBeenCalledWith(mockUser.username, mockUser.password);
        expect(shouldBeCalledCallback).toHaveBeenCalledWith(mockUser);
        expect(shouldNotBeCalledCallback).not.toHaveBeenCalled();
  };
</code></pre>

<p>and then call it properly from each test</p>

<pre><code>it('invokes the success callback on success', async () =&gt; {
    const successCallback = jest.fn();
    const rejectCallback = jest.fn();
    await assertSignIn(Promise.resolve(mockUser), successCallback, rejectCallback);
  });

  it('invokes the error callback on err', async () =&gt; {
    const successCallback = jest.fn();
    const rejectCallback = jest.fn();
    await assertSignIn(Promise.reject(mockUser), rejectCallback, successCallback);
  });
</code></pre>

<p>Although both last parameters are mock function, the difference is conceptual - by declaring them outside you can ensure by reading the tests in which the successCallback should be executed and in which should not.</p>
    </div>