<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review!</p>

<p>This is an interesting program; thanks for sharing!</p>

<p>To help you maintain it ...</p>

<p><code>baseDict</code> appears to be unused, and can be removed.  Ditto for <code>cosines</code></p>

<p><code>baseChars</code> is a list of characters, which appears needs to be in exactly the same order as the <code>dictEN</code>, <code>dictFR</code>, <code>dictDE</code>, ... and <code>distCZ</code> dictionary keys.  Prior to Python 3.6, the order of keys in a dictionary was arbitrary.  You should not rely on the dictionary key order, or else you should indicate that this software requires Python 3.6+ in the documentation.  (And you should add documentation.  <code>"""docstrings"""</code> and <code># comments</code>.)</p>

<p>You have many dictionaries named <code>dictXX</code>.  You then uses these dictionaries to create many <code>freqXX</code> lists.  And finally you need to store these lists in another <code>freqList</code> list.  And then you create another <code>langDict</code> which you again hope stores its keys in the same order, which you then extract into a <code>langNames</code> list.  This is a maintenance nightmare.  You need to two letter language codes 5 times ... no sorry 6 times if you include the <code>print("Can recognize...")</code> statement.  Adding a new supported language requires adding additional code in many different areas.</p>

<p>Instead, consider the following code:</p>

<pre><code>addLanguage('EN', 'English', a=8.167, b=1.492, ..., z=0.074)
addLanguage('FR', 'French', a=7.636, b=0.901, ..., z=0.326, à=0.486,  â=0.051, ..., û=0.06)
     :       :       :        :
     :       :       :        :
addLanguage('CZ', 'Czech', a=8.421, b=0.822, ..., z=1.503, á=0.867, č=0.462,  ...,  ž=0.721)
</code></pre>

<p>The language is mentioned exactly once, where it is completely defined.  Abbreviation, full name, and letter frequency.</p>

<p>So how do we do this?</p>

<pre><code>language = { }   # Storage for all languages

def addLanguage(abbrev, name, **frequencies):

    language[abbrev] = {
        'name': name,
        'freq': []          # we'll fill this in later
    }
</code></pre>

<p>This will create a new entry in our language dictionary, in which we can store the name of the language and its letter frequency.</p>

<p>Later, we can use this code to display the supported languages:</p>

<pre><code>supported = ", ".join("{} ({})".format(key, language[key][name])
                      for key in language)

print("Can recognize the following languages:", supported)
</code></pre>

<p>When creating the letter frequency list, let's not rely on the order of dictionary keys to support all versions of Python 3.  You have the <code>baseChars</code> list already defining the order.  We'll use it to extract the letter frequencies from <code>frequencies</code> in the proper order.  Using <code>dict.get(key, default)</code> will allow us to omit the zero frequencies from from the <code>addLanguage(...)</code> call, and use the default value of 0 for the missing <code>letter=frequency</code> argument pairs.</p>

<pre><code>def addLanguage(abbrev, name, **frequencies):

    language[abbrev] = {
        'name': name,
        'freq': [ frequencies.get(letter, 0) for letter in baseChars]
    }
</code></pre>

<hr>

<p><code>freqList</code>, <code>langDict</code> and <code>langNames</code> are global variables, but they are only used inside <code>def detectLang():</code> method.  Let's create them as local variables (if they are even necessary).</p>

<p><code>langDict</code> was initialized as a global variable, and updated with this code:</p>

<pre><code>    for i in range(len(freqList)):
        langDict[langNames[i]] = 1-spatial.distance.cosine(freqList[i], freqText)
</code></pre>

<p>Let's create it on the spot, but call it <code>scores</code>, which is what it is holding.  No need for <code>range()</code> and <code>len()</code>; we'll just iterate over <code>language</code> dictionary <code>items()</code>:</p>

<pre><code>    scores = { abbr: 1-spatial.distance.cosine(lang['freq'], freqText)
               for abbr, lang in language.items() }
</code></pre>

<p>Now, get the list of language abbreviations, in decreasing score order:</p>

<pre><code>    abbrevs = sorted(scores, key=langDict.get, reverse=True)
</code></pre>

<p>Finally, the <code>detectLang(s)</code> should not print the results; the caller should.  It most definitely should not have a <code>sleep(5)</code> in the middle.  It should simply return the language abbreviations and score.  Again, to avoid the ordered dictionary keys issue in pre Python3.6, we will not use a dictionary:</p>

<pre><code>    finalList = [ (abbr, scores[abbr]) for abbr in abbrevs ]
    return finalList
</code></pre>

<hr>

<p>Your <code>def main():</code> is large enough to be split into multiple functions, say a <code>detect_from_string()</code> and <code>detect_from_file()</code>.  You should factor out and call <code>save_detection_to_file()</code> from each as well.</p>

<hr>

<pre><code>                with open(filename, 'w') as file:
                    file.write(detectLang(s))
                    file.close()
</code></pre>

<p>The <code>file.close()</code> is unnecessary.  The file will automatically be closed at the end of the <code>with</code> block.  Where as the following code should be done using the <code>with open(filename, 'w') as file:</code> construct you already used above:</p>

<pre><code>                        file = open(filename, 'w')
                        file.write(detectLang(text))
                        file.close()
</code></pre>

<hr>

<p>If the file exists, why this song and dance?</p>

<pre><code>            if(not os.path.exists(filename)):
                #...
            else:
                __location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))
                with open(os.path.join(__location__, filename)) as file:
</code></pre>

<p>If <code>os.path.exists(filename)</code> returns <code>True</code>, the file can be found!  Its path has already been sufficiently specified.</p>

<pre><code>            if not os.path.exists(filename):
                # ...
            else:
                with open(filename) as file:
</code></pre>

<hr>

<p>I'm confused by this block:</p>

<pre><code>                if(s == "0"):
                    flag = False
</code></pre>

<p>The variable <code>ans</code> gets the <code>1</code>, <code>2</code>, <code>0</code> menu choice, not <code>s</code>.</p>

<hr>

<p>Your code is structured to call <code>detectLang()</code> in multiple places.</p>

<pre><code>            if(save == "Y"):
                ...
                    file.write(detectLang(s))
            else:
                ...
                    detectLang(s)
</code></pre>

<p>You should instead call the method once, and save the result.  Then, you can ask the user if they wish to save the result.</p>

<pre><code>            detection_result = detectLang(s)
            display_detection_results(detection_results)

            print("Save detection to file? [Y][N]\n")
            save = input().upper()
            if save == "Y":
                filename = input("File name?\n")
                with open(filename, 'w') as file:
                    file.write(detection_result)
</code></pre>

<hr>

<p>This is a poor practice:</p>

<pre><code>    except(SyntaxError, TypeError, ValueError, NameError, ZeroDivisionError):
        print("Invalid input! Try again...")
</code></pre>

<p>A <code>SyntaxError</code> should not be generatable by your program.  You should not catch it.  A <code>NameError</code> is an indication of a bug in your program, not invalid input to your program.  Only check exceptions which can be generated by bad user input.</p>

<p>Not checked for would be <code>FileExistsError</code> or <code>PermissionError</code> or <code>IsADirectoryError</code> which could be raised when trying to "Save detection to file".  Again, you should create a <code>save_detection_to_file()</code> method and catch these <code>OSError</code> exceptions there, not in the main program.</p>

<hr>

<p>Calling the <code>main()</code> program unconditionally is a bad practice.  This makes the file unusable as a module in a large program.  Instead, write:</p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre>

<p>This will only call <code>main()</code> if this file is the program being executed.</p>
    </div>