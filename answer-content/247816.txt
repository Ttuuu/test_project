<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>f-strings</h2>
<p>I recommend to use f-strings (Python version &gt;= 3.6) for string formatting. See this link for more details:
<a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0498/</a></p>
<p>When you use them you can replace</p>
<pre><code>if month1 &lt; 10:
    month1 = "0" + str(month1)
</code></pre>
<p>with an expression like this:</p>
<pre><code>month1 = f'{month1:02}'
</code></pre>
<p>This adds a leading zero if <code>month1</code> only has one digit.</p>
<p>In addition, an expression like:</p>
<pre><code> Url = (
        "https://api.rawg.io/api/games?dates="
        + str(year1)
        + "-"
        + str(month1)
        + "-"
        + str(day1)
        + ","
        + str(year2)
        + "-"
        + str(month2)
        + "-"
        + str(day2)
        + "&amp;page="
        + str(PageNumber)
        + "&amp;platforms=4,187,1,18,186&amp;page_size=40&amp;ordering=released"
    )

</code></pre>
<p>can be written as</p>
<pre><code>url_part1 = "https://api.rawg.io/api/games?dates="
url_part2 = "&amp;platforms=4,187,1,18,186&amp;page_size=40&amp;ordering=released"

 Url = f"{url_part1}{year1}-{month1}-{day1},{year2}-{month2}-{day2}&amp;page={PageNumber}{url_part2}"
</code></pre>
<p>using f-strings. This is shorter and less error prone (less quotes you can forget), opinions might vary regarding the readability, though. Type conversions (<code>str(.)</code>) are not needed anymore.</p>
<h2>Avoid hardcoding</h2>
<p>It is good that you added a comment to explain where the number 40 comes from:</p>
<pre><code>AmountOfPages = AmountOfGames // 40 #1 page contains 40 so it does amount//40 to get pages
</code></pre>
<p>However, it would be even better if you assigned this number to a variable with a telling name. For example</p>
<pre><code>games_per_page = 40 # Preferably, put this on the top of your script or in a config file
# [...]
AmountOfPages = AmountOfGames // games_per_page
</code></pre>
<p>This is more flexible. Imagine the number of games per page changes.</p>
<h2>Leftover page: ceiling division</h2>
<p>In this part you first do a floor division (//), then you add 1 for leftover pages</p>
<pre><code>AmountOfPages = AmountOfGames // games_per_page#1 page contains 40 so it does amount//40 to get pages
if(AmountOfGames%games_per_page != 0):
    AmountOfPages = AmountOfPages + 1 #does +1 if there's a leftover page
</code></pre>
<p>This can be simplified with a ceiling division</p>
<pre><code>import math

AmountOfPages = math.ceil(AmountOfGames / games_per_page)
</code></pre>
    </div>