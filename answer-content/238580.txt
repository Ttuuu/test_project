<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I'll show you some essential feature your class is missing, then I'll show you a way to use modern features of C++ to automate parts of your code.</p>

<h1>Fixing your current code</h1>

<h3>Use const to have the compiler check your logic</h3>

<p>If a method does not modify the class, then it should be declared <code>const</code> so that other functions can call it when acting on an instance that is not allowed to be changed. For example,</p>

<pre><code>bool isEmpty() const
{
    return top == nullptr;
}
</code></pre>

<p>Now, a function that takes a <code>const Stack&amp;</code> parameter can check if the <code>Stack</code> instance is empty. Similarly, the <code>getTop()</code> and <code>display()</code> methods should be marked <code>const</code> since neither modify the stack.</p>

<h3>Clean up your resources</h3>

<p>First, some sample code:</p>

<pre><code>int main()
{
    int sizeOfStack;
    std::cin &gt;&gt; sizeOfStack; // ask user for a number
    if(sizeOfStack &lt; 10)
    {
        Stack stack;
        for(int i = 0; i &lt; sizeOfStack; ++i)
        {
            stack.push(i);
        }
        stack.display();
    }  // All data added to stack is leaked here
    else
    {
        std::cout &lt;&lt; "Too large for this example.\n";
    }

    // The memory taken up by the stack cannot be released
    // until the program exits.
}
</code></pre>

<p>As your code is now, when your program exits a scope (a part of code that is enclosed in curly braces like a function, loop, or if-else-block), all of the data you created with <code>new</code> will be leaked. This means that the data will still exist and take up memory and other resources, but there will be no way to access it to clean it up.</p>

<p>In C++, every class that has a data member that does not have its own destructor (usually pointers) needs a <a href="https://en.cppreference.com/w/cpp/language/destructor" rel="noreferrer">destructor</a> to manually clean it up. This is a method named like a constructor but prefixed with a tilde: <code>~Stack()</code>. For your <code>Stack</code> class, you would need something like</p>

<pre><code>~Stack()
{
    while( ! isEmpty())
    {
        pop();
    }
}
</code></pre>

<h3>Write constructors to ensure data is always valid</h3>

<p>In C++, a <code>class</code> and a <code>struct</code> are nearly identical concepts. The only difference is that the data in a <code>class</code> is private by default and data in a <code>struct</code> is public by default. Otherwise, anything you can write in a <code>class</code> you can write in a <code>struct</code>. So, you can write a constructor for your <code>Node</code> class.</p>

<pre><code>Node(int inputData, Node* inputNext)
{
    data = inputData;
    next = inputNext;
}
</code></pre>

<p>A better way to write this is to use an <a href="https://en.cppreference.com/w/cpp/language/initializer_list" rel="noreferrer">initializer list</a>:</p>

<pre><code>Node(int inputData, Node* inputNext) : data(inputData), next(inputNext)
{
}
</code></pre>

<p>Similarly, for the <code>Stack</code> class:</p>

<pre><code>Stack() : top(nullptr)
{
}
</code></pre>

<p>It's not so important with <code>int</code>s and pointers, but with more complex classes you'll write in the future, using intializer lists will avoid some unnecessary work.</p>

<p>Now that <code>Node</code>s have a constructor, you can simplify your <code>push()</code> method.</p>

<pre><code>push(int value)
{
    top = new Node(value, top);
}
</code></pre>

<p>The constructor of the <code>Node</code> class centralizes the logic of creating a new <code>Node</code> so you don't have to rewrite it everywhere.</p>

<h3>Use methods and other named code to make your intent clear</h3>

<p>Many places in your code check if <code>top == nullptr</code>. You should use the <code>isEmpty()</code> to tell readers of your code (including you in the future) what you actually care about.</p>

<pre><code>void pop()
{
    if ( ! isEmpty())
    {
        Node *n = top;
        top = top-&gt;next;
        delete n;
    }
}
</code></pre>

<p>This goes for <code>getTop()</code> as well.</p>

<h3>Decide how to handle copying and assignment</h3>

<p>As it is now, when an instance of <code>Stack</code> is copied, both instances will refer to the same data and modifications to one instance may affect the other.</p>

<pre><code>Stack s1;
s1.push(7);
Stack s2 = s1;
s2.push(21);
s1.display();
std::cout &lt;&lt; "\n\n\n";
s2.display();
</code></pre>

<p>This will result in the following output before crashing:</p>

<pre><code>                        TOP ELEMENT
---------------------------------------------------------
Data: 7         Address: 007AF1C0       Next: 00000000
---------------------------------------------------------



                        TOP ELEMENT
---------------------------------------------------------
Data: 21                Address: 007AF230       Next: 007AF1C0
---------------------------------------------------------
                             |
                            \|/
---------------------------------------------------------
Data: 7         Address: 007AF1C0       Next: 00000000
---------------------------------------------------------
</code></pre>

<p>Notice that both nodes with the value 7 have the same pointer address. Now that the <code>Stack</code> class has a destructor, <a href="https://en.cppreference.com/w/cpp/language/copy_constructor" rel="noreferrer">copying</a> and <a href="https://en.cppreference.com/w/cpp/language/copy_assignment" rel="noreferrer">assignment</a> need to be handled to avoid deleting the same pointer address more than once. The simplest way is to disallow both.</p>

<pre><code>Stack(const Stack&amp; other) = delete; // delete the copy constructor
Stack&amp; operator=(const Stack&amp; other) = delete; // delete the assignment operator
</code></pre>

<p>With these lines in your class declaration, the following code will not compile:</p>

<pre><code>Stack s1;
Stack s2 = s1; // error: Stack cannot be copied
Stack s3(s1); // error Stack cannot be copied

Stack s4;
s4 = s1; // error: Stack cannot be assigned to.
</code></pre>

<p>If you want your <code>Stack</code> class to be copyable, then you need to explicitly copy all of the data from one to the other.</p>

<pre><code>Stack(const Stack&amp; other) : top(nullptr)
{
    if( ! other.isEmpty())
    {
        top = new Node(other.top-&gt;data, nullptr);
    }
    else
    {
        return;
    }

    Node* bottom = top;
    for(Node* n = other.top-&gt;next; n != nullptr; n = n-&gt;next)
    {
        bottom-&gt;next = new Node(n-&gt;data, nullptr);
        bottom = bottom-&gt;next;
    }
}
</code></pre>

<p>After adding the copy constructor, you can rerun the code with <code>s1</code> and <code>s2</code> and see that the nodes containing the value 7 are at different addresses.</p>

<p>I'll leave writing the assignment operator as an exercise for you.</p>

<h3>Tell the user when a request cannot be completed</h3>

<p>Right now, when a user calls <code>getTop()</code> on an empty <code>Stack</code>, the user still gets an answer. Unless the user of this class sees the comment that <code>INT32_MIN</code> is never a valid value, there's no indication that anything went wrong. You may not have need of data values outside of [-100, 100], but what about future users (including your future self)? Why should your class not be allowed to store <code>INT32_MIN</code> as a valid piece of data?</p>

<p>It is better to tell the user that there is no data to be had. One way, if you are using C++17 (which may require a compiler flag or changing an IDE option), is to return a <code>std::optional&lt;int&gt;</code> (<a href="https://en.cppreference.com/w/cpp/utility/optional" rel="noreferrer">reference</a>).</p>

<pre><code>#include &lt;optional&gt;

// ...

std::optional&lt;int&gt; getTop()
{
    if(isEmpty())
    {
        return std::nullopt;
    }
    else
    {
        return top-&gt;data;
    }
}
</code></pre>

<p>The other option is to <a href="https://en.cppreference.com/w/cpp/language/throw" rel="noreferrer">throw an exception</a> in the empty case.</p>

<p>This way the caller of <code>getTop()</code> has to check if there is any data to be had.</p>

<h3>Other notes</h3>

<p>In the <code>display()</code> method, you can use a for-loop instead of a while loop to centralize all of the looping logic.</p>

<pre><code>void display()
{
    for(Node* n = top; n != nullptr; n = n-&gt;next)
    {
        // output
    }
}
</code></pre>

<p>One more nitpick, you don't need the keyword struct in the <code>Node::next</code> declaration.</p>

<pre><code>struct Node {
    Node(int inputData, Node* inputNext) : data(inputData), next(inputNext) {}
    int data;
    Node* next;
};
</code></pre>

<h1>Using modern C++ features</h1>

<p>A great way of improving this code is to use smart pointers. The <code>std::unique_ptr</code> (<a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" rel="noreferrer">reference</a>) tells readers, users, and the compiler that the variable or class containing the <code>unique_ptr</code> is responsible for cleaning up the variable when it is no longer needed.</p>

<p>So, you can change your <code>Node</code> class to</p>

<pre><code>#include &lt;memory&gt;

struct Node {
    Node(int inputData, Node* inputNext) : data(inputData), next(inputNext) {}
    int data;
    std::unique_ptr&lt;Node&gt; next;
};
</code></pre>

<p>And the <code>Stack</code> class turns into</p>

<pre><code>class Stack {
private:
    std::unique_ptr&lt;Node&gt; top;
// ...
</code></pre>

<p>Now, when a stack instance leaves the scope where it was created, the <code>top</code> node is automatically <code>delete</code>d. When <code>top</code> is <code>delete</code>d, <code>top-&gt;next</code> is automatically <code>delete</code>d, and then <code>top-&gt;next-&gt;next</code>, and then <code>top-&gt;next-&gt;next-&gt;next</code>, etc. So, you no longer need an explicit destructor (<code>~Stack</code>). The compiler will generate the correct destructor for you.</p>

<p>Now, you no longer have to call <code>delete</code> on any pointers. For example, the <code>pop()</code> method is now reduced to</p>

<pre><code>void pop()
{
    if( ! isEmpty())
    {
        top = std::move(top-&gt;next);
    }
}
</code></pre>

<p>The <code>std::move()</code> call means that the contents of <code>top-&gt;next</code>--both the data and the pointer to the <code>top-&gt;next-&gt;next</code> node--will be stolen and moved into <code>top</code>. The previous contents of <code>top</code> will be deleted as this happens.</p>

<p>The other places where pointer manipulation changes is anywhere <code>new</code> is called. The <code>push()</code> method is now written with smart pointers as</p>

<pre><code>void push(int value)
{
    top = std::make_unique&lt;Node&gt;(value, top.release());
};
</code></pre>

<p>The <code>release()</code> method returns the raw (non-smart) pointer held by the smart pointer and removes all responsibility for deleting it from that smart pointer. This happens so that the new smart pointer being added takes over responsibility for deleting the data when it is no longer needed. Assigning the new <code>std::unique_ptr</code> to <code>top</code> means that the <code>Stack</code> instance is now responsible for deleting the newly created <code>Node</code>.</p>

<p>Finally, if you don't want your <code>Stack</code> class to be copyable or assignable, you no longer need to delete those functions, since they will no longer be automatically generated. Instances of <code>std::unique_ptr</code> are not copyable or assignable, so any class they are a part of will lose those qualities as well. If you want to make your class copyable, you'll need the <code>get()</code> method of the <code>std::unique_ptr</code>. This returns the raw pointer like the <code>release()</code> method, but the <code>std::unique_ptr</code> retains responsibility for deleting the <code>Node</code>. This will allow your program to follow the linked list chain without copying <code>std::unique_ptr</code>s.</p>
    </div>