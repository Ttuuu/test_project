<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's my take on the problem making use of recursion. This works for any number between <strong>0</strong> (<strong>zero</strong>) and <strong>999,999,999</strong> (<strong>nine hundred ninety nine million nine hundred ninety nine thousand nine hundred ninety nine</strong>). </p>

<p><em><strong>Note:</strong> Due to making use of initializer lists, this will only work in C++11.</em></p>

<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

const std::vector&lt;std::string&gt; first14 = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen" };
const std::vector&lt;std::string&gt; prefixes = {"twen", "thir", "for", "fif", "six", "seven", "eigh", "nine"};

std::string inttostr( const unsigned int number )
{
    if( number &lt;= 14 )
        return first14.at(number);
    if( number &lt; 20 )
        return prefixes.at(number-12) + "teen";
    if( number &lt; 100 ) {
        unsigned int remainder = number - (static_cast&lt;int&gt;(number/10)*10);
        return prefixes.at(number/10-2) + (0 != remainder ? "ty " + inttostr(remainder) : "ty");
    }
    if( number &lt; 1000 ) {
        unsigned int remainder = number - (static_cast&lt;int&gt;(number/100)*100);
        return first14.at(number/100) + (0 != remainder ? " hundred " + inttostr(remainder) : " hundred");
    }
    if( number &lt; 1000000 ) {
        unsigned int thousands = static_cast&lt;int&gt;(number/1000);
        unsigned int remainder = number - (thousands*1000);
        return inttostr(thousands) + (0 != remainder ? " thousand " + inttostr(remainder) : " thousand");
    }
    if( number &lt; 1000000000 ) {
        unsigned int millions = static_cast&lt;int&gt;(number/1000000);
        unsigned int remainder = number - (millions*1000000);
        return inttostr(millions) + (0 != remainder ? " million " + inttostr(remainder) : " million");
    }
    throw std::out_of_range("inttostr() value too large");
}

int main()
{
    try {
        for( int i = 0; i &lt;= 999999999; i++ )
            std::cout &lt;&lt; i &lt;&lt; " = " &lt;&lt; inttostr(i) &lt;&lt; std::endl;
    } catch( std::exception&amp; ex ) {
        std::cerr &lt;&lt; "Error: " &lt;&lt; ex.what() &lt;&lt; std::endl;
    }
    return 0;
}
</code></pre>
    </div>