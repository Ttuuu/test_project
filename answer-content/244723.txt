<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>system()</h2>
<p>replace <code>os.system</code> with a call to <code>subprocess</code>, which for all intents and purposes replaces the former.</p>
<h2>Type hints</h2>
<pre><code>def validate_answer(question, choices):
</code></pre>
<p>can be</p>
<pre><code>def validate_answer(question: str, choices: Sequence[str]) -&gt; str:
</code></pre>
<p>The <code>Sequence</code> is appropriate because you need <code>choices</code> to be both iterable and indexable.</p>
<h2>Global variables</h2>
<pre><code>yes_no   = ['y', 'n']
</code></pre>
<p>can be</p>
<pre><code>YES_NO = 'yn'
</code></pre>
<p>In other words, a string is itself a sequence of strings, each one character long.</p>
<h2>Statics</h2>
<p>These three:</p>
<pre><code>values = [str(v) for v in range(2, 11)] + list('JQKA')
suits = "Spades Diamonds Hearts Clubs".split()
suit_symbols = ['♠','♦','♥','♣']
</code></pre>
<p>should probably all be tuples, since it's expected that none of them should change.</p>
<p>Also, for both values and suits, you should attempt to model them as <code>Enum</code>s. They have a fixed set of valid values.</p>
<p>You re-declare these in <code>mini_card_visual</code>, <code>large_card_visual</code> etc. when you should not; just declare them once.</p>
<h2>Don't lie to your user</h2>
<pre><code>    print("Reshuffling the Deck...\n")
    time.sleep(1)
    print("Reshuffling the Deck...\n")
    time.sleep(1)
    print("Reshuffling the Deck...\n")
    time.sleep(1)
</code></pre>
<p>I don't have very many pet peeves when it comes to user interface design, but this is one of them.</p>
<p>You're implying that during the sleep, something is actually happening, when it isn't. Don't lie to your user. Just output the message once, don't sleep, and do the <code>shuffle()</code>.</p>
<h2>Set membership</h2>
<pre><code>any(card.value == 'A' for card in self.hand)
</code></pre>
<p>is not bad. Another way to model this is</p>
<pre><code>'A' in {card.value for card in self.hand}
</code></pre>
<p>Since the data are so small there won't really be an impact to performance either way.</p>
<h2>Typo</h2>
<p><code>sorry, you dont</code> -&gt; <code>sorry, you don't</code></p>
<p>Similar for other instances of <code>dont</code>.</p>
    </div>