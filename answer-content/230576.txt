<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I messed around with performance of some alternate implementations:</p>

<pre><code>#!/usr/bin/env python3

from collections import OrderedDict
from string import ascii_lowercase
from timeit import timeit


def method_1(exclude):
    list_of_all_letters = list(ascii_lowercase)
    for char in exclude:
        if char in list_of_all_letters:
            list_of_all_letters.remove(char) 
    return ''.join(list_of_all_letters)


def method_2(exclude):
    if exclude == []:
        return string.ascii_lowercase
    else:
        remaining_letters = ''
        for char in ascii_lowercase:
            if char not in exclude:
                remaining_letters += char
        return remaining_letters


def bullseye(exclude):
    return ''.join(letter for letter in ascii_lowercase if letter not in exclude)



ALL_LETS = set(ascii_lowercase)


def subtract_set(exclude):
    return ''.join(sorted(ALL_LETS - exclude))


LET_DICT = OrderedDict((l, l) for l in ascii_lowercase)


def update_dict(exclude):
    lets = LET_DICT.copy()
    lets.update((l, '') for l in exclude)
    return ''.join(lets.values())


methods = (method_1,
           method_2,
           bullseye,
           subtract_set,
           update_dict,
           )

def test():
    for method in methods:
        assert method(set()) == 'abcdefghijklmnopqrstuvwxyz'
        assert method(set('bcd')) == 'aefghijklmnopqrstuvwxyz'
        assert method(set('abcdefghijklmnopqrstuvwxyz')) == ''


def time_them():
    N = 100_000
    exclude = set('abcdefghi')
    for method in methods:
        def exec():
            method(exclude)    
        us = timeit(exec, number=N) * 1e6 / N
        print(f'{method.__name__:15} {us:.2f} us')

if __name__ == '__main__':
    test()
    time_them()
</code></pre>

<p>This outputs:</p>

<pre><code>method_1        3.05 us
method_2        1.98 us
bullseye        2.40 us
subtract_set    1.76 us
update_dict     6.38 us
</code></pre>

<p>Of note:</p>

<ul>
<li>You should always be passing the exclusion argument as a <code>set</code>, not a <code>list</code>, because set membership tests are O(1) and list membership tests are O(N)</li>
<li>@bullseye provided the typical list comprehension implementation, but it performs more poorly than your method 2, interestingly. This will vary based on Python version; I'm on 3.7.4.</li>
<li><code>subtract_set</code> is so fast because set subtraction is itself fast, and if you hold onto a pre-constructed set for the whole alphabet, the added cost of a post-sort step is still worth it.</li>
</ul>
    </div>