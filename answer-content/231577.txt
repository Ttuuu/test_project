<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to code review from the top down. Don't be discouraged, but I have a lot of suggestions:</p>

<h2>Change name of class 'Test'</h2>

<p>Lots of projects put classes outside of the production build based on the ClassName starting or ending with <code>Test</code>. Of course it doesn't matter when you're just messing around, but it's good practice to avoid such a name for a class that is not an Automated test. </p>

<p>Another problem arises when you create a test for Test, if you follow the common naming pattern you're left with <code>TestTest</code>, which is an awkward name.</p>

<h2>Change name of 'input'. Set it as Final.</h2>

<p><code>input</code> is a poor name. Normally input would refer to input from somewhere, such as the user. Not the object used to get the input. I suggest renaming it <code>scanner</code>. You can also declare it as <code>final</code> since it never needs to change.</p>

<h2>Use methods &amp; don't repeat yourself.</h2>

<p>Whenever you copy &amp; paste some code in more than 1 place, you should ask yourself if it could be a method. This holds true even when you make a slight change to the pasted code.</p>

<p>I work with a fairly large code base and I've only seen a maximum of 1-2 lines of code repeated. Even that could be reduced to 0. In other words, you should never repeat yourself.</p>

<p>Even if you forget about re-usability, You should get into the habit of creating methods wherever they make sense to help readability of your code.</p>

<p>This could be a method:</p>

<pre><code>Scanner input1 = new Scanner(System.in);
System.out.println("What type of services would you like?");
System.out.println("1. Voice");
System.out.println("2. Database");
System.out.println("3. Admin");
System.out.println("4. Email");

int choice1 = input1.nextInt();
</code></pre>

<p>But we already have an <code>input</code>, so we don't need to instantiate another Scanner object.
You can either take it as an parameter, or just reference it directly if it's kept as a class variable.</p>

<p>So a better method would look like:</p>

<pre><code>private static int promptUserForBeginningServices(Scanner scanner)
{
    System.out.println("We have the following services:");
    System.out.println("Voice, Database, Admin, Email");
    System.out.println("How many services would you like?");

    return scanner.nextInt();
}
</code></pre>

<p>..However you may notice this method is doing 2 things: Prompting the user, &amp; getting a result for number of services. Methods should really only be doing 1 thing. But this is our first iteration of refactoring. So we will leave it for now.</p>

<h2>Change the names of 'choice'</h2>

<p>A better name would be <code>choiceEnteredByUser</code>, or <code>typeOfServiceSelected</code>. </p>

<p>"choice" is ambiguous. Actually, it's meaningless. You could have named it <code>x</code> &amp; it would be as descriptive.</p>

<h2>Commenting</h2>

<p>Commenting where the logic start is not helpful. Use comments to describe what code does, when it's not clear. Actually, your first approach is to use descriptive methods &amp; descriptive method names. If it's still not 100% clear, use a comment.</p>

<h2>ENUMS</h2>

<p>Whenever You have a switch statement, you should ask yourself if you should be using an ENUM. That's not to say every switch statement should be an enum, but a lot of them should be. This is one of those times.</p>

<p>"1" is meaningless. You should never have meaningless code.</p>

<p>...That being said, you don't need a switch statement at all, you should be using a Map or parallel arrays.</p>

<h2>Magic Numbers</h2>

<p>Magic numbers / magic strings are those literal values you have hanging around. The numbers in your switch statement, the strings you output to the user ("What type of services would you like?") these should be declare as final static variables at the top of your class. This will help maintenance &amp; readability.</p>

<h2>End notes</h2>

<p>I normally post the finished product when doing code reviews, but I think in this case it would do more damage than good. Don't try to move from 0 - 10 in one round of refactoring. You'll learn a LOT from simply adding methods. Your code will become 10x easier to read, you'll be able to see all the useless duplication &amp; be able to make changes a lot easier.</p>

<p>After you've added methods, adding an ENUM will be another 'aha moment' or epiphany (for lack of better term).</p>

<p>Once you have an ENUM &amp; methods, see if you can remove all of your magic strings.</p>

<p>Once you have all your String messages at the top, you'll probably notice you can group them... See if you can put them into Arrays. Afterwards, your code has literally been cut in half (by line number, assuming you can print those array messages in a loop).</p>
    </div>