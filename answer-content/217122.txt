<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static class TimeSpanConverter
    {
        public static TimeSpan Convert(string input)
</code></pre>
</blockquote>

<p>To people who use WPF a lot, the name hints at this class being a <code>TypeConverter</code> or an <code>IValueConverter</code>. I would say that it's really a parser. Similarly, I think that the method should be called <code>Parse</code>.</p>

<hr>

<blockquote>
<pre><code>            var units = new Dictionary&lt;string, int&gt;()
            {
                {@"(\d+)(ms|mili[|s]|milisecon[|s])", 1 },
                {@"(\d+)(s|sec|second[|s])", 1000 },
                {@"(\d+)(m|min[|s])", 60000 },
                {@"(\d+)(h|hour[|s])", 3600000 },
                {@"(\d+)(d|day[|s])", 86400000 },
                {@"(\d+)(w|week[|s])", 604800000 },
            };
</code></pre>
</blockquote>

<p>The prefix <em>milli</em> has two <em>l</em>s. <em>millisecond</em> ends in a <em>d</em>.</p>

<p><code>[|s]</code> is more idiomatically written as <code>s?</code>.</p>

<p>Given the way the regexes are used (searching for matches without anchoring), most of them could be simplified. E.g. any match for <code>min</code> would also match <code>m</code>, so <code>@"(\d+)m"</code> will find exactly the same multiples of a minute.</p>

<p>The numbers on the right are <em>magic numbers</em>, and at a glance I can't be completely certain that they're correct. I would prefer to use <code>TimeSpan</code> instances and take advantage of <code>TimeSpan.FromMilliseconds(1)</code>, <code>TimeSpan.FromSeconds(1)</code>, etc.</p>

<p>I think that a real world example of a human-readable string would be <code>"1 day, 13 hours, 2 minutes, 12 seconds, and 52 ms"</code>. At the very least, I would add <code>\s*</code> between the digits and the units.</p>

<p>Another quite realistic example would be <code>"2 minutes and 13.5 seconds"</code>.</p>

<p>It's also plausible that people will use <code>:</code> as a separator: <code>"2 days, 11:04:20"</code></p>

<p>Then you get ugly stuff like months and years, which don't have fixed lengths.</p>

<p>If you want to refuse to parse some of these, that's fine. But in that case, I think the method still needs to handle them by throwing an exception. At present they would all return <code>TimeSpan.Zero</code>, which is misleading.</p>

<p>Have you given any thought to localisation? If you only want to use this in an English-language context, wouldn't <code>[0-9]</code> make more sense than <code>\d</code>? If you're matching all digits, you should have test cases for things like <code>"¬πdayŸ°hourùü£minute‚ë†second"</code>.</p>

<hr>

<blockquote>
<pre><code>            var timespan = new TimeSpan();
</code></pre>
</blockquote>

<p>Can you think of a more descriptive name for this variable?</p>

<hr>

<blockquote>
<pre><code>                var matches = Regex.Matches(input, x.Key);
                foreach(Match match in matches)
</code></pre>
</blockquote>

<p>If the string has more than one match for a given regex, isn't that rather worrying? I wouldn't consider <code>"4hours2minutes1hour"</code> to be a very realistic input.</p>

<hr>

<blockquote>
<pre><code>                    var amount = System.Convert.ToInt32(match.Groups[1].Value);
                    timespan = timespan.Add(TimeSpan.FromMilliseconds(x.Value * amount));
</code></pre>
</blockquote>

<p>Again, <code>amount</code> isn't a very descriptive name.</p>

<p><code>TimeSpan</code> supports the operator <code>+</code>, and IMO <code>total += addend;</code> is more readable than <code>total = total.Add(addend);</code>.</p>
    </div>