<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Find purpose-built libraries which are actively maintained. For example, anti-xss:</p>

<pre><code>$harm_string = "Hello, i try to &lt;script&gt;alert('Hack');&lt;/script&gt; your site";
$harmless_string = $antiXss-&gt;xss_clean($harm_string);

$harm_string = "&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;";
$harmless_string = $antiXss-&gt;xss_clean($harm_string);

$harm_string = "&lt;a href='&amp;#x2000;javascript:alert(1)'&gt;CLICK&lt;/a&gt;";
$harmless_string = $antiXss-&gt;xss_clean($harm_string);

$harm_string = "&lt;a href=\"\u0001java\u0003script:alert(1)\"&gt;CLICK&lt;a&gt;";
$harmless_string = $antiXss-&gt;xss_clean($harm_string);

$harm_string = '&lt;li style="list-style-image: url(javascript:alert(0))"&gt;';
$harmless_string = $antiXss-&gt;xss_clean($harm_string);

$harm_string = '&lt;li style="list-style-image: url(javascript:alert(0))"&gt;';
$antiXss-&gt;removeEvilAttributes(array('style')); // allow style-attributes
$harmless_string = $antiXss-&gt;xss_clean($harm_string);

$harm_string = "\x3cscript src=http://www.example.com/malicious-code.js\x3e\x3c/script\x3e";
$harmless_string = $antiXss-&gt;xss_clean($harm_string);

$harm_string = "&lt;iframe width="560" onclick="alert('xss')" height="315" src="https://www.youtube.com/embed/foobar?rel=0&amp;controls=0&amp;showinfo=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;";

$antiXss-&gt;removeEvilHtmlTags(array('iframe'));
</code></pre>

<p>And a UTF8 library for data you are sending:</p>

<pre><code>UTF8::json_enocde(array(1, 'Â¥', 'Ã¤')); // '[1,"\u00a5","\u00e4"]'

UTF8::html_encode('ä¸­æ–‡ç©ºç™½'); // '&amp;#20013;&amp;#25991;&amp;#31354;&amp;#30333;'

UTF8::utf8_decode(UTF8::utf8_encode('-ABC-ä¸­æ–‡ç©ºç™½-')); // '-ABC-ä¸­æ–‡ç©ºç™½-'
</code></pre>

<p>Implement Content Security Policy(CSP) on the web server as well. For example:</p>

<pre>default-src 'self' https:; connect-src 'self' https: http:; font-src 'self' https:; frame-src *; img-src
 'self' https: http: data:; media-src 'self' https:; object-src 'self' https:; script-src 'sha256-q590j1fW
+aERb666H10h55ePy0sxRjUYCiOmJPftXDs=' 'self' https: 'unsafe-eval' 'unsafe-inline' http:; style-src 'self'
 https: 'unsafe-inline' http:; report-uri /tracking/csp?action=listing_frame&amp;controller=embed&amp;req_uuid
=cff37d5d-4c12-4c8b-b288-1ce0d103a25c&amp;version=c7fc601874a5350c79eceb33ba6d4c09a433035f;

</pre>

<blockquote>
  <p><code>default-src</code> is set to 'self' which means it's setting all CSP rules to only allow src attribute from a same-origin. In short, you should only be able to load src from a relative endpoint.
  <code>frame-src</code> is set to wildcard (*) so we can load external src links in frames (iframe, frame, frameset). Because we're injecting HTML past the body element, we cannot use frame or frameset. The WAF has made it next to impossible to use iframe.
  <code>script-src</code> has 'self' supplied after the sha256 hashed script for <code>unsafe-inline</code> and <code>unsafe-eval</code>, but https does not have 'self' supplied meaning we can load external scripts for execution.</p>
</blockquote>

<p><strong>References</strong></p>

<ul>
<li><p><a href="https://github.com/voku/anti-xss/blob/master/tests/XssTest.php#L189" rel="nofollow noreferrer">anti-xss repo: public function testXssClean()</a></p></li>
<li><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20injection" rel="nofollow noreferrer">PayloadsAllTheThings/XSS injection at master Â· swisskyrepo/PayloadsAllTheThings</a> </p></li>
<li><p><a href="https://www.dereuromark.de/2014/08/15/utf8-can-be-tricky-especially-with-php/" rel="nofollow noreferrer">UTF8 can be tricky â€“ especially with PHP â€“ DerEuroMark</a></p></li>
<li><p><a href="https://github.com/voku/portable-utf8#utf8_encodestring-str--string" rel="nofollow noreferrer">voku/portable-utf8: ðŸ‰‘ Portable UTF-8 library - performance optimized (unicode) string functions for php.</a></p></li>
<li><p><a href="https://buer.haus/2017/03/08/airbnb-when-bypassing-json-encoding-xss-filter-waf-csp-and-auditor-turns-into-eight-vulnerabilities/" rel="nofollow noreferrer">Airbnb â€“ When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities | Brett Buerhaus</a></p></li>
<li><p><a href="https://ikvasnica.com/blog/how-to-protect-php-application-from-xss-attacks-csp-3-nonce/" rel="nofollow noreferrer">How to protect PHP application from XSS attacks: CSP 3 nonce | PHP &amp; Symfony Tips</a></p></li>
</ul>
    </div>