<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of general notes. </p>

<ul>
<li>The app directory <em>should</em> be consistent. It’s a UWP app and this is part of the app package family name. Your implementation is fine though. </li>
<li>I would take advantage of some strong type instead of <code>”jpg”</code> and <code>”png”</code> strings. </li>
<li>Speaking of file type detection, you might want to <a href="https://docs.rs/tree_magic/0.2.1/tree_magic/" rel="nofollow noreferrer">use a library like tree_magic</a></li>
<li>You really shouldn’t <code>unwrap()</code> unless you’re absolutely sure it shouldn’t fail. It’s really user unfriendly and should be reserved for developer errors. Most of your <code>unwraps</code> could fail due to file permissions. In a small app like this, I’d probably go with <a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.expect" rel="nofollow noreferrer">expect</a> to give a friendlier error message. In something larger, the linked doc contains all the methods you’d expect on a result type. </li>
</ul>

<p>Some things I like:</p>

<ul>
<li>You quickly embraced idioms, like pattern matching and omitting the <code>return</code> keyword. </li>
</ul>

<p>Confusion:</p>

<p>We’ve been reviewing each other’s code for a long time. I’m consistently surprised by your propensity to in-line dense logic in preference to extracting methods. 
I don’t mind the dense logic, I just think you have a general opportunity to <em>name</em> things and raise the level of abstraction. For this app, I expect the code to read like this, hiding away the lower level details. </p>

<pre><code>let outdir = parse_args().or_else(“./out”);
let files = get_files();
copy_files(files, outdir);
</code></pre>
    </div>