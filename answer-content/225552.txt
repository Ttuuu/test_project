<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've read this question and the associated code a couple of times because I really wanted to review it. First of all I'd say that there's not much to review because it's really well written (and it's a complex subject).</p>

<hr>

<p>Usage of <code>functools.partial</code></p>

<p>This may be opiniated, but I don't think you should be using <code>partial</code> here. </p>

<p>I think you used it to make the code cleaner, but all in all, what's the difference between these two pieces of code : </p>

<pre><code>points_mask = partial(selected_points_mask,
                      points,
                      image_shape=image_shape,
                      count=max_count,
                      radius=radius)

for _ in range(max_iterations_count):
    result_mask = points_mask(grid_resolution=grid_resolution)
</code></pre>

<p>and</p>

<pre><code>for _ in range(max_iterations_count):
    result_mask = selected_points_mask(points,
                      image_shape=image_shape,
                      count=max_count,
                      radius=radius,
                      grid_resolution=grid_resolution)
</code></pre>

<p>There are two other reasons I don't think you should use it : </p>

<ol>
<li>You only re-use the partial function once</li>
<li>It adds complexity to your code for nothing</li>
</ol>

<hr>

<pre><code>grid_shape = (int(image_shape[0] // grid_resolution) + 1,
              int(image_shape[1] // grid_resolution) + 1)
</code></pre>

<p>You don't need to use the <code>int</code> conversion here, integer division <code>//</code> will return an int anyways.</p>

<hr>

<p>That's a small performance improvement, but you compute radius*radius often while it could be computed once. You could create a <code>radius_pow_2</code> variable and pass this to your <code>circular_mask</code> function.</p>

<hr>

<p>In the select function, I'd be inclined to rename <code>count</code> to <code>k</code>. This might not be a popular decision, but you use <code>k</code> everywhere when you explain the algorithm, so it's very clear what it's supposed to do. It's also a pretty popular parameter (think K-Means Clustering or K Nearest Neighbours).</p>

<p>I also think you should revisit the documentation for this parameter : <code>:param max_iterations_count: prevents infinite loop</code>. The idea, if I understood correctly, isn't to prevent an infinite loop, but to set a "time limit" where you accept that the algorithm isn't finding a reasonable solution and this difference is pretty important.</p>

<p>This parameter do could also use some love : <code>:param radius: as number of cells where points won't be selected;</code>. It's not very clear what it means (even though it's clear what it does in your post, but the documentation should be clear, otherwise why have it.)</p>

<hr>

<p>You throw <code>ValueError</code>, first I don't think that's the right exception (I also think the slim choice of exceptions we can throw in Python is... way too slim.)</p>

<p>Second I think it could be more detailed as to why the algorithm didn't find a solution. Was K too large? Was the initial radius too big/small? I'm pretty sure that by analyzing the responses your algorithm gave while iterating, you could give a little more "meat" to your exception message. While that might not be a good solution for a real time system, it could be an interesting addition for debugging.</p>

<hr>

<p>If I understood correctly, in the <code>erase_extra_points</code> method, you basically delete every points after the k-est one. This as a consequence that the points near the bottom of your image would be deleted (again, if I understood correctly), without concern towards the importance of the said points. Even if I'm mistaken in my previous sentence, the idea is that deleting points with such a "simple" algorithm could hurt your performance.</p>

<hr>

<p>Finally, I'm no CV expert either, but if there's one thing I've learned is that if you have a performance of 45% and you need it to be much higher, it might be wise to get more creative and think of other solutions. </p>
    </div>