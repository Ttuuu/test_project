<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should separate concerns whenever possible. Since BLE &amp; HTTP requests are quite different, you could write the following protocols:</p>

<pre class="lang-swift prettyprint-override"><code>protocol Request {
    associatedtype Provider
    var provider: Provider { get }

    func execute() 
}

protocol BLERequest: Request {
    typealias Provider = BLEProvider

    var code: UInt { get }
    var characteristic: CBCharacteristic { get }
    var service: CBService { get }
}

protocol HTTPRequest: Request {
    typealias Provider = NetworkProvider

    var data: Data { get }
    var accessToken: String { get }
    var method: HTTPMethod { get }
    var params: [String:Any]? { get }
}
</code></pre>

<p>Then comes the magic; you can write generic extensions on your <code>Request</code> protocol, for each specific <code>Request</code> type.</p>

<pre class="lang-swift prettyprint-override"><code>extension Request where Self: BLERequest {
    func execute() {
        // provider is available since it is a get-able requirement, 
        // and we know it is a BLEProvider instance
        // same goes for all the other get-able vars
        provider.writeValue(data: code, characteristic: characteristic, service: service)
    }
}

extension Request where Self: HTTPRequest {
    func execute() {
        // Again, same thing, we have all vars we need
        provider.performRequest(data: data, token: accessToken, method: method, params: params)
    }
}
</code></pre>

<p>Then, when you are implementing a new <code>Request</code>, all you need to do is implement the requirements for your chosen protocol, and everything else will be handled for you :)</p>

<p>Example:</p>

<pre class="lang-swift prettyprint-override"><code>enum MyBLERequest: BLERequest {
    case getStatus
    case download

    // MARK: BLE Request conformance
    var provider: Provider {
        return BLEProvider(... whatever init is needed)
    }

    var code: UInt {
        switch self {
        case .getStatus: return 0x01
        case .download: return 0x02
        // Any further new case will require you to implement the code here, so you have compile-time safety :)
        }
    }

    var characteristic: CBCharacteristic {
        return CBCharacteristic(.. init)
    }

    var service: CBService {
        return CBService(... more init)
    }
}
</code></pre>

<p>Then you can simply do <code>MyBLERequest.getStatus.execute()</code>, and it's all done through the protocol extension code.</p>

<p>And since Swift Enums allow associated values, you can always pass in additional parameters, whenever needed (you could have another case <code>case getAuthToken(byUserID: String)</code>, which are then available to you in your implementation)</p>

<p>Now, since you have this all neatly separated, I would go further and pass your <code>Request</code> instances to each specific <code>Provider</code> directly. In effect, you are not the one <code>executing</code> a request, a <code>provider</code> is. That means your requests are agnostic to whatever <code>Provider</code> executes them, which will allow you to set up unit testing easier (because then you can write Mock Providers, and still pass them your requests like usual).</p>

<p>So you should probably extend each provider like such:</p>

<pre class="lang-swift prettyprint-override"><code>extend BLEProvider {
    func execute(request: BLERequest) {
        writeValue(code: request.code, 
                   characteristic: request.characteristic,
                   service: request.service)
    }
}
</code></pre>
    </div>