<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your use of the <code>i</code> variable isn't clear to me.</p>

<p>The algorithm might look like this (starting with an empty permutation):</p>

<ol>
<li>Repeat 'forever' (precisely: until a break):</li>
<li>if the permutation isn't full yet (length less than <code>n</code>), append zeros (or whatever the minimum allowed value is);</li>
<li>otherwise:</li>
<li><ol>
<li>add the permutation to results,</li>
<li>remove the tail of maximum values (<code>m</code> in your code, although I suppose it should be <code>m-1</code>),</li>
<li>if the permutation is empty, it was <code>mm...m</code> hence we're done - exit;</li>
<li>otherwise increment the last element, and continue the loop to fill the tail with zeros.</li>
</ol></li>
</ol>

<p>The implementation below has the condition in the main <code>if</code> negated and if/else clauses swapped when compared to algo above, so the program structure is more similar to yours:</p>

<pre><code>vector&lt;vector&lt;int&gt;&gt; genAllPerms(int n, int m) {
    vector&lt;vector&lt;int&gt;&gt; perms;
    vector&lt;int&gt; perm;
    const int MinVal = 0;
    const int MaxVal = m;    // (m+1) different values allowed

    while (true) {
        if (perm.size() == n) {
            perms.push_back(perm);
            while (!perm.empty() &amp;&amp; perm.back() == MaxVal) {
                perm.pop_back();
            }
            if (perm.empty())
                break;
            perm.back() += 1;
        }
        else { perm.push_back(MinVal); }
    }
    return perms;
}
</code></pre>

<p><strong>Note:</strong> <code>back()</code> has nothing to return from an empty vector - test it with <code>empty()</code> before calling <code>back()</code>.</p>
    </div>