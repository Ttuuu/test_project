<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code> if(st.isEmpty())
  return true;
 else return false;
</code></pre>

<p>This can be simplified to <code>return st.isEmpty();</code>... Wait, that's not the right advice.</p>

<p>Why do you even need a <code>Stack</code> when you can simply <em>count</em>?</p>

<pre><code>public static boolean check(String s) {
    int counter = 0;
    for (int i = 0; i &lt; s.length(); i++) {
        if (s.charAt(i) == '(') {
            counter++;
        } else if (s.charAt(i) == ')') {
            if (counter == 0) {
                return false;
            }
            counter--;
        }
    }
    return counter == 0;
}
</code></pre>

<p>Other issues (which may or may not be picked up by the automatic assessment):</p>

<ul>
<li>If this is assessed using Java 7, using <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"><code>try-with-resources</code></a> is recommended for the <code>BufferedReader</code> instance.</li>
<li>You can inline the printing of the results, i.e. <code>System.out.println(check(input));</code>.</li>
<li>Please use braces consistently... that tends to improve code readability for <em>human</em> programmers.</li>
</ul>

<p><strong>edit:</strong> OK, second stab at a Java 8 stream-based solution...</p>

<pre><code>// Using better-suited visibility modifier and method name
private static boolean balanced(String input) {
    return input.chars().mapToDouble(i -&gt; i == '(' ? 1 : i == ')' ? -1 : 0).reduce(0,
            (a, b) -&gt; a == 0 &amp;&amp; b == -1 ? Double.NaN : a + b) == 0;
}
</code></pre>

<p><code>mapToDouble()</code> is used here just so that <code>Double.NaN</code> can be used as a special placeholder to effectively ignore further computations when a <code>)</code> is encountered without a matching <code>(</code>. It doesn't look as streamlined as I hoped it would be though, and I think for most intent and purposes the non-stream-based way works and reads <em>just a little</em> better.</p>
    </div>