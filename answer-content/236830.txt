<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Classes</h3>

<p>Typically, a class encapsulates the data and functionality of the thing the class is modeling.  The class might have various attributes that describe the thing (position, heading), and some methods for actions the thing does (move).  Here, the problem says that NASA sends a command string to the rover.  The rover then processes the commands in the command string.  So, it makes sense to put the command processing code in a method of the Rover class.</p>

<h3>Plateau</h3>

<p>In a more complicated simulation, a Plateau (or Terrain) class might make sense for simulating the environment.  For example, it could model ground slope or wheel traction, so the rover would require more energy to go uphill or need to go slow on loose soil.  In this simulator, it is not needed.</p>

<h3>Looping</h3>

<p>When processing the command string, it would be more pythonic to iterate over the string directly, rather than using an index into the command string.  Instead of</p>

<pre><code>while current_command &lt;= command_length - 1:

        if command[current_command] == 'L':
            rover.rotate_left()
            current_command += 1

        ...
</code></pre>

<p>use</p>

<pre><code>for letter in command:

    if letter == 'L':
        ...
    elif letter == 'M':
        ...
</code></pre>

<h3>I/O</h3>

<p>It is generally a good idea to separate I/O from model code. For example, if you wanted to change the current code so the rover is controlled via a web interface, a RESTful API, or via intergalactic WiFi, the Rover class would need to be revised.</p>

<h3>f-strings</h3>

<p>f-strings makes is easy to format strings. Rather than </p>

<pre><code>str(self.X) + " " + str(self.Y) + " " + self.direction
</code></pre>

<p>use</p>

<pre><code>f"{self.X} {self.Y} {self.direction}"
</code></pre>

<p>All together, something like this:</p>

<pre><code>RIGHT_ROTATE = {
    'N':'E',
    'E':'S',
    'S':'W',
    'W':'N'
}

LEFT_ROTATE = {
    'N':'W',
    'W':'S',
    'S':'E',
    'E':'N'
}


class MarsRover():
    """
    class to simulate a Mars rover.
    """

    def __init__(self, x, y, heading):
        self.x = x
        self.y = y
        self.heading = heading


    def rotate_right(self):
        """rotate rover 90 degees clockwise."""
        self.direction = RIGHT_ROTATE[self.direction]


    def rotate_left(self):
        """rotate rover 90 degees counter clockwise."""
        self.direction = LEFT_ROTATE[self.direction]


    def move(self):
        """ moves the rover 1 grid square along current heading."""

        if self.heading == 'N':
            self.y += 1
        elif self.heading == 'E':
            self.x += 1
        elif self.heading == 'S':
            self.y -= 1    
        elif self.heading == 'W':
            self.x -= 1


    def execute(self, command_string):
        """parse and execute single letter commands in 
        a command string.

        L/R - turn 90 degrees left/right
        M   - move one grid square in the current heading.
        """

        for command in command_string:
           if command == 'L':
               self.rotate_left()

           elif command == 'R':
               self.rotate_right()

           elif command == 'M':
               self.move()

           else:
               raise ValueError("Unrecognized command '{command"}'."


    def __str__(self):
        return f"{self.x} {self.y} {self.heading}"


def main():
    # this should have some error checking
    coords = input("Enter x and y coordinate (e.g., 3 11): ")
    x, y = (int(s) for s in coords.strip().split())
    heading = input("Enter initial heading: ")

    rover = MarsRover(x, y, heading)        

    while True:

        command_string = input("Please input directions for rover.")
        if comment_string == '':
            break

        rover.execute(command_string)    

        print(str(rover))


if __name__ == '__main__':

    main()
</code></pre>

<p>One more thing:</p>

<h3>enums</h3>

<p>Instead of letters 'N', 'S', etc. consider using enums.</p>
    </div>