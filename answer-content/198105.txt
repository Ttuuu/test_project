<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The <code>row</code> conveys the information easily obtained from <code>solution</code>, and therefore looks redundant. Consider</p>

<pre><code>    public boolean canPutQueen(int r, int c, StringBuilder solutions) {
        int queen;
        for (int i = 1; i &lt;= c; i++) {
            queen = solution.charAt(c - i);
            if (queen == r || queen == (r - i) || queen == (r + i))
                return false;
        }
        return true;
    }
</code></pre>

<p>and you may abandon <code>rows</code> altogether.</p>

<p>BTW, the doc comment on <code>rows</code> is very misleading:</p>

<pre><code> * @param rows BitSet of occupied rows at column c not accounting for diagonals
</code></pre>

<p>As a reviewer I had very hard time trying to understand how there might be an <em>occupied</em> row at the column we are working at. You surely meant <em>attacked</em>.</p></li>
<li><p>The threads do not compete for any data, except <code>solutions</code>. Notice that the per-thread sets of solutions are guaranteed to be disjoint (they surely differ at the first column). Consider each thread to work on its own set of solutions (again, there is no need to have a <code>Set</code>: the algorithm produces no dupes, so a per-thread <code>List</code> suffices), and let the main thread to combine them.</p></li>
<li><p>I don't know whether these recommendations would enhance the performance. How does a single-threaded version perform?</p>

<p>In any case, when in doubt, profile.</p></li>
</ul>
    </div>