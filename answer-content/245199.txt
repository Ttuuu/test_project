<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two assumptions (because it is simplet for me with them)</p>
<ol>
<li>Code works as it should</li>
<li>This code should be prepared to go "the enterprise road" (e.g. we assume many people maintaining it for a long time in the future).</li>
</ol>
<p><strong>Note</strong> belows are opinions only, please do not treat is as a source of truth because your company might have a different guidelines. Since it is C# code I'm trying to stick to MSFT gudielines and, where not possible, with my own preference.</p>
<h1>Overall comments</h1>
<ul>
<li>I'm really happy that you provided a working 'ready to run' example.</li>
<li>I think you should start thinking about unit testing your code if you haven't already. Simple unit tests as a start. For example 'does <code>Upvote()</code> increases the score`'.</li>
<li>I <strong>really</strong> like 'make your functions as short as it is convinient and logical' approach to writing code. Here, it would mean that ideally we would split the main function to a couple of small ones. I would be very happy if you refactored it to small logical functions and posted a new question so we can pick it up from there. I would suggest something similar to the below.</li>
</ul>
<pre><code>Main(){
    WriteWelcomeMessage();
    var userInput = ReadUserInput();
    var newPost = CreateNewPost(userInput);
    while(val){
        DisplayPost(newPost);
        userInput = ReadUserInput();
        ExecutePostAction(userInput, newPost);
    }
}
</code></pre>
<p>Or something similar, I think you get the idea. This can be further split so Main has only two or one function calls.
I consider this approach an implementation of <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">separation of concerns</a> and <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>.</p>
<ul>
<li>This is still early in the project but if you would proceed with this as an enterprise application I would suggest reading on <a href="https://en.wikipedia.org/wiki/Dependency_injection#:%7E:text=In%20software%20engineering%2C%20dependency%20injection,object%20is%20called%20a%20service." rel="nofollow noreferrer">dependency injection</a>. Here you can inject classes like reader, writer, postFactory or similar. This will make the testing much simpler in the future.</li>
<li>I highly recommend to include some style checker (e.g. <a href="https://github.com/StyleCop/StyleCop" rel="nofollow noreferrer">stylecop</a>) this will ensure that you can spot more guidelines issues.</li>
</ul>
<h1>Main function</h1>
<ul>
<li><p>Don't couple your implementation to <code>Console</code> class. I personally would write a class that would encapsulate writing/reading (or maybe two classes?) so you can easily replace it with for example reading from a WPF textbox or writing to a file.</p>
</li>
<li><p>I strongly believe in descriptive variable naming, variable always should be describing its content. Below variables are IMHO missnamed:</p>
<ul>
<li><code>post</code> - should be 'postContent'</li>
<li><code>val</code> - <code>shouldContinue</code> (?)</li>
<li><code>inputData</code> - <code>userChoice</code></li>
</ul>
</li>
<li><p>If you would rename the variables to be descriptive, you can drop type declarations. <code>string</code> or <code>bool</code> are not giving much context. See <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables" rel="nofollow noreferrer">here</a> for more info.</p>
</li>
</ul>
<h1>Post class</h1>
<ul>
<li>I like that you encapsulated upvoting and downvoting to functions.</li>
<li>Is there any reason why content of the post is not passed through the constructor? This might lead to null reference exception if the user of this class would forget to call <code>AddPostMessage</code>.</li>
<li>I would add <code>private</code> infront of the fields</li>
<li>You could inject a writer class to Post in order to decouple it from <code>Console</code> class.</li>
<li>You could also inject some <code>DateTime</code> provider in order to unit test this class easier.</li>
<li>I prefer using <code>DateTime.UtcNow</code> instead, this makes handling multiple timezones easier.</li>
</ul>
    </div>