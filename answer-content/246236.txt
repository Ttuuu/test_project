<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the idea - but have the following comments:</p>
<pre><code>  var originalList = Enumerable.Range(1, 12).ToList();
  IEnumerable&lt;int&gt; myList = originalList.Add(12).If((list, item) =&gt; !list.Contains(item));
</code></pre>
<p>If the <code>originalList</code> is defined explicit as something that implements <code>ICollection</code>, then you get a compiler error saying: "<code>Operator '.' cannot be applied to operand of type 'void'</code>", because <code>Add()</code> is already a method returning <code>void</code>.</p>
<hr>
<blockquote>
<pre><code>    public IEnumerator&lt;T&gt; GetEnumerator()
    {
        if (_added) 
            return _sequence.GetEnumerator();

        _sequence = _sequence.AddItem(_elementToAdd);
        _added = true;

        return _sequence.GetEnumerator();
    }
            
    IEnumerator IEnumerable.GetEnumerator()
    {
        if (_added) 
            return _sequence.GetEnumerator();

        _sequence = _sequence.AddItem(_elementToAdd);
        _added = true;

        return _sequence.GetEnumerator();
    }
</code></pre>
</blockquote>
<p>Don't repeat code - the second method can call the first:</p>
<pre><code>IEnumerator IEnumerable.GetEnumerator()
{
  return GetEnumerator();
}
</code></pre>
<hr>
<blockquote>
<pre><code>public interface IAddEnumerable&lt;T&gt; : IEnumerable&lt;T&gt;
{
    IEnumerable&lt;T&gt; If(Func&lt;IEnumerable&lt;T&gt;, T, bool&gt; expression);
}
</code></pre>
</blockquote>
<p>By renaming this interface you could extend its usability to for instance a sequence like:</p>
<pre><code>data.Remove(12).If(&lt;predicate&gt;);
</code></pre>
<p>Maybe <code>IPredicate</code> or something like that.</p>
<hr>
<p>Although I know that <code>@new</code>, <code>@this</code> etc. are valid variable names, I personally always avoid them, because they distract the reading. I have never been in a situation where it was unavoidable to use them.</p>
<hr>
<p>I understand, that you want a fluid approach, and therefore define the <code>If</code> method separately, but I think, I would concatenate the behavior to a single function like:</p>
<pre><code>public static IEnumerable&lt;T&gt; AddIf&lt;T&gt;(this IEnumerable&lt;T&gt; source, T element, Func&lt;IEnumerable&lt;T&gt;, T, bool&gt; predicate)
{
  return predicate(source, element) ? source.AddItem(element) : source;
}
</code></pre>
<hr>
<p>An idea came to my mind: Because you return <code>this</code> from <code>If()</code>, I think, you can avoid the repetitive code in there by saving the predicate and then handle everything in <code>GetEnumerator()</code>:</p>
<pre><code>  internal class AddEnumerable&lt;T&gt; : IAddEnumerable&lt;T&gt;
  {
    private IEnumerable&lt;T&gt; _sequence;
    private readonly T _elementToAdd;
    private Func&lt;IEnumerable&lt;T&gt;, T, bool&gt; _expression;

    private bool _added;

    public AddEnumerable(IEnumerable&lt;T&gt; sequence, T elementToAdd)
    {
      _sequence = sequence;
      _elementToAdd = elementToAdd;
    }

    public IEnumerable&lt;T&gt; If(Func&lt;IEnumerable&lt;T&gt;, T, bool&gt; expression)
    {
      _expression = expression;
      return this;
    }

    public IEnumerator&lt;T&gt; GetEnumerator()
    {
      if (_added)
        return _sequence.GetEnumerator();

      if (_expression == null || _expression(_sequence, _elementToAdd))
      {
        _sequence = _sequence.AddItem(_elementToAdd);
      }
      _added = true;

      return _sequence.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      return GetEnumerator();
    }
  }
</code></pre>
    </div>