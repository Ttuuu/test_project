<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to C++.</p>

<p>It seems that you are more or less trying to write C code rather than C++ though. Lets have a look at what you can improve:</p>

<ol>
<li><p>Never do <code>using namespace std;</code> It is a terrible practise that gets you into trouble really fast. <code>std::</code> is not that hard to type so get in the habit early.</p></li>
<li><p>If you have compile time constants use them via <code>constexpr</code></p></li>
<li><p>Your <code>dot_product</code> function is already implemented in the standard library. It is called <code>inner_product</code>. So the following code can be replaced</p>

<blockquote>
<pre><code>float dot_product(float *vector1, float vector2[],int dimension){
    float sum = 0;
    for (int i = 0; i &lt; dimension; i++){
        sum += (vector1[i])*(vector2[i]);
    }
    return sum;
}
</code></pre>
</blockquote>

<p>by the following code</p>

<pre><code>std::inner_product(a.cbegin(), a.cend(), b.cbegin(), float(0.0));
</code></pre></li>
<li><p>Similarly there is a <code>generate</code> function that fills a vector with a generator. Note that C++ has a variety of good random number generators (<code>rand()</code> is not one of them) in the <code>&lt;random&gt;</code> header. I don't know why you use integers for the float vectors but you can adapt that easily.</p>

<p>EDIT: Incorporated problems found by @L.F.</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;random&gt;

class randomStreamUniformInt {
public:
    explicit randomStreamUniformInt(int lower_bound, int upper_bound)
    : mt(std::random_device{}()), uniform_dist(lower_bound, upper_bound) {}
    explicit randomStreamUniformInt(int lower_bound, int upper_bound, double seed)
    : mt(seed), uniform_dist(lower_bound, upper_bound) {}

    int operator() () { return uniform_dist(mt); }
private:
    std::mt19937_64                     mt;
    std::uniform_int_distribution&lt;&gt;     uniform_dist;
};

static randomStreamUniformInt rng(-MAXRANGE, MAXRANGE); 

std::vector&lt;float&gt; generate random(const std::size_t numElements) {
    std::vector&lt;float&gt; res(numElements);
    std::generate(res.begin(), res.end(), rng);
    return res;
}
</code></pre>

<p>It would be even better to pass the random number generator as an argument rather than a global variable. I leave that as an exercise.</p></li>
<li><p>You should use standard facilities for arrays such as <code>std::vector</code> or <code>std::array</code> depending on whether you know the size at compile time. So the following code:</p>

<blockquote>
<pre><code>float arbitrary_vector[dimension], orthogonal[dimension]
</code></pre>
</blockquote>

<p>Should be better written as</p>

<pre><code>std::vector&lt;float&gt; arbitrary_vector = generate_random(dimension);
</code></pre>

<p>Note that it is always better to put each declaration into a single line.</p></li>
<li><p>Your method <code>generate_orthogonal</code> can be improved accordingly.</p>

<pre><code>std::vector&lt;float&gt; generate_orthogonal(const std::vector&lt;float&gt;&amp; a) {
    // get some random data
    std::vector&lt;float&gt; b = generate_random(a.size());

    // find the last non zero entry in a
    // We have to turn the reverse iterator into an iterator via std::prev(rit.base())
    auto IsZero = [] (const float f) -&gt; bool { return f == float(0.0);};
    auto end = std::prev(std::find_if_not(a.crbegin(), a.crend(), IsZero).base());

    // determine the dot product up to end
    float dot_product = std::inner_product(a.cbegin(), end, b.cbegin(), float(0.0));

    // set the value of b so that the inner product is zero
    b[std::distance(a.cbegin(), end)] = - dot_product / (*end);

    return b;
}
</code></pre></li>
</ol>

<p>So put together it would look something like this:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

constexpr int MAXRANGE = 1000;

class randomStreamUniformInt {
public:
    explicit randomStreamUniformInt(int lower_bound, int upper_bound)
    : mt(std::random_device{}()), uniform_dist(lower_bound, upper_bound) {}
    explicit randomStreamUniformInt(int lower_bound, int upper_bound, double seed)
    : mt(seed), uniform_dist(lower_bound, upper_bound) {}

    int operator() () { return uniform_dist(mt); }
private:
    std::mt19937_64                     mt;
    std::uniform_int_distribution&lt;&gt;     uniform_dist;
};

static randomStreamUniformInt rng(-MAXRANGE, MAXRANGE); 

std::vector&lt;float&gt; generate random(const std::size_t numElements) {
    std::vector&lt;float&gt; res(numElements);
    std::generate(res.begin(), res.end(), rng);
    return res;
}

std::vector&lt;float&gt; generate_orthogonal(const std::vector&lt;float&gt;&amp; a) {
    // get some random data
    std::vector&lt;float&gt; b = generate_random(a.size());

    // find the last non zero entry in a
    // We have to turn the reverse iterator into an iterator via std::prev(rit.base())
    auto IsZero = [] (const float f) -&gt; bool { return f == float(0.0);};
    auto end = std::prev(std::find_if_not(a.crbegin(), a.crend(), IsZero).base());

    // determine the dot product up to end
    float dot_product = std::inner_product(a.cbegin(), end, b.cbegin(), float(0.0));

    // set the value of b so that the inner product is zero
    b[std::distance(a.cbegin(), end)] = - dot_product / (*end);

    return b;
}

int main() {
    std::size_t dimension = 20;

    std::vector&lt;float&gt; a = generate_random(dimension);
    std::vector&lt;float&gt; b = generate_orthogonal(a);
}
</code></pre>
    </div>