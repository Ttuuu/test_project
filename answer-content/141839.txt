<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The big issue I can see is that you search every element.  You don't need to do this, you only need to check if <code>0</code> is anywhere in that row or column.  You can use the <code>in</code> operation to test this.  It will short-circuit after the first <code>0</code> is found, avoiding having to search the entire row or column.  This won't reduce the time complexity, but will improve the best-case performance considerably.  </p>

<p>Second, you can use <code>zip</code> to switch between rows and columns.</p>

<p>Third, you can reduce that check to a simple list comprehension, generator expression, or generator function.</p>

<p>Fourth, you can use <code>~all</code> to detect if there are any zeros in a given sequence.  This is slightly faster than <code>in</code>.</p>

<p>Finally, since you are making the changes in-place, you don't need to return the modified matrix.</p>

<p>So here is my version:</p>

<pre><code>import unittest


def locate_zero_rows(matrix: list) -&gt; list:
    """Given an NxM matrix find the rows that contain a zero."""
    return [i for i, row in enumerate(matrix) if not all(row)]


def locate_zero_cols(matrix: list) -&gt; list:
    """Given an NxM matrix find the columns that contain a zero."""
    return locate_zero_rows(zip(*matrix))


def zero_out(matrix: list) -&gt; None:
    """Given an NxM matrix zero out all rows and columns that contain at least one zero."""
    zero_rows = locate_zero_rows(matrix)
    zero_cols = locate_zero_cols(matrix)
    ncol = len(matrix[0])
    for rowi in zero_rows:
        matrix[rowi] = [0]*ncol
    for coli in zero_cols:
        for row in matrix:
            row[coli] = 0


class MyTest(unittest.TestCase):
    def test_locate_zero_rows(self):
        matrix = [[5, 3, 2, 1],
                [-3, 0, 5, 0],
                [0, -1, 2, 6]]
        zero_rows = [1, 2]
        self.assertSequenceEqual(locate_zero_rows(matrix), zero_rows)

    def test_locate_zero_cols(self):
        matrix = [[5, 3, 2, 1],
                [-3, 0, 5, 0],
                [0, -1, 2, 6]]
        zero_cols = [0, 1, 3]
        self.assertSequenceEqual(locate_zero_cols(matrix), zero_cols)

    def test_zero_out(self):
        matrix = [[5, 3, 2, 1],
                [-3, 0, 5, 0],
                [0, -1, 2, 6]]
        zeroed_out_matrix = [[0, 0, 2, 0],
                            [0, 0, 0, 0],
                            [0, 0, 0, 0]]
        zero_out(matrix)
        self.assertSequenceEqual(matrix, zeroed_out_matrix)


if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>You can improve this further by making the column list comprehension a expression.  I think this will give this a <code>O(M)</code> space complexity:</p>

<pre><code>def zero_out(matrix: list) -&gt; None:
    """Given an NxM matrix zero out all rows and columns that contain at least one zero."""
    zero_cols = (i for i, col in enumerate(zip(*matrix)) if not all(col))
    zero_rows = [i for i, row in enumerate(matrix) if not all(row)]
    ncol = len(matrix[0])
    for coli in zero_cols:
        for row in matrix:
            row[coli] = 0
    for rowi in zero_rows:
        matrix[rowi] = [0]*ncol
</code></pre>

<p>You can't make both comprehensions with this structure because changes to one would be reflected in the other.  </p>

<p>It is possible to make both comprehensions using <code>itertools.zip_longest</code>, but you don't gain any space complexity (at least for matrices where <code>N</code> and <code>M</code> are similar), and it hurts your performance.  </p>

<p>If you can use numpy, this can be simplified enormously:</p>

<pre><code>import numpy as np
import unittest


def zero_out(matrix: np.array) -&gt; None:
    """Given an NxM matrix zero out all rows and columns that contain at least one zero."""
    zero_cols = ~matrix.all(axis=0)
    zero_rows = ~matrix.all(axis=1)
    matrix[:, zero_cols] = 0
    matrix[zero_rows, :] = 0


class MyTest(unittest.TestCase):
    def test_zero_out(self):
        matrix = np.array([[5, 3, 2, 1],
                           [-3, 0, 5, 0],
                           [0, -1, 2, 6]])
        zeroed_out_matrix = np.array([[0, 0, 2, 0],
                                      [0, 0, 0, 0],
                                      [0, 0, 0, 0]])
        zero_out(matrix)
        np.testing.assert_array_equal(matrix, zeroed_out_matrix)


if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>Edit: added <code>~all</code>.
Edit 2: Add numpy
Edit 3: use <code>not all</code> instead of <code>~all</code></p>
    </div>