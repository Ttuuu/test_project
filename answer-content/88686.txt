<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<p>The variable name has to be as descriptive as possible. DonÂ´t use generic names.</p>

<p><code>temp</code> may be anything, I only know that is lasts for little time, (that I already know because variables declared inside functions remain inside functions) </p>

<pre><code>temp = lst[0]
</code></pre>

<p>Never name your variable <code>temp</code>, I suggest <code>first</code></p>

<h2>Modularize the code</h2>

<pre><code>def shift_left_once(lst):
    temp = lst[0]
    for index in range(len(lst) - 1):
        lst[index] = lst[index + 1]         
    lst[index + 1] = temp

def shift_left(lst, n):
    """Shifts the lst over by n indices

    &gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; shift_left(lst, 2)
    &gt;&gt;&gt; lst
    [3, 4, 5, 1, 2]
    """
    assert (n &gt;= 0), "n should be non-negative integer"
    for _ in range(n):
        shift_left_once(lst)
</code></pre>

<p>I wrote a simpler function that only shifts one time, the other function just calls it many times.</p>

<hr>

<p>If you are forced to use recursion (that should be used very rarely in Python not only because it is slow but also because it is weird (programmers are much more used to explicit loops)) you can:</p>

<pre><code>def shift_left(lst, n):
    """Shifts the lst over by n indices

    &gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; shift_left(lst, 2)
    &gt;&gt;&gt; lst
    [3, 4, 5, 1, 2]
    """
    assert (n &gt;= 0), "n should be non-negative integer"
    if n == 0:
        return
    shift_left_once(lst)
    shift_left(lst, n-1)
</code></pre>
    </div>