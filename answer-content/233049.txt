<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Division by zero</h1>

<p>Your implementation returns zero if you devide by zero. That is wrong. Division by zero is undefined.</p>

<pre><code>if (divisor === 0 || dividend === 0) return 0;
</code></pre>

<p>On other hand, zero divided by nonzero is zero, that's ok. But zero divided by zero is still undefined. And so it should be checked first.</p>

<pre><code>if (divisor === 0) throw "Division by zero";
if (dividend === 0) return 0;
</code></pre>

<h1>Edge cases</h1>

<p>For some reason you are checking combination <code>-2147483648/-1</code> then you claim it is <code>2147483647</code>, but that's wrong. Firstly, <code>2147483648</code> is representable in js number type. But if you consider it overflow, you should throw overflow error.</p>

<pre><code>if (dividend === -2147483648 &amp;&amp; divisor === -1) throw 'Overflow error';
</code></pre>

<p>Btw notice, that <code>-2147483648/n</code> would also overflow further in your code because you convert dividend and divisor to positives. And so maybe you should throw overflow error in this case as well no matter the divisor.</p>

<pre><code>if (dividend === -2147483648) throw 'Overflow error';
</code></pre>

<h1>Simplify conditions</h1>

<p>There is unnecesarily complex condition:</p>

<pre><code>(dividend &lt; 0 &amp;&amp; divisor &gt; 0) || (dividend &gt; 0 &amp;&amp; divisor &lt; 0)
</code></pre>

<p>assuming the first if was already executed, then the eleseif condition can be simplified as</p>

<pre><code>dividend &lt; 0 || divisor &lt; 0
</code></pre>

<p>Or even better, split it in two elseifs, because you have a ternary that checks again.</p>

<pre><code>if (dividend &lt; 0 &amp;&amp; divisor &lt; 0) {
      dividend = -dividend
      divisor = -divisor
} else if (dividend &lt; 0) {
        negativeFlag = true
        dividend = -dividend;
} else if (divisor &lt; 0) {
        negativeFlag = true
        divisor = -divisor;
}
</code></pre>

<p>Notice that I omitted zeroes, because they have been excluded in the beginning.</p>

<h1>Negative flag</h1>

<p>This flag is unnecesary, you could instead have an integer variable with value of +1 or -1.</p>

<pre><code>let quotientUnit = 1;
if (...) quotientUnit = -1;
let quiotentHolder = 0;
while (divisor &lt;= dividend) {
     dividend -= divisor; //notice -=
     quiotentHolder += quotientUnit;
}
return quiotentHolder;
</code></pre>

<h1>Performance</h1>

<p>Just of curiosity, have you tried something like <code>big/small</code>. Is it fast? It seems to me the bigger the result of the division, the more time consuming your algorithm is... Not sure if there is a faster way though. Division without division is not something I usualy think of :) But I could suppose there is not, because that's why we have division optimized in our CPUs, where it can be fastened by paralel processing (by which i mean paralel nature of logic gates, not running multiple threads inside a CPU)</p>

<p>EDIT: You mentioned that your "time complexity is about <code>8248 ms</code>". Firstly, time complexity is not a meassure of time. Time complexity is more like a meassure of relative time consumption based on the size of the input. Since in your case there is no "size of input", time complexity makes no sense with this algorithm. If you wanted to define something like time complexity for your algorithm, it would probably be something like <code>O(dividend/divisor)</code>, but this is not really a time complexity, but I am still able to make sense of it...</p>

<p>But let's suppose you meant the actual run time. Not sure what input does the <code>8248 ms</code> refer to. As I said, the speed is different for different inputs.</p>
    </div>