<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's a good start!  Here are some things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  In this particular case, I happen to think it's perfectly appropriate because it's a single short program that and not a header. Some people seem to think it should never be used under any circumstance, but my view is that it can be used as long as it is done responsibly and with full knowledge of the consequences.  </p>

<h2>Use <code>&lt;cstdlib&gt;</code> instead of <code>&lt;stdlib.h&gt;</code></h2>

<p>The difference between the two forms is that the former defines things within the <code>std::</code> namespace versus into the global namespace.  Language lawyers have lots of fun with this, but for daily use I'd recommend using <code>&lt;cstdlib&gt;</code>.  See <a href="http://stackoverflow.com/questions/8734230/math-interface-vs-cmath-in-c/8734292#8734292">this SO question</a> for details.</p>

<h2>Use <code>for</code> loops rather than <code>while</code> loops where practical</h2>

<p>Your <code>gameloop</code> routine can be simplified a bit by using a <code>for</code> loop rather than a <code>while</code> loop.  here is the current code:</p>

<pre><code>void gameLoop() {
    auto quit = false;
    while(!quit) {
        // other stuff
        quit = shouldGameExit();
    }
}
</code></pre>

<p>I'd recommend writing it as a <code>for</code> loop to do several things.  First, it changes the scope of the <code>quit</code> variable to solely within the loop.  Second, it makes it clear how the exit condition is set:</p>

<pre><code>void gameLoop() {
    for (auto quit = false; !quit; quit = shouldGameExit()) {
        // other stuff
    }
}
</code></pre>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Check return values and handle errors</h2>

<p>The code calls <code>getline</code> but never checks for error return values.  If <code>getline</code> encounters a problem, it sets the <code>failbit</code>.  It's easy to check for this in C++, because of operator overloading.  That is, one could do this:</p>

<pre><code>getline(cin, input)
if (cin) {  // if getline was OK
    ///
}
</code></pre>

<h2>Think of the user</h2>

<p>Generally speaking, it's not unusual for users to type in faulty input.  For that reason, I think I would not <code>throw</code> an exception from with <code>getUserChoice</code>.  Instead of abruptly aborting the user out of the program, a friendlier way to do it would be to give the user a chance to correct the input.  Here's one way to rewrite that function:</p>

<pre><code>Choice getUserChoice() {
    Choice userchoice;
    for (auto valid{false}; !valid; ) {
        cout &lt;&lt; "Rock, paper or scissors? \n";
        string input;
        getline(cin, input);
        if (cin) {
            if(input == "rock" || input == "ROCK" || input == "1" || input == "r" || input == "R") {
                valid = true;
                userchoice = rock;

            } else if(input == "paper" || input == "PAPER" || input == "2" || input == "p" || input == "P") {
                valid = true;
                userchoice = paper;
            } else if(input == "scissors" || input == "SCISSORS" || input == "3" || input == "s" || input == "S") {
                valid = true;
                userchoice = scissors;
            } else {
                cout &lt;&lt; "Sorry, I didn't understand \"" &lt;&lt; input &lt;&lt; "\"\n";
            }
        }
    }
    return userchoice;
}
</code></pre>

<p>Note that one could code a <code>return</code> instead of using the <code>userchoice</code> and <code>valid</code> variables, but I prefer having an easier-to-read program flow without having to hunt for <code>return</code> statements.  You can decide for yourself which flavor you prefer.</p>

<h2>Make sure all paths return a value</h2>

<p>The <code>decideOutcomeOfGame</code> routine returns the outcome of the game.  It's <em>probable</em> that all combinations are enumerated, but I'd prefer to make sure the function returns something every time.  Here's how I'd write it.</p>

<pre><code>Outcome decideOutcomeOfGame(Choice userChoice, Choice botChoice) {
    if (userChoice == botChoice) {
        return draw;
    } else if ((userChoice == rock &amp;&amp; botChoice == paper)
              || (userChoice == paper &amp;&amp; botChoice == scissors)
              || (userChoice == scissors &amp;&amp; botChoice == rock)) {
        return bot;
    }
    return user;
}
</code></pre>

<h2>Consider using a better random number generator</h2>

<p>You are currently using </p>

<pre><code>auto randomNumber = rand() % 3 + 1;
</code></pre>

<p>Normally I recommend the use of the <a href="http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution" rel="noreferrer">C++11 <code>std::uniform_int_distribution</code></a> to replace the old-style <code>rand()</code> but since you're using C++17, you could use <a href="https://en.cppreference.com/w/cpp/algorithm/sample" rel="noreferrer"><code>std::sample</code></a>.  This reduces the <code>getBotChoice()</code> function to this:</p>

<pre><code>Choice getBotChoice() {
    constexpr static std::array&lt;Choice,3&gt; choices{ rock, paper, scissors };
    static auto rnd{std::mt19937{std::random_device{}()}};
    std::vector&lt;Choice&gt; botChoice;
    std::sample(std::begin(choices), std::end(choices), std::back_inserter(botChoice), 1, rnd);
    return botChoice.front();
}
</code></pre>

<p>There is now no need for the <code>throw</code> because the code will never generate an invalid return value.</p>

<h2>Use <code>std::string_view</code> where practical</h2>

<p>Rather than mutable strings, the global variables <code>outcomeMap</code> and <code>choiceMap</code> would be better expressed as a <code>std::array</code> of <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="noreferrer"><code>std::string_view</code></a>.  In other words, instead of this:</p>

<pre><code>string outcomeMap[3] = {"You win!", "Bot wins!", "It was a draw!"};
</code></pre>

<p>Write this:</p>

<pre><code>constexpr array&lt;string_view, 3&gt; outcomeMap{"You win!", "Bot wins!", "It was a draw!"};
</code></pre>

<h2>Consider encapsulating into a namespace</h2>

<p>It doesn't seem as though these functions are going to be useful without each other.  Because they're so closely related (and related as well to the data), I'd recommend consolidating everything into a <code>namespace</code>.</p>

<h2>Understand <code>return 0</code> in main</h2>

<p>When a C or C++ program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so there is no need to put <code>return 0;</code> explicitly at the end of <code>main</code>.  I advocate omitting it to reduce the clutter and let the compiler generate code; others prefer to write it explicitly.  It's up to you to choose which style you prefer, but either way you should know about this compiler behavior.</p>

<h2>Simplify your code</h2>

<p>The code currently contains this construct:</p>

<pre><code>if(input == "no" || input == "NO" || input == "n" || input == "N" || input == "0") {
        return false;
    } else {
        return true;
    }
</code></pre>

<p>As @Deduplicator correctly notes in a comment, better would be to simply return the value of the expression which is already <code>bool</code>:</p>

<pre><code>return !(input == "no" || input == "NO" || input == "n" || input == "N" || input == "0");
</code></pre>
    </div>