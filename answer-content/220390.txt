<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you want is <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>, and the <a href="https://docs.python.org/2/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>Counter.most_common</code></a> method.</p>

<p>A naive implementation could be:</p>

<pre><code>import collections

lists = [list_1, list_2, list_3, list_4, list_5]
counter = collection.Counter(sum(lists))

for name, amount in counter.most_common():
    print('\'%s\' is in %s lists' % (name, amount))
</code></pre>

<p>This however will mean if <code>list_1</code> is <code>['a'] * 5</code> it will say <code>'a'</code> is in five lists when this isn't true. A dictionary comprehension is all that's needed for this building a dictionary from the lists, setting the value to 1. And you can take advantage of the fact <code>collection.Counter</code> has addition defined.</p>

<pre><code>counter = sum(
    collection.Counter({name: 1 for name in names})
    for names in lists
)
</code></pre>

<hr>

<p>Without using <code>collections.Counter</code> I would advise you use <code>set</code>. Firstly it removes the need for using <code>np.unique</code> and emphasis the fact that <code>sorted</code> is redundant, as sets are unordered.</p>

<p>It also means that making <code>all</code> is simple and reduces <code>name in list_1</code> from an <span class="math-container">\$O(n)\$</span> operation to an <span class="math-container">\$O(1)\$</span> operation. Leading to faster code.</p>

<p>As shown earlier it's easier to work with lists, rather than a list of variable names and so <code>lists</code> is defined the same as above.</p>

<pre><code>sets = [set(names) for names in lists]
all = sum(sets)


def in_how_many(value, sets):
    return sum(
        value in set_
        for set_ in sets
    )
</code></pre>

<hr>

<p>No matter which of the above two solutions you use you still have a couple of other problems:</p>

<ul>
<li>Don't put code in global scope, have a <code>main</code> function. This makes it harder to do bad things or mess up.</li>
<li>You should use <code>if __name__ == '__main__'</code> to only allow the code in <code>main</code> to run if it's the 'main' file.</li>
<li>In relation to the above two, notice that I pass <code>sets</code> to <code>in_how_many</code>. This is because you shouldn't rely on global scope as it makes reusing the same code harder to do.</li>
<li>Modulo formatting was deprecated for a while, because it's generally worse than <code>str.format</code> and is more susceptible to errors. I suggest using <code>str.format</code> or upgrading to Python 3.7 to take advantage of f-strings.</li>
<li>Import <code>print_function</code> form <code>__future__</code> to make <code>print</code> a function. This makes it easier to upgrade to Python 3.</li>
</ul>

<pre><code>from __future__ import print_function
import collections
import functools
import operator


def main(lists):
    counter = functools.reduce(
        operator.add,
        (
            collections.Counter(set(names))
            for names in lists
        )
    )

    for name, amount in counter.most_common():
        print('{name!r} is in {amount} lists'.format(name=name, amount=amount))
        # print(f'{name!r} is in {amount} lists')  # Python 3.7 f-string.


if __name__ == '__main__':
    main(...)
</code></pre>
    </div>