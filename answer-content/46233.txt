<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For this class, lazy initialization brings too little benefit relative to the complication it adds.  You only have one member in the enum, and each member of the enum is trivially simple to construct.  Therefore, you should populate the map at class-loading time using a static initializer block.  (As a bonus, it's guaranteed that the initialization happens only once, so it's thread-safe.)</p>

<pre><code>public enum Maps {

    COLOR_RED("ABC", "abc description");

    private final String code;
    private final String description;

    private static final Map&lt;String, String&gt; MAP = new HashMap&lt;String, String&gt;();
    static {
        for (Maps s : Maps.values()) {
            MAP.put(s.code, s.description);
        }
    }

    private Maps(String code, String description) {
        this.code = code;
        this.description = description;
    }                                                                                                                               

    public String getCode() {                                                                                                       
        return code;                                                                                                                
    }                                                                                                                               

    public String getDescription() {                                                                                                
        return description;                                                                                                         
    }                                                                                                                               

    public static String getDescriptionByCode(String code) {                                                                        
        return MAP.get(code);
    }
}
</code></pre>

<p>Also, if <code>COLOR_RED</code> doesn't have any useful meaning, and the code strings are also valid Java identifiers, consider using the code itself as the name of each enum member.  Enums already have t he ability to look up members by name, so you can take advantage of that mechanism.</p>

<pre><code>public enum SimplerMap {                                                                                                            

    ABC("abc description");

    private final String description;                                                                                               

    private SimplerMap(String description) {                                                                                        
        this.description = description;                                                                                             
    }                                                                                                                               

    public String getCode() {
        return this.toString();                                                                                                     
    }                                                                                                                               

    public String getDescription() {
        return this.description;                                                                                                    
    }                                                                                                                               

    public static String getDescriptionByCode(String code) {
        try {
            return valueOf(code).getCode();
        } catch (IllegalArgumentException noSuchCode) {
            return null;
        }
    }
}
</code></pre>
    </div>