<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Instead of <code>find</code> use <a href="https://docs.oracle.com/javase/10/docs/api/java/util/regex/Matcher.html#lookingAt()" rel="nofollow noreferrer"><code>lookingAt</code></a> in order not to skip unmatched "garbage".</p></li>
<li><p>Keywords/identifier: first something like a word (indentifier), and then check for keywords (<code>Map&lt;String, Keyword or Token&gt;</code>).</p></li>
<li><p>Whitespace could be a pattern too <code>\\s*</code> but that is not necessarily faster. Compacter though. Or use <code>Character.isWhitespace</code>.</p></li>
<li><p>The usage of StringBuilder serves no purpose. Rather than deleting maintain a position. One can use that for <code>lookingAt</code>.</p></li>
<li><p><code>Files.lines</code> is fine, but turn it into a <code>Stream&lt;Token&gt;</code> immediately then. Mind, that the default encoding is UTF-8 (but IMHO that is the preferable - international - encoding). The line read is stripped of the terminating line break (like <code>\n</code> or <code>\r\n</code>). Which might be taken into account for a whitespace sensitive grammar.</p>

<pre><code>    st.forEach(line -&gt; input.append(line).append('\n'));
</code></pre></li>
</ul>
    </div>