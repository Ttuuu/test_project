<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The line <code>Dim LRow, LRow2, i, n, serviceID As Long</code> isn't doing what you think it is. When you declare multiple variables on the same line, you need to individually assign types to all of them - otherwise the default to <code>Variant</code>.  I'm assuming that line was meant to be <code>Dim LRow As Long, LRow2 As Long, i As Long, n As Long, serviceID As Long</code>. You could probably also give them names that have more meaning than <code>i</code> and <code>n</code>.</p>

<hr>

<p>Kudos on using the code names to refer to your worksheets instead of indexing the <code>Worksheets</code> collection - this is a much more reliable method to access them. However, you are still repeatedly accessing them.  I'd wrap the majority of this <code>Sub</code> in <code>With Sheet6</code>.  That not only keeps you from repeatedly dereferencing the same thing, it makes it much more clear when you are using <code>Sheet5</code> by making it stand out more. While you're at it, I'd rename the worksheet code names to something more descriptive. I have no clue what <code>Sheet5</code> even means beyond that it was the fifth worksheet that was added to the workbook.</p>

<hr>

<p>This might be a micro-performance thing, but using <code>.Cells()</code> is typically better than using <code>.Range()</code> when you only need one cell. This not only avoids concatenating your cell addresses, but it prevents making Excel convert your alpha columns back to numbers. Finally, it lets you use column constants that are more descriptive than <code>"AH"</code>.  You can use something like this...</p>

<pre><code>Const FooColumn As Long = 34
'...
Sheet6.Cells(currentRow, FooColumn)
</code></pre>

<p>...which is much more readable.</p>

<hr>

<p>You are using implicit default member calls on the tests <code>Sheet6.Range("AH" &amp; n) &lt;= Sheet5.Range("BM" &amp; i)</code> and <code>Sheet6.Range("AH" &amp; n) &gt;= Sheet5.Range("BL" &amp; i)</code>. This appears to be an oversight, in that you're using explicit calls to <code>Value</code> everywhere else.</p>

<hr>

<h2>Performance</h2>

<p>DON'T USE COPY AND PASTE FOR VALUES. This is horrendously inefficient. You can assign these directly like so: <code>Sheet5.Range("BU" &amp; i).Value = Sheet6.Range("B" &amp; n).Value</code>. Even better would be to suck all of your source data into an array and use that instead. That cuts down on the round-trips you're making to the worksheet.  Ever time you touch a cell, Excel has to at minimum recalculate and redraw. If you can do all of your work in memory, do that, then use the Worksheet simply for "output".</p>

<hr>

<p>The call to <code>Sheet5.Application.WorksheetFunction.CountIf(Range("BU:BU"), serviceID)</code> is absolutely killing you.  First, you're applying it over the entire column (1,048,576 rows) <strong><em>and</em></strong> you're doing it in a nested loop. Finally, <code>If</code> statements are not short-circuited in VBA, so you're <strong><em>always</em></strong> performing this lookup. If the only thing you need to do is find out if the <code>serviceID</code> exists in that column, read all of the values there into a <code>Scripting.Dictionary</code>, and look them up in that instead:</p>

<pre><code>Private Function GetServiceIDLookup() As Scripting.Dictionary
    Dim results As New Scripting.Dictionary
    With Sheet5
        Dim currentRow As Long
        Dim serviceID As Long
        For currentRow = 1 To .Cells(.Rows.Count, LookupTargetColumn).End(xlUp).Row
            serviceID = .Cells(currentRow, LookupTargetColumn).Value
            If Not results.Exists(serviceID) Then results.Add serviceID, serviceID
        Next
    End With
    Set GetServiceIDLookup = results
End Function
</code></pre>

<p>Build the lookup, then instead of <code>Sheet5.Application.WorksheetFunction.CountIf(Range("BU:BU"), serviceID) = 0</code>, you would be doing something more like this:</p>

<pre><code>'Outside the loops
Dim serviceIDs As Scripting.Dictionary
Set serviceIDs = GetServiceIDLookup
'...
For i = 3 To LRow
    Fastighet = Sheet5.Cells(i, 79).Value
    For n = 3 To LRow2
        serviceID = Sheet6.Cells(n, 2).Value
        'Dictionary lookup
        If serviceIDs.Exists(serviceID) And WhateverElse Then
</code></pre>

<hr>

<p>Between that change and pulling arrays instead of repeated worksheet accesses, you should be able to reduce the runtime by several orders of magnitude.</p>
    </div>