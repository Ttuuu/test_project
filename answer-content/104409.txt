<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ouch. That's a lot of code to do things that are already available in the native Java libraries. Also, while the usage code "looks" neat, writing it is a PITA because it returns a different object at each step, and is not really a fluent API at all because the order of method calls is pre-defined. <code>StringBuilder</code> is an example where <code>append(...)</code> returns the same instance so you can keep appending and so on.... that's "fluent".</p>

<p>Regardless, your code is complicated to write, it's inconvenient to use because you need to write a lot of code to link a number of highly structured method calls that are in an inflexible call order.</p>

<blockquote>
<pre><code>long[] array1 = createArray().ofLongs()
                 .ofLength(12)
                 .withMinimum(-100L)
                 .withMaximum(200L)
                 .withDefaultRandom();
</code></pre>
</blockquote>

<p>The above example code, for me, would be written better, as:</p>

<pre><code>long[] array = ThreadLocalRandom.longs(12, -100, 200).toArray();
</code></pre>

<p>If you want a non-default random, you can just use that instance:</p>

<pre><code>Random rand = new Random();
long[] more = rand.longs(12, -100, 200).toArray();
</code></pre>

<p>The Stream API is more than enough when it comes to "fluent".</p>

<p>Also, if you don't want to include the size in the top call, you can limit the stream too:</p>

<pre><code>long[] more = rand.longs(-100, 200).limit(12).toArray();
</code></pre>

<p>Of course, you can do the same with ints.... (and doubles).</p>

<pre><code>int[] ints = rand.ints(-100, 200).limit(12).toArray();
</code></pre>
    </div>