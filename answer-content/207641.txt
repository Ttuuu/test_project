<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>List as an abstract concept can have many representations. </p>

<p>In particular, with a list being represented by its "zipper" - a pairing of a reversed prefix and a suffix, it becomes possible to have a linear solution to this problem, as opposed to the quadratic one which is unavoidable with the plain linear representation :</p>

<pre><code>picks :: [a] -&gt; [([a], [a])]
picks []     = []
picks (x:xs) = go [x] xs
   where
   go pref suff@(x:xs) = (pref,suff) : go (x:pref) xs
   go pref []          = [(pref,[])]
</code></pre>

<p>Using this, your problem becomes</p>

<pre><code>foo = map (\(a,b) -&gt; revappend (tail a) b) . picks

revappend a b = foldl (flip (:)) b a
</code></pre>

<p>This is of course again quadratic, but maybe you could keep the prefixes reversed, to stay linear:</p>

<pre><code>import Control.Arrow (first)

foo' = map (first tail) . picks               -- or,
 --  = map (\(x,y) -&gt; (tail x, y)) . picks
</code></pre>
    </div>