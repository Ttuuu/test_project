<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8</h1>
<p>Try to stick to <code>PEP-8</code>. So <code>snake_case</code> for variable and method names and a lot of other guidelines. Check any other Code Review Python post for tips from people who can explain this better than me.</p>
<h1>Memory</h1>
<p>Since you have 128MB of memory available, and a list of 1000 integers (<code>l = list(range(1000)); sys.getsizeof(l) + sum(map(sys.getsizeof, l))</code>) takes only 37kb on my system, I would not worry about clearing intermediate results.</p>
<h1>Pre-calculate the primes to 1000</h1>
<p>If the input number never goes beyond 1000, pre-calculating all the primes will be the fastest and most efficient. Here is method <code>rwh_primes</code> from <a href="https://stackoverflow.com/a/2068548/1562285">this SO post</a> adapted for Python 3:</p>
<pre><code>def primes(n):
    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Returns  a list of primes &lt; n """
    sieve = [True] * n
    for i in range(3, int(n ** 0.5) + 1, 2):
        if sieve[i]:
            sieve[i * i :: 2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1)
    return [2] + [i for i in range(3, n, 2) if sieve[i]]
</code></pre>
<p>This takes about 50Âµs on my PC.</p>
<h1><code>prime_factors</code></h1>
<p>You do some of unnecessary calls to <code>set</code> and <code>list</code>. I would implement this as a generator, and store it further upstream as a set:</p>
<pre><code>def prime_factors(n):
    for factor in PRIMES:
        if factor &gt; n**.5:
            yield n
            return
        while not (n % factor): # n is divisible by factor
            yield factor
            n //= factor
            if n == 1:
                return
</code></pre>
<h1><code>sum_digits</code></h1>
<p>This one looks okay. You could use <a href="https://docs.python.org/3.5/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod</code></a>, but that is a matter of taste.</p>
<h1><code>offspring</code></h1>
<p>No need for the intermediate <code>DX</code>:</p>
<pre><code>def offspring(x):
    return x + sum(set(prime_factors(x))) + sum_digits(x)
</code></pre>
<h1>Main guard</h1>
<p>Keep the main logic behind a <code>if __name__ == '__main__':</code> guard.</p>
<h1>eval</h1>
<p>Instead of using <code>eval</code>, since you know it will be <code>int</code>, better use <code>int()</code>. <code>eval</code> can be dangerous, since it can execute arbitrary code. If you need to interpret a python literal, use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>.</p>
<p>Then you do something very inefficient by creating a dict, then take only the values, apply <code>list</code>, <code>set</code> and <code>list</code> again. Easiest would be to just use a set-comprehension:</p>
<pre><code>all_offspring = {offspring(i) for i in range(1, 1001)}
</code></pre>
<p>This will include some numbers over 1000, but this extra memory should be negligible.</p>
<h1>Test</h1>
<p>You can spoof <code>input</code> on your system by something like</p>
<pre><code>test_case = '''2
4
20'''
input = iter(test_case.split('\n')).__next__
</code></pre>
<h1><code>main</code></h1>
<pre><code>if __name__ == '__main__':
    PRIMES = primes(1000)
    all_offspring = {offspring(i) for i in range(1, 1001)}
    t = int(input())
    for i in range(t):
        n = int(input())
        if n in all_offspring:
            print('YES')
        else:
            print('NO')
</code></pre>
<h1>Timing</h1>
<p>To time it you can use <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">timeit</a> module. There are enough posts on SO about this, and for <a href="https://stackoverflow.com/q/552744">memory usage</a>.</p>
    </div>