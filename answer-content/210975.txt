<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main problem here is violation of the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single responsibility principle</a>. A User class has too much responsibilities. It interacts with the client, verifies a CSRF token, decides what kind of response will be sent, etc. An top of that, User extends Session which is outright wrong. Classes must be related to each other. An Apple class could extend a Fruit class, because an apple is a fruit. But a user is not a session. That's completely different entities that have nothing in common. Moreover, they belong to different realms, a user belongs to the Business logic and a session belongs to the Client interaction. There are PHP applications that do not interact with a client, what would they do with a session?</p>

<p>The login() function should just return a boolean value, whereas all interactions with the client should be done elsewhere.</p>

<p>On a side note, you are seem under the impression that regular variables are not used in classes. Well, you are wrong. On the contrary, a variable that is used only in one method <strong>must be not</strong> a class variable, but just a regular variable. Such as $type, $msg, $stmt. </p>

<p>In the end, there should be a distinction between a code that does the business logic and a code that interacts with a client. And MVC pattern does it perfectly. According to it, all form verifications must be done in the Controller (I've got <a href="https://phpdelusions.net/articles/mvc" rel="nofollow noreferrer">an article that explains MVC</a>, you may find it helpful). Assuming your "I'm using this is this" code is sort of a Controller, all the client interaction should be moved there. So, login() method should accept only username and password, and verify them against a database like this (the code is taken from my canonical <a href="https://phpdelusions.net/pdo_examples/password_hash" rel="nofollow noreferrer">PDO authentication example</a>):</p>

<pre><code>class User
{
    private $db;

    public function __construct($dbh) {
        $this-&gt;db = $dbh;
    }
    public function login($username, $password)

    {
        $sql = "SELECT id, username, password, role FROM users WHERE username = ?";
        $stmt = $this-&gt;db-&gt;prepare($sql);
        $stmt-&gt;execute([$username]);
        $user = $stmt-&gt;fetch();

        if ($user &amp;&amp; password_verify($password, $user['password']))
            return $user;
        }
    }
}
</code></pre>

<p>as you can see, a lot of useless and even harmful code is removed. For example,</p>

<ul>
<li><code>if($this-&gt;stmt-&gt;execute())</code> makes no sense at all as in case of error an exceptjion will be thrown and therefore this condition will never be evaluated to false. </li>
<li><code>if($this-&gt;stmt-&gt;rowCount() == 1)</code> is useless as well, as the fetched row could serve as such a flag </li>
<li><code>htmlentities($row['password']</code> is just weird. There is not a single reason to do so, while it could do a severe harm changing the password so it will return false for the correct password. </li>
<li>all client interaction including session handling are also removed for the reasons explained above.</li>
</ul>

<p>So all the client interaction must be written in the controller. If you want to encapsulate the form verification routines, it should be a distinct class (as you are going to use it with other forms as well, aren't you?):</p>

<pre><code>class Form()
{
    public function verify($sessionToken, $inputToken)
    {
        return hash_equals($sessionToken, $inputToken)
    }
}
</code></pre>

<p>and then finally you are ready to process the user input. </p>

<pre><code>if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $user = new User($dbh);
    $form = new Form();

    if (!$form-&gt;verify($session-&gt;getSingle('token'), $_POST['token'])) {
        $result = [
            'type' =&gt; 'error',
            'msg' =&gt; 'Existem erros no formul√°rio!',
            'token' =&gt; $this-&gt;getsingle('token')
        ];
        echo json_encode($result);
        exit;
    }

    if ($user = $user-&gt;login($username, $password)
    {
          $session-&gt;setVariable('username', ($user['username']);
          $session-&gt;setVariable('id', $user['id']);
          $session-&gt;setVariable('role', $user['role']);
          $result = [
              'type' =&gt; 'success',
              'msg' =&gt; 'Redirecting...',
              'token' =&gt; $this-&gt;getsingle('token')
          ];
          echo json_encode($result);
          exit;
    } else {
        // a response saying that login or password are incorrect
    }
}
</code></pre>

<p>This is not the full code as I don't know some of your internal considerations such as what is $this-&gt;fields or $bot but just to give you an idea. </p>
    </div>