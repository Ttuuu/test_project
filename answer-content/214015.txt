<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The "never occurs" bug is still there. It stems from the fact that the length of <code>b</code> has an inverse relationship to the length of <code>x</code>. Try varying the length of a non-occurring <code>b</code> and see what you get.</p>

<p>There's also the fact that this is a rather imperative approach, whereas good Scala style tries to be more functional.</p>

<p>When I first saw this I thought, "Doesn't <code>indexOfSlice()</code> offer most of what's needed?"</p>

<pre><code>def binmask(seq :Seq[String], slice :Seq[String]) :String = {
  val ios = seq indexOfSlice slice
  if (ios &lt; 0)
    "0"*seq.length
  else {
    val slcLen = slice.length
    "0"*ios + "1"*slcLen + "0"*(seq.length-slcLen-ios)
  }
}
</code></pre>

<p>The slight drawback here is that <code>indexOfSlice()</code> will traverse the <code>seq</code> input until it finds a match (or completely if not found) and then <code>seq</code> is traversed <em>again</em> for its length.</p>

<p>The standard Scala means to achieve iteration <em>with</em> early termination but <em>without</em> mutable state, is via recursion. Preferably tail recursion, which the compiler turns into a <code>while</code> loop under the hood.</p>

<pre><code>def binmask(seq :Seq[String], slice :Seq[String], acc :String = "") :String =
  if (seq startsWith slice) {
    val slcLen = slice.length
    acc + "1"*slcLen + "0"*(seq.length - slcLen)
  }
  else if (seq.isEmpty) acc
  else binmask(seq.tail, slice, acc + "0")
</code></pre>

<p>Some feel that making the accumulator a passed parameter (even though it is "hidden" behind a default value) exposes too much implementation in the public interface. For them, an inner recursion loop is preferable.</p>

<pre><code>def binmask(seq :Seq[String], slice :Seq[String]) :String = {
  def loop(subseq: Seq[String], acc: String): String =
    if (subseq startsWith slice) {
      val slcLen = slice.length
      acc + "1" * slcLen + "0" * (subseq.length - slcLen)
    }
    else if (subseq.isEmpty) acc
    else loop(subseq.tail, acc + "0")

  loop(seq, "")
}
</code></pre>
    </div>