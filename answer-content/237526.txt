<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider <a href="https://github.com/abseil/abseil-cpp/blob/master/absl/types/span.h" rel="nofollow noreferrer"><code>absl::Span&lt;T&gt;</code></a>. (or boost's)
It may one day be replaced with <a href="https://en.cppreference.com/w/cpp/container/span" rel="nofollow noreferrer"><code>std::span</code></a></p>

<p>It's actually quite hard to make what you're asking for, despite this being extremely useful and desired for a very long time.</p>

<p>However, with it, you can write:</p>

<pre><code>void ReadFromIntArray(absl::Span&lt;int const&gt; int_array);
ReadFromIntArray({1,2,3});
ReadFromIntArray(std::vector&lt;int&gt;{1,2,3});
ReadFromIntArray(std::array&lt;int, 3&gt;{1,2,3});
ReadFromIntArray(absl::MakeSpan(pointer_to_int_array, count_of_int_array));
</code></pre>

<hr>

<p>There's tremendous downsides to using iterators or pointer+count. Pointer+count is wildly dangerous and severely impairs readability. Iterators impair readability further and may also obliterate an architecture; either the interface becomes tightly coupled with <code>std::vector</code>, or the interface requires a template parameter adding a huge unnecessary compilation cost to every client.</p>

<hr>

<p>In the <strong>very</strong> distant future, ranges will make things much more readable without a performance cost, and algorithms will be thought of as performing transformations on logical sets of data rather than doing logic within a loop.</p>
    </div>