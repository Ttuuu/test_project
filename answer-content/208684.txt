<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll start by saying I haven't used <code>boost::numeric</code>, so what I say here is based on a quick skim of its documentation and source.</p>

<p>Instead of writing the constant <code>3</code> in so much of the code, we should be using <code>rows()</code> or <code>cols()</code> as appropriate (or perhaps even <code>RowsAtCompileTime</code> and <code>ColsAtCompileTime</code>).</p>

<p>Don't pass simple value types by reference - <code>double</code> values should be simply passed by value.</p>

<p>In fact, since <code>Eigen::Matrix</code> has a member that multiplies by a scalar, we can simplify these functions by simply calling that.  All we have to do is swap the argument order:</p>

<pre><code>Vector operator*(double x, Vector y)
{
    return y *= x;
}

Matrix operator*(double x, const Matrix&amp; y)
{
    return y * x;
}
</code></pre>

<p>We can also simplify the dot-product function by using the standard <code>inner_product</code> algorithm.  We need to know that a vector's start and end iterators are obtained by <code>data()</code> and <code>data() + size()</code> respectively:</p>

<pre><code>#include &lt;numeric&gt;

Interval inner_prod(const Vector&amp; x, const Vector&amp; y)
{
    return std::inner_product(x.data(), x.data() + x.size(),
                              y.data(), Interval{});
}

Interval inner_prod(const std::vector&lt;double&gt;&amp; x, const Vector&amp; y)
{
    if (x.size() != y.size())
        return {};              // or throw an exception, or something
    return std::inner_product(x.begin(), x.end(),
                              y.data(), Interval{});
}
</code></pre>
    </div>