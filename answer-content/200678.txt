<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Saving <code>rcx</code> is usually not necessary, it is not callee-save in common calling conventions. On Linux (and similar) <code>rdi</code> also does not need to be saved, I guess you're using that since the Win64 calling convention does not pass an argument in <code>rdi</code>. You can save them anyway if you want, which can be useful if you're using custom calling conventions. Saving an even number of registers makes the stack not-16-aligned though, you will probably get away with that now, but for example if you call some function that uses XMM registers it may save them at locations that it assumes are aligned (and there are some other cases where it causes trouble).</p>

<pre><code>xor rcx, rcx
mov rcx, -1 
</code></pre>

<p>The <code>xor</code> is not useful, <code>rcx</code> does not need to be zeroed before overwriting it for correctness reasons, and simply <code>mov</code>-ing into a 64 (or 32) bit register already has no dependency on the previous value. By the way, when you <em>do</em> want to zero a 64bit register, you can use a 32bit <code>xor</code> since writing to the low 32 bits of a register zeroes out the top half of the 64 bit register. There is not really an immediate performance difference, but using the 32bit version often lets you save the REX prefix, unless of course one of the "numbered registers" is an operand.</p>

<p>Because <code>-x - 1= ~x + 1 - 1 = ~x</code> (using the definition of two's complement, <code>-x = ~x + 1</code>) and you don't use the flags set by the <code>sub</code>,</p>

<pre><code>neg rcx    
sub rcx, 1    
mov rax, rcx 
</code></pre>

<p>is equivalent to:</p>

<pre><code>not rcx
mov rax, rcx
</code></pre>

<p>So all combined, this function could be simplified slightly to (assuming saving <code>rdi</code> and <code>rcx</code> is useful):</p>

<pre><code>strlen:
    push rdi
    push rcx
    mov rcx, -1
    xor eax, eax
    repne scasb 
    not rcx
    mov rax, rcx 
    pop rcx
    pop rdi
    ret
</code></pre>
    </div>