<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is quite an old question, yet I'd like to answer because it comes up if one searches for "Python Ramer-Douglas-Peucker" on the internet. </p>

<p>First, <em>the implementation is incorrect</em>!</p>

<p>The OP suspected the same when they said:</p>

<blockquote>
  <p>No matter how high I set the tolerance, the approximation always caps at about (2 N / 3) points where N is the number of points in the input polygon. Could I be doing something wrong?</p>
</blockquote>

<p>Knowing how the algorithm works, it should be clear that the number of points in the input should not be the driving variable determining the number of output points. Instead, the tolerance should matter.</p>

<p>What is an easy test case? A straight line!</p>

<p>Let's use <em>Hypothesis</em> to generate some test cases. Our properties are easy: The resulting poly-line should have length 2, and the first and last point are the same as the input poly-line.</p>

<pre><code>    import unittest
    from hypothesis import given, example, assume
    from hypothesis.strategies import lists, integers, tuples, floats
    from ramer_douglas_peucker.original import rdp_polygon_approximate, perpendicular_distance
    import numpy as np

    class CompareTestCase(unittest.TestCase):
        @given(min_x=floats(min_value=-1e5, max_value=1e5, allow_nan=False,
                                   allow_infinity=False),
              max_x = floats(min_value=-1e5, max_value=1e5, allow_nan=False,
                                   allow_infinity=False))
        def test_straight_line(self, min_x, max_x):
            assume(min_x &lt; max_x)
            m = 2.0
            b = -3.0
            poly = [(x, m*x+b) for x in np.linspace(min_x, max_x, 100)]

            poly_out = rdp_polygon_approximate(poly, tolerance=0.01)
            self.assertEqual(len(poly_out), 2)
            self.assertEqual(poly_out, [poly[0], poly[-1]])
</code></pre>

<p>You should see that this fails: <code>AssertionError: 77 != 2</code> You might get a slightly different length. Thus the length of the returned <code>poly_out</code> is not equal to two.</p>

<p>Next, let's have a look at your implementation.</p>

<pre><code># Find the farthest point from the norm.
for i, point in enumerate(points[1:], 1):
    dist = get_distance(point)
    if dist &gt; max_dist:
        max_dist = dist
        furthest = i


# Main bug here:
# You were missing this common case: All points are already within
# 'tolerance'. Just return start and end.
if max_dist &lt; tolerance:
     return [points[0], points[-1]]
</code></pre>

<p>This bug explains the observation that you can only simplify by (2 N / 3) points. The code only drops the middle point if the (recursive) input has length 3 (special case at the beginning) and the max distance is larger than tolerance.</p>

<hr>

<p>Next, let's have a look at your 'TODO' comment, where you put the two recursion results together:</p>

<pre><code>new_points = []
for point in prev_points + next_points:
    # Filter out the duplicate points whilst maintaining order.
    # TODO:: There's probably some fancy slicing trick I just haven't figured out
    # that can be applied to prev_points and next_points so that we don't have to
    # do this, but it's not a huge bottleneck so we needn't worry about it now.
    if point not in new_points:
        new_points.append(point)

return new_points
</code></pre>

<p>The fancy slicing trick you mentioned in your TODO is: You want to
concatenate prev_points and next_points but the point at the pivot (<code>furthest</code>)
will be present twice. So just return the first list except for the last point.</p>

<pre><code>return prev_points[:-1] + next_points
</code></pre>

<p>This also avoids a bug, where you have the same point multiple times. Like <code>[A, b, c, A, d, e, f]</code>. The second <code>A</code> would've been removed.</p>

<p>More could be said about the fact that you are using recursion (if you care about performance), the special case handling at the beginning of the implementation (not needed) -- however, this question is too old for anyone to care.</p>
    </div>