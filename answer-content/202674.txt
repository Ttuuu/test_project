<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If the question is about both the Python implementation and the used algorithms, it would be nice to say more of the specifications of your class.</p>

<p>After some tests of your code, I can say that you have built a class that can crypt a string using a vigenere cipher and a key. In both the text and the key, the spaces (only spaces, not end of line characters...) are ignored, and upper case characters are converted to lower cases. What remains shall then be alphabets unless you declare a special string of accepted chars. All the data structures are computed for each encoding and each decoding, and you build a <em>looped</em> key by repeating the initial key to make it the length of the text. It would be more memory efficient to loop over the key without storing it in memory. And this design will not be able to encipher a stream of a priori unknown length, what a vigenere cipher can normally do. So I would try to simply iterate the key instead of pre-building a <em>looped</em> key. </p>

<p>Another improvement point is the use of <code>index</code> method from a string. It is perfectly correct but is a linear search in O(n/2) if <code>n</code> is the length of the text. Dictionnaries would allow much more efficient searches by using hash functions.</p>

<p>Finally, a point that I do not really like in your design (nothing more than my opinion here), is that it makes sense to build a single instance of the <code>Vigenere</code> class and use aliases to directly call its public methods. For the same reason, you call the <code>__reset</code> method (already called in <code>__init__</code>) in the public methods, which is equivelent to re-create a new object for each call. IMHO, it means that the instance should have been more specialized, for example with the key and alphabet:</p>

<pre><code>vigenere = Vigenere(key, alphabet = string.ascii_lowercase)
vigenere.encode(string)
vigenere.decode(string)
</code></pre>

<p>BTW, that would allow for stream enciphering and deciphering...</p>

<hr>

<p>Now for the style.</p>

<ul>
<li>you have doc strings for the class itself and all public methods: good</li>
<li>you have a <code>if __name__ == main:</code> construct: good</li>
<li>you have factorized the <code>__reset</code> method between <code>__init__</code>, <code>encode</code> and <code>decode</code>: good on a style point, but not on a design point</li>
<li>you (almost) consistently use <code>__</code> private members. Unsure if you really want that or simply single underscore names: the difference is that 2 _ names are mangled with the class name, which you do not really use here.</li>
</ul>
    </div>