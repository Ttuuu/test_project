<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>Overall I think you did a good job of separating concerns and keeping functions independent.<br>
One issue I had is that there are too many tuples instead of record types, so sometimes it's not obvious what you're dealing with, for example in
<code>getPayments = map (snd . fst) . getPlayerHist</code>, it would be nice if instead of <code>snd . fst</code> it were <code>getPayment . getFirstTuple</code>. To do this you could replace:</p>

<pre class="lang-hs prettyprint-override"><code>type PlayerHist = [((Choice, Payment), (PlayerID, Choice))]
</code></pre>

<p>with </p>

<pre class="lang-hs prettyprint-override"><code>data FirstTuple = FirstTuple
  {  getChoice :: Choice
  ,  getPayment :: Payment
  }

data SecondTuple = SecondTuple
  { getOpponentID :: PlayerID
  , getOpponentChoice :: Choice
  }

data GameResult = GameResult
  {  getFirstTuple :: FirstTuple
  ,  getSecondTuple :: SecondTuple
  }

type PlayerHist = [GameResult]
</code></pre>

<p>and ideally with more descriptive names than mine if possible.<br>
If dealing with the nested types gets too complicated you can look at using <a href="https://hackage.haskell.org/package/lens" rel="nofollow noreferrer"><code>lens</code></a> for simplifying this.</p>

<hr>

<p>In a couple of places you use <code>[(Int-&gt;Player, Int)]</code> to represent a list of players, where the second tuple item is the count of each player and the first item takes an ID and returns a player. I think you can just as easily use <code>[Player]</code> as your representation, and make the caller responsible for calling <code>generatePopulation</code> first.<br>
This would simplify some type signitures and make it easier to read, especially because it isn't immediately clear what <code>[(Int-&gt;Player, Int)]</code> is.</p>

<h2>Simplification</h2>

<p>In your <code>generatePopulation</code> function, you use <code>intercalate [] . map</code> on a list, which is equivalent to <code>concatMap</code>, which should be a bit simpler to understand. Notice that the types below are equivalent:</p>

<pre class="lang-hs prettyprint-override"><code>Prelude Data.List&gt; :t \f -&gt; intercalate [] . map f
\f -&gt; intercalate [] . map f :: (a1 -&gt; [a2]) -&gt; [a1] -&gt; [a2]
Prelude Data.List&gt; :t \f -&gt; concatMap f
\f -&gt; concatMap f :: Foldable t =&gt; (a -&gt; [b]) -&gt; t a -&gt; [b]
</code></pre>

<p>In the same function, you also use <code>map</code> followed by <code>zip</code>, with is the same thing as <code>zipWith</code>.</p>

<p>Here's what I came up with for that:</p>

<pre class="lang-hs prettyprint-override"><code>generatePopulation :: [(Int-&gt;Player, Int)] -&gt; Population
generatePopulation = zipWith (flip ($)) [1..] .
                     concatMap (\(f, count) -&gt; replicate count f)
</code></pre>

<hr>

<p>In <code>shuffle</code> , you could replace <code>ys = take (length xs) rands</code> with <code>ys = zipWith const rands xs</code>. This should do the same thing in 1 traversal instead of 2.<br>
<code>const</code> is defined as <code>const a b = a</code>, so when you zip the two together you'll only take elements from the first list, <code>rands</code>. <code>zip</code> stops when the shorter list is exhausted so the length you'll be left with is <code>length xs</code>.<br>
You can see some similar examples of this <a href="https://github.com/quchen/articles/blob/master/2018-11-22_zipWith_const.md" rel="nofollow noreferrer">here.</a></p>
    </div>