<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1.
Instead of:</p>

<pre><code>def __init__(self, root):
    """Constructor"""
    self.root = root # root is a passed Tk object
</code></pre>

<p>do:</p>

<pre><code>def __init__(self, root: tkinter.Tk) -&gt; None:
    self.root = root
</code></pre>

<p>Python 3 has built in support for type annotations, so there's no reason to use comments to say what the type of a variable is.  If you use <code>mypy</code> (and if you're writing Python in the modern era <strong>you should be using mypy</strong>) type annotations will help you catch the majority of bugs before you even run your code.  If there's only one thing you take away from this answer, it should be <strong>use type annotations and use mypy</strong>.  That on its own will instantly start to push you into habits that will make your code easier to read and maintain.</p>

<p>Any reader who knows Python will know that <code>__init__</code> is a constructor; no need for a docstring that just says <code>"Constructor"</code> (although you could have one that briefly summarizes what state the freshly constructed object is in if it's not adequately evident from skimming the code).</p>

<ol start="2">
<li><p>As @finally said, add line breaks between your code blocks.  Think of them like paragraphs; you don't mash all your sentences together into a single blob, you add paragraph breaks so that the reader can quickly see where one thought ends and another begins before they've parsed each individual sentence.</p></li>
<li><p>All of your member variables should be declared (even if they aren't initialized) in your <code>__init__</code> function.  But more importantly, variables that don't need to be member variables should not be declared as such.  I'm looking particularly at <code>self.frame</code>, which is declared in your methods but not in your constructor -- but its value does not persist beyond any given method call as far as I can tell, so it shouldn't be <code>self.frame</code>, it should just be a local variable <code>frame</code>.  You can just do a find+replace of <code>self.frame</code> to <code>frame</code> and I don't think it'd change the functioning of this code at all, but it frees the reader of having to read through every method to figure out how the <code>self.frame</code> set by one method call might impact another.</p></li>
<li><p>For an example of a member variable that you can't convert to a local variable, <code>self.lastPage</code> is one that should be declared in the constructor.  (Also, it should be snake_case rather than camelCase, since that's the Python convention for variable names.)  If it doesn't have a useful default value, you can use None:</p></li>
</ol>

<pre><code>    self.last_page: Optional[str] = None
</code></pre>

<ol start="5">
<li>If a string is only ever used internally to track changes in state, it's better to use an Enum, since it's impossible to mess those up via a typo, and there's a single source of truth that enumerates all of the possible values, so you don't have to hunt through all the places where it gets set to know what cases your code needs to handle.  A <code>Page</code> class that enumerates all of the possible pages in your UI might look like:</li>
</ol>

<pre><code>    from enum import auto, Enum

    class Page(Enum):
        NONE = auto()
        MAIN_MENU = auto()
        QUIZ = auto()
        QUIZ_ABOUT = auto()
</code></pre>

<p>(Note that to build this list I had to read through all of your code, and I'm not 100% positive that I didn't miss something -- this is the exact sort of annoyance that's avoided if you use an enum from the get-go!)</p>

<p>Now in your constructor you can say:</p>

<pre><code>     self.last_page = Page.NONE
</code></pre>

<p>and in your other functions you can use <code>Page.MAIN_MENU</code>, etc.  Your "quiz name" seems like it also might be a good candidate for conversion into a <code>Quiz(Enum)</code> that enumerates all of the possible quizzes.</p>

<ol start="6">
<li><p>Break up long lines.  Instead of:</p>

<pre><code>tk.Label(self.frame, text=quizHeader, font=labelH1 ).grid(row=0, column=3, pady = 20)
tk.Label(self.frame, text=quizAbout, font=labelParagraph, wraplength=600,anchor="n" ).grid(row=1, column=3, pady = 30)
tk.Button(self.frame, text="Go Back", font=labelButton, command=self.returnToLastFrame).grid(row=2, column=3, sticky = tk.W)
tk.Button(self.frame, text="Start Quiz", font=labelButton, command=self.quiz ).grid(row=2, column=3, sticky = tk.E)  
</code></pre></li>
</ol>

<p>try:</p>

<pre><code>    tk.Label(
        self.frame, 
        text=quizHeader, 
        font=labelH1,
    ).grid(
        row=0, 
        column=3, 
        pady=20,
    )

    tk.Label(
        self.frame, 
        text=quizAbout, 
        font=labelParagraph, 
        wraplength=600,
        anchor="n",
    ).grid(
        row=1, 
        column=3, 
        pady=30,
    )

    tk.Button(
        self.frame, 
        text="Go Back", 
        font=labelButton, 
        command=self.returnToLastFrame,
    ).grid(
        row=2, 
        column=3, 
        sticky=tk.W,
    )

    tk.Button(
        self.frame, 
        text="Start Quiz", 
        font=labelButton, 
        command=self.quiz,
    ).grid(
        row=2, 
        column=3, 
        sticky=tk.E,
    )  
</code></pre>

<p>This does require more vertical scrolling to read, but now it's very easy to visually compare the parameters of each <code>Button</code> and <code>grid</code> call.  Notice that I also made the whitespace consistent: no whitespace around the <code>=</code> in a keyword parameter call, and every function call in this block follows the same convention of one argument per line, with a trailing comma, so that the arguments are all lined up in neat columns and each has the same punctuation style.</p>

<ol start="7">
<li>Look for opportunities to turn boilerplate code into utility functions.  Taking the above example, if you end up having a lot of labels and buttons to create, put the complexity of setting up the Tk widgets into helper functions so that it's easier to read the code that actually defines the menu.</li>
</ol>

<p>Here's a quick attempt at rewriting the entire <code>quizInstructions</code> function in a way that would make it easier (I think) to add other quiz types and other widgets:</p>

<pre><code>from enum import auto, Enum
from typing import Callable
import tkinter as tk

class Page(Enum):
    NONE = auto()
    MAIN_MENU = auto()
    QUIZ = auto()
    QUIZ_ABOUT = auto()

class Quiz(Enum):
    BASIC_MATH = auto()

def _make_header(frame: tk.Frame, row: int, column: int, text: str) -&gt; None:
    tk.Label(
        frame,
        text=text,
        font=labelH1,
    ).grid(
        row=row,
        column=column,
        pady=20,
    )

def _make_pgraph(frame: tk.Frame, row: int, column: int, text: str) -&gt; None:
    tk.Label(
        frame,
        text=text,
        font=labelParagraph,
        wraplength=600,
        anchor="n"),
    ).grid(
        row=row,
        column=column,
        pady=30,
    )

def _make_button(
    frame: tk.Frame,
    row: int, 
    column: int, 
    sticky: str,
    text: str, 
    command: Callable[[], None], 
) -&gt; None:
    tk.Button(
        frame, 
        text=text, 
        font=labelButton, 
        command=command
    ).grid(
        row=row, 
        column=column, 
        sticky=sticky
    )


def quiz_instructions(self, quiz: Quiz) -&gt; None:
    """About Quiz page"""
    self.removethis()
    self.last_page = Page.QUIZ_ABOUT

    quiz_descriptions = {
        Quiz.BASIC_MATH: (
            "Primer Statistics", 
            """big line"""
        ),
        # Quiz.SOMETHING_ELSE: (
        #   "Something Else", 
        #   """another big line"""
        # ),
        # etc.
    }
    header, about = quiz_descriptions[quiz]

    frame = tk.Frame(self.root)
    frame.pack()

    _make_header(frame, 0, 3, header)
    _make_pgraph(frame, 1, 3, about)
    _make_button(frame, 2, 3, tk.W, "Go Back", self.returnToLastFrame)
    _make_button(frame, 2, 3, tk.E, "Start Quiz", self.quiz)

</code></pre>

<p>Note that I used a bit of artifice in my function definitions to make the calling code as easy to read as possible -- I anticipate that when I read the code that sets up a widget, I'm going to need to visualize where each widget is in the grid, so I deliberately set up <code>row</code> and <code>col</code> as the first arguments to make them easy to spot.</p>

<p>I also changed the code that sets up the quiz descriptions from what was presumably going to grow into a long <code>if</code> chain into a single dict; this dict could easily be defined elsewhere and then imported or passed into this function if you wanted to, say, separate the definition of these strings from the layout code.</p>
    </div>