<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The pattern you have implemented is basically a <code>reduction</code> or <code>foldLeft</code> method.<br>
Compare it to the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#reduce-java.util.function.BinaryOperator-" rel="noreferrer"><code>Stream#reduce</code> method</a> in Java, it is very similar.</p>

<p>To answer your question about the complexity of the lambda to put into the method: There is no limit. You can do everything you like in there. A lambda expression is nothing more than an implementation of the single-method interface you have created. And there is no limit on the complexity of a class implementing an interface.</p>

<p>Now for some real code review:</p>

<h3>Use proper and understandable names and use built-in types</h3>

<p>Your interface is simply named <code>func</code>. This probably means "function" but you don't have to save on characters, Java is already quite verbose.<br>
What you have, is a special kind of <code>BiFunction</code> or more precisely, <code>BinaryOperator</code>. Now I know that generics don't allow you to specify primitive types for the generic arguments, but your <code>func</code> interface is not necessary and  can be replaced by a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/BinaryOperator.html" rel="noreferrer"><code>BinaryOperator&lt;Integer&gt;</code></a>.</p>

<p>Your <code>run</code> method has a very generic name. Sure, there is code that is run, but it doesn't explain, what this method does.<br>
It would be more precise to call your method <code>reduce</code> or <code>foldLeft</code> or something similar, that explains in the name, what this method does.</p>

<h3>Make your method do one thing</h3>

<p>Currently your method calculates a result and, in addition to that, prints the value of <code>result</code> for every iteration. What if you or someone who uses your method does not want to have every single intermediate result printed to them?</p>

<p>If you want to print the intermediate values, do so in your lambda.</p>

<h3>You wanted to think about the future</h3>

<p>Your method currently only works with primitive integer arrays. Nothing stops you from making it work with generic types or even lists.<br>
And if you go that far, you'll probably use streams anyway.</p>
    </div>