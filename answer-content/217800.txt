<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not bad code for someone new to C++.  Here are some observations and suggestions that may help you improve your code.</p>

<h2>Avoid relative paths in <code>#include</code>s</h2>

<p>Generally it's better to omit relative path names from <code>#include</code> files and instead point the compiler to the appropriate location.  So instead of this:</p>

<pre><code>#include "Server/Routes.h"
#include "Tools/Logger.h"
</code></pre>

<p>write this:</p>

<pre><code>#include "Routes.h"
#include "Logger.h"
</code></pre>

<p>For <code>gcc</code>, you'd use <code>-I</code> to tell the compiler where to find these files.  This makes the code less dependent on the actual file structure, and leaving such details in a single location: a <code>Makefile</code> or compiler configuration file.  With <code>cmake</code>, we can use <code>include_directories</code>.  </p>

<h2>Prefer to avoid using <code>new</code> and <code>delete</code> directly</h2>

<p>The <code>server</code> variable within the <code>main()</code> function doesn't really need to be allocated via <code>new</code>.  The same is true of the <code>_routes</code> member of <code>Server</code> and probably some other places as well.  That way, it is automatically created with the correct length and then discarded when the function is complete or the owning object is deleted.  </p>

<h2>Avoid leading underscores in names</h2>

<p>Anything with a leading underscore is a <em>reserved name</em> in C++ (and in C) in certain scopes. See <a href="http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">this question</a> for details.</p>

<h2>Prefer modern initializers for constructors</h2>

<p>The constructor use the more modern initializer style rather than the old style you're currently using.  Instead of this:</p>

<pre><code>Response::Response(int socket_in) {
    _socket = socket_in;
    _sent = false;
}
</code></pre>

<p>one could write this:</p>

<pre><code>Response::Response(int socket_in) :
    _socket{socket_in},
    _sent{false}
{}
</code></pre>

<h2>Let the compiler create default destructor</h2>

<p>The compiler will create a destructor by default which is essentially identical to what you've got in several places, so you can simply omit both the declaraton and implementation from your code.</p>

<h2>Fix the bug</h2>

<p>This is a very subtle bug, but a bug nonetheless.  Within <code>Server::setRoute()</code> three threads are created, two of which take <code>this</code> as a parameter.  The problem is that there's no guarantee that the object still exists for the duration of the launched threads.  What you need is to use <code>enable_shared_from_this</code> with the class and then use a <code>shared_ptr</code>.  <a href="https://stackoverflow.com/questions/712279/what-is-the-usefulness-of-enable-shared-from-this">This question</a> explains a bit more.  Generally speaking, it is somewhat difficult to write robust multithreaded code in C++ because there are many ways to create subtle bugs like this.</p>

<h2>Avoid needless casts and variables</h2>

<p>The current code contains these two lines:</p>

<pre><code>void (*callback)(Request*, Response*) = route.callback;
callback(request, response);
</code></pre>

<p>But this could be much more simply written like this:</p>

<pre><code>route.callback(request, response);
</code></pre>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>Request::isValid()</code> and <code>Routes::_getRouteIndex</code> member functions do not alter the underlying objects and therefore should be declared <code>const</code>.  That is, the declaration should be:</p>

<pre><code>int _getRouteIndex(std::string path, Struct::Methods method) const;
</code></pre>

<h2>Use "range <code>for</code>" and simplify your code</h2>

<p>The current <code>Routes::_getRouteIndex</code> looks like this:</p>

<pre><code>int Routes::_getRouteIndex(std::string path, Struct::Methods method) {
    for (size_t i = 0; i &lt; _routes.size(); i++) {
        Route* route = &amp;_routes[i];
        if (route-&gt;path == path &amp;&amp; route-&gt;method == method) {
            return i;
        }
    }
    return -1;
}
</code></pre>

<p>Using a range <code>for</code> it could be written like this:</p>

<pre><code>int Routes::_getRouteIndex(std::string path, Struct::Methods method) const {
    int i{0};
    for (const auto &amp;r : _routes) {
        if (r.path == path &amp;&amp; r.method == method) {
            return i;
        }
        ++i;
    }
    return -1;
}
</code></pre>

<p>However, even better in this instance, use the next suggestion.</p>

<h2>Use library functions where appropriate</h2>

<p>The code for <code>Routes</code> currently stores each <code>Route</code> in a <code>std::vector</code> and then goes through some machinations to recover the index.  This could be done more simply by using a <code>std::unordered_map</code>.  Also, it may be sufficient just to use the <code>path</code> as an index because the calling code checks that the method matches.  Right now, it's not possible to trigger the "Method invalid/not found" error because <code>getRoute</code> only returns true if both the <code>path</code> and the <code>method</code> match.</p>

<h2>Omit unused variables</h2>

<p>Because <code>argc</code> and <code>argv</code> are unused, you could use the alternative form of <code>main</code>:</p>

<pre><code>int main ()
</code></pre>

<p>There are also a number of other places in which passed variables are unused.</p>
    </div>