<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll look at the current code first then look at algorithmic issues.</p>

<ul>
<li><p>avoid  <code>using namespace std</code> while it probably won't cause issues in a small project like this it is bad practise and can unexpected conflicts. see <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice</a></p></li>
<li><p><code>ceil(in.size()/2)</code> does not do what you expect. In c++ division by an int will return an int, discarding and remainder ( i.e. <code>3/2 = 1</code> ) taking the ceil of an int then does nothing. I would replace those lines, using the modulus, with </p></li>
</ul>

<pre><code>out1.reserve((in.size()/2) + in.size()%2);
out2.reserve(in.size()/2);
</code></pre>

<ul>
<li><p>You can't currently use auto in your for loop as i and j would have different types. size() returns a type of size_t (which is an unsigned integer type) where 0 is signed. Also in general you should prefer unsigned values for indices in a loop as they are always greater than 0.</p></li>
<li><p>Your for loop is correct, but personally I would write it with only 1 value like this. I find that easier to read, but is mainly a matter of taste.</p></li>
</ul>

<pre><code>for(std::size_t i = 0, mid = in.size()/2 + in.size()%2; i &lt; mid; i++ )
{
    size_t j = in.size() - i - 1;
}
</code></pre>

<p>In terms of the algorithm, despite what I initially thought I can't actually find an example where this approach doesn't work. So nice job on that count.</p>
    </div>