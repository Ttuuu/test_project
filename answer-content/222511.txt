<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My current effort is an implementation around prime factorization. I am attempting to reproduce something similar to the table found here</p>
</blockquote>

<p>Prime factorisation is the wrong approach to build that table. The efficient way to build it is to generate a list of primes using a sieve of some kind (a good implementation of Eratosthenes is definitely good enough up to 24 bits, but for 32 bits you might want to think about Atkins-Bernstein, and for 64 bits I would definitely prefer Atkins-Bernstein).</p>

<p>Then with the list of primes you can generate a list of semiprimes with a double-loop (making sure to break early from the inner loop when you pass the threshold!) There are about 600 million 32-bit semiprimes, so this should meet your performance requirements.</p>

<hr>

<blockquote>
<pre><code>    f.write(str(cexp)+":\t"+str(counts[cexp-2][0])+"("+str(round((counts[cexp-2][0]*numpy.log(pow(2,cexp)))/pow(2,cexp),4))+")\t"+
        str(counts[cexp-2][1])+" ("+str(round((counts[cexp-2][1]*numpy.log(pow(2,cexp)))/(pow(2,cexp)*numpy.log(numpy.log(pow(2,cexp)))),4))+")\t"+
        str(counts[cexp-2][2])+" ("+str(round((counts[cexp-2][2]*numpy.log(pow(2,cexp)))/pow(2,cexp),4))+";"+str(round((100*counts[cexp-2][2])/counts[cexp-2][1],4))+")\n")
</code></pre>
</blockquote>

<p>That is frankly illegible. Pull out some variables for the calculations, and then look at  <a href="//www.python.org/dev/peps/pep-0498/" rel="noreferrer">f strings</a>. And rather than copy-pasting it, define a function to compose the string.</p>

<hr>

<blockquote>
<pre><code>        for z in range(iexp, mexp+1):
            if x &lt;= pow(2,z):
                counts[z-2][0] += 1 #increment count of primes less than z taken to the power of 2
</code></pre>
</blockquote>

<p>This probably isn't a major bottleneck, but it's still inefficient. If you maintain a count of how many integers in the ranges <code>[a, b), [b, c), [c, d)</code> etc. have property P then you can produce the counts for integers in the ranges <code>[a, b), [a, c), [a, d)</code> with the property P with just two additions when you output the tables, rather than two additions <em>for each</em> such integer in <code>[a, b)</code> and one for each in <code>[b, c)</code>.</p>
    </div>