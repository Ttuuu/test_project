<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Succinctness</strong><br>
As rubyists, we love being succinct, and we love playing with enumerations.</p>

<p>You will see very few literal <code>false</code> and <code>true</code> in ruby code, as well as very few explicit <code>return</code> calls.</p>

<p>For example:</p>

<p>Instead of writing <code>return false if self &lt; 1</code> we will prefer to compound the condition to <code>self &gt;= 1 &amp;&amp; ...</code> which will do the same thing, but we "save" <code>return false</code>.</p>

<p><strong>The power of Enumeration</strong><br>
Ruby has a very powerful <a href="http://www.ruby-doc.org/core-1.9.3/Enumerable.html" rel="nofollow"><code>Enumerable</code></a>, and is used widely, often more than once in a line (using method chaining).</p>

<p>For example:</p>

<blockquote>
<pre><code>2.upto(Math.sqrt(self)) do |i|
  return false if self % i == 0
end
</code></pre>
</blockquote>

<p>Here you check if any of the numbers in the range are a divisor for <code>self</code>, and break if there is any. A more ruby way of doing it will be:</p>

<pre><code>return false if 2.upto(Math.sqrt(self)).any? { |i| self % i == 0 }
</code></pre>

<p>We'll also prefer to more succinct range syntax <code>(2..Math.sqrt(self))</code>, which is simply shorter...</p>

<p>So now, our <code>def prime?</code> method could be reduced to a one-liner:</p>

<pre><code>class Integer
  def prime?
    self &gt; 1 &amp;&amp; !(2..Math.sqrt(self)).any? { |i| self % i == 0 }
  end
end
</code></pre>

<p><strong>Mapping</strong><br>
Anywhere in the code I see the following pattern:</p>

<pre><code>result = []
some_loop do
  result &lt;&lt; something
end
</code></pre>

<p>A red flag is raised, and I look for a way to use <code>map</code> to do the same thing:</p>

<pre><code>result = some_loop.map { something }
</code></pre>

<p>Your code goes over all the non-negative integers, and takes counts how many of them result in a prime, until the first non-prime.</p>

<p>"All the non-negative integers" can be expressed in ruby as <code>(0..Float::INFINITY)</code>, so we can write:</p>

<pre><code>(0..Float::INFINITY).map { |n| n**2 + a*n + b }.take_while { |result| result.prime? }.count
</code></pre>

<p>This code takes each integer, <em>maps</em> it into the result of <code>n**2 + a*n + b</code>, takes all the results until they are no longer prime, and counts how many are there.</p>

<p>Cool! Right? The only problem with the code above, is that it will take infinity to complete it, as it takes <em>all</em> the numbers and maps them, and <em>then</em> checks for how many to take.</p>

<p>To solve this problem ruby now has...</p>

<p><strong>Lazy Enumerables</strong><br>
As of ruby 2.0, <a href="http://railsware.com/blog/2012/03/13/ruby-2-0-enumerablelazy/" rel="nofollow">lazy enumerables</a> allows you to calculate values in an infinite stream only as needed.</p>

<p>To solve the problem above, all we need to do now is to add the <code>lazy</code> operator on the range:</p>

<pre><code>(0..Float::INFINITY).lazy.map { |n| n**2 + a*n + b }.take_while(&amp;:prime?).count
</code></pre>

<p>And we have another one-liner!</p>

<p><strong>Everything is an enumerable</strong><br>
So you want to save on your "upto-loops"? Let's do it!</p>

<p>You want to enumerate over each pair of numbers from <code>-999</code> to <code>1000</code>, so what you actually want is to have a long matrix of those pairs:</p>

<pre><code>[[-999, -999], [-999, -998],...,[1000, 1000]].do_something_smart
</code></pre>

<p>To do that, you can use <a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-product" rel="nofollow"><code>product</code></a>:</p>

<pre><code>(-999..1000).to_a.product((-999..1000).to_a)
</code></pre>

<p>But since both <code>a</code> and <code>b</code> have the same range, we can even DRY this up, and use <a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-repeated_permutation" rel="nofollow"><code>repeated_permutation</code></a>:</p>

<pre><code>(-999..1000).to_a.repeated_permutation(2)
</code></pre>

<p>Both of these solutions will give you the needed matrix, so we can move on the see what we should do with it...</p>

<p>We want to get the coeffiecients that produce the number of primes, so let's do just that:</p>

<pre><code>a, b = (-999..1000).to_a.repeated_permutation(2).max_by { |a, b| get_amount_of_primes_from_quadratic_formula(a,b) }
</code></pre>

<p>Now all we need to do is multiply them with each other!</p>

<p><strong>Method naming</strong><br>
Your names are very verbose, which is a good thing, but ruby idiom frowns upon <code>get_</code> prefixes. Also, prefer using verbs already in the language (<code>count</code>) over those which are not in the language (<code>amount_of</code>)</p>

<p>So now the code will look like:</p>

<pre><code>class Integer
  def prime?
    self &gt; 1 &amp;&amp; !(2..Math.sqrt(self)).any? { |i| self % i == 0 }
  end
end

def count_quadratic_formula_primes(a,b)
  (0..Float::INFINITY).lazy.map { |n| n**2 + a*n + b }.take_while(&amp;:prime?).count
end

def product_of_coefficients_that_produce_maximum_number_of_primes_for_consecutive_values()
  a, b = (-999..1000).to_a.repeated_permutation(2).max_by { |a, b| count_quadratic_formula_primes(a,b) }
  a * b
end

start = Time.now
answer = product_of_coefficients_that_produce_maximum_number_of_primes_for_consecutive_values

puts "The answer is #{answer} and it took #{Time.now-start} seconds."
</code></pre>

<p>15 lines of hard-core ruby-style code!</p>

<p>Enjoy!</p>

<hr>

<p><strong>Update</strong><br>
It seems that <code>lazy</code> adds considerable overhead to the performance of the code. So it is not advisable to use it.</p>

<p>Fortunately this works:</p>

<pre><code>(0..Float::INFINITY).take_while { |n| (n**2 + a*n + b).prime? }.count
</code></pre>

<p>My code still runs ~2 times slower than the original (ends in 18 seconds), but it is more reasonable than with <code>lazy</code>...</p>
    </div>