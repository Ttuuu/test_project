<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am going to address some style issues.</p>

<p><strong>Do not compress lines</strong></p>

<p>Yes, the syntax allows you to write code like:</p>

<pre><code>Dim subtaskws As Worksheet: Set subtaskws = ThisWorkbook.Sheets("Sub Tasks")
</code></pre>

<p>But it is harder to read and the assignment versus declaration is harder to see. This makes code harder to follow and maintain. Instead, be clear and explicit:</p>

<pre><code>Dim subtaskws As Worksheet 
Set subtaskws = ThisWorkbook.Sheets("Sub Tasks")
</code></pre>

<p>The use of the ':' is useful in command line basic (or when doing some things in the immediate window). It is not good in modules.</p>

<p><strong>Use code names (named sheets)</strong></p>

<p>In the VBA Editor, you can rename the 'Sheet1' name of the sheets to something meaningful. Let us say, for example, that you change the <code>(Name)</code> of the sheets to 'SubTasks'. The following image is an example I have - different names but you should get the idea.</p>

<p><a href="https://i.stack.imgur.com/sfd74.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/sfd74.png" alt="enter image description here"></a></p>

<p>Now the code </p>

<pre><code>Dim subtaskws As Worksheet 
Set subtaskws = ThisWorkbook.Sheets("Sub Tasks")
</code></pre>

<p>is no longer necessary, and you can jump straight into </p>

<pre><code>lastcol = SubTasks.Cells(2, 1).End(xlToRight).Column
</code></pre>

<p><strong>Do not use <code>Call</code></strong></p>

<p>This is debated - <code>Call</code> is an obsolete word for backwards compatibility, but if anyone needs backwards compatibility to when Call was necessary, they have much bigger issues!</p>

<p>But you have really exemplified why using the obsolete and unnecessary token is not good. You have completely misused a function call (see next comment)!</p>

<p>At this point I am going to say:</p>

<pre><code>Call ColumnLetterFinder(subtaskws, 2, "Actual Workload", AWCol)
</code></pre>

<p>should be idiomatic VBA:</p>

<pre><code>ColumnLetterFinder subtaskws, 2, "Actual Workload", AWCol
</code></pre>

<p><strong>Functions should return things</strong></p>

<p>Your function, written as a <code>Function</code> does not return anything. From your description it is intended to return a string representing the name of a column. There are other ways of doing this, or achieving the result you want. But, for the purposes of this answer I am going to focus on the Function.</p>

<pre><code>Public Function ColumnLetterFinder(ws, row, Value, x)
</code></pre>

<p>does not declare a return type, does not strongly type the inputs, nor does it exercise discipline in mutating values (by value, rather than by the implicit reference).</p>

<pre><code>Public Function ColumnLetterFinder(ByVal ws As Worksheet, ByVal row As Long, ByVal Value As String, ByRef x As String) As String
</code></pre>

<p>Note: I made the last one explicitly <code>ByRef</code> because your current code changes that value.</p>

<p>Of course, what you are implicitly doing, is returning the answer through <code>x</code>. So, we can tidy this up a bit:</p>

<pre><code>Public Function ColumnLetterFinder(ByVal ws As Worksheet, ByVal row As Long, ByVal Value As String) As String
Dim rFind As range
      With ws.Rows(row)
            Set rFind = .Find(What:=Value, LookAt:=xlWhole, MatchCase:=False, SearchFormat:=False)
            If Not rFind Is Nothing Then
                  ColumnLetterFinder = Split(rFind.Address, "$")(1) '&lt;--- set the return value here
            End If
        End With
End Function ' Default value for string is "" if rFind is nothing
</code></pre>

<p>Now your main code can definitely get rid of that annoying <code>Call</code>:</p>

<pre><code>AWCol = ColumnLetterFinder(subtaskws, 2, "Actual Workload")
</code></pre>

<p>â€¦ or if you have names the sheet as suggested before:</p>

<pre><code>AWCol = ColumnLetterFinder(SubTasks, 2, "Actual Workload")
</code></pre>

<p>Now the code pretty much comments itself!</p>

<p><strong>Standard comments</strong></p>

<p>Use <code>Option Explict</code> at the top of modules. Always. <strong><em>Always</em></strong>.</p>

<p>Properly indent your code. This makes it easier to read and easier to spot where logic should be. An out of place <code>If</code> or loop becomes easier to spot.</p>

<p>Use meaningful variable names every time. Yes, it is sometimes hard to figure out a good name, but you will thank yourself in the months to come. After all, what did 'x' mean?</p>
    </div>