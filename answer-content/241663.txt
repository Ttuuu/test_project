<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Missing Header File</h2>

<p>You need to include <code>algorithm</code> so that <code>std::replace()</code> can be accessed.</p>

<h2>Error Checking</h2>

<p>Rather than checking if <code>argv[1]</code> is null, it might be better to use <code>argc</code> in the error check. If <code>argc</code> is not greater than 1 than there is an error. This is what <code>argc</code> is meant to be used for, as well as for a loop control when there are more arguments. It might be good to give an example of the proper program call as part of the error message. </p>

<p>The <code>else</code> that follows the error check is not necessary because of the <code>return</code> statement.</p>

<p>The first <code>return</code> statement in <code>main()</code> should not return zero, it should return 1 to indicate a failure. What might be even better is to include <code>cstdlib</code> and use the system defined symbols <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="nofollow noreferrer">EXIT_SUCCESS and EXIT_FAILURE</a>.</p>

<p>It would be better to report errors to std::cerr.</p>

<pre><code>int main(int argc, char** argv)
{
    if (argc &lt;= 1)
    {
        std::cerr &lt;&lt; "No path provided" &lt;&lt; std::endl;
        return EXIT_FAILURE;
    }

    const char* path = argv[1];
    if (!DirectoryExists(path))
    {
        std::cerr &lt;&lt; "Path doesn't exist" &lt;&lt; std::endl;
        return EXIT_FAILURE;
    }

    std::cout &lt;&lt; "Provided path is: " &lt;&lt; path &lt;&lt; std::endl;

    std::string fspath;
    fspath = replace(path);
    findVideos(fspath);

    return EXIT_SUCCESS;
}
</code></pre>

<h2>Horizontal Spacing</h2>

<p>A best practice in many programming languages is to put spaces between operators and operands, this makes the code much more readable and maintainable:</p>

<pre><code>void findVideos (std::string&amp; fspath) {
    while (*(fspath.rbegin()) == '/')
    {
        fspath.pop_back();
    }

    size_t i = 1;
    WIN32_FIND_DATA FindFileData;
    std::string destpath = fspath + std::string("/") + std::string("*.mp4");
    std::string ffmpegPath = "ffmpeg.exe -v error -f null - -i ";

    HANDLE hFind = FindFirstFile(destpath.c_str(), &amp;FindFileData);

    if (hFind != INVALID_HANDLE_VALUE)
    {
        do
        {
            std::string fullpath = std::string(fspath)+std::string("/") + std::string(FindFileData.cFileName);
            std::cout &lt;&lt; i &lt;&lt; "-" &lt;&lt; "Checking " &lt;&lt; fullpath &lt;&lt; " for errors" &lt;&lt; std::endl;
            std::string command = ffmpegPath +std::string("\"") + fullpath+std::string("\"");
            system(command.c_str());
            i++;
        }
        while(FindNextFile(hFind, &amp;FindFileData));
    }
    FindClose(hFind);
}
</code></pre>

<h2>Prefer Modern C++ <code>constexpr</code> Over <code>#define</code></h2>

<p>In C++ creating a constant using <code>constexpr</code> is preferred over a macro because it it type safe and a macro is not type safe.</p>

<pre><code>#ifndef INVALID_FILE_ATTRIBUTES
constexpr DWORD INVALID_FILE_ATTRIBUTES = ((DWORD)-1);
#endif
</code></pre>

<h2>Indentation</h2>

<p>It would be better not to mix spaces with tabs when indenting. Many programmers use 4 spaces for indenting, by default a tab is 8 spaces. This can lead to inconsistent indentation as demonstrated in the function <code>bool DirectoryExists(const std::string&amp; path)</code> in the question. An IDE such as Visual Studio allows you to set the number of spaces used in a tab to prevent this problem, where <code>notepad</code> does not do this.</p>

<h2>Replace</h2>

<p>It's not clear that the function <code>std::string replace (const std::string&amp; path)</code> since windows understand both the forward and backward slash in file specifications.</p>
    </div>