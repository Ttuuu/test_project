<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a short review;</p>
<ul>
<li><p>You cannot trust <code>setInterval(addMiliseconds, 10);</code> to actually call every 10 milliseconds, JS will only <em>try</em> to honour that and it will not try very hard, your time will always be off, which is shame for a timer ;) <a href="https://stackoverflow.com/questions/29971898/how-to-create-an-accurate-timer-in-javascript">See this link for more detail</a>. In essence you need to keep track when the time started and then do something like <code>var delta = Date.now() - start; // milliseconds elapsed since start</code></p>
</li>
<li><p>You are styling your buttons with a <code>btn</code> class, since there are no other buttons you might as well style the <code>button</code> tag itself</p>
</li>
<li><p>I am not a big fan of putting <code>&lt;script&gt;</code> tags after the <code>&lt;body&gt;</code>, I would just put the script in the header and wait for the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event" rel="nofollow noreferrer">DOM Content Loaded event</a> to trigger.</p>
</li>
<li><p>Other than that, your HTML looks great</p>
</li>
<li><p><code>screen</code> is an unfortunate name for the passed time field</p>
</li>
<li><p>Only <code>throw</code> when you are planning to catch, otherwise you create a bad user experience</p>
</li>
</ul>
<p>This is my counter proposal;</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Initialize classes
const ui = new UI();
const sw = new Stopwatch();
const controller = new Controller(ui, sw);

// SW class
function Stopwatch() {
  this.counter = 0;
  this.since = 0;
  this.intervalID; //Undefined is fine to start with
  //stopwatches should not know about the DOM
  //const screen = document.getElementById('sw-screen');

  this.updateTimer = function updateTimer(){
    this.counter = (Date.now() - this.since) / 1000;
  };

  this.start = function start() {
    if (!this.intervalID) {
      this.intervalID = setInterval(controller.tick, 10);
      this.since = Date.now();
    }
  };
 
  this.stop = function stop() {
    if (this.intervalID) {
      clearInterval(this.intervalID);
      this.intervalID = 0;
    }
  };

  this.reset = function reset(){
    if (this.intervalID != 0) {
      this.stop();
      this.counter = 0;
    };
  };

  Object.defineProperty(this, 'duration', {
    get: function() {
      console.log(intervalID);
      return counter
    }
  });
};

// UI class
function UI() {
  // HTML components
  this.buttons = {
    start: document.getElementById('start'),
    stop: document.getElementById('stop'),
    reset: document.getElementById('reset')
  };
  this.display = document.getElementById('display'); 

  this.updateDisplay = function(sw){
    //If innerText works, then use that
    this.display.innerText = sw.counter.toFixed(2);
  }

  this.showButtonAsActive = function showButtonAsActive(b) {
     this.resetAllButtons();
     b.classList.add('activeBtn');
  };
  this.resetAllButtons = function resetAllButtons() {
    Object.values(this.buttons).forEach(e =&gt; e.classList.remove('activeBtn'))
  };
};

function Controller(ui, sw){
// Add event listeners
  ui.buttons.start.addEventListener('click', function() {
    sw.start();
    ui.showButtonAsActive(this);
  });
  ui.buttons.stop.addEventListener('click', function() {
    sw.stop();
    ui.showButtonAsActive(this);
  });
  ui.buttons.reset.addEventListener('click', function() {
    sw.reset();
    ui.resetAllButtons();
    ui.updateDisplay(sw);
  });
  this.tick = function timerTick(){
    sw.updateTimer();
    ui.updateDisplay(sw)
  }
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
    &lt;link rel="stylesheet" href="normalize.css"&gt;
    &lt;link href="https://fonts.googleapis.com/css2?family=Lato:wght@100;300;700&amp;display=swap" rel="stylesheet"&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
    &lt;title&gt;Online Stopwatch&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="sw"&gt;
        &lt;span id="display"&gt;0.00&lt;/span&gt;
        &lt;div id="buttons"&gt;
            &lt;button type="submit" id="start"&gt;Start&lt;/button&gt;
            &lt;button type="submit" id="stop"&gt;Stop&lt;/button&gt;
            &lt;button type="submit" id="reset"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>

    </div>