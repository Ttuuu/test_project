<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You very rarely need to use <code>any</code> in TypeScript because its type-system is so expressive.</p>

<p>The problem is that <code>copyFormat</code> is specified to be <em>any</em> <code>string</code>.</p>

<p>What would happen if you passed <code>"blahblahblah"</code> as <code>copyFormat</code>? Your types currently allow this!. Then, your code would attempt to do <code>formats["blahblahblah"]</code>, but <code>.blahblahblah</code> is not a member of  the <code>formats</code> object. </p>

<p>You need a more precise type for <code>copyFormat</code>. You intended the caller to only pass one of <code>"keyword"</code>, <code>"hex"</code>, or <code>"rgb"</code>. You can make a type that is just those three values like so:</p>

<pre><code>interface Props {
  keyword: string;
  hex: string;
  rgb: string;
  copyFormat: "keyword" | "hex" | "rgb";
}
</code></pre>

<p>It looks like <code>Props</code> really holds two things; it holds the actual data, and then a separate argument controlling what you read from it. It might make sense to split it into two arguments:</p>

<pre><code>export default ({ keyword, hex, rgb }: Props, copyFormat: "keyword" | "hex" | "rgb") =&gt; {
  const formats = {
    keyword,
    hex: hex.toUpperCase(),
    rgb: `rgb(${rgb})`,
  };

  return &lt;p&gt;{formats[copyFormat]}&lt;/p&gt;;
}
</code></pre>

<p>If you don't like typing out all of the possible key options, you could instead use the <code>keyof</code> type operator to say that <code>copyFormat</code> is any valid key in the <code>Props</code> type. TypeScript will see that all of the properties are <code>string</code>s and correctly infer the resulting type of <code>formats[copyFormat]</code> is thus a <code>string</code>.</p>

<pre><code>interface Props {
  keyword: string;
  hex: string;
  rgb: string;
}

export default ({ keyword, hex, rgb }: Props, copyFormat: keyof Props) =&gt; {
  const formats = {
    keyword,
    hex: hex.toUpperCase(),
    rgb: `rgb(${rgb})`,
  };

  return &lt;p&gt;{formats[copyFormat]}&lt;/p&gt;;
};
<span class="math-container">```</span>
</code></pre>
    </div>