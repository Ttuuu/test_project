<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Is this homework?  Or just for fun?  If it is for real work, I would suggest using an existing framework.  I have not done parsing myself, but it is a common use-case and there are many frameworks.  I vaguely know of antlr.</p>

<p>I am not a specialist in the domain, so I can't realy comment on your algorithm.  But here are some general observations.</p>

<ol>
<li><p>You can put the <code>getOp</code> method as a static method in the <code>enum OpType</code>.   There is probably also an awful lot more code which you could put in this enum.</p></li>
<li><p>Initializing your member variables to -1 is a bit unusual.  There is only one constructor which sets all of them, so the initialization is useless (in <code>Op</code>).</p></li>
<li><p>You should use getters/setters for class <code>Expression</code>.  I know you don't actually need to, but it is the Java style.  Besides, this library might grow at some point and you would likely extract <code>Expression</code> in its own file, where you would definitely need to add getters/setters.</p></li>
<li><p>Your methods are much too long.  One method extraction which I noticed right away: at the start of <code>parse(String input)</code>, you use about 10 lines to split the string, so put that in a method. Even inside for/while loops, you can extract some blocks of code as methods.  The code becomes more readable that way.  </p></li>
<li><p>You should think a bit more because I am certain you can make this much more OO.  What screamed the need for OO to me was this:</p>

<pre><code>private static Expression parse(String[] tokens, LinkedList&lt;Op&gt; opsList,
    Map&lt;Integer, Integer&gt; closingMapper, Map&lt;Integer, Integer&gt; openingMapper,
    Map&lt;Integer, Expression&gt; frontCachingChart,
    Map&lt;Integer, Expression&gt; backCachingChart )
</code></pre></li>
</ol>
    </div>