<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>IMO the use of <code>OneOfBase</code> as a kind of imitation of discriminated unions makes a lot of noise in your code and makes it more difficult to read than it has to be.</p>

<p>Instead I would define a more traditional class structure, where each class holds information about each pattern or token type:</p>

<pre><code>  abstract class LikeToken
  {
    public abstract bool Match(string value, ref int start);
    public abstract string ToSQL();
    public abstract string ToVB();

    internal LikeToken Next { get; set; }
  }

  // Any constant char eg: 'a'
  class SingleChar : LikeToken
  {
    public SingleChar(char value)
    {
      Value = value;
    }

    public char Value { get; }

    public override bool Match(string value, ref int start)
    {
      if (start &lt; value.Length &amp;&amp; value[start] == Value)
      {
        start++;
        return Next.Match(value, ref start);
      }

      return false;
    }
  }

  // ?
  class AnySingleChar : LikeToken
  {
    // TODO implement the behavior
  }

  // *
  class ZeroOrMoreChars : LikeToken
  {
    // TODO implement the behavior
  }

  // 0 - 9
  class DigitChar : LikeToken
  {
    // TODO implement the behavior
  }

  // [a-z0-9] or [^a-z0-9]
  class CharList : LikeToken
  {
    public CharList(string charList)
    {
    }

    public bool IsPositive { get; private set; }

    // TODO implement the behavior
  }
</code></pre>

<p>As shown above the <code>Match()</code> method can be used to match each char in the string to test, and it will be independent of if the pattern originally was a VB or SQL pattern.
The methods <code>ToSQL()</code> and <code>ToVB()</code> should be used to reconstruct the pattern and hence act as a conversion mechanism between the two languages.</p>

<p>The <code>Next</code> member can be used to chain the tokens in a linked list which can be useful in the match process, because some of the patterns have to look ahead to find the optimal match - but you have surely already a design for that.</p>

<hr>

<p>Parsing the pattern could then for VB be something like:</p>

<pre><code>  public class LikePattern
  {
    internal LikePattern(IReadOnlyList&lt;LikeToken&gt; tokens)
    {
       // TODO Initialize the tokens Next member to form a linked list and the head member with the first token
    }

    public string Message { get; private set; }
    private readonly LikeToken head

    public bool Match(string value)
    {
      // TOD Implement
    }

    public static LikePattern Parse(string pattern)
    {
      if (string.IsNullOrEmpty(pattern))
        throw new ArgumentException("Can not be an empty string", nameof(pattern));

      List&lt;LikeToken&gt; tokens = new List&lt;LikeToken&gt;();
      int index = 0;

      while (index &lt; pattern.Length)
      {
        char current = pattern[index];

        switch (current)
        {
          case '?':
            tokens.Add(new AnySingleChar());
            break;
          case '*':
            tokens.Add(new ZeroOrMoreChars());
            break;
          case '#':
            tokens.Add(new DigitChar());
            break;
          case '[':
            int start = index;
            while (index &lt; pattern.Length &amp;&amp; pattern[index] != ']')
            {
              index++;
            }
            if (index &gt;= pattern.Length)
              throw new InvalidOperationException("Missing a closing square bracket for last char list");
            tokens.Add(new CharList(pattern.Substring(start, index - start + 1)));
            break;
          default:
            tokens.Add(new SingleChar(pattern[index]));
            break;
        }

        index++;
      }

      return new LikePattern(tokens);
    }
  }
</code></pre>

<p>And a similar method could easily be made for SQL.</p>

<hr>

<p>Some convenient extension methods could be:</p>

<pre><code>  public static class LikeExtensions
  {
    public static bool Like(this string value, string pattern, out string message)
    {
      LikePattern likePattern = LikePattern.Parse(pattern);
      bool result = likePattern.Match(value);
      if (!result)
        message = likePattern.Message;
      else
        message = "";
      return result;
    }

    public static bool Like(this string value, LikePattern pattern)
    {
      return pattern.Match(value);
    }
  }
</code></pre>

<hr>

<p>And usage:</p>

<pre><code>  LikePattern likePattern = LikePattern.Parse("[!e-z]bcd");

  string value = "abcd";
  bool result = value.Like(likePattern);
</code></pre>
    </div>