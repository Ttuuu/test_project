<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's an awesome little game!</p>

<h2>User experience</h2>

<p>Before we dive into the code, let's talk about the game itself.</p>

<h3><code>Rand</code>om hangs</h3>

<p>Sometimes, the executable hangs when I launch it. But only sometimes. It's almost as if it happens <code>rand</code>omly! We might find the source of this bug later.</p>

<h3>What am I supposed to do?</h3>

<p>When presented with this:</p>

<pre><code>...........
...........
...TX...T..
......P....
...........
B..........
........T..
...........
........B..
...........
...........
Select [L]eft, [R]ight, [T]op or [B]ottom:
</code></pre>

<p>It's not immediately clear what I'm supposed to do. The comment on line 7 was quite helpful.</p>

<pre><code>/**
 * DUNGEON: a simple game for the terminal. The objective of the
 * game is that the player ("P") reaches the treasure ("X")
 * avoiding the traps ("T") and the bandits ("B").
 * Bandits move randomly each turn.
 * */
</code></pre>

<p>I suggest that tell the player how to play the game by printing this comment.</p>

<h3>Maybe use different movement keys</h3>

<p>This message tells the player which keys to press:</p>

<pre><code>Select [L]eft, [R]ight, [T]op or [B]ottom:
</code></pre>

<p>I'm not sure why you chose to write "top" and "bottom" instead of "up" and "down". The player "moves up". The player doesn't "move top". Also, the keys LRTB aren't really natural for movement. Most players will be used to WASD (W-up, A-left, S-down, D-right). I suspect that if you don't tell players which keys to press, they will assume WASD. It's also more comfortable for the hands. You can put your left hand on WASD and your right hand on the enter key.</p>

<h3>I pressed the wrong key</h3>

<p>If I press "Z", this happens:</p>

<pre><code>T........T.
....B......
........B..
T..........
...........
...........
...........
........P..
...........
........X..
...........
Select [L]eft, [R]ight, [T]op or [B]ottom: Z

Select [L]eft, [R]ight, [T]op or [B]ottom:
Select [L]eft, [R]ight, [T]op or [B]ottom:
</code></pre>

<p>So you leave behind my mistake, then you print out an empty line, then you tell me to select a direction twice. I suggest that you simply clear the line when the player makes a mistake.</p>

<h2>The code</h2>

<p>OK, that's enough of that. This is CodeReview, not GameReview.</p>

<h3>[13-14] Mutable constants</h3>

<p>So you have these constants that aren't <code>const</code>ant.</p>

<pre><code>int NUMBEROFTRAPS = 3;
int NUMBEROFBANDITS = 2;
</code></pre>

<p>To declare a constant in C++, use the <code>const</code> keyword. Also, <code>ALLCAPS</code> is generally reserved for macros. So you should change that to this:</p>

<pre><code>const int number_of_traps = 3;
const int number_of_bandits = 2;
</code></pre>

<p>Telling the compiler "this is a constant" might make your lines a little longer but the compiler can help you if you give it a better understanding of your program. If at some point in your program you do this:</p>

<pre><code>number_of_traps = 7;
</code></pre>

<p>The compiler will tell you that you made a mistake.</p>

<h3>[18-21] Long member variable names</h3>

<p>To me, <code>xPosition</code> and <code>yPosition</code> are unnecessarily long. There's no need to put <code>Position</code> in the name because the <code>struct</code> is already a position. So you end up doing writing this like this:</p>

<pre><code>Location position;
position.xPosition = 4;
</code></pre>

<p>You're writing "position" twice. You really should shorten these names to their essence and just use <code>x</code> and <code>y</code>.</p>

<h3>[26-30] A mutable constant and an unused constant</h3>

<p>Here's the <code>Player</code> struct:</p>

<pre><code>struct Player {
  Location position;
  char symbol = 'P';
  std::string name = "alvaro";
};
</code></pre>

<p>At no point did I ever see "alvaro" printed to the screen when I was playing this game. I'm not sure why its <code>name</code> is there.</p>

<p><code>symbol</code> never changes so it should be <code>const</code>. <code>Trap</code>, <code>Bandit</code> and <code>Treasure</code> all carry around this <code>char symbol</code>. Every <code>Bandit</code> instance is storing the same <code>symbol</code>. You really should put this duplicate information in one place. <code>symbol</code> should be <code>static</code>. This means that <code>symbol</code> can now be accessed as <code>Player::symbol</code> or <code>Bandit::symbol</code>. You can still access the symbol from the instance (<code>player.symbol</code>) but I suggest you use <code>Player::symbol</code> to avoid confusing readers. Putting this all together we get this new <code>Player</code> struct.</p>

<pre><code>struct Player {
  Location position;
  static const char symbol = 'P';
};
</code></pre>

<p>You should use <code>static const</code> for the <code>Trap</code>, <code>Bandit</code> and <code>Treasure</code> structs as well.</p>

<h3>[54-57] Initializing a global variable with designated initializers</h3>

<p>This is quite a peculiar bit of code:</p>

<pre><code>struct {
  int xDimension;
  int yDimension;
} board = {.xDimension = 10, .yDimension = 10};
</code></pre>

<p>You're creating an anonymous struct, which looks pretty much the same as an existing struct (<code>Location</code>). You're creating a global variable <code>board</code>. I think you actually want to create a global constant. You're also using designated initializers <code>{.xDimension = 10, .yDimension = 10}</code>. If you enable all warnings by passing these flags to your compiler <code>-Wall -Wextra -pedantic</code>, your compiler should tell you that "designated initializers are a C99 feature". Designated initializers are not a C++ feature. You should use brace-initialization instead. I suggest that you replace that code with this:</p>

<pre><code>const Location board_size = {10, 10};
</code></pre>

<p>In future, you should always pass at least <code>-Wall -Wextra -pedantic</code> and edit your code until there are no warnings.</p>

<h3>[60-61] Weakly typed enums</h3>

<p>Here, you're using <code>ALLCAPS</code> again. You're also using weakly typed enums. </p>

<pre><code>enum Direction { RIGHT, LEFT, TOP, BOTTOM, WRONG_DIRECTION };
enum Result { VICTORY, DEFEAT };
</code></pre>

<p>Weakly typed basically means that this code is valid:</p>

<pre><code>int dir = TOP;
</code></pre>

<p>Regular enums are another one of those C features that you should never use in C++. In C++, you should use strongly typed enums by putting <code>class</code> (or <code>struct</code> but most people just use <code>class</code>) after <code>enum</code>. This has two effects. Firstly, it stops you from just writing <code>RIGHT</code> or <code>LEFT</code>. It forces you to write <code>Direction::RIGHT</code> which is much clearer. Secondly, it disallows implicit casts to the underlying type. So those enums should be written like this:</p>

<pre><code>enum class Direction {
  right, left, top, bottom, wrong
};
enum class Result {
  victory, defeat
};
</code></pre>

<h3>[63] Passing C arrays to functions</h3>

<p>Here, you're declaring a function that takes a few arrays as parameters.</p>

<pre><code>void drawBoard(Player, Trap[], Bandit[], Treasure);
</code></pre>

<p>Passing stack arrays to functions is another thing that you <em>can</em> do in C++ but you probably shouldn't. Consider replacing all of your usages of C arrays with a C++ container like <code>std::vector&lt;Trap&gt;</code> or <code>std::array&lt;Trap, number_of_traps&gt;</code>.</p>

<h3>[70] <code>#include</code> C++ random header but use C <code>rand</code> instead</h3>

<p>At line 4, you include the C++ random numbers header</p>

<pre><code>#include &lt;random&gt;
</code></pre>

<p>But then at line 70, you seed the C random number generator with the C time function.</p>

<pre><code>std::srand(std::time(0));
</code></pre>

<p>The C++ random header consists of generators and distributions. Pseudo-random number generators produce a stream of pseudo-random bits. Distributions take the random bits and distribute them across a range. I suggest that you seed an <code>std::mt19937</code> generator using an <code>std::random_device</code>.</p>

<pre><code>std::random_device device;
std::mt19937 gen{device()};
</code></pre>

<p>Now that you have seeded the <code>std::mt19937</code> pseudo-random number generator, you start generating some numbers. Let's say you want to generate random <code>int</code>s between <code>0</code> and <code>board_size.x - 1</code> inclusive. You would do this:</p>

<pre><code>std::uniform_int_distribution&lt;int&gt; dist{0, board_size.x - 1};
const int xPos = dist(gen);
</code></pre>

<p>Since the seed is now stored in an <code>std::mt19937</code> object and not globally, you have to pass <code>gen</code> to all of the functions that need random variables.</p>

<h3>Big functions</h3>

<p>There are a few very big functions. You should chop up your program into nice neat little functions that each to do one specific job. For example, <code>drawBoard</code> should call functions to <code>drawPlayer</code>, <code>drawTreasure</code>, <code>drawBandit</code> and <code>drawTrap</code>.</p>

<h3>Identical functions</h3>

<p><code>moveBandit</code> and <code>movePlayer</code> are pretty much exactly the same. I suggest that you have one function for moving "things". (Just rename <code>movePlayer</code> to <code>moveObject(Location &amp;, Direction)</code>. You should also have a function for generating random directions:</p>

<pre><code>Direction getRandDir(std::mt19937 &amp;gen) {
  std::uniform_int_distribution&lt;int&gt; dist{0, 3};
  return static_cast&lt;Direction&gt;(dist(gen));
}
</code></pre>

<p>To move a bandit, <code>moveObject(bandit.pos, getRandDir())</code>.</p>

<p>To move a player, <code>moveObject(player.pos, askDir())</code>.</p>

<h3>Error checking</h3>

<p>The function <code>askDirection</code> might return a valid direction or it might return <code>WRONG_DIRECTION</code>. Handling the case where the player inputs a bad direction is handled elsewhere. This doesn't really make sense to me. <code>askDirection</code> should always return a valid direction. <code>askDirection</code> should be responsible for dealing with the case where the player inputs an invalid direction.</p>

<p>You're using <code>std::cin.get</code> to get one character at a time. This combined with handling the error outside of <code>askDirection</code> is the reason why this happens when the player inputs an invalid character:</p>

<pre><code>T........T.
....B......
........B..
T..........
...........
...........
...........
........P..
...........
........X..
...........
Select [L]eft, [R]ight, [T]op or [B]ottom: Z

Select [L]eft, [R]ight, [T]op or [B]ottom:
Select [L]eft, [R]ight, [T]op or [B]ottom:
</code></pre>

<p>You really should be getting the whole the line like this:</p>

<pre><code>std::string input;
std::cin &gt;&gt; input;
</code></pre>

<p>This way, you can check if the player inputted too many characters:</p>

<pre><code>if (input.size() != 1) {
  std::cout &lt;&lt; "One character please\n";
}
</code></pre>

<p>When the player inputs a bad character, you should move the cursor up, clear the line and try again. With ANSI escape codes, that's <code>"\x1B[1A"</code> and <code>"\x1B[0K"</code>. I also suggest that you put these character sequences into constants to make the code more readable. You should put something like this right at the top of the file:</p>

<pre><code>const char cursorUp[] = "\x1B[1A";
const char clearLine[] = "\x1B[0K";
</code></pre>

<p>This is how I would implement <code>askDirection</code>.</p>

<pre><code>Dir askDirection() {
  std::cout &lt;&lt; "dir&gt; ";
  std::string input;
  std::cin &gt;&gt; input;
  if (input.size() == 1) {
    switch (std::toupper(input[0])) {
      case 'W':
        return Dir::up;
      case 'A':
        return Dir::left;
      case 'S':
        return Dir::down;
      case 'D':
        return Dir::right;
    }
  }
  std::cout &lt;&lt; cursorUp &lt;&lt; clearLine;
  return askDirection();
}
</code></pre>

<hr>

<p>I'm out of time! I hope you found some of my advice helpful!</p>
    </div>