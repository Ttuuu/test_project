<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Finding existing Git tags</h3>

<p>The files in a Git repository's meta storage,
such as the content of <code>./refs/tags</code>, <code>./packed-refs</code>,
are not API.
It's best to interact with Git through commands.</p>

<p>You can get the list of tags with the <code>git tag -l</code> command.
This will include packed refs as well.</p>

<h3>Use early returns</h3>

<p>The hook collects counts of matching tags, then matching packed refs,
and finally it decides if it should fail based on the collected counts,
and if the operation is not a delete.
It's usually better to not delay actions when you have enough information to take them.</p>

<p>For example,
very early in the <code>process_ref</code> function you can already know if it's a delete operation.
It would be better to <code>return 0</code> right there,
to avoid any further unnecessary processing.</p>

<p>The same goes for checking the counts.
If the first count in tags is non-zero,
you can already fail without further processing.</p>

<h3>Use <code>grep -q</code> instead of <code>grep -c</code> and checking for non-zero</h3>

<p>When <code>grep -q</code> finds a match,
it stops further processing.
<code>grep -c</code> continues until the end of the input to collect all counts.
That's not necessary in your example.</p>

<h3>Use more strict pattern matching</h3>

<p>Using <code>grep -ic $refname</code> to find a matching ref in the list of refs may leave room for false positives.
For example if there is a tag <code>v1.1</code>,
and then you try to push <code>v1</code>, it will fail.
This is a bit tortured example,
because obviously you won't release <code>v1</code> after <code>v1.1</code>,
but it's good to be aware of this point.</p>

<p>You could make the matching more strict by adding a <code>$</code> to anchor the end.
If both the beginning and the end can be anchored,
then you could use the <code>-x</code> flag of <code>grep</code> to match entire lines.
Now that would be rock-solid strict.</p>

<h3>Always quote parameters</h3>

<p>Even though you know that <code>$refname</code> will never contain unsafe characters,
it's a good habit to always surround with double-quotes when used as command arguments, for example in <code>grep -ic "$refname"</code>.</p>

<h3>Use <code>$(...)</code> instead of <code>`...`</code></h3>

<p><code>`...`</code> is obsolete, use <code>$(...)</code> instead.</p>

<h3>Alternative implementation</h3>

<p>Putting the above together (and some more),
I'd implement the hook like this:</p>

<pre><code>#!/bin/sh

is_delete() {
    [ "$1" = "0000000000000000000000000000000000000000" ]
}

tag_exists() {
    git tag -l | grep -qix "$1"
}

fail() {
    echo "push failed"
    echo "tag already exists: $1"
    echo "please contact dev team"
    exit 1
}

process_ref() {
    target="$2"   # target hash. all 0s for a delete command
    refname="$3"  # the full ref name

    is_delete "$target" &amp;&amp; return

    case $refname in
        refs/tags/*)
            tagname=${refname#refs/tags/}
            tag_exists "$tagname" &amp;&amp; fail "$refname"
    esac

    return 0
}

while read REF; do process_ref $REF; done
</code></pre>
    </div>