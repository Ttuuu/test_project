<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Anytime I see something like these I wonder "is there a better way we can do this?":</p>
<blockquote>
<pre><code>cmd.Parameters.Add("@title", MySqlDbType.String);
cmd.Parameters["@title"].Value = seriesTitle;
cmd.Parameters.Add("@authorid", MySqlDbType.UInt32);
cmd.Parameters["@authorid"].Value = author.AuthorId;
</code></pre>
</blockquote>
<p>Well, in this case, I'm going to suggest a slightly-functional approach to this process.</p>
<p>C# has a (mostly) handy feature called "Extension Methods". In general, I try to avoid them unless there's a <em>good</em> application for them, such as here.</p>
<p>I would define an extension method here quick:</p>
<pre><code>public static MySqlCommand AddParameter&lt;T&gt;(this MySqlCommand command, string name, MySqlDbType type, T value) {
    command.Parameters.Add(name, type);
    command.Parameters[name].Value = value;
    return command;
}
</code></pre>
<p>Now, here, I returned the <code>MySqlCommand</code> on purpose, because I want to chain this:</p>
<pre><code>command.AddParameter("@title", MySqlDbType.String, seriesTitle)
       .AddParameter("@authorid", MySqlDbType.UInt32, author.AuthorId);
</code></pre>
<p>Since you aren't using an ORM (and I suspect you have reasons for that, I definitely won't try to persuade you to use one) I would do a couple of these small things to make life a little easier on myself. It's pretty cheap, and it allows us to work our code more easily.</p>
<hr>
<p>I would take some of these shorter functions and apply some expression-bodied members:</p>
<blockquote>
<pre><code>public DataTable Series { get { return DataTable; } }

public bool AddSeries(ISeriesModel iSeriesData)
{
    SeriesModel seriesModel = (SeriesModel)iSeriesData;
    return addItem(seriesModel);
}

public bool AddSeries(SeriesModel seriesModel)
{
    return addItem(seriesModel);
}
</code></pre>
</blockquote>
<p>To:</p>
<pre><code>public DataTable Series =&gt; DataTable;
public bool AddSeries(ISeriesModel iSeriesData) =&gt; addItem((SeriesModel)iSeriesData);
public bool AddSeries(SeriesModel seriesModel) =&gt; addItem(seriesModel);
</code></pre>
<p>For simple functions like those, it's trivial to do and saves you some vertical space.</p>
    </div>