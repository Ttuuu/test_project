<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since a method has to be executed to get this color, you cannot declare the color as constant. A <code>static readonly</code> field is what comes closest to a <code>const</code>.</p>

<pre><code>private static readonly Color DefaultColor = Color.FromArgb(224, 224, 224);

private int GetOleFromHTML(string stringRep)
{
    Color c;
    if (string.IsNullOrWhiteSpace(stringRep))
    {
        c = DefaultColor
    }
    else
    {
        try
        {
            c = ColorTranslator.FromHtml(stringRep);
        }
        catch
        {
            c = DefaultColor
        }
    }

    return ColorTranslator.ToOle(c);
}
</code></pre>

<p>Another approach would be to directly store the OLE color as <code>int</code>.</p>

<pre><code>const int DefaultOleColor = 14737632; // R=224, G=224, B=224

private int GetOleFromHTML(string stringRep)
{
    if (string.IsNullOrWhiteSpace(stringRep))
    {
        return DefaultOleColor;
    }
    try
    {
        return ColorTranslator.ToOle(ColorTranslator.FromHtml(stringRep));
    }
    catch
    {
        return DefaultOleColor;
    }
}
</code></pre>

<p>Or calculated explicitly:</p>

<pre><code>const int DefaultOleColor = 256 * (256 * 224 + 224) + 224;
</code></pre>

<p>Or with bit shift operations</p>

<pre><code>const int DefaultOleColor = 224 &lt;&lt; 16 | 224 &lt;&lt; 8 | 224; // My preferred variant.
</code></pre>

<p>These expressions can be used to initialize the constant as they can be fully evaluated at compile time.</p>

<p>You can test these variants easily in the Immediate Window of Visual Studio. You must qualify the names with the namespaces for the first variant (<code>System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.FromArgb(224, 224, 224))</code>). </p>

<hr>

<p>Avoiding repetition is not the only reason for having constants. Constant declarations give a name to otherwise "magic" values. See <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic number (programming)</a> (Wikipedia).</p>

<p>This variant avoids the repetition by restructuring the code, but still uses a constant.</p>

<pre><code>const int DefaultOleColor = 224 &lt;&lt; 16 | 224 &lt;&lt; 8 | 224;

private int GetOleFromHTML(string stringRep)
{
    if (!String.IsNullOrWhiteSpace(stringRep))
    {
        try
        {
            return ColorTranslator.ToOle(ColorTranslator.FromHtml(stringRep));
        }
        catch
        {
        }
    }
    return DefaultOleColor;
}
</code></pre>
    </div>