<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While I am supporting <a href="https://codereview.stackexchange.com/a/224610/52802">@user673679's approach</a> a lot in terms that putting everything into a single function, I still have concerns:</p>

<ol>
<li><p>Using an interface might be better if you want to refactor the functionality to support multiple languages:</p>

<pre><code>struct IGuessStatisticsMessage {
     virtual std::string makeStatisticsMessage(char letter, unsigned int count) = 0;
virtual ~IGuessStatisticsMessage() {}
};
</code></pre>

<p>This would allow to provide implementations for different languages easier:</p>

<pre><code>struct GuessStatisticsMessage_EN() : public IGuessStatisticsMessage {
    std::string makeStatisticsMessage(char letter, unsigned int count) {
        auto const verb = (count == 1) ? "is" : "are";
        auto const number = (count == 0) ? "no" : (count == 1) ? "one" : 
        std::to_string(count);
        auto const plural = (count == 1) ? "" : "s";
        return fmt::format("There {} {} '{}'{}.", verb, number, letter, plural);
    }       
};

struct GuessStatisticsMessage_DE() : public IGuessStatisticsMessage {
    std::string makeStatisticsMessage(char letter, unsigned int count) {
        auto const number = (count == 0) ? "kein" : (count == 1) ? "ein" : 
        std::to_string(count);
        auto const plural = (count == 1) ? "" : "s";
        return fmt::format("Es gibt {} '{}'{}.", number, letter, plural);
    }       
};
</code></pre></li>
<li><p>Also I am not a friend of nested ternary expressions, they generally tend to be hard to read. I'd rather use some code like this:</p>

<pre><code>std::string makeStatisticsMessage(char letter, unsigned int count) {
    auto const verb = (count == 1) ? "is" : "are";
    std::string number;
    if(count == 0) { 
        number = "no";
    else if (count == 1) { 
        number = "one";
    }
    else { 
        number = std::to_string(count);
    }
    auto const plural = (count == 1) ? "" : "s";
    return fmt::format("There {} {} '{}'{}.", verb, number, letter, plural);
}       
</code></pre></li>
</ol>
    </div>