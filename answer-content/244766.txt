<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Architecture</h1>
<p>Your main architectural problem is that instead of</p>
<pre><code>def make_a(params):
    return a

def make_b(a, params):
    return b

def make_c(b, params):
    return c

def make_result(c, params):
    return result

a = make_a(params_a)
b = make_b(a, params_b)
c = make_c(b, params_c)
result = make_result(c, params_result)
</code></pre>
<p>you do</p>
<pre><code>def make_a(params):
    return a

def make_b(params_a, params_b):
    a = make_a(params_a)    
    return b

def make_c(params_a, params_b, params_c):
    b = make_b(params_a, params_b)
    return c

def make_result(params_a, params_b, params_c, params_result):
    c = make_c(params_a, params_b, params_c)
    return result

result = makeresult(params_a, params_b, params_c, params_result)
</code></pre>
<p>Instead of calling a function_1 to generate the necessary artefacts to pass to the next function_2 you call the function_1 inside function_2 and therefore you have to pass the requirements for function_2 as well.</p>
<p>In your case in function</p>
<pre><code>def check_sparta_file_boundaries(seq_file,seq_directory,mutation_list1,mutation_list2,sparta_file,sparta_directory,seq_start):
    temp_list=[]
    temp_counter=0
    sparta_filtered_list=filter_sparta_using_seq(seq_file,seq_directory,mutation_list1,mutation_list2,sparta_file,sparta_directory,seq_start)
    for checker in sparta_filtered_list:
        temp_modifier=checker.strip()
        temp_split=temp_modifier.split()
        temp_finder=re.search('^\d+',temp_split[0])
        temp_list.append(temp_finder.group(0))
        temp_counter+=1
        if temp_counter==5:
            if int(temp_finder.group(0))==int(temp_list[0]):
                break
            else:
                del sparta_filtered_list[0:4]
                break
    if len(sparta_filtered_list)%6 != 0:
        del sparta_filtered_list[-5:-1]

    return sparta_filtered_list
</code></pre>
<p>you shall call <code>filter_sparta_using_seq</code> before calling <code>check_sparta_file_boundaries</code> and pass <code>sparta_filtered_list</code> instead of the parameters required for <code>filter_sparta_using_seq</code></p>
<pre><code>def check_sparta_file_boundaries(sparta_filtered_list):
    temp_list=[]
    temp_counter=0
    # line removed ...
    for checker in sparta_filtered_list:
        temp_modifier=checker.strip()
        temp_split=temp_modifier.split()
        temp_finder=re.search('^\d+',temp_split[0])
        temp_list.append(temp_finder.group(0))
        temp_counter+=1
        if temp_counter==5:
            if int(temp_finder.group(0))==int(temp_list[0]):
                break
            else:
                del sparta_filtered_list[0:4]
                break
    if len(sparta_filtered_list)%6 != 0:
        del sparta_filtered_list[-5:-1]

    return sparta_filtered_list

def main_program_flow():
    sparta_filtered_list = filter_sparta_using_seq(seq_file,seq_directory,mutation_list1,mutation_list2,sparta_file,sparta_directory,seq_start)
    sparta_filtered_list = check_sparta_file_boundaries(sparta_filtered_list)
</code></pre>
<p>Next you do the same for <code>filter_sparta_using_seq</code> and so on.</p>
<p>I tried to answer your specific question and hope you got the idea.</p>
<hr>
<p>EDIT:</p>
<p>The same is valid for your function in the first file</p>
<pre><code>def sparta_gen_only():
        from sparta_file_formatter import check_sparta_file_boundaries
        os.chdir(save_directory)
        with open(save_file_sparta,'w') as file:
            for stuff_to_write in check_sparta_file_boundaries(seq_file,seq_directory,mutation_list1,mutation_list2,sparta_file,sparta_directory,seq_start):
                file.write(stuff_to_write+'\n')
</code></pre>
<p>where you did not pass the parameters but act on globals. Again we do not call from the inside but call before and pass the results. Also we pass parameters instead of using globals.</p>
<pre><code>def sparta_gen_only(sparta_filtered_list, directory_name, file_name):
    os.chdir(directory_name)
    with open(file_name, 'w') as file:
        for stuff_to_write in sparta_filtered_list:
            file.write(stuff_to_write + '\n')

def main_program_flow():
    sparta_filtered_list = filter_sparta_using_seq(seq_file,seq_directory,mutation_list1,mutation_list2,sparta_file,sparta_directory,seq_start)
    sparta_filtered_list = check_sparta_file_boundaries(sparta_filtered_list)
    sparta_gen_only(sparta_filtered_list, save_directory, save_file_sparta)
</code></pre>
<h1>some other points</h1>
<ul>
<li>Get rid of the habit to change directory. At least for file read this is a no-go. Let the user determine the working directory.</li>
<li>There is nothing wrong with fully qualified file names. You do not need to split to directory/basename.</li>
<li>After restructuring your code according to the pattern above, there shall be no more globals</li>
</ul>
    </div>