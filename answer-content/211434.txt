<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unsafe and unusable.</h1>

<h2>Class syntax is dangerous</h2>

<p>The class syntax encourages you to expose the objects state, this means it can mutate outside your control.</p>

<p>New developments allow class to have private properties. <code>#privateNamed</code> the hash means private. However its implementations is an abomination to the languages, we now have a situation where access type is embedded in the variable name. Names should be independent of any language constructs. Anyways I digress...</p>

<p>As it stands your object (<code>class</code>) is unsafe, you expose <code>head</code> and <code>size</code> (in <code>LinkedList</code>) and <code>next</code> (in <code>Node</code>) meaning that outside code can deliberately or by accident mutate the objects state such that your function becomes inoperable. </p>

<p>It is possible for your code to indefinitely block the page, meaning that the only way to fix the problem is for the page to crash or it to be forced to close.</p>

<h3>Mutation examples</h3>

<pre><code>const list = new LinkedList()
list.insert("ðŸ˜§");
list.head.next = list.head;  // cyclic link. 
list.remove("â˜ "); // Untrappable page blocking error
list.printList(); // will crash the page with out of memory error

const list = new LinkedList()
list.size = "ðŸ™ˆðŸ™‰ðŸ™Š";
console.log(list.length); // &gt;&gt; "ðŸ™ˆðŸ™‰ðŸ™Š" nonsense 


const list = new LinkedList()
list.insert("A");
const a = list.head;
list.insert("B");
const b = list.head;
list.insert("C");
list.insert("D");
const d = list.head;    
b.next = d;  // removes c 

console.log(list.length()); // &gt;&gt; 4 Incorrect
var node = a;
for(let i = 0; i &lt; list.length; i++){
    console.log(node.value); // WTF throws error on 4th iteration
    node = node.next;
}
</code></pre>

<h3>Normal use errors</h3>

<pre><code>const list = new LinkedList()
list.insert("A");         
list.insertAt("B", -1);  // does not insert returning undefined.


const list = new LinkedList()
list.size = 100; 
console.log(list.is__Empty()); // &gt;&gt; false, wrong answer the list is empty
</code></pre>

<p>I could go on, there are many dangers when you expose internal state. Programmers, you included will be tempted to use a shortcuts, or accidently mutate the list with catastrophic consequences.</p>

<p>I would never allow such a dangerous object into a project, it is unusable because of its dangerous behaviour.</p>

<h2>Object factories</h2>

<p>Consider using a factory to create your Object.</p>

<p>Factories let you create a private state via closure that can not be mutate. You can confidently use the state because it is hidden and immutable. </p>

<h3>Factory example.</h3>

<p>The factory returns a frozen object with the state hidden via closure. I add to functions. Iterator <code>LinkedList.values</code> to iterate the list from <code>0</code> to <code>size-1</code> eg <code>console.log([...list.values()])</code> will list items as an array. Also <code>linkedList.itemAt(index)</code> as the linked list is useless without them. </p>

<p>You do not get access to nodes, only the values they contain. And <code>printList</code> is called <code>toString</code></p>

<p>Note code is untested and as an example only. May contain typos or logic errors.</p>

<pre><code>function LinkedList() {
    var head, size = 0;
    const add = (value, next) =&gt; {
        size ++;
        return {value, next};
    }
    const vetIndex = idx =&gt; isNaN(idx) || idx &gt; size || idx &lt; 0;
    const list = Object.freeze({
        get length() { return size },
        get isEmpty() { return size === 0 },
        insert(item) { head = add(item, head) },
        insertAt(item, idx = 0) {
            if (vetIndex(idx)) { throw new RangeError("Bad index") }
            if (idx === size) { head = add(item, head) } 
            else {
                let curr = head;
                while (++idx &lt; size) { curr = curr.next }
                curr.next = add(item, curr.next);
            }
        },
        remove(item) {
            if (head.value === item) { 
                head = head.next;
                size --;
            } else {
                let curr = head;
                while (curr &amp;&amp; curr.next &amp;&amp; curr.next.value !== item) { curr = curr.next }
                if (curr) {
                    curr.next = curr.next ? curr.next.next : undefined;
                    size --;
                }
            }
        },
        toString() {
            var str = "";
            if (size) {
                str += head.value;
                let curr = head.next;
                while (curr) {
                    str += "-&gt;" + curr.value;
                    curr = curr.next;
                }
            }
            return str;
        },  
        *values() {
            var idx = 0;
            while (idx &lt; size) { yield list.itemAt(idx++) }
        },
        itemAt(idx) {
            if (size &amp;&amp; !vetIndex(idx)) {
                vetIndex(idx);
                if (idx === size) { return head.value }
                else {
                    let curr = head;
                    while (++idx &lt; size) { curr = curr.next }
                    return curr.value
                }
            }
        },            
    });
    return list;
}
</code></pre>

<h3>Some more points on your code</h3>

<ul>
<li>Function scope variables should be declared as <code>var</code>. Show you understand the language and use the correct declaration type.</li>
<li>Use <code>const</code> for constants. Eg in <code>printList</code> you define an array <code>let out = [];</code> <code>out</code> is a reference to an array, the reference never changes, only the content of the array does, so use a constant  <code>const out = [];</code></li>
<li>Only throw if not doing so will damage state such that continuing will create undefined behaviours. You threw if an item could not be found in <code>remove</code> There is no reason to throw as it does not damage your state. Return <code>undefined</code> and let the calling function deal with their problems.</li>
<li>When you throw do not throw strings (many catches assume an object and rethrow if its just a string). Use appropriate error objects. eg  you throw a string <code>throw "Wrong index";</code> you should throw an error  <code>throw new RangeError("Bad index");</code> Or <code>throw new Error("Bad index");</code></li>
<li>Don't add redundant code. the function <code>insertAt</code> has 3 returns yet can be written with on extra <code>else</code> and a <code>break</code>, with no <code>return</code> tokens.</li>
<li>Don't use <code>null</code>, its <code>undefined</code> if not defined. </li>
<li>Always use the shorts form. Eg <code>if(this.head === null)</code> use <code>if(!this.head)</code> and <code>if (!curr.next) { curr.next = p;} else if (!curr.next.next) { curr.next = p;}</code> becomes <code>if(!curr.next || !curr.next..next) { curr.next = p }</code></li>
</ul>
    </div>