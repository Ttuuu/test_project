<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class ReportData
{
    public ReportData(IEnumerable&lt;ReportColumn&gt; columns)
    {
        Columns = columns ?? throw new ArgumentNullException("No valid columns available");
    }

    public IEnumerable&lt;ReportColumn&gt; Columns { get; set; }
}
</code></pre>
</blockquote>

<p>The <code>Columns</code> property should be <code>get</code>-only.</p>

<blockquote>
<pre><code>public string ColumnName { get; set; } 
public object[] ColumnData { get; set; }
</code></pre>
</blockquote>

<p>Same with these two: it makes no sense to set them in the constructor, even throw an exception if it's <code>null</code>, if you can legally construct the object and then merrily do this:</p>

<pre><code>var data = new ReportData(Enumerable.Empty&lt;ReportColumn&gt;()) { Columns = null };
</code></pre>

<p>Note that <code>IEnumerable&lt;T&gt;</code> things should indeed never be <code>null</code>, but any <code>IEnumerable&lt;T&gt;</code> can still be empty without being <code>null</code>. As such, the guard clause is insufficient, since it appears to be there to protect against creating a <code>new ReportData</code> that wouldn't have any columns - <code>Enumerable.Empty&lt;T&gt;()</code> is a perfectly valid input that should be guarded against.</p>

<pre><code>public class ReportData
{
    public reportData(IEnumerable&lt;ReportColumn&gt; columns)
    {
        var reportColumns = columns ?? throw new ArgumentNullException(...);
        if (!reportColumns.Any())
        {
            throw new ArgumentException(...);
        }

        Columns = reportColumns;
    }

    public IEnumerable&lt;ReportColumns&gt; Columns { get; }
}
</code></pre>

<p>Now there's no way a <code>ReportData</code> object can have 0 columns, be it during or after construction.</p>

<p>These two could be expression-bodied auto-properties:</p>

<blockquote>
<pre><code>private Worksheet Worksheet { get { return Globals.ThisAddIn.Application.ActiveSheet; } }
private Range Cells { get { return Globals.ThisAddIn.Application.ActiveSheet.Cells; } }
</code></pre>
</blockquote>

<p>Like this:</p>

<pre><code>private Worksheet Worksheet =&gt; Globals.ThisAddIn.Application.ActiveSheet;
private Range Cells =&gt; Globals.ThisAddIn.Application.ActiveSheet.Cells;
</code></pre>

<p>This is a serious problem:</p>

<blockquote>
<pre><code>// NOTE: Excel uses indexing that starts at 1
if (columnIndex == 0)
    columnIndex = 1;

if (rowIndex == 0)
    rowIndex = 1;
</code></pre>
</blockquote>

<p>Consider consistently using <code>{ }</code> braces to avoid such implicit scopes.</p>

<p>If the <code>columnIndex</code> or <code>rowIndex</code> supplied was <code>0</code>, then the calling code is off-by-one and this silent one-upping is literally <em>hiding</em> that bug, and there's a very very very high chance that the next call is going to pass a <code>1</code> that you're not going to offset, which will produce <em>a</em> result, but very unlikely the <em>expected</em> result.</p>

<p>Consider:</p>

<ul>
<li>Throwing an <code>ArgumentOutOfRangeException</code> given <code>0</code> for column or row index.</li>
<li>Adding XML docs to document that the index parameters are 1-based - OR document them as 0-based, and abstract away the fact that Excel's object model is 1-based by offsetting every provided value, not just <code>0</code>. In any case, you need XML docs to say this.</li>
</ul>

<hr>

<p>My experience with VSTO is that if you don't properly release <strong><em>all</em></strong> the COM objects you ever access, then when your program exits you'll be left with a ghost EXCEL.EXE process in Task Manager, because .NET will be holding on to RCW objects wrapping COM/unmanaged objects that won't be garbage-collected like managed objects would be.</p>

<p>Hence, avoid double-dots like this:</p>

<pre><code>Globals.ThisAddIn.Application.ActiveSheet
</code></pre>

<p>That's essentially leaking <code>ThisAddIn</code>, <code>Application</code>, and <code>ActiveSheet</code> objects.</p>

<p>Every single access to <code>Cells</code> is re-dereferencing the same <code>ActiveSheet</code> over and over and over, every time. That makes a lot of redundant member access.</p>

<pre><code>var addin = Globals.ThisAddIn;
var application = addin.Application;
var activeSheet = application.ActiveSheet;

var allCells = activeSheet.Cells;
var cell = allCells[columnIndex][rowIndex];
cell.Value = column.ColumnName;

var cellFont = cell.Font;
cellFont.Bold = true;
</code></pre>

<p>...and then each of these objects need to be released... in the reverse order they were accessed:</p>

<pre><code>Marshal.ReleaseCOMObject(cellFont);
Marshal.ReleaseCOMObject(cell);
Marshal.ReleaseCOMObject(allCells);
...
</code></pre>

<p>Miss one single COM object, and the EXCEL.EXE process won't be able to shut down correctly.</p>

<p>That makes it a pretty good reason to avoid writing to individual cells, ...regardless of the performance hit ;-)</p>
    </div>