<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Read <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> the Python style guide</p>

<p>Functions and variables should be <code>lower_snake_case</code></p></li>
<li><p>Naming</p>

<p>Single letter variable names are a bad habit. Code should be self explanatory and function names like <code>m()</code> don't tell what they are supposed to do</p></li>
<li><p>Instead of the <code>printPerson()</code> function, override the magic function <code>__str__</code></p>

<p>Doing this you can do <code>print(student)</code> to print the class</p></li>
<li><p>You should make the <code>avg</code> function a part of the <code>Student</code> class</p></li>
<li><p>Your grade function can be simplified</p>

<blockquote>
<pre><code> scoreList = [
   {'O': '90-100'},
   {'E': '80-89'},
   {'A': '70-79'},
   {'P': '55-69'},
   {'D': '40-54'},
   {'T': '0-39'},
]
</code></pre>
</blockquote>

<p>When you swap the key and values around, and loop over them in order</p>

<pre><code>self.score_dictionary = {
    90 : 'O',
    80 : 'E',
    70 : 'A',
    55 : 'P',
    40 : 'D',
    0  : 'T'
}
</code></pre>

<p>It becomes clear that if the average is higher than the value that should be the grade to give, else go to the next value</p>

<p>This will happen automatically with Python3.7+, or else you can make use of an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a></p>

<pre><code>from collections import OrderedDict
self.score_dictionary = OrderedDict([
    (90, 'O'),
    (80, 'E'),
    (70, 'A'),
    (55, 'P'),
    (40, 'D'),
    (0, 'T')
])
</code></pre>

<p>Thnx <a href="https://codereview.stackexchange.com/users/98493/graipher">@Graipher</a>, for correcting my mistake regarding the OrderedDict</p>

<p>Another way (which might be clearer) is to loop over the dictionary keys in sorted order</p></li>
<li><p>You can unpack multiple arguments in one go</p>

<blockquote>
<pre><code>line = input().split()
firstName = line[0]
lastName = line[1]
idNum = line[2]
</code></pre>
</blockquote>

<p>Could be </p>

<pre><code>f, l, i = input().split()
</code></pre></li>
<li><p>It is Python idion to use <code>_</code> for variables you don't use</p></li>
</ul>

<h1>Code</h1>

<pre><code>class Person:
    def __init__(self, first_name, last_name, id):
        self.first_name = first_name
        self.last_name = last_name
        self.id = id

    def __str__(self):
        return f"Name: {self.last_name}, {self.first_name}\nID: {self.id}"

class Student(Person):
    def __init__(self,  first_name, last_name, id, scores):
        super().__init__(first_name, last_name, id)
        self.scores = scores
        self.avg = sum(self.scores) / len(scores)
        self.score_dictionary = {
            90 : 'O',
            80 : 'E',
            70 : 'A',
            55 : 'P',
            40 : 'D',
            0  : 'T'
        }

    def grade(self):
        for score in sorted(self.score_dictionary.keys(), reverse=True):
            if self.avg &gt;= score:
                return self.score_dictionary[score]

if __name__ == '__main__':
    f, l, i = input().split()
    _ = input()
    scores = list(map(int, input().split()))
    student = Student(f, l, i, scores)
    print(student)
    print(f"Grade: {student.grade()}")
</code></pre>
    </div>