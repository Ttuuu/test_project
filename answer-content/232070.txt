<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><em>... about making this class based, but it really doesn't make sense to do
  it ...</em></p>
</blockquote>

<p>I'd not agree with that, because:</p>

<ul>
<li>same arguments <code>filename/f</code> and <code>line</code> are passed around across multiple functions</li>
<li>with custom class approach the <em>things</em> can be initialized/defined at once (on <em>class</em> definition or instantiation phase)</li>
<li>with OOP approach I'm confident that functions like <code>parse_time(line)</code> or <code>find_error(line, ...)</code> are not passed with undesirable or "tricky" <code>line</code> argument, as the line being currently read can be encapsulated.</li>
</ul>

<hr>

<p>List of issues (with support of OOP approach):</p>

<ul>
<li>pattern <code>date_regex = r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}'</code>. <br>Instead of generating regex pattern on each call of <code>parse_time</code> function - we'll just make it a class <strong><code>LogMonitor</code></strong> constant called <strong><code>DATE_REGEX</code></strong>. <br>Furthermore, we can precompile the regex pattern with <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.complie</code></a> function:</li>
</ul>

<blockquote>
  <p>using <code>re.compile()</code> and saving the resulting regular expression
  object for reuse is more efficient when the expression will be used
  several times in a single program</p>
</blockquote>

<pre><code>    DATE_REGEX = re.compile(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
</code></pre>

<ul>
<li><p><code>increase_base_time</code> function. <br><code>datetime.timedelta(minutes=1)</code> is easily extracted to another constant:</p>

<pre><code>INC_MINUTE = datetime.timedelta(minutes=1)
</code></pre></li>
<li><p><strong><code>find_error(line, base_time, line_time)</code></strong> function.<br>Besides of simplifying <code>ERROR</code> pattern search (as @Graipher mentioned) the function has another issue as it introduces an unnecessary coupling/dependency on two external identifiers <code>base_time</code> and <code>line_time</code> - whereas the sufficient function's responsibility is <em>"check if <code>ERROR</code> occurs within the current log line"</em> (returning boolean result)<br>That dependency should be eliminated. <br>To "beat" that, the crucial conditional within <code>monitor</code> function that calls the <code>find_error</code> function can be restructured to present a <em>natural</em> order of mutually <em>exclusive</em> conditions: </p>

<pre><code>    ...
    if line_time &gt; base_time:
        base_time = self.increase_base_time(line_time)
        count = 0
    elif self.find_error():
        count += 1
</code></pre></li>
</ul>

<hr>

<p>In below OOP implementation the input <em>filename</em> is passed at once to <code>LogMonitor</code> constructor as <code>LogMonitor(sys.argv[1])</code>, the functions are logically renamed, the needed state/behavior is encapsulated, the above mentioned OOP benefits/arguments included.</p>

<pre><code>import sys
import time
import datetime
import os
import re


class LogMonitor:
    DATE_REGEX = re.compile(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
    INC_MINUTE = datetime.timedelta(minutes=1)

    def __init__(self, filename):
        self._fname = filename
        self._log = self._read_log()    # generator
        self._curr_line = ''

    def _read_log(self):
        """Basically tail -f"""
        with open(self._fname) as logfile:
            logfile.seek(0, os.SEEK_END)
            while True:
                new_line = logfile.readline()
                if new_line:
                    self._curr_line = new_line
                    yield self._curr_line
                else:
                    time.sleep(0.1)

    def _has_error(self):
        """
        Search for ERROR keyword in log line. Returns boolean result"""
        return 'ERROR' in self._curr_line

    def _parse_datetime(self):
        """Parse string to datetime"""
        date_string = self.DATE_REGEX.search(self._curr_line).group(0)
        return datetime.datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")

    def increase_base_time(self, line_time):
        """Return a datetime that is line_time plus one minute"""
        return line_time + self.INC_MINUTE

    def run(self):
        """
        Read from a log file.
        For each line check if log line time is later than base comparison time.
        If so, update the base time and set error count to 0.
        Check for errors in line. Increment error count if any are found.
        Check the total error count. If it's greater than five, restart the logged
        process.
        Check if process has been restarted before. If so, kill the logged process.
        """
        count = 0
        base_time = datetime.datetime.min
        restarted = False

        for line in self._log:
            line_time = self._parse_datetime()
            if line_time &gt; base_time:
                base_time = self.increase_base_time(line_time)
                count = 0
            elif self._has_error():
                count += 1

            if count &gt;= 5:
                if restarted:
                    print("Kill the process")  # A placeholder, sorry
                else:
                    print("Restart the process")  # Also a placeholder, sorry
                    count = 0
                    restarted = True


if __name__ == "__main__":
    monitor = LogMonitor(sys.argv[1])
    monitor.run()
</code></pre>
    </div>