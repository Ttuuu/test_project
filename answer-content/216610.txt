<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yay! You ran <code>flake8</code> and followed PEP-8. Nice clean code.</p>

<pre><code>    self.assertEqual(state_machine.match('abc'), 'abc')
</code></pre>

<p>Ummm, this is arguably backwards.
Convention for xUnit in many languages is to <code>assertEqual(expected, computed)</code>.
It can affect how the diagnostic output is displayed for a failure.</p>

<pre><code>    state_machine = state_machine.union(StateMachine.from_string('def'))
</code></pre>

<p>Choosing the name <code>union</code> for your public API is perhaps slightly confusing.
"Union" is drawn from <a href="https://en.wikipedia.org/wiki/Set_theory" rel="nofollow noreferrer">set theory</a>,
while "alternation" is the term the regex literature tends to use for <code>|</code>.</p>

<pre><code>    state_machine = StateMachine.from_string('abc')
</code></pre>

<p>The class name is perfectly clear, it's great.
For a local variable that we'll be using a bunch, <code>sm</code> would have sufficed.
You already have a line that verifies that <code>.from_string()</code> doesn't blow up, so
consider combining two assignments on a single line:</p>

<pre><code>    sm = StateMachine.from_string('abc').kleene()
</code></pre>

<p>The <code>Regex</code> class is wonderfully straightforward.
Pat yourself on the back.</p>

<p>The <code>peek</code> method in the lexer is perhaps a little on the tricky side,
and would benefit from comments
about when we consume something or not.
I'm looking for invariants on <code>pos</code> and the <code>stack</code>.
I like the <code>assert</code> in <code>find_parent_of_terminal</code>, and its comment.</p>

<pre><code>        to_explore.update({node for node in current.children 
                           if node not in visited})
</code></pre>

<p>That's just <code>set</code> difference, yes? <code>children - visited</code></p>

<p>Overall, looks good. Ship it!</p>
    </div>