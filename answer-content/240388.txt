<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Solution suggested by @mypronounismonicareinstate.</p>

<p>The time save is a bit more than factor 100. The average calculation time was ~6s now it's ~50-60ms.</p>

<p>First of all using Sets instead of Lists. In terms of iterating and removing items, Sets are way more faster.</p>

<p>Second: Using SortedSet to save the check for the minimum f in OpenList. And use HashSet for closedList.</p>

<p>Im my original solution this took 2 times iterating the whole list.</p>

<p>Third: Not using System.Linq in Combination with Sets if you want to iterate.
System.Linq will always iterate through the whole set.</p>

<p>The final code:</p>

<pre><code>public static class AStar
    {
        protected class Location: IComparable&lt;Location&gt;
        {
            public Vector2i pos;
            public int f;
            public int g;
            public int h;
            public int weight;
            public Location parent;

            public Location(Vector2i pos)
            {
                this.pos = pos;
                f = 0;
                g = 0;
                h = 0;
                weight = 1;
                parent = null;
            }

            public override bool Equals(object obj)
            {
                Location other = obj as Location;
                return this.pos.X == other.pos.X &amp;&amp; this.pos.Y == other.pos.Y;
            }

            public int CompareTo([AllowNull] Location other)
            {
                if (this.Equals(other))
                {
                    return 0;
                }
                else if (other.f &lt; this.f)
                {
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
        }

        public static Path Search(Vector2i start, Vector2i target)
        {
            Location current = null;
            SortedSet&lt;Location&gt; openList = new SortedSet&lt;Location&gt;();
            HashSet&lt;Location&gt; closedList = new HashSet&lt;Location&gt;();
            Location targetLocation = new Location(target);
            openList.Add(new Location(start));
            while (openList.Any())
            {
                current = openList.First();
                closedList.Add(current);
                openList.Remove(current);
                if (current.Equals(targetLocation))
                {
                    return CreateResultPath(current);
                }
                List&lt;Location&gt; possibleNeighbors = GetPossibleNeighbors(current);
                foreach (Location neighbor in possibleNeighbors)
                {
                    // neighbor must not be in closedSet
                    if (!closedList.Contains(neighbor))                        
                    {
                        // calculating neighbor
                        neighbor.g = current.g + neighbor.weight;
                        neighbor.h = CalcDistance(neighbor.pos, target);
                        neighbor.f = neighbor.g + neighbor.h;
                        neighbor.parent = current;

                        openList.TryGetValue(neighbor, out Location oldNeighbor);
                        if (oldNeighbor == null)
                        {
                            openList.Add(neighbor);
                        }
                        // neighbor is already in openList, checking if this path is better
                        else
                        {
                            if (neighbor.g &lt; oldNeighbor.g)
                            {
                                openList.Remove(oldNeighbor);
                                openList.Add(neighbor);
                            }
                        }
                    }
                }
            }
            return null;
        }

        private static Path CreateResultPath(Location result)
        {
            List&lt;Vector2i&gt; resultPath = new List&lt;Vector2i&gt;();
            while (result != null)
            {
                resultPath.Add(result.pos);
                result = result.parent;
            }
            resultPath.Reverse();
            return new Path(resultPath.ToArray());
        }

        private static List&lt;Location&gt; GetPossibleNeighbors(Location current)
        {
            Vector2i currentPos = current.pos;
            List&lt;Location&gt; possibleNeighbors = new List&lt;Location&gt;();
            possibleNeighbors.Add(new Location(new Vector2i(currentPos.X - 1, currentPos.Y + 1)));
            possibleNeighbors.Add(new Location(new Vector2i(currentPos.X - 1, currentPos.Y - 1)));
            possibleNeighbors.Add(new Location(new Vector2i(currentPos.X - 1, currentPos.Y)));
            possibleNeighbors.Add(new Location(new Vector2i(currentPos.X, currentPos.Y + 1)));
            possibleNeighbors.Add(new Location(new Vector2i(currentPos.X, currentPos.Y - 1)));
            possibleNeighbors.Add(new Location(new Vector2i(currentPos.X + 1, currentPos.Y + 1)));
            possibleNeighbors.Add(new Location(new Vector2i(currentPos.X + 1, currentPos.Y - 1)));
            possibleNeighbors.Add(new Location(new Vector2i(currentPos.X + 1, currentPos.Y)));
            return possibleNeighbors;
        }

        // Chebyshev Distance
        private static int CalcDistance(Vector2i current, Vector2i target)
        {
            return Math.Max(Math.Abs(target.X - current.X), Math.Abs(target.Y - current.Y));
        }
    }
</code></pre>
    </div>