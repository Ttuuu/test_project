<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a good start!<br>
You do have a couple of bugs though.  Firstly, these two lines:</p>

<pre><code>        password[i] = symbols[rand() % 26];
</code></pre>

<p>and</p>

<pre><code>        password[i] = letter[rand() % 21];
</code></pre>

<p>seem to have their numbers mixed up - swap the <code>21</code> and <code>26</code> here.</p>

<p>Secondly, this line is bad practice.  It may work, but is not the 'right' way to do this.  My coding teacher would have had a hissy-fit if they'd seen this!  </p>

<pre><code>char password[n];
</code></pre>

<p>I was taught that variable declarations should pretty much always be right at the top of a function.  The 'right' way to deal with this is to simply declare a char pointer, and then use <code>malloc</code> to allocate the correct amount of memory to the string when you know it's size, and don't forget to free the memory when it's no longer being used.</p>

<pre><code>char *password = NULL;

printf("\nHow long password:");
scanf("%d", &amp;n);

password = (char *)malloc((n + 1) * sizeof(char));  /* String length +1 for NULL terminator */

...

free(password);
</code></pre>

<p>Thirdly, sanitize your inputs - always assume your end user is the world's biggest idiot, and when asked to enter <code>How long password:</code>, may just enter <code>twelve</code> as their answer, or even just <code>cabbage</code>.  A simple loop can do this, and a minor change to your prompt can help reduce invalid answers that crash your program:</p>

<pre><code>    do
    {
      printf("\nHow long password (8-32):");
      scanf("%d", &amp;n);
    } while ((n &lt; 8) || (n &gt; 32));

</code></pre>

<p>Fourthly, I would personally use <code>switch</code>/<code>case</code> rather than <code>if</code>/<code>else</code> <code>if</code>/<code>else</code>, but that is just a personal preference in this case.</p>

<p>Finally, I can only agree with everything in Edward's response.</p>

<p>Here is your code with the changes I'd make:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

#define ALPHA_SIZE 26
#define NUM_SIZE   10
#define SYM_SIZE   21

void main()
{
    int i, n;
    char *password = NULL;

    srand((unsigned int)(time(NULL)));

    do
    {
      printf("\nHow long password (8-32):");
      scanf("%d", &amp;n);
    } while ((n &lt; 8) || (n &gt; 32));

    password = (char *)malloc((n + 1) * (sizeof(char)));
    printf("%s", makePassword(password, n));

    free(password);
}

char *makePassword(char *pwd, int pwd_length)
{
    int i, randomizer;
    char numbers[] = "1234567890";
    char letter[]  = "abcdefghijklmnoqprstuvwyzx";
    char letterr[] = "ABCDEFGHIJKLMNOQPRSTUYWVZX";
    char symbols[] = "!@#$%^&amp;*(){}[]:&lt;&gt;?,./";

    for (i=0; i&lt;pwd_length; i++)
    {
        randomizer = rand() % 4;

        switch(randomizer)
        {
            case 0: pwd[i] = getPwdChar(numbers, NUM_SIZE);
            break;

            case 1: pwd[i] = getPwdChar(letter, ALPHA_SIZE);
            break;

            case 2: pwd[i] = getPwdChar(letterr, ALPHA_SIZE);
            break;

            case 3: pwd[i] = getPwdChar(symbols, SYM_SIZE);
            break;

            default: break;
        }
    }
    password[pwd_length] = NULL;

    return (pwd);
}

char getPwdChar(char *charlist, int len) 
{
  return (charlist[(rand() / (RAND_MAX / len))]);
}

</code></pre>
    </div>