<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>TL;DR:</strong></p>

<ul>
<li>use memoization to speed up calculations</li>
<li>if you drive for performance use <code>quot</code> instead of <code>div</code></li>
<li>if possible, try to define your sequences without complicated functions</li>
<li>use <code>even n</code> instead of <code>n `rem` 2 == 0</code> or <code>odd n</code> instead of <code>n `rem` 2 == 1</code></li>
</ul>

<h1>Type annotations and documentation</h1>

<p>You use both type annotations as well as documentation. Great. There are only two small drawbacks:</p>

<ol>
<li>The documentation strings sometimes miss highlighting, e.g. <code>[1, -1, 2, -2,...]</code> in <code>pentagonals</code>. Cross-references would also be great, e.g. <code>pentagonals</code> could point to <code>nthPentagonal</code> in its documentation.</li>
<li>Type annotations for <em>workers</em> (the local bindings) only contribute noise, as their type will be inferred by its surrounding function's types.</li>
</ol>

<p>For example</p>

<pre><code>integerStream :: [Integer]
integerStream = map integerOrdering [1 .. ]
    where
    integerOrdering :: Integer -&gt; Integer
    integerOrdering n
        | n `rem` 2 == 0 = (n `div` 2) * (-1)
        | otherwise = (n `div` 2) + 1
</code></pre>

<p>doesn't need the second type annotation:</p>

<pre><code>integerStream :: [Integer]
integerStream = map integerOrdering [1 .. ]
    where
    integerOrdering n
        | n `rem` 2 == 0 = (n `div` 2) * (-1)
        | otherwise = (n `div` 2) + 1
</code></pre>

<h1>Convey ideas in code as direct as possible</h1>

<p>Above, we use <code>n `rem` 2 == 0</code> to check whether a number is even. However, there is already a function for that: <code>even</code>. It immediately tells us the purpose of the expression, so let's use that:</p>

<pre><code>integerStream :: [Integer]
integerStream = map integerOrdering [1 .. ]
    where
    integerOrdering n
        | even n    = (n `div` 2) * (-1)
        | otherwise = (n `div` 2) + 1
</code></pre>

<h1>Use <code>quotRem</code> if you need both the result of <code>rem</code> and <code>quot</code></h1>

<p><code>integerStream</code> is a special case, though: as we need both the reminder as well as <code>div</code>'s result, we can use <code>divMod</code> or <code>quotRem</code>, e.g.</p>

<pre><code>integerStream :: [Integer]
integerStream = map integerOrdering [1 .. ]
    where
    integerOrdering n
        | r         = -q
        | otherwise = q + 1
       where
        (q, r) = n `quotRem` 2
</code></pre>

<h1>Use simpler code where applicable</h1>

<p>We stay at <code>integerStream</code>. As the documentation tells us, we want to have a bijection from the sequence of natural numbers to a sequence of all integers.</p>

<p>While the canonical mapping is indeed</p>

<p><span class="math-container">$$
f(n) = 
\begin{cases}
\frac{n-1}{2}+1&amp; \text{if } n \text{ is odd}\\
-\frac{n}{2}&amp; \text{otherwise}
\end{cases}
$$</span>
we don't need to use that definition in our code. Instead, we can use</p>

<p><span class="math-container">$$
n_1,-n_1,n_2,-n_2,\ldots.
$$</span></p>

<pre><code>integerStream :: [Integer]
integerStream = go 1
    where
      go n = n : -n : go (n + 1)
</code></pre>

<p>Or, if you don't want to write it explicitly</p>

<pre><code>integerStream :: [Integer]
integerStream = concatMap mirror [1..]
    where
      mirror n = [n, -n]
</code></pre>

<p>Both variants have the charm that no division is necessary in the computation of your list.</p>

<h2>Use <code>cycle</code> for repeating lists</h2>

<p>While the methods above arguably break down to personal preference, <code>additiveStream</code> can benefit from <code>cycle</code>:</p>

<pre><code>additiveStream :: [Integer]
additiveStream = cycle [1, 1, -1, -1]
</code></pre>

<h1>Generalize functions where applicable</h1>

<p><code>delta</code> can be written for <em>any</em>  type that is an instance of <code>Num</code> an <code>Eq</code>, so lets generalize:</p>

<pre><code>delta :: (Eq n, Num n) =&gt; n -&gt; n -&gt; n
delta n i
    | n == i    = n
    | otherwise = 0
</code></pre>
    </div>