<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function modifies the get/put position of the buffer.  I think this is a bug, and it makes benchmarks misleading.  Try calling <code>extract</code> twice in a row -- you'll get different results.  You set the put position after calling <code>sgetn</code> but you should have set the get position.  This should be intuitive.  After a read, you "undo" your reading.  Fix the bug with something like this:</p>

<pre><code>string extract() {
    streambuf&amp; buffer = *str_buffer.rdbuf();
    vector&lt;char&gt; sequence(str_buffer.tellp());
    auto g = str_buffer.tellg();
    buffer.sgetn(sequence.data(), str_buffer.tellp());
    str_buffer.seekg(g); // seekg to the original position
    // as far as I can work out, buffer.pubseekpos is not necessary here?
    return string(ALL(sequence));
}
</code></pre>

<p>Your function still does not compute the same thing as <code>str</code>.  <code>str</code> returns the entire buffer.  Your function returns from the input position to the output position.  These are different -- try calling <code>str_buffer.seekg(3)</code> before comparing the output of the two functions if you want to see for yourself.  You could <code>seekg(0)</code> before you call <code>sgetn</code>:</p>

<pre><code>    auto g = str_buffer.tellg();
    str_buffer.seekg(0);
    buffer.sgetn(sequence.data(), str_buffer.tellp());
    str_buffer.seekg(g);
</code></pre>

<p>I think this implementation is now correct enough to benchmark.  I tried the updated version vs <code>str</code> on <a href="http://quick-bench.com" rel="nofollow noreferrer">http://quick-bench.com</a>.  I used clang-9 and libstdc++(GNU).  I tried a <code>stringstream</code> with 1000 characters and also 10,000 characters.</p>

<p>This implementation is about 130 times slower than <code>str</code> with no optimizations and with -O1/Clang, and it is and 3.5 times slower with -O2/Clang.</p>

<hr>

<p>How can you speed up your function?  Well the easiest way is to use <code>str</code>!  But let's make some small improvements.  You copy the buffer into a <code>vector&lt;char&gt;</code> and then copy the vector into a string.  What if we only have one string?</p>

<pre><code>string extractOneString() {
    std::string sequence;
    sequence.resize(str_buffer.tellp());
    auto g = str_buffer.tellg();
    str_buffer.seekg(0);
    str_buffer.rdbuf()-&gt;sgetn(sequence.data(), str_buffer.tellp());
    str_buffer.seekg(g);
    return sequence;
}
</code></pre>

<p>Now the unoptimized version is 3.5 times slower -- just like the optimized version before.  As it turns out, the Clang's -O2 was already making this change for you.</p>

<p>Still, 3 times slower is not good.</p>

<p>This is maybe not obvious, but if you look at the assembly (perhaps using <a href="http://godbolt.org" rel="nofollow noreferrer">http://godbolt.org</a>), you'll notice that <code>resize</code> calls memset to set the new buffer to zero.  That's not necessary since you're about to overwrite the buffer anyway.  There's no easy way to get around this (unless you count using <code>str</code>).  I think this contributes to the 3x slowdown (not sure and I don't think it's worth confirming).</p>

<hr>

<p>A few notes about your code:</p>

<ol>
<li><p>Don't use <code>using namespace std</code>.  People have written about this in lots of places so I won't here.</p></li>
<li><p>The <code>ALL</code> macro is ugly and unnecessary.  If you cannot stand to write iterators, look into the new ranges library.</p></li>
</ol>

<hr>

<p>It's worth learning sooner rather than later not to spend time optimizing the wrong thing.  You wrote this code and then (I) measured it.  Next time, measure your code first and then decide whether it's worth changing.  This has the added advantage that you're already set up to measure the code post change.</p>

<p>I think it's also worth focusing on the basic semantics of your program before worrying too much about measured performance.  An experienced C++ dev would see right away that your <code>extract</code> function has a unnecessary copies and would most likely fix that before profiling.  Learning to avoid copies and other idioms will help you avoid having to measure every little thing.</p>
    </div>