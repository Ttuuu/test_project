<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>95 percent of programming is looking for redundancies and eliminating them.</p>

<p>For example, why do you bother with reading strings into <code>accusations[]</code> first, and then <em>later</em> copying them into <code>readable.murderer</code> et cetera? Why not just read them directly into <code>readable.murderer</code>? This would have the bonus of eliminating those "magic number" indices 0, 1, and 2, and replacing them with readable (no pun intended) identifiers.</p>

<pre><code>std::getline(is, readable.murderer, ',');
std::getline(is, readable.weapon, ',');
std::getline(is, readable.place, ',');  // shouldn't this last one be '\n' not ','?
</code></pre>

<p>You should test your code and see if it does what you wanted.</p>

<pre><code>std::istringstream iss(
    "Mr Green, lead pipe, conservatory\n"
    "Mrs Peacock, noose, kitchen"
);
accusation acc;
iss &gt;&gt; acc;
</code></pre>

<p>This reads 5 items into <code>accusation</code>. Is this what you wanted to happen?</p>

<hr>

<p>Reduce repetition. You have the following snippet repeated three times:</p>

<pre><code>    for (const auto&amp; THING : THINGS)
        if (accusation[INDEX] == THING)
        {
            valid = true;
            break;
        }
</code></pre>

<p>So, first of all, we wrap the loop body in curly braces to protect against <a href="https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/" rel="noreferrer">goto fail</a>; and then we factor it out into a function.</p>

<pre><code>template&lt;class T&gt;
bool vector_contains(const std::vector&lt;T&gt;&amp; vec, const T&amp; value) {
    for (auto&amp;&amp; elt : vec) {
        if (elt == value) {
            return true;
        }
    }
    return false;
}
</code></pre>

<p>And then our main function's code can become simply</p>

<pre><code>bool valid = vector_contains(clue::characters, readable.murderer)
          &amp;&amp; vector_contains(clue::weapons, readable.weapon)
          &amp;&amp; vector_contains(clue::places, readable.place);
if (!valid) {
    is.setstate(std::ios_base::failbit);
}
</code></pre>

<hr>

<p>The body of <code>vector_contains</code> could also be implemented simply by using an STL algorithm, e.g.</p>

<pre><code>template&lt;class T&gt;
bool vector_contains(const std::vector&lt;T&gt;&amp; vec, const T&amp; value) {
    return std::count(vec.begin(), vec.end(), value);
}
</code></pre>

<p>or</p>

<pre><code>template&lt;class T&gt;
bool vector_contains(const std::vector&lt;T&gt;&amp; vec, const T&amp; value) {
    return std::find(vec.begin(), vec.end(), value) != vec.end();
}
</code></pre>

<p>or</p>

<pre><code>template&lt;class T&gt;
bool vector_contains(const std::vector&lt;T&gt;&amp; vec, const T&amp; value) {
    return std::any_of(vec.begin(), vec.end(), [&amp;](const auto&amp; elt) {
        return elt == value;
    });
}
</code></pre>

<p>I named the function <code>vector_contains</code>, rather than simply <code>contains</code>, because in my estimation there is a very real possibility that C++2a might add <code>std::contains</code> to the library <a href="https://quuxplusone.github.io/blog/2018/06/17/std-size/" rel="noreferrer">and thus break any code using ADL calls to <code>contains</code>.</a></p>

<hr>

<p>Minor nits:</p>

<ul>
<li><p>I strongly recommend making all your constructors <code>explicit</code>, to eliminate bugs from unintentional implicit conversions. (Yes, even your multi-argument constructors.)</p></li>
<li><p>I strongly recommend making <code>operator&gt;&gt;</code> and <code>operator&lt;&lt;</code> into <em>inline</em> friend functions â€” define them right inside the body of your class. This will make them findable only via ADL, and is generally what you want. It'll look a lot more reasonable, too, once you've refactored your <code>operator&gt;&gt;</code> to be only five or six lines long! :)</p></li>
</ul>

<hr>

<p>You're also doing something weird with <code>stringstream</code> to remove whitespace from the ends of each piece of the string. You should factor that out into a helper function, and then simplify it. Say,</p>

<pre><code>std::string strip(const std::string&amp; s)
{
    int i = 0;
    while (isspace(s[i])) ++i;
    int j = s.size();
    while (j &gt;= 1 &amp;&amp; isspace(s[j-1])) --j;
    return s.substr(i, j-i);
}
</code></pre>

<p><a href="https://wandbox.org/permlink/uVSolN0Nepk48Mgm" rel="noreferrer">https://wandbox.org/permlink/uVSolN0Nepk48Mgm</a></p>

<pre><code>class accusation
{
private:
    std::string murderer;
    std::string weapon;
    std::string place;
public:
    accusation() = default;
    explicit accusation(std::string, std::string, std::string);
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const accusation&amp;);
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is, accusation&amp; a) {
        std::getline(is, a.murderer, ',');
        std::getline(is, a.weapon, ',');
        std::getline(is, a.place);
        if (!vector_contains(clue::characters, a.murderer) ||
            !vector_contains(clue::weapons, a.weapon) ||
            !vector_contains(clue::places, a.place)) {
            is.setstate(std::ios_base::failbit);
        }
        return is;
    }
};
</code></pre>

<p>Deciding whether your <code>std::transform</code> lowercasing should be removed, kept, or folded into the helper function <code>vector_contains</code> (renaming that function to indicate its new purpose, and using a non-mutating facility such as <code>strcasecmp</code>) is left as an exercise for the reader.</p>
    </div>