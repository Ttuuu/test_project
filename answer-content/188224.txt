<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should provide a (template) <code>class</code> to encapsulate the inner states (<code>head</code>, <code>tail</code>) of a linked list, instead of a bunch of <em>free functions</em> and the <code>Node</code> structure. Something like:</p>

<pre><code>template &lt;typename DataType&gt;
class LinkedList {
    // The Node doesn't need to be seen publicly
    struct Node {
        DataType data;
        Node *next;
    };

    Node* head;
    Node* tail;

public:
    LinkedList() : head(nullptr), tail(nullptr) {}
    Node* addEnd(DataType value);
    Node* addBeginning(DataType value);
    // ...
    void deleteSpecific(Node*);
};

template &lt;typename DataType&gt;
LinkedList&lt;DataType&gt;::Node* LinkedList::addEnd(DataType value) {
   // Implementation ...
}

template &lt;typename DataType&gt;
LinkedList&lt;DataType&gt;::Node* LinkedList::addBeginning(DataType value); {
   // Implementation ...
}

template &lt;typename DataType&gt;
void deleteSpecific(LinkedList&lt;DataType&gt;::Node* node) {
   // Implementation ...
}
</code></pre>

<p>Clients of the <code>LinkedList</code> class may use the <code>auto</code> keyword to keep variables of the private <code>LinkedList&lt;DataType&gt;::Node</code> structure:</p>

<pre><code>LinkedList&lt;int&gt; ll;
auto item1 = ll.addEnd(5);
auto item2 = ll.addBeginning(42);
ll.deleteSpecific(item1);
</code></pre>
    </div>