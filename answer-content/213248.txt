<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to continue expanding this game, you should consider moving the actors to classes. So you can have a <code>Unit</code> class, which is subclassed by both <code>Player</code> and <code>Goblin</code>:</p>

<p>First, the <code>Unit</code> class. A unit should have health, maximum health, attack and a name. It can attack other things, be attacked, display its status, be dead or alive and die:</p>

<pre><code>class Unit:
    def __init__(self, name, health, attack_die):
        self.name = name
        self.max_health = health
        self.health = health
        self.attack_damage = attack_die

    def __str__(self):
        return f"{self.name} ({self.health}/{self.max_health} HP, {self.attack_damage[0]}-{self.attack_damage[1]} ATK)"

    @property
    def alive(self):
        return self.health &gt; 0

    def attack(self, other):
        damage = random.randint(*self.attack_damage)
        other.being_attacked(damage)
        return damage

    def being_attacked(self, damage):
        self.health -= damage

    def die(self, from_what=None):
        if from_what is None:
            print(f"\nCongrats you slayed the {self.name}!")
        else:
            print(f"{self.name} was slayed by {from_what}!")
</code></pre>

<p>Now, the <code>Goblin</code> class just adds your flavor texts on top of that as well as setting the values fro health and attack:</p>

<pre><code>class Goblin(Unit):
    def __init__(self):
        super().__init__("Goblin", 5, (1, 3))

    def __str__(self):
        if self.health == self.max_health:
            return "\nA menacing goblin stands before you..."
        elif self.health &gt;= 0.5*self.max_health:
            return "\nThe goblin is looking a little tired, and is bleeding..."
        elif self.health &gt;= 0:
            return "\nThe goblin is bleeding horribly and looks enraged..."

    def attack(self, other):
        damage = super().attack(other)
        print(f"The goblin slashes you for {damage} damage, uh oh...")
</code></pre>

<p>And finally the <code>Player</code> class. It also mostly just adds nice prints:</p>

<pre><code>class Player(Unit):
    def __init__(self):
        super().__init__("Player", 5, (1, 3))

    def __str__(self):
        return f"You have {self.health} hit points."

    def attack(self, other):
        damage = super().attack(other)
        print(f"You deal a fierce blow for {damage} damage to the {other.name}.")

    def die(self, from_what):
        if isinstance(from_what, Unit):
            print(f"\nOh dear you have died horribly and the {from_what.name} cuts your head off for a trophy...")
        else:
            print(from_what)
</code></pre>

<p>Now most of the complicated stuff is abstracted away and actually running the game becomes quite minimal:</p>

<pre><code>def play_round(player, enemy):
    units = [player, enemy]
    while player.alive and enemy.alive:
        print(enemy)
        print(player)
        attack = input("Press enter to attack: ")
        if attack == '':
            random.shuffle(units)
            attacker, defender = units
            print(f"\nYou swing your sword fiercely at the {enemy.name}!")
            attacker.attack(defender)
        else:
            print("\nYou better do something...")
    if player.alive:
        enemy.die()
    else:
        player.die(enemy)


def play_game():
    again = True
    while again:
        play_round(Player(), Goblin())
        again = input("Play again? Y/N: ").lower() == "y"
    print("\nGoodbye")
    exit()

if __name__ == "__main__":
    play_game()
</code></pre>
    </div>