<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Small changes:</p>

<p>Cache the length, and set the invariants only once:</p>

<pre><code>    // Initialise opacity and position for child Elements of the
    // container div
    for (var i = 0, l = ch.length; i &lt; l; i++) {
        ch[i].style.opacity = 0;
        ch[i].style.position = "absolute";
        ch[i].style.top = "0px";
        ch[i].style.left = "0px";
    }

    // only first element is visible
    ch[0].style.opacity = 1;
</code></pre>

<p>Multiple coding idioms in the Cycle object:
clear <code>if...else</code> in <code>.next</code> changes to a ternary op and an invariant call to <code>.resetIndex</code> in <code>.previous</code>, and change to _resetIndex to handle negative movement.</p>

<pre><code>Cycle.prototype._resetIndex = function() {
    this.index = this.index % this.values.length;
};
Cycle.prototype.next = function() {
    if (this.index === null) {
        this.index = 0;
    }
    else {
        this.index += 1; 
        this._resetIndex();
    }
    return this.values[this.index]
};
Cycle.prototype.previous = function() {

    this.index = (this.index === null ? 0 : this.index) + (this.values.length - 1)
    this._resetIndex();
    return this.values[this.index];
};
</code></pre>

<p>change to (perhaps):</p>

<pre><code>Cycle.prototype._resetIndex = function() {
    this.index = (this.index + this.values.length) % this.values.length;
};

Cycle.prototype.next = function() {
    if (this.index === null) {
        this.index = 0;
    }
    else {
        this.index++;
        this._resetIndex();
    }
    return this.values[this.index]
};

Cycle.prototype.previous = function() {

    if (this.index === null) {
        this.index = (this.values.length - 1);
    }
    else {
        this.index--;
        this._resetIndex();
    }

    return this.values[this.index];
};
</code></pre>
    </div>