<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to optimize your code, optimize the algorithm first.</p>

<p>Thanks to <a href="https://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem" rel="nofollow noreferrer">Lagrange's four-square theorem</a>, you know you will need at most four squares of positive integers.</p>

<ul>
<li>You can pretend that the last number chosen will succeed.</li>
<li>You can impose that the next number chosen is not greater.</li>
<li>You can pretend that the next try will be no worse than the best to date.</li>
<li>If you get a solution fast, you can cull the search-space, so start at the big end.</li>
</ul>

<p>Every selection will be similar, though under potentially more severe constraints, so use recursion:</p>

<pre><code>def numSquaresImpl(n: int, upper: int, num: int) -&gt; int:
    upper = min(int(sqrt(n)) + 1, upper)
    while upper ** 2 &gt; n:
        upper = upper - 1
    if upper ** 2 == n:
        return 1
    if num &lt;= 2:
        return 2
    lower = max(0, int(sqrt(n // num)) - 1)
    while upper &gt;= lower:
        r = numSquaresImpl(n - upper ** 2, upper, num - 1) + 1
        upper = upper - 1
        if r &lt; num:
            if r == 2:
                return 2
            num = r
            lower = max(0, int(sqrt(n // num)) - 1)
    return num
def numSquares(n: int) -&gt; int:
    return numSquaresImpl(n, n, 4) if n &gt; 0 else 0
</code></pre>

<p><sub>Warning: I only proved this correct, I didn't run it. Also, I rarely do Python.</sub></p>

<p>As others already said, wrapping a pure function in a class without any good reason makes no sense.</p>
    </div>