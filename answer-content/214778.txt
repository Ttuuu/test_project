<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Over all, it's not bad.  Here are some things that may help you improve your program.</p>

<h2>Use const references where practical</h2>

<p>The <code>board</code> arguments for both the <code>CheckTicTacToeBoard()</code> and <code>winDetection()</code> functions could both actually be  <code>const std::string&amp;</code> instead of <code>std::string</code> with a small change to the code shown below.</p>

<h2>Make a single pass through the data where practical</h2>

<p>The current code makes three passes through the data just counting the number of X's and O's.  </p>

<pre><code>std::transform(board.begin(), board.end(), board.begin(), ::tolower);
size_t numberOfO = std::count(board.begin(), board.end(), 'o');
size_t numberOfX = std::count(board.begin(), board.end(), 'x');
</code></pre>

<p>I'd suggest instead that one can accomplish this in a single pass without needing to alter the passed <code>board</code>:</p>

<pre><code>size_t numberOfO{0};
size_t numberOfX{0};
for (auto ch : board) {
    switch (ch) {
        case 'O':
        case 'o':
            ++numberOfO;
            break;
        case 'X':
        case 'x':
            ++numberOfX;
            break;
        default:
            break;
    }
}
</code></pre>

<h2>Check the winning condition more thoroughly</h2>

<p>Once the counts have both been obtained, we can determine which player must have most recently played.  If <code>numberOfO == numberOfX</code>, then O just played, otherwise X did.  If the game is in a valid state, only the player that just played could possibly be the winner, which suggests that if O just played and X is the winner, the board is actually in an invalid state.</p>

<h2>Add a condition to the return</h2>

<p>There is one more condition that it would be useful to check for, which is a tie game.  Right now the routine just returns <code>NoWinner</code> which is technically correct, but if all the squares are filled and no further moves are possible, it would make more sense to specially identify and return that unique state.</p>

<h2>Use only necessary <code>#include</code>s</h2>

<p>The <code>#include &lt;vector&gt;</code> line is not necessary and can be safely removed.</p>

<h2>Eliminate the need for <code>&lt;cmath&gt;</code></h2>

<p>The only reason that <code>&lt;cmath&gt;</code> is needed is the use of <code>std::sqrt</code> but I'd suggest that it would be better to instead define the constants like this:</p>

<pre><code>static constexpr int kBoardLength = 3;
static constexpr int kBoardSize = kBoardLength * kBoardLength;
</code></pre>

<p>The use of <code>constexpr</code> can allow the compiler to make even better optimizations that would be available with <code>const int</code> and the use of <code>static</code> tells the compiler that the constant is local to this file.  Also the way this is constructed, the board is always square which might not be the case otherwise.</p>

<h2>Consider an alternate strategy</h2>

<p>Another possible way to do this would be to minimize the number of iterations throught the data structure, keeping track of which wins are possible and which are not.  Here's one way that might be written:</p>

<pre><code>#include "TicTacToe.h"
#include &lt;string&gt;

static constexpr int kBoardLength = 3;
static constexpr int kBoardSize = kBoardLength * kBoardLength;

enum class Token { isX, isO, isEmpty };

static Token classify(char square) {
    switch (square) {
        case 'O':
        case 'o':
            return Token::isO;
            break;
        case 'X':
        case 'x':
            return Token::isX;
            break;
    }
    return Token::isEmpty;
}

TicTacToeState CheckTicTacToeBoard(const std::string&amp; board) {
  if (board.size() != kBoardSize) {
    return TicTacToeState::InvalidInput;
  }
  auto state{TicTacToeState::NoWinner};
  size_t numberOfO{0};
  size_t numberOfX{0};
  for (std::size_t i{0}; i &lt; kBoardLength; ++i) {
      bool orow{classify(board[i * kBoardLength]) == Token::isO};
      if (orow) {
          ++numberOfO;
      }
      bool ocol{classify(board[i]) == Token::isO};
      bool xrow{classify(board[i * kBoardLength]) == Token::isX};
      if (xrow) {
          ++numberOfX;
      }
      bool xcol{classify(board[i]) == Token::isX};
      bool odiag{i==0 &amp;&amp; classify(board[0]) == Token::isO};
      bool orevdiag{i==0 &amp;&amp; classify(board[kBoardLength - 1]) == Token::isO};
      bool xdiag{i==0 &amp;&amp; classify(board[0]) == Token::isX};
      bool xrevdiag{i==0 &amp;&amp; classify(board[kBoardLength - 1]) == Token::isX};
      for (std::size_t j{1}; j &lt; kBoardLength; ++j) {
          switch(classify(board[i * kBoardLength + j])) {
              case Token::isO:
                  xrow = false;
                  ++numberOfO;
                  break;
              case Token::isX:
                  orow = false;
                  ++numberOfX;
                  break;
              default:
                  xrow = false;
                  orow = false;
          }
          switch(classify(board[i + j * kBoardLength])) {
              case Token::isO:
                  xcol = false;
                  break;
              case Token::isEmpty:
                  xcol = false;
              case Token::isX:
                  ocol = false;
                  break;
          }
          if (i==0) {
              switch(classify(board[j + j * kBoardLength])) {
                  case Token::isO:
                      xdiag = false;
                      break;
                  case Token::isEmpty:
                      xdiag = false;
                  case Token::isX:
                      odiag = false;
                      break;
              }
              switch(classify(board[j * kBoardLength + kBoardLength - j - 1])) {
                  case Token::isO:
                      xrevdiag = false;
                      break;
                  case Token::isEmpty:
                      xrevdiag = false;
                  case Token::isX:
                      orevdiag = false;
                      break;
              }
          }
      }
      if (orow || ocol || odiag || orevdiag) {
          if (state == TicTacToeState::Xwins) {
            return TicTacToeState::UnreachableState;
          }
          state = TicTacToeState::Owins;
      }
      if (xrow || xcol || xdiag || xrevdiag) {
          if (state == TicTacToeState::Owins) {
            return TicTacToeState::UnreachableState;
          }
          state = TicTacToeState::Xwins;
      }
  }
  if ((numberOfO == numberOfX &amp;&amp; state == TicTacToeState::Xwins) ||
      (numberOfO + 1 == numberOfX &amp;&amp; state == TicTacToeState::Owins) || 
      (numberOfX - numberOfO &gt; 1) 
      ) {
    return TicTacToeState::UnreachableState;
  }
  if (numberOfX + numberOfO == kBoardSize &amp;&amp; state == TicTacToeState::NoWinner) {
      state = TicTacToeState::TieGame;
  }
  return state;
}
</code></pre>

<h2>Write a test harness</h2>

<p>Writing a test harness is a good way to test the code and to provide for reviewers of your code because it shows which things you've considered and also provides an example of how you expect the code to be used.  Here's the test harness I wrote for the version of the code shown above:</p>

<pre><code>#include "TicTacToe.h"
#include &lt;iostream&gt;

std::ostream&amp; operator&lt;&lt;(std::ostream &amp;out, const TicTacToeState&amp; state) {
    switch (state) {
        case UnreachableState:
            out &lt;&lt; "Unreachable";
            break;
        case Xwins:
            out &lt;&lt; "X wins";
            break;
        case Owins:
            out &lt;&lt; "O wins";
            break;
        case NoWinner:
            out &lt;&lt; "no winner";
            break;
        case InvalidInput:
            out &lt;&lt; "invalid input";
            break;
        case TieGame:
            out &lt;&lt; "Tie Game";
            break;
        default:
            out &lt;&lt; "I don't even know what this is?!";
            break;
    }
    return out;
}

struct Test {
    const char *s;
    TicTacToeState result;
};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Test&amp; t) {
    auto result{CheckTicTacToeBoard(t.s)};
    if (result == t.result) {
        return out &lt;&lt; "OK  " &lt;&lt; t.s &lt;&lt; " ==&gt; " &lt;&lt; result;
    } 
    return out &lt;&lt; "bad  " &lt;&lt; t.s &lt;&lt; " ==&gt; " &lt;&lt; result &lt;&lt; ", expected " &lt;&lt; t.result;
}

int main(int argc, char *argv[]) {
    Test tests[]{
        {"012345678", NoWinner},
        {"0123456789", InvalidInput},
        {"", InvalidInput},
        {"xXx345678", UnreachableState},
        {"xXxo4o67o", UnreachableState},
        {"ooox4x6xx", UnreachableState},
        {"xoxoxxoxo", TieGame},
        {"x...x...x", UnreachableState},
        {"xo..xo.ox", UnreachableState},  // diagonal
        {".ox.xoxo.", UnreachableState},  // reverse diagonal
        {"xo..xo..x", Xwins},  // diagonal
        {".ox.xox..", Xwins},  // reverse diagonal
        {"ox..ox.xo", Owins},  // diagonal
        {".xo.oxox.", Owins},  // reverse diagonal
        {"ox..ox..o", UnreachableState},  // diagonal
        {".xo.oxo..", UnreachableState},  // reverse diagonal
        {".o.......", UnreachableState}, 
        {".x.......", NoWinner}, 
        {"xxx...ooo", UnreachableState}, 
        {"xx....ooo", UnreachableState}, 
        {"xxx...oo.", Xwins}, // row
        {"..x..xoox", Xwins},  // col
    };
    for (const auto &amp;t : tests) {
        std::cout &lt;&lt; t &lt;&lt; '\n';
    }
}
</code></pre>
    </div>