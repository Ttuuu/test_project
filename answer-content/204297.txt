<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, many thanks for your reply. It has brought many interesting information to my attention resulting in an increased quality of the project.
</p><hr>
To start with, I must say there were few mistakes in a code resulting in an improper functionality. All the calls without a stated <code>output_currency</code> should have given a different output, the problem was in a wrong indentation of the last line of a code snippet below (it was on the same level as the second-to-last line and therefore always being rewritten instead of added):<br>
<code>service.py, create_json</code>:

<pre><code>..
output_currencies = output_currency.split(",")
    for curr in output_currencies:
        if curr != input_currency:
            if "output" not in dict:
                dict["output"] = {}
            dict["output"].update({curr: convert(input_currency, curr, amount)})
..
</code></pre>

<p></p><hr>
To continue, here is an updated version of <code>README.md</code>:

<blockquote>
  <h1>Currency Converter</h1>
  
  <p>A practical task for a position of Junior Python Developer. Task entry:
  <a href="https://gist.github.com/MichalCab/c1dce3149d5131d89c5bbddbc602777c" rel="nofollow noreferrer">https://gist.github.com/MichalCab/c1dce3149d5131d89c5bbddbc602777c</a></p>
  
  <h2>Prerequisites</h2>
  
  <p>python 3.4</p>
  
  <h2>Requirements</h2>
  
  <p>Required libraries can be found in <code>requirements.txt</code> and installed via <code>pip3 install -r requirements.txt</code></p>
  
  <h2>Run application</h2>
  
  <p>Run a <code>__main__.py</code> file, either in pyapi or pycli folder depending on a desired form of usage.</p>
  
  <h2>Parameters</h2>
  
  <ul>
  <li><code>amount</code> - amount which we want to convert - float</li>
  <li><code>input_currency</code> - input currency - 3 letters name or currency symbol</li>
  <li><code>output_currency</code> - requested/output currency - 3 letters name or currency symbol</li>
  </ul>
  
  <p>Note that a single currency symbol can represent several currencies:<br>
  - in case this happens with <code>output_currency</code>, convert to all known currencies with such symbol<br>
  - in case this happens with <code>input_currency</code>, conversion is not performer. Rather, an info message with currencies having such symbol
  is shown, so a user can specify <code>input_currency</code> more precisely</p>
  
  <h2>Output Possibilities:</h2>
  
  <ul>
  <li>json with a following structure:</li>
  </ul>
  
  <p>Single input and output currency: <code>{
      "input": {
          "amount": &lt;float&gt;,
          "currency": &lt;3 letter currency code&gt;
      }
      "output": {
          &lt;3 letter currency code&gt;: &lt;float&gt;
      } }</code></p>
  
  <p>Single input and multiple output currencies (in case a currency sign
  represents more currencies): <code>{
      "input": {
          "amount": &lt;float&gt;,
          "currency": &lt;3 letter currency code&gt;
      }
      "output": {
          &lt;corresponding 3 letter currency code&gt;: &lt;float&gt;
          &lt;corresponding 3 letter currency code&gt;: &lt;float&gt;
          .
          .
      } }</code></p>
  
  <p>Single input and no output currency - convert to all known currencies:
  <code>{
      "input": {
          "amount": &lt;float&gt;,
          "currency": &lt;3 letter currency code&gt;
      }
      "output": {
          &lt;3 letter currency code&gt;: &lt;float&gt;
          &lt;3 letter currency code&gt;: &lt;float&gt;
          &lt;3 letter currency code&gt;: &lt;float&gt;
          .
          .
      } }</code></p>
  
  <ul>
  <li>Info message:</li>
  </ul>
  
  <p>Multiple input currencies (in case a currency sign represents more
  currencies):<br>
  <code>"Input currency not clearly defined. Possible currencies with such symbol: &lt;possible currencies&gt;"</code></p>
  
  <p>Unknown input currency: <code>"Input currency not recognized"</code></p>
  
  <p>Unknown output currency: <code>"Output currency not recognized"</code></p>
  
  <h2>Examples</h2>
  
  <h3>CLI</h3>
  
  <p><code>./currency_converter.py --amount 100.0 --input_currency EUR --output_currency CZK 
  {
       "input": {
          "amount": 100.0,
          "currency": "EUR"
      },
      "output": {
          "CZK": 2561.78
      } 
  }</code></p>
  
  <p><code>./currency_converter.py --amount 0.9 --input_currency € --output_currency AUD 
  {
      "input": {
          "amount": 0.9,
          "currency": "EUR"
      },
      "output": {
          "AUD": 1.46
      } 
  }</code></p>
  
  <p><code>./currency_converter.py --amount 10.92 --input_currency zł 
  {
      "input": {
          "amount": 10.92,
          "currency": "PLN"
      },
      "output": {
          "HRK": 18.84,
          "UZS": 24006.34,
          "RUB": 196.93,
          "BOB": 20.64,
          .
          .
          .
      } 
  }</code></p>
  
  <p><code>./currency_converter.py --amount 10.92 --input_currency EUR --output_currency £ 
  {
      "input": {
          "amount": 10.92,
          "currency": "EUR"
      },
      "output": {
          "GBP": 9.79,
          "FKP": 9.77,
          "LBP": 19462.11,
          "SHP": 16.97,
          "SYP": 6617.36,
          "EGP": 230.18,
          "GIP": 9.77
      }<br>
  }</code></p>
  
  <p><code>./currency_converter.py --amount 10.92 --input_currency Nonsense_curr 
  Input currency not recognized</code></p>
  
  <h3>API</h3>
  
  <p>Note: When using curl, currencies symbols are not decoded properly and
  therefore not recognised. A recommended tool is Postman.</p>
  
  <p><code>GET
  /currency_converter?amount=4.5&amp;input_currency=₱&amp;output_currency=VEF
  HTTP/1.1 
  {
      "input": {
          "amount": 4.5,
          "currency": "PHP"
      },
      "output": {
          "VEF": 20633.77
      } 
  }</code></p>
  
  <p><code>GET /currency_converter?amount=10.92&amp;input_currency=£ HTTP/1.1
  Input currency not clearly defined. Possible currencies with such
  symbol: SHP,FKP,EGP,LBP,SYP,GIP,GBP</code></p>
  
  <p><code>GET /currency_converter?amount=10.92&amp;input_currency=₦ HTTP/1.1 
  {
      "input": {
          "amount": 10.92,
          "currency": "NGN"
      },
      "output": {
          "HRK": 0.19,
          "UZS": 241.47,
          "RUB": 1.98,
          "BOB": 0.21,
          "TZS": 68.63,
          "GBP": 0.02,
          "GIP": 0.02,
          "GTQ": 0.23,
          .
          .
          .
          } 
  }</code></p>
</blockquote>

<hr>

<p>Now, you mentioned "this isn't production quality code: There are no error checks or fallbacks. If an expected argument is missing e.g. the HTTP API crashes". These are the measures I came up with:
<code>pyapi/__main__.py</code>:<br>
(simple check if arguments are present)</p>

<pre><code>def get():
    if 'amount' in request.args and 'input_currency' in request.args:
        if 'output_currency' in request.args:
            return service.create_json(service.sign_to_abbreviation(request.args['input_currency']),
                                       service.sign_to_abbreviation(request.args['output_currency']),
                                       request.args['amount'])
        else:
            return service.create_json(service.sign_to_abbreviation(request.args['input_currency']),
                                       "None",
                                       request.args['amount'])
    return "Missing arguments"
</code></pre>

<p><code>service.py, contact_api</code>:<br>
(exception if external site is unreachable (+logging of a time needed for a request))</p>

<pre><code># external converter service
def contact_api(inp, out):
    logging.info(" FUNC: contact_api parameters: inp:%s out:%s", inp, out)
    api_url_base = 'http://free.currencyconverterapi.com/api/v5/convert'
    conversion = inp + "_" + out
    payload = {"q": conversion, "compact": "ultra"}
    try:
        start_time = time.time()
        response = requests.get(api_url_base, params=payload, timeout=1)  # we have 1 sec to get a response
        logging.info(" FUNC: contact_api request elapsed time: %s", time.time() - start_time)
    except requests.exceptions.ConnectionError as e:
        logging.error(" FUNC: contact_api CONNECTION ERROR: ", e)
        return None

    logging.info(" FUNC: contact_api Loading from CACHE: %s", response.from_cache)
    if response.status_code == 200:
        return json.loads(response.content.decode('utf-8'))
    return None
</code></pre>

<p>I consider this to be simple and functional, could it be done better?
</p><hr>
And to finish with, tests could get improved too but that is for another day.
And for a reply to be complete, here is a link to the project: <a href="https://github.com/ciso112/kiwi-currencies" rel="nofollow noreferrer">https://github.com/ciso112/kiwi-currencies</a>
    </div>