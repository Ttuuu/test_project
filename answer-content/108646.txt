<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public class Odd implements Runnable{

private Monitor sharedObject;

public Odd(Monitor monitor){
    this.sharedObject = monitor;
}
</code></pre>

<p>You implemented the class as a <code>Runnable</code> - great first step.  You are injecting the shared <code>Monitor</code> in the constructor, which is good; the member variable should be final though -- you aren't intending to change it after initialization.  Also, it should be named "monitor".</p>

<pre><code>@Override
public void run() {

    try {
        printOdd();
    } catch (InterruptedException e) {          
        e.printStackTrace();
    }
}
</code></pre>

<p>If you are trying to learn about using multiple threads, one of the things you <em>must</em> come to understand is what <code>InterupptedException</code> means.  In particular, <code>printStackTrace</code> isn't likely to tell you anything interesting (yup, the exception was thrown by <code>sharedObject.await()</code>), and if you are going to catch the exception, you must reset the interrupt flag so that the function that called you can know that cancellation is in progress.</p>

<pre><code>private void printOdd() throws InterruptedException {
    synchronized(sharedObject){
        for(int i=1; i&lt; 10; i++){
            if(i%2!=0){
                while(!sharedObject.isOdd()){
                    sharedObject.wait();
                }
                System.out.println("Odd: "+ i);
                sharedObject.setOdd(false);
                sharedObject.notifyAll();
            }
        }
    }
}
</code></pre>

<p>You are testing your condition in a <code>while()</code> loop -- good job, that's really important.  You are also notifying all threads that are blocked on the <code>sharedObject</code>, which is another Good Thing.</p>

<p>There's a generalization to your code that might be appropriate to make explicit:</p>

<pre><code>for(int i=1; i&lt; 10; i++){
    if(i%2!=0){
        ...
    }
}
</code></pre>

<p>The for loop is... well, here's the thing.  The threads are supposed to be taking turns counting the same numbers, right?  That is more clearly expressed in the code by having the two threads share a data structure</p>

<pre><code>for(int i : this.numbersToCount){
</code></pre>

<p>Where possible, you should use functions to clarify the intent of complex boolean expressions:</p>

<pre><code>if( isOdd(i))
</code></pre>

<p>The big problem I see is that you then duplicate all of your code to create <code>Even</code>.  Something has gone very badly wrong.  Let's generalize your loop, by replacing the thread mechanics with functions that express your intent.</p>

<pre><code>synchronized(sharedObject){
    while(this.notFinished()) {
        this.waitForMyTurn();
        this.takeMyTurn();
        this.endMyTurn();
    }
}
</code></pre>

<p>Notice what this exposes - the monitor isn't "even or odd", it's a entity that is responsible for coordinating the activity of the two threads.  You've modeled its internals as true / false, but that's wrong -- it's really two different <em>states</em> that flip back and forth.</p>

<pre><code>public class Monitor {

    private volatile State currentState;
    private final EnumMap&lt;State,State&gt; transitions;

    public boolean isInState(State state) {
       return currentState.equals(state);
    }

    public void changeState() {
        currentState = transitions.get(currentState);
    }

    public enum State {
        Odd, Even
    }    
}
</code></pre>

<p>Or better:</p>

<pre><code>public class Monitor&lt;State&gt; {

    private volatile State currentState;
    private final Map&lt;State,State&gt; transitions;

    public boolean isInState(State state) {
       return currentState.equals(state);
    }

    public void changeState() {
        currentState = transitions.get(currentState);
    }   
}
</code></pre>

<p>If you imagine something like</p>

<pre><code>interface Task {
    boolean isFinished();
    void doNext();
}
</code></pre>

<p>Then it should be clear that your current Even and Odd are both instances of the same class, with a different <code>State</code> and a different <code>Task</code>, which might look like</p>

<pre><code>class CountingTask implements Task {
    private final int [] numbersToCount;
    private int nowAt;

    CountingTask(int [] numbersToCount, int startAt) {
        ...
    }

    boolean isFinished () {
        return nowAt &gt;= numbersToCount.length;
    }

    void doTask () {
        System.out.println(numbersToCount[nowAt]);
        nowAt += 2;
    }
}
</code></pre>
    </div>