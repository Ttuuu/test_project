<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<p>Since you never reassign <code>animals</code>, better to declare it with <code>const</code>. (On a similar note, don't mix <code>let</code> and <code>var</code> - <code>var</code> has too many gotchas, and <code>let</code> permits reassignment, which is more difficult for a reader of the code to parse than <code>const</code>. Always prefer <code>const</code>.)</p>

<p>You never declare the <code>people</code> variable. This will throw an error in strict mode, and in sloppy mode, will implicitly create a variable on the global object, even if the whole script is inside its own function. Best to always declare variables before using them. Since the <code>kokoarray</code> is the same as <code>people</code>, it'll be easier to just use <em>one</em> of those variables, no need for two identical ones which refer to the same array.</p>

<p>Regarding your <code>myFunction</code>, <a href="https://stackoverflow.com/a/59539045">don't use inline handlers</a>, they have way too many problems to be worth using in modern scripts; use <code>addEventListener</code> instead:</p>

<pre><code>document.querySelector('button').addEventListener('click', () =&gt; {
  paivitys(animals, animalCols)
});
</code></pre>

<p>Rather than selecting elements over and over, it would be more elegant to select the elements you need <em>once</em>, then reference those variables rather than calling <code>querySelector</code> again. It's less repetitive and less expensive.</p>

<p>Numeric-indexed IDs are a code smell. IDs should be reserved for elements which are <em>completely unique</em> in the document. If you want to indicate that an element fulfills a particular role that other elements have as well, use a class or a data attribute instead.</p>

<p>Your <code>&lt;tbody&gt;</code> is missing a child <code>&lt;tr&gt;</code> - both <code>&lt;td&gt;</code>s and <code>&lt;th&gt;</code>s should only be children of <code>&lt;tr&gt;</code>s. Also, <code>&lt;th&gt;</code>s should be reserved for <em>table headers</em>. For plain data (like in your body), it'd be more semantically appropriate to use <code>td</code>s. If you want to make them bold, use CSS for that.</p>

<pre><code>&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>

<p>Rather than having <code>animal</code> and <code>animal2</code> and <code>person</code> and <code>person2</code>, it'd be a lot simpler to combine all of those properties into a single array property, perhaps call it <code>names</code>. Rather than having multiple entirely separate data structures, it'll be far easier to parse it if they have the same format. One option is:</p>

<pre><code>const animalData = {
  cols: ['Animal', 'Animal 2'],
  items: [{
    names: ['tiger', 'lion'],
    id: "54321",
  }]
};
const people = {
  cols: ['Person', 'Person 2'],
  items: [{
      names: ['kaka', 'julle'],
      id: "9874",
    },
    {
      names: ['Ronaldo', 'jussi'],
      id: "65555",
    }
  ]
};
</code></pre>

<p>This way, to reference the first (only) animal, use <code>animalData.items[0]</code>. To reference the <code>i</code>th person, reference <code>people.items[i]</code>. Populating the table gets much easier now:</p>

<pre><code>const headTR = document.querySelector('thead tr');
const bodyTR = document.querySelector('tbody tr');
function display(cols, item) {
  headTR.children[0].textContent = cols[0];
  headTR.children[1].textContent = cols[1];
  bodyTR.children[0].textContent = item.names[0];
  bodyTR.children[1].textContent = item.names[1];
  bodyTR.children[2].textContent = item.id;
}
</code></pre>

<p>Remember to use <code>textContent</code> when inserting text - using <code>innerHTML</code> when you're not <em>deliberately</em> inserting HTML markup makes things slower and can be a security hazard if the input isn't trustworthy.</p>

<p>To identify which person item should be displayed when the <code>select</code> changes, you can set the value of each <code>&lt;option&gt;</code> to its current index, eg:</p>

<pre><code>&lt;select&gt;
  &lt;option value="0"&gt;kaka 9874&lt;/option&gt;
  &lt;option value="1"&gt;Ronaldo 65555&lt;/option&gt;
&lt;/select&gt;
</code></pre>

<p>Then, when the select changes, just pass <code>people.items[select.value]</code> to the function that populates the table, rather than having to <code>.find</code>.</p>

<p>You can construct the <code>options</code> much more concisely, like the following:</p>

<pre><code>people.items.forEach((item, i) =&gt; {
  const option = select.appendChild(document.createElement('option'));
  option.textContent = `${item.names[0]} ${item.id}`;
  option.value = i;
});
</code></pre>

<p>Put all these together, and you get:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const animalData = {
  cols: ['Animal', 'Animal 2'],
  items: [{
    names: ['tiger', 'lion'],
    id: "54321",
  }]
};
const people = {
  cols: ['Person', 'Person 2'],
  items: [{
      names: ['kaka', 'julle'],
      id: "9874",
    },
    {
      names: ['Ronaldo', 'jussi'],
      id: "65555",
    }
  ]
};

const headTR = document.querySelector('thead tr');
const bodyTR = document.querySelector('tbody tr');
function display(cols, item) {
  headTR.children[0].textContent = cols[0];
  headTR.children[1].textContent = cols[1];
  bodyTR.children[0].textContent = item.names[0];
  bodyTR.children[1].textContent = item.names[1];
  bodyTR.children[2].textContent = item.id;
}

display(animalData.cols, animalData.items[0]);
document.querySelector('button').addEventListener('click', () =&gt; {
  display(animalData.cols, animalData.items[0])
});

const select = document.querySelector("select");
select.addEventListener("change", function(event) {
  display(people.cols, people.items[select.value]);
});
people.items.forEach((item, i) =&gt; {
  const option = select.appendChild(document.createElement('option'));
  option.textContent = `${item.names[0]} ${item.id}`;
  option.value = i;
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"&gt;
&lt;link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous"&gt;
&lt;div class=""&gt;
  &lt;table class="table"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th class="table-success"&gt;Animal&lt;/th&gt;
        &lt;th id="2name1" class="table-success"&gt;Animal&lt;/th&gt;
        &lt;th class="table-success"&gt;id&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td id="1name"&gt;&lt;/td&gt;
        &lt;td id="2name"&gt;&lt;/td&gt;
        &lt;td id="id"&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;select&gt;&lt;/select&gt;
  &lt;button&gt;backtozero&lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>