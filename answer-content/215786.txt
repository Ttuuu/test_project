<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm also huge fan of recursion, and the best book on recursion I know is "Little Schemer". I highly recommend it! It looks "slow" and repetitive, but that's how you learn (at least this approach was great for me).</p>

<p>In my opinion it's hard to read code when you find pattern you didn't knew before. It takes a lot of time and is highly frustrating to figure out what's happening inside, and often you still don't fully get why it was written this way (and if it's even correct). So the best advise I can give is - learn how to write code, reading will come naturally. You know what you are looking for.</p>

<p>In recursion, most important part is - when to stop and what to do (return) in that case.</p>

<p>Your <code>mystery</code> function stops when:</p>

<ul>
<li><code>y</code> is nil (it returns nil) - first <code>if</code>
or</li>
<li>first element of <code>y</code> is <code>eql</code> to <code>x</code> (it returns <code>0</code>) - second <code>if</code></li>
</ul>

<p>It will also return logical "something <code>and</code> something" - the last line - but we will talk about it later.</p>

<p>From the above, we know that:</p>

<ul>
<li><code>y</code> should be some list, since it's user with <code>car</code> and <code>cdr</code> functions, and tested for empty list (<code>null y</code>)</li>
<li><code>x</code> should be some atom, simple one, since it's compared to every element of <code>y</code> list with <code>eql</code>, which works fine with things like symbols and numbers, but not more complicated things like strings or lists</li>
</ul>

<p>OK, we know what to pass to <code>mystery</code> functions (roughly). Now - what this last part with <code>let</code> and <code>and</code> do? Apparently <code>let</code> is used here to store result of recursive call only to speed thing up. It could also be written as:</p>

<pre><code>(and (mystery x (cdr y))
     (1+ (mystery x (cdr y))))
</code></pre>

<p>We know what <code>mystery</code> function can return: <code>nil</code> or <code>0</code>. Last thing to do is to analyse what <code>and</code> can return:</p>

<ul>
<li>first argument if it evaluates to <code>false</code></li>
<li>second argument otherwise.</li>
</ul>

<p>As you can see there is no magical trick to help reading code. When you use some pattern (recursion in this case) long enough, you learn what are the important things to look for, and what are just common construction parts.</p>

<p>When you have some idea how function works, you can call it with some parameters just to verify your understanding, but I don't think you should begin with that. Pan and paper method can be a lot better, especially when you start with simple cases, like what will happen if I pass an empty list and empty list? Or zero and one element list? Calling function you don't know and observing results is called "black box testing" and is more hackerish activity. You have all the information you need - code of the function - so it's easier to read and reason about its behaviour.</p>

<p>When you stuck and don't know how to proceed, try to reformat the code. Rewrite the parts you understand. It might look silly and like wasting your time, but I find it helpfull.</p>

<p>If something is not clear, I'm happy to expand my answer, just post a comment :)</p>
    </div>