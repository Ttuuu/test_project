<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>If there is no better complexity than N**2, can we optimize the for loop better than that?</p>
</blockquote>

<p>Complexity is more subtle: your code is O(NÂ²) in the worst case (<code>A</code> is an arithmetic progression with an initial term of 1 and a common difference of 1: <code>[1,2, ... , N]</code>) but O(N) in the best case (<code>A</code> doesn't contain <code>1</code>).</p>

<p>If you chose to sort the array <code>A</code> first, which is a <code>O(n*log(n))</code> operation, then searching for the first non-negative, non-consecutive pair of elements would be a <code>O(n)</code> operation. It means the solution is reliably <code>O(n*log(n))</code>: it's better than your worst case, but worse than your best case. So which one is better? It's up to you to decide. It depends a lot on what you know about your input. If there are a lot of negative values, for instance, you could remove them as the first step: a partition is a <code>O(n)</code> operation. </p>

<p>Now, if we leave the realm of the big O notation, creating an array of <code>max(A)</code> size can be a very costly operation. What if <code>Math.max.apply(null, A);</code> returns 99999999999999999999999999? Imagine an array this size, and then having to populate it with increasing values? So @Victor's proposed solution is better than your original code.</p>
    </div>