<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Add spaces to improve readability:</p>

<pre><code>head = NULL;
while (tmp)
if (this != &amp;F)
</code></pre>

<p>Member functions that do not change any of the class members should be declared with the <code>const</code> specifier:</p>

<pre><code>bool is_empty() const;
bool is_leaf() const;
</code></pre>

<p>Some of your <code>while</code> loops could be rewritten as <code>for</code> loops.  For example, the loop in the <code>Node</code> copy constructor could be rewritten as</p>

<pre><code>for (adj* tmp = F.head; tmp != NULL; tmp = tmp-&gt;next)
    push(tmp-&gt;data);
</code></pre>

<p>Should a <code>pop</code> with an empty list be tolerated?  Currently you silently ignore the problem by returning a -1.  Would throwing an exception (to report the error) be better?  Or at least a <code>std::assert(false);</code> before the return, so you can detect the problem in a debug build.  Also, you don't need the <code>else</code> there, since the body of the <code>if</code> will return.</p>

<p>You have no error checking.  In particular, <code>add_edge</code> will happily try to add an edge to a node that doesn't exist, resulting in Undefined Behavior and (if you're lucky) a crash.  (The same applies to <code>Graph::operator[]</code>.  You could add an assert check, or an <code>at</code> method that would check the bounds, similar to how <code>std::vector</code> operates.)</p>

<p>Your <code>Graph</code> copy constructor does not copy <code>nodes[0]</code>.</p>

<p>Why are you using raw memory for Graph's <code>nodes</code>?  You should use <code>std::vector</code> or some form of smart pointer.</p>
    </div>