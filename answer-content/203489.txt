<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>return value</h1>
<p>In case there is no overlap, it would be cleaner to either return a sentinel value (<code>None</code> for example), or raise an exception, and don't trigger any side effects, like the <code>print</code></p>
<h1>variable names</h1>
<p><code>ind</code>, <code>lb</code> and <code>ub</code> are not clear variable names. you can use <code>index</code>, <code>upper_bound</code> and <code>lower_bound</code>. In this age of IDE's with code completion, there is no need to abbreviate the variable names like that</p>
<h1>algorithm</h1>
<p>In your algorithm you flatten <code>intervals</code>. There is no need for this, and you can do it a lot simpler if you let it be 2-dimensional</p>
<h2>naive</h2>
<p>If you use numpy anyway, then your algorithm can be made a lot simpler.</p>
<pre><code>intervals = np.array(intervals)
</code></pre>
<p>Then you can just use comparison to check whether there is overlap</p>
<pre><code>smaller = np.array(intervals[:,0]) &lt;= new_interval[1]
larger = np.array(intervals[:,1]) &gt; new_interval[0]
</code></pre>
<p>This doesn't use the fact that <code>intervals</code> is, or can be, sorted, but comparison in <code>numpy</code> is generally rather quick, and probably faster than sorting.</p>
<p>You have an intersection between intervals <code>a</code> and <code>b</code> when <code>a[0] &lt; b[1]</code> and <code>a[1] &gt; b[0]</code></p>
<p>To get the indices of the overlapping intervals you can use:</p>
<pre><code>intersection = smaller &amp; larger

if not intersection.any():
    return None # or: raise(Exception('No intersection')
return np.argwhere(intersection)


return np.argwhere(smaller &amp; larger)
</code></pre>
<h2>sorted</h2>
<p>If you want to use the fact the <code>intervals</code> is sorted, you can use <code>np.searchsorted</code>, instead of the direct comparison</p>
<pre><code>intervals = np.sort(intervals, axis=0)
lower_index = np.searchsorted(intervals[:,1], new_interval[0])
upper_index = np.searchsorted(intervals[:,0], new_interval[1])
</code></pre>
<p>If <code>upper_index &gt; lower_index</code>, there is an overlap</p>
<pre><code>if upper_index &lt;= lower_index:
    return None
return intervals[lower_index: upper_index]
</code></pre>
<p>if you need the indices, you can do <code>return lower_index, upper_index</code> or <code>return np.arange(lower_index, upper_index)</code>. NB, this is on the sorted <code>intervals</code></p>
    </div>