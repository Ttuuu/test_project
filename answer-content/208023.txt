<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Responding to your statement</h3>

<blockquote>
  <p>As I understand I should have one class that handle the CSV, one that handle the sFTP, one for the Response, and one to handle the logic of the model (the mapping in my case).</p>
</blockquote>

<p>Perhaps by the word <em>class</em> you mean <em>method</em>, as it seems you have the following methods: </p>

<ul>
<li><code>exportCSVFileToSftp</code></li>
<li><code>exportCSVFileToResponse</code></li>
<li><code>buildCsv</code></li>
<li><code>lineMapping</code></li>
</ul>

<p>And those appear to line up with what you outlined in that statement, with the exception of the CSV building abstracted out to be called by the two methods to export the data. </p>

<p>I have read about the S.O.L.I.D. principles a few times and tried to keep them in mind when developing new code. However, I also stumbled upon <a href="https://www.tonymarston.net/php-mysql/not-so-solid-oo-principles.html" rel="nofollow noreferrer">Tony Marson's Blog post: <em>Not-so-SOLID OO principles</em></a> from 2011. Basically he refutes the abstract examples used when explaining the S.O.L.I.D. principles and questions whether the implementation tracks he uses are incorrect. He does support the <a href="https://www.tonymarston.net/php-mysql/infrastructure.html#mvc" rel="nofollow noreferrer">MVC pattern</a> as well as <a href="https://www.tonymarston.net/php-mysql/3-tier-architecture.html" rel="nofollow noreferrer">three tier architecture</a>, which overlap but <a href="https://www.tonymarston.net/php-mysql/infrastructure-faq.html#faq26" rel="nofollow noreferrer">are not the same thing</a>.</p>

<h2>General review comments</h2>

<p>I see lines like this:</p>

<blockquote>
<pre><code>$handle = fopen('php://temp', 'w');
$handle = $this-&gt;buildCsv($handle);
</code></pre>
</blockquote>

<p>and also</p>

<blockquote>
<pre><code>$handle = fopen('php://output', 'w');
$handle = $this-&gt;buildCsv($handle);
</code></pre>
</blockquote>

<p>Initially my thought was that <code>$handle</code> was being re-assigned to the value from <code>buildCsv()</code> which seemed like it might return a value of a different type. Then I looked at the implementation of that method and noticed that it merely returns <code>$handle</code>. There doesn't really seem like much advantage to re-assign the value after the CSV data is sent to the output resource...</p>

<hr>

<p>While the method names are quite descriptive, it would be helpful for anyone reading your code to have docblocks above each method, describing the parameters, return values, etc. While there isn't one single standard for the format, there are very popular formats like <a href="http://docs.phpdoc.org/references/phpdoc/basic-syntax.html" rel="nofollow noreferrer">phpDocumenter</a>.</p>

<p>And if you are using PHP 7, you could utilize <a href="http://php.net/manual/en/migration70.new-features.php#migration70.new-features.return-type-declarations" rel="nofollow noreferrer">Return type declarations</a> in order to also improve readability.</p>

<hr>

<p>The method <code>exportCSVFileToResponse()</code> appears to call <code>fclose()</code> on the resource but <code>exportCSVFileToSftp()</code> does not call <code>fclose()</code>. As answers to <a href="https://stackoverflow.com/q/6038764/1575353"><em>Why do I need <code>fclose</code> after writing to a file in PHP?</em></a> explain it is a good habit to always call <code>fclose()</code> manually for reasons of security, memory usage, knowledge about write failure, etc. </p>
    </div>