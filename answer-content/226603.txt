<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks very procedural at a glance, it might just not be useful to
use custom objects here.  In any case you don't need to explicitly
inherit from <code>object</code>, <code>class Process:</code> is fine already.</p>

<p>So, more maintainable, well, the headers look dubious, but obviously
chosen from a real-life browser.  The character set / encoding values
would be the most concerning to me wrt. maintenance, but likely the
encoding detection will take care of that.  Similarly the <code>Connection</code>
probably doesn't belong there and should be handled by the HTTP client
instead (like most of them, except the user agent I suppose).</p>

<p><code>_ul_tag</code>, <code>_li_tag</code>, <code>_href_attr</code> those are <em>way</em> unlikely to change.
If defined at all they should be global constants instead.</p>

<p>The <code>_gender_urls</code> should be constructed from the <code>main_url</code>.</p>

<p><code>_get_categories</code> has two almost identical blocks, better unify them
into a new method.</p>

<p>I'd perhaps consider move all of the named classes etc. that might
change into constants at the start of the class or file so changing some
doesn't require having to look all over the file.  Then again, minor
complaint and perhaps not worth it if they're really only used once.
Giving them good names is nice.</p>

<p><code>_paginate</code> can just <code>return '...'.format(...)</code> instead of having the
variable?  Goes for some more places in the code too.  If the variable
is only used once and the line is short enough, just inline them.</p>

<p><code>get_gender</code> - what if neither is in the input?</p>

<p><code>is_sale</code> can simply be <code>return '/sale' in input_url</code>.</p>

<p><code>get_category</code> can be simplified for sure.  Also the regex can be
precompiled with <code>compile</code> once and globally instead of every time the
method runs.  Also the two branches can be simplified into a single
regex, look for "non-greedy" matching in the <code>re</code> documentation.</p>

<p><code>_get_sizes</code> - the <code>append</code> bit could be a for comprehension,
<code>self.sizes = [raw_size.text for raw_size in raw_sizes]</code>.  For most
(all?)  objects <code>if len(x) != 0</code> will mean exactly the same as <code>if x:</code>,
though that might be a stylistic thing.  Hmm and the whole
<code>if ... in size.lower():</code> part, well firstly, what about if none of them
match?  Or more than one?  Actually I'd suggest a loop here,
<code>lower = size.lower(); for x in ['eu', 'us', 'uk']: if x in lower: self.sizetype = x</code>.</p>

<p>You probably also want <code>if __name__ == '__main__': ...</code> at the bottom
instead of just running code whenever the file is loaded.</p>
    </div>