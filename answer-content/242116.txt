<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My biggest bug bear:</p>

<pre><code>#ifndef _INCLUDE_SIMPLE_NEW_HANDLER_H_
#define _INCLUDE_SIMPLE_NEW_HANDLER_H_
</code></pre>

<p>These macros are reserved for the implementation (i.e. you can't use them). An identifier with an initial underscore followed by a capitol letter is reserved for the implementation in any scope.</p>

<p>See: <a href="https://stackoverflow.com/q/228783/14065">What are the rules about using an underscore in a C++ identifier?</a></p>

<hr>

<p>What is the purpose of this?</p>

<pre><code>  State s;

  memset(&amp;s, 0, sizeof(s));
</code></pre>

<p>If you want to make sure that everything is zeroed in <code>State</code> object then create an appropriate constructor!</p>

<hr>

<p>Not sure what this is for!</p>

<pre><code>  if (!init_done_) {
    return s;
  }
</code></pre>

<p>You should design your code so it can't get to this location without it being already initialized correctly. Not sure how you can call a method on an object before it is constructed.</p>

<p>Since you are using a function static variable for all <code>Worker</code> objects creation of this object is already thread safe.</p>

<hr>

<p>Not sure why you would do this:</p>

<pre><code>  s.allocated_block_count = allocated_block_count_;
  s.available_block_count = available_block_count_;

  return s;
</code></pre>

<p>Why is this state not already part of the worker object as a <code>State</code> object. Then you can simply return the workers <code>State</code> object!</p>

<hr>

<p>I would have defined the structures like this:</p>

<pre><code>  struct State
  {
    size_t allocated_block_count;
    size_t available_block_count;
  };

  struct FullState {
    bool   init_done;
    int    signo;
    size_t final_block_size;
    bool   final_block_allocated;
    size_t reserved_block_size;
    size_t reserved_block_count;
    State  currentState;
  };

  class Worker
  {
        FullState fullState;
        Blk*      final_block_;
        Blk*      blk_arr_list_;

        State     GetState()     const volatile {return fullState.state;}
        FullState GetFullState() const volatile {return fullState;}
  };
</code></pre>

<p>This simplifies a lot of the work you have done.</p>

<hr>

<p>The call to <code>std::set_new_handler(NewHandler::Process);</code> actually returns the current new_handler. You may want to retain this value and use it.</p>

<p>If you fail to allocate any extra memory then you call (if it is not null) the originally available handler (or put it back in place potentially).</p>

<hr>
    </div>