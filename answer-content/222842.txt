<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's a pretty solid implementation, with many possible issues already solved. However, there is room for improvement still.</p>

<p>Here is a brief list:</p>

<ul>
<li>Yes, you are absolutely right, a db wrapper must be <strong>separated from the data mapper</strong>, with <code>insertRecords</code>, <code>updateRecords</code> and <code>deletedRecords</code> moved into the latter.</li>
<li><p>Your database wrapper offers <strong>less features than original PDO</strong>, which never should be. PDO is a db wrapper of its own, and not a bad one. It makes no sense to duplicate the functionality that already exists in PDO, at the same time reducing the existing functionality.</p>

<ul>
<li>bind() function is dangerous. Sniffing the database type from the PHP variable type could lead to unwanted consequences. Instead, bind all parameters as strings, just like PDO does.  </li>
<li><p>overall there is <strong>so much code</strong> to recreate the functionality that already exists in PDO. For example, your <code>resultset()</code> method could be implemented like this</p>

<pre><code>public function resultset($sql, $params = [], $mode = PDO::FETCH_ASSOC)
{
    $stmt = $this-&gt;pdo-&gt;prepare();
    $stmt-&gt;execute($params);
    return $stmt-&gt;fetchAll($mode);
}  
</code></pre>

<p>as you can see, it is implemented using only native PDO methods and in fact easier to use as it does everything in one call as opposed to your own consequent calls to <code>prepare()</code> and <code>resultset()</code>. Not to mention it makes such functions like <code>bindParams()</code>, <code>bind()</code>, <code>prepare()</code>, <code>execute()</code> just useless.</p></li>
</ul></li>
<li><p>Your data mapper functions are potentially <a href="https://phpdelusions.net/pdo/sql_injection_example" rel="nofollow noreferrer"><strong>prone to SQL injection</strong> through field names</a>.  For this reason I strongly recommend to create a real data mapper class where each mapper is related to a distinct table with all field names explicitly written in the class definition. But that will be another story, I would suggest you to write a mapper and then post it for the review. </p></li>
<li><p><code>$stmt</code> by no means should be a class variable as <a href="https://phpdelusions.net/pdo/common_mistakes#statefulness" rel="nofollow noreferrer">it will make your class stateful</a>, while it shouldn't be. The link is to my review of common mistakes in db wrappers you may find useful.</p></li>
<li><strong>charset</strong> must be set in the DSN. See my article on the <a href="https://phpdelusions.net/pdo_examples/connect_to_mysql" rel="nofollow noreferrer">proper PDO connection</a></li>
<li>I don't really get why config is passed <strong>by reference</strong>. I would remove that ampersand.</li>
<li>the mode in <code>resultset()</code> and <code>single()</code> is hardcoded which I suppose is a typo. of course it should be a function parameter. </li>
<li>the code in <code>resultset()</code> and <code>single()</code> is duplicated. Besides, both methods duplicate the functionality already exists in PDO. I would suggest to create a single function <code>query()</code> that returns a PDOStatement from wich you will be able to get any result using the method chaining. An example can be found in <a href="https://codereview.stackexchange.com/questions/183801/object-oriented-pdo-wrapper/183855#183855">this answer</a></li>
</ul>

<p>Regarding the Interface. </p>

<p>I would say that before creating an Interface, you must consider the architecture. There are some issues that must be taken into consideration. As it was noted above, under no circumstances a database class must be stateful. It means that you have only two possibilities:</p>

<ul>
<li>to use a <em>leaky abstraction</em>, so your class won't be 100% independent but it will return a PDOStatement. This way is easier to implement but in this case I don't see a much use for an Interface. Given your abstraction is already leaky (not all PDO methods are implemented and there is a fallback method to get a raw PDO instance) I would go this way. but it will not be 100% a good practice.</li>
<li>to make a proper abstraction, for which you will need to have at least <strong>two Interfaces</strong> - one for a database wrapper class and one for a statement class, each implementing 100% of PDO functionality.</li>
</ul>
    </div>