<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A way to shorten your code is to extract common parts â€” the <code>tolower</code> and <code>toupper</code> closures and general <code>transform</code> and <code>transform_copy</code> utilities, in this case: (note that I used <code>std::locale::classic()</code> instead of the recently installed global locale)</p>

<pre><code>namespace ae {
    struct to_lower_t {
        template &lt;typename CharT&gt;
        CharT operator()(CharT c) const
        {
            return std::tolower(c, std::locale::classic());
        }
    };
    inline constexpr to_lower_t to_lower;

    struct to_upper_t {
        template &lt;typename CharT&gt;
        CharT operator()(CharT c) const
        {
            return std::toupper(c, std::locale::classic());
        }
    };
    inline constexpr to_upper_t to_upper;

    template &lt;typename CharT, typename Traits, typename Functor&gt;
    void transform(std::basic_string&lt;CharT, Traits&gt;&amp; str, Functor&amp;&amp; functor)
    {
        for (auto&amp; c : str) {
            c = std::invoke(functor, c);
        }
    }

    template &lt;typename CharT, typename Traits, typename Functor&gt;
    auto transform_copy(std::basic_string_view&lt;CharT, Traits&gt;&amp; str, Functor&amp;&amp; functor)
    {
        std::basic_string result{str};
        transform(str, functor);
        return result;
    }
}
</code></pre>

<p>Now the converter functions can be provided as wrappers around these.</p>

<p>Also, please apply <code>remove_if(std::not_fn(needed))</code>, <code>sort</code>, and <code>unique</code> to these include directives:</p>

<blockquote>
<pre><code>#include &lt;iterator&gt;
#include &lt;algorithm&gt;
#include &lt;type_traits&gt;
#include &lt;vector&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;locale&gt;
#include &lt;functional&gt;
</code></pre>
</blockquote>
    </div>