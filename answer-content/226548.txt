<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might notice that <code>createChildren</code> is almost the same as <code>MyTree</code> -- the only difference is that <code>createChildren</code> takes its argument directly instead of as a props object. So with a small change we can remove <code>createChildren</code> entirely:</p>

<pre><code>const MyTreeNestedItems = (props) =&gt; {
    const { data } = props;

    let children = null;
    if (data.children.length) {
      children = &lt;MyTree list={data.children} /&gt;;
    }

    return (
        &lt;li className="nav-item"&gt;
            &lt;a className="nav-link" href="#"&gt;
                &lt;span className={data.icon}&gt;&lt;/span&gt; {" "}
                { data.descp }
            &lt;/a&gt;
            &lt;ul style={{listStyleType:"none"}}&gt;{children}&lt;/ul&gt;
        &lt;/li&gt;
    );
}
</code></pre>

<p>This can be a bit more compact as so:</p>

<pre><code>const MyTreeNestedItems = ({ data }) =&gt; {
    return (
        &lt;li className="nav-item"&gt;
            &lt;a className="nav-link" href="#"&gt;
                &lt;span className={data.icon}&gt;&lt;/span&gt; {" "}
                { data.descp }
            &lt;/a&gt;
            &lt;ul style={{listStyleType:"none"}}&gt;
                {data.children.length ? &lt;MyTree list={data.children} /&gt; : null}
            &lt;/ul&gt;
        &lt;/li&gt;
    );
};
</code></pre>

<hr>

<p>Currently this code renders invalid HTML -- it renders with a <code>&lt;li&gt;</code> as the top level element but <code>&lt;li&gt;</code> should only be contained in a <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, or <code>&lt;menu&gt;</code>.</p>

<p>Looking at the code so far, <code>&lt;MyTree&gt;</code> is rendered in two places -- it may be tempting to just add another <code>&lt;ul&gt;</code> around <code>&lt;MyTree list={tree} /&gt;</code> in the <code>render()</code> call. But then we would have two occurrences of a structure like this: <code>&lt;ul&gt;&lt;MyTree/&gt;&lt;/ul&gt;</code>. It'd be easier to just move the <code>&lt;ul&gt;</code> into the <code>&lt;MyTree/&gt;</code>.</p>

<p>With that, the code now looks like this:</p>

<pre><code>const MyTree = ({ list }) =&gt; {
    return (
        &lt;ul style={{listStyleType:"none"}}&gt;
            {list.map((child,i)=&gt; &lt;MyTreeNestedItems key={i} data={child} /&gt;)}
        &lt;/ul&gt;
    );
};

const MyTreeNestedItems = ({ data }) =&gt; {
    return (
        &lt;li className="nav-item"&gt;
            &lt;a className="nav-link" href="#"&gt;
                &lt;span className={data.icon}&gt;&lt;/span&gt; {" "}
                { data.descp }
            &lt;/a&gt;
            {data.children.length ? &lt;MyTree list={data.children} /&gt; : null}
        &lt;/li&gt;
    );
};

render(&lt;MyTree list={tree} /&gt;, document.querySelector('.js-mytree'));
</code></pre>

<hr>

<p>From here it's a matter of taste. Both of the components are just directly returning a value, so we can use short arrow function syntax now: <code>(...) =&gt; (value)</code> instead of <code>(...) =&gt; { return (value); }</code></p>

<p>Also, the components are now simple enough that I would just combine the two.</p>

<p>All in, that leaves us with this final version of the code:</p>

<pre><code>const MyTree = ({ list }) =&gt; (
    &lt;ul style={{listStyleType:"none"}}&gt;
        {list.map(({icon, descp, children}, i) =&gt; (
            &lt;li className="nav-item" key={i}&gt;
                &lt;a className="nav-link" href="#"&gt;
                    &lt;span className={icon} /&gt; {descp}
                &lt;/a&gt;
                {children.length ? &lt;MyTree list={children} /&gt; : null}
            &lt;/li&gt;
        ))}
    &lt;/ul&gt;
);

render(&lt;MyTree list={tree} /&gt;, document.querySelector('.js-mytree'));
</code></pre>
    </div>