<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>
<h2>Don't abuse <code>using namespace std</code></h2>
<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.</p>
<h2>Be careful with signed and unsigned</h2>
<p>In multiple places in this code an <code>int</code> <code>i</code> with an unsigned <code>size_t</code> returned from <code>size()</code>.  It would be better to declare <code>i</code> to also be <code>size_t</code>.</p>
<h2>Use all of the required <code>#include</code>s</h2>
<p>The type <code>std::string</code> is used but its declaration is in <code>#include &lt;string&gt;</code> which is not actually in the list of includes.</p>
<h2>Prefer <code>using</code> over <code>typedef</code></h2>
<p>When you make more use of templates, you will likely encounter the reason many people prefer <code>using</code> over <code>typedef</code> in modern C++.  So your declarations become:</p>
<pre><code>using VS = std::vector&lt;std::string&gt;;
using VVS = std::vector&lt;VS&gt;;
</code></pre>
<p>See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rt-using" rel="nofollow noreferrer">T.43</a> for details.</p>
<h2>Use "range <code>for</code>" and simplify your code</h2>
<p>The code currently uses this:</p>
<pre><code>for (int i = 0; i &lt; HRML.size(); i++) {
    string x = HRML[i];
</code></pre>
<p>There is a much simpler and more efficient way to do this:</p>
<pre><code>for (auto x : HRML) {
</code></pre>
<p>This won't work without further modification to the details of the loop, but for help on that, see the next suggestion.</p>
<h2>Use a state machine</h2>
<p>The logic of this code could be expressed as a state machine.  If that were done, one could process the stream "on the fly" character at a time with little difficulty.</p>
<h2><code>goto</code> still considered harmful</h2>
<p>Generally speaking, the use of <code>goto</code> is not recommended.  Using it as you have, for breaking out nested loops is about the only accepted use.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-goto" rel="nofollow noreferrer">ES.76</a> for details.  In this case, however, you can avoid it entirely as shown in the next suggestion.</p>
<h2>Use appropriate data structures</h2>
<p>The use of vectors of vectors of strings is not a very efficient structure for this program.  I would suggest that using an <code>unordered_map</code> would be a better choice and would allow you change the convoluted triple loop at the end of the program to this:</p>
<pre><code>for(std::string query; q &gt; 0 &amp;&amp; std::getline(std::cin, query); --q) {
    auto search = tagValue.find(query);
    if (search == tagValue.end()) {
        std::cout &lt;&lt; "Not Found!\n";
    } else {
        std::cout &lt;&lt; search-&gt;second &lt;&lt; '\n';
    }
}
</code></pre>
<h2>Parse input carefully</h2>
<p>On my machine, your posted code segfaulted and crashed when run with the sample input provided at the code challenge site.  The reason is that this code is not reading input correctly.  Specifically, after this line:</p>
<pre><code>std::cin &gt;&gt; n &gt;&gt; q;
</code></pre>
<p>there is still a newline character in the input stream.  Get rid of it like this:</p>
<pre><code>constexpr std::size_t maxlinelen{200};
std::cin.ignore(maxlinelen, '\n');
</code></pre>
<p>The value of <code>maxlinelen</code> is from the problem description, but generically one could use this:</p>
<pre><code>std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
</code></pre>
<p>Also, this line is not safe because it assumes that there are at least two characters in the string, which isn't guaranteed.</p>
<pre><code>if (x[0] == '&lt;' &amp;&amp; x[1] != '/') {
</code></pre>
    </div>