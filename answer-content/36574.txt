<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking at your <code>switch</code> statement from an SEO point of view, I'd have to say: it's awful (sorry).<br>
One of the first things to look at, when you're interested in SEO, is <code>mod_rewrite</code>. Search engines don't like urls that say nothing:</p>

<pre><code>http://www.my-site.com/1
http://www.my-site.com/2
http://www.my-site.com/3
http://www.my-site.com/3
</code></pre>

<p>Doesn't say anything, whereas</p>

<pre><code>http://www.my-site.com/home
http://www.my-site.com/services
http://www.my-site.com/gallery
http://www.my-site.com/contact
</code></pre>

<p>If anything, contains a sort-of meaningful keyword in the url from the off. Not only to crawlers love that, so do people browsing your site, for that matter.<br>
Naturally, you have to keep this up, take the services page for example. I'm assuming that this is the page where you list what you do/offer, then all sub-nav urls should look like:</p>

<pre><code>http://www.my-site.com/services/custom/cms
http://www.my-site.com/services/portfolio
</code></pre>

<p>And so on...<br>
As to what Topener suggested: <code>require_once 'pages/'.$_GET['page'].'.php';</code> is a <em>terrible</em>, <strong><em>terrible</em></strong> idea. Using data from the network, data the <em>client</em> can change to determine what files should be loaded is a <em>huuuuge</em> security hole!</p>

<p>From a CodeReview viewpoint:<br>
A <code>switch</code> is all well and good, but it won't be long untill you find yourself scrolling up and down through your code, because the switch-case has grown so large. You'll have to invent hacky ways of dealing with form validation, and other types of client requests (pagination, ajax, file uploads, ...) in a manageable, safe and maintainable way.<br>
A switch can be useful to shorten a lot of <code>if-elseif-elseif-else</code> branches, but not for something as crucial as to determine what page you have to present the client with. Most modern sites would go with a framework that implements the MVC pattern (Symfony2, ZendFW, Yii, ...)<br>
As AD7Six said in his comment: if all you're after is a simple routing solution, there are micro-fw's, too, that might be a better fit for your problem. Even so, most frameworks are more or less modular, and with a dependency manager like composer, you can use the routing module(s) from any framework.</p>

<p>Your functions are also in violation of the PSR standards as defined by PHP-Fig (look for them on github). Classes (objects) start with an upper-case, functions/methods don't. Try to adhere to what little standards/conventions you have</p>

<p>Lastly, this just looks wrong to me:</p>

<pre><code>switch($foo)
{
    default: homePage(); break;
    case 1: ...
}
</code></pre>

<p>The <code>defaut</code> case is the <em>fallback</em> case. To me, logic dictates that the default/fallback procedure is the <em>last resort</em>, and it should therefore be written as the last case label. Maybe that's just me, and my (sometimes over eager) tendency to use case fallthroughs:</p>

<pre><code>switch ($foo)
{
    case 1:
    case 2:
        bothDoTheSame();
        break;
   case 3:
       threeSpecific();
   case 4:
       threeAndFour();
       break;
   default: defaultCase();//no break required
}
</code></pre>
    </div>