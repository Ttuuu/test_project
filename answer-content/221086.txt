<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As every id identifies a tuple of unique image, optional table, why over-complicate things?</p>

<p>Select one alternative from here:</p>

<ol>
<li>Add a <code>table*</code> to <code>image</code>.</li>
<li>Use a <code>std::map</code> or <code>std::unordered_map</code> from <code>image*</code> to <code>table*</code>.</li>
</ol>

<p>And one from here:</p>

<ol>
<li>Make the ids <code>image*</code>s.</li>
<li>Add a (potentially optional) id to <code>image</code>. Just ensure that you can search them by id.</li>
<li>Use a map from arbitrary id to <code>image*</code> (and optionally in reverse).</li>
</ol>

<p>Presto, you are done, and this answer will be far longer and more complicated than the solution.</p>

<p>As an alternative, if you want multiple indices into the same collection, look at <a href="https://www.boost.org/doc/libs/1_70_0/libs/multi_index/doc/index.html" rel="nofollow noreferrer">Boost.MultiIndex</a>.</p>
    </div>