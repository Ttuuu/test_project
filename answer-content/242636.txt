<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some things I noticed:</p>

<p><code>Array.prototype.filter</code> is intended to be used when you want to filter out elements from an array and construct a new array from certain elements of the other array, for example:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const arr = [0, 1, 2, 3, 4];
const evens = arr.filter(num =&gt; num % 2 === 0);
console.log(evens);</code></pre>
</div>
</div>


<p>If you're not taking elements out to make a new array, then <code>.filter</code> isn't appropriate. If you're just looking to <em>iterate</em>over an array and perform side-effects (like mutate certain elements), use <code>Array.prototype.forEach</code> or <code>for..of</code> instead.</p>

<p>That said - I think using <code>filter</code> <em>would</em> be the best way to approach this problem, by separating out the cars from non-cars. More on that later.</p>

<p>You have</p>

<pre><code>if((a.name !='Bus'&amp;&amp;a.name!='Truck')) 
</code></pre>

<pre><code>if(i==0){
</code></pre>

<pre><code>}else if(i==arrayLength-i-1){
</code></pre>

<p>It would be better to never use sloppy comparison with <code>==</code> and <code>!=</code> - instead, use strict comparison with <code>===</code> and <code>!==</code>. The problem with sloppy comparison is that it has <a href="https://stackoverflow.com/q/359494">so many weird rules</a> a developer has to memorize in order to be confident in its proper usage. See <a href="https://i.stack.imgur.com/35MpY.png" rel="nofollow noreferrer">this image</a>. If you're comparing items of the same type, using strict comparison instead will work just fine. (When comparing items of different types, you can check their types and then explicitly cast to the same type if needed, then perform the comparison.)</p>

<p>I'd also recommend adding spaces between operators - it improves code readability. (Many decent IDEs can do this automatically.) Eg, compare</p>

<pre><code>if((a.name !='Bus'&amp;&amp;a.name!='Truck')) 
</code></pre>

<p>to</p>

<pre><code>if (a.name !== 'Bus' &amp;&amp; a.name !== 'Truck')
</code></pre>

<p>(There's no need for the extra <code>()</code>s around the condition)</p>

<p>An even better method might be to check whether the item's name starts with <code>Car</code>:</p>

<pre><code>if (a.name.startsWith('Car'))
</code></pre>

<p>You're missing a semicolon with <code>return a</code>. Occasionally forgetting semicolons can <a href="https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi">result in confusing bugs</a>, especially if you aren't an expert. Consider using a linter to automatically prompt you to fix these sorts of potential mistakes.</p>

<p>If I were approaching this problem, I'd prefer to separate out the cars into their own array. This separation can be achieved concisely with <code>Array.prototype.filter</code>. Then, iterate over the cars, and add the <code>isFirstLayer</code> and <code>isLastLayer</code> properties (as <code>false</code>) to each car. Then, take the <em>first</em> car and set its <code>isFirstLayer</code> to <code>true</code>. Similarly, take the <em>last</em> car and set its <code>isLastLayer</code> to <code>true</code>:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var array = [{
    "name": "Truck",
    "status": "Cancelled",
    "id": 10
  },
  {
    "name": "Bus",
    "status": "Approved",
    "id": 11
  },
  {
    "name": "Car1",
    "status": "Approved",
    "id": 12
  },
  {
    "name": "Car2",
    "status": "Cancelled",
    "id": 19
  },
  {
    "name": "Car3",
    "status": "Cancelled",
    "id": 13
  }
];
const cars = array.filter(item =&gt; item.name.startsWith('Car'));
for (const car of cars) {
  car.isFirstLayer = false;
  car.isLastLayer = false;
}
cars[0].isFirstLayer = true;
cars[cars.length - 1].isLastLayer = true;
console.log(array);</code></pre>
</div>
</div>

    </div>