<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll build off of Quuxplusone's answer.</p>

<hr>

<p>You have issues with <code>tab</code>.</p>

<pre><code>int tab[N];
tab[0] = N-1;
tab[N+1] = 0; // out of bounds
</code></pre>

<p>Only the elements <code>0</code> through <code>N-1</code> are available, so this assignment is wrong. Your initialization loop also attempts to initialize <code>tab[N]</code>. And in <code>flip</code>, since <code>a</code> and <code>b</code> are randomly generated between <code>0</code> and <code>N-1</code>, getting <code>tab[a+2]</code> can be <code>N+1</code> at maximum, also out of bounds.</p>

<p>While many compilers will accept it, you're not allowed to create an array with a non-const int. However, all these issues can be fixed pretty easily; just create it with a bit of extra room.</p>

<pre><code>const int N = 20; // set to const
int tab[N+2];
</code></pre>

<p>As a side note, I would personally not use <code>tab</code> at all! I would simply do the wraparound logic within <code>flip()</code>:</p>

<pre><code>int val1 = lattice[a &gt; 0 ? a-1 : N-1][b];
int val2 = lattice[a &lt; N-1 ? a+1 : 0][b];
int val3 = lattice[a][b &gt; 0 ? b-1 : N-1];
int val4 = lattice[a][b &lt; N-1 ? b+1 : 0];
</code></pre>

<p>That way, you don't have to worry about creating it or passing it as a parameter at all. </p>

<hr>

<p>Your <code>flip</code> function needlessly copies <code>lattice</code> each call. You should pass it as a reference.</p>

<pre><code>void flip (int N, std::vector&lt;std::vector&lt;int&gt;&gt;&amp; lattice, float beta, int tab[], float H)
                                            // ^
{
    ...
    return;
}

</code></pre>

<p>I've also made the function return <code>void</code> since you don't need to reassign <code>lattice</code> since its passed by reference and just call it like so:</p>

<pre><code>flip(N, lattice, beta, tab, H);
</code></pre>

<hr>

<p>Make a separate function like <code>print_lattice</code>. It makes it clear whats happening without even looking at it and you can use it in multiple places (like the one you've commented out).</p>

<hr>

<p>Don't declare your loop variables outside the loop (unless you need to). And get rid of any unused variables.</p>

<p><code>int</code><strike>a,b,</strike><code>N=20,</code><strike>i,j,k,r,t,</strike><code>sweep=1500;</code></p>

<hr>

<p>Use better variable names. Consider using <code>x</code> and <code>y</code> instead of <code>a</code> and <code>b</code> since they'd be more immediately understandable. And give a more descriptive name to <code>H</code> and <code>M</code>, I'm not familiar with the algorithm and these names don't help much.</p>

<hr>

<pre><code>for(int u=0;u&lt;N;u++)
{
    if(i&gt;=500)
    {M_sweep=M_sweep+lattice[t][u];}
}
</code></pre>

<p>This loop checks for <code>i</code> but never modifies it, this check can be moved outside the loop like so:</p>

<pre><code>if (i &gt;= 500)
{
    for(int u=0;u&lt;N;u++)
    {
        M_sweep = M_sweep + lattice[t][u];
    }
}
</code></pre>

<p>On second look, it can moved even higher to outside the <code>t</code> loop.</p>

<hr>

<p>You use lots of constants:</p>

<pre><code>H=H+0.015;
...
T=2.2;
</code></pre>

<p>Consider giving these constants names.</p>

<pre><code>const float H_STEP = 0.015f;
</code></pre>
    </div>