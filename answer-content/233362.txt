<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will assume you have used <code>Option Explicit</code> at the top of every module. </p>

<p>Some kudos up front:</p>

<ul>
<li>Declaration of variables where you are going to use them</li>
<li>Reasonable indenting (why the additional indent for <code>For Each cell In RgSel</code>?)</li>
<li>Reasonable variable names (although <code>lamount</code> could be <code>loanAmount</code>)</li>
</ul>

<h2>Explicit range calls</h2>

<p>I see one potential 'gotcha' in the code:</p>

<pre><code>Set RgCell = Range("C3:C100")
</code></pre>

<p>Always fully qualify cells. In your code above, this is the only time you explicitly call a range, which minimises the impact (good design choice!). In this case, you are using the code in a Worksheet module and I am assuming that the range you want to use is also on this worksheet. So the change is simply:</p>

<pre><code>Set RgCell = Me.Range("C3:C100")
</code></pre>

<p>But then, I ask the question - why C3 to C100? Why not C99 or C1000? In Excel, you can use <strong>named ranges</strong>. Used properly, they will shrink and grow as you add/remove cells - meaing that you can dispense with magic numbers and guessing the count of cells! So in this case, you could call the range of cells 'ApplicantNames'. The resultant code could look like either of the two below:</p>

<pre><code>Set RgCell = Me.Range("ApplicantNames")
Set RgCell = Me.Names("ApplicantNames").RefersToRange
</code></pre>

<p>The <code>Worksheet_Change</code> event trigger may sometimes be something other than a user interaction, so the active sheet may not be what you think it is.</p>

<h2>Know when to stop referring to Excel objects</h2>

<p>At some point in the code, you are using Excel as a database. In this case, it is very early. Every time the code makes a reference to a Range or some other Excel-specific action, the code has to switch from the VBA Engine to the Excel Engine. This costs in terms of performance. In your case, it may not be noticeable because you are likely only dealing with a few rows. But if you were to deal with a 1000 rows, you would certainly notice the performance hit!</p>

<p>Seeing as you don't do anything to the excel data itself, you can make a single call to the Excel part, collect all the data and then work exclusively in the VBA engine. This is done by arrays.</p>

<pre><code>Set RgSel = Intersect(Target, RgCell)
Set RgSel = RgSel.Offset(0,-1)
Set RgSel = RgSet.Resize(,18) ' based on the offsets you used in the original code
Dim myData as Variant
myData = RgSel.Value
</code></pre>

<p>'myData' is now a 2-D array.</p>

<pre><code>For Each cell In RgSel
</code></pre>

<p>Now becomes</p>

<pre><code>For someIterator = LBound(myData, 1) to UBound(myData, 1) ' iterate through the rows
</code></pre>

<p>And, as an example, you can then get your key information like:</p>

<pre><code>TitleCo = myData(someIterator, 3)
</code></pre>

<h2>Magic Numbers</h2>

<p>Try and avoid magic numbers (and strings) by declaring them as public constants in their own module. This makes them obvious, and you know where to find them if you want to change them.</p>

<p>Examples of magic numbers and the resultant code:</p>

<pre><code>If LCase(cell.Value) = "zack" Then ' &lt;-- or did you mean 'recipient' in this case?

Public Const SUBJECTPREFIX As String = "***NEW LOAN ASSIGNED***" &amp; " - "
Subj = SUBJECTPREFIX &amp; UCase(CustName)

Public Const TDCOLWIDTH As String = "&lt;td ""col width=10%""&gt;"

Dim strRows As String
strRows = strRows &amp; "&lt;tr&gt;"
strRows = strRows &amp; TDCOLWIDTH &amp; Product &amp; "&lt;/td&gt;"
strRows = strRows &amp; TDCOLWIDTH &amp; lamount &amp; "&lt;/td&gt;"
strRows = strRows &amp; TDCOLWIDTH &amp; ClsDate &amp; "&lt;/td&gt;"
strRows = strRows &amp; TDCOLWIDTH &amp; TitleCo &amp; "&lt;/td&gt;"
strRows = strRows &amp; TDCOLWIDTH &amp; Notes &amp; "&lt;/td&gt;"
strRows = strRows &amp; TDCOLWIDTH &amp; ContractPrice &amp; "&lt;/td&gt;"
strRows = strRows &amp; "&lt;/tr&gt;"

Public Const BODYLEADER as String = "&lt;head&gt;&lt;style&gt;table, th, td {border: 1px solid gray; border-collapse:" &amp; "collapse;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;" &amp; _
    "&lt;p&gt;" &amp; "Hello "
Public Const BODYINTRO As String = ", &lt;br&gt;&lt;br&gt;" &amp; vbNewLine &amp; vbNewLine &amp; _
    "You have been assigned the following loan for "
Public Const BODYTABLEHEADERS As String = "." &amp; "&lt;/p&gt;" &amp; vbNewLine &amp; _
    "&lt;table style=""width:100%""&gt;&lt;tr&gt;" &amp; _
    "&lt;th bgcolor=""#bdf0ff""&gt;Product&lt;/th&gt;" &amp; _
    "&lt;th bgcolor=""#bdf0ff""&gt;Loan Amount&lt;/th&gt;" &amp; _
    "&lt;th bgcolor=""#bdf0ff""&gt;Closing Date&lt;/th&gt;" &amp; _
    "&lt;th bgcolor=""#bdf0ff""&gt;Title Company&lt;/th&gt;" &amp; _
    "&lt;th bgcolor=""#bdf0ff""&gt;Notes&lt;/th&gt;" &amp; _
    "&lt;th bgcolor=""#bdf0ff""&gt;Contract Price&lt;/th&gt;&lt;/tr&gt;"

strBeforeRows = BODYLEADER &amp; Recipient &amp; BODYINTRO &amp; CustName &amp; BODYTABLEHEADERS
</code></pre>

<p>As I noted above, the declaration of the magic numbers should be in their own module, not mixed with the code as I have done here. Even if you use the <code>Const</code> only once in the code, this is good code hygiene because it makes magic numbers obvious, it makes the easier to find and thus makes the code easier to maintain. In addition, the actual code now is self commenting - previously there was a wall of string that people had to guess what it actually meant.</p>

<p>In the case of TABLEHEADERS and TDCOLWIDTH, if you add another column, you can now have the two lines of code adjacent to each other, and you are less likely to forget to amend the column widths to suit the new headers!</p>

<h2>Finally</h2>

<pre><code>Application.ScreenUpdating = False
Application.DisplayAlerts = False

Application.DisplayAlerts = True
Application.ScreenUpdating = True
</code></pre>

<p>With the code in the OP, <code>.ScreenUpdate = False</code> does nothing, because no events exist that cause the screen to repaint. I am not sure that any alerts will be generated by Excel either. With a change to using arrays, performance should not be an issue.</p>
    </div>