<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd use a dictionary. Loop once over the characters in the string. For each found character, create an entry in the dictionary, the character being the key, the value being the index. If a character exists in the dictionary, set the value to [length of word] + 1. 
When all characters are seen, loop over the dictionary. Pick the least (first by my testing) index encountered less than [length of word] + 1 and return it. If no value is returned, return -1. </p>

<p>Here is my shot (admittedly in c#).</p>

<pre><code>int firstUniqCharInString(string s)
        {
            Dictionary&lt;char, int&gt; seen = new Dictionary&lt;char, int&gt;();
            int t = -1; 
            foreach (char c in s)
            {
                t++;
                if (seen.ContainsKey(c))
                {
                    seen[c] = s.Length + 1;
                }
                else
                {
                    seen.Add(c, t); 
                }

            }
            int len = s.Length + 1; 
            foreach(KeyValuePair&lt;char, int&gt; pair in seen)
            {
                if(pair.Value &lt; len) {
                    return pair.Value;
                }
            }
            return (-1);
        }
</code></pre>
    </div>