<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let’s start with your utility methods.</p>

<hr>

<h3><code>printBlankSpaces(String word)</code></h3>

<p>This method returns a new <code>String</code>; It does not do any printing.  It needs a better name...</p>

<hr>

<h3><code>getMatchingIndex(char[] wordArray, String userInput)</code></h3>

<p>You repeatedly turn each character of <code>wordArray[]</code> into a <code>String</code> using <code>String.valueOf(...)</code>.  It would be better to turn the <code>userInput</code> into a character before the loop starts (using <code>.charAt(0)</code>), and just do a simple comparison in the loop with that character.</p>

<p>It would be even better to pass in a <code>char userInput</code>, instead of a <code>String</code>.</p>

<p>Instead of <code>&amp;&amp; (index == -1)</code> in your loop condition, just <code>break;</code> out of the loop after you do the assignment <code>index = i;</code>, or even simplier, <code>return i;</code> and you could remove the <code>index</code> variable entirely.</p>

<hr>

<h3><code>containsUserInput(char[] wordArray, String userInput)</code></h3>

<p>Instead of extracting <code>.charAt(0)</code> in every iteration of the loop, do it before the start of the loop and save it in a local variable.  Or even better, like above, pass in <code>char userInput</code>.</p>

<p>You aren’t using the loop index other than for retrieving the character <code>wordArray[i]</code>.  This is a sign you could use an enhanced for-loop:</p>

<pre><code>char userChar = userInput.charAt(0);
for (char letter : wordArray) {
   if (letter == userChar) {
       return true;
   }
}
return false;
</code></pre>

<p>Or even simpler, the entire method could be one statement, leveraging the function above:</p>

<pre><code>return getMatchingIndex(wordArray, userInput) &gt;= 0;
</code></pre>

<hr>

<h3><code>isValidInput(String userGuess)</code></h3>

<p>The construct <code>if (condition) return true; else return false;</code> can be re-written as <code>return condition;</code>.  You don’t need the <code>if</code> statement.</p>

<hr>

<h3><code>getRandomWordFromFile(String fileName)</code></h3>

<p>You are doing a lot of work to get a random line from the file.  First, you are reading the file, line-by-line.  Then, you concatenate all the lines together!  Finally you split the concatenation back into the individual lines!</p>

<p>If you simply stored each line as you read it into a <code>List&lt;String&gt;</code>, you would be able to skip the concatenation and wouldn’t need to split later.</p>

<p>In fact, reading all the lines of a file into a <code>List&lt;String&gt;</code> is such a common operation, there is a standard method for it.  <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#readAllLines(java.nio.file.Path)" rel="nofollow noreferrer"><code>List&lt;String&gt; Files.readAllLines(Path path)</code></a>.</p>

<p>With that, the function could be reduced to two lines:</p>

<pre><code>List&lt;String&gt; lines = Files.readAllLines(Paths.get(fileName));
return lines[ ThreadLocalRandom.current().nextInt(lines.size()) ];
</code></pre>

<p>That skips over a lot of fine points.  Most important is ensuring all file resources are properly closed, even in the face of exceptions.  The “try-with-resources” statement is best used for that:</p>

<pre><code>File file = new File(fileName);
List&lt;String&gt; lines = new ArrayList&lt;&gt;();
try(Scanner scanner = new Scanner(file)) {
    while(scanner.hasNextLine()) {
        lines.add( scanner.nextLine());
    }
}
</code></pre>

<p>All that is done for you with the one <code>readAllLines()</code> call.</p>

<hr>

<h3>main</h3>

<p><code>charUserInput</code> is not used.  As mentioned above, many of your methods would be easier to write if they were given a single character, instead of a <code>String</code> ... and you have this unused character variable that would be perfect for that...</p>

<p>You tests <code>if (!(containsUserInput(wordArray, userInput))) { ... }</code> followed immediately by <code>else if (containsUserInput(wordArray, userInput)) { ... }</code>.  Those tests conditions are - literally - opposites of each other; if one is <code>true</code>, the other must be <code>false</code>, and vis-versa.  Instead of repeating the test, both in code and in CPU time, just use an <code>else</code></p>

<pre><code>if (!containsUserInput(wordArray, userInput)) {
   ...
} else {
   ...
}
</code></pre>

<p>I’ve removed the unnecessary ( )’s.  You can improve this further by switching the order of the  then-else clauses, and removing the <code>!</code> operator.</p>

<pre><code>if (containsUserInput(wordArray, userInput)) {
    ... guess is correct code ...
} else {
    ... guess is incorrect code ...
}
</code></pre>
    </div>