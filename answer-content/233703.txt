<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of call, <code>theList</code> is not a good name for that variable. You can be much more specific in your case! I'd suggest <code>months</code>.</p>

<p>Also, there is no need to have all of those lists hard-coded in your script. Use a single instance of that list, and then create modified versions as you need them.</p>

<p>Edit: I was absolutely sure that there has to be a Python library that has the names already covered, but failed to find it. <a href="https://codereview.stackexchange.com/a/233705/92478">RomanPerekhrest</a> beat me here and correctly identified <a href="https://docs.python.org/3/library/calendar.html#calendar.month_abbr" rel="noreferrer"><code>calendar.month_abbr</code></a> as the way to go.</p>

<p>A <a href="https://realpython.com/list-comprehension-python/" rel="noreferrer">list comprehension</a> like below could to the trick:</p>

<pre><code>months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
current_month = datetime.now().month - 1
print([months[(current_month + i) % 12] for i in range(12)])
</code></pre>

<p>Or you can use <a href="https://python-reference.readthedocs.io/en/latest/docs/brackets/slicing.html" rel="noreferrer">slicing</a> to get it even more comfortable:</p>

<pre><code>months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
current_month = datetime.now().month - 1
print(months[current_month:]+months[:current_month])
</code></pre>

<p>If performance ever should become a concern, you could create a look-up using a dictionary  beforehand, so that the computation does not have to be repeated:</p>

<pre><code>MONTHS_TO_COME = {i+1: months[i:]+months[:i] for i in range(12)}

# ... other code ...

month = datetime.now().month
print(MONTHS_TO_COME[month])
</code></pre>

<p>Oh, and maybe have a look at the "official" <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Style Guide for Python Code</a>, aka PEP 8, for some hints on idiomatic formatting commonly found in Python code (e.g. <code>lower_case_with_underscores</code> in variable names).</p>
    </div>