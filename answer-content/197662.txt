<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Initialize your variables:</h2>

<p>Leaving variables in uninitialized states is generally a bad idea, get into the habit of always giving them a value:</p>

<pre><code>int T = 0;
</code></pre>

<p>The small additional amount of work required will soon become second nature, and in the long run, the bugs prevented by having that reflex are well worth the trouble. The successors to C++ (Rust and D) make you jump through hoops to create uninitialized variables for that very reason.</p>

<h2>Do not use scanf(), it's a pure C function, use std::cin instead</h2>

<pre><code>int T = 0;
std::cin &gt;&gt; T
</code></pre>

<h2>Use the standard data structures</h2>

<p>All of your node insert/remove code is already provided by the STL under <code>std::list&lt;&gt;</code>. You should use that instead, it's way safer.</p>

<p>To give you an idea, your code as written has memory leaks all over the place, <code>std::list&lt;&gt;</code> takes care of all your memory management, so you don't have to worry about it.</p>

<p>It's also guaranteed to work, unlike your code which appears to get you stuck in an infinite loop.</p>

<p>Speaking of memory management:</p>

<h2>do not use malloc, use new instead</h2>

<p>It's not just that new is better, the following line leads to invalid C++ code.</p>

<pre><code>struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
</code></pre>

<p>There is no <code>Node</code> object created, ever, all you are doing is interpreting raw memory as if it was a <code>Node</code> object, which is a violation of the language, <strong>even if it works</strong>.</p>

<h2>Be consistent!</h2>

<pre><code>while(T--)
for(int i = 0; i &lt; N; i++)
</code></pre>

<p>When you don't need the index, both of these are valid ways of iterating N times, but you should stick to one approach, and not randomly mix-and-match.</p>
    </div>