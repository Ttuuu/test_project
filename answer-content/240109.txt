<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is readable and easy to understand. Said that I would like to make you think about how you handle the operations in your BSTree.</p>

<p>You are building the functions <strong>alone</strong>, and what that causes is to manually manage these functions and compromise the structure of your tree if accidentally you write something wrong. </p>

<p>You should opt for an Internal management rather than external one. For example:</p>

<pre class="lang-cpp prettyprint-override"><code>struct BinaryNode
{
    int label_;
    Node* left_;
    Node* right_;

    //having constructors makes you write less code

    BinaryNode(Node *left, const int &amp;label, Node *right) : 
        label_(label), left_(left), right_(right)
    {
    }

    //const [datatype]&amp; 
    //means to not copy the value of the parameter
    BinaryNode(const int &amp;label) :
    //nullptr is typesafe use it instead of NULL which is a macro
        label_(label), left_(nullptr), right_(nullptr)
    {
    }

    ~BinaryNode() {
        delete left_;
        delete right_;
    }
};

class BinarySearchTree
{
private:
    BinaryNode *root_;

protected://if some derived class is needed (as an AVLTree)
    //Google about virtual functions for abstract classes (pure virtual too)
    virtual void Insert(const int &amp;x, Node *node)
    {
        if (x &lt; node-&gt;label_)
            if (node-&gt;left_ == nullptr)
                node-&gt;left_ = new BinaryNode(t);
            else Insert(t, node-&gt;left_);
        else if (x &gt; node-&gt;label_)
            if (node-&gt;right_ == nullptr)
                node-&gt;right_ = new BinaryNode(t);

        //If x is in the tree it does not include x again
    }

public:
    virtual void Insert(const int &amp;x)
    {
        Insert(x, this-&gt;root_);
    }
};
</code></pre>

<p>Don't misunderstand me, Your code is useful and is pretty (is something good to read). But, manage things externally can be messy.</p>

<p>Also, I recommend you to read the <a href="https://google.github.io/styleguide/cppguide.html" rel="nofollow noreferrer">Google C++ Code Style</a></p>

<p>Hope it helped.</p>

<h3>Edit: What does <code>const int&amp; x</code> means?</h3>

<p><code>const int&amp; x</code> is a <em>constant reference</em> to a value of type <code>int</code> so, when you use it, your function does not <em>copy</em> the sent value, instead it "sees where the value is allocated" takes it in account and then starts the procedure you describe within the function, additionally you cannot modify that value (because it's constant [<code>const</code>])</p>

<p><strong>the main difference is</strong> with <code>const [datatype]&amp;</code> you save space. With <code>[datatype] [paramName]</code> you Copy the value which implies allocate the copied value.</p>

<p>If you feel lost in some part read it slowly it has many concepts, and remember practice makes this make sense.</p>
    </div>