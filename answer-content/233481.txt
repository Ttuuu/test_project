<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My own contribution.</p>

<p>I took inspiration from 409_Conflict and made a lazy generator which takes sorted iterables.</p>

<p>I further generalized it to accept an arbitrary (but non-zero) number of iterables and return their mutual intersection.</p>

<p>The time complexity of this algorithm is <span class="math-container">\$O(n^2*\min\{\text{len}(it) \ \vert\  it \in \texttt{iterables}\})\$</span> where <span class="math-container">\$n = \text{len}(\texttt{iterables})\$</span>. Using some smart datastructure such as Fibonacci heap, the asymptotic complexity could be improved at the cost of actual performance (and also readability and such).</p>

<pre><code>import contextlib

def all_equal(items):
  """
  Returns `False` if and only if there is an element e2 in `items[1:]`,
  such that `items[0] == e2` is false.
  """
  items_it = iter(items)
  try:
    first_item = next(items_it)
  except StopIteration:
    return True

  return all(first_item == next_item for next_item in items_it)


def sorted_iterables_intersection(*iterables):

  iterators = [iter(iterable) for iterable in iterables]

  with contextlib.suppress(StopIteration):
    while True:
      elems = [next(it) for it in iterators]

      while not all_equal(elems):
        # Find the iterator with the lowest value and advance it.
        min_idx = min(range(len(iterables)), key=elems.__getitem__)
        min_it = iterators[min_idx]
        elems[min_idx] = next(min_it)

      yield elems[0]
â€‹
</code></pre>
    </div>