<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your original implementation of <code>throwLoadedDie</code> performs some unnecessary computations on each call,
namely</p>

<pre><code>rawMassDist = [11, 17, 39, 44, 21, 11]
massDist = [float(i)/sum(rawMassDist) for i in rawMassDist]
</code></pre>

<p>are computed on every call. Simply moving them to the <code>if</code>'s body like</p>

<pre><code>if (idxRandom % 1000) == 0:
    rawMassDist = [11, 17, 39, 44, 21, 11]
    massDist = [float(i) / sum(rawMassDist) for i in rawMassDist]
</code></pre>

<p>brought the computation time down from around 18s to less than 6s on my old laptop.
Of course this can be optimized even further, since the weights don't change at all during the computation.</p>

<p>Combining this with a cool Python feature called <em>generator expression</em>, respectively the <code>yield</code> keyword, you can build something like</p>

<pre><code>def throw_loaded_die(raw_mass_dist=(11, 17, 39, 44, 21, 11)):
    """return one random value from [1,6] following a probability density"""
    throws = []
    mass_dist_sum = sum(raw_mass_dist)
    mass_dist = [float(i) / mass_dist_sum for i in raw_mass_dist]
    while True:
        if not throws:
            throws = random.choices((1, 2, 3, 4, 5, 6), mass_dist, k=1000)
        yield throws.pop()

loaded_throws = throw_loaded_die()
</code></pre>

<p>which you can use like <code>sum(next(loaded_throws) for _ in range(8))</code> in the <code>throw_dice</code>. As <a href="https://codereview.stackexchange.com/users/154946/georgy">@Georgy</a> pointed out in a comment, <code>random.choices</code> also works fine with <code>raw_mass_dist</code>, so there is no strict need to normalize for the non-NumPy version. For further explanations see <a href="https://stackoverflow.com/q/231767/5682996">this excellent Stack Overflow post</a>.</p>

<p>I also created a version using NumPy and indexing - much like your original solution - to see if the performance can be improved even further.</p>

<pre><code>    """return one random value from [1,6] following a probability density"""
    throws = []
    mass_dist = numpy.array(raw_mass_dist) / numpy.sum(raw_mass_dist)
    idx = 1000
    while True:
        if idx &gt;= 1000:
            idx = 0
            throws = numpy.random.choice((1, 2, 3, 4, 5, 6), p=mass_dist, size=(1000, ))
        yield throws[idx]
        idx += 1
</code></pre>

<p>This implementation performs on par with my first proposed implementation when used in your script without any further changes. Some more extensive timing suggests that the NumPy/indexing version will win if you increase the number of throws significantly.</p>
    </div>