<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>isdigit()</h1>

<p><a href="https://docs.python.org/3/library/stdtypes.html?highlight=isdigit#str.isdigit" rel="nofollow noreferrer"><code>str.isdigit()</code></a> does not do what you think it does. <code>"1²³4".isdigit()</code> returns <code>True</code> because all the character in the string look like digits, despite some of them being superscripts.  You want the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=isdigit#str.isdecimal" rel="nofollow noreferrer"><code>str.isdecimal()</code></a> function, which returns <code>True</code> if all the characters are in the set of the 10 decimal characters (ie, base-10).</p>

<h1>Dictionaries</h1>

<p>You should be using dictionaries.</p>

<p>The character's stats, for instance, should be in <code>self.stat</code>, initialized with:</p>

<pre><code>self.stat = { 'strength': strength,
              'intelligence': intelligence,
              'agility': agility,
              'defence': defence,
            }
</code></pre>

<p>Then opposed to writing code <code>getattr(self, stat)</code>, you would code <code>self.stat[stat]</code>.  In particular:</p>

<pre><code>        for stat in ['strength', 'intelligence', 'agility', 'defence']: 
            if abi.stat == stat and getattr(self, stat) &gt;= abi.minimum_stat:
</code></pre>

<p>should be coded:</p>

<pre><code>        if self.stat[abi.stat] &gt;= abi.minimum_stat:
</code></pre>

<p>No need to loop over all stats, looking for the correct one.  You know what the correct stat is: <code>abi.stat</code>.  Just use it.</p>

<p>When you do want to iterate over them, instead of:</p>

<pre><code>            for stat in ['strength', 'intelligence', 'agility', 'defence']:
                current_stat = getattr(self, stat)
                upgrade = num_input(f'--- {stat.capitalize()}: {current_stat} ({points} points remaining) Add: ')
</code></pre>

<p>you could write:</p>

<pre><code>            for stat in self.stat:
                current_stat = self.stat[stat]
                upgrade = num_input(f'--- {stat.capitalize()}: {current_stat} ({points} points remaining) Add: ')
</code></pre>

<p>or even:</p>

<pre><code>            for stat, current_stat in self.stat.items():
                upgrade = num_input(f'--- {stat.capitalize()}: {current_stat} ({points} points remaining) Add: ')
</code></pre>

<p>As of Python 3.7, (and CPython 3.6 implementation) dictionary order is guaranteed to be insertion order, so your stats will stay in the order you expect.</p>

<hr>

<p>Similarly, <code>self.abilities</code> should not be a list, it should be a dictionary.  Then instead of this code:</p>

<pre><code>                if self.abilities == []:
                    ability_list.append(abi)
                else:
                    if check_ab(abi, self.abilities):
                        ability_list.append(abi)
</code></pre>

<p>You can get rid of the <code>check_ab</code> function, and simply have:</p>

<pre><code>                if abi.name not in self.abilities:
                    ability_list.append(abi)
</code></pre>

<h1>Enumeration</h1>

<pre><code>        for i, abi in enumerate(ability_list):
            print(f'{i + 1}) {abi} ({abi.lvl}/{abi.max_lvl}): {abi.desc}')
        choice = num_input()
        cls()
        if choice &gt; len(ability_list) or choice == 0:
            print('--- Invalid choice')
            continue
        for i, abi in enumerate(ability_list):
            if choice == i + 1:
</code></pre>

<p>The <a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate" rel="nofollow noreferrer"><code>enumerate(iterable, start=0)</code></a> by default starts at zero, but it doesn't have to.  You could easily make it start at 1, eliminating the need for all those <code>+ 1</code> calculations.</p>

<pre><code>        for i, abi in enumerate(ability_list, 1):
            print(f'{i}) {abi} ({abi.lvl}/{abi.max_lvl}): {abi.desc}')
        choice = num_input()
        cls()
        if choice &gt; len(ability_list) or choice == 0:
            print('--- Invalid choice')
            continue
        for i, abi in enumerate(ability_list, 1):
            if choice == i:
</code></pre>
    </div>