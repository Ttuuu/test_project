<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strong><code>valid_args</code></strong> is a well-known anti-idiom:</p>

<pre><code>    if (condition) {
        return true;
    }
    return false;
</code></pre>

<p>is a long way to say</p>

<pre><code>    return condition;
</code></pre></li>
<li><p><strong><code>crack</code></strong> always return an empty string <code>""</code>. It is as good as returning nothing.</p></li>
<li><p><strong><code>check</code></strong> terminates the program on success. This seriously limits its utility: the business logic doesn't belong to such depth of the call tree. Consider returning a boolean instead.</p></li>
<li><p>I do not endorse recursion when an iterative approach suffices. Try to express a power set generation iteratively (hint: think of base-52 numbers).</p></li>
<li><p>From what we can see, it is impossible to tell whether <code>crypt</code> returns a static buffer, or allocates a new one for each call. Consider documenting that.</p></li>
<li><p>I happen to know that <code>&lt;cs50.h&gt;</code> defines <code>string</code> as an alias to <code>char *</code>. I don't think it is a good idea to begin with; in any case you should be consistent: <code>brute_force</code> passes <code>salt</code> and <code>hash</code> as <code>string</code>, while <code>check</code> receives them as <code>char *</code>.</p></li>
</ul>
    </div>