<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These are all relatively minor notes:</p>

<ol>
<li><p>You can use <code>typing.List</code> to provide a better type definition for the parameter (<code>List[str]</code>), precisely defining what it's a list of.</p></li>
<li><p>I always try to avoid giving variables names that are just a variation on the Python type to tell me what its type is (that's the type annotation's job); the problem description calls this the "matrix" so I'll use that.</p></li>
<li><p>If the problem description doesn't say what to do with invalid input, I'd assume it's fine (and preferable) to just let the code raise an exception if any assumptions are violated.</p></li>
<li><p>If you're checking that a bunch of iterable conditions are all true, I think it generally looks nicer to use the <code>all</code> function than to do a bunch of <code>and</code>s.</p></li>
<li><p>For iterating over indices (i.e. where it's super obvious from context what the variable represents and a longer name only serves to distract) I always prefer using short, generic variable names like <code>i, j</code> or <code>x, y</code>.</p></li>
</ol>

<pre><code>from typing import List

VOWELS = "aeiouAEIOU"

def find_vowel_square(matrix: List[str]):
    """Return the top left grid ref of any 2x2 sq composed of vowels only

    If more than one 2x2 sq exists. Return that which is at the most top-left
    position.
    """
    for y in range(len(matrix) - 1):
        for x in range(len(matrix[y]) - 1):
            if all (matrix[i][j] in VOWELS 
                    for i, j in [(y, x), (y+1, x), (y, x+1), (y+1, x+1)]):
                return f"{x}-{y}"

    return "Not found"
</code></pre>
    </div>