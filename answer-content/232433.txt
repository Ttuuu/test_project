<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>More efficient and accurate is a bit shift.</p>

<pre><code>this.treeArray =  new int[(int) Math.pow(2, treeDepth)];
treeArray =  new int[1 &lt;&lt; treeDepth];
</code></pre>

<p>A test is in order for the top:</p>

<pre><code>if (0 &gt; treeDepth || treeDepth &gt; 31) {
    throw new IllegalArgumentException();
}
</code></pre>

<p>The name <code>returnRightSubTree</code> is a bit irritating because of that <code>return</code>, synonymical <code>yieldRightSubTree</code> or <code>get/create</code>.</p>

<pre><code>  public Tree returnLeftSubTree() {
    return yieldSubTree(false);
  }

  public Tree returnRightSubTree() {
    return yieldSubTree(true);
  }

  private Tree yieldSubTree(boolean right) {
    if (depth == 0) return null;

    Tree ret = new Tree(depth - 1);
    int[] trees = ret.getTreeArray();
    for (int i  = 1; i &lt; depth; i++) {
      int iTarget = 1 &lt;&lt; (i - 1);
      int iSource = (1 &lt;&lt; i) + (right ? 1 &lt;&lt; (i - 1)) : 0);
      for (int j  = 0; j &lt; depth - 1; j ++) {
        trees[iTarget + j] = trees[iSource + j];
      }
    }
    return ret;
  }
</code></pre>

<p>which could be faster using <code>System.arraycopy</code>:</p>

<pre><code>  private Tree yieldSubTree(boolean right) {
    if (depth == 0) return null;

    Tree ret = new Tree(depth - 1);
    int[] trees = ret.getTreeArray();
    for (int i  = 1; i &lt; depth; i++) {
      int iTarget = 1 &lt;&lt; (i - 1);
      int iSource = (1 &lt;&lt; i) + (right ? 1 &lt;&lt; (i - 1)) : 0);
      System.arraycopy(trees, iSource, trees, iTarget, depth - 1);
    }
    return ret;
  }
</code></pre>

<p>The <code>i</code> dependent expression <em>before</em> the <code>j</code> loop. As you see, just as i++
one could have (but not necessarily):</p>

<pre><code>    for (int i  = 1, iT = 1; i &lt; depth; i++, iT &lt;&lt;= 1) {
      //int iTarget = iT;
      int iSource = (iT &lt;&lt; 1) + (right ? iT : 0);
</code></pre>

<p>For the rest:</p>

<p>Tab indentation in java is 4. Historically a tab size of 3 was often for C/C++,
and for academic reasons: <em>"there should be less long code with nesting in favour of
more methods"</em> 4 was chosen; also as 8 was the archaic system tab size.</p>

<p>A tab size of 2 is still seen in XML/HTML, but I would refrain from that. Especially
as with lambdas one gets more unreadable indentations.</p>
    </div>