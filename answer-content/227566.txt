<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>let</h1>

<p>If you use let, you ask Kotlin to create an invisible function with a parameter.</p>

<pre><code>1.let { println(5) }
    //changes to:
    fun func(it : Int) {
        println(5)
    }
    func(1)
</code></pre>

<p>Do you see the <em>it</em>? That's the name of the parameter.
Therefor, you can use <em>it</em> inside let.</p>

<pre><code>1.let { println(it) }
//changes to
fun func(it : Int) {
    println(it)
}
func(1)
</code></pre>

<p>Now, the function returns something too, namely the result of the last statement. 
In this case, it's just Unit, or void in Java (emptyNess):</p>

<pre><code>fun func(it : Int) : Unit {
    return println(it)
}
func(1)
</code></pre>

<p>If we take another example, it will be clearer:</p>

<pre><code>val a = 5.let { 3 + it }
//changes to
fun func(it: Int) : Int {
     return 3 + it
}
val a = func(5)
</code></pre>

<h1>?.let</h1>

<p>?. is very simple:</p>

<pre><code>val b = a?.foo()
//changes to:
val b = if (a == null) a else a.foo()
</code></pre>

<p>?.let is exactly the same:</p>

<pre><code>val b = a?.let { it+3 }
//changes to
fun func(it: Int){
   it + 3
}
val b = if (a == null) null else func(a)
</code></pre>

<h1>inline</h1>

<p>Kotlin is smart. it actually uses an inline function for let.<br>
An inline function is a function that actually doesn't exist.<br>
Instead, the code is copy pasted into the real code.<br>
The parameters are just variables with random names.</p>

<p>so</p>

<pre><code>val b = a?.let { it + 3 }
//is actually changed to
val b = if (a == null) null else {
    val ac432cd = a
    ac432cd + 3
}
</code></pre>

<h1>simplyfication</h1>

<pre><code>roomGrid[gridX][gridY - 1]?.let { room?.setNeighbor(Room.SOUTH, it) }
</code></pre>

<h2>step 1</h2>

<pre><code>// I would check room first:
if (room != null) {
   roomGrid[gridX][gridY - 1]?.let { room.setNeighbor(room.SOUTH, it) }
}
</code></pre>

<h2>step 2</h2>

<pre><code>// flip the rooms (and directions)
if (room != null) {
   roomGrid[gridX][gridY - 1]?.let{ it.setNeighbor(room.SOUTH, room) }
}
</code></pre>

<h2>step 3</h2>

<pre><code>//remove let
if (room != null) {
   roomGrid[gridX][gridY - 1]?.setNeighbor(room.SOUTH, room)
}
</code></pre>

<p><strong>full code until now</strong></p>

<pre><code> // neighbor relations
for (gridY in 0 until roomCountY) {
    for (gridX in 0 until roomCountX) {
        val room = roomGrid[gridX][gridY]
        if (room != null) {
            if (gridY &gt; 0)
                roomGrid[gridX][gridY - 1]?.setNeighbor(Room.NORTH, room)
            if (gridY &lt; roomCountY - 1)
                roomGrid[gridX][gridY + 1]?.setNeighbor(Room.SOUTH, room)
            if (gridX &gt; 0)
                roomGrid[gridX - 1][gridY]?.setNeighbor(Room.EAST, room)
            if (gridX &lt; roomCountX - 1)
                roomGrid[gridX + 1][gridY]?.setNeighbor(Room.WEST, room)
        }
    }
}
</code></pre>

<h2>step 4</h2>

<p>At the moment, we test in the beginning if <code>room</code> isn't null.<br>
If it is, it skips the if-statement and continues with the next iteration.<br>
We can tell to go to the next iteration immediately using the keyword continue.</p>

<pre><code>// neighbor relations
for (gridY in 0 until roomCountY) {
    for (gridX in 0 until roomCountX) {
        val room = roomGrid[gridX][gridY]
        if (room == null) continue
        if (gridY &gt; 0)
            roomGrid[gridX][gridY - 1]?.setNeighbor(Room.NORTH, room)
        ...
    }
}
</code></pre>

<h2>step 5</h2>

<p>last, kotlin has another language feature: <code>?:</code></p>

<pre><code>val a = foo() ?: bar()
//will be rewritten to
val tmp = foo()
val a = if (tmp != null) tmp else bar()
</code></pre>

<p>Just as <code>return</code> <code>continue</code> skips immediately to the next variable.
This means that we can rewrite the code we wrote in step 4.</p>

<pre><code>// neighbor relations
for (gridY in 0 until roomCountY) {
    for (gridX in 0 until roomCountX) {
        val room = roomGrid[gridX][gridY] ?: continue
        if (gridY &gt; 0)
            roomGrid[gridX][gridY - 1]?.setNeighbor(Room.NORTH, room)
        ...
    }
}
</code></pre>

<h2>full code</h2>

<pre><code> // neighbor relations
for (gridY in 0 until roomCountY) {
    for (gridX in 0 until roomCountX) {
        val room = roomGrid[gridX][gridY] ?: continue
        if (gridY &gt; 0)
            roomGrid[gridX][gridY - 1]?.setNeighbor(Room.NORTH, room)
        if (gridY &lt; roomCountY - 1)
            roomGrid[gridX][gridY + 1]?.setNeighbor(Room.SOUTH, room)
        if (gridX &gt; 0)
            roomGrid[gridX - 1][gridY]?.setNeighbor(Room.EAST, room)
        if (gridX &lt; roomCountX - 1)
            roomGrid[gridX + 1][gridY]?.setNeighbor(Room.WEST, room)
    }
}
</code></pre>
    </div>