<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have comments on the technical and functional (design) levels: </p>

<h2>Technical notes</h2>

<ol>
<li><p>I can see you know about variable inheritance when you defined <code>value</code> to be protected. So why are <code>name</code> and <code>level</code> private if every subclass has them defined as well? do you really need to have a <em>different</em> name for a Weapon and for its super Item? </p></li>
<li><p>You need to take all the "magic numbers" out of the source code and put them in properties files.  by "magic numbers" I don't mean just the numerical literals (level ranges, values etc) I also mean all the item names. There are <em>at least</em> three good reasons for that:<br>
the first and obvious is to avoid typos, so if you ever need to compare some item's name, it absolutely has to be defined in one place and one place only. so declaring a constant like <code>public static final String SLIME_DROP = "Slime Drop";</code> would suffice, but then there is also<br>
reason #2) you will want to tweak and balance the items. for example, you may find that a certain weapon is too weak etc.  it is way more easier to modify values in properties files than inside the source code.<br>
reason #3) let us not forget modding - letting others modify and extend your game. by externalizing data as much as possible, you make their work that much easier as well.</p></li>
</ol>

<h2>Design notes</h2>

<p>While it is feasible to have Weapon, Armor and the rest as sub classes of <code>Item</code>, I would go for the design of composition, meaning that Weapon, Armor and the rest are <em>types</em> of Items - Weapons are all items that do damage - i.e. reduce the player's stats (health. mana etc), Armor do the opposite, increase player's stats, and so on. I would create a class <code>ItemType</code> that can be either <code>Weapon</code>, <code>Armor</code>, <code>Medical</code> or <code>Misc</code>.  the <code>Item</code> class will have a reference to an <code>ItemType</code> instance so that <code>Item</code> with <code>"Medicinal Herb"</code> name will have a <code>Medical</code> type. the advantage of this approach is that you can have items that have multiple types: a magic spell that takes health from the target and gives it to the caster. an armor that gives electrical shock when is hit with melee weapon. </p>
    </div>