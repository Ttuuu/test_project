<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><a href="https://refactoring.guru/smells/feature-envy" rel="nofollow noreferrer">Feature Envy</a></h1>

<p>The <code>LoanAccountService</code> needs to know all fields from <code>LoanAccount</code> that gets updated:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>account.get().setCreationDate(loanAccount.getCreationDate());
account.get().setLoanAmount(loanAccount.getLoanAmount());
account.get().setNumberOfInstallments(loanAccount.getNumberOfInstallments());
account.get().setType(loanAccount.getType());
</code></pre>
</blockquote>

<p>Now imagine <code>LoanAccount</code> would get a few more fields and they are updateable too but you forgot to change <code>LoanAccountService</code>.. This means <code>LoanAccountService</code> depends on <code>LoanAccount</code>..</p>

<p>A solution would be to add a new method to <code>LoanAccount</code>:</p>

<pre class="lang-java prettyprint-override"><code>public LoanAccount updateBy(LoanAccount other) {
  this.creationDate = other.creationDate();
  this.loanAmount = other.loanAmount();
  this.numberOfInstallments = other.numberOfInstallments();
  this.type = other.type();
  return this;
}
</code></pre>

<h1><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#map-java.util.function.Function-" rel="nofollow noreferrer">Optional#map</a></h1>

<p>The if-statement </p>

<blockquote>
  <p><code>if (account.isPresent()) {</code></p>
</blockquote>

<p>can be replaced by the method <code>map</code> on Optional. With adding the new <code>updateBy</code> method:</p>

<pre class="lang-java prettyprint-override"><code>public LoanAccount updateBy(LoanAccount other) {
  bank.getLoanAccounts()
      .stream()
      .filter(la -&gt; la.getId().equals(other.getId()))
      .findAny()
      .map(loanAccount -&gt; loanAccount.updateBy(other))
      .orElseThrow(() -&gt; new IllegalArgumentException("The object does not exist."));
  return other;
}
</code></pre>

<h1>Further Improvement</h1>

<p>A second <a href="https://refactoring.guru/smells/feature-envy" rel="nofollow noreferrer">Feature Envy</a> is in the following snipped:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>bank.getLoanAccounts()
   .stream()
   .filter(la -&gt; la.getId().equals(loanAccount.getId()))
</code></pre>
</blockquote>

<p>Not the <code>LoanAccountService</code> should filter the data but the <code>Bank</code> itself should filter it:</p>

<pre class="lang-java prettyprint-override"><code>// in Bank.java

public Optinal&lt;List&lt;LoanAccount&gt; findBy(int id) {
   return loanAccounts.stream()
                      .filter(la -&gt; la.getId().equals(id))
                      .collect(Collectors.toList())
}
</code></pre>

<h1>All together</h1>

<pre class="lang-java prettyprint-override"><code>// LoanAccountService.java

public LoanAccount updateBy(LoanAccount other) {
  bank.findBy(other.getId())
      .findAny()
      .map(loanAccount -&gt; loanAccount.updateBy(other))
      .orElseThrow(() -&gt; new IllegalArgumentException("The object does not exist."));
  return other;
}
</code></pre>
    </div>