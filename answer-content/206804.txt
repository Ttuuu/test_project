<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>HTML</h1>

<p>Current convention is to prefer classes over IDs for CSS. </p>

<hr>

<p>Try using to structure your HTML more semantically. For one, use semantic elements instead of <code>div</code> everywhere. One example could be <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output" rel="nofollow noreferrer"><code>output</code></a> for <code>#screen-text</code>.</p>

<p>Also the calculator buttons are structured in the HTML to represent the physical layout instead of a semantical meaning. Instead consider (simplified):</p>

<pre><code>&lt;section class="calculator__digits"&gt;
  &lt;input type="button" value="0"&gt;
  &lt;input type="button" value="1"&gt;
  &lt;input type="button" value="2"&gt;
  &lt;input type="button" value="3"&gt;
  &lt;!-- ... ---&gt;
  &lt;input type="button" value="7"&gt;
  &lt;input type="button" value="8"&gt;
  &lt;input type="button" value="9"&gt;
&lt;/section&gt;

&lt;section class="calculator__operators"&gt;
  &lt;input type="button" value="+"&gt;
  &lt;input type="button" value="-"&gt;
  &lt;input type="button" value="&amp;times;"&gt; &lt;!-- Display proper multiplication/division symbols --&gt; 
  &lt;input type="button" value="&amp;divide;"&gt;
&lt;/section&gt;

&lt;section class="calculator__equals"&gt;
   &lt;input type="button" value="="&gt;
&lt;/section
</code></pre>

<p>This will require more work in the CSS to have it look like a traditional calculator, but
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout" rel="nofollow noreferrer">CSS grid</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" rel="nofollow noreferrer">flex box layouts</a> (which modern browsers support) are very powerful and, for example, allow easy reordering and layouting.</p>

<p>At the very least move the in-line <code>border-radius</code> styles into the CSS, e.g.:</p>

<pre><code>#more-section &gt; button:first-child {
   border-bottom-left-radius: 10px
}

#more-section &gt; button:last-child {
   border-bottom-right-radius: 10px
}
</code></pre>

<hr>

<p>Finally event handlers should be be assign in the JavaScript and not via the <code>on...</code> attributes. For example (assuming the digit buttons have the class <code>button--digit</code>):</p>

<pre><code>document.querySelectorAll(".button--digit").forEach(b =&gt; {
  b.addEventListener("click", event =&gt; {
     buttonPressed(event.target.value);
  });
});
</code></pre>

<p>And as a further step you should look into <a href="https://davidwalsh.name/event-delegate" rel="nofollow noreferrer">event delegation</a> which allows you to put a single event handler on a parent element instead of separate handlers on each button.</p>

<h1>CSS</h1>

<p>Not much to say here, except maybe have a look at the different <a href="http://www.google.de/search?q=css%20methodology" rel="nofollow noreferrer">css methodologies</a> that are out there to learn how to structure CSS.</p>

<h1>JavaScript</h1>

<p>The biggest problem here, is that the code isn't modularized. That means it should be encapsulated in a way that it doesn't potentially interfere with (or is interfered by) other scripts included in the same page. Currently you have multiple global variables and functions. Should another script happen to have one or more global variables or functions with the same name. Have a look at <a href="https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc" rel="nofollow noreferrer">this article</a> (specifically for the start the first section with its four examples) on an introduction to modules.</p>

<p>(Sorry, I have run out of time to write more.)</p>
    </div>