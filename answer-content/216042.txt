<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code has some incorrect assumptions.</p>

<ul>
<li><p>an application may listen on a specific address/port combination; <code>127.0.0.1:port</code> can be available while <code>*:port</code> is not.</p></li>
<li><p>an application may bind a port without listening.  Connects will fail, but so will your own bind.</p></li>
<li><p>a firewall or other mechanism can interfere with connections, generating false positives in your scan.</p></li>
</ul>

<p>The reliable approach is to bind the port, just as your dashboard will, and then release it.</p>

<pre><code>result = sock.bind(('', port))
sock.close()
</code></pre>

<hr>

<p>You'll need to catch the exception and this is a good opportunity to move the whole thing into a function.   That will make the <code>start_dashboard</code> logic cleaner and get rid of boolean loop-terminator <code>scan_ports</code>.    Just exit the loop by <code>return</code>ing the answer.</p>

<pre><code>def next_free_port( port=1024, max_port=65535 ):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    while port &lt;= max_port:
        try:
            sock.bind(('', port))
            sock.close()
            return port
        except OSError:
            port += 1
    raise IOError('no free ports')

def start_dashboard():

    # pass optional second parameter "max_port" here, else scan until a free one is found
    port = next_free_port( os.getenv('DASHBOARD_PORT_ENV_VAR', 8008) )

    dashboard.configure(port=port)
    dashboard.launch()
</code></pre>

<p>You can use netcat to make ports in-use for testing: <code>nc -l -p 9999</code> will listen on port 9999; press control-C to end it.</p>
    </div>