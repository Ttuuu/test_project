<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks like Java. In order to get good at Python, you'll have to give up some of the Java-isms. This code didn't need to be in a class (unless there was some external requirement you didn't show us). A function would have been fine.</p>

<p>Let's start with the iteration. <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">Ned Batchelder</a> gave a talk called <a href="https://youtu.be/EnSu9hHGq5o" rel="nofollow noreferrer"><em>Loop Like a Native</em></a> that contains a lot of great advice for writing looping structures in Python. You should watch that for a lot of pro-tips on basic stuff.</p>

<p>I'm also going to suggest that you either use type annotations, or don't use type annotations. Don't put in some annotations and then leave other type information in the docblock.</p>

<p>So with just those three suggestions, we can change your code to:</p>

<pre><code>def two_sum(array: Sequence[int], target: int) -&gt; List[int]:
    ''' Given an array of integers, return indices of the two numbers such
        that they add up to a specific target.
    '''
    nums_d = {}

    for i, val in enumerate(nums):
        ... as before ...
</code></pre>

<p>Next is your choice of how to check if the complement has been seen before. You are calling the <code>.get()</code> method twice, once for the check and if successful you call it again. This is minor, since you'll only succeed one time. But calling the <code>.get()</code> method and then comparing it will <code>None</code> is more expensive than you may think. Try using the <code>in</code> binary operator instead. And while you're at it, just use <code>dict[key]</code> notation if you know the key is in the dictionary:</p>

<pre><code>    for i, val in enumerate(nums):
        complement = target - val

        if complement in nums_d:
            return [i, nums_d[complement]]

    return []
</code></pre>

<p>It's hard to predict performance improvements. But I think that "less is more", and in this case less opcodes is more fast. Here's what the <a href="https://docs.python.org/3/library/dis.html?highlight=dis#dis.dis" rel="nofollow noreferrer"><code>dis.dis</code></a> output looks like for your original code (starting after the <code>for</code> line):</p>

<pre><code>        &gt;&gt;   18 FOR_ITER                56 (to 76)
             20 STORE_FAST               4 (i)

 10          22 LOAD_FAST                2 (target)
             24 LOAD_FAST                1 (nums)
             26 LOAD_FAST                4 (i)
             28 BINARY_SUBSCR
             30 BINARY_SUBTRACT
             32 STORE_FAST               5 (complement)

 12          34 LOAD_FAST                3 (nums_d)
             36 LOAD_METHOD              2 (get)
             38 LOAD_FAST                5 (complement)
             40 CALL_METHOD              1
             42 LOAD_CONST               1 (None)
             44 COMPARE_OP               3 (!=)
             46 POP_JUMP_IF_FALSE       62
</code></pre>

<p>And here's what the changed code produces:</p>

<pre><code>        &gt;&gt;   14 FOR_ITER                44 (to 60)
             16 UNPACK_SEQUENCE          2
             18 STORE_FAST               3 (i)
             20 STORE_FAST               4 (val)

 21          22 LOAD_FAST                1 (target)
             24 LOAD_FAST                4 (val)
             26 BINARY_SUBTRACT
             28 STORE_FAST               5 (complement)

 23          30 LOAD_FAST                5 (complement)
             32 LOAD_FAST                2 (nums_d)
             34 COMPARE_OP               6 (in)
             36 POP_JUMP_IF_FALSE       50
</code></pre>

<p>The third column (lots of numbers) is byte offset from the start of the code, so you can see the new version takes 6 fewer bytes to run, out of 28 bytes. That's about 21% less.</p>

<p>Does this mean the code will run 21% faster? No. There's lots of other code in there that doesn't change. But it means it probably runs some faster -- you'll have to determine how much.</p>
    </div>