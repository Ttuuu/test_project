<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good question, well formatted, well worked out and implementation seems to work!</p>
<p>First to answer your questions:</p>
<h1>Q1:</h1>
<h2>Constructor:</h2>
<ul>
<li>Check return value of malloc, it could be <code>NULL</code> if it failed (out of memory)</li>
</ul>
<h2>Destructor:</h2>
<ul>
<li>just pass <code>double_list *list</code>, the <code>const</code> there doesn't make sense (not sure why you put it there).</li>
<li>you leak memory, because you don't free <code>list</code>, which you have allocated in the constructor</li>
</ul>
<p>Edit 1:</p>
<p>If you pass in <code>double_list *const list</code> that means the value of list (the pointer) cannot be changed, which doesn't make sense here because the user of this interface holds on to the pointer.</p>
<p>If the <code>const</code> is before the type <code>const double_list *list</code> this means the content of where list is pointing cannot change.</p>
<p>For example if you have a function that takes a string and you want to communicate to the user of this function that the content of the string is not going to change, you should do <code>void foo(const char *bar)</code>. If the function is only <code>foo(char *bar)</code> the user cannot be sure that the content of the string <code>bar</code> is still the same afterwards.</p>
<h1>Q2:</h1>
<ul>
<li>I don't see any issues with the <code>remove</code> and <code>insert</code> functions regarding performance. Insert in the middle is
always going to be O(n). Removing/inserting at head and tail is O(1) which you achieve in your code.</li>
<li>It would be a bit more intuitive if you implemented the simple case of removing head/tail in the function <code>remove_front</code>/<code>remove_back</code>
and used these functions in the generic <code>remove_pos</code> function.</li>
</ul>
<h1>Q3:</h1>
<h2>sorting</h2>
<ul>
<li><code>sort_list</code>: what you could do is setting a flag when the list is ordered so that if it gets ordered again, it's fast (unset the flag when an element is added)</li>
<li>otherwise I don't see any issues with the sorting implementation</li>
</ul>
<h2>reverse</h2>
<p>Your list reverse implementation is O(n) but since you have a doubly linked list you could simple make use of this. You could have two sets of operations on the list, one operates in forward direction, the other one in reverse. Whenever the <code>reverse_list</code> is called you would swap the function set. See the example below:</p>
<pre><code>
struct list_operations
{
    void (*insert_front)(double_list* const list, int val);
    // more functions
};

static const struct list_operations list_operations_forward = 
{
    .insert_front = insert_front_forward,
    // more functions
};

static const struct list_operations list_operations_reverse = 
{
    .insert_front = insert_front_reverse,
    // more functions
};

void reverse_list(double_list* list)
{
    if (NULL == list)
    {
        return
    }

    list-&gt;operations = (list-&gt;operations == &amp;list_operations_forward)?&amp;list_operations_reverse:&amp;list_operations_forward;
}

</code></pre>
<h1>More general feedback:</h1>
<h2>Hide private information</h2>
<p>You leak some of the the details in the h file. You probably don't want that a user of your <code>double_list</code> library
can mess with the nodes, therefore you should hide it and add functions to get the value.
The h file would look like follows:</p>
<pre><code>typedef struct double_list_s double_list_t;

double_list* create_list();
void destroy_list(double_list* list);

void insert_pos(double_list *list, int index, int val);
void insert_front(double_list *list, int val);
void insert_back(double_list *list, int val);

void remove_pos(double_list *list, int index);
void remove_front(double_list *list);
void remove_back(double_list *list);

int get_pos(double_list *list, pos);
int get_front(double_list *list);
int get_back(double_list *list);

void sort_list(double_list *list); // selection sort
void reverse_list(double_list *list);
</code></pre>
<h2>Remove the const</h2>
<p>You are passing <code>double_list* const list</code>, what are you exactly trying to achieve with the <code>const</code>?</p>
<h2>Inclusion guard missing</h2>
<p>You should add the following:</p>
<pre><code>
#ifndef __DOUBLE_LIST_H__
#define __DOUBLE_LIST_H__

// snip

#endif

</code></pre>
<h2>Remove the includes in the h file</h2>
<p>The includes should go in the c files only. Otherwise you can run into cyclic inclusions.</p>
<h2>the pointer star sticks to the variable</h2>
<p>e.g. not good: <code>char* b</code></p>
<p>better: <code>char *b</code></p>
<p>otherwise it looks weird if you have following declaration:</p>
<p><code>char* b, *a</code> vs (<code>char *b, *a</code>)</p>
<h2>Check for NULL</h2>
<p>Check the <code>list</code> argument for NULL in the functions</p>
<h2>Check for NULL after allocating</h2>
<p>When you allocate the nodes, you should also check if <code>malloc</code> returned <code>NULL</code>.</p>
<h2>Testing</h2>
<p>When you add to your list, you add the element in 1,2,3 order, so <code>sort_list</code>  is not doing much.</p>
<h2>Naming the functions</h2>
<p>When it comes to naming functions it certainly comes down to personal taste but I would stick with
common expressions. For example <code>back</code> and <code>front</code> are a bit uncommon, I think <code>head</code> and <code>tail</code>
describe better what the functions to.</p>
<p>Also it makes your interface a bit cleaner if you name them consistently</p>
<pre><code>list_create()
list_destroy()

list_pos_insert()
list_head_insert()
list_tail_insert()

list_pos_remove()
list_head_remove()
list_tail_remove()

list_sort()
list_reverse()
</code></pre>
<p>Just let me know if something is unclear, codereview "forgot" half of my text so I rushed it a bit to write it down again.</p>
    </div>