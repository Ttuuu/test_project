<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You do a lot of manipulation of bytes to construct larger structures, which you then operate on. I'd suggest looking at the standard module <code>struct</code> which can do a lot of this for you in a way that is much easier to grasp.</p>

<p>Also, if you're going to read some bytes and then read them a second time, why not just read them into memory and operate on them twice?</p>

<p>Finally, your output appears to be text. Instead of <code>write()</code> why not use <code>print ()</code>?</p>

<p><strong>Update:</strong></p>

<p>Now that I'm not on a cell phone, let me expand a bit.</p>

<p>First, I'll point you to <a href="https://stackoverflow.com/a/1163508/4029014">this excellent answer</a> to a question on reading 32-bit values on SO. With that as a starting point, here's a function that does the same thing (plus a helper function that gets re-used below):</p>

<pre><code>import struct # Top of file

def read_buffer(binfile, size):
    """ Read in size bytes from binfile, or else!
    """
    buffer = binfile.read(size)

    if buffer is None or len(buffer) != size:
        raise EOFError

def read_uint32_le(binfile):
    """ Reads an unsigned 32-bit, little-endian integer value from binfile.
    """
    buffer = read_buffer(binfile, 4)
    u32 = struct.unpack('&lt;I', buffer)[0] # unpack always returns tuple
    return u32
</code></pre>

<p>With this function, I can rewrite some of your code:</p>

<pre><code>while f.tell() != fSize:
    for j in range(4):
        b = f.read(1)
        b = b.encode('hex').upper()
        tmpHex = b + tmpHex
    tmpHex = ''
    for j in range(4):
        b = f.read(1)
        b = b.encode('hex').upper()
        tmpHex = b + tmpHex
    resList.append('Block size = ' + tmpHex)
</code></pre>

<p>Becomes:</p>

<pre><code>while f.tell() != fSize:
    ignored = read_uint32_le(f)
    blk_size = read_uint32_le(f)
    reslist.append(f"Block size = {blk_size:08X}")
</code></pre>

<p>And the remainder benefits greatly from the fact that there's a <a href="https://docs.python.org/3/library/stdtypes.html#bytes.hex" rel="nofollow noreferrer"><code>bytes.hex()</code></a> method:</p>

<pre><code>tmpHex = ''
tmpPos3 = f.tell()
while f.tell() != tmpPos3 + 80:
    b = f.read(1)
    b = b.encode('hex').upper()
    tmpHex = tmpHex + b
tmpHex = tmpHex.decode('hex')
tmpHex = hashlib.new('sha256', tmpHex).digest()
tmpHex = hashlib.new('sha256', tmpHex).digest()
tmpHex = tmpHex.encode('hex')
tmpHex = tmpHex.upper()
tmpHex = reverse(tmpHex)
resList.append('SHA256 hash of the current block hash = ' + tmpHex)
f.seek(tmpPos3,0)
tmpHex = ''
for j in range(4):
    b = f.read(1)
    b = b.encode('hex').upper()
    tmpHex = b + tmpHex
resList.append('Version number = ' + tmpHex)
tmpHex = ''
</code></pre>

<p>Becomes:</p>

<pre><code>buffer = read_buffer(f, 30)
hash2 = sha256(sha256(buffer)).hex().upper()
reslist.append(f"SHA256 hash of the current block hash = {hash2}")
version = struct.unpack_from('&lt;I', buffer)[0] # returns a tuple
reslist.append(f"Version number = {version:08X}")
</code></pre>
    </div>