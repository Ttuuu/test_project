<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A refinement for your first <code>solution()</code>: after you sort the list, you can just go through it in double-steps, comparing the neighboring elements. When they differ, the first one is what you are looking for:</p>
<pre><code>def solution(A):
  A.sort()
  index = 0
  while True:
    if A[index] != A[index+1]:
      return A[index]
    index += 2
</code></pre>
<p>Like with the example sorted list from the question:</p>
<pre><code>[1,1,1,1,2,2,3,3,3,4,4,4,4]
 1=1 1=1 2=2 3=3 3!4
                 ^ this is the one missing a pair
</code></pre>
<p>This approach has the complexity of the sorting algorithm, <code>O(n log n)</code> I would assume.</p>
<hr>
Then comes the comment below and handling the unlucky event of having the pair-less element at the very end.
<p>Sticking to minimal modifications:</p>
<pre><code>def solution(A):
  A.sort()
  index = 0
  while True:
    if index+1 &gt;= len(A):
      return A[-1]
    if A[index] != A[index+1]:
      return A[index]
    index += 2
</code></pre>
<p>However if I wrote it from scratch, I would probably use a loop which simply exits and I would also cache <code>len(A)</code>:</p>
<pre><code>def solution(A):
  A.sort()
  limit = len(A) - 2
  index = 0
  while index&lt;limit:
    if A[index] != A[index+1]:
      return A[index]
    index += 2
  return A[-1]
</code></pre>
    </div>