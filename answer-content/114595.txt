<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've got a suggestion to an alternative way of generating your list based on your own thoughts on how the sequence grows. But first a few general remarks related to the style of your code.</p>

<ul>
<li><em>Naming of functions and variables in Python are usually <code>snake_case</code></em> – This indicates that it should be <code>all_rolls</code>, <code>reverse_list</code>, and so on</li>
<li><em>Avoid abbreviations for variable names</em> – Use better descriptive names for all variables. Stuff like <code>cIndex</code>, <code>retVal</code>, <code>nums</code> and <code>newb</code> doesn't describe much on the use and why you have this variables. Better names could be <code>secondary_index</code>, <code>result</code>, <code>dice_numbers</code> and <code>reversed_list</code>...</li>
<li><em>Add more spaces both horizontally and vertically</em> – Be a little more generous with your spaceing. I.e. Use <code>range(2, sides * 2 + 1)</code>, or <code>cIndex += 1</code>, or <code>while index &gt;= 0</code>. In addition you could add vertical space (or blank lines) within a function before new loops or blocks, and the guidelines dictates two blank lines before functions (and classes)</li>
<li><em>Look into <a href="http://www.dotnetperls.com/slice-python" rel="nofollow">slices</a> and use of these</em> –  Slices can solve your problem a lot more elegant, based on your own thinking. The basic examples as some have mentioned already is to use <code>[::-1]</code> to reverse an entire list, in one swift go.</li>
</ul>

<h2>Alternate solutions</h2>

<p>If we look at the case for a 4 sided die, we get the following lists, as based on your suggestion:</p>

<pre><code>2 3 4 5 6 7 8
  3 4 5 6 7    = [ 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8 ]
    4 5 6
      5
</code></pre>

<p>This pattern can easily be regenerated using slicing. The first iteration of the list is simply <code>list(range(2, 2*sides + 1)</code>. The next iteration we skip the first and last element, which can be expressed as the slice <code>[1:-1]</code>. And this we can continue doing until there are no more elements left in the temporary list.</p>

<p>In code this look the following:</p>

<pre><code>def all_rolls(sides):
    """Return sum of all combinations of two dice with given number of sides."""
    result = []
    temp_list = list(range(2, 2*sides+1))

    while temp_list:
        result.extend(temp_list)
        temp_list = temp_list[1:-1]

    return sorted(result)
</code></pre>

<p>Note how I also added a simple, but hopefully sufficient docstring to state what the function is meant to do, and have removed some of the unneeded loops and ranges. </p>
    </div>