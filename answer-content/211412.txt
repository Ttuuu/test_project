<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>This is not what anyone would expect when using a <code>Vector</code>. It's closer to a <code>Deque</code>.</p></li>
<li><p>Use <code>std::size_t</code>, not <code>size_t</code>.</p></li>
<li><p>It looks like we're casting <code>Concept::RESA</code> to <code>size_t</code> every time it's used. Perhaps it should be declared as <code>std::size_t</code> to start with.</p></li>
</ul>

<hr>

<p><a href="https://stackoverflow.com/a/7110262/673679">Inheritance is not a good fit here.</a></p>

<ul>
<li><p><code>std::vector</code> does not have a virtual destructor.</p></li>
<li><p><code>std::vector</code> does not use virtual functions, so the added functions do <strong>not</strong> override the normal functionality. For example, any function that accepts a <code>std::vector&lt;T&gt; const&amp;</code> will accept a <code>Vector&lt;T&gt;</code> argument. It will then call the <code>std::vector</code> interface, and silently do the wrong thing.</p></li>
<li><p><code>std::vector</code> has many other functions, e.g. <code>front()</code>, <code>back()</code>, <code>data()</code>, <code>cbegin()</code> etc. that are accessible to class users due to public inheritance, but will not do the expected thing when called, because they aren't overridden.</p></li>
<li><p>Even if all these other functions are re-implemented, the interface of <code>std::vector</code> may change in future, for example adding a new function. New functions will be accessible, but do something unexpected / wrong.</p></li>
</ul>

<p>In short, we have to use composition here, not inheritance.</p>
    </div>