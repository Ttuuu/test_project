<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Magic Numbers</h1>

<p>From <code>main()</code>, we can see <code>getInput()</code> returns <code>1</code> or some other value.  What input does <code>getInput()</code> get?  What does <code>1</code> mean?  What is the other value?</p>

<p>Consider using named constants, such as:</p>

<pre><code>private final static int ROMAN_TO_ARABIC = 1;
private final static int ARABIC_TO_ROMAN = 2;
</code></pre>

<p>And change <code>getInput()</code> to something more meaning full, like perhaps <code>getConversionDirection()</code>.</p>

<p>The variable <code>decision</code> is equally cryptic.  What decision?   Did the program decide something, or was it a command from the user and not actually a decision by the program?  Maybe <code>conversion_direction</code>, or simply <code>direction</code>.</p>

<p>The <code>if</code>/<code>else</code> statement would be better served by a case statement:</p>

<pre><code>switch (conversion_direction) {
    case ROMAN_TO_ARABIC: {
        ...
    } break;
    case ARABIC_TO_ROMAN: {
       ...
    } break;
}
</code></pre>

<p>This makes it very clear what the choice is all about.</p>

<p>Even better: instead of named integer constants, use an <code>enum</code>:</p>

<pre><code>public enum ConversionDirection { ROMAN_TO_ARABIC, ARABIC_TO_ROMAN };
</code></pre>

<h1>try-with-resources</h1>

<p>Manually closing resources, like the <code>scanner</code> is tedious.  And error prone, especially when exceptions might be raised.</p>

<p>You should use the <code>try-with-resources</code> construct, which automatically closes resources for you.</p>

<pre><code>try (Scanner scanner = new Scanner(System.in) {
    // .... use the scanner here ...
}
// Scanner is automatically closed at this point, even if an exception is raised
</code></pre>

<h1>Too much validation</h1>

<p><code>getRoman()</code> can only return a string which matches <code>"[IVXLCDM]+"</code>.  This precluded <code>null</code> and the <code>""</code>.  Then, <code>romanToArabic()</code> redundantly checks for these conditions.  (Incorrectly, actually.  If <code>number == null</code>, the first part of the expression would generate a <code>NullPointerException</code> before the <code>null</code> check at the end!)  Then, each character of string is yet again tested by <code>getValue()</code> to see if it is in the set <code>IVXLCDM</code>.</p>

<h1>Redundant queries</h1>

<p>The expression <code>number.charAt(i)</code> occurs 6 times inside the <code>while</code> loop.  This would be a good place to use a temporary variable at the start of the loop:</p>

<pre><code>char ch = number.charAt(i);
</code></pre>

<h1>Insufficient validation</h1>

<p><code>IC</code>, <code>IL</code>, <code>IC</code>, <code>ID</code>, <code>IM</code>, <code>VX</code>, <code>VV</code>, <code>DD</code>, <code>XD</code>, <code>XM</code>, <code>VX</code>, and so on are all improper Roman numerals.  Only <code>I</code>, <code>X</code>, and <code>C</code> are legal subtractive prefixes, and only in front of <code>V</code> &amp; <code>X</code> for <code>I</code>, <code>L</code> &amp; <code>C</code> for <code>X</code>, and <code>D</code> &amp; <code>M</code> for <code>C</code>. </p>

<p>Moreover, <code>IX</code> is valid, <code>XIII</code> is valid, but <code>IXIII</code> is not valid.  A subtractive prefix may not be followed by the same suffix, adding what was subtracted.</p>

<p><code>getInt()</code> will catch any exception (it should only catch <code>InputMismatchException</code>), and clear the invalid line.  <code>getInput()</code> doesnâ€™t catch any exception and a bad input will crash the program.</p>

<h1>Recursion</h1>

<p><code>getInt()</code> and <code>getInput()</code> recursively call themselves if out-of-range input is given.  You should use a loop, not recursion.</p>

<h1>Testing</h1>

<p>Testing can be improved by leveraging the <a href="https://junit.org/junit5/" rel="noreferrer"><code>JUnit</code></a> testing framework.  And adding more tests, such as the invalid cases mentioned above.</p>
    </div>