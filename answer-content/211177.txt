<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is the working code</p>

<p>--- App.js ---</p>

<pre><code>import React, { Component } from 'react';
import WeatherCard from './components/WeatherCard';

class App extends Component {
    constructor(props) {
        super(props)

        this.state = {
            data: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday',].map((day, i) =&gt; ({
                day,
                temp: (100 - (i*10))
            }))
        }
    }

    render() {
        return (
            &lt;div className="App"&gt;
                &lt;div className="cards"&gt;
                    {this.state.data.map(card =&gt; &lt;WeatherCard key={card.day} data={card}&gt;&lt;/WeatherCard&gt;)}
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
}
export default App;
</code></pre>

<p>--- WeatherCard.js ---</p>

<pre><code>import sunny from '../img/sunny.png';
import partly from '../img/partly.png';
import cloudy from '../img/cloudy.png';
import rainy from '../img/rainy.png';

import React, { Component } from 'react';

class WeatherCard extends React.Component {
    constructor(props) {
        super(props)

        const { day, temp } = props.data

        this.state = {
            day,
            temp,
            ...this.getData(temp)
        }
    }

    getData = temp =&gt; {
        return [
            {
                value: 95,
                description: 'Sunny',
                image: sunny
            },
            {
                value: 85,
                description: 'Partly Cloudy',
                image: partly
            },
            {
                value: 75,
                description: 'Cloudy',
                image: cloudy
            },
            {
                value: -Infinity,
                description: 'Rainy',
                image: rainy
            },
        ].find(weather =&gt; temp &gt;= weather.value)
    }

    changeTemp = value =&gt; ev =&gt; {
        this.setState(prevState =&gt; ({ 
            temp: prevState.temp + value,
            ...this.getData(prevState.temp + value)
        }))
    }

    render() {
        const { day } = this.props.data
        const { temp, image, description } = this.state

        return (
            &lt;div className="card"&gt;
                &lt;div className="card-head"&gt;{day}&lt;/div&gt;
                &lt;div className="card-body"&gt;
                    &lt;h1&gt;{temp}&lt;/h1&gt;
                    &lt;img src={image} alt={description}&gt;&lt;/img&gt;
                    &lt;p&gt;{description}&lt;/p&gt;
                &lt;/div&gt;
                &lt;div className="controls"&gt;
                    &lt;div className="upButton" onClick={this.changeTemp(1)}&gt;+&lt;/div&gt;
                    &lt;div className="downButton" onClick={this.changeTemp(-1)}&gt;-&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default WeatherCard;
</code></pre>

<p>If I remember correctly I think the biggest issues with what you provided (@Treycos) were reference bugs ('this' not placed where it should have been) - etc. But some really good stuff you provided, thanks again!</p>
    </div>