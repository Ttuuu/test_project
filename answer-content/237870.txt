<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes. You can simplify this code. I made two main changes. </p>

<p>First, I forget that <span class="math-container">\$x_{50}\$</span> is known and write an equation for it just like all the other variables, then I replace that equation by the equation <span class="math-container">\$x_{50}=1\$</span>.</p>

<p>Second, this is a system of linear equations. Notice that on both sides of the equation we have <span class="math-container">\$a_{ij}b_{kij}\$</span> with <span class="math-container">\$\{i,j,k\}=\{s,t,r\}\$</span> on the left and <span class="math-container">\$\{i,j,k\}=\{r,t,s\}\$</span> on the right, and both are summed over <span class="math-container">\$t\$</span> which corresponds to <span class="math-container">\$j\$</span>. So first I find the matrix <span class="math-container">\$C_{ik}=\sum_ja_{ij}b_{kij}\$</span>, which requires quite some tweaking due to the messed up dimensions/slices. Now the equation reads</p>

<p><span class="math-container">\$\displaystyle x_{s}\sum_{r=1}^R C_{sr} = \sum_{r=1}^R C_{rs}x_r \$</span></p>

<p>for each <span class="math-container">\$s\in1,2,\ldots,S\$</span>. The sum of the left is just <code>sum(C,2)</code> in Matlab, and the sum on the right is the matrix multiplication of <span class="math-container">\$C^t\$</span> with the vector of unknowns <span class="math-container">\$\vec x\$</span>. We can write the equation in matrix form as</p>

<p><span class="math-container">\$\displaystyle \vec c\vec x-C\vec x=0 \$</span></p>

<p>where <span class="math-container">\$[\vec c]_s=\sum_r C_{sr}\$</span>. Written another way, we have</p>

<p><span class="math-container">\$\displaystyle \left(\mathrm{diag}(\vec c)-C\right)\vec x=0. \$</span></p>

<p>Now since we know <span class="math-container">\$x_{50}=1\$</span> just replace the last row of the matrix with <span class="math-container">\$[0,0,\ldots,0,1]\$</span>. Then if <span class="math-container">\$M=\mathrm{diag}(\vec c)-C\$</span> our equation is <span class="math-container">\$M\vec x=\vec v\$</span> where <span class="math-container">\$\vec v=[0,0,\ldots,0,1]^t\$</span>. We can solve this system directly using <code>\</code>.</p>

<pre><code>%% Define parameters
T = 3; % Number of types (T)
S = 3; % Number of senders (S)
R = S; % Number of receivers (R), equals the number of senders
A = [.1 .1 .1   % Columns are senders (S), rows are types (T)
     .3 .3 .6
     .6 .6 .3]; 
B1 = [.9 .0 .1     
      .5 .1 .2     
      .8 .2 .1];   
B2 = [.0 .7 .2     
      .2 .9 .0     
      .1 .8 .1];   
B3 = [.1 .3 .7     
      .3 .0 .8     
      .1 .0 .8];   

C = squeeze(sum(A.*cat(3,B1,B2,B3),1)).';

M = diag(sum(C,1))-C; % matrix equations
M(end,:) = [zeros(1,S-1) 1]; % replace the last equation

v = [zeros(S-1,1);1]; % modify final RHS entry

F = M\v;
</code></pre>

<p>An additional benefit is that solving linear systems is much faster than solving nonlinear systems, so this code is much faster. I couldn't test with different <code>R</code>, <code>S</code>, or <code>T</code> so something might have to change, I'm not sure if it will just work, but I think it should.</p>

<hr>

<p>With the new method for generating the equations, we can make a few more simplifications to avoid having to concatenate the <code>Bi</code>'s explicitly, using a cell array:</p>

<pre><code>T = 3; % Number of types (T)
S = 3; % Number of senders (S)
R = S; % Number of receivers (R), equals the number of senders
A = [.1 .1 .1   % Columns are senders (S), rows are types (T)
     .3 .3 .6
     .6 .6 .3]; 
B{1} = [.9 .0 .1     
      .5 .1 .2     
      .8 .2 .1];   
B{2} = [.0 .7 .2     
      .2 .9 .0     
      .1 .8 .1];   
B{3} = [.1 .3 .7     
      .3 .0 .8     
      .1 .0 .8];   

C = squeeze(sum(A.*cat(3,B{:}),1)).';

M = diag(sum(C,1))-C;
M(end,:) = [zeros(1,S-1) 1];

v = [zeros(S-1,1);1];

F = M\v;
</code></pre>
    </div>