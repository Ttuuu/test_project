<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is not a “good” practice at recursion.  Every “recursive” call to <code>jugSolver</code> is the last statement that is executed in the current call, thus the whole function can easily be replaced by a simple loop:</p>

<pre><code>print(amt1, amt2)
while amt1 != t  and  amt2 != t:
    if amt2 = jug2:
        amt2 = 0
    elif amt1 != 0:
        if amt1 &lt;= jug2 - amt2:
            amt1, amt2 = 0, amt1+amt2
        else:
            amt1, amt2 = amt1 - (jug2-amt2), jug2
    else:
        amt1 = jug1
    print(amt1, amt2)
</code></pre>

<p>Your assumption that pouring from the smaller jug into the bigger jug always results in the minimum number of steps is flawed.  Consider <code>t=2</code>.  Your way:</p>

<ul>
<li>5, 0</li>
<li>0, 5</li>
<li>5, 5</li>
<li>3, 7</li>
<li>3, 0</li>
<li>0, 3</li>
<li>5, 3</li>
<li>1, 7</li>
<li>1, 0</li>
<li>0, 1</li>
<li>5, 1</li>
<li>0, 6</li>
<li>5, 6</li>
<li>4, 7</li>
<li>4, 0</li>
<li>0, 4</li>
<li>5, 4</li>
<li><strong>2</strong>, 7</li>
</ul>

<p>Compare with:</p>

<ul>
<li>0, 7</li>
<li>5, <strong>2</strong></li>
</ul>

<p>So you’ll need to relook at solving the problem with different possible moves.</p>
    </div>