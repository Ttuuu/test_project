<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's easier to do it with LINQ which is in this case virtually a <em>one-liner</em>.</p>

<pre><code>var text = "DEFD";

var result = 
    text
    .AsQueryable() // this isn't necessary as noted by @CodesInChaos
    .GroupBy(c =&gt; c.ToString(), c =&gt; c, StringComparer.OrdinalIgnoreCase)
    .Where(g =&gt; g.Count() == 1)
    .Select(g =&gt; g.Key)
    .First(); // this should be FirstOrDefault as noted by @PieterWitvoet
</code></pre>

<hr>

<p>As far as your code is concerned here are a few <em>improvements</em>:</p>

<p>There is no need to convert the string to lower or upper case. Instead you can use the <code>StringComparer.OrdinalIgnoreCase</code>. You can also use this to create a dictionary that is non-case-sensitive:</p>

<pre><code>var dic = new Dictionary&lt;string, int&gt;(StringComparer.OrdinalIgnoreCase);
</code></pre>

<p>You don't have to turn a string into an array, it is an array already so you can simply iterate with a <code>foreach</code> over it.</p>

<p>Now that we know this we can shorten it too (if we are still not going to use linq to help us):</p>

<pre><code>public static string FindFirstNonRepeatingCharacter(string givenString)
{
    var charCounter = new Dictionary&lt;string, int&gt;(StringComparer.OrdinalIgnoreCase);

    foreach (var ch in givenString)
    {
        charCounter[ch.ToString()] = 
            charCounter.ContainsKey(ch.ToString()) 
            ? charCounter[ch.ToString()] + 1 
            : 1;
    }

    foreach (var ch in givenString)
    {
        if (charCounter[ch.ToString()] == 1)
        {
            return ch.ToString();
        }
    }

    return null;
}
</code></pre>

<hr>

<p><strong>EDIT: Performance Tests</strong></p>

<p>I've tested some of the suggestet solutions and here are the results:</p>

<pre><code>Original (ToUpper)            Ü 00:00:00.0962950   100,00 % 
Original (StringComparer)     ü 00:00:00.4488175   466,00 % 
GroupBy (string)              ü 00:00:00.1212308   126,00 % 
GroupBy (char)                ü 00:00:00.0362518    38,00 % 
Indexed                       ü 00:00:00.1571029   163,00 % 
Custom equality char comparer ü 00:00:00.3152172   327,00 %
Not counting chars            Ü 00:00:00.0861682    90,00 % 
</code></pre>

<hr>

<p>Source code:</p>

<pre><code>void Main()
{
    // creating some random test string with 1.000.000 + 1 charachters

    var textBuilder = new StringBuilder();

    var length = 1000000;
    var rnd = new Random((int)DateTime.Now.Ticks);

    for (var i = 0; i &lt; length; i++)
    {
        if (rnd.Next(1, 3) == 1)
            textBuilder.Append((char)rnd.Next(65, 91));
        else

            textBuilder.Append((char)rnd.Next(97, 123));
    }
    textBuilder.Append("ü");

    var text = textBuilder.ToString();

    // test functions and descriptions
    var funcs = new Dictionary&lt;string, Func&lt;string, string&gt;&gt;
    {
        ["Original (ToUpper)"] = FindFirstNonRepeatingCharacter0,
        ["Original (StringComparer)"] = FindFirstNonRepeatingCharacter1,
        ["GroupBy (string) "] = FindFirstNonRepeatingCharacter21,
        ["GroupBy (char) "] = FindFirstNonRepeatingCharacter22,
        ["Indexed"] = FindFirstNonRepeatingCharacter3,
        ["Custom equality char comparer"] = FindFirstNonRepeatingCharacter4,
        ["Not counting chars"] = FindFirstNonRepeatingCharacter5,
    };

    var results = new List&lt;dynamic&gt;();

    // running tests
    foreach (var func in funcs)
    {
        var sw = Stopwatch.StartNew();
        var ch = func.Value(text);
        sw.Stop();

        // gathering results
        results.Add(new
        {
            Func = func.Key,
            Result = ch,
            Elapsed = sw.Elapsed,
            // calculating performance in relation to OP's function
            Difference = string.Format("{0,10:P2}", results.Count == 0 ? 1 : Math.Round(sw.Elapsed.TotalMilliseconds / results[0].Elapsed.TotalMilliseconds, 2) * 1)
        });
    }

    results.Dump();
}
</code></pre>

<p>And the tested methods:</p>

<pre><code>// by @somnia06 (OP)
public static string FindFirstNonRepeatingCharacter0(string givenString)
{
    char nonRepeatingCharacter = ' ';
    Dictionary&lt;char, int&gt; charCounter = new Dictionary&lt;char, int&gt;();
    char[] charArray = givenString.ToUpper().ToCharArray();

    for (int i = 0; i &lt; charArray.Length; i++)
    {
        char currentChar = charArray[i];

        if (charCounter.ContainsKey(currentChar))
        {
            charCounter[currentChar]++;
        }
        else
        {
            charCounter.Add(currentChar, 1);
        }
    }

    for (int i = 0; i &lt; charArray.Length; i++)
    {
        char currentChar = charArray[i];

        if (charCounter[currentChar] == 1)
        {
            nonRepeatingCharacter = currentChar;
            break;
        }
    }

    return nonRepeatingCharacter.ToString();
}

// by @somnia06 (OP) + modified by @t3chb0t
public static string FindFirstNonRepeatingCharacter1(string givenString)
{
    var charCounter = new Dictionary&lt;string, int&gt;(StringComparer.OrdinalIgnoreCase);

    foreach (var ch in givenString)
    {
        charCounter[ch.ToString()] =
            charCounter.ContainsKey(ch.ToString())
            ? charCounter[ch.ToString()] + 1
            : 1;
    }

    foreach (var ch in givenString)
    {
        if (charCounter[ch.ToString()] == 1)
        {
            return ch.ToString();
        }
    }

    return null;
}

// by @t3chb0t
public static string FindFirstNonRepeatingCharacter21(string givenString)
{
    return
        givenString
        .GroupBy(c =&gt; c.ToString(), c =&gt; c, StringComparer.OrdinalIgnoreCase)
        .Where(g =&gt; g.Count() == 1)
        .Select(g =&gt; g.Key)
        .FirstOrDefault();
}

// by @t3chb0t
public static string FindFirstNonRepeatingCharacter22(string givenString)
{
    return
        givenString     
        .GroupBy(c =&gt; c, c =&gt; c)
        .Where(g =&gt; g.Count() == 1)
        .Select(g =&gt; g.Key.ToString())
        .FirstOrDefault();
}

// by @somnia06 (OP) + modified by @t3chb0t
public static string FindFirstNonRepeatingCharacter3(string givenString)
{
    var charIndex = new Dictionary&lt;string, List&lt;int&gt;&gt;(StringComparer.OrdinalIgnoreCase);

    foreach (var x in givenString.Select((c, i) =&gt; new { c = c.ToString(), i }))
    {
        var indicies = (List&lt;int&gt;)null;
        if (charIndex.TryGetValue(x.c, out indicies))
        {
            indicies.Add(x.i);
        }
        else
        {
            charIndex[x.c] = new List&lt;int&gt;(new[] { x.i });
        }
    }

    var firstSingleCharIndex =
        charIndex
        .Where(i =&gt; i.Value.Count == 1).ToList();
    if (!firstSingleCharIndex.Any()) return "";

    return givenString[firstSingleCharIndex.Min(i =&gt; i.Value.FirstOrDefault())].ToString();
}

// by @somnia06 (OP) + modified by @t3chb0t
public static string FindFirstNonRepeatingCharacter4(string givenString)
{
    var charCounter = new Dictionary&lt;char, int&gt;(new UpperCaseInvariantCharComparer());

    for (int i = 0; i &lt; givenString.Length; i++)
    {
        var ch = givenString[i];
        if (charCounter.ContainsKey(ch)) charCounter[ch]++;
        else charCounter[ch] = 1;
    }

    for (int i = 0; i &lt; givenString.Length; i++)
    {
        var ch = givenString[i];
        if (charCounter[ch] == 1)
        {
            return ch.ToString();
        }
    }


    return null;
}

class UpperCaseInvariantCharComparer : IEqualityComparer&lt;char&gt;
{
    public bool Equals(char x, char y) =&gt; Char.ToUpperInvariant(x) == Char.ToUpperInvariant(y);

    public int GetHashCode(char x) =&gt; Char.ToUpperInvariant(x).GetHashCode();
}

// by @AhmadIbrahim
public static string FindFirstNonRepeatingCharacter5(string input)
{
    if (input == null) throw new ArgumentNullException();

    var repeatingChars = new List&lt;char&gt;();
    var candidates = new List&lt;char&gt;();

    foreach (var i in input)
    {
        var c = char.ToUpperInvariant(i);

        if (repeatingChars.Contains(c)) continue;

        if (candidates.Contains(c))
        {
            candidates.Remove(c);
            repeatingChars.Add(c);
        }
        else
        {
            candidates.Add(c);
        }
    }

    if (candidates.Count == 0) throw new Exception("No non-repeating characters");

    return candidates[0].ToString();
}
</code></pre>
    </div>