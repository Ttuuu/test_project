<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to take a pass through <code>board_filler</code> as if I were cleaning up my own code, take notes on everything I changed, and share the final result.</p>

<ol>
<li>Adding type hints so mypy will tell me if I mess up during any of this refactoring.</li>
<li>Oh weird, my <code>board</code> isn't a list of list of <code>int</code>s like I thought, it's also got strings in it?  I'll go ahead and add the typing, but I should come back to that because it feels like it might be a clue the data model is a little confused.</li>
<li>Reassigning <code>number</code>(string) to <code>number</code>(int) is making mypy complain, so I'll just move that <code>input</code> inside the <code>int</code> cast for now and take a closer look later at whether that makes sense.</li>
<li>No point using <code>enumerate</code> if I'm only interested in the index; I'll change it so I'm just iterating over the range of indices.  Oh look, mypy helps me catch all the places I need to change <code>x[0]</code> to just <code>x</code>!</li>
<li>Looks like we have the length of <code>board</code> hardcoded in a couple of places; I'm just going to change those to <code>len(board)</code> so that if we adjust <code>board</code> the rest of the code will just magically work.</li>
<li>This <code>% 4</code> is troubling.  Let's just define <code>GRID = 4</code> and use that.</li>
<li>Wow, I'm not even sure what the rest of this code is doing.  Let's see if cutting down the indentation and adding linebreaks between "paragraphs" helps make it easier to follow...</li>
</ol>

<p>At this point my code looks like:</p>

<pre><code>from typing import List, Union

GRID = 4  # draw a grid line every 4 rows/cols

def board_filler() -&gt; List[List[Union[int, str]]]:
    """Creates the sudoku board from user input"""
    board: List[List[Union[int, str]]] = [[], [], [], [], [], [], [], [], [], [], []]
    for x in range(len(board)):

        #If it is one of the rows that have lines, add them
        if ((x + 1) % GRID) == 0:
           for y in range(len(board)):
               board[x].append("-")
            continue

        for y in range(len(board)):

            #If it is a column that has lines in it, add them
            if ((y + 1) % GRID) == 0:
                board[x].append("|")
                continue

            #Repeat until an input has been entered
            z = True
            while z:
                z = False

                if x &gt; 7:
                    xRead = x - 1
                elif x &gt; 3:
                    xRead = x
                else:
                    xRead = x + 1

                if y &gt; 7:
                    yRead = y - 1
                elif y &gt; 3:
                    yRead = y
                else:
                    yRead = y + 1

                #Tries to make it a number, then checks to see if it is a number 1 to 9
                try:
                    number = int(input(
                        "Please enter a number for the square in column %s and in row %s, if there is no number, just hit enter:" 
                        % (xRead, yRead)
                    ))
                    if number &gt; 9 or number &lt; 1:
                        z = True
                        print("Please enter a number between 1 and 9")
                    else:
                        board[x].append(number)
                #If it is not a number, check if its empty
                except (TypeError, ValueError):
                    #If its empty, add a space
                    if not number:
                        board[x].append(" ")
                    #If not ask for a number
                    else:
                        z = True
                        print("Please enter a number")
    return board
</code></pre>

<p>It is now apparent to me that a <em>huge</em> part of the complexity of this function is due to the fact that we're mixing our actual data (the numbers) with the display logistics (drawing the grid lines).  That's going to be a continuous source of pain (what we call in the biz "technical debt"), especially if we plan to write code later that tries to actually solve the puzzle.  What if we just took all that grid stuff out and let <code>board_filler</code> return a <code>List[List[int]]</code>?</p>

<p>It turns out that that makes the code a LOT simpler, and now all the complexity of <code>board_filler</code> is very clearly in getting the user input.  Let's just break that out into its own function...</p>

<pre><code>def get_number_for_square(x: int, y: int, max: int) -&gt; Optional[int]:
    """Prompt the user for a number between 1 and max until they give
    us one or just give us a blank line (in which case return None)."""
    choice = input(
        ("Please enter a number for the square in column %s and in row %s" +
         "; if there is no number, just hit enter: ") % (x, y)
    )
    if len(choice) == 0:
        return None
    try:
        number = int(choice)
        assert 1 &lt;= number &lt;= max
        return number
    except:
        print("Please enter a number between 1 and %d." % max)
        return get_number_for_square(x, y, max)
</code></pre>

<p>Between that and getting rid of the grid stuff, <code>board_filler</code> is suddenly quite a bit smaller.  Using <code>len(board)</code> everywhere is starting to bother me; since we're constructing the board inside this function, let's just take the size as a parameter and construct the board to match the size, rather than building it the other way around.</p>

<pre><code>def board_filler(size: int = 9) -&gt; List[List[Optional[int]]]:
    """Creates the sudoku board from user input"""
    board: List[List[Optional[int]]] = []
    for x in range(size):
        board.append([])
        for y in range(size):
            board[x].append(get_number_for_square(x, y, size))
    return board
</code></pre>

<p>Now all I need to do is replace the grid drawing logic that I chopped out.  Since that has to do with how we're displaying the board, not the value of the board itself, it belongs in my <code>board_printer</code> function.  As with the <code>size</code> magic number, let's make that a parameter, because why not:</p>

<pre><code>def board_printer(board: List[List[Optional[int]]], grid_size: int = 3) -&gt; None:
    """Pretty-prints the board, with grid lines every grid_size squares."""
    for y in range(len(board)):
        if y % grid_size == 0 and y &gt; 0:
            print("-" * (len(board) + (math.ceil(len(board) / grid_size)) - 1))
        for x in range(len(board)):
            if x == len(board) - 1:
                end = "\n"
            elif (x + 1) % grid_size == 0:
                end = "|"
            else:
                end = ""
            print(board[y][x] if board[y][x] else " ", end=end)
</code></pre>

<p>There are probably more graceful ways of doing that printing, but it's nice and flexible if we decide we want to change up how the grid is printed.  At the end of it, I can still do:</p>

<pre><code>board_printer(board_filler())
</code></pre>

<p>and I think it still does about what the original code did, but hopefully this version is easier to follow (and it's <em>much</em> more flexible now)!</p>
    </div>