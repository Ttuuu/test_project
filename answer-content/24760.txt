<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>White space and Casing is good.</p>

<p>Just a few things to think about:</p>

<ol>
<li><code>#region</code> is not very well accepted.  If you have to use <code>#region</code>, then you should look at moving the code out into a method or its own class.</li>
<li>Use var instead of explicit declarations for obvious variables.  This makes the code much easier to scan over.</li>
<li>If you insist on comments to explain what the method is doing, us the C# <code>///</code> syntax.  This does a couple of things: it allows intellisense to pick up the description when using the library, and there are tools that can take the <code>///</code> comments and create API help documentation.</li>
<li>General practice in C# is to use either m_ or _ at the beginning of class variables.  This eliminates the need to use this., which clutters up the code a little.</li>
<li>Be consistent with your use of <code>{ }</code> after if statements.  It makes it eaasier to focus on the logic when it doesn't have to process changes in the formatting.</li>
<li>In the line <code>thread.Name = "Client" + i;</code> I would make <code>"Client"</code> a constant.</li>
<li>Separate concerns.  For instance: <code>Console.WriteLine</code> does not belong in your server class.</li>
<li>If the constructor doesn't do anything, get rid of it, it is only adding noise to your class.</li>
<li>In my opinion, class variables should be initialized in the constructor, not on declaration.</li>
<li>Use meaningful names for variables: <code>a</code> does not  portray what the variable does.  <code>tcpClient</code> on the other hand does.  This makes your methods much easier to read.</li>
<li><code>getClient</code> should be <code>GetClient</code>.  C# naming conventions</li>
</ol>

<p>Most of these are minor, and don't affect the application, they just add that little bit to your code, and will make it easier to read and maintain in the future.</p>
    </div>