<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think, I would make an API with 3 overloads in order to split up the responsibility:</p>

<pre><code>  public enum ExcelFormat
  {
    Xls = 1,
    Xlsx = 2,
  }

  public static Stream CreateCsv(string excelFileName)
  {
    if (string.IsNullOrWhiteSpace(excelFileName))
      throw new ArgumentNullException("excelFileName");

    ExcelFormat format;
    string extension = Path.GetExtension(excelFileName).ToUpper();
    switch (extension)
    {
      case ".XLS":
        format = ExcelFormat.Xls;
        break;
      case ".XLSX":
        format = ExcelFormat.Xlsx;
        break;
      default:
        throw new FileFormatException("Invalid File Format or File Name");
    }

    using (Stream stream = File.OpenRead(excelFileName))
    {
      return CreateCsv(stream, format);
    }
  }

  public static Stream CreateCsv(Stream excelStream, ExcelFormat format)
  {
    if (excelStream == null)
      throw new ArgumentNullException(nameof(excelStream));

    IExcelDataReader reader = null;

    switch (format)
    {
      case ExcelFormat.Xls:
        reader = ExcelReaderFactory.CreateBinaryReader(excelStream);
        break;
      case ExcelFormat.Xlsx:
        reader = ExcelReaderFactory.CreateOpenXmlReader(excelStream);
        break;
    }

    return CreateCsv(reader);
  }

  public static Stream CreateCsv(IExcelDataReader reader)
  {
    if (reader == null)
      throw new ArgumentNullException(nameof(reader));

    DataSet dataSet = ReadData(reader);
    return WriteData(dataSet);
  }
</code></pre>

<hr>

<p>I think, this filter isn't very reliable (one day some one has a column name containing "skip" that should not be skipped): </p>

<pre><code>FilterColumn = (columnReader, columnIndex) =&gt; !headers[columnIndex].ToString().ToUpper().Contains("SKIP")
</code></pre>

<p>If the valid column names are fairly static, I would make some kind of settings file, where the valid columns are defined:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;settings&gt;
  &lt;columns&gt;
    &lt;colum&gt;AAA&lt;/colum&gt;
    &lt;colum&gt;BBB&lt;/colum&gt;
    &lt;colum&gt;CCC&lt;/colum&gt;
    &lt;colum&gt;DDD&lt;/colum&gt;
  &lt;/columns&gt;
&lt;/settings&gt;
</code></pre>

<p>If the operation is user-interactive, then it would maybe probably be better with a dialog or wizard where they could select the valid columns.</p>

<hr>

<p>About performance, I think t3chb0t has said it all :-)</p>

<hr>

<p><strong>Edit</strong>
I've updated with </p>

<pre><code>    using (Stream stream = File.OpenRead(excelFileName))
    {
      return CreateCsv(stream, format);
    }
</code></pre>
    </div>