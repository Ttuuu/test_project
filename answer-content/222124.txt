<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Get classy</h3>

<p>In the generation process, you have three things to keep track of: the size of the board, the location of the queens, and the blocked/unblocked status of the individual cells.</p>

<p>This is two things too many.</p>

<p>When you're managing multiple data items, trying to keep them all in sync with each other, that's an indicator you need a class or a separate module. I'll suggest you maintain all this data in a class.</p>

<h3>Make it snappy</h3>

<p>Next, I'll suggest that you reconsider your storage. Python has a good mechanism for smoothly and transparently scaling the size of integer values. I suggest that you can manage your arrays and positions as integer bitmasks.</p>

<p>How would this work?</p>

<p>First, use generator functions to iterate over everything. Only at dire need will you convert from a bitmask to a position tuple.</p>

<p>Thus, write code that just "assumes" you have whatever it is you want:</p>

<pre><code>for q in board.available_queen_positions():
    new_board = board.with_queen(q)
</code></pre>

<p>What is the type of <code>q</code>? I don't know! What is the type of <code>new_board</code>? Presumably the same type as <code>board</code>, but ... I don't know! Maybe it's <code>class Board</code>?</p>

<p>With that approach in mind, now you can make things fast. Let's imaging a 5x5 board. That's 25 cells, which means a 25-bit number. Should be no problem, right? Assume you'll always use the least-significant bits, so <code>1 &lt;&lt; 24 ... 1 &lt;&lt; 0</code> in this case. How you map them is up to you, but I'll suggest <code>1 &lt;&lt; (row * 5 + col)</code>. Similarly for unmapping them: <code>row, col = divmod(log2(position), 5)</code></p>

<p>So a <code>Position(4, 1)</code> would be expressed as <code>1 &lt;&lt; 21</code>. </p>

<p>What does that give you?  Well, integers are hashable. So you can perform bitops with them, and lookups in a dict with them. </p>

<p>Iterate over all the available queen positions:</p>

<pre><code>class Board:
    def available_queen_positions(self):
        pos = self.max_pos    # Computed at __init__

        while True:
            if not (pos &amp; self.blocked):
                yield pos
            if pos == 0:
                break
            pos &gt;&gt;= 1

    def cells_blocked_by_pos(self, pos):
        if pos in self.cell_block_cache:
            return self.cell_block_cache[pos]

        # Dicts created at __init__, or make them functions?
        blocks = (self.row_blocks[pos] 
                 | self.col_blocks[pos]
                 | self.right_diag_blocks[pos] 
                 | self.left_diag_blocks[pos])
        self.cell_block_cache[pos] = blocks
        return blocks
</code></pre>

<p>You might find that storing positions as integers (such that 4,1 -&gt; 21) is faster than as a bitmask -- that deserves a little timing research. But I expect you'll find that using bitwise operations to perform your blocking will speed things up considerably, and enable you to run with larger board sizes.</p>

<h3>Optimize</h3>

<p>It's important that you perform timing tests before you start chasing performance. Use timeit, or just print the time before and after your runs - whatever seems appropriate to you. This way you'll be able to avoid going down a non-productive branch. (And the branches which are non-productive will surprise you!)</p>

<p>With that said, one "algorithmic" optimization springs to mind: symmetry. If a particular configuration of queens is valid, then performing various rotations and reflections of that board configuration should also be valid. You should be able to reduce the number of configurations that you check, because of this- you know that if board <code>A</code> is valid then automatically you know that <code>rot90(A)</code> and <code>rot180(A)</code> and <code>rot270(A)</code> are also valid, etc.</p>
    </div>