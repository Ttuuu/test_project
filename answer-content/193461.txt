<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code review</h2>

<p>I agree with @papagaga that the name could be better, though I would choose <code>perform_mappping</code>. I just obfuscated name <code>map</code>, which is mostly thought of as <code>std::map</code>. I hope it will do more good than bad.</p>

<p>If the code doesn't have forwarding (or, as some call it, universal reference), don't use <code>std::forward</code>. In the case in question, there is none.</p>

<p>The code will generate a new function for each permutation of the types passed in. It might create a binary bloat if compiler will not be able to inline the function. Though, I believe in compilers. No conversions will ever happen, unless SFINAE kicks in.</p>

<p>With C++20's full templates on lambdas, the code might be able to hide the helper inside of itself, thus not exposing it.</p>

<hr>

<h2>Alternative</h2>

<p><code>std::array</code> and <code>std::pair</code> are tuples too, from the point of view of standard library. I thought "hey, lets make the function to work uniformly on every tuple by standard library". I thought it's gonna be easy ... unless I realized that <code>std::array</code> has non-type argument in it. This turned things to be verbose and not as elegant as I thought. Yet, the caller side is still good.</p>

<h2>Implementation</h2>

<p>The small problem is distinguishing tuples from non-tuples. <code>std::tuple_size</code> helps out with this. The harder one is identifying which type to return. Unfortunately I had to specialize it for tuple + pair and for array.</p>

<hr>

<h2>Code</h2>

<pre><code>#include &lt;tuple&gt;
#include &lt;array&gt;
#include &lt;utility&gt;

namespace details
{
    template &lt;typename Tuple, typename Mapping&gt;
    struct return_type;

    template &lt;template &lt;typename ...&gt; typename Tuple, typename ... Types, typename Mapping&gt;
    struct return_type&lt;Tuple&lt;Types...&gt;, Mapping&gt;
    {
        using type = Tuple&lt;std::invoke_result_t&lt;Mapping, Types&gt;...&gt;;
    };
    template &lt;template &lt;typename, std::size_t&gt; typename Array, 
              typename T, std::size_t Size, typename Mapping&gt;
    struct return_type&lt;Array&lt;T, Size&gt;, Mapping&gt;
    {
        using type = Array&lt;std::invoke_result_t&lt;Mapping, T&gt;, Size&gt;;
    };

    template &lt;typename Tuple, typename Mapping&gt;
    using return_type_t = typename return_type&lt;Tuple, Mapping&gt;::type;

    template &lt;typename Tuple, typename Mapping, std::size_t ... Indices&gt;
    return_type_t&lt;std::decay_t&lt;Tuple&gt;, 
                  std::decay_t&lt;Mapping&gt;&gt; perform_mapping(Tuple&amp;&amp; tup, 
                                                         Mapping&amp;&amp; mapping, 
                                                         std::index_sequence&lt;Indices...&gt;)
    {
        return {mapping(std::get&lt;Indices&gt;(std::forward&lt;Tuple&gt;(tup)))...};
    }
}

template &lt;typename Tuple, typename Mapping, 
          std::size_t Size = std::tuple_size&lt;std::decay_t&lt;Tuple&gt;&gt;::value&gt;
auto perform_mapping(Tuple&amp;&amp; tup, Mapping&amp;&amp; mapping)
{
    return details::perform_mapping(std::forward&lt;Tuple&gt;(tup), 
                                    std::forward&lt;Mapping&gt;(mapping), std::make_index_sequence&lt;Size&gt;{});
}

#include &lt;algorithm&gt;
#include &lt;iterator&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    auto mapper = [](int x) {return x * 2;};
    std::array&lt;int, 3&gt; a{1, 2, 3};
    auto b = perform_mapping(a, mapper);

    std::copy(b.begin(), b.end(), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';

    auto tuple = std::make_tuple(1, std::string{"a"});
    auto self_adder = [](const auto&amp; x) {return x + x;};
    auto another_tuple = perform_mapping(tuple, self_adder);
    std::cout &lt;&lt; std::get&lt;0&gt;(another_tuple) &lt;&lt; ' ' &lt;&lt; std::get&lt;1&gt;(another_tuple) &lt;&lt; '\n';
}
</code></pre>

<p><a href="https://wandbox.org/permlink/UIhglvD3U6tIUr5e" rel="noreferrer">Demo</a>.</p>

<hr>

<p>In theory, if one specializes <code>std::tuple_size</code> for their own tuple (as long as it behaves like <code>std::tuple</code> or like <code>std::array</code>), it should simply work. </p>

<p>For better or for worse, the new function allows mutation and side effects.</p>
    </div>