<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, let's deal with the overarching concern first:</p>

<p><strong>Why do you implement the stack completely new from the ground up?</strong></p>

<p>I'm sure you already have data-structures allowing you to insert and remove elements. Adapt one of them! For bonus points, allow the user to override which one you adapt.</p>

<hr>

<p>Now, let's look at your code and what you can improve:</p>

<ol>
<li><p>Your indentation is haphazard. Please fix it, preferably before showing your code to anyone else. Also, consider surrounding binary operators with space, and having exactly one after a comma. Proper code-formatting considerably helps readability.</p></li>
<li><p>Consider putting the <code>next</code>-pointer first in <code>Node</code>. It's potentially slightly more efficient.</p></li>
<li><p>Remove the constructor from <code>Node</code> and use aggregate-initialization. That also allows you to construct a pushed value in-place. All else being equal, be brief.</p></li>
<li><p>You should not need <code>top</code>. Just insert and remove at the front.</p></li>
<li><p>You are violating the rule of 3 / 5. The default copy- and move- ctor and assignment-operator violate ownership semantics, leading to double-free's, and memory-leaks.</p></li>
<li><p>Implement the free function <code>swap(a, b)</code> for use of the copy-and-swap-idiom in move-ctor and move-/copy- assignment, as well as for its own value.</p></li>
<li><p><code>bool stack_empty()</code> should be simply <code>empty()</code>, as in all standard containers.</p></li>
<li><p><code>push()</code> should accept any number and type of arguments for constructing the pushed value.</p>

<pre><code>template&lt;class... X&gt;
auto push(X&amp;&amp;... x)
-&gt; decltype((void)T(std::forward&lt;X&gt;(x)...))
{
    head = new T { head, T(std::forward&lt;X&gt;(x)...) };
}
</code></pre></li>
<li><p><code>display</code> does good work, as does the corresponding free <code>operator&lt;&lt;</code>. I just wonder why you emulated the <code>for</code>-loop using <code>while</code>...</p></li>
<li><p>Library-code should never interact with the user / logging, unless it's (part of) the reason for its existence. Let the caller handle any errors, be it by signalling using error-codes (if expected) or exceptions (if exceptional). Of course, finding internal corruption justifies logging and abnormal termination.</p></li>
<li><p>Never use an <code>if-else</code>-statement to return a boolean / set the same boolean in both branches. Just use the condition directly, if neccessary after forcing it to <code>bool</code>.</p></li>
<li><p><code>.push()</code> as implemented by you corrupts internal state if allocation or initialization of the new <code>Node</code> fails. You should have incremented <code>top</code> <em>after</em> creating the new <code>Node</code>.</p></li>
<li><p><code>.pop()</code> does not actually pop a <code>Node</code>. It just decrements <code>top</code> and returns a copy of the <code>data</code>-member of the last-pushed <code>Node</code>.</p></li>
<li><p>Setting <code>head</code> in the dtor is superfluous. Happily, any optimizing compiler worth its name will remove that.</p></li>
<li><p>Your test-suite in <code>main()</code> is beyond unsatisfactory. You should have exercised <code>.pop()</code> more and <code>.empty()</code> as well, at a minimum.</p></li>
<li><p>Avoid <code>std::endl</code> unless you need the manual flush, as flushing is quite expensive.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>.</p></li>
</ol>
    </div>