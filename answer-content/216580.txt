<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should not be presenting any errors in production and don't offer the caught <code>$e-&gt;getMessage()</code>.  These details will only help malicious actors (and not your users).</p>

<p>When you want to check if a variable exists AND it is not zero-ish/falsey/null/empty, just use <code>!empty()</code> instead of doing <code>isset(...) &amp;&amp; !empty(...)</code>.</p>

<p>If you have already checked that a variable <code>isset()</code> then you want to check if it is zero-ish/falsey/null/empty, just use <code>!$variable_name</code> -- this has the same effect and avoids the unnecessary function call.</p>

<p>I do not support the initialization of <code>$errors = [];</code>, <code>$username = "";</code>, <code>$password = "";</code>,  and <code>$email = "";</code>.  Just don't declare them.  Empty username, password, or email should prevent any processes that rely on them.  <code>!empty($errors)</code> both checks if the variable was declared AND has a positive count.</p>

<p>You should not be bothering to make a trip to the database if the submission lacks a username, password, or email.</p>

<p>You are rushing right into processing <code>$result["username"]</code> from <code>$result = $stmt-&gt;fetch(PDO::FETCH_ASSOC);</code>, but you should check that that element was <em>actually</em> generated.</p>

<p>This simply looks careless, remove the redundant check:</p>

<pre><code>if (!empty($errors)) {
    if (!empty($errors)) {
           ...
    }
}
</code></pre>

<p>You shouldn't be throwing <code>htmlspecialchars()</code> around so much.  You should be calling that ONLY just before printing to screen (<code>$_SESSION["temporary_username"]</code>).  Definitely don't foul with users' email account before processing the value.  If you want to sanitize certain input values so that specific characters are filtered out, fine, just be clear about this value mutating when the user is filling the form so that no one has any surprises.</p>

<p>Minimize total trips to the database.  Combine the logic in <code>SELECT username FROM users WHERE username = :username</code> with <code>SELECT email FROM users WHERE email = :email</code> to form <code>SELECT email FROM users WHERE username = :username OR email = :email</code>, then process the single result set to check for either pre-existing value.</p>

<p>In <code>login.php</code>, you know you are only processing the <code>username</code> and <code>password</code> values so update your query's SELECT clause to nominate those two columns only.  Only ever ask the database for the values that you intend to use.</p>

<p><code>!isset($_SESSION["loggedin"]) || !$_SESSION["loggedin"]</code> can be condensed to <code>empty($_SESSION["loggedin"])</code>.</p>

<p>I don't recommend using SESSION storage to hold any "identifiable" values.  Just keep the <code>id</code> in there and use that for all subsequent interactions.  <a href="https://stackoverflow.com/a/42869960/2943403">I have mentioned this before at StackOverflow</a>.</p>
    </div>