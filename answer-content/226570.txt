<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You use lists, which are great when you have a flexible number of elements in it and you might add/remove some, but in your case, you know exactly how many elements each list would contain and there is no possibility for it to change. In this case, you are using the wrong data structure because the list has unnecessary overhead. You need an array or arrays. The creation logic looks like this : </p>

<pre><code>int[][] rows = new int[n][];
for (i = 0; i &lt; n; i++)
{
    rows[i] = new int[i + 1];
}
</code></pre>

<p>This way, you already have your structure created, all you need to do is fill it. The other advantage is that you take exactly the amount of memory you're supposed to use, so you don't have any overhead.</p>

<p>You also know that every first and last element of a row is one, so why not do this at the same time?</p>

<pre><code>int[][] rows = new int[n][];
for (i = 0; i &lt; n; i++)
{
    rows[i] = new int[i + 1];
    rows[i][0] = 1;

    // This is an unnecessary operation for i = 0, but that's a very small problem.
    rows[i][rows[i].Length - 1] = 1;
}
</code></pre>

<p>Now what's left is to fill the arrays and your code already does it pretty well, but now we're using arrays instead of lists so we can't use <code>Add</code>.</p>

<pre><code>int[][] rows = new int[n][];
for (int i = 0; i &lt; n; i++)
{
    rows[i] = new int[i + 1];
    rows[i][0] = 1;

    // This is an unnecessary operation for i = 0, but that's a very small problem.
    rows[i][rows[i].Length - 1] = 1;

    if (i &gt; 1)
    {
        // Notice that we start at 1 instead of zero and end one index before the end to preserve
        // the 1s that we added earlier.
        for (int j = 1; j &lt; rows[i].Length - 1; j++)
        {
            var previousRow = rows[i - 1];

            rows[i][j] = previousRow[j - 1] + previousRow[j];
        }
    }
}
</code></pre>

<p>The code above is pretty much the same as yours, but with arrays instead of lists.</p>

<p>With this code, you also don't need to check for <code>n == 1</code>, the check will be made in the <code>for</code> loop where you wouldn't enter if <code>n == 1</code>. Using my version of the code, you also don't need to check for <code>n == 0</code>, because it will return an empty <code>int[][]</code> anyways.</p>

<p><strong>Benchmarking</strong></p>

<p>I've used <a href="https://github.com/dotnet/BenchmarkDotNet" rel="nofollow noreferrer">BenchmarkDotNet</a> to test both our solutions.</p>

<p>The end result is (I wanted to add a table but I don't know if it's possible) : </p>

<p>My method : 2.545us (mean time) +- 0.0504us (std)</p>

<p>Your method : 20.766us (mean time) +- 0.4133us (err)</p>

<p>The benchmark code is the following : </p>

<pre><code>[RPlotExporter, RankColumn]
public class PascalTriangle
{
    //The MyCode method is the code written above.
    [Benchmark]
    public int[][] myCode() =&gt; MyCode(33);

    //The YourCode method is literally your post.
    [Benchmark]
    public IList&lt;IList&lt;int&gt;&gt; yourCode() =&gt; yourCode(33);
}

class Program
{
    static void Main(string[] args)
    {
        var summary = BenchmarkRunner.Run&lt;PascalTriangle&gt;();
        Console.ReadKey();
    }
}
</code></pre>
    </div>