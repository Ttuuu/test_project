<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are my thoughts:</p>

<ul>
<li><p>Don't mutate function parameters unless there is good reason to do so.</p>

<pre><code>node.depth = level;
</code></pre>

<p>The above statement basically breaks the contract of the function. The function claims to locate the <code>deepestNode</code>, but in fact it does <code>findDeepestNodeAndSetDeepestPropOnAllNodes</code> (silly, but you get the idea). This could lead to confusing, subtle bugs for the client of your module and is a serious issue.</p>

<p>If you want to return the level in addition to the node itself, that's easily done by returning a <code>{node, level}</code> object pair which doesn't corrupt the reference to <code>node</code>. However, since the test suite disregards the level, I'd omit it since the function name makes no mention of this and it's not typically valuable information.</p></li>
<li><p>Always use braces for blocks of code:</p>

<pre><code>if (deepestLeft.depth &gt; deepestRight.depth)
    return deepestLeft;
else
    return deepestRight;
</code></pre>

<p>is clearer and less error-prone as:</p>

<pre><code>if (deepestLeft.depth &gt; deepestRight.depth) {
  return deepestLeft;
}

return deepestRight;
</code></pre></li>
<li><p>Use default parameters:</p>

<pre><code>function deepestNode(node, level) {
    if (!level)
        level = 0;
...
</code></pre>

<p>can be</p>

<pre><code>function deepestNode(node, level=0) {
...
</code></pre></li>
<li><p>Avoid excessive conditionals; it's possible to simplify 6 branches to 2, reducing the cognitive load required to understand the code. Re-write negative conditionals to be positive when possible.</p>

<p>For example,</p>

<pre><code>if (!node.left &amp;&amp; !node.right)
    return node;
</code></pre>

<p>can be eliminated. As a rule of thumb, I try to operate only on the current node when writing recursive functions unless I'm forced to do otherwise.</p></li>
<li><p>Avoid excessive references and intermediate variables. Consider:</p>

<pre><code>let deepestLeft, deepestRight = node;
/* ... various conditionals that may or may not change where
   `deepestLeft`, `deepestRight` and `node` points to ... */

// later on, unclear state
</code></pre>

<p>As with conditionals, when you begin relying on aliases for objects, it becomes difficult to keep track of what's pointing where. Code like this should only be written if there's no way around it, which isn't the case here.</p>

<p>In fact, this line causes crashes when <code>node.right</code> is the only child of a node. You may have meant:</p>

<pre><code>let deepestLeft = deepestRight = node;
</code></pre>

<p>Adding more thorough tests to your suite would help detect bugs like this.</p>

<p>As an aside, prefer <code>const</code> instead of <code>let</code> unless you have to reassign the variable. </p></li>
<li><p>Don't crash on <code>undefined</code>/<code>null</code> parameters if it's trivial to prevent.</p>

<pre><code>node.depth = level; // boom if `node` is undefined
</code></pre></li>
</ul>

<hr>

<p>Here's a re-write. I wrote this as browser code, but you can dump it into <code>module.exports</code>:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const deepestNode = (node, deepest={level: -1}, level=0) =&gt; {
  if (node) {
    if (level &gt; deepest.level) {
      deepest.node = node;
      deepest.level = level;
    }

    deepestNode(node.left, deepest, level + 1);
    deepestNode(node.right, deepest, level + 1);
  }

  return deepest.node;
};

class TreeNode {
  constructor(val, left=null, right=null) {
    this.val = val;
    this.left = left;
    this.right = right;
  }
}

const root = new TreeNode(1, 
  new TreeNode(2, 
    new TreeNode(4)
  ), 
  new TreeNode(3)
);

console.log(deepestNode(root));</code></pre>
</div>
</div>


<p>This function can also be written iteratively in a clean way, avoiding call stack overflow errors and function call overhead:</p>

<pre><code>const deepestNode = node =&gt; {
  let deepest = {level: -1};
  const stack = [[node, 0]];

  while (stack.length) {
    const [curr, level] = stack.pop();

    if (curr) {
      if (level &gt; deepest.level) {
        deepest = {node: curr, level: level};
      }

      stack.push([curr.left, level + 1], [curr.right, level + 1]);
    }
  }

  return deepest.node;
};
</code></pre>
    </div>