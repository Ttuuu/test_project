<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you sort you array, and after that your <code>temp</code> is greater than max value from that array (last item), then you can break your loops earlier and save some computation. Here is an example:</p>

<pre><code>using System;
using System.Linq;

namespace Exercise
{
    public static class TestClass
    {
        public static int NewMaxPairProduct(int[] a)
        {
            Array.Sort(a);

            int x = -1;
            int maxItemInArray = a[a.Length - 1];

            for (int i = 0; i &lt; a.Length; ++i)
            {
                for (int j = i + 1; j &lt; a.Length; ++j)
                {
                    int temp = a[i] * a[j];

                    if (a.Contains(temp) &amp;&amp; temp &gt; x)
                        x = temp;

                    if (temp &gt;= maxItemInArray)
                    {
                        if (j == i + 1) // break both loops - first iteration is greater then max item
                            return x;

                        break; // break only inner loop - we have to verify other options
                    }
                }
            }

            return x;
        }

        public static int OldMaxPairProduct(int[] a)
        {
            int x = -1;

            for (int i = 0; i &lt; a.Length; ++i)
            {
                for (int j = i + 1; j &lt; a.Length; ++j)
                {
                    int temp = a[i] * a[j];

                    if (a.Contains(temp) &amp;&amp; temp &gt; x)
                    {
                        x = temp;
                    }
                }
            }
            return x;
        }
    }
}
</code></pre>

<p>Benchmark .net Performance test:</p>

<pre><code>using System;
using System.Linq;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

namespace Exercise
{
    public class Benchmark
    {
        [Params(10, 100, 1000)]
        public int N { get; set; }

        private int[] data;

        [GlobalSetup]
        public void GlobalSetup()
        {
            Random random = new Random();
            data = Enumerable.Repeat(0, N).Select(i =&gt; random.Next(1000)).ToArray();
        }

        [Benchmark]
        public int NewTest() =&gt; TestClass.NewMaxPairProduct(data);

        [Benchmark]
        public int OldTest() =&gt; TestClass.OldMaxPairProduct(data);
    }

    public static class Program
    {
        static void Main(string[] args)
        {
            BenchmarkRunner.Run&lt;Benchmark&gt;();
        }
    }
}
</code></pre>

<p>Results:</p>

<pre><code>|  Method |    N |             Mean |         Error |        StdDev |
|-------- |----- |-----------------:|--------------:|--------------:|
| NewTest |   10 |         126.3 ns |       2.53 ns |       2.91 ns |
| OldTest |   10 |         483.8 ns |       6.92 ns |       6.13 ns |
| NewTest |  100 |       1,519.0 ns |       8.21 ns |       7.68 ns |
| OldTest |  100 |     125,406.8 ns |   1,420.11 ns |   1,258.89 ns |
| NewTest | 1000 |     293,878.8 ns |     250.04 ns |     195.22 ns |
| OldTest | 1000 | 137,166,762.5 ns | 713,905.95 ns | 632,859.03 ns |
</code></pre>

<p>So with the bigger array you have bigger performance gain. Of course this was tested on random arrays so the results may vary.</p>
    </div>