<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging docs</a>:</p>

<blockquote>
  <p>The logger name hierarchy is analogous to the Python package hierarchy, and identical to it if you organise your loggers on a per-module basis using the recommended construction <code>logging.getLogger(__name__)</code>. That’s because in a module, <code>__name__</code> is the module’s name in the Python package namespace.</p>
</blockquote>

<p>Based on my experience, I would say that you should always use <code>logging.getLogger(__name__)</code> for bigger projects, as it'll make logging modularization easier.</p>

<p>As your question is broad, I recommend you to read the Logging Cookbook, <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">in this link</a>, as it holds many important use cases in which you could optimize the way you use logging.</p>

<p>It's also possible to mix both cases in order to add a timestamp, in example, which is an improved way of using this module:</p>

<pre><code>#!/usr/bin/env python
import logging
import unittest

class GetLoggerTest(unittest.TestCase):
    logger = logging.getLogger(__name__)
    logging.basicConfig(format = '%(asctime)s %(module)s %(levelname)s: %(message)s',
                    datefmt = '%m/%d/%Y %I:%M:%S %p', level = logging.INFO)

    def test_logger(self):
        self.logger.info("self.logger.info test_logger")
        pass
</code></pre>
    </div>