<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is not bad as it stands, but I think there are some things that could be improved.</p>

<h2>Think of the user</h2>

<p>The input file name and unwanted letters are all hardcoded at the moment.  It would be nice if the user could specify one or both of these parameters on the command line.</p>

<h2>Add error handling</h2>

<p>There is almost no error checking or handling.  It's not hard to add, and it makes the program much more robust.  Here's how the start of <code>main</code> might look:</p>

<pre><code>int main(int argc, char *argv[]) {
    if (argc != 2) {
        puts("Usage: longword filename");
        return 0;
    }
    FILE* fp;
    fp = fopen(argv[1], "rb");

    if (!fp) {
        perror("couldn't open words file");
        return 3;
    }
    size_t length = 5000000;
    char *buffer = malloc(length);
    if (buffer == NULL) {
        perror("couldn't allocate memory");
        return 2;
    }
    length = fread(buffer, 1, length, fp);
    if (ferror(fp)) {
        perror("couldn't read file");
        free(buffer);
        return 1;
    }
    // rest of program here
    free(buffer);
}
</code></pre>

<h2>Consider using standard library functions</h2>

<p>At a very small performance penalty (as measured on my machine), one could write a very clean version using only standard functions:</p>

<pre><code>char *longest = NULL;
int longestlen = 0;
char *word = strtok(buffer, "\n");
while (word) {
    const int len = strlen(word);
    if (len &gt; longestlen) {
        if (strpbrk(word, "gkmqvwxzio") == NULL) { 
            longestlen = strlen(word);
            longest = word;
        }
    }
    word = strtok(NULL, "\n");
}
printf("%s\n", longest);
</code></pre>

<p>That is the way I'd probably write it unless there were some compelling reason that's not fast <em>enough</em>.</p>

<h2>Use functions</h2>

<p>Your <code>is_legal</code> function is not bad, but I'd also write a <code>get_word_len</code> function to fetch the length of the next word in the buffer.</p>

<pre><code>static inline int get_word_len(const char *buff, const char *end) {
    int len = 0;
    for ( ; *buff != '\n' &amp;&amp; buff &lt; end; ++buff, ++len) 
    {}
    return len;
}
</code></pre>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>is_legal</code> function doesn't alter the passed string, so that parameter should be <code>const</code>.</p>

<h2>Think carefully about the problem</h2>

<p>The current code might print the word followed by <code>\n</code>, but if the words doesn't happen to be the first in the file, it will also print the <code>\n</code> from the previous word.  It's not necessarily wrong, but it's not consistent.</p>

<h2>Use <code>bool</code> for boolean values</h2>

<p>The implmentation of <code>bool</code> is in <code>&lt;stdbool.h&gt;</code> and should be used as the return type of <code>is_legal</code>.</p>

<h2>Use only the required headers</h2>

<p>In this program neither <code>&lt;stddef.h&gt;</code> nor <code>&lt;unistd.h&gt;</code> appear to be needed; I'd recommend omitting them and only including headers that are actually needed.</p>

<h2>Consider using pointers</h2>

<p>There may not be a performance difference in this case, but for problems like these, the use of pointers seems more natural to me.  For example:</p>

<pre><code>const char *end = buffer + length;
const char *longest = buffer;
int longestlen = 0;

for (const char *curr=buffer; curr &lt; end;  ) {
    const int wordlen = get_word_len(curr, end);
    if (wordlen &gt; longestlen) {
        if (is_good_word(curr, wordlen)) {
            longestlen = wordlen;
            longest = curr;
        }
    }
    curr += wordlen + 1;
}
printf("%.*s\n", longestlen, longest);
</code></pre>

<p>Here, <code>is_good_word</code> is like your <code>is_legal</code> function:</p>

<pre><code>static inline bool is_good_word(const char *curr, int wordlen) {
  static const char* bad = "gkmqvwxzio";
  for ( ; wordlen; --wordlen) {
      char ch = tolower(*curr++);
      for (const char *badptr = bad; *badptr; ++badptr) {
          if (ch == *badptr) {
              return false;
          }
      }
  }
  return true;
}
</code></pre>

<h2>Don't leak memory</h2>

<p>The program allocates but does not free the buffer space.  Yes, the operating system will clean up after you, but a <code>free</code> costs very little and allows for better memory leak checking with tools like <code>valgrind</code>.</p>
    </div>