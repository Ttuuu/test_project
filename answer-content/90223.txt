<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OK, first, for the most straightforward optimization.  Use a StringBuilder.</p>

<p>The way your code currently works, it creates <code>length - str.Length</code> intermediate strings.  Besides creating lots of unnecessary garbage, you're copying longer and longer strings over and over again to add one character each time.</p>

<p>If you use a StringBuilder instead, you can avoid most of those copies.
You could try something like...</p>

<pre><code>using System.Text;

...

private string ExpandString(string str, int length)
{
    if (length &lt;= str.Length) return str.Substring(0, length);
    var result = new StringBuilder(str);
    for (var i = str.Length; i &lt; length; i++)
    {
        result.Append(str[i % str.Length]);
    }
    return result.ToString();
}
</code></pre>

<p>(I don't particularly like the StringBuilder starting with a copy of <code>str</code> already in it. I'm literally just replacing the String.)</p>

<p>But you're also copying one character at a time. While this isn't as big an issue as the concatenation, you can do better by inserting as many whole copies of <code>str</code> as you can.</p>

<pre><code>private string ExpandString(string str, int length)
{
    // BTW, you already know how big the result should be, so just
    // tell the StringBuilder its capacity to prevent unneeded resizes.
    // Side benefit: if the result is too long, you'll find out fairly quickly.
    var result = new StringBuilder(length, length);

    var wholeCopies = length / str.Length;
    for (var i = 0; i &lt; wholeCopies; ++i)
    {
        result.Append(str);
    }

    // now append the last chunk, a possibly-zero-length prefix of `str`
    result.Append(str, 0, length % str.Length);

    return result.ToString();
}
</code></pre>

<p>Note that the short-string optimization has been removed. You can add it back in if you really really want to micro-optimize, but at this point, it's not gaining you nearly as much as it was.</p>
    </div>