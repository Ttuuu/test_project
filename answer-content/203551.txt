<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<ol>
<li><p>No need for all these intermediate <code>temp</code> variables</p>

<p>You loop over a and b to append to the result which is unnecessary.</p>

<p>Only afterwards you create the products but this can be done before.</p></li>
<li><p>The <code>sort</code> is not needed if you keep a running minimum</p></li>
<li><p>Use a <code>if __name__ == '__main__'</code></p></li>
<li><p>Consider adding Docstring and Testcases, (or both in the form of doctests) to make the solution more understandable/testable</p></li>
<li><p>Read <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> the python style guide</p>

<ul>
<li>Functions and variables should be snake_case for instance</li>
</ul></li>
</ol>

<h1>Revised Code</h1>

<pre><code>def optimal_shipping(a, b, target):
    """
    Finds the optimal shipping by compairing pairwise lists to the target sum

    &gt;&gt;&gt; optimal_shipping([[1,2000],[2,4000],[3,6000]], [[1,2000]], 6000)
    [[2, 1]]
    &gt;&gt;&gt; optimal_shipping([[1,8],[2,7],[3,14]], [[1,5],[2,10],[3,14]], 20)
    [[2, 3]]
    &gt;&gt;&gt; optimal_shipping([[1,3000],[2,5000],[3,7000],[4,10000]], [[1,2000],[2,3000],[3,4000],[4,5000]], 10000)
    [[2, 4], [3, 2]]
    """
    best = 0
    for i, x in a:
        for j, y in b:
            if abs(x + y - target) &lt; abs(target - best):
                best = x + y
                res = [[i, j]]
            elif x + y == best:
                res += [[i, j]]
    return res

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>

<p><em>Note
If those lists prices are in ascending order, maybe something with a bisect search could work.</em></p>
    </div>