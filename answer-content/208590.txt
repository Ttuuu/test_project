<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've already heard about efficient shuffling in <a href="https://codereview.stackexchange.com/a/208405/151754">Calak's excellent answer</a>. I have just one thing to add to it: don't <code>malloc</code> each card independently. <code>Card</code> is two <code>enum</code>s. Even if each of these are represented as an <code>int</code>, then <code>Card</code> is an 8-byte data structure (though it is possible your compiler uses only one byte for each <code>enum</code> value):</p>

<pre><code>typedef struct CardStructure
{
    enum Suit suit;
    enum Rank rank;
} Card;
</code></pre>

<p>A pointer to such a structure is also 8 bytes (assuming you're on a 64-bit OS). So, the array of 52 pointers to <code>Card</code> takes up just as much space as an array of 52 <code>Card</code> objects. Calling <code>malloc</code> is relatively expensive, you need an extra indirection (pointer dereference) for each card read, and you end up with data (potentially) all over the heap, which is bad for cache usage. So even if <code>Card</code> were larger (32 bytes, 64 bytes) it would be beneficial to store them directly inside an array, and copy them around. An additional advantage is that  you don't need to remember to <code>free</code> the cards.</p>

<p>I recommend <code>malloc</code> only for cases where you cannot store data on the stack: in a function that creates an object and returns it, or for a large array.</p>

<hr>

<p>Now, considering that there are only 52 unique cards, we know it should be possible to store one card in one byte. One approach could use a bit field like this:</p>

<pre><code>typedef struct CardStructure {
   unsigned int suit : 2; // allows any integer in [0,3]
   unsigned int rank : 4; // allows any integer in [0,15]
} Card;
</code></pre>

<p>It should be possible to still assign the <code>enum Suit</code> and <code>enum Rank</code> values to these bit fields. But I must say that this is an optimization that maybe goes a little too far, the original <code>Card</code> is easier and cleaner, and therefore the better choice.</p>

<hr>

<p>Oh, I just realized that you are not actually using the <code>enum</code> constants anywhere in your code. You are just using their numeric values. You are better off not defining those enums in that case, and just use a <code>char</code> to store each value.</p>

<hr>

<p>Bug: Your documentation says that the cards are ordered: "A K Q J 10 9 8 7 6 5 4 3 2", but your code logic says that A is the lowest card.</p>
    </div>