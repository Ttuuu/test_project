<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Code Review</h3>

<p>One change I would make to your solution is to directly modify the row names as below (instead of modifying <code>gene</code> and then setting the row names equal to <code>gene</code>).</p>

<pre><code>for (i in 1:nrow(df)){
  if (rownames(df)[i] %in% annotation$gene) {

    rownames(df)[i] = annotation$name[which(annotation$gene == rownames(df)[i])]

  }
}
df$gene &lt;- NULL

df
#        sample_1 sample_2
# name_1        0        0
# name_2        0        0
# gene_3        0        0
</code></pre>

<p>This solution is similar to the original, but iterates over row numbers (1-3 in this case) instead of row names. This allows direct modification of the row names and makes the code slightly more concise. This version doesn't use <code>gene</code> at all.</p>

<p>That's how I'd modify the existing solution, but overall I wouldn't use a <code>for</code> loop. <code>for</code> loops can be slow since they iterate over every element (and your data set has 10^5 rows). Below is another approach using the <code>dplyr</code> library.</p>

<h3>Another Approach</h3>

<pre><code>library(dplyr)
library(tibble)

df &lt;- left_join(df, annotation, by = "gene") %&gt;%        # Join "annotation" and "df"
mutate(gene = if_else(is.na(name), gene, name)) %&gt;%     # Convert "gene" to "name" when "name" is valid
column_to_rownames(var = "gene") %&gt;%                    # Set row names to "gene"
select(-name)                                           # Remove "name"

df
#        sample_1 sample_2
# name_1        0        0
# name_2        0        0
# gene_3        0        0
</code></pre>

<p>This syntax may look unfamiliar but it's doing 3 main things:<br>
  - left-joining <code>df</code> and <code>annotation</code> by the <code>gene</code> field. It has to be a left-join so all rows of <code>df</code> are preserved!<br>
  - changing the value of <code>gene</code> to <code>name</code> only when <code>name</code> is non-null<br>
- setting the row names equal to <code>gene</code>   </p>

<p>The pipe operator <code>%&gt;%</code> passes the data through these operations without needing to repeatedly type <code>df &lt;-</code>. These are all vectorized operations and so are faster than a <code>for</code> loop, especially for large data sets.</p>

<p><code>dplyr</code> syntax can be intimidating at first, but it's an extremely popular (and I believe intuitive) paradigm to manipulate data. <a href="https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html" rel="nofollow noreferrer">Here</a> is a handy intro on <code>dplyr</code> syntax.</p>
    </div>