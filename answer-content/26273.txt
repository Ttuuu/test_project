<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not sure this is really an answer, or I should elaborate on my comment, and in hindsight probably not even a very good comment anyway, but:</p>

<p>Firstly, you can just simplify it to:</p>

<pre><code>try:
    from itertools import izip as zip
except ImportError: # will be 3.x series
    pass
</code></pre>

<p>What I was thinking about was:</p>

<p>From 2.6 you can use <a href="http://docs.python.org/2/library/future_builtins.html">as per the docs</a>:</p>

<pre><code>from future_builtins import map # or zip or filter
</code></pre>

<p>You do however then have the same problem of <code>ImportError</code> - so:</p>

<pre><code>try:
    from future_builtins import zip
except ImportError: # not 2.6+ or is 3.x
    try:
        from itertools import izip as zip # &lt; 2.5 or 3.x
    except ImportError:
        pass
</code></pre>

<p>The advantage of using <code>future_builtin</code> is that it's in effect a bit more "explicit" as to intended behaviour of the module, supported by the language syntax, and possibly recognised by tools. <strike>For instance, I'm not 100% sure, but believe that the 2to3 tool will re-write <code>zip</code> correctly as <code>list(zip(...</code> in this case, while a plain <code>zip = izip</code> may not be... But that's something that needs looking in to.</strike></p>

<p>Updated - also in the docs:</p>

<blockquote>
  <p>The 2to3 tool that ports Python 2 code to Python 3 will recognize this usage and leave the new builtins alone.</p>
</blockquote>
    </div>