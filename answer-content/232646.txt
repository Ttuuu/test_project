<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to what was mentioned in the review by @nivag.</p>

<p>With the exception of the use of <code>std::vector</code> the code looks a lot more like C than any version of C++.</p>

<h2>Proper Include Headers</h2>

<p>The code under review does not require <code>stdio.h</code>.</p>

<p>Please note that in C++ C programming include files can be included by inserting <code>'c'</code> before the header name and removing the dot h.</p>

<pre><code>#include &lt;cstdio&gt;
#include &lt;cmath&gt;
</code></pre>

<h2>Lack Of Error Checking</h2>

<p>In C++ the <code>new</code> operator has replaced the call to <code>malloc(size_t size)</code>, and the <code>delete</code> operator has replaced the call to <code>free(void *object)</code>. One of the benefits of the <code>new</code> operator is that it throws an exception when the memory allocation fails, the call to <code>malloc(size_t size)</code> only returns <code>NULL</code> (in C) or <code>nullptr</code> (in C++). Accessing memory through a null pointer causes unknown behavior, the return value of <code>malloc(size_t size)</code> should always be checked before usage.</p>

<pre><code>int *** allocate3DArray(int y, int x, int r)  {
    int ***array = (int***)malloc(sizeof(int**)*y);
    if (array == nullptr)
    {
        std::cerr &lt;&lt; "In allocate3DArray allocation of array failed\n";
        return array;
    }
    for (int i = 0; i &lt; y; i++)  {
        array[i] = (int**)malloc(sizeof(int*)*x);
        if (array[i] == nullptr)
        {
            std::cerr &lt;&lt; "In allocate3DArray allocation of array[" &lt;&lt; i &lt;&lt; "] failed\n";
            return nullptr;
        }
        for (int j = 0; j &lt; x; j++)  {
            array[i][j] = (int*)malloc(sizeof(int)*r);
            if (array[i][j] == nullptr)
            {
                std::cerr &lt;&lt; "In allocate3DArray allocation of array[" &lt;&lt; i &lt;&lt; "][" &lt;&lt; j &lt;&lt;  "] failed\n";
                return nullptr;
            }
            for(int k = 0; k &lt; r; k++) {
                array[i][j][k] = 0;
            }
        }
    }
    return array;
}
</code></pre>

<p>For the reasons listed above, <code>new</code> should be preferred over <code>malloc</code>.</p>

<h2>Use C++ Container Classes over C Style Arrays</h2>

<p>As mentioned in another review there are clear benefits of using C++ Container Classes over C Style Arrays. In addition to the proper type of memory being allocated with less code, container classes provide iterators which provide safer ways to iterate through the objects in the container, it is much more difficult to iterate off the end of an array when the iterators and container.begin() and container.end() are used.</p>
    </div>