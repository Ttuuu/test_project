<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code looks good. There are only a couple improvements I would suggest.</p>

<h3>Loop over operations</h3>

<p>The code is somewhat repetitive for the operations, which goes against the <a href="https://deviq.com/don-t-repeat-yourself/" rel="nofollow noreferrer">Don't Repeat Yourself principle</a>. Those operations could be added to an array and iterated over. You might have to get creative with calling functions but the operation functions could be added to that array as well.</p>

<h3>Arrow function simplification</h3>

<p>With arrow functions that only have a single statement that gets returned, the braces and <code>return</code> statement can be omitted. So the calculator operations, i.e.</p>

<blockquote>
<pre><code>/* Calculator operations */
const add      = (n1, n2) =&gt; { return n1 + n2; };
const subtract = (n1, n2) =&gt; { return n1 - n2; };
const multiply = (n1, n2) =&gt; { return n1 * n2; };
const divide   = (n1, n2) =&gt; { return n1 / n2; };
</code></pre>
</blockquote>

<p>Can be simplified as such:</p>

<pre><code>const add      = (n1, n2) =&gt;  n1 + n2; 
const subtract = (n1, n2) =&gt; n1 - n2;
const multiply = (n1, n2) =&gt;  n1 * n2; 
const divide   = (n1, n2) =&gt; n1 / n2; 
</code></pre>

<h3>Simplify ternaries using logical OR</h3>

<p>Instead of using a ternary operator to make a fallback value, like this</p>

<blockquote>
<pre><code> box1: props.num1 ? props.num1 : '',
</code></pre>
</blockquote>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR_()" rel="nofollow noreferrer">Logical OR</a> can be used in the same fashion because of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-circuit_evaluation" rel="nofollow noreferrer">short-circuiting evaluation</a>:</p>

<pre><code>box1: props.num1 || '',
</code></pre>
    </div>