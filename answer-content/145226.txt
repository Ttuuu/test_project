<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well let's start with this:</p>

<pre><code>for (a = 1; a &lt; 100000; a++) {
    for (b = 1; b &lt; 300000; b++) {
        for (c = 1; c &lt; 500000; c++) {
</code></pre>

<p>let's ignore <code>d</code> for now.  What do you do here? You check 1, 1, 1, then 1, 1, 2, then 1, 1, 3, ... up to 1, 1, 499999.  Then you start over at 1, 2, 1.  <strong>But you already checked 1, 1, 2</strong>, so why are you checking 1, 2, 1?  You could go straight to 1, 2, 2.  That doesn't save you much for these low numbers, but believe me, when you get to big numbers it adds up.</p>

<p>In short: a, b, c should be <em>nondecreasing</em>. We can achieve that by starting b at a, and starting c at b, so b is never smaller than a, and c is never smaller than b. So immediately you can get rid of about half the work you're doing with</p>

<pre><code>for (a = 1; a &lt; 100000; a++) {
    for (b = a; b &lt; 300000; b++) {
        for (c = b; c &lt; 500000; c++) {
</code></pre>

<p>Next, consider <code>d</code>.  </p>

<p>Of course we can immediately make the same optimization we just made for a, b and c, since d will never be <em>smaller</em> than any of them, and c is always the largest. </p>

<p>Also, once d<sup>4</sup> is <em>larger</em> than the sum, we can <em>stop</em> incrementing d because it's only going to get bigger.  </p>

<p>So that will save a lot of time right there. But we can do <em>way</em> better than that.</p>

<p>The question you are asking is "do these four numbers have the sum property?" but the question you should be asking is "does a<sup>4</sup> + b<sup>4</sup> + c<sup>4</sup> equal <em>any</em> fourth power?"  If it does, then you can easily compute d much faster than trying all possible fourth powers. So, can you write a fast method that tells you if a particular sum is a fourth power or not?  </p>

<p>If you know how to take a square root, what you can do is take the sum, take the square root twice, and then square the result twice. If you get back the original sum, then it was a fourth power, and if you don't, then it wasn't.  </p>

<p>If you don't know how to take a square root, you can do the following logic:  we have sum; is 128<sup>4</sup> equal to sum?  No.  Is it bigger?  Yes.   Then next try 64<sup>4</sup>.  Is it equal to sum?  No. Is it smaller? Yes.  Then try 96<sup>4</sup>, and so on.  Binary search for the result until you find it, or until there are no more numbers in your range to check.  That does only a tiny handful of computations, compared to trying thousands upon thousands of possible fourth powers.</p>
    </div>