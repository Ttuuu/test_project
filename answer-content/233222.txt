<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start from beginning: you defined a class <code>Solution</code> containing a <code>map</code> like below:</p>

<blockquote>
<pre><code>public class Solution {
    static Map&lt;String, ArrayList&lt;String&gt;&gt; dictionaryMap = new HashMap&lt;String, ArrayList&lt;String&gt;&gt;();
}
</code></pre>
</blockquote>

<p>With the use of <code>ArrayList</code> the map can contains duplicates of string : to avoid this issue you can use a <code>Set</code> and specifically a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html" rel="nofollow noreferrer">TreeSet</a> because when you iterate over keys, they are ordered by their natural ordering. So the class can be rewritten like below:</p>

<pre><code>public class Solution {
    private Map&lt;String, Set&lt;String&gt;&gt; map;

    public Solution() {
        this.map =new TreeMap&lt;&gt;();
    }
}
</code></pre>

<p>Once you defined the class in this way you can define two methods <code>addWords</code> and <code>addWord</code> to add words to your dictionary like below:</p>

<pre><code>public void addWords(String[] words) {
    for (String word : words) {
        addWord(word);
    }
}

private void addWord(String word) {
    String key = generateKey(word);

    if (!map.containsKey(key)) {
        map.put(key, new TreeSet&lt;String&gt;(Arrays.asList(word)));
    } else {
        Set&lt;String&gt; set = map.get(key);
        set.add(word);
    }
}
</code></pre>

<p>You can check inside the method <code>addWord</code> the method <code>generateKey</code> is called to generate the key corresponding to the word you are trying to include in your dictionary; if the key is not already contained in your map  a new <code>TreeSet</code> containing the word will be created and associated to the key in the map, otherwise the word is an anagram of a word already present in the dictionary and will be added to the existing <code>TreeSet</code>.</p>

<p>The most important method of the program is the <code>generateKey</code> method that generate a representation of the word you want to insert in your dictionary, I'm using a representation formed by concatenation of chars of word and their occurrences sorted in alphabethic order:</p>

<ul>
<li>"tea" -&gt; a1e1t1</li>
<li>"eat" -&gt; a1e1t1</li>
</ul>

<p>Below the code of the method generateKey;</p>

<pre><code>private static String generateKey(String word) {
    Map&lt;Character, Integer&gt; map = new TreeMap&lt;&gt;();
    StringBuilder builder = new StringBuilder();
    char arr[] = word.toLowerCase().toCharArray();

    for (char key : arr) {
        int value = map.getOrDefault(key, 0);
        map.put(key, ++value);
    }

    Set&lt;Character&gt; set = map.keySet();
    for (Character ch : set) {
        builder.append(ch + Integer.toString(map.get(ch)));
    }

    return builder.toString();
}
</code></pre>

<p>You can check I used inside the method a <code>TreeMap</code> to obtain characters keys already naturally ordered, so I don't need to use <code>sort</code> method like your code.</p>

<p>The final method is the method <code>getAnagrams</code> that returns the list of anagrams of the word in a array that can be empty if the word or its anagrams are present in the dictionary (I would prefer this method returns an unmodifiable collection instead of array):</p>

<pre><code>public String[] getAnagrams(String word) {
    String key = generateKey(word);
    Set&lt;String&gt; set = map.getOrDefault(key, new TreeSet&lt;&gt;());
    return set.stream().toArray(String[]::new);
}
</code></pre>

<p>Here the complete code of class Solution:</p>

<p><strong>Solution.java</strong></p>

<pre><code>package codereview;

import java.util.Arrays;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class Solution {
    private Map&lt;String, Set&lt;String&gt;&gt; map;

    public Solution() {
        this.map =new TreeMap&lt;&gt;();
    }

    public void addWords(String[] words) {
        for (String word : words) {
            addWord(word);
        }
    }

    private void addWord(String word) {
        String key = generateKey(word);

        if (!map.containsKey(key)) {
            map.put(key, new TreeSet&lt;String&gt;(Arrays.asList(word)));
        } else {
            Set&lt;String&gt; set = map.get(key);
            set.add(word);
        }
    }

    private static String generateKey(String word) {
        Map&lt;Character, Integer&gt; map = new TreeMap&lt;&gt;();
        StringBuilder builder = new StringBuilder();
        char arr[] = word.toLowerCase().toCharArray();

        for (char key : arr) {
            int value = map.getOrDefault(key, 0);
            map.put(key, ++value);
        }

        Set&lt;Character&gt; set = map.keySet();
        for (Character ch : set) {
            builder.append(ch + Integer.toString(map.get(ch)));
        }

        return builder.toString();
    }

    public String[] getAnagrams(String word) {
        String key = generateKey(word);
        Set&lt;String&gt; set = map.getOrDefault(key, new TreeSet&lt;&gt;());
        return set.stream().toArray(String[]::new);
    }

    public static void main(String[] args) {
        Solution obj = new Solution();
        System.out.println("This is a debug message");
        String words[] = { "ate", "eat", "THIS", "EAT" };
        obj.addWords(words);
        for (String anagram : obj.getAnagrams("tea"))
            System.out.println(anagram);
    }
}

</code></pre>
    </div>