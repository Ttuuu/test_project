<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>break</code> and <code>span</code></h1>
<p>When we try to split a string in Haskell, we're a little bit out of luck if we only use the trusty <code>Prelude</code> and <code>base</code>. Handy functions like <code>split</code> or <code>splitOn</code>  are in the adaptly named <code>split</code> package, and parser combinators are completely other beasts and an oribtal (heh) laser cannon on this problem.</p>
<p>However, there are two functions that provide almost exactly what <code>parseOrbit</code> is trying to achieve: splitting a string on a single character:</p>
<pre><code>span, break :: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])
span  f xs = (takeWhile f xs, dropWhile f xs)
break f xs = span (not . f)
</code></pre>
<p>We can simplify <code>parseOrbit</code> therefore to</p>
<pre><code>parseOrbit :: String -&gt; Orbit
parseOrbit s = let (a, _:b) = break (==')') s in (a, b)
</code></pre>
<p>However, you seem to prefer <code>where</code>, so let's use a <code>where</code> clause instead:</p>
<pre><code>parseOrbit :: String -&gt; Orbit
parseOrbit s = (a, b)
    where (a, _:b) = break (==')') s
</code></pre>
<h1>Type signatures in where clauses</h1>
<p>As we have seen above, <code>(a, _:b)</code> had no type signature. Type signatures in <code>where</code> clasues are usually omitted. There is some <a href="https://stackoverflow.com/questions/10609936/why-is-it-so-uncommon-to-use-type-signatures-in-where-clauses">controversy about that</a>, however there are some things to keep in mind:</p>
<ul>
<li>GHC never warns about missing type signatures in <code>where</code> clauses</li>
<li>functions with type parameters cannot have a type without <code>ScopedTypeSignatures</code> (see <a href="https://stackoverflow.com/questions/48400105/specifying-a-function-type-signature-in-a-where-clause">this SO question for an example</a>)</li>
<li>a change in the top level type signature might need a lot of changes in <code>where</code> clauses</li>
<li>if a function is complex enough to need a type, it might be reasonable to promote it into a top-level function. That way it can also be tested.</li>
</ul>
<p>I personally therefore omit type signatures in <code>where</code> clauses (<code>ST</code> shenengians aside).</p>
    </div>