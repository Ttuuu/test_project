<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>... if you noticed any flaws ....</p>
</blockquote>

<p>Problems with <code>scrivi()</code></p>

<pre><code>char * scrivi(const char * a, char * B) {

 char *targetdir = malloc(2048);
 strcpy(targetdir,a);
 strcat(targetdir,"/");
 strcat(targetdir,B);
 return targetdir;
 } 
</code></pre>

<p><strong>Magic number</strong></p>

<p>Why 2048?  Big enough - who knows?  Makes more sense to find the size needed and allocate rather than risk <em>undefined behavior</em> of a buffer overflow with <code>strcpy(targetdir,a);</code></p>

<p><strong><code>strcpy(), strcat(), strcat()</code></strong></p>

<p>Walking down the string 3 times.  Bad enough to do twice.   (With a larger code re-write, we could avoid all repetitive walks down <code>a</code>, that is far below.)</p>

<p><strong><code>char * B</code> better as <code>const char * b</code></strong></p>

<p>Use <code>const</code>.</p>

<p><strong>No error checking</strong></p>

<p>With a recursion function, out-of-memory is a concern.</p>

<p><strong>Alternative</strong></p>

<pre><code>char * scrivi(const char *a, const char *b) {
  size_t a_len = strlen(a);    
  size_t b_len = strlen(b);    
  char *targetdir = malloc(a_len + 1 + b_len + 1);

  if (targetdir) {
    memcpy(targetdir, a, a_len);
    targetdir[a_len] = '/';
    memcpy(targetdir + a_len + 1, b, b_len + 1);
  }
  return targetdir;
} 
</code></pre>

<hr>

<p><strong>Re-write trick</strong></p>

<p>Rather than repetitive <code>malloc()/free()</code>, allocate <strong>once</strong> ever for a working file path buffer.</p>

<pre><code>size_t file_path_size = PATH_MAX * 2;  // Let us be generous.
char file_path = mallloc(file_path_size); 
</code></pre>

<p>Before code calls <code>ricor1()</code> the first time, fill in the directory path and pass how much used, how much total.</p>

<pre><code>strcpy(file_path, argv[2]);
ricor1(argv[1], file_path, strlen(argv[2]), file_path_size);
</code></pre>

<p>When forming the the full path, rather than <code>percorso = scrivi(nomedirectory, fdata-&gt;d_name);</code> with its allocations, write at the right place.</p>

<pre><code>int length = snprintf(file_path + used, file_path_size - used, "/%s", fdata-&gt;d_name);
</code></pre>

<p>When recursing, append the sub-directory name and re-curse with an updated length</p>

<pre><code>ricor1(estensione, file_path, used + length, file_path_size);
</code></pre>

<p>Include ample size error checking.</p>

<p>Consider code only ever needs   1 <code>file_path[]</code> at a time.</p>
    </div>