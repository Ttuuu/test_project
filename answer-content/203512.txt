<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>if we merge both queries &amp; get the results in single query , then will it give better performance?</p>
</blockquote>

<p>There are various aspects of performance here:</p>

<ul>
<li>time</li>
<li>memory</li>
</ul>

<p>My inclination is that you are leaning towards reducing time but maybe you mean memory or should at least consider it. </p>

<p>And consider that if the queries were merged into one, there are variables that would affect performance, including:</p>

<ul>
<li>number of results</li>
<li>separation of data sets (i.e. display on-hold counts vs re-attempted counts in separate lists).</li>
</ul>

<p>Generally it is best perform as few database queries as are necessary. If there were queries executed inside of a loop where data was selected based on a filter condition, it may make sense to perform one query and filter the data inside of the loop. But in this case, there are simply two similar but unique queries.</p>

<p>You didn't include the implementation for <code>$db_handle-&gt;runSelectQuery()</code> but the implementation might affect the answer as well. If that method uses a function to get all results at once (e.g. <a href="http://php.net/mysqli_fetch_all" rel="nofollow noreferrer"><code>mysqli_fetch_all()</code></a>) then it might be better for performance, but otherwise if it fetches results one at a time (e.g. using <a href="http://php.net/mysqli_fetch_all" rel="nofollow noreferrer"><code>mysqli_fetch_all()</code></a> until <code>NULL</code> is returned) then that might add a lot of overhead with looping over results in that method and then your code looping over the results for display purposes.</p>

<p>So in order to get a better answer, you must experiment with your data.</p>

<blockquote>
  <p>if so how to merge ?</p>
</blockquote>

<p>There are multiple ways to do this. One approach is to simply use <a href="https://dev.mysql.com/doc/refman/8.0/en/union.html" rel="nofollow noreferrer"><code>UNION</code></a>. The SQL for the second SELECT query can be appended after the first query and the keyword <code>UNION</code>. </p>

<pre><code>$sql = "SELECT employeename, DATE(reattemptdate) as date, 
COUNT(*) as count, 0 as Held FROM orders 
WHERE DATE(reattemptdate)  = CURDATE() 
GROUP BY employeename, date

UNION

SELECT employeename, DATE(holddate) as date, 
COUNT(*) as count, 1 as Held  FROM orders 
WHERE DATE(holddate)  = CURDATE() 
GROUP BY employeename, date
"; 
</code></pre>

<p>Notice also that those queries have an extra field <code>Held</code>. A field like that can be used to separate the data. That way after the results are fetched, they can be separated into the re-attempted and the held results - perhaps using <a href="http://php.net/array_filter" rel="nofollow noreferrer"><code>array_filter()</code></a>. </p>

<pre><code>//formerly $results
$reattemptedResults = array_filter($results, function($result) {
    return $result['Held'] == 0;
});
//formerly $resultsa 
$heldResults = array_filter($results, function($result) {
    return $result['Held'] == 1;
});
</code></pre>

<p>But keep in mind that this would be iterating over the results potentially 5 times- once to read rows from query results, once for each filtering and then once for each display (though it would be a subset), in that sense performance may actually be worse. </p>

<p>Another option is to use <a href="https://dev.mysql.com/doc/refman/8.0/en/case.html" rel="nofollow noreferrer"><code>CASE</code></a> in the queries to conditionally select and filter results:</p>

<pre><code>$sql = "SELECT employeename, CASE WHEN DATE(reattemptdate)  = CURDATE() THEN DATE(reattemptdate) ELSE DATE(holddate) END as date, 
COUNT(*) as count, CASE DATE(holddate) WHEN CURDATE() THEN 1 ELSE 0 END as Held 
FROM orders 
WHERE DATE(reattemptdate)  = CURDATE() OR  DATE(holddate)  = CURDATE() 
GROUP BY employeename, date, Held"; 
</code></pre>

<p>And the data would still need to be filtered in PHP after the results are fetched. For small sets of data this likely won't be an issue but for large data sets it has a high potential. I suggest <a href="https://stackoverflow.com/a/6245978/1575353">measuring the time</a> with your data in both cases to see how the time compares. I tried it on a small set of data - one distinct employee name, two re-attempted orders and one held order on today's date. The query with <code>CASE</code> was slightly quicker than the original, even with two calls to  filter the data using <code>array_filter()</code>.</p>
    </div>