<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ul>
<li>You are constrained to <code>float</code> which makes your class only usable for a limited number of scenarios. I would like to be able to work with <code>int</code>, <code>double</code>, <code>DateTime</code>, <code>MyCustomEntity</code>, ..</li>
<li>You should not need to care about special cases as unbounded or NaN. NaN should be filtered out beforehand, since it is unusable for comparison. Unbounded and bounded values should be compared by using the built-in interface <code>IComparable</code>.</li>
<li>Intersection of continuous data when 2 edges match requires both edges to be <code>IsInclusive</code> in your specification. I would argue that only one of them should require this flag. Adjacent items that meet each other form an intersection ( [source required] ).</li>
<li>Your struct is immutable, which is proper design. Whether or not to make a class instead, depends on <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct" rel="nofollow noreferrer">how you would like to use this</a>. I tend to prefer class more than struct. Note that a struct has an inherent default value, while a reference type is <code>null</code> by default. How would you distinguish a default value from a value that happens to have the same value? This is one reason to go with a class, unless you cope with this issue by using a <code>Nullable&lt;T&gt;</code> and accepting the overhead it provides.</li>
<li>It is good practice to override <code>GetHashCode()</code> and <code>Equals()</code>.</li>
</ul>

<hr>

<h2>Suggestions</h2>

<p><a href="https://codereview.stackexchange.com/a/226651/200620">1201ProgramAlarm's answer</a> suggests to use <code>IComparable</code> on <code>DimensionBound</code>, but I would use it on the generic type parameter.</p>

<pre><code>public class DimensionBound&lt;T&gt; where T : IComparable&lt;T&gt;
{
    public readonly T Value;
    public readonly bool IsInclusive;

    public DimensionBound(T value, bool isInclusive)
    {
        Value = value;
        IsInclusive = isInclusive;
    }
}
</code></pre>

<p>The interval could then be refactored to compare the values. Note that I would provide a convenience constructor accepting an inclusive start and exclusive end (which is considered common practice when dealing with continuous data). </p>

<p>I would also favour instance methods over the static comparison. Furthermore, I would argue the purpose of the dimension in this class. I would remove it and call the class <code>Interval</code>. You can always create an additional class or use a tuple <code>(int, Interval)</code> to include the dimension.</p>

<pre><code>public sealed class Interval&lt;T&gt; where T : IComparable&lt;T&gt;
{
    public readonly DimensionBound&lt;T&gt; Start;
    public readonly DimensionBound&lt;T&gt; End;

    public Interval(T start, T end)
        : this(ew DimensionBound&lt;T&gt;(start, true), new DimensionBound&lt;T&gt;(end, false))
    {
    }

    public Interval(DimensionBound&lt;T&gt; start, DimensionBound&lt;T&gt; end)
    {
        Start = start;
        End = end;
    }

    public bool Contains(T value)
    {
        // method body ..
    }

    public bool Intersects(Interval&lt;T&gt; other)
    {
        // method body ..
    }
}
</code></pre>

<p>If we don't change your specification and require both edges to be inclusive when 2 intervals meet, we could implement <code>Intersects</code> (<code>Contains</code> is similar) as follows (comments added for code review purposes only):</p>

<pre><code>public bool Intersects(Interval&lt;T&gt; other)
{
    // compare start to other end
    var compareToStart = Start.Value.CompareTo(other.End.Value);

    // no intersection possible; instance starts after other is finished
    if (compareToStart == 1) return false;

    // both intervals meet but at least one of the bounds is exclusive, so no intersection
    if (compareToStart == 0 &amp;&amp; !(Start.IsInclusive &amp;&amp; other.End.IsInclusive)) return false;

    // compare end to other start
    var compareToEnd = End.Value.CompareTo(other.Start.Value);

    // no intersection possible; instance finishes before other is started
    if (compareToEnd == -1) return false;

    // both intervals meet but at least one of the bounds is exclusive, so no intersection
    if (compareToEnd == 0 &amp;&amp; !(End.IsInclusive &amp;&amp; other.Start.IsInclusive)) return false;

    return true;
}
</code></pre>

<p>This works with <code>float</code>, or any other <code>IComparable&lt;T&gt;</code>.</p>

<pre><code>Assert.IsTrue(new Interval&lt;float&gt;(0, 1).Intersects(new Interval&lt;float&gt;(0.5f, 1.5f));
</code></pre>
    </div>