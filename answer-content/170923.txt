<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other reviews are good, but it's possible to create something much closer to the pleasant looking syntax you propose by using a macro.</p>

<pre><code>#define byAscending(field, collection) std::sort(\
        collection.begin(), \
        collection.end(), \
        [](decltype(*collection.begin()) &amp;a, decltype(*collection.begin()) &amp;b){\
           return a.field &lt; b.field;\
        })
</code></pre>

<p>It's a macro, and as such it won't win any beauty contests, but it does make the calling code easy to read and understand:</p>

<pre><code>byAscending(age, people);
</code></pre>

<p>If desired, the macro could be made to encapsulate only the lambda.  That might look like this:</p>

<pre><code>#define byAscending(object, field) [](object &amp;a, object &amp;b){\
                                      return a.field &lt; b.field;}
</code></pre>

<p>Usage of that version looks like this:</p>

<pre><code>std::sort(people.begin(), people.end(), byAscending(Person, age));
</code></pre>

<p>I'm undecided as to whether this is better or worse than the original, but it seemed like a not unreasonable use of a macro.</p>
    </div>