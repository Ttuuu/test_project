<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>The trouble here is ownership. Who owns the <code>tail</code>?</p>
<p>In C++ ownership is a very important topic and defines who is responsible for who should destroy an object. The problem with C like pointers is there are no explicit ownership semantics. So as part of the documentation you need to define who the owner (and people read documentation is the problem here) is otherwise things go wrong and the wrong person will delete the object or it will never get deleted.</p>
<p>This is why in modern C++ it is very <strong>uncommon</strong> to see C-pointers. Because there is no ownership defined. You can use smart pointers to explicitly define the owner of a pointer or you can use references to show that you are retaining ownership.</p>
<p>Note: Inside a class it's OK to use a pointer as you control everything inside a class. The problems happen when you leak a pointer through a public interface.</p>
<p>You don't show how you expect your class to be used, but given the interface it is easy to use it with pointers and leak object all over the place. Given the current interface I would expect the following to be standard usage:</p>
<pre><code> ImmutableList&lt;int&gt;* data = new List&lt;int&gt;(1, new List&lt;int&gt;(2, new List&lt;int&gt;(3, new Nil&lt;int&gt;())));

 // Do stuff.

 delete data;
</code></pre>
<p>This leads to all but the first element from being leaked (because the destructor does not delete the chain).</p>
<p>Now you can't just add a delete into the destructor as you can retrieve the tail and place it another object.</p>
<pre><code>ImmutableList&lt;int&gt;* data1 = new List&lt;int&gt;(1, new Nil&lt;int&gt;());
ImmutableList&lt;int&gt;* data2 = new List&lt;int&gt;(2, data1-&gt;tail());
</code></pre>
<p>In this situation simply deleting the tail is not going to work as both <code>data1</code> and <code>data1</code> share the same tail. So you need some form of shared ownership semantics. Now you can do this yourself but if you try and implement your own ownership semantics then you need to define the copy and move operators for your class.</p>
<pre><code>// Copy Operators
List&amp; List::List(List const&amp;);
List&amp; List::operator=(List const&amp;);

// Move Operators
List&amp; List::List(List&amp;&amp;);
List&amp; List::operator=(List&amp;&amp;);
</code></pre>
<p>This becomes exceedingly not trivial when you have shared objects. So really you need to use <code>std::shared_ptr</code>.</p>
<h2>Code Review</h2>
<p>If you have a base class with virtual methods then you your destructor should also be virtual:</p>
<pre><code>template &lt;class T&gt;
class ImmutableList {
    public: 
       // Destructor should be declared virtual
       ~ImmutableList() {std::cout &lt;&lt; "base class destructor";}
       ...
}
</code></pre>
<p>This is because you are likely to use <code>delete</code> on a base class pointer that points at a derived type. If the destructor is not virtual you call the wrong destructor.</p>
<p>Your code is not <code>const</code> correct.</p>
<pre><code>virtual bool is_empty() = 0;
virtual T head() = 0;
virtual ImmutableList&lt;T&gt; * tail() = 0; 
</code></pre>
<p>All the above methods are const (as your class is <code>Immutable</code>). So you can change the object just query it.</p>
<pre><code>virtual bool              is_empty() const = 0;
virtual T                 head()     const = 0;
virtual ImmutableList&lt;T&gt;* tail()     const = 0; 
virtual int               length()   const = 0;
                                  // ^^^^^
</code></pre>
<p>You return the head by value. This causes a copy of the object. Now for int and other simple types this is not a problem. But for complex types (like vector) a copy may be much more expensive.</p>
<p>So normally you return by reference. Not because the class in <code>Immutable</code> you should return a const reference.</p>
<pre><code>virtual const&amp; T head()                 const = 0;
    //  ^^^^^^
</code></pre>
<p>Now you return a reference to the object (allowing it to be queried). If you actually want a copy you can assign it to a variable and it will be copied.</p>
<pre><code>T val = data1-&gt;head();
</code></pre>
    </div>