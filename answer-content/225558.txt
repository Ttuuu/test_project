<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Note: I realize this was asked in 2014, and many python style requirements may have been different.</em></p>

<ul>
<li><strong>Docstrings</strong>: You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every method, class, and module you write. This will help any documentation identify what your program is supposed to do.</li>
<li><strong>Imports</strong>: You imported <code>path</code> from <code>os</code> in your method <code>file_does_exist</code>. <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">This does not follow proper PEP-8 import formatting</a>. All your imports should be placed at the top of your code, regardless of when you use them. They should also be grouped (standard library imports, related third party imports, then local application imports) and separated by a blank line.</li>
<li><strong>Unused variables in loops</strong>: Many times you do <code>for i, x in enumerate(split):</code>, yet you never use the <code>x</code>. You can instead use an <code>_</code>, which will make it clear that that variable is to be, essentially, ignored.</li>
<li><strong>Variable Naming</strong>: Using one letter names isn't recommended, as it's hard to know what they're used for without looking at the code around them. This practices can greatly improve readability of your code.</li>
<li><strong>Simplify boolean comparisons</strong>: </li>
</ul>

<p>In your code you had:</p>

<pre><code>if path.isfile(path.join(file_path)):
    return True
return False
</code></pre>

<p>Instead of returning pure <code>True/False</code>, you can return the condition instead, since it returns a boolean anyway, like so:</p>

<pre><code>return path.isfile(path.join(file_path))
</code></pre>

<ul>
<li><strong>type vs isinstance</strong>: <a href="https://stackoverflow.com/a/1549854/8968906">This StackOverflow answer</a> provides a <em>very</em> good and in-depth explanation about <code>type</code> and <code>isinstance</code> and when to use them.</li>
<li><strong>Variable and operator spacing</strong>: In your code you had: <code>with open(self.path+'test', "w+") as file:</code> While this is the only place in the code (that I saw) that doesn't space out, you should be consistent. Spacing out code improves readability of your code.</li>
<li><strong>Indentation</strong>: Stay consistent with your indentation. A few times you indented four spaces too much. This can put variables/methods in an entirely different scope.</li>
<li><strong>Redeclaring from outside scope</strong>: You import <code>path</code>, yet also have a parameter with the name <code>path</code>. This can cause some naming issues. In your circumstance, changing the parameter to <code>file_path</code> clears this concern, and also provides clarity about what the path actually is.</li>
</ul>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring:
A description about your program goes here
"""

from os import path

from treestructinfo import tsi_elements

FORMAT_VERSION = 0.1

class TsiFile:
    """
    Class for a TsiFile
    """
    def __init__(self, file_path="tsi_file.tsinfo", flags=['text', 'write']):
        self.path = file_path

         # TsiFile is also a node
        self.current_node = ""
        self.elements = []

        # converts parameter list into string understandable for open() method
        self.flags = get_flags(flags)

        if not file_does_exist(self.path):
            raise FileNotFoundError

        parse_data(self, self.path, self.flags)

    def save(self):
        """
        Saves content to a file at `self.path`
        """
        with open(self.path + 'test', "w+") as file:
            refs = []  # list of referenced elements is used to correctly place definitions and declarations
            indent = 0  # number of spaces before line (+2 for each level of nesting)

            file.write('tsinfo version "{}"\n'.format(FORMAT_VERSION))

            def iterate(ele):
                """
                Iterates over the current element, `ele`

                :param ele: Element to be iterated over

                """
                nonlocal indent
                if isinstance(ele, tsi_elements.TsiAttr):
                    name = ele.name
                    if ele.ref:
                        refs.append(ele)
                        file.write('{}ref attr {}\n'.format(' ' * indent, name))
                    else:
                        value_list = ele.value.split('\n')  # multiline values are separated by \n char
                        line = '{}attr {}'.format(' ' * indent, name)
                        if len(value_list) == 1:  # value is a single line
                            value = value_list[0]
                        else:  # joining multiline strings
                            value = '\n'.join([' ' * line.length() + '"' + split + '"' for split in value_list])
                        file.write('{} "{}"\n'.format(line, value))
                else:  # type is tsi_elements.TsiNode
                    if not ele.ref and ele.link is None:
                        file.write('{}node {}\n'.format(' ' * indent, ele.name))
                        indent += 2
                        for element in ele.elements:
                            iterate(element)
                            if element == ele.elements[-1]:  # adding closing tag after all the content is saved
                                indent -= 2
                                file.write('{}end\n'.format(' ' * indent))
                    elif ele.link is not None:
                        file.write('{}link "{}" as "{}"\n'.format(' ' * indent, ele.link, ele.name))
                    else:  # ele.ref
                        refs.append(ele)
                        file.write('{}ref node {}\n'.format(' ' * indent, ele.name))

            def iterate_ref(ele):
                """
                Iterates over the reference of the passed element, `ele`

                :param ele: Element whos reference is to be iterated over

                """
                ref_counter = 1
                nonlocal indent
                if isinstance(ele, tsi_elements.TsiAttr):
                    if ele.ref:
                        value_list = ele.value.split('\n')  # multiline values are separated by \n char
                        line = '{}ref attr {}'.format(' ' * indent, ele.name)
                        if len(value_list) == 1:  # value is a single line
                            value = value_list[0]
                        else:  # joining multiline strings
                            value = '\n'.join([' ' * line.length() + '"' + split + '"' for split in value_list])
                        file.write('{} "{}"\n\n'.format(line, value))
                else:  # type is tsi_elements.TsiNode
                    file.write('{}ref node {}\n'.format(' ' * indent, ele.name))
                    indent += 2
                    for element in ele.elements:
                        if element.ref:
                            refs.insert(refs.index(ele) + ref_counter, element)
                            ref_counter += 1
                            if isinstance(element, tsi_elements.TsiNode):
                                file.write('{}ref node {}\n'.format(' ' * indent, element.name))
                            else:
                                file.write('{}ref attr {}\n'.format(' ' * indent, element.name))
                        else:
                            iterate(element)
                        if element == ele.elements[-1]:
                            indent -= 2
                            file.write('{}end ref\n\n'.format(' ' * indent))

            for element in self.elements:
                iterate(element)
                if element == self.elements[-1]:
                    file.write('\nend tree\n\n')

            for element in refs:
                iterate_ref(element)

    def get_element_value(self, attr_path):
        """
        Base method, returns value with str type

        :param attr_path: Path to the attribute

        """
        return self._get_attr(attr_path).value

    def write_value(self, attr_path, value):
        """
        Base writing method

        :param attr_path: Path to the attribute
        :param value: Value to be assigned to the attribute

        """
        self._get_attr(attr_path).value = value

    def _get_attr(self, attr_path):
        """
        Returns the attribute in the passed `attr_path` path

        :param attr_path: Path to the attribute

        """
        path_list = attr_path.split("\\")
        current_node = self
        for path_item in path_list:
            if path_item == path_list[-1]:  # last item is an attribute
                for element in current_node.elements:
                    if isinstance(element, tsi_elements.TsiAttr) and element.name == path_item:
                        return element

            for element in current_node.elements:  # all the rest are nodes
                if isinstance(element, tsi_elements.TsiNode) and element.name == path_item:
                    current_node = element
        return None


def parse_data(master_element, file_path, flags):
    """
    Parses passed data

    :param master_element: The master element
    :param file_path: The path to the file
    :param flags: Specific flags to open file with

    """
    with open(file_path, flags) as file:
        lines = [l for l in (line.strip(" \t\n") for line in file) if l]  # removing blank lines and side whitespaces
        current_attr = None
        current_node = ""
        ref_elements = []
        ref_counter = 0
        for line in lines:
            if current_node is None:  # we are in the main tree
                if line.startswith("node"):
                    name = line.split(maxsplit=1)[1].strip()
                    current_node = tsi_elements.TsiNode(name)
                    master_element.elements.append(current_node)
                elif line.startswith("attr"):
                    quote_index = line.index("\"")
                    name = line[line.index("attr") + 5:quote_index]
                    current_attr = tsi_elements.TsiAttr(name, line[quote_index:line.rindex("\"")])
                    master_element.elements.append(current_attr)
                elif line.startswith("\""):
                    value = "\n" + line[1:line.rindex("\"")]
                    current_attr.value += value
                    master_element.elements[-1].value += value
                elif line.startswith("ref attr"):
                    name = line.split(maxsplit=2)[2].strip()
                    attr = tsi_elements.TsiAttr(name, ref=True)
                    ref_elements.insert(ref_counter + 1, attr)
                    master_element.elements.append(attr)
                elif line.startswith("ref node"):
                    node = tsi_elements.TsiNode(line.split(maxsplit=2)[2].strip(), current_node, ref=True)
                    ref_elements.append(node)
                    master_element.elements.append(node)
                elif line.startswith("end tree"):
                    current_node = ""
                elif line.startswith("link"):
                    split = line.split("\"")
                    for i, _ in enumerate(split):
                        split[i] = split[i].strip()
                        if split[i] == "":
                            del split[i]
                    file_name = split[1]
                    name = split[3]
                    node = tsi_elements.TsiNode(name, current_node, link=file_name)
                    current_node.elements.append(node)
                    flags = split[5:]
                    if not flags:
                        parse_data(node, file_name, "r+")
                    else:
                        parse_data(node, file_name, get_flags(split[5:]))

            elif isinstance(current_node, str):  # we are outside of the main tree (referenced elements here)
                if line.startswith("tsinfo"):
                    current_node = None
                elif line.startswith("ref node"):
                    node = ref_elements[0]
                    current_node = node
                elif line.startswith("ref attr"):
                    attr = ref_elements.pop(0)
                    attr.value = line[line.index("\"") + 1:line.rindex("\"")]
                    current_attr = attr
                elif line.startswith("\""):
                    value = "\n" + line[1:line.rindex("\"")]
                    current_attr.value += value

            elif not current_node.ref:
                if line.startswith("node"):
                    name = line.split(maxsplit=1)[1].strip()
                    node = tsi_elements.TsiNode(name, current_node)
                    current_node.elements.append(node)
                    current_node = node
                elif line.startswith("end"):
                    current_node = current_node.upper_node
                elif line.startswith("attr"):
                    quote_index = line.index("\"")
                    name = line[line.index("attr") + 4:quote_index].strip()
                    current_attr = tsi_elements.TsiAttr(name, line[quote_index + 1:line.rindex("\"")])
                    current_node.elements.append(current_attr)
                elif line.startswith("\""):
                    value = "\n" + line[1:line.rindex("\"")]
                    current_attr.value += value
                elif line.startswith("ref node"):
                    node = tsi_elements.TsiNode(line.split(maxsplit=2)[2].strip(), current_node, ref=True)
                    ref_elements.append(node)
                    current_node.elements.append(node)
                elif line.startswith("ref attr"):
                    name = line.split(maxsplit=2)[2].strip()
                    attr = tsi_elements.TsiAttr(name, ref=True)
                    ref_elements.insert(ref_counter + 1, attr)
                    current_node.elements.append(attr)
                elif line.startswith("link"):
                    split = line.split("\"")
                    for i, _ in enumerate(split):
                        split[i] = split[i].strip()
                        if split[i] == "":
                            del split[i]
                    file_name = split[1]
                    name = split[3]
                    node = tsi_elements.TsiNode(name, current_node, link=file_name)
                    current_node.elements.append(node)
                    flags = split[5:]
                    if not flags:
                        parse_data(node, file_name, "r+")
                    else:
                        parse_data(node, file_name, get_flags(split[5:]))

            elif current_node.ref:
                if line.startswith("node"):
                    name = line.split(maxsplit=1)[1].strip()
                    node = tsi_elements.TsiNode(name, current_node)
                    current_node.elements.append(node)
                    current_node = node
                elif line.startswith("end ref"):
                    ref_elements.remove(current_node)
                    current_node = ""
                    ref_counter = 0
                elif line.startswith("attr"):
                    quote_index = line.index("\"")
                    name = line[line.index("attr") + 5:quote_index].strip()
                    current_attr = tsi_elements.TsiAttr(name, line[quote_index + 1:line.rindex("\"")])
                    current_node.elements.append(current_attr)
                elif line.startswith("ref node"):
                    node = tsi_elements.TsiNode(line.split(maxsplit=2)[2].strip(), current_node, ref=True)
                    ref_elements.insert(ref_counter + 1, node)
                    ref_counter += 1
                    current_node.elements.append(node)
                elif line.startswith("ref attr"):
                    name = line.split(maxsplit=2)[2].strip()
                    attr = tsi_elements.TsiAttr(name, ref=True)
                    ref_elements.insert(ref_counter + 1, attr)
                    current_node.elements.append(attr)
                elif line.startswith("\""):
                    value = "\n" + line[1:line.rindex("\"")]
                    current_attr.value += value
                elif line.startswith("link"):
                    split = line.split("\"")
                    for i, _ in enumerate(split):
                        split[i] = split[i].strip()
                        if split[i] == "":
                            del split[i]
                    file_name = split[1]
                    name = split[3]
                    node = tsi_elements.TsiNode(name, current_node, link=file_name)
                    current_node.elements.append(node)
                    flags = split[5:]
                    if not flags:
                        parse_data(node, file_name, "r+")
                    else:
                        parse_data(node, file_name, get_flags(split[5:]))


def get_flags(flag_list):
    """
    Converts parameter list into string understandable for open() method

    :param flag_list: List of flags for opening files

    """
    flags = "r"  # read
    if 'text' and 'binary' in flag_list:
        raise Exception("Flag can't be 'text' and 'binary' at the same time.")

    if 'write' in flag_list:
        flags += "+"

    if 'text' in flag_list:
        flags += "t"
    elif 'binary' in flag_list:
        flags += "b"
    else:
        raise ValueError("Wrong flags provided, specify 'text' or 'binary' flag")

    return flags

def file_does_exist(file_path):
    """
    Returns a boolean based on if the file at `file_path` exists

    :param file_path: File to check for existence

    """
    return path.isfile(path.join(file_path))
</code></pre>
    </div>