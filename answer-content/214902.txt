<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your functions are doing too much. Remember: <em>one function, one responsibility</em>. That is, the <code>encode</code> function actually both encodes and decodes and that behavior is controlled via its arguments. In particular, the choice of behavior is offloaded to <code>shiftF</code> based on a <code>char</code>. There is no error if that <code>char</code> is anything other than <code>'d'</code> or <code>'e'</code>. This is something that we should absolutely try to avoid: we want to catch as many problems as we can at compile-time, but even runtime errors are preferred to silent errors!</p>

<p>On closer inspection, there is no need for such a complication. In fact, the only difference between encoding and decoding is the sign of <code>shift</code>. So we could write:</p>

<pre><code>std::string encode(const std::string&amp; str, int shift)
{
    std::string tempMsg;

    std::transform(str.cbegin(), str.cend(), std::back_inserter(tempMsg), [&amp;](char ch) -&gt; char
    { 
        if (isspace(ch))
            return ' ';

        return ch == 'z' || ch == 'Z' ? ch - 25 : ch + shift; 
    });

    return tempMsg;
}

std::string decode(const std::string&amp; str, int shift)
{
    return encode(str, -1 * shift);
}
</code></pre>

<p>What is happening here?</p>

<ul>
<li><p>We pass the input message <code>str</code> as a const-ref and not by-value as in your original code. When you pass by-value, the object gets copied and in this case there is no reason for it. In this case, you could actually even pass the object by-reference only, and modify it in-place but we're not doing it here.</p></li>
<li><p>We use a standard function <a href="https://en.cppreference.com/w/cpp/algorithm/transform" rel="nofollow noreferrer"><code>std::transform</code></a> with a <a href="https://en.cppreference.com/w/cpp/language/lambda" rel="nofollow noreferrer">lambda function</a> that encapsulates the logic of <code>shiftF</code>. You need to include <code>&lt;algorithm&gt;</code> for this use.</p></li>
<li><p>The third argument for <code>std::transform</code> is <code>std::back_inserter</code> found from <code>&lt;iterator&gt;</code>, which takes care of inserting at the back of the string <code>tempMsg</code>.</p></li>
<li><p>Conceptually, the division of encoding and decoding into separate functions is cleaner and more logical. Whenever you can implement another function in terms of other functions, it's likely a good idea because you don't have to repeat yourself leading to less maintenance decreasing the chances for bugs.</p></li>
</ul>

<p>Once you adopt this approach, you can get rid of the <code>const char</code> variables from your main program, and just call the correct <code>encode</code> or <code>decode</code> function inside your if-statement. As a side remark, you could also return meaningful error codes in your main. For example, if the choice is invalid, return from the else-branch e.g., <code>EXIT_FAILURE</code>.</p>
    </div>