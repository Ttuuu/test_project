<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>When OOP becomes Oops...</h1>

<p>We have this very powerful tool, called SQL, to access a database. It can do efficient and complex actions on a relational database. But what do you do? You throw all of this away and you create a set of classes with very limited capability. Why do you do this? </p>

<p>The answer eludes me. Do you find SQL too ugly, or too difficult to learn? Do you not like normal data, or do you feel a need to make everything into objects? I can only guess.</p>

<p>There are alternatives, even in OOP <em>(Object Oriented Programming)</em>. Wouldn't it be far more powerful to model SQL in classes? This has been done many times and can be found in most frameworks, <a href="http://www.yiiframework.com/doc-2.0/yii-db-mysql-querybuilder.html" rel="nofollow noreferrer">here</a> are just <a href="http://laravel.com/docs/4.2/queries" rel="nofollow noreferrer">some</a> examples.</p>

<p>They don't limit what you can do. At their best they help you to write better SQL commands. In Laravel your query would look something like this:</p>

<pre><code>$userID = $user-&gt;getInfo('userID');
$gameID = $game-&gt;getInfo('gameID');
$info   = DB::table('players')-&gt;where('userID','=',$userID)
                              -&gt;where('gameID','=',$gameID)
                              -&gt;get();
</code></pre>

<p>Now this may, on the surface, not look better than your example, but it is far more flexible. There are fewer limitation build into this code, see the documentation. </p>

<p>Your approach would fail miserably when you have to retrieve data from more than one table, which often happens in many projects. You would have to perform many look-ups where SQL, even in the OOP versions, can do it in one.</p>

<p>Personally I often still prefer the normal SQL strings:</p>

<pre><code>$SQL = 'SELECT * FROM players WHERE userID = :userID AND gameID = :gameID';
</code></pre>

<p>but there are conditions in which the OOP approach, of writing a SQL command, has its benefits. In the past, when a SQL command depended on many conditions writing the SQL string could become a mesh. The OOP approach to SQL can really help there. </p>

<p>My advice would be to learn OOP by starting at the beginning, with simple examples. Get a feel for what it can, and cannot do. Read a book, try the examples, build something simple yourself. Be creative, but never use OOP for the shake of using OOP.</p>
    </div>