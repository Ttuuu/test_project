<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using generator is a good way to implement this.</p>

<p>Let's see what can be improved.</p>

<p><strong>Additional variable</strong></p>

<p>The expression <code>min(height, width)</code> is computed multiple times. It would be easier to store in a variable:</p>

<pre><code>min_dim = min(height, width)
</code></pre>

<hr>

<p><strong>Dimensions as parameters (and other signature changes)</strong></p>

<p>Having the dimensions are parameters for the method is a bit unexpected.</p>

<p>You could rewrite the method by relying on the attribute of the instance:</p>

<pre><code>def get_rows(self):
    width, height = self.width, self.height
    ... # code unchanged
</code></pre>

<p>An alternative could be to write a standalone function (not a method) that does take 2 dimensions as parameters and return indices (instead of values from board).</p>

<pre><code>def get_lines_in_rectangle(width, height):
    # get horizontal rows
    for row in range(height):
        yield [(row, col) for col in range(width)]
    # get vertical rows
    for col in range(width):
        yield [(row, col) for row in range(height)]
     # get diagonal and anti-diagonal rows
    min_dim = min(height, width)
    for num in range(width + height - 1):
        row = min(num, height - 1)
        col = max(0, num + 1 - height)
        yield [(row-i, col+i)
               for i in range(min_dim)
               if row-i &gt;= 0 and col+i &lt; width]
        row = max(0, num + 1 - width)
        col = max(0, width - 1 - num)
        yield [(row+i, col+i)
               for i in range(min_dim)
               if row+i &lt; height and col+i &lt; width]

...

    def get_rows(self):
        for l in get_lines_in_rectangle(self.width, self.height):
            yield [self.board[row][col] for row, col in l]
</code></pre>

<p>Both solutions have pros and cons - I have no perfect solution to suggest.</p>

<p>This function may be slightly less efficient but it is much easier to unit-test as the results depends on 2 integers instead of a full game state.</p>

<p>Also, this could be computed once and for all and re-applied to the game state easily on demand.</p>

<p>Going further, we could also write a function computing lines of length l:</p>

<pre><code>def get_lines_of_len_in_rectangle(length, width, height):
    for l in get_lines_in_rectangle(width, height):
        for i in range(len(l) + 1 - length):
            yield l[i:i+length]
</code></pre>

<p>This can also:
 - be unit-tested more easily
 - be computed once and stored for future reuse</p>

<p>And then used easily in <code>check_won</code> (we don't need the <code>get_rows</code> method anymore):</p>

<pre><code>    def check_won(self, player):
        for l in get_lines_of_len_in_rectangle(self.win_amount, self.width, self.height):
            if all(self.board[row][col] == self.players[player] for row, col in l):
                return True
        return False
</code></pre>

<hr>

<p><strong>Another idea</strong></p>

<p>All the ideas above don't really matter if we try to see how humans would handle that task: only once a new move is completed, we check if there is a matching line from that new position. Thus, we do not need to consider all lines but a very minimal subset of it (a single row, a single column and two diagonals).</p>

<hr>

<p><strong>Recursion</strong></p>

<p>Recursion is a great tool (especially to handle data structure with a definition which is itself based on recursion).</p>

<p>However, it is not always the best tool especially in Python as <a href="https://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion">it does not optimise tail recursion</a>.</p>

<p>Here, it can lead to situations in <code>play</code> or <code>move</code> where the call stack gets arbitrarily big and:</p>

<ul>
<li>stacktraces becomes impossible to use</li>
<li>we may get an exception when maximum recursion depth is exceeded.</li>
</ul>

<p>For <code>play</code>, my suggestion is to introduce a new function:</p>

<pre><code>def play():
    game = ConnectFour(7, 6, 4)
    game.print_board()
    player = 0
    for _ in range(game.width * game.height):
        game.move(player)
        game.print_board()
        if game.check_won(player):
            print(game.players[player], 'wins!')
            break
        player = (player + 1) % 2
    else:
        print("It's a draw!")

def play_games():
    while True:
        play()
        if not input('Play again? (yes or no): ').lower().startswith('y'):
            break

</code></pre>

<p>For <code>move</code>, we can just wrap the whole logic in a while loop even tough readability suffers a bit of it:</p>

<pre><code>   def move(self, player):
        while True:
            while True:
                move = self.ask_number(player)
                if 0 &lt;= move &lt; self.width:
                    break
                print('Choose a row between 1 and ', self.width, '!', sep='')
            for row in reversed(self.board):
                if row[move] == '':
                    row[move] = self.players[player]
                    return
            print('This row is full. Try again!')
</code></pre>

<p>We could split it with another method:</p>

<pre><code>    def ask_move(self, player):
        while True:
            move = self.ask_number(player)
            if 0 &lt;= move &lt; self.width:
                return move
            print('Choose a row between 1 and ', self.width, '!', sep='')

    def move(self, player):
        while True:
            move = self.ask_move(player)
            for row in reversed(self.board):
                if row[move] == '':
                    row[move] = self.players[player]
                    return
            print('This row is full. Try again!')
</code></pre>

<hr>

<p><strong>The play function</strong></p>

<p>It seems like it could make sense for play to be a method rather than a function.</p>

<p>We'd have:</p>

<pre><code>    def play(self):
        self.print_board()
        player = 0
        for _ in range(self.width * self.height):
            self.move(player)
            self.print_board()
            if self.check_won(player):
                print(self.players[player], 'wins!')
                break
            player = (player + 1) % 2
        else:
            print("It's a draw!")

def play_games():
    while True:
        ConnectFour(7, 6, 4).play()
        if not input('Play again? (yes or no): ').lower().startswith('y'):
            break
</code></pre>

<hr>

<p><strong>A lying UX ?</strong></p>

<p>The line <code>if not input('Play again? (yes or no): ').lower().startswith('y')</code> shows something which can be confusing: we lie to the user.</p>

<p>We tell the user that the valid options are "yes" and "no" but "Yankee" would start the game all the same.</p>

<p>There are various ways to handle it (changing the message, changing the validation code).</p>

<hr>
    </div>