<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>data = json.load(open("vocabulary.json"))
</code></pre>

<p>Unless Python 3 has changed this, I think you're leaking the open file handle here. What you want is more like</p>

<pre><code>with open("vocabulary.json") as f:
    data = json.load(f)
</code></pre>

<p>which IMHO is even a bit easier to read because it breaks up the mass of nested parentheses.</p>

<pre><code>vocab = random.choice(list(data.keys())).lower()
</code></pre>

<p>Same deal with the nested parentheses here. We can save one pair by eliminating the unnecessary materialization into a <code>list</code>. [EDIT: Graipher points out that my suggestion works only in Python 2. Oops!]</p>

<p>Also, <code>vocab</code> (short for <em>vocabulary</em>, a set of words) isn't really what this variable represents. <code>data.keys()</code> is our <em>vocabulary</em>; what we're computing on this particular line is a single <em>vocabulary word</em>. So:</p>

<pre><code>word = random.choice(data.keys()).lower()
print(word)
print(hangman_game(word))
</code></pre>

<p>I can tell you're using Python 3 because of the ugly parentheses on these <code>print</code>s. ;) But what's this? Function <code>hangman_game</code> doesn't contain any <code>return</code> statements! So it basically returns <code>None</code>. Why would we want to print <code>None</code> to the screen? We shouldn't be <em>printing</em> the result of <code>hangman_game</code>; we should just call it and discard the <code>None</code> result.</p>

<pre><code>word = random.choice(data.keys()).lower()
print(word)
hangman_game(word)
</code></pre>

<hr>

<pre><code>def hangman_game(vocab):
</code></pre>

<p>Same comment about <code>vocab</code> versus <code>word</code> here.</p>

<pre><code>'Preliminary Conditions'
</code></pre>

<p>This looks like you maybe forgot a <code>print</code>? Or maybe you're trying to make a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a>? But single quotes don't make a docstring AFAIK, and even if they did, "Preliminary Conditions" is not a useful comment. I'd just delete this useless line.</p>

<pre><code>print(introductory(vocab=vocab))
</code></pre>

<p>In all of these function calls, you don't need to write the argument's name twice. It's a very common convention that if you're calling a function with only one argument, the argument you pass it is precisely the argument it needs. ;) Also, even if the function takes multiple parameters, the reader will generally expect that you pass it the right number of arguments <em>in the right order</em>. You don't have to keyword-argument-ize each one of them unless you're doing something tricky that needs calling out. So:</p>

<pre><code>print(introductory(word))
</code></pre>

<p>And then you can inline <code>introductory</code> since it's only ever used in this one place and it's a one-liner already:</p>

<pre><code>print(
    "HANGMAN GAME. So...what you gotta do is guess and infer what the word might be. "
    "WORD COUNT : " + str(len(vocab))
)
</code></pre>

<p>Personally, I would avoid stringifying and string-concatenation in Python, and write simply</p>

<pre><code>print(
    "HANGMAN GAME. So...what you gotta do is guess and infer what the word might be. "
    "WORD COUNT : %d" % len(vocab)
)
</code></pre>

<p>I know plenty of working programmers who would write</p>

<pre><code>print(
    "HANGMAN GAME. So...what you gotta do is guess and infer what the word might be. "
    "WORD COUNT : {}".format(len(vocab))
)
</code></pre>

<p>instead. (I find that version needlessly verbose, but it's definitely a popular alternative.)</p>

<pre><code>tries = num_of_tries(vocab=vocab)
blank_line = produce_blank_lines(vocab=vocab)
print(blank_line)
print(guessing(tries=tries,vocab=vocab,blank_line=blank_line))
</code></pre>

<p>It's odd that you abbreviated <code>number_of_tries</code> to <code>num_...</code>, but then left in the word <code>of</code>. I would expect either <code>number_of_tries</code> or <code>num_tries</code> (or <code>ntries</code> for the C programmers in the audience); <code>num_of_tries</code> is in a weird no-man's-land.</p>

<p>It's weird that you have a function named <code>produce_blank_lines</code> that produces actually a <em>single</em> <code>blank_line</code>. It's even weirder that the value of <code>blank_line</code> is not a constant <code>"\n"</code>! This suggests that everything here is misnamed. You probably meant <code>underscores = produce_underscores(word)</code> or even <code>blanks = shape_of(word)</code>.</p>

<p>Finally, it is weird that <code>blank_line</code> is not even a string, but rather a <code>list</code> of characters.</p>

<p>I would replace this entire dance with something like</p>

<pre><code>blanks = ''.join('_' if c.isalpha() else ch for ch in word)
</code></pre>

<p>or</p>

<pre><code>blanks = re.sub('[A-Za-z]', '_', word)
</code></pre>

<p>This would lose your addition of a blank space after each non-space-non-alpha character, but IMHO that's actually an <em>improvement</em> over your version. (Your sample JSON doesn't show any examples of words containing non-space-non-alpha characters. My version certainly performs better for words like <code>non-space</code> or <code>Route 66</code>.)</p>

<hr>

<pre><code>if not(user_input in blank_line):
</code></pre>

<p>This would be idiomatically expressed (both in Python and in English) as</p>

<pre><code>if user_input not in blank_line:
</code></pre>

<hr>

<pre><code>index = find_letter(user_input=user_input,vocab=vocab)
i = 0
while i &lt; len(index):
    blank_line[index[i]] = user_input
    i += 1
</code></pre>

<p>You have another singular/plural problem here (just like with <code>blank_line[s]</code>). It doesn't make sense to get the <code>len</code> of a singular <code>index</code>. Since the variable actually represents a list of indices, we should <em>name</em> it <code>[list_of_]indices</code>.</p>

<p>Also, this style of for-loop is very un-Pythonic. In Python we can say simply</p>

<pre><code>for i in find_letter(user_input, word):
    blank_line[i] = user_input
</code></pre>

<p>And then we can inline the single-use <code>find_letter</code>:</p>

<pre><code>for m in re.finditer(user_input, word):
    blank_line[m.start()] = user_input
</code></pre>

<p>(Using <code>m</code> as the conventional name for a match object.)
And then we can eliminate the regex and just loop over the <code>word</code> directly:</p>

<pre><code>for i, ch in enumerate(word):
    if ch == user_input:
        blank_line[i] = user_input
</code></pre>

<p>or</p>

<pre><code>for i in range(len(word)):
    if word[i] == user_input:
        blank_line[i] = user_input
</code></pre>

<p>In fact, <a href="http://regex.info/blog/2006-09-15/247" rel="nofollow noreferrer">by not using regexes, we fix a bug</a> in your code: if the chosen vocabulary word contains <code>.</code> as one of its non-space-non-alpha characters, a user who enters <code>.</code> as their guess will win the game immediately! :D</p>

<p>Anyway, that's enough for one answer, I think.</p>
    </div>