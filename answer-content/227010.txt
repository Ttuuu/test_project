<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, you're going through the list of items to find all distinct children. Then, for each child, you're going through the list again to find all items that it belongs to, and then you take the lowest item ID. That's <span class="math-container">\$O(n^2)\$</span> in worst-case scenarios, though in practice it'll be closer to <span class="math-container">\$O(n)\$</span> if you don't have too many distinct children.</p>

<p>A more efficient approach would be to create ID-child pairs, which allows you to group item IDs per child, and then extract the lowest ID from each group:</p>

<pre><code>list.SelectMany(item =&gt; item.Childs.Select(child =&gt; new { Id = item.Id, Child = child }))
    .GroupBy(item =&gt; item.Child, item =&gt; item.Id)
    .ToDictionary(
        group =&gt; group.Key,
        group =&gt; group.Min(id =&gt; id));
</code></pre>

<p>However, creating a dictionary with a nested loop is still several times faster, and less GC-intensive, while taking about the same 'amount' of code, so I'm not so sure about Linq being the best choice here.</p>
    </div>