<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since <code>insert</code> gets its data by value, you're making multiple copies of that data as you navigate down the tree to find where to add the new node.  Passing the parameter by <code>const T&amp;</code> (so you only make one copy) would avoid these copies, a benefit for types that are expensive to copy.  Another possibility is to use <code>T &amp;&amp;</code> to move the data, but this will change the original value being passed in which may be undesirable.</p>

<p>The value passed to the function called by <code>_traverse</code> is also copied.  Depending on your needs, this could also use a <code>const T &amp;</code>, or overloads of <code>_traverse</code> that take <code>func</code> with a reference could be provided.  The downside to providing access to the data via a reference is that it can allow that data to be altered.</p>

<p>If <code>_insert</code> takes <code>curr</code> as a pointer (<code>std::unique_ptr&lt;node&gt;* curr</code>) then you can use a loop rather than recursion.  This also applies to <code>_findmin</code> and <code>_del</code>.</p>
    </div>