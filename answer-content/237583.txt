<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are lots of ways to improve this hard-to-read code but all of them are unimportant compared to the fact that this is massively insecure against common attacks.  <strong>You are implementing a component of a security system; you need to build a threat model and understand what you are doing</strong>.  Implementing a security system is not a beginner task!</p>

<p>An important rule to follow is <strong>never use System.Random for a security purpose</strong>.</p>

<p>A random number generator needs to be <em>genuinely unpredictable</em> for it to be used in a security system that depends on unpredictability. <code>System.Random</code> is not <em>truly random</em>, and nor is it <em>crypto strength pseudo random</em>.</p>

<p>Why does this matter? Because an attacker who knows <em>anything</em> about the system used to generate the passwords can make good guesses about what passwords it will generate, much better than chance. How does the attacker get information about the system? <strong>A generated password leaks information about the state of the system</strong>.</p>

<p>That is, given a collection of passwords generated by this algorithm allows an attacker to determine the internal state of <code>System.Random</code> and then from that they can make good guesses as to all past and future passwords that will be generated. That's bad! The whole point of a randomly-generated password is to make it hard to guess.</p>

<p>Use a crypto-strength PRNG instead.</p>
    </div>