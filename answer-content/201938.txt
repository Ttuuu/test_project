<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Fixing your code really fast:</p>

<pre><code>struct Node* prev=*head_ref;
while(temp-&gt;data!=key&amp;&amp;temp!=NULL)
{
    prev = temp;
    temp=temp-&gt;next;
}
prev-&gt;next = temp-&gt;next;
free(temp);
</code></pre>

<p>You need to set the previous pointer in the loop to know what was the previous node. In your code you don't have this information. When you know what is the previous node, you can easily skip the node with the found key (<code>prev-&gt;next = temp-&gt;next;</code>).</p>

<p>This solution is still not perfect, what if the item is not present in the list? It is going to crash in this scenario, because you handle founding the key, and not founding the same way.</p>

<p>I would prefer to solve this with recursion:</p>

<pre><code>typedef struct Node Node;
void recursion_remove(Node* node, Node* prev, int key){
    if(node == NULL)
        return; //Item is not found

    // Found the key
    if(node-&gt;data == key){
        //Node can't be NULL so we can write node-&gt;next
        //node-&gt;next can be null, it means the list end, it is not a problem
        prev-&gt;next = node-&gt;next;
        free(node)
        return;
    }

    recursion_remove(node-&gt;next,node,key);
}
void delete_node(Node ** head, int key){
    Node* head_node = *head;
    if(head_node -&gt;data == key){
        Node* temp = head_node-&gt;next;
        free(head_node);
        *head = temp;
    }
    recursion_remove(head_node-&gt;next,head_node,key);
}
</code></pre>

<p>This way all the different cases are differentiated. 
You only need to modify the head if you are removing the first element (double indirection), but when you are removing other elements you don't need to modify the head</p>
    </div>