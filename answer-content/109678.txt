<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll have to agree with some of the other that I don't see the need for using a class in this case, although you get a little credit for using the naming scheme for public and privat methods.</p>

<p>But what I would focus on is your <code>_is_number_divisible_by_five_and_three()</code> &amp; co methods. You say that you're happy with them as they do just one thing. In my book they are too localised and specific. They are not very reusable, and you would be better served with <em>one</em> general method:</p>

<pre><code>def is_divisible(number, modulo):
    """Return if number % modulo is equal to 0."""

    return number % modulo == 0
</code></pre>

<p>This would allow you to simplify your logic in the badly name <code>parse_number()</code> to use <code>is_divisible(number, 3)</code> and so on. Now you have a function with might be useful elsewhere, even though still pretty simple. </p>

<p>As a general principle if you see repeating blocks of code you can:</p>

<ul>
<li>Consider if the blocks can be collated into one single function, like for <code>is_divisible()</code></li>
<li>Consider if the blocks can be converted into a loop of some sorts, like in <code>parse_numbers()</code> where you do the same test (with a different number) and returning a text in all cases</li>
</ul>

<p>In addition your code calculates the modulo one time too much as you could already know the answer for <code>number % 15</code>. A good way to handle this, minimizing calculations, is to build a list of all fizz buzz words, and then for the final output check if you have values in the list and join them together. If no values in list, return the string version of the number.</p>

<h1>Code refactored</h1>

<p>Here is an alternate version combining these suggestions, and an extension allowing for additional fizz buzz words:</p>

<pre><code>from collections import namedtuple

def is_divisible(number, modulo):
    """Return if number % modulo is equal to 0."""

    return number % modulo == 0


FizzBuzz = namedtuple('FizzBuzz', 'number, name')

fizz_buzz_words = [
    FizzBuzz( 3, 'Fizz'),
    FizzBuzz( 4, 'Buzz'),
    FizzBuzz( 7, 'Bang'),
    FizzBuzz(11, 'Boom'),
  ]

def to_fizz_buzz_string(n):
    """Returns an extended FizzBuzz string representation of a number."""
    fizz_buzzes = [fb.name for fb in fizz_buzz_words if is_divisible(n, fb.number)]

    return ''.join(fizz_buzzes) if fizz_buzzes else str(n)


for a in range(124, 134):
   print to_fizz_buzz_string(a)

print ', '.join(to_fizz_buzz_string(n) for n in range(923, 935))
</code></pre>

<p>At end is two different ways to call the newly created <code>to_fizz_buzz_string()</code> conversion method. </p>
    </div>