<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some general comments:</p>

<h3>Close files</h3>

<p>Close files when you are done with them.  Or better yet use a <code>with statement</code> to automatically close the file at the end of the code block (the indented part)</p>

<pre><code>with open('TEXT.txt','r') as txtfile:
    text = txtfile.read()
</code></pre>

<h3>Variable names</h3>

<p>Try to use meaningful variable names.  That doesn't mean they have to be long names, depending on the context <code>i,j,k</code> or <code>x,y,z</code> can be meaningful names.  'temp', 'stupid' probably aren't meaningful.</p>

<p>And try to be consistent about a variables represent.  In your code, sometimes <code>x</code> is a word in the text file, other times it is a two word city, any city, a typo, or a text line in the final output.  So when someone (or you) reading your code sees the variable <code>x</code>, they must look around to see what <code>x</code> is this time.</p>

<h3>Use functions</h3>

<p>The program is one big run of code.  That makes it hard to understand and reason about.  To help structure and manage the program, try breaking it up into several functions that each do one thing.  A rule of thumb is that a function should fit on your screen so you can see all of it at once.  </p>

<p>Separate functions lets you test portions of your program to make sure they work as intended.  That makes debugging easier.  For example, does the code to check if a one word city (e.g. York) should be a two word city (e.g. New York) work correctly if both cities are in the text?  Can you test it to make sure?  What about cities with more than two words (e.g., Rio de Janeiro).</p>

<p>Functions can also help you keep related code together.  In this program, the textfile is read in one place, it is processed to remove (some) punctuation in another place, and split into words in two other places.</p>

<h3>Data structures</h3>

<p>Choosing the right data structure can make a big difference in how complex your code is.  For example, <code>data</code>, <code>city</code>, <code>state</code>, and <code>country</code> are parallel lists.  So your code keeps track of an index into the <code>city</code> so it can access the other information.  If you used a dict keyed by the city, the indexes can be eliminated.  The value of a dict entry can be a list of tuples with the state, country, and data info.  The list has multiple entries if more than one city has the same name:</p>

<pre><code>cities = { 'Dallas':[('Texas', 'USA', 'dallas data')],
           'York'  :[('North Yorkshire', 'England', 'york england data'),
                     ('Maine', 'USA', 'york maine data')],
           'Mexico':[('Kansas', 'USA', 'mexico kansas data']
           ... etc.
         }
</code></pre>

<p>Obviously, this would be built from the world_cities.csv file (see below).</p>

<h3>Standard library</h3>

<p>The standard library has lots of useful functions. Some that may be useful here are <code>collections</code>, <code>csv</code>, and <code>difflib</code>:</p>

<p><code>collections.defaultdict</code> is useful for building dictionaries on the fly.</p>

<p>You only use <code>pandas</code> to read in the csv file, but you can use <code>csv</code> from the standard library.  <code>csv.reader</code> or <code>csv.DictReader</code> can be used to read a csv file:</p>

<pre><code>import collections
import csv

cities = defaultdict(list)

with open('world_cities.csv', newline='') as csvfile:
    reader = csv.reader(csvfile)
        for row in reader:
            city = row[0]
            state = row[2]
            country = row[1]
            data = row[-1]
            cities[city].append(state, country, data)
</code></pre>

<p>And <code>difflib.get_close_matches()</code> can be used to search for words in a list that are close enough to a search term.  There are parameters to control how close the match needs to be, and a maximum number of matches:</p>

<pre><code>import difflib

# after you built the cities dict above, you would use
# city_names = list(cities.keys())
# but for illustration:
city_names = ['York', 'New York', 'Devon', 'Peoria', 'Dallas', ]

difflib.get_close_matches('York', city_names)        ==&gt; ['York', 'New York']

difflib.get_close_matches('dalas', city_names)       ==&gt; ['Dallas']
</code></pre>
    </div>