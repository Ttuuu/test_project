<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's look at that second loop:</p>

<blockquote>
<pre><code>foreach ($formular_daten as $column=&gt;$value){
    if ($value == "") unset($formular_daten[$column]);
}
</code></pre>
</blockquote>

<p>Some argue it is bad practice to omit the curly brackets, since anyone who needs to add a second statement when the condition is true might forget that there isn't a block here.</p>

<p>Additionally, <a href="http://php.net/array_filter" rel="nofollow noreferrer"><code>array_filter()</code></a> could be used to replace the entire loop:</p>

<pre><code>$formular_daten = array_filter( $formular_daten , 'strlen' );
</code></pre>

<p><sub>(credit goes to <a href="http://php.net/manual/en/function.array-filter.php#111091" rel="nofollow noreferrer">the post by anonymous</a>)</sub></p>

<p>Additionally, instead of adding values to <code>$formular_daten</code> in the first <code>foreach</code> and then having another <code>foreach</code> loop to unset any value that is equal to an empty string, you could just only add values to the array that are not equal to an empty string...</p>

<pre><code>foreach ($_POST as $column=&gt;$value){
    $column = input_behandlung_sessions($column);
    $secure_value = input_behandlung_sessions($value);
    if ($secure_value) { // equivalent to !== ""
        $formular_daten[$column] = $secure_value;
    }
}  
</code></pre>

<p>And the <code>unset</code> call for the <em>session_submit</em> could be removed by not setting it in the first loop...</p>

<blockquote>
<pre><code>unset($formular_daten['session_submit']);
</code></pre>
</blockquote>

<p>So if the modified <code>foreach</code> above is used, that <code>unset</code> could be eliminated by updating the condition for setting the array value:</p>

<pre><code>if ($secure_value &amp;&amp; $column !== 'session_submit') {
    $formular_daten[$column] = $secure_value;
}
</code></pre>

<hr>

<p>While it appears that you would need to have that loop before the check for count based on the value at <code>$POST['kampagne</code>], you could potentially move the code from that last <code>foreach</code> up into the first <code>foreach</code> loop, which would require looping through the data only once...</p>

<hr>

<p>You could consider using <code>?</code> placeholders instead of named placeholders - see <a href="http://php.net/manual/en/pdo.prepare.php#example-1048" rel="nofollow noreferrer">Example 2 on the PDO prepare documentation</a> (and compare to the example above it).</p>

<hr>

<h2>Update</h2>

<p>I would like to speak to what <a href="https://codereview.stackexchange.com/users/101565/your-common-sense">@Your Common Sense</a> mentioned:</p>

<blockquote>
  <p>I don't know why you call keys of the $_POST Array "static" (and what does it mean at all) </p>
</blockquote>

<p>Not only can be $_POST be modified within the PHP script (because it is a <a href="http://php.net/manual/en/language.variables.superglobals.php" rel="nofollow noreferrer">superglobal</a> <em>variable</em> - not a Superglobal constant), but your script can be called by techniques other than submitting the form - including but not limited to:</p>

<ul>
<li>making a separate page that has a <code>&lt;form&gt;</code> tag with an <code>action=</code> attribute matching the URL corresponding to your script</li>
<li>making an <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" rel="nofollow noreferrer">XMLHttpRequest</a>/AJAX request matching the URL corresponding to your script</li>
<li>making requests with tools like <a href="https://www.getpostman.com/" rel="nofollow noreferrer">Postman</a></li>
</ul>

<p>And any of those means can be used to send various values in the POST data.</p>
    </div>