<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Run <code>rustfmt</code></h1>

<p>You have some inconsistent formatting. Just run <code>cargo fmt</code> and your code will be automatically formatted to best practices.</p>

<h1>Make <code>Palindrome</code> a tuple struct</h1>

<p>Instead of</p>

<pre><code>#[derive(Debug, Eq)]
pub struct Palindrome {
    factors: (u64, u64),
}
</code></pre>

<p>Use</p>

<pre><code>#[derive(Debug, Eq)]
pub struct Palindrome(u64, u64);
</code></pre>

<h1>Derive <code>PartialOrd</code></h1>

<p>Instead of</p>

<pre><code>impl PartialOrd for Palindrome {
    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {
        Some(self.cmp(other))
    }
}
</code></pre>

<p>Just use <code>#[derive(Debug, Eq, PartialOrd)]</code> instead, like what you already do for <code>Eq</code>.</p>

<h1>Rename <code>Palindrome</code></h1>

<p>It should be called something like <code>Pair</code> instead, unless required by your courseâ€”an instance of a <code>Palindrome</code> can actually not be a palindrome.</p>

<h1>Don't explicitly return</h1>

<pre class="lang-rust prettyprint-override"><code>fn is_palindrome(palindrome: &amp;Palindrome) -&gt; bool {
    if palindrome.value() == reverse_number(palindrome.value()) {
        return true;
    }
    false
}
</code></pre>

<p>You're comparing a boolean, then returning based on that. Just return the boolean directly:</p>

<pre class="lang-rust prettyprint-override"><code>fn is_palindrome(palindrome: &amp;Palindrome) -&gt; bool {
    palindrome.value() == reverse_number(palindrome.value())
}
</code></pre>

<p>However, that function should probably be a method of <code>Palindrome</code> unless it's required to be separate by the course.</p>

<h1>Accept a range instead of <code>(min, max)</code></h1>

<p>Instead of</p>

<pre><code>pub fn palindrome_products(min: u64, max: u64) -&gt; Option&lt;(Palindrome, Palindrome)&gt; {
    if max &lt;= min {
        return None;
    }

    let products = iproduct!(min..=max, min..=max)
        .map(|(i, j)| Palindrome::new(i, j))
        .filter(|palindrome| palindrome.is_palindrome());

    Some((products.clone().min()?, products.clone().max()?))
}

fn process_smallest_case(input: (u64, u64), expected: Option&lt;Palindrome&gt;) {
    let min = palindrome_products(input.0, input.1).map(|(min, _)| min);
    assert_eq!(min, expected);
}
</code></pre>

<p>How about</p>

<pre><code>pub fn palindrome_products(range: RangeInclusive&lt;u64&gt;) -&gt; Option&lt;(Palindrome, Palindrome)&gt; {
    let products = iproduct!(range.clone(), range)
        .map(|(i, j)| Palindrome::new(i, j))
        .filter(|palindrome| palindrome.is_palindrome());

    Some((products.clone().min()?, products.clone().max()?))
}

fn process_smallest_case(input: RangeInclusive&lt;u64&gt;, expected: Option&lt;Palindrome&gt;) {
    let min = palindrome_products(input).map(|(min, _)| min);
    assert_eq!(min, expected);
}
</code></pre>

<h1>Performance: use <code>Itertools::minmax</code></h1>

<p>Currently, you check if every number is a palindrome twice:</p>

<pre class="lang-rust prettyprint-override"><code>pub fn palindrome_products(range: RangeInclusive&lt;u64&gt;) -&gt; Option&lt;(Palindrome, Palindrome)&gt; {
    let products = iproduct!(range.clone(), range)
        .map(|(i, j)| Palindrome::new(i, j))
        .filter(|palindrome| palindrome.is_palindrome());

    Some((products.clone().min()?, products.clone().max()?))
}
</code></pre>

<p>Instead, use:</p>

<pre><code>pub fn palindrome_products(range: RangeInclusive&lt;u64&gt;) -&gt; Option&lt;(Palindrome, Palindrome)&gt; {
    let products = iproduct!(range.clone(), range)
        .map(|(i, j)| Palindrome::new(i, j))
        .filter(|palindrome| palindrome.is_palindrome());
    match products.minmax() {
        MinMaxResult::NoElements =&gt; None,
        // You'll need to #[derive(Copy, Clone)] on Palindrome
        MinMaxResult::OneElement(p) =&gt; Some((p, p)),
        MinMaxResult::MinMax(min, max) =&gt; Some((min, max)),
    }
}
</code></pre>

<p>Alternatively, you could return a <code>impl Iterator&lt;Item = Palindrome&gt;</code> from <code>palindrome_products</code> and call <code>.min()</code> or <code>.max()</code> from <code>process_smallest_case</code> and <code>process_largest_case</code> respectively.</p>

<h1>Embed tests</h1>

<p>Put your tests in the same file, then gate them behind a</p>

<pre><code>#[cfg(test)]
mod tests {
    // tests
}
</code></pre>

<h1>Add benchmarks</h1>

<p>I don't know how you're testing speed, but Rust doesn't optimize your code by default when running tests. Either use the <a href="https://doc.rust-lang.org/unstable-book/library-features/test.html" rel="nofollow noreferrer">unstable <code>#[bench]</code> attribute</a> or my personal favorite <a href="https://bheisler.github.io/criterion.rs/book/getting_started.html" rel="nofollow noreferrer">Criterion</a>. Both will automatically compile for optimization.</p>

<h1>Final code</h1>

<pre><code>use std::cmp::Ordering;
use std::ops::RangeInclusive;

use itertools::iproduct;
use itertools::{Itertools, MinMaxResult};

#[derive(Copy, Clone, Debug, Eq, PartialOrd)]
pub struct Pair(u64, u64);

impl Ord for Pair {
    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {
        self.value().cmp(&amp;other.value())
    }
}

impl PartialEq for Pair {
    fn eq(&amp;self, other: &amp;Self) -&gt; bool {
        self.value() == other.value()
    }
}

impl Pair {
    pub fn new(a: u64, b: u64) -&gt; Pair {
        Pair(b, a)
    }

    pub fn value(&amp;self) -&gt; u64 {
        self.0 * self.1
    }

    pub fn insert(&amp;mut self, a: u64, b: u64) {
        self.0 = a;
        self.1 = b;
    }

    pub fn is_palindrome(&amp;self) -&gt; bool {
        self.value() == reverse_number(self.value())
    }
}

fn reverse_number(mut n: u64) -&gt; u64 {
    let radix = 10;
    let mut reversed = 0;

    while n != 0 {
        reversed = reversed * radix + n % radix;
        n /= radix;
    }

    reversed
}

pub fn palindrome_products(range: RangeInclusive&lt;u64&gt;) -&gt; Option&lt;(Pair, Pair)&gt; {
    let products = iproduct!(range.clone(), range)
        .map(|(i, j)| Pair::new(i, j))
        .filter(Pair::is_palindrome);
    match products.minmax() {
        MinMaxResult::NoElements =&gt; None,
        MinMaxResult::OneElement(p) =&gt; Some((p, p)),
        MinMaxResult::MinMax(min, max) =&gt; Some((min, max)),
    }
}

#[cfg(test)]
mod tests {
    use std::ops::RangeInclusive;

    use super::{palindrome_products, Pair};

    fn process_smallest_case(input: RangeInclusive&lt;u64&gt;, expected: Option&lt;Pair&gt;) {
        let min = palindrome_products(input).map(|(min, _)| min);
        assert_eq!(min, expected);
    }

    /// Process a single test case for the property `largest`
    ///
    /// All cases for the `largest` property are implemented in terms of this function.
    ///
    fn process_largest_case(input: RangeInclusive&lt;u64&gt;, expected: Option&lt;Pair&gt;) {
        let max = palindrome_products(input).map(|(_, max)| max);
        assert_eq!(max, expected);
    }

    #[test]
    /// finds the smallest palindrome from single digit factors
    fn test_finds_the_smallest_palindrome_from_single_digit_factors() {
        process_smallest_case(1..=9, Some(Pair::new(1, 1)));
    }

    #[test]
    #[ignore]
    /// finds the largest palindrome from single digit factors
    fn test_finds_the_largest_palindrome_from_single_digit_factors() {
        let mut expect = Pair::new(1, 9);
        expect.insert(3, 3);
        process_largest_case(1..=9, Some(expect));
    }

    #[test]
    #[ignore]
    /// find the smallest palindrome from double digit factors
    fn test_find_the_smallest_palindrome_from_double_digit_factors() {
        process_smallest_case(10..=99, Some(Pair::new(11, 11)));
    }

    #[test]
    #[ignore]
    /// find the largest palindrome from double digit factors
    fn test_find_the_largest_palindrome_from_double_digit_factors() {
        process_largest_case(10..=99, Some(Pair::new(91, 99)));
    }

    #[test]
    #[ignore]
    /// find smallest palindrome from triple digit factors
    fn test_find_smallest_palindrome_from_triple_digit_factors() {
        process_smallest_case(100..=999, Some(Pair::new(101, 101)));
    }

    #[test]
    #[ignore]
    /// find the largest palindrome from triple digit factors
    fn test_find_the_largest_palindrome_from_triple_digit_factors() {
        process_largest_case(100..=999, Some(Pair::new(913, 993)));
    }

    #[test]
    #[ignore]
    /// find smallest palindrome from four digit factors
    fn test_find_smallest_palindrome_from_four_digit_factors() {
        process_smallest_case(1000..=9999, Some(Pair::new(1001, 1001)));
    }

    #[test]
    #[ignore]
    /// find the largest palindrome from four digit factors
    fn test_find_the_largest_palindrome_from_four_digit_factors() {
        process_largest_case(1000..=9999, Some(Pair::new(9901, 9999)));
    }

    #[test]
    #[ignore]
    /// empty result for smallest if no palindrome in the range
    fn test_empty_result_for_smallest_if_no_palindrome_in_the_range() {
        process_smallest_case(1002..=1003, None);
    }

    #[test]
    #[ignore]
    /// empty result for largest if no palindrome in the range
    fn test_empty_result_for_largest_if_no_palindrome_in_the_range() {
        process_largest_case(15..=15, None);
    }

    #[test]
    #[ignore]
    /// error result for smallest if min is more than max
    fn test_error_result_for_smallest_if_min_is_more_than_max() {
        process_smallest_case(10000..=1, None);
    }

    #[test]
    #[ignore]
    /// error result for largest if min is more than max
    fn test_error_result_for_largest_if_min_is_more_than_max() {
        process_largest_case(2..=1, None);
    }
}
</code></pre>
    </div>