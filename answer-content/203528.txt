<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This</p>

<blockquote>
<pre><code>const int STATUS_BASE = 1;
const int STATUS_FIN = 2;
const int STATUS_FINI = 3;
const int STATUS_WAST = 4;
const int STATUS_PRGR = 5;  
</code></pre>
</blockquote>

<p>screams for an enum like  </p>

<pre><code>public enum StockState
{
    Base = 1, Fin, Fini, Wast, Prgr 
}  
</code></pre>

<p>but you should rename the enumvalues in a way that you or <strong>Sam the maintainer</strong> doesn't has to guess about the meaning. If you or <strong>Sam</strong> have to fix a bug in 6 months it will be easier if your code can be graps at first glance. Just don't use abbreviations for naming things. </p>

<hr>

<p><code>bool moveStock()</code>  </p>

<p>Based on the <a href="https://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow noreferrer">.NET Naming Guidlines</a> methods should be named using <code>PascalCase</code> casing hence <code>moveStock()</code> should read <code>MoveStock()</code>. While we are at naming things I would name the method parameter <code>sourceStockState</code> which is IMO more clear.  </p>

<p><code>stockStatus.date</code> again properties should be named using <code>PascalCase</code> casing.  </p>

<hr>

<p>Because <code>moveStock</code> can't return <code>false</code> it should be <code>void</code>.</p>

<hr>

<p>Let's get the meat. If you would change the <code>createStockStatus()</code> method in a way that it takes 2 additional parameters your <code>moveStock()</code> would get more readable because it would get shorter.  </p>

<p>Assume the <code>createStockStatus()</code> would look like so </p>

<pre><code>private void createStockStatus(StockStatus newObj, int quantityUOM, StockState state)
{
    if (!newObj.isValid()) { return; }

    newObj.quantityUOM = quantityUOM;
    newObj.state = (int)state;
    newObj.deleted = false;
    newObj.submittedId = null;
    UserPersonal user = context.UserPersonal.FirstOrDefault(u =&gt; u.email == currentUserEmail);
    newObj.setCreatedTimeStamp(user); //sets fields CreatedBy, ModifiedBy with value of user
    context.StockStatus.Add(newObj);
    context.SaveChanges();
} 
</code></pre>

<p>then the former <code>moveStock()</code> could look like so  </p>

<pre><code>public void moveStock(WStockStatus fromStockStatus)
{
    StockStatus stockStatus = new StockStatus();
    stockStatus.date = fromStockStatus.date;
    stockStatus.location = fromStockStatus.location;

    if(fromStockStatus.qtyBase &gt; 0)
    {
        createStockStatus(stockStatus, fromStockStatus.qtyBase, StockState.Base); 
    }
    if(fromStockStatus.qtyFin &gt; 0)
    {
        createStockStatus(stockStatus, fromStockStatus.qtyFin, StockState.Fin); 
    }
    if(fromStockStatus.qtyFini &gt; 0)
    {
        createStockStatus(stockStatus, fromStockStatus.qtyFini, StockState.Fini); 
    }
    if(fromStockStatus.qtyWast &gt; 0)
    {
        createStockStatus(stockStatus, fromStockStatus.qtyWast, StockState.Wast); 
    }
    if(fromStockStatus.qtyPrgr &gt; 0)
    {
        createStockStatus(stockStatus, fromStockStatus.qtyPrgr, StockState.Prgr); 
    }
}
</code></pre>

<hr>

<p><strong>Edit</strong></p>

<blockquote>
  <p>But my main intention was to see if there is a better way by which I can avoid using these multiple if statements, like using a different data structure or use a different format of capturing the data.  </p>
</blockquote>

<p>By moving the <code>if</code> condition into <code>createStockStatus()</code> like so  </p>

<pre><code>private void createStockStatus(StockStatus newObj, int quantityUOM, StockState state)
{
    if (quantityUOM &lt;= 0 || !newObj.isValid()) { return; }

    newObj.quantityUOM = quantityUOM;
    newObj.state = (int)state;
    newObj.deleted = false;
    newObj.submittedId = null;
    UserPersonal user = context.UserPersonal.FirstOrDefault(u =&gt; u.email == currentUserEmail);
    newObj.setCreatedTimeStamp(user); //sets fields CreatedBy, ModifiedBy with value of user
    context.StockStatus.Add(newObj);
    context.SaveChanges();
}  
</code></pre>

<p>the <code>moveStock()</code> could look like so  </p>

<pre><code>public void moveStock(WStockStatus fromStockStatus)
{
    StockStatus stockStatus = new StockStatus();
    stockStatus.date = fromStockStatus.date;
    stockStatus.location = fromStockStatus.location;

    createStockStatus(stockStatus, fromStockStatus.qtyBase, StockState.Base); 
    createStockStatus(stockStatus, fromStockStatus.qtyFin, StockState.Fin); 
    createStockStatus(stockStatus, fromStockStatus.qtyFini, StockState.Fini); 
    createStockStatus(stockStatus, fromStockStatus.qtyWast, StockState.Wast); 
    createStockStatus(stockStatus, fromStockStatus.qtyPrgr, StockState.Prgr); 

}
</code></pre>
    </div>