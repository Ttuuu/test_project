<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which programmers are encouraged to follow. This makes it easier for other Python programmers to read your code. PEP8 recommends using <code>lower_case</code> both for variable and function names, which I have used in the code below.</p>

<p>In your <code>output</code> function you use string formatting (good). However note that if you just want to paste the values in order, there is no need to explicitly mention the indices. So you could write <code>"The player won {} of {} games ({:0.2%})".format(wins, total, winrate)</code>. But there is an even easier way in <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">Python 3.6+: f-strings</a>. I also think this is not enough to put it into a function, I would just leave it as a single line in <code>main</code>:</p>

<pre><code>print(f"The player won {wins} of {total} games ({wins/total:0.2%})")
</code></pre>

<p>Your <code>rolldies</code> function could be made more general if it accepted a parameter telling it how many dice to roll. You can also use a list comprehension here, or <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a>:</p>

<pre><code>def roll_dice(n=2):
    return sum(random.randint(1, 6) for _ in range(n))

DIE = [1, 2, 3, 4, 5, 6]
def roll_dice(n=2):
    return sum(random.choices(DIE, k=n))
</code></pre>

<p>Note that the singular is "die" and the plural is "dice", not "dies".</p>

<p>In your <code>simOneGame</code> function, instead of chaining a lot of comparisons with <code>or</code>, just use <code>in</code>:</p>

<pre><code>def sim_game():
    initial_roll = roll_dice()
    if initial_roll in {2, 3, 12}:
        return True     # won
    elif initial_roll in {7, 11}:
        return False    # lost
</code></pre>

<p>Your rolling in the <code>else</code> branch can also be a bit shortened:</p>

<pre><code>    else:
        #Roll until roll is 7 or initial roll
        roll = roll_dice()
        while roll not in {7, initial_roll}:
            roll = roll_dice()
        return roll == 7    # 7 wins
</code></pre>

<p>You could theoretically replace the <code>while</code> loop with a single <code>random.choices</code> call, but you would have to manually set the probabilities to the right values.</p>

<p>The <code>simNGames</code> function can be shortened a lot by using the fact that <code>False == 0</code> and <code>True == 1</code>:</p>

<pre><code>def sim_n_games(n):
    return sum(sim_game() for _ in range(n))
</code></pre>
    </div>