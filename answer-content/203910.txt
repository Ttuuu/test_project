<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>let's continue :-)</p>

<h1>sequence</h1>

<p><code>filter</code>, <code>map</code> and <code>flatmap</code> are implemented in roughly the same way:</p>

<ol>
<li>create a new List</li>
<li>perform operations</li>
<li>Store results in the new list</li>
<li>return the new list.</li>
</ol>

<p>this means that for every <code>filter</code>, <code>map</code> and <code>flatmap</code> a new list is created and all the elements are iterated. To increase performance, you can change it into a Sequence.</p>

<pre><code>val message = dictionary.asSequence()
            .filter { it.length == word.size }
            .filter { it.toSortedCharArray() contentEquals word }
            .joinToString(separator = " ")
</code></pre>

<h1>repeated code</h1>

<p>If you look at the code, you see that you get sortedCharArrays from both files.
You can therefor create a function:</p>

<pre><code>fun File.readSortedCharArrays() = readLines().map(String::toSortedCharArray)
</code></pre>

<p>so you get</p>

<pre><code>val dictionary = File("dict.txt").getSortedCharArrays()

File("wordList.txt").getSortedCharArrays().forEach { word -&gt;
    val message = dictionary.asSequence()
            .filter(CharArray::size::equals)
            .filter { it contentEquals word }
            .joinToString(separator = " ")
    println(message)
}
</code></pre>

<h1>joinTo</h1>

<p>finally, <code>joinToString</code> is a wrapper around a function that takes more arguments: <code>joinTo</code>. Here you can specify where you like to add the created string to. In our case it is System.out.</p>

<h1>altogether</h1>

<pre><code>fun String.toSortedCharArray() = toCharArray().apply(CharArray::sort)
fun File.getSortedCharArrays() = readLines().map(String::toSortedCharArray)

val dictionary = File("dict.txt").getSortedCharArrays()

File("wordList.txt").getSortedCharArrays().forEach { word -&gt;
    dictionary.asSequence()
            .filter(CharArray::size::equals)
            .filter { it contentEquals word }
            .joinTo(System.out, " ")
}
</code></pre>

<p>I know, it looks less beautiful, but it is better code...
Ps, if you want to have it as a list of Strings, instead of printing it out, you need to use flatmap:</p>

<pre><code>fun String.toSortedCharArray() = toCharArray().apply(CharArray::sort)
fun File.getSortedCharArrays() = readLines().map(String::toSortedCharArray)

val dictionary = File("dict.txt").getSortedCharArrays()
val result : List&lt;String&gt; = File("wordList.txt").getSortedCharArrays().flatMap{ word -&gt;
    dictionary.asSequence()
            .filter { it.size == word.size }
            .filter { it contentEquals word }
            .toList()
}.map(Any::toString)
</code></pre>
    </div>