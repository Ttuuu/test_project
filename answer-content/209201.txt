<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code doesn't really take advantage of the <strong>object oriented</strong> features of Java. You have everything in one file with one object manipulating the state of several things: The robotic arm, the stash, and the piles. This makes the code tightly coupled and hard to change.
Generally, your variable naming is clear and follows Java best practices: <code>block</code>, <code>stashLocation</code>, etc. Personally I'd use a boolean for the block, not an int, as your robot either has or doesn't have a block. That'd also clean up the if clauses:</p>

<pre><code>boolean hasBlock = false;
// other code here
if (hasBlock) {
    doSomethingWithBlock();
}
</code></pre>

<p>Regarding your specific questions:</p>

<h2>Hexadecimal values</h2>

<p>Use Java's print formatting functions String.format and it's likes:
<code>String hex = String.format("%02X", 15)</code> will assign the value 0xF to the variable hex. Read up on <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html#format(java.lang.String,java.lang.Object...)" rel="nofollow noreferrer">String.format</a> and the <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Formatter.html" rel="nofollow noreferrer">format specifiers</a></p>

<h2>Command processing</h2>

<p>For this case, I think it's fine to use a switch case to act on the commands. Somehow, you <strong>have</strong> to identify each single command char, and a switch is a good way here. What I would do, though, is break out the actual commands into separate functions, and only call them from the case statement:</p>

<pre><code>for (char cmd : command.toCharArray()) {
        switch (cmd) {
            case 'P': 
                pickup(); 
                break;
            case 'M':
                move();
                break;
            case 'L':
                lower();
                break;
            default:
                System.out.format("Unknown command %c", cmd);
        }
    }

    void pickup() { /* function definition here */ }
    void move() { /* function definition here */ }
    void lower() { /* function definition here */ }
</code></pre>

<p>Of course, one could get fancy here and map the command chars to a <a href="http://tutorials.jenkov.com/java/lambda-expressions.html#lambda-parameters" rel="nofollow noreferrer">lambda</a> or something, but that might be overkill. A small improvement could be to use an <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html" rel="nofollow noreferrer">enum</a> for the commands, and switch on that.</p>

<h2>My implementation</h2>

<p>This was a fun task, and here is my implementation. I split the Robot and the Piles into own classes, coordinated by the Main class. I thought about separating the Stash also, but since it had next to no business logic, I left in in the Robot (just setting hasBlock to true in pickup). By using objects, the printing of status can be "automated" by using the <code>toString()</code> method, as I've done below.</p>

<p>Piles.java</p>

<pre><code>public class Piles {

    public Piles(int width, int height) {
        this.width = width - 1; // - 1 because of zreo indexing
        this.height = height;
        piles = new int[width];
    }

    public boolean drop(int position) {
        boolean positionValid = position &lt;= (this.width - 1);
        boolean pileAvailable = this.piles[position] &lt; this.height;

        if (positionValid &amp;&amp; pileAvailable) {
            piles[position]++;
        }

        return positionValid &amp;&amp; pileAvailable;
    }

    @Override
    public String toString() {
        StringBuffer res = new StringBuffer();

        for (int i = 0; i &lt; piles.length; i++) {
            res.append(String.format("%d: %02x ", i, piles[i]));
        }
        return res.toString();
    }

    public int getWidth() {
        return this.width;
    }

    public int getHeight() {
        return this.height;
    }

    /* PRIVATE */
    private final int width;
    private final int height;

    private final int[] piles;

}
</code></pre>

<p>Robot.java</p>

<pre><code>public class Robot {

    public Robot(Piles piles) {
        this.maxWidth = piles.getWidth();
        this.piles = piles;

    }

    public void execute(String command) {
        for (char cmd : command.toCharArray()) {
            switch (cmd) {
                case 'P': 
                    pickup(); 
                    break;
                case 'M':
                    move();
                    break;
                case 'L':
                    lower();
                    break;
                default:
                    System.out.format("Unknown command %c", cmd);
            }
        }
        System.out.println(piles);
    }

    @Override
    public String toString() {
        return String.format("Robot is at position %d %s a block", position, hasBlock ? "with" : "without");
    }

    /* PRIVATE */

    private final Piles piles;
    private final int maxWidth;
    private int position = 0;
    private boolean hasBlock = false;

    /* Pick up a block from the stash.
     * The rules are:
     * - the stash is never empty
     * - after pickup, move to position 0
     * - if the robot already holds a block, reset position to 0
     */
    private void pickup() {
        hasBlock = true;
        position = 0;
    }


    /* Advance the robot one step
     * The rules are:
     * - the robot will not go beyond maxWidth, trying to move further does nothing.
     */
    private void move() {
        position = Math.min(++position, maxWidth);
    }


    /* Lower a block to the pile at the current location.
     * The rules are:
     * - lowering the block on a pile of 15 does nothing
     * - lowering without a block does nothing
     */
    private void lower() {
        if (piles.drop(position)) {
            hasBlock = false;
        }
    }
}
</code></pre>

<p>Main.java</p>

<pre><code>public class Main {

    public static void main(String[] args) {

        Robot robot = new Robot(new Piles(10, 15));
        System.out.println(robot);

        robot.execute("PMLPMLPMLPMLPMLPMLPMLPMLPMLPMLPMLPMLPMLPMLPML");
        robot.execute("PLPLPMMMMML");

    }
}
</code></pre>
    </div>