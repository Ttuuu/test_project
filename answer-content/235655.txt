<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I get a couple of warnings, which ought to be fixed:</p>

<pre class="lang-none prettyprint-override"><code>g++ -std=c++2a -fPIC -g -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds  -Weffc++    -pthread    235651.cpp    -o 235651
235651.cpp: In constructor ‘Buffer::Buffer()’:
235651.cpp:31:5: warning: ‘Buffer::mu’ should be initialized in the member initialization list [-Weffc++]
   31 |     Buffer(){};
      |     ^~~~~~
235651.cpp:31:5: warning: ‘Buffer::print_mu’ should be initialized in the member initialization list [-Weffc++]
235651.cpp:31:5: warning: ‘Buffer::buffer_’ should be initialized in the member initialization list [-Weffc++]
235651.cpp: In member function ‘void Consumer::run()’:
235651.cpp:159:41: warning: comparison of integer expressions of different signedness: ‘std::vector&lt;std::shared_ptr&lt;Buffer&gt; &gt;::size_type’ {aka ‘long unsigned int’} and ‘const int’ [-Wsign-compare]
  159 |             any_valid = buffers_.size() &lt; parallelism_ ? true : false;
      |                         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
</code></pre>

<p>We include <code>&lt;math.h&gt;</code> but then use <code>std::pow</code> - we should be including <code>&lt;cmath&gt;</code> if we want the names to be in the <code>std</code> namespace (which we do).</p>

<p>The consumers don't block, but repeatedly get a null.  That seems to be a failure of the whole purpose of the class:</p>

<pre><code>Produced: N. Count at 0. Producer was 0
Produced: L. Count at 0. Producer was 2
Produced: W. Count at 0. Producer was 1
Consumed: N
Consumed: W
Consumed: L
Consumed: \0
Consumed: \0
Consumed: \0
Produced: B. Count at 1. Producer was 2
Produced: B. Count at 1. Producer was 0
Produced: R. Count at 1. Producer was 1
Consumed: \0
Consumed: \0
Consumed: \0
Produced: Q. Count at 2. Producer was 1
Produced: B. Count at 2. Producer was 2
Produced: M. Count at 2. Producer was 0
Consumed: \0
</code></pre>

<p>Other questionable bits:</p>

<ul>
<li><blockquote>
<pre><code>buffers_.size() &lt; parallelism_ ? true : false
</code></pre>
</blockquote>

<p>That should be written as just <code>buffers_.size() &lt; parallelism_</code>.</p></li>
<li><blockquote>
<pre><code>char upper_case_char = (char)((random() % 26) + int('A'));
</code></pre>
  
  <p>We need <code>&lt;cstdlib&gt;</code> to define <code>std::random()</code>.  And C++ doesn't guarantee that letters are contiguously encoded.  Try</p>

<pre><code>static char const alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
char upper_case_char = alphabet[(std::random() % (sizeof alphabet - 1))];
</code></pre>
</blockquote></li>
</ul>
    </div>