<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As David Morris indicates, it might be simpler to use a filtering/smoothing function, such as a moving window average. This is pretty simple to implement using the rolling function from pandas.Series. (Only 501 points are shown.) Tweak the numerical argument (window size) to get different amounts of smoothing.</p>

<pre><code>import pandas as pd
import matplotlib.pyplot as plt

# Plot the Raw Data
ts = rawdata[0:500]
plt.plot(ts, 'r-')
plt.ylabel('Lightpower (V)')

# original version
# smooth_data = pd.rolling_mean(ts,5).plot(style='k')
# pandas has changed; so, here's the new version:
smooth_data = pd.Series(ts).rolling(window=7).mean().plot(style='k')
plt.show()
</code></pre>

<p><a href="https://i.stack.imgur.com/QrnBM.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/QrnBM.png" alt="enter image description here"></a>
(Moving average)</p>

<p>A moving average is, basically, a low-pass filter. So, we could also implement a low-pass filter with functions from SciPy as follows:</p>

<pre><code>import scipy.signal as signal

# First, design the Butterworth filter
N  = 3    # Filter order
Wn = 0.1 # Cutoff frequency
B, A = signal.butter(N, Wn, output='ba')
smooth_data = signal.filtfilt(B,A, rawdata[0:500])
plt.plot(rawdata[0:500],'r-')
plt.plot(smooth_data[0:500],'b-')
plt.show()
</code></pre>

<p><a href="https://i.stack.imgur.com/dB8z8.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/dB8z8.png" alt="enter image description here"></a>
(Low-Pass Filter)</p>

<p>This filter method is from <a href="https://oceanpython.org/2013/03/11/signal-filtering-butterworth-filter" rel="nofollow noreferrer">OceanPython.org</a> BTW.</p>
    </div>