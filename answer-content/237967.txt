<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>sample_data</h2>

<pre><code>np.random.seed(42)

drinks = ["Beer", "Spirit", "Wine"]
continents = [
    "Asia",
    "Africa",
    "Europe",
    "North America",
    "South America",
    "Oceania",
]
countries = [f"country_{i}" for i in range(10)]
index = pd.MultiIndex.from_product(
    (continents, countries), names=["continent", "country"]
)
data = np.random.randint(1_000_000, size=(len(index), len(drinks )))

df = pd.DataFrame(index=index, columns=columns, data=data).reset_index()
</code></pre>

<h1>data structures</h1>

<p>The most jarring about this, is that each datapoint has it's own variable. </p>

<p>A first step would be to use dictionaries:</p>

<pre><code>data_by_continent = {
    continent: df.loc[df["continent"] == continent]
    for continent in continents
}
</code></pre>

<p>Note that I used <code>.loc</code> to explicitly make a copy instead of a view to prevent changes in one part of the code contaminating another.</p>

<p>Then the spirit consumption per continent is:</p>

<pre><code>spirit_per_continent = {
    continent: data.loc[
        data["Spirit"].nlargest(5).index, ["country", "Spirit"]
    ]
    for continent, data in data_by_continent.items()
}
</code></pre>

<p>and nested per beverage</p>

<pre><code>consumption_per_drink_continent = {
    drink: {
        continent: data.loc[
            data[drink].nlargest(5).index, ["country", drink]
        ]
        for continent, data in data_by_continent.items()
    }
    for drink in drinks
}
</code></pre>

<h1>pandas groupby</h1>

<p>If you reform your dataframe into a tidy format, you can use an easy groupby.</p>

<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.melt.html" rel="nofollow noreferrer"><code>pandas.melt</code></a> is a very handy method to shape a dataframe</p>

<pre><code>df2 = pd.melt(
    df,
    id_vars=["continent", "country"],
    var_name="drink",
    value_name="consumption",
)
</code></pre>

<blockquote>
<pre><code>  continent   country     drink   consumption
....
175   Oceania     country_5   Wine    456551
176   Oceania     country_6   Wine    894498
177   Oceania     country_7   Wine    899684
178   Oceania     country_8   Wine    158338
179   Oceania     country_9   Wine    623094
</code></pre>
</blockquote>

<h1>groupby</h1>

<p>now you can use <code>groupby</code>, and then later join on the index of <code>df2</code> to introduce the country</p>

<pre><code>(
    df2.groupby(["continent", "drink"])["consumption"]
    .nlargest(5)
    .reset_index(["continent", "drink"])
    .sort_values(
        ["continent", "drink", "consumption"], ascending=[True, True, False]
    )
    .join(df2["country"])
)
</code></pre>

<blockquote>
<pre><code>      continent   drink   consumption     country
17    Africa  Beer    953277  country_7
19    Africa  Beer    902648  country_9
15    Africa  Beer    527035  country_5
13    Africa  Beer    500186  country_3
14    Africa  Beer    384681  country_4
...   ...     ...     ...     ...
162   South America   Wine    837646  country_2
160   South America   Wine    742139  country_0
167   South America   Wine    688519  country_7
161   South America   Wine    516588  country_1
166   South America   Wine    136330  country_6

90 rows Ã— 4 columns
</code></pre>
</blockquote>
    </div>