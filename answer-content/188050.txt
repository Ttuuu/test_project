<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Interesting one</p>

<p>I thought of using itertools, but seems that just <code>enumerate</code> and <code>zip</code> make the work</p>

<p>Added some docstrings, you can remove them for shorter code but helps explaining what happens in each list comprehension</p>

<p>If you neglect docstrings, code is a mere 5 lines :)</p>

<pre><code>chars = 'azcbobobegghakl'

def smaller_than_previous(c, i):
    return c &lt; chars[i-1] if i &gt; 0 else False


def list_of_indexes_to_split(chars):
    """
    Returns a list of indexes where previous character is smaller than current

    eg for 'abcabcd': [0, 3]

    :param chars: string to check
    :return: list
    """
    return [0]+[i for i, c in enumerate(chars) if smaller_than_previous(c, i)]


def sliced_substrings(chars, indexes):
    """
    Returns a list of strings after slicing the original one using
    the indexes provided

    Eg for 'abcabcd', [0, 3]: ['abc', 'abcd']

    :param chars: string
    :param indexes: list with indexes where to slice
    :return: list of strings
    """
    return [chars[i:j] for i, j in zip(indexes, indexes[1:]+[None])]


indexes = list_of_indexes_to_split(chars)

parts = sliced_substrings(chars, indexes)

print(max(parts, key=len))
</code></pre>
    </div>