<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I had a wrong concept about GitLab artifacts. After a good read on GitLab docs, especially the section distinguishing <a href="https://docs.gitlab.com/ee/ci/caching/#cache-vs-artifacts" rel="nofollow noreferrer">artifacts and cache</a>, I deduced that I should use cache instead of artifacts as it was designed precisely for storing restored dependencies. Artifacts are meant for passing build output and binaries.</p>

<p>I also removed the <code>restore</code> stage, placing the <code>dotnet restore</code> command in a global <code>before_script</code>. Cache can fail and in such scenario the script should gracefully fallback to default 'download-from-internet' behaviour. With <code>--no-restore</code> option enabled it would not happen. Thus, I removed that option from <code>dotnet build</code> command. It won't make a noticeable difference with successfully download cache as a dependency restore with already downloaded packages will execute in next-to-no-time.</p>

<p>Finally, I added cache key, which will keep cache bundles separate for branches and stages.</p>

<h3>Updated script:</h3>

<pre class="lang-none prettyprint-override"><code>image: microsoft/dotnet:2.2-sdk

variables:
 SOURCE_CODE_DIRECTORY: 'src'
 BINARIES_DIRECTORY: 'bin'
 OBJECTS_DIRECTORY: 'obj'
 NUGET_PACKAGES_DIRECTORY: '.nuget'

stages:
  - build

cache:
 key: '$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG'
 paths:
  - '$SOURCE_CODE_DIRECTORY/*/$OBJECTS_DIRECTORY/project.assets.json'
  - '$SOURCE_CODE_DIRECTORY/*/$OBJECTS_DIRECTORY/*.csproj.nuget.*'
  - '$NUGET_PACKAGES_DIRECTORY'

before_script:
  - 'dotnet restore --packages $NUGET_PACKAGES_DIRECTORY'

build:
 stage: build
 script:
  - 'dotnet build --no-restore'
</code></pre>
    </div>