<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, recognizing that what you are trying to do is generate a series of base 36 numbers, we can do this simpler and functionally.</p>

<pre><code> public static void main(String[] args) {
        String result = new SecureRandom().ints(0,36)
            .mapToObj(i -&gt; Integer.toString(i, 36))
            .map(String::toUpperCase).distinct().limit(16).collect(Collectors.joining())
            .replaceAll("([A-Z0-9]{4})", "$1-").substring(0,19);

        System.out.println(result);
    }
</code></pre>

<p>produces: 
<code>51QZ-RJ30-JZW3-97L7</code></p>

<p>16 alphanums, all unique.</p>

<p>There are several improvements with this implementation. </p>

<ol>
<li>It's shorter. Less code is generally a win. </li>
<li>It doesn't define its own alphabet and takes advantage of a detail of the problem by using the built in Integer libraries to output base 36 numbers</li>
<li>It's purely functional and has no external variables to manage. The previous implementation has 4 variables - 2 in function. Those variables are incremented and decremented leaving room for bugs.</li>
<li>This code makes a clear delineation between the generation of the number set and its format. Separation of concerns is generally considered best practice. </li>
<li>Uses native libraries to perform the format and eliminates any logic which can also introduce bugs.</li>
</ol>

<p>In general, it's a library driven approach which will naturally reduce the chance for bugs as it relies on well vetted existing code.</p>
    </div>