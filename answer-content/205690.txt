<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>SinFunction</code> and the templating of <code>WaveFileWriter</code> are overkill.  All we need is a simple <code>std::function&lt;float(float)&gt;</code>.</p>

<p>I'd argue that the knowledge of <code>frequency</code> doesn't belong in the writer - it's a property of the signal we're generating, not of the file format.  This will be important when you want to produce multiple notes within the file, for example.</p>

<p>Why are we duplicating the signal to two channels, rather than writing a monaural file that's half the size?  Even if there's some valid reason to write a stereo file, there's no need to compute the contents twice, unless you expect users to pass a non-pure function.</p>

<p>When dealing with file formats with fixed-width integer types, it's natural to use C++'s fixed-width integer types with them - I suggest writing a wrapper for a standard stream that implements <code>operator&lt;&lt;(std::uint16_t)</code> and similar instead of the <code>longWrite()</code> and friends here that write data that might be wider or narrower than the type that's passed.  Also, take more care using <code>%</code> with signed types.</p>

<p>Why use the signature for <code>main()</code> that accepts arguments, when we then ignore the arguments and use a hard-coded filename instead?  Let's allow the user to pass the filename as argument; that make the program much more flexible (even better if we default to writing to standard output, so we can use it to feed a command pipeline).</p>
    </div>