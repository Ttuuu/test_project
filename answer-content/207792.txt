<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>typedef std::map&lt;std::string, std::vector&lt;int&gt;&gt; bocce_balls;
</code></pre>

<p>Are you interested in the ordering of the container? There really is no need to use <code>std::set</code> to wrap the ball distances for each player.  <code>std::unordered_map</code> would be faster (consumes more space!), but do you even need a map-type? Have you considered using an array of vectors to represent the distances for each player? Do you need to wrap the distances or can you just pass each player as arguments? </p>

<p>Should the key be a string or an enumeration? Strings are great when you need to make keys on the fly at run-time.  At compile-time, spelling errors with strings will result in new entries being created in mutable maps.  With strongly typed enumerations, the possible range of keys is predefined.  </p>

<p>Should distances be stored as integers or as a floating-point type?</p>

<hr>

<pre><code>std::string bocce(bocce_balls balls, int_arr jack)
</code></pre>

<p>Pick descriptive names that help readers understand what your function is supposed to do. <code>bocce</code> is the name of the game.  What does this function do? Calculates the winner for a game of bocce. Cartesian point makes it clear what the type of <code>jack</code> should be. Balls is holding the results for one frame in a game of bocce.</p>

<hr>

<pre><code>    auto distance = std::sqrt(std::pow(jack[0], 2)+std::pow(jack[1], 2));
</code></pre>

<p>Use <code>const</code> to define objects with values that do not change after construction.  <code>const</code> is useful for providing an immutable view of mutable data. This allows you to clarify to readers that the variable will not be modified and it prevents surprises when someone unexpectedly changes the objects value.</p>

<p>Also, distance from an origin exists in <code>&lt;cmath&gt;</code>.  See <a href="https://en.cppreference.com/w/cpp/numeric/math/hypot" rel="nofollow noreferrer"><code>std::hypot</code></a>.</p>

<hr>

<pre><code>    int_vec red = balls["red"];
    int_vec blue = balls["blue"];
</code></pre>

<p>Key-access through a map returns a reference to the mapped value.  Here, you've opted into making a copy of the mapped value.  If you look back at your function signature, <code>bocce_balls</code> is passed by value.  Another copy.  I'd advise that you pass the parameter by reference-to-<code>const</code> as to prevent accidental modifications to the map.  Keep the copies of <code>red</code> and <code>blue</code> here as you'll need those copies for the sort.</p>

<hr>

<pre><code>    for (int i = 0; i &lt; blue.size(); ++i) {
        if (red[i] &gt; distance &amp;&amp; red[i] &gt; blue[i])
            ++red_count;
        else if (blue[i] &gt; distance &amp;&amp; blue[i] &gt; red[i])
            ++blue_count;
    }
</code></pre>

<p><code>i</code> is a signed integer. <code>blue.size()</code> returns an unsigned integer.  Each loops does a signed/unsigned comparison.  Every time you index with <code>i</code>, the subscript operator is expecting an unsigned integer which leads to implicit conversions that change signedness.  Turn up your warning levels.</p>
    </div>