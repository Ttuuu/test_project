<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An alternative is to build a trie and then walk the trie to generate
the combinations. There are two recursive functions and I've timed
it as roughly an order of magnitude slower than your iterative version,
but I thought you might find it interesting nonetheless. (Once JS gets
tail-call optimisation, some recursive approaches will run faster.)</p>

<pre><code>var follows, combinations;

follows = function(a){
    return a.map(function(item, i){
        return [item, follows(a.slice(i+1))];
    });
};

combinations = function(a){
    var combs = function(prefix, trie, result){
        trie.forEach(function(node, i){
            result.push(prefix + node[0]);
            combs(prefix + node[0], node[1], result);
        });
        return result;
    };
    return combs('', follows(a), []);
};

combinations(['a','b','c','d']);
</code></pre>

<p>P.S. Your <code>permutations</code> function outputs an array of arrays, not an array of strings like your example at the top of your question. I've output an array of strings with my <code>combinations</code> function.</p>
    </div>