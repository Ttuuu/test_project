<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Is it a good starting point?</h1>
<p>A starting point for what?
The only obvious purpose for code like this is to provide error checking for accidentally indexing out of bounds, but this code doesn't do that.</p>
<p>And note that <code>free(array)</code> makes assumptions about the implementation.
There should be an <code>array_free(array)</code> function that can be internally changed in future development without affecting any calling code.</p>
<h1>Can I implement my custom array with [] to read/write values to my array?</h1>
<p>Yes, but that's exactly what you <em>don't</em> want to do.</p>
<p>The most significant problem with this design is that it returns a value that the caller can use with <code>[…]</code>.
That allows it to bypass the error checking (which I assume will eventually be added).</p>
<p>The type returned should be something that is incompatible with accidental misuse.
If someone calls array_set() with an argument that wasn't created by array_initialize(), you want that mistake caught at compile time, not
during critical execution time.</p>
<h1>Can I call it an array?</h1>
<p>Yes, but it's not a generic array; it is an array of <code>(int)</code>.</p>
<p>And, note that storing a zero value in the array will break <code>array_size()</code>.</p>
<hr>
<p>You're going in the right direction, but started on the wrong foot.</p>
<p>Define your basic data structure first, and then the rest of the design should flow naturally from that.
e.g.</p>
<pre><code>typedef struct {
    size_t size;
    size_t used;
    int *value;
} intArray;
</code></pre>
<p>Now it becomes obvious that the initialization function needs to allocate <code>*value</code> and should return a pointer to an <code>intArray</code> structure:</p>
<pre><code>    intArray *
intArray_initialize(int size) {
    …
}
</code></pre>
<p>Then in <code>intArray_set()</code> and <code>intArray_get()</code> add code to verify that <code>0 &lt;= index &lt; size</code>.</p>
<p>And <code>intArray_size()</code> becomes trivial:  <code>array-&gt;used</code>.</p>
<p>Finally, <code>intArray_free(intArray *array)</code> will need to free both <code>array-&gt;value</code> and <code>*array</code>.</p>
    </div>