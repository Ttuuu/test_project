<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's the best I think we can get it without actually knowing what your code is for.</p>

<pre class="lang-java prettyprint-override"><code>public class StatementJob {
    public static final Logger LOGGER = LoggerFactory.getLogger(StatementJob.class);

    public static final String JOB_IS_DISABLED = "Uploads statement job is disabled and will not run";
    public static final String UNABLE_TO_CONTINUE = "Unable to continue";

    private final Configuration jobConfiguration;
    private final Log log;

    public StatementJob(JobConfiguration jobConfiguration) {
        this.jobConfiguration = jobConfiguration;
        this.log = new JobLog();
    }

    public Log execute() {
        LOGGER.debug("Stating uploading statements");

        final JobProperties properties;
        try {
            properties = jobConfiguration.loadProperties();
        } catch (BadConfigurationException e) {
            return log.addError(e.getMessage());
        }

        if (!properties.isRunJob()) {
            return log.addSuccess(JOB_IS_DISABLED);
        }

        Employee employee = Employee.load(properties.getStatementUploader());
        FileStatements fileStatements = new Statements(properties.getDirectories());

        FatalConsumer&lt;WipStatement&gt; wipConsumer = wip -&gt; {
            try {
                new UploadableDocument(employee, wip).upload();
                fileStatements.moveToArchiveLocation(wip);
            } catch (FailedToUploadDocumentException e) {
                log.addError(e.getMessage());
                fileStatements.moveToErrorLocation(wip);
            }
        };
        FatalConsumer&lt;InboundStatement&gt; inboundConsumer = inbound -&gt; {
            fileStatements.moveToWipLocation(inbound);
            fileStatements.getWipStatements().forEach(wipConsumer);
        };

        fileStatements.getInboundStatements().forEach(inboundConsumer);

        return log;
    }

    @FunctionalInterface
    public interface FatalConsumer&lt;T&gt; extends Consumer&lt;T&gt; {
        void fatalAccept(T t) throws UnableToMoveFileToDirectoryException, UnableToReadFileException;

        @Override
        default void accept(T t) {
            try {
                fatalAccept(t);
            } catch (UnableToMoveFileToDirectoryException | UnableToReadFileException e) {
                LOGGER.error(UNABLE_TO_CONTINUE, e);
            }
        }
    }
}
</code></pre>

<p>Changelog:</p>

<ul>
<li>Separate constants to be grouped by category. The logger typically is flush with the class declaration while other constants are grouped below it.</li>
<li>No need to have the extra space after the start of the <code>execute</code> method</li>
<li>Use more accurate log levels. Specifically, you overuse "info". Refer to <a href="https://stackify.com/9-logging-sins-java/" rel="nofollow noreferrer">this</a> article about different things to avoid when logging effectively.

<ul>
<li>"DEBUG is intended for messages that could be useful in debugging an issue (ex: method execution started)"</li>
</ul></li>
<li>Use line breaks in <a href="https://en.wikipedia.org/wiki/Fluent_interface" rel="nofollow noreferrer">fluent</a> calls only when it becomes too long, and then only when you have created your stream/data-structure. Specifically, there's no need to have a line break after <code>fileStatements</code></li>
<li>You have a lot of excess indentation and repeated code. Specifically, all of times you catch an exception, log it, and then immediately rethrow it. My changes above resolve that.</li>
<li>If you are going to statically define the document uploader to be an Employee, naming the variable <code>documentUploader</code> instead of <code>employee</code> is kind of pointless.</li>
</ul>

<p>I would highly recommend moving <code>FatalConsumer</code> and each of the non-logging constants you have to their own files. Besides that, this is about as good as you're going to get imo. Hope this helps!</p>
    </div>