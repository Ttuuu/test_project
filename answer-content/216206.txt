<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is pretty clear and readable. Congratulations!</p>

<p>Here are some suggestions:</p>

<ol>
<li><p>Stop using <code>sleep</code>! Unless this is for a Hollywood hacker movie, it just slows things down. Nobody thinks delays are cool after the first three times you run something.</p></li>
<li><p>Take command-line arguments instead of prompting for everything. It's a lot easier to just put stuff into a command line than it is to respond to it at the keyboard. Something like:</p>

<pre><code>ingest -t $HOME/media -b SONY -p "My Project" 
</code></pre>

<p>There are plenty of <a href="https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash#13359121">SO answers</a> on how to do this.</p></li>
<li><p>Add some more functions! Anything you find yourself doing twice should be a function. Also, anything that you have to "break the flow" in order to do should be a function. Here are some examples:</p>

<pre><code>while [[ -z "$target_directory" ]]
    do
        echo -e "Path of target directory?"
        read target_directory
    done

while [[ -z "$brand" ]]
    do
        echo -e "\nBrand Prefix?"
        read brand
    done
</code></pre>

<p>That's twice! Write a function to do this:</p>

<pre><code>target_dir=$(prompt_for_variable target_dir 'Path of target directory?')"
brand="$(prompt_for_variable brand 'Brand Prefix?')"
</code></pre>

<p>Now consider this:</p>

<pre><code>while true;
do
    read -p "Additional rsync options? [y/n] " rsync_add
    case $rsync_add in
        [Yy]* )
</code></pre>

<p>Right in the middle of "construct_rsync" you stop and loop forever prompting the user for a y/n answer. Write a function for that!</p>

<pre><code>if get_yn 'Additional rsync options?'
then
     read -p "Enter the additional options: " rsync_options
fi
</code></pre></li>
<li><p>Don't lie to anybody, especially yourself. You have a function called <code>construct_rsync</code> but what does it do? It <em>runs the command.</em> Either change the name, or change the function.</p></li>
<li><p>Beware of <code>$?</code>. In your <code>log</code> function you refer to it several times. But <code>$?</code> is updated each time a command is run. So if you're going to make decisions based on the value, you should either capture the value into a separate variable (<code>status=$?</code> ... <code>if $status</code>) or make a single decision right up front (<code>if $? ... else ... fi</code>)</p></li>
</ol>
    </div>