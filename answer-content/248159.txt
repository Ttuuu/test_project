<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with everything Edward said in his answer. One thing he mentions is that you have a tedious syntax that causes you to repeat some things, like the <code>argc, argv</code> arguments passed to the <code>CliArg&lt;&gt;</code> constructors. A potential solution is to create a generic argument parser object that you give the <code>argc</code> and <code>argv</code> parameters, and then reference that object in some way when creating your arguments.</p>
<p>I personally think Python's <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> module handles this in a nice way. It is not be possible to reimplement this perfectly in C++, but we can try to emulate it somehow. For example, the following usage syntax might be implementable:</p>
<pre><code>parser = CliArgParser(argc, argv);
auto isVerbose = parser.addArg&lt;bool&gt;("v", "verbose");
auto filterName = parser.addArg&lt;std::string&gt;("f", "filename");
...
</code></pre>
<p>A very simple implementation of <code>CliArgParser</code> could look like this:</p>
<pre><code>class CliArgParser {
    int &amp;argc;
    char *(&amp;argv)[];

public:
    CliArgParser(int argc, char *(&amp;argv)[]): argc(argc), argv(argv) {}

    template&lt;typename T&gt;
    CliArg&lt;T&gt; addArg(const std::string&amp; opt, const std::string&amp; longOpt, const std::string&amp; d = "") {
        return CliArg(argc, argv, opt, longopt, d);
    }
};
</code></pre>
<p>This requires a move constructor to be implemented for <code>CliArg</code> though. But once you have that, you can make it more intelligent. For example, you could keep track of which options were added to the parser, and add a function to <code>CliArgParser()</code> that can check whether the remaining arguments contain unknown arguments. Or you could add a help text to each argument, and have <code>CliArgParser()</code> print a list of all supported options along with the help text.</p>
    </div>