<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>
<ul>
<li><p>There is an off chance that the interval event that you start at the bottom of the script with <code>setInterval(startTime, 1000);</code> will fire before the page has fully loaded, causing the first run to throw an error at <code>document.getElementById("message").innerHTML =</code></p>
<p>However it is a minor bug and will fix itself in the next interval.</p>
</li>
</ul>
<h2>Some coding points</h2>
<ul>
<li>Avoid putting code in the HTML. eg you have  <code>&lt;body onload="startTime()"&gt;</code> which can be done in the script with <code>addEventListener("load",startTime)</code> But its not really needed as you have the interval call the function anyway.</li>
<li>You can access elements directly via their <code>id</code> as long as you ensure that the id is unique on the page. If you use the same name for any other <code>id</code> or <code>name</code> element property then it will not work. Refer to answers to <a href="https://stackoverflow.com/q/14478102/1575353">this SO post</a> for more context.</li>
<li>When adding text only (no HTML) to an element it is more efficient to add it via the textContent property. For simple stuff it's not a major issue, it is when you start to add lots of content that it will be noticeable.</li>
</ul>
<h2>Regarding time</h2>
<p>The value of a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" rel="nofollow noreferrer">Date</a> object is an integer that counts the milliseconds since 1 January 1970 UTC.</p>
<p>Since you are not interested in the specific time, but rather half hour periods it can be simpler to work in milliseconds rather than the more complex minutes, seconds format.</p>
<p>To get the millisecond value you can use <code>Date.now()</code> and to change that value to half hour chunks you get the remainder of dividing by 30 * 60 * 1000ms using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder" rel="nofollow noreferrer">remainder operator</a> <code>%</code></p>
<p>The  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder" rel="nofollow noreferrer">remainder operator</a> <code>%</code> is great when you need to get cyclic values.</p>
<h2>Example snippet</h2>
<p>The example below show how it can be done using milliseconds alone.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>addEventListener("load", displayPeriod);  // start on page load

const second = 1000;          // length of second in ms
const minute = 60 * second;   // length of minute in ms
const halfHour = 30 * minute; // length of half hour in ms

function displayPeriod() {
     const halfHourTime = Date.now() % halfHour;
     var nextPeriod = 25 * minute;

     if (halfHourTime &lt;= nextPeriod) {
         message.textContent = "WORK TIME";
     } else {
         message.textContent = "BREAK TIME";
         nextPeriod = halfHour;
     }
     const min = Math.floor((nextPeriod - halfHourTime) / minute);
     const sec = Math.floor((nextPeriod - halfHourTime) / second) % 60;
     
     countDown.textContent = min + ":" + ("" + sec).padStart(2,"0");

     var time2Second = second - halfHourTime % second;
     if (time2Second &lt; 50) { // if too close delay a littl
         time2Second += 50;
     }
     setTimeout(displayPeriod, time2Second);
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>div{
   font-family : arial;
   font-size : 32px;
   width : 100%;
   text-align : center;
}
   </code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="message"&gt;&lt;/div&gt;
&lt;div id="countDown"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

<p>Or using interval and shortening the naming as I find long names hard on the eyes. Also I use a shortcut for <code>Math.floor</code> the bitwise <code>| 0</code>  which is handy for rounding down positive numbers. I also used the ms times expressed with the exponent as I happen to know them (3e5 is 5 minutes in milliseconds)</p>
<p>I would consider the second snippet of lower quality, but for simple projects less code can be better.</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>addEventListener("load", () =&gt; setInterval(displayPeriod,1000));  // start on page load

function displayPeriod() {
     const time= Date.now() % 18e5;
     var nextP = 15e5;
     var mes = "WORK TIME :(";

     if (time &gt; nextP) {
         mes = "BREAK TIME :)";
         nextP = 18e5;
     }

     const m = (nextP - time) / 6e4 | 0;
     const s = ("" + ((nextP - time) / 1e3 | 0) % 60).padStart(2,"0");

     message.textContent = mes;
     countDown.textContent = m + ":" + s;
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>div{
   font-family : arial;
   font-size : 32px;
   width : 100%;
   text-align : center;
}
   </code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="message"&gt;&lt;/div&gt;
&lt;div id="countDown"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

<h2><code>setInterval</code> V <code>setTimeout</code></h2>
<p>Personally I prefer using <code>setTimeout</code> rather than the <code>setInterval</code> as it give finer control over when the next event will fire. In the example I use the ms time to workout how long it is till the next second starts, if too close to ensure the timer will fire (browsers may throttle timers) I offset it a little.</p>
<p>This method sets the event for the closest coming second, and will skip any missed seconds.</p>
<p>But <code>setInterval</code> is just as good but if the system is busy the countdown can skip displaying seconds more often than using <code>setTimeout</code></p>
    </div>