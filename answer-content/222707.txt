<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider creating a static method within the class that performs all requirement checks and either returns the constructed object or NULL to indicate there was a failure in meeting all requirements.</p>

<pre><code>class SSHConnection implements ConnectionInterface
{
    //.... your class functions
    public static function SSHConnection GetInstanceIfRequirementsMatched(/*...args*/)
    {
        $myObj = NULL;
        $bIsAllGood = TRUE;

        //run checks for installed features, example:
        if(!isset($_SERVER['SSH'])) { $bIsAllGood = FALSE; }

        if($bIsAllGood)
        {
             //initialize object, run connection obj, etc.
             $myObj = new SSHConnection(/*...args*/);
             $response = $myObj-&gt;InitConnection();

             if(!$response) 
             { 
                 /*throw new Exception("Could not connect...!");*/ 
                 $myObj = NULL; 
             }
        }

        return $myObj;
    }

    protected function __construct(/*...args*/) { }

    /*Basically your connection() method*/
    protected function InitConnection() { return 0; }
}
</code></pre>

<p>Note: for this, I'd also suggest making your constructor <em>protected</em> instead of <em>public</em> to enforce usage of your static method outside the class.</p>
    </div>