<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is clear and easy to follow. Stylistically, I'd say don't use regions but that's personal preference.</p>

<p>That said, you do have a bug:</p>

<pre><code>int[] arr = new[] {1,2,3};
object locker = new object();
var enumerator = arr.Synchronized(locker);
enumerator.ToList();
enumerator.ToList(); // BOOM
</code></pre>

<p>You should be able to enumerate the same enumerable multiple times - it shouldn't result in a runtime exception.</p>

<p>Writing a test program to check your code works as you expect is good but I would get in the habit of writing unit tests instead. They are just as easy to run and have the added benefit of also listing your expected behaviours.</p>

<hr>

<p>Now, as for the actual idea behind this code, I'd suggest you take a look at the concurrent collections available in <code>System.Collections.Concurrent</code> and use them instead. You have used <code>ConcurrentQueue</code> so I know you know about them ;) Their approach to <code>GetEnumerator</code> is to return a snapshot (copy) of the collection at that time. </p>

<p>At the moment, you require the writers and readers to share the same synchronisation object which might not always be feasible. The other downside is that all other readers and writers are blocked until the reader is finished (and they dispose the enumerator correctly). That's too much to assume in my opinion. It's better to use a collection that is designed for the job than to try synchronise over the top of another collection externally. </p>
    </div>