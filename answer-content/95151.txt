<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Best practices:</h1>

<p>So I'll just shortly go through some of the basic beginner mistakes and best-practice "violations" I encounter around here, and tell you how well you did :)</p>

<h3>Formatting:</h3>

<p>On this front that's an awesome job, well done</p>

<h3>Abstraction:</h3>

<p>The code's a little lacking in that respect. The general goal in Java is to program against interfaces. This means:</p>

<blockquote>
<pre><code>ArrayList&lt;Integer&gt; uneatenLeaves = new ArrayList&lt;Integer&gt;();
</code></pre>
</blockquote>

<p>becomes (after applying the <a href="https://stackoverflow.com/questions/4166966/what-is-the-point-of-the-diamond-operator-in-java-7">Diamond Operator</a>)</p>

<pre><code>List&lt;Integer&gt; uneatenLeaves = new ArrayList&lt;&gt;();
</code></pre>

<h3>Naming:</h3>

<p>Naming is one of the hardest things to get right when coding. It's extremely important to have names speaking for themselves, variables containing "exactly what it says on the tin".<br>
This allows to grasp the meaning of code much quicker. </p>

<p><code>array</code> and <code>n</code> aren't really good names. If I understand the code correctly, <code>jumpNumbers</code> and <code>limit</code> would be better names.</p>

<h1>Actual code-review</h1>

<p>As already mentioned in a comment, this problem seems to be a variation of the <a href="https://en.wikipedia.org/wiki/Sieve_of_eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a>, which is used for finding prime numbers.<br>
Can you see the parallels yet?</p>

<p>To make it simple, you want a way to model two states. The better choice than a number (going from roundabout -2.150.000 to 2.150.000) is a boolean, which is either true or false.</p>

<p>Now we also know how often that state needs to be modeled, each leaf gets a separate boolean. If we pass the leaf with a caterpillar it gets eaten, and is no more there. The simplest way to model that is setting the symbolizing boolean to false.</p>

<p>Another interesting construct here is the do-while loop. A caterpillar eats the next leaf, if (and only if) the next leaf exists. The next leaf is calculated by \$A_j * increment\$ or even \$current + A_j\$. In combination with the number of leaves this makes a nice "terminating condition":</p>

<pre><code>while (nextLeaf &lt; leaves.size)
</code></pre>

<p>now we just do that for each caterpillar and suddenly we end up at following pseudocode:</p>

<pre><code>// leaf 0 has already been eaten, since caterpillars always start there
foreach (jump_size in jump_numbers) {
    current = 0;
    while (next_leaf &lt; leaf_count) {
       current = current + jump_size;
       eat current;
    }
}
</code></pre>

<p>Implementing this into actual code is left as an exercise to the reader ;)</p>
    </div>