<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a couple of thougths...</p>

<hr>

<blockquote>
<pre><code>if (string.IsNullOrWhiteSpace(sitemapText))
  yield break;
</code></pre>
</blockquote>

<p>This is a very unusual handling of null/empty argument values and should be documented. A more meaniningful name like <code>GetSitemapUrlsOrDefault</code> would also help. Without it the expected way is to throw an <code>ArgumentException</code>.</p>

<hr>

<blockquote>
<pre><code>foreach (Match m in urlRegex.Matches(sitemapText))
  urls.Add(CleanUriString(m.Value));

foreach (var url in urls)
{
  var cleanedUriString = CleanUriString(url);

  if (Uri.IsWellFormedUriString(cleanedUriString, UriKind.RelativeOrAbsolute))
      yield return new Uri(cleanedUriString);
}
</code></pre>
</blockquote>

<p>You don't need all this. Instead you can build a nice query that does everything in one go and in a single run:</p>

<pre><code>return 
    urlRegex
        .Matches(sitemapText)
        .Cast&lt;Match&gt;()
        .Select(m =&gt; CleanUriString(m.Value))
        .Where(cleanedUriString =&gt; Uri.IsWellFormedUriString(cleanedUriString, UriKind.RelativeOrAbsolute))
        .Select(cleanedUriString =&gt; new Uri(cleanedUriString));
</code></pre>

<p>or alternatively:</p>

<pre><code>return
    from m in urlRegex.Matches(sitemapText).Cast&lt;Match&gt;()
    let cleanedUriString = CleanUriString(m.Value)
    where Uri.IsWellFormedUriString(cleanedUriString, UriKind.RelativeOrAbsolute)
    select new Uri(cleanedUriString);
</code></pre>

<hr>

<p>You don't need the <code>.ToCharArray();</code> on the <code>legalCharacters</code> string. A string is already a char-array.</p>

<hr>

<p>Oh, and of course the <code>WebClient</code> needs to be disposed. Wrapping it with a <code>using</code> would be good.</p>
    </div>