<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are rather removing those parts instead of replacing them, so more appropriate name would be remove all.</p>

<p>You can make your own extension method like this : </p>

<pre><code>public static class Extensions
{
    public static string RemoveAll(this string source, string[] charsToRemove)
    {
        return charsToRemove.Aggregate(source, (current, t) =&gt; current.Replace(t, string.Empty));
    }
}
</code></pre>

<p>If you really want to replace them with something you can do it like this :</p>

<pre><code>public static string ReplaceAll(this string source, string[] charsToRemove, string[] charsToReplace)
{
    string result = source;
    for (var i = 0; i &lt; charsToRemove.Length; i++)
    {
        result = result.Replace(charsToRemove[i], charsToReplace[i]);
    }
    return result;
}
</code></pre>

<p>Example usage : </p>

<pre><code>var filter = "filter";
string[] itemsToRemove = {"'", @"""",};

query = query.Where(x =&gt;
    x.Name.RemoveAll(itemsToRemove).Contains(filter) ||
    x.FullName.RemoveAll(itemsToRemove).Contains(filter));
</code></pre>

<p><strong>UPDATE</strong></p>

<p>LINQ to SQL would require you to call <code>.AsEnumerable()</code>, <code>.ToList()</code> or <code>.ToArray()</code> first before operating on strings, you might loose some performance from that but the other way is to write your custom query provider or stick with what you have.</p>
    </div>