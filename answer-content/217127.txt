<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several problems with this code:</p>

<ul>
<li>There's no syntax validation:

<ul>
<li><code>"))a"</code> results in tokens with negative depth. It should be rejected as invalid.</li>
<li><code>"a AND b c"</code> is not rejected either. Note the missing operator between <code>b</code> and <code>c</code>.</li>
<li><code>"a &amp;&amp; b"</code> results in only two tokens, <code>a</code> and <code>b</code>. The invalid <code>&amp;&amp;</code> part is ignored. I'd expect such input to be rejected.</li>
</ul></li>
<li><p>The removal of superfluous parenthesis is problematic:</p>

<ul>
<li>It's broken (you're missing a <code>+ 2</code> somewhere).</li>
<li>It doesn't fix up the depth and group of subsequent tokens.</li>
<li>It doesn't handle multiple levels, so it simplifies <code>"(((a)))"</code> to <code>"((a))"</code> instead of to <code>"a"</code>.</li>
</ul></li>
<li><p>Why does the <code>Token</code> constructor determine the token type? Why not let <code>ExpressionParser.Parse</code> determine the type, and pass it in via <code>Token</code>'s constructor?</p></li>
<li>Marking fields as <code>readonly</code> prevents them from being reassigned, but it won't make a mutable object immutable. Other code in the same assembly can break the parser by calling <code>ExpressionParser.SupportedOperatorHashSet.Clear()</code>.</li>
<li>Why does <code>Parse</code> store its results in a static field (<code>TokenList</code>) instead of using a local variable? I don't see any advantage to this (but several disadvantages).</li>
<li>Why not expand <code>TokenType</code> with <code>ParenthesisOpen</code>, <code>ParenthesisClose</code>, <code>AndOperator</code> and <code>OrOperator</code>? That lets you simplify several checks.</li>
</ul>

<hr>

<p>What you have written is a lexer, not a parser. Instead of assigning a depth and group number to each token, consider parsing the resulting list of tokens into an actual tree structure. One way to do that would be to use the Shunting Yard algorithm. The resulting structure would consist of expression nodes, with variable nodes containing the name of a variable, and operation nodes containing an operator (and/or) and a list of operand expressions (which are either variable or operation nodes).</p>

<p>For example, <code>"a AND (b OR c)"</code> would produce the same result as:</p>

<pre><code>new Operation(
    Operator.And,
    new Expression[] {
        new Variable("a"),
        new Operation(
            Operator.Or,
            new Expression[] {
                new Variable("b"),
                new Variable("c")
            })
    });
</code></pre>

<p>Parenthesis influence how this tree is created, but they don't need to be stored in the tree. Groups can be found by looking for <code>Operation</code> nodes, and depth is determined by how many <code>Operation</code> 'parents' a node has.</p>
    </div>