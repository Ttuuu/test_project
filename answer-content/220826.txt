<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should have a look at <a href="https://nedbatchelder.com/text/iter.html" rel="noreferrer">Loop like a native!</a>. Explicitly iterating over the indices is usually not the best way to do something in Python. By directly iterating over the string representation of <code>n</code> you won't even need the second argument (and you should remove it if the assignment/defined interface would not require it). This will help you a lot later, when you start using generators or other iterables which are not indexable.</p>

<p>In addition, you can use the built-in <a href="https://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><code>sum</code></a> together with the fact that bools are integers with <code>True == 1</code> and <code>False == 0</code> and a <a href="https://medium.freecodecamp.org/python-list-comprehensions-vs-generator-expressions-cef70ccb49db" rel="noreferrer">generator expression</a> to make your function a lot shorter:</p>

<pre><code>def count_even_digits(n, n_digits):
    """Return the number of digits of n which are even.
    Second argument (number of digits) is unused.
    """
    return sum(int(d) % 2 == 0 for d in str(n))
</code></pre>

<p>I also added a <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer"><code>docstring</code></a> describing what the function does.</p>

<hr>

<p>An alternative that does not use the casting to <code>str</code> is to make a <code>digits</code> function:</p>

<pre><code>def digits(n):
    """Yields the digits of `n`, from smallest to largest."""
    while n &gt; 10:
        n, d = divmod(n, 10)
        yield d
    yield n

def count_even_digits2(n, n_digits):
    return sum(d % 2 == 0 for d in digits(n))
</code></pre>

<hr>

<p>Timing wise, these two solutions are both very fast, but the conversion to <code>str</code> stays faster, now tested up to 10**308. I also added the functions shown in the <a href="https://codereview.stackexchange.com/a/220832/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/201170/vurmux">@vurmux</a> and the <a href="https://codereview.stackexchange.com/a/220841/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/58248/spyr03">@spyr03</a>, which are even faster than these two solutions:</p>

<p><a href="https://i.stack.imgur.com/iJ7Sb.png" rel="noreferrer"><img src="https://i.stack.imgur.com/iJ7Sb.png" alt="enter image description here"></a></p>

<p>Interestingly the manual <code>for</code> loop is faster than the generator expression with <code>sum</code>.</p>

<hr>

<p>For numbers with a lot of digits, it becomes a bit more complicated. This includes a function proposed in <a href="https://stackoverflow.com/a/56290484/4042267">an answer</a> to <a href="https://stackoverflow.com/q/56288015/4042267">my question on SO</a> about why the <code>for</code> loop is better than the <code>sum</code>. This function is even faster, but I would only recommend using it if you need that last bit of speed.</p>

<pre><code>def count_even_digits_count_unrolled(n):
    s = str(n)
    return s.count("0") + s.count("2") + s.count("4") + s.count("6") + s.count("8")
</code></pre>

<p><a href="https://i.stack.imgur.com/MAx5a.png" rel="noreferrer"><img src="https://i.stack.imgur.com/MAx5a.png" alt="enter image description here"></a></p>
    </div>