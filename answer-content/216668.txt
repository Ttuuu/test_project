<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>grep</code> matches a lot of strings that can't be valid bash identifiers ("<em>alphanumeric characters and underscores, beginning with an alphabetic character or an  underscore</em>").   There are some magical exceptions like <code>$*</code> and <code>$@</code> but I'm assuming you aren't trying to support those in your templates.</p>

<p>Reading inputs twice is not necessary; a single-pass approach would remove a lot of complexity from your program, and make it possible to process infinitely large inputs on STDIN.  The only real drawback is that it will exit on the first undefined value, instead of producing a list.</p>

<p>And finally, everyone has their own definitions, but—to me—"pure bash" means "without the use of external programs."  Making your program meet this bar not only makes it faster, it removes even more complexity, because you don't need to filter values through an external program that might misunderstand them.  It also means your template values need not be exported.  They only need to be visible to the current shell.</p>

<p>This version, implemented as a function, uses only bash builtins and passes your tests once <code>./fill_template</code> is replaced by <code>fill_template</code>:</p>

<pre><code>fill_template() {
  (( ${#@} )) || set -- /dev/stdin
  local file line eof original name value
  for file; do
    while true; do
      read -r line
      eof=$?
      while [[ $line =~ \{\{" "*([a-zA-Z_][_a-zA-Z0-9]*)" "*\}\} ]]; do
        original=$BASH_REMATCH
        name=${BASH_REMATCH[1]}
        value=${!name?"unset template variable: $name"}
        line=${line//$original/$value}
      done
      printf -- %s "$line"
      (( eof )) &amp;&amp; break || printf "\n"
    done &lt;$file
  done
}
</code></pre>
    </div>