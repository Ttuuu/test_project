<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>To be quick I will just add comments to the code with some alternatives</p>

<pre><code>// if you add to a built in prototype use Object.defineProperty or Object.defineProperties
// using the default settings
// Function.prototype.myCall = function(...args){ // use 2 parameters
Function.prototype.myCall = function(name, ...args){ 

  // var param = args.slice(1),  // is now second parameter 

  // Should be a constant
  //    paramLength = param.length, 
  const  paramLength = args.length;

  // not really a param string. Rather its a eval function
  //  paramString = "JSONarg.myFun(";
  var evaledFunc = "JSONarg.myFun(";

  // The variable if defined in the loop should be let
  // Now starts at index 0  
  //for(var i = 1; i &lt;= paramLength; i++){ 
  for (let i = 0; i &lt; paramLength; i++) {  // add space for ( and ) {

    evaledFunc += "args[" + i + "],";  // use spaces between operators
  }
  evaledFunc += ")";

  // This function is a prototype of Function. You would have to go hard 
  // to have the next statement be true. Just let the native exception 
  // generate the error
  /*if(typeof this != 'function'){
    throw new Error(this + " is not a Function");
  }*/

  // Does not change, thus should be a const
  // var JSONarg =  {
  const JSONarg =  {  // would be best defined at the top of the function

  // args[0] is now the param name
  //  ...args[0],
      ...name,
    myFun: this 
  // }  // there should be a ; here
  };
  return eval(evaledFunc);
}
</code></pre>

<p>Removing the comments and some minor mods we get...</p>

<pre><code>function myCaller(name, ...args) { 
    const JSONarg =  {...name, myFun: this};
    var func = "JSONarg.myFun(";
    for (let i = 0; i &lt; args.length; i++) {
        func += "args[" + i + "],"; 
    }
    func += ")";
    return eval(func);
}
</code></pre>

<p>Rather than <code>eval</code> you could also have use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" rel="nofollow noreferrer"><code>new Function</code></a></p>

<h2><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" rel="nofollow noreferrer"><code>Object.defineProperty</code></a></h2>

<p>To prevent problems (<code>myCall</code> showing up in strange places) and as it is in a very often used native type.( All functions get the new property). <code>enumerable = true</code> can slow every function call just a little depending on JS engine and version.</p>

<p>Add to prototype safely using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" rel="nofollow noreferrer"><code>Object.defineProperty</code></a>. Default accessor <code>configurable</code>, <code>enumerable</code>, <code>writable</code> are <code>false</code></p>

<pre><code>if (! Function.prototype.myCall) {
    Object.defineProperty(Function.prototype, myCall, {value: myCaller});
}
</code></pre>

<h2><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>Function.bind</code></a></h2>

<p>With all that said there is a much easier way to do the same. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>Function.bind</code></a> will bind a functions with an object (sets the functions <code>this</code>)</p>

<pre><code>function printName(location, district){
    alert(this.name + ", " + this.version + ", " + location + ", " + district);
}
printName.bind({...name})( "Chrome", "browser");

// or just use original name obj

printName.bind(name)( "Chrome", "browser");
</code></pre>

<p>The bound function is a new reference, the original function remains unbound</p>

<pre><code>const printNameBound = printName.bind(name);

printNameBound("Chrome", "browser");

printName("Chrome", "browser"); // will fail as not bound to name object
</code></pre>

<h2><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" rel="nofollow noreferrer"><code>Function.call</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" rel="nofollow noreferrer"><code>Function.apply</code></a></h2>

<p>You can also use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" rel="nofollow noreferrer"><code>Function.call</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" rel="nofollow noreferrer"><code>Function.apply</code></a> to do the same. In this case there is no new reference to the function created. The binding is temporary.</p>

<pre><code>printName.call(name, "Chrome", "browser"); 

// or

printName.apply(name, ["Chrome", "browser"]); // args as array
</code></pre>
    </div>