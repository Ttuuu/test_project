<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a weird unique queue. It does not actually guarantee uniqueness on its own:</p>

<pre><code>queue = TemporaryQueue()
for x in range(10):
    queue.append(x)
queue.append(0)
print(list(queue))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
</code></pre>

<p>And it does not guarantee that all of the elements are even there:</p>

<pre><code>queue = TemporaryQueue()
for x in range(10):
    queue.append(x)
print(list(queue))
# [11]
</code></pre>

<p>If I add more than <code>max_items</code> elements to a queue, I expect the queue to always grow until it reaches its maximum size and then stay constant (in size). Not shrink again to one element.</p>

<p>The <code>max_items</code> argument is also not followed correctly:</p>

<pre><code>queue = TemporaryQueue()
for x in range(11):
    queue.append(x)
print(len(list(queue)))
# 11
</code></pre>

<p>Your <code>__eq__</code> method is not needed. It looks like you wanted to implement <code>__contains__</code> in order to be able to do <code>x in queue</code>.
Your code still works because Python just uses <code>x in list(self)</code>, which in this case is just as inefficient as your implementation.</p>

<p>In your <code>append</code> method you do <code>return self._queue.append(value)</code>. Since <code>list.append</code> modifies the list inplace, it returns <code>None</code>, which your method will implicitly return anyways. Instead just have the call in its line as the last line of the method</p>

<p>On the other hand, your capacity check can be simplified by putting the call in the <code>return</code>:</p>

<pre><code>def _exceed_check(self):
    return len(self._queue) &gt; self.max_items
</code></pre>

<p>You might want to add a <code>extend</code> method for convenience. A simple implementation such as this would already suffice:</p>

<pre><code>def extend(self, values):
    for x in values:
        self.append(x)
</code></pre>

<hr>

<p>If you want truly unique comments, either collect them in a <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a> beforehand, or use the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipe</a> <code>unique_everseen</code> if you want to process them as they come in. Of course, this needs <span class="math-container">\$\mathcal{O}(n)\$</span> memory, where <span class="math-container">\$n\$</span> is the number of unique comments.</p>

<p>If you want an efficient maximum size queue from which you can get elements from both sides, use a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a>, as recommended in <a href="https://codereview.stackexchange.com/a/233308/98493">the answer</a> by <a href="https://codereview.stackexchange.com/users/98633/roottwo">@RootTwo</a>.</p>
    </div>