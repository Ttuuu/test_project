<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I'm afraid all the path handling and validation is a common anti-pattern of trying to check every conceivable error condition before trying to do something, in order to avoid lots of error-handling code. The problem is it doesn't work - it is literally impossible to guard against all possible errors, because an error may be introduced after you verify that things are fine, and before you act on that information. For example, you may check for the existence of a directory, but something or something removes or replaces it before you have a chance to use it. So my primary suggestion would be to simply remove all of PathUtilities.py and Folder.py, and to use the file access tools directly in your main code. What will happen then is if you attempt to do something like read a non-existing file you will get an informative uncaught exception from the Python standard library, and those will be easy to debug and/or handle when you see them.</p>

<p>That said:</p>

<ol>
<li>Repository.py and Main.py belong in the same file, at least until the program becomes a fair bit more complex. This is a common pattern in small Python utilities, since there is a big advantage to having a program be a single file as opposed to several.</li>
<li>Don't worry about docstrings. If you make your code sufficiently easy to read they just clutter up the place in my experience.</li>
<li><code>sys.exit()</code> is redundant as it stands. To make it useful you can pass it a number to indicate success or failure of the run. By convention zero indicates success, one often indicates an unknown error, and other numbers indicate application-specific errors. Don't use numbers above 255; exit codes are just a single byte on common platforms. A common pattern here is to <code>sys.exit(main())</code> at the bottom of the file, and have <code>main</code> return an <code>int</code>.</li>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre>

<p>That limit is not absolute by any means, but it's worth thinking hard whether you can keep it low whenever validation fails. For example, I'm working with a team on an application since a year now, and our complexity limit is up to 7 in only one place.</p></li>
<li><p>I would then recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> everywhere and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
</ol>

<p>In general the code is easy to read, but could use some simplifying.</p>
    </div>