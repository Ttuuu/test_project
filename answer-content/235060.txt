<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Segment trees and Fenwick trees are usually implemented as <a href="https://www.wisdomjobs.com/e-university/data-structures-tutorial-290/implicit-data-structure-7118.html" rel="nofollow noreferrer">implicit
data
structures</a>. That
is, as an array with the tree structure implicitly given by the array
indices. Your code instead stores the tree as a Python dictionary
which is very inefficient.</p>

<p>The second problem with your segment tree is that you are using
recursion. Refer to this <a href="https://codeforces.com/blog/entry/18051" rel="nofollow noreferrer">sample
code</a> for how to implement
iterative versions of <code>get_sum</code> and <code>update</code>.</p>

<p>The third problem is that you have implemented a Segment tree and not
a Fenwick tree (aka Binary indexed tree). For this problem, they are
slightly more efficient than Segment trees.</p>

<p>The fourth problem is, sadly, Python. :) Number crunching code and
tight loops just doesn't run as fast in Python as they do in
lower-level languages. Plus, in this problem, IO and number parsing is
dominating.</p>

<p>Here is a Python solution using a Fenwick tree:</p>

<pre><code>n, q = map(int, input().split())
# One extra element so that we can use 1-based indexing.
nums = [0] * (n + 1)
for _ in range(q):
    parts = input().split()
    if len(parts) == 3:
        _, i, inc = parts[0], int(parts[1]) + 1, int(parts[2])
        while i &lt;= n:
            nums[i] += inc
            i += i &amp; (-i)
    else:
        _, i = parts[0], int(parts[1])
        tot = 0
        while i &gt; 0:
            tot += nums[i]
            i -= i &amp; (-i)
        print(tot)
</code></pre>

<p>If you port it to a low-level language it will be very fast.</p>
    </div>