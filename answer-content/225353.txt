<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Errors</h2>

<p><code>range(start, end)</code> goes from the <code>start</code> value, inclusive, to the <code>end</code> value, exclusive.  So</p>

<pre><code>for i in range(upper_boundary, lower_boundary, -1):
</code></pre>

<p>will not include <code>lower_boundary</code> in the values which will be tested, so you will be ignoring products where <code>i</code> would be <code>10</code> (two digit case) and <code>100</code> (three digit case).</p>

<p>Similarly, <code>for j in range(i, lower_boundary, -1)</code> will ignore products where <code>j</code> would be <code>10</code> and <code>100</code>.</p>

<p>The solution is to use <code>range(..., lower_boundary - 1, -1)</code>.</p>

<h2>Special Case</h2>

<p>Why is <code>n == 1</code> special cased, to return <code>9</code>?  Why don’t you trust the algorithm to return the correct value?  Oh, right, <code>9*1</code> wouldn’t be tested, because <code>lower_boundary = 1</code>, and got excluded due to the bug above.</p>

<p>Perhaps you should have examined this special case closer.</p>

<h2>Optimizations</h2>

<p>You compute <code>i*j</code> up to 3 times each loop.  You should compute it once, and store it in a variable, such as <code>prod</code>.</p>

<pre><code>        prod = i * j
        str_prod = str(prod)
        if prod &gt; mul_max and str_prod[::-1] == str_prod:
            mul_max = prod
</code></pre>

<p>You are searching in decreasing ranges for the outer and inner loops.  Why?  True: You’ll find the target value faster.  But you still search all product values where <code>j &lt;= i</code>.  Is there any way of determining there won’t be any larger <code>mul_max</code> value, either from the inner loop, or from the outer loop, or both?  For instance, if <code>i*j &gt; mul_max</code> is not true, would it be true for any <strong>smaller</strong> value of <code>j</code>?</p>

<p>Turning a integer into a string is an <span class="math-container">\$O(\log n)\$</span> operation.  Can you skip doing it for every product?</p>

<pre><code>    for j in range(i, lower_boundary - 1, -1):
        prod = i * j

        if prod &lt;= mul_max:
           break

        str_prod = str(prod)
        if str_prod[::-1] == str_prod:
            mul_max = prod 
</code></pre>

<p>Can something similar be done with the <code>for i in range(...)</code> loop, to speed things up even further?</p>
    </div>