<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no "magic" difference between solution 1 and 2. They do the same thing as of now. Both solution 1 and 2 react to Ctrl+C in the same way. The only difference is that by additionally using <code>ctx</code> in solution 2, you allow yet another possibility to trigger a graceful shutdown from software. For now, YAGNI, so I am reviewing the simpler solution 1.</p>

<p>The biggest mistake by far and the biggest lesson (for any language, not in any way Go specific): if you introduce a dependency such as "github.com/prometheus/common/log", make a cost-benefit calculation. Always. That is: if you need colorful logs, don't introduce 75 new packages to do that. One line turned a nice slim http server into a super-fragile behemoth. Specifically for Go 1.11+, you can see it here:</p>

<pre><code>go mod init
cat go.mod
go build ./...
cat go.mod      # now populated 
go mod graph
   (prints one line per each module and version)
</code></pre>

<p>Also, I think that code becomes less complicated if you <code>Shutdown</code> in the main flow, and <code>ListenAndServe</code> in a goroutine? Take a look at my proposition:</p>

<pre class="lang-golang prettyprint-override"><code>package http // new line

import (
    "context"
    "net/http"
    "os"
    "os/signal"
    "syscall"
    "time"

    log "github.com/sirupsen/logrus" // resulting `go mod graph`  prints 7 modules
    // "log" // builtin without coloring - 0 modules
    //"github.com/prometheus/common/log"   // resulting `go mod graph`  prints 75 modules
)

func Start() {
    log.Infof("starting HTTP server")

    srv := &amp;http.Server{Addr: ":8080", Handler: nil}

    go func() { // change
        if err := srv.ListenAndServe(); err != http.ErrServerClosed {
            log.Fatalf("failed to start HTTP server: %v", err) // change
        }
    }()

    sig := make(chan os.Signal, 1)

    signal.Notify(sig, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

    &lt;-sig

    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)  // change
    defer cancel()

    if err := srv.Shutdown(ctx); err != nil {
        log.Fatalf("graceful shutdown of HTTP server: %v", err) // change
    }

    log.Info("gracefully shutdown HTTP server")
}
</code></pre>

<p>For <strong>cmd/app/main.go</strong> my only concern is to use fully qualified import path like "github.com/kubanczyk/myproj/internal/http" instead of <code>import "internal/http"</code>. There are dirty tricks to make short "internal/http" work for a short while, but I wouldn't recommend that. It's only intended for built-ins.</p>
    </div>