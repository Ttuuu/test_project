<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>
<p>I find your code very untidy (and thus hard to read). Please make sure to use nice indentation and generally make the code easy to read.</p>
<p>You don't do any memory management. In the class <code>Trie</code> it creates a lot of <code>TriNode</code> objects via <code>new</code>. You are supposed to track these and eventually call <code>delete</code> on all these objects.</p>
<h2>Code Review</h2>
<p>This is not a standard header file:</p>
<pre><code>#include&lt;bits/stdc++.h&gt; 
</code></pre>
<p>Please never use it.<br>
You are supposed to include only the headers you need.</p>
<hr>
<p>This is not a good idea:</p>
<pre><code> using  namespace std ;
</code></pre>
<p>Please read the article: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std;” considered bad practice?</a></p>
<p>The main issue is that it can completely change the meaning of code without causing any kind of compiler warning.</p>
<p>The reason the "standard" library is named "std" is so that it is not a big issue to prefix things in the standard library with <code>std::</code>. This is the preferred technique.</p>
<hr>
<p>In C++ we have deprecated the use of <code>NULL</code> and replaced it with <code>nullptr</code>. The difference is that <code>NULL</code> is a macro that evaluates to the integer zero while <code>nullptr</code> has a specific type of <code>std::nullptr_t</code>. The advantage of this is that <code>nullptr</code> can only be assigned to pointer types while <code>NULL</code> can be assigned to pointers and any integer type (which has caused issues).</p>
<pre><code>TN = NULL;
// prefer
TN = nullptr;
</code></pre>
<hr>
<p>Note the default constructor for <code>std::string</code> assigns it the empty string. So there is no need to set it to the empty string in a constructor.</p>
<pre><code> word = "";
 // Useful to reset to the empty string if the word object had
 // been used. But in a constructor you know it has just been constructed
 // and thus does not need to be set again. So just leave it.
</code></pre>
<hr>
<p>When writing constructors prefer to use the initializer list rather than initializing them in the code block:</p>
<pre><code>    HeapNode ()
    {
         frequency = 0 ;
         TN = NULL ; 
         word = "" ; 
    }

    // I would write this as:    
    HeapNode()
        : frequency(0)
        , TN(nullptr) 
    {}
</code></pre>
<p>The reason for this is that member variables are already initialized by their constructor before the code block is entered. The initializer list allows you to pass parameters to the constructors.</p>
<p>So if you initialize variables in the code block you are doing twice the work. Because you are calling the default constructor then you are calling the assignment constructor.</p>
<p>You may think it's OK not to do this for <code>int</code> and pointer types because they don't have constructors or assignment operators. But this does not consider the normal usage of C++. In is quite normal to change C++ by simply changing the type of a member and not changing anything else. If you have not followed the above pattern then you end up paying the price after the change.</p>
<hr>
<p>Taking a risk here that there are only lower case alphabetic characters.</p>
<pre><code>        if ( temp -&gt; children [ word [ i ] - 'a' ] == NULL  )
</code></pre>
<p>You should check to make sure there are no upper case letters (or convert to lower case) and no none alphabetic characters.</p>
<hr>
<p>You can open a file in a single line.</p>
<pre><code>     fstream file; 
     file.open  ( FileName.c_str() ) ; 


     // I would use this:
     std::ifstream file(FileName);
</code></pre>
<hr>
    </div>