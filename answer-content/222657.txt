<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most expensive operation you're performing is calculating <code>a^(rk)</code> every iteration. Since you are doing this in a loop and increasing the exponent by a constant amount each iteration (<code>k</code>), you can replace the exponentiation with a multiplication. This makes your concurrent task function look like this:</p>

<pre><code>        go func(receiver chan int64, rGiven, k int64) {
            r := rGiven
            ark := pow(a, big.NewInt(r*k))
            ak := pow(a, big.NewInt(k))
            // fmt.Println("Currently at", rGiven, "\nRemaining:", sub(m, rk), "\n")
            for ; r &lt; rGiven+increment+1; r++ {
                current := mod(mul(b, modInverse(ark, m)), m)
                currentString := current.String()
                val, inMap := store[currentString]
                if inMap {
                    receiver &lt;- (val + r*k)
                }
                ark.Mul(ark, ak) // a^(rk) * a^(k) = a^((r+1)k)
            }
            receiver &lt;- -1
        }(receiver, r, k)
</code></pre>

<p>To test this out, I commented out all the prints (they slow things down a lot) and made a test file named <code>main_test.go</code> containing:</p>

<pre><code>package main

import (
    "math/big"
    "runtime"
    "testing"
)

func BenchmarkBabyGiant(b *testing.B) {
    processors = runtime.NumCPU()
    runtime.GOMAXPROCS(processors)

    b.ResetTimer()
    b.ReportAllocs()

    for i := 0; i &lt; b.N; i++ {
        a := big.NewInt(7)
        b := big.NewInt(24190)
        m := big.NewInt(65537)

        babyGiant(a, b, m)
    }
}
</code></pre>

<p>Running this with <code>go test ./ -bench=.</code> before and after shows:</p>

<pre><code>Before:
BenchmarkBabyGiant-8          50     663145338 ns/op    812469942 B/op    213165 allocs/op

After:
BenchmarkBabyGiant-8         100     335030538 ns/op    425100448 B/op     85983 allocs/op
</code></pre>

<p>This shows that this technique causes it to finish in just over half the time of the original. Using <code>ReportAllocs</code> also shows that this function is rather memory allocation heavy, so you could likely squeeze out another 10-30% by reusing <code>big.Int</code> instances instead of allocating a new one for every operation, and using something other than a string map for the lookup table (a sorted list that you binary search using <code>sort.Search</code> will likely be significantly faster and will avoid the overhead of converting to a base 10 string).</p>
    </div>