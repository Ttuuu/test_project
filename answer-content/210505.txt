<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since the other reviews have already hit most points, I'll just mention a few not already covered.  </p>

<h2>Avoid relative paths in <code>#include</code>s</h2>

<p>Generally it's better to omit relative path names from <code>#include</code> files and instead point the compiler to the appropriate location.  So instead of this:</p>

<pre><code>#include "../include/styles.h"
#include "../include/game.h"
</code></pre>

<p>write this:</p>

<pre><code>#include "styles.h"
#include "game.h"
</code></pre>

<p>This makes the code less dependent on the actual file structure, and leaving such details in a single location: a <code>Makefile</code> or compiler configuration file.  With <code>cmake</code>, we can use <code>include_directories</code>.  Since you've already got that in your toplevel <code>CMakeLists.txt</code>, just append the <code>include</code> directory in that <code>CMake</code> directive.</p>

<h2>Understand how <code>#include</code> works</h2>

<p>On most platforms, the difference between <code>#include "math.h"</code> and <code>#include &lt;math.h&gt;</code> is that the former looks first in the current directory.  So for system files such as <code>SDL2/SDL.h</code>, you should really use <code>#include &lt;SDL2/SDL.h&gt;</code> instead.  See <a href="http://stackoverflow.com/questions/3162030/difference-between-angle-bracket-and-double-quotes-while-including-heade">this question</a> for more details.</p>

<p>In many cases, it's likely that either will work, but to the human reader convention is that files in your project use <code>""</code> while system includes (files not in your project) use <code>&lt;&gt;</code>.  That's an imprecise differentiation, but a useful way to think about it.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>The <code>merge_x</code> and <code>merge_y</code> functions are almost identical.  I think it would make sense to combine them into a single <code>merge</code> function that would take a direction as an additional parameter.  The same approach can be taken with the <code>shift</code> and <code>move</code> functions.</p>

<p>For example, here's a combined <code>shift()</code> function that takes an extra parameter indicating <code>ydir</code>:</p>

<pre><code>bool shift(Board board, bool opp, bool ydir)
{
    bool moved=false;
    int start=0,end=SIZE,increment=1;
    if (opp)
    {
        start=SIZE-1;
        end=-1;
        increment=-1;
    }
    for (int a=0;a&lt;SIZE;a++)
    {
        int index=start;
        for(int b=start;b!=end;b+=increment)
        {
            int x = ydir ? b : a;
            int y = ydir ? a : b;
            if (board[x][y]!=0)
            {
                if (ydir) {
                    board[index][y]=board[x][y];
                } else {
                    board[x][index]=board[x][y];
                }
                if(index!=b) {
                    board[x][y]=0;
                    moved=true;
                }
                index+=increment;
            }
        }
    }
    return moved;
}
</code></pre>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>Board</code> is not and should not be altered by the <code>print_board</code> function.  For that reason, I would advise changing the signature of the function to this:</p>

<pre><code>void print_board(const Board board, FILE* stream);
</code></pre>

<p>A similar change can be made to <code>is_game_over</code> and <code>calculate_score</code></p>

<h2>Don't leak memory</h2>

<p>The SDL interface is hard to use correctly without leaking memory, because it isn't always readily apparent which functions allocate and which functions de-allocate.  In this code, <code>initSDL</code> creates a <code>renderer</code> but never calls <code>SDL_DestroyRenderer</code>.  I'd recommend adding a pointer to the renderer as a parameter to <code>closeSDL</code> and making sure it's non-NULL before calling <code>SDL_DestroyRenderer</code>.</p>

<h2>Simplify code</h2>

<p>The code currently contains this function:</p>

<pre><code>inline void move_x(Board board, bool opp)
{
    //Assigning values insted of evaluating directly to force both operations
    //Bypassing lazy 'OR' evaluation
    bool a=shift_x(board,opp), b=merge_x(board,opp);
    if(a||b)add_random(board);
}
</code></pre>

<p>It could be more clearly written as:</p>

<pre><code>inline void move_x(Board board, bool opp)
{
    bool move_or_shift = shift_x(board,opp);
    move_or_shift |= merge_x(board,opp);
    if (move_or_shift) {
        add_random(board);
    }
}
</code></pre>

<h2>Think of the user</h2>

<p>There are a few small enhancements that would make the game better.  First is to allow the user to see and savor the high score instead of immediately launching a new game.  Second would be to detect whether any moves are <em>possible</em> rather than waiting for the user to attempt to move before evaluating this.</p>
    </div>