<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you are approximating is
<span class="math-container">$$ \pi =\sum_{m=1}^{\infty}\frac{(-1)^{s(m)}}{m},$$</span>
where <span class="math-container">\$s(m)\$</span> counts the number of appearances of primes of the form <span class="math-container">\$4k+1\$</span> in the prime decomposition of <span class="math-container">\$m\$</span>, compare </p>

<ul>
<li><a href="https://math.stackexchange.com/q/434313/42969">How can we prove <span class="math-container">\$\pi =1+\frac{1}{2}+\frac{1}{3}+\frac{1}{4}-\frac{1}{5}+\frac{1}{6}+\frac{1}{7}+\cdots\,\$</span>?</a></li>
</ul>

<p>on Mathematics Stack Exchange.</p>

<p>The computation of the factor <span class="math-container">\$ (-1)^{s(m)} \$</span> can be done more efficiently: Instead of creating a list of all prime factors of <span class="math-container">\$m \$</span>, then filtering the list for prime factors of the form <span class="math-container">\$4k+1\$</span>, and finally counting the filtered list, you can compute the sign while factoring the number:</p>

<pre><code>def sign_for_pi_series(n):
    """ Returns sign for 1/n in the pi series.

    The sign is -1 if n has an odd number of prime factors of the form 4k+1,
    and +1 otherwise.
    """
    s = 1
    i = 2
    while i * i &lt;= n:
        if n % i:
            i += 1
        else:
            n //= i
            if i % 4 == 1:
                s = -s
    if n &gt; 1 and n % 4 == 1:
        s = -s
    return s
</code></pre>

<p>The summation then simplifies to</p>

<pre><code>sum_pi = sum(D(sign_for_pi_series(x))/D(x) for x in range(1, iters + 1))
print(sum_pi)
</code></pre>
    </div>