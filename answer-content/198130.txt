<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Pool your connections</h2>

<p>To set up a DB connection is usually <strong>very</strong> expensive, relative to the other tasks your application does:<br>
The steps which are necessary to get a connection go right through:  </p>

<ul>
<li>your application </li>
<li>the JDBC Driver </li>
<li>your application's JVM </li>
<li>the network stack on the application machine </li>
<li>the network</li>
<li>the network stack on the DB machine </li>
<li>the DB's authentication mechanism, checking roles and grants etc.</li>
</ul>

<p>.. the acquired connection is then passed back through the same channels</p>

<p>If you do this for every Statement you would like to run on the DB, your application will spend most of its time waiting for connections to be established (and torn down after the Statement).</p>

<p>I would strongly suggest to read up on <em>JDBC connection pooling</em>.
Which pooling library you would like to use depends on your project setup:
Some Application Servers have a JDBC Connection Pool bundled with them.</p>

<p>Two stand alone JDBC connection pools are <a href="https://www.mchange.com/projects/c3p0/" rel="nofollow noreferrer">C3P0</a> and apache common's <a href="https://commons.apache.org/proper/commons-dbcp/" rel="nofollow noreferrer">DBCP</a>:<br>
<a href="https://www.developer.com/java/data/understanding-jdbc-connection-pooling.html" rel="nofollow noreferrer">Example with C3P0</a><br>
<a href="https://examples.javacodegeeks.com/core-java/sql/jdbc-connection-pool-example/" rel="nofollow noreferrer">Example with DBCP</a></p>

<hr>

<p><strong>But more importantly:</strong></p>

<h1>Try not to re-invent the wheel</h1>

<p>Your code is fine as a proof-of-concept / a worked out example of how a JDBC connection works. (Yes, it can be improved, as jrtapsell and J_H show, but as a proof-of-concept it's OK).</p>

<p>The underlying question is more interesting:<br>
<em>Should you write something yourself, which has many excellent solutions already?</em></p>

<p>Let's have a look at what you do:</p>

<ul>
<li><p>You establish a DB Connection (which should be pooled, see above):</p>

<blockquote>
  <p>Connection c = DriverManager.getConnection("jdbc:sqlite:"+DBname);</p>
</blockquote></li>
<li><p>You use this DB Connection to run a query against the DB</p>

<blockquote>
  <p>ResultSet rs = c.createStatement().executeQuery(query);  </p>
</blockquote></li>
<li><p>You create a Java Object / Java Objects from the results of the queries (in your main method)</p></li>
</ul>

<blockquote>
<pre><code>   while(dbo.rs.next()){
     id=dbo.rs.getString("compte_id");
     password=dbo.rs.getString("password");
     ..
     numtelephone=dbo.rs.getString("numtelephone");
   }
</code></pre>
</blockquote>

<p>These are requirements of almost all applications, which have a multitude of well established, stable and convenient solutions.</p>

<p>I suggest, you read up on O/R Mapping (<a href="https://en.wikipedia.org/wiki/Object-relational_mapping" rel="nofollow noreferrer">Wikipedia</a>, <a href="http://hibernate.org/orm/what-is-an-orm/" rel="nofollow noreferrer">hibernate</a>) and a couple of its implementations (e.g. <a href="http://docs.jboss.org/hibernate/orm/5.3/quickstart/html_single/" rel="nofollow noreferrer">Hibernate getting started</a>, <a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html" rel="nofollow noreferrer">JPA</a>, <a href="http://projects.spring.io/spring-data/" rel="nofollow noreferrer">Spring Data</a>)</p>

<p>Of course, which tools and libraries you end up using in your application is up to you, but to my experience, it's better to have someone else make and fix an error than to have to make all errors yourself :-)</p>
    </div>