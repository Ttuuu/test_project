<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There isn't much code to break this down to smaller components but based on the post : </p>

<p><strong><a href="https://reactjs.org/docs/state-and-lifecycle.html" rel="nofollow noreferrer">this.setState()</a> passing an Object or a callback function :</strong></p>

<p>If you want to update the state with a value that's not dependent on the previous one you can do :</p>

<pre><code>this.setState({ key : newValue });
</code></pre>

<p>If you have to update the <code>state</code> based on the previous one, </p>

<pre><code>this.setState(prevState =&gt; ({key: prevState.key + value }));
</code></pre>

<p>see <a href="https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous" rel="nofollow noreferrer">state updates may be asynchronous</a> for more details.</p>

<p>the reason why i mention this is because in <code>componentDidMount()</code> you're passing a callback function to <code>setState</code> when you don't need the the <code>prevState</code>.</p>

<pre><code>componentDidMount() {
  this.setState({ json: getJson() })
}
</code></pre>

<p>In <code>checkAll()</code> you can do one <code>setState()</code> instead of two: </p>

<pre><code>checkAll = () =&gt; {
   this.setState(prevState =&gt; ({
     checked: !prevState.checked,
     json: prevState.json.map(obj =&gt; ({
       ...obj,
       items: obj.items.map(item =&gt; ({
         ...item,
         value: prevState.checked,
       }))
     }))
   }));
};
</code></pre>

<p><strong>Use <a href="https://stackoverflow.com/questions/28889450/when-should-i-use-return-in-es6-arrow-functions">implicit return </a> in the render method :</strong></p>

<p>the <code>render</code> method can use implict returns inthe <code>.map()</code> and you don't really need the <code>i</code>, it can be refactored to :</p>

<pre><code>render() {
  return (
    &lt;div&gt;
      &lt;table&gt;
        &lt;tbody&gt;
          {this.state.json.map(obj =&gt; (
            &lt;tr key={obj.id}&gt;
              {obj.items.map(data =&gt; ( 
                &lt;td key={data.id}&gt; 
                  &lt;p&gt;{data.label}&lt;/p&gt;
                    &lt;input 
                      type="checkbox" 
                      checked={data.value}
                      onChange={this.checkboxHandler}
                    /&gt;
                &lt;/td&gt;)
              )}
            &lt;/tr&gt;)
          )}
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;button onClick={this.checkAll}&gt;check\uncheck&lt;/button&gt;
      &lt;AddRow actualJson={this.state.json}/&gt;
    &lt;/div&gt;
  )
}
</code></pre>
    </div>