<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would suggest folowing:</p>

<p>1) Controller's methods are responsible not only for service call but for request parameter validations. Im <code>getDashBoardData</code> you make validation but what about the other methods.</p>

<p>2) Calling service from service (sample: <code>attendeeService.addAttendee(...)</code> in <code>ConferenceService</code>) is dangerous approach because you can end up in cyclic dependencies. In other words <code>conferenceService</code> depends on <code>attendeeService</code> and <code>attendeeService</code> depends on <code>servicex</code> and <code>servicex</code> depends on <code>conferenceService</code>. Usually it can be solved by extraction common code common logic into dedicated class. So by my ippinion we should not call service from service.</p>

<p>3) Use <a href="https://projectlombok.org/features/all" rel="nofollow noreferrer">lombock</a> library if you can (@Getter, @Setter, @EqualsAndHashCode, @RequiredArgsConstructor). It will make your code clean and highly readable. </p>

<p>4) When you create conference it is good to return at least ID (or created object).</p>

<p>5) Consider to use DTO with mappers (for example <a href="https://mapstruct.org/" rel="nofollow noreferrer">mapstract</a> ). It allows you to separate and control external API and internal implementation.</p>
    </div>