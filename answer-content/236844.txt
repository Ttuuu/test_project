<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li><p>The class "Container" has a property named "Container"? That is... confusing, to say the least. Hence you having to name it <code>item</code> when iterating through it, which is unclear (and thus bad). </p></li>
<li><p>"Cointians" has two typos.</p></li>
<li><p>If you need to have a case insensitive <code>Contains()</code>, there are better ways to do it than use <code>ToUpper()</code>: <a href="https://stackoverflow.com/a/54686459/648075">https://stackoverflow.com/a/54686459/648075</a></p></li>
<li><p>Do not copy-paste logic when it is the same for two cases; instead move it to a method and call it.</p></li>
<li><p>Why is the property Amount a <code>string</code> instead of an <code>int</code>? Your code constantly needs to converts <code>string</code>s to <code>int</code>s and vice versa; why not use the proper types instead and avoid all that?</p></li>
<li><p>Is the Container of a Container always a comma-separated string of two items? Why then not make it a <code>List&lt;string&gt; Names</code>?</p></li>
</ul>

<hr>

<p>Most impotantly: due to the bad names, I have trouble figuring out what your code actually does. </p>

<p>That <code>joinedDisposables</code> is a list of <code>Container</code>s is unclear, and due to "Container" being both the name of a class as well as one of its properties the code becomes even more unclear. </p>

<p>I have the impression that once your <code>Container</code> class has a "proper" structure, much of this code can be replaced by simple LINQ queries; it's just that the bad names and the bad structures obfuscate so much it makes things hard to grasp.</p>

<p>To me it looks like <code>public List&lt;Container&gt; Containers { get; set; }</code> should be a <code>Dictionary&lt;string, int&gt;</code>, and that what you pass to <code>SeperateJoinedDisposables</code> should be a <code>List&lt;string&gt;</code> where each <code>string</code> is a comma separated list. And then your code would be something like this:</p>

<pre><code>Dictionary&lt;string, int&gt; Containers = new Dictionary&lt;string, int&gt;();

private void Parse(List&lt;string&gt; commaSeparatedValues)
{
    foreach (var commaSeparatedValue in commaSeparatedValues)
    {
        foreach (var value in commaSeparatedValue.Split(','))
        {
            var normalisedValue = value.ToLower();

            if (!Containers.TryGetValue(normalisedValue, out int count))
            {
                count = 0;
            }

            count++;
            Containers[normalisedValue] = count;
        }
    }
}
</code></pre>

<p>To me this code expresses far more clearly the intent of what you're trying to do -- if I correctly understand the purpose of your code, of course. </p>

<p>But then I don't know where <code>IEnumerable&lt;Models.Container&gt; joinedDisposables</code> comes from and how it is constructed and why it is constructed that way, so I can only assume a "better" solution based on limited knowledge.</p>
    </div>