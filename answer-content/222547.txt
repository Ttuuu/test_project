<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're coding javascript the "old" way. With <a href="/questions/tagged/es6" class="post-tag" title="show questions tagged 'es6'" rel="tag">es6</a> you have a lot of new features available. Take a look at <a href="http://es6-features.org/#Constants" rel="nofollow noreferrer">them</a>.</p>

<hr>

<p>Don't use self-invoking anonymous functions i.e. IIFEs</p>

<pre><code>/// bad
(function(){
  // code here
})();
</code></pre>

<p>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block" rel="nofollow noreferrer">blocks</a></p>

<pre><code>/// good
{
   // code here
}
</code></pre>

<hr>

<p>Give meaningful names to your variables and methods. Functions should <strong>not</strong> have more than 2 parameters. If they do, you need to put them in an object.</p>

<pre><code>/// bad
... pointsFormsQuadrangle = function(a, b, c, d){}

/// good
static FormsQuadrangle([point1, point2, point3, point4]){

}
</code></pre>

<hr>

<p>Use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer"><code>class</code> syntax</a> instead of <code>function/prototype</code>.</p>

<pre><code>class Utils {
  static NumbersEqual(a, b){
    return Math.abs(a - b) &lt; Number.EPSILON;
  }
}

class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  distance(point) {
    return Math.sqrt((this.x - point.x) ** 2 + (this.y - point.y) ** 2);
  }

  equal(point) {
    return Utils.NumbersEqual(this.x, point.x) &amp;&amp; Utils.NumbersEqual(this.y, point.y);
  }

  static FormsQuadrangle(a, b, c, d) {
    if (a.equal(b) || a.equal(c) || a.equal(d)) return false;

    if (b.equal(c) || b.equal(d)) return false;

    if (c.equal(d)) return false;

    const center = new Point((a.x + b.x + c.x + d.x) / 4, (a.y + b.y + c.y + d.y) / 4);

    const ac = a.distance(center);
    const bc = b.distance(center);
    const cc = c.distance(center);
    const dc = d.distance(center);

    return Utils.NumbersEqual(ac, bc) &amp;&amp; Utils.NumbersEqual(bc, cc) &amp;&amp; Utils.NumbersEqual(cc, dc);
  }

  static FormsSquare(a, b, c, d) {
    if (!Point.FormsQuadrangle(a, b, c, d))
      return false;

    const ab = a.distance(b)
    const ac = a.distance(c);
    const ad = a.distance(d);
    const [tr1, tr2] = [ab, ac, ad].sort((a, b) =&gt; a - b);

    return Utils.NumbersEqual(tr1, tr2);
  }
}
</code></pre>
    </div>