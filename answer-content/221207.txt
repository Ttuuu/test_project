<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The indentation seems to have lost a level for much of the code, which makes it hard to read.  I'm guessing something went wrong when you copied the code into the question, and that your source doesn't really look that bad.</p>
<p>Let's start with the definition of <code>main()</code>.  It's generally better to declare <code>main</code> as a function taking no arguments: <code>int main(void)</code>.</p>
<p>Consider that all I/O may fail.  For this program, it's probably acceptable to ignore output errors, but we really must handle input errors correctly, even if it's as simple as</p>
<pre><code>if (scanf("%d", &amp;length) != 1) {
    fprintf(stderr, "%s:%u: input failed\n", __FILE__, __LINE__);
    return 1;
}
</code></pre>
<p>We can save some repetition by combining reads:</p>
<pre><code>if (scanf("%d%f%d", &amp;length, &amp;speed1, &amp;size) != 3) {
    fprintf(stderr, "%s:%u: input failed\n", __FILE__, __LINE__);
    return 1;
}
</code></pre>
<p>Now we come to reading the other participants' speeds and head starts.  The code currently assumes that there are no more than 7 participants, and relies on fixed size arrays to store them.  But look at the requirements: we get to print them in the same order that we read them, and we don't need to store any of these values after we've printed them, so we can make a much simpler loop:</p>
<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    double length;
    double achilles_speed;
    unsigned int competitor_count;

    if (scanf("%lf%lf%u", &amp;length, &amp;achilles_speed, &amp;competitor_count) != 3) {
        fprintf(stderr, "%s:%u: input failed\n", __FILE__, __LINE__);
        return 1;
    }

    const double achilles_time = length / achilles_speed;
    printf("%.2f\n", achilles_time);

    unsigned int achilles_position = 1; /* start at 1, and increment for each faster competitor */

    for (unsigned int i = 0;  i &lt; competitor_count;  ++i) {
        double head_start, speed;
        if (scanf("%lf%lf", &amp;head_start, &amp;speed) != 2) {
            fprintf(stderr, "%s:%u: input failed\n", __FILE__, __LINE__);
            return 1;
        }

        double time = (length - head_start) / speed;
        printf("%.2f ", time);

        if (time &lt; achilles_time) {
            ++achilles_position;
        }
    }

    printf("\n%u", achilles_position);

    return 0;
}
</code></pre>
<p>That's starting to look a bit simpler, but I've lost the logic that omits the space after the last finisher's time.  One way to change this is to print a character <em>before</em> the time, and change that after the first output:</p>
<pre><code>printf("%.2f", achilles_time);

char sep = '\n';

for (unsigned int i = 0;  i &lt; competitor_count;  ++i) {
    ...
    printf("%c%.2f", sep, time);
    sep = ' ';
    ...
}
</code></pre>
<p>Here, we start by printing the newline that ends Achilles' time line on the first iteration, but change that to a space for the subsequent iterations.</p>
<hr>
<h1>Complete modified code</h1>
<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    double length;
    double achilles_speed;
    unsigned int competitor_count;

    if (scanf("%lf%lf%u", &amp;length, &amp;achilles_speed, &amp;competitor_count) != 3) {
        fprintf(stderr, "%s:%u: input failed\n", __FILE__, __LINE__);
        return 1;
    }

    const double achilles_time = length / achilles_speed;
    printf("%.2f", achilles_time);

    unsigned int achilles_position = 1;
    char sep = '\n';

    for (unsigned int i = 0;  i &lt; competitor_count;  ++i) {
        double head_start, speed;
        if (scanf("%lf%lf", &amp;head_start, &amp;speed) != 2) {
            fprintf(stderr, "%s:%u: input failed\n", __FILE__, __LINE__);
            return 1;
        }

        const double time = (length - head_start) / speed;
        printf("%c%.2f", sep, time);
        sep = ' ';

        achilles_position += time &lt; achilles_time;
    }

    printf("\n%u", achilles_position);
}
</code></pre>
    </div>