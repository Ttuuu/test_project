<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Javascript Feedback</h1>

<p>Because the request is for "<em>any way to make my code more concise</em>" the feedback below focuses on simplifying the code while maintaining existing functionality. </p>

<h3>Constants</h3>

<p>It may be wise to put all of the configuration values at the top. If they are truly constant then some would say the names should be in all capital letters. There are various opinions on how true constants should be defined - for example, see answers to <a href="https://codereview.stackexchange.com/q/52607/120114">Defining constants in JavaScript</a>, as well as style guides like <a href="https://google.github.io/styleguide/jsguide.html#naming-constant-names" rel="nofollow noreferrer">Google JS S.G.</a>, <a href="https://github.com/airbnb/javascript#naming--uppercase" rel="nofollow noreferrer">AirBnB</a>, etc.</p>

<h3>rorated Sine-wave</h3>

<p>The code to generate <code>rotatedSine</code>, declares a non-constant variable, and the arrow function declares a constant <code>rotatedCoords</code> which is immediately returned on the next line. Perhaps you prefer the readability of this - knowing exactly what is returned. And was <code>var</code> used because of the call to <code>.pop()</code> later on? If so, <code>const</code> could have been used since <code>.pop()</code> doesn't reassign the value - it merely mutates it. </p>

<blockquote>
<pre><code>var rotatedSine = sineWave.map( d =&gt; {
  const rotatedCoords = rotate(0, 0, d[0], d[1], radius)
  return rotatedCoords
})
</code></pre>
</blockquote>

<p>That mapping function could be simplified - perhaps giving the mapping function a name like <code>getRotatedCoords</code></p>

<pre><code>const getRotatedCoords = d =&gt; rotate(0, 0, d[0], d[1], radius);
</code></pre>

<p>And then that function could be passed to the call to <code>.map()</code>:</p>

<pre><code>const rotatedSine = sineWave.map(getRotatedCoords);
</code></pre>

<p>But because that function isn't used anywhere else, there isn't much need for it to be named. </p>

<pre><code>const rotatedSine = sineWave.map(d =&gt; rotate(0, 0, d[0], d[1], radius));
</code></pre>

<h3>function <code>getSineWave()</code></h3>

<p>This function is only used once so unless you plan on using it more frequently, it could be eliminated by setting <code>sineWave</code> to the mapping of the range:</p>

<pre><code>const sineWave = d3.range(numWaves*numPointsPerWave+1).map(function(k) {
  const x = k * wavelength/numPointsPerWave
  return [x, amplitude * Math.sin(phase + 2 * pi * x/wavelength)];
})
</code></pre>

<p>I also noticed that the original code calls <code>getSineWave()</code> with <code>wavelength</code> passed twice - while this doesn't lead to an error because object destructuring is used, it is superfluous.</p>

<h3>function <code>rotate</code> simplification</h3>

<p>In the function <code>rorate</code>, some of the variables are only used once after their assignment - e.g. <code>sin</code>, <code>cos</code>, <code>nx</code>, <code>ny</code> so that function could be condensed - see the example below. This does however impact readability, since the return statement grows to 82 characters, which many believe is too long for a single line.</p>

<pre><code>const rotate = (cx, cy, x, y, radius) =&gt; {
  const theta = x/radius;
  return [cx + (radius + y) * Math.sin(theta), cy + (radius + y) * Math.cos(theta)];
} 
</code></pre>

<h1>HTML Feedback</h1>

<h3>Un-terminated <code>&lt;svg&gt;</code>tag</h3>

<p>Obviously modern browsers have been able to handle it - the opening <code>&lt;svg&gt;</code> tag is un-terminated:</p>

<blockquote>
<pre><code>&lt;svg width="1000" height="1000" &lt;/ svg&gt;
</code></pre>
</blockquote>

<p>For proper HTML, add a closing angle bracket after the <em>height</em> attribute, and remove the space in the closing tag: </p>

<pre><code>&lt;svg width="1000" height="1000"&gt; &lt;/svg&gt;
</code></pre>

<h2>Simplified code</h2>

<p>The snippet below contains JS code that contains ~23% fewer lines.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>//ACTUAL CONSTANTS
const pi = Math.PI
const radius = 63.66
const numWaves = 4
const amplitude = 10
const phase = pi/2
const circumference = 2 * pi * radius
const wavelength = circumference / numWaves
const numPointsPerWave = 4

const svg = d3.select('svg');
const margin = { top: 50, right: 50, bottom: 50, left: 50 };
const width = +svg.attr('width') - margin.left - margin.right;
const height = +svg.attr('height') - margin.top - margin.bottom;

// content area of your visualization
const vis = svg
.append('g')
.attr('transform', `translate(${margin.left+width/2},${margin.top+height/2})`);

// show area inside of margins
const rect = vis
.append('rect')
.attr('class', 'content')
.attr('width', width)
.attr('height', height)
.attr('transform', `translate(${-width/2},${-height/2})`);

// show scales
const xScale = d3
.scaleLinear()
.domain([-100, 100])
.range([-width/2, width/2]);
const yScale = d3
.scaleLinear()
.domain([100, -100])
.range([-height/2, height/2]);
vis.append('g').call(d3.axisTop(xScale));
vis.append('g').call(d3.axisLeft(yScale));

// draw circle
const circle = vis
.append('circle')
.style('stroke-dasharray', '3, 3')
.style('stroke', 'black')
.style("fill", "transparent")
.attr("r", xScale(radius))
.attr("cx", 0)
.attr("cy", 0)

// tranform a coordinate from linear space to circular space
const rotate = (cx, cy, x, y, radius) =&gt; {
  const theta = x/radius;
  return [cx + (radius + y) * Math.sin(theta), cy + (radius + y) * Math.cos(theta)];
}

// generate sine wave
const sineWave = d3.range(numWaves*numPointsPerWave+1).map(function(k) {
    const x = k * wavelength/numPointsPerWave
    return [x, amplitude * Math.sin(phase + 2 * pi * x/wavelength)];
})

const rotatedSine = sineWave.map( d =&gt; rotate(0, 0, d[0], d[1], radius));
// remove the last point as it would overlap the first point of the circle
rotatedSine.pop() 

// get Path commands for given coordinates
const getPath = d3.line()
.x(d =&gt; xScale(d[0]))
.y(d =&gt; yScale(d[1]))
.curve(d3.curveCardinalClosed) 

// draw sine wave going around a circle
const wave = vis
.append('path')
.attr('d', getPath(rotatedSine))
.attr('fill', 'none')
.attr('stroke', 'black')
.attr('stroke-width', '1px')</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>svg {
    background-color: steelblue;
}
 
.content {
    fill: lightsteelblue;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://d3js.org/d3.v4.js"&gt;&lt;/script&gt;
&lt;svg width="1000" height="1000"&gt;&lt;/svg&gt;</code></pre>
</div>
</div>

    </div>