<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review! This is a nice first question. Here are a few comments:</p>

<ul>
<li><p>Documenting your code is nice. Comments are an OK way to do it, but one hard part of documentation is already obvious in your first comment:</p>

<pre><code># dict with all python practice options
options = ["Code Review", ...]
</code></pre>

<p>Keeping code and documentation in line is hard. You say it is a <code>dict</code>, but it is actually a <code>list</code>.</p>

<p>For some of your other comments, you should take a look at <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer">PEP257</a>, the description of the <code>docstring</code>. This allows you to set a documentation string which can be interactively retrieved using <code>help(...)</code> and which is picked up by many automatic documentation tools. For your function <code>practice_choice</code> this could be as simple as moving the comment inside:</p>

<pre><code>def practice_choice():
    """Prompts user what type of practice they would like to do. User enters int."""
    ...
</code></pre></li>
<li><p>The standard library is your friend. It has many built-in functions and many more helpful modules. It never hurts trying to learn as many of them as possible.</p>

<p>Instead of </p>

<pre><code>num = 1
for option in options:
    print(str(num) + ". " + option)
    num += 1
</code></pre>

<p>You can write:</p>

<pre><code>for num, option in enumerate(options, 1):
    print(f"{num}. {option}")
</code></pre>

<p>This uses <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a> (using the optional second argument to start at one) and the new (Python 3.7+) <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer"><code>f-string</code></a>.</p>

<p>Similarly, when the file is newly created, you have to create empty lists so that later the calls to <code>data.append</code> don't fail. Instead you could use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a>, which is also in the standard library:</p>

<pre><code>from collections import defaultdict

data = defaultdict(list)
</code></pre>

<p>This will call the given constructor, here <code>list</code>, whenever a key does not yet exist, giving you an empty list.</p></li>
<li><p>If you are writing an interactive program, it pays off to define a generic enough function to handle user input. Common features you want is type adherence, allowed values, ranges, or even generic validator functions, and prompting the user until a valid input is given. This is how such a function could look like in your case:</p>

<pre><code>def ask_user(message, type_=str, valid=None):
    while True:
        user_input = input(message)
        try:
            user_input = type_(user_input)
        except ValueError:
            print(f"Wrong type, expected {type_}")
            continue
        if valid is not None:
            if callable(valid) and valid(user_input):
                return user_input
            elif user_input in valid:
                return user_input
            print("Invalid input.")
</code></pre>

<p>This can be used in many places in your code:</p>

<pre><code>selection = ask_user("\nPick a number: ", int, range(1, len(options) + 1))

msg = "\n".join(f"{num}. {option}" for num, option in enumerate(options, 1))
choice = options[ask_user(msg, int, range(1, len(options) + 1)) - 1]

ask_user("Hit Enter to begin practice...", valid="")

pause_or_stop = ask_user("Hit Enter to stop or space to pause...", valid=" ")    # or `valid=["", " "]`, but `"" in " "` returns True
</code></pre></li>
<li><p>Try to separate your functions that do something from input and output. You have the core functionality of the function, a pausable timer, and then you have taking notes associated with it, saving it to a file, adding metadata. I would put these things in separate functions.</p>

<p>Along with that, you should put your main code under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a>, to allow importing from this file without executing the code.</p>

<p>Here is one way to do it. This is a pausable timer as a generator that <code>yield</code>s the beginning and end of every section</p>

<pre><code>def timer():
    start = datetime.now()
    print("Timer started")
    while True:
        user_input = ask_user("Hit Enter to stop or space to pause...", valid=" ")
        yield start, datetime.now()
        if user_input != " ":
            return
        if ask_user("Hit Enter to resume, anything else to abort", valid=" ") == "":
            start = datetime.now()
        else:
            return
</code></pre>

<p>Which can be used like this:</p>

<pre><code>for t0, t1 in timer():
    total_mins = int((t1 - t0).total_seconds() // 60)
    ...
</code></pre>

<p>The whole <code>main</code> function could then be:</p>

<pre><code>def main():
    options = ["Code Review",
               "Project",
               "Puzzles (Project Euler, Finxter, kaggle)",
               "Courses, Books, or Videos",
               "Read Docs"]
    choice = practice_choice(options)
    notes = input("Enter notes... ")

    file_name = "practice_log.json"
    if os.path.isfile(file_name):
        with open(file_name) as f:
            data = defaultdict(list, json.loads(f))
    else:
        data = defaultdict(list)

    for t0, t1 in timer():
        total_mins = int((t1 - t0).total_seconds() // 60)
        print(f"Worked on {choice} for {total_mins} minutes")
        data[choice].append({'day': t1.strftime("%A"),
                             'date': t1.strftime("%m-%d-%y"),
                             'time': t1.strftime("%H:%M"),
                             'notes': notes,
                             'minutes': total_mins})
        with open(file_name, 'w') as json_file:
            json.dump(dict(data), json_file, indent=4)

if __name__ == "__main__":
    while True:
        main()
</code></pre>

<p>Note that <code>practice_choice</code> now takes the options as an argument. I also made the main program repeat, in case you want to start the next timer immediately.</p>

<p>I used <code>os.path.isfile</code> instead of <code>os.path.exists</code>, because the latter is also true for directories. I don't know why you would <em>want</em> to create a directory called <code>"practice_log.json"</code>, but it can happen accidentally and then your code would crash.</p></li>
<li><p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>. Your code follows it almost everywhere, but the one place it doesn't is where the standard library also doesn't.</p>

<p>You imported it <code>as Datetime</code>, PEP8 would recommend <code>DateTime</code>, but it is just called <code>datetime</code>. I would either use the name it is given (which happened before the naming convention existed AFAIK), or use the fully PEP8 compliant name.</p></li>
</ul>
    </div>