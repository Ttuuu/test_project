<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Multi-part answer: [0) these preliminaries] 1) review of code presented 2) hints for improvement excluding <em>personal</em>, from <em>programming</em> over <em>python</em> and <em>accepting a programming challenge</em> to <em>k-sum</em> and <em>leetcode 3Sum</em>.</p>

<p>One general principle to follow is <em>do as expected</em>, in programming, it has been formulated in many guises, including <a href="https://en.m.wikipedia.org/wiki/Principle_of_least_astonishment#Formulation" rel="nofollow noreferrer">Principle of Least Surprise</a>. Every other route leaves you under pressure to justify, at risk of being misunderstood.  </p>

<p>In coding, <em>document, in the program source code</em>:<br>
What is "everything" there for?  </p>

<p>Such rules often have been gathered into <em>guide lines</em>, for Python, follow the <a href="https://www.python.org/dev/peps/pep-0008/#contents" rel="nofollow noreferrer">Style Guide for Python Code</a>.</p>

<hr>

<ul>
<li>Instead of a <a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="nofollow noreferrer">docstring</a>, your module starts with imports - most of them unused.</li>
<li><em>If your code</em> mentioned <em>leetcode</em>, the presentation of a <code>class Solution</code> with just one function definition wouldn't beg justification.</li>
<li>the definition of <code>threeSum()</code> shows (a cute addition of <code>target</code>&amp;default and) a curious mix of leetcode's templates for Python 2&amp;3, lacking a proper docstring</li>
<li>comparing "the int" <code>target</code> to the list literal <code>[0, 0, 0]</code> is dangerous given Python's zeal to allow operations: do you know by heart when that evaluates to <code>True</code>?<br>
(Do you expect most every reader of your code to?)<br>
(Belatedly, it occurred to me that you may have intended to compare <code>nums</code> to <code>[0, 0, 0]</code> - bogus if <code>target != 0</code>)</li>
<li>verbosity - 
you can denote a tuple containing a single literal list like <code>([v, v, v],)</code></li>
<li>2nd early out:<br>
with only one key→value in the <em>dict</em>, there's no need to access it:<br>
<em>every</em> key will equal <code>nums[0]</code><br>
You need to check for <code>3*nums[0] != target</code></li>
<li>naming (Not your fault: <code>Solution</code> and <code>threeSum</code> are substandard.<br>
<code>nums</code>/_1-3 don't <em>feel</em> bad enough to change):<br>
- <code>target</code>, <code>triplets</code>, <code>sub_target</code>: right on!<br>
- given Python's "duck typing", I'd stick with <code>triplets</code> (, never introducing <code>triplets_set</code>)<br>
- <code>lookup</code> is a horrible name → <code>value_to_index</code> (or, in a suitably small context, just <code>index</code>)<br>
(- there's one thing wrong with <code>k</code>: it gets in the way when extending three_sum() to k_sum()…)</li>
<li><em>pythonic</em> or not (or exploiting library functions, rather?):<br>
<code>value_to_index = { value: index for index, value in enumerate(nums) }</code><br>
(same for <code>for i, num_1 in enumerate(nums)</code>, <code>for j, num_2 in enumerate(nums[i+1:], i+1)</code>)</li>
<li>commenting<br>
- you <em>did</em> comment, and I find half of the comments helpful<br>
- I don't get <code>#overwrite from the high</code> (that <em>may</em> just be me)<br>
- <code>#don't reproduce itself</code>: probably <code>use any element/index once, at most</code> rather than <code>don't repeat an element/index</code><br>
- you did <em>not</em> comment the outer for loop, arguably the most profitable place:<br>
<em>how</em> is what the execution constructs a <em>solution</em>?:<br>
for each value, <code>value_to_index</code> keeps just the last index: how does this <em>not</em> prevent any valid triple to show up in the solution?</li>
<li>checking <code>k</code>: <em>nice</em>!<br>
(I'd go for <code>in (None, i, j)</code>)</li>
<li><p>you don't provide a "tinker harness"</p>

<pre><code>if __name__ == '__main__':
    object_disoriented = Solution()
    print(object_disoriented.threeSum([-1, 0, 1, 2, -1, -4]))
    print(object_disoriented.threeSum([1, 1, 1], 3))
</code></pre></li>
</ul>

<hr>

<p>(Something else to follow is <em>make (judicious) use of every help you can</em>: if you use an IDE supporting Python, chances are it can help you with PEP8.)
(Running low on steam, this part will start more frugal than expected.)</p>

<p><em>Real Programming</em> is the creation of a language that simplifies the solution of the problem at hand.</p>

<p>With Python providing most <em>mechanisms</em> needed in programming challenges, that leaves:</p>

<ul>
<li>Code readably.  </li>
<li>Create elements easy to use correctly.</li>
</ul>

<p>I bickered you some about <em>having a consistent problem description</em>.<br>
This is another place where <a href="http://pythontesting.net/agile/test-first-programming/" rel="nofollow noreferrer">Test First</a> shines:<br>
As long as you find yourself not knowing what to test, you are not in a position to implement anything, yet. (Inconsistencies in specification tend to stand out in test design &amp; implementation.)</p>

<p><em>Programming challenges</em> à la leetcode.com typically build on simpler challenges - you met 2sum, which puts you in a favourable position to tackle 3sum.<br>
The performance part of these challenges is about not doing things over, not discarding knowledge more often than about algebraic insight.</p>

<p>The generic solution to 2sum is to take values and <em>find the complement</em> (1sum?).<br>
The extension to <em>k</em>-sum is to split <em>k</em> into smaller numbers.</p>

<p>Ways to have information about the order of a set or sequence (say, <em>elements</em>) of instances of a type with ordering reusable is to have them ordered (<code>ordered = sorted(elements)</code>) or sorted (<code>histogram = Counter(elements)</code>).<br>
For 2sum, you could search for <code>target/2</code> and work inside-out.<br>
For 3sum, one value will be no greater, another no smaller than both others. The third one will not "lie outside" the former two.</p>
    </div>