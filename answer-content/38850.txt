<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use <a href="http://whitemagicsoftware.com/encapsulation.pdf" rel="nofollow noreferrer">self-encapsulation</a>, which will help apply the Open-Closed Principle.</p>

<h1>Studentenverwaltung.java</h1>

<p>Use an IDE that will automatically import classes explicitly. Future maintainers should not have to guess what classes are imported:</p>

<pre><code>import javax.swing.*;
import java.awt.*;
</code></pre>

<p>Avoid the <code>.*</code>.</p>

<h1>LoginController.java</h1>

<p>The LoginController has no purpose. An <em>object-oriented</em> class must have both behaviour and attributes. Moreover, classes should be defined first in terms of behaviour.</p>

<p>Typically this means asking, "What does the LoginController do?" Then define those responsibilities as methods. Attributes (data) are a secondary consideration. This is more evident after reading "<a href="http://pragprog.com/articles/tell-dont-ask" rel="nofollow noreferrer">Tell, Don't Ask</a>."</p>

<h1>User.java</h1>

<p>A few issues:</p>

<ul>
<li>Classes should be as generic as possible</li>
<li>Passwords should not be stored in plaintext</li>
<li>Password verification might be the LoginController's responsibility</li>
</ul>

<p>A generic User, for example, would not have the following attributes:</p>

<pre><code>private String password;
private String degreeProgram;
private boolean isLeaderOfDegreeProgram;
private String course;
</code></pre>

<p>Using a single role imposes an arbitrary limit without necessity. If the User can have multiple roles, then one of those roles can be "Degree Program Leader".</p>

<p>At the very least the password should be <a href="https://stackoverflow.com/a/2861125/59087">hashed</a>.</p>

<h1>LoginView.java</h1>

<p>Stylistically, most of the references to <code>this.</code> are superfluous:</p>

<pre><code>this.setContentPane(contentPane);
this.setModal(true);
this.getRootPane().setDefaultButton(btnLogin);
</code></pre>

<p>The following seems overly verbose:</p>

<pre><code>LoginView.this.onLogin();
</code></pre>

<p>I think it can be:</p>

<pre><code>onLogin();
</code></pre>

<h1>StudentView.java</h1>

<p>There is some duplication between LoginView and StudentView that can be abstracted:</p>

<pre><code>public JPanel contentPane;
private JTextField txtId;
private JTextField txtPassword;
private User user;
</code></pre>

<p>These can be in a generic "View" superclass that contains elements common to both. Or perhaps they can be in a common class that is included by both.</p>

<p>Make all variables private. No exceptions.</p>

<h1>StudentView.java</h1>

<p>Avoid hardcoding text:</p>

<pre><code>    this.lblWelcome.setText("Herzlich Willkommen, " + this.user.getFirstName() + " " + this.user.getLastName());
</code></pre>

<p>Use a <a href="http://docs.oracle.com/javase/tutorial/i18n/format/messageFormat.html" rel="nofollow noreferrer">ResourceBundle</a> for compound messages.</p>
    </div>