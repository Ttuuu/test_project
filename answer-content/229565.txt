<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I started reviewing this last night, and got way off track from what you need. You've been clear that this is hobbyist code that already works; the only reason you're hear asking how to improve it is (I guess) so it'll be easier for you to resume work on a year from now.</p>

<h2>First, some responses to your actual code:</h2>

<ul>
<li>Breaking your code up into functions is often good, even if the function is only used once. This <em>can</em> make things more verbose, but it's worth it if it helps us understand the flow of the code, or helps us consider pieces of it in isolation. </li>
<li>It's my opinion that strong <a href="https://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5">type signatures</a> are always a good idea. They clarify what you code does, and unlike a comment they can't be wrong.</li>
<li>The example log file has less than a thousand lines. For a small enough file, it will make sense to read the whole thing into a list of strings before trying to work with it. It's more performant to work with streams than lists, but realizing that performance benefit here would be hard because we have to hold all the <em>data</em> from the first n-1 sections in memory until we get to the last section. <strong>Until you start having performance problems, load all your data right at the beginning.</strong></li>
<li><a href="https://python-3-patterns-idioms-test.readthedocs.io/en/latest/Comprehensions.html" rel="nofollow noreferrer">List comprehensions</a> are wonderful and cover all the basic python data structures. That said, in order for them to work for this situation you'll need some <a href="https://docs.python.org/3/library/itertools.html#module-itertools" rel="nofollow noreferrer">helper functions</a>.</li>
<li>You're writing this as a CLI tool. Using the <a href="https://www.guru99.com/learn-python-main-function-with-examples-understand-main.html" rel="nofollow noreferrer">main-function pattern</a> will make the code easier to play with in other contexts.</li>
</ul>

<h2>What I wrote last night:</h2>

<pre class="lang-py prettyprint-override"><code>import re
import pandas as pd
import os
import sys
from itertools import chain, dropwhile, groupby
from typing import *

def read_lines(file_name:str) -&gt; Iterable[str]:
    with open(file_name, 'r') as f: # This is generally preferable to closing the file manually.
        return [line.strip() for line in f]

def parse_lines(lines: Iterable[str]) -&gt; Dict[int, Dict[str, float]]:
    runs = [
        run
        for run
        in map(lambda g: list(g[1]), groupby(lines, bool))
        # filter out the headers, footers, and empty lines:
        if any(l.startswith('.step') or l.startswith('Measurement:') for l in run)
    ]
    steps = {
        step_number: read_step(line)
        for (step_number, line)
        in enumerate(
            dropwhile(lambda l: not l.startswith('.step'),
                      runs[0]),
            1)
    }
    metrics = {
        read_measurment_key(measurment_batch[0]): {
            int(step_number): float(measurement)
            for [step_number, measurement]
            in map(lambda m: m.split()[0:2], measurment_batch[2:])
        }
        for measurment_batch in runs[1:]
    }
    return {
        step_number: dict(chain(
            step.items(),
            (
                (measurment_key, measurments[step_number])
                for (measurment_key, measurments)
                in metrics.items()
            )
        ))
        for (step_number, step) in steps.items()
    }

def read_step(line: str) -&gt; Dict[str, float]:
    match = re.match(r'\.step (.*)', line) # For performance we could compile the regex.
    return {
        key: float(value)
        for [key, value]
        in map(
            lambda parameter: parameter.split('='),
            match.group(1).split()
        )
    }

def read_measurment_key(line: str) -&gt; str:
    match = re.match(r'Measurement: (.*)', line) # For performance we could compile the regex.
    return match.group(1)

def main():
    logfilename = 'loss.log' # Or read the argument as you did.
    csvfilename = os.path.splitext(logfilename)[0] + '.csv'

    log_file_lines = read_lines(logfilename)
    data = parse_lines(log_file_lines)
    frame = pd.DataFrame(
        dict(step = step_number, **values)
        for (step_number, values) in data.items()
    ).set_index('step')

    frame.to_csv(csvfilename)

if __name__== "__main__":
    main()
</code></pre>

<h2>Is that better?</h2>

<p>I don't know.</p>

<ul>
<li>Is it readable to you? It sounds like you probably don't already know most of the syntax used, and there's probably only so much new stuff you'll want to learn for this project.</li>
<li>When you need to update it a year from now, will it be clear what the current <code>runs = [...]</code> section is doing? Will you be able to make the needed changes with minimal trial and error? </li>
<li>Does it actually work? I know it <em>runs</em>, and the output <em>looks</em> the same, but how do we know I didn't introduce some small bug such that 5% of your data is now wrong?</li>
<li>How will it handle bad data? I didn't put in any kind of error detection. </li>
</ul>

<h2>What's good about it?</h2>

<ul>
<li>The use of typed functions will help us be sure the code is doing what we intend it to do. I could actually have taken this further by moving <em>more</em> stuff out into individual functions.</li>
<li>The use of list comprehensions and other "functional programming" styles means that we're never mutating the state of a variable. This also helps us be sure everything is working as intended.</li>
<li>The use of <a href="https://www.geeksforgeeks.org/pure-functions/" rel="nofollow noreferrer">pure functions</a> also helps us be sure everything is working as intended.</li>
<li>Basically every "line" can be read as "build a value", and the nature of those values is clearly (?) indicated by the names of the variables we assigning to or the functions we're returning from.</li>
</ul>
    </div>