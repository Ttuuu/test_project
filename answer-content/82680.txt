<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could get rid of many array lookups, and array copying, to make it more efficient, like this:</p>

<pre><code>function bubble($arr)
{
    $count = count($arr);
    for ($j = 1; $j &lt; $count; $j++)
    {
        $v1 = $arr[0];
        for ($i=1; $i &lt; $count-$j+1; $i++)
        {
            $v2 = $arr[$i];
            if ($v1 &gt; $v2)
            {
                $arr[$i-1] = $v2;
                $arr[$i]   = $v1;
            }
            $v1 = $v2;
        }
    }
    return $arr;
}
</code></pre>

<p>I've tested your code against this and it is 99.9% faster. It is also almost three times as fast as the answer by janos. Why?</p>

<p><strong>Function calls and call stack</strong></p>

<p>Each time a function is called the function parameters are pushed onto the call stack and before the code within the function can be executed these parameters have to be retrieved from the call stack. This takes time. (see: <a href="https://en.wikipedia.org/wiki/Call_stack#Description" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Call_stack#Description</a>) By not using an extra <code>swap()</code> function we save the time otherwise spent manipulating the call stack.</p>

<p><strong>Array manipulation</strong></p>

<p>Manipulating an array value also takes more time than changing the value of a simple variable. This is because before the array value can be changed it first needs to be located by using a key (also called 'index'). We should therefore try to minimize the amount of array manipulations. </p>

<p>In my code I have done this by storing array values in the local variables <code>$v1</code> and <code>$v2</code>. There are two array lookups, of which only one is in the inner loop, and two array assignments, which are only used when actually needed.</p>
    </div>