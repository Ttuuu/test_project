<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My comments is limited because I know next to nothing about statistics and I admit I don't understand what most of the calculations are supposed to do or how to interpret the results.</p>

<p>That said, you currently use a view which is basically to concatenate a massive string. As it is, it's hard to decode the string. I'd suggest that you create a scalar function or a table to store the template, in a manner akin to this:</p>

<pre><code>$$
RETURN '
SELECT
  ....
  ....
  ....
FROM {{@SchemaName}}.{{@TableName}};';
$$
</code></pre>

<p>That way you eliminate all those <code>||</code> concatenation and can easily generate a well-formatted SQL that's still easy to copy'n'paste for testing outside of the stored procedure. You then simply only need to replace the placeholders with the variable you want to use. </p>

<p>I am not sure what this buys you:</p>

<pre><code>    Select
        *
    From
        stat.__QBUILDER_UNIVARIATE__
    Where 1=1
        And "SchemaName" = stat.f_udf_sql_trans_trim( sch )
        And "TableName" = stat.f_udf_sql_trans_trim( tbl )
</code></pre>

<p>I get that people use the <code>1=1</code> idiom to make it easy to add predicates in the <code>WHERE</code> clause but this isn't dynamic SQL, so you're just adding noise with that predicate. Also I'm not sure what you're intending to accomplish with the function <code>f_udf_sql_trans_trim</code>; it seems to me much more efficient to validate that the parameters <code>sch</code> and <code>tbl</code> in fact exist in the <code>information_schema</code>, so we could just do:</p>

<pre><code>    WHERE "SchemaName" = sch
      AND "TableName" = tbl
      AND EXISTS (
        SELECT NULL
        FROM information_schema.tables AS t
        WHERE t.name = tbl
     ) AND EXISTS (
        SELECT NULL
        FROM information_schema.schemas AS s
        WHERE s.name = sch
     );
</code></pre>

<p>That way you've taken care of all possible special characters. You might want to do this as a separate query so you can short-circuit if the inputs are invalid. </p>

<p>Finally, your SQL formatting is inconsistent. In some places you use UPPERCASE (e.g. <code>INSERT INTO</code>) but in others, you use PascalCase (e.g. <code>Create Table</code>). It makes for too much distraction while reading the code. </p>
    </div>