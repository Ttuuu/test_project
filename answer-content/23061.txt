<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your example accesses the cat through a variable of type <code>Cat</code> and the dog through <code>Dog</code>. This would work, even if both classes did not implement a common interface. Inheritance is not involved.</p>

<p>In order to really demonstrate the usefulness of polymorphism I suggest the following code:</p>

<pre><code>interface IAnimal
{
    string Name { get; set; }
    string Cry();
}

class Dog : IAnimal
{
    public string Name { get; set; }
    public string Cry()
    {
        return "Woof!";
    }
}

class Cat : IAnimal
{
    public string Name { get; set; }
    public string Cry()
    {
        return "Meow!";
    }
}
</code></pre>

<p>And here is a possible test:</p>

<pre><code>static void Main(string[] args)
{
    var animals = new List&lt;IAnimal&gt;();

    animals.Add(new Dog { Name = "Robby" });
    animals.Add(new Dog { Name = "Fify" });
    animals.Add(new Cat { Name = "Mimy" });

    PrintAnimals(animals);

    Console.ReadKey();
}

private static void PrintAnimals(IEnumerable&lt;IAnimal&gt; animals)
{
    foreach (IAnimal animal in animals) {
        Console.WriteLine("Here is {0}: {1}", animal.Name, animal.Cry());
    }
}
</code></pre>

<p>It demonstrates that different types of animals can be treated the same way, but behave differently. This is what polymorphism is about. The word means many (poly) shapes or forms (morph). You can add different types of animals to a collection.</p>

<p>The <code>PrintAnimals</code> method has a parameter of type <code>IEnumerable&lt;IAnimal&gt;</code> allowing you to pass it different types of collections (arrays, lists, linked lists, stacks and many more, as yet another example of polymorphism). It uses a unique <code>Console.WriteLine</code> statement for all types of animals, without even knowing of which type an animal really is. The only thing it knows is, that it implements <code>IAnimal</code>. You could even add new types of animals later, without having to change the <code>PrintAnimals</code> method and it would still work as expected.</p>
    </div>