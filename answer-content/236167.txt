<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Translating your code directly into a one-liner:</p>

<pre><code>s = [-8,3,5,1,3]
target = -5

is_2sum = any(target - s[j] in s[j+1:len(s)] for j in range(len(s)))
print(is_2sum)
</code></pre>

<p>A few notes:</p>

<ul>
<li><p>The loop is now translated into a generator expression: we record whether every difference is present in the remainder of the list and combine this with <code>any</code>, which will check if the resulting list contains a <code>True</code>.</p></li>
<li><p>In particular, note that we do <em>not</em> construct a list by list comprehension inside the call to <code>any</code>. Indeed, by using a generator expression we allow for an early exit as soon as a <code>True</code> value is found, potentially speeding up quite a bit the execution on positive instances.</p></li>
<li><p>Your approach runs in quadratic time. However, this algorithm can be further optimized to run in linear time (see e.g., a similar question on <a href="https://cs.stackexchange.com/a/13586/472">CS.SE</a>).</p></li>
</ul>

<p>If you are fine with a quadratic time algorithm, another alternative is to brute-force every pair. It is straightforward to generalize such an algorithm to k-sum as well. So just for fun, we might also do:</p>

<pre><code>from itertools import combinations 

s = [-8,3,5,1,3]
target = -5

is_2sum = any(sum(p) == target for p in combinations(s, 2))
print(is_2sum)
</code></pre>

<p>As stated, this is not highly scalable, but it should very easy for a beginner to read and to understand (if that matters).</p>
    </div>