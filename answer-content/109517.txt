<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>By having a <code>const string</code> which contains all of your wanted chars, you could do either a simple call to <code>Contains()</code> or check if <code>IndexOf()</code> will return a value <code>&gt; -1</code>.  </p></li>
<li><p>using string concatenation in a loop is mostly a bad idea. Use a <code>StringBuilder</code> instead.  </p></li>
<li><p>omitting braces <code>{}</code> although they are optional for single lined <code>if</code> statements is a bad idea because it makes your code error prone.  </p></li>
</ul>

<p>Implementing the mentioned points will lead to  </p>

<pre><code>private const string allowedCharacters = "numkMGHzVs%-.";
private string RemoveUnwantedChar(string input)
{

    StringBuilder builder = new StringBuilder(input.Length);

    for (int i = 0; i &lt; input.Length; i++)
    {
        if (char.IsDigit(input[i]) || allowedCharacters.Contains(input[i]))
        {
            builder.Append(input[i]);
        }
    }
    return builder.ToString();
}  
</code></pre>

<p>@Caricorc made a good suggestion in the comments  </p>

<blockquote>
  <p>In my opinion <code>allowedCharacters</code> should be an argument to the function to allow reusability.  </p>
</blockquote>

<p>So by passing the <code>allowedCharacters</code> as an optional parameter with an additional check with <code>IsNullOrEmpty()</code>.  </p>

<p>If performance is an issue, you could also pass a <code>HashSet&lt;char&gt;</code> to the method or have an overloaded method like so  </p>

<pre><code>private string RemoveUnwantedChar(string input, string allowedCharacters = "0123456789numkMGHzVs%-.")
{

    if (string.IsNullOrEmpty(allowedCharacters)) { return input; }

    return RemoveUnwantedChar(input, new HashSet&lt;char&gt;(allowedCharacters));

}  
private string RemoveUnwantedChar(string input, HashSet&lt;char&gt; allowedCharacters)
{
    if (allowedCharacters.Count == 0) { return input; }

    StringBuilder builder = new StringBuilder(input.Length);

    for (int i = 0; i &lt; input.Length; i++)
    {
        if (allowedCharacters.Contains(input[i]))
        {
            builder.Append(input[i]);
        }
    }
    return builder.ToString();
}  
</code></pre>

<p>you can reuse it somewhere else.  </p>
    </div>