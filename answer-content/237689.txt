<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>highlight_max</code> function can be simplified a bit by passing the rows to mark as an argument (possibly with a default value), and putting it all into a list comprehension right away:</p>

<pre><code>def highlight_max(column, to_mark):    
    return ['background-color: yellow' if i in to_mark else '' for i in column.index]
</code></pre>

<p>Note that this takes the actual <code>column</code> as input. Yours took the <code>df</code> from the global scope, disregarding the input, which means that all things you did before the <code>apply</code> will probably be ignored.</p>

<p>Use it like this:</p>

<pre><code>ROWS = {634, 636, 638, 640, 642, 644, 648, 649, 650, 651, 656}

if __name__ == "__main__":
    df = pd.read_excel('N:\Temp\filename.xlsx', index_col=False) 
    df.reset_index(drop=True, inplace=True)
    styles = [{'selector': 'th,td',
               'props': [('border-style','solid'), ('border-width','1px')]}]
    html = df.style.set_table_styles(styles)\
             .apply(highlight_max, to_mark=ROWS)\
             .hide_index()\
             .render(index=False)

    with open('N://temp//test.html', 'w') as f:
        f.write(html)
</code></pre>

<p>I also made <code>ROWS</code> a <code>set</code> instead of a <code>list</code> for faster checking of <code>in</code> (not that it matters too much for such a small list, but it will if it gets bigger), used a style that makes the long chain of functions for <code>html</code> easier to read IMO, used the fact that any additional parameters passed to <code>apply</code> are passed along to the function to pass the rows to mark and wrapped the main code under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without it running.</p>
    </div>