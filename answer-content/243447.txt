<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Use lower case for data members. It's fine for VBO, VAO, EBO since they are abbreviations (and you might consider renaming them as well), but change <code>DRAW_MODE</code> and <code>PRIMITIVE_TYPE</code> to lower case.</p></li>
<li><p>Presumably, <code>Vertex</code> is a struct containing just 3 floats for the position. When setting the attributes, you have a single call to set attribute 0. What happens when you expand your <code>Vertex</code> struct to contain normals, color, uv coordinates, tangents, et cetera? Okay, then you can go back into your <code>init</code> function and add those attributes. But what if a certain mesh doesn't contain color data? Since you have hardcoded the attributes, you have no way of changing it without breaking some other meshes.</p></li>
<li><p>You can use <code>vertices.data()</code> instead of <code>&amp;vertices[0]</code>.</p></li>
<li><p>Don't use identifiers beginning with an underscore. <a href="https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">See here</a>.</p></li>
<li><p>Pass the vectors using const reference.</p></li>
<li><p>Consider using <code>std::move</code> if you're not going to be using the vector again.</p></li>
<li><p><code>this</code> is usually omitted by C++ programmers unless one needs to explicitly refer to the current object.</p></li>
<li><p>In <code>draw()</code> you don't need to bind the index buffer again.</p></li>
<li><p>As you mentioned, updating each vertex is horrible tactic. If you have a mesh with 10000 vertices, you will have spent a good part of the time available updating each mesh. Also it might be possible that certain entities share the mesh data (they might be instanced). If you update the data in the mesh, they will all get updated.</p>

<p>Here's a way to change it. Each entity has a handle to a Mesh (or a pointer) and a model matrix. Any update to position or scale or rotation is reflected in a change to the model matrix. Then, when rendering the entity, you bind your mesh's vertex array and pass the model matrix to the shader, which then combines it with the view-projection matrix to render the object. </p>

<p>You can of course do other optimizations, such as instanced rendering.</p></li>
<li><p>You have two duplicate <code>vertices</code> and <code>indices</code> vectors, one inherited from <code>Mesh</code> and other you declare as private. </p></li>
<li><p>Consider using move semantics on objects that you're throwing away after use, such as the <code>Vertex</code> in <code>create_mesh_plane()</code>. </p></li>
</ul>
    </div>