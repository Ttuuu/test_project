<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Most of your inline comments are useless</h2>

<p>I see lots of comments like this:</p>

<pre><code>def login_button():  # Defines login_button
</code></pre>

<p>That comment adds no information. It just adds visual "noise". I recommend removing all comments that simply state what the code does.  Comments should explain <em>why</em>, and only if it's not obvious</p>

<h2>Group your layout code separately from widget creation</h2>

<p>In my experience, grouping all of your layout code together makes the code much easier to read, visualize, and maintain. For example, instead of this:</p>

<pre><code>lbl1 = tk.Label(self, text=" ", fg="white", bg="black")  # Changes colour of label
lbl1.pack()  # Packs the label wherever there's space
lbl2 = tk.Label(self, text=" ", fg="white", bg="black")  # Changes colour of label
lbl2.pack()  # Packs the label wherever there's space
lbl3 = tk.Label(self, text=" ", fg="white", bg="black")  # Changes colour of label
lbl3.pack()  # Packs the label wherever there's space
lbl4 = tk.Label(self, text=" ", fg="white", bg="black")  # Changes colour of label
lbl4.pack()  # Packs the label wherever there's space
</code></pre>

<p>Do it like this:</p>

<pre><code>lbl1 = tk.Label(self, text=" ", fg="white", bg="black")
lbl2 = tk.Label(self, text=" ", fg="white", bg="black")
lbl3 = tk.Label(self, text=" ", fg="white", bg="black")
lbl4 = tk.Label(self, text=" ", fg="white", bg="black")

lbl1.pack()
lbl2.pack()
lbl3.pack()
lbl4.pack()
</code></pre>

<h2>Don't repeat identical code</h2>

<p>There's one section that creates 14 identical labels, and you have two blocks of 14 identical lines of code. In this case it would be much more efficient to use a loop:</p>

<pre><code>labels = []
for i in range(14):
    label = (tk.Label(self, text=" ", fg="white", bg="black")
    label.pack()
    labels.append(label)
</code></pre>

<p>This makes your intention much more clear. Whereas before I had to read every line (well, every other line) to try to determine if the labels are identical or not, with the loop it's immediately obvious that I'm creating fourteen identical labels.</p>

<h2>Use explicit options to <code>pack</code></h2>

<p>I see a lot of code like this:</p>

<pre><code>lbl1.pack()
</code></pre>

<p>I find it to be much easier to understand your code if you add explicit options rather than relying on defaults. This isn't true in all cases, but for things like <code>grid</code> and <code>pack</code> where the defaults aren't always obvious, I find it good to be explicit. It's also good to explicitly spell out the <code>fill</code> and <code>expand</code> options. That way, as a reviewer I can look at the code and know your intention. When you rely on defaults I'm left wondering if you intended to rely on the defaults or if you forgot to fully configure things.</p>

<pre><code>lbl1.pack(side="top", fill="both", expand=False). 
</code></pre>

<h2>Never use <code>sleep</code> in the main thread of a GUI</h2>

<p>You should never use <code>sleep</code> because it does exactly that: it sleeps the entire application. That includes things like screen updates and the ability to respond to events.</p>

<p>Instead, move the code that you want to run after the sleep into a function, and call that function with <code>after</code>.</p>

<p>For example, instead of something like this:</p>

<pre><code>   time.sleep(seconds_to_wait)  # Makes the program wait for however many seconds depending on difficulty
    controller.show_frame("EnterCharacterScreen")  # Displays the "EnterCharacterScreen"
    entry_characters.pack(fill=tk.X, padx=10, pady=10)  # How many pixels to pad widget, vertically/horizontally
    button_submit.pack(fill=tk.X, padx=80, pady=80, side=tk.BOTTOM)
    # How many pixels to pad widget, vertically/horizontally
    entry_characters.focus_set()  # Automatically clicks the entry box
</code></pre>

<p>... do something similar to this:</p>

<pre><code>def callback():
    controller.show_frame("EnterCharacterScreen")
    entry_characters.pack(fill=tk.X, padx=10, pady=10)
    button_submit.pack(fill=tk.X, padx=80, pady=80, side=tk.BOTTOM)
    entry_characters.focus_set()  # Automatically clicks the entry box
self.after(seconds_to_wait*1000, callback)
</code></pre>

<h2>Don't repeat code</h2>

<p>Consider this block of code:</p>

<pre><code>def play_music3():  # Defines play_music3
    pygame.mixer.music.load('Off Limits.wav')  # Loads 'Off Limits.wav') file
    pygame.mixer.music.play(-1)  # Makes the song play infinitely
    pygame.mixer.music.set_volume(0.8)  # Sets the volume (volume can be adjusted from 0-1)

def play_music4():  # Defines play_music4
    pygame.mixer.music.load('Pim Poy.wav')  # Loads 'Pim Poy.wav') file
    pygame.mixer.music.play(-1)  # Makes the song play infinitely
    pygame.mixer.music.set_volume(0.8)  # Sets the volume (volume can be adjusted from 0-1)
</code></pre>

<p>Those two blocks of code (and the others that follow) are virtually identical except for the .wav file to play and the number added to the function name. Sequential numbers on functions are a huge red flag. You should make this function generic, and have it accept a parameter to tell it which sound to play. The parameter can be an integer, but even better would be a string that represents the logical name of the sound (eg: <code>"soundtrack 1"</code>, etc). </p>

<p>For example:</p>

<pre><code>soundtracks = {
    1: 'Pim Poy.wav',
    2: 'Off Limits.wav',
}

def play_soundtrack(music_id):
    pygame.mixer.music.load(soundtracks[music_id]) 
    pygame.mixer.music.play(-1)  
    pygame.mixer.music.set_volume(0.8) 
</code></pre>

<p>With that, when you need to play a sound it would look like this, which I think is much easier to understand:</p>

<pre><code>play_soundtrack(1)
</code></pre>

<p>If the sounds have different settings, you can incorporate all of that into your data structure. For example:</p>

<pre><code>soundtracks = {
    1: {"file": "Pim Poy.wav", "volume": 0.8}
    ...
}
</code></pre>
    </div>