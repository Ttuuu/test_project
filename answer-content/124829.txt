<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can improve the readability of your code, your indentation is great but you have magic numbers and the variable names aren't very clear. You probably wouldn't need comments if your variable names were clear and you had symbolic constants rather than numbers.</p>

<p><strong>Magic Numbers:</strong></p>

<p>You have a lot of raw numbers : 65536, 10u, 128u, 1ul, 2ul ...</p>

<p>For example you can have a symbolic constant CHARACTER_BUFFER_SIZE for 65536. Using the gcc compiler you would write your constant as </p>

<pre><code>#define CHARACTER_BUFFER_SIZE 65536 
</code></pre>

<p>When compiling with g++ you would use</p>

<pre><code>static const CHARACTER_BUFFER_SIZE = 65536;
</code></pre>

<p>this would change the first 2 lines in main to</p>

<pre><code>    char str[CHARACTER_BUFFER_SIZE];
    char bas[CHARACTER_BUFFER_SIZE];
</code></pre>

<p>If you use this number often, it makes it easier to change the value by just changing it where you define the constant. It also makes the code easier to read. The standard for symbolic constants in C and C++ is all caps with '_' between words.</p>

<p><strong>Function Names:</strong>
Underscore in function names is a lot less common than it used to be, Camel Case is more common</p>

<pre><code>next_prime =&gt; nextPrime
prev_prime =&gt; prevPrime
</code></pre>

<p><strong>Variable Names:</strong></p>

<p>The base variable name is almost understandable, but what kind of base, does it provide a starting point for the function, or is it a numeric base like Octal, Hex or Decimal?</p>

<p>It's really not clear from the code what x is.</p>

<p>In main() what are the variables str (almost obvious), bas, n, p, base?</p>

<p><strong>Future Flexibility:</strong></p>

<p>You main could be a little more flexible, currently you can only redirect input and a output, you could use command switches in your to select input and output files as well. In main it is possible to add a couple of FILE * variable to make it a little more general</p>

<pre><code>    FILE *inputFile = stdin;
    FILE *outputFile = stdout;

    while(fscanf(inputFile, "%s %s", str, bas) != EOF) {
        ...
        mpz_out_str(outputFile, 10u, &amp;base);
</code></pre>
    </div>