<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The most valuable feature of quicksort is that it sorts in-place, without a temporary array. The average space complexity quicksort is logarithmic, whereas the one of your solution is linear. The time complexity is also affected by the copying from temporary back to original.</p>

<p>NB: If you can afford a linear temporary, don't use quicksort. Mergesort will win hands down: it doesn't have a worst case, and besides it is stable.</p></li>
<li><p>Choosing middle element for the pivot, while harmless, doesn't avoid the worst case. The performance of the quicksort is affected not by where the pivot is <em>chosen</em>, but by where it <em>lands</em> after partitioning. Worst case arises when they consistently land near the edges of the array.</p></li>
<li><p>I don't see the need to treat <code>left of pivot</code> and <code>right of pivot</code> separately:</p>

<pre><code>Swap the pivot with the first element (`array[0]` now holds the pivot)
Partition the entire [1..length) range in one pass
Swap the `array[0]` (which holds the pivot) with `array[length_small]`.
</code></pre></li>
<li><p>A length of the array should be <code>size_t</code>. There is no guarantee that <code>unsigned int</code> is wide enough to represent a size of a very large array.</p></li>
<li><p>The code before the recursive call implements an important algorithm, namely <code>partition</code> and deserves to be a function of its own. Consider</p>

<pre><code>void quicksort(int *array, size_t length)
{
    if (length &lt;= 1) {
        return;
    }
    size_t partition_point = partition(array, length);
    quicksort(array, partition_point);
    quicksort(array + partition_point + 1, length - partition_point - 1);
}
</code></pre></li>
<li><p>Further down, you may want to implement two improvements:</p>

<ul>
<li><p>Recursion cutoff: when the array becomes small enough, insertion sort performs better</p></li>
<li><p>Tail call elimination (not really necessary, the C compilers are good in it)</p></li>
</ul></li>
</ul>
    </div>