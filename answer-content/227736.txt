<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Issue with Default construction</h2>
<pre><code>try
{
    for (size_t i = 0; i &lt; size; i += 1)
    {
        new (_container + i) T();
    }
}
catch (...)
{
    cleanup();  // This will call the destructor on all members of
                // _container. But if you throw an exception here
                // then not all members will have been constructed.
                //
                // A simple fix.
                // Initializer list sets "_size" to zero 
                // Initializer list sets "_capacity" to size.
                // Then in the loop above simple go
                // for (;_size &lt; _capacity; ++size)
    throw;
}
</code></pre>
<hr>
<h2>Weird Look with Copy Construction</h2>
<p>The copy constructor uses:</p>
<pre><code>emplace_back_internal(std::forward&lt;T&gt;(other._container[_size]));
</code></pre>
<p>This looks like a move operation (<code>std::forward()</code>). The thing that is saving you is that other is <code>const</code> so it does not bind to the rvalue reference. But this makes it look really weird.</p>
<p>I would simply expect:</p>
<pre><code>emplace_back_internal(other._container[_size]);
</code></pre>
<hr>
<h2>Issue with Move construction</h2>
<pre><code>other._size = 0;
other._container = nullptr;
</code></pre>
<p>What about the other capacity?<br>
Is the capacity also now zero?</p>
<p>I normally write this as a swap operation.</p>
<pre><code>Vector&lt;T&gt;::Vector(Vector&lt;T&gt;&amp;&amp; other) noexcept (std::is_nothrow_move_constructible_v&lt;T&gt;)
    :
    _size(0),
    _capacity(0),
    _container(nullptr)
{
    other.swap(*this);
}
</code></pre>
<hr>
<h2>Copy Assignment is old style</h2>
<pre><code>Vector&lt;T&gt;&amp; Vector&lt;T&gt;::operator=(const Vector&lt;T&gt;&amp; other)
{
    if (&amp;other != this)
    {
        Vector&lt;T&gt; tmp(other);
        tmp.swap(*this);
    }
    return *this;
}
</code></pre>
<p>You are pessimizing the normal operation by checking for assignment to self. Your code works with assignment to self. Yes it will be much more expensive for assignment to self <strong>BUT</strong> it is safe and practically never happens in real code. So you are saving time on an operation that basically never happens at the extra cost for an operation that happens all the time (you risk branch predication failure here) plus the cost of actually doing the branch test.</p>
<pre><code>Vector&lt;T&gt;&amp; Vector&lt;T&gt;::operator=(const Vector&lt;T&gt;&amp; other)
{
    Vector&lt;T&gt; tmp(other);
    tmp.swap(*this);
    return *this;
}
</code></pre>
<p>Same with your move operation.</p>
<hr>
<h1>Style Oddities.</h1>
<h2>Increment</h2>
<p>You keep using +=1</p>
<pre><code> _size += 1
</code></pre>
<p>Where I would expect:</p>
<pre><code> ++_size;
</code></pre>
<hr>
    </div>