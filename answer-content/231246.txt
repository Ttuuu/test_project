<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since its multiplication, the largest possible product could only be produced by multiplying the largest numbers in the array. However, negative numbers introduce a problem, as a product of 2 negative numbers with a positive one would end up being positive too. Hence, we need to consider both cases in our solution. I would like to propose the following solution to this problem:</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;

class Solution {
    public int solution(int[] A) 
    {
        Array.Sort(A); // Simple sort of the array
        int len = A.Length;
        int end = A[len - 1] * A[len - 2] * A[len - 3]; // Find the largest product of positive numbers
        int start = A[0] * A[1] * A[len - 1]; // Find the largest product, assuming 2 negative numbers

        return (start &gt; end) ? start : end;
    }
}
</code></pre>

<p>In this code, we first calculate the first case, since the last 3 indices should contain the largest integers in the list, resulting in the highest product. We then calculate the second case, taking the largest number and the 2 smallest ones, which should produce a positive product if the largest number is positive and the 2 smallest are negative. Finally, we take the larger of the 2.</p>
    </div>