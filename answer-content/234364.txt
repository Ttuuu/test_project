<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Be more productive with an auto formatter</strong></p>

<p>Code certainty is hand formatted.  Although it makes for a nice presentation, it is not worth the time versus value - especially when maintenance is concerned.   Use a good auto formatted instead.</p>

<p><strong>Consider <code>restrict</code></strong>`</p>

<p>With functions like <code>alx_llist_remove_node()</code>, consider <code>restrict</code>.  It lets the compiler know the pointed to data does not overlap and thus allows for more optimization opportunities.</p>

<pre><code>// int alx_llist_remove_node(struct Alx_LinkedList *list, struct Alx_LLNode *node);
int alx_llist_remove_node(struct Alx_LinkedList * restrict list, 
    struct Alx_LLNode * restrictnode);
</code></pre>

<p><strong>Consider <code>alx_llist_remove_all(NULL)</code></strong></p>

<p>C allows <code>free(NULL)</code>.  It is a useful idiom that encourages good code clean-up.  Consider re-write to allow <code>alx_llist_remove_all(NULL)</code>.</p>

<p><strong>Negation of error value unclear</strong></p>

<p>I see no advantage of return <code>-ENOMEM;</code> over <code>return ENOMEM;</code>.  IMO, it adds confusion.  If code wants a new error value, then define it <code>#define E_MY_NEW_ERROR (-ENOMEM)</code> or the like.</p>

<p><strong>Consider an <em>apply</em> function</strong></p>

<p>This function is applied to each element of the queue. It is very useful.</p>

<pre><code>int alx_apply(struct Alx_LinkedList *list, int (*f)(void *state, void *data), 
    void *state);
</code></pre>

<p>Tip: If return value is not 0, quite the loop early.  IAC, return the last <code>int</code>. </p>

<p><strong>Opaque structures</strong></p>

<p>I would hide the members of <code>struct  Alx_LLNode, struct  Alx_LinkedList</code> from  outside users.  No need for them to see/use these members.</p>

<p><strong>Unclear need for cast</strong></p>

<p>No mathematical reason for <code>(size_t)</code>.</p>

<pre><code>ptrdiff_t nmemb
...
if ((size_t)nmemb &gt; (SIZE_MAX / size)) goto ovf;
</code></pre>

<p>It is reasonable to assume  <code>PTRDIFF_MAX &lt;= SIZE_MAX</code>, but there is no need to make that assumption and risk truncation.</p>

<p>Either go cast-less</p>

<pre><code>if (nmemb &gt; (SIZE_MAX / size)) goto ovf;
</code></pre>

<p>Or quiet warnings about mis-matched signed/unsigned compare with a type that will not truncate.</p>

<pre><code>if ((uintmax_t)nmemb &gt; (SIZE_MAX / size)) goto ovf;
</code></pre>
    </div>