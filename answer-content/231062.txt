<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Error reporting</h1>

<p>Errors in Python code are better represented by exceptions than by printing. Exceptions are also usually more sensible than returning special values, because the exception does not need to be checked manually. The interpreter will tell you quite clearly if you forgot to think about one ...</p>

<p>So you might change your code from</p>

<blockquote>
<pre><code>print("wrong length passed %d!!" % (len(s)))
return None
</code></pre>
</blockquote>

<p>to</p>

<pre><code>raise ValueError("Wrong length passed! Found {} expected 4".format(len(s))
</code></pre>

<p>Similarly, <code>raise ArithmeticError("Division by 0!")</code> could be used in <code>get_all_params()</code>.</p>

<h1>Interpreting binary data</h1>

<p>Quick note: since you are working with binary data here, it won't hurt to explicitely tell Python to open the file in binary mode <code>with open(self.file_name, "rb") as file_:</code> (also note that I changed <code>file</code> to <code>file_</code> since <code>file</code> <a href="https://stackoverflow.com/a/22864250/5682996">is/was a builtin in Python 2</a>).</p>

<p>The current pipeline (bytes → hex → reverse hex → two's complement → int) is presumably more complicated than necessary. If you happen to be able to use Python 3, <a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow noreferrer"><code>int.from_bytes(...)</code></a> is IMHO the easiest option to integrate with your current code. <a href="https://docs.python.org/3/library/struct.html#struct.unpack" rel="nofollow noreferrer"><code>struct.unpack(...)</code></a> (also available in <a href="https://docs.python.org/2/library/struct.html#struct.unpack" rel="nofollow noreferrer">Python 2</a>) is maybe even better, since it can not just read one integer at a time, but the whole struct! Using something like <code>struct.unpack("&lt;Hhhhh, &lt;slice-binary-data-from-file-here)</code> (please verify byte-order before using!) could make a large chunk of your code obsolete. Both can handle different byte-orders and are also able to interpret the signed integers.</p>

<h1>Command-line arguments</h1>

<p><code>optparse</code> is deprecated/will not see updates in favor of <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> both in Python 2 and in Python 3. Since <code>argparse</code> is based on <code>optparse</code>, they are very similar.</p>
    </div>