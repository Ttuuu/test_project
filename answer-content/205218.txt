<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Last things first</h2>

<p>Before I forget about it (because it's peripheral in your code), I'll point out the <code>new StateManager(new MenuState());</code>, which is among the <em>don't</em> of C++. Raw pointers are dangerous! if you don't delete the allocated memory afterwards, you'll leave a leak (and you didn't). So use smart pointers (<code>std::unique_ptr</code> or <code>std::shared_ptr</code>) instead. That's quite an interesting topic, but you'll have to study it for yourself. Or better still, allocate your objects on the stack (<code>State_manager manager;</code>)</p>

<h2>The design</h2>

<blockquote>
  <p><code>manager-&gt;update_state(manager);</code> </p>
</blockquote>

<p>is a bit weird, don't you think? What would it mean to write <code>manager-&gt;update_state(other_manager)</code>? Probably not much. So you could rewrite the <code>update_state</code> method like this:</p>

<pre><code>void update_state() {
    m_current_state-&gt;on_update(this); // instead of current-&gt;on_update(removed_argument)
}
</code></pre>

<p>It's cleaner and completely equivalent. But then you have to write such things as:</p>

<blockquote>
<pre><code>while (exit != 1) {
    manager-&gt;update_state();
}
</code></pre>
</blockquote>

<p>It isn't obvious. Where are the external input taken from? Following the thread, I see that the the <code>state</code> itself is responsible for managing the transition: it will ask user input and control if changing from the current state (i.e itself) to the next state (that it will have to determine too) is feasible. Without saying if it is a good design or not, I wonder whether it is useful in anyway to have a state manager at all. Its only role seems to call <code>on_enter</code> and <code>on_exit</code>, but baking that into the <code>State</code> class isn't difficult since <code>on_enter</code> and <code>on_exit</code> are part of its interface (or you could even dispense with it; just add instructions at the beginning and the end of the <code>update</code> function). It also keeps track of the current state, but a simple <code>current_state</code> variable would do the trick:</p>

<pre><code>std::unique_ptr&lt;State&gt; current_state = std::make_unique&lt;Intro_state&gt;();
while (exit != 1) current_state-&gt;update();
</code></pre>

<p>But then you might also wonder why this <code>exit</code> is outside of the state machine. If there is an intro-state, a game-state</p>

<blockquote>
  <p>At that point I want to take a break and tell you that naming your file with a synonym or a paraphrases for the class it contains is a really bad idea. The <code>Game_state</code> class should be in <code>Game_state.h</code>, not in <code>gaming_state.h</code>, that doesn't make any sense.</p>
</blockquote>

<p>then why isn't there an exit-state? It could do some clean-up, display credits, I don't know. So now we have:</p>

<pre><code>std::unique_ptr&lt;State&gt; current_state = std::make_unique&lt;Intro_state&gt;();
current_state-&gt;update();
</code></pre>

<p>But then the <code>current_state</code> variable itself, and the allocation that goes along with it, are also superfluous. <code>Intro_state().update();</code> would look weird, but what about <code>intro();</code>? So we have a function <code>void intro()</code> that asks if it needs to call <code>void game()</code> or <code>void exit()</code>, and a <code>void game()</code> that asks if it needs to call <code>void intro()</code> again or <code>void exit()</code>. The design pattern has disappeared, and yet we haven't removed any functionality or usability feature, only simplified. From that observation I feel I can conclude safely that there is a problem in your design.</p>

<h2>My 3 cents</h2>

<p>Many C++ manuals insist on the object-oriented part of the language and the so-called design patterns. It isn't, IMHO (which, that said, isn't really my own but one taken by most of the prominent figures of the C++ scene), a good way to learn C++. Try rather to explore <a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization" rel="nofollow noreferrer">the robustness</a> of the language or <a href="https://en.wikipedia.org/wiki/Comparison_of_multi-paradigm_programming_languages" rel="nofollow noreferrer">its versatility</a>.</p>
    </div>