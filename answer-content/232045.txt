<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First thing first. Your assumption that a strictly monotonic function always has exactly one root is wrong. For it to be true, the function must not only be monotonic but also continuous on its entire domain (or in other words, it cannot have jump discontinuities, <a href="https://en.wikipedia.org/wiki/Classification_of_discontinuities#Jump_discontinuity" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Classification_of_discontinuities#Jump_discontinuity</a>).</p>

<p>EDIT: Actually it must also be defined on all real numbers, or in other words, its domain must be <code>R</code>.<br>
EDIT2: Actually it can be discontinuous, but must not have jump discontinuities.</p>

<p>For example, consider <code>f(x) =&gt; x + (x&lt;0?-1:1)</code>.
This function is strictly monotonic and is defined for any R, but it has a jump discontinuity and it does not have a root.</p>

<p><code>f(x) =&gt; (x &lt; 0 ? x-1 : nan)</code> is strictly monotonic on its entire domain, it is continuous on its entire domain, but its entire domain is not all R and it does not have a root.</p>

<p><code>f(x) =&gt; (x&lt;0 ? x : 2*x)</code> is strictly monotonic on its entire domain, it is not continuous, its entire domain is all R, but it does not have a jump discontinuity, and it has a root. </p>

<p>Now, let's assume that the function being continuous is part of your definition, but you just forgot to mention that.</p>

<p>Another problem I see is that function <code>double findRoot(double,double,double)</code> is accessing the <code>f()</code> function globally.
And since <code>f()</code> is defined as <code>(x) =&gt; x - 10000</code>, the most efficient implementation of the <code>findRoot()</code> function is to simply return constexpr <code>10000</code>.</p>

<p>If you want <code>findRoot()</code> to work over any <code>double (*f)(double)</code> you have to pass the function pointer to the function:</p>

<pre><code>double findRoot(double (*f)(double), double, double, double);
</code></pre>

<p>I'm not going to say much more about your implementation, as @kyrill already said a lot. There is one thing I would object to in that answer though:</p>

<p>I.e. here:</p>

<pre><code>bool shouldMoveLeft(double a, double b)
{
    return (isIncreasing(a, b) &amp;&amp; areBothFuncValuesPositive(a, b))
         ||(isDecreasing(a, b) &amp;&amp; areBothFuncValuesNegative(a, b));
}
</code></pre>

<p>Although it's nice and readable, it's terrible in terms of performance. <code>isIncreasing</code>, <code>areBothFuncValuesPositive</code>, <code>isDecreasing</code> and <code>areBothFuncValuesNegative</code> - all these functions invoke <code>f(a)</code> and <code>f(b)</code> with the same <code>a</code> and <code>b</code>. This means that <code>f(a)</code> is invoked 4 times and returns the same result on each call. Same with <code>f(b)</code>. Because <code>f</code> is an arbitrary function, it can be arbitrarily complex. And invoking it four times to get one result is four times less performant than it could be. And <code>shouldMoveLeft</code> is just one instance of this problem. Other functions have the same problem.</p>

<p>And one more point to make, although I haven't really investigated the consequences, but I just feel like there might be some.
There can be functions which although strictly monotonic, change so slowly that ẟy is incredibly small even for a big ẟx.
For example, <code>(x) =&gt; x/lot</code> where <code>lot</code> is a very big number.
I leave that for you to find out what consequences it might have.</p>

<p>EDIT3: actually the opposite (very small ẟx yields large ẟy) could also cause some problems, e.g. <code>(x) =&gt; lot * x</code>.</p>
    </div>