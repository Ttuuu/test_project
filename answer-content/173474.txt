<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm afraid your sorting is in vain because the <a href="https://msdn.microsoft.com/en-us/library/xfhwa508.aspx" rel="noreferrer">normal dictionary</a> does not guarantee that the items will be enumerated in the same order as you added them:</p>

<blockquote>
  <p>For purposes of enumeration, each item in the dictionary is treated as a <code>KeyValuePair&lt;TKey,â€‚TValue&gt;</code> structure representing a value and its key. <strong>The order in which the items are returned is undefined.</strong></p>
</blockquote>

<p>If they are, then this is a pure coincidence. </p>

<p>You'll be safe if you use the <a href="https://msdn.microsoft.com/en-us/library/f7fta44c" rel="noreferrer">SortedDictionary</a> instead which:</p>

<blockquote>
  <p>Represents a collection of key/value pairs that are sorted on the key.</p>
</blockquote>

<hr>

<p>If we assume for a moment that a <code>Dictionary&lt;TKey, TValue&gt;</code> can be sorted the way you do it then it can be also achieved with a simple LINQ query:</p>

<pre><code>private Dictionary&lt;string, string&gt; sortMacroDictionary(Dictionary&lt;string, string&gt; source)
{
    return source.Keys.OrderBy(k =&gt; k).ToDictionary(k =&gt; k, k =&gt; source[k]);    
}
</code></pre>

<p>You first get all keys, order them, then you create a new dictionary based on the new key order. This is virtually the same as what you are doing now but much shorter.</p>

<p>As far as your code is concerned there is no need to check <code>whichDictionary.Count &gt; 0</code> becasue if the dictionary is empty your loops won't run. The same applies to this query.</p>

<p>My advice is to use the <code>SortedDictionary</code>. This dictionary maintains the order the entire time. It <em>sorts itself</em> so to speak, as you add/remove items. You don't have to sort it manually.</p>
    </div>