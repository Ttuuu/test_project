<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Indicate your locals</h2>

<p>Since all of your functions are in the same translation unit, make them <code>static</code>.</p>

<h2>Passing by reference</h2>

<p>Some of your <code>mpz_t</code> are explicitly passed by reference, i.e.</p>

<pre><code>void generatePrimes(mpz_t* p, mpz_t* q);
</code></pre>

<p>and some appear initially to be passed by value:</p>

<pre><code>void encrFile(mpz_t e, mpz_t n, mpz_t d, mpz_t c);
</code></pre>

<p>These structures are defined here:</p>

<pre><code>typedef struct
{
  int _mp_alloc;        /* Number of *limbs* allocated and pointed
                   to by the _mp_d field.  */
  int _mp_size;         /* abs(_mp_size) is the number of limbs the
                   last field points to.  If _mp_size is
                   negative this is a negative number.  */
  mp_limb_t *_mp_d;     /* Pointer to the limbs.  */
} __mpz_struct;

typedef __mpz_struct mpz_t[1];
</code></pre>

<p>Confusingly, even if you don't add a <code>*</code>, you will be passing by reference, because <code>mpz_t</code> is defined as an array. As such, you should be dropping the pointer notation everywhere.</p>

<p>You really do need to mark <code>const</code> the pointer arguments that you don't change, especially since everything is being passed by reference.</p>

<h2>Naming arguments</h2>

<p>Function prototypes aren't just to predeclare a function to sort out order dependency. They're also documentation for developers. As such, your unnamed <code>char[]</code> argument here:</p>

<pre><code>void enc(mpz_t* e, mpz_t* n, mpz_t* d, mpz_t* c, char[]);
</code></pre>

<p>needs to be named.</p>

<h2>Variable names</h2>

<p>I realize that many of these variable names are defined by your book, but that doesn't help other developers (or you in the future). At the absolute least, write a comment beside every variable that you declare describing what it is and how it's used. If possible, upgrade variable names from cryptic single letters to actual words.</p>

<h2>Error checking</h2>

<p>All system calls, e.g. to <code>fopen</code>, might fail and need to be checked. This:</p>

<pre><code>FILE *file;
file = fopen("text.txt", "r");
if (file) {
</code></pre>

<p>silently ignores failures to open the file, which is bad. You need to do something meaningful - in this case, perhaps <code>perror("Failed to open crypto file"); exit(1);</code></p>

<h2>Combine declaration and initialization</h2>

<p>This:</p>

<pre><code>FILE *file;
file = fopen("text.txt", "r");
</code></pre>

<p>should be</p>

<pre><code>FILE *file = fopen("text.txt", "r");
</code></pre>

<h2>Avoid overflows</h2>

<p>This segment of code:</p>

<pre><code>char text[80];
FILE *file;
file = fopen("text.txt", "r");
int i = 0;
if (file) {
    while ((x = getc(file)) != EOF) {
        i++;
        putchar(x);
        text[i] = (char) x;
    }

    int r[40];
    for (int i = 0; i &lt; strlen(text); i++) {
        r[i] = (int) text[i];
    }
</code></pre>

<p>is begging for an overflow error in a handful of ways. You have a fixed-length <code>text</code> array to which you write file contents with no length check other than EOF. You also have an <code>r</code> array whose initialization loop ignores its length and relies on <code>strlen</code> - but you haven't null-terminated your <code>text</code> string!</p>

<p>Instead,</p>

<ol>
<li>Get the length of the file.</li>
<li>Don't even bother with initializing a character array; skip to initializing your <code>int</code> array.</li>
<li>Dynamically allocate the array with <code>malloc</code> based on the size of the file.</li>
<li>Read into the array until it's full.</li>
</ol>

<h2>Don't use <code>printf</code> unless you have to</h2>

<p>This:</p>

<pre><code>printf("message as int before encryption  = ");
</code></pre>

<p>doesn't do any formatting, so use <code>puts</code> instead, which is more efficient.</p>

<h2>Make your file I/O functions more flexible</h2>

<p>Don't hardcode the file name <code>text.txt</code>. Instead, accept that as an argument to the function. Get it from user input or a command-line argument.</p>
    </div>