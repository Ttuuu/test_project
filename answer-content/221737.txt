<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Foreword</h2>

<p>There is quite a bit of code here and it has taken a bit of time to process - especially the unit tests. I feel like the thoughts below will be incomplete but if I think of other ideas in the future, I could add those later.</p>

<h2>General Feedback</h2>

<p>I know you have made various versions of this in the past - including <a href="https://codereview.stackexchange.com/q/49231/120114">a jQuery version posted in 2014</a> and this vanilla JS version appears to use <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like the <code>let</code> and <code>const</code> keywords, as well as arrow functions. Did you consider using the ES-6 class syntax?  I know they are really just "<em>primarily syntactical sugar over JavaScript's existing prototype-based inheritance</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">1</a></sup> and "<em>thereâ€™s no way to define private methods, getters and setters</em>"<sup><a href="https://www.sitepoint.com/javascript-private-class-fields/#privateclassfields" rel="nofollow noreferrer">2</a></sup> so perhaps the revealing module pattern is best here for concealing private methods.</p>

<p>The test code is very lengthy and I can't think of any cases not covered, but there may still be other scenarios that should be considered. I don't see any obvious simplifications for that code. </p>

<p>To DRY out some of that code, you could consider throwing the initialization strings in <code>QUnit.test('initialize from dom', ...)</code> for <code>v1</code> through <code>v5</code> into an array and iterating over them. Perhaps something like below would work (*<em>untested</em>):</p>

<pre><code>const initStrings = [
  'count-1', 
  'count-2-upvoted', 
  'count-3-upvoted-starred', 
  'count-4-downvoted',
  'count-5-downvoted-starred', 
];
const adjMethods = ['upvoted', 'downvoted', 'starred'];
initStrings.forEach(initStr =&gt; {
  const voteObj = Upvote.create(initStr);
  const parts = initStr.split('-'); // could also destructure here
  assert.equal(voteObj.count(), parts[1]);
  adjMethods.forEach(adjMethod =&gt; assert.equal(voteObj[adjMethod](), parts.includes(adjMethod))); 
});
</code></pre>

<h2>Targeted Feedback</h2>

<ul>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a></strong> could be used to simplify some <code>for</code> loops - e.g. in <code>Utils.combine()</code>. That way there wouldn't be a need to make a variable like <code>i</code>, increment it, and use it to access each element.</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Property_definitions" rel="nofollow noreferrer"><strong>Shorthand property names</strong></a> - can be used to simplify assignment - e.g. return objects from: </p>

<ul>
<li><code>Model.create()</code> </li>
<li><code>View.create()</code></li>
<li><code>Model</code></li>
<li><code>View</code></li>
</ul>

<p>as well as the <code>defaults</code> object used in <code>Upvote.create()</code></p></li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList" rel="nofollow noreferrer"><code>Element.classList.add()</code></a></strong> could be used instead of manually altering <code>className</code> property and dealing with spaces to separate names in <code>View.create()</code>, and <code>Element.classList.remove()</code> could likely eliminate the need for <code>Utils.removeClass()</code>.</li>
<li><strong>Excess filter loop</strong> - in <code>Utils.removeClass()</code> - simplify to <code>x =&gt; x &amp;&amp; x !== className</code></li>
<li><strong>Repeated <code>Utils.Noop()</code></strong> - appears duplicated within <code>defaults</code> declared in <code>View.create()</code> </li>
<li><p><strong>Excess wrapper function in unit tests</strong> </p>

<blockquote>
<pre><code>const create = (id, params) =&gt; {
  return Upvote.create(id, params);
};
</code></pre>
</blockquote>

<p>could be simplified to:</p>

<pre><code>const create = Upvote.create;
</code></pre>

<p>unless for some reason there is a difference in arguments passed to that function....</p></li>
</ul>

<hr>

<p>It appears that the unit test helper <code>gen()</code> has changed in the github repo since you posted this, but I was curious about the <code>idcount</code> variable in the code above:</p>

<blockquote>
<pre><code>const gen = function() {
  var idcount = 0;
  return (params = {}) =&gt; {
    ++idcount;
    const id = params.id || ('u' + idcount);
</code></pre>
</blockquote>

<p>I considered suggesting that the <code>++idcount</code> get moved into the usage on the line below, where <code>id</code> is assigned. Maybe you always want that incremented whenever the function is called, but that variable doesn't appear to be used anywhere else in that function or elsewhere, which leads me to believe that it could be incremented only when used and it would still work the same.</p>

<hr>

<p>And even though they are "<em>constant variables</em>" declared with <code>const</code>, you might consider using all uppercase numbers for the constant string values, just like you use in Java and other languages - e.g. instead of:</p>

<blockquote>
<pre><code>const upvoteClass = 'upvote';
const enabledClass = 'upvotejs-enabled';
</code></pre>
</blockquote>

<p>use uppercase:</p>

<pre><code>const UPVOTED_CLASS = 'upvote';
const ENABLED_CLASS = 'upvotejs-enabled';
</code></pre>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes</a></sub></p>

<p><sup>2</sup><sub><a href="https://www.sitepoint.com/javascript-private-class-fields/#privateclassfields" rel="nofollow noreferrer">https://www.sitepoint.com/javascript-private-class-fields/#privateclassfields</a></sub></p>
    </div>