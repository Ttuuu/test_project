<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Issues</h3>

<p>Your code fails in the following corner cases:</p>

<ol>
<li><p><code>a</code> and <code>b</code> on the same day, for example:</p>

<pre><code>&gt;&gt;&gt; a = datetime(2012, 11, 22, 8)
&gt;&gt;&gt; a.weekday()
3          # Thursday
&gt;&gt;&gt; seconds_between(a, a + timedelta(seconds = 100))
54100.0    # Expected 100
</code></pre></li>
<li><p><code>a</code> or <code>b</code> at the weekend, for example:</p>

<pre><code>&gt;&gt;&gt; a = datetime(2012, 11, 17, 8)
&gt;&gt;&gt; a.weekday()
5          # Saturday
&gt;&gt;&gt; seconds_between(a, a + timedelta(seconds = 100))
21700.0    # Expected 0
</code></pre></li>
<li><p><code>a</code> after <code>STOP_HOUR</code> or <code>b</code> before <code>START_HOUR</code>, for example:</p>

<pre><code>&gt;&gt;&gt; a = datetime(2012, 11, 19, 23)
&gt;&gt;&gt; a.weekday()
0          # Monday
&gt;&gt;&gt; seconds_between(a, a + timedelta(hours = 2))
28800.0    # Expected 0
</code></pre></li>
</ol>

<p>Also, you count the weekdays by looping over all the days between the start and end of the interval. That means that the computation time is proportional to the size of the interval:</p>

<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; a = datetime(1, 1, 1)
&gt;&gt;&gt; timeit(lambda:seconds_between(a, a + timedelta(days=999999)), number=1)
1.7254137992858887
</code></pre>

<p>For comparison, in this extreme case the revised code below is about 100,000 times faster:</p>

<pre><code>&gt;&gt;&gt; timeit(lambda:office_time_between(a, a + timedelta(days=999999)), number=100000)
1.6366889476776123
</code></pre>

<p>The break even point is about 4 days:</p>

<pre><code>&gt;&gt;&gt; timeit(lambda:seconds_between(a, a + timedelta(days=4)), number=100000)
1.5806620121002197
&gt;&gt;&gt; timeit(lambda:office_time_between(a, a + timedelta(days=4)), number=100000)
1.5950188636779785
</code></pre>

<h3>2. Improvements</h3>

<p><a href="https://codereview.stackexchange.com/a/18899/11728">barracel's answer</a> has two very good ideas, which I adopted:</p>

<ol>
<li><p>compute the sum in seconds rather than days;</p></li>
<li><p>add up whole days and subtract part days if necessary.</p></li>
</ol>

<p>and I made the following additional improvements:</p>

<ol>
<li><p>handle corner cases correctly;</p></li>
<li><p>run in constant time regardless of how far apart <code>a</code> and <code>b</code> are;</p></li>
<li><p>compute the sum as a <code>timedelta</code> object rather than an integer;</p></li>
<li><p>move common code out into functions for clarity;</p></li>
<li><p>docstrings!</p></li>
</ol>

<h3>3. Revised code</h3>

<pre><code>from datetime import datetime, timedelta

def clamp(t, start, end):
    "Return `t` clamped to the range [`start`, `end`]."
    return max(start, min(end, t))

def day_part(t):
    "Return timedelta between midnight and `t`."
    return t - t.replace(hour = 0, minute = 0, second = 0)

def office_time_between(a, b, start = timedelta(hours = 8),
                        stop = timedelta(hours = 17)):
    """
    Return the total office time between `a` and `b` as a timedelta
    object. Office time consists of weekdays from `start` to `stop`
    (default: 08:00 to 17:00).
    """
    zero = timedelta(0)
    assert(zero &lt;= start &lt;= stop &lt;= timedelta(1))
    office_day = stop - start
    days = (b - a).days + 1
    weeks = days // 7
    extra = (max(0, 5 - a.weekday()) + min(5, 1 + b.weekday())) % 5
    weekdays = weeks * 5 + extra
    total = office_day * weekdays
    if a.weekday() &lt; 5:
        total -= clamp(day_part(a) - start, zero, office_day)
    if b.weekday() &lt; 5:
        total -= clamp(stop - day_part(b), zero, office_day)
    return total
</code></pre>
    </div>