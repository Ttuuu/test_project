<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is not a lot to say, the script is fairly simple.</p>

<p>For the date format:</p>

<pre><code>file="${path}/$(date +%F).tar";
</code></pre>

<p>I think I would define a <strong>constant</strong> variable at the top of the code. You might want to change the pattern latter (use something different than <code>YYYY-MM-DD</code>).</p>

<p>This:</p>

<pre><code>$(mkdir -p "$path");
</code></pre>

<p>can simply be written as:</p>

<pre><code>mkdir -p "$path"
</code></pre>

<p>unless you want to save the output of the <code>bash</code> command to a variable but this is not the case here.</p>

<hr>

<p>You have some key/pair values to define your backup sources:</p>

<pre><code>dirs=(
    "/home/ferre/Minecraft"
    "/var/lib/automysqlbackup/daily"
);

# backup names
names=(
  "Minecraft"
  "Mysql"
);
</code></pre>

<p>I would combine both into an <strong>associative array</strong>.</p>

<pre><code>declare -A sources=(
    ["Minecraft"]="/home/ferre/Minecraft"
    ["Mysql"]="/var/lib/automysqlbackup/daily"
)

for item in "${!sources[@]}"; do
  echo "Name: $item =&gt; Directory: ${sources[$item]}"
done
</code></pre>

<p>Output:</p>

<pre>
Name: Mysql =&gt; Directory: /var/lib/automysqlbackup/daily
Name: Minecraft =&gt; Directory: /home/ferre/Minecraft
</pre>

<p>Thus you can easily loop on the array and extract name and target directory. Warning: please check the syntax. Bash has many pitfalls and I may have made mistakes.</p>

<hr>

<p><strong>Logging</strong>: I think it is important to retain a trace of script execution. Especially when the script is unattended. The console can quickly fill up and you could miss critical messages.</p>

<p>You have a few options like:</p>

<ul>
<li>define a variable for a log file then use <code>tee -a next</code> next to each command, so that you get output to console and to a file at the same time. But this is tedious and not flexible.</li>
<li>Call your script like this: <code>/path/to/your/script.sh &gt; backup.log</code> (use <code>&gt;&gt;</code> to append) or: <code>/path/to/your/script.sh | tee backup.log</code></li>
<li>or better yet <code>/path/to/your/script.sh 2&gt;&amp;1 | tee backup.log</code> to capture the output of stderr.</li>
</ul>

<p>Last but not least, your script could return an <strong>exit code</strong>. This is useful if your script is going to be handled by another script or even set up as a service.</p>

<hr>

<p>Suggestions:</p>

<ul>
<li>Have the script send you the log file by E-mail after execution. Or archive the log file somewhere for later review if desired.</li>
<li>Add <strong>error handling</strong> to make your script more reliable and more robust. If something wrong happens, or at least a fatal error, the script should stop and alert you. Here is an intro: <a href="https://linuxhint.com/bash_error_handling/" rel="nofollow noreferrer">Bash Error Handling</a></li>
</ul>

<p>A backup script is usually critical, it has to perform reliably. One day, you may need to restore some important files, or recover from a system crash. There is nothing more tragic than useless/incomplete backups.</p>

<p>So you should also <strong>test your backups</strong> manually from time to time. Attempt to restore a random file and verify the result.</p>
    </div>