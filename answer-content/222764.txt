<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>

<ul>
<li><code>GetDBDate</code> does not return a <code>date</code>, it return a <code>date time</code>; either change the method name if indeed you wanted a <code>date time</code> or return <code>result.Date;</code></li>
</ul>

<h3>Issues</h3>

<ul>
<li>code is not optimized because intermediate casting to <code>string</code> is required; this is especially unfortunate when the specified value could have been casted directly to the specified type</li>
<li>code is not compliant to conventions; <code>Get()</code> should throw an exception when it fails to cast the specified value; use <code>TryGet()</code> if sand-boxing is required</li>
<li>magic return values are not usable for consumers; throw exception if cast is not possible, use a <code>Nullable&lt;T&gt;</code> if <code>null</code> is an acceptable value for a <em>value type</em></li>
<li>since the values are retrieved from a database, take into account that <code>DbNull.Value</code> is a special way of representing <code>null</code></li>
</ul>

<hr>

<h3>Q&amp;A</h3>

<blockquote>
  <p>Do you think this is most optimized?</p>
</blockquote>

<ul>
<li>Your code is <strong>not</strong> optimized because you convert <code>object</code> input to <code>string</code> before parsing it to the specified type.</li>
</ul>

<blockquote>
  <p>Should I use a generic method in these functions themselves?</p>
</blockquote>

<ul>
<li>I would use a generic method, since the implementation of all these methods are basically the same. This allows for better maintainability of code.</li>
</ul>

<hr>

<h3>Generic Alternative</h3>

<p>Make sure to recognize <code>null</code> in a database context.</p>

<pre><code> private static bool IsNull(object value)
 {
     return value == DBNull.Value || value == null;
 }
</code></pre>

<p>Detect nullable types.</p>

<pre><code> private static bool IsNullable(Type type)
 {
     return type.IsGenericType 
         &amp;&amp; type.GetGenericTypeDefinition().Equals(typeof(Nullable&lt;&gt;));
 }
</code></pre>

<p>Detect types that can assign <code>null</code>.</p>

<pre><code> private static bool IsNullAssignable(Type type)
 {
     return !type.IsValueType || IsNullable(type);
 }
</code></pre>

<p>Generic way to cast any value to a specified type. There are always limits to the scope of 'any value'. In this context, I would say you have to at least be able to handle primitive types, strings and nullable types.</p>

<pre><code> public static T Cast&lt;T&gt;(object value)
 {
     if (IsNull(value))
     {
         return IsNullAssignable(typeof(T)) 
             ? (T)(object)null
             : throw new InvalidCastException($"Cannot cast null to {typeof(T)}");
     }

     var nonNullableType = IsNullable(typeof(T))
         ? Nullable.GetUnderlyingType(typeof(T)) : typeof(T);

     return (T)Convert.ChangeType(value, nonNullableType);
 }
</code></pre>

<p>Tests:</p>

<pre><code> [TestMethod]
 public void TestMethod1()
 {
     // decimal converted to int
     var n1 = DbConvert.Cast&lt;int&gt;(0m);   

     // null assigned to nullable&lt;int&gt;  
     var n2 = DbConvert.Cast&lt;int?&gt;(null); 

     // decimal converted to underlying type of nullable&lt;int&gt; 
     var n3 = DbConvert.Cast&lt;int?&gt;(0m); 

     // InvalidCastException: cannot assign null to int   
     var n4 = DbConvert.Cast&lt;int&gt;(null);   
 }
</code></pre>
    </div>