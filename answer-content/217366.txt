<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Basically, this boils down to the question of how to find out whether a given number of items is always the same. The mathematical tool for this is a set and checking its cardinality.</p>

<p>Putting this into code, you can use a Set implementation in Java:</p>

<pre><code>Set&lt;LocalDate&gt; allStartDates = new HashSet&lt;&gt;();

for (...) {
    ...
    allStartDates.add(order.getStartDate());
    ...
}

if (allStartDates.size() == 1)
    commonData.setCommonStartDate(allStartDates.iterator().next());
</code></pre>

<p>BUT: in a real-world-application, I'd move this logic to the CommonData class.</p>

<p>Basically, redesign the CommonData in a way, that you can simply add an order and then boil the loop down to:</p>

<pre><code>CommonData commonData = new CommonData();
orders.stream().forEach(commonData::add);
</code></pre>

<p>and inside the common data <code>add</code> method, add the codes and ids, maintain two sets of dates, and do the if-logic in the appropriate getters.</p>
    </div>