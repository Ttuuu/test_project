<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can understand why no one has yet answered your question. The basic problem is that your User Class is not really an User Class. All it does is process user input, and that's not something an User Class should do. An User Class should deal with an user, nothing else. Things like:</p>

<ul>
<li>Changing user name and/or password.</li>
<li>Verifying passwords.</li>
<li>Keep information about an user.</li>
<li>Keeping user information in the database up to date.</li>
<li>permissions.</li>
</ul>

<p>Basically anything that has to do with the user <strong><em>once the user is known</em></strong>. The basic structure of an user class therefore should be:</p>

<pre><code>class User {

    public function __construct($userId) {
    }

}
</code></pre>

<p>Your code seems to be dealing with a login form. Your class therefore should be called something like: <code>LoginFormInput</code>. A good login <em>can result</em> in an User Class, but the processing of user input should not be done in the User Class itself. </p>

<p>A good guide into designing a class, like this, is the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="nofollow noreferrer">Model–view–controller (MVC) pattern</a>. It clearly separates input, internal logic, and output. </p>

<p>Talking about user input processing. This should be done with care. How you deal with user input largely determines how secure your code is. Dumping all of <code>$_POST</code> directly into a class can be safe, if that class was intentionally designed to deal with it, but in most cases you want to filter user input at the top of a PHP script. In your case you could do something like:</p>

<pre><code>&lt;?php

$input["login"]    = filter_input(INPUT_POST, "user_login", FILTER_SANITIZE_STRING);
$input["password"] = filter_input(INPUT_POST, "user_pwd",   FILTER_UNSAFE_RAW);
$input["email"]    = filter_input(INPUT_POST, "user_email", FILTER_SANITIZE_EMAIL);
$input["name"]     = filter_input(INPUT_POST, "user_name",  FILTER_SANITIZE_STRING);
</code></pre>

<p>Only four inputs are now accepted, nothing else, and most of them are sanitized before they go into <code>$input</code>. Notice that I intentionally did not filter the password. This way any user password is possible. This filtering therefore doesn't make the content of <code>$input</code> safe, it is still user input and should be treated with care.</p>

<p>I normally process each form in its own PHP script, specifically written for that form. The code above would be the start, and most of your User Class would form the rest of the code. The end result could be a valid <code>$userId</code> which can be stored in the session, and can be used to create an User object.</p>

<p>One other thing in your code, that goes against everything I have learned, is the use of <code>call_user_func_array()</code> in <code>verify_fields()</code>. Just don't do that. It is bad for a lot of reasons, like maintainability and testability, but mostly because it is simply difficult to understand what it exactly does.</p>

<p>Your error processing is also unclear. You use both exceptions and error responses. It is one or the other, not both.</p>

<p>Also pay attention to the names you choose. I've already discussed the class name, but there's more. The obvious typo in <code>vertify_fields()</code>, a <code>dataParser()</code> method that doesn't do any parsing, and I still wonder what the differences between the <code>get()</code> and <code>getData()</code> methods are. I can't tell from the name.</p>

<p>A class should be used to encapsulate the inner workings of whatever the class is dealing with. It should abstract away from the details and give you a clean interface. Your class doesn't do this. </p>

<p>In the end I have to conclude that your class is probably syntactically correct, but that's about it. It seems like you haven't fully understood the reasons why we use OOP. </p>

<p>There are lot's of tutorials on the internet. Some of them only explain the syntax, others explain how objects relate to each other, but there are very few that correctly explain how to use them effectively. I can't find one I really like. However, if you take them all together you will get the idea:</p>

<p><a href="https://www.guru99.com/object-oriented-programming.html" rel="nofollow noreferrer">https://www.guru99.com/object-oriented-programming.html</a></p>

<p><a href="https://code-boxx.com/simple-php-mvc-example" rel="nofollow noreferrer">https://code-boxx.com/simple-php-mvc-example</a></p>

<p><a href="https://www.valuebound.com/resources/blog/object-oriented-programming-concepts-php-part-1" rel="nofollow noreferrer">https://www.valuebound.com/resources/blog/object-oriented-programming-concepts-php-part-1</a></p>

<p><a href="https://www.studytonight.com/php/php-object-oriented-programming" rel="nofollow noreferrer">https://www.studytonight.com/php/php-object-oriented-programming</a></p>
    </div>