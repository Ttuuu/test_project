<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might want to experiment with <a href="https://www.nltk.org/" rel="nofollow noreferrer">NLTK</a>, a <code>leading platform for building Python programs to work with human language data</code>:</p>

<p>You could import it, tags the words (NOUN, ADJ, ...) and replace words in the original sentence according to their tags:</p>

<pre><code>import nltk
from collections import defaultdict
from nltk.tag import pos_tag, map_tag

def simple_tags(words):
    #see https://stackoverflow.com/a/5793083/6419007
    return [(word, map_tag('en-ptb', 'universal', tag)) for (word, tag) in nltk.pos_tag(words)]

def repl(sentence, *new_words):
    new_words_by_tag = defaultdict(list)

    for new_word, tag in simple_tags(new_words):
        new_words_by_tag[tag].append(new_word)

    new_sentence = []

    for word, tag in simple_tags(nltk.word_tokenize(sentence)):
        possible_replacements = new_words_by_tag.get(tag)
        if possible_replacements:
            new_sentence.append(possible_replacements.pop(0))
        else:
            new_sentence.append(word)

    return ' '.join(new_sentence)

repl("The sea is blue", "moon", "white", "hate")
# 'The moon is white'
repl("The sea is blue", "yellow", "elephant")
# 'The elephant is yellow'
</code></pre>

<p>This version is brittle though, because some verbs appear to be nouns or vice-versa.</p>

<p>I guess someone with more NLTK experience could find a more robust way to replace the words.</p>
    </div>