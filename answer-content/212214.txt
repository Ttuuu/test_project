<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It could go either way, but for this small example, I would suggest moving all the content in the HTML. You could even skip the JS and use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:target" rel="nofollow noreferrer"><code>:target</code></a> to show and hide stuff in conjunction with hashed link hrefs.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-css lang-css prettyprint-override"><code>.panel {
  display: none
}

.panel:target {
  display: block
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="app"&gt;
  &lt;div class="panels"&gt;
    &lt;div class="panel" id="pong"&gt;
      &lt;h1&gt;Pong&lt;/h1&gt;
      &lt;p&gt;Lorem ipsum sit dolor amet...&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="panel" id="pokemon"&gt;
      &lt;h1&gt;Pokemon&lt;/h1&gt;
      &lt;p&gt;Lorem ipsum sit dolor amet...&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="panel" id="donkey-kong"&gt;
      &lt;h1&gt;Donkey Kong&lt;/h1&gt;
      &lt;p&gt;Lorem ipsum sit dolor amet...&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;nav class="menu"&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#pong"&gt;Pong&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#pokemon"&gt;Pokemon&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#donkey-kong"&gt;Donkey Kong&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p>Now onto your code...</p>

<p>I recommend using <code>const</code> over <code>var</code>. Nothing wrong with <code>var</code>, but <code>const</code> guarantees the value referenced by the variable never changes (i.e. you cannot reassign it). This ensures that whatever you set to it is the same thing later in code. It's also block-scoped, so if you're in <code>if</code>s or <code>for</code>s, it scopes it in the block.</p>

<p>In JS, there's <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector" rel="nofollow noreferrer"><code>document.querySelector</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll" rel="nofollow noreferrer"><code>document.querySelectorAll</code></a>. These allow you to fetch DOM elements using CSS selectors. You target DOM elements in the same way you target them when writing CSS. This way, you can be more expressive instead of being limited to <code>getElementById</code>, <code>getElementsByTagName</code>, <code>getElementsByClassName</code>.</p>

<p><code>element.innerHTML</code> is fine. But if you're just updating text, consider using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent" rel="nofollow noreferrer"><code>element.textContent</code></a> instead.</p>

<p>Instead of <code>onclick</code> on the HTML, use <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>element.addEventListener</code></a> in JavaScript instead. Inline scripts, while legit, are discouraged due to separation of concerns. Also, in inline scripts, the function is a global. Globals are to be avoided in JS to avoid clobbering stuff in the global namespace.</p>

<p>Avoid targetting HTML elements in your CSS selectors. For instance <code>.tile-view li</code> targets all <em>descendant</em> <code>li</code> elements under <code>.tile-view</code>. This is fine for small apps, but this is a bad habit to have when working on larger apps. On larger apps, where components are composed of smaller independent components, you never know what's in them. You may be hitting an <code>li</code> you did not originally anticipate to be under there.</p>
    </div>