<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code works pretty well. There are a few techniques that can be used to shorten the code. I notice that <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> are used but not many others. See the list below:</p>

<h3>Global variables</h3>

<p>All the variables declared with <code>var</code> are put into the global <code>window</code> namespace. It is wise to wrap those in an <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a> or better yet, since it is wise to wait for the DOM to be ready before querying it, use the <a href="http://api.jquery.com/jquery/#jQuery3" rel="nofollow noreferrer">jQuery DOM ready syntax</a>:</p>

<pre><code>$(function() { /* function to execute once DOM has finished loading */});
</code></pre>

<p>Also, use <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> for local variables and <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> for anything that doesn't get re-assigned (including arrays).</p>

<h3>Swapping Array Elements</h3>

<blockquote>
<pre><code>let temp = Subject[counter];
Subject[counter] = Subject[index];
Subject[index] = temp;
</code></pre>
</blockquote>

<p>This can be shortened using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Swapping_variables" rel="nofollow noreferrer">destructuring assignment</a>:</p>

<pre><code>[Subject[index], Subject[counter]] = [Subject[counter], Subject[index]];
</code></pre>

<h3>Array truncation</h3>

<p>The three lines inside <code>ClearArrays()</code> can be simplified to simply set the length of each array to 0 because "<em>You can set the length property to truncate an array at any time</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length#Description" rel="nofollow noreferrer">1</a></sup>.</p>

<pre><code>RandomColors.length = 0;
ChosenColors.length = 0;
UsedColors.length = 0;
</code></pre>

<h3>Cache DOM references</h3>

<p>Querying the DOM isn't exactly cheap so it is wise to look up elements once and store them in a variable (and use <code>const</code> since those shouldn't be re-assigned). References to elements like <code>#top</code> and <code>#mid</code> can be stored in a constant instead of looked up each time (especially when iteratively adding elements like the cubes and circles).</p>

<h3>Put styles in CSS instead of inline in each cube and circle</h3>

<p>Don't repeat the styles for each circle and cube. See the rewrite below where the styles for the circles and cubes are moved out to the cubes. Also, instead of updating the background colors using inline styles, I updated the code to add and remove a class <code>obscure</code> that sets the background color to white when appropriate. While it meant adding a CSS ruleset for each color (which could have been done programmatically), it allows for simple code when clearing and re-adding colors.</p>

<h3>Use single click handler</h3>

<p>Instead of adding a click handler to each cube, which eventually gets removed from the DOM, use a single click handler on the <code>mid</code> element. Then check if the element clicked was a cube. In the rewrite below, I moved the styles to a new class (i.e. <code>cube</code>) mentioned in the previous section.</p>

<h2>Rewrite</h2>

<p>The code below is simplified a bit using the suggestions above. Some elements referenced in the original code didn't appear to exist so those have been removed.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>$(function() {
  const AllColors = ['yellow', 'gray', 'blue', 'green', 'pink', 'orange'];
  const RandomColors = [];
  const ChosenColors = [];
  const UsedColors = [];
  const Time = 100;
  let Score = 0;
  let Round = 3;
  //cache DOM references
  const counterElement = $('.counter');
  const topElement = $("#top");
  const midElement = $("#mid");
  const scoreElement = $('.score');

  function Randomize(Subject) {
    let counter = Subject.length;
    while (counter &gt; 0) {
      let index = Math.floor(Math.random() * counter);
      counter--;
      [Subject[index], Subject[counter]] = [Subject[counter], Subject[index]];
    }
    return Subject;
  }


  function ClearArrays() {
    RandomColors.length = 0;
    ChosenColors.length = 0;
    UsedColors.length = 0;
  }

  function arraysEqual(a, b) {
    if (a === b) return true;
    if (a == null || b == null) return false;
    if (a.length != b.length) return false;

    for (var i = 0; i &lt; a.length; ++i) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }

  function Counter() {
    let Countdown = Time;
    counterElement.text(Countdown);

    count = setInterval(function() {
      Countdown--;
      if (Countdown &gt;= 0) {
        counterElement.text(Countdown);
      }
      if (Countdown == 0) {
        clearInterval(count);
        ClearGame();
      }
    }, 1000);

  }

  function RandomArray(Subject) {
    const index = Math.floor(Math.random() * Subject.length);
    return Subject[index];
  }


  function setColorToGrey() {
    $(".cube").addClass('obscured');
  }

  function CreateObjTop() {
    randomcolors = Randomize(UsedColors);

    $(this).delay(2000).queue(function() {
      $(this).hide();
      setColorToGrey();
      $.each(randomcolors, function(index, value) {
        $('&lt;div class="circle ' + value + '"&gt;&lt;/div&gt;').appendTo(topElement).hide().fadeIn(2000);
        RandomColors.push(value);
      });
      $(this).dequeue();
    });
  }

  function LoadGame() {

    for (i = 0; i &lt; Round; i++) {
      var color = RandomArray(AllColors);
      $('&lt;div id="' + [i] + '" class="cube ' + color + '"  data-color="' + color + '" &gt;&lt;/div&gt;').appendTo(midElement).hide().fadeIn(2000);
      UsedColors.push(color);
    }

    CreateObjTop();

  }
  $(midElement).click(function(event) {
    const target = $(event.target);
    if (target.hasClass("cube")) {
      target.removeClass('obscured');
      ChosenColors.push(target.data('color'));
      CheckStatus();
    }
  });

  function CheckStatus() {
    if (ChosenColors.length === Round) {
      if (arraysEqual(UsedColors, ChosenColors)) {
        if (Score === 4 || Score == 9 || Score == 14) {
          Round++;
        }
        $(".cube, .circle").remove();

        ClearArrays();
        LoadGame(Round);
        Score++;
        scoreElement.text(Score);
      } else {
        ChosenColors.length = 0;
        setColorToGrey();
      }
    }
  }

  function ClearGame() {

    counterElement.text('Game over');
    scoreElement.text(Score);

    $(".cube, .circle").remove();

    Score = 0;
    Round = 3;

    $(this).delay(2000).queue(function() {
      $("#bt-ready").delay(2000).show();
      $(this).dequeue();
    });
  }

  function StartGame() {
    Counter();
    LoadGame();
  }

  StartGame();
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.circle {
  width: 25px;
  height: 25px;
  float: left;
  margin-left: 20px;
  border-radius: 100%;
  border: 2px solid #ACACAC;
}

.cube {
  width: 40px;
  height: 40px;
  border-radius: 25px 25px 25px 25px;
  -moz-border-radius: 25px 25px 25px 25px;
  -webkit-border-radius: 4px 4px 4px 4px;
  border: 1px solid #5e5e5e;
  margin: 10px;
  float: left;
}

.blue {
  background-color: blue;
}

.gray {
  background-color: gray;
}

.green {
  background-color: green;
}

.orange {
  background-color: orange;
}

.pink {
  background-color: pink;
}

.yellow {
  background-color: yellow;
}

.cube.obscured {
  background-color: white;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;div id="top"&gt;

&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;div id="mid"&gt;

&lt;/div&gt;
&lt;div class="score"&gt;&lt;/div&gt;
&lt;div class="counter"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length#Description" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length#Description</a></sub></p>
    </div>