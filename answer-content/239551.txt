<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Why saving reference to <code>Context</code> and then create <code>SharedPreferences</code> each time? There's duplicate code for creating <code>SharedPreferences</code> You could just use context in constructor to create member <code>SharedPreferences</code> to use in your methods. If you want to keep it as it is, at least extract duplicate code into separate method.</li>
<li>I am missing null checks. I expect to get very obscure behaviour when passing null for keys or classes. Test for null and throw <code>NullPointerException</code> early, be fail-fast. For example <a href="https://guava.dev/releases/19.0/api/docs/com/google/common/base/Preconditions.html#checkNotNull(T)" rel="nofollow noreferrer">checkNotNull</a> or some <a href="https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html" rel="nofollow noreferrer">NotNull</a> annotation to help better fighting against null. Another way to fight is to use <code>kotlin</code>, which doesn't allow null on compiler level unless you make variable optional.</li>
<li><p>I don't like that <code>gson</code> is private and static.</p>

<ul>
<li>That means there is no way to configure <code>gson</code>. Would be better if this was member property and I would be able to pass different configuration of gson. Can add consructor overloads for that. Maybe this is overdoing it for your case, but I usually configure <code>Gson</code> quite a lot, have my own <code>TypeAdapters</code> and I wouldn't be able to use my <code>Gson</code> configuration with your class.</li>
<li>At first I was concerned about thread-safety <code>Gson</code> is <a href="https://stackoverflow.com/questions/10380835/is-it-ok-to-use-gson-instance-as-a-static-field-in-a-model-bean-reuse">thread-safe</a>, so there's no argument against static in this sense. Always check for that when you make something static like this.</li>
</ul></li>
<li><p>Pretty sure that when saving preferences in android, you first put <code>key</code> and then <code>value</code>. Your <code>saveObject</code> has it the other way around, that is imho confusing. I'd switch parameters in <code>loadObject</code> too so that key is always first in those cases, but guess that's a bit subjective.</p></li>
<li>Immutability makes code simpler to use and read. If something is final, you don't need to keep be alert if it changed anytime. <code>context</code> member variable can be final and all method parameters can be final too. After refactoring possible <code>SharedPreferences</code> and <code>Gson</code> instances can also be final - set in constructor.</li>
</ul>
    </div>