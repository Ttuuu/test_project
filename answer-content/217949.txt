<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my minimal solution about the problem </p>

<ul>
<li><p>the strategy is divide-and-conquer for the reasons already explained by @papagaga </p></li>
<li><p>it is based on the idea that before the rotation the array has this structure </p></li>
</ul>

<pre><code>[m .. p P .. M]
</code></pre>

<p>with </p>

<ul>
<li><p><code>m</code> min </p></li>
<li><p><code>M</code> max </p></li>
<li><p><code>p</code> pivot</p></li>
<li><p><code>P</code> next to the pivot so that <code>P&gt;p</code></p></li>
<li><p>while after the rotation it has the following structure </p></li>
</ul>

<pre><code>[P .. M m .. p]
</code></pre>

<p>so the idea is to update the <code>l</code> left cursor and <code>r</code> right cursor so that <code>v[l] &gt; v[r]</code> with a divide and conquer strategy so to have <code>O(LogN)</code> complexity and ultimately the final condition is <code>l</code> and <code>r</code> are contiguous 
and the first identifies <code>M</code> while the second identifies <code>m</code> hence return the last one </p>

<p><strong>EDIT</strong> Following @papagaga suggestion I provide 2 implementations </p>

<h2>1. Index based solution</h2>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

vector&lt;int&gt; a = {5,6,7,8,9,10,11, 1,2,3,4};

unsigned int solve(const vector&lt;int&gt;&amp; a, unsigned int l=0, unsigned int r=0)
{
    if(a.empty()) throw runtime_error("Empty"); 
    if(a.size()==1) return 0; 
    if(r==0) r=a.size()-1; ///&lt; Overwrite the invalid initialization with the right value, unfortunately it is not possible to do this in function declaration 
    if(a[l] &lt; a[r]) return l; ///&lt; Sorted in Ascending Order 
    if(r-l==1) return r; 
    const auto m = (r+l)/2; 
    if(a[m] &gt; a[l]) return solve(a, m, r); 
    return solve(a, l, m); 
}

int main() {
    // your code goes here
    cout &lt;&lt; "Min=" &lt;&lt; a[solve(a)]; 
    return 0;
}

</code></pre>

<p>Comments  </p>

<ul>
<li>Added the empty array case management using Exception </li>
<li>An alternative could have been using Maybe Monad (a Boost Optional) to represent non meaningful results </li>
</ul>

<h2>2. Iterators based solution</h2>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;
using namespace std;

vector&lt;int&gt; a = {5,6,7,8,9,10,11, 1,2,3,4};

vector&lt;int&gt;::iterator solve(const vector&lt;int&gt;::iterator l, const vector&lt;int&gt;::iterator r)
{
    if(l==r) return r; ///&lt; Covers the single element array case 
    if(*l &lt; *r) return l; ///&lt; Sorted in Ascending Order 
    if(r-l==1) return r; 
    const auto m = l + distance(l,r)/2;  
    if(*m &gt; *l) return solve(m, r); 
    return solve(l, m); 
}

int main() {
    // your code goes here
    cout &lt;&lt; "Min=" &lt;&lt; *solve(a.begin(), a.end()-1); 
    return 0;
}

</code></pre>

<p>Comments </p>

<ul>
<li>Working with iterators allows to represent invalid values so no need for Exception and explicit Maybe Monad as the iterator type is one </li>
<li>The first check automatically manages the one element case </li>
<li>The empty array case should be managed before calling this function as it expects both the iterators point to valid elements </li>
</ul>
    </div>