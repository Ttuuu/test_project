<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>String</em> vs. <em>line</em></strong></p>
<blockquote>
<p>Read string of any length in C</p>
</blockquote>
<p>User input in C is better described as reading a <em>line</em> than a <em>string</em>.</p>
<blockquote>
<p>A <em>string</em> is a contiguous sequence of characters terminated by and including the first null character.</p>
<p>A text stream is an ordered sequence of characters composed into <em>lines</em>, each line
consisting of zero or more characters plus a terminating new-line character.  Whether the
last line requires a terminating new-line character is implementation-defined. C11dr ยง7.21.2 2</p>
</blockquote>
<p>After reading a <em>line</em>, input is converted to a <em>string</em> by appending a <em>null character</em>.  The appended <em>null character</em> is part of the <em>string</em>, but not user input.</p>
<p><strong><em>Null characters</em></strong></p>
<p>The tricky bit is what happens when reading input that itself contains a <em>null character</em>?  Rare, but not prevented in code.</p>
<p>OP's approach of <code>char* input()</code> fails to always provide unambiguous length information.</p>
<p>With <code>char *s = input();</code>, code does not know if the first <em>null character</em> encountered in <code>s</code> is the appended one or a read one.</p>
<p>Conveying length resolves this issue.</p>
<pre><code>char* input(size_t *sz) { 
  *sz = 0;
  ....
  *sz = s_len;
  return s;
} 

size_t sz = 0;
char *s = input(&amp;sz);

printf("Length of input:%zu\n", sz);
</code></pre>
<hr>
<p><strong>Consider defensive programming.</strong></p>
<p>Reading strings of <em>any</em> length allows a nefarious user to overwhelm system memory resources with an <em>long</em> input - perhaps gigabytes.</p>
<p>The nature of user input, IMO, should have a <em>generous</em> upper bound.  In which case, code can simply use <code>fgets()</code> (not withstanding the above <em>null character</em> issue.)</p>
<pre><code>#define USER_NAME_SZ 4096

char name[USER_NAME_SZ];
if (fgets(name, sizeof name, stdin)) {
  if (strlen(name) &gt;= USER_NAME_SZ - 1) {
    fprintf(stderr, "Hostile input detected\n");
    exit(-1);
  }
</code></pre>
<p><strong>Exit on end-of-file?</strong></p>
<p>OP's code exits the program on end-of-file - a rude thing for <code>input()</code> to do.</p>
<pre><code>if (ch == EOF) {
  // exit(0);
  if (feof(stdin)) {
    if (s_len &gt; 0) return s; // Return what was read
    free(s);
    return NULL;             // Let caller cope with end-of-file.
  }
</code></pre>
<p><strong><code>EOF</code>: end-of-file or error?</strong></p>
<p>Rarely <code>getchar()</code> returns <code>EOF</code> due to an <em>input error</em>.</p>
<blockquote>
<p>If the stream is at end-of-file, the end-of-file indicator for the stream is set and <code>getchar</code> returns <code>EOF</code>. If a read error occurs, the error indicator for the stream is set and <code>getchar</code> returns <code>EOF</code>.</p>
</blockquote>
<p>It is <a href="https://stackoverflow.com/a/45264457/2410359">better</a> to distinguish using <code>feof()</code> than <code>ferror()</code>.</p>
<p>So rather than simply exit on <code>EOF</code>, code may want to distinguish.</p>
<pre><code>if (ch == EOF) {
  // exit(0);
  if (feof(stdin)) {
    if (s_len &gt; 0) return s; // Return what was read
    free(s);
    return NULL;
  }

  // This is trickier - what to due on input error?
  // Different schools of thought exist.
  // Usual, like fgets(), return NULL
  free(s);
  return NULL;
} 


char *s = input();
if (s) {
  puts(s);
} else {
  if (feof(stdin)) puts("end-of-file");
  else puts("end-of-file");
}
</code></pre>
    </div>