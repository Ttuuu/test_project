<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Theory</h1>

<p>It might not be clear at first, but you're basically describing a <a href="https://en.wikipedia.org/wiki/Bipartite_graph" rel="nofollow noreferrer">bipartite graph</a>.</p>

<p><a href="https://i.stack.imgur.com/gSZex.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/gSZex.png" alt="enter image description here"></a></p>

<p>You're interested in finding the <a href="https://en.wikipedia.org/wiki/Matching_(graph_theory)" rel="nofollow noreferrer">maximum matching</a> and if it's perfect.</p>

<p><a href="https://networkx.github.io/" rel="nofollow noreferrer">NetworkX</a> is a great Python library for graphs, and the <a href="https://networkx.github.io/documentation/networkx-1.10/reference/algorithms.bipartite.html#Matching" rel="nofollow noreferrer"><code>maximum_matching</code></a> function is already implemented. It uses the <a href="https://en.wikipedia.org/wiki/Hopcroft%E2%80%93Karp_algorithm" rel="nofollow noreferrer">Hopcroft-Karp algorithm</a> and runs in <span class="math-container">\$O(n^{2.5})\$</span> where <span class="math-container">\$n\$</span> is the number of nodes.</p>

<p>You only have to preprocess your lists into a graph and let <code>networkx</code> do its job.</p>

<h1>Code</h1>

<p>Here's a slightly modified version of a <a href="https://stackoverflow.com/a/45907094/6419007">previous answer</a> on Stack Overflow:</p>

<pre><code>import networkx as nx
import matplotlib.pyplot as plt

def has_a_perfect_match(list1, list2):
    if len(list1) != len(list2):
        return False

    g = nx.Graph()

    l = [('l', d['name'],  d['amount']) for d in list1]
    r = [('r', d['color'], d['amount']) for d in list2]

    g.add_nodes_from(l, bipartite=0)
    g.add_nodes_from(r, bipartite=1)

    edges = [(a,b) for a in l for b in r if a[2] == b[2]]
    g.add_edges_from(edges)

    pos = {}
    pos.update((node, (1, index)) for index, node in enumerate(l))
    pos.update((node, (2, index)) for index, node in enumerate(r))

    m = nx.bipartite.maximum_matching(g, l)
    colors = ['blue' if m.get(a) == b else 'gray' for a,b in edges]

    nx.draw_networkx(g,
                     pos=pos,
                     arrows=False,
                     labels = {n:"%s\n%d" % (n[1], n[2]) for n in g.nodes()},
                     edge_color=colors)
    plt.axis('off')
    plt.show()

    return len(m) // 2 == len(list1)
</code></pre>

<p>As a bonus, it displays a diagram with the graph and maximum matching:</p>

<pre><code>list1 = [{'amount': 124, 'name': 'john'},
         {'amount': 456, 'name': 'jack'},
         {'amount': 456, 'name': 'jill'},
         {'amount': 666, 'name': 'manuel'}]
list2 = [{'amount': 124, 'color': 'red'},
         {'amount': 456, 'color': 'yellow'},
         {'amount': 456, 'color': 'on fire'},
         {'amount': 666, 'color': 'purple'}]

print(has_a_perfect_match(list1, list2))
# True
</code></pre>

<p><a href="https://i.stack.imgur.com/lsOWx.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/lsOWx.png" alt="enter image description here"></a></p>

<pre><code>list1 = [{'amount': 124, 'name': 'john'},
         {'amount': 456, 'name': 'jack'},
         {'amount': 457, 'name': 'jill'},
         {'amount': 666, 'name': 'manuel'}]
list2 = [{'amount': 124, 'color': 'red'},
         {'amount': 458, 'color': 'yellow'},
         {'amount': 456, 'color': 'on fire'},
         {'amount': 666, 'color': 'purple'}]

print(has_a_perfect_match(list1, list2))
# False
</code></pre>

<p><a href="https://i.stack.imgur.com/fZnDj.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/fZnDj.png" alt="enter image description here"></a></p>

<h1>Notes</h1>

<p>The desired matching is in <code>m</code> and has a slightly different format than what you mentioned:</p>

<pre><code>{('l', 'jack', 456): ('r', 'yellow', 456), ('l', 'jill', 456): ('r', 'on fire', 456), ('l', 'john', 124): ('r', 'red', 124), ('l', 'manuel', 666): ('r', 'purple', 666), ('r', 'red', 124): ('l', 'john', 124), ('r', 'yellow', 456): ('l', 'jack', 456), ('r', 'purple', 666): ('l', 'manuel', 666), ('r', 'on fire', 456): ('l', 'jill', 456)}
</code></pre>

<p>It does have enough information, though.</p>

<p>Note that the edge generation isn't optimal (it's <span class="math-container">\$O(n^{2})\$</span> and could be <span class="math-container">\$O(n)\$</span> with dicts) but it's concise and still faster than the matching algorithm. Feel free to modify it!</p>

<h1>Optimization</h1>

<p>@Peilonrayz' <a href="https://codereview.stackexchange.com/a/187459/139491">answer</a> has a better performance because your problem is easier than the general matching problem : there are no connections between nodes with distinct ids, so a greedy algorithm works fine.</p>

<p>Actually, it's possible to check in 2 lines if the lists match. With a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>,  you just need to check if the distribution (e.g. <code>Counter({124: 1, 456: 2, 666: 1})</code>) is the same for both lists:</p>

<pre><code>from collections import Counter
Counter(map(key, list1)) == Counter(map(key, list2))
# True
</code></pre>
    </div>