<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I found a new trick which speeds up the LZ77 search. </p>

<p>After finding a match, it's possible to check the hash table for the last 3 bytes of the next largest possible match. If the hash entry is zero ( or earlier than the 32k window ), the search can be terminated. Here's the affected code, the new function is <code>MatchPossible</code>.</p>

<pre><code>  private int BestMatch( byte [] input, int position, out int distance, int oldPosition, int [] link )
  { 
    int avail = input.Length - position;
    if ( avail &gt; MaxMatch ) avail = MaxMatch;

    int bestMatch = 0, bestDistance = 0;

    while ( true )
    { 
      if ( input[ position + bestMatch ] == input[ oldPosition + bestMatch ] )
      {
        int match = 0; 
        while ( match &lt; avail &amp;&amp; input[ position + match ] == input[ oldPosition + match ] ) 
        {
          match += 1;
        }
        if ( match &gt; bestMatch )
        {
          bestMatch = match;
          bestDistance = position - oldPosition;
          if ( bestMatch == avail ) break;
          if ( ! MatchPossible( position, bestMatch+1 ) ) break;
        }
      }
      oldPosition = link[ oldPosition ];
      if ( position &gt;= oldPosition ) break;
      oldPosition -= EncodePosition;
    }
    distance = bestDistance;
    return bestMatch;
  }

  // MatchPossible is used to try and shorten the BestMatch search by checking whether 
  // there is a hash entry for the last 3 bytes of the next longest possible match.

  private bool MatchPossible( int position, int matchLength )
  {
    int end = position + matchLength - 3;
    uint hash = ( (uint)Input[ end+0 ] &lt;&lt; HashShift ) + Input[ end+1 ];
    hash = ( ( hash &lt;&lt; HashShift ) + Input[ end + 2 ] ) &amp; HashMask;        
    int hashEntry = HashTable[ hash ];
    if ( end &gt;= hashEntry ) return false;
    return true;
  }
</code></pre>
    </div>