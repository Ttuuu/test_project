<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem is with your algorithm. This can be solved efficiently using an O(1) algorithm. The right approach would be this - </p>

<p>Given a number n, find the number of multiples of 3 less than n (lets call this q3), and the number of multiples of 5 less than n(call this q5). Say, n=10, there are 3 multiples of 3 less than 10 ( 3,6 and 9) and there is 1 multiple of 5 less than 10 (5). </p>

<p>Use the formula for arithmetic progression to calculate the sum all multiples of 3 -&gt; (3*(q3)<em>(q3+1)/2).Same can be done to find the sum of all multiples of 5 -&gt; (5</em>(q3)*(q3+1)/2). </p>

<p>We need to be careful about the numbers which are multiples of <em>both</em> 5 and 3, ie, multiples of 15. Since they get added twice (once as a multiple of 3 and then as a multiple of 5), the sum of the multiples of 15 less than n needs to be subtracted to get the final result.</p>

<pre><code>import java.util.*;

public class Main {

public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int T = scanner.nextInt();
    long n;
    for (int i = 0; i &lt; T; i++) {
        n = scanner.nextInt();
        System.out.println(getSumMult(n - 1));

    }
}

    public static long getSumMult(long n){
        long res;
        long q3 = n/3;
        long q5 = n/5;
        long q15 = n/15;
        long s3 = (3*q3*(q3+1))/2;
        long s5 = (5*q5*(q5+1))/2;
        long s15 = (15*q15*(q15+1))/2;
        return s3+s5-s15;
    }
}
</code></pre>
    </div>