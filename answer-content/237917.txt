<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Consistent Naming</strong></p>

<p>Code naming is unnecessarily different</p>

<p>Files are <code>GenericList.*</code><br>
Functions <code>genList*</code><br>
Types <code>GenList*</code><br>
Enums <code>GEN_LIST_*</code></p>

<p>Consider a common <code>GenList_</code>, <code>GENLIST_</code></p>

<p><strong>Sizes best as <code>size_t</code></strong></p>

<pre><code>// unsigned int dataSize;
size_t dataSize;

// GenList *genListNew(unsigned int dataSize, Compare cmp);
GenList *genListNew(size_t dataSize, Compare cmp);
// and various other functions
</code></pre>

<p><strong>Save formatting time</strong></p>

<p>Below code hints that automatic formatting is not used.   Improve productivity and consistency.  Use an auto formatter.  Life is too short for manual formatting.</p>

<pre><code>struct GenList_t {


static GenListError genListCopyNodeData(void* data, unsigned int dataSize, void* buf, unsigned int bufSize)
{
</code></pre>

<p><strong><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRYer</a> code</strong></p>

<pre><code>// GenList* list = NULL;
// list = malloc(sizeof(*list));
GenList* list = malloc(sizeof *list);
</code></pre>

<p><strong>How many enumerations?</strong></p>

<p>Sometimes it is useful to know how many enumerations exist.  Consider a last <code>xxx_N</code> one.</p>

<pre><code>typedef enum {
    GEN_LIST_NO_ERR,
    GEN_LIST_WRONG_PAR,
    GEN_LIST_NO_MEMORY,
    GEN_LIST_MATCH,
    GEN_LIST_NO_MATCH,
    GEN_LIST_FULL,
    GEN_LIST_ERROR,
    GEN_LIST_N          // Add this one
} GenListError;

if (error &lt; 0 || error &gt;= GEN_LIST_N) Whoa_Handle_Errant_error_Code();
</code></pre>
    </div>