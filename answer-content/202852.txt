<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A slightly more efficient dynamic programming approach means you only need <code>O(n)</code> space:</p>

<pre><code>def partitions(n):
    parts = [1]+[0]*n
    for t in range(1, n+1):
        for i, x in enumerate(range(t, n+1)):
            parts[x] += parts[i]
    return parts[n]

In []:
partitions(50)

Out[]:
204226
</code></pre>

<p>Note: this is trivial to extend to the coin change problem (the number of ways you can make change with certain coins: <a href="https://www.maa.org/frank-morgans-math-chat-293-ways-to-make-change-for-a-dollar" rel="nofollow noreferrer">Ways to make change for a dollar</a>), by restricted the values in the outer loop, e.g.:</p>

<pre><code>def coin_change(n, coins):
    parts = [1]+[0]*n
    for c in coins:
        for i, x in enumerate(range(c, n+1)):
            parts[x] += parts[i]
    return parts[n]

In []:
coin_change(100, {1, 5, 10, 25, 50, 100})

Out[]:
293
</code></pre>
    </div>