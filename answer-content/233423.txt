<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The Page class does not need to have this T:new constraint, and the List can be an automatic property, just as the other Properties are.</p>

<p>The Dictionary parameter can be changed to an IReadOnlyDictionary, to indicate, your methods only read the dictionary,
they don't modify anything.</p>

<p>The Paging method takes a Page, and returns the same Page ?
If there is no code, that eventually changes the Page to something else, the return value is not necessary.</p>

<p>You can consider making your Paging-method a part of the Page class itself. </p>

<pre><code>pagingResponse.Paging(filterParameters, ref from, ref size) 
</code></pre>

<p>may look simpler.</p>

<p>If you only Count something from a Query in result.Count(); why do you do a complicated select before ?
The result of this</p>

<pre><code>    var query = _dbContext.Students.ToList();
    var result = query.Select(x =&gt; new StudentResponse
    {
        Id = x.Id,
        Name = x.Name
    });
    resultfinal.TotalCount = result.Count();
</code></pre>

<p>Is exactly the same as from </p>

<pre><code>    _dbContext.Students.Count();
</code></pre>

<p>Your last query is kind of useless.</p>

<pre><code>      query = result.Skip(from).Take(size);
</code></pre>

<p>It's created but not executed, and thrown away at the end of the routine.
And this makes the from and size parameters useless itself, they aren't good for anything.</p>

<p>You have the information of "size" and "from" already availabel in PageSize and PageStart.
Why passing it out of the Paging method a second time as a ref parameter ?</p>

<p>There might be some iteration missing, you seem to create one page only - and List is unassigned.</p>
    </div>