<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to code review and thanks for sharing your code.</p>

<p>When writing UnitTests keep in mind that they are <strong>documentation</strong>. 
Test code has less restrictions for identifier names.
This means that method names are usually longer and you should not "shorten" your unit test methods.</p>

<ol>
<li><p>The <em>test name</em> should describe the expected behavior <strong>in detail</strong></p>

<pre><code>@Test
public void getAllVideos_returnsCompleteListFromRepository() throws Exception{ 
    // ...
</code></pre></li>
<li><p>A unit test always has three parts: <code>arrange</code>, <code>act</code> and <code>assert</code>. 
You should always have this three parts visible in your test methods. </p>

<p>In your example you do the <code>act</code> part implicitly in the <code>assert</code> line. 
This prevents you from introducing variable that could give useful information about the result:</p>

<pre><code>@Test
public void getAllVideos_returnsCompleteListFromRepository()
    // arrange 
    List&lt;Video&gt; allVideosInRepository = new ArrayList&lt;&gt;();
    when(videoRepository.findAll()).thenReturn(new ArrayList&lt;Video&gt;());
    // act
    List&lt;&gt; allVideosFromRepository = videoService.getAllVideos();
    // assert
    assertEquals(allVideosInRepository, allVideosFromRepository, "tested");
}
</code></pre>

<p>For the same reason the <code>String</code> parameter of the <code>assert*</code> method should always be a useful hint in case the test fails because it is part of the error message:</p>

<pre><code>    assertEquals(allVideosInRepository,
                 allVideosFromRepository,
                 "is same object");
</code></pre></li>
</ol>

<hr>

<blockquote>
  <p>I feel like i just compare the same mock values ArrayList of Video and what's the point of doing this or i just do it wrong way.</p>
</blockquote>

<p>This is not a problem of your unit tests but of your current design. </p>

<p>For the time being your <code>VideoService</code> class is nothing more than a <em>facade</em> to a <code>Collection</code>, there is no business behavior (yet) to be tested.</p>
    </div>