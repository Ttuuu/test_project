<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Nullable</h1>
<p>Your fields are optionals: you put a <code>?</code> after the type.<br>
This means every time you need to access them, you need to check if it is null...<br>
If you want the fields to be always present, throw the NullPointerException when <code>findViewById</code> doesn't return a view.<br>
Then you can make your field not nullable and you can remove all the (now) redundant checks...</p>
<h1>oneline function</h1>
<pre><code>override fun getLayout(): Int {
    return R.layout.input_text_layout
}
</code></pre>
<p>This function doesn't need 3 lines of attention...<br>
Change it to one:</p>
<pre><code>override fun getLayout(): Int = R.layout.input_text_layout
</code></pre>
<p>you could remove the return-type as well:</p>
<pre><code>override fun getLayout() = R.layout.input_text_layout
</code></pre>
<h1>init</h1>
<p>Personal choice:</p>
<p>I like to make everything as short as possible.
This can be done by declaring the fields straight away instead of in the init block:</p>
<pre><code>class InputTextAlertDialog(context: Context) : BaseAlertDialog(context) {

    var onInputOkListener: OnInputOkListener? = null        

    var colorError: Int = Color.RED
        set(colorError: Int) {
            field = colorError
            error!!.setTextColor(colorError)
        }    


    private var input: EditText = view.findViewById(R.id.input)!!
    private var error: TextView = view.findViewById(R.id.error_text)!!

    init {
        error!!.setTextColor(colorError)
    }
}
</code></pre>
<h2>also</h2>
<p>We can make the code above a bit simpler by using <code>also</code>:<br>
<code>also</code> is a function which is called upon a variable (called the receiver).<br>
<code>also</code> will return the receiver and accepts a lambda as parameter.<br>
Inside that lambda, it gives one parameter: the receiver.<br>
Therefor the following code:</p>
<pre><code>class InputTextAlertDialog(context: Context) : BaseAlertDialog(context) {
    private var error: TextView = view.findViewById(R.id.error_text)!!

    init {
        error!!.setTextColor(colorError)
    }
}
</code></pre>
<p>can be reduced to:</p>
<pre><code>class InputTextAlertDialog(context: Context) : BaseAlertDialog(context) {
    private var error: TextView = view.findViewById(R.id.error_text)!!
        .also{ v: TextView -&gt; v.setTextColor(colorError) }
}
</code></pre>
<p>And if there is only one param, it can be accessed using it:</p>
<pre><code>class InputTextAlertDialog(context: Context) : BaseAlertDialog(context) {
    private var error: TextView = view.findViewById(R.id.error_text)!!
        .also{ it.setTextColor(colorError) }
}
</code></pre>
    </div>