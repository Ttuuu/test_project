<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to do a superficial review of your 2nd block of code from a readability point of view. If I stumble across something that might help performance, I'll point it out but you need <em>clear</em> code first. Other things become much easier when the code is simple. Remember, we optimise code for <em>other developers</em> to read first. Once we've done that, we can do all sorts of tricks to make the code faster but they almost always hamper readability - you should only do it when you have evidence that it will be of material benefit.</p>
<p>Onwards, then.</p>
<hr>
<p>C# uses <code>camelCase</code> for parameters, we like readable names and Hungarian notation is not a good thing. We have a type system, we don't need to add type information to the names.</p>
<pre><code>private string ExtractStandardValueFromLinkText(
     string tabName, 
     string standardLineItem, 
     string period,
     string brTab,
     string rowNumber,
     string unit,
     ref DataTable data,
     string linkedItemList,
     string brLineItem,
     string action,
     bool cumulative) 
</code></pre>
<p>Now, I've put each parameter on a new line to highlight another point. There are too many parameters to this method. I'm not going to suggest too much here but it looks you could benefit from some classes to group related things together.</p>
<pre><code>string _strBRTab = "", _RowNumber = "";
</code></pre>
<p>Nope. Don't use <code>_</code> for local variables. Some people use <code>_</code> to prefix fields so that's doubly confusing.</p>
<p>Let's consider the next line:</p>
<pre><code> //this line prevent to consider same tabname &amp; Lineitem in for loop
 if (!lstDataCheck.Contains(BRTab + "~" + RowNumber + "~" + strPeriod))
 {
</code></pre>
<p>You need a comment to explain what the code does? That is a huge hint that a well-named method is in order.</p>
<pre><code>if (!HasBeenProcessed(brTab, rowNumber, period))
{ 
</code></pre>
<p>And then we inverse the if to reduce the nesting:</p>
<pre><code>if (HasBeenProcessed(brTab, rowNumber, period))
{
     return "Already processed";
}
</code></pre>
<p>You've just saved a lot of tabs in the rest of your method.</p>
<p>I don't know what type <code>lstDataCheck</code> is but I would guess that it's a list. Make it a <code>HashSet&lt;string&gt;</code> instead to get O(1) lookups.</p>
<p>And again, a comment to explain the code and some bonus commented out code.</p>
<pre><code>//adding tabname &amp; Lineitem in a list if tabname &amp; Lineitem not found in lstDataCheck list
//lstDataCheck.Add(TabName + "~" + StandardLineItem + "~" + strPeriod);
lstDataCheck.Add(BRTab + "~" + RowNumber + "~" + strPeriod);
</code></pre>
<p>Commented out code should be deleted.</p>
<p>You can delete your explanation by introducing a method again:</p>
<pre><code>MarkRowAsProcessed(brTab, rowNumber, period);
</code></pre>
<p>It all gets a bit too much for me after that. You need more methods and more abstraction to make this readable.</p>
<p>Oh, this is a bad thing:</p>
<pre><code>catch(Exception ex)
{

}
return "";
</code></pre>
<p>Your method <em>always returns ""</em>. You've used <code>string.Empty</code> in other places so the inconsistency is another stumbling block when reading. Never catch all exceptions and ignore. On the rare case where you can safely do it, add a comment:</p>
<pre><code>// We ignore all failures here because &lt;clear reason why there are no mistakes I need 
// to know about in the above code&gt;. 
</code></pre>
<p>But seriously, a method this big and try-catch-ignore? Not good.</p>
    </div>