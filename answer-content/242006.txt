<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>DRTW: don't reinvent the wheel. Python provides extensive libraries for:</p>

<ul>
<li><a href="https://docs.python.org/3.8/library/logging.html" rel="nofollow noreferrer">logging</a></li>
<li><a href="https://docs.python.org/3.8/library/argparse.html" rel="nofollow noreferrer">parsing command-line arguments</a></li>
</ul>

<p>If you take advantage of these built-in modules you can minimize the amount of code required. You can probably divide the code base by two without any loss of functionality.</p>

<p>I repeat myself from other topics, but here is how you could do your logging:</p>

<pre><code>import logging
import sys

log_file = '/home/anonymous/test.log'

# logging - source: https://stackoverflow.com/questions/13733552/logger-configuration-to-log-to-file-and-print-to-stdout
# Change root logger level from WARNING (default) to NOTSET in order for all messages to be delegated.
logging.getLogger().setLevel(logging.NOTSET)

# Add stdout handler, with level INFO
console = logging.StreamHandler(sys.stdout)
console.setLevel(logging.INFO)
formater = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', "%Y-%m-%d %H:%M:%S")
console.setFormatter(formater)
logging.getLogger().addHandler(console)

# Add file handler, with level DEBUG
handler = logging.FileHandler(log_file)
handler.setLevel(logging.DEBUG)
formater = logging.Formatter('%(asctime)s\t%(filename)s\t%(lineno)s\t%(name)s\t%(funcName)s\t%(levelname)s\t%(message)s', "%Y-%m-%d %H:%M:%S")
handler.setFormatter(formater)
logging.getLogger().addHandler(handler)

logger = logging.getLogger(__name__)

# this line will appear on console and in the log file
logger.info(f"Application started")

# this line will only appear in the log file because level = debug
logger.debug(f"Log some gory details here")
</code></pre>

<p>In this example I am logging to the console and to a log file at the same time so you can track progress and keep a permanent record of activity. But the log file contains more details, like procedure name, line number, etc. The console will not print messages that have a debug level (= fewer details).</p>

<p>In your case you may want to add more <strong>destinations</strong>. If you want to have multiple log files no problem.</p>

<p>And if the built-in logging module is not sufficient for your needs you can still derive your own class from it to add necessary enhancements.</p>

<hr>

<p>To parse and validate <strong>command-line arguments</strong> at the same time:</p>

<pre><code>import argparse

# check command line options
parser = argparse.ArgumentParser()
# Number of days to keep: short form = -dk
parser.add_argument('--synchdd_days_keep', '-dk', dest="days_to_keep", 
type=int, choices=range(10), required=True, help="Number of days to keep: a value between 0 and 9")

args = parser.parse_args()

# show the values
print(f"Number of days to keep: {args.days_to_keep}")
</code></pre>

<p>This code expects an integer value for the argument <code>--synchdd_days_keep</code> but for demonstration purposes will also accept an alternative, short form: <code>-dk</code>. The integer must also be in the range 0-&gt;9.</p>

<p>Usage:<br>
Run with option <code>-h</code> to display the built-in help.<br>
will work: <code>-dk 1</code><br>
will not work: <code>-dk 10</code></p>

<p>That's it. Parsing and validating parameters with a minimum of code. Let Python do the job for you. The functionality is already available. I think this code can still be improved/prettified a bit. It's up to you to decide which arguments should be mandatory and which ones are optional.</p>

<p>My advice would to get a manual or tutorial about Python, and have a quick look at the standard features. Had you been aware, you would not have coded all those functions. There are better alternatives.</p>

<hr>

<p>One more tip: using F-strings to avoid string concatenations.
Instead of:</p>

<pre><code>log(0,"main: Available space: " + str(availableSpace) + " Necessary space: " + str(necessarySpace), file)
</code></pre>

<p>Use:</p>

<pre><code>print(f"Available space: {availableSpace} - Necessary space: {necessarySpace}")
</code></pre>

<p>With logger:</p>

<pre><code>logger.info(f"Available space: {availableSpace} - Necessary space: {necessarySpace}")
</code></pre>
    </div>