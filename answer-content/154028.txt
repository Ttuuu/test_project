<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Space Complexity</h3>

<p>This is quite inefficient in terms of the storage space it uses.</p>

<p>Assuming the bisection works as we'd hope, and the vector is cut exactly in half every time, the recursive call copies half the input vector. If, for example, we started with an array of a million items, the first recursive call will copy half a million items. The second recursive call will copy a quarter of a million items.</p>

<p>Since the first call also passed the input array by value, we expect that our search of one million items ends up copying about two million items (in addition to the original vector the user passed).</p>

<h3>Time Complexity</h3>

<p>Copying those items takes a fair amount of time as well. To be more specific, it takes <em>linear</em> time.</p>

<h3>Summary</h3>

<p>We normally expect a binary search to have complexity of about <span class="math-container">\$O(log N)\$</span>, and only descend to <span class="math-container">\$O(N)\$</span> in relatively rare worst cases. In this case, we get <span class="math-container">\$O(N)\$</span> in about the best case, and <span class="math-container">\$O(N^2)\$</span> in the bad cases.</p>

<p>This violates the normal expectations of a binary search badly enough that it effectively only barely qualifies as a binary search at all. In many cases, we can expect its performance to be substantially worse than a simple linear search.</p>

<h3>Recommendation</h3>

<p>You really don't want to pass the vector by value. Either pass it by reference, along with a pair of indexes into the vector giving the current upper and lower bounds of the part you want to search, or else pass a pair of iterators (there are probably other options as well, but in any case you want to pass an indication of the data to search rather than copying all the data you're going to search).</p>

<p>There are other parts of the code that could use changing as well, but that set of changes is likely to render many (most?) of them obsolete anyway, so I'm not going to get into other areas for now.</p>
    </div>