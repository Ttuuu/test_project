<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your business logic is getting muddled with your error-checking logic. I would recommend extracting your "null-to-Exception" conversions into different methods, so they don't appear here.</p>

<p>Ideally, <code>PEParser.parse()</code> and <code>PE.getSignature()</code> would not return null values, and would instead throw an exception directly if they encountered an issue. If you have the option to change these methods, I would do so. Otherwise, I would recommend wrapping them in methods that will convert null return values to exceptions, like so:</p>

<pre><code>PE GetPEFromPath(String path)
{
    PE pe = PEParser.parse(path);
    if (pe == null)
    {
        throw new IOException();
    }
    return pe;
}

PESignature GetSignatureFromPE(PE pe)
{
    PESignature ps = pe.getSignature();
    if (ps == null || !ps.isValid())
    {
        throw new IOException();
    }
    return ps;
}
</code></pre>

<p>These methods should return a valid object, or throw an exception - no other options. This way, we can write our business logic in a <code>try</code> block with no null-check interruptions, and if something fails, we will move gracefully to the <code>catch</code> block.</p>

<p>Now, we can transform your given code snippet into something more readable:</p>

<pre><code>//not an elf file. try PE parser
try
{
    PE pe = GetPEFromPath(path);
    PESignature ps = GetSignatureFromPE(pe);
}
catch (IOException e)
{
    Toast.makeText(this, "The file seems that it is neither an Elf file or PE file!", 3).show();
    throw e;
}
</code></pre>
    </div>