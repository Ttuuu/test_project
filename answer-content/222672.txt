<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have previously looked at this problem - many years ago. The first step is to create an indexed list of all the words in the dictionary, with the characters sorted in alphabetical order. This is a one-off cost O(n) [Where n in this case is the size of the dictionary, not the number of letters in the Scrabble tray].</p>

<p>Now, for each search of <em>n</em> letters, you can filter the list where the list element contains any letter that does not exist in the Scrabble tray. For example, if you had <em>DDA</em> in your hand, the word <em>DEAD</em> would be excluded because <em>E</em> does not exist in your hand. This should be O(n) [Where n in this case is the size of the dictionary, not the number of letters in the Scrabble tray].</p>

<p>The indexing/ordering of letters in the dictionary can be used to your advantage (especially if you use a jagged list), because some words are anagrams of others. So a check of the list for <em>DALE</em>, <em>DEAL</em>, <em>LADE</em> and <em>LEAD</em> should only cost one cycle in the search - four words for one! In addition, if your lowest character in your hand is not <em>A</em> (e.g. say it is <em>M</em>), you can use the indexing on the first character to remove a large swath of words in a single hit - similarly for the highest character in hand (e.g. if the highest character is <em>D</em>, you can stop searching the index when the first character is <em>E</em>).</p>

<p>So now, if you are doing a single search, your cost is at most O(2n), but probably more in the order of O(n + k*n/2). where k is the number of searches you will do. Happy to be corrected on my assessment of O because it has been a few decades since I last looked at formal definitions of O.</p>
    </div>