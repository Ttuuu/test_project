<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My solution with a @tail pointer, althought it added complexity it made adding to tail O(1), also having a variable size @size made it easier to counter edge cases.</p>
</blockquote>

<p>Having a <code>tail</code> pointer and a <code>size</code> variable makes totally sense.</p>

<blockquote>
  <p>Could the Linked List be optimize?</p>
</blockquote>

<p>I don't think you can improve performance much here, you already cover most / all of the corner cases. Well done to implement <code>add_at_index</code> with one iteration. </p>

<blockquote>
  <p>Are you able to understand how is design when reading the code?</p>
</blockquote>

<p>Here are some suggestions to make the code more readable</p>

<h2>Extract helper methods</h2>

<p>In your code you do several times <code>if @head == nil</code> to check if the list is empty. What about extracting an <code>empty?</code> method?</p>

<pre><code>def empty?
  head.nil?
end
</code></pre>

<p>Same goes for instance with increasing the size.</p>

<pre class="lang-rb prettyprint-override"><code>  def increase_size
    @size += 1
  end
</code></pre>

<h2>Use getter / setter methods</h2>

<p>You already define getter and setter methods in your class but then fail to use them.</p>

<pre class="lang-rb prettyprint-override"><code>attr_accessor :head, :size, :tail
</code></pre>

<p>Instead of doing <code>@head</code> you should use <code>head</code> etc. Another problem is that the getter / setter are public, move them to the private section of the class. There is no need that consumer of this class know about these implementation details.</p>

<h2>Implement the Enumerable interface</h2>

<p>At several places in your code you need to iterate over your list with a while loop. If you implement the <code>Enumerable</code> interface of Ruby, you only need to do this once.</p>

<pre class="lang-rb prettyprint-override"><code>class MyLinkedList
  include Enumerable

  def initialize
    @head = nil
    @size = 0
    @tail = nil
  end

  def each
    current = head
    until current.nil?
      yield current
      current = current.next
    end
  end

  def [](index)
    each_with_index do |item, i|
      return item.val if i == index
    end
  end
</code></pre>

<p><a href="https://ruby-doc.org/core-2.7.1/Enumerable.html" rel="nofollow noreferrer">https://ruby-doc.org/core-2.7.1/Enumerable.html</a></p>

<h2>Use Ruby method names</h2>

<p>You probably use the method stubs provided from LeetCode but I think it's still worth mentioning. Whenever possible you should use similar methods as already in the Ruby standard library. If we look at the Array class, we see for instance these methods.</p>

<pre class="lang-rb prettyprint-override"><code>def [](index) # get(index)
def unshift(value) # add_at_head(val)
def &lt;&lt;(value) # add_at_tail(val)
def append(value) # add_at_tail(val)
def [](index, value) # def add_at_index(index, val)
def shift # delete_at_head
def pop # delete_at_tail
</code></pre>

<h2>Summary</h2>

<p>Here are some of my suggestions applied</p>

<pre class="lang-rb prettyprint-override"><code>class MyLinkedList
  include Enumerable

  def initialize
    @head = nil
    @size = 0
    @tail = nil
  end

  def [](index)
    return if empty?
    return if index &gt; size - 1
    return head.val if index.zero?
    return tail.val if index == size - 1

    each_with_index do |item, i|
      return item.val if i == index
    end
  end

  def unshift(value)
    node = Node.new(value)
    node.next = head

    @tail = node if empty?
    @head = node
    increase_size

    value
  end

  def &lt;&lt;(value)
    return unshift(value) if empty?

    node = Node.new(value)
    tail.next = node
    @tail = node
    increase_size

    value
  end

  def []=(index, value)
    return add_at_head(value) if index == 0
    return add_at_tail(value) if head == tail
    return add_at_tail(value) if size == index
    return if index &gt; size

    each_with_index do |item, i|
      insert_node(item, value) if i == index - 1
    end
  end

  def each
    current = head
    until current.nil?
      yield current
      current = current.next
    end
  end

  private

  attr_accessor :head, :size, :tail

  def insert_node(item, value)
    tmp = item.next
    node = Node.new(value)
    item.next = node
    node.next = tmp
    increase_size
  end

  def empty?
    @head.nil?
  end

  def increase_size
    @size += 1
  end

  class Node
    attr_accessor :val, :next

    def initialize(val)
      @val = val
      @next = nil
    end
  end
end
</code></pre>
    </div>