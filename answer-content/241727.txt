<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code review</h2>

<pre><code>UserIdFactoryImpl
</code></pre>

<p>Why is this called <code>Impl</code> if it does <strong>not</strong> extend an interface? Why isn't it <code>final</code> or do you want to allow subclassing? It doesn't seem designed for that...</p>

<hr>

<pre><code>public Long buildUserId() {
</code></pre>

<p>Any reason why this returns a boxed <code>Long</code> instead of a <code>long</code>? Is this something to do with Spring maybe? Always prefer <code>long</code> if an object is not required. </p>

<p>Furthermore, on systems that allow multithreading I would expect a <code>synchronized</code> modifier to be present.</p>

<hr>

<pre><code>long generatedValue = System.nanoTime() / 100000;
</code></pre>

<p>Nano time is probably not doing what you think it does:</p>

<blockquote>
  <p>This method can only be used to measure elapsed time and is not
  related to any other notion of system or wall-clock time. The value
  returned represents nanoseconds since some fixed but arbitrary origin
  time (perhaps in the future, so values may be negative). The same
  origin is used by all invocations of this method in an instance of a
  Java virtual machine; other virtual machine instances are likely to
  use a different origin.</p>
  
  <p>This method provides nanosecond precision, but not necessarily
  nanosecond resolution (that is, how frequently the value changes) - no
  guarantees are made except that the resolution is at least as good as
  that of <code>currentTimeMillis()</code>.</p>
  
  <p>Differences in successive calls that span greater than approximately
  292 years (263 nanoseconds) will not correctly compute elapsed time
  due to numerical overflow.</p>
  
  <p>The values returned by this method become meaningful only when the
  difference between two such values, obtained within the same instance
  of a Java virtual machine, is computed.</p>
</blockquote>

<p>So the way you are using it to generate user ID's - which will probably live quite long - is <strong>very very</strong> dangerous.</p>

<p>The value <code>100000</code> should be a constant and should be explained. It is not clear why this magic value is present.</p>

<p>When dividing by 100000 you are not even getting to the millisecond requirements of the Java runtime. Worse, you are stripping off more than 16 bits from the 64 bit long value. This means that you are left with less than 48 bits that are hopefully unique. If you take the birthday bound in mind then you may understand that the chances of collision are pretty high just for this.</p>

<p>Even worse, a 100 microseconds precission (which is what you are looking at if I'm not mistaken) is an awfully large window to get collisions in. You could even restart the VM in that amount of time, and there is nothing that prevents the system to start all over.</p>

<hr>

<pre><code>if (existingUserIds().contains(generatedValue)) {
</code></pre>

<p>Any reason why this is not a <code>while</code> loop? Why would a value + 1 <strong>not</strong> collide with an earlier value?</p>

<hr>

<pre><code>long userId;
</code></pre>

<p>Ah, finally something I'm happy with: you haven't initiated the variable where it is not required. You could have made it <code>final</code>, but the opinions on that are divided. I must admit that I like doing that for highly secure code (and UID generation may be part of that, I suppose).</p>

<hr>

<pre><code>++incrementUserId;
</code></pre>

<p>I think <code>incrementUserId++</code> would be more clear here, there is no difference w.r.t. functionality. But seriously, what's wrong with the one-liner</p>

<pre><code>userId = generatedValue + 1;
</code></pre>

<p>so you can remove the variable altogether?</p>

<hr>

<pre><code>public List&lt;Long&gt; existingUserIds() {
</code></pre>

<p>I'm not sure I like this. A factory is should not be used to retrieve existing user ID's, so it should not be a <code>public</code> method. Same for the next method, which doesn't even return <code>UserId</code> values`!</p>

<hr>

<pre><code>query.setMaxResults(100);
</code></pre>

<p>Wait, what? <code>100</code> is a magic value here, I don't know why that value isn't configurable. And seriously, I hate to be the engineer handling more than 100 users on your system. Why set a maximum in the first place: maybe the system will slow down if the list gets too large, but that's still better than making the code fail, <em>right</em>?</p>

<h2>Verdict</h2>

<p>This tries to solve a problem that has already been solved. Just create a random UUID of 128 bits (-6 bits used as overhead). Because those UUID's use so many bits the chance of creating a duplicate are negligible.</p>

<pre><code>UUID uuid = UUID.randomUUID();
</code></pre>

<p>And that's it. Use <code>toString()</code> if you want to have the string representative instead. You can also retrieve the value as two 64 bit long values (returning the most &amp; least significant 64 bits of course).</p>
    </div>