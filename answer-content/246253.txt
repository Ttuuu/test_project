<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are quite a few issues in this code to worry about on top of the virtual call in the constructor...</p>
<pre><code>abstract public class MatlabData:eSoundMaster
</code></pre>
<p>The accessibility modifier should always come first and classes in C# are always PascalCase.</p>
<pre><code>public abstract class MatlabData : ESoundMaster
</code></pre>
<p>You are using public readonly fields in the base class:</p>
<pre><code> public readonly int numTonspuren = 32;
</code></pre>
<ol>
<li>It's usual to have public readonly fields use PascalCase</li>
<li>You then <em>hide</em> them with constants in the derived class and pass them to the base class's constructor. Don't hide the fields!</li>
</ol>
<p>Don't abbreviate in your code. If you are going to, be consistent about it. E.g. <code>nTonspuren</code> vs <code>numTonspuren</code>.</p>
<p>Methods in C# should be PascalCase. <code>isEQAMAvailable</code> should be <code>IsEQAMAvailable</code>. That said, <code>EQAMAvail</code> should be a readonly property and the method should be removed.</p>
<p>In general, and without a good reason not to*, one should prefer properties to fields in C#. It's idiomatic to do that and it's an extra level of abstraction and leaves you free to change how that property is implemented without breaking consumers.</p>
<p>From the example, it's not clear why you have a class hierarchy at all here. It looks like you need one class with a factory:</p>
<pre><code>// Typed directly on CodeReview, apologies for errors.
public class LabelDefinition 
{
    public string Text { get; }
    public string Name { get; }
    // etc.
}

public class MatlabData : eSoundMaster
{
    public bool EQAMAvail { get; }
    public int NumTonspuren { get; }
    public int NumSubgroups { get; }
    public int NumStandardTS { get; }
    public int NumPremiumTS { get; }
    public int NumOutputs { get; }
    public int NumSoundtrackLUTs { get; }

    public MatlabData(
        int numTonspuren, 
        int numIntermediateMixerChannels, 
        int numStandardTS, 
        int numPremiumTS,
        LabelDefinition[] labels,
        string[] additionalLabelNames)

    {
        NumTonspuren = numTonspuren;
        NumSubgroups = numIntermediateMixerChannels;
        NumStandardTS = numStandardTS;
        NumPremiumTS = numPremiumTS;
        LabelText = labels.Select(l =&gt; l.Text).ToArray();
        LabelName = labels.Select(l =&gt; l.Name).Concat(additionalLabelNames).ToArray();
        // etc.
    }
}

public class MatlabDataFactory
{
    public MatlabData CreateDefault =&gt; new MatlabData(...);
}
</code></pre>
<p>*There are vanishingly few reasons to use a public field over a property.</p>
    </div>