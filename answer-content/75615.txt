<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>It look like a common behaviour you want a <code>Player</code> to have is the ability of <code>def check(self, num):</code> and <code>def guess(self, check_func):</code>. Consider adding an <a href="https://docs.python.org/2/library/abc.html" rel="nofollow">ABC</a> to this code <code>class Player</code> with the 2 @abstractmethods and have HumanPlayer and ComputerPlayer inherit from this. </p></li>
<li><p>Move all the try and expect logic into a separate method (consider moving it in the <code>class Player</code> from the comment above if you decide to go that way), and wrap all you <code>raw_input</code> calls with this method. The idea being keep looking until you get a valid input from the user (youre' skipping this logic in <code>bulls, cows = int(raw_input('\tBulls: ')), int(raw_input('\tCows: '))</code> .. which will just crash with invalid input)</p></li>
</ul>

<p><strong>Larger Note</strong>
: I've been thinking the code in 5 sections (maybe reflecting hte code in these sections might make it more readable?):</p>

<ol>
<li>NumberValidation: the class solely responsible for running all the <code>raw_input</code> and validating the input until we get one (no one outside of this should be calling raw_input or running validation on the input values .. the game is "stuck" at this until a valid input is recognized)</li>
<li>GameValidation: the class responsible for checking the state of the game and calling it complete once we have all bulls (a lot of the <code>compare</code> and some of the <code>guess</code> functionality can go in here)</li>
<li>Player: the <a href="https://docs.python.org/2/library/abc.html" rel="nofollow">ABC</a> class that represents what a player should look like with the proper default behavior</li>
<li>The <code>HumanPlayer</code> and the <code>ComputePlayer</code> class implementations</li>
<li>The main method for game play between HumanPlayer and the ComputerPlayer.</li>
</ol>
    </div>