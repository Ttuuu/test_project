<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General design</h1>

<p>Your dataset representation is a bit unconventional: since you need to write/read the file line by line, having the dataset oriented the other way might prove a hindrance. I understand that you might need to include / exclude columns from a particular file: but it isn't a sufficient reason to rotate your dataset: a more general, line-oriented dataset representation would allow you to do so too. In principle, you should separate concerns: handling your data on the one hand, reading/writing it from/to a csv file on the other hand.</p>

<p>Also, your design forces the user to create headers, which isn't required by the format. The explanation, if I understood correctly, is that you weren't able to provide a type-erasing interface, so it was either headers for everyone or for no one.</p>

<h1>Type-flexible cell</h1>

<p>There are lots of ways to achieve that, and none is indisputably superior. You could consider <code>std::variant</code>, which is a standard, type-safe <code>union</code>:</p>

<pre><code>#include &lt;variant&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main() {

    using Cell = std::variant&lt;int, double, std::string&gt;; // Cell can contain any of these types
    std::vector&lt;Cell&gt; record{"John", "Doe", 41, 1.75};
    for (const auto&amp; cell : record) {
        std::visit([](const auto&amp; content) { std::cout &lt;&lt; content &lt;&lt; ' '; }, cell);
    }
}
</code></pre>

<p>Any column or line can now be represented by a sequence of <code>Cell</code>s. It means that you don't need to hard-code a header, or to store your data by type-homogeneous columns. You can even have your whole dataset in one big vector: it can be a lot faster because you have better locality (in your current implementation, the processor has to fetch the cells of a given line from as many places in memory).</p>

<p>If you're ready to anticipate the next standard (<code>C++20</code>), and that you have your dataset contained in one big <code>std::vector&lt;Cell&gt;</code>, you can then have rows and columns as <code>range::view</code>s over your dataset: </p>

<pre><code>#include &lt;variant&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;range/v3/core.hpp&gt;
#include &lt;range/v3/view.hpp&gt;

using namespace ranges;
using namespace ranges::view;

int main() {

    using Cell = std::variant&lt;int, double, std::string&gt;; 
    std::vector&lt;Cell&gt; records{"John", "Doe", 41, 1.75, "Jane", "Smith", 35, 1.63}; 
    const int row_sz = 4;

    auto column = [row_sz](int n) {
        // to get column n, skip the n first elements
        // then take every row-szth element
        return drop(n) | stride(row_sz);
    };

    for (auto cell : records | column(1)) {
        std::visit([](const auto&amp; content) { std::cout &lt;&lt; content &lt;&lt; ' '; }, cell);
    }
    std::cout &lt;&lt; std::endl;

    auto row = [row_sz](int n) { return slice(n*row_sz, n*row_sz+row_sz); };
    for (auto cell : records | row(1)) {
        std::visit([](const auto&amp; content) { std::cout &lt;&lt; content &lt;&lt; ' '; }, cell);
    }
    std::cout &lt;&lt; std::endl;

}
</code></pre>

<h1>Performance</h1>

<p>Your csv reader is inefficient. You read each line (one memory allocation and copy), then cut the line into pieces (as many allocations / conversions as pieces). You can build your dataset from the file without reading it into lines first: every time you read a ';' you push_back a cell, and every time you read a '\n' you push_back a last cell in the record, and then push_back the record (conceptually, because as I said I believe a flat std::vector with row-size as an additional information is better). It is a simplification of course, because you have to take care of quoted fields, <code>eof</code> and error-handling, but that's the general idea. You can design it as a state-machine with customization points for the cell and record handlers.</p>
    </div>