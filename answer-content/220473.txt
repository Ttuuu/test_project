<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Use Symbolic Constants Rather Than Numeric Constants</strong><br>
In most programming languages there is a way to define symbolic constants for numbers which makes the code more readable and easier to maintain. When raw numbers are used in code they are sometimes called Magic Numbers. Using Magic Numbers is generally considered a poor programming practice as discussed in <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">this stackoverflow question</a>. </p>

<p>While the number 30 isn't quite a magic number since it is used as the maximum dimensions for the arrays in the matrix, it would be beneficial to anyone that needs to read or maintain the code to define symbolic constants for it. This would allow anyone who needs to edit the code to change the maximum dimensions to change 1 number in 1 place.</p>

<p>In C this would be:</p>

<pre><code>#define MAXIMUM_MATRIX_DIMENSION 30
</code></pre>

<p>and in C++ this would be:</p>

<pre><code>const int MAXIMUM_MATRIX_DIMENSION = 30;
</code></pre>

<p>Then the integer array <code>arr</code> could be declared as:</p>

<pre><code>int arr[MAXIMUM_MATRIX_DIMENSION][MAXIMUM_MATRIX_DIMENSION];
</code></pre>

<p>It then becomes very easy to change the maximum size of the matrix by only changing one line.</p>

<p><strong>Meaningful Variable Names</strong><br>
The code might be easier to read if the variables <code>m</code> and <code>n</code> had more meaningful names, <code>m</code> could be <code>matrixDimension</code>. It's not really clear what <code>n</code> since it could also be `matrixDimension.</p>

<p>The code might also be more readable if the variable <code>arr</code> had a more meaningful name, perhaps <code>baseMatrix</code>.</p>

<p><strong>Declare Variables as Needed</strong><br>
The C programming language now allows variables to be created where they are needed, for instance the variables <code>i</code> and <code>j</code> could be created within the for loops</p>

<pre><code>    for(int i = 0; i &lt; m; i++){
        for(int j = 0; j &lt; n; j++){
            printf("Type elements: ");
            printf("Element[%d,%d]: ",i,j);
            scanf("%d",&amp;arr[i][j]);
        }
    }
</code></pre>

<p>The variables used to contain the sums should also be declared where they are initialized.</p>

<p><strong>Error Checking on Input</strong><br>
It is always better to check user input before using it to perform actions in the code. For example checking the size of the dimensions before using it as a control value in the previous loop. If the user enters a number less than 1 or greater than 29 the program will experience undefined behavior and may crash. If the number is 0 or less the loops will never execute and if the number is greater than 29 matrix values will be written to memory that hasn't been allocated to the arrays.</p>

<pre><code>    m = -1;
    while (m &lt; 1 or m &gt;= MAXIMUM_MATRIX_DIMENSION)
    {
        printf("What dimensions of matrix you want?(1 integer number greater than 0 and less than %d) ", MAXIMUM_MATRIX_DIMENSION);
        scanf("%d",&amp;m);
    }
</code></pre>

<p><strong>Complexity</strong><br>
The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principe that applies here. <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">The Single Responsibility Principle states</a>:</p>

<blockquote>
  <p>Every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>There are at least 4 possible functions in <code>main()</code> and possibly more. Each of the outer for loops is a good candidate for a function. The possible functions are:  </p>

<ul>
<li>Get the dimensions of the matrix  </li>
<li>Get the individual values of the matrix  </li>
<li>Print the matrix  </li>
<li>Calculate and report the sums of the matrix columns, rows and diagonals (this could be 2 functions).</li>
</ul>
    </div>