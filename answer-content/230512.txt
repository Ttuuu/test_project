<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>
<ul>
<li><p>Comments are just noise and thus reduce readability if they state what is obvious in the code. EG the comment <code>//Read from each line</code> is followed by the line
<code>lineReader.eachLine(filePath, (line)=&gt; {</code></p>
</li>
<li><p>Do not mix styles. You use semicolons randomly in the code. Use them or not, do not mix them</p>
</li>
<li><p>Do not add empty blocks or as your comment describes  "do nothing"  . Example <code>if (line.includes('ATTACK LOG')) { } else </code> should be <code>if (!line.includes('ATTACK LOG')) {</code></p>
</li>
<li><p>Do not add magic numbers or string in the code. Define them as constants in one place</p>
</li>
<li><p>Always delimite statement blocks with <code>{}</code>. EG <code>for(let i of attackData) i &amp;&amp; tempAttackData.push(i);</code> should be  <code>for(const i of attackData) { i &amp;&amp; tempAttackData.push(i) }</code></p>
</li>
<li><p>Use constants for variables that do not change</p>
</li>
<li><p>Single argument arrow functions do not need the <code>()</code> around the argument. EG <code>(line)=&gt; {</code> can be <code>line =&gt; {</code></p>
</li>
<li><p>Spaces between commas</p>
</li>
<li><p>Undeclared variable are dangerouse. The variables <code>finalResults</code>, <code>attackData</code>, <code>tempAttackData</code>, <code>cleanedAttackData</code> and <code>removedDateTime</code> are all undecalared and thus are part of the top level scope and may clash creating very hard to debug problems</p>
</li>
<li><p>Avoid single use variables. EG  <code>finalResults = new Results(result); finalResults.save();</code> can be <code>new Results(result).save();</code></p>
</li>
<li><p><code>i</code> is used as a loop counter and should not be used to represent a value or item of an array. The loop <code>for (let i of ...</code> should be <code>for (const item of...</code></p>
</li>
<li><p>Do not add arguments to a function if that argument is not used. EG <code>tempAttackData.forEach((data, index) =&gt;</code> You do not use <code>index</code> so there is no need to define it</p>
</li>
</ul>
<h2>Logic</h2>
<p>The whole thing feels clumsy as you move data from array to array, variable to variable, and step over and into nested and superfluous statements blocks.</p>
<p>It can be greatly simplified by creating a few helper functions to separate the various tasks. See example.</p>
<p>There also seams to be a bug as you do not check if the line is the second header line (contains <code>"---- LOOT -----"</code>).</p>
<h2>Example</h2>
<p>The example breaks the task into smaller functions reducing the overall source code (and executional) complexity.</p>
<p>The additional item at the end of the data line is just ignored (rather than popped from the array) by the function <code>Attack</code> which creates the attack object you save.</p>
<pre><code>const LOGS = "/retrieve-logs";
const message = "Results successfully loaded";
const FILE_PATH = "AttackLog-2019-10.log";    
const FIELDS = "accountNumber,timeOfAttack,trophies,searches,ds,gold,elixir,darkElixir,trophyChange,victory,damagePercentage,bonusGold,bonusElixir,bonusDarkElixir";
const Attack = new Function(...FIELDS.split(","), "return {" + FIELDS + "};");

const valid = line =&gt; ! ["ATTACK LOG", "GOLD", "LOOT"].some(mark =&gt; line.includes(mark));
const clean = line =&gt; line.slice(22).replace("||", "|");
const parse = line =&gt; Attack(...clean(line).split("|").map(item =&gt; item.trim())); 

router.get(LOGS, (req, res) =&gt; {        
    lineReader.eachLine(FILE_PATH, line =&gt; { valid(line) &amp;&amp; new Results(parse(line)).save() });
    Results.find({}, (err, success) =&gt; { res.status(200).send({message, success}) });
});
</code></pre>
    </div>