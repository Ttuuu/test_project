<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some possible improvements:</p>

<p>You select the <code>bookList</code> multiple times. You only need to select it once, in the outer scope, and let lexical scoping do the rest - you can remove the line that re-declares it without issues.</p>

<p>Inserting characters from user input <em>directly</em> into a string of HTML markup can occasionally result in unexpected elements appearing when the input contains <code>&lt;</code> brackets. (This can also allow for arbitrary code execution)</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const bookItem = document.querySelector('tr');
const title = 'Title &lt;Subtitle in brackets&gt;';
const author = '&lt;img src onerror="alert(\'evil\');"';
bookItem.innerHTML =`
  &lt;td&gt;${title}&lt;/td&gt;
  &lt;td&gt;${author}&lt;/td&gt;
`;</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;table&gt;
  &lt;tr&gt;
  &lt;/tr&gt;
&lt;/table&gt;</code></pre>
</div>
</div>


<p>Either escape <code>&lt;</code> brackets first, or insert the <code>&lt;td&gt;</code>s without content, then select them afterwards and assign to their <code>textContent</code> (which won't have any escaping issues).</p>

<pre><code>&lt;td&gt;${this.title.replace(/&lt;/g, '&amp;lt;')}&lt;/td&gt;
&lt;td&gt;${this.author.replace(/&lt;/g, '&amp;lt;')}&lt;/td&gt;
&lt;td&gt;${this.isbn.replace(/&lt;/g, '&amp;lt;')}&lt;/td&gt;
&lt;td&gt;&lt;button type="submit" class="delete"&gt;X&lt;/button&gt;&lt;/td&gt;`;
</code></pre>

<p>The return value from <code>addBook</code> is not used, so there's no need for it to return a value. Unless you're <em>intending</em> consumers of <code>Book</code> to use the created <code>&lt;tr&gt;</code>, you can remove the <code>return</code> from the end of the function.</p>

<p>Your <code>deleteBook</code> function is odd - whenever <em>anything</em> in the <code>bookList</code> is clicked, it will remove the grandparent element. This does not seem desirable. You probably want to remove a <code>&lt;tr&gt;</code> only when the <code>X</code> button is clicked. Add an event listener to the button instead:</p>

<pre><code>addBook(){
  const tr = document.createElement('tr');
  tr.innerHTML =`
  &lt;td&gt;${this.title.replace(/&lt;/g, '&amp;lt;')}&lt;/td&gt;
  &lt;td&gt;${this.author.replace(/&lt;/g, '&amp;lt;')}&lt;/td&gt;
  &lt;td&gt;${this.isbn.replace(/&lt;/g, '&amp;lt;')}&lt;/td&gt;
  &lt;td&gt;&lt;button type="submit" class="delete"&gt;X&lt;/button&gt;&lt;/td&gt;`;
  const button = tr.querySelector('button');
  button.addEventListener('click', () =&gt; {
    tr.remove();
    showNotification('Deleted Item', 'success');
  });
  bookList.appendChild(tr);
}
</code></pre>

<p>You could also keep using your listener on the whole <code>bookList</code>, but you'd have to make sure that the clicked element is the X button before removing elements - check if the target <code>.matches('.delete')</code>. (but even then, it's strange for that functionality to be <em>outside</em> of the <code>Book</code> class - it would make more sense for it to be encapsulated)</p>

<p>If you do use the delegation method, use <code>event.target</code>, <em>not</em> <code>event.originalTarget</code> (which is <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget" rel="nofollow noreferrer">non-standard</a> and only works on Firefox - on any other browser, it will throw an error). (also, best to name the variables appropriately - you're passing the <em>event</em> to <code>deleteBook</code>, not the <code>event.target</code>, so calling the parameter <code>target</code> is confusing)</p>

<p>You can make the <code>submit</code> listener a bit less repetitive by calling <code>e.preventDefault</code> on the first line of the function, that way you don't have to write it twice later, nor do you have to worry about accidentally not calling it in case you add more logical paths to the function. (And if you call <code>preventDefault()</code>, there's no need to <code>return false</code>, nothing needs to be returned)</p>

<p>In <code>getFields</code>, you're implicitly creating a global variable <code>fields</code>. This doesn't do anything useful, and will throw an error in strict mode (which you should be using). Just remove the <code>fields =</code> part:</p>

<pre><code>function getFields(){
  return {
    'title': document.getElementById('title').value,
    'author': document.getElementById('author').value,
    'isbn': document.getElementById('isbn').value
  };
}
</code></pre>

<p>Doesn't matter much here, but if you had more fields, to be less repetitive, you could replace that with:</p>

<pre><code>function getFields() {
  return Object.fromEntries(
    ['title', 'author', 'isbn'].map(
      id =&gt; [id, document.getElementById(id).value]
    )
  );
}
</code></pre>

<p>It's good to prefer <code>const</code> whenever possible - using <code>let</code> is a warning to future readers of the script (including yourself) that you may be reassigning the variable later. So, you could replace</p>

<pre><code>for(let [key, value] of Object.entries(fields)){
</code></pre>

<p>with</p>

<pre><code>for(const [key, value] of Object.entries(fields)){
</code></pre>

<p>Or, even better, since you don't care about the keys at all, only that none of the values are empty:</p>

<pre><code>function validateForm(fields){
  return Object.values(fields).every(Boolean);
}
</code></pre>

<p>When <code>alert</code> is used as an identifier in Javascript, it usually refers to <code>window.alert</code>. Calling a <em>different</em> variable <code>alert</code> can be confusing. Consider changing</p>

<pre><code>const alert = document.createElement('div');
</code></pre>

<p>to something like <code>alertDiv</code>.</p>

<p>Template literals look nicer than concatenation with <code>+</code>, but if there's no concatenation going on, and there aren't any <code>'</code> or <code>"</code> characters causing escaping issues, there's no point in a template literal. Replace</p>

<pre><code>alertDiv.classList = `${type}`;
</code></pre>

<p>with</p>

<pre><code>alertDiv.classList = type;
</code></pre>

<p>But the <code>classList</code> is generally understood to be a read-only <code>DOMTokenList</code>. While you <em>can</em> change the class of an element by assigning to the <code>classList</code> property, it looks quite odd. If you want to assign a class, either use <code>classList.add</code>, or (if you don't care about overwriting the existing class) assign to the <code>className</code> property:</p>

<pre><code>alertDiv.className = type;
</code></pre>

<p>Using <code>document.createTextNode</code> is often unnecessarily verbose. You can just assign to the <code>textContent</code> of the element instead. Replace</p>

<pre><code>alertDiv.appendChild(document.createTextNode(message));
</code></pre>

<p>with</p>

<pre><code>alertDiv.textContent = message;
</code></pre>
    </div>