<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python is notoriously slow with native loops; i.e.</p>

<pre><code>for j in range(nRun):
    ...
    for t in range(T):
        ...
</code></pre>

<p>is probably your bottleneck. I haven't tried to understand necessarily what you are coding but can you vectorise some calculations?</p>

<p>Something like </p>

<pre><code>sigma = np.ones(nActions)
mu = np.array([-0.4677,-0.1249,1.4790,-0.8608,0.7847,0.3086,-0.2339,-1.0570,-0.2841,-0.0867])
def Reward(action:int, mu:np.ndarray, sigma:np.ndarray):
    return mu[action] + sigma[action]*np.random.normal()
</code></pre>

<p>is better replaced by:</p>

<pre><code>temp_rvs = np.random.rand(nRun * T, 10)
reward_arr = mu + sigma * temp_rvs
</code></pre>

<p>then you can just index an existing variable instead of generating random variables each time through a function in your loop, i.e. you can:</p>

<pre><code>reward[(j+1)*T, a]
</code></pre>

<p>But this takes up \$10 * nRun * T * 8\$ bytes of RAM to store the random variables.</p>

<p>I answered a similar question to this here: <a href="https://quant.stackexchange.com/questions/41086/how-to-simulate-this-gamma-expansion-in-a-python-way/41096#41096">How to simulate this Gamma expansion in a Python way</a> perhaps it might give you some ideas.</p>
    </div>