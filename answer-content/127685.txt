<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First things first, your variables. The names aren't great. For the <code>ws1</code> to <code>ws3</code> you're using numbers, which should tell you it's not specific enough or you aren't being effective with your variables.</p>

<p>Worksheets have a <code>CodeName</code> property - View Properties window (F4) and the <code>(Name)</code> field can be used as the worksheet name. This way you can avoid <code>Sheets("Data")</code> and instead just use <code>Data</code>.</p>

<p>Also <code>lastcol3</code> - what's that? <code>lastColumn</code>? Why the <code>3</code>, also you missed camelCase on that one. <a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a> have <code>camelCase</code> for local variables and <code>PascalCase</code> for other variables and names. You could just call it <code>resultsLastColumn</code> instead.</p>

<p><code>i,r,j,k</code> - these are counters right?</p>

<p>r - <code>currentColumn</code>. <code>i,j,k</code> are acceptable, but personal preference I like to avoid those.</p>

<p><code>Dim arr</code> - When you don't define your variable, VBA will declare it as a <em>Variant</em>, which are <a href="https://msdn.microsoft.com/en-us/library/twcxd6b8.aspx" rel="nofollow noreferrer">objects</a>:</p>

<p>Performance. A variable you declare with the Object type is flexible enough to contain a reference to any object. However, when you invoke a method or property on such a variable, you always incur late binding (at run time). To force early binding (at compile time) and better performance, declare the variable with a specific class name, or cast it to the specific data type.</p>

<p>By not declaring variables, you could possibly be paying a penalty.</p>

<p>In this case, it is a <code>variant</code>, but it's good to note for the future. It should have a more descriptive name, though.</p>

<p>lastColumn and <code>numRows</code> are integers - Integers - <a href="https://stackoverflow.com/questions/26409117/why-use-integer-instead-of-long/26409520#26409520">integers are obsolete</a>. According to <a href="https://msdn.microsoft.com/en-us/library/office/aa164506(v=office.10).aspx" rel="nofollow noreferrer">msdn</a> VBA <em>silently</em> converts all integers to <code>long</code>.</p>

<p>Additionally, your <code>numRows</code> is set to 1000 and never changed. Why not</p>

<pre><code>Const NUMBER_OF_ROWS As Long = 1000
</code></pre>

<p>Your indenting is non-existent. 
It's good practice to indent <em>all of your code</em> that way <code>Labels</code> will stick out as obvious.</p>

<p>Always turn on <code>Option Explicit</code>. You can have it automatically by going to Tools -&gt; Options in the VBE and checking the <strong>Require Variable Declaration</strong> option. This way if you have any variables not defined, the compiler will let you know. In this case your variable <code>wb</code> isn't defined.</p>

<hr>

<p>You use <code>Application.Calculation</code> a lot. You set it to <code>Manual</code> and do some stuff, then set it to <code>Automatic</code>. Then you loop <em>up to 5000 times</em> in your <code>r loop</code> turning it manual and back to automatic. None of that is needed. The calculations you're doing in VBA aren't affected by the worksheet calculation. I don't know what kind of resources that's using, but I can't imagine it's helping.</p>

<hr>

<p>Comments - <a href="http://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="nofollow noreferrer">"code tell you how, comments tell you why"</a>. The code should speak for itself, if it needs a comment, it might need to be made more clear. If not, the comment should describe <em>why</em> you're doing something rather than <em>how</em> you're doing it. Here are a <a href="https://softwareengineering.stackexchange.com/a/254979/125931">few reasons</a> to avoid comments all together.</p>

<hr>

<p><code>ActiveSheet.DisplayPageBreaks = False</code> - this will only work on the active sheet, what if the sheet isn't active. Why not tell it which sheet to do it on?</p>

<p>Also your last <code>Application.EnableEvents</code> is missing the <code>.</code>.</p>

<hr>

<p>I don't quite understand this line</p>

<pre><code>ws1.Range("D1") = classArray(1, r)
</code></pre>

<p>Does this need to move down column D with the class names?</p>

<hr>

<p>With your <code>arr</code> array</p>

<pre><code>ReDim arr(1 To NUMBER_OF_ROWS, 1 To resultsLastColumn)
For r = 1 To resultsLastColumn
    ws1.Range("D1") = classArray(1, r)
    For i = 1 To NUMBER_OF_ROWS
        arr(i, r) = ws1.Cells(6 + i, 11)
    Next
Next
For k = 1 To resultsLastColumn
    For j = 1 To NUMBER_OF_ROWS
        If arr(j, k) = 15 Then
            ThisWorkbook.Data.Cells(6 + j, 4) = 1 + ThisWorkbook.Data.Cells(6 + j, 4)
        ElseIf arr(j, k) = 28 Then
            ThisWorkbook.Data.Cells(6 + j, 5) = 1 + ThisWorkbook.Data.Cells(6 + j, 5)
        ElseIf arr(j, k) = 50 Then
            ThisWorkbook.Data.Cells(6 + j, 6) = 1 + ThisWorkbook.Data.Cells(6 + j, 6)
        End If
    Next
Next
</code></pre>

<p>This is pretty inefficient. Why not just pull everything into the array and do the sorting in it, rather than on the sheet. That will be quicker.</p>

<pre><code>arr = Data.Range(Cells(1, 6), Cells(NUMBER_OF_ROWS, resultsLastColumn))
</code></pre>

<p>Now you can loop with your <code>j</code> and <code>k</code> in the <code>arr</code> or just eliminate <code>k</code> and reuse <code>i</code>.</p>

<hr>

<p>So at the very least, you'll have this</p>

<pre><code>Option Explicit
Private Sub UpdateData()

    Application.ScreenUpdating = False
    Application.DisplayStatusBar = False
    Application.EnableEvents = False
    ActiveSheet.DisplayPageBreaks = False
    Application.Calculation = xlCalculationManual

    Const NUMBER_OF_ROWS As Long = 1000
    Dim resultsLastColumn As Integer
    Dim classArray As Variant
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim arr As Variant

    resultsLastColumn = Results.Cells(4, Results.Columns.Count).End(xlToLeft).Column - 1
    ReDim arr(1 To NUMBER_OF_ROWS, 1 To resultsLastColumn)
    classArray = Results.Range(Results.Cells(4, 2), Results.Cells(4, resultsLastColumn + 1))

    ClassCalculationSheet.Range("D1:D" &amp; resultsLastColumn) = classArray()

    arr = Data.Range(Cells(1, 6), Cells(NUMBER_OF_ROWS, resultsLastColumn))
    For j = 1 To resultsLastColumn
        For i = 1 To NUMBER_OF_ROWS
            If arr(i, j) = 15 Then
                Data.Cells(6 + j, 4) = 1 + Data.Cells(6 + i, 4)
            ElseIf arr(i, j) = 28 Then
                Data.Cells(6 + j, 5) = 1 + Data.Cells(6 + i, 5)
            ElseIf arr(i, j) = 50 Then
                Data.Cells(6 + j, 6) = 1 + Data.Cells(6 + i, 6)
            End If
        Next
    Next

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayStatusBar = True
    Application.EnableEvents = True
    ActiveSheet.DisplayPageBreaks = True

End Sub
</code></pre>

<p>Some tweaking might be needed as I can't run the macro to see what needs adjusting.</p>
    </div>