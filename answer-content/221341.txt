<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you are unit testing the wrong code.  You should be looking to unit test your code and not Microsofts code.  It's a good place to write interfaces around their code for testing so you can switch out MS code with your own test implementation.  You didn't show what your interface looked like but I would suggest that if you want to replace SaveFileDialog then you should have an interface just for that and not also have SaveFileDialog also write the file. </p>

<p>Something along the lines of </p>

<pre><code>public interface ISaveFileDialog
{
    string GetFileName(string suggestedFileExtension = null, string suggestedFileExtensionName = null, string suggestedFileName = null);
}

public class SaveFileDialog : ISaveFileDialog
{
    public string GetFileName(string suggestedFileExtension = null, string suggestedFileExtensionName = null, string suggestedFileName = null)
    {
        string filter = "All Files|*.*";

        if (suggestedFileExtension != null)
        {
            filter = $"{suggestedFileExtensionName ?? string.Empty}|*{suggestedFileExtension}|" + filter;
        }

        Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog
        {
            FileName = suggestedFileName ?? string.Empty,
            DefaultExt = suggestedFileExtension ?? string.Empty,
            Filter = filter
        };

        switch (dlg.ShowDialog())
        {
            case true:
                return dlg.FileName;
            default:
                return null;
        }
    }
}

public interface IWriteFile
{
    bool WriteText(string fileName, string content);
}

public class WriteFile : IWriteFile
{
    public bool WriteText(string fileName, string content)
    {
        try
        {
            File.WriteAllText(fileName, content);
        }
         // Just a simple catch to show example
        catch (Exception ex)
        {
            return false;
        }
        return true;
    }
}

public class SaveFile
{
    private readonly ISaveFileDialog saveFileDialog;
    private readonly IWriteFile writer;
    public SaveFile(ISaveFileDialog saveFileDialog, IWriteFile writer)
    {
        this.saveFileDialog = saveFileDialog;
        this.writer = writer;
    }

    public bool Save(string content, string suggestedFileExtension = null, string suggestedFileExtensionName = null, string suggestedFileName = null)
    {
        var fileName = saveFileDialog.GetFileName(suggestedFileExtension, suggestedFileExtensionName, suggestedFileName);
        if (fileName == null)
        {
            return false;
        }

        return writer.WriteText(fileName, content);

    }
}
</code></pre>

<p>Now we wrapped MS code in interfaces that we want to test.  For unit test you can now have a mock of both ISaveFileDialog and IWriteFile.  </p>

<p>Unit test against SaveFile could be the following:</p>

<ol>
<li>Verify that if GetFileName return null that WriteText never got hit </li>
<li>GetFileName return a string that WriteText did get hit</li>
<li>SaveFile returns true if WriteText returns true</li>
<li>SaveFile returns false if WRiteText returns false</li>
<li>if GetFileName returns null that SaveFile returns false</li>
</ol>
    </div>