<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP8</h2>
<p><code>nodeDepths</code> should be <code>node_depths</code> in snake_case.</p>
<h2>Function naming</h2>
<p><code>helper</code> is not a helpful name for a function. If I were to guess what this does, it should maybe be called <code>recurse_node_depths</code>.</p>
<h2>Instance methods</h2>
<p>As it stands, <code>BinaryTree</code> does not deserve to have an <code>__init__</code>. It would be better-suited as a <code>@dataclass</code> or maybe a named tuple. That said, it probably makes more sense for <code>node_depths</code> to be an instance method where <code>self</code> replaces <code>root</code>.</p>
<h2>Integer-by-reference</h2>
<p>My first read of this code was wrong. <code>final</code> is only ever going to have one member. My guess is that you did this to effectively pass an integer by reference, but this is a gross hack. Instead, just return the evolving sum as an integer from your recursion, and the uppermost return will be the total that you need.</p>
<h2>Slots</h2>
<p>Another way to squeeze performance out of this is to initialize <code>__slots__</code> for <code>BinaryTree</code> based on the three known members.</p>
<h2>Recursion</h2>
<p>Recursion is not a great idea in Python, for at least two reasons:</p>
<ul>
<li>Given that there is no indication to the maximum depth of your input tree, you may blow the stack.</li>
<li>Since Python does not have tail recursion optimization, recursion is slower than some other languages.</li>
</ul>
<p>So you should attempt to reframe this as an iterative implementation.</p>
    </div>