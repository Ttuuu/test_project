<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not related to the main issue (recursivity) but the solution could use caches.</p>

<p>Let me explain:</p>

<p>The idea of the original solution is to turn on all the cells that are threatened by a queen. It uses some loops to enable or disable the cells. </p>

<p>That is very precise but it is slow.
Instead, you might enable or disable sets. For example rows, columns, diagonals. </p>

<p>There are 8 rows, 8 columns, 8 main-diagonal and its parallels, and 8 counter-diagonal and its parallels.</p>

<p>My purpose is to use that like the code below:</p>

<pre class="lang-java prettyprint-override"><code>    private void putOn(int row, int col) {
        chessBoard[row][col] = true;
        rows[row] = true;
        cols[col]= true;
        rightDiagonals[row + col] = true;
        leftDiagonals[row - col + size] = true;
    }


    private void removeOn(int row, int col) {
        chessBoard[row][col] = false;
        rows[row] = false;
        cols[col]= false;
        rightDiagonals[row + col] = false;
        leftDiagonals[row - col + size] = false;
    }


    public boolean canPlace(int row, int col) {
        return !chessBoard[row][col] &amp;&amp; !rows[row] &amp;&amp; !cols[col] &amp;&amp; !rightDiagonals[row + col] &amp;&amp; !leftDiagonals[row - col + size];
       //  10x slower for  big cases     return !rowAndColhasAQueen(row, col) &amp;&amp; !diagonalHasAQueen(row, col);
    }
</code></pre>
    </div>