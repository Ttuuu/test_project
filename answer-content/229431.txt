<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static explicit operator NonEmptyString(string value)
{
  try
  {
    return new NonEmptyString(value);
  }
  catch (ArgumentException ex)
  {
    throw new InvalidCastException($"Unable to convert the provided string to {typeof(NonEmptyString).Name}", ex);
  }
}
</code></pre>
</blockquote>

<p>The <code>try/catch</code> is superfluous, a guard clause should be throwing before the constructor is even invoked IMO; the exception could be an <code>ArgumentNullException</code>, but that would be confusing if <code>value</code> was actually <code>string.Empty</code>. Perhaps derive a custom exception from <code>ArgumentException</code>:</p>

<pre><code>if (!string.IsNullOrEmpty(value))
{
    throw new NullOrEmptyStringArgumentException()
}
</code></pre>

<p>The problem is that it makes the <code>if (!string.IsNullOrEmpty(value))</code> validation logic (<em>and</em> the conditional throw) show up in two places... unless we pulled it out of local scope:</p>

<pre><code>private static void ThrowIfInvalid(string value)
{
    if(string.IsNullOrEmpty(value))
    {
        throw new NullOrEmptyStringArgumentException(...);
    }
}
</code></pre>

<p>So we get:</p>

<pre><code>public static explicit operator NonEmptyString(string value)
{
    ThrowIfInvalid(value);
    return new NonEmptyString(value);
}
</code></pre>

<p>And the constructor can <code>ThrowIfInvalid</code> as well:</p>

<pre><code>public NonEmptyString(string value)
{
  ThrowIfInvalid(value);
  this.Value = value;
}
</code></pre>

<p>Much simpler everywhere! Except... that doesn't solve the default constructor problem, and <a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1065-do-not-raise-exceptions-in-unexpected-locations?view=vs-2019" rel="nofollow noreferrer">throwing in a getter violates CA1065</a>. I would probably have these:</p>

<pre><code>public static NonEmptyString Invalid { get; } = default;
public bool IsValid =&gt; this != Invalid;
</code></pre>

<p>The <code>obj is NonEmptyString</code> check in the <code>Equals</code> override works in non-obvious ways given a <code>string</code> argument, ...is the implicit cast involved? Would an explicit <code>obj as NonEmptyString</code> soft-cast seem more obviously correct here? Gotta love implicit operators! Let's refer to the docs!</p>

<blockquote>
  <p>User-defined conversions are not considered by the <code>is</code> and <code>as</code> operators.</p>
  
  <p><sub><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/user-defined-conversion-operators" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/user-defined-conversion-operators</a></sub></p>
</blockquote>

<p>So, it appears the implicit cast operator isn't involved: my understanding is that this means <code>Equals</code> is returning <code>false</code> if you give it a <code>string</code>, and I'd consider that a bug, <em>given</em> the implicit cast operator's <em>intent</em> is likely to make strings and non-empty strings seamlessly equate.</p>

<p>The <code>==</code>, <code>!=</code> operators should probably have an overload for <code>string</code> too, and <code>+</code> should be expected to work as well, and should even be expected to accept a <code>NullOrEmpty</code> string (and then you get <code>+=</code> for free).</p>

<p>Could be just me, but depending on context I think I might prefer an extension method on <code>string</code>, over an implicit (or explicit) cast operator:</p>

<pre><code>var foo = "hi".AsNonEmptyString();
</code></pre>

<p>The struct should probably also implement <code>IEquatable</code> and <code>IComparable</code> (+their generic counterparts, for <code>string</code> and <code>NonEmptyString</code> both), and <code>IEnumerable</code>+<code>IEnumerable&lt;char&gt;</code> too, for almost-complete parity with a <code>string</code>.</p>
    </div>