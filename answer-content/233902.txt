<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Returning early if a specific condition is met will make a method more readable because the level of indentation is decreased. E.g in <code>ProjectsController.AddProject(ProjectsDTO)</code> you could revert the <code>if</code> condition at the top of the method like so  </p>

<pre><code>if (!ModelState.IsValid) { return BadRequest(); }  
</code></pre>

<p>and because you return <code>BadRequest()</code> in case of an exception you could have an empty <code>catch</code> block but adding a <code>finally</code> to return <code>BadRequest()</code> for the case that an exception is thrown <strong>and</strong> for <code>entity.Id &lt;= 0</code>.  </p>

<p>This would look like so  </p>

<pre><code>[HttpPost]
[Route("AddProject")]
public IActionResult AddProject(ProjectsDTO dto)
{
    if (!ModelState.IsValid) { return BadRequest(); }

    try
    {
        var entity = _mapper.Map&lt;Projects&gt;(dto);
        _context.Projects.Add(entity);
        _context.SaveChanges();

        if (entity.Id &gt; 0)
        {
            return Ok(entity.Id);
        }
    }
    catch {} // swallowing exception, but returning BadRequest()

    return BadRequest();
}  
</code></pre>

<p>This pattern should be used in <code>ProjectsController.ModifyProject()</code> and <code>ProjectFavoritesController.AddFavorite()</code> as well.  </p>

<p>I find it a little bit odd that you need to check if <code>_context == null</code> in <code>ProjectsController.GetProjects()</code> but for each other method you don't check the state of that field. IMO you should validate this inside the constructor and throwing an <code>ArgumentNullException</code> if the passed <code>context</code> is null.<br>
This applies for <code>ProjectFavoritesController</code> as well.  </p>

<p>In both <code>AddProject()</code> and <code>ModifyProject</code> you don't validate the method argument. Its a <code>public</code> method hence you really should do it. This applies for <code>AddFavorite()</code> of the <code>ProjectFavoritesController</code> as well.  </p>

<p>In <code>ProjectFavoritesController.GetFavoritesByUser()</code> you check if the passed in <code>userId</code> is null, but what about an empty string ?  </p>
    </div>