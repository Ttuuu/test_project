<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Concurrent use of map</h1>

<p>Quote from <a href="https://golang.org/doc/faq#atomic_maps" rel="nofollow noreferrer">Golang FAQ</a>:</p>

<blockquote>
  <p>Map access is unsafe only when updates are occurring. As long as all goroutines are only reading—looking up elements in the map, including iterating through it using a for range loop—and not changing the map by assigning to elements or doing deletions, it is safe for them to access the map concurrently without synchronization. </p>
</blockquote>

<p>Since your functions modify <code>sessions</code> and are running in different routines you need to introduce some locking. Take look at <a href="https://golang.org/pkg/sync/" rel="nofollow noreferrer"><code>sync</code> package</a>.</p>

<p>Also see <a href="https://stackoverflow.com/questions/36167200/how-safe-are-golang-maps-for-concurrent-read-write-operations">question at StackOverflow</a>.</p>

<h1><code>sessionExists</code> function</h1>

<pre><code>if _, exists := sessions[cookie.Value]; !exists {
    return false
}

return true
</code></pre>

<p><code>exists</code> already holds the desired bool.
Let's simply this part and return <code>exists</code> directly.</p>

<pre><code>_, exists := sessions[cookie.Value]
return exixts
</code></pre>

<p>Also you may take advantage of named return values and simplify your function:</p>

<pre><code>func sessionExists(req *http.Request) (exists bool) {
    cookie, err := req.Cookie("id")
    if err == nil {
        _, exists = sessions[cookie.Value]
    } else if err != http.ErrNoCookie {
        log.Println(err)
    }

    return
}
</code></pre>

<p>Now let's take a look at <a href="https://golang.org/src/net/http/request.go?s=12957:13011#L363" rel="nofollow noreferrer"><code>func (*Request) Cookie</code></a> source code:</p>

<pre><code>func (r *Request) Cookie(name string) (*Cookie, error) {
    for _, c := range readCookies(r.Header, name) {
        return c, nil
    }
    return nil, ErrNoCookie
}
</code></pre>

<p>The only possible results are <code>c, nil</code> and <code>nil, ErrNoCookie</code> so there is no point in logging errors:</p>

<pre><code>func sessionExists(req *http.Request) (exists bool) {
    cookie, err := req.Cookie("id")
    if err == nil {
        _, exists = sessions[cookie.Value]
    }

    return
}
</code></pre>
    </div>