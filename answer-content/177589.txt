<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Be sure when you ever have a code that it has the chain of <strong>if else</strong> there should be an improvement. (even many programmers say <a href="https://cirillocompany.de/pages/anti-if-campaign" rel="nofollow noreferrer">you should not use if statement in your code as possible</a> and some others say <a href="https://www.captechconsulting.com/blogs/eliminate-branching-if-statements-to-produce-better-code" rel="nofollow noreferrer">don't use else statement at all</a>!)</p>

<p>You can use something like this:</p>

<p>First <code>Add</code> a class to manage your actions:</p>

<pre><code> public class ActionRegistry: Dictionary&lt;string, Func&lt;int, int, int&gt;&gt;
    {
        public ActionRegistry()
        {
            this.Add("Add", (x, y) =&gt; x + y);
            this.Add("Subtract", (x, y) =&gt; x - y);
        }

    }
</code></pre>

<p>Then you can use that class like this:</p>

<pre><code>public class DoStuff
{
    private int Calculate(string sAction)
    {
        var actionRegistry= new ActionRegistry();
        var a = 1;
        var b = 2;
        //var actionResult= actionRegistry[this should come from your drop down].Invoke(a, b);
        var actionResult= actionRegistry[sAction].Invoke(a, b);


        //you can even Register New Action Like this :
        actionRegistry.Add("Multiply",(x,y)=&gt;x*y);

        //then you can use it somewhere else:
        var multiplyResult =  actionRegistry["Multiply"].Invoke(a, b);
        return actionResult;
    }
}
</code></pre>

<p>Every time your action has changed you just need to add the new action in your <code>ActionRegistry</code>. With this approach, there is no need for that if-else statement.</p>

<p>By the way, you can even use interface and DI to loosely couple the <code>ActionManager</code>. </p>

<p><strong>UPDATE</strong> Here my update using enums:</p>

<p>First Declare an Enum :</p>

<pre><code>enum ActionType 
{ 
 Add, 
 Subtract 
}
</code></pre>

<p>Then use that enum in your ActionRegistry class:</p>

<pre><code>public class ActionRegistry: Dictionary&lt;int, Func&lt;int, int, int&gt;&gt;
{
    public ActionRegistry()
    {
       //it's better to register your actions outside the class
       // and don't use enum inside your class
       // but for simplicity i did that inside the class 

       this.Add((int)ActionType.Add, (x, y) =&gt; x + y);
       this.Add((int)ActionType.Subtract, (x, y) =&gt; x - y);
    }

}
</code></pre>

<p>then you should change your calculate method like this :</p>

<pre><code> private int Calculate(int actionTypeCode)
        {
        var actionRegistry= new ActionRegistry();
        var a = 1;
        var b = 2;
        //var actionResult= actionRegistry[this should come from your drop down].Invoke(a, b);
        var actionResult= actionRegistry[actionTypeCode].Invoke(a, b);

        return actionResult;
    }
</code></pre>

<p>Note that you should bind your dropdown list with your enum keys as value.
I prefer to use an integer as my key because I can add more item later without changing my enum but it is not necessary.</p>
    </div>