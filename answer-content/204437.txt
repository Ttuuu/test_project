<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You are computing your prime sieve multiple times, when you only need to compute it once.  You are told you will have at most 10 test cases.  You could easily store those in an array, compute the maximum upper limit, and run the sieve once.  Then loop through the stored test cases, and generate the output for each.  Could be up to a 10x speed up.</p></li>
<li><p>The only even prime is 2.  Treat it as a special case.  Then, when you are running the sieve, you can start with 3 and increment with <code>p += 2</code> to skip the even numbers.</p></li>
<li><p>Since the sieve has already eliminated all multiples of smaller prime numbers, when eliminating the multiples of <code>p</code>, you don’t have to start at <code>p*2</code>; rather you can start at <code>p*p</code> and skip the even multiples using <code>i += p*2</code>.  (Consider storing <code>p2 = p*2</code> to avoid the multiplication every loop iteration!)</p></li>
<li><p>In <code>segmentedsieve()</code>, if the upper limit is less than largest prime your sieve produced, you don’t need to generate the second sieve; just emit the primes in the correct range.</p></li>
<li><p>You can apply points #2 &amp; #3 to the secondary sieve, but it will be slightly more complicated as you need to ensure you’ve calculated an <em>odd</em> starting multiple.</p></li>
<li><p>To get a 8x reduction in memory usage, use a bit array.  (You could get a 16x reduction, by storing flags for only odd values in the bit array, but your indexing will become more complex.)</p></li>
</ol>
    </div>