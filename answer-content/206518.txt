<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not familiar with the rules of Black Jack so I won't comment the calculations.</p>

<p>You should have an enum for faces as you have for suits:</p>

<pre><code>enum Suits { Spades, Hearts, Diamonds, Clubs }
enum Faces { Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King, Ace }

class Card
{

  public Faces Face { set; get; }
  public Suits Suit { get; set; }
}
</code></pre>

<p>It is easier to read and is less error prone. </p>

<hr>

<p>The <code>Player</code> could have a <code>Points</code> property that could be recalculated by <code>CalculatePoints()</code> when necessary to avoid the overhead when recalculating it every time it's needed but not necessarily changed:</p>

<pre><code>class Player
{
  public string Name { get; set; }
  public List&lt;Card&gt; Cards { get; set; }

  public int Points { get; private set; }

  public void CalculatePoints()
  {
    int points = 0;
    int aces = 0;

    foreach (Card c in Cards)
    {
      if (c.Face == Faces.Ace)
      {
        aces++;
        // points++;
      }
      else if (c.Face == Faces.Jack || c.Face == Faces.Queen || c.Face == Faces.King) points += 10;
      else points += (int)c.Face;
    }

    if ((points - 21) &lt;= 10)
    {
      for (int j = 0; j &lt; aces; j++)
      {
        if (j == 0) points += 11; // Adding at least one 11
        else points += 1;  // the rest can only be 1s
      }
    }
    else
    {
      points += aces; //if we do not have a space for an 11 then lets just add 1s
    }

    Points = points;
  }
}
</code></pre>

<p>... but that may be a bad design to have the client to recalculate the Points when needed. Instead you can hide the list of <code>Card</code>s so the <code>Player</code> can control when the list of cards changes and recalculate the <code>Points</code> accordingly:</p>

<pre><code>class Player : IEnumerable&lt;Card&gt;
{
  private List&lt;Card&gt; m_cards = new List&lt;Card&gt;();

  public string Name { get; set; }
  public int Points { get; private set; }
  public int CountOfCards =&gt; m_cards.Count;

  private void AddOneCard(Card card)
  {
    if (!m_cards.Contains(card))
    {
      m_cards.Add(card);
    }
  }

  public void AddCard(Card card)
  {
    AddOneCard(card);
    CalculatePoints();
  }

  public Player AddRange(params Card[] cards)
  {
    foreach (Card card in cards)
    {
      AddOneCard(card);
    }

    CalculatePoints();

    return this;
  }

  public bool RemoveCard(Card card)
  {
    bool result = m_cards.Remove(card);
    CalculatePoints();
    return result;
  }

  private void CalculatePoints()
  {
    int points = 0;
    int aces = 0;

    foreach (Card c in m_cards)
    {
      if (c.Face == Faces.Ace)
      {
        aces++;
        // points++;
      }
      else if (c.Face == Faces.Jack || c.Face == Faces.Queen || c.Face == Faces.King) points += 10;
      else points += (int)c.Face;
    }

    if ((points - 21) &lt;= 10)
    {
      for (int j = 0; j &lt; aces; j++)
      {
        if (j == 0) points += 11; // Adding at least one 11
        else points += 1;  // the rest can only be 1s
      }
    }
    else
    {
      points += aces; //if we do not have a space for an 11 then lets just add 1s
    }

    Points = points;
  }

  public IEnumerator&lt;Card&gt; GetEnumerator()
  {
    return m_cards.GetEnumerator();
  }

  IEnumerator IEnumerable.GetEnumerator()
  {
    return GetEnumerator();
  }
}
</code></pre>

<p>In this way the <code>Player</code> controls it hand of cards and the surroundings can view, but not modify it without the <code>Player</code>s knowledge.</p>

<p>A <code>Player</code> can then be created like this:</p>

<pre><code>  Player dealer = new Player { Name = "Dealer" }.AddRange(
    new Card { Face = Faces.Jack, Suit = Suits.Spades },
    new Card { Face = Faces.Nine, Suit = Suits.Hearts });
</code></pre>

<hr>

<pre><code>getWinner()
</code></pre>

<p>should be named in <code>PascalCase</code>:</p>

<pre><code>private static string GetWinner(Player dealer, Player player) {}
</code></pre>

<hr>

<p>It's OK to have the dealer as a seperate variable, but you can simplify the code, if you create an array or list for the players:</p>

<pre><code>  List&lt;Player&gt; players = new List&lt;Player&gt;
  {
    new Player
    {
      Name = "Billy",
      Cards = new List&lt;Card&gt;
      {
        new Card{Face= Faces.Two, Suit = Suits.Spades},
        new Card{Face= Faces.Two, Suit = Suits.Diamonds},
        new Card{Face= Faces.Two, Suit = Suits.Hearts},
        new Card{Face= Faces.Four, Suit = Suits.Diamonds},
        new Card{Face= Faces.Five, Suit = Suits.Clubs}
      }
    },
    new Player
    {
      Name = "Lemmy",
      Cards = new List&lt;Card&gt;
      {
        new Card{Face= Faces.Ace, Suit = Suits.Spades},
        new Card{Face= Faces.Seven, Suit = Suits.Hearts},
        new Card{Face= Faces.Ace, Suit = Suits.Diamonds}
      }
    },
    new Player
    {
      Name = "Andrew",
      Cards = new List&lt;Card&gt;
      {
        new Card{Face= Faces.King, Suit = Suits.Diamonds},
        new Card{Face= Faces.Four, Suit = Suits.Spades},
        new Card{Face= Faces.Four, Suit = Suits.Clubs}
      }
    },
    new Player
    {
      Name = "Carla",
      Cards = new List&lt;Card&gt;
      {
        new Card{Face= Faces.Queen, Suit = Suits.Clubs},
        new Card{Face= Faces.Six, Suit = Suits.Spades},
        new Card{Face= Faces.Nine, Suit = Suits.Diamonds}
      }
    }
  };
</code></pre>

<p>You can then display the result like this:</p>

<pre><code>  dealer.CalculatePoints();
  Console.WriteLine("Dealer's Points = {0}", dealer.Points);
  Console.WriteLine("==========================");

  foreach (Player player in players)
  {
    player.CalculatePoints();
    Console.WriteLine($"{$"{player.Name}'s", -10} Points   = {player.Points}   |  {GetWinner(dealer, player)}");
  }
  Console.ReadLine();
</code></pre>

<hr>

<p>You should of course divide the <code>main()</code> method into meaningful methods like:</p>

<pre><code>static void Main() 
{
  Player dealer = CreatePlayer("dealer");
  List&lt;Player&gt; players = CreatePlayers("Billy", "Lemmy", "Andrew", "Carla");
  ShowResult(dealer, players);
}

static Deck deck = new Deck();

static Player CreatePlayer(string name)
{
  // TODO: create a player and select cards from a `Deck` of cards randomly
}

static List&lt;Player&gt; CreatePlayers(params string[] names)
{
   return names.Select(name =&gt; CreatePlayer(name)).ToList();
}

class Deck
{
  Stack&lt;Card&gt; _cards = new Stack&lt;Card&gt;(); // Jokers???

  private void Initialize() {...}

  public void Shuffle() { // TODO: shuffle the card stack randomly }

  public Card Pop() { return _cards.Pop(); }

  // ... etc.
}
</code></pre>
    </div>