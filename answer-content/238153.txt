<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I try to resolve the problem using recursion.
It's not the most efficient solution in Python, but it's elegant and clean.</p>

<pre><code>def spiral(mx, i, j, dir, a, max_i, max_j):
    """
        mx: matrix to fill
        i, j: matrix position to analize
        dir: direction to fill
        a: list of values to insert
        max_i, max_j: dimension of matrix
    """
    # no more value tu insert
    if len(a) == 0:
        # stop recursion
        return

    if dir == "right":
        if j &lt; max_j and mx[i][j] == 0:
            mx[i][j] = a[0]
            spiral(mx, i, j+1, "right", a[1:], max_i, max_i)
        else:
            spiral(mx, i+1, j-1, "down", a, max_i, max_j)
    elif dir == "down":
        if i &lt; max_i and mx[i][j] == 0:
            mx[i][j] = a[0]
            spiral(mx, i+1, j, "down", a[1:], max_i, max_j)
        else:
            spiral(mx, i-1, j-1, "left", a, max_i, max_j)
    elif dir == "left":
        if j &gt;= 0 and mx[i][j] == 0:
            mx[i][j] = a[0]
            spiral(mx, i, j-1, "left", a[1:], max_i, max_j)
        else:
            spiral(mx, i-1, j+1, "up", a, max_i, max_j)
    elif dir == "up":
        if i &gt;= 0 and mx[i][j] == 0:
            mx[i][j] = a[0]
            spiral(mx, i-1, j, "up", a[1:], max_i, max_j)
        else:
            spiral(mx, i+1, j+1, "right", a, max_i, max_j)

# square matrix dimesion
n_dim = 30
# list of values to insert in matrix
l = [x+1 for x in range(n_dim**2)]
# matrix to fill
mx = [[0 for i in range(n_dim)] for j in range(n_dim)]

# start recursion
spiral(mx, 0, 0, "right", l, n_dim, n_dim)

for i in range(n_dim):
    for j in range(n_dim):
        print("{0:4d}".format(mx[i][j]), end="")
    print("\n")
</code></pre>
    </div>