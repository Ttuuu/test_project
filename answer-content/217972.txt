<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Making the code testable and tested</strong></p>

<p>The first step to improve your code is to try to make it testable. By doing so, you usually have to deal with <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="noreferrer">Separation of Concerns</a>: in your case, you have to split the logic doing the output from the logic computing games. The easiest way to do so it to rewrite slightly the <code>simulate_XXX</code> functions to return values instead of writing them.</p>

<p>Once it it done, you can easily write tests for the function computing the games (in order to make this easier to implement, I've extracted out the randomising part as well).</p>

<p>At this stage, we have something like:</p>

<pre><code>import random

def simulate_draw(teams):
    """Return the list of games."""
    if len(teams) % 2 == 0:
        return simulate_even_draw(teams)
    else:
        return simulate_odd_draw(teams)

def simulate_even_draw(teams):
    """Return the list of games."""
    matches = []
    dic = {}
    for i in range(len(teams)):
        dic[i] = teams[i]

    games = []
    arr1 = [i+1 for i in range(int(len(teams)/2))]
    arr2 = [i+1 for i in range(int(len(teams)/2), len(teams))][::-1]

    for i in range(len(teams)-1):
        arr1.insert(1, arr2[0])
        arr2.append(arr1[-1])
        arr2.remove(arr2[0])
        arr1.remove(arr1[-1])
        zipped = list(zip(arr1, arr2))
        games.append(zipped)
        zipped = [] 

    for game in games:
        for gm in list(game):
            r = gm # remove randomness for now - random.sample(gm, len(gm))
            a, b = dic[r[0]-1], dic[r[1]-1]
            matches.append((a, b))
            # print(a + ' plays ' + b)
    return matches

def simulate_odd_draw(teams):
    """Return the list of games."""
    matches = []
    dic = {}
    for i in range(len(teams)):
        dic[i] = teams[i]
    dic[i+1] = ''
    games = []
    arr1 = [i+1 for i in range(int((len(teams)+1)/2))]
    arr2 = [i+1 for i in range(int((len(teams)+1)/2), len(teams)+1)][::-1]
    for i in range(len(teams)):
        arr1.insert(1, arr2[0])
        arr2.append(arr1[-1])
        arr2.remove(arr2[0])
        arr1.remove(arr1[-1])
        zipped = list(zip(arr1, arr2))
        games.append(zipped)
        zipped = [] 
    for game in games:
        for gm in list(game):
            r = gm # remove randomness for now - random.sample(gm, len(gm))
            if len(teams)+1 not in r:
                a, b = dic[r[0]-1], dic[r[1]-1]
                matches.append((a, b))
                # print(a + ' plays ' + b)
    return matches


def displays_simulated_draws(teams):
    """Print the list of games."""
    for gm in simulate_draw(teams):
        a, b = random.sample(gm, len(gm))
        print(a + ' plays ' + b)


def test_simulate_draw():
    """Small tests for simulate_draw."""
    # TODO: Use a proper testing framework
    TESTS = [
        ([], []),
        (['A'], []),
        (['A', 'B', 'C', 'D'], [('A', 'C'), ('D', 'B'), ('A', 'B'), ('C', 'D'), ('A', 'D'), ('B', 'C')]),
        (['A', 'B', 'C', 'D', 'E'], [('A', 'E'), ('B', 'C'), ('A', 'D'), ('E', 'C'), ('A', 'C'), ('D', 'B'), ('A', 'B'), ('D', 'E'), ('B', 'E'), ('C', 'D')]),
    ]
    for teams, expected_out in TESTS:
        # print(teams)
        ret = simulate_draw(teams)
        assert ret == expected_out

if __name__ == '__main__':
    test_simulate_draw()
    displays_simulated_draws(['A', 'B', 'C', 'D'])
</code></pre>

<p>Now we can start improving the code in a safer way.</p>

<p><strong>Remove what's not required</strong></p>

<p><code>dic[i+1] = ''</code> is not required, we can remove it.</p>

<p>Also, resetting <code>zipped</code> to the empty string is not required, we can remove it. Maybe we could get rid of <code>zipped</code> altogether.</p>

<p>Finally, we call <code>for gm in list(game)</code> when <code>game</code> is already a list. We can remove the call to <code>list</code>.</p>

<p><strong>Loop like a native</strong></p>

<p>I highly recommend <a href="https://nedbatchelder.com/text/iter.html" rel="noreferrer">Ned Batchelder's talk "Loop like a native"</a> about iterators. One of the most simple take away is that whenever you're doing range(len(iterable)), you can probably do things in a better way: more concise, clearer and more efficient.</p>

<p>In your case, we could have:</p>

<pre><code>for i in range(len(teams)):
    dic[i] = teams[i]
</code></pre>

<p>replaced by</p>

<pre><code>for i, team in enumerate(teams):
    dic[i] = team
</code></pre>

<p>And we could do:</p>

<pre><code>for _ in teams:
</code></pre>

<p>instead of </p>

<pre><code>for i in range(len(teams))
</code></pre>

<p>(Unfortunately, this can hardly be adapted to the "even" situation)</p>

<p>Note: "_" is a usual variable names for values one does not plan to use.</p>

<p><strong>Dict comprehension</strong></p>

<p>The dictionnary initiation you perform via <code>dict[index] = value</code> in a loop could be done using the <a href="https://www.datacamp.com/community/tutorials/python-dictionary-comprehension" rel="noreferrer">Dictionnary Comprehension</a> syntactic sugar.</p>

<p>Instead of:</p>

<pre><code>dic = {}
for i, team in enumerate(teams):
    dic[i] = team
</code></pre>

<p>we you can write:</p>

<pre><code>dic = {i: team for i, team in enumerate(teams)}
</code></pre>

<p>Now it is much more obvious, it also corresponds to:</p>

<pre><code>dic = dict(enumerate(teams))
</code></pre>

<p>Finally, we can ask ourselves how we use this dictionnary: the answer is "to get the team at a given index". Do we really need a dictionnay for this ? I do not think so. We can get rid of the <code>dic</code> variable and use <code>teams</code> directly.</p>

<p>At this stage, we have:</p>

<pre><code>import random

def simulate_draw(teams):
    """Return the list of games."""
    if len(teams) % 2 == 0:
        return simulate_even_draw(teams)
    else:
        return simulate_odd_draw(teams)

def simulate_even_draw(teams):
    """Return the list of games."""
    matches = []
    games = []
    half_len = int(len(teams)/2)
    arr1 = [i+1 for i in range(half_len)]
    arr2 = [i+1 for i in range(half_len, len(teams))][::-1]
    for i in range(len(teams)-1):
        arr1.insert(1, arr2[0])
        arr2.append(arr1[-1])
        arr2.remove(arr2[0])
        arr1.remove(arr1[-1])
        games.append(list(zip(arr1, arr2)))
    for game in games:
        for gm in game:
            r = gm # remove randomness for now - random.sample(gm, len(gm))
            a, b = teams[r[0]-1], teams[r[1]-1]
            matches.append((a, b))
            # print(a + ' plays ' + b)
    return matches

def simulate_odd_draw(teams):
    """Return the list of games."""
    matches = []
    games = []
    half_len = int((len(teams)+1)/2)
    arr1 = [i+1 for i in range(half_len)]
    arr2 = [i+1 for i in range(half_len, len(teams)+1)][::-1]
    for i in range(len(teams)):
        arr1.insert(1, arr2[0])
        arr2.append(arr1[-1])
        arr2.remove(arr2[0])
        arr1.remove(arr1[-1])
        games.append(list(zip(arr1, arr2)))
    for game in games:
        for gm in game:
            r = gm # remove randomness for now - random.sample(gm, len(gm))
            if len(teams)+1 not in r:
                a, b = teams[r[0]-1], teams[r[1]-1]
                matches.append((a, b))
                # print(a + ' plays ' + b)
    return matches


def displays_simulated_draws(teams):
    """Print the list of games."""
    for gm in simulate_draw(teams):
        a, b = random.sample(gm, len(gm))
        print(a + ' plays ' + b)


def test_simulate_draw():
    """Small tests for simulate_draw."""
    # TODO: Use a proper testing framework
    TESTS = [
        ([], []),
        (['A'], []),
        (['A', 'B', 'C', 'D'], [('A', 'C'), ('D', 'B'), ('A', 'B'), ('C', 'D'), ('A', 'D'), ('B', 'C')]),
        (['A', 'B', 'C', 'D', 'E'], [('A', 'E'), ('B', 'C'), ('A', 'D'), ('E', 'C'), ('A', 'C'), ('D', 'B'), ('A', 'B'), ('D', 'E'), ('B', 'E'), ('C', 'D')]),
    ]
    for teams, expected_out in TESTS:
        # print(teams)
        ret = simulate_draw(teams)
        assert ret == expected_out

if __name__ == '__main__':
    test_simulate_draw()
    displays_simulated_draws(['A', 'B', 'C', 'D'])
</code></pre>

<p><strong>The right tool for the task</strong></p>

<p>The part:</p>

<pre><code>    arr2.remove(arr2[0])
    arr1.remove(arr1[-1])
</code></pre>

<p>could/should probably be written with pop:</p>

<pre><code>    arr2.pop(0)
    arr1.pop()
</code></pre>

<p>And now, these line can be merged with <code>arrXX.append(arrYYY[ZZ])</code>:</p>

<pre><code>for i in range(len(teams)-1):
    arr1.insert(1, arr2.pop(0))
    arr2.append(arr1.pop())
    games.append(list(zip(arr1, arr2)))
</code></pre>

<p><strong>Removing useless steps</strong></p>

<p>A loop is used to fill an array. Another one is used to iterate over the array. We could try to use a single loop to do everything (disclaimer: this is not always a good idea as far as readability goes).</p>

<p>This removes the need for a few calls to <code>list</code>.</p>

<p>At this stage, we have:</p>

<pre><code>def simulate_even_draw(teams):
    """Return the list of games."""
    matches = []
    half_len = int(len(teams)/2)
    arr1 = [i+1 for i in range(half_len)]
    arr2 = [i+1 for i in range(half_len, len(teams))][::-1]
    for i in range(len(teams)-1):
        arr1.insert(1, arr2.pop(0))
        arr2.append(arr1.pop())
        for gm in zip(arr1, arr2):
            matches.append((teams[gm[0]-1], teams[gm[1]-1]))
    return matches

def simulate_odd_draw(teams):
    """Return the list of games."""
    matches = []
    half_len = int((len(teams)+1)/2)
    arr1 = [i+1 for i in range(half_len)]
    arr2 = [i+1 for i in range(half_len, len(teams)+1)][::-1]
    for i in range(len(teams)):
        arr1.insert(1, arr2.pop(0))
        arr2.append(arr1.pop())
        for gm in zip(arr1, arr2):
            if len(teams)+1 not in gm:
                matches.append((teams[gm[0]-1], teams[gm[1]-1]))
    return matches
</code></pre>

<p><strong>Better indices</strong></p>

<p>You generate a list of indices using <code>i+1</code> and then use <code>val - 1</code> when you use them. You can make your life easier twice.</p>

<p><strong>Iterable unpacking</strong></p>

<p>Instead of using indices to get elements from an iterable with a know number of elements, you can use iterable unpacking.</p>

<p>You'd get</p>

<pre><code>def simulate_even_draw(teams):
    """Return the list of games."""
    half_len = int(len(teams)/2)
    arr1 = [i for i in range(half_len)]
    arr2 = [i for i in range(half_len, len(teams))][::-1]
    matches = []
    for i in range(len(teams)-1):
        arr1.insert(1, arr2.pop(0))
        arr2.append(arr1.pop())
        for a, b in zip(arr1, arr2):
            matches.append((teams[a], teams[b]))
    return matches

def simulate_odd_draw(teams):
    """Return the list of games."""
    half_len = int((len(teams)+1)/2)
    arr1 = [i for i in range(half_len)]
    arr2 = [i for i in range(half_len, len(teams)+1)][::-1]
    matches = []
    for i in range(len(teams)):
        arr1.insert(1, arr2.pop(0))
        arr2.append(arr1.pop())
        for a, b in zip(arr1, arr2):
            if len(teams) not in (a, b):
                matches.append((teams[a], teams[b]))
    return matches
</code></pre>

<p><strong>True divisions</strong></p>

<p>Instead of using "/" and convert the float result to int, you can use "//" which is an integer division.</p>

<p><strong>Other way to compute indices</strong></p>

<p>We could write something like:</p>

<pre><code>indices = list(range(len(teams)))
half_len = len(indices)//2
arr1 = indices[:half_len]
arr2 = indices[:half_len-1:-1]
</code></pre>

<p>and</p>

<pre><code>indices = list(range(len(teams)+1))
half_len = len(indices)//2
arr1 = indices[:half_len]
arr2 = indices[:half_len-1:-1]
</code></pre>

<p>Altough, if we don't care about order, we could use the more direct:</p>

<pre><code>arr1 = indices[:half_len]
arr2 = indices[half_len:]
</code></pre>

<p><strong>Remove the duplicated logic</strong></p>

<p><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">Don't repeat yourself</a> is a principle of software development that you could easily apply here. Indeed, we have 2 functions that look very similar.</p>

<p>This is trickier than expected and I have to go. I may continue another day.</p>

<p><strong>Batteries included</strong></p>

<p>The Python standard library contains many useful things. Among them, we have the very interesting module <code>itertools</code> which itself contains <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="noreferrer">combinations</a> which is what you want.</p>
    </div>