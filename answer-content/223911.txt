<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Self-assignment may be expensive, but it should be a no-op instead of UB. I suggest copy-and-swap.</p></li>
<li><p>Omitting move-semantics will most certainly cost you.</p></li>
<li><p>Your naming of the internal class suggests all callables are lambdas. Not true!</p></li>
<li><p>You cannot store any move-only callables. Admittedly <code>std::function</code> is also crippled in that respect. Just throw an exception if the non-copyable object needs to be copied.</p></li>
<li><p>If your <code>function</code> has return-type <code>void</code>, it should simply discard the callables return-value. You don't.</p></li>
<li><p><code>std::function</code> throws an exception if empty when called. Using <code>assert()</code> is less than a pale imitation.</p></li>
<li><p><code>delete p;</code> if <code>p</code> is a null pointer is a no-op. No need to double-check.</p></li>
<li><p>Conversion to <code>bool</code> should be <code>explicit</code>. Otherwise, conversion to any arithmetic type can happen.</p></li>
<li><p>As you said, yours is less efficient. That's especially the case when <code>std::function</code> benefits from mandatory small-object-optimization.</p></li>
<li><p>You don't use SFINAE when creating from a callable. That can be inconvenient.</p></li>
</ol>
    </div>