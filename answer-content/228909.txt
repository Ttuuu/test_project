<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd suggest a couple minor stylistic tweaks:</p>

<ul>
<li><p>Keyword arguments don't typically have spaces around the <code>=</code>, so we'd have <code>sorted(l, key=alphanum_key)</code> instead of <code>sorted(l, key = alphanum_key)</code></p></li>
<li><p>You have a couple fairly long lines that could be broken up or reduce a little</p></li>
<li><p>Don't create a variable in one line if you're just going to return it in the next: just return the value directly: <code>return sorted_nicely([...])</code>    </p></li>
</ul>

<p>The major thing I'd suggest, since you explicitly call out Python 3.x, <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">is to use <code>pathlib</code></a> (it was introduced in 3.4, but honestly nobody should be using any 3.x older than 3.4 anyway). It simplifies a lot of your <code>os.path...</code> logic very neatly using some well-implemented object-oriented programming. E.g., your current line:</p>

<pre><code>[fastafile for fastafile in os.listdir(subject_path) if os.path.isfile(os.path.join(subject_path, fastafile))]
</code></pre>

<p>can be reduced to:</p>

<pre><code>[fastafile for fastafile in subject_path.iterdir() if fastafile.is_file()]
</code></pre>

<p>You'd need to used <code>pathlib.Path</code> objects, like so:</p>

<pre><code>from pathlib import Path

subject_path = Path('...')
</code></pre>

<p>You can read the complete documentation to get a better feel for Path objects, but for quick reference, you can access just the file's name as a string using <code>my_path.name</code>, which you can use for sorting.</p>

<p>The other major improvement is to use functions properly. Maybe I'm missing something, but <code>query_list_fastafiles</code> and <code>subject_list_fastafiles</code> appear to be exactly the same function, but operating on different inputs. This absolutely should be consolidated to a single function that takes the directory as an argument:</p>

<pre><code>def sorted_nicely(l):
    """ Sort the given iterable in the way that humans expect. https://blog.codinghorror.com/sorting-for-humans-natural-sort-order/ """
    convert = lambda text: int(text) if text.isdigit() else text
    alphanum_key = lambda path: [ convert(c) for c in re.split('(\d+)', path.name) ]
    return sorted(l, key=alphanum_key)

def fastafiles(directory: Path) -&gt; Iterable[Path]:
    return sorted_nicely([fastafile for fastafile in directory.iterdir() if fastafile.is_file()])
</code></pre>

<p>and then just call that function with different arguments:</p>

<pre><code>subject_path = Path("/Users/catuf/Desktop/subject_fastafiles/")
query_path = Path("/Users/catuf/Desktop/query_fastafiles")

subject_fastafiles = fastafiles(subject_path)
query_fastafiles = fastafiles(query_path)
</code></pre>
    </div>