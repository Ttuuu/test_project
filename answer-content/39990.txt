<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that Bitmap inherits from Image, which implements <code>IDisposable</code>. This means you very much better call <code>Dispose()</code> on those objects are you are done with them (way many paths here with UI event handlers), or put them into using blocks. Same goes for <code>OpenFileDialog</code>. </p>

<p>As per my comments, some <code>using</code> usage (and <code>try..finally</code> usage, incorporating <a href="https://codereview.stackexchange.com/users/7641/guffa">Guffa</a>'s <a href="https://codereview.stackexchange.com/a/39987/6172">answer</a>):</p>

<pre><code>private Bitmap image1;

private Bitmap image2;

public Form1()
{
    this.InitializeComponent();
}

private void button1_Click(object sender, EventArgs e)
{
    using (var openDialog = new OpenFileDialog())
    {
        if (openDialog.ShowDialog() != DialogResult.OK)
        {
            return;
        }

        this.DisposeImage1();
        this.image1 = new Bitmap(openDialog.FileName);
    }

    this.pictureBox1.Image = this.image1;
}

private void button2_Click(object sender, EventArgs e)
{
    using (var openDialog = new OpenFileDialog())
    {
        if (openDialog.ShowDialog() != DialogResult.OK)
        {
            return;
        }

        this.DisposeImage2();
        this.image2 = new Bitmap(openDialog.FileName);
    }

    this.pictureBox2.Image = this.image2;
}

private void button3_Click(object sender, EventArgs e)
{
    MessageBox.Show(Compare(this.image1, this.image2) ? "Same Image." : "Different Image.");
}

private void Form1_FormClosed(object sender, FormClosedEventArgs e)
{
    this.DisposeImage2();
    this.DisposeImage1();
}

private static bool Compare(Bitmap bmp1, Bitmap bmp2)
{
    // Test to see if we have the same size of image
    if (bmp1.Size != bmp2.Size)
    {
        return false;
    }

    var rect = new Rectangle(0, 0, bmp1.Width, bmp1.Height);
    var bmpData1 = bmp1.LockBits(rect, ImageLockMode.ReadOnly, bmp1.PixelFormat);

    try
    {
        var bmpData2 = bmp2.LockBits(rect, ImageLockMode.ReadOnly, bmp1.PixelFormat);

        try
        {
            unsafe
            {
                var ptr1 = (byte*)bmpData1.Scan0.ToPointer();
                var ptr2 = (byte*)bmpData2.Scan0.ToPointer();
                var width = 3 * rect.Width; // for 24bpp pixel data

                for (var y = 0; y &lt; rect.Height; y++)
                {
                    for (var x = 0; x &lt; width; x++)
                    {
                        if (*ptr1 != *ptr2)
                        {
                            return false;
                        }

                        ptr1++;
                        ptr2++;
                    }

                    ptr1 += bmpData1.Stride - width;
                    ptr2 += bmpData2.Stride - width;
                }
            }
        }
        finally
        {
            bmp2.UnlockBits(bmpData2);
        }
    }
    finally
    {
        bmp1.UnlockBits(bmpData1);
    }

    return true;
}

private void DisposeImage1()
{
    if (this.image1 == null)
    {
        return;
    }

    this.pictureBox1.Image = null;
    this.image1.Dispose();
    this.image1 = null;
}

private void DisposeImage2()
{
    if (this.image2 == null)
    {
        return;
    }

    this.pictureBox2.Image = null;
    this.image2.Dispose();
    this.image2 = null;
}
</code></pre>
    </div>