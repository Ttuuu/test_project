<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>DRY Principle</h1>
<p>Gurkan Cetin has mentioned this.
This code is a lot simpler than yours. A lot cleaner as well.</p>
<pre><code>time_per_word=0.4
def display(text):
    print(text)
    sleep(len(text.split())*time_per_word)

story=["A few miles away,",
        ...
        "... and everything changed."
    ]
def story_mode():
    for x in story:
        display(x)
    
</code></pre>
<p>Even better is to store all the story lines in a text file and read it simply by using</p>
<pre><code>story=open("story.txt").readlines()
</code></pre>
<p>Then you can supply each line to the display function as shown.</p>
<p>You can even have multiple stories at multiple times and load each with the same function.
Do not make functions out of the program flow.
Instead, make functions out of reusable parts of the program.</p>
<h1>Learn and Use Simple Data Structures</h1>
<p>A tree is a perfect use of this type of general (question/answer/conditional next question) type of programs.
Read about trees <a href="https://en.wikipedia.org/wiki/Tree_(data_structure)" rel="nofollow noreferrer">here</a>. Implement a tree (python does not have an inbuilt type). Each node carries a question and responses to the question along with the parent's response. Then take all the children from a node and calculate the next question/node.</p>
<pre><code>def get_next_node(present_question,answer_choices,chidrens_of_node):
    user_answer=get_input(present_question,answer_choices)
    for node in childrens_of_node:
        if node.parents_response==user_answer:
            return node
    
def get_input(input_prompt,input_options)
    lower_input_options=[input_option.lower() for input_option in input_options]
    user_input=input(input_prompt).lower() 
    while(user_input not in lower_input_options):
        user_input=input(input_prompt).lower()
    return user_input
</code></pre>
<p>Load your tree into memory using a text file as well.<br>
These short reusable functions make your life a whole lot easier. Even if you have 10 answers to a given question giving 10 possible solutions it will still work. And the story can span across many nodes giving you thousands of different storylines.</p>
<p><strong>The ready function is recursive. That is why you are having problems</strong>
Do not write a recursive function when you don't need to and don't understand it. Read about recursion <a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)" rel="nofollow noreferrer">here</a>.
It is harder to implement recursion correctly even for very experienced programmers so keep that in mind.</p>
    </div>