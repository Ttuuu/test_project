<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is <em>usually</em> a way to fix this.</p>

<p>As stated earlier your current algorithm is inefficient. First: you keep this list but you don't use it for anything other than keeping a count of the number of elements to compare with the max. You could easily rewrite this algorithm to use a simple <code>chainSize</code> integer instead.</p>

<pre><code>public static void main (String[] args) {
    int max = 0;
    int num = 0;
    int result = 0;
    int chainSize = 0;

    for (int i = 2; i &lt; 100000; i++) {
        chainSize = 0;
        num = i;
        while (num != 1) {
            if (num % 2 == 0) {
                num = num / 2;
            } else {
                num = 3 * num + 1;
            }
            chainSize++;
        }
        if (chainSize &gt; max) {
            max = chainSize;
            result = i;
        }
    }

    System.out.printf("%d, %d", result, max);
}
</code></pre>

<p>And now your 'OutOfMemory' error <em>should</em> be fixed. This is the first suggestion that Simon stated.</p>

<p>But, if you test it, you might find that for <code>1000000</code> it <em>doesn't</em> solve your 'OutOfMemory' issue. Why? Because we're using the wrong data-type. Specifically, for value <code>113383</code> we end up going above the maximum value of a signed integer. You need to be using the <code>long</code> data type for your iteration to fix that.</p>

<p>I wrote a version which tells me when it happens, and got the following:</p>

<blockquote>
  <p>Value from chain 113383 at length 120 above integer max: 2482111348</p>
</blockquote>

<p>So at 120 calculations the chain from initial value <code>113383</code> exceeds the integer maximum. In an <code>Int32</code> type this will become a negative number, which enters an infinite loop:</p>

<pre><code>Value from chain 113383 at length 120 is negative: -1812855948
Value from chain 113383 at length 121 is negative: -906427974
Value from chain 113383 at length 122 is negative: -453213987
Value from chain 113383 at length 123 is negative: -1359641960
Value from chain 113383 at length 124 is negative: -679820980
</code></pre>

<p>Then we get to:</p>

<pre><code>Value from chain 113383 at length 217 is negative: -68
Value from chain 113383 at length 218 is negative: -34
Value from chain 113383 at length 219 is negative: -17
Value from chain 113383 at length 220 is negative: -50
Value from chain 113383 at length 221 is negative: -25
Value from chain 113383 at length 222 is negative: -74
Value from chain 113383 at length 223 is negative: -37
Value from chain 113383 at length 224 is negative: -110
Value from chain 113383 at length 225 is negative: -55
Value from chain 113383 at length 226 is negative: -164
Value from chain 113383 at length 227 is negative: -82
Value from chain 113383 at length 228 is negative: -41
Value from chain 113383 at length 229 is negative: -122
Value from chain 113383 at length 230 is negative: -61
Value from chain 113383 at length 231 is negative: -182
Value from chain 113383 at length 232 is negative: -91
Value from chain 113383 at length 233 is negative: -272
Value from chain 113383 at length 234 is negative: -136
Value from chain 113383 at length 235 is negative: -68
</code></pre>

<p>As you can see, we hit <code>-68</code> twice, which means it's in an infinite loop.</p>

<p>Just for fun:</p>

<blockquote>
  <p>Largest number in any chain: 56991483520</p>
</blockquote>
    </div>