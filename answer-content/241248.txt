<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Pass 1</h2>

<p>Here is some example code; it changes nothing about your algorithm:</p>

<pre><code>from functools import reduce
from operator import mul
from typing import Iterable, List, Sequence


def prod(a):
    return reduce(mul, a)


def combinations_with_limit(
    lst: Sequence[int], 
    length: int, 
    lim: int
) -&gt; Iterable[List[int]]:
    """:Description: LST - array of integers,
    length = number of elements in each subset ,
    lim = product limit of each subset"""

    H = list(range(length))         # H - represents the index array
    B = [lst[ii] for ii in H]       # B - the main array with elements
    while H[0] &lt;= len(lst) - length:
        for i in range(H[-1], len(lst)):
            H = H[:-1] + [i]
            B = [lst[ii] for ii in H]

            # Limit the outcome part. It skips the rest of the iteration
            if prod(B) &gt; lim:
                H[-1] = len(lst) - 1
            elif prod(B) &lt;= lim:
                yield B
            if H[-1] == len(lst) - 1:  # We reset the index array here
                j = len(H) - 1
                while H[j] == len(lst) - length + j:
                    j -= 1
                H[j] += 1
                for l in range(j+1, len(H)):
                    H[l] = H[l-1] + 1


print('  '.join(
    str(c) for c in 
    combinations_with_limit(
        (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31),
        4, 1000
    )
))
</code></pre>

<p>Things to note:</p>

<ul>
<li>Standard PEP8 indentation in more places</li>
<li>Type hints to clarify function signature</li>
<li>Don't use a lambda when a plain function will suffice</li>
<li>Use <code>join</code> for the output</li>
<li>Use a <code>tuple</code> for input since we don't need to mutate it</li>
</ul>

<h2>Tests</h2>

<p>Using your <code>original</code> function as well as the solution from <code>anaphory</code>, write a basic test:</p>

<pre><code>def test():
    inp = ((2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31), 4, 1000)
    ref = tuple(anaphory(*inp))
    for alt in (original,):
        act = tuple(tuple(li) for li in alt(*inp))
        refs, acts = set(ref), set(act)

        miss_r = acts - refs
        miss_s = refs - acts
        len_diff = len(act) != len(ref)
        if miss_r or miss_s or len_diff:
            print(f'Method {alt.__name__} failed -')
            if miss_r:
                print('   ref missing from act:', miss_r)
            if miss_s:
                print('   act missing from ref:', miss_s)
            if len_diff:
                print(f'   Length mismatch: {len(act)} != {len(ref)}')
            print()


if __name__ == '__main__':
    test()
</code></pre>

<p>This demonstrates which values your method is missing - as indicated in the other answer, <code>(2, 3, 11, 13)</code>.</p>

<h2>Other improvements</h2>

<ul>
<li>Store <code>len(lst)</code> in a local variable for reuse</li>
<li><code>H = H[:-1] + [i]</code> can be <code>H[-1] = i</code>, assuming there are no adverse effects of keeping the same list</li>
<li><code>elif prod(B) &lt;= lim:</code> should simply be <code>else</code></li>
</ul>
    </div>