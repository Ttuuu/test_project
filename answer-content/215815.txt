<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Hide implementation details of <code>Trie</code></h2>

<ul>
<li><code>root</code> should be private</li>
<li>current <code>search</code> and <code>findWords</code> methods should be private</li>
<li>write public version of <code>search</code>: should take only a <code>String</code> and call the private one</li>
<li>make <code>TrieNode</code> a <code>private static</code> inner class of <code>Trie</code></li>
</ul>

<h2>Change storage of <code>children</code></h2>

<p>Storing 26 pointers, most of which will be <code>null</code> in regular usage, is wasteful. You should use a more compact data structure; perhaps a <code>TreeMap&lt;Character, TrieNode&gt;</code>. You could even extend <code>TreeMap</code> for a cleaner interface.</p>

<h2>Only store characters once</h2>

<p>You effectively store each character in two places: explicitly in <code>TrieNode.content</code>, and implicitly by the node's position in its parent's <code>children</code> array (or in the key of the children map if you take my recommendation above). If you grab the character in the previous round of recursion, you should not need the <code>TrieNode.content</code> field at all.</p>

<h2>Fix bug using <code>StringBuilder</code></h2>

<p>In <code>findWords</code> if a node is a word and has children, the character will be appended twice.</p>

<h2>Minor tweaks</h2>

<ul>
<li>write a <code>Trie(Iterable&lt;String&gt; content)</code> constructor</li>
<li>no need to store <code>'*'</code> in root</li>
<li>use <code>List.forEach()</code> instead of <code>List.stream().forEach()</code></li>
<li>separate <code>search</code> functionality into <code>findNode</code> and <code>findWords</code></li>
<li>change <code>if (blah == true)</code> to <code>if (blah)</code></li>
<li>pass functions instead of using lambdas when possible</li>
<li>fix indentation -- your IDE should do this for you</li>
</ul>

<p>Finally, variables names can often be shorter if their purpose is clear in context. For example: <code>currentNode</code> vs <code>current</code>. A lot of people say to "use descriptive variables names"; however, brevity can also help with readability as well.</p>

<h2>My stab at the changes</h2>

<pre><code>class Trie {
    private static class TrieNode extends TreeMap&lt;Character, TrieNode&gt; {
        public boolean isWord;
    }

    private TrieNode root;

    public Trie(Iterable&lt;String&gt; content) {
        this();
        content.forEach(this::insert);
    }

    public Trie() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode current = root;
        for (int i = 0; i &lt; word.length(); i++) {
            current = current.computeIfAbsent(word.charAt(i),
                              k -&gt; new TrieNode());
        }
        current.isWord = true;
    }

    public List&lt;String&gt; search(String word) {
        List&lt;String&gt; results = new ArrayList&lt;&gt;();

        TrieNode node = findNode(word, root, 0);
        if (node == null) {
            return results;
        }

        findWords(node, new StringBuilder(word), results);
        return results;
    }

    private TrieNode findNode(String word, TrieNode current, int index) {
        if (index == word.length()) {
            return current;
        }

        Character ch = word.charAt(index);
        if (!current.containsKey(ch)) {
            return null;
        }

        return findNode(word, current.get(ch), ++index);
    }

    private void findWords(TrieNode current, StringBuilder sb, List&lt;String&gt; results) {
        current.forEach((Character ch, TrieNode child) -&gt; {
            StringBuilder word = new StringBuilder(sb).append(ch);
            if (child.isWord) {
                results.add(word.toString());
            }
            findWords(child, word, results);
        });
    }
}
</code></pre>

<pre><code>class TrieTest {
    public static void main(String args[]) {
        Trie trie = new Trie(Arrays.asList(new String[] { "dog", "dee", "deer", "deal" }));

        trie.search("de").forEach(System.out::println);
        System.out.println();

        trie.search("do").forEach(System.out::println);
        System.out.println();
    }
}
</code></pre>
    </div>