<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nowadays using auto-implemented properties is the way to go.  </p>

<pre><code>/// &lt;summary&gt; 
/// Gets or sets the type of the animation. Default is In.
/// &lt;/summary&gt;
public AnimationType Type { get; set; } = AnimationType.In;
</code></pre>

<p>looks neater than </p>

<blockquote>
<pre><code>private AnimationType _type = AnimationType.In;
/// &lt;summary&gt;
/// Gets or sets the type of the animation. Default is In.
/// &lt;/summary&gt;
public AnimationType Type
{
    get { return _type; }
    set { _type = value; }
}  
</code></pre>
</blockquote>

<hr>

<p>Using C# 6 (VS 2015) we can simplify the null check in the <code>OnCompleted()</code> method like so  </p>

<pre><code>protected void OnCompleted()
{
    _animatedElements.Remove(Target);

    Completed?.Invoke(this, null);
}  
</code></pre>

<hr>

<p>If we take advantage of the result of the <code>HashSet.Add()</code> method we can simplify the <code>BeginAnimation()</code> method like so  </p>

<pre><code>public void BeginAnimation()
{
    if (_animatedElements.Add(Target))
    {
       BeginAnimationDetail();
    }
}  
</code></pre>

<p>but I would throw a <code>NullReferenceException</code> if <code>Target == null</code> so it will be thrown from that <code>public</code> method instead of the <code>protected abstract void BeginAnimationDetail()</code> method. IMO this is neccessary because the <code>Target</code> property is public hence it can by error be set to <code>null</code>.  </p>
    </div>