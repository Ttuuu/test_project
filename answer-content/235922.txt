<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there something I forgot to consider</p>
</blockquote>

<p><strong>Overflow</strong></p>

<p><code>fabs(x) + fabs(y)</code> is prone to  overflow, even if mathematically <code>epsilon() * (fabs(x) + fabs(y)) * pow(10, doia + 1)</code> is representable as a <code>T</code>, resulting in incorrect results.</p>

<p>I'd expect <code>cmp(T x, T y, unsigned int doia = 0)</code> to work over the entire range of <code>x,y</code>.</p>

<pre><code>// alternative
(fabs(x)/2 + fabs(y)/2) * (epsilon() * pow(10, doia + 1) * 2)
</code></pre>

<p><strong>Not-a-number</strong></p>

<p>The generation of <code>gtoeq, ltoeq</code> are 0 when either/both <code>x</code> or <code>y</code> are a <em>not-a-number</em>.  Thus code returns 0, incorrectly implying near equality.  Perhaps return something to indicate more that 3 conditions like a 4-bit (==,&gt;,&lt;,not comparable) or a <code>double</code> -1,0,1,NAN.</p>

<p><strong>Precision</strong></p>

<p>The <code>+ 1</code> in <code>doia + 1</code> does not well allow code to just use <code>epsilon</code>, but minimally must use <code>10 * epsilon</code>.  Consider dropping the <code>+ 1</code>.</p>

<p>Rather than an integer indicating some power-of-ten * epsilon, consider simply using the desired precision or <code>n * epsilon()</code>.  For me I'd rather use a power-of-2.</p>
    </div>