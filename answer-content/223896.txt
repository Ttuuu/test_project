<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have participated in Google kickstart wiggle walk.</p>

<p>I have optimized the solution to be <span class="math-container">\$\mathcal{O}(N\times logN)\$</span> but it's still getting "time limit exceeded".</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
int main()
{
    int t, n ,*arr, r , c, sr,sc,i=0;
    arr=(int*)malloc(5*sizeof(int));
    char temp;
    scanf("%d",&amp;t);
    int z=1;
    while(z&lt;=t)
    {
        int k=0;
        do {
            scanf("%d%c",arr+k,&amp;temp);
            k++;
        } while(temp!='\n');
        n=*(arr);
        r=*(arr+1);
        c=*(arr+2);
        sr=*(arr+3);
        sc=*(arr+4);
        char *string;
        string =(char*)malloc(n*sizeof(char));
        int *grid = (int *)malloc(r * c * sizeof(int));
        int *northgrid =(int *)malloc(r * c * sizeof(int));
        int *southgrid = (int *)malloc(r * c * sizeof(int));
        int *eastgrid =(int *)malloc(r * c * sizeof(int));
        int *westgrid = (int *)malloc(r * c * sizeof(int));
        int current_sr,current_sc;
        *(grid + sr*c + sc)=1;
        for(int j=0; j&lt;n; j++)
        {
            scanf("%c",string+j);
            current_sr = sr;
            current_sc = sc;

            if(*(string+j)=='N')
            {
                do
                {
                    if(*(northgrid + sr*c + sc)==0)
                    {

                        sr--;

                    }
                    else if(*(northgrid + sr*c + sc)!=0)
                    {
                        while(*(northgrid + sr*c + sc)!=0)
                        {
                            sr=*(northgrid + sr*c + sc);
                        }
                    }
                } while(*(grid + sr*c + sc)==1);
                *(grid + sr*c + sc)=1;
                *(southgrid+ sr*c + sc)=current_sr;
                *(northgrid+current_sr*c+current_sc)=sr;
            }
            else if(*(string+j)=='S')
            {
                do
                {
                    if(*(southgrid + sr*c + sc)==0)
                    {

                        sr++;

                    }
                    else if(*(southgrid + sr*c + sc)!=0)
                    {
                        while(*(southgrid + sr*c + sc)!=0)
                        {
                            sr=*(southgrid + sr*c + sc);
                        }
                    }
                } while(*(grid + sr*c + sc)==1);
                *(grid + sr*c + sc)=1;
                *(northgrid+ sr*c + sc)=current_sr;
                *(southgrid+current_sr*c+current_sc)=sr;
            }
            else if(*(string+j)=='E')
            {
                do
                {
                    if(*(eastgrid + sr*c + sc)==0)
                    {

                        sc++;

                    }
                    else if(*(eastgrid + sr*c + sc)!=0)
                    {
                        while(*(eastgrid + sr*c + sc)!=0)
                        {
                            sr=*(eastgrid + sr*c + sc);
                        }
                    }
                } while(*(grid + sr*c + sc)==1);
                *(grid + sr*c + sc)=1;
                *(westgrid+ sr*c + sc)=current_sc;
                *(eastgrid+current_sr*c+current_sc)=sc;
            }
            else if(*(string+j)=='W')
            {
                do
                {
                    if(*(westgrid + sr*c + sc)==0)
                    {

                        sc--;

                    }
                    else if(*(westgrid + sr*c + sc)!=0)
                    {
                        while(*(westgrid + sr*c + sc)!=0)
                        {
                            sc=*(westgrid + sr*c + sc);
                        }
                    }
                } while(*(grid + sr*c + sc)==1);
                *(grid + sr*c + sc)=1;
                *(eastgrid+ sr*c + sc)=current_sc;
                *(westgrid+current_sr*c+current_sc)=sc;
            }
            // printf("Values are: %d , %d",sr,sc);
        }
        printf("Case #%d: %d %d\n",z,sr,sc);

        z++  ;
    }
}
</code></pre>
    </div>