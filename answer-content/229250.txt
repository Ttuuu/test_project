<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with the first version: A loop </p>

<pre><code>var i = 0
while i &lt; points.count {
    // ...
    i += 2
}
</code></pre>

<p>can be written as a for-loop over a <em>stride:</em></p>

<pre><code>for i in stride(from: 0, to: points.count, by: 2) {
    // ...
}
</code></pre>

<p>which restricts the scope of <code>i</code> to the loop body, and makes it a constant. Now each loop iteration appends exactly one element to <code>var result: PointPair</code>, which means that we can write this as a <code>map</code> operation:</p>

<pre><code>let result: PointPair = stride(from: 0, to: points.count, by: 2)
    .map { i in
        (start: Point(x: points[i].0, y: points[i].1),
         end: Point(x: points[i+1].0, y: points[i+1].1))
    }
</code></pre>

<p>This may already be the “functional” version that you are looking for, but let's also have a look at your other two variants.</p>

<p>The “intuitive code” creates two additional arrays by filtering the original one for even/odd indices. After filtering the arrays the offsets are not needed, giving the warnings</p>

<pre>
Immutable value 'offset' was never used; consider replacing with '_' or removing it
Immutable value 'offsetTwo' was never used; consider replacing with '_' or removing it
</pre>

<p>This can be fixed with</p>

<pre><code>let (_, point) = one
let (_, otherPoint) = other
</code></pre>

<p>A better way is to use <code>compactMap()</code> (which can be thought of as a combination of <code>filter()</code> and <code>map()</code>) to create arrays of the points with even/odd indices, without the element offsets.</p>

<p>Using <code>reduce()</code> for creating the result array is inefficient, as it creates intermediate arrays for each iteration. <code>reduce(into:_:)</code> would be an improvement, but actually this is just a <code>map()</code>:</p>

<pre><code>let result: PointPair = zip(
    points.enumerated().compactMap { (offset, element) -&gt; Point? in
        offset % 2 == 0 ? Point(x: element.0, y: element.1) : nil },
    points.enumerated().compactMap { (offset, element) -&gt; Point? in
        offset % 2 == 1 ? Point(x: element.0, y: element.1) : nil }
).map { ($0, $1) }
</code></pre>

<p>This looks a lot “less messy” than your original version, but still has the disadvantage of creating intermediate arrays.</p>

<p>I have not much to say about your last version. It uses <code>reduce(into:)</code> which is good to avoid the creation of intermediate arrays. The only disadvantage is that temporary pairs are created and modified in every second step.</p>

<p>So the  “stride + map” variant looks like the best to me: It is efficient and easy to read.</p>

<p>A final remark: The type alias </p>

<pre><code>typealias PointPair = [(start: Point, end: Point)]
</code></pre>

<p>is misleading, because it does not define a pair of points but an <em>array</em> of pairs of points. I would probably define a dedicated type for a pair of points instead</p>

<pre><code>struct Line {
    let from: Point
    let to: Point
}
</code></pre>

<p>and then use <code>[Line]</code>  as the result type.</p>
    </div>