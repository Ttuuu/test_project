<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>Public Sub Class_Initialize()

End Sub
</code></pre>
</blockquote>

<p>Avoid empty members; this initializer serves no purpose, remove it.</p>

<p>Although I could infer <code>r</code> and <code>c</code> are meant for <code>row</code> and <code>column</code>, these single-letter parameters should probably be called <code>row</code> and <code>column</code>, for clarity. Likewise, <code>Cols</code> should probably be called <code>Columns</code>.</p>

<p>This is unfortunate:</p>

<blockquote>
<pre><code>Public Property Let Value(r As Long, c As Long, val As Double)
</code></pre>
</blockquote>

<p>I'd consider calling the property <code>ValueAt</code>, and the <code>val</code> parameter could then be called <code>value</code> - and since parameters are passed <code>ByRef</code> by default, I'd be explicit about them being passed <code>ByVal</code> - there's no need to pass them by reference:</p>

<pre><code>Public Property Let ValueAt(ByVal rowIndex As Long, ByVal columnIndex As Long, ByVal value As Double)
</code></pre>

<p>In the case of <code>LoadMatrixString</code>, I'd consider changing the signature from this:</p>

<blockquote>
<pre><code>Public Sub LoadMatrixString(str As String)
</code></pre>
</blockquote>

<p>To that:</p>

<pre><code>Public Sub LoadMatrixString(ByVal values As String)
</code></pre>

<p>And for the members that take a <code>m As Matrix</code> parameter, I'd go with <code>ByVal value As Matrix</code> and avoid single-letter identifiers. I find "value" remains the most descriptive name in these contexts.</p>

<p>There's an inconsistency in the way you're naming "Dimensions": you have <code>CheckDimensions</code>, but then you also have <code>GetDims</code> - I'd rename the latter <code>GetDimensions</code>.</p>

<hr>

<p>I like how the class is self-contained, but then it seems to me like the <code>ToString</code> implementation would be a perfect excuse to use <a href="https://codereview.stackexchange.com/q/67596/23788">your wonderful <code>StringBuilder</code> class</a>, and I bet you'd get the string output much, much faster ;)</p>

<p>As for this:</p>

<blockquote>
  <p><em>I'm particularly intersted to know whether I should split the parser off into a separate class to be used independently, or maybe be called by the Matrix class itself.</em></p>
</blockquote>

<p>I think you could simply move the parsing code to a <code>MatrixParser</code> class, and be done with it! ...Actually, I'd copy the <code>LoadMatrixString</code> procedure there, and rename it <code>Parse</code>, make it a <code>Function</code> and have it return a <code>Matrix</code>. Then <code>LoadMatrixString</code> could be modified to call this new function.</p>
    </div>