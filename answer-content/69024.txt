<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not sure I believe that is Dijkstra's algorithm.  I would expect to see two lists in the implementation: a list of reached nodes (have found shortest distance), and a sorted list of nodes that are the next to be searched.</p>

<p>It should look like this:</p>

<pre><code>Dijkstra(Graph const&amp; graph, Node start, Node end)
{
     List           reachedNodes;
     PriorityList   boundry;

     boundry.insert(start, 0, []);

     while(!boundry.empty())
     {
          nextNode,cost,route   = boundry.top();
          boundry.pop();

          if (nextNode == end)
          {
              // We found the route.
              route.append(end);
              return cost, route;
          }
          if (reachedNodes.find(nextNode) != reachedNodes.end())
          {
              // Already found best route to nextNode. So we can ignore it.
              continue;
          }
          // So this is the best route to nextNode :-)
          // We know this because `boundry` was sorted by lowest cost.
          // so add it to reached Nodes (we can ignore this node if we see it again).
          reachedNodes.insert(nextNode);

          // Add this node to the route.
          route.append(nextNode);

          // For each edge that comes out of this node.
          // Add it to the `boundry` with the new cost.
          foreach(edge: grpah.edgesFrom(nextNode))
          {
               boundry.insert(edge.dest, cost + edge.cost, route);
          }
     }
     // No route from start to end
     return infinity, [];
}
</code></pre>
    </div>