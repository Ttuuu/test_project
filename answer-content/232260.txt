<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a framework-less vanilla JS/DOM it's pretty much fine as is.<br>
I can only suggest a few minor/cosmetic points to consider:</p>

<ul>
<li>extract things from the big DOM event handler so it contains only the major flow and rename it from <code>getPullRequestData</code> to something else because your function also renders the data but <code>getXXX</code> implies only the action of getting - I would use a generic name like <code>onsubmit</code> since the function isn't reusable and this name tells exactly what it actually is.</li>
<li>shorten some names because verbosity can make simple things look complicated</li>
<li>sometimes <code>then</code> + <code>catch</code> may convey the flow better than <code>await</code> + try/catch</li>
</ul>

<pre><code>function onsubmit(event) {
  event.preventDefault()
  byId('user-list').textContent = ''
  byId('pull-request-info').textContent = ''
  renderStatus('')
  fetchPR()
    .then(async pr =&gt; {
      renderPrInfo(pr)
      renderPrBody(pr.state === 'open' &amp;&amp; await fetchUsers(pr))
    })
    .catch(renderStatus)
}
</code></pre>

<ul>
<li>since you're not writing a low-level library, there should be no need to use createDocumentFragment explicitly, instead just accumulate the elements in an array and pass it to <code>append</code>, which will allow us to express the intent and flow more explicitly:</li>
</ul>

<pre><code>function renderUsers(users) {
  const ul = byId('user-list')
  const title = createElement('h3', {
    textContent: users.length
      ? 'Reviewers:'
      : 'No reviewers found :(.',
  })
  ul.before(title)
  ul.append(...users.map(renderUser).filter(Boolean))
}
</code></pre>

<ul>
<li>use <code>createElement</code>'s second props parameter more in <code>createUser</code></li>
<li>add a third parameter <code>children</code> to <code>createElement</code></li>
<li>use <code>Object.assign</code> in <code>createElement</code></li>
<li>make <code>createUser</code> return an array so it can be used directly in <code>append</code></li>
<li>shorten <code>.map(item =&gt; singleArgFunction(item))</code> to <code>.map(singleArgFunction)</code></li>
<li>add JSDoc comments describing what the function does and its params/returned value, some IDE provide convenient plugins or built-in functionality to simplify the task</li>
<li>see if you like declaring functions in the order that loosely follows the execution flow from more generalized to more specific</li>
</ul>

<pre><code>const apiUrl = 'https://api.github.com'
const apiOptions = {
  headers: {
    Accept: 'application/vnd.github.v3+json',
  },
}

byId('pull-request-form').addEventListener('submit', onsubmit)

function onsubmit(event) {
  event.preventDefault()
  byId('user-list').textContent = ''
  byId('pull-request-info').textContent = ''
  renderStatus('')
  fetchPR()
    .then(async pr =&gt; {
      renderPrInfo(pr)
      renderPrBody(pr.state === 'open' &amp;&amp; await fetchUsers(pr))
    })
    .catch(renderStatus)
}

function fetchPR() {
  const { pathname } = new URL(byId('pull-request-url').value)
  const url = `/repos${pathname.replace('/pull/', '/pulls/')}`
  return fetchGithubApi(url)
}

async function fetchUsers(pr) {
  const allComments = await Promise.all([
    fetchGithubApi(pr.review_comments_url),
    fetchGithubApi(pr.comments_url),
  ])
  const userUrls = allComments
    .flat()
    .filter(({ user }) =&gt; user.login !== pr.user.login)
    .map(({ user }) =&gt; user.url)
  const uniqUrls = [...new Set(userUrls)]
  return Promise.all(uniqUrls.map(fetchGithubApi))
}

async function fetchGithubApi(endpoint) {
  const url = endpoint.startsWith(apiUrl) ? endpoint : `${apiUrl}${endpoint}`
  return (await fetch(url, apiOptions)).json()
}

function renderStatus(status) {
  byId('pull-request-url-messages').textContent = status
}

function renderPrInfo(pr) {
  const title = createElement('a', {
    id: 'title',
    href: pr.html_url,
    textContent: pr.title,
  })
  byId('pull-request-info').append(title, createAvatar(pr.user))
}

function renderPrBody(users) {
  if (users) {
    renderUsers(users)
  } else {
    renderStatus('The pull request is already closed!')
  }
}

function renderUsers(users) {
  const ul = byId('user-list')
  const title = createElement('h3', {
    textContent: users.length
      ? 'Reviewers:'
      : 'No reviewers found :(.',
  })
  ul.before(title)
  ul.append(...users.map(renderUser).filter(Boolean))
}

function renderUser(user) {
  return user.name &amp;&amp; createElement('li', {}, createUser(user))
}

function createUser(user) {
  return [
    createAvatar(user),
    createElement('a', {
      href: user.html_url,
      className: 'login',
      textContent: user.login,
    }),
    user.name &amp;&amp;
    createElement('div', {
      className: 'name',
      textContent: user.name,
    }),
  ].filter(Boolean)
}

function createAvatar(user) {
  return createElement('img', {
    src: user.avatar_url,
    className: 'avatar',
  })
}

function createElement(type, options = {}, children) {
  const element = document.createElement(type)
  Object.assign(element, options)
  if (children) element.append(...children)
  return element
}

function byId(elementId) {
  return document.getElementById(elementId)
}
</code></pre>
    </div>