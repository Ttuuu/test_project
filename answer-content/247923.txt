<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is already using symbolic constants such as <code>MAXN</code>, the code would be clearer if <code>1000000007</code> was a numeric constant as well.</p>
<p>Are you sure that <code>first</code> and <code>second</code> will always be integers you may need to make these <code>long long</code> as well. When using a <code>long long</code> there is no reason to specify <code>int</code> as well, the values will be integer unless otherwise indicated.</p>
<h2>Avoid <code>using namespace std;</code></h2>
<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<p>Pass the array <code>residues</code> into the functions <code>findResidues()</code> and <code>sumBetween()</code></p>
<h2>Avoid Global Variables</h2>
<p>It is very difficult to read, write, debug and maintain programs that use global variables. Global variables can be modified by any function within the program and therefore require each function to be examined before making changes in the code. In C and C++ global variables impact the namespace and they can cause linking errors if they are defined in multiple files. The <a href="https://stackoverflow.com/questions/484635/are-global-variables-bad">answers in this stackoverflow question</a> provide a fuller explanation.</p>
<h2>Use C++ Container Classes</h2>
<p>The code is currently using old <code>C</code> programming style arrays, it would be better to use C++ container classes such as <a href="http://www.cplusplus.com/reference/array/array/" rel="nofollow noreferrer">std::array</a> or <a href="http://www.cplusplus.com/reference/vector/vector/" rel="nofollow noreferrer">std::vector</a>. Either one of these classes will allow you to use iterators which could possibly speed up the implementation.</p>
<p>Possibly <code>std::vector</code> would be a better type to use that <code>std::array</code> would be in this particular problem. <code>std::vector</code> is a variable length array. If you want to continue using <code>MAXN</code> as the maximum size you can reserve the memory.</p>
<h2>Gather All the Data Before Processing the Data</h2>
<p>Currently the program is creating the resedue information as the data is being input. Rather than breaking up calculations by getting new input first get all of the input and then process the data. Getting all the input at once should help speed up the program, and will make the algorithm easier to follow.</p>
<p>Break up the <code>main()</code> function a little more into 2 functions that get input and then functions that do the calculations.</p>
<h2>Use <code>size_t</code> or Another <code>unsigned</code> Variable Type When Indexing Arrays or Other Indexed Variable Types</h2>
<p>When indexing into arrays it is safer to use <code>size_t</code> because this is unsigned and the value can't go negative if it gets too large. Indexing by negative numbers can cause an immediate out of range exception.</p>
    </div>