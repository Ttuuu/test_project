<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General Feedback</strong></p>

<ul>
<li><p>the package 'StackCanary' can follow Java standard naming. Ref: <a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html" rel="nofollow noreferrer">https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html</a></p></li>
<li><p>You do not need to type Tag on both side. Update all instances.</p></li>
</ul>

<pre><code>     HashSet&lt;Tag&gt; tags = new HashSet&lt;Tag&gt;(); // not so good
     HashSet&lt;Tag&gt; tags = new HashSet&lt;&gt;(); //this is better
     Set&lt;Tag&gt; tags = new HashSet&lt;&gt;(); //this is even better
</code></pre>

<ul>
<li>Answer and Question can be combined to a single Entity (let's name it POST) and provide a Type column ( can be Enum) to indicate the type of post. It would remove lots of duplications in your code.</li>
</ul>

<pre><code>    Post {

      Type type;
      List&lt;Post&gt; answers; //only post of type 'Question' can have answers

    }
</code></pre>

<ul>
<li>User entity is doing too much.
Move votedUpQuestions, votedDownQuestions, votedUpAnswers, votedDownAnswers to a new table. Name it Vote with post_id and user_id as composite key. Just add a new record </li>
</ul>

<pre><code>    Vote{
        Post post;
        User user;
        VoteType type; //can be enum so that you can add thumbs up, like, haha etc easily later
    }
</code></pre>

<ul>
<li><p>IndexController.main()
Use separate query to find votes. You can use caching for performance. Similar feedback on QuestionPageController</p></li>
<li><p>Question.convertBodyFromMarkdownToHTML
Its better to keep the entity classes as POJO.</p></li>
<li><p>When fetching a large entity and child object, use JOIN-Fetch or @EntityGraph. Lookup N+1 problem in ORM to know more about it</p></li>
<li><p>application.properties
Use in-memory db like H2 so its easy to test your app. You can use Spring's @Profiles to use H2 locally and mariadb in some other profile.</p></li>
<li><p>resources/static/**
You can use Webjar instead of copying javascript/css etc manually</p></li>
</ul>

<hr>

<p><strong>Regarding your questions,</strong></p>

<blockquote>
  <p>The VotesController class consists of several almost identical
  methods. I know that copy-past is bad, but I have no idea how to deal
  with it in this case.</p>
</blockquote>

<ul>
<li>You can create a VoteService and have a single method vote(User, Post, Type). You can keep your methods on controller but compose the Type parameter and  delegate the call to service. If you merge Answer and Question table, lots of duplications can be avoided.</li>
</ul>

<blockquote>
  <p>I am not sure about naming conventions in Spring. Have I properly
  named controllers, entities, fields, etc?</p>
</blockquote>

<ul>
<li>They looks good to me. You can use Constructor injection and also use Lombok to remove a lot of code. See this <a href="https://github.com/gtiwari333/spring-boot-web-application-seed/blob/master/core/src/main/java/gt/app/modules/bookmark/BookmarkService.java#L17" rel="nofollow noreferrer">https://github.com/gtiwari333/spring-boot-web-application-seed/blob/master/core/src/main/java/gt/app/modules/bookmark/BookmarkService.java#L17</a> for reference</li>
</ul>

<blockquote>
  <p>I really hate the way I pass information to the Mustache templates.</p>
</blockquote>

<ul>
<li>You can either map your entity object to another POJO with String date field and return that on Controller method. Or use utilities provided by Mustache to format date while rendering. I'm not familiar with Mustache but Thymeleaf has the option. See this <a href="https://github.com/gtiwari333/spring-boot-web-application-seed/blob/master/core/src/main/resources/templates/article.html#L59" rel="nofollow noreferrer">https://github.com/gtiwari333/spring-boot-web-application-seed/blob/master/core/src/main/resources/templates/article.html#L59</a></li>
</ul>

<p>Finally, I noticed you are using JDK8. Is there any reason to must use JDK8? Your code runs fine with JDK11 without any update. You should try that.</p>

<p>Also, you can check the following repos for a reference 
- <a href="https://github.com/gtiwari333/spring-boot-web-application-seed" rel="nofollow noreferrer">https://github.com/gtiwari333/spring-boot-web-application-seed</a></p>

<p>--</p>

<p><strong>Update 1</strong></p>

<ul>
<li><a href="https://github.com/Eanmos/stackcanary/commit/90a22d1477c87c9d9a3e6418861e38c77e6b3e96#diff-600376dffeb79835ede4a0b285078036R23" rel="nofollow noreferrer">https://github.com/Eanmos/stackcanary/commit/90a22d1477c87c9d9a3e6418861e38c77e6b3e96#diff-600376dffeb79835ede4a0b285078036R23</a></li>
</ul>

<p>Lombok's version is managed by Spring. You don't need to provide version here. See this for the list 
- <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/build.gradle" rel="nofollow noreferrer">https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/build.gradle</a>
- <a href="https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.3.0.RELEASE/spring-boot-dependencies-2.3.0.RELEASE.pom" rel="nofollow noreferrer">https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.3.0.RELEASE/spring-boot-dependencies-2.3.0.RELEASE.pom</a></p>

<p>That way you can get rid of compatibility between various libraries because Spring Boot takes care of that for you.</p>

<ul>
<li>AddAnswerController and other places</li>
</ul>

<p>Since you have Lombok in place, you can replace the following code by Constructor injection using @RequiredArgsConstructor</p>

<pre><code>@Controller
public class AddAnswerController {
    @Autowired
    private QuestionRepository questionRepository;

    @Autowired
    private AnswerRepository answerRepository; 


@Controller
@RequiredArgsConstructor
public class AddAnswerController {    
    private final QuestionRepository questionRepository;
    private final AnswerRepository answerRepository; 
..
</code></pre>

<ul>
<li>Don't fetch all voted*ByUsers records just to find the size. Imagine billions of Vote records per Question. You are currently fetching billions of DB records and doing size() operation just to get the count. It would be a single COUNT query on DB.
Remember always delegate count, exists, search operation to DB. </li>
</ul>

<pre><code>    public void calculateVotes() {
        votes = votedUpByUsers.size() - votedDownByUsers.size();
    }

    //here we are fetching all answers from DB to memory just to get the size. 
    public void calculateAnswersCount() {
        answersCount = this.answers.size();
    }

    public void setVotedByActiveUser(User user) {
        if (user == null) {
            this.votedUpByActiveUser = false;
            this.votedDownByActiveUser = false;
        } else if (user.getVotedUpQuestions().contains(this)) { //FIX THIS
            this.votedUpByActiveUser = true;
            this.votedDownByActiveUser = false;
        } else if (user.getVotedDownQuestions().contains(this)) { //FIX THIS
    ...
    }


</code></pre>

<ul>
<li>You can move this to a util/service class so that it will be reusable and easily unit tested </li>
</ul>

<pre><code>    public void convertBodyFromMarkdownToHTML() {
        Node           document  =  Parser.builder().build().parse(body);
        HtmlRenderer   renderer  =  HtmlRenderer.builder().escapeHtml(true).build();
        bodyInHTML               =  renderer.render(document);
    }
</code></pre>
    </div>