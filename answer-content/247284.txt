<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Misleading type alias</h1>
<p>You are <code>using uint16 = std::uint_fast16_t</code>, but if I see the name <code>uint16</code>, as a programmer I assume this is identical to <code>uint16_t</code>. But <code>uint16_t</code> and <code>uint_fast16_t</code> might have very different properties, so therefore it is a potentially misleading name.</p>
<p>When you create a type alias, you usually want to give it a name that conveys its intent. Here, it's to hold sizes and indices. So I would recommed <code>using size_type = ...</code> instead.</p>
<h1>Name functions after their intent, not their implementation</h1>
<p>The function <code>breadthFirstSearch()</code> indeed uses a BFS algorithm internally, but the intent of this function is to return the number of infected nodes given a set of initial infectations and an excluded node. So name it something like <code>countInfectedNodes()</code> instead.</p>
<p>While you are at it, rename <code>node</code> in that function to <code>excluded_node</code>, to make it clear what its purpose is.</p>
<h1>Use a <code>std::vector&lt;bool&gt;</code> to keep track of infected nodes</h1>
<p>A bitset is much more compact and faster than a <code>std::set</code> in this case, since nodes are just numbers between zero and <code>std::size(graph)</code>. However, you can't use <code>std::bitset</code> here because that needs the size to be known at compiletime. Instead, this is one of the few occasions where a <a href="https://en.cppreference.com/w/cpp/container/vector_bool" rel="nofollow noreferrer"><code>std::vector&lt;bool&gt;</code></a> is useful:</p>
<pre><code>std::vector&lt;bool&gt; nodes_set(std::size(graph));
nodes_set[excluded_node] = true;
...
</code></pre>
<h1>Avoid modifying the input parameters</h1>
<p>While the LeetCode problem does state that the parameters are non-<code>const</code>, it is nevertheless bad practice to modify the input parameters if it's not expected that this will happen.</p>
<p>You can avoid sorting <code>initial</code>, by just modifying the way you set <code>smallest_node</code>:</p>
<pre><code>if (curr_len &lt; min_len || (curr_len == min_len &amp;&amp; init_node &lt; smallest_node)) {
    min_len = curr_len;
    smallest_node = init_node;
}
</code></pre>
<h1>Consider stopping counting infections if it won't improve the minimum</h1>
<p>Currently, for every candidate node to remove, you count all infections. However, if halfway you notice that you are already above the minimum seen so far, then you can stop early. Just pass the previous <code>min_len</code> to <code>countInfectedNodes()</code> and check it when incrementing <code>count</code>:</p>
<pre><code>static size_type countInfectedNodes(
    const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; graph,
    std::vector&lt;int&gt;&amp; initial,
    size_type excluded_node,
    size_type current_min,
) {
    ...
        nodes_set[curr_node] = true;
        if (++count &gt; current_min) {
            break;
        }
    ...
}
</code></pre>
    </div>