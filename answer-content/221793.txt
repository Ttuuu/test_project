<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Can I say first off - this is excellent - both the post and the provided answer.  </p>

<p>I tool follow a similar pattern of surfacing a DTO through my controllers and abstracting away my data access.  </p>

<p>I have been looking for something like this for awhile now and this has helped me out.  </p>

<p>Taking what @CharlesNRice provided using the ExpressionVisitor - I added yet another little change to the MappedConverter implemented. </p>

<p>Using Automapper and it seems that the </p>

<pre><code>public class Mapping&lt;Dto, Entity&gt;
{
  public PropertyInfo DtoProperty { get; }
  public PropertyInfo EntityProperty { get; }
}
</code></pre>

<p>Could be replaced by using Automapper and referencing the mapping configuration that is registered.  </p>

<p>I changed the Mapped Converter to to a IPropertyMappingProvider</p>

<pre><code>    public interface IPropertyMappingProvider
    {
        IPropertyMapping GetPropertyMapping&lt;TSource, TDestination&gt;(string sourcePropertyName);
    }
</code></pre>

<p>With the IPropertyMapping the exact same thing as the Mapping you have implemented.  </p>

<pre><code>    public interface IPropertyMapping
    {
        PropertyInfo SourceProperty { get; }
        PropertyInfo DestinationProperty { get; }
    }
</code></pre>

<p>The implementation of the PropertyMappingProvider simply injects the IMapper instance that is registered with the application.  We can then use the IMapper to get the property mapping configuration.  </p>

<pre><code> public class PropertyMappingProvider : IPropertyMappingProvider
{
    private readonly IMapper _mapper;

    public PropertyMappingProvider(IMapper mapper)
    {
        _mapper = mapper;
    }

    /// &lt;summary&gt;
    /// Returns a &lt;see cref="IPropertyMapping"/&gt; mapped properties from the IMapper configuration based on the source property name
    /// &lt;/summary&gt;
    /// &lt;typeparam name="TSource"&gt;Source mapping class&lt;/typeparam&gt;
    /// &lt;typeparam name="TDestination"&gt;Destination mapping class&lt;/typeparam&gt;
    /// &lt;param name="sourcePropertyName"&gt;The property name on the source class&lt;/param&gt;
    /// &lt;returns&gt;&lt;see cref="IPropertyMapping"/&gt; Contains the &lt;see cref="PropertyInfo"/&gt; classes for &lt;typeparam name="TSource"&gt;&lt;/typeparam&gt; property and &lt;typeparam name="TDestination"&gt;&lt;/typeparam&gt;&lt;/returns&gt;
    public virtual IPropertyMapping GetPropertyMapping&lt;TSource, TDestination&gt;(string sourcePropertyName)
    {
        var configurationProvider = _mapper.ConfigurationProvider;

        var mapping = configurationProvider.FindTypeMapFor&lt;TSource, TDestination&gt;();

        var propertyMap = mapping.PropertyMaps.FirstOrDefault(pm =&gt; pm.SourceMember.Name == sourcePropertyName);

        if(propertyMap == null)
            throw new ArgumentException($"No mappings found for {sourcePropertyName}");

        if(propertyMap.SourceMember.MemberType != MemberTypes.Property)
            throw new ArgumentException($"{sourcePropertyName} is not a property {nameof(TSource)}");

        if(propertyMap.DestinationMember.MemberType != MemberTypes.Property)
            throw new ArgumentException($"{propertyMap.DestinationMember.Name} is not a property of {nameof(TDestination)}");

        var sourcePropertyInfo = (PropertyInfo) propertyMap.SourceMember;

        var destinationPropertyInfo = (PropertyInfo) propertyMap.DestinationMember;

        return new PropertyMapping(sourcePropertyInfo, destinationPropertyInfo);
    }
}
</code></pre>

<p>We can get to the PropertyInfo objects on the mapped properties.  </p>

<p>Using it is just as you have done in your ExpressionVisitor implementation:</p>

<pre><code> public sealed class ExpressionConverter&lt;TFrom, TTo&gt; : ExpressionVisitor, IExpressionConverter&lt;TFrom, TTo&gt;
{
    private readonly IPropertyMappingProvider _propertyMappingProvider;
    private ParameterExpression _fromParameter;
    private ParameterExpression _toParameter;

    public ExpressionConverter(IPropertyMappingProvider propertyMappingProvider)
    {
        _propertyMappingProvider = propertyMappingProvider;
    }

    public Expression&lt;Func&lt;TTo, bool&gt;&gt; Convert(Expression&lt;Func&lt;TFrom, bool&gt;&gt; expression)
    {
        var expr =  Visit(expression);

        return expr.Convert&lt;TTo&gt;();
    }

...

 protected override Expression VisitMember(MemberExpression node)
    {
        if (node.Expression != _fromParameter) return base.VisitMember(node);

        var member = _propertyMappingProvider.GetPropertyMapping&lt;TFrom, TTo&gt;(node.Member.Name);

        return Expression.Property(_toParameter, member.DestinationProperty);
    }
</code></pre>
    </div>