<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Import</h1>
<p>In both classes you import dependencies that are unused.</p>
<p>In <code>JavaKeyValue</code> you are importing</p>
<blockquote>
<pre class="lang-java prettyprint-override"><code>import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Iterator;
import java.util.List;
</code></pre>
</blockquote>
<p>but using only</p>
<pre class="lang-java prettyprint-override"><code>java.io.File;
java.io.BufferedReader;
java.io.BufferedWriter;
java.io.FileReader;
java.io.FileWriter;
java.util.Scanner;
java.util.LinkedHashMap;
</code></pre>
<p>The benefits of importing only what you need are:</p>
<ul>
<li>avoid namespace collisions</li>
<li>better readability, because you know the dependencies at a glance</li>
<li>faster compilation</li>
</ul>
<h1>Variables</h1>
<h2>One Declaration per Line</h2>
<p>From <a href="https://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141270.html#2991" rel="nofollow noreferrer">Oracle's Code Conventions</a>:</p>
<blockquote>
<p><strong>6.1 Number Per Line</strong><br>
One declaration per line is recommended since it encourages commenting</p>
</blockquote>
<p>In general, the fewer things that happen on a line, the better.</p>
<blockquote>
<pre class="lang-java prettyprint-override"><code>int inputCounter = 0, row = 0, col = 0;
String kvTextPairs,table, action;
</code></pre>
<pre class="lang-java prettyprint-override"><code>String curKey, newKey, newValue, exitKey="EXIT";
</code></pre>
</blockquote>
<h2>Useless Variables</h2>
<blockquote>
<pre class="lang-java prettyprint-override"><code>public void createNewTable(String status) {
   int inputCounter = 0, row = 0, col = 0;
   String kvTextPairs,table, action;

   /* ... */

   table = matrix.createTable(lHM);
}
</code></pre>
</blockquote>
<p>The variables <code>table</code> and <code>action</code> are useless.</p>
<p>The return value of <code>matrix.createTable(lHM)</code> gets assigned to <code>table</code> but because <code>table</code> is a local variable of <code>createNewTable</code> the statement has no effect and
<code>action</code> gets declared but is never used.</p>
<p>An other unused variable is <code>exitKey</code> in <code>doActions(String)</code>.</p>
<blockquote>
<pre class="lang-java prettyprint-override"><code>String curKey, newKey, newValue, exitKey="EXIT";
</code></pre>
</blockquote>
<h1>Method Naming</h1>
<blockquote>
<pre class="lang-java prettyprint-override"><code>textFile = jvKV.keyValueGenerator(row,col);
</code></pre>
</blockquote>
<p>I wouldn't expect that a <code>keyValueGenerator</code> returns a <code>textFile</code>..</p>
<h1>To your Questions</h1>
<blockquote>
<p>How can I make this more OOP?</p>
</blockquote>
<p>Detect objects that are in you code base. For example inside <code>doAction(String)</code>:</p>
<blockquote>
<pre class="lang-java prettyprint-override"><code>public void doAction(String action) {
   switch(action.toUpperCase()){
       case "PRINT":
           System.out.println(matrix.getTable());
           break;
       case "EDIT":
           /* ... */
       case "SEARCH":
           /* ... */
       case "RESET":
           /* ... */
       case "SORT":
           /* ... */
       case "EXIT":
           /* ... */
   }
}
</code></pre>
</blockquote>
<p>Looks like you could have an abstraction <code>Action</code> with concreted types <code>Print</code>, <code>Edit</code>, ..., <code>Exit</code>.</p>
<p>After that you could create a <a href="https://en.wikipedia.org/wiki/Factory_method_pattern" rel="nofollow noreferrer">factory class</a>:</p>
<pre class="lang-java prettyprint-override"><code>class ActionFactory {
    public Action createBy(String name) {
        switch(name.toUpperCase()){
            case "PRINT":
                return new PrintAction();
            case "EDIT":
                return new EditAction();
            case "SEARCH":
                /* ... */
            case "RESET":
                /* ... */
            case "SORT":
                /* ... */
            case "EXIT":
                /* ... */
        }
    }
}
</code></pre>
<p>Now let some polymorphism do the magic:</p>
<pre class="lang-java prettyprint-override"><code>public static void main(String[]args) {
    /* ... */
    

    jvKV.createNewTable("Start");

    System.out.println("Matrix has been created");

    do {
        /* ... */

        String actionName = sc.next();

        Action action = actionFactory.buildBy(actionName);
        action.execute();

    } while(!action.equalsIgnoreCase("Exit"));
}
</code></pre>
<p>The method name <code>createTable</code> let assume that there should be a <code>Table</code>.</p>
<blockquote>
<p>How many class should I have for this kind of task?</p>
</blockquote>
<p>As many as you need.. there is no magic number</p>
    </div>