<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>What you did well</h1>
<p>I like that you have:</p>
<ul>
<li>decently named varaibles</li>
<li>you use good backward looping through the data</li>
<li>the formatting and style is good.</li>
</ul>
<h1>Issues</h1>
<ul>
<li>you are doing a lot of manual copying... <code>Arrays.copyOf()</code> is your friend.</li>
<li>you should be declaring variables where you need them, not at the beginning of the method (<code>temp</code>).</li>
<li>the algorithm is not a natural fit for the problem.... too complicated, and that is why there is the odd offset in your results.</li>
</ul>
<h1>Alternative...</h1>
<p>Consider this code alternative, which uses a standard adder-with-carry:</p>
<pre><code>public static final int[] addOne(int[] digits) {
    int carry = 1;
    int[] result = new int[digits.length];
    for (int i = digits.length - 1; i &gt;= 0; i--) {
        int val = digits[i] + carry;
        result[i] = val % 10;
        carry = val / 10;
    }
    if (carry == 1) {
        result = new int[digits.length + 1];
        result[0] = 1;
    }
    return result;
}
</code></pre>
<p>The carry is initialized with the value-to-add <code>1</code>, and it is added to the least significant value.</p>
<p>If the overall addition results in a carry still, then we add a new digit to the result, and, because the sub being added is a 1, we can make assumptions about the result.</p>
<h1>Edit:</h1>
<p>My test code:</p>
<pre><code>public static void main(String[] args) {
    System.out.println(Arrays.toString(addOne(new int[]{})));
    System.out.println(Arrays.toString(addOne(new int[]{1})));
    System.out.println(Arrays.toString(addOne(new int[]{9})));
    System.out.println(Arrays.toString(addOne(new int[]{3, 9, 9})));
    System.out.println(Arrays.toString(addOne(new int[]{3, 9, 9, 9})));
    System.out.println(Arrays.toString(addOne(new int[]{9, 9, 9, 9})));
    System.out.println(Arrays.toString(addOne(new int[]{9, 9, 9, 8})));
}
</code></pre>
<p>and my results:</p>
<blockquote>
<pre><code>[1]
[2]
[1, 0]
[4, 0, 0]
[4, 0, 0, 0]
[1, 0, 0, 0, 0]
[9, 9, 9, 9]
</code></pre>
</blockquote>
    </div>