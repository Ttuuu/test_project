<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Question</h1>

<blockquote>
  <p>How can I make it more efficient?</p>
</blockquote>

<p>In addition to the suggestion by CertainPerformance, you may be able to find a more efficient way to write the data. I haven't tried this before but you could try making a stream (e.g. <a href="https://nodejs.org/api/stream.html#stream_new_stream_readable_options" rel="nofollow noreferrer"><code>Readable</code></a>) to <a href="https://nodejs.org/api/stream.html#stream_readable_push_chunk_encoding" rel="nofollow noreferrer">push</a> the lines to, and then use <a href="https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options" rel="nofollow noreferrer"><code>readable.pipe()</code></a> to pipe the data to the writable stream.</p>

<h1>Review</h1>

<h2>Nesting levels, re-used variable names</h2>

<p>This code has more nesting levels than are necessary, and could be considered by some as <a href="http://callbackhell.com" rel="nofollow noreferrer">"callback hell"</a>. The function <code>write</code> can be moved out of the function passed to <code>new Promise</code> that gets returned at the end of <code>generate_large_dump</code>, along with all the variables that <code>write()</code> needs like <code>writerStream</code>, <code>target_file</code>, <code>total_bytes</code>, etc. While they would have separate scopes, this can help avoid confusion of variables like <code>resolve</code>, which has a re-used name. If you need to have a nested promise it would be better to use distinct names for the sake of readability.</p>

<p>This would lead to the function passed to the returned promise being much smaller. It could also be pulled out to a named function as well.</p>

<h2>Constants</h2>

<p>Idiomatic JavaScript, as is the case for many other languages (e.g. C-based) tend to have hard-coded constants declared in <code>ALL_CAPS</code> format - so <code>target_bytes</code> would be better as <code>TARGET_BYTES</code>. It can still be declared within <code>generate_large_dump()</code> to limit the scope unless it would be useful elsewhere.</p>

<h2>Braces</h2>

<p>While braces obviously aren't required for expressions following <code>while</code> it can be helpful if you ever need to add a line to the block.</p>

<blockquote>
<pre><code>while(total_bytes &lt; TARGET_BYTES) await write("INSERT INTO `sampe_table` (`name`, `age`) VALUES ('"+name()+"', '"+age()+"');\n");
</code></pre>
</blockquote>

<p>Even with bracts the line can stay as a one-liner:</p>

<pre><code>while(total_bytes &lt; TARGET_BYTES) { await write("INSERT INTO `sampe_table` (`name`, `age`) VALUES ('"+name()+"', '"+age()+"');\n"); }
</code></pre>

<p>Though some would argue it would be more readable with separate lines:</p>

<pre><code>while(total_bytes &lt; TARGET_BYTES) {
    await write("INSERT INTO `sampe_table` (`name`, `age`) VALUES ('"+name()+"', '"+age()+"');\n");
}
</code></pre>

<p>Some style guides disallow keeping the expression on the same line as the control structure - e.g. The <a href="https://google.github.io/styleguide/jsguide.html" rel="nofollow noreferrer">Google JS Style guide</a>:</p>

<blockquote>
  <h3>4.1.1 Braces are used for all control structures</h3>
  
  <p>Braces are required for all control structures (i.e. <code>if</code>, <code>else</code>, <code>for</code>, <code>do</code>, <code>while</code>, as well as any others), even if the body contains only a single statement. The first statement of a non-empty block must begin on its own line.</p>
  
  <p>Disallowed:</p>

<pre><code>if (someVeryLongCondition())
  doSomething();
</code></pre>
  
  <p>for (let i = 0; i &lt; foo.length; i++) bar(foo[i]);</p>
  
  <p><strong>Exception</strong>: A simple if statement that can fit entirely on a single line with no wrapping (and that doesnâ€™t have an else) may be kept on a single line with no braces when it improves readability. This is the only case in which a control structure may omit braces and newlines.</p>

<pre><code>if (shortCondition()) foo();
</code></pre>
  
  <p><sup><a href="https://google.github.io/styleguide/jsguide.html#formatting-braces" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>
    </div>