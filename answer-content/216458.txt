<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, this is actually very good, especially considering you're new to the OOP design pattern. There're just a few things I would recommend changing:</p>

<h1>Naming conventions</h1>

<p>There's <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">a list of naming conventions</a> that are widely accepted all throughout the python community. Following these conventions makes it easier to share and develop your code with other developers because everyone's already familiar with the conventions. It also makes your life easier because you have a set of guidelines to follow, and you're more likely to keep your conventions consistent, thus making your code easier to understand.</p>

<p>Your class names don't follow the convention of naming classes in <code>CamelCase</code> starting with a capital letter. So you should change <code>parkingFloor</code> to <code>ParkingFloor</code>, <code>entryPanel</code> to <code>EntryPanel</code>, etc.</p>

<h1>Enums over strings</h1>

<p>In several places, you're using strings where you should be using enums. Enums are basically special classes filled with constants and are preferable in certain situations when you're using the same strings in multiple places. Python does have <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">built-in support for enums</a>, and you should use it.</p>

<p>Your whole <code>ticket</code> class could benefit largely from this. My suggestion is to create a class called <code>TicketStatus</code> extending <code>enum.Enum</code> (thus making it an enum), and create within it the constants <code>ACTIVE</code> and <code>COMPLETE</code>. You can then change these two statements:</p>

<pre><code>self.status = 'Active'

self.status = 'Complete'
</code></pre>

<p>to this:</p>

<pre><code>self.status = TicketStatus.ACTIVE

self.status = TicketStatus.COMPLETE
</code></pre>

<p>Using enums makes comparisons and debugging easier, and overall makes your code a bit easier to understand.</p>

<h1>Comments/documentation</h1>

<p>Looking through your entire code, you have only 4 comments, 3 of which are placeholders for code you have not yet written. <strong>This is not good documentation.</strong> I can guarantee that if you stop working on your project and come back a month later, you will wish you explained to yourself what your code does and why. Or, if another developer starts working on your project, they won't know what much of the code does.</p>

<p>In general, <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="noreferrer">you should document almost everything</a>. This makes it easier for both yourself and others who are viewing your code. Docstrings (you may have heard them called "multiline comments") should be used when documenting a class, function, module, or method.</p>

<p>Inline comments should be used a little more sparingly. If anyone who has never seen your program before can easily tell what a piece of code does, you do not need to add a comment explaining it. But if the purpose of the statement is not entirely obvious, adding a comment can be useful.</p>
    </div>