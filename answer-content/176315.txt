<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Initializing the Board</strong></p>

<pre><code>void BoardInitializer(char board[HORIZONTAL][VERTICAL])
{
    char index = '1';
    for (int i = 0; i &lt; 3; i++)
    {
        for (int j = 0; j &lt; 3; j++)
        {
            board[i][j] = index;
            index++;
        }
    }
}
</code></pre>

<p>A couple of points here:</p>

<ol>
<li><p>Put a newline right before the name of your function:</p>

<pre><code>void 
BoardInitializer
</code></pre>

<p>This is an older coding style, but one that serves a useful purpose - it makes it possible to find your function definitions using <code>/^name</code>.</p></li>
<li><p><code>BoardInitializer</code> is a description, not a name. Try to use imperative phrases in your function names: <code>InitializeBoard</code> or <code>BoardSetup</code>.</p></li>
<li><p>You have these nice constants: <code>HORIZONTAL</code>, <code>VERTICAL</code> but you don't use them! What is "3"?</p></li>
<li><p><code>i</code> and <code>j</code> are not meaningful names. How about <code>row</code> or <code>r</code> or <code>y</code> and <code>col</code> or <code>c</code> or <code>x</code>?  Especially since you're not using the <code>HORIZONTAL</code> and <code>VERTICAL</code> constants, the only way to understand what <code>i</code> or <code>j</code> represent is to search for the one line in the function where they are used, and map that against the signature:</p>

<pre><code>board[i][j] = index;  // char board[HORIZONTAL][VERTICAL]
</code></pre>

<p>So I'd suggest <code>board[col][row] = index;</code></p></li>
<li><p>You hard-code the whole 1-9 thing. I'm not sure that there's much value in pretending to have any flexibility on the size of the board.</p></li>
</ol>

<p><strong>Printing the Board</strong></p>

<pre><code>void DrawBoard(char board[HORIZONTAL][VERTICAL])
{
    for (int i = 0; i &lt; 3; i++)
    {
        for (int j = 0; j &lt; 3; j++)
        {
            printf("%c", board[i][j]);
            if (j != 2)
                printf("|");
        }
        if (i != 2)
            printf("\n---------");
        printf("\n");
    }
}
</code></pre>

<ol>
<li><p>Are you tired of typing <code>char board[HORIZONTAL][VERTICAL]</code> yet? Maybe a typedef of <code>board_t</code> would be a worthwhile investment.</p></li>
<li><p>The name is good.</p></li>
<li><p>You've got the same <code>i,j</code> problem as above. </p></li>
<li><p>Your <code>HORIZONTAL</code> and <code>VERTICAL</code> seem backwards. According to your code, <code>j</code> controls the printing of the items in different columns, within the same row. To me, that suggests that the limit of <code>j</code> would be the <code>HORIZONTAL</code> size, which means that the array should be <code>board[VERTICAL][HORIZONTAL]</code>.</p></li>
</ol>

<p><strong>Determining the position of X &amp; Os</strong></p>

<pre><code>int PositionCalculation(char board[3][3], int selection, char input)
{
    int column = selection % 3;
    int row = selection / 3;

    if (column == 0)
    {
        column += 3;
        row -= 1;
    }

    if (board[row][column - 1] == 'o' || board[row][column - 1] == 'x')
        return -1;

    board[row][column - 1] = input;
    return 0;
}
</code></pre>

<ol>
<li><p>This is just wrong. The result of this function is not a calculated position. The result of this function is either 0 or -1, with a side effect of storing the input character in the board. </p></li>
<li><p>Also, returning 0 on success is backwards. You should be returning 0 on failure, non-zero on success.</p></li>
<li><p>I notice here that you have abandoned <code>HORIZONTAL</code> and <code>VERTICAL</code> in favor of <code>[3][3]</code>. I still think a typedef is a better idea.</p></li>
<li><p>Your computations are strange. You are trying to map to a row/column position, but your <code>column</code> is going to be in the range (1..3). But you are subtracting 1 from <code>column</code> when you index the <code>board</code>. Wouldn't it be easier to just compute <code>column</code> in the range (0..2) directly?</p></li>
<li><p>You don't range-check the <code>selection</code> variable.</p></li>
<li><p>The names <code>selection</code> and <code>input</code> are not helpful. Once again, I'm left reading the code to understand what's happening. Why not use names like <code>position</code>, <code>location</code>, or <code>tile_number</code> and <code>player</code>, <code>character</code>, or <code>symbol</code> for the two pieces of data?</p></li>
</ol>

<p><strong>Win condition checks</strong></p>

<pre><code>bool HorizontalCheck(char board[HORIZONTAL][VERTICAL])
{
    for (int i = 0; i &lt; HORIZONTAL; i++)
    {
        if (board[i][0] == board[i][1] &amp;&amp; board[i][1] == board[i][2])
            return true;
    }
}

bool VerticalCheck(char board[HORIZONTAL][VERTICAL])
{
    for (int i = 0; i &lt; VERTICAL; i++)
    {
        if (board[0][i] == board[1][i] &amp;&amp; board[1][i] == board[2][i])
            return true;
    }
}

bool DiagonalCheck(char board[HORIZONTAL][VERTICAL])
{
    if ((board[0][0] == board[1][1] &amp;&amp; board[1][1] == board[2][2]) || (board[0][2] == board[1][1] &amp;&amp; board[1][1] == board[2][0]))
        return true;
}
</code></pre>

<ol>
<li><p>We're back to the <code>[HORIZONTAL][VERTICAL]</code> approach.</p></li>
<li><p>You don't actually return <code>false</code> in your checks. Your code is "falling off the end" and is vulnerable to whatever happens to be in the return register. (Probably the result of the last condition tested, but still...)</p></li>
<li><p>You have written functions to do these checks, but you're missing one function. Instead of putting calls to <code>HorizontalCheck(board) || VerticalCheck(board) || DiagonalCheck(board)</code> in your main routine, why not write a function called <code>GameOver(board)</code> and summarize the results?</p></li>
</ol>

<p><strong>The main program</strong></p>

<p>I'm not going to copy/paste the entire thing. (whew!)</p>

<ol>
<li><p><code>selection</code> doesn't need to be initialized, since you <code>scanf</code> into it.</p></li>
<li><p><code>checker</code> exists only to hold the result of your <code>PositonCalculator</code> function for one line. Eliminate it, and rewrite <code>PositionCalculator</code>.</p></li>
<li><p><code>counter</code> can be eliminated if you move your victory-check functions under a single <code>GameOver</code> function.</p></li>
<li><p>The <code>SCANX</code> label is just a while loop. Change your code to make it easier to read.</p>

<pre><code>while (!apply_move(location, symbol)) {
    printf(...)
    scanf(...)
}
</code></pre></li>
<li><p>You perform a computation to determine if the current player is 'X' or 'O'. But you then divide your code into two sections, basically identical except for using literal 'x' or 'o' characters. Why not do the computation, store the 'x' or 'o' into a variable, and shrink your code by 50%?</p></li>
<li><p>There are a LOT of <code>goto</code> statements that are really just laziness on your part. (Or a strange desire to use <code>goto</code> statements.) You can eliminate the whole <code>XWINS</code> and <code>OWINS</code> things by simply moving that code up to the one place where it gets used:</p>

<pre><code>            if (HorizontalCheck(board) == true || VerticalCheck(board) == true || DiagonalCheck(board) == true)
                goto OWINS;

        }
    }
}
printf("Its a draw\n");
goto ENDPROGRAM;

XWINS: 
    printf("\nX wins!\n");
    goto ENDPROGRAM;
OWINS: 
    printf("\nO wins\n");
    goto ENDPROGRAM;

ENDPROGRAM: 
return;
</code></pre>

<p>Becomes:</p>

<pre><code>            if (HorizontalCheck(board) == true || VerticalCheck(board) == true || DiagonalCheck(board) == true) {
                printf("\nO wins\n");
                goto ENDPROGRAM;
            }
        }
    }
}
printf("Its a draw\n");
ENDPROGRAM: 
return;
</code></pre>

<p>And since <code>goto ENDPROGRAM</code> really just means <code>return</code> is simplifies to:</p>

<pre><code>            if (HorizontalCheck(board) == true || VerticalCheck(board) == true || DiagonalCheck(board) == true) {
                printf("\nO wins\n");
                return;
            }
        }
    }
}
printf("Its a draw\n");
</code></pre></li>
<li><p>There's no reason to have a void return just before the closing curly brace of a function. (Except to use as a statement for a <code>label</code>, which isn't needed.)</p></li>
</ol>
    </div>