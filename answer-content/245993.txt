<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No matter how the array is traversed, the distinguished element can occur at the end of the traversal. Therefore, it is necessary to go through the entire array in the worst case and <strong>there does not exist an algorithm that can have a better worst-case time complexity than <span class="math-container">\$n\$</span></strong>. However, in practise, the actual runtime of your implementation can be improved, as well as the <strong>average-case time complexity</strong>.</p>
<p>Firstly, your solution converts the key-value pairs of <code>Counter(arr)</code> into a list. Assuming the input is well-formed, this conversion is unnecessary since it is sufficient to return the first key that has a corresponding frequency value of 1. The improved implementation is as follows:</p>
<pre><code>def find_uniq(arr):
    return next(k for k, freq in Counter(arr).items() if freq == 1)
</code></pre>
<p>Secondly, creating a <code>Counter</code> requires going through the entire input array. In most cases, this can be avoided by returning the distinguished element once it is found, as mentioned in <a href="https://codereview.stackexchange.com/a/245988/207952">the previous answer</a>. This approach <strong>improves the average-case time complexity</strong> by a constant factor of 2. Note that if the time complexity is described using the <span class="math-container">\$O(\cdot)\$</span> and <span class="math-container">\$\Theta(\cdot)\$</span> notations there is no difference, since <strong>these notations only characterize the asymptotic order of growth of runtime given the input size</strong>. More explanations can be found <a href="https://www.programiz.com/dsa/asymptotic-notations" rel="noreferrer">here</a>.</p>
<p>A Python-specific efficient implementation of this improved approach is to use the <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer">itertools.groupby</a> function, as shown in the following. It avoids an explicit <code>for</code>-loop in Python, which is typically slower than an implicit-loop-based implementation, such as <code>Counter(arr)</code>.</p>
<pre><code>from itertools import groupby

def find_uniq(arr):
    group_iter = groupby(arr)
    k1, g1 = next(group_iter)
    c1 = len(list(g1))
    k2, g2 = next(group_iter)
    if c1 &gt; 1:
       # Group g1 has more than one element
       return k2
    try:
       # Group g2 has more than one element
       next(g2)
       next(g2)
       return k1
    except StopIteration:
       # Both g1 and g2 has one element
       return k2 if next(group_iter)[0] == k1 else k1
</code></pre>
<p><strong>Update:</strong> @HeapOverflow provides <a href="https://codereview.stackexchange.com/a/246008/207952">an improved version</a> of this implementation in his answer.</p>
    </div>