<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>New Style Class Declaration</h2>

<p>Using <code>class ProcessStatus(object):</code> is unnecessary.   You can now simply write this as <code>class ProcessStatus:</code></p>

<h2>Named Tuples</h2>

<p>Your <code>Process</code> class appears to be a class with no methods, and just holds immutable data.  You shouldnâ€™t use a class for this.</p>

<pre><code>from collections import namedtuple

Process = namedtuple("Process",
                     "pid ppid user command arguments host cpu_usage mem_usage start_time state")
</code></pre>

<p>Usage can be unchanged:</p>

<pre><code>self.process[pid] = Process(pid=pid, ppid=ppid, ...)
</code></pre>

<h2>Private Members</h2>

<p>If a user (or even you) wishes to use your module, they may <code>import pswrapper</code> and then execute <code>help(pswrapper)</code> to get details on how to use the package.  This will include being told there are members like <code>PS_COMMAND</code>, <code>PS_OUTPUT_PATTERN</code> and <code>COMMAND_PATTERN</code>, which appear to be internal details.</p>

<p>If you named these members with a leading underscore (eg, <code>_PS_COMMAND</code>, etc), they would not appear in the help documentation.</p>

<h2>Docstrings</h2>

<p><code>help(ProcessStatus.refresh)</code> will return the text:</p>

<blockquote>
  <p>This runs myps command and finds processes running on the given host.</p>
</blockquote>

<p>Um, ok.  It finds them.  And ... returns them?  As a list? Or a dictionary?  No, it caches the results, and returns <code>True</code> on success and <code>False</code> on failure.</p>

<p>Write docstrings to tell a programmer using this class how the function is to be used, what the arguments mean &amp; their types should be, and when the function returns.  </p>

<pre><code>"""
Refresh the cache of processes running on the target host,
filtered by user and/or process id if configured in the constructor.

Returns:
    `True` if the process details are successfully retrieve and cached.
    `False` otherwise
"""
</code></pre>

<h2>Security</h2>

<p>An attacker can use your script to execute an arbitrary command, using the <code>user</code> or <code>pid</code> parameters.  For instance:</p>

<pre><code>ProcessStatus(user="root; rm -rf /;")
</code></pre>

<p>Ok, this is Python, and there is no security.  But perhaps you could raise a <code>ValueError</code> if <code>pid</code> is not an integer, or <code>user</code> contains non-alphanumeric characters.</p>
    </div>