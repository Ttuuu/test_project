<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Mutable default arguments</h2>

<p><code>sil_opts:dict = default_sil_options</code></p>

<p>This can create some nasty bugs, and some Python inspectors specifically recommend against doing this. The alternative is to set the default to <code>None</code>, and then write an <code>if</code> in your function to assign the default dictionary if the argument is <code>None</code>.</p>

<h2>Redundant <code>return</code></h2>

<p>It seems like you intend for this to return <code>None</code> if something bad happens. That's not how it actually works - instead, when an exception is thrown, there is no return statement executed at all. </p>

<pre class="lang-py prettyprint-override"><code>    with open(full_filename, 'r') as file:
        return sum(1 for line in file)
    return None
</code></pre>

<p>For this to work as you intend, you need to add a <code>try</code>/<code>except</code>.</p>

<h2>Quote standard</h2>

<p>You use a mix of double-quotes and single-quotes in your docstrings. PyCharm suggests double quotes, but whatever you do, get consistent.</p>

<h2>Meaningful documentation</h2>

<p>It's great that you've added a lot of documentation. The next step is to make it actually mean something. For example, this:</p>

<pre><code>add_newline_q (bool): Defaults to True
</code></pre>

<p>is deeply unhelpful. The type and default are already obvious, due to the function signature. So what does this actually do?</p>

<h2>Consider using more comprehensions</h2>

<pre><code>sups = list(filter(lambda s: s is not '', relative_path.split('/')))
</code></pre>

<p>may be more easily expressed as</p>

<pre><code>sups = [s for s in relative_path.split('/') if s != '']
</code></pre>

<h2>Generators</h2>

<p>In the same <code>sharddir</code> function, rather than returning a list (which forces the use of memory), you can leave it as a generator:</p>

<pre><code>return (s for s in relative_path.split('/') if s != '')
</code></pre>

<p>This allows the caller to decide whether they want to materialize the generator into memory, or only iterate over it.</p>

<h2>Quickly isn't quickly</h2>

<pre><code>"""
Quickly returns the number of lines in a file.
"""
</code></pre>

<p>Unfortunately, this isn't a "quick" operation. Given that your focus here is on parallel performance, you need to rethink how to divide up your file into lines. You should <em>not</em> be doing a pre-parse step. Instead, the most reasonable approach is to probably get the file size, divide it by the number of workers, seek to the boundaries in the file between each chunk, find the actual file boundary, and then give each worker its start and end offset. Otherwise, counting each line in a file is both expensive and non-parallel.</p>

<h2>Performance of <code>readlines_split</code></h2>

<pre class="lang-py prettyprint-override"><code>def readlines_split(file, delim='\t', newline='\n'):

    lines = []
    with open(file, 'r') as f:
        for line in f:
            lines.append(linesplit(line, delim, newline))
    return lines
</code></pre>

<p>This function is performance-problematic for a few reasons. You're building up a list in memory, when you shouldn't. If you're assembling a "shard file" whose contents are totally unmodified from the source file other than being a subset, then this is not a good way to go. If the line count distribution between shards needs to be exact, then each worker should be counting the number of newlines in its chunk. If not, don't even count (and certainly don't create a list). Once the actual boundaries are determined, write out the chunk from the source to the destination, potentially in sub-chunks of a few MB.</p>

<h2>Usage of <code>kwargs</code></h2>

<p>This chunk:</p>

<pre><code>def foo(file, a, b, **kwargs):
    print(file, kwargs["dest"])

ppf.shard_file_apply(
    './short-lines', # sharded directory
    foo,
    args=[1,2],
    kwargs={
        "output_shard_name": 'short-lines-alt',
        "output_shard_loc": os.path.expanduser('~/Desktop')
</code></pre>

<p>shows you using kwargs in a somewhat awkward way. You should probably change the first instance to</p>

<pre><code>def foo(file, a, b, dest):
    print(file, dest)
</code></pre>

<p>Any argument can still be a named argument from the caller, including <code>dest</code>.</p>

<p>As to the second instance, probably change to</p>

<pre><code>ppf.shard_file_apply(
    './short-lines', # sharded directory
    foo,
    args=[1,2],
    output_shard_name='short-lines-alt',
    output_shard_loc=os.path.expanduser('~/Desktop')
</code></pre>

<p>Those last two argument can still be captured in <code>kwargs</code> without you passing a dictionary explicitly.</p>
    </div>