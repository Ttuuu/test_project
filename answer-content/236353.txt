<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since the elements in each row grows, sorting the row only to take the <code>k</code> smallest is a bit wasteful. Using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html" rel="nofollow noreferrer"><code>numpy.partition</code></a> should always be faster:</p>

<pre><code>sorted_row_t = np.partition(row_nonzero, k)[:k]
</code></pre>

<p>This is not needed with the examples you give, the row is already an array and flattened:</p>

<pre><code>flat_row = np.squeeze(np.asarray(row))
</code></pre>

<p>Similarly, you can just use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html" rel="nofollow noreferrer"><code>numpy.nonzero</code></a>, no need to flatten the flattened row again:</p>

<pre><code>row_nonzero = flat_row[np.nonzero(frow)]
</code></pre>

<hr>

<p>However, this whole <code>for</code> loop can be done entirely in <code>numpy</code>:</p>

<ol>
<li><p>First, mask all zeros by setting them to <code>numpy.nan</code>:</p>

<pre><code>D = np.where(D == 0, np.nan, D)
</code></pre></li>
<li><p>Get the <code>k</code> smallest elements of each row. Since <code>numpy.nan</code> is not smaller than any number it will only appear at the beginning if (almost) the whole row was zeros:</p>

<pre><code>k_smallest = np.partition(D, k, axis=1)[:, :k]
</code></pre></li>
<li><p>Compute the median of each row, and then the median of the median, ignoring <code>numpy.nan</code> values using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmedian.html" rel="nofollow noreferrer"><code>numpy.nanmedian</code></a>:</p>

<pre><code>kmedian_dist = np.nanmedian(np.nanmedian(k_smallest, axis=1))
</code></pre></li>
</ol>

<p>The first two steps can even be pulled outside of the <code>for k in ...</code> loop, which will save some more time. In that case we have to sort the whole array, though, because <code>numpy.partition</code> does not guarantee that the values are sorted, only that the <code>k</code> smallest values are in the slice up to <code>k</code>. Since <code>K</code> seems to be <code>max(D_sym.shape)</code> in all cases anyway, this should not make such a big difference. It will if the <code>k</code> at which the <code>for</code> loops stops is small enough, though, so you will have to test this.</p>

<p>There's no need to <code>break</code> and then immediately <code>return</code> afterwards, just <code>return</code> directly.</p>

<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using 4 spaces as indentation (not 3) and spaces after commas.</p>

<hr>

<p>In summary, this should do the same as your code:</p>

<pre><code>def autoselect_minsamps_graipher(D_sym, eps, K, kmedian_thresh):
    D = np.sort(np.where(D_sym == 0, np.nan, D_sym), axis=1)
    kmedian_dist_prev = 0
    for k in range(2, K):
        kmedian_dist = np.nanmedian(np.nanmedian(D[:,:k], axis=1))
        if abs(kmedian_dist - kmedian_dist_prev) &lt;= kmedian_thresh:
            return k
        kmedian_dist_prev = kmedian_dist
    return 10 # fall back value
</code></pre>

<p>This is faster than your implementation, but suffers from similar scaling behaviour:</p>

<pre><code>n       autoselect_minsamps_orig    autoselect_minsamps_graipher
100     0.028 s                     0.0088 s
1000    0.32 s                      0.064 s
10000   9.5 s                       3.6 s
</code></pre>

<hr>

<p>You could also make timing your code easier by using a decorator:</p>

<pre><code>from time import perf_counter

class Timer:
    def __init__(self, name=""):
        self.name = ""
        self.start = None

    def __enter__(self):
        self.start = perf_counter()

    def __exit__(self, *args, **kwargs):
        delta = perf_counter() - self.start
        print(f"{self.name} finished in {delta:.2f} seconds")
</code></pre>

<p>Or, if you are stuck on Python 2:</p>

<pre><code>from time import time

class Timer:
    def __init__(self, name=""):
        self.name = ""
        self.start = None

    def __enter__(self):
        self.start = time()

    def __exit__(self, *args, **kwargs):
        delta = time() - self.start
        print "{} finished in {:.2f} seconds".format(self.name, delta)
</code></pre>

<p>Which you can use like this:</p>

<pre><code>D = euclidean_distances(X,X)
eps = 0.25
kmedian_thresh = 0.005
K = num_training_examples

with Timer(f"autoselect_minsamps_orig, K = {K}"):
    min_samples = autoselect_minsamps_orig(D, eps, K, kmedian_thresh)
</code></pre>

<p>Note that I used <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer"><code>time.perf_counter</code></a>, which is better suited for timing, but which is Python 3 only.</p>
    </div>