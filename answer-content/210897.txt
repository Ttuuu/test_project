<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The true Vertex Cover Problem is to find the <em>minimum</em> size vertex cover i.e. the smallest set fulfilling the requirements. So I suppose with the minimum requirement it is an NP problem.</p>

<p>For example, your greedy approach for</p>

<pre><code>case_13 = {'a': ['b'], 'b': ['c', 'a'], 'c': ['b', 'd', 'f'], 
    'd': ['e', 'c'], 'e': ['d'], 'f': ['g', 'c'], 'g': ['f']}
</code></pre>

<p>yields <code>c a d f</code>, but the minimum cover is <code>b d f</code>.</p>

<p>Other comments:</p>

<p>You can delete <code>nodes.degree</code>; just use <code>len(nodes.adj_list)</code>. Have a <code>degree()</code> method on Nodes to calculate it.</p>

<p>You can delete total_edges as well; you can exit the loop when <code>pick_n.degree() == 0</code>.</p>

<p>The inner while loop in your code is then only there to clean up adj_list. Since that is filtering a list, the pythonic way to do it is with a list comprehension:</p>

<pre><code> curr_node.adj_list = [
     edge for edge in curr_node.adj_list
     if edge.node2.name != pick_n.name
         and edge.node1.name != pick_n.name]
</code></pre>

<p>name_of_highest_degree() is misnamed, since it returns the node, not the name of the node.</p>

<p>name_of_highest_degree() can be written as a one-liner <a href="https://medium.com/@antash/six-ways-to-find-max-value-of-a-list-in-python-b7d7ccfabc0d" rel="nofollow noreferrer">using python's max with <code>key=</code> parameter</a>.</p>
    </div>