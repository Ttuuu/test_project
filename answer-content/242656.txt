<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think you are doing functional programming in a good way here. If you have to jump through too many hoops to inject state into your functions, and have functions that have side-effects and explicitly <code>return None</code>, then this is probably not functional programming.</p>

<p>The easiest solution would probably be to write a <code>Repo</code> class, that consolidates all functions regarding to one repository:</p>

<pre><code>class Repo:
    def __init__(self, path):
        self.path = path

    @property
    def hash(self):
        proc = subprocess.Popen(['git', 'ls-remote', self.path, 'HEAD'],
                                shell=False, stdout=subprocess.PIPE,
                                universal_newlines=True)
        return re.match(r'(\S+)', proc.communicate()[0]).group(0)

    @property
    def date(self):
        return re.search(r'[0-9]{8}', self.path).group()

    def files(self, pattern):
        return glob.glob(f"{self.path}/assessment/**/{pattern}", recursive=True)

    def read_csv_annotated(self, path) -&gt; pd.DataFrame:
        """Read a CSV file and annotate it with information about the repo."""
        try:
            df = pd.read_csv(path, usecols=[i for i in range(0, 12)],
                             error_bad_lines=False, warn_bad_lines=False,
                             memory_map=True)
        except OSError as e:
            permission_error(repo_path, data, e)
            return
        df = df.assign(repo_root=self.path,
                       repo_hash=self.hash,
                       repo_date=self.date,
                       full_path=path)

        # Let's only grab a few columns for now
        try:
            return df[["repo_root", "repo_hash", "repo_date", "full_path",
                    "simulation_alive_time"]]
        except KeyError as e:
            reader_error(repo_path, data, e)
</code></pre>

<p>The actual writing to the DB should be left as the job of the consumer of this output:</p>

<pre><code>def create_table(file_name):
    conn = sqlite3.connect(file_name)
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS PERF (repo_root text, \
    repo_hash text, repo_date text, \
    full_path text, simulation_alive_time numeric)')
    conn.commit()
    conn.close()


if __name__ == "__main__":
    create_table("Nightly.db")
    bison_git_dirs = glob.glob("/projects/bison/git/bison_[0-9]*")
    for repo in map(Repo, bison_git_dirs):
        for csv_file in repo.files("*_metrics.csv"):
            write_to_db(repo.read_csv_annotated(csv_file))
</code></pre>

<p>Of course, if you really want to not use classes, that is also possible, but the latter part is still true. Only in functional programming you probably want an interface such that it works like this:</p>

<pre><code>if __name__ == "__main__":
    create_table("Nightly.db")
    bison_git_dirs = glob.glob("/projects/bison/git/bison_[0-9]*")
    dfs = (annotate_df(read_file(csv_file), repo_info(repo_path))
           for repo_path in bison_git_dirs
           for csv_file in csv_files(repo_path))
    for df in dfs:
        write_to_db(df)
</code></pre>
    </div>