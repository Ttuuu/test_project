<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As dfhwze says, you should probably pull in the connection string/information from an external source: the production database hopefully won't be called 'TEST', which means you can't use this code in production, which means you will be adding time, effort, and the opportunity for things to go wrong to deployment. Similarly for the web API URL: it might change overnight (if you don't control it), or you might want to use a mock API (e.g. a file on disk) for testing purposes. These could be parameters, or they could be from some configuration system (which could for example read them from disk).</p>

<hr>

<p>Expanding on dfhwze's comments about your empty catch block... this is rarely a good sign. <code>save_vendor_info</code> is lacking inline documentation (maybe it has some somewhere else?), but presumably its job is to save the vendor information; at the moment it will fail silently if it fails to do so.</p>

<p>What do you anticipate going wrong? If you expect something to go wrong, you should handle it specifically (and probably log it). For anything you can't anticipate, you need to decide whether this method should throw violently (often a good idea) or should fail in a known and consistent state and report this to the caller somehow. Throwing has two big advantages: it's easy (hard to get wrong), and it forces the caller to acknowledge the fact. Whatever you do, you should document it, so that if a failure occurs the caller can handle it appropriately (e.g. retry in an hour, try some other data-source, throw violently itself...)</p>

<hr>

<p>Your code is a bit of jumble of XML and SQL operations. I would consider trying to pull all the XML out into another method so that this method can focus on the SQL. This method could be as simple as something that returns an <code>IEnumerable&lt;List&lt;string&gt;&gt;</code>, but if that is the case, you need to acknowledge and document the fact that this list of strings has a well-defined order. There would be merit in taking the data and stuffing it into a statically typed DTO, but the added code may not be worth it if this method can be hidden well enough.</p>

<hr>

<p>I don't think you need the first <code>ToList</code> here: <code>Fila.ChildNodes.Cast&lt;XmlNode&gt;().ToList().Select(x =&gt; x.InnerText).ToList();</code>. Generally, making things simple and lazy when you are just going to enumerate them immediately is a good idea, because it doesn't frighten the maintainer ("why is this being cached?") and can improve performance and memory characteristics.</p>

<hr>

<p>You may see some performance improvement by re-using the same <code>SqlCommand</code> and only changing the parameter values each run of the loop.</p>

<hr>

<p>What is the use of <code>dt</code>? Looks like you were previously going to load the data into a table but gave up on that plan: remove old code.</p>

<hr>

<p>Are the parameter names defined somewhere else? If not, I would consider normalising them or finding some way to define each parameter name only once, since currently they are mix of many case conventions, and thought hopefully they won't change much, this will make it more tedious to review the code. I would consider putting them in a list, and using the list to build the query and population the parameters: it's a little dodgy building queries, but it will reduce the repetition of the name, and provide a canonical reference for the <code>index -&gt; name</code> mapping which is trivially modified if the API does change (means that the code can be more easily re-used for other APIs as well).</p>

<p>I would probably want the code to look at the Schema, and in real-time verify that it matches what I'm expecting, because simply indexing into a list of XML nodes is going to go wrong if something is added to the API in an unhelpful position. Honestly, I'm not sure I'd trust any XML source to be consistent in the order of nodes, and would instead explicitly extract all values by name. This would add overhead, but it would make the code robust to non-silly API changes (e.g. it would keep working if a new field was added, and it would fail loudly if an old field was removed or renamed (which is a good thing)).</p>

<hr>

<p>You should use a consistent naming convention for local variables: I would expect <code>Valores</code> and <code>Filas</code> to be <code>camelCase</code> like everything else.</p>
    </div>