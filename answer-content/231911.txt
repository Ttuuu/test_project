<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Complexity</h2>

<p>Breaking problems into smaller and smaller parts until it is easy to solve is a standard part of software design and programming. Small functions make it easier to write, read, debug and maintain code. Most variables will be local variables and that cleans up the code as well.</p>

<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The Single Responsibility Principle states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>In addition to the function <code>int getSumInteriorAngles(const unsigned int numSides)</code> that already calculates the sum of the interior angles here are at least 3 possible functions in <code>main()</code>.<br>
  - Get and validate the user input for the number of vertices<br>
  - Print the result<br>
  - Get and validate user input for if they want to go again.</p>

<p>In addition to the suggested functions above, some of the <code>if</code> statements are too complex. When showing the output the addition <code>if</code> in the following code isn't necessary</p>

<pre><code>        else if(numSides &gt; 12) {
            printf("The sum of the interior angles of this polygon is %i\n",
                getSumInteriorAngles(numSides));
        }
</code></pre>

<p>Only the <code>else {</code> is necessary.</p>

<h2>Using some code from another answer, here is an alternate solution</h2>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdbool.h&gt;

static int getSumInteriorAngles(const unsigned int numSides)
{
    return 180 * (numSides - 2);
}

static int getAndValidateNumberOfSides()
{
    int numSides = 0;
    bool sidesValid = false;

    do {
        sidesValid = 0;

        printf("How many sides does the shape have? ");
        scanf("%i", &amp;numSides);

        if(numSides &lt; 0) {
            printf("The number of sides cannot be negative...\n");
        }
        else if(numSides == 0) {
            printf("The number of sides cannot be zero...\n");
        }
        else if(numSides &lt; 3) {
            printf("The shape must have at least 3 sides...\n");
        }
        else sidesValid = true;
    } while(!sidesValid);

    return numSides;
}

static bool askAgain()
{
    int goAgain = 0;

    printf("Would you like to find interior angles for another polygon? (1 or 0) ");
    scanf("%i", &amp;goAgain);

    return goAgain == 1;
}

static void showResults(int numSides)
{
    const char* names[] = {
            "a triangle",
            "a quadrilateral",
            "a pentagon",
            "a hexagon",
            "a heptagon",
            "an octagon",
            "a nonagon",
            "a decagon",
            "a hendecagon",
            "a dodecagon"
    };

    int SumInteriorAngles = getSumInteriorAngles(numSides);

    if(numSides &lt;= 12) {
        printf("The sum of the interior angles of %s is %d\n", names[numSides - 3], SumInteriorAngles);
    }
    else {
        printf("The sum of the interior angles of this polygon is %d\n", SumInteriorAngles);
    }
}

int main()
{
    do {
        int numSides = getAndValidateNumberOfSides();
        showResults(numSides);
    } while(askAgain());

    return 0;
}
</code></pre>
    </div>