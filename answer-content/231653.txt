<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP-8 Guidelines</h2>

<p>Follow the <a href="https://lmgtfy.com/?q=pep8+style+guide&amp;s=d&amp;t=w" rel="nofollow noreferrer">PEP-8 Style Guidelines</a>, such as:</p>

<ul>
<li>1 space around operators (<code>1 / x</code> instead of <code>1/x</code>)</li>
<li><code>snake_case</code> for identifiers &amp; functions (<code>cont_frac</code> instead of <code>contFrac</code>)</li>
</ul>

<h2>Import As</h2>

<p>The preferred method of creating an alias for an import is:</p>

<pre><code>from decimal import Decimal as D
</code></pre>

<p>Since you are only using the <code>floor</code> function from <code>math</code>, you could also:</p>

<pre><code>from math import floor
</code></pre>

<h2>Docstrings</h2>

<p><code>"""Docstrings"""</code> exist to help a user with the usage of a function.  There are usually in triple quotes, because they should be multi-line strings, with enough information to be useful to the caller, without needing the caller to read the source code.</p>

<pre><code>def continue_fraction(x, k):
    """
    Construct a continued fraction from a real value

    Parameters:
        x (float): Real value to determine continued fraction of
        k (int): A loop limit representing accuracy somehow

    Returns:
        List[Int]: List of continued fraction values
    """
</code></pre>

<p>A <code>"""docstring"""</code> is the <strong>first</strong> statement of a module, class, function or method, if it is a string.  In particular,</p>

<pre><code>    """Best Rational Approx Init"""
</code></pre>

<p>is not a <code>"""docstring"""</code>, because it is not the first statement.  It should be a comment.</p>

<pre><code>    # Best Rational Approx Init
</code></pre>

<p>Comments are used to document the source code, for someone <em>reading the source code</em>.  In contrast, <code>"""Docstrings"""</code> are used to provide help to the user of the item, so they <em>do not have to read the source code</em>.  It is displayed using the <code>help()</code> command:</p>

<pre><code>&gt;&gt;&gt; help(continue_fraction)
</code></pre>

<p>Don't use docstrings as comments, or vise-versa.</p>

<h2>Superfluous Parenthesis</h2>

<pre><code>        ran = (hn0 + (i*hn1))
        rad = (kn0 + (i*kn1))
</code></pre>

<p>should be written as</p>

<pre><code>        ran = hn0 + i * hn1
        rad = kn0 + i * kn1
</code></pre>

<h2>Named Tuple</h2>

<p>Consider using a named tuple, instead of using dictionaries for fixed content items.</p>

<pre><code>from collections import namedtuple

fraction = namedtuple("fraction", "ratio, denom")

...

        ...
        ralist.append(fraction(f'{ran}/{rad}', rad))
        ...

    for x in sorted(conlist + ralist, key=lambda i: i.denom):
        finallist.append(x.ratio)
</code></pre>

<h2>Collection</h2>

<p>Why are you maintaining <code>ralist</code> separate from <code>conlist</code>, when you later add the two lists together and sort them??  Why not just maintain a single list?</p>

<h2>List Comprehension</h2>

<p>List appending is inefficient:</p>

<pre><code>    finallist = []
    for x in sorted(conlist + ralist, key=lambda i: i.denom):
        finallist.append(x.ratio)
</code></pre>

<p>due to repeated reallocations of the list as the list size grows.  It is better to construct and initialize the list in one operation:</p>

<pre><code>    finallist = [ x.ration for x in sorted(conlist + ralist, key=lambda i: i.denom) ]
</code></pre>

<p><s></s></p>

<h2>Useless</h2>

<p>This operation:</p>

<pre><code>return list(dict.fromkeys(finallist))
</code></pre>

<p>takes a list, turns it into a dictionary with each list item as a key (all the dictionary values are <code>None</code>), and then constructs a list from just the dictionary's keys.  Uhm.   As long as the dictionary is kept in insertion order, which it is because you are using <code>f''</code> strings so must be using Python 3.6 or later, this is indistinguishable from:</p>

<pre><code>return finallist
</code></pre>

<p></p>

<p>Apparently the goal here was to remove duplicates.  A comment would have helped; it is not obvious.</p>

<h2>Meaningful Function and Variable Names</h2>

<p>What is <code>contFrac</code> and <code>bestra</code>?  It would be way clearer to use <code>continued_fraction</code> and <code>best_rational_approximation</code>, especially if you are writing this for "<em>anyone exploring the logic of infinite continued fractions</em>".</p>

<p><code>conlist</code>, <code>ralist</code>, <code>clist</code>, <code>app</code>, <code>ran</code> and <code>rad</code> are equally obscure.</p>
    </div>