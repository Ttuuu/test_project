<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Encapsulation</h3>

<p>In your code, you are excessively abusing <code>static member</code> functions. I see why you are doing it. You have a <strong>circular dependency</strong> between <code>BankInterface</code> and <code>StaffInterface</code>. </p>

<p>In order to break that dependency, you have to redesign your classes. I suggest using two main classes <code>AccountHandler</code> and <code>Display</code>. </p>

<pre><code>class AccountHandler
{
public:

  void create();
  void erase();
  auto login();

  void makeWithdrawal();
  void makeDeposit();
  void showBalance();

  auto getAccountType(std::string uc);

  const auto&amp; activeAccount() { return m_account; }
  const auto&amp; accounts() { return m_accounts; }

private:
  Account m_account;
  std::vector&lt;Account&gt; m_accounts;
};

class Display
{
public:

  Display(AccountHandler&amp; acc_handler);

  void loginMenu();
  void mainMenu();
  void showCustomerBalance();
  void staffMenu();
private:

  AccountHandler&amp; m_acc_handler;

};
</code></pre>

<p><code>AccountHandler</code> is responsible for creating, deleting, etc. of accounts.
<code>Display</code> is responsible for input &amp; output and has a dependency to <code>AccountHandler</code>.</p>

<h3>enum class</h3>

<p>Why you should use <strong>enum classes</strong>: <a href="https://stackoverflow.com/a/18335862/9226753">https://stackoverflow.com/a/18335862/9226753</a></p>

<h3>class vs. struct</h3>

<p>If you only have <code>public</code> member variables, consider using <code>struct</code> vs. <code>class</code>. You should use classes if your class has to hold invariants. Following:</p>

<pre><code>struct Account
{
  enum class Type
  {
    Customer, Staff
  };

  std::string username;
  std::string password;

  Type   type;
  double balance{0.0};
};
</code></pre>

<h3>operator overloading</h3>

<p>Consider implementing operator overloads as free functions. This way you set the <code>lhs</code> and <code>rhs</code> on same ground.</p>

<pre><code>bool operator==(const Account&amp; lhs, const Account&amp; rhs)
{
  return lhs.username == rhs.username;
}
</code></pre>

<h3>DNRY</h3>

<p>Do not repeat yourself. You have a lot of the same code looking similar to </p>

<pre><code>std::string tmp;
std::cin &gt;&gt; tmp; 
</code></pre>

<p>Instead, put that into a free function.</p>

<pre><code>template&lt;typename T&gt;
T readFromCin()
{
  T tmp;
  std::cin &gt;&gt; tmp;
  return tmp;
}
</code></pre>

<p>It is templated so you can read whatever type you want. Use it like this:</p>

<pre><code>const auto number = readFromCin&lt;int&gt;();
const auto word   = readFromCin&lt;std::string&gt;();
</code></pre>

<h3>STL algorithms</h3>

<p>You are using a lot of <strong>raw <code>for</code> loops</strong> in your code. See <a href="https://www.youtube.com/watch?v=qH6sSOr-yk8" rel="nofollow noreferrer">here</a> why this is considered bad.</p>

<p>Instead, try to use <strong>STL algorithms</strong> as much as possible. See <a href="https://www.youtube.com/watch?v=2olsGf6JIkU" rel="nofollow noreferrer">here</a> for a nice overview of all STL algorithms.
That being said, you can for example change this code</p>

<pre><code>void StaffInterface::CustomerBalance() {
    std::cout &lt;&lt; "Enter the customer's username to view their balance: \n";
    std::string cust_name;
    std::cin &gt;&gt; cust_name;

    for (auto &amp;account : BankInterface::registered_accounts) {
        if (cust_name == account.username) {
            std::cout &lt;&lt; account.balance &lt;&lt; "\n";
            StaffMenu(); 
        }
        else {
            std::cout &lt;&lt; "We could not detect an account with that username, please try again.\n";
            CustomerBalance();
        }
    }
}
</code></pre>

<p>to this </p>

<pre><code>void Display::showCustomerBalance()
{
  std::cout &lt;&lt; "Enter the customer's username to view their balance: \n";
  const auto cust_name = readFromCin&lt;std::string&gt;();
  const auto&amp; accounts = m_acc_handler.accounts();
  auto it = std::find_if(accounts.begin(), accounts.end(), [&amp;cust_name](const auto&amp; account) {
    return cust_name == account.username;
  });

  if(it != accounts.end())
  {
    std::cout &lt;&lt; it-&gt;balance &lt;&lt; "\n";
    staffMenu();
  }
  else {
    std::cout &lt;&lt; "We could not detect an account with that username, please try again.\n";
    showCustomerBalance();
  }
}
</code></pre>

<p>The usage of <code>std::find_if</code> might seem unnecessary here, but it makes the much more readable for other people, because every good C++ developer should know what each of the STL algorithms do.</p>

<h3>const correctness</h3>

<p>In your code you barely use <code>const</code>. Read <a href="https://stackoverflow.com/a/136917/9226753">here</a> why this is considered good practice.</p>

<h2>See adapted and working code <a href="https://ideone.com/1mZiVJ" rel="nofollow noreferrer">here</a></h2>
    </div>