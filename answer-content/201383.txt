<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are 4 different places in the code, where you do something for every country. That makes it complicated to add more countries, and also makes the code very long if you have many. But you can get around this by designing your HTML for the task.</p>

<hr>

<p>First of all, I've changed some names, and used the generic term 'region' everywhere. 'states' and 'provinces' are handled the same in the code, so a common name makes it easier. It also avoid a potential clash of IDs when adding more countries.</p>

<p>I've given each list of regions a common class to group them together, and a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*" rel="nofollow noreferrer">data-* attribute</a> to match them with their country. I decided to use the <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3" rel="nofollow noreferrer">3-letter country codes</a>, since we only need a unique identifier for each country, not the full display name.<sup>(1)</sup></p>

<p>I use a class to indicate which region is active, and use CSS to hide the rest. </p>

<p>I've removed most name attributes, since they are not being used. Unless you are submitting this in a form, in which case I've left two, the 'country' and 'region', which are the two you wanted to save.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const country = $('#country');
const regions = $('.region');
const regionOther = $('.region[data-country=OTHER]');
const selectedRegion = $('#selectedRegion');

country.on('change', function() {
  let activeRegion = $(`.region[data-country=${country.val()}]`);
  if(!activeRegion.length) {
  	activeRegion = regionOther;
  }
  
  regions.removeClass('active');
  activeRegion.addClass('active');
  
  updateSelectedRegion();
})

regions.on('change', updateSelectedRegion);

function updateSelectedRegion() {
  let activeRegion = $('.region.active select, .region.active input');
  selectedRegion.val(activeRegion.val());
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.region:not(.active) {
  display: none;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;label for="country"&gt;*Country&lt;/label&gt;
  &lt;select id="country" name="country" required&gt;
    &lt;option value=""&gt;CHOOSEâ€¦&lt;/option&gt;
    &lt;option value="USA"&gt;UNITED STATES&lt;/option&gt;
    &lt;option value="CAN"&gt;CANADA&lt;/option&gt;
    &lt;option value="AFG"&gt;AFGHANISTAN&lt;/option&gt;
  &lt;/select&gt;
&lt;/div&gt;

&lt;div class="region" data-country="USA"&gt;
  &lt;label for="regionUSA"&gt;*State&lt;/label&gt;
  &lt;select id="regionUSA"&gt;
    &lt;option value=""&gt;CHOOSE...&lt;/option&gt;
    &lt;option value="ALABAMA"&gt;ALABAMA&lt;/option&gt;
    &lt;option value="ALASKA"&gt;ALASKA&lt;/option&gt;
  &lt;/select&gt;
&lt;/div&gt;
&lt;div class="region" data-country="CAN"&gt;
  &lt;label for="regionCAN"&gt;*Province&lt;/label&gt;
  &lt;select id="regionCAN"&gt;
    &lt;option value=""&gt;CHOOSE...&lt;/option&gt;
    &lt;option value="ALBERTA"&gt;ALBERTA&lt;/option&gt;
    &lt;option value="BRITISH COLUMBIA"&gt;BRITISH COLUMBIA&lt;/option&gt;
  &lt;/select&gt;
&lt;/div&gt;
&lt;div class="region" data-country="OTHER"&gt;
  &lt;label for="regionOTHER"&gt;*Region&lt;/label&gt;
  &lt;input type="text" id="regionOTHER" placeholder="Region"&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;input type="text" id="selectedRegion" name="region" readonly&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p>Now if you want to add another country, all you have to change in the code is... nothing. You don't need to touch the code at all, just add the HTML. Just add another option</p>

<pre><code>&lt;option value="AUS"&gt;AUSTRALIA&lt;/option&gt;
</code></pre>

<p>If the country doesn't have regions, that's it, the default will be used. If it does have, add this</p>

<pre><code>&lt;div class="region" data-country="AUS"&gt;
  &lt;label for="regionAUS"&gt;*State&lt;/label&gt;
  &lt;select id="regionAUS"&gt;
    &lt;option value=""&gt;CHOOSE...&lt;/option&gt;
    &lt;option value="NEW SOUTH WALES"&gt;NEW SOUTH WALES&lt;/option&gt;
    &lt;option value="QUEENSLAND"&gt;QUEENSLAND&lt;/option&gt;
  &lt;/select&gt;
&lt;/div&gt;
</code></pre>

<p>Here's a full example with a few more countries <a href="http://jsfiddle.net/7fnwohb3/3/" rel="nofollow noreferrer">http://jsfiddle.net/7fnwohb3/3/</a></p>

<p>(1) You can use short codes for the individual regions too. Most countries should have official region codes in 2-3 letters. <a href="https://en.wikipedia.org/wiki/Federated_state" rel="nofollow noreferrer">This list</a> have links to them. If you want to get the name from the code, have them in a list you can use everywhere in your code, like below. You could potentially use this list to generate the HTML options.</p>

<pre><code>const regionNamesUSA = {
  AL: 'Alabama',
  AK: 'Alaska',
  AZ: 'Arizona',
  ...
}
</code></pre>
    </div>