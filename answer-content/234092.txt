<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>PyCharm complains on this line:</p>

<pre><code>m = json.loads(data)
</code></pre>

<p>If the above call to <code>fetch_compressed_data</code> fails, and the resulting error doesn't contain a <code>reason</code> or <code>code</code> attribute, the program won't close despite the error, and will then give a not-super-helpful <code>NameError</code> when you try to use <code>data</code>. I don't know if such a situation is possible, but I might add some protection just in case. Maybe add an <code>else</code> and move the call to <code>exit</code> down to reduce redundancy:</p>

<pre><code>except urllib.error.URLError as err:
    if hasattr(err, 'reason'):
        print('Could not reach server.')
        print(('Reason: ', err.reason))

    elif hasattr(err, 'code'):
        print(f'Error: {err.code}: while fetching data from {url}')

    else:
        print("Unexpected problem:", err)

    sys.exit(1)
</code></pre>

<hr>

<p>Arguably, </p>

<pre><code>if len(rawLength) == 0:
</code></pre>

<p>would be more idiomatic as </p>

<pre><code>if not rawLength:
</code></pre>

<p>You can rely on empty collections being falsey (and non-empty collections being truthy).</p>

<hr>

<p>With</p>

<pre><code>{'length': encodedLength, 'content': encodedContent}
</code></pre>

<p>This has the problem that you're needing to use strings to create and reference the "fields" of the returned object. Strings are notorious for allowing for typo problems though, and are outside of what static checking can help you with.</p>

<p>It's a little more involved, but I might use a <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer"><code>NamedTuple</code></a> here:</p>

<pre><code>from typing import NamedTuple

class Message(NamedTuple):
    length: bytes
    content: str

...

encodedContent = json.dumps(messageContent).encode('utf-8')
encodedLength = struct.pack('@I', len(encodedContent))
return Message(encoded_length, encoded_content)

# or, for clarity (although redundant in this case)

return Message(length=encoded_length, content=encoded_content)

...

sys.stdout.buffer.write(encodedMessage.length)
sys.stdout.buffer.write(encodedMessage.content)
</code></pre>

<p>Now, no more messy-looking string accessing, and the IDE can assist you.</p>
    </div>