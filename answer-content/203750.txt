<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an interesting time capsule.  I have come across my own code decades after I wrote it and thought "wow, what horrible code!"  Yours doesn't seem too bad, but of course, there's room for improvement.</p>

<h2>Don't use <code>feof()</code> incorrectly</h2>

<p>As <a href="https://stackoverflow.com/questions/5431941/why-is-while-feof-file-always-wrong">this question</a> explains fairly well, using <code>feof()</code> only tells you if the <em>previous</em> read encountered the end of the file, and nothing has been read from the file handle when <code>get_tape()</code> is called.  For that reason, this line</p>

<pre><code>if (!tp || feof(fp)) return NULL;
</code></pre>

<p>could be written like this instead:</p>

<pre><code>if (!tp) {
    return NULL;
}
</code></pre>

<p>If the <code>feof</code> check is used, it should be <em>before</em> memory is allocated for a new <code>Tape</code>.</p>

<h2>Use more whitespace to enhance readability of the code</h2>

<p>Instead of crowding things together like this:</p>

<pre><code>if (!*tp-&gt;artist[i])
  { free (tp-&gt;artist[i]); tp-&gt;artist[i]=NULL; }
</code></pre>

<p>most people find it more easily readable if you use more space:</p>

<pre><code>if (!*tp-&gt;artist[i]) { 
    free(tp-&gt;artist[i]); 
    tp-&gt;artist[i]=NULL; 
}
</code></pre>

<h2>Fix the bug (#1)</h2>

<p>There is a subtle bug in the program.  In the <code>getline()</code> routine (which I've renamed <code>getoneline()</code> to avoid conflict with <code>getline</code> in <code>stdio.h</code>) we have these few lines:</p>

<pre><code>register char *pc=line+len;
while (isspace(*--pc))
  ;
*(++pc) = '\0';
</code></pre>

<p>The problem is that if the line was a single newline character, the second time <code>isspace</code> is called, it will be pointing one byte <em>before</em> <code>line</code> which is <strong>undefined behavior</strong>.  I'd rewrite those lines like this:</p>

<pre><code>for (char *pc=line+len-1; pc &gt;= line &amp;&amp; isspace(*pc); --pc) {
    *pc = '\0';
}
</code></pre>

<h2>Fix the bug (#2)</h2>

<p>If we have <code>..</code> as the last line of the input file, which signals "end of tape" according to your description, we have a segfault and crash.  The reason is that after the <code>..</code> is read, the loop in <code>main</code> creates a second <code>Tape</code> with the default <code>NULL</code> values.  Later, when <code>print_title</code> is called, it segfaults because the <code>NULL</code> is derefernced in <code>print_literal</code>.  This could easily be fixed by simply bailing early out of <code>print_literal</code> if the passed pointer is <code>NULL</code>.  In general, the program is rather fragile when the input doesn't exactly match what it's expecting.</p>

<h2>Don't leak memory</h2>

<p>The <code>Tape</code> structures are allocated but never freed which is a memory leak.  I'd suggest adding calls to <code>clear_page</code> from within <code>print_postamble</code> since we know we're done with all pages at the time that's called.  Also, the noise-reduction line that's read should be freed so instead of this:</p>

<pre><code>getoneline(fp);   /* Throw away noise-reduction data */
</code></pre>

<p>it should be this:</p>

<pre><code>free(getoneline(fp));   /* Throw away noise-reduction data */
</code></pre>

<p>Or alternatively, create another function <code>ignoreLine</code> that would do just that without allocating memory.</p>

<h2>Avoid the use of global variables</h2>

<p>In the code, <code>progname</code> and is declared as global variables rather than as a local variable in <code>main</code>. It's generally better to explicitly pass variables your function will need rather than using the vague implicit linkage of a global variable.  I'd make <code>progname</code> an additional input parameter where needed and eliminate the global variable.</p>

<h2>Rethink the division of labor</h2>

<p>As you've noted there are some things done in PostScript and some in C and magic numbers everywhere.  We can do better!  Specifically, I'd recommend letting PostScript do more and have the C program do less.  The reason is that Postscript is quite good at layout, translation and rotation.  For that reason, I'd be inclined to simply have the C program print something like this in PostScript:</p>

<pre><code>(Artist Name) [ 
    (Side A Name) [ (track 1) (track 2) (track 3) ] 
    (Side B Name) [ (track 1) (track 2) (track 3) (track 4) ] 
] makeWideCassetteLabel
(Artist Name) [ 
    (Side A Name) [ (track 1) (track 2) (track 3) ] 
] makeCassetteLabel
</code></pre>

<p>Then, of course, we'd need to define those PostScript functions.  Which leads to a somewhat more general comment on the PostScript code.</p>

<h2>Create smaller, simpler PostScript functions</h2>

<p>Smaller, simpler functions can greatly ease understanding and reduce "magic number" syndrome.  As an example, consider this function:</p>

<pre><code>/doframe {
 54 0 moveto 0 288 rlineto stroke
 90 0 moveto 0 288 rlineto stroke
 18 0 moveto
 18 288 lineto 276 288 lineto 276 0 lineto
 closepath stroke
 {
  276 0 moveto 190 0 rlineto 0 288 rlineto
  -190 0 rlineto stroke
 } if
} bind def
</code></pre>

<p>Essentially what this does is draw three, or possibly 4 boxes.  First, let's create a simple function:</p>

<pre><code>% Draw box at current position with passed width and height
% width height -- 
/box { 1 index 0 rlineto 0 exch rlineto neg 0 rlineto closepath stroke } bind def
</code></pre>

<p>The first thing we have is comments.  The first says what it does and the second is a <em>stack comment</em> which is a very common technique in PostScript and in Forth.  Essentially, it says what's expected to be on the stack before the call and what's on the stack after (with <code>--</code> being the dividing line).</p>

<p>The second is that we have a very simple function that just draws a box.  Now we can rewrite <code>doframme</code>:</p>

<pre><code>/doframe {
    18 0 moveto 36 288 box
    54 0 moveto 36 288 box
    90 0 moveto 180 288 box
    {
        270 0 moveto 180 288 box
    } if
} bind def
</code></pre>

<p>We can make things even simpler if we terminate each <code>box</code> with a move to the lower right corner.  So, redefining <code>box</code>:</p>

<pre><code>% Draw box at current position (x, y) with passed width and height, 
% updating current point to (x + width, y)
% width height -- 
/box { 1 index 0 rlineto 
    currentpoint 4 2 roll   % save this point for the end
    0 exch rlineto 
    neg 0 rlineto 
    closepath stroke 
    moveto                  % restore location
    } bind def
</code></pre>

<p>Now our <code>doframe</code> is even simpler:</p>

<pre><code>/doframe {
    18 0 moveto 
    36 288 box
    36 288 box
    180 288 box
    {
        180 288 box
    } if
} bind def
</code></pre>

<p>It should also be apparent that if we move the <code>moveto</code> outside of <code>doframe</code>, we can easily draw the frame anywhere on the page since all of the subsequent moves and lines are relative.  By thinking carefully about how these functions are used, we can better restructure them to simplify the code and to enhance understanding.</p>
    </div>