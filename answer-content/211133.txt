<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Given the <code>map()</code> function used at the question having the same signature as <code>jQuery.map()</code> function used at the question, in order to avoid chaining <code>.filter()</code> to get the value at index <code>0</code> of the returned, you can use destructuring to assign <code>id</code> to the value at index <code>0</code> of the array returned from the function.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function getIdConditionValue(cond) {
  if (Array.isArray(cond.and)) {
    return $.map(cond.and, getIdConditionValue);
  } else if (Array.isArray(cond.or)) {
    return $.map(cond.or, getIdConditionValue);
  }
  if (cond.id) return cond.id;
}

var condition = {
  or: [{
    and: [{
      id: 3
    }, {
      pageId: '1'
    }]
  }, {
    age: 10
  }]
}


const [id] = getIdConditionValue(condition);

console.log(id);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"&gt;
&lt;/script&gt;</code></pre>
</div>
</div>


<p>For Loash and Underscore signatures of <code>map()</code> signature (each library's <code>_.map()</code> returns an array having two elements, the fist is the expected result, the second <code>undefined</code>)  you can use </p>

<pre><code>const [[id]] = getIdConditionValue(condition);
</code></pre>

<hr>

<p>For an alternative recursive solution you can create a function that accepts an object and a property name for parameter, utilizes the recursive <code>replacer</code> function of <code>JSON.stringify()</code> and <code>JSON.parse()</code>. If the property name is found during recursive iteration of property names of the object passed, a parameter of an immediately invoked arrow function declared as <code>undefined</code> is set to the property value, else <code>undefined</code> is returned from the function.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const condition1 = {and: [{id:3}, {pageId:'1'}]};
const condition2 = {or: [{and: [{id: 3}, {pageId: '1'}]}, {age: 10 }]};
const condition3 = {and:[,,]};
const condition4 = {and:{or:[]}};
const condition5 = {or:[{or:[{id:1}]}]};

const getObjectPropertyValue = (o, prop) =&gt; (result =&gt;
  (JSON[typeof o === 'string' ? 'parse' : 'stringify'](o, (key, value) =&gt; 
    key == prop ? (result = value) : value), result))(void 0);

let prop = 'id';

const id1 = getObjectPropertyValue(condition1, prop);

console.log(id1);

let condition2json = JSON.stringify(condition2);

const id2 = getObjectPropertyValue(condition2json, prop);

console.log(id2);

const id3 = getObjectPropertyValue(condition3, prop);

console.log(id3); // `undefined`

const id4 = getObjectPropertyValue(condition4, prop);

console.log(id4); // `undefined`

const id5 = getObjectPropertyValue(condition5, prop);

console.log(id5);</code></pre>
</div>
</div>

    </div>