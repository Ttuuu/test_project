<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Object Orientated Programming</h2>

<p>you don't use object orientated programming! that would clean up the code in a large scale</p>

<pre><code>public class Board {
    //private int[][] board; primitive obsession - use objects instead
    private Field[][] fields;
    private Column[] columns;
    private Row[] rows;
    private Block[] blocks;
    public final static int SIZE = 9;  

    ...      
}
</code></pre>

<p>you could provide the proper methods for the field - so you could easily represent the field - instead of trying to interpret an <code>int</code> value.</p>

<p>you could provide methods that are specific for these objects - you could even define an interface for common code, like <code>isFieldValid(Field candidate)</code> for <code>Row</code>, <code>Column</code> and <code>Block</code> </p>

<h2>Naming</h2>

<p>consider these names and you might find better</p>

<pre><code>Random rand = new Random();
int random, randomrow, randomcolumn;
</code></pre>

<p>maybe it would be </p>

<pre><code>Field candidate;
</code></pre>

<p>again here, in <em>Java</em> we don't use the <a href="https://en.wikipedia.org/wiki/Hungarian_notation" rel="nofollow noreferrer"><em>hungarian notation</em></a> and name a variable by it's type:</p>

<pre><code>//int[][] boardarr = board.getBoard();
int[][] board = board.getBoard(); //would be better
Field[][] fields = board.getFields(); //even more better
</code></pre>

<h2>Data Structure</h2>

<p>if you would use Objects for your Sudoku-Solver you could re-use values (here an example snippet for <code>Block</code>)</p>

<pre><code>class Block {
    final private Set&lt;Field&gt; fields = new HashSet&lt;&gt;();

    boolean isFieldValid(Field field) {
        //Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); we already have such set 
        //and don't need to create a new one whenever we check
        return !fields.contains(field);
    }
}
</code></pre>

<h2>Magic numbers</h2>

<p>you already provide a <code>SIZE = 9</code> constant - so why don't you use a proper one for the block size?</p>

<pre><code>int blockrow = (row / 3) * 3;
int blockcolumn = (column / 3) * 3;
</code></pre>

<h2>Testing</h2>

<p>i assume you provide enough tests but just don't put these in the question</p>

<h2>Summary</h2>

<p>very nice piece of code - i'm glad you have posted it here! The algorithm seems straight forward, i like it! The OO-thing is the only flaw here. I would appreciate if you would provide another question with applied OOP!</p>
    </div>