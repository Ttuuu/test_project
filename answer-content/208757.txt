<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm under the impression that this code is part of a larger design, whose extent and intentions I can't entirely guess. Sorry if my review seems a bit restrictive or short sighted in that regard.</p>
<h1>General design</h1>
<p>My understanding is that you want to build a mathematical type system over the fairly permissive C++ set of function and function-like types. That's a noble undertaking but I'm afraid that they are so different realities that it will end in a misunderstanding.</p>
<p>Take your definition of what a c++ application is: <code>R(*)(A0, As...)</code> (in the <code>firstArg</code> signature). This will match a function pointer, but function references, lambdas, member functions, functors, pointer to member functions are as legitimate targets and they won't necessarily match this signature.</p>
<p>Then there is also the problem of function overloading: what if <code>foo</code> has three overloads? Which one will <code>R(*)(A0, As...)</code> match? (the answer is none, it simply won't compile).</p>
<p>Three lines further, in contrast to this vigorous simplification, you begin to build a complex inheritance tree whose semantics are transparent to the compiler, at least beyond the identity between argument and return type: how would the compiler decide if a function really is a monomorphism?</p>
<p>I believe you would be better off with a simpler design uncoupling c++ types and mathematical types, at least to a certain extent.</p>
<h1>C++ application composition</h1>
<p>That is already a hard problem on its own right, depending on how much you want to constrain the domain. But it's certainly easier if you want to only accept applications exposing <code>S value(T)</code> as an interface. What I'd suggest then is to provide a handier template:</p>
<pre><code>template &lt;typename R, typename A&gt;
struct Application {

    using result_type = R;
    using argument_type = A;
    
    template &lt;typename F&gt;
    Application(F f) : fn(f) {}

    R value(A) { return fn(a); } // no need to have it static now

    std::function&lt;R(A)&gt; fn;
};
</code></pre>
<p>You can then turn any complying function-like object into a compatible <code>Application</code>: <code>auto square = Application&lt;double, double&gt;([](auto n) { return n * n; };</code>. Verifying application composition is now trivial: <code>std::is_same&lt;typename F::argument_type, typename G::result_type</code> (<code>std::is_convertible</code> might be a choice too).</p>
<h1>Morphisms classification</h1>
<p>I'm a bit skeptical about this all-encompassing inheritance tree. The first thing to note is that simple inheritance won't constrain <code>value</code> in the derived class based on its specification in the base class. Inheriting from <code>endomorphism</code> won't constrain a class to expose a <code>value</code> function whose argument type and return type are the same. Virtual functions would constrain it, but frankly, with multiple inheritance that seems unnecessarily dangerous and complex.</p>
<p>What you could do is keep the kind of morphism as a tag and then constrain the function <code>value</code> with <code>std::enable_if</code> and <code>std::conditional</code>:</p>
<pre><code>template &lt;typename R, typename A, typename Morphism&gt;
struct Application {
    // ...
    using morphism_tag = Morphism;
    using result_type = std::conditional_t&lt;std::is_base_of_v&lt;Endomorphism, morphism_tag&gt;,
                                           std::enable_if_t&lt;std::is_same_v&lt;R, A&gt;, R&gt;,
                                           R
                                          &gt;;
    result_type value(argument_type);
    // ...
};
</code></pre>
<p>Your code won't compile if you generate an <code>Application</code> with an <code>Endomorphism</code> tag whose return type doesn't match the argument type.</p>
<p>I'm not sure how extensible it would be though, and which rules we would be able to enforce.</p>
<h1>Morphisms composition</h1>
<p>With this infrastructure, you would be able to compose morphisms more easily, along those lines:</p>
<pre><code>template &lt;typename R1, typename A1, typename T1,
          typename R2, typename A2, typename T2&gt;
constexpr auto resulting_morphism(Application&lt;R1, A1, T1&gt;, Application&lt;R2, A2, T2&gt;) {
    if constexpr (std::is_base_of_v&lt;Endomorphism, T1&gt; &amp;&amp; std::is_base_of_v&lt;Endomorphism, T2&gt;)
        return Monomorphism();
    else if constexpr ( /*...*/ )
    // ...
    else throw std::logical_error(); // throw in constexpr context simply won't compile
)

template &lt;typename R1, typename A1, typename T1,
          typename R2, typename A2, typename T2&gt;
constexpr auto compose(Application&lt;R1, A1, T1&gt; a1, Application&lt;R2, A2, T2&gt; a2) {
    return Application&lt;R1, A2, decltype(resulting_morphism(a1, a2)&gt;([](auto arg) {
        return a1(a2(arg));
        });
}
</code></pre>
    </div>