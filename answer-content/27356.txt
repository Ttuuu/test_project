<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Others have pointed out some potential problem with it, but I'll try to compile them and add my own. </p>

<p><strong>Concept</strong></p>

<ul>
<li>Readability of <strong>equal</strong> method (<a href="https://codereview.stackexchange.com/a/27302/26120">Marco</a>)</li>
<li>Not checking for null in the <strong>setId</strong> method</li>
</ul>

<p><strong>ConceptB</strong></p>

<ul>
<li>I would rename <strong>getCount</strong> to <strong>getNumberOfChildren</strong> or getChildrenCount just to make it more readable</li>
<li><p>Question you want to consider is what kind of children can ConceptB have? If it's only ConceptB, you may want to consider addChild only takes in ConceptB and  specifying which type of data the set hold to avoid casting. And as <a href="https://codereview.stackexchange.com/a/27318/26120">kuporific</a> said, downcasting without checking is dangerous. I would rewrite it something like this: </p>

<pre><code>public int getFamilySize() {
int count = children.size();

for (Iterator iter = getChildren(); iter.hasNext(); ) {
    Concept child = (Concept) iter.next();
    if (child instanceof ConceptB){
        count += ((ConceptB) child).getFamilySize();
    }
}

return count;
</code></pre>

<p>}</p></li>
</ul>

<p><strong>ConceptC</strong></p>

<ul>
<li>Since ConceptC doesn't use a parent and the only thing that ConceptA adds to Concept is a parent, it might be better for ConceptC to extend Concept instead of ConceptA. </li>
</ul>

<p>Last thing, for all subclass of Concept, there is no equal method. So for example, if I have two classes with the same id, but different parent, they are still equal. This may or may not be what you want. But I think it's something to take note of.</p>

<pre><code>Concept parent = new ConceptC("parent c");      
Concept concept1 = new ConceptA("a", null);
Concept concept2 = new ConceptA("a", parent);

System.out.println(concept1.equals(concept2));
</code></pre>
    </div>