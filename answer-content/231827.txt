<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>numpy</h1>
<p>In this case there is no need to use. For an 8 by 8 board, filled with strings, there is no advantage to using it, apart from the possibility to index row and column at the same time</p>
<h1>enums</h1>
<p>You have a few properties wich would be best presented as an <code>enum</code>. The color and the type of the piece</p>
<pre><code>import enum


class Color(enum.Enum):
    WHITE = 0
    BLACK = 1


class Piece(enum.Enum):
    EMPTY = enum.auto()
    PAWN = enum.auto()
    ROOK = enum.auto()
    KNIGHT = enum.auto()
    BISHOP = enum.auto()
    KING = enum.auto()
    QUEEN = enum.auto()
</code></pre>
<h1>tuple</h1>
<p>You have a <code>chrs</code> dictionary with keys that contain both the color and the piece. A better approach here would be to use tuples as keys</p>
<pre><code>chrs = {
    (Color.WHITE, Piece.EMPTY): "\u25FB",
    (Color.WHITE, Piece.PAWN): "\u265F",
    (Color.WHITE, Piece.ROOK): "\u265C",
    (Color.WHITE, Piece.KNIGHT): "\u265E",
    (Color.WHITE, Piece.BISHOP): "\u265D",
    (Color.WHITE, Piece.KING): "\u265A",
    (Color.WHITE, Piece.QUEEN): "\u265B",
    (Color.BLACK, Piece.EMPTY): "\u25FC",
    (Color.BLACK, Piece.PAWN): "\u2659",
    (Color.BLACK, Piece.ROOK): "\u2656",
    (Color.BLACK, Piece.KNIGHT): "\u2658",
    (Color.BLACK, Piece.BISHOP): "\u2657",
    (Color.BLACK, Piece.KING): "\u2654",
    (Color.BLACK, Piece.QUEEN): "\u2655",
}
</code></pre>
<h1>board</h1>
<p>You keep a black and a white board. Better would be to keep one board, and just flip it at the time of presentation.</p>
<pre><code>def board_begin():
    return (
        [
            [
                (Color.WHITE, Piece.ROOK),
                (Color.WHITE, Piece.KNIGHT),
                (Color.WHITE, Piece.BISHOP),
                (Color.WHITE, Piece.QUEEN),
                (Color.WHITE, Piece.KING),
                (Color.WHITE, Piece.BISHOP),
                (Color.WHITE, Piece.KNIGHT),
                (Color.WHITE, Piece.ROOK),
            ],
            [(Color.WHITE, Piece.PAWN) for _ in range(8)],
            *[[None] * 8 for _ in range(4)],
            [(Color.BLACK, Piece.PAWN) for _ in range(8)],
            [
                (Color.BLACK, Piece.ROOK),
                (Color.BLACK, Piece.KNIGHT),
                (Color.BLACK, Piece.BISHOP),
                (Color.BLACK, Piece.QUEEN),
                (Color.BLACK, Piece.KING),
                (Color.BLACK, Piece.BISHOP),
                (Color.BLACK, Piece.KNIGHT),
                (Color.BLACK, Piece.ROOK),
            ],
        ]
    )
</code></pre>
<p>Here I use <code>None</code> to represent an empty tile, and replace it by a white or black tile at the time of display.</p>
<h1>flip board</h1>
<p>If you use numpy to keep your board, you can <code>np.flip</code>, or a simple routine like this:</p>
<pre><code>def flip(board):
    return [
        row[::-1] for row in reversed(board)
    ]
</code></pre>
<h1>display the board</h1>
<p>Here a simple routine, which takes a boolean flag on whether to flip it:</p>
<pre><code>def display_board(board, flip_board=False):
    for i, row in enumerate(board if not flip_board else flip(board)):
        row_strings = [
            chrs.get(tile, chrs[(Color((i + j) % 2), Piece.EMPTY)])
            for j, tile in enumerate(row)
        ]
        print("".join(row_strings))
</code></pre>
<p>using <code>dict.get</code> to replace the empty tiles by the correct squares</p>
<hr>
<pre><code>board = board_begin()
</code></pre>
<blockquote>
<pre><code>[[(&lt;Color.WHITE: 0&gt;, &lt;Piece.ROOK: 3&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.KNIGHT: 4&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.BISHOP: 5&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.QUEEN: 7&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.KING: 6&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.BISHOP: 5&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.KNIGHT: 4&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.ROOK: 3&gt;)],
       [(&lt;Color.WHITE: 0&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.WHITE: 0&gt;, &lt;Piece.PAWN: 2&gt;)],
       [None, None, None, None, None, None, None, None],
       [None, None, None, None, None, None, None, None],
       [None, None, None, None, None, None, None, None],
       [None, None, None, None, None, None, None, None],
       [(&lt;Color.BLACK: 1&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.PAWN: 2&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.PAWN: 2&gt;)],
       [(&lt;Color.BLACK: 1&gt;, &lt;Piece.ROOK: 3&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.KNIGHT: 4&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.BISHOP: 5&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.QUEEN: 7&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.KING: 6&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.BISHOP: 5&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.KNIGHT: 4&gt;),
        (&lt;Color.BLACK: 1&gt;, &lt;Piece.ROOK: 3&gt;)]]
</code></pre>
</blockquote>
<pre><code>display_board(board, flip_board=False)
</code></pre>
<blockquote>
<pre><code>♜♞♝♛♚♝♞♜
♟♟♟♟♟♟♟♟
◻◼◻◼◻◼◻◼
◼◻◼◻◼◻◼◻
◻◼◻◼◻◼◻◼
◼◻◼◻◼◻◼◻
♙♙♙♙♙♙♙♙
♖♘♗♕♔♗♘♖
</code></pre>
</blockquote>
<pre><code>display_board(board, flip_board=True)
</code></pre>
<blockquote>
<pre><code>♖♘♗♔♕♗♘♖
♙♙♙♙♙♙♙♙
◻◼◻◼◻◼◻◼
◼◻◼◻◼◻◼◻
◻◼◻◼◻◼◻◼
◼◻◼◻◼◻◼◻
♟♟♟♟♟♟♟♟
♜♞♝♚♛♝♞♜
</code></pre>
</blockquote>
<h1>Board class</h1>
<p>If you want to incorporate moves etc, it might pay to make a Class of the board, with it's own display, <code>__getitem__</code> and move routines</p>
    </div>