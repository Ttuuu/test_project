<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public class AESEncryption {
</code></pre>

<p>Make the class <code>final</code> unless you design for it to have child classes.</p>

<pre><code>    private Cipher cipher = null;
    private ByteArrayOutputStream outputStream;
</code></pre>

<p><code>Cipher</code> is a stateful object. It should not be used as a field. Imagine sharing an object instance between multiple threads or methods. Try and never assign <code>null</code> (if only because Java will do it itself).</p>

<p><code>outputStream</code> is only necessary locally. Again, a stateful object, while there is otherwise no message specific state.</p>

<pre><code>            e.printStackTrace();
</code></pre>

<p>Never ever do this. Use a <code>// TODO</code> tagging comment and then <code>throw IllegalStateException(e)</code>; even configure your IDE to to this by default. Don't keep running with illegal state (and behold, if you do this, you can even make <code>cipher</code> final - which would have been useful if you'd needed it anyway).</p>

<pre><code>        return new String(bytes);
</code></pre>

<p>Don't even convert random bytes to a string. Furthermore, if you decode bytes to a string, explicitly identify the encoding. You may lose data if you find invalid bytes (.e.g. anything above 0x7F for UTF-8).</p>

<pre><code>        PBEKeySpec spec = new PBEKeySpec("12345asdqwe".toCharArray(), salt.getBytes("UTF-8"), 65536, 128);
</code></pre>

<p>Don't use static password values stuck in source code. Why do I even have to explain this? Note by the way that the reason that the password is a character array is to make it easier to destroy the password when it is not required any more. Beware that Java only uses the lowest 8 bits of each character - better check that you don't accept passwords that contain other values!</p>

<p>The 65537 value is a magic value, and should be constant. But generally you want to use a much higher value nowadays - unless your password is <strong>really</strong> complex. Making such a value configurable is very important. This however also means that you will have to indicate the value for the ciphertext somehow.</p>

<hr>

<p>All in all, you are using stringified input / output and you simply throw <code>Exception</code> - which is simply telling your user to be screwed upon any error. Please look at my answer on <a href="https://stackoverflow.com/a/15712409/589259">how to use security exceptions</a> on StackOverflow.</p>

<p>You don't specify any protocol that you are using. The user will have to guess the encodings of what you return. There is no warning of the mode, the inclusion of the IV or that the salt needs to be saved, the iteration count, the character encoding or the base-64 encoding.</p>

<p>You use CBC, which is not an authenticated mode such as GCM.</p>

<p>The salt is random, which means that the key is random. Since you don't include the salt, nobody will ever be able to decrypt. If the salt is saved otherwise, then it will probably get mangled because you forgot to base 64 encode it.</p>

<p>The key derivation is simply copied for the encrypt and decrypt methods. Why wasn't this put into a separate method?</p>

<p>And "mum's the word" apparently - this code seems to encrypt any strings, not just words?</p>

<p>Let's finish with a positive note: you do always perform UTF-8 encoding / decoding on the "word". Base 64 is not wrong either <em>if</em> a text interface is assumed. That's nice!</p>
    </div>