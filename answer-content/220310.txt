<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Re 1:</strong> You can take advantage of <a href="https://developer.apple.com/documentation/swift/array/3126956-reduce" rel="nofollow noreferrer"><code>reduce(into:_:)</code></a> which was introduced in Swift 4 precisely for this purpose:</p>
<blockquote>
<p>This method is preferred over <a href="https://developer.apple.com/documentation/swift/array/2298686-reduce" rel="nofollow noreferrer"><code>reduce(_:_:)</code></a> for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.</p>
</blockquote>
<p>See also <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0171-reduce-with-inout.md" rel="nofollow noreferrer">SE-0171 Reduce with inout</a>:</p>
<blockquote>
<p><strong>Motivation</strong></p>
<p>The current version of reduce needs to make copies of the result type for each element in the sequence. The proposed version can eliminate the need to make copies (when the inout is optimized away).</p>
</blockquote>
<p>In your case:</p>
<pre><code> let counted = visible.reduce(into: [Int: Int]()) { (result, path) in
    result[path.section, default: 0] += 1
}
</code></pre>
<p>The compiler can also infer the type of the initial accumulator automatically if the closure consists only of a single statement:</p>
<pre><code>let counted = visible.reduce(into: [:]) { (result, path) in
    result[path.section, default: 0] += 1
}
</code></pre>
<p><strong>Re 2:</strong> A dictionary <em>is</em> a collection of key/value pairs, therefore it can be sorted directly, without mapping each key to a tuple first:</p>
<pre><code>let section = counted.sorted(by: { $0.value &gt; $1.value }).first?.key
</code></pre>
<p>Even better, use <a href="https://developer.apple.com/documentation/swift/sequence/2906531-max" rel="nofollow noreferrer"><code>max(by:)</code></a> to find the dictionary entry with the maximal value:</p>
<pre><code>let section = counted.max(by: { $0.value &lt; $1.value })?.key
</code></pre>
<p>This is shorter and eliminates the intermediate arrays and the dictionary lookup. It is more efficient than sorting an array because only a single traversal of the collection is done. And even if the forced unwrapping is safe in your case, it is nice not to have it.</p>
<hr>
<p>One could also make this a generic method for sequences</p>
<pre><code>extension Sequence {
    func mostFrequent&lt;T: Hashable&gt;(by map: (Element) -&gt; T) -&gt; T? {
        let counted = reduce(into: [:]) { (result, elem) in
            result[map(elem), default: 0] += 1
        }
        return counted.max(by: { $0.value &lt; $1.value })?.key
    }
}
</code></pre>
<p>which is then used as</p>
<pre><code>let section = collectionView.indexPathsForVisibleItems.mostFrequent(by: { $0.section })
</code></pre>
    </div>