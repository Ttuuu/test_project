<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is straightforward and reads well, but:</p>

<ol>
<li>string concatenation is not very efficient, especially in a loop. You'd be better off using <code>str.join</code> on an iterable;</li>
<li>encoding the <code>mailto:</code> part yourself impairs readability and maintenance, if only you had a function to do it for you. Oh wait...</li>
<li>The comment at the beginning would be better as a module docstrings, you would then be able to use it as the <code>argparse</code> description using <code>__doc__</code>;</li>
<li>You should avoid interleaving code and function definition, and protect top level code using an <a href="https://stackoverflow.com/q/419163/5069029"><code>if __name__ == '__main__':</code></a> guard.</li>
</ol>

<p>Proposed improvements:</p>

<pre><code>#!/usr/bin/python

"""Convert a string into its HTML entities"""


import argparse


def command_line_parser():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('string_to_mung', help='String to convert')
    parser.add_argument('-l', '--link', action='store_true',
                        help='Embed the munged string into a mailto: link')
    return parser


def mung(plain):
    return ''.join('&amp;#{};'.format(ord(c)) for c in plain)


if __name__ == '__main__':
    args = command_line_parser().parse_args()
    string_munged = mung(args.string_to_mung)
    if (args.link):
        string_munged = '&lt;a href="{0}{1}"&gt;{1}&lt;/a&gt;'.format(mung('mailto:'), string_munged)
    print(string_munged)
</code></pre>
    </div>