<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Control Flow</h3>

<p>I want to endorse and flesh out a bit Edward’s advice on removing the <code>goto</code> statements.  A better approach here is some kind of <strong>state machine</strong>.  You’ve got some kind of game state that tracks what mode you’re in, such as whether you’re selecting an ability, moving around, starting an encounter, and so on.</p>

<p>You draw whatever screen is appropriate to the current state.  (Say, a map in overland mode, ASCII art of a monster in battle mode, maybe a box-drawn first-person dungeon if you’re paying homage to <em>Wizardry</em> or <em>Ultima</em>?)  The options displayed depend on the game mode, what abilities you have, and whatever else is appropriate (such as what items are in your inventory, maybe, or how much energy you have, or a cooldown period).  Selecting any option then updates the game state.  For example, winning a battle might send you to the loot screen.  The program logic is a loop something like this:</p>

<pre><code>while ( !state.hasQuit() ) {
  state.displayScreen();
  state.getActionAndUpdate();
}
</code></pre>

<p>A lot simpler and easier to follow than a bunch of <code>goto</code> statements!</p>

<p>Then <code>displayScreen()</code> could, say, clear the screen, print a status bar, print the ASCII art, look up what abilities your character has, print those, and give you a menu prompt.</p>

<p>If the state becomes big and bulky enough, you would no longer want to keep the entire game state in a single “God object” that everything needs to muck around with.  Player stats might go into one object, world maps in another, enemy stats in others.  Separate subsystems however it makes sense.  But that kind of loop is a nice, simple pattern for tracking which game mode you’re currently in and acting appropriately.</p>

<h3>Using OO to Clean Up the Code</h3>

<p>A variant is to make the last line something like <code>state = state-&gt;getNewState()</code>, where <code>state</code> is a pointer whose type is the base class of all states.  That lets you split up the abstract concept of a game mode into concrete instances, like <em>overland mode</em> or <em>combat mode</em>. These can be daughter classes whose member functions implement the correct behavior for that one mode.  Each of those member functions would then be shorter and clearer than one big function that contains all the code paths for every mode. You select between them by returning a reference to another state object, no <code>if</code>, <code>switch</code> or <code>goto</code> involved.</p>

<p>If you have only a finite number of static game modes, you can create a single object for each and return <code>const</code> references to them.  The specific code for each mode would live inside a member function of one derived class.</p>

<p>If you need to create new state objects, such as to store different information for each battle, you want to manage them with smart pointers like <code>std::unique_ptr</code>.  This does all the memory management for you, which is otherwise one of the trickiest things to get right.</p>

<p>If you do have any remaining sections of code that fit the pattern of a series of tests to select a different code branch for each of many cases, the classic solution is to define an <code>enum</code> with a constant for every possible case and then write a <code>switch</code> statement.  Your compiler might even have a prayer of warning you if you forget or mistype one of the cases.</p>

<h3>Avoid Global Variables</h3>

<p>These make your program very hard to debug, because any part of the code could have changed them.  A better solution is to have the player state store internally things like how many health potions you have. Then, only the code to use one decrements the count, and only the code to check inventory looks it up and displays it.</p>

<p>You also would want to store numeric data as a number, rather than as a string that you repeatedly convert back into a number.</p>

<h3>Use Data Structures</h3>

<p>In general, I would advise moving your special cases into data structures, not code branches. Jerry Coffin had good suggestions about how to do this for player abilities.</p>

<p>But, for example, your phenomenal ASCII art and other monster data could be stored as values in a hash table (<code>std::unordered_map</code> in the STL) with the names you’re using to select them as the keys.  This would have several advantages.  One of the most important is that, if you add another monster, you just need to add its entry to the table in one place.</p>

<p>Treating every new ability and every new monster as a special case that needs special handling in every piece of code that deals with them becomes a real nightmare: you’ve always got to check that you remembered them all everywhere and dealt with them consistently.  If you put all the data in one place, and you write code in another place that can handle any piece of the data, adding stuff becomes so much easier.</p>

<h3>Some Technicalities</h3>

<p>In this case, you might consider storing your ASCII art as vectors of rows.  (Since <em>two-dimensional array</em> can mean a few different things, a good unambiguous name for this is a <em>rectangular array</em>.)  This would make it possible to, for example, display a picture of the monster in a box and wrap an infodump around it, or show its stats on the left or right of the picture, or overlay a caption like "-999 HP" on the frame.</p>

<p>I want to repeat and emphasize the advice to separate the data from the display code.  You want code orthogonal to your game data.  You shouldn’t be rewriting the display code for every kind of monster, because that makes it a nightmare to ever change.  Don’t repeat yourself!  That also makes it possible for you to do a lot more things with your data or run your code on arbitrary new data.</p>

<p>If you make the art arrays wide characters, then use <code>std::wcout</code>, you can use Unicode art, and not just ASCII art.  You might not necessarily want to.  Your art is spectacular.  The classic games you’re hearkening back to used the box-drawing and geometric shape characters now in Unicode.  But the option is there.  Note that Windows needs a bit of non-standard initialization code inside an <code>#ifdef</code> block for this to work, but I can share it if you want.</p>

<p>On many systems even today, you can also insert ANSI color codes (16 colors, foreground and background, and some special features like bold and underline, like in the late 8-bit or early 16-bit era, and exactly like classic Unix terminals over telnet) or xterm color (more than 200).  Can’t get more authentically retro than that.  The Linux console supports those codes natively, and I think the OSX terminal does too.</p>
    </div>