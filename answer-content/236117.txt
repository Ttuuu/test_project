<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Unit Tests</strong></p>

<p>I downloaded the code from the question and then stubbed the classes that weren't present (<code>Token</code> and <code>Player</code>).  When I ran the unit tests, they hung.  If you're treating the whole code base as a unit (which you appear to be doing), then they should all be included in the question.  However, it seems like a red flag that the test hung, rather than failing.  This suggests to me that they might be doing too much / be a bit brittle, so I've mostly looked at some of them.</p>

<p><strong>DAMP vs DRY</strong></p>

<p><a href="https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests">DAMP vs DRY</a> often has polarised views.  I like my unit tests to be descriptive enough that the relevant bits of any setup and assertions are present in the individual tests.  This might lead to a bit of repeated code, however only a small amount of code should need to be repeated and it <em>can</em> make the tests clearer.</p>

<p>So, looking at your first test:</p>

<blockquote>
<pre><code>@Test
public void tokenShouldStartOnSquareOne() throws Exception {
    int expectedSquareLocation = 1;
    assertPlayerIsIn(player1, expectedSquareLocation);
}
</code></pre>
</blockquote>

<p>I think this is too DRY focused.  The game is setup in the fixtures setup, which includes putting player1 on the board.  Some of this initial setup seems relevant to the thing actually being tested here.  The <code>assertPlayerIsIn</code> method hides how we tell if a player is in a given location.  It's actually a wrapper for this single assertion:</p>

<blockquote>
<pre><code>assertTrue(game.getPositionOfTokenOf(computer) == expectedSquareLocation);
</code></pre>
</blockquote>

<p>A few things to note, the player name parameter is actually 'computer' on the method signature which is misleading.  <code>assertTrue</code> will also only tell you if the equality is correct or not, passing the two parameters into <code>assertEquals</code> on the other hand outputs both values if the test fails which is far more helpful for diagnosing the problem.  So, a couple of minor changes and the first test looks like:</p>

<pre><code>@Test
public void tokenShouldStartOnSquareOne() throws Exception {
    Player newPlayer = new Player("player2");
    game.addPlayer(newPlayer);
    assertEquals(1, game.getPositionOfTokenOf(newPlayer));
}
</code></pre>

<p>It's an extra line, but I think it's more descriptive.  There are other helper methods in your tests, which I probably wouldn't have created, for example <code>turnPlayerMove</code>.  Part of what I'm looking for when I use TDD is to get a feel for how easy the objects under test are to work with.  If too much of this interaction gets hidden in private methods that make the interface more usable then I don't think you get this benefit.  You don't get the same feeling that actually you need to refactor something.</p>

<p>Another example of how 'DRY'ing it up can be confusing is:</p>

<blockquote>
<pre><code>public void playerShouldWinTheGameWhenTheirTokenReachesThe100thSquare() throws Exception {
    turnPlayerMove(96);
    int numberOfSpacesToMove = 3;
    turnPlayerMove(numberOfSpacesToMove);
    assertEquals(player1, game.getWinner());
}
</code></pre>
</blockquote>

<p>At first glance, I'm thinking 96 + 3 = 99, why is it on square 100... but of course, rather than putting the token on square 97, your putting it on 1, then moving it 96 to get to 97, before moving it 3 for the test.  This seems quite confused/convoluted and again suggests a possible refactoring...</p>

<p><strong>Tokens and Players</strong></p>

<p>The Kata talks about Tokens and Players in a way that suggests they are distinct things.  However, the way your tests are written this can be confused.  'tokenShould...<code>for the test name and</code>assertPlayerIs...` for the validation.  Again, this is a flag that maybe the modelling isn't quite right and some refactoring could be useful.</p>

<p><strong>turnPlayerMove</strong></p>

<p>Tests like <code>tokenShouldBeInSquare8AfterMoving3SpacesThen4SpacesFromSquare1</code> use <code>turnPlayerMove</code> to validate that if a token moves N spaces, then the player will be in space currentPosition + N.  However, <code>turnPlayerMove</code> rotates the player that it moving.  So, if I add another player, then instead of player 1 moving 3 + 4 spaces, player 1 moves 3 and player 2 moves 4.  If it's relevant, then consider adding critical test dependencies to the test method signature as part of the scenario being tested.  So, <code>singlePlayerOnSquare1Moves3Then4ShouldBeAt8</code> for example.</p>

<p><strong>Hanging Dependencies</strong></p>

<blockquote>
<pre><code>@Test
public void numberOfMovesShouldBeDecidedByDieRolls() throws Exception {
    int dieResult = 1;
    int expectedSquareLocation = 5;
    while (dieResult != 4) {
        dieResult = player1.rollDice();
    }
    turnPlayerMove(dieResult);
    assertPlayerIsIn(player1, expectedSquareLocation);
}
</code></pre>
</blockquote>

<p>This is a strange test.  It's largely testing the same move logic that's been tested previously, however it's also testing that eventually a 4 can be rolled by the player.  This isn't what the test name suggests.  It was also one reason why my stubbed version of <code>Player</code> hung, since I just had <code>rollDice</code> returning 1.  There are similar <code>while</code> loops in other tests, which hang if the underlying code doesn't behave as expected.  Test should fail fast if there's an issue with the code, tests that hang are bad and can result in manual intervention being required on build servers.</p>

<p><strong>determinePlayOrder</strong></p>

<p>I'm fairly sure the logic here doesn't match the Kata description.  It says, that if both players roll the same number, then they have to roll again.  It looks to me like your logic is, player 1 rolls and reserves that number, then player 2 has to keep rolling until they get something other than the value player 1 rolled.  This also wouldn't scale if more than 6 people played.</p>
    </div>