<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall good implementation, well commented and easy to understand.</p>
<p>These are my suggestions:</p>
<ol>
<li>You can model the user choice as Enum (more readable)</li>
<li>The code to request an integer from the user is duplicated many times, better to use a single method and reuse it</li>
<li><code>InvalidValue()</code> method is never used</li>
<li>Better to use <code>System.out.println</code> instead of <code>System.out.printf</code> (no need of %n)</li>
<li>No need to call <code>System.exit(0)</code> the program ends automatically</li>
<li>For the methods <code>passwordGenerator</code> and <code>pinGenerator</code> is better to return a String and print it rather than use <code>System.out.print</code> inside (easier to reuse in the future)</li>
<li><code>myArray2</code> in pinGenerator method? Maybe a typo</li>
<li>As @tinstaafl suggested you can generate numbers and letters without using arrays (more readable)</li>
</ol>
<p>This is the code refactored:</p>
<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
    choicePrompt(); // Prompt to choose pin or password.
    menuMethod(); // Method to catch user input if not (1) PIN, (2) Password or (3) Exit.
}

static void choicePrompt() {
    System.out.println("Password Generator:");
    System.out.println("1 - Create PIN");
    System.out.println("2 - Create Password");
    System.out.println("3 - EXIT");
}

// Method accepts (1), (2), (3)
static void menuMethod() {
    int input = requestIntBetween(1, 3, invalidValuePrompt());
    inputMethod(input);
}

static int requestIntBetween(int start, int end, String errorMessage) {
    int input = Integer.MIN_VALUE;
    Scanner obj = new Scanner(System.in);
    while (input &lt; start || input &gt; end) {
        if (obj.hasNextInt()) {
            input = obj.nextInt();
            if (input &lt; start || input &gt; end) {
                System.out.println(errorMessage);
            }
        } else {
            obj.nextLine();
            System.out.println(errorMessage);
        }
    }

    return input;
}

// Method for menuMethod()
static String invalidValuePrompt() {
    return "Please enter: \n1 - Create PIN\n2 - Create Password\n3 - EXIT";
}

// Method takes users input and starts pinGenerator(), passwordGenerator() or exits
static void inputMethod(int input) { 
    switch (Choice.from(input)) {
    case CREATE_PIN:
        System.out.println("Enter pin length: (4 - 32)");
        int pinLength = requestIntBetween(4, 32, "Please enter: (4-32)");
        String pin = pinGenerator(pinLength); // PIN generates and is printed.
        System.out.println(pin);
        break;
    case CREATE_PW:
        System.out.println("Enter password length: (6-64)");
        int passwordLength = requestIntBetween(6, 64, "Please enter: (6-64)");
        String pw = passwordGenerator(passwordLength); // Password generates and is printed.
        System.out.println(pw);
        break;
    case EXIT:
        // do nothing and exit
        break;
    }
}

// Method generates pin randomly. passwordLength is determined in previous
// method by user.
static String pinGenerator(int pinLength) {
    SecureRandom random = new SecureRandom();
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; pinLength; i++) {
        sb.append(random.nextInt(10));
    }
    return sb.toString();
}

// Method generates a random password using SecureRandom class by utilizing
// characters, numerical values and special characters.
static String passwordGenerator(int passwordLength) {
    SecureRandom random = new SecureRandom();
    String letters = "abcdefghijklmnopqrstuvwxyz";
    String[] specialCharacters = { "!", "@", "#", "%", "&amp;", "=", "?", "-" };
    StringBuilder sb = new StringBuilder();
    // For loop generates password from array using switch class.
    for (int i = 0; i &lt; passwordLength; i++) { // passwordLength equals users input.
        int valueChoice = 1 + random.nextInt(4); // Bounds account for all arrays in switch case.
        switch (valueChoice) {
        case 1: // Random lowercase letter
            sb.append(letters.charAt(random.nextInt(letters.length())));
            break; // Restarts loop and generates next value.
        case 2: // Random numerical value (0-9)
            sb.append(random.nextInt(10));
            break;
        case 3: // Random uppercase letter
            sb.append(letters.toUpperCase().charAt(random.nextInt(letters.length())));
            break;
        case 4: // Random special character is chosen from array.
            int randomSymbols = random.nextInt(specialCharacters.length);
            sb.append(specialCharacters[randomSymbols]);
            break;
        }
    }
    return sb.toString();
}
</code></pre>
<p>And the class Choice:</p>
<pre><code>public enum Choice {
    CREATE_PIN(1), CREATE_PW(2), EXIT(3);

    private int value;

    Choice(int value) {
        this.value = value;
    }

    public int getValue() {
        return this.value;
    }

    public static Choice from(int choice) {
        return Stream.of(Choice.values())
                  .filter(c -&gt; c.value == choice)
                  .findFirst().orElse(null);
    }
}
</code></pre>
    </div>