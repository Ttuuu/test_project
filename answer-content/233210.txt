<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Never call <code>map.erase(map.end())</code>. Doing so is undefined.</p>

<p>There are some simple tricks for linked lists to avoid special-cases:</p>

<p>Define your own type for the links (prev and next), instead of letting loose pointers rattle around everywhere.</p>

<p>Also, arrange for a special value which on assignment does nothing:</p>

<pre><code>struct links {
    links() = default;
    constexpr links(char) noexcept {}
    constexpr links&amp; operator=(char) noexcept { return *this; }
    links *prev = this;
    links *next = this;
};

std::map&lt;KeyT, std::pair&lt;links, ValueT&gt;&gt; map;
links order;

void linkit(links&amp; x) noexcept {
    x.next = order;
    order.prev-&gt;next = &amp;x;
    x.prev = order.prev;
    order.prev = &amp;x;
}

void unlinkit(links&amp; x) noexcept {
    x.prev-&gt;next = x.next;
    x.next-&gt;prev = x.prev;
}

decltype(*map.begin())&amp; fromlink(links&amp; x) noexcept {
    auto&amp; y = *map.begin();
    const auto offset = (char*)&amp;y-&gt;second.first - (char*)y;
    return (decltype(y)&amp;)((char*)&amp;x - offset);
}

template &lt;class K, class V&gt;
std::pair&lt;MapItT, bool&gt; insert_or_assign(const K&amp; key, V&amp;&amp; value) {
    auto r = map.insert_or_assign(key, std::pair&lt;char, V&amp;&amp;&gt;(
        '\0', std::forward&lt;V&gt;(value)));
    if (r.second)
        linkit(r.first-&gt;second.first);
    return r;
}

ValueT&amp; operator[](const KeyT&amp; key) {
    auto&amp; x = map[key];
    if (!x.first.prev)
        linkit(x.first);
    return x.second;
}

size_type erase(const KeyT&amp; key) {
    const auto p = map.find(key);
    if (p == map.end())
        return 0;
    unlinkit(p-&gt;second.first);
    map.erase(p);
    return 1;
}
</code></pre>

<p>Beware: All code is untested.</p>
    </div>