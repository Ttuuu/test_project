<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>std::size_t node_count = std::stoul(argv[1]);
</code></pre>

<p>I agree with the commenter who said (more or less) "don't write <code>std::size_t</code> when <code>size_t</code> will do." And I'll go further, and point out that most of your uses of <code>size_t</code> are unnecessary. For example, above, you're using <code>std::stoul</code>, which returns an <code>unsigned long</code>; so implicitly converting it to <code>size_t</code> is maybe a little sketchy. What if <code>size_t</code> is smaller than <code>unsigned long</code>? (Unlikely.) What if it's bigger? (Possible.)</p>

<p>As soon as you start thinking about boundary conditions, you realize that actually it's highly unlikely that your program will ever be called upon to deal with 2 billion nodes at a time. So you can just use <code>int</code> and <code>std::stoi</code> (or even <code>atoi</code>). And then:</p>

<pre><code>struct node {
    int index = 0;
    int* neighbor_indices = nullptr;
    int filled_count = 0;
};
</code></pre>

<p>Boom, you've just cut your memory usage in half!</p>

<hr>

<p>You write:</p>

<blockquote>
  <p>Memory for neighbor indices is managed semi-manually, because I believe that on smaller neighbor count standard memory allocator becomes less efficient (to be checked).</p>
</blockquote>

<p>Nope, you definitely believe incorrectly. Just use <code>std::vector&lt;int&gt;</code>. It'll save you a lot of grief.</p>

<pre><code>struct node {
    int index = 0;
    std::vector&lt;int&gt; neighbor_indices;
    // "filled_count" becomes "neighbor_indices.size()"
};
</code></pre>

<p>And then you can get rid of all this stuff:</p>

<pre><code>auto neighbors_storage = std::make_unique&lt;std::size_t[]&gt;(total_neighbor_count);
std::size_t* storage = neighbors_storage.get();
</code></pre>

<p>because each node will be managing its own vector. Grief: saved.</p>

<hr>

<pre><code>            if (is_over_satisfied(*neighbor)) {
                throw std::logic_error("oversatisfied node found");
            }
</code></pre>

<p>Nit: You spell it <code>oversatisfied</code> in the error message, but <code>over_satisfied</code> (two words) in the function name. Pick a spelling and stick to it! (I recommend <code>oversatisfied</code>, one word.)</p>

<hr>

<pre><code>    auto node_cmp = [is_border_index, border_edge_count, nonborder_edge_count](const node&amp; lhs, const node&amp; rhs) {
        bool is_lhs_border = is_border_index(lhs.index);
        bool is_rhs_border =  is_border_index(rhs.index);
        auto required_lhs = is_lhs_border ? border_edge_count : nonborder_edge_count;
        auto required_rhs = is_rhs_border ? border_edge_count : nonborder_edge_count;
        return lhs.filled_count * required_rhs &gt; rhs.filled_count * required_lhs;
    };
</code></pre>

<p>Because this lambda is only ever used in one place, you can move its definition in-line. And because it doesn't escape upward from the current scope, you don't need it to capture anything by-copy. Lambdas that are used as callbacks (but do not escape upward) should always capture <code>[&amp;]</code> and nothing else. So:</p>

<pre><code>    std::sort(head, nodes.end(), [&amp;](const node&amp; lhs, const node&amp; rhs) {
        bool is_lhs_border = is_border_index(lhs.index);
        bool is_rhs_border =  is_border_index(rhs.index);
        auto required_lhs = is_lhs_border ? border_edge_count : nonborder_edge_count;
        auto required_rhs = is_rhs_border ? border_edge_count : nonborder_edge_count;
        return lhs.filled_count * required_rhs &gt; rhs.filled_count * required_lhs;
    });
</code></pre>

<p>Finally, we can remove some error-prone code duplication by factoring out the "key function." I haven't really thought this through, but I think the following is equivalent to what you had. (It's tricky because you were multiplying parts of <code>lhs</code> with parts of <code>rhs</code>. I'm not intuitively convinced that the function you had defined a consistent ordering at all!)</p>

<pre><code>    auto key = [&amp;](const node&amp; n) {
        return n.filled_count * (is_border_index(n.index) ? nonborder_edge_count : border_edge_count);
    };
    std::sort(head, nodes.end(), [&amp;](const node&amp; lhs, const node&amp; rhs) {
        return key(lhs) &gt; key(rhs);
    });
</code></pre>

<hr>

<p>Alternatively, pull out each sort-predicate and give it a descriptive name. For example, instead of</p>

<pre><code>    std::sort(nodes.begin(), nodes.end(), [](const node&amp; lhs, const node&amp; rhs) {
        return lhs.index &lt; rhs.index;
    });
</code></pre>

<p>I might write</p>

<pre><code>    auto by_index = [](const node&amp; lhs, const node&amp; rhs) { return lhs.index &lt; rhs.index; };
    // ...
    std::sort(nodes.begin(), nodes.end(), by_index);
</code></pre>

<p>Rigorously following this style can force you to clarify your thinking process. When you sort using the predicate above — the one with the multiplication involving <em>both</em> <code>lhs</code> and <code>rhs</code> — what are you sorting <em>by</em>? If you can't name it, you probably don't understand it.</p>

<hr>

<pre><code>std::size_t _node_count;
</code></pre>

<p>How come <code>maze_builder</code>'s private data members get decorated with underscores, but <code>maze</code>'s private data members don't? That seems inconsistent. Also, the traditional C++ style is to put the underscore at the <em>end</em> of the identifier, not at the beginning. (Avoid leading underscores!)</p>

<hr>

<pre><code>std::vector&lt;char&gt; visited(nodes.size());
visited[0] = true;
</code></pre>

<p>If you're storing <code>true</code> and <code>false</code> in this vector, it should probably be a <code>vector&lt;bool&gt;</code>, not a <code>vector&lt;char&gt;</code>. Or if you're deliberately avoiding <code>vector&lt;bool&gt;</code> because of how wacky it is, you should leave a comment explaining that that's what's happening — and also, explain what would go wrong if you used <code>vector&lt;bool&gt;</code>.</p>

<hr>

<pre><code>    std::optional&lt;maze&gt; result;
    result = maze(std::move(nodes), std::move(neighbors_storage));
    return result;
</code></pre>

<p>This is a very verbose way of writing</p>

<pre><code>    return maze(std::move(nodes), std::move(neighbors_storage));
</code></pre>

<p>In fact, it sure <em>looks</em> like you don't need to be returning <code>optional&lt;maze&gt;</code> from this function at all! There's no way for it to return <code>std::nullopt</code>; it invariably returns a <code>maze</code> object (or throws).</p>

<p>...ooh. Actually, there's a <code>return {};</code> hiding in the middle, which in the case of <code>optional</code> actually means "return the empty optional," i.e. <code>return std::nullopt;</code>. That's quite sneaky. I strongly recommend (A) throwing an exception instead, since you're already using exceptions to report errors in this function; or at least (B) spelling out <code>std::nullopt</code> instead of hiding it in punctuation.</p>

<hr>

<pre><code>maze_builder builder() {
    return {};
}
</code></pre>

<p>This is dead code. Remove it.</p>

<hr>

<pre><code>    auto is_border_index = [border_count](std::size_t index) {return index &lt; border_count;};
    auto is_satisfied = [border_edge_count, nonborder_edge_count, is_border_index](node&amp; n) {
        if (is_border_index(n.index)) {
            return n.filled_count == border_edge_count;
        } else {
            return n.filled_count == nonborder_edge_count;
        }
    };
    auto is_over_satisfied = [border_edge_count, nonborder_edge_count, is_border_index](node&amp; n) {
        if (is_border_index(n.index)) {
            return n.filled_count &gt; border_edge_count;
        } else {
            return n.filled_count &gt; nonborder_edge_count;
        }
    };
</code></pre>

<p>Same comment as above, about lambdas that should be capturing <code>[&amp;]</code>. Also, it would be easier to follow the logic if you identified the duplicated code snippets and factored them out. So for example:</p>

<pre><code>auto edge_count = [&amp;](const node&amp; n) { return (n.index &lt; border_count) ? border_edge_count : nonborder_edge_count; };
auto is_satisfied = [&amp;](const node&amp; n) { return n.filled_count == edge_count(n); };
auto is_oversatisfied = [&amp;](const node&amp; n) { return n.filled_count &gt; edge_count(n); };
</code></pre>

<p>And remember your const-correctness!</p>

<hr>

<pre><code>    maze_builder&amp; of_size(std::size_t node_count) {
        _node_count = node_count;
        return *this;
    }
</code></pre>

<p>Interesting, and correct enough; but I don't see this function actually getting used anywhere. In fact, I guess this entire <code>maze_builder</code> thing is dead code, right? Remove it.</p>

<hr>

<pre><code>maze(std::vector&lt;node&gt;&amp;&amp; nodes, std::unique_ptr&lt;std::size_t[]&gt;&amp;&amp; neighbors_storage):
    nodes(std::move(nodes)),
    neighbors_storage(std::move(neighbors_storage)) {}
</code></pre>

<p>Two things:</p>

<ul>
<li><p>Never pass smart pointers (or regular pointers, or iterators, or allocators) by reference. Pass by value. Well-written C++ code looks like Python; if you see yourself writing lots of <code>&amp;&amp;</code>, you might be doing it wrong.</p></li>
<li><p>Always make your constructors <code>explicit</code>, unless you have a <em>specific reason</em> to enable the implicit conversion.</p></li>
</ul>

<p>These are small things, but they make a big difference.</p>

<pre><code>explicit maze(std::vector&lt;node&gt; nodes, std::unique_ptr&lt;std::size_t[]&gt; neighbors_storage):
    nodes(std::move(nodes)),
    neighbors_storage(std::move(neighbors_storage)) {}
</code></pre>

<hr>

<p>This has gone on long enough, so I'll stop. I think the biggest problem with this program as presented here is that about half of it is dead code. The second-biggest problem (a distant second) is a tie between all those lambdas that unnecessarily capture things-that-aren't-<code>[&amp;]</code>, and all those <code>std::size_t</code>s that should be <code>int</code>.</p>
    </div>