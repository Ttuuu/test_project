<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First thing I would do is change <code>if (mainString.Length == desiredLength)</code> to <code>if (mainString.Length &gt;= desiredLength)</code>, since if it's longer it'll just do excess work with the <code>StringBuilder</code> and you may as well return early on all conditions that would satisfy it.</p>

<hr>

<p>I would also combine this <code>try</code>/<code>catch</code> block:</p>

<blockquote>
<pre><code>try
{
    //ensures process wont deny access
    if (!process.HasExited)
    {
        DateTime runtime = process.StartTime;
    }
}
catch (Win32Exception)
{
    continue;
}
try
{
    //ensures process wont exit
    processesInfo.Add(process.Id, process);
    if (!processesActiveTime.ContainsKey(process.Id))
    {
        processesActiveTime.Add(process.Id, new ProcessInfo(process, new TimeSpan()));
    }
}
catch (InvalidOperationException) { }
</code></pre>
</blockquote>

<p>To:</p>

<pre><code>try
{
    //ensures process wont deny access
    if (!process.HasExited)
    {
        DateTime runtime = process.StartTime;
    }

    //ensures process wont exit
    processesInfo.Add(process.Id, process);
    if (!processesActiveTime.ContainsKey(process.Id))
    {
        processesActiveTime.Add(process.Id, new ProcessInfo(process, new TimeSpan()));
    }
}
catch (Win32Exception) { continue; }
catch (InvalidOperationException) { }
</code></pre>

<hr>

<p>With expression-bodied members, I've found it's easier to read when the 'lambda' syntax is on the same line as the member.</p>

<blockquote>
<pre><code>private static ListViewItem CreateListViewRow(string name, string status, string runtime, string activeTime,
    string startTime, string memoryUsage)
    =&gt; new ListViewItem(new[] {name, status, runtime, activeTime, startTime, memoryUsage});
</code></pre>
</blockquote>

<p>To:</p>

<pre><code>private static ListViewItem CreateListViewRow(string name, string status, string runtime, string activeTime,
    string startTime, string memoryUsage) =&gt;
    new ListViewItem(new[] {name, status, runtime, activeTime, startTime, memoryUsage});
</code></pre>

<hr>

<p>Next, same block from above:</p>

<blockquote>
<pre><code>private static ListViewItem CreateListViewRow(string name, string status, string runtime, string activeTime,
    string startTime, string memoryUsage) =&gt;
    new ListViewItem(new[] {name, status, runtime, activeTime, startTime, memoryUsage});
</code></pre>
</blockquote>

<p>Break <em>each</em> parameter on a new line if you're going to break one of them:</p>

<pre><code>private static ListViewItem CreateListViewRow(string name,
                                              string status,
                                              string runtime
                                              string activeTime,
                                              string startTime,
                                              string memoryUsage) =&gt;
    new ListViewItem(new[] {name, status, runtime, activeTime, startTime, memoryUsage});
</code></pre>

<hr>

<p>Once we do that we see that it's a bit ugly, this method isn't a place for expression-bodied members:</p>

<pre><code>private static ListViewItem CreateListViewRow(string name,
                                              string status,
                                              string runtime
                                              string activeTime,
                                              string startTime,
                                              string memoryUsage)
{
    return new ListViewItem(new[]
    {
        name,
        status,
        runtime,
        activeTime,
        startTime, 
        memoryUsage
    });
}
</code></pre>

<hr>

<p>I'll try to add more later, quite late right now and there's probably a lot more to say.</p>
    </div>