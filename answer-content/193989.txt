<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are few thoughts how the code could be slightly refactored.</p>

<p>The calculation of <code>YEAR_CHOICES</code> is little bit ugly. You could do it more elegant with a list comprehension:</p>

<pre><code>from datetime import datetime

YEARS = [(year, year) for year in range(1999, datetime.now().year+1)]
</code></pre>

<p>Notice that I changed also some variable names. Naming is a very important skill.</p>

<p>It is much easier to understand <code>(year, year) for year in range(...)</code> instead of <code>for r in range(...)</code>. What does <code>r</code> stand for? The variable names should have some meaning.</p>

<p>You have another constant <code>POSITIONS</code>, which is not revealed in your question. You should be consistent and keep the same name convention throughout your project.</p>

<p>You could suffix all your choice constants with <code>_CHOICES</code>, like:</p>

<ul>
<li>YEAR_CHOICES</li>
<li>POSITION_CHOICES</li>
</ul>

<p>where the suffix would clutter the code and be redundant, or keep the names succinct, like:</p>

<ul>
<li>YEARS</li>
<li>POSITIONS</li>
</ul>

<p>If you have more choice constants, you could eventually put them in their own file. That's a matter of taste and depends on the size of your project. Personally if I have to use choices more frequently in my models, I create an extra file <code>choices.py</code> or <code>constants.py</code> and put all choices there. Then you can import them in the <code>models.py</code>:</p>

<pre><code>from . import choices
</code></pre>

<p>and use them like this:</p>

<pre><code>position = models.CharField(max_length=128, choices=choices.POSITIONS)
</code></pre>

<p>Here we have another issue. Why is <code>max_length=128</code>? When you use choices, you would like to store a short string in the database and resolve it in the application. An example would be:</p>

<pre><code>(
    ('FW', 'Forward'),
    ('LB', 'Left Back'),
    ('MF', 'Midfielder'),
)
</code></pre>

<p>Then you could set <code>max_length=2</code> and keep your database more performant.</p>

<p>Further you mix the coding style in the <code>ForeignKey</code> fields. Keep this:</p>

<pre><code>team = models.ForeignKey('TeamRooster')
</code></pre>

<p>and adjust this:</p>

<pre><code>player = models.ForeignKey(Player)
</code></pre>

<p>to:</p>

<pre><code>player = models.ForeignKey('Player')
</code></pre>

<p>If you want to upgrade to Django 2, you'll have to pass <code>on_delete</code> to this field. Make your code future-proof and do that now. Even though it is not a mandatory argument, it is highly recommended to specify <code>related_name</code>. Here is an example:</p>

<pre><code>player = models.ForeignKey('Player', on_delete=models.CASCADE, related_name='contracts')
</code></pre>

<p>Enclose in quotes the <code>through</code> arguments in the M2M fields, too:</p>

<pre><code>player = models.ManyToManyField(Player, through='PlayerContract', blank=True)
</code></pre>

<p>Without knowing your user-story I can't provide further tips about the business logic of your app.</p>
    </div>