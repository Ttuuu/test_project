<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There appears to be a flaw with the function <code>error</code>:</p>

<blockquote>
<pre><code>function error() {
    console.log = "Unable to retrieve your location";
};
</code></pre>
</blockquote>

<p>That will <strong>re-assign</strong> that string literal to <code>console.log</code>. Any subsequent calls to <code>console.log()</code> would then throw a TypeError: </p>

<blockquote>
  <p><code>console.log is not a function</code></p>
</blockquote>

<p>Presumably you meant to <em>call</em> that method and pass the string literal:</p>

<pre><code>console.log("Unable to retrieve your location");
</code></pre>

<p>There is also <a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/error" rel="nofollow noreferrer"><code>console.error()</code></a> which could be used in this case:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>console.error("Unable to retrieve your location");</code></pre>
</div>
</div>


<hr>

<p>When I try running the codepen on my office computer, the location data coming back from the locationIQ API does not contain a <code>city</code> property in the <code>address</code> property - see the sample below (also, it is about 3 kilometers away from my actual location - perhaps my ISP has equipment at that spot). You should consider an alternative property when this happens.</p>

<pre class="lang-js prettyprint-override"><code>{
  "place_id": "159393810",
  "licence": "© LocationIQ.com CC BY 4.0, Data © OpenStreetMap contributors, ODbL 1.0",
  "osm_type": "way",
  "osm_id": "368233107",
  "lat": "45.50757005",
  "lon": "-122.6897144171",
  "display_name": "1017, Southwest Myrtle Drive, Portland Heights, Southwest Hills, Multnomah County, Oregon, 97201, USA",
  "address": {
    "house_number": "1017",
    "road": "Southwest Myrtle Drive",
    "neighbourhood": "Portland Heights",
    "suburb": "Southwest Hills",
    "county": "Multnomah County",
    "state": "Oregon",
    "postcode": "97201",
    "country": "USA",
    "country_code": "us",
    "town": "Southwest Hills"
  },
  "boundingbox": [
    "45.5074436",
    "45.5077148",
    "-122.6899028",
    "-122.6895124"
  ]
}
</code></pre>

<p>I was able to see weather information for my city using the postcode, which still displays the name of my city:</p>

<pre><code>getWeather(data.address.postcode);
</code></pre>

<p>Though some would argue that a safer check would be to ensure that the property exists before using it. </p>

<hr>

<p>I suggest you look into using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" rel="nofollow noreferrer">Promises</a> for XHR requests. There are APIs like <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" rel="nofollow noreferrer">the Fetch API</a>, or others like <a href="https://github.com/ded/reqwest" rel="nofollow noreferrer">reqwest</a> and <a href="https://github.com/axios/axios" rel="nofollow noreferrer">axios</a>. Or as the MDN documentation illustrates, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#Creating_a_Promise" rel="nofollow noreferrer">promises can be used to wrap up XHR code</a>. Because you are using <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features, you could also consider <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function" rel="nofollow noreferrer"><code>async</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow noreferrer"><code>await</code></a>.</p>

<hr>

<p>Many of the lines of code use <code>let</code> for values that never get re-assigned. For example, the following two lines appear at the end of the callback function assigned to <code>locRequest.onreadystatechange</code>:</p>

<blockquote>
<pre><code>let data = JSON.parse(this.responseText);
getWeather(data.address.city);
</code></pre>
</blockquote>

<p>Because <code>data</code> is never re-assigned, <code>const</code> would be appropriate and avoid any potential re-assignment. There are some who recommend the following:</p>

<blockquote>
  <ul>
  <li>use <code>const</code> by default</li>
  <li>only use <code>let</code> if rebinding is needed
  <sup><a href="https://mathiasbynens.be/notes/es6-const" rel="nofollow noreferrer">1</a></sup></li>
  </ul>
</blockquote>

<hr>

<p>Consider the DOM queries:</p>

<blockquote>
<pre><code>let currentLocation = document.querySelector('.js-currentLocation');
let temp = document.querySelector('.js-temp');
let weatherType = document.querySelector('.js-weatherType');
let weatherPreview = document.querySelector('.js-widgetPrev');
</code></pre>
</blockquote>

<p>If those elements are really unique, then it would be advisable to update the HTML to use an <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer">id</a> attribute for those single elements:</p>

<pre><code>&lt;div class="widget"&gt;
  &lt;div class="widget__desc" id="js-weatherType"&gt;&lt;/div&gt;
  &lt;div class="widget__info"&gt;
    &lt;div class="widget__temp" id="js-temp"&gt;&lt;/div&gt;
    &lt;div class="widget__currentLocation" id="js-currentLocation"&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="widget__prev"&gt;
    &lt;div id="js-widgetPrev"&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Then those elements can be selected by id:</p>

<pre><code>const currentLocation = document.querySelector('#js-currentLocation');
const temp = document.querySelector('#js-temp');
const weatherType = document.querySelector('#js-weatherType');
const weatherPreview = document.querySelector('#js-widgetPrev');
</code></pre>

<p>And then use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById" rel="nofollow noreferrer"><code>document.getElementById()</code></a> because it typically performs faster (see <a href="https://jsperf.com/getelementbyid-vs-queryselector" rel="nofollow noreferrer">this performance comparison test</a>) than <code>document.querySelector()</code>, which supports many more selectors</p>

<pre><code>const currentLocation = document.getElementById('js-currentLocation');
const temp = document.getElementById('js-temp');
const weatherType = document.getElementById('js-weatherType');
const weatherPreview = document.getElementById('js-widgetPrev');
</code></pre>

<p><sup>1</sup><sub><a href="https://mathiasbynens.be/notes/es6-const" rel="nofollow noreferrer">https://mathiasbynens.be/notes/es6-const</a></sub></p>
    </div>