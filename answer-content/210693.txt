<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Eliminate global variables where practical</h2>

<p>The code declares and uses 3 global variables.  Global variables obfuscate the actual dependencies within code and make maintainance and understanding of the code that much more difficult.  It also makes the code harder to reuse.  For all of these reasons, it's generally far preferable to eliminate global variables in favor of local variables and pass pointers to variables for functions needing them.  For instance, the only function using <code>w_combinations</code> is <code>win()</code>, so I would declare it <code>static constexpr</code> and put it within the body of that function.</p>

<h2>Eliminate unused variables</h2>

<p>Unused variables are a sign of poor code quality, so eliminating them should be a priority.  In this code, <code>end</code> is initialized but never used.  My compiler also tells me that.  You compiler is probably also smart enough to tell you that, if you ask it to do so. </p>

<h2>Eliminate spurious statements</h2>

<p>Inside the <code>win()</code> function is this strange construction:</p>

<pre><code>{
    return true;
    break;
}
</code></pre>

<p>The <code>break</code> is never going to be executed, so it would be better to simply omit it.</p>

<h2>Use more whitespace to enhance readability of the code</h2>

<p>Instead of crowding things together like this:</p>

<pre><code>if (game.win()) {std::cout &lt;&lt; "Player 1 wins!\n";break;}
</code></pre>

<p>most people find it more easily readable if you use more space:</p>

<pre><code>if (game.win()) {
    std::cout &lt;&lt; "Player 1 wins!\n";
    break;
}
</code></pre>

<h2>Don't call <code>main</code></h2>

<p>The C++ standard specifically prohibits calling <code>main</code>, so doing so results in <em>undefined behavior</em>, meaning that the compiler could do anything.  If you need to have the program loop, write a loop.</p>

<h2>Prefer looping to unbounded recursion</h2>

<p>Unlike <code>main</code>, it is legal C++ to call <code>input</code> from within the <code>input</code> function.  However, in this case, it's not a good idea.  The goal here is to keep trying to get input until we get a valid input.  Here's a way to write that which uses a loop instead of recursion:</p>

<pre><code>void input(int player) {
    const char *prompt[2] = { "1[X]:", "2[O]:" };
    const char token[2] = { 'X', 'O' };
    assert(player == 0 || player == 1);
    std::cout &lt;&lt; prompt[player];
    while (1) {
        int square;
        std::cin &gt;&gt; square;
        --square;
        if (square &gt;= 0 &amp;&amp; square &lt; 9 &amp;&amp; pos[square] == '1'+square) {
            pos[square] = token[player];
            return;
        }
        std::cout &lt;&lt; "\nInvalid! Try again: ";
    }
}
</code></pre>

<p>Note that <code>player</code> is now 0 or 1 instead of 1 or 2 and that I've used characters for <code>pos</code> instead of <code>int</code>.  More on that later.</p>

<h2>Use objects</h2>

<p>The game is written much more in the procedural style of C rather than in the object-oriented style of C++.  The game itself could be an object, with most of the procedures as functions of that object.  This would reduce coupling and make the program easier to understand.  It would also easily eliminate the global variables that currently exist in the code.</p>

<h2>Use better variable and function names</h2>

<p>The variable name <code>w_combinations</code> is ok, but the name <code>check()</code> is not.  The first name explains something about what the variable means within the context of the code, but the latter is only confusing. A better name might be <code>printSquare()</code>.</p>

<h2>Rethink the interfaces</h2>

<p>The <code>printMatrix()</code> code currently looks like this:</p>

<pre><code>void printMatrix() {
    std::cout &lt;&lt; "|" ; check(pos[0]) ; check(pos[1]) ; check(pos[2]);std::cout &lt;&lt; "\n";
    std::cout &lt;&lt; "|" ; check(pos[3]);check(pos[4]) ; check(pos[5]);std::cout &lt;&lt; "\n";
    std::cout &lt;&lt; "|" ; check(pos[6]) ; check(pos[7])  ; check(pos[8]); std::cout &lt;&lt; "\n";
}
</code></pre>

<p>It relies on a function called <code>check</code>.  </p>

<pre><code>void check (int x) { 
    if ( x == 10) {
        std::cout &lt;&lt; "X|";
    }
    else if (x == 11) {
        std::cout &lt;&lt; "O|";
    }
    else {
        std::cout &lt;&lt; x &lt;&lt; "|";
    }
}
</code></pre>

<p>This could be made much less verbose by doing two things:  first, use <code>char</code> instead of <code>int</code> for <code>pos</code> and second, use the values <code>X</code> and <code>O</code> instead of 10 and 11.  Then it could be written like this:</p>

<pre><code>void printMatrix() {
    std::cout 
        &lt;&lt; '|' &lt;&lt; pos[0] &lt;&lt; '|' &lt;&lt; pos[1] &lt;&lt; '|' &lt;&lt; pos[2] &lt;&lt; '\n'
        &lt;&lt; '|' &lt;&lt; pos[3] &lt;&lt; '|' &lt;&lt; pos[4] &lt;&lt; '|' &lt;&lt; pos[5] &lt;&lt; '\n'
        &lt;&lt; '|' &lt;&lt; pos[6] &lt;&lt; '|' &lt;&lt; pos[7] &lt;&lt; '|' &lt;&lt; pos[8] &lt;&lt; '\n';
}
</code></pre>

<p>Alternatively, one could write a loop.</p>

<h2>Reduce redundant code</h2>

<p>Each player's turn is essentially the same code, with only the prompt changing, so it would make sense to write it that way.  Using all of the suggestions above, here's what my rewritten <code>main</code> looks like:</p>

<pre><code>int main() {
    bool playing = true;
    while (playing) {
        TicTacToe game;
        game.play();
        std::cout &lt;&lt; "Play again[Yes = 1, No = 0]: ";
        int permission;
        std::cin &gt;&gt; permission;
        playing = (permission == 1);
        std::cout &lt;&lt; "\n\n";
    }
}
</code></pre>

<p>Notice that everything is wrapped up in a <code>TicTacToe</code> game object which has <code>play()</code> as its only public member function.  There are, of course, other ways to do this, but I hope that whets your appetite for learning more C++.</p>
    </div>