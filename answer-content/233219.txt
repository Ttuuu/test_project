<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Excellent first post.  The code is well laid out.  It is obvious that you are very meticulous and it shows in your coding style.</p>

<h2>Worksheet Code Names</h2>

<p><code>Set backend = ThisWorkbook.Worksheets("Backend")</code> was used 3 times in code and <code>ThisWorkbook.Worksheets("Backend")</code> was used a total of 20 times.  Whenever possible change the code-name of your worksheets to something meaningful. Changing <code>worksheets</code> code name creates a fully qualified reference which is unaffected by having its tab name changed and is visible to intellisense.</p>

<h2>Use Named Ranges</h2>

<p><code>Worksheets("Backend").Range("B3")</code> is referred to in 3 separate methods.  If you move the <code>ClassiferEmail</code> location you will have to make sure that you find every reference or your code will break.</p>

<blockquote>
  <p>ThisWorkbook.Worksheets("Backend").Range("B3").Value2 = ClassiferEmail</p>
</blockquote>

<p>Naming your ranges will allow you to change the layout of your worksheets without breaking your code.  Named ranges should be qualified to their parent worksheets.  To simplify the referencing I will add a property to the worksheet with the same name as the range (see code below).</p>

<blockquote>
<pre><code>Sub PrepareWorksheet()

    ThisWorkbook.Worksheets("Backend").Range("B3").Value2 = ClassiferEmail
    ThisWorkbook.Worksheets("Backend").Range("B4").Value2 = ApplicantEmail

End Sub
</code></pre>
</blockquote>

<p>At first glance, I thought <code>ClassiferEmail</code> and <code>ApplicantEmail</code> were class level variable. It turns out that they are single use functions that set the worksheet value.  The worksheet values are, however, referenced several times.  It would be make more sense to give those names to the ranges and change the functions to subs (e.g. <code>SetClassiferEmail</code> and <code>SetApplicantEmail</code>).</p>

<h2>Clearing ListObjects</h2>

<p>This is very situational:</p>

<blockquote>
<pre><code>If .Range("A7") &lt;&gt; "" Then .ListObjects("TabelaMechanical").DataBodyRange.Delete
</code></pre>
</blockquote>

<p>This is the right way:</p>

<blockquote>
<pre><code>If Not .ListObjects("TabelaMechanical").DataBodyRange Is Nothing Then .ListObjects("TabelaMechanical").DataBodyRange.Delete
</code></pre>
</blockquote>

<p>I also add properties to my worksheets to refer to the ListObjects on it.</p>

<h2>Miscellaneous</h2>

<p>The <code>externalFile</code> is read-only, why both turning off <code>AutoFilter</code>? </p>

<blockquote>
<pre><code>Sub ProcessClose()

    externalFile.Worksheets(1).Cells.AutoFilter
    externalFile.Close SaveChanges:=False

End Sub
</code></pre>
</blockquote>

<p>I prefer to keep the external files open while I am coding.  THe line below is also useful in cases where the end user has is working on the external file.</p>

<blockquote>
<pre><code>If externalFile.ReadOnly Then externalFile.Close SaveChanges:=False
</code></pre>
</blockquote>

<p>Only visible rows of filtered data are copied.  There is no need to use <code>SpecialCells(xlCellTypeVisible)</code> when copying filtered data.    </p>

<blockquote>
<pre><code>namesColumn.SpecialCells(xlCellTypeVisible).Copy
</code></pre>
</blockquote>

<p>I like the use of the constants <code>Const numberOfRowsBeforeRecords = 1</code> bit using it in conjunction with "C2" defeats the purpose.  Mainly</p>

<h2>BackEnd Worksheet Code Refactored</h2>

<pre><code>Const numberOfRowsBeforeRecords = 1

Sub CheckingComplianceClassifierList()

    'Checking if the workbook with the list of classifiers has not changed since the last time using this workbook and update this list in this workbook if needed
    Module3.OptimizeCodeBegin

    Dim externalFile As Workbook
    Set externalFile = Module3.OpenAndSetFile(Me.ExternalFilePathCell.Value)

    If Not externalFile Is Nothing Then 'case when the OpenAndSetFile function does not work (probably, the wrong path)
        Dim lastModifiedExternalFile As Date 'last updated classifier workbook
        lastModifiedExternalFile = FileDateTime(Me.ExternalFilePathCell.Value)

        If Me.ModifiedDateCell.Value2 &lt; lastModifiedExternalFile Then 'last check &lt; modification date

            Dim classifiersAmount As Long

            With externalFile.Worksheets(1)
                classifiersAmount = .Cells(.Rows.Count, "A").End(xlUp).Row - numberOfRowsBeforeRecords 'checks the amount of classifiers in an external file
            End With

            PrepareWorksheet 'Cleaning classifier tables
            RewriteClassifiers externalFile, classifiersAmount
            Me.ModifiedDateCell.Value2 = Now() 'updates date
        End If

        If externalFile.ReadOnly Then externalFile.Close SaveChanges:=False
    End If

    Module3.OptimizeCodeEnd
End Sub

Sub RewriteClassifiers(ByRef externalFile As Workbook, ByVal classifiersAmount As Long)
    'Sub which takes data from the external spreadsheet and pastes it into it

    Dim lastRow As Integer
    lastRow = classifiersAmount + numberOfRowsBeforeRecords

    Dim externalData As Worksheet
    Set externalData = externalFile.Worksheets(1)

    Dim namesColumn As Range
    Set namesColumn = externalData.Range("C2").Resize(classifiersAmount) 'column containing the name of classifiers

    FilterAndCopy "Mechanical Systems", externalData, namesColumn, Me.TabelaMechanical 'Sub FilterAndCopy(workingArea As String, externalData As Worksheet, namesColumn As Range, destination As String)
    FilterAndCopy "Power&amp;Control", externalData, namesColumn, Me.TabelaPower
    FilterAndCopy "Interiors", externalData, namesColumn, Me.TabelaInteriors
    FilterAndCopy "CSS", externalData, namesColumn, Me.TabelaCSS

End Sub

Sub FilterAndCopy(workingArea As String, externalData As Worksheet, namesColumn As Range, table As ListObject)
    externalData.Cells.AutoFilter Field:=11, Criteria1:=workingArea
    namesColumn.Copy 'copies visible cells from the column containing the name of the classifier

    If Not table.DataBodyRange Is Nothing Then table.DataBodyRange.Delete
    table.Range.Offset(1).PasteSpecial xlPasteValues
End Sub

Sub CheckingComplianceTemplate()
    If Me.ModifiedDateCell.Value2 &lt; FileDateTime(Me.ExternalFilePathCell.Value) Then 'last check &lt; modification date, a positive result means that the template has been modified since the last check
        Me.PermissionCell.Value2 = False
        MsgBox "Your version of the spreadsheet is out of date. Download current template - location: xyz"
    Else
        Me.PermissionCell.Value2 = True
        Me.ModifiedDateCell.Value2 = Now()
    End If
End Sub

Public Property Get TabelaMechanical() As ListObject
    Set TabelaMechanical = Me.ListObjects("TabelaMechanical")
End Property

Public Property Get TabelaPower() As ListObject
    Set TabelaPower = Me.ListObjects("TabelaPower")
End Property

Public Property Get TabelaInteriors() As ListObject
    Set TabelaInteriors = Me.ListObjects("TabelaInteriors")
End Property

Public Property Get TabelaCSS() As ListObject
    Set TabelaCSS = Me.ListObjects("TabelaCSS")
End Property

Public Property Get ApplicantEmailCell() As Range
    Set ApplicantEmailCell = Me.Range("ApplicantEmail")
End Property

Public Property Get ClassiferEmailCell() As Range
    Set ClassiferEmailCell = Me.Range("ClassiferEmail")
End Property

Public Property Get PermissionCell() As Range
    Set PermissionCell = Me.Range("PermissionCell")
End Property

Public Property Get ModifiedDateCell() As Range
    Set ModifiedDateCell = Me.Range("ModifiedDate")
End Property

Public Property Get ExternalFilePathCell() As Range
    Set ExternalFilePathCell = Me.Range("ExternalFilePath")
End Property
</code></pre>

<hr>

<h2>FillingBatchLoad</h2>

<p>Again I like the use of constants but <code>numberRowsBeforeRecordsClassificationWorksheet</code> is 46 characters.<br>
<code>loopCounter</code> is also too long for my taste.    Using a single letter for the counter name will suffice when there is only one loop.  There isn't really even a need for the loop.  </p>

<p>I would have refactored this sub but the range rely on the code below taken from a separate sub.   There are much better ways to define ranges.   </p>

<blockquote>
<pre><code>Set recordRange = ThisWorkbook.Worksheets(1).Range("B9:B59")
recordAmount = Application.WorksheetFunction.CountA(recordRange)
</code></pre>
</blockquote>
    </div>