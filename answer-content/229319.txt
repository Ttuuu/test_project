<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Numpy is your best friend.</h1>

<p>Given your comment:</p>

<blockquote>
  <p>The tuples are produced by "color scheme" functions. The functions take the (real, imaginary) coordinates of the pixel and how many iterations it took that pixel to fail, and return a three-tuple. They could return anything to indicate the color (that code is completely in my control), I just thought a three-tuple would by simplest. In theory, I could expect the functions to directly return a hex string, but that's just kicking the can down the road a bit since they need to be able to generate the string somehow.</p>
</blockquote>

<p>Create a <a href="https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html" rel="nofollow noreferrer">numpy</a> array for the image you're going to create, then just assign your values into the array directly. Something like this:</p>

<pre class="lang-py prettyprint-override"><code>import numpy as np

image = np.empty(shape=(final_image.ysize, final_image.xsize, 3), dtype=np.uint8)

# And instead of calling a function, assign to the array simply like:
image[x_coor, y_coor] = color_tuple

# Or if you really need a function:
image.__setitem__((x_coor, y_coor), color_tuple)  # I haven't tested this with numpy, but something like it should work.
</code></pre>

<p>You do need to make sure that your arrays are in the same shape as tkinter expects it's images, though. And if you can make another shortcut to put the data into the array sooner, take it.</p>

<p>If you're doing an action this often, then you need to cut out function calls and such as often as you can. If possible, make the slice assignments bigger to set area's at the same time.</p>
    </div>