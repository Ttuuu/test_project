<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>for</code></h2>

<pre><code>size_t iterator = 0;
while (iterator &lt; size) {
        printf("0x%02x ", buffer[iterator++]);
        if (iterator % 0x10 == 0)
        {
                printf("\n");
        }
}
</code></pre>

<p>should use a <code>for</code> loop:</p>

<pre><code>for (size_t i = 0; i &lt; size; i++) {
        printf("0x%02X", buffer[i]);
        if ((i + 1) % 16)
                putchar(' ');
        else
                putchar('\n');
}
</code></pre>

<p>Note that I also removed the trailing space, which was unneeded.</p>

<p>Also note that I used uppercase for the hex number to differentiate it from the <code>0x</code> prefix.</p>

<hr>

<h2><code>const</code></h2>

<p>Functions that accept a pointer but are not going to modify it's contents should note this, to allow some optimizations, and as documentation:</p>

<pre><code>static size_t nj_sizeof(const nj_header *msg)
</code></pre>

<hr>

<h2><code>typedef</code></h2>

<p>I would advise to differentiate <code>typedef</code> names from any other name, so that when I read the code it is visually clear that it's a type, and not the name of a variable or function.</p>

<p>Being <code>typedef</code>s to <code>struct</code> I would add the suffix <code>_s</code>:</p>

<pre><code>struct My_Struct {
        int a;
};
typedef struct My_Struct my_struct_s;
</code></pre>

<p>However, I wouldn't even typedef. It just hides the information that the type is a <code>struct</code>, which I prefer to know even if I write 5 extra characters</p>

<hr>

<h2><code>ARRAY_SIZE()</code></h2>

<p>I recently found an interesting thing:</p>

<p>Consider your line <code>strncpy(login_request.username, "joe", sizeof(login_request.username));</code></p>

<p>It's obvious that you know that <code>login_request.username</code> is a <code>char []</code>, but let's imagine that some day you (or worse, someone else that doesn't have the same knowledge of the program as you) change it to be a <code>char *</code>.  That line of the <code>strncpy</code> will probably get unnoticed, but will produce a wrong result.</p>

<p>Solution:  Use the following:</p>

<pre><code>#define ARRAY_SIZE(a)   (sizeof(a) / sizeof((a)[0]))

strncpy(login_request.username, "joe", ARRAY_SIZE(login_request.username));
</code></pre>

<p>If the array changes to a pointer, it will be noticed by the compiler (at least on a decent compiler).  On GCC this is a warning:  <code>-Wsizeof-pointer-div</code> (GCC 8 has it enabled in <code>-Wall</code>. It's a very recent warning, and don't expect to have it in old GCC versions).</p>
    </div>