<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prefer references</h1>

<p>Throughout your code you use <code>vector*</code> or <code>queen_t*</code>. Not once do you check whether they are <code>nullptr</code>. Prefer references instead of pointers, e.g.</p>

<pre><code>bool diagonal_slope(const queen_t &amp;first_queen, const queen_t &amp;second_queen){

    if (first_queen.x == 0 || second_queen.x == 0){
        return false;
    }

    return std::abs(second_queen.y - first_queen.y) == abs(second_queen.x - first_queen.x);
}
</code></pre>

<p>In <code>validate_and_continue</code>, you can simply copy your <code>std::set</code>s.</p>

<h1>Don't use an underscore on global scope names</h1>

<p>An underscore at the start of an identifier at global scope is <a href="https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">reserved and yields undefined behaviour</a>.</p>

<p>Also, <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-in-c-considered-bad-practice"><code>using namespace std;</code> is considered bad practice</a>.</p>

<h1>Prefer range-based <code>for</code>-loops over <code>for_each</code></h1>

<p>Your <code>for_each</code> loop is not really easy too the eye:</p>

<pre><code>        for_each(avail_x-&gt;begin(), avail_x-&gt;end(), [&amp;](const uint8_t cur_x) {
            validate_and_continue(board, avail_x, avail_y,
                cur_iteration, {cur_x, (uint8_t)cur_iteration}, {});
        });
</code></pre>

<p>The range-based for loop which does the same doesn't need a lambda:</p>

<pre><code>        for(auto cur_x : avail_x) {
            validate_and_continue(board, avail_x, avail_y,
                cur_iteration, {cur_x, (uint8_t)cur_iteration}, {});
        }
</code></pre>

<h1>Prefer <code>const(expr) &lt;integral type&gt;</code> over <code>#define</code></h1>

<p>You currently define <code>BOARD_SIZE</code> as a macro:</p>

<pre><code>#define BOARD_SIZE 8
</code></pre>

<p>This will replace <code>BOARD_SIZE</code> by 8 in your code, which is still better than a stray magic number. However, it can hinder debugging in some cases and doesn't provide a type to 8. Prefer a <code>constexpr</code> or a <code>const</code>, see <a href="https://stackoverflow.com/questions/4748083/when-should-you-use-constexpr-capability-in-c11">here</a> and <a href="https://stackoverflow.com/questions/14041453/why-are-preprocessor-macros-evil-and-what-are-the-alternatives">here</a>:</p>

<pre><code>const uint16_t BOARD_SIZE = 8;
</code></pre>

<h1>Other remarks</h1>

<h2>For loop parts can be empty</h2>

<p>If you don't need to initialize something, just leave the initialization expression empty, or fill it with something useful:</p>

<pre><code>// Do not
for (queens_to_add; queens_to_add &lt;= min(queens_left, (uint16_t)2); queens_to_add ++) 

// Do
for (; queens_to_add &lt;= min(queens_left, (uint16_t)2); queens_to_add ++) 
</code></pre>

<p>Although note that you <em>might</em> call <code>min</code> in every iteration.</p>

<h2>Documentation</h2>

<p>If you want to follow a documentation quasi-standard, use <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">doxygen</a>. Also make sure to write down how your algorithm works, and why you use the variables you do. For example, why do you use <code>avail_x</code> and <code>avail_y</code>?</p>

<h2>Global variables</h2>

<p>Try to get rid of global variables. They make testing your functions <em>a lot</em> harder. If you want to know the number of recursions, either tag them along, or have <code>recurse</code> and <code>validate_and_continue</code> return the number of recursions.</p>

<h2>Add missing includes</h2>

<p>You're currently missing <code>&lt;vector&gt;</code> and <code>&lt;ctime&gt;</code>, as well as some others.</p>

<h2>Better representation</h2>

<p>For each row in a board, you only need to know the column of a queen in that board, e.g.</p>

<pre><code>std::vector&lt;unsigned&gt; board = {1, 3, 0, 2};

// .Q..
// ...Q
// Q...
// ..Q.
</code></pre>

<p>Therefore, a <code>std::vector&lt;unsigned&gt;</code> is enough to store the location of the queens. The y-position is the index of your vector.</p>
    </div>