<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>cs50.h?</h2>

<p>This seems less like a set of "training wheels" and more like a bicycle for fish. It's potentially confusing, opaque, and doesn't seem all that useful. If I were you, I'd be learning how to code in real C - using <code>char*</code>, and <code>bool</code> from <code>stdbool.h</code>.</p>

<h2>Don't store things that should be computed</h2>

<p>Your <code>string alphabet</code> shouldn't exist. Just iterate a <code>char</code> between a-z and A-Z. Characters can be incremented the same way that integers can.</p>

<h2>Input validation</h2>

<p>It seems like you expect <code>hash</code> to be two characters long, but you don't check that. You should be checking it with <code>strlen</code>; then you can issue <code>memcpy</code> without later setting a null terminator, as it'll be null-terminated already.</p>

<h2>DRY</h2>

<p>Don't repeat yourself. This is the most important aspect of the program that needs improvement. This block:</p>

<pre><code>                for(int m = 0; m &lt; alphabet_len; m++)
                {
                    password[4] = alphabet[m];
                    if(!strcmp(hash, crypt(password, salt)))
                    {
                        flag = true;
                        break;
                    }
                }
                if(flag)
                    break;
</code></pre>

<p>is repeated nearly verbatim five times. There are many different ways to condense this. The easiest is probably a recursive function that calls itself with an increasing depth integer. This may actually decrease the performance of the application, but that's up to you to test. There are also ways to rewrite this loop to have state so that neither copy-and-paste nor recursion are necessary; you'll probably want to compare such a method against a recursive method to see which is more performant and clean.</p>
    </div>