<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Martin has given you a good review of the sort code itself; I'll not repeat that.  Instead, I'll look at the example usage code, and see how we can adapt that to be a more rigorous test of the functionality.</p>

<p>Firstly, although the visual comparison can be helpful when debugging, it can be tedious to have to inspect the results every time you make changes.  Instead, we can make the program self-checking: exit with a success (zero) status if the tests pass, and a non-zero (error) status if any fail:</p>

<pre><code>return !std::is_sorted(test_collection.begin(), test_collection.end());
</code></pre>

<p>Another inconvenience is that we must edit the program's source to test each algorithm.  It would be helpful if a single program would test all three algorithms in one run.  Let's write a helper function to do the repetitive parts, and allow us to re-use the same starting position for each sort:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;

template&lt;class RandomAccessIterator,
         class Comparator = std::less&lt;typename std::iterator_traits&lt;RandomAccessIterator&gt;::value_type&gt;&gt;
bool is_sort_correct(RandomAccessIterator a, RandomAccessIterator b,
                     std::function&lt;void(RandomAccessIterator,RandomAccessIterator, Comparator)&gt; sort,
                     Comparator cmp = Comparator())
{
    sort(a, b, cmp);
    return std::is_sorted(a, b, cmp);
}

int main()
{
    const std::array&lt;int,11&gt; test_collection{ 2, 97, 849, 38, 2, 13, 17, 2, 2, 22, 9 };
    using Iter = typename decltype(test_collection)::iterator;

    auto failure_count = 0u;

    {
        auto result_vector = test_collection;
        failure_count += !is_sort_correct(result_vector.begin(), result_vector.end(), bruglesco::bubble_sort&lt;Iter&gt;);
    }

    {
        auto result_vector = test_collection;
        failure_count += !is_sort_correct(result_vector.begin(), result_vector.end(), bruglesco::merge_sort&lt;Iter&gt;);
    }

    {
        auto result_vector = test_collection;
        failure_count += !is_sort_correct(result_vector.begin(), result_vector.end(), bruglesco::selection_sort&lt;Iter&gt;);
    }

    return failure_count &gt; 0;
}
</code></pre>

<p>It's about this point that we might want to consider moving to a unit-test framework (there are several to choose from).  This helps in several ways; the most useful to me are</p>

<ul>
<li>improved diagnostics when tests fail (e.g. showing expected and actual values of compared expressions)</li>
<li>ability to run the same tests many times on different data, and the same data through different tests</li>
</ul>

<p>At this point, one could add further tests - I'd recommend adding tests of using a non-default comparator argument, and sorting collections of user-defined types.  (We'll need a user-defined type anyway, if we want to test the stability of the sort).</p>
    </div>