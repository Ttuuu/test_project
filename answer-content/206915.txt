<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot of code here to review, so this is likely not going to be a complete review.</p>

<h1>Data access</h1>

<p>I'll start with one of your questions:</p>

<blockquote>
  <p>Is there a convenient way to get a single function that allows to set/get with a single function?</p>
</blockquote>

<p>As I understand this question (and what I was getting at in the comments) is that you want to get and set elements of the matrix with one function. Currently you have these:</p>

<pre><code>T at(const std::size_t &amp;, const std::size_t &amp;) const;
void at(const std::size_t &amp;, const std::size_t &amp;, const T &amp;);
</code></pre>

<p>I would write these instead:</p>

<pre><code>T&amp; at(std::size_t i, std::size_t j);
T at(std::size_t i, std::size_t j) const;
</code></pre>

<p>The first, non-const version of this function can be used to both get and set the value:</p>

<pre><code>Matrix&lt;double&gt; A(...);
double a = A.at(2,3);
A.at(2,3) = 3.14159;
</code></pre>

<p>The const version will be used for const matrices:</p>

<pre><code>void myFunction(Matrix&lt;double&gt; const&amp; B) {
   double b = B.at(2,3);
   //B.at(2,3) = 3.14159; // does not compile, B is const
}
</code></pre>

<p>You currently have a function to completely replace the data (<code>set</code>), but none to retrieve the data. Maybe you were asking about this in your question. Indeed, that is harder to do in a nice way. One approach could be a function <code>gut</code> that moves the array out of your matrix and leaves it in an empty state:</p>

<pre><code>std::vector&lt;T&gt; gut() {
   std::vector&lt;T&gt; out;
   std::swap(out, data);
   rows = cols = 0;
   return out;       
}
</code></pre>

<h1>Constructors</h1>

<p>I would suggest you add a constructor that does not require a <code>std::vector</code> be given:</p>

<pre><code>Matrix(std::size_t rows, std::size_t cols);
</code></pre>

<p>Your <code>set</code> method is not much more than a constructor. This call:</p>

<pre><code>Matrix&lt;double&gt; A(...);
std::vector v(...);

A.set(v, ...);
</code></pre>

<p>is functionally identical to:</p>

<pre><code>A = Matrix&lt;double&gt;(v, ...);
</code></pre>

<p>In the case of very large matrices, the additional allocation might be problematic, I don't know. But the <code>set</code> method potentially does a <em>lot</em> of allocations. You need to add a <code>data.reserve(elements.size())</code> in there.</p>

<h1>Function arguments</h1>

<blockquote>
  <p>Are there any suggestions regarding member function parameters?</p>
</blockquote>

<p>You have some places where you take <code>std::size</code> by value, and some places where you take it by const reference. A scalar value like that is never efficient to take by reference. These should all be by value.</p>

<h1>Operators</h1>

<p>I'm not very excited about the idea to (ab)use <code>~</code> as the transpose operator, but I guess it can work. In general, I advice against using operators in a non-standard way, unless in the domain of application the operator would not be surprising. But in this case, <code>~</code> being a bit-wise operator that is not often used, it might not hurt a lot. C++ itself abuses <code>&lt;&lt;</code> and <code>&gt;&gt;</code> as stream operators, whereas they originally were bitwise shift operators.</p>

<p>You should implement your arithmetic operators in terms of compound assignment operators. For example:</p>

<pre><code>template &lt;typename T&gt;
Matrix&lt;T&gt;&amp; Matrix&lt;T&gt;::operator+=(const Matrix&lt;T&gt; &amp; rhs) {
   if(rows != rhs.rows || cols != rhs.cols) {
      throw std::invalid_argument("matrices of unequal dimension");
   }

   std::vector&lt;T&gt; vec;
   for(unsigned int i = 0; i &lt; data.size(); i++) {
      data[i] += rhs.data[i];
   }

   return *this;
}
</code></pre>

<p>could be more simply written as a free function (i.e. not a member function):</p>

<pre><code>Matrix&lt;T&gt;  operator+(Matrix&lt;T&gt; lhs, Matrix&lt;T&gt; const&amp; rhs) {
   lhs += rhs;
   return lhs;
}
</code></pre>

<p>Note that we take <code>lhs</code> by copy. This copy will be our new, output matrix. We use <code>+=</code> to implement the logic. This avoids code duplication.</p>

<p>Note that in the implementation of <code>+=</code>, and in many other places, you should tell the compiler what size the output data vector will be:</p>

<pre><code>std::vector&lt;T&gt; vec;
for(unsigned int i = 0; i &lt; data.size(); i++) {
   vec.push_back(data[i] + rhs.data[i]);
}
</code></pre>

<p>can be more efficiently written as:</p>

<pre><code>std::vector&lt;T&gt; vec;
vec.reserve(data.size());
for(unsigned int i = 0; i &lt; data.size(); i++) {
   vec.push_back(data[i] + rhs.data[i]);
}
</code></pre>

<p>or:</p>

<pre><code>std::vector&lt;T&gt; vec(data.size());
for(unsigned int i = 0; i &lt; data.size(); i++) {
   vec[i] = data[i] + rhs.data[i];
}
</code></pre>

<h1>Other things</h1>

<p>In C++, it is considered best practice to put the <code>const</code> modifier <em>after</em> the thing it modifies. These things are the same:</p>

<pre><code>const Type&amp;
Type const&amp;
</code></pre>

<p>However, the second form prevents some errors and misunderstandings when <code>Type</code> is an alias. I would advice you get used to writing <code>Matrix const&amp;</code>.</p>

<p>Your <code>Matrix</code> class would be more portable if it were declared inside a namespace. If I write a library using your <code>Matrix</code> class, and someone else writes a different library using a different <code>Matrix</code> class (it's not like "matrix" is not a common name, so this is actually likely!) then these two libraries can never be used together in the same program. Using namespaces this is easily solved.</p>
    </div>