<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You probably should replace <code>**kwargs</code> in <code>__init__</code> with <code>precision=10**10</code>:</p>

<pre><code>def __init__(self, *args, precision=10**10):
    self.precision = precision
    self.set_precision(precision)  # not self._precision
</code></pre>

<p>and remove last huge block of  <code>__init__</code> that validates <code>kwargs</code></p>

<p>The way you implement <code>__iter__</code> has following disadvantage:</p>

<pre><code>r = FloatRange(1., 2., 0.3)
iterator1 = iter(r)
iterator2 = iter(r)
assert next(iterator1) == 1.0
assert next(iterator2) == 1.3
iterator3 = iter(r)
assert next(iterator3) == 1.6
</code></pre>

<p>If you run the same code with built-in python <code>range</code> iterator2 and iterator3 will produce original sequence, not empty. You probably should remove <code>__next__</code> method and return generator in  <code>__iter__</code>:</p>

<pre><code>def __iter__(self):
    output = self.start
    while (self.step &gt; 0) == (output &lt; self.stop) and output != self.stop:
        yield output
        output += self.step
</code></pre>
    </div>