<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can be vastly simplified using a handful of tricks from functional programming. Let's first consider the operations you want to perform, given a collection of students, metrics and stats.</p>

<ol>
<li>Extract the metrics you're interested in from the students. 
In SQL this would be equivalent to a <code>SELECT</code> clause.</li>
<li>Perform the calculations for each of the statistics you want on the metrics you obtained.</li>
<li>Return a <code>Result</code> for each combination of metrics and stats with the calculated value.</li>
</ol>

<p>Right now performing the calculation is something that <code>calcStatValue</code> knows about. This makes it a bit annoying to add an additional statistic like MEDIAN, because you need to track down the switch-case statement. </p>

<p>To avoid this, the calculation should be the responsibility of the statistic itself. Given that you can have members on Enums, the following should work:</p>

<pre class="lang-java prettyprint-override"><code>public enum Statistic {
    MIN(values -&gt; Collections.min(values)),
    MAX(values -&gt; Collections.max(values)),
    AVERAGE(values -&gt; values.stream().mapToDouble(v -&gt; v).average().orElse(0.0));

    private final Function&lt;Collection&lt;Double&gt;, Double&gt; aggregator;

    private Statistic(Function&lt;Collection&lt;Double&gt;, Double&gt; aggregator) {
        this.aggregator = aggregator;
    }

    public double performStatOperation(Collection&lt;Double&gt; values) {
        return aggregator.apply(values);
    }
}
</code></pre>

<p>The rest of my suggestions basically boils down to some minor changes:</p>

<ul>
<li>If you preinitialize the size of <code>results</code> in <code>analyze</code>, you should use the actual number of slots you'll be using with <code>new ArrayList&lt;&gt;(metrics.size() * stats.size())</code>.</li>
<li>You don't gain significant benefits from converting the <code>List</code> parameters to <code>HashSet</code>s. If you want to force uniqueness in the implementation, you really should be communicating that in the public API of your class by only accepting Sets in the first place.</li>
<li><p><code>calcStatValue</code> can be simplified using streams:</p>

<pre><code>return stat.performStatOperation(students.stream()
  .map(s -&gt; s.getMetric(metric))
  .collect(Collectors.toSet()));
</code></pre></li>
<li>A similar simplification applies to <code>analyze</code>, but I'll not write that out here.</li>
</ul>

<p>Additional remarks:</p>

<ul>
<li>The <code>results.add([..])</code> line in <code>analyze</code> has inconsistent spacing at the parentheses.</li>
<li>Using a specific collection implementation as API (i.e. <code>HashSet</code> as parameter) should be avoided.</li>
<li>The domain model representation sucks. Representing a metric by a String is not a good idea (because tyops), and forcing each metric to be represented in a <code>double</code> is also bad (because non-numeric metrics are a thing). In addition your API currently does not have any way to perform aggregation and analysis operations that do not yield a single result (e.g. histogramming, tallying, ...)</li>
</ul>
    </div>