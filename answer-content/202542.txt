<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try this code:</p>

<pre><code>function transformObject(data) {
  const values = Object.values(data);
  const keys = Object.keys(data);
  const transposed = values[0].map((col, i) =&gt; values.map(row =&gt; row[i]));
  return transposed.map(itemArr =&gt; keys.reduce((acc, key, i) =&gt; ({...acc, [key]: itemArr[i]}), {}));
}
</code></pre>

<p>The idea is to transpose the values 2D array and then map it using reduce for each row. The transposed array will look like:</p>

<pre><code>[
  ["1", "foo", 20, "pluto"],
  ["2", "bar", 30, "mars"],
  ...
]
</code></pre>

<p>This piece of code <code>keys.reduce((acc, key, i) =&gt; ({...acc, [key]: itemArr[i]}), {})</code> is simply zips two arrays: keys and the row from transposed array.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function transformObject(data) {
  const values = Object.values(data);
  const keys = Object.keys(data);
  const transposed = values[0].map((col, i) =&gt; values.map(row =&gt; row[i]));
  return transposed.map(itemArr =&gt; keys.reduce((acc, key, i) =&gt; ({...acc, [key]: itemArr[i]}), {}));
}

console.log(transformObject({
  "id": ["1", "2", "3"],
  "name": ["foo", "bar", "baz"],
  "age": [20, 30, 40 ],
  "location": ["pluto", "mars", "jupiter"],
}));</code></pre>
</div>
</div>

    </div>