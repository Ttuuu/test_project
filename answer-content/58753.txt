<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>To me it looks pretty readable</p>
</blockquote>
<p>To me it doesn't.</p>
<hr>
<h1>Bugs:</h1>
<p>The following method calls <strong>all incorrectly print <code>0</code>:</strong></p>
<pre><code>System.out.println(min(3, 2, 2));
System.out.println(min(3, 3, 3));
System.out.println(min(1, 3, 3));
System.out.println(min(4, 2, 4));
</code></pre>
<p>This is because, when taking a look at your original code, it is overly complicated.</p>
<pre><code>if( a &lt; b &amp;&amp; a &lt; c &amp;&amp; b &lt; c) result = a ;
else if( a &lt; b &amp;&amp; a &lt; c &amp;&amp; b &gt; c) result = a ;
</code></pre>
<p>Does it really matter if <code>b &lt; c</code> or <code>b &gt; c</code>? No, it doesn't here. And if <code>b == c</code> then neither of these current ones would be true which does the <code>return 0</code>. <strong>So that's a giant bug waiting to happen.</strong></p>
<p>So those two first if's should be shortened into:</p>
<pre><code>if (a &lt;= b &amp;&amp; a &lt;= c) return a;
</code></pre>
<p>Note that I'm using <code>&lt;=</code> here so that the case of all three having the same value gets handled correctly. Now also there's an early return so we don't need all these <code>else</code>.</p>
<hr>
<p>If we group the rest of your statements according to what they return, we have for <code>return b</code>:</p>
<pre><code>else if( a &gt; b &amp;&amp; a &lt; c &amp;&amp; b &lt; c) result = b ;
else if( a &gt; b &amp;&amp; b &lt; c &amp;&amp; a &gt; c) result = b ;
</code></pre>
<p>Which, if we always use <code>b</code> as the first operand and completely ignore whether or not <code>a &lt; c</code> or <code>a &gt; c</code> (and again, <code>a == c</code> is not handled here) we get:</p>
<pre><code>if (b &lt;= a &amp;&amp; b &lt;= c) return b;
</code></pre>
<p>Doing the same for <code>c</code>:</p>
<pre><code>if (c &lt;= a &amp;&amp; c &lt;= b) return c;
</code></pre>
<p>As one of <code>a</code>, <code>b</code> or <code>c</code> really <em>has</em> to be smallest, you can throw an exception if neither one of them is:</p>
<pre><code>public static int min(int a, int b, int c) {
     if (a &lt;= b &amp;&amp; a &lt;= c) return a;
     if (b &lt;= a &amp;&amp; b &lt;= c) return b;
     if (c &lt;= a &amp;&amp; c &lt;= b) return c;
     throw new AssertionError("No value is smallest, how did that happen?");
}
</code></pre>
<p>Or, if you don't like that exception:</p>
<pre><code>public static int min(int a, int b, int c) {
     if (a &lt;= b &amp;&amp; a &lt;= c) return a;
     if (b &lt;= a &amp;&amp; b &lt;= c) return b;
     return c;
}
</code></pre>
<p>This is in my opinion <em>significantly</em> better than your original version.</p>
<p>However, I would recommend Pimgd's solution, either an array or using chained <code>Math.min</code>.</p>
    </div>