<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On their own, your <em>combinatorics Iterables</em> look pretty generic.</p>

<ul>
<li>Given that they are <code>Iterable</code>s rather than <code>List</code>s or <code>Collection</code>s, one consideration would be instantiation with an <code>Iterable</code>.</li>
</ul>

<p>Another thing to ponder would be the name <a href="https://docs.python.org/3.4/library/itertools.html#itertools.permutations" rel="nofollow"><em>itertools</em></a>.<br>
Even with "the basic three", this seems to call for common base classes - I gave it a try, without proper attention to other concerns. (One thing I'm never quite comfortable with is visibility: <code>protected</code> exposes quite a lot.) I didn't succeed in integrating Partitions without a second type parameter:</p>

<pre><code>/** several classes for combinatorics */
abstract class Combinics {
 /** Instantiated with a List of elements of type {@code E}, for
  *  one type of aggregation of elements represented as {@code
  *  List&lt;I&gt;} support iteration through all these aggregations.
  * Elements at different positions are considered different. */
    static abstract class Iterable&lt;E, I&gt;
        implements java.lang.Iterable&lt;List&lt;I&gt;&gt; {

        protected final /*E*/Object[] allElements;

        /*final*/ int param;

        public Iterable(List&lt;E&gt; allElements) {
            final int count = allElements.size();
            if (0 == count)
                this.allElements = null;
            else {
            //  E first = allElements.get(0);
                this.allElements = allElements.toArray(
            // off: allElements need not be of uniform type
            //      (E[]) Array.newInstance(first.getClass(), count)
                    );
            }
        }
    }
 /** Instantiated with a List of elements of type {@code E}, for
  *  one type of aggregation of elements represented as {@code
  *  List&lt;I&gt;} support iteration through all these aggregations.
  * Elements at different positions are considered different. */
    static abstract class Iterator&lt;E, I&gt; 
        implements java.util.Iterator&lt;List&lt;I&gt;&gt; {


        final /*E*/Object[] allElements;
        final int[] indices;
    // ArrayList for extended interface - YAGNI?
        ArrayList&lt;I&gt; next;

        @SuppressWarnings("unchecked")
        E get(int index) {
            return (E) allElements[index];
        }

        Iterator(List&lt;? extends E&gt; allElements) {
            this(allElements, allElements.size());
        }

        Iterator(List&lt;? extends E&gt; allElements, int count) {
            indices = new int[count];
            if (0 == count)
                this.allElements = null;
            else {
                E first = allElements.get(0);
                this.allElements = allElements.toArray(
                // slightly off: allElement need not be of uniform type
                    (E[]) java.lang.reflect.Array.newInstance(
                        first.getClass(), count)
                    );
            }
        }

        Iterator(Object[] allElements, int count) {
            indices = new int[count];
            this.allElements = allElements;
        }
        protected int size() { return indices.length; }

        @Override
        public boolean hasNext() {
            return next != null;
        }
    /** for messages and more */// cache? nah...
        protected String singular() {
            String className = getClass().getName();
            int
                lastDot = className.lastIndexOf('.')+1,
                lastIter = className.indexOf("Iter", lastDot);
            if (0 &lt;= ".$".indexOf(className.charAt(lastIter-1)))
                lastIter -= 1;
            return className.substring(lastDot,
                lastIter).toLowerCase();
        }
    /** for messages and more */
        protected String plural() { return singular() + 's'; }

        @Override
        public List&lt;I&gt; next() {
            if (next == null) {
                throw new NoSuchElementException(
                    "No " + plural() + " left.");
            }

            List&lt;I&gt; current = next;
            generateNext();
            return current;
        }
    /** Generates and keeps the next aggregation. */
        abstract void generateNext();
    /** non-public in java.util.Arrays */
        protected static void swap(int[] array, int a, int b) {
            int tmp = array[a];
            array[a] = array[b];
            array[b] = tmp;
        }
    }

 /** Instantiated with a List of elements of type {@code E},
  * for combinations of elements represented as {@code List&lt;E&gt;}
  * support iteration through all these combinations.
  * Elements at different positions are considered different. */
    static abstract class IterElements&lt;T&gt; extends Iterator&lt;T, T&gt; {
        IterElements(List&lt;T&gt; allElements) { super(allElements); }
        IterElements(List&lt;T&gt; allElements, int count) {
            super(allElements, count);
        }
        IterElements(Object[] allElements, int count) {
            super(allElements, count);
        }

        protected void load() {
            next = new ArrayList&lt;&gt;(size());

            for (int i = 0; i &lt; size() ; ++i) {
                next.add(get(indices[i]));
            }
        }
    }

    static void
    demo(int count, Function&lt;List&lt;?&gt;, Iterable&lt;?, ?&gt;&gt; generator) {
        List&lt;String&gt; all = new ArrayList&lt;&gt;(count);
        for (char c = 'A', end = (char) ('A' + count) ; c &lt; end ; c++)
            all.add(String.valueOf(c));

        int row = 1;

        for (List&lt;String&gt; elements : (Iterable&lt;String, String&gt;)
                generator.apply(all))  {
            System.out.printf("%2d: %s\n", row++, elements);
        }
    }
}

/** Instantiated with a List of elements of type {@code E},
 * for combinations of elements represented as {@code List&lt;E&gt;}
 * support iteration through all these combinations.
 * Elements at different positions are considered different. */
public class Combination&lt;E&gt; extends Combinics.Iterable&lt;E, E&gt; {

    public Combination(List&lt;E&gt; allElements, int nElements) {
        super(allElements);
        param = nElements;
    }
    public Combination(List&lt;E&gt; allElements) { this(allElements, -1); }

    @Override
    public java.util.Iterator&lt;List&lt;E&gt;&gt; iterator() {
        return param &lt; 0 ? new Iterator&lt;E&gt;(allElements)
            : new Iterator&lt;E&gt;(allElements, param);
    }
 /** Instantiated with a List of elements of type {@code E},
  * for combinations of elements represented as {@code List&lt;E&gt;}
  * support iteration through all these combinations.
  * Elements at different positions are considered different. */
    static class Iterator&lt;E&gt; extends Combinics.IterElements&lt;E&gt; {
        int currentSize;
        Iterator(List&lt;E&gt; allElements) {
            this(allElements, 1, allElements.size());
        }
        Iterator(List&lt;E&gt; allElements, int count) {
            this(allElements, count, count);
        }
        Iterator(List&lt;E&gt; allElements, int start, int end) {
            super(allElements, end);
            init(start);
        }
        void init(int start) {
            if (0 != indices.length) {
                // Create the first combination.
                currentSize = start;
                next = new ArrayList&lt;&gt;(currentSize);
                for (int i = 0; i &lt; currentSize; ++i)
                    indices[i] = i;
                load();
            }
        }
        Iterator(Object... allElements) {
            this(allElements, 1, allElements.length);
        }
        Iterator(Object[] allElements, int param) {
            this(allElements, param, param);
        }
        Iterator(Object[] allElements, int start, int end) {
            super(allElements, end);
            init(start);
        }
//      @Override
//      protected String singular() { return "combination"; }

        @Override
        protected int size() { return currentSize; }

        @Override
        void generateNext() {
            next = new ArrayList&lt;E&gt;(next); // late?
            if (indices[currentSize - 1] &lt; allElements.length - 1) {
                indices[currentSize - 1]++;
                next.set(currentSize - 1, get(indices[currentSize-1]));
                return;
            }

            for (int i = currentSize - 2; i &gt;= 0; --i) {
                if (indices[i] &lt; indices[i + 1] - 1) {
                    indices[i]++;

                    for (int j = i + 1; j &lt; currentSize; ++j) {
                        indices[j] = indices[j - 1] + 1;
                    }

                    load();
                    return;
                }
            }

            if (indices.length &lt; ++currentSize) {
                next = null;
                return;
            }

            for (int i = 0; i &lt; currentSize; ++i) {
                indices[i] = i;
            }

            load();
        }
    }

    public static void main(String[] args) {
        Combinics.demo(5, (all) -&gt; new Combination&lt;&gt;(all));
        Iterator&lt;String&gt; combinations =
            new Combination.Iterator&lt;String&gt;(
                Arrays.asList("A", "B", "C", "D", "E"), 3);
    // provoke Exception
        for (List&lt;String&gt; combi ;
             null != (combi = combinations.next()) ; ) {
            System.out.println(combi);
        }
    }
}



public class PartitionIterable&lt;E&gt;
    extends Combinics.Iterable&lt;E, List&lt;E&gt;&gt; {

    private final int blocks;

    public PartitionIterable(List&lt;E&gt; allElements, int blocks) {
        super(allElements);
        checkNumberOfBlocks(blocks, allElements.size());
        this.blocks = blocks;
    }

    @Override
    public Iterator&lt;List&lt;List&lt;E&gt;&gt;&gt; iterator() {
        return new PartitionIterator&lt;&gt;(allElements, blocks);
    }

    private void
    checkNumberOfBlocks(int blocks, int numberOfElements) {
        if (blocks &lt; 1) {
            throw new IllegalArgumentException(
                "The number of blocks should be at least 1, received: "
                + blocks);
        }

        if (blocks &gt; numberOfElements) {
            throw new IllegalArgumentException(
                "The number of blocks should be at most "
                + numberOfElements + ", received: " + blocks);
        }   
    }

    private static class PartitionIterator&lt;E&gt; 
        extends Combinics.Iterator&lt;E, List&lt;E&gt;&gt; {

        private final int blocks;

        private final int[] s;
        private final int[] m;
        private final int n;

        PartitionIterator(List&lt;E&gt; allElements, int blocks) {
            super(allElements);
            this.blocks = blocks;
            this.n = allElements.size();

            s = indices;//new int[n];
            m = new int[n];

            if (n != 0) {
                for (int i = n - blocks + 1; i &lt; n; ++i) {
                    s[i] = m[i] = i - n + blocks;
                }

                loadPartition();
            }
        }
        @Override
        protected String singular() { return "partition"; }

        private void loadPartition() {
            next = new ArrayList&lt;&gt;(blocks);

            for (int i = 0; i &lt; blocks; ++i) {
                next.add(new ArrayList&lt;&gt;());
            }

            for (int i = 0; i &lt; n; ++i) {
                next.get(s[i]).add(allElements.get(i));
            }
        }

        @Override
        void generateNext() {
            for (int i = n - 1; i &gt; 0; --i) {
                if (s[i] &lt; blocks - 1 &amp;&amp; s[i] &lt;= m[i - 1]) {
                    s[i]++;
                    m[i] = Math.max(m[i], s[i]);

                    int limit = n - blocks + m[i] + 1;
                    for (int j = i + 1; j &lt; limit; ++j) {
                        s[j] = 0;
                        m[j] = m[i];
                    }

                    for (int j = limit; j &lt; n; ++j) {
                        s[j] = m[j] = blocks - n + j;
                    }

                    loadPartition();
                    return;
                }
            }

            next = null;
        }
    }

    public static void main(String[] args) {
        List&lt;String&gt; list = Arrays.asList("A", "B", "C", "D");
        int row = 1;

        for (int blocks = 1; blocks &lt;= list.size(); ++blocks) {
            for (List&lt;List&lt;String&gt;&gt; partition : 
                    new PartitionIterable&lt;&gt;(list, blocks)) {
                System.out.printf("%2d: %s\n", row++, partition);
            }
        }
    }
}

class PermutationIterable&lt;T&gt;
    extends Combinics.Iterable&lt;T, T&gt; {

    public PermutationIterable(List&lt;T&gt; allElements) {
        super(allElements);
    }

    @Override
    public java.util.Iterator&lt;List&lt;T&gt;&gt; iterator() {
        return new Iterator&lt;&gt;(allElements);
    }

    private static final class Iterator&lt;T&gt;
        extends Combinics.IterElements&lt;T&gt; {

        Iterator(List&lt;T&gt; allElements) {
            super(allElements);
            if (allElements.isEmpty())
                next = null;

            for (int i = 0; i &lt; indices.length; ++i) {
                indices[i] = i;
            }

            next = new ArrayList&lt;&gt;(allElements);
        }
//        @Override
//        protected String singular() { return "permutation"; }

        void generateNext() {
            int i = indices.length - 2;

            while (i &gt;= 0 &amp;&amp; indices[i] &gt; indices[i + 1]) {
                --i;
            }

            if (i == -1) {
                // No more new permutations.
                next = null;
                return;
            }

            int j = i + 1;
            int min = indices[j];
            int minIndex = j;

            while (j &lt; indices.length) {
                if (indices[i] &lt; indices[j] &amp;&amp; indices[j] &lt; min) {
                    min = indices[j];
                    minIndex = j;
                }

                ++j;
            }

            swap(indices, i, minIndex);

            ++i;
            j = indices.length - 1;

            while (i &lt; j) {
                swap(indices, i++, j--);
            }

            load();
        }
    }

    public static void main(final String... args) {
        Combinics.main(4,
            (alphabet) -&gt; new PermutationIterable&lt;&gt;(alphabet));
    }
}
</code></pre>
    </div>