<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><blockquote>
<pre><code>//if I don't write this loop, the 0s get printed as 3452816845....Why???
</code></pre>
</blockquote>

<p>Because <code>malloc</code> doesn't initialize an allocated memory. It contains garbage. You may avoid the explicit loop by using <code>calloc</code>.</p>

<p>As a side note, prefer <code>sizeof(variable)</code> to <code>sizeof(type)</code>, e.g.</p>

<pre><code>board[i] = malloc(sizeof(*board[i]) * sizeOfBoard);
</code></pre>

<p>This way, if you ever change the type of board squares, this line wouldn't change. No double maintenance.</p></li>
<li><p>The code adds queens into the rows sequentially. There is no need to test lower diagonals: there are no queens there yet.</p></li>
<li><p>Working with the entire 2-dimensional board is an overkill. A one-dimensional array of queen files suffices. Besides, testing for placement safety becomes much simpler:</p>

<pre><code>bool is_safe(int * queens, long long row, long long col, long long dim) {
    for (long long rank = 0; rank &lt; row; rank++) {
        if (queens[rank] == col) {
            // Another queen is at this column already
            return false;
        if ((row - rank) == abs(queens[rank] - col)) {
            // A square is under diagonal attack
            return false;
        }
    return true;
}
</code></pre></li>
<li><p>A for having all the solutions, do not break the loop when <code>retVal == 1</code>, and</p>

<pre><code>if (row_index == boardSize) {
    do_something();
    return 1;
}
</code></pre>

<p>where <code>do_something()</code> may print the board, or save the board in a global state, or whatever suites your needs.</p></li>
</ul>
    </div>