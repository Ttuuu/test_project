<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <ol>
  <li>Is my code thread safe? If not, how do I make it thread safe?</li>
  </ol>
</blockquote>

<p>No, of course it's not thread-safe. You don't do anything to make it thread-safe.</p>

<p>A more nuanced answer would be: It's thread-safe as long as you don't use it in an unsafe way. For example, calling <code>Logger::log(FATAL, "hello world")</code> from two different threads concurrently would of course be unsafe. But if your program <em>has</em> only one thread... :)</p>

<p>If you want to allow calling <code>Logger::log</code> from two threads concurrently, you'll have to do something to eliminate the data race on <code>m_logfile</code> which is caused by the two threads' both calling <code>m_logfile &lt;&lt; levels[static_cast&lt;int&gt;(s)]</code> at the same time. For example, you could throw a mutex lock around <code>addLog</code>.</p>

<blockquote>
  <ol start="2">
  <li>Is there a way to make the interface a bit cleaner for use? Right now <code>#define</code> feels a bit hacky.</li>
  </ol>
</blockquote>

<p>The only place you use <code>#define</code> is in <code>#define FATAL Logger::Level::Fatal</code> and so on. (By the way, technically <code>#define ERROR ...</code> triggers undefined behavior, because all macros of the form <code>EXXXX</code> are reserved for use by POSIX error codes.) My question is, if you wanted these values to be referred to as <code>FATAL</code>, <code>ERROR</code>, etc., why didn't you just declare them that way?</p>

<pre><code>inline constexpr int FATAL = 0;
inline constexpr int ERROR = 1;
inline constexpr int WARNING = 2;
// ...
</code></pre>

<p>Or, probably better:</p>

<pre><code>namespace Logger {
    enum Level {
        FATAL, ERROR, WARNING, // ...
    };
}
</code></pre>

<p>Making this an <code>enum</code> (rather than an <code>enum class</code>) allows your user to refer to the enumerators without needing to redundantly name the enum type: just <code>Logger::FATAL</code>, <code>Logger::ERROR</code>, et cetera.</p>

<p>Personally, I would consider writing convenience functions to eliminate the boilerplate:</p>

<pre><code>namespace Logger {
    void log_fatal(const std::string&amp; msg) { log(FATAL, msg); }
    void log_error(const std::string&amp; msg) { log(ERROR, msg); }
    // ...
}
</code></pre>

<hr>

<p>By the way, I think your numbering scheme is backwards. "Level" represents the <em>severity of the message</em>, right? Some messages have higher severity than others? So how would I <em>test</em> whether one message had a higher severity than another? Well, I think I'd write:</p>

<pre><code>if (one_severity &gt; another_severity) ...
</code></pre>

<p>But with the values you gave your enumeration, this is actually going to be completely backwards! And so my code for testing severity levels is going to have a bug (or else I'll catch the bug, but then have to write unintuitive code that uses <code>&lt;</code> to mean "greater than"). So, I recommend switching the values around.</p>

<hr>

<blockquote>
  <ol start="3">
  <li>Is there a way to avoid the use of a global <code>unique_ptr</code>?</li>
  </ol>
</blockquote>

<p>Sure; declare it <code>static</code>! And to make it really non-global, stick it in a function. It'll still have static lifetime, though. There's not much getting around that.</p>

<pre><code>inline Log *get_glog() {
    static std::unique_ptr&lt;Log&gt; glog = std::make_unique&lt;Log&gt;();
    return glog.get();
}

void startLog(const std::string&amp; filepath) {
    Log *glog = get_glog();
    glog-&gt;set_filepath_and_open(filepath);
}
</code></pre>

<hr>

<blockquote>
  <ol start="4">
  <li>Should I just make it a header only library? Is there any benefits in doing so?</li>
  </ol>
</blockquote>

<p>The big benefit of a header-only library is that it's super easy to incorporate into another project â€” the user just drops the header file into his <code>include/</code> directory and he's good to go.</p>

<p><em>Single</em>-header libraries are particularly nice because they can easily be dropped into <a href="https://godbolt.org" rel="noreferrer">Godbolt</a> or <a href="https://wandbox.org" rel="noreferrer">Wandbox</a>.</p>

<p>In your case, the tradeoff is that presumably this header is going to get included all over the place (because logging is ubiquitous), and so the bigger you make it, the more work you're forcing the compiler to do <em>in every translation unit.</em></p>

<hr>

<p>Since you said "C++17", consider rewriting all your <code>void foo(const std::string&amp; s)</code> signatures into <code>void foo(std::string_view sv)</code> signatures. (Yes, <a href="https://quuxplusone.github.io/blog/2018/03/27/string-view-is-a-borrow-type/" rel="noreferrer">pass <code>string_view</code> by value.</a>)</p>
    </div>