<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Passing class fields/properties as <code>ref</code></h1>

<p>You're using <code>ref</code> to pass a variable and update it. </p>

<pre><code>public void SetRound(ref int around)
{
    Console.Write("How many round would you like to play?\t");
    around = Convert.ToInt32(Console.ReadLine());
}
</code></pre>

<p>This is unnecessary, as in all of these occurances, the variables in question are class fields or properties. Instead you can do as follows:</p>

<pre><code>public void SetRound()
{
    Console.Write("How many round would you like to play?\t");
    around = Convert.ToInt32(Console.ReadLine());
}
</code></pre>

<p>The same goes for <code>Match</code>. If you want to be more explicit about updating the class variable, use <code>this.around</code> instead.</p>

<h1>The logic inside match:</h1>

<p>The <code>switch</code> and <code>if</code> statements are pretty ugly and use a lot of common logic. First let's start with changing the strings to an enum:</p>

<pre><code>public enum Choices {
    Rock,
    Paper,
    Scissors
}
</code></pre>

<p>We can then define which choice beats which:</p>

<pre><code>Dictionary&lt;Choices, Choices&gt; Beats = new Dictionary&lt;Choices, Choices&gt; {
    { Choices.Rock, Choices.Scissors },
    { Choices.Scissors, Choices.Paper },
    { Choices.Paper, Choices.Rock }
};
</code></pre>

<p>We can then define an enum based on who has won that round:</p>

<pre><code>public enum WhoWins {
    User,
    Com,
    Draw
}
</code></pre>

<p>Then the method becomes:</p>

<pre><code>public WhoWins Match(Choices userChoice) {
    Choices comChoice = (Choices)rnd.Next(0, 3);

    if(comChoice == userChoice) {
        return WhoWins.Draw;
    } else if (Beats[userChoice] == comChoice) {
        return WhoWins.User;
    } else {
        return WhoWins.Com;
    }
}
</code></pre>

<p>First you can check for draws simply by comparing the two choices. Then you can use the defined dictionary to see if the choices match. By exhaustion, if they don't match, that means that the user lost.</p>

<p>This way, the game is quite easily extendible to more choices, like <code>Lizard</code> or <code>Spock</code>, simply by increasing the values in the dictionary.</p>
    </div>