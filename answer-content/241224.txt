<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It turns out that my script had an error, hence the ridiculously long runtime. After fixing the error, runtime is shortened, but the code itself is still inefficient. The real problem is in <code>Nstat</code> - The row-based computation is both CPU and memory-inefficient. For those interested, <a href="https://ys-l.github.io/posts/2015/08/28/how-not-to-use-pandas-apply/" rel="nofollow noreferrer">read this</a>.</p>

<p>Thanks to @Juho, I removed <code>Nstat</code> and switched to agg. Runtime is reduced by more than half!</p>

<pre><code>        #prescreening by RH&gt;90%
        isd.loc[ isd.RH&gt;90, 'MW'] = 0
        isd.loc[ isd.RH&gt;90, 'PW'] = 0

        stn_month = isd.groupby(['STATION',isd.DATE.dt.to_period('M')]).agg(
            NMW=('MW','count'),\
            NPW=('PW','count'),\
            NDU=('MW',lambda x: x.isin(duMW).sum()),\
            NDU6=('MW',lambda x: x.eq(6).sum()),\
            NDU7=('MW',lambda x: x.eq(7).sum()),\
            NDU8=('MW',lambda x: x.eq(8).sum()),\
            NDU9=('MW',lambda x: x.eq(9).sum()),\
            NDU30=('MW',lambda x: x.eq(30).sum()),\
            NDU31=('MW',lambda x: x.eq(31).sum()),\
            NDU32=('MW',lambda x: x.eq(32).sum()),\
            NDU33=('MW',lambda x: x.eq(33).sum()),\
            NDU34=('MW',lambda x: x.eq(34).sum()),\
            NDU35=('MW',lambda x: x.eq(35).sum()),\
            NDU98=('MW',lambda x: x.eq(98).sum()),\
            NDUPW=('PW',lambda x: x.eq(3).sum()),\
            VIS=('VIS',lambda x: hmean(x[x&gt;0])),\
            Vi=('Vi','mean'),\
            DUP=('DUP','mean')\
            ).reset_index().astype(dTypes)

stn_month.to_csv('../stat/yearly/stn_all/stn_month_{:d}.csv'.format(yr),index=False,float_format='%.3f')
</code></pre>
    </div>