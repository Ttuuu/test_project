<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're using Boost, one readable solution is:</p>

<pre><code>#include &lt;boost/algorithm/string/split.hpp&gt;
#include &lt;boost/algorithm/string/join.hpp&gt;
#include &lt;boost/algorithm/string/classification.hpp&gt;

std::string reverseHost(const std::string&amp; host)
{
    std::vector&lt;std::string&gt; parts;
    boost::algorithm::split(parts, host, boost::is_any_of("."));
    std::reverse(parts.begin(), parts.end());

    return boost::algorithm::join(parts, ".");
}
</code></pre>

<p>In short, we split the input into parts using dot as a delimiter, reverse them, and join in reverse order.</p>

<p>However, this is not designed with performance in mind. A faster alternative is likely the following:</p>

<pre><code>std::string reverseHost(const std::string&amp; str)
{
    std::string rev(str.crbegin(), str.crend());
    const std::size_t len = rev.size();

    for (std::size_t j, i = 0; i &lt; len; ++i)
    {
        j = i;

        while ((i &lt; len) &amp;&amp; (rev[i] != '.'))
            ++i;

        std::reverse(rev.begin() + j, rev.begin() + i);
    }

    return rev;
}
</code></pre>
    </div>