<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<ul>
<li>Even though this is only an example application you should use proper names
<code>public class Main</code> could have a far better name, maybe think of <code>public class ExerciseObjectManipulation</code>. You can find such classes later much easier in your SCM</li>
<li>Avoid redundancy in your variables, for example <code>Account.accountName</code> and <code>Account.accountBal</code>. That gives you the chance for proper naming of <code>Account.accountBal</code> into <code>Account.balance</code> (also: avoid abbreviations in namings)</li>
<li>same applies for these method names <code>getAccountName</code>and <code>getAccountBal</code></li>
</ul>

<h2>Seperation of concerns</h2>

<ul>
<li>your main method is responisble for printing, inputhandling and program flow - maybe you could use separate methods (or even: separate objects) for these responsibilities? Did you realize that you already started doing that by creating a methode <code>printMainMenu()</code> i'm sure you could find some more responsibilities for a <code>class Printer</code>?!!</li>
<li>provide a Constructor for <code>Account</code> without balance <code>public Account(String name, double balance) { this(name,0);}</code> to create Accounts without balance.</li>
</ul>

<h2>error handling</h2>

<ul>
<li>it's nice that you write your concerns into the <code>System.out</code> (even if it would be more approperiate to write to <code>System.error</code> - but the proper way to do it would be to throw an <code>Exception</code>! right now it is possible to create an <code>Account</code> with negative balance even if then not all attributes are set - this is terrible, you create an unfinished object!</li>
</ul>

<p>.</p>

<pre><code>public Account(String name, double balance) {
    if(accountBal &lt; 0) {
        throw new IllegalArgumentException("Starting balance cannot be less than zero");
    }
    this.name = name;
    this.balance = balance;
}
</code></pre>

<ul>
<li>use this approach for any invalid parameters you get, see <code>transferFunds()</code>, see <code>addFunds()</code></li>
</ul>

<h2>logic flaws</h2>

<pre><code>if(deposit &lt; 0){
    System.out.println("Amount deposited must be greater than zero.");
}
</code></pre>

<p>either <code>deposit &lt;= 0</code> or <code>cannot be less than zero.</code></p>

<p>same here: <code>if(withdrawal &lt; 0)</code></p>
    </div>