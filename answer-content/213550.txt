<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is <em>wide open</em> to <a href="https://en.wikipedia.org/wiki/SQL_injection" rel="nofollow noreferrer">SQL Injection</a> which is the <a href="https://www.synopsys.com/blogs/software-security/owasp-top-10-application-security-risks/" rel="nofollow noreferrer">most dangerous web vulnerability</a>. This occurs when you execute SQL queries with unsanitized user data. By placing the raw <code>$_POST</code> variable directly in your query you are allowing an attacker to inject their own SQL into your query and execute it. They can do anything from stealing data to deleting your database.</p>

<p>To combat this you must use parameterized queries. <a href="https://stackoverflow.com/q/60174/250259">Stack Overflow</a> covers this very well but here's what your code would like if you use <code>mysqli</code> with prepared statements:</p>

<pre><code>$stmt = $dbConnection-&gt;prepare('SELECT * FROM users WHERE email = ?');
$stmt-&gt;bind_param('s', $email); // 's' specifies the variable type =&gt; 'string'

$stmt-&gt;execute();

$result = $stmt-&gt;get_result();
$row = $result-&gt;fetch_assoc();
</code></pre>

<p>You also are wide open to Cross-site scripting (XSS) attacks which is the #7 web vulnerability. This occurs because you take raw <code>$_POST</code> data and output it directly into your HTML. An attacker can place malicious code in this value and attack your users and site once it is rendered by the browser.</p>

<p>When outputting user data, always escape that data. <a href="https://stackoverflow.com/q/1996122/250259">Stack Overflow</a> covers this as well. In PHP you can do this by using <a href="http://php.net/manual/en/function.htmlspecialchars.php" rel="nofollow noreferrer"><code>htmlspecialchars()</code></a>.</p>

<pre><code>&lt;?= htmlspecialchars($msg, ENT_QUOTES, 'UTF-8'); ?&gt;
</code></pre>

<p>You will notice that the one <code>$_POST</code> variable, <code>$_POST['email']</code>, has left your site wide open to attack. Before you even attempt to use it you should validate it indeed is a valid email address. If it is not, you should report an error and not attempt to use it as it obviously is invalid and useless anyway.</p>

<p>PHP offers an easy way to validate an email addresses. <a href="http://php.net/manual/en/function.filter-var.php" rel="nofollow noreferrer"><code>filter_var()</code></a> with the <code>FILTER_VALIDATE_EMAIL</code> flag will validate <a href="http://php.net/manual/en/filter.examples.validation.php" rel="nofollow noreferrer">if an email address is valid</a>. </p>

<pre><code>$email = $_POST['email'];
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    // email is invalid. report error and abort.
}
</code></pre>

<p>On a different note, you start your script off by checking to see if a user is an admin. If they are not you use <code>header()</code> to do a redirect away from that page. That's usually okay but you should follow it with a call to <code>exit()</code> to ensure the script stops executing. If not, the code below may still execute and, combined with other vulnerabilities in the page, leave you open to attack.</p>

<pre><code>if ($_SESSION['admin'] !== true) {
    header('Location: /login.php?');
    exit;
}
</code></pre>
    </div>