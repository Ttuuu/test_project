<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For your current code, the more Ruby-esque and functional way to write it would be:</p>

<pre><code>def counts(numbers, maxima)
  maxima.map do |max|
    numbers.count { |n| n &lt;= max }
  end
end
</code></pre>

<p>Don't mess around with "manual" counting and array-appending when you don't have to.</p>

<p>As for general improvements:</p>

<p>Sort the numbers. If you sort them, you won't have to loop through the whole array, you just have to count up to the first case where the comparison returns false. Or you can use <a href="https://ruby-doc.org/core-2.4.0/Array.html#method-i-bsearch_index" rel="noreferrer"><code>Array#bsearch_index</code></a> to find the "split point" in \$O(\log n)\$ time. Better yet, invert the condition and the index you find is also the count you want:</p>

<pre><code>def counts(numbers, maxima)
  sorted = numbers.sort
  maxima.map do |max|
    index = sorted.bsearch_index { |n| n &gt; max } # note inverted condition
    index || sorted.size
  end
end
</code></pre>

<p>The above works because it's using <code>#bsearch_index</code> in its "find minimum" mode (i.e. find the <em>first</em> index for which the block returns <code>true</code>), but since the condition is flipped it'll find the first number that <em>shouldn't</em> be counted. And that number's index equals the count of the elements before it. E.g. using your example input, what happens is:</p>

<ul>
<li>The numbers get sorted <code>[2, 10, 5, 4, 8] =&gt; [1, 4, 5, 8, 10]</code></li>
<li>For a given maximum, we do a binary search for the index</li>
<li>If the maximum is, say, 7, we'll find index 3 (value 8), since that's the first place where <code>n &gt; max</code> (i.e. <code>8 &gt; 7</code>).</li>
<li>And since indices are zero-based, 3 is also the total/count we want.</li>
</ul>

<p>You can also sort the maxima array from high to low. Start with the highest maximum, and filter the numbers array to only include those that fit the <code>n &lt;= max</code> condition. The length of the filtered array is the first count. To find the next count, we only need to find a subset of the filtered array because a lower maximum will always result in a smaller array and a lower count. And so on for the next, smaller, maximum. It's a bit trickier, since you still need to output the totals in the original (unsorted) order.</p>

<pre><code>def counts(numbers, maxima)
  # create an array of [value, index] tuples, sorted (descending) by value
  pairs = maxima.each_with_index.sort_by(&amp;:first).reverse

  result = pairs.each_with_object({numbers: numbers, counts: []}) do |(max, index), memo|
    memo[:numbers].select! { |n| n &lt;= max } # note in-place modification
    memo[:counts] &lt;&lt; [memo[:numbers].size, index]
  end

  # re-sort the counts so they match the original order
  result[:counts].sort_by(&amp;:last).map(&amp;:first)
end
</code></pre>

<p>which could also be written as:</p>

<pre><code>def counts(numbers, maxima)
  pairs = maxima.each_with_index.sort_by(&amp;:first).reverse

  # create a copy, since we'll be modifying it
  search_space = numbers.dup

  counts = pairs.map do |max, index|
    search_space.select! { |n| n &lt;= max } # note in-place modification
    [search_space.size, index]
  end

  counts.sort_by(&amp;:last).map(&amp;:first)
end
</code></pre>

<p>Or you can do everything: Sort both numbers and maxima, and use <code>bsearch_index</code> to figure out where to split the numbers array instead of <code>select!</code>. However, all that sorting and extra busywork might end up being slow.</p>

<pre><code>def counts(numbers, maxima)
  pairs = maxima.each_with_index.sort_by(&amp;:first).reverse
  search_space = numbers.sort

  result = pairs.each_with_object({search_space: search_space, counts: []}) do |(max, index), memo|
    count = memo[:search_space].bsearch_index { |n| n &gt; max }
    count ||= memo[:search_space].size
    memo[:search_space].slice!(0, count)
    memo[:counts] &lt;&lt; [count, index]
  end

  result[:counts].sort_by(&amp;:last).map(&amp;:first)
end
</code></pre>

<p>And of course, you can memoize the total for a given maximum, so if you encounter the same maximum twice or more, you can just recall a known count without re-searching an array.</p>
    </div>