<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, there's the obvious stuff, like whitespace and declaring variables at their first point of use. For example:</p>

<pre><code>static void     print_decimal(double decimal, int precision)
{
    size_t  integer;

    while (precision--)
    {
        decimal *= 100.;
        integer = (int)decimal;
</code></pre>

<p>could usefully be rewritten as</p>

<pre><code>static void print_decimal(double decimal, int precision)
{
    while (precision--) {
        decimal *= 100.;
        size_t integer = (int)decimal;
</code></pre>

<p>This spots a bug: you fail to handle negative inputs. If you want <code>integer</code> to hold a signed <code>int</code>, you should define it as <code>int</code> (not <code>size_t</code>); and vice versa, if you want it to hold an unsigned <code>size_t</code>, you should be casting <code>(size_t)decimal</code> (not <code>(int)decimal</code>).</p>

<hr>

<pre><code>    if (!precision  &amp;&amp; (integer % 10) &gt;= 5 &amp;&amp; decimal != (double)integer)
        integer += 10;
</code></pre>

<p>This line could use some comments. I imagine it has something to do with rounding?</p>

<hr>

<pre><code>    printf("%i", integer);
</code></pre>

<p>It's more idiomatic to use <code>printf("%d", integer)</code> to print a decimal integer in C (and C++). True, <code>%i</code> exists, but it's deservedly obscure.</p>

<p>(Also, because of the above bug where you made <code>integer</code> a <code>size_t</code>, down here you should be using <code>%zu</code> to print it. But once you make it an <code>int</code>, you can go back to using <code>%d</code>.)</p>

<p>Every compiler will warn you about the format-string mismatch between <code>%i</code> and <code>size_t</code>. Are you compiling with <code>-Wall</code>? (No.) Why not? (There's no reason not to.) So, start compiling with <code>-Wall</code> today! It'll find your bugs so that you don't have to.</p>

<p>Performance-wise... I conclude from context that you expect this line to only ever print one digit, is that right? That is, your code could benefit from some "design by contract":</p>

<pre><code>    assert(0 &lt;= integer &amp;&amp; integer &lt;= 9);
    printf("%i", integer);
</code></pre>

<p>If the assertion is correct, then we can speed up the code by writing simply</p>

<pre><code>    assert(0 &lt;= integer &amp;&amp; integer &lt;= 9);
    putchar('0' + integer);
</code></pre>

<p>However, by adding the assertion, we have made the code a little bit <em>testable</em>. We can write some simple tests — just loop over all the floating-point numbers in the world and see if any of them fail the assertion — and indeed it doesn't take long to find one that fails.</p>

<pre><code>print_decimal(0.097, 2);
</code></pre>

<p>This prints</p>

<pre><code>010
</code></pre>

<p>when it should actually have printed</p>

<pre><code>10
</code></pre>

<p>according to my understanding of your intent.</p>

<hr>

<p>Which reminds me: <code>print_decimal</code> is a weird name for this function, since it literally does not have the ability to print a decimal point! Even your example <code>print_decimal(65.226, 4)</code> actually prints <code>652260</code>, not <code>65.2260</code>. This seems problematic for your prospective users.</p>

<hr>

<p>So in conclusion:</p>

<ul>
<li>Make your code testable.</li>
<li>Test your code.</li>
<li>Compile your code with <code>-Wall</code>.</li>
</ul>
    </div>