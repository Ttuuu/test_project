<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Naming conventions</strong></p>

<pre><code>package OOPDesign.onlineBookReaderSystem;
</code></pre>

<p>Java has well established <a href="https://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">naming conventions</a>. Package names should be all lower case. This should thus be <code>oopdesign.onlinebookreadersystem</code>.</p>

<p><strong>Single responsibility</strong></p>

<pre><code>public abstract class Book {
    ...
    ArrayList&lt;User&gt; readers = new ArrayList&lt;&gt;();
</code></pre>

<p>A book is a data object. It should contain information that is intrinsic to the book. A book should not be responsible for keeping track of it's readers. Especially when you seem to duplicate the book-reader connection in the BookProgress class by having it refer to the book and the user ID. To me the BookProgress class would be sufficient to establish the book-reader connection.</p>

<p>And since the <code>User</code> class is also responsible for keeping track of the books that a user reads, you have all classes referring to each other in a happy little bowl of spaghetti. :) Try drawing the relationships to a UML diagram and you'll see how it is a directed graph instead of a tree.</p>

<p>You should extract the book keeping into a separate <code>ReadingProgressTracker</code> that keeps track what book each user is reading and keep the <code>Book</code> and <code>User</code> as simple data objects. When the book keeping is extracted to it's own class it'll be much easier to add persistence to the progress tracking.</p>

<p>When designing a class hierarchy it helps to literally list the responsibilities of a class to see if you are following single responsibility principle. E.g. in this case "<em>Book-class is responsible for holding book information <strong>and</strong> the reading progress of the users who are reading the book.</em>" The "and" is a keyword that should ring alarm bells. The difficult trick is to know how to correctly categorize the responsibilities (e.g. not grouping the book reading progress into the "book information" category).</p>

<p><strong>Composition vs inheritance</strong></p>

<pre><code>public class FictionBook extends Book {
</code></pre>

<p>You don't seem to gain any advantage from inheriting book categories from the base class. All you do is hard code a string representation of the category name to the super class. And you lose the ability to add new book categories without changing the code. Thus the book should be a concrete class.</p>

<p><strong>Testing</strong></p>

<pre><code>public class OnlineReaderSystem {
</code></pre>

<p>This is more of a trial to see if the code runs instead of a "reading system." You should replace this with a set of unit tests.</p>
    </div>