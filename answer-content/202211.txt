<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have much to say for the code itself, it is concise, readable and does what you want it to do. That's a good start. My only critique is that you handle input and output in the same place, if you plan on reusing the code maybe consider making a method.</p>

<hr>

<p>So since the code is on point, we can look at the algorithm you are using. The only time the sum will change is when the sequence passes a multiple of 15. So lets see if we can find which multiples of 15 are between our starting point (x) and our ending point (y).</p>

<p>If we start at x, the first multiple of 15 we will encounter will be </p>

<p>$$15 \lceil \frac{x}{15} \rceil$$</p>

<p>To give you some intuition as to why this is the case, my argument is as follows. When you divide a number by 15, you get a whole part (how many 15s you can make from x) and a remainder (how many are left over when you make as many 15s from x as you can). The next multiple of 15 after (or including) x will be the first number you get when counting upwards who's remainder is 0. In other words, the remainder is a progress bar of how close to 15 we are. By taking the ceiling of x / 15, we are setting the progress bar to full, so when we multiply by 15 we get the next multiple.</p>

<p>What is the last multiple before (or including) y? We can use similar logic to get </p>

<p>$$15 \lfloor \frac{y}{15} \rfloor$$</p>

<p>And now we can directly loop over multiples of 15, no need to do any mods.</p>

<pre><code>int start = 15 * (int)Math.Ceiling((double)start_range / 15);
int end = 15 * (int)Math.Floor((double)end_range / 15);
int sum = 0;
for (int i = start; i &lt;= end; i += 15) {
    sum += i;
}
</code></pre>

<hr>

<p>We don't have to stop there. This is a straightforward enough sum so we can somewhat simplify it.</p>

<p>$$start + (start + 15) + (start + 30) + ... + end$$</p>

<p>We can write start and end as multiples of 15 (where a and b are just integers).</p>

<p>$$15a + (15a + 15) + (15a + 30) + ... + 15b$$</p>

<p>We will now factor out 15 term.</p>

<p>$$15(a + (a + 1) + (a + 2) + ... + b)$$</p>

<pre><code>int a = (int)Math.Ceiling((double)start_range / 15);
int b = (int)Math.Floor((double)end_range / 15);
int sum = 0;
for (int i = a; i &lt;= b; i++) {
    sum += i;
}
sum *= 15;
</code></pre>

<hr>

<p>I think the sum is simple enough now that we can do it without a loop. I'm going to "cheat" a little and just introduce the identity we will use without much explanation. There are some nice visualizations and proofs online if you want to look them up yourself.</p>

<p>$$ a, b \in \mathbb{N}; \sum_{i=a}^{b}{i} = \sum_{i=0}^{b}{i} - \sum_{i=0}^{a-1}{i} $$</p>

<p>The sum of numbers from 0 to n is well known</p>

<p>$$ \sum_{i=0}^{n}{i} = \frac{n^2+n}{2} $$</p>

<p>So we can use this equation to derive</p>

<p>$$ \sum_{i=a}^{b}{i} = \frac{b^2+b}{2} - \frac{(a-1)^2 + a - 1}{2} $$</p>

<p>$$ = \frac{b^2+b}{2} - \frac{a^2 - 2a + 1 + a - 1}{2} = \frac{b^2+b}{2} - \frac{a^2 - a}{2} $$</p>

<p>$$ = \frac{b^2+b - a^2 + a}{2} $$</p>

<p>This is only a couple of lines of code now, and should run in constant time.</p>

<pre><code>int a = (int)Math.Ceiling((double)start_range / 15);
int b = (int)Math.Floor((double)end_range / 15);
int sum = 15 * (b*b + b - a*a + a) / 2;
</code></pre>

<hr>

<p>Final remarks, in many languages integer division will floor the result (once the numbers are both positive). This means we can avoid Math.Floor if we assume end_range &gt;= 0 (which seems like a fair assumption).</p>

<p>We also have the constant 15 strewn around the code, let's make it a variable.</p>

<pre><code>int num = 15;  // A magic number specific to our problem
int a = (int)Math.Ceiling((double)start_range / num);
int b = end_range / num;
int sum = num * (b*b + b - a*a + a) / 2;
</code></pre>

<p>We could also avoid the Math.Ceiling call but the code may lose it's readability. The code also doesn't account for bugs like overflow, and it could be reworked to delay those issues. Currently, I don't think either of these changes would be worth it.</p>
    </div>