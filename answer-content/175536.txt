<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Is it ok now?</p>

<pre><code>public class CalculatorApp {
    private static Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) {
        System.out.println("Write two numbers and +, -, * or / sign");
        char operator = 0;
        double firstNum = 0;
        double secondNum = 0;
        try {
            firstNum = scanner.nextDouble();
            secondNum = scanner.nextDouble();
            operator = scanner.next().charAt(0);
        } catch (InputMismatchException ime) {
            System.out.println("invalid input");
        }
            Calculator calculator = new Calculator();
            calculator.makeCalculation(firstNum, secondNum, operator);
    }
}
</code></pre>

<p>Calculator class:</p>

<pre><code>class Calculator {
    private Map&lt;Character, Operation&gt; operationMap = new HashMap&lt;&gt;();
    Calculator() {
        operationMap.put('+', new Addition());
        operationMap.put('-', new Subtraction());
        operationMap.put('*', new Multiplication());
        operationMap.put('/', new Division());
    }

    double makeCalculation(double operand1, double operand2, char operation) {
        Operation operationMapValue = operationMap.getOrDefault(operation,new NoOperationFound(operation));
        return operationMapValue.calculateResult(operand1, operand2);
    }
}
</code></pre>

<p>Interface:</p>

<pre><code>public interface Operation {
    double calculateResult(double left, double right);
}
</code></pre>

<p>Implementing class:</p>

<pre><code>public class Addition implements Operation {
    @Override
    public double calculateResult(double left, double right) {
        return left + right;
    }
}
</code></pre>

<p>NoOperationFound class:</p>

<pre><code>public class NoOperationFound implements Operation {
    private char sign;
    NoOperationFound(char sign){
        this.sign = sign;
}

    @Override
    public double calculateResult(double left, double right) {
        throw new InputMismatchException("Invalid operator sign: " + sign);
    }
}
</code></pre>

<p>Tests:</p>

<pre><code>class CalculatorTest {
    private Calculator calculator = new Calculator();

    @Test
    void addsTwoNumbers() {
        assertEquals(8.0, calculator.makeCalculation(6.0,2.0,'+'));
    }

    @Test
    void subtractsTwoNumbers() {
        assertEquals(4.0, calculator.makeCalculation(6.0, 2.0, '-'));
    }

    @Test
    void multipliesTwoNumbers() {
        assertEquals(12.0, calculator.makeCalculation(6.0, 2.0, '*'));
    }

    @Test
    void dividesTwoNumbers() {
        assertEquals(3.0, calculator.makeCalculation(6.0, 2.0, '/'));

    }
}
</code></pre>
    </div>