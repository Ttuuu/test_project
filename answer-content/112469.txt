<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're targeting Java 8, then you should make an <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html"><code>IntStream</code></a> and a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/PrimitiveIterator.OfInt.html"><code>PrimitiveIterator.OfInt</code></a> instead.  You can do more interesting manipulations with an <code>IntStream</code>, and the primitive types would be more efficient than the boxed types.</p>

<p>In fact, there is already an <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#range-int-int-"><code>IntStream.range(startInclusive, endExclusive)</code></a> function.  You could simply <code>.map()</code> that to another <code>IntStream</code> with a <code>step</code> other than 1.</p>

<hr>

<p>You have three <code>range(…)</code> functions and three corresponding <code>Range(…)</code> constructors.  I suggest that you make a design decision and stick with it.  From <a href="https://www.python.org/dev/peps/pep-0020/">PEP 20 (The Zen of Python)</a>:</p>

<blockquote>
  <p>There should be one-- and preferably only one --obvious way to do it.</p>
</blockquote>

<p>Assuming that you want three static <code>range(…)</code> functions, then they should all call one <code>private Range(int start, int stop, int step)</code> constructor.</p>

<p>Python's documentation calls the three parameters <code>start</code>, <strong><code>stop</code></strong>, and <code>step</code>, and you should, too.  Alternatively, adopt Java 8's <code>startInclusive</code>, <code>endExclusive</code> terminology.</p>

<hr>

<p>I think you would be better off with one <code>RangeIterator</code> class.  Its <code>hasNext()</code> method can just decide what to do based on whether the <code>step</code> is positive or negative.</p>

<p>Since the iterator is not a static inner class, it can access the <code>start</code>, <code>stop</code>, and <code>step</code> of the outer class instead of making a copy.</p>

<hr>

<p>You could write less code if you extended <a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractCollection.html"><code>AbstractCollection</code></a> instead of implementing <code>Collection</code> from scratch.</p>

<blockquote>
  <p>To implement an unmodifiable collection, the programmer needs only to extend this class and provide implementations for the <code>iterator</code> and <code>size</code> methods. (The iterator returned by the <code>iterator</code> method must implement <code>hasNext</code> and <code>next</code>.)</p>
</blockquote>

<p>I would also override <code>contains()</code> for efficiency.  <code>size()</code> and <code>contains()</code> would be better implemented using a bit of math instead of all those conditionals.</p>

<p>With all of the changes suggested above, there can be a lot less code:</p>

<pre><code>public class Range extends AbstractCollection&lt;Integer&gt; implements Iterable&lt;Integer&gt; {
    private final int start, stop, step;

    public static Range range(int start, int stop, int step) {
        return new Range(start, stop, step);
    }

    public static Range range(int start, int stop) {
        return range(start, stop, 1);
    }

    public static Range range(int stop) {
        return range(0, stop);
    }

    private Range(int start, int stop, int step) {
        if (step == 0) {
            throw new IllegalArgumentException("The step must not be zero.");
        }

        this.start = start;
        this.stop  = stop;
        this.step  = step;
    }

    @Override
    public int size() {
        return Math.max(0, step &gt;= 0 ? (stop + step - 1 - start) / step
                                     : (stop + step + 1 - start) / step);
    }

    @Override
    public boolean contains(Object o) {
        try {
            int n = (int)o;
            boolean inBounds = step &gt;= 0 ? (start &lt;= n) &amp;&amp; (n &lt; stop)
                                         : (start &gt;= n) &amp;&amp; (n &gt; stop);
            return inBounds &amp;&amp; (n - start) % step == 0;
        } catch (ClassCastException notAnInt) {
            return false;
        }
    }

    @Override
    public Iterator&lt;Integer&gt; iterator() {
        return new Iterator&lt;Integer&gt;() {
            private int value = start;

            @Override
            public boolean hasNext() {
                return step &gt;= 0 ? value &lt; stop : value &gt; stop;
            }

            @Override
            public Integer next() {
                if (!hasNext()) {
                    throw new NoSuchElementException("Iteration exceeded.");
                }
                try {
                    return value;
                } finally {
                    value += step;
                }
            }
        };
    }
}
</code></pre>
    </div>