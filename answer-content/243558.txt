<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>flag as boolean</h1>
<p>If you change the flags from <code>'Y'</code> and <code>'N'</code> to <code>True</code> and <code>False</code> You can use boolean indexing. This should speed up a lot of things already</p>
<h1>set</h1>
<p>You check for each combination <code>word in dest_words for word in source_words</code> on a <code>list</code> of words. If the check matches, you convert to a <code>set</code>. The containment check would be sped up by checking against a list, but using <code>set</code> comparisons would speed this up a lot.</p>
<pre><code>import typing

def partial_match(
    source_words: typing.Set[str], dest_words: typing.Set[str], index=None
) -&gt; typing.Tuple[typing.Any, typing.Optional[str]]:
    intersection = source_words &amp; dest_words
    if intersection:
        return index, ", ".join(intersection)
    return index, None

def exact_match(
    source_words: typing.Set[str], dest_words: typing.Set[str], index=None
) -&gt; typing.Tuple[typing.Any, typing.Optional[str]]:
    if source_words == dest_words:
        return index, ", ".join(source_words)
    return index, None
</code></pre>
<p>The reason I chose to return the index along with it is to be able to reconstruct the series easier when reassembling everything.</p>
<h1>Don't touch the original data</h1>
<p>You change your source data inplace (by adding columns). Better would be to leave this untouched, and keep the destination words etc in separate series.</p>
<h1><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.where.html" rel="nofollow noreferrer"><code>Series.where</code></a></h1>
<p>You can replace calls like this</p>
<pre><code>if x['remove_bus_ending'] == 'Y':
        x['dest_words'] = x['dest_words_2']
    else:
        x['dest_words'] = x['dest_words_1']
</code></pre>
<p>with <code>Series.where</code></p>
<pre><code>a = pd.Series(list("abcd"))
b = pd.Series(list("efgh"))
c = pd.Series([True, True, False, True])
b.where(c, other=a)
</code></pre>
<blockquote>
<pre><code>0    e
1    f
2    c
3    h
dtype: object
</code></pre>
</blockquote>
<p>If your data looks like this:</p>
<pre><code>from io import StringIO

import pandas as pd

def setify(s):
    return s.str.strip("[]").str.split(", ").apply(set)

df = pd.read_csv(StringIO(data_str), sep="\s\s+", index_col=False, engine='python')
df["source_words"] = setify(df["source_words"])
df["dest_words_1"] = setify(df["dest_words_1"])
df["dest_word_2"] = setify(df["dest_word_2"])
df["remove_bus_ending"] = df["remove_bus_ending"] == "Y"
df["partial_match_flag"] = df["partial_match_flag"] == "Y"
df["exact_match_flag"] = df["exact_match_flag"] == "Y"
</code></pre>
<h1>intermediate dataframe</h1>
<p>If you want to split the dataframe with arraysplit, you'll need to provide an intermediate form with the info you need:</p>
<pre><code>df_intermediate = pd.concat(
    [
        df["dest_word_2"]
        .where(df["remove_bus_ending"], other=df["dest_words_1"])
        .rename("dest_words"),
        df["source_words"],
    ],
    axis=1,
)
</code></pre>
<p>You can even split it immediately according to what matching is needed</p>
<pre><code>df_intermediate_partial = df_intermediate.loc[df["partial_match_flag"]]
df_intermediate_exact = df_intermediate.loc[df["exact_match_flag"]]
</code></pre>
<h1>applying the function</h1>
<p>not parallel:</p>
<pre><code>result_partial = list(
    map(
        partial_match,
        df_intermediate_partial["source_words"],
        df_intermediate_partial["dest_words"],
        df_intermediate_partial.index,
    )
)


results_exact = list(
    map(
        exact_match,
        df_intermediate_exact["source_words"],
        df_intermediate_exact["dest_words"],
        df_intermediate_exact.index,
    )
)

result = pd.Series(result_partial + results_exact)
</code></pre>
<p>This should be easy to parallelize. Since I'm no expert on that, I'll leave that to others.</p>
<h1>context manager</h1>
<p>Most of the examples I found in the <code>multiprocessing</code> documantation work with a context manager that takes care of the closing of the pool</p>
<pre><code>with Pool(processes=4) as pool:
    ... # parallel part of the code
</code></pre>
    </div>