<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Observation</h2>
<p>Array allocated and initializes <code>capacity</code> elements. Which sort of defeats the purpose of having a capacity. The point of using a capacity is that you should not be paying the price of calling the constructor on elements that you don't use.</p>
<h2>Code Review</h2>
<p>You should put your code into a namespace.</p>
<hr>
<p>This does not seem correct.</p>
<pre><code>    DynamicArray()
        : m_size(0)              // Size is zero fine.
        , m_capacity(1)          // But a capacity of 1 with no memory allocated!
                                 // I would say the capacity here is zero
                                 // as you have no room to add any elements.
        , m_array(nullptr)
    { }
</code></pre>
<hr>
<p>You have accepted the initializer list <code>elements</code> by value.</p>
<pre><code>    DynamicArray(std::initializer_list&lt;T&gt; elements)
</code></pre>
<p>So you have already made a copy of the list.</p>
<p>Since you have made a copy of the list the elements in the list are yours to mutate if you want to so here you could use move semantics rather than copy semantics.</p>
<pre><code>        std::copy(elements.begin(), elements.end(), m_array);
        // RATHER DO THIS
        std::move(elements.begin(), elements.end(), m_array);
</code></pre>
<hr>
<p>Normally you expect to see the move operators marked as <code>noexcept</code></p>
<pre><code>    DynamicArray(DynamicArray&lt;T&gt;&amp;&amp; other)
</code></pre>
<p>This allows certain optimizations when you use standard algorithms and containers.</p>
<hr>
<p>Normally I write the swap function in terms of the swap method.</p>
<pre><code>    friend void swap(DynamicArray&lt;T&gt;&amp; obj1, DynamicArray&lt;T&gt;&amp; obj2) noexcept
    {
        std::swap(obj1.m_size, obj2.m_size);
        std::swap(obj1.m_capacity, obj2.m_capacity);
        std::swap(obj1.m_array, obj2.m_array);
    }

    // I would write it like this:

    void swap(DynamicArray&lt;T&gt;&amp; other) noexcept
    {
        using std::swap;
        swap(m_size,     other.m_size);
        swap(m_capacity, other.m_capacity);
        swap(m_array,    other.m_array);
    }
    friend void swap(DynamicArray&lt;T&gt;&amp; lhs, DynamicArray&lt;T&gt;&amp; rhs) noexcept
    {
        lhs.swap(rhs);
    }
</code></pre>
<p>Now methods (like move operators) don't need to call a free function to do a swap. They simply call the method version of swap and get the same affect.</p>
<hr>
<p>Nice try.</p>
<pre><code>    // Resizes array to store n elements.
    // Guarantees strong exception safety.
</code></pre>
<p>Unfortunately not quite. You can not do anything that may throw while the state of the object has been mutate but not in the final state.</p>
<pre><code>    void resize(int n)
    {
        T *temp = new T[n];
        m_capacity = n;                                  // Mutation here

        std::copy(m_array, m_array + m_capacity, temp);  // Throw possible here
        delete[] m_array;                                // Throw possible here.
        m_array = temp;                                  // Final mutation
    }
</code></pre>
<p>The way to do this is in three phases:</p>
<pre><code>    void resize(int n)
    {
        // Phase 1: Make your copy.
        T *temp = new T[n];
        std::copy(m_array, m_array + m_capacity, temp);

        // Phase 2: Mutate "ALL" your state to final state.
        //          You can not call anything that is not `noexcept`
        //          This limits you to very basic operations.
        m_capacity = n;
        std::swap(temp, m_array);

        // Phase 3: Clean up
        delete[] temp;           // Note the swap above.
    }
</code></pre>
<p>Note we can simplify this:</p>
<pre><code>    void resize(int n)
    {
        // Phase 1: Make your copy.
        DynamicArray  copy(*this, n);  // Private constructor
                                       // Allocates n spaces but copies size
                                       // objects from the passed item.

        // Phase 2: Mutate "ALL" your state to final state.
        //          You can not call anything that is not `noexcept`
        //          This limits you to very basic operations.
        //          Luckily swap method is `noexcept`
        swap(copy);

        // Phase 3: Clean up
        // the object copy's destructor will do cleanup.
    }
</code></pre>
<hr>
<p>I am a fan of one liners for methods that are this imple.</p>
<pre><code>    bool empty() const 
    {
        return m_size == 0;
    }
</code></pre>
<hr>
<p>Its OK to have a print method. But to make it more C++ like I would also add the <code>operator&lt;&lt;</code> so you can stream it. This means modifying print to take a stream.</p>
<pre><code>    void print(std::ostream&amp; out = std::cout) const
    {
        for (int i = 0; i &lt; m_size; i++)
        {
            out &lt;&lt; m_array[i] &lt;&lt; " ";
        }
        out &lt;&lt; "\n";
    }
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, DynamicArray const&amp; data)
    {
        data.print(str);
        return str;
    }
</code></pre>
<hr>
<p>In the standard library containers that use <code>operator[]</code> make it a non checked interface. It is the responsibility of the user to validate before calling. They add an additional checked interface <code>at()</code> when the user want to validate that the index is range.</p>
<pre><code>    T&amp; operator[](int index)
    {
        m_check_range(index);
        return m_array[index];
    }


    // Think of this situation
    for(int loop = 0; loop &lt; dA.size(); ++loop) {
        std::cout dA[loop];
    }

    // Here we have already guaranteed that the index is within the correct
    // range but we your code still forces an additional check (that we
    // know is never going to fail).

    // If I need to check then I call the `at()`version.
    printArrayElement(std::size_t index)
    {
         std::cout &lt;&lt; dA.at(index);   // Use checked accesses
    }
</code></pre>
<h2>Self Plug</h2>
<p>I have a lot of other pointers in my articles about writing a vector:</p>
<p><a href="https://lokiastari.com/series/" rel="nofollow noreferrer">https://lokiastari.com/series/</a></p>
    </div>