<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some comments on the style of your code. </p>

<ol>
<li><p><strong>Formatting</strong>. Your code is hard to read because there are no spaces.
Also the formatting seems to be off. It might be easier to read like this:</p>

<pre><code>int main(void)
{
    int T;//number of test cases
    scanf("%d", &amp;T);
    while (T--) {

        char str[20];
        scanf(" %[^\n]", str);

        int i, j, k, m, count = 0, l, p = 1, n;
        l = strlen(str);

        for (i = 0; i &lt; l; i++) {
            if (str[i] == ' ') {
                count++;
            }
        }

        m = count + 1;
        char arr[m][50];
        int check[m], func[m];

        for (i = 0, k = 0, j = 0; j &lt;= l; j++) {
            if (str[j] == ' ' || j == l) {
                check[i] = 0; func[i] = 1;
                arr[i][k] = '\0';
                i++;
                k = 0;
            }
            else {
                arr[i][k] = str[j];
                k++;
            }
        }

        for (i = 0; i &lt; m; i++) {
            for (j = i + 1; j &lt; m; j++) {
                if (check[i] == 0 &amp;&amp; strcmp(arr[i], arr[j]) == 0) {
                    check[j]++;
                    func[i]++;
                }
            }
        }

        for (i = 0; i &lt; m; i++) {
            p *= factorial(func[i]);
        }

        n = factorial(m) / p;
        printf("%d/%d\n", 1, n);
    }
    return 0;
}
</code></pre></li>
<li><p><strong>Don't use comments for what could be described in the code directly</strong>. This:</p>

<pre><code>    int T;//number of test cases
    scanf("%d", &amp;T);
    while (T--) {
</code></pre>

<p>Should be really this:</p>

<pre><code>    int number_of_test_cases;
    scanf("%d", &amp;number_of_test_cases);
    while (number_of_test_cases--) {
</code></pre></li>
<li><p><strong>Avoid long functions for maintainability and readability.</strong> You wrote one function for the factorial calculation; good. But now take a look
    at the <code>main()</code> function. Can you guess what the steps are in the <code>while</code>
    by looking at it? There's too much stuff going on in the <code>main()</code>.
    Isolate parts which do one thing into a function. For example this
    piece:</p>

<pre><code>    int i, j, k, m, count = 0, l, p = 1, n;         
    l = strlen(str);

    for (i = 0; i &lt; l; i++) {           
        if (str[i] == ' ') {
            count++;            
        }       
    }
</code></pre>

<p>First of all I would write the variables on several lines to have it more readable:</p>

<pre><code>    int i;
    int j;
    int k;
    int m;
    int count = 0;
    int l; 
    int p = 1;
    int n;
    l = strlen(str);

    for (i = 0; i &lt; l; i++) {
        if (str[i] == ' ') {
            count++;
        }
    }
</code></pre>

<p>Then we realize that <code>j</code>, <code>k</code>, <code>m</code>, <code>p</code> and <code>n</code> are not even needed yet at this point, so we put 
 them after all this:</p>

<pre><code>    int i;
    int count = 0;
    int l; 
    l = strlen(str);

    for (i = 0; i &lt; l; i++) {
        if (str[i] == ' ') {
            count++;
        }
    }

    int p = 1;
    int j;
    int k;
    int m;
    int n;
</code></pre>

<p>Then another thing is <code>l</code> can be directly initialized with <code>strlen(str)</code>. Also I renamed 
it everywhere in the program to <code>length</code> which  states more easily for a reader what it 
does.</p>

<p>This gives us this:</p>

<pre><code>    int i;
    int count = 0;
    int length = strlen(str);

    for (i = 0; i &lt; length; i++) {
        if (str[i] == ' ') {
            count++;
        }
    }
</code></pre>

<p>Now we should make it a function so it looks like this:</p>

<pre><code>    int length = strlen(str);
    int count = get_count_of_whitespace(&amp;str, length);
</code></pre>

<p>Proceed with the rest of the <code>main</code> function like that by refactoring it into 
manageable chunks, and probably with that alone you will find some mistakes or improvements 
for your algorithm.</p></li>
</ol>
    </div>