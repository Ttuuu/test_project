<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>So I'm looking for the go-to solution for situation like this, if one exists</p>
</blockquote>

<p>Big step, small step. Rather than run the snake once, you run it twice in parallel, but the two instances run at different speeds:</p>

<pre><code>snake1 = ...;
snake2 = snake1.clone();
while (true) {
    snake1.step();
    snake2.step();
    snake2.step();
    if (snake1.equals(snake2)) {
       // Loop detected
    }
}
</code></pre>

<p>If the cycle is of length <span class="math-container">\$n\$</span> and you enter the cycle for the first time at <span class="math-container">\$t_0\$</span> then this will detect the cycle as long as there's a number <span class="math-container">\$t \ge t_0\$</span> for which <span class="math-container">\$t \equiv 2t \pmod n\$</span>. But that reduces to <span class="math-container">\$t \equiv 0 \pmod n\$</span>, so <span class="math-container">\$t\$</span> is the first multiple of <span class="math-container">\$n\$</span> greater than or equal to <span class="math-container">\$t_0\$</span>, and it's guaranteed to find the loop.</p>

<p>Essentially you trade memory saving (no history required) for execution time (it takes <span class="math-container">\$3t\$</span> calls to <code>step()</code> rather than <span class="math-container">\$t_0 + n\$</span>).</p>

<hr>

<p>That renders rather unnecessary the following observation:</p>

<blockquote>
<pre><code>    const arr = [this.direction.hash(), this.pallet.hash(), this.head.hash(), ...this.body.map(x =&gt; x.hash())];
</code></pre>
</blockquote>

<p>Most of those don't need to use a <code>Vector2</code> with a hash: there are 4 possibilities for the direction, and the body can be represented by a series of directions. Using arrays of length 4 might be more efficient than object properties.</p>
    </div>