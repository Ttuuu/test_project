<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>But because the copy function for the LTexture class was deleted I
  would just get an error about referencing a deleted function. This
  resulted in me using the default copy function.</p>
</blockquote>

<p>Right now your resource wrapper class is wrong. It works, but if you would use the default copy constructor in your class, it would crash.
<a href="https://i.stack.imgur.com/8qCFK.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/8qCFK.png" alt="String example"></a></p>

<p>In this example you can see clearly that the "hello" string is not getting copied, instead both of the strings pointing to the same memory location. This is what happens in your example. Your <code>SDL_Texture</code>s are going to point to the same texture, and when the LTexture destructor is going to be called, the first is going to delete the object, but the second one is going to delete an invalid memory location</p>

<p>Solution 1: Copy the resource</p>

<p><a href="https://i.stack.imgur.com/mXRyX.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/mXRyX.png" alt="String example2"></a></p>

<p>This solution is not really convinient if you want to be efficent (Imagine copying a big triangle mesh approx 1-2 gigabytes)</p>

<p>Solution 2: Don't allow copying.</p>

<p>This is what the article suggests. Te only problem is that you need to delete the copy constructor in the <code>AssetManager</code> class too. The compiler very clever, and if you delete a nested type's copy ctor, the owner cannot be copied.</p>

<blockquote>
  <p>While making the playAgain game state I had an issue where once the
  last move was made (either a winning move, or a move that took the
  last remaining open slot) the last mark wouldn't render and the game
  would just move to the playAgain state.</p>
</blockquote>

<p>This happens because in your main loop you call the methods in the following order:</p>

<pre><code>while (gameLoop_input(gameState, game, assets) &amp;&amp;
       gameLoop_update(gameState, game, assets) &amp;&amp;
       gameLoop_render( game, assets))
</code></pre>

<p>The <code>&amp;&amp;</code> operator has a short circuit property, which means if the one of the results are false, the whole expression is going to be false, so its not going to call the other methods.
In your case: The update method returns false, and then the whole expression is false, so the render method is not going to be called</p>

<p>One tip about your game loop:
Instead of repeating the same thing with different function names, you can use inheritance and virtual functions</p>

<blockquote>
  <p>I was trying to stay away from duplicating all of that code.</p>
</blockquote>

<p>Always avoid code duplication, it always leads to bugs</p>
    </div>