<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>your program looks nice, and seems to follow most of <a href="https://www.python.org/dev/peps/pep-0008" rel="nofollow">PEP8</a>.</p>

<hr>

<p>There are two rather long lines, and so you may want to put some information onto the next line.</p>

<blockquote>
  <p>Limit all lines to a maximum of 79 characters.</p>
</blockquote>

<pre><code>users[recipient]["mail"].append(["Sender: " + username,
                                 "Subject: " + subject,
                                 "Context: " + context
                                 ])
</code></pre>

<p>This way it is easier to read. As I misread it at a glance.</p>

<hr>

<p>I thought the following was kinda strange, so you may want to change:</p>

<pre><code>users[username] = {}
users[username]["password"] = password
users[username]["group"] = "user"
users[username]["mail"] = []

# Into

users[username] = {
    "password": password,
    "group": "user",
    "mail": []
}
</code></pre>

<p>It stuck out, and is easier to understand at a glance.</p>

<hr>

<p>I personally love the <code>str.format</code> function. Whilst you can't exploit all of its features, it's still nice. It's mostly something to look into.</p>

<pre><code>print("Deleting " + userinfo + "'s mail...")

# Into

print("Deleting {}'s mail...".format(userinfo))
</code></pre>

<p>However for simple <code>print('username: ' + username)</code>, it is not needed.</p>

<hr>

<p>Whilst your comparison operators are good, they are not pythonic. Whilst it is correct, it is long-winded.</p>

<blockquote>
  <p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.</p>
</blockquote>

<pre><code>if not len(username) &gt; 0:
    print("Username can't be blank")
else:
    break

# Into

if username:
    break
print("Username can't be blank")
</code></pre>

<p>And the <code>.lower</code> and <code>in</code> functions are helpful when wanting to validate input.</p>

<pre><code>confirm = input("&gt; ")
if confirm == "yes":
    # ... do more

# Into

confirm = input("&gt; ")
if confirm.lower() in ["yes", "y"]:
    # ... do more
</code></pre>

<p>This is so that you have both a shorthand, of 'y', but also you can put 'Yes', 'YEs', 'yEs', etc.</p>

<hr>

<p>You should wrap the information in the global scope in <code>if __name__ == "__main__":</code></p>

<pre><code>if __name__ == "__main__":
    print("Welcome to the system. Please register or login.")
    # ...
</code></pre>

<p>This is so that if someone accidentally imports this file at a later date, it doesn't start an unintended program.</p>

<hr>

<p>You can change your main loop into a dictionary lookup.</p>

<pre><code>if option == "exit":
    break
try:
    {
        "login": login
        "register": register
    }[option]()
except KeyError:
    print(option + " is not an option")
</code></pre>

<p>This is as functions are first-class citizens in Python! This means that if we ask for <code>login</code>, it will tell us it's place in memory. But if we call it with <code>()</code> then it will execute.
To see what I am on about, you can try this:</p>

<pre><code>&gt;&gt;&gt; def a():pass
...
&gt;&gt;&gt; a
&lt;function a at 0x7f9a7e7b3bf8&gt;
&gt;&gt;&gt; a()
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b
&lt;function a at 0x7f9a7e7b3bf8&gt;
&gt;&gt;&gt; b is a
True
</code></pre>

<p>Using a dictionary for lookup is a nice trick that you can do to make there be a lot of functions, and adding a new function is just adding another entry to the dictionary. But as this is a small program the if else statement is perfectly good.</p>

<hr>

<blockquote>
  <p>give me tips on minimizing code and making things shorter</p>
</blockquote>

<p>Well I don't want to write a book, so this will be the last thing I will comment on.</p>

<p>If you look at your program, you see that you use this structure a lot.</p>

<pre><code>while True:
    username = input("Username: ")
    if not len(username) &gt; 0:
        print("Username can't be blank")
    else:
        break
</code></pre>

<p>This can easily be changed to a function.</p>

<pre><code>def get_nonempty(name):
    while True:
        user_input = input("{}: ".format(name))
        if user_input:
            return user_input
        print("{} can't be blank".format(name))


# Use

password = get_nonempty("Password")
</code></pre>

<p>This would cut down a lot of your code. And, if you were to build on your program, then you would use the yes/no question more. And you would want to change it into a function.</p>

<p>As this is a user input program, you need lots of print statements, and that is a lot of your program. And so it would be hard to reduce this more. Unless you remove print statements...
Which, if you did, <code>"\r\b"</code> is nice!</p>

<hr>

<p>The first two quotes are from <a href="https://www.python.org/dev/peps/pep-0008" rel="nofollow">PEP8</a>, the Python style guide.</p>

<p>If you have any problems, just say. Hope this helps! Sorry for the light novel, I just wrote about the things that stuck out to me.</p>
    </div>