<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When I look at the problem statement in your code, it doesn't seem to specifically mention keeping everything in one function.  I think here a simple <code>swap</code> function, still keeps with the directive to not make any library calls, but neatens the the <code>highIntegers</code> function up greatly.</p>

<p>Treating the first 3 integers as special cases, allows you make fewer swaps.  This also makes it easy to get the first 4 sorted and stays within the bounds of being O(n) complexity.</p>

<p>With the temparray filled and sorted, the code inside the loop is simplified by working from the smallest and swapping until it's in sorted place.</p>

<p>A side note I forgot to add before.  This solution will correct the bug that doesn't deal with the array having all negative numbers.</p>

<p>It could look something like this:</p>

<pre><code>  public static int[] highIntegers(int[] arrayOfIntegers) {
    int[] tempArray = new int[4];
    int arrayOfIntegersLength = arrayOfIntegers.length;
    if (arrayOfIntegersLength &lt;= 4) {
      return arrayOfIntegers;
    }
    tempArray[0] = arrayOfIntegers[0];
    tempArray[1] = arrayOfIntegers[1];
    if (tempArray[1] &gt; tempArray[0]) {
      swap(tempArray, 0, 1);
    }
    tempArray[2] = arrayOfIntegers[2];
    if (tempArray[2] &gt; tempArray[1]) {
      swap(tempArray, 1, 2);
      if (tempArray[1] &gt; tempArray[0]) {
        swap(tempArray, 0, 1);
      }
    }
    tempArray[3] = Integer.MIN_VALUE;

    for (int i = 3; i &lt; arrayOfIntegers.length; i++) {

      if (arrayOfIntegers[i] &gt; tempArray[3]) {
        tempArray[3] = arrayOfIntegers[i];
        if (tempArray[3] &gt; tempArray[2]) {
          swap(tempArray, 2, 3);
          if (tempArray[2] &gt; tempArray[1]) {
            swap(tempArray, 1, 2);
            if (tempArray[1] &gt; tempArray[0]) {
              swap(tempArray, 0, 1);
            }
          }
        }
      }
    }
    return tempArray;
  }
private static void swap(int[] arr, int indexA, int indexB){
    arr[indexA] += arr[indexB];
    arr[indexB]  = arr[indexA] - arr[indexB];
    arr[indexA] -= arr[indexB];
} 
</code></pre>

<p>If the <code>swap</code> function is unacceptable the simplicity of where it's used makes it a simpler matter of expanding each function call: </p>

<pre><code>public static int[] highIntegers(int[] arrayOfIntegers) {
    int[] tempArray = new int[4];
    int arrayOfIntegersLength = arrayOfIntegers.length;
    if (arrayOfIntegersLength &lt;= 4) {
        return arrayOfIntegers;
    }
    tempArray[0] = arrayOfIntegers[0];
    tempArray[1] = arrayOfIntegers[1];        
    if(tempArray[1] &gt; tempArray[0]){
        tempArray[0] += tempArray[1];
        tempArray[1]  = tempArray[0] - tempArray[1];
        tempArray[0] -= tempArray[1];
    }
    tempArray[2] = arrayOfIntegers[2];
    if(tempArray[2] &gt; tempArray[1]){
        tempArray[1] += tempArray[2];
        tempArray[2]  = tempArray[1] - tempArray[2];
        tempArray[1] -= tempArray[2];
        if(tempArray[1] &gt; tempArray[0]){
            tempArray[0] += tempArray[1];
            tempArray[1]  = tempArray[0] - tempArray[1];
            tempArray[0] -= tempArray[1];
        }        
    }
    tempArray[3] = Integer.MIN_VALUE;;

    for (int i = 3; i &lt; arrayOfIntegers.length; i++) {

        if(arrayOfIntegers[i] &gt; tempArray[3]){
            tempArray[3] = arrayOfIntegers[i];
            if(tempArray[3] &gt; tempArray[2]){
                tempArray[2] += tempArray[3];
                tempArray[3]  = tempArray[2] - tempArray[3];
                tempArray[2] -= tempArray[3];
                if(tempArray[2] &gt; tempArray[1]){
                    tempArray[1] += tempArray[2];
                    tempArray[2]  = tempArray[1] - tempArray[2];
                    tempArray[1] -= tempArray[2];
                    if(tempArray[1] &gt; tempArray[0]){
                        tempArray[0] += tempArray[1];
                        tempArray[1]  = tempArray[0] - tempArray[1];
                        tempArray[0] -= tempArray[1];
                    }
                }
            }
        }
    }
    return tempArray;
}
</code></pre>
    </div>