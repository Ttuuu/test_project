<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You use <code>numpy</code> to represent your board but don't take advantage of some of its capabilities to simplify your code. Some loops are unnecessary as they can be performed by a numpy operation.</p>

<p>You also use <code>itertools.product</code> to loop over indices where a double <code>enumerate</code> for-loop would fit better. You also use it in <code>solve_board</code> to search for the first entry which is still 0 and then stop afterwards; better use a generator of possible indexes and extract the first using <code>next</code> to make it more explicit. This will also allows you to check for completion of the board, if the generator is exhausted and raise <code>StopIteration</code>.</p>

<p>Your <code>is_valid_sum</code> function would also benefit from being split in two to be able to return early instead of using all those flags.</p>

<p>And a <code>solve</code> or <code>main</code> function that would perform the boilerplate that you do in your <code>if __name__ == '__main__'</code> guard would be appreciated.</p>

<p>Proposed changes:</p>

<pre><code>import itertools
import numpy as np


OPERATORS = {
        '+': np.add,
        '-': np.subtract,
        '*': np.multiply,
        '/': np.true_divide,
}


def valid_number(row, column, size):
    candidates = np.arange(1, size + 1)
    candidates = np.setdiff1d(candidates, row, assume_unique=True)
    candidates = np.setdiff1d(candidates, column, assume_unique=True)
    return candidates


def check_group(board, instructions, group):
    group_numbers = []
    for i, row in enumerate(instructions):
        for j, instruction in enumerate(row):
            if instruction[0] != group:
                continue
            try:
                _, target, operation = instruction
            except ValueError:
                # Case of fixed-number groups
                return board[i, j] == instruction[1]
            else:
                group_numbers.append(board[i, j])

    for combination in itertools.permutations(group_numbers):
        if OPERATORS[operation].reduce(combination, dtype=float) == target:
            return True

    return False


def is_valid_sum(board, instructions, groups):
    for group in groups:
        if not check_group(board, instructions, group):
            return False
    return True


def solve_board(board, instructions, groups):
    empty_rows, empty_cols = np.where(board == 0)
    try:
        i, j = next(zip(empty_rows, empty_cols))
    except StopIteration:
        # Board is full
        return is_valid_sum(board, instructions, groups)

    row = board[i]
    column = board[:, j]
    for number in valid_number(row, column, *row.shape):
        board[i, j] = number
        if solve_board(board, instructions, groups):
            return True
        board[i, j] = 0
    return False


def solve(instructions):
    size = len(instructions)
    board = np.zeros((size, size), dtype=int)

    groups = set()
    for i, row in enumerate(instructions):
        assert size == len(row)
        for j, instruction in enumerate(row):
            if len(instruction) == 2:
                board[i, j] = instruction[1]
            groups.add(instruction[0])

    is_solved = solve_board(board, instructions, groups)
    return board if is_solved else None


if __name__ == "__main__":
    # Instructions in the array are in the format groupID, target, symbol. The
    # group ID is necessary for the situation where two neighbouring groups
    # have the same target AND symbol; which is a possibility in the game.

    # Squares which have a fixed number take a group number and the number as
    # input. DO NOT place a symbol in the square

    board = solve([
        [[1, 36, "*"], [1, 36, "*"], [6, 1, "-"],  [6, 1, "-"]],
        [[1, 36, "*"], [1, 36, "*"], [5, 12, "*"], [7, 2, "/"]],
        [[2, 2, "-"],  [5, 12, "*"], [5, 12, "*"], [7, 2, "/"]],
        [[2, 2, "-"],  [3, 3, "+"],  [3, 3, "+"],  [4, 3]],
    ])

    if board is None:
        print("Cannot solve")
    else:
        print(board)
</code></pre>

<p>You may also be able to simplify the <code>is_valid_sum</code> and <code>check_group</code> functions by storing more than the group numbers; <em>e.g.</em> target, op and list of indices for said group.</p>
    </div>