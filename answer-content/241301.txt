<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some easy wins here. Your <code>interpolate_points</code> doesn't need a loop:</p>

<pre><code>def interpolate_points(p1, p2, n_steps=3):
    """Helper function that calculates the interpolation between two points"""
    # interpolate ratios between the points
    ratios = np.linspace(0, 1, num=n_steps)
    # linear interpolate vectors
    vectors = (1.0 - ratios) * p1 + ratios * p2
    return vectors
</code></pre>

<p>Also, even without further vectorization, you should be making use of <code>range</code> in your main function:</p>

<pre><code>def interpolate_arrays(start_array, end_array, n_steps=10):
    """final function that interpolates arrays"""
    array_interpolation = []
    for n in range(n_steps):
        x = []
        for i in range(len(start_array)):
            e = interpolate_points(start_array[i], end_array[i], n_steps)[n]
            x.append(e)
        array_interpolation += [x]
    return array_interpolation
</code></pre>

<p>However, all of that can be replaced with a call to <code>interp1d</code>:</p>

<pre><code>import numpy as np
from scipy.interpolate import interp1d


def interpolate_arrays(bounds, n_steps=10):
    """final function that interpolates arrays"""
    bounds = np.array(bounds)

    fun = interp1d(
        x=[0, 1],
        y=bounds.T,
    )
    y = fun(np.linspace(0, 1, n_steps))

    return y


def test():
    X1 = [1.5, 1]
    X2 = [5.5, 3]

    y = interpolate_arrays([X1, X2], n_steps=3)
    assert y.T.tolist() == [[1.5, 1.0], [3.5, 2.0], [5.5, 3.0]]
</code></pre>

<p>Even easier:</p>

<pre><code>def interpolate_arrays(X1, X2, n_steps=10):
    """final function that interpolates arrays"""
    return np.linspace(X1, X2, n_steps)


def test():
    X1 = [1.5, 1]
    X2 = [5.5, 3]

    y = interpolate_arrays(X1, X2, n_steps=3)
    assert y.tolist() == [[1.5, 1.0], [3.5, 2.0], [5.5, 3.0]]
</code></pre>

<p>Notes:</p>

<ul>
<li>If you use <code>interp1d</code>, it would be better if your inputs and outputs are both two-dimensional <code>np.ndarray</code>; in their current form they need a transposition</li>
<li>Write some unit tests such as the one shown, although it would be a better idea to call <code>isclose</code> since this is floating-point math</li>
<li>If you want, it is trivial to make this extrapolate as well as interpolate</li>
</ul>

<p>Basically: if there is a math thing in your head, before even thinking about what it would take to implement it yourself, do a search through <code>scipy</code>/<code>numpy</code> to see if it has already been done for you.</p>
    </div>