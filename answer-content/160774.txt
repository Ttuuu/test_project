<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first one is a lot more readable, whereas the second one uses a "hack". I would go with the first one, except that I would use <code>rem</code>, which is a little bit faster. And one could introduce some DRY:</p>

<pre><code>isDivisibleBy :: Integral n =&gt; n -&gt; n -&gt; Bool
isDivisibleBy x n = x `rem` n == 0

isLeapYear :: Integer -&gt; Bool
isLeapYear year
  | divBy 400 = True
  | divBy 100 = False
  | divBy   4 = True
  | otherwise = False
 where
   divBy n = year `isDivisibleBy` n
</code></pre>

<p>That being said, for a programming challenge, your version is perfectly fine:</p>

<pre><code>isLeapYear :: Integer -&gt; Bool
isLeapYear year
  | year `rem` 400 == 0 = True
  | year `rem` 100 == 0 = False
  | year `rem`   4 == 0 = True
  | otherwise           = False
</code></pre>

<hr>

<p>The latter can be rewritten without <code>&gt;&gt;=</code> as list comprehension:</p>

<pre><code>isLeapYear :: Integer -&gt; Bool
isLeapYear year = head [isLeap | (interval, isLeap) &lt;- classifications
                               , year `isDivisibleBy` interval]
  where
    classifications = [(400, True), (100, False), (4, True), (1, False)]
</code></pre>

<p>You could get rid of the "hack" with <code>safeHead</code> and <code>maybe False</code>, but that's left as an exercise.</p>

<p>If you really want to use <code>check</code>, remove the <code>y</code>. It just introduces an additional error source:</p>

<pre><code>isLeapYear :: Integer -&gt; Bool
isLeapYear year = head $
                  [(400, True), (100, False), (4, True), (1, False)]
                  &gt;&gt;= check
  where check (interval, isLeap) = [isLeap | year `rem` interval == 0]
</code></pre>

<p>Note that this shows perfectly that <code>&gt;&gt;=</code> is just <code>flip concatMap</code> for lists. So let's take advantage:</p>

<pre><code>isLeapYear :: Integer -&gt; Bool
isLeapYear year = head $ concatMap check classifications ++ [False]
  where 
    check (interval, isLeap) = [isLeap | year `rem` interval == 0]
    classifications = [(400, True), (100, False), (4, True)]
</code></pre>

<p>Which is easier to grasp than the version with <code>&gt;&gt;=</code>.</p>
    </div>