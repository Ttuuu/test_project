<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all you have way too many variables, and the names aren't to much help when trying to follow your algorithm. </p>

<p>VisualMelon has commented some details so I won't go further into that.</p>

<hr>

<p>When determine the area for a floodfill all you need are:</p>

<p>1) The source as an one-dimensional array (it would of course be easier with a two-dimensional matrix)</p>

<p>2) The width of each row (count of columns)</p>

<p>3) The starting point inside the area to flood</p>

<p>4) The target value</p>

<p>5) The replacement value</p>

<p>So the signature of the method could be something like this:</p>

<pre><code>public static void FloodFill&lt;T&gt;(this T[] source, int width, int startX, int startY, T target, T replacement) where T: IEquatable&lt;T&gt;
</code></pre>

<p>The height (number of rows) is redundant and can easily be calculated.</p>

<p>You should maybe make a check of the dimension:</p>

<pre><code>if (source.Length % width != 0) throw new Exception("source has wrong size");
</code></pre>

<hr>

<p>Finding the neighbors is as simple as:</p>

<pre><code>North: neighbor = current - width;
South: neighbor = current + width;
East: neighbor = current + 1; // See comment below
North-East: neighbor = East - width;
South-East: neighbor = East + width;
West: neighbor = current - 1; // See comment below
North-West: neighbor = West - width;
South-West: neighbor = West + width;
</code></pre>

<hr>

<p>A solution could then be as follow:</p>

<pre><code>public static void FloodFill&lt;T&gt;(this T[] source, int width, int startX, int startY, T target, T replacement) where T: IEquatable&lt;T&gt;
{
  if (source == null || source.Length == 0 || target.Equals(replacement))
    return;

  int length = source.Length;
  Queue&lt;int&gt; queue = new Queue&lt;int&gt;();

  int current = startY * width + startX;

  if (!source[current].Equals(target))
    return;

  // If no target value was found the return 
  if (current &gt;= length) return;

  // A target value was found at index current so enqueue that
  queue.Enqueue(current);

  // Local function that enqueue an index if it is within 
  // the boundaries of the source and the value equals the target value.
  void Enqueue(int index)
  {
    if (index &gt;= 0 &amp;&amp; index &lt; length &amp;&amp; source[index].Equals(target))
    {
      source[index] = replacement;
      queue.Enqueue(index);
    }
  }

  while (queue.Count &gt; 0)
  {
    current = queue.Dequeue();

    // North
    int neighbor = current - width;
    Enqueue(neighbor);

    // South
    neighbor = current + width;
    Enqueue(neighbor);

    // East: The current index as a column index must be lesser 
    //       than the width - 1 or else going east will 
    //       roundtrip to the next row
    if (current % width &lt; width - 1)
    {
      neighbor = current + 1;
      Enqueue(neighbor);

      // North-East and South-East are easily found in the same way as North and South
      // NE
      Enqueue(neighbor - width);
      // SE
      Enqueue(neighbor + width);
    }

    // West: This is analogue to East: current as a column index must be greater than 0
    //       or else going west will roundtrip to the previous row.
    if (current % width &gt; 0)
    {
      neighbor = current - 1;
      Enqueue(neighbor);

      // Completely analogue to NE an SE
      // NW
      Enqueue(neighbor - width);
      // SW
      Enqueue(neighbor + width);
    }
  }
}
</code></pre>
    </div>