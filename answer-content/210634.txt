<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some comments on your code:</p>

<ul>
<li>I assume the structure of the input data is to be taken as it is: one long list where only the 1 out of 8 values contribute to the output.</li>
<li><code>c = 0</code> is defined but never used</li>
<li>It is not recommended to use compound statements (see <a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow noreferrer">PEP8 - "Other Recommendations"</a>): use a separate line for an <code>if</code> and the statement under condition.</li>
<li><code>/</code> performs a true division (giving a float). To avoid switching between <code>float</code> and <code>int</code>, use integer division: <code>//</code></li>
<li><code>if i == 512: break</code> could me omitted if you would limit the range of the <code>for</code> loop immediately. Instead of <code>len(data)</code> use <code>min(512*16, len(data))</code></li>
<li>The multiplication <code>i * 16</code> can be avoided if you use the <code>step</code> argument of <code>range()</code> so that <code>i</code> takes multiples of 16.</li>
<li>Instead of <code>"%04x " % d</code> use the newer <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">f-strings</a></li>
<li>Instead of calculating <code>d</code>, you could just pass <code>high</code> and <code>low</code> to the string template and format each independently.</li>
<li>Instead of <code>if (i % 16) == 15:</code> you could use a nested loop that deals with one output line</li>
<li>Your code produces a blank at the end of each line. That seems unnecessary. With <code>" ".join</code> you would not have this extra blank.</li>
<li><code>out</code> has a terminating <code>\n</code>, but <code>print</code> also prints a newline as terminator (by default). With <code>"\n".join</code>you would not have this extra newline</li>
</ul>

<p>Here is how it could look:</p>

<pre><code># Set a maximum to the output
length = min(512*16, len(data))

# Format data
lines = []
for line in range(0, length, 256):
    items = []
    for i in range(line, min(line+256, length), 16):
        items.append(f"{data[i+1]:02x}{data[i]:02x}")
    lines.append(" ".join(items))
out = "\n".join(lines)

# Output
print(out)
</code></pre>

<p>Here is how the above data formatting translates when using list comprehension. You can split the expression over multiple lines to improve readability: </p>

<pre><code># Format data
out = "\n".join([
            " ".join([
                f"{data[i+1]:02x}{data[i]:02x}"
                for i in range(line, min(line + 256, length), 16)
            ])
            for line in range(0, length, 256)
        ])
</code></pre>
    </div>