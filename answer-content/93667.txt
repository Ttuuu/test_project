<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is an alternative approach using set logic, which is <code>O(n)</code> in the average case:</p>

<pre><code>n = 181
n2 = n//2
numbers = [80, 98, 83, 92, 1, 38, 37, 54, 58, 89]
goodnums = {n-x for x in numbers if x&lt;=n2} &amp; {x for x in numbers if x&gt;n2}
pairs = {(n-x, x) for x in goodnums}
</code></pre>

<p>What this does is first filter out values that are greater than 1/2 the target value, since one number in each pair must be that way.  Then it subtracts the remaining numbers from the target (in this case <code>181</code>).  This gets the other value from the pair.  Then it uses set logic to extract only those values where the other value is present in the original list of numbers.</p>

<p>So to put it more briefly, it finds all values <code>x</code> such that <code>181-x</code> is also present in the list.</p>

<p><strong>Edit</strong>: If you don't want to include cases where both members of the pair are equal and it only exists once, such as <code>n=2</code> and <code>numbers = [1]</code>, as Gareth pointed out, add this to the end:</p>

<pre><code>if not n%2 and (n2, n2) in pairs and numbers.count(n2) == 1:
   pairs.remove((n2, n2))
</code></pre>

<p>This will check if <code>n</code> is even and, if so, if there is exactly one value where <code>x==n//2</code>, if so remove <code>(n//2, n//2)</code> from the results.</p>
    </div>