<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not much to complain for your first script, congrats.</p>

<p>I'd perhaps change it so that all files are <code>rsync</code>ed with the same
command, if you look at the <code>rsync</code> documentation multiple sources may
be specified for a single target.  This would be more relevant for
bigger programs - you usually want to avoid running multiple processes
when you can have a single one do all the work, it makes bookkeeping
easier in the long run (and it's faster).  I'll leave that as an
exercise for the reader though.</p>

<p>Since <code>expanduser</code> will perform tilde expansion I'd not split off <code>home</code>
like this, just expand it twice, it's more readable IMO if you know what
<code>~</code> means for paths (and most readers will know).  If you do keep it
like this, then consistently use <code>os.path.join</code> instead of concatenating
<code>/</code> manually.  Actually the one use of <code>os.path.join</code> in the script is
wrong, it should be <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer"><code>os.path.join(src, item)</code></a>.</p>

<p>The <code>isatty</code> is a nice touch.</p>

<p>For executing the process you're concatenating all arguments and then
also run them through a shell - the concatenating is problematic when
you have filenames with spaces in them, so in general I'd really rather
go with the list argument approach.  (Also see the <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">security notes</a> on the
documentation page of <code>subprocess</code>.)  If you're going through the shell
there's also no need for the manual <code>expanduser</code>; you can easily test
this if you prefix the <code>rsync</code> with <code>echo</code> (like I did to test the
script).</p>

<p>Looking at the documentation <code>Popen</code> can of course be used like this,
but it's not the most convenient option, I'd say either <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>call</code></a> or
<a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_call" rel="nofollow noreferrer"><code>check_call</code></a> are more appropriate here - both wait for the process to
complete, while the latter also checks the exit status, which is vital
for more complex programs (without it you don't know if the process
completed successfully)!</p>

<pre><code>#!/usr/bin/python

import os
from os.path import expanduser
import sys
import subprocess

dotfiles = [
    '.ackrc',
    '.tmux.conf',
    '.vimrc',
    '.zshrc',
    '.gitconfig',
    '.ssh/config',
    '.zsh/MyAntigen.hs',
    '.vim/colors/dracula.vim'
]

src = expanduser('~')
dest = expanduser('~/Dropbox/Dotfiles')

rsync = ['rsync', '--times']
if sys.stdout.isatty():
    rsync.append('--progress')

for item in dotfiles:
    subprocess.check_call(rsync + [os.path.join(src, item), dest])
</code></pre>
    </div>