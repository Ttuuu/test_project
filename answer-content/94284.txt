<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><strong>Indentation and whitespace</strong><br>
The Ruby convention is 2 spaces of indentation, and blank lines between methods. I'd also recommend spaces between arguments and operators, e.g. <code>@hour = hour</code>.</p></li>
<li><p><strong>Naming</strong><br>
Don't use underscores in class names. It's clear that <code>Regular_ParkingSpace</code> is a kind of <code>ParkingSpace</code> because it inherit directly from that parent class. A name like <code>RegularSpace</code> would be more straightforward and less of a mouthful.</p></li>
<li><p><strong><code>attr_accessor</code></strong><br>
You're adding a number of synthesized accessor methods with <code>attr_accessor</code> but you never use those methods. Instead you access instance variables directly. My advice is to <em>always</em> use accessor methods when you can. <em>However,</em> <code>attr_accessor</code> generates both readers and writers, and they're <em>public</em>. Which means that external code can just say <code>parking_lot.size = 9999</code>, which doesn't make sense. Of course, you never actually use the <code>size</code> attribute for anything, which brings me to my next point:</p></li>
<li><p><strong>Junk code</strong><br>
It sounds harsh, but I just mean "code that doesn't actually do anything". For example the <code>@size</code> variable in <code>ParkingLot</code> which is never used. Or <code>Regular_ParkingSpace</code> having a <code>payment</code> method that just calls <code>super</code> - something that'd happen automatically if the method wasn't there.</p></li>
<li><p><strong>Dangerous assumptions</strong><br>
Speaking of the parking lot's size, your way of determining the number of handicap spaces is not vary robust. You just assume it's going to be one tenth of the spaces. Well, what if the parking lot has 8 spaces in total? Then you have 0.8 of a handicap space, and 7.2 regular ones. Or what if it has 213 spaces? Then you have 21.3 handicap spaces. Neither situation makes any sense. For that matter who says there are any handicap spaces at all? There's no reason - that I know if - to assume there's any proportional relationship between the two numbers.</p></li>
<li><p><strong>Outright bugs</strong><br>
Following from the above: The way you check for remaining spaces assumes integers. If the remaining number of spaces is <em>anything</em> above zero, you assume that that means there's a whole parking space there. So, in turn, you assume that whatever <code>size</code> was originally passed to <code>ParkingLot.new</code> is cleanly divisible by 10. But that's not given.<br>
End result is that if I make a parking lot with 8 spaces, I can fit 9 vehicles: 1 handicap vehicle (in the 0.8 of a space), and 8 regular ones (the first 7 get a space each, and the last one has to fit in 0.2 of a space).<br>
Oh, and I can just park a car for zero hours, and I'll pay zero rupees. </p></li>
<li><p><strong>Pointless classes</strong><br>
You parking lot classes don't really serve any purpose being classes. You instantiate one of them, only to call <code>payment</code> and then discard the instance. In the end, you classes could be replaced with methods, or even just an expression: <code>a * b</code>.  </p></li>
<li><p><strong>Informal exceptions</strong><br>
Don't just <code>raise</code> a string; create an exception class that inherits from <code>StandardError</code> and raise it instead.</p></li>
</ol>

<p>In other words, there's a lot going on here. Making it "more object-oriented" is a secondary concern. And with no concept of time passing, hourly rates don't really make much difference. It's a little weird that the cost gets calculated immediately when parking, and "paid" when the car's retrieved. A real parking lot would do one or the other: Pre-pay for x amount of time (with the possibility of an extra fee if you overstay), or pay for time used when leaving. This is neither of those.</p>
    </div>