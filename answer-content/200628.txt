<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Basic Review</h2>

<p>Look below for algorithm ideas:</p>

<p>You are not modifying the input strings. So they should be passed by const reference to prevent accidents:</p>

<pre><code>void checkPermut(std::string const&amp; sentence1, std::string const&amp; sentence2)
                             ^^^^^                         ^^^^^
</code></pre>

<p>You don't need to check if a value exists in a map like this:</p>

<pre><code>        if (dict1.find(c) == dict1.end())
        {
            dict1.insert(std::pair&lt;char, int&gt;(c, 1));
        }
        else
        {
            dict1[c] == dict1[c] + 1;
        }
</code></pre>

<p>Use <code>operator[]</code> If it does not exist the item will be created (the value is "zero" initialized" and returned as a reference. You can replace the above code with the line:</p>

<pre><code>        ++dict1[c];
</code></pre>

<p>Be careful when getting things by reference (accidental modification can happen). Unless you need to modify something, get by const reference.</p>

<pre><code>    for (char const&amp; c : sentence2)
              ^^^^^
</code></pre>

<p>But in this case I would get by value:</p>

<pre><code>    for (char c : sentence2)
</code></pre>

<p>There is an easy way to make pairs that does not require all the type info:</p>

<pre><code>            std::pair&lt;char, int&gt;(c, 1);
</code></pre>

<p>Simpler to write:</p>

<pre><code>            std::make_pair(c, 1); // The function gets the type from
                                  // the parameters and creates the
                                  // correct type of underlying pair.
</code></pre>

<p>As a side note. technically you may not want to make the assumption that <code>std::map</code> uses a pair internally. This is why <code>std::map</code> has an internal type <code>value_type</code> so you can use that and not make any assumptions about the type used internally.</p>

<pre><code> using Map      = std::map&lt;char, int&gt;;
 using MapValue = typename Map::value_type;
 Map  dict1;
 ...
 dict1.insert(MapValue(c, 1));
</code></pre>

<p>There is a subtle bug here:</p>

<pre><code>    for (char &amp; c : sentence2)
    {
        if (dict1.find(c) == dict1.end())
        {
            arePermut = false;
            std::cout &lt;&lt; "Not permutations." &lt;&lt; std::endl;
            break;
        }
        else if (dict1[c] != dict2[c])
        {
            arePermut = false;
            std::cout &lt;&lt; "Not permutations." &lt;&lt; std::endl;
            break;
        }
    }
</code></pre>

<p>You check all the letters from sentence2 are exactly the same as in sentence1. But that may not be enough. You need to check the other way.</p>

<pre><code>    // Assume: 
    Sentence1 = "BigZ"
    Sentence2 = "Big";  // Your algorithm will match.
</code></pre>

<p>Note most containers are comparable.</p>

<p>There is a subtle bug here:</p>

<pre><code>        if (dict1 != dict2)
        {
            std::cout &lt;&lt; "Not permutations." &lt;&lt; "\n";
        }
        else
        {
            std::cout &lt;&lt; "Not permutations." &lt;&lt; "\n";
</code></pre>

<p>Note: The <code>operator&gt;&gt;</code> reads a single space separated word. Your code above suggests sentences. Is this what you want?</p>

<pre><code>    std::cin &gt;&gt; somestring1 &gt;&gt; somestring2;
</code></pre>

<p>Use <code>std::getline(std::cin, somestring1)</code> to read a line.</p>

<p>This is redundant in <code>main()</code>:</p>

<pre><code>    return 0;
</code></pre>

<h2>Algorithm</h2>

<p>We know you can simply compare the containers. But you can optimize this. By subtracting characters from sentence two from the container. If any become negative then you can exit early.</p>

<p>Also do you want to compare space characters? This makes it really hard to have anagram sentences if the word count has to be the same.</p>

<pre><code>bool checkPermut(std::string const&amp; sentence1, std::string const&amp; sentence2)
{
    using Map = std::map&lt;char, int&gt;;
    Map count1;
    Map zero;

    for(auto c: sentence1) {
        if (std::isspace(c) {
            continue;
        }
        ++count1[c];
        zero[c] = 0;
    }
    for(auto c: sentence2) {
        if (std::isspace(c) {
            continue;
        }
        if (--count1[c] &lt; 0) {
            return false; // exit early if we go negative.
        }
        zero[c] = 0;
    }
    return count1 == zero;  // Make sure all letters have reached zero.
}      
</code></pre>
    </div>