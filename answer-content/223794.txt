<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A view more suggestions with explanation to the current source code (first <code>BlackRedBST</code>).</p>

<p>I deleted <code>public static final NodeRB NILL = null;</code> because <code>null</code> can be used instead of <code>NILL</code> for less code.</p>

<p>I also deleted <code>public static final boolean RED = true;</code> and <code>public static final boolean BLACK = false;</code> because color is never used (in the given code).</p>

<p>There is no access modifier for <code>NodeRB root;</code>. Class members should be "as private as possible" to prevent direct modifications from outside (threads and so on) and created appropriate getter and setter methods.</p>

<p>There is a nested <code>if-else</code> tree. I always try to do as less <code>if-else</code> branches as possible with respect to a better readable sourcecode. I stop each if-branch with a <code>return;</code> to ensure correct code reaction.</p>

<p>The <code>tree.p == null</code> branch of <code>if(tree.p == NILL || tree.p == null)</code> was never covered so it is removed as well for less code and a smaller footprint. [1]</p>

<p>The <code>print_leaf</code> branch was never fully covered in the <code>if(tree.p == NILL || tree.p == null)</code> branch thus I removed <code>print_leaf</code> as well.</p>

<p>Then I refactored similar code to the <code>private void printLeaf(final NodeRB tree, final String indent, final String indentSuffix1, final String indentSuffix2, final String indentSuffix3)</code> method and applied it where necessary.</p>

<p>The constructor <code>public BlackRedBST()</code> does nothing special. Initializing <code>root = null;</code> doesn't matter. The constructor is removed.</p>

<p>Since colors aren't used its renamed to <code>BinarySearchTree</code>.</p>

<pre><code>class BinarySearchTree {

    private Node root;

    public void printTree(final Node tree, String indent) {
        if (tree == null) {
            System.out.print(indent + " |-+*\n");
            return;
        }
        indent += " ";
        if (tree.getParentNode() == null) {
            printLeaf(tree, indent, " ", "+", " ");
            return;
        }
        if (tree.getParentNode().getRightNode() == tree) {
            printLeaf(tree, indent, " ", "|+", "|");
            return;
        }
        printLeaf(tree, indent, "|", "|+", " ");
    }

    private void printLeaf(final Node tree, final String indent, final String indentSuffix1, final String indentSuffix2, final String indentSuffix3) {
        printTree(tree.getRightNode(), indent + indentSuffix1);
        System.out.print(indent + indentSuffix2 + tree.getValue() + "\n");
        printTree(tree.getLeftNode(), indent + indentSuffix3);
    }

    public Node getRoot() {
        return root;
    }

    public void setRoot(final Node root) {
        this.root = root;
    }

}
</code></pre>

<p>The <code>NodeRB</code> class looks like a model class so i made each attribute <code>private</code> and used getter and setter methods for accessing the data.</p>

<p>Level isn't used therefore its removed.</p>

<p>Since colors aren't used its renamed to <code>Node</code>.</p>

<pre><code>public class Node {

    private int value;
    private Node parentNode;
    private Node leftNode;
    private Node rightNode;

    public Node(final int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public Node getParentNode() {
        return parentNode;
    }

    public void setParentNode(final Node parent) {
        parentNode = parent;
    }

    public Node getLeftNode() {
        return leftNode;
    }

    public void setLeftNode(final Node left) {
        leftNode = left;
    }

    public Node getRightNode() {
        return rightNode;
    }

    public void setRightNode(final Node right) {
        rightNode = right;
    }

}
</code></pre>

<p>The <code>PrettyPrintTree</code> class uses the constructors and the getter and setter methods of <code>Node</code> as intended.</p>

<pre><code>public class PrettyPrintTree {

    public static void main(final String[] args) {

        final BinarySearchTree bst = new BinarySearchTree();

        // this is a sample, but a method to add the nodes should be writen
        bst.setRoot(new Node(1));

        final Node root = bst.getRoot();
        root.setLeftNode(new Node(2));

        final Node leftNode = root.getLeftNode();
        leftNode.setParentNode(root);
        root.setRightNode(new Node(3));

        final Node rightNode = root.getRightNode();
        rightNode.setParentNode(root);

        bst.printTree(root, "\t");
    }

}
</code></pre>

<hr>

<p>[1] Codecoverage was used in the Eclipse IDE with the EclEmma plugin.</p>
    </div>