<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't need the additional <code>_footype</code> variable and a computer “wrapper” property. The protocol requirement can be satisfied with a lazy stored property:</p>

<pre><code>struct Bar: Foo {
    lazy var footype = calculateFoo()

    func calculateFoo() -&gt; Double {
        print("calc")
        return 3.453
    }
}
</code></pre>

<p>Now <code>footype</code> is read-only for instances of type <code>Foo</code> </p>

<pre><code>var foo: Foo = Bar()
print(foo.footype)
foo.footype = 12.3 // Error: Cannot assign to property: 'footype' is a get-only property
</code></pre>

<p>but as a property of <code>Bar</code> it is read-write:</p>

<pre><code>var bar = Bar()
print(bar.footype)
bar.footype = 12.3 // OK
</code></pre>

<p>If assigning to the <code>footype</code> property should be inhibited then you can mark it with a <code>private(set)</code> access modifier:</p>

<pre><code>struct Bar: Foo {
    private(set) lazy var footype = calculateFoo()

    func calculateFoo() -&gt; Double {
        print("calc")
        return 3.453
    }
}

var bar = Bar()
print(bar.footype)
bar.footype = 12.3 // Cannot assign to property: 'footype' setter is inaccessible
</code></pre>

<p>With respect to</p>

<blockquote>
  <p>However, I would not put calculateFoo in the protocol because it sounds like an implementation detail.</p>
</blockquote>

<p>Yes, in your current code it is an implementation detail of the <code>Bar</code> class. The only use would be that a caller can “enforce” the evaluation:</p>

<pre><code>var foo: Foo = Bar()
foo.calculateFoo()
</code></pre>

<p>The situation would be different if there were a way to provide a default implementation in an extension method:</p>

<pre><code>protocol Foo {
    var footype: Double { mutating get }

    func calculateFoo() -&gt; Double
}

extension Foo {
    var footype: Double {
        // Call calculateFoo() on first call only ...
    }
}
</code></pre>

<p>so that conforming to the protocol is sufficient, i.e. <code>Bar</code> only has to implement the <code>calculateFoo()</code> method, but not the <code>footype</code> property.</p>

<p>But I am not aware of a way to do this <em>lazily</em> so that the function is called only once. The reason is that extensions cannot add stored properties to a type.</p>

<p>For sub<em>classes</em> of <code>NSObject</code> you can come around this problem with “associated objects,” but not for structs.</p>
    </div>