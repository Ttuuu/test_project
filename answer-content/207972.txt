<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So after talking with other students and some drawings I realised that I have three choices: use the definition of my friend which is faster than my original function, use my original function OR create an efficient datastructure to deal with the look-up complexity. </p>

<p>So here goes the fresh function which in comparison with my old function is a factor 100 time faster: </p>

<pre><code>def another_Orthogonal(ns):
   assert(np.sqrt(ns) % 1 == 0),"Please insert an even number of samples"
   n = int(np.sqrt(ns))
   # Making a datastructure of a dict with coordinate tuples of a bigger grid with subcoordinate of sub-grid points
   blocks = {(i,j):[(a,b) for a in range(n) for b in range(n)] for i in range(n) for j in range(n)}
   points = []#np.empty((n,2))
   append = points.append # tips of python to fasten up append call
   for block in blocks:
       point = random.choice(blocks[block])
       lst_row = [(k1, b) for (k1, b), v in blocks.items() if k1 == block[0]]
       lst_col = [(a, k1) for (a, k1), v in blocks.items() if k1 == block[1]]

       for col in lst_col:
           blocks[col] = [a for a in blocks[col] if a[1] != point[1]]

       for row in lst_row:
           blocks[row] = [a for a in blocks[row] if a[0] != point[0]]
      #Adjust the points to fit the grid they fall in  
      point = (point[0] + n * block[0], point[1] + n * block[1])
      append(point)

    return points
</code></pre>

<p>So the function does return only the coordinates of where the randomly chosen point is set and where no other points should be set by looking at at the row or column coordinates of the block and eliminating those option as choice.</p>

<p>The random value themselves on these points are calculated in another function that scales the values of the interval (0, numberOfpoints) to a desired interval where one could sample from. </p>

<p>The scaling function is the following :</p>

<pre><code>def scale_points(points):
    p = another(points)
    maximum = points 
    scaling =[ 1/maximum * i for i in range(len(p))]
    min_ = -2.0
    max_ = 2.0
    result = np.zeros((points,2))
    anti_res = np.zeros((points,2)) # this is for antithetic variables

    for idx, scale in enumerate(scaling):

        x =  min_ + np.random.uniform(p[idx][0]/maximum, p[idx][0]/maximum +1/maximum ) *4  # 4 is just max - min which is in my case 4
        y =  min_ + np.random.uniform(p[idx][1]/maximum, p[idx][1]/maximum + 1/maximum ) * 4
        result[idx, :] = [x,y]
        anti_res[idx,:] = [x*-1.0, y*-1.0] # antithetic variables

    return result, anti_res
</code></pre>
    </div>