<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have not looked too deeply into the problem and I am guessing that there may be some function that produces a unique hash based on the sequence and independent of starting position. That would then only require that you iterate each array to create the hash and then compare to see if they match. That would give you a O(2n) solution where n is the size of one of the arrays.</p>

<p>If such hashing function does not exist, the brute force approch can easily be divided up and done in parallel. In javascript you would use webWorkers</p>

<p>There is also the approch that can use the GPU and the basic canvas 2D API but that has some limits on the size of the input arrays and the integer size of the values. Or via WebGL which is a little more flexible, but again the bottle neck is converting the arrays to an appropriate data format that the GPU can handle. The are some libraries out there that simplify the process, but you would only start to see any gains for very large arrays.</p>

<p>So to make some minor changes to your solution. To remove the <code>pop</code> and <code>unshift</code>  you can use the <code>%</code> operator to cycle past the end back to the start (see inner loop) </p>

<p>And the using continue to jump out of the loops is hacky to say the least. A little smarter logic and you don't need the goto in disguise.</p>

<p>So the function below is not an improvement in complexity, but rather a improvement of efficiency. </p>

<pre><code>function canRotate(a, b) {
    var pos, count;
    const len = a.length;
    if (len === b.length) { 
        pos = 0;
        while (pos &lt; len) {
            count = 0;
            while (count &lt; len &amp;&amp; a[count] === b[(pos + count) % len]) {
                count ++;
            }
            if (count === len) { return true }
            pos ++;
        }
    }
    return false;
}
</code></pre>

<p>You could also use a regExp to do the search but again its not an improvement in complexity, just less code, and may be a lot faster in many situations (however the joins may need a separator to work on all cases)</p>

<p>Just join the second array and double it by add to its self, then join the first and convert to a regExp (or use String.API ) to test if the first array has a match in the second.</p>

<pre><code>function canRotate(a,b){
    if(a.length === b.length) { 
        const strB = b.join("");
        return new RegExp(a.join(""),"").test(strB+strB);
    }
    return false;
}
</code></pre>

<p>Or using a asymmetrical separator ie has two different characters.</p>

<pre><code>function canRotate(a,b){
    if(a.length === b.length) {
        const jStr = "=&gt;"; 
        const strB = b.join(jStr);
        return new RegExp(a.join(jStr),"").test(strB + jStr + strB);
    }
    return false;
}
</code></pre>

<p><strong>Update</strong> 
This answer assumes that the arrays contains positive values of the JS 32bit signed int. </p>

<p>Obliviously you should take care with the regExp solutions and only use it if array content can be joined without breaking the sequence uniqueness, and does not contain regExp tokens.</p>
    </div>