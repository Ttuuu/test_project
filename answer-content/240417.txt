<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>

<p>Your approach is fine, and your code (including <code>≠⊆⊢</code>) is fairly idiomatic. Handling the edge case by always appending a space and dropping it at the end is standard procedure, so no, you don't need a <a href="https://stackoverflow.com/a/11227902/5306507">branch</a> here.</p>

<h3>Split up your code in sections</h3>

<p>You begin with setting up a couple of constants. Consider inserting a blank line to gently separate these from the main code.</p>

<h3>Inline comments</h3>

<p>Well-written APL code tends to have short lines, so there's generally enough space to include comments. This allows a simple hierarchy of comments:</p>

<ul>
<li>Full-line comments for introductions to sections.</li>
<li>End-of-line comments for code explanations.</li>
</ul>

<h3>Consistency</h3>

<p>You use intermediary variables for rotating and appending "w" but not for appending "ay ".</p>

<h3>Array approach to conditional concatenation</h3>

<p><code>(,∘'w')¨@(1∘=≢¨)</code> does two loops:</p>

<ol>
<li><code>(1∘=≢¨)</code> (which could be <code>(1=≢¨)</code> too) to determine which words need appending.</li>
<li><code>(,∘'w')¨</code> (which could be <code>,∘'w'¨</code> or <code>'w',¨⍨</code> too) to do the appending.</li>
</ol>

<p>A more holistic array approach is to append <em>to every</em> word, and instead modify <em>what</em> is appended. That is, <em>collapse the appendix to shape 0 for words of length different from 1</em>. Rephrased, this becomes <em>keep the appendix as-is for words of length equal to 1</em>, or <code>'w'/⍨1=≢</code>. It becomes a <em>"conditionally" append</em> function in the form of <code>⊢,'w'/⍨1=≢</code>, which you could then apply to each with <code>(⊢,'w'/⍨1=≢)¨</code>. However, you might want to…</p>

<h3>Reduce ¨pepper¨</h3>

<p>Some APLers call code with too many <code>¨</code>s "too peppered" referring to the many tiny dots in foods that contain lots of black pepper. You may want to consider fusing the loops by defining the constituent transformation functions and applying them together in a single loop. Appropriate naming of the functions allows shortening the comments to become clarifications of the names, which can even make a comment obsolete.</p>

<h2>Revised code</h2>

<pre><code>PigLatin←{
  ⍝ Monadic function expecting character scalar or character vector and returning character vector.
  ⍝ Translates an English sentence into Pig Latin.
  ⍝ e.g. 'I always run fast' becomes 'Iway alwaysay unray astfay'.

  vowels ← 'aeiouAEIOU'
  Words ← ' '(≠⊆⊢),

  Rotate ← {⍵ ⌽⍨ ¯1+⊃⍸ ⍵∊vowels}  ⍝ all words until a vowel is at the front
  Add_w ← ⊢,'w'/⍨1=≢              ⍝ if word has length 1
  Add_ay ← ,∘'ay '

  ¯1↓∊ Add_ay∘Add_w∘Rotate¨ Words ⍵
}
</code></pre>

<h2>Other approaches</h2>

<p>Writing APL is fun<a href="https://chat.stackexchange.com/search?q=apl+is+fun&amp;user=&amp;room=52405">*</a>, so APLers tend to write everything from scratch every time, instead of using the tools at hand. In this case, Perl-style regular expressions might be a help.</p>

<h3>Using regex to process words</h3>

<p>It is easy to apply a function to each word using <code>'\w+' ⎕R {MyFn ⍵.Match}</code>:</p>

<pre><code>PigLatinWord←{
  vowels ← 'aeiouAEIOU'

  Rotate ← {⍵ ⌽⍨ ¯1+⊃⍸ ⍵∊vowels}
  W ← ⊢,'w'/⍨1=≢
  Ay ← ,∘'ay'

  Ay W Rotate ⍵
}
PigLatinRegex ← '\w+' ⎕R {PigLatinWord ⍵.Match}
</code></pre>

<p>The <code>\w+</code> pattern matches runs of <strong>w</strong>ord characters.</p>

<p>If this was a common thing, we could define a utility operator that applies a text transformation on words:</p>

<pre><code>_OnWords ← {'\w+' ⎕R (⍺⍺{⍺⍺ ⍵.Match}) ⍵}
PigLatinOnWords ← PigLatinWord _OnWords
</code></pre>

<p>An alternative coding which avoids passing the operand multiple times:</p>

<pre><code>_OnWords ← {'\w+' ⎕R (⍺⍺⍎∘'Match') ⍵}
PigLatinOnWords ← PigLatinWord _OnWords
</code></pre>

<h3>Doing the entire job with regexes</h3>

<p>That said, <code>⎕R</code> actually has a fancy feature that allows running multiple search patterns in parallel (for every starting character the patterns are tested in order) each with their own substitution pattern. This makes it easy to catch and process edge cases before the main transformations have a chance to kick in.</p>

<pre><code>PigLatinRegexes ← '\w\b' '([^aeiou ]*)(\w+)' ⎕R '&amp;way' '\2\1ay' ⍠1
</code></pre>

<p>Here, we have two patterns:</p>

<ol>
<li><code>\w\b</code> <strong>w</strong>ord character, word <strong>b</strong>oundary: a 1-character word.</li>
<li><code>([^aeiou ]*)(\w+)</code> any consonants (group 1), <strong>w</strong>ord characters (group 2): any other word</li>
</ol>

<p>And the corresponding substitution patterns:</p>

<ol>
<li><code>&amp;way</code> the match followed by "way"</li>
<li><code>\2\1ay</code> group 2, group 1 (which can be empty), "ay"</li>
</ol>

<p>Finally, <code>⍠1</code> makes the derived function ignore case.</p>
    </div>