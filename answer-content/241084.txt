<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Available doors</h2>

<p>First of all, this:</p>

<pre><code>    self._doors = {1: None, 2: None, 3: None}
</code></pre>

<p>should be calling <code>available_doors</code>, i.e.</p>

<pre><code>self._doors = {i: None for i in available_doors()}
</code></pre>

<p>However, <code>available_doors</code> needn't be a function; it can be a global constant:</p>

<pre><code>AVAILABLE_DOORS = [1, 2, 3]
</code></pre>

<p>Better yet, make it a <code>set</code>:</p>

<pre><code>AVAILABLE_DOORS = {1, 2, 3}
</code></pre>

<p>Better yet, pass it as a parameter to the class:</p>

<pre><code>def __init__(self, available_doors: set):
    self._doors = available_doors
    self._init_doors()
</code></pre>

<p>Better yet, don't even care about the collection; simply care about the number of doors:</p>

<pre><code>def __init__(self, n_doors: int):
    self._n_doors = n_doors
</code></pre>

<p>Then this:</p>

<pre><code>    self.__doors = {n: 'goat' for n in range(1, 4)}
</code></pre>

<p>can actually use it:</p>

<pre><code>self._doors = {n: 'goat' for n in range (1, 1 + self._n_doors)}
</code></pre>

<p>In other words, the number of doors should be parametric, and only kept in one place.</p>

<h2>Redundant init</h2>

<p>Since <code>reinitialize</code> just calls <code>_init_doors</code>, why not have the contents of <code>_init_doors</code> in <code>reinitialize</code>, deleting <code>_init_doors</code>?</p>

<h2>Stringly-typed results</h2>

<p>This:</p>

<pre><code>if item == 'car':
    return 'success'
return 'fail'
</code></pre>

<p>would make more sense as a boolean return value:</p>

<pre><code>return item == 'car'
</code></pre>

<h2>Counting successes</h2>

<pre><code>successes = len(list(filter(lambda x: x == 'success', results)))
</code></pre>

<p>is better written as</p>

<pre><code>successes = sum(1 for x in results if x == 'success')
</code></pre>

<p>If you take the boolean suggestion above, it will just be</p>

<pre><code>successes = sum(1 for x in results if x)
</code></pre>

<p>Technically, since <code>bool</code> can be cast to an <code>int</code>, this is equivalent to</p>

<pre><code>successes = sum(results)
</code></pre>
    </div>