<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My problem with the question remains so I leave my first answer unchanged and offer this second one to say <em>"thank you for the fun"</em>.</p>

<p>The following code is (1) not tidy, (2) not optimal, (3) is a guide based on constraints I made up.  It targets "a small denominator" for the irrational number and limits the surd to "nth roots of (roughly) 2..11 for n in [1(trivial),2,3,4,5]".</p>

<p><strong>Output</strong> for this sample</p>

<pre><code>0.0526315789473684 ~= 1 / 19, error = 0
19 ~= 19 / 1, error = 0
1.27528745518159 ~=  7 ^ (1 / 3) * 2 / 3, error = 0
180.220806218631 ~=  1 / 7 ^ (1 / 3) * 1379 / 4, error = 2.8421709430404E-14
3.73919839064901E-06 ~=  1 / 10 ^ (1 / 2) * 1 / 84571, error = -2.23732252003866E-13
6.35663726410332E-05 ~=  1 / 2 ^ (1 / 5) * 7 / 95866, error = -6.62044705623983E-13
</code></pre>

<p><em>Notice how the last two outputs differ from their input expressions.  This is all approximate!</em></p>

<p><strong>Code</strong></p>

<pre><code>using System;
using System.Collections.Generic;

using ValueRootPair = System.Tuple&lt;int, double&gt;;

namespace ConsoleApp1
{
  class Program
  {
    // Store the best guess so far. Naming as follows: val ~= x^((rootUnder ? -1 : +1)/n) * num / denom
    class Solution
    {
      public bool rootUnder;
      public int n, x;
      public double val, num, denom;
    }

    const double compareTolerance = 1.0E-12;

    // Returns the &lt;paramref name="numerator"/&gt; and &lt;paramref name="denominator"/&gt; for a rational approximation of &lt;paramref name="value"/&gt;
    static void Frac(double value, out long numerator, out long denominator)
    {
      bool isNegative = value &lt; 0;
      value = Math.Abs(value);

      numerator = 1L;
      denominator = 1L;
      double fraction = (double)numerator / denominator;

      while (Math.Abs(fraction - value) &gt; compareTolerance)
      {
        if (fraction &lt; value)
          numerator++;
        else
        {
          denominator++;
          numerator = (long)(value * denominator);
        }
        fraction = (double)numerator / denominator;
      }
    }

    // Generates series of &lt;paramref name="qty"/&gt; (value, root) tuples, for values &gt;= 2 where root = value ^ &lt;paramref name="degree"/&gt;. Skips square roots of squares, cube roots of cubes etc.
    static IEnumerable&lt;ValueRootPair&gt; Roots(int degree, int qty = 10)
    {
      int v = 2, count = 0;
      while (count &lt; qty)
      {
        var root = Math.Pow(v, 1.0 / degree);
        if (Math.Abs(Math.Round(root) - root) &gt; compareTolerance)
        {
          count++;
          yield return new ValueRootPair(v, root);
        }
        v++;
      }
    }

    static string Test(double value)
    {
      var bestGuess = new Solution();
      long num, denom;
      double v = value;
      int degree = 1;
      var vrp = new ValueRootPair(1,1);

      void Update(bool surdUnderneath = false)
      {
        bestGuess.rootUnder = surdUnderneath;
        bestGuess.num = num;
        bestGuess.denom = denom;
        bestGuess.n = degree;
        bestGuess.x = vrp.Item1;
        bestGuess.val = v;
      }

      // Start by getting a rational approximtion without a surd factor...
      Frac(v, out num, out denom);
      Update();

      for (degree = 2; degree &lt; 6; degree++) // roots of degree 2,3,4,5
      {
        foreach (var surd in Roots(degree)) // default to 10 of each
        {
          vrp = surd;
          v = value / vrp.Item2; // take out surd
          Frac(v, out num, out denom);
          if (denom &lt; bestGuess.denom) Update(false); // Target small denominator
          if (denom &lt; 100) goto breakout; // stop if 2 digit denominator has been found

          v = value * vrp.Item2; // take out 1/surd
          Frac(v, out num, out denom);
          if (denom &lt; bestGuess.denom) Update(true);
          if (denom &lt; 100) goto breakout; // stop if 2 digit denominator has been found
        }
      }
      breakout:
      var ret = $"{value} ~= ";
      if (bestGuess.x != 1)
        ret += $"{(bestGuess.rootUnder ? " 1 /" : "")} {bestGuess.x} ^ (1 / {bestGuess.n}) * ";
      ret += $"{bestGuess.num} / {bestGuess.denom}";
      ret += $", error = {value - bestGuess.num / bestGuess.denom * Math.Pow(bestGuess.x, (bestGuess.rootUnder ? -1.0 : 1.0) / bestGuess.n)}";
      return ret;
    }

    static void Main(string[] args)
    {
      Console.WriteLine(Test(1.0 / 19));
      Console.WriteLine(Test(19.0));
      Console.WriteLine(Test(2.0 / 3 * Math.Pow(7, 1.0/3)));
      Console.WriteLine(Test(1379.0 / 4 / Math.Pow(7, 1.0/3)));
      Console.WriteLine(Test(1.0 / 267437));
      Console.WriteLine(Test(17.0 / 267437));
      Console.ReadKey();
    }
  }
}
</code></pre>

<p>I don't have time to redo my entire original answer but here is something very useful performance-wise that I came across today...
<strong>Vast Improvement on Frac()</strong></p>

<pre><code>//  Ref: https://rosettacode.org/wiki/Convert_decimal_number_to_rational 
public static double Frac2(double value, out long numerator, out long denominator, out int iterations, double tolerance = 1.0E-12, long maximumDenominator = 4096)
{
  /* a: continued fraction coefficients. */
  long a;
  var h = new long[3] { 0, 1, 0 };
  var k = new long[3] { 1, 0, 0 };
  long n = 1;
  bool neg = value &lt; 0;

  if (maximumDenominator &lt;= 1) maximumDenominator = 4096;

  double f = neg ? -value : value;

  // ReSharper disable once CompareOfFloatsByEqualityOperator
  while (f != Math.Floor(f)) { n &lt;&lt;= 1; f *= 2; }
  var d = (long)f;

  /* continued fraction and check denominator each step */
  for (iterations = 0; iterations &lt; 64; iterations++)
  {
    a = n != 0 ? d / n : 0;
    if (iterations != 0 &amp;&amp; a == 0) break;

    var x = d; 
    d = n; 
    n = x % n;

    x = a;
    if (k[1] * a + k[0] &gt;= maximumDenominator)
    {
      x = (maximumDenominator - k[0]) / k[1];
      if (x * 2 &gt;= a || k[1] &gt;= maximumDenominator)
        iterations = 65;
      else
        break;
    }

    h[2] = x * h[1] + h[0]; h[0] = h[1]; h[1] = h[2];
    k[2] = x * k[1] + k[0]; k[0] = k[1]; k[1] = k[2];
  }
  numerator = neg ? -h[1] : h[1];
  denominator = k[1];
  return value - (double)numerator / denominator;
}
</code></pre>

<p>See comment for link to my source,
Results are typically obtained many orders of magnitude faster.</p>

<p><strong>Test code</strong></p>

<pre><code>      foreach (double d in new double[] 
  { 
    0.9054054, 
    0.518518, 
    0.75, 
    0.4285714, 
    0.833333,
    0.90909, 
    3.14159265358979, 
    2.7182818284590451
  })
  {
    long num, denom;
    int it;
    var err = Frac(d, out num, out denom, out it, 1000000);
    Console.WriteLine($"{d,10} by Frac1(): {num,10} / {denom,-10} {err,25} in {it,10} iterations");
    err = Frac2(d, out num, out denom, out it, 1000000, /*d &gt;= 2 ? 65536 : */4096);
    Console.WriteLine($"{d,10} by Frac2(): {num,10} / {denom,-10} {err,25} in {it,10} iterations");
  }
</code></pre>

<p><strong>Comparative results Frac1() vs Frac2()</strong></p>

<pre><code> 0.9054054 by Frac1:         452704 / 500001 -7.89187621585974E-07 in 1000000 iterations
 0.9054054 by Frac2:             67 / 74     -5.40540534554879E-09 in       6 iterations
 0.518518 by Frac1:          259259 / 500000                     0 in  999997 iterations
 0.518518 by Frac2:              14 / 27     -5.18518518455302E-07 in       4 iterations
 0.75 by Frac1:                   3 / 4                          0 in       5 iterations
 0.75 by Frac2:                   3 / 4                          0 in       3 iterations
 0.4285714 by Frac1:         214287 / 500001 -1.74285371429272E-06 in 1000000 iterations
 0.4285714 by Frac2:              3 / 7      -2.85714285563898E-08 in       4 iterations
 0.833333 by Frac1:          416668 / 500001  -1.3333313333419E-06 in 1000000 iterations
 0.833333 by Frac2:               5 / 6      -3.33333333379926E-07 in       4 iterations
 0.90909 by Frac1:            90909 / 100000                     0 in  199997 iterations
 0.90909 by Frac2:               10 / 11     -9.09090909106958E-07 in       4 iterations
 3.14159265358979 by Frac1: 1570796 / 500000  6.53589789845199E-07 in 1000000 iterations
 3.14159265358979 by Frac2:     355 / 113    -2.66764192513591E-07 in       4 iterations
 2.71828182845905 by Frac1: 1084483 / 398959  4.81836792687318E-13 in  797917 iterations
 2.71828182845905 by Frac2:    2721 / 1001    1.10177326817507E-07 in      11 iterations
</code></pre>
    </div>