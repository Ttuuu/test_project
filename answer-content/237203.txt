<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few observations about your code.</p>

<p><strong>incomplete</strong> - As you've noted, it doesn't handle <code>Int</code> overflow. It also doesn't handle the optional leading <code>+</code> character.</p>

<p><strong>digit characters</strong> - The variables <code>charMap</code> and <code>keyMap</code> are unnecessary. The <code>.isDigit</code> and <code>.asDigit</code> methods in the standard library provide the same functionality.</p>

<p><strong>Boolean logic</strong> - Consider this Boolean test: <code>!charMap.contains(c) || c == '-' || c == ' '</code> It translates to "if c is not a digit OR if c is a dash OR if c is a space." But if c is a dash or space then it is already not a digit. The dash and space tests serve no purpose because no dash or space character would get beyond the digit test.</p>

<p><strong>unneeded vars</strong> - There's no reason to make <code>cleanStr</code> or <code>summand</code> a <code>var</code>. Their initial values are never changed. In fact, you could just drop <code>summand</code> altogether and increment <code>num</code> directly.</p>

<pre><code>num += (c match { ...//rest of code block
</code></pre>

<p><strong>excess braces</strong> - In a <code>match{...}</code> every <code>case</code> statement ends the previous code block and starts a new one. Therefore wrapping the code block in <code>{</code> braces <code>}</code> is redundant and just adds visual clutter. In other words, this...</p>

<pre><code>case x =&gt;
  //code
  //here
</code></pre>

<p>...is cleaner than this...</p>

<pre><code>case x =&gt; {
  //code
  //here
}
</code></pre>

<p><strong>style</strong> - The use of so much mutation (i.e. <code>var</code>s instead of <code>val</code>s) makes it pretty clear that you are using the Scala language to write C code. This will change as you become more familiar with the Scala standard library, the tenants of Functional Programming, and the study of other Scala code.</p>

<p>Here, for example, is a Scala solution for the <strong>atoi</strong> challenge.</p>

<pre><code>val numRE = "\\s*([+-]?)0*(\\d+).*".r

def myAtoi(str :String) :Int = str match {
  case numRE(signStr, numStr) =&gt;
    val sign    = if (Option(signStr).contains("-")) -1 else 1
    val bailOut = if (sign &lt; 0) Int.MinValue else Int.MaxValue
    if (numStr.length &gt; 10) bailOut                      //too many digits
    else if (numStr.length &lt; 10 || numStr &lt; "2147483648")
      sign * numStr.foldLeft(0)(_*10 + _.asDigit)        //calculate return Int
    else bailOut
  case _ =&gt; 0  //input doesn't match the pattern
}
</code></pre>
    </div>