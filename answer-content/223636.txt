<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This review doesn't cover performance, but writing cleaner code:</p>

<hr>

<p>Global variables are bad because it's hard to reason about them. They can be used anywhere, and (more frustratingly) at any time, making it harder to understand or change the code and its dependencies.</p>

<p>It would be much easier to understand each function if all the dependencies are passed into it (by value or reference as appropriate). e.g. as well as the existing function arguments, <code>isTriAlpha</code> also depends on <code>triActive</code>, <code>hasBeenInZone</code>, and whatever global or state <code>isTriInZoneRadius</code> also depends on.</p>

<p>While it may be necessary to declare variables at file / namespace scope in this I don't think there's a need to actually use them globally. e.g. They can be placed in a "Global" namespace that's only referred to in the top level function, and references to the relevant variables passed down as necessary.</p>

<hr>

<p>This last point might seem like a burden, but grouping data together appropriately will make this much easier. e.g. it looks like all these contain one item per triangle:</p>

<pre><code>// Data about each individual tri, could be brought intro a vector of structs
// Needed to check if geometry has changed since last invokation
std::vector&lt;bool&gt; triActive;
// Needed to check if alphas have changed since last invokation
std::vector&lt;bool&gt; validAlphaIndex;
// Needed to keep history of what tris have ever been in the beam, for alphas
std::vector&lt;bool&gt; hasBeenInBeam;
</code></pre>

<p>So perhaps they should all be in a struct <code>TriangleData</code> (or something), and we can pass a reference to it down through the function chain.</p>

<hr>

<p>Prefer references to pointers as function arguments for "passing out" data. e.g. the <code>numTri</code> and <code>numFace</code> arguments to <code>initialize</code> should be references and not pointers. Pointers can be null, whereas references can only be created from a valid object. Since we don't check for a null value before dereferencing the pointers, it looks like references would be more appropriate.</p>

<hr>

<p>It's better to use constant variables than defines. i.e. <code>SUCCESS</code> and <code>PTHREAD_ERR</code> should be:</p>

<pre><code>static const int SUCCESS = 0;
static const int PTHREAD_ERR = 1;
</code></pre>

<p>Preprocessor definitions have no scoping, so they can affect your entire project (and any code that may use your project), so are prone to name collisions.</p>

<hr>

<p>Declare variables as close to the point of use as possible and initialize them to the correct value straight away. e.g. in <code>checkForModelChanges</code>, <code>currentlyActive</code> and <code>isAlpha</code> should be declared and initialized inside the loop.</p>

<p>Unless constructing the variables does some very slow resource allocation it's best to let the compiler worry about optimization.</p>

<hr>

<p>Comments should explain why the code does something, not just restate what the code does:</p>

<pre><code>// Get whether this triangle is an alpha:
isAlpha = isTriAlpha(i, nodeIValues, iValueThreshold);
</code></pre>

<p>If we have to write a comment that says what the code does because it's not clear from the code itself, we should make the code clearer instead, e.g.:</p>

<pre><code>// Get whether this triangle is an alpha:
isAlpha = isTriAlpha(i, nodeIValues, iValueThreshold);

// Triangle is a valid alpha now, but wasn't before
if((isAlpha == true) &amp;&amp; (validAlphaIndex[i] == false))
{
  validAlphaIndex[i] = true;
  modelChanged = true;
}
// Was valid before, is no longer valid now
else if((isAlpha == false) &amp;&amp; (validAlphaIndex[i] == true))
{
  validAlphaIndex[i] = false;
  modelChanged = true;
  //cullalphasFlag = true;
}
</code></pre>

<p>Could just be:</p>

<pre><code>const bool wasAlpha = validAlphaIndex[i];
const bool isAlpha = isTriAlpha(i, nodeIValues, iValueThreshold);

if (wasAlpha != isAlpha) modelChanged = true;
validAlphaIndex[i] = isAlpha;
</code></pre>

<hr>

<p>Don't test booleans by comparing them to <code>true</code> or <code>false</code>, just test the boolean directly:</p>

<pre><code>if (isAlpha) { ... }
if (!isAlpha) { ... }
</code></pre>

<p>After all, the <code>==</code> operator returns a bool anyway...</p>

<pre><code>if ((isAlpha == true) == true) { ... } // is it really, definitely true?
</code></pre>

<hr>

<p>Similarly, something like this:</p>

<pre><code>if(!(m_nrt-&gt;shootRay(ray)))
{
  return true;
}
else
{
  // There's no path
  return false;
}
</code></pre>

<p>is 8 lines of code, where we can really use just one:</p>

<pre><code>return !m_nrt-&gt;shootRay(ray);
</code></pre>

<hr>

<p>Prefer to return early where possible. This allows us to avoid unnecessary indentation and else clauses:</p>

<pre><code>bool isTriAlpha(const unsigned int iTri,
                const float* nodeIValues,
                const double iValueThreshold
                )
{
    if (!triActive[iTri])
        return false;

    if (!hasBeenInZone[iTri] &amp;&amp; !isInTriZoneRadius(iTri)))
        return false;

    const unsigned int* triNodes = m_nrt-&gt;getTriNodes(iTri);
    double triAvgIValue = (nodeIValues[triNodes[0]] + nodeIValues[triNodes[1]] + nodeIValues[triNodes[2]]) / 3.0;

    return (triAvgValue &gt; iValueThreshold);
}
</code></pre>

<hr>

<p>The <code>rc</code> variable here doesn't seem to have any reason to exist. We could just check the result of the function directly.</p>

<pre><code>  int rc;

  if((rc = pthread_attr_init(&amp;attr)))
  {
    throw PThreadException();
  }
</code></pre>

<hr>

<p>Maybe split the initialization that needs to be done only once into a separate function from the initialization that is done every time and call these two functions only when appropriate. I'm guessing a lot of these checks are effectively checking the same thing:</p>

<pre><code> if(triActive.empty())
  {
    triActive.resize(numTris, false);
  }
  if(hasBeenInZone.empty())
  {
    hasBeenInZone.resize(numTris, false);
  }
</code></pre>

<hr>

<p>The actual triangle data appears to be <code>float</code>s, but the calculations use a lot of <code>double</code>s. Are the <code>double</code>s actually necessary?</p>

<hr>

<p>A decent math library would make stuff like this:</p>

<pre><code>ray.dir[0] = (betaCoords[0] - alphaCoords[0]) / pathDist;
ray.dir[1] = (betaCoords[1] - alphaCoords[1]) / pathDist;
ray.dir[2] = (betaCoords[2] - alphaCoords[2]) / pathDist;
</code></pre>

<p>Look more like this:</p>

<pre><code>ray.dir = (betaCoords - alphaCoords) / pathDist;
</code></pre>

<p>I wonder if it would be possible to do this with one of the libraries you're already using, instead of manually declaring arrays each time (e.g. <code>double alphaCoords[3];</code> -&gt; something like <code>vec3&lt;double&gt; alphaCoords</code>).</p>
    </div>