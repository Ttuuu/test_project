<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Input validation?</h3>

<p>At first glance, this looks like some sort of input validation:</p>

<blockquote>
<pre><code>if (number &lt; 0) {
    System.out.println("Error: Not a positive integer");
} else {
    // ...
}

// ...
System.out.println("The binary representation of your integer has: " + oneCount + " ones.");
System.out.println("The binary representation of your integer has: " + zeroCount + " zeros.");
</code></pre>
</blockquote>

<p>But it's not... If the input is negative,
processing will happily continue and print that the number has 0 zeros and 0 ones, which is not true.</p>

<p>Lastly, errors should be printed on <code>System.err</code> instead of <code>System.out</code>.</p>

<h3>Variable scope</h3>

<p>Declare variables where you really need them, not sooner.
<code>number</code>, <code>zeroCount</code>, <code>oneCount</code> can all be declared later.</p>

<h3>Decompose to smaller units</h3>

<p>Instead of dumping the code in a single <code>main</code> method,
it would be better to decompose the multiple small methods,
each responsible for one thing.
For example, you could have these methods:</p>

<ul>
<li>read an <code>int</code> from standard input</li>
<li>convert an <code>int</code> to a binary string</li>
<li>count the number of ones in a binary string

<ul>
<li>the number of zeros is length minus the number of ones</li>
</ul></li>
</ul>

<h3>Simplify</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>binary = Integer.toString(mod) + binary;
</code></pre>
</blockquote>

<p>You could simplify as:</p>

<pre><code>binary = mod + binary;
</code></pre>

<h3>Reinventing the wheel</h3>

<p><code>Integer.toBinaryString(...)</code> does the same thing as your main loop.</p>
    </div>