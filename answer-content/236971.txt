<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>while the solution is functional. it is overly complex. rotation is a simple algorithm of index arithmetic: start with the first cell, with each iteration, you determine the source and destination indexes of one value, move that value into place, take the evicted value and set the next iteration to determine its new place.   </p>

<p>so we start with idx <code>0</code> and determine its place is at idx <code>5</code>. in the next iteration we start with idx <code>5</code> and determine its new place and so on.</p>

<pre><code>static void leftRotate(int[] arr, int d) {
    int srcIdx, dstIdx;
    srcIdx = 0;
    int val = arr[srcIdx];
    // loop only used to count (i not used as index)
    for (int i = 0; i &lt; arr.length ; i++) {
        dstIdx = srcIdx - d;
        if (dstIdx &lt; 0) dstIdx = arr.length + dstIdx;  // rotate dst idx from start to end of arr
        int temp = arr[dstIdx];
        arr[dstIdx] = val;
        val = temp;  // set next iteration value to move
        srcIdx = dstIdx;  // set next iteration srcIdx
    }
}
</code></pre>

<p>also, <code>printArray</code> is redundant. use <code>Arrays.tostring()</code></p>

<h2>EDIT</h2>

<p>thanks to @Imus, there is a nasty bug in my "simple" algorithm described above.
The bug occurs when the array is divisible by <code>d</code>. in this case, following src-dst-src-dst chain results in processing the same indexes in a loop, while missing other indexes.  The solution (that I found) is to detect such cases of "closed-loop" and advance the pointers one cell ahead. admittedly, it does make the solution more complex.</p>

<p>below is a fixed solution.</p>

<pre><code>static void leftRotate(int[] arr, int d) {
    int srcIdx, dstIdx, loopDetectIdx;
    srcIdx = 0;
    loopDetectIdx = 0;  // detects processing in "closed loop" 
    int val = arr[srcIdx];
    for (int i = 0; i &lt; arr.length ; i++) {
        dstIdx = srcIdx - d;
        // rotate dst idx from start to end of arr
        if (dstIdx &lt; 0) dstIdx = arr.length + dstIdx;
        int temp = arr[dstIdx];
        arr[dstIdx] = val;
        System.out.println(srcIdx + "-" + dstIdx + " " + Arrays.toString(arr));
        val = temp;
        srcIdx = dstIdx;
        // if we already processed srcIdx, move all pointers one cell forward  
        if (srcIdx == loopDetectIdx) {
            srcIdx++;
            loopDetectIdx++;
            val = arr[srcIdx];
        }
    }
}
</code></pre>
    </div>