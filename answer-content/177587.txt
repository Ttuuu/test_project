<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Is it worth changing? IMO: Code is best left as-is</h3>

<p>It is worth employing some form of polymorphism for one <code>if</code> statement? You gotta be kidding me: for one if statement - to abstract it out? That would make it more complicated, would it not? In my opinion - probably not. cf: @t3chb0t who has a different view. </p>

<p>the code is small and very manageable. if it's already in place and working, and you have no reason to change it, then probably just leave it as is. there's nothing wrong with hard-coded code if it's working and will never change. but if changes start creeping in, then -- and only then consider refactoring. there's no point writing pure OOP for its own sake - perhaps that will make it harder to understand than it is now.</p>

<p>Or if you did want to make it easier to change (slightly), then you could just use an enum. If you change the enum value from “Add” to “Addition” you can ask Visual Studio or Resharper to do all the work for you – but if you wanted to add a new item or decide to get rid of one, then certainly you will be making changes in two places and the open closed principle will be thus violated. Also note how the use of the temporary variables are somewhat more cleaned up below:</p>

<pre><code>internal class Program
{
    enum ListItem { Add, Subtract }        

    private int Calculate(ListItem action)
    {            
        if (action == ListItem.Add)
        {
            return 1234; // implement the calculation
        }
        else if(action == ListItem.Subtract)
        {
            return 1234; // implement the calculation
        }
        else
        {
            return 1234; // implement the calculation
        }
    }
</code></pre>

<p>}</p>

<h3>You could go for a polymorphic solution - as an academic exercise?</h3>

<p>You could implement the command design pattern and have a look at the MVVM design pattern (google them) - or other similar polymorphic solution. but you've already written the code!</p>

<p>@PouyaSamie has written a very elegant solution (and it's beautiful in its sophistication) @MartinBeam has a nice answer too. In conclusion my question to you as you read some of the polymorphic solutions - (which are all great - and with the utmost respect to those folks): does it make it easier to understand the code or harder?</p>
    </div>