<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The behavior seems without design flaws.</p>
<p>However:</p>
<ul>
<li>Using a dummy node in front of the linked list does not really save code.
Inserting in front (LIFO, last-in-first-out) can be used for the code without
dummy head.</li>
<li>Rehashing does not need to do a <code>find</code> in the <code>newNodes</code>.</li>
</ul>
<p>(I hope you can do a diff.)</p>
<pre><code>class MyHashMap {

    int length = 10;
    int keyCount = 0;
    int loadFactor = keyCount / length;

    ListNode[] nodes = new ListNode[length];

    public void put(int key, int value) {
        int hashKey = hashFunction(key);

        ListNode node = find(nodes[hashKey], key);

        if (node == null) {
            keyCount++;
            nodes[hashKey] = new ListNode(key, value, nodes[hashKey]);
        }
        else node.val = value;

        rehash();
    }

    public int get(int key) {
        int hashKey = hashFunction(key);

        //if (nodes[hashKey] == null)
        //    return -1;

        ListNode node = find(nodes[hashKey], key);

        return node == null ? -1 : node.val;
    }

    public void remove(int key) {
        int hashKey = hashFunction(key);

        nodes[hashKey] = removeFromBucket(nodes[hashKey], key);
//        if (nodes[hashKey] == null) return;
//
//        ListNode prev = find(nodes[hashKey], key);
//
//        // Key did not exist in the first place
//        if (prev.next == null) return;
//
//        // Removes the key by setting the previous node to the next node from the key
//        prev.next = prev.next.next;
    }

    // Hash Function
    int hashFunction(int key) { return Integer.hashCode(key) % length;}


    ListNode removeFromBucket(ListNode bucket, int key) {
        ListNode prev = null;
        ListNode node = bucket;
        while (node != null &amp;&amp; node.key != key) {
            prev = node;
            node = node.next;
        }
        if (node == null) {
            return bucket; // Not found
        }
        if (prev != null) {
            prev.next = node.next;
            return bucket; // Found after head
        }
        // Found at head
        return node.next;
    }

    ListNode find(ListNode bucket, int key) {
        ListNode node = bucket;
        while (node != null &amp;&amp; node.key != key) {
            node = node.next;
        }
        return node;
    }

    public void rehash() {
        if (keyCount &gt; length * 0.90) {
            int oldLength = length;
            length *= 2;
            ListNode[] newNodes = new ListNode[length];

            for (int i = 0; i &lt; oldLength; i++) {

                if (nodes[i] == null) {
                    continue;
                }

                ListNode node = nodes[i];

                while (node != null) {
                    int key = node.key;
                    int value = node.val;

                    int hashKey = hashFunction(key);

                    newNodes[hashKey] = new ListNode(key, value, newNodes[hashKey]);
                    node = node.next;
                }
            }
            nodes = newNodes;
        }


        printHash();
        System.out.println("---------------");
    }

    public void printHash() {
        for (int i = 0; i &lt; length; i++) {
            if (nodes[i] == null) {
                System.out.println("Bucket Not Found");
                continue;
            }

            ListNode next = nodes[i];
            
            while (next != null) {
                System.out.print("Bucket Found | Key - " + next.key
                    + " Value - " + next.val + " | ");
                next = next.next;
            }

            System.out.println();

        }
    }

    // ListNode to handle collisions
    class ListNode {
        int key, val;
        ListNode next;

        ListNode(int key, int val, ListNode next) {
            this.key = key;
            this.val = val;
            this.next = next;
        }
    }

    public static void main(String[] args) {
        MyHashMap ht = new MyHashMap();
        for (int i = 0; i &lt; 100; i++) {
            int randomNumber = (int) (Math.random() * 100);
            ht.put(randomNumber, i);
        }
        ht.printHash();
    }
}
</code></pre>
<p>There is an issue with a new length having an integral multiple on rehashing:</p>
<pre><code>      hash keys:
keys  length=10  length=2*10
  7       7          7
 17       7         17
 27       7          7
 37       7         17
</code></pre>
<p>I find this intellectually irritating, but find no drawbacks.</p>
<p>The solution would be something like:</p>
<pre><code>            length = 2*length + 3;
            length = 3*length/2;
</code></pre>
    </div>