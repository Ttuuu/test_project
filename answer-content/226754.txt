<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><strong>Performance wise</strong></h2>

<p><strong>In general:</strong></p>

<p>You use numpy, but you write it almost like in fortran. Python with <code>numpy</code> is good for scientific programing and computing as long as you <strong>don't do many loops</strong></p>

<ul>
<li>read this first <a href="https://scipy-cookbook.readthedocs.io/items/PerformancePython.html" rel="nofollow noreferrer">A beginners guide to using Python for performance computing</a></li>
<li>if you really need to do tight loops than use
<a href="https://cython.readthedocs.io/en/latest/src/tutorial/numpy.html" rel="nofollow noreferrer">cython</a>.</li>
<li>But most of the time you can avoid that by expressing the loop as some functional operation on the whole array 

<ul>
<li>most numpy functions can operator on whole array in one pass, use it.

<ul>
<li>always prefer <code>y[:]=np.sqrt(x[:])</code> and avoid</li>
</ul></li>
</ul></li>
</ul>

<pre><code>          `for i in xrange(N): 
                y[i]=np.sqrt(x[i])`
</code></pre>

<ul>
<li>operation like <code>dot</code>,<code>convolve</code>,<code>einsum</code>,<code>ufunc.reduce</code> are very potent to express most sciencetific algorithms in more abstract way</li>
<li><p>use <a href="https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html" rel="nofollow noreferrer">advanced array slicing</a></p>

<ul>
<li><p>you can express most inner <code>if</code> by <code>boolen mask arrays</code> or <code>integer index array</code></p>

<ul>
<li><p>e.g. <code>f[ f&gt;15.0 ] = 15.0</code> clamp all elements in array <code>f</code> which are <code>&gt;15.0</code> to <code>15.0</code>; you can also store the boolean mask <code>mask = (f&gt;15.0)</code> and than use it like <code>f[mask]+=g[mask]</code>. This way you can express branching as fully functional programs/expressions with arrays.</p></li>
<li><p>Do not construct new <code>np.array</code> (<code>np.zeros, np.ones</code> etc.) too often (i.e. inside tight loops). Optimal performance is obtained if you prepare all arrays you need at the beggining. Avoid frequent conversion between list and array</p></li>
</ul></li>
</ul></li>
</ul>

<p><strong>To address your code example in particular:</strong></p>

<ul>
<li>Green's functions are basically convolutions. I'm pretty sure you can express it using e.g. <a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.ndimage.filters.convolve.html" rel="nofollow noreferrer">scipy.ndimage.filters.convolve</a></li>
<li><p>if your convolution kernel is large (i.e. pixels interact more than with few neighbors) than it is often much faster to do it in Fourier space (<a href="https://en.wikipedia.org/wiki/Convolution_theorem" rel="nofollow noreferrer">convolution transforms as multiplication</a>) and using <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.fft.fftn.html" rel="nofollow noreferrer">np.fftn</a> with <code>O(nlog(N))</code> cost.</p></li>
<li><p>cannot <code>def gw(xx, yy, tt, mm, nn, ss):</code> operate on the whole array,
rather than individual numbers?</p></li>
<li><code>if denom &lt; 0:</code> can be expressed using <code>boolean mask array</code> like <code>mask = denom &gt;0; denom[mask] = np.sqrt(denom[maks])</code></li>
<li>Never do this if you can:</li>
</ul>

<pre><code>  for k in range (Nt):
     for j in range (Ny):
        for i in range (Nx):
</code></pre>

<p>the operations seems to be possible to rewrite that operate on the whole <code>x,y</code> space at once   </p>

<ul>
<li>This is how you do convolution-like operations in numpy (from <a href="https://scipy-cookbook.readthedocs.io/items/PerformancePython.html" rel="nofollow noreferrer">here</a>)</li>
</ul>

<pre><code>           # The actual iteration
           u[1:-1, 1:-1] = ((u[0:-2, 1:-1] + u[2:, 1:-1])*dy2 +
                            (u[1:-1,0:-2] + u[1:-1, 2:])*dx2)*dnr_inv
</code></pre>

<ul>
<li>this is so horrible:</li>
</ul>

<pre><code>green = np.array([gw(x[i],y[j],t[k],i_grid,j_grid,k_grid) for k_grid in t for j_grid in y for i_grid in x])
</code></pre>

<ul>
<li>list comprehesion is relatively fast, but still much slower than numpy array operations (which are implemented in C).</li>
<li>do not create temporary list and convert it to temporary array, you loose lot time doing that.</li>
<li>why you cannot just prealocate <code>Green[Nx,Ny,:]</code> and  <code>Gauss[Nx,Ny,:]</code> and use it as a whole?</li>
</ul>
    </div>