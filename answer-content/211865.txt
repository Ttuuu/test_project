<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bugs:</h3>

<ol>
<li><p>Here, instead of <code>promt</code> it should be <code>prompt</code>:</p>

<blockquote>
<pre><code>password: str = getpass(promt="Enter password: ")
</code></pre>
</blockquote></li>
<li><p>If PDF file is not in the current folder, this will throw an error:</p>

<blockquote>
<pre><code>if decrypt(os.path.join(folder_name, filename), password):
    os.remove(filename)
</code></pre>
</blockquote>

<p>it should be <code>os.remove(os.path.join(folder_name, filename))</code> instead.</p></li>
</ol>

<h3>Docstring:</h3>

<blockquote>
<pre><code>"""
Decrypts all files in a folder and sub folder with provided password
"""
</code></pre>
</blockquote>

<p>I think it would be better to specify that only PDF files will be decrypted. Also, it should mention that original copy will be removed. How about:</p>

<pre><code>"""
Decrypts all pdf files in a specified folder
and all its sub-folders with provided password,
saves decrypted copy and removes original encrypted files.
"""
</code></pre>

<h3><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8:</a></h3>

<blockquote>
  <p>Imports should be grouped in the following order:</p>
  
  <ol>
  <li>Standard library imports. </li>
  <li>Related third party imports. </li>
  <li>Local application/library specific imports.</li>
  </ol>
  
  <p>You should put a blank line between each group of imports.</p>
</blockquote>

<p>Also, it is advised to sort imports <a href="https://stackoverflow.com/questions/20762662/whats-the-correct-way-to-sort-python-import-x-and-from-x-import-y-statement">alphabetically</a>.  </p>

<p>So, instead of:</p>

<blockquote>
<pre><code>import os
import argparse
from typing import Tuple
from getpass import getpass
from pathlib import Path
import PyPDF2
</code></pre>
</blockquote>

<p>You will have:</p>

<pre><code>import argparse
import os
from getpass import getpass
from pathlib import Path
from typing import Tuple

import PyPDF2
</code></pre>

<p>Also, before the first function there should be two <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">blank lines</a>. Apart from that, well done! You follow the style guide pretty well!</p>

<h3><a href="https://click.palletsprojects.com" rel="nofollow noreferrer">Click:</a></h3>

<p>Instead of using argparse, I'd suggest to take a look at third-party library Click. <a href="http://click.palletsprojects.com/en/7.x/why/" rel="nofollow noreferrer">Why Click?</a></p>

<p><strong>Example of usage:</strong><br>
For example, here is how you could wrap main function <code>pdf_decrypter</code>:</p>

<pre><code>import click

...

@click.command()
@click.option('--path', '-p',
              default='.',
              show_default=True,
              type=click.Path(),
              help='Folder path to look for PDFs to decrypt '
                   '(absolute or relative).')
@click.password_option(confirmation_prompt=False)
def pdf_decrypter(path: str,
                  password: str):
...
</code></pre>

<p>Running <code>python3 pdf_decrypter.py --help</code> from command line will print:</p>

<pre class="lang-none prettyprint-override"><code>Usage: pdf_decrypter.py [OPTIONS]

  Main routine: Giving a password and path all PDFs which are encrypted get
  decrypted in the supplied path. If the password is wrong a message is
  displayed.

Options:
  -p, --path PATH  Folder path to look for PDFs to decrypt (absolute or
                   relative). [default: .]
  --password TEXT
  --help           Show this message and exit.
</code></pre>

<p><strong>Confirmation messages:</strong><br>
Further in the body of the function you can add confirmation message as well, like:</p>

<pre><code>...
if not click.confirm(f'All PDF files will be encrypted in {path}\n'
                     'Do you want to continue?'):
    return
...
</code></pre>

<p>This will look like:</p>

<pre class="lang-none prettyprint-override"><code>python3 pdf_decrypter.py 
Password: 
All PDF files will be encrypted in /path/to/pdf_files
Do you want to continue? [y/N]: 
</code></pre>

<p><strong>Putting encryption and decryption together:</strong><br>
And, probably, you would want to put both encryption from your previous post and decryption in the same module later, as they share a lot in common. In this case you would want to use <a href="http://click.palletsprojects.com/en/7.x/quickstart/#nesting-commands" rel="nofollow noreferrer">Nesting Commands</a>, for example, like this:</p>

<pre><code>@click.group()
def cli():
    pass


@cli.command()
@click.option('--path', '-p',
              default='.',
              show_default=True,
              type=click.Path(),
              help='Folder path to look for PDFs to decrypt '
                   '(absolute or relative).')
@click.password_option(confirmation_prompt=False)
def decrypt(path: str,
            password: str):
...

@cli.command()
@click.option('--path', '-p',
              default='.',
              show_default=True,
              type=click.Path(),
              help='Folder path to look for PDFs to decrypt '
                   '(absolute or relative).')
@click.password_option(confirmation_prompt=False)
def encrypt(path: str,
            password: str) -&gt; None:
...
</code></pre>

<p>And you would call your functions like <code>python pdf_utils.py encrypt</code> or <code>python pdf_utils.py decrypt</code>, etc.</p>

<p><a href="http://click.palletsprojects.com/en/7.x/api/#click.Path" rel="nofollow noreferrer"><strong><code>click.Path</code>:</strong></a><br>
You can specify additional checks, like checking if path exists, path is not a file, and also make Click to resolve path automatically by setting <code>resolve_path</code> as <code>True</code>. So you wouldn't have to use <code>os.path.join</code> later in the code:</p>

<pre><code>@click.option('--path', '-p',
              default='.',
              show_default=True,
              type=click.Path(exists=True,
                              file_okay=False,
                              resolve_path=True),
              help='Folder path to look for PDFs to decrypt '
                   '(absolute or relative).')
</code></pre>

<h3>Iterating over files:</h3>

<p>Right now you have two nested loops and two checks of extension and if file is encrypted:</p>

<blockquote>
<pre><code>for folder_name, _, filenames in os.walk(path):
    for filename in filenames:
        if not filename.endswith('.pdf'):
            continue

        if not is_encrypted(os.path.join(folder_name, filename)):
            continue

        # decryption logic
</code></pre>
</blockquote>

<p>This looks pretty cumbersome. And I personally don't like it when the code is nested on two or more levels. We can use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> module to simplify this logic:</p>

<pre><code>pdf_paths = Path(path).rglob('*.pdf')
encrypted_pdfs = filter(is_encrypted, pdf_paths)
for pdf in encrypted_pdfs:
    # decryption logic
</code></pre>

<h3>Errors catching:</h3>

<p>Now you catch <code>PyPDF2.utils.PdfReadError</code> on the deepest level, in <code>decrypt</code> function. I suggest you to take it out to main function, and not return <code>True</code> or <code>False</code> to indicate success/failure. See, for example, <a href="https://softwareengineering.stackexchange.com/questions/219320/when-and-how-should-i-use-exceptions">When and how should I use exceptions?</a><br>
So, in the <code>pdf_decrypter</code>, you will have:</p>

<pre><code>for pdf in encrypted_pdfs:
    try:
        decrypt(pdf, password)
        pdf.unlink()
    except PyPDF2.utils.PdfReadError:
        print(f'{pdf} could not be decrypted (wrong password)')
</code></pre>

<h3><code>pathlib</code> over <code>os</code>:</h3>

<p>You almost don't use advantages of the <code>pathlib</code>. I already included some things in previous code examples. But here I will sum up everything.  </p>

<p><strong>Opening file:</strong><br>
This:</p>

<blockquote>
<pre><code>with open(filename, 'rb') as pdf_file:
</code></pre>
</blockquote>

<p>will become:</p>

<pre><code>with filepath.open('rb') as pdf_file:
</code></pre>

<p>Note that <code>filepath</code> would be a better name here.</p>

<p><strong>Changing filename:</strong>  </p>

<blockquote>
<pre><code>filename_decrypted = filename.strip('.pdf') + "_decrypted.pdf"
</code></pre>
</blockquote>

<p>could be rewritten as:</p>

<pre><code>decrypted_filename = f'{filepath.stem}_decrypted{filepath.suffix}'  # new name
decrypted_filepath = filepath.parent / decrypted_filename  # complete path
</code></pre>

<p><strong>Removing file:</strong><br>
<code>os.remove(path)</code> can be replaced by <code>path.unlink()</code>.<br>
By this moment we removed all <code>os</code> module usages. So, we can remove that import.</p>

<h3>Putting it all together:</h3>

<pre><code>"""
Decrypts or encrypts all pdf files in a specified folder
and all its sub-folders with provided password,
saves processed copies and removes original files.
"""
from itertools import filterfalse
from pathlib import Path

import click
import PyPDF2


def is_encrypted(filepath: Path) -&gt; bool:
    """Checks if file is encrypted"""
    with filepath.open('rb') as pdf_file:
        pdf_reader = PyPDF2.PdfFileReader(pdf_file)
        return pdf_reader.isEncrypted


def write_copy(filepath: Path,
               password: str,
               *,
               mode: str) -&gt; None:
    """
    Writes encrypted or decrypted copy of the file based on the mode
    :param filepath: path of the PDF file to be processed
    :param password: password to decrypt/encrypt PDF with
    :param mode: one of 'encrypt' or 'decrypt'
    """
    with filepath.open('rb') as pdf_file:
        pdf_reader = PyPDF2.PdfFileReader(pdf_file)
        pdf_writer = PyPDF2.PdfFileWriter()

        if mode == 'decrypt':
            pdf_reader.decrypt(password)
        for page_number in range(pdf_reader.numPages):
            pdf_writer.addPage(pdf_reader.getPage(page_number))
        if mode == 'encrypt':
            pdf_writer.encrypt(password)

        suffix = {'decrypt': '_decrypted',
                  'encrypt': '_encrypted'}
        processed_filename = f'{filepath.stem}{suffix[mode]}{filepath.suffix}'
        processed_filepath = filepath.parent / processed_filename

        with processed_filepath.open('wb') as pdf_file_processed:
            pdf_writer.write(pdf_file_processed)


@click.group()
def cli():
    pass


@cli.command()
@click.option('--path', '-p',
              default='.',
              show_default=True,
              type=click.Path(exists=True,
                              file_okay=False,
                              resolve_path=True),
              help='Folder path to look for PDFs to decrypt '
                   '(absolute or relative).')
@click.password_option(confirmation_prompt=False)
def decrypt(path: str,
            password: str) -&gt; None:
    """
    Decrypts all encrypted PDFs in the supplied path.
    If the password is wrong a message is displayed.
    Saves processed copies and removes original files.
    :param path: folder path to look for PDFs to decrypt
    :param password: password to decrypt PDFs with
    """
    pdf_paths = Path(path).rglob('*.pdf')
    encrypted_pdfs = filter(is_encrypted, pdf_paths)
    for pdf in encrypted_pdfs:
        try:
            write_copy(pdf, password, mode='decrypt')
            pdf.unlink()
            click.echo(f'Decrypted successfully: {pdf}')
        except PyPDF2.utils.PdfReadError:
            click.echo(f'{pdf} could not be decrypted (wrong password)')


@cli.command()
@click.option('--path', '-p',
              default='.',
              show_default=True,
              type=click.Path(exists=True,
                              file_okay=False,
                              resolve_path=True),
              help='Folder path to look for PDFs to decrypt '
                   '(absolute or relative).')
@click.password_option(confirmation_prompt=False)
def encrypt(path: str,
            password: str) -&gt; None:
    """
    Encrypts all non-encrypted PDFs in the supplied path.
    Saves processed copies and removes original files.
    :param path: folder path to look for PDFs to encrypt
    :param password: password to encrypt PDFs with
    """
    if not click.confirm(f'All PDF files will be encrypted in {path}\n'
                         'Do you want to continue?'):
        return

    pdf_paths = Path(path).rglob('*.pdf')
    not_encrypted_pdfs = filterfalse(is_encrypted, pdf_paths)

    for pdf in not_encrypted_pdfs:
        write_copy(pdf, password, mode='encrypt')
        pdf.unlink()
        click.echo(f'Encrypted successfully: {pdf}')


if __name__ == '__main__':
    cli()
</code></pre>

<p>Probably, <code>encrypt</code> and <code>decrypt</code> could be put in one function with a <code>mode</code> parameter, like what I did in a <code>write_copy</code> function; but see for yourself if it will make the code more clear.</p>
    </div>