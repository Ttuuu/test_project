<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for your first submission for review.</p>

<hr>

<p>First and foremost, the thing that really jumps out at me is that this function is doing WAY too many different things.  You likely should be considering different Express middleware functions to do things like:</p>

<ul>
<li>decorate IP address determination and decoration onto <code>req</code></li>
<li>user agent parsing and decoration onto <code>req</code></li>
<li>session ID determination, database update, and decoration onto <code>req</code></li>
</ul>

<p>...etc.</p>

<hr>

<p>Do you do any validation on <code>req.body</code> at all outside of this function?  You are taking a potential dangerous path in there is no input validation here.</p>

<hr>

<p>The code is VERY hard to read.  It is not indented well (particularly around SQL queries), has no comments, and has inconsistent use of vertical whitespace to separate logical sections.</p>

<hr>

<p>You have many more nested if-else conditions than are needed.  You should always that about inverting conditions to de-nest things, and should use <code>return</code> appropriately to de-nest.  Code with this many branches is going to be very fragile to maintain and extremely difficult to test all those code paths.</p>

<p>You have some case where you are doing this well like</p>

<blockquote>
<pre><code>db.query(queryChecking,(error,result)=&gt;{
    if(error) return res.status(400).json(error);
    if(result[0].length &gt; 0 &amp;&amp; result[1].length &gt; 0 &amp;&amp; result[2].length === 0 &amp;&amp; result[3].length &lt; 15){
</code></pre>
</blockquote>

<p>Here you exit early on error condition and let the rest of the code proceed without being in an else condition.</p>

<p>However in most places in code you have this sort of pattern</p>

<pre><code>if (...) {
   ...
   return;
} else if (...) {
   ...
   return;
} else if (...) {
   ...
   return;
}
</code></pre>

<p>This should be</p>

<pre><code>if (...) {
   ...
   return;
}
if (...) {
   ...
   return;
}
if (...) {
   ...
   return;
}
</code></pre>

<p>There is no need for most of your else conditions if you are making a return in from the previous conditional statement.</p>

<hr>

<p>Many of your <code>let</code> declarations could and should be <code>const</code> when the variables are not intended to ever be reassigned.</p>

<hr>

<p>Besides these code issues noted, I am struggling to understand what you are trying to achieve here.</p>

<p>What does a cart have to do with a session or a login at all?</p>

<p>Why tie something that perhaps should persist across sessions to a given session?</p>

<p>How do you handle updating carts around events that should regenerate session id's like logins/logouts?</p>

<p>How do you handle session expiry?</p>

<p>Why is Session Browser "normalized" into it's own table when it seems there would be 1:1 relationship with session?</p>
    </div>