<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@Mr AJ already gave you a valid answer on the algorithmic approach in his Java example, but since it seems Java is unfamiliar to you, I will just write out the algorithm here in a way that hopefully makes sense to you.</p>
<p>There is no need to sort the arrays, doing so ensure more operational complexity than is needed here, as now your a guaranteeing that you are visiting each value in the arrays at least twice (once for sorting, once for reading out sorted values - yes this even happens under the hood in with a <code>==</code> comparison between two sorted arrays as happens in currently selected answer).  You can achieve the goal by iterating each array a single time, such that you only visit each value once.</p>
<p>Your logic should be along the lines of:</p>
<ul>
<li>Compare array sizes, if unequal then 'Unlucky'.</li>
<li>Iterate over first array, building a map (perhaps an associative array or <code>stdClass</code> object in PHP).  Keys are values encountered in the array (i.e. 2-12) and the values for this map are the counts of each of the corresponding dice values.  You should probably also error on condition of getting value outside the 2-12 range in the array.</li>
<li>Iterate over the second array, if a dice value is encountered that is not present as a key in the map built from first array, then 'Unlucky'.  Otherwise you decrement the stored count in the map by one each time a corresponding dice value is encountered.</li>
<li>Iterate over the map values, if any value is not equal to 0 then 'Unlucky' else 'Lucky'.</li>
</ul>
<p>This provides an <code>O(2n)</code> worst-case operational complexity, where <code>n</code> is the size of the arrays.</p>
    </div>