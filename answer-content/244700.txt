<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I don't see any "unnecessary" calls here. Do you need to insert all these lines into the database? Then all there calls are necessary.</p>
<p>However, you can greatly optimize the process, thanks to</p>
<h2>Two cornerstone rules for running multiple DML queries</h2>
<ol>
<li>prepare once execute multiple will gain you like 2-5% speed
<ul>
<li>(however, in order to get that small speed improvement from prepared statements, you have to <a href="https://phpdelusions.net/pdo#emulation" rel="nofollow noreferrer">disable the emulation mode</a>. But in this case you'll be unable to reuse the placeholder name in the same query. Luckily, there is a <code>values()</code> keyword to the rescue)</li>
</ul>
</li>
<li>wrapping all DML queries in a transaction can boost the speed up to <em>70 times</em> (though depends on the software settings and hardware configuration) and is overall a sensible move. You either want all rows to be inserted or none.</li>
</ol>
<h2>Error reporting</h2>
<p>Another issue to address is error reporting which is completely flawed and far from being any helpful in the real life (I have to admit, it's hard to master this skill as your code most of time works as intended) but, unlike what most people think, it's really simple to make it right.</p>
<p>The first thing you have to realize is that there are <strong>two kinds of errors</strong> that require <strong>absolutely different treatment</strong>:</p>
<ul>
<li>userland errors are specific to the application logic and must be conveyed to the user</li>
<li>PHP errors are system errors and a user has no business with them. At the same time, They are <strong>vital</strong> for the programmer and must be <strong>preserved</strong> for the future inspection. Luckily, due to their nature, system errors essentially require the <strong>uniform treatment</strong> which means you can write the handling code once, store it elsewhere, and <strong>completely remove</strong> any system error handling from your code.</li>
</ul>
<p>In order to separate these two kinds of errors, validate your data prior the data manipulation. First check if you have all the required data and only then run your inserts. This way you will be able to separate the user interaction errors from the system errors. Be aware that <code>die()</code> is considered a bad practice. It's better to collect all errors into a variable that have to be conveyed to the user in a more convenient fashion.</p>
<p>Regarding the system errors, just like it was said above, write a dedicated error handler once, that would <strong>log the error</strong> for the programmer and tell the user that something went wrong. I've got a <a href="https://phpdelusions.net/articles/error_reporting#code" rel="nofollow noreferrer">complete working error handler example</a> in my article dedicated to PHP error reporting, you can simply take this file and include it in your script.</p>
<h2>Reduce the nesting level</h2>
<p>As you may noticed, your code is hard to read because it is constantly shifting to the right side. Hence it's a good idea to remove unneceessary nesting, as most of time it's a sign of the problem code. For example, it makes sense to check outside variables with <code>isset()</code> but internal variables? It's always a good idea to be positively sure whether some variable exists or not. Hence always have your variables initialized before use. Have <code>$array2</code> initialized at some point and you can drop that outermost condition. Other levels can be removed as well, such as unnecessary try-catch.</p>
<p>Things that indeed could be considered blunders from your beginners days that look rather amusing:</p>
<ul>
<li>that <code>$valuearray</code></li>
<li>the way <code>empty()</code> is used. In fact, to get 1 or 0 from a boolean value you can simply cast it as int</li>
</ul>
<p>So what could we have after all these improvements?</p>
<p>First of all, separate the data validation from the query execution.</p>
<p>Validate all the data first,</p>
<pre><code>$errors = [];
// perform all other validations
foreach($array2 as $value) {
    if ((isset($value['coord']) || isset($value['bookedbefore'])) &amp;&amp; isset($value['bookedslot'])) {
        $errors[] = "Error: you ticked checkbox(es) on the booking selection setting without choosing a corresponding slot";
        break;
    }
}
</code></pre>
<p>and after that check for errors and if everything is OK then insert all your data, or show the form back to the user with values filled in and errors displayed</p>
<pre><code>if (!$errors) {
    $sql = "INSERT INTO bookedslot(FK_UserID, FK_SlotCode, booked_before, coordinator_approv)
            VALUES (:UserID, :slotcode, :bookedbefore, :coord )
            ON DUPLICATE KEY UPDATE
                FK_UserID = values(FK_UserID),
                FK_SlotCode = values(FK_SlotCode),
                booked_before = values(booked_before),
                coordinator_approv = values(coordinator_approv)";
    $sth = $dbh-&gt;prepare($sql);

    $dbh-&gt;beginTransaction();
    foreach($array2 as $value) {
        $slotcode = $value['bookedslot'];
        $bookedbefore = (int)!empty($value['bookedbefore']); // not required
        $coord = (int)!empty($value['coord']); // not required

        $sth-&gt;bindValue(':UserID', $UserID);
        $sth-&gt;bindValue(':slotcode', $slotcode);
        $sth-&gt;bindValue(':bookedbefore', $bookedbefore);
        $sth-&gt;bindValue(':coord', $coord);
        $sth-&gt;execute();
    }
    $dbh-&gt;commit();
} else {
    // inform the user
}
</code></pre>
<p>What's going on here?</p>
<p>We are implementing all the things mentioned above. Just note that if your application is intended to die in case of a system error, there is no need to wrap your transaction in a try-catch block: it will be rolled back automatically by mysql as soon as the connection will be closed, and PHP always closes all its connections before die.</p>
<p>Just don't forget to configure PDO to throw exception and to disable the emulation mode. Here I've got an example <a href="https://phpdelusions.net/pdo_examples/connect_to_mysql" rel="nofollow noreferrer">PDO connection code</a> that does all the necessary stuff.</p>
    </div>