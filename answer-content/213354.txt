<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can reduce the memory footprint by using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.bitvector32" rel="nofollow noreferrer"><code>BitVector32</code></a> instead of <code>bool</code>. A <code>bool</code> in .NET occupies a full word in memory. A <code>BitVector32</code> allows you to store the equivalent of 32 bools the same memory space.</p>

<p>By replacing all  of the <code>bool</code> fields in <code>State</code> with a single <code>BitVector32</code>, I was able to reduce <code>State</code>'s memory footprint from 68 bytes to 12 (as measured by <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.sizeof" rel="nofollow noreferrer"><code>Marshal.SizeOf&lt;State&gt;()</code></a>). Since <code>State</code> is the key in the dictionary, that adds up to a decent reduction in memory usage overall.</p>

<p>After applying my changes to your <code>master</code> branch and running for 1,000,000 steps, the memory usage of the state dictionary dropped from ~215 MB to ~167 MB (as measured by the Visual Studio profiler). After 5,000,000 steps, it dropped from ~864 MB to ~671 MB.</p>

<p>You could push this technique even further by packing numeric values into bit vectors. There are some examples of doing so in the docs.</p>

<p>Here's a sample of the code that I used. All of the changes happened within <code>State</code>. I opted for the most convenient refactoring path... there might be a more efficient/performant way to code all this.</p>

<pre><code>BitVector32 bits;

private const int ReinforcedIndexFingerMask = 1 &lt;&lt; 0;
private const int CarpalTunnelPreventionCreamMask = 1 &lt;&lt; 1;

public bool ReinforcedIndexFinger
{
    get =&gt; bits[ReinforcedIndexFingerMask];
    set =&gt; bits[ReinforcedIndexFingerMask] = value;
}

public bool CarpalTunnelPreventionCream
{
    get =&gt; bits[CarpalTunnelPreventionCreamMask];
    set =&gt; bits[CarpalTunnelPreventionCreamMask] = value;
}
</code></pre>

<p>As an added bonus, I think you could simplify the <code>GetHashCode()</code> and <code>Equals()</code> implementations by comparing the bit vector directly, rather than comparing every value individually.</p>
    </div>