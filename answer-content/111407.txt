<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Python programmers tend to limit their line length to 79.
And so even if you don't follow it every day,
it's advisable when uploading to CR.</p></li>
<li><p>It's unlikely that you as a beginner have heard of JSON,
but it's a really nice, and good standard.</p>

<p>Take for example <code>critter_names</code> and <code>character</code>,
it'd be good if you could move them out of the python file.
And you can! By using JSON.</p>

<p><code>critter_names.json</code></p>

<pre><code>["JOHN CENA", "Shrek", "A Troll", "Maymay", "Ur mum", "A Pink guy", "A Roman bust", "A Rampant AI", "A NSA operative", "A Klu Klux Klan Member","An iPhone user","A Mac user", "Someone wearing a snapback", "Someone wearing an Unknown Pleasures T-shirt who hasn't even listened to the album","Larry Page","Someone who illegitimately won the NCSS", "A Lad", "An Illuminatus"]
</code></pre>

<p><code>character.json</code></p>

<pre><code>{
    "name": "YUNG LEAN",
    "armour_name": "Boardies",
    "armour_rating": 1,
    "weapon_name": "Meaty fists",
    "weapon_rating" : 10,
    "hp": 100
}
</code></pre>

<p>Both of the above formats are allowed, one that's easy to edit, and one that's just a dump.<br>
To then use these you can include them.</p>

<pre><code>import json
with open('critter_names.json') as f:
    critter_names = json.load(f)
with open('character.json') as f:
    character = json.load(f)
</code></pre>

<p>The with is a special keyword, that here closes the file, when you are finished with it.
without it you <em>should</em> write:</p>

<pre><code>f = open('critter_names.json')
critter_names = json.load(f)
f.close()
</code></pre></li>
<li><p>You do <code>int(size)</code> a lot, instead you could change the definition to:</p>

<pre><code>size = int(input(...))
</code></pre></li>
<li><p>You do <code>randrange(0, int(size))</code> a lot, you could change it to a function.</p>

<pre><code>def rand_size():
    return randrange(0, size)
</code></pre></li>
<li><p>In your <code>player_input</code>, you could change all the <code>move == "w" ... "a" ...</code> into a simple if statement.
If we ignore <code>char_xy[0] &gt; 0</code> and other similar checks, you can make a super simple move function!</p>

<pre><code>if move in "wasd":
    index, increment = {
        "w": (0, -1),
        "a": (1, -1),
        "s": (0, 1),
        "d": (1, 1),
    }(move)
    try:
        char_xy[index] += increment
    except IndexError:
        print("That is not a valid move")
</code></pre>

<p>You can also change <code>move = "f"</code>.
Your current code, checks if it's within space of the character.
However you can make the code, much simpler!</p>

<p>By making an array, of attack-able critter positions,
you can change all the <code>if</code>s to a simple <code>in</code>. (excluding <code>defend(i)</code>)</p>

<p>Here is how you can create the list. The second example is how I would.</p>

<pre><code>attack_pos = []
for x in range(-1, 2):
    for y in range(-1, 2):
        attack_pos.append((char_xy[0] + x, char_xy[1] + y))

attack_pos = [(char_xy[0] + x, char_xy[1] + y) for x in range(-1, 2) for y in range(-1, 2)]
</code></pre>

<p>And how you would use it:</p>

<pre><code>elif move == "f":
    attack_pos = [
        (char_xy[0] + x, char_xy[1] + y)
        for x in range(-1, 2)
        for y in range(-1, 2)
    ]
    for critter_name, critter_info in critter_list.items():
        if critter_info[:2] in attack_pos:
            attack(critter_name)
            if critter_info[:2] == char_xy[:2]:
                defend(critter_name)
</code></pre></li>
<li><p>Since you seem like a more advanced beginner, you may want to know what the turnery operator is.
This is good, as it leads to less repetition, like you have in <code>map_gen</code>.</p>

<p>As en example, I'll show one way to think of the turnery operator, and then how to use it.</p>

<pre><code>for i in critter_list:
    if critter_list[i][2] &gt; 0:
        icon = "M"
    else:
        icon = "X"
    gen[critter_list[i][0]][critter_list[i][1]] = icon
</code></pre>

<p>However, this is quite verbose.
Instead you can do:</p>

<pre><code>for critter in critter_list.values():
    gen[critter[0]][critter[1]] = "M" if critter[2] &gt; 0 else "X"
</code></pre></li>
<li><p>You can reduce the repetition in <code>ai</code>, the same way you can in <code>player_input</code>.
Also, I'm ignoring <code>player_in_range</code>.</p>

<pre><code>def ai():
    attack_pos = [
        (char_xy[0] + x, char_xy[1] + y)
        for x in range(-1, 2)
        for y in range(-1, 2)
    ]
    for critter_name, critter_info in critter_list.items():
        if critter_info[2] &gt; 0:
            if critter_info[:2] in attack_pos:
                defend(critter_name)
                if critter_info[:2] == char_xy[:2]:
                    attack(critter_name)
</code></pre>

<p>This shows that again, it's a simple task to change the AI.
However I didn't add if the player is not in range.</p>

<p>For that I would recommend that we use the same thing as we did for <code>move in "wasd"</code>.</p>

<pre><code>index, increment = [
    (0, -1),
    (1, -1),
    (0, 0),
    (0, 1),
    (1, 1)
](random.randrange(0, 5))
try:
    critter_info[index] += increment
except IndexError:
    pass
</code></pre></li>
</ol>

<p>All in all, you can dramatically reduce the size of the code, make it more understandable, 
and less buggy (later on), by adding a few lists.</p>

<p>Also, now you can change the attack range to two with ease!
Time to add a ranger class ay?</p>

<pre><code>attack_pos = [(char_xy[0] + x, char_xy[1] + y) for x in range(-2, 3) for y in range(-2, 3)]
</code></pre>

<p>But here's all the changes I made:</p>

<pre><code>import json
from random import randrange

with open('critter_names.json') as f:
    critter_names = json.load(f)
with open('character.json') as f:
    character = json.load(f)

size = int(input("How big do you want the map? (recomended between 10 and 20): "))
char_xy = [0,0]
critter_list = {}
door = [randrange(0, size), randrange(0, size)]
new_level = True
player_in_range = False
level = 0

def attack(name):
    critter_list[name][2] = critter_list[name][2] - character["weapon_rating"]

def defend(name):
    character["hp"] = character["hp"] - (critter_list[name][3]/character["armour_rating"])

def critter_gen():
    for i in critter_names:
        if randrange(1, 6) == 3:
            #[xpos, ypos, hp, attack]
            critter_list[i] = [randrange(0, size), randrange(0, size), randrange(1, 100), randrange(1, 25)]

def player_input():
    move = input("It's your move! ")
    if move in "wasd":
        index, increment = {
            "w": (0, -1),
            "a": (1, -1),
            "s": (0, 1),
            "d": (1, 1),
        }(move)
        try:
            char_xy[index] += increment
        except IndexError:
            print("That is not a valid move")
    elif move == "e":
        if door[0] == char_xy[0] and door[1] == char_xy[1]:
            new_level = True
    elif move == "f":
        attack_pos = [
            (char_xy[0] + x, char_xy[1] + y)
            for x in range(-1, 2)
            for y in range(-1, 2)
        ]
        for critter_name, critter_info in critter_list.items():
            if critter_info[:2] in attack_pos:
                attack(critter_name)
                if critter_info[:2] == char_xy[:2]:
                    defend(critter_name)
    else:
        print("That is not a valid move")

def map_gen():
    asc = '-'
    gen = [size * [asc] for i in range(size)]
    gen[char_xy[0]][char_xy[1]] = '@'
    for critter in critter_list.values():
        gen[critter[0]][critter[1]] = "M" if critter[2] &gt; 0 else "X"
    gen[door[0]][door[1]] = "D"
    print('\n'.join(' '.join(row) for row in gen))

def ai():
    attack_pos = [
        (char_xy[0] + x, char_xy[1] + y)
        for x in range(-1, 2)
        for y in range(-1, 2)
    ]
    for critter_name, critter_info in critter_list.items():
        if critter_info[2] &gt; 0:
            if critter_info[:2] in attack_pos:
                defend(critter_name)
                if critter_info[:2] == char_xy[:2]:
                    attack(critter_name)
            else:
                index, increment = [
                    (0, -1),
                    (1, -1),
                    (0, 0),
                    (0, 1),
                    (1, 1)
                ](random.randrange(0, 5))
                try:
                    critter_info[index] += increment
                except IndexError:
                    pass

while character["hp"] &gt; 0:
    if new_level == True:
        door = [randrange(0, int(size)), randrange(0, int(size))]
        critter_list = {}
        critter_gen()
        map_gen()
        level += 1
        new_level = False
    elif new_level == False:
        print("N A M E:  " + character["name"])
        print("H E A L T H:  " + str(character["hp"]))
        print("W E A P O N:  " + str(character["weapon_rating"]) + "     " + character["weapon_name"])
        print("A R M O U R:  " + str(character["armour_rating"]) + "     " + character["armour_name"])
        for i in critter_list:
            print("E N E M Y:  " + str(i) + "     " + "H P: " + str(critter_list[i][2]) + "     " + "A T K: " + str(critter_list[i][3]))
        player_input()
        ai()
        map_gen()
        if door[0] == char_xy[0] and door[1] == char_xy[1]:
            new_level = True

print()
print()
print(" ________________________________________________")
print("|    G    A    M    E        O    V    E    R    |")
print(" IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
print()
print("            You Reached L E V E L: " + str(level))
</code></pre>
    </div>