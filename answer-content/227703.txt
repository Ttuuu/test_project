<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For deserialization, its a lost easier if you use serde. Then you can do something like this:</p>

<pre><code>use serde_derive::Deserialize;

// the Deserialize derive is provided by serde, it causes the code
// to be generated that is needed for deserialization
#[derive(Default, Debug, Deserialize)]
// this tells serde you want to use kebab-case, which is 
// with dashes instead of underscores for field names
#[serde(rename_all = "kebab-case")]
// this tells serde to default values to the empty case if not provided
#[serde(default)]
pub struct Torrent {
    announce: String,
    announce_list: Vec&lt;Vec&lt;String&gt;&gt;,
    name: String,
    comment: String,
    multi_file: bool,
    piece_length: i32,
    length: i64,
    creation_date: String,
    total_size: i32,
}
</code></pre>

<p>Then you can read a torrent into this struct with:</p>

<pre><code>let torrent :Torrent = serde_bencode::from_bytes(&amp;v).unwrap();
</code></pre>

<p>But let's ignore that for a moment, and look through your code:</p>

<pre><code>impl Torrent {
    pub fn new() -&gt; Self {
        return Torrent {
            ..Default::default()
        };
    }
</code></pre>

<p>You don't need the explicit return statement. If you leave the semicolon off of the last statement in a function, the expression of that statement will be returned. Further, you don't use to unpack the Default::default() into the Torrent. Default::default() will already return a torrent. So this function could be written</p>

<pre><code>pub fn new() -&gt; Self {
    Default::default()
}
</code></pre>

<p>Moving on</p>

<pre><code>pub fn populate_from_bencode(&amp;mut self, b: Bencode) -&gt; Bencode {
</code></pre>

<p>It is unusual that you would modify an object based on the input. Instead, you typically return a new object based on the bencode input. It also odd that you would return the Bencode. You ignore this output in any case, so its unclear why you are doing this.</p>

<pre><code>    if let Bencode::Dict(dict) = b {
        dict.into_iter().for_each(|(s, b)| {
</code></pre>

<p>I would do <code>for (s,b) in dict {</code> instead. In my mind, it is easier to follow standard for loops rather than doing a for_each. </p>

<pre><code>            if s.as_slice() == b"announce" {
</code></pre>

<p>Rather then having a repeated if statement like this, use <code>match</code> </p>

<pre><code>                self.announce = extract_string(b).unwrap_or_else(|| panic!("unable to extract announce"));
</code></pre>

<p><code>Option</code> has an expect method, which takes a string and panics if the option is none. However, if you are going to panic anyways, why not panic inside extract_string?</p>

<pre><code>            } else if s.as_slice() == b"length" {
                if let Bencode::Number(length) = self.populate_from_bencode(b) {
                    self.length = length;
                }
</code></pre>

<p>In this case, you ignore a non-numeric length. This suspicous, I'd almost certainly rather get an error then silently failing to load length.</p>

<pre><code>pub fn decode_file_into_torrent(path: &amp;'static str) -&gt; Result&lt;Torrent, Box&lt;dyn std::error::Error&gt;&gt; {
</code></pre>

<p>Why are you taking a &amp;'static str. It would seem that this function doesn't have take a str that lasts for the whole lifetime of your application. Further, I prefer to take the std::path::Path and friends types for parameters that are actually paths.</p>

<pre><code>    let mut file = File::open(path)?;
</code></pre>

<p>Why, in this one case, are you returning an error instead of panicking?</p>

<pre><code>    let v = file.bytes().map(|x| x.unwrap()).collect::&lt;Vec&lt;u8&gt;&gt;();
</code></pre>

<p>Firstly, you can do the following:</p>

<pre><code>    let v = file.bytes().collect::&lt;Result&lt;Vec&lt;u8&gt;, _&gt;&gt;();
</code></pre>

<p>Rust knows how to construct a result of vec from iterator over results.</p>

<p>Secondly, there is a specific method for reading the rest of the file</p>

<pre><code>    let mut v = Vec::new();
    file.read_to_end(&amp;mut v).unwrap();
</code></pre>

<p>Third, this a function that reads the whole file into bytes from just the path</p>

<pre><code>    let v = std::fs::read(path)?;
</code></pre>
    </div>