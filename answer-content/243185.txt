<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've implemented <a href="https://en.wikipedia.org/wiki/Riemann_sum" rel="nofollow noreferrer">Riemann sums</a> to numerically integrate functions.  That's a good method if you may have very ugly/discontinuous functions and you don't care how long the integrals take.  Plus it's simple and generally well understood.  If the simplest choice is good enough for your application, then stick with it by all means.</p>

<p>However, there are other algorithms that will evaluate the integrand at fewer points and can handle definite integrals with infinite bounds.</p>

<p>I'm not going to dive into the alternative methods here, but I'll point you to two resources that explain the methods better than I can:</p>

<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Numerical_integration#Methods_for_one-dimensional_integrals" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Numerical_integration#Methods_for_one-dimensional_integrals</a>.  This is a really good article.  I think the pictures show how you can get a more accurate integral with fewer evaluations.</p></li>
<li><p><a href="https://www.boost.org/doc/libs/1_73_0/libs/math/doc/html/math_toolkit/gauss.html" rel="nofollow noreferrer">https://www.boost.org/doc/libs/1_73_0/libs/math/doc/html/math_toolkit/gauss.html</a>.  <code>boost::math::quadrature</code> is Boost's version of your code.  You may enjoy reading the docs and/or the source code to see how they implement more performant algorithms.  As a general rule, whenever you implement something general in C++ it's worth checking if one of the major C++ general purpose libraries has a version.</p></li>
</ul>

<hr>

<pre><code>Integrator(..., int stepSize, ...)
</code></pre>

<p><code>stepSize</code> is only useful in some integration algorithms.  IMO that implies this argument is a leaky abstraction.  Also, why should this be an <code>int</code>?</p>

<p>I think what you really want is a way to control the precision of your answer.  Maybe a <code>double maximumError</code> argument could achieve that?</p>

<hr>

<p>Why is <code>Integrator</code> a class rather than a function?</p>

<hr>

<p>Typically, <code>integral(from: a, to:b) == -integral(from:b, to:a)</code> (<a href="https://en.wikipedia.org/wiki/Integral#Conventions" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Integral#Conventions</a>).  In your implementation, they are equivalent.</p>

<hr>

<blockquote>
  <p>definite double integration of a single variable</p>
</blockquote>

<p>This confused me because you actually introduce a second variable in the limits of integration of the inner integral.  Also you have some little bugs in the integrate function which I think you would have easily caught if you added more test cases.</p>

<p>Imagine your single definite integral functions had the signature <code>template&lt;typename F&gt; double integrate1x(double lower, double upper, F f)</code>.  Then you could implement your outer integral with the same method:</p>

<pre><code>// \int_(L)^(U) \int_(g(y))^(h(y)) f(x) dx dy
template &lt;typename F, G, H&gt;
double integrate2x(double L, double U, G g, H h, F f) {
    return integrate1x(L, U, [&amp;](double y) {
        return integrate1x(g(y), h(y), f);
    });
}
</code></pre>
    </div>