<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am more a man of practice than of advise. </p>

<p>Maybe because I feel the responsibility for the advise I give out. Some advises are much simpler to be given than implemented. I need to make sure that my advise won't raise more questions than it does answer - otherwise it will be anything but help. It is simple to say "use prepared statements" but how exactly one should use it? It is simple to say "do not provide the precise mysql error" but how to do that? </p>

<p>That's why I prefer a complete working solution to a wordy sermon. And, being obsessed with the knowledge re-use, I am writing articles that provide the full story. </p>

<p>Here is one on the <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">error reporting</a>. It basically explains that your database interaction code should (almost) never handle its errors - it's just none of its business. So just leave database errors alone. You'll be to deal with them later, when you'd feel the urge to (of course it is explained in the above article how to do that) but for the moment you can put it aside.<br>
Instead, just <em>configure your PHP</em> to handle errors uniformly, according to the server role.</p>

<p>Here is one about <a href="https://phpdelusions.net/mysqli/mysqli_connect" rel="nofollow noreferrer">mysqli_connect()</a>. The connection code is not as simple as just a single line. There are many options to pay attention for. </p>

<p>Here is one about <a href="https://phpdelusions.net/mysqli_examples/prepared_select" rel="nofollow noreferrer">running SELECT queries with mysqli</a> in general and <a href="https://phpdelusions.net/mysqli/password_hash" rel="nofollow noreferrer">checking login and password against a database</a> in particular.</p>

<p>Other issues in your code are:</p>

<ul>
<li>of course, passwords <strong>must</strong> be hashed. </li>
<li>after the successful login, you have to store the user credentials in a <strong>session</strong>. and then relocate a user to some other page. </li>
<li>there is not much point in strictly validating the input. It makes sense for the registration but here you aren't going to record anything, so you can put aside most validations</li>
<li>therefore, there is no point in the whole return business. The only error message you would have is one that says login or password is incorrect. </li>
<li>there is a rule of thumb says all PHP code must go first and HTML later. It makes sense as your PHP code may want to send an HTTP header first

<ul>
<li>besides, it is always a good idea to separate HTML from PHP.</li>
</ul></li>
<li>escapeSymbols() is completely useless if not harmful</li>
<li>mysqli_num_rows() is also a useless function, it could be skipped seven days in a week</li>
<li>close connection is... also that. If your script is not supposed to work from the point where this function is called (which happens most of time) there is no point in closing the connection manually, PHP will do it for you</li>
<li>the empty form action attribute effectively says "sand the form to the current URL", so it's much simpler and less error prone to leave it empty</li>
<li>the php closing tag (?&gt;) is also useless if it's the last thing in the file</li>
</ul>

<p>Given all the above here is your code refactored</p>

<p>helper_functions.php</p>

<pre><code>&lt;?php

error_reporting(E_ALL);
ini_set('display_errors', 1); // change it to 0 on production
ini_set('log_errors', 1);

require __DIR__ . "/mysqli.php";

function isValidUsername($data) {
    return preg_match('/^[A-Za-z0-9_]+$/', $data);
}
function displayError($errorName) {
    echo "&lt;script type='text/javascript'&gt;document.getElementById('" . $errorName . "').style.display = 'flex';&lt;/script&gt;";
}
</code></pre>

<p>mysqli.php</p>

<pre><code>&lt;?php
$host = '127.0.0.1';
$db   = 'online_store_database';
$user = 'root';
$pass = '';
$charset = 'utf8mb4';

mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
try {
    $mysqli = new mysqli($host, $user, $pass, $db);
    $mysqli-&gt;set_charset($charset);
} catch (\mysqli_sql_exception $e) {
     throw new \mysqli_sql_exception($e-&gt;getMessage(), $e-&gt;getCode());
}
unset($host, $db, $user, $pass, $charset); // we don't need them anymore
</code></pre>

<p>the main PHP file</p>

<pre><code>&lt;?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    require __DIR__ . "/helper_functions.php";

    $stmt = $conn-&gt;prepare("SELECT * FROM `customer_data` WHERE username = ?");
    $stmt-&gt;bind_param("s", $_POST["username"]);
    $stmt-&gt;execute();
    $result = $stmt-&gt;get_result();
    $row = $result-&gt;fetch_assoc();
    if ($row &amp;&amp; password_verify($_POST["password"], $row["password"]))
    {
        session_start();
        $_SESSION['user'] = $row;
        header("Location: /");
        exit;
    } else {
        $error = 'passwordError2';
    }
}
include 'form.php';
</code></pre>

<p>form.php</p>

<pre><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Sample Database Page&lt;/title&gt;
&lt;style&gt;
    body {
        font-family: sans-serif;
    }
    .error {
        display: none;
        margin: 10px;
        align-content: center;
        justify-content: flex-start;
        background-color: red;
        border-radius: 5px;
    }
    .error &gt; p {
        display: block;
        width: auto;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form method="post" action="" id="signInForm"&gt;
    Username:
    &lt;input type="text" name="username" maxlength="15"/&gt;
    Password:
    &lt;input type="text" name="password" maxlength="15"/&gt;
    &lt;input type="submit"/&gt;
&lt;/form&gt;
&lt;div class="errorContainer"&gt;
    &lt;div class="error" id="usernameError1"&gt;
        &lt;img src="exclamation_mark.png" width="35px"/&gt;
        &lt;p&gt;Your username contains invalid characters&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="error" id="passwordError1"&gt;
        &lt;img src="exclamation_mark.png" width="35px"/&gt;
        &lt;p&gt;Your password contains invalid characters&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="error" id="usernameError2"&gt;
        &lt;img src="exclamation_mark.png" width="35px"/&gt;
        &lt;p&gt;The username you enter could not be found. Please try again.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="error" id="passwordError2"&gt;
        &lt;img src="exclamation_mark.png" width="35px"/&gt;
        &lt;p&gt;The password is incorrect. Please try again.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;?php if (!empty($error)) displayError("passwordError2"); ?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
    </div>