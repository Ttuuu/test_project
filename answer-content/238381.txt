<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    stack-&gt;data = (uint8_t *)realloc(stack-&gt;data, stack-&gt;capacity * stack-&gt;itemSize);
</code></pre>
</blockquote>

<p>This is wrong, because if <code>realloc()</code> failed, then there's now no way to access the memory previously pointed to by <code>stack-&gt;data</code>.  The correct pattern for <code>realloc()</code> is:</p>

<pre><code>void *newData = realloc(stack-&gt;data, stack-&gt;capacity * stack-&gt;itemSize);
if (!newData) {
    // Insert error handling - you'll want to restore the old stack-&gt;capacity here
    // or (better) wait until we're okay before updating.
    return FAILURE:
}
stack-&gt;data = newData;
</code></pre>

<hr>

<p>I recommend against casting the result of <code>malloc()</code> family when assigning - these functions return <code>void*</code>, which is assignable to any pointer type without a cast.  The unnecessary cast just distracts the reader (because casts generally indicate danger areas in code).  The same is true for conversions from pointer types to <code>void*</code>, such as this one:</p>

<blockquote>
<pre><code>return (void *)item;
</code></pre>
</blockquote>

<p>That can simply be</p>

<pre><code>return item;
</code></pre>

<hr>

<p>The <code>stack_pop</code> interface is difficult to use - callers have to deal with possible null pointer return, and must remember to <code>free()</code> the result.  Instead, consider having the caller provide memory to write into:</p>

<pre><code>void stack_pop(Stack *stack, void *target);
</code></pre>

<p>The caller should already know the size required for <code>target</code>, and can now get  results in local (<code>auto</code>) storage:</p>

<pre><code>int foo;
stack_pop(&amp;stack, &amp;foo);
// no need to check for null, or to call free()
</code></pre>
    </div>