<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  In this particular case, it's not too terrible because it's a single short program and not a header. Some people seem to think it should never be used under any circumstance, but my view is that it can be used as long as it is done responsibly and with full knowledge of the consequences.  </p>

<h2>Make sure you have all required <code>#include</code>s</h2>

<p>The code uses <code>std::string</code> but doesn't <code>#include &lt;string&gt;</code>.  It's important to make sure you have all required includes to assure that the code compiles and runs portably.</p>

<h2>Simplify your algorithm</h2>

<p>The puzzle can be solved with a single pass through the data.  Here's how this might be done:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;

std::vector&lt;unsigned&gt; count(const std::string &amp;s, size_t n) {
    std::vector&lt;unsigned&gt; groups;
    bool withinBs{false};
    if (s.size() &gt;= n) {
        for (size_t i{0}; i &lt; n; ++i) {
            switch(s[i]) {
                case 'B':
                    if (withinBs) {
                        ++groups.back();
                    } else {
                        groups.push_back(1);
                    }
                    withinBs = true;
                    break;
                default:
                    withinBs = false;
            }
        }
    }
    return groups;
}

int main() {
    int n;
    std::cin &gt;&gt; n;
    std::string s;
    std::cin &gt;&gt; s;

    auto groups{count(s, n)};
    std::cout &lt;&lt; groups.size() &lt;&lt; '\n';
    std::copy(groups.begin(), groups.end(), std::ostream_iterator&lt;int&gt;(std::cout, " "));
}
</code></pre>
    </div>