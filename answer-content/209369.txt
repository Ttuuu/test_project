<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use libraries</h2>

<p>I would suggest a completely different approach.  Keeping the common <code>vkwf.h</code> header makes sense because it presents a uniform interface to programmers using it.  However, the actual library used is going to be dependent on the platform.  That is, there is likely little use in trying to compile the Windows version of the implementation for use on Linux.  Instead, what's more likely is that you will be compiling the Windows version using a compiler that emits Windows code, and a Linux version using a compiler that emits Linux code, etc.  (Some variations can occur, such as compiling under <a href="https://www.cygwin.com/" rel="nofollow noreferrer">Cygwin</a>.)  </p>

<p>So the way to do this is instead to provide separate implementations that each compile into the platform-appropriate static or shared library (e.g. DLLs for Windows and <code>.so</code> files for Linux).  </p>

<h2>Don't abuse headers</h2>

<p>Putting code into a <code>.h</code> file is not a good idea.  The header should contain the <em>interface</em> only and not produce any object file output.  All executable code and memory allocations (e.g. static structures and variables) should be in <code>.c</code> files.  There are many reasons for this advice, with the most important one being that if you have multiple files in a project that each need to <code>#include</code> your header, it will fail if you fail to adhere to this guideline.  Further, it makes the library brittle and unpredictable, because it can introduce strange header-ordering dependencies that are hard to debug.  <strong>Don't do this!</strong></p>

<h2>Study a successful library for ideas</h2>

<p>There are many examples of successful cross-platform libraries.  I'd recommend looking at how the very successful <a href="https://zlib.net/" rel="nofollow noreferrer"><code>zlib</code></a> library was written and emulating that.  </p>
    </div>