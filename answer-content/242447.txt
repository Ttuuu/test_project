<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First thing I notice is your imports.</p>

<pre><code>from collections import defaultdict
import datetime as dt
from functools import lru_cache
import json
from os import path
import pickle

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import yfinance as yf
</code></pre>

<p>The good thing about your imports is they're listed alphabetically and all imports are on their own line. Can we improve this further? Yes. <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">PEP8</a> wants us to split it into 3 groups:</p>

<ul>
<li>Standard library imports</li>
<li>Related third party imports</li>
<li>Local and library-specific imports</li>
</ul>

<p>But, honestly, I'd reorder them like this:</p>

<pre><code>import json
import pickle

import datetime as dt
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import yfinance as yf

from collections import defaultdict
from functools import lru_cache
from os import path
</code></pre>

<p>They're still alphabetically sorted, but now also sorted by <em>how</em> they're imported. Looks cleaner to me.</p>

<p>And I understand this is Jupyter, where you create functions whenever you need them and not a moment sooner, but you first open your file and define a lot of functions right after it. Then you define a function mentioning a blacklist that's only explained after that function is defined and then comes the global that actually <em>does</em> something with the content of the file we read on the start.</p>

<p>That looks awkward at best.</p>

<p><code>useful_cols</code> is not a useful name when in the global scope. Had it be part of a function or method, it would make more sense. Now, what columns are we referring to? It is no table, so it must be a list of column headers. From an input file? Output file? An intermediary result? Can't tell by the name. Going by the styling of the rest of your project, even <code>tx_headers</code> would've been better.</p>

<p><code>calculate_return</code> is a bit of a mess, but I'm not sure how to improve it. Having to call data like</p>

<pre><code>senators_tx[senators_tx['full_name'] == n]
</code></pre>

<p>and</p>

<pre><code>returns = returns[(returns['tx_total_return'] &gt; returns['tx_cagr'])
                  &amp; (returns['tx_cagr'] &gt; 0)]
</code></pre>

<p>looks odd as well, perhaps your data structure isn't optimized for what you're doing with it. If re-arranging your data takes 10 minutes extra and cuts the execution time of all other processes in half, you already have a massive gain. I'd definitely take a look in that direction. How much data do you get, how much do you actually use and is it in an actually useful format?</p>

<p>Some of the returns could be more succinct, but most of them are fine and your error handling isn't too bad either. I think it would be beneficial to you if you move more to your code into functions, but you've done most of that already. For a Jupyter project it really doesn't look that bad.</p>
    </div>