<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Consider using <code>enum class</code></h1>

<p>Instead of having a regular <code>enum</code> inside its own <code>namespace</code>, use an <code>enum class</code>:</p>

<pre><code>enum class UsartSpace: u32 {
    usart0 = XPAR_PS7_UART_0_BASEADDR,
    usart1 = XPAR_PS7_UART_1_BASEADDR,
};
</code></pre>

<p>Then, to ensure someone cannot instantiate a <code>Usart</code> with the wrong base address, make the constructor take this <code>enum</code> as a parameter:</p>

<pre><code>template &lt;typename T&gt;
Usart&lt;T&gt;::Usart(UsartSpace usartSpace): usartNumber(static_cast&lt;u32&gt;(usartSpace)) {
}
</code></pre>

<p>Also, "Space" is a bit of a generic word that doesn't say much, but you can't call the enum <code>Usart</code> since you already have <code>class Usart</code>. Consider moving the enum to inside <code>class Usart</code>, and since it refers to a port, just call it <code>Port</code>. And perhaps keep the distinction between port number and address clear:</p>

<pre><code>template &lt;typename T&gt;
class Usart: public Platform {
private:
    u32 baseAddress;
    static const u32 addresses[] = {
        XPAR_PS7_UART_0_BASEADDR,
        XPAR_PS7_UART_1_BASEADDR,
    };

public:
    enum class Port {
        usart0,
        usart1,
    };

    Usart(Port port);
    ...
};

...

template &lt;typename T&gt;
Usart&lt;T&gt;::Usart(Port port):
    baseAddress(addresses[static_cast&lt;size_t&gt;(port)])
{
}
</code></pre>

<p>In code that uses this class, you would then write:</p>

<pre><code>Usart&lt;sometype&gt; usart(Usart::Port::usart0);
</code></pre>

<h1>Use better names</h1>

<p>What you call a <code>usartNumber</code> looks like an base address to me, so call it <code>baseAddress</code> instead. In any case, don't repeat the name of the class in the member variable names.</p>

<p>Also, <code>dataValue</code> is not the value of some piece of data, it's the size of the data you want to read or write. So call it <code>size</code>, and if possible use <code>size_t</code> as its type:</p>

<pre><code>status transmit(T *pData, size_t size);
status receive (T *pData, size_t size);
</code></pre>

<h1>Is it <code>status</code> or <code>StatusSpace</code>?</h1>

<p>I feel this is another case of an <code>enum</code> in its own <code>namespace</code> being used as a way to declare constants of another type. I would instead define:</p>

<pre><code>enum class Status {
    ok,
    error,
    ...
};
</code></pre>

<h1>Use array notation where appropriate</h1>

<p>Instead of writing <code>*(pByteData + byteCounter)</code>, just write the more ideomatic <code>pByteData[byteCounter]</code>.</p>

<h1>Use <code>const</code> where appropriate</h1>

<p>You wouldn't expect the function <code>transmit()</code> to modify the data that you want to send. So make this explicit:</p>

<pre><code>template &lt;typename T&gt;
class Usart: public Platform {
    ...
    status transmit(const T *pdata, size_t size);
    ...
}
</code></pre>

<h1>Consider templating <code>transmit()</code> and <code>receive()</code> instead of the whole <code>class</code></h1>

<p>The only things that depend on the template parameter <code>T</code> are the <code>transmit()</code> and <code>receive()</code> functions. By making the <code>class</code> templated, you basically lock the type of data you can send and receive when you instantiate the class. Consider instead templating just those two functions, so you can send and receive different data types on the same UART without having to reinstantiate the class:</p>

<pre><code>class Usart: public Platform {
    ...
    template &lt;typename T&gt;
    status transmit(const T *pData, size_t size);

    template &lt;typename T&gt;
    status receive(T *pData, size_t size);
    ...
};
</code></pre>

<h1>Use Doxygen to document your code</h1>

<p>You are documenting your code, which is good practice, but consider doing it in <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">Doxygen</a>'s format, so you can have Doxygen create cross-referenced documentation in HTML, PDF and other forms. Doxygen can also check that you documented all the functions and all the parameters to the functions.</p>
    </div>