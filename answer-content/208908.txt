<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot of great work here, I have a few suggestions, I'll start with a few recommended changes, and finish with some suggestions for improvements.</p>

<p>Let's firstly take a look at your <strong>migration</strong>. </p>

<p>Do not set a default on a foreign key column. Your user_id defaults to 0, which could be an actual user record, so if a record was ever (somehow) created or modified to without a user_id, it would suddenly belong to that user. </p>

<p>You can take this opportunity to add an index on the user_id for the posts table, it will make certain requests significantly faster, such as looking up all of the posts belonging to one user.</p>

<p>Moving on to your <strong>view</strong>.</p>

<p>You can add a method to your Post model to indicate if the post has no tags. Rather than using <code>!post.tag_1 &amp;&amp; !post.tag_2 &amp;&amp; !post.tag_3 &amp;&amp; !post.tag_4</code> in the view, we can make a method to handle that logic for us. </p>

<p>Imagine something like this in your Post model:</p>

<pre><code>def no_tags?
  !tag_1 &amp;&amp; !tag_2 &amp;&amp; !tag_3 &amp;&amp; !tag_4
end
</code></pre>

<p>This would mean you could change your view from:</p>

<pre><code>&lt;% if !post.tag_1 &amp;&amp; !post.tag_2 &amp;&amp; !post.tag_3 &amp;&amp; !post.tag_4 %&gt;
  &lt;li&gt;none&lt;/li&gt;
&lt;% end %&gt;
</code></pre>

<p>to:</p>

<pre><code>&lt;% if post.no_tags? %&gt;
  &lt;li&gt;none&lt;/li&gt;
&lt;% end %&gt;
</code></pre>

<p>which I think reads a lot more easily. This kind of method, where you're not modifying data but simply reading it, is sometimes refactored (tidied up) using design patterns like decorators or presenters. It's common to have methods that are really only used for the <em>presentation</em> of data, rather than manipulation, and those design patterns can help keep them away from the business logic of the model.</p>

<p>Those are the first minor changes I'd make to this code, without significantly changing the architecture. If you wanted to take it further, however, I would suggest the following.</p>

<p>It's clear from what you've said in your post that you can see there's something not quite <em>right</em>. Those conditionals in the view are probably the obvious 'smell'.</p>

<p>Think through a moment, and consider what you would do if you needed to add another tag. </p>

<p>You'd first need to add a column in the posts table, to store the boolean value. You'd need to modify our new <code>no_tags?</code> method to include <code>tag_5</code>, and you'd need to change the view to add another conditional, checking to see if <code>tag_5</code> was present.</p>

<p>I think you'll be much better off if you define a many-to-many relationship between the Post model and a new Tag model. Each tag model can have a name, and your post model will <code>has_and_belongs_to_many</code> tags, allowing you to change your view code to something like:</p>

<pre><code>&lt;% post.tags.each do |tag| %&gt;
  &lt;li&gt;&lt;%= tag.name %&gt;&lt;/li&gt;
&lt;% end %&gt;
</code></pre>

<p>I recommend you read the rails guide on relationships, specifically: <a href="https://guides.rubyonrails.org/association_basics.html#has-and-belongs-to-many-association-reference" rel="nofollow noreferrer">https://guides.rubyonrails.org/association_basics.html#has-and-belongs-to-many-association-reference</a></p>
    </div>