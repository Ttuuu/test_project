<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing I do not get is here:</p>

<pre><code>struct Color { // define a new color that we learned of compare
    std::string colorName; // name of the color, ex. red, blue
    cv::Scalar bgr; // blue, green, and red values in that order
    cv::Scalar difference; // what is the difference between, blue and green, green and red, and red and blue
};
</code></pre>

<p>How can three values be a scalar? how can the difference between these two be a scalar? It is obviously not your code, but it confuses me on the spot.</p>

<hr>

<p>Please use descriptive names. The amount time saved by typing <code>getAvg</code> rather than <code>getAverage</code> is small compared to the time you need to read them properly once more <code>getFoo</code> functions fly around.</p>

<hr>

<p>You are always passing the data by copy</p>

<pre><code>cv::Scalar getAvg(std::vector&lt;cv::Scalar&gt; imgData)
</code></pre>

<p>This is really slow and you should definitely pass it by reference or const reference depending on your need.</p>

<p>Also the <code>getAvg</code> function should not modify your data so it should be const too. In Summary your function signature should look like this</p>

<pre><code>cv::Scalar getAverage(const std::vector&lt;cv::Scalar&gt;&amp; imgData) const
</code></pre>

<hr>

<p>Not your library, but without words</p>

<pre><code>cv::Scalar avg = { 0,0,0,0 }; // new scalar
</code></pre>

<hr>

<p>Your <code>getAverage</code> function seems dubious. The strange part is</p>

<pre><code>cv::Scalar getAvg(std::vector&lt;cv::Scalar&gt; imgData) { // get the average BGR of a vector of images BGR value
    cv::Scalar avg = { 0,0,0,0 }; // new scalar
    for (int rgb = 0; rgb &lt; 3; rgb++) { // cycle through the colors
    ...
}
</code></pre>

<p>avg is a scalar of size 4 but you only iterate the first 3 elements? So why is it of size 4 when there are only 3 colors? You should either fix this or add a good explanation.</p>

<hr>

<p>In your training routine you are loading the image data. This should be a separate function. Generally try to encapsulate your functionality better.</p>

<hr>

<p>Your <code>getColorAccuracy()</code> function is kind of strange. You are passing a vector (scalar) and then an element to a scalar and then pushing that back into a vector. Just vectorize the whole function, so that it returns a <code>std::vector&lt;double&gt;</code>.</p>

<hr>

<p>Cool but seems like an overkill:</p>

<pre><code>Color bestColor = color[std::distance(accuracy.begin(), 
                                      std::find(accuracy.begin(), 
                                                accuracy.end(),
                                                *std::max_element(accuracy.begin(), 
                                                                  accuracy.end())))]; // get the best match color
</code></pre>

<p>Especially as <code>max_element</code> returns the iterator to the greatest element. So what you are doing is finding the pointer of the maximal element, dereferencing it to find that maximal element and get its pointer back. That should do it too:</p>

<pre><code>Color bestColor = color[std::distance(accuracy.begin(),
                                      std::max_element(accuracy.begin(), 
                                                       accuracy.end())))]; // get the best match color
</code></pre>

<hr>

<p>I assume you mean <code>Guess</code>?</p>

<pre><code>Color getColorGuest(std::vector&lt;Color&gt; color, cv::Mat image) { // guest the color
</code></pre>
    </div>