<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This kind of programming exercice, despite its apparent simplicity, is a good opportunity to learn various things.</p>

<p><strong>Style</strong></p>

<p>Python has a <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Code Style guide called PEP 8</a>. If you begin with Python, I highly recommend reading it every now and then and trying to apply it.</p>

<p>In your case, a few things could be improved regarding style:</p>

<ul>
<li>blank lines between the different branches of <code>if</code> are more an inconvenience from my point of view</li>
<li>variables should follow the <code>snake_case</code> naming convention (instead of <code>camelCase</code>)</li>
</ul>

<p><strong>Builtin <code>input</code></strong></p>

<p>As you've noticed for the end of the function, the <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code> builtin</a> takes an optional <code>prompt</code> parameter. This could be used at the beginning of the function as well.</p>

<p><strong>Duplicated code</strong></p>

<p>A lot of code looks like the same line with minimal variations. Having duplicated code makes the code more tedious to read and harder to maintain (if you need to change something, you'll need to change it in many places). One of the principles of software programming is <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself</a> (also written DRY).</p>

<p>In your case, we could store the body category in a variable and only print the ouput from a single place:</p>

<p><strong>Chained comparison</strong></p>

<p>This is very specific to Python but instead of <code>body_mass_index &gt; 30 and body_mass_index &lt;= 35</code>, we can write: <code>30 &lt; body_mass_index &lt;= 35</code> using chained <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">comparisons</a>.</p>

<p><strong>Magic numbers</strong></p>

<p><a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a> are usually frowned upon. In our case, one needs a bit of thinking to understand where the <code>12</code> and <code>0.025</code> come from. A better way to handle this is to store them in a variable with a meaningful name.</p>

<p><em>I am not quite sure about the best naming convention for names related to conversion constant. I've followed the names suggested by <a href="https://codereview.stackexchange.com/users/90454/solomon-ucko">Solomon Ucko</a> in the comments.</em></p>

<hr>

<p>At this stage, we have the following code:</p>

<pre><code>INCHES_PER_FOOT = 12
METERS_PER_INCH = 0.0254

weight_in_kilo = float(input('Enter your weight in kilo:'))
height_in_feet = float(input('Enter your height in feet:'))

height_in_meter = height_in_feet * INCHES_PER_FOOT * METERS_PER_INCH
body_mass_index = weight_in_kilo / (height_in_meter ** 2)

if body_mass_index &lt; 15:
    category = 'very severely underweight'
elif 15 &lt;= body_mass_index &lt;= 16 :
    category = 'severely underweight'
elif 16 &lt; body_mass_index &lt;= 18.5:
    category = 'underweight'
elif 18.5 &lt; body_mass_index &lt;= 25:
    category = 'Normal(healthy weight)'
elif 25 &lt; body_mass_index &lt;= 30:
    category = 'overweight'
elif 30 &lt; body_mass_index &lt;= 35:
    category = 'moderately obese'
elif 35 &lt; body_mass_index &lt;= 40:
    category = 'severely obese'
elif body_mass_index &gt; 40:
    category = 'very severely obese'

print('Your BMI = ' + str(body_mass_index) + ' You are ' + category + '.')
input('Please press Enter to exit')
</code></pre>

<p>Which can still be improved.</p>

<hr>

<p><strong>Mutually exclusive conditions</strong></p>

<p>Because of the way we check <code>body_mass_index</code>, if it is under 15, we get into the first case so there is no need to check <code>elif 15 &lt;= body_mass_index</code> in the <code>else</code> part. This is guaranteed to be always true. Similarly, half the checks have no effect.</p>

<p><strong>Code organisation</strong></p>

<p>To make the code easier to understand (and easier to reuse, to test, etc), it is a good habit to split in into smaller reusable chunks. In our case, defining functions could be a nice touch.</p>

<p><em>Disclaimer: Next paragraph can be a bit overwhelming for a beginner, do not worry if you do not fully get it. It highlights how to solve problems you may not be interested in yet but it is a good chance to do things properly.</em></p>

<p>Also, if we want to be able to actually reuse your functions, we want to be able to <code>import</code> the file. Currently, if we do so, we get stuck into the parts asking for user inputs. Thus, the usual strategy is the following: split your code into 2 parts:</p>

<ul>
<li><p>code defining functions/constants/classes/etc but without any side-effect or user interactions</p></li>
<li><p>code actually doing things (input/output, etc) behind an <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a>. As pointed out by <a href="https://codereview.stackexchange.com/users/90454/solomon-ucko">Solomon Ucko</a>, it's generally a good idea to have this performed via a <code>main()</code> function and have the last two (non-blank) lines be <code>if __name__ == '__main__': main()</code>. This allows the interactivity to be triggered as needed.</p></li>
</ul>

<hr>

<p>At this stage, we have:</p>

<pre><code>INCHES_PER_FOOT = 12
METERS_PER_INCH = 0.0254

def convert_feet_to_meter(height_in_feet):
    return height_in_feet * INCHES_PER_FOOT * METERS_PER_INCH

def get_body_mass_index(height_in_meter, weight_in_kilo):
    return weight_in_kilo / (height_in_meter ** 2)

def get_category(body_mass_index):
    if body_mass_index &lt; 15:
        return 'very severely underweight'
    elif body_mass_index &lt;= 16 :
        return 'severely underweight'
    elif body_mass_index &lt;= 18.5:
        return 'underweight'
    elif body_mass_index &lt;= 25:
        return 'Normal(healthy weight)'
    elif body_mass_index &lt;= 30:
        return 'overweight'
    elif body_mass_index &lt;= 35:
        return 'moderately obese'
    elif body_mass_index &lt;= 40:
        return 'severely obese'
    else:
        return 'very severely obese'

def main():
    weight_in_kilo = float(input('Enter your weight in kilo:'))
    height_in_feet = float(input('Enter your height in feet:'))
    height_in_meter = convert_feet_to_meter(height_in_feet)
    body_mass_index = get_body_mass_index(height_in_meter, weight_in_kilo)
    category = get_category(body_mass_index)
    print('Your BMI = ' + str(body_mass_index) + ' You are ' + category + '.')
    input('Please press Enter to exit')

if __name__ == "__main__":
    main()
</code></pre>

<hr>

<p>Going further, a few more details could be improved.</p>

<p><strong>String formatting</strong></p>

<p>Python offers many tools to format strings so that you do not need to use string concatenations. You can refer to <a href="https://pyformat.info/" rel="nofollow noreferrer">PyFormat.info</a> for documentations and examples.</p>

<p>You could write:</p>

<pre><code>print('Your BMI = %f You are %s.' % (body_mass_index, category))
</code></pre>

<p>Or the newer technique:</p>

<pre><code>print('Your BMI = {} You are {}.'.format(body_mass_index, category))
</code></pre>

<p>Also, in Python 3.6, yet another soution was added: <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">F-strings</a>.</p>

<p><strong>Data over code</strong></p>

<p>This may be a bit overkill here but sometimes a lot of code can be replaced by a small amount of code working on a properly filled data structure. In our case, the <code>get_category</code> function does the same thing for all categories: check the if we are under a given limit and if so, return the category name.</p>

<p><em>Disclaimer: Next part works under the assumption that <code>body_mass_index &lt; 15</code> should actually use <code>&lt;=</code> like the other cases.</em></p>

<pre><code># List of pairs (higher-limit, name) sorted
CATEGORIES = [
    (15, 'very severely underweight'),
    (16, 'severely underweight'),
    (18.5, 'underweight'),
    (25, 'Normal(healthy weight)'),
    (30, 'overweight'),
    (35, 'moderately obese'),
    (40, 'severely obese'),
]

def get_category(body_mass_index):
    for limit, name in CATEGORIES:
        if body_mass_index &lt;= limit:
            return name
    return 'very severely obese'
</code></pre>
    </div>