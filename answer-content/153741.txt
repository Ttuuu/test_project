<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Advice 1</strong></p>

<pre><code>if(positionPointer==arraySize)
</code></pre>

<p>You should have always one space before and after a binary operator:</p>

<pre><code>if(positionPointer == arraySize)
</code></pre>

<p><strong>Advice 2</strong></p>

<p>For Java, more conventional way of writing blocks is</p>

<pre><code>if (...) {
    ...
}
</code></pre>

<p>instead of </p>

<pre><code>if (...) 
{
    ...
}
</code></pre>

<p><strong>Advice 3</strong></p>

<p>Omit the <code>arraySize</code> and use <code>dynamicArray.length</code> instead.</p>

<p><strong>Advice 4</strong></p>

<pre><code>private int positionPointer=0;
</code></pre>

<p>Just write </p>

<pre><code>private int positionPointer;
</code></pre>

<p>since JVM initializes integer fields to zero by default.</p>

<p><strong>Advice 5</strong></p>

<p>You use <code>positionPointer</code> for keeping track of the number of elements in your data structure. For that very reason, I suggest you rename it to <code>size</code>.</p>

<p><strong>Advice 6</strong></p>

<pre><code>public void addElementAtNode(int index, T element)
{
    if(index&lt;positionPointer)
    {
        dynamicArray[index]=element;
    }
    else
    {
        addElement(element);
        throw new ArrayIndexOutOfBoundsException("index "+index+" is greater than the size of array "+(positionPointer-1)+" \nElement added to end of array..");
    }
}
</code></pre>

<p>Above, if the index is correct, you basically <strong>set</strong> an element instead of adding it. I suggest you rename it to <code>set</code>. Also, it seems strange what you do in the case if index is invalid.</p>

<p><strong>Advice 7</strong></p>

<p>In your <code>increaseSize</code>, you can just say:</p>

<pre><code>dynamicArray = Arrays.copyOfRange(dynamicArray, 0, 2 * dynamicArray.length);
</code></pre>

<p>Also, same applies to <code>decreaseSize</code>:</p>

<pre><code>dynamicArray = Arrays.copyOf(dynamicArray, dynamicArray.length / 4);
</code></pre>

<p><strong>Advice 8</strong></p>

<pre><code>public int searchElement(T element)
{
    for(int i=0;i&lt;positionPointer;i++)
    {
        if(dynamicArray[i].equals(element))
        {
            return i;
        }
    }
    throw new NoSuchElementException("Element not found : "+element.toString());
}
</code></pre>

<p>If the array contains a null value, <code>if(dynamicArray[i].equals(element))</code> will throw. Also, conventional lists return the value <code>-1</code> in case of missing element instead of throwing <code>NoSuchElementException</code>:</p>

<pre><code>public int searcElement(T element) {
    for (int i = 0; i &lt; positionPointer; ++i) {
        if (Objects.equals(element, dynamicArray[i])) {
            return i;
        }
    }

    return -1;
}
</code></pre>

<p><strong>Advice 9</strong></p>

<p>In <code>removeElementAtIndex</code>, instead of</p>

<pre><code>dynamicArray[positionPointer-1]=null;
positionPointer--;
</code></pre>

<p>you can write</p>

<pre><code>dymaicArray[--positionPointer] = null;
</code></pre>

<p><strong>Advice 10</strong></p>

<p>You make sure that the indices are not too large. However, you must make sure that they are not negative either.</p>

<p>Hope that helps.</p>
    </div>