<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Because we write C++, there's no reason to declare (most) variables at the beginning of the scope of your function. For example, all of <code>d</code>, <code>rx</code>, <code>ry</code> and <code>s</code> have been declared for no reason if you happen to throw and exit the function.</p></li>
<li><p>You don't need <code>s</code> after the for-loop, so it should be local to the loop only. Similar for <code>rx</code> and <code>ry</code>.</p></li>
<li><p>Make use of shorthand operators like <code>/=</code> and <code>+=</code>.</p></li>
<li><p>You can make <code>v</code> const and initialize it with a suitable constructor, in this case <code>std::vector&lt;uint64_t&gt; v(1, d);</code> initializes <code>v</code> to hold one element equal to <code>d</code>. But really, as it stands, I see no point in using an array here if you just have a single value (I suspect your example is incomplete and not representative of your real use case, which is a shame).</p></li>
<li><p>Because <code>len</code> can be const, make it const. This protects from unintended errors and possibly allows the compiler to perform more optimizations.</p></li>
<li><p>As a general comment, avoid saying <code>using namespace std;</code>, it's not good for you.</p></li>
<li><p>I don't know the interface of <code>Rcpp::NumericVector</code>, but might you initialize it directly in the spirit of <code>const Rcpp::NumericVector nn(v.cbegin(), v.cend())</code>, for instance?</p></li>
</ul>
    </div>