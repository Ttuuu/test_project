<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You <em>could</em> use the <code>filter</code> method, but I'm not convinced it makes the code any more efficient or readable:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function stray(numbers) {
  return numbers.find(i =&gt; numbers.filter(j =&gt; j === i).length === 1);
}
console.log(stray([17, 17, 3, 17, 17, 17, 17]));
console.log(stray([17, 17, 23, 17, 17, 17, 17]));</code></pre>
</div>
</div>


<p><sup>I've added an example where the "stray" number is greater than the others as a sanity check.</sup></p>

<p><code>find</code> is a bit like <code>filter</code> except that it returns the first element in the array that causes the function to return true.</p>

<p><code>filter</code> here is used to find the number which is only found in the array once.</p>

<hr>

<p>Your original code could be shortened by using a conditional operator, along with the <code>slice</code> function (which shortens the code necessary to get the first/last element a little):</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function stray(numbers) {
  numbers = numbers.sort((a, b) =&gt; a - b);
  return numbers.slice((numbers[0] !== numbers[1] ? 0 : -1))[0];
}
console.log(stray([17, 17, 3, 17, 17, 17, 17]));
console.log(stray([17, 17, 23, 17, 17, 17, 17]));</code></pre>
</div>
</div>

    </div>