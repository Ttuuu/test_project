<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After reading the answers, I figured the best practice is to open the connection for every query. I have read that ADO.NET will then manage my pooling, and I will benefit from this feature because C# will manage my resources better. Correct me if I'm wrong.</p>

<p>My code will then be something like this:</p>

<pre><code>public class Database
{
    /// &lt;summary&gt;
    /// The private singleton instance of the database.
    /// &lt;/summary&gt;
    private static Database _instance;

    /// &lt;summary&gt;
    /// This will be the connectionstring used for connecting to the database
    /// &lt;/summary&gt;
    private string _conStr;

    /// &lt;summary&gt;
    /// The constructor.
    /// &lt;/summary&gt;
    private Database(string conStr) 
    {
        _conStr = conStr;
    }              

    /// &lt;summary&gt;
    /// The public singleton instance of the database
    /// &lt;/summary&gt;
    public static Database Instance
    {
        get
        {
            if (_instance == null)
            {
                //Create a new instance if it is not already done.
                _instance = new Database();
            }
            return _instance;
        }
    }

    /// &lt;summary&gt;
    /// This method will execute the given query and will return the result given from the database
    /// &lt;/summary&gt;
    /// &lt;param name="query"&gt;The query&lt;/param&gt;
    /// &lt;param name="params"&gt;The params for the query&lt;/param&gt;
    /// &lt;returns&gt;The result given from the database&lt;/returns&gt;
    public DataTable Read(string query, Dictionary&lt;string, string&gt; params)
    {
        DataTable resultTable = new DataTable();

        using(MySqlConnection con = new MySqlConnection(_conStr))
        {
            con.Open();         

            //Create the command with the given query
            using(MySqlCommand cmd = new MySqlCommand(query, con))
            {
                 foreach(KeyValuePair&lt;string, string&gt; pair in params)
                 {
                      cmd.Parameters.AddWithValue(pair.Key, pair.Value);
                 }

                 //We need MySqlDataAdapter to store all rows in the datatable
                 using (MySqlDataAdapter adapter = new MySqlDataAdapter(cmd))
                 {
                      adapter.Fill(resultTable);
                 }
            }

        //Return the result.
        return resultTable;
    }
}
</code></pre>
    </div>