<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If your function is called with non-aligned memory, it will allocate two buffers, copy, do the simple fast thing, copy again, and free. That’s a whole lotta work for something simple and fast. And if the step sizes don’t match, the copy will be even slower.</p>

<p>If this the normal execution case, I can imagine this being a significant drain on resources.</p>

<p>You are processing video. Each frame will have the same size. You can keep the internal buffers in this function around from call to call, so you can reuse them and avoid the <code>malloc</code>s.</p>

<p>But even better would be to directly read your video into aligned memory, in the right format for the IPP library. Your functions should just error out if the input pointers are not aligned.</p>

<p>Furthermore, the output data is stored in memory <code>new</code>ed. You should pass a data pointer from the caller to write in. If you don’t want to do that, why not directly allocate this output buffer with the right alignment?</p>

<p>I would recommend skipping all the <code>step</code> computations and worries, simply setting</p>

<pre><code>size.width = width * height;
size.height = 1;
</code></pre>

<p>If the IPP function believes all pixels are on a single row, then you don't need those padding bytes at the end of odd-sized rows.</p>

<hr>

<p>There is a bug: In the case that <code>malloc</code> fails, (<code>imgYUV422_IPP == NULL</code>), you free a NULL pointer. Here you probably intended to free the <code>rgbImg</code> buffer if it was allocated earlier.</p>

<p>Similarly, <code>pBGR</code> is never freed on error.</p>
    </div>