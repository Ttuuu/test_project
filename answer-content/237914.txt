<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>why someone just write Overly Complex 2 times </p>
</blockquote>

<p>I don't know what format you originally received this information in, but it looks like there are 4 "tags" applied to your application:</p>

<ol>
<li>Overly Complex Solution</li>
<li>Strange Coding Conventions</li>
<li>Poorly Structured </li>
<li>Hard to Understand </li>
</ol>

<p>With someone having modified the first one to include some extra information:</p>

<ul>
<li>Overly Complex Solution but the first solution did handle edge cases well.</li>
</ul>

<p>Which says to me that multiple people look at your solution and "rate" it, and multiple people thought it was Overly Complex, with one of those people adding extra detail.</p>

<blockquote>
  <p>why someone just write Overly Complex 2 times and Hard to Understand again which means the same. </p>
</blockquote>

<p>I don't know their system, but <strong>overly complex</strong> and <strong>hard to understand</strong> are two different things. Here is an pseudo-code example that is <strong>overly complex</strong> yet <strong>easy to understand</strong>:</p>

<pre><code>list = [
    -1 + 1,
    0 + 1,
    1 + 1,
    2 + 1,
    2 + 2,
    1 + 4,
    3 + 3,
    1 + 6,
]
</code></pre>

<p>It is a pointlessly complex way of saying "[0, 1, 2, 3, 4, 5, 6, 7]", yet I think it's pretty easy to understand?</p>

<p>Therefore they are two separate categories in their system.</p>

<blockquote>
  <p>I was just waiting for the result and didn't even asked for feedback yet</p>
</blockquote>

<p>The feedback is the result :)</p>

<blockquote>
  <p>English is not my first language but what I understand from feedback is something that can help me to improve also this mail sounds so offensive and destructive. I am not going to ask for detailed feedback because of that reason. </p>
</blockquote>

<p>Feedback doesn't <em>have</em> to help you improve, it could simply be an "explanation" of why they rejected you.</p>

<hr>

<p>In terms of an actual code review, I'll point out that I don't know their system so I'll guess at what they meant for each category:</p>

<blockquote>
  <ol>
  <li>Overly Complex Solution</li>
  </ol>
</blockquote>

<p>This is the hardest for me to explain, because there's no much code here really, and the steps you take don't seem <em>that</em> complex, but then again I don't know what the ideal, "simple" solution is. Your code is very functional and callback-based. Perhaps they were after something more straight forward and procedural?</p>

<p>Perhaps something like this:</p>

<pre><code>const groupDuplicateTransactions = arr =&gt; {
  const subArrays = [];
  for (let runner = 1, prevDuplicate = false, arrInd = -1; runner &lt; arr.length; runner++) {
    if (isDuplicate(arr[runner], arr[runner - 1])) {
      if (!prevDuplicate) arrInd++;
      if (!subArrays[arrInd]) subArrays[arrInd] = [];
      subArrays[arrInd].push(arr[runner - 1]);
      if (runner === arr.length - 1) subArrays[arrInd].push(arr[runner]);
      prevDuplicate = true;
    } else {
      if (prevDuplicate) subArrays[arrInd].push(arr[runner - 1]);
      prevDuplicate = false;
    }
  }
  return subArrays;
}
</code></pre>

<p>could be expressed differently? e.g. you declare 3 things in the for-initialiser, one called <code>arrInd</code> and one called <code>runner</code>. These are unidiomatic names for such iterating variables. And what's the difference between the two? To figure that out we must deeply inspect the code. We don't want to do that -- we want the code to obviously tell us what these things are.</p>

<p>Perhaps the interviewers felt this method of iterating was too complex for them?</p>

<blockquote>
  <ol start="2">
  <li>Strange Coding Conventions</li>
  </ol>
</blockquote>

<p>This I have to agree with. Coding conventions are usually designed to make code easer to read, so that we can read a lot of it quickly. Your code is incredibly dense and requires a lot of <em>careful reading</em>. I have a hard time even figuring out which line belongs with which other statements. You could have written the exact same thing in a way that doesn't require <em>careful reading</em>. </p>

<p>As an example, let's look at <code>groupDuplicateTransactions</code> again:</p>

<pre><code>const groupDuplicateTransactions = arr =&gt; {
  const subArrays = [];
  for (let runner = 1, prevDuplicate = false, arrInd = -1; runner &lt; arr.length; runner++) {
    if (isDuplicate(arr[runner], arr[runner - 1])) {
      if (!prevDuplicate) arrInd++;
      if (!subArrays[arrInd]) subArrays[arrInd] = [];
      subArrays[arrInd].push(arr[runner - 1]);
      if (runner === arr.length - 1) subArrays[arrInd].push(arr[runner]);
      prevDuplicate = true;
    } else {
      if (prevDuplicate) subArrays[arrInd].push(arr[runner - 1]);
      prevDuplicate = false;
    }
  }
  return subArrays;
}
</code></pre>

<p>could be:</p>

<pre><code>const groupDuplicateTransactions = (arr) =&gt; {
  const subArrays = [];

  for (let runner = 1, prevDuplicate = false, arrInd = -1; runner &lt; arr.length; runner++) {
    if (isDuplicate(arr[runner], arr[runner - 1])) {
      if (!prevDuplicate) arrInd++;
      if (!subArrays[arrInd]) subArrays[arrInd] = [];

      subArrays[arrInd].push(arr[runner - 1]);

      if (runner === arr.length - 1) subArrays[arrInd].push(arr[runner]);

      prevDuplicate = true;
    } else {
      if (prevDuplicate) subArrays[arrInd].push(arr[runner - 1]);

      prevDuplicate = false;
    }
  }
  return subArrays;
}
</code></pre>

<p>All I've done here is add a bit of whitespace, and suddenly things are more obvious and quickly-readable. </p>

<p>Most coding standards don't like single-line if-statements. So taking it a step further:</p>

<pre><code>const groupDuplicateTransactions = (arr) =&gt; {
  const subArrays = [];

  for (let runner = 1, prevDuplicate = false, arrInd = -1; runner &lt; arr.length; runner++) {
    if (isDuplicate(arr[runner], arr[runner - 1])) {
      if (!prevDuplicate) {
        arrInd++;
      }
      if (!subArrays[arrInd]) { 
        subArrays[arrInd] = [];
      }

      subArrays[arrInd].push(arr[runner - 1]);

      if (runner === arr.length - 1) {
        subArrays[arrInd].push(arr[runner]);
      }
      prevDuplicate = true;
    } else {
      if (prevDuplicate) {
        subArrays[arrInd].push(arr[runner - 1]);
      }
      prevDuplicate = false;
    }
  }
  return subArrays;
}
</code></pre>

<p>Additionally, your code is not consistent. 
The average line is (approx) 20 characters in length, but then you have some whoppers like this:</p>

<blockquote>
<pre><code>   .filter(transaction =&gt; isValidTransactionObject(transaction, transactionSchema).length === 0) // Just to be sure objects are valid transaction objects, objects which are not can be ignored while running algorithm but for the sake of cleanness I have decided to filter out beforehands
</code></pre>
</blockquote>

<p>That comment could have easily been a multi-line comment on the line before. Instead you chose to put it all on one line. Why? I imagine most people wouldn't even see the comment as it's way off screen, and they've not had to scroll for any reason before this.</p>

<blockquote>
  <ol start="3">
  <li>Poorly Structured </li>
  </ol>
</blockquote>

<p>I'm not sure how their system differentiates this from 1 or 2, as one person's "Strange Coding Conventions" is another person's "poorly structured". </p>

<p>If they mean the placement of functions within a file, then it seems ok to me... based on the assumption that you were restricted to a single file. Otherwise it would have been best to use multiple files, e.g. "utils.js" for all the stuff under <code>/*** UTILS ***/</code></p>

<blockquote>
  <ol start="4">
  <li>Hard to Understand </li>
  </ol>
</blockquote>

<p>I think this category is a combination of 1,2,3. But if we are to separate it out then we should remember the maxim that code is read more often than it's written, and your code doesn't appear to be optimised for reading. </p>

<p>e.g.</p>

<pre><code>const sorter = (a, b) =&gt; {
  if (a.sourceAccount === b.sourceAccount) {
    if (a.targetAccount === b.targetAccount) {
      if (a.amount === b.amount) {
        if (a.category === b.category) {
          return b.time &lt; a.time ? 1 : -1;
        }
        return b.category &lt; a.category ? 1 : -1;
      }
      return b.amount &lt; a.amount ? 1 : -1;
    }
    return b.targetAccount &lt; a.targetAccount ? 1 : -1;
  }
  return b.sourceAccount &lt; a.sourceAccount ? 1 : -1;
};
</code></pre>

<p>vs</p>

<pre><code>const sorter = (a, b) =&gt; {
    if (a.sourceAccount !== b.sourceAccount) {
        return b.sourceAccount &lt; a.sourceAccount ? 1 : -1;
    }
    else if (a.targetAccount !== b.targetAccount) {
        return b.targetAccount &lt; a.targetAccount ? 1 : -1;
    }
    else if (a.amount !== b.amount) {
        return b.amount &lt; a.amount ? 1 : -1;
    }
    else if (a.category !== b.category) {
        return b.category &lt; a.category ? 1 : -1;
    }
    else {
        return b.time &lt; a.time ? 1 : -1;
    }
};
</code></pre>

<p>The second version has more locality. i.e. you check <code>sourceAccount</code>, then on the next line you use it. No more lines after the first two refer to <code>sourceAccount</code>. Whereas in your version you have to "remember" that we've failed that check then go down 10 lines to the use of the fields.</p>

<p>It also requires less indentation. If you structure had 50 fields, would you indent 50 times?</p>

<p>At the end of the day your interviewers will take the code "as a whole", and if it's too dense and indented for them then they'll just reject it out right. You, as the code-writer, should go out of your way to make it <strong>very simple and obvious to them</strong> what the code does.</p>

<blockquote>
  <p>was just waiting for the result and didn't even asked for feedback yet but I got this one which make me feel like garbage after 5-6 years experience. 
   I am not going to ask for detailed feedback because of that reason. </p>
</blockquote>

<p>Don't let a single bad interview disheartend you. Remember: A lot of this is subjective. You might like tight, dense code with single line ifs. The interviewers probably didn't. Maybe your next interviewer will?</p>
    </div>