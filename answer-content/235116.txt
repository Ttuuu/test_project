<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Many good comments have been made already, eg:</p>

<ul>
<li>code in a function</li>
<li>limit source code witdth to to 80-100 columns</li>
<li>code is overly complex for the task, hard to digest it</li>
</ul>

<p>Try to use the <a href="https://en.cppreference.com/w/cpp/algorithm" rel="nofollow noreferrer">available algorithms</a> and <a href="https://en.cppreference.com/w/cpp/container" rel="nofollow noreferrer">data structures</a>. Those are reference links, but many good articles and <a href="https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list">books have been written</a>. </p>

<p>One good way to solve many problems related to "frequency of occurrence" is to produce a "count of unique occurrence" or "frequency".  Arguably the canonical tool for this is <code>std:unordered_map</code>, which uses a <code>hashtable</code> internally. Often it is combined with <code>std::partial_sort_copy</code> to find the "10 most frequent" or similar. We don't need <code>sort_copy</code> here because we can return false on first repeat. There is an suggested code for the <code>is_isogram()</code> function using <code>std::unordered_map</code> with some static calls from <code>main()</code> below. </p>

<p>But the problem here is even simpler, because we don't actually need to know how many repeats there are I have provide a second function <code>is_isogram_set()</code> which uses an <code>std::unordered_set</code>. I ran some quick benchmarks and the <code>std::unordered_set</code> is about 5-10% faster than the <code>std::unordered_map</code>. </p>

<p>If we can assume "ASCII only" text, and ignore nonalpha completely, then all uppercase'd characters will be between 'A' - 'Z' and we could sensibly use something like a <code>std::array&lt;bool&gt;</code> for which I have provided a third sample <code>is_isogram_array()</code>. This is signignificantly (~10-15x !) faster than the other 2 options. </p>

<p>Any of these should be easily understood by anyone with C++ experience, rather than unpicking "<a href="https://youtu.be/qH6sSOr-yk8" rel="nofollow noreferrer">several custom raw loops</a>". Using the standard containers allows us to focus on clean efficient code, rather than "loop correctness". So we were easily able to find significant speed/feature trade-offs. </p>

<p><strong>EDIT</strong>: Based on a suggestion from @LaurentLARIZZA I added an alternative version of the <code>std::array</code> variant which uses the STL algorithm <code>std::all_of</code>. I named it <code>is_isogram_array_algo()</code>. I doesn't fundamentally change anything, but it does allow us to avoid the ranged for loop and to make the code slightly more self documenting. ie we can name the lambda "unseen" and write "all of unseen", which arguably makes it slightly clearer what is going on. Code is slightly longer, but has identical performance. </p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cctype&gt;
#include &lt;unordered_map&gt;
#include &lt;unordered_set&gt;
#include &lt;array&gt;

bool is_isogram(const std::string&amp; str) {
  auto freqs = std::unordered_map&lt;char, int&gt;{};
  for (auto&amp;&amp; c: str) {
    if (auto uc = static_cast&lt;unsigned char&gt;(c); std::isalpha(uc)) {
      int&amp; count = freqs[std::toupper(static_cast&lt;unsigned char&gt;(uc))];
      if (count &gt; 0) return false;
      count++;
    }
  }
  return true;
}

bool is_isogram_set(const std::string&amp; str) {
  auto freqs = std::unordered_set&lt;char&gt;{};
  for (auto&amp;&amp; c: str) {
    if (auto uc = static_cast&lt;unsigned char&gt;(c); std::isalpha(uc)) {
      auto [iter, was_new] = freqs.insert(std::toupper(uc));
      if (!was_new) return false;
    }
  }
  return true;
}

bool is_isogram_array(const std::string&amp; str) {
  auto freqs = std::array&lt;bool, 26&gt;{false};
  for (auto&amp;&amp; c: str) {
    if (auto uc = static_cast&lt;unsigned char&gt;(c); std::isalpha(uc)) {
      int idx = std::toupper(uc) - 'A';
      if (freqs[idx]) return false;
      freqs[idx] = true;
    }
  }
  return true;
}

bool is_isogram_array_algo(const std::string&amp; str) {
  auto freqs = std::array&lt;bool, 26&gt;{false};

  auto unseen = [&amp;freqs](char c) {
    if (auto uc = static_cast&lt;unsigned char&gt;(c); std::isalpha(uc)) {
      int idx = std::toupper(uc) - 'A';
      if (freqs[idx]) return false;
      freqs[idx] = true;
    }
    return true;
  };

  return std::all_of(str.begin(), str.end(), unseen);
}



int main() {

  std::cout &lt;&lt; std::boolalpha
            &lt;&lt; "Algorism=" &lt;&lt; is_isogram("Algorism") &lt;&lt; '\n'
            &lt;&lt; "PasSword=" &lt;&lt; is_isogram("PasSword") &lt;&lt; '\n'
            &lt;&lt; "Consecutive=" &lt;&lt; is_isogram("Consecutive") &lt;&lt; '\n';
  return 0;
}

</code></pre>
    </div>