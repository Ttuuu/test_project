<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to make the code "<em>as efficient as possible</em>" then avoid additional function calls - that includes iterator methods like <code>Array.map()</code>, <code>Array.forEach()</code>, etc., and while it would allow the code to be written in a more readable way, the ES6 <code>for...of</code> loop would also be affect efficiency because it calls an iterator function for each element in the array.</p>
<p>I suggest using a basic <code>for</code> loop after creating an array of arrays (for each chunk). As others have mentioned, modulo division can be used to determine which sub-array to put each element into.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function into_subarrays(myArray, chunks=2){
  const result = Array(chunks);
  for (let i = chunks; i--; ) {
    result[i] = [];  //initialize sub-arrays
  }
          
  for(let i = 0, length = myArray.length; i &lt; length; i++) {
    result[i%chunks].push(myArray[i]);
  }
  return result;
}
const a = [1,2,3,4,5,6,7,8,9];
console.log(into_subarrays(a, 2));</code></pre>
</div>
</div>

<p>Notice the first loop to set the arrays of <code>result</code> iterates from <code>chunks</code> down to zero - this minimizes the number of operations in the <code>for</code> loop conditions. This wouldn't work for the second loop because the order of <code>i</code> values is important.</p>
<p>I see the function has a default parameter value for <code>chunks</code> - this is an ES6 feature. While not specifically ES6 features, the <code>let</code> and <code>const</code> keywords can be used to declare variables scoped to the blocks they are contained in.</p>
<p>In the existing code there are theres lines towards the end of the <code>while</code> block:</p>
<blockquote>
<pre><code>result[i].push(a.shift());
i++;
i = (i == chunks) ? 0 : i; //Wrap around chunk 
</code></pre>
</blockquote>
<p>selector</p>
<p>Whenever I see a pre/post increment operator on a single line I look to see if it could be combined with another operation - e.g.</p>
<pre><code>  result[i++].push(a.shift());
</code></pre>
<p>or</p>
<pre><code>i = (++i == chunks) ? 0 : i; //Wrap around chunk 
</code></pre>
<p>Also, prefer using <code>===</code> over <code>==</code> to avoid unnecessary type coercion.</p>
    </div>