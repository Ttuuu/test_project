<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using the above answers I have refactored my code and added some functionality.</p>

<p><strong>Refactors:</strong></p>

<ul>
<li>Made all floats passed by value instead of reference(answer of @1201ProgramAlarm)</li>
<li>Removed CameraController class and moved logic to Camera base class(answer of @G. Sliepen)</li>
<li>More specific includes, instead of including glm.hpp now includes only needed definitions like glm/vec3.hpp(answer of @1201ProgramAlarm)</li>
<li>Renamed "radians" in PerspectiveCameraParams to "fov" for more clarity </li>
</ul>

<p><strong>New features</strong>  </p>

<ul>
<li>Added lookAt functionality(answer of @G. Sliepen)</li>
<li>Added for all functions setting an absolute value also a relative function, per example setRotation and rotate(answer of @G. Sliepen) </li>
<li>Added setFOV function for changing fov(answer of @G. Sliepen)</li>
</ul>

<p>Some features, specially regarding rotations still need to be added, I will update this answer when new features are added.</p>

<p><strong>Camera</strong><br>
At first a pure interface, now contains shared logic of both types of camera's(perspective/orthographic)</p>

<pre><code>// Camera.h
#ifndef CHEETAH_ENGINE_RENDERER_CAMERA_H_
#define CHEETAH_ENGINE_RENDERER_CAMERA_H_

#include "Core/Core.h"

#include &lt;glm/mat4x4.hpp&gt;
#include &lt;glm/vec3.hpp&gt;

namespace cheetah
{
    class CH_API Camera
    {
    public:
        Camera(const glm::vec3&amp; position, const::glm::vec3&amp; rotationAxis, const float rotationDegrees, const glm::vec3&amp; up = glm::vec3(0.0f, 1.0f, 0.0f));
        virtual ~Camera() = default;

        // perspective/orthographic specific responsibilities
        virtual glm::mat4 getViewProjectionMatrix() const = 0;
        virtual glm::mat4 getProjectionMatrix() const = 0;
        virtual glm::mat4 getViewMatrix() const = 0;
        virtual float getFOV() const = 0;
        virtual float getZoom() const = 0;
        virtual float getAspectRatio() const = 0;

        virtual void setFOV(const float fov) = 0;
        virtual void setZoom(const float zoom) = 0;
        virtual void setAspectRatio(const float aspectRatio) = 0;
        virtual void setViewMatrix(const glm::mat4&amp; viewMatrix) = 0;
        virtual void recalculateViewProjectionMatrix() = 0;

        virtual void zoom(const float zoom) = 0;

        // shared logic
        void setUp(const glm::vec3&amp; up);
        void setPosition(const glm::vec3&amp; position);
        void setRotation(const float degrees, const glm::vec3&amp; axis);
        void translate(const glm::vec3&amp; position);
        void rotate(const float degrees, const glm::vec3&amp; axis);
        void lookAt(const glm::vec3&amp; target);

        inline glm::vec3 getUp() const { return m_up; };
        inline glm::vec3 getPosition() const { return m_position; };
        inline glm::vec3 getRotationAxis() const { return m_rotationAxis; };
        inline float getRotationDegrees() const { return m_rotationDegrees; };

    private:
        float m_rotationDegrees;
        glm::vec3 m_rotationAxis;
        glm::vec3 m_position;
        glm::vec3 m_up;
    };
}

#endif // !CHEETAH_ENGINE_RENDERER_CAMERA_H_
</code></pre>

<pre><code>// Camera.cpp
#include "Camera.h"

#include &lt;glm/gtc/matrix_transform.hpp&gt;
#include &lt;glm/gtx/rotate_vector.hpp&gt;

namespace cheetah
{
    Camera::Camera(const glm::vec3&amp; position, const::glm::vec3&amp; rotationAxis, const float rotationDegrees, const glm::vec3&amp; up)
        : 
        m_position(position),
        m_rotationAxis(rotationAxis),
        m_rotationDegrees(rotationDegrees),
        m_up(up)
    {
    }

    void Camera::setUp(const glm::vec3&amp; up)
    {
        m_up = up;
    }

    void Camera::setPosition(const glm::vec3&amp; position)
    {
        m_position = position;
        setViewMatrix(glm::translate(glm::mat4(1.0f), position));
    }

    void Camera::setRotation(const float degrees, const glm::vec3&amp; axis)
    {
        m_rotationAxis = axis;
        setViewMatrix(glm::rotate(getViewMatrix(), degrees - m_rotationDegrees, axis));
        m_rotationDegrees = degrees;
    }


    void Camera::translate(const glm::vec3&amp; position)
    {
        m_position = position;
        setViewMatrix(glm::translate(getViewMatrix(), m_position));
    }

    void Camera::rotate(const float degrees, const glm::vec3&amp; axis)
    {
        m_rotationDegrees += degrees;
        m_rotationAxis = axis;
        setViewMatrix(glm::rotate(getViewMatrix(), degrees, axis));
    }

    void Camera::lookAt(const glm::vec3&amp; target)
    {
        setViewMatrix(glm::lookAt(m_position, target, m_up));
    }
}
</code></pre>

<p><strong>PerspectiveCamera</strong><br>
Low level, responsible for camera specific projection matrix</p>

<pre><code>// PerspectiveCamera.h
#ifndef CHEETAH_ENGINE_RENDERER_PERSPECTIVECAMERA_H_
#define CHEETAH_ENGINE_RENDERER_PERSPECTIVECAMERA_H_

#include "Core/Core.h"
#include "Camera.h"

#include &lt;glm/vec3.hpp&gt;
#include &lt;glm/mat4x4.hpp&gt;

namespace cheetah
{
    struct PerspectiveCameraParams
    {
        const float zNear = -1.0f;
        const float zFar = 1.0f;
        const float aspectRatio;
        const float zoom = 1.0f;
        const float fov = 45.0f;
        const glm::vec3 position = glm::vec3(0.0f);
        const glm::vec3 rotationAxis = glm::vec3(1.0f);
        const float rotationDegrees = 0.0f;
    };

    class CH_API PerspectiveCamera : public Camera
    {
    public:
        PerspectiveCamera(const PerspectiveCameraParams&amp; params, const glm::vec3&amp; up = glm::vec3(0.0f, 1.0f, 0.0f));


        inline glm::mat4 getViewProjectionMatrix() const override { return m_viewProjectionMatrix; };
        inline glm::mat4 getProjectionMatrix() const override { return m_projectionMatrix; };
        inline glm::mat4 getViewMatrix() const override { return m_viewMatrix; };
        inline float getFOV() const override { return m_fov; };
        inline float getZoom() const override { return m_zoom; };
        inline float getAspectRatio() const override { return m_aspectRatio; };

        void setFOV(const float fov) override;
        void setZoom(const float zoom) override;
        void setAspectRatio(const float aspectRatio) override;
        void setViewMatrix(const glm::mat4&amp; viewMatrix) override;

        void zoom(const float zoom) override;

        void recalculateViewProjectionMatrix() override;

    private:
        float m_aspectRatio;
        float m_zoom;
        float m_zNear;
        float m_zFar;
        float m_fov;
        glm::mat4 m_projectionMatrix;
        glm::mat4 m_viewMatrix;
        glm::mat4 m_viewProjectionMatrix;
    };
}

#endif // !CHEETAH_ENGINE_RENDERER_PERSPECTIVECAMERA_H_
</code></pre>

<pre><code>#include "PerspectiveCamera.h"

#include &lt;glm/gtc/matrix_transform.hpp&gt;

namespace cheetah
{
    PerspectiveCamera::PerspectiveCamera(const PerspectiveCameraParams&amp; params, const glm::vec3&amp; up)
        :
        Camera(params.position, params.rotationAxis, params.rotationDegrees, up),
        m_projectionMatrix(glm::perspective(glm::radians(params.fov / params.zoom), params.aspectRatio, params.zNear, params.zFar)),
        m_viewMatrix(glm::rotate(glm::translate(glm::mat4(1.0f), params.position), params.rotationDegrees, params.rotationAxis)),
        m_viewProjectionMatrix(m_projectionMatrix* m_viewMatrix),
        m_aspectRatio(params.aspectRatio),
        m_zoom(params.zoom),
        m_zNear(params.zNear),
        m_zFar(params.zFar),
        m_fov(params.fov)
    {
    }

    void PerspectiveCamera::setViewMatrix(const glm::mat4&amp; viewMatrix)
    {
        m_viewMatrix = viewMatrix;
        recalculateViewProjectionMatrix();
    }

    void PerspectiveCamera::setFOV(const float fov)
    {
        m_fov = fov;
        m_projectionMatrix = glm::perspective(glm::radians(m_fov / m_zoom), m_aspectRatio, m_zNear, m_zFar);
        recalculateViewProjectionMatrix();
    }

    void PerspectiveCamera::setZoom(const float zoom)
    {
        m_zoom = zoom;
        m_projectionMatrix = glm::perspective(glm::radians(m_fov / m_zoom), m_aspectRatio, m_zNear, m_zFar);
        recalculateViewProjectionMatrix();
    }

    void PerspectiveCamera::zoom(const float zoom)
    {
        m_zoom += zoom;
        m_projectionMatrix = glm::perspective(glm::radians(m_fov / m_zoom), m_aspectRatio, m_zNear, m_zFar);
        recalculateViewProjectionMatrix();
    }

    void PerspectiveCamera::setAspectRatio(const float aspectRatio)
    {
        m_aspectRatio = aspectRatio;
        m_projectionMatrix = glm::perspective(glm::radians(m_fov / m_zoom), aspectRatio, m_zNear, m_zFar);
        recalculateViewProjectionMatrix();
    }

    void PerspectiveCamera::recalculateViewProjectionMatrix()
    {
        m_viewProjectionMatrix = m_projectionMatrix * m_viewMatrix;
    }
}
</code></pre>

<p><strong>Implementation</strong><br>
Possible way of implementation</p>

<pre><code>// MainCamera.h
#ifndef GAME_MAINCAMERA_H_
#define GAME_MAINCAMERA_H_

#include "Cheetah.h"

class MainCamera : public cheetah::PerspectiveCamera
{
public:
    MainCamera(const cheetah::PerspectiveCameraParams&amp; params);
    void onUpdate(const float deltaTime);
    bool onWindowResize(const cheetah::WindowResizeEvent&amp; event);
private:
    void handleKeyInput(const float deltaTime);
};

#endif // !GAME_MAINCAMERA_H_
</code></pre>

<pre><code>// MainCamera.cpp
#include "MainCamera.h"

using namespace cheetah;
using namespace math;
using namespace input;

MainCamera::MainCamera(const cheetah::PerspectiveCameraParams&amp; params)
    : PerspectiveCamera(params)
{
}

bool MainCamera::onWindowResize(const WindowResizeEvent&amp; event)
{
    setAspectRatio(static_cast&lt;float&gt;(event.m_width) / static_cast&lt;float&gt;(event.m_height));
    return true;
}

void MainCamera::onUpdate(const float deltaTime)
{
    handleKeyInput(deltaTime);
}

void MainCamera::handleKeyInput(const float deltaTime)
{
    // reset
    if (Input::isKeyPressed(keys::R))
    {
        lookAt(vec3(0.0f, 0.0f, -20.0f));
    }

    // moving
    if (Input::isKeyPressed(keys::W))
    {
        translate(vec3(0.0f, -(0.01f * deltaTime), 0.0f));
    }
    if (Input::isKeyPressed(keys::A))
    {
        translate(vec3(-(0.001f * deltaTime), 0.0f, 0.0f));
    }
    if (Input::isKeyPressed(keys::S))
    {
        translate(vec3(0.0f, 0.01f * deltaTime, 0.0f));
    }
    if (Input::isKeyPressed(keys::D))
    {
        translate(vec3(0.001f * deltaTime, 0.0f, 0.0f));
    }
    if (Input::isKeyPressed(keys::Z))
    {
        translate(vec3(0.0f, 0.0f, 0.01f * deltaTime));
    }
    if (Input::isKeyPressed(keys::X))
    {
        translate(vec3(0.0f, 0.0f, -(0.01f * deltaTime)));
    }

    // rotating
    if (Input::isKeyPressed(keys::Q))
    {
        rotate(-(0.01f * deltaTime), vec3(0, 1, 0));
    }
    if (Input::isKeyPressed(keys::E))
    {
        rotate(0.01f * deltaTime, vec3(0, 1, 0));
    }

    // zooming
    if (Input::isKeyPressed(keys::C))
    {
        zoom(-(0.01f * deltaTime));
    }
    if (Input::isKeyPressed(keys::V))
    {
        zoom(0.01f * deltaTime);
    }
}

</code></pre>
    </div>