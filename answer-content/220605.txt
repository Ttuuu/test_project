<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The way the problem is decomposed doesn't feel right. In particular, there are too many interfaces, and <code>Additive</code>, <code>Divisible</code>, <code>Negative</code> are unnecessarily disconnected.</p>

<p>I recommend to follow a more (mathematically) natural path. The Gram-Schmidt process works in any inner product space (which is by definition a vector space equipped with an inner product), so consider an</p>

<pre><code>    abstract class InnerProductSpace &lt;AbelianGroup&lt;V&gt;, Field&lt;F&gt;&gt; {
        V scale(V vector, F scalar);
        F innerProduct(V v1, V v2);
        V[] orthogonalize(V[] basis) {
            // your Gram-Schmidt implementation here
        }
    }
</code></pre>

<p>As a side note, I wouldn't call an orthogonalization method <code>GramShmidt</code>. As a client of this library I am not concerned with which process is used. The only thing I care about is that there is the method taking a basis and returning an orthogonalized one.</p>

<p>I also took a liberty to make a shortcut and not spell out the VectorSpace interface, to which a <code>scale</code> method really belongs.</p>

<p>The <code>Field</code> is what holds addition and multiplication together:</p>

<pre><code>    public interface Field&lt;F&gt; {
        F add(F f1, F f2);
        F mul(F f1, F f2);
        F neg(F f);
        F inv(F f);
   }
</code></pre>

<p>It is OK to have <code>sub</code> and <code>div</code> instead of <code>neg</code> and <code>inv</code>.</p>

<p>Notice that the field <em>must</em> be closed under its operation. An addition (or multiplication) returning a type different than the type of arguments makes no mathematical sense.</p>

<p>I have to admit that I have no idea how to express other constraints a.k.a. field axioms. I doubt that it is possible.</p>
    </div>