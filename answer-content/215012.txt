<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>primes=[] #prime list
prime_multiples = set()
for i in range(2, 3000000):
    if i not in prime_multiples:
        primes.append(i)
        prime_multiples.update(range(i, 3000000, i))
</code></pre>
</blockquote>

<p>It's conventional to do the sieve of Eratosthenes with an array of booleans, not a set. You probably get better cache coherence that way, and you can do fast checks afterwards whether something is a prime. <code>in</code> checks against a list are <em>slow</em>, because they are <em>linear</em>.</p>

<hr>

<blockquote>
<pre><code>bm=-1000
n=0
am=-999
</code></pre>
</blockquote>

<p>What purpose do these variables serve?</p>

<hr>

<blockquote>
<pre><code>a=-999
while a&lt;=999:
    ....
    a+=1
</code></pre>
</blockquote>

<p>The Pythonic approach would be</p>

<pre><code>for a in range(-999, 1000):
</code></pre>

<hr>

<blockquote>
<pre><code>        n=0
        n_c=1
        while n_c==1 :
            attemp = n**2 +a*n +b
            if all(-i**2 -i*a&lt;=b for i in range(0, 40)) and b in primes:
                if attemp in primes:
                    n+=1
                    if n&gt;=count:
                        count=n
                        am=a
                        bm=b
                        prod=am*bm
                        print(f"a={am} with b={bm} gave {count} consecutive primes")
                        print(f"the pruduct is {prod}")
                else:
                    n_c=2
            else:
                n_c=2
</code></pre>
</blockquote>

<p>What is this code doing? The task (which, as an aside, it would have been very helpful to find in the question alongside the code) is</p>

<blockquote>
  <p>Considering quadratics of the form: <span class="math-container">\$n^2+an+b\$</span>, where <span class="math-container">\$|a|&lt;1000\$</span> and <span class="math-container">\$|b|\le 1000\$</span> find the product of the coefficients, <span class="math-container">\$a\$</span> and <span class="math-container">\$b\$</span>, for the quadratic expression that produces the maximum number of primes for consecutive values of <span class="math-container">\$n\$</span>, starting with <span class="math-container">\$n=0\$</span>.</p>
</blockquote>

<p>So what I would expect to find in the loop is a simple count: what is the largest <span class="math-container">\$n\$</span> for which the quadratic gives a prime? Instead there are nested loops and control flow which looks like it's from the 50s, from a language which doesn't have subroutines. Consider</p>

<pre><code>n = next(iter(i for i in itertools.count() if (i**2 + a*i + b) not in primes))
if n &gt; count:
    count = n
    printf(f"a={a} with b={b} gave {count} consecutive primes with product {a*b}")
</code></pre>
    </div>