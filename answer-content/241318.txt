<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As mentioned in comment, it is harder to be more specific without being able to run the code, but what can I say:</p>

<ul>
<li>Separate event code function and then the function, that will "do the work" itself, with all necessary parameters.</li>
<li>Extract for into separate function.</li>
</ul>

<p>That will overall make it easier to read and cleaner + easier to test. Something like:</p>

<pre><code>function getAttributes(event) {
  event.preventDefault();
  var thisValue = event.target.getAttribute('data-filter');
  setGridItems(gridItem, thisValue);
}

function setGridItems(gridItems, dataFilter) {
  for (let a = 0; a &lt; gridItems.length; a++) {
    setGridItem(gridItems[a], dataFilter);
  }
}

function setGridItem(singleGridItem, dataFilter) {
    const gridFilterAttr = singleGridItem.getAttribute('data-filterType');
    if (dataFilter == gridFilterAttr) {
      singleGridItem.classList.add('active')
      singleGridItem.classList.remove('not-active')
    } else if (dataFilter == 'all') {
      singleGridItem.className = 'active';
      featuredItem.className = 'featured active'
    } else {
      singleGridItem.classList.remove('active')
      singleGridItem.classList.add('not-active')
    }

}

</code></pre>

<p>Would be cool to use foreach there, but it is a bit problematic with <code>NodeList</code> and support is not that broad yet, but maybe you could do that. Now when you have it a bit separated, you can continue with refactoring. I don't like that some variables are pre-cached and "global", that's why I passed <code>gridItem</code> variable anyway to make it local in function, but <code>featuredItem</code> is still global.
Last function could use more of refactoring, but I'd need more info about problem for that :-)</p>
    </div>