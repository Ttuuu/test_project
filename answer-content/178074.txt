<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with the code you gave us:</p>

<pre><code>if(currentRot &gt;= 0 &amp;&amp; currentRot &lt;= 45){ 
    printf("\n0-45");
    if (ir.sensor[5] &gt; FULL_DANGER){ //left
          if(GetCellState(grid,newStart.i-1,newStart.j) != MAP_BORDER){ChangeCellState(grid,newStart.i-1,newStart.j,-3);printf("\n1,1");goto SUCCESS;} //add obs in map
    }
    if (ir.sensor[2] &gt; FULL_DANGER){ //right
          if(GetCellState(grid,newStart.i+1,newStart.j) != MAP_BORDER){ChangeCellState(grid,newStart.i+1,newStart.j,-3);printf("\n1,2");goto SUCCESS;}
    }
    if (ir.sensor[0] &gt; FULL_DANGER || ir.sensor[7] &gt; FULL_DANGER){ //ahead
          if(GetCellState(grid,newStart.i,newStart.j+1) != MAP_BORDER){ChangeCellState(grid,newStart.i,newStart.j+1,-3);printf("\n1,3");goto SUCCESS;}
    }
}
if(currentRot &gt;= 45 &amp;&amp; currentRot &lt;= 90){
     printf("\n45-90");
     if (ir.sensor[5] &gt; FULL_DANGER){ //left
           if(GetCellState(grid,newStart.i,newStart.j-1) != MAP_BORDER){ChangeCellState(grid,newStart.i,newStart.j-1,-3);printf("\n1,1");goto SUCCESS;} //add obs in map
     }
     if (ir.sensor[2] &gt; FULL_DANGER){ //right
           if(GetCellState(grid,newStart.i,newStart.j+1) != MAP_BORDER){ChangeCellState(grid,newStart.i,newStart.j+1,-3);printf("\n1,2");goto SUCCESS;}
     }
     if (ir.sensor[0] &gt; FULL_DANGER || ir.sensor[7] &gt; FULL_DANGER){ //ahead
           if(GetCellState(grid,newStart.i-1,newStart.j) != MAP_BORDER){ChangeCellState(grid,newStart.i-1,newStart.j,-3);printf("\n1,3");goto SUCCESS;}
     }
 }
</code></pre>

<p>I looked at this, and had trouble understanding almost all of it. You've really gone out of your way to chose coding a coding style that's opaque. (This is easy to do in embedded programming for some reason - you have to <strong>make a deliberate effort</strong> to craft your code in an open, approachable fashion. Please do so.)</p>

<p><strong>Abstraction</strong></p>

<p>For example, your sensors have numbers rather than names. This is just stupid. What are the chances that a robot engineer will add sensors to her robot? <strong>1.</strong> A robot engineer is like a teenager with a crappy asian car: they are <em>compelled</em> by some mysterious force to tinker with it! You must assume that your "constants" will change! </p>

<pre><code>#define IR_LEFT   (ir.sensor[5])
#define IR_RIGHT  (ir.sensor[2])
#define IR_FRONT0 (ir.sensor[0])
#define IR_FRONT1 (ir.sensor[7])
</code></pre>

<p>Rewriting your code a little bit:</p>

<pre><code>if(currentRot &gt;= 0 &amp;&amp; currentRot &lt;= 45){ 
    printf("\n0-45");
    if (IR_LEFT &gt; FULL_DANGER){
          if(GetCellState(grid,newStart.i-1,newStart.j) != MAP_BORDER){ChangeCellState(grid,newStart.i-1,newStart.j,-3);printf("\n1,1");goto SUCCESS;} //add obs in map
    }
    if (IR_RIGHT &gt; FULL_DANGER){ //right
          if(GetCellState(grid,newStart.i+1,newStart.j) != MAP_BORDER){ChangeCellState(grid,newStart.i+1,newStart.j,-3);printf("\n1,2");goto SUCCESS;}
    }
    if (IR_FRONT0 &gt; FULL_DANGER || IR_FRONT1 &gt; FULL_DANGER){ 
          if(GetCellState(grid,newStart.i,newStart.j+1) != MAP_BORDER){ChangeCellState(grid,newStart.i,newStart.j+1,-3);printf("\n1,3");goto SUCCESS;}
    }
}
</code></pre>

<p>Right off the bat, I have the ability to get rid of some of your "explanatory" comments. Getting rid of comments (in favor of "explanatory" code) is always a good thing!</p>

<p>But really, it still looks bad. <code>IR_FRONT1 &gt; FULL_DANGER</code> - WTF does that mean, anyway?</p>

<p>Let's slather on another layer of macro:</p>

<pre><code>#define OBSTACLE_LEFT()  (IR_LEFT &gt; FULL_DANGER)
#define OBSTACLE_RIGHT() (IR_RIGHT &gt; FULL_DANGER)
#define OBSTACLE_AHEAD() (IR_FRONT0 &gt; FULL_DANGER || IR_FRONT1 &gt; FULL_DANGER)
</code></pre>

<p>And now:</p>

<pre><code>if(currentRot &gt;= 0 &amp;&amp; currentRot &lt;= 45){ 
    printf("\n0-45");
    if (OBSTACLE_LEFT()) {
          if(GetCellState(grid,newStart.i-1,newStart.j) != MAP_BORDER){ChangeCellState(grid,newStart.i-1,newStart.j,-3);printf("\n1,1");goto SUCCESS;} //add obs in map
    }
    if (OBSTACLE_RIGHT()) {
          if(GetCellState(grid,newStart.i+1,newStart.j) != MAP_BORDER){ChangeCellState(grid,newStart.i+1,newStart.j,-3);printf("\n1,2");goto SUCCESS;}
    }
    if (OBSTACLE_AHEAD()) {
          if(GetCellState(grid,newStart.i,newStart.j+1) != MAP_BORDER){ChangeCellState(grid,newStart.i,newStart.j+1,-3);printf("\n1,3");goto SUCCESS;}
    }
}
</code></pre>

<p>Okay, now I can see what you're checking. Also, of course, if you <em>insist</em> on repeating this a bunch of times, it will be more resistant against typographical errors. (If you mistype <code>ir.sensor[3]</code> instead of <code>[2],</code> the compiler will not complain. But if you mistype <code>OBSTACLE_ROGHT()</code> instead of <code>RIGHT,</code> gcc will pitch a fit.) This is an under-appreciated benefit of abstraction for low-level programming: it's harder for a single typo to compile correctly and cause hours of wasted time debugging.</p>

<p><strong>Style</strong></p>

<p>Now, a couple of words on style. I looked at your full source file, and it's a nightmare. Please keep in mind that when you're asking strangers on the internet (like me) to review your code, you're asking for our time. Also our expertise, but primarily it's time. And you're competing against <a href="https://www.buzzfeed.com/expresident/best-cat-pictures" rel="nofollow noreferrer">pictures of cats.</a> And gifs of <a href="https://giphy.com/search/kate-upton-running-on-beach-in-bikini" rel="nofollow noreferrer">Kate Upton running on the beach in a bikini.</a></p>

<p>So you really, <em>really,</em> <strong>really</strong> need to make sure you don't waste whatever time you get from complete strangers -- who could otherwise be watching a weather forecast from Mexico (GIYF) -- by having a bad coding style! </p>

<p>Please, use a consistent indentation. That means the same amount. Not "2 characters sometimes, and 8 characters other times." Ideally, since I've got a laptop with very high resolution, you'll pick more than 1 or 2 characters of indentation. I rely on indent and outdent to find things like the end of your outer loops and outer if blocks. Of course, I was unable to do that with your code since some of your blocks are at indent level 0, and others seem to change indentation levels at random.</p>

<p>Next, pick a consistent spacing rule. Look at the "example" code you gave us:</p>

<pre><code>if(currentRot
    if (ir.sensor[5]
</code></pre>

<p>Why does one <code>if</code> have a space after it, while the next one does not?  Anyway, dropping those spaces doesn't make your code "look cool." Neither does setting your terminal to black with a green foreground, or whatever. It makes your code look crowded, and hard to read, and did I mention that I could be watching the weather forecast in Mexico? Maxima! Minima! Noche!</p>

<p>There are hundreds of "coding style" guidelines on the interwebs. Your class might have one. Your school might have one. If not, google for one. Pick the first one you find, and follow it - it doesn't matter how stupid it is, it's bound to be better than your existing code because it will be consistent. Even consistent + stupid is better than random.</p>

<p>If you're lucky, your text editor might even have a code-beautifier. If not, look for one. Try "code beautifier" or "indent" for keywords.</p>

<p><strong>Stop Repeating Yourself</strong></p>

<p>I'm a little surprised to have to write this, but you've got essentially the same code appearing over and over and over again in your if statements:</p>

<pre><code>if (OBSTACLE_LEFT()) {
    if(GetCellState(grid,newStart.i-1,newStart.j) != MAP_BORDER){
        ChangeCellState(grid,newStart.i-1,newStart.j,-3);
        printf("\n1,1");
        goto SUCCESS;
    } //add obs in map
}
if (OBSTACLE_RIGHT()) {
    if(GetCellState(grid,newStart.i+1,newStart.j) != MAP_BORDER){
        ChangeCellState(grid,newStart.i+1,newStart.j,-3);
        printf("\n1,2");
        goto SUCCESS;
    }
}
</code></pre>

<p>Here's a link to a useful <a href="https://blog.codinghorror.com/curlys-law-do-one-thing/" rel="nofollow noreferrer">blog post.</a></p>

<p>So let's see... if the cell state at some location is not the map border, then change the cell state to <code>-3</code> and print some kind of debug output and <code>goto SUCCESS</code>.  (Seriously? What is <code>-3</code>? Did you mean <code>OBSTACLE</code>?)</p>

<p>I'm going to ignore the fact that you're skipping over a check for another obstacle, because I can't read your code. It might make sense to do that.</p>

<p>But each of those blocks - which are so long, and so "common" that you deliberately folded them up onto a single line - is really the same code over and over again. And in the 1970's they had a mechanism for that: functions.</p>

<p>So why not write a function to handle all that code for you?</p>

<pre><code>if (OBSTACLE_LEFT()) {
    updateMap(LEFTWARDS_OF(newStart), OBSTACLE);
    goto SUCCESS; // ?really?
}
if (OBSTACLE_RIGHT()) {
    updateMap(RIGHTWARDS_OF(newStart), OBSTACLE);
    goto SUCCESS; // ?really?
}
</code></pre>

<p>Or you could call it "report_obstacle" and get rid of one more parameter.</p>

<p><strong>Encapsulation</strong></p>

<p>And now we come to the "real" answer to your question. Because, if we try rewriting your original code to look like the code I just proposed, what happens? I'll skip the <code>goto</code> statements, since I think they're a mistake, and since they don't make a difference to this:</p>

<pre><code>if(currentRot &gt;= 0 &amp;&amp; currentRot &lt;= 45){ 
    printf("\n0-45");

    if (OBSTACLE_LEFT()) {
        report_obstacle(newStart.i - 1, newStart.j);
    }
    if (OBSTACLE_RIGHT()) {
        report_obstacle(newStart.i + 1, newStart.j);
    }
    if (OBSTACLE_AHEAD()) {
        report_obstacle(newStart.i, newStart.j + 1);
    }
}
if(currentRot &gt;= 45 &amp;&amp; currentRot &lt;= 90){
    printf("\n45-90");

    if (OBSTACLE_LEFT()) {
        report_obstacle(newStart.i, newStart.j - 1);
    }
    if (OBSTACLE_RIGHT()) {
        report_obstacle(newStart.i, newStart.j + 1);
    }
    if (OBSTACLE_AHEAD()) {
        report_obstacle(newStart.i - 1, newStart.j);
    }
}
</code></pre>

<p>Apparently, your concern with <code>currentRot</code> really translates into a change in the values you pass to <code>report_obstacle</code> (or whatever you want to call it).</p>

<p>BUT WAIT!</p>

<p>Because I've looked at your code, I know that <code>currentRot</code> is really a translation of <code>now.th</code> - the <em>theta</em> value of your robot's current posture. <em>Just exactly as <code>newStart</code> is a translation of two other elements of your robot's current posture!</em></p>

<p>So why not just define a function that encodes these rules for you? Then you won't have to drag them up into this higher level code! Just write a group of functions that convert "relative" references into map references:</p>

<pre><code>Position left_of_robot();      // Return x,y left of robot
Position right_of_robot();     // Return x,y right of robot
Position ahead_of_robot();     // Return x,y ahead of robot
Position position_of_robot();  // Return robot.x and .y
</code></pre>

<p>Then you can reduce your code by 50%:</p>

<pre><code>printf("\nI don't care where the robot is facing because my code just works!");

if (OBSTACLE_LEFT()) {
    report_obstacle(left_of_robot());
}
if (OBSTACLE_RIGHT()) {
    report_obstacle(right_of_robot());
}
if (OBSTACLE_AHEAD()) {
    report_obstacle(ahead_of_robot());
}
</code></pre>

<p>I think this code is much clearer, and easier to understand. I think all the code is at the same level of abstraction here. So if someone adds a change, it should stay at this level of abstraction, which makes maintenance smoother. </p>
    </div>