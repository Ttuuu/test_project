<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>First of all, the good things:</strong> </p>

<p>The use of Doxygen documentation of classes and functions is very good style, which even pros too often "forget", and I like it. Also the use of a setter for the wait time. Also your try to use your locks in a <em>RAII</em> way is good thinking. Also to define return values at start and have only one return statement, instead of return statements in branches, is very good style and even has sometimes performance benefits. 
And the best part is that you also checked for <em>spurious wake ups</em>, something most people, including professors for concurrency programming, tend to forget.</p>

<p><strong>However your code has a very high count of issues which make it unusable, and in general I find in overall a bad design too.</strong></p>

<hr>

<p>First your code is very hard to read since you do things twice or do unnecessary stuff. Then you reinvent the wheel often, which could be solved with classes and stuff from <code>std</code>. You use things wrong or don`t seem to know how they are intended to be used. You don't care about <em>exception safety</em> at all, lower the usability for the caller by restricting the usage of an interface for its tasks.</p>

<p>It seems to me you were overwhelmed by the good solution your first link represents, since it uses the best but advanced stuff, but knew run time polymorphism and some basic stuff already. Unfortunately you still need to improve your understandings of C++ basics first and also a bit in concurrency, although already respectable, like the use of atomics and the  uselessness of the sleep. <strong>Keep on learning, you are on a good path, including by appreciating code reviews and putting yourself out in the open for critique!</strong> C++ is hard, but returns that with the fastest code you can get, while being safer and easier to use then C.</p>

<p>Here are some of the problems I found (far from complete):</p>

<ol>
<li>Don't use references to <code>std::shared_ptr</code>, you always want your own copy, thats the reason whz you create a new one when you insert them to, but reduce caller usage</li>
<li><code>submit</code> will not tell the caller if the task was submitted</li>
<li>Use of an own Interface Class <code>ITask</code>, why the overhead of run-time polymorphism and duplication of <code>std::packaged_task</code></li>
<li>Missing header <code>#include &lt;climits&gt; int currentMin = INT_MAX;</code></li>
<li>Use <code>lock_guard</code> instead of <code>unique_lock</code> in <code>threadFund</code></li>
<li>Consider the precision of your data types, for instance you assign the <code>size_t</code> of <code>jobs.size()</code> to an <code>int</code>, which is very bad, since the <code>int</code> could overflow and lead to <em>undefined behavior</em></li>
<li>Don't create objects to replace them anyway as in <code>ThreadPool::ThreadPool</code>, you could have done the things you want already in the <code>emplace_back</code> and also replace the <code>for</code> loop with <code>std::generate_n</code></li>
</ol>
    </div>