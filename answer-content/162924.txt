<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question is very interesting, and obviously required some real time to implement.</p>

<p>Just a few observations and suggestions:</p>

<p>In the declaration of cmd_rsp() the variable size might be better named chunk_size or ChunkSize to indicate it is the buffer size. The function cmd_rsp() might be altered to return the output string or NULL in case of error, this removes the need to pass in the buffer and any possible buffer
overflows.</p>

<p><strong>Global Symbols</strong></p>

<p>While the cmd_rsp.h file does not include the declarations of these variables and functions, the scope of these variables and functions is <strong>global</strong> and may impact names within the program itself. It is also possible that a programmer trying to maintain the code will add the variables or functions in another part of the program, this can either lead to link time problems or bugs through unintentional side affects.</p>

<p>If the goal of cmd_rsp.h and cmd_rsp.c is to eventually become either a static library or a dynamically linked library this is problematic practice.</p>

<p><em>Global Variables</em></p>

<p>While these variables could be declared <code>static</code> like the functions below a better approach might be to declare them within the function <code>cmd_rsp(const char *command, char **chunk, unsigned int size)</code>. Not only does this remove the variables from the program name space, it also makes the code easier
to write, maintain and debug. The file cmd_rsp.c is already 254 lines long, if features are added in the future by you or someone else it becomes very difficult to find where side affects may change the values of these variables.</p>

<pre><code>void* g_hChildStd_IN_Rd = NULL;
void* g_hChildStd_IN_Wr = NULL;
void* g_hChildStd_OUT_Rd = NULL;
void* g_hChildStd_OUT_Wr = NULL;
</code></pre>

<p><em>Global Functions</em></p>

<p>In the cmd_rsp.c file there is the following code with comments:</p>

<pre><code>// Private prototypes
int CreateChildProcess(const char *cmd);
int ReadFromPipe(char **rsp, unsigned int size);
char * ReSizeBuffer(char **str, unsigned int size);
</code></pre>

<p>The way the function prototypes are defined, they are global to any progam that links in cmd_rsp.c. To truely make the functions private use the <code>static</code> keyword in both the prototype and the function declaration.</p>

<pre><code>// Private prototypes
static int CreateChildProcess(const char *cmd);
static int ReadFromPipe(char **rsp, unsigned int size);
static char * ReSizeBuffer(char **str, unsigned int size);

static int CreateChildProcess(const char *cmd)
{
    ...
}
</code></pre>

<p><strong>Improper Initialization of Pointers</strong></p>

<p>The following declarations are allocating arrays of characters of size 1. Is this what was desired?</p>

<pre><code>char *buf = {0};        // main()
char *Command = {0};    // cmd_rsp()
char *tmp1 = {0};       // ReadFromPipe()
char *tmp2 = {0};       // ReadFromPipe()
</code></pre>

<p>So the following code is throwing away a character array of size 1: (possible memory leak)</p>

<pre><code>    char *Command = {0};
//  if(!strstr(command, rqdStr))
//  {
        Command = calloc(len + sizeof(rqdStr), 1);
        strcat(Command, rqdStr);
        strcat(Command, command);
//  }
</code></pre>

<p>There are 2 more problems with the previous code, one is specific to the CodeReview.StackExchange.com
website:</p>

<ul>
<li>Command is not tested to see if the calloc() actually returned memory or if there was a memory allocation error.</li>
<li>Quite often on CodeReview commented out code indicates bugs and the question will be flagged as broken code. If the strstr() test is to be removed, then it shouldn't be in the question.</li>
</ul>

<p>If the desired goal was to initialize the pointers to a null value, then the proper way to do this is to include one of the following files and use the NULL macro, stddef.h, stdlib.h, or stdio.h. The second answer to <a href="https://stackoverflow.com/questions/12023476/what-header-defines-null-in-c">this stackoverflow question</a> provides a larger list of files that supply NULL.</p>

<pre><code>#include &lt;stdlib.h&gt;

char *buf = NULL;
char *Command = NULL;
</code></pre>

<p>If the code isn't going to include the header files for some reason see <a href="https://stackoverflow.com/questions/18781514/correct-way-of-defining-null-and-null-pointer">this stackoverflow question</a> for better ways to define NULL.</p>

<p><strong>The Example Usage Should Provide Proper Usage</strong></p>

<p>The example doesn't test the results of the call to cmd_rsp(). A better example might be:</p>

<pre><code>#include &lt;stdio.h&gt;         // printf() and NULL
#include &lt;stdlib.h&gt;        // EXIT_FAILURE, EXIT_SUCCESS and NULL
#include "cmd_rsp.h"

#define MY_BUFFER_SIZE    100

int main(void)
{
    int status = EXIT_SUCCESS;
    char *buf = NULL;
    buf = calloc(MY_BUFFER_SIZE, 1);
    if(!buf)return 0;
    if (!cmd_rsp("dir /s", &amp;buf, MY_BUFFER_SIZE))
    {
        printf("%s", buf);
    }
    else
    {
        status = EXIT_FAILURE;
    }
    free(buf);

    return status;
}
</code></pre>

<p><strong>Reduce Complexity, Follow SRP</strong></p>

<p>The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle states</a> that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility.</p>

<pre><code>Robert C. Martin expresses the principle as follows:
</code></pre>

<blockquote>
<pre><code>    A class should have only one reason to change.
</code></pre>
</blockquote>

<p>While this is primarily targeted at classes in object oriented languages it applies to functions and subroutines in procedural languages like C as well.</p>

<p>The function cmd_rsp(const char *command, char **chunk, unsigned int size) is overly complex and could be broken up into at least 2 sub-functions:</p>

<pre><code>void SetupSecurityAttributes(SECURITY_ATTRIBUTES *SECURITY_ATTRIBUTES saAttr);
int SetupChildIOPipes(void* g_hChildStd_OUT_Rd, void* g_hChildStd_OUT_Wr, void* g_hChildStd_IN_Rd, void* g_hChildStd_IN_Wr, SECURITY_ATTRIBUTES* saAttr);
</code></pre>

<p>The function int ReadFromPipe(char **rsp, unsigned int size) is too complex as well, the contents of the <code>do { } while loop</code> in particular could be at least one additional function called from ReadFromPipe().</p>

<p>It might also be beneficial to reduce the repetition of the code in cmd_rsp() if possible. <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">See Don't Repeat Yourself</a>.</p>
    </div>