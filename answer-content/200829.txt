<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>First - You have numeric constants scattered all over the code.</h1>

<p>Try to change the board width to 500 and you will immediately understand. Numeric constants like board width shall appear exactly once when assigned to a constant which is used throughout the code lateron. This applies to board size, pong size and player size.</p>

<p>define</p>

<pre><code>board_width = 600
board_height = 600
</code></pre>

<p>and use it to draw the border like</p>

<pre><code>for side in range(2):
    border_pen.fd(board_width)
    border_pen.lt(90)
    border_pen.fd(board_height)
    border_pen.lt(90)
</code></pre>

<h1>Second - you have calculated dependent numeric constants</h1>

<p>If constants depend on others you shall not evaluate these. Try to change the bong size and you will have a hell of a work to find all depending values. You are hiding the dependencies and again make your code unmaintainable. All constants that have dependencies shall be initialized not by numeric values, but by expressions using the first class constants.</p>

<p>replace</p>

<pre><code>score_pen.setposition(-290, 310)
</code></pre>

<p>with</p>

<pre><code>score_pen.setposition(-board_width/2 + 10, board_height/2 + 10)
</code></pre>

<h1>Third - structure your code</h1>

<p>Whenever you feel you need a comment to explain what a block of code is doing you probably found a function (or a class). if you chose nice function names comments may be obsolete. Also you have less name collisions on local variables leading to better names.</p>

<pre><code># set up border
border_pen = turtle.Turtle()
#[...]
border_pen.hideturtle()
</code></pre>

<p>should be</p>

<pre><code>def set_up_border():
    pen = turtle.Turtle()
    #[...]
    pen.hideturtle()
</code></pre>

<p>also</p>

<pre><code>#Draw score
score_pen = turtle.Turtle()
#[...]
score_pen.hideturtle()
</code></pre>

<p>should be</p>

<pre><code>def create_score():
    pen = turtle.Turtle()
    #[...]
    pen.hideturtle()
    return pen

score_pen = create_score()
</code></pre>

<h1>Fourth - reuse code and do not repeat yourself</h1>

<p>When you now look at your new functions <code>create_score()</code> and <code>create_timer()</code> you will notice they are nearly identical. They only differ in position and the string displayed. But they share font, color and so on. So we add some parameters and unify these </p>

<pre><code>def create_text(pos, txt):
    pen = turtle.Turtle()
    pen.speed(0)
    pen.color("white")
    pen.penup()
    pen.setposition(pos)
    pen.write(txt, False, align="left", font= ("Arial", 14, "normal"))
    pen.hideturtle()
    return pen
</code></pre>

<p>which we use like</p>

<pre><code>score_pen = create_text(score_position, "Score %s" % score)
time_pen = create_text(time_position, "Time %s" % time)
</code></pre>

<p>the same way we can unify <code>player</code> and <code>AIplayer</code>. If you want to change player size there is now a single line of code to change. Actually these players, text fields and the bong should be classes but for now we leave it like that.</p>

<p><strong>All the points up to now are valid for any programming language and absolutely important. Maintainability, readability and testability count.</strong></p>

<h1>Some algorithmic issues</h1>

<h1>Bouncing</h1>

<p>An object bouncing on another one may not penetrate it. so it is not sufficient to reverse the direction when a collision is detected, but you also have to exit the foreign object immediately. this is done by "mirroring" the entered object to the outside again. So instead of</p>

<pre><code>#move pong ball
pong.sety(pong.ycor() +pong.dy)
#[...]

#check for bounce and redirect it
if pong.ycor() &lt; -300:
    pong.dy *= -1
#[...]
</code></pre>

<p>we do not draw immediately but fix penetration before updating the screen</p>

<pre><code>#move pong ball
y = pong.ycor() + pong.dy
#[...]

#check for bounce and redirect it
if y &lt; -board_height/2:
    pong.dy *= -1
    y = -board_height - y
#[...]

pong.sety(y)
#[...]
</code></pre>

<p>BTW: Game over is not recognised if the AI player would miss the bong.</p>

<h1>Tower running</h1>

<p>Setting x and y coordinates ii separate calls where the pen is down results in the pong performing tower running instead of smooth angular movement.</p>

<h1>AIplayerspeed</h1>

<p>Your AI player does not move with its own speed but with bong speed as it directly takes bong y position. <code>AIplayerspeed</code> acts as an offset to bong y position. This should be fixed to</p>

<ul>
<li>either rename and calculated this offset from bong and player size to be center aligned</li>
<li>or implemented as a max speed to approach bong y position (again centeraligned)</li>
</ul>

<h1>math.sqrt</h1>

<p>square root is an expensive function which in game design is avoided wherever possible. In your case you coud simply square the max distance</p>

<pre><code>distance = math.sqrt(math.pow(t1.xcor()-    t2.xcor(),2)+math.pow(t1.ycor()-t2.ycor(),2))
if distance &lt; 20:
    #[...]
</code></pre>

<p>becomes</p>

<pre><code>sq_distance = math.pow(t1.xcor() - t2.xcor(), 2) + math.pow(t1.ycor() - t2.ycor(), 2)
if distance &lt; math.pow(20, 2):
    #[...]
</code></pre>
    </div>