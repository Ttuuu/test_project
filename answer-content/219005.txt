<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I understand the need to reinvent the wheel but in this case you reinvented an other kind of wheel: functional-style combinatorics aren't very well suited to C++ and the high-performance / low-memory usage it is well known for. I mean, that's a bike wheel for a car.</p>

<p>Now if you want to reinvent the C++ wheel, the best thing would be to re-implement <code>std::next_permutation</code>: an algorithm that does its work incrementally, in place, and with iterators (meaning that you can compute the permutations of strings, arrays, double-linked lists and everything that exposes bidirectional iterators).</p>

<p>Interestingly, there's an example of implementation on <a href="https://en.cppreference.com/w/cpp/algorithm/next_permutation" rel="nofollow noreferrer">cppreference.com</a>:</p>

<pre><code>template&lt;class BidirIt&gt;
bool next_permutation(BidirIt first, BidirIt last)
{
    if (first == last) return false;
    BidirIt i = last;
    if (first == --i) return false;

    while (true) {
        BidirIt i1, i2;

        i1 = i;
        if (*--i &lt; *i1) {
            i2 = last;
            while (!(*i &lt; *--i2))
                ;
            std::iter_swap(i, i2);
            std::reverse(i1, last);
            return true;
        }
        if (i == first) {
            std::reverse(first, last);
            return false;
        }
    }
}
</code></pre>

<p>This implementation is a good example of "C++-sprinkled" C code. It's rather elegant but difficult to understand. If you reverse-engineer it though, you'll see it's quite simple:</p>

<ul>
<li><p>first, beginning from the end, find the first adjacent items in increasing order. Let's call the lesser item's position the permutation point. If there are none, that was the last permutation: reverse and return false;</p></li>
<li><p>then, also beginning from the end, find the first item whose value is superior to that of the permutation point. Swap those two, reverse the range <code>(permutation_point, last)</code> and return true.</p></li>
</ul>

<p>Now we're ready to reinvent a C++ wheel the C++ way:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iterator&gt;

template &lt;typename Iterator&gt;
bool permute(Iterator first, Iterator last) {
    // check if there are at least two elements
    if (first == last || std::next(first) == last) return false;

    // first step: first adjacent elements in increasing order, starting from the end
    const auto r_first = std::reverse_iterator(last);
    const auto r_last  = std::reverse_iterator(first);
    auto position = std::adjacent_find(r_first, r_last, [](auto lhs, auto rhs) {
        return lhs &gt; rhs;
    });
    // check if it was the last permutation
    if (position == r_last) {
        std::reverse(first, last);
        return false;
    }
    ++position; // advance position to the lesser item

    // second step: swap the permutation point and the first greater value from the end
    std::iter_swap(position, std::find_if(r_first, position, [position](auto value) {
        return value &gt; *position;
    }));
    std::reverse(r_first, position);
    return true;
}
</code></pre>
    </div>