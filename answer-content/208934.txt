<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You seem to have a good grasp of non trivial concepts, but then you produce very over-engineered code. </p>

<p><a href="https://wandbox.org/permlink/DgslCKOZRZoPcQ4C" rel="nofollow noreferrer">Please see my refactoring here</a> as well as below.</p>

<p>Also, yes you remembered the interview question, but it seems, not all of it. There is a requirement that adjacent values can not be inserted.  If the situation is:</p>

<p>(0,'A')(6, 'B')(42,'A')</p>

<p>it is not allowed to insert (6,41,'A') ... as there are "value clashes" on both sides.</p>

<p>Also the interval size is bound. 0 .. SIZE</p>

<p>Finally. I have made C++ solution where Key and Value, are both (non trivial) classes. Then I have made pure C solution which I like more. It is simpler. Not faster for very large SIZE's but fast enough. </p>

<p>Here is the whole of the refactoring of your solution:</p>

<pre><code>    // dbj.org 2018 DEC
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;cassert&gt;
#include &lt;map&gt;
#include &lt;optional&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;iterator&gt;

using namespace std;
// terminating error
inline void terror( bool rez, const char * msg ) {
  if ( rez) return ;
  assert(msg);
  perror(msg);
  exit(EXIT_FAILURE) ;
}
#define ST_(x) #x
#define ST(x) ST_(x)
#define TT(x) std::cout &lt;&lt; std::endl &lt;&lt; ST(x) &lt;&lt; std::endl ; (x)
#define dbj_verify(x) terror(x, "\n\n" __FILE__ "(" ST(__LINE__) ")\n\tERROR: " ST(x) " -- evaluated to false\n\n")

// this
// https://codereview.stackexchange.com/questions/158341/an-interval-map-data-structure
// refactored and hopefully simplified and improved
namespace fub
{
  template &lt;
      typename Key,
      typename T
      /*
      DBJ moved this to be public typedefs usabel by template definitions clients
      typename Compare = std::less&lt;Key&gt;,
      typename Allocator = std::allocator&lt;std::pair&lt;const Key, std::optional&lt;T&gt;&gt;&gt;
      */
  &gt; class IntervalMap final /* DBJ added 'final' */
  {
      // DBJ -- typedef are to be public and thus used by the client code
      // this is standard C++ standard convention
      public:
      // DBJ moved these two from template parameters so that client code can use them
      // using Compare = std::less&lt;Key&gt;;
      // using Allocator = std::allocator&lt;std::pair&lt;const Key, std::optional&lt;T&gt;&gt;&gt;;
    // DBJ removed --&gt; private:
      // using map_type = std::map&lt;Key, std::optional&lt;T&gt;, Compare, Allocator&gt;;
      using map_type = std::map&lt;Key, std::optional&lt;T&gt; &gt;;
      map_type map_;
      // DBJ 00: this much simplifies methods inside the template
      using type = IntervalMap ;

      // DBJ 01: using static_assert simplifies the code
      // check the type requirements only once at compile time
      // no need to mention them in every comment
      static_assert(std::is_nothrow_default_constructible_v&lt;map_type&gt;);
      static_assert(is_copy_constructible_v &lt;T&gt; ) ;

     // DBJ removed --&gt; public:
/*
      IntervalMap()
      // DBJ removed. See DBJ 01 -- noexcept(std::is_nothrow_default_constructible_v&lt;map_type&gt;) 
        : IntervalMap{Compare()}
      {}

      explicit
      IntervalMap(const Compare&amp; comp, const Allocator&amp; alloc = Allocator())
      // DBJ removed. See DBJ 01 -- noexcept(std::is_nothrow_default_constructible_v&lt;map_type&gt;) 
        : map_{comp, alloc}
      {}

      IntervalMap(const IntervalMap&amp;) = default;

      IntervalMap(const IntervalMap&amp; other, const Allocator&amp; alloc)
        : map_{other.map_, alloc}
      {}

      IntervalMap(IntervalMap&amp;&amp; other, const Allocator&amp; alloc)
      // DBJ removed. See DBJ 01 -- noexcept(std::is_nothrow_default_constructible_v&lt;map_type&gt;) 
        : map_{std::move(other.map_), alloc}
      {}
*/
      /* DBJ 02: commented out -- reason: this is not necessary
      ~IntervalMap() = default;
      IntervalMap&amp; operator=(const IntervalMap&amp;) = default;
      IntervalMap&amp; operator=(IntervalMap&amp;&amp;) = default;
      IntervalMap(IntervalMap&amp;&amp;) = default;
       */
      // ACCESSORS

      //DBJ 03: commented out -- reasone: compiler will do the most efficient move/copy elision
      // stanbdard C++ is based on value semantics
      // no need to return by const reference
      // const map_type&amp;  std_map() const&amp;   noexcept     { return map_; }
      map_type  std_map() const  noexcept  { return map_; }

      // DBJ 04: removed use of reference_wrapper -- reason:  see DBJ 03
      // std::optional&lt;std::reference_wrapper&lt;const T&gt;&gt;
      std::optional&lt;T&gt;
      operator[](const Key&amp; key) const // DBJ removed --&gt; &amp; 
          // DBJ removed, see DBJ 01 -- noexcept(std::is_nothrow_callable_v&lt;Compare(const Key&amp;, const Key&amp;)&gt;)
      {
        auto ub = map_.upper_bound(key);
        if (ub == map_.begin()) {
          return {};
        }
        return (--ub)-&gt;second;
      }

      //DBJ 05: removed -- reason const &amp; not necessary in standard C++
      // const T &amp; at(const Key&amp; key) const&amp;
      T  at(Key key) const
      {
        auto ub = this-&gt;operator[](key);
        if (!ub.has_value()) {
          throw std::out_of_range {
            "IntervalMap::at: index is out of bounds."
          };
        }
        return *ub;
      }

      // CAPACITY

      bool  empty() const  noexcept  { return map_.empty(); }

      // MODIFIERS

      /// \brief assigns a `value` to a given interval [lower, upper).
      /// \note `T` needs to be `CopyConstructible` for `insert_upper_bound`
      /// DBJ: no need to emphasize this in every comment, see DBJ 01
      void
      insert(Key lower, Key upper, T value)
      {
        if (!compare(lower, upper)) {
          return;
        }
        auto last = insert_upper_bound(std::move(upper));
        auto first = map_.lower_bound(lower);
        map_.erase(first, last);
        map_.insert(last, std::make_pair(std::move(lower), std::move(value)));
      }

      /// \brief removes all values in the given interval [lower, upper).
      /// \note this requires that `T` is `CopyConstructible`
      /// DBJ: no need to emphasize this in every comment, see DBJ 01
      void
      remove(Key lower_key, Key upper_key)
      {
        if (!compare(lower_key, upper_key)) {
          return;
        }
           auto upper_ = map_.find(upper_key);
           auto current_ = map_.find(lower_key);
               while( (current_ != map_.end())  || (current_ != upper_ )) 
               {
                  auto next_ = next(current_);
                      map_.erase(current_) ;
                  current_ = next_ ;    
               }
           if(upper_ != map_.end())
                    map_.erase(upper_);
      }


    private:
      /// \brief compares to key values with maps comparator
      /// DBJ: the comment above is completely confusing
      // obvously jus two keys are compared, between  thmeselves
      // also and again const references are not an optimization 
      // bool  compare(const Key&amp; lhs, const Key&amp; rhs) const
      // as this is standard C++
      // also DBJ -- see DBJ 01 -- noexcept(std::is_nothrow_callable_v&lt;Compare(Key, Key)&gt;)
      bool  compare(Key lhs, Key rhs) const
      { 
          // DBJ removed --&gt; return std::invoke(map_.key_comp(), lhs, rhs); 
          // we have defined the Compare type in the template prologue
          // although it is not clear why? 
          return lhs &lt; rhs ;
      }

      /// \brief inserts an upper bound such that super sets are valid
      /// \note this is a helper function for `insert()`
      /// \note `T` needs to be `CopyConstructible`
      /// DBJ: no need to emphasize this in every comment, see DBJ 01
      /// DBJ removed the use of r-refernce -- auto insert_upper_bound(Key&amp;&amp; upper)
      auto insert_upper_bound(Key upper)
      {
        auto last = map_.upper_bound(upper);
        if (last == map_.begin()) {
          return map_.insert(last, std::make_pair(std::move(upper), std::optional&lt;T&gt;{}));
        }
        auto&amp;&amp; value_before = std::prev(last)-&gt;second;
        return map_.insert(last, std::make_pair(std::move(upper), value_before));
      }

      /// \brief tests if there is a value at the given position.
      /// \note iterator has to be deferencable
      bool  has_value(typename map_type::const_iterator iterator) const  noexcept
      { 
      return iterator-&gt;second.has_value(); 
      }

      /// \brief erases the iterator if it points to an empty optional.
      /// \note if the optional is empty the iterator is a pure upper bound.
      /// \note this function is a helper function for `remove()`
      void erase_if_empty(typename map_type::const_iterator iterator)  noexcept
      {
      /*
      DBJ commented out
        if (iterator != map_.end() &amp;&amp; !has_value(iterator)) {
          map_.erase(iterator);
       */
        if (iterator == map_.end() ) return ;
        if ( has_value(iterator) ) return ;
          map_.erase(iterator);
      }

    // DBJ moved these two in here and made them friends
friend  bool operator==( const type &amp; lhs, const type &amp; rhs)
    {
      return lhs.map() == rhs.map();
    }

friend  bool operator!=( const type &amp; lhs, const type &amp; rhs)
    {
      return ! ( lhs.map() == rhs.map() );
    }

  }; // DBJ added comment --&gt; eof IntervalMap
/*
DBJ commented out -- reason -- 1. these are much simple if made as friend's to the IntervalMap
                               2. they both need not have full implementeation  as not_eqauls
                                  is ! equals ... see above 
  template &lt;typename Key, typename T, typename Comp, typename Allocator&gt;
    bool operator==(
        const IntervalMap&lt;Key, T, Comp, Allocator&gt;&amp; lhs,
        const IntervalMap&lt;Key, T, Comp, Allocator&gt;&amp; rhs)
    {
      return lhs.map() == rhs.map();
    }

  template &lt;typename Key, typename T, typename Comp, typename Allocator&gt;
    bool operator!=(
        const IntervalMap&lt;Key, T, Comp, Allocator&gt;&amp; lhs,
        const IntervalMap&lt;Key, T, Comp, Allocator&gt;&amp; rhs)
    {
      return lhs.map() != rhs.map();
    }
*/
} // DBJ added comment -&gt; eof namespace 

// void print(std::ostream&amp; out, const std::map&lt;int, std::optional&lt;std::string&gt;&gt;&amp; map)
// DBH changed to std ostream operator handling the required map type
std::ostream&amp; operator &lt;&lt; (std::ostream&amp; out, const std::map&lt;int, std::optional&lt;std::string&gt;&gt;&amp; map)
{
  for (auto&amp;&amp; [key, mapped] : map)
  {
    out &lt;&lt; '{' &lt;&lt; key &lt;&lt; ", ";
    if (mapped.has_value()) {
      out &lt;&lt; *mapped;
    } else {
      out &lt;&lt; "{}";
    }
    out &lt;&lt; "}\n";
  }
  out &lt;&lt; '\n';
    return out ;
}

// DBJ added
using fub_interval_map_type = fub::IntervalMap&lt;int, string&gt; ;

std::ostream&amp; operator &lt;&lt; (std::ostream&amp; out, const fub_interval_map_type &amp; fub_map)
{
    return out &lt;&lt; fub_map.std_map();
}

int main()
{
  cout &lt;&lt; boolalpha;
  auto map = fub_interval_map_type{} ;

 TT(map.insert(0, 10, "foo"));
  cout &lt;&lt; map &lt;&lt; "map.at(0) = " &lt;&lt; map.at(0) &lt;&lt; '\n';
  cout &lt;&lt; "map[10].has_value() = " &lt;&lt; map[10].has_value() &lt;&lt; "\n\n";

  TT(map.insert(3, 7, "bar"));
  cout &lt;&lt;  map &lt;&lt; "map.at(5) = " &lt;&lt; map.at(5) &lt;&lt; "\n\n";

  TT(map.remove(2, 8));
  cout &lt;&lt;  map &lt;&lt; "map[5].has_value() = " &lt;&lt; map[5].has_value() &lt;&lt; '\n';
}
</code></pre>
    </div>