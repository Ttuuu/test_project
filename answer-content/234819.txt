<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>the <code>ServiceProvider</code> is supposed to provide a singleton instance of <code>UserService</code> but it does not follow all the principles of the Singleton design pattern. specifically, the locking mechanisms that prevent multiple threads from creating multiple instances of <code>UserService</code> (or rather, multiple calling of the constructor)</p>

<p>and while on the subject - why not use <a href="https://en.wikipedia.org/wiki/Dependency_injection" rel="nofollow noreferrer">Dependency Injection</a>?</p>

<p>also, <code>reject(response)</code> is never called</p>

<p>with regard to the issue of the "javascript-like promise resolve-reject": Java has such a mechanism: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" rel="nofollow noreferrer"><code>CompletableFuture</code></a> where you supply a <code>Runnable</code> and for the callbacks there are <code>thenApply()</code> <code>thenAccept()</code> and <code>thenRun()</code> methods.  exceptions are handled by <code>exceptionally()</code> method. There are other capabilities like chaining <code>CompletableFuture</code> instances (<code>thenCompose()</code>.</p>
    </div>