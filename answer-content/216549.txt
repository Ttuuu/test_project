<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Portability</strong>  </p>

<p>First this program could be made more portable. There are 2 portability issues here</p>

<p>If it was ported to a system that did not define end of line as "\r\n" this program might not work. This problem could be solved by including the proper header files or using</p>

<pre><code>#define EndOfLine "\r\n"
</code></pre>

<p>and using </p>

<pre><code>    ptr = strstr(buffer, EndOfLine)
</code></pre>

<p>The second portability issue is the use of <code>strdup()</code>. It is not implemented on all systems. This <a href="https://stackoverflow.com/questions/252782/strdup-what-does-it-do-in-c">Stackoverflow question discusses the use of strdup</a>.</p>

<p><strong>Consistency in Coding Style</strong>  </p>

<p>There is one place in the code where the indentation is inconsistent:</p>

<pre><code>    if (buffer)
    {
        size = strlen(buffer) + strlen(data) + 1;
        if (!(buffer = realloc(buffer, size)))
            return (NULL);
        strcat(buffer, data);
    }
    else {
        if (!(buffer = strdup(data)))
            return (NULL);
    }
</code></pre>

<p>The use of braces "{" and "}" should be consistent through the entire program.
Everywhere except in this code the brace starts on a new line. </p>

<p>It would be very nice if the headers were included for compilation and
testing. Without the headers or the calling functions it is difficult to
compile or test this code.</p>

<p><strong>Complexity</strong>  </p>

<p>It might be better if the function <code>read_message(char *data)</code> was separated
into multiple functions to reduce the complexity. All of the functions might
be more readable if there was some virtical spacing between blocks of code.</p>

<p><strong>Possible Bug</strong>  </p>

<p>The function <code>parse_message(char *buffer)</code> always returns NULL, in your
testing did the function <code>handle_message()</code> always get called?</p>
    </div>