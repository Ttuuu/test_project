<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without offering a deep code review (as I don't have a lot of specific Java knowledge), let's look at what a full "move" entails in chess:</p>

<ul>
<li>Player chooses piece to move.</li>
<li>Piece makes legal move according to its own move rules.</li>
<li>In addition to purely move-based rules, there's also capture logic, so a bishop cannot move from a1-h8 if there's a piece sitting on c3.</li>
<li>If the player was previous under check and the move does not remove the check, it must be undone.</li>
<li>If the move exposes check, it must be undone / disallowed.</li>
<li>If player captures a piece, remove the piece (including en passant!)</li>
<li>If the piece is a pawn reaching the back rank, promote it.</li>
<li>If the move is a castling, set the new position of the rook accordingly. But a king and rook can only castle if they haven't moved, so you need to keep track of that. And if the king moves through a check to castle, that's disallowed, too.</li>
<li>If the move results in a stalemate or checkmate, the game is over.</li>
</ul>

<p>There may be more even (?). This is a complicated step, more than just counting and subsequently occupying spaces.</p>

<p>So my general intuition would be to just call:</p>

<pre><code>Game.move(currentSpot, NewSpot);
</code></pre>

<p>And the move method would contain all the code to validate the steps above:</p>

<ul>
<li>Check <code>Piece.isValidMove(currentSpot, newSpot);</code> - probably need castling logic here since king moves more than 1 space and rook jumps the king)</li>
<li>Check <code>Player.isChecked()</code> (which is just sugar for <code>Player.Pieces["King"].CanBeCaptured()</code> - more fun logic here!)</li>
<li>Check if <code>newSpot</code> contains a piece and if so, <code>newSpot.Piece.Remove()</code>;</li>
<li>Build some logic to call <code>Piece.CheckEnPassant()</code> (Piece is pawn, first move, 2 steps, past an enemy pawn who moved into capturing position on previous move - have fun with that!)</li>
<li><code>Piece.CheckPromote()</code> (Piece is pawn, move ends on opposing player's back rank)</li>
<li>Check if <code>Game.isOver()</code>, which checks <code>Game.isStaleMate()</code> and <code>Game.isCheckMate()</code>.</li>
</ul>

<p>Your Board class is highly anemic, you're only using it in your code as a proxy object for the array of spots. You might as well just create Board as an array of Spots in Game. In either case, you can already remove it from all your piece logic since all your logic is entirely predicated on the Xs and Ys you're passing in.</p>

<p><strong>UPDATE</strong></p>

<p>I would remove all your position properties from the piece. You're only using it as a proxy to figure out what spot the piece occupies during initializiation. Instead, remove <code>Player.initializePieces()</code> and just initialize the Board with the pieces in the right spot (Board.Spot.Piece = King, etc.) and then let players choose a color.</p>
    </div>