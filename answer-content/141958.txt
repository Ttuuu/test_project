<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A simple optimization would be to do this instead of iterating trough every single division:</p>

<pre><code>def GetSumOfDivs(n):
    i = 2
    upper = n
    total = 1
    while i &lt; upper:
        if n%i == 0:
            upper = n/i
            total += upper
            if upper != i: total += i
        i += 1
    return total
</code></pre>

<p>then you can check if the returned value is greater than the actual number to populate your list.</p>

<p>this works like this:
lets say you want to get the sum of the divisors of 28...
instead of iterating through each number:
+1, +2, +4, +7, +14 it will add 2 numbers at once like this:
3, +4+7, +14 because you keep decreasing the upper limit for the loop for each divisor.</p>

<p>keep in mind that for low numbers it will actually take more time to run through, but for big number you have a massive improvement.</p>

<p>Time difference: (19.381) - (11.419) = 7.962 seconds faster while generating the abundant list</p>

<p>another optimization is to search in the already generated list of abundants instead of checking if the number is abundant all over again, but you should use a dictionary instead of a list to make the search substantially faster.</p>

<p>My solution to your problem:</p>

<pre><code>def GetSumOfDivs(n):
    i = 2
    upper = n
    total = 1
    while i &lt; upper:
        if n%i == 0:
            upper = n/i
            total += upper
            if upper != i: total += i
        i += 1
    return total


def isabundant(n): return GetSumOfDivs(n) &gt; n
lAbundants = [x for x in range(12, 28123) if isabundant(x) == True]
dAbundants = {x:x for x in lAbundants}

sums = 1
for i in range(2, 28123):
    boo = True
    for k in lAbundants:
        if k &lt; i:
            if (i-k) in dAbundants:
                boo = False
                break
        else : break
    if boo == True: sums += i

print(sums)
</code></pre>

<p>Why a list and a dictionary? the list is ordered and the dictionary for fast indexing.</p>

<p>Total execution time: 12.08 seconds</p>

<p>now try it in C++... I'm sure its under 2 seconds... XD good luck</p>
    </div>