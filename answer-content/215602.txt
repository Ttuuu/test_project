<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Warnings</h1>

<p>Don't use the <code>suppresswarnings</code> annotation for things that can be fixed easily. I don't recognize the "resource" warning, I guess it's specific to the compiler you're using (Eclipse?). Probably comes from using the <code>Scanner</code> without closing it properly. By using the <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="noreferrer">try-with-resources</a> -statement for anything that supports <code>java.lang.AutoCloseable</code>, this will be handled for you automatically.</p>

<h1>Variables and naming</h1>

<p>There's no point in trying to save a few keystrokes by using short variable names. The compiler doesn't care what the names are, so you can just as well use human-readable names. The exception here being de-facto standardized loop indices like <code>i</code> and <code>j</code>.</p>

<p>Any decent code editor or IDE will autocomplete the names for you, so it's not that much more to type. A modified section of your original code, notice how I also chained the call to <code>toUpperCase()</code> directly after the <code>nextLine()</code> call. No need to create a new variable for the case-corrected string:</p>

<pre class="lang-java prettyprint-override"><code>Scanner inputScanner = new Scanner(System.in);
String input = inputScanner.nextLine().toUpperCase();
</code></pre>

<h1>Object methods</h1>

<p>Familiarize yourself with the <a href="https://docs.oracle.com/javase/10/docs/api/overview-summary.html" rel="noreferrer">Java standard library and API</a>. The <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="noreferrer">String</a> class has a method for returning its contents as a char array: <code>toCharArray()</code>. You could use that, combined with the <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html" rel="noreferrer">enhanced for loop</a> to simplify your loop:</p>

<pre class="lang-java prettyprint-override"><code>String input = // fetch string somehow
for (char inputChar : input.toCharArray()) {
    // Loop processing here
}
</code></pre>

<p>Printing an array is similarly a one-line operation: <code>System.out.println(Arrays.toString(your array here))</code></p>

<h1>Tips and tricks</h1>

<p>There's a neat(?) trick for calculations using chars in Java. As you are upper-casing all the chars, you can use 'A' as the base for the array index. So instead of having two arrays, one with the frequencies, one for the char-to-index mapping, use subtraction from 'A' to get the index:</p>

<pre class="lang-java prettyprint-override"><code>for (char inputChar : input.toCharArray()) {
    frequencies[inputChar - 'A']++;
}
</code></pre>

<h1>Alternative implementation</h1>

<p>Here's my alternative implementation using only the same data structures as in your original post. I do agree with <a href="https://codereview.stackexchange.com/users/195397/vishal-dhanotiya">Vishal Dhanotiya</a> about the use of a map for this.</p>

<pre class="lang-java prettyprint-override"><code>import java.util.Arrays;
import java.util.Scanner;

public class Letters {
    public static void main(String[] args) {

        int[] frequencies = new int[26];

        try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("Enter a string: ");
            String input = scanner.nextLine().toUpperCase().replaceAll("[^A-Z]", "");

            for (char inputChar : input.toCharArray()) {
                frequencies[inputChar - 'A']++;
            }

            for (int i = 0; i &lt; frequencies.length; i++) {
                System.out.printf("%s: %d, ", (char)('A' + i), frequencies[i]);
            }
        }
    }
}
</code></pre>
    </div>