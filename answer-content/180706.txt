<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>$(which foo) ...</code></h3>

<p>First of all, I completely agree with the other answer, this is pointless, inefficient and ugly.</p>

<h3>Clearing variables</h3>

<p>Instead of <code>var=""</code>, you can write simply: <code>var=</code></p>

<h3>Exit code</h3>

<p>When a dependency is missing, the script does <code>exit 0</code>.
Exit code 0 means success.
It would make more sense to exit with non-zero, to indicate failure,
for example <code>exit 1</code>.</p>

<h3>Usability</h3>

<p>Instead of exiting immediately when any dependency is missing,
it would be more user-friendly to collect all the missing dependencies,
and report them all at once.
A user might get irritated to run the script repeatedly when multiple dependencies are missing.</p>

<h3>Here-strings</h3>

<p>Instead of <code>echo ... | mysql ...</code> it's better to write <code>mysql ... &lt;&lt;&lt; ...</code>.</p>

<h3>Quoting command line arguments</h3>

<p>This is not safe:</p>

<blockquote>
<pre><code>$(which mysqldump) -h ${DB_HOST} -u ${DB_USER} -p${DB_PASSWORD} ${database} &gt; "$TMP_DIR/$database.sql" 2&gt; /dev/null
</code></pre>
</blockquote>

<p>Variables and the result of <code>$(...)</code> should be double-quoted to protect from parameter expansion and globbing:</p>

<pre><code>"$(which mysqldump)" -h "${DB_HOST}" -u "${DB_USER}" -p"${DB_PASSWORD}" "${database}" &gt; "$TMP_DIR/$database.sql" 2&gt; /dev/null
</code></pre>
    </div>