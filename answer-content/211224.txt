<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should use a <a href="https://en.cppreference.com/w/cpp/io/basic_istream/sentry" rel="nofollow noreferrer"><code>std::basic_istream&lt;CharT&gt;::sentry</code></a> to skip the whitespace.</p>

<p>Also, <code>basic_istream</code> takes a second template parameter, which you could also implement.</p>

<p>And you might want to rethink your design: Do you really want to skip whitespace?</p>

<p>Three possible scenarios I can think of:</p>

<ol>
<li>Always skip white space if the <code>std::ios_base::skipws</code> bit is set</li>
<li>Only skip white space if the <code>std::ios_base::skipws</code> bit is set and <code>fmt != nullptr</code></li>
<li>Never skip white space (Be an <a href="https://en.cppreference.com/w/cpp/named_req/UnformattedInputFunction" rel="nofollow noreferrer"><em>UnformattedInputFunction</em></a>)</li>
</ol>

<p>Whatever the case, your code should look more like this:</p>

<pre><code>template &lt;class CharT, class Traits&gt;
std::basic_istream&lt;CharT, Traits&gt; &amp;operator&gt;&gt;(std::basic_istream&lt;CharT, Traits&gt; &amp;is, CharT const *fmt) {
    typedef typename std::basic_istream&lt;CharT, Traits&gt;::sentry sentry_t;

// Case 1: Always skip
    sentry_t s(is);

    if (fmt == nullptr)
        return is;

// Case 2: Skip if there is a fmt

    if (fmt == nullptr)
        return is;

    sentry_t s(is);

// Case 3: Never skip

    if (fmt == nullptr)
        return is;

    sentry_t s(is, false);

// And also consider some edge cases: If EOF is reached, and we tried to read `""`, should we set failbit?

    // Check the sentry before using the stream
    if (s) {
        while (*fmt) {
            // is.peek() returns Traits::int_type. Convert first before comparing.
            if (!Traits::eq_int_type(Traits::to_int_type(*fmt), is.peek()))
                is.setstate(std::ios_base::failbit);  // Why don't you return here?
            ++fmt;
            // If an error occurred when ignoring the character, stop reading
            if (!is.ignore(1)) {
                return is;
            }
        }
    }
    return is;
}
</code></pre>

<p>Also, currently your solution is very undefined. When overloading an operator, at least one of the parameters must be not-builtin and not-stl (What if someone else overloaded the same operator but completely unrelated to you?)</p>

<p>A simple fix would be to make it a function instead.</p>

<p>You can carry on with your solution (As there probably won't be a conflict) but I would suggest doing it like this:</p>

<pre><code>namespace my_namespace {
    inline namespace operators {
        template &lt;class CharT, class Traits&gt;
        std::basic_istream&lt;CharT, Traits&gt; &amp;operator&gt;&gt;(std::basic_istream&lt;CharT, Traits&gt; &amp;is, CharT const *fmt) {
            // ...
        }
    }
}

// And explicitly "enable" it in functions by using it
int main() {
    // one of:
    using namespace my_namespace;
    using namespace my_namespace::operators;
    using my_namespace::operator&gt;&gt;;
    using my_namespace::operators::operator&gt;&gt;;

    // And do this in every function you use this.
    // Note that this is still UB but less likely
    // to be unable to compile.
}
</code></pre>
    </div>