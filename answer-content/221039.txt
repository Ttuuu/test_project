<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Break it down into smaller building blocks</h3>

<p>The <code>ReplaceWords</code> method does too many things:
it implements the behavior of a trie,
the logic of finding root words,
and splitting the input and forming the output.</p>

<p>It would be better if it looked more like this:</p>

<pre><code>public string ReplaceWords(IList&lt;string&gt; dict, string sentence)
{
    Trie trie = new Trie();

    // for each word in dict, trie.add(word)

    // for each word in sentence, map to trie.wordRoot(word)

    // return joined by space the values returned by trie.wordRoot(word) calls
}
</code></pre>

<p>The flow of logic would be very easy to read, understand, debuggable and testable piece by piece.</p>

<h3>Custom implementation of trie</h3>

<p>To support the logic outlined above,
the <code>trie.wordRoot</code> method could be implemented as:</p>

<ul>
<li>follow the edges per letter in the word, much like during <code>trie.add</code></li>
<li>if no successor is found, that means the word of the sentence is not in the trie, it has no root, so return the word itself</li>
<li>if a leaf node is found, that means a root is found, return it</li>
</ul>

<p>I think the result will be simpler and easier to understand than the posted code.</p>

<h3>Using a <code>StringBuilder</code></h3>

<p>Instead of <code>str.Append(tempWord + " ")</code>,
<code>str.Append(tempWord).Append(' ')</code> is probably better.</p>

<h3>Performance</h3>

<p>You specifically asked to comment about performance,
so I try as best as I can.
Using a trie as you did seems appropriate for the task,
as it is known to be efficient for solving string-related computations like this,
as long as its storage requirement is not an issue.
And I don't see mistakes in the trie implementation degrade its performance significantly.</p>

<p>The overall time and space complexity of the solution is dominated by that of the trie.</p>
    </div>