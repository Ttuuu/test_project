<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Have you increased the size of your VM?  If not, you will not get past <code>java.lang.OutOfMemoryError: Requested array size exceeds VM limit</code> without doing something creative like storing the array in a file.</p>

<p>Do you need 4-byte integers, or would 2-byte shorts be sufficient?</p>

<p>This is allocating all the memory in one chunk:</p>

<pre><code>arr = new int[size][size];
</code></pre>

<p>Perhaps you should use:</p>

<pre><code>arr = new int[size][];
arr[0] = new int[size];
</code></pre>

<p>to allocate one chunk to hold the columns, one chunk to hold the first column, and then as data is being added, allocate new columns on demand:</p>

<pre><code>public void add(int data) {
    if (row &gt;= size) {
        arr[++col] = new int[size];
        row = 0;
    }

    arr[col][row]  = data;
    row++;
}
</code></pre>

<p>Using a variable size, or even <code>Integer.MAX_VALUE</code> to partition data into rows, columns, and higher dimensions is inefficient.  Iâ€™d use a hard-coded power of 2, to allow efficient module arithmetic. </p>
    </div>