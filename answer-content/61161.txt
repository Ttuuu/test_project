<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have at most 1,000 test cases, and each service lane is at most 1,000 segments, so this approach is feasible, but we can do better.</p>

<p>Consider an array of indices where the service lane width is 1, and another where the width is 2.</p>

<pre><code>N, T = map(int, input().split())

ones = []
twos = []

for i, width in enumerate(map(int, input().split())):
    if width == 1:
        ones.append(i)
    elif width == 2:
        twos.append(i)
</code></pre>

<p>You can then use binary search to see if each segment contains a 1 or a 2.</p>

<pre><code>for _ in range(T):
    start, end = map(int, input().split())
    if segment_search(ones, start, end) != -1:
        print(1)
    elif segment_search(twos, start, end) != -1:
        print(2)
    else:
        print(3)
</code></pre>

<p>Our indices are already in order. Our search stops when an index lies in the range <code>[start, end]</code>:</p>

<pre><code>def segment_search(xs, start, end):
    low = 0
    high = len(xs) - 1
    while low &lt;= high:
        mid = (low + high) // 2
        x = xs[mid]
        if start &lt;= x and x &lt;= end:
            return mid
        if end &lt; x:
            high = mid - 1
        else:
            low = mid + 1
    return -1
</code></pre>

<p>As <code>ones</code> and <code>twos</code> can't have more than 100,000 elements, each call to <code>segment_search</code> will take at most 17 steps.</p>
    </div>