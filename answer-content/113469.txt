<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Attention Bug Alert</strong></p>
<p>The way how the <code>IsSetterCall()</code> method is implemented is flawed. The method doesn't clearly distinguish between a property and a method. I could call a method like</p>
<pre><code>public void set_Test() { }  
</code></pre>
<p>and your method would assume this is a property which wouldn't cause any problems here, but later in the <code>Invoke()</code> method you use <code>methodCall.GetArg(0)</code> which would cause a <code>TargetParameterCountException</code> being thrown.</p>
<p>To be at least a little bit more on the safe side of life you can change the <code>IsSetterCall()</code> method like so</p>
<pre><code>private static bool IsSetterCall(IMethodCallMessage method)
{
    return method.MethodBase.IsSpecialName &amp;&amp; method.MethodName.StartsWith(SetterMethodStart);
}
</code></pre>
<p>but to have a real safe way you would need to add a little bit reflection voodoo like so</p>
<pre><code>private static bool IsSetterCall(IMethodCallMessage method)
{
    var methodBase = method.MethodBase;
    if (methodBase.IsSpecialName &amp;&amp; method.MethodName.StartsWith(SetterMethodStart))
    {
        var property = methodBase.DeclaringType.GetProperty(method.MethodName.Substring(SetterMethodStart.Length),
                    BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);

        return property != null 
            &amp;&amp; property.GetSetMethod() == methodBase as MethodInfo;
    }

    return false;
}
</code></pre>
<hr>
<p><strong><code>public class PropertyChangedArgs</code></strong></p>
<p>The name of this class does not follow the <a href="https://msdn.microsoft.com/en-us/library/h0eyck3s%28v=vs.71%29.aspx" rel="nofollow noreferrer">event naming guidelines</a> which states</p>
<blockquote>
<p>Name an event argument class with the EventArgs suffix.</p>
</blockquote>
<p>which means you should change the name to <code>PropertyChangedEventArgs</code>.</p>
<p>The property setters of this class should by <code>private</code> because you don't want that this properties can be set from outside of the class.</p>
<p>Why <strong>don't you allow <code>null</code></strong> for the <code>Value</code>? This will restrict you from setting a property to <code>null</code> which is legit.</p>
<p>Why <strong>do you allow</strong> an empty or whitespaced string to be passed for the <code>PropertyName</code>? This maybe won't happen in your current szenario but who knows what the future brings.</p>
<p>Another "problem" I see with the whole of your event stuff is that it doesn't follow the typical event pattern which contains a <code>sender</code>.</p>
<hr>
<p><strong><code>IObserverController</code></strong></p>
<p>It isn't clear from this interface what it should be used for. The only hint will be that it has a <code>Handle()</code> method which has a <code>PropertyChangedArgs</code> as a parameter. One could assume that it should be used to handle the <code>PropertyChanged</code> event but this isn't clear from the way the interface is named/written.</p>
<p>Why not simply call the interface <code>IPropertyChangedHandler</code> ?</p>
<hr>
<p><strong>Style</strong></p>
<pre><code>if (!IsSetterCall(methodCall))
    return result;
</code></pre>
<p>Don't omit braces <code>{}</code> even when optional. Such style can lead to bugs which are hard to discover.</p>
<p>Although this style</p>
<pre><code>if (target == null) throw new ArgumentNullException(nameof(target));
</code></pre>
<p>is slightly better than having the braceless instruction on the next line of code it wouldn't hurt to use braces here as well.</p>
    </div>