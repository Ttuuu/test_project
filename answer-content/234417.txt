<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your <code>Player</code> class is more complicated than it needs to be. Your <code>name</code> property getter and setter aren't doing anything special, so there isn't really any difference between what you have and having <code>_name</code> as a public attribute.</p>

<p>Having a public attribute is only a bad thing if you need to maintain some delicate internal state that you don't want your user to mess with. For example, what if a <code>list</code>'s size attribute was public? The user could break the list object horribly by stupidly changing the size attribute.</p>

<p>You aren't dealing with any kind of special state that needs to be encapsulated here though. What if the user forcibly changes the <code>name</code> field? Does that break anything?</p>

<p>Your class then can just be distilled down to just a basic structure with a public attribute. Note too that <code>__init__</code> doesn't need to have its return type specified. <a href="https://stackoverflow.com/a/2491831/3000206">It <em>must</em> return <code>None</code></a>, so <code>-&gt; None</code> is implied.</p>

<pre><code>class Player:
    """Basic class for game players"""

    def __init__(self, name: str):
        self.name = name
</code></pre>

<p>This though is exactly the case for a <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer"><code>dataclass</code></a>: when you have just a simple class holding public data.</p>

<pre><code>from dataclasses import dataclass

@dataclass
class Player:
    """Basic class for game players"""
    name: str
</code></pre>

<p>This is purely a convenience and readability helper. <code>dataclass</code> creates a constructor for you based on the fields that you specify. It also creates a readable <code>__repr__</code> implementation, and a few other things.</p>

<p>Some classes hold a potentially delicate internal state (like a data structure that holds a <code>size</code> field among others that must be altered carefully), and some represent just plain data. Your <code>Player</code> class seems to fall into the latter category. I actually saw <a href="https://www.tedinski.com/2018/01/23/data-objects-and-being-railroaded-into-misdesign.html" rel="nofollow noreferrer">a good article</a> on this like an hour ago coincidentally. Don't bother with trying to go to elaborate lengths to protect data that has no need to be protected from change.</p>

<p>With this last example though, I have to wonder if there's a need for <code>Player</code> at all. What's the difference between a player and the string that represents the player's name? I'd keep <code>Player</code> if there were any chance that you'd add another field of data in the future (<code>score</code>?), but if not, I'd just use a bare string.</p>

<p>And then a lot of the same can be said about <code>Game</code>. Having getters and setters for <code>name</code> is a waste. Just expose it. Having a getter for <code>_game_status</code> does make sense though. Having only a getter and making the field "private" indicates that it shouldn't be touched externally.</p>

<hr>

<p>Why is <code>Game</code> a <code>Board</code>? I don't think a game of TicTacToe <strong>is a</strong> board; a game <strong>has</strong> a board. This seems to be a "violation" of <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance" rel="nofollow noreferrer"><em>composition over inheritance</em></a>. I think <code>Game</code> should hold a <code>Board</code> object and manipulate it.</p>

<p>Along the same lines, I don't think you should have a <code>Player</code> class with a <code>TicTacToeHumanPlayer</code> class inheriting from it like you have. I don't see any advantage to having your current <code>Player</code> as a base class that others classes (like presumably a AI class in the future) inherit from. I would collapse <code>TicTacToeHumanPlayer</code> into <code>Player</code> and just make it one class.</p>

<p>To allow the class to make move decisions in varied ways (a human player, and different difficulties of AIs for example), you could use the <a href="https://en.wikipedia.org/wiki/Strategy_pattern" rel="nofollow noreferrer">Strategy Pattern</a> (or something that slightly resembles it). Give the <code>Player</code> class a <code>_move_maker</code> field. Something like:</p>

<pre><code>from typing import Callable

class Player:  # Ignore my dataclass suggestion for the time being

    def __init__(move_making_func: Callable[[Board], str], . . .):
        self.move_maker: Callable[[Board], str] = move_maker_func
</code></pre>

<p><code>move_maker</code> is a function that accepts as an argument the board, and returns the move to make. For a human player, this would involve asking the player for input, doing some error checking (which you're currently missing) and returning the move. For an AI, it would involve it figuring out a move, then returning that.</p>

<p>To use it, change the <code>play</code> used in <code>PlayGame</code> to something like</p>

<pre><code>move = current_player.move_maker(self.board)
</code></pre>

<p>This is just a general suggestion; the simple example I showed here won't necessarily work perfectly. The point is, instead of creating different subclasses to produce slightly different behavior, the class can just use a decision making function to change how exactly the player responds. If you switch to using a full UI, you can just create a new decision function that handles the UI. You'll likely need to make minimal changes to <code>Player</code> (except maybe allowing for async responses).</p>

<p>If you wanted separate classes though, you could have an abstract base class that contains a <code>make_move</code> method that inheritors must implement. Then you could have a separate class for each player type, and a central way of using them.</p>

<hr>

<p>As I hinted at above, your <code>play</code> function is doing very little in the way of error checking of the user input. I admit, I don't fully understand what your "encoded" system is to indicate cells, but surely not every possible user input is valid. Currently you're only checking if the input is empty.</p>

<p>I'd make it something closer to:</p>

<pre><code>@staticmethod
def play() -&gt; str:
    """Ask to the player where to play

    :return: the move
    :rtype; str
    """
    while True:
        cell = input('In which cell you want to play: ')

        if cell_is_valid(cell):  # Define this function somewhere to do more proper checking
            return cell

        else:
            print(f"Cell {cell} isn't valid.")
</code></pre>

<p>I think a <code>while True</code> reads better in this case. It more cleanly allows for an error message, and does away with needing to pre-define <code>cell</code> with a dummy value.</p>

<hr>

<pre><code>winner = False
for row in to_check:
    if row.count(self._current_player) == 3:
        winner = True
return winner
</code></pre>

<p>This can be written more succinctly (and more performantly) as</p>

<pre><code>return any(row.count(self._current_player) == 3 for row in to_check)
</code></pre>

<p>This is a generator expression inside of a call to <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>. It will return (and stop searching) once a <code>True</code> match is found.</p>

<hr>

<p>You write <code>List[List[str]]</code> a few times. You can easily make aliases of type names like this:</p>

<pre><code>Rows =  List[List[str]]

. . .

def board_rows(self) -&gt; Rows:
    . . .
</code></pre>

<p>I think that's a lot less noisy. It also makes it easier to adapt if you ever want to change what the underlying board is represented by.</p>

<hr>

<p>I think your <code>_game_status</code> dictionary would be another good candidate for a <code>dataclass</code>:</p>

<pre><code>from typing import Optional, List

@dataclass
class GameStatus:
    history: List[?] = []  # Replace the ? with the proper type of the history
    winner: Optional[int] = None  # Indicates that it can be None, or an int
    status: str = "running"  # Arguably this should be an Enum instead of a string
    current_player: Optional[str] = "X"

. . .

_game_status: Dict = GameStatus()  # Uses the default values set above

. . .

self._game_status.winner = 0

. . .

# self._game_status.update({'current_player': self._current_player})
self._game_status.current_player = self._current_player
</code></pre>

<p>This clearly states what a game state contains, and makes it harder to cause typos using strings.</p>
    </div>