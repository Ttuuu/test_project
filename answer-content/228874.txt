<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Opening this in an IDE already shows a bunch of problems to fix.</p>

<ul>
<li><code>input</code> and <code>output</code> can be local variables, in fact this is all
rather procedural, so it makes sense that the containing class is just
to contain the main method anyway.</li>
<li>The empty constructor is pointless.</li>
<li>The <code>args</code> parameter is written weirdly, it should be <code>String[] args</code>.</li>
<li><code>throws Exception</code> doesn't do anything.</li>
<li>The catch-all block for <code>Exception</code> doesn't even catch all exceptions
as the input and output files are opened outside of it.</li>
<li>Initialisation to <code>null</code> is the same as not writing it explicitly.</li>
<li><code>String.valueOf(c)</code> doesn't do much, <code>c</code> itself is just fine for
<code>c + "some string"</code> already.</li>
<li><code>getResource</code> can return <code>null</code> - here it's probably to ignore that.</li>
</ul>

<p>And after some more manual inspection:</p>

<ul>
<li>Don't call <code>close</code>, use a <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try-with block</a>.</li>
<li>Perhaps only get the line separator once, not in a loop (although
that's <em>probably</em> optimised away).</li>
<li>The <code>while</code> loop is very inefficient, but that's probably not a
concern here, so I'm not sure what to recommend.  Maybe that the
string concatenation can be avoided by going for two method calls
instead.  You'd have to profile it regardless if that makes any
measurable difference at all.</li>
<li><code>boolean</code> arguments are easy to get wrong (that's why some IDEs show
the name of argument at call sites.  That can be avoided by using a
<a href="https://en.wikipedia.org/wiki/Builder_pattern" rel="nofollow noreferrer">builder pattern</a>, aka <code>new ...().asText(true).write()</code> or something
along those lines.</li>
</ul>

<pre><code>public class ByteStreamTest {
    public static void main(String[] args) throws IOException {
        new ByteStreamTest().write(true);
        new ByteStreamTest().write(false);
    }

    private File open(String filename) {
        return new File(getClass().getClassLoader().getResource(filename).getPath());
    }

    private void write(boolean asText) throws IOException {
        File input = open("input.txt");
        File output = open(asText ? "output-text.txt" : "output-bytes.txt");

        try (FileInputStream in = new FileInputStream(input);
             FileWriter fw = new FileWriter(output)) {
            String separator = System.getProperty("line.separator");

            int c;
            while ((c = in.read()) != -1) {
                fw.write(c);
                if (!asText) {
                    fw.write(separator);
                }
            }
        }
    }
}
</code></pre>

<hr>

<p>Anyway, as an exercise how to avoid <code>if</code>s it can always be rewritten in
terms of two classes where one class does the <code>true</code> branch, the other
the <code>false</code> branch.  That also means that suddenly there's a big
increase in code to read for nothing much of a benefit.</p>

<p>For a nicer to use API, I'd imagine something like this would make way
more sense though:</p>

<pre><code>public class ByteStreamTest {
    public static void main(String[] args) throws IOException {
        copy(open("input.txt"), open("output-text.txt"), true)
        copy(open("input.txt"), open("output-bytes.txt"), false)
    }

    private static void copy(File input, File output, boolean asText) throws IOException {...}
    private static File open(String filename) {...}
}
</code></pre>

<p>It's all procedural after all.  Secondly as was already said, <code>copy</code>
makes more sense and <code>open</code> can use
<code>ByteStreamTest.class.getClassLoader()...</code> without having to actually
create an object of the class.</p>

<p>(Why is it writing to the locations from the class loader?  That
wouldn't work at all if this was running from a JAR, wouldn't it?)</p>
    </div>