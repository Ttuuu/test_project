<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of <code>MaxOMP</code> as a name, I like <code>MaxOmp</code> - in general still CamelCase your names even if they include an acronym.</p>

<p>Additionally, there isn't any reason why this needs to be restricted to any particular environment variable. As such, I would probably make this:</p>

<pre><code>class EnvironmentVariableContextManager:

    _base_value = None
    _variable = None

    def __init__(self, variable_name, value):
        self.variable = variable_name
        self.target_value = value

    @property
    def variable(self):
        return self._variable

    @variable.setter
    def variable(self, name):
        self._base_value = os.environ.get(name, None)

        if self._base_value is None:
            raise Exception(f"{name} is not a valid environment variable")

        self._variable = name

    @property
    def original_value(self):
        return self._base_value

    def __enter__(self):
        os.environ[self.variable] = self.target_value

    def __exit__(self, *):
        os.environ[self.variable] = self.original_value
</code></pre>

<p>This has a few benefits:</p>

<ul>
<li>We use properties to properly encapsulate access and add some extra validation (if you don't care about invalid environment variables feel free to remove that)</li>
<li>We restore it to the original value, not some hardcoded value. You could also provide a way to specify an "after" value if that was desirable.</li>
</ul>

<p>As suggested in the comments, we may have a valid use-case for an environment variable that doesn't currently have a value. In that case, we would remove the exception, and instead do this:</p>

<pre><code>@variable.setter
def variable(self, name):
    self._base_value = os.environ.get(name, None)
    self._variable = name

def __exit__(self, *):
    if self.original_value is None:
        os.environ.pop(self.variable)
    else:
        os.environ[self.variable] = self.original_value
</code></pre>

<p>Once we have that, then we just inherit.</p>

<pre><code>class MaxOmpThreads(EnvironmentVariableContextManager):

    def __init__(self, max_threads=None):
        max_threads = max_threads or mp.cpu_count()
        super().__init__("OMP_NUM_THREADS", max_threads)
</code></pre>

<p>Another thing to note, is that <a href="https://docs.python.org/3/library/os.html#os.environ" rel="nofollow noreferrer"><code>os.environ</code></a> only reflects the environment variables at the time of Python startup. If this is not what you want then you'll likely need a different solution.</p>

<p>This also may not be thread-safe; if you might have multiple processes working on something at once, and some need one setting and some need another, then you're likely to run into issues. If your program is overall serial, and the pieces that use OMP are well defined and contained, you're probably fine.</p>
    </div>