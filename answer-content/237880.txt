<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll try and point out bad habits that might cause you problems in larger programs.</p>

<p>Firstly, avoid <code>using namespace std;</code>, especially at such broad scope.  This pollutes the global namespace, greatly reducing the benefits of having namespaces at all.  It's not much to type <code>std::</code> where you need it, and/or you can selectively import a handful of identifiers into functions where you need them repeatedly.</p>

<p>We can split the functionality of that large <code>main()</code> into three main sections:</p>

<ol>
<li>Get input values</li>
<li>Calculate the result</li>
<li>Print the result</li>
</ol>

<p>The reason to do this isn't just to help us reason about each part separately (although that's a good thing).  A bigger benefit comes when we want to test the function against several sets of inputs to ensure correctness (this is <em>unit testing</em>).  With the monolithic <code>main()</code>, we'd need to construct a test harness that runs the whole program for each test case, which is much slower.</p>

<p>We can reduce the huge long line here:</p>

<blockquote>
<pre><code>cout &lt;&lt; "\n\t\tAfter inputting 11 integers, this program will evaluate\n\tthe first 10 integers, then will display the pairs of said integers\n\twhich when added together the total will equal the 11th integer.";
cout &lt;&lt; "\n\n\tPlease enter 11 integers: \n\n";
</code></pre>
</blockquote>

<p>In C++, as in C, we can write string literals in pieces, and the compiler will assemble them into a single string:</p>

<pre><code>std::cout &lt;&lt; "\n\t\tAfter inputting 11 integers, this program will evaluate\n"
    "\tthe first 10 integers, then will display the pairs of said integers\n"
    "\twhich when added together the total will equal the 11th integer.\n";
std::cout &lt;&lt; "\n\tPlease enter 11 integers: \n\n";
</code></pre>

<p>We need to be more careful about reading input here:</p>

<blockquote>
<pre><code>    cout &lt;&lt; "\t\t"; cin &gt;&gt; (ints[run]);
</code></pre>
</blockquote>

<p>Reading from a stream can fail (for example, if the user presents something that's not a number, or closes the stream).  When that happens, the stream enters the "fail" state, and all subsequent reads will also fail, until the state is reset.  For a simple program like this, we can probably get away with terminating the program when that happens:</p>

<pre><code>    std::cout &lt;&lt; "\t\t";
    std::cin &gt;&gt; ints[run];
    if (!std::cin) {
        std::cerr &lt;&lt; "Failed to read input number\n";
        return 1;
    }
</code></pre>

<p>Similarly, <code>std::system()</code> may fail (as it does on this Debian system, where neither <code>cls</code> or <code>pause</code> are available programs).  If the result of this call is non-zero, then we need to deal with the failure.  Note also that we're missing the necessary include of <code>&lt;cstdlib&gt;</code>; we may fail to compile because of that.  (Including <code>&lt;cstdlib&gt;</code> also gives us the useful <code>EXIT_FAILURE</code> macro, which we could use as return value in the error case above.)</p>

<p>We have a bug here:</p>

<blockquote>
<pre><code>            cout &lt;&lt; "(" &lt;&lt; out[index++] &lt;&lt; " , " &lt;&lt; out[index] &lt;&lt; ")";
</code></pre>
</blockquote>

<p>We both modify and use <code>index</code> here in the same statement, and the two uses are <em>unsequenced</em> relative to each other.  That means it's indeterminate whether the second use gets the initial value of <code>index</code> or the incremented value.  What we need to do is to separate these uses into two statements:</p>

<pre><code>            std::cout &lt;&lt; '(' &lt;&lt; out[index++];
            std::cout &lt;&lt; " , " &lt;&lt; out[index] &lt;&lt; ')';
</code></pre>

<p>That said, loops are easier to read if we don't modify the loop counter within the body; we could re-write it to advance by 2 each time:</p>

<pre><code>    for (int index = 0;  index &lt; 11;  index += 2)
</code></pre>



<pre><code>            std::cout &lt;&lt; '(' &lt;&lt; out[index] &lt;&lt; " , " &lt;&lt; out[index+1] &lt;&lt; ')';
</code></pre>

<p>This test is redundant:</p>

<blockquote>
<pre><code>            else if (index == 11)
                break;
</code></pre>
</blockquote>

<p>The very next code to be executed here is the loop increment (<code>index++</code>) and test (<code>index &lt; 11</code>), which will exit the loop in this case anyway.</p>
    </div>