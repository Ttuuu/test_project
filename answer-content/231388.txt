<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I noticed in the code of your <code>ExcelReader</code> class the following methods that return two maps:</p>

<blockquote>
<pre><code>private static Map&lt;Integer, String&gt; conditionParametersIds(){
    Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();
    MapHelper.repeatPut(map, new Integer[]{6, 7, 8, 9}, new String[]{"id.Value1", "id.Value2", "id.Value3", "id.Value4"});
    return map;
}
private static Map&lt;Integer, String&gt; sources(){
    Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();
    MapHelper.repeatPut(map, new Integer[]{6, 7}, "X");
    MapHelper.repeatPut(map, new Integer[]{8, 9}, "Y");
    return map;
}
</code></pre>
</blockquote>

<p>You are repeating calls to these two methods to retrieve values from maps, a possible improvement to avoid this issue is to define two static final maps in your class initialized by the same methods returning <em>unmodifiable</em> maps like the code below:</p>

<pre><code>private static Map&lt;Integer, String&gt; conditionParametersIds(){
    Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();
    MapHelper.repeatPut(map, new Integer[]{6, 7, 8, 9}, new String[]{"id.Value1", "id.Value2", "id.Value3", "id.Value4"});
    return Collections.unmodifiableMap(map);
}

private static Map&lt;Integer, String&gt; sources(){
    Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();
    MapHelper.repeatPut(map, new Integer[]{6, 7}, "X");
    MapHelper.repeatPut(map, new Integer[]{8, 9}, "Y");
    return Collections.unmodifiableMap(map);
}

private static final Map&lt;Integer, String&gt; SOURCES = sources();
private static final Map&lt;Integer, String&gt; CONDITION_PARAMETER_IDS = conditionParametersIds();
</code></pre>

<p>I noticed you have a loop in the method <code>readRows</code> of <code>ExcelReader</code> class performing action on values in the range 6 ...9 and ignoring others out of this range:</p>

<blockquote>
<pre><code>for(int j = 6; j &lt;= row.getLastCellNum(); j++) {
    if(j == 6) {
         //omitted
    }
    if(j == 7) {
        //omitted
    } //etc..
}
</code></pre>
</blockquote>

<p>You can rewrite the loop calculating the minimal value between 9 and <code>row.getLastCellNum()</code>, using a switch inside the loop for values between 6 and 9 and peculiar actions like my code below:</p>

<pre><code>int min = Math.min(row.getLastCellNum(), 9);

for(int j = 6; j &lt;= min; j++) {
    KafkaMessage kafkaMessage = new KafkaMessage();

    //initialize the common fields to all j values
    String str = row.getCell(5).getStringCellValue();
    kafkaMessage.setTimestamp(convertToTimeStamp(str));
    kafkaMessage.setSource(SOURCES.get(j));
    kafkaMessage.setGuid(CONDITION_PARAMETER_IDS.get(j));

    switch(j) {
        case 6:
            str = row.getCell(j).getStringCellValue();
            kafkaMessage.setStringValue(str);
            break;
        case 7:
            double d = row.getCell(j).getNumericCellValue();
            kafkaMessage.setLongValue((long) d);
            break;
        case 8:
            boolean b = row.getCell(j).getBooleanCellValue();
            kafkaMessage.setBooleanValue(b);
            break;
        case 9:
            d = row.getCell(j).getNumericCellValue();
            kafkaMessage.setFloatValue((float) d);
            break;
    }

    rows.add(kafkaMessage);
}
</code></pre>

<p>I have seen that your <code>readExcel</code> method throws a <code>ParseException</code> but not <code>IOException</code> because you choose to catch the exception, for me the user of this method should be informed about the fact something was wrong with the file and so the exception should be thrown also.</p>
    </div>