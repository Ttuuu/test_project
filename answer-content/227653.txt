<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, when working with monetary values, to avoid <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">floating-point-number-related issues</a> (you can try calling <code>change_return(1, 1.15)</code> in your solution to see it), it is more common to either (1) use cent as the unit and store all values as integers; or (2) use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>Decimal</code></a> class.</p>

<p>Secondly, the repetition in the code can be avoided. The currencies can be stored and iterated over one by one in a for loop. A simple approach to store all kinds of currencies is to use a list as others have shown. Another option is to use <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enumerations</a>.</p>

<p>Thirdly, the logic could be simplified a bit by using the modulo operation <code>change % denom</code> to calculate <code>change - change // denom * denom</code>.</p>

<p>Following is refactored code:</p>

<pre><code>from enum import Enum
from decimal import Decimal

class Currency(Enum):
    TWENTY = "20.00", "Twenties"
    TEN    = "10.00", "Tens"
    FIVE   =  "5.00", "Fives"
    ONE    =  "1.00", "Ones"
    # more ...
    PENNY  =  "0.01", "Pennies"

    def __init__(self, denomination, print_name):
        self.denomination = Decimal(denomination)
        self.print_name = print_name

def change_return(cost, paid):
    cost = Decimal(cost)   
    paid = Decimal(paid)

    change = paid - cost
    change_dict = {}  # Before Python 3.6 dictionaries do not preserve order so a sorting may be needed before printing

    if change &lt; 0:
       return None   # Better to raise an exception if performance is not a major concern

    # Better to do rounding here rather than before calculating the change
    # round() could also be used here, quantize() offers more rounding options, if needed
    precision = Decimal("0.01")
    change = change.quantize(precision)

    # Note that the iteration order follows the declaration order in the Currency Enum,
    # therefore currencies should be declared in descending order of their denominations
    # to yield the desired outcome
    for cur in Currency:
        currency_cnt, change = divmod(change, cur.denomination)   # divmod(a, b) returns a tuple (a // b, a % b)
        if currency_cnt:  # Same as currency_cnt != 0
            change_dict[cur] = currency_cnt
    return change_dict

if __name__ == "__main__":
    changes = change_return("30", "86.13")
    if changes is None:
       print('Insufficient funds')
    else:
       for cur, count in changes.items():
           print(f"{cur.print_name:&lt;9}: {count}")   # Format output using format strings
</code></pre>
    </div>