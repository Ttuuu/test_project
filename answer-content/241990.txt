<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some observations:</p>

<blockquote>
<pre><code>Character::Character(const std::string&amp; name, int health, int attackPower)
    : name_ {name}
    , health_ {health}
    , attackPower_ {attackPower}
{
}
</code></pre>
</blockquote>

<p>Consider using <code>std::string name</code> to enable move semantics:</p>

<pre><code>Character::Character(std::string name, int health, int attackPower)
    : name_ {std::move(name)}
    , health_ {health}
    , attackPower_ {attackPower}
{
}
</code></pre>

<blockquote>
<pre><code>Character::~Character()
{
}
</code></pre>
</blockquote>

<p>This should really be defined directly in-class.</p>

<blockquote>
<pre><code>const std::string&amp; Character::getName() const
{
    return name_;
}

int Character::getHealth() const
{
    return health_;
}
</code></pre>
</blockquote>

<p>Just call them <code>name</code> and <code>health</code>.</p>

<blockquote>
<pre><code>Enemy::~Enemy()
{
}
</code></pre>
</blockquote>

<p>You don't need to explicitly override virtual destructors in derived classes.</p>

<blockquote>
<pre><code>void Enemy::attackOpponent(Character&amp; opponent)
{
    std::thread t([&amp;]() {
        while (true)
        {
            std::this_thread::sleep_for(std::chrono::milliseconds(interval_));
            if (isAlive() &amp;&amp; opponent.isAlive())
            {
                Character::attackOpponent(opponent);
            }
            else
            {
                break;
            }  
        }
    });
    t.detach();
}
</code></pre>
</blockquote>

<p>You're introducing data race here.  There is no synchronization mechanism.</p>

<p>You are completely changing the semantics of <code>Character::attackOpponent</code> here, so overriding is inappropriate.  Leave <code>attackOpponent</code> as-is and rename this to something like <code>start_attack</code>.  <code>interval</code> should be stored as a <code>std::chrono::duration</code> to begin with, for clarity.  The <code>detach</code> is also prone to lifetime problems.</p>

<blockquote>
<pre><code>class Dragon : public Enemy
{
public:
    Dragon(int initialHealth, int attackPower, int interval);
    ~Dragon();
};

class Player : public Character
{
public:
    Player(int initialHealth, int attackPower);
    ~Player();
};
</code></pre>
</blockquote>

<p>Are these classes really necessary?</p>

<blockquote>
<pre><code>class Character;
class Enemy;
</code></pre>
</blockquote>

<p>These forward declaration are redundant because you have already included the definitions of the classes.</p>

<blockquote>
<pre><code>inline Character&amp; getEnemyByName(const std::string&amp; name)
{
    auto it = std::find_if(std::begin(enemies_), std::end(enemies_), 
                            [&amp;](auto&amp; o) { return !o.getName().compare(name);});

    assert(it != std::end(enemies_) &amp;&amp; "Enemy with matching name not found");

    return *it;
}
</code></pre>
</blockquote>

<p>In-class definitions are already inline.  Missing <code>const</code>.  Use the <code>==</code> operator instead of directly calling the <code>compare</code> function:</p>

<pre><code>auto it = std::find_if(
    enemies_.begin(), enemies_.end(),
    [&amp;] (const auto&amp; o) {
        return o.getName() == name;
    }
);
</code></pre>

<blockquote>
<pre><code>Game::Game()
{
}

Game::~Game()
{
}

void Game::init()
{
    players_.push_back(Player(40, 2));
    enemies_.push_back(Orc(7, 1, 1300));
    enemies_.push_back(Dragon(20, 3, 2600));
}
</code></pre>
</blockquote>

<p>Remove the destructor.  The <code>init</code> function is probably what you should be doing in the constructor:</p>

<pre><code>Game::Game()
    : players_{Player{40, 2}}
    , enemies_{Orc{7, 1, 1300}, Dragon{20, 3, 2600}}
{
}
</code></pre>

<blockquote>
<pre><code>auto player = std::begin(players_);
while ((player != std::end(players_)) &amp;&amp; player-&gt;isAlive())
</code></pre>
</blockquote>

<p><code>player</code> doesn't change, so ...</p>
    </div>