<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe you had to put <code>typename</code> before <code>std::vector&lt;...&gt;::iterator</code> to make it compile. <code>iterator</code> is a dependent name, thus compiler needs a hint (well, in reality it doesn't need it in context of type alias declaration, it is just how syntax is defined <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html" rel="nofollow noreferrer">before C++20</a>).</p>

<h2>Interface</h2>

<p>Lets address the elephant in the room first. This class trims down the features of <code>std::vector&lt;std::pair&lt;T, U&gt;&gt;</code> without any visible benefit. Things like <code>std::back_inserter</code> will not work because members are named with different name, comparison operators will not work, there are no type aliases inside the class so users will have to write template metaprogramming for simple things, and so on. </p>

<p>I do not see any benefit of using this instead of <code>std::vector&lt;std::pair&lt;T, U&gt;&gt;</code>.</p>

<h2>Implementation</h2>

<p>There is no need to have <code>void</code> in the parameter list, empty parameter list means the functions doesn't take any parameters.</p>

<p><code>numElem</code> looks redundant.</p>

<p>Access functions should be <code>const</code>, possibly <code>noexcept</code>.</p>

<p>Some functions are defined inline, some are not, although they are of the same complexity. This might lead to nasty linker issues.</p>

<p>Putting return value in <code>()</code> might get problematic. When using things like <code>decltype</code>, that will actually alter the result.</p>

<h2>Designing interfaces</h2>

<p>Wrappers are usually made to <em>streamline</em> one way of usage, possibly without losing any expressive power over original. I believe the main idea was to provide a two-way mapping from two continuous ranges. When designing such wrappers, it is important to understand under which constraints the wrappers are going to work. Let me throw some from top of my head:</p>

<ol>
<li><p>The input will be in the form <code>{index-like, index-like}</code></p></li>
<li><p>Two ranges are continuous (from 1 to 26, from 'a' to 'z' given ASCII)</p></li>
<li><p>It is possible to normalize the values (e.g. substract a value to make the first one 0), for example for letters it will be substract the value of <code>'a'</code></p></li>
<li><p>No values outside of the given ranges are ever to be queried</p></li>
<li><p>The mapping is one-to-one and onto, e.g. for each value on one side, there is corresponding value on the other side, and it is unique.</p></li>
</ol>

<p>If the (1) and/or (2) don't hold. one will need to consider <code>std::map</code> and siblings.</p>

<p>The usage scenarios are as following:</p>

<ol>
<li><p>User can somehow read/provide the mapping in the form of a range of <code>std::pair&lt;T, U&gt;</code> or as two separate ranges</p></li>
<li><p>User wants to query both ways, e.g. <code>mapping[right]</code> would return an object of <code>Left</code> type, and <code>mapping[left]</code> will return an object of <code>Right</code> type: <code>mapping[3] == 'c' &amp;&amp; mapping['c'] == 3</code>.</p></li>
<li><p>User might want to know if two mapping are equal, e.g. <code>operator==</code> and <code>operator!=</code> should be provided.</p></li>
<li><p>Users might want to define some relationships after the object was created, thus insertion functions like <code>define(const Left&amp; left, const Right&amp; right)</code> are needed. Perfect forwarding might be needed.</p></li>
<li><p>Users do not modify the relationships (the pair itself) after they are defined</p></li>
<li><p>Users might want to remove a relationship</p></li>
</ol>

<p>With those, I believe something like this could fit in:</p>

<pre><code>template &lt;typename Left, typename Right&gt;
class mapping
{
    // internals    
public:
    template &lt;typename InputIterator&gt;
    mapping(InputIterator first, InputIterator last); //extract mappings from iteator range

    // C++20 range version here
    // ditto for version where mappings provided as two ranges

    // rule of 0/3/5 depending on the implementation

    const Right&amp; operator[](const Left&amp; left) const; // no need for non-const version
    const Left&amp; operator[](const Right&amp; right) const;

    // returns false if either side is already in some relationship
    bool define(const Left&amp; left, const Right&amp; right) noexcept; 
    // overload for `std::pair` version

    // throws f either side is already in some relationship
    void try_define(const Left&amp; left, const Right&amp; right);
    // overload for `std::pair` version

    // returns true if the relationship existed and now removed
    bool remove(const Left&amp; left, const Right&amp; right) noexcept(destructor(Left) &amp;&amp; destructor(Right)); //pseudocode for noexcept
    // pair version
    // throwing version



    template &lt;typename Left, typename Right&gt;
    friend bool operator==(const mapping&lt;Left, Right&gt;&amp; lhs, const mapping&lt;Left, Right&gt;&amp; rhs);

    template &lt;typename Left, typename Right&gt;
    friend bool operator!=(const mapping&lt;Left, Right&gt;&amp; lhs, const mapping&lt;Left, Right&gt;&amp; rhs);

    template &lt;typename Left, typename Right&gt;
    friend void swap(mapping&lt;Left, Right&gt;&amp; lhs, mapping&lt;Left, Right&gt;&amp; rhs);
};

</code></pre>

<p>There are other things one might need, since those are basically sets, operations like</p>

<ol>
<li><p>Merge</p></li>
<li><p>Difference</p></li>
<li><p>Intersection</p></li>
</ol>

<p>might be needed for the user.</p>
    </div>