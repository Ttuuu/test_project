<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No time to read through all the code for now. So just some random observations.</p>

<p><strong>In Coordinates.h:</strong></p>

<p><strong>Include as less as poissible in headers:</strong> You include <code>iostream</code> but it is only needed in <code>Coordinates.cpp</code>. Generally you should include as less as possible in header files. If
you include <code>iostream</code> in the header every class which includes <code>Coordinates.h</code> also includes <code>iostream</code> even if it is not necessary. This leads to longer compilation times. Same for <code>Actions.h</code></p>

<p><strong>Follow the order public protected private in classes:</strong>
You want to read the most important parts of a class at first. Normally this is the functions the user can use, not implementation specific details like private members. </p>

<p><strong>Pass built in types by value</strong>: It is cheaper to copy an int than to pass it by const reference. So in youre setX method you should just pass it as <code>int</code> not <code>const int&amp;</code></p>

<p><strong>Use const when possible</strong>: <code>getX()</code> does not modify its object so declare it const. You should always use const for functions who don't modify the object.</p>

<p><strong>Don't declare a Copy Constructor on trivial classes</strong>: Youre class only has int data members. Therefore youre compiler will happily generate the copy constructor for you. Theres absolutely no need to declare it. Besides if you declare a copy constructor you should also declare the other classes of the rule of five: <a href="https://en.cppreference.com/w/cpp/language/rule_of_three" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/language/rule_of_three</a>. In the case of youre class its not necessary.</p>

<p><strong>Be consistent with naming</strong>: I would not use capital letters for functions. So <code>Draw()</code> and <code>DeleteDraw()</code> should be <code>draw()</code> and <code>deleteDraw()</code>.</p>

<p><strong>Don't use namespace std:</strong> Especially not in a header file. You force youre user to import all the namespace std if they ever include youre header file. It really is very bad style to use namespace std. <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice</a> </p>

<p><strong>Use a namespace</strong>: You should wrap all youre functions and classes in its own namespace to prevent nameclashes. Otherwise if you write a programm with other libraries theres the danger nameclases happen. <a href="https://stackoverflow.com/questions/4211827/why-and-how-should-i-use-namespaces-in-c">https://stackoverflow.com/questions/4211827/why-and-how-should-i-use-namespaces-in-c</a></p>

<p><strong>Use a prefix for members::</strong> This is a bit controversial but i would use a prefix m for member variables so they are clearly visible as member variables. It also elimnates the need for <code>this-&gt;</code> in youe <code>coordinates.cpp</code></p>

<p><strong>Avoid unessary comments:</strong>: The comment in youre class <code>Methods using a coordinate</code> is just a bloat its pretty obvious that these methods do sth with Coordinates because they are in the Coordinates class.</p>

<p>Putting everything together we get this:</p>

<p><strong>Coordinate.h</strong></p>

<pre><code>#ifndef COORDINATES_H
#define COORDINATES_H

#include "Drawable.h"

namespace tetris {

    class Coordinates : public Drawable
    {
    public:
        Coordinates(int x = 0, int y = 0);

        int getX() const;
        int getY() const;

        void setX(int x);
        void setY(int y);

        // Methods using a coordinate
        void moveCoordinatesInADirection(char direction);
        void draw() override;
        void deleteDraw() override;

    private:
        static constexpr char form{ '*' };

        int mX;
        int mY;
    };
}

#endif 
</code></pre>

<p><strong>Coordinates.cpp</strong></p>

<pre><code>#include "Coordinates.h"

#include "Actions.h"

#include &lt;iostream&gt;

namespace tetris {

    Coordinates::Coordinates(int x, int y)
        :mX{x}, mY{y}
    {
    }

    int Coordinates::getX() const
    {
        return mX;
    }

    int Coordinates::getY() const
    {
        return mY;
    }

    void Coordinates::setX(int x)
    {
        mX = x;
    }

    void Coordinates::setY(int y)
    {
        mY = y;
    }

    void Coordinates::moveCoordinatesInADirection(char direction)
    {
        switch (direction)
        {
        case Action::moveLEFT:
            mY--;
            break;
        case Action::moveRIGHT:
            mY++;
            break;
        case Action::moveDOWN:
            mX++;
            break;
        default:
            break;
        }
    }

    void Coordinates::draw()
    {
        MoveTo(mX + Drawable::startPositionX, mY + Drawable::startPositionY);
        std::cout &lt;&lt; form;
    }

    void Coordinates::deleteDraw()
    {
        MoveTo(mX + Drawable::startPositionX, mY + Drawable::startPositionY);
        std::cout &lt;&lt; " ";
    }
}
</code></pre>

<p>I will probaly add more to this answer later when I have time.</p>
    </div>