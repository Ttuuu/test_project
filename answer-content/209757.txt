<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Depending on your style and .net version you can change some of your methods to <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-6#expression-bodied-function-members" rel="nofollow noreferrer">Expression bodied function members</a>:</p>

<pre><code>/// documentation
static double ObvodTrojuhelniku(double a, double b, double c) =&gt; a + b + c

/// documentation
static double ObvodSestiuhelniku(double d) =&gt; 6 * d

/// documentation
static double ObsahSestiuhelniku(double d) =&gt; ((3 * Math.Sqrt(3) * Math.Pow(d, 2))) / 2;
</code></pre>

<p>I really like those small function you are using, they are easily testable and follow <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">SRP</a> - they have only one function and one reasons to change - if at all.</p>

<hr>

<p>You should add input validation - if a user inputs <code>"QWER"</code> and you <code>int.Parse(..)</code> it <em>directly</em>, it will crash. Similarly for <code>double.Parse(...)</code> </p>

<p>Consider using something along the lines of:</p>

<pre><code>public static class InputHelper
{
    /// &lt;summary&gt;
    /// Ask unser for input until a valid double is parsed
    /// &lt;/summary&gt;
    /// &lt;param name="text"&gt;The text presented to the user before inputting.&lt;/param&gt;
    /// &lt;returns&gt;double&lt;/returns&gt;
    public static double GetDouble(string text)
    {
        string p = null;
        while (true)
        {
            Console.WriteLine(text);
            try
            {
                p = Console.ReadLine();
                return double.Parse(p);
            }
            catch (Exception ex)
            {
                if (ex is FormatException)
                {
                    Console.WriteLine($"Invalid input: '{p}' - only numbers and 1 decimal divider allowed!");
                }
                else if (ex is OverflowException)
                {
                    Console.WriteLine($"Invalid input: '{p}' - is too big. Max: {double.MaxValue}");
                }
            }
        }
    }

    /// &lt;summary&gt;
    /// Ask unser for input until a valid integer is parsed
    /// &lt;/summary&gt;
    /// &lt;param name="text"&gt;The text presented to the user before inputting.&lt;/param&gt;
    /// &lt;returns&gt;integer&lt;/returns&gt;
    public static int GetInt(string text)
    {
        string p = null;
        while (true)
        {
            Console.WriteLine(text);
            try
            {
                p = Console.ReadLine();
                return int.Parse(p);
            }
            catch (Exception ex)
            {
                if (ex is FormatException)
                {
                    Console.WriteLine($"Invalid input: '{p}' - only numbers allowed!");
                }
                else if (ex is OverflowException)
                {
                    Console.WriteLine($"Invalid input: '{p}' - is too big. Max: {int.MaxValue}");
                }
            }
        }
    }
}
</code></pre>

<p>where you do <code>int VolbaObrazce = int.Parse(Console.ReadLine());</code>  and inside <code>static double PrectiPromennou(string text)</code>.</p>

<hr>

<p>If you know about templating, you can reduce the duplicate code (DRY) in your static helpers. I put them into an extra class to be used in other projects as well.</p>
    </div>