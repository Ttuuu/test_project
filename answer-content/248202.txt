<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You might get better performance and simplicity if you make up your mind right away: Comparing the <em>first</em> value with the <em>last</em> value immediately tells you which <strong>one</strong> of increasing/decreasing/constant you should check.</p>
</li>
<li><p>What you should do for <code>null</code> depends on the contract. <a href="https://leetcode.com/problems/monotonic-array/" rel="nofollow noreferrer">This problem is on LeetCode</a>, where you're even guaranteed that the array will have at least one element, so there you wouldn't need to cover <code>null</code> or an empty array. You "chose"(?) to return <code>false</code>, but you could just as well argue for <code>true</code>, since "no array" seems rather similar to "no elements", for which the correct answer is btw <code>true</code>, not <code>false</code>.</p>
</li>
</ul>
<p>Here's one that uses a first-vs-last check (although I included "constant" in "increasing") and which puts the burden on the caller to provide a reasonable input (i.e., not <code>null</code>). I think it's better to have the user get an error than to silently pretend nothing's wrong.</p>
<pre><code>    public boolean isMonotonic(int[] numbers) {
        int last = numbers.length - 1;
        if (last &gt;= 0 &amp;&amp; numbers[0] &lt;= numbers[last]) {
            for (int i = 0; i &lt; last; i++) {
                if (numbers[i] &gt; numbers[i+1]) {
                    return false;
                }
            }
        } else {
            for (int i = 0; i &lt; last; i++) {
                if (numbers[i] &lt; numbers[i+1]) {
                    return false;
                }
            }
        }
        return true;
    }
</code></pre>
<p>A <code>BiPredicate</code> version inspired by <a href="https://codereview.stackexchange.com/a/248181/228314">RoToRa's answer</a>. This one distinguishes all three cases, as the <code>BiPredicate</code> avoids code duplication:</p>
<pre><code>    public boolean isMonotonic(int[] numbers) {
        int n = numbers.length;
        if (n &lt;= 2) {
            return true;
        }
        BiPredicate&lt;Integer, Integer&gt; fail =
            numbers[0] &lt; numbers[n-1] ? (a, b) -&gt; a &gt; b :
            numbers[0] &gt; numbers[n-1] ? (a, b) -&gt; a &lt; b :
                                        (a, b) -&gt; a != b;
        for (int i = 1; i &lt; n; i++)
            if (fail.test(numbers[i-1], numbers[i]))
                return false;
        return true;
    }
</code></pre>
<p>Python version, just for fun :-)</p>
<pre><code>from operator import eq, le, ge

def isMonotonic(numbers):
    first, last = numbers[:1], numbers[-1:]
    check = eq if first == last else le if first &lt; last else ge
    return all(map(check, numbers, numbers[1:]))
</code></pre>
    </div>