<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><code>if(a.getPositionX()&lt;=world.getWorldSize()-2 &amp;&amp;
a.getPositionY()&lt;=world.getWorldSize()-2 &amp;&amp; a.getPositionX()&gt;=1 &amp;&amp;
a.getPositionY()&gt;=1) {</code> Magical numbers, in this case "2", should be
avoided, because by looking at this number you have no idea what it
expresses. In my personal experience it's better to compare with
zero, not one: <code>a.getPositionX() &gt; 0</code></li>
<li><code>if(inWorld(a) == true) {</code> Redundant comparison with <code>true</code>. Could be just: <code>if(inWorld(a))</code>. I prefer to return early from the method to decrease the level of blocks nesting: <code>if(!inWorld(a)) { return false; }</code></li>
<li><p><code>public boolean nextStep(int w[][],Ant a)</code> The body of this method could be represented in declarative style as a table. We basically set new direction of ant, color of cell and new position of ant depending on current ant direction and color of cell. We could create enum for colors (black and white) and class to represent position delta. So, it could look like this (in pseudocode):</p>

<pre><code>Color.White, Direction.West -&gt; Direction.North, Color.Black, Delta(1, 0)
Color.Black, Direction.North-&gt; Direction.West, Color.White, Delta(0, -1)
...
</code></pre></li>
<li><code>private final int worldSize =400;</code> Seems like this is a property of a class, not a constant, because practically you can create a world of any size and can have few worlds with different sizes.</li>
<li><code>public boolean inWorld(Ant a) {</code> This method should have <em>World</em> as parameter not Ant, because you already have ant's data inside current object. Or you could move this method to World class.</li>
<li>You should encapsulate inner structure of class World. This class could store its data as array, list or any other suitable type, but you expose this information (method <code>World.getWorld()</code>), so it would be difficult in the future to change its inner workings. Also, you should make this class more abstract to have methods like: <code>World.changeColor(Color.Black, 50, 50)</code> in order to decrease complexity of changing World.</li>
<li><code>if(a.nextStep(world,a)==true) {</code>Redundant comparison with <code>true</code></li>
<li><code>public void paintComponent(Graphics g) {</code>. In my opinion observer pattern is best suited for this type of relation between model (World) and view(Graphics). So you can subscribe view for changes in a model (World) and make any visual effects in a handler. Then you can update only the model and happily forget about view.</li>
</ol>
    </div>