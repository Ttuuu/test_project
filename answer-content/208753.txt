<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>reinvent the wheel.</h1>

<p>what is wrong with <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a></p>

<h1>unclear  variable names</h1>

<p>It was unclear to me what <code>it_string</code> and <code>it_word</code> are until I've looked at all the code. pick variable names that express what the purpose of the variable is</p>

<h1>magic numbers</h1>

<p>you use <code>38</code> as a magic number. It is unclear where this comes from.
This is the maximum length a line should be, then extract a variable in your function to say so. You can also make this an argument to the function with default value 38.</p>

<h1>line length</h1>

<p>Try to limit the line length. For long expression (the <code>if</code> and <code>while</code> classes, I would split the across lines. To help me be consistent here, I use <a href="https://github.com/ambv/black" rel="nofollow noreferrer">black</a></p>

<h1>Shadow standard modules</h1>

<p><code>string</code> is a standard module, so I would pick another name for this argument.</p>

<h1>Alternative approach</h1>

<p>In python, it is very easy to split a line into words (<code>line.split(' ')</code>), So you can work per word instead of per character, and then look that word up in the <code>abbreviations</code> dict</p>

<pre><code>def shorten_words(abbreviations, line, max_length=38):
    while len(line) &gt; max_length:
        for word in line.split("\t"):
            if word in abbreviations or word + "S" in abbreviations:
                line = line.replace(word, abbreviations[word])
                break
    return line
</code></pre>

<p>This will enter an endless loop if <code>word == abbreviations[word]</code>. To counter that, you need to keep a set of replaced words. I also made a mistake in the handling of multiples:</p>

<pre><code>def shorten_words(abbreviations, line, max_length=38):
    replacements = set()
    while len(line) &gt; max_length:
        for word in line.split(" "):
            if (
                word[-1] == "S"
                and word not in abbreviations
                and word[:-1] in abbreviations
            ):
                word = word[:-1]
            if word not in replacements and word in abbreviations:
                line = line.replace(word, abbreviations[word])
                if word == abbreviations[word]:
                    replacements.add(word)
                break
    return line
</code></pre>

<h1>testing</h1>

<p>My mistakes show the importance of testing code. Make some unittests to see if the code does what you want it to do, and run them each time you change the code. A good IDE can be a large help here.</p>
    </div>