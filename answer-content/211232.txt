<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Functionality unclear</strong></p>

<p>Post discusses "... circular queue. (in order to store characters ...". </p>

<p>After digging deeply into code I now realize the goal is not to enqueue a character and then a character and so on.  Instead the goal is to enqueue a group of characters, then another group and so on.</p>

<p>This is not clear from the the post and importantly, it is <strong>not clear from the .h file</strong>.</p>

<p><strong>Documentation</strong></p>

<p>The .h file, as a public interface deserves  as least a little documentation/comment per function.</p>

<p><strong>Nonuniform name-space</strong></p>

<p><code>__QUEUEH, queue, queue_init, enqueue, dequeue, printQueue</code> would benefit with a more  common naming convention to clearly show that they belong together.</p>

<p>Consider <code>QUEUE_H, queue, queue_init, queue_set, queue_get, queue_print</code></p>

<p><strong><code>queue_t</code></strong></p>

<p><a href="https://en.wikipedia.org/wiki/Information_hiding" rel="noreferrer">Information hiding</a>: The members of <code>queue_t</code> do not need to be in the .h file.  The below is sufficient.  If external code needs to read any of these members, I recommend a function to do so.</p>

<pre><code>typedef struct queue queue_t;
</code></pre>

<p>Put the full <code>struct queue</code> definition in the .c file.</p>

<p><code>.initialized</code> is a good candidate for <code>bool</code>.</p>

<pre><code>// unsigned char initialized;
bool initialized;
</code></pre>

<p><strong>Unnecessary item in .h</strong></p>

<p>As a <a href="https://codereview.stackexchange.com/questions/211198/circular-queue-in-c-for-an-embedded-project?noredirect=1#comment408450_211198"><code>static</code></a> function, <code>printQueue</code> does not belong in the .h file.  Remove it.</p>

<hr>

<p><strong>Avoid standard library collisions</strong></p>

<p>The below conflicts with <code>bool</code> from <code>stdbool.h</code>.  Do not re-invent the standard boolean type.</p>

<pre><code>// #if !defined bool
// typedef unsigned char bool;
// #endif
#include &lt;stdbool.h&gt;
</code></pre>

<p><strong><code>queue_init()</code></strong></p>

<p>Why set <code>.head</code>, an unsigned type, to a negative value?  Set to a unsigned value.</p>

<pre><code>// q-&gt;head = -1;
q-&gt;head = -1u;
</code></pre>

<p><strong><code>moveTail()</code></strong></p>

<p>The role of magic number 2 is unclear here and in many of the functions.  Explain the <code>2</code>.</p>

<p><strong>Unexpected <code>strMaxSize</code></strong></p>

<p>How does reading the data in the queue relate to the length of anything?</p>

<pre><code>int len = q-&gt;buf[q-&gt;tail];
</code></pre>

<p>The role of <code>strMaxSize</code> in <code>dequeue()</code> is unclear.</p>

<p><strong>Hmmmmm</strong></p>

<p>After more review it <em>looks</em> like the first character in a group of characters is the group's length.</p>

<p><strong><code>enoughSpaceAvailable()</code></strong></p>

<p>Avoid overflow: <code>size+2</code> can overflow - this code has no control over the value of <code>size</code>.  Consider a more robust test.</p>

<pre><code>// if(q-&gt;freeSpace &lt; size+2) return 0;
//return 1;

return q-&gt;freeSpace &gt; size &amp;&amp; q-&gt;freeSpace - size &gt;= 2;
</code></pre>

<p><strong>const</strong></p>

<p>Many functions would benefit with a <code>const queue_t *</code></p>

<pre><code>// enoughSpaceAvailable(queue_t* q, unsigned int size)
enoughSpaceAvailable(const queue_t* q, unsigned int size)
</code></pre>

<p><strong>3 to do the job of 2</strong></p>

<p>Unclear why code uses <code>.bufSize, .freeSpace, .occuSpace</code> when only 2 are needed.  I'd expect <code>.bufSize, .occuSpace</code> are sufficient here.</p>

<hr>

<p><strong>Overall</strong></p>

<p>Code lacks documentation to indicate the overall coding goals.  Without that, there is too much to discover.</p>

<p>I still do not know how to use best these calls.  Will <code>enqueue(q, "", 0);</code> cause havoc?   How to test is the queue is empty? What are all the error codes?  Why are errors negative?  What does a positive response mean?  </p>

<p>To me, it is  the un-posted testfile contains too much information there and not enough here.</p>

<p>This code deserves an update and then a following review.</p>

<hr>

<p>Sample alternate <code>aqueue.h</code>.<br>
I avoided "queue" as too generic and used "aqueue".</p>

<pre><code>/*
 * aqueue: queue of groups of binary data
 */

#ifndef AQUEUE_H
#define AQUEUE_H

typedef struct aqueue aqueue_t;

// All functions that return `int` return 0 on success.

/*
 * Initialize the queue with the buffer to use and its size.
 * Size [4..UINT_MAX]
 * Return TBD with invalid parameter values.
 */
int aqueue_init(aqueue_t* q, unsigned char* buf, unsigned bufSize);

/*
 * Insert a copy of what `data` points to.
 * Return TBD with insufficient space
 */
int queue_set(aqueue_t* q, const unsigned char* data, unsigned dataSize);

/*
 * Extract entry from the queue.
 * Return TBD when attempted with empty queue.
 * Return TBD when dataSize is too small.
 */
int aqueue_get(aqueue_t* q, unsigned char *data, unsigned dataSize);

/*
 * Queue empty?
 */
_Bool aqueue_empty(const aqueue_t* q);

/*
 * Get data without removing from the queue  (Peek)
 * Return TBD when attempted with empty queue.
 * Return TBD when dataSize is too small.
 */
int aqueue_top(const aqueue_t* q, unsigned char* data, unsigned dataSize);

#endif
</code></pre>
    </div>