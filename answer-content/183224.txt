<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just for the sake of showing a different approach, and answering your tweet <a href="https://twitter.com/j2r2b/status/943163833975177216" rel="nofollow noreferrer">https://twitter.com/j2r2b/status/943163833975177216</a>.
With a custom Collector and StringJoiner. You can convert the Integer to String in the same Collector and even apply some null check there if needed.
Tbh, if you need this feature a lot, you can create a class with a constructor that accepts all separator, prefix, suffix and defaultValue and reuse it. Otherwise, for a single use, I'd stick with one of the other options or the enunciate itself.</p>

<pre><code>private static String doIt(List&lt;Integer&gt; list) {
    return list.stream()
        .filter(i -&gt; (i % 2 == 0))
        .collect(new Collector&lt;Integer, StringJoiner, String&gt;() {

            @Override
            public Supplier&lt;StringJoiner&gt; supplier() {
                return () -&gt;
                    new StringJoiner("; ", "[", "]")
                        .setEmptyValue("-");
            }

            @Override
            public BiConsumer&lt;StringJoiner, Integer&gt; accumulator() {
                return (joiner, val) -&gt; joiner.add(val.toString());
            }

            @Override
            public BinaryOperator&lt;StringJoiner&gt; combiner() {
                return (joiner1, joiner2) -&gt; joiner1.merge(joiner2);
            }

            @Override
            public Function&lt;StringJoiner, String&gt; finisher() {
                return joiner -&gt; joiner.toString();
            }

            @Override
            public Set&lt;Characteristics&gt; characteristics() {
                return Collections.emptySet();
            }
        });
}
</code></pre>
    </div>