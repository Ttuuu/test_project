<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice implementation, easy to understand and well tested.
Few suggestions:</p>
<h2>Close resources with try-with-resources</h2>
<p>Java provides the try-with-resources statement to close resources automatically. Instead of:</p>
<pre class="lang-java prettyprint-override"><code>try {
    is = new DigestInputStream(is, md);
    //...
} finally {
    is.close();
}
</code></pre>
<p>You can use:</p>
<pre class="lang-java prettyprint-override"><code>try (DigestInputStream is = new DigestInputStream(is, md)) {
    //...
}
</code></pre>
<h2>Exception handling</h2>
<p>Wrapping an <code>IOException</code> into a <code>RuntimeException</code> is not good practice, but when a method throws too many different exceptions is not nice either. A trade off could be to create your own exception that wraps all other exceptions and provide the users enough information when an error occurs.</p>
<p>Regarding the input validation I suggest to launch an <code>IllegalArgumentException</code>:</p>
<pre class="lang-java prettyprint-override"><code>public static String makeHashFromUrl(String fileUrl) {
    if(fileUrl == null) {
        throw new IllegalArgumentException("Input cannot be null");
    }
    //...
}
</code></pre>
<h2>Unit test isolation</h2>
<p>Two properties of the unit test:</p>
<ul>
<li>Anyone should be able to run it</li>
<li>It should run quickly</li>
</ul>
<p>If there is no internet connection your tests fail, which is in contrast with the first property. And if the internet connection is too slow the tests take to long to run, which invalidates the second property.</p>
<p>There are more than one approach to tests methods that download files:</p>
<ul>
<li>Spin up an HTTP server which serves your resources</li>
<li>Change the method to accept a <code>URL</code> instead of a <code>String</code> and use a local file</li>
<li>...</li>
</ul>
<p>I suggest the second approach because it's simpler but if you can't change the signature of your method you need to take other approaches.
The method signature changes from:</p>
<pre><code>public static String makeHashFromUrl(String fileUrl)
</code></pre>
<p>To:</p>
<pre><code>public static String makeHashFromUrl(URL url)
</code></pre>
<p>And then test it with a local file:</p>
<pre><code>@Test
public void myTest() {
    URL localUrl = ClassLoader.getSystemResource("my local zip file.zip");

    String hash = FileHasher.makeHashFromUrl(localUrl);

    // asserts
}
</code></pre>
<h2>Minor changes</h2>
<ul>
<li>Typo in class name <code>FileHasterTest</code></li>
</ul>
<h2>Code refactored</h2>
<pre class="lang-java prettyprint-override"><code>public class FileHasher {
    public static String makeHashFromUrl(URL url) {
        if(url == null) {
            throw new IllegalArgumentException("Input url cannot be null");
        }
        
        MessageDigest md = createMessageDigest();

        try (DigestInputStream dis = new DigestInputStream(url.openStream(), md)) {
            // Up to 8K per read
            byte[] ignoredBuffer = new byte[8 * 1024];

            while (dis.read(ignoredBuffer) &gt; 0) {
            }
        } catch (IOException e) {
            new RuntimeException(e);
        }
        
        return digestToString(md.digest());
    }
    
    private static MessageDigest createMessageDigest() {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            new RuntimeException("No Providers for algorithm MD5",e);
        }
        return md;
    }
    
    private static String digestToString(byte[] digest) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i &lt; digest.length; i++) {
            sb.append(Integer.toString((digest[i] &amp; 0xff) + 0x100, 16).substring(1));
        }
        return sb.toString();
    }
}
</code></pre>
<p>And the <code>FileHasherTest</code>:</p>
<pre class="lang-java prettyprint-override"><code>public class FileHasherTest {
    private static final String testResourcesFilePath = "src/test/resources";
    private static final String bsrFileName = "BSR_bsds500.zip";
    private static final String fastTextFileName = "fastText_data.zip";

    @Test
    public void hashesAreTheSame() {
        URL bsrURL = ClassLoader.getSystemResource(bsrFileName);

        String hashedBsrFile1 = FileHasher.makeHashFromUrl(bsrURL);
        String hashedBsrFile2 = FileHasher.makeHashFromUrl(bsrURL);

        assertThat(hashedBsrFile1).isEqualTo(hashedBsrFile2);
    }

    @Test
    public void hashesAreDifferent() {
        URL bsrURL = ClassLoader.getSystemResource(bsrFileName);
        URL fastTextUrl = ClassLoader.getSystemResource(fastTextFileName);

        String hashedBsrFile = FileHasher.makeHashFromUrl(bsrURL);
        String hashedFastTextFile = FileHasher.makeHashFromUrl(fastTextUrl);

        assertThat(hashedBsrFile).isNotEqualTo(hashedFastTextFile);
    }

    @Test
    public void hashIsNotNull() {
        URL bsrURL = ClassLoader.getSystemResource(bsrFileName);

        String hashedBsrFile = FileHasher.makeHashFromUrl(bsrURL);

        assertThat(hashedBsrFile).isNotNull();
    }

    @Test
    public void hashedFileThrowsIllegalArgumentExceptionWhenUrlIsNull() {
        IllegalArgumentException thrown = Assertions.assertThrows(IllegalArgumentException.class, () -&gt; {
            FileHasher.makeHashFromUrl(null);
        });

        assertThat(thrown.getMessage()).isEqualTo("Input url cannot be null");
    }
}

</code></pre>
    </div>