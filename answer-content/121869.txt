<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>prime_factors()</code></h2>

<p>The single greatest improvement to performance that you could make would be to remove the call to <code>is_prime()</code> altogether.  If all factors smaller than <code>i</code> have been removed from <code>n</code> already, then <code>i</code> could not possibly be composite.</p>

<p>The next improvement you could make would be to turn <code>prime_factors()</code> into a generator.  The function would no longer need to resize and recopy <code>prime_factor_list</code> whenever the list needs to grow beyond its estimated size.  Furthermore, the caller could start making use of initial results before the entire factorization is finished.</p>

<p>Using three lines (<code>i = 5</code>, <code>while n != 1</code>, and <code>i += 2</code>) to structure the loop — something that would be succinctly written in C as a <code>for (i = 5; n != 1; i += 2)</code> header — is un-Pythonic.  Such counting loops are usually better written using some kind of <code>range()</code>, <code>xrange()</code>, <code>enumerate()</code>, or something from <a href="https://docs.python.org/3/library/itertools.html" rel="noreferrer"><code>itertools</code></a>.  Here, <code>itertools.chain()</code> and <code>itertools.count()</code> would be appropriate.</p>

<p>Without changing the spirit of your algorithm, I would write:</p>

<pre><code>import itertools

def prime_factors(n):
    for i in itertools.chain([2], itertools.count(3, 2)):
        if n &lt;= 1:
            break
        while n % i == 0:
            n //= i
            yield i
</code></pre>

<h2><code>is_prime()</code></h2>

<p>As mentioned above, you don't need <code>is_prime()</code> at all, if your only goal is to implement <code>prime_factors()</code>.</p>

<p>However, if you wanted to implement <code>is_prime()</code> anyway, you could tighten it up a bit.  My main recommendation would be to avoid performing the <code>i * i</code> multiplication with each iteration.  You would probably be better off computing the \$\sqrt{n}\$ limit just once.</p>

<p>Then, as with the other function, you should express the loop more Pythonically using <code>range()</code> or <code>xrange()</code>.  Actually, you wouldn't need an explicit loop; you could use <a href="https://docs.python.org/3/library/functions.html#any" rel="noreferrer"><code>any()</code></a> instead.</p>

<p>So, if we stick to your algorithm in spirit, we could tighten up the implementation like this:</p>

<pre><code>def is_prime(n):
    if n &lt; 3 or n % 2 == 0:
        return n == 2
    else:
        return not any(n % i == 0 for i in range(3, int(n**0.5 + 2), 2))
</code></pre>
    </div>