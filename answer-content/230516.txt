<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The real issue with repeating yourself here is that you are iterating over your dataframe twice when you don't have to. Fortunately, the devs for <code>lxml</code> make the elements behave like lists, so you can create everything that you need to in one go, then just do <code>root.append(sub_element)</code> at the end like you would with a list.</p>

<p>Whenever you find yourself directly iterating over a pandas dataframe, that's usually a sign that it's not the correct data structure for the task. There are certainly exceptions, but I think using the <code>csv</code> module here might be a bit better of a fit. The reason being that you are technically iterating over the whole file with <code>pd.read_csv</code>, only to iterate again. <code>csv.reader</code> will allow you to iterate and process at the same time.</p>

<p>First, declare all of the trees you might need:</p>

<pre class="lang-py prettyprint-override"><code>import csv
from lxml import etree as et

# configure your elements here. lxml acts as a list,
# so make them their own trees until you are ready to merge
root = et.Element('SignallingSchemeData', xmlns='boo')
source = et.Element('Source')
view = et.Element('View')
</code></pre>

<p>Note that I haven't used the <code>SubElement</code> factory class yet. Since <code>Element</code> can be treated as a <code>list</code>, we can leave the linking of elements to <code>root</code> to the end of the script.</p>

<p>Moving forward:</p>

<pre class="lang-py prettyprint-override"><code># you want this inserted first, so SubElement is 
# perfectly fine here
timeframe = et.SubElement(root,'TimeFrame')
timeframe.attrib["fileUID"] = str(uuid.uuid4())
# you don't need the str function call here, it's already a string
timeframe.attrib["name"] = "timeframe 1"

# open your file here
with open('assets.csv') as fh:
    # the separator by default is ','
    # so no need to specify it
    reader = csv.DictReader(fh)
</code></pre>

<p>Now, <code>csv.DictReader</code> allows you to keep the <code>row[key]</code> paradigm because it will create an <code>OrderedDict</code> for each row:</p>

<pre class="lang-py prettyprint-override"><code>with open('assets.csv') as fh:
    reader = csv.DictReader(fh)
    row = next(reader)

row
OrderedDict([('ID', '30734'), ('CODE', 'S1'), ('ELR', 'LEC1'), ('TRID', '1100'), ('DIR', ''), ('MILEAGE', '008+0249 (9-1497)'), ('X', '518169.12'), ('Y', '185128.27'), ('Z', '37.52'), ('DESC', ''), ('IMAGE', 'Asset30734.jpg')])

row['ID']
'30734'

row['CODE']
'S1'
</code></pre>

<p>This requires minimal changes from your original script. You can iterate over the reader just like before except the <code>index</code> doesn't have to be there anymore:</p>

<pre class="lang-py prettyprint-override"><code>with open('assets.csv') as fh:
    reader = csv.DictReader(fh)

    for row in reader:
        # rest of loop

</code></pre>

<h1>Refactoring the loop</h1>

<h2>Equipment</h2>

<p>First, you can create a function to handle everything that's happening in the <code>if</code> block. This makes the core of the loop more readable, as well as logically separates functions of the code. Overall, the core logic is good. Your variable names are descriptive, if a little lengthy, with the only change really being formatting:</p>

<pre class="lang-py prettyprint-override"><code>def add_equipment(root, row):
    '''Add equipment elements and supporting child elements to root'''
    equipment = et.SubElement(root, 'Equipment')

    # I'm grouping blocks of code/variables that group together
    signal_equipment = et.SubElement(equipment, 'SignalEquipment')
    signal_equipment.attrib["fileUID"] = row["ID"]
    signal_equipment.attrib["name"] = row["DESC"]

    # The names have been changed to snake_case with lowercased
    # letters, as is the naming conventions of variables and functions
    # in python (but not classes)
    equipment = et.SubElement(root, 'Equipment')
    eq_support = et.SubElement(equipment, 'EquipmentSupportEquipment')
    eq_support.attrib["fileUID"] = str(uuid.uuid4())

    reference = et.SubElement(signal_equipment, 'EquipmentSupportReference').text = eq_support.attrib["fileUID"]
</code></pre>

<p>I don't need to return anything because <code>root</code> is being modified in-place by these operations.</p>

<p>Now, the first portion of your loop looks like this:</p>

<pre class="lang-py prettyprint-override"><code>with open('assets.csv') as fh:
    reader = csv.DictReader(fh)

    for row in reader:
        if row['CODE'] == 'S1':
            # now all of this code sits
            # in a function, and it's much easier to tell what's
            # going on
            add_equipment(root, row)
        else:
            equipment = et.SubElement(root, 'Equipment')
</code></pre>

<h2>View</h2>

<p>The <code>view</code> can be cleaned up in pretty much the same manner. Again, I don't really see anything egregious other than just some logical grouping and formatting. Your code and logical flow looks good, it's clear and easy to read</p>

<pre class="lang-py prettyprint-override"><code>def add_view(view, row):
    '''Add supporting child elements to view. Pass in row for value extraction'''
    view_list = et.SubElement(view, 'ViewCoordinatesList')

    view_coords = et.SubElement(view_list, 'ViewCoordinates')

    item_file_uid = et.SubElement(view_coords, 'ItemFileUID')
    item_file_uid.attrib['fileUID'] = row['ID']

    longitude = et.SubElement(view_coords, 'ViewCoordinatePair', name='longittude')
    longitude.attrib['Value'] = row['Y']

    latitude = et.SubElement(view_coords, 'ViewCoordinatePair', name='latitude')
    latitude.attrib['Value'] = row['X']

    height = et.SubElement(view_coords, 'ViewCoordinatePair', name='height')
    height.attrib['Value'] = row['Z']
</code></pre>

<p>You don't need the <code>str</code> to wrap <code>row['X']</code> anymore because <code>csv.DictReader</code> doesn't infer datatypes, everything is a string.</p>

<p>The loop as a whole now looks like this:</p>

<pre class="lang-py prettyprint-override"><code>with open('assets.csv') as fh:
    reader = csv.DictReader(fh)

    for row in reader:
        if row['CODE'] == 'S1':
            # refactor to a function here that
            # adds to root and takes row as an argument
            add_equipment(root, row)
        else:
            equipment = et.SubElement(root, 'Equipment')

        # add the rest of your loop in a function here to
        # deal with the view tree, again, take row as an argument
        add_view(view, row)
</code></pre>

<p>Now, your loop can just be read as a loop, and the logic inside the if blocks is abstracted into functions. </p>

<h1>Constructing your tree</h1>

<p>Now, to get everything in order, it's just a call to <code>root.append</code>:</p>

<pre class="lang-py prettyprint-override"><code>root.append(source)
root.append(view)
</code></pre>

<p>And everything is in order with one pass over the csv file. Your last line can remain perfectly intact:</p>

<pre class="lang-py prettyprint-override"><code>et.ElementTree(root).write('test.xml', pretty_print=True, xml_declaration=True, encoding='UTF-8', standalone=None)
</code></pre>

<h1>Timing Results</h1>

<h2>Original Script</h2>

<pre class="lang-py prettyprint-override"><code>python -m timeit 'import file'
10 loops, best of 3: 0.118 usec per loop
</code></pre>

<h2>Refactored Script</h2>

<pre class="lang-py prettyprint-override"><code>python -m timeit 'import file2'
10000000 loops, best of 3: 0.0809 usec per loop
</code></pre>
    </div>