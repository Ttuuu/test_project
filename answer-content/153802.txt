<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe this is the simplest way to do this in python:</p>

<pre><code>def urlify(in_string):
    return "%20".join(in_string.split())
</code></pre>

<p>Note: There is no need for the length arg if you use this shortcut</p>

<p>Logic: String.split() splits a string to an array of strings, using the provided argument as the delimiter (space by default). "%20".join(array) appends together all elements of an array with "%20" in between each of them.</p>

<p>However, this is obviously not the kind of answer that Gayle (author of CtCI) is looking for. She wants you to modify an array in place. You did that well in most of your code but there were times where you took some shortcuts (assignments to substrings of the list instead of individual 'array' elements). Something like this is a bit closer, as it treats the python list as if it was an array. I think the call to the join function is acceptable and should not be considered too high-level to use because every language has some way to turn a character array into a string (they are basically the same thing).</p>

<pre><code>def urlify(string,length):
    charArr = list(string)
    j = len(charArr)-1
    for i in range(length-1,-1,-1):
        if(charArr[i]!=' '):
            charArr[j] = charArr[i]
            j-=1
        else:
            charArr[j] = '0'
            charArr[j-1] = '2'
            charArr[j-2] = '%'
            j-=3
    return "".join(charArr)
</code></pre>

<p>Logic: Traverse backwards from the last letter (not space) of your 'array'. Whenever you hit a letter, move it to the last space in the array. If a space is found, there will now be enough space to add "%20." Do it one character at a time, and continue the loop until you reach index 0.</p>

<p>Time and Space Complexity: Both O(n).</p>
    </div>