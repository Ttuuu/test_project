<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>is_valid_move(state, tup):</code> Is the given move really valid?  If the tuple <code>(123,4.71)</code> is given, is it a valid move, invalid move, or a crash-the-program input?  It can only be valid if the tuple exists as a key in the <code>state</code>, so perhaps:</p>

<pre><code>return tup in state  and  state[tup] == BLANK
</code></pre>

<hr>

<p><code>tic_turn(state, tup)</code> and <code>tac_turn(state, tup)</code> share almost all the same code.  The only difference (other than the docstring) is the value assigned to <code>state[tup]</code>.  You could make one function, and pass in the player as an argument.</p>

<hr>

<p>Both <code>tic_turn</code> and <code>tac_turn</code> take the current state of the board, duplicate the state dictionary, modify the copy to produce a new state, and return that new state.  Why?  If you are coming from a functional programming paradigm, where mutable objects are eschewed, I suppose I could forgive you.  If you are planning on implementing an AI which has to search the game state many moves in the future to find the best move, I suppose I could forgive you.  But with what is written so far, it would be far, far simpler to simply modify the current <code>state</code>; then you could return something else ... like whether the move was a winning move or not.  Speaking of which ...</p>

<hr>

<p><code>is_won(state):</code>.  You are looping over all triplets of possible <code>WINNERS</code>, forming a <code>set</code> from the contents of the <code>state</code> for each tuple in the triplet, and returning <code>True</code> if there is only one unique value in the <code>set</code> ... as long as that value wasn't <code>BLANK</code>.  Doesn't that seem overly complicated?  I think so.  After <code>TIC</code> moves, we don't care about the possibility of a win by <code>TAC</code>.  After <code>TAC</code> moves, we don't care about the possibility of a win by <code>TIC</code>.  You could pass in the player that just made a move and look for a triplet composed of only that player, which is far simpler to express in code:</p>

<pre><code>def is_won(state, player):
    for winner in WINNERS:
        if all(state[tup] == player for tup in winner):
            return True
    return False
</code></pre>

<p>or</p>

<pre><code>def is_won(state, player):
    return any(all(state[tup] == player for tup in winner) for winner in WINNERS)
</code></pre>

<hr>

<p>What is this <code>human_input</code> verses <code>machine_input</code> all about?  The computer is not producing input for the game as if it were a player.  Okay, I understand that you are converting human-centric counting of row/column numbers from 1-3 into 0-2, but why are you using 0-2?  You create tuples for all board locations, and use these generated tuples through-out the code.  Why not use the "human friendly" tuples values as the keys, and ditch your "machine" versions, like:</p>

<pre><code>WINNERS = (
    ((1,1), (1,2), (1,3)),
       ...
    ((3,1), (2,2), (1,3)),
)
</code></pre>

<hr>

<p><code>state_generator(get_input):</code>  Oh, where do I start?  First, you've got duplicated code for <code>TIC</code> and for <code>TAC</code>.  If you had a <code>player</code> variable, you could start with <code>player = TIC</code>, and toggle between players with <code>player = 1 - player</code>.  Then, you could loop over the 9 possible turns, instead of over the 5 pairs of turns.  The ugly hard-coded 5th turn-pair special case of a "tie" goes away; if the loop exits after all 9 moves and no winner, then you have a tie.</p>

<p>Hard coded mysterious numbers like 4 and 5?  Where did they come from?  No comment in sight which explains it.  Slightly better is the above suggestion of looping over 9 turns.  But, again, why use <code>9</code>?  How about <code>len(INDICES)</code>?  Or better, loop while there are still valid moves someone can make.  Then you can experiment with 4x4 tic-tac-toe grids or other variants:</p>

<pre><code>player = TIC

while BLANK in state.values():
    # get input, update state, yield state, break if won
    player = 1 - player
else:
    print("Tie!")
</code></pre>

<p>Finally, using a generator construct, with input dependency injection, which blocks waiting for input from the console?  Yes, it works, but don't do this.  You could easily replace this with a function with a simple loop, and pass both <code>get_input</code> and <code>draw</code> as arguments to the function.</p>

<hr>

<p><code>get_int(...):</code> You import all sorts of values from <code>logic</code>, but you are checking for <code>data not in range(1,4)</code>.  Why is this hard-coded?  What if you wanted a 4x4 tic-tac-toe game?  You could define <code>VALID_ROWS</code> and <code>VALID_COLS</code> as <code>range(1,4)</code> in "logic" and import those values, and pass the valid range as an argument to <code>get_int</code>.</p>

<hr>

<p><code>get_input():</code>. Why does it have a default for <code>info</code>?   A value is always explicitly being given; the default just adds noise to the code.  Interestingly, the the user input is never checked to see if the <code>is_valid_move</code> test passes.  You can put an <code>X</code> on top of your opponent's <code>O</code>...</p>

<hr>

<p><code>draw(state):</code>  Whenever you see <code>tmp = []</code> followed by <code>for x in y:</code> wrapping a <code>tmp.append(...)</code>, you can almost always replace this with list comprehension, eliminating the costly <code>list.append()</code> operations:</p>

<pre><code>params = tuple(to_str[state[tup]] for tup in INDICES)
</code></pre>
    </div>