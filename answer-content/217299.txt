<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my opinion none of your solution is idiomatic and all use an useless comparaison.</p>

<p>Using for loop:</p>

<ul>
<li>Doesn't pre-allocate the vector</li>
<li>Use a comparaison that could be avoid</li>
</ul>

<p>Using functional style:</p>

<ul>
<li>Use a comparaison that could be avoid</li>
</ul>

<p>Using mem replace:</p>

<ul>
<li>Use a comparaison that could be avoid</li>
<li>Is unnecessary complex to just copy a vector</li>
</ul>

<p>Also, you should avoid take a <code>&amp;Vec&lt;T&gt;</code> as parameter, it's much better to take a <code>&amp;[T]</code>. See: <a href="https://stackoverflow.com/q/40006219/7076153">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec), or Box (&amp;Box) as a function argument?</a></p>

<p>I would use one of the following version:</p>

<pre class="lang-rust prettyprint-override"><code>#[derive(Clone)]
struct Pokemon {
}

fn a(pokemons: &amp;[Pokemon], i: usize, pokemon: Pokemon) -&gt; Vec&lt;Pokemon&gt; {
    let mut digimons = Vec::with_capacity(pokemons.len());

    digimons.extend_from_slice(&amp;pokemons[0..i]);
    digimons.push(pokemon);
    digimons.extend_from_slice(&amp;pokemons[i + 1..]);

    digimons
}

fn b(pokemons: &amp;[Pokemon], i: usize, pokemon: Pokemon) -&gt; Vec&lt;Pokemon&gt; {
    let mut digimons = pokemons.to_vec();
    digimons[i] = pokemon;

    digimons
}

fn c(pokemons: &amp;[Pokemon], i: usize, pokemon: Pokemon) -&gt; Vec&lt;Pokemon&gt; {
    pokemons[0..i]
        .iter()
        .cloned()
        .chain(std::iter::once(pokemon))
        .chain(pokemons[i + 1..].iter().cloned())
        .collect()
}
</code></pre>

<p>I don't really know witch version is better, <code>a()</code> and <code>c()</code> <strong>should</strong> be the same but sometime <code>chain()</code> is not optimized away. And <code>b()</code> is probably the most straightforward solution. I think I would choice <code>a()</code> in a production code.</p>

<p>However, looking at the <a href="https://godbolt.org/z/uLTZwW" rel="nofollow noreferrer">assembly</a>, we can see that <code>a()</code> and <code>c()</code> doesn't produce the same, and that <code>b()</code> is the simplest.</p>
    </div>