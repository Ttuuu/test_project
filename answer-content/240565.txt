<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't create more than one instance of Tk</h2>

<p>You should only ever create exactly one instance of <code>Tk. If you need to make more windows, use</code>Toplevel`.</p>

<h2>You aren't using inheritance properly</h2>

<p>This code is wrong:</p>

<pre><code>class MainApplication(tk.Frame):
    def __init__(self, master, *args, **kwargs):
        tk.Frame.__init__(self, master, *args, **kwargs)
        ...
        # Creating main page widgets
        frame = tk.Frame(root, bg="#34495e")
        ...
        lb = tk.Label(frame, ...)
</code></pre>

<p>First, you inherit from <code>tk.Frame</code>. This is good, in that when done properly you can treat <code>MainApplication</code> as if it were a standalone widget. However, the first thing you do after creating this frame is to create <em>another</em> frame as a child of root. That makes no sense since the object is itself already a frame. It completely negates any advantage of inheriting from <code>tk.Frame</code>.</p>

<p>The proper way to do this is to <em>not</em> create the "main page widgets" frame. Just remove that, and then put all widgets created by <code>MainApplication</code> inside <code>self</code>. The basic structure should look like this:</p>

<pre><code>class MainApplication(tk.Frame):
    def __init__(self, master, *args, **kwargs):
        tk.Frame.__init__(self, master, *args, **kwargs):

        lb = tk.Label(self, ...)
        ...
            button_main = tk.Button(self, ...)
        ...
        button = tk.Button(self, ...)
        ...

if __name__ == "__main__":
    root = tk.Tk()
    app = MainApplication(root)
    # app is a frame, so add it to root. Since it's the 
    # only widget in root, pack is the simplest method 
    # to add it to the root window
    app.pack(fill="both", expand=True)
</code></pre>

<p>With that, everything in <code>MainApplication</code> is encapsulated inside the <code>MainApplication</code> frame, Nothing is leaking out into other widgets.</p>

<h2>Don't inherit from Frame if it's not a frame</h2>

<p>Your <code>ChampionWindow</code> inherits from <code>Frame</code>, but I can't see any reason to do so based on the way you coded it. You never use an instance of <code>ChampionsWindow</code> anywhere so there's no point in inheriting from anything.</p>

<p>Since the only purpose of <code>ChampionWindow</code> appears to be to hold a static method which creates a new window, I recommend inheriting from <code>Toplevel</code> and moving all code from the static method into a normal method called from <code>__init__</code>. </p>

<h2>Don't remove control from the user</h2>

<p>This is more of a personal preference, but I don't see any reason to remove the user's ability to resize the window with <code>root.resizable(False, False)</code>. Usually, when I see that, it's a sign you didn't take the time to make your UI responsive. That seems to be the case here - the UI doesn't respond properly to resizing. Instead of just removing that ability, I recommend doing a few things to make the UI respond properly to resizing.  </p>
    </div>