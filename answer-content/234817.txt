<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because this question is tagged with <a href="/questions/tagged/object-oriented" class="post-tag" title="show questions tagged 'object-oriented'" rel="tag">object-oriented</a>, I will focus on some improvements based on the oop-design.</p>

<p>Currently your code uses objects, but this does not mean that it is object-oriented.</p>

<p>When we take a look to your code all methods are global. With objects we can couple the methods to an object. For example:<br>
The methods <code>addBookToLibrary</code> and <code>removeBook</code> have a strong relationship to <code>myLibary</code> and <code>toggleStatus</code> to <code>Book</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function Book(title, author, pages, status) {
  this.title = title;
  this.author = author;
  this.pages = pages;
  this.status = status;
}

Book.prototype.toggleStatus = function() {
  if (this.status === 'read') {
    this.status = 'unread';
  } else {
    this.status = 'read';
  }
}

const zhivago = new Book('Doctor Zhivago', 'Boris Pasternak', '592', 'unread');

console.log(zhivago.status);

zhivago.toggleStatus();

console.log(zhivago.status);</code></pre>
</div>
</div>


<p>Or the ES6-Version below which uses <code>class</code> to abstract the prototype change.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class Book {
  constructor(title, author, pages, status) {
    this.title = title;
    this.author = author;
    this.pages = pages;
    this.status = status;
  }

  toggleStatus() {
    if (this.status === 'read') {
      this.status = 'unread';
    } else {
      this.status = 'read';
    }
  }
}

const zhivago = new Book('Doctor Zhivago', 'Boris Pasternak', '592', 'unread');

console.log(zhivago.status);

zhivago.toggleStatus();

console.log(zhivago.status);</code></pre>
</div>
</div>


<p>Currently the program heavy rely on <code>string</code>s. Actually the <code>status</code> is an abstraction in <code>Book</code> and could be represent with an own datatype with to concrete types <code>Unread</code> and <code>Read</code>. The following example just shows how <a href="https://en.wikipedia.org/wiki/Object_composition" rel="nofollow noreferrer">composition</a> could work and is not a recommendation:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class Book {
  constructor(title, author, pages, status) {
    this.title = title;
    this.author = author;
    this.pages = pages;
    this.status = status;
  }

  toggleStatus() {
    this.status = this.status.toggle();
  }
}

class Unread {
  constructor() {
    this.status = 'unread';
  }

  toggle() {
    return new Read()
  }
}

class Read {
  constructor() {
    this.status = 'read';
  }

  toggle() {
    return new Unread()
  }
}

const zhivago = new Book('Doctor Zhivago', 'Boris Pasternak', '592', new Unread());
console.log(zhivago.status)
zhivago.toggleStatus();
console.log(zhivago.status)</code></pre>
</div>
</div>


<h2>Possible Object Structure</h2>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class Library {
  constructor() {
    this.books = [];
  }

  add(book) {
    this.books.push(book);
  }

  removeBookWithTitle(title) {
    this.books = this.books.filter(book =&gt; book.hasNot(title))
  }

  get(index) {
    return this.books[index];
  }

  numberOfBooks() {
    return this.books.length;
  }
}

class Book {
  constructor(title, author, pages, status) {
    this.title = title;
    this.author = author;
    this.pages = pages;
    this.status = status;
  }

  toggleStatus() {
    this.status = this.status.toggle();
  }
  
  has(title) {
    return this.title === title;
  }

  hasNot(title) {
    return !this.has(title);
  }
  
}

class Unread {
  constructor() {
    this.value = 'unread';
  }

  toggle() {
    return new Read()
  }
}

class Read {
  constructor() {
    this.value = 'read';
  }

  toggle() {
    return new Unread()
  }
}

const myLibrary = new Library();
const unread = new Unread();

myLibrary.add(new Book('title', 'author', 123, unread));
myLibrary.add(new Book('other title', 'other author', 321, unread));

myLibrary.removeBookWithTitle('title')

const aBook = myLibrary.get(0)
aBook.toggleStatus();

console.log(JSON.stringify(myLibrary, null, 2))</code></pre>
</div>
</div>


<h1>MVC</h1>

<p><a href="https://codereview.stackexchange.com/users/214636/k-h">@K.H.</a> mentions in his answer already that your Model is tightly coupled to the HTML. The <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="nofollow noreferrer">Model-View-Controller</a> is one of many patterns to logic is decoupled from how it gets represent.</p>
    </div>