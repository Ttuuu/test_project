<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good going on your first game. I completely agree with most of the points made by others. Here are a few more nitpicks. This answer is a bit long-winded, but take it as a complement. :-)</p>

<h2>Unpack the Coordinates</h2>

<p>This is what lines 195-197 currently look like:</p>

<pre><code>        for item in snake.get_body():
            pygame.draw.rect(window, snake.color, [item[0], item[1], block_size,
                                                   block_size])
</code></pre>

<p>Instead of relying on indexing, we can directly unpack <code>item</code> into its respective xy-coordinates. This makes for good brevity and readability.</p>

<pre><code>        for x, y in snake.get_body():
            pygame.draw.rect(window, snake.color, [x, y, block_size, block_size])
</code></pre>

<p>The same can be done for lines 208-214.</p>

<pre><code># Before:
        food_pos = food.spawn()
        collision_ = collision(snake, *food_pos)   # ðŸ¤”
        if collision_ == 1:
            score += 1
            food.update(False)
        pygame.draw.rect(window, food.color, [food_pos[0], food_pos[1],  # ðŸ¤”
                                              block_size, block_size])


# After:
        food_x, food_y = food.spawn()
        # the rest is left as an exercise for the reader
</code></pre>

<h2>On <code>wall_collision(Snake)</code></h2>

<p>Here's what the <code>wall_collision</code> function currently looks like (lines 137-141):</p>

<pre><code>def wall_collision(s: Snake) -&gt; bool:
    if (s.head[0] &lt; 0) or (s.head[0] &gt; bg_width-block_size) or (s.head[1] &lt; 0)\
            or (s.head[1] &gt; bg_height-block_size):
        return True
    return False
</code></pre>

<ol>
<li>Being a predicate (i.e. a function which returns a boolean), the function can be better named. You can always find a way to name a predicate such that it is prefixed with <code>is</code> or <code>has</code>. Instead of <code>wall_collision</code>, I'd go with <code>is_colliding_with_wall</code> or <code>collides_with_wall</code> to communicate the intention better.</li>
<li>It could be simplified. <a href="https://codereview.stackexchange.com/a/221185/197524">vurmux's answer</a> suggests a few possible ways. However, there exists an easier (and more readable) way of writing it in one line:</li>
</ol>

<pre><code>    return not ((0 &lt; s.head[0] &lt; bg_width-block_size) and (0 &lt; s.head[1] &lt; bg_height-block_size))
</code></pre>

<p><sup>I intentionally added the extraneous parentheses to group comparisons.</sup></p>

<p>This is made possible by Python's <a href="https://stackoverflow.com/questions/26502775/pycharm-simplify-chained-comparison/">comparison "chaining"</a> along with <a href="https://brilliant.org/wiki/de-morgans-laws/" rel="noreferrer">De Morgan's Laws</a>. For fun, you can try to prove that the two snippets are equivalent.</p>

<h2>Points and Coordinates</h2>

<p>It took a while for me to figure out what the following line meant:</p>

<pre><code>self.head = [int(10*block_size), int(5*block_size)]
</code></pre>

<p>I'm <em>guessing</em> this is a point/coordinate? Looks like it.</p>

<p>Lists are so prevalent in Python, that they can hold a multitude of meanings. What's more, they are <em>variable-length</em> constructs, which communicates something else: you might be <em>changing</em> the length of the object in the future. This might mean appending, erasing, or inserting into the list.</p>

<p><code>self.body</code> uses a list appropriately, since it will be appended to and popped from in various places. On the other hand, not once does <code>self.head</code> use <code>list.append</code>, <code>list.pop</code>, or <code>list.insert</code> and this raises a question: does it need to be a list at all? It is better made a tuple, which is a fixed-length construct and immediately communicates to the reader that we won't be modifying the length of <code>self.head</code>.</p>

<p>I commend the usage of tuples in <code>Food.spawn()</code> for this very reason. Still, tuples can carry a multitude of different meanings. We can do better by using <code>collections.namedtuple</code> and creating a record-type <code>Point</code> for the purpose of representing xy-coordinates. This can greatly reduce ambiguity and improve readability.</p>

<pre><code>from collections import namedtuple
Point = namedtuple('Point', ['x', 'y'])  # we now have a Point type  

class Snake:
    ...
    def __init__(self, color: Tuple[int, int, int]) -&gt; None:
        self.head = Point(10*block_size, 5*block_size)  # foolproof: self.head is a point      
        self.body = [self.head, Point(...)]
    ...
    def add_to_tail(self) -&gt; None:
        self.body.append(Point(self.body[-1][0], self.body[-1][1]))
        self.size += 1
</code></pre>

<p>The only pain with namedtuple is that we can't explicitly do assignments, which can be solved by making a new object:</p>

<pre><code>def move(self) -&gt; None:
    if self.direction == right:

# Before:
        self.head.x += block_size   # AttributeError: can't set attribute   

# After:
        self.head = Point(self.head.x + block_size, self.head.y)   # preferable
# or:
        self.head = self.head._replace(x=self.head.x + block_size) # looks hacky 
</code></pre>

<p>You can also use <code>Point</code> as a replacement for <code>Food.position</code>, which isn't being used.</p>

<pre><code>class Food:
    ...
    position: Point

    def __init__(self, color: Tuple[int, int, int]) -&gt; None:
        self.position = Point(x=random.randint(0, bg_width//block_size - 1)*block_size
                              y=random.randint(0, bg_width//block_size - 1)*block_size)

    def spawn(self) -&gt; Point:  # more explicit
        if self.state:
            return self.position
        else:
            self.state = True
            self.position = Point(x=random.randint(0, bg_width//block_size - 1)*block_size
                                  y=random.randint(0, bg_width//block_size - 1)*block_size)    
            return self.position
</code></pre>

<p>I think this is especially useful when used together with <a href="https://codereview.stackexchange.com/a/221219/197524">Cordes's suggestion in his answer</a>, in his <strong>Separate game logic from screen rendering details</strong> section.</p>

<p>Another good thing about namedtuple is that we can still do unpacking.</p>

<pre><code>        for x, y in snake.get_body():    # still works
            pygame.draw.rect(window, snake.color, [x, y, block_size, block_size])
</code></pre>

<h2>Refactor Random-Point Generation</h2>

<p>There are two places where the coordinates of the food are updated with random integers, generated via a special formula. Based on the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">DRY</a> principle, I suggest refactoring the generation of random points to a single function <code>get_random_point()</code>.</p>

<pre><code>def get_random_point():
    return Point(x=random.randint(0, bg_width//block_size - 1)*block_size
                 y=random.randint(0, bg_width//block_size - 1)*block_size)    
</code></pre>

<p>Then you can conveniently do <code>self.position = get_random_point()</code> without having to painfully, repetitively type out the above.</p>

<h2>Refactoring <code>Food</code></h2>

<p>Currently, <code>Food</code> updates its position only when <code>spawn()</code> is called and if <code>state</code> is false. Seems a bit long-winded. Even the name <code>update</code> seems to be untruthful as it makes a <em>delayed</em> update.</p>

<p>I suggest updating the position immediately when <code>update()</code> is called.</p>

<pre><code>    def spawn(self) -&gt; Tuple[int, int]:
        return self.position

    def update(self):
        self.position = get_random_point()
</code></pre>

<p>Note that <code>Food.state</code> and <code>Food.spawn(self)</code> are redundant now and can be removed. That should be three cheers (less lines of code, yes?).</p>

<h2>On <code>collision(Snake, int, int)</code></h2>

<p>Logically, this section should come first, but I saved it for the last.</p>

<ol>
<li>The name <code>collision</code> is ambiguous. Can we improve it? Sure! Note that <em>logically speaking</em>, the function returns a boolean, so it's a predicate. Can we prefix it with <code>is</code>? Certainly! I think <code>is_snake_on_food</code> isn't too bad. You could also go with <code>is_food_reached</code> or <code>is_snake_colliding_with_food</code>.</li>
<li><p>Having changed how positions are stored in the <code>Food</code> class, we can pass in the food's position directly. Thus the signature of the function can be reduced to:</p>

<pre><code>def is_snake_on_food(snake: Snake, food_target: Point):
</code></pre>

<p>This also saves us from needing unpack <code>*food_pos</code> in line 209.</p>

<pre><code># Before:
collision_ = collision(snake, *food_pos)

# After:
collision_ = is_snake_on_food(snake, food_pos)
</code></pre></li>
<li><p>There is no need to create <code>pygame.Rect</code> just to compare <code>snake_.head</code> and <code>food_target</code>. Currently, lines 128-131 are</p>

<pre><code>    snake_rect = pygame.Rect(*snake_.head, block_size, block_size)
    food_rect = pygame.Rect(food_target_x, food_target_y, block_size,
                            block_size)
    if snake_rect == food_rect:
</code></pre>

<p>Instead, the coordinates can be compared directly:</p>

<pre><code>    if (*snake_.head,) == (food_target_x, food_target_y):
</code></pre>

<p>Having passed in <code>food_target</code> as a <code>Point</code>, we can simplify this to</p>

<pre><code>    if snake_.head == food_target:
</code></pre></li>
</ol>

<p>Hope this helps!</p>
    </div>