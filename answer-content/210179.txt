<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Mandatory stability note: the sequence</p>

<pre><code>    if(array[left_index] &lt; array[right_index]){
        temp_holder[temp_index++] = array[left_index++];
    } else {
        temp_holder[temp_index++] = array[right_index++];
    }
</code></pre>

<p>causes loss of stability (equal elements are merged in the wrong order).</p></li>
<li><p>The code still does unnecessary copying (from <code>tmp</code> back to <code>array</code>). It is unnecessary because it can be avoided. Allocate a temporary array once, then</p>

<pre><code>    merge_sort subrange 0 of arr into corresponding subrange of tmp
    merge_sort subrange 1 of arr into corresponding subrange of tmp
    merge subranges from tmp to arr
</code></pre></li>
<li><p>The insertion sort implementation is suboptimal. Testing two conditions in</p>

<pre><code>    while(before &gt;= left &amp;&amp; array[before] &gt; temp)
</code></pre>

<p>can be avoided. Take a look at the Alex Stepanov's <a href="https://github.com/psoberoi/stepanov-conversations-course/blob/master/languages/java/Quicksort64.java" rel="nofollow noreferrer">technique</a> (he is talking about quicksort, but the first 4 methods, which you are are only interested in, are equally applicable to your case).</p></li>
<li><p>The algorithms of this kind generally look better at the semi-open ranges. Try to rewrite the code with the assumption that <code>highBound</code> <em>does not</em> belong to the range.</p></li>
</ul>
    </div>