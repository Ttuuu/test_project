<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use <code>Control.Lens</code> for code this stateful. (<code>Control.Lens.TH</code> must be used to define <code>Machine</code>.) May as well leave out type signatures this homogenous. <code>Control.Monad.Loops</code> often helps against explicit monadic recursion.</p>

<pre><code>opReadAt target = uses mState $ (`index` target)
opReadNext = mPos &lt;&lt;+= 1 &gt;&gt;= opReadAt
opWrite target what = mState %= update target what

opBin op = do
    a &lt;- opReadNext &gt;&gt;= opReadAt
    b &lt;- opReadNext &gt;&gt;= opReadAt
    target &lt;- opReadNext
    opWrite target $ op a b 

opcode 1 = opBin (+)
opcode 2 = opBin (*)
opcode 99 = isDone .= True

runCode = (opReadNext &gt;&gt;= opCode) `untilM_` use isDone

evalWith :: Int -&gt; Int -&gt; Machine -&gt; Int
evalWith noun verb = evalState $ do
    opWrite 1 noun
    opWrite 2 verb
    runCode
    opReadAt 0
</code></pre>
    </div>