<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>async</code> <code>await</code> and <code>promise</code></h1>
<p>One way to do this is to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" rel="nofollow noreferrer">use promises</a> and an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction" rel="nofollow noreferrer">async function</a>.</p>
<p><code>async</code> functions stop execution each time they encounter an <code>await</code> token and "await" the promise (if any) to resolve before continuing. <code>async</code> functions are also promises themselves so you can await an async function as well.</p>
<h1>Example</h1>
<p>The example uses a timer event to resolve a promise. The function <code>threeStep</code> uses the <code>wait</code> function to pause execution for the set time.</p>
<p>To show how you can also chain the async function It repeats the 3 steps after the first lot are done by using the async function's returned <code>promise</code> to start the second three steps.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const wait = time =&gt; new Promise(tick =&gt; setTimeout(tick, time));
async function threeStep(time) {
    log(`Step A and wait ${time}ms`);
    await wait(time);
    log(`Step B and wait ${time}ms`);
    await wait(time);
    log(`Step C all done`);      
}

threeStep(2000)
   .then(() =&gt; {
      log("Do it again");
      threeStep(1000);  
   });

// a very hacky log function, don't try this at home. :P
function log(data) { logText.innerHTML += data + "&lt;br&gt;" }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="logText"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>