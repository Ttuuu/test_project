<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with @tomdemuyt's overall approach but would suggest a few additional improvements.</p>

<pre><code>$(function(){   
    var nodes = [
        $('.node'),
        $('.node2'),
        $('.node3'),
        $('.node4')
    ];

    var animations = [ 
        { 
            properties: {top: '425px'}, 
            options: { duration: 1800, easing : 'linear'} 
        },
        { 
            properties: {marginLeft: '-284px'}, 
            options: { duration: 2500, easing : 'linear'} 
        },
        { 
            properties: { top: '157px'}, 
            options: { duration: 1800, easing : 'linear'} 
        },
        { 
            properties: {marginLeft: '264px'}, 
            options: { duration: 2500, easing : 'linear'} 
        }
    ];

    function animateNode( $node ){
        // call each animation in the array for the given node
        animations.forEach( function (animation){
            $node.animate( animation.properties , animation.options ); 
        });

        // once all animations complete, call this function again
        $node.queue(function(next){
            animateNode($node); 
            next();
        });
    }

    function animateNodes(){
        // call the animateNode function for every node 
        nodes.forEach(function($node){
           animateNode($node);
        });
    }

    // do the initial animation for each node, incrementing the initial delay by 1.5s each node
    for(var i = 0; i&lt;nodes.length; i++){
        nodes[i].delay(1500 * (i + 1))
            .animate({top: '157px'}, { duration: 1000, easing : 'linear'})
            .animate({marginLeft: '264px'}, { duration: 1500, easing : 'linear'});
    }

    // initialize the looping animation
    animateNodes();
});
</code></pre>

<ul>
<li>Store your nodes in an array to make the solution more generic as well as reduce repeated code.  This has the added benefit of caching the jquery objects.</li>
<li>Make your animations an array of objects instead of an array of arrays.  This eliminates the need for PROPERTIES and OPTIONS.</li>
<li>You have an issue that you are calling <code>animateNode</code> every 2 seconds.  However, the duration of your animation created by that function is considerably longer than 2 seconds.  As a result, your animations are going to continue to build up.  The memory usage will continue to grow for as long as the page is running.  Open your console and run this fiddle to see the queue length increase  <a href="http://jsfiddle.net/NF6LU/8/" rel="nofollow">http://jsfiddle.net/NF6LU/8/</a> .  Instead, I have eliminated <code>setInterval</code> all together and used Queue to call <code>animateNode</code> once the previous set of animations completes.  Alternatively, you could call it as the callback of the final animation.</li>
<li>You can eliminate <code>queue: true</code> as that is the default.</li>
<li>Include all of your code in the ready function to avoid polluting the global space.  This also ensure the nodes exist before using them.  Your fiddle only worked due to the fact that it was set to run the code onload.</li>
</ul>

<p><a href="http://jsfiddle.net/NF6LU/10/" rel="nofollow">http://jsfiddle.net/NF6LU/10/</a></p>
    </div>