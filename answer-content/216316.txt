<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>IE will die, don't die with it.</h2>

<p>Supporting old browsers like IE11 and IE9 via <a href="https://jquery.com/" rel="nofollow noreferrer">jQuery</a> puts you as a front-end developer at a serious disadvantage. </p>

<p>Javascript as a language is developing rapidly and by not keeping up you are losing important skills that keep you relevant in the workforce.</p>

<p>By the looks of your code you are unaware of ES6+ features such as </p>

<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" rel="nofollow noreferrer">Object.assign</a>,  </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Syntax" rel="nofollow noreferrer">object property syntax</a> (property shorthand), </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow functions</a>, </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default parameters</a>, </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring assignment</a>,</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export" rel="nofollow noreferrer">export</a>, </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" rel="nofollow noreferrer">import</a>, </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer">for...of</a>,</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread syntax</a>,</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" rel="nofollow noreferrer">Object.entries</a>.</li>
</ol>

<p>all that lets you simplify your code and code management.</p>

<p>The following example use all the above listed ES6+ features</p>

<h2>Modern JS version of your code</h2>

<pre><code>// This is a module in a file /modules/redirect.js
const createTag = (name, props = {}) =&gt; Object.assign(document.createElement(name), props);
export default function redirect(options) {
    options = {queries: {}, ...options};
    const hidden = true;
    const form = createTag("form", {
       hidden, 
       action: options.url,
       target: options.new_tab ? "_blank" : "_self"
    });
    for (const [name, value] of Object.entries(options.queries)) {
        form.appendChild(createTag("input", {hidden, name, value}));
    }
    document.body.appendChild(form);
    form.submit();
}
</code></pre>

<p>To use the code you import it in the scope you need it</p>

<pre><code>import redirect from "/modules/redirect.js"
redirect(options);
</code></pre>

<p>For Legacy support use the following, rather than the above</p>

<pre><code>// requires Babel to run in IE
const createTag = (name, props = {}) =&gt; Object.assign(document.createElement(name),props);
function redirect(options) {
    options = {queries: {}, ...options};
    const hidden = true;
    const form = createTag("form", {
       hidden, 
       action: options.url,
       target: options.new_tab ? "_blank" : "_self"
    });
    for (const [name, value] of Object.entries(options.queries)) {
        form.appendChild(createTag("input", {hidden, name, value}));
    }
    document.body.appendChild(form);
    form.submit();
}
</code></pre>

<h2>What to do about legacy</h2>

<p>Use a transpiler, such as <a href="https://babeljs.io" rel="nofollow noreferrer">babel.js</a>, latest <a href="https://babeljs.io/docs/en/v7-migration" rel="nofollow noreferrer">Babel 7</a> for  legacy ES6+ support.</p>

<p>For DOM support IE9, IE11 are fairly up to date and you can use a sub set of the DOM API's to cover most of your needs. If you have specific API needs that are not supported in legacy browsers then consider targeted shims to cover the incompatibility.</p>

<h2>Setting DOM Attribute</h2>

<p>When setting attributes of DOM elements you only need to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute" rel="nofollow noreferrer"><code>setAttribute</code></a> if an attribute is not defined as part of the Javascript DOM interface for a particular element.</p>

<p>It is also important to know that <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute" rel="nofollow noreferrer"><code>setAttribute</code></a> converts the value to a string before assigning or adding it to the element.</p>

<p>There are also other caveats regarding <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute" rel="nofollow noreferrer"><code>setAttribute</code></a> see the link for more info.</p>

<p>It is recommended that you set defined attributes directly. eg <code>HTMLInputElement.value = newValue</code></p>

<p>You can get a list of defined properties with a simple function, or go to a reference like <a href="https://developer.mozilla.org/en-US/" rel="nofollow noreferrer">MDN</a>. </p>

<p>The next snippet lists properties that can be set directly for the elements <code>form</code> and <code>input</code> It is designed to also show better legacy support via ES6+ and  <a href="https://babeljs.io" rel="nofollow noreferrer">babel.js</a>. </p>

<p>Only tested on  Edge, FF, and Chrome. Should support IE8 and above. For support down to IE4 you will need a shim for <code>document.createElement</code>. Also note that I have used CSS3 and HTML5 so on older browsers the look will be different.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// define legacy support. With babel this should work all the way back to IE8
// You will need a shim for document.createElement for support below IE8
const text = line.textContent ? "textContent" : "innerText";
const addEvent = (el, name, cb) =&gt; {
    (el.attachEvent &amp;&amp; el.attachEvent("on" + name, cb)) || el.addEventListener(name, cb);
}
const $ = (name, props = {}) =&gt; Object.assign(document.createElement(name), props);
const {d10b13a2-8965-459f-9dbc-ba613551ffab}($("div"), $("span", {[text]: named}), $("span", {[text]: type})));
        }
      }
    }
  }
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {font-family: monospace; background:#000; color:#6F6}
button {border: 2px solid #6F6; background: #000; color:#0F0; cursor: pointer}
button:hover {color: #000; background: #0F0}
   </code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>Click tag:&lt;span id="buttons"&gt;
  &lt;button value="form"&gt;Form&lt;/button&gt;
  &lt;button value="input"&gt;Input&lt;/button&gt;
&lt;/span&gt;
&lt;h3 id="elementName"&gt;&lt;/h3&gt;
&lt;div&gt;Attributes that can be set directly have types String, Boolean, or Number&lt;br&gt;
List excludes functions, objects, and constants&lt;/div&gt;
&lt;div id="line"&gt;
===============================================&lt;/div&gt;

&lt;code id="info"&gt;&lt;/code&gt;</code></pre>
</div>
</div>


<p><sup><sub><strong>Note</strong> that I come from a sector that has never needed to support legacy browsers, my views on subject are thus somewhat biased.</sub></sup> </p>
    </div>