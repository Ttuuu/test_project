<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick comments. This reminds me of over  10 years ago when I was thinking of a solver for Soduku in VB6 (which I never finished writing because I always have trouble with interfaces/user forms)</p>

<h2>Class Node</h2>

<p>Why not use a <code>Collection</code> instead of arrays for <code>numbers</code> and <code>passed</code>. This will clean up (i.e. remove) the <code>ReDim</code> work. I think the refactoring that you would end up doing by this approach will make the <code>Node</code> class simpler and cleaner. Oh, and you can then use `For Each'.</p>

<p>You could also have property for <code>Solved</code> so that you return a single value instead of doing collection processing when you have actually solved this node.</p>

<h2>Class Equation</h2>

<p>You use <code>Public</code> Members instead of <code>Properties Set</code> and <code>Get</code>. I remember somewhere in all my OOP reading that this is a bad thing (tm) to do. Probably because if you want to tweak or do some data validation you can't. </p>

<p>You could check to see if a <code>Node</code> has been solved. This will enable shortcutting to solving the second <code>Node</code>. This means that you can start using Boolean logic instead of counting each time you want to check something. Probably not much difference in performance, but the programming logic is a lot clearer. Which, in turn means this would be easier to maintain. </p>

<p>Why not pass the nodes in with the initial <code>Init</code>? Then nodes are not going to change address or location. This, coupled with a <code>Property Get</code> means that you are less likely to overwrite a <code>Node</code> with a new location.</p>

<p>Make your life a little easier and add a public <code>Evaluate</code> function that takes three parameters. It can return a Boolean, either the inputs evaluate to the answer, or they don't. This would be used primarily by the Brute Force solver.</p>

<p>Under the subroutine <code>Calculate</code> to declare <code>n1</code>, <code>n2</code> and <code>n3</code>. You even assign them a value. But then don't use that value.</p>

<h2>Class Solver</h2>

<p>As noted under <code>Equation</code>, passing the relevant nodes in as part of the <code>Equation.Init</code> would be cleaner.</p>

<p>Using <code>Collection</code>s under the <code>Nodes</code> would make the brute force approach cleaner. </p>

<p>Brute force could be made a little easier by have the other <code>Evaluate</code> function in the <code>Equation</code> class.</p>

<p>I am not sure of your logic here. While a selection of 3 numbers may solve the equation, there may be multiple triplets. I haven't walked myself through the logic in detail here (I did say quick comments) but intuitively, I think this may shortcut the checking and may produce some wrong results. I don't see a way to walk back a series of calculations if there is found to be a conflicting set.</p>

<h2>General</h2>

<p>I don't see any validation of inputs - what if a range of 8 cells are passed?
I have already mentioned the use of <code>Public</code> members instead of <code>Property</code>s
Some of your <code>Sub</code>s can be <code>Function</code>s and form a double duty. For example, the subroutine <code>Calculate</code> could return a Boolean that represents <code>Dirty</code>. This approach will allow you to get rid of a "global" variable. Thinking this way allows you to chain your code logic into a logical process. A good and visible process should help with code readability.</p>
    </div>