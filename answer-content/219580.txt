<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Simplify your RequestService by inverting the if-statement in DoRequest():</p>

<pre><code>public async Task&lt;TResult&gt; DoRequest&lt;TResult&gt;(IRestRequest request)
{
    if (!_connectivity.IsConnected)
    {
        throw new NoConnectionException();
    }

    var response = await _restClient.ExecuteTaskAsync&lt;TResult&gt;(request);

    // If Ok, return ...
    if (response.StatusCode == HttpStatusCode.OK)
    {
        return response.Data;
    }

    // ... so this block is not nested
    if (response.StatusCode == HttpStatusCode.Unauthorized)
    {
        throw new UnauthorizedException(response.Content);
    }
    else if (response.StatusCode == HttpStatusCode.BadRequest)
    {
        throw new BadRequestException(response.Content);
    }
    else if (response.StatusCode == HttpStatusCode.NotFound)
    {
        throw new NotFoundException(response.Content);
    }
    else
    {
        throw new HttpRequestException(response.Content);
    }
}
</code></pre>

<p>Since you always compare the status code, make sure to use a switch statement. This results in much shorter and more readable code.</p>

<pre><code>public async Task&lt;TResult&gt; DoRequest&lt;TResult&gt;(IRestRequest request)
{
    if (!_connectivity.IsConnected)
    {
        throw new NoConnectionException();
    }

    var response = await _restClient.ExecuteTaskAsync&lt;TResult&gt;(request);

    switch (response.StatusCode)
    {
        case HttpStatusCode.OK:
            return response.Data;
        case HttpStatusCode.Unauthorized:
            throw new UnauthorizedException(response.Content);
        case HttpStatusCode.BadRequest:
            throw new BadRequestException(response.Content);
        case HttpStatusCode.NotFound:
            throw new NotFoundException(response.Content);
        default:
            throw new HttpRequestException(response.Content);
    }
}
</code></pre>
    </div>