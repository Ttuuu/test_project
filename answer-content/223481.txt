<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For an interview setting, I think the code presented to be a very decent initial solution but for the lack of comments:<br>
it is easy to read (and consequently should be easy to maintain).  </p>

<p>It invites a question if there is any (semi-obvious) way to reduce machine resources used.</p>

<p>(<em><a href="https://codereview.stackexchange.com/a/223523/93149">AJNeufeld</a> is entirely right about <code>StringBuilder</code> vs <code>StringBuffer</code> - leaving it as is as a reminder not to present code in an answer without consulting an IDE.</em>)<br>
Only then I'd be inclined to suggest passing a <code>StringBuffer</code> as Java does almost all <code>String</code> manipulation using one using <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/StringBuilder.html#setCharAt(int,char)" rel="nofollow noreferrer"><code>setCharAt(int, char)</code></a> - this also removes most of the <em>code replication</em> (expression, really) I'd pick as a nit.</p>

<pre><code>    if (pattern.charAt(i) == '?') {
        // collect solutions for same problem with one '?' less
        StringBuffer atEntry = new StringBuffer(pattern);
        pattern.setCharAt(i, '0');
        addCombinations(pattern, i + 1, output);
        atEntry.setCharAt(i, '1');
        addCombinations(atEntry, i + 1, output);
        return;
    }
}
output.add(pattern.toString());
</code></pre>

<p>But this not only calls <code>addCombinations()</code> for strings without wild cards, it instantiates as many <code>StringBuffer</code>s needlessly as there are combinations. With a slightly modified interface:</p>

<pre><code>    addCombinations(pattern, pattern.indexOf('?'), output);
â€¦
/** Appends to &lt;code&gt;output&lt;/code&gt; all combinations replacing the
 * character at &lt;code&gt;wildAt&lt;/code&gt; and every &lt;code&gt;'?'&lt;/code&gt;
 * to the end of &lt;code&gt;pattern&lt;/code&gt; with &lt;code&gt;'0'&lt;/code&gt; and
 * &lt;code&gt;'1'&lt;/code&gt;. */
private static void
addCombinations(String pattern, int wildAt, List&lt;String&gt; output) {
    int next = pattern.indexOf('?', wildAt);
    StringBuffer modifyable = new StringBuffer(pattern);
    for (char digit = '0' ; digit &lt;= '1' ; digit++) {
        modifyable.setCharAt(wildAt, digit);
        String modified = modifyable.toString();
        if (next &lt; 0)
            output.add(modified);
        else
            addCombinations(modified, next, output);
    }
}
</code></pre>
    </div>