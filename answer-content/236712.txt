<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you should clarify what you want. Depending on that, the answer will be slightly different.</p>

<p>If you want an iterator to a random element then Kerndog's answer is really close:</p>

<pre><code>template &lt;typename Container, typename Generator&gt;
auto random_iterator(Container &amp;con, Generator &amp;gen) {
  using std::begin;
  using std::size;
  std::uniform_int_distribution&lt;std::ptrdiff_t&gt; dist{0, size(con) - 1};
  return std::next(begin(con), dist(gen));
}

template &lt;typename Container, typename Generator&gt;
auto random_iterator(const Container &amp;con, Generator &amp;gen) {
  using std::cbegin;
  using std::size;
  std::uniform_int_distribution&lt;std::ptrdiff_t&gt; dist{0, size(con) - 1};
  return std::next(cbegin(con), dist(gen));
}
</code></pre>

<p>Note that there should be a const/non-const overload.</p>

<p>If you only want the element from the container you should retrieve it or get a reference?</p>

<pre><code>template &lt;typename Container, typename Generator&gt;
auto random_reference(const Container &amp;con, Generator &amp;gen) {
  using std::size;
  std::uniform_int_distribution&lt;std::size_t&gt; dist{0, size(con) - 1};
  return con[dist(gen)];
}
</code></pre>

<p>Which standard do you use? If C++20 is possible then you should use at least the <code>range</code> concept and <code>ranges::size</code>:</p>

<pre><code>template &lt;range Container, typename Generator&gt;
auto random_const_iterator(const Container &amp;con, Generator &amp;gen) {
  std::uniform_int_distribution&lt;std::ptrdiff_t&gt; dist{0, std::ranges::size(con) - 1};
  return std::next(std::ranges::cbegin(con), dist(gen));
}
</code></pre>

<p>Note that <code>std::ranges::size</code>/<code>std::ranges::cbegin</code> are customization point objects (CPOs), so you should call them qualified; you do not need to use ADL as that is already inside the mechanics of the CPO.</p>
    </div>