<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my opinion many lines with <code>IEnumerable&lt;DataItem&gt;</code> on the left side make this code noisy. This</p>

<pre><code>var preOnly = preList.Except(postList, new DataItemComparer());
var postOnly = postList.Except(preList, new DataItemComparer());
var common = postList.Intersect(preList, new DataItemComparer());
</code></pre>

<p>is clearer as for me.</p>

<p>As I said in comments you should use enum for <code>DiffType</code> instead of string.</p>

<pre><code>public enum DiffType
{
    Add,
    Remove,
    Diff
}

public class DiffItem
{
    public DiffItem()
    {
    }

    public DiffItem(string data, DiffType type, string pre, string post)
    {
        Data = data;
        DiffType = type;
        PreVal = pre;
        PostVal = post;
    }

    public DiffType DiffType { get; set; }
}
</code></pre>

<p>Using <code>AddRange</code> method of the <code>List</code> this code</p>

<blockquote>
<pre><code>foreach (DataItem add in added)
{
    diffList.Add(new DiffItem(add.Data, "Add", null, add.Value));
}
foreach (DataItem rem in removed)
{
    diffList.Add(new DiffItem(rem.Data, "Remove", rem.Value, null));
}
foreach (DataItem pre in diffPre)
{
    DataItem post = diffPost.First(x =&gt; x.Data == pre.Data);
    diffList.Add(new DiffItem(pre.Data, "Diff", pre.Value, post.Value));
}
</code></pre>
</blockquote>

<p>can be rewritten as</p>

<pre><code>diffList.AddRange(added.Select(i =&gt; new DiffItem(i.Data,
                                                 DiffType.Add,
                                                 null,
                                                 i.Value)));
diffList.AddRange(removed.Select(i =&gt; new DiffItem(i.Data,
                                                   DiffType.Remove,
                                                   i.Value,
                                                   null)));
diffList.AddRange(diffPre.Select(i =&gt; new DiffItem(i.Data,
                                                   DiffType.Diff,
                                                   i.Value,
                                                   diffPost.FirstOrDefault(x =&gt; x.Data == i.Data)?.Value)));
</code></pre>

<p>And I believe an instance of the <code>DiffItem</code> should be immutable so setters of the properties can be removed.</p>

<p>Also instead of using <code>DiffType</code> you can create three subclasses representing each type of difference:</p>

<pre><code>public class DiffItem
{
    public DiffItem()
    {
    }

    public DiffItem(string data)
    {
        Data = data;
    }

    public string Data { get; }
} 

public sealed class Addition : DiffItem { ... }
public sealed class Deletion : DiffItem { ... }
public sealed class Difference : DiffItem { ... }
</code></pre>

<p>It will allow to eliminate some constructor parameters that are useless for particular difference type.</p>
    </div>