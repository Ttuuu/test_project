<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Dont use if to test and return bool</h2>

<pre><code>  if(top==-1)
    return true;
  else
    return false;
</code></pre>

<p>This is easier to write as:</p>

<pre><code>  return top == -1;
</code></pre>

<h2>Overflow</h2>

<pre><code>  if(top&gt;=-1){
      // STUFF
  }
  else
    std::cout&lt;&lt;"Overflow"&lt;&lt;std::endl;
</code></pre>

<p>Is top being -1 really overflow? Would not overflow be when you ran out of memory for list items. Especially since there is not interface that allows you to get the size of the stack.</p>

<p>Also I don't expect a diagnostic message. If something fails to happen its an error (by that I mean exception). If you fail to push the code that called push needs to know that the operation failed otherwise it will keep on doing what it is doing. The best way to indicate to the calling code something went wrong is an exception.</p>

<h3>Design</h3>

<p>You push and pop to the back of the list. Why not push and pop from the front of the list then you will never need to traverse the list to find the item.</p>

<h3>Bug</h3>

<p>When you pop, you don't actually remove the item from the list (or delete it). So poping gives you the last value but does nto remove it thus it will continue to give you the last item.</p>

<h3>Efficiency</h3>

<p>Checking for underflow/overflow. Sure this is good practice. But what about code were I know it is not going to under/over-flow. Do I need to check then? In most C++ code effeciency is paramount and you usually provide unchecked versions for situations where the check is not needed.</p>

<pre><code>Stack   s;
// Fill stack

while(!s.empty())
{
     std::cout &lt;&lt; s.pop();   // Does this pop need to be checked.
                             // We have already done a manual check
                             // to make sure that a pop() is valid
                             // by calling empty() first.
}
</code></pre>

<p>Note: There is no issue with having both a checked and unchecked version of a call. Lookat <code>std::vector&lt;&gt;</code> and <code>operator[]</code> Vs <code>at()</code>.</p>

<h2>Minor Things</h2>

<p>The call to empty should be const:</p>

<pre><code> bool Stack&lt;T&gt;::stack_empty() const
                              ^^^^^
</code></pre>

<p>Easier to declare the <code>operator&lt;&lt;</code> as a friend then you don't need to worry about the template declaration.</p>

<pre><code>template&lt;class U&gt;
std::ostream &amp; operator &lt;&lt;(std::ostream&amp; os, const Stack&lt;U&gt;&amp; s){
    s.display(os);
    return os;
}
</code></pre>

<p>Put it inside the class and mark as friend:</p>

<pre><code>    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Stack const&amp; s) {   
        s.display(os);
        return os; 
    };  
</code></pre>

<h2>Revised Version</h2>

<pre><code>#include &lt;iostream&gt;


template&lt;class T&gt;
class Stack{
    struct Node{
        T data;
        Node *next;
        // This is the standard constructor
        // Where you copy the `val` into the node.
        Node(Node* next, T const&amp; val)
            : data(val)
            , next(next)
        {}  
        // This is the move constructor
        // It moves the content of `val` into the node. For
        // types like vectors this is much more efficient as it
        // simply means copying three (or so) pointers and thus
        // transferring the internal containers without the cost
        // of copying all the elements in the vector.
        Node(Node* next, T&amp;&amp; val)
            : data(std::move(val))
            , next(next)
        {}  
        // This is an emplace constructor.
        // Rather than passing a `T` into the node you pass all the
        // parameters need to construct a `T` then create the T
        // in place as the node object is constructed.
        template&lt;typename... Args&gt;
        Node(Node* nect, Args&amp;&amp;... args)
            : data(std::forward&lt;Args&gt;(args)...)
            , next(next)
        {}  
    };  
    Node*     head;

    public:
    Stack()
        : head(nullptr)
    {}  
    // Disable the copy semantics as the default version does not
    // work when you have an owned RAW pointer in your class (like head).
    Stack(Stack const&amp;)            = delete;
    Stack&amp; operator=(Stack const&amp;) = delete;
    ~Stack()
    {   
         // Reclaiming all the nodes.
         for(Node* next; head != nullptr; head = next)
         {   
             next = head-&gt;next;
             delete head;
         }   
    }   
    bool empty() const
    {   
        return head == nullptr;
    }   
    // Pass a reference to a value and use it to create a node with a copy.
    void push(T const&amp; value)
    {   
        head = new Node(head, value);
    }  
    // Pass an r-value reference to a value and use it to create a node with a move. 
    void push(T&amp;&amp; value)
    {   
        head = new Node(head, std::move(value));
    } 
    // Pass a reference to set of parameters that can be used to
    // construct a T object in place. This is know as perfect forwarding.  
    template&lt;typename... Args&gt;
    void push(Args&amp;&amp;... args)
    {   
        head = new Node(head, std::forward&lt;Args&gt;(args)...);
    }   
    // pop a value from the head node
    // delete and remove the head node.
    T pop()
    {   
        Node* tmp   = head;
        head = head-&gt;next;
        T result = std::move(tmp-&gt;data);
        delete tmp;
        return result;
    }   
    // Print a stack.
    void display(std::ostream&amp; out = std::cout) const
    {   
        for(Node* loop = head; loop != nullptr; loop = loop-&gt;next)
        {   
            out &lt;&lt; loop-&gt;data &lt;&lt; " ";
        }   
    }   
    // Implement the stream operators for Stack
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Stack const&amp; s)
    {   
        s.display(os);
        return os; 
    }
};

int main()
{
    Stack&lt;int&gt; stack1;

    stack1.push(3);
    stack1.push(4);
    stack1.push(11);
    stack1.push(30);
    std::cout&lt;&lt;stack1&lt;&lt;std::endl;
    // No need to check pop()
    // I know there are four items in the stack
    // If a push had failed it would have thrown an exception.
    std::cout&lt;&lt;stack1.pop()&lt;&lt;std::endl;
}
</code></pre>
    </div>