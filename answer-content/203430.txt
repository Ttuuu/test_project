<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is a very rudimentary example of how you can set this up via inheritance. Obviously you'd add in the error checking on the static constructors to sanitize the input, but the intent should be clear.</p>
<pre><code>public interface IShape
{
    double Area { get; }
    double Perimeter { get; }
    string Name { get; set; }
    int Sides { get; }
}

public abstract class Shape : IShape
{
    protected double? _area;
    protected double? _perimeter;

    public double Area =&gt; (_area ?? (_area = GetArea())).Value;
    public double Perimeter =&gt; (_perimeter ?? (_perimeter = GetPerimeter())).Value;
    public string Name { get; set; }
    public int Sides { get; }

    public Shape() { }

    protected Shape(string name, int sides)
    {
        Name = name;
        Sides = sides;
    }

    protected abstract double GetArea();
    protected abstract double GetPerimeter();

    public override string ToString()
    {
        return $"{this.GetType().Name} {Name}: A={Area}, P={Perimeter}, S={Sides}";
    }
}

public class Rectangle : Shape
{
    public double Length { get; }
    public double Width { get; }

    protected Rectangle(string name, double length, double width)
        : base(name, 4)
    {
        Length = length;
        Width = width;
    }

    public static Rectangle FromLengthWidth(string name, double length, double width)
    {
        return new Rectangle(name, length, width);
    }
    public static Rectangle FromLengthPerimeter(string name, double length, double perimeter)
    {
        // w = (p / 2) - l
        double width = (perimiter / 2) - length;
        return new Rectangle(name, length, width) {_perimeter = perimeter };
    }
    public static Rectangle FromWidthPerimeter(string name, double width, double perimeter)
    {
        // l = (p / 2) - w
        double length = (perimiter / 2) - width;
        return new Rectangle(name, length, width) { _perimeter = perimeter };
    }
    public static Rectangle FromLengthArea(string name, double length, double area)
    {
        // w = a / l
        double width = area / length;
        return new Rectangle(name, length, width) { _area = area };
    }
    public static Rectangle FromWidthArea(string name, double width, double area)
    {
        // l = a / w
        double length = area / width;
        return new Rectangle(name, length, width) { _area = area };
    }

    protected override double GetArea() =&gt; Length * Width;
    protected override double GetPerimeter() =&gt; 2 * (Length + Width);

}

public class Square : Rectangle
{
    protected Square(string name, double size)
        : base(name, size, size) { }

    public static Square FromSize(string name, double size)
    {
        return new Square(name, size);
    }
    public static Square FromPerimeter(string name, double perimeter)
    {
        // s = p / 4
        double size = perimiter / 4;
        return new Square(name, size) { _perimeter = perimeter };
    }
    public static Square FromArea(string name, double area)
    {
        // s = a^0.5
        double size = Math.Sqrt(area);
        return new Square(name, size) { _area = area };
    }
}
</code></pre>
<p>I'm not addressing serialization here, so that will need to be changed in regards to constructors and property accessors to fit your needs.</p>
<p>A simple proof of concept calling example showing the polymorphism:</p>
<pre><code>static void Main(string[] args)
{
    List&lt;Shape&gt; shapes = new List&lt;Shape&gt;();

    shapes.Add(Rectangle.FromWidthArea("WidthArea", 12.5, 120));
    shapes.Add(Square.FromArea("Area", 121.0));

    foreach (IShape shape in shapes)
        Console.WriteLine(shape);

    Console.ReadLine();
} 
</code></pre>
<p>Outputs:</p>
<blockquote>
<p>Rectangle WidthArea: A=120, P=44.2, S=4</p>
<p>Square Area: A=121, P=44, S=4</p>
</blockquote>
    </div>