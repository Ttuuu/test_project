<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few observations, in addition to what BCdotWEB already pointed out:</p>

<ul>
<li>There's a fair bit of repetition in that switch statement. You're using a type ID to look up a specific <code>TestTable</code> instance, so using a <code>Dictionary</code> instead of a <code>List</code> would be more appropriate here.</li>
<li>Using multiple collections, where objects are related to each other by index, is fairly brittle. Storing them together is safer. Changing <code>TestTable.Tests</code> to a <code>List&lt;Test&gt;</code> would help, but that may not be desirable because it allows outside modifications.</li>
<li>All <code>TestTable</code> properties have public setters. That's often a bad idea, as it allows any code to modify them, which can put a <code>TestTable</code> instance in an invalid state. Use a constructor to ensure that an instance is created in a valid state (any required data should be passed in via arguments), and don't make properties writable if they don't need to be.</li>
<li><code>TestTable</code> is a reference type, and <code>TestTable</code> does not reassign <code>table</code>, so there's no need to pass it by <code>ref</code>.</li>
<li>There's a lot of 'magic numbers' in the code - numbers whose meaning is unclear. Also note that hard-coded type IDs means you'll have to modify your code whenever a new type ID needs to be added. That's not ideal.</li>
</ul>

<hr>

<p>All this makes the code fairly difficult to understand, but it looks like you're simply grouping tests by their type ID, where a <code>TestTable</code> represents a collection of related tests.</p>

<p>If that's the case, then your code can be simplified to the following:</p>

<pre><code>var testTables = new Dictionary&lt;int, TestTable&gt;();
foreach (var test in tests)
{
    if (!testTables.TryGetValue(test.type, out var testTable))
    {
        // This test is the first of its kind, so create a table for it:
        testTable = new TestTable {
            TestName = test.TestTypeName,
            Type = test.type,
            Rows = test.TestDatas.Count()
        };
        testTables[test.type] = testTable;
    }

    // Add the test to the table (this relies on Tests being a List):
    testTable.Tests.Add(test);
    testTable.Columns += 1;
}
return testTables.Values.ToArray();
</code></pre>

<p>Or, if you're familiar with Linq:</p>

<pre><code>return tests
    .GroupBy(test =&gt; test.type)
    .Select(testsGroup =&gt;
    {
        // Pick the first test from the group to determine the name and row count:
        var test = testsGroup.First();

        // NOTE: I'd recommend using a proper constructor here instead:
        return new TestTable {
            TestName = test.TestTypeName,
            Type = test.type,
            Rows = test.TestDatas.Count(),
            Columns = testsGroup.Count(),
            Tests = testsGroup.ToList(), // Tests does not need to be a List here
        };
    })
    .ToArray();
</code></pre>

<p>'<code>GroupBy</code>' is actually an accurate description of what you're doing here - something that was not very clear in the original code.</p>

<p>Note that these alternatives do not necessarily return results in the same order. If that's important to you then just add an <code>OrderBy(table =&gt; table.Type)</code> call before the final <code>ToArray()</code> call. Also note that the result only contains <code>TestTable</code> instances for those groups that actually contain any tests. Then again, without tests you can't determine the name of a group, so I'd consider that an improvement.</p>
    </div>