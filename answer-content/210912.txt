<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Terminology</h2>

<p>It's important to be able to understand (and describe) what's actually going on. Your program</p>

<ol>
<li>converts from an integer decimal string representation to an integer using <code>scanf</code>. This integer is then represented as a binary number in the processor.</li>
<li>converts from that integer back into a string representation, but rather than it being decimal, it's binary.</li>
</ol>

<p>So yes - it technically converts from "decimal to binary", but really it's "decimal string to integer to binary string".</p>

<h2>Use <code>const</code></h2>

<pre><code>void print_out_reversed(char string[])
</code></pre>

<p>doesn't modify <code>string</code>, so write <code>const char string[]</code>.</p>

<h2>Simplify your <code>strlen</code> usage</h2>

<p>This:</p>

<pre><code>int index = strlen(string);

while (string[index] != '\0')
    index--;

for (int i = index; i &gt;= 0; i--)
    putchar(string[i]);
</code></pre>

<p>can be</p>

<pre><code>for (int i = strlen(string)-1; i &gt;= 0; i--)
    putchar(string[i]);
</code></pre>

<p>It seems that you don't trust what <code>strlen</code> is doing, which is why you have that intermediate <code>while</code> loop. But that loop won't have any effect, because the null terminator will always be where <code>strlen</code> says it is.</p>

<h2>Use math instead of <code>if</code></h2>

<p>This:</p>

<pre><code>    if (number % 2 == 0)
    {
        bits[index] = '0';
    }
    else
    {
        bits[index] = '1';
    }
</code></pre>

<p>can be</p>

<pre><code>bits[index] = '0' + (number &amp; 1);
</code></pre>

<h2>Use combined operation and assignment</h2>

<p>This:</p>

<pre><code>number = number / 2;
</code></pre>

<p>should be</p>

<pre><code>number /= 2;
</code></pre>

<p>or, for speed (which the compiler will do for you anyway)</p>

<pre><code>number &gt;&gt;= 1;
</code></pre>
    </div>