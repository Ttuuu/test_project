<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>rerenders from <code>bind</code> and anonymous functions</h3>

<p>You have a really bad rerendering problem. Every click handler you have is either <code>bind</code>ed or an anonymous function. Turn these into named functions</p>

<pre><code>&lt;div className="scrollbar"  onScroll={this.handleScroll.bind(this)}&gt;
</code></pre>

<p><code>bind</code> creates a new instance of the function during render cycles, which will add up when you have 10 of them with each instance of the function.</p>

<p>Instead, make it an arrow function inside your <code>class</code>. Arrow functions do not need <code>bind</code></p>

<pre><code>handleScroll = () =&gt; {}
&lt;div className="scrollbar"  onScroll={this.handleScroll}&gt;
</code></pre>

<p>anonymous functions have the exact same problem in event listeners/handlers</p>

<pre><code>&lt;a className="checkbox-display" onClick={()=&gt;{ this.changeFilterState(isFiltered, index);}}&gt;
</code></pre>

<p>But a function that takes in arguments are immediately invoked, so you can do an arrow function as a double <code>return</code>.</p>

<pre><code>changeFilterState = (isFiltered, index) =&gt; () =&gt; {} // two arrow functions. this function returns another function

&lt;a className="checkbox-display" onClick={this.changeFilterState(isFiltered, index)}&gt;
</code></pre>

<h3>separate your UI elements into smaller components</h3>

<p>When you have a large component, its render cycle will go through every single ui element in the component. But not all elements need to be rerendered. Elements whose values never change (or almost never) don't need to go through another render cycle. In order to accomplish this, you need to split them up into their own components.</p>

<h3>memoize those smaller components with <code>React.memo</code> for easy wins.</h3>

<p><code>React.memo</code> makes an initial check to see if anything has changed between the the current and next set of data inside the component. If <code>React.memo</code> finds them to be equal, the component doesn't go through a render cycle.</p>

<p>A method that returns many ui elements</p>

<pre><code>&lt;div key={index}&gt;
    &lt;a className="checkbox-display" onClick={()=&gt;{ this.changeFilterState(isFiltered, index);}}&gt;
    {isFiltered[index] ? 
        &lt;div className={ isFiltered[index] ? "checkbox-rectangle checkbox-rectangle-fill-color horizontal-row-filterby" : "checkbox-rectangle horizontal-row-filterby"}&gt;
            &lt;img className="checkbox-image-size" src="/images/logo/checkmark.svg"/&gt;
        &lt;/div&gt; 
        : 
        &lt;div className="checkbox-rectangle horizontal-row-filterby"/&gt;
    }
    &lt;/a&gt;
        &lt;span className="category1"&gt;{index == 0 ? 'All' : category['Name']}&lt;/span&gt;              
&lt;/div&gt;
</code></pre>

<p>How often should the image change? More likely than not, those images aren't going to change for every single one of them each time you load more images. You can pull out that UI element and <code>React.memo</code> it so it does an initial check and skips the render process completely if the values are the same.</p>

<pre><code> const CategoryImage = (props) =&gt; {
  const { isFiltered } = props
  return (
    &lt;React.Fragment&gt;
      {isFiltered ? 
          &lt;div className={ isFiltered ? "checkbox-rectangle checkbox-rectangle-fill-color horizontal-row-filterby" : "checkbox-rectangle horizontal-row-filterby"}&gt;
              &lt;img className="checkbox-image-size" src="/images/logo/checkmark.svg"/&gt;
          &lt;/div&gt; 
          : 
          &lt;div className="checkbox-rectangle horizontal-row-filterby"/&gt;
      }
    &lt;/React.Fragment&gt;
  )

export default React.memo(CategoryImage)
</code></pre>

<p>and now it is this:</p>

<pre><code>&lt;div key={index}&gt;
  &lt;a className="checkbox-display" onClick={()=&gt;{ this.changeFilterState(isFiltered, index);}}&gt;
    &lt;CategoryImage isFiltered={isFiltered[index]} /&gt;
  &lt;/a&gt;
  &lt;span className="category1"&gt;{index == 0 ? 'All' : category['Name']}&lt;/span&gt;              
&lt;/div&gt;
</code></pre>

<p>Smaller components are better for performance, because you get to pick and choose what should rerender and what should not. They are also much easier to reason.</p>

<p>Note that <code>React.memo</code> isn't the silver bullet to all render problems and you have to split up components intelligently. <code>React.memo</code> does a shallow check, which means it's very good with primitives, like strings, booleans and numbers. Notice that the parts I pulled out into its own separate component only has a boolean as a prop. That was very intentional. <code>React.memo</code> can easily do a comparison and stop a rerender.</p>

<p>Edit:
Apologies, I didn't notice that <code>this.handleScroll</code> is already an arrow function. You don't need to <code>bind</code> in that case. Here, all I did was remove the <code>bind</code> inside the click handler.</p>

<pre><code>handleScroll = (e) =&gt; {
  const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;
  if (bottom) {  
      this.setState({
          storiesLoaded: this.state.storiesLoaded + 25
      });
  }
}

renderResults(Object, isVisible, commodityStates, languageStates, publishedStates) {
  if (isVisible){
      return (
          &lt;div className="search-result-master-container"&gt;
              &lt;span className="section-header"&gt;{Resources.Filter_By}&lt;/span&gt;
              &lt;span className="section-header"&gt;{Object.length} {Resources.Results}:&lt;/span&gt;
              &lt;div id="filterBySideBar"&gt;
                  &lt;div className="horizontal-line-filter"&gt;
                      &lt;div&gt;{this.renderCategories(Object , commodityStates)}&lt;/div&gt;
                      &lt;div&gt;{this.renderLanguage(Object , languageStates)}&lt;/div&gt;
                      &lt;div&gt;{this.renderPublished(publishedStates)}&lt;/div&gt;
                  &lt;/div&gt;
              &lt;/div&gt;
              &lt;div className="horizontal-line-stories-top"/&gt;
              &lt;div className="scrollbar"  onScroll={this.handleScroll}&gt;
                  &lt;div className="force-overflow"&gt;
                          {this.renderStories(Object)}
                  &lt;/div&gt;
              &lt;/div&gt;
              &lt;div className="horizontal-line-stories-bottom" /&gt;
          &lt;/div&gt;    
      );       
  }                 
}
</code></pre>

<p>But for a function with a callback, you can write it out to have the functions be double returns:</p>

<pre><code>addNewBookmark = (userId, newsId, isBookmarked, bookmarkIndex) =&gt; () =&gt; {
  $.post('/webapi/newstestAddNewBookmark?userId=' + (userId), 
  { 
      UserID: userId,
  })
  .done(() =&gt; {
    this.changeBookmarkState(isBookmarked, bookmarkIndex);
  }
}

removeBookmark = (userId, newsId, isBookmarked, bookmarkIndex) =&gt; () =&gt; {
  $.post('/webapi/test/RemoveBookmark?userId=' + (userId), {})
  .done(() =&gt; {
      this.changeBookmarkState(isBookmarked, bookmarkIndex);
  }
}

renderBookmarkButton(userId, newsId, isBookmarked, bookmarkIndex) {  
  return (
      &lt;a onClick={isBookmarked == false ? this.addNewBookmark(userId, newsId, isBookmarked, bookmarkIndex) : this.removeBookmark(userId, newsId, isBookmarked, bookmarkIndex)}&gt;
          &lt;img className={isBookmarked == false ? "bookmark-button" : "bookmark-button bookmark-button-fill-color"} src="/images/logo/Bookmark.svg" /&gt;
      &lt;/a&gt;
  );
}
</code></pre>

<p>Notice how I don't have <code>() =&gt;</code> inside the <code>onClick</code></p>
    </div>