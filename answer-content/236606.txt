<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Reinventing the wheel</h1>

<p>You didnt make any indication that you are doing this as excercise. In that case you should try something already written and tested. Like Slim framework (<a href="http://www.slimframework.com/docs/v3/objects/router.html" rel="nofollow noreferrer">http://www.slimframework.com/docs/v3/objects/router.html</a>) which looks very similar to the "Express way".</p>

<p>Also check out PSR interfaces.</p>

<p>In case this is just an excercise for you or you simply want to have everything under your own control for some reason, let me review your code anyway (in a bit abstract way tho)</p>

<h1>Apache</h1>

<p>You are making it unnecesarily coupled to apache rewrite module.
You can just put redirect everything (except static assets I suppose) to index.php. This will make it very easy to switch to nginx for example, someday in future. And decide on which "command" to use just from the request uri (accessible as <code>$_SERVER['REQUEST_URI']</code>).
Unless of course it is essential for you to be able to call the api as <code>/command-x</code> as well as <code>/?command=command-x</code>. Personally I dont see a reason for this.
This will also automatically allow you to encode much more things in the uri path.</p>

<h1>Dependency Injection</h1>

<p>You should read something about dependency injection. Ie here:</p>

<pre><code>public function handleRequest(){
        $commandResolver = new CommandResolver();
        $command = $commandResolver-&gt;resolveCommand();
        $command-&gt;execute();
    }
</code></pre>

<p>It is not very good if one class instantiates another classes and at the same time acts on the new instance. In the case above, CommandResolver instance should be passed to the controller in contructor.</p>

<p>You will also find out that to inject dependencies to the individual commands, you will need something more sophisticated than match command name to a file. As those individual commands will have different dependencies and thus different constructors.</p>

<h1>(Super)global variables</h1>

<p>Try to avoid access to global variables as much as possible.
You should only access $_GET, $_POST, etc from one place and pass the values around to those who need them. Dont access those superglobals from any class where you need it.</p>

<h1>Abstract Command Is Too Restrictive</h1>

<p>You should not restrict your commands to POST PATCH and GET. Some endpoints may not have all of those, some endpoints may need more. You could pass something like <code>Psr\Http\RequestInterface</code> to your commands and let them decide if method is acceptable. And unlike in your code returning HTTP 405 is appropriate when given http method is not supported for given endpoint.</p>

<p>The command should be just an interface with probably one method, if not using directly <code>\Psr\Http\Server\RequestHandlerInterface</code>.</p>

<p>The abstract class will only make things worse.</p>
    </div>