<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a couple of thoughts</p>

<ul>
<li><code>FindBucketByKey</code> and <code>FindBucketByValue</code> should be implemented as <code>TryGetSomething</code> because you already are doing this anyway internally and what is most important, it would save you from a ton of <code>null</code>-checks all over the place. Nobody likes them.</li>
<li><code>Set</code> should be called <code>Initialize</code></li>
<li>This one is funny:

<ul>
<li><code>if (x == null)</code> + <code>throw</code> means do not use <code>{}</code> whereas </li>
<li><code>if (x != null)</code> + <code>throw</code> means use <code>{}</code> ;-)</li>
</ul></li>
<li>You should not initialize <code>values</code> with <code>= new HashSet&lt;TElement&gt;(entry.Value);</code> as this could change their order. Groupings don't do this so this behavior would be unexpected. You are also not using any other features of a <code>HashSet</code> as I find using <code>Distict</code> would be more appropriate and would maintain the order of values.</li>
<li><code>Bucket</code> would be easier to use and implement if it was derived from <code>List&lt;T&gt;</code>.</li>
<li><p>Use more linq. You know I like linq so I when I see how <code>Set</code> is implemented I feel the same way as <a href="https://codereview.stackexchange.com/users/39858/visualmelon">@VisualMelon</a> when he sees tuples :-P. This is how I imagine this method doing its main job:</p>

<pre><code>var result =
    from x in Data()
    from y in x.Value
    group x.Key by y into g
    select g;
</code></pre>

<p>This would give you groups for each element where you later could check whether any of the groups contains more than one element. With that, you could identify <strong>all</strong> duplicates and not only the first two and of course the implementation would become much simpler too. This would also be a lot more helpful as with multiple bugs you would need to run the code multiple time to discover every one of them.</p></li>
</ul>
    </div>