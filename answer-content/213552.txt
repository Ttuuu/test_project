<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I made yet another implementation, this one lets you define which weekday you want to consider as week start:</p>

<pre><code>class Calendar {
    public List&lt;CalendarWeek&gt; getWeeks(YearMonth yearMonth, DayOfWeek weekStart) {
        ArrayList&lt;CalendarWeek&gt; calenderweeks = new ArrayList&lt;&gt;();

        int monthStart = LocalDate.of(yearMonth.getYear(), yearMonth.getMonth(), 1).getDayOfWeek().getValue();
        int calendarWeekStart = weekStart.getValue();

        int offset = monthStart - calendarWeekStart;
        if (offset &lt; 0) {
            offset = offset + 7;
        }

        int start = 1;
        int end = 8 - (start + offset);

        int monthLength = yearMonth.lengthOfMonth();
        do {
            calenderweeks.add(new CalendarWeek(offset, start, end));
            start = end + 1;
            end = monthLength &lt; start + 6 ? monthLength : start + 6;
            offset = 0;
        } while (start &lt; monthLength);

        return calenderweeks;
    }
}

class CalendarWeek {
    int offset;
    int start;
    int end;

    public CalendarWeek(int offset, int start, int end) {
        this.offset = offset;
        this.start = start;
        this.end = end;
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();

        for (int i = 0; i &lt; offset; i++) {
            stringBuilder.append("    ");
        }

        for (int i = start; i &lt; end + 1; i++) {
            stringBuilder.append(String.format("  %2d", i));
        }

        return stringBuilder.toString();
    }
}
</code></pre>

<p>Sample run:</p>

<pre><code>class App {
    public static void main(String[] args) {
        List&lt;CalendarWeek&gt; weeks;

        weeks = new Calendar().getWeeks(YearMonth.of(2019, 2), DayOfWeek.SATURDAY);
        weeks.forEach(System.out::println);

        System.out.println("");

        weeks = new Calendar().getWeeks(YearMonth.of(2019, 2), DayOfWeek.SUNDAY);
        weeks.forEach(System.out::println);

        System.out.println("");

        weeks = new Calendar().getWeeks(YearMonth.of(2019, 2), DayOfWeek.MONDAY);
        weeks.forEach(System.out::println);
    }
}
</code></pre>

<p>Sample output</p>

<pre><code>                           1
   2   3   4   5   6   7   8
   9  10  11  12  13  14  15
  16  17  18  19  20  21  22
  23  24  25  26  27  28

                       1   2
   3   4   5   6   7   8   9
  10  11  12  13  14  15  16
  17  18  19  20  21  22  23
  24  25  26  27  28

                   1   2   3
   4   5   6   7   8   9  10
  11  12  13  14  15  16  17
  18  19  20  21  22  23  24
  25  26  27  28
</code></pre>
    </div>