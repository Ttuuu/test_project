<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>RegExp to the rescue.</h1>

<p>First there is the problem for the review. The function is inconsistent and that makes it hard to know what it really must do.</p>

<p>Consider the test below if given the following inputs</p>

<pre><code>"3 + 7"   &gt;&gt; 10
"3 - 7"   &gt;&gt; -4
"3- 7"    &gt;&gt; undefined  should be -4
"3 -7"    &gt;&gt; undefined  should be -4
"3-7"     &gt;&gt; undefined  should be -4
"3 - 7.9" &gt;&gt; -4         should be -5 as 7.9 is rounded to 8
"3 - - 7" &gt;&gt; -4         should be 10 as 3 - (-7) is 3 + 7
"3 - - 7" &gt;&gt; -4         should be 10 as 3 - (-7) is 3 + 7
"3 a 7"   &gt;&gt; undefined  correct
"3 - a 7" &gt;&gt; -4         should be undefined
</code></pre>

<p>??? not at all what one would expect</p>

<hr>

<h2>The review part</h2>

<p>You got the first two lines...</p>

<blockquote>
<pre><code>function Calculator() {
  this.calculate = function(sum) {
</code></pre>
</blockquote>

<p>....and the last two...</p>

<blockquote>
<pre><code>  };  // the ; not really needed after }
};
</code></pre>
</blockquote>

<p>...correct. But all the rest is not helping solve the problem.</p>

<h3>Step by step.</h3>

<p>So lets step through the code</p>

<p>Set result would be <code>undefined</code> </p>

<blockquote>
<pre><code>    this.summ = 0;
</code></pre>
</blockquote>

<p>Split and vet numbers. Could have used <code>isNaN()</code> and use local variables rather than object properties <code>var sumArr</code> and <code>var newSum</code></p>

<blockquote>
<pre><code>    this.sumArr = sum.split(' '); 
    this.newSum = this.sumArr.filter(function(number) {
      return number &gt; 0;
    });
</code></pre>
</blockquote>

<p>Unneeded loop????</p>

<blockquote>
<pre><code>    for (var i = 0; i &lt; this.sumArr.length; i++) {
</code></pre>
</blockquote>

<p>Check operator use <code>===</code> rather than <code>==</code></p>

<blockquote>
<pre><code>      if (this.sumArr[i] == '+') {
</code></pre>
</blockquote>

<p>Parse number and return result. <code>parseInt</code> need a radix 10</p>

<blockquote>
<pre><code>        return this.summ = parseInt(this.newSum[0]) + parseInt(this.newSum[1]);
      } else if (this.sumArr[i] == '-') {
</code></pre>
</blockquote>

<p>Parse number and return result</p>

<blockquote>
<pre><code>        return this.summ = parseInt(this.newSum[0]) - parseInt(this.newSum[1]);
      }
    }
</code></pre>
</blockquote>

<hr>

<h2>A better way</h2>

<h3>Vet</h3>

<p>The function must first vet the string and return undefined if it is not a valid calculation.</p>

<p>You can do that with a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="nofollow noreferrer">RegExp</a>.</p>

<p>The simple regExp <code>/[^0-9\-+ .]/</code> </p>

<ul>
<li>the <code>[</code>...<code>]</code> mean any of, </li>
<li>the <code>^</code> converts the <code>[</code>...<code>]</code> to means not any of, </li>
<li>the <code>0-9</code> means digits "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" </li>
<li><p>the <code>\-</code> for character "-",(because <code>-</code> has special meaning you must add the forward slash)</p></li>
<li><p>the <code>+ .</code> means "+", " ", and "."  </p></li>
</ul>

<p>So the expression will test if not any of "0123456789-+ ." are in the string, and can be used to vet the input and return undefined</p>

<pre><code>if(/[^0-9\-+ .]/.test(sum)) { return undefined } 
// not undefined is the default return so the line above is the same as
if(/[^0-9\-+ .]/.test(sum)) { return } 
</code></pre>

<p>We could create an even more complex <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="nofollow noreferrer">RegExp</a> that would vet things like "1+1+2" but baby steps first.</p>

<p>Now that we have removed most of the invalide expressions on to parsing the string.</p>

<h3>Remove irrelevant content</h3>

<p>First remove any irrelevant content. That would be any spaces as they are not needed. Again a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="nofollow noreferrer">RegExp</a> comes in handy. <code>/ /g</code> this means find <code>/</code> " "  <code>/</code> space and the <code>g</code> means global (all)</p>

<pre><code> sum = sum.replace(/ /g,""); // remove all spaces
</code></pre>

<h3>Find the operator</h3>

<p>Now we can cut the sum in half to find the two numbers. We know that after the first number we need a "-" or "+". </p>

<p>Again a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="nofollow noreferrer">RegExp</a> is used to find the location and value of the first "+" or "-" after the first number. <code>/[0-9\.][+-]/</code> find and "0-9" or "." followed by "+" or "-"</p>

<pre><code> const result = /[0-9.][+\-]/.exec(sum);
 // if result is null then we have not found a digit followed by + -
 // This means the string is invalid
 if(result === null){ return } // return undefined
 // the index of the found location is of the number before the + -
 var num1 = sum.substr(0,result.index+1); // get number before
 var operator = sum[result.index + 1];    // get the operator
 var num2 = sum.substr(result.index + 2); // get the number after.
</code></pre>

<p>Now we have almost everything. There is still a chance of the two numbers being misinformed (eg "0.0.0" or second number as "0+10") but we can use the function <code>isNaN</code> (is Not a Number) to vet these</p>

<h3>Vet again</h3>

<pre><code> if(isNaN(num1) || isNaN(num2)) { return } // return undefined is one or both not numbers
</code></pre>

<h3>Do the calculation</h3>

<p>Now convert to the numbers. You should never use parseInt unless you are converting from a different radix (base). Use Number to parse a number and the use <code>Math.floor</code>, <code>Math.round</code>, <code>Math.ceil</code>, or <code>Math.trunc</code> to do the conversion to integer you want.</p>

<pre><code>  num1 = Math.round(Number(num1));
  num2 = Math.round(Number(num2));
</code></pre>

<p>And now the result</p>

<pre><code>  if(operator === "-") { return num1 - num2 }
  return num1 + num2;
</code></pre>

<p>And that is the logic.</p>

<hr>

<h2>Create the object  <code>Calculator</code></h2>

<p>We can put it into an object with the method <code>calculate</code> and then run a good set of tests. You should always test for errors not just for good results.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function Calculator() {
    this.summ = undefined;
    this.calculate = function(str) {
 
        this.summ = undefined;

        // vet out bad characters
        if (/[^0-9\-+ .]/.test(str)) { return } 
        
        // remove spaces
        str = str.replace(/ /g,""); 
        
        // find operator
        const result = /[0-9.][+\-]/.exec(str);
        if (result === null) { return } 

        // get numbers and operator
        var num1 = str.substr(0, result.index + 1); 
        const operator = str[result.index + 1];    
        var num2 = str.substr(result.index + 2); 
        
        // check numbers
        if (isNaN(num1) || isNaN(num2)) { return } 
        
        // parse and round numbers
        num1 = Math.round(Number(num1));
        num2 = Math.round(Number(num2));
        
        // return result
        if (operator === "-") { return this.summ = num1 - num2 }
        return this.summ = num1 + num2;
    }
}

// and test the results
var calc = new Calculator;
function log(val){
    console.log("Result of " + val + " = " + calc.calculate(val));
}

log("3 + 7");
log("3 - 7");
log("3- 7"); 
log("3 -7"); 
log("3-7"); 
log("-3-7"); 
log("3 - 7.9"); 
log("3 - - 7"); 
log("3 - a 7"); 
log("3 a 7");
log("3-7-");
log("3-7-1");</code></pre>
</div>
</div>


<h2>Links</h2>

<ul>
<li><a href="https://regex101.com/" rel="nofollow noreferrer">Regex</a> 101 is a helpful site to help get your head around regular repressions</li>
<li>For all things javascript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow noreferrer">JavaScript MDN</a> is a great resource.</li>
</ul>
    </div>