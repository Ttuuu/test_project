<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>Python has an "official" <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a>, that most programmers tend to follow, although it was originally only written for the standard library strictly speaking. It's worth a read.</p>

<p>The easiest first step to bring your code more in line with the style guide would be to change function and variable names to the usual <code>lowercase_with_underscores</code>.</p>

<p>Constant values, e.g. <code>today</code> for the sake of this program, are usually named with <code>ALL_UPPERCASE_WITH_UNDERSCORES</code>.</p>

<p>Luckily, there is a <a href="https://codereview.meta.stackexchange.com/a/5252/92478">variety of tools readily available</a> to help you with checking and (auto)fixing some/most of those issues.</p>

<h1>Global variables</h1>

<p>Global variables are usually best to be avoided, since they make it hard(er) to track where which parts of your program state are altered. To get rid of them, you will have to rewrite your functions to accept the relevant inputs as parameter and actually return the (modified) values you are going to work with. An example:</p>

<pre class="lang-py prettyprint-override"><code>def create_new_index(source):
    index_new = []
    # _ is commonly used for "don't care" values
    for path, _, files in os.walk(source):
        ...

    return index_new
</code></pre>

<p>I chose to only pass <code>source</code> as argument to the function and also changed it's name since I would also recommend to not write the data in that function. This is not strictly necessary, but helps to keep your functions manageable since they have only a <a href="https://dev.to/skill_pathway/single-responsibility-principle-for-dummies-59gb" rel="nofollow noreferrer">limited responsibility</a>.</p>

<h1>Loop like a native</h1>

<p>Instead of </p>

<blockquote>
<pre><code>count = 0
for amount in Sources.values():
    count = count + 1
    Source = Sources["folder"+str(count)]
    Destination = Destinations["folder"+str(count)]
</code></pre>
</blockquote>

<p>where <code>amount</code> is never used, you can use <code>enumerate(...)</code> like so</p>

<pre><code>for count, _ in enumerate(Sources.values(), 1):
    source = Sources[f"folder" + str(count)]
    destination = Destinations["folder" + str(count)]
    new_index = create_new_index(source)
</code></pre>

<p>or if you don't care about the specific order of the folders, just use</p>

<pre><code>for key, source in Sources.items():
    destination = Destinations[key]
    new_index = create_new_index(source)
</code></pre>

<p>As a bonus the last version also allows you to get rid of keys that have to follow a strict <code>FolderX</code> pattern on the keys/folder names in your config files.</p>

<h1><code>itemgetter</code> and matching</h1>

<p><code>itemgetter</code>s can be reused. </p>

<pre><code>get_nph = itemgetter('Name', 'Path', 'Hashsum')
get_nh = itemgetter('Name', 'Hashsum')
...
if get_nph(x) == get_nph(y):
    # ... do something
elif get_nh(x) == get_nh(y):
    # ... do something
# and so on
</code></pre>

<p>Defining a reusable <code>itemgetter</code> function for each parameter combination you are using is the most straightforward transformation of your code as shown in your question. In your original code you declared a new <code>itemgetter</code> function whenever you needed one. That is unnecessary as the example above shows.</p>

<p>But the code can work without itemgetters altogether, since all you do is compare three attributes of your file for equality and then act accordingly. An alternative implementation of the same approach might look like:</p>

<pre><code>names_match = x['Name'] == y['Name']
paths_match = x['Path'] == y['Path']
hashsums_match = x['Hashsum'] == y['Hashsum']
if names_match and paths_match and hashsums_match:
    y['Change'] = 'unchanged'
elif names_match and hashsums_match:
    y['Change'] = 'moved'
elif paths_match and hashsums_match:
    y['Change'] = 'renamed'
elif names_match and paths_match:
    y['Change'] = 'newversion'
else:
    # ...
</code></pre>

<p>I'd tend to say this is more readable. But that might be a matter of taste.</p>

<h1>Handling paths</h1>

<p>Instead of manually concatenating paths like <code>Destination + "/" + TODAY + x['Path']</code>, you can use <code>os.path.join(...)</code> like <code>os.path.join(destination, TODAY, x['Path'])</code>. An other advantage of this function is that it takes care to use the "correct" OS specific separator (i.e. <code>\</code> on Windows, <code>/</code> on Linux), although this not strictly necessary here since the target is Linux only.</p>

<p>Python 3 also offers the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>PathLib</code></a> module, which makes working with paths, and parts thereof, a little bit more convenient. Maybe have a look at it if you plan to rework your script or for future projects.</p>

<h1>Running the script</h1>

<p>You have marked the portion of your script that is supposed to run on execution with a block comment, <code>"""Run"""</code>. That might work for a person looking at your code, but the interpreter does not care to much about it. If you ever would try to <code>import</code> a function from your script because you want to reuse it, the back-up routine will be triggered.</p>

<p>Instead <code>if __name__ == "__main__":</code> should be used to (also) tell the interpreter <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">which parts of the file are supposed to be run as script</a>. There is also a <a href="https://stackoverflow.com/a/419185/5682996">nice explanation over at Stack Overflow</a>.</p>

<pre><code>if __name__ == "__main__":
    config = ConfigParser()
    config.read('BackupSettings.ini')
    sources = dict(config.items('Sources'))
    destinations = dict(config.items('Destinations'))
    for key, source in sources.items():
        destination = destinations[key]
        new_index = create_new_index(source)
        ...
</code></pre>
    </div>