<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>__str__</code> method can be simplified a bit. Already with a normal format string you do not need to specify the index of the object to format if it is just sequentially:</p>

<pre><code>"Account Name: {}\nAccount Number: {}\nAccount Balance: ${:.2f}".format(self.name, self.account_number, self.balance)
</code></pre>

<p>You could also use dictionary lookup:</p>

<pre><code>"Account Name: {self.name}\nAccount Number: {self.account_number} \nAccount Balance: ${self.balance:.2f}".format(self=self)
</code></pre>

<p>And then you could use the relatively new <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-string</code></a> (Python 3.6+), making it a bit shorter:</p>

<pre><code>def __str__(self):
    return f"Account Name: {self.name}\nAccount Number: {self.account_number}\nAccount Balance: ${self.balance:.2f}"
</code></pre>

<p>And then, finally, use a multiline string to make it fit into 80 character lines:</p>

<pre><code>def __str__(self):
    return f"""Account Name: {self.name}
Account Number: {self.account_number}
Account Balance: ${self.balance:.2f}"""
</code></pre>
    </div>