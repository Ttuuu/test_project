<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I guess what your teacher meant is this:</p>

<pre><code>if (choice == 1) {
    spider();
</code></pre>

<p>But there is a better way to write this. You adventure game is actually a Finite State Machine. You could implement it with a simple loop:</p>

<pre><code>#include &lt;iostream&gt;

struct  state;
struct  transition;

struct transition {
    char *text;
    struct state *next_state;
};

struct state {
    char *text;
    struct transition transitions[8];
};

extern struct state start;
extern struct transition start_transitions[];
extern struct state spider;
extern struct transition spider_transitions[];

struct state start = {
    "You are on a road that heads west and east of your position.\n"
        "Which way will you go?",
    {
        {"Go West", &amp;spider},
        {"Go East", NULL},
        {"Wait for something to happen", NULL},
        { NULL }
    }
};

struct state spider = {
    "You travel down the road, about only 100 metres and you encounter\n"
        "a giant spider with vicious poison coated fangs.\n"
        "Its hideous appearance causes your throat to dry and your knees to shake!\n"
        "What on earth will you do?",
    {
        { "Attempt to attack the spider with your sword.", NULL },
        { "Throw your sword in the off chance it might kill it.", NULL },
        { "RUN FOR YOUR LIFE!", NULL },
        { NULL }
    }
};


int main(void)
{
    state *cur = &amp;start;
    while (cur) {
        // Print text
        std::cout &lt;&lt; cur-&gt;text &lt;&lt; std::endl;

        // List available choices
        unsigned trans = 0;
        while (cur-&gt;transitions[trans].text) {
            std::cout &lt;&lt; trans &lt;&lt; ". " &lt;&lt; cur-&gt;transitions[trans].text &lt;&lt; std::endl;
            trans += 1;
        }

        // Read input
        unsigned choice;
        std::cin &gt;&gt; choice;
        std::cin.ignore();

        // Check input is valid
        if (choice &lt; trans) {
            // Move to new state
            cur = cur-&gt;transitions[choice].next_state;
        }    
    }
    return 0;
}
</code></pre>

<p>Of course, a more mature version of the game would read the states and transitions from a data file rather than include them directly in the code.</p>
    </div>