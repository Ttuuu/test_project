<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So, I am assuming that you are aware that a more efficient algorithm for finding prime numbers can be written, so we'll ignore this aspect.</p>

<h3>Comments to the <code>prime_finder</code> method</h3>

<ul>
<li><p>If we pass <code>num=1</code> to the method, will it return what you expect? Do you consider 1 a prime number?</p></li>
<li><p>But even more important, the name of the method is misleading. The method does not really <strong>find prime numbers</strong> as the name suggests, it <strong>checks if a number is prime</strong>. It is very important to name methods properly, especially when other people have to read your code. If the name is bad, and a developer cannot understand what the method is doing, they might spend a lot of extra time reading the code. Even worse, if the method doesn't do what the name says it does, it might not be used properly and nasty bugs could be made.</p></li>
</ul>

<p>If you rename the method, you don't even need a comment explaining what it is doing:</p>

<pre><code>def is_prime(num: int) -&gt; bool:
</code></pre>

<p>You will then also see that the statement below will make more sense:</p>

<pre><code>while True:
    if is_prime(num):
        ...
</code></pre>

<h3>Comments to the rest of the code</h3>

<p>In the code that goes after, you mix the logic of finding the next prime number and printing numbers. What if you want to reuse your code that finds prime numbers somewhere else but don't need to print them?</p>

<p>I would create a separate method that returns the next prime number using the concept of <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a>:</p>

<pre><code>def next_prime_number() -&gt; int:
    num = 1
    while True:
        if is_prime(num):
            yield num
    num += 1
</code></pre>

<p>Then, if you need, you can print them:</p>

<pre><code>for prime_number in next_prime_number():
    print(prime_number)
</code></pre>

<p>You can also add waiting, obviously.</p>

<p>Now, if you want to add multithreading, you will have to modify the <code>next_prime_number</code> method, and you won't have problems with printing in multiple threads.</p>
    </div>