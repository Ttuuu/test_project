<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style and code</h2>
<ul>
<li><p>For max integer value use <code>Number.MAX_SAFE_INTEGER</code></p>
</li>
<li><p>Use <code>===</code> rather than <code>==</code> and <code>!==</code> rather than <code>!=</code></p>
</li>
<li><p><code>typeof</code> is not a function. <code>typeof(numToFormat) == 'number';</code> can be written <code>typeof numToFormat === "number";</code></p>
</li>
<li><p>Use <code>isNaN(number)</code> to determine if a variable is <em>"Not a Number"</em></p>
</li>
<li><p>Use <code>Number(val)</code> to convert to a number rather than <code>parseFloat(val)</code></p>
</li>
<li><p>If you are going to exit on <code>NaN</code> or out of range do it early rather than after you process everything.</p>
</li>
<li><p>If a variable is not going to change define it as a constant with <code>const</code></p>
</li>
<li><p><code>neat</code> is a rather ambiguous name for the function. Maybe <code>formatNumber</code> would be better</p>
</li>
<li><p>Spaces between operators make the code more readable. <code>nextLoop = i+3;</code> as <code>nextLoop = i + 3;</code></p>
</li>
<li><p>Space between <code>if</code> and <code>(</code> also <code>for (</code> , <code>while (</code> and other tokens followed by <code>(</code>. And space between <code>) {</code></p>
</li>
</ul>
<h2>Logic</h2>
<p>The whole thing feels over complicated. For values under 1000 all you do is maybe replace the decimal point. For other values you need only handle the thousands separator.</p>
<p>There is also the issues of negative numbers. You don't return a string saying No can do. The value you return will have a 1000 separator in the wrong place if the number length is divisible by 3 eg <code>neat(-100)</code> returns <code>"-.100,00"</code></p>
<h2>Rewrite</h2>
<ul>
<li><p>The rewrite fixes the negative number problem.</p>
</li>
<li><p>I added a places variable so that the number of decimal places can be set.</p>
</li>
<li><p>Uses default parameters to define defaults for (new <code>places</code> arg),   <code>thousandSep</code> and <code>decimalSep</code></p>
</li>
<li><p>Rather than return error string I return the number argument. It is likely that if the value overflows or is not a number the calling code will not check if the result is one of the error strings. This way what goes in will still have meaning when it comes out.</p>
</li>
</ul>
<p>Code</p>
<pre><code>function formatNumber(number, thousandSep = ",", decimalSep = ".", places = 2) {
    if (isNaN(number)) { return  number }
    var result = number &lt; 0 ? "-" : "";
    number = Math.abs(number);
    if (number &gt;= Number.MAX_SAFE_INTEGER) { return result + number.toFixed(places) }
    
    var place = Math.ceil(Math.log10(number));

    if (place &lt; 3) { 
        return result + number.toFixed(places).replace(".", decimalSep);
    }

    while (place--) {
        result += number / 10 ** place % 10 | 0;
        if (place &gt; 0 &amp;&amp; place % 3 === 0) { result += thousandSep }
    }
    
    return result + decimalSep + number.toFixed(places).split(".")[1];
}
</code></pre>
    </div>