<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid. For this program, I'd advocate removing it everywhere and using the <code>std::</code> prefix where needed.</p>

<h2>Don't use <code>system("cls")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions <code>cls()</code> and <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  For example, if your terminal supports <a href="http://en.wikipedia.org/wiki/ANSI_escape_code" rel="nofollow noreferrer">ANSI Escape sequences</a>, you could use this:</p>

<pre><code>void cls()
{
    std::cout &lt;&lt; "\x1b[2J";
}
</code></pre>

<h2>Eliminate unused variables</h2>

<p>The variable <code>s</code> in your <code>Game::play()</code> code is defined but never used.  Also, <code>left</code> and <code>right</code> within <code>Grid</code> are never used.  Since unused variables are a sign of poor code quality, you should seek to eliminate them.  Your compiler is probably smart enough to warn you about such things if you know how to ask it to do so.</p>

<h2>Use rational default constructors</h2>

<p>If you provide a constructor for <code>Grid</code> that initializes its contents to all <code>.</code>, then the constructor for <code>Game</code> is shorter and much more readable.</p>

<pre><code>Grid() : subgrid{'.','.','.','.','.','.','.','.','.'} {}
</code></pre>

<h2>Eliminate global variables</h2>

<p>In this case, the only global variable is <code>rule</code> which is only used once.  I'd move it to within <code>Game::display()</code> and declare it like this:</p>

<pre><code>static const std::string rule(80, '_');
</code></pre>

<h2>Delegate more to the subclass</h2>

<p>The <code>Grid</code> object is not doing very much.  It could be assisting more in the <code>display()</code> and <code>checkWin()</code> tasks in particular.</p>

<h2>Eliminate unused <code>#include</code>s</h2>

<p>The <code>cstdlib</code> library is not required if you change <code>std::exit()</code> to simply <code>return</code> in <code>main</code>.</p>

<h2>Eliminate unimplemented code</h2>

<p>The <code>showScore()</code> code is missing and is never called anyway.  It could simply be deleted, along with the associated <code>case</code> statement and menu option.</p>

<h2>Use <code>const</code> where practical</h2>

<p>Member functions that don't alter the underlying object should be declared <code>const</code>.</p>

<h2>Use standard structures and algorithms</h2>

<p>One important and useful way to simplify code is to make better use of existing library code.  In particular, the Standard Template Library (STL) would be very helpful here.  For instance, you could use a <code>std:array</code> instead of a plain C array to represent each grid.  Internally, the representation could be <code>std::array&lt;char, 9&gt;</code> and translation from <code>x</code> and <code>y</code> coordinates could be done by member functions.  As an example:</p>

<pre><code>class Grid {
private:
    std::array&lt;char, 9&gt; subgrid;

public:
    Grid() : subgrid{'.','.','.','.','.','.','.','.','.'} {}
    void set (int i, char cell) { subgrid[i] = cell; }
    char get (int i) const { return subgrid[i]; }
    char get (int x, int y) const { return subgrid[x+3*y]; }
    bool checkWin(char player) const {
        // check for col and row wins
        for (int i=0; i &lt; 3; ++i) {
            if((player == get(i, 0) &amp;&amp; 
                player == get(i, 1) &amp;&amp;
                player == get(i, 2)) || 
               (player == get(0, i) &amp;&amp; 
                player == get(1, i) &amp;&amp;
                player == get(2, i))) {
                    return true;
            }
        }
        // check diagonals
        return (player == get(1,1) &amp;&amp; 
               ((player == get(0,0) &amp;&amp; player == get(2,2))
             || (player == get(0,2) &amp;&amp; player == get(2,0))));
    }
    std::string line(int linenum) const {
        std::string ret;
        if (linenum &gt;= 0 &amp;&amp; linenum &lt; 3) {
            for (int i=0; i&lt;3; ++i) {
                ret += get(i, linenum);
            }
        }
        return ret; 
    }
};
</code></pre>

<p>Now the <code>Game::display()</code> is much neater and smaller:</p>

<pre><code>void Game::display()
{
    cls();
    static const std::string rule(80, '_');
    std::cout &lt;&lt; "\n  ULTIMATE TIC TAC TOE\n" &lt;&lt; rule &lt;&lt; '\n';

    for (int i=0; i &lt; 9; i += 3) {
        for (int line = 0; line &lt; 3; ++line) {
            for (int j=0; j &lt; 3; ++j) {
                if (line == 1 &amp;&amp; (cur-1 == i+j)) {
                    std::cout &lt;&lt; " &gt; " &lt;&lt; grid[i+j].line(line) &lt;&lt; " &lt; ";
                } else {
                    std::cout &lt;&lt; "   " &lt;&lt; grid[i+j].line(line) &lt;&lt; "   ";
                }
            }
            std::cout &lt;&lt; "\n";
        }
        std::cout &lt;&lt; "\n\n";
    }
}
</code></pre>

<h2>Avoid <code>break</code>ing loops</h2>

<p>Rather than use <code>break</code> to exit a loop, it's usually better to simply declare the actual loop exit at the top so that someone reading your code doesn't have to wonder where the actual exit lies.  For example, one way to rewrite <code>Game::input</code> is like this:</p>

<pre><code>void Game::input(int&amp; g)
{
        int s;
        bool badinput = false;
        for (s = 0; s &lt; 1 || s &gt; 9 || grid[g-1].get(s-1) != '.'; badinput = true) {
                display();
                if (badinput) {
                    std::cout &lt;&lt; "Try again";
                }
                std::cout &lt;&lt; "\n  Player " &lt;&lt; player &lt;&lt; " - Enter subgrid: ";
                std::cin &gt;&gt; s;
        }
        grid[g-1].set(s-1, player);
        g = s;
}
</code></pre>

<h2>Omit <code>return 0</code></h2>

<p>When a C or C++ program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so there is no need to put <code>return 0;</code> explicitly at the end of <code>main</code>.  </p>

<p><strong>Note:</strong> when I make this suggestion, it's almost invariably followed by one of two kinds of comments:  "I didn't know that." or "That's bad advice!"  My rationale is that it's safe and useful to rely on compiler behavior explicitly supported by the standard.  For C, since C99; see ISO/IEC 9899:1999 section 5.1.2.2.3:</p>

<blockquote>
  <p>[...] a return from the initial call to the <code>main</code> function is equivalent to calling the <code>exit</code> function with the value returned by the <code>main</code> function as its argument; reaching the <code>}</code> that terminates the <code>main</code> function returns a value of 0.</p>
</blockquote>

<p>For C++, since the first standard in 1998; see ISO/IEC 14882:1998 section 3.6.1:</p>

<blockquote>
  <p>If control reaches the end of main without encountering a return statement, the effect is that of executing return 0;</p>
</blockquote>

<p>All versions of both standards since then (C99 and C++98) have maintained the same idea.  We rely on automatically generated member functions in C++, and few people write explicit <code>return;</code> statements at the end of a <code>void</code> function.  Reasons against omitting seem to boil down to <a href="https://stackoverflow.com/questions/2581993/what-the-reasons-for-against-returning-0-from-main-in-iso-c/2582015#2582015">"it looks weird"</a>.  If, like me, you're curious about the rationale for the change to the C standard <a href="https://stackoverflow.com/questions/31394171/what-was-the-rationale-for-making-return-0-at-the-end-of-main-optional">read this question</a>.  Also note that in the early 1990s this was considered "sloppy practice" because it was undefined behavior (although widely supported) at the time.  </p>

<p>So I advocate omitting it; others disagree (often vehemently!)  In any case, if you encounter code that omits it, you'll know that it's explicitly supported by the standard and you'll know what it means.</p>
    </div>