<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, don't use php's super globals with Laravel. For the most part you can use the <a href="https://laravel.com/docs/5.8/requests" rel="nofollow noreferrer">Request</a> class for this. With most things in Laravel, the <code>Request</code> can be accessed in multiple different ways including <a href="https://laravel.com/docs/5.8/controllers#dependency-injection-and-controllers" rel="nofollow noreferrer">injection</a> (where it is resolved from the <a href="https://laravel.com/docs/5.8/container#resolving" rel="nofollow noreferrer">service container</a>), <a href="https://laravel.com/docs/5.8/facades" rel="nofollow noreferrer">facades</a> and <a href="https://laravel.com/docs/5.8/helpers#method-request" rel="nofollow noreferrer">helper functions</a>. For this example I'll use the request helper function:</p>

<pre><code>$filter = request()-&gt;input('filter'); 
</code></pre>

<p>*You could also do <code>request('filter')</code> but for some params this could cause an issue.</p>

<hr>

<p>As for you query I would strongly recommend using <a href="https://laravel.com/docs/5.8/eloquent" rel="nofollow noreferrer">Eloquent</a> instead of the query builder in this case. </p>

<p>You should already have a <code>User</code> model in your app directory so you should just need to create the <code>Group</code> and <code>Meeting</code> models. You can run the following command to do this:</p>

<pre><code>php artisan make:model Group &amp;&amp; php artisan make:model Meeting
</code></pre>

<p>Then add the following to your <code>User</code> model:</p>

<pre><code>public function meetings()
{
    return $this-&gt;hasMany(Meeting::class, 'owned_by_id');
}

public function groups()
{
    return $this-&gt;belongsToMany(Group::class);
}
</code></pre>

<p>and add the following to your <code>Group</code> model:</p>

<pre><code>public function users()
{
    return $this-&gt;belongsToMany(User::class);
}
</code></pre>

<p>finally, you don't need to do this yet but in your <code>Meeting</code> model:</p>

<pre><code>public function user()
{
    return $this-&gt;belongsTo(User::class, 'owned_by_id');
}
</code></pre>

<hr>

<p>The above will allow you to have a controller method looking something like:</p>

<pre><code>public function readData()
{
    $filter = request()-&gt;input('filter');

    return \App\User::with('groups')-&gt;withCount(['meetings' =&gt; function ($query) use ($filter) {

        $filter = in_array($filter, ['month', 'quarter', 'year']) ? $filter : 'day';

        $query-&gt;where('company_id', 1)-&gt;whereRaw("$filter(created_at)", today()-&gt;$filter);
    }]);
}
</code></pre>

<p><code>groupname</code> will now be available as <code>group-&gt;name</code> and the count will be available as <code>meetings_count</code>.</p>
    </div>