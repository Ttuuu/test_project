<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an interesting code. </p>

<hr>

<p><strong>Criticism:</strong></p>

<blockquote>
<pre><code>def testConfigStackYaml(self):
</code></pre>
</blockquote>

<ul>
<li>Can we rename these functions to <code>snake_case</code> such as <code>test_config_stack_yaml</code> maybe.</li>
</ul>

<blockquote>
<pre><code>assert not bad_list, "Expected config/&lt;stack_name&gt;.yaml files to exist: %s" % bad_list
</code></pre>
</blockquote>

<ul>
<li>You can access unit test asserts from `TestCas</li>
<li>How:

<ul>
<li><code>self.assertTrue(expr, msg=None)</code></li>
<li><code>self.assertFalse(expr, msg=None)</code></li>
</ul></li>
<li>More information at: <a href="https://docs.python.org/3.6/library/unittest.html#unittest.TestCase.assertTrue" rel="nofollow noreferrer">https://docs.python.org/3.6/library/unittest.html#unittest.TestCase.assertTrue</a></li>
</ul>

<blockquote>
<pre><code>expected_file = "%s/config/%s.yaml" % (stack_name, stack_name)
</code></pre>
</blockquote>

<ul>
<li>I personally like using the new formatter. <code>%</code> is more unreadable compared to
<code>"{stack_name}/config/{stack_name}".format(stack_name=stack_name)</code></li>
<li>We can also use <code>os.path.join</code> to join sections of a path. This makes our intention clear.</li>
</ul>

<blockquote>
<pre><code>if __name__ == "__main__":
    unittest.main()
</code></pre>
</blockquote>

<ul>
<li>If you add this to the end of the file you can run these test files individually as a simple script.</li>
</ul>

<hr>

<p><strong>Creating a custom assert</strong></p>

<ul>
<li>I recommend creating a memeber function named <code>assert_config_exists</code>.</li>
<li>Parameters: <code>path_format</code>, <code>message_format</code></li>
</ul>

<pre><code>def assert_config_exists(self, path_format: str, message_format: str):
    bad_list = []
    for stack in glob('*/config'):

        stack_name = os.path.dirname(stack)
        expected_file = path_format.format(stack_name=stack_name)

        if not os.path.isfile(expected_file):
            bad_list.append(expected_file)

    self.assertFalse(bad_list, message_format.format(bad_list=bad_list))
<span class="math-container">```</span>
</code></pre>
    </div>