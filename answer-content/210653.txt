<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>not directly answering your question, but just a notice:
I would say the more elegant way would be just extending the <code>std::bitset</code> and add the extra methods you need, for ex. <code>to_bytes()</code>:</p>

<pre><code>template &lt;size_t N&gt;
class bitpattern : public std::bitset&lt;N&gt;
{
public:
    using byte_t = uint8_t;
    static constexpr size_t num_bytes = N/8 + ((N % 8 == 0) ? 0 : 1);
    using bytes_t = std::array&lt;byte_t, num_bytes&gt;;

    // declare approprite constructors and forward to the base class
    // using base class implementation

    // declare the extra functions you need, for ex.
    // (this is not the efficienst method, but just for demonstration)
    bytes_t to_bytes() const noexcept
    {
        bytes_t bytes;

        for (size_t bix = 0;  bix &lt; num_bytes; bix++)
        {
            byte b = 0;
            for (size_t bitix = 0; (bitix&lt;8) &amp;&amp; (bix*8+bitix &lt; N); bitix++)
                if (this-&gt;operator[] (bix*8 + bitix))
                    b |= (0x01 &lt;&lt; bitix);
            bytes[bix] = b;
        }

        return bytes;
    }
};
</code></pre>

<p>Another way would be stay at <code>std::bitset</code> and using the appropriate non-class utility functions, for ex:</p>

<pre><code>template &lt;size_t N&gt;
std::vector&lt;uint8_t&gt; to_bytes(const std::bitset&lt;N&gt;&amp;);
</code></pre>

<p>This way (1. or 2.) you can take advantage of the functionalities <code>std::bitset</code> already offers.</p>
    </div>