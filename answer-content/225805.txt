<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have faced the same exam as well, and frank honestly I don't understand how these guys assume that someone who doesn't know algorithm will be able to solve it in timed fashion exam </p>

<p>The answer is you don't need to apply sorting, you need to find number of swaps , this one has better performance rather than Selection algorithm , as it reaches o(log(n)) in performance </p>

<p>The idea is find cycles if a needs to replace b and b needs to replace a then this is a cycle of 2 nodes which requires # of swaps = number of nodes -1 </p>

<p>Cycle is when you reach a node that requires to be swapped so a=&gt;b, b=&gt;c, c=&gt;d and d=&gt;c since c requires a swap then this is a cycle, to achieve that we create a boolean array size of n, we loop to find cycles, if an element is checked then we found a cycle, if element is placed in its proper position then this is an element that cycles itself and requires 0 swaps    </p>

<pre><code>private static int CheckMinNumberOfSwaps(int[] arr)
    {
        var total = 0;
        var @checked = new bool[arr.Length];

        for (var index = 0; index &lt; arr.Length; index++)
        {
            @checked[index] = false;
        }

        for (var index = 0; index &lt; arr.Length; index++)
        {
            var entry = arr[index];
            var entryIndex = entry -1;

            if (@checked[entryIndex])
            {
                continue;
            }

            if (entryIndex == index)
            {  //entry is in the right spot
                @checked[entryIndex] = true;
                continue;
            }

            //draw cycle between nodes 
            var counter = 0;
            while (!@checked[entryIndex])
            {
                counter++;
                @checked[entryIndex] = true;
                entry = arr[entryIndex];
                entryIndex = entry - 1;
            }

            total += counter -1 ;
        }

        return total;
    }
</code></pre>
    </div>