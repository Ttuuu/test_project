<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming the fields have definitions like the following</p>

<pre><code>public class TextboxControl
{
    public object Value { get; set; }
}

public class CheckboxControl
{
    public bool Checked { get; set; }
}
</code></pre>

<p>I would create some extensions for them in order to reduce code duplication and increase readability, and pretty much this is the core idea.</p>

<pre><code>public static class ControlsExtensions
{
    public static bool HasValue(this TextboxControl source) 
            =&gt; decimal.TryParse(source.Value.ToString(), out _);

    public static decimal GetValue(this TextboxControl source) 
            =&gt; decimal.Parse(source.Value.ToString());

    public static decimal GetOptionalValue(this TextboxControl source, CheckboxControl checkbox) 
    {
        if (checkbox.Checked)
        {
            decimal value = decimal.TryParse(source.Value.ToString(), out value) ? value : 0;
            return value;
        }
        return default(decimal);
    }
}
</code></pre>

<p>Then my next step in refactoring would to use these extensions and rearrange a bit the lines to increase cohesion</p>

<pre><code>private void getTotals()
{
  //Check if we have some valid numbers, stop if we don't
    if (   !curPurc1.HasValue()
        || !curPurc2.HasValue()
        || !curPurc3.HasValue()
        || !curPurc4.HasValue()
        || !curItem1Tot.HasValue()
        || !curItem2Tot.HasValue()
        || !curItem3Tot.HasValue()
        || !curItem4Tot.HasValue()
        || !LessItem1Cost.HasValue()
        || !LessItem2Cost.HasValue()
        || !LessItem3Cost.HasValue()
        || !LessItem4Cost.HasValue()
        || !LessItem5Cost.HasValue()           
        )
        return;

    //Add up some values which are always part of the subtotal and then the ditemx ones, which will be 0 or set to a numerical value depending if the checkbox is checked
    decimal subtotals = curPurc1.GetValue() + curPurc2.GetValue() + curPurc3.GetValue() 
                      + curPurc4.GetValue() + curItem1Tot.GetValue() + curItem2Tot.GetValue() 
                      + curItem3Tot.GetValue() + curItem4Tot.GetValue() 
                      + Item1RateYN.GetOptionalValue() + Item2RateYN.GetOptionalValue() + Item3RateYN.GetOptionalValue() + Item4RateYN.GetOptionalValue();

    //Get total minus the cost of the property (curPurc1d)
    decimal plusSubTotal = subtotals - curPurc1.GetValue();


    //add up all the "less" items to know how much to reduce by 
    decimal lessTotals = LessItem1Cost.GetValue() + LessItem2Cost.GetValue() + LessItem3Cost.GetValue() + LessItem4Cost.GetValue() + LessItem5Cost.GetValue();

    //Total Balance due
    //subtotal minus the 'less' values total
    decimal total = (subtotals - lessTotals);

    //update the relevant UI field
    costPlusSubTotal.Value = plusSubTotal;
    subtotal.Value = subtotals;
    balanceDueTot.Value = total;
    totalLess.Value = lessTotals;
}
</code></pre>

<p>Then to make the code more C#-like, I would</p>

<ul>
<li><p>use <code>var</code> instead of <code>decimal</code> </p></li>
<li><p>rename <code>getTotals</code> to <code>GetTotals</code> </p></li>
<li>use<code>_camelCase</code> for private fileds (so <code>Less</code> becomes <code>_less</code>)</li>
<li>reduce redundant parenthesis from <code>(subtotals - lessTotals)</code></li>
<li>use brackets <code>{}</code> for the <code>return</code> statement</li>
</ul>

<p>Notice that I also grouped the update of the UI at the end of the method.</p>

<p>I would have some comments also for the name of the method itself as <code>GetTotals</code> implies that the method returns something, but the return signature is <code>void</code>. One idea is to use something like <code>CalculateTotals</code>.</p>
    </div>