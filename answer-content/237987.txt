<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unorthodox choices</h1>

<p>Before having a deeper look at the code, let's look at what the "Unorthodox choices" listed in the question</p>

<ol>
<li><p>Using <code>array[-1]</code> is perfectly valid Python and will very likely be considered much more readable and Pythonic than using <code>len(...)-1</code>.</p></li>
<li><p><code>main</code> function</p>

<p>Having the <code>main</code> function inside the class and call it directly when you create the object is IMHO much more unorthodox. I personally would discourage it, though it's probably not unheard of. What is usually used in Python is a separate <code>main()</code> function with the game loop as well as the infamous <code>if __name__ == "main":</code>, also known as <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">top-level script environment in technical terms</a>. All code inside the body of this <code>if</code> is only run when you execute the file as a script, instead e.g. <code>import</code>ing something into another file.</p></li>
<li><p><code>play</code> function, <code>if</code> statement</p>

<p>It's easy combine both conditions: </p></li>
</ol>

<pre><code>if not self.playedWords or (self.ruleOne() and self.ruleTwo()): 
    self.addWord()
else:
    self.gameOver()
</code></pre>

<p>It would also be possible to invert the condition:</p>

<pre><code>if self.playedWords and not (self.ruleOne() or self.ruleTwo()): 
    self.gameOver()
else:
    self.addWord()
</code></pre>

<ol start="4">
<li><p><code>if word == ''</code></p>

<p>Python encourages you to be <a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python" rel="nofollow noreferrer">explicit</a> in your code. Just for the sake of the argument, <code>if not word:</code> would have a similar effect.</p></li>
<li><p><code>word.lower(), word.strip(), self.currentWord = word</code></p>

<p>It's possible to chain those calls: <code>self.currentWord = word.lower().strip()</code>. Quick note here: <code>.strip()</code> <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer">only removes trailing and leading whitespace</a>. If the user entered multiple words, the whitespace in between them will not be affected.</p></li>
</ol>

<h1>Style</h1>

<p>I highly recommend having a look at the official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> aka PEP 8 (again). Some key takeaways of that read should be:</p>

<ul>
<li>prefer to use <code>lowercase_with_underscores</code> for function and variable names.</li>
<li><code>UpperCase</code> is "reserved" for class names (no issue in the code here)</li>
<li>docstrings should be defined inside the function, i.e. after <code>def what_ever_name():</code>, not before. Otherwise Python's <code>help(...)</code> and also most IDEs will not pick it up correctly. There is more about <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings in PEP 257</a>.</li>
</ul>

<p>Fortunately, there is a wide variety of tools that can help with keeping a consistent style, even when projects grow larger. <a href="https://codereview.meta.stackexchange.com/a/5252/92478">This list</a> on Code Review Meta provides you with a good starting point to get going.</p>

<h1>Code</h1>

<p>As I already said, I would not recommend starting the game immediately in <code>__init__</code>. even if you keep the main game loop inside the class, the user should have to trigger the game explicitly.</p>

<p>The member variable <code>self.currentWord</code> is not strictly needed. By allowing a word as input for <code>ruleOne</code>, <code>ruleTwo</code>, and <code>addWord</code>, it would be easier to see what's going on.</p>

<p>With a little bit of rewriting, a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a> could be used. A <code>set</code> does not allow duplicate members and has faster membership tests compared to a list (constant time vs. linear time). However, <code>set</code>s don't preserve the order of elements, i.e. the class has to store the last word in a member variable.</p>

<p>Having a <code>last_word</code> instead of <code>current_word</code>/<code>currentWord</code> would also be closer to what one might expect when looking at the game rules.</p>
    </div>