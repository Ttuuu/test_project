<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Due to time constraints, I have only viewed the first two classes, here are my comments:</p>

<h2>Main.java</h2>

<ol>
<li><p>There is no need for a private default constructor, unless you explicitly want to prevent from calling that method (e.g. in a singleton design pattern)</p></li>
<li><p>In my eyes, the whole class is redundant. the <code>main()</code> method can be placed in <code>Calculator</code>. it is common practice to have a main method that initializes the class it resides in. </p></li>
</ol>

<h2>Calculator.java</h2>

<ol>
<li><p><strong>inconsistency:</strong> in <code>run()</code> the exit command's literal is <code>"\\exit"</code> while in <code>getCommandMessage()</code> it is <code>"/exit"</code> so not sure how to exist the program. </p></li>
<li><p><strong>Separation of Concerns:</strong> Calculator class is responsible for reading input from console, parsing and validating, and write to the console. When you will want to evolve this program to have an html interface, you wil have to rewrite the entire class. According to the principle of <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">Separation of Concerns</a>, you should have separate classes for reading and writing input. this design allows for having the same <code>Calculator</code> to work with different sources of input and destinations of output. </p></li>
<li><p><strong>Make use of enums as classes:</strong> Java enums are powerful constructs that allow to attach properties and behaviors (=methods) to the set of values. as a rule of thumb, every closed set of values should be expressed as an enum. in your case, you started fine with <code>InputType</code>, but what about the set of commands? . if you have a <code>Command</code> enum, you can assign <code>message</code> String property to every value (you can have an <code>UNKNOWN</code> command as well) and that can replace the whole <code>getCommandMessage()</code>.  regarding <code>determineInputType()</code>: you can assign a <code>Predicate&lt;String&gt;</code> to every enum value and apply that predicate to the input String. </p></li>
</ol>

<p>here's an illustration of what I am talking about:</p>

<pre><code>enum InputType {
    COMMAND((userInput) -&gt; userInput.charAt(0) == '/'),
    ASSIGNMENT((userInput) -&gt; userInput.indexOf("=") &gt; -1),
    CALCULATION((userInput) -&gt; true);  // must be last enum value

    Predicate&lt;String&gt; isUserInputApply;

    InputType(Predicate&lt;String&gt; isUserInputApply) {
        this.isUserInputApply = isUserInputApply;
    }

    public static InputType determineInputType(String userInput) {
        return Arrays.stream(values())
            .filter(inType -&gt; inType.isUserInputApply.test(userInput))
            .findFirst()
            .orElse(CALCULATION);
    }
}
</code></pre>
    </div>