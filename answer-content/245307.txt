<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some initial thoughts...</p>
<h1>Consider your interface</h1>
<p>The public methods of your class are the one's that you're expecting to be called from outside.  Your <code>generateDungeon</code> methods are both marked as public. These methods don't really seem like they're designed to be called more than once.  The version of <code>generateDungeon</code> that takes in a <code>Tile</code>, in particular seems like it's an internal method, so should probably be private.</p>
<p>Consider either having a method:</p>
<pre><code>public static Dungeon generateDungeon(int depth)
</code></pre>
<p>Which returns a new instance of a dungeon, or having the <code>generateDungeon</code> reset the list of <code>Tile</code>s when generate is called.</p>
<h1>Members vs Parameters</h1>
<p>Depth seems like it is really just an input into your generation algorithm.  It doesn't really seem to make sense to get the depth of the dungeon, since it doesn't tell me much. Do you need it as a property?  Does it really make sense for a client to be able to call <code>setDepth</code>?</p>
<h1>final</h1>
<p>If you're not expecting a value to change after it's been constructed, consider making it <code>final</code>.  This gives a hint to the reader that they can assume the value is constant and the compiler can help enforce this.  So, for example after a tile has been constructed, does it really make sense to set the x/y/tileType?  If not, then consider getting rid of the setters and making the fields <code>final</code>.</p>
<h1>Tile access</h1>
<p>At the moment, your storing your tiles in a list. When you want to find a particular tile, you iterate through the list until you find a tile with the correct x/y coordinates.  This is ok with a small number of items, however it doesn't scale particularly well, so when you start getting a lot of <code>Tile</code>s in the list it's going to take a while.  Consider using a different strategy for storing the Tiles which would allow more direct access.  One approach might be to use a HashMap instead and encode a key from the x/y coordinates.  Something as simple as this might work...</p>
<pre><code>private HashMap&lt;String, Tile&gt; tiles = new HashMap&lt;&gt;();

public Tile getTile(int x, int y) {
    String key=x+","+y;
    return tiles.containsKey(key) ? tiles.get(key) :  new Tile(0,0,new TileType(-1,0),false,false,false,false);
}

private void addTile(Tile tile) {
    String key=tile.getX()+","+tile.getY();
    _tiles.put(key, tile);
}
</code></pre>
<p>You already centralise the way that you check/get the tiles.  However, centralising the way that you add tiles would make it easier to change the storage method.</p>
<h1>getRandomTileType</h1>
<p>This method seems like it's doing a lot of work that it doesn't need to.  It generates four different types of tiles and calculates weights for every single tile generated.  This is dependant on the depth, however you're using the depth property, rather than the parameter depth when calling this method, so the seed passed in is always the same.  All of these tiles/weights could be generated once at the beginning of the generation and reused.</p>
    </div>