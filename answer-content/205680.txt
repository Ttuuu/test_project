<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>K&amp;R C requires all variables to be declared at the start of their enclosing block.  This is a bad habit to learn: it's much safer to declare variables where they can be initialised:</p>
<pre><code>/* these can already be initialised where they are declared */
int state = OUT;
int histo[MAXLEN+1] = { 0 };  /* C90 */
int counter = 0;
</code></pre>

<pre><code>/* reduce scope, and never have uninitialized value */
for (int j = 0; j &lt; histo[i]; ++j)  /* C99 */
</code></pre>
<hr>
<p>We could remove the need to subtract 1 from the length when updating <code>histo</code> if we reserve the first element for long words instead of the last:</p>
<pre><code>        if (state == IN &amp;&amp; counter &gt; 0) {
            if (counter &lt;= MAXLEN)
                ++histo[counter];
            else
                ++histo[0];
        }
</code></pre>
<p>We obviously need to make a corresponding change to the printing:</p>
<pre><code>for (int i = 1;  i &lt;= MAXLEN;  ++i) {
    if (MAXLEN &lt; 10)
        printf(" %1d | ", i);
    else if (MAXLEN &lt; 100)
        printf(" %2d |", i);
    else
        printf(" %3d |", i);
    for (int j = 0;  j &lt; histo[i];  ++j)
        putchar('*');
    putchar('\n');
}
</code></pre>
<hr>
<p>We can avoid the <code>if</code>/<code>else</code> chain on <code>MAXLEN</code> in this loop, by choosing the formatting string in advance:</p>
<pre><code>const char *format = "";
if (MAXLEN &lt; 10) {
        format = " %1d | ";
} else if (MAXLEN &lt; 100) {
        format = " %2d | ";
}  else {
        format = " %3d | ";
}

for (int i = 1;  i &lt;= MAXLEN;  ++i) {
    printf(format, i);
    for (int j = 0;  j &lt; histo[i];  ++j)
        putchar('*');
    putchar('\n');
}
</code></pre>
<p>That might not look like an improvement, but with a small change, we can use the same format string to insert <code>&gt;</code> for the over-long words, too:</p>
<pre><code>const char *format = "";
if (MAXLEN &lt; 10) {
        format = "%c%1d | ";
} else if (MAXLEN &lt; 100) {
        format = "%c%2d | ";
}  else {
        format = "%c%3d | ";
}

for (int i = 1;  i &lt;= MAXLEN;  ++i) {
    printf(format, ' ', i);
    for (int j = 0;  j &lt; histo[i];  ++j)
        putchar('*');
    putchar('\n');
}

/* over-long words */
printf(format, '&gt;', MAXLEN);
for (int j = 0; j &lt; histo[0]; ++j)
    putchar('*');
putchar('\n');
</code></pre>
<p>Going beyond the expected level of knowledge, we could even compute the necessary length, and pass it using <code>%*d</code>:</p>
<pre><code>int width = 1;
for (int i = MAXLEN;  i &gt;= 10;  i /= 10) {
    ++width;
}

for (int i = 1;  i &lt;= MAXLEN;  ++i) {
    printf(" %*d | ", width, i);
    for (int j = 0;  j &lt; histo[i];  ++j)
        putchar('*');
    putchar('\n');
}

/* over-long words */
printf("&gt;%*d | ", width, MAXLEN);
for (int j = 0; j &lt; histo[0]; ++j)
    putchar('*');
putchar('\n');
</code></pre>
<p>That allows us to have non-constant <code>MAXLEN</code>, which will be to our advantage in future when we make this a function.</p>
<hr>
<p>Whilst the state machine is a good idea, it turns out we don't need to explicitly store <code>state</code>, because <code>counter</code> is always zero outside a word and non-zero once we're in one:</p>
<pre><code>while ((c = getchar()) != EOF) {
    if (c == ' ' || c == '\n' || c == '\t') {
        if (counter &gt; 0) {
            ++histo[counter &lt;= MAXLEN ? counter : 0];
            counter = 0;
        }
    } else {
        ++counter;
    }
}
</code></pre>
<hr>
<p>Did you spot the bug in this loop?  Probably not, because the bug is missing code <em>immediately after</em> the loop.  If the input stream ends during a word, we fail to count it.  We need to repeat the <code>if (counter &gt; 0)</code> test just after the loop, to catch that case.</p>
<hr>
<p>We have an unusual definition of "word" - in our source code, strings such as <code>++histo[counter-1];</code> count as single words.  Even in English text, we'd expect <code>text,</code> to register as a four-character word.  To fix this, we could consider only alphanumerics as word characters, and that could be a good introduction to the functions in <code>&lt;ctype.h&gt;</code>.</p>
<pre><code>while ((c = getchar()) != EOF) {
    if (isalnum(c)) {
        ++counter;
    } else {
        if (counter &gt; 0) {
            ++histo[counter &lt;= MAXLEN ? counter : 0];
            counter = 0;
        }
    }
}

if (counter &gt; 0) {
    ++histo[counter &lt;= MAXLEN ? counter : 0];
}
</code></pre>
<hr>
<p>Enhancement - we could avoid bars going off the right edge of the display, by calculating a scale factor first.  Here's my suggestion:</p>
<pre><code>#define MAXWIDTH 72             /* screen width available for bars */
</code></pre>

<pre><code>    double scale = 1.0;
    for (int i = 0;  i &lt;= MAXLEN;  ++i) {
        if (histo[i] * scale &gt; MAXWIDTH) {
            scale = 1.0 * MAXWIDTH / histo[i];
        }
    }
</code></pre>

<pre><code>        for (int j = 0;  j &lt; histo[i] * scale;  ++j) { putchar('*'); }
</code></pre>
<hr>
<p>Finally: it's not part of your C code, but there's no need for <code>cat</code> in the test.  We can simply redirect input like this:</p>
<pre class="lang-sh prettyprint-override"><code>./ch1-ex-1-13-01 &lt;ch1-ex-1-13-01.c
</code></pre>
<hr>
<h1>Modified code</h1>
<p>Applying all my suggestions, I got:</p>
<pre><code>/* Exercise 1-13. Write a program to print a histogram of the lengths of
   words in its input. It is easy to draw the histogram with the bars
   horizontal; a vertical orientation is more challenging. */

/* Solution 1: Horizontal Bars
 * */
#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;

#define MAXLEN  10  /* Any word longer than this will get counted in the
                       &gt;MAXLEN histogram. */

#define MAXWIDTH 72             /* screen width available for bars */

int main()
{
    int histo[MAXLEN+1] = { 0 }; /* element 0 counts over-length words */

    /* Perform the counting */
    int counter = 0;
    int c;
    while ((c = getchar()) != EOF) {
        if (isalnum(c)) {
            ++counter;
        } else {
            if (counter &gt; 0) {
                ++histo[counter &lt;= MAXLEN ? counter : 0];
                counter = 0;
            }
        }
    }

    if (counter &gt; 0) {
        ++histo[counter &lt;= MAXLEN ? counter : 0];
    }

    /* Calculate sensible scale */
    double scale = 1.0;
    for (int i = 0;  i &lt;= MAXLEN;  ++i) {
        if (histo[i] * scale &gt; MAXWIDTH) {
            scale = 1.0 * MAXWIDTH / histo[i];
        }
    }

    /* how wide are the labels? */
    int width = 1;
    for (int i = MAXLEN;  i &gt;= 10;  i /= 10) {
        ++width;
    }

    /* Write the output */
    for (int i = 1;  i &lt;= MAXLEN;  ++i) {
        printf(" %*d | ", width, i);
        for (int j = 0;  j &lt; histo[i] * scale;  ++j) { putchar('*'); }
        putchar('\n');
    }

    /* over-long words */
    printf("&gt;%*d | ", width, MAXLEN);
    for (int j = 0; j &lt; histo[0] * scale; ++j) { putchar('*'); }
    putchar('\n');
}
</code></pre>
    </div>