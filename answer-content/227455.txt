<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Much of what I wanted to say has already been said, but there's a few points I haven't seen being addressed yet:</p>

<ul>
<li>Why are the internal dictionaries lazily created? When someone creates a <code>Bijection</code> instance then they probably intend to actually use it, so you might as well create them up-front. It'll simplify the code.</li>
<li>When creating an inverse <code>Bijection</code>, why not link it to the current instance? That means that <code>b.Inverse.Inverse</code> will give you <code>b</code> again, instead of a new instance.
As with the internal dictionaries, creating the inverse instance up-front would simplify things. It's cheap, anyway - <code>Bijection</code> contains no state of its own other than the shared dictionaries.</li>
<li>What's the reason for using <code>SortedDictionary</code> instead of <code>Dictionary</code>?</li>
<li><code>Equals</code> contains a bug: you're performing the null-check against <code>obj</code> instead of <code>obj_bijection</code>. Note that instead of <code>var t = obj as T;</code>, followed by a null-check, you can also use <code>if (!(obj is T t))</code>.</li>
<li>What's the idea behind those overridden methods? The way your implementation works is that two <code>Bijection</code> instances are seen as equal when they refer to the same shared dictionaries (which is only true for <code>b.Equals(b.Inverse.Inverse)</code>).
It won't treat different dictionaries with the same content as equal. That's (unfortunately?) the expected behavior for <code>Equals</code>, so you might as well just not override it (the same goes for <code>GetHashCode</code>).</li>
<li><code>ToString</code>'s behavior is nonsensical - its result suggests that a <code>Bijection</code> really is a sorted dictionary.</li>
</ul>
    </div>