<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, it's good to see the public interface being documented.</p>

<p>There are however some problems:</p>

<ul>
<li><code>CreateSearchTree</code> is broken. When registering level 1 with <code>["1", "2", "3"]</code>, it marks both the <code>"2"</code> and <code>"3"</code> node as level 1. And when registering level 2 with <code>["1", "2"]</code>, the <code>"2"</code> node is not updated to level 2.
This causes various lookup failures, depending on the order in which rights were registered.</li>
<li>In some cases you're returning 0 instead of -1. That's because <code>TreeNode.AuthorizationLevel</code>'s default value is 0, and you're not explicitly initializing it to -1.</li>
</ul>

<p>Other things that could be improved:</p>

<ul>
<li>In <code>CreateSearchTree</code>, you could use value tuples instead of the old <code>Tuple</code> class.</li>
<li><code>== false</code> and <code>== true</code> are only necessary when you're working with nullable booleans, which is not the case here.</li>
<li>You don't need to call <code>ToString()</code> on a string.</li>
<li><code>Array.Sort</code> modifies its input, which means that <code>GetAuthorizationLevel</code> is modifying the <code>userRights</code> array. That's an unexpected side-effect that could cause trouble elsewhere.</li>
<li>There's a fair bit of code duplication between <code>SearchTree</code> and <code>TreeNode</code>. You can simplify <code>SearchTree</code> by giving it a single root node to which it can delegate its calls.</li>
</ul>

<hr>

<p>Regarding performance, using integer action IDs instead of strings would make this quite a bit faster - even with integer parsing overhead.</p>

<p>But with the number of actions being limited to about 40, a dictionary with a <code>ulong</code> as key (with each bit indicating the presence of a specific action ID) would be even faster. If the IDs are all within the 0-63 range, then the key can be generated with one binary-or and bit-shift operation per action ID. Otherwise, you'll need a lookup table that maps action IDs to bit-masks (which would work for integer as well as string IDs). Even with this lookup table, it's still several times faster than the tree-based approach, mostly because you can skip the expensive input-sorting operation.</p>
    </div>