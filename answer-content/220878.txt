<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<blockquote>
<pre class="lang-delphi prettyprint-override"><code>unit Coords;
     ^
</code></pre>
</blockquote>

<p>If you noticed the big letter, let me tell you this was a bad start. I saved the unit file as <code>Coords.pas</code>, which lead to a series of various files' edits. Not recommended. Stick to lower-case:</p>

<pre class="lang-delphi prettyprint-override"><code>unit coords;
</code></pre>

<hr>

<blockquote>
<pre class="lang-delphi prettyprint-override"><code>TCoords = class(TObject)
</code></pre>
</blockquote>

<p><code>TObject</code> class is implicit, so it may be omitted:</p>

<pre class="lang-delphi prettyprint-override"><code>TCoords = class
</code></pre>

<hr>

<blockquote>
<pre class="lang-delphi prettyprint-override"><code>private
</code></pre>
</blockquote>

<p>This protects members on unit scope only. Since I intended to protect members on class scope, I now use:</p>

<pre class="lang-delphi prettyprint-override"><code>strict private
</code></pre>

<hr>

<blockquote>
<pre class="lang-delphi prettyprint-override"><code>function IsInitialized: Boolean;
</code></pre>
</blockquote>

<p>This is not only unnecessary but it also clouded my judgment as for not having any <em>getters</em> nor <em>setters</em>, I now have:</p>

<pre class="lang-delphi prettyprint-override"><code>function GetCoordX: Integer;
function GetCoordY: Integer;
function GetPoint: TPoint;
procedure SetCoordX(const NewX: Integer);
procedure SetCoordY(const NewY: Integer);
procedure SetPoint(const NewPoint: TPoint);
</code></pre>

<p>Definitions can be found at the bottom of this answer.</p>

<hr>

<pre class="lang-delphi prettyprint-override"><code>// ...
</code></pre>

<p>Excessive commenting I found not helpful, only making a mess.</p>

<hr>

<p>I was not properly checking the input in all cases. This was remedied (I hope). Also, raising exceptions in case of error proved helpful.</p>

<hr>

<p>The <code>initialization</code> section along with the <code>PointOutOfReach</code> variable can be deleted, the more code I have, the less of its usefulness I saw, using structures like this one has proven more helpful:</p>

<pre class="lang-delphi prettyprint-override"><code>if (ACoords.X = MAXINT) or (ACoords.Y = MAXINT) then
begin
    raise Exception.Create('TCoords.Create: You cannot initialize `FCoords: TPoint` member to MAXINT coordinates');
end;
</code></pre>

<hr>

<h2>Code after review</h2>

<pre class="lang-delphi prettyprint-override"><code>unit coords;

{$mode objfpc}{$H+}

interface

uses
    Classes, SysUtils;

type
    TCoords = class
    strict private
        FCoords: TPoint;
        function GetCoordX: Integer;
        function GetCoordY: Integer;
        function GetPoint: TPoint;
        procedure SetCoordX(const NewX: Integer);
        procedure SetCoordY(const NewY: Integer);
        procedure SetPoint(const NewPoint: TPoint);
    public
        constructor Create; reintroduce; overload;
        constructor Create(const ACoords: TPoint); overload;
        constructor Create(const ACoordX, ACoordY: Integer); overload;
        function ToString(const Delimiter: string = ':'): string; reintroduce;
        property X: Integer read GetCoordX write SetCoordX;
        property Y: Integer read GetCoordY write SetCoordY;
        property P: TPoint read GetPoint write SetPoint;
    end;

implementation

constructor TCoords.Create;
begin
    inherited Create;

    FCoords := Point(MAXINT, MAXINT);
end;

constructor TCoords.Create(const ACoords: TPoint);
begin
    inherited Create;

    if (ACoords.X = MAXINT) or (ACoords.Y = MAXINT) then
    begin
        raise Exception.Create('TCoords.Create: You cannot initialize `FCoords: TPoint` member to MAXINT coordinates');
    end;

    FCoords := ACoords;
end;

constructor TCoords.Create(const ACoordX, ACoordY: Integer);
begin
    inherited Create;

    if (ACoordX = MAXINT) or (ACoordY = MAXINT) then
    begin
        raise Exception.Create('TCoords.Create: You cannot initialize `FCoords: TPoint` member to MAXINT coordinates');
    end;

    FCoords := Point(ACoordX, ACoordY);
end;

function TCoords.GetCoordX: Integer;
begin
    if FCoords.X = MAXINT then
    begin
        raise Exception.Create('TCoords.GetCoordX: `FCoords.X: Integer` is equal to MAXINT. It has not been initialized yet');
    end;

    Result := FCoords.X;
end;

function TCoords.GetCoordY: Integer;
begin
    if FCoords.Y = MAXINT then
    begin
        raise Exception.Create('TCoords.GetCoordY: `FCoords.Y: Integer` is equal to MAXINT. It has not been initialized yet');
    end;

    Result := FCoords.Y;
end;

procedure TCoords.SetCoordX(const NewX: Integer);
begin
    if NewX = MAXINT then
    begin
        raise Exception.Create('TCoords.SetCoordX: `NewX: Integer` value cannot equal MAXINT');
    end;

    FCoords.X := NewX;
end;

procedure TCoords.SetCoordY(const NewY: Integer);
begin
    if NewY = MAXINT then
    begin
        raise Exception.Create('TCoords.SetCoordY: `NewY: Integer` value cannot equal MAXINT');
    end;

    FCoords.Y := NewY;
end;

function TCoords.GetPoint: TPoint;
begin
    Result := Point(GetCoordX, GetCoordY);
end;

procedure TCoords.SetPoint(const NewPoint: TPoint);
begin
    SetCoordX(NewPoint.X);
    SetCoordY(NewPoint.Y);
end;

function TCoords.ToString(const Delimiter: string = ':'): string;
begin
    if Delimiter.IsEmpty then
    begin
        raise Exception.Create('TCoords.ToString: `Delimiter: string` argument is empty');
    end;

    // example: X=0, Y=1, Delimiter=' x ' would return '0 x 1'
    Result := GetCoordX.ToString + Delimiter + GetCoordY.ToString;
end;

end.
</code></pre>
    </div>