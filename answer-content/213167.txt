<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Too complex</h1>
<p>Your complexity is very high. My guess is between  <span class="math-container">\$O(n^2)\$</span> and <span class="math-container">\$O(n^3)\$</span>. I can think of a <span class="math-container">\$O(nLog(n))\$</span> solutions and there is likely a <span class="math-container">\$O(n)\$</span> solution.</p>
<p>You are very wasteful of CPU cycles, some example follow...</p>
<p>String don't need to be arrays to manipulate.</p>
<pre><code>const nextStr = str.split('').slice(1).join(''); // cost O(3n-2) n = str.length
// Can be O(n-1)
const nextStr = str.substring(1);
</code></pre>
<p>Don't add code not needed.</p>
<pre><code>currStr = str // cost O(n)  n = str.length
// Can be O(0)  as you don't need to copy it
</code></pre>
<p>Don't repeat operations.</p>
<pre><code>if (currSet.includes(item)) { currSet.splice(currSet.indexOf(item), 1)   // cost O(2n) 
                                                                         // n = currSet.length
// Can be O(n)
const idx = currSet.indexOf(item);
if (idx &gt; -1) { currSet.splice(idx, 1) }
</code></pre>
<h3>Strings</h3>
<p>When you copy a string the computer must step over every character. Unlike many languages in JS strings are not passed by reference, they are copied, thus passing a string to a function will have a complexity cost that matches the string length. You should avoid making copies of strings whenever you can.</p>
<h3>Fast search with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="nofollow noreferrer">Set</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a></h3>
<p>Use Sets and Maps. They create hash tables (cost <span class="math-container">\$O(n)\$</span>) that make finding items very fast <span class="math-container">\$O(1)\$</span>.</p>
<h3>Optimise and use information you have</h3>
<p>Check for opportunities to exit the function early. Eg if the remain characters to search is less than the number of characters in the set there is no need to search. If you find a match that is the same length as the set you dont need to search further. If the set is longer than the string to search you don't need to do the search.</p>
<hr>
<h2>Use appropriate language features.</h2>
<ul>
<li>Copy arrays with <code>[...array]</code> not <code>array.slice(0)</code></li>
<li>Iterate strings without splitting <code>for(const char of "A string of chars") {...</code></li>
</ul>
<h2>Example</h2>
<p>This uses Set to make locating matching character quick. If a match is found another set is used to count off characters as they are found. This gives you a complexity of around <span class="math-container">\$O(nLog(n))\$</span></p>
<p>It returns an empty string if nothing is found and it avoids copying string.</p>
<p>I have a feeling that there is an <span class="math-container">\$O(n)\$</span> solution but your question does not clearly define the problem and thus I will not invest any more time as it may all be for naught.</p>
<pre><code>function shortestSubStrContaining(str, chars){
    const charSet = new Set(chars);
    if (str.length &lt; chars.length) { return "" }
    var i = 0, start, minSize = str.length;
    done: while (i &lt; str.length) {
        if (charSet.has(str[i])) {
            const check = new Set(chars);
            check.delete(str[i]);
            let j = i + 1;
            while (j &lt; str.length) {
                if (check.has(str[j])) {
                    check.delete(str[j]);
                    if (check.size === 0) {
                        if (j - i &lt; minSize) {
                            minSize = j - i + 1;
                            start = i;
                            if (minSize === chars.length || str.length - (i + 1) &lt; minSize ) { 
                                break done;
                            }
                        }
                    }
                }
                j++
            }
        }
        i++;
        if (str.length - i &lt; chars.length) { break }
    }
    return str.substring(start, start + minSize); // if start undefined will return "" 
}             
</code></pre>
    </div>