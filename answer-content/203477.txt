<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using <code>Promise</code> when <code>async</code>/<code>await</code> is supported is a sign of an anti-pattern. The only case you ever manually build promise in an environment that supports <code>async</code>/<code>await</code> is when the asynchronous operation cannot be written linearly/when you can't <code>await</code> (e.g. <code>resolve</code> must be called in a callback).</p>

<pre><code>// You cannot really "await" this kind of API, hence the wrapper Promise.
foo() {
  return new Promise((resolve, reject){
    someAPIThatOnlyDoesCallbacks((err, data) =&gt; {
      if (err) reject(err)
      else resolve(data)
    })
  })
}
</code></pre>

<p>But in your case, <code>fetch</code> returns a promise, <code>response.json()</code> also returns a promise. You can just return the promise generated by the whole <code>fetch</code> operation itself.</p>

<pre><code>_get(url) {
  return fetch(url).then(r =&gt; r.json())
}
</code></pre>

<p>Next, consider using <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL" rel="nofollow noreferrer"><code>Url</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams" rel="nofollow noreferrer"><code>UrlSearchParams</code></a> to construct your url. This way, the url is constructed correctly. </p>

<pre><code>async suggest(url, param1, param2, ....){
  // Create the url
  const url = new URL(url)

  // Append the values
  url.searchParams.append('param1', param1)
  url.searchParams.append('param2', param2)

  // Construct the url
  return await this._get(url.toString())
}
</code></pre>

<p>On to other things, there's currently nothing in your class that is instance-specific (the base url is hardcoded, params are supplied at call time). You can simply export a bunch of stateless functions from the module instead of having to instantiate an instance.</p>

<pre><code>const getJSON = url =&gt; fetch(url).then(r =&gt; r.json())
const geocoderUrl = "https://geodata.nationaalgeoregister.nl/locatieserver/v3/"

export const suggest = async (query) {
  const url = new URL('suggest', geocoderUrl)
  url.searchParams.append('q', query)
  return await getJSON(url.toString());
}

export const lookup = async(id) =&gt; {
  const url = new URL('lookup', geocoderUrl)
  url.searchParams.append('id', id)
  return await getJSON(url.toString());
}
</code></pre>
    </div>