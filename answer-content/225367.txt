<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<p>The following methods are candidates for properties. A property is expected to return fast, without too much calculations and internal flow. I'm assuming <code>NHibernateUtil.GetClass</code> provides a fast lookup.</p>

<blockquote>
<pre><code>public virtual bool IsTransient()
{
    return Id == 0;
}

public virtual Type GetRealType()
{
    return NHibernateUtil.GetClass(this);
}
</code></pre>
</blockquote>

<pre><code>public virtual bool IsTransient =&gt; Id == 0;
public virtual Type RealType =&gt; NHibernateUtil.GetClass(this);
</code></pre>

<hr>

<h3>When to use a base class</h3>

<ul>
<li>Since C# allows for single class inheritance, pick a base class that adds sufficient state / operations to the class. Providing base classes like <code>EqualityBase</code>, <code>ComparableBase</code>, <code>DisposableBase</code>, <code>HashCodeBase</code> are bad choices, since they don't provide meaningful context except for a very specific mitigation of boiler-plate code. Which class should <code>Entity</code> implement of the above? You would like to implement all of them, but you can't!</li>
<li>Is <code>Entity</code> provided by the OP a good choice for a base class? If the <code>IsTransient()</code> and <code>GetRealType()</code> methods weren't provided, I would argue against using a base class. You would end up with a class like above (<code>EqualityBase</code>, <code>HashCodeBase</code> mix). Both added methods allow for sufficient context to justify a base class.</li>
<li>Use the power of <strong>interface inheritance</strong>, because you can implement as many interfaces as you want, and <strong>composition</strong>, because you can contain and delegate operations to as many contained objects you desire.</li>
</ul>

<hr>

<h3>Dilemma</h3>

<p>Using a base class allows for DRY code. The repetitive boiler-plate code sits in the base class, while the entities are very clean POCO's. However, you force the entities to derive from this base class, limiting the inheritance options for such classes drastically.</p>

<h3>Solution</h3>

<p>To allow for flexibility in inheritance options for your entities, and mitigating most boiler-plate code, you could provide an interface, a base class and let your entities implement both. The special entities that require to inherit from a different base class, should do so, and implement the interface.</p>

<pre><code>public interface IEntity
{
    long Id { get; }
    bool IsTransient { get; }
    Type RealType { get; }
} 

public abstract class EntityBase : IEntity
{
    public virtual long Id { get; protected set; }
    public virtual bool IsTransient =&gt; Id == 0;
    public virtual Type RealType =&gt; NHibernateUtil.GetClass(this);

    // .. other code (equals, operator overloads, ..)
}
</code></pre>

<p>Most entities would implement both the base class and interface:</p>

<pre><code>public class Employee : EntityBase
{
    public string Name { get; set; }
    public string FirstName { get; set; }
    public string BadgeId { get; set; }
}
</code></pre>

<p>Allowing for special cases:</p>

<pre><code>public class DocumentElement : TreeNode&lt;DocumentElement&gt;, IEntity
{
    // .. DocumentElement  members
    // .. IEntity members
}
</code></pre>

<p>Other layers using the entities don't care about the base class, only the interface.</p>

<pre><code>public interface IRepository&lt;T&gt; where T : IEntity
{
    T Get(int id);
    void Save(T entity);
}
</code></pre>
    </div>