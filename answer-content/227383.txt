<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ul>
<li>The calculator requires a very specific syntax and depends on whitespace delimiters. As a consumer it is really easy to make a mistake in using the calculator.</li>
<li>I would expect a basic calculator to include parentheses parsing as well as the basic operators <code>+-/*</code>.</li>
<li>You split the input in a series of string tokens <code>List&lt;string&gt; equationList</code>. String is hard to work with once you start extending the calculator. Invest in a custom class <code>Token</code> that has at least a <code>Value</code> (string) and a <code>Type</code> (Operator, Operand, Parenthesis, Whitespace, ..)</li>
<li>Method <code>PunktVorStrich</code> return the same list as provided in the parameters. It could be made void if you allow the provided list to get changed in the method body.</li>
<li>I would not perform the multiplication/division evaluation in the preprocessor. It should be done in a later phase.</li>
</ul>

<h2>Limitations</h2>

<p>You have created a preprocessor function that transforms any input string into one that only uses addition and subtraction.</p>

<pre><code>"1 + 1 * 3"
</code></pre>

<p>comes out as </p>

<pre><code>"1 + 3"
</code></pre>

<p>Since the expression still remains to be evaluated, you'd have to go over the expression again, this time only dealing with the basic operators. I would not use a function like <code>PunktVorStrich</code> in the preprocessing phase, I would include it in the expression evaluator. This would gain performance, by only iterating the expression once.</p>

<p>By the way, how would you evaluate this expression? There is <a href="https://en.wikipedia.org/wiki/Order_of_operations#Mixed_division_and_multiplication" rel="nofollow noreferrer">no consensus</a> in math.</p>

<pre><code>"2 / 3 * 4"
</code></pre>

<p>If you want to extend your calculator, you'll notice it would get harder to maintain the evaluator, since you have a fixed format <code>&lt;number&gt;&lt;whitespace&gt;&lt;operator&gt;..</code> and evaluate left to right. As you noticed, a simple multiplication and division already are special cases to this left to right scanner. The following simple expressions can currently not be parsed.</p>

<pre><code>"1+1"
"(1 + 1) + 1"
</code></pre>

<h2>Expression Tree Evaluator</h2>

<p>What you could do, is tokenize the input, build an expression tree and evaluate the tree. For instance <code>"(1 + 1) + 1"</code> could have a syntax tree:</p>

<pre><code>//             add
//     add          1
//  1       1
</code></pre>

<p>You should read more about evaluating expressions using <a href="https://en.wikipedia.org/wiki/Lexical_analysis" rel="nofollow noreferrer">lexers</a> and <a href="https://en.wikipedia.org/wiki/Parse_tree" rel="nofollow noreferrer">parsers</a>. Try refactoring the simple evaluator with only <code>+-/*</code> to this structure.</p>
    </div>