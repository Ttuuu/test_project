<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This design does not convince me. You would achieve much better manintainability and testability when the buffering functionality would be implemented as a decorator. This is, create another logger that takes some other logger as a dependency and adds buffering on top of it. You would then be able to test it without having to actually log anything. You would also be able to reuse it for other targets if you later decide to log to a database just use the decorator with it. Currently there is no per logger choice. Either all loggers are buffered or none of them and all of them must use the same settings. With a decorator you could specify it for each logger separately or not at all.</p>

<p>The <code>LoggerCollection</code> should not be doing the buffering. As the name suggests it's a collection so it just should store loggers.</p>

<hr>

<blockquote>
  <p>This is the LogCollection (not an <code>ICollection</code> because I don't want to allow removals):</p>
</blockquote>

<p>Understandable but not entirely correct. <code>ICollection</code> has a property for that, that is called <code>IsReadOnly</code> so you could return <code>true</code> here and disallow changing it. Another option would be to implement just the <code>IEnumerable&lt;T&gt;</code> interface to make it a <em>real</em> collection. It's very misleading to have a class named <em>SomethingCollection</em> but not providing any of the <em>expected</em> collection interfaces.</p>

<hr>

<blockquote>
<pre><code>internal class EventArgs : System.EventArgs { public Log[] Logs { get; } public EventArgs(Log[] logs) { Logs = logs; } }
</code></pre>
</blockquote>

<p>ok, I have to add that this is really the most unusual and crazy thing to do, define a <code>class</code> in a single line. This is super unacceptable.</p>

<p>I also don't like the entire idea with the event loop. Events are fine but like here they sometimes add unnecessary complexity and <em>hidden</em> dependencies.</p>

<p>btw, if you create your own <code>EventArgs</code> then name it appropriately, don't just use the same name as the base class. This is another unacceptable style. You should then also use the <code>EventHandler&lt;T&gt;</code> class with the generic argument and not the simple one.</p>
    </div>