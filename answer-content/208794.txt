<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Given that the yielded value can be from <code>N</code> (1) to <code>Infinity</code> you can use <code>.next()</code>, check if the returned object property <code>done</code> is <code>undefined</code>, if <code>true</code>, <code>break</code> loop, else <code>yield</code> <code>value</code>, continue up to <code>N</code>. </p>

<p>A second function could also be used to pass a single or different <code>N</code> values and "a bunch of generators" to as <code>rest</code> parameters, where the return value will be an array of arrays or an object containing a property for each <code>N</code> and, or generator.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function* progression0() {
  let n = 0;
  while (true) {
    yield n++;
  }
}
function* progression1() {
  let n = 0;
  while (n &lt; 1) {
    yield n++; // only 1 value yielded from this generator
  }
}
function* take(n, gen) {
  const g = gen();
  for (let i = 0; i &lt; n; i++) {
    const {value, done} = g.next();
    // break if `done`
    if (done) {break};
    yield value;
  }
}
let n = 7;
let [...a] = take(n, progression0); // individual variable `a`
let [...b] = take(n, progression1); // individual variable `b`
console.log({a, b});
const processProgression = (n, ...gen) =&gt; gen.map(g =&gt; [...take(n, g)]);
let [c, d] = processProgression(n, progression0, progression1);
// same as `a`, `b` using function to process `N`, and n generators
console.log({c, d}); </code></pre>
</div>
</div>

    </div>