<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>using namespace std;</code> <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">is a bad habit you should avoid</a>.</p>

<hr>

<p><strong>Input Handling:</strong></p>

<pre><code>for(int i = 0; i &lt; inputSize; i++) {
    int tempValue = 0;
    cout &lt;&lt; "Please enter a number between 80 and 85: ";
    cin &gt;&gt; tempValue;

    if(tempValue &gt; 79 &amp;&amp; tempValue &lt; 86) {
        inputValue[i] = tempValue;
    } else {
        cout &lt;&lt; "The number must be between 80 and 85" &lt;&lt; endl;
        do {
            i--;
            break;
        } while(i &gt; 0);
    }
}
</code></pre>

<p>Although we want exactly <code>inputSize</code> inputs, we may have to request the input multiple times from the user. Doing this by decrementing <code>i</code> like that is quite inventive, but it's probably neater to use another loop to repeat the input request until we get a valid input:</p>

<pre><code>for (int i = 0; i != inputSize; ++i) {

    int number = 0;

    while (true) {

        std::cout &lt;&lt; "Please enter a number between 80 and 85: ";
        number = 0;
        std::cin &gt;&gt; number;

        if (number &gt;= 80 &amp;&amp; number &lt;= 85) {
            break;
        }
        else {
            std::cout &lt;&lt; "The number must be between 80 and 85.\n";
        }
    }

    inputValue[i] = number;
}
</code></pre>

<p>The inner loop could then be moved to a separate function, so the outer loop would simply look like:</p>

<pre><code>for (int i = 0; i != inputSize; ++i) {
    inputValue[i] = getInput();
}
</code></pre>

<p>Note that we should add error handling code to ensure that the user input is valid (e.g. what if the user enters "abc", or a number too large to fit in an <code>int</code>?). This is quite awkward in C++, but ends up looking something like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;limits&gt;

int getInput() {

    while (true) {

        std::cout &lt;&lt; "Please enter a number between 80 and 85: ";

        int number = 0;
        std::cin &gt;&gt; number;

        std::cout &lt;&lt; "\n";

        if (std::cin.eof()) {
            std::cout &lt;&lt; "Unexpected end of file.\n";
            std::cin.clear();
            continue;
        }

        if (std::cin.bad() || std::cin.fail()) {
            std::cout &lt;&lt; "Invalid input (error reading number).\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
            continue;
        }

        if (number &lt; 80 || number &gt; 85) {
            std::cout &lt;&lt; "Invalid input (number out of range).\n";
            continue;
        }

        return number;
    }

    // unreachable
    return 0;
}

int main() {

    int number = getInput();

    std::cout &lt;&lt; number &lt;&lt; std::endl;
}
</code></pre>

<hr>

<p><strong>Frequency count:</strong></p>

<p>Rather than individual variables, we can use another array here. This removes a lot of the repetition. Something like:</p>

<pre><code>const int freqSize = 6;
int frequencies[freqSize] = { 0, 0, 0, 0, 0, 0 };

for (int i = 0; i != inputSize; ++i) {
    int binIndex = inputValue[i] - 80;

    assert(binIndex &gt;= 0 &amp;&amp; binIndex &lt; freqSize); // need #include &lt;cassert&gt;
    frequencies[binIndex] += 1;
}

for (int i = 0; i != freqSize; ++i)
    std::cout &lt;&lt; (i + 80) &lt;&lt; "      " &lt;&lt; frequencies[i] &lt;&lt; "\n";
</code></pre>

<p>We should probably define our min (80) and max (85) values as constant variables somewhere, instead of using "magic numbers".</p>

<hr>

<p>Note that in "real" C++ code, we would probably use a data structure such as <code>std::map&lt;int, int&gt;</code> to store the count of each input value, and avoid using C-style arrays completely.</p>
    </div>