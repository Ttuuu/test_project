<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Optimizations</h1>

<p>You should think of your algorithm as a black box. As long as input and output match, internally the function has not to reproduce the textual representation of the problem.</p>

<p>With this in mind you can simplify your code. You also have an approach already in the <code>charToObj</code> function. I would use this to solve the whole problem:</p>

<ul>
<li>create a map</li>
<li>store values in that map and increase their amount, when they reappear</li>
<li>decrease amount, if necessary</li>
<li>test the map for given frequencies</li>
</ul>

<p>This has a few advantages:</p>

<ul>
<li>shorter code, easier to follow</li>
<li>no helper function necessary</li>
<li>no need to call <code>splice</code></li>
<li>no inner loops anymore</li>
<li>no need to build <code>obj</code> over and over again</li>
</ul>

<p>The new functions could look like this:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function freqQuery(queries) {
    const frequencies = [];
    const result = [];

    for (const query of queries) {
        const action = query[0];
        const value = query[1];

        if (action === 1) {
            if (typeof frequencies[value] === 'undefined') {
                frequencies[value] = 1;
            } else {
                ++frequencies[value];
            }
        }

        if (action === 2) {
            if (frequencies[value]) {
                --frequencies[value];
            }
        }

        if (action === 3) {
            result.push(frequencies.indexOf(value) === -1 ? 0 : 1);
        }
    }

    return result;
}

console.log(
    freqQuery([[1,1],[2,2],[3,2],[1,1],[1,1],[2,1],[3,2]]),
    freqQuery([[3, 4], [2, 1003], [1, 16], [3, 1]]),
    freqQuery([[1, 3], [2, 3], [3, 2], [1, 4], [1, 5], [1, 5], [1, 4], [3, 2], [2, 4], [3, 2]]),
    freqQuery([[1, 5], [1, 6], [3, 2], [1, 10], [1, 10], [1, 6], [2, 5], [3, 2]]),
    freqQuery([[1, 3], [1, 38], [2, 1], [1, 16], [2, 1], [2, 2], [1, 64], [1, 84], [3, 1], [1, 100], [1, 10], [2, 2], [2, 1], [1, 67], [2, 2], [3, 1], [1, 99], [1, 32], [1, 58], [3, 2]]),
);</code></pre>
</div>
</div>


<hr>

<p>Instead of the three <code>if</code>-statements you could also use <code>switch</code>:</p>

<pre><code>switch(action) {
    case 1: …
    case 2: …
    case 3: …
}
</code></pre>

<h1>Small improvements</h1>

<p>The bottleneck in this functions is <code>indexOf</code>. An alternative is using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" rel="nofollow noreferrer"><code>.includes()</code></a>:</p>

<pre><code>if (action === 3) {
   result.push(frequencies.includes(value) ? 1 : 0);
}
</code></pre>

<p>This is <strong>faster</strong> for all test cases I ran in <em>Chrome</em> and <em>Node.js</em>. It is <strong>sometimes faster</strong> but can be slower depending highly on the input in <em>Safari</em> and <em>Firefox</em>.</p>

<p>Here's a test on <a href="https://jsfiddle.net/muf036bn/" rel="nofollow noreferrer">jsfiddle</a>.</p>

<h1>Taking it one step further</h1>

<p>So, the bottleneck is still the expensive test in case <code>3</code>:</p>

<pre><code>frequencies.includes(value)
</code></pre>

<p>Let's get rid of this by keeping track of the current frequencies ourselves. The main improvement is, that we finally will only have to check whether a given <code>index</code> evaluates to <code>true</code>:</p>

<pre><code>if (action === 3) {
    result.push(frequencyTracker[value] &gt; 0 ? 1 : 0);
}
</code></pre>

<p>We introduce a second array <code>frequencyTracker</code>, which is filled with the amount each frequency occurs. I've used the ternary operator simply to shorten the code.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function freqQuery(queries) {
    const frequencies = [];
    const frequencyTracker = [];
    const result = [];

    for (const query of queries) {
        const action = query[0];
        const value = query[1];
        let index;

        if (action === 1 || action === 2) {
            index = frequencies[value];
            frequencyTracker[index] ? --frequencyTracker[index] : null;
        }

        if (action === 1) {
            typeof frequencies[value] === 'undefined' ? frequencies[value] = 1 : ++frequencies[value];
        }

        if (action === 2 &amp;&amp; frequencies[value]) {
            --frequencies[value];
        }

        if (action === 1 || action === 2) {
            index = frequencies[value];
            frequencyTracker[index] ? ++frequencyTracker[index] : frequencyTracker[index] = 1;
        }

        if (action === 3) {
            result.push(frequencyTracker[value] &gt; 0 ? 1 : 0);
        }
    }

    return result;
}

console.log(
    freqQuery([[1,1],[2,2],[3,2],[1,1],[1,1],[2,1],[3,2]]),
    freqQuery([[3, 4], [2, 1003], [1, 16], [3, 1]]),
    freqQuery([[1, 3], [2, 3], [3, 2], [1, 4], [1, 5], [1, 5], [1, 4], [3, 2], [2, 4], [3, 2]]),
    freqQuery([[1, 5], [1, 6], [3, 2], [1, 10], [1, 10], [1, 6], [2, 5], [3, 2]]),
    freqQuery([[1, 3], [1, 38], [2, 1], [1, 16], [2, 1], [2, 2], [1, 64], [1, 84], [3, 1], [1, 100], [1, 10], [2, 2], [2, 1], [1, 67], [2, 2], [3, 1], [1, 99], [1, 32], [1, 58], [3, 2]]),
);</code></pre>
</div>
</div>


<p>This doesn't look as elegant as the naive solution, but it's way faster. It passes all test cases on HackerRank as well.</p>

<h1>Explanation</h1>

<p>As requested in the comments, here's a an example to explain how this works in detail:</p>

<p>Before we begin, we create an empty array, which we will become a <a href="https://www.safaribooksonline.com/library/view/javascript-the-definitive/9781449393854/ch07s03.html" rel="nofollow noreferrer">sparse array</a> later.</p>

<p>Now we run through all queries:</p>

<p><em>If the action is <code>1</code> we <code>set</code> or <code>increase</code> our counter at the given index.</em></p>

<pre><code>[1, 2] → [undefined, undefined, 1] + [undefined, 1]
[1, 4] → [undefined, undefined, 1, undefined, 1] + [undefined, 2]
[1, 4] → [undefined, undefined, 1, undefined, 2] + [undefined, 1, 1]
</code></pre>

<p><em>If the action is <code>2</code> we <code>decrease</code> our counter at the given index.</em></p>

<pre><code>[2, 2] → [undefined, undefined, 0, undefined, 2] + [1, 0, 1]
</code></pre>

<p><em>If the action is <code>3</code> we check whether the value in our <code>frequencyTracker</code> is "true" or "not <code>0</code>" or "nor <code>undefined</code>".</em></p>

<pre><code>[3, 1] → [1, 0, 1] → 0
[3, 2] → [1, 0, 1] → 1
</code></pre>

<h1>Naming</h1>

<p>Some variable names are good, others are ambiguous, like:</p>

<blockquote>
<pre><code>charToObj()
obj
</code></pre>
</blockquote>

<p>This should be improved.</p>
    </div>