<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Readability</h2>

<p>Method <code>forEach</code> has 4 nested if-statements, with each statement doing things a little differently. This is a good candidate to refactor for compactness. There are 2 distinct ways you are looping arg <code>collection</code>, so I suggest to make a method for each of them.</p>

<hr>

<h3>(1) Complex Object</h3>

<p>One for looping a complex object:</p>

<blockquote>
<pre><code>  function forEach(collection, func, thisArg) {
    var i;
    if (Array.isArray(collection)) {
       // .. 
    }
    else {
       // .. this part
    }
  }
</code></pre>
</blockquote>

<p>New method <code>propertyEach</code>:</p>

<pre><code>function propertyEach(source, iteratee) {
  for (const key in source) {
    if (iteratee(source[key], key, source) === false) {
      break;
    }
  }
  return source;
}
</code></pre>

<p>As an example:</p>

<pre><code>const myComplexObject = {
  name: 'Doe',
  firstName: 'John'
};

propertyEach(myComplexObject, (item, i) =&gt; console.log(i + ': ' + item));
</code></pre>

<p>yielding </p>

<pre><code>'name: Doe'  
'firstName: John'
</code></pre>

<hr>

<h3>(2) Array</h3>

<p>And one for looping an array:</p>

<blockquote>
<pre><code>  function forEach(collection, func, thisArg) {
    var i;
    if (Array.isArray(collection)) {
       // .. this part
    }
    else {
       // .. 
    }
  }
</code></pre>
</blockquote>

<p>New method <code>arrayEach</code>:</p>

<pre><code>// courtesy of lodash
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index &lt; length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}
</code></pre>

<p>As an example:</p>

<pre><code>const myArray = [ 1, 2, 3 ];
arrayEach(myArray, (item, i) =&gt; console.log(i + ': ' + item));
</code></pre>

<p>yielding</p>

<pre><code>'0: 1'  
'1: 2'  
'2: 3'  
</code></pre>

<hr>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>Then we can refactor your method to call either method depending on whether the source is an array and avoid redudancy when <code>thisArg</code> is undefined.</p>

<pre><code>function forEach(source, func, thisArg) {
  if (thisArg === undefined) thisArg = source;
  if (Array.isArray(source)) {
    arrayEach(source, (item, i) =&gt; func.call(thisArg, item, i));
  } else {
    propertyEach(source, (item, i) =&gt; func.call(thisArg, item, i));
  }
}
</code></pre>

<p>As compared to the initial beast:</p>

<blockquote>
<pre><code>  function forEach(collection, func, thisArg) {
    var i;
    if (Array.isArray(collection)) {
      if (thisArg) {
        for (i = 0; i &lt; collection.length; ++i) {
          if (func.call(thisArg, collection[i], i) === false) {
            break;
          }
        }
      } else {
        for (i = 0; i &lt; collection.length; ++i) {
          if (func.call(collection[i], collection[i], i) === false) {
            break;
          }
        }
      }
    } else {
      if (thisArg) {
        for (i in collection) {
          if (func.call(thisArg, collection[i], i) === false) {
            break;
          }
        }
      } else {
        for (i in collection) {
          if (func.call(collection[i], collection[i], i) === false) {
            break;
          }
        }
      }
    }
    return collection;
  }
</code></pre>
</blockquote>

<p>The previous examples through your refactored method:</p>

<pre><code>forEach(myArray, (item, i) =&gt; console.log(i + ': ' + item));
forEach(myComplexObject, (item, i) =&gt; console.log(i + ': ' + item));
</code></pre>
    </div>