<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll just go over some small improvements I noticed you can make.</p>
<pre><code>my_win = 0
my_loss = 0
my_tie = 0


def game():

    global my_tie, my_loss, my_win
</code></pre>
<p>Global variables should be avoided whenever possible. The only reason I can see that these are globals is because of <code>results()</code> but you never actually call <code>results()</code>. It's probably better to just leave these as local variables.</p>
<pre><code>var = {'scissors':(0,1,0),
       'paper':(0,0,1),
       'rock':(1,0,0)}

for k, v in var.items():
    if k == user:
        one = int(v.index(1))
    if k == computer:
        two = int(v.index(1))
</code></pre>
<p>A couple of comments here. First, you don't make use of the fact that your values in your dictionary are tuples instead of just ints. You can just use 0, 1, and 2 as values. Second, you're not taking advantage of the thing that dictionaries are best at: indexing. An improvement here would be:</p>
<pre><code>var = {'scissors':1,
       'paper':2,
       'rock':0}

one = var[user]
two = var[computer]
</code></pre>
<p>Next:</p>
<pre><code>if one &lt; two:
    print(f"USER with {user} - WIN!")
    my_win += 1
elif one == two:
    print("==TIE==")
    my_tie += 1
else:
    print(f"COMPUTER with {computer} - WIN!")
    my_loss += 1
</code></pre>
<p>As I said in the comments, I don't think this is functionally correct. Either combination of the user and the computer choosing paper and rock will cause the rock to win. One of many fixes you could do is to add <code>and abs(one - two) == 1</code> as a condition to your first <code>if</code> statement.</p>
<pre><code>def results():

    print ("You win %d times!" % my_win)
    print ("You lose %d times!" % my_loss)
    print ("You tie %d times!" % my_tie)
</code></pre>
<p>This function is defined inside your <code>game()</code> function and is never called. Because your variables are local (as I suggested), you might want to put wins, losses, and ties as arguments for this function. You also don't have a way to play the game more than once, making this function pretty unhelpful. I'll leave adding a way to play multiple games to you since that's more of a code upgrade than a code review.</p>
<p>Here is the complete code with all my proposed changes:</p>
<pre><code>import random

def game():
    my_win = 0
    my_loss = 0
    my_tie = 0

    var = {'scissors':1,
           'paper':2,
           'rock':0}

    user = input("Please choice scissors, paper or rock: ")
    while user not in ['scissors', 'paper', 'rock']:
            user = input("Please choice scissors, paper or rock: ")
    computer = random.choice(['scissors','paper','rock'])

    print(f"USER - {user} \nCOMPUTER - {computer}")

    one = var[user]
    two = var[computer]

    if one &lt; two and abs(one - two) == 1:
        print(f"USER with {user} - WIN!")
        my_win += 1
    elif one == two:
        print("==TIE==")
        my_tie += 1
    else:
        print(f"COMPUTER with {computer} - WIN!")
        my_loss += 1
    
    results(my_win, my_loss, my_tie)

def results(win, loss, tie):

    print ("You win %d times!" % win)
    print ("You lose %d times!" % loss)
    print ("You tie %d times!" % tie)


if __name__ == "__main__":
    game()
</code></pre>
    </div>