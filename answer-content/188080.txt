<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way to solve this problem and use memory efficiently is through generators, this way only one prime at the time is processed and you won't get out of memory</p>

<pre><code>def is_prime(n):
    if n == 2:
        return True
    if n % 2 == 0 or n &lt; 2:
        return False
    limit = int(n ** 0.5) + 1
    for i in range(3, limit, 2):
        if n % i == 0:
            return False
    return True

def next_prime(count_limit):
    yield 2
    count = 1
    n = 3
    while True:
        if is_prime(n):
            yield n
            count += 1
            if count == count_limit:
                return
        n += 2

n = 10001

# Good
item = None
for item in next_prime(n):
    pass
print(item)

# Better
from collections import deque
dd = deque(next_prime(n), maxlen=1)
print(dd.pop())
</code></pre>

<p>Aditionally, if you need to run it several times, memoizing is suggested:</p>

<pre><code>def memoize(f):
    memo = {}
    def helper(x):
        if x not in memo:
            memo[x] = f(x)
        return memo[x]
    return helper

@memoize
def is_prime(n):
    ...
</code></pre>
    </div>