<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Of course there are possible improvements. First, if you can already use C++17 <a href="http://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>std::string_view</code></a>, use that for greater flexibility, specifically decoupling from how the strings are stored.</p>

<p>Next, minimize the number of variables involved. Take special notice that <code>string::data()</code> and <code>string::size()</code> are often a bit more involved than a simple field-access due to SSO.</p>

<p>I also changed the argument-names to <code>a</code> and <code>b</code> because there isn't really any difference between them which would justify a specific order.</p>

<pre><code>constexpr bool opposite(std::string_view a, std::string_view b) noexcept {
    auto size = a.size();
    if(size != b.size())
        return false;
    for(auto pa = end(a), pb = begin(b); size; --size)
        if(*--pa != *pb++)
            return false;
    return true;
}
</code></pre>

<p>Or using standard <a href="http://en.cppreference.com/w/cpp/algorithm/equal" rel="nofollow noreferrer"><code>&lt;algorithm&gt;</code>s</a> and reverse-iterators:</p>

<pre><code>    return std::equal(begin(a), end(a), rbegin(b), rend(b)); // C++14
    return a.size() == b.size() &amp;&amp; std::equal(begin(a), end(a), rbegin(b));
</code></pre>

<p>Apply the same to <code>palindrome()</code>, but also take note that if you tested the first half against the last half, there's no need to thereafter test the remainders each against each other. That would just duplicate the work.  Incidentally, that eliminates the <code>int</code>-variable, which might have been too small.</p>

<pre><code>constexpr bool palindrome(std::string_view s) noexcept {
    for(auto left = begin(s), right = end(s); left &lt; right;)
        if(*left++ != *--right)
            return false;
    return true;
}
</code></pre>
    </div>