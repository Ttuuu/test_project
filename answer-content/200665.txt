<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use <a href="https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/" rel="nofollow noreferrer">AAA style (Almost Always Auto)</a></h3>

<p>There are several places where you can use <code>auto</code> to help make sure the variable's type is correct, make the code more flexible to type changes, and/or save typing. For example:</p>

<pre><code>const size_t SIZE = letters.at(0).size(); // in equal_length()
std::string str = matrix_vector_to_string(letters); // in alphabet_only()
</code></pre>

<h3>Use the right type</h3>

<p>Your compiler should warn you about signed/unsigned integer comparisons in these <code>for</code> loops:</p>

<pre><code>for (int row = 0; row &lt; matrix.size(); ++row)
{
    for (int col = 0; col &lt; matrix.at(row).size(); ++col)
    {
        str += matrix.at(row).at(col);
    }
}
</code></pre>

<p>Although <code>auto</code> won't help you here (since you are initializing to <code>0</code>, which is an <code>int</code>) you can use <code>decltype</code> (e.g. <code>decltype(matrix.size())</code> instead of <code>int</code> for <code>row</code>).</p>

<p>In some cases it is possible to use range-based <code>for</code> loops to make the code even shorter and allow the use of <code>auto</code>, as <a href="https://codereview.stackexchange.com/a/200645/68618">@indi's answer</a> shows:</p>

<pre><code>for (auto&amp;&amp; row : matrix)
    for (auto&amp;&amp; elem : row)
        size += elem.size();
</code></pre>

<h3>Use type aliases</h3>

<p>You are using <code>std::vector&lt;std::vector&lt;std::string&gt;&gt;</code> for your matrices and most of your functions accept an argument of that type. You can use a type alias such as</p>

<pre><code>using Matrix = std::vector&lt;std::vector&lt;std::string&gt;&gt;;
</code></pre>

<p>to reduce the required typing, make the code easier to read, and make the code more flexible to changes (e.g. if you change the matrix type to a flat array or vector as @indi suggests).</p>

<h3>Avoid verbosity</h3>

<p>This can be made less verbose:</p>

<pre><code>if (letters.at(0).size() &gt; MIN_SIZE &amp;&amp; letters.at(1).size() &gt; MIN_SIZE)
{
    return true;
}

return false;
</code></pre>

<p>A more concise equivalent is simply</p>

<pre><code>return letters.at(0).size() &gt; MIN_SIZE &amp;&amp; letters.at(1).size() &gt; MIN_SIZE;
</code></pre>
    </div>