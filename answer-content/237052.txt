<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is already very nice looking code. The documentation is good and the algorithm used is clear. The points I would do different are really minor, and also depend on preference</p>

<ul>
<li>Instead of <code>from datetime import date</code>, I would just <code>import datetime</code>, and use <code>datetime.date</code>. This makes it more clear where <code>date</code> comes from, and I find <code>date</code> a very useful variable name, so I would like to keep the option open to use that</li>
<li>function name: the 3 characters save by not spelling out friday completely are not worth it</li>
<li>the comment <code># Ensure that the 13th is after the start date, and is a Friday.</code> is superfluous. The code itself expresses that exactly. Inline comments should explain why something is coded the way it is, not what the code does. If that is not clear, then you should rather choose a different code path</li>
<li>type annotate your function <code>def next_friday_13(start_date: datetime.date) -&gt; datetime.date:</code></li>
<li>main guard: Put the code that actually executes something behine aan <code>if __name__ == "__main__:</code>. That way you can later import this code as a module</li>
</ul>

<h1>test</h1>

<p>Write a simple test routine that you can use:</p>

<pre><code>def test_friday_13th():
    tests = {
        datetime.date(2020, 3, 12): datetime.date(2020, 3, 13),
        datetime.date(2020, 3, 13): datetime.date(2020, 11, 13),
        datetime.date(2020, 1, 1): datetime.date(2020, 3, 13),
        datetime.date(2020, 12, 13): datetime.date(2021, 8, 13)
        # TODO: add more test cases
    }
    for startdate, thirtheenth in tests.items():
        assert next_friday_13(startdate) == thirtheenth
</code></pre>

<p>or use <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">doctest</a></p>
    </div>