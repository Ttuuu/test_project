<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>However, i would like to optimize the loop condition.
  Currently 3 operations are done. What can I do to speed it up?</p>
</blockquote>

<p>Instead of checking for every position if it's within the bounds of both strings,
you could save the lowest bound using <code>Math.min</code> and use that as the loop condition.
That will cut down one comparison.</p>

<blockquote>
  <p>Can anyone suggest a more elegant solution?</p>
</blockquote>

<p>The last condition checking <code>destLength !=  sourceLength</code> can be omitted,
you can simply add the value of <code>Math.abs</code> because it will give 0 if the lengths are the same.
The result will be shorter code, which may be slightly more readable.</p>

<p>To make the code look more elegant,
it would be good to follow the common coding style.
For example instead of this:</p>

<blockquote>
<pre><code>    for ( int i=0 ;i &lt; sourceLength &amp;&amp; i &lt; destLength ; i++){
</code></pre>
</blockquote>

<p>Write like this:</p>

<pre><code>    for (int i = 0; i &lt; sourceLength &amp;&amp; i &lt; destLength; i++) {
</code></pre>

<p>I use my IDE to correct the formatting. It's a matter of a few key strokes.</p>

<p>It goes without saying that you should remove auto-generated lines like this:</p>

<blockquote>
<pre><code>    // TODO Auto-generated method stub
</code></pre>
</blockquote>

<p>The revised implementation incorporating the above points (and a point from <a href="https://codereview.stackexchange.com/users/67759/user1016274">@user1016274</a> too):</p>

<pre><code>public static int getEditDistance(String sourceString, String destinationString) {
    if (sourceString == null || destinationString == null){
        throw new IllegalArgumentException("String cannot be null");
    }

    int sourceLength = sourceString.length();
    int destLength = destinationString.length();
    int len = Math.min(sourceLength, destLength);

    int distance = Math.abs(sourceLength - destLength);
    for (int i = 0; i &lt; len; ++i) {
        if (sourceString.charAt(i) != destinationString.charAt(i)) {
            ++distance;
        }
    }

    return distance;
}
</code></pre>

<p>I would also recommend to add some unit tests to verify the algorithm is working:</p>

<pre><code>@Test
public void test_coti_cat() {
    assertEquals(2, EditDistance.getEditDistance("coti", "cat"));
}

@Test
public void test_alpha_beta() {
    assertEquals(5, EditDistance.getEditDistance("alpha", "beta"));
}

@Test
public void test_beta_pedal() {
    assertEquals(3, EditDistance.getEditDistance("beta", "pedal"));
}

@Test
public void test_empty() {
    assertEquals(3, EditDistance.getEditDistance("", "123"));
}
</code></pre>
    </div>