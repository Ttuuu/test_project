<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're going after readability and speed, then doing a preg_replace is actually a lot slower than doing a str_replace. </p>

<p>I'm using this test code:</p>

<pre><code>$original_url = 'http://www.example.com/api/v1/all/limit/{limit}/offset/{offset}' ;
$limit = 10;
$offset = 0;

$preg_start = microtime();
$url = preg_replace('/\{([A-Z, a-z]+)\}/e', "$$1", $original_url);
$preg_end = microtime();

$preg = $preg_end - $preg_start;

$str_start = microtime(true);
$url = str_replace(array("{limit}", "{offset}"), array($limit, $offset), $original_url);
$str_end = microtime(true);

$str_a = $str_end - $str_start;

$str_start = microtime(true);
$url = str_replace("{limit}", $limit, $original_url);
$url = str_replace("{offset}", $offset, $url);
$str_end = microtime(true);

$str_b = $str_end - $str_start;

echo $preg . "\n" . $str_a . "\n" . $str_b . "\n";
echo '$preg &gt; $str_a: '  . ($preg &gt; $str_a ? "true" : "false")  . "\n";
echo '$preg &gt; $str_b: '  . ($preg &gt; $str_b ? "true" : "false")  . "\n";
echo '$str_a &gt; $str_b: ' . ($str_a &gt; $str_b ? "true" : "false") . "\n";
</code></pre>

<p>And I'm getting these results:</p>

<pre><code>6.4000000000008E-5
1.4066696166992E-5
3.0994415283203E-6
$preg &gt; $str_a: true
$preg &gt; $str_b: true
$str_a &gt; $str_b: true
</code></pre>

<p>So, ultimately, using two function calls to <code>str_replace()</code> without arrays is faster overall than <code>preg_replace</code> and <code>str_replace</code> with an array. </p>

<p><strong>EDIT</strong></p>

<p>Considering your newly added third point (non-fixed number of variables), it would be best to abstract this to a function, at the sacrifice of speed. </p>

<pre><code>function replace(array $replacements, $url){
    foreach($replacements as $template =&gt; $value){
        $url = str_replace($template, $value, $url);
    }

    return $url;
}

$url = 'http://www.example.com/api/v1/all/relatedId/{relatedId}/limit/{limit}/offset/{offset}';
$replacements = array("{relatedId}" =&gt; "231", "{limit}" =&gt; "10", "{offset}" =&gt; "10");

$start = microtime(true);
echo replace($replacements, $url);
$end = microtime(true);

echo "\n" . ($end - $start);
</code></pre>

<p>Results in:</p>

<pre><code>http://www.example.com/api/v1/all/relatedId/231/limit/10/offset/10
2.4795532226562E-5
</code></pre>

<p>Which is comparable in speed to the multiple str_replace call (which is what you're technically doing in the function. </p>
    </div>