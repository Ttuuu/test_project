<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review of your code</h3>

<p>The code is written clearly, I have only a few remarks.</p>

<p>The LeetCode problem description states that both <code>str1</code> and <code>str2</code> are <em>non-empty</em> strings, so that this</p>

<pre><code>if (string.IsNullOrEmpty(str1) || string.IsNullOrEmpty(str2))
{
    return string.Empty;
}
</code></pre>

<p>is not necessary. On the other hand, <em>if</em> you want to handle empty strings then the above is not correct: The shortest common supersequence of the empty string and <code>"abc"</code> is <code>"abc"</code>, not the empty string. So that should be</p>

<pre><code>if (string.IsNullOrEmpty(str1))
{
    return str2;
}
if (string.IsNullOrEmpty(str2))
{
    return str1;
}
</code></pre>

<p>Here</p>

<pre><code>int i = 0;
int j = 0;
string lcs = FindLCS(str1, str2);
StringBuilder res = new StringBuilder();
foreach (var letter in lcs) 
{ // ...
</code></pre>

<p>I would move the declarations of <code>i</code> and <code>j</code> down to where the variables are needed, i.e. directly before the <code>foreach</code> loop.</p>

<p>The attentive reader of your code will of course quickly figure out that</p>

<pre><code>private static string FindLCS(string str1, string str2)
</code></pre>

<p>determines the “longest common subsequence” but I would use a more verbose function name (or add an explaining comment).</p>

<p>Explaining the used algorithm shortly would also be helpful to understand the code, something like</p>

<pre><code>/*
 The longest common subsequence (LCS) of str1 and str2 is computed with 
 dynamic programming. 

 dp[i, j] is determined as the LCS of the initial i characters of str1
 and the initial j characters of str2.

 dp[str1.Length, str2.Length] is then the final result.
 */
</code></pre>

<p>On the other hand, this comment is mysterious to me:</p>

<pre><code>//remember 0 is 0 always
if (str1[i] == str2[j])
</code></pre>

<h3>Performance improvements</h3>

<p><code>str1.Length * str2.Length</code> strings are computed in <code>FindLCS()</code>, and that can be avoided. As explained in <a href="https://en.wikipedia.org/wiki/Longest_common_subsequence_problem" rel="nofollow noreferrer">Wikipedia: Longest common subsequence problem</a>, is is sufficient to store in <code>dp[i, j]</code> the <em>length</em> of the corresponding longest common subsequence, and not the subsequence itself. When the <code>dp</code> array is filled then the longest common subsequence can be determined by deducing the characters in a “traceback” procedure, starting at <code>dp[str1.Length, str2.Length]</code>.</p>

<p>This saves both memory and the time for the string operations.</p>

<p>And this approach can easily be modified to collect the shortest common supersequence instead of the longest common subsequence. That makes your “post processing” in your <code>ShortestCommonSupersequence()</code> function obsolete.</p>

<p>The maximum possible length of the shortest common supersequence is known. Therefore the characters can be collected in an array first, so that string operations and a final string reversing is avoided.</p>

<p>Putting it all together, an implementation could look like this:</p>

<pre><code>public static string ShortestCommonSupersequence(string str1, string str2)
{
    // Handle empty strings:
    if (string.IsNullOrEmpty(str1))
    {
        return str2;
    }
    if (string.IsNullOrEmpty(str2))
    {
        return str1;
    }

    // Dynamic programming: dp[i, j] is computed as the length of the
    // longest common subsequence of str1.Substring(0, i) and
    // str2.SubString(0, j).

    int[,] dp = new int[str1.Length + 1, str2.Length + 1];
    for (int i = 0; i &lt; str1.Length; i++)
    {
        for (int j = 0; j &lt; str2.Length; j++)
        {
            if (str1[i] == str2[j])
            {
                dp[i+1, j+1] = dp[i, j] + 1;
            }
            else
            {
                dp[i + 1, j + 1] = Math.Max(dp[i + 1, j], dp[i, j + 1]);
            }
        }
    }

    // Traceback: Collect shortest common supersequence. Since the
    // characters are found in reverse order we put them into an array
    // first.

    char [] resultBuffer = new char[str1.Length + str2.Length];
    int resultIndex = resultBuffer.Length;
    {
        int i = str1.Length;
        int j = str2.Length;
        while (i &gt; 0 &amp;&amp; j &gt; 0)
        {
            if (str1[i - 1] == str2[j - 1])
            {
                // Common character:
                resultBuffer[--resultIndex] = str1[i - 1];
                i--;
                j--;
            }
            else if (dp[i - 1, j] &gt; dp[i, j - 1])
            {
                // Character from str1:
                resultBuffer[--resultIndex] = str1[i - 1];
                i--;
            }
            else
            {
                // Character from str2:
                resultBuffer[--resultIndex] = str2[j - 1];
                j--;
            }
        }
        // Prepend remaining characters from str1:
        while (i &gt; 0)
        {
            resultBuffer[--resultIndex] = str1[i - 1];
            i--;
        }
        // Prepend remaining characters from str2:
        while (j &gt; 0)
        {
            resultBuffer[--resultIndex] = str2[j - 1];
            j--;
        }
    }

    // Create and return result string from buffer.
    return new string(resultBuffer, resultIndex, resultBuffer.Length - resultIndex);
}
</code></pre>

<p><em>Comparison:</em> I ran both implementations on LeetCode</p>

<ul>
<li>Original code: Runtime 372 ms, Memory 48.9 MB.</li>
<li>Improved code: Runtime 92 ms, Memory 26.1 MB.</li>
</ul>
    </div>