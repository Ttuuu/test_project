<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How would you get cycles by hand? One is to take the first item (1) and look at what it goes to (3). Then look at what that goes to (2), and see what that goes to (1). Since you got back where you started, you're done with that cycle. Then you go to the first item not in that cycle, and do it again. In pseudo code:</p>

<pre><code>outer loop:
    inner loop:
        find what the current item goes to
        add that to the cycle
        set "current item" to that
        stop when you get to the first item
    add a list containing those items to the list of cycles
    start again with an item you haven't used yet
    keep going until the lists are empty (or only have one item)
</code></pre>

<p>In python:</p>

<pre><code>def get_cycles(perm):
    if not is_valid_permutation(perm):
        raise IOError('Input permutation is not valid')
    cycle_list = []
    possible_beginnings= perm[0].copy()
    while True:  
        if len(possible_beginnings)&lt;2:
            break
        start = possible_beginnings[0]
        current = start
        new = perm[1][perm[0].index(start)]
        possible_beginnings.remove(start)            
        if start == new:
            continue     
        cycle = [start,new]    
        current = new
        while True:      
            possible_beginnings.remove(current)
            current = perm[1][perm[0].index(current)]
            if current == start:
                break
            cycle.append(current)  
        cycle_list.append(cycle)
    return cycle_list
</code></pre>

<p>I found this to be about twice as fast as your code.</p>

<p>(Note: I used [[1,2,3,4,5,6,7,8,9,10,11,12], [3,1,2,6,5,4,8,9,10,11,12,7]] as my test input, as I figured I should use something a bit larger than the sample you gave, and something with cycles larger than 3.)</p>
    </div>