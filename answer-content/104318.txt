<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>if there's a practical way to write make_ll() ... we can simply malloc() for each "next" node until the last, setting it equal to NULL.</p>
</blockquote>

<p>Use a temporary head node.  This also handles cases when <code>i &lt;= 0</code> by returning <code>NULL</code>, unlike OP's code that leaves the head node uninitialized.</p>

<pre><code>node* make_ll(int len){
  node head;  // Code only populates the next field.
  head.next = NULL;
  node* cur = &amp;head;
  for (int i = 0; i &lt; len; i++) {
    cur-&gt;next = malloc(sizeof *(cur-&gt;next));
    assert(cur-&gt;next);
    cur = cur-&gt;next;
    cur-&gt;val = i;
    cur-&gt;next = NULL;
  }
  return head.next;
}
</code></pre>

<hr>

<p>Other notes</p>

<p>Notice how the below <code>malloc()</code> size works without even knowing the type of the pointer.  This is less error prone and easier to maintain.</p>

<pre><code>// some_pointer = malloc(sizeof(some_type));
some_pointer = malloc(sizeof *some_pointer);
</code></pre>

<p>Use matching type with the specifier to avoid undefined behavior: <code>void *</code> with <code>"%p"</code>.</p>

<pre><code>printf("Node: %d @ %p\n", cur-&gt;val, (void *) cur);
</code></pre>

<p>Minor: When a function does not alter objects that are "pointed", consider using <code>const</code> to 1) indicate no change 2) allow passing a pointer to a constant linked list  (this is rare with linked lists)</p>

<pre><code>void print_ll(const node* head) {
    const node* cur = head;
    while (cur != NULL) {
        printf("Node: %d @ %p\n", cur-&gt;val, (const void *) cur);
        cur = cur-&gt;next;
    }
}
</code></pre>
    </div>