<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General strategy for optimizations on programming challenges</strong></p>

<p>To optimize your code, you need to be able to perform some measure on different inputs and you want to make sure your optimization does not break anything.</p>

<p>You usually want both things to be performed easily - automatically and instantly if possible. This is usually possible with simple tests. For programming challenges, this is even simpler because they usually correspond to task with a well defined input and a well defined output and on top of that, examples may be provided.</p>

<p>Thus, this leads to the general rule of thumb about desirable properties of your code:</p>

<ul>
<li><p>you want your code to be testable then</p></li>
<li><p>you want your code to be tested (with potentially failing tests) then</p></li>
<li><p>you want your code to be correct (all tests pass)</p></li>
<li><p>you want your code to be fast</p></li>
</ul>

<p>Applying this to your code:</p>

<ul>
<li>define <code>dfs</code> as a function taking both inputs <code>a</code> and <code>v</code> as parameters</li>
<li>write a function to test <code>dfs</code> using input/output like you did but also a function with automated tests based on the provided example</li>
<li>rename <code>dfs</code> for something conveying the name of the problem solved without giving the implementation details</li>
<li>see that having a cache breaks leads to wrong behavior when we want to call <code>dfs</code> with different inputs -&gt; we can remove it for the time being</li>
<li>we can see that the import is useless</li>
</ul>

<p>At this point, we have:</p>

<pre><code>def max_nb_painted(v, a):
    """Return the the maximum number Igor can write on the fence (or -1 if he has too little paint for any digit)"""
    res = 0
    for i, num in enumerate(a):
        if num == v:
            res = max(res, i+1)
        if num &lt; v:
            x = max_nb_painted(v-num, a)
            if x &gt; 0:
                s = str(i+1) + str(x)
            else:
                s = str(i+1)
            sorted_nums = sorted([str(i) for i in s], reverse=True)
            l = int("".join(sorted_nums))
            res = max(res, l)
    return -1 if res == 0 else res

def test_max_nb_painted_io():
    """Test based on std input/ouput."""
    v = int(input())
    a = [int(i) for i in input().split()]
    print(max_nb_painted(v, a))

def test_max_nb_painted_auto():
    """Automated tests."""
    # Note: you could use a proper unit-tests framework for this
    print(max_nb_painted(5, [5, 4, 3, 2, 1, 2, 3, 4, 5]) == 55555)
    print(max_nb_painted(2, [9, 11, 1, 12, 5, 8, 9, 10, 6]) == 33)
    print(max_nb_painted(0, [1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1)

test_max_nb_painted_auto()
</code></pre>

<p><strong>More tests</strong></p>

<p>The provided tests only cover the case where the painted number contain a unique digit. Let's try to add other tests:</p>

<pre><code>    assert max_nb_painted(1, [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert max_nb_painted(1, [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert max_nb_painted(5, [2, 2, 2, 2, 2, 2, 2, 2, 3]) == 98
    assert max_nb_painted(50, [9, 10, 11, 12, 13, 14, 15, 16, 17]) == 61111
    assert max_nb_painted(70, [19, 20, 21, 22, 23, 24, 25, 26, 27]) == 961
</code></pre>

<p>Also, we can add tests with returned value as big as we want which can be useful for benchmark purposes:</p>

<pre><code>    n = 6  # Length of expected return value
    c = 1  # Cost per digit
    assert max_nb_painted(n * c, [c] * 9) == int(str(9) * n)
</code></pre>

<p><strong>A different algorithm</strong></p>

<p>Instead of using dfs blingly, we can try to solve the issue manually and see how we'd do it.</p>

<p>We can easily compute the length of the returned value based on the minimal cost in <code>a</code>.</p>

<p>Also, if we want to improve the corresponding value, we'd do it from the left hand side.</p>

<pre><code>def max_nb_painted(v, a):
    # Evaluate maximum length based on digit with minimal cost
    min_cost = min(a)
    max_len = v // min_cost
    if max_len == 0:
        return -1
    # The base would be to use only that digit
    # But we try to use bigger digits (from the left)
    min_dig = a.index(min_cost) + 1
    rem_v = v - max_len * min_cost
    n = 0
    for i in range(max_len):
        n = 10 * n + min_dig
        for digit, cost in reversed(list(enumerate(a, start=1))):
            if digit &gt;= min_dig:
                if cost - min_cost &lt;= rem_v:
                    n += digit - min_dig
                    rem_v += min_cost - cost
                    break
    return n
</code></pre>

<p>This can be significatively improved. For instance, we could precompute the digits that may be useful in order not to iterate over the whole list:</p>

<pre><code>    relevant_digits = list(reversed([(digit, cost) for digit, cost in enumerate(a, start=1) if digit &gt; min_dig and cost - min_cost &lt;= rem_v]))
    for i in range(max_len):
        n = 10 * n + min_dig
        for digit, cost in relevant_digits:
            if cost - min_cost &lt;= rem_v:
                n += digit - min_dig
                rem_v += min_cost - cost
                break
    return n
</code></pre>

<p><strong>Conclusion</strong></p>

<p>Despite multiple attempts, I did not reach anything better than "Time limit exceeded on test 25".</p>

<p>I do not have any ideas left except maybe trying to be starter when picking <code>min_dig</code> (by starting from the right) or pruning the list of relevant digits when we update <code>rem_v</code>.</p>

<p>My best try is:</p>

<pre><code>def max_nb_painted(v, a):
    # Evaluate maximum length based on digit with minimal cost
    min_cost = min(a)
    max_len = v // min_cost
    if max_len == 0:
        return -1
    # The base would be to use only that digit
    # But we try to use bigger digits (from the left)
    v -= max_len * min_cost
    relevant_digits = []
    for digit, cost in reversed(list(enumerate(a, start=1))):
        delta_cost = cost - min_cost
        if delta_cost &lt;= v:
            if delta_cost == 0:
                min_dig = digit
                break
            relevant_digits.append((digit, delta_cost))
    n = 0
    for i in range(max_len):
        n *= 10
        for digit, delta_cost in relevant_digits:
            if delta_cost &lt;= v:
                n += digit
                v -= delta_cost
                relevant_digits = [(digit, delta_cost) for digit, delta_cost in relevant_digits if delta_cost &lt;= v]
                break
        else:
            n += min_dig 
    return n
</code></pre>

<p>but it is not good enough :(</p>
    </div>