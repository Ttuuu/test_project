<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>(Obligatory) Python 2 is end of life it is advised to upgrade to Python 3.</li>
<li>You should always indent with 4 spaces in Python. This makes it easier for me to read what is inside <code>prime_factors</code> and what is outside of it.</li>
<li>It's common to surround top level functions (<code>prime_factors</code>) with 2 empty lines, and other functions (<code>is_prime</code>, <code>make_p_lst</code>) with one empty line.</li>
</ul>
<p>Otherwise your whitespace is good. Here is what it'd look like with these fixed.</p>
<pre class="lang-py prettyprint-override"><code>import math


def prime_factors(y):
    def is_prime(x):
        count = 0
        if x &gt; 1:
            for i in range(2, x):
                if x % i != 0: 
                    count += 1
                else:
                    return False
                    break
        else:
            return True
        if count != 0:
            return True 
        if x == 2:
            return True

    def make_p_lst(x):
        z = []
        for i in range(2, x):
            if is_prime(i) == True:
                z.append(i)
        return z
        
    n = y
    c = 0
    c = int(math.sqrt(y) + 1)
    prime_lst = []
    prime_lst = make_p_lst(c)
    p = is_prime(y)
    if p == True and y != 1:
        print '%s is prime.' % (y)
        return 'Thus, its\' only factors are 1 and itself.'
    elif y != 1:
        print '%s is composite, here are its\' prime factors: ' % (y)
        factors_lst = []
        while is_prime(y) != True:
            for i in prime_lst:
                if y % i == 0:
                    y = y / i
                    factors_lst.append(i)
        factors_lst.append(y)
        factors_lst.sort()
        if factors_lst[0] == 1: 
            factors_lst.remove(1)
        n = factors_lst
        return n
    else:
        return '1 is neither prime nor composite.'


print prime_factors(871)
</code></pre>
<ul>
<li><p>You don't need <code>is_prime</code> or <code>make_p_lst</code> to be inside <code>prime_factors</code>. This is making your code harder to read as it's not immediately apparent that you are not using them as closures.</p>
</li>
<li><p>All code after a <code>return</code> will not run. This means the <code>break</code> in <code>is_prime</code> will not run.</p>
</li>
<li><p>Your <code>is_prime</code> function doesn't handle 0 and 1 correctly.</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; [(i, is_prime(i)) for i in range(6)]
[(0, True), (1, True), (2, True), (3, True), (4, False), (5, True)]
</code></pre>
<p>Since it's not already we can change your code to be simpler by removing all the <code>count</code> parts.
Then we can just special case 0 and 1.</p>
<pre class="lang-py prettyprint-override"><code>def is_prime(x):
    if x &lt;= 1:
        return False

    for i in range(2, x):
        if x % i == 0: 
            return False
    return True
</code></pre>
</li>
<li><p>In <code>make_p_lst</code> you shouldn't do <code>if is_prime(i) == True</code> instead you should just use <code>if is_prime(i)</code>.</p>
</li>
<li><p>In <code>prime_factors</code> you shouldn't do <code>while is_prime(y) != True</code> instead you should just use <code>while not is_prime(y)</code>.</p>
</li>
<li><p>We can simplify the code by using a list comprehension. This is just syntactic sugar for building the list as your are now.</p>
</li>
<li><p>You don't need to initialize a value and then assign it.</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>c = 0
c = int(math.sqrt(y) + 1)
prime_lst = []
prime_lst = make_p_lst(c)
</code></pre>
</blockquote>
<p>You can just remove the first of each.</p>
<pre class="lang-py prettyprint-override"><code>c = int(math.sqrt(y) + 1)
prime_lst = make_p_lst(c)
</code></pre>
</li>
<li><p>By fixing <code>is_prime</code> we don't need the <code>and y != 1</code> check.</p>
</li>
<li><p>Getting the prime factors should be put into a function.</p>
</li>
<li><p>Many of your variable names are hard to understand or follow.
You should really use better names than <code>x</code>, <code>i</code>, <code>c</code>, <code>y</code>, etc.</p>
<p>Additionally I prefer using plurals to denote a list of items.
For example the following is much easier to read.</p>
<pre class="lang-py prettyprint-override"><code>for prime in primes:
    # do something with prime
</code></pre>
</li>
<li><p>Because I changed <code>is_prime</code> to make 1 no longer return True, the code to get the prime factors no longer works for 1. However we can fix that by moving the while loop into the for loop.
Then we can merge it with the <code>if</code>.</p>
<p>This has the benefit that we don't have to loop through <code>prime_lst</code> multiple times and we won't call <code>is_prime</code>.</p>
</li>
</ul>
<pre class="lang-py prettyprint-override"><code>def is_prime(number):
    if number &lt;= 1:
        return False
    for divisor in range(2, number):
        if number % divisor == 0: 
            return False
    return True


def primes_below(limit):
    return [number for number in range(2, limit) if is_prime(number)]


def get_prime_factors(number):
    if number == 0:
        return []
    primes = primes_below(int(number ** 0.5 + 1))
    factors = []
    for prime in primes:
        while number % prime == 0:
            number /= prime
            factors.append(prime)
    if number != 1:
        factors.append(number)
    return factors


def prime_factors(number):
    prime = is_prime(number)
    if prime:
        print '%s is prime.' % (number)
        return 'Thus, its\' only factors are 1 and itself.'
    elif number != 1:
        print '%s is composite, here are its\' prime factors: ' % (number)
        return get_prime_factors(number)
    else:
        return '1 is neither prime nor composite.'


print prime_factors(871)
</code></pre>
<p>At this point it'd be good to rethink how your code works.
<code>prime_factors</code> <em>sometimes</em> returns the prime factors. However other times it returns a string.
It also <code>print</code>s to the screen which is not helpful if I only want the prime factors.</p>
<p>Your function <code>prime_factors</code> should do <em>no</em> string manipulation.</p>
<p>This means it should return a list of prime factors and only a list of prime factors.</p>
<ul>
<li>0 would return an empty list.</li>
<li>1 would return an empty list.</li>
<li>2 would return 2.</li>
<li>4 would return 2 and 2.</li>
</ul>
<p>And so we can see <code>get_prime_factors</code> is what should actually be <code>prime_factors</code>.</p>
<p>And so we can change <code>main</code> to use only <code>get_prime_factors</code> and only <code>print</code>.
Returning from <code>main</code> is not a good idea.</p>
<pre class="lang-py prettyprint-override"><code>def is_prime(number):
    if number &lt;= 1:
        return False
    for divisor in range(2, number):
        if number % divisor == 0: 
            return False
    return True


def primes_below(limit):
    return [number for number in range(2, limit) if is_prime(number)]


def prime_factors(number):
    if number == 0:
        return []
    primes = primes_below(int(number ** 0.5 + 1))
    factors = []
    for prime in primes:
        while number % prime == 0:
            number /= prime
            factors.append(prime)
    if number != 1:
        factors.append(number)
    return factors


def main(number):
    factors = prime_factors(number)
    if not factors:
        print '1 is neither prime nor composite.'
    elif len(factors) == 1:
        print '%s is prime.' % (number)
        print 'Thus, its only factors are 1 and itself.'
    else:
        print '%s is composite, here are its prime factors: ' % (number)
        print factors


if __name__ == '__main__':
    main(871)
</code></pre>
    </div>