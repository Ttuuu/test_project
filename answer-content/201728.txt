<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance</h2>
<p>I instrumented your code differently:</p>
<pre><code>def main():
    m, n = 1000, 15000000
    start_time = time.time()
    data = [random.randrange(m) for i in range(n)]
    print("--- %s seconds to generate" % (time.time() - start_time))
    # print("Random Data: ", data)
    start_time = time.time()
    result = SortedList(data)
    print("--- %s seconds to sort" % (time.time() - start_time))
    start_time = time.time()
    result = list(Median(data))
    print("Result: ", result)
    print("--- %s seconds ---" % (time.time() - start_time))
</code></pre>
<p>For me, the results were:</p>
<pre class="lang-none prettyprint-override"><code>--- 7.407598257064819 seconds to generate
--- 4.535749673843384 seconds to sort
Result:  [500]
--- 5.01109504699707 seconds ---
</code></pre>
<p>This shows that the generation of the random input takes longer than finding the median, and that 90% of <code>Median()</code> is spent sorting (probably most of the rest is caused by converting between lists and iterators).  You're unlikely to get large gains through modifications to your own part of the code.</p>
<p>I got better results by using Python's built-in <code>sorted()</code>.  We don't need any of the extra functionality of <code>SortedList</code> (maintaining the invariant through adds and deletes), and a single sort (mostly in native code) gives these results:</p>
<pre><code>def median(values):
    sortedlist = sorted(values)
    length = len(sortedlist)
    half = length // 2
    # return not yield; see "General review"
    if length % 2 == 0:
        return (sortedlist[half] + sortedlist[half - 1]) // 2
    else:
        return sortedlist[half]

def main():
    m, n = 1000, 15000000
    start_time = time.time()
    data = [random.randrange(m) for i in range(n)]
    print("--- %s seconds to generate" % (time.time() - start_time))
    # print("Random Data: ", data)
    start_time = time.time()
    result = sorted(data)
    print("--- %s seconds to sort" % (time.time() - start_time))
    start_time = time.time()
    result = median(data)
    print("Result: ", result)
    print("--- %s seconds ---" % (time.time() - start_time))
</code></pre>
<pre class="lang-none prettyprint-override"><code>--- 7.638948202133179 seconds to generate
--- 3.118924617767334 seconds to sort
Result:  500
--- 3.3397886753082275 seconds ---
</code></pre>
<hr>
<h2>General review</h2>
<p>I don't see why you <code>yield</code> a single value, rather than simply returning.  Is there a need for <code>Median()</code> to be iterable?</p>
<p>Given that <code>length</code> is an integer, if <code>length % 2</code> is not 0, it must be 1 - so the <code>elif</code> could easily be <code>else</code>.</p>
    </div>