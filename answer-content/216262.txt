<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Equivalence considerations</h2>

<p>1 is not the same as 2 or 3 for older versions of Python. In 2 and 3, you have an ordered execution sequence that determines the priority of returned variables. In 1, you have a dictionary whose order is inherently unknown. This might be OK for you, or it might not. If it isn't, a workaround is to use an <code>OrderedDict</code>.</p>

<p>For newer versions of Python (3.6+) this should not be an issue.</p>

<h2>Drop boolean redundancy</h2>

<p>No matter what you do, you should probably stop writing <code>is True</code> if you know that the target variable is already boolean. If the variable can have mixed type (i.e. integer or boolean), which is bad but sadly often possible in Python, and if you care about this, then you need to keep <code>is True</code>.</p>

<h2>Ownership</h2>

<p>Do you control the design of <code>user_agent</code>? If so, then you can enforce a stable interface, and my favourite of your options is 2, simply because it's more concise. If not, then only (3) would work well with static analysis to catch a changing interface.</p>

<h2>Other options</h2>

<pre><code>try:
    return next(type for type in ('mobile', 'tablet', 'pc', 'bot')
                if get_attr(user_agent, f'is_{type}'))
except StopIteration:
    return 'unknown'
</code></pre>

<h2>The bigger problem</h2>

<p>is that you're representing an idea of a type with multiple booleans when it should be a single enum-style variable. If you can change your user agent to do this, do this. If not, you may want to consider writing a multivariate-boolean-to-single-enum shim class to sanitize the rest of your business logic.</p>
    </div>