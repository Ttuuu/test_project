<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I think it would be instructive to compare my rank amateur code to the code that an experienced software developer would produce to accomplish the same result.</p>
</blockquote>

<p>To me, the most obvious differences between experienced and novice programmers are:</p>

<ol>
<li>consideration of edge cases</li>
<li>organization of data in a manner that lets the data drive the program's flow</li>
<li>broadness of their working definition of the word <strong>data</strong></li>
</ol>

<p>In that light, here are things I'd do differently from what you have done.</p>

<h2>Make the most of the data you've got</h2>

<p>You're silently truncating the user's input with <code>int()</code>.  This is bad!  Mangling user data is necessary sometimes and to be avoided otherwise.  Especially here, where the change will affect the output in surprising and subtle ways.</p>

<p>You're displaying results with maximum "precision" but basing them on a value of <code>pi</code> that has only four significant figures.  This is misleading.  Define <code>pi</code> with more digits, and shorten the result so that it shows the actual precision.</p>

<h2>Separate content from presentation</h2>

<p>A common pattern arises when you create something that's useful to someone (yourself, usually), later it becomes useful to other people, and those people need the output in a different format.  Not only do you have to change the code, but it's been months since you looked at it! You won't remember how everything works.  Make it easy to affect how output is displayed.  Do this by keeping results in a structure that preserves the semantics of the data, and defer formatting to the very end.</p>

<p>Think about the task of using your code to make a web page: it's going to be hairy because your math functions have <code>print</code> statements in them.  It's better if those functions return numbers to be printed later by <code>formatter</code> function.</p>

<h2>Separate program logic from UI elements</h2>

<p>This is the same point as the previous one, just applied to input instead of output.  Use data structures that group input characteristics together, keeping display values independant from logic-affecting values.</p>

<p>As written, the button labels dictate the program flow (<code>if var.get() == "Circle Circumference":</code> etc.).  If you translate your program to another language, it won't work anymore.  </p>

<h2>Functions can be data</h2>

<p>Each kind of user-selected computation has a formula to go with it.  It is natural to group those formulae alongside the other traits of the calculation.</p>

<h2>Example</h2>

<p>Here is one approach to your problem.  Observe how the actual code has almost nothing to do with what you're calculating, or how, or what the output will look like.  Instead, the data structure dictates how many variables to ask for, how to transform them into an answer, and how to format the answer for display.</p>

<p>From here, you could generalize this in all kinds of ways with few changes to the code.  For example, <code>float(input(prompt))</code> is "hardcoded" in the logic.  This could be another lambda in the data, perhaps attached to each prompt, so that you can configure it to ask for integers or strings instead of just floats.</p>

<pre><code>PI = 3.141592653589793
calculations = [
    dict(
        label="Circle Circumference",
        prompt=[
            "Enter the radius of the circle in the units of your choice: "
        ],
        result_format="\nThe volume of the sphere is: {0:.4f} units.",
        formula=lambda r: r*2*PI
    ),
    dict(
        label="Sphere Volume",
        prompt=[
            "Enter the radius of the sphere in the units of your choice: "
        ],
        result_format="\nThe volume of the sphere is: {0:.4f} units.",
        formula=lambda r: r**3 * 4/3 * PI
    ),
    dict(
        label="Cone Volume",
        prompt=[
            "Enter the radius of the cone in the units of your choice: ",
            "Enter the height of the cone in those same units: "
        ],
        result_format="\nThe volume of the cone is: {0:.4f} units.",
        formula=lambda r,h: r**2 * h * PI / 3
    ),
    # ... etc.
]

# selected_menu = var.get()
selected_menu="Cone Volume"  # hardcoded for demonstration purposes

action = next( filter(lambda x: x['label'] == selected_menu, calculations) )

inputs = list( map( lambda prompt: float(input(prompt)), action['prompt'] ))

answer = action['formula'](*inputs)

result_text = action['result_format'].format(answer)

print(result_text)
</code></pre>
    </div>