<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design</h3>
<p>Passing <code>data</code> with <code>high</code> and <code>low</code> works. But is equivalent to <code>data+low</code> and <code>data+high</code>. And just passing two values.</p>
<p>This is what is referred to as an Iterator range. If you look at the standard library you will see that a lot of the concepts hinge around iterators you should look that up and understand how it works.</p>
<h3>Code Review</h3>
<p>For every call to <code>new</code> there should be a call to <code>delete</code>.</p>
<pre><code>    int* sorted = new int[size];
</code></pre>
<p>Or so the old text books tell us. In modern C++ you probably should never call new or delete (unless you know its a good idea).</p>
<p>But here you are leaking memory because you don't release it. You should add a <code>delete [] sorted;</code> to the end of the function.</p>
<p><strong>BUT</strong> leaving the new/delete in your code is not a good idea. It's not exception safe to start with. So simply declare a <code>vector&lt;int&gt;</code> here and let it manage the memory for you.</p>
<p>We should also note that memory management is very expensive. So rather than doing this every loop. Why not do it once at the beginning and reuse the memory.</p>
<p>Sure this works:</p>
<pre><code>    while(low_copy &lt; mid &amp;&amp; mid_copy &lt; high) {
        if(data[low_copy] &lt; data[mid_copy]) {
            sorted[i] = data[low_copy++];
        }
        else {
            sorted[i] = data[mid_copy++];
        }
        ++i;
    }
</code></pre>
<p>But we could simplify it:</p>
<pre><code>     for(;low_copy &lt; mid &amp;&amp; mid_copy &lt; high; ++i) {
        sorted[i] = (data[low_copy] &lt; data[mid_copy])
                       ? data[low_copy++];
                       : data[mid_copy++];
    }
</code></pre>
<p>Also when you see loops like this you should look at the standard algorithms to see if there is one that will do all that work for you.</p>
<p>Another thing to note is that you are copying the value from <code>data</code> to <code>sorted</code>. This is fine for integers, but you should be able to sort nearly any C++ type and copying a C++ type is not usually the most efficient way to get the value from one location to another. You should look up the concept of <code>moving</code>. When the type being sorted is a bit more complex moving it (rather than copying is usually a better idea).</p>
<p>These loops can definitely be done by standard algorthims:</p>
<pre><code>    while(low_copy &lt; mid) {
        sorted[i++] = data[low_copy++];
    }
    // Or 
    std::copy(data + low_copy, data + mid, sorted + i);
    // Or (when you move objects)
    std::move(data + low_copy, data + mid, sorted + i);
</code></pre>
<p>This is subject to overflow.</p>
<pre><code>    int mid = (high + low) / 2;
</code></pre>
<p>Common mistake. If <code>high</code> and <code>low</code> are both large then this could easily overflow. Do the division fist (on the difference). Then add to the low.</p>
<pre><code>    int mid = low + (high - low) / 2;
</code></pre>
<p>Are you sure there are 9 elements?</p>
<pre><code>    int data[] = { 5, 1, 4, 3, 65, 6, 128, 9, 0 };
    int num_elements = 9;
</code></pre>
<p>Common source of errors. Don't manually do stuff the compiler can work out correctly. This is especially true if <code>data</code> is subsequently modified (and human person can make mistakes) does not change <code>num_elements</code>.</p>
<pre><code>    int data[] = { 5, 1, 4, 3, 65, 6, 128, 9, 0 };
    int num_elements = sizeof(data)/sizeof(data[0]);
</code></pre>
<p>In more modern versions of C++ we even have a standard way of doing it:</p>
<pre><code>    int num_elements = std::size(data);
</code></pre>
<p>No need for this in main:</p>
<pre><code>    return 0;
</code></pre>
    </div>