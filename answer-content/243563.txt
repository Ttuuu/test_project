<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reallocation</h2>

<p>I will recommend against repeatedly allocating and deleting boards.  Allocate two up front, pass both into step(), returning void, and then swap them in main.  First off, this will be faster, as you don't have to do the allocations and frees.  Second, this will avoid potential memory fragmentation or issues involving sub-optimal implementations of malloc.  Third, this will allow you to, if needed, completely eliminate malloc and free usage.  (This might be needed if you want to move the implementation to a microcontroller, like <a href="https://www.adafruit.com/product/89" rel="nofollow noreferrer">Adafruit's</a>.)</p>

<p>This might not be appropriate if you are dynamically sizing the board, but you aren't doing that.  If you do dynamic sizing, you might want to make the board a structure including the width, height, and data pointer, and other things may get interesting.</p>

<p>I might suggest (inside step()) the names current and next instead of board and newBoard, but that's a matter of taste.</p>

<h2>Accessors</h2>

<p>Depending on your usage, you might want a macro or inline-able function to access a particular numbered cell in the board.  Done right, this could greatly simplify adding dynamic sizing at a later time.  For instance, with your original layout:</p>

<pre><code>/* macro version */
#define CELL(board,x,y) (((x)&gt;=0)&amp;&amp;((y)&gt;=0)&amp;&amp;((x)&lt;width)&amp;&amp;((y)&lt;height)&amp;&amp;board[x][y])
/* inline-able version */
bool CELL(bool**board,int x,int y){return (x&gt;=0)&amp;&amp;(y&gt;=0)&amp;&amp;(x&lt;width)&amp;(y&lt;height)&amp;&amp;board[x][y]; }
static bool dummycell;
bool*CELL_ptr(bool**board,int x,int y){
    if ((x&gt;=0)&amp;&amp;(y&gt;=0)&amp;&amp;(x&lt;width)&amp;(y&lt;height)) {
        return &amp;board[x][y];
    } else {
         dummycell = false;
         return &amp;dummycell;
    }
}
</code></pre>

<p>You could make a set_CELL as well, or write *CELL_ptr(board,x,y) = newvalue;</p>

<p>Using @Edward's variant, the bounds checks could be dropped, and the array access becomes <code>board[x + y*width]</code>.
If the board then becomes a structure, the accessors would then receive that structure and do the relevant work.</p>

<h2>printArray</h2>

<p>The function printArray() includes the line </p>

<pre><code>if(*(*(board + i) + j) == 0) {
</code></pre>

<p>Do <strong>not</strong> compare bool values with int constants.
(There is a classic bug of writing <code>if (boolvalue == 1)</code> and having boolvalue be 2.)
Use the boolean operators, so this line could be:</p>

<pre><code>if(!*(*(board + i) + j)) {
</code></pre>

<p>You might want to do the true case first instead of the false, which would make that line:</p>

<pre><code>if(*(*(board + i) + j)) {
</code></pre>

<p>The current printing uses three character positions per cell.  This means your 50x50 board requires 50 lines by 150 columns.  I suggest using fewer characters per cell.</p>

<p>This function could also benefit from @Edward's technique with variable <code>bool *src</code>, even if only on a line by line basis.</p>
    </div>