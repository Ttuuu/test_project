<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is only one answer so far, that by <a href="https://codereview.stackexchange.com/a/207218/59161">@Adriano Repetti</a> where clean code is mentioned. All others are havily focused on performane. </p>

<p>I'd like to add to this one answer and say that reusibility comes always first. I agree that if performance is not of great importance, you should primarily create an API that is easy to use, mantain and test.</p>

<p>Organizing your code from this point of view would mean to first create an extension for the <code>RandomNumberGenerator</code> that is the base class of the <code>RNGCryptoServiceProvider</code>. It would enumerate only <code>char</code>s that you are interested in. It doesn't have to know how many, that's what we have LINQ for so it creates an endless collection of <code>char</code>s.</p>

<pre><code>public static IEnumerable&lt;char&gt; EnumerateLetterOrDigit(this RandomNumberGenerator rng, int bufferSize = 256)
{
    var buffer = new byte[bufferSize];
    while (true)
    {
        rng.GetBytes(buffer);
        foreach (var c in buffer.Select(b =&gt; (char)b).Where(char.IsLetterOrDigit))
        {
            yield return c;
        }
    }
}
</code></pre>

<p>By doing so you could use a different provider or even mock it for testing and always return the same values. The options are there.</p>

<p>From here, it's now very easy to build your password generator. Create any random-number-generator, <code>Take</code> as many <code>char</code>s as you need and create the string.</p>

<pre><code>public static string Generate(int length)
{
    using (var rng = new RNGCryptoServiceProvider())
    {
        return new string(rng.EnumerateLetterOrDigit().Take(length).ToArray());
    }
}
</code></pre>

<p>And even though it havily uses LINQ, it's accidentally faster then your code because of the reduced number of calls to <code>GetBytes</code> (<em>discovered</em> by @Adriano?). </p>

<p>So saying that LINQ is always slow is once again proven wrong because most of the time there will be something else that isn't optimal. LINQ is just convenient and this is so great about it!</p>

<hr>

<p>There is one thing about <code>goto</code> that hasn't been said yet... and you're using something very similar everyday, it's called <code>switch</code>:</p>

<pre><code>public static void Main()
{
        var num = 1;

        switch (num)
        {
            case 1:
                goto case 3;
            case 2:
                Console.WriteLine("Hi goto!");
                break;
            case 3:
                goto case 2;
        }
}
</code></pre>

<p>Yes, you can jump within its scope from <code>case</code> to <code>case</code> in any order.</p>
    </div>