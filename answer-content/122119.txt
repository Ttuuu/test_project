<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, let me say well done on the progress made from your <a href="https://codereview.stackexchange.com/questions/121262/json-string-parsing">first question</a> to <a href="https://codereview.stackexchange.com/questions/121328/parsing-json-in-one-go/122109#top">now</a>!</p>

<h2><sub><a href="https://codereview.stackexchange.com/">Code Review</a> is for <em>reviewing</em> code</sub></h2>

<p>As you seem to be seeking advice "<em>about how to <strong>implement</strong></em>" an idea (<em>i.e.</em> streams), I think you may be better off <a href="https://softwareengineering.stackexchange.com/">asking on Programmers.SE</a>, since that is <a href="https://softwareengineering.stackexchange.com/help/on-topic">a more appropriate place for questions about <sup><em>"</em></sup><em>software architecture and design</em><sup><em>"</em></sup> and <sup><em>"</em></sup><em>algorithm and data structure concepts</em><sup><em>"</em></sup></a>.
<a href="https://codereview.stackexchange.com/">Code Review</a> is <sup><em>"</em></sup><em>not for questions about broken code, <a href="https://codereview.meta.stackexchange.com/questions/3649/my-question-was-closed-as-being-off-topic-what-are-my-options/3652#3652">hypothetical code</a>, or non-existent code, as such questions will be closed as off-topic.</em><sup><em>"</em></sup> (taken from <a href="https://codereview.stackexchange.com/help/how-to-ask">this help page</a>).</p>

<hr>

<p>I <strong>can</strong> see that you have code already, and are seeking to <em>improve</em> it (in a way that doesn't add any functionality) - so I consider your question to be on-topic.  Although your desire to learn about <strong>other</strong> ways of implementing it entirely may not be best placed on this site.</p>

<hr>

<h2>A Quick Review</h2>

<p> 
<strong>Remove old code</strong><br>
You have <em>included</em> the (now unused) code for <code>parseElegant</code> (version 1).  While I can understand you not wanting to erase this, you have already linked to your previous question (which contains the old code).  Including version 1 here just adds ~24 lines for reviewers to have to scroll through.</p>

<p> 
<strong>Can't you just use <code>strip</code>?</strong><br>
The <code>wordBeautify</code> function (which you are seeking to make redundant/remove) <em>seems</em> to be <strong>VERY</strong> similar to the <a href="https://docs.python.org/2/library/string.html#string.strip" rel="nofollow noreferrer">Python built-in string.strip method</a>?</p>

<p>Consider the following code:</p>

<pre><code>test="{:foo }"
(x,y)=wordBeautify(test,0,len(test)-1)
a=test[x:y]
b=test.strip(' "{,:}')
</code></pre>

<p><sub><strong>Result</strong></sub>:  <code>a</code> and <code>b</code> both work out to be "foo"!</p>

<p> </p>

<p> 
<strong>Use better variable names!</strong><br>
At present, your <code>parseElegant2</code> function takes an argument called <code>str1</code>.  While it is obvious that this means something along the lines of <em>the first string</em> - it is not actually particularly <strong>helpful</strong> in knowing what that variable <em>represents</em>.</p>

<p>Something more like <code>json</code>, <code>text_candidate</code>, or <code>candidate</code> may be better - as it expresses that this is a long text containing json, or something that is a <em>candidate</em> to be processed into JSON.</p>

<p>You have a similar issue in <code>wordBeautify</code>, with <code>word1</code>.  This could just be named <code>word</code>, or similar.</p>

<p> 
<strong>Return is better than print</strong><br>
I've noticed that in your function you are not <code>return</code>'ing any values.  Instead you are just <code>print</code>'ing to the standard output (STDOUT).
Is this your goal? Or will your program eventually need to construct some kind of data structure (such as a <code>dict</code>) of the JSON values?</p>

<p>I would recommend refactoring your code to return a data structure, and have your function write the JSON values into that data structure.</p>

<hr>

<h2>A word on string stream processing</h2>

<p>As <a href="https://codereview.stackexchange.com/users/54571/ferada">@ferada</a> <a href="https://codereview.stackexchange.com/questions/121328/parsing-json-in-one-go/122109#comment-226835">commented</a>, I think you should <sup>"</sup><em>consider using a stream, looking only at the (single) next character at a time and then build a state machine around it.</em><sup>"</sup>, however your current program is <strong>not</strong> doing this.</p>

<p>Instead, your loop is going through the <em>indices</em> of the string.  And is (at present), also calling your <code>wordBeautify</code> function to do the same (with indices).</p>

<p>Rather than using <code>for i in range(len(str1)):</code>, as you currently are - I would recommend that you <em>loop through the characters themselves</em> (one at a time, as <a href="https://codereview.stackexchange.com/users/54571/ferada">@ferada</a> suggested).  Thus, your loop may look more like: <code>for c in str1:</code></p>

<p>This way, you are essentially <strong>forced</strong> into <em>only</em> looking at the current character. (<em>i.e.</em> you are unable to increment/decrement any number value to go forwards or backwards in the string.)</p>

<hr>

<h2>Constructing a state machine</h2>

<p>From <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer">the Wikipedia article about Finite-state machines</a>:</p>

<blockquote>
  <p>A <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer">finite-state machine (FSM)</a> or simply <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer"><strong>state machine</strong></a>, is a mathematical model of computation used to design computer programs.  It is conceived as an abstract machine that can be in <em>one</em> of any finite number of states.  The machine is in <em>only one state at a time</em>, called the current state. It can change from one state to another when triggered, this is called a <strong>transition</strong>.  <strong><em>A particular state machine is defined by a list of its states, and the triggering condition for each transition.</em></strong>
   <br><br><sup>(Emphasis mine)</sup></p>
</blockquote>

<p>You can <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer">read the article</a> for more background information, but essentially your are seeking to construct a <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer">state machine</a>.  As you can read in the last sentence (that I've bolded), this requires:</p>

<ul>
<li>a list of states</li>
<li>the trigger conditions for each state transition</li>
</ul>

<hr>

<h2>What are the states?</h2>

<p>Luckily, <a href="http://json.org/" rel="nofollow noreferrer">the official JSON website (JSON.org)</a> <em>actually <strong>gives</strong> us</em> these exact things!
In the form of <a href="https://en.wikipedia.org/wiki/Syntax_diagram" rel="nofollow noreferrer">railroad diagrams</a>.  Specifically, they <a href="http://json.org/" rel="nofollow noreferrer">tell us</a> that:</p>

<blockquote>
  <p>An object is an unordered set of name/value pairs. An object begins with { (left brace) and ends with } (right brace). Each name is followed by : (colon) and the name/value pairs are separated by , (comma).
  <br><br>
  <a href="https://i.stack.imgur.com/2pkCG.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/2pkCG.gif" alt="An object is an unordered set of name/value pairs. An object begins with { (left brace) and ends with } (right brace)..."></a><br>
  <sub>(source: <a href="http://json.org/object.gif" rel="nofollow noreferrer">json.org</a>)</sub>  </p>
</blockquote>

<p>So we know that <strong>STRING</strong> is a <em>state</em>, for example.  They <a href="http://json.org/" rel="nofollow noreferrer">also tell us</a> <em>how</em> we get into (and out of) the <strong>STRING</strong> state:</p>

<blockquote>
  <p>A string is a sequence of zero or more Unicode characters, wrapped in double quotes...
  <br><br>
  <a href="https://i.stack.imgur.com/sY27v.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/sY27v.gif" alt="A string is a sequence of zero or more Unicode characters, wrapped in double quotes..."></a><br>
  <sub>(source: <a href="http://json.org/string.gif" rel="nofollow noreferrer">json.org</a>)</sub>  </p>
</blockquote>

<p>So we know that a <strong>STRING</strong> state is <em>triggered</em> when we encounter a <code>"</code> (quote) character. (And that it ends the same way.)
<sub><strong>Note: </strong> For now, let's ignore the backslash (<code>\</code>) <em>escape</em> style string components.</sub></p>

<p>We also are told what a <em>VALUE</em> might be as well:</p>

<blockquote>
  <p>A value can be a string in double quotes, or a number, or true or false or null...
  <br>
  <a href="https://i.stack.imgur.com/C2iU0.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/C2iU0.gif" alt="A value can be a string in double quotes, or a number, or true or false or null..."></a><br>
  <sub>(source: <a href="http://json.org/value.gif" rel="nofollow noreferrer">json.org</a>)</sub>  </p>
</blockquote>

<p>This gives us another <em>state</em>, namely <strong>NUMBER</strong> - since a value can be a number.</p>

<h2><sup>Some limitations <sub>(Let's not reinvent the whole wheel)</sub></sup></h2>

<p>We already know that you only want to deal with <strong>"</strong><em>flat JSON (no hierarchy) for keys and values</em><strong>"</strong>.
So, we'll forget about <em>OBJECT</em> and <em>ARRAY</em> in the diagram above. ;-)</p>

<p>Let's also (just to make it easy), ignore the fact that a value can be <code>true</code>, <code>false</code>, or <code>null</code>.  (<em>i.e.</em> it is either a string or a number).</p>

<h2><sub>The states so far</sub></h2>

<p>So far, we have been able to use the <a href="http://json.org/" rel="nofollow noreferrer">official JSON.org website diagrams</a> to determine we have the following two states:</p>

<ul>
<li><strong>STRING</strong></li>
<li><strong>NUMBER</strong></li>
</ul>

<p>We also know that a string is <em>triggered</em> by the condition: <code>c=='"'</code> (where <code>c</code> is our stream's <em>current character</em>).</p>

<p>But how is a <strong>NUMBER</strong> triggered?
Well <a href="http://json.org/" rel="nofollow noreferrer">the JSON.org website</a> has a <a href="http://json.org/number.gif" rel="nofollow noreferrer">rather complicated way of detecting numbers</a> (which takes into account negative numbers, scientific notation, etc).  but for these purposes let's just say that a <strong>NUMBER</strong> is <em>triggered</em> by a sequence of 1 or more of the following characters: <code>0123456789.</code> (the decimal point is included).</p>

<h2><sup>Other transitions</sup></h2>

<p>If we look back at <a href="https://i.stack.imgur.com/2pkCG.gif" rel="nofollow noreferrer">the first railroad diagram</a>:<br>
<a href="https://i.stack.imgur.com/2pkCG.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/2pkCG.gif" alt="An object is an unordered set of name/value pairs. An object begins with { (left brace) and ends with } (right brace)..."></a></p>

<p>We can see that the <strong>COLON</strong> (<code>:</code>) and <strong>COMMA</strong> (<code>,</code>) characters are also transitions between states..</p>

<hr>

<h2>Putting it all together</h2>

<p>If we combine all of these states and transitions, plus the idea of a character (rather than index) loop, and the other improvements I've mentioned - we can produce a single function which is capable of <em>processing a JSON string "<strong>all at once</strong>"</em>:</p>

<pre><code>def parseElegant3(candidate):
    READY=0
    STRING=1
    NUMBER=3
    COLON=-1
    COMMA=-2

    search={'"':STRING,  ':':COLON,  ',':COMMA,  STRING:'"',  COMMA:','}
    NOP=" {\t}\r\n"
    stringIgnore='{,:}'
    numbers='0123456789.'

    result={}
    if not len(candidate):
        return result
    accumulator=""
    mostRecentKey=None

    state=READY
    for c in candidate:
        newState=state
        if state is READY:
            if c in NOP:continue
            if c in numbers:
                newState=NUMBER
            if c in search.keys():
                newState=search[c]
        if newState is COLON:
            newState=READY
            if len(accumulator):
                accumulator=accumulator.strip()
                result[accumulator]=None
                mostRecentKey=accumulator
                accumulator=""
            else:
                state=READY
                continue
        elif newState is COMMA:
            newState=READY
        elif newState is NUMBER and not state is NUMBER:
            accumulator+=c
        if state is STRING and newState is STRING:
            if c in stringIgnore:continue
            if c==search[STRING]:
                newState=READY
                if not mostRecentKey is None:
                    result[mostRecentKey]=accumulator
                    accumulator=""
                    mostRecentKey=None
            else:
                accumulator+=c
        elif state is NUMBER:
            if c in numbers:
                accumulator+=c
            else:
                if c in NOP:continue
                assert c == search[COMMA]
                try:
                    result[mostRecentKey]=int(accumulator)
                except ValueError:
                    result[mostRecentKey]=float(accumulator)
                accumulator=""
                mostRecentKey=None
                newState=READY
        state=newState
    return result

JSONString = '{ "id": 1, "name": "A green door", "price": 12.50, "tags": "home green"}'

parseElegant3(JSONString)
</code></pre>
    </div>