<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with you that this would be more intuitive to use by chaining streams, rather than acting as a queue that must be pushed into and pulled out of.  I've never written a filtering stream like that myself, but I <em>think</em> you want to construct an <code>ostream</code> with a custom <code>streambuf</code> for each filter.</p>

<p>I definitely think that separating the line encoding and the block packing would be a good thing, and would allow your unit tests to be much more selective, and therefore more diagnostic.</p>

<hr>

<p>We seem to be assuming these typedefs:</p>

<pre><code>using std::uint32_t;
using std::uint8_t;
</code></pre>

<hr>

<p>Reviewing the <code>main()</code> - it's quite restrictive to insist on two filenames (and that the output file be seekable).  It would be more natural if it was willing to use standard i/o streams if no arguments are given.</p>

<hr>

<blockquote>
<pre><code>    uint32_t sum{id};
    auto n{datasize/sizeof(uint32_t)};
    for (uint32_t *ptr = reinterpret_cast&lt;uint32_t *&gt;(&amp;data); n; ++ptr) {
        sum += *ptr;
        --n;
    }
    return sum;
</code></pre>
</blockquote>

<p>This looks like a candidate for <code>std::span</code>:</p>

<pre><code>    std::span as_u32{reinterpret_cast&lt;std::uint32_t*&gt;(data.begin()),
                     reinterpret_cast&lt;std::uint32_t*&gt;(data.end())};
    return std::accumulate(as_u32.begin(), as_u32.end(), std::uint32_t{});
</code></pre>

<p>Or, using a simple pair of iterators, for C++17 and earlier:</p>

<pre><code>    auto first = reinterpret_cast&lt;const std::uint32_t*&gt;(data.begin());
    auto last = reinterpret_cast&lt;const std::uint32_t*&gt;(data.end());
    return std::accumulate(first, last, std::uint32_t{});
</code></pre>

<p>This method should probably be declared <code>const</code>.</p>

<p>We do have a problem here in that the data are interpreted as <code>std::uint32_t</code> <em>in the endianness of the host</em>.  That means that different platforms can generate different checksums, something generally considered undesirable.</p>
    </div>