<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code has <strong>a lot</strong> of DOM Lookups. Those are expensive so it is wise to store those in a variable and utilize the variable instead of repeatedly querying the DOM each time. It also mixes jQuery selectors with vanilla JS DOM methods like <code>document.getElementById()</code>. If you are going to use jQuery for somethings, why not be consistent and use it for all DOM lookups? For example, the <a href="https://api.jquery.com/val" rel="nofollow noreferrer"><code>.val()</code></a> method can be used to get or set the value of the first element in a jQuery collection.</p>

<pre><code>$(function() {  //newer format for $(document).ready()
  var prefillEls = $('.prefill');
  var endingEls = $('.ending');
  var issueEl = $('#issue');
  var resoEl = $('#reso');
  var scratchEl = $('#scratch');

  prefillEls.on("click", function(e) {
    //...
    if (issueEl.val() != '') {
      issueEl.val(issueEl.val()  + '\n');
    }
    if (resoEl.val() != '') {
      resoEl.val(resoEl.val() + '\n');
    }
    if (scratchEl.val() != '') {
      scratchEl.val(scratchEl.val() + '\n');
    }
</code></pre>

<p>Additionally, the code can lookup associated values for Issue, resolution and scratch in JS memory instead of repeatedly querying the DOM. One could create mappings for those associations:</p>

<pre><code>var issues = {
    "outage": "Service Out",
    "wheretech": "Where's the tech",
    "paybill": "Billing - CST Calling to pay bill",
    /* ... more ... */
};
var resolutions = {
    "outage": "Informed CST of current outage in the area",
    /* ... more ... */
};
</code></pre>

<p>Then use those mapping to determine if a value should be used:</p>

<pre><code>var id = $(this).attr('id');
if (id in issues) {
    issueEl.val(issueEl.val()  + issues[id]);
}
if (id in resolutions) {
    resoEl.val(resoEl.val() + '\n');
}
</code></pre>

<p>One could also use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> object could also be used instead of plain objects. Removing the values from the HTML will greatly simplify the markup and reduce DOM queries.</p>

<p>Similarly, those three repeated checks to see if a textarea has a value and append a new line character, followed by the new text to insert could be abstracted into a function.</p>

<hr>

<p>There are two DOM ready callback blocks (i.e. <code>$(document).ready(function() {</code>). While it isn't wrong to have two, the code can be combined into one callback. If you wanted to keep them separate, you could abstract them into two separate functions and have them called from a single callback function.</p>

<hr>

<p>The line endings are inconsistent- some lines have semi-colons and some don't. While <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">Automatic Semicolon Insertion</a> will typically handle such inconsistencies, it is advisable not to depend on it.</p>
    </div>