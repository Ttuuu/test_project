<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<blockquote>
  <p>Firstly, is there a name for this variant of the visitor pattern?</p>
</blockquote>

<p>You have made what I like to call the <em>inviting visitor pattern</em>. I'm not sure this pattern is common, but I have seen it before, disguised and usually involves 3 (types of) classes instead of 2, each with their own concern.</p>

<ul>
<li>inviter: let visitee invite visitor</li>
<li>visitee: let visitor accept me</li>
<li>visitor: visit reference</li>
</ul>

<p>As in contrast of the visitor pattern as we all know it:</p>

<ul>
<li>visitee: let visitor accept me </li>
<li>visitor: visit visitee</li>
</ul>

<p>Your visitor is also the (self-)inviter. This part is what I would rename if using the augmented visitor pattern. However, your problem is solvable with a regular visitor pattern.</p>

<blockquote>
<pre><code> public virtual Element Visit(Element element)
 {
    element = element.Accept(this);
    return element;
 }
</code></pre>
</blockquote>

<pre><code> public virtual Element Invite(Element element)
 {
    element = element.Accept(this);
    return element;
 }
</code></pre>

<hr>

<blockquote>
  <p>Secondly, if this is not the case, then is there a way I can do this
  better? Doubling up the visit methods seems wasteful.</p>
</blockquote>

<p>Since you never override <code>Visit(Element element)</code>, I don't see its purpose. If you would have a situation where you could override, consider moving this functionality to another class. You shouldn't let the visitor decide both (A) how the reference can accept the visitor and (B) how to visit the reference, these are two different concerns.</p>

<hr>

<h2>Proposed Solution</h2>

<p>Your situation allows for a regular visitor pattern. </p>

<p>Change the flow in the reference:</p>

<blockquote>
<pre><code>internal override Element Accept(IVisitor visitor)
{
    // Recursively visit the children
    Left = visitor.Visit(Left);
    Right = visitor.Visit(Right);

    // And non-recursively visit this
    return visitor.VisitNonRecursive(this);
}
</code></pre>
</blockquote>

<pre><code>internal override Element Accept(IVisitor visitor)
{
    Left = Left.Accept(visitor);
    Right = Right.Accept(visitor);

    return visitor.Visit(this);
}
</code></pre>

<p>Change the flow in the visitor and rename<code>VisitNonRecursive</code> to <code>Visit</code>.</p>

<blockquote>
<pre><code>public virtual Element Visit(Element element)
{
    element = element.Accept(this);
    return element;
}
</code></pre>
</blockquote>

<pre><code>public virtual Element Visit(Element element)
{
     if (element is LeafElementA) return Visit(element as LeafElementA);
     if (element is LeafElementB) return Visit(element as LeafElementB);
     // ..
     return element;
}
</code></pre>
    </div>