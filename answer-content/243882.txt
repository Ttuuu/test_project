<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Answers to your questions</h1>
<blockquote>
<p>Should other lambdas be captured by referenced or by value?</p>
</blockquote>
<p>Functionally, for non-mutable lambdas, it doesn't matter. However, if a lambda is marked mutable then capturing by value will make a copy of the lambda's state, whereas if it's a reference no copy is made. Here is an example you can try out yourself:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

int main() {
    std::vector&lt;int&gt; vs[2];
    auto iota = [i=0]() mutable {return i++;};
    auto generator = [&amp;iota]() mutable {return iota();}; // try removing the &amp;

    for(auto &amp;v: vs) {
        std::generate_n(std::back_inserter(v), 5, generator); // try using iota directly
        for(auto i: v)
            std::cout &lt;&lt; i &lt;&lt; ' ';
        std::cout &lt;&lt; '\n';
    }
}
</code></pre>
<p>It's probably best to capture them by reference, unless mutable lambdas are used and you want a copy of the state to be made.</p>
<blockquote>
<p>For auto return types, when should you use the arrow notation to signify a return type?</p>
</blockquote>
<p>You should use it when it is important to constrain the return type, so that you don't accidentily return the wrong type. For example, if I want to write a function that calculates the square root of something, and always return the same type as the input, you should write:</p>
<pre><code>auto square_root(auto value) -&gt; decltype(value) {
    return std::sqrt(value);
}
</code></pre>
<p>If you omit the trailing return type, then calling the above function with an <code>int</code> will return a <code>double</code> instead. And that might then be a problem if you would do something like:</p>
<pre><code>printf("Square root of 4 is %d\n", square_root(4)); // runtime error
</code></pre>
<blockquote>
<p>Is there a cleaner way to declare the type of queue in the code below?</p>
</blockquote>
<p>Yes, if you can make the compiler deduce that it should use <code>closer()</code> to compare two <code>Points</code>. One option is to make <code>Point</code> a <code>class</code> and implement <code>operator&lt;()</code>, another one (as pointed out by Mikael H) is to just define a global overload for <code>operator&lt;</code> that takes two <code>Points</code>:</p>
<pre><code>bool operator&lt;(const Point&amp; p1, const Point&amp; p2) {
    return closer(p1, p2);
}
</code></pre>
<p>Then you can just write:</p>
<pre><code>std::priority_queue&lt;Point&gt; queue;
</code></pre>
<h1>Use <a href="https://en.cppreference.com/w/cpp/algorithm/partial_sort_copy" rel="nofollow noreferrer"><code>std::partial_sort_copy</code></a></h1>
<p>Using a priority queue is one way to solve it, but it is a bit cumbersome here, since there is no fast way to get the first <code>k</code> elements out. Also, by adding all input elements to the queue, you have sorted all elements, which means you have done more work than necessary. What you want is just to do a partial sort, where you sort the input array until you get the first <code>k</code> smallest elements, and you don't care about the order of the rest. <code>std::partial_sort_copy()</code> allows you to do that, while still allowing a const reference to the input vector:</p>
<pre><code>std::vector&lt;Point&gt; nearest_neighbours(k);
std::partial_sort_copy(points.begin(), points.end(), nearest_neighbours.begin(), neareset_neighbours.end(), closer);
return nearest_neighbours;
</code></pre>
    </div>