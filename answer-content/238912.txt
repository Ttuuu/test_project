<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can avoid all the copypasta by writing a template function that tries a number of types in a row. The idea is that e. g. <code>visit_any_as&lt;int, double, char&gt;(any, visitor)</code> will try calling <code>visitor(std::any_cast&lt;int&gt;(any))</code> if possible, otherwise it will call <code>visit_any_as&lt;double, char&gt;(any, visitor)</code> to try the next type, and so on until the types are exhausted:</p>

<pre><code>#include &lt;any&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;utility&gt;

template &lt;class Visitor&gt;
void visit_any_as(std::any const &amp;, Visitor &amp;&amp;)
{
    throw std::logic_error("std::any contained no suitable type, unable to visit");
}

template &lt;class First, class... Rest, class Visitor&gt;
void visit_any_as(std::any const&amp; any, Visitor&amp;&amp; visitor)
{
    First const* value = std::any_cast&lt;First&gt;(&amp;any);
    if(value)
    {
        visitor(*value);
    }
    else
    {
        visit_any_as&lt;Rest...&gt;(any, std::forward&lt;Visitor&gt;(visitor));
    }
}

int main()
{
    std::any any{-1LL};

    try
    {
        visit_any_as&lt;std::string, int, double, char&gt;(any, [](auto const&amp; x) {
            std::cout &lt;&lt; x &lt;&lt; std::endl;
        });
    }
    catch(std::exception const&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; std::endl;
    }
}
</code></pre>

<p>However, do consider std::variant if you know in advance the list of possible types, as then std::visit will solve the problem much more neatly.</p>
    </div>