<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Two or Three max.</h1>

<p>There are three input thus there need be only 3 tests max, any more and the are working on information already known.</p>

<p>The best is when you find two inputs that are <code>true</code>, that means you can return <code>false</code> without testing the last value.</p>

<p>The current given answers all need more than three tests in the worst cases and at best three tests.</p>

<p>The flowing will do three test worst case and 2 best</p>

<pre><code>function onlyOne(a, b, c) {
    if (a) {
        if (b) { return false  }
        return c ? false : true;  
    }
    if (b) { return c ? false : true }
    return c ? true : false;
}
</code></pre>

<p>Or as</p>

<pre><code>function onlyOne(a, b, c) {
    if (a) { return b ? false : c ? false : true }
    return b ? (c ? false : true) : (c ? true : false);
}
</code></pre>

<p>There is also a time invariant solution that always has the same performance, though its best and worst is 3 tests. Both use lookup tables</p>

<pre><code>const T = true, F = false, look = [F,T,T,F,T,F,F,F];
const onlyOne = (a, b, c) =&gt; look[(a ? 1 : 0) + (b ? 2 : 0) + (c ? 4 : 0)];
</code></pre>

<p>Or </p>

<pre><code>const T = true, F = false, look = [F,F,T,F];
const  onlyOne = (a, b, c) =&gt; look[!a + !b + !c];
</code></pre>

<p><strong>Update</strong> </p>

<p>I would like to clarify some common misunderstanding about Javascript. Dogma and the fanaticism that enforces it has no place in the coding community. Hence the update.</p>

<h3>(Ternaries have multiple paths) Wrong.</h3>

<p>There are two types of code in Javascript Expressions and Statement</p>

<ul>
<li>Expression evaluate to a value. eg <code>"a"</code>, <code>0</code>, <code>a = b</code>, <code>(a,b)</code>, <code>foo()</code></li>
<li>Statements do not have a value. eg <code>if</code>, <code>else if</code>, <code>while</code>, <code>do ... while</code>, <code>for</code>, <code>switch</code>, <code>return</code></li>
</ul>

<p>Ternaries are expressions, they are not statements. Ternaries are expression selectors and can be thought of as lookup index rather than a conditional branch.</p>

<p>The following is another way of writing a ternary like expression in javascript.</p>

<pre><code>var c = true;
var res = ([100, 200])[+c]; // res is assign 200
c = false;
res = ([100, 200])[+c]; // res is assign 100
</code></pre>

<p>Because ternaries do not split code flow you can not use ternaries to introduce statement that cause code flow to branch.</p>

<pre><code>// Code flow is not split thus the next to can not work
a ? a++ : return;  // Error unexpected token
a ? continue : break;  // Error unexpected token

// need to diverge code flow to do the following
if (a) a++; else return;
if (a) continue; else break;
</code></pre>

<h3>(Branching means low javascript performance) Wrong.</h3>

<p>Modern CPUs use look ahead instruction pipelines that fetch instruction from memory while at the same time performing operations. They do this to improve performance. However conditional branching can mean the wrong path is fetched. When this happens the pipeline needs to rollback and fetch the correct path, meanwhile the CPU must wait until at least the first instruction has loaded. This results in downgraded performance.</p>

<p>This problem can be reduced using various method such as branch prediction. The CPU uses past results to guess which way to go next time.</p>

<p>Many JS codes believe that diverging code flow is poor because it may trigger the CPU instruction pipeline to rollback. That it is better to use syntax that avoids diverging code flow so to avoid this penalty. </p>

<p>This is not true, the only way to avoid CPU instruction branching in JavaScript is by not using operators in expressions (which is pointless) or by using statements that don't require a type check eg <code>return foo</code>;</p>

<p>Javascript is loosely typed, which means that every expression that contains a operator must have its type checked for the operator to be applied correctly. There is no way to avoid it. Even optimized code needs to have a test to make sure a type has not changed</p>

<p>You can not avoid CPU instruction pipeline rollback when writing Javascript expressions </p>

<h3>Semantic and syntactic meaning</h3>

<p>All code represents meaningful concepts, an abstraction of the zeros and ones that lay underneath, these abstractions are split into two types.</p>

<ul>
<li>Syntactic meaning</li>
</ul>

<p>A language is comprised of building blocks and a set of rules that define how these blocks relate to each other. These blocks and rules are the syntax of a language. They are non contextual and have a fixed fixed meaning.</p>

<ul>
<li>Semantic meaning (abstraction)</li>
</ul>

<p>Using the blocks (tokens) and rules of syntax we can create expressions and statements. This grouping along with the context have a semantic meaning. Semantic meaning is not fixed, and the same code have entirely different semantic meaning depending on the context.</p>

<p>Semantic meaning is a fundamental part of writing code, its how we abstract code into high and more meaningful representation of all those bits.</p>
    </div>