<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would lay it out something like this:</p>

<pre><code>interface AuthenticableInterface
{
    public function getName(): string;

    /**
     * Based on auth type, return the right format of credentials to be sent to the server
     *
     * @param Authenticable $credentials
     * @return mixed
     */
    public function encodedCredentials(): string;
}

class AbstractAuthenticable implements AuthenticableInterface
{
    protected $name = 'PLAIN';
    protected $options;

    public function __construct(Options $options)
    {
        $this-&gt;options = $options;
    }

    abstract public function encodedCredentials(): string;

    public function getName(): string
    {
        return $this-&gt;name;
    }
}

class Plain extends AbstractAuthenticable{

    public function encodedCredentials(): string
    {
        $credentials = "\x00{$this-&gt;options-&gt;getUsername()}\x00{$this-&gt;options-&gt;getPassword()}";
        return XML::quote(base64_encode($credentials));
    }

}
</code></pre>

<p>I kept the interface, a lot of people get confused between using abstract and interface.  I should add that the interface is inherited through the extending of the abstract class, so there is no need to declare (implement) it again.</p>

<p>Interfaces basically just outline the classes API (application program interface, or I like to say public interface), Abstract classes do the same thing (basically) as an interface but you can have concrete implementation of common functionality within the class.  Interface doesn't allow you to implement any functionality.</p>

<p>By keeping the interface you could in theory create a Authenticable that uses a base other then the Abstract class.  This is useful especially when type casting.</p>

<pre><code>class foo{
     public function __construct(AuthenticableInterface $Authenticable){
          //...
     }
}
</code></pre>

<p>So instead of hinting the Abstract class or the Concrete class you can type hint the interface which can be satisfied even when using a completely different base class.  In this case it may not be strictly necessary to carry the interface but it does give you that little bit of extra flexibility for the hierarchy.  </p>

<p>A good example of the above would be to make a token based login for something like REST where you don't have a username and password, and so that class could be quite different then the base class that uses a user and a password.</p>

<p>Another example I can think of is if you have a hierarchy in your user system, such as a Parent and Subusers, or Admins and non-admins.  You may want something like a passwordless Login As functionality that relies more on the user's role and relationship to decide if it should authenticate.  Something like a button you just click to login as one of your associated subusers etc.  We use subusers a lot in our user systems.</p>

<p>Rather or not you should decouple the username and password depends really on how you want to pass that data.  Obviously username and password are going to be really important so it may be worth adding them as function arguments.  But as I mentioned above you may create authentication that does not use a username and password.  </p>

<p>I would say the biggest argument for it is, then the password and username is not "hidden" or buried in some kind of BLOB or array data. But on the same token (pun intended) you may have some classes that don't need them.  So the biggest disadvantage is then requiring it as part of the class, which may break the single interface design.</p>

<p>For example consider this interface and class:</p>

<pre><code>interface Authenticable
{
    public function setPassword(string $password);
}

class LoginAs
{
     //public function setPassword(string $password);
}
</code></pre>

<p>So you can see setting a password for "LoginAs" doesn't really make sense and this would stretch what we can do with our interface.  By having them as options they are not exposed to the interface because they are wrapped in another object.</p>

<p>I'll end by saying if you keep them in the options you will want to do some more robust error checking such as this:</p>

<pre><code>public function encodedCredentials(): string
{
    $credentials = "\x00{$this-&gt;options-&gt;getUsername()}\x00{$this-&gt;options-&gt;getPassword()}";
    return XML::quote(base64_encode($credentials));
}
</code></pre>

<p>I modified your <code>getUsername</code> function in <code>Options</code>. I like to set them up this way.</p>

<pre><code>class options{

     public function getUsername($default=null){
           if(isset($this-&gt;username)) return $this-&gt;username;

           if(!is_null($default))  return $default;

           throw new OptionException("Option {$username} is not set");
     }  
}
</code></pre>

<p>By doing this we can control what we get back when its not set.  By setting a default other than null, when default is not set we throw an error.  Typically I do this using the magic <code>__call</code> method etc..  Basically I showed this to show how you can implement some error checking on those values.  Obviously you could check this in each <code>encodedCredentials()</code> but you can also bake it into the options class so it happens when we try to get an options etc...</p>

<p>Hope that helps!</p>
    </div>