<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use regexes</h2>

<p>...and a generator. This matches against an unknown prefix, and an optional unit suffix, and drops the suffix.</p>

<pre><code>def strip_uom(data):
    rex = re.compile(r'^(.+?) *(dB|Hz|dBmV|Ksym/sec)?$')
    return (rex.match(d)[1] for d in data)
</code></pre>

<p>However, this is more easily done by matching on the number itself:</p>

<pre><code>def strip_uom(data):
    rex = re.compile(r'^([0-9.]+)')
    return (rex.match(d)[1] for d in data)
</code></pre>

<p>I haven't tested this, so you should.</p>

<h2>Make a main function</h2>

<p>To house your global code.</p>

<h2>Avoid a list for <code>fields</code></h2>

<p>Instead, you can use a generator function here too:</p>

<pre><code>def pairs_from_dict(data):
    for key, value in data.items():
        try:
            float(value)
        except ValueError:
            value = f'"{value}"'
        yield f'{key}={value}'
</code></pre>

<h2>Potential loop reduction</h2>

<pre><code>downstream_data = []
for row in dstable.find_all('tr')[1:]:
    column_values = [col.get_text() for col in row.find_all('td')]
    downstream_data.append(dict(zip(dstable_tags, strip_uom(column_values))))
</code></pre>

<p>can be</p>

<pre><code>downstream_data = [
    dict(zip(dstable_tags, strip_uom(
         col.get_text() for col in row.find_all('td')
    )))
    for row in dstable.find_all('tr')[1:]
]
</code></pre>

<p>though I don't particularly think that's an improvement.</p>
    </div>