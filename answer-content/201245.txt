<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In some camps it is not advised to tightly couple your code to framework specific dependencies like <code>IConfiguration</code>.</p>

<p>Based on the shown constructor it looks like the <code>UnitOfWorkV</code> really needs the connection string and not the configuration. That late bound constructor dependency will only be realized when the class is being resolved.</p>

<p>Refactor the  class to depend on what is actually needed.</p>

<pre><code>public UnitOfWorkV(string connectionString) {
    _sessionFactory = Fluently.Configure()
        .Database(MsSqlConfiguration.MsSql2008.ConnectionString(connectionString)
        .ExposeConfiguration(ConfigureNhibernateValidator)
        .Mappings(m =&gt; {
            m.FluentMappings.AddFromAssembly(Assembly.GetExecutingAssembly());
            m.HbmMappings.AddFromAssemblyOf&lt;JobQueue&gt;();
        })
        .BuildSessionFactory();
    Session = _sessionFactory.OpenSession();
    Session.FlushMode = FlushMode.Auto;
}
</code></pre>

<p>And get the connection string at start up, </p>

<pre><code>var connectionString = Configuration.GetConnectionString("ConexionV");
</code></pre>

<p>injecting it explicitly into the class.</p>

<pre><code>if(connectionString == null) //Fail early
    throw new Exception("Missing connection string");

services.AddScoped&lt;IUnitOfWork, UnitOfWorkV&gt;(_ =&gt; new UnitOfWorkV(connectionString));
</code></pre>

<p>That way, any validation can be done immediately at startup instead of deferring to when resolving the actually class</p>
    </div>