<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Review II - your <code>fuzzy.go</code> code</strong></p>

<hr>

<p>After a quick read of your Go code, the Go code for package <code>go-fuzzywuzzy</code>, and the Go documentation, it is reasonable to hope for at least a 60% to 95% improvement in Go performance.</p>

<hr>

<p>Review I, package <code>go-fuzzywuzzy</code>, completely rewrote the package <code>go-fuzzywuzzy</code> file <code>stringutility.go</code> in Go for a significant improvement in performance.</p>

<p>Before:</p>

<pre><code>$ go build fuzzy.go &amp;&amp; time ./fuzzy
real    0m55.183s
user    0m58.858s
sys     0m0.944s
$
</code></pre>

<p>After:</p>

<pre><code>$ go build fuzzy.go &amp;&amp; time ./fuzzy
real    0m5.735s
user    0m6.601s
sys     0m0.193s
$
</code></pre>

<p>The package <code>go-fuzzywuzzy</code> author adopted the suggested <code>stringutility.go</code> changes:</p>

<pre><code>[Fixes #4] Stop reinitializing costly regex in stringutility
https://github.com/paul-mannino/go-fuzzywuzzy/commit/f14294bf5858c8a7fa51b026a9ee9a2802c816bf

Was using regexp.MustCompile within a frequently invoked
method Cleanse. Since go does not cache these calls, it was
incurring a costly regex compilation each time Cleanse was
called. The other changes made in the stackoverflow post that
caught this issue seem to further improve performance by
about 10% on top of the massive gains from fixing this issue,
so incorporating those as well.
</code></pre>

<hr>

<hr>

<p>Now that poor package <code>go-fuzzywuzzy</code> performance is no longer muffling your code performance, let's review your code (<code>fuzzy.go</code>).</p>

<p>Fix obvious problems: check for errors, check for indices in range, flush buffers, close files, and so on.</p>

<p>Your fuzzy search algorithm performance appears to be quadratic - O(original x target). For many cases (exact lowercase match), replace your quadratic algorithm with a linear algorithm - O(original x 1).</p>

<pre><code>for _, line := range original {
    // ...
    name, data := line[1], targetData
    if target, ok := targetMap[strings.ToLower(name)]; ok {
        data = []string{target}
    }
    match, err := fuzzy.ExtractOne(name, data)
    // ...
}
</code></pre>

<p>Performance:</p>

<pre><code>$ go build fuzzy.go &amp;&amp; time ./fuzzy
real    0m5.370s
user    0m6.228s
sys     0m0.175s
$

$ go build peter.go &amp;&amp; time ./peter
real    0m2.372s
user    0m2.785s
sys     0m0.070s
$
</code></pre>

<p>Also, <code>peter.go</code> appears to be much faster than your Python implementation (<code>fuzzy.py</code>).</p>

<p>As promised, the Go user time has been improved by over 95%: original telex-wap 0m58.858s; peterSO 0m2.785s; user -95.27%.</p>

<p><code>peter.go</code>:</p>

<pre><code>package main

import (
    "encoding/csv"
    "fmt"
    "os"
    "strconv"
    "strings"

    fuzzy "github.com/paul-mannino/go-fuzzywuzzy"
)

func readCsv(file string) ([][]string, error) {
    csvFile, err := os.Open(file)
    if err != nil {
        return nil, err
    }
    defer csvFile.Close()
    r := csv.NewReader(csvFile)
    records, err := r.ReadAll()
    if err != nil {
        return nil, err
    }
    return records, nil
}

func matchNames() error {
    target, err := readCsv("sp500.csv")
    if err != nil {
        return err
    }
    if len(target) &gt; 1 {
        target = target[1:]
    }
    var targetData []string
    var targetMap = make(map[string]string, len(target))
    for _, line := range target {
        if len(line) &lt;= 1 {
            continue
        }
        name := strings.TrimSpace(line[1])
        targetData = append(targetData, name)
        targetMap[strings.ToLower(name)] = name
    }

    original, err := readCsv("constituents.csv")
    if err != nil {
        return err
    }
    if len(original) &gt; 1 {
        original = original[1:]
    }

    csvOut, err := os.Create("results_go.csv")
    if err != nil {
        return err
    }
    csvWriter := csv.NewWriter(csvOut)
    err = csvWriter.Write([]string{"name", "match_name", "match_score"})
    if err != nil {
        return err
    }

    for _, line := range original {
        if len(line) &lt;= 1 {
            continue
        }
        name, data := strings.TrimSpace(line[1]), targetData
        if target, ok := targetMap[strings.ToLower(name)]; ok {
            data = []string{target}
        }
        match, err := fuzzy.ExtractOne(name, data)
        if err != nil {
            return err
        }
        err = csvWriter.Write([]string{name, match.Match, strconv.Itoa(match.Score)})
        if err != nil {
            return err
        }
    }

    csvWriter.Flush()
    err = csvWriter.Error()
    if err != nil {
        return err
    }
    err = csvOut.Close()
    if err != nil {
        return err
    }
    return nil
}

func main() {
    err := matchNames()
    if err != nil {
        fmt.Fprintln(os.Stderr, err)
        os.Exit(1)
    }
}
</code></pre>

<p><code>fuzzy.go</code>:</p>

<pre><code>package main

import (
    "encoding/csv"
    "github.com/paul-mannino/go-fuzzywuzzy"
    "os"
    "strconv"
)

func readCsv(file string) [][]string {
    csvFile, _ := os.Open(file)
    defer csvFile.Close()
    r := csv.NewReader(csvFile)
    records, _ := r.ReadAll()
    return records
}

func main() {

    original := readCsv("constituents.csv")
    target := readCsv("sp500.csv")
    csvOut, _ := os.Create("results_go.csv")
    csvwriter := csv.NewWriter(csvOut)

    var targetData []string

    for _, line := range target[1:] {
        targetData = append(targetData, line[1])
    }
    csvwriter.Write([]string{"name", "match_name", "match_score"})
    for _, line := range original[1:] {
        match, _ := fuzzy.ExtractOne(line[1], targetData)
        csvwriter.Write([]string{line[1], match.Match, strconv.Itoa(match.Score)})
    }
}
</code></pre>
    </div>