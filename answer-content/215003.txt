<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ugh. Not only does this effectively push method resolution to runtime rather than compile-time, but it doesn't handle ambiguities. What if someone foolishly implements <code>IActivityStatusResult</code> and <code>IPurchaseStatusResult</code> in the same class?</p>

<p>I would consider handling this with T4 code generation. Something like</p>

<pre><code>&lt;#@ template debug="false" hostspecific="true" language="C#" #&gt;
&lt;#@ assembly name="System.Core" #&gt;
&lt;#@ output extension=".g.cs" #&gt;
using System.Collections.Generic;

namespace Foo
{
    public static partial class Bar
    {
&lt;# WritePopulateStatusNames("IActivityStatusResult",  "GlobalConstants.GetActivityStatuses()",  "Status",   "StatusName"); #&gt;
&lt;# WritePopulateStatusNames("IPurchaseStatusResult",  "GlobalConstants.GetPurchaseStatuses()",  "Status",   "StatusName"); #&gt;
&lt;# WritePopulateStatusNames("IQuotationStatusResult", "GlobalConstants.GetQuotationStatuses()", "Status",   "StatusName"); #&gt;
&lt;# WritePopulateStatusNames("IInvoiceStatusResult",   "GlobalConstants.GetInvoiceStatuses()",   "Status",   "StatusName"); #&gt;
&lt;# WritePopulateStatusNames("ICurrencyResult",        "GlobalConstants.GetCurrencies()",        "Currency", "CurrencyName"); #&gt;
    }
}

&lt;#+ public void WritePopulateStatusNames(string type, string dict, string intProp, string strProp)
    {
#&gt;      public static List&lt;&lt;#=type#&gt;&gt; PopulateStatusNames(List&lt;&lt;#=type#&gt;&gt; items)
        {
            Dictionary&lt;int, string&gt; lookup = &lt;#=dict#&gt;;

            foreach (var item in items)
            {
                item.&lt;#=strProp#&gt; = lookup[item.&lt;#=intProp#&gt;];
            }

            return items;
        }

&lt;#+ }#&gt;
</code></pre>

<p>That way you get compile-time resolution and a compile-time error in case of ambiguities.</p>

<hr>

<p>On the actual code itself, why <code>List&lt;&gt;</code>? Code to the interface, not the implementation: here that means preferring <code>IList&lt;&gt;</code> or even <code>IEnumerable&lt;&gt;</code>.</p>
    </div>