<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A triply nested loops always look scary. Especially with <code>while (true)</code>.</p>
<p>First thing first, trust yourself. The leaf node (and the <code>ptr_a</code> contains only leafs) has only one neighbour. The</p>
<pre><code>for (const auto&amp; node : graph[leaf].neighbors)
</code></pre>
<p>loop is effectively</p>
<pre><code>auto&amp; node = graph[leaf].neighbors.begin();
</code></pre>
<p>Second, no naked loops please. And more functions please. The</p>
<pre><code>for (const auto&amp; leaf : *ptr_a)
</code></pre>
<p>prunes leaves from the tree. Factor it out into a <code>prune_leaves</code> function, which would return a set (technically a vector) of the new leaves:</p>
<pre><code>leaves = prune_leaves(leaves, graph);
</code></pre>
<p>Third, the outer loop shall naturally terminate when less than 3 leaves remain.</p>
<p>Finally, separate IO from the business logic. That said, a code along the lines of</p>
<pre><code>    graph = build_graph();
    leaves = collect_leaves(graph);
    while (leaves.size() &lt; 3) {
        leaves = prune_leaves(leaves, graph);
    }
    return leaves;
</code></pre>
<p>would win my endorsement. Notice how <code>ptr_a</code> and <code>ptr_b</code> - which are not the most descriptive names - disappear.</p>
    </div>