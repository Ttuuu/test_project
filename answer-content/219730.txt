<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your main game loop, rather than call <code>Console.Clear()</code> and repainting all your content (which can cause some flicker), just update the previous frame with any changes.  This means that initially you'll want to draw everything, but after that you only need to update stuff when it changes.  When the fruit moves, erase the old position (unless it is covered by the snake) and draw it in the new one.  When the snake is updated, erase from the old location and draw it in the new.  If you can have multiple things occupying the same space, then this can be easier to implement if you erase anything that is moving, then redraw the entire screen (since you won't have to consider what to erase a part of the screen with).</p>

<p>Your jerkiness is probably because you call <code>Thread.Sleep</code> with a fixed interval.  The actual interval will be the sleep time plus however long it takes to run the rest of the code in your game loop plus variation in the exact duration of the Sleep.  Consider using <code>System.Environment.GetTickCount()</code> in the duration calculation.  You'd call that right after the sleep ends, save it in a variable (properly initialized before the loop), then the sleep duration would be your current time minus the elapsed time (another call to GetTickCount() minus the previous value), checking for overflow (duration less than 0).  Also, the sleep is better positioned at the end of the game loop, rather than the beginning (as you'll get a sleep before the first draw of the game screen with what you have).</p>

<p>In your <code>Fruit</code> class, create a member variable to hold your <code>Random</code> generator.  Your current code creates a new one, with a new seed, every time you need a new fruit, which can create less-than-random results if it is called too frequently.</p>

<p>Consider creating a <code>Point</code> class to hold X and Y values.</p>
    </div>