<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's an interesting, simple approach.</p>

<p>But you don't need <code>new Long</code> objects. Better use primitive types instead.</p>

<p>In fact, as <a href="https://codereview.stackexchange.com/users/21160/njzk2">@njzk2</a> pointed out in a comment,
you don't need <code>long</code> at all, as dates in <code>yyyyMMdd</code> format are alphabetically sorted, you can use simple String comparison.</p>

<p>It's good you mention in comments that you create a <code>SimpleDateFormat</code> instance inside the method for thread safety.
Another <a href="https://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable">common solution in such situations</a> is to use a <code>ThreadLocal</code>.
You can wrap a <code>SimpleDateFormat</code> instance in a <code>ThreadLocal</code> so that all threads will have their own copy, eliminating thread safety issues.</p>

<p>Last but not least, "math" is a poor name for a date formatter object.</p>

<p>Putting my suggestions together:</p>

<pre><code>private static final ThreadLocal&lt;DateFormat&gt; dateFormatThreadLocal = new ThreadLocal&lt;DateFormat&gt;() {
    @Override
    protected DateFormat initialValue() {
        return new SimpleDateFormat("yyyyMMdd");
    }
};

public static int compareDates(Date date1, Date date2) {
    DateFormat dateFormat = dateFormatThreadLocal.get();
    return dateFormat.format(date1).compareTo(dateFormat.format(date2));
}
</code></pre>
    </div>