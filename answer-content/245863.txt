<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is not much to improve in your code, it's compact and efficient. These are few suggestions:</p>
<h2>Input validation</h2>
<p>When the input number is negative the result is always true. To avoid confusion you can launch an exception.</p>
<pre class="lang-java prettyprint-override"><code>public static boolean validate(int id) {
        if (id &lt; 0) {
            throw new IllegalArgumentException("Input cannot be negative.");
        }
        // ..
}
</code></pre>
<h2>Clarity</h2>
<p>The Luhn Checksum algorithm is described very well on Wikipedia and by you on your question, but your implementation is not easy to follow. For example:</p>
<pre class="lang-java prettyprint-override"><code>totalSum += id%10;
</code></pre>
<p>Here the last digit of <code>id</code> is added to <code>totalSum</code>. Adding a method (with the explanation of the operation in the name) makes it more readable:</p>
<pre class="lang-java prettyprint-override"><code>totalSum += getRightMostDigit(id);
</code></pre>
<p>Same for:</p>
<pre class="lang-java prettyprint-override"><code>id /= 10;
</code></pre>
<p>This operation removes the last digit of <code>id</code>, which can be changed to:</p>
<pre class="lang-java prettyprint-override"><code>id = dropRightMostDigit(id);
</code></pre>
<p>I would also change the input variable name from <code>id</code> to <code>number</code>, but this is personal taste.</p>
<h2>Perfomance</h2>
<p>It's hard to improve performance and keep readability for your method. The only change I would suggest is to replace the <code>getLuhn</code> method with a static array.</p>
<p>This change makes it two times faster on my machine and gets rid of the additional method.</p>
<h2>Code refactored</h2>
<pre class="lang-java prettyprint-override"><code>public static boolean validate(int number) {
    if (number &lt; 0) {
        throw new IllegalArgumentException("Input cannot be negative.");
    }
    // Array containing:
    // - for index in [0,4]: the double of the index value   
    // - for index in [5,9]: the sum of the digits of the doubled index value. E.g. index = 6 -&gt; 6*2 = 12 -&gt; 1+2 = 3
    int[] luhn = new int[] { 0, 2, 4, 6, 8, 1, 3, 5, 7, 9 };
    
    int totalSum = 0;
    while (number &gt; 0) {
        totalSum += getRightMostDigit(number);
        number = dropRightMostDigit(number);
        if (number &gt; 0) {
            totalSum += luhn[getRightMostDigit(number)];
            number = dropRightMostDigit(number);
        }
    }
    return totalSum % 10 == 0;
}

private static int getRightMostDigit(int number) {
    return number % 10;
}

private static int dropRightMostDigit(int number) {
    return number / 10;
}

</code></pre>
<h2>Personal opinion</h2>
<p>Many implementations of the Luhn Checksum accept a <code>String</code> as input, so they can be used to validate credit cards or simply to operate on numbers bigger than an <code>int</code>. What is the use case of your algorithm?</p>
<p>The purpose of your implementation can also be included as a comment, it will help others to understand whether they need it or not.</p>
    </div>