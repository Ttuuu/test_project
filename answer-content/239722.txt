<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From what I can gather you are trying to produce a summary view with forum statistics. The code is a bit hard to read and I am not in a position to reproduce your environment right now so I will just give some tips.</p>

<p>In order to analyze and optimize your queries you must absolutely get acquainted with the <strong>execution plan</strong>. It will tell you how the query parser is processing your SQL, whether it is using indexes etc, and what parts of the code are more expensive.</p>

<p><strong>Indexing</strong>: generally you are going to put an index on the fields against which you will be actually searching.
For example indexing the user ID in the table of posts makes sense, because searching by user (user ID) is a very common type of request. So when you run a query like <code>select from table where userid = xxx</code>, the database engine can use the index and avoid doing a <strong>full table scan</strong> to retrieve the results. For an ecommerce site, you will probably index the order date when you frequently count the number of orders within a date range etc.</p>

<p>When you are <strong>joining</strong> tables, it will also help if the fields being joined are covered by an index.</p>

<p>An index is not an absolute requirement, if you have very few records you won't experience performance problems, but if you have lots of records and join many tables the load is going to increase exponentially.</p>

<p>In terms of <strong>data storage</strong> some design choices strike me as not so efficient eg:</p>

<pre><code>CREATE TABLE [dbo].[Topics](
    [Id] [bigint] IDENTITY(1,1) NOT NULL,
    [Text] [nvarchar](max) NULL,
    [CreationDateTime] [datetime2](7) NOT NULL,
    [Author] [nvarchar](max) NULL,
    [ForumId] [bigint] NOT NULL,
 CONSTRAINT [PK_Topics] PRIMARY KEY CLUSTERED 
(
    [Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
</code></pre>

<p>The maximum length for a username is usually quite limited (probably &lt; 50 chars) so nvarchar(50) should be more than enough. But it is common to use user IDs. Although there could be one benefit here, if you delete a user from the table of users, you could still retain the original name in the posts hes/she made... for historical purposes.</p>

<p>Even for the post messages <code>[nvarchar](max)</code> does not seem to be justified. I don't think any forum will really allow unlimited post size. In fact even if you did, the webserver will likely deny very large HTTP POST requests (could be a few megabytes).</p>

<p>The performance issues with <code>[nvarchar](max)</code> are not always obvious or immediate but for reference here is one discussion on the matter: <a href="https://sqlperformance.com/2017/06/sql-plan/performance-myths-oversizing-strings" rel="nofollow noreferrer">Performance Myths : Oversizing string columns</a></p>

<p>IDs are often <code>int</code>, unless you really expect to have billions of records in your tables... even with lots of table regeneration <code>bigint</code> seems excessive.</p>

<p>As to the stored procedure proper: you are under no obligation to have such a big query with lots of nested SELECT statements. Readability is not that great.</p>

<p>Instead, you could collect the stats in <strong>separate statements</strong>. And then gather all the values together.
Use a temporary table or in-memory table if you want. Since this is a stored procedure and not a regular view you have lots of freedom.</p>

<p>What I would suggest is:</p>

<ul>
<li>rethink your <strong>table structure</strong>, look at how forums works, download some free forum software like phpbb, freebb or whatever and analyze the code and the database structure</li>
<li>break your code in small bits, and evaluate each of them with the help of the execution plan</li>
<li>if that is too complicated or too much work, simplify the code by removing some level of detail, until you get acceptable performance - this is one way to determine where the bottleneck is. Again, the execution plan should tell you.</li>
</ul>

<p>If you still cannot overcome the performance problem, then there is a very old technique: use <strong>aggregate tables</strong>. These are separate statistical tables that you update every time a post is made, moved or deleted etc. There is more overhead involved, because you must keep them in sync to maintain accurate figures (use <strong>transactions</strong> to minimize the risk of discrepancy). But this could very well be faster than computing stats on the fly. I would not be surprised if other forums use them.</p>
    </div>