<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm not sure how viable this would be when looking up against large strings with lots of nested brackets [...]</p>
</blockquote>

<p><em>"how viable"</em> is a very vague question.
Two common performance metrics are CPU load and memory load,
perhaps that's what you were trying to get at.
It's good to clarify what exactly you want to know.</p>

<p>In terms of CPU, how will this program behave as the input grows?  </p>

<ul>
<li>The algorithm does a single pass over all characters of the input.
When the input doubles, the number of operations doubles, roughly.

<ul>
<li>=&gt; In other words, it's linear.</li>
</ul></li>
<li>Can it be any better than linear?

<ul>
<li>=&gt; No, because we cannot know the positions of the brackets without looking through each character once.</li>
</ul></li>
</ul>

<p>In terms of memory, how will this program behave as the input grows?</p>

<ul>
<li>Aside from the memory used by the input string,
what consumes memory in this program?

<ul>
<li>=&gt; The dictionary storing the starting positions of brackets.</li>
</ul></li>
<li>How do brackets on the same nesting level impact the memory consumption?
That is, in a string like <code>[][][][]</code>?

<ul>
<li>=&gt; Since the storage for a <code>[</code> is removed when the corresponding <code>]</code> is found, brackets at the same nesting level use a single entry in the dictionary.</li>
</ul></li>
<li>How do deeply nested brackets impact the memory consumption?

<ul>
<li>=&gt; The dictionary has as many entries as the deepest nesting level. As closing brackets are found, entries get deleted. The maximum memory consumed by the dictionary throughout the program is proportional to the maximum depth of nesting encountered.</li>
</ul></li>
</ul>

<blockquote>
  <p>So how could this be improved, especially in terms of memory (i.e. large strings)?</p>
</blockquote>

<p>The current performance of the program is on the expected order of complexity, so it's fine.
However, a dictionary is not the most natural choice for this purpose,
and its actually overkill.
A simpler data structure, a stack, would have been enough to solve this.
Instead of storing <code>(depth, index)</code> pairs in a dictionary,
you could store just <code>index</code> in a stack:</p>

<ul>
<li>When you see a <code>[</code>, <em>push</em> the <code>index</code> onto the stack.</li>
<li>When you see a <code>]</code>, <em>pop</em> the last pushed <code>index</code> from the stack.</li>
</ul>

<p>The result will be equivalent, the <code>depth</code> variable becomes unnecessary.</p>
    </div>