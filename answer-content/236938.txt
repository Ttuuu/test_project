<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>def pad(s):
    return s + b"\0" * (AES.block_size - len(s) % AES.block_size)
</code></pre>

<p>Generally a good library should have you covered when it comes to padding and unpadding. Prefer the Python 3 <code>bytearray</code> types rather than the stringified <code>b"\0"</code> trick.</p>

<p>Worse, you're implementing Zero padding, which would strip off zero valued bytes from your text files. That may not harm text files much (well, unless UTF-16LE I suppose), but for binary files that's very very dangerous.</p>

<p>Everybody tends to use PKCS#7 compatible padding for CBC mode.</p>

<pre><code>def encrypt(message, key, key_size=256):
</code></pre>

<p>The key size is usually required for C-style languages but not here. You're already giving it a key, and the key has a certain size. The only thing you can do is to test the key against the key size if you're (overly) afraid that you might pass a 128 bit / 16 byte key by accident. But in general you should not pass parameters that can be derived from other parameters anyway.</p>

<pre><code>    message = pad(message)
</code></pre>

<p>This creates a copy of the message. Now that's all right for small messages, but for files over 4 GiB it becomes "a bit of a nuisance". Especially if you decide to use your logical cores to encrypt many files. In theory AES/CBC pads the messages, but in practice we only pad the last 16 byte block that we need to encrypt.</p>

<pre><code>    iv = Random.new().read(AES.block_size)
</code></pre>

<p>It's not all gloom and doom, you used a cryptographic random number generator to generate an unpredictable IV and you used <code>AES.block_size</code> instead of <code>16</code>. And then prefixed it to the ciphertext. Well done!</p>

<pre><code>    return plaintext.rstrip(b"\0")
</code></pre>

<p>And there's the Zero padding problem being executed. If you have a file consisting of all zero's, it would empty entirely. Oops!</p>

<pre><code>    plaintext = base64.b64encode(plaintext)
</code></pre>

<p>Ah yes, that saves us from the padding problem, as base 64 doesn't contain zero valued bytes. The disadvantage is of course that your ciphertext will now expand 33%, and that you create <strong>another</strong> copy in memory for that size. Sure, the raw plaintext can now be freed up, but your system will still not be happy with you.</p>

<pre><code>    with open("file.txt" + ".enc", 'wb') as fo:
</code></pre>

<p>The <code>"file.txt"</code> name is a bit out of wag with the <code>'wb'</code> flag, don't you thing? And besides, although you base 64 encoded your plaintext, you didn't do it with the ciphertext. And you should not need to, just keeping everything in binary is fine for files.</p>

<p>Besides that, you probably should do something with a <code>filename</code> parameter. At least create a note to fix things later when you're experimenting.</p>

<pre><code>    with open(file_name[:-4]+ ".dec", 'wb') as fo:
</code></pre>

<p>Ah, we just replace the last 4 characters now, without checking if the filename even <em>has</em> an extension?</p>

<pre><code>    return dec.decode()
</code></pre>

<p>What, why? And what are we decoding?</p>

<pre><code>key = b'1234sfsfdsafasdf'
</code></pre>

<p>Strings are not keys. If you want to create a test key, create one by decoding hexadecimal encoded bytes. And those look like 16 characters which means AES-128 rather than 256. If you want to use a password, you need a password based key derivation function (to perform so called Password Based Encryption, see the PKCS#5 standard).</p>

<hr>

<p>CBC mode is fine for keeping files confidential, but generally cryptographers prefer authenticated modes such as GCM or EAX nowadays. Your files <em>are</em> likely kept confidential, but there is no message integrity or authenticity implemented for the files. Note that CBC mode is entirely unsuitable to send unauthenticated messages over a network.</p>

<p>Files can be large, so generally we try and use an API that provides <code>update</code> and <code>final</code> methods or a streaming API (not to be confused with the <code>update</code> method specified for pycryptodome's AEAD ciphers). That way you can encrypt files piecemeal.</p>

<p>Quite often for files it makes sense to use a specific container format such as CMS or PGP. In that case most of your errors are avoided (although, truth to be said, many container formats are starting to show their age).</p>
    </div>