<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Best practices</h2>

<p>A collection of general best practices for Python code can be found in the infamous <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (also called PEP8). While your code looks quite reasonable, there a two major points from the Style Guide I would like to point out to you.<br>
First, add <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">documentation</a> to your functions (and maybe choose a more descriptive name than <code>main</code>, more on that shortly). Future-you will be very grateful for this.<br>
Second, always use a single whitespace before and after <code>=</code> when assigning to a variable (no whitespace if used as keyword arguments in a function ! Relevant section of PEP8 <a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow noreferrer">here</a>). The code is also generally better to read if you add a trailing whitespace after <code>,</code> like so: <code>main(obr1, obr2)</code> instead of <code>main(obr1,obr2)</code>.</p>

<p>Another thing that I would consider a Python best practice, is to wrap code that is to be executed in a "scripty" manner in a <code>if __name__ == "__main__":</code> clause (also see the <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">official documentation</a> on that topic). That would allow you reuse/import the function currently named <code>main</code> into other functions without running the <code>while</code> loop. Therefore, I would like to suggest the following coarse code-level structure:</p>

<pre class="lang-py prettyprint-override"><code># imports would go here ...


def compare_images(filename1, filename2):
    """Compare two images and store the comparison to file"""
    # function logic would go here


def main():
    """Process arguments from command line"""
    imglist = sys.argv[1:]
    z = 0
    while imglist != []:
        # ...


if __name__ == "__main__":
    main()
</code></pre>

<p>I would also recommend to give some of the variables a more descriptive name (what do <code>obr1</code> and <code>obr2</code> stand for?). Also keep in mind that most of the people reading your code (including me) do not speak your mother tongue, so it's always nice to translate console output to English before posting it here.</p>

<h2>Efficiency</h2>

<p><code>.load()</code> should probably not be necessary as per the <a href="https://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.load" rel="nofollow noreferrer">documentation</a> (this assumes your actually using Pillow fork and not the old and crusty PIL).</p>

<p>The most striking point in terms of efficiency is that Python is often <a href="https://www.youtube.com/watch?v=zQeYx87mfyw" rel="nofollow noreferrer">terribly slow at loops</a>. So the easiest way to gain performance is to get rid of them. But how? NumPy to the rescue! NumPy does all those pesky loops in C and is therefore orders of magnitudes faster compared to looping over array data in Python "by hand".</p>

<p>So what you would generally do to benefit from this is to get your image data as NumPy array (see <a href="https://stackoverflow.com/a/384926">this</a> SO answer for a hint) and then work on those NumPy arrays with array operations, like masking. I will try to convey what I mean by that in a short example, maybe I can fully adapt it to your example later.</p>

<pre class="lang-py prettyprint-override"><code>im1_np = ... # get data as numpy array, see SO post
im2_np = ... # get data as numpy array, see SO post
result = np.zeros_like(im1_np)   # same dtype and shape as input
matching_pixels = im1_np == im2_np   # boolean mask with true where pixels match exactly
result[matching_pixels] = im1_np[matching_pixels]   # this is your if clause
</code></pre>

<p>As you can see, there a no "manual" loops involved, everything is done by NumPy in the background.</p>

<p>Now to the <code>else</code> path. First, I think there might be some errors here, feel free to comment if I'm wrong. What (I think) you basically want to do, is to compute the difference between corresponding pixels and set them to a certain color if they are below a given threshold. Mathematically this would be expressed similar to this:</p>

<p><span class="math-container">$$ \sqrt{(r_1-r_2)^2 + (g_1-g_2)^2 + (b_1-b_2)^2} &lt; 200 $$</span></p>

<p>Your code does the following at the moment:</p>

<p><span class="math-container">$$ \sqrt{r_1^2 + r_2^2 + g_1^2+g_2^2 + b_1^2+b_2^2} &lt; 200 $$</span></p>

<p>When working from my definition above, the code becomes as follows:</p>

<pre class="lang-py prettyprint-override"><code>dist_mask = np.sum(im1_np-im2_np, axis=2) &lt; threshold
# remove pixels already set in the if clause
dist_mask = np.logical_and(dist_mask, np.logical_not(matching_pixels))
# remove all-zero pixels
dist_mask = np.logical_and(dist_mask, np.sum(im1_np, axis=2) &gt; 0)
dist_mask = np.logical_and(dist_mask, np.sum(im2_np, axis=2) &gt; 0)
# set color in result image as mean of both source pixels
result[dist_mask] = (im1_np[dist_mask]+im2_np[dist_mask]) / 2.
</code></pre>

<p>I leave threshold as variable since I'm not sure your original computation works the way you expect it and the threshold as chosen by you is meaningful. (Note: You can simply leave out the <code>sqrt</code> if you square the threshold value).
Apart from that, the code is a relatively strict transformation of your original conditions, it's just that instead of looping over the images pixel by pixel, everything is done in array operations.</p>

<hr>

<p>Under the assumption that you actually want to assign the average pixel value of both source images, this can be optimized further, since the <code>if</code> condition of exact pixel equality is a subset of <code>distance &lt; threshold</code>. This would save you a mask computation (<code>matching_pixels</code> would not be needed anymore) and the negation/and operation with the <code>dist_mask</code>. In case of exact equality, summing both values and dividing them by two should leave you with the original value (Warning: Watch out for quirks with floating point values and/or range-limited integer values).</p>

<hr>

<p>To be fully compatible with your original code you would then have to go back to PIL to store the image to disk. This should also be described in the SO post linked above.</p>

<h2>Other things</h2>

<p>You are sometimes using string formatting in a weird way. If you just want make sure that a variable is a string, pass it to <code>str(...)</code> instead of using string formatting. If you really need string formatting such as where you create the output filename, it is often recommended to use <code>.format(...)</code> (Python 2, Python 3) or f-strings (Python 3) to format string output. There is a nice blog post <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">here</a> that compares all ways of doing string formatting in Python I mentioned.</p>
    </div>