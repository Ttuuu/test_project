<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>NEVER use:</p>

<pre class="lang-py prettyprint-override"><code>from tkinter import *
</code></pre>

<p>Instead, use:</p>

<pre class="lang-py prettyprint-override"><code>import tkinter as tk
</code></pre>

<p>or even better:</p>

<pre class="lang-py prettyprint-override"><code>from tkinter import Class1, Class2
</code></pre>

<p>This allows everyone reading your code (like the people answering your question) to easily see where what name is coming from, and makes it that much simpler for other people's input to come your way without having to ask clarifying questions where variable X is coming from.</p>

<p>I'll be restricting myself to your login() class, since I'm not experienced with tkinter. I am, however, experienced with (Py)Qt, so I can offer some advice.</p>

<h3>Naming</h3>

<p>In Python, we name classes with PascalCase (aka TitleCase). It's also a widget of some kind, so put that in the name as well, to make it easier. login() looks like a function. I'd think something like <code>LoginWidget</code> or if it's more tkinter-like, <code>LoginFrame</code>.</p>

<h3>Widget/Frame destruction</h3>

<p>Practically, you're getting rid of your Login widget when it's function's done. Why don't you just delete the widget and create any widget depending on what you need to login for? Typically, this should be done in the widget/frame's <code>master</code>. If you kept all other references inside, you don't really have to think about deletion of it's instance variables if you just delete the entire thing. </p>

<h3>Look up account data</h3>

<p>Also DO change your <code>_login_btn_clicked()</code> method to look up the login data from elsewhere. Even if it's just a file named passwords.txt where you save it in plain text. It's no more unsafe than storing it directly in your code. </p>

<p>Aside from that, it also avoids code repetition, like having the exact same result for two different accounts like you do.</p>

<p>Given a passwords.txt which stores them like username:password (Can't say to often, but this is VERY unsafe):</p>

<pre class="lang-py prettyprint-override"><code>    def _login_btn_clicked(self):
        # print("Clicked")
        username = self.entry_username.get()
        password = self.entry_password.get()

        # print(username, password)
        account_list = [line.split(":", maxsplit=1) for line in open("passwords.txt")]  
        # list of 2-tuples. Usersnames with colons inside not supported.
        accounts = {key: value.rstrip() for key, value in account_list}  
        # Convert to dict[username] = password, and slices off the line ending. 
        # Does not support passwords ending in whitespace.

        if accounts[username] == password:
            store_account_information_for_later_use()
            inform_master_that_I_am_obsolete()
            # app = App(root)  # Should be done by self.master.
        else:
            notify_user_of_failure()
</code></pre>

<p>In the case that this login frame is a window instead of embedded into one, you can just close it an make a new window afterwards.</p>

<p>Please do note that some of my invented function names describe more verbose what they should do, and that these names are to long for normal function names.</p>
    </div>