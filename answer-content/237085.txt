<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hi and welcome to code review. </p>

<p>Your code is already ok, but there are several ways to improve both from the algorithm as well as the code style:</p>

<ol>
<li><p>Order includes lexicographically. 
This will ensure that you neither miss some nor forget some. Even better use clang-format so that it does it for you.</p></li>
<li><p>Properly indent your code.
Again this should be done via clang-format and will greatly improve readability of your code, regardless what codestyle you choose.</p></li>
<li><p>Chose a readable naming convention
A rather poor example is <code>isgoodguess</code> vs <code>is_good_guess</code> or <code>isGoodGuess</code> or any of the other naming conventions you choose. That said in most C++ codebases there is CamelCase for classes and camelCase for functions.</p></li>
<li><p>Beware uninitialized variables.
That code here is a ticking time bomb:</p>

<pre><code>int passnum;
switch(howmany) {
    case 1:
        passnum = 3;
        break;         
    case 2:
        passnum = 2;   
        break;
}
</code></pre>

<p>Do you guarantee that howmany is eihter 1 or 2? what if it is 0? what if it is 3. You will use an uninitialized variable. Better write code that cannot fail.</p>

<pre><code>const int passnum = howmany == 1 ? 3 : 2;
</code></pre>

<p>That code is much simpler. As a rule of thumb <em>never</em> leave a variable unitialized. There are very rare cases where it is actually valid, but that usually happens in library implementations.</p></li>
<li><p>Use the correct data representation
You are using int for representation. But that is actualy a poor choice. You want indvidual digits not an integer so I would suggest that you store the inputs in a std::string. You will still be able to compare the individual characters. </p>

<p>Note that there is a std algorithm that you can use <code>std::inner_product</code>. Read it up and think about how you can use it on a range of two <code>std::string</code></p></li>
</ol>
    </div>