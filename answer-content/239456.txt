<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From my experience, this is a <em>good first cut</em> solution for a less experienced candidate as opposed to some experienced candidate. Also, a lot of other info is missing in question such as was there any further discussion on how to improve the solution or about adapting some good practices or how to make this code bug free etc.</p>

<p>I will try to list down possible issues which can to addressed:</p>

<ol>
<li>The <code>counter</code> variable is a <code>global variable</code> here which is <em>not recommended</em></li>
<li>The function is <code>not reusable</code>. Suppose, I want to track clicks in 2 different sections in same document now, the approach will fail</li>
<li>Any <code>user can easily modify counter</code> value. Anytime in window, user can do <code>counter = 0</code> and the value will reset to 0 losing data</li>
<li>What if user refreshes the pages? In that case, do we need to store the data or losing it would be fine</li>
<li>If some additional functionality needs to be added (send total counter to backend server etc), so how easily it can be added without modifying the existing code</li>
</ol>

<p>A lot of things depends on how the discussion goes after you present the solution. You can use closures, class based approach etc. I will try to list them below.</p>

<h3>1. Use closure</h3>

<p>(Not the best approach but better than OP's)    </p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const clickCounter = clicker()
document.addEventListener('click', clickCounter);

function clicker() {
  let counter = 0
  return function() {
    ++counter
    console.log(counter)
    return counter
  }
}</code></pre>
</div>
</div>


<h3>2. Use class like approach</h3>

<ul>
<li>This is the one people generally expect and works best; covering most of the cases  </li>
<li>You can also do the same by using ES6 classes    </li>
<li>Adding new functionality is lot more easier here</li>
</ul>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function Counter() {
  let clicks = 0
  this.registerClick = function() {
    ++clicks
    console.log(clicks)
    return clicks
  }
}

const clicker = new Counter()

document.addEventListener("click", function() {
  clicker.registerClick()
})</code></pre>
</div>
</div>


<p>Hope it helps. Revert for any doubts.</p>
    </div>