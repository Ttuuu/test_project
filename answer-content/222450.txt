<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You seem to make use often <code>return 1</code>. It would be better to use booleans to show a clear intention of what you want to return.</p>

<p>Also, your <code>hash_route</code>, which you build as a <code>dict</code>, has a constant value that is never used, making it effectively a <code>set</code>, which is fine if all you care is the lowest common ancestor.</p>

<p>I would go for:</p>

<pre><code>def traverse_DFS(root, target_node_value, ancestor_set):
    # print('looking at node ' + str(root.value))
    if root.value == target_node_value:
        # print('found node ' + str(target_node_value))
        ancestor_set.add(root.value)
        return True
    else:
        if root.left_child:
            left_result = traverse_DFS(root.left_child, target_node_value,
                                       ancestor_set)
            if left_result:
                ancestor_set.add(root.value)
                return True
        if root.right_child:
            right_result = traverse_DFS(root.right_child, target_node_value,
                                        ancestor_set)
            if right_result:
                ancestor_set.add(root.value)
                return True
    return False
</code></pre>

<p>I would also get rid of <code>common_ancestor</code> global variable (avoid them whenever you can, and also when you think you cannot, since you most probably can anyway). You can easily carry that information in the return value, together with the flag for the found node.</p>

<pre><code>def hash_find_ancestor_DFS(root, target_node_value, ancestor_set):

    if root.value == target_node_value:
        if root.value in ancestor_set:
            return (True, root.value)
        else:
            return (True, None)
    else:
        if root.left_child:
            (found, ancestor) = hash_find_ancestor_DFS(root.left_child, target_node_value,
                                         ancestor_set)
            if found:
                if ancestor:
                    return (True, ancestor)
                elif root.value in ancestor_set:
                    return (True, root.value)
                else:
                    return (True, None)

        if root.right_child:
            (found, ancestor) = hash_find_ancestor_DFS(root.right_child, target_node_value,
                                         ancestor_set)
            if found:
                if ancestor:
                    return (True, ancestor)
                elif root.value in ancestor_set:
                    return (True, root.value)
                else:
                    return (True, None)

    return (False, None)
</code></pre>

<p>For completeness, this would be the other function:</p>

<pre><code>def find_common_node(Tree, node1, node2):
    print('Running the common ancestry finder')

    # First run DFS v1 with Hash
    hash_route= set()
    print('This value of node1 is ' + str(node1))
    found = traverse_DFS(Tree.root, node1, hash_route)

    if not found:
        return None
    print(hash_route)
    (found, common_ancestor) = hash_find_ancestor_DFS(Tree.root, node2, hash_route)

    return common_ancestor
</code></pre>

<p>I added a check to shortcut the second search if the node is not found in the first.</p>
    </div>