<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am surprised that you chose to use <code>/dev/random</code>  although I can understand that for some purposes like generating private keys a source of strong entropy is preferred and there are even <a href="https://www.crowdsupply.com/13-37/infinite-noise-trng" rel="nofollow noreferrer">devices</a> for that. Then <a href="https://unix.stackexchange.com/questions/324209/when-to-use-dev-random-vs-dev-urandom">this discussion</a> could interest you. But the built-in <code>random</code> module in python should be sufficient here.</p>
<p>To read the file to a list of items you can just do this:</p>
<pre><code>with open('/usr/share/dict/words', 'r') as f:
    lines = f.read().splitlines()
</code></pre>
<p>Good thing is that you are using the context manager for the <code>open</code> function.</p>
<p>Try to avoid <code>IndexError</code> rather than handle it and ignore it.</p>
<p>If your file is small (check size before opening) you can be lazy, load all items to a list, then filter it, and return one item at random:</p>
<pre><code>def generate_random_word(min_length=8, max_length=13):
    with open('/usr/share/dict/words', 'r') as f:
        lines = f.read().splitlines()

    # select words matching desired length
    # selection = [line for line in lines if len(line) &lt;= max_length and len(line) &gt;= min_length ]
    selection = [line for line in lines if min_length &lt;= len(line) &lt;= max_length]
    # no match found
    if len(selection) == 0:
        return None

    return random.choice(selection)
</code></pre>
<p>If no matching item is found (or the file is empty) then I chose to return None.</p>
<p>If you want to filter lines at the source the implementation could be like this:</p>
<pre><code>def generate_random_word(min_length=8, max_length=13):
    with open('/usr/share/dict/words', 'r') as f:
        selection = [line for line in f.read().splitlines() if min_length &lt;= len(line) &lt;= max_length]

    # no match found
    if len(selection) == 0:
        return None

    return random.choice(selection)
</code></pre>
<p>The file has to exist but it can be empty, then there is no error but the function will return None. Use <code>os.exists</code> to test that the file is present.</p>
<p>Yes, there is an import but it is a built-in module, does not require installation of a third-party module with PIP. It is also portable and not just Unix.</p>
<p>However, if you insist on <code>/dev/random</code> and want no import one thing you could do is retrieve a random integer like what you are doing now and use it in a modulo-type fashion against the list of matching items, to pick one word at random. Be careful with implementation as you may introduce unwanted bias in the selection. Random functions exist for a reason.</p>
<p>While it is possible to rely solely on <code>/dev/random</code> reimplementing the functionality with decent randomization will result in more code and reinventing the wheel.</p>
    </div>