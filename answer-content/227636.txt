<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem can be solved using math formulas, which will lead to an O(1) solution. But here I show another way to implement it, which is more efficient than a naive loop:</p>

<pre><code>def sum_multiples(n):
    return sum(range(0, n, 3)) + sum(range(0, n, 5)) - sum(range(0, n, 3*5))
</code></pre>

<p>Or alternatively,</p>

<pre><code>def sum_multiples(n):
    numbers = range(n)
    return sum(numbers[::3]) + sum(numbers[::5]) - sum(numbers[::3*5])
</code></pre>

<p>By the way, on the <a href="https://www.hackerrank.com/contests/projecteuler/challenges" rel="nofollow noreferrer">HackerRank website</a>, the original problems are modified to require handling a wide range of inputs. You can run your solutions (with appropriate input / output added) on various provided test cases to verify the correctness under a time constraint.</p>
    </div>