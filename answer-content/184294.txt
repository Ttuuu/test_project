<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend @Ludisposed's answer for the Pythonic comments.</p>

<p>The algorithm itself can be improved to get logarithmic complexity (ie, a logarithmic number of multiplies and comparisons).</p>

<p>The idea is to use:</p>

<ol>
<li>A galloping search to locate the two powers of 2 between which log<sub>k</sub>(N) would be if N was a power of 2.</li>
<li>A binary search between the last smaller power of 2 and its successor to locate the exact exponent.</li>
</ol>

<p>Visualizing it in code may be easier:</p>

<pre><code>def check_pow(N, k):
    if k &lt; 0 or N &lt; 0:
        raise ValueError("k and N must be greater then 0")

    if k == 0 and N == 1:
        return True

    if k in (0, 1) and N != 1:
        return False

    powers = [1, k] #   powers[i] = k ** (2**i)

    #    Galloping search:
    #        With e = log-k(N),
    #        find a and b such that 2**a &lt;= e &lt; 2**b

    while powers[-1] &lt; N:
        powers.append(powers[-1] * powers[-1])

    #    Binary search:
    #        Narrow down the gap to find the closest power of k
    #        that is &lt;= to N.

    powers.pop()
    cursor = powers.pop()

    while len(powers) &gt; 0:
        candidate = cursor * powers.pop()
        if candidate &lt;= N:
            cursor = candidate

    return cursor == N
</code></pre>

<p>There are minor performance improvements possible still, short-circuitings notably, however they do not improve the worst-case complexity so I left them out to avoid mucking the algorithm.</p>
    </div>