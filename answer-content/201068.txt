<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Variable names/typos</strong></p>

<p>In 7 places, you've written <code>Arary</code> instead of <code>Array</code>. A single simple review of your own code should have caught that.</p>

<p><strong>Separation of concerns/testability</strong></p>

<p>Instead of having a function with the <code>a</code> value hard-coded, you could pass it as a parameter.</p>

<p>Instead of having the computed value printed to standard-output, you could have it returned by the function.</p>

<p>Then, your code is better organised: you have a function with a single-responsability (getting the longest ascending subarray), not dealding with other concerns such as input/output from the user. Among other things, the code is also easier to test now.</p>

<p>I still have to write the proper tests but for the time being, we have:</p>

<pre><code>import java.util.*;

public class ascendingArray {
    public static List&lt;Integer&gt; getLongestAscendingSubarray(int[] a) {
        List&lt;Integer&gt; longestArray = new ArrayList&lt;Integer&gt;();
        List&lt;Integer&gt; currentArray = new ArrayList&lt;Integer&gt;();
        for (int i = 1; i &lt; a.length; i++) {
            if(currentArray.isEmpty()) {
                currentArray.add(a[i-1]);
            }
            if (a[i]-1 == a[i-1]) {
                currentArray.add(a[i]);
            } else {
                if(longestArray.size()&lt;currentArray.size()) {
                    longestArray.clear();
                    longestArray.addAll(currentArray);
                }
                currentArray.clear();
            }
        }
        return longestArray;
    }

    public static void main(String[] args) {
        System.out.println("Hello, world!");
        int[] a = {19,12,13,1,2,3,4,5,14,23,24,25,26,27,31,32};
        System.out.println(getLongestAscendingSubarray(a));
    }
}
</code></pre>
    </div>