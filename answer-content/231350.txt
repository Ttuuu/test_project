<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Besides of that I support the idea of having constant values like window's <code>height</code>, <code>width</code> and <code>input_row</code> settings as class constants (uppercase names) and referencing <em>negative</em> <code>kcell</code> flag as <strong><code>not kcell</code></strong> instead of <code>kcell == False</code>
here's some list of advises in terms of better code organizing, restructuring conditionals and eliminating duplicates:</p>

<ul>
<li><p>window's half of <code>width</code> <code>int(self.winwidth / 2)</code> is calculated 13 times across 3 methods. <br>Instead, we'll apply <em>Extract variable</em> technique, extracting precalculated expression into the instance field <strong><code>self.win_width_half = int(self.winwidth / 2)</code></strong> and referencing it in all places it's needed <br>
(like <code>self.inputcol = [[36, 50], [self.win_width_half + 36, self.win_width_half + 50]]</code>)</p></li>
<li><p>setting <em>"windows entry points"</em> in <code>initScreen</code> method (should be renamed to <strong><code>init_screen</code></strong>):
involves consecutive 20 calls of <code>self.measurewin.addstr(...)</code> function.<br>
Instead, we can define <em>entry points</em> attributes beforehand and then pass them in simple iteration:</p>

<pre><code>win_entry_points_attrs = [
    (2, self.inputcol[0][0] - 3, "1", self.white),
    (2, self.inputcol[0][1] - 3, "2", self.white),
    (2, self.inputcol[1][0] - 3, "1", self.white),
    (2, self.inputcol[1][1] - 3, "2", self.white),

    (5, 5, "A"),
    (9, 5, "B"),
    (13, 5, "C"),
    (17, 5, "D"),
    (16, 20, "D.I"),
    (18, 20, "D.II"),
    (22, 5, "E"),
    (21, 20, "E.I"),
    (23, 20, "E.II"),

    (5, self.win_width_half + 5, "F"),
    (9, self.win_width_half + 5, "G"),
    (13, self.win_width_half + 5, "H"),
    (12, self.win_width_half + 20, "H.I"),
    (14, self.win_width_half + 20, "H.II"),
    (18, self.win_width_half + 5, "J"),
    (17, self.win_width_half + 20, "J.I"),
    (19, self.win_width_half + 20, "J.II"),
]
# print the windows entry points
for attrs in win_entry_points_attrs:
    self.measurewin.addstr(*attrs) 
</code></pre></li>
</ul>

<p><em>Optimizations</em> within <code>inputMeasures</code> method (should be renamed to <strong><code>input_measures</code></strong>):</p>

<ul>
<li><p>the condition:</p>

<pre><code>if ((ch == curses.KEY_UP and j &gt; 0)
        or (ch == curses.KEY_DOWN and kcell == False)
        or (ch == curses.KEY_LEFT and (i != 0 or k != 0) and kcell == False)
        or (ch == curses.KEY_RIGHT and (i != 1 or k != 1) and kcell == False)
        or (ch in [ord("s"), ord("S")])
        or (ch in [ord("q"), ord("Q")])):
    break
</code></pre>

<p>has a common check <code>kcell == False</code> (should be <code>not kcell</code>) in 3 branches (in the middle) and that's a sign of <em>Consolidate conditional</em> refactoring technique:</p>

<pre><code>if ((ch == curses.KEY_UP and j &gt; 0)
        or (not kcell and (ch == curses.KEY_DOWN
                            or (ch == curses.KEY_LEFT and (i != 0 or k != 0))
                            or (ch == curses.KEY_RIGHT and (i != 1 or k != 1))))
        or (chr(ch).lower() in ("s", "q"))):
    break
</code></pre></li>
<li><p>the variable <code>cursorcntr</code> (<em>cursor counter</em>) deserves for a more meaningful variable name (<em>Rename variable</em> technique) - I would suggest <strong><code>cursor_cnt</code></strong></p></li>
<li><p>the last complex <code>if .. elif .. elif</code> conditional of 6 branches at the end of method <code>input_measures</code> seems to be a good candidate for <a href="https://refactoring.com/catalog/replaceConditionalWithPolymorphism.html" rel="nofollow noreferrer">Replace Conditional with Polymorphism</a> technique (OOP approach) but that would require more knowledge and vision about your program conception/settings. <br>For now, the first 4 branches of that conditional perform the same action <strong><code>cursor_cnt *= 2</code></strong> - we can eliminate duplication with additional check.<br>
It's good to move "<code>save/quit</code>" branches <strong>up</strong>, as they call <code>self.exit()</code> which will throw <code>raise SystemExit</code> to exit the program.<br>
Thus the reorganized conditional would look as:</p>

<pre><code># set of key codes defined in the parent scope (at least before the loop or as instance variable)
key_set = set((curses.KEY_UP, curses.KEY_DOWN, curses.KEY_LEFT, curses.KEY_RIGHT))
...
# check If the user wants to save/quit
inp_char = chr(ch).lower()
if inp_char == 's':
    self.exit("save")
elif inp_char == 'q':
    self.exit("quit")

if ch in key_set:
    cursor_cnt *= 2

if ch == curses.KEY_UP:
    if kcell:
        kcell = False
    else:
        self.cirow -= 1
    # If I pressed an arrow key the value of the cursor counter is always set to a
    # multiple of two (which means that when an arrow key is entered I will always
    # get a blinking cursos in the destination cell)

elif ch == curses.KEY_DOWN:
    if (i == 0 and j == 6) or (i == 1 and j == 5):
        kcell = True
    else:
        self.cirow += 1

elif ch == curses.KEY_LEFT:
    self.cicol -= 1
    if i == 1 and k == 0:
        self.ciside -= 1
        self.cicol += 2

elif ch == curses.KEY_RIGHT:
    self.cicol += 1
    if i == 0 and k == 1:
        self.ciside += 1
        self.cicol -= 2
        if self.cirow == 6:
            self.cirow -= 1
</code></pre></li>
</ul>
    </div>