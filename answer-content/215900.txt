<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>create_board()</code></h2>

<p>You explicitly return a hard-coded board, using 5 lines of code.  This could be written as one line, using list multiplication and list comprehension:</p>

<pre><code>return [ [EMPTY]*3 for _ in range(3) ]
</code></pre>

<p><code>[EMPTY]*3</code> creates a list of 3 <code>EMPTY</code> values: <code>[EMPTY, EMPTY, EMPTY]</code>, and the outer <code>[ ... for _ in range(3) ]</code> repeats that operation 3 times, producing the required board.  (As pointed out in the comments, using list multiplication for the outer loop doesnâ€™t produce 3 unique rows, but 3 references to the same row.)</p>

<h2><code>show_board()</code></h2>

<p>This function does not return anything, so certainly does not <code>:return: &lt;str&gt; A clean-looking version of the board</code></p>

<h2><code>place_player()</code></h2>

<p>Despite the comment above the function, this method can be used to place an <code>"O"</code> on a spot on the board.</p>

<p>Suggestion: indicate somehow if the move is invalid (beyond row 1..3 or column 1..3, or if the spot is not empty, such as by raising an exception or returning a success/failure code.</p>

<h2><code>check_if_win()</code></h2>

<p>This function is using <code>active_player * 3</code> in a total of six places.  Instead of repeating this expression six times, you could assign the result to a local variable, and test against that variable instead:</p>

<pre><code>win_pattern = active_player * 3
# ...
for row in board:
   # ...
   if "".join(row) == win_pattern:
      return True
# ... etc ...
</code></pre>

<p>But a winning pattern isn't actually a string; it is a list of cells each containing the <code>active_player</code> symbol: <code>['X', 'X', 'X']</code>.  You've just used <code>"".join(...)</code> to convert the list into a string.  Why create the string when you can just check for equality with the list?</p>

<pre><code>win_pattern = [ active_player ] * 3
# ...
for row in board:
   # ...
   if row == win_pattern:
       return True

if column1 == win_pattern or column2 == win_pattern or column3 == win_pattern:
    return True
elif diagonal1 == win_pattern or diagonal2 == win_pattern:
    return True
else:
    return False
</code></pre>

<p>But this code is still quite verbose.  There is a pythonic way of testing if any item in a list of items matches a condition.  It uses the <code>any(iterable)</code> call; if any of the iterable items is <code>True</code>, the resulting <code>any(...)</code> expression evaluates to <code>True</code>.  Using this to test for any of the rows of the board matching the <code>win_pattern</code> is straight forward:</p>

<pre><code>if any(row == win_pattern for row in board):
    return True
</code></pre>

<p>Your <code>for row in board:</code> loop also constructs the <code>column1</code>, <code>column2</code>, <code>column3</code>, <code>diagonal1</code> and <code>diagonal2</code> lists.  Whenever you have a set of variables with the same prefix name and numeric suffixes, you aught to ask yourself if you could use a list (for example, <code>column[0]</code>, <code>column[1]</code>, and <code>column[2]</code>) or a loop.  Let's start by making a single column in a loop:</p>

<pre><code>column = []
for row in board:
    column.append(row[col])
</code></pre>

<p>If <code>col</code> was <code>0</code>, this would make your <code>column1</code> variable from your code.  List comprehension can reduce this to one line:</p>

<pre><code>column = [ row[col] for row in board ]
</code></pre>

<p>We actually only need the <code>column</code> variable for just the test against <code>win_pattern</code>, so we could actually eliminate it and perform the test directly:</p>

<pre><code>if [ row[col] for row in board ] == win_pattern:
   return True
</code></pre>

<p>Doing that in a loop, for all 3 <code>col</code> values completes the test for a win in any column:</p>

<pre><code>for col in range(3):
    if [ row[col] for row in board ] == win_pattern:
       return True
</code></pre>

<p>But above, we replaced a <code>for x in y:</code> and an inner <code>if condition:</code> with an <code>any(...)</code> statement; we can do the same thing here!</p>

<pre><code>if any( [ row[col] for row in board ] == win_pattern for col in range(3)):
    return True
</code></pre>

<p>We can also do this for the forward diagonal:</p>

<pre><code>if [ board[i][i] for i in range(3) ] == win_pattern:
    return True
</code></pre>

<p>And the reverse diagonal:</p>

<pre><code>if [ board[i][2-i] for i in range(3) ] == win_pattern:
    return True
</code></pre>

<p>This looks a lot shorter, and simpler:</p>

<pre><code>win_pattern = [ active_player ] * 3

if any(row == win_pattern for row in board):
    return True

if any( [ row[col] for row in board ] == win_pattern for col in range(3)):
    return True

if [ board[i][i] for i in range(3) ] == win_pattern:
    return True

if [ board[i][2-i] for i in range(3) ] == win_pattern:
    return True

return False
</code></pre>

<p>... but I don't quite like it yet.  We can get rid of the <code>win_pattern</code> list, and all the <code>[ ... for x in y ]</code> list creation, using something similar to <code>any(...)</code>: the <code>all(...)</code> function.  It returns <code>True</code> when all elements are <code>True</code>.  So instead of</p>

<pre><code>if [ row[col] for row in board ] == [ active_player ] * 3:
</code></pre>

<p>which creates a list of 3 items on the left-hand-side and creates a list of 3 items on the right hand side and tests if the lists are the same, we'll test if the first element on the left-hand-side is the same as the first element on the right-hand-side, and ditto for the second elements, and ditto for the third elements.  Of course, all 3 elements on the right-hand-side are the same element.  So the <code>all(...)</code> statement will look like:</p>

<pre><code>if all(row[col] == active_player for row in board):
</code></pre>

<p>Again, that is testing one particular column index: <code>col</code>.  If we want to check if any column has the winning pattern, we'll wrap this in an <code>any</code> call:</p>

<pre><code>if any( all(row[col] == active_player for row in board) for col in range(3)):
    return True
</code></pre>

<p>So, changing the implementation slightly, to exploit the duality nature of rows and columns, you might write this method as:</p>

<pre><code>def check_if_win(board, active_player):

    if any( all(board[r][c] == active_player for c in range(3)) for r in range(3)):
        return True

    if any( all(board[r][c] == active_player for r in range(3)) for c in range(3)):
        return True

    if all(board[i][i] == active_player for i in range(3)):
        return True

    if all(board[i][2-i] == active_player for i in range(3)):
        return True

    return False
</code></pre>

<h2><code>main()</code></h2>

<pre><code>if check_if_win(board, active_player) is True:
</code></pre>

<p>could be written without the <code>is True</code> portion:</p>

<pre><code>if check_if_win(board, active_player):
</code></pre>

<p>Asking for user input, and converting it to an integer <code>int(input(...))</code> can lead to <code>ValueError</code> if the user enter bad values, such as <code>"fish"</code>.  You should check for and catch exceptions.  Moreover, you should range-check the input.  A user could enter <code>42</code> <code>-1</code> for the row/column.  Finally, the user could enter a valid, legal board position which is already used.  If the user enters bad values (either not valid integers, or out-of-bound values, or already taken locations), the program should complain and ask the user to re-enter the row column input.</p>

<p><strong>Bug</strong>: Finally, the game could end in a <strong>Tie</strong>, which is currently not handled.</p>
    </div>