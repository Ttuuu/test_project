<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I improved my code and now I made console application for tracking IP packets.
I tracked IP packets with Wireshark and got same result.</p>

<p>IPPacket class now contains IPHeader and ProtocolHeader data.
UDPHeader and TCPHeader class inherit abstract ProtocolHeader class, I added method ParseProtocolData which return UDPHeader or TCPHeader depending on protocol type inside IP header.</p>

<pre><code>public class IPPacket
{

    private IPHeader ipHeader;
    private ProtocolHeader protocolHeader;

    public IPPacket(IPHeader ipHeader, ProtocolHeader protocolHeader)
    {
        this.ipHeader = ipHeader;
        this.protocolHeader = protocolHeader;
    }

    public static IPPacket ParseData(byte[] bytes)
    {

        var ipHeader = new IPHeader(bytes);
        var protocolHeader = ParseProtocolData(ipHeader.Data, ipHeader.Protocol);

        return new IPPacket(ipHeader, protocolHeader);
    }

    public static ProtocolHeader ParseProtocolData(byte[] bytes, ProtocolType protocolType)
    {
        switch (protocolType)
        {
            case ProtocolType.Tcp:
                return new TCPHeader(bytes);
            case ProtocolType.Udp:
                return new UDPHeader(bytes);
            default:
                return null;
        }
    }

    public override string ToString()
    {
        return $"---------------------- IP Packet ---------------------- \n" +
               $"{this.ipHeader.ToString()} \n" +
               $"{this.protocolHeader.ToString()} \n" +
               $"-------------------------------------------------------";
    }

}
</code></pre>

<p>IPheader class:</p>

<pre><code>// 0                   1                   2                   3
// 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|Version|  IHL  |Type of Service|       Total Length            |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|     Identification            |  Flags | Fragment offset      |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|Time to live | Protocol        |         Header checksum       | 
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|                         Source IP address                     |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|                     Destination IP address                    |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|                     Options                     | Padding     |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
public class IPHeader
{
    public byte Version { get; set; }
    public ushort IHL { get; set; }
    public byte DifferentiatedServices { get; set; }
    public ushort TotalLength { get; set; }
    public ushort Identification { get; set; }
    public Flags Flags { get; set; }
    public ushort FragmentOffset { get; set; }
    public byte TimeToLive { get; set; }
    public ProtocolType Protocol { get; set; }
    public string HeaderChecksum { get; set; }
    public IPAddress SourceIPAddress { get; set; }
    public IPAddress DestinationIPAddress { get; set; }
    public byte[] Data { get; set; }

    public IPHeader(byte[] bytes)
    {
        Version = (byte)((bytes[0] &gt;&gt; 4) &amp; 0x0F); //0000XXXX &amp; 0000FFFF
        IHL = (ushort)((bytes[0] &amp; 0x0F) * 4);
        DifferentiatedServices = bytes[1];
        TotalLength = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 2));
        Identification = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 4));
        Flags = new Flags(bytes[6]);
        FragmentOffset = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 6) &lt;&lt; 3);
        TimeToLive = bytes[8];
        Protocol = (ProtocolType)bytes[9];
        HeaderChecksum = string.Format("0x{0:x2}", IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 10)));
        SourceIPAddress = new IPAddress(BitConverter.ToUInt32(bytes, 12));
        DestinationIPAddress = new IPAddress(BitConverter.ToUInt32(bytes, 16));
        Data = new byte[TotalLength - IHL];
        Array.Copy(bytes, IHL, Data, 0, TotalLength - IHL);
    }

    public override string ToString()
    {
        return $"Version: {Version} \n" +
               $"Header Length: {IHL} \n" +
               $"Differentiated services: {DifferentiatedServices} \n" +
               $"Total length: {TotalLength} \n" +
               $"Identification: {string.Format("0x{0:x2}", Identification)} ({Identification}) \n" +
               $"Flags: {Flags} \n" +
               $"Fragment offset: {FragmentOffset} \n" +
               $"Time to live: {TimeToLive} \n" +
               $"Protocol : {Protocol} \n" +
               $"Header checksum: {HeaderChecksum} \n" +
               $"Source IP address: {SourceIPAddress} \n" +
               $"Destination IP address: {DestinationIPAddress}";
    }
}

public class Flags
{
    public bool Reserved { get; set; }
    public bool DontFragment { get; set; }
    public bool MoreFragments { get; set; }

    public Flags(byte flags)
    {
        Reserved = Convert.ToBoolean((flags &gt;&gt; 7) &amp; 0x01);
        DontFragment = Convert.ToBoolean((flags &gt;&gt; 6) &amp; 0x01);
        MoreFragments = Convert.ToBoolean((flags &gt;&gt; 5) &amp; 0x01);
    }

    public override string ToString()
    {
        return $"\n" +
               $"   -- Reserved: {(Reserved ? "Set" : "Not set")} \n" +
               $"   -- Dont fragment: {(DontFragment ? "Set" : "Not set")} \n" +
               $"   -- More fragments: {(MoreFragments ? "Set" : "Not set")}";

    }
}
</code></pre>

<p>I made abstract class ProtocolHeader because IP packet can contain TCP or UDP segment depends on Protocol Type inside IPheader.</p>

<pre><code>public abstract class ProtocolHeader
{
    public uint SourcePort { get; set; }
    public uint DestinationPort { get; set; }
}
</code></pre>

<p>TCP Header class:</p>

<pre><code>// 0                   1                   2                   3   
// 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|          Source Port          |       Destination Port        |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|                        Sequence Number                        |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|                    Acknowledgment Number                      |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|  Data |           |U|A|P|R|S|F|                               |
//| Offset| Reserved  |R|C|S|S|Y|I|            Window             |
//|       |           |G|K|H|T|N|N|                               |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|           Checksum            |         Urgent Pointer        |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|                    Options                    |    Padding    |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//|                             data                              |
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

public class TCPHeader : ProtocolHeader
{
    public uint SequenceNumber { get; set; }
    public uint AcknowledgmentNumber { get; set; }
    public byte DataOffset { get; set; }
    public byte Reserved { get; set; }
    public ControlBits ControlBits { get; set; }
    public ushort Window { get; set; }
    public string Checksum { get; set; }
    public ushort UrgentPointer { get; set; }
    public byte[] Data { get; set; }

    public TCPHeader(byte[] bytes)
    {
        SourcePort = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 0));
        DestinationPort = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 2));
        SequenceNumber = (uint)IPAddress.NetworkToHostOrder(BitConverter.ToInt32(bytes, 4));
        AcknowledgmentNumber = (uint)IPAddress.NetworkToHostOrder(BitConverter.ToInt32(bytes, 8));
        DataOffset = (byte)((bytes[9] &gt;&gt; 4) &amp; 0x0F);
        Reserved = 0;
        ControlBits = new ControlBits(bytes[13]);
        Window = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 14));
        Checksum = string.Format("0x{0:x2}", (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 16)));
        UrgentPointer = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 18));
        Data = new byte[bytes.Length - 20];
        Array.Copy(bytes, 20, Data, 0, bytes.Length - 20);
    }

    public override string ToString()
    {
        return $"   Transmision control protocol \n" +
               $"   -- Source port: {SourcePort} \n" +
               $"   -- Destination port: {DestinationPort} \n" +
               $"   -- Sequence number: {SequenceNumber} \n" +
               $"   -- Acknowledgment number: {AcknowledgmentNumber} \n" +
               $"   -- Dataoffset: {DataOffset} \n" +
               $"   -- Reserved: {Reserved} \n" +
               $"   -- Control bits: {ControlBits} \n" +
               $"   -- Window: {Window} \n" +
               $"   -- Checksum: {Checksum} \n" +
               $"   -- Urgent pointer: {UrgentPointer}";
    }
}

public class ControlBits
{
    public bool URG { get; set; }
    public bool ACK { get; set; }
    public bool PSH { get; set; }
    public bool RST { get; set; }
    public bool SYN { get; set; }
    public bool FIN { get; set; }

    public ControlBits(byte controlBits)
    {
        URG = Convert.ToBoolean(controlBits &gt;&gt; 5 &amp; 0x01);
        ACK = Convert.ToBoolean(controlBits &gt;&gt; 4 &amp; 0x01);
        PSH = Convert.ToBoolean(controlBits &gt;&gt; 3 &amp; 0x01);
        RST = Convert.ToBoolean(controlBits &gt;&gt; 2 &amp; 0x01);
        SYN = Convert.ToBoolean(controlBits &gt;&gt; 1 &amp; 0x01);
        FIN = Convert.ToBoolean(controlBits  &amp; 0x01);
    }

    public override string ToString()
    {
        return $"URG: {URG} \n" +
               $"ACK: {ACK} \n" +
               $"PSH: {PSH} \n" +
               $"RST: {RST} \n" +
               $"SYN: {SYN} \n" +
               $"FIN: {FIN}";
    }
}
</code></pre>

<p>UDPHeader class:</p>

<pre><code>// 0      7 8     15 16    23 24    31  
//+--------+--------+--------+--------+ 
//|     Source      |   Destination   | 
//|      Port       |      Port       | 
//+--------+--------+--------+--------+ 
//|                 |                 | 
//|     Length      |    Checksum     | 
//+--------+--------+--------+--------+ 
//|                                     
//|          data octets...
//+---------------- ...                 

public class UDPHeader : ProtocolHeader
{
    public ushort Length { get; set; }
    public ushort Checksum { get; set; }
    public byte[] Data { get; set; }

    public UDPHeader(byte[] bytes)
    {
        SourcePort = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 0));
        DestinationPort = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 2));
        Length = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 4));
        Checksum = (ushort)IPAddress.NetworkToHostOrder(BitConverter.ToInt16(bytes, 6));
        Data = new byte[bytes.Length - 8];
        Array.Copy(bytes, 8, Data, 0, bytes.Length - 8);
    }

    public override string ToString()
    {
        return $"   User datagram protocol \n" +
               $"   -- Source port: {SourcePort} \n" + 
               $"   -- Destination port: {DestinationPort} \n" +
               $"   -- Length: {Length} \n" +
               $"   -- Checksum: {Checksum} \n" +
               $"   -- Data: {ASCIIEncoding.ASCII.GetString(Data)}";
    }
}
</code></pre>

<p>Implementation of main method:</p>

<pre><code>class Program
{
    private static Socket socket;
    private static byte[] buffer = new byte[4096];
    static void Main(string[] args)
    {

        try
        {

            if(!NetworkInterface.GetIsNetworkAvailable())
            {
                Console.WriteLine("Network is not available.");
            }
            else
            {
                var address = NetworkInterface.GetAllNetworkInterfaces()
                                              .AsEnumerable()
                                              .Where(i =&gt; (i.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 ||
                                                           i.NetworkInterfaceType == NetworkInterfaceType.Ethernet) &amp;&amp; 
                                                           i.OperationalStatus == OperationalStatus.Up)
                                              .SelectMany(i =&gt; i.GetIPProperties().UnicastAddresses)
                                              .Where(a =&gt; a.Address.AddressFamily == AddressFamily.InterNetwork)
                                              .Select(a =&gt; a.Address.ToString())
                                              .ToList();
                int counter = 0;

                if(address != null)
                {
                    Console.WriteLine("Please choose address for tracking IP packets: (Enter address number.)");
                }

                foreach (var addr in address)
                {
                    Console.WriteLine($"Number [{counter}] Addres: {addr}");
                    counter++;
                }

                int.TryParse(Console.ReadLine(), out counter);

                socket = new Socket(AddressFamily.InterNetwork, SocketType.Raw, ProtocolType.IP);

                socket.Bind(new IPEndPoint(IPAddress.Parse(address[counter]), 0));
                socket.SetSocketOption(SocketOptionLevel.IP, SocketOptionName.HeaderIncluded, true);

                byte[] byTrue = new byte[4] { 1, 0, 0, 0 };
                byte[] byOut = new byte[4];

                socket.IOControl(IOControlCode.ReceiveAll, byTrue, byOut);

                socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(OnRecieve), null);

            }

            Console.ReadLine();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    public static void OnRecieve(IAsyncResult ar)
    {

        try
        {

            int recv = socket.EndReceive(ar);
            byte[] buf = new byte[recv];

            Array.Copy(buffer, buf, recv);

            IPPacket ipPacket = IPPacket.ParseData(buf);

            Console.WriteLine(ipPacket.ToString());

            socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(OnRecieve), null);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
</code></pre>

<p>Could you give me advice now after I improved my code and gave whole picture how tracking program should work?</p>
    </div>