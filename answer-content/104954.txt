<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're on the right track, I think.  If I had to pick one general criticism, it would be to watch out for redundant special cases.</p>

<p>In my opinion, the exercise guides you towards making an unnecessary complication in <code>toDigits</code> and <code>doubleEveryOther</code>.  Actually, the list of digits from right to left, as produced by <code>toDigitsRev</code>, is the more natural representation to work with.  If you work with the list in left-to-right order, then <code>doubleEveryOther</code> needs to look ahead to see whether the list has an odd or even digit count, which is awkward.  Therefore, if given free reign, I'd define a <code>doubleEveryOther'</code> that expects right-to-left input instead.</p>

<p><code>toDigitsRev</code> does not need special cases for 0 and for <code>n &lt; 10</code>.  Instead of calling <code>div</code> and <code>mod</code>, use the <code>divMod</code> function to capture both pieces of information from the same calculation.</p>

<pre><code>toDigitsRev :: Integer -&gt; [Integer]
toDigitsRev n
  | n &lt;= 0    = []
  | otherwise = m : toDigitsRev d
  where
    (d, m) = n `divMod` 10
</code></pre>

<p>As mentioned above, we can simplify <code>doubleEveryOther</code> by working right-to-left:</p>

<pre><code>-- Doubles the second, fourth, sixth… numbers in the list
doubleEveryOther' :: [Integer] -&gt; [Integer]
doubleEveryOther' (x:y:zs) = x : 2 * y : doubleEveryOther' zs
doubleEveryOther' (x:[])   = [x]
doubleEveryOther' []       = []
</code></pre>

<p>You don't need a case for <code>sumDigits (x:[])</code> — it's already covered by <code>sumDigits (x:xs)</code>, where <code>xs</code> is the empty list.  The way you wrote it is fine, but personally I'd prefer to write it as <code>sum . map sumDigits'</code> so that you can see at a glance that it's performing a sum of some transformed values.</p>

<pre><code>sumDigits :: [Integer] -&gt; Integer
sumDigits = sum . map sumDigits'
  where
    sumDigits' n
      | n &lt; 10    = n
      | otherwise = sumDigits $ toDigitsRev n
</code></pre>

<p>The <code>validate</code> function does not need a special case for 0.  It's also more idiomatic to set up a "pipeline" of function calls using <code>$</code> than to use nested parentheses.</p>

<pre><code>validate :: Integer -&gt; Bool
validate n = 0 == (sumDigits $ doubleEveryOther' $ toDigitsRev n) `mod` 10
</code></pre>
    </div>