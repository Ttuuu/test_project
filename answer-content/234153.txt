<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For <code>peek_left</code> and <code>peek_right</code>, you can make use of that fact that non-empty collections are truthy to neaten up the condition:</p>

<pre><code>def peek_left(self):
    if self.array:
        return self.array[-1]

    else:
        return None
</code></pre>

<p>And at that point, it's short enough that you could just reduce this down using a conditional expression:</p>

<pre><code>def peek_left(self):
    return self.array[-1] if self.array else None
</code></pre>

<p>Which should be used is a matter of preference, but here, I think the latter is succinct enough that I'd prefer it.</p>

<p>I'd also consider allowing the user the set their own default value here instead of forcing <code>None</code>. With how you have it now, it isn't possible to differentiate between a failed and successful peek if the deque contains <code>None</code>s. This would be a pretty simple change to fix:</p>

<pre><code>def peek_left(self, default=None):
    return self.array[-1] if self.array else default
</code></pre>

<p>Along the same lines, <code>pop_left</code> can be neatened up a bit too:</p>

<pre><code>def pop_left(self, default=None):
    # If mid is the rightmost element, move it left.
    if self.mid == len(self.array) - 1:
        self.mid = self.mid - 1

    return self.array.pop() if self.array else default
</code></pre>

<hr>

<p>Regarding</p>

<blockquote>
  <p>I'm aware that the <code>__str__</code> method isn't particularly efficient as it is O(n)</p>
</blockquote>

<p>On top of what @Steven mentioned, I think O(n) would be the best possible runtime complexity anyways. To turn each element into a string to return, you would necessarily have to visit each element at least once.</p>
    </div>