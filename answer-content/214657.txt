<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm no C++ guru, but some things jump out at me:</p>

<ol>
<li><p>Your coding style is very dense, which makes it hard to read and review. I'd suggest that you switch to a style that doesn't make you pay for each time you add a space. Code like this:</p>

<pre><code>cin&gt;&gt;t;
while(t--)
</code></pre>

<p>Just isn't as easy to read as code like this:</p>

<pre><code>cin &gt;&gt; t;
while (t--)
</code></pre>

<p>The little things make a difference! And even if you're in some kind of "shortest code" context, I think you should still write it long, and then compress it once you have it working.</p></li>
<li><p>The first <code>for</code> loop in your <code>while</code> loop is concerned with reading and parsing the input strings. I believe you should break that into a separate function. What's more, I think you should make a slight change to your data storage as @Deduplicator suggested: instead of just using the bits located at <code>(1 &lt;&lt; (vowel - 'a'))</code>, at some point you should compress the bits down into the range <code>1&lt;&lt;0 .. 1&lt;&lt;4</code>.</p></li>
<li><p>I believe that the description says "(unordered) pairs" and means that if two strings, A and B, can be concatenated to meet the requirements, they only count once, as in <code>set{A, B}</code> and not twice, as in <code>pair(A,B), pair(B,A)</code>. So, as @Deduplicator suggested, if you "bin" your words - that is, categorize them according to the trait "which vowels are present", then you can represent a bin with just an integer (how many words are in the bin). So you would then cross-match every bin with every other bin to determine whether the binned words can successfully pair, and add an appropriate number to the count.</p></li>
</ol>

<p>With that in mind, a successful solution would look something like this:</p>

<pre><code>for each input word:
    scan the word for vowels, recording which vowels were found
    classify the found vowels into a small integer with bits 0..4 set
    use the small integer as the "bin" number for that word
    increment the count for that bin#
</code></pre>

<p>This should be <span class="math-container">\$O(n \cdot s)\$</span> on the number of words, <em>n,</em> and the length of the words, <em>s,</em> in time. The only optimization would be to break out of the scanning loop if you match every single vowel, since further scanning gains you nothing. The code will require storage for the input, but compiles everything down to a single bin number, so the storage will be from <span class="math-container">\$O(1)\$</span> to <span class="math-container">\$O(s)\$</span> depending on how you implement the code. The bin numbers are members of a fixed set, so their counts will be <span class="math-container">\$O(2^5)\$</span> regardless, which simplifies to <span class="math-container">\$O(1)\$</span>.</p>

<p>Now since matched pairs of words only count one time, you can loop "upwards" when generating combinations:</p>

<pre><code>for each bin 0 .. 2^5 - 1
    for each higher bin (looping upwards here):
        if the two bins match
            the count of word pairs is # in bin-1 * # in bin-2
            add the count to the total count of matchable pairs
</code></pre>

<p>This should be <span class="math-container">\$O(n^2)\$</span> on the number of <em>bins</em> (not words!), which is a constant. You can't optimize much, except that bins with counts of zero won't contribute anything so can be skipped. </p>

<p>At this point you have your answer and just need to print it out.</p>
    </div>