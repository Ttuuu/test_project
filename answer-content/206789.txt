<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I don't advise importing all the names from <code>std</code> into your own namespace, even if only in the implementation file.  That's a recipe for confusion and errors - in the worst case, a function added to later standards could be an unambiguously better match at a call site, as <a href="//stackoverflow.com/a/1453605">explained on Stack Overflow</a>.</p></li>
<li><p>I think that instead of <code>std::runtime_error</code>, it would be better to use the more specific <code>std::range_error</code> when out-of-range parameters are passed.</p></li>
<li><p>Perhaps your constant <code>0.33333333333333333</code> would be better expressed as</p>

<pre><code>constexpr auto one_third = 1.0 / 3.0;
</code></pre></li>
<li><p>Does it make sense to use <code>std::uniform_real_distribution&lt;double&gt;</code> internally, or would it be better to use <code>std::uniform_real_distribution&lt;result_type&gt;</code>, in preparation for making it generic?</p></li>
</ul>

<p>I had to fix a bug: because <code>std::​uniform_real_distribution::​operator()</code> is unfortunately non-<code>const</code>, we have to make <code>my_random::​logarithmic_distribution::​operator()</code> and <code>my_random::​logarithmic_distribution::​auxiliary::​operator()</code> non-<code>const</code>, too.</p>

<p>With that fixed, I made a test program, which generates plausible-looking results:</p>

<pre><code>int main()
{
    static constexpr std::size_t bins = 20;
    std::array&lt;std::size_t,bins&gt; histogram{};

    my_random::logarithmic_distribution dist{};

    std::random_device rd{};
    std::minstd_rand gen{rd()};

    for (auto i = 0;  i &lt; 1000000;  ++i) {
        auto const val = dist(gen);
        // store it into the right histogram bin
        auto bin = (val - dist.min()) / (dist.max() - dist.min()) * histogram.size();
        ++histogram[bin];
    }

    auto i = 0;
    for (auto bin: histogram) {
        std::cout &lt;&lt; "bin " &lt;&lt; i++ &lt;&lt; ": " &lt;&lt; bin &lt;&lt; '\n';
    }
}
</code></pre>

<hr>

<p>(partial review - I hope to add to this later)</p>
    </div>