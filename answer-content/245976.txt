<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice implementation, easy to understand and efficient. Few suggestions:</p>
<ol>
<li>As others said, by using <code>"*".repeat()</code> you can avoid some of the loops</li>
<li>Make use of <code>String.format</code> it's very powerful for arranging the text</li>
<li>If you want to change the character <code>*</code> is better to use a single constant or even better an enum</li>
</ol>
<h2>Code refactored</h2>
<p>It can actually be solved in one line:</p>
<pre class="lang-java prettyprint-override"><code>String christmasTree = IntStream.range(0, rows+2).mapToObj(i-&gt;String.format("%1$"+rows+"s%2$s%n",i&lt;rows?"*".repeat(i+1):i&lt;rows+1?"|":"_",i&lt;rows?"*".repeat(i):"")).collect(Collectors.joining());
</code></pre>
<p>Given <code>rows=4</code> the string <code>christmasTree</code> will be:</p>
<pre><code>   *
  ***
 *****
*******
   |
   _
</code></pre>
<p>This is a simplified version with a regular for-loop:</p>
<pre class="lang-java prettyprint-override"><code>public static String christmasTree(int rows) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; rows; i++) {
        sb.append(String.format("%1$" + rows + "s%2$s%n", "*".repeat(i + 1), "*".repeat(i)));
    }
    sb.append(String.format("%1$" + rows + "s%n", "|"));
    sb.append(String.format("%1$" + rows + "s", "_"));
    return sb.toString();
}
</code></pre>
<h2>Explanation</h2>
<p>The key methods are <code>.repeat()</code> (as @Doi9t suggested) and <code>String.format</code>.</p>
<p>Regarding the line in the for-loop, the parameters of <code>String.format()</code> are described below:</p>
<ul>
<li><code>%1$</code> means take the first argument, which is <code>"*".repeat(i + 1)</code></li>
<li><code>%2$</code> means take the second argument, which is <code>"*".repeat(i)</code></li>
<li><code>s</code> means convert the argument to a <code>String</code></li>
<li><code>%1$" + rows + "s</code> pads the first string argument to <code>rows</code> characters</li>
<li><code>%n</code> represents the line terminator</li>
</ul>
<p>More about <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html#syntax" rel="nofollow noreferrer">String.format</a> (which uses a <code>java.util.Formatter</code>).</p>
<p>This is a version with a configurable ornament:</p>
<pre class="lang-java prettyprint-override"><code>public static String christmasTree(int rows, Ornament ornament) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; rows; i++) {
        sb.append(String.format("%1$" + rows + "s%2$s%n", ornament.getValue().repeat(i + 1), ornament.getValue().repeat(i)));
    }
    sb.append(String.format("%1$" + rows + "s%n", "|"));
    sb.append(String.format("%1$" + rows + "s", "_"));
    return sb.toString();
}
</code></pre>
<p>The <code>Ornament</code> enum:</p>
<pre><code>public enum Ornament{
    BULBS("o"),
    STARS("*");
    
    private String value;
    
    Ornament(String value){
        this.value=value;
    }
    
    public String getValue() {
        return this.value;
    }
}
</code></pre>
<p>Merry Christmas in advance <code>System.out.println(christmasTree(10,Ornament.BULBS))</code></p>
<pre><code>         o
        ooo
       ooooo
      ooooooo
     ooooooooo
    ooooooooooo
   ooooooooooooo
  ooooooooooooooo
 ooooooooooooooooo
ooooooooooooooooooo
         |
         _
</code></pre>
    </div>