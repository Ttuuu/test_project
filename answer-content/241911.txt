<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally, if a function can't handle an exception, let the exception pass up the call stack in case a higher level can handle it.  For example, don't <code>assert</code> that node is in the graph.  Assume it is and try the operation.  If the node isn't in the graph, an IndexError will be thrown.  (Some people say "it's easier to ask forgiveness than get permission".)</p>

<p>Presuming that <code>friendships</code> is a Graph, and that <code>person1</code> and <code>person2</code> are nodes in the Graph, <code>common()</code> can be implemented using the <code>neighbors()</code> method and <code>set</code> operations:</p>

<pre><code>def common(friendships, person1, person2):
    """Return the number of common friends of person1 and person2."""
    return friendships.neighbors(person1) &amp; friendships.neighbors(person2)
</code></pre>

<p>A <code>neighbors()</code> and <code>nodes()</code> can be simplified:</p>

<pre><code>def neighbors(self, node):
    """Return a copy of the set of neighbors of node.
    Assume the graph has the node.
    """
    return set(self.graph[node])

def nodes(self):
    """Return a set of all nodes in the graph."""
    return set(self.graph)
</code></pre>

<p>The doc-string suggests Graph is a non-directed graph, so <code>edges()</code> can be simplified:</p>

<pre><code>def edges(self):
    """Return the set of all edges in the graph.
    An edge is a tuple (node1, node2).
    Only one of (node1, node2) and (node2, node1) is included in the set.
    """
    seen = set()
    result = set()
    for node1, neighbors in self.graph.items():
        result.union((node1, node2) for node2 in neighbors if node2 not in seen)
        seen.add(node1)

    return result
</code></pre>
    </div>