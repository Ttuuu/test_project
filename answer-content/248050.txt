<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code update:</p>
<p><strong>Coordinates.h</strong></p>
<pre><code>#ifndef SNAKEGAMEVOL2_COORDINATES_H
#define SNAKEGAMEVOL2_COORDINATES_H

struct coordinates{
    int x,y;
    friend bool operator==(const coordinates&amp; l,const coordinates&amp; r)
    {
        return l.x == r.x &amp;&amp; l.y == r.y;
    }
};

#endif //SNAKEGAMEVOL2_COORDINATES_H
</code></pre>
<p><strong>Snake.h</strong></p>
<pre><code>#include &lt;deque&gt;
#include &lt;iostream&gt;
#include "Coordinates.h"

 


class Snake {
private:
    std::deque&lt;coordinates&gt; body;
    int nBody;
public:
    Snake();//default constructor
    Snake(const Snake&amp; other);//copy constructor
    Snake(coordinates init_body);//constructor
    ~Snake();
    Snake&amp; operator=(const Snake&amp; other);
    coordinates getCoordinates(int position);
    void setCoordinates(int position,coordinates xy);
    int size();
    void step(coordinates coord);
    void grow(int size);
};
</code></pre>
<p><strong>Snake.cpp</strong></p>
<pre><code>#include "Snake.h"

Snake::Snake()
{
    std::cout&lt;&lt;"Snake default constructor is executed\n";
    body.push_back({0,0});
    nBody=0;
}

Snake::Snake(const Snake&amp; other):body(other.body),nBody(other.nBody)
{
    std::cout&lt;&lt;"Snake copy constructor is executed\n";
}

Snake::Snake(coordinates init_body) {
    std::cout&lt;&lt;"Snake constructor is executed\n}";
    body.emplace_back(init_body);
    nBody=0;
}

Snake::~Snake()
{
    std::cout&lt;&lt;"Snake destructor is executed\n";
}

Snake &amp; Snake::operator=(const Snake &amp;other)= default;

coordinates Snake::getCoordinates(int position) {
    return body[position];
}

int Snake::size() {
    return body.size();
}

void Snake::step(coordinates coord)
{
    if(!nBody)
    {
        body.pop_front();
    } else{
        nBody--;
    }
    body.push_back(coord);
}

void Snake::setCoordinates(int position, coordinates xy)
{
    body[position]=xy;
}  

void Snake::grow(int size)
{
    nBody+=size;
}
</code></pre>
<p><strong>Apple.h</strong></p>
<pre><code>#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include "Coordinates.h"



class Apple {
private:
    coordinates appleCoord;
public:
    Apple();//default constructor
    Apple(coordinates dimensions);
    ~Apple();
    coordinates getCoordinates();
    void generate(coordinates dimensions);

};
</code></pre>
<p><strong>Apple.cpp</strong></p>
<pre><code> #include "Apple.h"
    
    Apple::Apple():appleCoord({0,0})
    {
        std::cout&lt;&lt;"Apple default constructor is executed\n";
    }
    
    Apple::Apple(coordinates dimensions) {
        std::cout&lt;&lt;"Apple constructor is executed\n";
        generate(dimensions);
    }
    
    Apple::~Apple()
    {
        std::cout&lt;&lt;"Apple destructor is executed\n";
    }
    
    coordinates Apple::getCoordinates() {
        return appleCoord;
    }
    
    
    void Apple::generate(coordinates dimensiosns) {
        appleCoord.x=rand()%(dimensiosns.x-2)+1;
        appleCoord.y=rand()%(dimensiosns.y-2)+1;
    }
</code></pre>
<p><strong>Game.h</strong></p>
<pre><code>#include "Snake.h"
#include "Apple.h"
#include &lt;conio.h&gt;




class Game {
private:
    int height,width;
    int x,y;
    bool stop;
    Snake snake;
    Apple apple;

public:
    Game(int height, int width);
    ~Game();
    void render();
    void logic();
    void loop();
    void input();

};
</code></pre>
<p><strong>Game.cpp</strong></p>
<pre><code>#include "Game.h"

Game::Game(int height, int width) : height(height), width(width) {
    std::cout&lt;&lt;"Game constructor is executed\n";
    x=width/2;
    y=height/2;
    stop=false;
    snake.setCoordinates(0,{x,y});
    apple.generate({width,height});
}

Game::~Game()
{
    std::cout&lt;&lt;"Game destructor is executed\n";
}

void Game::loop()
{
    while(!stop)
    {
        render();
        input();
        logic();
    }
}

void Game::render()
{
    coordinates xy{};
    /*for(int s=0;s&lt;snake.size();s++)
    {
        std::cout&lt;&lt;snake.getCoordinates(s).x&lt;&lt;" "&lt;&lt;snake.getCoordinates(s).y&lt;&lt;"\n";
    }*/
     for(int i=0;i&lt;height;i++)
     {
         for (int j = 0; j &lt; width; j++)
         {
             xy={j,i};
             /*
             * ============================
             *          GAME BOARD
             * ============================
             * */
             if (i == 0 || i == height - 1)
             {
                 if (j == 0 || j == width - 1)std::cout &lt;&lt; "+";//game board corners
                 else std::cout &lt;&lt; "-";//horizontal side
             }
             else if (j == 0 || j == width - 1)std::cout &lt;&lt; "|";//vertical side
             //APPLE
             else if (apple.getCoordinates()==xy)std::cout &lt;&lt; "*";
             else
             {
                 /*
                 * ============================
                 *          SNAKE
                 * ============================
                 * */
                 bool print=false;
                 for(int k=0;k&lt;snake.size();k++)
                 {
                     if(snake.getCoordinates(k)==xy)
                     {
                         //HEAD
                         if(k==snake.size()-1) std::cout&lt;&lt;"X";
                         //TAIL
                         else std::cout&lt;&lt;"o";
                         print=true;
                     }
                 }
                 //EMPTY SPACE
                 if(!print)std::cout&lt;&lt;" ";
             }
         }
         std::cout&lt;&lt;"\n";
     }
}

void Game::logic()
{
    //BOUNDARY CONDITIONS
    if(x&gt;=width-1)x=1;
    else if(x&lt;=0)x=width-2;
    if(y&gt;=height-1)y=1;
    else if(y&lt;=0)y=height-2;
    //SNAKE EATS APPLE
    coordinates head={x,y};
    if(head==apple.getCoordinates())
    {
        apple.generate({width,height});
        snake.grow(1);
    }
    for(int i=0;i&lt;snake.size()-1;i++)
    {
        if(head==snake.getCoordinates(i)) stop=true;
    }
    snake.step({x,y});
    //std::cout&lt;&lt;(snake.step({x,y})?"True":"False")&lt;&lt;"\n";
}

void Game::input()
{
    char controls;
    std::cin&gt;&gt;controls;
    switch(controls)
    {
        case 'a':
            x--;
            break;
        case 'd':
            x++;
            break;
        case 'w':
            y--;
            break;
        case 's':
            y++;
            break;
        default:
            stop=true;
            break;
    }
}
</code></pre>
<p>I still didn't use a better random generator for the class Apple beacuse it is easier to test my code this way.</p>
<p>I added a default constructor to the Apple and Snake class so I can initialize them without inputing arguments to the constructor inside Game class. Also I added copy constructor and operator = to the class Snake beacuse of the three rule. Don't know if it is necessary though.</p>
<p>Next two tasks that I want to tackle are how to handle the game over output, beacuse the old one dosen't do the trick anymore. Maybe should I write an extra method that would I call inside the logic() method and the method would output some text in to the console?
For example:</p>
<pre><code>void Game::logic()
{
...
for(int i=0;i&lt;snake.size()-1;i++)
    {
        if(head==snake.getCoordinates(i)) 
         {
            stop=true;
            gameOver()
        }
    }
}
</code></pre>
<p>And I want to implement some graphical interface. I read something about SDL library and am trying to implement it on some other project. Would it be a good idea to begin with? Or should I do something else?</p>
<p>Also I have a non programming related question. I'm a physics student who wants to get hired as C++ (or any other language) developer. I know that my programming skills are on the beginer spectrum, so I want to learn as much as possible on my own. So I would like to know how should I do that? Am I doing it the right way, so that I tackle different kind of projects or is there another way? And what kind of project do you suggest that I should do to gain the right kind of experience?</p>
    </div>