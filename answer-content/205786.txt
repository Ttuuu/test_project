<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I much prefer your solution. It's easy to read and straightforward. The difference in size between the 2 is probably not that much. Their code has an <code>unordered_set</code> with a few elements in it. Your code has an <code>unordered_map</code> with likely 26 elements in it. We're talking about 26 * 5 = 130 bytes vs. say 5 or 10 bytes for the set on average. On modern systems, this is not a difference in memory usage. It's all below 1KB. If you're working with some old or oddball hardware and that becomes an issue, you can deal with it then.</p>

<p>However, if I were to see this code in production, I would probably want the following changes:</p>

<ol>
<li>I would opt for using <code>auto</code> instead of the long type name in this line:</li>
</ol>

<p></p>

<pre><code>for(std::pair&lt;char, int&gt; letter : letter_count) {
</code></pre>

<p>I'd make it:</p>

<pre><code>for(const auto&amp; letter : letter_count) {
</code></pre>

<p>As mentioned in the discussion in the comments, making it a reference saves a copy of the <code>pair</code> and making it <code>const</code> lets a reader know that you aren't going to be modifying it.</p>

<ol start="2">
<li>I'd use more space between operators in the next line:</li>
</ol>

<p></p>

<pre><code>if(letter.second%2 != 0) {
</code></pre>

<p>would become:</p>

<pre><code>if (letter.second % 2 != 0) {
</code></pre>

<p>It's just easier to read.</p>

<ol start="3">
<li>I might make that conditional into a named function just to make it clearer:</li>
</ol>

<p></p>

<pre><code>bool isOdd(const int x)
{
    return (x % 2) != 0
}

// ...
if  (isOdd(letter.second)) {
</code></pre>
    </div>