<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Also using a playground (if that helps)</p>
</blockquote>

<p>Well, that is the main reason for the slow execution. A playground is an interactive environment, and the code is not optimized. For all computations in the main playground file, intermediate results are displayed in the side bar (such as the values of the variables, or how often a loop has executed). This makes longer computations really slow.</p>

<p>For code that consists of many computation steps you better</p>

<ul>
<li>either move it to a function in a separate playground source file, </li>
<li>or use a compiled Xcode project instead of a playground.</li>
</ul>

<p>I often prefer a compiled project over a playground because</p>

<ul>
<li>you can <em>debug</em> your code (single-step, inspect variables, ...),</li>
<li>you can enable optimizations (compile with the “Release” configuration) for performance critical tasks.</li>
</ul>

<p>But your code can also be simplified and optimized. This loop</p>

<pre><code>var index = 0
var smlSqr = [Int]()
repeat {
    smlSqr.append(index * index)
    index += 1
} while(index &lt; findLimit)
</code></pre>

<p>appends one array element in each loop iteration, so that it can be written as a <em>map</em> operation:</p>

<pre><code>let smlSqr = (0..&lt;findLimit).map { k in k * k }
</code></pre>

<p>(You may also think about better variable names: what does <code>smlSqr</code> stand for?)</p>

<p>And this</p>

<pre><code>var maxSqr = 0 // Final result
var candidate = 0
while candidate &lt; smlSqr.count {
    if smlSqr[candidate] &gt; maxSqr {
        maxSqr = smlSqr[candidate]
    }
    candidate += 1
}
</code></pre>

<p>determines the largest array element. The is a dedicated method for that purpose:</p>

<pre><code>let maxSqr = smlSqr.max()!
</code></pre>

<p>(We can force-unwrap here if we know that the array is not empty.) But the array elements are sorted in increasing order, so that the largest element is actually the last element:</p>

<pre><code>let maxSqr = smlSqr.last!
</code></pre>

<p>So what we have so far is</p>

<pre><code>let target = 758865
let findLimit = Int(Double(target).squareRoot().rounded(.up))
let smlSqr = (0..&lt;findLimit).map { k in k * k }
let maxSqr = smlSqr.last!
</code></pre>

<p>and now we can see that this can be simplified even further: The last element appended to the array is <code>(findLimit - 1) * (findLimit - 1)</code>, so that we only need</p>

<pre><code>let target = 758865
let findLimit = Int(Double(target).squareRoot().rounded(.up))
let maxSqr = (findLimit - 1) * (findLimit - 1)
</code></pre>

<p>(And this is so short and fast that you can execute it in in a playground directly, without any of the optimization tricks mentioned above.)</p>

<p>To make the code reusable, you should define it as a function:</p>

<pre><code>func largestSquareRoot(lessThan n: Int) -&gt; Int {
    let root = Int(Double(n).squareRoot().rounded(.up)) - 1
    return root * root
}
</code></pre>

<p>Note that this gives a nonsensical result for <span class="math-container">\$ n = 0 \$</span> and crashes for <span class="math-container">\$ n &lt; 0 \$</span>. You'll have to define what result you want in those cases.</p>
    </div>