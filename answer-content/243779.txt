<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>elif</h1>
<p>Your code doesn't look like it will work the way you intend it to:</p>
<pre><code>  if "Mary" in name:
    print(name)
  if "Alan" in name:
    print(name)
  else:
    print("no")
</code></pre>
<p>If <code>name</code> contains <code>"Mary"</code>, but does not contain <code>"Alan"</code>, you will have two lines printed, due to the first <code>print(name)</code> and the <code>print("no")</code> statements.  It would also print <code>name</code> twice in the string contained both <code>"Mary"</code> and <code>"Alan"</code>, like "Mary is Alan's"`.</p>
<p>You probably wanted an <code>if</code>/<code>elif</code>/<code>else</code> statement:</p>
<pre><code>  if "Mary" in name:
    print(name)
  elif "Alan" in name:
    print(name)
  else:
    print("no")
</code></pre>
<p>This will print only once per row.</p>
<h1>.startswith</h1>
<p>Do you really want in?  Should <code>"Anne"</code> match <code>"Mary-Anne is herself"</code>?  Or are you looking for <code>name.startswith("...")</code> tests?</p>
<p>Should <code>"Mary"</code> match <code>"Maryanne is herself"</code> or <code>"Mary-Anne is herself"</code>?  Maybe you want to add a space to the end of the search term:</p>
<pre><code>  if name.startswith("Mary "):
      print(name)
  elif name.startswith("Alan "):
      print(name)
  else
      print(no)
</code></pre>
<p>Alternately, you may want to split <code>name</code> into words, and check for equality.  You'll have to clarify your question.</p>
<h1>or</h1>
<p>If you want to do the same thing with multiple conditions, you could link them with <code>or</code>:</p>
<pre><code>  if name.startswith("Mary ") or name.startswith("Alan "):
      print(name)
  else
      print(no)
</code></pre>
<h1>any</h1>
<p>If you want to test a long list of similar conditions, joined together with <code>or</code>, you are really wanting to test if <code>any</code> of the conditions match.  Which is perfect for the <code>any(...)</code> function, which returns <code>True</code> if any of the conditions is <code>True</code>.</p>
<p>Combined <code>any()</code> with a generator expression, to generate a series of conditions to test:</p>
<pre><code>prefixes = ["Mary ", "Alan "]
for i in range(6):
    name = df["A"].iloc[i]
    if any(name.startwith(prefix) for prefix in prefixes):
        print(name)
    else:
        print("no")
</code></pre>
<h1>Loop like a native</h1>
<p>Why are you looping over indices, and then extracting the data by index?  Why hard-code the length of the range?</p>
<pre><code>prefixes = ["Mary ", "Alan "]
for name in df["A"]:
    if any(name.startwith(prefix) for prefix in prefixes):
        print(name)
    else:
        print("no")
</code></pre>
    </div>