<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice implementation.  Don't be alarmed by this list of thoughts/opinions/observations:</p>

<p>In <code>__init__</code>, it might make more sense to make both parameters optional with default values.  You wouldn't normally expect a library to interactively ask for missing parameters.</p>

<p>Python code typically isn't written to check types at runtime.</p>

<pre><code>def __init__(self, heap: list=None, d: int=1):

    self.heap = heap or list()

    self.d = d

    self.build_d_heap()
</code></pre>

<p>It isn't necessary to keep track of the length of the heap.  Just use <code>len(self.heap)</code>.  It is already O(1).</p>

<p>Starting a class member name starting with <code>'_'</code> tells users that it is not part of the public interface of the class and it might change.  So it might be good to use <code>_child()</code>, <code>_parent()</code>, etc. because these are internal implementation specific methods.</p>

<p>A <code>'__'</code> (without a trailing <code>'__'</code>) tells the python compiler to mangle the class member name.  This is mostly to prevent name collisions when a class is intended for subclassing.</p>

<p>It is not common in Python code to provide setters or getters and the like.  Just let the user access the class member directly.  If the implementation needs to be changed, a property can be used to avoid changing the interface.</p>

<p>Defining a <code>__len__()</code> method implements the builtin <code>len()</code> function for your container class.</p>

<p>Triple quoted strings can have multiple lines, so you don't need to use them at the beginning and end of every line.  Docstrings typically go inside a function/method definition not before it.</p>

<p>According to the wikipedia article, the index of the parent is math.floor(i/self.d)-1.  It also says to heapify an list, start at the end of the list not at (length-1)//d.</p>

<p><code>dheap_increase_key()</code> doesn't seem to be used anywhere.</p>

<p><code>dheap_insert()</code> looks like heap items can only be int, which would be extremely limiting.  To be more useful, a heap item should be anything that can be compared (<code>&lt;</code>), such as strings, tuples, lists, classes with <code>__lt__()</code> method, etc.</p>

<p>That's all for now.</p>

<pre><code>    self.__heap[0] = self.__heap[self.length-1]
    self.__heap.pop()
</code></pre>

<p>can be simplified to:</p>

<pre><code>    self.__heap[0] = self.__heap.pop()
</code></pre>
    </div>