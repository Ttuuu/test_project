<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The code uses <code>pos=queue[0]</code> and <code>queue.remove(pos)</code>. Instead, you could use <code>pos=queue.pop(0)</code>. Be aware that popping from the front isn't really efficient, it's O(n), which is bad for big lists.</p></li>
<li><p>You could use the fact that you can assign to two variables at once: <code>x, y = queue.pop(0)</code>. This removes <code>pos</code> completely, fewer variables are easier to understand.</p></li>
<li><p>You pass a maze and the start position to the BFS. However, the queue and others are global. That's very bad design. Keep things in as small a scope as possible. You can always return a tuple from a function if a single value is not sufficient, if that was the reason.</p></li>
<li><p>What are <code>len(maze[0])</code> and <code>len(maze)</code>? Call those width and height and compute them at the start of the function to answer that question.</p></li>
<li><p>The if-clause in the loop has too many conditions at once, which is really hard to read. There's nothing wrong with a <code>continue</code> when the computed position was already visited, just to illustrate one check that could be extracted.</p></li>
<li><p><code>parent[neighbor] = pos</code> is done at two places. Do that exactly once when you first visit a new place.</p></li>
<li><p><code>visited</code> seems to be the list of places that were already visited. The type is a Python <code>list</code>, but a <code>set</code> would be a more suitable datatype for that, unless the order of the elements matters.</p></li>
</ul>
    </div>