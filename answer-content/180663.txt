<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<ol>
<li>Use inheritence, they derive from the same super class, but for now they have different constructors. Alot more typing ;)</li>
<li>You could use a <code>__str__</code> to get a visual representation of the stats, these can also be handled by the parent Class.</li>
<li>If you use <code>Python3.6</code> you could use the fancy <code>f"string"</code>, see the relevant <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP article</a>. </li>
</ol>

<p>@Austin Hastings has the right idea, using <code>**kwargs</code> to do all the attribute setttings.</p>

<p>I recommend to look up <code>inheritence</code>, and Python <code>__magic__ methods</code>.</p>

<h1>Code changes</h1>

<pre><code>import textwrap


class Player:
    def __init__(self, name, hp=100, damage=30, energy=100, strength=0, mana=0, arrows=0):
        self.name = name
        self.hp = hp
        self.damage = damage
        self.energy = energy
        self.strength = strength
        self.mana = mana
        self.arrows = arrows        

    def __str__(self):
        return textwrap.dedent(f"""\
                                Name: {self.name}
                                HP: {self.hp}
                                Damage: {self.damage}
                                Energy {self.energy}
                                Strength {self.strength}
                                Mana {self.mana}
                                Arrows {self.arrows}\n""")

class Swordsman(Player):
    def __init__(self, name="Sowrdsman", damage=50, strength=100, **kwargs):
        super().__init__(name=name, damage=damage, strength=strength, **kwargs)

    def __str__(self):
        return super().__str__()

class Mage(Player):
    def __init__(self, name="Mage", mana=500, **kwargs):
        super().__init__(name=name, mana=mana, **kwargs)

    def __str__(self):
        return super().__str__()

class Archer(Player):
    def __init__(self, name="Archer", arrows=500, **kwargs):
        super().__init__(name=name, arrows=arrows, **kwargs)

    def __str__(self):
        return super().__str__()

if __name__ == '__main__':
    archer = Archer()
    print(archer)

    swordsman = Swordsman()
    print(swordsman)

    mage = Mage()
    print(mage)
</code></pre>
    </div>