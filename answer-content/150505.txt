<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The solution that I presented was using stack push and pop method. There are some givens that we know it going to fail:</p>

<ol>
<li>The last bracket must be a closing bracket otherwise, it fails.</li>
<li>The first bracket must be an opening bracket otherwise, it fails.</li>
<li>It must be an even number since bracket must be in pairs.</li>
</ol>

<p>The solution I implemented was to push from last closing bracket into 
balanced stack until it reaches opening bracket, then it must pair up with
with closing bracket in the balanced stack, if it doesn't match at top of balanced stack then it fails. If it matches then pop the closing bracket off the balanced stack. The balanced stack only stores closing brackets. <code>arr</code> is an array that stores all brackets that need to be iterated through from last to first bracket. The balanced bracket must be empty at the end in order to pass.</p>

<pre><code>var open  = ['[','&lt;','('];
var close = [']','&gt;',')'];

var isBalanced = function(br){
  let balanced = [];

  let arr = br.replace(/[^\(\)\&lt;\&gt;\[\]]/g,'').split(''); //brackets only

    if(arr.length % 2 !== 0) return 0; // must be an even pair

    for(let i=arr.length-1; i&gt;=0; i--){
        if(close.indexOf(arr[i])&gt;=0) //check if it is a closing bracket
            balanced.push(arr[i]);
        else{  // if bracket match, then pop off balanced array
            if(open.indexOf(arr[i])!==close.indexOf(balanced[balanced.length-1]))
                return 0;
            else
                balanced.pop();
        }
    }
    return (balanced.length&gt;0)?0:1;
};

console.log(isBalanced('&lt;&gt;[ccg[&lt;a&gt;]]b([09])'));   // 1
console.log(isBalanced('&lt;[[&lt;&gt;&gt;]]([])'));          // 0
console.log(isBalanced('][&lt;&gt;]]([])'));            // 0
console.log(isBalanced('foo(bar);'));             // 1
</code></pre>
    </div>