<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>GUI Design Changes</h1>

<h2>BorderLayout</h2>

<p>You are adding subpanels with:</p>

<pre><code>  panel.add(subpanel1, BorderLayout.WEST);
  panel.add(subpanel2, BorderLayout.EAST);
</code></pre>

<p>but you declare <code>panel</code> with:</p>

<pre><code>  JPanel panel = new JPanel();
</code></pre>

<p>which by default uses <code>FlowLayout</code>.  You probably want to explicitly use <code>BorderLayout</code>:</p>

<pre><code>  JPanel panel = new JPanel(new BorderLayout());
</code></pre>

<p>and then I find:</p>

<pre><code>  panel.add(subpanel1, BorderLayout.CENTER);
  panel.add(subpanel2, BorderLayout.PAGE_END);
</code></pre>

<p>produces a more pleasing layout.</p>

<h2>Centred Text</h2>

<p>With the <code>BorderLayout</code>, the 9x9 grid layout will expand to fill most of the application window.  With larger windows, the left-aligned text fields look wrong, so instead, add:</p>

<pre><code>  text[i][j].setHorizontalAlignment(JTextField.CENTER);
</code></pre>

<h2>Grid Gaps</h2>

<p>At this point, I removed the <code>GridLayout</code> hgap and vgap, and removed the preferred size for <code>subpanel1</code>:</p>

<pre><code>  JPanel subpanel1 = new JPanel(new GridLayout(9, 9));
</code></pre>

<h1>GUI Code Refactoring</h1>

<h2>Member variables</h2>

<p>The <code>createGUI()</code> method is a little large; it contains the event handler for the button.  Let's move that out into its own function.  Since it will need access to the <code>text[i][j]</code> and <code>button</code>, let's move those into members of a <code>SudokuSolver</code> object.  Obviously, we'll create need to create a <code>SudokuSolver</code> object, so let's use <code>invokeLater</code> to create the object, and build the GUI inside the constructor.</p>

<pre><code>public class SudokuSolver {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(SudokuSolver::new);
    }

    private final JTextField[][] text;
    private final JButton button;

    SudokuSolver() {
        JFrame frame = new JFrame();
        ...
        text = new JTextField[9][9];
        ...
        button = new JButton("OK");
        button.addActionListener(this::solveBoard);
        ...
        panel.add(subpanel1, BorderLayout.CENTER);
        panel.add(subpanel2, BorderLayout.PAGE_END);
        frame.add(panel);
        frame.setVisible(true);
    }

    private void solveBoard(ActionEvent action_event) {
        ...
    }

    ...
}
</code></pre>

<h2>The Board</h2>

<p>The <code>createGUI()</code> method had a <code>board</code> matrix which was explicitly initialized to a 9x9 grid of 0's.  The creation of the GUI didn't use this <code>board</code> at all; it was used by the <code>actionPerformed</code> handler.  So it does not need to be included in the constructor's GUI creation code.  It can be created as a local variable in the <code>solveBoard()</code> method.</p>

<pre><code>    private void solveBoard(ActionEvent action_event) {
        int board[][] = new int[9][9];

        for(int i = 0; i &lt; 9; i++) {
            for(int j = 0; j &lt; 9; j++) {
                board[i][j] = Integer.valueOf(text[i][j].getText());
            }
        }

        ...
    }
</code></pre>

<h2>Hiding UI elements</h2>

<p>When you make something invisible, the entire UI may need to be updated, as components may grow to use the newly vacated space.  It is usually preferable to disable components, instead of making them invisible, when they are no longer needed or appropriate:</p>

<pre><code>        button.setEnabled(false);
</code></pre>

<h1>Quality of Life Improvements</h1>

<p>Suggestions for improvements</p>

<h2>Input Validation</h2>

<p>What happens if the user enters a bad input for one of the cells, and presses "OK"?  The program might crash, which is usually unacceptable behaviour for a GUI application.  The user might not even see a console message explaining why the crash occurred!</p>

<p>What if the user enters bad, but valid input, like "10" or "-1" into a cell?  The solver won't have any problem finding values that work to solve the puzzle, but does it make sense to even attempt solving it?</p>

<p>Perhaps the "OK" button should only be enabled if all the cells contain only a single digit, and disabled otherwise?</p>

<h2>Retry</h2>

<p>After solving, or attempting to solve a puzzle, what can the user do?  Only close the application.  They can't reset the puzzle.  What if they made a mistake, and want to change something?  They have to reenter all the givens.</p>

<p>This is most apparent if "Not solvable." is displayed.  None of the user inputs have been changed, all the cells are still editable, but the "OK" button to solve the puzzle is no longer available?  Then the user see "Oh, that cell was supposed to be a 7, not a 1" ... and while they can change the cell value, they can't reattempt the solution!  They have to relaunch the application, and enter the values again.  Or you could be nice and in this one case, you could leave the "OK" available to try again.</p>

<p>How about a "Reset" button, which is enabled after a successful solve, which removes the solved values and reenables all the input cells?</p>

<h2>Uniqueness</h2>

<p>Can you tell if there are multiple solutions?</p>

<h1>Other Review Comments</h1>

<h2>Naming</h2>

<p><code>button</code>, <code>text</code> are poor variable names.  <code>solve_button</code> would be a little clearer if there was more than one button.  Similarly, <code>cell_text_field</code> might be better than <code>text</code>, but perhaps a little verbose; how about <code>cell_tf</code>?  Or <code>tfCell</code> if you like Hungarian notation.</p>

<p><code>subpanel1</code> could be called <code>grid_panel</code>, and <code>subpanel2</code> could be called <code>button_panel</code>.</p>
    </div>