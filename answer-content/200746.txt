<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Semantics and UX</h1>

<p>You can adjust a few things that will improve the overall UX of your login-page:</p>

<h2>Document outline / structure</h2>

<p>To improve the overall structure of your document use sectioning elements like <code>header</code>, <code>main</code>, <code>section</code> etc.:</p>

<pre><code>&lt;header class="left-side"&gt;
    &lt;img src="./img/logo.png" alt="Logo" class="logo"&gt;
&lt;/header&gt;

&lt;main class="right-side"&gt;
    &lt;h1&gt;Welcome back&lt;/h1&gt;
&lt;/main&gt;
</code></pre>

<p>Keep in mind that headings are hierarchical from <code>h1</code> to <code>h6</code> in HTML. So it might make sense to have a <code>h3</code> as the first heading in a sectioning element, but it really depends on your content.</p>

<p>See also on MDN <a href="https://developer.mozilla.org/de/docs/Web/Guide/HTML/Sections_and_Outlines_of_an_HTML5_document" rel="nofollow noreferrer">"Sections and Outlines of an HTML5 Document"</a>.</p>

<h2>Don't use <code>placeholder</code> as <code>labels</code></h2>

<p>I know, it's easy to set up and it instantly looks nice. But this is not the intended use-case. See the specs:</p>

<blockquote>
  <p>The placeholder attribute represents a short hint
  (a word or short phrase) intended to aid the user
  with data entry when the control has no value.</p>
  
  <p>The placeholder attribute should not be used as
  a replacement for a label. For a longer hint or
  other advisory text, place the text next to the
  control.</p>
</blockquote>

<p><sup>From W3C <a href="https://w3c.github.io/html/sec-forms.html#the-placeholder-attribute" rel="nofollow noreferrer">"4.10.5.3.10. The placeholder attribute"</a></sup></p>

<p>There a are a lot of downsides of using <code>placeholders</code> as  <code>labels</code>, like:</p>

<ul>
<li>once something is typed into a field, you have to rely on the short-term memory of the user, to remember which field was which</li>
<li>the form can get ambiguous as soon as you have pre-filled elements as well</li>
<li>it reduces accessibility and usability for users with cognitive, mobility, fine motor skill or vision impairments</li>
</ul>

<p>Instead use <code>label</code>-elements:</p>

<pre><code>&lt;label&gt;
    Email
    &lt;input type="email"&gt;
&lt;/label&gt;

&lt;label for="form-email"&gt;Email&lt;/label&gt;
&lt;input id="form-email" type="email"&gt;
</code></pre>

<p>You can read more about this on the Nielson Norman Group <a href="https://www.nngroup.com/articles/form-design-placeholders/" rel="nofollow noreferrer">"Placeholders in Form Fields Are Harmful
"</a> or on Smashing Magazine <a href="https://www.smashingmagazine.com/2018/06/placeholder-attribute/" rel="nofollow noreferrer">"Don’t Use The Placeholder Attribute"</a>.</p>

<h2>"<em>Forgot your password</em>"-Link</h2>

<p>This is a paragraph, which will do nothing, when the user clicks on it. Make it an anchor, that takes the user to the "forgot password"-form:</p>

<pre><code>&lt;a href=""&gt;Forgot your password?&lt;/a&gt;
</code></pre>

<p>You don't necessarily need to wrap it into an <code>p</code>-element, but that's just optional.</p>

<h1>Indentation</h1>

<p>I would reduce the amount of indentation to make the source more readable. It also looks like the <code>form</code>-element is nested within the <code>h3</code>. This could be improved:</p>

<pre><code>&lt;h3 class="welcome"&gt;Welcome back &lt;span class="cust-name"&gt;Alan!&lt;/span&gt;&lt;/h3&gt;

&lt;form&gt;
&lt;/form&gt;
</code></pre>

<p>On the other hand some nested elements could be indented to increase readability: </p>

<pre><code>&lt;div class="form-group row"&gt;
    &lt;div class="col-sm-10"&gt;
        &lt;input type="email" class="form-control" id="inputEmail3" placeholder="Email"&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<h1>CSS</h1>

<h2>Don't limit the page's size</h2>

<p>… unless there's a very specific use-case of your UI.</p>

<p>You set <code>overflow: hidden;</code> on the <code>body</code>-element. Then you set <code>height: 100vh;</code> on the container that holds all content. That can work, if you have a fluid layout that adopts to all screen sizes. But usually it's a bad idea as you don't know how high the viewport is, whether the user zoomed in etc. You see it already, when running the snippet – <em>You can't scroll down to use the login form.</em> This should be fixed.</p>
    </div>