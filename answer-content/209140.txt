<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see you've found the right solution but let's make a review anyway as there are few things that I'm not particularly fond of.</p>

<hr>

<blockquote>
<pre><code>var fullName = type?.FullName;
if (fullName == null)
{
  return null;
}
</code></pre>
</blockquote>

<p>Instead of allowing <code>type</code> to be <code>null</code>, you should <code>throw</code> the <code>ArgumentNullException</code>. I cannot imagine any use-case where <code>type</code> being <code>null</code> would make sense. Usually this would mean a bug. You could return <code>null</code> later when resolving it fails but arguments should be always valid. Otherwise there are too many possibilities for the <code>null</code> result and it's could be difficult to tell why it didn't work.</p>

<hr>

<p>The method name is confusing becaues it says <em>Resolve</em> while it actually creates a <em>MefContractName</em> thus at first I thougt that when the regex fails here</p>

<blockquote>
<pre><code>if (!match.Success)
{
  return type.FullName;
}
</code></pre>
</blockquote>

<p>then it should return <code>null</code>. While in the first casae this would make sense, it wouldn't for creation so I suggest naming this extension as <code>ToMefContractName</code>. Now it all makes sense again.</p>

<p>I'm now sure what you need this <code>IndexIncrementor</code> for as the <code>type</code> should never be null so it will never be called.</p>

<blockquote>
<pre><code>var genericArgs = type.GetGenericArguments();

return fullNameNonGeneric + "(" +
  string.Join(",", genericArgs.Select(
      ga =&gt; ToMefContractName(ga, incrementor)
      ?? "{" + incrementor.Next() + "}"))
  + ")";
</code></pre>
</blockquote>

<p>You can turn this into a more readable query without the helper variable <code>genericArgs</code> that this time doesn't help in any way.</p>

<p>This is how I think it should look like (with <code>IndexIncrementor</code> removed because I could figure out what it is for):</p>

<pre><code>private static string ToMefContractName(Type type)
{
    if (type == null) throw new ArgumentNullException(nameof(type));

    var match = GenericRegex.Match(type.FullName);
    if (!match.Success)
    {
        return type.FullName;
    }

    var fullNameNonGeneric = match.Groups["fullNameNonGeneric"].Value;

    var genericArguments =
        from genericArgument in type.GetGenericArguments()
        select ToMefContractName(genericArgument);

    return $"{fullNameNonGeneric}({string.Join(",", genericArguments)})";
}
</code></pre>

<hr>

<p>The <code>IndexIncrementor</code> should be called just <code>Index</code> and have one read-only property named <code>Value</code> and its method should be called <code>Next</code>. Saying <code>GetAndIncrementValue</code> reveals the internal implementation and this is not important to the user, he just wants to have the <em>next</em> value.</p>

<pre><code>private class Index
{
    public int Value { get; private set; }

    public int Next() =&gt; Value++;
}
</code></pre>
    </div>