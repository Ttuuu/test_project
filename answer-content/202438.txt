<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems <a href="https://docs.microsoft.com/en-us/office/vba/api/Excel.Range.RemoveDuplicates" rel="nofollow noreferrer"><code>Range.RemoveDuplicates</code></a> could turn it all into a much more efficient one-liner.</p>

<p>Stylistically though, the code could use some help anyway.</p>

<p>The rather procedure begins with a good dozen variable declarations. Code is easier to follow when you don't need to constantly scroll up and down and back to know what's what: by declaring variables closer to their usage, you reduce the cognitive load and avoid that scrolling.</p>

<pre><code>Dim xlApp As Application
Set xlApp = Excel.Application
</code></pre>

<p>Now, there's no need for this variable; <code>Application</code> is free, globally-scoped, and you're not owning that instance - just copying a reference to an existing object. Don't do that, use the globals that are right there waiting to be referenced instead. This includes any worksheet that exist at compile-time in <code>ThisWorkbook</code>:</p>

<pre><code>Dim wsSource As Worksheet
Set wsSource = xlApp.ThisWorkbook.Worksheets("source")
</code></pre>

<p>Every worksheet has a <code>CodeName</code> property, that you can change in the <em>properties</em> toolwindow (F4). Locate that "source" worksheet in the <em>Project Explorer</em>, then look at its <code>(Name)</code> property - change it from what defaults to e.g. <code>Sheet1</code>, to a meaningful identifier, e.g. <code>SourceSheet</code>. And now you have a free, global-scope worksheet object referring to <em>that specific sheet</em>, readily usable everywhere in that VBA project - which makes this <code>wsSource</code> variable redundant as well.</p>

<pre><code>Dim rBefore As Range
Set rBefore = wsSource.Range(wsSource.Cells(2, 1), wsSource.Cells(wsSource.UsedRange.Rows.Count, 1))
</code></pre>

<p>It's not clear whether that <code>r</code> stands for <code>Range</code> (in which case it's useless Hungarian Notation), and <code>Before</code> what this range is. So we try to look at other usages to infer its meaning... and we don't find any: the variable is assigned, but the assigned reference isn't used anywhere - the variable is redundant and can be removed entirely.</p>

<pre><code>Dim ws As Worksheet
Set ws = xlApp.ThisWorkbook.Worksheets("testSheet")
</code></pre>

<p>Again, the <code>CodeName</code> could be <code>TestSheet</code>, and <code>ws</code> wouldn't be needed, provided that the worksheet exists at compile-time. Otherwise, kudos for fetching it from the <code>Worksheets</code> collection.</p>

<pre><code>Dim r As Range
Set r = ws.Range(ws.Cells(2, 1), ws.Cells(ws.UsedRange.Rows.Count, 1))
</code></pre>

<p><code>UsedRange</code> isn't a <a href="https://stackoverflow.com/a/11169920/1188513">reliable way</a> to get the last row of a column.</p>

<p><code>r</code> isn't a meaningful name. <code>testRange</code> would tell us it's from the <code>TestSheet</code>, but wouldn't convey what it <em>means</em> - any single-letter variable name can <em>never</em> tell us <em>anything</em> whatsoever about something's purpose. Unless it's <code>i</code> for a <code>For...Next</code> loop counter, which any programmer knows about; here <code>i</code> isn't used like that, it's more like some <code>processedRows</code>.</p>

<p><code>DoEvents</code> inside the loop, combined with updating the status bar at every single iteration, is contributing to slowing things down.</p>

<p>You're disabling <code>ScreenUpdating</code>, automatic <code>Calculation</code>, etc.; but you leave <code>EnableEvents</code> enabled, so a worksheet event is fired whenever you delete a row. You could use <code>Union</code> to combine all the rows you want to delete, and then delete them all in one single operation - instead of deleting them one at a time. But then again, <code>Range.RemoveDuplicates</code> makes that moot.</p>

<p>There <em>are</em> a number of issues (it's a constant work-in-progress), but <a href="http://www.github.com/rubberduck-vba/Rubberduck" rel="nofollow noreferrer">Rubberduck</a> could have picked up a number of the observations I made above. Kudos for <code>Option Explicit</code>, the meaningful name, and the explicit <code>Public</code> modifier on your macro!</p>
    </div>