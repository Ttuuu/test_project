<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Always use curly braces, even when they’re not required by the compiler.</p>

<p>It’s a poor practice for LinkedListNode to expose its internals directly (<code>n.data</code>, <code>n.next</code>. Use accessors.</p>

<p>Use interfaces where appropriate (<code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;()</code>). You don’t need any <code>HashMap</code>-specific behavior after declaration.</p>

<p>Use whitespace consistently and idiomatically. There should be a space before a <code>{</code>, between <code>if</code> and <code>(</code>, and after a <code>,</code>.</p>

<p>Your algorithm uses more space than you need to. This problem can be solved in <code>O(n)</code> time with <code>O(1)</code> space. Keep a leading pointer and a trailing pointer, with the leading pointer <code>k</code> steps ahead. When the leading pointer hits the end, the trailing pointer points to the desired node.</p>

<p>If you were to apply all my suggestions, your code might look more like:</p>

<pre><code>public static int getKthToLastElement(final LinkedListNode head, final int k) {
    if ((head == null) || (k &lt; 0)) {
        return -1;
    }

    LinkedListNode leadingPointer = head;
    for (int i = 0; i &lt; k; i++) {
        leadingPointer = leadingPointer.getNext();
        if (leadingPointer == null) {
            return -1;
        }
    }

    LinkedListNode trailingPointer = head; 
    while (leadingPointer.hasNext()) {
        leadingPointer = leadingPointer.getNext();
        trailingPointer = trailingPointer.getNext();
    }

    return trailingPointer.getData();
}
</code></pre>
    </div>