<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Design</strong></p>

<p>Rather than bury a magic filename, consider passing it in.</p>

<pre><code>//t_conf          *get_conf(void) {
//  ... 
//    if (ini_parse("settings.ini", handler, conf) &lt; 0)

t_conf *get_conf(const char *ini_file_name) {
  ... 
  if (ini_parse(ini_file_name, handler, conf) &lt; 0)
</code></pre>

<p>Maybe add before the <code>if()</code></p>

<pre><code>  if (ini_file_name == NULL) {
    ini_file_name = "settings.ini";
  }
</code></pre>

<p><strong>Devoid of overall comments</strong></p>

<p>Consider comments to at least convey the coding goals.</p>

<p><strong>Allocate to the size of the de-referenced object</strong></p>

<p>... rather than allocate to the size of the type - easier to code right, review and maintain.  Cast not needed.</p>

<pre><code>//if (!(conf = (t_conf*)malloc(sizeof(t_conf))))
//            return (NULL);
conf = malloc(sizeof *conf);
if (conf == NULL) {
  return NULL;
}

// like-wise
// memset(conf, '\0', sizeof(t_conf));
memset(conf, 0, sizeof *conf);
</code></pre>

<p><strong>Use auto formatting</strong></p>

<p>Life is too short for manual formatting. Find and use an auto formatter - customized as needed.</p>

<p><strong>Comments of typedefs not needed</strong></p>

<p>As is now, this code has comments that is not required to match what is truly in <code>"project.h"</code> and as time goes on, can diverge.  For code posting here, post a portion of <code>"project.h"</code> instead.</p>

<p><strong>Invalid code</strong></p>

<p><code>include "project.h"</code> should be <code>#include "project.h"</code></p>

<p><strong>Hiding objects here is bad</strong></p>

<p><code># define MATCH(n) (strcmp(name, n) == 0)</code> brings in <code>name</code>, but not obvious from the call <code>if (MATCH("ip"))</code>.</p>

<p>Alternative:</p>

<pre><code>static bool streq(const char *a, const char *b) {
  return strcmp(a,b) == 0;
}
...
if (streq(name, "ip"))
</code></pre>

<p><strong>Naked magic number</strong></p>

<p>Buried in code is </p>

<pre><code>conf-&gt;db-&gt;port = 3306;
</code></pre>

<p>Better to have</p>

<pre><code>// near top of code
#define PORT_DEFAULT 3306

// later on
conf-&gt;db-&gt;port = PORT_DEFAULT;
</code></pre>

<p><strong>Unneeded <code>if</code></strong></p>

<p>Just call <code>free()</code>.  <code>free(NULL)</code> is OK.</p>

<pre><code>//if (conf-&gt;db)
//            free(conf-&gt;db);
free(conf-&gt;db);
</code></pre>

<p>Like <code>free()</code>, I'd expect <code>clear_conf(NULL)</code> to not error</p>

<pre><code>void clear_conf(t_conf *conf) {
  if (conf) { // add  
</code></pre>

<p><strong>() not needed in <code>return</code> and others</strong></p>

<p>Many places</p>

<pre><code>// return (conf);
return conf;

// conf-&gt;db-&gt;host = (strdup(value));
conf-&gt;db-&gt;host = strdup(value);
</code></pre>

<p><strong>Non-standard C</strong></p>

<p>Note: <code>strdup()</code> is not standard, yet ubiquitous.</p>

<p><strong>Missing <code>#include &lt;&gt;</code></strong></p>

<p>Do not rely on "project.h" to provide them unless that is clearly a project rule.</p>

<p><strong><code>NULL</code> as <code>name</code></strong></p>

<p>Given the potential generic use of <code>handler</code>, I'd guard against <code>NULL</code>.</p>

<pre><code>// printf("Le nom du champ est %s, la valeur est %s (La section est %s)\n", name, value, section);
if (name === NULL || value == NULL || section == NULL) {
  tbd();
} else {
  printf("Le nom du champ est %s, la valeur est %s (La section est %s)\n", name, value, section);
}
</code></pre>

<p>Further I'd bracket such strings to help detect leading/trailing white spaces in them</p>

<pre><code>  printf("Le nom du champ est \"%s\", la valeur est \"%s\" (La section est \"%s\")\n",
      name, value, section);
</code></pre>

<p><strong>Lack of error checking</strong></p>

<pre><code>// what if `value` is "", "abc", "123xyz", "12345678901234567890", ...?
conf-&gt;server-&gt;port = atoi(value);

// what if allocation returns NULL? 
conf-&gt;server-&gt;ip = strdup(value);
</code></pre>

<p><strong>Respect presentation width</strong></p>

<pre><code>        printf("Le nom du champ est %s, la valeur est %s (La section est %s)\n", name, value, section)
;
</code></pre>

<p>vs.</p>

<pre><code>        printf("Le nom du champ est %s, la valeur est %s (La section est %s)\n",
            name, value, section);
</code></pre>

<p>Another reason for an auto formatter.</p>

<p><strong>Curious dual language</strong></p>

<p>I'd expect one.</p>

<pre><code>printf("Le nom du champ est %s, la valeur est %s (La section est %s)\n", ...
printf("Unable to load configuration\n");
</code></pre>

<p><strong>Conversion changes sign-ness</strong></p>

<pre><code>unsigned port;
...
conf-&gt;server-&gt;port = atoi(value);
</code></pre>

<p>Perhaps a helper function</p>

<pre><code>// return error status
bool to_unsigned(unsigned *u, const char *s) {
  if (s == NULL) {
    return true;
  }
  char *endptr;
  errno = 0;
  unsigned long = strtoul(s, &amp;endptr, 10); 
  if (errno || s == endptr || *endptr || value &gt; UINT_MAX) {
    return true;
  }

  if (u) {
    *u = (unsigned) value;
  }
  return false;
}

if (to_unsigned(&amp;conf-&gt;server-&gt;port, value)) {
  hanlde_oops();
}
</code></pre>
    </div>