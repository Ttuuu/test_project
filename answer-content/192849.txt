<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Object assign via <code>...</code> operator</h2>
<p>There is a sorter way to do the property order if you use the spread operator to assign properties.</p>
<pre><code>function propOrderFirst(key,objects){
     for(var i = 0; i &lt; objects.length; i++){
          objects[i] = {[key] : null, ...objects[i]};
     }
     return objects;
}
</code></pre>
<p>The problem is</p>
<pre><code>const objs = [{name: 'name1', phone: 'phone1', email: 'email1'},
        {name: 'name1', phone: 'phone1', email: 'email2'},
        {name: 'name1', phone: 'phone1', email: 'email3'}];

const obj1 = obj[0];

objs = propOrderFirst("email",objs);

if(obj1 !== objs[0]) { // true as you have created a new instance 
</code></pre>
<h2>Reorder in place</h2>
<p>But you do lose the object reference that may not be the best option. You can reorder the object properties and still keep the object reference by using <code>delete</code> to remove properties.</p>
<p>A little more complex as you need to delete all the properties you want to move the new property position in-front of</p>
<pre><code>function propOrderFirst(key, objects){
    const keys = Object.keys(objects[0]);  // assuming all objects have same properties
                                           // If not move this inside loop
    for (const object of objects) {
        const temp = {...object};     // get a copy of object
        for (const k of keys) { delete object[k] };  // remove all properties
        object[key] = temp[key];      // add the key you want first
        Object.assign(object, temp);  // assign the objects properties back
    }
    return objects;
 }
</code></pre>
<p>So now</p>
<pre><code>const objs = [{name: 'name1', phone: 'phone1', email: 'email1'},
        {name: 'name1', phone: 'phone1', email: 'email2'},
        {name: 'name1', phone: 'phone1', email: 'email3'}];

const obj1 = obj[0];

objs = propOrderFirst("email",objs);

if(obj1 === objs[0]) { // true as you have reordered in place }
</code></pre>
    </div>