<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, kudos; that looks really good. You've clearly put some effort in and it's nice to see docstrings, general style guide compliance (with a few exceptions I've commented on below) and a built-in demo run.</p>

<hr>

<p><code>Animal.__init__</code> could be much neater. Consider the following:</p>

<pre><code>def __init__(self, gender=None, strength=None):
    if gender is None:
        gender = random.choice('MF')
    self._gender = gender
    if strength is None:
        strength = random.randint(0, 9)
    self._strength = strength
</code></pre>

<p>Note that:</p>

<ul>
<li>I've altered some of the whitespace around e.g. <code>=</code> and <code>,</code>, per <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">the style guide</a>.</li>
<li>I'm <strong>explicitly</strong> testing for <code>None</code>, rather than truthiness - if you try to create an <code>Animal</code> with zero strength, you will see why this is generally a good idea!</li>
<li>By replacing the argument rather than assigning directly to the attribute, I've cut each case from four lines to three, and as each attribute is only assigned in once place it makes renaming etc. easier.</li>
</ul>

<p>As a further improvement, you could consider moving the choices for the attributes out of <code>__init__</code> and into <em>class attributes</em>, e.g.:</p>

<pre><code>GENDERS = 'MF'
STRENGTHS = range(0, 10)

 def __init__(self, gender=None, strength=None):
    if gender is None:
        gender = random.choice(self.GENDERS)
    self._gender = gender
    if strength is None:
        strength = random.choice(self.STRENGTHS)
    self._strength = strength   
</code></pre>

<p>This makes it really easy to have different <code>Animal</code> subclasses with different ranges for gender and strength.</p>

<p>Also, there's no point implementing <code>__init__</code> on the subclasses if <em>all</em> it does is pass the same parameters to <code>super</code>.</p>

<hr>

<p>Explicit <code>get_</code> and <code>set_</code> methods aren't very Pythonic. Instead, we tend to use <em>properties</em> (see e.g. <a href="https://stackoverflow.com/q/6618002/3001761">Python @property versus getters and setters</a> on SO). In your case, this would look like e.g.:</p>

<pre><code>@property
def gender(self):
    return self._gender
</code></pre>

<p>This looks a lot neater in use, as you don't need to <em>call</em> the property; you access it as a regular attribute:</p>

<pre><code>animal.gender
</code></pre>

<p>rather than:</p>

<pre><code>animal.get_gender()
</code></pre>

<hr>

<p>In the <code>River</code>, storing <code>self._length</code> as a separate attribute seems a bit odd - this is just <code>len(self._contents)</code>! You could also neaten up the logic for filling the river, again using class attributes, e.g.:</p>

<pre><code>CELLS = [Bear, Fish, lambda: None]

def __init__(self, length):
    self._contents = [random.choice(self.CELLS)() for _ in range(length)]
</code></pre>

<p>Here, note:</p>

<ul>
<li>The use of <code>_</code> by convention to indicate a value that won't actually be used for anything.</li>
<li>I have switched to a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, a more Pythonic way of building a list.</li>
<li>Because we are <em>calling</em> each object retrieved from <code>self.CELLS</code>, it is necessary to make the third option a callable that returns <code>None</code>, rather than <code>None</code> itself; I've used a <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda expression</a> to implement this.</li>
</ul>

<hr>

<p>Your description of <code>print_river</code> <em>"Print the river contents in human readable form"</em>, makes me think that it should be implemented as <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a>, instead. Note that this is easiest if you move the <code>Animal</code> logic up into those classes, e.g.:</p>

<pre><code>class Bear:

    def __str__(self):
        return "B{0.strength}{0.gender}".format(self)


class Fish:

    def __str__(self):
        return "F{0.strength}{0.gender}".format(self)
</code></pre>

<p>Note that use of <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a>, which is much neater than explicit <code>+</code> concatenation. Also, there seems to be a bit of repetition here; perhaps you could: </p>

<blockquote>
  <p>think of a way to refactor <code>Animal</code> and its subclasses such that you
  only need to define <code>__str__</code> on the base class?</p>
</blockquote>

<p><code>River.__str__</code> is now very simple:</p>

<pre><code>class River:

    def __str__(self):
        return '|'.join(['   ' if cell is None else str(cell)
                         for cell in self._contents])
</code></pre>

<p><a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> will insert the pipes between each cell (although not at the start and end). Note that this has separated the logic for displaying a single <code>Animal</code> from the logic for displaying a whole <code>River</code>, which is good OOP practice.</p>

<hr>

<p>Finally, there is a lot of logic packed into the <code>update_</code> methods. I would approach this as follows:</p>

<pre><code>def update(self):  # we know it's a river, that's the class!
    """Update the river, according to the following rules:

    ...

    """
    for index, cell in enumerate(self._contents):
        if cell is not None:  # don't bother updating None cells
            self._update_cell(cell, index)  # leading underscore means "private"

def _update_cell(self, cell, index):
    """Update a single non-empty cell."""
    move = random.randint(-1, 1)
    new_index = index + move
    if new_index in range(len(self._contents)):
        target_cell = self._contents[new_index]
        if target_cell is None:
            self._move(index, new_index)
        else:
            if (isinstance(cell, type(target_cell)) and 
                cell.gender != target_cell.gender):
                self._spawn(cell)
            elif isinstance(cell, type(target_cell)):
                self._fight(index, new_index)
            else:
                self._eat(index, new_index)

def _eat(self, index1, index2):
    """The Fish always gets eaten."""
    ...

def _fight(self, index1, index2):
    """The weaker Animal gets killed."""
    ...

def _move(self, old_index, new_index):
    """Move from old_index to new_index."""
    ...

def _spawn(self, cell):
    """Spawn a new instance of the class in a free cell."""
    ...
</code></pre>

<p>Note that rather than <code>type(self._contents[i]) == Bear</code> you should use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance(self._contents[i], Bear)</code></a>.</p>
    </div>