<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Compare Function Type</strong></p>

<p><code>list_find(), list_sort(), list_uquiue()</code> are compare functions of the below type - much like those used in <code>qsort()</code>.</p>

<pre><code>typedef int(*list_compare) (const void* a, const void* b);
</code></pre>

<p>I have found that a compare function is more useful with a context pointer.</p>

<p>To do so, change the function pointer signature and add a parameter to the 3 functions.</p>

<pre><code>typedef int(*list_compare) (void *context, const void* a, const void* b);
</code></pre>

<p><strong><code>const</code> <code>bool</code></strong></p>

<p><code>int list_empty(list_t* list);</code> is a good candidate for <code>bool</code> and <code>const</code>.  <code>const</code> useful in other to take advantage and indicate list invariability.</p>

<pre><code>// int list_empty(list_t* list);
bool list_empty(const list_t* list);

// size_t list_size(list_t* list);
size_t list_size(const list_t* list);

// node_t* list_first(list_t* list);
node_t* list_first(const list_t* list);
</code></pre>

<hr>

<p>Overall I liked this code and picked up some ideas.</p>

<p>The commnet <code>O(n) complexity worst case.</code> for slow functions is a god idea.</p>

<p>The one design criteria I did not favor was using and exposing the <code>node_t</code>. IMO, better to hide.</p>

<p>At a minimum, the name should be prefixed <code>list_</code> to restrict the name space impact.</p>
    </div>