<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>We have consistently misspelt <code>std::size_t</code>.</li>
<li><code>_NOEXCEPT</code> is a <a href="http://eel.is/c++draft/lex.name#3" rel="noreferrer">reserved identifier</a> and may even be expanded as a macro.</li>
<li>We should have an initializer-list constructor - as a guide, construction and assignment argument lists should parallel each other.</li>
<li><code>inline</code> is redundant and just adds clutter.</li>
<li><code>makeSpace()</code> has no return statement.</li>
<li>Logging output should go to <code>std::clog</code>, not <code>std::cout</code>.</li>
<li>Outside of the class definition, the return type of <code>insert()</code> and other functions must be written as <code>typename Vector&lt;T&gt;::iterator</code> rather than <code>Vector::iterator</code> (or use trailing return type syntax).</li>
<li>Don't assume that an input iterator has <code>operator-()</code> (but do provide optimised overloads where <code>std::distance()</code> is usable).</li>
<li>We can't use <code>T::operator=</code> to populate uninitialized memory with an object - we need to construct in-place, or use one of the <code>std::uninitialized_copy()</code> family of functions.</li>
<li>We don't need <code>moveFrom_()</code> if we implement move construction and assignment using <code>swap()</code>.</li>
<li>We can simplify copy-assign by implementing it in terms of move-assign (see below).</li>
<li>Relational operators could be simpler, if we used <code>std::lexicographical_compare()</code> instead of writing those loops.</li>
<li>The <code>contains()</code> member function is equivalent to calling <code>std::find()</code> and comparing the result against an end iterator.</li>
<li>There's too much whitespace for my taste - I'd certainly remove that around the <code>.</code> operator, and I suggest grouping related declarations on adjacent lines.  Spaces around <code>&lt;</code> and <code>&gt;</code> makes template arguments harder to distinguish from the <code>&lt;</code> and <code>&gt;</code> operators.</li>
<li>Inheriting from <code>std::iterator</code> is now deprecated.</li>
<li>We could use <code>std::reverse_iterator</code> to create a reverse iterator from a forward iterator.</li>
<li>We could use a plain pointer as forward iterator.</li>
</ol>

<hr>

<p>Regarding the iterators, I successfully replaced those four files with:</p>

<pre><code>using iterator = T*;
using const_iterator = const T*;
using reverse_iterator = std::reverse_iterator&lt;iterator&gt;;
using const_reverse_iterator = std::reverse_iterator&lt;const_iterator&gt;;
</code></pre>

<p>We need to also remove the <code>-1</code> from the reverse begin/end (and we can further simplify):</p>

<pre><code>iterator begin() noexcept { return m_data; }
iterator end() noexcept { return m_data + m_size; }

const_iterator begin() const noexcept { return m_data; }
const_iterator end() const noexcept { return m_data + m_size; }

reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }
reverse_iterator rend() noexcept { return reverse_iterator(begin()); }

const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }

const_iterator cbegin() const noexcept { return begin(); }
const_iterator cend() const noexcept { return end(); }

const_reverse_iterator crbegin() const noexcept { return rbegin(); }
const_reverse_iterator crend() const noexcept { return rend(); }
</code></pre>

<hr>

<p>Copy-assign implemented in terms of move-assign:</p>

<pre><code>template&lt;typename T&gt;
inline Vector&lt;T&gt; &amp;Vector&lt;T&gt;::operator=(const Vector&amp; rhs)
{
    return *this = Vector&lt;T&gt;{rhs};
}
</code></pre>

<p>We can't implement copy-construct the same way, because passing by value depends on copy-construction, giving us a chicken-and-egg issue!</p>
    </div>