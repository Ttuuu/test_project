<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In testing this code it turned out there is a chicken-and-egg situation, and more specific requirements. </p>

<p>In order to know which object (<code>Contact</code> or <code>Mandate</code>) to update the score for, the <code>Activity</code> callbacks need more 'knowledge':</p>

<p>eg. 2 cases:</p>

<p>1 <code>Contact A</code> has 0 activities -&gt;</p>

<p><em>if an activity is created, recalculate the score for A</em></p>

<p>2 <code>Contact A</code> has &gt; 0 activities -&gt;</p>

<p><em>if an activity is created, no need to recalculate the score</em></p>

<p><em>if an activity is deleted, recalculate the score only if activities = 0</em></p>

<p>The same is true for <code>Mandate</code>.</p>

<p>So, I ended up with a cleaner solution, with drier code:</p>

<p>Activity.rb</p>

<pre><code>  before_commit :mark_objects_for_rescoring, on: :create
  before_destroy :mark_objects_for_rescoring
  after_commit :rescore_objects, on: [:create, :destroy]

  after_initialize do
    self.contacts_to_recalculate = []
  end

  private

  def mark_objects_for_rescoring
    contacts.each do |contact|
      contacts_to_recalculate &lt;&lt; contact.id if contact.activities.count == 1
    end
    mandates.each do |mandate|
      mandates_to_recalculate &lt;&lt; mandate.id if mandate.activities.count == 1
    end
  end

  def rescore_objects
    contacts_to_recalculate.each do |id|
      contact = Contact.find(id)
      contact.calculate_score
      contact.save!
    end
    contacts_to_recalculate.each do |id|
      mandate = Contact.find(id)
      mandate.calculate_score
      mandate.save!
    end
  end
</code></pre>
    </div>