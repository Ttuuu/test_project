<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No time for a full-blown review, but glancing over the code, a few points stick out:</p>

<hr>

<h3>Enthusiastic Abstractions</h3>

<p>In a few places, you extracted a trivial one-liner function that is only used in a single place. IMO that's the wrong abstraction to use - for example:</p>

<pre><code>Private Function IsUserform(ByRef Obj As Object) As Boolean

    If TypeOf Obj Is MSForms.UserForm Then
      IsUserform = True
    End If

End Function
</code></pre>

<p>That could have been written as <code>IsUserForm = TypeOf obj Is MSForms.UserForm</code>, an expression that is perfectly fine to have inline IMO:</p>

<pre><code>    Case Else

        If TypeOf ControlOrForm Is MSForms.UserForm Then
            Set Form = ControlOrForm
        End If
</code></pre>

<p>That <code>If</code> block should really have an <code>Else</code> clause that throws an error to tell the calling code "I'm afraid I can't let you do that" or something. It's currently silently failing, and that's never good.</p>

<p><code>ArrayCount</code> is also probably better off as a local variable if it's only used in one place - otherwise it should be in some utilities module, and I'd call it <code>ArrayLength</code>, more in-line with standard terminology.</p>

<pre><code>Private Function Dict(ParamArray KeyValue() As Variant) As Scripting.Dictionary

    'CHECK IF THERE IS EVEN PARAMETERS
    Dim arrayCount As Long
    arrayCount = UBound(KeyValue) - LBound(KeyValue) + 1

    If Not arrayCount Mod 2 = 0 Then
        Debug.Print "Function Dict() requires an even amount of key value arguments." _
        &amp; " Only provided " &amp; arrayCount
        Exit Function
    End If
</code></pre>

<p>There's no need to invoke the function twice, even less so just for a <code>Debug.Print</code> statement. That said, this should be a serious bug, and I would expect it to throw a run-time error, not just output to the <code>Debug</code> pane.</p>

<pre><code>    If arrayCount Mod 2 &lt;&gt; 0 Then
        Err.Raise 5, TypeName(Me), "Invalid parameters: expecting key/value pairs, but received an odd number of arguments."
    End If
</code></pre>

<p>I'd spell it <code>ToDictionary</code> though, and the <code>KeyValue()</code> argument would probably be clearer as <code>keyValuePairs()</code> - I like my arrays and collections pluralized.</p>

<hr>

<h3>Stringly-Typed Events</h3>

<p>The one single thing that's making the solution much flakier than it needs to be, is the fact that the event names are all hard-coded string literals, everywhere.</p>

<p>What's missing is a <code>Public Enum</code>, somewhere:</p>

<pre><code>Public Enum EmittedEvent
    Click
    DoubleClick
    MouseMove
    MouseOut
    MouseOver
    MouseDown
    MouseUp
    KeyUp
    KeyDown
    Focus
    Blur
End Enum
</code></pre>

<p>Then you get auto-completion at the call sites, <code>Option Explicit</code> is protecting you from a typo, and you can refactor/rename them at will without breaking everything:</p>

<pre><code>Public Sub EmitEvent(ByRef Control As Object, ByVal EventType As EmittedEvent, ByRef EventParameters As Scripting.Dictionary)
</code></pre>
    </div>