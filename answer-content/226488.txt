<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Access elements via ID</h3>

<p>You can get access to elements directly via their ID, if you ensure that each elements <code>id</code> and or <code>name</code> is unique withing the page and JavaScripts global scope.</p>

<pre><code>var x = parseFloat(document.getElementById("Lang_from").value);
</code></pre>

<p>becomes</p>

<pre><code>var x = parseFloat(Lang_from.value);
</code></pre>

<p>In the example at the bottom I have removed all the names from the HTML. You have not indicated that this is a submit-able form and thus you can do without the extra markup.</p>

<p><strong>Note</strong> that forms do provide additional information for clients with special needs. For content that faces the world (public) always consider <a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility" rel="nofollow noreferrer">Accessibility</a>. Dealing with font end interaction (not using forms) you should be familiar with <a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/WAI-ARIA_basics" rel="nofollow noreferrer">WAI-ARIA</a> and how it makes content meaningful and accessible to everyone .</p>

<h3>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" rel="nofollow noreferrer"><code>Number</code></a> rather than <code>parseFloat</code></h3>

<p>Rather than use <code>parseFloat</code> use <code>Number</code> to convert a string number to a Number type</p>

<pre><code>var x = parseFloat(Lang_from.value);
</code></pre>

<p>becomes</p>

<pre><code>var x = Number(Lang_from.value);
</code></pre>

<p>or you can coerce a string representing a number using an operator. Commonly <code>+</code> is used</p>

<pre><code>var x = + Lang_from.value;
</code></pre>

<p>JavaScripts has automatic <a href="https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion" rel="nofollow noreferrer">type coercion</a> and will force the string to a number, Note that + will not work as  <code>var x = "10" + Lang_from.value;</code> as the type is set by "10" and <code>+</code> can operate on strings (concats)</p>

<h3>Define appropriate variable types</h3>

<p>The variables you use are never modified. JS has several variable types. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer"><code>var</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a>. Get in a habit of using the most appropriate type, for variables that do not change or should not change use <code>const</code></p>

<pre><code>const x = +Lang_from.value;
</code></pre>

<h3>Naming is an important programming skill to master</h3>

<p>Always pay special care to the names you use.</p>

<p>Some of your variable names have absolutely no relationship to their content (eg <code>x</code>, <code>y</code>, and maybe <code>f</code>) </p>

<p>Using abbreviations is OK and can reduce clutter, using the first letter of each word in the ID is OK (BUT DEFINING NAME and USING NAME must be no more than a page of apart, as the need to hunt for meaning is a distraction that aids bugs getting in)</p>

<pre><code>const lf = +Lang_from.value;
const lt = +Lang_to.value;
const q =  +quantity.value;
const s =  +subject.value;
const ft = +file_type.value;
</code></pre>

<h3>Avoid intermediates if possible</h3>

<p>Rather than the many names, calculate the <code>total</code> as you access the data.</p>

<pre><code>var total = (+Lang_from.value) + (+Lang_to.value); // The extra + to coerce to number
total *= quantity.value;  // *= same as total = total * quantity.value;
                          // The extra + not ended if the operation on the value is
                          // not +
total += +subject.value;
total += +file_type.value;
</code></pre>

<h3>NO! don't do this... <code>&lt;button onclick="functionName()"&gt;</code></h3>

<p>Avoid putting code within the markup. The event listener for <code>calculate</code> should be added via JavaScript when the page has loaded. Use <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload" rel="nofollow noreferrer"><code>"load"</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event" rel="nofollow noreferrer"><code>"DOMContentLoaded"</code></a> events </p>

<pre><code>addEventListener("load", function() {  // waits for the page to load
     calculate.addEventListener("click", calculateTotal);
});

// or using arrow function and a slightly earlier event that fires when 
// all the HTML content has loaded and been parsed (image and the like may not be ready)
addEventListener("DOMContentLoaded", () =&gt; {  // waits for the page to load
     calculate.addEventListener("click", calculateTotal);
});


// NOTE that the element id is calculate which conflicted with the JavaScript function 
// name calculate. I renamed the function to calculateTotal ( which I would have done
// even if there was no name conflict)
</code></pre>

<h3>Loose ends are bad practice</h3>

<p>Keep the code clean and do not include code that has no purpose. You have 5 variables that get the selections yet you don't use them. They should not be in the function. If you put them their because you intend to use them at another time, finish the code or add a comment with that code eg <code>/* Todo: Show selection names */</code>  else the code is considered incomplete (easy to forget or worse)</p>

<h3>Use appropriate properties</h3>

<p>When adding content to an element and it is just text (no HTML content) use the node property <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent" rel="nofollow noreferrer"><code>Node.textContent</code></a> to set the text. (Elements inherit properties from Node so can be used on most elements)</p>

<h2>Example</h2>

<h3>Basic Markup only</h3>

<p>I have removed all irrelevant information from the Markup, (forms, styling wrappers, name/id duplicates, property duplicates, class name)</p>

<p>I removed the references to the CSS styles. Looking good is important, but start at the core and work up, don't start with looking good, that is why we have CSS, to seperate the two.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";
addEventListener("DOMContentLoaded", () =&gt; {
  calculate.addEventListener("click", calculateTotal);
});

function calculateTotal() {
  var total = (+Lang_from.value) + (+Lang_to.value); 
  total *= quantity.value; 
  total += (+subject.value) + (+file_type.value);
  total_price.textContent = "$" + total.toFixed(2);
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;h4&gt;From&lt;/h4&gt;
&lt;select id="Lang_from"&gt;
  &lt;option value="0.025"&gt;English&lt;/option&gt;
  &lt;option&gt;German&lt;/option&gt;
&lt;/select&gt;
&lt;h4&gt;To&lt;/h4&gt;
&lt;select id="Lang_to"&gt;
  &lt;option value="0.025"&gt;German&lt;/option&gt;
  &lt;option&gt;English&lt;/option&gt;
&lt;/select&gt;
&lt;h4&gt;File type&lt;/h4&gt;
&lt;select id="file_type"&gt;
  &lt;option value="0"&gt;TXT&lt;/option&gt;
  &lt;option value="3"&gt;MS word&lt;/option&gt;
  &lt;option value="5"&gt;PDF (+5$)&lt;/option&gt;
  &lt;option value="10"&gt;Hand Writing&lt;/option&gt;
&lt;/select&gt;
&lt;h4&gt;Subject&lt;/h4&gt;
&lt;select id="subject"&gt;
  &lt;option value="0"&gt;General&lt;/option&gt;
  &lt;option value="10"&gt;Technical / IT&lt;/option&gt;
  &lt;option value="15"&gt;Medical&lt;/option&gt;
  &lt;option value="5"&gt;Press&lt;/option&gt;
&lt;/select&gt;
&lt;h4&gt;Word count&lt;/h4&gt;
&lt;input type="number" id="quantity" min="500" value="1000"&gt;
&lt;button id="calculate"&gt;Calculate&lt;/button&gt;
&lt;h4&gt;Total price&lt;/h4&gt;
&lt;div id="total_price"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<h3>Beginners note</h3>

<p>You will notice the string <code>"use strict";</code> at the top of the JavaScript, it is a directive that forces JavaScript to run in <a href="https://developer.mozilla.org/en-US/docs/Glossary/strict_mode" rel="nofollow noreferrer">strict mode</a>. </p>

<p>The name may suggest this is something for experienced coders, quite the contrary as experienced JS coders seldom make the errors this will trap. </p>

<p>Experienced JS coders always use strict mode because its faster and because everyone make mistakes.</p>

<p>Ergo: Always run your javascript in strict mode using the directive "use strict";</p>

<h3>This example has no semantic meaning to some</h3>

<p>I have not used ARIA to add semantic meaning to the content as I do not think its applicable in this case and would make for a way too long already too long answer.</p>

<h3>Slight change to result</h3>

<p>I noted that the <code>quantity</code> input is unconstrained in its precision (Allows fractions). When you output values, especially monetary values, be careful to include the correct rounding and precision. A money value ideally always starts with the currency type (I used $ and the value is written with full precision Dollars.Cents eg $10.00. </p>

<p>JavaScripts Number (floating point double) is only an approximation of numbers, in a few calculation a number can easily gain a rounding error and just display the value raw will end you with displayed values like <code>10.00000000000003</code> or <code>3e-17</code> both not good things to show when it involves money,</p>

<h2>References</h2>

<p>The site you used as a reference has a bad wrap, being incomplete and out of date, Though it has been years since I have had a good look, so if this remains true I am unsure.</p>

<p>I better reference site is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow noreferrer">MDN JavaScript</a> and the main landing <a href="https://developer.mozilla.org/en-US/" rel="nofollow noreferrer">MDN</a> it has a mostly complete reference of Web technologies, plenty of learning resources (tutorials, examples and the like), and if you need to get to the definitive resource they do provide links to the all the standards documentation (Very dry and hard to read resource of everything) that is applicable.</p>
    </div>