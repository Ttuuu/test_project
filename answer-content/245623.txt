<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As said, the <code>Time</code> pattern never made me fall in love with it so I started to experiment. However, I am an outsider in this. My experience is 44 years of software design but I am more or less an autodidact, not been to university. Big chance a lot of people are now cringing behind their email with this solution :-)</p>
<p>The pattern to put all variable state in a <em>trace</em> sig (Crossing here) seems to work very well though. One of the reasons I love it is that it is easy to add 'debug' variables that trace progress. When things don't work out as you think (which is 98% of the time) it is easy to store some more information.</p>
<p>I got the idea when I had been writing some models where I desperately tried to control the variables with quantifications, which usually created dead models (no instance). Like:</p>
<pre><code>    all c : Crossing-last, c': c.next {
        some carry : Object {
            ...
        }
    }
</code></pre>
<p>I had one model and then Daniel told me to remove the unnecessary quantifications. At first I had no idea what he was talking about and then it hit me that the complete state space is reachable the trace signature. So you do not need quantifications, the state space is out there, you only need to constrain it to only visit the states you want it to visit. That was a HUGE insight for me, things really fell in place then. Now it seems so rather obvious :-(</p>
<p>With this approach, you design a <code>sig</code> that contains all the state variables and then have predicates that let it transition to the next state properly. (In this case, the single transition predicate is expanded in the trace predicate for conciseness.) This is usually quite straightforward and maps well to an implementation. The transition predicates are then the <em>events</em>, which also maps well to implementations where events are usually methods.</p>
<p>The disadvantage is that it does not provide very nice graphs, all data is mixed up in one sig. This was one of the reasons I added the table view. And I expect it is the reason a lot of people don't like it, a lot of Alloy users put a lot of weight on good looking visualizations :-) I like it but find that most of the problems I use Alloy with are not that suitable for nice visualizations.</p>
<blockquote>
<p>I don’t know if it matters, but this solution doesn’t have a “lock” for when the solution is complete, so on a 9th step the farmer takes the grain back.</p>
</blockquote>
<p>I did't care but it should be a nice simple exercise for the reader to lock it on the <code>far</code> side. :-) You could also lock the <em>last</em> Crossing to be the solution. Just replace:</p>
<pre><code>some c : Crossing | c.far = Object
</code></pre>
<p>with:</p>
<pre><code>last.far = Object
</code></pre>
<blockquote>
<p>Is there any guidance on when to use the singleton approach instead?</p>
</blockquote>
<p>Well, I would not call it a singleton approach but further I am also still struggling to find the best patterns. It is a testimony to Alloy that there are so many good ways to do something, it really is an incredible environment that deserves a lot more attention.</p>
<p>Peter Kriens @pkriens
</p>
    </div>