<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, kudo's to you for trying to use vanilla javascript. Great choice.</p>
<br>
<hr>
<br>
<h1>ü§î The Question</h1>
<p>Let us start with your question:</p>
<blockquote>
<p>[Is this code] an optimal way to preload images in pure JavaScript?</p>
</blockquote>
<p>Sorry, but that is very subjective so I cannot answer that. I am assuming good will, and thus will rather answer the following question I inferred from your original question:</p>
<blockquote>
<p>Am I making good use of common best practices?</p>
</blockquote>
<p>Now that is a question I can answer, and the simple answer is <strong>no</strong>. Sorry :)</p>
<p>Ofcourse, I will not leave you an answer without explanation.</p>
<br>
<hr>
<br>
<h1>üîÅ Consistency and Deliberateness</h1>
<p>Firstly, the biggest improvement one can make in their life as a programmer would be consistency. Do not listen to the people who argue about single vs double quotes, or tabs vs spaces. As a software engineer myself, I can wholeheartedly say that all that matters is when you make a choice, you stick to it (at least within the project -- you are allowed to change your mind). Most people do not mind style (it often is enforced to a company standard anyway), but whenever you use any function or syntax, a reader would assume you did so deliberately. Why did you choose both <code>var function</code> and <code>x =&gt; y</code>?</p>
<p>I have to admit that javascript tricked us by allowing <em>three</em> ways of creating functions, but that does not mean you should use them all together. Let us look at the ways and their reasons:</p>
<h3><code>function name (args) { /*block*/ }</code></h3>
<p>This is the function declaration statement. This just means that you declare a variable called <code>name</code> and assign the function to it. This was made primarily to support an <em>imperative sequence of steps</em>. It is my personal opinion that it should have been named <code>procedure</code>, because that is what it is.</p>
<h3><code>var name = function (args) { /* block */ }</code></h3>
<p>This is actually what happens when you declare a function, so there is no difference between the first type of function -- except for the more letters so I see no reason to use this notation. The only difference that could be made is through the <em>storage modifier</em> (i.e. <code>var</code> in this case), which I will tell you about a bit later.</p>
<h3><code>var name = args =&gt; { /*block*/ }</code></h3>
<p>This is javascript's <em>lambda</em> syntax. It allows for a very interesting way to write programs, but only if you stop appending blocks to it:</p>
<pre class="lang-js prettyprint-override"><code>var add = (x, y) {
  return x + y;
};
// is actually the same as
var add = (x, y) =&gt; x + y;
</code></pre>
<p>The <em>arrow function</em> (<code>x =&gt; y</code>) is a function that exists of only an expression, with an implied <code>return</code>. But if you use a block, you just turned it into a procedure again which negates the usefulness of the lambda/arrow notation. It can save you a lot of keystrokes, and, if I can add my opinion, looks much more clean.</p>
<p>Taking this into consideration, your code could look like this:</p>
<pre class="lang-js prettyprint-override"><code>function preload_imgs (src_list, callback) {
    let loaded = 0;
    src_list.forEach(function(src) {
        img = new Image();
        img.onload = function() {
            if (++loaded == src_list.length &amp;&amp; callback) {
                callback();
            }
        };
        img.onerror = function(err) {
            console.log(err);
        };
        img.src = src;
    });
};
</code></pre>
<br>
<hr>
<br>
<h1>üì¶ Storage and Mutability</h1>
<p>Remember the <em>storage modifiers</em> I just talked about? Javascript also has three ways of declaring variables. What a nightmare, right? Well, there is some use to the differences -- have a look:</p>
<h3><code>var x = ...</code></h3>
<p>In the beginning there was only <code>var</code>. It is short for <em>variable</em>, and thus should just declare a variable, right? Nope, javascript is weird. I could go on about why it is the weirdest feature ever, but <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer">here is the link about <code>var</code> if you are interested</a>. The main takeaway is that this notation does a lot of stuff behind the scenes, <a href="https://www.pluralsight.com/guides/javascript-callbacks-variable-scope-problem" rel="nofollow noreferrer">making it a common source of bugs</a>. My opinion: don't use it.</p>
<h3><code>let x = ...</code></h3>
<p>Everyone who has ever used <code>var</code> probably meant to use <code>let</code>. It does not do any fancy stuff, it creates a variable and assigns a value, except that it is <em>block scoped</em>. This variable is only ever accessible within the confines of the closest block, i.e. anything within <code>{</code> curly brackets <code>}</code>. You use only <code>let</code>, so I assume you know of this advantage but I wanted to clarify it nonetheless.</p>
<h3><code>const x = ...</code></h3>
<p>Again, a very autological name: <code>const</code> creates a <em>constant</em>. A constant can only be declared once, and never overwritten. This might sound like a useless trait, but it is actually really important. <a href="https://www.geeksforgeeks.org/10-famous-bugs-in-the-computer-science-world/" rel="nofollow noreferrer">One of the most famous bugs in the world was caused by mutability</a> (no. 4 on the list, probably more) and cost a whopping $60 million. I am not saying that using <code>const</code> will always save you millions of dollars, but it disallows any overwriting of the value, meaning:</p>
<ul>
<li>you cannot accidentally overwrite your or anyone else's functions and variables.</li>
<li>you can guarantee that its value will never change, so you can refer to it anywhere safely -- even in a <code>for</code> within a <code>for</code> within a <code>for</code>.</li>
<li>AT&amp;T would have lost $60m less.</li>
</ul>
<p>Coming back to deliberateness: you declare functions using <code>let</code>, implying you are going to change them, but you are not. I suggest using <code>const</code> to more clearly signal your intentions:</p>
<pre class="lang-js prettyprint-override"><code>const preload_imgs = function (src_list, callback) {
    let loaded = 0;
    src_list.forEach(function(src) {
        const img = new Image();
        img.onload = function() {
            if (++loaded == src_list.length &amp;&amp; callback) {
                callback();
            }
        };
        img.onerror = function(err) {
            console.log(err);
        };
        img.src = src;
    });
};
</code></pre>
<br>
<hr>
<br>
<h1>ü§ù I <em>promise</em> to help</h1>
<p>Talking about common best practises, there is one thing many javascript developers will run into. That thing is the internet. A great many developers have already walked this path before you, so you bet the industry has some handy stuff up its sleeves to help you become a better programmer.</p>
<p>Javascript has a fool-proof way of handling <em>asynchronous</em> tasks, such as preloading an image. For exactly this reason, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow noreferrer">promises</a> were implemented. A Promise is a wrapper around an asynchronous task, so we can work with it synchronously. Without going into a lot of detail, let me summarise the most important parts of a Promise:</p>
<ul>
<li>A promise allows for attaching "callbacks" for when the wrapped task completes</li>
</ul>
<pre class="lang-js prettyprint-override"><code>const response = new Promise(request);
response.then(doStuff);
</code></pre>
<ul>
<li>A promise allows for attaching "callbacks" for when the wrapped task fails</li>
</ul>
<pre class="lang-js prettyprint-override"><code>const response = new Promise(request);
response.catch(handleError);
</code></pre>
<p>Can you see a similarity? Creating an Image and attaching <code>onload</code>/<code>onerror</code> callbacks sounds a lot like creating a Promise! Applying this knowledge to your example gives us the following code:</p>
<pre class="lang-js prettyprint-override"><code>// Your "preload" function goes as follows
(src) =&gt; {
    img = new Image();
    img.onload = () =&gt; {
        if (++loaded == src_list.length &amp;&amp; callback) {
            callback();
        }
    };
    img.onerror = (err) =&gt; {
        console.log(err);
    };
    img.src = src;
}
// Let's update it
const preload = src =&gt; new Promise(function(resolve, reject) {
  const img = new Image();
  img.onload = function() {
    // onload is called with an event, not the image so we
    // want to specifically resolve with img.
    resolve(img);
  }
  img.onerror = reject;
  // onerror is called with the error, so we can directly assign "reject" to it.
  img.src = src;
});
</code></pre>
<p>You might notice the lack of <a href="https://en.wikipedia.org/wiki/Free_variables_and_bound_variables" rel="nofollow noreferrer">"free variables"</a> (foreign variables that do not contribute to the function itself). We do not use <code>loaded</code> or <code>src_list</code> because those alter state / are mutable and are a perfect souce for the $60m bug (actually, this is probably the exact type of function that caused the race condition in their software).</p>
<p>We have solved the preload function in a very clean way:</p>
<pre class="lang-js prettyprint-override"><code>const preload = src =&gt; new Promise(function(resolve, reject) {
  const img = new Image();
  img.onload = function() {
    resolve(img);
  }
  img.onerror = reject;
  img.src = src;
});

preload("https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/thumbs-up.png");
  .then(img =&gt; console.log("Preloaded", img))
  .catch(err =&gt; console.error("Failed", err));
</code></pre>
<p>BAM! You now have a function that preloads an image, and allows for individual succes and error handling. All we have to do now, is to apply this function to a list of <code>src</code>s.</p>
<br>
<hr>
<br>
<h1>‚û∞ Going in loops</h1>
<p>You might have thought there were too many ways to declare functions or variables, but wait till you hear in how many ways you can loop over things in javascript!</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration" rel="nofollow noreferrer">There is <code>for (let i = 0...)</code>, <code>for ... in</code>, <code>for ... of</code>, <code>while</code>, <code>do ... while</code></a>, and we have not even touched on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer">higher order array traversal functions</a>. I am just going to say it: you never really need a <code>for</code> loop. You can solve any array problem with array functions.</p>
<blockquote>
<p>Side note: the <code>Array.forEach</code> function you used is a weird function. It is just a slower version of a <code>for</code> loop with different notation, and I just said you never <em>need</em> a <code>for</code> loop. Either use <code>for (const src of src_list)</code> or use <code>map</code> or <code>filter</code>, but never <code>forEach</code> (this is a guideline, if it prohibits you from being productive then go ahead and do it).</p>
</blockquote>
<p>For example, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer">there is the <code>Array.map</code> function</a>. This function takes a transformer, which goes over every element of the array, and transforms that element yielding a new array. That might sound weird so here is an example:</p>
<pre class="lang-js prettyprint-override"><code>const numbers = [1, 2, 3];
const double = x =&gt; x * 2;
const doubledNumbers = numbers.map(double);
// doubledNumbers: [2, 4, 6]
</code></pre>
<p>Hmm, taking an array of values and applying a function to every value sounds a lot like what you are trying to do:</p>
<pre class="lang-js prettyprint-override"><code>// Your old code
src_list.forEach((src) =&gt; {
  img = new Image();
  img.onload = () =&gt; {
    if (++loaded == src_list.length &amp;&amp; callback) {
      callback();
    }
  };
  img.onerror = (err) =&gt; {
    console.log(err);
  };
  img.src = src;
});

// Using our "preload" function from before
const requests = src_list.map(preload);
// requests: [Promise&lt;Image&gt;, Promise&lt;Image&gt;, Promise&lt;Image&gt;, ...]
</code></pre>
<p><em>Whoaaaa, <strong>one</strong> line!</em> But we have not fully refactored yet, because we now have a list of promises that can just resolve at any time and in no particular order. You seem to have understood this problem, but you solved it in a very unsafe way.</p>
<pre class="lang-js prettyprint-override"><code>let loaded = 0;
//...
img.onload = () =&gt; {
    if (++loaded == src_list.length &amp;&amp; callback) { /* ... */ }
    //...
}
</code></pre>
<p>You keep track of the amount of loaded images in the callback function that triggers when any image is loaded. Pretty clever, but I would bet my house that keeping track of such things in this way will cause bugs. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" rel="nofollow noreferrer">If you google "wait for all promises javascript"</a>, you learn of a <em>built in</em> function that takes care of all of this for you! <code>Promise.all</code> takes a list of promises, and returns a promise, that rejects when any promise in that list rejects, or resolves when all promises in the list have resolved. That is exactly what you are trying to achieve:</p>
<pre class="lang-js prettyprint-override"><code>//using the "requests" list we created a couple examples back
const done = Promise.all(requests);
done
  .then(images =&gt; console.log("Preloaded all", images))
  .catch(err =&gt; console.error("Failed", err));
// &gt; Preloaded all [Image, Image, Image, ...]
</code></pre>
<br>
<hr>
<br>
<h1>‚åõ Conclusion</h1>
<p>Hopefully you now have a better understanding of javascript, and the lovely built-in functions that make these things almost as easy as jquery, if not more. Maybe you even learned a lot of things along the way, maybe you were sighing and moaning because you knew most of this stuff -- as long as you learned anything I consider it a success.</p>
<p>To summarise:</p>
<ul>
<li>Use any kind of function notation but be consistent and deliberate.</li>
<li>Use <code>const</code> for constants and <code>let</code> for variables (I never even use <code>let</code> at all).</li>
<li>Use <code>Promise</code>s to wrap asynchronous tasks to allow for really useful manipulation functions and callbacks.</li>
<li>Familiarise yourself with higher-order functions so you never have to use loops again.</li>
</ul>
<p>And voila, the refactored code:</p>
<pre class="lang-js prettyprint-override"><code>const preload = src =&gt; new Promise(function(resolve, reject) {
  const img = new Image();
  img.onload = function() {
    resolve(img);
  }
  img.onerror = reject;
  img.src = src;
});
const preloadAll = sources =&gt;
  Promise.all(
    sources.map(
      preload));

const sources = [
  'https://i.picsum.photos/id/1000/5626/3635.jpg',
  'https://i.picsum.photos/id/10/2500/1667.jpg',
  'https://homepages.cae.wisc.edu/~ece533/images/cat.png',
  'https://homepages.cae.wisc.edu/~ece533/images/airplane.png'];

preloadAll(sources)
  .then(images =&gt; console.log('Preloaded all', images))
  .catch(err =&gt; console.error('Failed', err));
</code></pre>
<p>Preload to your hearts desire.</p>
    </div>