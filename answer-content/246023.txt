<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a common problem. Sometimes it's tricky to generalise a process even when its iterative in nature.</p>
<p>By keeping track of both:</p>
<ul>
<li>the location of the user's cursor (<code>cursor_position</code>), and</li>
<li>an <strong>iterable</strong> data structure storing which characters are shown (<code>pinNumbers</code>),</li>
</ul>
<p>it is possible to implement this behaviour without so much repeated code. This gave the desired behaviour after some thorough testing (in my imagination).</p>
<pre class="lang-cs prettyprint-override"><code>public string PinCode { get; set; } = string.Empty;

private int cursor_position = -1;
private string[] pinNumbers = new string[] {"_", "_", "_", "_"};

    private async Task&lt;bool&gt; SelectedButton(Button button)
    {
        //If button is a number then
        if (button.Text != null)
        {
            if ( cursor_position &lt; 3 )
            {
                PinCode = PinCode + button.Text;

                if ( cursor_position &gt; 0 )
                {
                    pinNumbers[cursor_position] = "*";
                }

                cursor_position += 1;
                pinNumbers[cursor_position] = button.Text;
            }
        } else { // apparently backspace?
            if ( cursor_position &gt;= 0 )
            {
                PinCode = PinCode.Remove(PinCode.Length - 1);
                pin_numbers[cursor_position] = "_";
                cursor_position -= 1;
            }
        }

        pinNumberOne   = pinNumbers[0]; // update actual shown values with array
        pinNumberTwo   = pinNumbers[1]; // you could probably take out the "pinNumberX" middleman
        pinNumberThree = pinNumbers[2]; // but I dont know what relation these variables have to
        pinNumberFour  = pinNumbers[3]; // the rest of your code

        return true;
    }
</code></pre>
<p>Depending on how you are assigning values to the actual rendered characters you may be able to remove the first four of the last five lines. You likely could just refer the rendered components directly to the values in the <code>pinNumbers</code> array.</p>
    </div>