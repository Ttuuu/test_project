<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm trying to figure out how my code could be improved. I solved a HackerRank problem from the Cracking the Coding Interview section, and am thinking that it should be able to be solved a simpler than what I did.</p>
</blockquote>

<p>Probably. But these hacker problems are usually very specific. You can probably google a perfect solution in 10 minutes.</p>

<blockquote>
  <p>What is a better, more efficient way of solving this problem?</p>
</blockquote>

<p>Create a count of the number of each letter from both strings. To be anagrams these counts must be the same. So look across the counts and sum the differences.</p>

<blockquote>
  <p>I am using C++, and since strings are immutable, </p>
</blockquote>

<p>No they are not. Strings are perfectly mutable.</p>

<blockquote>
  <p>what I decided to do was to create two int arrays (vectors, actually) that hold the ASCII value of the chars in each string. Then I would sort the vectors. Then I would iterate through the arrays together, counting the number of elements that don't exist in the other.</p>
</blockquote>

<p>The complexity of this is (ignoring the copy to a vector)</p>

<pre><code>O(n1.log(n1))      // Sort first string
O(n2.log(n2))      // Sort second string
O(max(n1,n2))      // Loop Over counting.
</code></pre>

<p>That seems to work. I like getting the count of each letter better. The difference in the counts is the number of letters to be deleted. </p>

<pre><code>O(n1)             // Count each character into an array.
O(n2)             // Count each character into an array.
O(1)              // count the diffs.
                  // There is a loop over 255 characters (26 if you only count lower case letters).
                  // This is constant and not dependant on the size of
                  // the input and thus is `1`
</code></pre>

<h2>Code Review.</h2>

<h3>Using Namespace</h3>

<p>Please stop doing this.</p>

<pre><code>using namespace std;
</code></pre>

<p>Its a bad habit that will cause you grief one day. See every other C++ code review for a good explanation.</p>

<h2>Pass by const reference</h2>

<p>You are passing the parameters by value. This will cause both the vectors to be copied.</p>

<pre><code>int calcDeletions(vector&lt;int&gt; a, vector&lt;int&gt; b) {
</code></pre>

<p>Since you don't modify the values it can be made simpler by passing a const reference of each parameter. Thus having no copy.</p>

<pre><code>int calcDeletions(vector&lt;int&gt; const&amp; a, vector&lt;int&gt; const&amp; b) {
</code></pre>

<h3>Prefer Pre Increment</h3>

<pre><code>            deletions++;
            ai++;
</code></pre>

<p>Yes. Yes. It makes no difference for integers. But it does no harm to use pre-increment on integers either. But again it's one of those habits you should get into. There are situations where it does make a difference so it's best to pre-increment and then it will always be correct (even if you change the types of your objects).</p>

<h3>Prefer <code>operator[]</code> over <code>at()</code></h3>

<p>The difference between the two is that <code>at()</code> performs bounds checking.</p>

<pre><code>    for (int i = 0; i &lt; a.length(); i++) {
        aInt.push_back((int)a.at(i));
    }
</code></pre>

<p>In this context you are guaranteed that there is no out of bounds access as you are already checking that <code>i</code> is smaller than <code>a.length()</code>. Thus you are effectively doing the check twice.</p>

<h3>Don't use C style casts.</h3>

<p>C style casts are hard to spot.</p>

<pre><code> (int)a.at(i)
 ^^^^^
</code></pre>

<p>They are also extremely dangerous (they basically tell the compiler to <em>shut up and do what you're told as I the programmer am god and know better than you the simple compiler</em>). In reality this is usually wrong: the compiler always knows better than you and telling it to shut up is usually hiding an error message.</p>

<p>As a result, C++ has its own casts. There are actually four of them:</p>

<pre><code>static_cast&lt;&gt;()
const_cast&lt;&gt;()
reinterpret_cast&lt;&gt;()
dynamic_cast&lt;&gt;()
</code></pre>

<p>Your above cast is actually best done by a <code>static_cast&lt;&gt;()</code></p>

<pre><code>static_cast&lt;int&gt;(a.at(i));
</code></pre>

<p><strike><strong>BUT</strong> There is no actual need to cast a char to an integer. This will happen automatically (as a char is an integer type the conversion is automatic) with no loss in precision.</strike></p>

<h3>Is there a need to put the largest first.</h3>

<p>I don't see you taking advantage of this in the function above!</p>

<pre><code>    // call calcDeletions function with the longer vector passed as first arg
    if (aInt.size() &gt; bInt.size()) {
        return calcDeletions(aInt, bInt);
    }
    else {
        return calcDeletions(bInt, aInt);
    }
</code></pre>

<p>Looking at the Cool Shark implementation you provided it still has a couple of issues.</p>
    </div>