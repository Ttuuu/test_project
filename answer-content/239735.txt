<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's pretty readable, and all comments are pretty minor ones.</p>

<p>You can probably squeeze out a little performance increase, but not much. One thing you could do is to skip setting variables like <code>n = len(prefix)</code> (you also don't use <code>n</code> in the following line).</p>

<p>You could also consider <code>collections.deque</code> instead of <code>list</code> where relevant, which can sometimes give you a little extra speed. Or if you have the option to use list comprehension, do so.</p>

<p>And doing <code>if suffix_tree:</code> instead of <code>if len(suffix_tree) == 0:</code> is also faster; ca 30 ns vs 85 ns on my machine (Python 3.8.1).</p>

<p>On the time and space complexity, you have to make a judgement call if time or space is more important; only other way you could have O(1) lookup would be with a set.</p>

<p>Finally, you don't need to keep track of <code>found_match</code>---you can just use a <code>for-else</code> with a break-statement.</p>

<p>PS. You should be wary of mutating objects you're iterating over.</p>
    </div>