<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Only for the pedantic</strong></p>

<p>With non-2's complement, the below will compare <code>+0</code> as matching <code>-0</code>.</p>

<pre><code>char* addr1;
char* addr2;
...
if(addr1[i] != addr2[i]) ... // Oops. +0 == -0
</code></pre>

<p>Instead use <code>unsigned char *</code></p>

<pre><code>unsigned char* addr1;
unsigned char* addr2;
...
if (addr1[i] != addr2[i]) ... // OK.  Only one kind of 0
</code></pre>

<p>Better yet, use <code>memcmp()</code>.</p>

<p><strong>Return values</strong></p>

<p>"... returns 2 if it's the same file and 1 otherwise." --&gt; Not quite.</p>

<p>Code also returns via <code>exit()</code> with other values.</p>

<pre><code>exit(-1);
exit(-3);
exit(-4);
</code></pre>

<p><strong>+ 1??</strong></p>

<p>Off by 1.  No need for <code>+ 1</code>.  <a href="https://codereview.stackexchange.com/questions/239814/using-system-calls-to-compare-text-files/239949#comment470433_239814">G. Sliepen</a>.</p>

<pre><code>// for(int i=0;i&lt;fileSize1+1;i++)
for (int i=0; i&lt;fileSize1; i++)
</code></pre>

<p><strong>Matching type</strong></p>

<p><code>.st_size</code> is typed as <a href="https://linux.die.net/man/2/stat" rel="nofollow noreferrer"><code>off_t</code></a>.  I'd expect <code>fileSize1, fileSize2, i</code> as the same.</p>

<pre><code>off_t fileSize1;
...
for (off_t i = 0; i &lt; fileSize1; i++)
</code></pre>

<p><strong>Big files</strong></p>

<p><code>.st_size</code> is a <code>off_t</code>, some signed type.  <code>mmap(void *addr, size_t length, ...)</code> takes a length of <code>size_t</code>, some <em>unsigned</em> type.</p>

<p>To do this right, code may need to call <code>mmap()</code> multiple times as file size can exceed <code>SIZE_MAX</code>.</p>

<p>Something like:</p>

<pre><code>#define CHUNK  (‭1048576‬ /* 1 Meg */)

off_t fileSize1;
fileSize1 = stat_p1.st_size;

....

for (off_t offset = 0; offset &lt; fileSize1; offset += CHUNK) {
  size_t map_size1 = CHUNK;
  if (fileSize1 - offset &lt; CHUNK) {
    map_size1 = (size_t) (fileSize1 - offset);
  }

  addr1 = mmap(NULL, map_size1, PROT_READ,MAP_PRIVATE, fd1, offset);

  // as above for map_size1, addr2

  for (size_t i = 0; i &lt; map_size1; i++)
    ...
  // or
  if (memcmp(addr1, addr2, map_size1) .... 
</code></pre>
    </div>