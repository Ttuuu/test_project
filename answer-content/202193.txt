<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For such a use case a class would be rather useless. A class is used to encapsulate the stuff that belongs to just a single matter. Here, there is nothing in common between these functions.</p>

<p>If you want to use a class, consider creating a class related to Skills, with one of its methods responsible for returning a list of skills.</p>

<p>but if you want to just refactor your code, a set of functions will do as well. Make your PopulateDropdown.php as </p>

<pre><code>function skillSelect($category){
    //query to db to get skills
    return $skillArray;
} //end function

function groupSelect($category, $mem_type, $selected_group=NULL){

// query to get list of clients
    return $grpArray;
} //end function

function facilitySelect($selected_group){
    //query to get list of facilities associated with a $selected_group
        return $facArray;

} //end function
</code></pre>

<p>and then </p>

<pre><code>require '../appwpclass/PopulateDropdown.php';
$skillsArr = skillSelect($category);
$groupArr = groupSelect($category, $memType, $selGroup);
$facilityArr = facilitySelect($selGroup);
</code></pre>

<p>So you will have the desired functionality without a single class.</p>

<p>You may also want to create another helper function, to reduce the amount of duplicated code, </p>

<pre><code>function show_option($array, $selected) {
    foreach( $array as $id =&gt; $name ) {
        $selected = ( $id == $selected ) ? ' selected' : '';
        ?&gt;
        &lt;option value="&lt;?= $id ?&gt;"&lt;?= $selected ?&gt;&gt;&lt;?= $name ?&gt;&lt;/option&gt;
        &lt;?php 
    } 
}
</code></pre>

<p>which will make your HTML much cleaner</p>

<pre><code>&lt;select name="selGroup" id="selGroup" size="1" class="textfield" onchange="submit()"&gt;
    &lt;option value="0"&gt;--Any--&lt;/option&gt;
    &lt;?php show_option($groupArr, $selGroup); ?&gt;
</code></pre>

<blockquote>
  <p>So I thought about just using them in a "require" somewhere in each script, but I'm thinking there has to be a better OOP way</p>
</blockquote>

<p>Well, to use some function or a class you must require them, this way or another. Although classes could be autoloaded, you have to require the autoloader definition anyway. So, although there are other ways, your current approach is good enough.</p>
    </div>