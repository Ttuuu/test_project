<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Define the problem</h1>

<p>It's not clear from the description what's considered "excessive" whitespace.  From experimenting, it seems that the idea is to collapse multiple whitespace to a single whitespace character, except at the end of the string, where whitespace is to be completely removed.  (Whitespace at the beginning of string seems to treated the same as inner whitespace).  It's also not clear which whitespace character should be kept - the example code keeps the last one, but is that a requirement, or just an implementation choice?</p>

<h1>Missing include</h1>

<p><code>std::begin()</code> and <code>std::end()</code> are declared in <code>&lt;iterator&gt;</code>.  However, there's no reason not to use the <code>begin()</code> and <code>end()</code> member functions of <code>std::string</code> here, as we're not operating on generic values.</p>

<h1>When an argument is to be copied, pass by value</h1>

<p>We don't need to copy <code>str</code> into <code>result</code>:</p>

<pre><code>std::string remove_excessive_ws(std::string str)
</code></pre>

<h1>Bug</h1>

<p>Like all the <code>&lt;cctype&gt;</code> functions, <code>std::isspace()</code> requires that its argument be either <code>EOF</code> or representable as <code>unsigned char</code>.  Converting a (possibly signed) <code>char</code> direct to <code>unsigned int</code> can sign-extend to an out-of-range value.  We need to convert <code>char</code> to <code>unsigned char</code> before widening to <code>unsigned int</code>:</p>

<pre><code>static_cast&lt;unsigned char&gt;(ch)
</code></pre>

<h1>Bug</h1>

<p>Prior to C++11, accessing the character after the end of the string is undefined behaviour (C++11 requires an extra null to follow the string data).  Thankfully, it's easy to avoid this bug by simply remembering whether the last character seen was a space.</p>

<p>Here's a C++11 version:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;string&gt;
#include &lt;utility&gt;

std::string remove_excessive_ws(std::string str)
{
    bool seen_space = false;
    auto end{ std::remove_if(str.begin(), str.end(),
                             [&amp;seen_space](unsigned char ch) {
                                 bool is_space = std::isspace(ch);
                                 std::swap(seen_space, is_space);
                                 return seen_space &amp;&amp; is_space;
                             })};
    // adjust end to remove end whitespace
    if (end != str.begin() &amp;&amp; std::isspace(static_cast&lt;unsigned char&gt;(end[-1]))) {
        --end;
    }
    str.erase(end, str.end());
    return str;
}
</code></pre>

<p>We might want to move <code>seen_space</code> into the lambda expression in later C++ versions that allow that.</p>

<p>This also is more readable, as we can perform the widening to <code>unsigned int</code> when calling the lambda, rather than having to write a cast.</p>

<p>Style-wise, I'd normally prefer to name the lambda, and keep the erase-remove call on a single line so that the idiom is obvious:</p>

<pre><code>// Assuming C++17 now
std::string remove_excessive_ws(std::string s)
{
    auto is_doubled_space =
        [seen_space=false](unsigned char c) mutable {
            return std::exchange(seen_space, std::isspace(c))
                &amp;&amp; seen_space;
        };
    s.erase(std::remove_if(s.begin(), s.end(), is_doubled_space), s.end());
    // remove trailing whitespace
    if (!s.empty() &amp;&amp; std::isspace(static_cast&lt;unsigned char&gt;(s.back()))) {
        s.pop_back();
    }
    // convert all whitespace into ordinary space character
    std::replace_if(s.begin(), s.end(),
                    [](unsigned char c) { return std::isspace(c); }, ' ');
    return s;
}
</code></pre>
    </div>