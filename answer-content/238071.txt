<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ooh, hard to make any comments about this without knowing neural networks.</p>

<p>However, I do see a lot of repetition especially when it comes to bias and weight. It may be a good idea to create generic methods for those. I see you use specific methods such as <code>getBias(i)</code> and <code>getWeight(i)</code> but those can be inserted using lambda functions.</p>

<p>The <code>size</code> and <code>scaleFactor</code> variables are not used in the first two <code>for</code> loops, so I don't understand why they are declared &amp; initialized so early. If you only declare variables where you need them it becomes easier to extract methods out of large swaths of code, and your code becomes easier to read (because you don't have to keep track of so many variables as a reader).</p>

<p>There are a lot of unexplained calculations such as <code>- 1</code> and <code>- 2</code> going on. For you they may be clear, but generally you should comment on <strong>what</strong> you're trying to achieve with them.</p>

<p>In general the functions are too large. Try to minimize the amount of code. If you have three <code>for</code> loops in a row in one function, try and see if you can extract (<code>private</code>) methods for them instead.</p>

<p><code>stochasticGradientDescent</code> clearly prints out the result instead of returning it. That's not nice; at least indicate somewhere that it produces output. Instead of using <code>System.out</code>, simply use a <code>PrintStream out</code> as argument if you create such a method. Then you can always stream the output to file or to a <code>String</code> (for testing purposes) - and for console output you just pass <code>System.out</code> as parameter.</p>

<p>Similarly, <code>calculateMiniBatch</code> doesn't return a value, it calls two setters instead. That's generally not done, as you can directly assign such things to fields. Calling public methods from private methods can be dangerous if they get overwritten. For this kind of purpose I might also consider returning a private <code>WeightAndBias</code> class instance with just two fields (a record in Java).</p>

<p>I'm really wondering why <code>DenseMatrix</code> is not parameterized properly, I keep seeing class casts back to <code>DenseMatrix</code> while the methods are clearly defined on <code>DenseMatrix</code> itself. That probably means that an interface does not have a generic type parameter included that is set not by <code>DenseMatrix</code>, e.g.</p>

<pre><code>interface Matrix&lt;T extends Matrix&gt; {
    T operation();
}

class DenseMatrix&lt;DenseMatrix&gt; {
    DenseMatrix operation();
}
</code></pre>

<p>Otherwise, I'll be glad to let you know that I don't understand the first thing about the code, so I'll stop while I'm behind :)</p>
    </div>