<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://en.wikipedia.org/wiki/Variable-length_array" rel="nofollow noreferrer">variable length arrays</a> are required in C99 and optional in C11, C17/18.</p>

<p>To detect, something like</p>

<pre><code>#if defined(__STDC__) &amp;&amp; defined(__STDC_VERSION__) &amp;&amp; \
    (__STDC_VERSION__ == 199901 || (__STDC_VERSION__ &gt;= 201112 &amp;&amp; __STDC_NO_VLA__ != 1))
    #define VLA_OK 1
#else
    #define VLA_OK 0
#ednif
</code></pre>

<p>If code does not use a variable length arrays, code could take advantage that the address of the first element of the 2D array is <em>equivalent</em> to  <code>&amp;arr[0][0]</code> and that 2D arrays are continuous.</p>

<pre><code>void fill(void *arr, size_t rows, size_t cols, int val) {
   int *a = arr;
   for(size_t i = 0; i &lt; rows; i++) {
     for(size_t j = 0; j &lt; cols; j++) {
       *a++ = val;
    }
  }
}
</code></pre>

<p>Sample usage</p>

<pre><code>#define IN 5
#define JN 3
int arr[IN][JN];
fill(arr, IN, JN, 0x45);
</code></pre>

<p>This does lose type checking.<br>
Code instead could oblige passing the address of the first <code>int</code></p>

<pre><code>//        v---v---- type checked
void fill(int *arr, size_t rows, size_t cols, int val) {
   for(size_t i = 0; i &lt; rows; i++) {
     for(size_t j = 0; j &lt; cols; j++) {
       *arr++ = val;
    }
  }
}
</code></pre>

<p>Sample usage</p>

<pre><code>#define IN 5
#define JN 3
int arr[IN][JN];
fill(&amp;arr[0][0], IN, JN, 0x45);
// or
fill(arr[0], IN, JN, 0x45);
</code></pre>
    </div>