<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll try to itemize my review sequentially so that I don't miss anything.</p>

<ul>
<li><p>Try to describe your custom function when naming it.  The function is going to "filter the array" by one or more "languages" by a "minimum length".  Perhaps <code>function keepByMinimumLengthAndLanguages()</code>. I don't know what I would settle on if this was my project.  My suggestion risks being too wordy, but it does speak literally about its process.</p></li>
<li><p>Stabilize your input types.  If an incoming argument may be a string or an array, then just fix it to an array type to avoid having to cast the string as an array. <code>function keepByMinimumLengthAndLanguages(&amp;$array, $min = 2, $langs = ['en'])</code></p></li>
<li><p>Now that your incoming <code>$langs</code> variable is expected to be an array... (If you cannot afford to replace other scripts that call this function, you can just write <code>$langs = (array)$langs;</code> as the first line inside your custom function) ...you seem to require a bit of clean up on the language strings.</p>

<pre><code>$language_whitelist = [
    'english' =&gt; 'en',
    'eng' =&gt; 'en',
    'russian' =&gt; 'ru',
    'rus' =&gt; 'ru',
    'tajik' =&gt; 'tj',
    'taj' =&gt; 'tj',
    'tjk' =&gt; 'tj',
];

foreach ($langs as $lang) {
    $lang_keys[$language_whitelist[$lang] ?? $lang] = null; // reduce to 2 chars or use original input
}
</code></pre></li>
<li><p>If the default <code>$min</code> value is <code>2</code>, then I suppose you can build in a sanitizing step for this variable as well.  <code>if (!is_int($min) || $min &lt; 1) { $min = 2; }</code> ... or similar.</p></li>
<li><p>Now that you have the 2-character language keys, you can filter your array of language-specific character classes and use all character lists that qualify.</p>

<pre><code>$language_letters = 
[
    'en' =&gt; 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM',
    'ru' =&gt; 'ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ',
    'tj' =&gt; 'ғӯқҳҷӣҒӮҚҲҶӢ',
];


$array =  preg_grep('~^[' . implode(array_intersect_key($language_letters, $lang_keys)) . ']{' . $min . ',}$~u', $array);
</code></pre>

<p>Notice that I am not using a negated character class (I removed the <code>^</code>).</p></li>
<li><p>Because you are modifying by reference, you don't need to <code>return</code> anything. I suppose if you didn't want to force valid default values in your function, you could flag invalid incoming data and either <code>return true</code> when everything goes swimmingly, or return an error message.  This way you can modify by reference and check for errors.</p>

<pre><code>if (keepByMinimumLengthAndLanguages($array, 3, ['en']) === true) {
    // all good, use $array down script
} else {
    // display error
}
</code></pre></li>
</ul>
    </div>