<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks a lot for Prokop Hapala's helpful comments and suggestions. This is the code that has done job.</p>

<pre><code>import numpy as np
from numpy import pi
from scipy import signal

# Assigning grid points

Nx = 100
Ny = 100
Nt = 100

x = np.linspace(-Nx, Nx, 100)
y = np.linspace(-Ny, Ny, 100)
t = np.linspace(0, Nt-1, 100)

# Equation to solve
# phi(x,y,t) = ∫∫∫ G(x,y,t; x',y',t') . Source(x',y',t') dx' dy' dt'
# G(x,y,t; x',y',t') = Green's Function

# phi = displacement by the wave
phi = np.zeros((Nt,Ny,Nx))


# Define Function to realize Green's Function for Wave Equation
def gw(xx, yy, tt):

    kk = np.heaviside((tt-np.sqrt(xx**2+yy**2)),1)/(2*np.pi*np.sqrt(np.clip(tt**2-xx**2-yy**2,0,None))+1)
    return (kk)


# Define Function to realize Gaussian Disturbance
def g_source(xx, yy, tt):

    spatial_sigma  = 5   # spatial width of the Gaussian 
    temporal_sigma = 30  # temporal width of the Gaussian 
    onset_time     = 20  # time when Gaussian Disturbance reaches its peak

    kk = np.exp((-(np.sqrt((xx)**2+(yy)**2)/spatial_sigma)**2)))*np.exp(-((tt-onset_time)/temporal_sigma)**2)
    return (kk)

# Calculate the two function for given grid points
green = gw(x[None,None,:],y[None,:,None],t[:,None,None])
gauss = g_source(x[None,None,:],y[None,:,None],t[:,None,None])

# Calculate Source Response via convolution 
phi = signal.convolve(gauss, green, mode='full')
</code></pre>

<p>Ideally, one would use scipy.signal.fftconvolve to take the advantage of doing convolution in Fourier space (which brings down the iteration to 3D in this problem, instead of 6D in real space). However, As of v0.19, signal.convolve automatically chooses fft method or the real space method based on an estimation of which is faster.</p>

<p>Note: I tried to employ the scipy.ndimage.filters.convolve for my problem, but it gave back memory error which means it tried to do the 3D convolve function by 6-dimensional iteration under the hood and that was too much for my RAM (32 GB). But the scipy.signal.convolve worked fine even for much denser grid points.</p>
    </div>