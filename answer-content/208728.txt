<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is efficient, and luckily your problem domain is quite limited, which is also good to get early feedback and then improve the program structure before you go on to write complex systems with millions of lines of code.</p>

<h2>The Student class</h2>

<p>Let's start with the very small details, the <code>Student</code> class. You wrote:</p>

<pre><code>class Student {

    int rollno;
    String name;

    Student(int r, String n) {
        this.rollno = r;
        this.name = n;
    }
}
</code></pre>

<p>For the two fields, you chose to list the rollno first and the name second. This is good since rollno is the <em>identifying</em> field of the student, which should always come first. The describing fields should then follow, as you do in your code.</p>

<p>It looks strange that the fields have these pretty names but the parameters of the constructor are abbreviated for no reason. The fields, as well as their names, are considered an <em>implementation detail</em> and should not be visible outside the Student class. Therefore, their names are limited in scope.</p>

<p>The parameters of the constructor, on the other hand, are part of the "API" (application programming interface) of the Student class. These names are important so they should be chosen carefully. It is common to name the constructor parameters exactly the same as the fields. So that should be <code>Student(int rollno, String name)</code>.</p>

<p>Later, when your code becomes more than a toy program, you will need to add <em>getter and setter</em> methods for the fields of the Student class. This is a convention in the Java world. It's a lot of code to type, but people got used to that. In fact, the IDE (integrated development environment) will generate this code for your. It is called boilerplate code because it has more text than would be ideally necessary.</p>

<p>Later, your Student class should look like this:</p>

<pre><code>public class Student {   // The "public" is new here.

    private final int rollno;   // The "private" and "final" is new here.
    private String name;        // The "private" is new here.

    public Student(int rollno, String name) {   // The "public" is new here
        this.rollno = rollno;
        this.name = name;
    }

    public int getRollno() {
        return rollno;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
</code></pre>

<p>I made the rollno field <code>final</code> because once chosen, it will never change. The name of a student, on the other hand, may change. It doesn't occur very often, but it can. Therefore there is a combination of the getName/setName methods.</p>

<p>Above I mentioned the boilerplate code since this code is much longer than your current code but doesn't really contain more information. It could be written much shorter, if only the Java programming language would support it. Maybe it will in some future, but currently it doesn't. There is a similar programming language called Kotlin, in which the equivalent code looks like this:</p>

<pre><code>data class Student(
    val rollno: Int,
    var name: String)
</code></pre>

<p>That's it. There is no repetition anymore, and this short code can be automatically translated to the above bloated Java code because the Java code doesn't contain any more <em>real information</em> than this very short code.</p>

<h2>The StudentRoll class (Katie's version)</h2>

<p>(Note: I accidentally reviewed not the code from the question, but the code from Katie's answer. Since I don't want this work to be wasted, I'm leaving it as is. See below for the review of the original class.)</p>

<pre><code>class StudentRoll {

    static Student[] gatherStudents(Scanner scanner){
</code></pre>

<p>I noticed that you wrote <code>){</code> without any space in-between. That's unusual but is nothing you should worry about. Since the rest of your code is perfectly formatted (the indentation from the left is consistent, as well as the spacing between the tokens that make up the code), I assume that you are either very disciplined or are using an IDE that formats the code for you. Either of these is good. The IDE should do this boring task of layouting the code so that you can concentrate on what the code <em>means</em> instead of what it looks like.</p>

<pre><code>        System.out.print("Number of students? ");
        int numberOfStudents = scanner.nextInt();
</code></pre>

<p>This pattern of asking for the number of items first and then reading the items one by one is very typical of textbooks and introductory programs. It is impractical for the user of your program, though. Does the user really know in advance how many students there will be? Probably not. Therefore the program should rather ask the user to "enter the student rollno, leave it empty to finish the input".</p>

<pre><code>        System.out.println("Enter those " + numberOfStudents + " students one by one");
        Student[] students = new Student[numberOfStudents];
</code></pre>

<p>Introductory programming courses typically use arrays since technically they are simpler to understand than Java classes and <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html" rel="nofollow noreferrer">the whole collections framework</a>. Arrays are harder to use though since you need to know the number of elements when you create the array.</p>

<p>By using a <code>List&lt;Student&gt;</code> (pronounced: list of student) instead of a <code>Student[]</code>, you can simply say <code>students.add(student)</code> and don't have to worry whether the list is large enough. This is much simpler.</p>

<pre><code>        for (Student student : students) {
            System.out.println("Enter details for the next student no. ");
            System.out.print("Enter Name: ");
            student.setName(scanner.next());
            System.out.print("Enter Roll Number: ");
            student.setRollNumber(scanner.nextInt());
            System.out.println("\n");
</code></pre>

<p>In the Student class, you wrote the rollno first, for whatever reason. I thought it was because the rollno is the <em>identifying</em> field. But now it gets weird: you let the user enter the fields of the student in a different order than that in the Student class. This is a bad smell. It is not necessarily wrong, but it draws attention. Why do you do this. This should be explained in a comment for the human readers of your code.</p>

<p>The prompt to "Enter details for the next student no. " has an unnecessary space at the end. That is not visible and it has no meaning, therefore you should remove it. Before that space is "no.", which <em>is</em> visible and it is wrong. The user is going to enter the details for the next <em>student</em>, not for its <em>number</em>. Maybe it was <code>"no. " + i</code> in a previous version of the code, where <code>i</code> was a sequence number, and that made sense. The current version of the code doesn't make sense.</p>

<p>To get the user's input, you use <code>scanner.next()</code>. This is almost always wrong. Currently, when the user is asked to enter a name and just presses Enter, the user expects that something has been entered. Yet, the program still waits for "something", since calling <code>scanner.next()</code> means "read from the input until the next <em>word</em>".</p>

<p>When the user enters a double name, only the first name will end up in <code>student.name</code>, the other name will still be in the input queue, waiting to be read in later. Therefore, instead of <code>scanner.next()</code>, use <code>scanner.nextLine()</code>.</p>

<p>The same applies for the rollno. When the users just presses Enter here, the program continues to wait for a <em>word</em> to be entered, without giving any intermediate feedback. This makes a bad user experience since the user and the program have a different idea about what is happening right now. Therefore, instead of <code>scanner.nextInt()</code>, use <code>Integer.parseInt(scanner.nextLine())</code>.</p>

<p>Error handling will be handled later, that would be too large a topic for now.</p>

<p>For the benefit of readers of your code, you should add an empty line before the "Enter roll number" line. This will structure your code into paragraphs, just like in a good book. <a href="https://www.youtube.com/watch?v=cVaDY0ChvOQ" rel="nofollow noreferrer">This video</a> explains why this is a good thing.</p>

<pre><code>        }
        return students;
    }

    static void printStudents(Student[] students){
        int i = 1;
        for (Student x : students) {
            System.out.println("Student Number : " + i);
            System.out.println("Name -&gt; " + x.getName());
            System.out.println("Roll Number -&gt; " + x.getRollNumber() + "\n");
            i++;
        }
    }
}
</code></pre>

<p>The printStudents method prints the students details, each separated by an empty line. This empty line is not visible when looking only at the beginnings of the code lines.</p>

<p>Experienced programmers often only read the first word of each line to get a general idea of what the code does. In this example, it would be:</p>

<ul>
<li><code>for Student</code></li>
<li><code>System.out.println</code></li>
<li><code>System.out.println</code></li>
<li><code>System.out.println</code></li>
</ul>

<p>From that, readers of your code will conclude that for each student, there are 3 lines printed. But this is not what the program does. It prints 4 lines. Therefore the code should look like this:</p>

<pre><code>    static void printStudents(Student[] students) {
        int i = 1;
        for (Student student : students) {
            System.out.println("Student Number : " + i);
            System.out.println("Name -&gt; " + student.getName());
            System.out.println("Roll Number -&gt; " + student.getRollNumber());
            System.out.println();
            i++;
        }
    }
</code></pre>

<p>There you have it, four times <code>println</code>, four lines of output. Now the code has the same structure as the output it produces. No more surprises for the reader.</p>

<p>By the way, there are subtle differences between <code>println()</code> and printing <code>"\n"</code>, but only on Windows systems. When you write <code>\n</code> in your code, the Windows Notepad editor will not show the linebreak that should be there. Granted, it's almost the only program that is living in the past, most other programs can handle these differences in line endings since about 20 years. And finally, since <a href="https://blogs.msdn.microsoft.com/commandline/2018/05/08/extended-eol-in-notepad/" rel="nofollow noreferrer">May 2018, Windows Notepad can do it, too</a>. Still, your code should not generate these inconsistent line endings. Therefore: don't write <code>\n</code> in your code, prefer <code>println()</code> over it. At least until you know what exactly you are doing.</p>

<h2>The Main class</h2>

<p>You saved the code in the file <code>StudentDB.java</code>, yet your class is called <code>Main</code>. Unless you have a very good reason, the class name should correspond to the file name. This makes for less surprises.</p>

<p>You wrote:</p>

<pre><code>import java.util.Scanner;

class Main {

    public static void getStudents(Student ...students) {
        int i = 1;
        for (Student x : students) {
            System.out.println("Student Number : " + i);
            System.out.println("Name -&gt; "+ x.name);
            System.out.println("Roll Number -&gt; " + x.rollno + "\n");
            i++;
        }
    }
</code></pre>

<p>This method should be called <code>printStudents</code> since the word <code>get</code> is practically reserved for methods that retrieve a little detail information (like <code>Student.getName</code>) and have no side-effects. Printing something <em>is</em> a side-effect.</p>

<p>The printStudents method prints the students details, each separated by an empty line. This empty line is not visible when looking only at the beginnings of the code lines.</p>

<p>Experienced programmers often only read the first word of each line to get a general idea of what the code does. In this example, it would be:</p>

<ul>
<li><code>for Student</code></li>
<li><code>System.out.println</code></li>
<li><code>System.out.println</code></li>
<li><code>System.out.println</code></li>
</ul>

<p>From that, readers of your code will conclude that for each student, there are 3 lines printed. But this is not what the program does. It prints 4 lines. Therefore there should be another line <code>System.out.println();</code> after the other 3 lines.</p>

<p>There are subtle differences between <code>println()</code> and printing <code>"\n"</code>, but only on Windows systems. When you write <code>\n</code> in your code, the Windows Notepad editor will not show the linebreak that should be there. Granted, it's almost the only program that is living in the past, most other programs can handle these differences in line endings since about 20 years. And finally, since <a href="https://blogs.msdn.microsoft.com/commandline/2018/05/08/extended-eol-in-notepad/" rel="nofollow noreferrer">May 2018, Windows Notepad can do it, too</a>. Still, your code should not generate these inconsistent line endings. Therefore: don't write <code>\n</code> in your code, prefer <code>println()</code> over it. At least until you know what exactly you are doing.</p>

<pre><code>    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        System.out.print("Number of students? ");
        int num = sc.nextInt();
</code></pre>

<p>This pattern of asking for the number of items first and then reading the items one by one is very typical of textbooks and introductory programs. It is impractical for the user of your program, though. Does the user really know in advance how many students there will be? Probably not. Therefore the program should rather ask the user to "enter the student rollno, leave it empty to finish the input".</p>

<pre><code>        String[] name = new String[num];
        int[] rollno = new int[num];
</code></pre>

<p>Having these two arrays is often the wrong approach. If you would explain the program (not the code) to a colleague, you would not say "the user enters a list of names and a list of roll numbers". You would say instead "the user enters a list of student details". The code should match this description as closely as possible.</p>

<p>Therefore your code should construct a proper <code>Student</code> object as soon as it has all the necessary details (in this case rollno and name).</p>

<p>Introductory programming courses typically use arrays since technically they are simpler to understand than Java classes and <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html" rel="nofollow noreferrer">the whole collections framework</a>. Arrays are harder to use though since you need to know the number of elements when you create the array.</p>

<p>By using a <code>List&lt;Student&gt;</code> (pronounced: list of student) instead of a <code>Student[]</code>, you can simply say <code>students.add(student)</code> and don't have to worry whether the list is large enough. This is much simpler.</p>

<pre><code>        System.out.println("Enter those " + num + " students one by one");

        for (int i = 0; i &lt; num; i++) {
            System.out.println("Enter details for student no. " + (i + 1));
</code></pre>

<p>Very good. This pattern of using the range [0,n) internally and [1,n] for communicating with humans is typical for all kinds of programs. It's important to get used to this pattern and apply it consistently.</p>

<p>There are other programming languages (Pascal, Lua, some versions of Basic) where arrays typically start at index 1. See <a href="https://en.wikipedia.org/wiki/Zero-based_numbering" rel="nofollow noreferrer">Zero based numbering</a> for a lengthy discussion about this topic.</p>

<pre><code>            System.out.print("Enter Name: ");
            name[i] = sc.next();
            System.out.print("Enter Roll Number: ");
            rollno[i] = sc.nextInt();
</code></pre>

<p>In the Student class, you wrote the rollno first, for whatever reason. I thought it was because the rollno is the <em>identifying</em> field. But now it gets weird: you let the user enter the fields of the student in a different order than that in the Student class. This is a bad smell. It is not necessarily wrong, but it draws attention. Why do you do this. This should be explained in a comment for the human readers of your code.</p>

<p>To get the user's input, you use <code>scanner.next()</code>. This is almost always wrong. Currently, when the user is asked to enter a name and just presses Enter, the user expects that something has been entered. Yet, the program still waits for "something", since calling <code>scanner.next()</code> means "read from the input until the next <em>word</em>".</p>

<p>When the user enters a double name, only the first name will end up in <code>student.name</code>, the other name will still be in the input queue, waiting to be read in later. Therefore, instead of <code>scanner.next()</code>, use <code>scanner.nextLine()</code>.</p>

<p>The same applies for the rollno. When the users just presses Enter here, the program continues to wait for a <em>word</em> to be entered, without giving any intermediate feedback. This makes a bad user experience since the user and the program have a different idea about what is happening right now. Therefore, instead of <code>scanner.nextInt()</code>, use <code>Integer.parseInt(scanner.nextLine())</code>.</p>

<p>Error handling will be handled later, that would be too large a topic for now.</p>

<p>For the benefit of readers of your code, you should add an empty line before the "Enter roll number" line. This will structure your code into paragraphs, just like in a good book. <a href="https://www.youtube.com/watch?v=cVaDY0ChvOQ" rel="nofollow noreferrer">This video</a> explains why this is a good thing.</p>

<pre><code>            System.out.println("\n");
        }

        Student[] students = new Student[num];

        for (int i = 0; i &lt; num; ++i) {
            students[i] = new Student(rollno[i], name[i]);
        }

        getStudents(students);
    }
}
</code></pre>

<h2>My version of the Main class</h2>

<pre><code>class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Student[] students = readStudents(sc);
        printStudents(students);
    }
</code></pre>

<p>I have put the main method at the top of the file because it serves as a table of contents. It should be this short to let the reader quickly decide: Is this the code I'm looking for? What does it do when viewed from a high level perspective?</p>

<pre><code>    private static Student[] readStudents(Scanner scanner) {
        System.out.print("Number of students? ");
        int num = Integer.parseInt(scanner.nextLine());

        System.out.println("Enter those " + num + " students one by one");

        Student[] students = new Student[num];
        for (int i = 0; i &lt; num; i++) {
            System.out.println("Enter details for student no. " + (i + 1));
            students[i] = readStudent(scanner);
        }

        return students;
    }
</code></pre>

<p>As I said, <code>scanner.nextLine</code> is preferable to <code>scanner.next</code>.</p>

<p>There are no separate arrays of names and rollnos anymore since that was not the ideal design for this code. This code deals with students, not with names and rollnos. The code should always serve as an explanation of the core concepts to the human reader.</p>

<p>The main work is left to another method that reads a single student. Splitting up the work into several small parts makes each part understandable. For that, it's important to choose good names for each method. You should spend at least a third of the time thinking about <a href="https://martinfowler.com/bliki/TwoHardThings.html" rel="nofollow noreferrer">how to name things</a>.</p>

<pre><code>    static Student readStudent(Scanner scanner) {
        System.out.print("Enter Roll Number: ");
        int rollno = Integer.parseInt(scanner.nextLine());

        System.out.print("Enter Name: ");
        String name = scanner.nextLine();

        System.out.println();

        return new Student(rollno, name);
    }
</code></pre>

<p>I placed rollno first because it is the identifying field. Like in the method above, I only use <code>scanner.nextLine</code> and then process this line further.</p>

<p>This method reads the individual fields and then constructs a proper Student object. From then on, the code doesn't deal with names or rollnos anymore, and that's exactly how it should be.</p>

<pre><code>    public static void printStudents(Student... students) {
        int i = 1;
        for (Student x : students) {
            System.out.println("Student Number : " + i);
            System.out.println("Name -&gt; " + x.name);
            System.out.println("Roll Number -&gt; " + x.rollno);
            System.out.println();
            i++;
        }
    }
}
</code></pre>

<p>There are 4 lines of code corresponding to 4 lines of output. No surprise here, as it should.</p>

<h2>Summary</h2>

<p>Even though your program was quite short, there were a lot of topics to talk about, and many hidden assumptions and details. Knowing these from the beginning is impossible. But in the end, attention to all these small details is what differentiates between an ok program and a great program. It's worth taking time for that, the users of your program will (silently) thank you for it, or at least, they won't complain as much. :)</p>
    </div>