<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it's your transaction set up.  Without being able to run the code I would guess that the transaction overhead is the bottleneck.</p>

<p>Check out the Insert example here:</p>

<p><a href="https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/batch.html#batch-inserts" rel="nofollow noreferrer">https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/batch.html#batch-inserts</a></p>

<p>They are putting the transaction outside the main loop and doing a flush() / clear() based on batch size.  </p>

<p>Something like this:</p>

<pre><code> Session session = sessionFactory.openSession();
 Transaction tx =session.beginTransaction();

    while (numberOfElements &gt; 0) {
      numberOfElements -= batchSize;

      //if @GeneratedValue is removed from entity, same record is saved in db after first commit


      for (int i = 0; i &lt; batchSize; i++) {
        session.save(validDeal.get(i));
      }
        session.flush();
        session.clear();


    }
   tx.commit();
   session.close();
</code></pre>

<p>I would also make the code more like the example using <code>i % batchSize == 0</code> to trigger the <code>flush() / clear()</code> rather than the loop but that's up to you.</p>
    </div>