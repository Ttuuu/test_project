<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Observations</h2>
<p>Unlike some more modern languages such as C# and Java, a C++ class is generally implemented as 2 files: a header file generally with the file extension <code>.h</code> and a source file generally with the files extensions <code>.cpp</code> or <code>.cc</code>. This is due primarily to the fact that C++ grew out the C programming language which had header files and source files as well.</p>
<p>In C++ the classes declarations are in the header file and the member function implementations are in the source file. There are or were benefits to this arrangement. As long as the declarations remained the same, the underlying member functions could be modified as needed, recompiled and shipped to the client or customer to be installed without changing a major version number. Changes to class declarations required version number changes.</p>
<p>The second possible benefit of separating the declarations from the source is that the entire implementation can be refactored as long as the class declarations do not change. This could allow for major changes to take place to improve performance or memory usage without the outside code needing to change.</p>
<p>The code in this question is all in one file and that makes it more difficult to maintain. It also means that all of the code needs to be included in whatever file needs to use it using an include statement, which leads to unnecessarily long compile and build times.</p>
<p>At the end of the answer I've included the possible header and source file for this code. <em>None of the logic was changed.</em></p>
<p><strong>Definitely follow any suggestions @Edward made in the previous review.</strong></p>
<h2>Put Public Declarations First</h2>
<p>Within the header file the list of all public members starting with the constructors should go first, then the protected members and finally private members. This organization is so that the users of the class can quickly find what they need. This is not enforced by the language or the compilers but is general custom. C++ also differs from at least C# (I haven't programmed in Java so I don't know) in that public members can be grouped.</p>
<pre><code>class CLASSNAME {
public:
    Public_Member_0;
    Public_Member_1;
    Public_Constructor_2(){}
    Public_Member_3(){}
protected:
    Private_Member_0;
    Private_Member_1(){}
    Private_Member_2(){}
private:
    Private_Member_0;
    Private_Member_1(){}
    Private_Member_2(){}
}
</code></pre>
<h2>Make Items That Should Not Be Access Externally Private</h2>
<p>There is no reason that the data representation of the board should be public, at most it should be protected so that classes that inherit for the <code>Chess</code> class can access it. It would be even better if it was private, and protected members provided access. It could also be declared as a static variable in the <code>Chess.cpp</code> file, which would allow easy change of the data representation.</p>
<h2>Complexity!</h2>
<p>The class as a whole as well as most of the member functions are too complex (do too much). Functions should only attempt to solve one problem and they shouldn't be larger than a screen in an editor or a sheet of paper if printed. Anything larger is very difficult to understand, write, read and thus maintain.</p>
<p>I suggest you read up on the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsibility Principle</a> which states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>This is one of the main principles of Object Oriented Programming, in fact it is the <code>S</code> in <a href="https://en.wikipedia.org/wiki/SOLID" rel="noreferrer">SOLID Programming</a>.</p>
<blockquote>
<p>In object-oriented computer programming, SOLID is a mnemonic acronym for five design principles intended to make software designs more understandable, flexible and maintainable. It is not related to the GRASP software design principles. The principles are a subset of many principles promoted by American software engineer and instructor Robert C. Martin. Though they apply to any object-oriented design, the SOLID principles can also form a core philosophy for methodologies such as agile development or adaptive software development. The theory of SOLID principles was introduced by Martin in his 2000 paper Design Principles and Design Patterns, although the SOLID acronym was introduced later by Michael Feathers.</p>
</blockquote>
<p>It might be better to have multiple classes, one class to implement the board, an abstract base class for all the types of pieces with an abstract function for getting the move, each piece could then be implemented by a subclass that inherits from the base class. The board class would own the <code>printboard()</code> function.</p>
<h2>Initialize All Local Variables</h2>
<p>A best practice is to initialize each variable as it is declared. C++ does not initialize local variables to a default value and the lack of initialization can lead to undefined behavior.</p>
<p>The variable <code>score</code> in the function <code>evaluation</code> is not initialized.</p>
<h2>Reformated Into 2 Files</h2>
<p>** chess2.h **</p>
<pre><code>#ifndef CHESS2_H
#define CHESS2_H
#include&lt;vector&gt;
#include&lt;string&gt;

typedef std::vector&lt;std::string&gt; buff;
typedef std::string str;

class Chess2
{
public:
    buff pseudomoves;
    buff legal_moves;
    short int board[8][8] = // This array represents the chess board
    {
      {-2,0,0,0,0,0,-10,0},
      {0,0,0,0,0,0,0,0},
      {0,0,0,0,-1,0,0,0},
      {0,0,0,0,0,0,0,0},
      {0,0,6,0,0,0,0,0},
      {0,10,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0},
    };
    int perform(str Move);
    void printboard();
    str push(int row, int col, int desrow, int descol); 
    buff getallmoves(bool turn);
    str computer_move(unsigned short int depth);

private:
    bool check(bool turn);
    void getdiagonalmoves(bool turn, int row, int col);
    void getstraigtmoves(bool turn, int row, int col);
    void getknightmoves(bool turn, int row, int col);
    void getpawnmoves(bool turn, int row, int col);
    void getkingmoves(bool turn, int row, int col);
    int evaluation();
    int miniMax(int depth, bool ismax, int alpha, int beta);
    str miniMaxroot(int depth, bool turn);
    void undomove(int original, str Move);
};

#endif  // CHESS2_H
</code></pre>
<p>** chess2.cpp **</p>
<pre><code>#include "Chess2.h"
#include&lt;iostream&gt;

int Chess2::perform(str Move) {
    int original;
    original = board[Move[2] - 48][Move[3] - 48];
    board[Move[2] - 48][Move[3] - 48] = board[Move[0] - 48][Move[1] - 48];
    board[Move[0] - 48][Move[1] - 48] = 0;
    return original;
}

void Chess2::printboard()
{
    for (int i = 0; i &lt; 8; i++) {
        for (int j = 0; j &lt; 8; j++) {
            if (board[i][j] == 1)
                std::cout &lt;&lt; "P ";
            else if (board[i][j] == 5)
                std::cout &lt;&lt; "R ";
            else if (board[i][j] == 3)
                std::cout &lt;&lt; "K ";
            else if (board[i][j] == 2)
                std::cout &lt;&lt; "B ";
            else if (board[i][j] == 6)
                std::cout &lt;&lt; "Q ";
            else if (board[i][j] == 10)
                std::cout &lt;&lt; "KI ";
            else if (board[i][j] == 0)
                std::cout &lt;&lt; ". ";

            else if (board[i][j] == -1)
                std::cout &lt;&lt; "p ";
            else if (board[i][j] == -5)
                std::cout &lt;&lt; "r ";
            else if (board[i][j] == -3)
                std::cout &lt;&lt; "k ";
            else if (board[i][j] == -2)
                std::cout &lt;&lt; "b ";
            else if (board[i][j] == -6)
                std::cout &lt;&lt; "q ";
            else if (board[i][j] == -10)
                std::cout &lt;&lt; "ki ";
            else if (board[i][j] == -109)
                std::cout &lt;&lt; "X";

        }
        std::cout &lt;&lt; std::endl;
    }
}

str Chess2::push(int row, int col, int desrow, int descol) {
    using std::to_string;

    str mystr = to_string(row) + to_string(col) + to_string(desrow) + to_string(descol);
    return mystr;
}

str Chess2::computer_move(unsigned short int depth) {
    str bestmove;
    bestmove = miniMaxroot(depth, false);
    std::cout &lt;&lt; "Bestmove: " &lt;&lt; bestmove &lt;&lt; "\n";
    perform(bestmove);
    return bestmove;
}

buff Chess2::getallmoves(bool turn) {
    pseudomoves.clear();
    legal_moves.clear();
    int original;
    if (turn) {
        for (int i = 0; i &lt; 8; i++) {
            for (int j = 0; j &lt; 8; j++) {
                if (!board[i][j]) continue;
                else if (board[i][j] == 1) getpawnmoves(true, i, j);
                else if (board[i][j] == 2) getdiagonalmoves(true, i, j);
                else if (board[i][j] == 3) getknightmoves(true, i, j);
                else if (board[i][j] == 5) getstraigtmoves(true, i, j);
                else if (board[i][j] == 6) {
                    getdiagonalmoves(true, i, j);
                    getstraigtmoves(true, i, j);
                }
                else if (board[i][j] == 10) getkingmoves(true, i, j);
            }
        }
        return pseudomoves;
        for (long unsigned int i = 0; i &lt; pseudomoves.size(); i++) {
            original = perform(pseudomoves[i]);
            if (check(true) == false) {
                legal_moves.push_back(pseudomoves[i]);
            }
            undomove(original, pseudomoves[i]);
        }
        return legal_moves;
    }
    else if (!turn) {
        for (int i = 0; i &lt; 8; i++) {
            for (int j = 0; j &lt; 8; j++) {
                if (!board[i][j]) continue;
                else if (board[i][j] == -1) getpawnmoves(false, i, j);
                else if (board[i][j] == -2) getdiagonalmoves(false, i, j);
                else if (board[i][j] == -3) getknightmoves(false, i, j);
                else if (board[i][j] == -5) getstraigtmoves(false, i, j);
                else if (board[i][j] == -6) {
                    getdiagonalmoves(false, i, j);
                    getstraigtmoves(false, i, j);
                }
                else if (board[i][j] == -10) getkingmoves(false, i, j);
            }
        }
        for (long unsigned int i = 0; i &lt; pseudomoves.size(); i++) {
            original = perform(pseudomoves[i]);
            if (check(false) == false) {
                legal_moves.push_back(pseudomoves[i]);
            }
            undomove(original, pseudomoves[i]);
        }
        return legal_moves;
    }
    return legal_moves;
}

bool Chess2::check(bool turn) {
    if (turn == true) {
        int row, col;
        //Finding the king on the board

        for (int i = 0; i &lt; 8; i++) {
            for (int j = 0; j &lt; 8; j++) {
                if (board[i][j] == 10) {
                    row = i;
                    col = j;
                }
            }
        }

        //Finding the king on the board
        if (row != 0 &amp;&amp; col != 0 &amp;&amp; board[row - 1][col - 1] == -1) return true;
        else if (row != 0 &amp;&amp; col != 7 &amp;&amp; board[row - 1][col + 1] == -1) return true;
        int a, b;
        a = row;
        b = col;
        if (a != 0 &amp;&amp; b != 0) {
            for (;;) {
                a -= 1;
                b -= 1;
                if (board[a][b] == -6 || board[a][b] == -2) return true;
                if (board[a][b] != 0 || a == 0 || b == 0) break;
            }
        }
        a = row;
        b = col;
        if (a != 0 &amp;&amp; b != 7) {
            for (;;) {
                a -= 1;
                b += 1;
                if (board[a][b] == -6 || board[a][b] == -2) return true;
                if (board[a][b] != 0 || a == 0 || b == 7) break;
            }
        }
        a = row;
        b = col;
        if (a != 7 &amp;&amp; b != 0) {
            for (;;) {
                a += 1;
                b -= 1;
                if (board[a][b] == -6 || board[a][b] == -2) return true;
                if (board[a][b] != 0 || a == 7 || b == 0) break;
            }
        }
        a = row;
        b = col;
        if (a != 7 &amp;&amp; b != 7) {
            for (;;) {
                a += 1;
                b += 1;
                if (board[a][b] == -6 || board[a][b] == -2) return true;
                if (board[a][b] != 0 || a == 7 || b == 7) break;
            }
        }

        a = row;
        b = col;
        if (a != 7) {
            for (;;) {
                a += 1;
                if (board[a][b] == -6 || board[a][b] == -5) return true;
                if (board[a][b] != 0 || a == 7) break;
            }
        }
        a = row;
        b = col;
        if (a != 0) {
            for (;;) {
                a -= 1;
                if (board[a][b] == -6 || board[a][b] == -5) return true;
                if (board[a][b] != 0 || a == 0) break;
            }
        }

        a = row;
        b = col;
        if (b != 7) {
            for (;;) {
                b += 1;
                if (board[a][b] == -6 || board[a][b] == -5) return true;
                if (board[a][b] != 0 || b == 7) break;
            }
        }
        a = row;
        b = col;
        if (b != 0) {
            for (;;) {
                b -= 1;
                if (board[a][b] == -6 || board[a][b] == -5) return true;
                if (board[a][b] != 0 || b == 0) break;
            }
        }

        if (row &gt; 0 &amp;&amp; col &lt; 6 &amp;&amp; board[row - 1][col + 2] == -3)return true;
        if (row &gt; 1 &amp;&amp; col &lt; 7 &amp;&amp; board[row - 2][col + 1] == -3)return true;
        if (row &lt; 7 &amp;&amp; col &lt; 6 &amp;&amp; board[row + 1][col + 2] == -3)return true;
        if (row &lt; 6 &amp;&amp; col &lt; 7 &amp;&amp; board[row + 2][col + 1] == -3)return true;
        if (row &lt; 6 &amp;&amp; col &gt; 0 &amp;&amp; board[row + 2][col - 1] == -3)return true;
        if (row &lt; 7 &amp;&amp; col &gt; 1 &amp;&amp; board[row + 1][col - 2] == -3)return true;
        if (row &gt; 1 &amp;&amp; col &gt; 0 &amp;&amp; board[row - 2][col - 1] == -3)return true;
        if (row &gt; 0 &amp;&amp; col &gt; 1 &amp;&amp; board[row - 1][col - 2] == -3)return true;

        if (row != 7 &amp;&amp; board[row + 1][col] == -10)return true;
        if (row != 0 &amp;&amp; board[row - 1][col] == -10)return true;
        if (col != 7 &amp;&amp; board[row][col + 1] == -10) return true;
        if (col != 0 &amp;&amp; board[row][col - 1] == -10) return true;
        if (row != 7 &amp;&amp; col != 7 &amp;&amp; board[row + 1][col + 1] == -10)return true;
        if (row != 7 &amp;&amp; col != 0 &amp;&amp; board[row + 1][col - 1] == -10) return true;
        if (row != 0 &amp;&amp; col != 7 &amp;&amp; board[row - 1][col + 1] == -10) return true;
        if (row != 0 &amp;&amp; col != 0 &amp;&amp; board[row - 1][col - 1] == -10) return true;


    }
    else if (turn == false) {
        int row, col;
        //Finding the king on the board

        for (int i = 0; i &lt; 8; i++) {
            for (int j = 0; j &lt; 8; j++) {
                if (board[i][j] == -10) {
                    row = i;
                    col = j;
                }
            }
        }

        //Finding the king on the board
        if (row != 7 &amp;&amp; col != 0 &amp;&amp; board[row + 1][col - 1] == 1) return true;
        else if (row != 7 &amp;&amp; col != 7 &amp;&amp; board[row + 1][col + 1] == 1) return true;

        int a, b;
        a = row;
        b = col;
        if (a != 0 &amp;&amp; b != 0) {
            for (;;) {
                a -= 1;
                b -= 1;
                if (board[a][b] == 6 || board[a][b] == 2) return true;
                if (board[a][b] != 0 || a == 0 || b == 0) break;
            }
        }
        a = row;
        b = col;
        if (a != 0 &amp;&amp; b != 7) {
            for (;;) {
                a -= 1;
                b += 1;
                if (board[a][b] == 6 || board[a][b] == 2) return true;
                if (board[a][b] != 0 || a == 0 || b == 7) break;
            }
        }
        a = row;
        b = col;
        if (a != 7 &amp;&amp; b != 0) {
            for (;;) {
                a += 1;
                b -= 1;
                if (board[a][b] == 6 || board[a][b] == 2) return true;
                if (board[a][b] != 0 || a == 7 || b == 0) break;
            }
        }
        a = row;
        b = col;
        if (a != 7 &amp;&amp; b != 7) {
            for (;;) {
                a += 1;
                b += 1;
                if (board[a][b] == 6 || board[a][b] == 2) return true;
                if (board[a][b] != 0 || a == 7 || b == 7) break;
            }
        }

        a = row;
        b = col;
        if (a != 7) {
            for (;;) {
                a += 1;
                if (board[a][b] == 6 || board[a][b] == 5) return true;
                if (board[a][b] != 0 || a == 7) break;
            }
        }
        a = row;
        b = col;
        if (a != 0) {
            for (;;) {
                a -= 1;
                if (board[a][b] == 6 || board[a][b] == 5) return true;
                if (board[a][b] != 0 || a == 0) break;
            }
        }

        a = row;
        b = col;
        if (b != 7) {
            for (;;) {
                b += 1;
                if (board[a][b] == 6 || board[a][b] == 5) return true;
                if (board[a][b] != 0 || b == 7) break;
            }
        }
        a = row;
        b = col;
        if (b != 0) {
            for (;;) {
                b -= 1;
                if (board[a][b] == 6 || board[a][b] == 5) return true;
                if (board[a][b] != 0 || b == 0) break;
            }
        }

        if (row &gt; 0 &amp;&amp; col &lt; 6 &amp;&amp; board[row - 1][col + 2] == 3)return true;
        if (row &gt; 1 &amp;&amp; col &lt; 7 &amp;&amp; board[row - 2][col + 1] == 3)return true;
        if (row &lt; 7 &amp;&amp; col &lt; 6 &amp;&amp; board[row + 1][col + 2] == 3)return true;
        if (row &lt; 6 &amp;&amp; col &lt; 7 &amp;&amp; board[row + 2][col + 1] == 3)return true;
        if (row &lt; 6 &amp;&amp; col &gt; 0 &amp;&amp; board[row + 2][col - 1] == 3)return true;
        if (row &lt; 7 &amp;&amp; col &gt; 1 &amp;&amp; board[row + 1][col - 2] == 3)return true;
        if (row &gt; 1 &amp;&amp; col &gt; 0 &amp;&amp; board[row - 2][col - 1] == 3)return true;
        if (row &gt; 0 &amp;&amp; col &gt; 1 &amp;&amp; board[row - 1][col - 2] == 3)return true;

        if (row != 7 &amp;&amp; board[row + 1][col] == 10)return true;
        if (row != 0 &amp;&amp; board[row - 1][col] == 10)return true;
        if (col != 7 &amp;&amp; board[row][col + 1] == 10) return true;
        if (col != 0 &amp;&amp; board[row][col - 1] == 10) return true;
        if (row != 7 &amp;&amp; col != 7 &amp;&amp; board[row + 1][col + 1] == 10)return true;
        if (row != 7 &amp;&amp; col != 0 &amp;&amp; board[row + 1][col - 1] == 10) return true;
        if (row != 0 &amp;&amp; col != 7 &amp;&amp; board[row - 1][col + 1] == 10) return true;
        if (row != 0 &amp;&amp; col != 0 &amp;&amp; board[row - 1][col - 1] == 10) return true;

    }

    return false;
}

void Chess2::getdiagonalmoves(bool turn, int row, int col) {

    int a, b;
    if (turn) {
        a = row;
        b = col;
        if (a != 0 &amp;&amp; b != 0) {
            for (;;) {
                a -= 1;
                b -= 1;
                if (board[a][b] &gt; 0) break;
                if (board[a][b] &lt; 0 || a == 0 || b == 0) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b])pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (a != 0 &amp;&amp; b != 7) {
            for (;;) {
                a -= 1;
                b += 1;
                if (board[a][b] &gt; 0) break;
                if (board[a][b] &lt; 0 || a == 0 || b == 7) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b])pseudomoves.push_back(push(row, col, a, b));

            }
        }
        a = row;
        b = col;
        if (a != 7 &amp;&amp; b != 7) {
            for (;;) {
                a += 1;
                b += 1;
                if (board[a][b] &gt; 0) break;
                if (board[a][b] &lt; 0 || a == 7 || b == 7) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b])pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (a != 7 &amp;&amp; b != 0) {
            for (;;) {
                a += 1;
                b -= 1;
                if (board[a][b] &gt; 0) break;
                if (board[a][b] &lt; 0 || a == 7 || b == 0) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b])pseudomoves.push_back(push(row, col, a, b));
            }
        }
    }
    else if (!turn) {

        a = row;
        b = col;
        if (a != 0 &amp;&amp; b != 0) {
            for (;;) {
                a -= 1;
                b -= 1;
                if (board[a][b] &lt; 0) break;
                if (board[a][b] &gt; 0 || a == 0 || b == 0) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b])pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (a != 0 &amp;&amp; b != 7) {
            for (;;) {
                a -= 1;
                b += 1;
                if (board[a][b] &lt; 0)
                    break;
                if (board[a][b] &gt; 0 || a == 0 || b == 7) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (board[a][b] == 0)
                    pseudomoves.push_back(push(row, col, a, b));

            }
        }
        a = row;
        b = col;
        if (a != 7 &amp;&amp; b != 7) {
            for (;;) {
                a += 1;
                b += 1;
                if (board[a][b] &lt; 0) break;
                if (board[a][b] &gt; 0 || a == 7 || b == 7) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b])pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (a != 7 &amp;&amp; b != 0) {
            for (;;) {
                a += 1;
                b -= 1;
                if (board[a][b] &lt; 0) break;
                if (board[a][b] &gt; 0 || a == 7 || b == 0) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b])pseudomoves.push_back(push(row, col, a, b));
            }
        }

    }
}

void Chess2::getstraigtmoves(bool turn, int row, int col)
{
    int a, b;
    if (turn) {// white player
        a = row;
        b = col;
        if (a != 0) {
            for (;;) {
                a -= 1;
                if (board[a][b] &gt; 0) break;
                if (board[a][b] &lt; 0 || a == 0) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b]) pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (a != 7) {
            for (;;) {
                a += 1;
                if (board[a][b] &gt; 0) break;
                if (board[a][b] &lt; 0 || a == 7) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b]) pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (b != 0) {
            for (;;) {
                b -= 1;
                if (board[a][b] &gt; 0) break;
                if (board[a][b] &lt; 0 || b == 0) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b]) pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (b != 7) {
            for (;;) {
                b += 1;
                if (board[a][b] &gt; 0) break;
                if (board[a][b] &lt; 0 || b == 7) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b]) pseudomoves.push_back(push(row, col, a, b));
            }
        }
    }

    else if (!turn) // black player
    {
        a = row;
        b = col;
        if (a != 0) {
            for (;;) {
                a -= 1;
                if (board[a][b] &lt; 0) break;
                if (board[a][b] &gt; 0 || a == 0) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b]) pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (a != 7) {
            for (;;) {
                a += 1;
                if (board[a][b] &lt; 0) break;
                if (board[a][b] &gt; 0 || a == 7) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b]) pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (b != 0) {
            for (;;) {
                b -= 1;
                if (board[a][b] &lt; 0) break;
                if (board[a][b] &gt; 0 || b == 0) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b]) pseudomoves.push_back(push(row, col, a, b));
            }
        }
        a = row;
        b = col;
        if (b != 7) {
            for (;;) {
                b += 1;
                if (board[a][b] &lt; 0) break;
                if (board[a][b] &gt; 0 || b == 7) {
                    pseudomoves.push_back(push(row, col, a, b));
                    break;
                }
                if (!board[a][b]) pseudomoves.push_back(push(row, col, a, b));
            }
        }
    }
    //returnpseudomoves;
}

void Chess2::getknightmoves(bool turn, int row, int col) {

    if (turn) {

        if (row &gt; 0 &amp;&amp; col &lt; 6 &amp;&amp; board[row - 1][col + 2] &lt;= 0) // one up two right
            pseudomoves.push_back(push(row, col, row - 1, col + 2));

        if (row &gt; 1 &amp;&amp; col &lt; 7 &amp;&amp; board[row - 2][col + 1] &lt;= 0) // two up one right
            pseudomoves.push_back(push(row, col, row - 2, col + 1));

        if (row &lt; 7 &amp;&amp; col &lt; 6 &amp;&amp; board[row + 1][col + 2] &lt;= 0) // one down two right
            pseudomoves.push_back(push(row, col, row + 1, col + 2));

        if (row &lt; 6 &amp;&amp; col &lt; 7 &amp;&amp; board[row + 2][col + 1] &lt;= 0) // two down one right
            pseudomoves.push_back(push(row, col, row + 2, col + 1));

        if (row &lt; 6 &amp;&amp; col &gt; 0 &amp;&amp; board[row + 2][col - 1] &lt;= 0) //two down one left
            pseudomoves.push_back(push(row, col, row + 2, col - 1));

        if (row &lt; 7 &amp;&amp; col &gt; 1 &amp;&amp; board[row + 1][col - 2] &lt;= 0) // one down two left
            pseudomoves.push_back(push(row, col, row + 1, col - 2));

        if (row &gt; 1 &amp;&amp; col &gt; 0 &amp;&amp; board[row - 2][col - 1] &lt;= 0) // two up one left
            pseudomoves.push_back(push(row, col, row - 2, col - 1));

        if (row &gt; 0 &amp;&amp; col &gt; 1 &amp;&amp; board[row - 1][col - 2] &lt;= 0) // one up two left
            pseudomoves.push_back(push(row, col, row - 1, col - 2));
    }

    else if (!turn) {
        if (row &gt; 0 &amp;&amp; col &lt; 6 &amp;&amp; board[row - 1][col + 2] &gt;= 0)pseudomoves.push_back(push(row, col, row - 1, col + 2));
        if (row &gt; 1 &amp;&amp; col &lt; 7 &amp;&amp; board[row - 2][col + 1] &gt;= 0)pseudomoves.push_back(push(row, col, row - 2, col + 1));
        if (row &lt; 7 &amp;&amp; col &lt; 6 &amp;&amp; board[row + 1][col + 2] &gt;= 0)pseudomoves.push_back(push(row, col, row + 1, col + 2));
        if (row &lt; 6 &amp;&amp; col &lt; 7 &amp;&amp; board[row + 2][col + 1] &gt;= 0)pseudomoves.push_back(push(row, col, row + 2, col + 1));
        if (row &lt; 6 &amp;&amp; col &gt; 0 &amp;&amp; board[row + 2][col - 1] &gt;= 0)pseudomoves.push_back(push(row, col, row + 2, col - 1));
        if (row &lt; 7 &amp;&amp; col &gt; 1 &amp;&amp; board[row + 1][col - 2] &gt;= 0)pseudomoves.push_back(push(row, col, row + 1, col - 2));
        if (row &gt; 1 &amp;&amp; col &gt; 0 &amp;&amp; board[row - 2][col - 1] &gt;= 0)pseudomoves.push_back(push(row, col, row - 2, col - 1));
        if (row &gt; 0 &amp;&amp; col &gt; 1 &amp;&amp; board[row - 1][col - 2] &gt;= 0)pseudomoves.push_back(push(row, col, row - 1, col - 2));
    }

    //returnpseudomoves;
}

void Chess2::getpawnmoves(bool turn, int row, int col) {
    if (turn) {
        if (row == 6 &amp;&amp; board[row - 1][col] == 0 &amp;&amp; board[row - 2][col] == 0)
            pseudomoves.push_back(push(row, col, row - 2, col));
        if (board[row - 1][col] == 0)
            pseudomoves.push_back(push(row, col, row - 1, col));
        if (col != 0 &amp;&amp; board[row - 1][col - 1] &lt; 0)
            pseudomoves.push_back(push(row, col, row - 1, col - 1));
        if (col != 7 &amp;&amp; board[row - 1][col + 1] &lt; 0)
            pseudomoves.push_back(push(row, col, row - 1, col + 1));
    }

    else if (!turn) {
        if (row == 7) //returnpseudomoves;

            if (row == 1 &amp;&amp; board[row + 1][col] == 0 &amp;&amp; board[row + 2][col] == 0)
                pseudomoves.push_back(push(row, col, row + 2, col));
        if (board[row + 1][col] == 0)
            pseudomoves.push_back(push(row, col, row + 1, col));
        if (col != 0 &amp;&amp; board[row + 1][col - 1] &gt; 0)
            pseudomoves.push_back(push(row, col, row + 1, col - 1));
        if (col != 7 &amp;&amp; board[row + 1][col + 1] &gt; 0)
            pseudomoves.push_back(push(row, col, row + 1, col + 1));
    }

    //returnpseudomoves;
}

void Chess2::getkingmoves(bool turn, int row, int col) {

    if (!turn) {
        if (row != 7 &amp;&amp; board[row + 1][col] &gt;= 0) pseudomoves.push_back(push(row, col, row + 1, col));
        if (row != 0 &amp;&amp; board[row - 1][col] &gt;= 0) pseudomoves.push_back(push(row, col, row - 1, col));
        if (col != 7 &amp;&amp; board[row][col + 1] &gt;= 0) pseudomoves.push_back(push(row, col, row, col + 1));
        if (col != 0 &amp;&amp; board[row][col - 1] &gt;= 0) pseudomoves.push_back(push(row, col, row, col - 1));
        if (row != 7 &amp;&amp; col != 7 &amp;&amp; board[row + 1][col + 1] &gt;= 0) pseudomoves.push_back(push(row, col, row + 1, col + 1));
        if (row != 7 &amp;&amp; col != 0 &amp;&amp; board[row + 1][col - 1] &gt;= 0) pseudomoves.push_back(push(row, col, row + 1, col - 1));
        if (row != 0 &amp;&amp; col != 7 &amp;&amp; board[row - 1][col + 1] &gt;= 0) pseudomoves.push_back(push(row, col, row - 1, col + 1));
        if (row != 0 &amp;&amp; col != 0 &amp;&amp; board[row - 1][col - 1] &gt;= 0) pseudomoves.push_back(push(row, col, row - 1, col - 1));
    }
    else if (turn) {
        if (row != 7 &amp;&amp; board[row + 1][col] &lt;= 0) pseudomoves.push_back(push(row, col, row + 1, col));
        if (row != 0 &amp;&amp; board[row - 1][col] &lt;= 0) pseudomoves.push_back(push(row, col, row - 1, col));
        if (col != 7 &amp;&amp; board[row][col + 1] &lt;= 0) pseudomoves.push_back(push(row, col, row, col + 1));
        if (col != 0 &amp;&amp; board[row][col - 1] &lt;= 0) pseudomoves.push_back(push(row, col, row, col - 1));
        if (row != 7 &amp;&amp; col != 7 &amp;&amp; board[row + 1][col + 1] &lt;= 0) pseudomoves.push_back(push(row, col, row + 1, col + 1));
        if (row != 7 &amp;&amp; col != 0 &amp;&amp; board[row + 1][col - 1] &lt;= 0) pseudomoves.push_back(push(row, col, row + 1, col - 1));
        if (row != 0 &amp;&amp; col != 7 &amp;&amp; board[row - 1][col + 1] &lt;= 0) pseudomoves.push_back(push(row, col, row - 1, col + 1));
        if (row != 0 &amp;&amp; col != 0 &amp;&amp; board[row - 1][col - 1] &lt;= 0) pseudomoves.push_back(push(row, col, row - 1, col - 1));
    }
    //returnpseudomoves;
}

int Chess2::evaluation() {
    int score;
    for (int i = 0; i &lt; 8; i++) {
        for (int j = 0; j &lt; 8; j++) {
            if (!board[i][j]) continue;
            if (board[i][j] == 1) score -= 10;
            else if (board[i][j] == 2)score -= 30;
            else if (board[i][j] == 3)score -= 30;
            else if (board[i][j] == 5)score -= 50;
            else if (board[i][j] == 6)score -= 90;
            else if (board[i][j] == 10)score -= 900;
            else if (board[i][j] == -1)score += 10;
            else if (board[i][j] == -2)score += 30;
            else if (board[i][j] == -3)score += 30;
            else if (board[i][j] == -5)score += 50;
            else if (board[i][j] == -6)score += 60;
            else if (board[i][j] == -10)score += 900;

        }
    }
    return score;
}

int Chess2::miniMax(int depth, bool ismax, int alpha, int beta) {
    if (depth == 0) {
        return evaluation();
    }
    int maxeval = -999999;
    int mineval = 999999;
    buff possiblemoves;
    int original;
    int eval;
    if (ismax == true) {
        possiblemoves = getallmoves(false);
        for (long unsigned int i = 0; i &lt; possiblemoves.size(); i++) {
            original = perform(possiblemoves[i]);
            eval = miniMax(depth - 1, false, alpha, beta);
            undomove(original, possiblemoves[i]);
            if (eval &gt; maxeval)
                maxeval = eval;
            if (alpha &gt;= eval)
                alpha = eval;
            if (beta &lt;= alpha)
                break;
        }
        return maxeval;
    }
    else {
        possiblemoves = getallmoves(true);
        for (long unsigned int i = 0; i &lt; possiblemoves.size(); i++) {
            original = perform(possiblemoves[i]);
            eval = miniMax(depth - 1, true, alpha, beta);
            undomove(original, possiblemoves[i]);
            if (eval &lt; mineval)
                mineval = eval;
            if (beta &lt;= eval)
                beta = eval;
            if (beta &lt;= alpha)
                break;
        }
        return mineval;
    }

}

str Chess2::miniMaxroot(int depth, bool turn) {
    str bestmove;
    int maxeval = -9999999;
    buff allmoves = getallmoves(turn);
    int original;
    int eval;
    for (long unsigned int i = 0; i &lt; allmoves.size(); i++) {
        original = perform(allmoves[i]);
        eval = miniMax(depth - 1, false, -99999999, 99999999);
        std::cout &lt;&lt; "Move: " &lt;&lt; allmoves[i] &lt;&lt; " Points: " &lt;&lt; eval &lt;&lt; "\n";
        undomove(original, allmoves[i]);
        if (eval &gt; maxeval) {
            maxeval = eval;
            bestmove = allmoves[i];
        }
    }
    return bestmove;
}
void Chess2::undomove(int original, str Move) {
    board[Move[0] - 48][Move[1] - 48] = board[Move[2] - 48][Move[3] - 48];
    board[Move[2] - 48][Move[3] - 48] = original;
}
</code></pre>
    </div>