<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry, I probably should have used a "comment" for this, but it is way bigger than their limited size.</p>

<p>In all fairness I did not read your code in full; I only scanned it.  The thing that struck me as I was reading, is that this is incredibly hard to do well.  Assuming a robust enterprise environment, you run into all kinds of issues that take lots of thought and lots of code to deal with.</p>

<ul>
<li>What happens if a thread/process/machine dies before processing a message?</li>
<li>What happens if you need to go multi-process or multi-server because of load?</li>
<li>What happens if what you want to send to a process or system that isn't up yet?</li>
</ul>

<p>These and 100s more issues just seem to show themselves over time.</p>

<p>I'd use RabbitMQ instead (though I understand Microsoft also has a messaging offering). 
 RabbitMQ is very robust.  If you need bulletproofing, you can set up servers on multiple
machines such that if one goes down, no messages are lost.  And there all kinds of fanout options and keeping of messages even if the receiver is down.  Even if you are in a single process on a single machine, RabbitMQ offers you options and protections you are going to want and haven't thought of yet.</p>

<p>Your first thought might be, but I don't want to make a multi-process call because it is too expensive.  Since I didn't read your code, perhaps I am completely off base here.  However, I claim that if this is for an enterprise-level system you are going to want more eventually.</p>

<p>The other thing you could do is switch to C# and use delegates which are built into the language.</p>
    </div>