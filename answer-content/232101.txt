<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation depends on <code>this.leaderboard.sort((a, b) =&gt; a.score - b.score);</code>. Each and every time you insert, you sort again.</p>

<p>Depending on your access pattern, you could defer the sorting from <em>adding</em> to <em>reading</em>.</p>

<p>You could operate with a dictionary keeping the scores unorderd which makes inserting fast. And sort the entries only in case if you read them.</p>

<p><em>For the sake of the example I used plain numbers</em></p>

<pre><code>let leaderboard = {
}

const addScore = (board, score) =&gt; {
  if(!board[score]) board[score] = []
  board[score].push(score)
  return board;
}

const getcurrentRanks = (board) =&gt; {
    const scoreranks = Object.keys(board).sort((a,b)=&gt;b-a)
    return scoreranks.reduce((o,n )=&gt;{
        return o.concat(board[n]);
    }, []);
}
</code></pre>

<p>But this has the downside of converging to your first implementation the more you read; e.g. for each time you insert a value you want to get all the ranks.</p>

<p>Otherwise I would encourage you to look into <a href="https://en.wikipedia.org/wiki/Priority_queue" rel="nofollow noreferrer">priority queues</a>.</p>
    </div>