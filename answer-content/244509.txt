<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suggest avoiding <code>static</code> state. It makes your code more rigid. It works for this very simple app, but the limitations become more apparent in more complex apps. You should remove the <code>static</code> keywords from your two lists and the <code>runPlaylist</code> method. You can instantiate an instance of the class to use in <code>main()</code> and call public methods on it.</p>
<p>Some of your functionality doesn't employ separation of concerns. For example, your <code>Album</code> class has an <code>addToPlaylist</code> method. The functionality of the method is to check if the given <code>Song</code> is a member of the <code>Album</code> and only add it to the provided list if it is. The only part of that having anything to do with the <code>Album</code> is seeing if it owns the <code>Song</code>. Having the <code>Album</code> responsible for all that other behavior is tangling up your classes. On a large-scale, complicated project, this kind of code would become very difficult to maintain.</p>
<p>So, I would remove <code>addToPlaylist</code> and <code>removeFromPlaylist</code> from the <code>Album</code> class. I would change the method <code>checkAlbum</code> to <code>containsSong</code> (names are important for code legibility!) and return a <code>boolean</code>. Those two removed methods should be moved up to the <code>Main</code> class, since it is the owner of the <code>Album</code> and the <code>Playlist</code> and so it is the one that knows what it wants to do with a Song.</p>
<p>You are currently comparing <code>Song</code>s by their <code>title</code> field. This requires other classes (in this case <code>Album</code>) to dig into its internals to be able to compare <code>Song</code>s. Instead, you should have <code>Album</code> override <code>equals()</code> and provide the behavior you want. Since you are currently ignoring the <code>duration</code>, you can do that in its <code>equals</code> method. Now your code will be more maintainable, because you can change this behavior in a single location, and it's the most logical location. Also, it will help you replace some of these verbose <code>for</code> loops with simple <code>contains()</code> calls. <em>(Note, if you override equals, you should always override <code>hashcode</code> as well. The IDE can help you generate these together.)</em></p>
<p>I would also change the parameters for <code>Album.addSong()</code> and <code>removeSong()</code> to take a <code>Song</code> instance instead of making <code>Album</code> responsible for instantiating <code>Song</code>s.</p>
<p>And a tip. Use <code>final</code> when declaring fields that don't need to change, especially collections. This reduces the number of mutable things you have to keep track of. When you have a non-final <code>List</code> field, it is mutable in two different ways: you could change the contents of the list or replace the list entirely. Keep it simpler by restricting that to one way of modifying it.</p>
    </div>