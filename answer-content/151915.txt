<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>public MikesBigInt(int n)</code></h2>

<p>There are quite a few improvements you can make here :</p>

<blockquote>
<pre><code>public MikesBigInt(int n)
{
    int l = n.ToString().Length;
    digits = new List&lt;int&gt;();
    for (int i = n.ToString().Length; i-- &gt; 0;)
    {
        digits.Add(n.ToString()[i] - 48);
    }
}
</code></pre>
</blockquote>

<ol>
<li><p>You are not using the <code>l</code> variable.</p></li>
<li><p>You are constantly calling <code>.ToString()</code> on a variable that hasn't changed value, since the first call. You can add a helper <code>string</code> variable to improve performance as calling obviously it's better to call <code>.ToString()</code> just once. <strong>You are doing this in most of your methods</strong></p></li>
<li><p>The for loop is really weird, there is a designed place where you change the value of the looping variable (the last segment of the loop), why are you not using that ? + I don't see any reason for the inverse logic here.</p></li>
<li><p>You should (when possible) specify the length of a list to avoid unnecessary memory allocation. <code>new List&lt;int&gt;(length)</code></p></li>
<li><p>Lastly the entire method can be replaced with some LINQ as it wont affect the performance all that much since you are working with ints only which are rather short in digits length :</p>

<pre><code>public MikesBigInt(int n)
{
    digits = n.ToString().Select(c =&gt; (int) char.GetNumericValue(c)).ToList();
}
</code></pre>

<p>If the inversion logic is necessary for your code to work you can do :</p>

<pre><code>public MikesBigInt(int n)
{
    digits = n.ToString().Select(c =&gt; (int)char.GetNumericValue(c)).Reverse().ToList();
}
</code></pre></li>
</ol>

<h2><code>public int ToInt()</code></h2>

<ol>
<li><p>This is weird method, I don't think it should be there at all. You should be using your BigInt only when the values are bigger than what int/long can handle, than what's the point of converting it to int ? Odds are that it will overflow the int too.</p></li>
<li><p>You can use some LINQ here too :</p>

<pre><code>public int ToInt()
{
    return digits.Select((t, i) =&gt; t * (int) Math.Pow(10, i)).Sum();
}
</code></pre></li>
</ol>

<h2>Overall design</h2>

<p><strong>Arithmetic operations</strong></p>

<ol>
<li><p>Any operations that you have should return some result instead of saving the value in the current instance of the object. When you add 2 integer values together you get some result right ? Your variable should be able to work as a normal data type.</p></li>
<li><p>Having that said your operations should be methods in the first place, instead you should override some operators, which can be done like this :</p>

<pre><code>public static MikesBigInt operator +(MikesBigInt first, MikesBigInt second)
{
    // do your logic here
}
</code></pre></li>
</ol>
    </div>