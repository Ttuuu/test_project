<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You need to work on your names. Looking at your github repo, this file is pro_ref2.py? The class name is FootballRefScraper. The site chosen is pro-football-reference.com? What is going on here?</p>

<p>I don't know why this class exists. The class name should make it obvious. Does this thing exist to be a scraper? Or does it exist to be a data source? IMO, it does not exist to be a scraper, because that would imply it was one of many scrapers and so it would probably be a subclass of some <code>AbstractScraper</code> base class. So I think it's a data source, but then why is it called <code>...Scraper</code>? Also, what kind of data source is it? Apparently <code>FootballRef</code>, but again what's that?</p>

<p>Assuming this is really intended to be a data source, give the class a better name. <code>FootballStatistics</code> or <code>NflStatistics</code> make more sense. Alternatively, you might name it after the website, in which case calling it <code>ProFootballReference</code> would seem logical.</p>

<p>If this file contains only the one class, then I suggest you rename the file to <code>pfr.py</code> or <code>profootballreference.py</code> or some such, and then maybe name the class something like <code>Gateway</code> or <code>API</code>. Finally, don't call it <code>get_tables</code>. Call it <code>get_stats</code> since thats what you provide. (You're returning a DataFrame, but you wouldn't call it <code>get_df</code> unless there was some alternate flavor to get...)</p>

<pre><code>import pfr                       | import pfr
gateway = pfr.Gateway()          | api = pfr.API()
df = gateway.get_stats(...)      | df = api.get_stats(...)
</code></pre></li>
<li><p>As a corollary to #1, consider adding explicit methods for each of the table access calls. Instead of calling <code>df = gateway.get_stats(..., table_type='passing')</code> it would be easier and clearer to simply say <code>df = gateway.get_passing_stats(...)</code>. Not to mention that a missing method name is easier to debug than a call with a misspelled text string (and your editor might auto-suggest/auto-correct the method!).</p></li>
<li><p>Don't store the table types and kicking table rename data in the instances. That is class data:</p>

<pre><code>class No:
    def __init__(self):
        self.foo = 'foo' # No

class Yes:
    foo = 'foo' # Yes

    def __init__(self):
        pass
</code></pre></li>
<li><p>The <code>.tables</code> property should be <code>.table_types</code> or <code>.stats_types</code></p></li>
<li><p>The <code>get_data</code> (a.k.a. <code>get_stats</code>) function has an awkward interface. Instead of trying to jam everything into <code>start_year</code> and <code>end_year</code>, try allowing multiple named parameters and requiring them to be exclusive. Also, be willing to accept multiple parameter types:</p>

<pre><code># Cannot use year=, years= in same call
df = api.get_passing_stats(year=2017)  
df = api.get_passing_stats(years=(2013, 2017)) # Two explicit years
df = api.get_passing_stats(years=range(2011, 2019, 2)) # Only odd year data?

# Cannot use tables= in get_XXX_stats call.
# Cannot use table= and tables= in same call
df = api.get_stats(year=2018, table='kicking')
df = api.get_stats(years=(2017, 2018), tables=('passing', 'running', 'scoring'))
</code></pre>

<ol start="6">
<li>Don't be afraid of a DataFrame with &gt;2 dimensions. If someone requests passing, running, and kicking data for 2014, 2018, and 2018, then return a single dataframe with 4 dimensions (year, table, player, stats).</li>
</ol></li>
<li><p><code>get_data</code> should automatically strip off the pro-bowl and all-pro data, and add separate columns for that. </p></li>
<li><p>Your _check_start_and_end_years method doesn't actually check. What happens if I request data for 1861?</p></li>
</ol>
    </div>