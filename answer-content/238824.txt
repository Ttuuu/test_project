<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>As others have mentioned, your tabbing has quite the negative impact on readability.</li>
<li>As dusty stated, you can safely declare <code>$collection</code> as <code>private</code>.</li>
<li>There is no reason to check if the <code>$collected</code> class object is declared or if the designated <code>$key</code> exists before pushing an element into it.  Just push that sucker in there!</li>
<li>In <code>captureShutdown()</code> method there is some redundant scripting which can be easily cleaned up with the coalescing operator like this: <code>self::addError('shutdown', error_get_last() ?? '&lt;none&gt;');</code>. You are declaring a <code>return</code> value, but the static call is not doing anything with it -- so it can be omitted.</li>
<li>On second thought, I actually don't like the fact that sometimes the <code>captureShutdown()</code> method conditionally passes a string or an array as the second parameter of <code>addError</code>.  I would prefer this class to generate consistently typed items in <code>$collected</code> so that pumping the data into the view is cleaner. For those who are not instantly aware, <a href="https://www.php.net/manual/en/function.error-get-last.php" rel="nofollow noreferrer">error_get_last()</a> returns <code>null</code> or an array with the keys: <code>type</code>, <code>message</code>, <code>file</code> and <code>line</code>.  Instead of <code>error_get_last() ?? '&lt;none&gt;'</code>, maybe it would be better to craft a very human/English string for either outcome.</li>
</ul>

<p>Your class: </p>

<pre><code>class MyError
{
    private static $collected = [];

    public static function getCollectedErrors()
    {
        return self::$collected;
    }

    private static function addError($key, $error)
    {
        self::$collected[$key][] = $error;
    }

    public static function captureNormal($number, $message, $file, $line)
    {
        self::addError('error', "{$number}: {$message} at {$file}:{$line}");
    }

    public static function captureException($exception)                   
    {
        self::addError('exception', $exception);
    }

    public static function captureShutdown()
    {
        // self::addError('shutdown', error_get_last() ?? '&lt;none&gt;');
        $lastError = error_get_last();
        if ($lastError) {
            $message = "{$lastError['type']}: {$lastError['message']}"
                     . " at {$lastError['file']}:{$lastError['line']}";
        } else {
            $message = "No errors present at shutdown";
        }
        self::addError('shutdown', $message);
    }
}

set_error_handler(['MyError', 'captureNormal']);
set_exception_handler(['MyError', 'captureException']);
register_shutdown_function(['MyError', 'captureShutdown']);
</code></pre>

<ul>
<li>I have concerns about your mixing of strings and array in the <code>echo</code> of your inner <code>foreach()</code> -- that can't be working out well.</li>
<li>Move all of your inline styles to an external stylesheet to make the markup more readable.</li>
</ul>

<p>Your content:</p>

<pre><code>$errors = MyError::getCollectedErrors();
$messages = '';
foreach ($errors as $category =&gt; $message) {
    $messages .= "&lt;div&gt;&lt;h3 class=\"category\"&gt;{$category}&lt;/h3&gt;";
    $messages .= '&lt;div&gt;' . implode('&lt;/div&gt;&lt;div&gt;', $message) . '&lt;/div&gt;&lt;/div&gt;';
}
if ($messages) {
    echo '&lt;div id="draggableErrorModal"&gt;
              &lt;div id="draggableErrorModalHeader"&gt;
                  Draggable Error Modal
              &lt;/div&gt;
              &lt;div id="draggableErrorModalClose"&gt;&amp;times;&lt;/div&gt;
              &lt;div id="draggableErrorModalBody"&gt;' . $messages . '&lt;/div&gt;
          &lt;/div&gt;';
}
</code></pre>

<p>Okay, I whipped up a basic modal with a few little UX niceties via pure javascript and css such as the ability to be dragged, resized, and closed so that the notification is always in your face but also very easy to tuck away to reveal the page content.  You can style it to your heart's content. Have a play.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>if (document.getElementById("draggableErrorModal")) {
  document.getElementById("draggableErrorModalClose").addEventListener('click', function(){
    document.getElementById("draggableErrorModal").style.display = 'none';
  });
  
  dragElement(document.getElementById("draggableErrorModal"));

  function dragElement(errorModal) {
    let pos1 = 0,
        pos2 = 0,
        pos3 = 0,
        pos4 = 0;
      
    document.getElementById(errorModal.id + "Header").onmousedown = dragMouseDown;

    function dragMouseDown(e) {
      e = e || window.event;
      e.preventDefault();
      // get the mouse cursor position at startup:
      pos3 = e.clientX;
      pos4 = e.clientY;
      document.onmouseup = closeDragElement;
      // call a function whenever the cursor moves:
      document.onmousemove = elementDrag;
    }

    function elementDrag(e) {
      e = e || window.event;
      e.preventDefault();
      // calculate the new cursor position:
      pos1 = pos3 - e.clientX;
      pos2 = pos4 - e.clientY;
      pos3 = e.clientX;
      pos4 = e.clientY;
      // set the element's new position:
      errorModal.style.top = (errorModal.offsetTop - pos2) + "px";
      errorModal.style.left = (errorModal.offsetLeft - pos1) + "px";
    }

    function closeDragElement() {
      // stop moving when mouse button is released:
      document.onmouseup = null;
      document.onmousemove = null;
    }
  }
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>#draggableErrorModal {
  position: absolute;
  z-index: 9;
  background-color: white;
  border: 1px solid #ff5500;
  top: 0;
  left: 0;
  resize: both;
  overflow: auto;
}

#draggableErrorModalHeader {
  padding: 10px;
  text-align: center;
  cursor: move;
  background-color: lightgrey;
  color: #ff8800;
}

#draggableErrorModalClose {
  position: absolute;
  z-index: 10;
  top: 2px;
  right: 4px;
  font-size: 30px;
  cursor: pointer;
}

#draggableErrorModalBody {
  padding: 20px;
}

#draggableErrorModalBody div:nth-child(odd) {
  background-color: #efefef;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;body&gt;
&lt;div class="regularContent"&gt;content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content&lt;/div&gt;
&lt;div id="draggableErrorModal"&gt;
  &lt;div id="draggableErrorModalHeader"&gt;
    Draggable Error Modal
  &lt;/div&gt;
  &lt;div id="draggableErrorModalClose"&gt;&amp;times;&lt;/div&gt;
  &lt;div id="draggableErrorModalBody"&gt;
    &lt;div&gt;Message 1: This is where your&lt;br&gt;errors will be.&lt;/div&gt;
    &lt;div&gt;Message 2: This is where your errors will be.&lt;/div&gt;
    &lt;div&gt;Message 3: Your errors will be here and the modal can be resized and closed entirely.&lt;/div&gt;
    &lt;div&gt;Message 4: This is where your&lt;br&gt;errors will be.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;</code></pre>
</div>
</div>

    </div>