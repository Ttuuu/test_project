<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well for a start, choose a style: Use the enhanced for loop, or use explicit iterators. Don't use one in one place and another in another. Other than that, I'm not seeing enough similar in the loops to justify spending any time on it as opposed to, say, actually getting something else done. :-)</p>

<p>But if you really, really want to, you can create an interface that evaluates loop conditions, implement concrete classes for the two situations, and use them. I don't think it buys you much.</p>

<p>(The below also fixes the false negative if you have exactly two members and they're both new joiners.)</p>

<p>Definition:</p>

<pre><code>abstract class LoopEvaluator&lt;T&gt; {
    public boolean eval(List&lt;T&gt; list) {
        for (T element : list) {
            if (this.evalElement(element)) {
                return true;
            }
        }
        return false;
    }
    abstract boolean evalElement(T element);
}

class LookForLeaders&lt;T extends Member&gt; extends LoopEvaluator&lt;T&gt; {
    @override
    public bool evalElement(T element) {
        return element.getRole().equals("Leader");
    }
}

class LookForTwoNewJoiners extends LoopEvaluator&lt;T&gt; {
    private int newJoiners;

    @override
    public boolean eval(List&lt;T&gt; list) {

        this.newJoiners = 0;

        return super.eval(list);
    }

    @override
    public boolean evalElement(T element) {
        DateTime aMonthAgo = DateTime.now().minusMonths(1);
        if(member.startingDate().isAfter(aMonthAgo)) {
           this.newJoiners++;
        }
        return newJoiners == 2;
    }
}
</code></pre>

<p>Use:</p>

<pre><code>public class TeamValidator {       

    @override
    public boolean isThereALeader(List&lt;Member&gt; team) {  
        return new LookForLeader().eval(team);
    }  

    @override
    public boolean areThereAtLeast2NewJoiners(List&lt;Member&gt; team) { 
        return new LookForTwoNewJoiners().eval(team);
    }
}
</code></pre>

<p>It's late and I haven't double-checked the syntax, but you get the idea...</p>
    </div>