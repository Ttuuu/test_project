<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To speed this up further, you should use the <a href="https://stackoverflow.com/a/44606972/4042267"><code>numpy</code> interface of <code>PIL</code></a> (if you are not yet using <code>PIL</code>, you should, for this reason):</p>

<pre><code>from PIL import Image
import numpy as np

# `int` important because otherwise it might wrap around when subtracting
optimal_data = np.asarray(Image.open("optimal.png"), dtype=int) 
new = np.random.randint(0, 256, optimal_data.shape)

def fitness(optimal_data, new):
    return np.sqrt(((optimal_data - new)**2).sum(axis=-1)).sum()
</code></pre>

<p>This takes only 258 ms ± 2.21 ms for a 2424 x 2424 pixel image on my machine, while the <a href="https://codereview.stackexchange.com/a/79028/98493">function by @TimCPogue</a> takes 9.93 s ± 465 ms with the same images.</p>

<p>Note that the array has the shape <code>(width, height, channels)</code>, where <code>channels</code> is usually <code>4</code> (red, green, blue, alpha), not <code>3</code> like your code assumes. If you want to disregard differences in alpha, either set the alpha channel of the new image to the one of the optimal data (<code>new[:,:,-1] = optimal_data[:,:,-1]</code>), or slice in the fitness (<code>optimal_data[...,:-1] - new[...,:-1]</code>).</p>

<p>For some more readability and the possibility to use a different norm in the future (albeit at the cost of about 30% speed), you could make the norm to use a parameter and use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html" rel="nofollow noreferrer"><code>np.linalg.norm</code></a>, as <a href="https://codereview.stackexchange.com/questions/79023/improving-genetic-algorithm-fitness-function/209075#comment403968_209075">suggested in the comments</a> by <a href="https://codereview.stackexchange.com/users/11728/gareth-rees">@GarethReese</a>:</p>

<pre><code>def fitness(optimal_data, new, norm=np.linalg.norm):
    return norm(optimal_data - new, axis=-1).sum()
</code></pre>
    </div>