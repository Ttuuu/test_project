<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    Base64Encoder() = default;
    ~Base64Encoder() = default;
</code></pre>

<p>In general, if you want to explicitly provide special member functions, then explicitly provide them all. Others will advise that if you can avoid defining the special member functions, then do so. <a href="https://abseil.io/tips/131" rel="nofollow noreferrer">Read more here</a>.</p>

<pre><code>class Base64Encoder {
public:
    // ... no default operations declared ...
    const std::string encode(const std::string s) const;

private:
    // ...
</code></pre>

<hr>

<pre><code>    const std::string encode(const std::string s) const;
</code></pre>

<p><code>std::string</code> requires <code>&lt;string&gt;</code> be included.</p>

<p><code>s</code> is passed by value to <code>const</code>, which incurs an unnecessary copy.  Consider using <code>std::string_view</code> if you have <a href="/questions/tagged/c%2b%2b17" class="post-tag" title="show questions tagged 'c++17'" rel="tag">c++17</a>. <a href="https://abseil.io/tips/1" rel="nofollow noreferrer">Read more here</a>.</p>

<pre><code>    std::string encode(const std::string_view s) const;
</code></pre>

<p>Otherwise, pass by reference to <code>const</code>. </p>

<pre><code>    std::string encode(const std::string&amp; s) const;
</code></pre>

<hr>

<pre><code>    constexpr static unsigned char get_base_64_char(ulong number_of_char) {
        return base64_table.at(number_of_char);
    }
</code></pre>

<p><code>ulong</code> is not a standard unsigned integer type. If you need a fixed-size integer, consider one of the types from <code>&lt;cstdint&gt;</code> (e.g. <code>std::uint8_t</code>). For this use-case, I'd just use <code>std::size_t</code>. </p>

<p>Is <code>number_of_char</code> a clear description of what the value represents? Would <code>index</code> be clearer?</p>

<p>Do you need the bounds checking of <code>base64_table.at()</code>?</p>

<hr>

<pre><code>    const static unsigned char next_ascii(size_t current_index, const std::string s, size_t length_of_s);
</code></pre>

<p>The first <code>const</code> is unnecessary.</p>

<p><code>size_t</code> is not guaranteed by the standard to exist in the global namespace.  Use <code>std::size_t</code> and include <code>&lt;cstddef&gt;</code>. <a href="https://stackoverflow.com/a/36596739/3762339">Read more here</a>.</p>

<hr>

<pre><code>    const static size_t MINIMAL_B64_STRING_LENGTH = 4;
</code></pre>

<p>Consider reserving upper case names for the preprocessor.</p>

<p><code>constexpr</code>?</p>

<hr>

<pre><code>    std::stringstream encoding;
</code></pre>

<p>Do we need a <code>std::stringstream</code>? We can actually calculate the destination buffer length.  For base64 encoding, every 3 octets maps to 4 sextets.  To find the encoded length <span class="math-container">\$m\$</span>, find the total number of octets to be read (integral ceiling) and multiply it by the length of each sextet.</p>

<p><span class="math-container">$$m = 4 \dot ((n + 2) / 3)$$</span></p>

<hr>

<pre><code>    while (i &lt; length_of_s) {
        // if first sextet, ...
        // else if second sextet, ...
        // else if third sextet, ...
        // else must be fourth sextet ...
    }
</code></pre>

<p>Instead of cycling through each branch on every loop until you get to the sextet you are at, consider a modulo approach.  Loop through full sextet groups until you have a partial sextet group left at the end (the remainder). Then you can branch based on what you have left.</p>

<pre><code>    for (auto remaining_sextets = s.size() / 3; remaining_sextets--;) {
        encoded += /* first sextet masked and shifted */
        encoded += /* second sextet masked and shifted */
        encoded += /* third sextet masked and shifted */
        encoded += /* fourth sextet masked and shifted */
    }

    switch (len % 3) {
    case 2:
        encoded += /* first sextet masked and shifted */
        encoded += /* second sextet masked and shifted */
        encoded += /* third sextet masked and shifted */
        encoded += '=';
        break;
    case 1:
        encoded += /* first sextet masked and shifted */
        encoded += /* second sextet masked and shifted */
        encoded += '=';
        encoded += '=';
        break;
    case 0:
        break;
    }

    return encoded;
</code></pre>
    </div>