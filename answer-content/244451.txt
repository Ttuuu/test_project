<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use standard array notation</h1>
<p>When you are accessing array elements, the idiomatic way in C is to write <code>foo[bar]</code> instead of <code>*(foo + bar)</code>. So instead of:</p>
<pre><code>int next_number = *((i * rows + arr) + col);
</code></pre>
<p>Write:</p>
<pre><code>int next_number = arr[i * rows + col];
</code></pre>
<p>It is both shorted, and now it is clear what part the array pointer is and what part the index is.</p>
<h1>Avoid unnecessary memory allocations</h1>
<p>It's perfectly possible in C to return a <code>struct</code> by value. This avoids having to call <code>malloc()</code> and <code>free()</code>, and you no longer have to worry about its memory leaking, nor have to check whether <code>malloc()</code> succeeded. You do it like so:</p>
<pre><code>max_vector find_col_peak(int *arr, int rows, int col) {
    max_vector vector;

    // set max to the first item of the column
    vector.col_index = 0;
    vector.index_value = *(col + arr);

    ...

    return vector;
}
</code></pre>
<h1>About recursion</h1>
<p>With the above you don't have to worry about freeing memory for <code>vector</code> anymore. However, recursive calls themselves could have some memory overhead, since each call needs some amount of space on the stack. With this algorithm, you only need <code>log2(cols)</code> recursion levels, so that won't be an issue even for huge inputs. Also, the compiler can turn these recursive calls into <a href="https://en.wikipedia.org/wiki/Tail_call" rel="nofollow noreferrer">tail calls</a>.</p>
    </div>