<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>require</code> style</h1>

<p>I (and most of the Node developers I've worked with) prefer the style where <code>require</code> is put on top. As stated in the <a href="https://github.com/felixge/node-style-guide#requires-at-top" rel="nofollow noreferrer">guide you linked</a>, it gives a clearer overview of what are dependencies of the module/file you're writing. No one likes to see that if some condition is successful, then a new module will be loaded. It's just unnatural.</p>

<p>On the other hand, you shouldn't look at <code>const foo = require('bar')</code> as just another variable assignment and treat it as such when you're writing Node or any other JS code. Calling require function will load a file (<strong>if not previously loaded</strong>, <a href="http://fredkschott.com/post/2014/06/require-and-the-module-system/" rel="nofollow noreferrer">read more here</a>) and make its exported object available through the variable in the file you're writing. This same thing in some other language like C/C++ would be expressed as <code>#include &lt;foo&gt;</code>, which exposes the whole file to another file.</p>

<h1>Other things I've noted</h1>

<h2>Usage of <code>fs</code> module</h2>

<p>I see that you have helper functions that wrap <code>fs.readFile</code> and <code>fs.writeFile</code> in promises. I'm not sure if you are aware of 2 things:</p>

<ol>
<li>There is a <a href="https://nodejs.org/docs/latest-v10.x/api/util.html#util_util_promisify_original" rel="nofollow noreferrer">promisify</a> method which can do this for you.</li>
<li>There already exist <a href="https://nodejs.org/docs/latest-v10.x/api/fs.html#fs_fs_readfilesync_path_options" rel="nofollow noreferrer">promisifed versions</a> of this functions.</li>
</ol>

<p>My suggestion is to use <code>fs.readFileSync</code> and <code>fs.writeFileSync</code> instead of wrapping them yourself.</p>

<h2>Line 55</h2>

<p>I'm not sure what was your intention here, but you've just called a function which returns a promise without waiting for the promise to be resolved. Since you're writing to the disk, this operation might not finish once a function from your returned object gets called. I'd just add <code>await</code> here.</p>

<h1>Line 73</h1>

<p>First, add a space between the <code>)</code> and <code>?</code> to be consistent with the style you have for <code>:</code> and stuff around it.
Second, break that long condition into either a function, or to a several variables. I'd personally go here with functions: </p>

<pre><code>const notInvalidated = (invalidations, payload) =&gt; !invalidations[payload.userUuid] || payload.invalidationCounter === invalidations[payload.userUuid]
const hasValidIat = (invalidBefore, payload) =&gt; payload.iat &gt;= invalidBefore
</code></pre>

<p>And then your condition could be written as:</p>

<pre><code>notInvalidated(invalidationByUserUUID, payload) &amp;&amp; hasValidIat(invalidBefore, payload) ? payload : false
</code></pre>

<p>Still long, but more readable.</p>

<h2><code>module.exports</code> mess</h2>

<p>My personal preference is to have <code>module.exports</code> either export a function or an object, so make it as short as possible. But from your code on pastebin, it looks like your core logic is put there. For me, this is unreadable and I would look how to refactor this into something which will return either a single function or just a simple object.
In your case, I'd first move that function to a new named function, something like this:</p>

<pre><code>const myJwt = async (keyPath) =&gt; { /* the rest */ }

module.exports = myJwt
</code></pre>

<p>From there, I'd move the functions in the object you are returning to the file level:</p>

<pre><code>const generateNewKeyPair = async () =&gt; { /* ... */ }
/* also for sign, verify and invalidateOldUserToken */

const myJwt = async (keyPaht) =&gt; {
  /* whatever goes here */
  return {
    generateNewKeyPair,
    sign,
    verify,
    invalidateOldUserToken,
  }
}

module.exports = myJwt
</code></pre>

<p>This refactoring will be a bit tricky, because you have these two variables <code>invalidationByUserUUID</code> and <code>invalidBefore</code> which should be shared with the functions that I suggested extracting. You should maybe consider to wrap this in a class and return the class instead of a function. Either that, or you'll have to pass <code>invalidationByUserUUID</code> and <code>invalidBefore</code> with every function call.</p>

<hr>

<p>Hope my comments make sense. I didn't do a whole code refactoring since I'm not 100% sure what you wanted to achieve, but if needed, I can give it a try.</p>
    </div>