<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We could perhaps do away with the bulk of the children class code by implementing a bit of logic in the base class.</p>

<p>A starting point for discussion would be something along the lines of:</p>

<pre><code>public abstract class SelectionBase : IComparable&lt;SelectionBase&gt;
{
    private readonly List&lt;WinningPlay&gt; _winsAgainst;

    protected SelectionBase(List&lt;WinningPlay&gt; winsAgainst)
    {
        _winsAgainst = winsAgainst;
    }

    public virtual int CompareTo(SelectionBase other)
    {
        if (GetType() == other.GetType()) return 0; // draws against itself

        if (_winsAgainst.Any(p =&gt; p.Winner == other.GetType())) return 1; // wins

        return -1; // otherwise loses.
    }

    public virtual string Name { get { return GetType().Name; } }

    public virtual string GetWinningVerb(SelectionBase other)
    {
        var winner = _winsAgainst.SingleOrDefault(p =&gt; p.Winner == other.GetType());

        if (winner == null)
            throw new InvalidOperationException("Are we playing the same game?");
        else
            return winner.Verb;
    }

    protected class WinningPlay
    {
        public Type Winner { get; private set; }
        public string Verb { get; private set; }

        public WinningPlay(Type type, string verb)
        {
            Winner = type;
            Verb = verb;
        }
}
</code></pre>

<p>And the children classes become:</p>

<pre><code>public class Rock : SelectionBase
{

    public Rock() 
        : base(new List&lt;WinningPlay&gt;
            {
                new WinningPlay(typeof(Scissors), "crushes"),
                new WinningPlay(typeof(Lizard), "crushes")
            })
    {
    }
}

public class Paper : SelectionBase
{
    public Paper()
        : base(new List&lt;WinningPlay&gt;
            {
                new WinningPlay(typeof (Rock), "covers"),
                new WinningPlay(typeof (Spock), "disproves")
            })
    {
    }
}

public class Scissors : SelectionBase
{
    public Scissors()
        : base(new List&lt;WinningPlay&gt;
            {
                new WinningPlay(typeof (Rock), "cuts"),
                new WinningPlay(typeof (Spock), "decapitates")
            })
    {
    }
}

public class Lizard : SelectionBase
{
    public Lizard()
        : base(new List&lt;WinningPlay&gt;
            {
                new WinningPlay(typeof (Paper), "eats"),
                new WinningPlay(typeof (Spock), "poisons")
            })
    {
    }
}

public class Spock : SelectionBase
{
     public Spock()
         : base(new List&lt;WinningPlay&gt;
            {
                new WinningPlay(typeof (Rock), "Vaporizes"),
                new WinningPlay(typeof (Scissors), "smashes")
            })
    {
    }
}
</code></pre>
    </div>