<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overall</h1>
<p>Please fix the formatting.<br>
It's hard to find the public/private sections that way this is formatted.</p>
<hr>
<p>A fundamental miss of your dynamic array is that objects are not correctly created or destroyed.</p>
<p>You use <code>malloc()</code> and <code>realloc()</code> to allocate memory. But these functions do not call the constructors on class type objects. Thus the memory is not correctly initialized to hold objects of type T, it is undefined behavior to use these objects until they have been correctly initialized (with a constructor).</p>
<p>Conversely you also need to call the destructor when the object is popped or the destructor for your vector is called.</p>
<p>As a result your code is fundamentally broken.</p>
<hr>
<p>You have not correctly implemented the rule of three.</p>
<p>Please look it up. But basically if your object owns a pointer you need to overide the compiler implementation of several functions correctly.</p>
<p>As a result your code is fundamentally broken.</p>
<hr>
<p>You have not thought about move semantics.</p>
<p>Since C++11 (9 years ago). C++ has had the concept of move semantics that allow objects to be moved rather than copied. In the worst case this is no worse than a copy but in the best case it is much better than a copy and makes classes a lot more efficient if you start passing them around (eg return values).</p>
<p>This is a nice to have but to be honest expected especially for containers in modern code.</p>
<hr>
<h1>Code Review</h1>
<p>This line:</p>
<pre><code>    using size_type = size_t;
</code></pre>
<p>means that somewhere (not included) you have the line:</p>
<pre><code>using namespace std;
</code></pre>
<p>This is a problem for anything but toy code. Please stop adding this line to your code. Read any other C++ review.</p>
<p>See: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std;” considered bad practice?</a></p>
<hr>
<p>I have no problem you not checking that <code>m_Used</code> is not zero here.</p>
<pre><code>    void pop(void) {
      changeSize(--m_Used);
    }
</code></pre>
<p>But it is inconsistent when you do check it here.</p>
<pre><code>    void pop(size_type index) {
      if (!(index &lt; m_Size)) return;
      changeSize(m_Used -= index);
    }
</code></pre>
<p>Choose one. Either always check or never check. The <code>std::vector&lt;&gt;</code> does not check. But provides the appropriate functions that allow the user of the vector to validate the state so it can be called safely.</p>
<hr>
<p>This is not enough:</p>
<pre><code>      changeSize(--m_Used);
</code></pre>
<p>If you remove an object from the vector you need to destroy it. This means calling its destructor. Classes of type T may depend on the constructor/destructor being called.</p>
<p>You can call it manually.</p>
<pre><code>      m_Buffer[m_Used].~T();
      changeSize(--m_Used);
</code></pre>
<hr>
<p>Why are you calling <code>changeSize()</code> in the pop?</p>
<p>The whole point of having a <code>m_Used</code> and <code>m_Size</code> members is that you may have unused space in your vector that you can utilize on the next push without having to re-size the vector on every single operation!</p>
<hr>
<p>Conversely on the push. You can simply call the assignment operator.</p>
<pre><code>        m_Buffer[m_Used - 1] = obj;
</code></pre>
<p>Since you allocated the space with <code>malloc()</code> or <code>realloc()</code> this space has not been correctly initialized with the constructor thus calling the assignment operator on this object is not valid.</p>
<p>You can call the constructor by using placement new</p>
<pre><code>        new (m_Buffer + m_Used) T(obj);  // Call the copy constructor
                                         // using placement new
        ++m_Used;
</code></pre>
<hr>
<p>Don't use the <code>inline</code> keyword unless you need to.</p>
<pre><code>    inline size_type used(void) const { return m_Used; }
    inline size_type size(void) const { return m_Size; }
</code></pre>
<p>Here you don't need to. It does not force the compiler to actually "inline" the code (it actually does nothing on modern compilers as the compiler engineers realized long ago the programmers are bad and the compiler is much better at making that decision).</p>
<hr>
<p>Yes perfectly good.</p>
<pre><code>    inline T* begin(void) { return m_Buffer; }
    inline T* end(void) { return begin() + m_Used; }
    inline const T* const begin(void) const { return m_Buffer; }
    inline const T* const end(void) const { return begin() + m_Used; }
</code></pre>
<p>Though personally I would have abstracted the iterator.</p>
<pre><code>    using iterator = T*;
    using const_iterator = T const*;
</code></pre>
<p>The other thing to think about is that the standard containers contain a couple of additional iterator methods.</p>
<pre><code>    const_iterator cbegin() const;  // Notice the 'c'
    const_iterator cend()   const;
</code></pre>
<p>Also reverse iterators are worth using.</p>
<pre><code>    &lt;something&gt;       rbegin();
    &lt;const something&gt; crbeign() const;
    // etc
</code></pre>
<hr>
<p>Using the keyword <code>and</code> seems weird.</p>
<pre><code>      if (m_Buffer and !(m_Size &lt; _size)) return 1;
</code></pre>
<p>Yes its valid. <strike>But you need to add a special header.</strike> Also most engineers are simply used to reading <code>&amp;&amp;</code>.</p>
<hr>
<p>Constructors at last.</p>
<p>Would be nice to put constructors/destructors/assignment near the top. This the first thing you need to know about a class (also the first thing people in code review want to check).</p>
<pre><code>    // Sure this is fine.
    // But only space for one item?
    // Why not pre-allocate 10 so you don't need to reallocate on each push.
    // You don't need void here.
    myVector(void) {
      m_Buffer = (T*)malloc(sizeof(T));
      m_Used = 0;
      m_Size = 1;
    }

    // Normally the assignment operator is written in terms of the
    // copy constructor. You seem to have done this the complete other
    // way around. But it also mens that you should initialize all the
    // members before you call the assignment operator (it is assuming
    // you are using a fully formed object not one with random values)
    //
    // Go look up the copy and swap idiom.
    myVector(const myVector&lt;T&gt;&amp; other) {
      *this = other;
    }

    // What about self assignment.
    // It is perfectly valid to assign to yourself. Your code
    // needs to work in this situation. If the rhs has a null
    // buffer why does nothing change?
    // 
    // See Copy and swap idiom.
    myVector&lt;T&gt;&amp; operator=(const myVector&lt;T&gt;&amp; rhs) {
      if(rhs.m_Buffer){
        m_Used = rhs.m_Used;
        m_Size = rhs.m_Size;

        // This frees your buffer.
        // But what happens to all the objects of type T.
        // You just leaked them all without calling there destructor.
        free(m_Buffer);


        // What happens if this fails?
        // Well with strong exception safety you would not change the
        // current object and throw an exception. But you have lost
        // all the old state so if you throw you are in a bad state.
        m_Buffer = (T*)malloc(sizeof(T) * m_Size);
        memcpy(m_Buffer,rhs.m_Buffer,sizeof(T) * m_Size);
      }
      return *this;
    }
</code></pre>
<p>This is how your constructors should look (approximately).</p>
<pre><code>    // Please not the use of initializer list.
    // I am using malloc here because you did (but you can do better).
    myVector()
        : m_buffer(malloc(sizeof(T) * 10))
        , m_Used(0)
        , m_Size(10)
    {}

    // Copy constructor.
    myVector(myVector const&amp; copy)
        : m_buffer(malloc(sizeof (T) * copy.m_Used)
        , m_Used(0)           // We will update this in the code.
        , m_Size(copy.m_Used)
    {
        for(int loop = 0; loop &lt; m_Used; ++loop) {
            push(copy.buffer[loop]);
        }
    }

    // Copy Assignment
    // Use Copy and Swap Idiom (look it up)
    myVector&amp; operator=(myVector const&amp; rhs)
    {
        myVector copy(rhs);   // safely make a copy.
        swap(copy);           // swap the copy and the current object.
        return *this;
    }                         // Note copy destroyed here.
                              // Thus the old array is deleted.

    // Destructor
    ~myVector()
    {
        clear();             // delete all the objects.
        free(m_buffer);
    }

    // Swapping
    void swap(myVector&amp; other) noexcept
    {
         using std::swap;
         swap(m_buffer,    other.m_buffer);
         swap(m_Used,      other.m_used);
         swap(m_Size,      other.m_size);
    }
    friend void swap(myVector&amp; lhs, myVector&amp; rhs)
    {
         lhs.swap(rhs);
    }
  
    // Move semantics are relatively simple:
    myVector(myVector&amp;&amp; move) noexcept
        : m_buffer(nullptr)
        , m_Used(0)
        , m_Size(0)
    {
        swap(move);
    }
    myVector&amp; operator(myVector&amp;&amp; move) noexcept
    {
        clear();
        swap(move);
        return *this;
    }

    // Now just implement push/clear
</code></pre>
<hr>
<p>Not advisable to do this!!</p>
<pre><code>    template&lt;size_type N&gt;
    myVector(const T (&amp;inputArr)[N]) {
      *this = inputArr;
    }
</code></pre>
<p>--</p>
<p>You can't use <code>memcpy()</code> on T if it has a constructor.</p>
<pre><code>      memcpy(m_Buffer,inputArr, N * sizeof(T));
</code></pre>
<p>In C++ this is most types. So this is going to fail to correctly construct these objects.</p>
<hr>
<h1>Self Plug</h1>
<p>I wrote a couple of articles on how to write a vector. Please have a read. It goes through everything I have said here and then dives into some more detail.</p>
<p><a href="https://lokiastari.com/blog/2016/02/27/vector/index.html" rel="nofollow noreferrer">Resource Management Allocation</a><br>
<a href="https://lokiastari.com/blog/2016/02/29/vector-resource-management-ii-copy-assignment/index.html" rel="nofollow noreferrer">Resource Management Copy Swap</a><br>
<a href="https://lokiastari.com/blog/2016/03/12/vector-resize/index.html" rel="nofollow noreferrer">Resize</a><br>
<a href="https://lokiastari.com/blog/2016/03/19/vector-simple-optimizations/index.html" rel="nofollow noreferrer">Simple Optimizations</a><br>
<a href="https://lokiastari.com/blog/2016/03/20/vector-the-other-stuff/index.html" rel="nofollow noreferrer">The Other Stuff</a><br>
<a href="https://lokiastari.com/blog/2016/03/25/resizemaths/index.html" rel="nofollow noreferrer">ReSize Maths</a></p>
    </div>