<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not particularly familiar with C, but I have a few observations that may be helpful.</p>

<p>I like the attention to zeroing out your digest before you start. Using uninitialised memory is the sort of bug that can go unnoticed for a while, and it's good that you've caught it. </p>

<p>At the same time, I'm slightly alarmed that you're doing everything with raw loops, instead of using standard library functionality that does the same job. For example your loop to find <code>inputLen</code> could be replaced by a call to something like <code>strlen</code> and your loop to zero the array with a call to <code>memset</code>. As well as generally being more confident that you're using a tested and optimised routine, using library functions makes it easier to read and reason about your code.</p>

<p>I also quite like your use of comments. They're well placed, complementing the code and explaining some of the whys where the code explains the hows. </p>

<hr>

<p>As for the hashing itself, I'm sure that the output looks fairly random, but it's actually doing a lot of work for the level of hashing that it supplies. </p>

<p>My top concerns:</p>

<ol>
<li>If the input is longer than <code>HASH_LENGTH</code>, the latter part of the input is completely ignored.</li>
<li>XOR is a standard building block for this sort of low level stuff, but one of the key properties of XOR is that it undoes its own work. That is to say, because your <code>for</code> loop with <code>j</code> is <em>only</em> doing XOR it will confuse rather less than you'd expect for the work that goes into a nested loop. </li>
<li>The space allocated to <code>digest</code> at the end is underused. For example, because it's restricted to that alphabet, the first three bits of every byte will be "011". That has implications for use with, say, hash maps because the hash map will allocate 87.5% of its slots to values this hash function can never fill for any possible input. </li>
</ol>
    </div>