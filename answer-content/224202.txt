<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's nothing wrong with your foreach loop, but you can use a slightly different syntax:</p>

<pre><code>$selected_fruits = [];

foreach ($fruits as $fruit) {
    if (in_array($fruit["id"], $selected_ids)) {
        $selected_fruits[] = $fruit;
    }
}

print_r($selected_fruits);
</code></pre>

<p>I've changed <code>$fruits_arr</code> to <code>$fruits</code>, and <code>$ids_arr</code> to <code>$selected_ids</code>. A variable name should describe the meaning or purpose of the data or resource a variable contains. And you should be consistent about your choices. For instance, why don't the arrays <code>$selected_fruits</code> and <code>$fruit</code> have the <code>_arr</code> post-fix in your code? They are arrays as well. </p>

<p>There's no difference in the way the code above works, when compared with your code, but it is actually shorter than when <code>array_filter()</code> is used. <em>Shorter code</em> is, however, never a hallmark of <em>better code</em>. I think readability, and simply code that makes sense, are far more important. Using a rather complex function like <code>array_filter()</code> here is, in my eyes, overkill. </p>

<p>As far as I can tell the syntax, as used in this answer, is used more often than the syntax in your question. For the <code>[]</code> array declaration you need PHP 5.4 or higher.</p>

<p>You also wrote: </p>

<blockquote>
  <p>I also want to maintain the index/array order of $fruits_arr. </p>
</blockquote>

<p>It is not completely clear what this means. If you actually want to maintain the same indexes you have to do a bit more. The code would then look like this:</p>

<pre><code>$selected_fruits = [];

foreach ($fruits as $index =&gt; $fruit) {
    if (in_array($fruit["id"], $selected_ids)) {
        $selected_fruits[$index] = $fruit;
    }
}

print_r($selected_fruits);
</code></pre>

<p>This would make the indexes of <code>$selected_fruits</code> equal to those of <code>$fruits_arr</code>.</p>

<p>It is clear that both <code>foreach</code> loops, used in the code segments above, will have to walk the whole <code>$fruits</code> array to find all selected fruits. If the <code>$fruits</code> array becomes very long, compared to the number of selected fruits, this will not be very efficient. One of the reasons for this is the way that you've defined the <code>$fruits_arr</code>. The keys in this array don't do much. If I assume that the fruit ids in this array are unique, then it would be very helpful if the <code>$fruits_arr</code> keys actually were those fruit ids. I can redefine your <code>$fruits_arr</code> to achieve this, with this code:</p>

<pre><code>$fruits_arr = array_combine(array_column($fruits_arr, "id"), $fruits_arr);
</code></pre>

<p>Now the <code>$fruits_arr</code> looks like this:</p>

<pre><code>Array
(
    [213] =&gt; Array
        (
            [id] =&gt; 213
            [fruit] =&gt; banana
        )

    [438] =&gt; Array
        (
            [id] =&gt; 438
            [fruit] =&gt; apple
        )

    [154] =&gt; Array
        (
            [id] =&gt; 154
            [fruit] =&gt; peach
        )
)
</code></pre>

<p>It would, of course, be better to have done this right from the start, so you don't have to manipulate <code>$fruits_arr</code> to get those useful keys. Given this new array you can now do:</p>

<pre><code>$selected_fruits = [];

foreach ($selected_ids as $fruit_id) {
    $selected_fruits[] = $fruits[$fruit_id];
}

print_r($selected_fruits);
</code></pre>

<p>This code only walks over the shorter <code>$selected_ids</code> array. It also doesn't contain the <code>in_array()</code> function anymore, because I assumed that all selected fruits are present in the fruits array. It wouldn't be a selection otherwise. </p>

<p>Finally, the code above can be shortened to:</p>

<pre><code>$selected_fruits = array_intersect_key($fruits, array_flip($selected_ids));

print_r($selected_fruits);
</code></pre>

<p>This is the shortest and most efficient version I can think of.</p>
    </div>