<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a couple small points that aren't a full review, but might be helpful.</p>

<p><code>%</code> exists instead of <code>divmod</code> for when you only care about the modulo.</p>

<p>In <code>modInverse</code></p>

<pre><code>   q = a // m
   t = m
   m = divmod(a,m)[1]
   a = t
   t = y
   y = x - q * y
   x = t
</code></pre>

<p>could be written more clearly as</p>

<pre><code>   q = a // m
   t = m
   a, m = m, a%m
   x, y = y, x - q*y
</code></pre>

<p>For LCM computation, you should probably rewrite it as <code>return x//math.gcd(x,y) * y</code> as that will keep your numbers smaller, which is always nice (especially when x and y might both be big).</p>

<p>Also, you're RSA implementation isn't secure for details of why see <a href="https://cs.wellesley.edu/~cs310/lectures/26_rsa_slides_handouts.pdf" rel="nofollow noreferrer">textbook rsa flaws</a>. If you care, the solution is to use something like PKCS which is a padding scheme to provide semantic security, and to fix some other problems.</p>
    </div>