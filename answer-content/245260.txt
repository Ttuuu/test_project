<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No comment on the design, just style improvements.</p>
<pre><code>    auto pos = std::lower_bound(m_listeners.begin(), m_listeners.end(), m_searchValue, [](const MessageListener&amp; one, const MessageListener&amp; two)
    {
        if (one.m_type &lt; two.m_type)
            return true;
        else
            return false;
    }
    );
</code></pre>
<p>I find this snippet very hard to read, especially because the lambda's parameter-list runs off the right side of the screen. I would write it with "Python-style" indentation:</p>
<pre><code>    auto pos = std::lower_bound(
        m_listeners.begin(),
        m_listeners.end(),
        m_searchValue,
        [](const auto&amp; a, const auto&amp; b) {
            return (a.m_type &lt; b.m_type);
        }
    );
</code></pre>
<p>Notice that <code>if (x) return true; else return false;</code> is a too-verbose way of writing <code>return x;</code></p>
<p>Also notice that we can use a generic lambda (<code>auto</code>) to shorten the parameter list, assuming that the reader already knows that <code>m_listeners</code> is a list of <code>MessageListener</code> objects so we don't have to explicitly repeat that type's name.</p>
<hr>
<pre><code>if (m_ptr.get() == nullptr)
</code></pre>
<p>Treat smart pointers like normal pointers. Using any named member function on a smart pointer is a code smell. If you want to test a pointer (smart <em>or</em> raw) for null, write simply:</p>
<pre><code>if (m_ptr == nullptr)
</code></pre>
<hr>
<p><code>typename ...HandlerParametersType</code> â€” I strongly recommend naming packs something plural. This isn't a <em>type</em>; it's a pack of <em>types</em>. So: <code>class... HandlerParameterTypes</code>, or simply <code>class... Params</code>, or simply <code>class... Ts</code>.</p>
<hr>
<pre><code>std::move(std::make_unique~~~
</code></pre>
<p>The result of a function call expression like <code>std::make_unique&lt;T&gt;(args...)</code> is already a prvalue. You don't have to cast it with <code>std::move</code>. (Remove the call to <code>std::move</code>.)</p>
<hr>
<pre><code>if (!m_stopThread)
    stopThread();
</code></pre>
<p>I strongly recommend using curly braces around the body of every control-flow construct in your program. Consider what happens if you add a logging statement temporarily:</p>
<pre><code>if (!m_stopThread)
    std::cout &lt;&lt; "stopping the thread\n";  // Oops!
    stopThread();
</code></pre>
    </div>