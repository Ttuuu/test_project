<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I didn't find a way to use/combine the existent facilities, thus using directly the <em>FLTK</em> library here is what I came with:</p>

<pre><code>namespace Graph_lib{
class RoundedBox: public Shape{
public:
    RoundedBox(Point ul, Point dr);
    RoundedBox(Point ul, int w, int h);

    void draw_lines() const;
private:
    Point upperLeft;
    int width;
    int height;
    // roundedness of the box 
    // should be changed together with Arc center, major and minor axes
    int roundWidth;
    int roundHeight;
};
// Class member implementations
RoundedBox::RoundedBox(Point ul, Point dr)
    : upperLeft(ul), width(abs(ul.x - dr.x)), height(abs(ul.y - dr.y)), 
      roundWidth(abs(ul.x - dr.x) / 4), roundHeight(abs(ul.y - dr.y) / 4)  
{ add(ul); }

RoundedBox::RoundedBox(Point ul, int w, int h)
    : upperLeft(ul), width(w), height(h), roundWidth(w / 4), roundHeight(h / 4)  
{ add(ul); }

void RoundedBox::draw_lines() const{
    if(color().visibility()){ 
    // Arcs
    // upper left arc
    fl_arc(point(0).x , point(0).y, width/2, height/2, 90, 180);
    // upper right arc
    fl_arc(point(0).x + width/2, point(0).y, width/2, height/2, 0, 90);
    // down right arc
    fl_arc(point(0).x + width/2, point(0).y + height/2, width/2, height/2,
           270, 0); 
    // down left arc
    fl_arc(point(0).x, point(0).y + height/2, width/2, height/2, 180, 270); 
    // Lines
    // top horizontal
    fl_xyline(point(0).x + roundWidth, point(0).y,
              point(0).x + width - roundWidth);
    // right vertical
    fl_yxline(point(0).x + width, point(0).y + roundHeight,
              point(0).y + height - roundHeight);
    // bottom horizontal
    fl_xyline(point(0).x + roundWidth, point(0).y + height,
              point(0).x + width - roundWidth);
    // left vertical
    fl_yxline(point(0).x, point(0).y + roundHeight, 
              point(0).y + height - roundHeight);
    }
}

} // end of namespace Graph_lib 
</code></pre>

<p>The execution looks like this:</p>

<pre><code>#include "GUI.h"
#include "Simple_window.h"
#include &lt;iostream&gt;
#include "Chapter13Exercise2Version2.h"
//-------------------------------------------------------------------------- 

int main(){
 // window parameters
 int winWidth = 800;
 int winHeight = 600;
 Point center((x_max() - winWidth) / 2., (y_max() - winHeight) / 2.);
 Simple_window* sw = new Simple_window(center, winWidth, winHeight,
                                       "Chapter 13 Exercise 2");

 // rounded box parameters
 int width = 400;
 int height = 200;
 int xCoord = (sw-&gt;x_max() - width) / 2;
 int yCoord = (sw-&gt;y_max() - height) / 2;

try{
    Graph_lib::RoundedBox rb(Point(xCoord, yCoord), width, height);
    sw-&gt;attach(rb);

    sw-&gt;wait_for_button();
    delete sw;
}catch(exception&amp; e){
    cerr &lt;&lt; e.what() &lt;&lt; endl;
    getchar();
}catch(...){
    cerr &lt;&lt;"Default exception!"&lt;&lt; endl;
    getchar();
}
return 0;
}
</code></pre>

<p>And the result is:</p>

<p><a href="https://i.stack.imgur.com/pVxo6.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/pVxo6.png" alt="enter image description here"></a></p>
    </div>