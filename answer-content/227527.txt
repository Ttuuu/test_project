<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My question is a disaster, and I don't know where my thoughts were while writing it. Funny enough I managed to write a lot of unittest even with the same type for the two keys without getting any compiler errors. Anyway below is a new version that builds on the <code>Inverse</code> concept, and it seems to do the trick all the way - but I'm sure someone can find something to criticize. I have experimented with the naming, but I'm not sure if they are final.</p>

<pre><code>  /// &lt;summary&gt;
  /// A one-one relation bidirectional map.
  /// &lt;para&gt;
  /// A one-one relation means that each entry of type &lt;typeparamref name="TPrimary"/&gt; can correspond to exactly one 
  /// entry of type &lt;typeparamref name="TSecondary"/&gt; and visa versa.
  /// &lt;/para&gt;
  /// The map doesn't support null elements because each element is both key and value in its relation and keys can't be null.
  /// &lt;/summary&gt;
  /// &lt;typeparam name="TPrimary"&gt;Any type&lt;/typeparam&gt;
  /// &lt;typeparam name="TSecondary"&gt;Any type&lt;/typeparam&gt;
  public sealed class BidirectionalMap&lt;TPrimary, TSecondary&gt; : IEnumerable&lt;KeyValuePair&lt;TPrimary, TSecondary&gt;&gt;
  {
    private readonly Dictionary&lt;TPrimary, TSecondary&gt; map;
    private readonly Dictionary&lt;TSecondary, TPrimary&gt; inverseMap;

    /// &lt;summary&gt;
    /// Creates a BidirectionalMap from the provided dictionaries.
    /// Should be used only to create the Inverse.
    /// &lt;/summary&gt;
    /// &lt;param name="map"&gt;&lt;/param&gt;
    /// &lt;param name="inverseMap"&gt;&lt;/param&gt;
    private BidirectionalMap(BidirectionalMap&lt;TSecondary, TPrimary&gt; inverse, Dictionary&lt;TPrimary, TSecondary&gt; map, Dictionary&lt;TSecondary, TPrimary&gt; inverseMap)
    {
      this.map = map;
      this.inverseMap = inverseMap;
      Inverse = inverse;
    }

    private BidirectionalMap(int capacity, IEqualityComparer&lt;TPrimary&gt; primaryComparer, IEqualityComparer&lt;TSecondary&gt; secondaryComparer)
    {
      map = new Dictionary&lt;TPrimary, TSecondary&gt;(capacity, primaryComparer);
      inverseMap = new Dictionary&lt;TSecondary, TPrimary&gt;(capacity, secondaryComparer);
      Inverse = new BidirectionalMap&lt;TSecondary, TPrimary&gt;(this, inverseMap, map);
    }

    public BidirectionalMap()
    {
      map = new Dictionary&lt;TPrimary, TSecondary&gt;();
      inverseMap = new Dictionary&lt;TSecondary, TPrimary&gt;();
      Inverse = new BidirectionalMap&lt;TSecondary, TPrimary&gt;(this, inverseMap, map);
    }

    /// &lt;summary&gt;
    /// Creates a BidirectionalMap initialized with the specified &lt;paramref name="capacity"/&gt;.
    /// &lt;/summary&gt;
    /// &lt;param name="capacity"&gt;The desired capacity for the map.&lt;/param&gt;
    /// &lt;exception cref="ArgumentOutOfRangeException"&gt;If capacity is out of range (&amp;lt; 0)&lt;/exception&gt;
    public BidirectionalMap(int capacity) : this(capacity, null, null)
    {
    }

    /// &lt;summary&gt;
    /// Creates a BidirectionalMap with the specified equality comparers.
    /// &lt;/summary&gt;
    /// &lt;param name="mapComparer"&gt;Equality comparer for &lt;typeparamref name="TPrimary"/&gt;. If null, the default comparer is used.&lt;/param&gt;
    /// &lt;param name="inverseComparer"&gt;Equality comparer for &lt;typeparamref name="TSecondary"/&gt;. If null, the default comparer is used.&lt;/param&gt;
    public BidirectionalMap(IEqualityComparer&lt;TPrimary&gt; mapComparer, IEqualityComparer&lt;TSecondary&gt; inverseComparer)
      : this(0, mapComparer, inverseComparer)
    {
    }

    /// &lt;summary&gt;
    /// Creates a BidirectionalMap from the &lt;paramref name="source"/&gt; dictionary.
    /// &lt;/summary&gt;
    /// &lt;param name="source"&gt;The source dictionary from which to create a one-one relation map&lt;/param&gt;
    /// &lt;exception cref="ArgumentException"&gt;If &lt;paramref name="source"/&gt; contains doublets in values&lt;/exception&gt;
    /// &lt;exception cref="ArgumentNullException"&gt;If &lt;paramref name="source"/&gt; contains null keys and/or values&lt;/exception&gt;
    public BidirectionalMap(IDictionary&lt;TPrimary, TSecondary&gt; source)
    {
      map = new Dictionary&lt;TPrimary, TSecondary&gt;(source);
      inverseMap = new Dictionary&lt;TSecondary, TPrimary&gt;(source.ToDictionary(kvp =&gt; kvp.Value, kvp =&gt; kvp.Key));
      Inverse = new BidirectionalMap&lt;TSecondary, TPrimary&gt;(this, inverseMap, map);
    }

    /// &lt;summary&gt;
    /// Creates a BidirectionalMap from the &lt;paramref name="inverseSource"/&gt; dictionary.
    /// &lt;/summary&gt;
    /// &lt;param name="inverseSource"&gt;The source dictionary from which to create a one-one relation map&lt;/param&gt;
    /// &lt;exception cref="ArgumentException"&gt;If &lt;paramref name="inverseSource"/&gt; contains doublets in values&lt;/exception&gt;
    /// &lt;exception cref="ArgumentNullException"&gt;If &lt;paramref name="inverseSource"/&gt; contains null keys and/or values&lt;/exception&gt;
    public BidirectionalMap(IDictionary&lt;TSecondary, TPrimary&gt; inverseSource)
    {
      map = new Dictionary&lt;TPrimary, TSecondary&gt;(inverseSource.ToDictionary(kvp =&gt; kvp.Value, kvp =&gt; kvp.Key));
      inverseMap = new Dictionary&lt;TSecondary, TPrimary&gt;(inverseSource);
      Inverse = new BidirectionalMap&lt;TSecondary, TPrimary&gt;(this, inverseMap, map);
    }

    public BidirectionalMap&lt;TSecondary, TPrimary&gt; Inverse { get; }
    public int Count =&gt; map.Count;

    public ICollection&lt;TPrimary&gt; Keys =&gt; map.Keys;
    public ICollection&lt;TSecondary&gt; InverseKeys =&gt; inverseMap.Keys;

    public TSecondary this[TPrimary key]
    {
      get { return map[key]; }
      set { Set(key, value); }
    }

    public void Set(TPrimary primary, TSecondary secondary)
    {
      // Remove both the entries related to primary and secondary if any
      Remove(primary, secondary);
      // Now it should be safe to add the new relation.
      Add(primary, secondary);
    }

    public void Add(TPrimary primary, TSecondary secondary)
    {
      if (primary == null) throw new ArgumentNullException(nameof(primary));
      if (map.ContainsKey(primary)) throw new ArgumentException(nameof(primary), $"{primary} already present in the dictionary");
      if (secondary == null) throw new ArgumentNullException(nameof(secondary));
      if (inverseMap.ContainsKey(secondary)) throw new ArgumentException(nameof(secondary), $"{secondary} already present in the dictionary");

      map.Add(primary, secondary);
      inverseMap.Add(secondary, primary);
    }

    private bool Remove(TPrimary primary, TSecondary secondary)
    {
      bool result = false;

      if (map.TryGetValue(primary, out var primaryValue))
      {
        inverseMap.Remove(primaryValue);
        map.Remove(primary);
        result = true;
      }

      if (inverseMap.TryGetValue(secondary, out var secondaryValue))
      {
        map.Remove(secondaryValue);
        inverseMap.Remove(secondary);
        result = true;
      }

      return result;
    }

    public bool Remove(TPrimary primary)
    {
      if (map.TryGetValue(primary, out var secondary))
      {
        inverseMap.Remove(secondary);
        map.Remove(primary);
        return true;
      }

      return false;
    }

    public bool TryGetValue(TPrimary primary, out TSecondary secondary)
    {
      return map.TryGetValue(primary, out secondary);
    }

    public bool ContainsKey(TPrimary primary)
    {
      return map.ContainsKey(primary);
    }

    public void Clear()
    {
      map.Clear();
      inverseMap.Clear();
    }

    public IEnumerator&lt;KeyValuePair&lt;TPrimary, TSecondary&gt;&gt; GetEnumerator()
    {
      return map.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      return GetEnumerator();
    }
  }
</code></pre>

<hr>

<p>The corresponding unittests:</p>

<pre><code>  [TestClass]
  public class BidirectionalMapTests
  {
    class TestObject&lt;T&gt;
    {
      public TestObject(T value)
      {
        Value = value;
      }

      public T Value { get; }

      public static implicit operator T(TestObject&lt;T&gt; to) =&gt; to.Value;
      public static implicit operator TestObject&lt;T&gt;(T value) =&gt; new TestObject&lt;T&gt;(value);

      public override string ToString()
      {
        return Value?.ToString() ?? "";
      }
    }

    [TestMethod]
    public void InitializeFromSourceDictionary()
    {
      Dictionary&lt;string, int&gt; source = new Dictionary&lt;string, int&gt;
      {
        { "a", 1 },
        { "b", 2 }
      };

      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;(source);

      Assert.AreEqual(1, map["a"]);
      Assert.AreEqual("b", map.Inverse[2]);
    }

    [TestMethod]
    public void InvalidInitializeFromSourceDictionary()
    {
      TestObject&lt;string&gt; one = new TestObject&lt;string&gt;("1");

      Dictionary&lt;string, TestObject&lt;string&gt;&gt; source = new Dictionary&lt;string, TestObject&lt;string&gt;&gt;
      {
        { "a", one },
        { "b", one }
      };

      BidirectionalMap&lt;string, TestObject&lt;string&gt;&gt; map = null;

      Assert.ThrowsException&lt;ArgumentException&gt;(() =&gt; map = new BidirectionalMap&lt;string, TestObject&lt;string&gt;&gt;(source));

      Dictionary&lt;TestObject&lt;string&gt;, string&gt; inverseSource = new Dictionary&lt;TestObject&lt;string&gt;, string&gt;
      {
        { "a", "1" },
        { "b", "1" }
      };

      Assert.ThrowsException&lt;ArgumentException&gt;(() =&gt; map = new BidirectionalMap&lt;string, TestObject&lt;string&gt;&gt;(inverseSource));

      source = new Dictionary&lt;string, TestObject&lt;string&gt;&gt;
      {
        { "a", null },
        { "b", "1" }
      };

      Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; map = new BidirectionalMap&lt;string, TestObject&lt;string&gt;&gt;(source));
    }

    [TestMethod]
    public void Add()
    {
      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;();

      map.Add("a", 1);
      map.Add("b", 2);

      Assert.AreEqual(1, map["a"]);
      Assert.AreEqual("b", map.Inverse[2]);
      Assert.AreEqual(2, map.Count);
    }

    [TestMethod]
    public void InvalidAdd()
    {
      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;();

      map.Add("a", 1);
      Assert.ThrowsException&lt;ArgumentException&gt;(() =&gt; map.Add("a", 2));
      Assert.ThrowsException&lt;ArgumentException&gt;(() =&gt; map.Add("b", 1));
      Assert.AreEqual(1, map["a"]);
    }

    [TestMethod]
    public void AddNull()
    {
      BidirectionalMap&lt;string, string&gt; map = new BidirectionalMap&lt;string, string&gt;();

      Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; map.Add(null, "a"));
      Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; map.Add("a", null));
      Assert.AreEqual(0, map.Count);
    }

    [TestMethod]
    public void Remove()
    {
      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;();

      map.Add("a", 1);
      map.Add("b", 2);
      Assert.AreEqual(2, map.Count);

      map.Remove("a");
      Assert.AreEqual(1, map.Count);

      map.Inverse.Remove(2);
      Assert.AreEqual(0, map.Count);
    }

    [TestMethod]
    public void RemoveNonExistingValue()
    {
      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;();

      map.Add("a", 1);
      map.Add("b", 2);

      Assert.IsFalse(map.Remove("c"));
      Assert.AreEqual(2, map.Count);
    }

    [TestMethod]
    public void Set()
    {
      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;();

      map.Add("a", 1);
      map.Add("b", 2);

      map["a"] = 3;

      Assert.AreEqual(2, map.Count);
      Assert.IsTrue(map.TryGetValue("a", out int second));
      Assert.AreEqual(3, second);
      Assert.IsTrue(map.Inverse.TryGetValue(3, out string first));
      Assert.AreEqual("a", first);

      Assert.IsFalse(map.Inverse.TryGetValue(1, out _));
    }

    [TestMethod]
    public void SetWithExistingSecondValue()
    {
      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;();

      map.Add("a", 1);
      map.Add("b", 2);

      map["a"] = 2;

      Assert.AreEqual(1, map.Count);
      Assert.IsTrue(map.TryGetValue("a", out int second));
      Assert.AreEqual(2, second);
      Assert.IsTrue(map.Inverse.TryGetValue(2, out string first));
      Assert.AreEqual("a", first);

      Assert.IsFalse(map.TryGetValue("b", out _));
    }

    [TestMethod]
    public void TryGetValue()
    {
      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;
      {
        { "a", 1 },
        { "b", 2 }
      };

      Assert.IsTrue(map.TryGetValue("a", out int second));
      Assert.AreEqual(1, second);

      Assert.IsTrue(map.Inverse.TryGetValue(2, out string first));
      Assert.AreEqual("b", first);

      Assert.IsFalse(map.TryGetValue("c", out _));
      Assert.IsFalse(map.Inverse.TryGetValue(3, out _));
    }

    [TestMethod]
    public void Indexer()
    {
      BidirectionalMap&lt;string, string&gt; map = new BidirectionalMap&lt;string, string&gt;
      {
        { "a", "1" },
        { "b", "2" }
      };

      Assert.AreEqual("1", map["a"]);
      Assert.AreEqual("b", map.Inverse["2"]);
    }

    [TestMethod]
    public void Inverse()
    {
      BidirectionalMap&lt;string, int&gt; map = new BidirectionalMap&lt;string, int&gt;();
      Assert.AreEqual(map, map.Inverse.Inverse);

      map = new BidirectionalMap&lt;string, int&gt;(10);
      Assert.AreEqual(map, map.Inverse.Inverse);

      map = new BidirectionalMap&lt;string, int&gt;(EqualityComparer&lt;string&gt;.Default, EqualityComparer&lt;int&gt;.Default);
      Assert.AreEqual(map, map.Inverse.Inverse);

      map = new BidirectionalMap&lt;string, int&gt;(EqualityComparer&lt;string&gt;.Default, EqualityComparer&lt;int&gt;.Default);
      Assert.AreEqual(map, map.Inverse.Inverse);

      Dictionary&lt;string, int&gt; source = new Dictionary&lt;string, int&gt;
      {
        { "a", 1 },
        { "b", 2 }
      };
      map = new BidirectionalMap&lt;string, int&gt;(source);
      Assert.AreEqual(map, map.Inverse.Inverse);

      Dictionary&lt;int, string&gt; inverseSource = new Dictionary&lt;int, string&gt;
      {
        { 1, "a" },
        { 2, "b" }
      };
      map = new BidirectionalMap&lt;string, int&gt;(inverseSource);
      Assert.AreEqual(map, map.Inverse.Inverse);



    }
  }
</code></pre>
    </div>