<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're asking if you should use a global <em>variable</em> or pass values as props down multiple components, I'd say neither.</p>

<p>The later, passing props to distant offspring, is a common problem in the React community. It leads to rigid apps that require many changes just to move one small thing around, and it makes it hard to reason about the app due to <a href="https://en.wikipedia.org/wiki/Indirection" rel="nofollow noreferrer">indirection</a>. Note: I'm not saying you shouldn't use props, just don't pass the too far (one hop – two if they're in the same file – is my guideline).</p>

<p>Ultimately, you have some data, and the definition of this data can live anywhere – a module/file is a good place. Now, you don't want just any old thing to be able to mutate this object - you want to control access. </p>

<p>At some point this data will need to be initialized, you might need a way of triggering updates to this data, and you need changes in data to trigger behavior in your app.</p>

<p>For initialization, this could happen in the root of your app (if it's truly global and used by everything), or it could happen inside a component (e.g. <em>componentDidMount()</em>).</p>

<p>For triggering updates to this data, you just need your module to expose a method components can call when they need to trigger an update.</p>

<p>For triggering behavior when data changes, you can expose a hook – a function you can pass another function to, then just invoke the passed function when data changes. Components can pass one of their own methods for invocation when data changes.</p>

<p>While I don't recommend using this (see next paragraph), here's what that might look like:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class IndexAtlas {
  constructor() {
    this.subscribers = [];
    this.state = {};
  }
  
  update(args) {
    // fetch/initialize new data based on args (e.g. fire AJAX call)
    // then save new data to this.state
    // then notify all subscribers
    this.notify();
  }
  
  subscribe(notify) {
    this.subscribers.push(notify);
  }
  
  notify() {
    this.subscribers.forEach(notify =&gt; notify(this.state));
  }
}

export default new IndexAtlas(); // should only be one of these (aka Singleton)</code></pre>
</div>
</div>


<p>The key thing to realize now, is that IndexAtlas can be imported by any Component, anywhere – even multiple Components. This is important, because often the things that know how to initialize and update it are not the same thing that uses IndexAtlas's data.</p>

<p>Now the  (root component) could be used to initialize (or any other component):</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>import { update } from 'wherever/index-atlas.js';
import { Component } from 'react';

export default class App extends Component {
  componentDidMount() {
    update(/* whatever args, like horse species */);
  }
  
  render() {
    return (&lt;OtherStuff /&gt;);
  }
}</code></pre>
</div>
</div>


<p>Next, some button could be used to trigger updates:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>import { update } from 'wherever/index-atlas.js';

export default class AtlasQueryButton extends Component {
  constructor() {
    super();
    this.state = {
      horseAttribute: someDefaultValue
    };
  }

  render() {
    return (
    &lt;button 
      onClick = {() =&gt; update(this.state.horseAttribute)}
    /&gt;);
  }
}</code></pre>
</div>
</div>


<p>And finally, something can render IndexAtlas's data:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>import { subscribe } from 'wherever/index-atlas.js';

export default class HorseRenderer {
  constructor() {
    this.state = {
      traits: ''
    }
  }

  componentDidMount() {
    subscribe(this.horseUpdated);
  }
  
  horseUpdated(traits) {
    this.setState({ traits });
  }
  
  render() {
    if (!this.traits.length) {
      return 'Select a horse';
    }
    
    return (`Horse has these traits: ${this.state.traits}`);
  }
}</code></pre>
</div>
</div>


<p>There are multiple ways of doing this in React – <a href="https://reactjs.org/docs/context.html" rel="nofollow noreferrer">Context</a>, <a href="https://redux.js.org/" rel="nofollow noreferrer">Redux</a>, <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" rel="nofollow noreferrer">Container components</a>, and <a href="https://reactjs.org/docs/hooks-intro.html" rel="nofollow noreferrer">Hooks</a>. If you're new to React, I would look at Container components, because it teaches you how to separate data from presentation, then use Hooks (warning: they're still a proposal at time of writing), because they have a readable syntax and support better composition.</p>
    </div>