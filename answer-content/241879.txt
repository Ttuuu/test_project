<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Several things:</p>

<ul>
<li>When doing multi-processing and sharing a resource (in this case, the console window), you should use locks to prevent two threads using the same resource at once. This is the source of your problems. When updating the counter you probably need to hold the lock while moving the cursor to the timer, change the timer string, and hold it until you set the cursor back to the bottom of the console. On the other thread you'd have to maintain the lock while reading user input.</li>
<li>You don't need to roll-your-own timers. You can use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.timers.timer?view=netcore-3.1" rel="nofollow noreferrer">.NET's Timer class</a>. Notice that <a href="https://stackoverflow.com/a/1303708/6104191"><code>Thread.Sleep()</code> is not accurate</a> and you're not really counting seconds (even if you roll-your-own than you should probably do it with time deltas and not with thread sleeps).</li>
<li>Don't use the <code>Thread</code> class, use the <a href="https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl" rel="nofollow noreferrer">Task Parallel Library class</a>. It'll be much easier. You will need to use <code>Task.Delay</code> instead of <code>Thread.Sleep</code></li>
<li>Notice that you're line-breaking outside of the loop and not inside. Also <code>WriteLine</code> will add a line-break at the end automatically</li>
</ul>

<p>If you're merely learning the language (I noticed the "beginner" tag) than I suggest you learn the points I've mentioned. They're more important than learning a specific (and somewhat advanced) use case of C# console applications where you change text while accepting user input. I believe it would be easier for you if it would be a simple WPF application instead of a console application.</p>
    </div>