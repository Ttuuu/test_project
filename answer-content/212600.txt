<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Option handling is questionable.</p>

<p>First, do not hardcode the program name (<code>passgen</code>) in the message. Use <code>argv[0]</code> (if the executable gets renamed, the original message would lie).</p>

<p>Second, give help immediately. Forcing the user to invoke the program one more time just to see the help is a nuisance. Consider</p>

<pre><code>    if (1 == argc) {
        help();
        return 1;
    }
</code></pre>

<p>Notice <code>1</code>. Don't <code>return 0</code> on error. Your program could be invoked from the script, and the script should be informed that something undesirable happened.</p>

<p>Third, it is reasonable to expect that unrelated options could be given in any order. Your code behaves differently depending on the order of <code>-l</code> and <code>-q</code>. If <code>-l</code> is given first, the latter <code>-q</code> is ignored.</p>

<p>Finally, the default case shall tell what option seems wrong, and <em>also</em> print the help.</p></li>
<li><p>File handling is scattered. Testing for <code>NULL != filePath</code> at three different points gives me shivers. Consider consolidating them either like</p>

<pre><code>   if (NULL != filePath) {
       myFile.open(filePath, iOS_base::app);
       myFile &lt;&lt; myPass &lt;&lt; std::endl;
       myFile.close();
   } else {
       std::cout &lt;&lt; myPass &lt;&lt; std::endl;
   }
</code></pre>

<p>(there is nothing wrong with opening the file multiple times), or <a href="https://en.cppreference.com/w/cpp/io/c/freopen" rel="nofollow noreferrer"><code>freopen</code></a> <code>stdout</code>. Don't forget to test the the file has been opened successfully.</p>

<p>Better yet, always output to <code>stdout</code>, and let the user redirect as needed.</p></li>
<li><p>Don't use magic numbers (<code>33,126</code>). BTW, why you don't allow a space?</p></li>
<li><p>I understand the desire to avoid dynamic allocation. Just let the client provide the space for password(s).</p></li>
<li><p>C++ is not Java. Don't strive to put everything in a class. I see no reason for <code>class passSingleton</code> to exist.</p></li>
</ul>
    </div>