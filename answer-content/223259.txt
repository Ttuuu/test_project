<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with the OP:</p>

<blockquote>
  <p>It seems quite complex [...] a fair
  amount of redundant lines present that can tidy up [the] code.</p>
</blockquote>

<p>I am making an assumption that the code works - although it is hard to tell. I will also assume the line <code>Find first row of table (las row of sheet as data previously cleared)</code> is a typo and meant to be a comment.</p>

<p>I hope the OP will understand that I mean this in the nicest way: That current set of code is a mess - a dog's breakfast of spaghetti. I say this so there are no illusions - there is much to learn from this code and I doubt I will cover it all in this post.</p>

<h2>Option Explicit</h2>

<p>Something I repeat quite often. <strong>Always</strong> put <code>Option Explicit</code> at the top of the module. It prevents simple spelling errors resulting in undefined variables, and makes debugging easier because the run-time code usually gives a better error description and may even highlight the bad line of code. </p>

<p>In this example <code>x</code> is undeclared, even though it is assigned very early in the code.</p>

<h2>Indenting</h2>

<p>Always properly indent the code. This makes it easier to read and maintain. It also helps you check your code logic, because an unfinished loop or something inside a loop that should be outside will stand out because of the indenting.</p>

<h2>Consistent variable use</h2>

<p>Check when variables are being used. </p>

<ul>
<li>You set <code>MyRange</code> but I don't see it being used anywhere.</li>
<li>You set <code>Company_Name = Sheets("General").Range("A" &amp; x).Value</code> at
the beginning of the loop, but when you check
<code>Sheets("General").Range("A" &amp; x).Value &lt;&gt; ""</code> at the end of the loop
you don't reset the value. You could set <code>Company_Name</code> before you
enter the loop, and then reset it when you get to the end of the
loop, resulting in a final check of <code>Loop While Company_Name &lt;&gt; ""</code>
which is easier to understand for the general reader.</li>
</ul>

<p>This concept is about using your variable names to self-comment the code. Good variable names means that the reader understands what the code is doing without any additional comments. </p>

<h2>The use of <code>On Error</code></h2>

<p>The spaghetti code from error handling tells me that the code logic and possible errors has not been considered. The current code is too messy to provide any specific advice. Here are some general pointers:</p>

<p>If you think your code is going to fail because something does not exist, then check for its existence before you enter the code. And encapsulate that error check in a function to both isolate from your code and encourage re-use. Two examples of how to check if a Worksheet exists:</p>

<pre><code>Function WSExists1(wsName as String) as Boolean
Dim result as Boolean '&lt;-- Value set by default to False
Dim tempWS as Worksheet
    For each tempWS in ThisWorkbook.Worksheets
        result = result OR (tempWS.Name = wsName)
    Next tempWS
    WSExists1 = result
End Function

Function WSExists2(wsName as String) as Boolean
Dim result as Boolean '&lt;-- Value set by default to False
On Error Resume Next
    result = ThisWorkbook.Worksheets(wsName).Range("A1").Address = "A1"
    WSExists1 = result
End Function
</code></pre>

<p>Now, in your code you can use <code>If WSExists(Company_Name) Then</code> with great confidence and no requirement for spaghetti <code>GoTo</code>.</p>

<p>You can create similar 'helper' functions for other areas where you check for errors.</p>

<h2>Performance</h2>

<p>Hard to tell in the current code, but I suspect that you could dispense with the Excel Table manipulation and use arrays to work with the data. Noting that <code>.DataRange</code> returns an array of values anyway.</p>

<p>In addition, your first loop (on <code>Company_Name</code>) could be based on an array that your get from <code>Sheets("General").Range("A4:A" &amp; LastRowTBD).Value</code>. This will assist with performance.</p>

<p>However, how much is redundant code and where performance tweaks can be built in will have to wait until the simpler tidy up elements have been done.</p>
    </div>