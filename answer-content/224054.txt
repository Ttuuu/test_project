<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class MyBuilding : Building
{
    public int MyId { get; set; }
}

public class HisBuilding : Building
{
    public int HisId { get; set; }
}
</code></pre>
</blockquote>

<p>Why do you have the id as properties of the subclasses, it's a candidate for a base class member:</p>

<pre><code>public class Building
{
  public int Id { get; set; }
</code></pre>

<p>If the subclasses must have specialized names for their <code>Id</code> property, then provide that as:</p>

<pre><code>public class MyBuilding : Building
{
    public int MyId { get { return Id; } set { Id = value; } }
}
</code></pre>

<p>but that is a rather odd concept that you should avoid if possible.</p>

<p>The same holds for <code>Cities</code>.</p>

<hr>

<pre><code>public class MyCity : City
{
    public int MyId { get; set; }
    public IEnumerable&lt;MyBuilding&gt; Buildings { get; set; }
}
</code></pre>

<p>Normally you would have a materialized data set for buildings instead of an <code>IEnumerable&lt;T&gt;</code> - unless you're creating the instances lazily/dynamically. You could maybe consider using a <code>IReadonlyList&lt;T&gt;</code> as type, if you don't want it to be modifiable or else just a <code>IList&lt;T&gt;</code></p>

<hr>

<blockquote>
<pre><code>public static KeyValuePair&lt;TCity, IEnumerable&lt;TBuilding&gt;&gt; GetData&lt;TCity, TBuilding&gt;()
    where TCity : City, new()
    where TBuilding : Building, new()
{
    TCity city = new TCity();
    IEnumerable&lt;TBuilding&gt; buildings = new List&lt;TBuilding&gt;();
    return new KeyValuePair&lt;TCity, IEnumerable&lt;TBuilding&gt;&gt;(city, buildings);
}
</code></pre>
</blockquote>

<p>If you changed the City base class to a generic like:</p>

<pre><code>public class City&lt;TBuilding&gt; where TBuilding: Building
{
  public IList&lt;TBuilding&gt; Buildings { get; set; }
}
</code></pre>

<p>and dropped the buildings on the specialized cities, then you could return just the city from <code>GetData</code>, because you can initialize the <code>Buildings</code> property inside <code>GetData</code>, which I would rename to <code>CreateCity()</code></p>

<pre><code>public static TCity CreateCity&lt;TCity, TBuilding&gt;()
where TCity : City&lt;TBuilding&gt;, new()
where TBuilding : Building, new()
{
  TCity city = new TCity();
  city.Buildings = new List&lt;TBuilding&gt;();
  return city;
}
</code></pre>

<hr>

<p>Ideally you could have a common baseclass for <code>City</code> and <code>Building</code>, because they share some significant properties like <code>Id</code>, <code>Area</code> and <code>Name</code>:</p>

<pre><code>public abstract class AreaObject
{
  public int Id { get; set; }
  public string Name { get; set; }
  public double Area { get; set; }
}
</code></pre>

<p>A complete refactoring of your data model could then be:</p>

<pre><code>public abstract class AreaObject
{
  public int Id { get; set; }
  public string Name { get; set; }
  public double Area { get; set; }
}

// For convenience a city base class without the generic type parameter:
public abstract class City : AreaObject
{
  public abstract IEnumerable&lt;Building&gt; GetBuildings();
}

public class City&lt;TBuilding&gt; : City where TBuilding : Building
{
  public IList&lt;TBuilding&gt; Buildings { get; set; }

  public override IEnumerable&lt;Building&gt; GetBuildings()
  {
    return Buildings;
  }
}

public class Building : AreaObject
{
  public int Stories { get; set; }
}

public class MyBuilding : Building
{
  public int MyId { get { return Id; } set { Id = value; } }
}

public class HisBuilding : Building
{
  public int HisId { get { return Id; } set { Id = value; } }
}

public class MyCity : City&lt;MyBuilding&gt;
{
  public int MyId { get { return Id; } set { Id = value; } }
}

public class HisCity : City&lt;HisBuilding&gt;
{
  public int HisId { get { return Id; } set { Id = value; } }
}
</code></pre>

<p>It's a little odd to have two different sub cities having specialized buildings instead of just <code>Building</code>s, but you may have reasons for that? (What if <code>MyCity</code> buys a building from <code>HisCity</code> can it then change from <code>His</code> to <code>My</code>?)</p>

<hr>

<blockquote>
  <p>Here is the code I have for building the <code>IEnumerable</code> inside my
  <code>GetData</code> method:</p>
  
  <p><code>public static IEnumerable&lt;TBuilding&gt; GetBuildingData&lt;TBuilding&gt;()...</code></p>
</blockquote>

<p>If that is going to be used inside <code>GetData()</code> shouldn't it then take a city id as argument in order to minimize the query? If so you can change the <code>GetData</code> to:</p>

<pre><code>public static TCity CreateCity&lt;TCity, TBuilding&gt;(int id)
where TCity : City&lt;TBuilding&gt;, new()
where TBuilding : Building, new()
{
  TCity city = new TCity();
  city.Buildings = GetBuildingData&lt;TBuilding&gt;(id);
  city.Id = id;
  return city;
}
</code></pre>

<p>And you'll then have to modify your database query to only return the buildings for that city: </p>

<pre><code>public static IList&lt;TBuilding&gt; GetBuildingData&lt;TBuilding&gt;(int cityId)
where TBuilding : Building, new() {...}
</code></pre>

<hr>

<p>All in all this could simplify your use case to:</p>

<pre><code>  int cityId = -1;
  string strInput = Console.ReadLine();
  int.TryParse(strInput, out cityId);
  if (cityId &gt; 0)
  {
    City city = null;

    switch (cityId)
    {
      case 1:
        city = CreateCity&lt;MyCity, MyBuilding&gt;(cityId);
        break;
      case 2:
        city = CreateCity&lt;HisCity, HisBuilding&gt;(cityId);
        break;
      default:
        throw new InvalidOperationException("Invalid Id");
    }

    string json = JsonConvert.SerializeObject(city, Formatting.Indented);
    Console.WriteLine(json);
    Console.ReadLine();
  }
</code></pre>

<hr>

<p><strong>Update</strong></p>

<p>As mentioned a couple of times in the above, the data model and class structure for especially <code>City</code> is rather unusual. A more conventional structure could be something like:</p>

<pre><code>public abstract class AreaObject
{
  public int Id { get; set; }
  public string Name { get; set; }
  public double Area { get; set; }
}

public abstract class City : AreaObject
{
  public IList&lt;Building&gt; Buildings { get; set; }
}

public class MyCity : City
{
  // Uncomment if you really need this: public IList&lt;MyBuilding&gt; MyBuildings =&gt; Buildings.Where(b =&gt; b is MyBuilding).Cast&lt;MyBuilding&gt;().ToList();
}

public class HisCity : City
{
  // Uncomment if you really need this: public IList&lt;HisBuilding&gt; HisBuildings =&gt; Buildings.Where(b =&gt; b is HisBuilding).Cast&lt;HisBuilding&gt;().ToList();
}

public class Building : AreaObject
{
  public int Stories { get; set; }
}

public class MyBuilding : Building
{
}

public class HisBuilding : Building
{
}
</code></pre>

<p>As shown, <code>City</code> owns the <code>Buildings</code> property. The original concept of having specialized building properties per city sub class, doesn't make much sense in real life, because what defines a building: its relation to a city or its materials, functionality etc.? Can't two cities have a copy of the same building? And a <code>MyCity</code> should be able to Buy a building from <code>HisCity</code> etc. And a city should be able to own different types of building.</p>

<p>The factory method could then be simplified to this: </p>

<pre><code>  public static TCity CreateCity&lt;TCity&gt;(int id)
    where TCity : City, new()
  {
    TCity city = new TCity();
    city.Buildings = GetBuildingData(id);
    city.Id = id;
    return city;
  }

  public static IList&lt;Building&gt; GetBuildingData(int cityId)
  {
    // The sql stuff...
  }
</code></pre>

<p>And the use case to:</p>

<pre><code>  public static void Run()
  {
    int cityId = -1;
    string strInput = Console.ReadLine();
    int.TryParse(strInput, out cityId);
    if (cityId &gt; 0)
    {
      City city = null;

      switch (cityId)
      {
        case 1:
          city = CreateCity&lt;MyCity&gt;(cityId);
          break;
        case 2:
          city = CreateCity&lt;HisCity&gt;(cityId);
          break;
        default:
          throw new InvalidOperationException("Invalid Id");
      }

      string json = JsonConvert.SerializeObject(city, Formatting.Indented);
      Console.WriteLine(json);
      Console.ReadLine();
    }
  }
</code></pre>
    </div>