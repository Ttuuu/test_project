<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I made few improvements, the current code you have looks clean to me. But it's better to have control over something we created. So when I looked at the code, I got these questions:</p>

<ol>
<li>What if I want to go to specific slide based on some logic.</li>
<li>Why can't we make it reusable</li>
<li>Why can't we make it context bound so that it has it's specific context to store state.</li>
<li>What if I want to destroy any point of time.</li>
</ol>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var SlideShow = (function () {
  function SlideShow (config) {
    if (!config) {
      config = {};
    }
    this.slideSelector = config.slideSelector;
    this.refreshInterval = config.refreshInterval || 3000;
    this.currentVisibleSlide = null;
    this.initialize();
  }
  var prototype = {
    constructor: SlideShow
  };
  prototype.initialize = function () {
    this.refresh();
    this.nextSlide();
    this.slideShowTimer = window.setInterval(this.nextSlide.bind(this), this.refreshInterval);
  }
  prototype.destroy = function () {
    if (this.slideShowTimer) {
      window.clearInterval(this.slideShowTimer);
    }
  }
  prototype.displaySlide = function (slide, show) {
    slide &amp;&amp; (slide.style.display = show ? 'block' : 'none');
  }
  prototype.gotoSlide = function (index) {
    var slideToShow = this.slideElements[index];
    if (slideToShow) {
      if (this.currentVisibleSlide) {
        this.displaySlide(this.currentVisibleSlide, false);
      }
      this.displaySlide(slideToShow, true);
      this.currentVisibleSlide = slideToShow;
    }
  }
  prototype.nextSlide = function () {
    var currentVisibleSlide = this.currentVisibleSlide
    var nextSlideIndex;
    if (!currentVisibleSlide) {
      nextSlideIndex = 0;
    } else {
      currentVisibleSlide = this.slideElements.indexOf(currentVisibleSlide);
      nextSlideIndex = currentVisibleSlide + 1;
      if (nextSlideIndex &gt; this.slideElements.length - 1) {
        nextSlideIndex = 0;
      }
    }
    console.log('Showing index: ', nextSlideIndex);
    this.gotoSlide(nextSlideIndex);
  }
  prototype.refresh = function () {
    var slideElements = document.querySelectorAll(this.slideSelector);
    this.slideElements = Array.prototype.slice.call(slideElements, 0);
  }
  SlideShow.prototype = prototype;
  return SlideShow;
})();


var slideShow = new SlideShow({
  slideSelector: '.slides'
})</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.slides {
  display: none
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;section&gt;
    &lt;div class="slides" style="width:100%"&gt;1&lt;/div&gt;
    &lt;div class="slides" style="width:100%"&gt;2&lt;/div&gt;
    &lt;div class="slides" style="width:100%"&gt;3&lt;/div&gt;
&lt;/section&gt;</code></pre>
</div>
</div>


<p><strong>Edit:</strong></p>

<p>My rationale behind converting it to a class is, In our application we had an exact same functionality written by a beginner JS programmer in a same way as OP has posted. Other developers made amendments to it. The code has grown complex and started giving unexpected bugs. It was harder to maintain and reuse in other parts of the application. So my intention behind rewriting it was to show an alternate way in a way that i thought will be easier to maintain. And it does not have comments because, comments lose meaning as code changes, but variable names do not. Thats why variables in above code has some meaning behind their names.</p>

<p>And another intention behind making it class is, it is easy to extend. UX requirements changes very rapidly. Tomorrow OP might have to show all the slides and switch them using timer. UX team might ask to click and show the slide instead of showing in automated way.</p>

<p>Thank you for the excellent inputs in comments section.</p>
    </div>