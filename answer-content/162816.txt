<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Strings in Python are immutable, and so <code>'string a' + 'string b'</code> has to make a third string to combine them. Say you want to clone a string, by adding each item to the string will get \$O(n^2)\$ time, as opposed to \$O(n)\$ as you would get if it were a list.</p>

<p>And so, the best way to join an iterable by a separator is to use <code>str.join</code>.</p>

<pre><code>&gt;&gt;&gt; ','.join('abcdef')
'a,b,c,d,e,f'
</code></pre>

<hr>

<p>If you want to do this manually, then I'd accept the \$O(n^2)\$ performance, and write something easy to understand. One way to do this is to take the first item, and add a separator and an item every time after, such as:</p>

<pre><code>def join(iterator, seperator):
    it = map(str, iterator)
    seperator = str(seperator)
    string = next(it, '')
    for s in it:
        string += seperator + s
    return string
</code></pre>
    </div>