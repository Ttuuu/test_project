<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>NotifyCollectionChangedEventArgs</code></h2>

<p>You receive a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.notifycollectionchangedeventargs?view=netframework-4.8" rel="nofollow noreferrer">NotifyCollectionChangedEventArgs</a>, wich holds interesting data about the items that got added <code>NewItems</code> and removed <code>OldItems</code> from the collection. There is also an <code>Action</code> that defines how the collection got modified. Your changed handler is implemented as a <code>NotifyCollectionChangedAction.Reset</code> handler. It doesn't take into account the information from the event <code>e</code>. </p>

<blockquote>
<pre><code>var markers = ((IEnumerable&lt;XfxMarker&gt;) sender).ToList();
</code></pre>
</blockquote>

<p>This means, you are checking all elements against the previously cached elements by the handler container class and manually verify which ones are added and which ones removed. Let's say <code>filter</code> is <code>m =&gt; _map.MapBounds.Contains(m.CenterPoint)</code>:</p>

<blockquote>
<pre><code> var markersToAdd = markers
    .Where(m =&gt; filter(m), out offScreen).Except(_oldMarkers,comparer);
</code></pre>
</blockquote>

<p>and </p>

<blockquote>
<pre><code>var markersToRemove = _oldMarkers.Except(markers, comparer).Union(offScreen);
</code></pre>
</blockquote>

<p>However, in most cases I presume the action to be <code>Add</code> or <code>Remove</code>. If this is the case, you already have the new and/or old elements. For instance, on <code>Add</code>:</p>

<pre><code>var markersAddedInSource = e.NewItems.OfType&lt;XfxMarker&gt;();
var markersToAdd = markersAddedInSource.Where(filter);
var markersToRemove = markersAddedInSource.Except(markersToAdd);
</code></pre>

<p>Or using your own extension method:</p>

<pre><code>var markersAddedInSource = e.NewItems.OfType&lt;XfxMarker&gt;();
var markersToAdd = markersAddedInSource.Where(filter, out var markersToRemove);
</code></pre>

<p>This saves you a couple of iterations on the source collection and allows you to only iterate on the changed elements.</p>

<hr>

<h2><code>MapMarkerComparer</code></h2>

<p>I don't know the type of <code>Latitude</code> and <code>Longitude</code>, but consider checking equality on their source type rather than their <code>ToString</code> outcome. </p>

<blockquote>
<pre><code>x.CenterPoint.Latitude.ToString() == y.CenterPoint.Latitude.ToString()
</code></pre>
</blockquote>

<p>In case you have issues with rounding or truncation (likely with <code>float</code> or <code>double</code>) you could round the values in the check.</p>

<pre><code>x.CenterPoint.Latitude == y.CenterPoint.Latitude
</code></pre>

<p>Or you could use rounding:</p>

<pre><code>Math.Round(x.CenterPoint.Latitude, precision) 
    == Math.Round(y.CenterPoint.Latitude, precision)
</code></pre>

<p>Or you could guard against a tolerance threshold:</p>

<pre><code>Math.Abs(x.CenterPoint.Latitude - y.CenterPoint.Latitude) &lt; tolerance
</code></pre>

<hr>

<h2><code>IEnumerable&lt;T&gt; Where&lt;T&gt;</code></h2>

<p>Consider changing the method signature to</p>

<pre><code>public static ILookup&lt;bool, T&gt; Where&lt;T&gt;(this IEnumerable&lt;T&gt; input, Func&lt;T, bool&gt; predicate);
</code></pre>

<p>Or returning a Dictionary:</p>

<pre><code>public static IDictionary&lt;bool, IEnumerable&lt;T&gt;&gt; Where&lt;T&gt;(
    this IEnumerable&lt;T&gt; input, Func&lt;T, bool&gt; predicate);
</code></pre>

<p>So you don't need to worry about a return value and an out-parameter. This pattern isn't used that much anymore and is mostly used to <code>Try*</code> operations.</p>

<p>You can get the items that matched the <code>predicate</code>: </p>

<pre><code>var results = markers.Where(filter);
var matched = results[true];
var unmatched = results[false];
</code></pre>

<p>Considering renaming <code>Where</code> to avoid confusion with LINQ's <code>Where</code> method.</p>
    </div>