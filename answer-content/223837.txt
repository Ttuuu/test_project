<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ouch. I say this in a kind way - the code is painful to read.</p>

<ol>
<li>Use <code>Option Explicit</code> at the top of every module - always!</li>
<li>Properly indent your code - it makes it easier to read, easier to pick up inconsistent logic and easier to maintain.</li>
</ol>

<p>Arrays, and Excel's ability to convert values of ranges to arrays is your friend in this instance. No need for loops.</p>

<pre><code>Private Sub CommandButton2_Click()
Dim inputs as Variant 'Variabler for inputs
    inputs = Array(TextBox1.Text, TextBox2.Text, TextBox3.Text, TextBox4.Text, _
                   TextBox10.Text, TextBox6.Text, TextBox7.Text, TextBox8.Text, _
                   TextBox9.Text)
    ' order is important for you here.
    ' shipFrom, shipTo, shipDate, NP, desc, gramEx, tareWeight, weight, dims

Dim nextRowB As Range
    Set nextRowB = Sheets("Arkiv").Range("B" &amp; Rows.Count &amp; ":J"&amp; Rows.Count).End(xlUp).Offset(1, 0)
    nextRowB.Value = inputs

    ' Now that we put everything into the array, the individual ranges and the ".copy" is not longer required
    ' sf.Copy nextRowB etc &lt;-- not needed, see line of code above!

Dim ID As Range
    Set ID = Sheets("Arkiv").Range("A" &amp; Rows.Count).End(xlUp).Offset(1, 0)
    If IsEmpty(Sheets("Arkiv").Range("B2").Value) Then '&lt;-- This is your logic, but not sure if this is really what you want.
    ' Is it really only row 2 that you check?
        MsgBox "Please fill in the &lt;Ship From&gt; box"
    Else
        'Sheets("Arkiv").Range("A" &amp; Rows.Count).End(xlUp).Offset(1, 0) = "1"
        Sheets("Arkiv").Range("A2").Value = "1"
    End If
    If Not IsEmpty(Sheets("Arkiv").Range("C2").Value) Then ' added "Not" here, why have an empty code block?
    'Else &lt;-- why have an empty code block?
        ID = Sheets("Arkiv").Range("A" &amp; Rows.Count).End(xlUp).Value + 1
    End If
    Sheets("Arkiv").Activate
    MsgBox "The ID number for this data is: " &amp; Sheets("Arkiv").Range("A" &amp; Rows.Count).End(xlUp).Value
End Sub
</code></pre>

<p>Two other things to look at to make this more readable:</p>

<ul>
<li>Consider assigning "Sheets("Arkiv")" to a variable (e.g. <code>ws</code>) and
using that throughout.</li>
<li>Consider using <code>With Sheets("Archiv")</code> block.</li>
</ul>

<p>And finally, ensure that all references to range objects and methods are fully qualified. This includes the <code>Rows</code> elements within the <code>Range(...)</code> code.</p>

<p><strong>Edit</strong> (From Stack Overflow @AhmedAU, alternate way of inserting the values - this has been tested and works according to OP):</p>

<pre><code>Dim inputs As Variant
inputs = Array(TextBox1.Text, TextBox2.Text, TextBox3.Text, TextBox4.Text, TextBox10.Text, TextBox6.Text, TextBox7.Text, TextBox8.Text, TextBox9.Text)
Dim nextRowB As Range
Set nextRowB = Sheets("Arkiv").Range("B" &amp; Rows.Count).End(xlUp).Offset(1, 0)
nextRowB.Resize(1, UBound(inputs) + 1).Value = inputs
</code></pre>
    </div>