<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The provided implementation in the post is flawed and fails to port the Pari/GP code. In this statement </p>

<pre><code>Matrix([[2*x, -1], [1, 0]])*rem(1,x**r-1)*(1%n)
</code></pre>

<p>the actual intentions of <code>rem(1, x**r-1)</code> and <code>(1%n)</code> are to create symbolic representations of <br> <code>% (x**r - 1)</code> and <code>% n</code> for each matrix element, which is going to take effect during the computation of matrix power.</p>

<p>However, under this implementation, <code>rem(1, x**r-1)</code> and <code>(1%n)</code> are both evaluated right away:</p>

<pre><code>r = 3
n = 11
print(rem(1, x**r-1), (1 % n))
</code></pre>

<p>Output:</p>

<pre><code>1 1
</code></pre>

<p>Therefore, these are not no longer symbolic representations and would be eliminated immediately after being multiplied to the matrix.</p>

<p>All in all I do not think the overall algorithm could be implemented easily using the <code>sympy</code> library. It would be more convenient to implement the matrix power-modulo operation yourself with the help of <code>numpy</code> to work with polynominal computations (see <a href="https://docs.scipy.org/doc/numpy/reference/routines.polynomials.html" rel="nofollow noreferrer">doc</a>). By the way, I am not sure whether that helps but <code>numpy</code> actually have a <a href="https://docs.scipy.org/doc/numpy/reference/routines.polynomials.chebyshev.html" rel="nofollow noreferrer"><code>chebyshev</code></a> module.</p>
    </div>