<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I spent a little time doing some cleanup and here's what I ended up with:</p>

<pre><code>NUM_LETTERS = 26

def get_text() -&gt; str:
    return input('What message(s) are you trying to encrypt? ')

def get_shift(shift_max: int) -&gt; int:
    try:
        key = int(input('Enter the key number (1-%s) ' % (shift_max)))
        assert 1 &lt;= key &lt;= shift_max
    except (AssertionError, ValueError):
        return get_shift(shift_max)
    else:
        return key

def encrypt(text: str, shift: int) -&gt; str:

    def encrypt_char(char: str) -&gt; str:
        if not char.isalpha():
            return char
        alpha = ord('A') if char.isupper() else ord('a')
        return chr((ord(char) + shift - alpha) % NUM_LETTERS + alpha)

    return ''.join([encrypt_char(char) for char in text])

text = get_text()
shift = get_shift(NUM_LETTERS)

print("original string: ", text)
print("after encryption: ", encrypt(text, shift))
</code></pre>

<p>Notable changes:</p>

<ol>
<li><p>No magic numbers.  I used <code>ord('A')</code> for the ASCII codes and defined <code>NUM_LETTERS</code> for the shift operation.</p></li>
<li><p>Changed function names to match what they're doing (e.g. your <code>shift</code> function didn't actually shift anything, it just got the shift value from the user, so I renamed it <code>get_shift</code>).</p></li>
<li><p>Your shift function didn't handle non-int inputs, so I fixed that, and since that's driven by a raised exception I made the bounds check work that way too.  Just for fun and to demonstrate other ways of doing the same thing, I made it loop via recursion since that lets you get rid of the <code>while</code> construct and reduces the indentation (this isn't necessarily always a good idea in Python because if you recurse enough times it'll blow the stack, but for this case if the user enters garbage ten thousand times it's probably fine to have the script exit, lol).</p></li>
<li><p>I broke the character encryption logic into its own mini-function, which makes it easy to do the full string encryption as a list comprehension statement.</p></li>
<li><p>DRY (Don't Repeat Yourself) -- since the character shifting logic is identical except for what the start of the alphabet is, I combined those two lines into one.</p></li>
<li><p>Type annotations!</p></li>
</ol>
    </div>