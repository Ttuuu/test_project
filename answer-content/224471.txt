<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>General suggestions:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic.</li>
<li><a href="https://github.com/timothycrosley/isort" rel="nofollow noreferrer"><code>isort</code></a> can group and sort your imports automatically.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre>

<p>That limit is not absolute by any means, but it's worth thinking hard whether you can keep it low whenever validation fails. For example, I'm working with a team on an application since a year now, and our complexity limit is up to 7 in only one place. Conversely, on an ugly old piece of code I wrote without static analysis support I recently found the complexity reaches 87!)</p></li>
<li><p>I would then normally recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> everywhere and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>

<p>I'm ambivalent about introducing this in code for beginners since it's a complex thing to get right, but in example code I think it could be useful to explain what is happening.</p></li>
</ol>

<p>Specific suggestions:</p>

<ol>
<li>I would argue that globals are <em>more</em> confusing than passing arguments around. After all, keeping that global state in mind as we jump from function to function is one of the main reasons it's unpopular for readability, debuggability and maintainability.</li>
<li>When introducing programming I think it would be helpful to expand every non-obvious abbreviation, such as <code>NUM_COLS</code>. A programmer will recognize that pretty much instantly, but a beginner may be better served with more legibility rather than succinctness. I would also avoid using the indirection of aliases such as <code>tk</code> for <code>tkinter</code> - it may be common to do so among tkinter users, but it's an entirely new concept for students.</li>
<li>On that note, naming is incredibly important for maintainability, because it makes the code easier to read and it especially makes it possible to read each part of the code <em>in isolation</em> and understand what it does, without reference to the rest of it. So I would recommend expanding names like <code>v</code> to <code>value</code>, <code>i</code> to <code>index</code> and <code>el1</code> to <code>first_element</code> and avoiding vacuous names like <code>temp</code> wherever possible.</li>
<li>You can provide an extra parameter to <code>range</code> to start at 1 instead of 0, simplifying your f-string.</li>
<li>There's some dead code in here (using an IDE like the excellent <a href="https://www.jetbrains.com/pycharm/" rel="nofollow noreferrer">PyCharm Community Edition</a> will show you most of these and more for free):

<ul>
<li><code>swap_tile</code>'s <code>empty_square</code>.</li>
<li><code>scramble_board</code>'s <code>empty_square</code>.</li>
<li><code>FONT</code> and <code>FONT_SIZE</code>.</li>
<li><code>click_callback</code>'s <code>x</code> and <code>y</code> parameters.</li>
</ul></li>
<li><code>abs(Â±0)</code> is zero, so <code>abs(el2[1] - el1[1]) == 0</code> can be simplified to <code>el2[1] - el1[1] == 0</code>.</li>
<li><code>is_adjacent</code> does the same calculations twice unless the first conditional is true. Pulling out variables like <code>x_adjacent</code> and <code>y_adjacent</code> has the additional benefit of simplifying the expression to just <code>return x_adjacent or y_adjacent</code>.</li>
<li><code>find_empty_square_pos</code> should <em>stop</em> as soon as it finds the empty square. You can simply <code>return index_2d(board, candidate)</code>.</li>
<li><code>for i in range(SCRAMBLE_DEPTH):</code> would be more idiomatic as <code>for _ in range(SCRAMBLE_DEPTH):</code> since the index variable is not used, but that may not be worth explaining.</li>
<li>There are a few "magic" values which would be easier to read as constants, like 600 (<code>WINDOW_SIZE</code>? Could this be calculated based on the tile size and margins?), -240 (<code>WINDOW_Y_OFFSET</code>?), 4 (<code>COLUMN_COUNT</code>, aka. <code>NUM_COLS</code>?) and 2 (<code>TILE_PADDING</code>?).</li>
<li><p>The canonical way to make an executable Python script is to put this ugly thing (and nothing else) at the end of the file:</p>

<pre><code>if __name__ == "__main__":confirmation that the logic is completely correct
    main()
</code></pre>

<p>doing that makes the script contents reusable, because they can be imported by other scripts without actually running the program. This might be too much for beginners, but it's an extremely common pattern so I thought it was worth mentioning.</p></li>
</ol>

<p>As for</p>

<blockquote>
  <p>confirmation that the logic is completely correct</p>
</blockquote>

<p>I'm pretty sure you can't get a definite answer from anyone on this site unless there are actually obvious bugs. A comprehensive test suite would help, and is probably the simplest way to achieve some confidence in the workings. Unfortunately this code would be hard to test, because display and logic are tightly coupled.</p>
    </div>