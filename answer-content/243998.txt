<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the <code>do { ... }</code> blocks inside the cases are not needed:</p>
<pre><code>func beats(otherSign: Sign) -&gt; GameState {
    switch self {
    case .rock:
        if otherSign == .paper {
            return .lose
        } else if otherSign == .scissors {
            return .win
        }
        return .draw
    case .scissors:

    // ...
}
</code></pre>
<p>But why use a switch-statement for <code>self</code> and an if-statement for <code>otherSign</code>? The    if-statement is error-prone (we might e.g. forget a case), whereas the switch-statement perfectly matches the enum declaration and the compiler checks the exhaustiveness, i.e. that all cases are treated exactly once:</p>
<pre><code>func beats(otherSign: Sign) -&gt; GameState {
    switch self {
    case .rock:
        switch otherSign {
        case .paper:    return .lose
        case .scissors: return .win
        case .rock:     return .draw
        }
    case .scissors:

    // ...
}
</code></pre>
<p>This is already more compact than the original code, but still clear and easy to read.</p>
<p>Now we go one step further: A <em>single</em> switch-statement is sufficient because you can switch on a <em>tuple</em> in Swift:</p>
<pre><code>func beats(otherSign: Sign) -&gt; GameState {
    switch (self, otherSign) {
    case (.rock, .rock):     return .draw
    case (.rock, .paper):    return .lose
    case (.rock, .scissors): return .win
        
    case (.paper, .rock):     return .win
    case (.paper, .paper):    return .draw
    case (.paper, .scissors): return .lose
        
    case (.scissors, .rock):     return .lose
    case (.scissors, .paper):    return .win
    case (.scissors, .scissors): return .draw
    }
}
</code></pre>
<p>It is clear to the reader that (and how) all possible combinations are handled. Repeated or missing cases are detected by the compiler.</p>
<p>There is also another, completely different option. We can assign the integer values 0, 1, 2 to rock, paper, scissors, respectively, e.g. by making it an integer based enumeration:</p>
<pre><code>enum Sign: Int {
    case rock, paper, scissors

    // ...
}
</code></pre>
<p>then the outcome of the comparison can efficiently be computed from the difference of the integer values:</p>
<pre><code>func beats(otherSign: Sign) -&gt; GameState {
    let diff = self.rawValue - otherSign.rawValue

    // ...
}
</code></pre>
<p>I'll leave it to you to work out the details (<em>hint:</em> modulo arithmetic), and to decide which variant your prefer: A (verbose) switch-statement with 9 cases, or a compact mathematical calculation.</p>
    </div>