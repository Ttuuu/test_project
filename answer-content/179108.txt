<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can trivially find a faster solution than the one you've already given, by simply sorting the array first, stripping all non-positive integers and start the search from there -- this makes the algorithm an \$O(n \log n)\$ algorithm in the worst case and in the best case an \$O(n)\$ algorithm and doesn't require any extra space.</p>

<p>Alternatively, just add all the positive numbers to a set and find the smallest positive number that's not in that set. If you want to do this in less than \$O(n \log n)\$ time, you need to use a bitvector; go through all the elements and set bit <code>n</code> in the vector to <code>true</code>, when the element you're inspecting is equal to <code>n</code>. This will take \$O(n)\$ time and \$O(n)\$ space.</p>

<p>To get the size of the bit vector simply find the largest integer (and the smallest while you're at it) and allocate that many bits. This can also be done in \$O(n)\$ time. If the smallest integer isn't 1, then the number you're looking for <em>is</em> 1.</p>
    </div>