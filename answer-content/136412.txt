<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Minimize math operations</h3>

<blockquote>
<pre><code>        if (((double)after.tv_sec*1000000 + (double)after.tv_usec)-((double)before.tv_sec*1000000 + (double)before.tv_usec) &gt; timer){ //time difference in microsec accuracy
</code></pre>
</blockquote>

<p>You do four conversions from integer types to a double precision floating point type.  And do two multiplications times a million.  </p>

<p>Consider </p>

<pre><code>        //time difference in microsec accuracy
        if (((double)(after.tv_sec - before.tv_sec)*1000000 + (double)(after.tv_usec - before.tv_usec)) &gt; timer) {
</code></pre>

<p>This only does two conversions and one multiplication.  </p>

<p>Or <a href="https://stackoverflow.com/a/5833240">this answer</a> suggests that you could instead use <code>uint64_t</code>.  </p>

<pre><code>        //time difference in microsec accuracy
        if (((after.tv_sec - before.tv_sec)*(uint64_t)1000000 + (after.tv_usec - before.tv_usec)) &gt; timer) {
</code></pre>

<h3>Optimize the common path</h3>

<p>Also, if this is usually false, consider flipping things around.  </p>

<blockquote>
<pre><code>        if (((double)after.tv_sec*1000000 + (double)after.tv_usec)-((double)before.tv_sec*1000000 + (double)before.tv_usec) &gt; timer){ //time difference in microsec accuracy
            before = after;
            ManipulateCurrent('s');
        }
</code></pre>
</blockquote>

<p>could become </p>

<pre><code>        if (IS_LATER(after, before)) {
            before = ADD_TO_TIMEVALUE(after, 500000);
            ManipulateCurrent('s');
        }
</code></pre>

<p>with </p>

<pre><code>#define IS_LATER(a, b) ((a.tv_sec == b.tv_sec &amp;&amp; a.tv_usec &gt; b.tv_usec) || a.tv_sec &gt; b.tv_sec)
</code></pre>

<p>and</p>

<pre><code>#define ADD_TO_TIMEVALUE(tv, t) do {\
    tv.tv_usec += t; \
    while (tv.tv_usec &gt;= 1000000) { \
        tv.tv_usec -= 1000000; \
        tv.tv_sec++; \
    } \
} while (0)
</code></pre>

<p>This makes updating <code>before</code> more expensive, but makes comparing <code>before</code> and <code>after</code> cheaper (up to three comparisons rather than two conversions, a multiplication, an addition, subtractions, and a comparison).  If you usually don't update, this is better.  </p>

<p>Also note that it is more modern (C99 and later) to do this with inline functions than macros.  </p>

<h3>But is that the problem?</h3>

<p>This will make the loop operate faster, but that's not really the problem.  You keep looping until a certain amount of time has passed.  Looping faster won't change that.  You might better find a way to loop more slowly to use less CPU.  </p>

<p>You are using </p>

<blockquote>
<pre><code>    nodelay(stdscr, TRUE);
</code></pre>
</blockquote>

<p>Consider instead </p>

<pre><code>    halfdelay(1);
</code></pre>

<p>Then it should block on input until it times out (after a tenth of a second).  So if the user isn't hitting keys, this will only process five times (at most) before advancing the row.  </p>

<p>Note:  I haven't tried it.  </p>
    </div>