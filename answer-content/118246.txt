<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Problem description</strong></p>

<blockquote>
  <p>but I think their description is very obscure</p>
</blockquote>

<p>I must confess that I agree with that :)</p>

<p>First I couldn't at all understand the <code>@option</code> argument usage, especially as you drop it if present.</p>

<p>Also you've precised that "Eventually not numeric keys are omitted", but I can't see anything so in your code.</p>

<p><strong>Code improvement</strong></p>

<p>You can simplify this statement:</p>

<pre><code>$asObject = ( T_OBJECT_CAST == $args[count($args)-1] );
</code></pre>

<p>using one of the old (and somewhat forgotten :) array functions:</p>

<pre><code>$asObject = ( T_OBJECT_CAST == end($args) );
</code></pre>

<p>Another pont is that it lacks control in this statement:</p>

<pre><code>if( isset($array[$i]) )
</code></pre>

<p>so when processing an empty subarray (like in <code>$array3</code> in your example), it fires a Notice "Undefined index" error. To avoid it you shoud write:</p>

<pre><code>if( isset($array[$i]) AND is_array($array[$i]) )
</code></pre>

<p><strong>Strategy</strong></p>

<p>For the processing method itself I suggest an alternative way, again using old array functions (<code>current()</code> and <code>next()</code>), avoiding to look for the arrays max length.<br>
Looks like this:</p>

<pre><code>function multiArrayCombine() {
  $arrays = func_get_args();
  do {
    $newSub = [];
    foreach ($arrays as &amp;$array) {
      while (!is_numeric(key($array))) {
        if (!next($array)) {
          break;
        }
      }
      if (($current = current($array)) != FALSE) {
        $newSub[key($current)] = reset($current);
      }
      next($array);
    }
    if ($newSub) {
      $newArray[] = $newSub;
    }
  } while ($newSub);
  return $newArray;
}
</code></pre>

<p>It takes advantage of the fact that <code>current()</code> iterates each array whatever its length, merely returning <code>FALSE</code> once end reached.</p>

<p>Note that:</p>

<ul>
<li>in <code>foreach ($arrays as &amp;$array)</code> we pass <code>&amp;$array</code> by reference: if not, the passed <code>$array</code> would always be in its <code>reset</code> state.</li>
<li>in <code>if (($current = current($array)) != FALSE)</code> we don't test by <code>!==</code> (which would check only the <code>end</code> state) but <code>!=</code> so at the same time checking for empty subarray too.</li>
</ul>
    </div>