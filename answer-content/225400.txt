<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Conditional line not in brackets</h3>

<p>There is an <code>if</code> statement in <code>queryAPI()</code> without brackets. This impacts readability greatly- especially if the code to be conditionally executed gets moved to the line below. It is best to always include brackets. </p>

<p>I haven’t tested this with your code but you could simplify the <code>if</code>/<code>else</code> to a statement that uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR_()" rel="nofollow noreferrer">short-circuit evaluation</a> with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR_()" rel="nofollow noreferrer">logical OR</a>:</p>

<pre><code>return api.data[0] || { name: [], quote: [], deathCount: [] };
</code></pre>

<h3>Variable names</h3>

<p>Some variables are misleading e.g.:</p>

<blockquote>
<pre><code>const api = await axios.get(`https://www.breakingbadapi.com/api/${endpoint}`);
</code></pre>
</blockquote>

<p>The return value should be an API response - not an API. Thus a name like <code>apiResponse</code> or <code>response</code> would be more descriptive. </p>

<h3>Constants in all capitals</h3>

<p>For constants that shouldn’t change, most style guides for JavaScript (as well as similar languages) call for constant names to be all uppercase.</p>

<p>E.g. </p>

<pre><code>const UPDATE_TIME = 2000;
const TOTAL_CHAR = 54;
const INITIAL_CHAR = 1;
</code></pre>

<p>I am presuming there was a typo in the name <code>initalChar</code>.</p>

<p>It might also be wise to define URLs in constants.</p>

<p>Those variables could be moved out of the functions and put near the top of the code or in an included module. That way if any of them need to be updated you wouldn’t have to hunt through the code. </p>

<h3>Simplify interval function</h3>

<p>The callback can just be a reference. So anonymous function in the block:</p>

<blockquote>
<pre><code>setInterval(() =&gt; {
    updatePageWithRandomCharacter();
 }, updateTime);
</code></pre>
</blockquote>

<p>Can be shortened to:</p>

<pre><code>setInterval(updatePageWithRandomCharacter, UPDATE_TIME);
</code></pre>

<p>That line could replace the call to <code>runCharacterUpdateInterval()</code> and then that function wouldn’t be needed anymore. </p>

<h3>Excess <code>await</code> keywords</h3>

<p>Unless I am missing something, there are more <code>await</code> keywords than are necessary. For example:</p>

<blockquote>
<pre><code>return await { bio, quote, deathCount };
</code></pre>
</blockquote>

<p>Should not need the <code>await</code> keyword because it is just a plain object. </p>

<p>The same applies to this line:</p>

<blockquote>
<pre><code>if (await api.data[0]) return await api.data[0];
</code></pre>
</blockquote>

<h3>Useless call to <code>Math.floor()</code></h3>

<p>The return line of <code>getRandomCharacterId()</code> is:</p>

<blockquote>
<pre><code>return Math.floor(Math.random() * Math.floor(totalChar)) + initalChar;
</code></pre>
</blockquote>

<p>And <code>totalChar</code> is assigned the value <code>54</code> which is an integer and this equivalent to the floor of <code>54</code> so that call to <code>Math.floor()</code> can be removed. </p>

<h3>Arrow functions could be a single line</h3>

<p>It is not mandatory but simple functions don’t need brackets or a <code>return</code>- for example:</p>

<blockquote>
<pre><code>const encode = name =&gt; {
  return name.replace(/ /g, "+");
};
</code></pre>
</blockquote>

<p>Could be simplified to:</p>

<pre><code>const encode = name =&gt;  name.replace(/ /g, "+");
</code></pre>

<p>The same is true for this promise callback:</p>

<blockquote>
<pre><code>createCharacter().then(profile =&gt; {
    socket.push("breaking bad", profile);
});
</code></pre>
</blockquote>

<p>Though if the brackets were removed then the return value from the call to <code>socket.push()</code> would then be returned from the callback. </p>
    </div>