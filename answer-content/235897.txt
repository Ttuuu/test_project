<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would recommend marking <code>explicit</code> the conversions that could truncate values (e.g. construction from another short string, with <code>N</code> &gt; <code>Size</code>).</p>

<p>Almost every function assumes that the string ends at the first NUL character, rather than continuing to the actual length of the string, making it much less useful than <code>std::string</code>.</p>

<p>I don't like the imposition on the user to account for the final size byte - if I create a <code>ShortString&lt;3&gt;</code>, I would expect to be able to store 3 characters.  The code seems thoroughly confused about whether sizes include an extra NUL or not (see the extract below).</p>

<p>I would expect to see a constraint to prevent instantiating the class with a <code>Size</code> greater than can be held in the final <code>T</code> value.  Consider accessing <code>_buffer[capacity]</code> as an unsigned type rather than taking on <code>T</code>'s signedness.</p>

<hr>

<p>Here, we assume that a <code>ShortString&lt;N&gt;</code> always holds exactly <code>N</code> characters (even though its limit is <code>N-1</code>; so we end up setting the size to -1 if <code>N &gt;= Size</code>):</p>

<blockquote>
<pre><code>template &lt;size_type N&gt;
ShortString(ShortString&lt;N&gt;&amp;&amp; rhs)
{
    auto size = N &gt;= Size ? Size: N;
    std::memcpy(_buffer, rhs.c_str(), size);
    set_size(size);
}
</code></pre>
</blockquote>

<p>I think you meant something like</p>

<pre><code>    auto length = std::max(N-1, rhs.size());
    std::memcpy(_buffer, rhs_buffer, length+1);
    set_size(length);
</code></pre>
    </div>