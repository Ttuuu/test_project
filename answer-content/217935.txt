<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>first of all, thanks for your great example.</p>

<p>I update my little program based of your answer to benchmark it.</p>

<p>The project should be  .NETFramework 4.0 client, but for the benchmark i change it to be  .NETFramework 4.0.</p>

<pre><code> [StructLayout(LayoutKind.Sequential, Pack = 4)]
public class SomeStructure
{
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
    public char[] szF1;
    public char cF2;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
    public char[] szF3;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 7)]
    public char[] szF4;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 7)]
    public char[] szF5;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 7)]
    public char[] szF6;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]
    public char[] szF7;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]
    public char[] szF8;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]
    public char[] szF9;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]
    public char[] szF10;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1)]
    public char[] cF11;
    public char cF12;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
    public char[] cF13;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 7)]
    public char[] szF14;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]
    public char[] szF15;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 7)]
    public char[] szF16;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]
    public char[] szF17;
}

public class Race
{
    //[Benchmark(Baseline = true)]
    //public SomeStruct A() =&gt; MemoryMarshal.Read&lt;SomeStruct&gt;(_data);
    [Benchmark(Baseline = true)]
    public object A() =&gt; Program.ConvertBytesToStructure(new SomeStructure(), _data, Marshal.SizeOf(typeof(SomeStructure)), 0, _data.Length);

    [Benchmark]
    public SomeStructure B() =&gt; Program.ConvertBytesToStructureV2&lt;SomeStructure&gt;(_data, 0, _data.Length);

    private readonly byte[] _data = new byte[] {
        49, 50, 49, 49, 50, 51, 52, 53, 54, 55, 56,
        49, 50, 51, 52, 53, 54, 55, 49, 50, 51, 52,
        53, 54, 55, 49, 50, 51, 52, 53, 54, 55, 49,
        50, 51, 52, 53, 54, 55, 56, 57, 49, 50, 51,
        52, 53, 54, 55, 56, 57, 49, 50, 51, 52, 53,
        54, 55, 56, 57, 49, 50, 51, 52, 53, 54, 55,
        56, 57, 49, 97, 49, 50, 49, 50, 51, 52, 53,
        54, 55, 49, 50, 51, 52, 53, 54, 55, 56, 57,
        49, 50, 51, 52, 53, 54, 55, 49, 50, 51, 52,
        53, 54, 55, 56, 57
};

}

 public class Program
{

    static void Main(string[] args)
    {
        var summary = BenchmarkRunner.Run&lt;Race&gt;();
        Console.ReadKey();
    }


    public static object ConvertBytesToStructure(object target, byte[] source, Int32 targetSize, int startIndex, int length)
    {
        if (target == null)
            return null;

        IntPtr p_objTarget = Marshal.AllocHGlobal(targetSize);
        try
        {
            Marshal.Copy(source, startIndex, p_objTarget, length);
            Marshal.PtrToStructure(p_objTarget, target);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            Marshal.FreeHGlobal(p_objTarget);
        }

        return target;
    }

    public static T ConvertBytesToStructureV2&lt;T&gt;(byte[] data, int startIndex, int length)
    {
        byte[] fixedData = new byte[length];
        unsafe
        {
            fixed (byte* pSource = data, pTarget = fixedData)
            {
                int index = 0;
                for (int i = startIndex; i &lt; data.Length; i++)
                {
                    pTarget[index] = pSource[i];
                    index++;
                }
            }

            fixed (byte* p = &amp;fixedData[0])
            {
                return (T)Marshal.PtrToStructure(new IntPtr(p), typeof(T));
            }
        }
    }

}
</code></pre>

<p>The results:</p>

<p><a href="https://i.stack.imgur.com/SkjqN.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/SkjqN.png" alt="enter image description here"></a></p>

<p>If i understand good - it seems that according to the Benchmark results,the first method is faster than the second method.</p>

<p>But these are not the results I see in my system.</p>

<p>More details:
It's multi-threading system, i've a service that listen to another service and register to his event, when the event is raised with unmanaged data (byte[]) i convert that to the my cutom managed object.</p>

<p>So far so good, but when i stress the system by sending thousands of events (~20000) per second, The original method (ConvertBytesToStructure) getting poor performance, and the new method getting excellent performance..</p>
    </div>