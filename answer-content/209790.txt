<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't throw <code>Exception</code></h3>

<p>It's recommended to throw a specific type of exception, and avoid the overly general <code>Exception</code>.</p>

<h3>Think twice before using checked exceptions</h3>

<p>The <code>addRoot</code> method throws <code>Exception</code> when a root node already exists in the tree.
This is a checked exception, which means that callers must catch it and handle it.
This method is only called by <code>add</code>, and it doesn't handle it, instead it declares to <code>throw</code> as well.
Users of this class may wonder: "why do I have to catch this exception"?
Or, "what can go wrong while adding a node"?
In fact, you won't be able to give a good answer to that question.
Using the public API of this class,
an exception will never be thrown.
The only way the program might set <code>root</code> twice is if you have some mistake in the implementation.
In such case, a more appropriate exception type would be <code>IllegalStateException</code>.
That's a runtime exception, and users of the class won't have to handle it.</p>

<h3>Hide implementation details</h3>

<p>From the posted code, I don't see a reason for the <code>BSTNode</code> class to be publicly visible. If that's the case, then it would be better to make it a <code>private static</code> inner class of <code>BST</code>, to hide this implementation detail from users of <code>BST</code>.</p>

<h3>Remove pointless <code>get</code> method</h3>

<p>The <code>T get(T data)</code> method returns <code>null</code> if <code>data</code> is not found, or else <code>data</code>.
This is an unusual feature of a BST.
Whatever this could be useful for, it could be implemented in terms of <code>contains</code>.</p>

<h3>Use appropriate data types</h3>

<p><code>levelOrder</code> uses a <code>ConcurrentLinkedQueue</code> for its queue.
Why not simply a <code>LinkedList</code> or <code>Deque</code>?</p>

<p>Also, why does <code>children()</code> return an <code>Iterator</code> instead of a <code>List</code>?
With a <code>List</code>, iterating over the children would be more compact to implement.</p>
    </div>