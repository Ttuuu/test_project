<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Be nice to the maintenance programmer, even (especially?) if you expect it to be you. If you're mixing characters which are visually indistinguishable but don't need to be literal self-representations, you can use Unicode escapes and hexadecimal offsets as so:</p>

<pre><code>convertNumbers2English: function (string) {
    return string.replace(/[\u0660-\u0669]/g, function (c) {
        return c.charCodeAt(0) - 0x0660;
    }).replace(/[\u06f0-\u06f9]/g, function (c) {
       return c.charCodeAt(0) - 0x06f0;
   });
}
</code></pre>

<p>Just that small change accomplishes the following:</p>

<ol>
<li>I can easily see that I haven't missed any digits without having to count;</li>
<li>I can easily see that I haven't accidentally mixed digits from the two styles;</li>
<li>I can easily see that the offset subtracted is correct in each case;</li>
<li>I can easily see that the values returned by the anonymous functions are integers from <code>0</code> to <code>9</code> and not strings or codepoints corresponding to <code>'0'</code> to <code>'9'</code>, which is useful if I'm not primarily a JS developer;</li>
<li><p>If I care about squeezing every last byte out of my JS, I can see a way to combine the two into one:</p>

<pre><code>convertNumbers2English: function (string) {
    return string.replace(/[\u0660-\u0669\u06f0-\u06f9]/g, function (c) {
        return c.charCodeAt(0) &amp; 0xf;
    });
}
</code></pre>

<p>The minimiser should take care of unescaping the Unicode escapes.</p></li>
<li>It might be slightly easier for me to find which characters they are, because I can look up the hex values in a Unicode character table.</li>
</ol>
    </div>