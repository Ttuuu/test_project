<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your code.</p>

<h2>Don't shadow template types</h2>

<p>The code includes these lines:</p>

<pre><code>namespace Util
{
    template&lt;typename T&gt;
    class Node
    {
    public:
        template&lt;typename T&gt; friend class Iterator;
        template&lt;typename T&gt; friend class List;
</code></pre>

<p>There are a few problems here, but one is that the inner declarations shadow the outer one.  </p>

<p>Another problem is that the way this code is sructured, the <code>Node</code> class needs to refer to the <code>List</code> and <code>Iterator</code> classes.  However, those classes are not defined within the <code>Node.h</code> file and so they need forward declarations.  To address both these issues, one could place a forward declaration within the <code>Util</code> namespace:</p>

<pre><code>template&lt;typename T&gt;
class List;
</code></pre>

<p>Then within the class, the <code>friend</code> line would look like this:</p>

<pre><code>friend class List&lt;T&gt;;
</code></pre>

<p>Better, however, would be the next suggestion:</p>

<h2>Reconsider the packaging</h2>

<p>I would think there is very little use of <code>Node</code> outside the context of a <code>List</code>.  For that reason, I'd suggest that it should be a private class within <code>List</code> and therefore, the <code>Node.h</code> file would go away.  Similar logic applies to <code>Iterator.h</code> </p>

<h2>Document or eliminate template limitations</h2>

<p>If we try to build a <code>List&lt;std::string&gt;</code> it will fail with the current code because of this line:</p>

<pre><code>List&lt;T&gt;::List() : head(new Node&lt;T&gt;(0)), list_size(0)
</code></pre>

<p>The problem is that that passing a <code>0</code> to the <code>Node</code> constructor only works if the templated type <code>T</code> can be constructed that way and <code>std::string</code> cannot.  If instead, a default <code>Node</code> constructor were written, we could write this:</p>

<pre><code>List&lt;T&gt;::List() : head(new Node&lt;T&gt;), list_size(0) {}
</code></pre>

<p>There is more, but it's all I have time for at the moment.</p>
    </div>