<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is definitely much improved over the previous version.  Good job!  There may still some things that might be improved.</p>

<h2>Use only necessary <code>#include</code>s</h2>

<p>The <code>#include &lt;vector&gt;</code> line is not necessary and can be safely removed.</p>

<h2>Use all required <code>#include</code>s</h2>

<p>Because <code>main</code> refers to <code>std::runtime_error</code> it should have <code>#include &lt;stdexcept&gt;</code>.</p>

<h2>Reduce runtime complexity where practical</h2>

<p>The <code>std::find</code> used in <code>board_full</code> is not bad, and as a practical matter, no human will ever notice the difference between it and a faster mechanism, but the simpler method is to simply keep a turn counter.  If the number of turns is 9, then either someone just won or it's a tie.  That would reduce the code to this:</p>

<pre><code>bool isTie() const {
    return turn_count &gt;= 9;
}
</code></pre>

<p>Note also that I've used the very common <code>is</code> prefix to make it perfectly unambiguous that it's a function returning a <code>bool</code> and <code>isTie</code> make clear what <code>true</code> means.  </p>

<p>Also, the <code>play_game</code> is more complex than it needs to be.  Here's an alternative version:</p>

<pre><code>void play_game() {
    TicTacToe game;
    game.play();
}

void TicTacToe::play() {
    for (bool ingame = true; ingame; player = 1 - player) {
        printMatrix();
        input(player);
        if (isWin()) {
            std::cout &lt;&lt; "Player " &lt;&lt; player+1 &lt;&lt; " wins!\n";
            ingame = false;
        } else if (isTie()) {
            std::cout &lt;&lt; "Draw!\n";
            ingame = false;
        }
    }
}
</code></pre>

<p>In this version, the <em>game</em> keeps track of which player is playing, rather than having that knowledge external to the object.</p>

<h2>Use object to group related things</h2>

<p>In various places within the code, there is a <code>bool player1_active</code>, prompts such as <code>"1[X]:"</code>, <code>m_player1_token</code> and <code>FieldState::player1</code>.  I think it would make the code simpler if these concepts were all grouped together into a <code>Player</code> object.  This would also make it quite simple to adapt a robot player, since it could likely use the same <code>Player</code> interface, if carefully designed.</p>

<h2>Think about the user</h2>

<p>Although I think the board is less cluttered and easier to read in this version than when it had the squares numbered, it makes it difficult for the user to figure out how to enter a move.  Having some instructions or maybe statically printing the numbering scheme as part of the prompt might help.  Also, when one player has won the game it says something like "Player 2 wins!" but what the <em>user</em> deals with and thinks about is "X" and "O", not "1" and "2".</p>

<h2>Example result</h2>

<p>Here's how all of that might look if implemented.  </p>

<h3>tic_tac_toe.h</h3>

<pre><code>#ifndef TIC_TAC_TOE_H
#define TIC_TAC_TOE_H

#include &lt;array&gt;
#include &lt;string&gt;

namespace tic_tac_toe
{
    class TicTacToe;

    class Player {
    public:
        constexpr Player(char token, const char* winmsg, const char* prompt) : 
            token{token}, 
            winmsg{winmsg},
            prompt{prompt}
        {}
        int select(const TicTacToe &amp;board) const; 
        const char token;
        const char *winmsg;
        const char *prompt;
    };

    class TicTacToe final { 
    public:
        TicTacToe() {
            m_board.fill(emptyToken);
        }
        void play(); 
        bool occupied(unsigned square) const {
            return square &gt;= num_squares || m_board[square] != emptyToken;
        }
        static constexpr int num_squares{9};
        static constexpr char emptyToken{' '};
    private:
        void print_state_of_board() const;
        bool isWin() const;
        void input(int player);
        bool isTie() const {
            return turn_count &gt;= num_squares;
        }

        static constexpr Player players[2] = { 
            { 'X', "X Wins!", "1[X]:" },
            { 'O', "O Wins!", "2[O]:" },
        };
        int turn_count = 0;
        int player = 0;
        std::array&lt;char, num_squares&gt; m_board;
    };

    int get_user_input(const std::string&amp; user_message);
    void play_game();   
}
#endif
</code></pre>

<h3>tic_tac_toe.cpp</h3>

<pre><code>#include "tic_tac_toe.h"
#include &lt;cctype&gt; 
#include &lt;iostream&gt;

namespace tic_tac_toe
{
    constexpr Player TicTacToe::players[2];
    constexpr char TicTacToe::emptyToken;

    int Player::select(const TicTacToe &amp;board) const {  
        while (true) {
            int answer = get_user_input(prompt)-1;
            if (!board.occupied(answer)) 
                return answer;
            std::cout &lt;&lt; "Invalid input; try again\n";
        } 
        return 0;  // should never get here!
    }

    void TicTacToe::print_state_of_board() const {
        auto col{3};
        for (std::size_t i = 0; i &lt; m_board.size(); ++i) {
            std::cout &lt;&lt; '|' &lt;&lt; m_board.at(i);
            if (--col == 0) {
                std::cout &lt;&lt; "|\n";
                col = 3;
            }
        }
    }

    bool TicTacToe::isWin() const {
        static constexpr std::array&lt;std::array&lt;int, 3&gt;, 8&gt; combinations{{ 
                {0,1,2}, {3,4,5}, {6,7,8}, {0,3,6},
                {1,4,7}, {2,5,8}, {0,4,8}, {2,4,6}
        }};
        for (const auto&amp; combination : combinations) {
            if (m_board.at(combination[0]) == players[player].token &amp;&amp;
                    m_board.at(combination[1]) == players[player].token &amp;&amp;
                    m_board.at(combination[2]) == players[player].token) 
            {
                return true;
            }
        }       
        return false;
    }

    void TicTacToe::input(int player) {
        m_board[players[player].select(*this)] = players[player].token;
        ++turn_count;
    }
    void TicTacToe::play() {
        for (bool ingame = true; ingame; player = 1 - player) {
            print_state_of_board();
            input(player);
            if (isWin()) {
                std::cout &lt;&lt; players[player].winmsg &lt;&lt; '\n';
                ingame = false;
            } else if (isTie()) {
                std::cout &lt;&lt; "Draw!\n";
                ingame = false;
            }
        }
    }

    int get_user_input(const std::string&amp; user_message)
    {
        while (true) {
            std::cout &lt;&lt; user_message;
            std::string input;
            std::cin &gt;&gt; input;
            try {
                return std::stoi(input);
            }
            catch (std::invalid_argument&amp;) {
                std::cout &lt;&lt; "\nInput is not a number. Try again:";
            }
        }
    }

    void play_game() {
        for (bool gaming{true}; 
            gaming; 
            gaming = get_user_input("Play again[Yes = 1, No = 0]: ") == 1)
        {
            TicTacToe game;
            game.play();
        }
    }
}
</code></pre>
    </div>