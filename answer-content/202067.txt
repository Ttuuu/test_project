<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I saw your post on python-ideas. I think you have a misconception about native coroutines (i.e. <code>async def</code>). For example, this method in <code>AsyncDict</code>:</p>

<pre><code>async def items(self):
    items = super().items()
    for item in items:
        yield item
</code></pre>

<p>This method does not have any <code>await</code> expressions, therefore the method itself should not be <code>async def</code>. It should just be a regular <code>def</code>. You may not realize it, but an <code>async def</code> function can still call regular <code>def</code> functions, and it can use regular <code>with</code> and <code>for</code> blocks.</p>

<p>In your use case, you should use a regular dictionary and a regular <code>for</code> loop:</p>

<pre><code>calls = {"!ping": ping}

@client.event
async def on_message(message):
    for k, v in calls.items():
        if message.content.startswith(k):
            await v(message)
</code></pre>

<p>This is perfectly legal, and in fact better than trying to create "Async" variants of common data structures that don't need it.</p>
    </div>