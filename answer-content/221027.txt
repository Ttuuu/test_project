<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>this is a performance-critical function any replacements will need to keep this requirement in mind</p>
</blockquote>

<p><strong>Use <code>restrict</code></strong></p>

<p><code>fusc_word(ulong u, ulong* a, ulong* b)</code> uses <code>a, b</code> and certainly the algorithm does not work if those pointers point to overlapping data.</p>

<p>A complier can not make that assumption though and so must emit code as if <code>a</code> and <code>b</code> potentially point to the same location.</p>

<p>Use <code>restrict</code> to allow the compiler to assume they do not overlap and potentially emit more efficient code.</p>

<pre><code>// static void fusc_word(ulong u, ulong* a, ulong* b)
static void fusc_word(ulong u, ulong* restrict a, ulong* restrict b)
</code></pre>

<p><strong>Smaller table</strong></p>

<p>Depending on your platform, a smaller table may be faster - profile to find out.</p>

<pre><code>// static const ulong fuscAA[] 
static const unsigned char fuscAA[] 
// or 
static const unsigned fuscAA[] 
</code></pre>

<p><strong>Bug</strong></p>

<p><code>int newA = a * fuscAA[i] + b * fuscAB[i];</code> may truncate.  I'd expect <code>newA</code> to be <code>ulong</code>.</p>

<hr>

<p>To return 2 <code>int</code>, the C library already has <code>div_t</code>, so code could use/mimic that.</p>

<p>Note: returning a <code>struct</code>, even a small one, tends to rankle some.  For me I find returning a small <code>struct</code> fine for <em>numeric</em> coding such a making a <code>struct fraction { int n, d; }</code> a useful approach.  The trick is that there are those who will employ ever larger and larger <code>struct</code>s making very inefficient code.  Use sane judgment.</p>
    </div>