<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>log</code> is already declared in <code>&lt;math.h&gt;</code>. You don't need to declare it yourself. In fact, it could be harmful.</p></li>
<li><p>As stated in another answer, do not use floating point math.</p>

<p>In fact, you don't need to know the <em>exact</em> position of the leftmost bit. For your purposes, the value of <code>codepoint</code> is enough. For example, <code>bitPos &lt;= 7</code> is equivalent to <code>codepoint &lt; (1 &lt;&lt; 8)</code>.</p></li>
<li><p>I strongly recommend to separate the I/O from the conversion logic. Consider</p>

<pre><code>while (read_four_bytes(input_fp, bufferCP) == 4) {
    size_t utf_char_size = convert_to_utf(bufferCP, bufferOut);
    write_utf_char(bufferOut, utf_char_size);
}
</code></pre></li>
<li><p>DRY. All the conversion clauses look very similar. Consider refactoring them into a function, along the lines of</p>

<pre><code>convert_codepoint(uint32_t codepoint, int utf_char_size, char * bufferOut) {
    for (int i = 0; i &lt; utf_char_size; i++) {
        bufferOut[i] = ((codepoint &gt;&gt; 6 * (utf_char_size - i)) &amp; mask) | 0x80;
    }
    bufferOut[0] |= special_mask[utf_char_size];
}
</code></pre>

<p>and use it as</p>

<pre><code>if (codepoint &lt; (1 &lt;&lt; 8)) {
    convert_codepoint(codepoint, 1, bufferOut);
else if (codepoint &lt; (1 &lt;&lt; 12)) {
    convert_codepoint(codepoint, 2, bufferOut);
} ....
</code></pre>

<p>The resulting cascade of <code>if/else</code>s may also be transformed into a loop.</p></li>
</ul>
    </div>