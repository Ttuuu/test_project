<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To start, I have some general tips. Run your code through rustfmt to get consistent formatting and make code easier to read. Run your code through clippy to get tips on common mistakes (clippy had nothing to say about your code, nice!)</p>

<p>One overall thing I'd suggest is to not be afraid to use a custom type in a case like this. Instead of returning a <code>Result&lt;(String, String), String&gt;</code> where the <code>Err</code> has multiple meanings based on value, just go ahead and make an <code>Enum</code> for your commands. I'll show you this in my final example, along with merging the two command sections (which the exercise is kinda fuzzy on whether it cares which way you do it).</p>

<p>Onto specific things:</p>

<p>You can get an iterator over lines of <code>stdin</code> by <code>.lock().lines()</code>, which can make this simpler, but that's a matter of preference over using <code>read_line</code>. If you are going to use <code>read_line</code>, you might as well reuse your input buffer, since that's the whole point of it taking a buffer as a parameter instead of just returning a <code>String</code>. That way you aren't reallocating each time. </p>

<pre><code>let mut stdin = io::stdin()
let mut input = String::new();
loop {
    input.clear();
    stdin.read_line(&amp;mut input).unwrap();
    // ...
}
</code></pre>

<p><code>dissect_input</code> should take a <code>&amp;str</code> instead of a <code>String</code>, since you only need to view it.</p>

<p>Down in the listing part, you do <code>&amp;command.trim().to_string()</code>, which is unneeded in a few ways. <code>.to_string()</code> takes you from a <code>&amp;str</code> to a <code>String</code>, and then the <code>&amp;</code> brings you right back to a <code>&amp;str</code>, so you could just do <code>command.trim()</code>. Also, you can just bind in the match you already have, like <code>dept =&gt; employees.get(dept)</code></p>

<p>Overall, this is a really good first attempt! It can be hard to first wrap your head around the things that make rust different, like lifetimes and slices, but just getting things working is a great step.</p>

<p>Here's how I might choose to do this exercise.</p>

<pre><code>use std::collections::HashMap;
use std::io;

// required trait for .lines()
use std::io::BufRead;

fn main() {
    let mut employees: HashMap&lt;String, Vec&lt;String&gt;&gt; = HashMap::new();
    let stdin = io::stdin();
    println!("Type 'Add &lt;name&gt; to &lt;department&gt;' to add an employee");
    println!("Type 'List &lt;department&gt;' to list the employees of a department");
    println!("Type 'All' to list all employees by department");
    println!("Type 'Quit' to quit");
    for line in stdin.lock().lines() {
        let input = line.expect("error: unable to read user input");
        match Command::from_input(&amp;input) {
            // or_default is just a convenience, does the same as or_insert_with(Vec::default)
            Some(Command::Add { dept, name }) =&gt; employees.entry(dept).or_default().push(name),
            Some(Command::List(dept)) =&gt; match employees.get(&amp;dept) {
                Some(names) =&gt; {
                    for name in names {
                        println!("{}: {}", dept, name);
                    }
                }
                None =&gt; println!("I don't recognize that department!"),
            },
            Some(Command::All) =&gt; {
                for (dept, names) in &amp;employees {
                    let mut names = names.clone();
                    names.sort();
                    for name in names {
                        println!("{}: {}", dept, name);
                    }
                }
            }
            Some(Command::Quit) =&gt; break,
            // consider using eprintln, which prints to stderr
            None =&gt; println!("Input error!"),
        }
    }
    println!("Have a nice day!");
}

enum Command {
    // Using named fields instead of Add(String, String) because dept and name
    // are the same type and could get mixed up.
    Add { dept: String, name: String },
    List(String),
    All,
    Quit,
}

impl Command {
    fn from_input(s: &amp;str) -&gt; Option&lt;Self&gt; {
        let words: Vec&lt;&amp;str&gt; = s.trim().split_whitespace().collect();
        // "Slice destructuring / slice pattern matching" for more info
        match words.as_slice() {
            ["All"] =&gt; Some(Command::All),
            ["Quit"] =&gt; Some(Command::Quit),
            ["List", dept] =&gt; Some(Command::List(dept.to_string())),
            ["Add", name, "to", dept] =&gt; Some(Command::Add {
                dept: dept.to_string(),
                name: name.to_string(),
            }),
            _ =&gt; None,
        }
    }
}
</code></pre>
    </div>