<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>
<p>A class with all static members! Seems like the wrong use case. We have <code>namespace</code> for that type of thing.</p>
<h2>Code Review</h2>
<p>I like the comment at the top:</p>
<pre><code>/*
 * This algorithm borrows some ideas from TimSort but is not quite as
 * sophisticated.  Runs are detected, but only in the forward direction, and the
 * invariant is stricter: each stored run must be no more than half the length
 * of the previous.
 *
 * As in TimSort, an already-sorted array will be processed in linear time,
 * making this an "adaptive" algorithm.
 */
</code></pre>
<p>Though I am unfamiliar with TimSort it easy to google. So a very nice comment all in all.</p>
<p>I hate this comment though:</p>
<pre><code>    /* Inserts a single element into a sorted list */
    static void insert_head (Iter head, Iter tail, Less less)
</code></pre>
<p>Especially when it does not seem to match the function. What element is being inserted here? After reading the code it seems like the element at the head of the range is sorted into place as the elements [<code>head + 1</code> to <code>tail</code>) are already sorted.</p>
<p>Better name better comment on what it does. Preferably just a better function name.</p>
<p>Not all iterators support <code>+</code> operation or the <code>&lt;</code> operation. This is why we have <code>std::next</code> or <code>operator++</code> and iterators are usually tested with <code>!=</code> or <code>==</code>. Also, it looks like you are just doing a <code>std::find_if()</code>, so use the algorithm.</p>
<pre><code>        for (dest = head + 1; dest + 1 &lt; tail; dest ++)
        {
            if (! less (* (dest + 1), * head))
                break;
        }

        // I would rewrite as:
        I loop = head;
        ++loop;
        auto find = std::find_if(loop, tail, [&amp;less](I lhs, I rhs){return  !less(*lhs, *rhs);});
</code></pre>
<p>This bit of code:</p>
<pre><code>        Value tmp = std::move (* head);
        std::move (head + 1, dest + 1, head);
        * dest = std::move (tmp);
</code></pre>
<p>is implemented by <code>std::rotate()</code>.</p>
<p>Again I hate the comment. Not because it or the function are badly named. But because the comment does not give me any extra information. If it is not giving me information, it is actually worse than nothing as it will suffer from comment rot over time. The name of the function and its parameters should be your documentation.</p>
<pre><code>    /* Merges two sorted sub-lists */
    static void do_merge (Iter head, Iter mid, Iter tail, Less less, std::vector&lt;Value&gt; &amp; buf)
</code></pre>
<p>Using the operator <code>-</code> on iterators is not always supported. You should use <code>std::distance()</code>. Also using a C-cast is not tolerated in any civilized world. Take your heathen ways and reform, sinner! C++ has its own set of cast operators that do this much better. In this case <code>static_cast&lt;&gt;()</code>. But if you use <code>std::distance()</code> you don't need it.</p>
<p>Very clever. So clever I had to go through it a couple of times to convince myself it worked. This is where you may want to comment on being clever.</p>
<pre><code>        /* copy list "a" to temporary storage */
        if (buf.size () &lt; (Size) (mid - head))
            buf = std::vector&lt;Value&gt; (std::make_move_iterator (head), std::make_move_iterator (mid));
        else
            std::move (head, mid, buf.begin ());
</code></pre>
<p>But a vector contains two sizes: <code>size()</code> and <code>capacity()</code>. There is no need to allocate a new vector just because the size has been exceeded: you can go until you reach capacity. But even then, why are you doing it manually? The vector is designed to do this stuff all internally in the most efficient way. You should just copy using move iterators and a back inserter. Let the vector sort out its own resizing (this will be usually be more efficient).</p>
<pre><code>        buf.clear();
        std::copy(std::make_move_iterator(head), std::make_move_iterator(mid),
                  std::back_inserter(buf));
</code></pre>
<p>Using move iterators and correctly sizing the buffer will make the following code cleaner.</p>
<pre><code>        auto a = buf.begin ();
        auto a_end = a + (mid - head);
        Iter b = mid;
        Iter dest = head;
</code></pre>
<p>Sure but this can be made much more readable:</p>
<pre><code>        while (1)
        {
            if (! less (* b, * a))
            {
                * (dest ++) = std::move (* a);
                if ((++ a) == a_end)
                    break;
            }
            else
            {
                * (dest ++) = std::move (* b);
                if ((++ b) == tail)
                    break;
            }
        }

        // I would write it like this:
        while(a != a_end &amp;&amp; b != tail) {
            *dest++ = (! less (* b, * a))
                   ? std::move(*a++);
                   : std::move(*b++);
        }
</code></pre>
<p>OK. That's enough for one season. Seems like plenty that needs to be re-worked already.</p>
    </div>