<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>PDO::quote()</code> function is not correct for making column names safe. It's basically a wrapper for the <a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_quote" rel="nofollow noreferrer">QUOTE() function in MySQL</a>:</p>
<blockquote>
<p>The string is returned enclosed by single quotation marks and with each instance of backslash (), single quote ('), ASCII NUL, and Control+Z preceded by a backslash. If the argument is NULL, the return value is the word “NULL” without enclosing single quotation marks.</p>
</blockquote>
<p>The enclosing single-quote marks make the result usable as a string value in SQL, but you are using it for a column name. So you would end up with:</p>
<pre><code>'mycolumn' = 'myvalue'
</code></pre>
<p>The single quotes make it not act like a column in your expression. The QUOTE() function is for string or date values, not identifiers like column names or table names.</p>
<p>You posted an update, where you changed to using a bound query parameter for the value, and you used a regular expression replacement function to strip out any non-word characters from the column name.</p>
<p>But this still risks the column being a <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html" rel="nofollow noreferrer">reserved SQL keyword</a>, which will cause errors in your code:</p>
<pre><code>SELECT = 'myvalue'
</code></pre>
<p>To avoid this, the column name should be enclosed in backticks:</p>
<pre><code>`SELECT` = 'myvalue'
</code></pre>
<p>If you enclose the column in backticks, then the column may be a reserved keyword, or it can even have punctuation, whitespace, international characters. Those are legitimate for SQL identifiers, but your escaping function would not allow it.</p>
<p>You should make sure if the column name contains a literal back-tick, you double it, which will make it act like a literal back-tick in your SQL.</p>
<pre><code>function quoteIdentifier($str) {
    return '`' . preg_replace('/`/', '``', $str) . '`';
}
</code></pre>
    </div>