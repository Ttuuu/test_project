<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not experienced in LUA, so I can't comment on the code style itself.  But I can on the algorithm and implementation.</p>

<hr>

<p>Bugs:</p>

<ul>
<li><p>I'm fairly confident this should be <code>b.y &lt; 0</code>, not <code>b.x &lt; 0</code>.</p>

<pre><code>-- Both points are above or below X axis
if a.y &lt; 0 and b.x &lt; 0 or a.y &gt; 0 and b.y &gt; 0 then
    return nil
end
</code></pre></li>
<li><p>Possible division by zero: if the line segment, after transformation happens to be from (x.a,0) to (x.b,0), then neither will a.y and b.y be both greater than zero nor both less than zero, so the following code will be executed:</p>

<pre><code>local x0 = a.x + (b.x-a.x) * a.y / (a.y-b.y)
</code></pre></li>
</ul>

<hr>

<p>There does not seem to be any filtering of possible colliding objects; just a brute-force checking of all vertices in one object (A) against all edges in another object (B), and all vertices in the other object (B) with all edges in the former (A).  Given that the game "<em>will not have an unhealthily high number of collisions</em>", some fast rejection code should be used.</p>

<p>First, compute the <code>V_len = sqrt(V.x^2 + V.y^2)</code>, and a normal vector <code>N = (V.x/V_len, V.y/V_len)</code>, and a perpendicular vector <code>P = (N.y, -N.x)</code>.</p>

<p>Compute the projection (dot product) of the bounds of the moving object onto these two vectors.  For example, if all objects have a circular bounds, described by a centre point <code>(A.cx, A.cy)</code> and radius <code>A.r</code>, then the projection of the centre on the <code>P</code> vector is the value <code>Pa = A.cx * P.x + A.cy * P.y</code>, and the projection ranges from <code>Pa - A.r</code> to <code>Pa + A.r</code>.  When projecting the moving object on the <code>N</code> vector, add the object's movement to the project, eg <code>Na = A.cx * N.x + A.cy * N.y</code>, projection ranges from <code>Na - A.r</code> to <code>Na + A.r + V_len</code>.</p>

<p>For every other object, compute the projection (dot product) of the object's bounds onto these two vectors <code>N</code> and <code>P</code>.  If the range of the projections for the moving object overlaps the range of the projections of a stationary object, on both projections, then a collision is possible between that object and the moving object.</p>

<p>In the following picture, the black square in moving in direction <code>V</code>.  The projection of the black square &amp; purple triangle overlap on the <code>N</code> projection, but not the <code>P</code> projection, so no collision is possible.  The projection of the black square &amp; green diamond overlap in the <code>P</code> projection, but not the <code>N</code> projection, so again no collision is possible.  If <code>V</code> was slightly larger, the projections of the black square &amp; green diamonds would overlap, so a collision would be possible, and the intersection of the line segments would need to be computed.</p>

<p><a href="https://i.stack.imgur.com/O5Kt0.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/O5Kt0.jpg" alt="projection of 3 objects in direction of motion &amp; perpendicular to motion"></a></p>

<p>You don't need to use a circular boundary.  You could use the bounding box, or other bounding polygon.  Just compute the min/max of dot product of all vertices in the bounding polygon on each of the two vectors <code>N</code> &amp; <code>P</code>.</p>

<p>Once you've decided that the object could collide (projections overlap on both the movement and perpendicular axis), then you can start computing whether the line segments overlap. </p>

<p>Computing the angle of the segments, in order to transform them to (0,0)-(1,0) is an expensive operation.  It is easy to compute the intersection of two line segments.  See <a href="https://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect">how do you detect where two line segments intersect?</a>  Simple multiplications and divisions; no transcendental mathematical functions are necessary.</p>
    </div>