<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<ul>
<li><p><a href="https://www.python.org/dev/peps/pep-0008/?" rel="noreferrer">Read the PEP8 style guide!</a></p>

<ol>
<li>Functions and variables should be <code>snake_case</code></li>
<li>Conditions should be on the next line <code>if a: ...</code> is bad style</li>
<li>Conditions don't need parenthesis <code>while (a)</code> is the same as <code>while a:</code></li>
<li>Avoid <code>temp</code> variables</li>
</ol></li>
</ul>

<h1>Algorithm</h1>

<ul>
<li><p>Your first 2 guard clauses seem very unnecessary</p>

<p>When I remove them, the code still works.</p></li>
<li><p>Consider writing docstring/tests or both with the <a href="https://docs.python.org/3/library/doctest.html" rel="noreferrer">doctest</a> module</p></li>
</ul>

<h1>Alternative Code</h1>

<p>You could use <code>re.findall(substring, string)</code> for counting the occurrence, </p>

<p>OR <code>string.count(substring)</code> making this practically a one-line</p>

<pre><code>import doctest

def beautiful_binary_string(b):
    """
    Returns the steps to make a binary string beautiful

    &gt;&gt;&gt; beautiful_binary_string("0101010")
    2

    &gt;&gt;&gt; beautiful_binary_string("01100")
    0

    &gt;&gt;&gt; beautiful_binary_string("0100101010100010110100100110110100011100111110101001011001110111110000101011011111011001111100011101")
    10
    """
    return b.count("010")

if __name__ == '__main__':
    doctest.testmod()
</code></pre>
    </div>