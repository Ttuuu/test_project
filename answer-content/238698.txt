<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code, as posted, doesn't compile because there is no definition for the <code>Address</code> type. However, given the code for <code>nextFreeAddress</code> in the <code>alloc()</code> method, it's pretty obvious that <code>Address</code> can only be type <code>Int</code>, so that's easy to fix.</p>

<p>Also, <code>HeapImpl</code> is <code>private</code> to ... what? A surrounding <code>object</code> I assume, but that's also missing from the posted code so it's a bit unclear. You say you "would like to hide implementation details," which is a good thing, but I don't know that a private implementation class is significantly more hidden than having private members of a public class. Is the implementation class separate because you envision multiple different implementations available to the end user?</p>

<p>It's a bit unusual to have a factory method that takes no parameters except for a type parameter. It wouldn't be difficult to enhance the "constructor" to take optional initial values.</p>

<pre><code>object Heap {
  def apply[T](ts:T*): Heap[T] = HeapImpl(ts.indices.map(x =&gt; x -&gt; ts(x)).toMap)
}
</code></pre>

<p>Then you can have it both ways:</p>

<pre><code>Heap[Char]()           //res0: Heap[Char] = HeapImpl(Map())
Heap(3L, 5L, 12L, 2L)  //res1: Heap[Long] = HeapImpl(Map(0 -&gt; 3, 1 -&gt; 5, 2 -&gt; 12, 3 -&gt; 2))
</code></pre>

<p>(Notice that the REPL has leaked a bit of your implementation detail.)</p>

<p>At first I was confused by the term <code>Heap</code>. Then I re-read the posting and realized that this isn't a <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" rel="nofollow noreferrer">heap data structure</a> but is, instead, a chunk of memory for dynamic allocation and requiring <a href="https://en.wikipedia.org/wiki/Memory_management" rel="nofollow noreferrer">memory management</a>.</p>

<p>But your code doesn't actually do any of the things that makes a real heap challenging/interesting: dynamic allocation for heterogeneous data, handle fragmentation, etc. It sort of <em>pretends</em> to be a heap, but not very convincingly (your <code>alloc()</code> doesn't really act like <code>malloc()</code>, <code>calloc()</code>, or <code>realloc()</code>). It's just a thin wrapper around a highly restricted <a href="https://en.wikipedia.org/wiki/Associative_array" rel="nofollow noreferrer">associative array</a>.</p>

<p>So, while I find little to fault in the code, I can't see where it serves much purpose.</p>
    </div>