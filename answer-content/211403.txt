<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Start by adding a type for you base class:</p>

<pre><code>typedef std::vector&lt;T&gt; base;
</code></pre>

<p>This can be used to simplify many of your declarations within your code.</p>

<p>Your various <code>begin</code>/<code>end</code> functions can be simplified</p>

<pre><code>auto begin() {
    return base::begin() + lresa_;
}
</code></pre>

<p>Unlike <code>vector</code>, your reserved areas contain default constructed objects.  While this is not an issue for basic types like <code>int</code>, for more complicated types this can result in a performance hit and additional memory consumption.</p>

<p>Your <code>operator==</code> compares the contents of the reserve areas, which can cause incorrect comparison results.  An easy way this can happen is if an element is added then removed (although you do not have any form of remove).  Your <code>reserve</code> can be used as a remove proxy, and will leave valid constructed objects in your reserve area if the vector is shrunk.</p>

<p>You lack a <code>operator[] const</code> function.</p>

<p>How will you handle a move constructor?</p>

<p>You can improve your spacing/formatting.  Having a space between a function name and the parenthesis is pretty uncommon and (IMHO) makes it harder to read.  The overall indentation level is a bit shallow (3 or 4 spaces is more typical).</p>
    </div>