<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a nice, clear, short attempt at the exercise.</p>
<p>You've avoided a couple of common problems:</p>
<ul>
<li>You're correctly using <code>int</code> for the return value from <code>getchar()</code>.  A common mistake is to be misled by the name and to assign directly to a <code>char</code> variable.  That doesn't work, because truncating to <code>char</code> prevents <code>EOF</code> from being distinguished from a valid <code>char</code> value.</li>
<li>You've correctly matched the <code>%d</code> specifier to the type of <code>EOF</code>.</li>
</ul>
<hr>
<p>One simple way to improve your code is to get the compiler to point out weaknesses for you (by default, most C compilers are very lenient; you have to specifically ask for more warnings):</p>
<pre class="lang-sh prettyprint-override"><code>gcc -std=c11 -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds -Wconversion putchar.c -o putchar
</code></pre>
<p>You can make it easier by writing a simple <code>Makefile</code> that contains just:</p>
<pre class="lang-make prettyprint-override"><code>CFLAGS = -std=c11 -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds -Wconversion
</code></pre>
<p>And you can then build simply with</p>
<pre class="lang-sh prettyprint-override"><code>make putchar
</code></pre>
<p>When you've enabled warnings, you'll see:</p>
<pre class="lang-none prettyprint-override"><code>198374.c:3:6: warning: return type of ‘main’ is not ‘int’ [-Wmain]
 void main()
      ^~~~
</code></pre>
<p>The fix for that should be obvious.</p>
<hr>
<p>Now to the meat of the program.  Firstly, before the loop we have a statement</p>
<pre><code>    c = getchar();
</code></pre>
<p>This consumes and ignores one character.  We probably didn't mean to throw that one away.</p>
<hr>
<p>Now consider this expression:</p>
<pre><code> (c = getchar()) != EOF == (0 | 1)
</code></pre>
<p>We're actually comparing (after the assignment) <code>c != EOF</code> against <code>0|1</code>.  But <code>|</code> is the <em>bitwise-or</em> operator, so <code>0|1</code> evaluates to just <code>1</code>.  When <code>c</code> is not <code>EOF</code>, then <code>c!=EOF</code> is <code>1</code>, and the condition is satisfied.  The last time around the loop (when <code>c</code> becomes <code>EOF</code>), then <code>c!=EOF</code> is <code>0</code>, and the loop exits.</p>
<p>What we want to do is save the result of <code>c != EOF</code> and compare that to <code>0</code> and to <code>1</code> separately.  Or, even more simply for this exercise, just print it to standard output:</p>
<pre><code>    do {
        c = getchar();
        printf("getchar() != EOF: %d\n", c != EOF);
    } while (c != EOF);
</code></pre>
<p>Note: given that we haven't been asked to copy the input to output, we shouldn't have the <code>putchar()</code> call.</p>
<p>If we really want to prove that <code>c != EOF</code> is always either <code>0</code> or <code>1</code>, we could test it automatically:</p>
<pre><code>    do {
        c = getchar();
        if ((c != EOF) != 0  &amp;&amp;  (c != EOF) != 1) {
            fprintf(stderr, "(c != EOF) was neither 0 nor 1\n");
            return 1;
        }
    } while (c != EOF);
</code></pre>
<p>You might choose to use a <code>switch</code> statement instead of the <code>if</code>; I think that's clearer:</p>
<pre><code>        c = getchar();
        switch (c != EOF) {
        case 0:             /* okay */
        case 1:             /* okay */
            break;
        default:
            fprintf(stderr, "(c != EOF) was neither 0 nor 1\n");
            return 1;
        }
</code></pre>
<hr>
<h1>Modified code</h1>
<pre><code>#include &lt;stdio.h&gt;

int main()
{
        int c;

        do {
            c = getchar();
            switch (c != EOF) {
            case 0:             /* okay */
            case 1:             /* okay */
                break;
            default:
                fprintf(stderr, "(c != EOF) was neither 0 nor 1\n");
                return 1;
            }
        } while (c != EOF);

        printf("%d\n", c);
}
</code></pre>
    </div>