<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to just touch on style issues mostly.</p>
<pre><code>if input('Would you like to enable blind mode (recommended)? y/n &gt;&gt;&gt; ') == 'y':
    blind_mode = True
else: blind_mode = False
</code></pre>
<p>This could be made a little cleaner and more succinct. First, I'm personally not a fan of putting things on the same line as <code>else:</code>. In the vast majority of cases (here included), I think it hurts readability.</p>
<p>I'd suggest something closer to this though:</p>
<pre><code>answer = input('Would you like to enable blind mode (recommended)? y/n &gt;&gt;&gt; ')
blind_mode = answer.lower() == 'y'
</code></pre>
<ul>
<li>I'm using <code>lower</code> so the user can enter <code>'Y'</code> as well, and it will still match.</li>
<li><code>==</code> already evaluates to a Boolean value. Using an <code>if</code> here to dispatch to <code>True</code>/<code>False</code> is redundant.</li>
</ul>
<p>Along the same lines, you have this function:</p>
<pre><code>def is_victory ():
    if player_pos == goal_pos:
        return True
    return False
</code></pre>
<p>The <code>if</code> is redundant:</p>
<pre><code>def is_victory ():
    return player_pos == goal_pos
</code></pre>
<p>And also here:</p>
<pre><code>line_color = 100, 0 , 100
if blind_mode == True:
    line_color = 0,0,0
</code></pre>
<p>Can be:</p>
<pre><code>line_color = (0, 0, 0) if blind_mode else (100, 0 , 100)
</code></pre>
<p>And the bits like:</p>
<pre><code>if coordinates[0] &lt;= 0:
    return True
else: 
    return False
</code></pre>
<p>Can simply be:</p>
<pre><code>return coordinates[0] &lt;= 0
</code></pre>
<hr>
<pre><code>while wall_generated == False:
</code></pre>
<p>Would be arguably better as:</p>
<pre><code>while not wall_generated:
</code></pre>
<p>If you ever write <code>something == True</code> or <code>something == False</code>, you're better off just writing <code>something</code> and <code>not something</code>. Comparing against <code>True</code> and <code>False</code> is again redundant.</p>
<hr>
<p>Then directly below that you have:</p>
<pre><code>if tuple(generation_pos) in generation_visited:
    is_visited = True
else:
    is_visited = False
</code></pre>
<p>This would be more succinct as:</p>
<pre><code>is_visited = tuple(generation_pos) in generation_visited
</code></pre>
<p>I'd also rethink if the <code>tuple</code> conversion is necessary. You're constantly converting a list to a tuple just to do a comparison. I'd just keep it as a list instead of converting to the coordinates to a tuple, unless you <em>really</em> want/need to immutability benefits of tuples.</p>
<hr>
<pre><code>if (dire == 'right' or 'left') . . .
. . .
if (dire == 'up' or 'down') . . .
</code></pre>
<p>This code is actually broken. <code>dire == 'up' or 'down'</code> will never (ever) be false. It will always be True. See <a href="https://stackoverflow.com/questions/15112125/how-to-test-multiple-variables-against-a-value">here</a> for an explanation of why.</p>
<p>You want something like:</p>
<pre><code>if (dire in {'right', 'left'}) . . .
</code></pre>
<p><code>{. . .}</code> is a set, and <code>in</code> is doing a membership lookup.</p>
<hr>
<pre><code>from random import *
</code></pre>
<p>Try to limit (or outright avoid) using <code>from . . . import *</code> statements like that. Wildcard imports like that have two main problems:</p>
<ul>
<li>You're polluting the namespace. Because you're dumping all the names from the module into your file, that reduces what names you have available to you to use, and increases the chance of a name collision.</li>
<li>It makes it harder for readers of your code to know where functions in your code come from, and what the purpose of the imported modules are.</li>
</ul>
<p>I'd explicitly import exactly what you need:</p>
<pre><code>from random import randint
</code></pre>
<p>Or, use a qualified import:</p>
<pre><code>import random
. . .
random.randint(. . .)
</code></pre>
<p>Now it's clear what's being import, why you're using the <code>random</code> modules, and there is no longer any chance of a collision.</p>
<hr>
<p>You have magic numbers floating around in a few places, like:</p>
<pre><code>for y in range(coordinatey // 10 * 4 * tile_amount_multiplier):
</code></pre>
<p>Why <code>4</code>? Why <code>10</code>? Why not <code>40</code>? If those numbers have well-defined purposes, ideally, they should have a name attached to them.</p>
<pre><code># At the top of your file
MY_MULT = 4          # These are poor names because I don't know their purpose
MY_OTHER_MULT = 10

. . .

max_coord = coordinatey // MY_OTHER_MULT * MY_MULT * tile_amount_multiplier
for y in range(max_coord):
</code></pre>
<p>When those variables are given proper names, it will be much easier for readers of your code to know what exactly is going on math-wise.</p>
    </div>