<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally you'd expect a protocol specification, not just code. The protocol should also have a security section with the security claims and how those are reached.</p>

<p>The protocol is a password based hybrid cryptosystem using a DL based derivation of a symmetric key.</p>

<p>Non standard PBKDF, no salt, large iteration count. Unfortunately I don't see any way of updating the iteration count or any versioning.</p>

<pre><code>def kdf(phrase)
  out = Digest::SHA256.digest(phrase);

  1000000.times{
    out = Digest::SHA256.digest((phrase + out));
  };

  return bigtoi(out);
end
</code></pre>

<p>Non-statically sized output. Not a huge problem, but non-standard.</p>

<pre><code>def itobig(x)
  out = [];

  while (x &gt; 0)
    out &lt;&lt; (x % 256);
    x /= 256;
  end

  return out.map{|x| x.chr; }.reverse.join;
end
</code></pre>

<p>This is probably a typo, what's a <code>drygest</code>?</p>

<pre><code>def drygest(data)
  return bigtoi(Digest::SHA256.digest(data));
end
</code></pre>

<p>Here the iv is not used because of the uniqueness of <code>gb</code> it seems, which makes the symmetric key unique. This is deterministic encryption, which means that files with the same contents and same password will be easily recognizable.</p>

<pre><code>cipher = OpenSSL::Cipher.new("aes-256-ctr");
cipher.decrypt;
cipher.iv = "0"*16;
cipher.key = sym;
</code></pre>

<p>Otherwise CTR doesn't contain any method of verifying if the file has changed. It allows any bit of the file to be flipped at the discretion of an attacker. This is especially an issue in source files where a 0 / false can be easily turned into a 1 / true. This seems to be caught by the comparison of the stored <code>gb</code> with a calculated version of it <code>gb2</code>, however those values seem to be derived from the hash over the data and the public key, neither of which are secret. The payload is only written after the verification is complete and a raise is called if the decryption fails. There is no specific error message returned though.</p>

<p>As everything is deterministic, the output value of <code>gb</code> is also deterministic. This makes it even easier to detect dupes.</p>

<p>As I don't see any specific inclusion of the file name into the encryption scheme it does mean that encrypted files can be replaced by other encrypted files, even if they would be signed.</p>

<hr>

<p>All in all an interesting effort, I wish I could call it secure. Using a standardized, hybrid cryptosystem and some kind of signature generation / verification would be more secure though.</p>
    </div>