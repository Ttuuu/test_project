<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with a bit of theory about what a class is, why you would use one, and what makes for a good one. The key idea about classes is that a class is a blueprint for a thing, and that blueprint says how that thing works. Within the class, you define all the nitty gritty details and write code carefully to keep those details nice and orderly, and from outside the class you are free to completely forget about it and assume it just works. </p>

<p>The first change I would suggest with your code is separate the class that represents the game from the code that deals with the players. After all, the game is one thing that you can draw a ring around in your head, and the players are outside that ring. </p>

<p>Now, the game should take care of details like remembering who has played where, where someone is still allowed to play, what the board will look like if someone plays in a given square, whether this board represents a game that has been won or drawn or such like, and so on. 
Meanwhile the players should take care of details like deciding where to play. 
For example in the <code>Game</code> class you might have </p>

<pre><code>def is_move_legal(self, move):
    return self.board[move] != "X" and self.board[move] != "O"
</code></pre>

<p>And then the players, instead of </p>

<pre><code>if self.board[question] != "X" and self.board[question] != "O":
</code></pre>

<p>Would have something like </p>

<pre><code>if current_game.is_move_legal(question):
</code></pre>

<p>You can imagine how it's easier to work out what the second version is doing while you're thinking about how to design the players, because you don't have to think about what the board is like. As a bonus, it's easy to tell at a glance because the function has been named in a descriptive way. </p>

<p>Following this approach to designing a class would be quite an extensive rewrite of your game, but it would make it much clearer</p>

<hr>

<p>As a general rule in programming, if you find yourself writing substantially the same code twice, it is worth thinking about whether you can do it once and make up the differences with a couple of variables. In particular in this case, the <code>p1</code> and <code>p2</code> functions are completely identical except for what letter they print and calling the other one. So you could have just one of them, and pass the "X" or the "O" it has to print and play with as a parameter. </p>

<hr>

<p>It's important to name your functions precisely, so you can tell what they do. For example <code>create_board</code> would probably be better named <code>print_board</code>.</p>

<p>Similarly it's important to name your variables so that it's clear what they represent. You call both variables that you get from user input <code>question</code>. I can see why, but a name like <code>chosen_move</code> would be clearer. (But on the topic of user input, well done for checking user input, including in <code>play_again</code>.)</p>

<p>Referring to <code>check_win</code>, it is generally a big of a warning sign if you find yourself using single letter variable names. Think about what <code>a</code> represents, and call it that. </p>

<hr>

<p>Now for a few pesky details, which are worth the time to polish.</p>

<p>The second player is "O" rather than "0" which you sometimes print.</p>

<p>In <code>check_win</code> are you sure you want to exit the game after a draw, but allow a rematch otherwise?</p>

<p>In <code>play</code> you have an infinite loop of switching between the two players. That's not an inherently bad thing. So long as you have some way of breaking out of it once the game has run its course, looping is a perfectly valid way to repeatedly let the same bits of code (the player choices) run.
However, in this case it never even gets half way first the first loop, because <code>p1</code> calls <code>p2</code> directly, and that calls <code>p1</code> and so on. This <em>recursive</em> approach is also a valid way to do that, but you should choose one and stick with it. </p>
    </div>