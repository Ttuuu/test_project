<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I still don't like this implementation because:</p>

<ul>
<li>it's waaaay to complex</li>
<li>it isn't easily extendable</li>
<li>doesn't provide the basic <code>switch</code> logic one expects from it, this is, it cannot fall through multiple cases</li>
<li>it requires to repeat the same logic multiple times with every <code>EvaluateFor</code></li>
</ul>

<hr>

<p>What you have build is a <code>SwitchBuilder</code> that you also should name like that. I prefer to create and use it where it belongs e.g. inside a loop and not before so I suggest a much simpler approach with a <code>readonly struct</code>.</p>

<hr>

<p>What you need is a single interface for the value and a continuation flag like:</p>

<pre><code>public interface ISwitch&lt;T&gt;
{
    T Value { get; }

    bool CanEvaluateNext { get; }
}
</code></pre>

<p>an <code>internal readonly struct</code> that implements it and doesn't cost a penny to create so it can be used it loops:</p>

<pre><code>internal readonly struct Switch&lt;T&gt; : ISwitch&lt;T&gt;
{
    public Switch(T value, bool canEvaluateNext)
    {
        Value = value;
        CanEvaluateNext = canEvaluateNext;
    }

    public T Value { get; }

    public bool CanEvaluateNext { get; }
}
</code></pre>

<p>a single core extension for the interface that you'll use to implement every other convenience extension like <code>Default</code>, <code>CaseWhen</code> or whatever you like using custom comparers etc. You don't need anything else and you can build every other API by calling this extension (which is your homework).</p>

<pre><code>public static class SwitchExtensions
{
    public static ISwitch&lt;T&gt; Case&lt;T&gt;(this ISwitch&lt;T&gt; @switch, Predicate&lt;T&gt; predicate, Action&lt;T&gt; action, bool canEvaluateNext)
    {
        if (!@switch.CanEvaluateNext)
        {
            return @switch;
        }

        if (predicate(@switch.Value))
        {
            action(@switch.Value);
            return new Switch&lt;T&gt;(@switch.Value, canEvaluateNext);
        }
        else
        {
            return @switch;
        }
    }
}
</code></pre>

<p>Since <code>Switch&lt;T&gt;</code> is internal you'll need a  helper-factory-class for a nice fluent syntax:</p>

<pre><code>public static class Switch
{
    public static ISwitch&lt;T&gt; For&lt;T&gt;(T value)
    {
        return new Switch&lt;T&gt;(value, false);
    }
}
</code></pre>

<p>Examples:</p>

<pre><code>Switch
    .For(5)
    .Case(x =&gt; x == 4, x =&gt; Console.WriteLine(x), false) // nope
    .Case(x =&gt; x == 5, x =&gt; Console.WriteLine(x), false) // 5
    .Case(x =&gt; x == 6, x =&gt; Console.WriteLine(x), false); // nope
</code></pre>

<p>or</p>

<pre><code>Switch
    .For(5)
    .Case(x =&gt; x == 4, x =&gt; Console.WriteLine(x), true) // nope
    .Case(x =&gt; x == 5, x =&gt; Console.WriteLine(x), true) // 5
    .Case(x =&gt; x &lt; 6, x =&gt; Console.WriteLine(x), true); // 5
</code></pre>
    </div>