<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You can just use <code>x[n_trues:]</code> rather than <code>x[n_trues:len(x)]</code>.</li>
<li>Your comments don't really say more than the code. And so I'd recommend removing the comments.</li>
<li>If you want to keep your code documented use docstrings, which can be exported to your documentation via tools like Sphinx.</li>
<li>As commented by <a href="https://codereview.stackexchange.com/users/308/konrad-rudolph">Konrad Rudolph</a>, you can remove the <code>and not any(should_be_false)</code> as this will always fail if the <code>all</code> fails.</li>
</ul>



<pre><code>def check_true_then_false(x):
    """Check first n values are True and the rest are False."""
    return all(x[:sum(x)])
</code></pre>

<hr>

<p>If you want your code to work with iterators, not just sequences then you can instead use:</p>

<pre><code>def check_true_then_false(it):
    """Check first n values are True and the rest are False."""
    it = iter(it)
    # Takes advantage of the iterating side effect, where it consumes the iterator.
    # This allows `all` to simultaneously checks `it` starts with trues and advances `it`.
    return all(it) or not any(it)
</code></pre>

<p>For the following two inputs <code>all</code> will result in:</p>

<pre><code>&gt;&gt;&gt; all([True] * n)
True
&gt;&gt;&gt; all([True] * n + [False, ...])
False
</code></pre>

<p>However it will mean that <code>it</code> is still <code>[...]</code> as <code>all</code> and <code>any</code> are lazy. Meaning that we just need to check the rest are false. Meaning <code>all</code> slices the iterator for you without you having to. Leaving <code>any</code> with:</p>

<pre><code>&gt;&gt;&gt; any([False] * n)
False
&gt;&gt;&gt; any([False] * n + [True, ...])
True
</code></pre>
    </div>