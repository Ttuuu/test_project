<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since we're doing this in assembly language, it makes sense to do it much more efficiently than is typically done in high level languages.  Otherwise, why bother with assembly language? So with that said, there are ways that this can be made much, much more efficient.</p>

<h2>Avoid division</h2>

<p>The <code>div</code> instruction in x86 is one of the slower instructions possible.  Since we already know that we're looking for numbers divisible by 3, 5 or both, what would make far more sense is to simple keep countdown counters for both.  Your initialization currently says:</p>

<pre><code>    xor cx, cx
</code></pre>

<p>It could be easily expanded to say:</p>

<pre><code>    xor cx, cx
    mov bx, 0503h  ; set bh = 5 counter, bl = 3 counter
</code></pre>

<p>Then instead of dividing, simply decrement:</p>

<pre><code>    inc cx
    cmp cx, 100
    jg done
;  instead of this...
;    dec bh
;    dec bl
;    cmp bx, 0
; per suggestion from @Chris Jester-Young use this:
    sub bx, 0101h
    je print_fizzbuzz
    cmp bl, 0
    je print_fizz
    cmp bh, 0
    je print_buzz
print_other:
</code></pre>

<p>Naturally the various <code>print_...</code> routines would have to reset <code>bh</code>, <code>bl</code> or both as well as printing.</p>

<h2>Improve formatting</h2>

<p>Generally speaking, assembly language code is not indented in the way you have your code indented.  It's much more linear, with the only indentation for assembly language statements or directives.</p>

<h2>Consider better I/O</h2>

<p>Your output routines are not shown, but it's likely that it would be more efficient to keep the numeric output in string form, incrementing each ASCII digit and emitting the string, rather than repeatedly converting from binary register contents to a string value.</p>
    </div>