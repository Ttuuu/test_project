<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Static classes</h2>

<p>You've (correctly) marked <code>Normalization</code> as <code>static</code>. You should do the same for every other class in your program - they are all currently being used as statics.</p>

<h2>Expression bodies</h2>

<p>C# has a wonderful bit of syntactic sugar - <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-operator#expression-body-definition" rel="nofollow noreferrer">expression bodies</a> - that lets you rewrite this:</p>

<pre><code>public static double MaxwellVariance(double mass, double temperature)
{
    return Math.Sqrt(KB * temperature / mass);
}
</code></pre>

<p>as</p>

<pre><code>public static double MaxwellVariance(double mass, double temperature) =&gt;
    Math.Sqrt(KB * temperature / mass);
</code></pre>

<h2>Classes</h2>

<p>You're in C#, so you're stuck without the ability to have global functions. It's somewhat similar to Java in this way: it really pushes you to think about your code in an OOP style.</p>

<p>Going down this path, you would make a class to encapsulate your graph, which would take most of the code out of your <code>Main</code>. Potentially, everything up to and including the initialization of your point list could go in the constructor, and the <code>PlotForm</code> calls could go in a <code>plot</code> method. There are some advantages to this approach, including reusability, re-entrance, and testability.</p>

<p>As for <code>MaxwellBolzman</code> - I think you should refactor it to be a non-static class, with members for mass and temperature. <code>random</code> can be accepted as an optional parameter or the class could instantiate it itself. That will simplify many things:</p>

<ul>
<li><code>Variance</code> will turn into a one-line property with an expression body</li>
<li><code>Component</code> and <code>Speed</code> will turn into parameter-less properties</li>
</ul>

<h2>Names</h2>

<p>This is minor, but I find the <code>Maxwell</code> prefixes in all of the methods of <code>MaxwellBolzman</code> to be redundant; I think they would be even more legible if you simply named them <code>Variance</code>, <code>Component</code> and <code>Speed</code>.</p>

<h2>Loops</h2>

<p>I would find <code>Speed</code> more legible as</p>

<pre><code>double sum = 0;
for (int i = 0; i &lt; 3; i++) {
    double comp = Component;
    sum += comp*comp;
}
return Math.Sqrt(sum);
</code></pre>
    </div>