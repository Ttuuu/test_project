<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>ARRAY_SIZE()</code></h2>

<p>Never use <code>sizeof</code> directly to get the size of an array. NEVER. It's very unsafe, as you can see in the bug that Toby found.</p>

<p>Alternatives:</p>

<ul>
<li>Pass the actual value</li>
<li>Pass the result of <code>ARRAY_SIZE(arr)</code> (defined typically as <code>#define ARRAY_SIZE(arr)  (sizeof(arr) / sizeof((arr)[0]))</code>)</li>
</ul>

<p>If you can use the second one, which is when you have a global static-duration array or an array local to the function, it's the best method, because if the size of the array is changed (for example if I had <code>int a[FOO];</code> and then I decide to use a different size such as <code>int a[BAR];</code>), I don't need to change the rest of the code.  And with recent compilers, such as GCC 8, you will receive a warning if you apply that to something that is not an array, so it is safe.  With old compilers, there are still tricks to make this macro safe (you can find them in StackOverflow easily).</p>

<pre><code>while (fgets(temp, ARRAY_SIZE(temp), f) != NULL) {
</code></pre>

<p>It was also misleading that you used sizeof a different array.</p>

<p>If you had written this code (and the definition of ARRAY_SIZE was a safe one for your compiler version), it would have not compiled, and you would have noticed that you don't have an array, so you would have had to write the actual value.</p>
    </div>