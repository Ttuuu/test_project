<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You already have the answer to your "bug" given in the comments, but I will try to give you a more in-depth review. Nevertheless, I will repeat the aforementioned solution: to avoid the program auto-running on import, but your main call inside of a <code>if __name__ == "__main__"</code> (read more <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">here</a> if interested).</p>

<p>For your <code>__init__</code> method, having your method initializers as (default) arguments tend to give more flexibility down the road as the project grows:</p>

<pre><code>    def __init__(self, castle=1, villagers=1, warriors=0, food=0, stone=0):
        self.castle = castle
        self.villagers = villagers
        self.warriors = warriors
        self.food = food
        self.stone = stone
</code></pre>

<p>For your first real method, I would recommend staying with the Python standard of <code>snake_case</code> over <code>camelCase</code>. Furthermore, initialising the variable <code>action</code> to 0 doesn't really do you anything since you overwrite it in the following line. And since you rely on that input I think you should figure out what to do when you <em>don't</em> get an <code>int</code>, or if you get something like 11 (because 11 here would likely be a typo, given the options).</p>

<p>This, quite naturally, leads on to the purpose of testing (yay!). A nice thing about tests is that they allow you to think about what exactly you want to happen when you create an object or call on a function. For your <code>takeTurns</code> function, that would maybe be that you're only allowed to enter digits, and if you don't enter a single digit in the range 0â€“5 it throws an exception or it asks for another input. You would then basically implement your function (after the tests) to meet all the requirements you set forth in the beginning. You may then also find that maybe you were thinking about it the wrong way; in this case it could be that maybe <code>take_turns</code> (I renamed it for you...) shouldn't be asking for <code>input()</code> but rather be accepting an argument <code>take_turns(user_choice)</code>.</p>

<p>To finalise, I'll add some smaller pieces of advice.</p>

<ul>
<li><p>Instead of <code>self.__class__.__name__ == "Player":</code> you could (and should) use <code>isinstance(self, Player)</code>.</p></li>
<li><p>Instead of <code>action = random.randint(1, 4)</code> coupled with 4 <code>if</code>-statements, there's a handy little function in <code>random</code> called <code>choice</code> (have a look <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">here</a>). You could also make your <code>AI</code> class much smaller by rethinking how the AI differs (or doesn't differ) from a <code>Player</code>.</p></li>
<li><p><a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">f-strings are super nice</a>. Instead of <code>print("You:\nCastle: " + str(player.castle) + " Food: " + str(player.food) + " Stone: " + str(player.stone) + " Villagers: " + str(player.villagers) + " Warriors: " + str(player.warriors) + "\n")</code>, you could have (and notice that I removed <code>str()</code> since you don't need it):</p>

<pre><code>print(f"""You:
Castle: {player.castle}
Food: {player.food}
Stone: {player.stone}
Villagers: {player.villagers}
Warriors: {player.warriors}""")
</code></pre></li>
</ul>
    </div>