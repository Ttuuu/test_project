<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If the size of your input array can be <strong>large</strong>, you can get a speed-up by preallocating the capacity of your <code>HashMap</code>:</p>

<pre><code>Map&lt;Integer, Integer&gt; numbersMap = new HashMap&lt;Integer, Integer&gt;(numbers.length * 2);
</code></pre>

<p>As the algorithm runs, data will be added to the <code>HashMap</code>.  When number of entries exceeds the <code>capacity * load_factor</code>, the hashmap's capacity is doubled, and the elements are re-binned for the larger capacity.  This capacity doubling and rebinning takes time.  It doesn't happen often, <span class="math-container">\$O(\log N)\$</span> times, but it can be eliminated by starting with a hashmap of sufficient capacity.</p>

<p>The <code>load_factor</code> defaults to 0.75, so an initial capacity larger than <code>numbers.length * 4/3</code> is required.  <code>numbers.length * 2</code> is a simple expression that satisfies that requirement.</p>
    </div>