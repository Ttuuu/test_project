<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You use <code>list</code>s of numbers to represent the bag of socks. A <code>set</code> would be a more logical container to represent an unordered pile of socks. Since set's can not contain identical items, you'll need another way to discern different socks of the same design. The logical way would be to use tuples <code>(sock_design, id)</code>. This would also make it easy to simulate more than 1 pair per design in the pile</p>

<pre><code>def generate_socks(num_designs, amount=2):
    return {(design, i)  for i in range(amount) for design in range(num_designs)}
socks = generate_socks(10)
</code></pre>

<blockquote>
<pre><code>{(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1), (4, 0), (4, 1),
 (5, 0), (5, 1), (6, 0), (6, 1), (7, 0), (7, 1), (8, 0), (8, 1), (9, 0), (9, 1)}
</code></pre>
</blockquote>

<p>The algorithm to pick a random sock from the pile changes slightly too:</p>

<pre><code>def pick_sock(socks):
    return random.choice(tuple(socks))
</code></pre>

<p>or:</p>

<pre><code>def pick_sock(socks):
    return random.sample(socks, 1)[0]
</code></pre>

<h1>while</h1>

<p><code>while len(socks) != 0:</code> can be simplified to <code>while socks:</code></p>

<h1>Pick the first sock</h1>

<p>becomes simply:</p>

<pre><code>def sort_socks(socks):
    socks = socks.copy()

    while socks:
        first = pick_sock(socks)
        socks.remove(first)
        attempts = 0
</code></pre>

<p>The <code>socks.copy()</code> is to prevent changes to the original input. Since the elements are immutable tuples, there is no need for <code>deepcopy</code></p>

<h1>picking a second sock</h1>

<h2>while loop</h2>

<p>Instead of a first selection, with afterwards a while-loop with the comparison, I would use a <code>while True:</code> loop with a <code>break</code> on a match</p>

<h2>yield</h2>

<p>Instead of appending to a list, and afterwards returning the list, making a generator and <code>yield</code>ing the attempts is a cleaner option</p>

<pre><code>        while True:
            second = pick_sock(socks)
            attempts += 1
            if second[0] == first[0]:
                socks.remove(second)
                # print(f'found {first} and {second} after {attempts} tries: {len(socks)} socks left')
                yield attempts
                break
</code></pre>

<h1>aggregating</h1>

<p>Instead of keeping the attempts in a list, I would either use a <code>defaultdict(list)</code> or a <code>Counter</code> for this purpose. This simplifies the aggregation</p>

<pre><code>num_socks = 10
num_iterations = 1000

all_attempts = Counter()
random.seed(42)
for _ in range(num_iterations):
    for i, attempts in enumerate(sort_socks(generate_socks(num_socks, 2))):
        all_attempts[i] += attempts
average_attempts = {
    i: attempts / num_iterations
    for i, attempts in all_attempts.items()
}
</code></pre>

<p>or</p>

<pre><code>all_attempts = defaultdict(list)  

random.seed(42)
for _ in range(num_iterations):
    for i, attempts in enumerate(sort_socks(generate_socks(num_socks, 2))):
        all_attempts[i].append(attempts)
average_attempts = {
    i: sum(attempts) / num_iterations
    for i, attempts in all_attempts.items()
}
</code></pre>

<blockquote>
<pre><code>{0: 18.701,
 1: 16.968,
 2: 15.203,
 3: 13.133,
 4: 11.2,
 5: 9.23,
 6: 6.945,
 7: 4.937,
 8: 2.999,
 9: 1.0}
</code></pre>
</blockquote>

<p>This is a lot more readable than the two <code>list(map(..))</code> operations</p>

<h1>performance</h1>

<pre><code>num_sock    10  30
Original    193 1490
counter     157 1440
defaultdict 174 1470
</code></pre>

<p>I tested this with both 10 and 30 pairs of socks, and performance is about the same</p>
    </div>