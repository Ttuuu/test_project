<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The variable names <code>c</code>, <code>d</code>, and <code>e</code> are too cryptic.  (<code>f</code> is fine, because it's a customary variable for a file.  In my solution below, I use <code>c</code> consistently for characters during iteration, which is also acceptable.)</p>

<p>Why do you normalize the case using <code>line.lower()</code>, when the sample output suggests that uppercase output is preferred?</p>

<p>In my opinion, the regular expression is overkill here.</p>

<p>The challenge is ambiguous as to what exactly constitutes "15% in a given passage of text".  Does the denominator include the spaces and punctuation?  That's debatable.  Should the denominator include the trailing newline?  Probably not, but you should be aware that you did.</p>

<p>Personally, I'd prefer to collect all of the super freqs using a list comprehension, instead of checking for the <code>if (c == 0): â€¦</code> case.  In any case, there shouldn't be parentheses there in standard Python style.</p>

<pre><code>from collections import Counter

with open('prob2.in') as f:
    for line in f:
        counts = Counter(c for c in line.upper() if 'A' &lt;= c &lt;= 'Z')
        super_freqs = [c for c, n in counts.items() if n / len(line) &gt; 0.15]
        if not super_freqs:
            print('There are no super freqs.')
        else:
            for c in super_freqs:
                print('{0} is a super freq.'.format(c))
</code></pre>
    </div>