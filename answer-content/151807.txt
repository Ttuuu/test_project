<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="http://blog.cubitplanning.com/2011/03/census-summary-level-sumlev/" rel="noreferrer"><code>SUMLEV</code> is explained here</a></p>

<p>Definitely want to use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.nlargest.html" rel="noreferrer"><code>nlargest</code></a><br>
The advantage of <code>nlargest</code> is that it performs a partial sort therefore in linear time.</p>

<p>However, you don't want to <code>groupby</code> twice.  So we'll define a helper function in which we only <code>groupby</code> once.</p>

<p>I'm using a lot of <code>.values</code> to access underlying <code>numpy</code> objects.  This will improve some efficiency a bit.</p>

<p>Lastly, I don't like accessing names from the outer scope without a purpose so I'm passing the dataframe as a parameter.</p>

<pre><code>def answer_six(df):
    # subset df to things I care about
    sumlev = df.SUMLEV.values == 50
    data = df[['CENSUS2010POP', 'STNAME', 'CTYNAME']].values[sumlev]

    # build a pandas series with State and County in the index
    # vaues are from CENSUS2010POP
    s = pd.Series(data[:, 0], [data[:, 1], data[:, 2]], dtype=np.int64)

    # define a function that does the nlargest and sum in one
    # otherwise you'd have to do a second groupby
    def sum_largest(x, n=3):
        return x.nlargest(n).sum()

    return s.groupby(level=0).apply(sum_largest).nlargest(3).index.tolist()
</code></pre>

<p><strong><em>Demonstration</em></strong>  </p>

<pre><code>answer_six(census_df)

['California', 'Texas', 'Illinois']
</code></pre>
    </div>