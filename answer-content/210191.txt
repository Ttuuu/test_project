<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I think your initial idea can be simplified a bit. No need for two separate types:</p>

<pre><code>struct Policy: Equatable {
    static let first = Policy(filename: "firstFile.txt", text: "text in first file")
    static let second = Policy(filename: "secondFile.txt", text: "text in second file")
    static let third = Policy(filename: "thirdFile.txt", text: "text in third file")

    let filename: String
    let text: String

    private init(filename: String, text: String) {
        self.filename = filename
        self.text = text
    }
}
</code></pre>

<p>Note that making the init function private means that the only Policy objects that can exist are the three static lets (first, second and third). Also note that you don't need to implement the <code>func ==</code>, the compiler will do that automatically.</p>

<p>So what does it mean to make this an enum?</p>

<pre><code>enum Policy: Equatable {
    case first
    case second
    case third

    var filename: String {
        switch self {
        case .first:
            return "firstFile.txt"
        case .second:
            return "secondFile.txt"
        case .third:
            return "thirdFile.txt"
        }
    }

    var text: String {
        switch self {
        case .first:
            return "text in first file"
        case .second:
            return "text in second file"
        case .third:
            return "text in third file"
        }
    }
}
</code></pre>

<p>Important note: Both the struct and the enum are used in the <em>exact same way</em> at the call site. You can freely switch between these two constructs without changing any other code anywhere else in the program.</p>

<p>So which is better? Since there is <em>no difference</em> in the way they are or can be used, then the only argument for or against either must be solely in the above. The struct solution is shorter and it's easier to add/remove/edit objects in it. And, if you want to be able to create objects that don't equal one of the basic values, you can do that with the struct by making the init internal/public, but you can't do it with the enum at all. By any standard I can think of, the struct is a superior solution.</p>

<p>Your reviewer asked, "Why don't you do an <code>enum</code> on that?" My response to her/him would be, "why should I? There's zero benefit to doing so."</p>

<p>Also, I agree with Kien Tran's answer. Making this type expressible by string literal is asking for problems.</p>
    </div>