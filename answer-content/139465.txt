<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both methods don't use any state of the <code>Solution</code> class, so they should
be <code>static</code> methods of that type, or global functions.</p>

<p><code>binaryOnes()</code> can be simplified. If you replace</p>

<pre><code>repeat { ... } while num &gt; 1
</code></pre>

<p>by</p>

<pre><code>while num &gt; 0 { ... }
</code></pre>

<p>then the additional check for <code>num == 1</code> becomes obsolete:</p>

<pre><code>func binaryOnes(num: Int) -&gt; Int {
    var num = num
    var count = 0
    while num &gt; 0 {
        if num % 2 == 0 { // even numbers
            num /= 2
        } else { // all odd numbers
            num = (num-1)/2
            count += 1
        }
    }
    return count
}
</code></pre>

<p>Now observe that <code>num % 2</code> gives the least significant bit of 
the number (<code>0</code> or <code>1</code>), and <code>num /= 2</code> is a <em>truncating</em> division.
Therefore the function can be simplified to</p>

<pre><code>func binaryOnes(num: Int) -&gt; Int {
    var num = num
    var count = 0
    while num &gt; 0 {
        count += num % 2
        num /= 2
    }
    return count
}
</code></pre>

<p>More sophisticated bit counting methods can be found at
<a href="https://graphics.stanford.edu/~seander/bithacks.html" rel="noreferrer">https://graphics.stanford.edu/~seander/bithacks.html</a>, they can
be more effective for large numbers.</p>

<p>In <code>countBits</code>, the check for <code>num == 0</code> is not necessary,
because <code>1...num</code> is the empty range in that case:</p>

<pre><code>func countBits(num: Int) -&gt; [Int] {
    var nums = [Int](count: num+1, repeatedValue: 0)
    for i in 1...num {
        nums[i] = binaryOnes(i)
    }
    return nums
}
</code></pre>

<p>Calling the variables <code>num</code> and <code>nums</code> could be confusing,
<code>upTo:</code> might be a better name for the parameter.</p>

<p>But what the function actually does is to <em>map</em> the numbers
<code>0...upTo</code> to their bit count. That can be done directly with
a <code>map()</code> method:</p>

<pre><code>func countBits(upTo: Int) -&gt; [Int] {
    return (0...upTo).map(binaryOnes)
}
</code></pre>

<p>An alternative approach would be to use the fact that</p>

<pre><code>bitCount(n) = bitCount(n/2) + (n % 2)
</code></pre>

<p>for all (positive) integers <code>n</code>. Together with <code>bitCount(0) = 0</code>
this is a recursive computation method. But since you store the
bit counts in an array anyway, this can be implemented as
a simple iteration:</p>

<pre><code>func countBits1(upTo: Int) -&gt; [Int] {
    var result = [ 0 ]
    for i in 1...upTo {
        result.append(result[i/2] + (i % 2))
    }
    return result
}
</code></pre>

<p>Now the <code>binaryOnes()</code> function is not needed anymore.</p>
    </div>