<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is an alternative to your implementation. If you can change the position of the <code>name</code> element to the array key:</p>

<pre><code>$defaults = array(
    'foo' =&gt; array(
        "level" =&gt; 5,
        "meta" =&gt; array(
            "value" =&gt; 1
        )
    ),
    'bar' =&gt; array(
        "level" =&gt; 6
    )
);

$custom = array(
    'qux' =&gt; array(
        "date" =&gt; "2016-01-01"
    ),
    'tux' =&gt; array(
        "date" =&gt; "2016-01-31"
    ),
    'foo' =&gt; array(
        "date" =&gt; "2015-01-01",
        "meta" =&gt; array(
            "value" =&gt; 5,
            "something" =&gt; "hello world"
        )
    )
);
</code></pre>

<p>You can utilize the native PHP function: <a href="http://php.net/manual/en/function.array-replace-recursive.php" rel="nofollow noreferrer">array_replace_recursive</a></p>

<p>Using this function will provide you with the same resulting structure as you have shown with the exception of having the names as array keys. If this is an issue to you, you can duplicate the name once more into an array element. </p>

<p>The reason this specific/unique key is required is to only merge elements related to each other.</p>

<p>This little snippet should translate your array into the required structure:</p>

<pre><code>/**
 * Translates an array element into an unique key for the element.
 *
 * (The name is just an example)
 */
function uniqify(array $array, string $key): array
{
    foreach($array as $index =&gt; $value)
    {
        $array[$value[$key]] = $value;
        unset($array[$index]);
    }
    return $array;
}
</code></pre>

<p>You could then so something like this:</p>

<pre><code>$merged = array_replace_recursive(
    uniqify($defaults, 'name'),
    uniqify($custom,   'name')
);
</code></pre>

<p>Hope this can help, happy coding!</p>
    </div>