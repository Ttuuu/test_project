<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Harold's comment is correct.</p>

<p>Consider what happens for float inputs like <code>5000000000 * 1.0</code>.  Conversion to <code>int32_t</code> with <a href="https://www.felixcloutier.com/x86/cvtps2dq" rel="nofollow noreferrer"><code>cvtps2dq</code></a> will give you <code>-2147483648</code> from that out-of-range positive <code>float</code>.  (2's complement integer bit-pattern <code>0x80000000</code> is the "indefinite integer value" described by Intel's documentation for this case.)</p>

<p>In that case, your vectorized version that clamps via integer saturation will start with a negative (and ultimately do unsigned saturation to 0), not matching your <code>fmin</code> which clamps before even converting to integer, resulting in 255.</p>

<p><strong>So you have to be able to rule out such inputs if you want to vectorize without clamping in the FP domain before conversion to integer.</strong></p>

<p>Remember that IEEE754 binary32 <code>float</code> can represent values outside the range of <code>int32_t</code> or <code>int64_t</code>, and what x86 FP-&gt;int conversions do in that case.</p>
    </div>