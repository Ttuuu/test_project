<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should be aware that </p>

<p><code>return (new ArraySegment&lt;T&gt;(data, 0, count), data.Length &gt; count);</code></p>

<p>throws an exception if <code>count &gt; data.Count()</code></p>

<p>The normal <code>Take()</code> doesn't behave that way - it takes <code>min(count, data.Count())</code></p>

<hr>

<p>One way to go could be:</p>

<pre><code>public static IEnumerable&lt;T&gt; TakeWithRemainder&lt;T&gt;(this IEnumerable&lt;T&gt; sequence, int count, out bool hasMoreData)
{
  bool moreData = false;

  IEnumerable&lt;T&gt; Iter()
  {
    int i = 0;
    foreach (T value in sequence)
    {
      if (i &lt; count)
      {
        yield return value;
      }
      else
      {
        moreData = true;
        yield break;
      }
      i++;
    }
  }

  var result = Iter().ToList();
  hasMoreData = moreData;
  return result;
}
</code></pre>

<hr>

<p>Another way could be:</p>

<pre><code>public static IEnumerable&lt;T&gt; TakeWithRemainder&lt;T&gt;(this IEnumerable&lt;T&gt; sequence, int count, out bool hasMoreData)
{
  hasMoreData = sequence.Skip(count).Any();
  return sequence.Take(count);
}
</code></pre>

<hr>

<p>Or if you want to take a sub sequence not at the start:</p>

<pre><code>public static IEnumerable&lt;T&gt; TakeWithRemainder&lt;T&gt;(this IEnumerable&lt;T&gt; sequence, int skip, int count, out bool hasMoreData)
{
  sequence = sequence.Skip(skip);
  hasMoreData = sequence.Skip(count).Any();
  return sequence.Take(count);
}
</code></pre>

<hr>

<p>Or if you want to take page number n of m:</p>

<pre><code>public static IEnumerable&lt;T&gt; TakeWithRemainder&lt;T&gt;(this IEnumerable&lt;T&gt; sequence, int page, int count, out bool hasMoreData)
{
  sequence = sequence.Skip(page * count);
  hasMoreData = sequence.Skip(count).Any();
  return sequence.Take(count);
}
</code></pre>
    </div>