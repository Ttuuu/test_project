<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You were interested in a review in both the pattern as code style.</p>

<p><sub>Note: I'm addressing subscribers also as listeners and observers in this review.</sub></p>

<hr>

<h2>Code Style</h2>

<ul>
<li>Prefer <code>var</code> when the type of the instance is known: <code>NewsChannel newsChannel1 = new NewsChannel();</code> -&gt;  <code>var newsChannel1 = new NewsChannel();</code></li>
<li>Use expression-bodied members for compact code blocks. For instance <code>public string Print() =&gt; _text;</code></li>
<li>Use string-interpolation for readability: <code>$"Image width:{_width} height {_height}"</code></li>
<li>Use a blank line between methods.</li>
<li>Don't abuse <code>/// &lt;summary&gt;</code> for remarks. <code>this also can be a private class inside the NewsChannel class</code> could be inserted in a <code>/// &lt;remarks&gt;</code> block instead.</li>
</ul>

<hr>

<h2>Observer Pattern</h2>

<ul>
<li>You specifically want to implement the <code>observer pattern</code> yourself, so I can understand you are not using the built-in observer pattern <code>event</code>. However, in production code, you'd always want to take advantage of native language support.</li>
<li><p>You provide a custom <code>unsubscriber</code> to each listener that subscribes. This seems a bit heavy for my taste. Why not just provide an <code>Unsubscribe</code> method? You now have to cope with additional complexity: </p>

<ul>
<li>(1) you return a new unsubscriber every time, even if already subscribed </li>
<li>(2) you don't allow a listener to subscribe more than once, which may be as intended, but also limits possibilities </li>
<li>(3) a subscription attempt does not get a response whether subscription was registered </li>
<li>(4) you have free floating unsubscribers that could keep memory alive, even when you dispose the channel</li>
</ul></li>
<li><code>SendMessage</code> loops over the observers when notifying them. Note that an observer can unsubscribe on notification, causing the enumeration to loop over a modified collection. This throws a runtime error. Take a snapshot of the current observers before notifying them.</li>
<li><code>EndMessages</code> clears the observers after notifying them, but should also remove any unsubscriber it created (if you still decide to use this pattern).</li>
<li>I expect <code>NewsChannel</code> to be <code>IDisposable</code>, notify all observers and clear all resources. <code>KindleApp</code> should also implement <code>IDisposable</code> and unsubscribe from all subscribed channels.</li>
<li>In your example, <code>KindleApp</code> subscribes to multiple channels, but only stores a single unsubscriber. Method <code>Unsubscribe</code> only unsubscribes from the last channel. Surely, this cannot be as intended. Either keep track of all unsubscribers, or of the channels directly (in my suggested refactoring you should call <code>Unsubscribe</code> directly on the channels).</li>
</ul>
    </div>