<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If your need is max 100 items in the list, I think your implementation is OK.</p>

<hr>

<blockquote>
<pre><code>public static List&lt;Item&gt; MoveIndex(this List&lt;Item&gt; myItems, int from, int to)
{
    Item temp = myItems[from];
    myItems.RemoveAt(from);
    myItems.Insert(to, temp);
    for (int i = 0; i &lt; myItems.Count; i++)
    {
        myItems[i].Key = i.ToString("D2");
    }
    return myItems;
}
</code></pre>
</blockquote>

<p>Some minor considerations:</p>

<p>If <code>from &lt; to</code> then by removing <code>from</code>, you left shift from <code>from</code> and upwards and 
maybe invalidate the <code>to</code> index?</p>

<p>To me it's counter intuitive that the list is returned from this method, because you manipulate the input list itself. If returning a list here, I would expect the input list to be untouched and the returned list to be a new instance holding the change. </p>

<p>You can make a minor optimization in that it is only necessary to renumber the entries from <code>Math.Min(from, to)</code> to <code>Math.Max(from, to)</code> (both inclusive) because everything before and after these indices are untouched.</p>

<hr>

<p>As Peter Taylor writes, it's common good practice to code for interfaces rather than implementations, but be aware that not all <code>IList&lt;s&gt;</code> implementations support <code>RemoveAt(int index)</code> and <code>Insert(int index, T value)</code>. For instance arrays don't. So in this special case it's maybe a good idea to stick with the <code>List&lt;Item&gt;</code></p>
    </div>