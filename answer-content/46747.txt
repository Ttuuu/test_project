<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since there is only one solution using sequences and one in Haskell, I thought that I still might post my code:</p>

<pre><code>let partition list =
    let rec aux =
        function
        | trg,acc,[] -&gt; acc::trg
        | trg,a::acc,x::xs when x&lt;a 
            -&gt; aux ((a::acc)::trg,[x],xs)
        | trg,acc,x::xs -&gt; aux (trg,x::acc,xs)
    aux ([],[],list)|&gt; List.map (List.rev) |&gt; List.rev
</code></pre>

<p>Of course, running through the list twice as in the last line is bad (performance wise), however this could be easily solved by a custom <code>revMap</code> function that reverses and maps at the same time.</p>
    </div>