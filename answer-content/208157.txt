<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public static class Impl
    {
        public static IEnumerable&lt;TResult&gt; ZipNew&lt;TFirst, TSecond, TResult&gt;(
</code></pre>
</blockquote>

<p>Names? The class would be more descriptive as something like <code>LinqExtensions</code>; the method something like <code>ZipLooped</code>.</p>

<hr>

<blockquote>
<pre><code>            using (IEnumerator&lt;TFirst&gt; iterator1 = first.GetEnumerator()) 
            using (IEnumerator&lt;TSecond&gt; iterator2 = second.GetEnumerator())
            {
                var i1 = true;
                var i2 = true;
                var i1Shorter = false;
                var i2Shorter = false;
                var firstRun = true;
</code></pre>
</blockquote>

<p>The iterators have useful names, but what does <code>i1</code> mean? And why five variables to track the state of two iterators? IMO it would be simpler as</p>

<pre><code>                var firstEnded = false;
                var secondEnded = false;

                while (true) 
                {
                    if (!iterator1.MoveNext())
                    {
                        if (secondEnded) yield break;
                        firstEnded = true;
                        iterator1.Reset();
                        if (!iterator1.MoveNext()) yield break;
                    }
                    if (!iterator2.MoveNext())
                    {
                        if (firstEnded) yield break;
                        secondEnded = true;
                        iterator2.Reset();
                        if (!iterator2.MoveNext()) yield break;
                    }

                    yield return resultSelector(iterator1.Current, iterator2.Current); 
                }
</code></pre>

<p>and the almost repeated code <em>might</em> be worth pulling out as an inner method:</p>

<pre><code>                var firstEnded = false;
                var secondEnded = false;

                bool advance&lt;T&gt;(IEnumerator&lt;T&gt; it, ref bool thisEnded, bool otherEnded)
                {
                    if (it.MoveNext()) return true;
                    // `it` has done a full cycle; if the other one has too, we've finished
                    if (otherEnded) return false;
                    thisEnded = true;
                    // Start again, although if `it` is empty we need to abort
                    it.Reset();
                    return it.MoveNext();
                }

                while (true)
                {
                    if (!advance(iterator1, ref firstEnded, secondEnded)) yield break;
                    if (!advance(iterator2, ref secondEnded, firstEnded)) yield break;
                    yield return resultSelector(iterator1.Current, iterator2.Current); 
                }
</code></pre>

<hr>

<p>I notice that you've decided to <code>yield break</code> if either of the enumerables is empty. Would an exception be a better choice?</p>
    </div>