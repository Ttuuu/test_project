<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General feedback</h2>
<p>Overall it seems somewhat simple and works fine except for the issue I saw you mentioned in a comment on <a href="https://stackoverflow.com/a/52119743/3578082">the accepted answer to the related Stack Overflow post</a>, about having to click the menu button twice after resizing it that is caused by a conflict with page builder as explained in question update above.</p>
<p>One thing to consider is getting rid of the variable <code>isMenuVisible</code> - just check the value of <code>menu.style.display</code> when updating the visibility of the menu.</p>
<h2>Suggestions</h2>
<h3><code>const</code> vs <code>let</code></h3>
<p>I would use <code>const</code> for any value that should not get re-assigned - e.g. <code>menu</code>, <code>burger</code>. That way if you inadvertently re-assign a value to those, an error will be thrown.</p>
<h3>Identifying the element used to open the menu</h3>
<p>If there really is only one element for opening the menu, why not use an <em>id</em> attribute to find that instead of a class name.</p>
<h3>Querying DOM for elements</h3>
<p>Using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById" rel="nofollow noreferrer"><code>document.getElementById()</code></a> to access those DOM elements will be quicker<sup><a href="https://jsperf.com/getelementbyid-vs-queryselector" rel="nofollow noreferrer">1</a></sup> than using <code>document.querySelector()</code>.</p>
<h3>Variable <code>clicks</code></h3>
<p>The variable <code>clicks</code> doesn't appear to be used - just set to <code>0</code> initially and then updated during the resize event callback. Is that leftover from other code? Or does it control something else in your code?</p>
<h3>simpler and shorter patterns</h3>
<p>As far as shortcuts using <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features, the only things I could think of would be to remove the block on <code>mobileBehavior</code> (to make it a single line) and using a single argument with only one character (e.g. named something like <code>_</code>) for the arrow functions instead of an empty set of parentheses (though that only saves character for each function).</p>
<h3>Method <code>mobileBehavior()</code> and the resize event callback</h3>
<p>Since <code>mobileBehavior()</code> is only called once, that functionality could just be moved to the place it is called... Then it doesn't really make sense to have that function. Perhaps it would be suitable to define a function like <code>setDisplayBasedOnWidth</code>, which contains most of the functionality of the resize callback (except setting the display to <code>none</code> when the width is less than the threshold). Then that function can be called initially, as well as after a resize event.</p>
<p>See the updated code below for slight improvements adapted.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>document.addEventListener('DOMContentLoaded', _ =&gt; {
  const menu = document.getElementById('menu-primary');
  const burger = document.getElementById('burger');

  burger.addEventListener('click', _ =&gt; {
    const currentDisplay = menu.style.display;
    menu.style.display = currentDisplay == 'none' ? 'block' : 'none';
  });
  const setDisplayBasedOnWidth = _ =&gt; menu.style.display = window.innerWidth &lt;= 959 ? 'none' : 'block';

  window.addEventListener('resize', setDisplayBasedOnWidth);
  setDisplayBasedOnWidth();
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>:root {
  --w: #00ff00;
}

#burger {
  display: block;
  text-align: center;
  color: var(--w);
  margin-bottom: 0 !important;
  font-weight: bold
}

#menu-primary {
  display: none
}

@media screen and (min-width: 796px) {
  .burger {
    display: none
  }
  #menu-primary {
    display: block
  }
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="burger"&gt;BARS&lt;/div&gt;

&lt;ul id="menu-primary"&gt;
  &lt;li&gt;Homepage&lt;/li&gt;
  &lt;li&gt;Contact_us&lt;/li&gt;
&lt;/ul&gt;</code></pre>
</div>
</div>

    </div>