<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Unpacking</h2>
<p>Try this rather than hard-coded indexing:</p>
<pre><code>    user, password, host, port, database = db_credentials
    connection = psycopg2.connect(user, ...)
</code></pre>
<p>Or, if you're able to rearrange those parameters such that they match those of the <a href="https://www.psycopg.org/docs/module.html#psycopg2.connect" rel="nofollow noreferrer"><code>connect</code> signature</a>:</p>
<blockquote>
<ul>
<li>dbname – the database name (database is a deprecated alias)</li>
<li>user – user name used to authenticate</li>
<li>password – password used to authenticate</li>
<li>host – database host address (defaults to UNIX socket if not provided)</li>
<li>port – connection port number (defaults to 5432 if not provided)</li>
</ul>
</blockquote>
<p>then you can simply do</p>
<pre><code>connection = psycopg2.connect(*db_credentials)
</code></pre>
<h2>Logs</h2>
<p>Consider replacing</p>
<pre><code>    print("Trying")
    print("connected")
</code></pre>
<p>with calls to the actual <code>logging</code> module, which is more configurable and maintainable.</p>
<h2>Quote escapes</h2>
<pre><code>'The name that was given to cardbot didn\'t exist in the card table.'
</code></pre>
<p>can be</p>
<pre><code>"The name that was given to cardbot didn't exist in the card table."
</code></pre>
<h2>In-application queries</h2>
<p>Your <code>join_table_query</code> is long. There are several approaches to improve this - either save a view in the database (my favourite), or a stored procedure (common but I think it's overkill in this case).</p>
<h2>Injection</h2>
<blockquote>
<p>the bot is protected from any direct sql injections before I deploy it</p>
</blockquote>
<p>This is directly vulnerable:</p>
<pre><code>'''... WHERE card.name = ('%s') ''' % (recordName)
</code></pre>
<p>Never (ever) use string formatting to insert parameters to a query. All DB connection libraries have anticipated this concern and most approach it using "prepared statements".</p>
<p><a href="https://www.psycopg.org/articles/2012/10/01/prepared-statements-psycopg/" rel="nofollow noreferrer">This article</a> is old but relevant. The <a href="https://www.psycopg.org/docs/cursor.html#cursor.execute" rel="nofollow noreferrer">actual reference</a> shows that you should be passing <code>vars</code> as a sequence or a mapping, which will prevent injection.</p>
    </div>