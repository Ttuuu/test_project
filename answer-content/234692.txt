<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Consistency</h1>

<p>Sometimes the word <code>color</code> or <code>colour</code> is used to describe the look of a <code>Square</code>. Because I'm not a native English speaker I looked it up on <a href="https://en.wikipedia.org/wiki/Color" rel="nofollow noreferrer">wikipedia</a>:</p>

<blockquote>
  <p>color (American English), or colour (Commonwealth English)</p>
</blockquote>

<h1>The Algorithm</h1>

<p>Currently <code>Digit</code> calculates the form of a concrete digit based on the <code>prop</code> with the name <code>digit</code>. The calculation is inside a nested for-loop with a time complexity of <span class="math-container">\$O(n)\$</span>. But actually the calculation is redundant since the form of a digit is known on run-time so we can reduce the time complexity (see final result, where we do not need to loop).</p>

<p>The form of a digit is already defined inside the array <code>filled</code>:</p>

<blockquote>
  <pre><code>const filled = [
     [
       [1, 1, 1],
       [1, 0, 1],
       [1, 0, 1],
       [1, 0, 1],
       [1, 1, 1]
     ],
     /* .... */
]
</code></pre>
</blockquote>

<p>But instead of define the form based on boolean values it is possible to insert the concrete React-Components to avoid the nested for-loops:</p>

<pre><code>const filled = [
  [
    [&lt;Square /&gt;, &lt;Square /&gt;, &lt;Square /&gt;, &lt;br /&gt;],
    [&lt;Square /&gt;, &lt;Square colour="#FFFFFF"/&gt;, &lt;Square /&gt;, &lt;br /&gt;],
    [&lt;Square /&gt;, &lt;Square colour="#FFFFFF"/&gt;, &lt;Square /&gt;, &lt;br /&gt;],
    [&lt;Square /&gt;, &lt;Square colour="#FFFFFF"/&gt;, &lt;Square /&gt;, &lt;br /&gt;],
    [&lt;Square /&gt;, &lt;Square /&gt;, &lt;Square /&gt;]
  ]    
];
</code></pre>

<blockquote>
  <p>Expand to see the working example below</p>
</blockquote>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function getRandomColor() {
  const colours = ["#FF6663", "#94FF63", "#63FFEA", "#A763FF", "#F2FF63"];
  return colours[Math.floor(Math.random() * colours.length)];
}

class Square extends React.Component {
  render() {
    var squareStyle = {
      width: 25,
      height: 25,
      backgroundColor: this.props.colour || getRandomColor(),
      display: "inline-block"
    };

    return (
      &lt;div style={squareStyle}&gt;
      &lt;/div&gt;
    );
  }
}

class Digit extends React.Component {
  render() {
    const divStyle = {
      display: "inline-block",
      lineHeight: 0,
      paddingLeft: "10px",
      paddingRight: "10px"
    };

    const filled = [
      [
        [&lt;Square /&gt;, &lt;Square /&gt;, &lt;Square /&gt;, &lt;br /&gt;],
        [&lt;Square /&gt;, &lt;Square colour="#FFFFFF"/&gt;, &lt;Square /&gt;, &lt;br /&gt;],
        [&lt;Square /&gt;, &lt;Square colour="#FFFFFF"/&gt;, &lt;Square /&gt;, &lt;br /&gt;],
        [&lt;Square /&gt;, &lt;Square colour="#FFFFFF"/&gt;, &lt;Square /&gt;, &lt;br /&gt;],
        [&lt;Square /&gt;, &lt;Square /&gt;, &lt;Square /&gt;]
      ]    
    ];

    return (
      &lt;div style={divStyle}&gt;
        {filled[this.props.digit]}
      &lt;/div&gt;
    );
  }
}

ReactDOM.render(
  &lt;div&gt;
    &lt;Digit digit={0} /&gt;
  &lt;/div&gt;,
  document.getElementById("root")
)</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id="root"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<h1>Composition</h1>

<p>Inside <a href="https://reactjs.org/docs/composition-vs-inheritance.html" rel="nofollow noreferrer">Reacts Documentation on composition</a> is described how it can be used effectively.</p>

<h2>Square</h2>

<p>Currently the <code>Square</code>-Component can have random colors or a concrete color based on the <code>prop</code>. (In my opinion this is against the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single-Responsibility Principle</a> ).     </p>

<p>By extract the color behavior into separate components we can make the code more declarative:</p>

<pre><code>const filled = [
      [
        [&lt;RandomColoredSquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;br /&gt;],
        [&lt;RandomColoredSquare /&gt;, &lt;EmptySquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;br /&gt;],
        [&lt;RandomColoredSquare /&gt;, &lt;EmptySquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;br /&gt;],
        [&lt;RandomColoredSquare /&gt;, &lt;EmptySquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;br /&gt;],
        [&lt;RandomColoredSquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;RandomColoredSquare /&gt;]
      ],
      /* ... */    
];
</code></pre>

<p><code>RandomColoredSquare</code> and <code>EmptySquare</code> are <a href="https://reactjs.org/docs/composition-vs-inheritance.html#specialization" rel="nofollow noreferrer">specializations</a> of <code>Spuare</code>:</p>

<pre><code>const Square = ({color}) =&gt; 
  &lt;div style={{
      width: 25,
      height: 25,
      backgroundColor: color,
      display: "inline-block"
    }}&gt;
  &lt;/div&gt;

const RandomColoredSquare = ({colors = ["#FF6663", "#94FF63", "#63FFEA", "#A763FF", "#F2FF63"]}) =&gt; 
  &lt;Square color={colors[Math.floor(Math.random() * colors.length)]} /&gt;

const EmptySquare = _ =&gt; 
  &lt;Square color="#FFF" /&gt;
</code></pre>

<p>I used the the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring assignment</a> to make the code more readable. Instead of <code>const Square = ({color})</code> I could have written <code>const Square = (props)</code> but then if have to query the <code>color</code> with <code>props.color</code> and now I can use directly the <code>color</code>.</p>

<p>Additionally I make use of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default parameters</a> together with the destructuring assignment for <code>({colors = ["#FF6663", "#94FF63", "#63FFEA", "#A763FF", "#F2FF63"]})</code>. </p>

<blockquote>
  <p>Expand to see the working example below</p>
</blockquote>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Square = ({color}) =&gt; 
  &lt;div style={{
      width: 25,
      height: 25,
      backgroundColor: color,
      display: "inline-block"
    }}&gt;
  &lt;/div&gt;

const RandomColoredSquare = ({colors = ["#FF6663", "#94FF63", "#63FFEA", "#A763FF", "#F2FF63"]}) =&gt; 
  &lt;Square color={colors[Math.floor(Math.random() * colors.length)]} /&gt;

const EmptySquare = _ =&gt; 
  &lt;Square color="#FFF" /&gt;

class Digit extends React.Component {
  render() {
    const divStyle = {
      display: "inline-block",
      lineHeight: 0,
      paddingLeft: "10px",
      paddingRight: "10px"
    };

    const filled = [
      [
        [&lt;RandomColoredSquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;br /&gt;],
        [&lt;RandomColoredSquare /&gt;, &lt;EmptySquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;br /&gt;],
        [&lt;RandomColoredSquare /&gt;, &lt;EmptySquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;br /&gt;],
        [&lt;RandomColoredSquare /&gt;, &lt;EmptySquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;br /&gt;],
        [&lt;RandomColoredSquare /&gt;, &lt;RandomColoredSquare /&gt;, &lt;RandomColoredSquare /&gt;]
      ]    
    ];

    return (
      &lt;div style={divStyle}&gt;
        {filled[this.props.digit]}
      &lt;/div&gt;
    );
  }
}

ReactDOM.render(
  &lt;div&gt;
    &lt;Digit digit={0} /&gt;
  &lt;/div&gt;,
  document.getElementById("root")
)</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id="root"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<h2>Digit</h2>

<p>I think <code>&lt;Digit digit={0} /&gt;</code> is a less intuitiv API then if we could simply write <code>&lt;Zero /&gt;</code> which would make our code more declarative at the first glance.
Additionally <code>Digit</code> violates the <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" rel="nofollow noreferrer">Open-Close Principle</a>.</p>

<p>We can first describe the more generic component <code>Digit</code> and composite it the "special" components <code>Zero</code>, <code>One</code> and so on:</p>

<pre><code>const Zero = _ =&gt; 
  &lt;Digit&gt;
    &lt;RandomColoredSquare /&gt;
    &lt;RandomColoredSquare /&gt;
    &lt;RandomColoredSquare /&gt;

    &lt;br /&gt;

    /* ... */
  &lt;/Digit&gt;

const Digit = ({children}) =&gt; 
  &lt;div style={{
      display: "inline-block",
      lineHeight: 0,
      paddingLeft: "10px",
      paddingRight: "10px"
    }}&gt;
    {children}
  &lt;/div&gt;
</code></pre>

<p>For <code>Digit</code> I used the <a href="https://reactjs.org/docs/jsx-in-depth.html#children-in-jsx" rel="nofollow noreferrer">Children in JSX</a> where it is possible to pass Components inside a component instead vie props. </p>

<blockquote>
  <p>Expand to see the working example below</p>
</blockquote>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Square = ({color}) =&gt; 
  &lt;div style={{
      width: 25,
      height: 25,
      backgroundColor: color,
      display: "inline-block"
    }}&gt;
  &lt;/div&gt;

const RandomColoredSquare = ({colors = ["#FF6663", "#94FF63", "#63FFEA", "#A763FF", "#F2FF63"]}) =&gt; 
  &lt;Square color={colors[Math.floor(Math.random() * colors.length)]} /&gt;

const EmptySquare = _ =&gt; 
  &lt;Square color="#FFF" /&gt;

const Zero = _ =&gt; 
  &lt;Digit&gt;
    &lt;RandomColoredSquare /&gt;
    &lt;RandomColoredSquare /&gt;
    &lt;RandomColoredSquare /&gt;
  
    &lt;br /&gt;
  
    &lt;RandomColoredSquare /&gt;
    &lt;EmptySquare /&gt;
    &lt;RandomColoredSquare /&gt;
  
    &lt;br /&gt;
  
    &lt;RandomColoredSquare /&gt;
    &lt;EmptySquare /&gt;
    &lt;RandomColoredSquare /&gt;
  
    &lt;br /&gt;
  
    &lt;RandomColoredSquare /&gt;
    &lt;EmptySquare /&gt;
    &lt;RandomColoredSquare /&gt;
  
    &lt;br /&gt;
  
    &lt;RandomColoredSquare /&gt;
    &lt;RandomColoredSquare /&gt;
    &lt;RandomColoredSquare /&gt;
  &lt;/Digit&gt;

const Digit = ({children}) =&gt; 
  &lt;div style={{
      display: "inline-block",
      lineHeight: 0,
      paddingLeft: "10px",
      paddingRight: "10px"
    }}&gt;
    {children}
  &lt;/div&gt;

ReactDOM.render(
  &lt;div&gt;
    &lt;Zero /&gt;
  &lt;/div&gt;,
  document.getElementById("root")
)</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id="root"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<p>But now we have this explicite <code>&lt;br /&gt;</code>. We could introduce a new Component <code>Row</code> to make it implicit:</p>

<pre><code>const Row = ({children}) =&gt;
  &lt;div&gt;
    {children}
    &lt;br /&gt;
  &lt;/div&gt;

const Zero = _ =&gt; 
  &lt;Digit&gt;
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;

    &lt;Row&gt;
      /* ... */
    &lt;/Row&gt;

    /* ... */

  &lt;/Digit&gt;
</code></pre>

<blockquote>
  <p>Expand to see the working example below</p>
</blockquote>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Square = ({color}) =&gt; 
  &lt;div style={{
      width: 25,
      height: 25,
      backgroundColor: color,
      display: "inline-block"
    }}&gt;
  &lt;/div&gt;

const RandomColoredSquare = ({colors = ["#FF6663", "#94FF63", "#63FFEA", "#A763FF", "#F2FF63"]}) =&gt; 
  &lt;Square color={colors[Math.floor(Math.random() * colors.length)]} /&gt;

const EmptySquare = _ =&gt; 
  &lt;Square color="#FFF" /&gt;

const Row = ({children}) =&gt;
  &lt;div&gt;
    {children}
    &lt;br /&gt;
  &lt;/div&gt;

const Zero = _ =&gt; 
  &lt;Digit&gt;
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;EmptySquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;EmptySquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;EmptySquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  &lt;/Digit&gt;

const Digit = ({children}) =&gt; 
  &lt;div style={{
      display: "inline-block",
      lineHeight: 0,
      paddingLeft: "10px",
      paddingRight: "10px"
    }}&gt;
    {children}
  &lt;/div&gt;

ReactDOM.render(
  &lt;div&gt;
    &lt;Zero /&gt;
  &lt;/div&gt;,
  document.getElementById("root")
)</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id="root"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<h1>Final Result</h1>

<p>The result is longer since we write the digits explicit instead of create them dynamic but with this way we have a much better time complexity and the code is easier to understand since we remove the computational logic and make the code more declarative. </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Square = ({color}) =&gt; 
  &lt;div style={{
      width: 25,
      height: 25,
      backgroundColor: color,
      display: "inline-block"
    }}&gt;
  &lt;/div&gt;

const RandomColoredSquare = ({colors = ["#FF6663", "#94FF63", "#63FFEA", "#A763FF", "#F2FF63"]}) =&gt; 
  &lt;Square color={colors[Math.floor(Math.random() * colors.length)]} /&gt;

const EmptySquare = _ =&gt; 
  &lt;Square color="#FFF" /&gt;

const Row = ({children}) =&gt;
  &lt;div&gt;
    {children}
    &lt;br /&gt;
  &lt;/div&gt;

const Zero = _ =&gt; 
  &lt;Digit&gt;
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;EmptySquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;EmptySquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;EmptySquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
      &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  &lt;/Digit&gt;

const Three = _ =&gt;
  &lt;Digit&gt;
    &lt;Row&gt;
        &lt;RandomColoredSquare /&gt;
        &lt;RandomColoredSquare /&gt;
        &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
        &lt;EmptySquare /&gt;
        &lt;EmptySquare /&gt;
        &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
        &lt;EmptySquare /&gt;
        &lt;RandomColoredSquare /&gt;
        &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
        &lt;EmptySquare /&gt;
        &lt;EmptySquare /&gt;
        &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  
    &lt;Row&gt;
        &lt;RandomColoredSquare /&gt;
        &lt;RandomColoredSquare /&gt;
        &lt;RandomColoredSquare /&gt;
    &lt;/Row&gt;
  &lt;/Digit&gt;

const Digit = ({children}) =&gt; 
  &lt;div style={{
      display: "inline-block",
      lineHeight: 0,
      paddingLeft: "10px",
      paddingRight: "10px"
    }}&gt;
    {children}
  &lt;/div&gt;

ReactDOM.render(
  &lt;div&gt;
    &lt;Zero /&gt;
    &lt;Three /&gt;
    &lt;Zero /&gt;
  &lt;/div&gt;,
  document.getElementById("root")
)</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id="root"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>