<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>- Use the <code>strict</code> and <code>warnings</code> pragmas</h2>

<p>This helps catch many errors at an early stage.</p>

<h2>- Declare lexical variables with <code>my</code> instead of using package variables</h2>

<p>If you define variables without having declared them they will be defined as package variables (which are seen by all code in your package). Note that if you use the <code>strict</code> pragma you need to declare package variables with <code>our</code>.</p>

<h2>- use <code>say</code> instead of <code>print</code></h2>

<p>Since <code>perl</code> version 5.10 you can use <code>say</code> to print a line and add the line terminator (newline character) automatically. Just remember to enable the the feature with <code>use feature qw(say)</code>.</p>

<h2>- Unpack arguments to a function/method from the <code>@_</code> array for clarity</h2>

<p>Prefer <code>my ($str, $delim) = @_</code> over <code>my $str = $_[0]; my $delim = $_[1]</code></p>

<h2>- Use <code>$array[$N]</code> to refer to the (<code>$N+1</code>)th element of <code>@array</code>.</h2>

<p>In you code you used <code>@_[1]</code> to refer to the second element of the <code>@_</code> array. The correct syntax is to use <code>$_[1]</code>.</p>

<h2>- Do not use parenthesis around argument for builtin functions if not necessary.</h2>

<p>In Perl parenthesis around function arguments is optional. A common style is to avoid parenthesis around builtin function calls. This reduces visual clutter and disambiguates built-in functions from user functions, see also <a href="https://stackoverflow.com/q/15772996/2173773">What is the reason to use parenthesis-less subroutine calls in Perl?</a></p>

<h2>- Don't declare empty arrays with empty parenthesis. Simply use <code>my @arr</code>;</h2>

<h2>- Return a reference to an array and not an array value.</h2>

<p>By returning a reference you avoid copying, but see also <a href="https://stackoverflow.com/q/47718928/2173773">In perl, when assigning a subroutine's return value to a variable, is the data duplicated in memory?</a></p>

<h2>- Don't reinvent the wheel, use the Perl builtin function <code>split</code></h2>

<p>You tagged your question with [reinventing-the-wheel] so I assume this is for learning purposes only. </p>

<p>Here is a revised version of your code that implements the above comments:</p>

<pre><code>use feature qw(say);
use strict;
use warnings;

{ # &lt;-- create a scope so lexical variable does not "leak" into the subs below

    my $test = split_string("This is a test to ensure this works correctly.");
    foreach my $element (@$test) {
        say $element;
    }
}

sub split_string {
    my ( $string, $delimiter ) = @_;

    $delimiter //= " ";
    my @result;
    my $temp = "";

    for my $i (0..(length $string)) {
        my $char = substr $string, $i, 1;
        if (($char eq $delimiter) or $i == (length $string)) {
            push @result, $temp;
            $temp = "";
        } else {
            $temp .= $char;
        }
    }
    return \@result;
}
</code></pre>
    </div>