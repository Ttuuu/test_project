<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<p>The class is named <code>UDPCommunication</code>, but it does <code>createUserInterface</code>, among other things. This shows that some of the code should probably be part of another class, or that at least the class name does not fit well.</p>

<hr>

<p><code>abc</code>, <code>varz</code>, <code>test</code>, <code>upd1</code>, <code>prop</code>, <code>plc</code> etc. are not good variable names, because they do not tell me what they contain and what they are for.</p>

<p><code>scaler</code>, <code>sliderVal</code>, <code>receivedMsg</code> are not as problematic, but still not very good choices. It is better to be more explicit and to avoid shortening words, because it harms readability. Better names would be <code>uiScale</code>, <code>sliderValue</code>, and <code>receivedMessage</code>.</p>

<hr>

<p>In C# the convention for method names is <code>UpperCamelCase</code>, a.k.a. <code>PascalCase</code>, rather than <code>lowerCamelCase</code>. So e.g. <code>createUserInterface</code> should be <code>CreateUserInterface</code>.</p>

<h2>Comments</h2>

<p>You have quite a lot of lines of code that are commented out. That can make it hard to judge later on why they were commented out, and whether they will still be needed in the future. If they are obsolete, better remove them altogether. If you decide later on that you need some of it again, it will still be under source control.</p>

<h2>Empty methods</h2>

<p>You can remove the empty <code>Awake()</code> and <code>Start()</code> methods, since they don't do anything, and Unity does not require them.</p>

<h2>Access modifiers</h2>

<p>Some of your methods are lacking an access modifier. While the default modifier for methods is <code>private</code>, by convention it is usually not left out, because it is more explicit and more readable. Also, some of your methods are explicitly private, and it is most important to be consistent.</p>

<h2>Nested generic collections</h2>

<p>When you have a generic type like this</p>

<pre><code>public static List&lt;Dictionary&lt;string, string&gt;&gt; abc = new List&lt;Dictionary&lt;string, string&gt;&gt;();
</code></pre>

<p>it can be worth considering writing a custom class for that type, because it may indicate that it is more than just a generic collection of generic collections.</p>
    </div>