<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The thing I would focus on to start with is reducing code duplication. If you look at your <code>triplechecko/x</code> functions, it's basically the same code over and over but with different variables.</p>

<p>I would start by replacing all the <code>p1...9</code> with a container. Since it's fixed size, let's use <code>std::array</code>. Then lets see what we can do to reduce some of the code duplication.</p>

<pre><code>#include &lt;array&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;

std::array&lt;std::array&lt;char, 3&gt;, 3&gt; board;

bool make_move(char player, char&amp; square) {
    if (square == ' ') {
        square = player;
        return true;
    }
    return false;
}
</code></pre>

<p>It's good to give variables and function descriptive names. It might feel a bit tedious when you start out, but you increase the readability a lot. The goal is that you should be able to come back to this code in a few months and have no problem understanding what is what. Names like <code>ai</code> might feel intuitive now, but probably not later on.</p>

<p><code>ai</code> function became a generic <code>make_move</code>. It does almost the same, but we take a reference to the square we want and the player value <code>'X'</code> or <code>'O'</code>. It also returns <code>true</code> or <code>false</code> depending on success. This help us remove global variables like <code>endg</code> and similar.</p>

<pre><code>void print_board() {
    std::cout &lt;&lt; "    1  2  3 \n\n";
    char row_char = 'A';
    for (auto&amp; row : board) {
        std::cout &lt;&lt; row_char &lt;&lt; ". ";
        ++row_char;
        for (auto&amp; square : row) {
            std::cout &lt;&lt; square &lt;&lt; " ";
        }
        std::cout &lt;&lt; "\n\n";
    }

    std::cout &lt;&lt; std::endl;
}
</code></pre>

<p>Print the board. Using loops to loop through our 2D-array.</p>

<pre><code>bool triple_check(char player, char v1, char v2, char v3) {
    if (v1 == player &amp;&amp; v2 == player &amp;&amp; v3 == player) {
        std::cout &lt;&lt; player &lt;&lt; " won!" &lt;&lt; std::endl;
        return true;
    }
    return false;
}

bool check_if_won(char player) {
    for (int i = 0; i &lt; 3; ++i) {
        // check rows
        if (triple_check(player, board[i][0], board[i][1], board[i][2])) return true;
        // check columns
        if (triple_check(player, board[0][i], board[1][i], board[2][i])) return true;
    }

    // check diagonals
    if (triple_check(player, board[0][0], board[1][1], board[2][2])) return true;
    if (triple_check(player, board[0][2], board[1][1], board[2][0])) return true;

    return false;
}
</code></pre>

<p>Here I decided to split the function in two steps to make it more clear and easy to read. This replaces both <code>triplecheck</code> functions from before, and prints out if someone won. Again we are returning <code>true</code> or <code>false</code> to indicate if someone won.</p>

<pre><code>bool check_tie() {
    for (auto&amp; row : board) {
        for (auto&amp; square : row) {
            if (square == ' ') return false;
        }
    }

    std::cout &lt;&lt; "TIE!!!" &lt;&lt; std::endl;
    return true;
}
</code></pre>

<p>Checking for a tie by looping through the board, return <code>true/false</code>.</p>

<pre><code>bool is_valid_input(char val) {
    if (val &gt;= 0 &amp;&amp; val &lt;= 2) return true;
    return false;
}

void number_pick() {
    char row, column;
    while (true) {
        std::cin &gt;&gt; row &gt;&gt; column;

        row -= 'A';
        column -= '1';

        if (is_valid_input(row) &amp;&amp; is_valid_input(column) &amp;&amp; make_move('X', board[row][column])) return;

        std::cout &lt;&lt; "Invalid input. Try again: ";
    }
}
</code></pre>

<p>Here we have the function that takes the input from the player. To make the code more clear it's again split in two where we validate the input. I also use <code>row -= 'A'</code> to make the value usable to index into the board array. Additionally we also check the return value of <code>make_move</code> to make sure the move is valid.</p>

<pre><code>void reset_board() {
    for (auto&amp; row : board) {
        for (auto&amp; square : row) {
            square = ' ';
        }
    }
}

int main() {
    srand(time(0));
    reset_board();

    while (true) {
        print_board();

        std::cout &lt;&lt; "Enter the position: ";
        number_pick();

        if (check_if_won('X') || check_tie()) break;

        while (!make_move('O', board[rand() % 3][rand() % 3]));

        check_if_won('O');
    }
}
</code></pre>

<p><code>reset_board</code> initializes the board to starting state. If we want to add the option of playing several matches in a row this will come in handy again for resetting the board.</p>

<p><code>while (!make_move('O', board[rand() % 3][rand() % 3]));</code> uses a while loop without a body, shown by the <code>;</code> after the condition. It just runs the <code>make_move</code> function over and over with random input until it return true. When it returns <code>true</code> the <code>!</code> in front makes the loop break.</p>

<p>Now we only have 1 global variable left, the board! If we encasulated this in a class it could be a member variable, but for a small thing like this we'll leave it there.</p>
    </div>