<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions.</p>

<p>Those will not help to make the code faster but cleaner.</p>

<h1>Extract some of the logic to methods.</h1>

<p>By doing that you will make the code shorter and easier to read. Also, you will be able to remove the comments if the methods name is descriptive enough.</p>

<p>Examples :</p>

<pre class="lang-java prettyprint-override"><code>    private static boolean isOnSameLine(double py, int px, double m, double b) {
        return py == ((m * px) + b);
    }

    private static boolean isUndefinedSlope(int hitx, int mex) {
        return hitx - mex == 0;
    }
</code></pre>

<h1>Invert the logic to remove <a href="https://blog.codinghorror.com/flattening-arrow-code/" rel="nofollow noreferrer">arrow code</a></h1>

<p>In your code, you can invert the <code>if</code> condition to remove one layer of bracket.</p>

<pre class="lang-java prettyprint-override"><code>//[...]
if (hit.equals(p) || me.equals(p)) {
   continue;
}
//[...]
</code></pre>

<h1>Extract the expression to variables when used multiple times.</h1>

<p>In your code, you have multiple instances where you could extract the evaluations into variables.</p>

<pre class="lang-java prettyprint-override"><code>int py = p.y;
int hitx = hit.x;
int mex = me.x;
</code></pre>

<h2>Refactored code</h2>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
   int numHits = 0;
   Point me = new Point(); //Point a from the example above
   ArrayList&lt;Point&gt; hits = new ArrayList&lt;&gt;();  //a list of Point b's from the example above
   ArrayList&lt;Point&gt; reachable = new ArrayList&lt;&gt;();  //a list of point c's from the example above

   for (Point hit : hits) {
      for (Point p : reachable) {
         if (hit.equals(p) || me.equals(p)) {
            continue;
         }


         //find the equation of a line from me to hit
         int py = p.y;
         int hitx = hit.x;
         int mex = me.x;

         if (isUndefinedSlope(hitx, mex)) {
            if (isOccupiedPointBetweenMeAndHit(me, hit, p, py, hitx, mex)) {
               numHits--;
               break;
            }
         } else {
            //create a line from me to the hit... if there is any occupied point on that line in between me and the hit, that point blocks the hit
            double deltaY = hit.y - me.y;
            double deltaX = hitx - mex;

            double m = deltaY / deltaX; //slope
            double b = me.y - (m * mex);  //y intercept

            if (isOnSameLine(py, p.x, m, b)) {
               if (isPointBetweenMeAndHit(hitx, mex, hit.y, me.y, py, p.x)) {  //if the point is in between me and the hit
                  numHits--;
                  break;
               }
            }
         }
      }
   }
}

private static boolean isOccupiedPointBetweenMeAndHit(Point me, Point hit, Point p, int py, int hitx, int mex) {
   return (((py &lt;= hitx) &amp;&amp; (py &gt;= me.y)) || ((py &gt;= hit.y) &amp;&amp; (py &lt;= me.y))) &amp;&amp; p.x - mex == 0;
}

private static boolean isPointBetweenMeAndHit(int hitx, int mex, int hity, int mey, int py, int px) {
   return (px &lt;= hitx &amp;&amp; px &gt;= mex &amp;&amp; py &lt;= hity &amp;&amp; py &gt;= mey) ||
          (px &lt;= hitx &amp;&amp; px &gt;= mex &amp;&amp; py &gt;= hity &amp;&amp; py &lt;= mey) ||
          (px &gt;= hitx &amp;&amp; px &lt;= mex &amp;&amp; py &gt;= hity &amp;&amp; py &lt;= mey) ||
          (px &gt;= hitx &amp;&amp; px &lt;= mex &amp;&amp; py &lt;= hity &amp;&amp; py &gt;= mey);
}

private static boolean isOnSameLine(double py, int px, double m, double b) {
   return py == ((m * px) + b);
}

private static boolean isUndefinedSlope(int hitx, int mex) {
   return hitx - mex == 0;
}
</code></pre>
    </div>