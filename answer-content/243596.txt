<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have design and implementation suggestions as well.</p>

<h3>Cache type</h3>

<p>There are several different caching strategies, like: <em>read-through, write-through, refresh-ahead, cache-aside, write-behind</em>, ...</p>

<p>Let's examine the following three: <strong>read-through</strong>, <strong>refresh-ahead</strong>, <strong>cache-aside</strong></p>

<ul>
<li><strong>Read-Through</strong> works in the following way:

<ul>
<li>If the content is present in the cache then it will be served from the cache </li>
<li>otherwise it will be fetched from the storage (the source of truth)

<ul>
<li>after the retrieval is succeeded then it will store a local copy in the cache</li>
<li>and finally the request is served from the cache</li>
</ul></li>
</ul></li>
<li><strong>Refresh-Ahead</strong> works in the following way: 

<ul>
<li>The content is always served from the cache</li>
<li>If the content expires then it will fetch the data automatically without any external request.</li>
</ul></li>
<li><strong>Cache-Aside</strong> works in the following way:

<ul>
<li>If the content is present in the cache then it will be served from the cache</li>
<li>When it is not present then a separate flow / process fetches the data from the source and stores the data into the cache</li>
</ul></li>
</ul>

<p>So, let's compare them:  </p>

<ul>
<li>Read-Through vs Refresh-Ahead: reactive (serves on-demand) vs proactive (fetches in the background)  </li>
<li>Refresh-Ahead vs Cache-Aside: fetch is done by the cache itself vs retrieval process is done by an external provider  </li>
<li>Read-Through vs Cache-Aside: fetch by itself on-demand vs fetch by external provider on demand or in the background</li>
</ul>

<p>Based on the requirements you should be able to decide which one is the right one for you. For further details, please <a href="https://docs.oracle.com/cd/E16459_01/coh.350/e14510/readthrough.htm" rel="nofollow noreferrer">this article</a>.</p>

<hr>

<h3>Responsiveness</h3>

<p>Serving stale data during the freshest retrieval has three separate stages: </p>

<ol>
<li>Determining the freshness of the data and then branching based on the result</li>
<li>Retrieving data, while serving other requests</li>
<li>Updating the data in the cache</li>
</ol>

<p>I would not spend words on the first and the last one because they are the easy ones. The second phase is where concurrency / parallelism comes into the play. You need to initiate a background retrieval process to be able to serve other requests <em>simultaneously</em>. You also need to synchronize the state between these threads. In order to do so you will utilize one of the sync primitives that are provided by .NET. You have chosen the <code>SemaphoreSlim</code>, which might not be the best for this problem.</p>

<p>There are different sync primitive categories:</p>

<ul>
<li>Locking constructions (<code>Monitor</code>, <code>SpinLock</code>, <code>Semaphore</code>, etc.)</li>
<li>Blocking constructions (<code>CountdownEvent</code>, <code>ManaulResetEvent</code>, <code>SpinWait</code>, <code>Task.Wait</code>, etc.)</li>
<li>Non-blocking constructions (<code>Interlocked</code>, <code>MemoryBarrier</code>, etc.)</li>
</ul>

<p>I would highly recommend the following webpages for further details: <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives" rel="nofollow noreferrer">1</a>, <a href="http://dotnetpattern.com/threading-synchronization" rel="nofollow noreferrer">2</a>, <a href="http://kflu.github.io/2017/04/04/2017-04-04-csharp-synchronization/" rel="nofollow noreferrer">3</a>   </p>

<p><code>SemaphoreSlim</code> is a generalization of the <code>Monitor</code>, which means rather than guaranteeing exclusive access to a single thread rather than it can allow n threads to access the same resource. In my opinion this is not what you need. Your semaphore instance (most probably) allow only a single access, and the state of the lock is used for branching. The same could be achieved with <code>SpinLock</code> and its <code>IsHeld</code> property, but I would not recommended that because it designed for really short locking in order to prevent context-switches.</p>

<p>The best fit (in my opinion) is to use one of the signaling approaches. Because what you try to achieve is that: "until a given condition is not met (the freshest data is not available) I would like to use my fallback (give back the stale data)"</p>

<p><code>WaitHandle</code> and <code>EventWaitHandle</code> base classes do not expose their state like <code>IsHeld</code>, but calling the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.waithandle.waitone?view=netcore-3.1#System_Threading_WaitHandle_WaitOne_System_TimeSpan_" rel="nofollow noreferrer">WaitOne with zero timeout</a> will tell you instantly whether or not the other thread has <em>signaled</em> (by calling the <code>Set</code> method). </p>

<hr>

<h3>MemoryCache</h3>

<p>I would like to also highlight that there are more than one MemoryCache. There is one under the <code>System.Runtime.Caching</code> namespace and there is another under the <code>Microsoft.Extensions.Caching.Memory</code>. Latter suits better for ASP.NET Core. Fortunately both of them are thread-safe by default.</p>

<hr>

<p>Last but not least, I have two other suggestions:</p>

<ol>
<li>Try to split your logic into smaller functions</li>
<li>First try to solve the problem with sync API then when you are familiar with all the components / primitives then try to achieve the async API</li>
</ol>
    </div>