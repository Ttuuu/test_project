<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, let's talk about magic numbers. <code>smallest_distance = 100_000_000</code> is a problem. Where's the hundred million come from? When you have numbers in your code, there should ideally be a specific reason for why you're using that number instead of any other, and numbers that are picked just to be ludicrously large have a weird habit of turning out to be smaller than something when your code evolves. If all your enemies happen to be further than a hundred million units away, this function will return <code>None</code> and possibly cause something to blow up. There are two conventional starting values for a min loop: either the maximum possible number supported by that data type, or the first element of the array. Using the first element is generally better, especially in Python where things can be a bit fuzzy on exactly what data type we're using.</p>

<p>That said, there's an easier way to write this min loop. Don't.<br>
Python's biggest strength is the way that it provides functions to do a lot of this stuff for you. In particular, it provides a <a href="https://docs.python.org/3/library/functions.html#min" rel="noreferrer"><code>min</code></a> function. Normally you'd use min like this:</p>

<pre><code>min([4, 2, 9, 2, 8])
</code></pre>

<p>That would return 2 with no messing around with what initial value you want to guess. You can also provide a <code>key</code> function to change what you're comparing on, which you'll want to do here to use the hypotenuse to your character. </p>

<pre><code>def find_enemy_distance(enemy):
     return math.sqrt(math.pow(character[0] - enemy[0], 2) + (math.pow(character[1] - enemy[1], 2)))
</code></pre>

<p>Then you can call min as follows:</p>

<pre><code>min(enemies, key=find_enemy_distance)
</code></pre>

<p>Speaking of python providing functions that make things easier, there is a math.hypot which removes the need to do your own squaring and square rooting. We can then go for </p>

<pre><code>def find_enemy_distance(enemy):
     return math.hypot((character[0] - enemy[0]), (character[1] - enemy[1]))
</code></pre>

<p>The overall function, (without your entirely appropriate docstring), looks like</p>

<pre><code>def find_closest(character: tuple, enemies: list) -&gt; (int, int):
    def find_enemy_distance(enemy):
        return math.hypot((character[0] - enemy[0]), (character[1] - enemy[1]))
    return min(enemies, key=find_enemy_distance)
</code></pre>
    </div>