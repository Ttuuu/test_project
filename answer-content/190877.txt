<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Main question</h2>

<blockquote>
  <p><em>I'm not really sure right now how I could've made a restart button for my game another way, but it works</em></p>
</blockquote>

<p>Like <a href="https://codereview.stackexchange.com/a/190853/120114">Kokodoko's answer</a> suggests, the common code can be abstracted. I would abstract the common code to a separate method like <code>setupInitialState</code>:</p>

<pre><code>game.prototype.setupInitialState = function() {
  this.player = null;
  this.computer = null;
  this.turns = 0;
  this.playerChoices = [];
  this.computerChoices = [];
  this.spotsLeft = [0,1,2,3,4,5,6,7,8];
}
</code></pre>

<p>Then call that method when starting and restarting the game:</p>

<pre><code>function game () {
  this.squares = document.querySelectorAll('.play');
  this.setupInitialState();

  for(let i = 0; i &lt; this.squares.length; i++){
    this.squares[i].addEventListener('click', (function() {
      this.playerMove(i);
    }).bind(this));
  }
}
</code></pre>

<p>And similarly in the restart method:</p>

<pre><code>game.prototype.restart = function () {

    document.querySelector('.result').style.visibility = 'hidden';

    document.querySelector('.sign').style.visibility = 'visible';
    this.setupInitialState();

    for(let i = 0; i &lt; this.squares.length; i++){
        this.squares[i].classList.add('play');
        this.squares[i].textContent = ' ';
    }
}
</code></pre>

<h1>Other Review points</h1>

<h2>JS</h2>

<p>A lot of the suggestions below come from experience writing Javascript over the past decade, getting feedback from colleagues, and reading various posts online <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">like this one</a>.</p>

<h3>Bind methods and create partial functions to simplify callback functions</h3>

<p>Instead of adding a click handler with an anonymous function bound to <code>this</code> that just calls a method:</p>

<blockquote>
<pre><code>this.squares[i].addEventListener('click', (function() {
      this.playerMove(i);
    }).bind(this));
</code></pre>
</blockquote>

<p>make a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">partial function</a> (still using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>Function.bind()</code></a>)</p>

<pre><code>this.squares[i].addEventListener('click', this.playerMove.bind(this, i));
</code></pre>

<p>And similarly for the other click handlers: </p>

<blockquote>
<pre><code>document.querySelector('#playx').addEventListener('click', () =&gt; {
    ticTacToe.chooseSymbol('x')
});
</code></pre>
</blockquote>

<p>Can be simplified with the same technique:</p>

<pre><code>document.querySelector('#playx').addEventListener('click', ticTacToe.chooseSymbol.bind(ticTacToe,'x'));
</code></pre>

<h3>Use <code>getElementsByClassName()</code> instead of querySelectorAll(), <code>getElementById()</code> instead of <code>querySelector()</code></h3>

<p>In most browsers it would generally be quicker to fetch the game squares using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName" rel="nofollow noreferrer"><code>document.getElementsByClassName()</code></a>, but that would return a live collection (refer to <a href="https://stackoverflow.com/a/39213298/1575353">this SO answer</a> for an explanation). It doesn't appear that the class <code>play</code> is used for styling so it might be simpler to use <a href="https://davidwalsh.name/event-delegate" rel="nofollow noreferrer">event delegation</a> to add a click handler to the table (which can be selected using <code>document.getElementById('board')</code> - should be quicker than <code>document.querySelector()</code> for a non-complex query).</p>

<h3>Remove excess call to <code>checkWin()</code></h3>

<p>The two calls at the end of <code>playerMove()</code> to <code>checkWin()</code> below could be combined to one:</p>

<blockquote>
<pre><code>this.checkWin(this.playerChoices, 'Player');

if (this.checkWin(this.playerChoices, 'Player') !== false) {
  this.computerMove();
}
</code></pre>
</blockquote>

<p>(or optionally the value from the first call could be stored in a variable (or constant using <code>const</code>) to be used in the <code>if</code> condition).</p>

<h2>HTML</h2>

<h3>Use a more appropriate id value for <code>tie</code></h3>

<p>That element is used to display the outcome message of the game - a more appropriate value for the id attribute might be <code>message</code> or <code>outcome</code>.</p>

<h2>CSS</h2>

<h3>Remove excess ruleset</h3>

<p>There appears to be an excess ruleset:</p>

<blockquote>
<pre><code>td {
  border: 6px solid #222;
}
</code></pre>
</blockquote>

<p>That can be removed, since the ruleset above that contains the same border style.</p>

<h3><code>hidden</code> class</h3>

<p>Instead of adding the style <code>visibility: hidden</code> to the elements with class <code>result</code>, make it a class like <code>hidden</code> that can be added and removed in order to hide various elements (e.g. the outcome message).</p>

<h2>Rewrite</h2>

<p>Below is how I would simplify your code. Hopefully the explanations above support all the changes, but there may be a few things that you might have to research in order to figure them out. </p>

<p>I also removed the class <code>play</code> from the table cells and updated the code to check if that class exists on the table cells - instead, the <code>spotsLeft</code> member variable can be used for that discernment. Then there is no need to remove the class and later add it when restarting.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict'

function game() {
  this.board = document.getElementById('board');
  this.squares = this.board.getElementsByTagName('td');
  this.chooser = document.getElementById('chooser');
  this.message = document.getElementById('message');
  this.result = document.getElementById('result');
  this.board.addEventListener('click', clickEvent =&gt; this.playerMove(parseInt(clickEvent.target.id, 10)));

  this.setupInitialState();

}
game.prototype.setupInitialState = function() {
  this.player = null;
  this.computer = null;
  this.turns = 0;
  this.playerChoices = [];
  this.computerChoices = [];
  this.spotsLeft = [0, 1, 2, 3, 4, 5, 6, 7, 8];
}
//could be a constant - using const
game.prototype.winningCombos = [
  [0, 1, 2],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6],
  [3, 4, 5]
];
game.prototype.chooseSymbol = function(symbol) {
  this.player = symbol;
  //choose computers symbol
  this.computer = symbol === 'x' ? 'o' : 'x';
  this.chooser.classList.add('hidden');
}

game.prototype.playerMove = function(i) {
  if (this.spotsLeft.includes(i)) {
    this.squares[i].textContent = this.player;

    this.turns++;

    //remove spot player chose to prevent computer from moving here
    let index = this.spotsLeft.indexOf(i);

    this.spotsLeft.splice(index, 1);

    //push to array to compare for win
    this.playerChoices.push(i);

    if (!this.checkWin(this.playerChoices, 'Player')) {
      this.computerMove();
    }

  }
}

//chooses spot randomly
game.prototype.computerMove = function() {
  let random = this.spotsLeft[Math.floor(Math.random() * this.spotsLeft.length)]

  this.squares[random].textContent = this.computer;

  //remove to prevent choosing again
  let index = this.spotsLeft.indexOf(random);

  this.spotsLeft.splice(index, 1);

  this.squares[random].classList.remove('play');

  this.computerChoices.push(random);

  this.checkWin(this.computerChoices, 'Computer');

}

//compare player or computer arrays to check for win or tie
game.prototype.checkWin = function(player, name) {
  let win = this.winningCombos.some((ar) =&gt; ar.every((c) =&gt; player.includes(c)));

  if (win) {
    this.result.classList.remove('hidden');
    this.message.textContent = `${name} wins!`;
  } else if (this.turns === 5) {
    this.result.classList.remove('hidden');
    this.message.textContent = 'Tie';
  }

  return win;
}

game.prototype.restart = function() {
  this.result.classList.add('hidden');
  this.chooser.classList.remove('hidden');
  this.setupInitialState();

  for (let i = 0; i &lt; this.squares.length; i++) {
    this.squares[i].textContent = ' ';
  }
}


const ticTacToe = new game();

document.querySelector('#playx').addEventListener('click', ticTacToe.chooseSymbol.bind(ticTacToe, 'x'));

document.querySelector('#playo').addEventListener('click', ticTacToe.chooseSymbol.bind(ticTacToe, 'o'));

document.querySelector('#replay').addEventListener('click', ticTacToe.restart.bind(ticTacToe));</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background-color: rgba(244, 100, 0, 0.1);
}

.centered {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}


/* choose x or o block */

.shade {
  z-index: 1;
  position: absolute;
  height: 100%;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.box {
  padding: 1.250rem 1.875rem;
  height: auto;
  background-color: azure;
  top: 6em;
}


/* tic tac toe Board */

table {
  z-index: 0;
  border-collapse: collapse;
  table-layout: fixed;
  display: flex;
  justify-content: center;
}

td {
  width: 188.8px;
  height: 188.8px;
  border: 6px solid #222;
  text-align: center;
  vertical-align: middle;
  font-size: 100px;
}

td {
  border: 6px solid #222;
}

td:first-of-type {
  border-left-color: transparent;
  border-top-color: transparent;
}

td:nth-of-type(2) {
  border-top-color: transparent;
}

td:nth-of-type(3) {
  border-right-color: transparent;
  border-top-color: transparent;
}

tr:nth-of-type(3) td {
  border-bottom-color: transparent;
}


/* replay button */

.replayBox {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  flex-wrap: nowrap
}

.hidden {
  visibility: hidden;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class='shade sign' id="chooser"&gt;
  &lt;div class='box'&gt;
    &lt;button id='playx'&gt;X&lt;/button&gt;
    &lt;button id='playo'&gt;o&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;!-- win or tie --&gt;
&lt;div class='shade hidden' id="result"&gt;
  &lt;div class='box replayBox'&gt;
    &lt;h3 id='message'&gt;&lt;/h3&gt;
    &lt;button id='replay'&gt;Replay?&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;!-- board --&gt;
&lt;table id='board' class='centered'&gt;
  &lt;tr&gt;
    &lt;td id='0'&gt;&lt;/td&gt;
    &lt;td id='1'&gt;&lt;/td&gt;
    &lt;td id='2'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td id='3'&gt;&lt;/td&gt;
    &lt;td id='4'&gt;&lt;/td&gt;
    &lt;td id='5'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td id='6'&gt;&lt;/td&gt;
    &lt;td id='7'&gt;&lt;/td&gt;
    &lt;td id='8'&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</code></pre>
</div>
</div>

    </div>