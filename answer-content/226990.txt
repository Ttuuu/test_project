<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have a whole lot to say. It looks sound and is easy to read.</p>

<p>I'm not sure the big comment explaining how it works is necessarily in the right place, but that doesn't really bother me since the method is compact enough already.</p>

<h2>API</h2>

<p>It would be nice to provide a method like <code>FromWeightedOptions</code> as part of the public API. Personally I wouldn't use a tuple for the public part, but this would allow you to accept an <code>IEnumerable/IReadOnlyList&lt;WeightedChoice&lt;T&gt;&gt;</code> or something which would reduce the effort of using the type.</p>

<p>The validation in <code>Create</code> looks good, though you might want to provide the argument name to the <code>ArgumentException</code>s: it just makes it a little quicker to scan when it's thrown. One more thing worth checking is overflows: if the total weight is too large, then the class will fail in an unhelpful way.</p>

<p>Everything that should be hidden is hidden, and using <code>ThreadStaticRandom</code> it should work fine from multiple threads. I would really expect a class like this to take a <code>Random</code> instance in the constructor, but clearly you don't want this for your purposes, and I think providing both options in the exact same class would be a bad idea.</p>

<p>Inline documentation would of course be nice. The decision to not support zero-weight options seems fine to me (though I probably would if I were writing this for general use), but definitely needs to be documented.</p>

<h2>Efficiency</h2>

<p>There is no need to sort your options before building the data-structure. In fact, by sorting in ascending order, you are maximising the number of comparisons required to sample from choices with the linear scan, so if anything it is counter productive.</p>

<p>In case you are not aware, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=netframework-4.8" rel="nofollow noreferrer"><code>Array.BinarySearch</code></a> is a thing, so it's little effort to make the sampling time complexity logarithmic in the number of choices.</p>

<p>An alternative method that will give you sort-of constant time sampling is the <a href="https://en.wikipedia.org/wiki/Alias_method" rel="nofollow noreferrer">Alias Method</a>. It's a Monte-Carlo method, so you can't know how many random number you will need to sample, but for very large collections it could be important.</p>

<h2>Misc</h2>

<ul>
<li><p>You can simplify <code>optionsAndProbabilities</code> to <code>optionsAndProbabilities = options.Zip(weight, (o, w) =&gt; (option: options[i], weight: weights[i])).ToArray()</code> (or something like that, I haven't tested it)</p></li>
<li><p>I'd be inclined to remove <code>_sumOfWeights</code> from the constuctor: it's strictly redundant with the last element of <code>weights</code>, so I would just acquire it from there.</p></li>
</ul>
    </div>