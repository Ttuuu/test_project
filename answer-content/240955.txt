<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <strong>exception handling</strong> is useless as it is currently implemented, because you are not retrieving the full details. Are you going to guess what went wrong ? 
Add this import at the top of your code:</p>

<pre><code>import traceback
</code></pre>

<p>And then you can use:</p>

<pre><code>print(f'Exception occured: {traceback.format_exc()}')
</code></pre>

<p>which will yield more details.</p>

<p>What would be good is having a counter, or keeping track of the latest row ID processed, so you can tell if a row in particular is causing problems.</p>

<p>I am not sure I would have done a script like this, because row by row insertion is slower than a <strong>bulk insert</strong>, for example in MySQL that would be <code>LOAD DATA INFILE</code>. For this you need a user with the FILE privilege. In a controlled (private) environment, this is okay, otherwise think about the security implications.</p>

<p><strong>Naming conventions</strong>: <code>CSV</code> is not a good name for a table, think of something more meaningful, even for a temp table:</p>

<pre><code>CSVTruncate = 'Truncate CSV;'
</code></pre>

<p><code>SQL_Server</code> is a terrible name too for a table.</p>

<p>Certain <strong>constant values</strong> should be defined as variables and kept at the top of the code eg: <code>'G:/Technical/Labels/Production/Data/CSVExport.csv'</code></p>

<p><strong>Structure</strong> is not great, the program could be more readable. Don't do all the stuff in the main procedure, instead separate functionality by moving code to functions. The CSV import should definitely be a standalone function.
That would make the program easier to read and understand, and reduce the risk of <strong>confusion</strong> and bugs.</p>

<p>You need to add more <strong>line spacing</strong> too. For example this code is not pleasant to read:</p>

<pre><code>CSVTruncate = 'Truncate CSV;'
SQL_ServerTruncate = 'Truncate SQL_Server;'
print("Truncate Table CSV...")
#CSV table
MySQLtruncateCSV.execute(CSVTruncate)
MySQLtruncateCSV.close()
MySQLdb.commit()
print("Truncate Table SQL_Server...")
#SQL_Server table
MySQLtruncateSQL_Server.execute(SQL_ServerTruncate)
</code></pre>

<p>You reuse variable names and there is real potential for confusion as exemplified here:</p>

<pre><code>#SQL_Server table
MySQLtruncateSQL_Server.execute(SQL_ServerTruncate)
</code></pre>

<p>With names like these it's not immediately clear against which environment you are really running queries.
So you should really break up your code in a few dedicated functions, and not mix functionality.</p>

<p>And if your goal is to insert data from SQL Server to Mysql the approach is not ideal I think. It is possible to interconnect different DBMSes with each other.
For example with SQL server you can connect to other databases (linked servers), for this you need to install the right drivers and middleware.</p>

<p>Then it is possible to insert data from one table to another, even to another database and server. It is matter of choice, but the idea is worth considering. The choice is whether to spend time on development (+ maintenance &amp; fixing bugs) or spend time on integration.</p>

<p><strong>SQL performance</strong>: this may be the least of your worries now but this query could be improved:</p>

<pre><code>SqlData.execute("select p.id, p.code,p.description, p.searchRef1, so.number, c.code, c.name \
from salesorderline sol join \
salesorder so \
on sol.salesorderid = so.id join \
product p \
on sol.productid = p.id join \
customer c \
on so.customerid = c.id \
where so.orderdate &gt; dateadd(dd,-10,cast(getdate() as date));")
         product p \
         on sol.productid = p.id join \
         customer c \
         on so.customerid = c.id \
         where so.orderdate &gt; dateadd(dd,-10,cast(getdate() as date));")
</code></pre>

<p>The <code>where</code> clause will not advantage of an <strong>index</strong> on <code>orderdate</code> if there is one. Simply calculate D-10 in your Python code and pass a hard value to your query rather than an expression.</p>

<pre><code>from datetime import datetime, timedelta
d = datetime.today() - timedelta(days=10)

# this will return: '2020-04-11'
d.strftime('%Y-%m-%d')
</code></pre>

<p>When you are doing joins on multiple tables that have lots of records, you can experience performance issues, especially when not taking advantage of the indexes that exist.</p>
    </div>