<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code Review</h1>

<p><code>while solved == False:</code> is an awkward way of writing the loop condition.  <code>while not solved:</code> would be clearer and more Pythonic.</p>

<hr>

<p>You never set <code>solved = True</code> anywhere.  Instead, you unconditionally <code>break</code> out of the loop.  This means your loop could actually be written <code>while True:</code>, but I don't think this is clearer.  Using <code>solved = True</code> instead of <code>break</code> would terminate the loop in an expected way.</p>

<hr>

<p>This is verbose:</p>

<pre><code>    nums = random.sample(range(-100, 150), 2)
    if (nums[0] + nums[1] == add_to) and (nums[0] * nums[1] == multiply_to):
</code></pre>

<p>You could unpack <code>nums</code> into to individual variables, and avoid the <code>[0]</code> and <code>[1]</code> indexing operations, for more performant code:</p>

<pre><code>    x1, x2 = random.sample(range(-100, 150), 2)
    if x1 + x2 == add_to and x1 * x2 == multiply_to:
</code></pre>

<hr>

<p>If you give values which can never work with integers, like add to <code>2</code> and multiply to <code>3</code>, you have an infinite loop.  You should have a "give up after so many attempts" procedure.</p>

<hr>

<h1>Monte Carlo</h1>

<p>As pointed out by <a href="https://codereview.stackexchange.com/a/242330/100620">Peilonrayz</a>, there is an <span class="math-container">\$O(1)\$</span> solution to the problem.</p>

<p>However, if your goal is to utilize a <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method" rel="nofollow noreferrer">Monte Carlo simulation method</a> ...</p>

<p>If <code>multiply_to</code> is:</p>

<ul>
<li>positive, then the numbers must be the same sign, both positive or both negative, which you could determine by looking at the <code>add_to</code> sign,</li>
<li>negative, then one number must be greater than zero, and the other must be less than zero,</li>
<li>zero, then one number must be zero.</li>
</ul>

<p>eg)</p>

<pre><code>if multiply_to &gt; 0:
    if add_to &gt; 0:
        r1 = range(1, add_to)
        r2 = range(1, add_to)
    else:
        r1 = range(add_to + 1, 0)
        r2 = range(add_to + 1, 0)

elif multiply_to &lt; 0:
    r1 = range(1, 150)   # A positive value in your initial range bracket
    r2 = range(-100, 0)  # A negative value in your initial range bracket

else:
    r1 = range(add_to, add_to + 1)
    r2 = range(0, 1)


for _ in range(10_000):
    x1 = random.choice(r1)
    x2 = random.choice(r2)
    if x1 + x2 == add_to and x1 * x2 == multiply_to:
        print(f"Solved: {x1} + {x2} = {add_to}, {x1} * {x2} = {multiply_to}")
        break
else:
    print("Couldn't find a solution")
</code></pre>
    </div>