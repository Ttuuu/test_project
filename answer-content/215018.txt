<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing which strikes me is that the Caesar code is far too long. It's just a special case of Vigenère with a key that's one character long: I would expect that in <code>caesar.py</code> you can <code>from vigenere import *</code> and then just write a <code>main</code> method.</p>

<hr>

<p>The second thing which strikes me is that it's good work for a newbie. There's a good docstring at the top; there's a <code>__name__ == "__main__"</code> check.</p>

<hr>

<blockquote>
<pre><code>def buildSubStrings(string, seperation): # Build all substrings required to analyse the polyalphabetic cipher
    return [string[i::seperation] for i in range(seperation)]
</code></pre>
</blockquote>

<p>Minor point: it's <em>separation</em> with two 'a's.</p>

<hr>

<blockquote>
<pre><code>def frequencyAnalysis(string): # Normalised frequency analysis
    freq = [0] * 26
</code></pre>
</blockquote>

<p>Magic number. For the time being I'd pull it out as a top-level constant. When you get round to handling other languages you'll need to consider passing it around, possibly implicitly (as the length of an <code>alphabet</code> object).</p>

<blockquote>
<pre><code>    for c in string:
        freq[ord(c) - ord('A')] += 1
</code></pre>
</blockquote>

<p>There's a special class for that: <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>.</p>

<blockquote>
<pre><code>    total = sum(freq)

    for i in range(0, len(freq)):
        freq[i] /= (float(total) / 100)

    return freq
</code></pre>
</blockquote>

<p>You shouldn't need the explicit coercion to <code>float</code>: float division will do that for you. Python 3 has a different operator (<code>//</code>) for integer division. Also, it's probably more Pythonic to use a comprehension:</p>

<pre><code>    scale = sum(freq) / 100
    return [f / scale for f in freq]
</code></pre>

<hr>

<blockquote>
<pre><code>def initialiseParser():
    parser = argparse.ArgumentParser(description = "Encrypt or decrpyt a string using the Caesar Cipher")
</code></pre>
</blockquote>

<p>Typo in <em>decrypt</em>. Also, this is quoted from the Vigenère code, so looks like a copy-pasta error.</p>

<hr>

<blockquote>
<pre><code>def scoreCalculator(frequencyAnalysis, shift): # Calculates a weighted score for a given shift value
    englishFrequencies = [  8.167, 1.492, 2.782,
                            4.253, 12.702, 2.228,
                            2.015, 6.094, 6.966,
                            0.153, 0.772, 4.025,
                            2.406, 6.749, 7.507,
                            1.929, 0.095, 5.987,
                            6.327, 9.056, 2.758,
                            0.978, 2.360, 0.150,
                            1.974, 0.074 ]
</code></pre>
</blockquote>

<p>I'd like to see a comment giving the source for these frequencies.</p>

<blockquote>
<pre><code>    score = 0

    for index in range(0, 26):
        shiftIndex = (index + shift) % 26
        score += abs(frequencyAnalysis[index] - englishFrequencies[shiftIndex])

    return score / 26
</code></pre>
</blockquote>

<p>See previous notes on the magic number and on using comprehensions.</p>

<p>Is the normalisation necessary? Surely you'll just be comparing scores against each other?</p>

<hr>

<blockquote>
<pre><code>def shiftCalculator(frequencyAnalysis): # Calculates the most likely shift value for a substring by comparing weighted scores of different shift values
    bestGuess = ''
    bestGuessScore = float('inf')

    for shift in range(1, 27):
        score = scoreCalculator(frequencyAnalysis, shift)

        if score &lt; bestGuessScore:
            bestGuessScore = score
            bestGuess = chr(ord('Z') - shift + 1)

    return bestGuess
</code></pre>
</blockquote>

<p>There's a builtin <code>max</code> and tuples have implicit comparison, so this can be something like</p>

<pre><code>    bestShift = max((scoreCalculator(frequencyAnalysis, shift), shift) for shift in range(1, 27))
    return chr(ord('Z') - bestShift[1] + 1)
</code></pre>

<hr>

<blockquote>
<pre><code>    elif args.guess:
        maxGuess = 30 if len(strippedText) &gt; 30 else len(strippedText)
</code></pre>
</blockquote>

<p>What's the point of guessing <code>len(strippedText)</code>? I haven't seen anything which takes into account bigram frequencies, so I would think that the most plausible guess would be the key which decrypts the plaintext to <code>EEE...EEE</code>.</p>

<hr>

<p>I've refactored the next section a bit to understand what it's doing:</p>

<pre><code>        keyList = [
            ''.join(shiftCalculator(frequencyAnalysis(subString))
                for subString in buildSubStrings(strippedText, guess))
            for guess in range(2, maxGuess)
        ]
</code></pre>

<p>Given the granularity of a lot of the functions, I'm slightly surprised you didn't factor out a <code>guessKey(text, guess)</code>.</p>

<blockquote>
<pre><code>        bestGuess = ''
        bestGuessScore = float('inf')

        for key in keyList:
            score = scoreCalculator(frequencyAnalysis(str.upper(vigenere(strippedText, key, False))), 0)
</code></pre>
</blockquote>

<p>Is the <code>str.upper</code> necessary? If so, why not apply it to <code>strippedText</code> earlier and consider in which other functions it becomes unnecessary?</p>

<hr>

<blockquote>
<pre><code>    if args.preserveSpacing:
        for x in range(0, len(rawText)):
            if rawText[x] == ' ':
</code></pre>
</blockquote>

<p>The regex used <code>\s</code>, which catches a lot more than just <code>' '</code>, so that looks like a bug to me.</p>
    </div>