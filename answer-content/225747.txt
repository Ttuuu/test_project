<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Performance</h3>

<p>Strings are immutable, so using <code>accumulator += stuffToAppend</code> in a loop can traditionally impact performance. The problem is that we're creating a new string every iteration, leading to quadratic time complexity for an operation that should be linear. It turns out that modern browsers optimize this heavily using an internal array to represent string parts and make it quite fast over using an explicit array, so this post is focused on style rather than performance.</p>

<h3>Design</h3>

<p>On first thought, <code>reduce</code> seems like the right function from a semantic standpoint since we want to boil the array of interests down to one string. However, since avoiding string concatenation requires an intermediate array in <code>reduce</code>, we might as well just skip the intermediate array and use <code>map</code> and <code>join</code>. It's pretty common that <code>reduce</code> can be replaced with <code>map</code> or <code>filter</code>, which are more specific and succinct.</p>

<p>Switch statements are also generally not used much in JS (but often used in C...). You can replace many switch statements in JS with an object (particularly if you're choosing between a number of similar functions), or at least an <code>if</code> statement. Either way, the nature of the commas and "and" in this example makes it a bit awkward, so there doesn't seem to be any clear-cut win.</p>

<p>Additionally, this routine of "prettifying" a list is generic and can be moved to a separate function to keep <code>Person</code> clean.</p>

<p>As an aside, instead of switching between "interests", "hobbies" and "bio", it seems best to pick one term and stick with it throughout. </p>

<p>Here's my attempt. This might seem a bit abstract, but it's typical in JS to avoid conditional/switch stuff as much as it is to avoid loops (which is the idea with <code>reduce</code>). If you prefer a more traditional approach, replace the <code>joins</code> array and indexing with an <code>if</code> statement and I'd still endorse it.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const prettyList = (a, sep=", ", endSep=[" and ", "."]) =&gt; 
  a.map((e, i) =&gt; e + (endSep[endSep.length-a.length+i] || sep)).join("")
;

const Person = function (interests=[]) {
  this.interests = interests;
  this.interestsSentence = prettyList(interests);

  this.interestsStr = () =&gt; 
    "This person's interests are: " + this.interestsSentence
  ;
};

const interests = ["foo", "bar", "baz", "quux"];

for (let i = 1; i &lt;= 4; i++) {
  console.log(new Person(interests.slice(0, i)).interestsStr());
}</code></pre>
</div>
</div>


<p>Now the function is reusable and we can change its behavior without much effort at all:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const prettyList = (a, sep=", ", endSep=[" and ", "."]) =&gt; 
  a.map((e, i) =&gt; e + (endSep[endSep.length-a.length+i] || sep)).join("")
;

const activities = ["biking", "running", "walking", "skipping", "driving"];
console.log("I love", prettyList(activities, "; ", [", sometimes ", " but not ", "!"]));
console.log("I love", prettyList(activities, " and ", [" while ", " :-o"]));</code></pre>
</div>
</div>

    </div>