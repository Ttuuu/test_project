<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your overall breakdown looks good. There are a few problems in the organization and logic:</p>

<p><strong>Create a <code>newGrid</code> function</strong></p>

<p>In <code>main</code> you have this code:</p>

<pre><code>    #Form the grid
    grid = [["|","   ","|", "   ","|", "   ","|"],
            ["|","   ","|", "   ","|", "   ","|"],
            ["|","   ","|", "   ","|", "   ","|"]]
    drawGrid(grid)
</code></pre>

<p>The setting of the <code>grid</code> array leaks implementation details out to <code>main</code>, which should not know them. Instead, I suggest encapsulating the grid construction in a function, <code>newGrid</code> (or whatever you like) that just returns the appropriate value. This will let you change how the grid is implemented (see below) without having to know about it in <code>main</code>.</p>

<p><strong>Change the grid implementation</strong></p>

<p>Your grid stores both separator characters and cell contents. Worse, it also stores white space with the cell contents. It would be better to handle the formatting of the grid in the actual <code>drawGrid</code> function (since that is its job!) and leave the grid data structure to just store data.</p>

<p><strong>Get rid of <code>isWon</code> and <code>isTie</code></strong></p>

<p>You maintain two variables that supposedly describe the termination status of the program. You do a bad job of checking them:</p>

<pre><code>        if isWon == False and isTie == False:
</code></pre>

<p>For boolean variables, please evaluate the value directly rather than comparing it with <code>True</code> or <code>False</code>, like so:</p>

<pre><code>        if not isWon and not IsTie:
</code></pre>

<p>Moreover, none of these variables are necessary. You have a function that checks if the game is over. Simply use that function directly in your while loop:</p>

<pre><code>while not checkWinner(...):
</code></pre>

<p>Of course, <code>haveWinner</code> might be a better name than <code>checkWinner</code>.</p>

<p><strong>Break down your <code>main</code> function</strong></p>

<p>Currently your <code>main</code> function consists of a loop to play multiple games in series, containing a loop to play each alternating turn, plus logic to display the end-of-game results.</p>

<p>Break down your main into a separate function to play one game, plus a loop to play multiple games by calling that function:</p>

<pre><code>def main():
    while play_another_game:
        play_game()
</code></pre>

<p><strong>Merge <code>getRow</code> and <code>getColumn</code> functions</strong></p>

<p>You have two functions that obviously are copies, since the <code>getColumn</code> function still asks the user to "Pick a row".</p>

<p>I'd suggest merging them into a single function that just prints a different word, which you can pass as a parameter:</p>

<pre><code>def getIndex(word):
    print("Pick a {}".format(word))
    ...
</code></pre>

<p>You can then define getRow and getColumn as calling the common underlying function and passing a different string:</p>

<pre><code>def getRow():
    return getIndex("row")
</code></pre>

<p><strong>Invert logic in checkWinner</strong></p>

<p>Your <code>checkWinner</code> function contains various tests that look for a winner. Under each check, you try to print a message and return, resulting in 8 different copies of the printed message. </p>

<p>I suggest you first look for a way to compress the test-expressions using list of tuples (or tuples of tuples) to store the various winning combinations as data, rather than code. Try the <code>all</code> built-in function for this:</p>

<pre><code>ways_to_win = (
    ((0,0), (0,1), (0,2)),
    ((1,0), (1,1), (1,2)),
    ((2,0), (2,1), (2,2)),
    ...
 )

for way2win in ways_to_win:
    if all(grid[x][y] == player for x,y in way2win):
        break
else:
    return False

print("Winner!")
return True
</code></pre>
    </div>