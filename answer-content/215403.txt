<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me collect a couple of thoughts here.</p>

<ul>
<li><p>Aggregate initialization currently works like this:</p>

<pre><code>array2d&lt;int, 2, 2&gt; a{{1, 2, 3, 4}};
</code></pre>

<p>but wouldn't it be favorable to allow for</p>

<pre><code>array2d&lt;int, 2, 2&gt; a{{1, 2}, {3, 4}};
</code></pre></li>
<li><p><a href="https://en.cppreference.com/w/cpp/container/array/at" rel="noreferrer">std::array::at</a> performs bound checking and throws upon an out of bounds index. When your intention is to stick with the <code>std::array</code> interface, you should do the same.</p></li>
<li><p>If you want the container to be standard-compliant, there are some type aliases missing and maybe more. In particular, there are no <code>cbegin()</code>, <code>cend()</code>, <code>crbegin()</code>, <code>crend()</code> member functions. Is this intended?</p></li>
<li><p>You implicitly use row-major order. Are you sure everyone expects this? Users familiar with Eigen and their fixed size matrices might at least want to customize row-/column-major ordering, e.g. <code>Eigen::Matrix&lt;int, 2, 2, Eigen::ColMajor&gt; m;</code></p></li>
<li><p>A range based for loop will considerably differ from a manual loop over rows and columns. Example:</p>

<pre><code>// Loop over elements, transposed access. Requires nested loop.
for (std::size_t i = 0; i &lt; 2; ++i)
   for (std::size_t j = 0; j &lt; 2; ++j)
      std::cout &lt;&lt; a[j][i] &lt;&lt; "\n";

// Loop over elements, tranposed access impossible. Only one loop.
for (const auto&amp; i : d)
    std::cout &lt;&lt; i &lt;&lt; "\n";
</code></pre>

<p>This is slightly unintuitive. Shouldn't the range based for loop require a nested loop as well?</p></li>
<li><p>The static data member <code>sizes</code> is not used anywhere.</p></li>
</ul>

<p>Getting a two-dimensional array to work is not that much of an effort. Getting the semantics right is hard. Sticking to the <code>std::array</code> interface is a good goal when ease of use is intended for those familiar with the <code>std::array</code> template. But the additional dimension pulls in requirements that can't be tackled with the concepts of <code>std::array</code>. I would recommend having a look at established linear algebra libraries and their fixed size matrices. Also, the <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0009r6.html" rel="noreferrer">mdspan proposal</a> for a multi-dimensional view on array types might be a good read.</p>
    </div>