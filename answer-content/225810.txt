<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>CHAR_BIT</code></h2>

<p>Use that macro when you write 8 meaning how many bits there are in a <code>char</code>.</p>

<p>You can find it in <code>&lt;limits.h&gt;</code></p>

<hr>

<h2>Safe (future-proof) usage of <code>sizeof</code></h2>

<ul>
<li><code>sizeof(type)</code> vs <code>sizeof(*foo)</code>:</li>
</ul>

<p><code>foo = malloc(sizeof(*foo));</code> is better because if you ever change the type of <code>foo</code>, this call will still be valid, while if not, you would have to change every line where malloc is called with foo.  If you forget any of those lines, good luck.</p>

<p>In your <code>qsort</code> calls happens the same.</p>

<hr>

<h2>Header naming collision</h2>

<p>The header file <a href="http://man7.org/linux/man-pages/man3/error.3.html" rel="nofollow noreferrer"><code>&lt;error.h&gt;</code></a> exists in GNU C. If you never intend to support GCC or any compiler that is compatible with GNU C (which is a lot of them), then fine.  You should probably rename your header file.  Using a path, such as <code>#include "my_project/error.h"</code> is the best solution I can think of, because you never know what weird names they might have invented as extensions to standard C; they might even invent them later than you.  Yes, in <code>""</code> included files, your files have precedence over the installed ones, but I wouldn't rely much on that.</p>

<p>From the top of my head I can't remember, but I would say that <code>&lt;file.h&gt;</code> also exists somewhere; just do the same to be safe.</p>

<hr>

<h2>Bitwise operations on signed integers</h2>

<p>Unless you really need to do that, and you're completely sure that what you're doing is correct, don't.  It's very very unsafe and unreliable.  And even if you need to use Bitwise operations on signed integers, I would cast them to unsigned just to do the operation, and then cast back to the signed type to continue using it.</p>

<p>Also, if you can, use fixed width integers for even more safety (<code>&lt;stdint.h&gt;</code>)</p>

<hr>

<h2>Names and Order of Includes (source: <a href="https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes" rel="nofollow noreferrer">Google C++ Style Guide</a>)</h2>

<p>Use standard order for readability and to avoid hidden dependencies: Related header, C library, C++ library, other libraries' .h, your project's .h.</p>

<p>All of a project's header files should be listed as descendants of the project's source directory without use of UNIX directory shortcuts <code>.</code> (the current directory) or <code>..</code> (the parent directory). For example, <code>google-awesome-project/src/base/logging.h</code> should be included as:</p>

<pre><code>#include "base/logging.h" 
</code></pre>

<p>In <code>dir/foo.cc</code> or <code>dir/foo_test.cc</code>, whose main purpose is to implement or test the stuff in <code>dir2/foo2.h</code>, order your includes as follows:</p>

<p>dir2/foo2.h.</p>

<p>A blank line</p>

<p>C system files.</p>

<p>C++ system files.</p>

<p>A blank line</p>

<p>Other libraries' .h files.</p>

<p>Your project's .h files.</p>

<p>Note that any adjacent blank lines should be collapsed.</p>

<p>With the preferred ordering, if <code>dir2/foo2.h</code> omits any necessary includes, the build of <code>dir/foo.cc</code> or <code>dir/foo_test.cc</code> will break. Thus, this rule ensures that build breaks show up first for the people working on these files, not for innocent people in other packages.</p>

<p><code>dir/foo.cc</code> and <code>dir2/foo2.h</code> are usually in the same directory (e.g. <code>base/basictypes_test.cc</code> and <code>base/basictypes.h</code>), but may sometimes be in different directories too.</p>

<p>Within each section the includes should be ordered alphabetically.</p>

<ul>
<li>In your case this would mean this order of includes:</li>
</ul>

<p><code>minQueue.c</code>:</p>

<pre><code>#include "my_project/minQueue.h"

#include &lt;stdlib.h&gt;

#include "my_project/codes.h"
</code></pre>

<hr>

<h2><code>BUFSIZ</code></h2>

<p>If you don't have the need of a very specific buffer size, don't write your own value, and just use this macro from <code>&lt;stdio.h&gt;</code>.</p>

<hr>

<h2><code>bzero</code> is deprecated</h2>

<p><a href="http://man7.org/linux/man-pages/man3/bzero.3.html" rel="nofollow noreferrer"><code>man bzero</code></a>:</p>

<blockquote>
  <p>CONFORMING TO</p>
  
  <p>The <code>bzero()</code> function is deprecated (marked as LEGACY in
  POSIX.1-2001); use memset(3) in new programs. POSIX.1-2008 removes the
  specification of <code>bzero()</code>. The <code>bzero()</code> function first appeared in
  4.3BSD.</p>
  
  <p>The <code>explicit_bzero()</code> function is a nonstandard extension that is
  also present on some of the BSDs. Some other implementations have a
  similar function, such as <code>memset_explicit()</code> or <code>memset_s()</code>.</p>
</blockquote>

<p>Use <code>memset()</code> instead.</p>

<hr>

<h2><code>strncmp</code></h2>

<p>When you use <code>fread</code> on a buffer, you can't guarantee that it will contain a valid string, so I would use <code>strncmp()</code> instead of <code>strcmp()</code> just to be safe.</p>

<hr>

<h2>DRY</h2>

<p>Don't repeat yourself: In every call to <code>reportError()</code> you repeat the file and line special identifiers.  You could embed those in a macro.  This is what I do:</p>

<pre><code>/*
 * void alx_perror(const char *restrict str);
 */
#define alx_perror(str)     do                                          \
{                                                                       \
        alx_perror__(__FILE__, __LINE__, __func__, str);                \
} while (0)


__attribute__((nonnull(1, 3)))
inline
void    alx_perror__    (const char *restrict file, int line,
                         const char *restrict func, const char *restrict str);


inline
void    alx_perror__    (const char *restrict file, int line,
                         const char *restrict func, const char *restrict str)
{

        fprintf(stderr, "%s:\n", program_invocation_name);
        fprintf(stderr, "   %s:%i:\n", file, line);
        fprintf(stderr, "   %s():\n", func);
        if (str)
                fprintf(stderr, "       %s\n", str);
        fprintf(stderr, "   E%i -   %s\n", errno, strerror(errno));
}
</code></pre>

<hr>

<h2><code>ARRAY_SIZE()</code></h2>

<p>When calling <code>qsort()</code> (actually, any function that accepts an array), in the field that states the size of the array, there are different possibilities:</p>

<ul>
<li>Pass the actual value</li>
<li>Pass the result of <code>ARRAY_SIZE(arr)</code> (defined typically as <code>#define ARRAY_SIZE(arr)  (sizeof(arr) / sizeof((arr)[0]))</code>)</li>
</ul>

<p>If you can use the second one, which is when you have a global static-duration array or an array local to the function, it's the best method, because if the size of the array is changed (for example if I had <code>int a[FOO];</code> and then I decide to use a different size such as <code>int a[BAR];</code>), I don't need to change the rest of the code.  And with recent compilers, such as GCC 8, you will receive a warning if you apply that to something that is not an array, so it is safe.  With old compilers, there are still tricks to make this macro safe (you can find them in StackOverflow easily).</p>

<p>If you can't use it, just use the value. (Never use <code>sizeof</code> directly, which would give the size of a pointer!).</p>

<p>In your call to <code>qsort()</code>, it would be like this:</p>

<pre><code>qsort(symbols, ARRAY_SIZE(symbols), sizeof(symbols[0]), lenThenLexComp);
</code></pre>
    </div>