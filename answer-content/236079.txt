<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Basically the code is well thought out and written.</p>

<p>A major observation about the code is that it is totally focused on performance/speed of execution, and not very flexible or extensible. A user of the graph class may want to add arguments to the <code>argv</code> through a call to a member function or an alternate version of the constructor that accepts a list of arguments. Hard coding the number of arguments in <code>arvg</code> (farvg) makes this impossible. It is very easy to calculate <code>argc</code> from <code>argv</code>:</p>

<pre><code>        gvParseArgs(gvc_, sizeof(fargv)/ sizeof(*fargv), (char**)fargv);             // NOLINT
</code></pre>

<p>The  variable <code>fargv</code> might be made into a class member variable to allow extensibility.</p>

<p>The use of <code>std::array</code> over <code>std::vector</code> is another place where the code is not extensible. The use of <code>std::array</code> also forces the creation of a constant that is only used in the initialization of the array. I understand that the use of <code>std::vector</code> prevents the use of <code>constexpr</code> but I value extensibility over optimization. Some of us old school programs say that the first rule of optimization is <em>don't</em>. The real first rule is find the bottle necks before optimizing. </p>

<h2>Minor Nit</h2>

<p>I generally put the closing <code>};</code> of an std::array or std::vector initialization on a new line that is indented to the beginning of the array, it makes it a little more readable and easier to edit.</p>

<pre><code>static const std::vector&lt;std::string_view&gt; colours = {
        "blue",           "green",         "red",        "gold",
        "black",          "magenta",       "brown",      "pink",
        "khaki",          "cyan",          "tan",        "blueviolet",
        "burlywood",      "cadetblue",     "chartreuse", "chocolate",
        "coral",          "darkgoldenrod", "darkgreen",  "darkkhaki",
        "darkolivegreen", "darkorange",    "darkorchid", "darksalmon",
        "darkseagreen",   "dodgerblue",    "lavender",   "mediumpurple",
        "plum",           "yellow"
};
</code></pre>

<h2>Missing Header</h2>

<p>Somehow <code>#include &lt;string_view&gt;</code> seems to have been dropped from the code.</p>
    </div>