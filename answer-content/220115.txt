<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your program is easy to read and does all the necessary input validation. That's good.</p>

<p>The error messages should be more helpful. If the user enters an invalid operator, you should tell them which operators are valid:</p>

<pre><code>print(f'Please enter a valid operator: {' '.join(ops)}\n')
</code></pre>

<p>Every use of <code>eval</code> is dangerous. If you pass unvalidated input to it, users might be able to run arbitrary Python code. You currently do the validation in <code>verify</code> and the actual calculation in <code>calc</code>. That's nicely separated, but it can also lead to a situation where you later call <code>calc</code> by accident with unvalidated input. To avoid this, most calculator programs use a dictionary of operators:</p>

<pre><code>binops = {
    '+': lambda a, b: return a + b,
    '-': lambda a, b: return a - b,
    # and so on
}

try:
    return binops[op](x, y)
except KeyError, e:
    print(f'Invalid operator {op!r}, valid operators are {sorted(ops.keys())}')
</code></pre>

<p>One unfortunate thing about the above code is that <code>ops.keys()</code> returns the operators in an unspecified order. Therefore I had to add the <code>sorted</code> call.</p>

<p>Each of your functions calls the continuation function at the end. When you try a long session with the calculator (about 5000 calculations), it will raise an exception. Whenever a function is called, Python remembers where it was called from, and it can remember only a few nested function calls. Therefore it is more common to use <code>while</code> loops for representing repetition. See <a href="https://stackoverflow.com/q/1359197">https://stackoverflow.com/q/1359197</a> for more details.</p>

<p>As a user of the calculator, I don't like to enter the numbers and operators separately. As the next step the calculator should allow inputs like <code>3+5</code> and <code>7 - -9</code> and <code>+7--9</code>. You can do this by using regular expressions.</p>

<p>The current code asks many questions individually. Instead of asking whether to reuse the result from the last calculation, you could print the result in the form <code>ans1 = 8</code> and allow the user to write expressions like <code>ans4 * ans5</code>. A calculator session might then look like:</p>

<pre><code>&gt; 123
ans1 = 123

&gt; 456
ans1 = 456

&gt; 3 + ans1
ans3 = 126

&gt; ans3 + ans3
ans4 = 252

&gt; result = ans4
result = 252

&gt; result + result
ans5 = 504
</code></pre>

<p>This way the calculator remembers all previous results, and by using the <code>=</code> operator, you can name individual results and refer to them via that name, just like variables in Python. All you need for this is a dictionary and a counter (for the automatic variable names like <code>ans4</code>):</p>

<pre><code>vars = {}
ans = 0

def store_var(name, value):
    vars[name] = value

def store_auto_var(value):
    global ans
    ans += 1
    name = 'ans' + ans
    vars[name] = value
</code></pre>

<p>These are the basic building blocks for building a really powerful calculator.</p>
    </div>