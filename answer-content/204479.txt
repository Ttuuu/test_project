<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Remarks and simplifications for your current code</h3>

<p>Swift does not use the “get” prefix for getter methods, so</p>

<pre><code>func getDistanceForTarget() -&gt; Float
</code></pre>

<p>is better named</p>

<pre><code>func targetDistance() -&gt; Float
</code></pre>

<p>Functions which take no argument, have no side-effects, and are idempotent (i.e.
return the same value on each invocation) are often better expressed as a
<em>read-only computed property,</em> in your case </p>

<pre><code>var targetDistance: Float
</code></pre>

<p>See <a href="https://softwareengineering.stackexchange.com/questions/304077/swift-functions-vs-computed-properties">Swift functions vs computed properties</a>
on  Software Engineering for a detailed discussion.</p>

<p>The above applies to all of your <code>getXXX</code> methods.</p>

<hr>

<p>The <code>getTotalScore()</code> function can be simplified to</p>

<pre><code>func getTotalScore() -&gt; Int {
    switch self {
    case .level1(_, _, let totalScore),
         .level2(_, _, let totalScore),
         .level3(_, _, let totalScore):
        return totalScore
    }
}
</code></pre>

<p>since all cases bind the same variable. The same applies to the following
getter methods.</p>

<hr>

<p>The <code>let</code> preceding the wildcard pattern in</p>

<pre><code>    case .level1(  let _, let  difficulty,   _):
</code></pre>

<p>is not needed, and causes a compiler warning.</p>

<hr>

<p>The explicit conversion to <code>Float</code> in</p>

<pre><code>return  Int(difficulty.getRatioForTargetAgaintsAvailable() * Float(20))
</code></pre>

<p>is not needed since <code>20</code> can be both an integer and a floating point literal:</p>

<pre><code>return  Int(difficulty.getRatioForTargetAgaintsAvailable() * 20)
</code></pre>

<hr>

<p>The <a href="https://developer.apple.com/documentation/swift/customstringconvertible/1539130-description" rel="nofollow noreferrer"><code>description</code></a> method of the <code>CustomStringConvertible</code> protocol
should provide </p>

<blockquote>
  <p>A textual representation of this instance.</p>
</blockquote>

<p>You are abusing it for a welcome message.</p>

<h3>Suggesting an different data structure</h3>

<p>Apparently there is a lot of repetition in your code. Adding another level
would require that 9 functions are updated.</p>

<p>If I understand it correctly (I am not a basketball expert!), the <code>Level</code>
type is used to store</p>

<ul>
<li>A <em>level</em> (1, 2, 3). Each level is bound to a <code>Difficulty</code> (1 = easy, 
2 = medium, 3 = hard).</li>
<li>An integer <em>available balls.</em></li>
<li>An integer <em>total score.</em></li>
</ul>

<p>If we make <code>Difficulty</code> an <code>Int</code>-based enumeration then we can use it directly
as the “level” instead of maintaining that correspondence at several places:</p>

<pre><code>enum Difficulty: Int {
    case easy = 1
    case medium
    case hard
}
</code></pre>

<p><code>Level</code> now becomes a <code>struct</code> with three (independent) properties.
This makes many of the getter methods obsolete:</p>

<pre><code>struct PlayerStatus {

    var level: Difficulty
    var availableBalls: Int
    var totalScore: Int
}
</code></pre>

<p>(I'm using a different name here to avoid confusion with the <code>level</code> property.)</p>

<p>With an init method</p>

<pre><code>init(level: Difficulty = .easy) {
    self.level = level
    availableBalls = 20
    totalScore = 0
}
</code></pre>

<p>the creation of an initial status becomes as easy as</p>

<pre><code>var currentStatus = PlayerStatus()
</code></pre>

<p>Because of the integer-based <code>enum Difficulty</code>, updating to the next level
can be implemented using the <code>rawValue</code> – without a switch/case and independent
of the number of levels:</p>

<pre><code>mutating func gotoNextLevel() {
    if let newLevel = Difficulty(rawValue: self.level.rawValue + 1) {
        self = PlayerStatus(level: newLevel)
    } else {
        // Already at the highest level.
    }
}
</code></pre>

<hr>

<p>Putting it all together, we have</p>

<pre><code>enum Difficulty: Int {
    case easy = 1
    case medium
    case hard

    var targetRatio: Float {
        switch  self {
        case .easy:
            return 0.3
        case .medium:
            return 0.5
        case .hard:
            return 0.8
        }
    }

    var targetDistance: Float {
        switch  self {
        case .easy:
            return 5
        case .medium:
            return 6
        case .hard:
            return 7
        }
    }
}

struct PlayerStatus {

    var level: Difficulty
    var availableBalls: Int
    var totalScore: Int

    init(level: Difficulty = .easy) {
        self.level = level
        availableBalls = 20
        totalScore = 0
    }

    mutating func restartLevel() {
        self = PlayerStatus(level: self.level)
    }

    mutating func gotoNextLevel() {
        if let newLevel = Difficulty(rawValue: self.level.rawValue + 1) {
            self = PlayerStatus(level: newLevel)
        } else {
            // Already at the highest level.
        }
    }

    var targetValue: Int {
        return Int(level.targetRatio * 20)
    }

    var levelPassed: Bool {
        return totalScore == targetValue
    }
}
</code></pre>
    </div>