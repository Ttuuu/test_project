<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are not assigning default values to the fields and you <em>are</em> splitting game logic and UI. That's a good start.</p>

<pre><code>public Game(int i, int j) {
</code></pre>

<p>In a public function or constructor I expect clearly named parameters.</p>

<pre><code>if (i &gt; 100 || j &gt; 100) {
    throw new IllegalArgumentException("grid too big!");
}
</code></pre>

<p>So a grid of 101 cells is too big if <code>i = 1</code> and <code>j = 101</code> but a field of 10 thousand cells is not too big if <code>i = 100</code> and <code>j = 100</code>? I'd return specific errors for the <code>width</code> and <code>height</code> parameters.</p>

<pre><code>width = i;
</code></pre>

<p>Generally we simply use <code>this.width = width</code> instead, so we don't have to come up with a different variable name.</p>

<pre><code>public boolean[][] getGrid() {
    return grid;
}
</code></pre>

<p>Beware of exposing your state. The reference to the grid is copied, but the arrays are mutable! Either clone or expose the state in another way (e.g. using an enumerator or by referencing grid cells separately using coordinates).</p>

<pre><code>public void setGen(int gen) {
    this.genCount = gen;
}
</code></pre>

<p>It's a bit weird that you can set the <code>genCount</code> during the game of life. Again, <code>setGen</code> and <code>gen</code> may not really be clear to the user. <code>gen</code> may also have any value apparently, allowing the object instance to have an invalid state. I'd rename <code>genCount</code> to <code>generation</code>, so away with <code>gen</code> altogether and remove this setter.</p>

<pre><code>public void randomGrid(double probability) {
</code></pre>

<p>This is OK-ish, but I prefer to check if probabilities are between 0 and 1 inclusive (yeah, I know, Java is rather heavy on boilerplate code).</p>

<pre><code>public boolean[][] makeCopy() {
</code></pre>

<p>This seems near identical to <code>getGrid</code>. But more importantly, if I make a copy of a game then I don't expect a grid in return. This method is in dire need to be made <code>private</code> anyway.</p>

<pre><code>boolean[][] nGrid = new boolean[height][width];
</code></pre>

<p>Just <code>newGrid</code> is only 2 characters extra. Don't overly skim on characters (and possibly learn how to touch type).</p>

<pre><code>for (int i = 0; i &lt; width; i++) {
    nGrid[j][i] = grid[j][i];
}
</code></pre>

<p>Use <code>System.arrayCopy()</code> at least for the inner loop instead.</p>

<pre><code>if (grid[j][i] == false) {
</code></pre>

<p>Ugh, here are the <code>i</code> and <code>j</code> again, but now <code>j</code> is the X-coordinate while it was the width before and <code>i</code> is the Y-coordinate.</p>

<p>Furthermore, what about two constants? <code>DEAD = false</code> and <code>ALIVE = true</code>? Using an enum is also possible (<code>enum Cell { DEAD, ALIVE; }</code>), so that <code>false</code> and <code>true</code> cannot even be used anymore.</p>

<pre><code>if (getNeighbours(j, i) == 3) {
</code></pre>

<p>This I like, good method name, and a method that is sorely needed here.</p>

<pre><code>genCount++;
grid = nGrid;
</code></pre>

<p>Lovely, side effects right at the end where they belong.</p>

<hr>

<p>As for <code>getNeighbours</code>, let's simplify things a bit using modular arithmetic...</p>

<pre><code>private static final boolean ALIVE = true;

private int getNeighbours(int x, int y) {
    int count = 0;

    // iterate over all neighbouring cells as a square
    for (int dx = -1; dx &lt;= 1; dx++) {
        for (int dy = -1; dy &lt;= 1; dy++) {
            // skip cell itself
            if (dx == 0 &amp;&amp; dy == 0) {
                continue;
            }

            // get coordinates for neighbour
            int nx = Math.floorMod(x + dx, width);
            int ny = Math.floorMod(y + dy, height);

            if (grid[nx][ny] == ALIVE) {
                count++;
            }
        }
    }

    return count;
}
</code></pre>

<p>Note that <code>floorMod</code> is the modulus operation while <code>%</code> is the remainder operation which will return <code>-1</code> if the left operand is <code>-1</code>. That's not what you want, you want <code>width - 1</code> or <code>height - 1</code> instead.</p>

<p>Now I hope that looks a bit easier on the eye. You may want to rename <code>dx</code> to <code>deltaX</code> and <code>nx</code> to <code>neighbouringX</code> or something like that, but there is such a thing as overdoing it too. For local vars you may be a bit less strict (fields and parameters are more important for sure).</p>

<p>Note that I didn't know that the game of life uses wrapping, but that's another matter I guess. I'll not go on about the strategy design pattern, that might be a bit too deep.</p>

<hr>

<p>I think your design would look better if you split your game of life into a <code>Game</code> and <code>Grid</code> class. That way the method naming would be much easier.</p>

<hr>

<p>Finally, currently your game of life only operates when redrawing the window (or <code>JFrame</code> in Swing talk). That's of course not how it should be, it should be running on a timer and/or using buttons.</p>
    </div>