<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, you should use <code>rsplit</code> and <code>next</code> rather than <code>split</code> and <code>last</code>, as it starts at the more appropriate end:</p>

<pre><code>fn basename&lt;'a&gt;(path: &amp;'a str, sep: char) -&gt; Cow&lt;'a, str&gt; {
    let pieces = path.rsplit(sep);
    match pieces.next() {
        Some(p) =&gt; p.into(),
        None =&gt; path.into(),
    }
}
</code></pre>

<p>Secondly, you shouldn’t be using strings for this; you should be using <a href="http://doc.rust-lang.org/std/path/index.html">paths</a>, because that’s semantically what you’re dealing with.</p>

<p>The easiest way to get a path tends to be to take a <code>&amp;Path</code> or a generic parameter implementing <code><a href="http://doc.rust-lang.org/std/convert/trait.AsRef.html">AsRef</a>&lt;Path&gt;</code> and calling <code>.as_ref()</code> on it; <code>str</code>, <code>String</code>, <code>Path</code>, <code>PathBuf</code> and more implement it.</p>

<p>You can get the base name from a <code>&amp;Path</code> with <a href="http://doc.rust-lang.org/std/path/struct.Path.html#method.file_name"><code>file_name</code></a>; this admittedly produces a <code>Option&lt;&amp;OsStr&gt;</code>, so if you want to <em>display</em> the path you’d need to convert it back towards a string with e.g. <code>.and_then(|s| s.to_str())</code>.</p>

<p>Anyway, the point of this latter part is just that for something that is semantically a path, you should be handling it specially, as a rule; a path need not be Unicode. Think on it more.</p>
    </div>