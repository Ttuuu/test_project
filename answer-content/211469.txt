<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First and foremost, I believe that your fundamental concept is flawed. Equality has a well defined meaning between objects of the same type, or between types themselves, but not in this hybrid scenario. For instance, let's say I have a <code>class C</code>, which inherits from <code>A</code> as well as from <code>Base&lt;C&gt;</code>, how shall I compare an instance of <code>A</code> and an instance of <code>C</code>? You would normally expect them to be comparable in a polymorphic context, at least if <code>A</code> implements <code>operator==</code>, wouldn't you? But their <code>type_info</code> is different. You could try and work around that problem by using <code>dynamic_cast</code>, but then I suspect that, given <code>A a; C c;</code>, <code>a == c</code> and <code>c == a</code> wouldn't return the same result, which is unexpected.</p>

<p>I suspect it's a kind of work-around you devised because you had a lot of vaguely related objects bunched together and realized afterwards you had to discriminate between them according to their concrete type.</p>

<p>But it would be best to improve on your overall design (that you can submit here, by the way), rather than persisting in the original one. Because what's the limit? Why not ordering objects of different types when you're at it? A common task when you have equality-comparable objects is to remove duplicates: you'll need to sort the objects to do it efficiently, meaning you have to implement <code>operator&lt;</code> as well.</p>

<p>If you stick to your concept, though:</p>

<ul>
<li><p>Your base class lacks a virtual destructor. Any base class that will be used as a polymorphic handle needs a virtual destructor, or it might lead to resources leak (see <a href="https://stackoverflow.com/questions/461203/when-to-use-virtual-destructors">this</a>). </p></li>
<li><p>The virtual <code>print</code> function clearly isn't in the right place (there's no conceptual link between equality and printability), but I suspect it's there only for the purpose of debugging.</p></li>
<li><p>The code seems to be over-engineered. The only thing your CRTP base class does is a static down-cast, which could be a nice (static polymorphism) if the <code>base_equals</code> method wasn't called after already having performed run-time type identification. It's simpler to directly <code>dynamic_cast</code> your pointers.</p></li>
</ul>

<p>For instance:</p>

<pre><code>class Base {
    public:
    virtual bool operator==(const Base&amp;) =0;
    virtual ~Base() = default;
};

template &lt;typename T&gt;
class CRTP : public Base{
    virtual bool operator==(const Base&amp; o) const override final {
        auto same_type = dynamic_cast&lt;const T*&gt;(&amp;o);
        return same_type &amp;&amp; static_cast&lt;const T&amp;&gt;(*this) == *same_type;
    }
};
</code></pre>

<ul>
<li>there's a balance issue in your code, because it will accept to compare objects of different derived types not implementing the equality operator, but will refuse to compare objects of the same type if it doesn't implement it. To remedy that issue you can check through SFINAE or concepts (C++20) if equality comparison is implemented. Or you can make a different trade-off and skip the CRTP step:</li>
</ul>

<p>For instance:</p>

<pre><code>class Base {
    public:
    virtual bool operator==(const Base&amp; o) const { return this == &amp;o; }
    virtual ~Base() = default;
};

class A : public Base {
    public:
    int i = 4;
    virtual bool operator==(const Base&amp; o) const override final {
        auto same_type = dynamic_cast&lt;const A*&gt;(&amp;o);
        return same_type &amp;&amp; i == same_type-&gt;i;
    }
};

class B : public Base {}; 
</code></pre>

<p>The downside is that you have to implement the down-casting in each derived base class, and the upside that you have a more consistent fall-back scenario for derived classes not implementing an equality operator.</p>
    </div>