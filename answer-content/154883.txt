<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this case, a non-recursive solution is easier to understand, IMHO:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const powerset = (array) =&gt; { // O(2^n)
	const results = [[]];
	for (const value of array) {
		const copy = [...results]; // See note below.
		for (const prefix of copy) {
			results.push(prefix.concat(value));
		}
	}
	return results;
};

console.log(
	powerset(['A', 'B', 'C'])
);

// [ [],
//   [ 'A' ],
//   [ 'B' ],
//   [ 'A', 'B' ],
//   [ 'C' ],
//   [ 'A', 'C' ],
//   [ 'B', 'C' ],
//   [ 'A', 'B', 'C' ] ]</code></pre>
</div>
</div>


<p>Because <code>results</code> is extended within the loop body, we cannot iterate over it using <code>for-of</code> — doing so would iterate over the newly added elements as well, resulting in an infinite loop. We only want to iterate over the elements that are in <code>results</code> when the loop starts, i.e. indices <code>0</code> until <code>results.length - 1</code>. So we either cache the original <code>length</code> in a variable and use that, i.e.</p>

<pre class="lang-js prettyprint-override"><code>for (let index = 0, length = results.length; index &lt; length; index++) {
    const prefix = results[index];
    // …
}
</code></pre>

<p>…or we just create a static copy of results and iterate over that.</p>
    </div>