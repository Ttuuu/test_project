<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Yes, you can certainly nest your checks a bit better to improve DRYness.</li>
<li><code>isset()</code> has an advantage over <code>empty()</code> in this scenario because <code>isset()</code> accepts multiple parameters versus <code>empty()</code> only permits a single parameter.</li>
<li>using a chain of null coalescing operators will reduce the lines of code near the end of your custom function.  Here is <a href="https://stackoverflow.com/a/41654483">a reference</a> to this technique. </li>
</ul>

<p>For anyone who got lost in your explanation of the logic:</p>

<ol>
<li>Has Image, Has Stock -- use as soon as found</li>
<li>Has Image, No Stock -- use if no #1 is found in whole array</li>
<li>No Image, Has Stock -- use if no #2 is found in whole array</li>
<li>No Image, No Stock -- use default if no #3 is found in whole array</li>
</ol>

<p>Logically, there is no reason to store an id that qualifies as #3 if a #2 id is already found.</p>

<p>Code: (not tested because no test data provided)</p>

<pre><code>function loopThroughProducts($products) {
    foreach ($products as $product) {
        if ($product-&gt;hasImage) {
            if ($product-&gt;inStock) {
                return $product-&gt;id;
            } elseif (!isset($hasImageNoStock)) {
                $hasImageNoStock = $product-&gt;id;
            }
        } elseif ($product-&gt;inStock &amp;&amp; !isset($hasImageNoStock, $hasStockNoImage)) {
            $hasStockNoImage = $product-&gt;id;
        }
    }
    return $hasImageNoStock ?? $hasStockNoImage ?? $products[0]-&gt;id;
}
</code></pre>
    </div>