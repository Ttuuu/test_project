<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Common File Names</strong>
There are 2 generally accepted extensions for C++ header files, they are <code>.h</code> and <code>.hpp</code>. A professional programmer will stick to the common extensions so that others can maintain his code.</p>

<p>Many editing tools will create these files for you, for instance in Visual Studio you can select <code>Add</code> from the solution explorer and then select class. Visual Studio will then generate <code>class.h</code> and <code>class.cpp</code>. Visual Studio will also create the constructor and destructor declarations in the header file and default bodies for the constructor and destructor in the cpp file.</p>

<p><strong>Initializing Classes</strong><br>
This line in <code>main()</code> not only creates the gameInfo object in memory, it also calls the default constructor which initializes the variables in gameInfo:</p>

<pre><code>    gameInfo info;
</code></pre>

<p>It is more common to see initialization of private variables within the constructor, rather than in the declaration of the class. If the body of the constructor is in the cpp file this prevents the recompile of all the files that include the header if the value of one of the variable needs to change. This becomes important as your programs grow and multiple classes are required. I've worked on projects where recompiling everything takes more than 30 minutes.</p>

<p>A default constructor for gameInfo might look something like this:</p>

<pre><code>std::vector&lt;std::wstring&gt; initVec = {
    L"banana", L"apple", L"circus", L"baby", L"key",
    L"cooker", L"bottle", L"keyboard", L"head", L"book",
    L"robe", L"cup", L"mug", L"box", L"dog", L"horse",
    L"potato", L"desk", L"winter", L"life", L"death"
};

gameInfo::gameInfo()
    : bRun{false}, lives{5}
{
    vec = initVec;
}

and a parameterized constructor might look something like this:

gameInfo::gameInfo(bool run, unsigned int lifeCount)
    : bRun{run}, lives{lifeCount}
{
    vec = initVec;
}
</code></pre>

<p><strong>Public Before Private</strong><br>
It might be better to put all the public methods before the private methods in the class definition. The public methods will be used by the consumers and having them at the top makes it easier to find.</p>

<p>It is possible to put the bodies of functions into the headers, this is necessary for template functions, but it is also useful for simple functions such as the getters and setters in gameInfo.</p>

<p>Using the items discussed above, here is an example how gameInfo might be declared in gameInfo.h:  </p>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;

class gameInfo
{
public:
    gameInfo();
    ~gameInfo() = default;

    // Getters
    std::vector&lt;std::wstring&gt; dictionary() const { return vec; };
    bool run() const { return bRun; };
    unsigned int live() const { return lives; };

    // Setters
    void run(bool opt) { bRun = opt; };
    void live(unsigned int opt) { lives = opt; };

private:
    // Main variables
    bool bRun;
    unsigned int lives;

    std::vector&lt;std::wstring&gt; vec;
};
</code></pre>

<p>In the declaration above the constructor and destructor have been added, the private variables are declared but their initialization has been moved into the constructor. The bodies of the simpler functions have been moved from the CPP file to the class declaration and the public interfaces have been moved up.</p>

<p>Putting the keyword <code>const</code> before the body of the function when the function doesn't change any values can improve the performance of the program.</p>

<p>The keyword <code>default</code> in the declaration of the destructor indicates that the compiler should generate a default destructor for this class. This is useful when the class doesn't have resources such as files that need to be closed.</p>

<p><strong>Complexity</strong><br>
Many of the functions in this program are simple, atomic and straight forward (nice work), but both the <code>ask</code> function and the <code>run</code> function in <code>main.cpp</code> might be candidates for simplification into multiple functions.</p>

<p>The program as a whole can be simplified by moving almost all of the functions into the gameInfo class. All the functions that receive <code>info</code> can then access the private members directly and don't require the setter and getter functions. The <code>main()</code> function could be simplified to :</p>

<pre><code>int main() {

    srand((unsigned int)time(NULL));
    gameInfo info;

    info.greet();
    info.run();
}
</code></pre>

<p>The seeding of the random number generator could also be moved to the gameInfo constructor since that is only constructed once.</p>

<p>Most of the functions in gameInfo would then become private functions since they are only required by gameInfo and not other functions or classes.</p>

<p>Examples of simplified functions in gameInfo:</p>

<pre><code>// Returns random word from word list
std::wstring gameInfo::gen()
{
    return vec[rand() % vec.size()];
}

// Checks, well, lives.
void gameInfo::checklives() {
    if (lives &lt; 1) {
        bRun = false;
    }
}
</code></pre>
    </div>