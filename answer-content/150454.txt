<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>1. Reusability:</h1>

<p>First of all, if I read the code it, is clear that the writer applied the basic abstraction principles.</p>

<ul>
<li>The main interface (stack) is clearly visible</li>
<li>Implementation strictly separated from declaration</li>
<li>It is easily possible to modify the implementation without the user of stack noticing the change</li>
</ul>

<p>Things that might be improved:</p>

<ul>
<li>Check pointers that are passed into stackImpl.c because these functions are used by the user of your implementation and you can't trust it. You might even want to check the pointers passed into your list implementations but that's debateable.</li>
<li>Check pointer returned by malloc</li>
<li>Use a function <code>deleteStack(stack *s)</code> to ensure that no memory leaks exist</li>
<li><code>int</code> doesn't have a fixed size, it depends on the architecture, therefore a typedef like <code>uint32_t</code> would make sense here.</li>
<li>You should have a max size for your stack. Of course, your implementation allows "infinite" entries but somewhere is the physical limit. And you could even implement a warning, e.g. "80% full" so that the user gets a warning that she might want to increase the max stack size (just an idea)</li>
<li><code>ARRAY</code> and <code>LINKED_LIST</code> are very generic terms, be more specific.</li>
<li>The <code>#if defined(ARRAY)</code>... <code>#elif...</code> is a bit cumbersome, imagine you have many things to switch on for the implementation of a large project. Then it is just difficult to handle such compiler switches in the compiler statement. There are two solutions for that (maybe more): 1) just define it in list.h which implementation you want to use, but thats problably not what you want. 2) If you want to define in the compiler statement, then keep the name of the implementation the same, e.g. list.c and put them in different folders. </li>
<li>Include guards are missing</li>
</ul>

<h1>2.  Avoiding declaring List multiple times:</h1>

<p>You can use </p>

<pre><code>    #if defined(LINKED_LIST) || defined(ARRAY)
</code></pre>

<h1>Misc:</h1>

<p>Just a few things that I have seen:</p>

<ul>
<li>Keep the style consistent (indentation, brackets)</li>
<li><code>return</code> is not needed when a function doesn't return anything</li>
<li><code>(void*)0</code> why not just use <code>NULL</code>? It's just easier to read and also to write</li>
<li>in <code>createNode</code> <code>newNode-&gt;next = newNode</code> and <code>newNode-&gt;prev = newNode</code> are superfluous.</li>
<li>instead of <code>#if defined(xyz)</code> you can use <code>#ifdef xyz</code>  </li>
</ul>
    </div>