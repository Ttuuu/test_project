<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple of constructs in there that can be improved.</p>

<ul>
<li><code>string.Join("", charArray)</code>, repeated a lot. <code>string</code> has a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.-ctor?view=netframework-4.8#System_String__ctor_System_Char___" rel="nofollow noreferrer">constructor that takes a <code>char[]</code></a>, which is a lot faster. They are both linear time, which your question seems to focus on, but in terms of actual efficiency the difference is nearly two orders of magnitude in some tests (actual impact of course varies).</li>
<li><code>new Stack()</code>, so.. the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.stack?view=netframework-4.8" rel="nofollow noreferrer">old stack</a>, from the .NET 1.1 days? Don't use that one, use <code>Stack&lt;T&gt;</code>. Especially if the things you're putting in them are value types, which would have to be boxed in the old non-generic <code>Stack</code>.</li>
</ul>

<p>For <code>ReverseString_ForEachConcat</code>, I don't agree that the time complexity is O(n). At every step, the old string is copied over into the new string, with something concatenated in front of it. So in the second iteration there is 1 copied character, in the third iteration there are 2 copied characters etc. That's a classic O(nÂ²) pattern.</p>

<p>I think we could also argue about whether or not it takes constant space. The many old versions of the string can disappear quickly, but while the concatenation is happening, both the old string and the result of the concatenation need to exist. In the last iteration, that means that while the final result is being made (the size of which doesn't count), there is an other string in play of nearly the same size, so O(n) worth of auxiliary space.</p>
    </div>