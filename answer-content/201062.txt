<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not too sure about modeling the Membership as a first-class-citizen in Java. The only real information that is held there, is the <code>dateJoined</code> and your API does not even expose a method to query that.</p>

<p>Thus, I must assume, that <code>Membership</code> itself has no value as a "business class" but only as glue to map the underlying idea of a relational database model to Java classes. So, what you present in this solution is basically an ER-model, not a class model.</p>

<p>If all these assumptions are true, my advice is: <strong>don't do this</strong>. Keep your business class model tied to the business layer, and leave the various needs to map this into an arbitrary kind of storage to the storage layer. Otherwise, you leak implementation details into your business code.</p>

<p>When you go for a storage layer at a later time, keep in mind that the popular object-relational mapping frameworks (JPA, Hibernate, ...) will care about the relation table more or less automatically. On the other hand, if you chosse a no-sql database, a relation table does not make sense at all and you need a totally different database design.</p>
    </div>