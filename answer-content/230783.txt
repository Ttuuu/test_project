<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first step in your method is to determine the longest common prefix. Here it would be sufficient to determine the <em>length</em> of the longest common prefix. Building the prefix string itself is not necessary at this point.</p>

<p>The next step is to decrease that length until it divides both string lengths. An explaining comment would be helpful here. We still don't need the prefix string itself, it suffices to decrease the previously determined prefix length.</p>

<p>Finally you determine if the prefix “divides” both strings. At this point we can build the actual <code>prefix</code> string. Again a short comment could be helpful. Instead of the inner loop I would compare substrings (unless that turns out to be too slow):</p>

<pre><code>var prefix = str1.Substring(0, prefixLength);

// Verify that `str1` is a multiple of `prefix`:
for (int i = 1; i &lt; str1.Length / prefixLength; i++)
{
    if (prefix != str1.Substring(i * prefixLength, prefixLength))
    {
        return string.Empty;
    }
}

// Same for `str2` ...
</code></pre>

<p>Note that the loop can start with <code>i = 1</code> because we already now that both strings start with <code>prefix</code>. Since the same logic is applied to both strings I would also consider to move it to a separate <code>IsMultipleOf</code> function.</p>

<p><strong>Performance:</strong> Consider the following example:</p>

<pre><code>str1 = "AAA......A"  //  999 characters
str2 = "AAA......AA" // 1000 characters
</code></pre>

<p>Your method builds a prefix string of 999 characters first, and then removes successively all but one character, because <code>1</code> is the only length that divides both string lengths.</p>

<p>As mentioned above, this can be improved by updating the prefix length only, but one can still do better:</p>

<p>It is not difficult to see that the length of <code>X</code> must be exactly the <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor" rel="nofollow noreferrer">greatest common divisor</a> of the lengths of <code>str1</code> and <code>str2</code> – and that can be determined efficiently with the <a href="https://en.wikipedia.org/wiki/Euclidean_algorithm" rel="nofollow noreferrer">Euclidean algorithm</a>.</p>

<p>The implementation would then look like this:</p>

<pre><code>private static int gcd(int a, int b)
{
    // Your favorite implementation of the Euclidean algorithm...
}

public static string GcdOfStrings(string str1, string str2)
{
    var prefixLength = gcd(str1.Length, str2.Length);
    var prefix = str1.Substring(0, prefixLength);

    // Is it a common prefix?
    if (prefix != str2.Substring(0, prefixLength)) {
        return "";
    }

    // Verify that `str1` is a multiple of `prefix` ...
    // Verify that `str2` is a multiple of `prefix` ...

    return prefix;
}
</code></pre>
    </div>