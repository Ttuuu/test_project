<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Honestly I have no idea what the class is supposed to do. It is not validating anything, there is no input. It just always fails on ID 1 (whatever that means), no matter what. You probably omited too much. And whatever is omited probably deserves a review on its own.</p>

<p>There is no reason to have <code>private $_errors</code>. Change your checks so that the first passes and second fails. Then call validate() twice. The second call will not behave as expected. You better keep it as the method's local variable, or maybe you dont need a variable at all...</p>

<p>Question is why are you returning array of errors, if you only ever return one?
But let's say you have reason, then your errorGenerator is doing too much anyway.</p>

<pre><code>public function validate()
{
  if (check1()) {
    return [$this-&gt;getErrorMessage(1)];
  }
  if (check2()) {
    return [$this-&gt;getErrorMessage(2)];
  }
  return [];
}

private function getErrorMessage(int $id)
{
  return 'an error occurred on ID ' . $id;
}
</code></pre>

<p>The check1, check2 methods represent something that is omited in your code samples...</p>

<p>And actualy you can take it a step further and remove getErrorMessage and inline the messages instead. Specific message for each check. Error message "an error occured on ID xy" is a terrible one. </p>

<p>Another way may be using exceptions, but to me it feels like abuse of exceptions. But I know there are a lot of devs who would disagree.</p>

<p>And last point to say: It's not always possible to squash two lines into one line while retaining qualities like readability. If it was possible, every program (no matter the complexity) could then be written as a well readable one liner ;)</p>
    </div>