<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Focusing on the specific part of the code that handles translations for English, here's a way of doing it with a dictionary and a function table:</p>

<pre><code>english_swaps = {
    # Dictionary of 1:1 word replacements.
    "is": "oy",
    "are": "argh",
    "he": "hana",
    "she": "hana",
    "it": "hana",
    "his": "hami",
    "her": "hami",
    "ham": "ham!",
    "sausage": "sausage!",
    "bacon": "bacon!",
}

english_rules = [
    # List of arbitrary functions to transform a word.
    lambda w: f"{w}eeh" if w[-1] == "y" else None,
    lambda w: f"{w}ah" if w[-3:] == "ing" else None,
    lambda w: f"{w}ey" if w[-2:] == "sh" else None,
    lambda w: w.replace("oo", "uwu") if "oo" in w else None,
    lambda w: english_swaps.get(w, None),
]

def translate(word: str) -&gt; str:
    if language == "English":
        for rule in english_rules:
            # Attempt to apply each rule in turn, using the first one to match.
            translated = rule(word)
            if translated is not None:
                return translated
        return word
    else:
        # ...

print(" ".join(
    translate(w) for w in "he is eating sausage and loving every bit of it".split()
))
# prints: hana oy eatingah sausage! and lovingah everyeeh bit of hana
</code></pre>

<p>You could apply this same pattern to have a dictionary and function table for each language, and put those into another dictionary that maps each language to a function table, so that ultimately you could do something like:</p>

<pre><code>for rule in rules[language]:
   translated = rule(word)
   ... etc ...
</code></pre>
    </div>