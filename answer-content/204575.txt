<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have no experience with <code>Span&lt;T&gt;</code> or <code>Memory&lt;T&gt;</code> so the following is just some general considerations on coding etc.</p>

<hr>

<p>In <code>FakeNetworkStreamRead(...)</code>: why have a internal limit of 5 bytes? Why not let the length of the <code>Span&lt;T&gt;</code> argument determine the maximum bytes to read?</p>

<hr>

<p>Why are you using a <code>Memory&lt;T&gt;</code> as buffer, when reading from the stream?:</p>

<pre><code>Memory&lt;byte&gt; byteMemory = new byte[3];
</code></pre>

<p>Why not just a Span, because you only use it as a such and not holding or collecting any data in it:</p>

<pre><code>Span&lt;byte&gt; byteSpan = new byte[3];
</code></pre>

<hr>

<p>IMO you should change the <code>do {} while(...)</code> loop to a <code>while (...)</code> loop, because, if the stream is empty you do a "lot" of work in the first round trip for no reason:</p>

<pre><code>  int read = 0;

  while ((read = FakeNetworkStreamRead(byteSpan)) &gt; 0)
  {
    ...
  }
</code></pre>

<hr>

<p>With the above in mind I've tried to refactor your code to: </p>

<pre><code>static int FakeNetworkStreamRead(Span&lt;byte&gt; span)
{
  int stop = Math.Min(_position + span.Length, _data.Length);
  int i = 0;

  for (; _position &lt; stop; i++, _position++)
  {
    span[i] = _data[_position];
  }

  return i;
}



static void Main(string[] args)
{
  Span&lt;byte&gt; byteSpan = new byte[3];
  Memory&lt;char&gt; charMemory = new char[1024];

  var charMemoryPos = 0;
  var decoder = Encoding.UTF8.GetDecoder();
  int read = 0;

  while ((read = FakeNetworkStreamRead(byteSpan)) &gt; 0)
  {
    Console.WriteLine($"Read {read} bytes");

    // pass the sliced part of the memory I want to parse, and the part 
    // of the char buffer where I want to write
    decoder.Convert(byteSpan.Slice(0, read),
                    charMemory.Slice(charMemoryPos).Span,
                    false, out int bytesUsed, out int charsUsed, out bool completed);

    // update offsets and counts
    charMemoryPos += charsUsed;
  }

  Console.WriteLine(new string(charMemory.Slice(0, charMemoryPos).Span));
}
</code></pre>

<hr>

<p>In order to flush the <code>decoder</code> state, the <code>do {} while(...)</code> loop is useful anyway:</p>

<pre><code>static void Main(string[] args)
{
  int bufferLength = 3;
  Span&lt;byte&gt; byteSpan = new byte[bufferLength];
  Memory&lt;char&gt; charMemory = new char[1024];

  var charMemoryPos = 0;
  var decoder = Encoding.UTF8.GetDecoder();
  int read = 0;

  do 
  {
    read = FakeNetworkStreamRead(byteSpan);

    decoder.Convert(byteSpan.Slice(0, read),
                    charMemory.Slice(charMemoryPos).Span,
                    read == 0, out int bytesUsed, out int charsUsed, out bool completed);

    Console.WriteLine($"Read {read} bytes -&gt; Used: {bytesUsed} -&gt; Completed: {completed} -&gt; CharUsed: {charsUsed} -&gt; {decoder.FallbackBuffer.Remaining}");

    charMemoryPos += charsUsed;
  } while (read &gt; 0) ;

  Console.WriteLine(new string(charMemory.Slice(0, charMemoryPos).Span);
}
</code></pre>

<p>Here the <code>read == 0</code> argument to <code>decoder.Convert(...)</code> becomes true at the end of the stream, which will flush the state and clears the internal buffer of <code>decoder</code></p>
    </div>