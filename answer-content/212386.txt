<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>About versatility my thought is a separate class to stipulate the different possible rules:</p>

<pre><code>class ValidationRules
{
    public const char HYPHEN = '-';
    public readonly int hyphenCount;
    public readonly bool needUpper;
    public readonly bool needLower;
    public readonly bool needDigit;
    public readonly bool allowSpaces;
    public readonly int minLength;
    public readonly int maxLength;
    /// &lt;summary&gt;
    /// Constructor with min and max length and default rules:
    /// needUpper = true
    /// needLower = true
    /// allowSpaces = false
    /// hyphenCount = 1;
    /// &lt;/summary&gt;
    public ValidationRules(int minLength, int maxLength)
    {
        this.minLength = minLength;
        this.maxLength = maxLength;
        hyphenCount = 1;
        needLower = true;
        needUpper = true;
        needDigit = true;
        allowSpaces = false;
    }
    /// &lt;summary&gt;
    /// Constructor with min and max length and supplied rules:
    /// &lt;/summary&gt;
    public ValidationRules(int minLength, int maxLength, int hyphenCount, bool needUpper, bool needLower, bool needDigit, bool allowSpaces)
    {
        this.minLength = minLength;
        this.maxLength = maxLength;
        this.hyphenCount = hyphenCount;
        this.needLower = needLower;
        this.needUpper = needUpper;
        this.needDigit = needDigit;
        this.allowSpaces = allowSpaces;
    }
}
</code></pre>

<p>the method to validate is still quite simple:</p>

<pre><code>/// &lt;summary&gt;
/// Validate string according to validation rules
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static bool Validate(string input,ValidationRules rules)
{
   if(input.Length &lt; rules.minLength || input.Length &gt; rules.maxLength)
    {
        return false;
    }
   if(!Char.IsLetter(input[0]) || input[input.Length-1] == ValidationRules.HYPHEN)
    {
        return false;
    }
    return input.Count(x =&gt; x == ValidationRules.HYPHEN) &lt;= rules.hyphenCount &amp;&amp; input.All(x =&gt; 
                                            (rules.needUpper &amp;&amp; char.IsUpper(x)) || 
                                            (rules.needLower &amp;&amp; char.IsLower(x)) || 
                                            (rules.allowSpaces &amp;&amp; char.IsWhiteSpace(x)) ||
                                            (rules.needDigit &amp;&amp; char.IsDigit(x)) ||
                                            (x == ValidationRules.HYPHEN));
}
</code></pre>
    </div>