<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>
<p>If the last word is followed by <code>EOF</code>, then a <em>null character</em> is not append nor space made for it. <code>words[sz - 1]</code> will not be a <em>string</em> and <code>strcmp()</code> is <em>undefined behavior</em>.</p>
<p><strong>Simplify <code>main()</code></strong></p>
<p>Suggest a re-write of the <code>main()</code> loop, (which should be in a helper function).</p>
<pre><code>// while ((ch = getc(stdin)) != EOF) {
int ch = ' '; // dummy non-isalnum character
while (ch != EOF) {
  while (!isalnum(ch)) &amp;&amp; ch != EOF) {
    ch = getc(stdin);
  } 
  if (ch == EOF) break;

  // Beginning of new word found, allocate for it.
  new_word(...);
  while (isalnum(ch))) {
    append_letter(ch, ...);
    ch = getc(stdin);
  }
  append_letter('\0', ...);
} 
</code></pre>
<p>Simplifications possible if your care to use <code>do {} while</code> loops.</p>
<pre><code>do {
  do {
     ch = getc(stdin);
   } while (!isalnum(ch)) &amp;&amp; ch != EOF);
   if (ch == EOF) break;

   // Beginning of new word found, allocate for it.
   new_word(...);
   do {
     append_letter(ch, ...);
     ch = getc(stdin);
   } while (isalnum(ch));
   append_letter('\0', ...);
} while (ch != EOF);
</code></pre>
<p><code>main()</code> splits  out the <em>words</em> as <code>words , sz, capacity</code> and has a lot of code for reading.  It has simple calls for sorting and printing.  I'd expect a <code>main()</code> more along this:</p>
<pre><code>int main(void) {
  Words word_list = { 0 };
  if (Words_Read(&amp;word_list)) {
    Words_Sort(&amp;word_list);
    Words_Print(&amp;word_list);
  }
  Words_Free(&amp;word_list);
}
</code></pre>
<p><strong><code>isalpha()</code> vs. <code>isalnum()</code></strong></p>
<p>Unclear why code accepts digits for "words".  I'd expect <code>isalpha()</code> or at least a comment about digits in words.</p>
<p><strong>sizeof type vs. sizeof object</strong></p>
<p>Using the size of the object rather than the size of the type is easier to code right, review and maintain.</p>
<pre><code>// *w = malloc(sizeof(struct Word) * ((*capacity)));
*w = malloc(sizeof **w * (*capacity));

// *c = malloc(sizeof(char) * ((*capacity)));
*c = malloc(sizeof **c * (*capacity));

// qsort(words, sz, sizeof(struct Word), cmp);
qsort(words, sz, sizeof words[0], cmp);
</code></pre>
<p><strong>No need to copy the whole structure</strong></p>
<pre><code>// struct Word left = *(const struct Word *)lhs;
const char *left = ((const struct Word *)lhs)-&gt;signs;
...
// return strcmp(left.signs, right.signs);
return strcmp(left, right);
</code></pre>
    </div>