<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>style nit: </p>

<pre><code>inline static singletons_meta_data singleton_meta_data_node{nullptr, nullptr, nullptr, nullptr, 0, 0};
</code></pre>

<p>Specifying all the member values like this decreases readability. Setting everything to nullptrs doesn't tell the reader anything useful. Either explicitly set the members like <code>._next = nullptr</code>, or better, just let it default construct.</p>

<p>Also, does <code>inline</code> do anything here?</p>

<hr>

<p>Isn't it a problem when static_obj_stack is destroyed? The mutex destructor would be called and nothing else would be able to be use it anymore.  <code>_instance</code>s would call emptyStack which uses <code>static_obj_stack</code>. AFAIK, static destruction order is not guaranteed.</p>

<hr>

<pre class="lang-html prettyprint-override"><code>    [[using gnu: hot]] static T&amp; instance()
    {
        auto f = _getInstance.load();
        return f();
    }
</code></pre>



<p>Can you explain how this works? If two threads enter here, they could both load <code>firstTimeGetInstance</code>. </p>

<p>Then inside that method it looks like it will erroneously throw a circular dependency error, because one thread might set the flag to 1 and the other might test it:</p>

<pre class="lang-html prettyprint-override"><code>        if (!_instance)
        {
            if (singleton_meta_data_node._flags &amp; 0x1)
            {
                throw std::logic_error(std::string{"Error: circular dependency "} + __PRETTY_FUNCTION__);
            }
            std::lock_guard&lt;std::mutex&gt; guard(_mutex);
            if (!_instance)
            {
                singleton_meta_data_node._flags = 0x1;
                _instance                       = std::unique_ptr&lt;T, SpecialDeleter&gt;{new T{}, SpecialDeleter{}};
                ++singletons_counter::global_counter;

                if (!singleton_meta_data_node._p)
                {
                    singleton_meta_data_node._func      = activeDelete;
                    singleton_meta_data_node._p         = (void*)&amp;*_instance;
                    singleton_meta_data_node._func_name = __PRETTY_FUNCTION__;
                    stack::push(&amp;singleton_meta_data_node);
                }
            }
        }
</code></pre>


    </div>