<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From java 8 it is available in the <code>String</code> class the method <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-" rel="nofollow noreferrer">join</a> that achieves the same result of your method <code>stringConcat</code> so instead of:</p>

<pre><code>String k = stringConcat(achat.getCodSociete(), achat.getCodService(), achat.getNumCompte(), achat.getCodCommande());
</code></pre>

<p>You can use <code>String.join</code> with <code>""</code> delimiter:</p>

<pre><code>String k = String.join("", achat.getCodSociete(), achat.getCodService(), achat.getNumCompte(), achat.getCodCommande());
</code></pre>

<p>It is also possibile to avoid <em>forEach</em> and use <code>Map</code> instead but because you are modifying the <code>achats</code> list elements, you have to map every element of the list to a new instance of your class and after you obtain your new list. To achieve this you can define a new copy constructor for the class:</p>

<pre><code>achats.stream()
    .map(original -&gt; {
        String k = //omitted for brevity : see above the code for k
        AchMatiereCompteCommandeAggFullDto copy = new AchMatiereCompteCommandeAggFullDto(original);
        if (map.containsKey(k)) {
            copy.setMntFactureHTLCY(map.get(k).getMntFactureHTLCY());
        }
        return copy;
    }).collect(Collectors.toList()); //&lt;- return the new list 
</code></pre>
    </div>