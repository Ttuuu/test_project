<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General feedback</h2>

<p>I will try to go over some points that can be useful to note. Firstly there are several things I <em>like</em> about your code. Firstly it is very readable. Secondly I like that you split your logic. You also split finding the string and printing it. This is good. With this being said there are always things which could and should be improved</p>

<h2>Semantics</h2>

<p><a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">You should use the <code>if __name__ == "__main__":</code></a> module in your answer. </p>

<pre><code>def fizz_buzz(num):
    if num%3==0 and num%5==0:
        return 'FizzBuzz'

    elif num % 3 == 0:
        return 'Fizz'

    elif num % 5==0:
        return 'Buzz'
    else:
        return num

if __name__ == "__main__":

    for n in range(1,100):
        print(fizz_buzz(n))
</code></pre>

<p>Which makes your code reusable for later. Eg you can call functions from your file in other programs. 
Your <code>else</code> clause at the end of the code is useless. You could have written</p>

<pre><code>    elif num % 5==0:
        return 'Buzz'
    return num
</code></pre>

<h2>Alternatives</h2>

<p>One problem with your code is that you have multiple exit points. Now this is not something to sweat <em>too</em> hard over, and it is not a goal to <em>always</em> try have a single exit. However it can be easier to debug a code with fewer exit points. This is of course much more relevant in longer and more complex code. Though it is a good thing to always have in mind. One way to do this is to define a new variable <code>string</code></p>

<pre><code>def fizz_buzz(num):
    string = ''
    if num%3==0 and num%5==0:
        string = 'FizzBuzz'

    elif num % 3 == 0:
        string = 'Fizz'

    elif num % 5==0:
        string = 'Buzz'

    if string:
       return string
    return num
</code></pre>

<p>The code now only has two exit points however it can still be improved. One key point is that if a number is divisible by <code>3</code> and <code>5</code>, it is divisible by <code>15</code>. So we can gradually build the string, like shown below</p>

<pre><code>def fizz_buzz(num):
    string = ''

    if num % 3 == 0:
        string += 'Fizz'

    if num % 5==0:
        string += 'Buzz'

    if string:
       return string
    return num
</code></pre>

<p>As a last point the <code>return</code> statement could be written using a <a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">terniary conditional operator</a> </p>

<pre><code>return string if string else n
</code></pre>

<p>Which combines the two exit points into a single one. To sumarize</p>

<pre><code>def fizz_buzz(num):
    string = ''
    if num % 3==0: string +='Fizz' 
    if num % 5==0: string +='Buzz'
    return string if string else num

if __name__ == "__main__":

    for n in range(1, 100):
        print(fizz_buzz(n))
</code></pre>

<h2>Closing comments</h2>

<p>Python has a style guide <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> which explains in excruciating detail how to structure your code. I whole heartily recommend skimming through it and follow it. </p>

<p>The problem <code>FizzBuzz</code> is very, very simple. It can be solved in a number of ways using just a simple line. <a href="https://codereview.stackexchange.com/users/27623/syb0rg">Syb0rg</a>, showed one way to write this code</p>

<pre><code>for i in range(1,101): print("Fizz"*(i%3==0) + "Buzz"*(i%5==0) or i)
</code></pre>

<p>You can even shorten this into </p>

<pre><code>i=0;exec"print i%3/2*'Fizz'+i%5/4*'Buzz'or-~i;i+=1;"*100 
</code></pre>

<p>Using some <a href="https://codegolf.stackexchange.com/a/58623/33193">cryptic pythonic voodoo</a>. However as I said in the introductory I <em>like</em> your code, because it is easy to understand. Almost always it is better to have clear, readable code than cryptic code which is a few lines shorter. This of course disregards any speed improvements and such</p>
    </div>