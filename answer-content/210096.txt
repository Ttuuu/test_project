<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are both mutating &amp; returning the value you are passing to the function.  Pick one.   Either return <code>void</code> or return a new array/<code>ArrayList</code> without mutating the input. </p>

<p>Your first <code>shuffle()</code> method requires an <code>ArrayList</code>, yet any <code>Collection</code> which implements the <code>List</code> interface would work, and will work well if it has <span class="math-container">\$O(1)\$</span> get &amp; set complexity.  So consider loosening the type from a concrete type to the <code>List</code> interface.  (It will even work for <code>LinkedList</code>, albeit with horrible performance, but working slowly is arguably better than not being able to work at all.)</p>

<hr>

<p>The value returned by <code>ArrayList&lt;T&gt;::set(int idx, T obj)</code> is the previous contents of that location.  Therefor, the temporary is not necessary.</p>

<pre><code>        T temp = a.get(index);
        a.set(index, a.get(n));
        a.set(n, temp);
</code></pre>

<p>can become:</p>

<pre><code>        a.set(n, a.set(index, a.get(n)));
</code></pre>

<p>or more clearly, just <code>Collections.swap(a, n, index);</code>.</p>

<p>Similarly,</p>

<pre><code>        T temp = a[index];
        a[index] = a[n];
        a[n] = temp;
</code></pre>

<p>can also become <code>Collections.swap(a, n, index);</code>, a similar function which takes a <code>T[]</code> instead of a <code>List&lt;?&gt;</code> as the first argument.</p>

<hr>

<p>Here is an implementation of your "<em>something like <code>K&lt;T&gt;</code> using generics</em>" from the comments.  And no longer coding from the hip, so the Java syntax is actually correct.</p>

<pre><code>MacBook-Pro:~ aneufeld$ jshell
|  Welcome to JShell -- Version 10.0.1
|  For an introduction type: /help intro

jshell&gt; public class ShuffleTest {
   ...&gt;   public static &lt;T,K extends List&lt;T&gt;&gt; K shuffle(Collection&lt;T&gt; a, Supplier&lt;K&gt; supplier) {
   ...&gt;     K dup = supplier.get();
   ...&gt;     dup.addAll(a);
   ...&gt;     Collections.shuffle(dup);  // Or use your shuffle implementation
   ...&gt;     return dup;
   ...&gt;   }
   ...&gt; }
|  created class ShuffleTest

jshell&gt; var orig = List.of("Hello", "world");
orig ==&gt; [Hello, world]

jshell&gt; ArrayList&lt;String&gt; shuffled = ShuffleTest.shuffle(orig, ArrayList&lt;String&gt;::new);
shuffled ==&gt; [world, Hello]

jshell&gt; 
</code></pre>
    </div>