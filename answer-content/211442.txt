<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While @200_success's answer is very good (always use libraries that solve your problem), I'm going to give an answer that illustrates how to think about more general problems in case there isn't a perfect library.</p>

<h3>Use <code>with</code> to automatically close files when you're done</h3>

<p>You risk leaving a file open if an exception is raised and <code>file.close()</code> is never called.</p>

<pre><code>with open(input_file) as in_file:
</code></pre>

<h3>Use the object to iterate, not indices</h3>

<p>Most collections and objects can be iterated over directly, so you don't need indices</p>

<pre><code>with open(input_file) as in_file:
    for line in in_file:
        line = line.strip() # get rid of '\n' at end of line
</code></pre>

<h3>Use data structures to organize your data</h3>

<p>In the end, you want to associate a letter-string with a list of numbers. In python, a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dict</code></a> allows you to associate any piece of data with any other, so we'll use that to associate the letter-strings with a <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>list</code></a> of numbers.</p>

<pre><code>with open(input_file) as in_file:
    data = dict()
    for line in in_file:
        line = line.strip() # get rid of '\n' at end of line
        letters, numbers = line.split(',')
        data[letters].append(numbers)
</code></pre>

<p>Now, this doesn't quite work since, if a <code>letters</code> entry hasn't been seen yet, the call to <code>data[letters]</code> won't have anything to return and will raise a <code>KeyError</code> exception. So, we have to account for that</p>

<pre><code>with open(input_file) as in_file:
    data = dict()
    for line in in_file:
        line = line.strip() # get rid of '\n' at end of line
        letters, number = line.split(',')
        try: # there might be an error
            data[letters].append(number) # append new number if letters has been seen before
        except KeyError:
            data[letters] = [number] # create new list with one number for a new letter-string
</code></pre>

<p>Now, all of the file is stored in a convenient form in the <code>data</code> object. To output, just loop through the <code>data</code></p>

<pre><code>with open(input_file) as in_file:
    data = dict()
    for line in in_file:
        line = line.strip() # get rid of '\n' at end of line
        letters, number = line.split(',')
        try: # there might be an error
            data[letters].append(number) # append new number if letters has been seen before
        except KeyError:
            data[letters] = [number] # create new list with one number for a new letter-string

with open(output_file, 'w') as out_file:
    for letters, number_list in data.items(): # iterate over all entries
        out_file.write(letters + ' ' + ','.join(number_list) + '\n')
</code></pre>

<p>The <code>.join()</code> method creates a string from a list such that the entries of the list are separated by the string that precedes it--<code>','</code> in this case.</p>
    </div>