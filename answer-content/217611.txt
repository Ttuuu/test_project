<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code> for h1 in range (0, 4):
  for h2 in range (h1+1, 5):
   for b1 in range (0, 3):
    for b2 in range (b1+1, 4):
     for b3 in range (b2+1, 5):
      hand_check = []
      hand_check.append(hand[m1])
      hand_check.append(hand[m2])
      hand_check.append(board[b1])
      hand_check.append(board[b2])
      hand_check.append(board[b3])
</code></pre>
</blockquote>

<p>Use <code>itertools</code> for this kind of thing:</p>

<pre><code>for h in itertools.combinations(hand, 2):
  for b in itertools.combinations(board, 3):
    hand_check = list(h) + list(b)
</code></pre>

<p>Also, I don't find <code>hand_check</code> to be a helpful name. In general I expect variable names to be nouns (unless they're Booleans, when predicates make sense), and when I parse <code>hand_check</code> as a noun I find that it's a <code>check</code> modified by <code>hand</code>. The smallest change would be to rename it <code>hand_to_check</code>; I prefer <code>candidate_hand</code>.</p>

<hr>

<blockquote>
<pre><code>      if (hand_check[0].suit == hand_check[1].suit and hand_check[1].suit == hand_check[2].suit and hand_check[2].suit == hand_check[3].suit and hand_check[3].suit == hand_check[4].suit):
</code></pre>
</blockquote>

<p>Ugh. Use <code>set</code>.</p>

<pre><code>if len(set(card.suit for card in hand_check)) == 1:
</code></pre>

<hr>

<blockquote>
<pre><code>      hand_check = sort(hand_check) #Custom sort for my array of objects
      hand_ranks = "".join([str(hand_check[0].rank),str(hand_check[1].rank),str(hand_check[2].rank),str(hand_check[3].rank),str(hand_check[4].rank)])
</code></pre>
</blockquote>



<blockquote>
<pre><code>       control = [dictionary_A[hand_ranks][0],dictionary_A[hand_ranks][1]]
      else:
       control = [dictionary_B[hand_ranks][0],dictionary_B[hand_ranks][1]]
</code></pre>
</blockquote>

<p>Firstly, why the quadruple-lookup? Why not</p>

<pre><code>lookup_table = dictionary_A if only_one_suit else dictionaryB
control = lookup_table[hand_ranks]
</code></pre>

<p>?</p>

<p>Secondly, although Python's string manipulation is quite fast, since you're aiming to microoptimise you should think in terms of integers rather than strings. I'd delve into the fascinating world of <a href="https://en.wikipedia.org/wiki/Perfect_hash_function" rel="noreferrer">perfect hashes</a> to try to get a lookup table which fits into L2 cache, or maybe even L1 with luck (there are only 6188 multisets of 5 ranks, so less than 25 kB of lookup table suffices).</p>

<hr>

<blockquote>
<pre><code>      if first_int:
       best_hand = hand_check
       rank = control
       first_int = False
      elif (int(control[0]) &gt; int(rank[0])):
       rank = control
       best_hand = hand_check       
      elif (int(control[0]) == int(rank[0])):
       if (int(control[1]) &gt; int(rank[1])):       
        rank = control
        best_hand = hand_check      
</code></pre>
</blockquote>

<p>If you initialise <code>rank</code> to <code>[-1]</code> then you should be able to eliminate <code>first_int</code> and simplify this to</p>

<pre><code>      if (control &gt; rank):
        rank = control
        best_hand = hand_check       
</code></pre>

<hr>

<p>Now, I've addressed micro-optimisation above, but the first rule of optimisation is to start by looking at the algorithm.</p>

<blockquote>
  <p>What I need to do is check all arrays formed by 2 items from hand and
  3 items from board, like combination = [Hn,Hm,Bi,Bj,Bk] (100
  combinations in total)</p>
  
  <p>Then I need to compare each one of the combinations against a
  dictionary</p>
</blockquote>

<p>is wrong. What you <strong>need</strong> to do is find the set of five cards formed by 2 cards from the hand and 3 cards from the board which has the highest score.</p>

<p>I'd suggest that you micro-optimise and then benchmark against a major restructuring with the following outline:</p>

<pre><code>for suit in the_four_suits:
  hand_mask = build_mask((card for card in hand if card.suit == suit))
  board_mask = build_mask((card for card in board is card.suit == suit))
  check_royal_flush(hand_mask, board_mask)
  check_straight_flush(hand_mask, board_mask)
  check_flush(hand_mask)

hand_counts = count_by_ranks(hand)
board_counts = count_by_ranks(board)
check_four_of_a_kind(hand_counts)
check_full_house(hand_counts)
...
</code></pre>

<p>The key ideas are to do everything with bit manipulation and to return as soon as you know that no further checks will produce a hand better than the best you've already found. For <code>count_by_ranks</code>, if you allocate three bits per rank then overflow into the next rank is impossible since there are only four suits. So e.g. to check for a four of a kind:</p>

<pre><code>total_counts = hand_counts + board_counts
possible_fours = total_counts &amp; 0x4924924924
# possible_fours indicates ranks where we have all four cards between hand and board
# We take three cards from board, so rule out ranks where all four are in the board
possible_fours &amp;= ~board_counts
# Similarly, rule out ranks where all four are in hand
possible_fours &amp;= ~hand_counts
# And rule out ranks where three are in hand
possible_fours &amp;= ~((hand_counts &lt;&lt; 1) &amp; (hand_counts &lt;&lt; 2))
if possible_fours != 0:
  # We have a four-of-a-kind: just need to extract it
</code></pre>
    </div>