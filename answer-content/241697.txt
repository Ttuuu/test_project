<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>return early</h1>

<p>For the special case, <code>n_max == -1</code>, you can return early</p>

<pre><code>def hexit_60(n_max):
    if n_max == -1:
        return None
</code></pre>

<p>This allows you to simplify the loop a lot</p>

<h1>special case</h1>

<p>the part before the <code>for</code>-loop can be included in the main loop by taking one of the other answers to your <code>int</code> question, and use casting.</p>

<h1>reverse</h1>

<p>The reverse of <code>seq</code> is also the negative. If you extract the <code>(n-1)*[-n]</code> to another variable, you can make this a lot clearer.</p>

<h1><code>np.roll</code></h1>

<p><code>np.hstack((p0[N-2*n:], p0[:N-2*n]))</code> is equivalent to <code>np.roll(p0, 2 * n)</code></p>

<h1>generator</h1>

<p>You can make the <code>hexit_60</code> into a generator, even further simplifying it</p>

<pre><code>def hexit_60_gen(n_max):
    if n_max == -1:
        return
    yield np.zeros(2, dtype=int)[:, None]
    for n in range(1, n_max + 1):
        seq = np.arange(-n, n + 1, dtype=int)
        middle = np.array((n - 1) * [-n], dtype=int)
        p0 = np.hstack((-seq, middle, seq, -middle,))
        p1 = np.roll(p0, 2 * n)
        yield np.vstack((p0, p1))
</code></pre>

<p>This code is a lot clearer to read to me.</p>

<p>It generates the same points:</p>

<pre><code>all(
    np.array_equal(
        hexit_60(n_max), np.hstack(list(hexit_60_gen(n_max)))
    )
    for n_max in range(10)
)
</code></pre>

<h1>get_points</h1>

<p>You need to adapt this slightly:</p>

<pre><code>def get_points_gen(a, n_max):
    vecs = a * np.array([[1.0, 0.0], [0.5, 0.5 * np.sqrt(3)]])
    pairs = list(hexit_60_gen(n_max=n_max))
    if pairs:
        return (np.hstack(pairs)[:, None] * vecs[..., None]).sum(axis=0)
</code></pre>

<p>if <code>pairs</code> is empty, this returns <code>None</code> implicitly.</p>

<p>The one thing I would is replace <code>[0.5, 0.5 * np.sqrt(3)]</code> by</p>

<pre><code>angle = np.pi / 3 # diagonal
[np.cos(angle), np.sin(angle)]
</code></pre>

<p>So you don't have as many magic numbers in the code</p>

<h1>draw_hexagon</h1>

<p>can be simplified with a slight reordering and a <code>continue</code></p>

<pre><code>def draw_hexagon():
    fig = plt.figure()
    for i, n_max in enumerate([-1, 0, 1, 2, 3, 4]):
        ax = fig.add_subplot(2, 3, i+1)
        # plt.subplot(2, 3, i+1)
        ax.set_title('n_max: ' + str(n_max))
        points = get_points_gen(a=1.0, n_max=n_max)
        ax.set_xlim(-4.2, 4.2)
        ax.set_ylim(-4.2, 4.2)
        if points is None:
            continue
        x, y = points
        ax.scatter(x, y)
        ax.plot(x, y, '-k', linewidth=0.5)
        ax.set_aspect('equal')
    plt.show()
</code></pre>

<p>This latest part can be made a bit cleaner, using the principles of clean architecture, but this is good enough, or a bit more parametrized, but this is good enough.</p>

<p>-- </p>

<h1>alternative approach</h1>

<p>Instead of the approach of the <code>hexit_60</code>, you can have a function to assemble the first side of the hexagon, and then apply rotations to this:</p>

<pre><code>ANGLE = np.pi / 3
COS_ANGLE = np.cos(ANGLE)
SIN_ANGLE = np.sin(ANGLE)
ROTATION_MATRIX = [[COS_ANGLE, -SIN_ANGLE], [SIN_ANGLE, COS_ANGLE]]
</code></pre>

<p>Then to get one side, using <code>np.linspace</code> to do the interpolation:</p>

<pre><code>def side_points(n):
    if n == 0:
        return np.array([[0], [0]])
    p0 = np.array([n, 0])
    p1 = n * np.array([COS_ANGLE, SIN_ANGLE])
    return np.linspace(p0, p1, n, endpoint=False).T
</code></pre>

<p>And then the rotations is a simple generator</p>

<pre><code>def rotations(side):
    yield side
    if np.array_equal(side, np.array([[0], [0]])):
        return
    for _ in range(5):
        side = np.dot(ROTATION_MATRIX, side)
        yield side
</code></pre>

<p>Note that this can be easily adjusted to any regular polygon, by adjusting the angle, and passing in the appropriate cosinus, sinus and or rotation_matrix as function parameter instead of using the global</p>

<pre><code>from functools import lru_cache


@lru_cache(None)
def cos_angle(sides):
    return np.cos(2 * np.pi / sides)


@lru_cache(None)
def sin_angle(sides):
    return np.sin(2 * np.pi / sides)


@lru_cache(None)
def rotation_matrix(sides):
    return np.array(
        [
            [cos_angle(sides), -sin_angle(sides)],
            [sin_angle(sides), cos_angle(sides)],
        ]
    )


def side_points(n, sides=6):
    if n == 0:
        return np.array([[0], [0]])
    p0 = np.array([n, 0])
    p1 = n * np.array([cos_angle(sides), sin_angle(sides)])
    return np.linspace(p0, p1, n, endpoint=False).T


def rotations(side, sides=6):
    yield side
    if np.array_equal(side, np.array([[0], [0]])):
        return
    rot = rotation_matrix(sides)
    for _ in range(sides - 1):
        side = np.dot(rot, side)
        yield side


def points(n_max, sides=6):
    return np.hstack(
        list(
            itertools.chain.from_iterable(
                rotations(side_points(n, sides), sides)
                for n in range(n_max + 1)
            )
        )
    )
</code></pre>

<p>Then drawing the polygon is simply:</p>

<pre><code>def draw_polygon(sides=6):
    fig = plt.figure()
    for i, n_max in enumerate([-1, 0, 1, 2, 3, 4]):
        ax = fig.add_subplot(2, 3, i + 1)
        # plt.subplot(2, 3, i+1)
        ax.set_title("n_max: " + str(n_max))
        ax.set_xlim(-4.2, 4.2)
        ax.set_ylim(-4.2, 4.2)
        if n_max &lt; 0:
            continue
        all_points = points(n_max, sides=sides)
        ax.scatter(*all_points)
        ax.plot(*all_points, "-k", linewidth=0.5)
        ax.set_aspect("equal")
    return fig
</code></pre>

<blockquote>
<pre><code>draw_polygon(7)
</code></pre>
</blockquote>

<p><a href="https://i.stack.imgur.com/avnmE.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/avnmE.png" alt="enter image description here"></a></p>
    </div>