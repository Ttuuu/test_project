<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's pretty solid an implementation, I can find only a few spots.</p>

<h3>Database connection</h3>

<p>First and foremost, never a Model should create a database connection. All right now you have only a single model. What if you'd decide to extend it for CDs? Magazines? Add users? How many simultaneous connections will be made from a single script instance? A model should never connect on its own, it should just accept the existing connection as a constructor parameter. </p>

<p>It constitutes quite a problem as there is no database connection to pass into a model in the controller. To solve it, you have to adapt a Dependency Injection Container. </p>

<p>I am yet to learn this approach myself so I cannot provide a ready made code. But examples are plenty. </p>

<p>On a bright side, you could use the same container in order to supply other services for your models, such as logger service, email service, and such. And even twig, so your router won't have to create an instance of a template engine, which is quite embarrassing, if you think of it. </p>

<h3>Duplicated code</h3>

<p>I see a condition to test the request method is duplicated in both the router and the controller. Why? You already determined the method in the router and there is no common code in the GET and POST processing. Why not to create separate functions for them?</p>

<pre><code>public function updateSave($id) {
        $title = $_POST["title"];
        $status = $_POST["status"];

        if (empty($title)) {
            set_flash("Please enter a title.", "error");
            header("Location: /books/update/" . $id);
            exit();
        } elseif (empty($status)) {
            set_flash("Please select a status.", "error");
            header("Location: /books/update/" . $id);
            exit();
        } else {
            $this-&gt;model-&gt;update($title, $status, $id);
            set_flash("Book information updated!", "success");
        }
        header("Location: /books");
        exit();
}
public function update($id) {
    $flash = get_flash();
    destroy_flash();
    $book = $this-&gt;model-&gt;selectById($id);

    if (empty($book)) {
        set_flash("No book found with the corresponding ID to update.", "error");
        header("Location: /books");
        exit();
    }
    echo $this-&gt;view-&gt;render("books.update.twig", ["title" =&gt; "Books - " . $book["title"], "book" =&gt; $book, "flash" =&gt; $flash]);
}
</code></pre>

<h3>Better user experience.</h3>

<p>It is considered a bad practice to feed a user with one error message at a time. Get all errors and show them at once</p>

<pre><code>    $error = '';
    $error .= ($title) ? '' : "Please enter a title.\n";
    $error .= ($status) ? '' : "Please enter a status.\n";

    if ($error) {
        set_flash($error, "error");
        $location = "/books/update/$id";
    } else {
        $this-&gt;model-&gt;update($title, $status, $id);
        set_flash("Book information updated!", "success");
        $location = "/books";
    }
    header("Location: $location");
    exit();
</code></pre>
    </div>