<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the <code>for</code> loop where you mark multiples of a prime number as false, you can start from <code>i*i</code> since primes less than <code>i</code> already marked those multiples.</p>

<pre><code>    for (int j = i * i; j &lt;= n; j += i) {
      is_prime[j] = false;
    }
</code></pre>

<p>**</p>

<p>If you build up the vector of <code>primes</code> as you mark them off, you could use the second <code>for</code> loop to continue from where you left off—<code>sqrtn+1</code>—which would eliminate a few needless <code>is_prime</code> checks:</p>

<pre><code>  VI primes;
  VB is_prime(n, true);
  int sqrtn = std::sqrt(n);

  for (int i = 2; i &lt;= sqrtn; ++i) {
    if (is_prime[i]) {
      primes.push_back(i);

      for (int j = i * 2; j &lt;= n; j += i) {
        is_prime[j] = false;
      }
    }
  }

  for (int i = sqrtn + 1; i &lt;= n; ++i) { // is_prime.size() is n
    if (is_prime[i]) {
      primes.push_back(i);
    }
  }
</code></pre>

<p>**</p>

<p>Just an idea. But vectors have dynamic size, such that once they fill their capacity, they reallocate twice as much memory and then copy over it's data. You could use a <a href="https://en.wikipedia.org/wiki/Prime-counting_function" rel="nofollow noreferrer">prime counting function</a> to create a lower bound for how much space your vector will need to prevent reallocation of memory. Be wary of which prime counting function you use since some will be more expensive than others.</p>
    </div>