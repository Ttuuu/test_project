<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looping using <code>string.length.times.map { |i| … }</code> and <code>length.times do …</code> is OK, but slightly on the awkward side.  I recommend adhering to the convention of writing same-line blocks using <code>{}</code> and line-spanning blocks using <code>do … end</code>.</p>

<p>To extend the key, you can use the string multiplication operator.  (Note that extending the key longer than necessary doesn't do much harm.)</p>

<p>You can also factor out more of the commonality between the <code>encrypt</code> and <code>decrypt</code> functions.</p>

<p>Instead of searching the <code>LETTERS</code> array, I recommend performing arithmetic on ASCII codes.</p>

<pre><code>module Crypto
  module Vigenere
    module_function
    def encrypt(plaintext, key) 
      vigenere(plaintext, key) { |p, k| (p + k) % 26 }
    end

    def decrypt(ciphertext, key) 
      vigenere(ciphertext, key) { |c, k| (c - k + 26) % 26 }
    end

    # Implementation of Vigenere cipher.  The combiner block accepts
    # one character from the text and the corresponding character from
    # the key (encoded as a=0, b=1, ..., z=25), and returns the
    # result using the same numerical scheme.
    def vigenere(text, key, &amp;combiner)
      a = 'a'.ord
      ext_key = key * (text.length / key.length + 1)
      text.chars.zip(ext_key.chars).collect do |t, k|
        (a + combiner.call(t.ord - a, k.ord - a)).chr
      end.join
    end
    private_class_method :vigenere
  end
end
</code></pre>
    </div>