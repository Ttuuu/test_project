<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In reviewing the questions and answers it struck me that one way to simplify things would be to use linked list as the backing data structure instead of a <code>List</code> (which is based on an array).  A <code>LinkedList</code>, allows adding and removing from the "head" in O(1) without concern for an index. Sample code is below.</p>

<p>Additional points:  </p>

<ol>
<li>I agree with the others that a generic <code>Stack&lt;T&gt;</code> would be
preferable. </li>
<li>I also agree that <code>_object</code> would be better as a local variable.</li>
<li>Rather than writing <code>list.Count == 0</code> multiple times, I
created the <code>HasItems</code> property. </li>
<li>Adding the <code>Top</code> property allows the user to "peek" at the stack without popping.</li>
<li>At first I implemented <code>IEnumerable</code> but upon further consideration I realized that I would say that the nature of a <code>Stack</code> is to push and pop. The argument could be made that adding enumeration to it changes it to a different data structure. This prompted me to remove <code>IEnumerable</code> and add <code>ToList()</code>. Now a user can convert it to an <code>IEnumerable</code>, and work with that however they please. I also added a comment about this to the earlier answer. </li>
</ol>

<p>Here is the sample code:</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;

public class App_Stack
{
    public void Run()
    {
        var stack = new Stack();
        Enumerable.Range(1, 10).ToList().ForEach(i =&gt; stack.Push(i));

        while (stack.HasItems)
        {
            Console.WriteLine(((int)stack.Pop()).ToString());
        }
    }
}

public class Stack 
{
    private LinkedList&lt;object&gt; list = new LinkedList&lt;object&gt;();

    public object Top =&gt; list.FirstOrDefault();
    public int Count =&gt; list.Count;        
    public bool HasItems =&gt; Count &gt; 0;

    public void Push(object item) =&gt; list.AddFirst(item);

    ///if stack is empty returns null
    public object Pop()
    {            
        var item = Top;
        if (HasItems)
        {                
            list.RemoveFirst();                
        }
        else
        {
            Console.WriteLine("Stack is empty");
        }

        return item;
    }

    public void Clear() =&gt; list.Clear();

    public List&lt;object&gt; ToList() =&gt; list.ToList();
}
</code></pre>
    </div>