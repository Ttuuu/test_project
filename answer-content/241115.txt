<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>builting <code>min</code></h1>

<pre><code>minVal = float('inf')
for j in c:
    if abs(i-j) &lt; minVal: minVal = abs(i-j)
</code></pre>

<p>can be rewritten using min: <code>min(abs(i-j) for j in c)</code>.</p>

<p>Apart from that, placing the code on the same line as the check looks very unreadable to me.</p>

<p>There is also no need to keep the values in a list, </p>

<pre><code>for i in range(n):
    lst = []
    for j in c:
        lst.append(abs(i-j))
        cityDiff[i] = min(lst)
</code></pre>

<p>can be </p>

<pre><code>max(min(abs(i - j) for j in c) for i in range(n))
</code></pre>

<h1>variable names</h1>

<p><code>i</code> and <code>j</code> are useful variable names as counters. Here you use them as citie and space station. The same goes for <code>c</code>, which are the space stations.Then call em like that:</p>

<pre><code>max(
    min(abs(space_station - city) for space_station in space_stations)
    for city in range(n)
)
</code></pre>

<h1>space stations</h1>

<p>A first improvement I would suggest if the city you want to check is a space station or not. In your naive algorithm you do  <code>m x n</code> checks. This will reduce it by <code>m x m</code>. If you use a set for the space stations, this inclusion check will be quick.</p>

<pre><code>space_station_set = set(space_stations)
max(
    min(abs(space_station - city) for space_station in space_stations)
    for city in range(n) if city not in space_station_set 
)
</code></pre>

<h1>sorting space stations</h1>

<p>If you sort the space stations, you can use this fact.</p>

<pre><code>space_stations = [1, 4, 7]
space_stations_sorted = (
    [float("-inf")] + sorted(space_stations) + [float("inf")]
)
space_station_pairs = (
    (space_stations_sorted[i], space_stations_sorted[i + 1])
    for i in range(len(space_stations) + 1)
)
</code></pre>

<p>This will generate pairs of adjacent space stations. I added the <code>inf</code>s to take care of the edges</p>

<pre><code>list(space_station_pairs)
</code></pre>

<blockquote>
<pre><code>[(-inf, 1), (1, 4), (4, 7), (7, inf)]
</code></pre>
</blockquote>

<p>Then you loop through the cities like this:</p>

<pre><code>one, two = next(space_station_pairs)
distance_max = float("-inf")
for city in range(n):
    if city == two:
        one, two = next(space_station_pairs)
        continue
    distance = min((city-one), (two-city))
    distance_max = max(distance, distance_max)
</code></pre>

<p>This way you only loop once through the cities and twice through the space stations, so you reduced the complexity to <code>O(n)</code>.</p>

<h1>looping only over the space stations:</h1>

<p>The furthest city will always be either in the middle between 2 space stations or at the edges of the map. You can use this fact to</p>

<pre><code>space_stations_sorted = sorted(space_stations)
distance_max = max(
    (two - one) // 2 for one, two in pairwise(space_stations_sorted)
)
distance_max_total = max(
    distance_max, space_stations_sorted[0], n - space_stations_sorted[-1] - 1
)
</code></pre>

<p>this loops only once over the space stations, and leaves the cities untouched.</p>
    </div>