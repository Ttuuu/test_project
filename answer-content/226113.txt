<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a short review;</p>

<ul>
<li>There are 16 unused variables in your code</li>
<li>In production code, don't call <code>console.log</code>, or if you have to because the code runs embedded, use a log function with a severity indication so that you can turn off or reduce logging</li>
<li>You are missing a ton of semicolons</li>
<li>You should jshint.com</li>
<li>You access <code>payload[</code> with <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magical numbers</a>, you should use well named constants instead</li>
<li>You should have lowercase properties, so <code>result.Level</code> -&gt; <code>result.level</code> because that is more idiomatic</li>
<li>You should properly indent your code, you dont indent after <code>if (payload[2] != 0){</code> for example, you can use a beautifier</li>
<li>This does not make sense to me : <code>(lim&amp;2&amp;3)</code> since 2 is <code>10</code> and 3 is <code>11</code>, isn't that check equivalent to <code>(lim&amp;3)</code>? If you can run ECMA6, I would consider binary AND'ing with properly named constants in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates#Binary_numbers" rel="nofollow noreferrer">binary format</a>.</li>
<li><p>This makes even less sense;</p>

<pre><code>//defines SRC major nibble
var src = payload[7]; 
var srssi = payload[7];
result.SRCSRSSI = (src|srssi);
</code></pre>

<p>if <code>payload[7]</code> contains a byte per the initial comment, and you assign that exact same value to both <code>src</code> and <code>srssi</code>, then <code>src|srssi</code> will always be <code>payload[7]</code>. So you can you can replace that code with</p>

<pre><code>result.SRCSRSSI = payload[srssi]; //With srssi being a constant of value 7
</code></pre>

<p>However, if you truly wanted to access the major <a href="https://en.wikipedia.org/wiki/Nibble" rel="nofollow noreferrer">nibble</a>, then you should figure out what a 'major` nibble is because Google does not know. Then you can use <a href="https://stackoverflow.com/a/3756897/7602">this code</a> to access either nibble in that byte.</p></li>
<li><p>This also worries me, I am not sure where this is running, but..</p>

<pre><code>if (temp13 &lt; 32) { 
    result.Temperature3 = temp13;
}else {
    result.Temperature3 = (temp13 - 256);
}    
</code></pre>

<p>Unless this runs on the moon or Mars, it seems more likely that your sensor detects a temperature of 33 degrees than -223 degrees. I would re-read the documentation of the sensor.</p>

<p>Furthermore because you copy pasted that code, you could just put it in a function that called be twice.</p></li>
<li><p>I like the commenting in your code, I think it goes over the top only once;</p>

<pre><code>// check if its right device
if (payload[1] != 00) {
  console.log(" Not TEK 766 payload");
}else {
  // correct sensor payload type &lt;- That comment was too much
  console.log("TEK 766 payload")
}
</code></pre>

<p>I would go for</p>

<pre><code>//Check if it is the right device
console.log((payload[DEVICE]?"":"Not") + "TEK 766 payload");
</code></pre></li>
</ul>
    </div>