<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Cute project ;-)</p>

<hr>

<p>Do you see where copy-paste coding got the better of you?</p>

<blockquote>
<pre><code>if !(1 &lt;= c[5] &amp;&amp; c[5] &lt;= len(rightArms)) {
    return s, errors.New("right arm code out of range")
}
if !(1 &lt;= c[6] &amp;&amp; c[6] &lt;= len(torsos)) {
    return s, errors.New("right arm code out of range")
}
if !(1 &lt;= c[7] &amp;&amp; c[7] &lt;= len(bases)) {
    return s, errors.New("right arm code out of range")
}
</code></pre>
</blockquote>

<p>I meant the mocking jab at "copy-paste coding" is a joke.
While in the above it may be possible to extract common elements and generalize the logic, that would be a slippery slope to over-engineering.
And in any case, in Go, as far as I know, simple code with duplicated logic is preferred over complicated code.</p>

<hr>

<p>I think you could eliminate <code>getLine</code> by converting the rune array to a string with <code>string(line[:])</code>:</p>

<pre><code>func (s Snowman) String() string {
    var result string
    for i, line := range s {
        if i &gt; 0 {
            result += "\n"
        }
        result += string(line[:])
    }
    return result
}
</code></pre>

<p>Of course this simplification with <code>line[:]</code> comes at the price of allocating a new slice. But given the scale of the task at hand, I think that's a reasonable compromise.</p>
    </div>