<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Unless you have a valuable/deliberate reason to use <code>and</code> in your condition statements, I recommend consistently using <code>&amp;&amp;</code>.  Condition logic can sometimes fall prey to <a href="https://www.php.net/manual/en/language.operators.precedence.php#117390" rel="nofollow noreferrer">unintended "precedence" complications</a>.</p>
</li>
<li><p>This whole line is "jacked" (wrong / incorrectly coded):</p>
<pre><code>if ($this-&gt;ValidateDate($testdate[0], false) &amp;&amp; $this-&gt;ValidateDate($testdate[1], false &amp;&amp; strpos($testdate[1], ':') !== false)) {
</code></pre>
<p><code>ValidateDate()</code> only accepts one parameter, but you are passing two (in several instances to be honest).  The second time that you call this method in this line, you omitted a <code>)</code>, so you are effectively doing this:</p>
<pre><code>$this-&gt;ValidateDate(
    $testdate[1],
    false &amp;&amp; strpos($testdate[1], ':') !== false // &lt;-- this, of course, will always be false
    // ...not that the 2nd parameter is ever respected by the method
)
</code></pre>
<p>I <em>think</em> you mean to write the following:</p>
<pre><code>if (strpos($testdate[1], ':') !== false &amp;&amp; $this-&gt;ValidateDate($testdate[0]) &amp;&amp; $this-&gt;ValidateDate($testdate[1])) {
</code></pre>
</li>
<li><p>I don't like the body of the <code>ValidateDate()</code> method at all.</p>
<ul>
<li>It declares <code>$timestamp</code> but never uses it.</li>
<li>It does a falsey check on <code>strtotime()</code>'s return value which can technically return 0.</li>
<li>It uses <code>if</code> and <code>else</code> to explicitly return <code>true</code> and <code>false</code> instead of returning the evaluation itself.</li>
</ul>
<p><br>I recommend that you scrap the method entirely and just call <code>strtotime($string) !== false</code>.  That said, there are LOADS of strings that <code>strtotime()</code> will deem to be a date and/or time expression, so I don't know if this is the right form of validation -- maybe this is a subjective judgement call -- the decision/power is yours.</p>
</li>
<li><p>Regarding this line:</p>
<pre><code>$var_dump = preg_replace(["/\[\"/", "/\"\]/", "/\]/", "/\[/", "/\)\s*\{(\s*\w*)/", "/(\s*\w*)\}(\s*\w*)/", "/=&gt;\s*(\w)/", "/\[\s*\](,)/", "~^ +~m"], ["'", "'", '', '', ') [$1', '$1],$2', ' =&gt; $1', '[]$1', '$0$0'], $var_dump);
</code></pre>
<p>It is far beyond <a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">the recommended character width</a>.  It will make your script easier to read if you can avoid horizontal scrolling.  Write each function parameter on a new line. Better still, write the elements on their own line; not only will this improve readability, it will afford you the space to write inline comments if you wish.  Also, the first two patterns are replaced by <code>'</code> so just combine the patterns with a pipe.  Same advice with the 3rd and 4th patterns.  Something like this:</p>
<pre><code>$var_dump = preg_replace(
     [
         '/\["|"]/',
         "/]|\[/",
         "/\)\s*{(\s*\w*)/",
         "/(\s*\w*)}(\s*\w*)/",
         "/=&gt;\s*(\w)/",
         "/\[\s*](,)/",
         "~^ +~m"
     ],
     [
         "'",
         '',
         ') [$1',
         '$1],$2',
         ' =&gt; $1',
         '[]$1',
         '$0$0'
     ],
     $var_dump
 );
</code></pre>
</li>
<li><p>You are writing a battery of <code>preg_replace_callback()</code> calls on <code>$var_dump</code>.  Generally speaking this looks like a perfect candidate for <a href="https://www.php.net/manual/en/function.preg-replace-callback-array" rel="nofollow noreferrer"><code>preg_replace_callback_array()</code></a>.</p>
</li>
<li><p>I notice that you are making several <code>str_replace()</code> calls in callbacks where the match string cannot possibly have a single quote in it.  These needless calls should be removed -- just pass the value to the <code>GetType()</code> method.</p>
</li>
<li><p>This replacement:</p>
<pre><code>preg_replace("/(NULL)(\r|\n)/", '$1,$2', $var_dump);
</code></pre>
<p>could be written without the captures/references as:</p>
<pre><code>preg_replace("/NULL\K(?=\R)/", ',', $var_dump);
</code></pre>
</li>
<li><p>Pattern&amp;Replacement: <code>"/(\w+\s*\[)$/", '$1]'</code> could be: <code>"/\w+\s*\[$/", '$0]'</code></p>
</li>
<li><p><code>"/\r|\n|&lt;br&gt;/"</code> can be simplified to <code>"/\R|&lt;br&gt;/"</code></p>
</li>
<li><p>I don't see where constants <code>PRES</code>, <code>PREE</code>, and <code>EOL_SYS</code> are defined.</p>
</li>
<li><p>I assume that you have arbitrarily decided to permit a maximum of 5 parameters to be passed into your <code>VarExport()</code> method.  You needn't make such a rigid distinction.  You can liberate the method and eliminate the battery of <code>null !==</code> checks using the splat operator and some native functions.  Check out this <a href="https://3v4l.org/OMZaM" rel="nofollow noreferrer">Demonstration</a>:</p>
<pre><code>class ClassVarsManager
{
    private function VarExportFormat($data) {
        return '*' . $data . '*';
    }

    public function VarExport(...$var) {
        echo PRES , implode(EOL_SYS, array_map([$this, 'VarExportFormat'], $var)) , PREE;
    }
}

define('PRES', '&lt;pre&gt;');
define('PREE', '&lt;/pre&gt;');
define('EOL_SYS', "\n");

$obj = new ClassVarsManager();
$obj-&gt;VarExport('one', 'two', 'three');
</code></pre>
<p>Output:</p>
<pre><code>&lt;pre&gt;*one*
*two*
*three*&lt;/pre&gt;
</code></pre>
</li>
</ol>
<p>Finally, I just want to say good work.  I know that you have been toiling at this task for a while now.  This is such a great way to challenge yourself and learn new skills.</p>
    </div>