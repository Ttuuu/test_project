<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <a href="https://en.wikipedia.org/wiki/Scientific_notation" rel="nofollow noreferrer">Scientific notation</a> your <code>baseValue</code> is called <code>coefficient</code> while <code>eFactor</code> is called <code>exponent</code>. You should use the conventional naming.</p>

<hr>

<p>I would definitely make the type immutable in order to make it behave like any other numerical type - as a constant/literal. It will avoid misunderstandings and minimize errors:</p>

<p>You could define it like:</p>

<pre><code>  [Serializable]
  public struct ScienceNum
  {
    //Should always be between 1 and 9.9999
    private readonly float coefficient;
    private readonly int exponent;

    public ScienceNum(float coefficient, int exponent)
    {
      this.coefficient = coefficient;
      this.exponent = exponent;
    }

    public float Coefficient =&gt; coefficient;
    public int Exponent =&gt; exponent;

    // ...
  }
</code></pre>

<p>You'll then have to modify your operator implementations so they don't make the calculations on the fields of the arguments.</p>

<hr>

<blockquote>
<pre><code>    //Should always be between 1 and 9.9999
    public float baseValue;
</code></pre>
</blockquote>

<p>You should protect against overflow of the coefficient (baseValue) in the constructor:</p>

<pre><code>public ScienceNum(float coefficient, int exponent)
{
  if (coefficient &lt; 1f || coefficient &gt; 9.9999f) throw new ArgumentOutOfRangeException(nameof(coefficient));

  this.coefficient = coefficient;
  this.exponent = exponent;
}
</code></pre>

<hr>

<p>It would be convenient if you implement cast operators for the primitive numerical types (int, float, long, double etc.)</p>
    </div>