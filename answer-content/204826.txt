<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider renaming <code>Food</code> to <code>OrderableItem</code> or something similar.  Among other things, that will remove the cognitive dissonance of making <code>Combo</code> and <code>Drink</code> each a <code>Food</code>.  </p>

<p>In most situations, you would prefer <code>OrderableItem</code> to be an interface rather than a class.  The interface allows you to treat multiple classes as the same type of thing while still getting different behaviors.  Part of the confusion here is that the different things don't actually have different behaviors except for combo.  Burgers, snacks, and drinks are all things that you buy and consume.  A combo is a group of things that you buy and consume.  Only <code>toString</code> differs in behavior.  </p>

<p>You're right in a way.  With the type in <code>Food</code> or <code>OrderableItem</code>, you don't really need to subclass it for this problem.  To make it worth subclassing, you need things that have different behavior.  For example, if you wanted to maintain ingredient inventory, you might subclass them.  Because inventory is handled differently.  Combo should delegate its handling to the items in it.  But burger should update the bun and patty inventory while drink updates the cup and syrup inventory.  Of course, different burgers and drinks may themselves have different inventory behavior, and this treats those as the same.  </p>

<p>If your assignment requires a class, consider making it <a href="https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html" rel="nofollow noreferrer">abstract</a>.  Because you don't want to instantiate <code>OrderableItem</code> (i.e. you never want to say <code>new OrderableItem</code>).  You only want to instantiate its children.  That's essentially the description of an abstract class, a class from which you can inherit but can't instantiate.  </p>

<p>Given the way that you use it, consider moving <code>toString</code> to <code>OrderableItem</code>.  Then you don't have it all over the place.  </p>

<blockquote>
<pre><code>    ArrayList&lt;Food&gt; foodParts = new ArrayList&lt;&gt;();
</code></pre>
</blockquote>

<p>Consider </p>

<pre><code>    List&lt;OrderableItem&gt; items = new ArrayList&lt;&gt;();
</code></pre>

<p>These aren't parts of the food.  They're different items of food (or drink or combo).  </p>

<p>Also, you generally don't make implementations of interfaces as types.  Instead, make the interface (<code>List</code> in this case) the type.  Among other things that makes it easier to change implementations later.  </p>

<p>Same feedback for <code>HashMap</code> and <code>Map</code>.  </p>

<blockquote>
<pre><code>    private String type = "Drink";
</code></pre>
</blockquote>

<p>This could be </p>

<pre><code>    private static final String TYPE = "Drink";
</code></pre>

<p>It's going to be the same for every instance of a given class.  </p>

<p>It is common to make <code>final</code> variables ALL_CAPS but not required.  </p>

<p>See <a href="https://stackoverflow.com/q/2327509/6660678">Stack Overflow</a> for how to make it a field on <code>OrderableItem</code> and still <code>final</code>.  </p>

<p>If you move <code>toString</code> to <code>OrderableItem</code></p>

<blockquote>
<pre><code>    public void internalPrint(){
        System.out.println("#"+this.orderNum+' '+this.type + " ("+this.getPrice()+')');
        for (Food tempFood : this.foodParts) {
            System.out.println("   "+tempFood);
        }
    }
</code></pre>
</blockquote>

<p>This could be </p>

<pre><code>    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder(super.toString());
        for (OrderableItem item : items) {
            builder.append("\n   ").append(item);
        }

        return builder.toString();
    }
</code></pre>

<p>This calls the <code>OrderableItem</code> <code>toString</code> to form the initial string.  </p>

<p>This uses <code>StringBuilder</code> to form a string of indefinite length.  </p>

<p>I don't see any point in saying that the loop variable is temporary, as that should be obvious.  </p>

<p>It is not necessary to use <code>this</code> to access object fields unless there is some ambiguity.  E.g. a local variable with the same name as the field.  You can use it if you find it more readable that way.  It doesn't hurt anything, but it is not necessary in Java.  </p>
    </div>