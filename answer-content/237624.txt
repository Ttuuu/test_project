<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main way to do this faster is to use fewer loops and to do more in each loop. (AFAICT)</p>

<p>loops in there...</p>

<ul>
<li>A (for event)</li>
<li>A.1 (make team pairs)</li>
<li>A.2 (make dgen)</li>
<li>A.3 (for team, result in event)</li>
<li>A.3.1.1 (for key in pairs)</li>
<li>A.3.1.2 (sum)</li>
<li>A.4 (for pair diff)</li>
</ul>

<p>You have a lot more flexibility if you use the <code>for</code> loop instead of mostly comprehensions and permutations. And, permutations is wasteful, here, (as discussed, below) because it prevents a few optimisations.</p>

<p>A key change is we can do A vs B and B vs A in the same pass of the loop. So, we can change our loop from "for each team go through all teams" to "for each team go through all following teams". It's a big improvement.</p>

<p>For the line-up A, B, C, D, our iterations look like:</p>

<ul>
<li>AB &amp; BA</li>
<li>AC &amp; CA</li>
<li>AD &amp; DA</li>
</ul>

<p>.</p>

<ul>
<li>BC &amp; CB</li>
<li>BD &amp; DB</li>
</ul>

<p>.</p>

<ul>
<li>CD &amp; DC</li>
<li>(done)</li>
</ul>

<p>So, the algorithm might end up something like (in pseudo code):</p>

<pre><code>past_score_differences = defaultDict(float)

for each event:

    team_outcomes = defaultDict(float)

    teams_len = len(teams in event)
    for i in range(teams_len - 1):
        home_team = teams[i]
        home_score = scores[i]

        for j in range(i+1, teams_len):
            away_team = teams[j]
            away_score = scores[j]

            team_outcomes[home_team] += past_score_differences[(home_team, away_team)]
            team_outcomes[away_team] += past_score_differences[(away_team, home_team)]

            past_score_differences[(home_team, away_team)] += home_score - away_score
            past_score_differences[(away_team, home_team)] += away_score - home_score

        list_zz.append(team_outcomes[home_team])

    # the last team doesn't go through the outer loop
    list_zz.append(team_outcomes[teams[-1]])
</code></pre>

<p>Still a lot of loops, but far fewer and with fewer iterations for the innermost loop.</p>

<p>If there is a lot of consistency in the team IDs, then you might consider not using a tuple as the key but instead using a dict within a dict, e.g.</p>

<pre><code>example_past_differences = {
    'A': {
        'B': 10,
        'C': 11,
        'Etc...': 99
    }
}

# later, when accessing

home_team = ...
home_score = ...
home_past_differences = past_score_differences[home_team]
for ...
    away_past_differences = past_score_differences[away_team]
    ...
    team_outcomes[home_team] += home_past_differences[away_team]
    team_outcomes[away_team] += away_past_differences[home_team]
</code></pre>

<p>One last thing, your variable names are not easy to understand. I made mine way too long for accesibility to understand, but generally I think the guidance in these slides is very useful: <a href="https://talks.golang.org/2014/names.slide#1" rel="nofollow noreferrer">https://talks.golang.org/2014/names.slide#1</a></p>
    </div>