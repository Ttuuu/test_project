<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally the code is well written, there are only a few items that need commenting on.</p>
<h2>Avoid Using Namespace <code>std</code></h2>
<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier <code>cout</code> you may override within your own classes. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<h2>Use Braces Around Single Statements in Program Flow</h2>
<p>Primarily for maintenance reasons it is a good habit to create code blocks within if statements, else clauses and within loops. Many bugs have been created during maintenance when one or more statements was added to an if statement or a loop.</p>
<p>From this code:</p>
<pre><code>    for (const auto&amp; a: averages) cout &lt;&lt; a &lt;&lt; " ";
</code></pre>
<p>Would be better as</p>
<pre><code>    for (const auto&amp; a: averages) {
        std::cout &lt;&lt; a &lt;&lt; " ";
    }
</code></pre>
<p>Then if someone needs to add a statement to the for loop at some point it is quite simple.</p>
<h2>This Code Could Be Simplified</h2>
<pre><code>    vector&lt;double&gt; res (nums.size() - k + 1);
        ...

    size_t res_index = 0;
    res.at(res_index) = curr_sum / k;

    while (right_it != nums.end()) { 
        ...
        res.at(++res_index) = curr_sum / k;      
        ...  
    }
</code></pre>
<p>It's not clear why it was necessary to initialize the <code>res</code> vector to the proper size in the previous code. Since vectors are variable sized they don't need to be initialized with a size.</p>
<pre><code>    std::vector&lt;double&gt; res;
        ...

    res.push_back(curr_sum / k);

    while (right_it != nums.end()) { 
        ...
        res.push_back(curr_sum / k);      
        ...  
    }
</code></pre>
<p>removes one variable and achieves the same result.</p>
    </div>