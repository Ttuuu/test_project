<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good implementation. Few minor bits:</p>

<ol>
<li><p>Mark <code>_httpWebRequest</code> as <code>readonly</code> as you're not assigning (nor want anyone to assign) to it outside of the constructor.</p></li>
<li><p>Extract an interface (<code>IHttpRequestBuilder</code>) and have each method return that rather than the concrete class. This will allow for additional implementations or mocking for unit testing other parts of your system.</p>

<p>2a. The same advice as above goes for <code>WebRequestBodyBuilder</code>.</p></li>
<li><p><code>PostAsync</code> is already an <code>async</code> method, so continue using async implementations like <code>WriteAsync()</code> instead of <code>Write()</code>.</p></li>
<li><p>Create constructors that take <code>Uri</code> parameters as well.</p></li>
</ol>

<p>Results:</p>

<p><strong>IHttpRequestBuilder.cs</strong></p>

<pre><code>public interface IHttpWebRequestBuilder
{
    IHttpWebRequestBuilder WithMethod(string method); // Set the method, "GET", "POST", etc. The default is "GET".

    IHttpWebRequestBuilder Accepts(string accept); // Set the "Accept" header.

    IHttpWebRequestBuilder WithContentType(string contentType); // Set the "Content-Type" header.

    IHttpWebRequestBuilder WithCookies(CookieContainer container); // Set a cookie container.

    IHttpWebRequestBuilder AllowAutoRedirect(bool allow); // Set AllowAutoRedirect

    IHttpWebRequestBuilder WithReferer(string referer); // Set referer.

    IHttpWebRequestBuilder WithCustomHeader(string name, string value); // Add a custom header.

    Task&lt;IHttpWebRequestBuilder&gt; PostAsync(IWebRequestBodyBuilder bodyBuilder); // Takes an object of WebRequestBodyBuilder (which just makes a string like "param1=value1&amp;param2=value2&amp;...."

    HttpWebRequest Build(); // Returns the actual HttpWebRequest
}
</code></pre>

<p><strong>HttpRequestBuilder.cs</strong></p>

<pre><code>public class HttpWebRequestBuilder : IHttpWebRequestBuilder
{
    private readonly HttpWebRequest _httpWebRequest; // The object that will be built.
    public HttpWebRequestBuilder(string url) : this(url, Constants.FirefoxUserAgent) // Use firefox user-agent by default (Constants is a static class that has FirefoxUserAgent constant).
    {
    }

    public HttpWebRequestBuilder(Uri uri) : this(uri, Constants.FirefoxUserAgent) // Use firefox user-agent by default (Constants is a static class that has FirefoxUserAgent constant).
    {
    }

    public HttpWebRequestBuilder(string url, string userAgent) : this(new Uri(url), userAgent)
    {
    }

    public HttpWebRequestBuilder(Uri uri, string userAgent)
    {
        _httpWebRequest = WebRequest.CreateHttp(uri); // Create an HttpWebRequest.
        _httpWebRequest.UserAgent = userAgent; // Set the user-agent.
        _httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate; // Set automatic decompression. I want this value for all requests.
    }

    public IHttpWebRequestBuilder WithMethod(string method) // Set the method, "GET", "POST", etc. The default is "GET".
    {
        _httpWebRequest.Method = method;
        return this;
    }

    public IHttpWebRequestBuilder Accepts(string accept) // Set the "Accept" header.
    {
        _httpWebRequest.Accept = accept;
        return this;
    }

    public IHttpWebRequestBuilder WithContentType(string contentType) // Set the "Content-Type" header.
    {
        _httpWebRequest.ContentType = contentType;
        return this;
    }

    public IHttpWebRequestBuilder WithCookies(CookieContainer container) // Set a cookie container.
    {
        _httpWebRequest.CookieContainer = container;
        return this;
    }

    public IHttpWebRequestBuilder AllowAutoRedirect(bool allow) // Set AllowAutoRedirect
    {
        _httpWebRequest.AllowAutoRedirect = allow;
        return this;
    }

    public IHttpWebRequestBuilder WithReferer(string referer) // Set referer.
    {
        _httpWebRequest.Referer = referer;
        return this;
    }

    public IHttpWebRequestBuilder WithCustomHeader(string name, string value) // Add a custom header.
    {
        _httpWebRequest.Headers.Add(name, value);
        return this;
    }

    public async Task&lt;IHttpWebRequestBuilder&gt; PostAsync(IWebRequestBodyBuilder bodyBuilder) // Takes an object of WebRequestBodyBuilder (which just makes a string like "param1=value1&amp;param2=value2&amp;...."
    {
        byte[] buffer = Encoding.UTF8.GetBytes(bodyBuilder.ToString());
        using (var reqStrm = await _httpWebRequest.GetRequestStreamAsync()) // Write the body in the request stream.
        {
            await reqStrm.WriteAsync(buffer, 0, buffer.Length);
        }
        return this;
    }

    public HttpWebRequest Build() // Returns the actual HttpWebRequest
    {
        return _httpWebRequest;
    }
}
</code></pre>

<p><strong>IWebRequestBodyBuilder.cs</strong></p>

<pre><code>public interface IWebRequestBodyBuilder
{
    IWebRequestBodyBuilder SetKeyValuePair(string key, string value);
}
</code></pre>

<p><strong>WebRequestBodyBuilder.cs</strong></p>

<pre><code>public class WebRequestBodyBuilder : IWebRequestBodyBuilder
{
    private readonly StringBuilder _stringBuilder = new StringBuilder();

    public IWebRequestBodyBuilder SetKeyValuePair(string key, string value)
    {
        if (string.IsNullOrWhiteSpace(key))
            throw new ArgumentException($"Argument {nameof(key)} can't be null or whitespace."); // key can't be null, but value CAN!

        if (!string.IsNullOrWhiteSpace(_stringBuilder.ToString()))
            _stringBuilder.Append("&amp;"); // First call shouldn't add "&amp;" in the first.
        _stringBuilder.Append($"{WebUtility.UrlEncode(key)}={WebUtility.UrlEncode(value)}");
        return this;
    }

    public override string ToString()
    {
        return _stringBuilder.ToString(); // ToString is used in the HttpWebRequestBuilder, in the PostAsync method.
    }
}
</code></pre>
    </div>