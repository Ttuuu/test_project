<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll take a more holistic approach than mickmackusa, he already talked about a lot of details.</p>

<p>I don't see any problem with the fact that you use an AJAX call to verify user credentials, and login. There's no real difference, security wise, when I compare this with a normal form submission. Any hacker will simply bypass your Javascript and call <code>login.inc.php</code> directly.</p>

<p>Your PHP code seems to cover the basics well. There are prepared statements, you use hashed passwords and <code>password_verify()</code>, and you don't show system errors to the user (do read the comment by Your Common Sense; 'regarding the topmost line'). But to me the code still looks a bit unorganized.</p>

<p>For instance, you open and close the database connection. I'm sure you'll have other PHP pages where this is needed. It doesn't make sense to have the connection details in every PHP page. I would include another PHP file with functions to open and close the database, so I can simply say: <code>openDatabase();</code>. Then, if I have to change the password of the database, I can change it in one location.</p>

<p>There's also no harm in using functions for other things in your code. It makes it much easier to read:</p>

<pre><code>if (hasLoginDetails($parameters)) {
    list($username, $password) = getLoginDetails($parameters);
    $database = openDatabase();
    if ($user = getUserInfoByName($database, $username)) {
        if (password_verify($password, $user['password'])) {
            setSessionUser($user);
            echo("pass");
        } else {
            echo("Wrong password");
        }
    }
    else {
        echo("No records found with inserted inputs");
    }
    closeDatabase($database);
}
</code></pre>

<p>I'm not saying this is the right way to do it, but it is <em>better</em>. Note that I have left out all your <code>exit()</code>. They were used wrongly, because they would have, theoretically, prevented the database to close. Of course, it will close automatically when the script exits, but did you know that?</p>

<p>My point is that structuring your code is very important. It helps you spot problems, and makes it easier to change the code later on.</p>

<p>There's also some, but not much, confusion when it comes to names. An <code>inserted_id</code> seems to have the same content as <code>account_name</code>. That's not obvious. Why not give these more similar names?</p>

<p>Now that I have slightly shortened the code I notice you give two different messages back to the user: <em>"Wrong password"</em> and <em>"No records found with inserted inputs"</em>. That means that I can start guessing user names first, and when I get it right, I will get feedback telling me so. That's half my job, of breaking in, done. In other words: These two messages should always be the same. <strong>Don't give a hacker any information.</strong></p>

<p>As to the security. There are <em>no other</em> protection mechanisms against hacking in your system. It would happily accept a simple brute force attack. Once I have a valid user name I can try my long list of passwords as fast as your server will process them. Even a simple <code>sleep(4)</code>, when the wrong credentials were supplied, will slow this down enormously. I normally give users five changes to enter their credentials and then block them for a longer time (15 minutes?). The user needs to be told this, of course, otherwise real users might find themselves locked out because they simply tried to often. Something like: <em>"You have 3 attempts left before your account will be blocked."</em>. You should not block an account too long, otherwise someone can block users intentionally. Be careful with this. Another strategy is to make failed logins, by the same person, slower and slower, the more they try it. Anything that will make a brute force attack impossible, but not hinder normal users.</p>

<p>Your system is also lacking the usual 'I forgot my password' mechanism. Because users <em>will</em> forget their password. By not having this mechanism, users will have to correspond with you to get it, which can be very slow, and possibly less secure.</p>

<p>Adding features, like the ones I mentioned above, will further increase the complexity of your code, hence the importance of good structuring to keep it readable.</p>
    </div>