<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>

<p>When deleting a node, you have this code:</p>

<blockquote>
<pre><code>int successor = findIndex(A[A[index].next].data);
int predecessor = findIndex(A[A[index].prev].data);
</code></pre>
</blockquote>

<p>This is wrong because if there are nodes with the same value in your list, you will find the first occurrence and not the one that you actually want.  For example, if your list were:</p>

<pre><code>1 2 1 3 2
</code></pre>

<p>and you were deleting the 3, you would end up modifying the wrong successor and predecessor nodes.  The correct code is actually much simpler:</p>

<pre><code> int successor   = A[index].next;
 int predecessor = A[index].prev;
</code></pre>

<h3>Bug 2</h3>

<p>If you delete the tail node, you need to update the <code>tail</code> variable.  Right now, you don't do that, so your next insert will do something bad.</p>

<p>Furthermore, your check to see if you are deleting the tail node is wrong.  This check:</p>

<blockquote>
<pre><code>if (index == slot) {    
    // Deleting the last element in the list
</code></pre>
</blockquote>

<p>should be:</p>

<pre><code>if (index == tail) {    
    // Deleting the last element in the list
</code></pre>

<h3>Bad choice of terminator</h3>

<p>You use 0 to terminate your list, but 0 is a valid index in your array.  This causes you to do a hack to skip over index 0 when finding a free slot.  If you used -1 as your terminator, you wouldn't have that problem.</p>

<h3>Inefficient free slot finder</h3>

<p>Currently, every time you add a node, you need to scan the entire array looking for the next free slot.  If you kept all your free nodes in a free list, you could find that free slot instantly.</p>

<p>At initialization time, you set up all your nodes in a single list, and keep the head of that list in a variable <code>freeListHead</code>.  Then when you need a free node, you pop the head off the free list.  When you delete a node, you push the deleted node onto the front of the free list.</p>

<h3>Prev pointer unnecessary</h3>

<p>With the given problem statement, there is no need to make your list a doubly linked list.  Generally, doubly linked lists are useful when you want to delete a node given the node itself, but you never have to do that.</p>

<p>But since you decided to use a doubly linked list, you could do better than what you've done.  Your insertion and removal code would be simpler if you made the list a circular list with <code>head</code> pointing at the first element.  If you did that, it would eliminate a lot of special cases, especially with deletion.  By circular list, I mean that the tail node's <code>next</code> points at the head node, and the head node's <code>prev</code> points back at the tail node.</p>

<h3>Hardcoded limit</h3>

<p>It doesn't seem very good to limit yourself to 100 nodes.  It would be better if you used <code>malloc()</code> to allocate the first 100 nodes, and then if you ran out of space and needed more nodes, you could call <code>realloc()</code> as necessary.  Make sure you use a good reallocation strategy such as doubling the limit every time.</p>
    </div>