<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use f-strings</h2>

<pre><code>"b" + str(i)
</code></pre>

<p>can be</p>

<pre><code>f'b{i}'
</code></pre>

<h2>Don't make inner lists</h2>

<pre><code>sum([x[1] for x in sinks])
</code></pre>

<p>should be</p>

<pre><code>sum(x[1] for x in sinks)
</code></pre>

<h2>Avoid loop flags</h2>

<pre><code>weights_match = False
while not weights_match:
    # ...
    weights_match = sum([x[1] for x in sources]) == sum([x[1] for x in sinks])
</code></pre>

<p>should be:</p>

<pre><code>while True:
   # ...
   if sum(x[1] for x in sources) == sum(x[1] for x in sinks):
      break
</code></pre>

<p>(C has a do-while, but Python doesn't.)</p>

<h2>Replace your lambda</h2>

<p>Don't repeat this lambda:</p>

<pre><code>lambda x: x[1]
</code></pre>

<p>Create it once as:</p>

<pre><code>from operator import itemgetter
second = itemgetter(1)
</code></pre>

<h2>Add type hints</h2>

<pre><code>def create_sample(source_count=5000, sink_count=200):
</code></pre>

<p>becomes, at a guess,</p>

<pre><code>def create_sample(source_count: int = 5000, sink_count: int = 200) -&gt;
    (list, list):
</code></pre>

<p>You can get fancier with typed lists, but this is the bare minimum.</p>
    </div>