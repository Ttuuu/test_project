<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unnecessary use of template arguments</h1>
<p>In the functions <code>BitReader::Read()</code> and <code>BitWrite::Write()</code>, the <code>bit_size</code> should just be a normal function argument instead of a template argument:</p>
<pre><code>template&lt;typename value_t&gt;
void Write(size_t bit_size, value_t value) {
    ...
}

...

writer.Write(4, 15);
</code></pre>
<h1>Restrict the allowed value types to integers</h1>
<p>You currently allow any type for <code>value_t</code>. This can be problematic though. What happens if I do:</p>
<pre><code>writer.Write(4, 3.1415);
</code></pre>
<p>Or something like:</p>
<pre><code>int a = 15;
writer.Write(4, &amp;a);
</code></pre>
<p>Either explicitly restrict the allowed types to integers using <a href="https://en.cppreference.com/w/cpp/types/enable_if" rel="nofollow noreferrer"><code>std::enable_if</code></a>:</p>
<pre><code>template &lt;typename value_t, std::enable_if_t&lt;std::is_integral&lt;value_t&gt;::value&gt;::type&gt;
void Write(size_t bit_size, value_t value) {
    ...
}
</code></pre>
<p>Or don't use template at all, and just use <code>uint64_t</code> unconditionally, and rely on implicit casts between different size integers:</p>
<pre><code>void Write(size_t bit_size, uint64_t value) {
    ...
}
</code></pre>
<h1>Use <code>memcpy()</code> to avoid unaligned reads and writes</h1>
<p>The following code has undefined behavior in C++, and might cause crashes on platforms that do not allow unaligned reads and writes to memory:</p>
<pre><code>*(value_t *)&amp;m_Buffer[byte_offset]
</code></pre>
<p>Apart from the alignment issue, the above statement might cause data to be read or written beyond the end of <code>m_Buffer</code>.</p>
<p>The correct way to do this is to use <code>memcpy()</code> to move data from the buffer into a <code>value_t</code> variable, and when moving data from a <code>value_t</code> variable to the buffer. While that might seem less optimal, the compiler will most likely be able to convert it back to an unaligned read or write on platforms that support it. So for example in <code>Read()</code>, you should write something like:</p>
<pre><code>value_t value = 0;
memcpy(&amp;value, &amp;m_Buffer[byte_offset], std::min(sizeof value, m_BufferSize - byte_offset));
value &amp;= Mask(relative_offset, bit_size);
value &gt;&gt;= relative_offset;
return value;
</code></pre>
<p>Instead of updating <code>m_Buffer()</code> directly in every call to <code>Read()</code> and <code>Write()</code>, you can also consider having a <code>uint64_t</code> staging buffer. For example, in <code>Write()</code>, you can add bits to the staging buffer until it is full, and then copy the staging buffer into <code>m_Buffer</code>, advance <code>byte_offset</code> by <code>sizeof(uint64_t)</code> and then continue from an empty staging buffer.</p>
<h1>Consider big-endian platforms</h1>
<p>Your code assumes that integers are stored in little-endian format. If you need to support big-endian platforms, then your code is not correct.</p>
<h1>Consider asserting that the <code>value</code> does not exceed the given <code>bit_size</code></h1>
<p>You might want to assert that the <code>value</code> passed to <code>Write()</code> fits in the given <code>bit_size</code>. You could throw an exception if it doesn't, or just add an <code>assert()</code> statement that helps debugging but doesn't impact performance on release builds:</p>
<pre><code>void Write(size_t bit_size, uint64_t value) {
    assert(bit_size &lt;= 8 * sizeof value);
    assert(bit_size == 8 * sizeof value || value &gt;&gt; bit_size == 0);
    ...
}
</code></pre>
<h1>Shifting <code>uint64_t</code> by 64 is undefined behavior</h1>
<p>In C++, you can only reliably shift a value by up to <code>8 * sizeof(value) - 1</code> bits. That means you cannot shift an <code>uint64_t</code> by 64. Currently, your code has undefined behavior if you <code>Read()</code> or <code>Write()</code> 64 bits in one go.</p>
<h1>Reading or writing more than 57 bits at a time might fail</h1>
<p>Your code does not handle reading or writing more than 57 bits at a time correctly. Consider that <code>Mask()</code> generates a bitmask for the given <code>size</code>, and then shifts it by <code>offset</code>. Depending on what value came before it, <code>offset</code> can be between 0 and 7. So if <code>offset</code> is 7 and you want to write a 58-bit value to the buffer, you get a mask larger than an <code>uint64_t</code> can hold.</p>
<h1>Unnecessary use of <code>inline</code></h1>
<p>Member functions that are defined inside a class declaration are automatically <code>inline</code>, so there is no need to specify that explicitly.</p>
<h1>Avoid <code>std::endl</code></h1>
<p>You should use <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n"><code>\n</code> instead of <code>std::endl</code></a>. The latter is equivalent to <code>\n</code>, but forces a flush of the output stream, which can be bad for performance.</p>
    </div>