<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <code>enum</code>s to give names to numbers</h1>

<p>It would be great if you could write <code>PAWN</code> instead of <code>1</code>, since it will be much clearer what you are doing in the code. The way to do this is to declare an <code>enum</code> for all possible chess piece types:</p>

<pre><code>enum Type {
    NONE = 0,
    PAWN,
    ROOK,
    BISHOP,
    KNIGHT,
    QUEEN,
    KING,
};
</code></pre>

<p>I added <code>NONE</code> as well, it will be useful later to indicate tiles without a piece on them.
Once you have done that, instead of <code>if (piece == 1)</code>, you can write <code>if (piece == PAWN)</code>. Similarly, do this for the color of pieces:</p>

<pre><code>enum Color {
    BLACK = 1,
    WHITE,
};
</code></pre>

<h1>Define a <code>struct</code> to combine chess piece type and color</h1>

<p>Chess piece type and color go together, so it makes sense to make a struct out of this:</p>

<pre><code>struct Piece {
    enum Type type;
    enum Color color;
};
</code></pre>

<p>Now we have that, we can combine the arrays <code>board</code> and <code>blackWhite</code> into one:</p>

<pre><code>struct Piece board[8][8];
</code></pre>

<p>Now, instead of writing <code>color = blackWhite[y][x]</code>, you can write <code>color = board[y][x].color</code>.</p>

<p>Note, you could have made a single <code>enum</code> that listed both the black and white pieces (with names like <code>WHITE_ROOK</code>), and avoid having to create <code>struct Piece</code>, but indeed in your code it makes sense to have piece type and color as separate elements.</p>

<h1>Don't use nested functions</h1>

<p>Nested functions are a GCC extension, but are not standard C. This means your code is not portable. Just move the functions <code>towerMoves()</code> and <code>runnerMove()</code> outside of <code>getValidMoves()</code>. Of course, now you need to pass <code>x</code> and <code>y</code> as arguments to these functions, and they should return the value of <code>canMove</code>.</p>

<h1>Use <code>switch</code>-statements where appropriate</h1>

<p>Instead of having a long list of <code>if</code>-statements to check for each possible value of <code>piece</code> in <code>getValidMoves()</code>, write a <code>switch</code>-statement, like so:</p>

<pre><code>switch (piece) {
case PAWN:
    ...
    break;
case ROOK:
    towerMoves();
    break;
case ...:
}
</code></pre>

<p>Not only does this improve the structure of your code, the compiler will actually check that you implemented a <code>case</code>-statement for each possible value of <code>piece</code>, and will warn you if you missed one.</p>

<h1>Move more code into separate functions</h1>

<p><code>getValidMoves()</code> is a very long function, even with the nested functions moved out of it. It makes sense to also make separate functions for getting the valid moves for each of the other chess piece types. This way, <code>getValidMoves()</code> will be much shorter and clearer to read.</p>

<h1>Be consistent when naming functions and variables</h1>

<p>Decide whether you want to call it a rook or a tower, a bishop or a runner. Prefer using the official names for chess pieces.</p>

<p>You are also not consistent with other things; for example one functions is <code>towerMoves()</code>, another <code>runnerMove()</code> without the s. These functions are also just specializations of <code>getValidMoves()</code>. So be more consistent, and name the first two <code>getValidRookMoves()</code> and <code>getValidBishopMoves()</code>.</p>

<h1>Add whitespaces to make the structure of your code more clear</h1>

<p>Add empty lines between functions, and between major sections within functions. This helps make the structure of your code more clear.</p>

<h1>Avoid using <code>system()</code></h1>

<p>Don't call <code>system()</code> for things you can just as well do within C itself. Using <code>system()</code> has a huge overhead, and it is not portable. To clear the screen, you can use ANSI escape codes, which will work in most terminals. See: <a href="https://stackoverflow.com/questions/37774983/clearing-the-screen-by-printing-a-character">https://stackoverflow.com/questions/37774983/clearing-the-screen-by-printing-a-character</a></p>
    </div>