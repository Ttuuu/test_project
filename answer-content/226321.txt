<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I had a similar problem and independently came up with a very similar solution, which I suppose at least confirms that this isn't a totally crazy idea. After seeing your solution, I incorporated parts of it into mine.</p>

<p>First, some comments:</p>

<pre class="lang-css prettyprint-override"><code>  height: 99999px;
</code></pre>

<p>This is risky, to say the least. I wouldn't rely on all browsers doing sensible things with such large divs; they may attempt to render the whole thing. Better to set the size to something realistic (maybe a couple of thousand pixels), rather than one hundred thousand pixels high. For my use-case, 2000 pixels was more than enough.</p>

<pre class="lang-css prettyprint-override"><code>  position: relative;
  top: -99999px;
  margin-bottom: -99999px;
</code></pre>

<p>This has the unfortunate side-effect of adding a huge amount of scroll space to the bottom of the page. Although the immediately-following content is positioned correctly thanks to the negative bottom margin, the document itself will be stretched to fit what it thinks is the content.</p>

<pre class="lang-html prettyprint-override"><code>&lt;div id="offset"&gt;&lt;/div&gt;
</code></pre>

<p>No need to create an explicit div here; just use a <code>:before</code> pseudoselector.</p>

<pre class="lang-html prettyprint-override"><code>&lt;div id="unoffset"&gt;&amp;nbsp;&lt;/div&gt;
</code></pre>

<p>And this could be handled by <code>:after</code>. Also you don't need to use a non-breaking space; padding will do the trick too, or even just a <code>height</code> property.</p>

<hr>

<p>So what did my combined effort look like?</p>

<pre class="lang-html prettyprint-override"><code>BEFORE
&lt;div class="hold"&gt;
  &lt;div class="item"&gt;
    THING
  &lt;/div&gt;
&lt;/div&gt;
AFTER
</code></pre>

<pre class="lang-css prettyprint-override"><code>.hold {
  position: relative;
  margin-top: -2000px;
  pointer-events: none;
}

.hold:before {
  content: "";
  display: block;
  height: 2000px;
}

.item {
  pointer-events: initial;
  position: sticky;
  bottom: 0;
  z-index: 100;
}
</code></pre>

<p>Note that the use of a negative <code>margin-top</code> (rather than a negative <code>top</code> and <code>margin-bottom</code>) prevents the body scroll issue I mentioned, as well as reducing the number of places where the magic height value needs to be repeated. Also the use of <code>:before</code> means that the HTML is much simpler in exchange for slightly more CSS.</p>

<p>I didn't have issues with margin collapse, so I don't know if this method would still need something like the <code>unoffset</code> block, but if it does, it could be added with <code>.hold:after { content: ""; display: block; height: 1px; }</code> or similar.</p>

<hr>

<p>As for the "hacky" concern; there is no native way in CSS's <code>position: sticky</code> to escape the parent container. That's because the intended use-case is slightly different. Since <code>sticky</code> is the only non-JavaScript way to create effects like this, I am confident that no significantly better way exists (though I'm sure the approach can be tweaked further).</p>
    </div>