<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>getKeyWords()</code> method is not particularly useful.  It takes a <code>List&lt;String&gt;</code> and summarizes its contents in a degraded form.  It's particularly inappropriate for <code>Editor.useEditor()</code> to attempt to parse this undocumented string representation.  I would prefer to have it return an <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableList-java.util.List-" rel="nofollow noreferrer">unmodifiable list</a>.  The <code>JavaConfiguration</code> class would be better written as</p>

<pre><code>import java.util.Arrays;
import java.util.Collections;

public class JavaConfiguration extends Configuration {
    private static List&lt;&gt; KEYWORDS = Collections.unmodifiableList(Arrays.asList(
        "class",
        "protected"
    ));

    @Override
    List&lt;String&gt; getKeywords() {
        return KEYWORDS;
    }

    …
}
</code></pre>

<p>Does the order of the keywords matter?  Perhaps a <code>Set</code> would be more appropriate than a <code>List</code>.</p>

<hr>

<p>Typically, you wouldn't want to have the <code>App</code> be responsible for performing the translation from language name to the associated <code>Configuration</code> object.</p>

<pre><code>public abstract class Configuration {
    abstract void getTheme();
    abstract List&lt;String&gt; getKeywords();

    public static Configuration forLanguage(String language) {
        switch (language) {
            case "Java":
                …
        }
    }
}
</code></pre>

<p>A factory might not be the most appropriate pattern, though, since there isn't any point in instantiating many copies of each <code>Configuration</code> subclass.  Reusing singletons might be better.</p>

<hr>

<p>One would hope that the whole point of having various <code>Configuration</code>s is to contain all the language-specific behaviours of the <code>Editor</code>.  Therefore, if the system is designed properly, then there should only be one <code>Editor</code> class, whose constructor accepts a <code>Configuration</code>.  (I'm assuming that you don't need the <code>Editor</code> to be able to switch languages on the fly.)</p>
    </div>