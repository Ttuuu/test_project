<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>sieve_list</code></h1>

<p>Why don't you use a generator here? It can be clearer as generator, and the <code>candidate_range</code> proves you know how those work.</p>

<pre><code>def sieve_OP_gen(end):
    yield 2
    yield 3
    sieve_list = [True] * (end+1)
    for each_number in candidate_range(end):
        if sieve_list[each_number]:
            yield each_number
            for multiple in range(each_number*each_number, end+1, each_number):
                sieve_list[multiple] = False
</code></pre>

<h1>list slice assignment</h1>

<p>instead of:</p>

<pre><code>for multiple in range(each_number*each_number, end+1, each_number):
    sieve_list[multiple] = False
</code></pre>

<p>you can do:</p>

<pre><code>sieve_list[each_number::each_number] = [False] * (end // each_number)
</code></pre>

<p>this doesn't provide any speedup, but is more clear to me</p>

<h1><code>candidate_range</code></h1>

<p>I don't like <code>incr ^= 6</code>. This can be done a lot clearer with <code>itertools.cycle</code></p>

<pre><code>def candidate_range_maarten():
    cur = 5
    increments = itertools.cycle((2, 4))
    while True:
        yield cur
        cur += next(increments)
</code></pre>

<p>But all in all I think this is a lot of effort to reduce the number of checks in generating the primes sieve by 1/3rd. In fact, it slows down the sieve generation</p>

<pre><code>def sieve2(end):
    yield 2
    sieve_list = [True] * (end + 1)
    for each_number in range(3, end + 1, 2):
        if not sieve_list[each_number]:
            continue
        yield each_number
        sieve_list[each_number::each_number] = [False] * (end // each_number)
</code></pre>

<blockquote>
<pre><code>sieve_OP(150) == list(sieve2(150))
</code></pre>
</blockquote>

<pre><code>True
</code></pre>

<p>timings:</p>

<pre><code>%timeit sieve_OP(150)
</code></pre>

<blockquote>
<pre><code>24.5 µs ± 1.63 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
</blockquote>

<pre><code>%timeit list(sieve2(150))
</code></pre>

<blockquote>
<pre><code>16.3 µs ± 124 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
</blockquote>

<h1>filtering primes</h1>

<p>to filter the primes, you can use the builtin <code>filter</code></p>

<pre><code>primes = list(sieve2(150))
goodprimes = list(filter(lambda x: x % 4 == 1, primes))
</code></pre>

<p>or a list comprehension: good_primes = [i for i in primes if i % 4 == 1]</p>

<h1>functions</h1>

<p>The rest of the code would be more clear if you split it in different functions. One to find the different candidates for the products, and another function to generate the <em>pythagorean</em> <code>a</code></p>

<h2>product:</h2>

<p>The product of an iterable can be calculated like this:</p>

<pre><code>from functools import reduce
from operator import mul

def prod(iterable):
    return reduce(mul, iterable, 1)
</code></pre>

<h2>powerset</h2>

<p>As @PeterTaylor tnoted, there might be a itertools function to do this. There is,'t but there is an <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipe</a> <code>powerset</code>:</p>

<pre><code>def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return itertools.chain.from_iterable(
        itertools.combinations(s, r) for r in range(len(s) + 1)
    )
</code></pre>

<p>So generating the candidates is as easy as </p>

<pre><code>def candidates(good_primes):
    for subset in powerset(good_primes):
        yield prod(subset)
</code></pre>

<h1><code>pythagorean_a</code></h1>

<p>Instead of that nested for-loop which is not very clear what happens, I would split this to another function:</p>

<pre><code>def pythagorean_a(n):
    for a in itertools.count(1):
        try:
            b = sqrt(n - (a ** 2))
        except ValueError:
            return
        if b &lt; a:
            return
        if b.is_integer():
            yield a
</code></pre>

<blockquote>
<pre><code>list(pythagorean_a(65))
</code></pre>
</blockquote>

<pre><code>[1, 4]
</code></pre>

<h1>bringing it together</h1>

<p><span class="math-container">\$S(N)\$</span> then becomes: <code>sum(pythagorean_a(i))</code></p>

<p>and <span class="math-container">\$\sum S(N)\$</span>: <code>sum(sum(pythagorean_a(i)) for i in candidates(good_primes))</code></p>
    </div>