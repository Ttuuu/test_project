<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>"it was not object orientated" is a weird response. It would make me instantly worried about the company as it suggests they are living in the past, so it's not somewhere I'd want to work.</p>

<p>Having said that, I'd imagine they were looking for something like you declaring an interface and classes to handle each tax type. Something like:</p>

<pre><code>public interface IProduct
{
    string Name { get; set; }
    decimal Price { get; set; }
    decimal Tax { get; }
    bool Import { set; }
}

public class BookFoodOrMedical : IProduct
{
    public string Name { get; set; }
    public decimal Price { get; set; }

    public decimal Tax
    {
        get { return customRound(Price * (Import ? 5 : 0) / 100); }
    }

    public bool Import { set; private get; }
}

public class Other : IProduct
{
    public string Name { get; set; }
    public decimal Price { get; set; }

    public decimal Tax
    {
        get { return customRound(Price * (10 + (Import ? 5 : 0)) / 100); }
    }

    public bool Import { set; private get; }
}
</code></pre>

<p>Then, your menu method changes at the end to become:</p>

<pre><code>if (is_other)
{
    prod_list.Add(new Other { Import = is_import, Name = prod_name, Price = prod_price });
}
else
{
    prod_list.Add(new BookFoodOrMedical { Import = is_import, Name = prod_name, Price = prod_price });
}
</code></pre>

<p>And the <code>CalcTax</code>method becomes:</p>

<pre><code>    public decimal CalcTax(IProduct product)
    {
        return product.Price + product.Tax;
    }
</code></pre>

<p>Whether this is better than what you wrote is moot though. Your solution works. By making it "more object orientated", I've arguably made the code harder to maintain. So whilst I've shown how this could written to follow OOP concepts, you are better off sticking to your approach and simply following the advice in other answers on how to better follow C# conventions and how to improve the code.</p>
    </div>