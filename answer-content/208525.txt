<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://www.python-course.eu/python3_global_vs_local_variables.php" rel="noreferrer">You should not use global variables unless you really need to</a>. Instead, pass relevant parameters as arguments to the functions and return the results. This makes them actually reusable. Currently you have two functions to count the initial and final number of words, when you could just have a <code>word_count</code> function:</p>

<pre><code>def wordcount(file_name):
    """count the number of words in the file"""
    with open(file_name) as f:
        return sum(len(line.split()) for line in f) 

def dupfilter(file_initial, file_final):
    with open(file_initial) as in_file, open(file_final, "w") as out_file:
        out_file.writelines(set(in_file.readlines()))

if __name__ == '__main__':
    while True:
        file_initial = input("What is the name of the text?")
        file_final = input("How do you want to name the filtered file?")
        if file_initial and file_final and file_initial != file_final:
            break

    num_words_initial = wordcount(file_initial)
    dupfilter(file_initial, file_final)
    num_words_final = wordcount(file_final)

    print("Number of duplicates filtered:", num_words_initial - num_words_final)
    input("\nPress &lt;ENTER&gt; to quit the program.")
</code></pre>

<p>I also used <a href="https://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><code>sum</code></a> with a <a href="https://medium.freecodecamp.org/python-list-comprehensions-vs-generator-expressions-cef70ccb49db" rel="noreferrer">generator expression</a> to simplify the <code>wordcount</code> function, used <a href="http://effbot.org/zone/python-with-statement.htm" rel="noreferrer"><code>with</code></a> to ensure that files are properly closed.
In addition, I replaced the <code>while not ready</code> loop with a <code>while True</code> loop and an explicit <code>break</code>. This is much more common in Python, especially for user input.</p>

<p>Note that <code>if file_initial and file_final != ""</code> is only incidentally the same as <code>if file_initial != "" and file_final != ""</code> because non-empty strings are truthy. This is why it is also equivalent to <code>if file_initial and file_final</code>. But for example <a href="https://stackoverflow.com/questions/15112125/how-to-test-multiple-variables-against-a-value"><code>x and y == 3</code> is not the same as <code>x == 3 and y == 3</code></a>.</p>

<p>You also don't need to call <code>str</code> on things to be printed, <code>print</code> does that for you if necessary.</p>

<hr>

<p>Note that using <code>set</code> does not guarantee the same order as the original file, for that you would want to use the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>itertools</code> recipe <code>unique_everseen</code></a>:</p>

<blockquote>
<pre><code>from itertools import filterfalse

def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
</code></pre>
</blockquote>

<pre><code>def dupfilter(file_initial, file_final):
    with open(file_initial) as in_file, open(file_final, "w") as out_file:
        out_file.writelines(unique_everseen(in_file))
</code></pre>
    </div>