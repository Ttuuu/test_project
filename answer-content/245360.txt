<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to the JavaScript World! You have a lot to learn and that's really cool :-).</p>
<p>Here are a few tips.</p>
<hr>
<p><strong>Naming</strong></p>
<p>Try to use more explicit names. I never regretted spending time finding better names for my variables and functions.</p>
<p>For example:</p>
<pre><code>let elements = document.getElementsByClassName("buttons");
</code></pre>
<p>Could be (a little bit better but I'm sure you can find better):</p>
<pre><code>let buttons = document.getElementsByClassName("buttons");
</code></pre>
<hr>
<p><strong>Split your function into smaller ones.</strong></p>
<p>This helps readability and code reuse.</p>
<p>For example:</p>
<pre><code>if (operator.includes(value) &amp;&amp; operatorUsed == false) {
    // ...
}
</code></pre>
<p>Can be extracted:</p>
<pre><code>function isOperator (value) {
    return operator.includes(value) &amp;&amp; operatorUsed == false
}
</code></pre>
<p>Then you can use it:</p>
<pre><code>if (isOperator(value)) {
    // ...
}
</code></pre>
<hr>
<p><strong>Don't repeat yourself</strong></p>
<p>For example:</p>
<pre><code>if (equalClicked) { // it works that after pressing '=' and then one of the operators it's doing :
    history.value = result() // inserting previous result
    history.value += value  // and current operator
} else {
    history.value += screen.value
    history.value += value
}
</code></pre>
<p>In both cases you do:</p>
<pre><code>history.value += value
</code></pre>
<p>So just do it once at after the if statement:</p>
<pre><code>if (equalClicked) {
    history.value = result()
} else {
    history.value += screen.value
}
history.value += value
</code></pre>
<hr>
<p><strong>Style guide</strong></p>
<p>The style of your code is not consistent (parentheses, alignments). I suggest you to search for "JavaScript style Guide" in Google.</p>
<p>Do not overuse comments (this is a personal taste): I think if you code with short functions and good names, you don't need comments.</p>
<hr>
<p>I changed your code following these advices (I haven't changed anything about the logic):</p>
<pre><code>let buttons = document.getElementsByClassName('buttons')
let screen = document.getElementById('output')
let history = document.getElementById('last')

const operator = ['/', '*', '+', '-']
const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']

let currentNumber
let currentOperator
let equalClicked = false
let operatorUsed = false




function handleInput () {

    let value = this.value

    if (isOperator(value)) {
        insertOperator(value)
    } else if (isNumber(value)) {
        insertNumber(value)
    } else if (isClear(value)) {
        clear()
    } else if (isEqual(value)) {
        calculate()
    }

}




function isOperator (value) {
    return operator.includes(value) &amp;&amp; operatorUsed == false
}

function isNumber (value) {
    return numbers.includes(value)
}

function isClear (value) {
    return value == 'C'
}

function isEqual (value) {
    return value == '='
}




function insertOperator (value) {
    if (equalClicked) {
        history.value = evalResult()
    } else {
        history.value += screen.value
    }

    history.value += value
    operatorUsed = true
    currentOperator = value
    equalClicked = false
}


function calculate () {
    if (equalClicked == false) {
        history.value += screen.value
        equalClicked = true
    } else {
        history.value = screen.value + currentOperator + currentNumber
    }

    screen.value = evalResult()
}


function insertNumber (value) {
    if (screen.value == 0 || operatorUsed == true) {
        screen.value = value
        operatorUsed = false
    } else {
        screen.value += value
    }
    currentNumber = value
}


function clear () {
    history.value = ''
    screen.value = 0
}





function evalResult () {
    return eval(history.value)
}

for (var i = 0; i &lt; buttons.length; i++) {
    buttons[i].addEventListener('click', handleInput)
}
</code></pre>
<hr>
<p><strong>About the logic</strong></p>
<p>You use raw string inputs and you concatenate them before passing them to javascript eval, which is a smart move but I think, is bug prone and not reliable if you want to go further.</p>
<p>I suggest you to cast string inputs into javascript numbers and map operators into real javascript functions.</p>
<p>For example:</p>
<pre><code>function add (numberA, numberB) {
    return numberA + numberB
}

if (operator === '+') {
    const newValue = add(currentValue, parseInt(inputValue, 10))
}
</code></pre>
<p>Have fun</p>
    </div>