<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, that all looks correct to me!</p>

<p>You don't use anything from <code>&lt;unistd.h&gt;</code> (non-standard) or <code>&lt;initializer_list&gt;</code> (obscure), so I recommend removing those includes.</p>

<hr>

<p>You sigil the <code>mutex_</code> data member with an underscore, but you don't sigil the <code>v</code> member. I recommend being consistent:</p>

<pre><code>std::mutex mutex_;
std::vector&lt;int&gt; v_;
</code></pre>

<p>Personally I would spell the member's name <code>mtx_</code>, but that's just a personal habit; I don't know if that naming convention is widespread. (<code>cv_</code> for a condition variable certainly is, though!)</p>

<hr>

<p>Consider that your <code>Check</code> and <code>dump</code> methods don't need to mutate the object, so they should be declared <code>const</code>. This means that your <code>mutex_</code> data member will need to be declared <code>mutable</code> so that you can still lock and unlock it inside your <code>const</code> member functions.</p>

<p>Also, consider picking a capitalization rule and sticking to it. Why <code>Check</code> and <code>Update</code> but <code>dump</code> (not <code>Dump</code>)?</p>

<p><code>Check</code>'s parameter <code>x</code> is marked <code>const</code> but that marking serves no purpose: eliminate it. (<a href="https://quuxplusone.github.io/blog/2019/01/03/const-is-a-contract/" rel="nofollow noreferrer">Const is a contract.</a>)</p>

<hr>

<pre><code>for (int i = 0; i &lt; v.size(); i++) {
    if (!g_c.Check(v[i])){
        std::cout &lt;&lt;  v[i] &lt;&lt; " ";
    }
}
</code></pre>

<p>This could be rewritten more concisely as</p>

<pre><code>for (int vi : v) {
    if (!g_c.Check(vi)) {
        std::cout &lt;&lt; vi &lt;&lt; " ";
    }
}
</code></pre>

<p>Your multithreading stuff all looks great!</p>
    </div>