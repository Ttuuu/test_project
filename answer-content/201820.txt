<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The function always gives the same results for a given input (it's a <em>pure</em> function of the inputs).  That means that we can declare it <code>constexpr</code>, allowing the computation of results at compile-time, when the arguments are constants:</p>

<pre><code>constexpr std::uint64_t CircShift(std::uint64_t x, std::uint8_t n,
                                  std::uint8_t bitwidth);
</code></pre>

<p>If your bit width isn't truly (run-time) variable, but has different values in different parts of the code, then you might want to make that a template argument:</p>

<pre><code>template&lt;std::uint8_t Bitwidth&gt;
constexpr uint64_t CircShift(std::uint64_t x, std::uint8_t n);
</code></pre>

<p>Again, that can help your compiler to optimize.</p>

<p>While we're talking templates, you might want a version that doesn't use a <code>std::uint64_t</code> if <code>n</code> fits a smaller type (and for portability, prefer <code>std::uint_fast64_t</code>).</p>

<p>A further thought - you might want to make <code>n</code> a signed type, to allow both left and right rotation (right rotation is simply a left rotation of <code>n + bitwidth</code>, when <code>n</code> is less than zero).</p>
    </div>