<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm is supremely inefficient. Moving a word to the front moves all the other characters to the back, resulting in a quadratic algorithm. In addition to that, you repeatedly recalculate the length of the null terminated string.</p>

<p>As an aside, the standard library provides <a href="https://en.cppreference.com/w/cpp/algorithm/rotate" rel="nofollow noreferrer"><code>std::rotate()</code></a> for moving part of a sequence from the end to the beginning, no need to write your own.</p>

<p>There is an alternative in-place algorithm which swaps every character at most twice, and traverses three times. Thus it is trivially proven linear:</p>

<ol>
<li>Reverse every word in isolation. Remember the end if needed.</li>
<li>Reverse everything.</li>
</ol>

<p>The standard library features <a href="https://en.cppreference.com/w/cpp/algorithm/reverse" rel="nofollow noreferrer"><code>std::reverse()</code></a> for implementing this.</p>
    </div>