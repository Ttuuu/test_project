<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This compiles with no warnings from a fairly pedantic compiler (<code>g++ -std=c++2a -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds  -Weffc++</code>)  - well done!</p>

<hr>

<p>Your program is closely tied to the number of digits in the secret number.  If you wanted to adapt it to work with a five-digit number, you'd need to rework almost every part of it.  A maintainable solution should have just one part that might need to change.</p>

<hr>

<p>It's great that you have comments, but some are highly misleading:</p>

<blockquote>
<pre><code>int passnum;           // for ease of understanding. "howmany" is
                       // the number of correct digits.
</code></pre>
</blockquote>

<p>(I wrapped this to a readable length - 70 columns is a well-established choice)</p>

<p>Looking at the code, it seems that <code>howmany</code> is nothing to do with the number of correct digits, but is always 0 or 1.  It might be worth encoding that in an enum, and using values that directly correspond to the <code>passnum</code> value we want:</p>

<pre><code>// values correspond to how many matches we're looking for
enum Pass {
           PASS_1 = 3;
           PASS_2 = 2;
};

// good guesses are guesses that can show an answer, given the prior information.
bool isgoodguess (bool flag[],
                  int tempnum,
                  std::set&lt;int&gt; &amp;one, std::set&lt;int&gt; &amp;two,
                  std::set&lt;int&gt; &amp;three, std::set&lt;int&gt; &amp;four,
                  Pass passnum)
{
    int counter = 0;
    ...
}
</code></pre>



<pre><code>    while (...) {
        check(guess1, digit1, digit2, digit3, digit4, PASS_1);
        check(guess2, digit1, digit2, digit3, digit4, PASS_2);
    }
</code></pre>

<hr>

<p>When reading from streams, <em>always</em> check that the stream is in a good state afterwards; if not, you can't rely on the streamed-into variables.</p>

<pre><code>    int cases;
    if (!(std::cin &gt;&gt; cases)) {
        std::cerr &lt;&lt; "Input format error!\n";
        return EXIT_FAILURE;    // needs &lt;cstdlib&gt;
    }
</code></pre>

<hr>

<p>We have some long-winded boolean identities:</p>

<blockquote>
<pre><code>return (counter == passnum) ? true : false; 
</code></pre>
</blockquote>

 

<blockquote>
<pre><code>        if (flag[0] == true) {
</code></pre>
</blockquote>

<p>These can be simplified:</p>

<pre><code>return counter == passnum; 
</code></pre>



<pre><code>        if (flag[0]) {
</code></pre>

<hr>

<p>With a little cleverness, we can simplify the <code>if</code>/<code>else</code> chains in <code>isgoodguess()</code>, e.g.:</p>

<blockquote>
<pre><code>if (four.find(tempnum%10) == four.end()) {
    counter++;
    flag[3] = false;
}
else {
    flag[3] = true;
}
</code></pre>
</blockquote>

<p>We can say <code>flag[3] = (four.find(tempnum%10) != four.end());</code>, and then use the fact that booleans convert to integer 0 or 1 to increment <code>counter</code> only if false:</p>

<pre><code>counter += !(flag[3] = four.find(tempnum%10) != four.end());
</code></pre>

<p>That's sufficiently non-obvious to be worth an explanatory comment, though.</p>

<hr>

<p>We have an iterator invalidation problem here:</p>

<blockquote>
<pre><code>        tocheck.erase(it);
</code></pre>
</blockquote>

<p>We subsequently use <code>it</code> (in the loop condition), but it's no longer valid.  I think you meant to write:</p>

<pre><code>        it = tocheck.erase(it);
</code></pre>

<hr>

<p>In <code>main()</code>, it would be more natural to use a <code>switch</code> rather than an <code>else if</code> chain to choose between the different values of <code>correct</code>.  Why do we ignore <code>correct</code> values of 3 or more?</p>
    </div>