<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Readability</h2>
<ul>
<li><p>The code needs more spacing. Considering the comments, the indentation and the ifs, it's hard to read without some good old empty lines.</p>
</li>
<li><p>Use brackets when using conditions, especially if you have comments above your single line, it gets really confusing. Also, the readability is increased <strong>and</strong>, the biggest factor, you'll avoid <a href="https://embeddedgurus.com/barr-code/2014/03/apples-gotofail-ssl-security-bug-was-easily-preventable/" rel="noreferrer">weird bugs</a>.</p>
</li>
<li><p>If you really don't want to use brackets, at least indent your comments so it's clear the line under it is still into the <code>if</code>.</p>
</li>
<li><p>Considering that we have your explanation of the problem, we can understand pretty clearly what your variable names mean. But still... it could be improved or at least well documented. <code>fallenLeaves</code> doesn't represent fallen leaves, it represent when leaves are falling at which position. <code>expectedSum</code> and <code>correctSum</code> don't mean much, to a point I'm wondering if they are well initialized.</p>
</li>
</ul>
<p><strong>Result for now :</strong></p>
<h1></h1>
<pre><code>public static int GetSecondsRequired(int requiredAmountOfLeaves, int[] fallenLeaves)
{
    bool[] leavesAsSteps = new bool[requiredAmountOfLeaves + 1];
    int espectedSum = 0, correctSum = 0;

    for (int i = 1; i &lt;= fallenLeaves.Length; i++)
    {
        if (i &lt;= requiredAmountOfLeaves)
        {
            //get summatory of 1..N
            correctSum += i;
        }

        if (fallenLeaves[i - 1] &lt;= requiredAmountOfLeaves &amp;&amp;
            !leavesAsSteps[fallenLeaves[i - 1]])
        {
            //accumulate where the expected leaf fell and set its location to true
            espectedSum += fallenLeaves[i - 1];
            leavesAsSteps[fallenLeaves[i - 1]] = true;
        }
    
        if (espectedSum == correctSum &amp;&amp; i &gt;= requiredAmountOfLeaves)
        {
            //if all the espected leaves fell, then return the array's 
            //index where the last expected leaf was found
            return i - 1;
        }
    }

    return FROG_CANT_JUMP_TO_THE_OTHER_SIDE;
}
</code></pre>
<h2>Algorithm</h2>
<ul>
<li>You use <code>i - 1</code> everywhere but one place, it would be smarter to reverse this. Use <code>i</code> everywhere and <code>i + 1</code> at one place.</li>
<li>You use the accessor <code>fallenLeaves[i]</code> often, you should consider storing it in a variable. It will make the code more readable. So : <code>int currentFallenLeaf = fallenLeaves[i];</code></li>
<li>The usage of <code>expectedSum</code> and <code>correctSum</code> is too complicated for the problem at hand. You don't need to check the sum, only that the number of <code>true</code> elements in <code>leavesAsSteps</code> (minus one because of the zero index) equals <code>requiredAmountOfLeaves</code>.</li>
<li>You could check right at the beginning of the loop if you already marked the "leaf step" as <code>true</code> and that the leaf is valid, so that you don't do useless work.</li>
</ul>
<h1></h1>
<pre><code>public static int GetSecondsRequired(int requiredAmountOfLeaves, int[] fallenLeaves)
{
    // You should comment why there's a + 1 here.
    bool[] leavesAsSteps = new bool[requiredAmountOfLeaves + 1];
    int numberOfFallenLeaves = 0;

    for (int i = 0; i &lt; fallenLeaves.Length; i++)
    {
        int currentFallenLeaf = fallenLeaves[i];

        // Have we already checked this number?
        // Is the leaf number out of range?
        // If so, let's just stop right there for this leaf.
        if (currentFallenLeaf &gt; requiredAmountOfLeaves 
            || leavesAsSteps[currentFallenLeaf])
        {
            continue;
        }

        numberOfFallenLeaves++;
        leavesAsSteps[currentFallenLeaf] = true;        

        // Have we marked all our leaves? We're done.
        if (numberOfFallenLeaves == requiredAmountOfLeaves)
        {
            return i;
        }
    }

    return FROG_CANT_JUMP_TO_THE_OTHER_SIDE;
}
</code></pre>
    </div>