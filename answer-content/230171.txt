<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Interesting concept, I'm going to guess that C is not your first programming language, and your first language did not require explicit memory management.</p>

<p>The code is pretty good, but here are some things to consider:</p>

<p><strong>A Good Programming Practice</strong><br>
In most of the <code>if</code> statements and loops the code in the question is hard to maintain because it doesn't provide complex statements for each path through the code. A complex statement is a code block encapsulated in the C language by <code>{</code> and <code>}</code>. </p>

<p>An example of a complex statement is:
        {
            STATEMENT;
            STATEMENT;
        }</p>

<p>An example of the code lacking this good programming practice is</p>

<pre><code>void free_garbage_heap(void)
{
    for (int i = 0; i &lt; garbage_heap.len; ++i)
        if (garbage_heap.buffer[i] != NULL)
            free(garbage_heap.buffer[i]);
    free(garbage_heap.buffer);
}
</code></pre>

<p>Let's say that someone maintaining the code has to add a statement to the <code>if</code> statement in the loop and they are looking to do it quickly or they come from a programming language that is positional rather than using braces to denote a complex statement. If they add it immediately below the <code>free(garbage_heap.buffer[i]);</code> without adding the braces, not only is the new statement not in the <code>if</code> statement, the new statement isn't even in the for loop. </p>

<p>In languages such as C and C++ the following code is a safer programming practice:</p>

<pre><code>void free_garbage_heap(void)
{
    for (int i = 0; i &lt; garbage_heap.len; ++i)
    {
        if (garbage_heap.buffer[i] != NULL)
        {
            free(garbage_heap.buffer[i]);
        }
    }
    free(garbage_heap.buffer);
}
</code></pre>

<p>Where to add a new statement becomes much clearer.</p>

<p><strong>Possible Improvements for the Function init_garbage_heap</strong><br>
The first thing to note in <code>init_garbage_heap()</code> is that there is no error checking after the call to <code>void* malloc(int number_of_bytes_to_allocate)</code>. The call to <code>malloc()</code> may fail, and if it does the value returned is <code>NULL</code>. If the code continues to process if <code>malloc()</code> returned an error, then there would be a memory access error in the for loop for <code>garbage_heap.buffer[i] = NULL;</code> that will probably cause the program to crash (exit improperly). In C++ if <code>new()</code> fails it throws an exception, the C programming language does not have exceptions so the test is required.</p>

<p>The second thing to note in the following code is that the cast to <code>(void**)</code> is not necessary in C99 or later versions of C, in the original version of C <code>malloc()</code> return char* and required casting, now that it returns void* it does not. </p>

<pre><code>void init_garbage_heap(void)
{
    int len = 32;
    garbage_heap.len = 0;
    garbage_heap.capacity = len;
    garbage_heap.buffer = (void**)malloc(sizeof(void*)*len);
    for (int i = 0; i &lt; len; ++i)
        garbage_heap.buffer[i] = NULL;
}
</code></pre>

<p>The third thing to note is that the type of <code>garbage_heap.buffer</code> can change so it might be better if <code>sizeof(*garbage_heap.buffer) * len</code> was used rather than explicity stating <code>sizeof(void*)*len</code>. That way if the type of <code>buffer</code> changes the code only needs to change where <code>buffer</code> is declared rather than in multiple places.</p>

<p>The for loop to initialize the contents of <code>garbage_heap.buffer</code> to NULL might be replaced with a call to <a href="http://www.cplusplus.com/reference/cstring/memset/" rel="nofollow noreferrer">void * memset ( void * ptr, int value, size_t num );</a>:</p>

<pre><code>    memset(garbage_heap.buffer, 0, sizeof(*garbage_heap.buffer) * len);
</code></pre>

<p>This may possibly perform better speed wise than the for loop depending on how <code>memset()</code> is written. It is also written in the terms of the rest of the code. </p>

<p>If the call to <code>malloc()</code> is replaced by a call to <code>calloc()</code> neither the for loop or a call to <code>memset()</code> is required because <code>calloc()</code> will set the contents of the memory being returned to NULL.</p>

<p>Possibly improved version of `init_garbage_heap(void):</p>

<pre><code>void init_garbage_heap(void)
{
    int len = 32;

    garbage_heap.len = 0;
    garbage_heap.capacity = len;
    garbage_heap.buffer = calloc(sizeof(*garbage_heap.buffer), len);
    if (!garbage_heap.buffer)
    {
        fprintf(stderr, "Unable to allocate memory for garbage_heap.buffer, exiting program");
        exit(EXIT_FAILURE);
    }
}
</code></pre>

<p>It is not clear why len is being assigned <code>32</code>, it might be better to use a symbolic constant instead of <code>32</code>. It might also be nice if the user of these routines could set the initial allocation capacity. It would be better if the initial buffer size was larger than 32 to reduce the need for resizing.</p>

<p><strong>Spacing</strong><br>
The code in garbage_heap.c might be more readable if there was vertical spacing inside the functions.</p>
    </div>