<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems there is an compilation error in constructor of <code>File</code>:</p>

<pre class="lang-java prettyprint-override"><code>this.content = content
</code></pre>

<p>There is no param <code>content</code> in method signature.</p>

<p>Name params consistently (especially along inheritance hierarchy).
You have <code>p</code> (parent) VS <code>directory</code> and <code>n</code> (name) VS <code>entryName</code>. Either they should be consistent throughout the hierarchy (e.g. <code>parent</code> and <code>name</code> seem to fit along) or you should deviate on purpose to highlight special cases (e.g. a future class <code>Alias</code> may have two constructor params with a <em>name</em>: <code>aliasName</code> and <code>targetName</code>).</p>

<p>There could be <em>convenience methods</em> that check for <strong>tree-attributes</strong> like:</p>

<ul>
<li><code>boolean isLeaf()</code> always true on <code>File</code>, also on <em>empty</em> <code>Directory</code></li>
<li><code>boolean isRoot()</code> always true on <strong>root</strong> <code>Directory</code></li>
</ul>

<p>What about consistent getter for <strong>contents</strong>:</p>

<ul>
<li>the <em>naming</em> differs between File an Directory</li>
<li>the <em>return type</em> also differs (can this be unified with some generic contents-type?)</li>
</ul>

<p>Naming convention for <strong>packages: avoid <em>camelCase</em>.</strong>
What about shortening <code>oopdesign.fileSystem</code> to <code>ood.fs</code> (OOD is the abbreviation for object-oriented design) or <code>oo.file</code>.</p>

<p>In reference to the Java API there may be a name collision, because the class <code>File</code> is also used by Java inside package <code>java.io</code>.</p>
    </div>