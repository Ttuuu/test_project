<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><code>int</code> does not seem a good choice for sizes and indices which can only be non-negative. <code>std::size_t</code> was introduced for such things.</li>
</ol>
<p>1b. When reallocating array you don't check if doubling <code>capacity</code> overflows.</p>
<ol start="2">
<li><p>When inserting an element into a saturated array you: 1) reallocate it with double the capacity; 2) copy all existing elements into the new buffer; 3) shift elements past the newly inserted in the new buffer.<br>
This hits especially sensitively if you insert an element at array's front. IMO, a slight microoptimisation would be to split current array in two, before and past the newly inserted element, and copy them separately, thus eliminating excess moves of the suffix.</p>
</li>
<li><p>While you double the capacity on reallocations, its initial value is only one higher than the initial size, thus causing reallocation on the second insertion already.</p>
</li>
<li><p>Using the so-called 'smart pointers', <code>std::unique_ptr</code> would be a good example, would relieve you from manually maintaining the pointers.</p>
</li>
</ol>
    </div>