<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    JJ &lt;- (alpha - 1) %% nrows + 1
    II &lt;- ((alpha - JJ)/ncols) + 1
</code></pre>
</blockquote>

<p>That looks likely to be buggy. I would guess that <code>a</code> is supposed to be an encoding for a pair <code>(row, col)</code>, but in that case the same base should be used for the <code>%%</code> and the <code>/</code>.</p>

<p>I would also suggest that if you can't use 0-indexed matrices then you do the offset to 1-based when you access the matrices, and keep the values you manipulate 0-based. See how much simpler this is:</p>

<pre><code>for (rowa in 0:(nrows-1))
{
  for (cola in 0:(ncols-1))
  {
    a = rowa * ncols + cola
    for (rowb in 0:(nrows-1))
    {
      for (colb in 0:(ncols-1))
      {
        b = rowb * ncols + colb
        d = sqrt((rowa - rowb)^2 + (cola - colb)^2)
        Q[a+1, b+1] &lt;- Qvariance * (Qrho^d)
      }
    }
  }
}
</code></pre>

<p>Incidentally, since <code>Qvariance</code> is multiplied into every single element you could pull that out and post-multiply the final <span class="math-container">\$48 \times 48\$</span> matrix instead.</p>

<hr>

<p>Now, elimination of the matrix. We have <span class="math-container">\$(AB)_{i,j} = \sum_k A_{i,k} B_{k,j}\$</span>, so <span class="math-container">$$(HQH^T)_{i,j} = \sum_k H_{i,k}(QH^T)_{k,j} = \sum_k H_{i,k} \sum_l Q_{k,l} H^T_{l,j} = \sum_k \sum_l H_{i,k} H_{j,l} Q_{k,l}$$</span> which allows you to restructure the code so as to avoid creating <span class="math-container">\$Q\$</span> in memory. However, it is at the cost of using the na√Øve algorithm for matrix multiplication, and your matrices are large enough that R is probably using a sub-cubic algorithm. So what you might want to do is to instead break it down into chunks: e.g. of size <code>nrows</code> <span class="math-container">\$\times\$</span> <code>nrows</code>. I don't know enough R to be certain, but I expect that its index range notation allows you to do this quite cleanly.</p>

<p>Following up on some comments, we can expand <span class="math-container">\$k = r_1 C + c_1\$</span>, <span class="math-container">\$l = r_2 C + c_2\$</span> where <span class="math-container">\$C\$</span> is <code>ncols</code>, and get
<span class="math-container">$$(HQH^T)_{i,j} = \sum_{r_1} \sum_{c_1} \sum_{r_2} \sum_{c_2} H_{i,r_1 C + c_1} H_{j,r_2 C + c_2} Q_{r_1 C + c_1,r_2 C + c_2} \\
= \sigma \sum_{r_1=1}^R \sum_{r_2=1}^R \sum_{c_1=1}^C \sum_{c_2=1}^C H_{i,r_1 C + c_1} H_{j,r_2 C + c_2} \rho^{\sqrt{(r_1-r_2)^2 + (c_1-c_2)^2}} $$</span></p>

<p>Let <span class="math-container">\$Q^{(\delta)}\$</span> be a symmetric <span class="math-container">\$C \times C\$</span> matrix with <span class="math-container">\$Q^{(\delta)}_{i,j} = \rho^{\sqrt{\delta^2 + (i-j)^2}}\$</span>. Then <span class="math-container">$$(HQH^T)_{i,j} =  \sigma \sum_{r_1=1}^R \sum_{r_2=1}^R \sum_{c_1=1}^C \sum_{c_2=1}^C H_{i,r_1 C + c_1}  Q^{(|r_1-r_2|)}_{c_1,c_2} H_{j,r_2 C + c_2} \\
HQH^T = \sigma \sum_{r_1=1}^R \sum_{r_2=1}^R H_{1..48,r_1 C .. (r_1+1)C}  Q^{(|r_1-r_2|)} H_{1..48,r_2 C..(r_2+1)C}^T $$</span></p>

<p>and the sum can be regrouped by <span class="math-container">\$|r_1 - r_2|\$</span> to calculate each <span class="math-container">\$Q^{(\delta)}\$</span> only once. When calculating <span class="math-container">\$Q^{(\delta)}\$</span> you can exploit the symmetry without worrying too much about cache coherence, because the whole of <span class="math-container">\$Q^{(\delta)}\$</span> should fit in L2 cache.</p>
    </div>