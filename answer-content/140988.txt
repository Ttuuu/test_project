<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your regex will suffer from catastrophic backtracking with certain inputs. Just try matching <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaa</code>, and you'll see the visible slowdown.</p>

<p>I suggest (as was already mentioned in the comments) that you break up the regex at the <code>|</code> into two separate regexes, one for IP addresses and the other for domain names. It just makes more sense, especially from a future maintainability perspective, and will make things easier for you in the future.</p>

<p>The IP address part is actually very efficient on its own, so there are no further changes I would make to this part:</p>

<pre><code>^([0-9]{1,3}\.){3}[0-9]{1,3}$
</code></pre>

<p>The second part of the regex is the source of the slowdown. It also matches some strange things, like this:</p>

<pre><code>a....a..................aa
aa
a.aa
a.-a.aa
</code></pre>

<p>I'm just going to assume that these are bugs, although I don't know given that you haven't made it clear what should match. That's why I will write up some rules for what I want to match:</p>

<ul>
<li>Must start with an alphanumeric</li>
<li>There may be <code>.</code> or <code>-</code> characters, but they must be surrounded by alphanumerics.</li>
<li>Must end with <code>.</code> followed by two or more letters</li>
</ul>

<p>Here is the regex that would be (with newlines added for emphasis):</p>

<pre><code>^[a-zA-Z0-9]+
([-.][a-zA-Z0-9]+)*
\.[a-zA-Z]{2,}$
</code></pre>

<p>Note that <code>-</code> does not need to be escaped if it's the first thing in the character class. <code>.</code> is never a metacharacter in character classes.</p>

<p>Finally, I would use the <code>i</code> modifier to get rid of all the <code>a-zA-Z</code> redundancy:</p>

<pre><code>/^[a-z0-9]+([-.][a-z0-9]+)*\.[a-z]{2,}$/i
</code></pre>

<p>Here are the tests:</p>

<pre><code>a-a.com
1-1-1-1.com
1.1.1.com
aa.com
aa.cc
a.com
a.a.a.a.aa
</code></pre>

<p></p>

<pre><code>a..a..................aa
aa
aaaaaaaaaaaaaa
a.-a.aa
</code></pre>

<p></p>

<pre><code>aa.c
a--a.com
-aa.com
a-a-a-a-.com
</code></pre>

<p>The first group is matched by both, the second group is matched by only your regex, and the last group is matched by neither.</p>

<p>To show you the difference in performance, I tested against this variation of your original regex:</p>

<pre><code>^([a-zA-Z0-9]+(([\-]?[a-zA-Z0-9]+)*\.)+)*[a-zA-Z]{2,}$
</code></pre>

<p>Using the <a href="https://regex101.com/#pcre" rel="nofollow noreferrer">PCRE option on Regex101</a> (with the <code>gm</code> options), your regex takes 66390 steps. The new regex I wrote took only 214 steps, and it's shorter and more legible too.</p>
    </div>