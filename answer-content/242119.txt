<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hi  OverLordGoldDragon,</p>

<p>Why don't you define your methods as functions in your submodules and attach them to your main class afterwards?</p>

<pre class="lang-py prettyprint-override"><code># module_a.py

def woof(self):
    """I'm a dog"""
    self.do_woofing() 

def do_dooting(self):
    print("DOOT")
</code></pre>

<pre class="lang-py prettyprint-override"><code># module_b.py

def doot(self):
    """I'm a skeleton"""
    self.do_dooting()

def do_woofing(self):
    print("WOOF")
</code></pre>

<pre class="lang-py prettyprint-override"><code>import module_a, module_b       # I know some people won't like this form of import

class Main:
    def __init__(self, *args, **kwargs):
        # do whatever you need to do to initialize your instance
        pass

    woof = module_a.woof
    do_dooting = module_a.do_dooting
    doot = module_b.doot
    do_woofing = module_b.do_woofing
</code></pre>

<pre class="lang-py prettyprint-override"><code># main.py
from main_module import Main

m = Main()
m.woof()
m.doot()
help(m.doot)
</code></pre>

<p>I want to highlight the fact that <code>help()</code> is supposed to be used at the interactive prompt not in a script.</p>
    </div>