<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Have you tried running this implementation? It fails immediately with a <code>java.lang.IllegalMonitorStateException</code> which according to the Javadoc is:</p>

<blockquote>
  <p>Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.</p>
</blockquote>

<p>The problem is that the implementation synchronizes on the field <code>lock</code> but calls <code>notify()</code> and <code>wait()</code> on <code>full</code> and <code>free</code> without holding their locks. When you fix this, it's important to keep in mind that calling wait() automatically releases the lock of the object you are waiting on, but does not release locks on other objects. If you don't take that into account, it's quite easy to create deadlocks.</p>

<p>For readability, I'd recommend using <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/locks/Condition.html" rel="nofollow">java.util.concurrent.locks.Condition</a> instead of <code>wait()</code> and <code>notify()</code> which are fairly low level and difficult to reason about. In fact, the example usages in the Javadoc for Condition come from the implementation of a bounded buffer.</p>

<p>I also have to echo Brian's concern: it's important that you don't silently swallow <code>InterruptedException</code>. You have two choices on how to handle interruption. If you want to handle the exception yourself, then JCIP says you need to set the interrupted status back.</p>

<pre><code>catch (InterruptedException e)
{
  Thread.interrupt();
  // Handle the interruption
}
</code></pre>

<p>The other choice, which is better in my opinion, is to just propagate the exception. Java's built in libraries use this strategy, for an example see <a href="http://download.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#take%28%29" rel="nofollow">BlockingQueue.take()</a>.</p>
    </div>