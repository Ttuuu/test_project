<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Got a snack and drink? Probably a good idea to get comfy too because it's going to be another one of those answers.</p>
</blockquote>

<p>Before diving in though understand that I'm sharing what I know and think will be helpful, there's defiantly more clever people out there with Bash, and perhaps those that are will be kind enough to let us all know if any of the following would lead readers astray.</p>

<hr>

<blockquote>
  <blockquote>
    <p>"Could you add some features to the program that are practical, convenient or cool for setting up new installs?"</p>
  </blockquote>
</blockquote>

<p>Yes, however I don't think either of us would want to look at it after...</p>

<hr>

<p>Addressing some of your list;</p>

<ul>
<li><p>Abandon customizing <code>nano</code> and instead focus on <code>vim</code>, be very targeted about plugins and customizing, and try to focus on learning the <a href="https://www.youtube.com/watch?v=XA2WjJbmmoM" rel="nofollow noreferrer">built in goodies</a> to tweak. For example <a href="https://vi.stackexchange.com/questions/625/how-do-i-use-vim-as-a-diff-tool"><code>vimdiff</code></a> as a merge tool for <code>git</code> is super handy for remote (or local) merge conflict resolution, and <a href="https://www.vim.org/scripts/script.php?script_id=3645" rel="nofollow noreferrer"><code>vim-gpg</code></a> allows for editing encrypted files in-place. Combined with either <code>screen</code> or <code>tmux</code> and it's possible to have a similar (<a href="https://www.youtube.com/watch?v=YRyYIIFKsdU" rel="nofollow noreferrer">or better</a>) experience as what <code>IDEs</code> like <code>Atom</code> provides.</p></li>
<li><p><code>iptables</code> and <code>ssh</code> setup is something that should be handled by separate scripts at the very least, and I'll reiterate that <code>systemd</code> combined with <code>iptables</code> is an avenue worth exploring... may be in the future I'll <em><code>push</code></em> a related project, when it's ready...</p>

<ul>
<li>Additionally on <code>iptables</code>, look into <code>chains</code>, and <code>insert</code> to keep things organized and in somewhat predictable order respectively. Also check into <a href="https://www.fail2ban.org/" rel="nofollow noreferrer"><code>fail2ban</code></a> for an easy way of mitigating some forms of <em>hacktackory</em>, it also has <em>templating</em> options for automating changes in rules based off various logged events.</li>
</ul></li>
<li><p>Careful, setting-up custom root account <code>bashrc</code> files, especially for a <strong>shared</strong> server this can cause <em>strangeness</em> in terminal behavior, which can <em>strain</em> team relations, that <em>strain</em> could lead to anger, and <a href="https://www.youtube.com/watch?v=kFnFr-DOPf8" rel="nofollow noreferrer">Yoda</a> was very clear to where such emotions leads.</p></li>
<li><p>Tweaking default color output for <code>ls</code> and just about any other <em>core utility</em> is a very, very bad idea... well unless tracking down the legacy code underpinning something server critical that <em>barfed</em> is your idea of a good time... Hint, if it's in the Busybox Bash shell avoid touching the defaults on any distribution. If you <em><strong>must</strong></em>, for some reason, then please use uniquely named <code>aliases</code> instead... as for <em>why</em>, detecting <strong>reliably</strong> when something is being piped or redirected or displayed to a terminal that can handle it is a special flavor of mysticism I'll not encourage publicly; not for this use-case...</p></li>
<li><p>Creating new users, set-up, passwords, etc. is something that yet again should be handled by a separate set of scripts. Additionally be careful as to who you assign a password to, could allow for a larger pool of users to brute-force passwords for, and some users should <strong>never</strong> have a password but instead be <em>locked</em> from these types of authentication.</p></li>
<li><p>Installation of non-free software in an automated fashion may be asking for trouble, I'm no expert but such habits will be very tough to maintain in a corporate setting. In other-words be really nice to the <em>Waver Department</em> for whatever company lets ya <code>sudo</code> onto their servers.</p></li>
<li><p>I've already touched on that auto upgrading a system is dangerous, but if you must then consider using <code>script</code> so that issues can later be tracked down with the use of <code>strings</code>, eg...</p></li>
</ul>

<pre class="lang-bsh prettyprint-override"><code>mkdir -p ~/Documents/logs/script

_a_moment_in_time="$(date +'%Y%m%d-%H%M%S')"
_log_path="${HOME}/Documents/logs/script/${_a_moment_in_time}-apt-get_upgrade.script"

script -ac 'sudo apt-get upgrade &amp;&amp; sudo apt-get upgrade -y' "${_log_path}"
</code></pre>

<p>... to output a <code>script</code> <em>log file</em> to something like <em><code>~/Documents/logs/script/19701231-2359-apt-get_upgrade.script</code></em>, which can be reviewed in-terminal with something like...</p>

<pre class="lang-bsh prettyprint-override"><code>strings "${_log_path}" | more
</code></pre>

<hr>

<blockquote>
  <blockquote>
    <p>"Is there anything in the program that I don't need?"</p>
  </blockquote>
</blockquote>

<p>Yes.</p>

<blockquote>
  <blockquote>
    <p>"I was hoping for some advice and/or input on the code."</p>
  </blockquote>
</blockquote>

<ul>
<li><p>Split out things into separate projects, and within those projects split things out into smaller files of functions that contain reusable code <em>snipits</em>; your future self will be more likely to thank your past self.</p></li>
<li><p>Comments should be comments, documentation should either be accessible via some state within the code or be kept in a different place; Python is a good example of where it's encouraged to have documentation within the code but that's because <code>print(str.__doc__)</code>.</p></li>
<li><p>There's some unnecessary redundant repetition in your code that might be better expressed as a collection of functions that abstract things a bit in that regard. On the subject of functions, some of your names are going to cause ya headaches in the future, I'm looking at <code>prepare_USERS.txt</code> as one that'll one day misbehave.</p></li>
<li><p>There's lot's of <em>zombie</em> code and characters that cannot be typed on a keyboard, consider removing the latter and editing the former to something either with; conditional logic and configs, or removing unnecessary commented code.</p></li>
<li><p>Functions and scripts can take a list of arguments, functions can also be passed references to lists (<code>arrays</code>) among other things via <code>local -n _ref_the_first="${1}"</code>, which hint, hint, is <em>magic sauce</em> for that project's <a href="https://github.com/S0AndS0/Jekyll_Admin/blob/master/shared_functions/arg_parser.sh" rel="nofollow noreferrer"><code>arg_parser</code></a> that I linked to in your question's comments; enables passing more than one <code>array</code> ;-)</p></li>
<li><p>Definitely look into <a href="https://www.shellcheck.net/" rel="nofollow noreferrer"><code>shellcheck</code></a> as it'll catch typos like <code>if [ "$PORT" = "" ]</code> in your code, output the line number to jump to to fix'em, as well as a message that may or may not be helpful at the time.</p></li>
<li><p>On the subject of <em><code>help</code></em> related things, I'll encourage you to try <code>man</code>, eg <code>man man</code>, <code>man iptables</code>, etc. The documentation built-in on various subjects is extensive. The other handy command I've run across for finding documentation is <code>apropos</code>, eg. <code>apropos iptables</code></p></li>
<li><p><em><code>trap</code>ing</em> some of the things you have is asking for trouble in some very bad ways, and other <em><code>trap</code>s</em> are going to be really painful to debug in the future, consider using some bits that my project does to aid debugging instead, eg...</p></li>
</ul>

<h3><a href="https://github.com/S0AndS0/Jekyll_Admin/blob/master/shared_functions/failure.sh" rel="nofollow noreferrer"><code>shared_functions/failure.sh</code></a></h3>

<blockquote>
  <p>Note, source code within links may be updated or slightly different in formatting, if this is by to much at some later date then <em>roll-back</em> changes to commit ID: <code>5d307b353fc83cfc3d51461a064e72cdb8f4176a</code>; currently shared under <a href="https://s0ands0.github.io/Jekyll_Admin/licensing/gnu-agpl/" rel="nofollow noreferrer">GNU AGPL</a> <code>version 3</code>.</p>
</blockquote>

<pre class="lang-bsh prettyprint-override"><code>#!/usr/bin/env bash

## Ensure the following line precedes calls to this function via trap
##    set -eE -o functrace
## Use the following line to call this function from other scripts
##    trap 'failure ${LINENO} "${BASH_COMMAND}"' ERR
failure(){
    local _lineno="${1}"
    local _msg="${2}"
    local _code="${3:-0}"
    local _msg_height="$(wc -l &lt;&lt;&lt;"${_msg}")"
    if [ "${_msg_height}" -gt '1' ]; then
        printf 'Line: %s\n%s\n' "${_lineno}" "${_msg}"
    else
        printf 'Line: %s - %s\n' "${_lineno}" "${_msg}"
    fi
    if ((_code)); then exit ${_code}; fi
    return ${_code}
}
</code></pre>

<h3><code>errors_tests.sh</code> pulled from <a href="https://github.com/S0AndS0/Jekyll_Admin/blob/master/jekyll_usermod.sh" rel="nofollow noreferrer"><code>jekyll_usermod.sh</code></a></h3>

<blockquote>
  <p>Trimmed a bit to keep things a bit <em>targeted</em> in topics being covered.</p>
</blockquote>

<pre class="lang-bsh prettyprint-override"><code>#!/usr/bin/env bash

## Exit if not running with root/level permissions
if [[ "${EUID}" != '0' ]]; then
  echo "Try: sudo ${0##*/} ${@:---help}"
  exit 1
fi

set -eE -o functrace


#
#    Set defaults for script variables; these maybe overwritten at run-time
#
## ... trimmed for brevity...

#
#    Boilerplate and script scoped defaults
#
## Find true directory script resides in, true name, and true path
__SOURCE__="${BASH_SOURCE[0]}"
while [[ -h "${__SOURCE__}" ]]; do
    __SOURCE__="$(find "${__SOURCE__}" -type l -ls | sed -n 's@^.* -&gt; \(.*\)@\1@p')"
done
__DIR__="$(cd -P "$(dirname "${__SOURCE__}")" &amp;&amp; pwd)"
__NAME__="${__SOURCE__##*/}"
__PATH__="${__DIR__}/${__NAME__}"

__AUTHOR__='S0AndS0'
__DESCRIPTION__='Spams error codes for trap example'


#
#    Source useful functions, note may overwrite previous defaults
#
## Provides     'failure'
source "${__DIR__}/shared_functions/failure.sh"
trap 'failure ${LINENO} "${BASH_COMMAND}"' ERR

## ... sourcing of other things, setup and
##     code logic/execution follows for now
##     generate some errors...

usage(){
    cat &lt;&lt;EOF
${__NAME__} 'SPAM'

${__DESCRIPTION__}


--help
    Print this message and exit

spam
    Returns two different error codes, repetition dependent

ham
    Returns error code '3'


# (C) GNU AGPL version 3, 2019, ${__AUTHOR__}
EOF
}

spam_errors(){
    _first_arg="${1,,}"
    case "${_first_arg}" in
        'spam')
            _scrubbed_first_arg="${_first_arg//${_first_arg/%spam/}/ }"
            printf '%s\n' "${_scrubbed_first_arg}" &gt;&amp;2
            return 1
        ;;
        'spam'*'spam')
            _scrubbed_first_arg="${_first_arg//${_first_arg//spam/}/ }"
            printf '%s\n' "${_scrubbed_first_arg}" &gt;&amp;2
            return 2
        ;;
        *'ham'*)
            printf '%s\n' "${_first_arg}" &gt;&amp;2
            return 3
        ;;
        *'help')
            usage
            exit 0
        ;;
    esac
    return 0
}


#
# Do the things...
#
_first_arg="${1:?${__NAME__} requires one argument, eg. ${__NAME__} 'spam'}"
spam_errors "${_first_arg}"
printf 'Escaped argument: %q\n' "${_first_arg}"
</code></pre>

<blockquote>
  <p>Note, <code>spam_errors</code> only exists for the purpose of showing multiple error generating lines as well as what happens when no errors are thrown.</p>
</blockquote>

<p>... the <em>gist</em> of which prints out information that helps in tracking down errors. Here's some example input/output...</p>

<pre class="lang-bsh prettyprint-override"><code>bash errors_tests.sh 'spam spam'; echo "# Exit Status: $?"
</code></pre>

<pre><code>Try: sudo errors_tests.sh spam spam
# Exit Status: 1
</code></pre>

<hr>

<pre class="lang-bsh prettyprint-override"><code>sudo bash errors_tests.sh
echo "# Exit Status: $?"
</code></pre>

<pre><code>errors_tests.sh: line 71: 1: errors_tests.sh requires one argument, eg. errors_tests.sh spam
# Exit Status: 1
</code></pre>

<hr>

<pre class="lang-bsh prettyprint-override"><code>sudo bash errors_tests.sh 'spam'; echo "# Exit Status: $?"
</code></pre>

<pre><code>spam
Line: 52 - return 1
# Exit Status: 1
</code></pre>

<hr>

<pre class="lang-bsh prettyprint-override"><code>sudo bash errors_tests.sh 'spam ham spam'
_last_exit_status="$?"
echo "# Exit Status: ${_last_exit_status:-0}"
</code></pre>

<pre><code>spam spam
Line: 57 - return 2
# Exit Status: 2
</code></pre>

<hr>

<pre class="lang-bsh prettyprint-override"><code>sudo bash errors_tests.sh 'ham'
_last_exit_status="${?:-0}"
echo "# Exit Status: ${_last_exit_status}"
</code></pre>

<pre><code>ham
Line: 62 - return 3
# Exit Status: 3
</code></pre>

<hr>

<pre class="lang-bsh prettyprint-override"><code>sudo bash errors_tests.sh 'lemon jam'
_last_exit_status="$?"
echo "# Exit Status: ${_last_exit_status:-0}"
</code></pre>

<pre><code>Escaped argument: lemon\ jam
# Exit Status: 0
</code></pre>

<hr>

<p>Now there's other things going on up there with them examples; <a href="https://www.tldp.org/LDP/abs/html/string-manipulation.html" rel="nofollow noreferrer">string manipulation</a>, <em>fancy</em> <code>source</code> usage based-off something I couldn't unsee from elsewhere on the <a href="https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself">SO network</a>, all sorts of perversions with <a href="https://www.tldp.org/LDP/abs/html/parameter-substitution.html" rel="nofollow noreferrer">parameter substitutions</a>; but the main take-away to take away is that I'm using <code>return</code> <code>n</code> <code>&gt;</code> <code>0</code> within functions to trip the <code>trap 'failure ${LINENO} "${BASH_COMMAND}"' ERR</code>, after setting <code>set -eE -o functrace</code> for more info on premature exits. Other things I think may be worth noting;</p>

<ul>
<li><p>In some implementations of Bash each pipe can be very costly, so try to get things done with built-ins where-ever possible.</p></li>
<li><p>Regardless of language, erring with info is a solid choice.</p></li>
<li><p><code>echo</code> is okay to use in the privacy of one's own terminal, and occasionally out of laziness when no variables are involved within a script, otherwise <code>printf</code> is generally the <em>better</em> choice.</p></li>
<li><p>That trick within the <code>usage</code> function you might see elsewhere with <code>-EOF</code> which <em>dedents</em> tabs (<code>\t</code>), or <code>'EOF'</code> to forbid expansion of variables (<code>$var</code>) and sub-shells (<code>$(ls some-dir)</code>); the latter is <em>groovy</em> to use when you don't want to escape (pre'ppend <code>\</code>) a bunch of examples, where as the former should be avoided to keep code accessible.</p></li>
</ul>

<p>I could probably go-on, maybe I will in a future update, but for now I think this is a good pausing point to digest some of the above.</p>
    </div>