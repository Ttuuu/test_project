<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Things look good and well organised at first glance. However, there are a few things you can make use of.</p>
<ol>
<li>Use f-string over using str.format. The former <a href="https://stackoverflow.com/a/43123579/1190388">is more performant</a>.</li>
<li>You can group the columns and iterate over them, instead of having multiple lines for each section. This way, you can add/remove to this iterable without having to change much of the code itself.</li>
<li>When using raw strings, you do not need to escape the <code>-</code> character, unless they are being used inside a character set (for regex).</li>
<li>The <code>build_table</code> can be split to another separate function.</li>
<li>Use <a href="https://devdocs.io/python%7E3.8/library/typing" rel="nofollow noreferrer">type hinting</a>.</li>
<li>If you're not using <code>kwargs</code>, no need to declare them.</li>
</ol>
<hr>
<p>Rewritten snippets (you might need to fit them in your code accordingly):</p>
<pre><code>sections = (
    {'tag': "pandas", "marker": "pandas"},
    {'tag': "beautifulsoup", "marker": "bs"},
    {'tag': "python", "site": "codereview", "marker": "code_review"},
)
for section in sections:
    questions_list = fetch_questions(start, end, **section)
    # Using `**section` might throw an error for the unknown kwarg: `marker`.
    # But it is trivial to handle that.
    .
    ...
</code></pre>
<hr>
<pre><code>def replace_chunk(content: str, marker: str, chunk: str, inline: bool = False):
    """ Replace chunks of README.md """
    r = re.compile(
        rf"&lt;!-- {marker} starts --&gt;.*&lt;!-- {marker} ends --&gt;",
        re.DOTALL,
    )
    if not inline:
        chunk = "\n{}\n".format(chunk)
    chunk = f"&lt;!-- {marker} starts --&gt;{chunk}&lt;!-- {marker} ends --&gt;"
    return r.sub(chunk, content)
</code></pre>
<hr>
<pre><code>def get_item_string(item):
    # to prevent code from breaking if special characters are present
    title = re.sub(r'[^\w\s]', '', item["title"])
    return f"* [{title}]({item['link']}) - {item['score']} votes"

def build_table(*args):
    """ Build a markdown table from a list of entries. """
    columns = [
        "\n".join(
            map(get_item_string, chunk["items"][:8])
        )
        for chunk in args
    ]
    return columns
</code></pre>
    </div>