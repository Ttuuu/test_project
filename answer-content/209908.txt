<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As Your Common Sense noted in the comments, leveraging <a href="http://php.net/manual/en/language.oop5.autoload.php" rel="nofollow noreferrer">auto loading classes in PHP</a> can help clean up your includes for the controller files (and model classes too).</p>

<p>Some additional improvements:</p>

<ul>
<li><p><strong>Tight Coupling to Config class:</strong> Create an instance of your Config class, and pass it to the constructor of your App class, instead of using static methods.</p>

<pre><code>$app = new App(new Config());
</code></pre>

<p>Then pass this the instance of <code>Config</code> into your <code>RoutesTree</code> class:</p>

<pre><code>$routesTree = new RoutesTree($this-&gt;config);
</code></pre>

<p>This gives you loose coupling between the App, RoutesTree and Config classes by way of <a href="https://en.wikipedia.org/wiki/Dependency_injection" rel="nofollow noreferrer">Dependency Injection</a>.</p></li>
<li><p><strong>Separate controllers from ouput:</strong> I think this is the area where you are violating the "V" in MVC. Your example controller <code>echo</code>'s directly to the standard output. A controller should produce a result, but something else should be responsible for sending this back to the client. Most frameworks opt for an object that encompasses the data to be rendered, and the name of a view used to render it.</p></li>
<li><p><strong>Convention based URL mappings:</strong> Instead of keeping an array of controller names to controllers, use the controller name from the URL to return the right controller:</p>

<pre><code>// http://localhost/app/test maps to TestController
$controller = ucfirst('test') . 'Controller';

return new $controller();
</code></pre>

<p>You can still build in a way to do custom routing, but you'll find a pattern to your URLs and the controllers that respond to them</p></li>
<li><p><strong>No restriction on HTTP methods:</strong> Your controller actions appear to respond to both GET and POST requests. This can be a security flaw when you allow a GET request to modify data. Consider this request:</p>

<pre><code>HTTP/1.1 POST http://localhost/app/createComment

comment=Hacked&amp;post_id=3
</code></pre>

<p>That's all fine and dandy until someone puts this HTML on a random page on the internet, and tricks your users into visiting it:</p>

<pre><code>&lt;script src="http://localhost/app/comments?comment=Hacked&amp;post_id=3"&gt;&lt;/script&gt;
</code></pre>

<p>Upon visiting the page, if you are logged in to your site the browser will issue a GET request to <code>http://localhost/app/comments?comment=Hacked&amp;post_id=3</code>. Since your application does not check if the client has issued a GET or POST request, blog post #3 gets a new comment each time you visit the page.</p>

<p>Sure the browser can't understand the result of this HTTP request as JavaScript, but that doesn't stop the browser from sending the request, along with your session cookies.</p></li>
</ul>
    </div>