<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll try to cover the response part.</p>

<blockquote>
  <p><code>SingleProduct</code> and <code>BundleProduct</code> should be polymorphic.
  <code>ConcretePrice</code>, <code>DiscountedPriceByAmount</code>, <code>DiscountedPriceByPercentage</code> should be polymorphic.</p>
</blockquote>

<p>I think they are talking about the following:</p>

<ul>
<li>you need to have a table of products</li>
<li>and a table of prices

<ul>
<li>this is not exactly a requirement, but I guess this would be a very logical step because at some point you might need to handle price history, different pricelists due to geography, currencies, payment methods, etc.; but again: this does not seem to be a requirement at this point</li>
</ul></li>
<li>you need to have a several entities per table, i.e. one "physical" record upon retrieval could be resolved into one of several classes (specifics are here: <a href="https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/inheritance-mapping.html" rel="noreferrer">https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/inheritance-mapping.html</a>)

<ul>
<li>e.g. there is your entity <code>Product</code>, which should be an abstract class with mostly protected members, and some public methods that make sense for any kind of product</li>
<li>then there should be <code>SingleProduct</code> inherited from Product, which exposes additional members specific to this kind of product, and maybe override (or provide implementation) to some members of <code>Product</code></li>
<li>and <code>BundleProduct</code> too, inherits from <code>Product</code></li>
<li>as for what exactly must be polymorphic, I guess things like <code>getPrice()</code> -- implementation would be different for <code>SingleProduct</code> and <code>BundleProduct</code></li>
<li>how exactly to do that -- the link above talks about several ways, and their procs and cons; I'd go with "Single Table Inheritance" for the sake of simplicity</li>
<li>and of course you need one-to-many/many-to-one relations, e.g. '<code>BundleProduct</code> has many <code>ProductBundleItem</code>'; currently you're manipulating with IDs directly, but that's not how Doctrine encourages you to do things (see example below, where I talk about REST response)</li>
</ul></li>
</ul>

<p>So, to reiterate:</p>

<ul>
<li>currently you have one <code>Product</code> class with all price/discount/bundling functionality built-in</li>
<li>you've been asked to make a nice hierarchy of classes (<code>SingleProduct</code>, <code>BundleProduct</code>, etc.) and make them do one thing, but do it good (think less <code>if</code> statements, more class diversity)</li>
<li>this does not imply you should put all functionality there -- a service is a good place to have your business logic; but functionality related to data itself -- how to interpret price, discounts, bundles -- that's a task for some code inside entities</li>
</ul>

<blockquote>
  <p>The computation of the overall sum of prices for the order should make no assumption about how the individual price was calculated (fix price, or discounted).</p>
</blockquote>

<p>This one is a natural continuation of previous point.</p>

<p>Currently your <code>OrderService</code> has pretty complex code that calculates individual product price. But that's not its concern! If at some place it has a reference to <code>Product</code> -- that is, base product class -- it should not check if this is a concrete product, or bundle, if discount is in effect. It should just be able to do this:</p>

<pre><code>$product-&gt;getPrice();
</code></pre>

<p>And your class hierarchy should take care about specifics. Re how to achieve that, see above.</p>

<blockquote>
  <p>The response should provide a deep object structure (as opposed to a flat list) that preserves the semantics of the model and is suitable for rendering.</p>
</blockquote>

<p>I believe what they talk about is how your API response looks when is compared to your DB structure: it should be really close, basically 1-to-1.</p>

<p>E.g. your method <code>\App\Service\OrderService::getOrder</code> which prepares data for <code>/customer/orders/single/{id}</code> route:</p>

<ul>
<li>route could be <code>/customer/orders/{id}</code> -- the fact that it is 'single' is already obvious, as API user does <code>GET</code> with URL containing ID.

<ul>
<li>doing <code>PUT</code> to the same URL would do update of order</li>
<li>doing <code>POST</code> to <code>/customer/orders</code> (instead of <code>/customers/orders/save</code>) would create a new one</li>
<li>etc., this is basically any REST API around -- URL and HTTP method clearly defines what kind of operation that particular API call assumes</li>
</ul></li>
<li>result of <code>getOrder()</code> is some custom array with items like 'order' and 'orderItems', but it could be literal representation of your object hierarchy (your hierarchy is rather vague at this moment due to lacking relations between entities, so, I'm just guessing here):</li>
</ul>

<pre><code>GET /customer/orders/id
{
    timestamp: '...',
    address: {
       billing: { city: ..., country: ...},
       shipping: { city: ..., country: ...}
    },
    items: [
        product: {
            name: '...',
            price: ...
        },
        quantity: ...
    ],
    total: ...
}
</code></pre>

<p>As you can see, this sample JSON contains implicit (from Doctrine point of view, anyway) relations from your code:</p>

<ul>
<li>order points to several order items</li>
<li>order item points to one product</li>
<li>order item also has quantity field</li>
<li>order has total field</li>
<li>order points to one or more addresses of different kind</li>
</ul>

<p>So, resulting structure should be rich in data, deep (I could get value of order.address.billing.city), and exactly reflect your data structures ("physical" DB records, then your polymorphic entities).</p>

<p>I hope that helps.</p>
    </div>