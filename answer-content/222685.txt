<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Getting Input</h2>

<pre><code>def get_attempts():
    """
    returns # attempts user wants
    """
    while True:
        try:
            attempts = int(input("How many incorrect attempts do you want? [1-25] "))
        except:
            print('There was a error. Enter an interger between 1 and 25!\n')
            continue
        else:
            return attempts
</code></pre>

<p>You've got some unnecessary statements here.  If you did not execute <code>continue</code> in the <code>except</code> clause, what would happen?  The control wouldn't go into the <code>else:</code> clause, so it would reach the end of the <code>while True:</code> body, and loop around to the top ... just like executing in the case of executing the <code>continue</code>.  So you can remove that statement.</p>

<p>Why the <code>else:</code> clause?  It is executed when execution of the <code>try:</code> block doesn't go into the <code>except:</code> clause.  So, if the statements from the <code>else:</code> clause are moved into the try block, the execution would be similar.  The only difference is that an exception raised during the <code>else:</code> clause won't go into the <code>except:</code>, but what exception is likely to be raised by <code>return attempts</code>?  None.  So why complicate the <code>try: ... except:</code> with an <code>else:</code>?  Move <code>return attempts</code> into the body of the <code>try:</code>.</p>

<p>What exceptions are likely to be raised in the <code>try:</code> block, anyway?  A <code>ValueError</code>, when the input can't be parsed as a integer.  What else?  Maybe <code>EOFError</code> if the user tries to run the program with a test case redirected from standard input?  You'd catch the <code>EOFError</code>, print a message, loop back and try for more input, and get another <code>EOFError</code>.  Endless loop.  Yuck.  But it gets worse.  The user, upon seeing thousands of repeated lines will press <code>Ctrl-C</code> to stop the program, which raises (wait for it) a <code>KeyboardInterrupt</code> exception, which will get caught, a message will be printed, and then execution will loop around and ask for more input.  You can't break out of the program.  <strong>Don't catch all exceptions</strong>; catch only the ones you actually expect.</p>

<p>If the user types in <code>26</code>, which is not in the range of <code>1-25</code>, the program ... happily accepts the input.  You aren't testing the value.</p>

<p>Reworked code (version 1):</p>

<pre><code>def get_attempts():
    """
    return # of attempts user wants
    """
    while True:
        try:
            attempts = int(input("How many incorrect attempts do you want? [1-25] "))
            if 1 &lt;= attempts &lt;= 25:
                return attempts
        except ValueError:
            print('There was an error.  ', end='')

        print('Enter an integer between 1 and 25!\n')
</code></pre>

<p>The next function <code>get_min_len()</code> looks eerily familiar.  You could make exactly the same changes described above.  Which sounds like WET code, where WET stands for Write Everything Twice.  The opposite of WET is DRY: Don't Repeat Yourself.  So let's dry up this pair of functions.</p>

<pre><code>def input_int(prompt, minimum, maximum):
    """Ask user for an integer within a restricted range"""

    prompt += f" [{minimum}-{maximum}] "

    while True:
        try:
            value = int(input(prompt))
            if minimum &lt;= value &lt;= maximum:
                return value
        except ValueError:
            print('There was an error.  ', end='')

        print(f'The value must be an integer between {minimum} and {maximum}\n')

def get_attempts():
    return input_int("How many incorrect attempts do you want?", 1, 25)

def get_min_len():
    return input_int("What minimum word length do you want?", 4, 16)
</code></pre>

<h2>Random Word</h2>

<p>Continuing the WET -vs- DRY theme:</p>

<pre><code>def pick_word(minlen):
    # pick random word from word list

    random_word = random.choice(word_list)

    while len(random_word) &lt; minlen:
        random_word = random.choice(word_list)

    return random_word
</code></pre>

<p>You have two identical statements: <code>random_word = random.choice(word_list)</code>.  You need the first, because you want to test <code>len(random_word) &lt; minlen</code> in the <code>while</code> loop condition, so you need to have defined <code>random_word</code>.  But do you need to actually select a random word to do it?  Or could any sufficiently short value cause the loop to be entered and executed?</p>

<pre><code>    random_word = ""

    while len(random_word) &lt; minlen:
        random_word = random.choice(word_list)
</code></pre>

<p>How many times do you expect to loop until you choose a word of sufficient length?  2, maybe 3 times if you are unlucky?  What if the user has requested long words, where minimum length is 16?  There might only be a fraction of a percent of words that long in the list of 40,000 words.  It might loop many, many times before it stumbles upon "antidisestablishmentarianism".</p>

<pre><code>    long_words = [words for word in word_list if len(word) &gt;= minlen]

    if len(long_words) == 0:
        raise RuntimeError("No words long enough in word list!")

    random_word = random.choice(long_words)
</code></pre>

<p>Now we've guaranteed we can pick a word in one try, so the <code>while ...:</code> loop is unnecessary.</p>

<h2>Iterating over two lists at once</h2>

<p>The <code>fill_word()</code> method iterates over both <code>covered_word</code> and <code>main_word</code>, searching for letters which match <code>user_guess</code> in <code>main_word</code> and filling them into the <code>covered_word</code>.</p>

<p>It does so with <code>covered_word_list</code> and <code>idx</code> as temporaries.</p>

<p>Python allows iterating over 2 (or more!) iterable objects at once, using the <code>zip()</code> function.  This makes implementing the function almost trivial.</p>

<pre><code>def fill_word(main_word, covered_word, user_guess):
    """
    fills in hidden word as user guesses correctly
    """

    return ''.join(m if m == user_guess else c for m, c in zip(main_word, covered_word))
</code></pre>

<p>That's a pretty dense <code>return</code> statement.  Let's break it down.</p>

<ul>
<li>String are iterable objects.  When you iterate over a string, you get the characters one at a time.</li>
<li><code>zip(main_word, covered_word)</code> iterates over <code>main_word</code> and <code>covered_word</code>, simultaneously, taking one character from each</li>
<li><code>for m, c in ...</code> takes the characters from each string, and calls them <code>m</code> (for main) and <code>c</code> (for covered).</li>
<li><code>m if m == user_guess else c</code> evaluates to either the <code>m</code> (the newly guessed character if <code>m == user_guess</code> is true) or <code>c</code> (the original character from the covered string).</li>
<li><code>''.join(...)</code> takes each character as they are generated above, from the corresponding pairs of characters, and joins them back into one long string.</li>
</ul>

<h2>Variable names and f-strings</h2>

<pre><code>def display_info(covered_word, atmps, incorrect):

    print("Word: {}".format(covered_word))
    print("Attempts Remaining: {}".format(atmps))
    print("Previous Guesses: {}".format(incorrect))
</code></pre>

<p><code>covered_word</code> is fine, <code>incorrect</code> barely clears the bar, but <code>atmps</code>?  What is that?  Use clearer variable names.  Please.</p>

<p>I've used them above, but I'll call out attention to them here.  Formatted strings, or <code>f-strings</code>, are a new feature in Python, which allows you to embed variable names right into strings.  Instead of having many characters separating a <code>{}</code> code in a format string, and the variables being passed to the <code>.format(...)</code> call, you can directly tell what variable is being substituted where into a string.  You just need to prefix the string with an <code>f</code>.</p>

<pre><code>def display_info(covered_word, attempts_remaining, incorrect_guesses):

    print(f"Word: {covered_word}")
    print(f"Attempts Remaining: {attempts_remaining}")
    print(f"Previous Guesses: {incorrect_guesses}")
</code></pre>

<h2>String input</h2>

<p><code>input()</code> returns a string.  There is no need to wrap <code>str(...)</code> around an <code>input()</code> call.  Since no conversion is being done, there won't be any exception that may arise.  (<code>EOFError</code> and <code>KeyboardInterrupt</code> not withstanding, but you don't want to catch either of those and loop to try to get input again!)</p>

<p>So, <code>get_guess()</code> can be simplified.  Remove the <code>try: ... except:</code> entirely.  Remove the unnecessary <code>continue</code> statements.  My review is bordering on WET.  I need to stop repeating myself.  These points apply to <code>get_guess()</code>, <code>start_game()</code>, and <code>replay()</code>.  You are asking "Yes/No" in two locations?  Like the <code>input_int()</code> above, perhaps you want a <code>ask_yes_no(prompt)</code> function.</p>
    </div>