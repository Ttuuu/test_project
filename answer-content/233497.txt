<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you truly don't want to convert to sets, perhaps use the underlying idea that they implement. Note that <code>get_hash</code> is pretty arbitrary and definitely could be improved. <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">Here's a resource on improving the hashing and choice of <code>hash_map</code> size</a></p>

<pre><code>def get_hash(thing, hash_map):
    hashed = ((hash(thing) * 140683) ^ 9011) % len(hash_map)
    incr_amount = 1
    while hash_map[hashed] is not None and hash_map[hashed] != thing:
        hashed += incr_amount ** 2
        incr_amount += 1
        if hashed &gt;= len(hash_map):
            hashed = hashed % len(hash_map)
    return hashed

def sorted_lists_intersection(a, b):
    hash_map = [None for _ in range(len(a) * 7 + 3)]

    for x in a:
        hash_map[get_hash(x, hash_map)] = x

    return filter(lambda x: x == hash_map[get_hash(x, hash_map)], b)
</code></pre>

<p><strong>Edit based on comments:</strong></p>

<p>Here is a O(m*n) <a href="https://en.wikipedia.org/wiki/In-place_algorithm" rel="nofollow noreferrer">in-place</a> answer</p>

<pre><code>def intersection_sorted_list(a, b):
    return filter(lambda x: x in a, b)
</code></pre>

<p>Now, if the lists are sorted we can speed this up a bit by shrinking the range we check against after each successive match. I believe this makes it O(m+n) time. </p>

<pre><code>def intersection_sorted_list(a, b):
    start_indx = 0
    for x in b:
        for i in range(start_indx, len(a)):
            if a[i] == x:
                yield a[i]
            if a[i] &gt;= x:
                start_indx = i + 1
                break
</code></pre>
    </div>