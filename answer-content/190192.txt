<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm new to this SE community and I'm not sure I can address all your questions, but here's my two cents about it, edits and comments are welcomed:</p>

<ol>
<li><p>If you want to avoid typing <code>unsigned int</code> every time you use it, you can create an alias by either typing <code>using</code> just like you do (I'm not familiar with this one, I only use it for namespaces), or you could use the following: </p>

<pre><code>typedef unsigned int uint;
</code></pre>

<p><code>typedef</code> is especially used for giving another name to a given data type in C and C++. </p></li>
<li><p><code>is_open()</code> returns <a href="http://www.cplusplus.com/reference/fstream/ifstream/is_open/" rel="nofollow noreferrer">whether the stream is currently associated to a file</a>. You could use the <code>fail()</code> method instead. This one checks the overall health of the stream, for example checking if the stream has entered a fail state from trying to read an invalid value. <code>is_open()</code> <a href="https://stackoverflow.com/questions/24097580/ifstreamis-open-vs-ifstreamfail">does not check this kind of things.</a></p></li>
<li><p>I'll skip this part.</p></li>
<li><p><code>max_element()</code> returns an iterator to the largest element in the range [first, last]. There are 2 prototype for this function, based on different concepts. The one you're using has 3 parameters and is based on <em>comp</em>, and not on <code>operator&lt;</code> as explained <a href="http://www.cplusplus.com/reference/algorithm/max_element/" rel="nofollow noreferrer">here</a>. I don't know much about <code>comp</code> but my guess is that his behavior is different from <code>operator&lt;</code>, which explains why you have different results when comparing both computing methods.</p></li>
<li><p>Usage of the underscore symbol is something ruled by conventions. I'm not sure about this but <strong>IMO you used it well</strong> and prevented confusion between the constructors parameters and your object attributes. I've seen it written this way lots of times on tutorials so I don't know why it would be wrong to do it. And just for the record, I hate the <code>m_my_variable</code> syntax as well. To me, the <em>m, l and g letters</em> don't bring anything more except confusion. But again, it's a convention and surely many people like it a lot :)</p></li>
</ol>
    </div>