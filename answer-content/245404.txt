<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you asked about memory and run-time impact, I'll focus on memory.</p>
<h2>Memory</h2>
<p><strong>IPv4</strong></p>
<p>You store a IPv4 address as <code>String</code>. In Java a <code>String</code> can be represented by a <code>byte</code> per character, so 192.167.0.1 becomes 11 bytes.  Also a String is internally a reference, which also costs 8 bytes on 64 bit.</p>
<p><code>192.167.0.1</code> will therefore cost at least 11 + 8 = 19 bytes.</p>
<p>A IPv4 addres could be represented as an <code>int</code> (32 bit), because a IPv4 address consist of 4 bytes. This saves a lot of room.</p>
<p>See for example: <a href="https://stackoverflow.com/a/16642424/461499">https://stackoverflow.com/a/16642424/461499</a></p>
<p><strong>List of connections</strong></p>
<p>If you really want to squeeze, you could not initialize the list of connections (saving an empty <code>ArrayList</code> when there are no connections). Just create it on the fly in the setter and make the getter return <code>Collections.emptyList()</code> if the internal list is <code>null</code></p>
<p>If the list of connections becomes <em>really</em> long, you might consider storing them in an special datastructure, for example as packed integer list.</p>
    </div>