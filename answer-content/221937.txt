<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Couple of things I found myself so far.</p>

<h3>Performance wise</h3>

<hr>

<p><a href="https://stackoverflow.com/questions/600795/asynchronous-vs-multithreading-is-there-a-difference">Huge mistake</a>, to use <code>std::async</code> for multiprocessing, while testing it on my local machine with only one CPU it worked okay, using all the cores, but when switched to test server with more than one CPU, I failed to use all of them (actually 32). Changing this <code>std::thread</code> , without any pain btw, did the job and I wasable to utilize all the CPUs on the test server.</p>

<h3>Design</h3>

<hr>

<p>My so-called "optimized" separation of work of the threads prevents me from implementing graceful shutdown eventually because if I need to calculate 1000 terms of this formula, work is separated like so </p>

<p><img src="https://raw.githubusercontent.com/kuskmen/Random/master/ParallelPi/assets/optimized-intervals.png"></p>

<p>where 1,2,3... are thread_ids. A separation like this is good for maintaining equal work among your threads, but like I said it prevents the ability to provide graceful shutdown due to calculation not being done in a serial matter.</p>

<hr>

<p>Well, so far, this is what I've found, I will add more to the list whenever I found other problems with my code. </p>
    </div>