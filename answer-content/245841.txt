<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Return the number of bytes written to <code>buf</code></h1>
<p>You will notice that functions like <code>sprintf()</code> and <code>strftime()</code> don't return a pointer, but rather an integer that says something about the number of bytes that (would) have been written to the output buffer. This is much more useful than just copying the pointer to <code>buf</code>, which doesn't give the caller any new information.</p>
<h1>Where is the string returned by the callback function allocated?</h1>
<p>The callback function returns a pointer to a string. But where is this allocated? Your <code>format()</code> function doesn't call <code>free()</code>, so either the string should be stored in some statically allocated array, or it is allocated on the heap. In the former case, unless you return a pointer to a string literal, your <code>format()</code> function can only be used from one thread at a time. If you return memory that is allocated on the heap, then you have to keep track of it so the caller can clean up all the allocated memory once <code>format()</code> returns.</p>
<h1>Consider having the callback function write into <code>buf</code> directly</h1>
<p>To solve the above issue, and to avoid an unncessary copy, you can pass a pointer into the buffer and the remaining size to the callback function, and have the callback function write directly to the buffer. For example:</p>
<pre><code>char*
format(const char* format, char *buf, size_t len, size_t (*cb)(char c, void* ctx, char *buf, size_t len), void *ctx) {
    ...
        if (*curr == '%' &amp;&amp; *next) 
        {
            if (*next == '%') // escaped %, copy it over and skip
            {
                buf[i++] = *format++;
                continue;
            }
            i += cb(*next, ctx, buf + i, len - i - 1);
            ++format;
            continue;
        }
    ...
}
</code></pre>
<p>And then your callback function can look like:</p>
<pre><code>size_t example_cb(char c, void *ctx, char *buf, size_t len) {
    if (c == 'f') {
        if (len &gt; 3)
            len = 3;
        memcpy(buf, "FOO", len);
        return len;
    }

    return 0;
}
</code></pre>
<p>You can create a helper function to avoid repeating the above construction, and to safely write any string to the buffer:</p>
<pre><code>size_t emplace_string(const char *str, char *buf, size_t max_len) {
    size_t len = strlen(str);
    if (len &gt; max_len)
        len = max_len;
    memcpy(buf, str, len);
    return len;
}
        
size_t example_cb(char c, void *ctx, char *buf, size_t len) {
    switch (c) {
    case 'f':
        return emplace_string("FOO", buf, len);
    case 'B':
        return emplace_string("bar", buf, len);
    ...
    default:
        return 0;
    } 
}
</code></pre>
    </div>