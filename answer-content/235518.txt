<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Modifying state in a recursive function is a bad idea if you can avoid it. If a function does not modify state, it becomes a pure function; such functions are easier to reason about and test. To produce output, the best way is usually to <em>return</em> a value.</p>

<p>But first, a word on the <a href="https://stackoverflow.com/questions/2603692/what-is-the-difference-between-tree-depth-and-height">terminology</a> you chose. In computer science, the <em>depth</em> of a tree node refers to how far it is from the root node; in other words, how far you can walk up. The value you are computing, is how far you can walk down from a node, which is commonly called the <em>height</em> of a node.</p>

<p>Your original function, renamed to <code>height</code>, is:</p>

<pre><code>def height(node, currentHeight, currentMaxContainer):
    currentHeight += 1
    if currentHeight &gt; currentMaxContainer[0]:
        currentMaxContainer[0] = currentHeight

    for child in node.children:
        if child is not None:
            height(child, currentHeight, currentMaxContainer)
</code></pre>

<p>Let's modify it so it doesn't modify <code>currentMaxContainer</code>, but returns a value instead:</p>

<pre><code>def height(node, currentHeight):
    for child in node.children:
        if child is not None:
            child_height = height(child, currentHeight)
            if child_height &gt; currentHeight:
                currentHeight = child_height

    return currentHeight + 1
</code></pre>

<p>Now it finds the maximum height of its children, adds 1 (for the current node), and returns that. Usage is now <code>print(height(startNode, startHeight))</code>, or <code>print(height(rootNode, 0))</code>.</p>

<p>We can make the fact that it finds the maximum height of its children more explicit:</p>

<pre><code>def height(node, currentHeight):
    max_height = 0
    for child in node.children:
        if child is not None:
            child_height = height(child, 0)
            if child_height &gt; max_height:
                max_height = child_height

    return currentHeight + max_height + 1
</code></pre>

<p>This brings into question: why is <code>currentHeight</code> passed as an argument? It's only used once, and added to the total result. Really, the function doesn't care what some height (depth?) above the current node is, it should only concern itself with the height <em>below</em> the current node. It's a bit of outside state that is irrelevant. After all, you can just add any <code>currentHeight</code> value to the return value of <code>height()</code>!</p>

<pre><code>def height(node):
    max_height = 0
    for child in node.children:
        if child is not None:
            child_height = height(child)
            if child_height &gt; max_height:
                max_height = child_height

    return max_height + 1
</code></pre>

<p>This finds the height of the subtree referred to by <code>node</code> (a definition now completely consistent with common CS terminology).  Usage is now <code>print(height(startNode) + startHeight)</code>, or <code>print(height(rootNode) + 0)</code>, which obviously becomes <code>print(height(rootNode))</code>.</p>

<p>Having removed unnecessary state from the function, it becomes easier to simplify. First, let's consider that <code>None</code> case; a child that is <code>None</code> should not increase <code>max_height</code>, that's what the <code>if</code> is for. But if we specify that <code>height(None) = 0</code>, then we don't need that test in the loop:</p>

<pre><code>def height(node):
    if node is None:
        return 0

    max_height = 0
    for child in node.children:
        child_height = height(child)
        if child_height &gt; max_height:
            max_height = child_height

    return max_height + 1
</code></pre>

<p>The remaining loop is just finding the maximum of <code>height(child)</code> for all children, which can be expressed a lot shorter and more Pythonic:</p>

<pre><code>def height(node):
    if node is None:
        return 0

    return max(map(height, node.children), default=0) + 1
</code></pre>

<p>Alternatively, we could filter out the <code>None</code> children like we did before with the explicit test:</p>

<pre><code>def height(node):
    return max(map(height, filter(None, node.children)), default=0) + 1
</code></pre>

<p>But I like the previous version better, because it is more explicit.</p>

<p>Those <code>None</code> children are a bit of a recurring headache though, and that will be the case for any code that has to iterate over a node's children. I recommend simply disallowing that case. In other words, <code>node.children</code> should only contain (0 or more) valid children, never any <code>None</code>s. This should simplify a lot of code that interacts with your trees. The function then is simply:</p>

<pre><code>def height(node):
    return max(map(height, node.children), default=0) + 1
</code></pre>

<p>And finally, this function should really be a method on the class:</p>

<pre><code>class Node:
    ...

    def height(self):
        return max(c.height() for c in self.children), default=0) + 1
</code></pre>

<p>Usage then finally becomes <code>print(startNode.height() + startHeight)</code>, or <code>print(rootNode.height())</code>.</p>

<p>Note that tree structures are very common, so there are libraries implementing them along with common tree operations. You may want to use one of those, or perhaps look at their APIs and/or source for inspiration. One such library for Python is <a href="https://pypi.org/project/anytree/" rel="nofollow noreferrer">anytree</a> (no affiliation or endorsement).</p>
    </div>