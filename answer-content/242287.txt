<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments and Observations</h2>
<p>On code review we review working code, it is best to remove all debug code prior to posting the question on code review, so that we don't suspect the code isn't working.</p>
<p>Don't include code that isn't used, this is actually a bad programming practice. Of the 3 macros in the code, <code>LEN(x)</code>, <code>MAX(x,y)</code> and <code>MIN(x,y)</code> only <code>LEN(x)</code> is being used. Including unused code can confuse maintainers of the code. It increases the amount of code they have to go through when fixing bugs or adding new features. Never expect to be the only one that needs to reads or modifies the code, write for the audience.</p>
<p>Note, the first answer for this <a href="https://stackoverflow.com/questions/3437404/min-and-max-in-c">stackoverflow.com question</a> provides better definitions for <code>MAX(x,y)</code> and <code>MIN(x,y)</code>.</p>
<p>If you are using <code>stdin</code> for input, there is no reason to use <code>X11</code>, the whole point of <code>X11</code> is to provide graphic user interfaces. Don't mix text input with graphic input.</p>
<p>If you're not going to use the advice in the reviews, why bother to post to code review? Going back through your questions, I'm not the first person to remark on this.</p>
<h2>Choice of Language for Graphic Programming</h2>
<p>Prefer C++ over C for graphic programs. Graphic programming is generally Object Oriented and C++ is an object oriented language. Some of the benefits are that you can create a basic class/type for a window, menu or label and then add to that class through inheritance, which removes a lot of programming.</p>
<p>Another benefit of C++ over C is the improved ability of error handling through exceptions which also allows recovery. <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/definition.html" rel="nofollow noreferrer">An exception is an event which occurs during the execution of a program</a>. Exceptions are available in most modern programming languages. Recovery means that the program can return to a known state after an error, which is much better than exiting the program.</p>
<h2>Avoid calling exit() From Lower Level Functions</h2>
<p>The only way to exit the program is a lower level function where <code>exit(EXIT_FAILURE)</code> is called, this is not a good programming practice in C. It prevents the program from recovering or cleaning up after itself and can have side effects. If this was an operating system instead of a compiler it would bring the system down. A better way would be to call <a href="https://stackoverflow.com/questions/14685406/practical-usage-of-setjmp-and-longjmp-in-c">setjmp() in main.c and longjmp()</a> where the error occurs. To use <code>setjmp()</code> and <code>longjmp()</code> include <a href="https://en.wikipedia.org/wiki/Setjmp.h" rel="nofollow noreferrer">setjmp.h</a>. The call to <code>exit()</code> should really only occur if there is no recovery path, it is always a good practice to exit from main.</p>
<h2>Prefer System Define Macros Over Hard Coded Numbers</h2>
<p>The standard header file <code>stdlib.h</code> includes system macro definitions for <code>EXIT_FAILURE</code> and <code>EXIT_SUCCESS</code> these make the code much more readable than <code>return 0;</code> or <code>return 1;</code> in <code>main()</code> or <code>exit(1);</code> in a sub function. Using these macros are a best practice.</p>
<h2>Global Variables</h2>
<p>As previously mentioned in your <a href="https://codereview.stackexchange.com/questions/241843/c-word-frequency-counter">last question</a> global variables generally are considered a bad practice because they make the code harder to write, read, debug and maintain because without searching the whole program it's not clear where the variables are modified. Use local variables whenever possible, and pass necessary information into functions as needed.</p>
<h2>Complexity</h2>
<p>The code in the functions <code>main()</code>, <code>static void drawmenu(void)</code> and <code>static void calcmenu(struct Menu *menu)</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>
<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>Break the code into smaller functions, with an eye for reuse.</p>
<h2>Struct and Variable Names</h2>
<p>The good here is that you are generally using variable names longer than one character (exceptions such as <code>p</code> in <code>calcmenu</code> should be noted), the bad is that the variables names are still to short or use abbreviations. This program doesn't need commenting as much as it needs self documenting code. A variable called <code>geom</code> might be something other than geometry, what geometry is it referring to. What is <code>menu-&gt;w</code>? when I'm fixing code I don't have time to go searching for comments.</p>
    </div>