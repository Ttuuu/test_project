<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rotara already mentioned some great points - the comments can definitely be improved and follow common conventions, sorting should happen on copies of the data instead of the original data, and the input should be validated. Consider the case of <code>mean</code> when an empty array is passed in. The value of <code>numbers.length</code> will be <code>0</code> so this leads to division by zero, which results in <code>NaN</code>. Perhaps it would be wise to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw" rel="nofollow noreferrer"><code>throw</code></a> an exception in that case.</p>
<p>Let's look at the <code>mean()</code> function. It has a traditional <code>for</code> loop, though the iterator variable, i.e. <code>i</code>, is only used to dereference values in the array. That could be changed to the simpler syntax of a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code> loop</a></p>
<pre><code>const mean = (numbers) =&gt; {
  let total = 0;

  for (const num of numbers) {
    total += num;
  }
  return total / numbers.length;
};
</code></pre>
<p>Moreover, a functional approach could be used with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" rel="nofollow noreferrer"><code>Array.reduce()</code></a>:</p>
<pre><code>const sum = (a, b) =&gt; a + b
const mean = numbers =&gt; {
  return numbers.reduce(sum, 0) / numbers.length;
}
</code></pre>
<p>I tried these various functions with an array of five elements, as well as <a href="https://jsperf.com/mean-comparison" rel="nofollow noreferrer">fifteen elements</a>. It seems the original code is somewhat faster than the other approaches in FF and Chrome. So for a library that may be used with many projects it may make sense to keep with the original syntax. While I don't condone plagiarism I did peek at the source of <a href="https://mathjs.org/" rel="nofollow noreferrer">mathjs</a> and saw that its <a href="https://github.com/josdejong/mathjs/blob/develop/src/function/statistics/mean.js#L78" rel="nofollow noreferrer"><code>mean()</code></a> uses a custom function <a href="https://github.com/josdejong/mathjs/blob/develop/src/utils/collection.js#L27" rel="nofollow noreferrer"><code>deepForEach()</code></a> which is basically a traditional <code>for</code> loop.  As <a href="https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/" rel="nofollow noreferrer">this article</a> explains, the <code>for...of</code> loop uses an iterator method for each iteration and that is the cause of the slower execution.</p>
<p>As <a href="https://www.freecodecamp.org/news/how-to-optimize-your-javascript-apps-using-loops-d5eade9ba89f/" rel="nofollow noreferrer">this freecodecamp article</a> explains:</p>
<blockquote>
<p>“<em>The first step in optimizing the amount of work in a loop is to minimize the number of object members and array item lookups.</em></p>
</blockquote>
<blockquote>
<p><em>You can also increase the performance of loops by reversing their order. In JavaScript, reversing a loop does result in a small performance improvement for loops, provided that you eliminate extra operations as a result.</em>”</p>
</blockquote>
<p>This means two optimizations for those loops would be to do one of the following:</p>
<ul>
<li><p>store length of the array in a separate variable instead of comparing the property each time</p>
<pre><code>  for (let i = 0, const l = numbers.length; i &lt; l; i += 1) {
</code></pre>
</li>
<li><p>add Items in reverse to eliminate steps</p>
<pre><code>  // minimizing property lookups and reversing
  for (let i = numbers.length; i--; ){
</code></pre>
<p>This could also be written as a <code>while</code> loop</p>
</li>
</ul>
<p>Notice <code>let i</code> can be moved inside the <code>for</code> loop since the scope can be limited to just that block.</p>
<p>I also compared the <code>mode</code> function with the <a href="https://github.com/josdejong/mathjs/blob/develop/src/function/statistics/mode.js#L47" rel="nofollow noreferrer">mathjs implementation for the same function</a>. It appears that implementation uses a mapping of values to counts, which would require more memory. It also returns an array of all values that have the most number of occurrences. The MMMRjs implementation appears to return the first value that contains the maximum number of occurrences. This should be documented in the comments.</p>
<p>Beyond that I don't see much to suggest, except maybe <strong>unit tests</strong> to cover all scenarios that should be handled by the code. The code looks decently written, especially using <code>const</code> and <code>let</code> where appropriate. It also has consistent indentation of nesting levels.</p>
<hr>
<h3>Addition June 10, 2020</h3>
<p>You mentioned <a href="https://codereview.stackexchange.com/questions/243287/mmmrjs-a-product-of-bytes-genesis#comment478018_243539">"<em>Most of the points mentioned in Ratora's answer were already implemented please check the updated source code by downloading the library from the link given above</em>"</a>. I noticed that <code>range</code> was updated to call <code>slice()</code> on the input array before calling <code>sort</code>. However the returned array is not stored or used in the <code>return</code> statement. Thus the output may be incorrect if the values aren't already sorted. See the snippet below for a demonstration.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const range = (numbers) =&gt; {
  numbers.slice().sort();
  return [numbers[0], numbers[numbers.length - 1]];
};
const nums = Object.freeze([0.4, 0.2, 0.3]);
const expected = [0.2, 0.4];
const outputRange = range(nums);
console.log('output from range(): ', outputRange);
console.log('expected output: ', expected);</code></pre>
</div>
</div>

    </div>