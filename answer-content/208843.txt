<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Small things</h1>

<h3>Data.List.Split</h3>

<p>I don't see the need for this module. I see what you're going for with <code>splitOn "\n"</code>, however Haskell has a function in Prelude called <code>lines</code>:</p>

<pre><code>words :: String -&gt; [String]

Prelude&gt; lines "test\nphrase, please\nignore"
["test","phrase, please","ignore"]
</code></pre>

<h3><code>parseString</code></h3>

<p>I think it's cleaner to instead first parse your input into an <code>Integer</code> format and then use <code>[Integer]</code> everywhere instead of <code>[String]</code>. This simplifies your parsing and also gives you a more general function. Note that my implementation is a partial function.</p>

<pre><code>parseInt :: String -&gt; Integer
parseInt (op:s) =
  case op of
    '+' -&gt; read s
    '-' -&gt; (-1) * read s
    -- There is a hole here: this will error if 'op'
    -- (the first character) isn't '+' or '-'
</code></pre>

<h3>Return values</h3>

<p>The type of <code>findFreq</code> is</p>

<pre><code>findFreq :: Integer -&gt; [Integer] -&gt; [String] -&gt; (Integer, Integer, [Integer])
</code></pre>

<p>I see no reason why it can't return a single <code>Integer</code>. Perhaps you returned all values to debug initially, but once that's done you should switch back.</p>

<p>It also seems to me like you were using <code>0</code> as an "error value," which is appropriate in other languages but generally frowned upon in Haskell. In this case, you can instead use <code>Maybe</code> to indicate failure and change your type signature to</p>

<pre><code>findFreq :: Integer -&gt; [Integer] -&gt; [String] -&gt; Maybe Integer
</code></pre>

<p>Like I mention later, this isn't necessary since we can condense and fix some logic, but I would recommend using <code>Maybe</code> instead in the future.</p>

<h3><code>curr</code> and <code>acc</code></h3>

<p>You do some switching around with your variables <code>curr</code> and <code>acc</code> which confused me a bit. I'd keep <code>acc</code> as the accumulation value for your frequency everywhere and call the list of visited values something like <code>seenFreqs</code> or <code>prevFreqs</code>.</p>

<h1>Correctness</h1>

<h3>Repeating frequencies of 0</h3>

<p>Your code currently assumes the repeated frequency is the first <em>nonzero</em> repeated frequency. Thus, it fails for the <code>+1, -1</code> test case. You could change the code to</p>

<pre><code>findRepeatingFrequency :: Integer -&gt; [Integer] -&gt; [String] -&gt; Integer
findRepeatingFrequency init nums xs =
  let (found, acc, lst) = findFreq init nums xs
  in found
</code></pre>

<p>to accommodate that.</p>

<p>This breaks your way of going through the list again if you don't find a repeat the first time, but fortunately there's a less obfuscated way to avoid your checking and continue: you can use <code>cycle</code>, which creates an infinite list consisting of the input list repeated infinitely.</p>

<pre><code>cycle :: [a] -&gt; [a]

Prelude&gt; take 20 $ cycle [1,2,3,4]
[1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]
</code></pre>

<p>You can call <code>findRepeatingFrequency</code> on <code>cycle input</code> to prevent having to do the cycling yourself in the function.</p>

<h1>Efficiency</h1>

<p>Things go wrong for efficiency in <code>findFreq</code>. There are two problem points that make your code asymptotically inefficient.</p>

<p>First, in the following line</p>

<pre><code>  in if next `elem` acc
</code></pre>

<p><code>elem</code> is an <code>O(n)</code> operation. You're calling it for each of the <code>n</code> elements in your input list, meaning that your function is at least <code>O(n^2)</code> (and it turns out that this is the final complexity).</p>

<p>I checked the number of iterations required for my sample input and it took 142991 iterations to find a repeated frequency. An <code>O(n^2)</code> runtime is going to require about 10 billion iterations for the lookups alone. Ouch.</p>

<p>Second is a more insidious mistake that is easy to overlook. In this line,</p>

<pre><code>   else let f = acc ++ [next]
</code></pre>

<p>Appending to a list is an <code>O(n)</code> operation. Lists in Haskell are implemented as linked lists, and appending to the back of one cannot be amortized to <code>O(1)</code> like one might in Python's <code>list</code> or Java's <code>ArrayList</code>. You need to travel all the way to the back to add in a link.</p>

<p>Fixing the second issue actually isn't very hard since you don't care about the ordering of the list. You can switch it to</p>

<pre><code>   else let f = next : acc
</code></pre>

<p>to return to <code>O(1)</code> inserts.</p>

<p>Fixing the lookups, however, requires a change of data structure.</p>

<h3>Introducing <code>Data.Set</code></h3>

<p><a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Set.html" rel="noreferrer">Data.Set</a> provides unordered sets with <code>O(log n)</code> lookup and insert time. Yeah, it's <code>O(log n)</code>, but the total runtime for me when I checked the implementation was less than a second.</p>

<p>I'm including a sample implementation of day 1 below that I've tested and confirmed on my inputs if you want to compare. However, you said you wanted pointers, so here's the pointers I'll give.</p>

<ul>
<li>You can keep your code mostly the same (although I'd recommend making the style changes I suggested)</li>
<li>You will want to use two functions from <code>Data.Set</code>: <code>member</code> and <code>insert</code>.</li>
<li>Your end result will look a lot like a fold but with some differences in end conditions (kind of like <code>findFreq</code>)</li>
</ul>

<h1>Sample implmentation</h1>

<p>Finally, here's a sample implementation.</p>

<pre><code>module Main where

import Data.Set (Set)
import qualified Data.Set as S

-- This is a partial function
parseInt :: String -&gt; Integer
parseInt (op:s) =
  case op of
    '+' -&gt; read s
    '-' -&gt; (-1) * read s
    -- There is a hole here, assuming valid input

findRepeatingFrequency :: Integer -&gt; Set Integer -&gt; [Integer] -&gt; Integer
findRepeatingFrequency acc seen (x:xs) =
  if acc `S.member` seen
     then acc
     else findRepeatingFrequency (acc + x) (S.insert acc seen) xs

partOne :: [Integer] -&gt; Integer
partOne = sum

partTwo :: [Integer] -&gt; Integer
partTwo ints = findRepeatingFrequency 0 S.empty $ cycle ints

main :: IO ()
main = do
  file &lt;- readFile "input.txt"
  let input = filter (not . null) $ words file
  let ints = map parseInt input
  print $ partOne ints
  print $ partTwo ints
</code></pre>
    </div>