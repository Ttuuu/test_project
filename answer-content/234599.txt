<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code can be reduced by using:</p>

<pre><code>row = int(input("Input number := "))
lis = [[0 for i in range(0,row)] for j in range(0,row)]
s = []
if row &gt; 1:
    s += [row-1]
    for i in range(row-1, 0, -1):
        s += [i,i]
b = 1
e = 1
a = 0
c = 0
d = 0
lis[0][0] = e
for n in s:
    for f in range(n):
        c += a
        d += b
        e += 1
        lis[c][d] = e
    a, b = b, -a
for i in range(0,row):
    print()
    for j in range(0,row):
        print(lis[i][j],end="\t")
</code></pre>

<p>However this code is as unreadable as your code and probably uses a different method than yours. You do not only write code to perform a specific task, but you also want to communicate to other programmers (or yourself when you look at the code a year later) what you have done. This can be done by:</p>

<ul>
<li>using sensible variable names </li>
<li>splitting up codes in smaller pieces (functions) </li>
<li>comments </li>
<li>docstrings</li>
</ul>

<p>Your method is probably very clever, but I cannot figure out how it works from your code. My code can made be more understandable, although far from perfect, by applying previous points:</p>

<pre><code>"""
Code to create a square matrix filled with ascending values in a inward
spiral starting from the upper left. The matrix is a list of lists.

Conventions used:
    i      - first matrix index or row index
    j      - second matrix index or column index
    di, dj - direction vector to move from one matrix position to another
"""

def rotate_90degrees_clockwise(di, dj):
    """Rotates a direction vector (di,dj) clockwise, i.e.:
        RIGHT(0,1) -&gt; DOWN(1,0) -&gt; LEFT(0,-1) -&gt; UP(-1,0)
    """
    return dj, -di

def spiral_direction_steps(n):
    """Create a list of numbers of steps to go sequentially to the right, 
    down, left, up, right, down, left, up, ... etc.. to create a inward 
    spiraling route, starting from the upper left, i.e. for n = 3:
      2 x right, 2 x down, 2 x left, 1 x up, 1 x right
    General idea:
      1) first we go (n-1) x right, (n-1) x down, (n-1) x left
      2) then we go (n-2) x up, (n-2) x right
      3) then we go (n-3) x down, (n-3) x left
      4) repeat steps 2 and 3 till the number of steps is 1
    """
    retval = []
    if n &gt; 1:
        retval += [n-1]
        for i in range(n-1, 0, -1):
            retval += [i,i]
    return retval

def spiral_matrix(n):
    """Generate a square matrix (list of lists) of size n x n, with ascending 
    numbers in a clockwise spiral, starting in the upper left corner
    """
    mat = [[0 for i in range(0,n)] for j in range(0,n)]

    val    = 1      # start value
    i, j   = 0, 0   # start point
    di, dj = 0, 1   # start direction 

    mat[i][j] = val # fill start point

    # fill other points
    steps =  spiral_direction_steps(n)
    for n in steps:
        for _ in range(n):
            i += di
            j += dj
            val += 1
            mat[i][j] = val
        di, dj = rotate_90degrees_clockwise(di, dj)
    return mat

def print_matrix(mat):
    """Prints a matrix which is a list of lists"""
    for row in mat:
        print()
        for col in row:
            print(col, end="\t")
    print()

def main():
    n = int(input("Input number := "))
    matrix = spiral_matrix(n)
    print_matrix(matrix)

if __name__ == "__main__":
    main()
</code></pre>
    </div>