<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are my remarks, without any further structure or grouping. I started reading the code top to bottom, but then started to jump around.</p>

<pre><code>#ifndef FILE_VOCABULARY_GUARD100420181849
#define FILE_VOCABULARY_GUARD100420181849

#pragma once
</code></pre>

<p>Choose between the <code>#ifndef</code> inclusion guard and <code>pragma once</code>. Using both is redundant.</p>

<p>I don't understand the name <code>File_Vocabulary</code>. I'd rather call this 
<code>VocabularyFile</code>. Combining the underscore with PascalCase is not typical for C++, it looks more like Ada.</p>

<p>The class <code>VocabularyFile</code> does too much, in my opinion. It should only have two methods at all: <code>save</code> and <code>load</code>. All the other operations can be done in-memory instead. Since this program is handling vocabulary, there will not be more than a million entries in a single vocabulary file. (No human being could ever remember this many vocabularies.) Therefore you will probably not run into an out-of-memory situation.</p>

<p>What is the purpose of <code>max_size_source</code> and <code>max_size_target</code>? They are defined but never used. Your IDE should tell you this.</p>

<p>You should start the presentation of the code with <code>Vocabulary.h</code> and <code>Vocabulary.cpp</code>, since these are the most important data structures in the program. Without reading these files first, it is difficult to understand <code>File_Vocabulary.cpp</code>.</p>

<p>In <code>Vocabulary.h</code> (and many other places), you should name the variables properly. <code>org</code> and <code>tar</code> are not useful, since <code>tar</code> is the well-known Tape Archiver. Better name these variables <code>source</code> and <code>target</code>. Oh, I see, you did that for the <code>source_words</code> and <code>target_words</code> methods. In that case, I change my advice to "Be consistent in naming things". Since methods must not have the same name as fields, prefixing all fields with <code>m_</code> or some similar prefix has become common sense. Then you have <code>source_words()</code> and <code>m_source_words</code>, and the reader doesn't have to guess anymore.</p>

<p>In <code>Vocabulary.cpp</code>, the <code>operator&gt;&gt;</code> looks misplaced to me. It clearly belongs to the other code that is concerned about the file format. By reading the code alone, the file format is not easy to guess. Therefore you should have included an example vocabulary file along with the code.</p>

<p>In <code>Vocabulary.cpp</code>, in method <code>operator&lt;&lt;</code>, you should replace <code>os &lt;&lt; x + L" "</code> with <code>os &lt;&lt; x &lt;&lt; L" "</code>, to prevent unnecessary string allocation.</p>

<p>The variable names in <code>words_to_line</code> are bad. Rename <code>sv</code> to <code>words</code> and <code>ret</code> to <code>line</code> and <code>x</code> to <code>word</code>. This will make the code intuitive to read:</p>

<pre><code>std::wstring words_to_line(const std::vector&lt;std::wstring&gt;&amp; words)
{
    std::wstring line;

    for (const auto&amp; word : words)
        line = line + word + L' ';
    if (!line.empty())       // remove last ' '
        line.pop_back();
    return line;
}
</code></pre>

<p>Switching to <code>Utility.h</code>, function <code>keep_window_open</code>.</p>

<p>The parameter <code>s</code> should better be named <code>exit_command</code>. Its type should be <code>const&amp;</code>, since it is not modified in the function. Instead of <code>std::wcin &gt;&gt; ss</code>, you should rather use <code>std::getline(std::wcin, ss)</code>, because otherwise pressing Enter does not provide a good user experience. Oh, and rename <code>ss</code> to <code>line</code>, to make the code clearer.</p>

<p>Since the string "Please enter" is duplicated, you could save it into a variable at the beginning of the function:</p>

<pre><code>void keep_window_open(const std::wstring&amp; exit_command)
{
    if (s == L"") return;
    std::wcin.clear();
    std::wcin.ignore(120, '\n');

    std::wstring prompt = "Please enter " + s + " to exit\n";
    while (true) {
        std::wcout &lt;&lt; prompt;
        while (std::getline(std::wcin, line) &amp;&amp; ...
    }
}
</code></pre>

<p>Wait â€¦ the <code>for (;;)</code> or <code>while (true)</code> is completely useless. As is the whole function. Why should the user enter a specific word to close the window? Just let them press Enter once. The whole function should be removed and replaced with the parameterless <code>keep_window_open</code> below it.</p>

<p>By the way, the <code>inline</code> is not useful for functions doing interactive I/O, and the <code>return</code> at the end is redundant. You can just remove both.</p>

<p>That's it for now. I think it is already enough to improve your code by a fair amount.</p>
    </div>