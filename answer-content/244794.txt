<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How did you determine the output <code>' # '</code> for the case <code>n==1</code>? I'd have expected it to just be <code>'*'</code>. If you're unclear about the specification for code you're writing in an interview, it's best to either ask for clarification or document your assumptions -- it's possible they deliberately handed you an unclear spec and are testing how you handle that.</p>
<p>If we take the interviewer request literally, you're still missing the <code>[ ... ]</code> formatting.</p>
<h2>Naming</h2>
<p><code>public string[] PrintStairs(int n)</code></p>
<p>This method is named as a verb indicating it's useful for its side effect, but it returns a value indicating it's useful for its return value. You should design APIs for one or the other but not both. Since your method is useful for its return value, a more appropriate name might be <code>GenerateStairs</code> or <code>GetStairs</code>.</p>
<p>Use more descriptive parameter names. <code>numberOfStairs</code> instead of <code>n</code> for example.</p>
<p>You use two different names, <code>row</code> and <code>level</code>, for different manifestations of the same concept: a step in your staircase. I'd unify these and call them <code>rowIndex</code> and <code>rowBuilder</code> respectively, or maybe <code>stepIndex</code> and <code>stepBuilder</code>.</p>
<h2>Input validation</h2>
<p>Your method crashes for negative values of <code>n</code>. If negative numbers are not valid inputs to the method, that fact should be documented by a method header and by throwing an <code>ArgumentOutOfRangeException</code>.</p>
<h2>String APIs</h2>
<p><code>result[row] = string.Concat(new string(level.ToString()));</code></p>
<p>This is a very complicated way of saying <code>result[row] = level.ToString()</code>! <code>string.Concat</code> is an API for concatenating strings, but you are only giving it one string which does nothing but give you the same string out again.</p>
<p>Explicit <code>string</code> constructors are intended to be used for creating strings from individual characters or from unmanaged code; here you're just giving it another <code>string</code>, which also does nothing but give you the same string out again.</p>
<h2>General behaviour</h2>
<p><code>var midpoint = ((2 * n - 1) / 2);</code></p>
<p>You are doing integer division here. Double-check your math because this expression simplifies to <code>n - 1</code> for positive <code>n</code> -- were you intending for something more elaborate to happen with this calculation? A reader might wonder if there's a bug here.</p>
<p><code>n</code> doesn't change inside the loop, so this whole line can be moved outside of it.</p>
<h2>General formatting</h2>
<p>Your spacing is inconsistent:</p>
<p><code>for (int row =0; row &lt; n; row++)</code></p>
<p><code>if((midpoint-row &lt;= col) &amp;&amp; (midpoint + row &gt;= col))</code></p>
<p><code>for (int col =0; col &lt; 2 * n - 1; col++)</code></p>
<h2>LINQ</h2>
<p>Having everything on one line isn't necessarily a <em>good</em> thing. The LINQ solution is impenetrable when written like that. It deserves to be on multiple lines anyway for the sake of being able to read it properly:</p>
<pre><code>return Enumerable.Range(1, nFloors)
    .Select(i =&gt; string.Format("{0}{1}{0}",
        i == nFloors
            ? ""
            : new string(' ', nFloors - i),
        new string('*', 2 * i - 1)))
    .ToArray();
</code></pre>
<p>Yes, it's technically LINQ, but the guts of that <code>Select</code> is what's doing all the heavy lifting.</p>
<p>The LINQ solution doesn't give the same output for <code>n==1</code>, which again begs the question where you got the idea that it should output <code>' # '</code> in the previous solution.</p>
<p>A more LINQ-y solution would have you build up the building blocks needed to write code that really is shorter. LINQ is all about operations on sequences; the thing that throws a wrench in any LINQ solution here is the fact that the output depends on how many things are in the sequence (the amount of space you use to pad the stairs depends on how many stairs there are), so you're probably going to have to enumerate sequences more than once.</p>
<p>Here's my LINQ-y take: start with a simple enumerator that gives you unformatted steps, from which you can take any arbitrary number of them:</p>
<pre><code>private string GenerateStep(int stepIndex)
{
    if (stepIndex &lt; 1)
        throw new ArgumentOutOfRangeException(nameof(stepIndex));
    return new string('*', stepIndex * 2 - 1);
}

private IEnumerable&lt;string&gt; EnumerateSteps()
{
    for (int stepIndex = 0; stepIndex &lt; int.MaxValue; stepIndex++)
    {
        yield return GenerateStep(stepIndex);
    }
}
</code></pre>
<p>Now I can say <code>EnumerateSteps().Take(3)</code> to get:</p>
<pre><code>[
  '*',
  '***',
  '*****'
]
</code></pre>
<p>Then define a method that takes a sequence of strings and centers them:</p>
<pre><code>static class StringExtensions
{
    private static string CenterFormatted(string original, int totalWidth)
    {
        if (original == null)
            throw new ArgumentNullException(nameof(original));
        if (totalWidth &lt; original.Length)
            throw new ArgumentOutOfRangeException(nameof(totalWidth));

        int paddingNeededOnLeft = (totalWidth - original.Length) / 2;
        int paddingNeededOnRight = totalWidth - original.Length - paddingNeededOnLeft;

        return String.Concat(
            new string(' ', paddingNeededOnLeft),
            original,
            new string(' ', paddingNeededOnRight));
    }

    public static IEnumerable&lt;string&gt; CenterFormatted(this IEnumerable&lt;string&gt; sequence)
    {
        // Exercise: how will you check for a null input sequence here? If you check it here and throw ArgumentNullException, will it actually throw when you call CenterFormatted?
        int largestStringLength = sequence.Max(s =&gt; s.Length);
        foreach (string original in sequence)
        {
            yield return CenterFormatted(original, largestStringLength);
        }
    }
}
</code></pre>
<p>Now you have two orthogonal and reusable things: a thing that generates steps and a thing that centers sequences of strings. You can compose these quite concisely in a LINQ statement to solve the original problem:</p>
<p><code>EnumerateSteps().Take(3).CenterFormatted().ToArray()</code></p>
<p>which gives me</p>
<pre><code>[
  '  *  ', 
  ' *** ', 
  '*****'
]
</code></pre>
    </div>