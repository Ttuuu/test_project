<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If I saw this code as an interview submission, I'd see some significant issues:</p>

<ul>
<li><p><strong>Separation of concerns:</strong>  Your average-of-two-colours calculations are intermingled with the UI code.  There should be an <code>avgColor(hexColor1, hexColor2)</code> function that is purely responsible for the calculation, and that function should be well documented.  The rest of the code, then, would be glue that makes the form work.</p>

<p>The way I interpret the task, it is primarily concerned about calculating the mean of two colours.  Your solution, though, is primarily focused on form fields and the DOM.  It's possible that you may have missed the point of the exercise.  In my opinion, the <code>avgColors()</code> function in my solution below is a sufficient answer; the rest of the code is there as packaging just to demonstrate that it works.</p></li>
<li><strong>Pointless use of arrays and objects:</strong>  Why do you use <code>arrColours.colours[0].c1</code>, <code>arrColours.colours[0].c2</code>, and <code>arrColours.colours[0].c3</code>?  You could have just used three variables, <code>c1</code>, <code>c2</code>, and <code>c3</code>.  This, to me, is a red flag that you have no idea what arrays and objects are for.</li>
<li><p><strong>Hungarian and funny naming:</strong>  What are <a href="https://www.sherwin-williams.com/homeowners/color/color-advice/fun-colors" rel="nofollow noreferrer"><code>funColours</code></a>?  In seriousness, I find the rampant use of Hungarian prefixes annoying.  (I know, this is just my opinion, but first impressions do matter in interview questions.)  The worst examples are <code>funCalculateMeanColour</code> and <code>funReturnHEXAverage</code> â€” shouldn't most functions calculate and return results?</p>

<p>I'd also quibble about <code>funHexToDec</code>: the result is a number.  You shouldn't consider it to be in "decimal" form.  The number only becomes decimalized when you convert it to a string representation.</p></li>
<li><p><strong>Namespace pollution:</strong> JavaScript allows functions to be defined within the scope of other functions.  I would strongly recommend decluttering your code by not defining helper functions in the global scope.</p>

<p>In my solution below, I've defined a global <code>avgColor()</code> function (because it's what the task asks for), an <code>AvgColorCalculator</code> class (containing all of the UI glue code for the demonstration), and one statement that instantiates the calculator.</p></li>
</ul>

<p>Some more minor concerns:</p>

<ul>
<li>It's unclear, from the problem specification, what the input formats may be.  CSS, for example, accepts a <a href="https://en.wikipedia.org/wiki/Web_colors#Shorthand_hexadecimal_form" rel="nofollow noreferrer">shorthand form consisting of three hex digits</a>, so it would be better to accept that as well.</li>
<li>It would be smarter to make the HTML elements for presenting the output resemble the elements that accept the input.  I suggest using the same kinds of <code>&lt;input&gt;</code> elements, but disabled.  I'm also puzzled why you put the "Average Colour:" label text in CSS rather than in HTML.</li>
<li><code>document.querySelector()</code> is overkill, when you only need <code>document.getElementById()</code>.  I suggest using <code>data</code> attributes so that correspondences between the pairs of <code>&lt;input&gt;</code> elements are encoded within the HTML form itself, rather than hard-coded in the JavaScript.</li>
</ul>

<h2>Suggested solution</h2>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/**
 * Average of two colors in RGB color space.  Inputs may be of the form
 * "#6699FF", "#69f", "6699ff", or "69F".  Output is of the form "#6699ff".
 */
const avgColor = (hexColor1, hexColor2) =&gt; {
    let int24 = (hex) =&gt; parseInt(
        hex.replace(/^#?(?:([0-9a-f]{6})|([0-9a-f])([0-9a-f])([0-9a-f])|.*)$/i,
                    '$1$2$2$3$3$4$4'),
        16
    );
    let c1 = int24(hexColor1);
    let c2 = int24(hexColor2);
    if (isNaN(c1) || isNaN(c2)) return null;

    let maskedMean = (mask) =&gt; (((c1 &amp; mask) + (c2 &amp; mask)) &gt;&gt; 1) &amp; mask;
    let avg = maskedMean(0xff0000) | maskedMean(0x00ff00) | maskedMean(0x0000ff);
    return '#' + ('000000' + avg.toString(16)).slice(-6);
};

class AvgColorCalculator {
    constructor(colorSel1, colorSel2, colorOut) {
        this.colorText1 = this.colorInputField(colorSel1);
        this.colorText2 = this.colorInputField(colorSel2);
        this.colorOut = colorOut;
        this.textOut = document.getElementById(colorOut.getAttribute('data-mirror'));
        this.recalculate();
    }
    
    /**
     * Set up event handlers.  When the given color selector changes, mirror
     * its value to the corresponding text field, and vice versa, then update
     * the output fields.
     */
    colorInputField(colorSel) {
        let calc = this;
        let textField = document.getElementById(colorSel.getAttribute('data-mirror'));
        textField.addEventListener('input', (event) =&gt; {
            // avgColor(c, c) is a hack to canonicalize "#fff" as "#ffffff"
            colorSel.value = avgColor(event.target.value, event.target.value);
            calc.recalculate();
        });
        colorSel.addEventListener('input', (event) =&gt; {
            textField.value = event.target.value;
            calc.recalculate();
        });
        textField.value = colorSel.value;
        return textField;
    }
    
    recalculate() {
        let avg = avgColor(this.colorText1.value, this.colorText2.value);
        if (avg == null) {
            this.colorOut.value = '';
            this.textOut.value = 'Invalid input colour';
        } else {
            this.colorOut.value = this.textOut.value = avg;
        }
    }
}

new AvgColorCalculator(
    document.getElementById('colorSelector1'),
    document.getElementById('colorSelector2'),
    document.getElementById('avgColorSelector')
);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;label&gt;Input colour 1&lt;/label&gt;&lt;/th&gt;
    &lt;td&gt;&lt;input type="color" id="colorSelector1" data-mirror="colorText1" value="#000000"&gt;&lt;input type="text" id="colorText1" data-mirror="colorSelector1"&gt;&lt;/td&gt;
  &lt;/div&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;label&gt;Input colour 2&lt;/label&gt;&lt;/th&gt;
    &lt;td&gt;&lt;input type="color" id="colorSelector2" data-mirror="colorText2" value="#ffffff"&gt;&lt;input type="text" id="colorText2" data-mirror="colorSelector2"&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;label&gt;Average colour&lt;/label&gt;&lt;/th&gt;
    &lt;td&gt;&lt;input type="color" id="avgColorSelector" data-mirror="avgColorText" disabled&gt;&lt;input type="text" id="avgColorText" data-mirror="colorSelector2" disabled&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</code></pre>
</div>
</div>

    </div>