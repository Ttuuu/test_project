<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming:</h2>

<p><code>name</code> and <code>surname</code> are somewhat unclear in what they specifically mean. The "actual" purpose of these variables is to serve as "root" of the trie. Incidentally I'd rename <code>ancestor</code> to <code>root</code>in all the usages in your code, simply because I'm more used to it. YMMV :)<br>
I'd rename <code>name</code> and <code>surname</code> to <code>nameRoot</code> and <code>surnameRoot</code>.</p>

<h2>Simplifications:</h2>

<ul>
<li>Initialize private fields that are not dependent on constructor arguments in the field declaration to save on space and complexity.</li>
<li>Use <code>Comparator.comparing</code> and <code>thenComparing</code> to simplify your comparator.</li>
</ul>

<p>I personally also prefer to not leave too much space between fields.</p>

<pre class="lang-java prettyprint-override"><code>private final Node name = new Node();
private final Node surname = new Node();
private static final Comparator&lt;Record&gt; comparator = Comparator.comparing(Record::getName)
    .thenComparing(Record::getSurname).thenComparing(Record::getNumber);
</code></pre>

<p>Note that I also changed the <code>comparator</code> to be static. It could also do with a better name, but I'm coming up empty right now...</p>

<h2>Possible Trie Optimizations:</h2>

<p>Currently your trie is using a <strong>lot</strong> of memory. It's not quite as bad as it could be, but considering that names are very much non-uniform, you will have a lot of "degenerated branches", where the branching factor is very low, if not 1 for "long" stretches of the data structure.</p>

<p>These long stretches of basically linked lists can be collapsed by sacrificing a WORD of memory to store how many characters you can skip before the next <em>actual</em> branching.</p>

<p>Currently <code>Node</code> does not support this in any way.</p>

<hr>

<p>The traversal during <code>add</code> can be simplified a bit with <code>computeIfAbsent</code> like so:</p>

<pre class="lang-java prettyprint-override"><code>for (final char c: str.toCharArray()) {
    final Node child = node.children.computeIfAbsent(c, Node::new);
    child.records.add(record);
    node = child;
}
</code></pre>

<p>This simplification pretty quickly vanishes when you implement the optimization mentioned above (or rather it becomes somewhat complicated). </p>
    </div>