<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://stackoverflow.com/questions/13104494/does-javascript-pass-by-reference">Objects are passed by "copy of a reference".</a></p>

<p>Notice that the <code>coursesObj</code> after the function call has empty values ( see snippet below )</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const isEveryCourseCovered = courses =&gt; courses.every(c =&gt; !Boolean(c));
const getCourseOrder = courses =&gt; {
  const courseSubjects = Object.keys(courses);
  const courseRequirements = Object.values(courses);
  const courseOrder = [];

  do {
    courseSubjects.map((subject, i) =&gt; {
      if (subject) {
        courseRequirements[i].map((requirement, idx) =&gt; {
          if (courseOrder.includes(requirement)) {
            courseRequirements[i].splice(idx, 1);
          }
        });
        if (!courseRequirements[i].length) {
          courseOrder.push(subject);
          delete courseSubjects[i];
        }
      }
    });
  } while (!isEveryCourseCovered(courseSubjects));

  return courseOrder;
};

const coursesObj = {
  'CSC300': ['CSC100', 'CSC200'],
  'CSC200': ['CSC100'],
  'CSC100': []
};
console.log("result ", getCourseOrder(coursesObj));

console.log("Courses Object : ", coursesObj);</code></pre>
</div>
</div>


<p>You should create a copy of the passed object, a quick way ( <a href="https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object">one of many ways</a> ) of doing that is <code>JSON.parse(JSON.stringify(c));</code>
( see snippet below ):</p>

<pre><code>const getCourseOrder = c =&gt; {
  // make a copy of the input object
  const courses = JSON.parse(JSON.stringify(c));
</code></pre>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const isEveryCourseCovered = courses =&gt; courses.every(c =&gt; !Boolean(c));
const getCourseOrder = c =&gt; {
  // make a copy of the input object
  const courses = JSON.parse(JSON.stringify(c));

  const courseSubjects = Object.keys(courses);
  const courseRequirements = Object.values(courses);
  const courseOrder = [];

  do {
    courseSubjects.map((subject, i) =&gt; {
      if (subject) {
        courseRequirements[i].map((requirement, idx) =&gt; {
          if (courseOrder.includes(requirement)) {
            courseRequirements[i].splice(idx, 1);
          }
        });
        if (!courseRequirements[i].length) {
          courseOrder.push(subject);
          delete courseSubjects[i];
        }
      }
    });
  } while (!isEveryCourseCovered(courseSubjects));

  return courseOrder;
};

const coursesObj = {
  'CSC300': ['CSC100', 'CSC200'],
  'CSC200': ['CSC100'],
  'CSC100': []
};
console.log("result ", getCourseOrder(coursesObj));

console.log("Courses Object : ", coursesObj);</code></pre>
</div>
</div>


<p>I didn't test the performance but i would guess it wouldn't be that efficient since it has 5 nested loops (<code>do while</code>, <code>.map</code>, <code>.map</code>, <code>.includes</code>) and <code>.every</code> that's called on every iteration of the <code>while</code> loop and 3 <code>if</code>s </p>

<p>Reading the requirement : </p>

<blockquote>
  <p>Return a <strong>sorted</strong> ordering of courses </p>
</blockquote>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" rel="nofollow noreferrer">Array.sort()</a> was the first thing to come to my mind, my suggested approach would be simply sorting the <code>Object.keys</code> of the <code>coursesObj</code> based on the length of the value ( array of required courses) corresponding to that key, like so :</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const coursesObj = {
  'CSC300': ['CSC100', 'CSC200'],
  'CSC400': ['CSC100', 'CSC200', 'CSC300'],
  'CSC200': ['CSC100'],
  'CSC100': []
};

const result = Object.keys(coursesObj).sort((a, b) =&gt;
  coursesObj[a].length - coursesObj[b].length
);

console.log(result)</code></pre>
</div>
</div>


<p>PS : i added the <code>CSC400</code> key in the middle just for the demo.</p>

<p><strong>EDIT :</strong></p>

<p>If you have an Object like : </p>

<pre><code>const coursesObj = 
    {  
      c1: ['c2', 'c3', 'c4'], 
      c5: ['c1'], 
      c4: [], 
      c2: [], 
      c3: ['c4']
    }
</code></pre>

<p>you can transform it to add the prerequisites of the courses in its prerequisites 
 array so it becomes :</p>

<pre><code>const detailed = 
   { 
     c1: [ 'c2', 'c3', 'c4' ],​​​​​
     c5: [ 'c1', 'c2', 'c3', 'c4' ],​​​​​ // c5 now has c1 and the prerequisites of c1
   ​​​​​  c4: [],​​​​​
​​​​​     c2: [],​​​​​
   ​​​​​  c3: [ 'c4' ] 
   }​​​​​
</code></pre>

<p>then apply the same sort function above :</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const coursesObj = { c1: ["c2", "c3", "c4"], c5: ["c1"], c4: [], c2: [], c3: ["c4"] };

const detailedObj = Object.entries(coursesObj).reduce((accumulator, [courseId, requirements]) =&gt; {
  accumulator[courseId] = requirements.slice(0); // original courses required.

  requirements.forEach(course =&gt; {
    accumulator[courseId].push(...coursesObj[course]); // add the required courses for each required course .
  });

  // remove the duplicates
  accumulator[courseId] = [...new Set(accumulator[courseId])];

  return accumulator;
}, {});

// sort by the number of prerequisites 
const result = Object.keys(detailedObj).sort((a, b) =&gt;
  detailedObj[a].length - detailedObj[b].length
);

console.log(result);</code></pre>
</div>
</div>

    </div>