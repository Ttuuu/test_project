<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Look out for standard functions that can help you!</p>

<pre><code>Prelude Data.List&gt; let subOneLists ls = zipWith (++) (inits ls) (tail $ tails ls)
Prelude Data.List&gt; subOneLists [1, 2, 3, 4]
[[2,3,4],[1,3,4],[1,2,4],[1,2,3]]
</code></pre>

<p>This uses the fact that the <code>inits</code>- and <code>tails</code>-elements at corresponding index always recombine to the original list, but with a variably splitting point:</p>

<pre><code>Prelude Data.List&gt; let ls = [0..7] in mapM_ print (zip (inits ls) (tails ls))
([],[0,1,2,3,4,5,6,7])
([0],[1,2,3,4,5,6,7])
([0,1],[2,3,4,5,6,7])
([0,1,2],[3,4,5,6,7])
([0,1,2,3],[4,5,6,7])
([0,1,2,3,4],[5,6,7])
([0,1,2,3,4,5],[6,7])
([0,1,2,3,4,5,6],[7])
([0,1,2,3,4,5,6,7],[])
</code></pre>

<p>If you now “shift up” that <code>tails</code>, by dropping its head, you effectively lose the head of each of the <em>contained</em> lists:</p>

<pre><code>Prelude Data.List&gt; let ls = [0..7] in mapM_ print (zip (inits ls) (tail $ tails ls))
([],[1,2,3,4,5,6,7])
([0],[2,3,4,5,6,7])
([0,1],[3,4,5,6,7])
([0,1,2],[4,5,6,7])
([0,1,2,3],[5,6,7])
([0,1,2,3,4],[6,7])
([0,1,2,3,4,5],[7])
([0,1,2,3,4,5,6],[])
</code></pre>

<p>And that can just be <code>++</code> combined with the <code>inits</code> again.</p>
    </div>