<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.  The other review gives some good suggestions about the code itself, so this review will mostly focus on fundamental design issues.</p>

<h2>Think carefully about threads</h2>

<p>How many threads are really needed here?  At the moment, the program launches one thread per enemy which seems rather extravagant.  I think it's more likely that all enemies could operate on a single thread.  One way to do that would be to push enemy objects (or <code>std::shared_ptr</code>s to them) onto a <a href="https://en.cppreference.com/w/cpp/container/priority_queue" rel="nofollow noreferrer"><code>std::priority_queue</code></a> with their calculated deadline time as the ordering such that the shortest remaining duration is always at the front of the queue.  Generically, this is called <a href="https://en.cppreference.com/w/cpp/container/priority_queue" rel="nofollow noreferrer"><em>Earliest Deadline First (EDF) scheduling</em></a>.  </p>

<h2>Think carefully about classes</h2>

<p>At the moment, there is a base <code>Character</code> class.  Then a <code>Player</code> class that derives from that, and also an <code>Enemy</code> class which is further derived as <code>Orc</code> and <code>Dragon</code> classes.  However, there really isn't anything special about any of them in that they operate 99% the same way.  I'd suggest instead that you have one underlying <code>Character</code> and then derive a computer-controlled character from that.  They could be either enemies or players.  Differentiate them via data members rather than by class types.  It will lead to a much cleaner design and better flexibility as well.</p>

<h2>Think of the user</h2>

<p>The code somewhat optimistically contains a <code>std::vector&lt;Character&gt;</code> (emphasizing that the <code>Player</code> object is probably useless as mentioned above) but how will multiple players actually play?  Do you anticipate having five human players sharing a single keyboard?  The answer to this is important because it helps to determine how threading might be done.  If the answer is that there's really only one human-controlled player, then it's quite simple.  However, if there are really intended to be more than one player sharing the keyboard, you will almost certainly need to use a mechanism other than <code>std::cin &gt;&gt; choice</code> to get input.</p>

<h2>Avoid <em>object slicing</em></h2>

<p>Right now, the code contains a <code>std::vector&lt;Enemy&gt;</code>.  However, it is populated with further derived <code>Dragon</code> and <code>Orc</code> classes.  In this case, as mentioned immediately above, the classes are functionally identical so it doesn't cause a problem but if the classes were somehow different, we could easily encounter all of the <a href="https://en.wikipedia.org/wiki/Object_slicing" rel="nofollow noreferrer">problems of object slicing</a>.  See <a href="https://codereview.stackexchange.com/questions/56363/casting-base-to-derived-class-according-to-a-type-flag/56380#56380">this answer</a> for how to use polymorphism and <code>std::unique_ptr</code> to preserve derived object behavior.</p>

<h2>A worked example</h2>

<p>See <a href="https://codereview.stackexchange.com/questions/243640/multithreaded-console-based-monster-battle-with-earliest-deadline-first-schedule">Multithreaded console-based monster battle with earliest-deadline-first scheduler</a> for a worked example.</p>
    </div>