<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm a C++ programmer. I've never written a C program before. But most of what I say should be applicable.</p>

<h2>Globals</h2>

<pre><code>int i, c;
char *key;
</code></pre>

<p>There's no reason for these variables to be global. These variables should be declared in the same place they are used. </p>

<p>These variables also have very bad names. What is <code>i</code>? What is <code>c</code>? I'll have to read the rest of the code to find out.</p>

<h2>String typedef</h2>

<pre><code>int main(int argc, string argv[])
</code></pre>

<p>I don't think using <code>string</code> is a good idea. Somewhere in that cs50 header there's probably</p>

<pre><code>typedef char *string;
</code></pre>

<p>When you apply <code>const</code> to this <code>typedef</code>, you don't get what you expect. You may expect that <code>const string</code> is the same as <code>const char *</code>, but it isn't. <code>const string</code> is the same as <code>char *const</code>. You should use a pointer to a character when you want a pointer to a character.</p>

<h2>Declare variables as late as possible</h2>

<pre><code>int int_A = (int) 'A';
int int_a = (int) 'a'; 
</code></pre>

<p>When you're declaring your variables, you should leave it to the last minute. If you don't need the variables yet, don't declare them.</p>

<h2>Conditions</h2>

<pre><code>if (argc != 2)
{
    // The wrong number of arguments
}
else if (argc == 2)
{
    // The right number of arguments
}
</code></pre>

<p>If the condition <code>argc != 2</code> is <code>false</code>, we know that the condition <code>argc == 2</code> must be <code>true</code> so there is no need to confirm that it is <code>true</code>. Also, when there is the wrong number of arguments, the function returns. Your <code>if</code> should become this:</p>

<pre><code>if (argc != 2) 
{
    // The wrong number of arguments
} 
// The right number of arguments
</code></pre>

<h2>Unhelpful error messages</h2>

<p>When the user doesn't provide exactly 1 argument, this happens:</p>

<pre><code>printf("Please use a single alphabetic command line argument\n");
return 1;
</code></pre>

<p>When the user provides a single argument that does not consist of only alphabetic characters, this happens:</p>

<pre><code>printf("Please use a single alphabetic command line argument\n");
return 1;
</code></pre>

<p>You should print two different error messages for two different problems. Perhaps "Please provide a single argument" and "Please provide an alphabetic string"</p>

<h2>Bad variable names</h2>

<pre><code>for (int z = 0, n = strlen(argv[1]); z &lt; n; z++)
{
    if (isalpha(argv[1][z]) == false)
    {
        printf("Please use a single alphabetic command line argument\n");
        return 1;
    }
}
</code></pre>

<p>Here, you're referring to the key as <code>argv[1]</code>. At this point, it might make more sense to say "the key must be an alphabetic string" rather than "the first command-line argument must be an alphabetic string". You're also calculating the size of the key twice. You're doing it here in the <code>for</code> loop, then right after it</p>

<pre><code>// foo bar mitzva
    key = argv[1];
int key_len = strlen(argv[1]);
int key_i[key_len];
</code></pre>

<p>We've found the place where <code>key</code> is used. You should put this snippet before the <code>for</code> loop and have the <code>for</code> loop refer to <code>key</code> rather than <code>argv[1]</code>.</p>

<h2>Strings are pointers, pointers can move</h2>

<p>The part of your code that makes sure the key is an alphabetic string can be made more efficient. Your code finds the length of the key twice and then checks to see if every character is alphabetic. This is a whopping 3 iterations when only one is necessary.</p>

<pre><code>char *key = argv[1];
for (const char *k = key; *k != 0; ++k)
{
    if (!isalpha(*k))
    {
        printf("The cipher key must be an alphabetic string\n");
        return 1;
    }
}
</code></pre>

<h2>Is this a heap allocation?</h2>

<pre><code>// get users plaintext
printf("Plaintext: ");
char* plaintext = get_string();
</code></pre>

<p>I'm not sure if <code>get_string</code> allocates memory for the string or returns a pointer to static memory. You might want to specify that in a comment. If <code>plaintext</code> is heap allocated, you should call <code>free(plaintext)</code> to free the memory when you're done with it (at the very end of the program).</p>

<h2>Characters are numbers</h2>

<pre><code>for (i = 0; i &lt; key_len; i++)
{
    if (isupper(key[i]))
    {
        key_i[i] = (argv[1][i] - int_A);
    }
    if (islower(key[i]))
    {
        key_i[i] = (argv[1][i] - int_a);
    }
</code></pre>

<p>We've finally found the place where that global <code>i</code> is used. You should declare variables right when you need them. I'm pretty sure you're missing a <code>}</code> at the end of this <code>for</code> loop. </p>

<p>Here, you're copying the key into an array of ints. There is a bit of duplicate work here. If you know that a character is alphabetic, then it can only be upper case or lower case. If you know the character is upper case, then you know that it cannot be lower case. You could actually do this in the same place that you are checking you're characters are alphabetic. What I'm saying is:</p>

<pre><code>char *key = argv[1];
const int key_len = strlen(key);
//If this was C++, I would definitely perform a heap allocation but
//heap allocation is a pain in C so I'll just use this C99 trick.
int key_i[key_len];
for (int idx = 0; idx != key_len; ++idx)
{
    const char character = key[idx];

    if (islower(character))
    {
        // characters are numbers, remember?
        key_i[idx] = character - 'a';
    } 
    else if (isupper(character))
    }
        key_i[idx] = character - 'A';
    }
    else 
    {
        //If the character is not lower case, and not upper case, then its not alphabetic
        printf("The cipher key must be an alphabetic string\n");
        return 1;
    }
}
</code></pre>

<h2>The actual cipher part of the cipher program</h2>

<p>Alright, now I'll find out what a Vigenere cipher is!</p>

<pre><code>// set i back to 0 for the next loop
i = 0;
// iterate over characters in plaintext and shift plaintext character by key

printf("ciphertext: ");
for (int j = 0, n = strlen(plaintext); j &lt; n; j++)
</code></pre>

<p>Use proper variable names. What is <code>i</code>? What is <code>j</code>? You should rename them to <code>key_idx</code> and <code>plaintext_idx</code> respectivly.</p>

<h2>Conditionals (again)</h2>

<pre><code>int pt = (int) plaintext[j];
if (isalpha(plaintext[j]))
{
    if (isupper(plaintext[j]))
    {
        printf("%c", (((pt - int_A) + key_i[i % key_len]) % 26) + int_A);
    }
    if (islower(plaintext[j]))
    {
        printf("%c", (((pt - int_a) + key_i[i % key_len]) % 26) + int_a);
    }
}
else
{
    printf("%c", plaintext[j]);
}
if (isalpha(plaintext[j]))
{
    i += 1;
}
</code></pre>

<p><code>pt</code> never changes so it should be declared <code>const</code>. There's no need to repeatedly index the <code>plaintext</code> when you already have <code>pt</code> just lying around, not doing much. Try not to pack a whole load of math into one line. If you know that an alphabetic character is not upper case then it must be lower case. This snippet could be simplified to this:</p>

<pre><code>const int pt = plaintext[plaintext_idx];
const int key_char = key_i[key_idx % key_len];
if (isupper(pt))
{
    // most of those brackets are unnecessary.
    printf("%c", (pt - 'A' + key_char) % 26 + 'A');
    key_idx += 1;
}
else if (islower(pt))
{
    printf("%c", (pt - 'a' + key_char) % 26 + 'a');
    key_idx += 1;
}
else
{
    printf("%c", pt);
}
</code></pre>

<h2>Characters, aren't they weird</h2>

<p>Fun fact about C, characters literals aren't actually <code>char</code>s, they're <code>int</code>s! In a lot of places when C expects a "character", what it actually expects is an <code>int</code>. <code>isupper</code> and <code>islower</code> expect <code>int</code>s. <code>printf("%c", integer)</code> expects an <code>int</code>. Just keep that in mind when handling strings in C.</p>

<h2>Some more optimization</h2>

<p>This program could probably be made much smaller, faster and neater (<code>key_i</code> can be removed) but it's 22:00 in Australia and I have school tomorrow so that's all for now.</p>
    </div>