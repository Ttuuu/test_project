<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, dictionaries are a class within python so <code>word_dict</code>, will cause confusion down the line, so instead use a different variable name eg. <code>word_list</code>.</p>

<p>Whilst this code is correct:</p>

<pre><code>rand_word = word_dict[random.randint(0, len(word_dict)-1)]
</code></pre>

<p>A more readable version uses <code>random.choice</code>, which return a random element from a non-empty sequence:</p>

<pre><code>rand_word = random.choice(word_dict)
</code></pre>

<p>Try to keep lines to a maximum of ~80 chars and split this: </p>

<pre><code>print('Welcome to HANGMAN.\nGuess correct letters to complete the hidden word, Else hangman will be Hanged')
</code></pre>

<p>Into:</p>

<pre><code>print("Welcome to HANGMAN.")
print("Guess the correct letters to complete the hidden word, "
      "Else hangman will be Hanged")
</code></pre>

<p>NITPICK: Whitespace around operators is nicer, eg. <code>((n-1)*'*')</code>  turns into <code>((n - 1) * '*')</code></p>

<p>Your variables:</p>

<pre><code>n = len(rand_word)
hidden_word = ((n - 1) * '*')
hidden_word_1 = hidden_word.split('*')
</code></pre>

<p>Are not descriptive and as a result you've even forgot to remove <code>n</code> as a variable. Your method for generating <code>hidden_word_1</code> is convoluted, use this instead:</p>

<pre><code>hidden_word_list = ['' for i in rand_word]
</code></pre>

<p>Perhaps also change the function name <code>user_lose</code> to the more descriptive <code>wrong_guess</code>. </p>

<p>There's places where tail recursion fits, but I don't think <code>user_guess</code> works effectively with it. Tail recursion adds far more complexity for debugging than it adds to the effectiveness of the program, especially considering that there is no advantage over say looping with <code>while chance &gt; 0:</code>.</p>

<p>To make tail recursion practical I recommend modifying your code to fit this pseudocode:</p>

<pre><code>def hangman(target_word, user_guess, chances=10):
    if target_word == user_guess:
        print('You saved hangman')
    elif chances &lt; 0:
        print('hangman died')
        return

    print("'So far you've guessed:", user_guess)
    user_input = str('eee'[0]).lower()
    # add use_input into user_guess based on target_word
    # Eg. target_word='random', user_guess='______', user_input='a'
    #     turns into:
    #     target_word='random', user_guess='_a____',
    # Eg. target_word='random', user_guess='_a____', user_input='n'
    #     turns into:
    #     target_word='random', user_guess='_an___',

    # If bad guess, then print(bad luck) ect.
    hangman(target_word, user_guess, chances=(chances - 1))


# code to generate these params
hangman('complete word', '________ ____')
input('Guess a letter: ')
</code></pre>
    </div>