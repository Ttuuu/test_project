<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>1.The most general property of any shape is its dimension. Thus the code could be factored in to having a base class at the top named Shape which would contain this piece of data.</p>
</blockquote>

<p>Well, as every shape has its dimensionality fixed in the class definition, that info should not be a data member, but provided by a member function:</p>

<pre><code>struct ShapeBase {
    virtual ~Shape() = default;
    virtual unsigned get_dimensions() const = 0; // pure virtual, must be overridden
};
</code></pre>

<p>That also takes care of your second concern. And the destructor is still <em>trivial</em>, which is a plus.</p>

<p>Also, there's no reason for giving the base shapes of each dimension different names. Use templates and specialize explicitly:</p>

<pre><code>template &lt;unsigned dim&gt; struct Shape&lt;dim&gt;;

template&lt;&gt; struct Shape&lt;1&gt; : ShapeBase {
    unsigned get_dimensions() const final { return 1; }
    // marked final to forbid overriding further
};
</code></pre>
    </div>