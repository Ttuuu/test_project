<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see what looks like a bug. The <code>x</code> variable (which should probably be renamed to something more informative - maybe <code>user</code>?) is a object (with <code>selected</code> and <code>StudentScheduleUsrID</code> properties) which you remove from the array in the upper code with</p>

<pre><code>} else {
    angular.forEach($scope.selectedUserListOP, (el, idx) =&gt; {
        if(el.StudentScheduleUsrID === $scope.scheduleUsers.lstOnlineProctoring[k].StudentScheduleUsrID) {
            $scope.selectedUserListOP.splice(idx, 1);
        }
    });
}
</code></pre>

<p><code>splice</code>'s first argument should be the <em>index</em> of the element you want to start deleting from. That's fine. But in the lower code, the first argument you pass to <code>splice</code> is the <em>object</em> <code>x</code>, not the index:</p>

<pre><code>$scope.scheduleUsers.lstOnlineProctoring.forEach(x =&gt; {
  // ...
  } else if(!checked){
      if($scope.selectedUserListOP.filter(m =&gt; m.StudentScheduleUsrID == x.StudentScheduleUsrID).length &gt; 0)
          $scope.selectedUserListOP.splice(x, 1);
  }
</code></pre>

<p>That won't work, because the first argument is not a number. If you want to remove this <code>x</code> from the array there, find its <em>index</em> in the array with <code>findIndex</code>, then pass that number to <code>splice</code>.</p>

<pre><code>const selectedUserIndex = $scope.selectedUserListOP.findIndex(
  selectedUser =&gt; selectedUser.StudentScheduleUsrID === user.StudentScheduleUsrID
);
if (selectedUserIndex !== -1) {
  $scope.selectedUserListOP.splice(selectedUserIndex, 1);
}
</code></pre>

<hr>

<p>On a different note: Errors <strong>should not arise</strong> in synchronous code in most cases. If you have code that sometimes results in an unexpected error, you should fix the code so that the error doesn't ever occur (as far as you can tell). If you've tested the code in various situations (which you should be doing anyway, as a developer) and you can't think of any which might cause an error to occur, there shouldn't be any reason to use <code>try</code>/<code>catch</code>, since it'll just clutter up the code - and besides, you aren't doing anything with the error other than logging it to the console, but the error will be logged to the console anyway. So, feel free to remove the <code>try</code>/<code>catch</code>.</p>

<p>It can be reasonable to have a <code>try</code>/<code>catch</code> if any of the following are true <em>and</em> you can do something useful with the error (such as send it to your server logs for examination, or gracefully degrade functionality for the user):</p>

<ul>
<li>You're <code>await</code>ing an asynchronous operation that might throw (eg, due to a network problem - very common)</li>
<li>Synchronous code you're calling and don't have control over may throw (pretty unusual)</li>
<li>Despite implementing your own tests, the logic is extremely complicated and you're not sure if there lingering issues (pretty unusual)</li>
<li>You need to break out of a deeply nested function with <code>throw</code> and yield control flow back to a much higher calling function (pretty unusual and somewhat of a code smell - better to test values and return when invalid)</li>
</ul>

<p>None of the above are going on here.</p>

<hr>

<p>Instead of filtering inside the loop to check to see if any of the elements in the <code>selectedUserListOP</code> have a matching <code>StudentScheduleUsrID</code>, it would be more elegant and less computationally complex to construct a Set of all the <code>StudentScheduleUsrID</code>s in the <code>selectedUserListOP</code> beforehand. Then, all you need to do inside the loop is check whether that set <code>.has</code> it:</p>

<pre><code>$scope.selectAllProctoringUser = function(checked) {
  const selectedUserStudentIds = new Set(
    $scope.selectedUserListOP.map(
      user =&gt; user.StudentScheduleUsrID
    )
  );
  $scope.scheduleUsers.lstOnlineProctoring.forEach(user =&gt; {
    user.selected = checked;
    if (checked) {
      if (!selectedUserStudentIds.has(user.StudentScheduleUsrID)) {
        $scope.selectedUserListOP.push(x);
      }
    } else {
      const selectedUserIndex = $scope.selectedUserListOP.findIndex(
        selectedUser =&gt; selectedUser.StudentScheduleUsrID === user.StudentScheduleUsrID
      );
      if (selectedUserIndex !== -1) {
        $scope.selectedUserListOP.splice(selectedUserIndex, 1);
      }
    }
  });
}
</code></pre>

<p>If you <em>did</em> have to iterate over the array there, instead of <code>if (someArr.filter(...).length == 0)</code>, it would be better to</p>

<ul>
<li>Use <a href="https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons">strict equality</a> with <code>===</code>, not loose equality (consider using a linter)</li>
<li><p>To check whether every items in an array passes a test (or doesn't pass a test), use <code>.every</code> or <code>.some</code> - <em>don't</em> use <code>.filter</code> to construct a new array only to check its length. Eg:</p>

<pre><code>if ($scope.selectedUserListOP.every(m =&gt; m.StudentScheduleUsrID !== x.StudentScheduleUsrID))
</code></pre></li>
</ul>
    </div>