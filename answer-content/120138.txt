<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For the <code>if(filePath.Length &gt;= 240)</code> part, you can use the <code>Path</code> object.
It throws a <code>PathTooLongException</code>.</p>

<p>You can then change to this :</p>

<pre><code>try
{
    filePath = Path.GetFullPath(filePath);
}
catch (PathTooLongException ex)
{
    directoryFound = false;
    Console.WriteLine("Please keep the filepath under 240 chars so that you still are able to provide a name for the file.");
}
</code></pre>

<p>Note : you can find references to Path object <a href="https://msdn.microsoft.com/fr-fr/library/system.io.path.getfullpath(v=vs.110).aspx" rel="noreferrer">here</a> and see all exception you have to handle invalid path input.</p>

<p>Now for <code>GetFileName()</code>, you can use the same object <a href="https://msdn.microsoft.com/fr-fr/library/system.io.path.getfilename(v=vs.110).aspx" rel="noreferrer">Path.GetFileName()</a>. It will check if the name is valid.</p>

<blockquote>
  <p>ArgumentException : path contains one or more of the invalid characters defined in GetInvalidPathChars.</p>
</blockquote>

<pre><code>...
fileName = Console.ReadLine();
            Console.Clear();
try
{
    fileName = Path.GetFileName(fileName);
}
catch (ArgumentException ex)
{
    // Whatever exception handling you want.
}
</code></pre>

<p>Note : Since you have to check more than one time if the Path is valid, I would create a method to do this.</p>

<pre><code>public static bool PathIsValid(string inputPath)
{
    try
    {
        Path.GetFullPath(inputPath);
    }
    catch(PathTooLongException ex)
    {
        return false;
    }
    return true;
}
</code></pre>
    </div>