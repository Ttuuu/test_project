<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In pseudocode, your program looks roughly like this:</p>

<pre><code>z = |z|
for x = 0..1000
  for y = 0..1000
    if x² - y² = z -&gt; return true
return false
</code></pre>

<p>It can be made faster by several orders of magnitude if you got rid of the nested loops:</p>

<pre><code>x = y = 0
z = |z|
while x &lt;= 1000:
  r = x² - y² - z
  if r = 0: return true
  if r &lt; 0: x += 1
  if r &gt; 0: y += 1
return false
</code></pre>

<p>Alternatively, we can iterate down to zero, which better suits an assembly implementation.</p>

<pre><code>x = y = 1000
z = |z|
while y &gt;= 0:
  r = x² - y² - z
  if r = 0: return true
  if r &lt; 0: y -= 1
  if r &gt; 0: x -= 1
return false
</code></pre>

<p>We still face the problem that intermediate results in <code>r = x² - y² - z</code> can be rather large, which is probably the reason you restricted <code>x</code> and <code>y</code> to values below 1000. Incremental updates to the residual are not only numerically superior, they are also faster and allow us to get away without a single multiplication:</p>

<pre><code>x = y = 1000
r = -|z|
while y &gt;= 0:
  if r = 0: return true
  if r &lt; 0: y -= 1, r += 2y + 1
  if r &gt; 0: x -= 1, r -= 2x + 1
return false
</code></pre>

<p>In x86 assembly, this results in a fairly tight loop.</p>

<pre><code>x = y = 1000
r = -|z|

  cmp r, 0
  jl negative
  jmp success

positive:
  dec x
  lea r [r - 2*x]
  dec r              ; implicitly sets status flags
  jl negative        ; most taken branch
  jg positive
  jmp success

negative:
  dec y              ; implicitly sets status flags
  jl fail            ; continue while y &gt;= 0
  lea r [r + 2*y]
  inc r              ; implicitly sets status flags
  jl negative        ; most taken branch
  jg positive
  jmp success

fail:
  ...
success:
  ...
</code></pre>

<p>As was suggested in the comments, a slightly modified implementation can handle both negative and positive values of <code>z</code> naturally:</p>

<pre><code>x = y = 1000

  cmp z, 0
  jl negative
  jg positive
  jmp success

positive:
  dec y              ; implicitly sets status flags
  jl fail            ; continue while y &gt;= 0
  lea z [z - 2*y]
  dec z              ; implicitly sets status flags
  jg positive
  jl negative
  jmp success

negative:
  dec x              ; implicitly sets status flags
  jl fail            ; continue while x &gt;= 0
  lea z [z + 2*x]
  inc z              ; implicitly sets status flags
  jl negative
  jg positive
  jmp success

fail:
  ...
success:
  ...
</code></pre>
    </div>