<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public Node DeepCopy()
{
    var other = (Node)MemberwiseClone();

    other.Children = new List&lt;Node&gt;(collection: Children);
    other.Parent = Parent?.DeepCopy();
    other.Value = new Node(value: Value);

    return other;
}
</code></pre>
</blockquote>

<p>You should be careful when using this, because it actually clones the entire tree (via <code>Parent</code> and <code>Children</code>). Besides that, I think <code>MemberwiseClone</code> copies the <code>Children</code> and <code>Parent</code> recursively. So by creating a new list for the <code>Children</code> and calling <code>DeepCopy()</code> on the <code>Parent</code> you actually get a mix of copies and existing <code>Node</code> objects, that can lead to unexpected behavior if you change either the copy or the original later on. And the child instances (<code>other</code>) will not be part of the parents <code>Children</code> list in the copy.</p>

<p>Why does <code>other.Value</code> become a <code>Node(Value)</code>? - <code>Value</code> is by the way also covered by <code>MemberwiseClone</code>.</p>

<p>Consider if it is of any use and possibly skip it. I can't see any use of it?</p>

<hr>

<blockquote>
<pre><code>public void RemoveChild(Node node)
{
    if (node != this &amp;&amp; Children.Contains(node))
    {
        Children.Remove(node);
    }
}
</code></pre>
</blockquote>

<p>It is safe to call <code>Children.Remove(node)</code> even if <code>node</code> is not in the list or is <code>null</code>, so you can omit the <code>Contains()</code> check. <code>node != this</code> - I suppose this should be avoided in the <code>Add</code> method - but why can't <code>this</code> be removed if provided as <code>node</code>? You could consider to return the <code>bool</code> values returned from <code>Children.Remove(node)</code>, to let the client known if the operation was succesful or not.</p>

<hr>

<p>You could consider to make the <code>Node</code> class generic:</p>

<pre><code>public class Node&lt;T&gt;
{
    public T Value { get; }
    ...
}
</code></pre>

<hr>

<p>As of <code>GetChildrenRecursive()</code> it seems to work, but looks rather complicated as a BFS algorithm. Remember that you have private access to the properties and fields of <code>Node</code> instances, so you can for instance call <code>Children</code> on any <code>Node</code> not just <code>this</code>. Below is a revised version, that is a little easier to follow:</p>

<pre><code>  public IEnumerable&lt;Node&gt; GetChildrenRecursive()
  {
    if (!HasChildren) yield break;

    Queue&lt;Node&gt; queue = new Queue&lt;Node&gt;(this.Children);

    while (queue.Count &gt; 0)
    {
      var node = queue.Dequeue();
      yield return node;

      if (node.HasChildren)
      {
        foreach (Node child in node.Children)
        {
          queue.Enqueue(child);
        }
      }
    }
  }
</code></pre>

<p>It uses <code>yield return</code> instead of creating a concrete <code>List&lt;Node&gt;</code> object which is more in line with the return value <code>IEnumerable&lt;Node&gt;</code>.</p>
    </div>