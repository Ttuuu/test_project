<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No, don't do that. You seem to be filtering and escaping values out of paranoia rather than understanding what exactly would lead to a vulnerability. As a result, you are corrupting your data.</p>

<p>A well designed application should use the database to store the value that the user typed into the textarea, not some mangled representation of it. If you mangle the data like that before storing it, then:</p>

<ul>
<li>Certain characters that the user typed get dropped. (What if the user input is <code>x + 3 &lt; 5</code>? The data would no longer make sense after you drop the <code>&lt;</code> character.)</li>
<li>Your database is not reliably searchable. (What if the user input is <code>She said "yes!"</code>? Then you would store a value in the database with <code>&amp;quot;</code> in it.)</li>
<li>If you arbitrarily apply escaping to string just in case, then you'll have a hard time keeping track of how to unescape it correctly when regurgitating the data. (This often leads to bugs where the user sees garbage like <code>his &amp;amp; hers</code>, or even worse, <code>his &amp;amp;amp; hers</code>.)</li>
</ul>

<p>What's the right way? Don't mangle the data; just store it faithfully:</p>

<pre><code>// store the content
$addPostStmt = $conn -&gt; prepare("
  INSERT INTO posts(description) VALUES (?)
");

$addPostStmt -&gt; bind_param("s", $_POST['userinput']); 
$addPostStmtExecute = $addPostStmt -&gt; execute();
</code></pre>

<p>When outputting the data as HTML, apply HTML escaping:</p>

<pre><code>&lt;th&gt;Description:&lt;/th&gt;&lt;td&gt;&lt;?php echo htmlspecialchars($description); ?&gt;&lt;/td&gt;
</code></pre>
    </div>