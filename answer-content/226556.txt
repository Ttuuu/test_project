<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static byte[] Encrypt(byte[] bytes, byte[] key)
</code></pre>
</blockquote>

<p><code>bytes</code> doesn't tell me anything that I don't already know from the type. <code>plaintext</code> would tell me the <em>meaning</em> of this variable.</p>

<hr>

<blockquote>
<pre><code>    byte[] z = new byte[bytes.Length];
</code></pre>
</blockquote>

<p>Similarly, this would be more usefully named <code>ciphertext</code>.</p>

<hr>

<blockquote>
<pre><code>    byte[] s = new byte[256];
    byte[] k = new byte[256];
    byte temp;
    int i, j;
</code></pre>
</blockquote>

<p>Is there any benefit to reusing <code>temp</code>, <code>i</code>, and <code>j</code> rather than just redeclaring them in each scope? The benefit to redeclaring them is that it's more transparent that they are new variables.</p>

<hr>

<blockquote>
<pre><code>    for (i = 0; i &lt; 256; i++)
    {
        ...
        k[i] = key[i % key.GetLength(0)];
    }

    ...
    for (i = 0; i &lt; 256; i++)
    {
        j = (j + s[i] + k[i]) % 256;
        ...
    }
</code></pre>
</blockquote>

<p><code>k</code> is used precisely once, and that's in a loop of the same length as the one which initialises it. IMO it would simplify things to eliminate the middleman and just use <code>key[i % key.Length]</code> in the second loop.</p>

<hr>

<blockquote>
<pre><code>        j = (j + s[i] + k[i]) % 256;
</code></pre>
</blockquote>



<blockquote>
<pre><code>        i = (i + 1) % 256;
        j = (j + s[i]) % 256;
        ...
        int t = (s[i] + s[j]) % 256;
</code></pre>
</blockquote>

<p>Here is the big optimisation opportunity. Replacing <code>% 256</code> with <code>&amp; 255</code> gives me a 25% reduction in execution time with a large plaintext.</p>

<hr>

<blockquote>
<pre><code>    for (int x = 0; x &lt; z.GetLength(0); x++)
</code></pre>
</blockquote>

<p>I missed this at first: since it's a one-dimensional array, you can use <code>Length</code> instead of <code>GetLength(0)</code>. This gives a significant further speedup.</p>

<hr>

<p>I must say, though, that the code is simple enough to already be very fast. My test case is 512MB of plaintext, and the time drops from 10.2 secs to 5.4 secs.</p>
    </div>