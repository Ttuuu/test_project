<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>captcha_to_text</code>:</p>
<pre><code>full_path = r'/home/sangharshmanuski/Documents/e_courts/captcha'
</code></pre>
<p>Use a <strong><a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">temp file</a></strong> instead, if it's going to be discarded anyway (unless you want to investigate failures later).</p>
<hr>
<p>In that same procedure and in other parts of your code you have multiple references to <code>/home/sangharshmanuski</code>. Define a global variable instead.</p>
<p>But you have a global variable already: <code>main_Directory = r'/path to the directory/downloads6'</code>, which is completely different. You are mixing disparate paths so I would suggest more consistency here.</p>
<hr>
<p>Function <code>get_states</code> does not seem to be used. I think you kept it as an example. Remove unused portions of the code, declutter as much as possible.</p>
<hr>
<p>Some <strong>logging</strong> messages should be <strong>debug</strong> level I think. When the application is mature enough, you'll probably want less verbosity and decrease the reporting level. So for dumping variables or application state etc use <code>logging.debug</code> instead of <code>logging.info</code>.</p>
<p>Since you are now using the logging module and this is a good thing, you can add more traces to better follow execution of your program. I would perhaps add a <code>logger.debug</code> line in each function so that you can track progress of your code and you can also verify that functions are not called multiple times or out of loop. Tracing execution is important.</p>
<hr>
<p>Some functions I still find a bit perplexing:
<code>wait_msg_wait</code>: instead of doing <code>time.sleep</code> in a loop why not use Selenium functions eg:
<code>WebDriverWait(driver, 10).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, '#theselector')))</code> if you are waiting for an element to disappear. Since you are using Selenium you have a lot of choice between implicit and explicit wait functions.</p>
<p>Seems to me that <code>wait_msg_wait</code> and <code>wait_msg</code> can be combined into one single function.</p>
<hr>
<p>Scope: <code>variable combo_identifier = '#sateist'</code> is defined on top of the code. But if it's used in only one function, move it to that function to keep scope as limited as possible and avoid distraction.</p>
<hr>
<p>Some functions are little or not commented
Example: <code>dist_dir</code>, <code>download</code></p>
<p>In <code>download</code>:</p>
<pre><code>os.path.join(main_Directory, some_district,
    some_complex, "file_" + str(record) + ".html"), "w")
</code></pre>
<p>You can use an F-string to avoid concatenation.</p>
<hr>
<p>Since the project is not easy breaking up the code in small functions makes it more manageable. But I think this approach could have been pushed further. The main section remains very procedural and not that easy to follow.
For example, if I pick on line at random:</p>
<pre><code>match_heading(this_district)
</code></pre>
<p>It's not immediately clear what this line does. For an outsider, more detailed comments would be welcome.</p>
<p>I would now try to split the main section in small functions as well like:</p>
<ul>
<li>load_home_page()</li>
<li>break_captcha()</li>
<li>dismiss_alert()</li>
<li>get_states()</li>
<li>download_court_records()</li>
<li>go_back()</li>
</ul>
<p>etc. The idea is to clearly identify the tasks involved, and better separate them.</p>
<hr>
<p>Since there is a lot of code you could create a module to keep your functions in a separate file, then you import the module. Thus your main routine will be small and more manageable.</p>
    </div>