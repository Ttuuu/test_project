<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A vector of vectors can be an inefficient representation, because the storage may be scattered across many pages of memory.  We can keep the data close together by using a single vector, and linearising the rows within it, perhaps like this:</p>

<pre><code>#include &lt;cstddef&gt;
#include &lt;vector&gt;

class Matrix
{
    std::size_t width;
    std::size_t height;
    std::vector&lt;double&gt; content;

public:
    Matrix(std::size_t width, std::size_t height)
        : width{width},
          height{height},
          content(width * height)
    {}

    double&amp; operator()(std::size_t row, std::size_t col) {
        return content[row * width + col];
    }

    double const&amp; operator()(std::size_t row, std::size_t col) const {
        return content[row * width + col];
    }
};
</code></pre>

<hr>

<p>Repeating from the original review:</p>

<ul>
<li>always check the result of stream input operations</li>
<li>avoid comparing signed and unsigned types; or better, avoid the comparison by using range-based <code>for</code>.</li>
</ul>
    </div>