<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your bolded question <strong><em>What is the optimal algorithm</em></strong> is off-topic for Code Review. If you're really interested in original-research answers to that question, I think it might plausibly be on-topic for <a href="https://puzzling.stackexchange.com/help/on-topic">Puzzling SE</a> or <a href="https://cs.stackexchange.com/help/on-topic">Computer Science SE</a>.</p>

<p>Certainly if you post in either of those places, looking for "optimal" algorithms, you will have to define what you mean by "optimal." The simplest way of doing that would also be useful on CodeReview â€” and also in general in your programming career! <strong>Provide test cases.</strong></p>

<pre><code>assert solve([2, 4, 6, 3], [-2, -4, -6, -3], 3) == 42
</code></pre>

<p>This test case was constructed by looking at your sample program and then filling in an utterly random number <code>42</code> in the one place that matters. When you post the question elsewhere (and/or here again), make sure to have that number filled in.
And then give some other test cases!</p>

<pre><code>assert solve([2, 4, 6, 3], [-2, -4, -6, -3], float('inf')) == 4
assert solve([1, 1, 1], [0, 0, 0], 1) == 3
</code></pre>

<p>And then consider what should happen in cases of "invalid input":</p>

<pre><code>assert solve([1, 1, 1], [0, 0, 0], 0) is None
assert solve([1, 2, 1], [1, 3, 1], 1) is None
assert solve([1, 3, 1], [1, 2, 1], 1) is None
assert solve([1, 3, 1], [1, 3, 1], 1) is None
</code></pre>

<hr>

<p>On your code itself, try to write out full identifiers instead of abbreviations: <code>index</code> (index of what?) instead of <code>ind</code>, for example.</p>

<p>When writing a "predicate" function that returns <code>bool</code>, give it a name that indicates the <em>predicate</em>, rather than an action verb: instead of <code>check_legal</code> (which should really be <code>check_legality</code>), prefer <code>is_legal</code>, so that you can write</p>

<pre><code>assert is_legal(init, max_dist)
</code></pre>

<p>Notice that <code>max_dist</code> has no reason to be a keyword argument, and no reason to be optional. Instead of passing <code>None</code> and special-casing it, just pass <code>float('inf')</code> and <em>don't</em> write any special cases.</p>

<hr>

<pre><code>pos_options = [final[ind]]\
                  +[n+sign*max_dist for n in neighbors]
</code></pre>

<p>This line of code is impenetrable, due to the lack of whitespace and the backslash in the middle. I'd at least recommend</p>

<pre><code>pos_options = [final[ind]] + [n + sign * max_dist for n in neighbors]
</code></pre>

<p>and then look for a way to refactor that or at least put a code comment explaining the logic behind the expression.</p>
    </div>