<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Alternatives for OP to try</strong></p>

<p>As OP is looking for performance improvements, consider only 1 loop for both whole and fractional part calculation.  Simply iterate through all the digits in one loop and note if and where the decimal point occurred.</p>

<pre><code>// Pseudo code
DP = '.'
significant = 0.0
fractionLengh = 0
for (i=0; i &lt; input.len; i++) 
  ch = input[i]
  if (some_isdigit_test(ch)) {
    significant = significant * 10 + ch - '0'
  } else if (ch == DP) {
    DP = '0'  // Never match again
    fractionLengh = input.len - i - 1
  } else {
    return fail;
  }
}

// continue as before
if (fractionLengh &lt; NegPow10.Length) ....
</code></pre>

<p><strong>Perhaps integers?</strong></p>

<p>Instead of accumulating <code>result</code> as some floating point type, accumulate the digits as a 64-bit integer.  This, depending on platform, is often significantly faster than <code>double</code>.</p>

<p>Code could simply count leading zeros (important if there is a '.' there) and then loop onto the minimum of  of the remaining text length or 18 (number of 999... digts in a 64-bit integer) and then do a final integer to <code>double</code> for subsequent calculation.</p>

<hr>

<p><strong>Not alwasy the best</strong></p>

<p>There are concerns with OP's code about generating the best answer.</p>

<p>Challenging (lengthly) text input eventual causes <code>significant * 10</code> to round its answer and even perhaps overflow (even with an in range possible result).</p>

<p>With OP's <code>fractionalPart</code> being rounded and <code>NegPow10[fractionLengh])</code> also rounded, the product and than addition to <code>result</code> may be off by 1 or 2 <a href="https://en.wikipedia.org/wiki/Unit_in_the_last_place" rel="nofollow noreferrer">ULP</a>.</p>

<p>To get the best result, additional (slower) code is needed.</p>

<p><strong>-0.0</strong></p>

<p>It appears OP's code will generate the correct result.  I suspect unposted test code is insufficient to fully test this case.  Perhaps OP  is not concerned about this case as "anything exotic".</p>

<p><strong>Range</strong></p>

<p>I'd expect test cases should include the maximum <code>+/-Double</code> as text and the minimum non-zero value +/-0.01</p>

<p><strong>Positive numbers?</strong></p>

<p>Code test for a leading <code>'-'</code>.  How about a leading <code>'+'</code>?  Research <code>CurrentCulture.NumberFormat.PositiveSign</code>.</p>
    </div>