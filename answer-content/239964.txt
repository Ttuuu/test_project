<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Global constants</h2>

<p><code>chromedriver_path</code> should be capitalized. Otherwise: I assume that you manually change it from <code>None</code> to some meaningful value for your local system. Try not to do this - instead, accept that path as an environmental variable, in a config file, or as a command-line parameter.</p>

<h2>Captain Obvious</h2>

<p>This:</p>

<pre><code>    """
    :param username: username
    :param password: password
    :param folder: folder name
    """
</code></pre>

<p>is worse than having no comments at all. Fill these out to be meaningful to someone who doesn't know what your script does.</p>

<h2>Side-effects</h2>

<p>One would expect, looking from the outside, that <code>name</code> simply returns a string - especially since it's marked as a property. It does that, but it also has the side-effect of setting <code>self._search_name</code> (sometimes). There are at least two problems with this:</p>

<ul>
<li>State modification in a getter - this is occasionally useful, i.e. in caching, but that isn't what you're doing here</li>
<li>Conditional state modification whose reason isn't obvious - why is it that a member is only set if the URL is HTTPS?</li>
</ul>

<h2>Names</h2>

<p><code>control</code> doesn't seem to control anything; it creates a directory.</p>

<p><code>get_href</code> is not a getter; it doesn't return anything. It actually <em>would</em> make more sense as a static getter that <code>yield</code>s instead of appending to a list; then the caller could simply <code>self.links.extend(self.get_hrefs())</code>.</p>

<h2><code>located</code></h2>

<p>In its current implementation, this makes no sense:</p>

<pre><code>    try:
        self.driver.find_element_by_xpath('//*[@class="_4emnV"]').is_displayed()
        return True
    except NoSuchElementException:
        return False
</code></pre>

<p>You call <code>is_displayed</code> and throw its return value away, relying on a no-such-element to determine the return value of your function. Why call <code>is_displayed</code> at all?</p>

<h2><code>scroll_down</code></h2>

<p>You have a <code>while True</code> that doesn't exit on its own. Instead, the outer caller waits for a boolean:</p>

<pre><code>    for displayed_more in self.scroll_down():
        if not displayed_more:
            break
</code></pre>

<p>This entire iterable structure all the way up to <code>get_href</code> needs to be re-thought. What you should have is a generator function that, instead of yielding a <code>bool</code> to terminate, yields a URL string, and breaks out of the loop (with a <code>break</code>, not a boolean flag) when the no-such-element condition is met.</p>

<h2>Side-effects in comprehensions</h2>

<p>This is particularly gruesome:</p>

<pre><code>    seen = set()
    links = [link for link in self.links if not (link in seen or seen.add(link))]
</code></pre>

<p>As soon as you have a term of a statement that's being relied upon to modify the iteration, you should expand this out into a normal loop. However, if I understand this correctly, you're simply removing dupes, in which case</p>

<pre><code>links = set(self.links)
</code></pre>

<p>If you care deeply about order, then there are other ways to do this that still don't require a custom generator.</p>

<h2>Generator materialization</h2>

<p>This:</p>

<pre><code>    new_links = [urllib.parse.urljoin(link, '?__a=1') for link in links]
</code></pre>

<p>should use parentheses instead of brackets, because you don't need the list in memory - you only need the generator once through.</p>

<h2>Variable reuse</h2>

<p>Save</p>

<pre><code>logging_page_id['graphql']['shortcode_media']
</code></pre>

<p>to a temporary variable for reuse.</p>

<h2>Tuples in a function</h2>

<p>This:</p>

<pre><code>def download_video(self, new_videos: Tuple[int, str]) -&gt; None:
</code></pre>

<p>can simplify its tuple unpacking from</p>

<pre><code>    number = new_videos[0]
    link = new_videos[1]
</code></pre>

<p>to</p>

<pre><code>number, link = new_videos
</code></pre>

<h2>Magic numbers</h2>

<p>Pull the 8 from this</p>

<pre><code>Pool(8)
</code></pre>

<p>into a constant, for instance</p>

<pre><code>N_PROCESSES = 8
# ...
Pool(N_PROCESSES)
</code></pre>

<p>This is more maintainable and self-documenting.</p>
    </div>