<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>PerformCalculation</code> function, you are repeating argument parsing several times. You should really apply processing only once, for the sake of code maintenance:</p>

<pre><code>static int PerformCalculation(string[] Input)
{
    int left = int.Parse(Input[0]);
    int right = int.Parse(Input[2]);
    switch (Input[1])
    {
        case "+": return left + right;
        case "-": return left - right;
        case "*": return left * right;
        default: return left / right; // Mind possible division by zero
    }
}
</code></pre>

<p>Mind that the <code>switch</code> is more compact if it returns results (without <code>break</code>).</p>

<p>Also, note that the <code>InputToList</code> method an be made much more compact if you know the format of the expression:</p>

<pre><code>static string[] InputToList(string input)
{
    int opIndex = input.IndexOfAny(new[] {'+', '-', '*', '/'});
    return new[]
    {
        input.Substring(0, opIndex), 
        input.Substring(opIndex, 1), 
        input.Substring(opIndex + 1)
    };
}
</code></pre>

<p>The <code>IndexOfAny</code> method is returning the first index inside string at which any of the listed characters appears.</p>

<p>The <code>Substring</code> method returns a new string which is the section of the original string. Please refer to documentation: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.substring?view=netframework-4.8" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/dotnet/api/system.string.substring?view=netframework-4.8</a></p>

<p>It is tempting to use the <code>string.Split()</code> method for this same purpose:</p>

<pre><code>static string[] InputToList(string input) =&gt;
    input.Split('+', '-', '*', '/');
</code></pre>

<p>However, <code>Split</code> actually drops the delimiter. Hence, the string <code>"25+36"</code> would produce an array <code>["25", "36"]</code>, and the operator would be lost.</p>
    </div>