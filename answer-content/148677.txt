<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We first sort the list and then keep comparing the ends of the sorted list to get those pairs of numbers which sum to a given number. Merge sort has been used here, however any other sorting algorithm can also be used. The main logic is in the find_pairs function.</p>

<pre><code>def mergeSort(A):

    if len(A) &gt; 1:
        mid = len(A)//2
        lefthalf = A[:mid]
        righthalf = A[mid:]

        mergeSort(lefthalf)
        mergeSort(righthalf)

        # Merge the halves
        i,j,k=0,0,0

        while i&lt;len(lefthalf) and j&lt;len(righthalf):
            if lefthalf[i] &lt; righthalf[j]:
                A[k] = lefthalf[i]
                i = i + 1
            else:
                A[k] = righthalf[j]
                j = j + 1
            k = k + 1

        while i &lt; len(lefthalf):
            A[k] = lefthalf[i]
            k = k +1
            i = i + 1

        while j &lt; len(righthalf):
            A[k] = righthalf[j]
            k = k + 1
            j = j + 1


def find_pairs(alist, item):
    # We take two flags left and right to point to the ends of the sorted list
    left = 0
    right = len(alist) - 1
    pairs = []
    while(left&lt;right):
        # We find the sum of the numbers in at these two points.
        # If the sum is equal to our number for which we are finding pairs, we consider this pair and add it to our results
        # If the sum is greater than expected then we move the right pointer one step back to a smaller number and then compute sum again
        # If the sum is smaller than expected then we move the left pointer a step ahead and check the sum with a greater number
        sum = alist[left] + alist[right]
        if sum == item:
            pairs += [(alist[left],alist[right])]
            # Move the pointers to next elements in the list and find more pairs
            right -= 1
            left += 1
        elif sum &gt; item:
            right -= 1
        else:
            left += 1
    return pairs


l1 = [80, 98, 83, 92, 1, 38, 37, 54, 58, 89]
mergeSort(l1)
print l1
print find_pairs(l1,181)

l2 = [-5,-2, -23, 34,21,90,1,0,65,8,-10]
mergeSort(l2)
print l2 
print find_pairs(l2,-2)
</code></pre>

<p>The output of the above program is:</p>

<pre><code>[1, 37, 38, 54, 58, 80, 83, 89, 92, 98]
[(83, 98), (89, 92)]


[-23, -10, -5, -2, 0, 1, 8, 21, 34, 65, 90]
[(-23, 21), (-10, 8), (-2, 0)]
</code></pre>
    </div>