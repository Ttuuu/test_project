<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>In-band error signalling</h2>
<pre><code>return signal_data
# ...
# reports false if message fails to be received
return False
</code></pre>
<p>is problematic. You're forcing the caller of this code to understand that the return value has at least two different types: boolean or whatever "signal data" is.</p>
<p>The Python way to approach this is to use exceptions. Rather than (say) re-throw <code>AttributeError</code>, it would probably make more sense to throw your own exception type.</p>
<p>Also, the logic around retry counts is a little convoluted. You should be able to assume that if the loop has ended without returning, it has failed. Also, don't increment the counter yourself. In other words,</p>
<pre><code>for attempt in range(5):
    msg = bus.recv(1)
    try:
        if msg.arbitration_id == message.arbitration_id:
            message_data = db.decode_message(msg.arbitration_id, msg.data)
            signal_data = message_data.get(signal)
            return signal_data
    except AttributeError:
        pass

raise CANBusInactiveError()
</code></pre>
<p>I would go a step further. My guess is that <code>msg</code> - if it fails - does not have the <code>arbitration_id</code> attribute. So - rather than attempting to catch <code>AttributeError</code> - either:</p>
<ul>
<li>call <code>hasattr</code>, or</li>
<li>(preferably) call <code>isinstance</code>.</li>
</ul>
<h2>Context management</h2>
<p>Put this:</p>
<pre><code>verbose_log = open("verbose_log.txt", "a")
verbose_log.close()
</code></pre>
<p>in a <code>with</code>.</p>
<h2>Hard-coded paths</h2>
<pre><code>'C:\\Users\\tw\\Desktop\\dbc_file.dbc'
</code></pre>
<p>should - at least - go into a constant variable. Better would be to get it from a command-line argument, a conf file or an env var.</p>
    </div>