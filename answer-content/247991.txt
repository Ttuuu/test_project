<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The program is definitely improved from the earlier version.  Nice job!  Here are some things that may help you improve it further.</p>
<h2>Don't Repeat Yourself (DRY)</h2>
<p>There are eleven repetitions of the constructor, which seems a bit excessive to me, especially because the code is nearly identical.  I would reduce those to exactly one:</p>
<pre><code>Engine(
    Coord windowSize, 
    std::vector&lt;int&gt;&amp;&amp; numbers, 
    SortAlgorithm algorithm = SortAlgorithm::bubbleSort, 
    DrawMethod method = DrawMethod::point,
    const char* windowTitle = "Sort visualizer"
); 
</code></pre>
<p>By providing a single constructor with default parameters, the repetitions are eliminated and flexibility is enhanced.  Note also that the array of numbers is passed as an argument.</p>
<h2>Reduce the size of the interface to only what is needed</h2>
<p>These two functions are generic and don't need to be class members:</p>
<pre><code>std::vector&lt;int&gt; SortVis::loadFile(std::istream&amp; numberFile);
std::vector&lt;int&gt; SortVis::generateRandom(int maxNumber);
</code></pre>
<p>By reducing the size of the interface to the minimal needed, the class is smaller and easier to read, understand, test, use, maintain and adapt.  Note also that the first argument takes a <code>std::istream&amp;</code> instead of a filename.  This allows for such handy things as loading from a socket or a stringstream.</p>
<h2>Prefer to fail early</h2>
<p>If the <code>SDL_InitSubSystem</code> call in the constructor fails, there's not much point to continuing.  For that reason, the more time-consuming <code>calculateNumbers</code> call should probably come after rather than before.</p>
<h2>Only set the color if you're going to draw something</h2>
<p>The only places that <code>SDL_SetRenderDrawColor</code> should be used is just before something is actually drawn on the screen.  For that reason, it can appear exactly twice in this code: once at the top of <code>drawSelection</code> and once at the top of <code>draw</code>.</p>
<h2>Move work outside of loops where practical</h2>
<p>Instead of recalculating all four portions of <code>column</code> every time through the loop, it's possible to simply change the ones that need to change:</p>
<pre><code>SDL_Rect column{ 0, 0, columnWidth, 0 };
for (const auto n : numbers)
{
    column.h = n * windowSize.Y / maxValue;
    column.y = windowSize.Y - column.h;
    SDL_RenderFillRect(renderer, &amp;column);
    column.x += columnWidth;
}
</code></pre>
<h2>Use objects instead of <code>switch</code>es</h2>
<p>The code currently contains this:</p>
<pre><code>void SortVis::Engine::step()
{
    switch (selectedSortAlgorithm)
    {
    case SortAlgorithm::bubbleSort:
        stepBubbleSort();
        break;

    case SortAlgorithm::insertionSort:
        stepInsertionSort();
        break;

    case SortAlgorithm::selectionSort:
        stepSelectionSort();
        break;

    default:
        break;
    }
}
</code></pre>
<p>This requires the evaluation of <code>selectedSortAlgorithm</code> every iteration.  The better way to do this is to create a virtual base class that demonstrates the interface and then allow the user to create a derived class with any new kind of sort they like.  Here's one way to do it:</p>
<pre><code>using Collection = std::vector&lt;int&gt;;
struct Sorter {
    std::string_view name;
    virtual bool step(Collection &amp;) = 0;
    Sorter(Sorter&amp;) = delete;
    Sorter(std::string_view name) 
        : name{name}
    {
    }
    virtual void reset(Collection&amp; numbers) {
        a = original_a = 0;
        original_b = numbers.size();
    }
    virtual ~Sorter() = default;
    std::size_t a;
    std::size_t original_a; 
    std::size_t original_b;
};

struct BubbleSorter : public Sorter {
    BubbleSorter() : Sorter{"Bubble Sort"} { }
    bool step(Collection&amp; numbers) {
        auto lag{original_a};
        for (auto it{lag + 1}; it &lt; original_b; ++it, ++lag) {
            if (numbers[lag] &gt; numbers[it]) {
                std::swap(numbers[lag], numbers[it]);
            }           
        }
        return ++a != original_b;
    }
};
</code></pre>
<p>Now for maximum flexibility, you can pass such an object to the <code>Engine</code> in its constructor:</p>
<pre><code>Engine visualization{
    { 1024, 768 },
    generateRandom(1024),
    std::make_unique&lt;BubbleSorter&gt;()
};
</code></pre>
<h2>Use a pointer to a member function</h2>
<p>A similar thing can be done for the drawing method if you like, but it's a little trickier since it uses a pointer to a member function which has a syntax that can be difficult to get right.  We might declare the variable within <code>Engine</code> like this:</p>
<pre><code>void (Engine::*drawSelection)();
</code></pre>
<p>I've repurposed your <code>drawSelection</code> name here.  Within the constructor we can use this:</p>
<pre><code>drawSelection{method == DrawMethod::point ? &amp;Engine::drawPoints : &amp;Engine::drawColumns}
</code></pre>
<p>And finally to call it, we need to use the pointer-to-member access operator.  Here it is in context:</p>
<pre><code>void SortVis::Engine::draw() {
    // Sets render draw color to black
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    (this-&gt;*(drawSelection))();
    SDL_RenderPresent(renderer);
}
</code></pre>
<h2>Don't do work that isn't needed</h2>
<p>Right now, the main loop in <code>run</code> is this:</p>
<pre><code>while (running)
{
    handleEvents();
    if (!std::is_sorted(numbers.begin(), numbers.end()))
    {
        step();
    }
    draw();
}
</code></pre>
<p>It doesn't make much sense to me to make a call to <code>std::is_sorted</code> within a program that demonstrates sorting!  It seemed to me that I'd want to close the program when it was done sorting and I modified the sorting routines to return <code>bool</code> with value of <code>false</code> only when it's finished running and the vector is sorted.  So for that, the loop turns into this:</p>
<pre><code>while (running) {
    handleEvents();
    running &amp;= sorter-&gt;step(numbers);
    draw();
}
</code></pre>
<h2>Consider adding features</h2>
<p>I'd suggest that it might be nice to add some features.  Here's what I did:</p>
<pre><code>void SortVis::Engine::handleEvents() {
    SDL_Event Event;
    while (SDL_PollEvent(&amp;Event)) {
        switch (Event.type) {
        case SDL_QUIT:
            running = false;
            break;
        case SDL_KEYDOWN:
            switch (Event.key.keysym.sym) {
                case SDLK_r:
                    numbers = generateRandom(maxValue);
                    sorter-&gt;reset(numbers);
                    break;
                case SDLK_b:
                    numbers = generateRandom(maxValue);
                    sorter = std::move(std::make_unique&lt;BubbleSorter&gt;());
                    sorter-&gt;reset(numbers);
                    break;
                case SDLK_i:
                    numbers = generateRandom(maxValue);
                    sorter = std::move(std::make_unique&lt;InsertionSorter&gt;());
                    sorter-&gt;reset(numbers);
                    break;
                case SDLK_s:
                    numbers = generateRandom(maxValue);
                    sorter = std::move(std::make_unique&lt;SelectionSorter&gt;());
                    sorter-&gt;reset(numbers);
                    break;
                case SDLK_l:
                    drawSelection = &amp;Engine::drawColumns;
                    break;
                case SDLK_p:
                    drawSelection = &amp;Engine::drawPoints;
                    break;
                case SDLK_q:
                    running = false;
                    break;
            }

        default:
            break;
        }
    }
}
</code></pre>
    </div>