<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>int _stoi(std::string str, int* p_value) {
</code></pre>

<p>Identifiers that begins with an underscore <a href="http://eel.is/c++draft/lex.name#3.2" rel="noreferrer">is reserved to the implementation</a> for use as a name in the global namespace.</p>

<p>I would expect the signature of your <code>_stoi</code> to match that of the <code>std::stoi</code> you are wrapping. So you should take the <code>std::string</code> by reference-to-<code>const</code>, take an in-out parameter to indicate how much of <code>str</code> was processed, and the base you are converting to.</p>

<hr>

<pre><code>    try {
        *p_value = std::stoi(str);
        return 0;
    }
    catch (...) {
        return -3;
    }
</code></pre>

<p>Instead of returning integers that represent error-codes, leverage the type-system.  There are a class of types called "either" types that let you return a result or an enumerated error.  There are also variant types that let you return one of multiple types of return or error values.</p>

<p>If you plan on supporting the full set of <code>std::stoX</code> family of functions and their overloads between <code>std::string</code> and <code>std::wstring</code>, I urge you to look at lippincott functions as well as variadic argument passing.</p>
    </div>