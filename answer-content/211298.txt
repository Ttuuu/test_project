<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Probably pedantic, but your code could be more robust to errors without significant changes. In your constructor, you could fail-fast the <code>element_delete</code> and not worry about it in your destructor. Instead of going though serially and initialising one by one in <code>create_list</code>, consider setting values to the default first before calling <code>malloc</code>; then you're always in a valid state.</p>

<pre><code>/* The newly created list or a null pointer and errno is set, (probably, it
 depends what standard you're using for it to be guaranteed.) */
list_t* list_create(
    const uint16_t    initial_capacity,
    const bool        (*element_match )(const void* a, const void* b),
    const void        (*element_delete)(void* element)) 
{
    list_t* list;

    /* Pre-conditions. */
    if(!element_delete || !initial_capacity) {
        errno = EDOM;
        return NULL;
    }

    list = malloc(sizeof *list);
    if (!list) return NULL; /* The malloc will (probably) set the errno. */
    list-&gt;length         = 0;
    list-&gt;capacity       = initial_capacity;
    list-&gt;elements       = NULL;
    list-&gt;element_match  = element_match;
    list-&gt;element_delete = element_delete;

    /* This could fail, so it's after initialisation. */
    list-&gt;elements = malloc(sizeof *list-&gt;elements * initial_capacity);
    if (!list-&gt;elements) {
        list_delete(list);
        return NULL;
    }

    return list;
}

/* If the list has been initialised, this will work regardless. */
void list_delete(const list_t* list) 
{
    unsigned i;
    if (!list) return;
    for (i = 0; i &lt; list-&gt;length; i++) {
        list-&gt;element_delete(list-&gt;elements[i]);
    }
    free(list-&gt;elements);
    free(list);
}
</code></pre>

<p>(I haven't tested this. You will need to <code>#include &lt;errno.h&gt;</code>.)</p>
    </div>