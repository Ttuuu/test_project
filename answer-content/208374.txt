<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know little to nothing about Elm, but speaking of PHP your code is awfully duplicated. Sometimes it duplicates itself, either across different files or in the same file and also it duplicates the functionality already exists in PHP. For example, PHP can log errors for you, and not a single line of code have to be written for that.</p>
<h3>Processing input</h3>
<pre><code>  $json_data = file_get_contents("php://input");
  $php_data = json_decode($json_data);
  if (is_null($php_data)){
    logError("json data could not be decoded");
    exit();
  }
  if(!isset($php_data-&gt;username)  || !isset($php_data-&gt;password)){
        logError("wrong input");
        exit();
  }
</code></pre>
<p>This block of code is repeated across multiple files. So it's better to make a <em>function</em> from it and put it in utils.php</p>
<p>Besides, a "json data could not be decoded" error message is not very informative, whereas PHP can give you a more detailed account. So, to decode json is better to create a function on its own,</p>
<pre><code>function jsonDecode($json, $assoc = false)
{
    $ret = json_decode($json, $assoc);
    if ($error = json_last_error())
    {
        throw new \Exception(json_last_error_msg(), $error);
    }
    return $ret;
}
</code></pre>
<p>Besides, as I just said above, PHP can log errors for you. With two simple php.ini directives, <code>log_errors</code> and <code>error_log</code> you can tell it to log all errors and where they should be stored. So, no need to log an error manually - just <em>raise</em> it, and PHP will do the rest.</p>
<p>So let's create a function that takes JSON from input, decodes it, and, optionally, checks for the required data:</p>
<pre><code>function get_json_from_input ($required_fields = [])
{
  $json_data = file_get_contents("php://input");
  $php_data = jsonDecode($json_data);
  foreach ($required_fields as $var)
  if(!isset($php_data-&gt;$var) {
      throw new \Exception("wrong input");
  }
  return $json_data;
}
</code></pre>
<p>just put these two functions in utils.php and the amount of code in your files will be reduced considerably.</p>
<h3>Connecting to the database.</h3>
<p>The connection code is also duplicated across the files so it should be moved elsewhere. Here I have a small article that explains <a href="https://phpdelusions.net/mysqli/mysqli_connect" rel="nofollow noreferrer">How to properly connect to Mysql database using mysqli</a>. Just take the code, put it in a file, and include it in the every script that requires a database connection.<br>
Note that there are many improvements in the connection code as well, for example, you don't set the connection encoding, which will result in the broken data in the database.</p>
<p>And of course mysqli will start to log its errors by itself as well!</p>
<h3>Performing queries.</h3>
<p>Surely you already noticed that every query takes you to write a lot of repeated commands. A function is to help here as well. I've got an example <a href="https://phpdelusions.net/mysqli/simple" rel="nofollow noreferrer">mysqli helper function</a> which could perfectly fit here. So instead of this wall of code</p>
<pre><code>  $stmt  = mysqli_stmt_init($db);

  $getLogInfoQuery = "SELECT password, salt FROM users WHERE name = ?";
  mysqli_stmt_prepare($stmt, $getLogInfoQuery);
  mysqli_stmt_bind_param($stmt,'s', $php_data-&gt;username);
  mysqli_stmt_execute($stmt);
  mysqli_stmt_bind_result($stmt, $hashedPass, $salt);

  if (!mysqli_stmt_fetch($stmt)){
    logError("Wrong username/password");
    mysqli_close($db);
    exit();
  }
</code></pre>
<p>you would have to write just two lines!</p>
<pre><code>$sql = "SELECT password, salt FROM users WHERE name = ?";
$user_data = mysqli($db, $sql, [$php_data-&gt;username])-&gt;get_result-&gt;fetch_assoc();
</code></pre>
<h3>The final refactoring</h3>
<p>A quite important thing: you should really use the PHP's internal <code>password_hash()</code> function instead of anything else. So I would change your code to use the proper kind of hash:</p>
<pre><code>&lt;?php
include 'utils.php';
include 'db.php';
session_start();
$id = session_id();

if((getenv('REQUEST_METHOD') == 'POST') {

  $json_data = get_json_from_input(['username','password']);

  $sql = "SELECT password FROM users WHERE name = ?";
  $user = mysqli($db, $sql, [$php_data-&gt;username])-&gt;get_result-&gt;fetch_assoc();

  if ($user &amp;&amp; password_verify($php_data-&gt;password, $user['password']))
  {
      $_SESSION['logInfo']['username'] = $php_data-&gt;username;
      $result = array('username' =&gt; $php_data-&gt;username
                 ,'sessionId' =&gt; $id
                 );
      echo json_encode($result);
  } else {
      sleep (2);
      throw new \Exception("Wrong username/password");
  }  
}
</code></pre>
    </div>