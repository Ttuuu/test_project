<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static String hexToBin(String s) 
{   
    StringBuilder binaryString = new StringBuilder();
</code></pre>
</blockquote>

<p>You can improve efficiency here by telling the <code>StringBuilder</code> how long it will need to be.  </p>

<pre><code>public static final int BINARY_SIZE_OF_HEX = 4;

public static String hexToBin(String s) 
{   
    StringBuilder binaryString = new StringBuilder(BINARY_SIZE_OF_HEX * s.length());
</code></pre>

<p>Without this, it will allocate memory for a relatively small string, e.g. sixteen characters.  Then it will reallocate memory for progressively longer strings.  If the block of memory isn't long enough for expansion, it will copy the whole string to a new block of memory.  </p>

<p>This way, it will allocate memory once and just enter the binary representation of the string thereafter.  </p>

<p>This works because the translation between a hexadecimal representation and binary is straightforward.  There are exactly four binary digits to every hexadecimal digit with the exception of the first.  That may range from one to four digits.  But your original version can be off by up to fifteen characters in length.  Being off at most three is an improvement.  </p>

<p>I also replaced the magic number 4 with a descriptively named constant.  </p>

<blockquote>
<pre><code>        s = Utils.leftPad4(s, (int)(4 * Math.ceil((double) s.length() / 4.0))); // Pad out any single bit values
</code></pre>
</blockquote>

<p>You could write this more simply as </p>

<pre><code>    int distanceFromBoundary = s.length() % BINARY_SIZE_OF_HEX;
    if (distanceFromBoundary != 0)
    {
         // Pad out any single bit values
        s = Utils.leftPad4(s, s.length() + BINARY_SIZE_OF_HEX - distanceFromBoundary);
</code></pre>

<p>This saves a conversion to <code>double</code>, a floating point division, a ceiling operation, and a conversion to <code>int</code> at the cost of an integer addition, a subtraction, and a variable declaration.  The variable will probably get compiled out into just a register use.  </p>

<p>You also might consider if it would be better to handle the first digit separately rather than pad.  Padding probably copies the whole string.  But you don't need another copy of the string.  </p>
    </div>