<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the recommended techniques for tests is refactor into an assert method. Duplications drive into fragile tests. </p>

<p>You should also try to create factory methods for the SUT.</p>

<pre><code>it('should return error when password is incorrect', async () =&gt; {
    // Arrange
    const aValidEmail = currentUserData.email
    const aWrongPassword = '123456'

    // Act
    const result = await makeLoginRequest(aValidEmail, aWrongPassword)

    // Assert
    expectErrorResult(401, 'Incorrect password')
})
</code></pre>

<p>EDIT: In the end, <em>makeLoginRequest()</em> is not a factory method, but it could be the equivalent for this type of SUT. What we are trying to achieve here is avoiding the need to modify the test when the SUT modifies its interface (like the endpoint or adding/removing unrelated parameters) </p>
    </div>