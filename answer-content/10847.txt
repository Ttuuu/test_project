<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a stab at an extensible solution  (I crammed everything into a single file to reduce the length).  While some would argue this goes beyond the scope of the original requirements, it aims to provide extensibility points and keeps the Open-Close Principle (and DRY) in mind throughout.  The client can either use an existing search algorithm (greatest or least age difference) or specify their own.  Although both of these built-in solutions execute O(n) linear searches, the open interface would allow a client to provide a different / more efficient algorithm if they so desired. </p>

<p>This is certainly a worthwhile exercise, especially to anyone that doesn't fully realize the importance of writing legible code and proper Unit Tests.  The real beauty of all that time spent writing tests is immediately apparent when you start modifying the internals and can confirm at a glance that the changes have not inadvertently broken some other part of the system.  The need for legible code speaks for itself when you start with something as unbelievably cryptic as this sample.</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;

namespace Algorithm
{
    /// &lt;summary&gt;
    /// Provides search capability over a given set of persons in order to select
    /// an appropriate pair of persons.
    /// &lt;/summary&gt;
    public class PersonPairSearcher
    {
        private readonly IEnumerable&lt;Person&gt; persons;
        private readonly IEnumerable&lt;PersonPair&gt; pairs;

        public PersonPairSearcher(List&lt;Person&gt; persons)
        {
            this.persons = persons;
            this.pairs = new PersonPairGenerator(persons).Pairs;
        }

        /// &lt;summary&gt;
        /// Locates the best matching pair in the given list of people
        /// based upon the specified search criteria.
        /// &lt;/summary&gt;
        /// &lt;param name="mode"&gt;Search algorithm to be used to locate the best matching pair.&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public PersonPair Find(IPersonSearchBehavior searchBehavior)
        {
            if (!pairs.Any())
                return PersonPair.Empty;

            return searchBehavior.GetMatch(pairs);
        }
    }

    /// &lt;summary&gt;
    /// Represents a pair of Persons.
    /// &lt;/summary&gt;
    public class PersonPair
    {
        public static PersonPair Empty { get { return new PersonPair(null, null); } }

        public PersonPair(Person person1, Person person2)
        {
            //a pair can't have only one person.
            if (person1 == null || person2 == null)
                return;

            if (person1.BirthDate &gt; person2.BirthDate)
            {
                YoungerPerson = person2;
                OlderPerson = person1;
            }
            else
            {
                YoungerPerson = person1;
                OlderPerson = person2;
            }
        }

        public Person YoungerPerson { get; private set; }
        public Person OlderPerson { get; private set; }
        public TimeSpan AgeDifference { get { return OlderPerson.BirthDate - YoungerPerson.BirthDate; } }
    }

    /// &lt;summary&gt;
    /// Represents a Person.
    /// &lt;/summary&gt;
    public class Person
    {
        public string Name { get; set; }
        public DateTime BirthDate { get; set; }
    }

    /// &lt;summary&gt;
    /// Generates a set of pairs from the given set of persons.
    /// &lt;/summary&gt;
    internal class PersonPairGenerator
    {
        private IEnumerable&lt;Person&gt; persons;
        private IEnumerable&lt;PersonPair&gt; pairs;

        public PersonPairGenerator(IEnumerable&lt;Person&gt; persons)
        {
            this.persons = persons;
            BuildPairs();
        }

        public IEnumerable&lt;PersonPair&gt; Pairs
        {
            get
            {
                return this.pairs;
            }
        }

        private void BuildPairs()
        {
            var pairs = new List&lt;PersonPair&gt;();

            for (var i = 0; i &lt; persons.Count() - 1; i++)
            {
                for (var j = i + 1; j &lt; persons.Count(); j++)
                {
                    var pair = new PersonPair(persons.ElementAt(i), persons.ElementAt(j));
                    pairs.Add(pair);
                }
            }

            this.pairs = pairs;
        }
    }

    /// &lt;summary&gt;
    /// A contract for a search algorithm that selects the best matching pair from the available set.
    /// &lt;/summary&gt;
    public interface IPersonSearchBehavior
    {
        PersonPair GetMatch(IEnumerable&lt;PersonPair&gt; pairs);
    }

    /// &lt;summary&gt;
    /// A person pair searcher that locates the pair with the greatest difference in age.
    /// &lt;/summary&gt;
    public sealed class LargestAgeDifferenceSearch : LinearSearchBehavior
    {
        protected override bool SuperseedsExistingMatch(PersonPair candidate, PersonPair existing)
        {
            return candidate.AgeDifference &gt; existing.AgeDifference;
        }
    }

    /// &lt;summary&gt;
    /// A person pair searcher that locates the pair with the smallest difference in age.
    /// &lt;/summary&gt;
    public sealed class SmallestAgeDifferenceSearch : LinearSearchBehavior
    {
        protected override bool SuperseedsExistingMatch(PersonPair candidate, PersonPair existing)
        {
            return candidate.AgeDifference &lt; existing.AgeDifference;
        }
    }

    /// &lt;summary&gt;
    /// Searches the given set of pairs linearly, checking if each is a better match than the last.
    /// &lt;/summary&gt;
    public abstract class LinearSearchBehavior : IPersonSearchBehavior
    {
        public PersonPair GetMatch(IEnumerable&lt;PersonPair&gt; pairs)
        {
            if (!pairs.Any())
                return null;

            var result = pairs.ElementAt(0);
            for (int i = 1; i &lt; pairs.Count(); i++)
            {
                var candidate = pairs.ElementAt(i);
                if (SuperseedsExistingMatch(candidate, result))
                    result = candidate;
            }

            return result;
        }

        protected abstract bool SuperseedsExistingMatch(PersonPair candidate, PersonPair existing);
    }
}
</code></pre>
    </div>