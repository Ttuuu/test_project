<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><strong><em>memory usage and performance</em></strong></p>
</blockquote>

<p>I see that the constructor for <code>GFAElement</code> uses a <code>forEach</code> iterator. While functional programming is great, one drawback is that it is typically slower because function calls are made for each element in the array. Instead, try using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> to reduce the computational requirements.</p>

<p>Should <code>getProfile()</code> be called by every GFA/KB element? If not, Perhaps it would be wise to cache the profile return value and invalidate that when necessary (i.e. when the view changes?). And would it be acceptable to use the same <code>material</code> object for each mesh element?</p>

<blockquote>
  <p><strong><em>Improve feathering of GFAElements</em></strong></p>
</blockquote>

<p>I am not sure if this will help with optimization but have you considered setting the value of the <code>step</code> option based on the resolution (I.e an inverse relationship)? Otherwise maybe you could allow the user to specify that value (e.g. perhaps with an <code>&lt;input type=“range” /&gt;</code>), allowing him/her to make the decision of optimization vs. appearance. </p>

<blockquote>
  <p><strong><em>Class structuring</em></strong></p>
</blockquote>

<p>It is a shame that the two element classes don't have the same parent class - if so, an intermediary class could be created to abstract out common code like the cloning, parameter extraction, etc. However, a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Mix-ins" rel="nofollow noreferrer">mixin</a> could be used:</p>

<pre><code>let ElementMixin = superclass =&gt; class extends superclass { 
    clone(){
        return new this.constructor( this._params ).copy( this );
    }
}
class GFAElement extends ElementMixin(THREE.Mesh) { ... }
class KBElement extends ElementMixin(THREE.Group) { ... }
</code></pre>

<p>The code in the constructor methods could perhaps be abstracted out into that mixin (e.g. getting the <code>userdata</code> object, updating the geometry/vertex items, etc.). For more of an explanation of mixins in ecmascript-2015, check out <a href="http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/" rel="nofollow noreferrer">"Real" Mixins with JavaScript Classes</a>.   </p>

<h2>Other suggestions</h2>

<h3>Use more EcmaScript-2015 (ES-6) features</h3>

<p>The code already uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">Classes</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">Object destructuring</a> (for the return value of <code>getFlankParams()</code>). It is recommended that one use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> for block-scoped variables that should not be re-assigned and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> for block-scoped variables that should be re-assigned (typically just iterator variables and counters).</p>

<h3>ParseInt() radix specification</h3>

<p>This likely won't be an issue unless the parameters/attributes of the elements are specified by input from the user but it would be wise to pass the radix (typically <code>10</code>) as the second parameter to calls to <code>parseInt()</code>.  According to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" rel="nofollow noreferrer">the MDN documentation</a>: </p>

<blockquote>
  <p>"<strong>Always specify a radix</strong>" <sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<h3>Consider wrapping code in an IIFE or wait for DOM to be ready</h3>

<p>It is a good habit to wrap the code in an <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a> or put it all in a function called when the DOM is ready, so as to avoid putting all the variables currently declared outside of a function in the global namespace (i.e <code>window</code>).</p>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt</a></sub></p>
    </div>