<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>There's no docstring. What does this code do? How do I call it? What does it return?</p></li>
<li><p>A <em>class</em> represents a group of persistent <em>objects</em> with common behaviour. But there are no persistent objects here, so there is no need for a class. This is also apparent from the fact that the <code>fullJustify</code> method does not refer to <code>self</code>. So don't write a class, just write a function.</p></li>
<li><p>Python strings have a <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer"><code>join</code></a> method for concatenation. So this code:</p>

<pre><code>oneline = ""
for ind in range(start_ind, num_of_words-1):
    oneline = oneline + words[ind] + " "
oneline = oneline + words[num_of_words-1]
</code></pre>

<p>can be simplified to:</p>

<pre><code>oneline = ' '.join(words[start_ind:])
</code></pre></li>
<li><p>Python strings have an <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer"><code>ljust</code></a> method for left-justification within a fixed-width field. So this code:</p>

<pre><code>pad_spaces = maxWidth - len(oneline)
oneline = oneline + " "*pad_spaces
</code></pre>

<p>can be simplified to:</p>

<pre><code>oneline = oneline.ljust(maxWidth)
</code></pre></li>
<li><p>Python has a built-in function <a href="https://docs.python.org/3/library/functions.html#divmod" rel="noreferrer"><code>divmod</code></a> that simultaneously computes the quotient and remainder. So this code:</p>

<pre><code>basic_pad_spaces = extra_spaces // (word_num - 1)
addition_pad_spaces = extra_spaces % (word_num - 1)
</code></pre>

<p>can be simplied to:</p>

<pre><code>basic_pad_spaces, addition_pad_spaces = divmod(extra_spaces, word_num - 1)
</code></pre></li>
<li><p>Left justification has to be done in two cases: a single word on a line, and the last line. It would therefore make sense to extract this common code into a function:</p>

<pre><code>def left_justify(words, width):
    """Given an iterable of words, return a string consisting of the words
    left-justified in a line of the given width.

    &gt;&gt;&gt; left_justify(["hello", "world"], 16)
    'hello world     '

    """
    return ' '.join(words).ljust(width)
</code></pre>

<p>Even though this is a simple one-line implementation, giving it a name improves the readability of the code where it is called. Note also the example in the docstring: this can be run and checked using the <a href="https://docs.python.org/3/library/doctest.html" rel="noreferrer"><code>doctest</code></a> module.</p></li>
<li><p>When you are writing code that takes an input sequence (here, some words) and produces an output sequence (here, the justified lines), then it's a good idea in Python to write the code so that it <em>iterates</em> over the input (using <code>for</code>), and <em>generates</em> the output (using <code>yield</code>).</p>

<p>With this approach: there's no need to keep the whole input and output sequences in memory at once (you operate on one or a few items at a time); there's no need to remember indexes into the input sequence (you just process each item as you get it); and there's no need to accumulate and return the output sequence (you just <code>yield</code> each item as you compute it).</p>

<p>In this case:</p>

<pre><code>def justify(words, width):
    """Divide words (an iterable of strings) into lines of the given
    width, and generate them. The lines are fully justified, except
    for the last line, and lines with a single word, which are
    left-justified.

    &gt;&gt;&gt; words = "This is an example of text justification.".split()
    &gt;&gt;&gt; list(justify(words, 16))
    ['This    is    an', 'example  of text', 'justification.  ']

    """
    line = []             # List of words in current line.
    col = 0               # Starting column of next word added to line.
    for word in words:
        if line and col + len(word) &gt; width:
            if len(line) == 1:
                yield left_justify(line, width)
            else:
                # After n + 1 spaces are placed between each pair of
                # words, there are r spaces left over; these result in
                # wider spaces at the left.
                n, r = divmod(width - col + 1, len(line) - 1)
                narrow = ' ' * (n + 1)
                if r == 0:
                    yield narrow.join(line)
                else:
                    wide = ' ' * (n + 2)
                    yield wide.join(line[:r] + [narrow.join(line[r:])])
            line, col = [], 0
        line.append(word)
        col += len(word) + 1
    if line:
        yield left_justify(line, width)
</code></pre></li>
</ol>
    </div>