<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I assume that <code>shuffle</code> is inside a class that represents a <code>Deck</code>.</p>

<hr>

<p>52 is a <a href="https://refactoring.guru/replace-magic-number-with-symbolic-constant" rel="nofollow noreferrer">magic number</a>. We could simply replace it by a constant variable with the name <code>size</code>:</p>

<pre class="lang-java prettyprint-override"><code>
public final int size = 52;

public void shuffle() {
    /* ... */
    while(/* ... */) {
       /* ... */ 
       deck.add(rnd.nextInt(size), poke);
    }
    /* ... */
    deck.add(rnd.nextInt(size), poke);
}
</code></pre>

<p>One important benefit is that we don't have to change <code>52</code> at multiple places if the size should change and typos can be avoided too.</p>

<hr>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Card poke = deck.get(0);
deck.remove(0);
</code></pre>
</blockquote>

<p>This snipped can be simplified:</p>

<pre class="lang-java prettyprint-override"><code>Card pole = deck.remove(0);
</code></pre>

<hr>

<p>Extract <code>SecureRandom</code> to the class scope to only create an instance of it once instead for every <code>shuffle</code> invocation.</p>

<p>If you are interested in testing we should try to make <code>shuffle</code> a <a href="https://en.wikipedia.org/wiki/Pure_function" rel="nofollow noreferrer">pure functions</a>, because they are easy to test. Since we depend on <code>SecureRandom</code> and randomness makes a method impure we need to override  the method <code>nextInt</code> to return a constant value and <a href="https://stackoverflow.com/a/130862/8339141">inject it as a dependency</a>:</p>

<pre class="lang-java prettyprint-override"><code>class Test {
  class MockedRandom extends SecureRandom {

    int number;

    MockedRandom(int number) { this.number = number; }

    @Override
    public int nextInt(int bound) {
      return number;
    }

  }

  @Test
  void example() {
    Deck deck = new Deck(new MockedRandom(5));

    deck.shuffle();

    assertThat(...)
  }


} 
</code></pre>

<hr>

<p>A <code>Deck</code> could contain besides <code>suffle</code> methods like <code>drawFromTop</code>, <code>last</code>, <code>remove</code> and <code>addRandomly</code> to make the algorithm more readable:</p>

<pre class="lang-java prettyprint-override"><code>public void shuffle() {
  while (first().equalsNot(last())) {
    addRandomly(drawFromTop());
  }

  addRandomly(drawFromBottom());
}
</code></pre>

<hr>

<p>I do not know which data structure you use for <code>deck</code> but if it is not an <code>LinkedList</code> you should think if the operation <code>deck.add(rnd.nextInt(52), poke);</code> <a href="https://www.quora.com/Why-does-ArrayList-take-more-time-to-insert-elements-in-the-beginning-than-LinkedList-in-Java?share=1" rel="nofollow noreferrer">could cause a performance issue</a> for you.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>class Deck {

  private final SecureRandom rnd = new SecureRandom();
  private final int size = 52;
  private LinkedList&lt;Card&gt; deck;

  public void shuffle() {
    while (first().equalsNot(last())) {
      addRandomly(drawFromTop());
    }

    addRandomly(drawFromBottom());
  }

  /**
   * Adds card at a random position
   *
   * @param card to add
   */
  private void addRandomly(Card card) {
    deck.add(rnd.nextInt(size), card);
  }

  /**
   * shows last card in the deck without to modify it
   */
  public Card last() {
    return deck.getFirst();
  }

  /**
   * shows first card in the deck without to modify it
   */
  public Card first() {
    return deck.getLast();
  }

  /**
   * removes first card from the deck and returns it
   */
  public Card drawFromTop() {
    return deck.removeFirst();
  }

  /**
   * removes last card from the deck and returns it
   */
  public Card drawFromBottom() {
    return deck.removeLast();
  }  
}
</code></pre>

<hr>
    </div>