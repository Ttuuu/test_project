<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Using a <code>size_t</code> for a boolean flag, and calling it <code>flag</code>, is nearly an obfuscation. Use <code>int</code> pre-C99 and call it something descriptive like <code>substitute</code>.</p></li>
<li><p><code>strlen()</code> is likely a waste, though it makes describing the algorithm easier. Try to do without the additional iteration.</p></li>
<li><p>Getting the length of the longest common prefix looks like a well-defined task which can be extracted, and a useful building-block. Do so.</p></li>
<li><p><code>one_way</code>, <code>one_away</code>, or <code>one_microsoft_way</code>? Having a properly-spelled correctly-selected name is Always very important.</p></li>
<li><p>Change to a single-traversal algorithm:</p>

<p>Remove the common prefix.</p>

<p>Measuring the common prefix without the first characters is quite instructive.</p>

<p>With <code>x</code> and <code>y</code> different from <code>a</code>, call <code>n = strlen_common(++a, ++b)</code>:</p>

<ol>
<li><p>At most one substitution at the start:</p>

<pre><code>xaaaabcde
yaaaabcde
</code></pre>

<p>Result n == 8, a[n] == b[n].</p></li>
<li><p>Deletion from the first:</p>

<pre><code>xaaaabcde
aaaabcde
</code></pre>

<p>n == 3, strcmp(a + n, b + n - 1) != 0</p></li>
<li><p>Same way for deletion from second.</p></li>
</ol></li>
</ol>

<p>The modified code (also <a href="http://coliru.stacked-crooked.com/a/ee6f59e4e5790ae9" rel="nofollow noreferrer">live on coliru</a>):</p>

<pre><code>size_t strlen_common(const char* a, const char* b) {
    size_t r = 0;
    while (*a &amp;&amp; *a++ == *b++)
        ++r;
    return r;
}

int one_away(const char* a, const char* b) {
    size_t n = strlen_common(a, b);
    a += n;
    b += n;
    if (!*a++)
        return !*b || !b[1];
    if (!*b++)
        return !*a;
    n = strlen_common(a, b);
    return a[n] == b[n]
        || !strcmp(a + n - 1, b + n)
        || !strcmp(a + n, b + n - 1);
}
</code></pre>
    </div>