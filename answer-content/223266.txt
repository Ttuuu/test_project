<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Actually, you did a much better job with your first version than you seem to think.</p>

<p>Your Python version takes about 23 seconds (Python 3) on my desktop.  If I take your original program:</p>

<pre><code>toDigits    :: Int -&gt; [Int]
toDigits 0 = []
toDigits x = toDigits (x `div` 10) ++ [x `mod` 10]

isSumofFifth n = n == sum (map (^5) (toDigits n))
main = print $ sum (filter isSumofFifth [9..9999999])
</code></pre>

<p>and, remembering that Haskell is a <strong>compiled</strong> language, take care to compile it with optimizations <code>ghc -O2 FindFives.hs</code> (using GHC 8.6.4), I find the executable runs in about 2.7 seconds, so <strong>about ten times faster than the Python version.</strong></p>

<p><em>So, Important Note:</em>  Never benchmark Haskell code with the GHCi interpreter or using <code>runghc</code>!  The performance results will be completely meaningless.</p>

<p>Also, since this is Code Review, let me point out that you can write your Haskell version in much the same form as the Python version:</p>

<pre><code>answer :: Int
answer =   sum [i |   i &lt;-     [9..9999999],   i == sum [d^5 | d &lt;- toDigits i]]
-- Python: sum([i for i in range(9,9999999) if i == sum([int(x)**5 for x  in str(i)]
</code></pre>

<p>Using your original <code>toDigits</code>, this still runs in about 2.7 seconds, but it's probably easier to read.</p>

<p>@Truman has covered the main ways to speed up your <code>toDigits</code>.  The version in that answer gives a runtime of about 1 second.</p>

<p>You can do a little better.  The version:</p>

<pre><code>toDigits :: Int -&gt; [Int]
toDigits = unfoldr go
  where go 0 = Nothing
        go x = Just $ swap $ x `quotRem` 10
</code></pre>

<p>gets it down to about 700ms because <code>unfoldr</code> allows the creation of the actual digits list to be optimized away.</p>
    </div>