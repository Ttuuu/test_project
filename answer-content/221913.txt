<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>TL;DR:</h1>

<p>It's  unlikely to beat Python's own implementation of this which is basically as simple as </p>

<pre><code>decimal = int(binary, base=2)
</code></pre>

<p>in terms of convenience, clearity, and performance.
This will throw a <code>ValueError</code>in case the number cannot be converted to a binary, e.g. if the user enters something like <code>101010103</code>.</p>

<p>Welcome to the world of Python, where "batteries included" is a real thing!</p>

<p>If you, for whatever reason, do not want to use the most convenient Python has to offer, it is still possible to write a <em>Pythonic</em> alternative:</p>

<pre><code>decimal = sum(int(digit)* 2**index for index, digit in enumerate(user_input[::-1]))
</code></pre>

<p>This little piece of code is called <em>generator expression</em> (relevant <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">PEP</a>, good Stack Overflow <a href="https://stackoverflow.com/q/47789/5682996">post</a>) and is basically the equivalent of:</p>

<pre class="lang-py prettyprint-override"><code>decimal = 0
for exponent, digit in enumerate(user_input[::-1]):
    decimal += digit * 2**exponent
</code></pre>

<h2>which is close(r) to what you did in your original implementation. Apart from that you don't have to care about the actual length of the input.</h2>

<h1>Detailed review</h1>

<p>Of course there is more to say about your code than this, especially since you're asking about other aspects as well. So let's look at your code.</p>

<h2>Style</h2>

<p>Python has an official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide</a> called PEP8 (batteries included, you remember?). The main takeaways that are follow by the better part  of Python programmers are</p>

<ol>
<li>Use <code>snake_case</code> for variable and function names and <code>CamelCase</code>/<code>PascalCase</code> for class names.</li>
<li>Write function documentation (often just <em>docstrings</em>) <code>"""Enclosed in triple quotes"""</code>.</li>
</ol>

<p>I will demonstrate how to apply these principles to your code in a moment.
There are other useful recommendations which help you to keep the appearance of your code clean and readable, so it's definitely worth a read.</p>

<h2>Naming</h2>

<p>Apart from the stylistic point in the names, there is always the name itself. It's good that you decided to use functions and most of their names are totally fine. The odd one out is clearly <code>checkUI</code>. If you were just left with this name, I highly doubt that you would be able to tell what it does. Since it basically handles most of the interaction with the user, as well as validating and converting the numbers, the obvious (though maybe not ideal) name would be simply <code>main()</code>.</p>

<h2>The script itself</h2>

<p>After we have gone through some high-level aspects of the code, let's dive into the details. I will go through the code function by function.</p>

<h3>binaryToDecimal - soon to be binary_to_decimal</h3>

<p>As I already said above, the core functionality of the function can basically be replaced by a single line of Python code. And that's likely all the function should do. Apart from the <code>main</code> function, all of them should basically have a single responsibility. At the moment there are three</p>

<ol>
<li>converting the number</li>
<li>printing the converted number</li>
<li>starting a new round of user input</li>
</ol>

<p>The 2nd one is easy to fix: simple move the call to <code>print</code> from <code>binary_to_decimal</code> to <code>main</code>. The 3rd one is really, really (and I mean really really) bad design. <strong>The conversion function should absolutely not be tasked with starting a new round of user input.</strong> To make it worse, this will also lead to recursive calls of your functions, that will eventually end with a <code>RuntimeError</code> when your program exceeds the <a href="https://stackoverflow.com/q/3323001/5682996">maximum recursion depth</a> allowed by the Python interpreter. So drop that and never do it again!</p>

<h3>getUserInput - soon to be get_user_input</h3>

<p>The function is basically fine and a prime example of single responsibility. Maybe it's functionality is even a bit to minimalistic, so you might not actually need it.</p>

<h3>checkUI - soon to be main</h3>

<p>This is where things get serious. The first and foremost recommendation for this piece of code is similar to the first function we looked at: <strong>Get rid of the recursion!</strong>. Recursion as such is not a bad thing and valid programming technique in their own right, but not for this purpose!</p>

<p>The idiomatic way to ask for user input repeatedly would be something like</p>

<pre class="lang-py prettyprint-override"><code>def main():
    """Repeatedly ask for user input and convert its decimal equivalent"""
    while True:
        # read and normalize the user input
        # Note: this might also (better) be done in get_user_input
        user_input = get_user_input().strip().lower()
        if user_input.startswith("q")
            break

        # further validation and conversion
        ...

if __name__ == "__main__":
    main()
</code></pre>

<p>The check to stop the program was slightly modified to be a little bit more robust. The way I chose to implement it will also make sure that things like <code>Q</code>, <code>Quit</code>, <code>qsomethingelse</code>, and the like end the program. If that's not what you want, simply replace it with the check you had originally. I also added <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer"><code>if __name__ == "__main__":</code></a> which adds as a kind of safeguard to make sure the "interactive" of your code is only triggered if you use it as script and not try to <code>import</code> it.</p>

<p>Now for the validation and conversion part. With all the other changes in place it will become as simple as</p>

<pre class="lang-py prettyprint-override"><code>def main():
    """Repeatedly ask for user input and convert its decimal equivalent"""
    while True:
        # read and normalize the user input
        # Note: this might also (better) be done in get_user_input
        user_input = get_user_input().strip().lower()
        if user_input.startswith("q"):
            break

        if len(user_input) &gt; 8:
            print("Binary numbers are a maximum of 8 digits. Please try again")
            continue

        try:
            decimal = binary_to_decimal(user_input)
            print(f"Your binary number converts to {decimal}. ")
        except ValueError:
            print("You did not enter a binary number. (11110000) Please try again.")
</code></pre>

<p>Since you chose to limit binary numbers to a maximum length of 8bit (why?), you should likely also include this in the prompt.</p>
    </div>