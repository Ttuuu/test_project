<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my version, It Would need, some kind of isWord function to make it useful </p>

<p>You may find it easier to read it from the bottom up</p>

<p>The use of an enum improves readability a bit and makes it easy to change. I think the performance would be the same so the main difference between the solutions is the coding style, which is a matter of preference.</p>

<p>I have not handled the nonnumeric character in the phone number and leave it up to the caller of the routine to remove them. This concentrates on the core functionality.</p>

<p>My solution is agnostic to how many characters if any are mapped to the number which makes it robust.</p>

<pre><code>enum Dialpad : Int {
  case zero ,one ,two ,three ,four ,five ,six ,seven ,eight ,nine

  var letters : [String] {
    switch self {
    case .zero,.one:
      return []
    case .two:
      return ["a","b","c"]
    case .three:
      return ["d","e","f"]
    case .four:
      return ["g","h","i"]
    case .five:
      return ["j","k","l"]
    case .six:
      return ["m","n","o"]
    case .seven:
      return ["p","q","r","s"]
    case .eight:
      return ["t","u","v"]
    case .nine:
      return ["w","x","y","z"]
    }
  }
}
// recursive function which takes in arrays of characters || strings
// and spits out the combinations example ["A","B"],["C","D"] -&gt; ["AC","AD","BC","DE"]
// the output is n*m
func comboArray(_ arrays:[[String]], n:Int,set:inout Set&lt;String&gt;) {
  if n &gt;= arrays.count { return }
  let array = arrays[n]
  if set.isEmpty {
    set = Set(array)
  } else {
    set.forEach { (c1) in
      array.forEach({ (c2) in
        set.insert(c1+c2)
      })
      if !array.isEmpty {
        set.remove(c1)
      }
    }
  }
  comboArray(arrays, n: n+1, set: &amp;set)

}
// takes in a number and maps it to the letters on a phone dialpad
func dialPadLetters(number:Int) -&gt; Set&lt;String&gt; {
  let stringNumber = String(number)
  var arrayLetter : [Array&lt;String&gt;] = []
  for c in stringNumber {
    let n = Int(String(c))! // back to a number it is safe to force unwrap
    let letters = Dialpad(rawValue: n)!.letters
    arrayLetter.append(letters)
  }
  var mySet : Set&lt;String&gt; = []
  comboArray(arrayLetter, n: 0, set: &amp;mySet)
  return mySet
}

let theSet = dialPadLetters(number: 1234)

print(" theset \(theSet)")
</code></pre>
    </div>