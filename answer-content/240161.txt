<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Input loop</h2>

<p>Your</p>

<pre><code>        print("Please enter an integer.")
</code></pre>

<p>can probably be lumped into the <code>input</code> statement after it.</p>

<h2>Time math</h2>

<p>Usually doing your own should be avoided. As an example, this:</p>

<pre><code>total_minutes = (24 * 60) / 2
</code></pre>

<p>can be</p>

<pre><code>from datetime import timedelta
# ...
total_minutes = timedelta(hours=12) / timedelta(minutes=1)
</code></pre>

<h2>General approach</h2>

<p>Currently you're doing a lot of string manipulation, including a stringly-typed <code>hours</code> and <code>minutes</code> in <code>gen_times</code>. Your code would be simpler if, instead of maintaining and incrementing those strings, increment a single <code>datetime.time</code> instance. From there, to get individual digits, you could  <a href="https://docs.python.org/3/library/datetime.html#datetime.time.strftime" rel="nofollow noreferrer"><code>strftime</code></a> it to a string and feed that to a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>. The <code>strftime</code> format string in this case would be most useful as <code>'%I%M'</code>.</p>

<h2>Variable names</h2>

<p>Try to avoid names like <code>i</code> and <code>ii</code>. In particular, this:</p>

<pre><code>    while(ii &lt; 10):
        count = times[i].count(str(ii))
        #iterationcounter+=1
        if count &gt;= int(input_repeats):
            counter_repeat+=1
            break

        ii+=1
</code></pre>

<p>is better represented as</p>

<pre><code>for digit in range(10):
    count = times[i].count(str(digit))
    if count &gt;= int(input_repeats):
        counter_repeat+=1
        break
</code></pre>

<p>Though that <code>times[i].count</code> should be replaced with the use of a <code>Counter</code>.</p>
    </div>