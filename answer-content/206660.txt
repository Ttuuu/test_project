<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You said you built this specifically so you can use dictionaries as keys in other dictionaries?</p>

<p>In that case, you've got a problem. Consider the following demonstration:</p>

<pre><code>var keyA = new Dictionary&lt;string, int&gt; { ["a"] = 4 };
var keyB = new Dictionary&lt;string, int&gt; { ["a"] = 4 };

var comparer = new DictionaryEqualityComparer&lt;string, int&gt;();
var dict = new Dictionary&lt;Dictionary&lt;string, int&gt;, int&gt;(comparer);
dict[keyA] = 10;

keyA["b"] = 5;
var x = dict[keyA];    // KeyNotFoundException: different hash
var y = dict[keyB];    // KeyNotFoundException: same hash, but not equal to original key
</code></pre>

<p>After modifying <code>keyA</code>, its hash-code is different, so a key lookup will fail. So far so good - this seems to be what you intended.</p>

<p>However, a lookup with <code>keyB</code> will also fail. Its hash-code is the same as <code>keyA</code>'s original hash-code, so that part of the lookup succeeds, but because of hash collisions <code>dict</code> needs to compare it with the original key... which fails because <code>keyA</code> no longer has the same content.</p>

<p>That's why, generally speaking, the hash-code of an object should never change during its lifetime.</p>

<hr>

<p>Also, the idea behind a hash-code is to have a quick, cheap way to filter out objects that are obviously not equal. Inspecting every single key and value seems fairly heavy-handed.</p>

<p>As for what you want to achieve... I suspect that will require a custom dictionary implementation, because you'll need to retain the original content of each key for future comparisons. At that point, I'd start thinking about why I even wanted to do this in the first place - there's likely a better solution for the original problem.</p>
    </div>