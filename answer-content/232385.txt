<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a few suggestions. Some high-level and then I'll go through your code.</p>

<p>My first suggestion would be to focus on readability. That means:</p>

<ul>
<li>good use of spacing</li>
<li>descriptive names for modules, classes, methods, variables, everything</li>
<li>think about the different concepts involved</li>
<li>extract into simple modules, classes and methods</li>
<li>start small</li>
<li>read the documentation (<a href="https://ruby-doc.org/" rel="nofollow noreferrer">here</a>), particularly string, hash, array</li>
</ul>

<p>For example, look at a subsection of your code with a little spacing:</p>

<pre><code>class Person
  def input(count) 
    puts "Hi, let\'s create three new Person. Start with number #{count}"

    puts "What\'s your name?"
    @name = gets
    @name = @name.delete("\n")

    puts "How old are you?"
    @age = gets
    @age = @age.delete("\n")

    puts "Where are you from?"
    @origin = gets
    @origin = @origin.delete("\n")
  end
end
</code></pre>

<p>I would argue you can clearly see the structure of the 3 questions, and all it took was 3 blank lines in the right place.</p>

<p>Next up is <strong>proper naming</strong>. You look good for the most part. You have <code>@name</code>, <code>@age</code>, <code>@origin</code>.. you have <code>@antwort</code>. From what I understand that is German for answer. Up to you if you want to mix German and English, but be aware of the native language of other people who will be reading your code. I would do the safe thing and use <code>@answer</code> instead.</p>

<p>Avoid redundancy in naming. For example, you have <code>return person_return</code>. Instead, just use <code>return person</code>. Instead of <code>var_person_one</code> just use <code>person_one</code> (note: this is still not descriptive enough, but better).</p>

<p>Now let's have a <strong>look at the different concepts involved, turn them into classes</strong>.</p>

<p>You have a <code>Person</code>.. but the question and answer format doesn't really suit the person itself. Think about what you could do if you introduced a <code>Question</code> class and an <code>Answer</code> class.</p>

<p>You have <code>name</code>, <code>age</code> and <code>origin</code> as answers to your questions about person, then you build up an array of those instance variables and call that array a person, but those are <code>attributes</code> of the <code>Person</code> class, so add them to it:</p>

<pre><code>class Person
  attr_accessor :age, :name, :origin
end
</code></pre>

<p>You also have this concept of a QA session being interacted with through the console. So, you could create a <code>QuestionAnswerSession</code>.</p>

<p>To not complicate things too much you could get quite far by using just a <code>Person</code> and <code>QuestionAnswerSession</code> and forget the separate <code>Question</code> and <code>Answer</code> classes.</p>

<p>The qa session is responsible for outputting questions to the console and listening for answers, then using those answers to create <code>Person</code> objects.</p>

<p>My next suggestion would be to <strong>start small</strong>. Just introduce a couple of attributes and questions at first and forget about the multiple persons. Try to figure out the overall structure. It will be fewer lines and will be easier to take in and allow to focus on the design.</p>

<p>Let's say we have a <code>Person</code> with a <code>name</code> and <code>age</code> attribute, and we have corresponding questions. From that we want to assign <code>name</code> and <code>age</code> to a <code>Person</code> and, finally, output the <code>Person</code> to the console.</p>

<p>Let's create the person:</p>

<pre><code>class Person
  attr_accessor :name, :age
end

# usage
# Person.new(name: 'Dave', age: 20)
# or
# person = Person.new
# person.name = 'Dave'
# person.age = 20
</code></pre>

<p>Now let's build the QA session.</p>

<pre><code>class QuestionAnswerSession
  def start
    puts "Hi, let's create a new Person"

    person = Person.new

    puts "What's your name?"
    person.name = gets.strip

    puts "What's your age?"
    person.age = gets.strip

    puts person
  end
end

qa = QuestionAnswerSession.new
qa.start
</code></pre>

<p>Few minor things first. Notice I've removed <code>What\'s</code> which is now simply <code>What's</code>. This is an escape character and is only required if the enclosing quote is the same. Since you are using double quotes you do not need to escape it.</p>

<p>Also note I have replaced <code>@age.delete("\n")</code> with <code>String#strip</code> (<a href="https://ruby-doc.org/core-2.6/String.html#method-i-strip" rel="nofollow noreferrer">docs here</a>). This will remove the newline character for you.</p>

<p>The qa session itself is fairly simple. You instantiate it first, then you call the <code>start</code> method which outputs a question and starts listening for input. It then builds up attributes for a person object and outputs the final result.</p>

<p>I would add one small aspect to this to give you an idea on how to expand the behaviour. Let us say we wanted the person to be able to speak for itself. When we do <code>puts person</code> this is what we get:</p>

<p><code>#&lt;Person:0x0000000002572518 @name="Dave", @age="20"&gt;</code></p>

<p>Not very nice. If you wanted to output something cleaner, you could add it to the qa session class (<code>puts "Hi, my name is #{person.name}"</code>), but you could also add a simple method to the <code>Person</code> class such as:</p>

<pre><code>class Person
  def introduce_self
    "Hi, my name is #{name} and I'm #{age}"
  end
end
</code></pre>

<p>Then in the qa session, instead of <code>puts person</code> you could do <code>puts person.introduce_self</code>.</p>

<p>Extracting different responsibilities into simple, descriptive methods is a great way to keep things manageable, rather than dumping everything into the same method.</p>

<p>Though there are other ways you could improve your code and it could be designed with numerous approaches, I'd urge you to focus on these important aspects first as outlined above, then tackle multiple <code>Person</code> objects later.</p>

<p>Hope that helps! If you have any questions leave a comment.</p>
    </div>