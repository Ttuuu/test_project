<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>XMLHttpRequest</code> example looks good, as well as the redirection part. However, to avoid confusion and improve readability, I would divide it into two different functions.</p>

<p><strong>1)</strong> Overwriting <code>$.post</code> is not an easy task as it may seem, but as a basic example you can use something similar to the following, which supports <code>error</code> and <code>success</code> callbacks:</p>

<pre><code>/**
 * Send a POST request
 * @param {String} url
 * @param {Object} params
 * @param {Function} success
 * @param {Function} error
 * @returns {XMLHttpRequest}
 */
function post(url, params, success, error) {
    let xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                success &amp;&amp; success(xhr.responseText);
            } else {
                error &amp;&amp; error(xhr.responseText);
            }
        }
    };

    let formData = new FormData();
    for (let p in params) {
        formData.append(p, params[p]);
    }

    xhr.open('POST', url);
    xhr.send(formData);
    return xhr;
}
</code></pre>

<p><strong>2)</strong> As I mentioned, the redirection part from your function is good. However, you have an additional option to simulate the redirection. The idea is to load HTML via a XHR request and use it to replace the current document. </p>

<pre><code>/**
 * Simulate a redirection
 * @param {String} url
 * @param {Object} params
 * @returns {XMLHttpRequest}
 */
function postR(url, params) {
    let success = error = function (data) {
        history.pushState('', '', url);
        document.open().write(data);
        document.close();
    };
    return post(url, params, success, error);
}
</code></pre>
    </div>