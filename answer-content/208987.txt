<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll continue where <a href="https://codereview.stackexchange.com/a/208982/151754">@chux</a> left off, not re-address any of the points already raised.</p>

<p>In general, your function names are quite descriptive. Descriptive function names make it so that you don't need as much documentation -- let the code document itself. However, in this function it is lacking:</p>

<pre><code>int checkforexistence (int board[HEIGHT][WIDTH])
{
    //...
    if (creatures == 0)
        return TRUE; /*all creatures died*/
    else return FALSE; /*there are still living creatures*/
}
</code></pre>

<p>When I call this function: <code>if (checkfirexistence(board)) ...</code>, it is not clear what I am actually testing for. The <code>TRUE</code>/<code>FALSE</code> output of this function is not meaningful without the two comments, but those comments I cannot see when I call the function, so I need to find the function to find out what it does. I suggest you name this function <code>areallcreaturesdead()</code>. Now it is immediately clear what a <code>TRUE</code> return value means.</p>

<p>I also suggest you use camel case in these long names, as (at least for me) makes it easier to read them. <code>checkForExistence</code>, <code>areAllCreaturesDead</code>, etc.</p>

<hr>

<p>In <code>playgame()</code> you have:</p>

<pre><code>for (i = 1; (i &lt;= numgeneration) &amp;&amp; (c != 32); i++)
{
    //...
    check = checkforexistence(board);
    if ((check= checkforexistence(board)) ==TRUE)
    {
        printf ("\nALL CREATURES HAVE DIED: GAME OVER");
        c = 32;
    }
}
</code></pre>

<p>Here you have one redundant line, one redundant assignment, and one redundant comparison (<code>if (checkforexistence(board))</code> should suffice). If <code>TRUE</code>, you print a message, and set <code>c</code>, then continue the loop. It is not immediately clear why the loop continues. One has to look at the loop condition, which uncharacteristically has two comparisons, to understand that setting <code>c</code> to 32 breaks the loop. Why not explicitly breaking the loop with a <code>break</code> statement? You do so a bit earlier in the same loop as well:</p>

<pre><code>for (i = 1; i &lt;= numgeneration; i++)           // simple for loop, easy to read
{
    //...
    if (areAllCreaturesDead(board))            // simple test, obvious what it means
    {
        printf ("\nALL CREATURES HAVE DIED: GAME OVER");
        break;                                 // obvious break from the loop
    }
}
</code></pre>

<p>The keyword here is "obvious". Everything you do should be obvious, so that you don't need to add comments to your code to explain what it does, so that you can quickly read the code to understand the structure and the logic, so that bugs don't hide but are forced in the open where you can catch them.</p>

<hr>

<p>This next function is also rather unclear:</p>

<pre><code>int returnnumber(int anumber)
{
    if  ((anumber &gt;50) || (anumber ==0))
    { 
        printf ("ERROR! The number must be between 1 and 50\n");
        printf ("Please enter a valid number!: ");
        scanf ("%i", &amp;anumber);
        returnnumber(anumber);
    }
    else
        return anumber;
}
</code></pre>

<p>It is called like this:</p>

<pre><code>printf ("\nPlease enter x coordinate(a number from 1 to 30): ");
scanf("%i", &amp;cols);
cols = returnnumber(cols);
</code></pre>

<p>Thus, you need to use <code>scanf</code> twice here. I would suggest a function that gets a number from the user and returns it:</p>

<pre><code>int getNumber(const char* prompt) {
   int number = 0;
   printf(prompt);
   do {
      if (scanf("%i", &amp;number) != 1) {
         exit(EXIT_FAILURE);
      }
   } while ((number &gt; 50) || (number == 0));
   return number;
}
</code></pre>

<p>Which you call like this:</p>

<pre><code>cols = getNumber("\nEnter x coordinate (a number from 1 to 30, negative to finish): ");
</code></pre>

<hr>

<p>In function <code>creatingpatterntypes()</code> you have a long list of <code>if ... else if ... else if ...</code>. This is a perfect candidate for a <code>switch</code> statement:</p>

<pre><code>switch (type) {
   case 1:
      //...
      break;
   case 2:
      //...
      break;
   case //... 
}
</code></pre>

<p>Note that it would make sense also to sort the type codes, so it is easy to find a particular one if you need to modify or fix it.</p>

<p>The same is true in <code>main</code> where you switch on a <code>mode</code> value.</p>

<hr>

<p>In <code>main</code>, you define two variables on one line:</p>

<pre><code>int board[HEIGHT][WIDTH], mode;
</code></pre>

<p>I think it is much more readable to separate these out on different lines. Especially since the two variables defined are not really the same type, one is an array of arrays of ints, one is an int. This is better:</p>

<pre><code>int board[HEIGHT][WIDTH];
int mode;
</code></pre>

<p>You could also use a <code>typedef</code> to avoid the repeated <code>int [HEIGHT][WIDTH]</code> bit in all these function calls:</p>

<pre><code>typedef int Board[HEIGHT][WIDTH];
//...
Board board;
</code></pre>
    </div>