<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Usually if I have a big list of mappings from one <code>string</code> to another, that is <em>likely</em> to be later enhanced on, I use a <em>generic</em> mapping method, that is fed a <em>static</em> mapping constant.</p>

<p>So the first iteration would be something like:</p>

<pre class="lang-js prettyprint-override"><code>type ExpectedMimeTypes =
  'image/png' |
  'image/jpg' |
  'image/jpeg' |
  'application/pdf' |
  never;

type ExpectedMagicOutput =
  'Photo' |
  'Document' |
  'Unknown' |
  never;

type MimeTypeMapping = {
  [key in ExpectedMimeTypes]?: ExpectedMagicOutput 
}

const MAP_MIME_TYPE_TO_MAGIC_STRING: MimeTypeMapping = {
  'image/png': 'Photo',
  'image/jpg': 'Photo',
  'image/jpeg': 'Photo',
  'application/pdf': 'Document'
}

function getAttachmentType(attachmentTypeHeader: ExpectedMimeTypes): ExpectedMagicOutput {
  if (attachmentTypeHeader in MAP_MIME_TYPE_TO_MAGIC_STRING) {
    return MAP_MIME_TYPE_TO_MAGIC_STRING[attachmentTypeHeader]!; 
  } else {
    return 'Unknown';
  } 
}
</code></pre>

<p>If you are using TypeScript, go <em>all in</em>, meaning be <em>as specific as possible</em>. You do not expect <em>arbitrary</em> <code>string</code> as a result from <code>getAttachmentType()</code> but <em>specific</em> ones. You should explicitly model them, either by using <em>unions</em> or <em>string-based</em> enums. This fosters <em>reusability</em>.</p>

<p>The above solution gives you full type-safety, while being easily enhanced for other types; simply add them to the ExpectedMimeTypes and then you can easily add them to the constant <code>MAP_MIME_TYPE_TO_MAGIC_STRING</code> and vice versa, you <em>cannot</em> add mappings there, that have not been mentioned in the types above.</p>

<p>You could make <code>ExpectedMimeTypes</code> configurable by putting them into a dedicated file and let that be generated via a config and a simple script. That way you get both - configurable mime types and static compile type safety.</p>
    </div>