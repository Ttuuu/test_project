<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP-008 Guidelines</h2>

<p>Consult <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-008</a> for style guideline for writing idiomatic Python.  You can use various checkers, such as PyLint or PyFlakes to verify compliance with the PEP-008 guidelines.</p>

<p>Some highlight:</p>

<ul>
<li><code>if</code> and <code>while</code> loops do not need parenthesis <code>(...)</code> around the expression.  Write <code>while k &lt; num + 1:</code>, instead of <code>while(k&lt;(num+1))</code>.</li>
<li>Use one space around operators.  Ie, write <code>j += 1</code> instead of <code>j+=1</code>.</li>
<li>Testing if a value is <code>True</code> does not require comparison against the value <code>True</code>.  Simply use the value itself.  Ie, write <code>if primes[a]:</code> instead of <code>if(primes[a] == True):</code></li>
<li>Avoid <code>mixedCase</code>.  Instead of <code>subSum</code>, use <code>sub_sum</code>.</li>
</ul>

<h2>Multiplying a List</h2>

<p>This code is very inefficient:</p>

<pre><code>primes = []
for i in range(num):
    primes.append(True)
</code></pre>

<p>With 1 million candidates in your prime sieve, you will be growing the list by 1 value 1 million times.  This may translate to 1 million reallocations, and 1 million copy operations, an <span class="math-container">\$O(N^2)\$</span> operation since the number of elements to copy to the new list keeps increasing.</p>

<p>Creating a list of 1 million <code>True</code> values is trivial:</p>

<pre><code>primes = [True] * num
</code></pre>

<p>Pro tip: since all but one even candidate is prime, you actually want a list of 500 thousand pairs of <code>True</code>, <code>False</code> values.</p>

<pre><code>primes = [True, False] * (num // 2)
primes[0] = False                    # One isn't prime
primes[1] = True                     # But two is
</code></pre>

<p>... and then you can only check odd candidates in your sieve for half the work.</p>

<h2>Don't evaluate expensive constant values in a loop</h2>

<p>This loop:</p>

<pre><code>while(j&lt;(math.sqrt(num)+1)):
    # ...
    j += 1
</code></pre>

<p>will evaluate the square-root of <code>num</code> one thousand times!</p>

<p>Since <code>num</code> is not changing in the loop, the resulting <span class="math-container">\$\sqrt{n}\$</span> value won't change either.  And square-roots are expensive to calculate.  So instead:</p>

<pre><code>limit = math.sqrt(num) + 1
while j &lt; limit:
    # ...
    j += 1
</code></pre>

<h2>Use <code>for</code> instead of <code>while</code>-with-increment</h2>

<p>The loop:</p>

<pre><code>j = 1
while j &lt; limit:
    # ...
    j += 1
</code></pre>

<p>can easily be replaced by a <code>for</code> loop:</p>

<pre><code>for j in range(1, limit):
    # ...
</code></pre>

<p>Pro-tip: Because we can initialize <code>primes</code> with <code>[False, True, False, True, False, True, ... ]</code> above, we can skip over the even candidates using a step-value in the <code>range()</code>:</p>

<pre><code>for j in range(1, limit, 2):
    # ...
</code></pre>

<h2>List comprehension</h2>

<p>We again encounter the inefficient <span class="math-container">\$O(N^2)\$</span> <code>list.append()</code>-in-loop code:</p>

<pre><code>prime = []
for a in range(num):
    if(primes[a] == True):
        prime.append(a+1)
</code></pre>

<p>Here, we can't use list-multiplication to create the desired list.  Instead, we can use list-comprehension:</p>

<pre><code>prime = [ a + 1 for a in range(num) if primes[a] ]
</code></pre>

<p>Why is this better?  The Python interpreter can "guess" the resulting list is no longer than <code>num</code> entries, and allocate sufficient space.  Then, it will loop through and populate the list with the successive <code>a + 1</code> values where <code>primes[a]</code> is true.  At the end, it realizes the list is much shorter than it initially allocated, and can resize the list down to actual size.</p>

<p>But wait.  We are looking up in <code>primes[]</code> successive values, which involves 1 million indexing operations.  Instead of looping over a <code>range(num)</code>, we should loop over the <code>primes</code> list itself.  No indexing; just extracting each value from the list one after the other.</p>

<pre><code>prime = [ a + 1 for a, prime in enumerate(primes) if prime ]
</code></pre>

<p>That <code>+1</code> is annoying; that is several thousand addition operations.  It would be better if we counted elements of <code>primes</code> beginning with <code>1</code> for the <code>primes[0]</code> value:</p>

<pre><code>prime = [ a for a, prime in enumerate(primes, 1) if prime ]
</code></pre>

<p>Easy peasy.</p>

<h2>Zero-based indexing</h2>

<p>Your indexing scheme, which stores the primality of <code>a</code> in <code>primes[a-1]</code> is confusing, and causes more headaches than it's worth.  Yes, you've saved 1 list element, but that tiny savings in memory is not worth the confusion.</p>

<p>Store the primality of <code>a</code> in <code>primes[a]</code>.</p>

<h2>Realizing Slices</h2>

<p>Consider the code:</p>

<pre><code>    sub = primes[i:i+count]
    subSum = sum(sub)
</code></pre>

<p>It takes the slice <code>primes[i:i+count]</code>, and then <strong>assigns it to a variable</strong>.  At that moment, the Python interpreter <strong>MUST</strong> copy the slice into a real list.  Then, you never use <code>sub</code> again, after the next statement.</p>

<p>If you wrote:</p>

<pre><code>subSum = sum(primes[i:i+count])
</code></pre>

<p>the Python interpreter <em>may</em> pass an iterator to the slice to the <code>sum()</code> function, and add up the numbers.  The copy of the slice into a real list <em>may</em> be avoided.</p>

<h2>x "in" list</h2>

<p>To test <code>if subSum in primes:</code>, the interpreter checks the each element of the list to see if it matches the <code>subSum</code>, until either a match is found, or the end of the list is encountered.  This is an <span class="math-container">\$O(N)\$</span> operation.  Not exactly slow, but it takes time.</p>

<p>If you converted <code>primes</code> into a <code>set</code> beforehand, the values are hashed into bins, and the <code>in</code> operation drops to <span class="math-container">\$O(1)\$</span>, which <strong>is</strong> fast.</p>

<pre><code>primes = set(primes)
</code></pre>

<p>But ... creating the set is an <span class="math-container">\$O(N)\$</span> operation and you already generated a list of primality flags in <code>sieve()</code>.  If you returned that list of flags, in addition to your list of prime numbers, your prime test could be:</p>

<pre><code>if primes_flags_from_sieve[subSum-1]:
</code></pre>

<p>which not only is <span class="math-container">\$O(1)\$</span>, it is just a lookup!  No hashing of the value to lookup.  So this would be <strong><em>very fast</em></strong>.</p>

<h2>Algorithmic Improvements</h2>

<p>Repeatedly adding close to the same sequence of numbers together over and over again is a waste of time:</p>

<pre><code>2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 + ...
    3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 + ...
        5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 + ...
      :        :          :
2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29
    3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29
        5 + 7 + 11 + 13 + 17 + 19 + 23 
      :        :          :
2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 
    3 + 5 + 7 + 11 + 13 + 17 + 19 + 23
        5 + 7 + 11 + 13 + 17 + 19 + 23
      :        :          :
2 + 3 + 5 + 7 + 11 + 13 + 17 + 19
    3 + 5 + 7 + 11 + 13 + 17 + 19 
        5 + 7 + 11 + 13 + 17 + 19
      :        :          :
2 + 3 + 5 + 7 + 11 + 13 + 17
    3 + 5 + 7 + 11 + 13 + 17
        5 + 7 + 11 + 13 + 17
</code></pre>

<p>If only there was a simple way of performing the addition once, and then getting the individual sums of subsequences out of that pre-processed data in <span class="math-container">\$O(1)\$</span> time ...</p>

<p>Left to student.</p>
    </div>