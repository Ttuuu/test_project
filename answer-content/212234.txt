<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see it's not the first post from you for the last week. Here some comments for all of your pieces of code.</p>

<ol>
<li><p>Strange assignments:</p>

<blockquote>
<pre><code>public ushort Count;
</code></pre>
  
  <p>...</p>

<pre><code>public bool ComputeCodes() // returns true if Limit is exceeded.
{
    ushort count = Count;
</code></pre>
</blockquote>

<p>What purpose of the last line? <code>Count</code> already <code>ushort</code> and it's a field, not a property (which is a case where this assignment can has sense).</p></li>
<li><p>A lot of spaces:</p>

<blockquote>
<pre><code>UlongHeap heap = new UlongHeap( count );

for ( ushort i = 0; i &lt; Count; i += 1 )
</code></pre>
</blockquote>

<p>Don't use spaces after <code>(</code> and <code>[</code>, and before <code>)</code> and <code>]</code>. They add noise to the code.</p></li>
<li><p>Don't use PascalCasing for private fields names. Many programmers use <code>_</code> prefix to indicate private field.</p></li>
<li><p>Use <code>var</code> where it's appropriate. For example, here</p>

<blockquote>
<pre><code>UlongHeap heap = new UlongHeap( count );
</code></pre>
</blockquote>

<p>it's obvious that <code>heap</code> will be of type <code>UlongHeap</code>. So this</p>

<pre><code>var heap = new UlongHeap( count );
</code></pre>

<p>is more clear without redundant type specification.</p></li>
<li><p>Increments can be written as <code>++</code> instead of <code>+= 1</code>.</p></li>
<li><p>It's better to use properties instead of public fields. Also properties like this</p>

<blockquote>
<pre><code>public int Count { get{ return _Count; } }
</code></pre>
</blockquote>

<p>can be rewritten as</p>

<pre><code>public int Count =&gt; _Count;
</code></pre></li>
<li><p>Use full names for variables and method parameters. So instead of <code>dleft</code>, <code>dright</code> and so on use <code>depthLeft</code>, <code>depthRight</code>.</p></li>
<li><p>Use consistent naming. You have variables <code>treeNode</code>, <code>maxBits</code>, <code>bl_count</code>, <code>next_code</code>. Use camelCasing (like <code>maxBits</code>) without underscores.</p></li>
<li><p>Magic numbers should be defined as constants. What is <code>0xff0000u</code> or <code>0xffffffffff000000</code>?</p></li>
<li><p>Place bodies of <code>if</code> statements on next line, like so</p>

<pre><code>if (maxBits &gt; Limit)
    return true;
</code></pre></li>
<li><p>Check arguments of public methods. For example, here</p>

<blockquote>
<pre><code>public HuffmanCoding( int limit, ushort symbols )
</code></pre>
</blockquote>

<p>what will happen if user pass negative number to <code>limit</code>? You can check value and throw <code>ArgumentOutOfRangeException</code> with a message describing error if a value is invalid.</p></li>
</ol>
    </div>