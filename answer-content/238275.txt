<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Multiple facets to this answer:</p>

<h2>First, direct responses to the given approaches</h2>

<h3>1.</h3>

<p>Initializing fields with a value, only to reinitialize them in a constructor is not useful - skimming the class, which will be done in time, would lead to confusion. When initializing values with defaults, it would be better to modify them using setters.
The empty String may, however, not be a good default. A Constructor is supposed to instantiate an Object in a way that it can be used - however, a user without a user id appears relatively useless.</p>

<h3>2.</h3>

<p>This approach is better, but the concepts are not cleanly understood.
First off, Clean Code does not argue against ternaries in general. Ternary operations can be very useful, if utilized correctly. The way you use them here is <strong>not</strong> a good way to use a ternary. This however is</p>

<pre class="lang-java prettyprint-override"><code>private static &lt;T&gt; T valueOrDefault(T value, T default) {
  return value != null
    ? value
    : default;
}
</code></pre>

<p>This is a ternary which is instantly understandable, as it is entirely alone, and formatted in a way that it makes understanding easier.
This is also a suggestion to use here, as declaring this method within the User class allows for the following constructor:</p>

<pre class="lang-java prettyprint-override"><code>public User(AuthUser authUser, Set&lt;String&gt; roles) {
  this.userId = valueOrDefault(authUser.getUserId(), "");
  // omitted
}
</code></pre>

<p>While this is very readable in both constructor and utility method, it is also technically overengineered here, as the use of generics is not necessary in this case, it merely removes the need to declare two extremely similar functions.</p>

<h3>3.</h3>

<p>Do not use <code>Optional</code> like this. Optional has a very specific and limited use, which is as a return type on specific methods and function calls.
Also, while this is one way to remove a redundant <code>get</code>-call, this also adds a rather large amount of unnecessary overhead, plus it is much less readable than the second approach.
This reduced readability and increased overhead in comprehension and execution remains even if the formatting in improved for readability.</p>

<h3>4.</h3>

<p>This is the most acceptable approach in general, however this is only true if the necessary dependencies are already present on the classpath. Adding <code>commons-lang</code> for null-checks only is, while technically adhering to the KISS principle, too much cost for effect.</p>

<h2>Second: Considerations</h2>

<p>Is this an Object or a data structure? Right now, it is <em>technically speaking</em> both, which is inherently problematic. See <a href="https://stackoverflow.com/questions/23406307/whats-the-difference-between-objects-and-data-structures">here</a> for <em>some</em> explanations, the mentioned book would help you more though.</p>

<p>Considering the construction approach: the constructor seems to copy fields from object a, which is also a kind of user, and append a <code>Set</code> of <code>String</code>s to the object. So it is neither a copy constructor nor a plain constructor. This is in so far confusing that, when described from a more distanced view,
<em>the User is instantiated by passing a User and Roles. The Passed User is not present in the User Object, but some fields of it are.</em>
If you find this sentence confusing: people who read your code will most likely think along these lines. At least, I do, as I always try to simplify as much as possible.</p>

<p>As this kind of construction CAN be confusing, it may be useful to create a Mapper or Converter accepting <code>AuthUser</code> and <code>Set&lt;String&gt;</code> and returning <code>User</code>. This would separate the data structure from the logic, and it would allow more validation logic to happen without bloating the user object.</p>

<p>This would also allow the user to be a <code>@Value</code>-class, meaning no setters and all fields final, which makes this object almost immutable and easy to share - almost as the <code>Set</code> still can be modified.</p>

<h2>Third: the <code>null</code>-problem</h2>

<p>Is <code>null</code> really the same as the empty String in case of id, name and email? And, are "no roles" the same as <code>null</code>?
<code>null</code> in java is, despite the dreaded <code>NullPointerException</code>, a very useful value, and replacing it with "I don't want to do null check"-defaults is rarely a good idea.</p>

<p>It would actually be better practice to not modify the values at all and take them at face value, as that allows you to determine if there was an error during authentication or data binding (as data binding errors often lead to empty strings, while authentication errors fail to instantiate objects correctly).</p>

<p>Try to incorporate <code>null</code>-values into your application as valid values - for example as validation values, or as markers for errors.</p>

<p>Also, for good measure, <strong>never</strong> allow or return <code>null</code> where <code>Collection</code>s, <code>Map</code>s, <code>array</code>s or other similar objects are expected, as effectively no one expects these to be <code>null</code>.</p>
    </div>