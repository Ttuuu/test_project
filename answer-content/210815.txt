<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Readability</h3>

<p>To expand a bit on what Rick and t3chb0t already said, here are some specific things that hurt the readability of your code:</p>

<ul>
<li>Unnecessary abbreviations and undescriptive names. Some names convey virtually no meaning at all (<code>n</code>, <code>w</code>, <code>x</code>, <code>p</code>), while others are very unclear or do not accurately describe their meaning: <code>ReadInp</code> apparently performs deflation, not just input reading, and what does the 'do' in <code>DoBlock</code> mean?</li>
<li>Stuffing multiple statements on a single line. This makes code much more difficult to 'scan', and code that's difficult to read tends to be difficult to maintain and debug.

<ul>
<li>Especially jarring are lines like <br><code>int mc = 0; while (x &gt;= MatchOff[mc]) mc += 1; mc -= 1;</code><br>There's no clear distinction between what's part of the <code>while</code> loop body and what's not. This can lead to subtle problems. Putting each statement on a separate line, and indenting the loop body makes it easier to identify the control flow at a glance.</li>
<li>Declaring multiple variables of the same type at once, separated by commas, also falls under this: it requires more care to see whether each has been properly initialized, and if not, whether that was intentional or not.</li>
</ul></li>
<li>Related to the above point, the occasional omission of braces and sometimes inconsistent indentation doesn't help either.</li>
<li>Lack of whitespace:

<ul>
<li>Adding an empty line between subsequent <code>if</code> statements makes it more clear that they're not related, which makes it easier to quickly scan control flow.</li>
<li>Leave an empty lines between methods to provide some 'breathing space'. A wall of text is more difficult to read than an article that's split up into chapters and paragraphs.</li>
</ul></li>
<li>Magic values - specific (numeric) values whose meaning is unclear, such as <code>19</code>, <code>256</code>, <code>257</code> and <code>288</code>. Try using properly named constants instead.</li>
</ul>

<h3>C# specific</h3>

<ul>
<li>It's strange to see <code>using Generic = System.Collections.Generic;</code>. Namespace aliases are useful to prevent name clashes, but in my experience that's rarely a problem. In this case, <code>System.Collections.Generic</code> is so ubiquitously used that doing anything else than <code>using System.Collections.Generic;</code> will only cause confusion.</li>
<li>C# supports type inference, so <code>Dictionary&lt;int, PosList&gt; dict = new Dictionary&lt;int, PosList&gt;();</code> can be simplified to <code>var dict = new Dictionary&lt;int, PosList&gt;();</code>.</li>
<li><code>out</code> variables can be declared in-line, so <code>if (dict.TryGetValue(w, out e))</code> can be simplified to <code>if (dict.TryGetValue(w, out PosList e))</code> or <code>if (dict.TryGetValue(w, out var e))</code>.</li>
</ul>

<h3>Design</h3>

<ul>
<li>Inheritance is the wrong tool here, as Rick already pointed out. Just because an encoder uses byte-sequences as input and output does not make it a list of bytes itself. Note how calling <code>Deflate</code> again will overwrite the result of any previous calls - that's very surprising behavior (in a negative way). Also note that a lot of state that is only useful during the actual deflation is kept around - wasting memory, and making your job more difficult because you have to remember to properly reset things.</li>
<li>I see two designs that could work well here:

<ul>
<li>A <code>Stream</code>-based design, where you provide a <code>CompressionStream</code> class that inherits from <code>Stream</code> (it's a stream that you can read decompressed data from) and that wraps another <code>Stream</code> (which contains the still-compressed data). This integrates well with file and network stream reading, among other things. Be sure to read up on how disposal (<code>IDisposable</code>) works.</li>
<li>An <code>IEnumerable&lt;byte&gt;</code>-based design, with an <code>IEnumerable&lt;byte&gt; Deflate(IEnumerable&lt;byte&gt; compressedData)</code> method. This lets you pass in a variety of collections, including arrays, lists and lazily evaluated sequences such as the results of Linq extension methods. Returning an <code>IEnumerable&lt;byte&gt;</code> allows you to return any of these as well, and lets you use <code>yield</code>, which can be useful in certain cases. <code>Deflate(byteArray.Skip(4))</code>, for example, deflates all but the first 4 bytes from <code>byteArray</code>, without any modifications to your code. And if <code>Deflate</code> uses <code>yield</code>, then <code>Deflate(byteArray).Take(4)</code> only deflates the first 4 bytes, while <code>Deflate(byteArray).ToArray()</code> gives you an array that contains all deflated data.</li>
</ul></li>
<li>Rick also mentioned those buffer-related methods, they're better moved to a separate buffer class. The same can be said for those 'output stream' methods. Take a look at how <code>StreamWriter</code> lets you write text to an underlying <code>Stream</code>, while taking care of things like encoding and buffering. You could create a similar construction for writing bits.</li>
</ul>
    </div>