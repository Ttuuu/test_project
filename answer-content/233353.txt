<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe your solution as well as Jenna Sloan's solution is wrong.</p>

<p>Your solution compares the sets of both unordered lists.
Thus, it removes duplicates.
This implies that the following two unordered lists are equal:</p>

<pre><code>{1, 2} == {1, 1, 2} // true
</code></pre>

<p>In other words, set equality does not consider the cardinalities of individual elements.</p>

<p>According to <a href="//stackoverflow.com/q/48230146/">this question</a>, <code>containsAll</code> does also not consider the element cardinalities.
Thus, the implementation of Jenna Sloan has the same issue.</p>

<p>My proposal would be the following:</p>

<ol>
<li>Compare lengths of the lists and return <code>false</code> if they are not equal.</li>
<li><p>For both lists: Count the occurences of the elements in the unordered list using a <code>HashMap&lt;object,int&gt;</code>:</p>

<ul>
<li>if the hashmap does not already contain the element, set the value of the element (key) to <code>0</code></li>
<li>if the hashmap contains already the element, set the value of the element to <code>value+1</code>.</li>
</ul></li>
<li>For each element in the first <code>HashMap</code>, check if both <code>HashMap</code>s have the same value. If a value does not match, return <code>false</code>.</li>
<li>Return <code>true</code>.</li>
</ol>

<p>The complexity should be O(<em>n</em>).</p>
    </div>