<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>General suggestions:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic.</li>
<li><a href="https://github.com/timothycrosley/isort" rel="nofollow noreferrer"><code>isort</code></a> can group and sort your imports automatically.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre>

<p>That limit is not absolute by any means, but it's worth thinking hard whether you can keep it low whenever validation fails. For example, I'm working with a team on an application since a year now, and our complexity limit is up to 7 in only one place.</p></li>
<li><p>I would then recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> everywhere (I'm not sure whether they work with Python 2 though) and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
</ol>

<p>Specific suggestions:</p>

<ol>
<li>Things like pulling out <code>self.numericals.keys()</code> should not happen within a loop. You never modify it, so the result will be the same every time. Better to get this value once.</li>
<li><code>allow_no_val</code> should probably just be called <code>allow_no_value</code>, since that's what it's used as.</li>
<li>If you put the bit about checking for the existence of the configuration file in a <code>main()</code> method the script would be easier to test. You could then pass a stream to <code>Config</code> - presumably <code>config.read</code> handles that just as well as a filename.</li>
<li><code>__init__</code> running <code>_parse</code> is an antipattern. Typically <code>__init__</code> only does trivial things with its parameters, and relies on other methods to do the heavy lifting. Renaming <code>_parse</code> to <code>parse</code> would help in that case.</li>
<li>Boolean parameters are a code smell. For example, in the case of <code>_value_map_lookup</code> it would be easier to read if there was a separate lookup method for numbers.</li>
<li><p>Returning early and structuring the rest of the code accordingly can simplify some parts of the code. For example,</p>

<pre><code>if value in self.value_map[option].keys():
    return self.value_map[option][value]
elif num:
    try:
        float_val = float(value)
        _check_range(float_val, self.numericals[option][0], self.numericals[option][1])
    except ValueError:
        raise InvalidValueError
    else:
        return float_val
else:
    raise InvalidValueError
</code></pre>

<p>could be written as</p>

<pre><code>if value in self.value_map[option].keys():
    return self.value_map[option][value]

if not num:
    raise InvalidValueError

try:
    float_val = float(value)
    _check_range(float_val, self.numericals[option][0], self.numericals[option][1])
    return float_val
except ValueError:
    raise InvalidValueError
</code></pre></li>
<li>Why does <code>_get_config_value</code> check for an option in <em>every</em> section and return the first one? That seems to make sections pointless, because they don't matter.</li>
</ol>
    </div>