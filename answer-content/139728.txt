<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Declaring variables at the top of a procedure was a recommended practice in 90's VB code, because "it makes it easy to see everything that the procedure needs at once". When a procedure would fit on a single screen, it wasn't too bad - but when a procedure scrolls several screens down, and uses 30-40 local variables, that "wall of declarations" actually made it <em>harder</em> to read (/maintain) the code, because you'd constantly need to scroll back up to see the declaration of a given variable, and then you'd waste considerable time locating which line you were looking at on your way back down. Been there, done that.</p>

<p>So to avoid the "wall of declarations" you could make a single instruction to declare a list of variables, like this:</p>

<blockquote>
<pre><code>Dim book, head, cels, mtrx, dbase, v, UserReady, columnsToCombine, RowName, DefaultRowName, DefaultColName1, DefaultColName2, ColName As String
Dim defaultHeaderRows, defaultHeaderColumns, c, r, selectionCols, ro, col, newro, newcol, rotot, coltot, all, rowz, colz, tot As Long
</code></pre>
</blockquote>

<p>There's a trap though: <code>Dim foo, bar, baz As String</code> declares <em>the last one</em> (<code>baz</code>) as a <code>String</code>, and leaves <code>foo</code> and <code>bar</code> implicitly <code>Variant</code> - which incurs useless overhead and requires more storage/memory than needed (not that <em>that</em> is a problem nowadays though).</p>

<pre><code>'--------------------------------------------------
' This section declares variables for use in the script

Dim book
Dim head
Dim cels
Dim mtrx
Dim dbase
Dim v
Dim UserReady
Dim columnsToCombine
Dim RowName
Dim DefaultRowName
Dim DefaultColName1
Dim DefaultColName2
Dim ColName As String

Dim defaultHeaderRows
Dim defaultHeaderColumns
Dim c
Dim r
Dim selectionCols
Dim ro
Dim col
Dim newro
Dim newcol
Dim rotot
Dim coltot
Dim all
Dim rowz
Dim colz
Dim tot As Long

Dim headers(100) As Variant
Dim dun As Boolean
</code></pre>

<p>Fun fact: the <em>first three</em> variables are actually <code>String</code>s that are concatenated into a message for a <code>MsgBox</code> that's displayed <em>at the very end</em> of the procedure.</p>

<p>So we have that wall of declarations, and that banner comment telling us that we're looking at a wall of declarations. Comments shouldn't state the obvious like that; good comments tell us what the code can't say all by itself: it tells us <em>why</em> the code does something.</p>

<p>But back at these variables: <code>DefaultColName1</code>, <code>DefaultColName2</code> and <code>defaultHeaderRows</code> are never never used! Actually <code>DefaultColName1</code> and <code>DefaultColName2</code> aren't even <em>assigned</em>, and never referred to, not even in dead/commented-out code - but who could have known? That's why declaring variables closer to where they're used is a much better practice: no wall of declarations, and it's much harder to declare a variable that's left unused, without noticing.</p>

<hr>

<blockquote>
<pre><code>'--------------------------------------------------
' This section asks about data types, row headers, and column headers
</code></pre>
</blockquote>

<p>In other words, <em>this section is collecting user input</em> - it should be a separate procedure!</p>

<blockquote>
<pre><code>UserReady = MsgBox("Have you selected the entire data set (not the column headers) to be converted?", vbYesNoCancel)
If UserReady = vbNo Or UserReady = vbCancel Then GoTo EndMatrixMacro
</code></pre>
</blockquote>

<p>That <code>UserReady</code> variable should have been declared like this:</p>

<pre><code>Dim UserReady As VbMsgBoxResult
</code></pre>

<p>Actually, since the only thing we're using it for is effectively to cancel the whole thing, might as well not declare it at all and do this instead:</p>

<pre><code>If MsgBox("Have you selected the entire data set (not the column headers) to be converted?", vbYesNoCancel) &lt;&gt; vbYes Then Exit Sub
</code></pre>

<p>...And we just eliminated a <code>GoTo</code> jump!</p>

<blockquote>
<pre><code>all = MsgBox("Exclude zeros and empty cells?", vbYesNoCancel)
If all = vbCancel Then GoTo EndMatrixMacro
</code></pre>
</blockquote>

<p>Same thing here: <code>all</code> should have been declared <code>As VbMsgBoxResult</code>, and there's no need to <code>GoTo EndMatrixMacro</code> either. The name isn't ideal, too: <code>vbYes</code> stands for "exclude zeros and empty cells", and <code>vbNo</code> stands for "include zeros and empty cells" - which means the true meaning of <code>all</code> is the <em>exact opposite</em> of what it appears to be! I'd rename it to <code>IsExcludingZeroAndEmpty</code>, and declare it <code>As Boolean</code>, because we don't <em>really</em> care about the MsgBox result here, all that matters is whether or not we're to include zeros and empty values.</p>

<p>That <code>all</code> variable is used here:</p>

<blockquote>
<pre><code>If ((Sheets(mtrx).Cells(ro, col) &lt;&gt; 0) Or (all &lt;&gt; 6)) Then
</code></pre>
</blockquote>

<p>What's that magic number <code>6</code>? If the variable would have been declared <code>As VbMsgBoxResult</code>, the VBE's IntelliSense would have suggested to use <code>vbYes</code> instead of its underlying numeric value. But that's all moot with a proper <code>Boolean</code>:</p>

<pre><code>If Sheets(mtrx).Cells(ro, col) &lt;&gt; 0 Or Not IsExcludingZeroAndEmpty Then
</code></pre>

<p>(note, I might have gotten confused with the reversed "all" logic here... but you get the point I'm sure - which one is easier to understand?)</p>

<p>Next the script prompts for how many header columns we're looking at:</p>

<blockquote>
<pre><code>colz = InputBox("How many HEADER COLUMNS?" &amp; vbNewLine &amp; vbNewLine &amp; "(These are the columns on the left side of your data set to preserve as is.)", "Header Rows &amp; Columns", defaultHeaderColumns)
If colz = vbNullString Then GoTo EndMatrixMacro
</code></pre>
</blockquote>

<p>Again <code>Exit Sub</code> makes the <code>GoTo</code> jump unnecessary. But there's a problem with using <code>vbNullString</code> with an <code>InputBox</code> - not in <em>this</em> context because it doesn't matter, but that condition will be true regardless of whether the user entered an empty string or hit the <kbd>Cancel</kbd> button; in a case where you would need to differenciate these inputs, you'd be stuck here.</p>

<pre><code>If StrPtr(colz) = 0 Then Exit Sub
</code></pre>

<p>If <code>StrPtr(InputBoxResult)</code> returns a non-zero value, then there was a user input. If it's zero, then the user cancelled out.</p>

<p>There's a worse problem though. <code>colz</code> is a <code>Variant</code>, so it will happily be assigned to <code>potato</code> and nothing will happen until execution reaches this line:</p>

<blockquote>
<pre><code>colz = colz * 1
</code></pre>
</blockquote>

<p>And then boom, runtime error 13 <em>Type Mismatch</em> strikes. The funny part is that it <em>seems</em> this no-op multiplication is there to prevent the next line from blowing up ...with the exact same runtime error:</p>

<blockquote>
<pre><code>columnsToCombine = "'" &amp; Selection.Cells(1, colz + 1).Offset(rowOffset:=-1, columnOffset:=0).Value &amp; "' to '" &amp; Selection.Cells(1, selectionCols).Offset(rowOffset:=-1, columnOffset:=0).Value &amp; "'"
</code></pre>
</blockquote>

<p>A (much) better way would have been to <em>validate</em> the user's input:</p>

<pre><code>If Not IsNumeric(colz) Then 'user is playing smartypants
</code></pre>

<hr>

<p>This is an interesting comment:</p>

<blockquote>
<pre><code>'--------------------------------------------------
' If the proposed worksheet name is longer than 28 characters, truncate it to 29 characters.
    If Len(dbase) &gt; 28 Then dbase = Left(dbase, 28)
</code></pre>
</blockquote>

<p>Which one is wrong? Is the typo in the comment or in the code? We'll never know... but <em>this</em> is why comments shouldn't rephrase what the code is already saying: when the code changes, the comments don't always get updated, and are left there dangling half-truths that no one dares fixing. This would have been much better:</p>

<pre><code>    ' Maximum length allowed for a sheet name is 31 characters
    If Len(dbase) &gt; 28 Then dbase = Left(dbase, 28)
</code></pre>

<p>...which begs the question, why aren't we seeing this?</p>

<pre><code>Private Const SHEETNAME_MAXLENGTH As Integer = 28 ' actually it's 31, but we're keeping a little buffer to append a digit if needed
</code></pre>

<p>And then do we need a comment to explain this line?</p>

<pre><code>If Len(dbase) &gt; SHEETNAME_MAXLENGTH Then dbase = Left(dbase, SHEETNAME_MAXLENGTH)
</code></pre>

<hr>

<p>Everytime there's one such "banner comment":</p>

<blockquote>
<pre><code>'--------------------------------------------------
' This section checks if the proposed worksheet name
'  already exists and appends adds a sequential number
'  to the name
</code></pre>
</blockquote>

<p>This is how I read it:</p>

<pre><code>'--------------------------------------------------
' This section belongs in its own procedure or function
</code></pre>

<p>Might be a bit wrong - I haven't gone into the nitty-gritty details of how the procedure actually does its thing. But <em>usually</em> when a <em>comment</em> says "this chunk of code does XYZ", it can very well be moved into a procedure with a name that says "this procedure does XYZ".</p>

<p>I'll let other reviewers tackle the actual meat of the subject =)</p>
    </div>