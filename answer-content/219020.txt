<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to revew only this part as I think the rest of it is just for demonstration purposes.</p>

<blockquote>
<pre><code>private static void UpdateParams(XDocument xDoc)
{
  IEnumerable&lt;Param&gt; filteredParamList;
  foreach (XElement xElement in xDoc.Root.Elements())
  {
      filteredParamList = paramList.Where(param =&gt; param.xmlName == xElement.Name.LocalName);
      if (filteredParamList != null &amp;&amp; filteredParamList.Any())
      {
          filteredParamList.Single().Value = double.Parse(xElement.Value) * filteredParamList.Single().scalingFactor;
      }
  }
}
</code></pre>
</blockquote>

<ul>
<li><p>Try to avoid writing methods like this one, where one of the parameters is some <code>static</code> field. This makes it very difficult to test because of the external dependency. If possible you should pass the parameter as anoter argument. I had a hard time understanding your code.</p></li>
<li><p>Try to also avoid modifying methods parameters like you do here with the <code>paramList</code>. It's usually much better to return a new result. Such methods are called <a href="https://www.sitepoint.com/functional-programming-pure-functions/" rel="nofollow noreferrer">pure methods</a> and are much easier to test and to maintain. Modifying global objects can make debugging very painful.</p></li>
<li><p>Use the <em>smallest</em> possible type for parameters (or the most general/abstract). This means, your method doesn't need the <code>XDocument</code>, it can do its job just fine with an <code>IEnumerable&lt;XElement&gt;</code>.</p></li>
<li><p>Choose more meaningful method names. <code>UpdateParams</code> is too general and doesn't say anything about what is going to be updated.</p></li>
<li><p>You neither need the <code>foreach</code>, nor <code>Where</code>, nor <code>Any</code>, nor <code>Single</code>, nor the <code>null</code> check. All this can be replaced by a much nicer <code>join</code>.</p></li>
</ul>

<hr>

<p>This is how it could look like after refactoring:</p>

<pre><code>private static IEnumerable&lt;Param&gt; ScaleParameterValues
(
    IEnumerable&lt;XElement&gt; elements, 
    IEnumerable&lt;Param&gt; parameters
)
{
    return
        from xe in elements
        join p in parameters on xe.Name.LocalName equals p.xmlName
        select new Param(p.xmlName, p.scalingFactor) 
        { 
            Value = p.scalingFactor * double.Parse(xe.Value) 
        };
}
</code></pre>
    </div>