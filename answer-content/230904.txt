<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your button class should do more. It should know if a point is within it's boundaries or not and what its image(s) is (are). It should probably also have an <code>update</code> method that can optionally be called with the mouse position. I would also rename it to singular <code>Button</code>, since each instance of the class is a single button and not a collection of buttons.</p>

<pre><code>class Button:
    """
    This class takes the x-position and the y-position, width and height of an image.
    """
    def __init__(self, x, y, width, height, image, hover_image=None):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.image = on_image
        self.hover_image = hover_image

def point_inside(self, pos=None):
    if pos is None:
        return False
    return (self.x &lt;= pos[0] &lt;=  self.x + self.width \
            and self.y &lt;= pos[1] &lt;= self.y + self.height)

def update(self, screen, mouse_pos=None):
    if self.hover_image is not None and self.point_inside(mouse_pos):
        screen.blit(self.hover_image, (self.x, self.y, SCREEN_HEIGHT, SCREEN_WIDTH))
    else:
        screen.blit(self.image, (self.x, self.y, SCREEN_HEIGHT, SCREEN_WIDTH))


if __name__ == "__main__":
    thumbs_up_img = pygame.image.load('thumbsup.png')
    thumbs_up_lit_up_img = pygame.image.load('thumbsupred.png')
    thumbs_up = Button(60, 240, 50, 50, thumbs_up_img, thumbs_up_lit_up_img)

    # some pygame setup
    ...

    while True:
        mouse = pygame.mouse.get_pos()
        button.update(screen, mouse)
        pygame.display.flip()
</code></pre>

<p>This is a bit more generic, in that it allows a button not to have a hover image and it has an <code>update</code> method, which is quite common for objects in <code>pygame</code>. You could think about off-loading the point in button boundary check to a <code>Rectangle</code> class, which might help since you will probably encounter rectangles and checking if a point is inside quite often in <code>pygame</code>.</p>

<p>And would you look at that, there is already <a href="https://www.pygame.org/docs/ref/rect.html" rel="nofollow noreferrer"><code>pygame.Rect</code></a>, from which you could inherit. It even has the <a href="https://www.pygame.org/docs/ref/rect.html#pygame.Rect.collidepoint" rel="nofollow noreferrer"><code>pygame.Rect.collidepoint</code></a> method to check if a point is inside it.</p>

<pre><code>class Button(pygame.Rect):
    """
    This class takes the x-position and the y-position, width and height of an image.
    """
    def __init__(self, x, y, width, height, image, hover_image=None):
        super().__init__(x, y, width, height)
        self.image = on_image
        self.hover_image = hover_image

def update(self, screen, mouse_pos=None):
    if self.hover_image is not None \
       and mouse_pos is not None \
       and self.collidepoint(mouse_pos):
        screen.blit(self.hover_image, (self.x, self.y, SCREEN_HEIGHT, SCREEN_WIDTH))
    else:
        screen.blit(self.image, (self.x, self.y, SCREEN_HEIGHT, SCREEN_WIDTH))
</code></pre>
    </div>