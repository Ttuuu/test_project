<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming and underscores</h2>

<p>Underscores help to separate long sentences. But variable names should not be long sentences. You should drop the underscores, stick with camelCasing (as per convention), and shorten the names.</p>

<pre><code>bool errorsFound;
bool importFailed;
</code></pre>

<p>The underscores in your constants are not as much of an issue. I have generally moved away from the SCREAMCASING for constants and instead just PascalCase them (without underscores); but that's not a globally agreed upon standard.</p>

<p>As an aside, unit and integration test methods often do have long sentences for names, and underscores are actually useful there. So you're definitely allowed to use underscores <strong>where appropriate</strong>. Local variables with long names are hardly ever appropriate.</p>

<hr>

<h2>Simplifying the logic</h2>

<pre><code>if ((result.Count == 2) &amp;&amp; (!is_The_Import_Has_Failed_Exist))
{
    result_REJECT = result[1].ToString().Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
    StatusResult = Properties.Resources.ARGS_RESULT_OK_REJECT;
}      

if ((is_The_Import_Has_Failed_Exist) &amp;&amp; (result.Count == 2))
{
    result_REJECT = result[1].ToString().Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
    StatusResult = Properties.Resources.ARGS_RESULT_KO_REJECT;
}   
</code></pre>

<p>These two evaluations share some commonalities, and their bodies are identical (assuming OK/KO is a typo). This can be merged into a single evaluation:</p>

<pre><code>if(result.Count() == 2 &amp;&amp; (!is_The_Import_Has_Failed_Exist || is_The_Import_Has_Failed_Exist) )
{        
    result_REJECT = result[1].ToString().Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
    StatusResult = Properties.Resources.ARGS_RESULT_OK_REJECT;
}
</code></pre>

<hr>

<h2>Clear naming</h2>

<pre><code>var is_Import_Failed_Exist = ...;
var is_The_Import_Has_Failed_Exist = ...;
</code></pre>

<p>For the life of me, I cannot figure out what the difference between them is. The naming of these variables (and the constants after which they are named) is not good, since a reader cant figure out what they represent.</p>

<pre><code>returnObject = new ReturnObject { ... }
</code></pre>

<p><code>ReturnObject</code> is such a vague name that it fails to express anything meaningful. I'll happily admit that I've struggled coming up with names for return DTOs too, but it needs to have <em>some</em> sort of descriptive name, e.g. <code>ImportStatusDto</code> or <code>ImportStatusResult</code>.</p>

<pre><code>Properties.Resources.ARGS_RESULT_OK_REJECT
</code></pre>

<p>"OK" and "reject" seemingly contradict one another. Is this a good outcome, or a bad one? It's unclear and needs better naming to make this clear.</p>

<pre><code>else if (is_No_Errors_Found_Exist)
{
    StatusResult = Properties.Resources.ARGS_RESULT_OK;
}
else if (is_Import_Failed_Exist)
{
    StatusResult = Properties.Resources.ARGS_RESULT_OK; // I assume "KO" was a typo
}
</code></pre>

<p>As a developer reading your code, it's very confusing why the failure of an import is considered a positive ("OK") outcome. This seemingly contradicts the evaluation above where the existence of errors is clearly <em>not</em> OK.</p>

<p>This may be a bug in your code. In that case, you probably would've spotted the bug easier if your variable names had been easier to read (see the above tips).  </p>

<p>If this isn't a bug, then I'm still inclined to conclude that your naming introduces confusion where none should have existed.</p>

<pre><code>CountLines 
</code></pre>

<p>This sounds like a command or instruction ("Hey, you! Count those lines!"), which is how <strong>methods</strong> should be named.  </p>

<p>Variable names (except for booleans) should be nouns or noun phrases. <code>LineCount</code> is the better name here.</p>

<p>For completeness' sake, boolean names should generally adhere to yes/no questions: <code>isAlive</code>, <code>hasFood</code>, ... or in other cases phrasings that strongly convey a binary result: <code>userWasDeleted</code>, <code>importFailed</code>, ...<br>
In all of these cases, if I were to put a question mark behind the name, it would be bad English but you would understand the question and would easily identify what the meaning of "yes" and "no" is.</p>

<hr>

<h2>Avoid negative variable names</h2>

<pre><code>is_No_Errors_Found_Exist
</code></pre>

<p>While you can read it now, this can quickly get out of hand. How would you check that errors were found?</p>

<pre><code>if(!is_No_Errors_Found_Exist)
</code></pre>

<p>That's a double negative, and really hard to parse. It's much better to stick with "positive" naming and then negate the boolean value</p>

<pre><code>bool errorsFound = ...;

if(!errorsFound) { ... }

if(errorsFound) { ... }
</code></pre>

<p>In this example, there's no need to use a double negative, which improves readability.</p>

<p>Your internal voice should read this as "not errors found", which it intuitive and clearly expresses the intention of the evaluation.</p>

<p>Note that when I say "positive", I mean "<strong>not negated</strong>" instead of "good". A boolean called <code>isFailed</code> is a "positive" naming. Not because failure is <em>good</em> (it clearly isn't), but because it's not negated.<br>
<code>importDidNotFail</code> would be the "negative" naming (because of the "not"), which you should try to avoid to enhance overall readability.</p>

<hr>

<h2>In conclusion</h2>

<p>This is more of a review on your question than the code, but there is a common thread here.</p>

<blockquote>
  <p>First I have two conditions on the number of list elements,then in one of these conditions I have two others conditons to treat it</p>
</blockquote>

<p>Try to read this from the perspective of a StackExchange user who knows nothing about you or your code. Does this explain what your code is trying to achieve?</p>

<p>I think you're explaining things the way they already make sense to you, while not considering how others will (or won't) understand what you write.</p>

<p>I mention this because <strong>code readability should be written from the perspective of those who don't know the code</strong>. Whenever you name something (a variable, a method, ...) you need to ask yourself a simple question:</p>

<blockquote>
  <p><em>Would a developer who is new to the project understand what this method does/what this variable expresses?</em></p>
</blockquote>

<p>This is by far the biggest issue in your code. Your naming has made it very hard for anyone else to read your code and understand its purpose.  </p>

<p>And it's not just about other people. If you start working on another project, and in a few months' time you have to return to this project, you're going to be scratching your head too, because you won't remember all the things you currently know and will have to build up that working knowledge again.</p>

<p>The other minor issues/bugs I've found are actually fairly common in codebases where readability is hampered, because low readability leads to a high likelyhood of making unintentional mistakes. </p>

<p>I suspect that if you work on improving your code readability, you'll automatically start seeing how to improve parts of the code more and more.</p>
    </div>