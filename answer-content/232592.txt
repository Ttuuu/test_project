<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>If return true, else return false</h2>

<pre><code>if(lv &gt; conf.roleEditor)
    return true;
else
    return false;
</code></pre>

<p>Before we delve into the contextual considerations, an <code>if</code> that returns <code>true</code> or <code>false</code> is always a redundant if. This can at all times be refactored to:</p>

<pre><code>return lv &gt; conf.roleEditor;
</code></pre>

<h2>Performance</h2>

<blockquote>
  <p>I see that, if the url is "/RoleEditor" but the power level is too low, all other comparisons will be made. A fix for this would be changing all to this:</p>
</blockquote>

<p>The first question is always "does this performance need to be optimized?" As these are simple value comparisons, the performance cost is likely negligible. Assuming this method isn't being called many thousands of times in a given page load.</p>

<p>When performance cost is negligible, favor readability over (irrelevant) optimizations. In that regard, you're free to <em>not</em> avoid the additional checks if it makes the code more readable and doesn't meaningfully impact performance.</p>

<p>That being said, the code <em>can</em> be improved here, which I will get to. The main takeaway here is that you are not forced to optimize it the way you currently wanted to if there is no proven performance issue.</p>

<h2>Authentication vs authorization</h2>

<p>As others have already remarked, you're dealing with authorization here, not authentication.</p>

<ul>
<li><strong>Authentication</strong> = Who is this? (it's Bob)</li>
<li><strong>Authorization</strong> = Can Bob delete users? (yes)</li>
</ul>

<h2>Secure authorization</h2>

<p>You are showing a javascript method. Presumably, this runs in the client's browser. By putting the logic in the browser, your users are able to find it and alter it if they so choose. <a href="https://softwareengineering.stackexchange.com/questions/200790/how-easy-is-it-to-hack-javascript-in-a-browser"><strong>This is a bad idea for security concerns</strong></a>.</p>

<p>It's not necessarily wrong to perform these checks client-side (e.g. for a fast response and thus good user experience) if they are also <strong>backed by server-side security checks</strong> (to ensure that users fiddling with the authorization logic client-side are unable to perform actions server-side).</p>

<h2>Optimizing the algorithm</h2>

<p>With all these sidenotes out of the way, we move on to the actual issue you were asking about, optimizing the ifs. Reading the code, there is a general pattern to be spotted:</p>

<pre><code>if(url == "MyString" &amp;&amp; lv &gt; conf.MyStringMinimumLevel)
</code></pre>

<p>Sometimes there is more than one allowed string, so we'll account for that, but the repeating pattern is otherwise always the same. I'm going to refer to these two values as "names" and "levels" in the rest of the answer for brevity's sake.</p>

<p>This immediately opens the door to abstraction by mapping these names and levels. In fact, you've already sort of done this with all your <code>conf.roleEditor</code>, <code>conf.queuedata</code>, ... values. You just haven't done it reusably, which is forcing you to manually write all your if checks. If you write it reusable, you can reduce this to a very simple process:</p>

<ul>
<li>Fetch the level based on the <code>url</code> name</li>
<li>Check if the given user level is greater than the fetched level</li>
</ul>

<p></p>

<pre><code>var mappings = 
{
    {
        "level" : 1
        "names" : [ "RoleEditor", "SaveRoles" ]
    },
    {
        "level" : 2
        "names" : [ "WriteQueueData" ]
    }
};

function isAuthorized(url, lv) {

    var mapping = mappings.find(m =&gt; m.names.includes(url.trim('/'));

    return mapping !== undefined
           &amp;&amp; lv &gt; mapping.level;
}
</code></pre>

<p>To explain:</p>

<ul>
<li><code>.find()</code> gives us the first item which conforms to the selection logic (or <code>undefined</code> if no such item exists). </li>
<li>The selection logic (<code>.includes()</code>) checks if a mapping contains a name that matches the <code>url</code> parameter.</li>
<li>By using <code>url.trim('/')</code>, you omit the first and last character (the <code>/</code>) from the URL when it is a <code>/</code> (but will leave any other characters). This just makes it easier for use to not have to constantly put the <code>/</code> in the mapping names.</li>
<li>The <code>!== undefined</code> check ensures that we return <code>false</code> if no mapping exists for the current URL. Your intended behavior may be different here - adjust it as you see fit.</li>
</ul>

<p>You'll probably want to store this mapping in your <code>conf</code> object, but I'll leave the finer points up to you. This is just a basic example of how you can reduce the method.</p>

<h2>Edit: Sidenote</h2>

<p>If the <code>conf</code> object should not be altered (for whatever reason), you can work around this by indirectly using the values in the mappings:</p>

<pre><code>var mappings = 
{
    {
        "level" : conf.roleEditor,
        "names" : [ "RoleEditor", "SaveRoles" ]
    },
    {
        "level" : conf.queuedata,
        "names" : [ "WriteQueueData" ]
    }
};

// The function is unchanged
</code></pre>

<p>This is less ideal (it's better to just change the <code>conf</code> object) but if you can't change it, you can at least still work around it.</p>
    </div>