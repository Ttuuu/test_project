<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm just going to review <code>sp3</code>.</p>

<hr>

<blockquote>
<pre><code>    P = []
    &lt;snip 8 lines&gt;
    for v in nodes:
        P.append(dic[v])
</code></pre>
</blockquote>

<p>It's generally preferable to declare your variables as near as possible to the first use. That way someone reading the code has to keep less information in their memory.</p>

<p><code>P</code> is not an informative name. I would usually guess that it's short for <code>Point</code>, but that doesn't seem to fit.</p>

<blockquote>
<pre><code>    for v in nodes:
        P.append(dic[v])
    P = list(set(P))
    return P
</code></pre>
</blockquote>

<p>This could be shortened to</p>

<pre><code>    return list(set(dic.values()))
</code></pre>

<p>But it's not obvious why it's important to return a <code>list</code> rather than a <code>set</code>.</p>

<hr>

<blockquote>
<pre><code>    dic = {}
    for v in nodes:
        dic[v] = frozenset([v])
    for v in nodes:
        nb = random.choice(list(G.neighbors(v)))
        U = frozenset.union(dic[v],dic[nb])
        for a in U:
            dic[a] = U
</code></pre>
</blockquote>

<p>Again, <code>dic</code> is not a very informative name. I can see it's a dictionary from the declaration, but what does it <em>mean</em>? Perhaps <code>components</code> would be a better name?</p>

<p>Again, I don't understand the point of conversion to <code>list</code>. <code>random.choice</code> is documented as accepting any sequence. If you've profiled and discovered that it's faster when passed a list, that's the kind of valuable information which should be captured in a comment.</p>

<p>This algorithm is not very efficient. Wikipedia's article <a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure" rel="nofollow noreferrer">Disjoint-set data structure</a> contains pseudocode for a more efficient approach. Basically you replace the mapping to a set with a mapping to another vertex and build a tree. There are various optimisations which are simple to implement and harder to analyse but give an essentially linear time algorithm.</p>

<p>NB if you can arrange for the vertices to be numbers from 0 to n-1 then you can replace the <code>dict</code> with a list, which should be slightly faster.</p>

<hr>

<blockquote>
  <p>Also, I've been told to check if there's a faster implementation than random.choice when I'm using really small lists usually of size 6, give or take, so any insight on that is welcome.</p>
</blockquote>

<p>I was expecting the answer to be no, but looking at the <a href="https://github.com/python/cpython/blob/master/Lib/random.py" rel="nofollow noreferrer">implementation of <code>random.choice</code></a> (and, in particular, <code>_randbelow_with_getrandbits</code>) I think that you probably can do better. Certainly it's worth profiling against an implementation rather more like <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/util/Random.java#l386" rel="nofollow noreferrer">Java's nextInt(int)</a>.</p>

<p>Basically, if you want a random number from <code>0</code> inclusive to <code>n</code> exclusive, Python finds the smallest power of two which is at least <code>n</code>, takes that many random bits, and tries again if the result is <code>n</code> or greater. When <code>n</code> is one more than a power of two it takes two tries on average. Java, on the other hand, always takes 31 random bits and calculates <span class="math-container">\$2^{31} \bmod n\$</span> to figure out the threshold at which to discard. So for <code>n=5</code> it does one expensive operation (<code>%</code>) but has an extremely low probability of needing to try again.</p>

<p>Which approach is fastest probably depends on your CPU. Given that you know the statistics of your list sizes you could also consider taking the Java approach but pre-calculating a lookup table to do the <code>%</code> operations just once at start-up.</p>
    </div>