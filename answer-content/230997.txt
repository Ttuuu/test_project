<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I. You don't reserve space. Imagine a situation when you need to append a vector of strings of known sizes. You reallocate buffer, and copy its current contents together with appended suffix for each of those. Thus, if you add N small strings of size m each, the whole algorithm runs in NÂ², possibly leaving the heap fragmented heavily.</p>

<p>One typical strategy would be to reserve space growing logarithmically; this makes appending amortized linear.</p>

<p>Even without large amount of rhs operands, when you append a small string to a large one 99% of method runtime is spent on copying the lhs contents.</p>

<p>II. Member <code>operator+</code> probably deserves ref-qualification. <code>operator+() const &amp;&amp;</code> can simply reuse this object's space (well, if it's reserved).</p>

<p>III. Note that <code>remove_character</code> can effectively reduce string's length in the meantime leaving it in the same buffer (so you get an implicit reserved space you can't even benefit from).</p>

<p>IV. <code>reset()</code> makes the buffer leak. If it was introduced for the sole purpose of being used in move construction/assignment it should be made <code>private</code>.</p>

<p>V. You're using functions for trailing zero strings so don't consider cases when <code>String</code>s have zero characters inside: in your current implementation, <code>String("123\000abc")</code> is equal to <code>String("123\000def")</code>. If it is as intended, perhaps a check in the ctor would make sense.</p>

<p>Bonus. Identifiers starting with underscores. Not that it was illegal but personally I wouldn't name them this way.</p>
    </div>