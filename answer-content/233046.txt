<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Useless Code</h2>

<p>Your <code>@memo</code>-ization doesn't do anything of value:</p>

<ul>
<li>Your mainline calls <code>collatz()</code> exactly once.  Unless given the value <code>1</code>, the <code>collatz()</code> function calls itself with <code>3*n + 1</code> or <code>n // 2</code>, and since the Collatz sequence doesn't have any loops until the value <code>1</code> is reached, it will never call itself with a value it has already been called with.  So, you are memoizing values which will never, ever be used.</li>
<li>Your <code>collatz()</code> function doesn't just return a value; it has a side-effect: printing!  If you did call <code>collatz()</code> with a value that has already been memoized, nothing will be printed.</li>
</ul>

<h2>Tail Call, without Tail Call Optimization</h2>

<p>You've increased the recursion limit to <span class="math-container">\$10^9\$</span> stack levels, which is impressive.  But the algorithm doesn't need to be recursive.  A simple loop would work.  And since Python cannot do Tail Call Optimization, you should replace recursion with loops wherever possible.  Doing so eliminates the need for the increased stack limit:</p>

<pre><code>def collatz(n):
    count = 1

    while n &gt; 1:
        if n % 2 != 0:
            n = n * 3 + 1
        else:
            n //= 2

        print(n)
        count += 1

    return count
</code></pre>

<h2>Separate Sequence Generation from Printing</h2>

<p>You can create a very simple Collatz sequence generator:</p>

<pre><code>def collatz(n):
    while n &gt; 1:
        yield n
        n = n * 3 + 1 if n % 2 else n // 2
    yield 1
</code></pre>

<p>Using this generator, the caller can print out the Collatz sequence with a simple loop:</p>

<pre><code>for x in collatz(13):
    print(x)
</code></pre>

<p>Or, if the caller just wants the length of the Collatz sequence, without printing out each item in the sequence, you can determine the length of the sequence with <code>len(list(collatz(13)))</code>.  Better would be to count the items returned by the generator without realizing the list in memory: <code>sum(1 for _ in collatz(13))</code>.</p>

<h2>Project Euler 14</h2>

<p>The above generator works great for determining the sequence from any arbitrary value.  If you want to compute the length of <code>collatz(n)</code> for <span class="math-container">\$1 \le n \le 1,000,000\$</span>, you may want to return to memoization.  However, this is Code Review, and while you alluded to PE14, you didn't actually provide code for that, so that cannot be reviewed here.</p>
    </div>