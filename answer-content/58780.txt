<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your implementation is pretty clear. Nonetheless I tried some changes, hoping my version is more readable.</p>

<p>I agree with <a href="https://codereview.stackexchange.com/users/4526/stuart-blackler">Stuart's</a> post. (using <code>IEnumerable&lt;&gt;</code> if possible, non static <code>Build()</code> function, ...). </p>

<p>In Addition I think you have broken this principles:</p>

<ul>
<li><p><a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single
Responsibility</a>
--&gt; Your <code>FillChildren(...)</code> function is looking for children <strong>and</strong> removing them from the original list <strong>and</strong> adding them in the parent's children collection. I mean that are three responsibilities.</p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="nofollow noreferrer">Least
Attonishment</a>
--&gt; In a function called <code>FillChildren</code> I doesn't expect anything being removed.</p></li>
</ul>

<p>I changed also many Names, but this may be a matter of taste.</p>

<p>Here is the changed code:</p>

<pre><code>public class ArchiveBuilder
{
    public List&lt;ArchiveTreeEntry&gt; Build(List&lt;ArchiveDefinition&gt; availableArchiveDefinitions)
    {
        List&lt;ArchiveTreeEntry&gt; rootArchiveTreeEntries = null;

        if (availableArchiveDefinitions != null &amp;&amp; availableArchiveDefinitions.Count &gt; 0)
        {
            rootArchiveTreeEntries = CreateRootArchiveTreeEntries(availableArchiveDefinitions);
            availableArchiveDefinitions = RemoveRootArchiveDefinitions(availableArchiveDefinitions);
            foreach (var entry in rootArchiveTreeEntries)
            {
                HandleAvailableEntriesForGivenParent(availableArchiveDefinitions, entry);
            }
        }

        return rootArchiveTreeEntries;
    }

    private static void AssignChildrenToParent(ArchiveTreeEntry parent, 
        IEnumerable&lt;ArchiveDefinition&gt; children)
    {
        parent.AddChildRange(children.Select(x =&gt; new ArchiveTreeEntry(x)));
    }

    private static List&lt;ArchiveTreeEntry&gt; CreateRootArchiveTreeEntries(
        IEnumerable&lt;ArchiveDefinition&gt; availableArchiveDefinitions)
    {
        var rootArchiveTreeEntries = new List&lt;ArchiveTreeEntry&gt;();
        rootArchiveTreeEntries.AddRange(
            availableArchiveDefinitions.Where(e =&gt; e.TypeOfArchive == ArchiveType.Archive)
                .Select(x =&gt; new ArchiveTreeEntry(x)));
        return rootArchiveTreeEntries;
    }

    private static IEnumerable&lt;ArchiveDefinition&gt; GetChildren(
        IEnumerable&lt;ArchiveDefinition&gt; availableArchiveDefinitions,
        string parentId)
    {
        return availableArchiveDefinitions.Where(e =&gt; e.ParentId == parentId);
    }

    private static void HandleAvailableEntriesForGivenParent(
        List&lt;ArchiveDefinition&gt; availableArchiveDefinitions,
        ArchiveTreeEntry parent)
    {
        if (availableArchiveDefinitions.Count &gt; 0)
        {
            var children = GetChildren(availableArchiveDefinitions, parent.Id);
            AssignChildrenToParent(parent, children);
            RemoveAssignedItemsFromAvailabeEntries(availableArchiveDefinitions, parent.Id);
            foreach (var nextParent in parent.Children)
            {
                HandleAvailableEntriesForGivenParent(availableArchiveDefinitions, nextParent);
            }
        }
    }

    private static void RemoveAssignedItemsFromAvailabeEntries(
        List&lt;ArchiveDefinition&gt; availableArchiveDefinitions,
        string parentId)
    {
        availableArchiveDefinitions.RemoveAll(e =&gt; e.ParentId == parentId);
    }

    private static List&lt;ArchiveDefinition&gt; RemoveRootArchiveDefinitions(
        List&lt;ArchiveDefinition&gt; availableArchiveDefinitions)
    {
        var newEntries =
            availableArchiveDefinitions.Except(
                availableArchiveDefinitions.Where(e =&gt; e.TypeOfArchive == ArchiveType.Archive))
                .ToList();
        return newEntries;
    }
}
</code></pre>
    </div>