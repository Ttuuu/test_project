<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The initial approach is full of redundant <code>if</code> conditions for capturing float numbers and duplicated set of statements (<code>stack.append</code>, <code>for</code> loop, <code>del</code> ...) for all 4 arithmetic operations.</p>

<p>The whole idea is achievable with a single traversal facilitated by <a href="https://docs.python.org/3/library/operator.html" rel="noreferrer"><code>operator</code></a> (provides convenient equivalents of mathematical operations) and <a href="https://docs.python.org/3/library/ast.html?highlight=ast#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval</code></a> feature (to evaluate both <code>int</code> and <code>float</code> types):</p>

<pre><code>import operator
from ast import literal_eval

math_operators = {'+': operator.add, '-': operator.sub, 
                  '*': operator.mul, '/': operator.truediv}


def calc(expr):
    tokens = expr.split()
    res = []
    for t in tokens:
        if t in math_operators:
            res[-2:] = [math_operators[t](res[-2], res[-1])]
        else:
            res.append(literal_eval(t))

    return res[0] if res else 0
</code></pre>

<hr>

<p>Test cases:</p>

<pre><code>exp = '5 1 2 + 4 * + 3 -'
print(calc(exp))   # 14

exp = '5.5 10.6 -'
print(calc(exp))   # -5.1

exp = ''
print(calc(exp))   # 0
</code></pre>
    </div>