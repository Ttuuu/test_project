<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding your questions:</p>

<ol>
<li><p>I think the readability suffers mostly because of how the nesting
flips the order of the strings around, it doesn't feel particularly
nice to read it out of order, essentially.</p></li>
<li><p>The <code>Formatting</code> class could be
<a href="https://stackoverflow.com/questions/287871/print-in-terminal-with-colors">replaced by an existing library</a>
(there are also some ideas about possible DSLs there, like via the
new format strings in Python 3.6), but in the absence of that of
course constants are a good idea, perhaps in a bit less duplication
than you're using here, or perhaps while generating some of these
numbers.  In any case it's most likely write-once code, so I wouldn't
be worried too much about that.</p>

<p>Regarding colours, keep also in mind that some terminals support way
more than just sixteen colours!  Or none at all.  Using a (good)
library might go a long way to transparently support all of those.</p></li>
<li><p>That function has a lot of duplication, which usually to me means to
find a more succint phrasing.  However, in this case, wouldn't it be
more meaningful to have subcommands (like e.g. <code>git diff</code> etc.) to
distinguish between mutually exclusive choices?</p>

<p>N.b. <code>(x is not 'a' and x is not 'b')</code> should likely be
<code>x not in ('a', 'b', ...)</code> instead.</p></li>
<li><p>The Python style guide doesn't touch that topic as far as I can
tell.  Many programs I've seen have the <code>main</code> and
<code>if __name__ == "__main__": ...</code> block last and that's where I
personally put it too.  For the rest, well, put together what belongs
together, IMO.  If you constantly have to move around to find a
definition that's somewhat of a sign for me, but there's no absolute
right and often you'll still ask yourself where this or that helper
function should go.  So, if you read the program as it is now, from
top to bottom, or the other way round, can you easily follow the
structure of the story?  In which case it's fine, if not, perhaps you
should move something around.  As always, consistency is something
to strive for (that is, don't do it one way in the first file, then
completely switch it (without a good reason) in the next one).</p></li>
</ol>

<hr>

<p>Code wise:  Looks pretty clean, you've obviously spent a lot of time
making it look good, I can easily follow it, which is great!</p>

<ul>
<li><code>tty_supports_ansi</code>, the <code>if</code> isn't necessary, just
<code>return (hasattr...)</code>.</li>
<li>The <code>{k: v for k, v in ... if v}</code> thing happens thrice, just make
it a function at that point.</li>
<li>The prompt for <code>y[es]</code> happens multiple times, make that a function
too (e.g. <code>if prompt("Do you want to start the service?"): ...</code> or so).</li>
</ul>
    </div>