<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a rule I don't like to trigger exceptions, even controlled ones. One reason is that they are more expensive to handle, and as the name implies they should remain exceptions.</p>

<p>So rather than doing this:</p>

<pre><code>try:
        bond = open('/proc/net/bonding/%s' % iface).read()
except IOError:
        print "ERROR: Invalid interface %s\n" % iface
        usage()
</code></pre>

<p>I would have something like this:</p>

<pre><code>import sys, os

iface = 'bond0'
bond = ('/proc/net/bonding/%s' % iface)

if not os.path.exists(bond):
    print "ERROR: Invalid interface %s\n" % iface
    sys.exit(1)

# continue
</code></pre>

<p>NB: seeing that you are using Python 2.x I have tried to provide compatible code.</p>

<p>Rather than blindly trying to read a file that may not be there in the first place, I simply use <a href="https://docs.python.org/2/library/os.path.html#os.path.exists" rel="nofollow noreferrer">os.path</a> to ascertain its existence (could use the <code>isfile</code> function as well).</p>

<p>I also <strong>return an exit code</strong>, which could be useful if you will be calling this script from another bash script, then you might like to know if the output was as expected or if there is a possible error like a broken network link. Rather than just return 0 (success) or 1 (failure) you could adjust the value depending on the kind of error encountered. Then it's useful to have the <a href="https://tldp.org/LDP/abs/html/exitcodes.html" rel="nofollow noreferrer">special codes</a> in mind.</p>

<p><em>I see that you are already using <code>sys.exit(1)</code> in your code, which is excellent, but it is in the <code>usage</code> function, where it's the least useful. Consider returning an exit code in the other parts of the code including exceptions. One way of doing it would be to have a main <code>try catch</code> block with a <code>finally</code> so that an exit code is always returned, which could be 0 by default.</em></p>

<p>You can still have exception handling in this block though, because you might run into some permission issue, depending on the user and perhaps the OS. It's just that I would avoid raising exceptions for situations that are easily anticipated and tested.</p>

<hr>

<p>Consider <strong>logging exceptions</strong> and even console output or debugging information. A recent discussion on the topic: <a href="https://codereview.stackexchange.com/a/238459/219060">Custom exception handling function or logging library?</a></p>

<p>This is especially important for unattended scripts. In this case, it's probably less important if the script will always be run interactively. But it's good to have a trace on file when you are working in some tiny SSH or screen terminal session with a small buffer size and difficulty scrolling text.</p>

<hr>

<p>Regarding semi-constant variables like <code>/proc/net/bonding/</code> or <code>bond0</code> I try to regroup them together on top of the script. The paths and interface names may vary from an OS to another and porting code to another platform is easier when essential variable names are not <strong>scattered</strong> all over the place. Obviously, they should be defined only once and repetition is to be avoided absolutely. I develop scripts for servers that run on at least 3 different flavors of Linux and I sometimes have surprises...</p>

<hr>

<p>Regarding the code proper: the final line doing the <code>print</code> is quite hard to read. All that splitting is unnecessary and even unsafe. If the output of <code>/proc/net/bonding/bond0</code> changes, or the number of slaves is less than 2, your code could fail.</p>

<p>Ideally, you should have ready-to-use variables and just print them. All the processing, parsing, validation etc has to take place before.</p>

<p>Let's take this snippet as an example:</p>

<pre><code>    m = re.match('^Slave Interface: (.*)', line)
    if m:
            s = m.groups()[0]
            slaves += ', %s' % s
</code></pre>

<p>Your code iterates twice. At the first iteration the value of <code>slaves</code> is: <code>, ens3f0</code>. At the second iteration it is: <code>, ens3f0 up, ens3f1</code>. Note the leading comma.
It seems that you are not yet familiar with Python structures such as lists or dictionaries, so you are resorting to string manipulations techniques that are superfluous. 
Here how I would do it, using a simple <strong>list</strong>:</p>

<p>First add this somewhere in your code, for example before the <code>for</code> loop:</p>

<pre><code>slave_interfaces = []
</code></pre>

<p>We simply define an empty list. Then your code becomes:</p>

<pre><code>    m = re.match('^Slave Interface: (.*)', line)
    if m:
            slave_interfaces.append(m.group(1).strip()) 
</code></pre>

<p>When a match if found, the value is appended to the list, which means adding an element. Note the addition of <code>strip()</code> to <strong>trim whitespace</strong> that may surround the interface name.</p>

<p>The regular expression can not only match but <strong>capture</strong> as well. Since <code>m.group(1)</code> already contains the name of the interface you can use it. Now, at the first iteration the value of <code>slave_interfaces</code> is: <code>['ens3f0']</code>. At the second iteration it is: <code>['ens3f0', 'ens3f1']</code>. You have a <strong>list</strong> of two elements, and you can address each of them by index number, thus <code>slave_interfaces[0]</code> = <code>'ens3f0'</code> and <code>slave_interfaces[1]</code> = <code>'ens3f1'</code>. You can check the number of elements: <code>len(slave_interfaces)</code> will return 2. So you know in advance that using an index number greater then 1 will result in an error (IndexError: list index out of range).</p>

<p>Producing a comma-separated list is as easy as <strong>join</strong>ing:</p>

<pre><code>','.join(slave_interfaces)
</code></pre>

<p>=&gt; <code>'ens3f0,ens3f1'</code></p>

<hr>

<p>On a final note, for parsing arguments and if you have Python 2.7 at least, the <a href="https://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer">argparse library</a> provides more flexibility. Have a look at the <code>add_help</code> function too. When you develop more sophisticated scripts with multiple arguments that may be in no particular order, your way of doing it will not scale well.</p>
    </div>