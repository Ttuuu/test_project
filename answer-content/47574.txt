<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As soon as I see a <code>goto</code> I get nostalgia, and know that you haven't taken a step back from this program and considered a world without <code>goto</code> (java). There is always a way to avoid using a <code>goto</code>, and this is a rather simple one with multiple alternatives which don't kill your program flow.</p>

<p>I think the best one for your situation though is to only increment up when the <code>TryParse</code> is successful.</p>

<pre><code>for (int i = 0; i &lt; Numbers.Length;)
{
    Console.WriteLine("Input number {0}", i + 1);
    if (int.TryParse(Console.ReadLine(), out number))
        Numbers[i++] = number;
}
</code></pre>

<p>EDIT: Changed to add additional alternative that does not include i in the fail-success of the parse logic. </p>

<pre><code>for (int i = 0; i &lt; Numbers.Length; i++)
{
    for(bool done = false; !done;)
    {
        Console.WriteLine("Input number {0}", i + 1);
        done = int.TryParse(Console.ReadLine(), out number);
    }
    Numbers[i] = number;
}
</code></pre>

<p>Note: I used &lt; Numbers.Length, this way if you ever increase the size of the array, you can support more numbers without having to re-write this part.</p>

<hr>

<p>Next we can simplify some of your code with <code>linq</code>, which you should use any time you want to repeatedly do something to a list. Below, using <code>linq</code>, I query the list of numbers and I ask if all of them equal 0. </p>

<pre><code>if (Numbers.All(n =&gt; n == 0))
{
    Console.WriteLine(String.Join("+", Numbers) + " = 0");
    return;
}
</code></pre>

<p>Also note that I removed you setting <code>result = true</code>, because you were not using that since your were returning right away.</p>

<hr>

<p><strong>Naming convention</strong>: All of your method level variables should start with a lowercase letter, be <code>camelCase</code>, ie. <code>numbers</code> vs <code>Numbers</code></p>

<hr>

<p>Your program is a bit flawed. Technically just 0 is a subset of {0,1,2,3,4} however you appear to only care of subsets of 2 or more numbers.</p>

<hr>

<p>A good alternative to your current implementaiton would have been to create a recursive function which takes in <code>int[] remainingNumbers, int[] currentComposite</code>, and the method would simply loop over the remainingNumbers and making new composites to check on, each time you would want to check just the currentComposite to see if that is a valid set.</p>

<p>The way I would do it, would be to create a list of number arrays which hold every combination of the given numbers, then I would simply loop over that collection to determine which sets fit my conditions.</p>

<p>Here is some code I found online (specifically <a href="http://gparlakov.wordpress.com/2013/01/19/generate-all-possible-combinations-of-lenght-k-in-an-array123-n-of-lenght-n/">here</a>), because I did not want to make my own Combination generator. <strike>I'm going to post this code on CR, because I'd like to see someone take a stab at making it better.</strike></p>

<pre><code>static List&lt;List&lt;int&gt;&gt; Combinations(int[] array, int startingIndex = 0, int combinationLenght = 2)
{
    List&lt;List&lt;int&gt;&gt; combinations = new List&lt;List&lt;int&gt;&gt;();
    if (combinationLenght == 2)
    {
        int combinationsListIndex = 0;
        for (int arrayIndex = startingIndex; arrayIndex &lt; array.Length; arrayIndex++)
        {
            for (int i = arrayIndex + 1; i &lt; array.Length; i++)
            {
                combinations.Add(new List&lt;int&gt;());

                combinations[combinationsListIndex].Add(array[arrayIndex]);
                while (combinations[combinationsListIndex].Count &lt; combinationLenght)
                {
                    combinations[combinationsListIndex].Add(array[i]);
                }
                combinationsListIndex++;
            }
        }
        return combinations;
    }
    List&lt;List&lt;int&gt;&gt; combinationsofMore = new List&lt;List&lt;int&gt;&gt;();
    for (int i = startingIndex; i &lt; array.Length - combinationLenght + 1; i++)
    {
        combinations = Combinations(array, i + 1, combinationLenght - 1);

        for (int index = 0; index &lt; combinations.Count; index++)
            combinations[index].Insert(0, array[i]);

        for (int y = 0; y &lt; combinations.Count; y++)
            combinationsofMore.Add(combinations[y]);
    }
    return combinationsofMore;
}
</code></pre>

<p>Now just use some linq to only grab results from the Combinations function where the sum of the numbers in the list equates to 0. Foreach of them, print it to the console.</p>

<pre><code>foreach(var list in Combinations(Numbers).Where(list=&gt; list.Sum() == 0))
    Console.WriteLine(string.Join(" + ", list) + " = 0");
</code></pre>

<hr>

<p>I see that at the bottom of your code you are checking to see if all the values in Numbers are 0, and then printing a message, and returning. Why? You did this earlier, and had an early return, so if that was the case the code should never have made it here.</p>
    </div>