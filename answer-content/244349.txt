<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code Review</h1>
<p>Your code is a little hard to read.</p>
<p>You should have a blank line after the <code>solution</code> body, to separate it from the mainline code.</p>
<p>This code is hard to describe, document, and debug:</p>
<pre><code>l = map(int, input().split(' '))
print(solution(*l))
</code></pre>
<p>What is <code>l</code>?  How many arguments are there?  If the wrong number of arguments are given as input, the problem doesn't occur immediately in the first statement but rather when attempting to execute the second.</p>
<p>It would be significantly clearer to write:</p>
<pre><code>a, n = map(int, input().split())
print(solution(a, n))
</code></pre>
<p>Now we can see we expect two arguments to be given, and we have names for the arguments.  If too many or too few arguments are given, the first line will raise the exception, which should mean it will be easier to debug.</p>
<p>Note: I'm using <code>.split()</code> instead of <code>.split(' ')</code> so that it will split the string on any white space character, including tabs, and multiple white-space characters will be considered a single delimiter.  It is slightly friendlier.</p>
<p>Adding type hints and a docstring would be useful.  Also, a main guard should be used.</p>
<p>Improved code:</p>
<pre><code>import math

def solution(a: int, n: int) -&gt; int:
    """
    Jedi Challenge:

    Return the smallest positive integer such that
        a^i = 1 (mod n)
    Returns 0 if there is no such number

    Constraints:
        2 &lt;= a &lt; n &lt;= 10^9
    """

    if math.gcd(a, n) &gt; 1:
        return 0

    z = 1
    i = 1
    while True:
        z = z * a % n
        if z == 1:
            return i
        i += 1

if __name__ == '__main__':
    a, n = map(int, input().split())
    print(solution(a, n))
</code></pre>
<h1>Performance</h1>
<p>This is not really a programming challenge; it is a math challenge.</p>
<p>First, due to the modulo operation, <code>z = z * a % n</code> will only ever produce a value between <code>0</code> and <code>n-1</code>.  This means there are only <code>n</code> possible results at each iteration step.  However, if <code>0</code> is produced, each iteration step afterwards will only ever produce <code>0</code>, leaving <code>n-1</code> non-trivial results.</p>
<p>If the k-th iteration produces <code>1</code>, the code yields the result <code>k</code>.  But if iteration continued, since it has reached its initial starting point, it would produce the same sequence of values in a never ending cycle.</p>
<p>If you chose a different starting value, that did not appear in the above cycle, it would must have one of 3 fates.  It would either terminate at zero, create its own loop of unique values, or possibly merge into the existing sequence.</p>
<p>You have already determined that if <code>gcd(a, n) != 1</code> then the iteration sequence would eventually reach zero, without finding a solution.</p>
<p>In fact, if <code>n</code> is prime, then <span class="math-container">\$a^{n-1} \equiv 1 \mod n\$</span>, and therefore the iteration will produce the <code>1</code> after <code>n-1</code> iterations, and must have produced all of the possible values between <code>1</code> and <code>n-1</code>.</p>
<p>So, as one optimization, if you can determine <code>n</code> is prime, you could immediately output the answer <code>n-1</code>.  If not, then you could revert to doing the iterative calculations.</p>
<p>If <code>n</code> is not prime, you might want to look at the prime factorization of <code>n</code>, and see if you can determine a relation between it and the result.  (Hint: there is.)</p>
    </div>