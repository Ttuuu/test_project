<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>const bool Game::isColliding(...</code></p>

<p>This indicates that the returned type is <code>const</code>, and should not be modified by any part of your code. But it's not a reference, so it doesn't make sense. It should compile, but it's a little confusing. Removing that <code>const</code> is clearer.</p>

<p>see <a href="https://stackoverflow.com/questions/1443659/should-i-return-bool-or-const-bool">this SO question</a> for more information on that.</p>

<hr>

<p>Your parameters to <code>isColliding</code> should be <code>const</code> references:</p>

<pre><code>bool Game::isColliding(const sf::RectangleShape&amp; player, const sf::RectangleShape&amp; enemy) const
</code></pre>

<p>because you don't modify them, and references will prevent each object form being copied.</p>

<hr>

<p>You never use the <code>player</code> parameter that you pass to the <code>isColliding</code> function. <code>this-&gt;player</code> is not the same as <code>player</code> in this context. It seems like you want to check the <code>Game</code>'s current <code>player</code> object against collisions with arbitrary objects. You either</p>

<ol>
<li>Make the function static (so it doesn't rely on a particular <code>Game</code> state) and pass two arbitrary objects to be checked for collision, or</li>
<li>Change the function name to something that indicates it will only be used with the <code>player</code> object.</li>
</ol>

<p>One of:</p>

<pre><code>static bool Game::isColliding(const sf::RectangleShape&amp; a, const sf::RectangleShape&amp; b)
</code></pre>

<p>or</p>

<pre><code>bool Game::isPlayerColliding(const sf::RectangleShape&amp; other) const
</code></pre>

<hr>

<p>These <code>Vector2d</code> assignments can be made into <code>const</code> references to prevent copy construction.</p>

<pre><code>    const sf::Vector2f&amp; playerPosition = this-&gt;player.getPosition();
    const sf::Vector2f&amp; enemyPosition = this-&gt;enemy.getPosition();
</code></pre>
    </div>