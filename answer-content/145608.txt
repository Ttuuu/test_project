<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Bugs</h3>

<ol>
<li><p>There's an infinite loop in <code>solve</code>:</p>

<pre><code>&gt;&gt;&gt; get_truth_table('AB')
^C
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "cr145465.py", line 215, in get_truth_table
    answer = solve(valued_statement)
  File "cr145465.py", line 190, in solve
    valued_statement = simplify(valued_statement)
  File "cr145465.py", line 170, in simplify
    return str(eval_logic(valued_statement))
KeyboardInterrupt
</code></pre>

<p>The problem is here:</p>

<pre><code>while len(valued_statement) &gt; 1:
    valued_statement = simplify(valued_statement)
</code></pre>

<p>Of course the input <code>'AB'</code> is invalid, but I would expect to get a <code>SyntaxError</code> instead of an infinite loop.</p></li>
<li><p>Other inputs containing syntax errors result in exceptions that are hard to understand. For example:</p>

<pre><code>&gt;&gt;&gt; get_truth_table('')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "cr145465.py", line 206, in get_truth_table
    if statement[0] != '(':
IndexError: string index out of range
</code></pre>

<p>Another example:</p>

<pre><code>&gt;&gt;&gt; get_truth_table('~~A')
Traceback (most recent call last):
  File "cr145465.py", line 97, in eval_logic
    return int(boolean) # Return boolean as 0 or 1
UnboundLocalError: local variable 'boolean' referenced before assignment

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "cr145465.py", line 215, in get_truth_table
    answer = solve(valued_statement)
  File "cr145465.py", line 190, in solve
    valued_statement = simplify(valued_statement)
  File "cr145465.py", line 174, in simplify
    bool_string = str(eval_logic(string))
  File "cr145465.py", line 100, in eval_logic
    return int(string) # Return the value of the string itself
ValueError: invalid literal for int() with base 10: '~0'
</code></pre></li>
<li><p>Some incorrect inputs succeed but produce meaningless results:</p>

<pre><code>&gt;&gt;&gt; get_truth_table('7')
([[7]], False)
</code></pre>

<p>When invalid input is encountered, it is a good idea to raise a <code>SyntaxError</code> with an explanation of the problem.</p></li>
</ol>

<h3>2. Alternative approach</h3>

<p>I'm not going to review the code in any detail, because the approach taken here (repeated string substitution) is slow and fragile and hard to get good error messages out of.</p>

<p>So instead, I'm going to demonstrate the standard way to tackle this kind of problem. The idea is to combine three processing stages:</p>

<ol>
<li><p><a href="https://en.wikipedia.org/wiki/Lexical_analysis" rel="nofollow noreferrer">Tokenization</a>. In this stage the input string is turned into a sequence of tokens. For example, given this input:</p>

<pre><code>~(A ∧ B) ↔ (~A ∨ ~B)
</code></pre>

<p>the tokenizer might emit this sequence of tokens:</p>

<pre><code>'~', '(', 'A', '∧', 'B', ')', '↔', '(', '~', 'A', '∨', '~', 'B', ')', &lt;end of input&gt;
</code></pre></li>
<li><p><a href="https://en.wikipedia.org/wiki/Parsing" rel="nofollow noreferrer">Parsing</a>. In this stage the sequence of tokens is turned into a <a href="https://en.wikipedia.org/wiki/Parse_tree" rel="nofollow noreferrer">parse tree</a>, a data structure corresponding to the syntactic structure of the input. For example, given the input above, the parser might construct the following data structure:</p>

<pre><code>BinaryOp(
    left=UnaryOp(
        op=&lt;built-in function not_&gt;,
        operand=BinaryOp(
            left=Variable(name='A'),
            op=&lt;built-in function and_&gt;,
            right=Variable(name='B'))),
    op=&lt;built-in function eq&gt;,
    right=BinaryOp(
        left=UnaryOp(
            op=&lt;built-in function not_&gt;,
            operand=Variable(name='A')),
        op=&lt;built-in function or_&gt;,
        right=UnaryOp(
            op=&lt;built-in function not_&gt;,
            operand=Variable(name='B'))))
</code></pre></li>
<li><p>Expression evaluation. This stage takes a parse tree for an expression, together with an environment (a data structure mapping variables to their values), and returns the value of the expression.</p></li>
</ol>

<p>There are several good reasons to solve the problem using this approach:</p>

<ol>
<li><p>It's the standard approach, so other programmers will easily understand how it works.</p></li>
<li><p>It's efficient: each stage needs to pass over its input exactly once, thus avoiding the repeated string substitutions of the code in the post.</p></li>
<li><p>Splitting the work into steps with clearly defined inputs and outputs makes it easier to test.</p></li>
<li><p>The approach extends to more complicated applications, such as interpretation of programming languages.</p></li>
</ol>

<h3>3. Tokenization</h3>

<p>Tokenization is often implemented using a <a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow noreferrer">finite-state machine</a> but it's also often convenient to use a regular expression.</p>

<pre><code>import re

# Regular expression matching optional whitespace followed by a token
# (if group 1 matches) or an error (if group 2 matches).
TOKEN_RE = re.compile(r'\s*(?:([A-Za-z01()~∧∨→↔])|(\S))')

# Special token indicating the end of the input string.
TOKEN_END = '&lt;end of input&gt;'

def tokenize(s):
    """Generate tokens from the string s, followed by TOKEN_END."""
    for match in TOKEN_RE.finditer(s):
        token, error = match.groups()
        if token:
            yield token
        else:
            raise SyntaxError("Unexpected character {!r}".format(error))
    yield TOKEN_END
</code></pre>

<h3>4. Parsing</h3>

<p>Before you can write a parser, you need to make a <a href="https://en.wikipedia.org/wiki/Formal_grammar" rel="nofollow noreferrer">formal grammar</a>. This is probably the most difficult bit of the whole thing. Here's the grammar that I'm going to use, written in <a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form" rel="nofollow noreferrer">Backus–Naur form</a>:</p>

<ol>
<li><p>〈Variable〉 ::= "<code>A</code>" | "<code>B</code>" | … | "<code>Z</code>" | "<code>a</code>" | "<code>b</code>" | ... | "<code>z</code>"</p></li>
<li><p>〈Constant〉 ::= "<code>0</code>" | "<code>1</code>"</p></li>
<li><p>〈Term〉 ::= 〈Variable〉 | 〈Constant〉 | "<code>(</code>" 〈Disjunction〉 "<code>)</code>"</p></li>
<li><p>〈UnaryExpr〉 ::= "<code>~</code>" 〈UnaryExpr〉 | 〈Term〉</p></li>
<li><p>〈Implication〉 ::= 〈UnaryExpr〉 (("<code>→</code>" | "<code>↔</code>") 〈Implication〉)?</p></li>
<li><p>〈Conjunction〉 ::= 〈Implication〉 ("<code>∧</code>" 〈Conjunction〉)?</p></li>
<li><p>〈Disjunction〉 ::= 〈Conjunction〉 ("<code>∨</code>" 〈Disjunction〉)?</p></li>
</ol>

<p>In order to construct the parse tree, we'll need data structures for each kind of node in the tree, most easily defined using <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a>:</p>

<pre><code>from collections import namedtuple

Constant = namedtuple('Constant', 'value')
Variable = namedtuple('Variable', 'name')
UnaryOp = namedtuple('UnaryOp', 'op operand')
BinaryOp = namedtuple('BinaryOp', 'left op right')
</code></pre>

<p>There are lots of different techniques for writing parsers. I could use a parser generator like <a href="http://pythonhosted.org/pyparsing/" rel="nofollow noreferrer">pyparsing</a>, that constructs the parser from a representation of the formal grammar, but I think it's more illustrative to write a <a href="https://en.wikipedia.org/wiki/Recursive_descent_parser" rel="nofollow noreferrer">recursive descent parser</a> by hand.</p>

<p>We'll start with some global constants:</p>

<pre><code>import operator
from string import ascii_lowercase, ascii_uppercase

# Tokens representing Boolean constants (0=False, 1=True).
CONSTANTS = '01'

# Tokens representing variables.
VARIABLES = set(ascii_lowercase) | set(ascii_uppercase)

# Map from unary operator to function implementing it.
UNARY_OPERATORS = {
    '~': operator.not_,
}

# Map from binary operator to function implementing it.
BINARY_OPERATORS = {
    '∧': operator.and_,
    '∨': operator.or_,
    '→': lambda a, b: not a or b,
    '↔': operator.eq,
}
</code></pre>

<p>Note that I've used the built-in functions <a href="https://docs.python.org/3/library/operator.html#operator.eq" rel="nofollow noreferrer"><code>operator.eq</code></a>, <a href="https://docs.python.org/3/library/operator.html#operator.and_" rel="nofollow noreferrer"><code>operator.and_</code></a>, <a href="https://docs.python.org/3/library/operator.html#operator.or_" rel="nofollow noreferrer"><code>operator.or_</code></a>, and <a href="https://docs.python.org/3/library/operator.html#operator.not_" rel="nofollow noreferrer"><code>operator.not_</code></a>, instead of <code>biconditional</code>, <code>and_func</code>, <code>or_func</code>, and <code>negate</code> respectively.</p>

<p>Now for the recursive descent parser:</p>

<pre><code>def parse(s):
    """Parse s as a Boolean expression and return the parse tree."""
    tokens = tokenize(s)        # Stream of tokens.
    token = next(tokens)        # The current token.

    def error(expected):
        # Current token failed to match, so raise syntax error.
        raise SyntaxError("Expected {} but found {!r}"
                          .format(expected, token))

    def match(valid_tokens):
        # If the current token is found in valid_tokens, consume it
        # and return True. Otherwise, return False.
        nonlocal token
        if token in valid_tokens:
            token = next(tokens)
            return True
        else:
            return False

    def term():
        # Parse a &lt;Term&gt; starting at the current token.
        t = token
        if match(VARIABLES):
            return Variable(name=t)
        elif match(CONSTANTS):
            return Constant(value=(t == '1'))
        elif match('('):
            tree = disjunction()
            if match(')'):
                return tree
            else:
                error("')'")
        else:
            error("term")

    def unary_expr():
        # Parse a &lt;UnaryExpr&gt; starting at the current token.
        t = token
        if match('~'):
            operand = unary_expr()
            return UnaryOp(op=UNARY_OPERATORS[t], operand=operand)
        else:
            return term()

    def binary_expr(parse_left, valid_operators, parse_right):
        # Parse a binary expression starting at the current token.
        # Call parse_left to parse the left operand; the operator must
        # be found in valid_operators; call parse_right to parse the
        # right operand.
        left = parse_left()
        t = token
        if match(valid_operators):
            right = parse_right()
            return BinaryOp(left=left, op=BINARY_OPERATORS[t], right=right)
        else:
            return left

    def implication():
        # Parse an &lt;Implication&gt; starting at the current token.
        return binary_expr(unary_expr, '→↔', implication)

    def conjunction():
        # Parse a &lt;Conjunction&gt; starting at the current token.
        return binary_expr(implication, '∧', conjunction)

    def disjunction():
        # Parse a &lt;Disjunction&gt; starting at the current token.
        return binary_expr(conjunction, '∨', disjunction)

    tree = disjunction()
    if token != TOKEN_END:
        error("end of input")
    return tree
</code></pre>

<p>Let's try it:</p>

<pre><code>&gt;&gt;&gt; parse('~(A ∨ B) ↔ (~A ∧ ~B)')
BinaryOp(left=UnaryOp(op=&lt;built-in function not_&gt;, operand=BinaryOp(left=Variable(name='A'), op=&lt;built-in function or_&gt;, right=Variable(name='B'))), op=&lt;built-in function eq&gt;, right=BinaryOp(left=UnaryOp(op=&lt;built-in function not_&gt;, operand=Variable(name='A')), op=&lt;built-in function and_&gt;, right=UnaryOp(op=&lt;built-in function not_&gt;, operand=Variable(name='B'))))
</code></pre>

<h3>5. Evaluation</h3>

<p>Evaluation of a parse tree can be done by recursively evaluating the subtrees and then combining the results:</p>

<pre><code>def evaluate(tree, env):
    """Evaluate the expression in the parse tree in the context of an
    environment mapping variable names to their values.

    """
    if isinstance(tree, Constant):
        return tree.value
    elif isinstance(tree, Variable):
        return env[tree.name]
    elif isinstance(tree, UnaryOp):
        return tree.op(evaluate(tree.operand, env))
    elif isinstance(tree, BinaryOp):
        return tree.op(evaluate(tree.left, env), evaluate(tree.right, env))
    else:
        raise TypeError("Expected tree, found {!r}".format(type(tree)))
</code></pre>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; evaluate(parse('~A ∧ B'), dict(A=True, B=True))
False
</code></pre>

<h3>6. Truth table</h3>

<p>It should be clear now how to build the truth table for an expression using the new approach:</p>

<ol>
<li><p>Call <code>parse</code> to parse the expression, getting a parse tree.</p></li>
<li><p>Compute the set of variables in the tree. (This step will follow the same kind of implementation pattern as <code>evaluate</code> above.)</p></li>
<li><p>Iterate over the rows of the truth table, for example using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>.</p></li>
<li><p>For each row, build a dictionary mapping each variable to its value in the row, and then call <code>evaluate</code> to get the result for the row.</p></li>
</ol>
    </div>