<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unicode - nice</h1>
<p>I see you directly use Unicode. I like that.</p>
<h1>Incorrect solution</h1>
<p>Your program is actually NOT an implementation of Game of Life, because your universe is finite. The universe size is limited to 20×20, which is very tiny. A good implementation of Game of Life would feature a Universe of size 2³²×2³² which is still finite but feels infinite for practical purposes. Think of a different data structure. Instead of managing the entire space-time continuum of the Game of Life universe, manage only the matter. Stop caring about dead cells, care about life cells only.</p>
<h1>Test</h1>
<p>Your program lacks testing, which I can see from the next point.</p>
<h1>Do not use <code>static</code> for mutable fields</h1>
<p>You have <code>static</code> variables which are not <code>final</code>, which means that your program has only one shared mutable state. Holding mutable state is one of the things for which OO languages like Java provide objects.</p>
<h1>Use the power of <code>enum</code></h1>
<p><code>enum</code>s aren't mere enumarations of constants. In other languages they are. In Java, enums are special classes, which describe a predefined, finite, immutable set of objects (as opposed to a normal class which describes a set of objects which is not predefined, infinite and mutable).
In this case you could give <code>enum Cell</code> a <code>toString()</code> method which would return the cell symbol. Then you would not need a <code>switch</code> in <code>printBoard()</code>.</p>
<p>In general, <code>switch</code> statements (and <code>if</code> statements that are <code>switch</code> statements in disguise) indicate a lack of OO-design. Often, they can be replaced with polymorphism.</p>
<p>You could even create an abstract method in <code>Cell</code> which generates the next cell based on the number of life neighbors and implemented it differently for alive and dead cells.</p>
<h1>Separate the construction of output from the actual output</h1>
<p>Method <code>printBoard()</code> is doing two things and thus difficult to test (and a bit inefficient):</p>
<ul>
<li>It constructs the output.</li>
<li>It prints the output.</li>
</ul>
<p>Consider separating these two things. Create one method which constructs the output, maybe using a <code>StringBuilder</code>. And the other method would only print the output. It will give you two benefits:</p>
<ul>
<li>The program will be faster (which probably is no concern here).</li>
<li>The program will be easier to test.</li>
</ul>
<h1>Use the same format for input as for output</h1>
<p>Currently, you use coordinates for input and a Unicode-Art representation of the universe for output.
That means the program's output cannot be fed into the program as input again.
Imagine how a test could look like if the output can be fed back to the program as input.</p>
<h2>JUnit Example</h2>
<pre><code>@Test
public void testBlinker() {
    final Universe blinkerFrame1 = Universe.parse(".*\n.*\n.*");
    final Universe blinkerFrame2 = Universe.parse("...\n***");
    assertEquals(blinkerFrame2, blinkerFrame1.iterate());
    assertEquals(blinkerFrame1, blinkerFrame2.iterate());
}
</code></pre>
<h2>Gherkin / Cucumber Example</h2>
<pre><code>Given the following Universe:
  """
  .*.
  .*.
  .*.
  """
When iterating it once,
Then it MUST be equal to this:
  """
  ...
  ***
  ...
  """
</code></pre>
<h1>Long <code>main()</code> method</h1>
<p>The <code>main()</code> method is quite long. You could split it into a method that reads the Universe from the input, and a method which loops for the generations.
The method which loops for the generations should then also be split.</p>
<p>Use braces as an opportunity to extract.</p>
<h1>Links</h1>
<p>Here's what I consider beautiful implementations of Game of Life:</p>
<ul>
<li>Java: <a href="https://github.com/nelkinda/gameoflife-java" rel="nofollow noreferrer">https://github.com/nelkinda/gameoflife-java</a></li>
<li>Kotlin: <a href="https://github.com/nelkinda/gameoflife-kotlin" rel="nofollow noreferrer">https://github.com/nelkinda/gameoflife-kotlin</a></li>
</ul>
    </div>