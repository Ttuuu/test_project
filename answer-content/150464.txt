<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your own words: <em>"I totally understand that my method is not the most efficient solution."</em> In a sense, that's the summary of a code review for this problem.</p>

<p>The basic issue in your code is that you have ignored two of the clues in the question:</p>

<ul>
<li><em>"Flux chains require perfect binary trees"</em></li>
<li><em>"she performed a post-order traversal"</em></li>
</ul>

<p>These two clues are begging you to implement a recursive post-order traversal of a fixed depth tree.</p>

<p>If you know a node is missing from the flux chain, then you know that your traversal "up" from that node in a correct tree, will take you to the parent.</p>

<p>A complication in this problem is that you don't know the order of the disconnected flux chain nodes in the input, so you have to "search" for them in the output, but.... with a small trick, you can turn the whole problem in to a single (post-order) traversal of the ideal (correct) flux chain, and a small lookup table for the answer indices.</p>

<p>The above solution would be an \$O(n)\$ time complexity solution, and would use a small amount of memory proportional to the count of values in <code>q</code>.</p>

<p>Now, that's the solution I think they would expect in a good case.... but I suspect that there's a mathematical solution that is much faster.... I am still figuring it out... but, in the mean time, consider this code that does a post-order traversal, and identifies key nodes in the flux chain. It then uses a trick in the return value of the recursive function (negative values for missing links) and a <code>HashMap</code> to identify the keys, and their respective indices in the answer array. This is not my most pretty code, but it serves to show you the post-order traversal with the index lookup:</p>

<pre><code>public static final int[] answer(int height, int[] nodes) {
    int[] ans = new int[nodes.length];
    Map&lt;Integer, Integer&gt; indices = new HashMap&lt;&gt;();
    IntStream.range(0, nodes.length).forEachOrdered(i -&gt; indices.put(nodes[i], i));
    int next = postOrder(height, 0, 0, indices, ans);
    if (next &lt; 0) {
        int i = indices.get(-next);
        ans[i] = -1;
    }
    return ans;
}

private static int postOrder(int limit, int depth, int next, Map&lt;Integer, Integer&gt; indices, int[] ans) {
    if (depth == limit) {
        return next;
    }
    // left
    int left = postOrder(limit, depth + 1, next, indices, ans);
    next = left &lt; 0 ? -left : left;
    int right = postOrder(limit, depth + 1, next, indices, ans);
    next = right &lt; 0 ? -right : right;

    int me = next + 1;

    if (left &lt; 0) {
        int i = indices.get(-left);
        ans[i] = me;
    }
    if (right &lt; 0) {
        int i = indices.get(-right);
        ans[i] = me;
    }

    return indices.containsKey(me) ? -me : me;

}
</code></pre>

<p>You can see it running the test-cases in ideone: <a href="https://ideone.com/J0lMrf">https://ideone.com/J0lMrf</a></p>

<p><strong>Update:</strong></p>

<p>I worked out a better solution using a binary search mechanism for locating the parent of a referenced link in the Flux chain.</p>

<p>It is a bit hard to describe in words, but if you inspect the post-ordered tree, you can predict which branch (left or right) to descend to find a node. You can also compute the size of the sub-trees to any node, and thus compute that node's label.</p>

<p>Expressed in code, you can compute the parent of any link in a tree of a given height, with the code:</p>

<pre><code>private static final int parent(int height, int node) {
    int size = (int)Math.pow(2, height) - 1;

    if (node == size) {
        return -1;
    }

    int before = 0;
    do {
        if (size == 0) {
            throw new IllegalStateException();
        }
        // size is always odd, and halving it integer-division is also odd.
        size &gt;&gt;&gt;= 1;
        int left = before + size;
        int right = left + size;
        int me = right + 1;
        if (left == node || right == node) {
            return me;
        }
        if (node &gt; left) {
            // nodes to the right have the left as offset.
            before = left;
        }
    } while (true);

}
</code></pre>

<p>This makes the computation for any 1 node an \$O(\log{h})\$ operation... and, if there are <code>q</code> nodes to locate, the overall result would be an \$O(q \log{h})\$ one.</p>

<p>The "final" solution would be:</p>

<pre><code>public static final int[] answerToo(int height, int[] nodes) {
    return IntStream.of(nodes).map(n -&gt; parent(height, n)).toArray();
}
</code></pre>

<p>I have combined this with the earlier solution, and the result is in ideone too: <a href="https://ideone.com/qiwPtR">https://ideone.com/qiwPtR</a></p>
    </div>