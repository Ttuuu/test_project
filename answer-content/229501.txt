<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review!</p>

<h1>Algorithm</h1>

<p>Since you specifically asked how to optimize the code, I'll put this part first.  You are using a divide-and-conquer algorithm.  This algorithm is <span class="math-container">\$\operatorname{\Theta}(n \log n)\$</span>.  There's a better <span class="math-container">\$\Theta(n)\$</span> algorithm which works like this: go through the array, from index <code>i = [0, n)</code>.  Keep track of two variables:</p>

<ul>
<li><p><code>max_sum</code>: maximum subarray sum so far.</p></li>
<li><p><code>max_end_sum</code>: maximum subarray sum ending at index <code>i</code>.</p></li>
</ul>

<p>Initially, both can be considered to be "negative infinity".  At each element, these variables can be updated in constant time with the following formulas:</p>

<pre><code>new_max_sum     = max{max_sum, array[i], max_end_sum + array[i]}
new_max_end_sum = max{array[i], max_end_sum + array[i]}
</code></pre>

<h1>Readability</h1>

<p>Code is read more than written.  Here are some tips to improve readability:</p>

<ul>
<li><p>Always put a space after a comma and around binary operators.  Instead of</p>

<pre><code>int c=MaxAcrossSubArray(arr,l,mid,r,sC,eC);
</code></pre>

<p>Use</p>

<pre><code>int c = MaxAcrossSubArray(arr, l, mid, r, sC, eC);
</code></pre></li>
<li><p>Always put the opening and closing braces of a function body on separate lines.  Instead of</p>

<pre><code>int Max(int a,int b){return (a&gt;b)?a:b;}
</code></pre>

<p>Use</p>

<pre><code>int Max(int a, int b)
{
    return (a &gt; b) ? a : b;
}
</code></pre></li>
<li><p>Put a space after control keywords like <code>for</code> or <code>if</code>.  This helps visually distinguish them from functions and operators (<code>sizeof</code>, <code>typeid</code>, etc.).</p></li>
<li><p>Be consistent with indentation.  Bad example:</p>

<pre><code>if(Maximum==a)
{
    Start=sA;
    End=eA;
    return a;
}

else if(Maximum==b)
    {
        Start=sB;
        End=eB;
        return b;
    }
</code></pre></li>
</ul>

<h1>The standard library facilities</h1>

<p>The function <code>Max</code> is already available in the standard library as <code>std::max</code>.  For example:</p>

<pre><code>std::max(42, 420) == 420
std::max({42, 420, 4200}) == 4200
</code></pre>

<p>(You may noticed that you need to use braces if the number of arguments is not exactly two.)</p>

<p>The following loop:</p>

<pre><code>for(int i=Start;i&lt;=End;++i)
{

    cout&lt;&lt;arr[i]&lt;&lt;"\t";
}
</code></pre>

<p>can be replaced by a call to <code>std::copy</code> with <code>std::ostream_iterator</code>.</p>

<p>In C++, raw C arrays are not recommended.  You are advised to use standard library containers like <code>std::array</code> instead.  Indexes should be of type <code>std::size_t</code> or <code>std::ptrdiff_t</code> instead of <code>int</code>.</p>

<p>Here's how the code may look like in modern C++, with iterators and tuples: (just a rough idea, not particularly optimized)</p>

<pre><code>template &lt;
    typename ForwardIt,
    typename Value,
    typename BinaryOp = std::plus&lt;&gt;,
    typename Compare = std::less&lt;&gt;
    &gt;
std::tuple&lt;ForwardIt, ForwardIt, Value&gt;
maximum_subarray(ForwardIt first, ForwardIt last, Value init,
                 BinaryOp combine = {}, Compare compare = {})
{
    auto max_sum = std::make_tuple(first, first, init);
    auto max_end_sum = std::make_tuple(first, init);

    for (; first != last; ++first) {
        auto&amp; [it, value] = max_end_sum;
        value = combine(value, *first);
        if (compare(value, *first)) {
            it = first;
            value = *first;
        }
        if (compare(std::get&lt;2&gt;(max_sum), value)) {
            max_sum = {it, std::next(first), value};
        }
    }

    return max_sum;
}

template &lt;typename ForwardIt&gt;
auto maximum_subarray(ForwardIt first, ForwardIt last)
{
    using Value = typename std::iterator_traits&lt;ForwardIt&gt;::value_type;
    return maximum_subarray(first, last, Value());
}
</code></pre>
    </div>