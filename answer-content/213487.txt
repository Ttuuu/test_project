<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>One caveat: the <code>array&lt;T, N&gt;::swap</code> member function's <code>noexcept</code> specification is too complicated, and I chose not to reimplement the <code>std::is_nothrow_swappable</code> trait which is not available prior to C++17.</p>
</blockquote>

<p>If a type trait doesn't exist, write your own. C++11/14 overlooked a lot of library features that didn't require language support when they were added in 17. <code>is_nothrow_swappable</code> is one of those library features (is also 3 simple structs to test).</p>

<blockquote>
  <p>I used cppreference as a reference. I did not check everything, though, and there may be nonconforming stuff or stuff taken from C++17. Feel free to tell me :)</p>
</blockquote>

<p>You should use the C++14 standard or a draft version close to the final C++14 standard. <a href="https://timsong-cpp.github.io/cppwp/n4140/array" rel="nofollow noreferrer">N4140</a> was the first draft after C++14 was published.</p>

<hr>

<pre><code>        void error() const
        {
            throw std::out_of_range{ "array out of range" };
        }
</code></pre>

<p>Your function could be better named here. I'd even consider generalizing it to take any <code>const char*</code> message and make it a free function.</p>

<hr>

<pre><code>        constexpr bool empty() const noexcept
        {
            return N == 0;
        }
</code></pre>

<p>Since you specialize the case where <code>N</code> is <span class="math-container">\$0\$</span>, this function will always return false.</p>

<hr>
    </div>