<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of notes:</p>
<ul>
<li><p><code>expect</code> is an extension of Tcl, so you can use any Tcl command: <a href="http://www.tcl-lang.org/man/tcl8.6/TclCmd/contents.htm" rel="nofollow noreferrer">http://www.tcl-lang.org/man/tcl8.6/TclCmd/contents.htm</a></p>
<ul>
<li>specifically, you could write
<pre><code>lassign $argv user server
</code></pre>
which is arguably a bit less readable, but is only one command.</li>
</ul>
</li>
<li><p>You can speed up the timeouts: the default is 10 seconds, and you probably don't want to wait for 20 seconds to get the final exit status:</p>
<pre><code>set timeout 1   ;# in seconds
</code></pre>
</li>
<li><p>you never reset the <code>rc</code> variable, and the default exit status is zero already, so you can remove <code>set rc 0</code> and <code>exit $rc</code></p>
</li>
<li><p>expect is not bash: you don't need to quote all the variables.</p>
</li>
<li><p>you don't need to reset <code>log_user</code> just before exiting the script.</p>
</li>
<li><p>expect code written in this style can get pretty deeply nested: The last pattern in an <code>expect</code> command does not <em>need</em> an action block</p>
<pre><code>expect {
  $pwd_prompt  { exit 1 }
  eof          { exit 2 }
  timeout      { exit 3 }
  $prompt     
}
send "hostname\r"
expect {
  *$server*    { exit 0 }
  eof          { exit 4 }
  timeout      { exit 5 }
}
</code></pre>
<p>If <code>$prompt</code> is seen, then that <code>expect</code> command ends, and the script continues with <code>send</code></p>
</li>
</ul>
    </div>