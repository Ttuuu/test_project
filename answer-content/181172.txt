<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>editGrid()</code></h1>

<h3>version 1:</h3>

<p>In <code>editGrid()</code> whether the <code>player</code> is worth <em>X</em> or <em>O</em>, you are taking the same actions, and you find yourself with duplicate code. The truth is that you do not even need to test the value of the <code>player</code> variable inside this function.   </p>

<p>By accepting this premise and respecting the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> principle you are already able to get rid of half of its code:</p>

<pre><code>def editGrid(grid, selectedRow, selectedColumn, player):
    row = grid[selectedRow - 1]
    #Determine what to do based on the column selected.
    if selectedColumn == 1:
        #Check to see if a player is in the spot selected.
        if row[selectedColumn] == " O " or row[selectedColumn] == " X ":
            print("\nA player is already there.\n")
        else:
            row[selectedColumn] = player
    elif selectedColumn == 2:
        if row[selectedColumn + 1] == " O " or row[selectedColumn + 1] == " X ":
            print("\nA player is already there.\n")
        else:
            row[selectedColumn + 1] = player
    elif selectedColumn == 3:
        if row[selectedColumn + 2] == " O " or row[selectedColumn + 2] == " X ":
            print("\nA player is already there.\n")
        else:
            row[selectedColumn + 2] = player
</code></pre>

<h3>version 2:</h3>

<p>Now things get clear and we can refactor the above code even deeper and cleaner: You can easily notice that <code>row[selectedColumn + something]</code> is calculated based on <code>selectedColumn - 1</code> for the three cases (possible values) of <code>selectedColumn</code>. This means you can easily refactor version 1 above to this shorter version:</p>

<pre><code>def editGrid(grid, selectedRow, selectedColumn, player):
    row = grid[selectedRow - 1]
    if row[2 * selectedColumn - 1] in [" X ", " 0 "]:
        print("\nA player is already there.\n")
    else:
        row[2 * selectedColumn - 1] = player
</code></pre>

<h1><code>getColumn()</code></h1>

<h3>Minor error</h3>

<p>There is a minor error in the message you display to the user: the user has to type a column value, not a row. </p>

<h3>Improvement</h3>

<p>The <code>try</code> block contains too much code compared to the rest of the function. This is in contradiction to the good practice where we should minimize the <code>try</code> block at maximum, deal with the exception in <code>except</code>, and then leave the rest of trash to the <code>else</code> statement if needed. </p>

<p>This function suffers also from duplicate code which you can easily get rid of if you respect the previous advise:</p>

<pre><code>def getColumn():
    while True:
        try:
            column = int(input("Pick a column, (1, 2, 3): "))           
        except ValueError:
            print("You typed a non integer value. Try again.")
        else:
           if  1 &lt;= column &lt;= 3:
               return column
           else:
               print("The integer value must be between 1 and 3. Try again.")
</code></pre>

<p>Note how I customized the error messages a little better.</p>

<p>Now, what if the user aims to exit your application in the middle of <code>getColumn()</code> execution? The <kbd>Ctrl</kbd> + <kbd>C</kbd> natural reflex spits out an exception instead of a smooth <em>Good bye!</em>. Let us deal with it:</p>

<pre><code>def getColumn():
    while True:
        try:
            column = int(input("Pick a column, (1, 2, 3): "))           
        except ValueError:
            print("You typed a non integer value. Try again.")
        except KeyboardInterrupt:
            print("\nThanks... good bye!")
            quit(0)
        else:
           if  1 &lt;= column &lt;= 3:
               return column
           else:
               print("The integer value must be between 1 and 3. Try again.")
</code></pre>

<h1><code>getRow()</code></h1>

<p>With the same steps as the ones for <code>getColumn()</code> you can land on this version:</p>

<pre><code>def getRow():
    while True:
        try:
            row = int(input("Pick a row, (1, 2, 3): "))           
        except ValueError:
            print("You typed a non integer value. Try again.")
        except KeyboardInterrupt:
            print("\nThanks... good bye!")
            quit(0)
        else:
           if  1 &lt;= row &lt;= 3:
               return row
           else:
               print("The integer value must be between 1 and 3. Try again.")
</code></pre>

<h1>Refactoring <code>getColumn()</code> and <code>getRow()</code></h1>

<p>You can easily notice that the only difference between <code>getRow()</code> and <code>getColumn()</code> are the functions' names. I mean you duplicate the code and violate the DRY principle.</p>

<p>One way to fix this issue is to get both inputs from a unique function we can call <code>get_row_and_column()</code>. This function returns a tuple where the first element corresponds to the row, and the second one to the column typed by the user:</p>

<pre><code>def get_row_and_column():
    while True:
        try:
            row = int(input('row (between 1 and 3): '))
            column = int(input('column (between 1 and 3): '))
        except ValueError:
            print("You typed a non integer value. Try again.")
        except KeyboardInterrupt:
            print("\nThanks... good bye!")
            quit(0)
        else:  
           res = all(1 &lt;= i &lt;= 3 for i in (row, column)) 
           if res:
               return row, column
           else:
               print("The integer value must be between 1 and 3. Try again.")
</code></pre>

<p>Now in your <code>main()</code> function, replace <code>getRow()</code> calls by <code>get_row_and_column()[0]</code>, and <code>getColumn()</code> calls by <code>get_row_and_column()[1]</code></p>

<h1><code>checkWinner()</code></h1>

<p>The previous answer gave you already a good improvement. My aim is not to provide better than that but just to help you with some things so that you will not re-do them in the future, hopefully.</p>

<p>The first observation is that the lines of this function's body are unnecessarily long.  You can replace those lines by shorter ones:</p>

<pre><code>def checkWinner(grid, player):
    if grid[0][1] == grid[0][3] == grid[0][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[1][1] ==  grid[1][3] == grid[1][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[2][1] == grid[2][3] ==  grid[2][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][1] ==  grid[1][3] == grid[2][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][3] == grid[1][3] == grid[2][3] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][5] ==  grid[1][5] ==  grid[2][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][1] ==  grid[1][3] == grid[2][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][5] == grid[1][3] ==  grid[2][1] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][1] == grid[1][1] ==  grid[2][1] == player:
        print("\n" + player + "wins!")
        return True
    else:
        return False
</code></pre>

<p>And without going deeper, you can ever refactor the 3 first conditions:</p>

<pre><code>def checkWinner(grid, player):
    for i in range(0, 3):
       if grid[i][1] == grid[i][3] == grid[i][5] == player:
           print("\n" + player + "wins!")
           return True    
    if grid[0][1] ==  grid[1][3] == grid[2][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][3] == grid[1][3] ==  grid[2][3] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][5] == grid[1][5] == grid[2][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][1] == grid[1][3] ==  grid[2][5] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][5] == grid[1][3] == grid[2][1] == player:
        print("\n" + player + "wins!")
        return True
    elif grid[0][1] == grid[1][1] ==  grid[2][1] == player:
        print("\n" + player + "wins!")
        return True
    else:
        return False
</code></pre>

<h2>Additional notes</h2>

<p>Last but not the least, these notes should be cared about when coding in Python:</p>

<ol>
<li>Lot of your functions and variables follow the camelCase scheme. In Python, we rather adopt the snake_case way of writing. This means functions <code>editGrid()</code> and <code>drawGrid()</code> become <code>edit_grid()</code> and <code>draw_grid()</code> respectively. The same thing goes for variables like <code>selectedColumn</code> and  <code>selectRaw</code> which should be written <code>selected_column</code> and <code>select_raw</code> respectively. You may refer to the <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">naming conventions</a> highlighted in <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>.</li>
<li>IMHO, the whole of your comments should be removed because they just describe what is already obvious through the instructions.</li>
<li>There are a little more improvements to perform on the <code>main()</code> function, but for now I am too lazy to do them. Maybe someone could continue through a new answer.</li>
</ol>
    </div>