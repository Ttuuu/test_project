<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with <code>Colors</code> class.</p>
<ul>
<li>It's not a bad idea to add [<a href="https://docs.unity3d.com/ScriptReference/DisallowMultipleComponent.html" rel="nofollow noreferrer">DisallowMultipleComponent</a>] attribute to a class if you're not planning to add this component multiple times to the same gameobject.</li>
</ul>
<hr>
<ul>
<li>Public fields are considered a bad practice. They are used in tutorials to keep code as simple as possible only. You should use <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties" rel="nofollow noreferrer">properties</a> instead. But there is a problem: properties are not displayed in the inspector.</li>
</ul>
<p>The solution is to use public properties with private fields:</p>
<pre><code>[SerializeField] // Attribute to show private field in the inspector.
private List&lt;GameObject&gt; backgrounds;
public List&lt;GameObject&gt; Backgrounds =&gt; backgrounds; // Auto-property with get-only access.
</code></pre>
<p>To improve the piece of code even more, use property with <code>IEnumerable</code> instead of <code>List</code>: now data is nicely protected inside the object and there is no way to accidentally break the list or modify it from external classes. Usually you want to protect data as much as possible to reduce potential bug count in the future - public fields does not provide such encapsulation.</p>
<hr>
<ul>
<li><code>constbg</code> name is not very descriptive.</li>
</ul>
<p>I'd recommend not to be afraid to give long names to variables (although someone might disagree):</p>
<pre><code>// Property with get and set access and descriptive name
public bool IsConstantBackground { get; set; } 
</code></pre>
<p>The final version could look like this:</p>
<pre><code>public class Colors : MonoBehaviour
{
    [SerializeField]
    private List&lt;Color&gt; foregroundColors;
    [SerializeField]
    private List&lt;GameObject&gt; backgrounds;

    public bool IsConstantBackground { get; set; }
    public IEnumerable&lt;Color&gt; ForegroundColors =&gt; foregroundColors;
    public IEnumerable&lt;GameObject&gt; Backgrounds =&gt; backgrounds;
}
</code></pre>
<p><code>IReadonlyCollection</code> is another nice immutable wrapper for public collections. Use <code>IEnumerable</code> if you want to get a collection and iterate through it; use <code>IReadonlyCollection</code> when you need access to indexes and <code>Count</code>.</p>
<p><strong>Warning!</strong> If you're writing performant code inside the <code>Update()</code> which could run hundreds of times per second, you should consider to keep using <code>List</code> instead of abstract wrappers. Immutable wrappers are fantastic when you're writing clean, protected, maintainable code, but they are slightly less performant than <code>List</code> and could <a href="https://learn.unity.com/tutorial/fixing-performance-problems" rel="nofollow noreferrer">generate a little amount of garbage</a>. It's not big deal usually, but inside the <code>Update()</code> it might be crucial when you're targeting low-end devices.</p>
<hr>
<p>Now, the <code>Pair</code> class.</p>
<p>Consider using <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples" rel="nofollow noreferrer">Tuples</a> instead. They are pretty much the same thing you implemented, build-in into .net, readonly and convenient to use.</p>
<p>I didn't find in your example the reason to make <code>Pair</code> mutable. Immutable structs are the best data holders for a lot of reasons:</p>
<ul>
<li>Hard to break.</li>
<li>Easy to use.</li>
<li>More performant than classes.</li>
<li>Easy to maintain (no need to check all struct's users to find if someone trying to modify the struct).</li>
</ul>
<hr>
<p><code>LevelGenerator</code> class:</p>
<ul>
<li>GetComponent is pretty costly function.</li>
</ul>
<p>It is better to use it once and store the result inside a variable:</p>
<pre><code>foreach (GameObject go in gameobjects)
{
    var colorsHolder = go.GetComponent&lt;Colors&gt;();
    prefabs.Add(go, new Pair(colorsHolder.colors, colorsHolder.backgrounds));
}
</code></pre>
<hr>
<ul>
<li><code>LevelGenerator</code>collects some data <strong>and</strong> tracks the player <strong>and</strong> keeps map instantiated only around the player <strong>and</strong> generates tiles.</li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states that a class should have only one thing to do. Well, "one thing" is not very accurate term: class can do several actions grouped into one functionality which still considered "a one thing". Still, I'd try to distribute <code>LevelGenerator</code> functionality into several classes:</p>
<ul>
<li>LevelManager - manager that sends commands to other classes to do an actual work.</li>
<li>TileGenerator - generation functionality.</li>
<li>PlayerTracker - boundaries detection functionality.</li>
<li>MapUpdater - receives boundaries and activates/deactivates tiles.</li>
</ul>
<p>If classes are kept as small as possible, it is easier to modify or extend existing code. For example, you could implement very complex tile generation inside external class without worry that your <code>LevelGenerator</code> class becomes a nightmare with 1000 lines of code.</p>
<hr>
<p>One more thing. <code>MonoBehaviour</code>s are not the only tool for convenient work with data inside the Unity. If you're not familiar with <a href="https://docs.unity3d.com/Manual/class-ScriptableObject.html" rel="nofollow noreferrer">ScriptableObjects</a>, I'm strongly recommend to watch/read some tutorials: they are fantastic tool to work with data.</p>
<p>In your example you could make <code>Colors</code> class a <code>ScriptableObject</code> instead of <code>MonoBehaviour</code> and track tile prefabs separately or inside it. It's not necessarily a <em>better</em> approach, but definitely an option. It might be more convenient and clean, or might not.</p>
<p>I'm usually prefer to store data inside <code>ScriptableObject</code>s, not <code>MonoBehaviour</code>s.</p>
    </div>