<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your functions are so long, and do so much things.</p>

<p>Yeah, sometimes, the size matter. Although, there is no true limit number of lines, usually, a too long function expose a poor design.</p>

<p>One function (or method) have to do one thing, and only one. If this "one thing" can broken into smaller things, each of those should be placed into a separated function. It's a kind of "<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsability Principle</a>".</p>

<blockquote>
  <p>Perfection is finally attained not when there is no longer anything to add, but when there is no longer anything to take away. - <a href="http://en.wikiquote.org/wiki/Antoine_de_Saint_Exup%C3%A9ry" rel="noreferrer">A. de Saint Exupéry</a></p>
</blockquote>

<p>Eg, talking about me, I almost always <em>try</em> to don't excess 30-35 lines of codes for a function, because it force me to separate logic units.
With a short function, you can immediately determine it purpose.</p>

<p>A shorter function, by definition (<em>most of the time</em>), is simpler to understand. It's also easier to debug if you get a problem later. It's the "<a href="https://en.wikipedia.org/wiki/KISS_principle" rel="noreferrer">KISS principle</a>"</p>

<blockquote>
  <p>Everything should be made as simple as possible, but not simpler. - <a href="http://en.wikiquote.org/wiki/Albert_Einstein" rel="noreferrer">A. Einstein</a></p>
</blockquote>

<p>Therefore, a good practice to following is to <a href="https://en.wikibooks.org/wiki/Computer_Programming/Coding_Style/Minimize_nesting" rel="noreferrer">avoid deep nesting</a> because it force you to keep like a "stack trace" in mind and overload your brain. In <code>Generateur::gen</code> you have 21 structure of control and the deepest is at the 11th level. Don't you think it's too much?</p>

<hr>

<p>Also, in many place, you repeat same code, again and again. So would be to try to factorize your code, applying the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">Don't Repeat Yourself</a> principle. This one make reading, writing, editing of your code easier and faster, since we only have to read, write or modify once. </p>

<p>That also prevent your code to being a huge "copy and past" fest. So, instead of hard-coding three times how using your program, write a ´usage` function where you print that, all call it from where you want.</p>

<p>For your arguments parsing, you can try to code a tiny reusable utility for parsing command lines or rely on an already <a href="https://github.com/search?l=C%2B%2B&amp;q=command+line+argument&amp;type=Repositories" rel="noreferrer">existing solution</a>. </p>

<hr>

<p>A lot of your code can be simplified using Standards C++ classes, but I will not go into too much detail about what should be changed in your code because I think it's all the code that needs to be rewritten taking into account everything I've said. In summary:</p>

<ul>
<li>Make the functions shorter</li>
<li>Less use of conditional branching</li>
<li><p>Factorize into pieces of reusable code</p></li>
<li><p>Don't use old C Library header when you have Standard C++ features that allow you to do it easier, better, faster, stronger and safer (<em>Hello Daft Punk</em>).  In last resort, if you have to use C Library, use the <code>&lt;cXXX&gt;</code>version instead of the <code>&lt;XXX.h&gt;</code> one.</p></li>
<li>Use the language facilities offered by the STL and C ++ in general.</li>
<li><p>Your arguments parsing can (and should) be rewrites with: <code>std::string</code>, <code>std::vector</code> and <code>std::optional</code>.</p></li>
<li><p>Use <a href="https://en.cppreference.com/w/cpp/string/basic_string/stol" rel="noreferrer"><code>std::stoi</code></a> (and his family) , <a href="https://en.cppreference.com/w/cpp/io/basic_stringstream" rel="noreferrer"><code>std::stringstream</code></a>  or the <code>C++17</code> <a href="https://en.cppreference.com/w/cpp/utility/from_chars" rel="noreferrer"><code>std::from_chars</code></a> instead of the old C <code>atoi</code>.</p></li>
<li>Use <code>std::string first = argv[3];</code> instead of <code>char *first; first = new char[strlen(argv[3])]; strcpy(first, argv[3]); length1 = strlen(first);</code></li>
<li>Learn <a href="https://en.cppreference.com/w/cpp/algorithm" rel="noreferrer">C++ algorithms</a></li>
</ul>

<p>As a final word, here is a quote from <em>Bjarne Stroustrup</em>, the father of C++</p>

<blockquote>
  <p>Using Standard C++ as a glorified C or glorified C with Classes only would be to waste the opportunities offered by Standard C++. - <a href="http://www.stroustrup.com/new_learning.pdf" rel="noreferrer">Bjarne Stroustrup (Learning Standard C++ as a New Language)</a></p>
</blockquote>
    </div>