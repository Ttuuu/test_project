<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Better use of standard library</h3>

<p>Right now, you have:</p>

<pre><code>std::string add_padding(int frame_num_in)
{
    std::string outval = std::to_string(frame_num_in);

    int length = outval.length();
    while (length &lt; digit_padding)
    {
        outval = "0" + outval;
        length = outval.length();
    }

    return outval;
}
</code></pre>

<p>This strikes me as a fairly inefficient way to do the job. Lacking a specific reason to do otherwise, I'd probably use a <code>stringstream</code>:</p>

<pre><code>std::string add_padding(int frame_num_in) { 
    std::ostringstream buffer;

    buffer &lt;&lt; std::setfill('0') &lt;&lt; std::setw(digit_padding) &lt;&lt; frame_num_in;
    return buffer.str();
}
</code></pre>

<p>If you really want to do it as string manipulation rather than using a stream, you could eliminate a fair amount of work with a simple subtraction:</p>

<pre><code>std::string add_padding(int frame_num_in)
{
    std::string outval = std::to_string(frame_num_in);

    int pad_len = std::max(0, digit_padding - outval.length());

    return std::string(pad_len, '0') + outval;
}
</code></pre>

<h3>Use applicable member functions</h3>

<p>In <code>get_next_frame</code>, I'd change this:</p>

<pre><code>    else
    {
        name_out = "";
        next_frame = "";
        return false;
    }
</code></pre>

<p>..to use <code>.clear()</code> instead:</p>

<pre><code>else 
{
    name_out.clear();
    next_frame.clear();
    return false;
}
</code></pre>

<h3>Minimize Scopes</h3>

<p>As a general rule, I'd prefer to give each variable as narrow a scope as possible. Right now, you have a number of class member variables that are really only used in a single function. In such a case, it's better to define them inside that function. If you can define them inside the body of a loop or <code>if</code> statement, that's even better.</p>

<p>This not only keeps outside code from "messing" with something it shouldn't, but also makes the code considerably easier to read, since you don't need to look through the whole file to find things.</p>

<h3>Construct regexes carefully</h3>

<p>Right now you have:</p>

<pre><code>std::regex match_pattern = std::regex("([a-zA-Z]*).([0-9]*).(\\w{3})");
</code></pre>

<p>This has a bit of a problem: in a regex, a <code>.</code> means "match any one character". From the looks of the data you're using with the code, it seems nearly certain that you wanted to match only an actual <code>.</code>. You also allow each of the other sub-patterns to be empty, so (for example) this will match against a string like <code>"[]   "</code>, which I'd guess really isn't intended.</p>

<p>Unfortunately, you haven't documented what you really intended to require, so I can't suggest one that I'm sure is better. It looks like in the end, you mostly just want a pointer to the first digit in the string though. If so, it might be easier to just use <code>your_string.find_first_of("0123456789")</code> and be done with it (unless you really need to verify the format of the input string, in which case I doubt the regex you're using suffices).</p>

<h3>Avoid hard-coding where parameters make more sense</h3>

<p>Most of this path:</p>

<pre><code>tmpname = "C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v9.0\\3_Imaging\\MovieHasher\\data\\" + prefix + file_delim + add_padding(i) + file_delim + ext;
</code></pre>

<p>...should probably be supplied as a parameter to the program rather than hard-coded into the class--for most practical purposes, it restricts the code to running on your machine, for no particularly good reason.</p>
    </div>