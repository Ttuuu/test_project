<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider:</p>

<pre><code>let dictionary = ["3": "c", "1": "a", "2": "b”]
</code></pre>

<p>If you want to get separate arrays of <code>keys</code> and <code>values</code>, sorted by the order of the <code>Int</code> values of the keys, you can do:</p>

<pre><code>let (keys, values) = dictionary.map { (Int($0.key) ?? 0, $0.value) }  // get `Int` keys
    .sorted { $0.0 &lt; $1.0 }                                           // now sort by those `Int` values
    .reduce(into: ([Int](), [String]())) { arrays, entry in           // divide that up into two arrays
        arrays.0.append(entry.0)
        arrays.1.append(entry.1)
}
</code></pre>

<p>That results in a <code>keys</code> of <code>[1, 2, 3]</code> and <code>values</code> of <code>["a", "b", "c"]</code>.</p>

<p>But a key observation is that you actually have to explicitly sort your results. Dictionaries, unlike arrays, are unordered. E.g. regardless of what order the keys appeared in a dictionary literal or JSON, when you iterate through the key-value pairs in a dictionary, the order may be different. You have to convert to an array and sort it yourself if order is important.</p>

<hr>

<p>The above arbitrarily uses <code>0</code> for any keys (if any) that couldn’t be converted to an <code>Int</code>. If you just wanted to drop those entries, you could alternatively do:</p>

<pre><code>let (keys, values) = dictionary.compactMap { entry in Int(entry.key).map { ($0, entry.value) } }
    .sorted { $0.0 &lt; $1.0 }                                       // now sort by those `Int` values
    .reduce(into: ([Int](), [String]())) { arrays, entry in       // divide that up into two arrays
        arrays.0.append(entry.0)
        arrays.1.append(entry.1)
}
</code></pre>
    </div>