<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>bloater pt 1</h2>
<p>on my first glance i saw that two classes are not required - the name for that anti-pattern is called <a href="https://refactoring.guru/smells/middle-man" rel="nofollow noreferrer">Middle Man</a>:</p>
<ul>
<li><code>Library</code></li>
<li><code>UserManager</code></li>
</ul>
<p>you can easily refer directly to these <code>List&lt;?&gt;</code> (Note: if you provide more function to these classes, maybe like  a filter, then these classes would make totally sense - it also would have a name then: <a href="https://softwareengineering.stackexchange.com/questions/139353/why-should-we-preferably-use-first-class-collections">first-class collection</a>. Since it is not (yet) needed it also violates <a href="https://clean-code-developer.com/grades/grade-5-blue/#You_Aint_Gonna_Need_It_YAGNI" rel="nofollow noreferrer">YAGNI</a></p>
<h2>bloater pt 2</h2>
<p>the <code>User</code> class is bloated - it  has <a href="https://clean-code-developer.com/grades/grade-2-orange/#Single_Responsibility_Principle_SRP" rel="nofollow noreferrer">too much responsibility</a></p>
<p><a href="https://refactoring.guru/extract-class" rel="nofollow noreferrer">extract these responsibilites</a> into the proper classes</p>
<pre><code>//TODO class Subscription
private String subcriptionType;
private Date   subsciptionDate;
...
public String getSubcriptionType() 
public Date getSubsciptionDate()
...
</code></pre>
<pre><code>//TODO class LogIn
private String loginUserId;
private String loginPassword;
private String lastLoginDate;
...
public void login(String loginUser, String login_Password)
...
</code></pre>
<h2>some other minor issues</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic numbers</a> <code>for(int i=0;i&lt;50;i++)...</code> - why <strong>50</strong>?</li>
<li><a href="https://refactoring.guru/smells/primitive-obsession" rel="nofollow noreferrer">primitve Obsession</a>  (why not use an <code>enum</code> for <code>subcriptionType</code> - that would make turn <code>"Classic"</code> into it's proper value)</li>
<li><a href="https://refactoring.guru/smells/primitive-obsession" rel="nofollow noreferrer">primitve Obsession</a> - <code>String creditCardInfo</code> - a class would make sense here (especially because you have to treat these information with special care)</li>
<li>hardcoded Strings - <code>"Started reading"</code>, <code>"Finished reading at "</code></li>
<li>use a test class instead of a <code>main()</code> test</li>
</ul>
    </div>