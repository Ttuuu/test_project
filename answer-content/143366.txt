<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've gotten a number of suggestions about how to optimize the code already, but I can't say any of them leaves me feeling like the code is really as clean or simple as it could be. I haven't spent a lot of time on trying to profile to quantify the precise effect on execution speed, but it seems to me that it's pretty straightforward to do the job something like this:</p>

<pre><code>def sieve(n):
    array = [True] * n

    result = []

    result.append(2)
    for i in range(4, n, 2):
        array[i] = False;

    for i in range(3, int(math.sqrt(n)), 2):
        if (array[i]):
            result.append(i)
            for j in range (i*i, n, i):
                array[j] = False;

    for i in range(int(math.sqrt(n)), n):
      if (array[i]):
        result.append(i)
</code></pre>

<p>This special-cases <code>2</code>, because it's, well, a special case: the only even prime number (so special, that <em>lots</em> of papers about primes and their properties only mention 2 by exclusion (e.g., "let N be an odd prime"). So, we start by adding 2 to the list of primes, and crossing out all the multiples of 2 (if we wanted to get tricky, we wouldn't even allocate space in <code>array</code> for multiples of 2 at all).</p>

<p>After that, we don't need to consider even numbers at all, so we start from <code>3</code>, and only generate odd numbers as candidates.</p>

<p>We only need to consider numbers up to the square root of our limit, because any factor larger than the square root has to match up with another factor smaller than the square root.</p>

<p>For each prime we find, we only need to cross out numbers starting from it square because multiples of all numbers smaller than it have already been crossed out (e.g., 2N would already have been crossed out as a multiple of 2, 3N as a multiple of 3, and so on).</p>

<p>To avoid re-traversing the result list after we've found the primes, we just add each to the output as we find them. Not sure if this is really any faster, but it avoids arguments about how to do list traversal.</p>

<p>A quick benchmark indicates that this at least slightly faster than any of the others I see posted at the present time:</p>

<pre><code>import time
import math

def jerry(n):
    array = [True] * n

    result = []

    result.append(2)
    for i in range(4, n, 2):
        array[i] = False;

    for i in range(3, int(math.sqrt(n)), 2):
        if (array[i]):
            result.append(i)
            for j in range (i*i, n, i):
                array[j] = False;

    for i in range(int(math.sqrt(n)), n):
      if (array[i]):
        result.append(i)


def sieve(li, x):
    for i in range(2*x, len(li), x):
        li[i] = False
    return li

def simon(limit):
    li = [False, True]*(limit//2)
    li[1] = False
    li[2] = True
    for i in range(3, limit, 2):
        if li[i]:
            li = sieve(li, i)
    primes = [x for x in range(len(li)) if li[x]]
    return primes

def josay(n):
    is_prime = [True] * n
    is_prime[0] = is_prime[1] = False
    for i in range(2, int(math.sqrt(n)) + 1):
        if is_prime[i]:
            for j in range(i * i, n, i):
                is_prime[j] = False
    return [i for i, p in enumerate(is_prime) if p]

def krypton(n):
    array = []
    for i in range(0, n + 1):
        array.append(True)

    for i in range(2, int(math.sqrt(n)) + 1):
        if array[i] == True:
            for j in range(i*i, n + 1, i):
                array[j] = False
    final = []
    for i in range(2, n + 1):
        if array[i] == True:
            final.append(i)
    return final

if __name__ == '__main__':
    n = 10000000

    tests = [simon, jerry, josay, krypton]
    names = ["Simon", "Jerry", "Josay", "Krypton"]

    for i in range(0, len(tests)):
        start = time.time()
        result = tests[i](n)
        end = time.time()
        print '{}: {}'. format(names[i], (end-start))
</code></pre>

<p>Results:</p>

<pre><code>Simon: 3.54199981689
Jerry: 2.21599984169
Josay: 3.52499985695
Krypton: 5.94400000572
</code></pre>

<p>Note: after posting these, @Krypt0n has added a couple more possibilities that look quite good but aren't (at least yet) included here.</p>
    </div>