<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, so, per @markspace, you've made this a lot more complicated than it has to be. In Python, <code>yield</code> is being used to save the state of a function. In Java, you'd just use a stateful object that executes the desired function.  I'm pretty sure you could either create a <code>FibonacciIterator</code> or a <code>FibonacciSupplier</code> and meet your requirements.</p>

<p>In either case, every time you call <code>get()</code>/<code>next()</code>, the code runs until it hits a <code>return</code> (yield). Then state is preserved and control flow returns to the calling code. The next time <code>get()</code>/<code>next()</code> is called, execution continues from the preserved state. Both classes provide an infinite, ordered, stateful stream of elements. <code>Supplier</code> can be plugged into <code>Stream::generate</code>, while <code>Iterable</code> can be iterated over.</p>

<p>It is my (limited) understanding that a Python <code>Generator function</code> is just syntactic sugar that creates a Python <code>Iterator</code> which tracks execution state. This is a convenience so you can work with a function instead of an object. In your Java code, you're already tracking state yourself in your client method - by creating an infinitely deep call stack recursing on <code>get</code> with the new arguments.</p>

<p>If you think I'm mistaken, can you please provide a specific case that the classes below do not solve?</p>

<pre><code>public final class FibonnaciSupplier implements Supplier&lt;Integer&gt; {

    private int currentNumber = 0;
    private int nextNumber = 1;

    @Override
    public Integer get() {
        final int result = this.currentNumber;
        final int sum = this.currentNumber + this.nextNumber;

        this.currentNumber = this.nextNumber;
        this.nextNumber = sum;
        return Integer.valueOf(result);
    }

}

public final class FibonnaciIterator implements Iterator&lt;Integer&gt; {

    private int currentNumber = 0;
    private int nextNumber = 1;

    @Override
    public boolean hasNext() {
        return true;
    }

    @Override
    public Integer next() {
        final int result = this.currentNumber;
        final int sum = this.currentNumber + this.nextNumber;

        this.currentNumber = this.nextNumber;
        this.nextNumber = sum;
        return Integer.valueOf(result);
    }

}
</code></pre>

<p>To see an example of the stack overflow issue, try the following generator. </p>

<pre><code>    Generator&lt;Number&gt; g = new Generator&lt;Number&gt;() {
        public Number get(Object[] o) {
            return get(0);
        }

        private Number get(long currentNumber) {
            yield(currentNumber);
            currentNumber += 1;
            if (currentNumber &lt; 0)
                return null;
            return get(currentNumber);
        }
    };
</code></pre>

<p>You can also put a breakpoint on the line <code>yield(currentNumber)</code>, run your debugger through a few calls to <code>get()</code>, and look at the call stack. It'll look something like:</p>

<blockquote>
  <p>Daemon Thread [Thread-0] (Suspended (breakpoint at line 18 in Main$1))<br>
      Main$1.get(long) line: 18<br>
      Main$1.get(long) line: 22<br>
      Main$1.get(long) line: 22<br>
      Main$1.get(long) line: 22<br>
      Main$1.get(Object[]) line: 14<br>
      Main$1.get(Object[]) line: 1<br>
      Main$1(Generator).lambda$0(Object[]) line: 25<br>
      232824863.run() line: not available 
      Thread.run() line: 745  </p>
</blockquote>

<p>Those repeated <code>get()</code> calls on line 22 are you stepping into a new stack frame every time <code>get()</code> is invoked recursively.</p>
    </div>