<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>You have a bug</h3>

<p>If the last value is a 1, and it is the end of the longest consecutive sequence, it won't be taken into account.
The fix is to change the return statement to this:</p>

<pre><code>return max(size, len(one_list))
</code></pre>

<h3>Unnecessary condition</h3>

<p>If you <em>know</em> your input only contains 0 and 1 values,
then you can simplify this condition:</p>

<blockquote>
<pre><code>if num == 1:
    # ...
elif num == 0 and size &lt; len(one_list):
    # ...
</code></pre>
</blockquote>

<p>By dropping the <code>num == 0</code>:</p>

<blockquote>
<pre><code>if num == 1:
    # ...
elif size &lt; len(one_list):
    # ...
</code></pre>
</blockquote>

<p><em>But note that this is not good enough, as there's still a bug hiding there as @veedrac explains in his answer, instead of an <code>elif</code>, this should be rewritten using an <code>else</code>.</em></p>

<h3>Improving storage efficiency</h3>

<p>There's no need to store the 1s as you count them.
You can just keep the count in a variable.</p>

<h3>Testing</h3>

<p>Instead of running your function using test data,
give a try to doctests, like this:</p>

<pre><code>def consecutive_one(data):
    """
    &gt;&gt;&gt; consecutive_one([0, 1, 0, 1, 1, 0])
    2
    &gt;&gt;&gt; consecutive_one([0, 1, 0, 1, 1, 1])
    3
    &gt;&gt;&gt; consecutive_one([0, 1] * 10)
    1
    """
    # ... the implementation ...
</code></pre>

<p>To run all doctests within a file, run <code>python -m doctest yourfile.py</code>.
When all tests pass, there is no output.
When something fails you will get a detailed report.
This is an excellent way to test your implementation,
and also to document usage with examples and expected outputs.</p>
    </div>