<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should write a function that takes care of asking the user for input. It should be able to assign a type and validate the input. This way you can continue asking for a valid input for each of the variables independently. It also allows you to validate the second variable using the value of the first.</p>
<pre><code>def ask_user(message, type_=str, valid=lambda x: True, wrong_type="Wrong type!", invalid="Invalid!"):
    while True:
        try:
            x = type_(input(message))
        except (TypeError, ValueError):
            print(wrong_type)
            continue
        if valid(x):
            return x
        else:
            print(invalid)
</code></pre>
<p>Which you can use like this:</p>
<pre><code>if __name__ == "__main__":
    r_x = 0.15
    r_y = 0.21
    w_x = ask_user("Enter the weight of stock x in your portfolio: ",
                   type_=float,
                   wrong_type="Please enter the weight using numbers",
                   valid=lambda w_x: 0 &lt;= w_x &lt;= 1,
                   invalid="Please enter the number as a decimal. Remember, your maximum investment is 100%.")
    w_y = ask_user("Enter the weight of stock y in your portoflio: ",
                   type_=float,
                   wrong_type="Please enter the weight using numbers",
                   valid=lambda w_y: 0 &lt;= w_x + w_y &lt;= 1,
                   invalid="Remember, the total weight of the portfolio is 100%. The weights should add to 1.")
    r_p = r_x * w_x + r_y * w_y
    print(f"The total return on your portoflio is {r_p:.2%}")
</code></pre>
<p>I also used the newer <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">f-strings</a> for string formatting, with the <code>%</code> format code, which takes care of that multiplication by one hundred. I also added a <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without the code being run.</p>
<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using spaces around <code>=</code> when using it for assignment, but not when using it for keyword arguments. Similarly, operators like <code>+</code> and <code>*</code> should generally also be surrounded by spaces.</p>
<hr>
<p>If you want to be able to input <code>n</code> weights, I would add another function:</p>
<pre><code>def ask_n_weights(message, n, type_=str, wrong_type="Wrong type!", invalid="Invalid!"):
    weights = []
    for i in range(1, n + 1):
        weights.append(ask_user(message.format(i),
                                type_=type_,
                                wrong_type=wrong_type,
                                valid=lambda w: 0 &lt;= w + sum(weights) &lt;= 1,
                                invalid=invalid))
    return weights
</code></pre>
<p>This uses the fact that <code>sum([]) = 0</code> to also be correct for the first variable. In order not to loose the ability to know which weight you are entering I made it so that <code>message</code> should have one placeholder:</p>
<pre><code>ask_n_weights("Enter weight {}: ", 4, type_=float)
# Enter weight 1: 0.25
# Enter weight 2: 0.25
# Enter weight 3: 0.25
# Enter weight 4: 0.25
# [0.25, 0.25, 0.25, 0.25]
</code></pre>
<p>You could also take an iterable of variable names instead of <code>n</code>.</p>
    </div>