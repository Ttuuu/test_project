<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I'd like to see if this is a reasonable solution, or is just plain terrible.</p>
</blockquote>
<p>I wouldn't say it is "<em>terrible</em>" - mostly because it works and doesn't appear to be very inefficient. However, there are some improvements that can be made.</p>
<ul>
<li><p><strong>use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity" rel="noreferrer">strict equality</a> comparison</strong> - i.e. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity" rel="noreferrer"><code>===</code></a> when comparing values. That way it won't need to convert the types.</p>
</li>
<li><p><strong>Style Guide</strong> Consider following a <a href="https://codeburst.io/5-javascript-style-guides-including-airbnb-github-google-88cbc6b2b7aa" rel="noreferrer">style guide</a>. Many common style guides advise separating keywords with a space - e.g. <code>if (</code> instead of <code>if(</code>.</p>
</li>
<li><p><strong>Use consistent indentation</strong> The first and last lines within the <code>for</code> loop are not indented, while the other lines between them are, though maybe it was the case that your code was indented properly but when you pasted here it was thrown off because of the markdown formatting...</p>
</li>
<li><p><strong>Abstract logic into a function</strong> As <a href="https://codereview.stackexchange.com/a/211115/120114">Paul's answer</a> suggests: you can put the core logic into a function that returns the output but doesn't handle outputting the value (e.g. to the console). This allows such code to be atomic and testable - congruent with the <a href="https://deviq.com/single-responsibility-principle/" rel="noreferrer">Single Responsibility Principle</a>. Also, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return" rel="noreferrer"><code>return</code></a> statement can eliminate the need for <code>else</code> keywords within a function. One drawback is that calling a function on each iteration may slow down operations but should be negligible for a set of numbers 1 through 100.</p>
</li>
</ul>
<h3>Updated Code</h3>
<p>Consider the modified code below, utilizing the feedback above. I also used this code in the code contained in my recent question: <a href="https://codereview.stackexchange.com/q/211731/120114">Fizzbuzz with dynamic height container</a></p>
<p><strong>Note</strong>: the inline console in the snippets is truncated to ~50 lines, but the complete console log should be visible in your browser console.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function fizzBuzz(value) {
    if (value % 15 === 0) { return "FizzBuzz"; }
    if (value % 3 === 0) { return "Fizz"; }
    if (value % 5 === 0) { return "Buzz"; }
    return value;
}
for (var i = 1; i &lt;= 100; i++) {
    console.log(fizzBuzz(i));
}</code></pre>
</div>
</div>

<p>One option I did consider is to minimize the number of modulo operations, append to the output string instead of outputting it. If you are trying to optimize for speed, this might not be the approach to take because appending to the string may be much slower than doing an extra couple modulo operations. Try a comparison in <a href="https://jsperf.com/fizzbuzzjstechniques/1" rel="noreferrer">this jsPerf test</a>.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function fizzBuzz(value) {
    var output = "";
    if (value % 3 === 0) { output += "Fizz"; }
    if (value % 5 === 0) { output += "Buzz"; }
    return output || value;
}
for (var i = 1; i &lt;= 100; i++) {
    console.log(fizzBuzz(i));
}</code></pre>
</div>
</div>

    </div>