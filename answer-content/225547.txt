<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>C++ is not Java. You may safely get rid of all <code>this-&gt;</code>.</p></li>
<li><p>The client doesn't need to know about <code>Node</code>. Make it an inner class of the <code>LinkedList</code>.</p></li>
<li><p>The <code>~LinkedList()</code> destructor is missing. You should also consider (or prohibit) the copy constructor, <code>operator=</code>, and move constructor.</p></li>
<li><p><code>add(int data, int position)</code> may silently leak memory. If the <code>position</code> is too large, the created node is not linked into the list, and is lost. Also, there is no way to <em>prepend</em> a node.</p></li>
<li><p>I don't like the <code>temp_head</code> approach. Better leave the <code>head</code> alone, and iterate using a cursor variable, e.g.:</p>

<pre><code>void LinkedList::print() {
    Node * cursor = head;
    while (cursor) {
        std::cout &lt;&lt; cursor-&gt;data &lt;&lt; '\n';
        cursor = cursor-&gt;next;
    }
}
</code></pre>

<p>At least, there is no need to restore <code>head</code>.</p>

<p>Ditto for <code>add</code>.</p></li>
</ul>
    </div>