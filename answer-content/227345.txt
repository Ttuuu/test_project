<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your global variable naming violates PEP 8. <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="nofollow noreferrer">Names in all upper-case are <em>constants</em></a>; variables that never change in value. Your globals aren't constant though. Lines like</p>

<pre><code>LIVES -= 1
</code></pre>

<p>change the value that <code>LIVES</code> holds.</p>

<p>Yes, global names should be in uppercase, but only because globals should also ideally only be constants. Global mutable state is a pain to deal with and complicates testing and debugging.</p>

<hr>

<p>The simplest way to get rid of the global variables is to package them into a state that gets passed around to any function that needs it. While simple and not ideal, this solves the major problem with using globals: You can't just pass in data that you want to be used when testing. When using globals, you must modify the global state just to test how a function reacts to some data. This is less-straightforward than just passing the data, and has the potential to lead to situations where another function reads from the global that you set, causing it to change in behavior along with the function that you're testing.</p>

<p>So, how can you do this?</p>

<p>Represent the state of the game as a class (something like a <code>dataclass</code> would work well here, but I'm just going to use a plain class for simplicity).</p>

<pre><code>class GameState:
    def __init__(self):
        self.lives = 3
        self.score = 0
        self.var = None  # Bad name. Doesn't describe its purpose
        self.word_position = None
        self.user_answer = None
</code></pre>

<p>Then pass an instance of this object (and alter this object) to change the "globals". This at the very least allows you to easily pass in exactly the data that you want to test.</p>

<hr>

<hr>

<p>I'd review further, but I started feeling sick about half way through writing this. I'm going to go lay down :/</p>
    </div>