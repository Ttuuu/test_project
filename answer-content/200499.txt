<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Inconsistent return values</h3>

<p>The function returns an integer for non-empty input,
and <code>[]</code> for empty input.
It would be better to use a consistent return type.</p>

<h3>Performance issues</h3>

<p>To find the divisors, no need to iterate until the length of the input,
it would be enough to look until the square root of the length.</p>

<p>The program uses more memory than necessary:
instead of creating the <code>split</code> list,
it would be more efficient to compare segment by segment.</p>

<p>In <code>x == split[0] for x in split</code> the first segment is unnecessarily compared to itself.</p>

<h3>Alternative implementation</h3>

<p>Consider this alternative implementation that handles the above comments:</p>

<pre><code>from math import sqrt


def answer(s):
    """
    &gt;&gt;&gt; answer('')
    0

    &gt;&gt;&gt; answer('bcabcabc')
    1

    &gt;&gt;&gt; answer('ababab')
    3

    &gt;&gt;&gt; answer('abcabcd')
    1

    &gt;&gt;&gt; answer('abcabc')
    2

    &gt;&gt;&gt; answer('abc')
    1

    &gt;&gt;&gt; answer('aaa')
    3

    """    
    length = len(s)
    divisors = (x for x in range(1, int(sqrt(length)) + 2) if length % x == 0)
    for size in divisors:
        first = s[:size]
        if all(s[start:start+size] == first for start in range(size, length, size)):
            return length // size
    return 1
</code></pre>
    </div>