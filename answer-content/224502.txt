<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I rewrote some of your program to make it more idiomatic in Rust. I tried to comment significant changes I made, but if you have any questions about why I changed things, you can click "add a comment" below my answer. Side note: the comments I made aren't necessarily good code comments (as in I wouldn't keep them in the code, they're just to explain to you the changes)</p>

<pre><code>// Pulling out this repeated code into one function reduces repetition.
fn ask(buf: &amp;mut String, prompt: &amp;str, guide: &amp;str) {
    use std::io::{stdin, stdout, Write};

    // Using print (not println) lets you have the input seen on the same line.
    print!("{} [{}]: ", prompt, guide);
    // Since stdout is line-buffered, you must flush if you are not printing a new line.
    stdout().flush().expect("Failed to flush output");
    stdin().read_line(buf).expect("Failed to read input");
}

fn ask_name(prompt: &amp;str) -&gt; String {
    let mut buf = String::new();
    ask(&amp;mut buf, prompt, "Name only");
    buf
}

// Here we keep asking until we get a valid number.
fn ask_numeric(prompt: &amp;str) -&gt; u64 {
    let mut buf = String::new();
    loop {
        ask(&amp;mut buf, prompt, "Numbers only");
        if let Ok(num) = buf.trim().parse() {
            return num;
        }
        buf.clear();
        println!("Try again.");
    }
}

// Here we may also want to keep asking until we get either y/n, to be more exact.
fn ask_yn(prompt: &amp;str) -&gt; bool {
    let mut buf = String::new();
    ask(&amp;mut buf, prompt, "y/n");
    buf.trim().eq_ignore_ascii_case("y")
}

// By grouping the name and amount for each entry, we make it more explicit that the vec of names
// and vec of amounts are paired together. We could have just used a tuple like (String, u64), but
// since this is what the program revolves around, its certainly worth making a struct for.
#[derive(Clone, Debug)]
struct Record {
    name: String,
    amount: u64,
}

fn prompt_income(income_list: &amp;mut Vec&lt;Record&gt;) -&gt; u64 {
    // Using our ask functions simplify this loop greatly.
    while ask_yn("Add income?") {
        income_list.push(Record {
            amount: ask_numeric("Enter income amount."),
            name: ask_name("Enter income name."),
        });
    }
    // Here we map from Record to u64, so that we sum the amounts.
    let income = income_list.iter().map(|r| r.amount).sum();
    println!("Total user income: {} ", income);
    income
}

// Note that this function is almost identical to prompt_income, this would be another good target
// to deduplicate.
fn prompt_expense(expense_list: &amp;mut Vec&lt;Record&gt;) -&gt; u64 {
    while ask_yn("Add expense?") {
        expense_list.push(Record {
            amount: ask_numeric("Enter expense amount."),
            name: ask_name("Enter expense name."),
        });
    }
    let expenses = expense_list.iter().map(|r| r.amount).sum();
    println!("Total user expenses: {} ", expenses);
    expenses
}

fn uservalue(income: u64, expenses: u64) {
    use std::cmp::Ordering;

    // Here we always subtract the smaller number from the bigger one, which keeps us from having
    // to worry about casting to signed types and having any problems with overflow, etc. We
    // compare the numbers first, then do different things based on that.
    match income.cmp(&amp;expenses) {
        Ordering::Less =&gt; {
            println!(
                "You are in the negative, you have a deficit of {}",
                expenses - income
            );
        }
        Ordering::Equal =&gt; {
            println!("You have broken even, you are spending exactly as much as you make.")
        }
        Ordering::Greater =&gt; {
            println!(
                "You are in the positive, you have a surplus of {}",
                income - expenses
            );
        }
    }
}

fn main() {
    let mut expense_list = Vec::new();
    let mut income_list = Vec::new();

    loop {
        let income = prompt_income(&amp;mut income_list);
        let expenses = prompt_expense(&amp;mut expense_list);

        uservalue(income, expenses);

        if !ask_yn("Would you like to run another analysis?") {
            // This break gets us out of this loop and continues main, eventually just exiting
            // the program normally.
            break;
        }

        expense_list.clear();
        income_list.clear();
    }

    // In the close_program function you had, you were exiting with status 1 which actually
    // signifies an error. By just letting main end, we exit normally. You could put a println here
    // if you wanted.
}
</code></pre>
    </div>