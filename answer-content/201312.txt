<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Types</h3>

<p>I think I'd start by building a few types to implement behaviors you want. The first that occurs to me is a saturating integer type to store (in your case) a player's health (and probably a few other things like magic level, though that's not immediately clear).</p>

<p>Following this strategy, health would look something like thhis: <code>saturating&lt;int&gt; health(0, 10);</code>. <code>saturating</code> is (obviously) a generic that assures you can't go outside the prescribed limits.</p>

<p>Then I'd <em>probably</em> do another type specifically for health, based on that, that had (for example) a <code>healthy()</code> member, so in <code>Battle::fight</code>, instead of this:</p>

<pre><code>while(player.getHealth() &gt; 0 &amp;&amp; enemy.getHealth() &gt; 0){
</code></pre>

<p>You'd have something like:</p>

<pre><code>while (player.healthy() &amp;&amp; enemy.healthy()) {
</code></pre>

<p>Maybe "healthy" isn't quite the right word though--perhaps "alive" or something like that is closer. I'll leave it to you to figure out exactly what it should be based on the rules your game is implementing. The point, however, is that when you're at the level of a <code>player</code>, you should be using a type that expresses actions that are meaningful in terms of a player.</p>

<p>In <code>getBattleAction</code>, I'd also use an enumeration instead of an integer. I suppose some might consider it overkill for only two values, but instead of this:</p>

<pre><code>    if(i == 1){
        return new AttackAction();
    }
    else{
        return new HealAction();
    }
</code></pre>

<p>I'd rather see something like:</p>

<pre><code>switch (userAction) { 
    case Heal: // ...
    case Attack: // ...
}
</code></pre>

<p>If you continue development on your game, it's almost inevitable that you'll add more actions a user can take, and this is readable in isolation, instead of having to look at the prompt you printed out to the user to get a reasonable verification that 1 means <code>heal</code> and 2 means <code>attack</code>.</p>

<h3>Names</h3>

<p>That brings up another obvious point: <code>i</code> works perfectly fine (IMO, anyway) for something like a <code>for</code> loop: <code>for (int i=0; i&lt;10; i+++)...</code>, but not for much more than that--in this case, <code>userAction</code> (or something similar) would give a much better indication of the actual meaning of the variable.</p>

<h3>Immediacy</h3>

<p>I can't help feeling that code like this:</p>

<pre><code>    if(health &gt; 0){
        setBattleAction(chosenAction);              //strategy pattern
    }
    else{
        setBattleAction(new FaintedAction());
    }
    performAction(target);
</code></pre>

<p>...mostly obfuscates the intent. It seems to me that under the circumstances, it's simpler to just have something like:</p>

<pre><code>if (health &gt; 0) // if player.healthy()
    performAction(chosenAction);
else
    performAction(new FaintedAction());
</code></pre>

<p>...and if possible, I'd prefer the still simpler <code>else faint();</code></p>

<p>Strunk and White advised us to "omit needless words", and it applies at least as well to code as prose.</p>
    </div>