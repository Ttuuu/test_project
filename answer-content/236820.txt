<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>it's fine with me, but since it's open-source, you should consider the various skill levels that would work with this library. So, to make it more readable, I would prefer to divide it into smaller blocks that would handle each type separately.</p>

<p>For instance, for integer types (uint8, uint16 ..etc), you can move it to a private method like this : </p>

<pre><code>private object IsInteger(ClickHouseType databaseType)
{
    switch(databaseType.TypeCode)
    {
        case ClickHouseTypeCode.UInt8:
            return reader.ReadByte();
        case ClickHouseTypeCode.UInt16:
            return reader.ReadUInt16();
        case ClickHouseTypeCode.UInt32:
            return reader.ReadUInt32();
        case ClickHouseTypeCode.UInt64:
            return reader.ReadUInt64();
        case ClickHouseTypeCode.Int8:
            return reader.ReadSByte();
        case ClickHouseTypeCode.Int16:
            return reader.ReadInt16();
        case ClickHouseTypeCode.Int32:
            return reader.ReadInt32();
        case ClickHouseTypeCode.Int64:
            return reader.ReadInt64();
        case ClickHouseTypeCode.Float32:
            return reader.ReadSingle();
        case ClickHouseTypeCode.Float64:
            return reader.ReadDouble();
        default:
            return null;
    }
}
</code></pre>

<p>and call it back from <code>ReadValue</code> method. You can apply the same thing on all types, and use <code>if</code> statement if you see that the code has multiple lines (like Array, UUID..etc) types. This would improve readability, and also would give you more flexibility to maintain each type and expand it as needed.</p>

<p>Also, if you use this approach, I would highly recommend to return the specific type of each type instead of <code>object</code> on your private methods. </p>

<p>Example : </p>

<pre><code>private Guid IsGuid(ClickHouseType databaseType)
{
    if (databaseType.TypeCode == ClickHouseTypeCode.UUID)
    {
        var bytes = new byte[16];
        reader.Read(bytes, 6, 2);
        reader.Read(bytes, 4, 2);
        reader.Read(bytes, 0, 4);
        reader.Read(bytes, 8, 8);
        Array.Reverse(bytes, 8, 8);
        return new Guid(bytes);
    }

    return Guid.Empty;
}
</code></pre>

<p>You can either try to take <code>object</code> and then convert and return the corresponded type, or define each type explicit in your class as you don't need to base your whole project into castings from object to another type, you need to do it once, and do the rest of the process on that type. </p>

<p><strong>UPDATE</strong></p>

<p>I've just need to add this approach as well : </p>

<pre><code>private readonly ClickHouseType _databaseType;

public T ReadValue&lt;T&gt;()
{
    var type = typeof(T);

    if (type == typeof(ushort))
    {
        return (T)Convert.ChangeType(reader.ReadUInt16(), type);
    }

    if (type == typeof(uint))
    {
        return (T)Convert.ChangeType(reader.ReadUInt32(), type);
    }

    if (type == typeof(ulong))
    {
        return (T)Convert.ChangeType(reader.ReadUInt64(), type);
    }

    if (type == typeof(short))
    {
        return (T)Convert.ChangeType(reader.ReadInt16(), type);
    }

    if (type == typeof(int))
    {
        return (T)Convert.ChangeType(reader.ReadInt32(), type);
    }

    if (type == typeof(long))
    {
        return (T)Convert.ChangeType(reader.ReadInt64(), type);
    }

    if (type == typeof(float))
    {
        return (T)Convert.ChangeType(reader.ReadSingle(), type);
    }

    if (type == typeof(double))
    {
        return (T)Convert.ChangeType(reader.ReadDouble(), type);
    }

    if (type == typeof(decimal))
    {
        var decimalTypeInfo = (DecimalType) _databaseType;
        var factor = (int)Math.Pow(10, decimalTypeInfo.Scale);
        var value = new BigInteger(reader.ReadBytes(decimalTypeInfo.Size));
        var result = (decimal)value / factor;
        return (T)Convert.ChangeType(result, type);
    }

    if (type == typeof(sbyte))
    {
        return (T)Convert.ChangeType(reader.ReadSByte(), type);
    }

    if (type == typeof(byte))
    {
        return (T)Convert.ChangeType(reader.ReadByte(), type);
    }

    if (type == typeof(string))
    {
        return (T)Convert.ChangeType(reader.ReadString(), type);
    }

    if (type == typeof(FixedStringType))
    {
        var stringInfo = (FixedStringType) _databaseType;
        return (T)Convert.ChangeType(Encoding.UTF8.GetString(reader.ReadBytes(stringInfo.Length)), type);
    }

    if (type == typeof(Guid))
    {
        var bytes = new byte[16];
        reader.Read(bytes, 6, 2);
        reader.Read(bytes, 4, 2);
        reader.Read(bytes, 0, 4);
        reader.Read(bytes, 8, 8);
        Array.Reverse(bytes, 8, 8);

        return (T)Convert.ChangeType(new Guid(bytes), type);
    }

    return default;
}
</code></pre>

<p>example usage : </p>

<pre><code>var result = ReadValue&lt;decimal&gt;();
</code></pre>

<p>what I think you need is a class to handle the conversion for each type, as this would really be useful in your project. Then, you can just use this class across your project to just convert the types as needed. Some custom types that I've seen needs to be implemented and used as a strong-typed object instead of using <code>Enum</code>. Like <code>UInt8</code> for example. If I'm in your place, I would create a class for each type, and define the defaults values, conditions (if any), and also converters for each. Then, I Create a static converter class which would call back the <code>ConvertTo</code> method in each type (which it's been already implemented in each class).</p>
    </div>