<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Avoid redundant method implementations</h3>

<blockquote>
<pre><code>public static void NisConnect(String nodeIP, int port)
{
     partialUri = String.Format("http://{0}:{1}", nodeIP, port);
}

public static void NisConnect()
{
     partialUri = String.Format("http://{0}:{1}", "127.0.0.1", 7890);
}
</code></pre>
</blockquote>

<p>Have one overload perform the <em>setter</em>, and have the other call that one.</p>

<pre><code>public static void NisConnect()
{
     NisConnect("127.0.0.1", 7890);
}
</code></pre>

<h3>Use meaningful class names</h3>

<blockquote>
<pre><code>public class RootObject  // &lt;- meaningless name
{
    public Transaction transaction { get; set; }
    public string privateKey { get; set; }
}
</code></pre>
</blockquote>

<h3>Avoid verbose variable declarations</h3>

<p>Use <code>var</code> when the instatiated type is the same as the declared. </p>

<pre><code>// TransactionVersionOne.Transaction Tx = new TransactionVersionOne.Transaction();
var Tx = new TransactionVersionOne.Transaction();
</code></pre>

<h3>Pascal-case variable names</h3>

<p>Also use a meaningful variable name.</p>

<pre><code> // var Tx = new TransactionVersionOne.Transaction();
 var transaction = new TransactionVersionOne.Transaction();
</code></pre>

<h3>Title-case property names</h3>

<pre><code>// public static string partialUri { get; set; }
public static string PartialUri { get; set; }
</code></pre>

<h3>Use property initializers</h3>

<blockquote>
<pre><code>TransactionVersionOne.Message Msg = new TransactionVersionOne.Message();
Msg.payload = messagePayload;
Msg.type = encrypted ? 2 : 1;
Tx.message = Msg;
</code></pre>
</blockquote>

<pre><code>var transactionMessage = new TransactionVersionOne.Message() 
{
    Payload = messagePayload,
    Type = encrypted ? 2 : 1,
    Message = message;
};
</code></pre>

<h3>Don't use redundant code blocks</h3>

<blockquote>
<pre><code>var content = response.Content;
{
      var json = await content.ReadAsStringAsync();
      var model = JsonConvert.DeserializeObject&lt;GetPrepareAnnounce.Response&gt;(json);
      return model;
}
</code></pre>
</blockquote>

<pre><code>var content = response.Content;
var json = await content.ReadAsStringAsync();
var model = JsonConvert.DeserializeObject&lt;GetPrepareAnnounce.Response&gt;(json);
return model;
</code></pre>

<h3>Define the async-await pattern correctly</h3>

<blockquote>
  <p><code>public static async void SendTransactionV1() // ..</code></p>
</blockquote>

<pre><code>public static async Task SendTransactionV1() // ..
</code></pre>
    </div>