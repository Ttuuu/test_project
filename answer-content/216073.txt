<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few things to add to VisualMelons answer:</p>

<p>Instead of a <code>for</code> loop, you can use a <code>foreach</code> loop:</p>

<pre><code>  foreach (string word in Value)
  {
    ...
</code></pre>

<hr>

<p>Using <code>Dictionary&lt;string,int&gt;.TryGetValue</code>:</p>

<p>The <code>out int count</code> value defaults to <code>0</code> if the word is not present in the dictionary, so it's valid to write:</p>

<pre><code>  foreach (string word in Value)
  {
    CountTheOccurrences.TryGetValue(word, out int count);
    CountTheOccurrences[word] = count + 1;
  }
</code></pre>

<p>You don't have to check the returned value from <code>TryGetValue()</code> and you can add a new entry via the indexer.</p>

<hr>

<p>You have to consider what a word is:</p>

<p>The English term: "doesn't", how would you count that: as one word or as "doesn" + "t" (or even "does" + "not")? I'm not expert in English, but I would consider it to be one word, because neither "doesn" nor "t" can be counted for as words in grammatical sense. (The word counter in Microsoft Word counts "doesn't" and other contractions as one word). You can take that into account by extending VisualMelons regex pattern a little bit:</p>

<pre><code>public static IEnumerable&lt;string&gt; SplitWords(string text)
{
    Regex wordMatcher = new Regex(@"[\p{L}']+");
    return wordMatcher.Matches(text).Cast&lt;Match&gt;().Select(c =&gt; c.Value);
}
</code></pre>

<p>Here the pattern is extended with <code>[]</code> and a <code>'</code>.</p>

<p>Alternatively you can use the <code>\b</code> anchor, which matches boundaries between alpha-numeric and non-alpha-numeric chars:</p>

<pre><code>@"\b[\w']+\b"
</code></pre>
    </div>