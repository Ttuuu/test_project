<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The snippet <code>e.each{|k,v| m[k] = v}</code> does the same thing as the standard library method <a href="https://ruby-doc.org/core-2.6/Hash.html#method-i-merge-21" rel="noreferrer">Hash#merge!</a>, so the shortest way to write your solution is probably:</p>

<pre><code>animals.reduce({}, :merge!)
</code></pre>

<p>Note that with this solution, if two hashes in the source array have duplicate keys, those coming later in the array will take priority and overwrite the duplicate keys from earlier in the array:</p>

<pre><code>[{"egrets" =&gt; 17}, {"egrets" =&gt; 21}].reduce({}, :merge!)  # =&gt; {"egrets"=&gt;21}
</code></pre>

<p>Also be aware that <code>merge!</code> is destructive to the original hash, which is fine here since we don't reuse the literal input to <code>reduce</code>. There is a non-destructive version, <code>merge</code>, which is better when the input needs to be preserved.</p>
    </div>