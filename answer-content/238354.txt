<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's probably worth accepting a second template argument for an Allocator to be passed through to the <code>std::deque</code>:</p>

<pre><code>template&lt;class T, class Allocator = std::allocator&lt;T&gt;&gt;
class ThreadSafeDeque {
    std::deque&lt;T, Allocator&gt; deque;
};
</code></pre>

<p>Technically, we do need to include <code>&lt;condition_variable&gt;</code>; we're not allowed to assume that <code>&lt;mutex&gt;</code> always pulls it in.</p>

<p>I don't like the interface to <code>pop_front_waiting()</code> - why does the caller have to pass an lvalue reference, instead of simply being returned the value?  Return-value optimisation will ensure there's no unnecessary copy.</p>

<p>The locking logic all looks good to me.  We can avoid the <code>lock.unlock()</code> by using a simple lock-guard with smaller scope:</p>

<pre><code>void push_back(const T &amp;t)
{
    {
        std::lock_guard&lt;std::mutex&gt; lock{ mutex }; 
        deque.push_back(t);
    }
    condition.notify_one(); // wakes up pop_front_waiting  
}
</code></pre>

<p>From C++17, we can use constructor deduction and omit the template parameter from <code>std::lock_guard</code> and <code>std::unique_lock</code>, making the code a little easier to read.</p>

<p>It's helpful to show that members are intentionally default-constructed, and it pacifies <code>g++ -Weffc++</code>:</p>

<pre><code>std::deque&lt;T&gt; deque = {};
std::mutex mutex = {};
std::condition_variable condition = {};
</code></pre>
    </div>