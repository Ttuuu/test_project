<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code</strong></p>

<p>Was that case-insensitive aspect an assumption from your side, or was this part of the requirements? If not, did you ask? What were the exact requirements anyway?</p>

<p>The code is fairly verbose. The method and variable names are descriptive, which is good, but some of the names are a bit too long for my taste.</p>

<p>You can iterate a string directly, you don't need to create a character array:</p>

<pre><code>for (int i = 0; i &lt; str.Length; i++)
    char c = str[i];
    ...
</code></pre>

<p>You can also use a <code>foreach</code> loop:</p>

<pre><code>foreach (char c in str)
    ...
</code></pre>

<p>Returning a space if there's no non-repeating character means that you can't distinguish between such input and input where a space is the first non-repeating character. I'd change the return type to <code>char?</code> and return <code>null</code> if there's no match.</p>

<p>There's no need to declare <code>nonRepeatingCharacter</code> up-front. Declare it where you actually need it. In fact, you don't need it at all: instead of <code>break</code>ing out of the second loop you can simply <code>return</code> that character directly.</p>

<p>The algorithm itself is fairly straightforward. You could improve performance for large inputs where non-repeating characters occur relatively late by keeping a list of characters in order of their first occurrence. You then only need to iterate that list after building the character-counts dictionary, instead of iterating the full input again. I wouldn't do that without first making sure that performance is a concern though.</p>

<p><strong>Tests</strong></p>

<p>You're mostly testing casing and spacing, both of which depend a lot on the requirements you were given, so without knowing the requirements I'm not sure about their value.</p>

<p>I'd give the empty string a test of its own, because it's a typical edge-case. The same goes for other inputs that do not contain non-repeating characters.</p>

<p>As forsvarir already mentioned, your <code>AreEqual</code> and <code>IsTrue</code> assertions are sufficient. The <code>IsFalse</code> assertions only add clutter.</p>
    </div>