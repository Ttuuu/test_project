<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This function doesn't have any really obvious inefficiencies, so I assume we're looking to shave off every possible clock cycle...</p>

<p>Sometimes it's faster to use Python's built-in aggregation functions than to use a <code>for</code> loop.  Here's how you could use <code>sum</code> and <code>any</code>:</p>

<pre><code>def value(self) -&gt; int:
    value = sum(card.value for card in self.cards)
    if value &lt;= 11 and any(card.rank == "A" for card in self.cards):
        value += 10
    return value
</code></pre>

<p>Note the ordering of the <code>and</code> expression to make sure that the <code>any</code> iteration only happens if the value condition has already been met!</p>

<p>If you have flexibility over the representation of the cards, you might try making the <code>rank</code> an <code>Enum</code> with integer values.  I'd expect comparing two integer enums to be just a smidge faster than comparing two strings.</p>
    </div>