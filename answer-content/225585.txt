<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm having to break MVVM by having the view tell the VM command that its execution has changed because the command binding doesn't seem to refresh on the parameter changing.</p>
</blockquote>

<p>The fundamental problem here seems to be that <code>MenuItem</code> tests whether (in effect) <code>Command.CanExecute(CommandParameter)</code> to update its own <code>Enabled</code> property when <code>Command</code> changes, but not when <code>CommandParameter</code> changes.</p>

<p>It seems to me that the least inelegant way of working around this (IMO) bug in WPF is to subclass <code>MenuItem</code> and use <code>DependencyProperty.OverrideMetadata</code> to register a callback on <code>CommandParameterProperty</code> which updates an overridden <code>IsEnabledCore</code> property. To really do it properly you'd want to also override metadata for <code>CommandTargetProperty</code> and handle <code>RoutedCommand</code> specially, as in <code>CommandHelpers.CanExecuteCommandSource</code>.</p>

<p>An alternative approach, which would be hackier and require more XAML but wouldn't get quite so deep into the inner workings of WPF, would be an <code>IMultiValueConverter</code> which takes two parameters (the command and the parameter) and returns a parameterless command. Then you could set up multibindings such that a change in the parameter causes the <code>MenuItem</code>'s <code>Command</code> to change, triggering its <code>CanExecute</code> test.</p>

<p>Both of these approaches would require changes in the XAML of all the grids, but no per-grid codebehind. They would also eliminate the assumption, which IMO is one of the nastiest problems of the codebehind in the question, that all commands are instances of <code>DelegateCommand&lt;object&gt;</code>.</p>

<p>(The other nasty problem is that if the <code>while</code> loop is broken because <code>current == null</code>, the body of the second loop will throw a <code>NullReferenceException</code>).</p>
    </div>