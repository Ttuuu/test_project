<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, you're off to a good start, I think. Only one major thing comes to mind, when I read your code.</p>

<h1>Tuples</h1>

<p>Instead of operating on <code>seq</code>s or similar, use a tuple. The size of a tuple is fixed and known at compile time. In this game, you know you'll always consider three cards at a time, so it fits the bill. This will also help simplify your <code>allEqual</code> and <code>allDifferent</code> functions. The <code>isSet</code> function still works, as the parameter <code>l</code> is now a tuple instead of a <code>seq</code>.</p>

<pre><code>let allEqual (c1, c2, c3) = c1 = c2 &amp;&amp; c2 = c3
let allDifferent (c1, c2, c3) = c1 &lt;&gt; c2 &amp;&amp; c2 &lt;&gt; c3 &amp;&amp; c1 &lt;&gt; c3
</code></pre>

<p>This affects the shape of your <code>compare</code> function as well. The line</p>

<pre><code>let colorSet = cardList |&gt; List.map (fun c -&gt; c.Color  ) |&gt; isSet
</code></pre>

<p>now becomes like</p>

<pre><code>let colorSet = isSet (card1.Color, card2.Color, card3.Color)
</code></pre>

<p>and similar for <code>shapeSet</code>, <code>patternSet</code> and <code>numsSet</code>. Now the <code>cardList</code> variable may be removed, and the <code>compare</code> function is short and to the point.</p>

<h1>Abstracting the <code>isSet</code> function</h1>

<p>Suppose you think the way the <code>colorSet</code>, <code>shapeSet</code>, etc. variables are defined looks to clunky. You could abstract away the commonalities, by defining a function for getting the <code>Color</code> property and so on. These could then be supplied as arguments to the <code>isSet</code>, <code>allEqual</code> and <code>allDifferent</code> functions . Like this:</p>

<pre><code>let color c = c.Color
// ...
let allEqual feature (c1, c2, c3) = feature(c1) = feature(c2) &amp;&amp; feature(c2) = feature(c3)
// ...
let cards = (card1, card2, card3)
let colorSet = isSet color cards
// ...
</code></pre>

<p>I've only shown a couple of the required functions above, but I hope you get the point. In a small example like this, this might be overkill, but had you had many more features, I would probably go that way.</p>

<h1>Discriminated unions</h1>

<p>One last point is, that it would be obvious to use discriminated unions instead of <code>string</code> and <code>int</code>. I.e. you could define types for each feature, and use them in the <code>Card</code> definition</p>

<pre><code>type Color = Green | Blue | Red
type Number = One | Two | Three
// ...
type Card = { Color: Color; Number: Number; ... }
</code></pre>

<p>This will help readability of your code. Furthermore, if this should interact with the outside would, where input comes in the shape of <code>string</code>s, it pushes parsing and validation to the boundary layer.</p>
    </div>