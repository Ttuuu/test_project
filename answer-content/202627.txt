<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The technique you're looking for is called <strong>memoization</strong> (or in other contexts it might have names like <strong>caching</strong>). Lazy evaluation is something else entirely.</p>

<p>Memoization is the canonical example for how decorators work in Python, but you don't need to learn the additional language construct if you don't like. Consider the following snippet. It could be more general, but that's beside the point.</p>

<pre class="lang-py prettyprint-override"><code>def memoize(f):
    cache = {}
    def _f(n):
        if n not in cache:
            cache[n] = f(n)
        return cache[n]
    return _f
</code></pre>

<p>What we've created is a function that takes another function as an argument. How do we use it? Well, we pass a function into it.</p>

<pre class="lang-py prettyprint-override"><code>def pi(n):
    # do stuff
pi = memoize(pi)
</code></pre>

<p>Take a close look at this.</p>

<ol>
<li>First we make our normal function that deals with primes.</li>
<li>Next, we pass it into this <code>memoize()</code> monster that we just made.</li>
<li>When <code>memoize()</code> sees this function (now just called <code>f</code>), it makes a cache and defines a new function <code>_f()</code>. It's this new function <code>_f()</code> that's finally returned (i.e., at the end of all this, <code>pi</code> is the same as whatever <code>_f</code> happened to be), so let's look closely at what <code>_f()</code> does.

<ol>
<li>First, <code>_f()</code> takes a look in the cache to see if we've already seen the value <code>n</code>. If not, it <strong>stores the output <code>f(n)</code></strong>, i.e. the original <code>pi(n)</code> we wanted, in the cache.</li>
<li>Next, it returns the pre-computed value straight from the cache. That's it.</li>
</ol></li>
</ol>

<p>Now we've eliminated the use of globals (behind the scenes the <code>cache</code> thing we described is stored in what's called the <em>closure</em> of <code>_f</code>), we've taken the problem of caching away from <code>pi()</code> to give <code>pi()</code> a small, single purpose, and we've created a reusable memoization mechanism that we can apply to any other function that takes exactly one hashable input.</p>

<p>Back to the decorator thing I mentioned earlier, you could just as well write</p>

<pre><code>@memoize
def pi(n):
    # do stuff
</code></pre>

<p>to memoize the <code>pi</code> function instead of applying the memoizer after the fact. It doesn't make much of a difference either way, but the latter is considered more pythonic.</p>

<p>To be able to take multiple arguments, you can start to do things with <code>*args</code> and <code>**kwargs</code> in your memoizer, but that's additional complexity without a lot of added benefits for the sake of this problem.</p>
    </div>