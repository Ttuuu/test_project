<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Eliminate global variables where practical</h2>

<p>The code declares and uses 5 global variables.  Global variables obfuscate the actual dependencies within code and make maintainance and understanding of the code that much more difficult.  It also makes the code harder to reuse.  For all of these reasons, it's generally far preferable to eliminate global variables and to instead pass pointers to them.  That way the linkage is explicit and may be altered more easily if needed.  For example, one way to do it would be to gather all of the variables into a <code>struct</code> and pass a reference to the struct to each thread instance.  The structure instance could be a local variable within <code>main</code>.</p>

<h2>Think about eliminating redundant variables</h2>

<p>Since boolean variables <code>evenready</code> and <code>oddready</code> are always in opposite states, one of them is redundant.  In fact, in this case, both are redundant since one can easily derive the same function from the value of <code>x</code>.</p>

<h2>Use appropriate C++ idioms</h2>

<p>This line is somewhat strange:</p>

<pre><code>for (; x &lt; 10;) {
</code></pre>

<p>It's much more clear to write like this:</p>

<pre><code>while (x &lt; 10) {
</code></pre>

<h2>Omit <code>return 0</code></h2>

<p>When a C++ program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so there is no need to put <code>return 0;</code> explicitly at the end of <code>main</code>.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>If you're writing <em>almost</em> identical functions, think if there's a way to consolidate them.  In this case there certainly is, as I'll demonstrate later in this answer.</p>

<h2>Think carefully about data race conditions</h2>

<p>A <code>mutex</code> is generally used to assure non-conflicting access to a shared resource.  For that reason, it's good to clearly answer the question, "what shared resource is this <code>mutex</code> protecting?"  In this case, it seems to be protecting access to <code>std::cout</code> and <code>x</code> but it doesn't do a thorough job of that.  Consider that when one thread is evaluating <code>x &lt; 10</code> (without a lock) the other might be incrementing <code>x</code> (with a lock).  That's a classic data race.  Here's a rewrite that avoids this problem:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;
#include &lt;condition_variable&gt;
#include &lt;functional&gt;
#include &lt;string_view&gt;

struct OddEven {
    int x = 1;
    std::mutex m;
    std::condition_variable cond;
};

void printTask(OddEven &amp;oe, const std::string_view &amp;label, bool odd)
{
    for (bool running{true}; running; ) {
        std::unique_lock&lt;std::mutex&gt; mlock(oe.m);
        oe.cond.wait(mlock, [&amp;oe, odd] {
            return (oe.x &amp; 1) == odd;
        });
        std::cout &lt;&lt; label &lt;&lt; oe.x &lt;&lt; std::endl;
        oe.x++;
        running = oe.x &lt; 10;
        oe.cond.notify_all();
    }
}

int main()
{
    OddEven oe;

    std::thread t1(printTask, std::ref(oe), "Odd Print", true);
    std::thread t2(printTask, std::ref(oe), "Even Print", false);
    t1.join();
    t2.join();
}
</code></pre>
    </div>