<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>I'm by no means a java programmer, just some things I noticed.</em></p>

<hr>

<h1><code>GraphVertex.equals</code></h1>

<p>This method is messy to say the least. The number of <code>return</code> in this method mixed with <code>if</code> statements with no brackets makes it hard to read. And, it looks like you only want to check one condition, anything else other than that would result in a <code>false</code> return. Now, you only have to check for a <code>null</code> value. Have a look:</p>

<pre><code>@Override
public boolean equals(Object obj) {
    return (obj == null) || (this == obj);
}
</code></pre>

<h1><code>GraphVertex.compare</code></h1>

<p>I see you've already used a ternary operator, nice. You can simplify this even further using another ternary operator. Have a look:</p>

<pre><code>public int compare(GraphVertex one, GraphVertex two) {
    return (one.value == two.value) 
        ? 0 
        : (one.value &gt; two.value) 
            ? 1 
            : -1;
}
</code></pre>

<p>I used some tabbing to make it more clear what is being compared.</p>

<h1>One line if statements</h1>

<p>It's a convention to use brackets even when there's only one line after the <code>if</code> statement. It increases readability and makes your code clearer.</p>

<h1>Constructors</h1>

<p>Unless you want to label a constructor as something other than <code>public</code>, I would keep it, for example, <code>public GraphVertex(int value) { ... }</code>.</p>

<h1><code>DirectedGraphWithWeights.getAdjacentVertices</code></h1>

<p>For this method you don't have to create the variable <code>tempNode</code>. Instead, you can return an anonymous object. Have a look:</p>

<pre><code>public Iterable&lt;WeightedEdge&gt; getAdjacentVertices(int source) {
    return adjacentVerticesByVertex.get(new GraphVertex(source));
}
</code></pre>

<h1>Better looping</h1>

<p>Instead of having one break condition, you can put that inside the while loop. This is so the <code>while</code> loop is solely dependent on that condition, instead of dependent on the <code>break</code> condition. Something like this:</p>

<pre><code>while (visitedVertices.size() == vertexSet.size()) { ... }
</code></pre>

<h1>Using <code>this</code></h1>

<p>Using <code>this</code> when  referencing instance variables can help you keep track of what variables were made in the constructor, and what were made solely in the methods of the class. It's on your discretion.</p>
    </div>