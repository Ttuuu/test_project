<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The Class</h1>
<ol>
<li><p>This is not how you use methods on a class. Firstly <code>get_score</code> is defined as if it is a <em>static method</em> but it has not been wrapped in a <code>@staticmethod</code> meaning that it is an <em>instance method</em>. Whilst you've got it so that it works because you're using it via the type not an instance. This is nothing but Python abuse.</p>
<pre class="lang-py prettyprint-override"><code>@staticmethod
def get_score(get_score_name, user_input):
    ...
</code></pre>
</li>
<li><p>Why is this a staticmethod at all?</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>Score.get_score(Score('loan_term').get_score_name(), 21)
</code></pre>
</blockquote>
<p>If you make it an instance method then you can remove the need for the <code>get_score_name</code> method.
As you can replace all <code>get_score_name</code> with <code>self.score_name</code> except the argument which will be <code>self</code>.</p>
<pre class="lang-py prettyprint-override"><code>def get_score(self, user_input):
    if self.score_name == 'loan_term' and user_input &lt;= 18:
</code></pre>
<p>This gets rid of the <code>get_score_name</code>.</p>
<pre class="lang-py prettyprint-override"><code>Score.get_score(Score('loan_term'), 21)
</code></pre>
<p>However this is still Python abuse. And so we can simplify the usage further.</p>
<pre class="lang-py prettyprint-override"><code>Score('loan_term').get_score(21)
</code></pre>
</li>
<li><p>Why is this even a class? Why not just delete all the code except <code>get_score</code> and you can just use it without lots of noise that adds nothing to your code.</p>
<pre class="lang-py prettyprint-override"><code>get_score('loan_term', 21)
</code></pre>
</li>
</ol>
<h1>Design</h1>
<blockquote>
<p>The idea is to be able to re-use this class as and when needed and to be able to modify the code outside of the main application code.</p>
</blockquote>
<p>We can see that you have 6 groups; loan_term, loan_reason, job_security, average_apr, monthly_expenses and monthly_surplus.</p>
<p>From this we can see your design is bad.
Your function breaks the Single Responibility Principle, SRP.
We can see this is making life harder right now as you have lots of <code>if get_score_name == '...' and</code> checks that can just disappear if you make these stand alone functions.
Additionally this will lead you further down a path that will make your code even worse to maintain.
You should just make these stand alone functions.</p>
<pre class="lang-py prettyprint-override"><code>def loan_term(user_input):
    if user_input &lt;= 18:
        return 5
    elif user_input &lt;= 24:
        return 4
    elif user_input &lt;= 48:
        return 3
    else:
        return 0


def loan_reason(user_input):
    if user_input == 0:
        return 3.5
    elif user_input == 1:
        return 2.0
    elif user_input == 2:
        return 1.5
    elif user_input == 3:
        return 2.5
    elif user_input == 4:
        return 1.5
    elif user_input == 5:
        return 2.0
    elif user_input == 6:
        return 0.5
    else:
        return 0.0


def job_security(user_input):
    if user_input == 0:
        return 1.0
    elif user_input == 1:
        return 2.0
    elif user_input == 2:
        return 3.0
    elif user_input == 3:
        return 4.0
    elif user_input == 4:
        return 5.0
    else:
        return 0.0


def average_apr(user_input):
    if user_input &lt;= -1.0:
        return 5
    elif user_input &lt;= -0.6:
        return 4
    elif user_input &lt; 0.5:
        return 3
    elif user_input &lt;= 1.0:
        return 2
    elif user_input &gt; 1.0:
        return 1
    else:
        return 0


def monthly_expenses(user_input):
    if user_input &lt; 0.10:
        return 5
    elif user_input &lt; 0.20:
        return 4
    elif user_input &lt; 0.30:
        return 3
    elif user_input &lt; 0.40:
        return 1
    else:
        return 0


def monthly_surplus(user_input):
    if user_input &lt; 0.20:
        return 5
    elif user_input &lt; 0.35:
        return 4
    elif user_input &lt; 0.45:
        return 3
    elif user_input &lt;= 0.60:
        return 2
    else:
        return 1


# loan term test

loan_term_score = loan_term(21)
print(f'loan term  score: {loan_term_score}')


# loan reason test

loan_reason_score = loan_reason(2)
print(f'loan reason score: {loan_reason_score}')

# job security test

job_security_score = job_security(3)
print(f'job security score: {job_security_score}')


# average apr test

average_apr_score = average_apr(1.0)
print(f'average apr score: {average_apr_score}')

# monthly expenses test

monthly_expenses_score = monthly_expenses(0.15)
print(f'monthly expenses score: {monthly_expenses_score}')

# monthly surplus test

monthly_surplus_score = monthly_surplus(0.55)
print(f'monthly surplus score: {monthly_surplus_score}')
</code></pre>
    </div>