<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll start off by saying, Hey! Good job! There's a lot of things you got right in this code, including the use of <code>with</code> for file open/close operations and checking the number of command line arguments.</p>
<p>Now I'll rip it to shreds. :|</p>
<ol>
<li><p>First, check out <a href="https://pep8.org/" rel="nofollow noreferrer">PEP-8</a>, the Python community coding standard.</p>
<p>You may find things in there you disagree with, but it's a pretty good starting point. (And if you don't match it, everyone on here will nag you for it, so ...)</p>
</li>
<li><p>Don't import <code>sys.argv</code>.</p>
<p>This is a small thing, but other coders expect to see it spelled out. You can create a local variable that references it, if you're going to do a lot of operations. But for your purposes, it's actually more clear to write:</p>
<pre><code> if len(sys.argv) != 3:
</code></pre>
</li>
<li><p>Don't declare your <code>str_counts</code> dictionary globally.</p>
<p>Global variables are bad, m'kay? Also, there's no need for this, which I will get to later.</p>
</li>
<li><p>Don't initialize your <code>str_counts</code> dictionary with data.</p>
<p>I know why you did this, but you had to read the CSV file to get the keys so you could set this up in advance, right? And there's a couple of ways to do this all-at-once, which I will get to later. So just delete this entire global variable.</p>
</li>
<li><p>Don't let your <code>with</code> blocks get too long.</p>
<p>You have two items in your context. But you only actually need one at a time. So rewrite that code to do the minimum you have to do with each thing:</p>
<pre><code>with open(sys.argv[2]) as f:
    sequence = f.read()

with open(sys.argv[1], newline='') as f:
    db = csv.DictReader(f)
    assert 'name' in db.fieldnames
</code></pre>
</li>
<li><p>Initialize your counts dictionary on the fly. Or not.</p>
<p>Once you know the field names, which it turns out are also the STR sequences, you could create an initialized dictionary on the fly.</p>
<pre><code>str_counts = {}
for str in db.fieldnames:
    if str != 'name':
        str_counts[str] = 0
</code></pre>
<p>This approach uses a <em>dict comprehension</em> to do the same thing:</p>
<pre><code>str_counts = {str: 0 for str in db.fieldnames if str != 'name'}
</code></pre>
<p>It turns out that this is a common need. People frequently need a dictionary initialized with default values. (Gene Rayburn: This thing is <em>sooo commmmonnnn!</em>  Audience: How common is it?)</p>
<p>It's so common that Python has a special type in the standard library just for this case! Presenting: <a href="https://docs.python.org/3/library/collections.html?highlight=collections%20defaultdict#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a></p>
<p>A <code>defaultdict</code> is a dictionary that knows how to construct a "default value". Because you tell it how! All you need to do is create the dict with a "callable" (a function, lambda, classname, etc.) and it will either look up the key you give it and return the value, or not find the key you give it, call the callable, and return that instead.</p>
<p>For your purposes, the default value is <code>int</code>, a function which creates a default integer if you call it. And default integers start with a value of 0, so ... <code>#winning!</code></p>
<pre><code># at top of file
import collections

# ...
# later in code:
str_counts = collections.defaultdict(int)
</code></pre>
</li>
<li><p>Don't guard a regex operation with a regex operation of similar complexity.</p>
<p>You have a <code>re.findall</code> that is guarded by a <code>re.search</code>. With basically the same pattern, and the same search string, and no other help.</p>
<p>You could be doing this to save time, but that's a non-starter since <code>search</code> and <code>findall</code> would have the same execution time if the STR does not appear in the sequence.</p>
<p>You could be doing this to avoid some other operation. But you're not. And it's pretty trivial to write your code in such a way that the "found" path and the "not found" path both produce the same results. Do that instead.</p>
<p>(Note: there are plenty of times when you <em>do</em> want to put a guard of some kind on an operation. This just isn't one of those times.)</p>
<p>If <code>max</code> returns 0, and you compute <code>0 / len(field)</code>, you'll be storing 0, which is fine.</p>
</li>
<li><p>Don't delete the names from your database.</p>
<p>Your comparison starts by deleting the <code>'name'</code> fields and then using a dict comprehension to copy the other fields to a new dict. Instead of doing that, just use <code>if</code> to exclude the name fields:</p>
<pre><code>compare = {k: int(v) for k, v in row.items() if k != 'name'}
</code></pre>
</li>
<li><p>Note that dictionaries can be compared for equality using the <code>==</code> operator:</p>
<pre><code>if compare == str_counts:
</code></pre>
</li>
<li><p>A great way to document your code, for problems like these, it to create a "header comment" at the top of the file using Python's triple-quote string mechanism (""" string """) and copy the problem text into it. That gives you something to refer to, and makes the program file entirely self-contained.</p>
</li>
</ol>
    </div>