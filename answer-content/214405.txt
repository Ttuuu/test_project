<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a Unit Testing perspective, I would say many of the hard-coded strings in your <code>Console.WriteLine()</code> calls should be retrieved from some function that generates those strings.</p>

<p>Also, it will be near impossible to unit test whether or not your switch/case for getting the user's input on Hit/Stand without having those be their own separate functions.</p>

<p>Each action/input/output should have it's own function that will either return something or set a property on your Player class in order to Unit Test properly. This will also increase readability throughout your code, and will make debugging <strong>far</strong> easier, as you'll likely only have to step through a function or two to find any problems rather than stepping through that massive <code>PlayerAction</code> function.</p>

<p>This next suggestion is purely personal choice, and maybe nit-picky, but this block here lacks consistency:</p>

<pre><code>            if (currentPlayer.GetHandValue() &lt; 16)
                Console.WriteLine($"{currentPlayer.Name} is not allowed to stands when hand value is less than 16.");
            else
            {
                Console.WriteLine($"{currentPlayer.Name} stands.");
                Thread.Sleep(1500);
                // Show player's hand
                currentPlayer.ShowUpCard();
                Thread.Sleep(1500);
                Console.WriteLine($"{currentPlayer.Name}'s turn is over.");
                Thread.Sleep(1500);
                playerTurnContinue = false;
            }
</code></pre>

<p>Your <code>if</code> statement doesn't use <code>{</code> <code>}</code>, but your <code>else</code> does. </p>
    </div>