<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems <strong>OK</strong></p>
<p>We can add a little flavor to it:</p>
<ol>
<li><p>Don't use string concatenation, but use <code>f"{strings}"</code> or <code>"{}".format(strings)</code></p>
</li>
<li><p>Your modify rule, can be simplified</p>
<p>The <code>if</code> <code>else</code> don't differ that much, you can use a (Python)ternary to calculate the variables beforehand</p>
</li>
<li><p>Consider to chop up the lines, to make it a little more readable</p>
</li>
<li><p>Functions and variables should be <code>snake_case</code> according to PEP8</p>
</li>
<li><p>Use a <code>if __name__ == '__main__'</code> guard</p>
</li>
<li><p>As mentioned, you could use <code>os.system("command")</code> instead of <code>subprocess</code></p>
<p>But honestly I would stick with <code>subprocess</code>, since it will give greater control over how commands are executed</p>
</li>
</ol>
<h1>Code</h1>
<pre><code>import subprocess, ctypes, os, sys
from subprocess import Popen, DEVNULL

def check_admin():
    """ Force to start application with admin rights """
    try:
        isAdmin = ctypes.windll.shell32.IsUserAnAdmin()
    except AttributeError:
        isAdmin = False
    if not isAdmin:
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, __file__, None, 1)

def add_rule(rule_name, file_path):
    """ Add rule to Windows Firewall """
    subprocess.call(
        f"netsh advfirewall firewall add rule name={rule_name} dir=out action=block enable=no program={file_path}", 
        shell=True, 
        stdout=DEVNULL, 
        stderr=DEVNULL
    )
    print(f"Rule {rule_name} for {file_path} added")

def modify_rule(rule_name, state):
    """ Enable/Disable specific rule, 0 = Disable / 1 = Enable """
    state, message = ("yes", "Enabled") if state else ("no", "Disabled")
    subprocess.call(
        f"netsh advfirewall firewall set rule name={rule_name} new enable={state}", 
        shell=True, 
        stdout=DEVNULL, 
        stderr=DEVNULL
    )
    print(f"Rule {rule_name} {message}")

if __name__ == '__main__':
    check_admin()
    add_rule("RULE_NAME", "PATH_TO_FILE")
    modify_rule("RULE_NAME", 1)
</code></pre>
    </div>