<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Presuming that you are not asking for code-golfing recommendations, here are a few observations.</p>

<p>It would be better to separate the input operations from the code that determines the number of winning matches.  For example, separating the concerns lets you test the input code separately from the calculating code.  Or lets you change where the input comes from: the command line, a file, a url, user input on a web page, etc.</p>

<p>The current code has a O(n^2) complexity.  It is obvious that the outer <code>for index in range(0, N)</code> loop runs <code>N</code> times.  What may not be so obvious is that each call to <code>min</code>, <code>max</code>, and <code>remove</code> also processes the entire list, for another N times (and there are 8 calls each time through the outer loop). That's O(N * 8N) = O(N^2). So if the length of the lists is doubles, the time spent on the loop goes up by about 4 times.  (The lists get shorter each loop, so in the average, <code>min</code> etc. process half the loop but O(N * 8N/2) is still O(N^2)).  Sorting the lists would be O(N log N).</p>

<p>The second loop that counts the wins can be eliminated.  You already know that you win the match in the <code>else</code> clause of the first loop.  Just count the winners there. </p>

<p>Lastly, it is not necessary to actually make the pairings to determine how many would be won.</p>

<p>Put that together, and you get something like:</p>

<pre><code>def calculate_winners(us, them):
    """count how many matches we would win by choosing 
       which wrestlers to pair up.
    """
    us = sorted(us, reverse=True)     # largest to smallest
    them = sorted(them, reverse=True)

    winners = 0
    us_index = 0
    for opponent in them:
        if us[us_index] &gt; opponent:
            winners += 1
            us_index += 1

    return winners
</code></pre>
    </div>