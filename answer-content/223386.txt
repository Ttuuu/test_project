<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you have already noticed, this can be viewed as a case of mutual recursion. To demonstrate this I give the following mutually recursive definitions:</p>

<pre class="lang-clj prettyprint-override"><code>(defn sort-parts [work] (lazy-seq (sp-loop work)))

(defn sp-loop [[part &amp; parts]]
  (if-let [[pivot &amp; xs] (seq part)]
    (sp-loop ;or recur for tco
      (let [smaller? #(&lt; % pivot)]
        (list*
          (filter smaller? xs)
          pivot
          (remove smaller? xs)
          parts)))
    (when-let [[x &amp; parts] parts]
      (cons x (sort-parts parts)))))
</code></pre>

<p>Because <code>sp-loop</code> is needed only in one place inside <code>sort-parts</code>, we can replace the previous with the following:</p>

<pre class="lang-clj prettyprint-override"><code>(defn sort-parts [work]
  (lazy-seq
    ((fn sp-loop [[part &amp; parts]]
       (if-let [[pivot &amp; xs] (seq part)]
         (sp-loop ;or recur for tco
           (let [smaller? #(&lt; % pivot)]
             (list*
               (filter smaller? xs)
               pivot
               (remove smaller? xs)
               parts)))
         (when-let [[x &amp; parts] parts]
           (cons x (sort-parts parts)))))
     work)))
</code></pre>

<p>Of course, if we use <code>recur</code>, <code>sp-loop</code> can be anonymous. But instead of defining and calling an anonymous function which only executes a loop, we can explicitly write a loop, arriving this way at the definition given in the book.</p>

<p>Moving further, noticing that in the mutually recursive definitions there is very little code inside <code>sort-parts</code> apart from the call of <code>sp-loop</code> (this call is just being wrapped in a <code>LazySeq</code>'s thunk), we can define <code>qsort</code> using only one recursively defined function and no (explicit) loops, as shown below:</p>

<pre class="lang-clj prettyprint-override"><code>(defn qsort [xs]
  (lazy-seq
    ((fn sort-parts [[part &amp; parts]]
       (if-let [[pivot &amp; xs] (seq part)]
         (recur ;or sort-parts for no tco
           (let [smaller? #(&lt; % pivot)]
             (list*
               (filter smaller? xs)
               pivot
               (remove smaller? xs)
               parts)))
         (when-let [[x &amp; parts] parts]
           (cons x (lazy-seq (sort-parts parts))))))
     (list xs))))
</code></pre>

<p>And if we drop laziness, we can use just one loop:</p>

<pre class="lang-clj prettyprint-override"><code>(defn qsortv [xs]
  (loop [done []
         [part &amp; parts] (list xs)]
    (if-let [[pivot &amp; xs] (seq part)]
      (recur
        done
        (let [smaller? #(&lt; % pivot)]
          (list*
            (filter smaller? xs)
            pivot
            (remove smaller? xs)
            parts)))
      (if-let [[x &amp; parts] parts]
        (recur (conj done x) parts)
        done))))
</code></pre>

<p>Finally, in <a href="https://stackoverflow.com/q/55881144/11419548">this question</a> you can see a similar case of mutual recursion and laziness but without tail calls.</p>
    </div>