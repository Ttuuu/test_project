<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding possible performance differences: yes, they are possible. But I'm also pretty sure you are not measuring it correctly. You need to compile with optimizations turned on, that is e.g. for gcc / clang you'll need to at least add <code>-O3</code> to your compiler flags, also note that figures you get will strongly depend on architecture, used compiler etc. You may want to inspect some benchmark frameworks for C++, e.g. <a href="http://quick-bench.com/" rel="nofollow noreferrer">Quick Bench</a>.  </p>

<p>That being said, there are some other things you can improve. Since this is tagged as C++, you should use standard library, e.g. <code>std::array</code> from header <code>array</code> as the storage for your matrix class, you should probably also get familiar with <code>chrono</code> if you insist on measuring time "by hand", particularly <code>steady_clock</code> might be of interest to you (this part is a guess, since you have not included actual implementation for the <code>QueryPerformance...</code> functions).<br>
I'd also recommend making the <code>Matrix</code> class template more container like- define proper constructors, member access functions, iterators (possibly) inside the class. On the other hand, I'd remove the remaining stuff from the class and make those functions free and operating on the matrix class e.g. the <code>invert</code> declaration could look like this:</p>

<pre><code>template&lt;std::size_t Dim, typename T&gt;
using SquareMatrix = Matrix&lt;Dim, Dim, T&gt;;

template&lt;std::size_t Dim, typename T&gt;
SquareMatrix&lt;Dim, T&gt; invert (SquareMatrix&lt;Dim, T&gt; const&amp; mat);
</code></pre>

<p>Also note that there is a very small number of types on which the algorithms work, this could be manifested using some <code>SFINAE</code> (that is probably a bit more advanced topic, but there is plenty of resources online on how to use that technique). </p>

<p>The <code>Matrix4x4</code> is not needed- this is a very bad implementation of <code>Matrix</code> constructor implementation, should be handled by proper <code>Matrix</code> constructor instead.  </p>

<p>Use <code>enum class</code> instead of plain <code>enum</code>, it's type-safe and prohibits implicit conversions from underlying numeric type (this will also force you to write the algorithm choice part properly- the ifs around the underlying values are not pretty).  </p>

<p>Lastly, force your compiler to do some work for you: add <code>-Werror -Wall -Wpedantic</code> to your compiler flags, so that your code won't compile if you produce warnings (<code>-Wall</code> is a must to avoid a ton of undefined / unspecified behavior). If you are using MVSC compiler then you'll need <code>/W3</code> instead.</p>
    </div>