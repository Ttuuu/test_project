<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have defined the morse code mapping arrays as method variables. This means that they are allocated from stack every time you call the method. This is fairly ineficient. You should move them to class constants:</p>

<pre><code>private static final String[] MORSE_CHAR
        = {".-",
            "-...",
    ...

private static final String[] MORSE_NUMBER
        = {".----",
            "..---",
    ...


public static String toMorse(byte[] bytes) {
    ...
}
</code></pre>

<p>But we can make it better. Morse conversion in this case is fundamentally mapping characters to strings, so why don't we encapsulate the conversion to a separate class to comply with the <em>single responsibility principle</em>? We can take advantage of Unicode being compatible with ASCII and define the mappings as a simple array where the array index represents a ASCII code points and the value in the array represents the Morse code that represents the ASCII character. And look at that, Java has an interface for us... :) We have to make some special cases for word separators, since we are using data types that cannot fully represent the intricacies of Morse code (e.g. space is mapped to space). Ideally we would map to dots, dashes and delays of different lengths (or if we want to split hairs, a dash is just a dot that lasts three times as long, so the mapping would be to sounds and silences of certain lengths).</p>

<p>A really fancy solution would return <code>Optional&lt;String&gt;</code> instead of a nullable String.</p>

<pre><code>import java.util.function.IntFunction;

/**
 * Convert Unicode code points to morse code strings.
 * Code points that can not be represented in morse are retuned as
 * null. Space is returned as space.
 */
public class CodePointToMorseStringConverter implements IntFunction&lt;String&gt; {

    public static final IntFunction&lt;String&gt; INSTANCE = new CodePointToMorseStringConverter();

    private static final String[] ASCII_TO_MORSE = {
        null, // 0
        ... // 30 nulls removed for brevity
        null, // 31
        "", // 32, space
        "-.-.--", // 33, !
        ".-..-.", // 34, "
        null, // 35
        null, // 36
        null, // 37
        null, // 38
        ".----.", // 39, '
        "-.--.-", // 40, ( (brackets)
        "-.--.-", // 41, ) (brackets)
        null, // 42
        null, // 43
        "--..--", // 44, ,
        "-....-", // 45, -
        ".-.-.-", // 46, .
        "-..-.", // 47, / (fraction bar)
        "-----", // 48, 0
        ".----",
        "..---",
        "...--",
        "....-",
        ".....",
        "-....",
        "--...",
        "---..",
        "----.", // 57, 9
        "---...", // 58, :
        null, // 59
        null, // 60
        "-...-", // 61, =
        null, // 62
        "..--..", // 63, ?
        ".--.-.", // 64, @
        ".-", // 65, A
        "-...",
        "-.-.",
        "-..",
        ".",
        "..-.",
        "--.",
        "....",
        "..",
        ".---",
        "-.-",
        ".-..",
        "--",
        "-.",
        "---",
        ".--.",
        "--.-",
        ".-.",
        "...",
        "-",
        "..-",
        "...-",
        ".--",
        "-..-",
        "-.--",
        "--..", // 90, Z
        null, // 91
        null, // 92
        null, // 93
        null, // 94
        null, // 95
        null, // 96
        ".-", // 97, A
        "-...",
        "-.-.",
        "-..",
        ".",
        "..-.",
        "--.",
        "....",
        "..",
        ".---",
        "-.-",
        ".-..",
        "--",
        "-.",
        "---",
        ".--.",
        "--.-",
        ".-.",
        "...",
        "-",
        "..-",
        "...-",
        ".--",
        "-..-",
        "-.--",
        "--.." // 122, Z
    };

    @Override
    public String apply(int i) {
        if (i &gt;= 0 &amp;&amp; i &lt;= ASCII_TO_MORSE.length) {
            return ASCII_TO_MORSE[i];
        } else {
            return null;
        }
    }
}
</code></pre>

<p>Conversion then becomes a stream operation. We can wrap this into a method if we like. Or even make a <code>Function&lt;String, String&gt;</code>. But that'll be an exercise for later.</p>

<pre><code>String text = "Hello world!";
String morse = text.codePoints()
    .mapToObj(CodePointToMorseStringConverter.INSTANCE)
    .filter(Objects::nonNull)
    .collect(Collectors.joining(" "));
</code></pre>
    </div>