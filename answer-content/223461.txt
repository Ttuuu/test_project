<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know this isn't really what you're asking for, but I have a couple suggestions about how the code is setup and written.</p>

<p>Coming from languages that use <code>long</code> as a type, a line like:</p>

<pre><code>self.storedURLS[tiny] = long
</code></pre>

<p>Is a little jarring initially. No, <code>long</code> is not a type or builtin in Python, but I think it would be neater if a more descriptive name was used, and one that doesn't clash with other languages. I'd probably write it closer to</p>

<pre><code>class TinyURL:
    def __init__(self):
        self.storedURLS = {}

    def encode(self, full_address):
        minified_address = hex(hash(full_address))
        self.storedURLS[minified_address] = full_address

        return minified_address

    def decode(self, minified_address):
        if minified_address in self.storedURLS:
            return self.storedURLS[minified_address]
        else:
            return "Tiny URL is not in the database"
</code></pre>

<hr>

<p>I also disagree with a String message being returned in the result of a lookup failure in <code>decode</code>. What if the caller wants to check for failure? They'd have to check the return against a known error message, which is clunky.</p>

<p>I'd return <code>None</code> in the event of failure, then document that fact.</p>

<pre><code>def decode(self, minified_address):
    """Returns the full address associated with the given minified address,
        or None in the event of an invalid minified_address.
    """
    return self.storedURLS.get(minified_address, None) # None is the default
</code></pre>

<p>That way, you can easily handle a failed lookup:</p>

<pre><code>t = TinyURL()

full_address = t.decode("bad address")

if full_address:
    print("valid")

else:
    print("invalid")
</code></pre>

<p>And I <em>think</em> with the new assignment expression, you'll be able to write that even more succinctly:</p>

<pre><code>if full_address := t.decode("bad address"):
    print("valid", full_address)

else:
    print("invalid")
</code></pre>

<p>Although apparently 3.8 isn't released yet? I think the above should work, although I don't think I can test it quite yet.</p>
    </div>