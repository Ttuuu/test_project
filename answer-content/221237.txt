<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Neither <code>BaseState</code> nor any of its derived classes contain any data.  You don’t need to keep creating instances of these state objects.  You could create one of each as global constants.  Then, you wouldn’t need the special <code>__eq__</code> method, since you could simply test identity equality.</p>

<p>You could make <code>BaseState</code> and its derived classes callable objects, by defining a <code>__call__(self, letter, context)</code> method, instead of a <code>process(self, letter, context)</code> method.  You could then invoke the state processing by calling <code>self.state(letter, self)</code>.</p>

<p>Of course, an class with no data and only a single function is effectively just a function, and functions are first class objects in Python, so you can ditch the classes all together, and store the function as the “state”.  Eg)</p>

<pre><code>def repeated_guess_state(letter, context):
    """An intermediate state"""
    context.message = "You’ve repeated a guess!"
    context.state = holding_state
</code></pre>

<p>But wait!  Why are these outside of the <code>Context</code> class?  We have to pass <code>context</code> to each state handler.  If these were methods defined on the <code>Context</code> class, they’d automatically get <code>self</code>, which is the context, passed to them effectively for free:</p>

<pre><code>class Context:

    # ... __init__, won, lost, hangman_word methods omitted

    def process(self, letter):
        self.state(letter)

    def repeated_guess_state(self, letter):
        """An intermediate state"""
        self.message = "You’ve repeated a guess!"
        self.state = self.holding_state
</code></pre>

<p>Now these state processors (methods) actually part of the <code>Context</code> class, so that don’t have to reach into another class and manipulate the private internals.  They have legitimate access to the internal details.  So these data members should be declared private ... which in Python is little more than the convention of a leading underscore (eg, <code>self._lives</code>, <code>self._state</code>, and so on).</p>

<hr>

<blockquote>
  <p>is there a nicer way of having <code>DeadState</code> / <code>WonState</code> where I don't have to use <code>pass</code> for the <code>process</code></p>
</blockquote>

<p>Nothing wrong with using pass.  You have a function the does nothing.</p>

<p>You could make the states actually print the win/loss messages, and then transition to a “finished” state.  The finished state would likely have the <code>pass</code> statement, though.  Alternately, you could use <code>None</code> as the finish state, and loop <code>while self.state:</code> instead of <code>while True:</code></p>

<blockquote>
  <p>I've copied the style of docstrings from Flask Restless Github. Is this correct use of docstrings?</p>
</blockquote>

<p>The exact format of the docstrings is dependant on the tool you use to automatically generate documentation with.  Codes like:</p>

<pre><code>:meth:`.process`
</code></pre>

<p>are used by <a href="http://sphinx-doc.org" rel="nofollow noreferrer">“Sphinx”</a> documentation generator.  See it for details.</p>

<blockquote>
  <p>is there better way of combining user input and the Context class than the .startGame() method? I've seen it mentioned on Stack Overflow you shouldn't have input statements inside classes.</p>
</blockquote>

<p>There is nothing wrong with asking for input inside of a class.  But ...</p>

<p>Separating I/O from game logic allows you to ...</p>

<ul>
<li>create a text-based console game,</li>
<li>create a Graphical UI based game, using the same game logic</li>
<li>test the game code using automated test software</li>
</ul>

<p>In the first case, the input comes from <code>input()</code> and goes to <code>print()</code> statements, in the second it comes from &amp; goes to (say) TkInter, and the third it comes from and goes to test code.</p>

<p>You’ve mostly separated the I/O already.  Wherever the input comes from, you need to pass it to <code>self.process(...)</code>, and the output (mostly) goes to <code>self.message</code>.  You just need to factor out the console I/O, and maybe places that into <code>class ConsoleHangman(Context):</code>.</p>

<p><code>class TkInterHangman(Context):</code> left as exercise to student.</p>
    </div>