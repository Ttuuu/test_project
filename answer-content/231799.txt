<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Afterthought / tldr;</h2>

<p>If you start naming your methods &amp; variables descriptively, using the suggestions below &amp; finding more information/examples online it will be a huge 'level up' in your programming. Everything else will become easier.</p>

<h2>General coding standards</h2>

<p>Use <code>static final</code> variables for messages. Alternatively these could be taken from a properties file</p>

<p>Variable names that are multiple words are always separated somehow. With static final variables are all caps separated by a <code>_</code>. Class names are UpperCamelCase &amp; variables are lowerCamelCase.</p>

<p>Declare variables when they are used. As locally scoped as possible</p>

<p>Separate arguments/parameters with a space</p>

<p>Use the condition inside the while/do while loop. Try to avoid <code>while(true)</code>.</p>

<p>Use spaces before/after <code>=</code>.</p>

<p>Don't use magic Strings/numbers</p>

<p>Use a white space to separate conditionals</p>

<p>Use a line of white space to separate methods</p>

<p>Don't do this:</p>

<pre><code>private StatusOfArea statusOfArea;
{
    statusOfArea = StatusOfArea.CLOSED;
}
</code></pre>

<p>Each class/enum should be in it's own Java file.</p>

<p><code>Command</code> (Open / Mark) should be it's own ENUM or class.</p>

<p>Take advantage of the <code>toString()</code> method. Also keep logic contained in the proper class/enum. You should be printing the grid by calling the <code>toString()</code> on each object. Note that <code>System.out.print</code> will invoke the <code>toString</code> method.</p>

<p>You can compare Strings without worrying about case by using the String method <code>equalsIgnoreCase</code>.</p>

<p>I am not sure what <code>printPole</code> means but it looks like it's printing out the grid. Even if you want the icon representing the item and what's printed out to be different, the logic/symbols should be contained in the Enum itself. For example, by having another property on the ENUM.</p>

<p>Separate unrelated logic into a separate class. For example, <code>Minesweeeper</code> should not be responsible for checking if a String is numeric. I mentioned this in the other CR linked. </p>

<p>Although it's kind of cheating, (doesn't technically follow best practices (single responsibility)) An easy way to do this is to have a <code>Helper</code> class or a <code>Util</code> class. This class can include all of your functions such as checking if a String is numeric. It would not validating a Move for example, though. That would either be in a <code>MoveValidation</code> class, or the <code>Minesweeper</code> class. If you are confused as what can go in this Utility class, leave it for last and put all "Other" methods in it. (Methods that you can't find a class for or justify creating a class for)</p>

<p>It's better to be converting a String all in one place. For example maybe one day you have troubles with certain input being formatted wrong or certain numbers are throwing an error. It's much easier if you have a single method. </p>

<p>It's also good when the method changes often. An example is if you've had to change methods often, such as moving away from <code>apache.utils.String</code>. Your class would be a simple wrapper for some or all of the functions.</p>

<p>Never put <code>== true</code> or <code>== false</code> in a condition. It's redundant. Use <code>!</code> for false.</p>

<p>Don't run methods multiple times when you don't need to. For example in your if statement you're parsing the input as <code>int</code> twice.</p>

<p>Printing an error and returning null could lead to a <code>NullPointerException</code> or other issues. It's possible you may just look at the last error &amp; not see your error message. I suggest throwing an Exception instead. You could throw a <code>RuntimeException</code> if you want.</p>

<p>Here we want the numberOfBombs selected by the user to be less than the total area. It's not crystal clear though. You could make a variable named <code>totalSpacedOnGrid</code>, or you could create a method called <code>getTotalNumberOfSpaces</code> and input area as a paramater. However I think a comment is best in this situation.</p>

<p>(area.length * area[0].length) &gt;= numberOfBombsSelectedByUser</p>

<p>Users prefer reading "greater than" rather than "&gt;" in messages that the user sees.</p>

<p>Declare variables as locally as possible.</p>

<p>Take advantage of <code>String.format</code>. Lots to be said here, information available online.</p>

<h2>Java Streams</h2>

<p>Lots of cases here are good candidates for using Streams if you're using Java 8+</p>

<h2>Naming variables</h2>

<p>Avoid "I" or "we" in naming variables/methods.</p>

<p><code>Coordinate</code> is a better name than <code>AreaWithXAndY</code>. The alternative to this class is an array of 2 ints. (<code>int[2]</code>)</p>

<p><code>isItWin</code> should be renamed <code>isWin</code>.</p>

<p>Avoid double negatives. <code>weHaveNotGotAnyEmptyAreaThatNotCheckedAndWeMarkedOnlyBombs</code> is an awkward read. If you are checking if the player has won or not, you can name the method <code>playerHasWon</code> then use a JavaDoc to explain the conditions.</p>

<p><code>howManyBombs</code> reads like a question. It should not be a variable name. A better one would be <code>numberOfBombs</code>. If you'd like to be explicit that it was chosen from the user, <code>numberOfBombsSelectedByUser</code>. However note your naming should only relate to the scope it's in, not the whole class. So in your <code>fillAreaWithBomb</code> method, we don't care if the parameter came from the user or not. So don't name it in relation to where it came from.</p>

<p>HOW_MANY_BOMBS is not a static constant, so it should be named howManyBombs. (But changed again as I mentioned above). For more info on naming conventions for 'final but not static' <a href="https://softwareengineering.stackexchange.com/questions/252243/naming-convention-final-fields-not-static">see here</a>.</p>

<p><code>Area</code> is not a good class name. It only represents one spot in the total area. Tbh I cannot think of a good name. It's a "Square" or a "Mark" I guess.</p>

<h2>playerTurnsAndIsPlayersTurnInBomb</h2>

<p><code>playerTurnsAndIsPlayersTurnInBomb</code> is not correct. By the name it suggests it'll return false if it's not the players turn (but it's always the players turn since theirs only 1 player). This method should also be broken up.</p>

<p>This method should not be determining a loss. It's doing way too much. Try to think in terms of the method, rather than the whole class.</p>

<h2>Use Objects, don't list all methods as static</h2>

<p>A common beginner mistake is to make all methods <code>static</code> since you get a warning when calling them in the main method. This is a bad habit, you should stop it now. </p>

<p>The best way to break out of bad habits is to never learn them (You can't unlearn things but just wanted to mention you've learned the wrong way to get around that warning). Instead you should be calling the methods on an instance of a <code>Minesweeper</code> object</p>

<h2>Don't over complicate logic</h2>

<p>Methods should be doing 1 thing. Validation could be a method (I mentioned this in the other Codereview).</p>

<p>Never do <code>false == 0 &lt;..</code> or <code>!0 &lt; ...</code>. Instead use the <code>&gt;=</code> (greater than or equal to) symbol.</p>

<h2>Don't ignore warnings</h2>

<p>When you see depreciated warnings assuming you are using an IDE you should go into the method and see what alternative method you should be using. If you're not using an IDE try googling the method to see a non-depreciated alternative.</p>

<h2>Don't repeat yourself</h2>

<p>Your <code>fillAreaWithBombs</code> and <code>fillAreaWithEmptyArea</code> could be refactored to reduce repeating yourself. What if you had a method that filled an area with the value passed as a parameter. You could also have a boolean to only set if the field is null.</p>

<p>Either set all fields to 'empty' then add bombs (no checking for null fields), or set appropriate bombs then add the null fields to 'empty' (with checking to ensure you don't overwrite bombs).</p>

<p>A third option is to use <code>null</code> as your <code>EMPTY</code>. Then just fill bombs.</p>

<h2>Main logic is overly complicated</h2>

<p>Your area classes are overly complicated. You should just have an ENUM which states what a space could be, then have a 2d array of that enum.</p>

<p>If you want the mark/spot to have an X/Y that could be a property of the ENUM, or you could make it a class instead of an ENUM (As you have now). However I don't see it being necessary. Since it's inside a 2d array, you need the X/Y to access it anyway. So you'll never need to get it from the spot.</p>

<p>No need to use an ArrayList for filling the 2D array. Whenever you write this kind of logic (In this case, getting X random numbers between y-z without duplicates), it should be placed into it's own method and be documented or clearly written. Unless you are sure it's the 'best way' of doing it, chances are it could be refactored later. It's also important for other developers reading it to understand it.</p>

<p>I don't know what <code>getAllAreasAround</code> is doing exactly but you don't need it. It's overly complicated. Same for <code>getAllAreasAroundWithTheirXandY</code>.</p>

<h2>Suggestions for additional features</h2>

<p>Don't let the player select the same place twice</p>

<p>Count how many turns the player has made. Alternatively you could count based on what the board looks like at the end</p>

<p>Add a debug option to let you see the bombs on the grid. For example, if an argument is given on the command line to 'debug'.</p>

<p>Add a timer &amp; 'number of bombs not flagged' counter just like Microsoft minesweeper.</p>

<p>Show the full grid when the player loses/wins.</p>

<h2>Modified code:</h2>

<pre><code>package Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import static Test.Utility.isNumeric;
import static Test.Utility.convertSingleDigitIntegerToCharacter;
import static Test.Utility.getRandomCoordinatesWithoutDuplicates;

public class Minesweeper {
    private static final String GREETING_MESSAGE = "Hi, lets play minesweeper!";
    private static final String PICK_X_AND_Y_AREA_MESSAGE = "Pick x.length and y.length of area(print \"x y\"): ";
    private static final String NUMBER_OF_BOMBS_PROMPT = "print number of bombs: ";
    private static final String PROMPT_USER_FOR_COMMAND = "Print \"open x y\", if u want open this area, print \"mark x y\", if u want mark this area as bomb or unmark this area";

    private static final String INCORRECT_COMMAND_NUMBER_OF_ARGUMENTS = "fill out the form correctly!";
    private static final String INVALID_COMMAND = "first work should be equal \"open\" or \"mark\"!";
    private static final String COMMAND_NOT_A_NUMBER = "x and y should be numbers!";
    private static final String INVALID_COORDINATE = "x and y should be in area! P.S.: area.lengthY=%s. area.lengthX=%s";

    private static final Scanner SCANNER = new Scanner(System.in);

    public void play() {
        boolean isWin = false;

        System.out.println(GREETING_MESSAGE);
        Mark[][] grid = getLengthsOfAreaFromUser(SCANNER);

        final int numberOfBombs = getNumberOfBombsFromUser(grid, SCANNER);
        System.out.println("hi");
        fillArea(grid, numberOfBombs);

        while(true) {
            printGrid(grid, true);

            Mark mark = playerMakeAMove(grid, SCANNER);

            if(mark == Mark.BOMB) {
                isWin = false;
                break;
            }
            else if(playerHasWonGame(grid)) {
                isWin = true;
                break;
            }
        }

        if(isWin) {
            printGrid(grid, false);
            System.out.println("U won!");
        }
        else {
            printGrid(grid, false);
            System.out.println("Defieat!");
        }
    }

    private boolean playerHasWonGame(Mark[][] area) {
        for (Mark[] markArray : area) {
            for (Mark mark : markArray) {
                if (mark == Mark.EMPTY) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * Prompt the user to open a location or mark a location &amp; return the updated {@link Mark} at the location 
     */
    private Mark playerMakeAMove(Mark[][] area, Scanner scanner) {
        CommandSelected selectedCommand = getValidCommandFromUser(scanner, area);
        int x = selectedCommand.getCoordinate().getX();
        int y = selectedCommand.getCoordinate().getY();

        Mark markOnArea = area[y][x];
        if(selectedCommand.getUserOption() == UserOption.OPEN) {
            if(markOnArea == Mark.BOMB) {
                return Mark.BOMB;
            }
            else {
                int numberOfBombsSurrounding = countBombsAtLocations(area, getSurroundingCoordinates(area, false, selectedCommand.getCoordinate()));

                if (numberOfBombsSurrounding == 0) {
                    area[y][x] = Mark.OPEN;
                    openAllAround(x, y, area);
                }
                else {
                    // E.G convert from 1 to "Mark.ONE_BOMB".
                    char character = convertSingleDigitIntegerToCharacter(numberOfBombsSurrounding);
                    area[y][x] = Mark.valueOf(character);
                }

                return area[y][x];
            }
        }
        else {
            area[y][x] = Mark.MARKED_AS_BOMB;
            return Mark.MARKED_AS_BOMB;
        }
    }

    private CommandSelected getValidCommandFromUser(Scanner scanner, Mark[][] area) {
        while (true) {
            System.out.println(PROMPT_USER_FOR_COMMAND);
            String[] commandAndXAndY = scanner.nextLine().split(" ");

            if(commandAndXAndY.length != 3) {
                System.out.println(INCORRECT_COMMAND_NUMBER_OF_ARGUMENTS);
            }
            else {
                String commandSelected = commandAndXAndY[0];
                String xSelected = commandAndXAndY[1];
                String ySelected = commandAndXAndY[2];

                if(!commandSelected.equalsIgnoreCase("open") &amp;&amp; commandSelected.equalsIgnoreCase("mark")) {
                    System.out.println(INVALID_COMMAND);
                }
                else if(!isNumeric(xSelected) || !isNumeric(ySelected)) {
                    System.out.println(COMMAND_NOT_A_NUMBER);
                }
                else if(!isValidCoordinate(Integer.parseInt(xSelected), Integer.parseInt(ySelected), area)) {
                    System.out.print(String.format(INVALID_COORDINATE, area.length, area[0].length));
                }
                else {
                    return new CommandSelected(UserOption.fromValue(commandSelected), new Coordinate(Integer.parseInt(xSelected), Integer.parseInt(ySelected)));
                }
            }
        }
    }

    private void openAllAround(int x, int y, Mark[][] area) {
        List&lt;Coordinate&gt; coordinatesInArea = getAllSurroundingCoordinates(area, false, x, y);

        for(Coordinate coordinate : coordinatesInArea) {
            Mark markAtLocation = area[coordinate.getY()][coordinate.getX()];

            if (!hasLocationBeenMarked(markAtLocation) &amp;&amp; Mark.BOMB != markAtLocation) {
                int numberOfBombsSurrounding = countBombsAtLocations(area, getSurroundingCoordinates(area, false, coordinate));

                if (numberOfBombsSurrounding == 0) {
                    area[coordinate.getY()][coordinate.getX()] = Mark.OPEN;
                    openAllAround(coordinate.getX(), coordinate.getY(), area);
                }
                else {
                    // E.G convert from 1 to "Mark.ONE_BOMB".
                    char character = convertSingleDigitIntegerToCharacter(numberOfBombsSurrounding);
                    area[coordinate.getY()][coordinate.getX()] = Mark.valueOf(character);
                }
            }
        }
    }

    private boolean hasLocationBeenMarked(Mark location) {
        final List&lt;Mark&gt; LOCATIONS_THAT_SHOULD_NOT_BE_MARKED = Arrays.asList(
                Mark.MARKED_AS_BOMB,
                Mark.ONE_BOMB_AROUND,
                Mark.TWO_BOMB_AROUND,
                Mark.THREE_BOMB_AROUND,
                Mark.FOUR_BOMB_AROUND,
                Mark.FIVE_BOMB_AROUND,
                Mark.SIX_BOMB_AROUND,
                Mark.SEVEN_BOMB_AROUND,
                Mark.EIGHT_BOMB_AROUND,
                Mark.OPEN
        );

        return LOCATIONS_THAT_SHOULD_NOT_BE_MARKED.contains(location);
    }

    /**
     * Returns all valid unmarked coordinates surrounding the area of the coordinate passed
     */
    private List&lt;Coordinate&gt; getAllSurroundingCoordinates(Mark[][] area, boolean includeCoordinatePassed, int xCoord, int yCoord) {
        List&lt;Coordinate&gt; validCoordinatesInArea = new ArrayList&lt;Coordinate&gt;();

        // We want the coord itself, the coord -1 and the coord + 1 to get the full area
        for (int x = xCoord - 1; x &lt;= xCoord + 1; x++) {
            for (int y = yCoord - 1; y &lt;= yCoord + 1; y++) {
                // Skip this coordinate if appropriate
                if (includeCoordinatePassed || xCoord != x || yCoord != y) {
                    if (isValidCoordinate(x, y, area)) {
                        validCoordinatesInArea.add(new Coordinate(x, y));
                    }
                }
            }
        }

        return validCoordinatesInArea;
    }

    private List&lt;Coordinate&gt; getSurroundingCoordinates(Mark[][] area, boolean includeCoordinatePassed, Coordinate coordinate) {
        return getAllSurroundingCoordinates(area, includeCoordinatePassed, coordinate.getX(), coordinate.getY());
    }

    private int countBombsAtLocations(Mark[][] grid, Coordinate... coordinatesToCountBombsIn) {
        int numberOfBombs = 0;

        for (Coordinate coordinate : coordinatesToCountBombsIn) {
            if (grid[coordinate.getY()][coordinate.getX()] == Mark.BOMB) {
                numberOfBombs++;
            }
        }

        return numberOfBombs;
    }

    private int countBombsAtLocations(Mark[][] grid, List&lt;Coordinate&gt; coordinatesToCountBombsIn) {
        Coordinate[] coordinateList = new Coordinate[coordinatesToCountBombsIn.size()];
        return countBombsAtLocations(grid, coordinatesToCountBombsIn.toArray(coordinateList));
    }

    private static void printGrid(Mark[][] grid, boolean hideBombs) {
        System.out.println();
        for(int y = 0; y &lt; grid.length; y++) {
            for(int x=0; x &lt; grid[0].length; x++) {
                if (hideBombs &amp;&amp; grid[y][x] == Mark.BOMB) {
                    System.out.print(Mark.EMPTY);
                }
                else {
                    System.out.print(grid[y][x]);
                }

            }
            System.out.println();
        }
    }

    private static void fillArea(Mark[][] area, int numberOfBombs) {
        fillArea(area, Mark.EMPTY);

        // fill area with bombs
        fillAreaWithRandomMarks(area, numberOfBombs, Mark.BOMB);
    }

    private static void fillArea(Mark[][] area, Mark mark) {
        for (int y = 0; y &lt; area.length; y++) {
            for (int x = 0; x &lt; area[y].length; x++) {
                area[x][y] = mark;
            }
        }
    }

    private static void fillAreaWithRandomMarks(Mark[][] area, int numberOfBombs, Mark mark) {
        int[][] bombLocations = getRandomCoordinatesWithoutDuplicates(numberOfBombs, area.length, area[0].length);

        for (int i = 0; i &lt; bombLocations.length; i ++) {
            int x = bombLocations[i][0];
            int y = bombLocations[i][1];

            area[x][y] = mark;
        }
    }

    private int getNumberOfBombsFromUser(Object[][] area, Scanner scanner) {
        int numberOfBombs = -1;
        boolean isValidNumberOfBombs = false;

        do
        {
            numberOfBombs = getValidNumberFromUser(scanner, NUMBER_OF_BOMBS_PROMPT);
            isValidNumberOfBombs = isValidNumerOfBombs(numberOfBombs, area);

            if (!isValidNumberOfBombs) {
                System.out.println("it should be positive and it should not exceed the field capacity!");
            }
        } while (!isValidNumberOfBombs);

        return numberOfBombs;
    }

    private int getValidNumberFromUser(Scanner scanner, String prompt) {
        System.out.println(prompt);
        String inputFromUser = scanner.nextLine();

        while (inputFromUser == null || !isNumeric(inputFromUser)) {
            System.out.println("it should be number!");
            inputFromUser = scanner.nextLine();
        }

        return Integer.parseInt(inputFromUser);
    }

    private boolean isValidNumerOfBombs(int numberOfBombs, Object[][] area) {
        // Between 1 and the max number of spaces
        return numberOfBombs &gt; 0 &amp;&amp; (area.length * area[0].length) &gt;= numberOfBombs;
    }

    private static Mark[][] getLengthsOfAreaFromUser(Scanner scanner) {
        Mark[][] gridCreated = null;
        while(gridCreated == null) {
            System.out.println(PICK_X_AND_Y_AREA_MESSAGE);
            String[] turnXandY = scanner.nextLine().split(" "); 

            if(turnXandY.length != 2) {
                System.out.println("print: \"x y\"!");
            }
            else if(!isNumeric(turnXandY[0]) || !isNumeric(turnXandY[1])) {
                System.out.println("x and y should be numbers!");
            }
            else if(Integer.parseInt(turnXandY[0]) &lt;= 0 || Integer.parseInt(turnXandY[1]) &lt;= 0) {
                System.out.println("x and y should be greater than 0!");
            }
            else {
                gridCreated = new Mark[Integer.parseInt(turnXandY[0])][Integer.parseInt(turnXandY[1])];
            }
        }

        return gridCreated;
    }

    private static boolean isValidCoordinate(int x, int y, Mark[][] area) {
        if(x &lt; 0 || area[0].length &lt;= x) {
            return false;
        }
        if(y &lt; 0 || area.length &lt;= y) {
            return false;
        }
        return true;
    }
}

class Coordinate {
    int x, y;

    public Coordinate(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return this.x;
    }

    public int getY() {
        return this.y;
    }

    public int[] toArray() {
        return new int[]{x, y};
    }
}

enum UserOption {
    MARK("MARK"),
    OPEN("OPEN");

    private String option;

    UserOption(String option) {
        this.option = option;
    }

    public static UserOption fromValue(String option) {
        for (UserOption userOption : values()) {
            if (userOption.option.equalsIgnoreCase(option)) {
                return userOption;
            }
        }

        return null;
    }
}

class CommandSelected {
    private UserOption optionSelected;
    private Coordinate coordinateSelected;

    public UserOption getUserOption() {
        return this.optionSelected;
    }

    public Coordinate getCoordinate() {
        return this.coordinateSelected;
    }

    public CommandSelected(UserOption option, Coordinate coordinate) {
        this.optionSelected = option;
        this.coordinateSelected = coordinate;
    }
}

class Utility {
    public static boolean isNumeric(String input) {
        try {
            Integer.parseInt(input);
        } catch (NumberFormatException | NullPointerException nfe) {
            return false;
        }
        return true;
    }

    public static int[][] getRandomCoordinatesWithoutDuplicates(int numberOfCoordinates, int widthOfGrid, int heightOfGrid) {
        List&lt;Coordinate&gt; cordinates = new ArrayList&lt;Coordinate&gt;();
        int[][] randomCoordinates = new int[numberOfCoordinates][2];

        // Get a list of all possible coordinates
        for (int x = 0; x &lt; widthOfGrid; x++) {
            for (int y = 0; y &lt; heightOfGrid; y++) {
                cordinates.add(new Coordinate(x, y));
            }
        }

        // shuffle aka randomize the list
        Collections.shuffle(cordinates);

        // Take top X
        for (int i = 0; i &lt; numberOfCoordinates; i++) {
            randomCoordinates[i] = cordinates.get(i).toArray();
        }

        return randomCoordinates;
    }

    public static char convertSingleDigitIntegerToCharacter(int number) {
        return String.valueOf(number).charAt(0);
    }
}

// A placement can either be a Bomb, marked by user, selected by user, or "empty" aka untouched &amp; not a bomb
enum Mark{
    BOMB('@'), 
    MARKED_AS_BOMB('X'), 
    EMPTY('_'), 
    OPEN('W'),
    ONE_BOMB_AROUND('1'),
    TWO_BOMB_AROUND('2'),
    THREE_BOMB_AROUND('3'),
    FOUR_BOMB_AROUND('4'),
    FIVE_BOMB_AROUND('5'),
    SIX_BOMB_AROUND('6'),
    SEVEN_BOMB_AROUND('7'),
    EIGHT_BOMB_AROUND('8');

    char character;

    Mark(char character) {
        this.character = character;
    }

    public static Mark valueOf(char character) {
        for (Mark mark : values()) {
            if (character == mark.character) {
                return mark;
            }
        }

        return null;
    }

    @Override
    public String toString() {
        return String.valueOf(character);
    }
}
</code></pre>
    </div>