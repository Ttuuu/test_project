<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a more fundamental problem here than performance: your solution isn't actually correct. Consider 4 lego pieces all of size 1. Your solution combines them as </p>

<ol>
<li><span class="math-container">\$1+1=2\$</span></li>
<li><span class="math-container">\$2+1=3\$</span></li>
<li><span class="math-container">\$3+1=4\$</span></li>
</ol>

<p>for a total cost of <span class="math-container">\$2+3+4 = 9\$</span>. However, we can combine more efficiently in the following way</p>

<ol>
<li><span class="math-container">\$1+1=2\$</span></li>
<li><span class="math-container">\$1+1=2\$</span></li>
<li><span class="math-container">\$2+2=4\$</span></li>
</ol>

<p>for a total cost of <span class="math-container">\$8\$</span>. In general this problem is asking you to rediscover the famous <a href="https://en.wikipedia.org/wiki/Huffman_coding" rel="nofollow noreferrer">Huffman coding</a>. If you consider your size <span class="math-container">\$w\$</span> blocks to be code words with frequency <span class="math-container">\$w\$</span>, then the solution is asking you to find the cost of the optimal prefix code for those code words. </p>

<p>The optimal combination is obtained by at each step picking the two smallest size blocks and combining them. We need a data structure where we can efficiently find and remove the smallest element, and also insert new elements (we need to reinsert combined blocks at each step). This can be done efficiently with a min priority queue.</p>

<p>Strictly speaking, in an actual interview, you might be asked to justify why the above algorithm gives the most efficient combination. For this, see a resource on the Huffman code.</p>
    </div>