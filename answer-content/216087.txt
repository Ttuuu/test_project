<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>I found your code rather confusing at first, but I think I now understand your intentions behind the code, so hopefully I can say why these intentions weren't quite clear from the beginning.</p>

<p>The main source of confusion is that, for each adjacency list storing the neighbors of a specific vertex, the vertex this adjacency list corresponds to is represented in two ways: First, through the list's position in the array <code>gra</code>, and second, through the first element in the list. But the second representation is counterintuitive, because you are placing the from-vertex on the same level as the to-vertices. Using the picture you provided as an example, it would be like saying "vertex 0 has edges to the following vertices: 0, 1 and 4". It would be more to the point only to store the to-vertices in the list without the from-vertex, because the relation between the to-vertices and the from-vertex is already represented by the adjacency list's position in the array <code>gra</code>.</p>

<p>And a few words about capitalization: Even though the Java compiler does not require class names to start with a capital letter, there are certain naming conventions which, if followed, make it easier for humans to read code. One of these conventions is that class names in Java should start with a capital letter. In your case, this would mean that the class <code>node</code> should be renamed to <code>Node</code>. You can see that even the syntax highlighter doesn't recognize <code>node</code> as a class name if it's not capitalized:</p>

<pre class="lang-java prettyprint-override"><code>class node {

    int data;
    node next;

    node(int data) {
        this.data=data;
        this.next=null;
    }
}
</code></pre>

<p>vs:</p>

<pre class="lang-java prettyprint-override"><code>class Node {

    int data;
    Node next;

    Node(int data) {
        this.data=data;
        this.next=null;
    }
}
</code></pre>

<p>There are other Java conventions, like naming variables and methods in camelCase (e.g. <code>addEdge</code> instead of <code>add_edge</code>). Also, you might consider using whole words instead of abbreviations, especially if an abbreviation doesn't really save many characters (e.g. <code>newVertex</code> instead of <code>newVert</code>, or <code>graph</code> instead of <code>gra</code>). As far as I can remember, most advice in this regard I came across suggested to avoid abbrevations, and I myself also find <code>newVertex</code> easier to read than <code>newVert</code>.</p>
    </div>