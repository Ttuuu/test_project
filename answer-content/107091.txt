<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This program computes sums over a sliding window of fixed size, and takes the maximal sum. This is not <a href="https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane.27s_algorithm" rel="nofollow">Kadane's algorithm</a>, which solves the more difficult problem where the size of the subarray is not predefined. </p>

<p>To improve performance, you should take better advantage of NumPy. Avoid Python loops by vectorized operations. Using <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html" rel="nofollow"><code>numpy.cumsum</code></a> over the full 2D array would be a good starting point.</p>

<hr>

<p>Here's how you could vectorize <code>kadane1DwithBounds</code>. I changed naming as well. From the cumulative sums you can get the sliding sums by subtracting at an offset. The advantage over your version is that the Python <code>for</code> loop is replaced by array operations that are implemented in C. If you are not familiar with the concept, I suggest reading the <a href="http://docs.scipy.org/doc/numpy/user/whatisnumpy.html" rel="nofollow">What is NumPy?</a> page.</p>

<pre><code>def max_sliding_sum(array, window_size):
    cum_sum = np.cumsum(array)
    sliding_sum = cum_sum[window_size:] - cum_sum[:-window_size]
    return sliding_sum.max()
</code></pre>
    </div>