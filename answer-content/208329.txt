<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should make sure you close files you open. This can be easily achieved using the <a href="http://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer"><code>with</code></a> keyword:</p>

<pre><code>file_name = "shadow3"
with open(file_name) as file:
    usernames, hashed_passwords = [], []
    for line in file:
        username, hashed_password, *_ = line.split(':')
        usernames.append(username)
        hashed_passwords.append(hashed_password)
</code></pre>

<p>Calling a file <code>dir</code> is just setting yourself up for trouble later. I also used the <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">advanced tuple assignment</a> by using <code>*</code> to assign the rest of the line to the unused variable <code>_</code> (a customary name for unused variables).</p>

<p>Note that <code>open</code> opens a file in read-only mode by default, so <code>'r'</code> is implicitly used.</p>

<hr>

<p>Whenever you want to iterate over an iterable but also need a counter, use <a href="https://docs.python.org/3.7/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> and whenever you want to iterate over two iterables in tandem, use <a href="https://docs.python.org/3.7/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>

<pre><code>with open('out68.lst') as group:
    length = len(group)
    for k, password in enumerate(group):
        password = password.rstrip('\n').capitalize()

        if k == length // 100 or k % (length // 10) == 0:
            print(f"{k / length:.%}")
        for username, hashed_password in zip(usernames, hashed_passwords):
            if crypt.crypt(password, hashed_password) == hashed_password:
                print(f'La contraseña del usuario {username} es {password}')
</code></pre>

<p>Here I also used modular arithmetic to cut down your special cases for ten percent increments, used the new <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-string</code></a> formatting.</p>

<hr>

<p>You might want to add some functionality where you save username password pairs if you have found some and remove them from the <code>usernames</code> and <code>hashed_passwords</code> lists so you don't keep on checking them once you found the password. To do this efficiently it might be necessary to change your data format to <code>{username: hashed_password}</code> and <code>{username: password}</code> for the yet to find and already found usernames.</p>

<pre><code>file_name = "shadow3"
users = {}
with open(file_name) as file:
    for line in file:
        username, hashed_password, *_ = line.split(':')
        users[username] = hashed_password

cracked_users = {}
with open('out68.lst') as group:
    length = len(group)
    for k, password in enumerate(group):
        password = password.rstrip('\n').capitalize()
        if k == length // 100 or k % (length // 10) == 0:
            print(f"{k / length:.%}")
        if not users:
             print("Cracked all passwords")
             break
        for username, hashed_password in users.items():
            if crypt.crypt(password, hashed_password) == hashed_password:
                print(f'La contraseña del usuario {username} es {password}')
                cracked_users[username] = password
                del users[username]
</code></pre>

<hr>

<p>In general, don't be afraid of giving your variables clear names. If it is a username, call it <code>username</code>, not <code>usr</code>. If it is a hashed password, call it <code>hashed_password</code>, not <code>hshd</code>.</p>
    </div>