<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>just come across this and I'm sure by now you've figured a lot of things out, but thought I'd add my 2 cents worth.</p>

<p>I wouldn't be worried about thread starvation, I would though be worried! I've played with Greg Young's m-r example a few times, from memory it processes events in-process which is a nice way to get things started. Ideally though if you don't want to do that the "best" way to go is to put the events on some kind of queue be it RabbitMQ, AWS SQS, Azure Service Bus or event MSMQ (but don't use MSMQ, ever!!!). Once your events are on a queue you can write another application/process that can read them and process at will.</p>

<p><strong>Queue Benefits:</strong></p>

<ul>
<li>Resilience: This will make your system more resilient, if there's a crash during processing of an event it will just be put back on the queue and processed another time. Days even if you have a bug that needs fixing before you want the rest of the events to be processed (I've actually done this in the past, although I can definitely say it's not fun)</li>
<li>Scale: You can also scale with more cunning and precision. You can scale your event processing independently of your website and if you so wish you could have one process for each type of event and so you could scale per event type at the extreme end.</li>
</ul>

<p><strong>IHostedService</strong></p>

<p>I'm working with IHostedService at the moment, I've written a console app that just runs one IHostedService (and reads events off a queue funnily enough). The problem that lead me to this page is that the hosted service runs in a background thread out of my control and I'm currently getting an exception thrown that no try/catch is picking up (I was taught to let exceptions bubble up and this exception is not now I'm having to put try/catch everywhere to find where the problem is). This exception is currently taking down the entire application, from what I've read this is a thing with IHostedServices. You don't want a background process to take down your website!</p>

<p><strong>Single Responsibility</strong></p>

<p>Not only is this the <strong>S</strong> in SOLID, but it's also a guiding principle in the microservices/distritubed systems world. Each system/service should do one thing and do it well.</p>

<p><strong>Hosting</strong></p>

<p>Last but not least where it's going to be hosted from is always going to be a factor IMO. I work a lot with Azure and now Kubernetes so while I build things that can be hosted anywhere there's always a lean towards leveraging the abilities of that hosting environment. For instance you could host in an Azure Web App, these have the concept of Web Jobs that are separate to the website, but run in the same App Service Plan. You could have your site write to an Azure Storage Queue and then a web job read the events from this (just an example)</p>

<p><strong>ConfigureAwait</strong>
In my opinion don't write your own framework, there are plenty of things out there that have had many eyes on them. If you're asking these sorts of questions use someone else's framework to start with and then once you've got familiar with it make the decision then about making your own. That's my opinion though. From what I've read on MS documention in the past, yes you should use <code>ConfigureAwait(false)</code> when creating a package.</p>

<p>Hope some of this helps. This is just from my experience and I'm sure other people will say other things :-)</p>
    </div>