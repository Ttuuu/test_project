<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments:</h2>

<blockquote>
  <p>I am learning about templates in C++ so I decided to implement an N-dimensional vector.</p>
</blockquote>

<p>It's not an N-dimensional vector. It's a 1-D vector with <code>N</code> elements.</p>

<p>OK. Now I have read this for a while. I am starting to think "Mathematical Vector". Is that what you mean? But even that is not quite correct, as a "Mathematical vector" has a direction (which you can specify with 3 lengths); but you also need a point for it to go through (so you need another 3 points to define that). Still confused.</p>

<blockquote>
  <p>To stop <code>GetW()</code> being called on a 3-dimensional vector, I used <code>std::enable_if</code>. This works, but it produces a very nasty error message: error: <code>no type named ‘type’ in ‘struct std::enable_if&lt;false, void&gt;’</code>.</p>
</blockquote>

<p>This is because it is a compile time check. It's supposed to be readable by developers. That's because it is supposed to stop developers from making mistakes (not users).</p>

<blockquote>
  <p>It would be better if I could make it into something friendlier like: error: attempted to get 4th component of a 3d vector instead.</p>
</blockquote>

<p>This should be available with a C++ feature called <strong>Concepts</strong>. Unfortunately this is not scheduled until 2020 (if it is not cancelled again).</p>

<blockquote>
  <p>I am also unsure about the best practices with templates, so any feedback would be appreciated. Thank you :)</p>
</blockquote>

<p>That's what we are here for.</p>

<h2>Review:</h2>

<p>My compiler generates a warning on this line:</p>

<pre><code>    Vector() : components{0} {}
</code></pre>

<p><code>components</code> is expecting a list here, not a single element. It can be a list with a single element.</p>

<h3>Pass by reference:</h3>

<p>This creates a copy of the parameters. Then the parameters are copied into the member variable. Its possible the compiler may optimize this, but don't count on it.</p>

<pre><code>    Vector(std::array&lt;T, num_components&gt; components) : components(components) {}
</code></pre>

<p>So you can pass by reference (to prevent extra copy). It will still need to be copied into the destination.</p>

<pre><code>    Vector(std::array&lt;T, num_components&gt; const&amp; components)
        : components(components)
    {}
</code></pre>

<p>So you can pass by r-value reference.</p>

<pre><code>    Vector(std::array&lt;T, num_components&gt;&amp;&amp; components)
        : components(std::move(components()
    {}
</code></pre>

<p>Now some people may point out that <code>std::array</code> is non-movable. I know. But I like to future proof my code. At some point in the future somebody may change the type of <code>components</code> and I would like my code to still stay as efficient as possible. So it may be worth doing this just for the future. <strong>BUT</strong> I can also see the counter argument against so take or leave this one as you see fit.</p>

<h3>Return by reference</h3>

<p>Here you are returning by value.</p>

<pre><code>    template&lt;int idx&gt;
    inline T Get() const {
        typename std::enable_if&lt;(num_components &gt;= idx)&gt;::type();
        return this-&gt;components[idx];
    }
</code></pre>

<p>If all you want to do is read a member of T. Then making a copy (return by value causes a copy) then this seems overkill. Also if you return by reference there is the added benefit (if that is applicable) that you can potentially change the value in place. If you don't want to change the value then return a const reference to allow reads but not writes (via the reference).</p>

<h3>inline is the most useless keyword.</h3>

<p>The key word <code>inline</code> is a hint to the compiler that is universally ignored by all modern compilers. Humans are terrible at deciding when inlining is appropriate so the compilers started ignoring their human masters a long time ago and decide internally when to actually inline the code.</p>

<pre><code>    inline T Get(int idx) const {
</code></pre>

<p>Only use the <code>inline</code> keyword when you have to. This is used when functions/methods are defined outside the class but in a header file (so there are potentially multiple copies across compilation units). Here it is used to tell the linker to ignore all the extra copies and they are the same.</p>

<h3>Don't use <code>this-&gt;</code></h3>

<p>This is a code smell in C++ and hides errors.</p>

<pre><code>    inline T GetX() const {
        return this-&gt;components[0];
    }
</code></pre>

<p>The only reason to use <code>this-&gt;</code> is to disambiguify a shadowed member. The problem here is that if you forget to use <code>this-&gt;</code> the compiler will not tell you there is an error it will use the most locally scoped version of the variable (so it hides errors when you forget to use it). Also for a bug fixer it is hard to tell if you deliberately did not use it and meant to use the local shadowing variable or you it was a mistake and you wanted the member variable.</p>

<p>On the other hand you only need it when you have shadowed variables. If you never have shadowed variables you never have to use it. You will also not have any ambiguity on which variable you meant to use because you used nice unique variables for everything.</p>

<h3>Get/Set bad interface</h3>

<pre><code>    template&lt;int idx&gt;
    inline void Set(T value) {
</code></pre>

<p>I think the whole Java world got it wrong. Get/Set is a terrible paradigm for accessing an object as it breaks the encapsulation. What they did get very well is the whole automation of serialization and other tools that can be built when you do use this.</p>

<p>But it's also considered a bad pattern for C++ (we don't have any of that tooling (so our code is not so brittle to change).</p>

<h3>Use references to avoid copying.</h3>

<pre><code>            const T value = this-&gt;components[i];
            ret += value * value;
</code></pre>

<p>Nothing wrong with breaking this into two lines and making it readable. But you have to watch the assignment to <code>value</code>. This is a copy operation. So you make a copy then multiply the values together.</p>

<p>OK a copy is not that bad for ints/doubles or any numeric types. But you are defining this for an arbitrary type <code>T</code>. The cost of copying <code>T</code> could potentially be huge so don't do it you don't need to.</p>

<pre><code>            T const&amp; value = this-&gt;components[i];  // Assign to reference
            //    ^^^ 
            ret += value * value;
</code></pre>

<h3>You don't need move on return</h3>

<pre><code>        std::array&lt;T, num_components&gt; new_components;
        ...
        return this_t(std::move(new_components));
</code></pre>

<p>When you return a value it is a prvalue. So moving the object to a temporary is not required before a return (it will already be a prvalue) and the compiler will optimize and move a returned value.</p>

<pre><code>    return new_components; // Achieves the same result.
</code></pre>

<h3>Assignment vs Increment</h3>

<p>These operators are all fine:</p>

<pre><code>    this_t operator+(const this_t &amp;r) const;
    this_t operator-(const this_t &amp;r) const;
    this_t operator*(const this_t &amp;r) const;
    this_t operator*(T s) const;
</code></pre>

<p>Some people may argue that these should be free standing functions. There is an argument for this if you want auto conversions to happen (which I usually don't). So I usually do as you have done and make them members. <strong>BUT</strong> you should look at your use case and make sure that is what you want.</p>

<p>Also when people define these methods they usually also define the:</p>

<pre><code>    this_t&amp; operator+=(const this_t &amp;r) const;
    this_t&amp; operator-=(const this_t &amp;r) const;
    this_t&amp; operator*=(const this_t &amp;r) const;
    this_t&amp; operator*=(T s) const;
</code></pre>

<p>This is because they are easy to write as a pair.</p>

<pre><code>// The += looks a lot like your original code.
// except you are updating the current objet (so its not a const method)
this_t&amp; operator+=(this_t const&amp; r) {
    for (int i = 0; i &lt; num_components; i++) {
        components[i] += r.components[i];
    }
    return *this;
}
// The + operator simply copies itself and then uses
// the += operator to do the hard work on the copy (which is returned).
this_t operator+(this_t const&amp; r) const {
    this_t copy(r);
    return copy += r;
}
</code></pre>

<h3>Its standard for the assignment to return a reference to itself.</h3>

<p>This:</p>

<pre><code>    bool operator=(const this_t &amp;r) const;
</code></pre>

<p>Is normally written as:</p>

<pre><code>    this_t&amp; operator=(const this_t &amp;r); // Can't be const as you are modifying this.
</code></pre>
    </div>