<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some simple pointers to get things started...</p>

<p><strong>Magic numbers</strong></p>

<p>You have hard-coded your <code>side</code>, <code>limit</code> (how is it used, and why does it default to <code>side - 2</code>?), the number of mines, the dimensions of your buttons and the meaning of a <code>Cell</code>'s <code>value</code> to <code>-1</code> when it is a mine... these should either be extracted out as constants, or documented clearly to show how they are being used.</p>

<p><strong>GUI and usability (UX)</strong></p>

<p>Lumping four UX-related suggestions together:</p>

<ol>
<li><strong>Your game is missing the <em>fun</em> of minesweeper: a timer and the ability to flag mines!</strong></li>
<li>Also, it will be nice if you had at least a reset button, if not a button to change the number of mines. :)</li>
<li>Oh yeah, your expansion logic doesn't seem to expand to also include the numbered cells... It only expands the empty ones, leaving the user to have to manually click on the surrounding numbered cells. This diminishes the playing quality somewhat.</li>
<li>Following from the earlier section, your <code>Dimensions(20, 20)</code> can be a bit small for <a href="http://en.wikipedia.org/wiki/Pixel_density" rel="nofollow noreferrer">high-DPI displays</a>, it will be nice if you either went with higher values, or look for non-pixel-based scaling alternatives... <a href="https://stackoverflow.com/questions/15659044/how-to-set-the-dpi-of-java-swing-apps-on-windows-linux">Here's a related StackOverflow link</a> I found that may be of interest: </li>
</ol>

<p><em>Side-note:</em> The older Minesweeper for Windows <a href="http://www.techuser.net/mineclick.html" rel="nofollow noreferrer">avoids triggering a mine on the first click</a>, it'll be... nice(?) if you can replicate that too. ;)</p>

<p><strong>Other minor code stuff</strong></p>

<ul>
<li>Variable declarations should be done with the interface, i.e. <code>List&lt;Integer&gt; loc = ...</code> instead of <code>ArrayList&lt;Integer&gt; loc = ...</code></li>
<li><code>Board.getID()</code> can just be <code>return cellID++</code>, since that is a <em>post-increment</em> operator. That means (roughly) after the variable is called, the value <em>before</em> the increment is returned to the caller, but the value <em>after</em> the increment is written to the variable for the next usage. It is not that hard to understand as long as you realize the difference between pre- and post-increment operators.</li>
<li>This could be just my personal preference, but I'm not fond of the idea of a somewhat complicated <code>ActionListener</code> implementation that knows a <code>Board</code> and also generates <code>JButtons</code>... I have a feeling you might be able to have a generic listener that acts on a pair of <code>(x,y)</code> button coordinates.</li>
<li>And that nest of <code>if</code> statements... looks ripe for refactoring, but maybe I'll take a more in-depth look the next time. </li>
</ul>

<hr>

<h2>Code Review: Part Deux (fortified with a bit of Java 8 <s>magic</s> features)</h2>

<p><strong>Starting your board</strong></p>

<p>If you can rename <code>setBoard()</code> as <code>getBoard()</code> and change its return type as a <code>JFrame</code>, the following approach is what I believe the more conventional form of starting a Swing application:</p>

<pre><code>public static void main(String[] args) {
    SwingUtilities.invokeLater(() -&gt; new Board().getBoard());
}
</code></pre>

<p><strong>Separating the creation of GUI elements and <code>Cell</code>s</strong></p>

<p><code>addCells()</code> is doing both the creating of GUI elements <em>and</em> the initialization of your <code>side * side</code> <code>Cell</code>-array. It will be better if (the renamed) <code>getBoard()</code>, which calls <code>addCells()</code>, is only concerned with creating the GUI layer, and that instantiating your <code>Board</code> class actually initializes the <code>Cell</code>s and the mines for us. This means that any <code>Board</code> instances are properly initialized and ready to be played, which is arguably more 'object'-like. Applying these points will result in the following code:</p>

<pre><code>public Board() {
    cells = new Cell[SIDE][SIDE];
    IntStream.range(0, SIDE).forEach(i -&gt; {
        IntStream.range(0, SIDE).forEach(j -&gt; cells[i][j] = new Cell(this));
    });
    init();
}

private void init() {
    plantMines();
    setCellValues();
}
</code></pre>

<ul>
<li>I have taken the liberty of turning <code>side</code> into a <code>static final</code> <code>SIDE</code> field.</li>
<li>Will explain <code>init()</code> later...</li>
</ul>

<p><strong>Iterating through the <code>cells</code> array</strong></p>

<p>Based on my current understanding, a simpler way of iterating through our 2D array is to create a helper method that accepts a <code>Consumer&lt;Cell&gt;</code> operation in Java 8.</p>

<pre><code>private void forEach(Consumer&lt;Cell&gt; consumer) {
    Stream.of(cells).forEach(row -&gt; Stream.of(row).forEach(consumer));
}
</code></pre>

<p>This allows us to further simplify most of our code afterwards. The first method to be simplified is our <code>addCells()</code> method, provided the separation of concerns described in the earlier section is done.</p>

<pre><code>private JPanel addCells() {
    JPanel panel = new JPanel(new GridLayout(SIDE, SIDE));
    forEach(cell -&gt; panel.add(cell.getButton()));
    return panel;
}
</code></pre>

<p><strong><code>Cell</code> implementation and coupling</strong></p>

<p>As mentioned in my original answer, I am not fond of <code>Cell</code> implementing the <code>ActionListener</code> interface, and I <em>could be</em> biased. My take on this is to give each <code>JButton</code> generated by the <code>Cell</code> a listener that calls its <code>checkCell()</code> method instead.</p>

<pre><code>Cell(Board board) {
    this.board = board;
    button = new JButton();
    button.addActionListener(listener -&gt; { this.checkCell(); });
    ...
}
</code></pre>

<p>As pointed out by <a href="https://codereview.stackexchange.com/a/88787/27975">@Simon</a>, it'll be better have methods that directly represents the exact actions we want on a <code>Cell</code>, i.e. to <code>setMine()</code>, or check <code>isMine()</code>, or the more straightforward <code>isChecked()</code> as opposed to <code>isNotChecked()</code>. Here they are...</p>

<pre><code>int setMine() {
    if (!isMine()) {
        setValue(-1);
        return 1;
    }
    return 0;
}

void checkCell() {
    reveal(null);
    if (isMine() || board.isDone()) {
        board.reveal(isMine() ? Color.RED : Color.GREEN);
    } else if (value == 0) {
        board.scanForEmptyCells();
    }
}

boolean isChecked() {
    return checked;
}

boolean isEmpty() {
    return !isChecked() &amp;&amp; value == 0;
}

boolean isMine() {
    return value == -1;
}
</code></pre>

<p>The other observation I had is that your <code>Cell</code> class seems to be quite coupled with the <code>Board</code> class, and this is evident from the number of non-<code>private</code> methods in them. A quick test shows:</p>

<ul>
<li>All methods in <code>Cell</code> are accessed by <code>Board</code> <em>except</em>

<ul>
<li><code>setValue(int)</code></li>
<li><code>displayValue(Color)</code></li>
</ul></li>
<li>The following methods in <code>Board</code> are accessed by <code>Cell</code>

<ul>
<li><code>scanForEmptyCells()</code></li>
<li><code>reveal(Color)</code></li>
<li><code>isDone()</code></li>
</ul></li>
</ul>

<p>These suggests that there is a bit of 'to-and-fro-ing' between <code>Board</code> and <code>Cell</code> methods, which can be improved upon.</p>

<p><strong>Game over?</strong></p>

<p>A slight enhancement shown above is the usage of <code>Color</code> to choose how we want to shade the background of a revealed cell. This is useful in the end-game scenario, where we assist the user in showing that all the cells left unchecked (since we don't have the ability to flag) are indeed all the mines. </p>

<p>In <code>Board</code>:</p>

<pre><code>void reveal(Color color) {
    forEach(cell -&gt; cell.reveal(color));
}

boolean isDone() {
    int[] result = new int[1];
    forEach(cell -&gt; { if (cell.isEmpty()) { result[0]++; }});
    return result[0] == MINES;
}
</code></pre>

<p>The <code>int[] result</code> is just to get past the limitation that our operation can only be done on a mutable container.</p>

<p>In <code>Cell</code>:</p>

<pre><code>void reveal(Color color) {
    displayValue(color);
    checked = true;
    button.setEnabled(!checked);
}

private void displayValue(Color color) {
    if (isMine()) {
        button.setText("\u2600");
        button.setBackground(color);
    } else if (value != 0) {
        button.setText(String.valueOf(value));
    }
}
</code></pre>

<p><strong>Planting mines</strong></p>

<p>Again, <a href="https://codereview.stackexchange.com/a/88787/27975">@Simon</a> has some good pointers about your <code>generateMinesLocation()</code> method, but I think it can be further improved... <em>by removing it entirely</em>. Why?</p>

<ul>
<li>It is the only place where a <code>cell ID</code> is used.</li>
<li>You don't really need a <code>cell ID</code> as long as you can provide your <code>x, y</code> or <code>row, column</code> coordinates.</li>
<li>Nothing beats a straightforward reference in a 2D array.</li>
</ul>

<p>Therefore, all you need is your <code>plantMines()</code>:</p>

<pre><code>private void plantMines() {
    Random random = new Random();
    int counter = 0;
    while (counter != MINES) {
        counter += cells[random.nextInt(SIDE)][random.nextInt(SIDE)].setMine();
    }
}
</code></pre>

<p><code>Cell.setMine()</code> returns <code>1</code> if the mine is set, else <code>0</code>. We can then make use of the return value to increment the total number of mines we have until the desired number of <code>MINES</code> (extracted out as a <code>static final</code> field).</p>

<p><strong>Banishing the <code>if</code> nest</strong></p>

<p>Now onto the exciting part... What's a reasonable way of generating a <code>3x3</code> matrix centered around <code>x, y</code>? We'll need the valid preceding and succeeding values, i.e. <code>x-1 ... x+1</code> and <code>y-1 ... y+1</code>, and then every permutation of them except <code>x,y</code> itself:</p>

<ol>
<li><p>A method to get valid preceding and succeeding values:</p>

<pre><code>private IntStream sidesOf(int value) {
    return IntStream.rangeClosed(value - 1, value + 1).filter(
            x -&gt; x &gt;= 0 &amp;&amp; x &lt; SIDE);
}
</code></pre></li>
<li><p>Permute horizontally and vertically, and then exclude <code>x,y</code>:</p>

<pre><code>private Set&lt;Cell&gt; getSurroundingCells(int x, int y) {
    Set&lt;Cell&gt; result = new HashSet&lt;&gt;();
    sidesOf(x).forEach(a -&gt; {
        sidesOf(y).forEach(b -&gt; result.add(cells[a][b]));
    });
    result.remove(cells[x][y]);
    return result;
}
</code></pre></li>
</ol>

<p>The nest of <code>if</code> statements is essentially describing:</p>

<ul>
<li>If the current cell (1 of 8) matches a specific criteria

<ul>
<li>Perform an operation either on that cell, or the cell at <code>x,y</code></li>
</ul></li>
</ul>

<p>As such, with our <code>getSurroundingCells()</code> method, we can implement that as a pair of <code>filter</code>-and-<code>forEach</code> steps:</p>

<pre><code>getSurroundingCells(x, y).stream().filter(predicate).forEach(consumer);
</code></pre>

<p><em>Final post-code-refactoring for the two main methods</em>:</p>

<pre><code>/**
 * This method count number of mines around particular cell and set its value
 */
private void setCellValues() {
    IntStream.range(0, SIDE).forEach(x -&gt; {
        IntStream.range(0, SIDE).forEach(y -&gt; {
            if (!cells[x][y].isMine()) {
                getSurroundingCells(x, y).stream().filter(Cell::isMine)
                    .forEach(z -&gt; cells[x][y].incrementValue());
            }
        });
    });
}

/**
 * This method starts chain reaction. When user click on particular cell, if cell is
 * empty (value = 0) this method look for other empty cells next to activated one.
 * If finds one, it call checkCell and in effect, start next scan on its closest
 * area.
 */
void scanForEmptyCells() {
    IntStream.range(0, SIDE).forEach(x -&gt; {
        IntStream.range(0, SIDE).forEach(y -&gt; {
            if (cells[x][y].isChecked()) {
                getSurroundingCells(x, y).stream().filter(Cell::isEmpty)
                    .forEach(Cell::checkCell);
            }
        });
    });
}
</code></pre>

<p><strong>Bonus! Resetting a <code>Board</code></strong></p>

<p>Minesweeper addicts* playing your application may revel in the clutter-free interface and possibly even the simplicity of non-flagging and having to maintain a mental map of the mines, but they'll probably be dismayed that starting a new game involves restarting the application... How hard will it be to implement a reset feature?</p>

<p>In <code>Board</code>:</p>

<pre><code>private JFrame getBoard() {
    JFrame frame = new JFrame();
    frame.getContentPane().setLayout(new BorderLayout());
    frame.add(addCells(), BorderLayout.NORTH);
    frame.add(addControlPanel(), BorderLayout.SOUTH);
    ...
}

private JPanel addControlPanel() {
    JPanel panel = new JPanel();
    JButton reset = new JButton("Reset");
    reset.addActionListener(listener -&gt; reset());
    panel.add(reset);
    return panel;
}

void reset() {
    forEach(cell -&gt; cell.reset());
    init();
}
</code></pre>

<p>Just in case you forgot, <code>init()</code> does the <code>plantMines()</code> and <code>setCellValues()</code> for us.</p>

<p>In <code>Cell</code>:</p>

<pre><code>void reset() {
    setValue(0);
    button.setText("");
    button.setBackground(null);
    checked = false;
    button.setEnabled(!checked);
}
</code></pre>

<p>* - I will neither confirm nor deny if this includes myself.</p>

<h2>Have fun!</h2>
    </div>