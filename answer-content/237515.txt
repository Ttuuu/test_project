<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By using that iterative solution, you are indirectly using Dynamic Programming (DP)</p>

<p><strong>Answer for question number 1:</strong></p>

<p>Recursion <em>might</em> be faster in some cases.</p>

<p>For example, let's say you have a 2d road of size <code>n * m</code>. There are blockages in the road, so you can't pass through them.</p>

<p>The objective is to check if there exists <em>any path</em> from the top-left corner to the bottom-right (You can only move right or down).</p>

<p>The recursive solution would win as the iterative solution will take <code>O(N * M)</code> in the best and the worst case, but the recursive solution will take <code>O(N + M)</code> for the best case and <code>O(N * M)</code> for the worst case.  </p>

<p>An iterative <a href="https://www.geeksforgeeks.org/check-possible-path-2d-matrix" rel="nofollow noreferrer">solution</a> with a detailed explanation is given here, but I can't find any sources for a recursive solution.</p>

<p><strong>Answer for question number 2:</strong></p>

<p>The recursive solution of yours is much slower than the iterative one because you are not using <a href="https://www.geeksforgeeks.org/overlapping-subproblems-property-in-dynamic-programming-dp-1" rel="nofollow noreferrer">memoization</a>.</p>

<p>Memoization is not that hard to understand.</p>

<p>Please do try visiting this link: <a href="https://www.quora.com/How-should-I-explain-dynamic-programming-to-a-4-year-old" rel="nofollow noreferrer">https://www.quora.com/How-should-I-explain-dynamic-programming-to-a-4-year-old</a></p>
    </div>