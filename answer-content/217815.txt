<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are correct that your current solution is over engineered. This is because you define one class per object of your program. Several of these classes behave exactly the same. Therefore their classes can be merged into one.</p>

<p>A <code>SteakRule</code> consists of:</p>

<ul>
<li>Name</li>
<li>Edible</li>
<li>Minimum temperature</li>
<li>Maximum temperature</li>
</ul>

<p>If one of the temperatures is optional you can pass <code>int.MinValue</code> or <code>int.MaxValue</code> for them.</p>

<p>A rule does not know about other rules. It is an independent object.</p>

<p>There is no need to define a specialized <code>MediumRule</code> since it fits nicely into the general <code>SteakRule</code>.</p>

<p>Don't confuse "steak" and "stake", by the way.</p>

<p>After merging duplicate code and removing the boilerplate interfaces, the code becomes:</p>

<pre><code>using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests
{
    [TestClass]
    public class SteakTest
    {
        [TestMethod]
        public void Test()
        {
            var steakRules = new List&lt;SteakRule&gt;
                {
                    new SteakRule("Raw", false, int.MinValue, 100),
                    new SteakRule("Rare", true, 101, 120),
                    new SteakRule("MediumRare", true, 111, 120),
                    new SteakRule("Medium", true, 121, 130),
                    new SteakRule("MediumWell", true, 131, 140),
                    new SteakRule("WellDone", true, 141, 200),
                    new SteakRule("Burned", false, 201, int.MaxValue)
                };

            var steak = new Steak(steakRules);

            Assert.AreEqual(0, steak.Temperature);
            Assert.AreEqual("This steak is Raw and cannot be eaten.", steak.ToString());

            steak.AddTemperature(50);

            Assert.AreEqual(50, steak.Temperature);
            Assert.AreEqual("This steak is Raw and cannot be eaten.", steak.ToString());

            steak.AddTemperature(55);

            Assert.AreEqual(105, steak.Temperature);
            Assert.AreEqual("This steak is Rare and can be eaten.", steak.ToString());

            steak.AddTemperature(20);

            Assert.AreEqual(125, steak.Temperature);
            Assert.AreEqual("This steak is Medium and can be eaten.", steak.ToString());

            steak.AddTemperature(40);

            Assert.AreEqual(165, steak.Temperature);
            Assert.AreEqual("This steak is WellDone and can be eaten.", steak.ToString());

            steak.AddTemperature(40);

            Assert.AreEqual(205, steak.Temperature);
            Assert.AreEqual("This steak is Burned and cannot be eaten.", steak.ToString());
        }

        public class Steak
        {
            private readonly IReadOnlyList&lt;SteakRule&gt; _rules;

            public Steak(IReadOnlyList&lt;SteakRule&gt; rules)
            {
                _rules = rules;
            }

            public int Temperature { get; private set; }

            public void AddTemperature(int temp)
                =&gt; Temperature += temp;

            public string State
                =&gt; _rules.First(rule =&gt; rule.Applies(Temperature)).Name;

            public bool CanEat()
                =&gt; _rules.First(rule =&gt; rule.Applies(Temperature)).Edible;

            public override string ToString()
            {
                var canBeEaten = CanEat() ? "can be eaten" : "cannot be eaten";
                return $"This steak is {State} and {canBeEaten}.";
            }
        }

        public class SteakRule
        {
            public string Name { get; }
            public bool Edible { get; }
            public int MinTemperature { get; }
            public int MaxTemperature { get; }

            public SteakRule(string name, bool edible, int minTemperature, int maxTemperature)
            {
                Name = name;
                Edible = edible;
                MinTemperature = minTemperature;
                MaxTemperature = maxTemperature;
            }

            public bool Applies(int temp)
                =&gt; MinTemperature &lt;= temp &amp;&amp; temp &lt;= MaxTemperature;
        }
    }
}
</code></pre>
    </div>