<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would highly recommend that you read <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8</a>, the Python style guide.</p>

<p>There are a couple rules you are breaking.</p>

<p>From the <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow">Imports</a> section:</p>

<blockquote>
  <p>Wildcard imports (<code>from &lt;module&gt; import *</code>) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools.</p>
</blockquote>

<p>You should instead use <code>import turtle</code>.</p>

<p>From the <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow">Indentation</a> section:</p>

<blockquote>
  <p>Use 4 spaces per indentation level.</p>
</blockquote>

<p>From the <a href="https://www.python.org/dev/peps/pep-0008/#function-names" rel="nofollow">Function Names</a> section:</p>

<blockquote>
  <p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p>
  
  <p>mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility. </p>
</blockquote>

<p>From the <a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow">Other Recommendations</a> section:</p>

<blockquote>
  <p>Compound statements (multiple statements on the same line) are generally discouraged.</p>
  
  <p>Yes:</p>

<pre><code>if foo == 'blah':
    do_blah_thing()
do_one()
do_two()
do_three()
</code></pre>
  
  <p>Rather not:</p>

<pre><code>if foo == 'blah': do_blah_thing()
do_one(); do_two(); do_three()
</code></pre>
</blockquote>

<p>Also from that section:</p>

<blockquote>
  <p>Always surround these binary operators with a single space on either side: assignment (<code>=</code>), augmented assignment (<code>+=</code>, <code>-=</code>, etc.), comparisons (<code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>!=</code>, <code>&lt;&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>), Booleans (<code>and</code>, <code>or</code>, <code>not</code>).</p>
</blockquote>

<p>I just had to get that over with.  Now for my comments:</p>

<p>You have some foreign characters in your file.  You should probably put <code># -*- encoding: UTF-8 -*-</code> at the beginning of the file so that Python knows how to interpret them.</p>

<p>In Python2, you can use either a new line or a semicolon to mark the end of a command.  Using both is redundant.</p>

<blockquote>
<pre><code>for a in range(0,401,20):
</code></pre>
</blockquote>

<p>Why <code>20</code>?  Why <code>401</code>?  You should define a constant at the beginning of the file:</p>

<pre><code>CELL_SIZE = 20
</code></pre>

<p>Then, draw the grid after you have defined the grid:</p>

<pre><code>grid = [
    ...
]

for i, row in enumerate(grid):
    turtle.sety(i * CELL_SIZE)
    turtle.forward(len(row) * CELL_SIZE)
    turtle.backward(len(row) * CELL_SIZE)

for i, column in enumerate(zip(*grid)):
    turtle.setx(i * CELL_SIZE)
    turtle.forward(len(column) * CELL_SIZE)
    turtle.backward(len(column) * CELL_SIZE)
</code></pre>

<p>The reason for all this: you can easily change the size of the grid or the size of the cells.  The way I have it written above, you shouldn't even need to have a <em>rectangular</em> grid, let alone a square one.  You would also need to change <code>forward(20)</code> to <code>forward(CELL_SIZE)</code> and <code>goto(20, 20)</code> to <code>goto(CELL_SIZE, CELL_SIZE)</code>.  I also changed <code>forward(-400)</code> to <code>backward(400)</code>.  That makes a little more sense, doesn't it?  One more thing that I changed: <code>map</code> is a bad variable name because it shadows the built-in function.  If you were to try to use that function ... you'd get <code>list object is not callable</code>.  That might be confusing.  It's better to stick with names that have not already been used.</p>

<blockquote>
<pre><code>#write(a)
</code></pre>
</blockquote>

<p>If you aren't using that code any more, take it out.  If it was there for debugging purposes, you should have put <code>#DEBUG</code> at the end of the line.  That way, you can search for <code>DEBUG</code> once you think you are done, and remove all of those lines.</p>

<blockquote>
<pre><code>for x in range(4):
    forward(20)
    right(90)
</code></pre>
</blockquote>

<p>It is generally a good idea to use <code>_</code> as a variable name if you aren't using the variable.  It just makes it a little more obvious.  One more thing: how did you decide on <code>4</code>?  You shouldn't use magic numbers like that.</p>

<blockquote>
<pre><code>if cell=='S' or cell=='F':
    if cell=='S':
        color('green')
    else:
        color('yellow')
</code></pre>
</blockquote>

<p>Instead of using an <code>if</code> statement to check two conditions and then re-check the conditions, use <code>elif</code>:</p>

<pre><code>if cell == 'S':
    turtle.color('green')
elif cell == 'F':
    turtle.color('yellow')
</code></pre>

<blockquote>
<pre><code>goto(20, 20)
</code></pre>
</blockquote>

<p>Any occurrences of <code>goto()</code> should be something like <code>goto(HOME[0] + ..., HOME[1] + ...)</code>.  You would, of course, define <code>HOME</code> higher up.  As it is, it's difficult for me to place your grid where I want it.  It's up in the corner for me.</p>

<blockquote>
<pre><code>hero.row = 8
hero.col = 2
</code></pre>
</blockquote>

<p>I can see why the column would be two, but why is the row eight?  Shouldn't it be eighteen to be the second to last row?  If that is what you meant, do <code>hero.row = len(grid) - 2</code>.</p>

<blockquote>
<pre><code>Â 
</code></pre>
</blockquote>

<p>You never started the main loop.  You should have <code>turtle.mainloop()</code> at the end.</p>
    </div>