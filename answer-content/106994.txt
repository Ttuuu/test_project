<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>window.animate = function(options) {
</code></pre>

<p>This would be fine if <code>animate</code> was just... <code>animate</code>. But when you start to add more and more APIs, you might want to house them in a single global instead of putting them all in the global namespace.</p>

<pre><code>var factor = window.w.easing[$this.easing]($this._iteration, $this.duration);
</code></pre>

<p>Here's another case. You wouldn't want to have very many globals, unless that's another framework. But I can't really tell, because <code>w</code> doesn't really tell me anything.</p>

<hr>

<pre><code>var fps = options.fps || 30;
var x = options.x || null;
var y = options.y || null;
var duration = Math.ceil((options.duration / 1000) * fps);
var onProgress = options.onProgress || null;
var onComplete = options.onComplete || null;        
var easing = easing || 'easeInOutQuad';

var animation = {

// into

var animation= Object.assign({
  // Your defaults
  fps: 30,
  x: null,
  y: null,
  ...
}, options);
</code></pre>

<p>If you can use ES6 APIs, then you can use <code>Object.assign</code>. What it does is merge the object into the first object. If you also happen to use jQuery, lodash or underscore, you can also use their extend methods. jQuery has <code>$.extend</code> which does the same thing.</p>

<hr>

<p>Normally, you would want to reschedule <code>requestAnimationFrame</code> immediately after you call the callback. That way, there is no delay caused by your operations in drawing the next frame. You can cancel it anytime.</p>

<pre><code>draw: function(){
  var id = requestAnimationFrame(this.draw);
  ... do stuff ...
  if(shouldCancel) cancelAnimationFrame(id);
}
</code></pre>

<hr>

<pre><code>var now = Date.now();
var delta = now - $this._lastFrameOccurrence;
</code></pre>

<p>I believe the <code>Date.now()</code> isn't necessary. <code>requestAnimationFrame</code> callbacks receive a current timestamp as it's first argument.</p>

<hr>

<pre><code>for (var i in $this.x)
</code></pre>

<p>I can't tell what <code>$this.x</code> is. But if it's an array, use a regular <code>for</code> loop instead of a <code>for-in</code>.</p>

<hr>

<pre><code>if ($this.onProgress instanceof Function)
    $this.onProgress(response);

$this._iteration++;

if ($this._iteration &gt; $this.duration)
    if ($this.onComplete instanceof Function)
        $this.onComplete();
</code></pre>

<p>Instead of checking if it is a function, why not default it to a function that does nothing. That way, you can just call it.</p>

<hr>

<pre><code>animate(
    { left: 100 },
    { left: 300 },
      60,
      function(r) { console.log(r); },
      function() {}
);
</code></pre>

<p>I think this is broken. Your <code>animate</code> expects a single object. You have the whole town here.</p>
    </div>