<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>List objects are iterables.  A <code>for</code> loop implicitly calls <code>iter()</code> on the list, but you can do it yourself, too.</p>

<pre><code>nums_iter = iter(nums)
num0 = next(nums_iter)
for num in nums_iter:
    # ...
</code></pre>

<p>The list is not copied, and the <code>for</code> loop will begin with the second item, as required.</p>

<p>However, this is far less clear than <code>for num in nums[1:]:</code></p>

<hr>

<p>Much clearer is to leverage <code>itertools</code>, specifically <a href="https://docs.python.org/3/library/itertools.html?highlight=islice#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice()</code></a>:</p>

<pre><code>for num in islice(nums, 1, None):
    # ...
</code></pre>

<p>However, <code>islice()</code> also allows a <code>step</code> greater than one, which means you probably lose performance to the code that supports this unneeded capability.</p>

<p>Copying the array might be a smaller performance penalty.  You’ll want to profile each approach, and evaluate the trade off between readability and performance.</p>

<hr>

<p>Speaking of unnecessary copies:</p>

<pre><code>keys = list(counts)
</code></pre>

<p><code>counts</code> is not changed in the loop below, so memorizing the list of keys is an unnecessary copy.  You could simply use:</p>

<pre><code>for key in counts:
    # ...
</code></pre>

<hr>

<p><code>counts[key]</code> is an unnecessary lookup.  And you are doing it twice.  Better is to retrieve the value with the key during the iteration process.  </p>

<pre><code>for key, val in counts.items():
    # ...
</code></pre>

<hr>

<p>And, as mentioned in @ArthurHavlicek’s answer, use <code>collections.Counter</code>.</p>
    </div>