<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(Because of the way Code Review works, only <em>your</em> code can be reviewed.  Therefore, I will not say anything on the code written by "one gentleman".)</p>

<p>The first thing I see is: <em>use consistent indentation and add spaces.</em>  Your code becomes much more readable if you format it like this:</p>

<pre><code>int hammingWeight(uint32_t n) {
    int count = 0;
    while (n &gt; 0) {
        count += n &amp; 1;
        n &gt;&gt;= 1;
    }
    return count;
}
</code></pre>

<p>Also, it is probably a good idea to use <code>std::uint32_t</code> instead of <code>uint32_t</code> in C++.</p>

<p>You can make this function <code>constexpr</code> and <code>noexcept</code>.  Simple computations like this can be done at compile time, and benefit from inlining.</p>

<p>This function can also be generalized to take any unsigned integer type.  A template version may look like:</p>

<pre><code>template &lt;typename T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt; &amp;&amp; std::is_unsigned_v&lt;T&gt;&gt;&gt;
constexpr int hammingWeight(T n) noexcept
{
    // the implementation is the same
}
</code></pre>

<p>The implementation is good enough and very readable IMO.  You don't have to get very creative unless measuring reveals the necessity of optimization.</p>

<p>In C++20, we have a standard function for this â€” <code>std::popcount</code>, in header <code>&lt;bit&gt;</code>.</p>
    </div>