<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thinking this more, there are three things affecting the appeal.</p>

<ul>
<li>A[i]</li>
<li>A[j]</li>
<li>i - j</li>
</ul>

<p>Since <code>A[i] + A[j]</code> is the same as <code>A[j] + A[i]</code>, you don't need to traverse the whole array in the inner loop.</p>

<p>Since the third component increases the appeal only when <code>j &lt; i</code>, you can restrict the inner loop to run from 0 to i.</p>

<p>You also need to take into account the fact that all cities may have negative appeal. Integer.MIN_VALUE is safe initial value, as the lowest valid value (2 * -1000000000 - 100000) is still greater than that.</p>

<p>Using Math.max would have been more readable.</p>

<pre><code>    int highestAppeal = Integer.MIN_VALUE;

    for (int i = 0; i &lt; A.length; i++) {
        for (int j = 0; j &lt;= i; j++) {
            final int currentAppeal = A[i] + A[j] + (i - j);
            highestAppeal = Math.max(highestAppeal, currentAppeal);
        }
    }

    return highestAppeal; 
</code></pre>

<p>And you can't overestimate the value of commented code in an interview answer.</p>
    </div>