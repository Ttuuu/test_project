<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To supplement the other reviews, here are some other things you might improve.</p>

<h2>Use <code>override</code> where appropriate</h2>

<p>When a virtual function is being overridden, it should be marked <code>override</code> to allow catching errors at compile time.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-override" rel="noreferrer">C.128</a>.</p>

<h2>Make sure all paths return a value</h2>

<p>The <code>setType</code> routine claims it returns an <code>int</code> but it does not.  That's an error that should be addressed.</p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Think carefully about object ownership</h2>

<p>The traditional role of a shelter is to take in animals and then give them to a new owner on adoption.  This shelter seems to only do bookkeeping of the location of animals (by handling only pointers) rather than actually taking ownership of them.  What is actually a more appropriate way to express this is by the use of a <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" rel="noreferrer"><code>std::unique_ptr</code></a>.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r20-use-unique_ptr-or-shared_ptr-to-represent-ownership" rel="noreferrer">R.20</a></p>

<h2>Think carefully about the domain and range of numbers</h2>

<p>The <code>_queueOrder</code> increases without bound and is used to assign the <code>_order</code> of each animal.  What happens when that number wraps around?  </p>

<h2>Use polymorphism effectively</h2>

<p>Whenever you find yourself writing code like this:</p>

<pre><code>if (animal-&gt;getClassName() == "Cat") {
        Cat* d = dynamic_cast&lt;Cat*&gt;(animal);
</code></pre>

<p>stop and question whether this is really needed.  By using <code>animal-&gt;getClassName()</code> as a sort of home-grown polymorphism, the code is made much more brittle and hard to maintain.  Here's how I'd write that using a <code>std::unique_ptr</code> instead:</p>

<pre><code>void enqueue(std::unique_ptr&lt;Animal&gt; &amp;&amp;animal) {
    animal-&gt;setOrder(++queueOrder);
    if (typeid(*animal) == typeid(Cat)) {
        catQueue.push_back(std::move(animal));
    } else if (typeid(*animal) == typeid(Dog)) {
        dogQueue.push_back(std::move(animal));
    } else {
        throw std::runtime_error("This animal is not suitable for the shelter");
    }
}
</code></pre>

<p>Note that this uses true RTTI, built into the language, instead of inventing a poor imitation.  It also <code>throw</code>s an error if the passed animal is neither a cat nor a dog.  This could be handy if someone attempted to drop off a pet rhinocerous.</p>

<h2>Don't expose class internals</h2>

<p>It seems to me that <code>getDogQueue</code> and <code>getCatQueue</code> are both ill-advised and unneeded.  I'd simply omit them both.</p>

<h2>Base destructors should be <code>virtual</code></h2>

<p>The destructor of a base class, including a pure virtual one like <code>Animal</code>, should be <code>virtual</code>.  Otherwise, deleting the object could lead to undefined behavior and probably memory leaks.</p>

<h2>Consolidate common items into a base class</h2>

<p>Since all of the derived classes have <code>_name</code>, why not move that functionality into the base class?</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>getName()</code> function does not alter the underlying class because it returns a copy of the name. Similarly, the <code>getClassName()</code> function does not alter the class.  Both should be declared const.</p>

<h2>Use standard operators</h2>

<p>Rather than the vaguely named <code>Compare</code>, better would be to simply use the standard <code>operator&lt;</code>.  Here's how I'd write it as a member function of <code>Animal</code>:</p>

<pre><code>bool operator&lt;(const Animal&amp; b) const {
    return _order &lt; b._order;
}
</code></pre>

<h2>Use better names</h2>

<p>Most of the names are not bad, but rather than <code>AnimalQueue</code> and <code>enqueue</code> and <code>dequeue</code>, I'd suggest giving them more usage-oriented names rather than describing the internal structure.  So perhaps <code>AnimalShelter</code>, <code>dropoff</code> and <code>adopt</code> would be more suitable.</p>

<h2>Think carefully about data types</h2>

<p>If you use a <code>std::deque</code> instead of a <code>std::queue</code>, you gain access to iterators which are useful for printing as shown in the next suggestion.</p>

<h2>Use an <code>ostream &amp;operator&lt;&lt;</code> instead of <code>display</code></h2>

<p>The current code has <code>printQueue()</code> function but what would make more sense and be more general purpose would be to overload an <code>ostream operator&lt;&lt;</code> instead.  This renders the resulting function much smaller and easier to understand: </p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const AnimalShelter&amp; as) {
    out &lt;&lt; "\nCat Queue\n";
    for (const auto&amp; critter : as.catQueue) {
        out &lt;&lt; *critter &lt;&lt; '\n';
    }
    out &lt;&lt; "\nDog Queue\n";
    for (const auto&amp; critter : as.dogQueue) {
        out &lt;&lt; *critter &lt;&lt; '\n';
    }
    return out;
}
</code></pre>

<p>I also modified the base class to include <code>_name</code> as mentioned above and wrote this <code>friend</code> function of <code>Animal</code>:</p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Animal&amp; a) {
    return out &lt;&lt; a.getClassName() &lt;&lt; ' ' &lt;&lt; a._name &lt;&lt; ' ' &lt;&lt; a._order;
}
</code></pre>

<h2>Implement the problem specification completely</h2>

<p>The description of the problem mentions that one might be able to adopt either a cat or a dog or the first available, but only the latter function has been implemented.  Here's how I wrote all three:</p>

<pre><code>std::unique_ptr&lt;Animal&gt; adopt() {
    std::unique_ptr&lt;Animal&gt; adoptee{nullptr};
    if (catQueue.empty() &amp;&amp; dogQueue.empty())
        return adoptee;

    if (catQueue.empty()) {
        std::swap(adoptee, dogQueue.front());
        dogQueue.pop_front();
    } else if (dogQueue.empty() || (catQueue.front() &lt; dogQueue.front())) {
        std::swap(adoptee, catQueue.front());
        catQueue.pop_front();
    } else {
        std::swap(adoptee, dogQueue.front());
        dogQueue.pop_front();
    }
    return adoptee;
}

std::unique_ptr&lt;Animal&gt; adoptCat() {
    std::unique_ptr&lt;Animal&gt; adoptee{nullptr};
    if (!catQueue.empty()) {
        std::swap(adoptee, catQueue.front());
        catQueue.pop_front();
    }
    return adoptee;
}

std::unique_ptr&lt;Animal&gt; adoptDog() {
    std::unique_ptr&lt;Animal&gt; adoptee{nullptr};
    if (!dogQueue.empty()) {
        std::swap(adoptee, dogQueue.front());
        dogQueue.pop_front();
    }
    return adoptee;
}
</code></pre>

<h2>Results</h2>

<p>Here is the modified <code>main</code> to exercise the revised code:</p>

<pre><code>int main()
{   
    AnimalShelter shelter;
    shelter.dropoff(std::unique_ptr&lt;Animal&gt;(new Dog{"Max"}));
    shelter.dropoff(std::unique_ptr&lt;Animal&gt;(new Cat{"Trace"}));
    shelter.dropoff(std::unique_ptr&lt;Animal&gt;(new Cat{"Han"}));
    shelter.dropoff(std::unique_ptr&lt;Animal&gt;(new Dog{"Shaun"}));
    shelter.dropoff(std::unique_ptr&lt;Animal&gt;(new Dog{"Tiger"}));
    shelter.dropoff(std::unique_ptr&lt;Animal&gt;(new Cat{"Meow"}));
    try {
        shelter.dropoff(std::unique_ptr&lt;Animal&gt;(new Rhino{"Buster"}));
    } catch (std::runtime_error &amp;err) {
        std::cout &lt;&lt; err.what() &lt;&lt; '\n';
    }
    std::cout &lt;&lt; shelter &lt;&lt; '\n';

    for (int i = 0; i &lt; 2; ++i) {   
        auto pet = shelter.adoptDog();
        if (pet) {
            std::cout &lt;&lt; "You have adopted " &lt;&lt; *pet &lt;&lt; "\n";
        } else {
            std::cout &lt;&lt; "sorry, there are no more pets\n";
        }
        std::cout &lt;&lt; shelter &lt;&lt; '\n';
    }

    for (int i = 0; i &lt; 6; ++i) {  // adopt any
        auto pet = shelter.adopt();
        if (pet) {
            std::cout &lt;&lt; "You have adopted " &lt;&lt; *pet &lt;&lt; "\n";
        } else {
            std::cout &lt;&lt; "sorry, there are no more pets\n";
        }
        std::cout &lt;&lt; shelter &lt;&lt; '\n';
    }

    std::cout &lt;&lt; "Final: \n" &lt;&lt; shelter &lt;&lt; '\n';
}
</code></pre>
    </div>