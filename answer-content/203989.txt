<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Avoid working in the global namespace</p>

<p>This makes maintenance of code a pain. Instead create a <code>main</code> or <code>hangman</code> function</p></li>
<li><p>Don't use <code>global</code> instead make these variables parameters of you function</p>

<blockquote>
<pre><code>def draw_man_and_show_word():
   global word
</code></pre>
</blockquote>

<p>Could be </p>

<pre><code>def draw_man_and_show_word(word):
</code></pre></li>
<li><p>Don't make lines to long, they become really hard to read</p>

<blockquote>
<pre><code>array=[[124,45,45,45,45,32,32,32],[124,32,32,32,124,32,32,32],[124,32,32,32,32,32,32,32],[124,32,32,32,32,32,32,32],[124,32,32,32,32,32,32,32],[124,32,32,32,32,32,32,32],[124,32,32,32,32,32,32,32]]
</code></pre>
</blockquote>

<p>See how you need to scroll all the way to the right, this would be much more easy on the eyes</p>

<pre><code>HANGMAN =  [
               ['|', '-', '-', '-', '-', ' ', ' ', ' '],
               ['|', ' ', ' ', ' ', '|', ' ', ' ', ' '],
               ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
               ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
               ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
               ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
               ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
           ]
</code></pre>

<p>I also changed it to their character form which makes it even more easy to read</p>

<p>And made the variable name <code>ALL_CAPS</code> since this is a constant</p></li>
<li><p>Use unpacking // <em>Optional namedtuple</em></p>

<blockquote>
<pre><code>man=[[4,2,79],[4,3,43],[3,3,47],[5,3,92],[4,4,124],[3,5,47],[5,5,92]]
y=man[size][0]
x=man[size][1]
c=man[size][2]
array[x][y]=c 
size=size+1
</code></pre>
</blockquote>

<p>First I cleaned it up a bit</p>

<pre><code>HANGMAN_STAGES = [
                     [4, 2, 'O'],
                     [4, 3, '+'],
                     [3, 3, '/'],
                     [5, 3, '\\'],
                     [4, 4, '|'],
                     [3, 5, '/'],
                     [5, 5, '\\']
                 ]
</code></pre>

<p>And we can unpack the values from the list of lists with this</p>

<p><code>x, y, value = HANGMAN_STAGES[size]</code></p>

<p>Alternatively you can use the <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> module to store information more visually</p>

<p>The it would become</p>

<pre><code>from collections import namedtuple

Stage = namedtuple('Stage', 'x, y, value')
HANGMAN_STAGES = [
                     Stage(4, 2, 'O'),
                     Stage(4, 3, '+'),
                     Stage(3, 3, '/'),
                     Stage(5, 3, '\\'),
                     Stage(4, 4, '|'),
                     Stage(3, 5, '/'),
                     Stage(5, 5, '\\')
                 ]
</code></pre>

<p>And you can call them like this</p>

<pre><code>stage = HANGMAN_STAGES[size]
HANGMAN[stage.y][stage.x] = stage.value
</code></pre></li>
<li><p>Make the <code>guessed_letters</code> a <code>set()</code></p>

<p>For fast lookup O(0)</p></li>
<li><p><code>join()</code> instead of manually appending chars</p>

<blockquote>
<pre><code>for y in range(0,7):
    for x in range(0,7):
        print (chr(array[y][x]),end='')
    print()
</code></pre>
</blockquote>

<p>Could be rewritten as <code>print('\n'.join(''.join(row) for row in draw_list))</code></p>

<p>If we have changed the HANGMAN to contain <code>chr</code> instead of the ordinal values</p></li>
<li><p>Instead of the <code>find</code> and <code>replace</code> methods you could have used <code>enumerate</code></p>

<blockquote>
<pre><code>pos=theword.find(letter)
if (pos &gt;= 0):
    tmpword=theword
    while (pos &gt;= 0):
        word[pos]=letter
        tmpword=tmpword.replace(letter,'#',1)
        pos=tmpword.find(letter)
</code></pre>
</blockquote>

<p>Can be rewritten in the form of</p>

<pre><code>for idx, char in enumerate(theword):
    if char == letter:
        guessed_word[idx] = letter
</code></pre>

<p>But <code>strings</code> can't be assigned... so you should set the data type of guessed_word to a <code>list</code></p></li>
<li><p>Lastly top it off with a <code>if __name__ == '__main__'</code></p></li>
</ol>

<h1>Putting it all together</h1>

<pre><code>import random

HANGMAN =  [
                ['|', '-', '-', '-', '-', ' ', ' ', ' '],
                ['|', ' ', ' ', ' ', '|', ' ', ' ', ' '],
                ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                ['|', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
           ]

HANGMAN_STAGES = [
                    [4, 2, 'O'],
                    [4, 3, '+'],
                    [3, 3, '/'],
                    [5, 3, '\\'],
                    [4, 4, '|'],
                    [3, 5, '/'],
                    [5, 5, '\\']
                 ]
SPACE = '_'

def print_man_and_word(draw_list, guessed_word):
    print('\n'.join(''.join(row) for row in draw_list))
    print()
    print(''.join(guessed_word))

def get_random_word():
    # Your logic here (I don't have linux atm ;)
    word_list = ['cheese', 'pepper', 'sausage']
    return random.choice(word_list)

def get_letter(guessed_letters):
    letter = ''
    while len(letter) != 1 or not letter.islower() or letter in guessed_letters:
        letter = input("Enter your choice of (single lowercase) letter:")
    return letter

def hangman(word=None, draw_list=HANGMAN):
    if word is None:
        word = get_random_word()

    guessed_word = [SPACE] * len(word)
    guessed_letters = set()
    tries = 0

    while True:
        print_man_and_word(draw_list, guessed_word)
        letter = get_letter(guessed_letters)
        guessed_letters.add(letter)

        if letter in word:
            for idx, char in enumerate(word):
                if char == letter:
                    guessed_word[idx] = letter
        else:
            x, y, value = HANGMAN_STAGES[tries]
            draw_list[y][x] = value
            tries += 1

        if all(char != SPACE for char in guessed_word):
            print_man_and_word(draw_list, guessed_word)
            print('\nYou got it!')
            exit()

        elif tries == len(HANGMAN_STAGES):
            print_man_and_word(draw_list, guessed_word)
            print('You lost! it is {}'.format(word))
            exit()    

if __name__ == '__main__':
    hangman()
</code></pre>
    </div>