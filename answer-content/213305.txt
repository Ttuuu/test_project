<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Mathias’ answer is the correct way of solving your problem but since this is a code review site, let’s look at the rest of your code.</p>

<p>First off, your code style is fundamentally tidy and clear, so that’s very good. Now for some detailed feedback:</p>

<blockquote>
<pre><code>    # Open Database
</code></pre>
</blockquote>

<p>Comments such as this one are at best unnecessary and at worst harmful: the comment provides <em>no additional information</em> compared to the code, and at worst they are misleading. Case in point, what happens if the file <code>SQLite_Test.db</code> doesn’t exist yet? Your comment gives no indication — it implies that the file <em>must</em> exist. But SQLite will actually happily create it for you if it doesn’t exist yet.</p>

<p><a href="https://jessicabaker.co.uk/2018/09/10/comment-free-coding/" rel="noreferrer">Jessica Baker has written a very good article explaining how to write comments well</a>. I strongly urge anyone to read it in its entirety.</p>

<blockquote>
<pre><code>    c = conn.cursor()
</code></pre>
</blockquote>

<p>Your code doesn’t need database cursors: Although the subsequent code uses <code>c</code>, it could use <code>conn</code> instead.</p>

<blockquote>
<pre><code>    i = 0
</code></pre>
</blockquote>

<p>This initialisation is redundant: <code>range(…)</code> does it for you.</p>

<blockquote>
<pre><code>    for i in range(200):
</code></pre>
</blockquote>

<p>Why <code>200</code>? Avoid hard-coding “magic” numbers. If this is the size of your database table, don’t put the number in code, compute it from the database. If the number is arbitrary (for testing, say), assign it to a variable stating thus.</p>

<blockquote>
<pre><code>        DB_Values = []        
        DB_Values = c.fetchone()
</code></pre>
</blockquote>

<p>The first line here sets <code>DB_Values</code> to an empty list; the second line immediately overrides that value. The first lines is therefore unnecessary.</p>

<p>Apart from this, you should respect <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> naming conventions. Lastly, <code>db_values</code> isn’t a very clear name: <code>db_row</code> might be more expressive.</p>

<blockquote>
<pre><code>        Value1 = DB_Values[0]+200
        Value2 = DB_Values[1]+400
</code></pre>
</blockquote>

<p>Same comment regarding names, and same comment regarding magic numbers.</p>

<blockquote>
<pre><code>        c.execute('''UPDATE Test SET Test2 = ?, Test3 = ? WHERE Test1= ?''', (Value1, Value2, i))
        i += 1  
</code></pre>
</blockquote>

<p>You might think that it’s necessary to increment <code>i</code> to progress the loop but this isn’t the case. The increment of <code>i</code> fulfils no purpose, since it will be overridden by the <code>for</code> loop anyway.</p>

<blockquote>
<pre><code>    # Save (commit) the changes
</code></pre>
</blockquote>

<p>Same as above: this comment isn’t helpful, since it just repeats what the code says.</p>

<blockquote>
<pre><code>    conn.commit()
</code></pre>
</blockquote>

<p>If there was an exception in the preceding code, this <code>commit</code> will never be executed. You <em>may</em> have intended this; but chances are, you didn’t. It’s therefore best practice to avoid implicit resource cleanup (including database commits), and to <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="noreferrer">use Python’s <code>with</code> statement</a> instead.</p>

<hr>

<p>Taking this in account, here’s a rewritten version of your code:</p>

<pre><code>import sqlite3
import time

TEST_NUM_ROWS = 200
TEST2_INC = 200
TEST3_INC = 400

def database_test():
    with sqlite3.connect('SQLite_Test.db') as conn:
        for i in range(TEST_NUM_ROWS):
            row = conn.execute(
                'SELECT Test2, Test3 FROM Test WHERE Test1 = ?',
                (i,)
            ).fetchone()
            new_row = (row[0] + TEST2_INC, row[1] + TEST3_INC)
            conn.execute(
                'UPDATE Test SET Test2 = ?, Test3 = ? WHERE Test1 = ?',
                new_row + (i,)
            )


start_time = time.time()
database_test()
print("--- %s seconds ---" % round((time.time() - start_time), 4))
</code></pre>
    </div>