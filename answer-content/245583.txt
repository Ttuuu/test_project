<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    for (int i_ind = 0; i_ind &lt; size; i_ind++) {
        if (i_ind) {
</code></pre>
<p>is a known anti-pattern. <code>if (i_ind)</code> is guarantied to fail at the first iteration, and is guaranteed to succeed at all the rest of them. Move the special case out of the loop, and start the loop with <code>int i_ind = 1;</code>. To keep the code DRY, make the block</p>
<pre><code>        for (int j_ind = 0; j_ind &lt; size; j_ind++) {
            indegree_paths[i_ind][j_ind][mouse_turn] = graph[i_ind].size();
            indegree_paths[i_ind][j_ind][cat_turn] = graph[j_ind].size();

            if (find(graph[j_ind].begin(), graph[j_ind].end(), 0) != graph[j_ind].end()) {
                indegree_paths[i_ind][j_ind][cat_turn]--;
            }
        }
</code></pre>
<p>into a function. As a side note, it is always a good idea to avoid naked loops.</p>
<hr>
<p>Speaking of DRY, the <code>if (mouse_turn == prev_turn)</code> and <code>else</code> clauses are pretty much identical. You should try to factor them into a function as well. Let me repeat the no-naked-loops mantra.</p>
<p>It is very unclear why he <code>else</code> clause tests for <code>not cat</code>, but the <code>if</code> clause does not have a symmetric <code>not mouse</code> test. That said, I don't see how these tests may ever fail.</p>
<hr>
<p>I am not sure that <code>std::vector</code> holding 4 values of a completely unrelated nature is a right approach. Names are better than indices. Consider a</p>
<pre><code>struct state {
    int mouse_state;
    int cat_state;
    int turn; // Even maybe `bool turn;`
    int final_state;
};
</code></pre>
<hr>
<p>I do not endorse using <code>not</code>.</p>
    </div>