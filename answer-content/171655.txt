<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Edit: I've updated the code and uploaded <a href="https://gist.github.com/snewell92/de233fbe11a5e4b159da1cf8e8f1b766" rel="nofollow noreferrer">a gist</a> that will work in the <a href="http://www.typescriptlang.org/play/" rel="nofollow noreferrer">TS playground</a> - the gist will compile with Typescript 3.1.</p>

<p>The primary benefit of Typescript is to provide types for Javascript. And since <a href="https://www.typescriptlang.org/docs/handbook/generics.html" rel="nofollow noreferrer">Typescript provides Generics</a> - I don't think your implementation of a Dictionary provides any benefit over a plain javascript object.</p>

<p>In fact, as you noted in the comments, JS Objects (ie TS object) <em>are</em> dictionaries. You just need to provide types around them for your dictionary. (btw - I also come from a C# background, but I've also come to love the underlying functional nature of JS that TS lets us type).</p>

<p>Here's a code sample of the direction I would expect a <code>Dictionary.ts</code> class to have in a code base I work in. Now that we have <a href="https://github.com/Microsoft/TypeScript/pull/12114" rel="nofollow noreferrer">Mapped Types</a>, we can <a href="http://www.rickcarlino.com/2017/02/27/Real-World-Use-Case-For-Typescript-Record-Types/" rel="nofollow noreferrer">generalize dictionaries better</a>.</p>

<pre><code>export interface Dictionary&lt;K, V&gt; {
  getKeys(): K[];
  getValues(): V[];
  get(key: K): V | null; // the key might not exist
  put(key: K, val: V): void; // or boolean?
}


export class JSDictionary&lt;K extends string, V&gt; implements Dictionary&lt;K, V&gt; {

  private internalDict: { [key in K]?: V };

  constructor() {
    this.internalDict = {};
  }

  public getKeys() {
    let keys: K[] = [];
    for(let key in this.internalDict) {
      keys.push(key);
    }

    return keys;
  }

  // Type predicate to ensure v exists
  private exists(v: V | undefined): v is V {
    return v != null &amp;&amp; typeof v !== "undefined";
  }

  public getValues() {
    let vals: V[] = [];

    for(let key in this.internalDict) {
      let v = this.internalDict[key];
      if(this.exists(v)) {
        vals.push(v);
      }
    }

    return vals;
  }

  public get(key: K) {
    let v = this.internalDict[key];
    return this.exists(v)
      ? v
      : null;
  }

  public put(key: K, val: V): void {
    this.internalDict[key] = val;
  }

}
</code></pre>

<p>Example Usage</p>

<pre><code>type myKeys = 'FOX' | 'CAT' | 'DOG';

interface Animal {
  species: string;
  name: string;
  weight: number;
}

// A dictionary that hols one fox/cat/dog.
let myAnimalPen = new JSDictionary&lt;myKeys, Animal&gt;();

myAnimalPen.put('FOX', { name: 'Foxworth', species: 'Fox', weight: 40 });

// a dictionary that takes any string and maps it to a number
let idDict = new JSDictionary&lt;string, number&gt;();
idDict.put('somehas', 1204);
idDict.put('yeahaasd', 3306);

let yeaID = idDict.get('yeahaasd'); // yeaID is a number | null type
let myFox = myAnimalPen.get('FOX'); // myFox is an Animal | null type
</code></pre>

<p>Major points:</p>

<ul>
<li>Code to an interface as much as you can in typescript. Affords you flexibility</li>
<li><em>Generic types</em></li>
<li>Transparent use of Plain JS object as the underlying dictionary (JS Engines optimize this very use case!)</li>
<li>I removed overloaded constructors, but you could add that back in with the proper types and it will work as expected</li>
<li>Left out clone - pretty easy to implement though</li>
<li>No exception handling when get returns null, like your 'try*' functions. I actually like try functions like you have, so you could mostly copy/paste, although with the stricter typings sometimes that will be taken care of by the compiler for you.</li>
</ul>
    </div>