<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To address your specific questions:</p>

<ul>
<li><p><strong>Is it Pythonic enough?</strong> I think so.</p></li>
<li><p><strong>Is there any additional data that should be debugged?</strong> If I was using this for my debugging, I’d want a bit more information:</p>

<ul>
<li>The name of the function that’s been called – knowing which args/kwargs were supplied to an unknown function is not that useful</li>
<li>The return value of that function</li>
<li>A trace statement when the function returns</li>
</ul>

<p>There should also be something to distinguish trace output from regular output. That makes it much easier for me to reconstruct the call flow afterwards. Here’s an example of the sort of output I mean:</p>

<pre class="lang-none prettyprint-override"><code>[trace] enter my_function {
[trace]   args: (10, 10)
[trace]   kwargs: {}
hello world
[trace] return 100 } exit my_function
</code></pre>

<p>For extra brownie points, use the traceback module to indent a function and its arguments/return value to match their level in the call tree.</p></li>
<li><p><strong>Do I need a separate function and method decorator?</strong> It seems like it would be possible to do. I haven’t tried it, but <a href="https://stackoverflow.com/q/19314405/1558022">https://stackoverflow.com/q/19314405/1558022</a> seems like it might have a couple of approaches.</p>

<p>If applied to a method, your function decorator will always print the repr() of the object. That might be enough in most cases – perhaps rather than defining a second decorator, you add an argument <code>debug_object</code> to your function decorator which additionally prints the object dict on demand.</p></li>
<li><p><strong>Is it compatible with Python 2.7 and Python 3?</strong> As far as I can tell, yes.</p></li>
</ul>

<hr>

<p>Two other (minor) comments:</p>

<ul>
<li><p><strong>I would rename the decorators.</strong> The first is misleading, because it’s described as “method debug”, but actually gets applied to functions. More generally, I’d be inclined to violate naming principles and make these lowercase instead, so they don’t look out of place next to the decorated functions. I’d probably call them something like <code>@internaltrace</code>.</p></li>
<li><p><strong>The docstring for “debug” is not very useful.</strong> A better docstring would tell me exactly what debugging means in this context – here, something like “print the arguments supplied to the function” would be better.</p>

<p>I’d be inclined to rename this parameter to “trace”, but I think correcting the docstring is more important.</p></li>
</ul>

<hr>

<p>A couple of additional ideas that came to me this morning:</p>

<ul>
<li><p>You might want to tie this into the logging library, and direct all trace output to a dedicated file (say <code>inttrc.log</code>). That isolates trace statements from regular prints without putting <code>[trace]</code> everywhere, and is easier to search through later.</p>

<p>This will get you timestamps, which are worth including, but I forgot about yesterday.</p></li>
<li><p>Although pprint is nice, I think a one-line string might be better. You can always unpack it later if you need to, but having all the associated parts of args/kwargs on the same line will be easy for parsing later.</p></li>
</ul>
    </div>