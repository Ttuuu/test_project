<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>What you did well</h2>

<p>You used the <code>csv</code> module for parsing the CSV file, and you processed it in one pass.  Your code is therefore reasonably efficient, and I wouldn't worry much about its performance.</p>

<h2>Bugs</h2>

<p>Your code reports "The Car that ends up furthest away from its drop is: â€¦", but that is, in my interpretation, not the same as the longest single trip, which is what you were asked to calculate.</p>

<h2>Concerns</h2>

<p>Your <strong>data analysis code is mingled with the CSV parsing</strong>.  That makes the code hard to read and hard to maintain.</p>

<p>The <strong>deeply nested dictionaries</strong> are hard to understand.  What does <code>myDict</code> store?  Its purpose is not apparent from its name.  It's a two-level dictionary, where the first-level key is a <code>vehicle_id</code>, the second-level key is some attribute of that vehicle (the <code>'drop'</code> coordinate, the <code>'start_ride'</code> coordinate, or the <code>'allDistances'</code> running total).  You would be better off with three independent dictionaries.  Better yet, as I've done below, define an <code>Itinerary</code> class instead.</p>

<p>What's <code>aDict</code>?  It keeps track of the distance from each car's drop point to the endpoint of its last trip.  Again, the <strong>variable name does not help</strong>.</p>

<p><strong>The <code>print()</code> call is hard to read</strong>, in an excessively long line of code, with lots of <code>str()</code> casts and unnecessary string concatenations.  In this situation, I would recommend <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-strings</a> (introduced in Python 3.6), or <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code></a>.</p>

<h2>Suggested solution</h2>

<p>This solution reports the car that ends up the furthest from its drop point, as you did, rather than the longest single trip as requested.</p>

<p>The Shapely library is overkill; subclassing <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> with a <code>.distance()</code> method is all I need for a handy <code>Point</code> class.  Euclidean distances can be calculated using <a href="https://docs.python.org/3/library/math.html#math.hypot" rel="nofollow noreferrer"><code>math.hypot</code></a>.</p>

<p>If you look at the data, you'll see that each car acts as a state machine.  It is initialized with a <code>DROP</code> event.  Thereafter, it alternates between <code>START_RIDE</code> and <code>END_RIDE</code> events.  No traveling is allowed when a <code>START_RIDE</code> occurs; the car is always the same place as its preceding <code>DROP</code> or <code>END_RIDE</code> coordinates.  In my <code>Itinerary</code> class, I've kept track of the <code>.state</code> of the car so that I can perform certain assertions, but it's only essential to keep track of the coordinates at each <code>DROP</code> and <code>END_RIDE</code> event.</p>

<p>The <code>itineraries()</code> function parses the CSV into one simple data structure: a dictionary mapping vehicle IDs to their itineraries.  I've chosen to use <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput.input()</code></a> to accept the file on the command line or through <code>sys.stdin</code> without hard-coding the filename.</p>

<p>The data analysis is accomplished using <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in functions</a> <code>len()</code> and <code>max()</code> with <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expressions</a>.  That is more expressive and less cumbersome than maintaining several intermediate results each time an <code>END_RIDE</code> event occurs.</p>

<pre><code>from collections import namedtuple
import csv
import fileinput
from math import hypot
from operator import attrgetter

class Point(namedtuple('Point', 'x y')):
    def distance(self, other):
        """Euclidean distance between two points."""
        return hypot(self.x - other.x, self.y - other.y)

class Itinerary:
    def __init__(self, car, x, y):
        self.car = car
        self.coords = [Point(x, y)]
        self.state = 'DROP'
        self.cumul_dist = 0

    def start_ride(self, x, y):
        assert self.state in ('DROP', 'END_RIDE'), "Restarting unfinished ride"
        assert Point(x, y) == self.coords[-1], "Teleportation occurred"
        self.state = 'START_RIDE'

    def end_ride(self, x, y):
        assert self.state == 'START_RIDE', "Ending a ride that hasn't started"
        self.coords.append(Point(x, y))
        self.state = 'END_RIDE'
        self.cumul_dist += self.coords[-1].distance(self.coords[-2])

    @property
    def final_dist(self):
        return self.coords[-1].distance(self.coords[0])

def itineraries(f):
    cars = {}
    for timestamp, car, event_id, x, y, user_id in csv.reader(f):
        if event_id == 'DROP':
            assert car not in cars, "Dropping the same car twice"
            cars[car] = Itinerary(car, float(x), float(y))
        elif event_id == 'START_RIDE':
            cars[car].start_ride(float(x), float(y))
        elif event_id == 'END_RIDE':
            cars[car].end_ride(float(x), float(y))
    return cars

def main():
    cars = itineraries(fileinput.input()).values()
    drops = len(cars)
    furthest = max(cars, key=attrgetter('final_dist'))
    most_traveled = max(cars, key=attrgetter('cumul_dist'))
    print(f"""There are {drops} total drops.
The car that ends up furthest from its drop is {furthest.car}, at distance {furthest.final_dist}.
Car {most_traveled.car} travels the longest cumulative distance: {most_traveled.cumul_dist}.""")

if __name__ == '__main__':
    main()
</code></pre>
    </div>