<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately it's difficult to provide actionable advice here, because the <strong>purpose</strong> you are trying to achieve is not explained. What would help is sample data, and a clear description of what your script does.</p>

<p>I cannot guess what you are doing, I have no idea if all that even makes sense, surely there must be a better way but we need more insight. Besides, your code is not properly formatted and seems to be  missing a few line breaks.</p>

<p>Anyway, and since I am not a mind reader I will just make some suggestions:</p>

<ul>
<li>use <strong>meaningful names</strong> for your variables and procedures: <code>Sub A_to_B()</code> is meaningless, the procedure should have a more descriptive name</li>
<li>you should add more <strong>comments</strong>, describe every action and why you do it unless it is very obvious</li>
<li>add some <strong>spacing</strong> between lines and logical blocks to make reading easier </li>
<li>proper tabulation too</li>
<li>you have multiple references to <code>ActiveWorkbook</code> or <code>ActiveSheet</code>, but the user could switch to another sheet while the macro is running, thus your code could be running out of scope and likely crash. There are some <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.workbook.activesheet" rel="nofollow noreferrer">caveats</a> with these methods too. <code>ActiveWorkbook</code> is not the workbook where your code resides. It is the last one that had the focus. Better make an explicit reference to a named sheet.</li>
<li>use <strong><a href="https://helpdeskgeek.com/office-tips/why-you-should-be-using-named-ranges-in-excel/" rel="nofollow noreferrer">named ranges</a></strong> rather than static ranges like AD2:BC500: they all look the same and you are never quite sure what they represent, so it's easy to confuse them. You can create named ranges on the fly too, and then use them in your code. This is more flexible than repeating stuff like <code>Range("AD2", "AD" &amp; Cells(Rows.Count, "B")</code>. The first benefit is that the named range is defined only once, and then reused as many times as you want. The other benefit is that the named range is more <strong>descriptive</strong> than a range made up of a number and letters.</li>
<li>rather than hardcoding numbers like: <code>.AutoFilter Field:=17</code>, use <strong>constant variables</strong>. Surely 17 or 19 have a special meaning.</li>
<li>you have <code>Application.ScreenUpdating = False</code> but where is <code>Application.ScreenUpdating</code> = True ?</li>
</ul>

<p>The code doesn't seem to be difficult, and could be so much more readable than it currently is.</p>

<p>Regarding <strong>speed</strong> of execution, you need to figure out yourself, because I am not able to reproduce your environment. If you have 5 million rows, then this is likely going to take time and it's normal. What I would do is add a timestamp trace between each operation to find out which parts are slower. It could be the Replace statements but I have no way to tell.</p>

<p>Here is one trick that could help but you have to try it: in the beginning of your code add this to suspend automatic recalculation:</p>

<pre><code>Application.Calculation = xlManual
</code></pre>

<p>Then turn it back on when done:</p>

<pre><code>Application.Calculation = xlAutomatic
</code></pre>

<p>Using <code>Application.ScreenUpdating</code> is a good thing but there is more than can be done.</p>
    </div>