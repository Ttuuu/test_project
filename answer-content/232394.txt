<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To build upon Karol Miszczyk's answer, I'll take on the averaging function of multiple quaternions, and make it scaleable.</p>

<p>The first option is to use a recursive function. It's scaleable, but you need to ensure the <code>quaternions</code> list has a count that is a power of 2.</p>

<pre><code>/// &lt;summary&gt;
/// Get the average value of a list of quaternion
/// &lt;/summary&gt;
/// &lt;param name="quaternions"&gt;The list of quaternions to average. Count must be a power of 2 and at least 2&lt;/param&gt;
/// &lt;returns&gt;The average quaternion&lt;/returns&gt;

public static Quaternion QuaternionAverageRecursive(List&lt;Quaternion&gt; quaternions)
{
    if (quaternions.Count == 2)
    {
        return Quaternion.Lerp(quaternions[0], quaternions[1], 0.5f);
    }

    var quats1 = quaternions.GetRange(0, quaternions.Count / 2);
    var quats2 = quaternions.GetRange(quaternions.Count / 2, quaternions.Count / 2);

    return Quaternion.Lerp(QuaternionAverageRecursive(quats1), QuaternionAverageRecursive(quats2), 0.5f);
}
</code></pre>

<p>It should give the exact same result as your method, but solves none of the potential performance issue.</p>

<p>Another option is to average each quaternion with a partial average in a loop, similar to what Karol Miszczyk proposed, although his version seems to have bugs. Doing so naively would give more weight to the quaternions at the end of the list, which strays away from your original solution, but could be suitable to your case:</p>

<pre><code>/// &lt;summary&gt;
/// Get the average value of a list of quaternion using a naive accumulating algorithm
/// &lt;/summary&gt;
/// &lt;param name="quaternions"&gt;The list of quaternions to average.&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static Quaternion QuaternionAverageNaive(List&lt;Quaternion&gt; quaternions)
{
    Quaternion result = quaternions[0];

    for (int i = 1; i &lt; quaternions.Count; i++)
    {
        result = Quaternion.Lerp(result, quaternions[i], 0.5f);
    }

    return result;
}
</code></pre>

<p>It is suitable for any non-empty <code>List&lt;Quaternion&gt;</code> and should improve performance, but the results differ from the ones returned by your current method.</p>

<p>Using the third parameter of <code>Quaternion.Lerp</code> to weight the values differently allows to get results close to your current solution:</p>

<pre><code>/// &lt;summary&gt;
/// Get the average value of a list of quaternion using a weighted accumulating algorithm
/// &lt;/summary&gt;
/// &lt;param name="quaternions"&gt;The list of quaternions to average.&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static Quaternion QuaternionAverageWeighted(List&lt;Quaternion&gt; quaternions)
{
    Quaternion result = quaternions[0];

    for (int i = 1; i &lt; quaternions.Count; i++)
    {
        result = Quaternion.Lerp(result, quaternions[i], 1f / (i + 1f));
    }

    return result;
}
</code></pre>

<p>It should have little cost on performance compared to the previous solution, and is still completely scalable. However, while this method would be exact when averaging numbers, the results differ slightly from your method. I suppose this is due to the quirkiness of quaternions, or may be caused by floating point errors, I'm not sure. It is stable, though (averaging a list of identical quaternions outputs the same quaternion), an can be applied to your case.</p>

<p>Finally, answers to <a href="https://stackoverflow.com/questions/12374087/average-of-multiple-quaternions">this question on StackOverflow</a> seem to indicate that getting the exact average implies solving a <code>4n * 4n</code> matrix for eigenvalues (n beein the number of quaternions), which is definitely doable and scalable, but probably sub-optimal performance-wise.</p>
    </div>