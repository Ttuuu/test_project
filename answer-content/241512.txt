<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Things I like about your code</h1>

<ul>
<li>The idea to calculate the length of a number with the logarithm is really good!</li>
<li>In my opinion you are writing good comments.</li>
<li>Good variable names</li>
<li>Works as intended, without (to my knowledge) any bugs.</li>
</ul>

<hr>

<h1>Criticism</h1>

<h2>returnDigitString()</h2>

<ul>
<li>It is considered bad practice to put more than one command into one line. So please make line breaks after every ";".</li>
<li>Your solution is pretty long (over 30 lines) in comparison to the complexity of the problem. You could also have done something like that:</li>
</ul>

<pre><code>    public static String returnDigitString(int digit) {
        String res = "";
        String[] digits = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
        for(int i = 0; i &lt;= 9; i++) {
            if(digit == i) {
                res += digits[i];
                break;
            }
        }
        return res;
    }
</code></pre>

<h2>main()</h2>

<ul>
<li>You are not using the array "reverseStr". The String "digits" is not used either.</li>
<li>When I started your program the first time, I didn't know what to do, because your program didn't tell me. Before scanning a user input, I would tell the user to input something.</li>
</ul>

<pre><code>System.out.println("Please enter number:");
Scanner scn = new Scanner(System.in);
int number = scn.nextInt();
</code></pre>

<p>If you want to improve this point even further (which is highly recommended!), you can use something like that (you will have to use <code>import java.util.InputMismatchException;</code>):</p>

<pre><code>System.out.println("Please enter number:");
Scanner scn = new Scanner(System.in);
int number;
while(true) {
    try {
        number = scn.nextInt();
        break;
    }
    catch(InputMismatchException e) {
        System.out.println("That's not a number!");
        scn.nextLine();
    }
}
</code></pre>

<p>This will check, whether the user really enters a number. If the user enters something else, the program will ask him again to enter a number.</p>

<ul>
<li>Something like that is considered bad practice:</li>
</ul>

<pre><code>if(number != 0) {
length = ( int ) (Math.log10(number) + 1 );}
</code></pre>

<p>Please write</p>

<pre><code>if(number != 0) {
        length = (int) (Math.log10(number) + 1);
}
</code></pre>

<p>instead.</p>

<ul>
<li>"valStr" is not necessary. You can just write:</li>
</ul>

<pre><code>strSeq = returnDigitString(remainder) + strSeq;
</code></pre>

<p>But this really is a minor point and just my personal opinion. It's fine to use an extra variable for this.</p>

<h2>Codestructure</h2>

<ul>
<li>I would use an extra method for the content of the main-method. Just use the main-method to call the new method.</li>
</ul>
    </div>