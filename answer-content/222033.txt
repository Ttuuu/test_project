<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You asked:</p>

<blockquote>
  <p>when do I use <code>entity.position</code> vs <code>[entity position]</code>?</p>
</blockquote>

<p>The former is syntactic sugar for the latter, used with properties. I personally use <code>.</code> notation when dealing with <code>@property</code>, and otherwise use <code>[</code>...<code>]</code> syntax. But this is a matter of opinion, so use your own good judgment. I’d only suggest consistency throughout your project.</p>

<blockquote>
  <p>when do I use <code>NSNumber</code> vs <code>double</code></p>
</blockquote>

<p>Use <code>NSNumber</code> when you need an object. A few cases:</p>

<ul>
<li>if the values might go into a <code>NSArray</code> or other collection;</li>
<li>if you you want to use with <code>NSNumberFormatter</code>;</li>
<li>where the numeric value is not required and you’d like to distinguish between <code>nil</code> and <code>NSNumber</code> and you want to avoid magical “sentinel” values in your code.</li>
</ul>

<p>If you don’t need object behaviors, then feel free to use <code>double</code>, especially where doing something computationally intensive.</p>

<blockquote>
  <p>when do I use <code>int</code> vs <code>NSInteger</code> ...</p>
</blockquote>

<p>Generally prefer <code>NSInteger</code> over <code>int</code>, unless there’s some reason that you need to specify the <code>int</code> type explicitly. See <a href="https://stackoverflow.com/a/4445199/1271826">https://stackoverflow.com/a/4445199/1271826</a>.</p>

<blockquote>
  <p>... vs <code>NSNumber</code></p>
</blockquote>

<p>See <code>double</code>/<code>NSNumber</code> discussion.</p>

<blockquote>
  <p>can I hide methods from super class as <code>RotationalVector</code> can do <code>[RotationalVector vector3]</code> but I would like for it to be only able to use <code>[RotationalVector rotationalVector]</code></p>
</blockquote>

<p>In general, we tend to want to follow the “<a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">Liskov substitution principle</a>”, (LSP) where anywhere you used the base class you should be able to use a subclass. The notion of “hiding” some behavior of the parent is contrary to this notion.</p>

<p>And before you go down the road of “well, instead of hiding, I can just change the behavior of the parent’s method,” that would violate the “<a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" rel="nofollow noreferrer">Open-closed principle</a>”, another guiding design principle.</p>

<blockquote>
  <p>within an instance method whats the difference between <code>_x</code>, <code>[self x]</code> and <code>self.x</code></p>
</blockquote>

<p><code>self.x</code> is simply syntactic sugar for <code>[self x]</code>. As discussed above, you’d tend to use the former for properties.</p>

<p>Re <code>_x</code>, that is bypassing the accessor methods (getters/setters) and interacting with the instance variable (ivar) directly. That’s in contrast to <code>self.x</code> (and <code>[self x]</code>), which are interacting with the accessor methods (getters and setters), which is a higher level of abstraction. In general, the <code>self.x</code> pattern offers better future-proofing of your code (e.g. if you decide to implement custom getters and setters at some future date, it saves you from pouring through your code for when you bypassed the accessor methods and interacted directly with the ivar). </p>

<p>You just want to avoid using <code>self.x</code> pattern inside the getters/setters for <code>x</code> (or else you can end up with infinite recursion). And, arguably, you should avoid it inside your initializer method, too. </p>

<blockquote>
  <p>would it be a good idea to only include <code>init</code> methods in the .m file?</p>
</blockquote>

<p>The implementation of the <code>init</code> methods (as do the implementations of all methods) belong in <code>.m</code> file. The declaration of the <code>init</code> methods belongs in the <code>.h</code> file if you choose to expose that initializer to other classes. Think of the <code>.h</code> as your “public interface” for your class and the <code>.m</code> is for implementations (and any private interfaces).</p>

<blockquote>
  <p>am I using proper return types for init and factory method?</p>
</blockquote>

<p>I’d suggest using <code>instancetype</code> in both cases for consistency’s sake, though the compiler is smart enough to infer <code>instancetype</code> when the method starts with <code>init</code>. But definitely use <code>instancetype</code> for your class methods, especially if you might subclass this class in the future.</p>
    </div>