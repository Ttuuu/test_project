<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview. Great first question!</p>

<h2>Stringly-typed dates</h2>

<p>Rather than holding onto dates as strings, you should be holding onto them as actual <code>datetime</code> objects. So this:</p>

<pre><code># When to start monitoring
start_time = datetime.now().strftime("%H:%M:%S")
# End Time - When to end monitoring
end_time = "08:55:00"
</code></pre>

<p>should instead be</p>

<pre><code># When to start monitoring
start_time = datetime.now()
# End Time - When to end monitoring
# This assumes that we are running early in the morning of the same
# day as the end_time
end_time = datetime.now().replace(hour=8, minute=55)
</code></pre>

<p>and</p>

<pre><code>p_start_time &lt;= datetime.now().strftime("%H:%M:%S") &lt;= p_end_time:
</code></pre>

<p>should be</p>

<pre><code>p_start_time &lt;= datetime.now() &lt;= p_end_time:
</code></pre>

<h2>Parametric paths</h2>

<pre><code># Directory - Where to store activity log
directory = r"C:\Users\username\Documents"
</code></pre>

<p>should not be hard-coded. Instead, accept it as a command-line argument, or an environmental variable, or store it in a config file.</p>

<h2>Path management</h2>

<pre><code># File path / File name
log_path = dir_t + "\\Log.csv"
</code></pre>

<p>is much easier with <code>pathlib</code>:</p>

<pre><code>from pathlib import Path
# ...
dir_t = Path(...)
log_path = dir_t / 'Log.csv'
</code></pre>

<h2>Logging</h2>

<p>Strongly consider using the actual <code>logging</code> module instead of rolling your own. This will lend you more flexibility, and access to a more feature-rich logging framework. You can do everything you're doing now - have a file handler; have a custom formatter with your own chosen fields; etc.</p>

<h2>In-place addition</h2>

<pre><code>        num = num + 1
</code></pre>

<p>can be</p>

<pre><code>        num += 1
</code></pre>
    </div>