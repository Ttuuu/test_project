<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Avoid <code>using namespace std</code>.  It doesn't even save any typing in this program.</p>
<p><code>serialNumber</code> doesn't need to be global.</p>
<p>Consider using unsigned types for numbers when negatives can't be present.</p>
<p>Whilst there's nothing wrong with the <code>factorial</code> function (and I certainly wouldn't recommend making it recursive), we can skip the <code>i==1</code> iteration:</p>
<pre><code>constexpr unsigned int factorial(unsigned int n)
{
    unsigned int k = 1;
    for (unsigned int i = 2u;  i &lt;= n;  ++i) {
        k *= i;
    }
    return k;
}
</code></pre>
<p>Note that we need to be very careful with our inputs to avoid overflow here.  With a 16-bit <code>int</code>, we can compute factorials only up to <strong>8!</strong>, and with 32-bit <code>int</code>, a maximum of <strong>12!</strong>.  Consider throwing a <code>std::range_error</code> when the output is too large to represent:</p>
<pre><code>#include &lt;limits&gt;
#include &lt;stdexcept&gt;

constexpr unsigned int factorial(unsigned int n)
{
    unsigned int k = 1;
    for (unsigned int i = 2u;  i &lt;= n;  ++i) {
        if (k &gt;= std::numeric_limits&lt;decltype(k)&gt;::max() / n) {
            throw std::range_error("factorial");
        }
        k *= i;
    }
    return k;
}
</code></pre>
<p>Reduce scope of variables, and keep the names of related variables obviously connected; i.e. instead of using numbers for the factorials, include <code>a</code>, <code>b</code> or <code>c</code> in their names (e.g. <code>fa</code>, <code>fb</code>, <code>fc</code>).</p>
<p>We can reduce the search space by limiting the loops so that we don't repeat tests so much (given that both operations are commutative):</p>
<pre><code>for (unsigned a = 1;  a &lt; 11;  ++a)
{
    auto const fa = factorial(a);
    for (unsigned b = 1;  b &lt;= a;  ++b)
    {
        auto const fb = factorial(b);
        for (unsigned c = 1;  c &lt;= b;  ++c)
        {
            auto const fc = factorial(c);
</code></pre>
<p>Notice how the inner loops reach but don't exceed the current value of the containing loop.</p>
<p>Prefer <code>'\n'</code> to <code>std::endl</code> when there's no need to flush the output immediately (in fact, when a newline and flush are both needed, I prefer to write <code>&lt;&lt; '\n' &lt;&lt; std::flush</code> to be absolutely clear what we want).</p>
<hr>
<h1>Modified code</h1>
<pre><code>#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;stdexcept&gt;

constexpr unsigned int factorial(unsigned int n)
{
    unsigned int k = 1;
    for (unsigned int i = 2u;  i &lt;= n;  ++i) {
        if (k &gt;= std::numeric_limits&lt;decltype(k)&gt;::max() / n) {
            throw std::range_error("factorial");
        }
        k *= i;
    }
    return k;
}

int main()
{
    for (unsigned a = 1;  a &lt; 11;  ++a) {
        auto const fa = factorial(a);
        for (unsigned b = 1;  b &lt;= a;  ++b) {
            auto const fb = factorial(b);
            for (unsigned c = 1;  c &lt;= b;  ++c) {
                auto const fc = factorial(c);
                if (fa + fb + fc == a * b * c) {
                    std::cout &lt;&lt; "Pass:" &lt;&lt; "    "
                              &lt;&lt; a &lt;&lt; " &amp; " &lt;&lt; b &lt;&lt; " &amp; " &lt;&lt; c
                              &lt;&lt; '\n';
                }
            }
        }
    }
}
</code></pre>
<hr>
<h1>Exercise</h1>
<p>What would you change to extend this to search for <em>N</em> numbers whose product equals the sum of their factorials, when <em>N</em> is given at run time?</p>
    </div>