<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't add meaningless comments.</p>
<pre><code>#include &lt;iostream&gt;  // allows program to output data to the screen
</code></pre>
<p>There is a real issue with code and comment rot. So your comments should always be meaningful as you have to maintain them with the code. It is best to reserve comments to "WHY" you are doing something. The code will explain "HOW".</p>
<hr>
<p>Don't do this:</p>
<pre><code>using namespace std;
</code></pre>
<p>There are definitely issues with pulling the whole standard namespace into the global namespace.</p>
<p>See: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std;” considered bad practice?</a>
In my opinion the best answer is the second one: <a href="https://stackoverflow.com/a/1453605/14065">sbi</a> though the first one is good.</p>
<hr>
<p>If <code>Base</code> does no real work you can make the virtual functions abstract:</p>
<pre><code>struct Base {
    virtual void do_something() {};
    virtual ~Base(){};
};

// If the user should not be able to instantiate a `Base` then do this:

struct Base {
    virtual void do_something() = 0;
    virtual ~Base() {}
};
</code></pre>
<hr>
<p>If your functions do <strong>not</strong> alter the standard behavior then don't include them:</p>
<pre><code>struct Derived1 : public Base {
    Derived1():Base(){}
    virtual void do_something() {
        std::cout &lt;&lt; "Derived1!!!" &lt;&lt; std::endl;
    }
    virtual~Derived1(){};
};
</code></pre>
<p>Here the constructor and destructor are useless. Do not bother to specify them</p>
<pre><code>struct Derived1 : public Base {
    virtual void do_something() {
        std::cout &lt;&lt; "Derived1!!!" &lt;&lt; std::endl;
    }
};
</code></pre>
<hr>
<p>Don't use <code>std::endl</code>.</p>
<pre><code>        std::cout &lt;&lt; "Derived2!!!" &lt;&lt; std::endl;
</code></pre>
<p>This is the major cause of C++ code running slowly. The problem is that <code>std::endl</code> forces the stream to flush. The stream will automatically flush when it is need and any extra flushes are likely to be inefficient (humans are bad at working out when to flush the stream).</p>
<p>It is better simply to use <code>"\n"</code></p>
<pre><code>        std::cout &lt;&lt; "Derived2!!!" &lt;&lt; "\n";
</code></pre>
<hr>
<p>From C++11 we introduced the <code>override</code> specifier.<br>
In the derived class you should mark any overridden methods with it.</p>
<pre><code>struct Derived1 : public Base {
    virtual void do_something() override;
};

struct Derived2 : public Base {
    virtual void do_something() override;
};
</code></pre>
<p>The advantage here is that if in the future somebody changes the <code>Base</code> class and renames or alters the virtual functions in the base the compiler will not warn you that these functions no longer align with the base class version.</p>
    </div>