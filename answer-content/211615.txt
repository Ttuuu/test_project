<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Get the requirements clear!</h2>

<ul>
<li>What are valid input relations?</li>
<li>What are valid query relations?</li>
<li>Do relations need to be inferred? If so, </li>
</ul>

<p>For example:</p>

<pre><code>//Does Julia have a son?
f.addRelation("Husband=Bern Wife=Julia");
f.addRelation("Father=Bern Son=Evan");

//Does Julia have a son?
f.addRelation("Father=Bern Son=Evan");
f.addRelation("Husband=Bern Wife=Julia");
</code></pre>

<h2>Avoid repeating code</h2>

<p>You have <strong>a lot</strong> of unnecessary repeating code.</p>

<p>For example:</p>

<pre><code>private Person fetchFather(String name) throws InvalidInputException {
    Person father = null;
    List&lt;Person&gt; parents = fetchParents(name);
    for (Person person : parents) {
        if (Gender.MALE.equals(person.getGender()))
            father = person;
    }
    return father;
}

private Person fetchMother(String name) throws InvalidInputException {
    Person mother = null;
    List&lt;Person&gt; parents = fetchParents(name);
    for (Person person : parents) {
        if (Gender.FEMALE.equals(person.getGender()))
            mother = person;
    }
    return mother;
}
</code></pre>

<p>As you can see this is nearly identical. This can be simplified as:</p>

<pre><code>private Person fetchParent(String name, Gender gender) throws InvalidInputException {
        Person parent = null;
        List&lt;Person&gt; parents = fetchParents(name);
        for (Person person : parents) {
            if (gender.equals(person.getGender()))
                parent = person;
        }
        return parent;
    }
</code></pre>

<p>As used:</p>

<pre><code>private Person fetchFather(String name) throws InvalidInputException {
    return fetchParent(name, Gender.MALE);
}
</code></pre>

<p>Following this pattern, you could also generalize more, as <code>TreeRelationType</code> can also be abstracted.</p>

<h2>Adding relations don't need Gender</h2>

<p>As you already know the persons Gender, the relation type does not any other information than PARENT / SIBLING / CHILD. The rest can be deduced. You should even store this relation in the Person itself, so that a Person contains three sets, <code>Set&lt;Person&gt; parents</code>, <code>Set&lt;Person&gt; children</code> and <code>Set&lt;Person&gt; siblings</code>.  You must take care of keeping the symmetry of these relations. (adding a parent P to child C must also add child C to parent P).</p>
    </div>