<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find this code quite reasonable on the whole, but you might consider the following suggestions relating to consistency, succinctness and semantics.</p>

<hr>

<h3>Move and rename the inner helper function</h3>

<p><code>translateWord</code> is reusable as a general utility function and seems better-placed in the global scope and renamed to <code>titleCase</code>. This meshes with similarly-named Ruby, Python and PHP builtins (<code>titlecase</code>, <code>title</code>, <code>ucfirst</code>, respectively). When I see "translate", I think of linguistics or mathematics before I think of strings or casing.</p>

<h3>Avoid excessive calls to toLowerCase</h3>

<p><code>.toLowerCase()</code> is more efficient called once on the entire sentence before splitting rather than incurring the overhead of calling it multiple times per word. With this in mind, you can skip calling the <code>titleCase</code> function described above if you wish.</p>

<h3>Improve "ignore" list</h3>

<pre><code>if (!["of", "and", "the", "to"].includes(words[i].toLowerCase())) {
</code></pre>

<p>is problematic for a few reasons:</p>

<ul>
<li>It creates a new array object for every word. Move initialization to the top of the function and create it once.</li>
<li><a href="https://en.wikipedia.org/wiki/Hard_coding" rel="noreferrer">Hardcoding</a> restricts your function's reusability. Making this ignore list a default parameter allows the client to adjust the list as needed.</li>
<li>Giving this array a variable name makes its purpose more obvious.</li>
<li>Although the array is small, it needs to be traversed linearly to perform a lookup; using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="noreferrer">set</a> improves semantics, readability and time complexity all at once and is the ideal structure for testing membership.</li>
</ul>

<h3>Avoid the loop</h3>

<p>This task is a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="noreferrer">map</a> operation: each word has a function applied to it. You can roll <code>split</code>, <code>map</code> (your <code>for</code> loop) and <code>join</code> into one call to <code>replace</code>, which takes a regular expression that splits on non-word characters and applies the <code>titleCase</code> function to each one that passes the <code>ignore</code> test.</p>

<h3>Minor points</h3>

<ul>
<li><code>sWord.slice(0, 1)</code> can be <code>sWord[0]</code>. </li>
<li><code>sWord</code> is an okay variable name, but <code>str</code> (matching your outer function) or <code>word</code> seems more consistent.</li>
<li>Unless there is a good hoisting or context reason, I'd make the outer function also use an arrow function for consistency with your inner function.</li>
</ul>

<h3>A rewrite</h3>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const titleCaseWords = (words, ignore=["of", "and", "the", "to"]) =&gt; {
  ignore = new Set(ignore);
  
  return words.replace(/\w+/g, (word, i) =&gt; {
    word = word.toLowerCase();
    
    if (i &amp;&amp; ignore.has(word)) {
      return word;
    }
    
    return word[0].toUpperCase() + word.slice(1);
  });
};

[
  "Into unmerciful the entreating stronger to of word guessing.",
  "the OLD MAN aND THE sEa"
].forEach(test =&gt; console.log(titleCaseWords(test)));</code></pre>
</div>
</div>

    </div>