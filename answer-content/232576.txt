<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By no means, this is builder. It's rather a defunct clone of the original object.</p>

<p>A builder is something helping you to avoid too many constructors by letting you to build your object incrementally. You seem to need exactly three constructor for you object and your non-builder has them all.</p>

<p>Typically, a builder has a single no-args constructor and a bunch of setters for the incremental build-up. Sometimes, multiple constructors are useful for setting some "remarkable" properties upfront.</p>

<p>A builder typically has no getters, as you hardly ever care what's inside. When building the main object, it either passes all fields one-by-one or access them directly (the builder is pretty always in the same package and usually even in the same file, so it access private fields).</p>

<p>A builder has pretty always a method <code>build()</code>. It gets used as it's damn convenient to write things like</p>

<pre><code>Person adam = Person.builder()
.name("Adam Savage")
.city("San Francisco")
.job("Mythbusters")
.job("Unchained Reaction")
.build();
</code></pre>

<hr>

<p>A builder does make little sense without the main object being immutable. The immutability gets usually enforced by using <code>final</code> fields.</p>

<p>Fields should normally be <code>private</code>. I strongly recommend making everything as private as possible; lifting restrictions later is trivial, unlike the other way round.</p>

<hr>

<p>When dealing with such objects, I prefer letting a tool take care of the boilerplate, e.g., a <a href="https://projectlombok.org/features/Builder" rel="nofollow noreferrer">Builder from Lombok</a> does a nice job. You code could be</p>

<pre><code>@Value @Builder
public class GameObject {
    private final boolean isHidden;
    private final Coordinate position;
    private final int pictureWidth, pictureHeight;
    private final Object filling;

    public void paint(Graphics gr) throws IOException {
        ...
    }
}
</code></pre>

<p>and a builder gets generated as an nested class.</p>
    </div>