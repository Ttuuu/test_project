<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks very reasonable, but some improvements are possible:</p>

<h1><code>getsockname()</code> returns the local side's address</h1>

<p>In your code you write:</p>

<pre><code>client_sock, client_addr = sock.accept()
...
print('Connection from', client_sock.getsockname())
</code></pre>

<p>That should have been <code>client_sock.getpeername()</code>. But you don't need to call any extra function, since the address of the peer is already stored in <code>client_addr</code>, so just write:</p>

<p>print('Connection from', client_addr)</p>

<h1>Avoid transcoding between bytes and strings</h1>

<p>It looks like you call <code>encode('utf-8')</code> in the server, and <code>decode('utf-8')</code> in the client. This sounds a bit redundant. Especially if, as you say, you are receiving data from a socket to a public endpoint, so I assume this already is in a bytes array initially.</p>

<h1>Don't add sleep() calls to your code</h1>

<p>I see this often in code: adding a <code>sleep()</code> here and there to patch around some issue. The problem is that now your code is suddenly becoming unresponsive for the time you are sleeping. And 60 seconds is a long time. What if within that 60 seconds, all clients drop their connections? You could accept lots of new connections during that time, but you can't because you have to wait until the end of that minute. Either just close the connection if you didn't want to accept it, or wait indefinitely, but have some way for a <code>_ClientHandler</code> to wake up the <code>StreamServer</code> as soon as it notices the peer closed its connection.</p>

<h1>Add support for IPv6</h1>

<p>You really should support IPv6 nowadays. It's not hard at all. Depending on which platform you are running on, you might get away with just using <code>AF_UNSPEC</code> instead of <code>AF_INET</code> when creating a listening socket, and it will accept connections from either version of IP. Otherwise, create two listening sockets, one for <code>AF_INET</code> and one for <code>AF_INET6</code>.</p>

<h1>Add graceful shutdown of all threads</h1>

<p>Add a way to shut down threads in a graceful way. To shut down a <code>_ClientHandler</code>, add a special item to the queue that signals that this handler should return from <code>run()</code>. For the <code>StreamServer()</code>, add a flag named <code>running</code> for example that is <code>True</code> by default. In <code>run()</code>, check the flag each iteration of the loop. If it's no longer <code>True</code>, exit the loop. To shutdown in an orderly way, you have to set <code>self.running = False</code>, then create a connection to the listening socket in order to have <code>sock.accept()</code> return.</p>

<p>Don't attempt to just close client sockets or the listening socket. There is no guarantee that this will cause the threads to immediately receive an error.</p>

<h1>Consider using non-blocking sockets</h1>

<p>Instead of having a queue per client, you could instead make use of the TCP send buffer for each client connection. So instead of first enquing some data, you immediately send copies of the data on each client's socket. Now the problem is to know when the send buffer is full. You can do that by making the socket non-blocking using <code>socket.setblocking(False)</code>. When you attempt to write to a non-blocking socket, you will receive an error. If that happens, you can just close the connection.</p>

<p>You can tune the size of the sendbuffer in this way:</p>

<pre><code>socket.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, size)
</code></pre>

<p>Since you no longer need queues, you also don't need one <code>Thread</code> per client anymore.</p>
    </div>