<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>It would be better to prefer functions over macroes.</strong></p>

<p>For example this:</p>

<pre><code>#define AT(board, x, y) board-&gt;cells + y * board-&gt;group_size + x
</code></pre>

<p>It won't work correctly, if you 'call' it by the following way:</p>

<pre><code>c = AT(board, x, y + 1);
</code></pre>

<p>Precompiler will turn it to:</p>

<pre><code>c = board-&gt;cells + y + 1 * board-&gt;group_size + x;
</code></pre>

<p>Which is not probably the wanted result.</p>

<p>With functions you won't get that kind of problems. Good compiler can inline most of static functions, so you don't get performance penalty.</p>

<p><strong>If you use macroes, use parenthesis when necessary</strong></p>

<p>If a macro contains a counting expression, like this one:</p>

<pre><code>#define MAX_BOARD_SIZE sizeof(uint) * 8
</code></pre>

<p>you should add parenthesis around it. This way:</p>

<pre><code>#define MAX_BOARD_SIZE (sizeof(uint) * 8)
</code></pre>

<p>Or else you may face problems with this kind of code:</p>

<pre><code>max_board_count = sizeof(board_buffer) / MAX_BOARD_SIZE;
</code></pre>

<p>Without parenthesis it would generate unwanted result:</p>

<pre><code>max_board_count = sizeof(board_buffer) / sizeof(uint) * 8;
</code></pre>
    </div>