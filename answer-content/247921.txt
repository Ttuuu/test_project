<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overall feedback</h1>
<p>It seems there are quite a few global variables referenced within various functions. This isn't totally bad but it makes things difficult - like unit testing. If functions accepted parameters and returned certain output then testing might be easier.</p>
<p>The answer by Ted Brownlow suggests using a Plain-old Javascript object (A.K.A. a POJO) to store the occurrences instead of an array - i.e. a mapping of characters to counts. This can eliminate the need to initialize the array and set all values to zero.</p>
<p>You may be interested to read other posts involving Huffman Encoding, including <a href="https://codereview.stackexchange.com/q/242296/120114">this one</a>.</p>
<h1>Suggestions</h1>
<h2>Initializing an array of zeroes</h2>
<p>In the function <code>count()</code> there is this code:</p>
<blockquote>
<pre><code>occurences = new Array(128);
// Initialize with zero
for (let i = 0; i &lt; occurences.length; i++) {
  occurences[i] = 0;
}
</code></pre>
</blockquote>
<p>The loop can be avoided by using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" rel="nofollow noreferrer"><code>array.fill()</code></a>.</p>
<h2>Excess variables</h2>
<p>in the function <code>isASCII</code> there is the variable <code>test</code> that is returned immediately after being assigned. While this may be leftover from debugging the variable can be eliminated. The whole function could be expressed as a one-line arrow function.</p>
<h2>Avoid excess DOM lookups</h2>
<p>The code in <code>huffman()</code> accesses DOM elements each time. While it may not be as much of an issue with todays browsers, it is wise to cache DOM references one they are available (e.g. in the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event" rel="nofollow noreferrer"><code>DOMContentLoaded</code> event</a>).</p>
<p><a href="https://i.stack.imgur.com/ybMID.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ybMID.jpg" alt="bridge toll"></a></p>
<blockquote>
<p><em>”...DOM access is actually pretty costly - I think of it like if I have a bridge - like two pieces of land with a toll bridge,  and the JavaScript engine is on one side, and the DOM is on the other, and every time I want to access the DOM from the JavaScript engine, I have to pay that toll”</em><br>
    - John Hrvatin, Microsoft, MIX09, in <a href="https://channel9.msdn.com/Events/MIX/MIX09/T53F" rel="nofollow noreferrer">this talk <em>Building High Performance Web Applications and Sites</em></a> at 29:38, also cited in the <a href="https://books.google.com/books?id=ED6ph4WEIoQC&amp;pg=PA36&amp;lpg=PA36&amp;dq=John+Hrvatin+%22DOM%22&amp;source=bl&amp;ots=2Wrd5G2ceJ&amp;sig=pjK9cf9LGjlqw1Z6Hm6w8YrWOio&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwjcmZ7U_eDeAhVMGDQIHSfUAdoQ6AEwAnoECAgQAQ#v=onepage&amp;q=John%20Hrvatin%20%22DOM%22&amp;f=false" rel="nofollow noreferrer">O'Reilly <em>Javascript</em> book by Nicholas C Zakas Pg 36</a>, as well as mentioned in <a href="https://www.learnsteps.com/javascript-increase-performance-by-handling-dom-with-care/" rel="nofollow noreferrer">this post</a></p>
</blockquote>
<h2>Alerts</h2>
<p>There are two places <code>alert()</code> is called (one in <code>huffman()</code> and one in the <code>window.onerror</code> handler). This can be an issue because some users may have disabled alerts in a browser setting. It is better to use HTML5 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog" rel="nofollow noreferrer"><code>&lt;dialog&gt;</code></a> element - it allows more control over the style and doesn't block the browser. Bear in mind that it <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#Browser_compatibility" rel="nofollow noreferrer">isn't supported by IE and Safari</a> (And seemingly Chrome on iOS) but <a href="https://github.com/GoogleChrome/dialog-polyfill" rel="nofollow noreferrer">there is a polyfill</a></p>
    </div>