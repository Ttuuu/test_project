<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Similar to your <a href="https://codereview.stackexchange.com/questions/207416/pouring-water-between-two-jugs-to-get-a-certain-amount-in-one-of-the-jugs-2">Water Jug</a> solution, this is still not a good recursive algorithm/implementation.  But we can still critic it, and provide useful feedback.</p>

<p>First, the default argument <code>m=1</code> is awkward, which leads to the odd <code>if m &gt; n+1:</code> and <code>if m == 1:</code> test conditions.  Changing the default argument to zero reduces this oddness:</p>

<pre><code>def RecPascal(n, m=0, prev=[]):
    if m &gt; n:
        return []
    elif m == 0:
        return RecPascal(n, m+1 , [1])
    else:
        return [prev] + RecPascal(n, m+1, calculate(prev))
</code></pre>

<p>The <code>elif m == 0:</code> case seems to exist only to seed the algorithm with the first row of Pascal's Triangle.  The default value <code>prev=[]</code> is never used the code; if only one parameter is given, the second value's default causes <code>return RecPascal(n, m+1, [1])</code> to be executed and <code>prev</code> is not used.  If you instead use <code>[1]</code> as the default value, you can eliminate the <code>n+1</code>-th recursive step.</p>

<pre><code>def RecPascal(n, m=0, prev=[1]):
    if m &lt; n:
        return [prev] + RecPascal(n, m+1, calculate(prev))
    return []
</code></pre>

<p>A bit of inspection will reveal that this is (like the Water Jug solution) just a loop disguised as recursion; it can be rewritten without recursion as:</p>

<pre><code>def RecPascal(n):
    triangle = []
    row = []
    for _ in range(n):
        row = calculate(row)
        triangle.append(row)
    return triangle
</code></pre>

<hr>

<p>In the <code>calculate(prev)</code> helper function, you initialize <code>res</code> to a row of zeros, and then fill in the end values with <code>1</code>:</p>

<pre><code>    res = [0]*(len(prev)+1)
    res[0], res[-1] = 1, 1
</code></pre>

<p>You could replace this with initializing <code>res</code> with a row of ones:</p>

<pre><code>    res = [1] * (len(prev)+1)
</code></pre>

<p>Of course, then you can't look for the <code>res[i] == 0</code> values to fill in, but we don't need to look, we know the exact indices that need filling in:</p>

<pre><code>    for i in range(1, len(res)-1):
        res[i] = prev[i-1] + prev[i]
</code></pre>

<p>This gives a much cleaner helper function.  We can even get rid of a <code>-1</code> by using using the <code>len(prev)</code> instead of <code>len(res)</code>:</p>

<pre><code>def calculate(prev):
    res = [1] * (len(prev)+1)
    for i in range(1, len(prev)):
        res[i] = prev[i-1] + prev[i]
    return res
</code></pre>

<p>If we wanted to be tricky, we could add a <code>0</code> to the end of <code>prev</code>, and then add corresponding elements of two slices of the <code>prev</code> list together, and prepend a <code>1</code> to the beginning:</p>

<pre><code>def calculate(prev):
    prev = prev + [0]
    return [1] + [x+y for x,y in zip(prev[1:], prev[:-1])]
</code></pre>

<p>Which works like this:</p>

<pre><code>prev + [0]  -&gt; [ 1, 3, 3, 1, 0 ]

  prev[1:]  -&gt; [ 3, 3, 1, 0 ]
+ prev[:-1] -&gt; [ 1, 3, 3, 1 ]
-----------------------------
         [1] + [ 4, 6, 4, 1 ]
</code></pre>

<p>This gives the correct generation of the first row: <code>calculate([]) --&gt; [1]</code>.  If we added <code>0</code> to both the start and back, we'd correctly calculate the 1's at each end (<code>0+1 = 1</code>, and <code>1+0 = 1</code>) but would have to seed the first row with <code>[1]</code>.</p>

<p>Since <code>calculate</code> is a helper for <code>RecPascal</code>, and won't be used anywhere else, you can "hide" it by moving it inside of <code>RecPascal</code>, shown here with the alternate calculation (prepending &amp; appending 0's, seeding first row as <code>[1]</code>) method:</p>

<pre><code>def RecPascal(n):

    def calculate(prev):
        prev = [0] + prev + [0]
        return [x+y for x,y in zip(prev[1:], prev[:-1])]

    triangle = []
    row = [1]
    for _ in range(n):
        triangle.append(row)
        row = calculate(row)

    return triangle
</code></pre>
    </div>