<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Direct boolean return</h2>

<p>As @Grajdeanu Alex says, this:</p>

<pre><code>if (ab &gt; c and ac &gt; b and bc &gt; a):
    return True

return False
</code></pre>

<p>can simply be</p>

<pre><code>return ab &gt; c and ac &gt; b and bc &gt; a
</code></pre>

<h2>Type hints</h2>

<pre><code>def can_form_triangle(a, b, c):
</code></pre>

<p>can be</p>

<pre><code>def can_form_triangle(a: float, b: float, c: float) -&gt; bool:
</code></pre>

<h2>Sort unpack</h2>

<pre><code>first_point = random()
second_point = random()
sorted_points = sorted((first_point, second_point))

return can_form_triangle(sorted_points[0], sorted_points[1] - sorted_points[0], 1 - sorted_points[1])
</code></pre>

<p>can be</p>

<pre><code>    first_point, second_point = sorted((random(), random()))

    return can_form_triangle(first_point, second_point - first_point, 1 - second_point)
</code></pre>

<h2>Digit triples</h2>

<p>10000000 is more easily read as <code>10_000_000</code>.</p>

<h2>Attempt looping</h2>

<p><code>num_attempts</code> will evaluate to <code>10_000_000</code> so it's not worth tracking unless you add an early-exit mechanism.</p>

<p>The whole loop can be replaced with</p>

<pre><code>num_success = sum(
    1
    for _ in range(10_000_000)
    if try_one_triangle()
)
</code></pre>

<h2>Redundant parentheses</h2>

<pre><code>print('Ratio:', num_success / (num_attempts))
</code></pre>

<p>does not need the inner parens.</p>
    </div>