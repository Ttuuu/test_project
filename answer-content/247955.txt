<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After the many hints @AJNeufeld already gave you (PEP-8, conventions for naming, constants in UPPERCASE etc.), here is advice targeted on a different level.</p>
<p>Programming in Python often benefits from the work of others, in other words, you do not have to reinvent the wheel. If you choose the right data format for your problem, very often there is either a built-in method or a module which you can import to do the work. This has several benefits:</p>
<ul>
<li><p>it's faster and/or much more optimized than freshly written code</p>
</li>
<li><p>while not important for each and every program, with fast code you can scale more easily</p>
</li>
<li><p>re-used code has been debugged a lot of times before, by different people, so there is a high chance that it will work as expected (esp. with regards to corner cases)</p>
</li>
<li><p>your program becomes more compact, for better overview and maintainability</p>
<pre><code>  import random

  def main():
      # declare constants
      NUM_EXPERIMENTS = 10000
      SEQLEN = 100
      STREAKLEN = 6

      streaks = 0
      for _ in range(NUM_EXPERIMENTS):
          # create a random sequence of length SEQLEN
          # this IS the experiment of coin tosses
          seqlist = [random.choice('HT') for _ in range(SEQLEN)]

          # convert list to string for easier searching
          seq = ''.join(seqlist)

          # if a streak of H's or T's occurs, the experiment is positive...
          if seq.count('H'*STREAKLEN) &gt; 0 or seq.count('T'*STREAKLEN) &gt; 0:
              streaks += 1
              # ... and we can stop searching &amp; continue with the next
              continue

      print('probability: {0:.2f} %'.format(100.0*streaks/NUM_EXPERIMENTS))


  if __name__ == '__main__':
      main()
</code></pre>
</li>
</ul>
<p>remarks:<br>
1- as you already make use of the <code>random</code> module, why not check the other module functions to see if one of them can generate a random sequence of characters of length <code>seqlen</code> directly? <code>random.choice</code> does that.</p>
<p>2- the right data format: looking for subsequences lends itself to string comparison. Your random sequence is a list. The next line converts a <code>list</code> to a <code>string</code>. As the 2 values are characters already, and we want to search for substrings, having a method <code>string.count()</code> is very convenient. It counts the number of occurrences of a substring within a string.</p>
<p>3- now we only need to check if a streak is found, increment the streak counter and continue with the next experiment.</p>
<p>4- to print the percentage, we have to multiply the division by 100.</p>
<p>What is gained? Using built-in functions is nearly always much faster than using an explicit loop, especially as Python is an interpreted language. Sometimes, choosing a different data format may offer you one of those built-in methods which would not be applicable with the original format.</p>
<p>So converting from the original <code>list</code> to <code>string</code> in your code enables you to use the built-in 'str.count()' method which takes care of scanning the sequence, keeping a count on the match length etc., all within an embedded loop.</p>
    </div>