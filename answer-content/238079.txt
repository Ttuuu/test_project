<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for you.</p>

<h1>Code Review</h1>

<h2>Sample class</h2>

<p>In my opinion, the variables and the constants declarations should be moved to the top of the class / block.</p>

<h3>format(double) method</h3>

<p>Instead of using the <code>java.lang.String#format</code> to format the double value, I suggest that you use the <code>java.text.NumberFormat</code>. This class will allow you to set the required precision by calling the <code>java.text.NumberFormat#setMaximumFractionDigits</code> method.</p>

<pre class="lang-java prettyprint-override"><code>double value = 0.123456;
int precision = 3;

NumberFormat nf = NumberFormat.getInstance();
nf.setMaximumFractionDigits(precision);


System.out.println(nf.format(value));
System.out.println(String.format("%." + precision + "f", value));
</code></pre>

<h3>getSum, getMean, getVariance and getStdDev methods</h3>

<p>In my opinion, those methods are a bit confusing, since they do more than returning the value and can be confused with traditional getters. I suggest that you pick a name that explain the action, example <code>updateAndFetchSum</code>.</p>

<h3>toString method</h3>

<p>I suggest that you add the <code>java.lang.Override</code> annotation when overriding the method, since I think it's easier to spot the inheritance when reading the code.</p>

<h1>Unit Tests</h1>

<p>In my opinion, the biggest issues to make the unit tests will be the uses of the static methods and variables in your code, since they will keep their states between tests. In your place, I would try to replace them with <code>composition</code> and a class for the utils, it will make the code more mockable and easier to test.</p>
    </div>