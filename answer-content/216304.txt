<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not a python expert.  I <em>am</em> pretty good with Mandlebrot generation (I've spent a <em>lot</em> of time on my custom Julia Set generator.)</p>

<p>So I'll say this: optimize the heck out of stuff that will be running many iterations.  Forget about clean-code or nice OOP principles.  For lots-of-iterations stuff like this, you want as nitty gritty as possible.</p>

<p>So let's take a look at your interior-most loop:</p>

<pre><code>z = z**2 + complex_number
if (z.real**2+z.imag**2)**0.5 &gt; 2:
    pixel_grid[complex_grid.index(complex_list),complex_list.index(complex_number)]=[iteration,iteration,iteration]
    break
else:
    continue
</code></pre>

<p>Imagine what's happening behind the scenes in memory with just that very first line.  You've got an instance of a complex number.  You want to square it... so it has to create another instance of a complex object to hold the squared value.  Then, you're adding another complex number to it - which means you're creating another instance of Complex to hold the result of the addition.</p>

<p>You're creating object instances left and right, and you're doing it on an order of 3000 x 2000 x 255 times.  Creating several class instances doesn't <em>sound</em> like much, but when you're doing it a billion times, it kinda drags things down.</p>

<p>Compare that with pseudocode like:</p>

<pre><code>px = num.real
py = num.imag
while
    tmppx = px
    px = px * px - py * py + num.real
    py = 2 * tmppx * py + num.imag
    if condition-for-hitting-escape
        stuff
    if condition-for-hitting-max-iter
        moreStuff
</code></pre>

<p>No objects are getting created and destroyed.  It's boiled down to be as efficient as possible.  It's not as nice looking... but when you're doing something a billion times, shaving off even a <em>millionth</em> of a second results in saving 15 minutes.</p>

<p>And as someone else mentioned, you want to simplify the logic so that you don't have to do the square-root operation - and if you're okay with small variations in how the gradient is colored, changing the "magnitude" check with "are x or y within a bounding box".</p>

<p>Aka, the more things you can remove out of that runs-a-billion-times loop, the better off you'll be.</p>
    </div>