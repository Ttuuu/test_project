<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The explanation above is almost excellent. (user1118321) Some cases, this program returns a wrong answer. for example:</p>

<p>if the input will be: </p>

<p>10</p>

<p>9 7 5 5 2 9 9 9 2 -1</p>

<pre><code>               9
           / /  \ \
          / /    \ \
         0  5     6 7
           / \       \
          2   3       1
         / \
        4   8
</code></pre>

<p>expected: 4 </p>

<p>That solution returns: 5 </p>

<p>It can be resolved, replacing this variable "currentHeight" for a  <strong>height stack</strong>  which each node has it's respective height. </p>

<p>You can use the second stack with a similar mode the first stack. </p>

<p>I can't share the whole answer, even using this code you will need to implement something else. But I hope this helps. :D</p>

<pre><code>int findTreeHeight(Node* rootNode) {

    int maxHeight   = 0;
    std::stack&lt;Node*&gt;   nodeStack;
    nodeStack.push(rootNode);

    // int currentHeight   = 0; // create the stack here, and add 1; 
    while (nodeStack.size() &gt; 0)
    {
        /* currentHeight++;
        if (currentHeight &gt; maxHeight)
        {
            maxHeight = currentHeight;
        } */

        Node*   top = nodeStack.top();
        nodeStack.pop();

        int currentHeight = stackHeight.top() + 1; // it's a new level
        // after that pop the top of the second stack.  



        if (top-&gt;children.size() == 0) {
            // just compare (currentHeight &gt; maxHeight) here because it's a leaf node.       
        }

        for (auto it = top-&gt;children.begin(); it &lt; top-&gt;children.end(); it++) {
            nodeStack.push(*it);
        }
    }

    return maxHeight;
}
</code></pre>
    </div>