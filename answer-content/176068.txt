<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is quite reasonable. I'm happy to see that you included both a main function and tests, which make it easy to see that the function works.</p>

<ol>
<li><p>Stylistically, colons (<code>:</code>) are "attached" to the argument name, they don't have a space on both sides:</p>

<pre><code>-fn merge(list_a : &amp;[i32; 4], list_b : &amp;[i32; 4]) -&gt; [i32; 8] {
+fn merge(list_a: &amp;[i32; 4], list_b: &amp;[i32; 4]) -&gt; [i32; 8] {
</code></pre></li>
<li><p>You should let type inference do its thing; there's no need to provide the type for <code>merged_list</code>:</p>

<pre><code>let mut merged_list = [0; 8];
</code></pre></li>
<li><p>Instead of calling <code>.iter()</code>, it's customary to just pass a reference to an array / slice / <code>Vec</code> to the <code>for</code> loop:</p>

<pre><code>for a in list_a { /* ... */ }

for b in &amp;list_b[idx_b..] { /* ... */ }
</code></pre></li>
</ol>

<p>Looking beyond the current implementation, you'll find that arrays, which have a fixed-size, are usually pretty limiting, at least until <a href="https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md" rel="nofollow noreferrer">RFC 2000</a> is implemented.</p>

<p>Until then, it's common to either use a macro to implement a trait for many concrete types, or to take a slice (<code>&amp;[T]</code>) and return a <code>Vec&lt;T&gt;</code>. The macro route is visible in the standard library and is why many array implementations only go up to 32 elements.</p>

<p>I'd encourage you to write a version that takes two slices, returns a <code>Vec</code>, and uses a <code>match</code> statement inside a loop; I think such a merge sort is a nice showcase of some of Rust's abilities. In such a solution, you should not need to use <em>any</em> indexing operations!</p>
    </div>