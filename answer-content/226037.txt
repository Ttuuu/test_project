<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>train_test_sets</code> method limit you to two folders, why? In the directory tree you provided, you only have <code>image1</code> and <code>image2</code>, but what if there's an <code>image3</code> some day? The obvious solution is to pass arrays to your method instead of a specific number of image directories. </p>

<hr>

<p>I'll tackle the issue of <em>naming</em>. </p>

<ul>
<li><p>Classes should have nouns as name, not verbs. The reason behind this is that a class actually does nothing before its methods are called. So <code>Gather_Data</code> isn't a good name for a class, it would be a good name for a method.</p></li>
<li><p>Using trailing underscores don't really bring anything useful to your code base, so <code>X_train_</code> should be <code>X_train</code>.</p></li>
</ul>

<p>Apart from that your naming is pretty good.</p>

<hr>

<p>Your method <code>train_test_sets</code> should return the sets, kind of like <code>sklearn.model_selection.train_test_split</code> does. Keeping them in the object only to fetch them later isn't usual and this means if someone else looked at your code, it would be "harder" to understand what the code does.</p>

<hr>

<p>There's a pretty big problem with your class and it's that it does <strong>way too many things</strong>. It's used to : Find files, create directories, split train/test data, transform images, augment images and I'm maybe missing some. That creates many small different responsibilities that are stacked together into one class, where that should be many different methods. In my opinion, you don't need a class to load data, unless there's some complex mechanism when loading that require multiple operations.</p>

<p>I think you should split this class in multiple methods.</p>

<hr>

<p>On a side note, shuffling the test set is useless. Shuffling the training set is to make sure the algorithm doesn't end up seeing a pattern inside the training data, but when it comes to the evaluation data, shuffling has no value. </p>

<p>In your <code>rescale</code> transformation, you state in comments that you use the <code>mean</code> and <code>std</code> to normalize the data, but you don't do it. That's because you copy/pasted the code from the other standardization method. Which is exactly the problem with comments. You shouldn't write them unless you're sure someone reading your code would have no idea what's going on, otherwise they can end up being ignored by people used to the code and they become deprecated. Having bad comments is worst than having no comments.</p>

<hr>

<p>You use strings as enums to standardize your dataset. The problem with this is that first, other developers won't know what are the possible options, the second problem is that it's so easy to mistyep (see what I did there) a word and end up with the bug where I think my data is standardized, but it's not and it takes me hours to find out I made a spelling mistake in one of the parameters. You should reuse the pattern <code>opencv</code> has of using <code>int</code> values masked behind constants (so... enums)</p>
    </div>