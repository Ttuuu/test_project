<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>A bug</strong></p>

<p>On the array of 10 elements </p>

<pre><code>19 8 5 9 15 10 8 2 6 1
</code></pre>

<p>when computing 8 largest numbers, your version returns</p>

<pre><code>2 5 8 8 9 10 15 19
^ 
wrong, should be 6
</code></pre>

<p>when the correct answer is</p>

<pre><code>5 6 8 8 9 10 15 19.
</code></pre>

<p><strong>Performance</strong></p>

<p>My idea was to build a maximum heap of the entire input array (which runs, according to Introduction to Algorithms, in \$\Theta(n)\$), after which to peak \$k\$ maximum elments; this algorithm runs in \$\Theta(n + k \log n)\$. That is how:</p>

<pre><code>using System;
using System.Linq;

namespace CRKBiggestNums
{
    public class KBiggestNumbers
    {
        public static int[] FindKBiggestNumbers(int[] testArray, int k)
        {
            int[] result = new int[k];
            for (int i = 0; i &lt; testArray.Length; i++)
            {
                //if bigger than the smallest node
                if (testArray[i] &lt;= result[0])
                {
                    continue;
                }
                else
                {
                    //if bigger than all?
                    if (testArray[i] &gt; result[k - 1])
                    {
                        for (int l = 0; l &lt; k - 1; l++)
                        {
                            result[l] = result[l + 1];
                        }
                        result[k - 1] = testArray[i];
                    }
                    else
                    {
                        //binary search
                        int indexLeft = 0;
                        int indexRight = k - 1;

                        int currIndex = 0;
                        //10 20 30 40 50 - &gt; place 33 
                        while (indexRight - indexLeft &gt; 1)
                        {
                            currIndex = (indexRight + indexLeft) / 2;
                            if (testArray[i] &gt;= result[currIndex])
                            {
                                indexLeft = currIndex;
                            }
                            else
                            {
                                indexRight = currIndex;
                            }

                        }

                        for (int l = 0; l &lt; currIndex; l++)
                        {
                            result[l] = result[l + 1];
                        }
                        result[currIndex] = testArray[i];
                    }
                }
            }

            return result;
        }

        public static int[] FindKBiggestNumbers2(int[] array, int k)
        {
            BuildMaxHeap(array);
            int[] result = new int[k];
            int heapSize = array.Length;

            for (int i = 0; i &lt; k - 1; ++i)
            {
                result[i] = array[0];
                array[0] = array[--heapSize];
                MaxHeapify(array, 0, heapSize);
            }

            result[result.Length - 1] = array[0];
            return result;
        }

        private static void BuildMaxHeap(int[] array)
        {
            for (int i = array.Length / 2; i &gt;= 0; --i)
            {
                MaxHeapify(array, i, array.Length);
            }
        }

        private static void MaxHeapify(int[] array, int index, int heapSize)
        {
            int leftChildIndex = GetLeftIndex(index);
            int rightChildIndex = leftChildIndex + 1;
            int maxChildIndex = index;
            int target = array[index];

            while (true)
            {
                if (leftChildIndex &lt; heapSize)
                {
                    if (array[leftChildIndex] &gt; target)
                    {
                        maxChildIndex = leftChildIndex;
                    }
                }

                if (maxChildIndex == index)
                {
                    if (rightChildIndex &lt; heapSize)
                    {
                        if (array[rightChildIndex] &gt; target)
                        {
                            maxChildIndex = rightChildIndex;
                        }
                    }
                }
                else
                {
                    if (rightChildIndex &lt; heapSize)
                    {
                        if (array[rightChildIndex] &gt; array[maxChildIndex])
                        {
                            maxChildIndex = rightChildIndex;
                        }
                    }
                }

                if (maxChildIndex == index)
                {
                    array[maxChildIndex] = target;
                    return;
                }

                array[index] = array[maxChildIndex];
                index = maxChildIndex;
                leftChildIndex = GetLeftIndex(index);
                rightChildIndex = leftChildIndex + 1;
            }
        }

        private static int GetLeftIndex(int index)
        {
            return (index &lt;&lt; 1) + 1;
        }

        private static long GetMilliseconds()
        {
            return DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond;
        }

        public static void Main(string[] args)
        {
            Random random = new Random();
            int[] array1 = new int[1000 * 1000];
            int[] array2 = new int[array1.Length];

            for (int i = 0; i != array1.Length; ++i)
            {
                int element = random.Next(20);
                array1[i] = element;
                array2[i] = element;
            }

            int k = 10 * 1000;
            var start = GetMilliseconds();
            int[] result1 = FindKBiggestNumbers(array1, k);
            var end = GetMilliseconds();

            Console.WriteLine("OP method in {0} milliseconds.", end - start);

            start = GetMilliseconds();
            int[] result2 = FindKBiggestNumbers2(array2, k);
            end = GetMilliseconds();

            Console.WriteLine("coderodde method in {0} milliseconds.", end - start);

            Array.Sort(result1);
            Array.Sort(result2);

            Console.WriteLine("The algorithms agree: {0}.", result1.SequenceEqual(result2));
        }
    }
}
</code></pre>

<p>Finally, the performance figures for \$n = 1000000, k = 10000\$ speak for themselves:</p>

<blockquote>
<pre>
OP method in 1692 milliseconds.
coderodde method in 69 milliseconds.
</pre>
</blockquote>

<p>Hope that helps.</p>
    </div>