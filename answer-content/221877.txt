<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Default command line switches</h2>
<p>It is recommended that tools specify the following standard switches. You should always define these. Also, on error, output the error and the help text.</p>
<pre><code>- help (--help -h -?)
- about (--version -!)
</code></pre>
<hr>
<h2>Maintainability</h2>
<p>The fact your arguments include the keywords used for parsing is a breach of <strong>Single Responsibility</strong>. I would extract all lexing in a seperate class behind some interface. This way, you can make different lexers for Posix, DOS, Windows, Google style.</p>
<hr>
<h2>Readability</h2>
<p>Get rid of the postfix <code>-Argument</code> in your property names. It's redundant and verbose.</p>
<hr>
<h2>Command line parsing</h2>
<p>Command line parsing is an art. A good command line parser is able to parse both readable and administrative command lines, different styles, grammars, literals, escape sequences.</p>
<p>There are different formatting styles.</p>
<p><a href="https://developers.google.com/style/code-syntax" rel="nofollow noreferrer">Google dev style</a></p>
<pre><code>tool --get-logs --in c:\data\in\ -quiet
</code></pre>
<p><a href="https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html" rel="nofollow noreferrer">POSIX short style</a></p>
<pre><code>tool-gq-ic:\data\in\
</code></pre>
<p><a href="https://www.computerhope.com/issues/chusedos.htm" rel="nofollow noreferrer">Windows/DOS style</a></p>
<pre><code>tool /gq /i c:\data\in\
</code></pre>
<hr>
<h2>Design Restrictions</h2>
<p>I don't know your intend, but if you want to comply to at least the aforementioned command line styles, you have restricted yourself.</p>
<p>You have hardcoded your delimiters. This means you are only compliant to your own standards, not universal ones. For instance, other <code>ParamSpecifier</code> that could have been allowed are <code>'='</code>, <code>','</code> and even a <em>blank space</em> in the right context. Other <code>_switches</code> include the Posix long-option <code>'--'</code>.</p>
<blockquote>
<pre><code> private const char ParamSpecifier = ':';
 private readonly char[] _switches = { '-', '/' };
</code></pre>
</blockquote>
<p>Command switches could have <code>0..*</code> arguments. However, you limit this to <code>0..1</code>.</p>
<blockquote>
<p><code>public bool MustHaveParameter { get; private set; }</code></p>
</blockquote>
<p>You perform a naive switch-value split. This does not take into account escaped delimiters or file paths.</p>
<blockquote>
<p><code>var values = arg.Split(ParamSpecifier);</code></p>
</blockquote>
<pre><code>- -a:literal\:value
- -a:literal":"value
- -a:c:\temp\
</code></pre>
<p>Quoted literals should not be restricted to the start and end of a string, but could also be inline.</p>
<blockquote>
<p><code>return values[1].TrimStart('"').TrimEnd('"');</code></p>
</blockquote>
<hr>
    </div>