<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If performance wasn't an issue you could nicely solve it with LINQ and the new anonymous tuples in C# 7.</p>

<p>The first extension would give you the items backwards:</p>

<pre><code>public static IEnumerable&lt;(T Item, int Index)&gt; Backwards&lt;T&gt;(this IList&lt;T&gt; values)
{
    for (int i = values.Count - 1; i &gt;= 0; i--) yield return (Item: values[i], Index: i);
}
</code></pre>

<p>The second one would find the first non-zero item and return its index.</p>

<pre><code>public static int LastDataBytePosition(this byte[] bytes)
{
    var firstNotZero = 
        bytes
            .Backwards()
            .SkipWhile(b =&gt; b.Item == 0)
            .Take(1)
            .ToList();

    return firstNotZero.Any() ? firstNotZero.Single().Index : -1;       
}
</code></pre>
    </div>