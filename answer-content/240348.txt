<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I ended up doing something like that:</p>

<pre><code>let def&lt;'T&gt; =
    Unchecked.defaultof&lt;'T&gt;

module Seq =

    let mapbi mapping source =
        source
        |&gt; Seq.scan(fun state item -&gt; fst state + 1I, item) (-1I, def)
        |&gt; Seq.skip(1)
        |&gt; Seq.map(fun (bi, item) -&gt; mapping bi item)

    let mapChange selector mapping source =
        source
        |&gt; mapbi (fun bi item -&gt; bi, item)
        |&gt; Seq.scan(fun (previousSelection, previousMappedItem, _) (bi, item) -&gt;
            if bi = 0I then
                (selector item, mapping item, item)
            else
                let currentSelection = selector item
                let mappedItem = mapping item
                if previousSelection &lt;&gt; currentSelection then
                    (currentSelection, mappedItem, item)
                else
                    (previousSelection, previousMappedItem, item)
            ) (def, def, def)
        |&gt; Seq.skip 1
        |&gt; Seq.map(fun (_, mappedItem, item) -&gt; mappedItem, item)

// and its AsyncSeq counterpart
module AsyncSeq =

    let mapbi mapping source =
        source
        |&gt; AsyncSeq.scan(fun state item -&gt; fst state + 1I, item) (-1I, def)
        |&gt; AsyncSeq.skip(1)
        |&gt; AsyncSeq.map(fun (bi, item) -&gt; mapping bi item)

    let mapChange selector mapping source =
        source
        |&gt; mapbi (fun bi item -&gt; bi, item)
        |&gt; AsyncSeq.scan(fun (previousSelection, previousMappedItem, _) (bi, item) -&gt;
            if bi = 0I then
                (selector item, mapping item, item)
            else
                let currentSelection = selector item
                let mappedItem = mapping item
                if previousSelection &lt;&gt; currentSelection then
                    (currentSelection, mappedItem, item)
                else
                    (previousSelection, previousMappedItem, item)
            ) (def, def, def)
        |&gt; AsyncSeq.skip 1
        |&gt; AsyncSeq.map(fun (_, mappedItem, item) -&gt; mappedItem, item)
</code></pre>

<p>(Dummy) Example:</p>

<pre><code>[&lt;EntryPoint&gt;]
let main _ =
    Seq.replicate 4 [1 .. 3]
    |&gt; Seq.mapi(fun i s -&gt;
        s |&gt; Seq.map (fun item -&gt; {| SetIndex = i; RecordIndex = item |} ))
    |&gt; Seq.concat
    |&gt; AsyncSeq.ofSeq
    |&gt; AsyncSeq.mapChange
        (fun item -&gt; item.SetIndex)
        (fun item -&gt; List.init (item.SetIndex + 1) (fun _ -&gt; item.SetIndex))
    |&gt; AsyncSeq.iterAsync(fun (mappedItem, item) -&gt;
        async { printfn "%A: %A" item mappedItem })
    |&gt; Async.RunSynchronously
    |&gt; ignore
    0
</code></pre>

<p>Output:</p>

<pre><code>{ RecordIndex = 1
  SetIndex = 0 }: [0]
{ RecordIndex = 2
  SetIndex = 0 }: [0]
{ RecordIndex = 3
  SetIndex = 0 }: [0]
{ RecordIndex = 1
  SetIndex = 1 }: [1; 1]
{ RecordIndex = 2
  SetIndex = 1 }: [1; 1]
{ RecordIndex = 3
  SetIndex = 1 }: [1; 1]
{ RecordIndex = 1
  SetIndex = 2 }: [2; 2; 2]
{ RecordIndex = 2
  SetIndex = 2 }: [2; 2; 2]
{ RecordIndex = 3
  SetIndex = 2 }: [2; 2; 2]
{ RecordIndex = 1
  SetIndex = 3 }: [3; 3; 3; 3]
{ RecordIndex = 2
  SetIndex = 3 }: [3; 3; 3; 3]
{ RecordIndex = 3
  SetIndex = 3 }: [3; 3; 3; 3]
</code></pre>

<p>Two things that are more idiomatic that my initial piece of code: </p>

<ul>
<li>No mutable</li>
<li>Still work even if the initial sequence is empty</li>
<li>Still "Stream" everything =&gt; memory allocation over long sequence is roughly constant</li>
</ul>

<p>Not fully satisfied, still kinda too cluttered =|</p>
    </div>