<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review, here some suggestions about your code:</p>

<blockquote>
<pre><code>public class review { ... }
</code></pre>
</blockquote>

<p>Java classnames always begin with uppercase letter so rename it to <code>Review</code>.</p>

<blockquote>
<pre><code>private ArrayList&lt;String&gt; restaurants = new ArrayList&lt;String&gt;();
</code></pre>
</blockquote>

<p>In java language it is preferable using if possible an interface like <code>List</code>  on the left part of the assignment so if you change the concrete class implementing the interface you don't notice the change in your code like below:</p>

<pre><code>private List&lt;String&gt; restaurants = new ArrayList&lt;String&gt;();
</code></pre>

<p>Same approach from returning value from method:</p>

<blockquote>
<pre><code>public HashSet&lt;String&gt; find_terms(StanfordCoreNLP pipeline) { ... }
</code></pre>
</blockquote>

<p>Use instead:</p>

<pre><code>public Set&lt;String&gt; find_terms(StanfordCoreNLP pipeline) { ... }
</code></pre>

<p>You have this method and <code>doc.sentences()</code> seems me a <code>List</code>:</p>

<blockquote>
<pre><code>for(int f = 0; f &lt;doc.sentences().size(); f++) {
    for (int d = 0; d &lt; doc.sentences().get(f).tokens().size(); d++) {
        String tag = doc.sentences().get(f).posTags().get(d);
        CoreLabel word = doc.sentences().get(f).tokens().get(d);
        if (tag.contains("VB") == true|| tag.contains("JJ") == true || tag.contains("NN") == true);{
           String pattern ="[\\p{Punct}&amp;&amp;[^@',&amp;]]";
           // Create a Pattern object
           Pattern r = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
           // Now create matcher object.
           Matcher m = r.matcher(word.originalText());
           if (m.find() || word.originalText() == "") {
           } else {
           all_terms.add(word.originalText());
        }
    }
}
</code></pre>
</blockquote>

<p>Rewrite it in a more readable way:</p>

<pre><code>for(Sentence sentence : doc.sentences()) {
    for (int d = 0; d &lt; sentence.token.size(); ++d) {
        String tag = sentence.posTags().get(d);
        CoreLabel word = sentence.tokens().get(d);
        //other instructions
    }
}
</code></pre>

<p>The boolean condition:</p>

<blockquote>
<pre><code>tag.contains("VB") == true|| tag.contains("JJ") == true || tag.contains("NN") == true
</code></pre>
</blockquote>

<p>You can rewrite it like this:</p>

<pre><code>tag.contains("VB") || tag.contains("JJ") || tag.contains("NN") 
</code></pre>

<p>Your pattern: </p>

<blockquote>
<pre><code>String pattern ="[\\p{Punct}&amp;&amp;[^@',&amp;]]";
Pattern r = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
</code></pre>
</blockquote>

<p>You are calculating it for every iteration of the loop, put it outside your loop:</p>

<pre><code>String pattern ="[\\p{Punct}&amp;&amp;[^@',&amp;]]";
Pattern r = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
for(Sentence sentence : doc.sentences()) {
    for (int d : sentence.token.size()) {
        String tag = sentence.posTags().get(d);
        CoreLabel word = sentence.tokens().get(d);
        //other instructions
    }
}
</code></pre>

<p>The if else you are using:</p>

<blockquote>
<pre><code>if (m.find() || word.originalText() == "") {
} else {
   all_terms.add(word.originalText());
}
</code></pre>
</blockquote>

<p>You are doing an error here using the operator <code>==</code> and not the <code>equals</code> method for comparing strings; rewrite the method like this:</p>

<pre><code>if (!m.find() &amp;&amp; !word.originalText().equals("")) {
   all_terms.add(word.originalText());
}
</code></pre>
    </div>