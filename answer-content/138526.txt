<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can simplify the <code>ToTree()</code> method a little bit by skipping the <code>if (!moveNext) { return false; }</code> and changing <code>if (!ToTree(element, parent)) { return false; }</code> like so  </p>

<pre><code>private static bool ToTree(IEnumerator&lt;Element&gt; element, ElementCollection parent)
{
    var moveNext = true;
    while (moveNext)
    {
        if (element.Current.Parent() == parent.GetType())
        {
            parent.Add(element.Current);
            // Move-next only when parent found.
            moveNext = element.MoveNext();
        }
        else
        {
            // Last element of this parent might be the parent of the next element. 
            parent = parent.LastOrDefault();
            if (parent == null) { return true; }

            moveNext = ToTree(element, parent)
        }
    }
    return false;
}  
</code></pre>

<p>You can skip <code>if (!moveNext) { return false; }</code> because it will have the same effect if the <code>while</code> condition will be evaluated.  </p>

<p>By assigning the returned value form the recursive call to the <code>moveNext</code> the next evaluation of the while condition will lead to the same result as the former code.</p>
    </div>