<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The binary search tree you have here is a very naive implementation and has fundamental flaws. And this binary search tree implementation is not an AVLTree.</p>

<p>1) It lacks tree balancing scheme - meaning there is no promise that search will take <code>O(log(n))</code>. </p>

<p>Imagine you put strings into the tree in ascending order. This implementation will always go to the rightmost and put it there. Meaning, it will take <code>O(n^2)</code> time just to make it. And all searches will require <code>O(n)</code> time.</p>

<p>2) It suffers from quite likely stackoverflow on destruction. You have recursive clear functions. Imagine the tree isn't balanced as in example from (1) - then you'll have <code>n</code> stacked calls to <code>Clear()</code> which will overflow the callstack.</p>

<p>3) It lack standart container interface. E.g., iterators and <code>begin()</code> and <code>end()</code> methods as well as efficient <code>size()</code> function.</p>

<p>About your questions. </p>

<blockquote>
  <p>Should the Node class have a destructor?</p>
</blockquote>

<p>Due to stackoverflow issues usually they don't bother implementing destructors for nodes - as the tree requires very specialized destructor. Unless you plan to use the nodes elsewhere (which I don't advice). In which case, you could use <code>std::unique_ptr&lt;Node&gt;</code> for pointers instead of working with raw pointers <code>Node*</code> as these automatically handle most of the basic problems.</p>

<blockquote>
  <p>Will the node class be inherited by the subclasses of the BinarySearchTree?</p>
</blockquote>

<p>Not sure what exactly you mean. Since it is defined under <code>protected</code> then all classes that inherit from <code>BinarySearchTree</code> will have access to it (lest there is some private inheritance in the middle).</p>

<p>Generally, I don't think that there is any real point in defining simple classes under <code>private</code> or <code>protected</code>. Just make it public.</p>

<blockquote>
  <p>I have to create the AVLTree class which inherits from BinarySearchTree and for the Insert function i will have to keep track of the height variable of Node. Would it be considered sloppy to just copy and paste the Insert function and just add some commands to keep track of height? If so, how could i go on about this?</p>
</blockquote>

<p>You really need such a design? I'd advise to write AVLTree directly without the BinarySearchTree as base class.</p>

<p>Generally, I don't think there is much purpose in implementing a binary search tree other than for exercising since there are well maintained implementations in STL and some other libraries.</p>
    </div>