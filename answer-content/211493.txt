<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>
<p>You need to use namespaces in your code. Nearly everybody and their granddaughter builds a <code>Vector</code> class at some point. So the likelhood of a clash is very high. Build yours into your own namespace (then you get not clashes).</p>
<h2>Code Review</h2>
<p>This is a good start.</p>
<pre><code>#ifndef VECTOR_VECTOR_H
#define VECTOR_VECTOR_H
</code></pre>
<p>But does not look very unique to me (especially since everybody builds a <code>Vector</code>). Add the namespace into this guard and you will have something at least reasonably unique.</p>
<p>Don' do this.</p>
<pre><code>#define _NOEXCEPT noexcept
</code></pre>
<p>In addition to <code>_NOEXCEPT</code> being a reserved identifier; why are you trying to obfuscate your code? Just put <code>noexcept</code> out there. Everybody understands it nowadays.</p>
<p>That's a lot to put on one line!</p>
<pre><code>template &lt; typename T &gt; class Vector { public:  explicit Vector( size_t = INITIAL_CAPACITY );
</code></pre>
<p>In the rest of your code you put an empty line between every function (which I also find annoying) but here you force <strong>FOUR</strong> different things on a single line. Give the reader a break this needs to be broken up. Also group your methods into logical groups.</p>
<p>OK. This is a good constructor. But do you actually need to specify a default value? Can that not be inferred by the value taking on the default constructed version of the type?</p>
<pre><code>    Vector( size_t, const T &amp; );
    // I would have done
    Vector(size_t size, T const&amp; init = T{});
</code></pre>
<p>I wish you would break the template stuff onto one row and the method stuff onto another row. That's a more common way of writing these declarations.</p>
<pre><code>    template &lt; typename InputIterator &gt;     Vector( InputIterator, InputIterator );
</code></pre>
<p>OK. I see assignment to an initializer list but given this why can't I construct the vector with an initializer list? <strike>While we are at it why do you pass initializer lists by value?</strike>See comments below.</p>
<pre><code>    Vector &amp;operator=( std::initializer_list &lt; T &gt; );

    void assign( std::initializer_list &lt; T &gt; il );
</code></pre>
<p>Nice Standard set of push operations.</p>
<pre><code>    void push_back( const T &amp; );
    void push_back( T &amp;&amp; );
    void pop_back() _NOEXCEPT;
</code></pre>
<p>But why don't I see an <code>emplace_back()</code> in the same area? Am I going to find it below?</p>
<p>Including other header files inside a class (and thus probably a namespace). That's not a disaster waiting to happen (sarcasm). These header files are dependent on this header file. What happens if a user includes them directly. You should at least set up some header guards that makes it hard to do that accidentally.</p>
<pre><code>#include "const_iterator.h"
#include "iterator.h"
#include "const_reverse_iterator.h"
#include "reverse_iterator.h"
</code></pre>
<p>Don't really think you need any special iterator classes for a vector. A pointer to the member should work just fine (assuming contiguous memory for the data).</p>
<pre><code>    iterator begin() _NOEXCEPT {        return iterator( m_data );  }
    iterator end() _NOEXCEPT {      return iterator( m_data + m_size );     }
</code></pre>
<p>My gosh.</p>
<pre><code>private:    T      *m_data;     size_t m_size;  size_t m_capacity;
</code></pre>
<p>One variable per line please. Also brave of you to use <code>T*</code> as the pointer type. Let's see if you get the allocation correct.</p>
<p>Not sure why these are standalone methods. Why are they not members of the class?</p>
<pre><code>template &lt; typename T &gt; bool operator==( const Vector &lt; T &gt; &amp;lhs, const Vector &lt; T &gt; &amp;rhs );    
template &lt; typename T &gt; bool operator!=( const Vector &lt; T &gt; &amp;lhs, const Vector &lt; T &gt; &amp;rhs );    
template &lt; typename T &gt; bool operator&gt;( const Vector &lt; T &gt; &amp;lhs, const Vector &lt; T &gt; &amp;rhs );    
template &lt; typename T &gt; bool operator&gt;=( const Vector &lt; T &gt; &amp;lhs, const Vector &lt; T &gt; &amp;rhs );    
template &lt; typename T &gt; bool operator&lt;( const Vector &lt; T &gt; &amp;lhs, const Vector &lt; T &gt; &amp;rhs );    
template &lt; typename T &gt; bool operator&lt;=( const Vector &lt; T &gt; &amp;lhs, const Vector &lt; T &gt; &amp;rhs );
</code></pre>
<p>OK. Copy swap idiom usually does not check for self-assignment.</p>
<pre><code>template &lt; typename T &gt;
inline Vector &lt; T &gt; &amp;Vector &lt; T &gt;::operator=( const Vector &amp;rhs ) {
    if ( this != &amp;rhs ) {
        //copy-swap idiom
        Vector tmp( rhs );
        swap( tmp );
    }
    return *this;
}
</code></pre>
<p>Yes. A self-assignment check will save you a lot if you actually do a self-assignment. But self-assignment is so vanishingly rare that you are actually pessimizing the normal action. Now this pessimization is a small cost but done so very frequently that the overall cost is on average higher than the cost of a self-assignment copy.</p>
<pre><code>Prob(SelfAssigment) * {Cost Of SelfAssigment} &lt; Prob(NormAssigment) * {Cost Of NormAssigment}
</code></pre>
<p>The standard way of writing this is:</p>
<pre><code>// Pre Move semantics.
template &lt; typename T &gt;
inline Vector &lt; T &gt; &amp;Vector &lt; T &gt;::operator=(Vector rhs) {
    swap( rhs );
    return *this;
}

// Post Move semantics as passing by value and RValue ref causes
// conflicting definitions for the compiler.
template &lt; typename T &gt;
inline Vector &lt; T &gt; &amp;Vector &lt; T &gt;::operator=(Vector const&amp; rhs) {
    Vector tmp(rhs);
    swap( tmp );
    return *this;
}
</code></pre>
    </div>