<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd make the following suggestions:</p>

<ol>
<li>avoid placing limits (e.g., pre-declaring the tape size) if you can;</li>
<li>use properties and small functions to abstract away the lowest-level details;</li>
<li>use conditional expressions <code>(cond ? y : n)</code> in preference to <code>if-then-else</code> blocks;</li>
<li>traditionally, each instruction (state) in a Turing machine specifies, for each possible tape symbol, the symbol to write, the direction to move in, and the next instruction (state) to move to;</li>
<li>you want to make specifying and adding instructions much simpler;</li>
<li>it's okay to use short (even single-letter) enumeration symbols when the intent is obvious -- clarity and brevity often <em>do</em> go hand in hand.</li>
</ol>

<p>Here's my first cut at implementing the above suggestions -- no doubt there are many places where people will disagree with my style!</p>

<pre><code>// Rudimentary two-symbol Turing machine implementation.

public enum Sym { Y, N }
public enum Dir { L, R }
public const int Halt = -1;
public class TuringMachine
{
    internal struct SemiInstr { internal Sym Put; internal Dir Move; internal int GoTo; }
    internal struct Instr { internal SemiInstr OnY; internal SemiInstr OnN; }
    internal List&lt;Instr&gt; Prog = new List&lt;Instr&gt; { };
    internal Dictionary&lt;int, Sym&gt; Tape = new Dictionary&lt;int, UserQuery.Sym&gt; { };
    internal int Idx = 0;
    internal int IP = 0;
    internal int This =&gt; Prog.Count;
    internal int Next =&gt; This + 1;
    internal Sym SymAt(int idx) =&gt; (Tape.ContainsKey(idx) ? Tape[idx] : Sym.N);
    public int AddInstr(Sym onYPut, Dir onYMove, int onYGoTo, Sym onNPut, Dir onNMove, int onNGoTo)
    {
        var thisIP = This;
        Prog.Add(new Instr
        {
            OnY = new SemiInstr { Put = onYPut, Move = onYMove, GoTo = onYGoTo },
            OnN = new SemiInstr { Put = onNPut, Move = onNMove, GoTo = onNGoTo }
        });
        return thisIP;
    }
    public void SetTape(string syms, int startFrom = 0)
    {
        Tape.Clear();
        for (var i = 0; i &lt; syms.Length; i++)
        {
            Tape[i + startFrom] = (Char.ToUpper(syms[i]) == 'Y' ? Sym.Y : Sym.N);
        }
    }
    public bool Step()
    {
        if (IP == Halt) return false;
        var instr = Prog[IP];
        var sym = SymAt(Idx);
        var semiInstr = (sym == Sym.Y ? instr.OnY : instr.OnN);
        var newSym = semiInstr.Put;
        var delta = (semiInstr.Move == Dir.R ? 1 : -1);
        var nextIP = semiInstr.GoTo;
        Tape[Idx] = newSym;
        Idx += delta;
        IP = nextIP;
        return true;
    }
    public void ShowTape()
    {
        var from = Math.Min(Idx, Tape.Keys.Min());
        var to = Math.Max(Idx, Tape.Keys.Max());
        Console.Write($"[{IP}] ");
        for (var i = from; i &lt;= to; i++)
        {
            var sym = SymAt(i).ToString();
            Console.Write(i != Idx ? sym : "&lt;" + sym + "&gt;");
        }
        Console.WriteLine();
    }
    public void Run(int maxSteps = int.MaxValue)
    {
        IP = 0;
        Idx = 0;
        var stillRunning = true;
        while (stillRunning &amp;&amp; 0 &lt; maxSteps--)
        {
            ShowTape();
            stillRunning = Step();
        }
    }
}
</code></pre>

<p>Here's an example program:</p>

<pre><code>    var tm = new TuringMachine();
    tm.AddInstr(Sym.Y, Dir.L, tm.This, Sym.Y, Dir.R, tm.Next); // Extend left.
    tm.AddInstr(Sym.Y, Dir.R, tm.This, Sym.Y, Dir.L, 0); // Extend right.
    tm.SetTape("NNNNNNNNNN", -5);
    tm.Run(20);
</code></pre>
    </div>