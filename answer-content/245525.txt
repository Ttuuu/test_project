<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Nomenclature</h2>
<p>By PEP8, <code>initialiseParser</code> should be <code>initialise_parser</code>, and similarly for <code>inputString</code>, etc.</p>
<h2>String interpolation</h2>
<pre><code>print("[-] Got length of {}...\n[+] Attempting to crack key...".format(keyLength), file = sys.stderr)
</code></pre>
<p>is simpler as</p>
<pre><code>print(
    f"[-] Got length of {key_length}...\n"
    "Attempting to crack key...",
    file=sys.stderr,
)
</code></pre>
<h2>Type hints</h2>
<p>For example,</p>
<pre><code>def probablyText(inputString):
</code></pre>
<p>can be</p>
<pre><code>def probably_text(input_string: str) -&gt; bool:
</code></pre>
<h2>Sum without a comprehension</h2>
<pre><code>sum([x in alphanumeric_characters for x in currentString])
</code></pre>
<p>should use the generator directly instead of making a list; i.e.</p>
<pre><code>sum(x in alphanumeric_characters for x in current_string)
</code></pre>
<p>The same goes for</p>
<pre><code>return bytes([i ^ j for i, j in zip(first, second)]) # Convert two byte strings to their xor product
</code></pre>
<h2>Strongly-typed results</h2>
<pre><code>best = { 'message': currentString, 'num_chars': num_chars, 'key': byte }
</code></pre>
<p>If you're only doing this because you need to return multiple things, idiomatic Python is to simply return them as a tuple, i.e.</p>
<pre><code>best = current_string, num_chars, byte
# ...
return best
</code></pre>
<p>But this would be better-represented by a named tuple, or (better) a <code>@dataclass</code> with type hints. Just not a dictionary.</p>
<h2>Combined division</h2>
<pre><code>    distance /= i
    distance /= blocks
</code></pre>
<p>can be</p>
<pre><code>distance /= i * blocks
</code></pre>
<h2>Sums rather than successive addition</h2>
<pre><code>    for x in range(blocks):
        distance += hammingDistance(inputString[i * x:i * (x + 2) - 1], inputString[i * (x + 2):i * (x + 4) - 1])
</code></pre>
<p>can be</p>
<pre><code>distance = sum(
    hamming_distance(
        input_string[i*x     : i*(x+2)-1],
        input_string[i*(x+2) : i*(x+4)-1],
    )
    for x in range(blocks)
)
</code></pre>
<h2>Drop dictionaries to variables</h2>
<p>Given your current code,</p>
<pre><code>english = { 'monogram-frequencies': [8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150, 1.974, 0.074 ],
            'bigram-frequencies': [] }
</code></pre>
<p>should simply be a monogram variable and a bigram variable.</p>
    </div>