<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On a first read looks good.<br>
Would use named functions in a few places to increase readability.</p>

<p>Some other minor things:</p>

<p>It is more traditional for user types to have an initial uppercase letter.</p>

<pre><code> struct node

 // prefer
 struct Node
</code></pre>

<p>This makes it easier to spot the difference between types and objects.</p>

<pre><code> Node("Loki", "Astari", "Loki.Astari@gmail.com");
 // Easy to spot that is a type beign created.
 node("Loki", "Astari", "Loki.Astari@gmail.com");
 // Is that a node being created or a function call?
 // Harder to tell not impossible. But if you use the above nameing
 // convention functions and objects are easy to spot in the code and
 // Types are easy to spot when they are being used. 
</code></pre>

<p>If you are using C++03 then <code>NULL</code> is still acceptable. But nearly all implementations now accept <code>nullptr</code>. This is better it is type-safe.</p>

<pre><code>    List()
    {
        head = NULL;
        tail = NULL;
    }
</code></pre>

<p>When passing values here:</p>

<pre><code>    void create_contact(std::string first, std::string last, std::string cellNumber)
</code></pre>

<p>You are passing the parameters by value. This means a copy is passed to the function. It is more normal to pass values by const reference to avoid the copy.</p>

<pre><code>    void create_contact(std::string const&amp; first, std::string const&amp; last, std::string const&amp; cellNumber)
</code></pre>

<p>You should simplify your code with a constructor (or use the new list initializer).</p>

<pre><code>        node *temp = new node;
        temp-&gt;firstName = first;
        temp-&gt;lastName = last;
        temp-&gt;phoneNumber = cellNumber;
        temp-&gt;next = NULL;
</code></pre>

<p>Easier to write as:</p>

<pre><code>        Node* node = new Node(first, last, cellNumber, nullptr);
</code></pre>

<p>Or you can use the list initialization if you don't want to write a constructor:</p>

<pre><code>        Node* node = new Node{first, last, cellNumber, nullptr};
</code></pre>

<p>Building a list. An easy way to have a list is to have a fake node in the list (this is called a sentinel). The sentinel marks the beginning (or the beginning and end in a circular list). It does not contain data and you don't dynamically initialize it. The advantage is that you don't need to test for <code>nullptr</code> as there is always a member of the list so adding and removing (as long as you don't try and remove the sentinel) become much easier to write.</p>

<pre><code>        if (head == NULL)
        {
            head = temp;
            tail = temp;
            temp = NULL;
        }
        else
        {
            tail-&gt;next = temp;
            tail = temp;
        }
</code></pre>

<p>Now is simply:</p>

<pre><code>        tail-&gt;next = temp;
        tail       = temp;
</code></pre>

<p>Your declarations in your class become:</p>

<pre><code>        Node      head;   // Always have a fake head node.
        Node*     tail;   // tail always points at the last.
                          // Its empty if tail points at head.
</code></pre>

<p>This works fine:</p>

<pre><code>    void display_all() const
</code></pre>

<p>But <code>std::cout</code> is not the only stream you can print to. How about a file or a socket or an internal buffer before writting to a socket.</p>

<p>I would pass the stream you want to display on as a parameter. It can alwjays default to <code>std::cout</code> but allow a user to specify an alterantive:</p>

<pre><code>    void display_all(std::ostream&amp; outStream = std::cout) const
</code></pre>

<p>Sure this is fine:</p>

<pre><code>        for (node *curr = head; curr; curr = curr-&gt;next)
        {
            std::cout &lt;&lt; "\nContact Number: " &lt;&lt; ++contactNum &lt;&lt; "\n";
            std::cout &lt;&lt; "First Name: " &lt;&lt; curr-&gt;firstName &lt;&lt; "\n";
            std::cout &lt;&lt; "Last Name: " &lt;&lt; curr-&gt;lastName &lt;&lt; "\n";
            std::cout &lt;&lt; "Phone Number: " &lt;&lt; curr-&gt;phoneNumber &lt;&lt; "\n";
        }
</code></pre>

<p>But why not ask the node to stream itself.</p>

<pre><code>        for (node *curr = head; curr; curr = curr-&gt;next) {
            outStream &lt;&lt; *curr;
        }
</code></pre>

<p>Each function should have one action:</p>

<pre><code>    void display_contact(std::string first, std::string last)
</code></pre>

<p>This function has two distinct actions. 1) Find a Node 2) display a node. You can separate these out into there individual parts so they can be re-used more easily.</p>

<pre><code>    void display_contact(std::ostream const&amp; ooutStream, std::string const&amp; first, std::string const&amp; last) {
        auto data = list.find(first, last);
        if (data !=list.end()) {
            outStream &lt;&lt; data;
        }
        else {
            std::cout &lt;&lt; "No person found called: " &lt;&lt; last &lt;&lt; " " &lt;&lt; first &lt;&lt; "\n";
        }
</code></pre>

<p>O look here: We have found a re-use case for print out a <code>Node</code>.</p>

<pre><code>        if (found)
        {
            std::cout &lt;&lt; "First Name: " &lt;&lt; curr-&gt;firstName &lt;&lt; "\n";
            std::cout &lt;&lt; "Last Name: " &lt;&lt; curr-&gt;lastName &lt;&lt; "\n";
            std::cout &lt;&lt; "Phone Number: " &lt;&lt; curr-&gt;phoneNumber &lt;&lt; "\n";
            delete_position(idx);
        }
</code></pre>

<p>A lot of the user interface code could be spint into functions.</p>

<pre><code>    case AddContact:
        std::cout &lt;&lt; "\nEnter the contacts' first name: ";
        std::cin &gt;&gt; firstName;
        std::cout &lt;&lt; "\nEnter the contacts' last name: ";
        std::cin &gt;&gt; lastName;
        std::cout &lt;&lt; "\nEnter the contacts' phone number: ";
        std::cin &gt;&gt; phoneNumber;
        Contacts.create_contact(firstName, lastName, phoneNumber);
        std::cout &lt;&lt; "\n";
        break;
</code></pre>

<p>Easier to read as:</p>

<pre><code>    case AddContact:
        addContact(contacts);
        break;



void addContacts(Contacts&amp; contacts)
{
        std::cout &lt;&lt; "\nEnter the contacts' first name: ";
        std::cin &gt;&gt; firstName;
        std::cout &lt;&lt; "\nEnter the contacts' last name: ";
        std::cin &gt;&gt; lastName;
        std::cout &lt;&lt; "\nEnter the contacts' phone number: ";
        std::cin &gt;&gt; phoneNumber;
        contacts.create_contact(firstName, lastName, phoneNumber);
        std::cout &lt;&lt; "\n";
}
</code></pre>
    </div>