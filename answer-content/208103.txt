<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't use <code>using namespace std;</code></h2>

<p><a href="https://stackoverflow.com/a/1453605/5416291">It's bad practice</a> that can cause a lot of problems that are easy to avoid, most people are used to the prefix, and three letters aren't that hard to type.</p>

<hr>

<h2>Don't use <code>system("pause")</code></h2>

<p>It's not portable and <a href="https://stackoverflow.com/questions/1908512/c-hold-the-console-window-open">there are better ways to hold the console open</a>. </p>

<hr>

<h2>Prefer <code>nullptr</code> to <code>NULL</code></h2>

<p><code>NULL</code> is a macro that will be silently converted to 0 whenever possible. <code>nullptr</code> is a language extension and will only work contextually with pointers.</p>

<hr>

<h2>Use proper encapsulation</h2>

<p>A linked list should be a class that acts as a container of Nodes. Your <code>Node</code> class should not know how to sort all <code>Node</code>s. This is the job of the container. Furthermore <code>Node</code>s are an implementation detail that should not be exposed to the user.</p>

<pre><code>class LinkedList
{
public:
    // user functions should go here
private:
    struct Node
    {
        int value;
        Node* next{ nullptr };
    }
}
</code></pre>

<p>A few things to note. </p>

<ul>
<li>I put the <code>public</code> section first. This way anyone reading the code
will know what functions and variables are available to them.</li>
<li>I used <code>struct</code> for the <code>Node</code> since it represents plain data. It is
also easier to use because <code>struct</code> is default <code>public</code> so the
<code>LinkedList</code> will be able to access it easily (But since it is
properly encapsulated inside the container nothing else can.)</li>
<li>I initialized new nodes to <code>nullptr</code>.</li>
</ul>

<hr>

<p>Printing and Sorting aren't typically done as member functions. They should be standalone functions that accept a container, or a range of a container to perform their tasks.</p>

<hr>

<h2>Use <a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization" rel="nofollow noreferrer">RAII</a> whenever possible</h2>

<p><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-raii" rel="nofollow noreferrer">You shouldn't be manually allocating memory.</a> Especially since you aren't freeing it. Every instance of <code>new</code> should come with an instance of <code>delete</code> but you <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-newdelete" rel="nofollow noreferrer">shouldn't be using them</a> at all.</p>

<hr>

<h2>Prefer <code>'\n'</code> to <code>std::endl</code></h2>

<p><code>std::endl</code> does more than just move to the next line. <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">It is generally preferred not to use it casually</a>.</p>

<hr>

<p>Keep working on it. Try to implement the container with some of the member functions found at <a href="https://en.cppreference.com/w/cpp/container/list" rel="nofollow noreferrer"><code>std::list</code></a>. Browse <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines" rel="nofollow noreferrer">The Core Guidelines</a> from time to time. And bring us more code to review.</p>
    </div>