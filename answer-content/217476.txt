<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off: It's invalid HTML to have a <code>div</code> directly inside an <code>ul</code> element. Any special reason you need the <code>&lt;div class="tagsend"&gt;&lt;/div&gt;</code>? Modern CSS techniques usually don't need additional elements like that.</p>

<hr>

<p>You shouldn't repeatedly call the getter methods in a loop like that. If they do more work than just returning an array, then it's wasted performance. </p>

<pre><code>let notFoundNodes = graphFactory.getNotFoundNodes();
for (let x = 0; x &lt; notFoundNodes.length; x++) {
  htmlNodes = htmlNodes + '&lt;li&gt;&lt;a class="notfound" href="#"&gt;' + notFoundNodes[x] + '&lt;/a&gt;&lt;/li&gt;';
}
</code></pre>

<p>Or, considering you are using <code>let</code> which is part of ECMAScript 2015, you could alternatively use a <code>for ... of</code> loop:</p>

<pre><code>for (let notFoundNode of graphFactory.getNotFoundNodes()) {
  htmlNodes = htmlNodes + '&lt;li&gt;&lt;a class="notfound" href="#"&gt;' + notFoundNode + '&lt;/a&gt;&lt;/li&gt;';
}
</code></pre>

<hr>

<p>Concatenating strings in loops are also quite a wasteful operation, because they cannot be optimized by the runtime environment. A better way is to collect the strings in an array, and then joining them together at the end:</p>

<pre><code>var htmlNodes = ['&lt;ul class="tags"&gt;'];

// ...

for (let notFoundNode of graphFactory.getNotFoundNodes()) {
  htmlNodes.push('&lt;li&gt;&lt;a class="notfound" href="#"&gt;' + notFoundNode + '&lt;/a&gt;&lt;/li&gt;');
}

// ...

htmlNodes.push('&lt;/ul&gt;');
$('#pinnednodeslist').html(htmlNode.join(''));
</code></pre>

<hr>

<p>In order to avoid mixing the HTML you could use a <a href="http://www.google.de/search?q=javascript%20template%20engine" rel="nofollow noreferrer">template engine</a>. There are literally dozens out there, with many pros and cons, which can make the choice a bit overwhelming. For an example I'll use <a href="http://handlebarsjs.com" rel="nofollow noreferrer">Handlebars.js</a>:</p>

<p>The template is placed inside a <code>script</code> element somewhere in your HTML:</p>

<pre><code>&lt;script id="tags-template" type="text/x-handlebars-template"&gt;
  &lt;ul class="tags"&gt;
    {{#each notFoundNodes}}
      &lt;li&gt;&lt;a class="notfound" href="#"&gt;{{this}}&lt;/a&gt;&lt;/li&gt;
    {{/each}}
    {{#each pinnedNodes}}
      &lt;li&gt;&lt;a href="#"&gt;{{this}}&lt;/a&gt;&lt;/li&gt;
    {{/each}}
  &lt;/ul&gt;
&lt;/script&gt;
</code></pre>

<p>Once during page initialization you compile the template:</p>

<pre><code>var source = document.getElementById("tags-template").innerHTML;
var tagsTemplate = Handlebars.compile(source); 
</code></pre>

<p>And then later you can repeatedly use the compiled template to render the data:</p>

<pre><code>var context = {
   notFoundNodes: graphFactory.getNotFoundNodes(),
   pinnedNodes: graphFactory.getPinnedNodes()
};
var html = tagsTemplate(context);
$('#pinnednodeslist').html(html);
</code></pre>

<p>EDIT: BTW, nothing in this (or your original code) really requires jQuery. The last line could simply replaced with:</p>

<pre><code>document.getElementById('pinnednodeslist').innerHtml = html;
</code></pre>

<hr>

<p>The next step could be to use more advanced library such as <a href="https://reactjs.org" rel="nofollow noreferrer">React</a>, <a href="https://vuejs.org" rel="nofollow noreferrer">Vue.js</a> or <a href="https://angular.io" rel="nofollow noreferrer">Angular</a>. These are frameworks that not only render the data with a template engine, but also can (among other things) react to changes in the data and re-render automatically when even needed. This however requires learning a bit of a different way of programming.</p>

<hr>

<p>Finally, if the data displayed is coming from the server (via AJAX for example), then you could consider having the server render the HTML instead of sending the raw data.</p>
    </div>