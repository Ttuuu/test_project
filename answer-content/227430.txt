<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Usability</h2>

<blockquote>
  <p><em>It should be easy to use</em></p>
</blockquote>

<p>I consider this easy to use because all technical details are hidden from the end-user.</p>

<blockquote>
<pre><code>var hashing = new HashingManager();
var hash = hashing.HashToString("test");
var isValid = hashing.Verify("test", hash);
</code></pre>
</blockquote>

<hr>

<h2>Security</h2>

<blockquote>
  <p><em>It should be secure</em></p>
</blockquote>

<p>You are using a well estblished algorithm <code>Pbkdf2</code> together with a technique called <a href="https://en.wikipedia.org/wiki/Key_stretching" rel="nofollow noreferrer">key stretching</a> with a high amount of iterations. This is considered secure. </p>

<p>Some would take it <a href="http://www.thomas-weller.de/en/a-secure-password-hashing-implementation-for-pcls/" rel="nofollow noreferrer">a step further</a> and make the number of iterations a variable as well and store it along the digest. <sub>This would potentially require greater rainbow tables. A potential h3ck0r now requires combinations of passwords, salts Ã¡nd iterations to attack. The exact impact on entropy requires a citation...</sub></p>

<p><code>hashBytes.SequenceEqual(verificationHashBytes)</code> is optimized to exit early, which is considered a possible weakness in the algorithm. Use <a href="https://stackoverflow.com/questions/21100985/why-is-the-slowequals-function-important-to-compare-hashed-passwords">SlowEquals</a> instead.</p>

<hr>

<h2>Versioning</h2>

<blockquote>
  <p><em>Future proof (It should be possible to upgrade the Hashing Engine to support Legacy and New Hashes)</em></p>
</blockquote>

<p>Since your first two bytes represent the version, you are future proof. Suppose the entire structure of <code>HashVersion</code> would change (obsolete fields, new fields, ..) then you would still be able to read the first two bytes first and decide how to read the remaining data based on the version. </p>

<p>For instance, in pseudo code:</p>

<pre><code>var version = Read&lt;int&gt;(raw, 0);
if (version &lt;= NewHashVersionThreshold) 
{
   var hashVersionLegacy = Read&lt;HashVersionLegacy&gt;(raw, 2));
   // .. handle further
} else 
{
   var hashVersion = Read&lt;HashVersion&gt;(raw, 2));
   // .. handle further
}
</code></pre>

<hr>

<p>I don't like this line:</p>

<blockquote>
<pre><code>private HashVersion DefaultVersion =&gt; _versions[1];
</code></pre>
</blockquote>

<p>You'd have to change this code for each new version. I would return the latest version, which is the <code>HashVersion</code> with highest <code>Version</code> property.</p>

<hr>

<p>This method seems of little use to me: <code>IsLatestHashVersion</code>. What if <code>false</code> is returned, what would you do with that information? I find it more useful to return how a hash version compares to the <code>DefaultVersion</code>. Suppose the software's <code>DefaultVersion</code> is 3 at some point and we verify a hash of version ..</p>

<p>Backward-compatibility enforced</p>

<ul>
<li>.. version 2: the software could verify the hash using the structure of version 2.</li>
</ul>

<p>Forward-compatibility limited</p>

<ul>
<li>.. version 4: the software is unable to verify the hash.</li>
</ul>
    </div>