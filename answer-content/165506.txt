<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a couple of observations:</p>

<ol>
<li><p>There's a comment documenting the elements of the priority queue:</p>

<pre><code># path is a list of tuples of the form ('node', 'cost')
frontier.insert([(start, 0)], 0)
</code></pre>

<p>This kind of data structure can be made clearer using <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a>:</p>

<pre><code>from collections import namedtuple

# Position in A* search: reached 'node' having paid cumulative 'cost'.
SearchPos = namedtuple('SearchPos', 'node cost')
</code></pre>

<p>Then you can write:</p>

<pre><code>node = path[-1].node
g_cost = path[-1].cost
</code></pre></li>
<li><p>Each position in the A* search is stored as a list of nodes visited along the path to that position. The trouble with this approach is that constructing the new path requires copying the old path:</p>

<pre><code>new_path = path + [(neighbor, cumulative_cost)]
</code></pre>

<p>The longer the path gets, the longer it takes longer to copy it out, and the more memory is needed to store all the paths in the queue. This leads to quadratic runtime performance.</p>

<p>Instead of copying the path, remember the previous position on the path:</p>

<pre><code># Position in A* search: reached 'node' having paid cumulative 'cost';
# 'prev' is the previous position on the lowest-cost path to 'node'
# (or None if this is the first node on the path).
SearchPos = namedtuple('SearchPos', 'node cost prev')
</code></pre>

<p>Then constructing the new position looks like this:</p>

<pre><code>new_position = SearchPos(neighbour, cumulative_cost, position)
</code></pre>

<p>and when you find the goal, you can reconstruct the path by working backwards along the chain of positions:</p>

<pre><code>if position.node == dest:
    path = []
    while position is not None:
        path.append(position.node)
        position = position.prev
    return path[::-1]
</code></pre></li>
</ol>
    </div>