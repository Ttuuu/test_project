<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>AWK="/bin/awk"
</code></pre>
</blockquote>

<p>It's easier and more readable if you just set your PATH to something appropriate.</p>

<blockquote>
<pre><code>USERS="`"$AWK" '$7 &gt;= "2002" &amp;&amp; $7 &lt;= "2018"' $FILE | "$AWK" '{print $3}' | sort -u`"
</code></pre>
</blockquote>

<p>Backticks should almost always be replaced by <code>$( … )</code>, which is faster because it does not invoke a subshell.  </p>

<p>Literal numbers should not be quoted.  It happens to still do what you want in awk; in some languages it won't.  A bad habit, easily avoided.</p>

<p>There's no need to invoke awk a second time to extract the third field.  Simply pair the action <code>{print $3}</code> with the condition (<code>$7 &gt;= …</code>) that's already there.</p>

<p>It's good form to indent the body of a <code>for</code> block (or any other block).</p>

<blockquote>
<pre><code>echo "User $user " | tr -d "\n";
</code></pre>
</blockquote>

<p>To suppress a newline on <code>echo</code>, use <code>echo -n</code>.</p>

<blockquote>
<pre><code>column -t
</code></pre>
</blockquote>

<p>This has some awkward consequences, like tabs inside of labels ("<em>Total<code>TAB</code>Space</em>") and unaligned numbers.  <code>printf</code> will give much prettier results.  Both bash and awk provide it.</p>

<blockquote>
<pre><code>total/1024/1024/1024 
</code></pre>
</blockquote>

<p>Nothing wrong with this, as such, but <code>2**30</code> is useful shorthand for gigabyte. </p>

<blockquote>
<pre><code>==============================================================
</code></pre>
</blockquote>

<p>Bash can generate sequences like this with the idiom <code>printf "=%.0s" {1..62}</code>.  The <code>=</code> is the character and <code>62</code> is the count.</p>

<p>You're traversing the file three times and extracting the same information each time.  This is going to get slow as the file grows.  Awk has associative arrays: you can store a subtotal for each user, then iterate and print those subtotals at the end of the awk script, accomplishing the whole thing in one go.</p>

<p>Putting it all together:</p>

<pre><code>/bin/awk -vusrfmt="User %-20s Total Space consumed: %11.6f GB\n" \
         -vsumfmt=$( printf "=%.0s" {1..62} )"\nTotal Space consumed by All Users: %.6f GB\n"  '
  $7 &gt;= 2002 &amp;&amp; $7 &lt;= 2018 { 
    subtot[$3]+=$4
    tot+=$4
  }
  END {
    for (u in subtot) printf usrfmt, u, subtot[u] / 2**30
    printf sumfmt, tot / 2**30
  }'
</code></pre>
    </div>