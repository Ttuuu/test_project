<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I continually get <code>Subscript Out of Range</code> at</p>
<blockquote>
<pre><code>vOut(outCnt, arrayIndex1) = Split(Mid$(s, 2) &amp; "," &amp; arr(i, lInd), ",")(arrayIndex1 - 1)
</code></pre>
</blockquote>
<h3>ByRef</h3>
<blockquote>
<pre><code>Sub Arrangements(ByRef arr, ByVal s As String, ByVal lInd As Long, ByRef outCnt As Long, ByRef vOut As Variant)

Arrangements arr, s &amp; "," &amp; arr(i, lInd), lInd + 1, outCnt, vOut
</code></pre>
</blockquote>
<p>Why are you passing all these arguments <code>ByRef</code>? Especially because you're calling the procedure from within the procedure. By definition the <code>arr</code> passed ByVal will always persist as will the <code>outCnt</code>. The <code>vOut</code> is being passed back as well, so it doesn't need to be <code>ByRef</code>.</p>
<p>Do you see what I mean? If you had this -</p>
<pre><code>Sub main()
    Dim i As Long
    i = 1
    adding i
End Sub
Sub adding(ByVal i As Long)
    If i &gt; 0 Then i = i + 1
    adding i
End Sub
</code></pre>
<p>The <code>i</code> would increase every time it's passed back. What <code>ByRef</code> would be used for is making changes to something that <em>isn't</em> passed back.</p>
<p>That being said, why are you calling your procedure from within your procedure anyway?</p>
<blockquote>
<pre><code>Sub Arrangements(ByRef arr, ByVal s As String, ByVal lInd As Long, ByRef outCnt As Long, ByRef vOut As Variant)
For
  If
    If lInd = UBound(arr, 2) Then
   Else
       vOut(outCnt, lInd) = arr(i, lInd)
       Arrangements arr, s &amp; "," &amp; arr(i, lInd), lInd + 1, outCnt, vOut
End If
</code></pre>
</blockquote>
<p>Seems to me if your second <code>If</code> isn't true, maybe you need to go to the next <code>For</code>? Or does it need to re-perform the entire process again?</p>
<p>Maybe I'm having trouble understanding it. I have no idea what <code>lInd</code> is.</p>
<h3>Variables</h3>
<p><em><strong>Give your variables meaningful names</strong></em>. This makes following the code easier and it also makes future you happy that you can take a look and know what is happening without tracing the entire procedure.</p>
<ol>
<li><code>arr</code> - tell me of what. e.g. <code>arrayOfCombinations()</code></li>
<li><code>outCnt</code> = it's a count of what and where is it going out?</li>
<li><code>vOut</code> - once again, what is this?</li>
<li><code>s</code> -?</li>
<li><code>arrayIndex1</code> - why is this #1? Is there a second one? Try to never put numerical digits in a variable's name</li>
<li><code>lInd</code> - this is created as a <code>ByVal</code> argument and then sent back to itself as its own value. I - what?!</li>
</ol>
<p>I'm not being mean, but how would I ever be able to figure out what <code>lInd</code> is if it's never truly defined and has a name that doesn't tell me much. That's very poor logic (of the procedure, not you).</p>
<h3>Magic numbers</h3>
<p>I see the number <code>1,000,000</code> twice. What is it? The number of combinations?</p>
<pre><code>Const TOTAL_COMBINATIONS as Long = 1000000
</code></pre>
<p>Or name it whatever it is.</p>
    </div>