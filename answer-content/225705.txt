<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not a full rewrite, but some pointers:</p>

<p>Typically, a <code>main</code> function's do-block shouldn't be doing a whole lot of work. Additionally, <code>do-block</code>s should try to avoid having lots of <code>let</code> statements, and instead "outsource" that work to helper functions. A function with type <code>Double -&gt; Double -&gt; Double -&gt; [((Double, Double), (Double, Double))]</code> could replace most of the <code>do</code> block (the arguments would be <code>w</code>, <code>h</code>, and <code>a</code>).</p>

<p>Every style guide I've seen recommends putting type signatures on every top-level function. Just reading the code to try and figure out what the above mentioned type should be can be surprisingly difficult. Unfortunately, as the author of a program, it's really easy to forget that you know the types because the ideas for the program were your own.</p>

<p>Primes in function names are typically reserved for one of two things. It could mean a <em>strict</em> variant, such as <code>foldl'</code>. "Strict" in this case means that the function evaluates its argument, as opposed to Haskell's default of waiting to evaluate things as long as possible. The other option is that it's a minor variation on the function of the same name (many haskellers would say to avoid doing even this, and to reserve primes on function names for strict varaints alone). <code>getints'</code> is not a minor variation on <code>getints</code>, it is a helper function. A more appropriate name might be <code>getintsHelper</code>. On the other hand <code>swap'</code> is a minor variation on <code>swap</code>, and barring a better name like <code>swapBoth</code>, <code>swap'</code> is a reasonable name for that function.</p>

<p>Your function <code>uniq</code> looks like <code>Data.List.nub</code>. <code>nub</code> is a strange name and <code>uniq</code> honestly makes more sense, but it's better to use library functions that readers are familiar with. It's also fine to define synonyms, like <code>uniq = nub</code>, this way readers can see that in the source. Recognizing that <code>uniq</code> is a complete re-implementation is a bit harder. If you think a function you need is simple or common, check the standard library! Haskell's is quite extensive.</p>

<p>With top-level types added and no other changes, this would be a very strong starting point. I'd label that as good work!</p>
    </div>