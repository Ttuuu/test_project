<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>OverView</h3>

<p>I understand that it is common to use <code>rows</code> and <code>cols</code> in the constructor. <strong>BUT</strong> if you use it as part of the type information you can do some compile time checks that prevents illegal expressions.</p>

<p>For example: In multiplications. You can check that the size of the matrices are correct for the multiplication at compile time.</p>

<p>The down size is that you can not have dynamically sized matrices. So it may not be appropriate for your use case.</p>

<p>Its a matrix why do you not support standard matrix access operations?</p>

<pre><code>LiteMatrix&lt;int&gt;   x(15,5);

std::cout &lt;&lt; x[2][3] &lt;&lt; "\n";
// Much nicer than 
std::cout &lt;&lt; x.getElement(2, 3) &lt;&lt; "\n";
</code></pre>

<h3>CodeReview</h3>

<p>Inside the class definition you don't need to specify the <code>&lt;T&gt;</code> everywhere. This is implicit as you are inside the <code>LiteMatrix</code> definition.</p>

<pre><code>template&lt;typename T&gt;
class LiteMatrix
{
    // STUFF
    LiteMatrix operator+(const LiteMatrix&lt;T&gt; &amp;rhs);
    LiteMatrix&amp; operator+=(const LiteMatrix&lt;T&gt;&amp; rhs);

    // STUFF
    template&lt;typename T&gt;
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const LiteMatrix&lt;T&gt;&amp; rhs);
    // STUFF
}
</code></pre>

<p>This could simply be:</p>

<pre><code>template&lt;typename T&gt;
class LiteMatrix
{
    // STUFF
    LiteMatrix operator+(const LiteMatrix&amp; rhs);
    LiteMatrix&amp; operator+=(const LiteMatrix&amp; rhs);

    // STUFF
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const LiteMatrix&amp; rhs);
    // STUFF
}
</code></pre>

<p>You have a copy object.</p>

<pre><code>    void setMatrix(const std::vector&lt;T&gt;&amp; val);
    void setElement(const size_t row, const size_t col, const T&amp; val);
</code></pre>

<p>You might as well have also have a move version!</p>

<pre><code>    void setMatrix(std::vector&lt;T&gt;&amp;&amp; val);
    void setElement(const size_t row, const size_t col, T&amp;&amp; val);
</code></pre>

<p>You forgot the reference here:</p>

<pre><code>    // Passing by value is going to cause a copy of the array
    void setRow(const size_t row, const std::vector&lt;T&gt; val);
    void setCol(const size_t col, const std::vector&lt;T&gt; val);
</code></pre>

<p>When getting a value return by <code>const reference</code> to avoid an unnecessary copy.</p>

<pre><code>    T getElement(const size_t row, const size_t col) const;
</code></pre>

<p>I would also have a non cost version of this that returns a reference to the internal value. That way you can allow updates in a more normal matrix like way.</p>

<p>Why not initialize the vector in the initializer list?</p>

<pre><code>template&lt;typename T&gt;
LiteMatrix&lt;T&gt;::LiteMatrix(const size_t &amp; rows, const size_t &amp; cols)
    : m_rows(rows), m_cols(cols)
{
    m_mat = std::vector&lt;T&gt;(rows * cols);
}
</code></pre>

<p>I would have just done:</p>

<pre><code>template&lt;typename T&gt;
LiteMatrix&lt;T&gt;::LiteMatrix(const size_t &amp; rows, const size_t &amp; cols)
    : m_rows(rows)
    , m_cols(cols)
    , m_mat(rows * cols)
{}
</code></pre>

<p>Simply return the value of the expression.</p>

<pre><code>template&lt;typename T&gt;
LiteMatrix&lt;T&gt; LiteMatrix&lt;T&gt;::operator+(const LiteMatrix&amp; rhs)
{
    // Simpler to write as:
    return LiteMatrix(*this) += rhs;
}
</code></pre>

<p>Yes this works:</p>

<pre><code>template&lt;typename T&gt;
T&amp; LiteMatrix&lt;T&gt;::operator()(const size_t&amp; rIndex, const size_t&amp; cIndex)
{
    return m_mat[rIndex * m_cols + cIndex];
}
</code></pre>

<p>But much more traditional to use <code>operator[]</code> on matrix objects.
see: <a href="https://stackoverflow.com/a/1971207/14065">https://stackoverflow.com/a/1971207/14065</a></p>

<p>OK. I see what you are doing here:</p>

<pre><code>template&lt;typename T&gt;
bool LiteMatrix&lt;T&gt;::operator!=(const LiteMatrix&amp; rhs) const
{
    // STUFF
            isNotEqual = std::numeric_limits&lt;T&gt;::epsilon() &lt;= 
                std::abs(m_mat[i * m_cols + j] - rhs.m_mat[i * m_cols + j]);
    // STUFF
}
</code></pre>

<p>This is correct. But personally I think I may have gone with some form of type specialization. That would have simply done the test on integer numbers and used epsilon on floating point numbers.</p>

<p>So many lines for simply returning the value.
I would have had these as single liners inside the class definition.</p>

<pre><code>template&lt;typename T&gt;
size_t LiteMatrix&lt;T&gt;::rowCount() const
{
    return m_rows;
}

template&lt;typename T&gt;
size_t LiteMatrix&lt;T&gt;::colCount() const
{
    return m_cols;
}
</code></pre>
    </div>