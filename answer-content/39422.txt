<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is only a form/style review and not algorithm review, as I don't really know what some of your algorithms are supposed to do.
There are some changes that I would do in your code.</p>

<p>The first one would be replace the <code>while</code> loops for <code>do while</code> loops, and get rid of the flag go. In case of <code>sqrt</code> this would be something like:</p>

<pre><code>do{
    BigInteger numOne = guess.divide(TWO);
    BigInteger numTwo = n.divide(guess.multiply(TWO));
    guess = numOne.add(numTwo);
    if (guess.mod(TWO).equals(BigInteger.ONE)) {
        guess = guess.add(BigInteger.ONE);
    }
    //System.out.println(guess.toString());
    c++;
    c %= 5;
    if (c == 4 &amp;&amp; test.equals(guess)) {
        return guess;
    }
    if (c == 2) {
        test = guess;
    }
}while(!numOne.equals(numTwo));
</code></pre>

<p>The same goes for <code>cbrt</code> and <code>getLargestArray</code>.</p>

<p>In <code>getLargestArray</code> I would create the result array at the beginning and accumulate the results there. By doing that I could use a <code>for</code> statement and get rid of your 5 <code>ifs</code>. like:</p>

<pre><code>ArrayList&lt;Object&gt; test = new ArrayList&lt;Object&gt;();
int[] results = new int[6]{1,1,1,1,1,1}; //d x y z a b
//map the variables as indexes in results for readability!
int d = 0, x = 1, y = 2, z = 3, a = 4, b = 5;
int scale = 100000;
do {
    try {
        switch (results[d]) {

            case 1:
                test.add(new BigInteger[results[x]]);
                results[x] += scale;
                break;
            //other cases...
            default:
                test.add(new BigInteger[results[x]]);

        }
        for(int i = x; i &lt; results.lenght; ++i){
            //I doubt that this condition will ever be true, and also that this is what you really want to check, but I follow the algorithm as yours
            if(results[i] == Integer.MAX_VALUE){
                results[d]+=1;
            }
        }
        test.clear();
    } catch (OutOfMemoryError e) {
        scale %= 10;
        //System.out.println(d + " " + scale + " " + x);
    } catch (Exception e) {
        e.printStackTrace();
    }
}while(scale != 0);
return results;
</code></pre>

<p>Also take note that a n-dimensional array is just a abstraction for a 1 dimensional contiguous array, and that should be no major differences in your results.</p>

<p>I would also get rid of your magic constants in <code>FreeRam</code>. Write <code>1024 * 1024 * 1024</code> instead of <code>1073741824</code> etc. If you need that the value produced is a double than you can write 1024.0 * 1024...</p>
    </div>