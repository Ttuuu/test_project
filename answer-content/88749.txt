<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Too Many Trees in the answers</strong></p>

<p>There are lots of valid points throughout the various answers but it mostly misses the big OO forest.</p>

<blockquote>
  <p>How could this be written to follow OOP concepts? </p>
</blockquote>

<p><strong>Create coherent classes.</strong> </p>

<p>A coherent class has appropriate properties to describe/define what it is and appropriate methods to describe/define what it does. This design goal is in play regardless of specific overall implementation.</p>

<p>The OP <code>static void Main()</code> does things that <code>Product</code> should do for itself: emit it's property values - <code>ToString()</code>; and <code>CalculateTax()</code>.</p>

<p><em>Minimize coupling and maximize coherence</em></p>

<hr>

<p><strong>So, why is the code not object oriented?</strong></p>

<p><strong>Unorganized / Unstructured code</strong></p>

<p>I want methods to be "at the appropriate level of abstraction."  <code>main</code> should read very high level.</p>

<pre><code>public static void main() {
    bool continueEntry = true;
    int userEntry = 0;

    while(continueEntry) {
       continueEntry = PrompUser(out userEntry);

       if(!continueEntry) break;

       CreateProduct(userEntry);
     }

     CalculateTax();
     PrintResults();
}
</code></pre>

<p><strong>Anemic Classes</strong></p>

<ul>
<li>Client code should not be doing things for a class.

<ul>
<li>tell <code>Product</code> to calculate tax. Don't do it for the product.</li>
<li>tell <code>Product</code> to display its details, Don't do it for the product.</li>
<li>Tell <code>ProductList</code> to calculate tax. Don't do it for the list.</li>
<li>Tell <code>ProductList</code> to display its details. Don't do it for the product.</li>
</ul></li>
</ul>

<p><strong>Poor domain space modeling - Data Structures</strong></p>

<p>The "items" are tax categories. We really don't care <em>what</em> it is but rather what its tax rate is. </p>

<p>I think of not just the classic things like trees, linked list, etc. but I tend to think of any class I create to make data (class properties) easier to manipulate.</p>

<p>Data Structures significantly reduces code complexity.</p>

<ul>
<li><strong>Tax Rate Dictionary</strong> - Each taxable-item-type will have an entry. And the taxable-item-type will be the dictionary key.</li>
<li><strong>taxable-item-type</strong> - an <code>enum</code>

<ul>
<li>it is obvious that each taxable-item has it's own tax rate. Even if it is the same as other items.</li>
</ul></li>
<li><strong>ProductList</strong> - This guy will know how to print the list, how to calculate total tax for the list, and how to find a duplicate inside of itself. Again, Tell [your class here] to do it, Don't do it for the [your class here]</li>
</ul>

<p><strong>ItemType</strong></p>

<pre><code>public enum ItemType {Invalid, Book, Food, Medical, Import, Other}
</code></pre>

<p>It is very, very useful to have a default of "invalid" or "unknown" or "undefined"</p>

<p><strong>Tax Table</strong></p>

<pre><code>public class TaxTable {
    public static Dictionary&lt;ItemType, decimal&gt; Taxes = new Dictionary&lt;ItemType, decimal&gt;(){
    {ItemType.Invalid, 0},
    {ItemType.Book, 0},
    {ItemType.Food, 0},
    {ItemType.Medical, 0},
    {ItemType.Import, .05},
    {ItemType.Other, .10}
   }

   public static decimal GetTaxFor(ItemType) { // lookup in Taxes}
}
</code></pre>

<hr>

<hr>

<p><strong>Product Class With Appropriate Responsibilities</strong></p>

<p>I don't want to get wrapped around the axle about <code>public</code>, <code>private</code>, naming conventions, etc. That is irrelevant for the larger point of Object Oriented.</p>

<pre><code>public class Product {
   ItemType WhatIAm {get; set;}

   // EDIT: Add "imported" as a separate concept. See @cbojar comment
   public bool Imported {get; protected set;}

   // a product knows what a valid item code is
   public Product(int itemType) {
       // convert to an ItemType

       // even if it is "Invalid" you can still have an Invalid
       // product type with a tax of zero, price of zero, etc.
       // Client code will be none the wiser.
       // The ProductCollection could simply elect to ignore it.
   }

   public override ToString(){
       StringBuilder me = new StringBuilder();
       me.AppendFormat("WhatIAm : {0}", WhatIAm);
       me.AppendFormat("Price : {0}", Price);
       // etc.
       return me.ToString();
   }

   // EDIT: added "imported" as an additional tax. See @cbojar comment
   public decimal CalculateTax() {
       decimal tax = 0.0;
       tax = Price * TaxTable.GetTaxFor(WhatIAm);
       tax = Imported ? tax + Price * TaxTable.GetTaxFor(ItemType.Imported) : tax;
   }

   public decimal TotalCost(){
       return Price + CalculateTax();
   }
}
</code></pre>

<p><strong>ProductList With Appropriate Responsibilities</strong></p>

<pre><code>public class ProductList : List&lt;Product&gt; {

    public override ToString() {
        StringBuilder me = new StringBuilder();

        foreach(Product item in this) {
            me.AppendLine(item.ToString());
         }

         me.AppendFormat("Total Tax : {0}", CalcuateTax());
         return me.ToString();
    }

    public decimal CalculateTax(){
        decimal total = 0.0;

        foreach(Product item in this){
            total += item.CalculateTax();
        }

        return total;
    }
}
</code></pre>

<h1>Client Code</h1>

<p><em>THIS is object oriented</em></p>

<pre><code>class Program {
    ProductList myProductList = new ProductList();

    public static void main() { 
        bool continueEntry = true;
        int userEntry = 0;

        while (continueEntry) {
           continueEntry = PrompUser(out userEntry);

           if(!continueEntry) break;

           CreateProduct(userEntry);
         }

         CalculateTax();
         PrintResults(); 
    }

    // yes, needs a Price parameter.
    public static void CreateProduct(int thisType) {
        myProductList.Add(new Product(thisType));
    }

    public static void CalculateTax() {
        myProductList.CalculateTax();
    }

    public string PrintResults(){
        Console.WriteLine(myProductList.ToString());
    }
}
</code></pre>

<h2>Object Oriented Good Code Smells</h2>

<ul>
<li>Client <em>tells</em> the class to do something.</li>
<li>Code reads at appropriate levels of abstraction.</li>
<li>Methods tend to be short!

<ul>
<li>Details are "pushed down" into the appropriate class.</li>
</ul></li>
<li><p>Domain parts are defined and distinct</p>

<ul>
<li>Data Structures. Learn it, live it, love it.</li>
</ul></li>
<li><p>Unnecessary coupling is avoided</p>

<ul>
<li>Anyone can use the <code>TaxTable</code> and <code>ItemType</code></li>
<li>Each class does for itself. We are not dependent on another class to do it. </li>
</ul></li>
<li>code is reusable.

<ul>
<li>Good class responsibilites inherently makes <code>Product</code> (and in particular calculating product's tax) reusable. </li>
</ul></li>
<li>Class changes have no side effect, ideally.

<ul>
<li>Adding or changing the <code>TaxTable</code> does not cause a change in any other class</li>
<li>Changing <code>Product.ToString()</code> does not cause <code>ProductList.ToString()</code> to change.</li>
</ul></li>
<li>Treating objects the same.

<ul>
<li>There is no special case for an <code>ItemType.Invalid</code> product. Client code won't know or care. <code>ProductList</code> could not add invalid products to the list of you so desired, but even then the client is blissfully ignorant.</li>
</ul></li>
</ul>

<p>One final word... Not just on this thread, but everywhere there is way too much over emphasis on creating <code>interface</code>s.</p>
    </div>