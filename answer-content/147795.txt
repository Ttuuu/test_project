<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>SuppressWarnings</strong></p>

<p>Compiler warnings are there for a reason, it's quite rare that you will encounter a good reason for suppressing them.  Where possible, you should try to do what the warning is asking you to do (such as cleaning up after the <code>Scanner</code>).</p>

<p><strong>Player</strong></p>

<p>It feels a lot like your code is missing the concept of a Player/Adventurer.  This could include properties such as:</p>

<ul>
<li>Name</li>
<li>Money</li>
<li>CurrentHealth</li>
<li>MaximumHealth</li>
<li>Weapon</li>
</ul>

<p>Not only will this collect related data in one spot, it will make it easier to keep track of that information across method/class boundaries.  At the moment, you get the players name in your <code>main</code>, say hi and then forget about it.  Creating a Player and passing it to your <code>TheGame</code> method would allow the name to be used in future interactions.</p>

<p><strong>Unused Arguments</strong></p>

<p>Your <code>Start</code> method takes an <code>args</code> parameter, which you're not currently using.  In fact you're passing <code>null</code> as the parameter when calling it from <code>main</code>.  When you're writing fresh code, it's tempting to introduce concepts because you might need them in the future.  Usually it's a bad idea.  It is more productive to try to only introduce code as and when required.  If you stop using code / parameters remove it straight away.  This helps to minimise the complexity of your application.  If you're worried about losing work / getting yourself into a state that you can't undo then consider using a source control system.  Something like <a href="https://git-scm.com/" rel="nofollow noreferrer">git</a> allows you to commit regularly and rollback to previous versions if required.</p>

<p><strong>Variable Naming</strong></p>

<p>As you get more code, naming becomes increasingly important.  If methods, classes and variables are well named they help the code to tell a story that describes what it's doing.  This reduces the need for comments and makes your code much more approachable.  Consider this line:</p>

<pre><code>if(ATB1==1)
</code></pre>

<p>What does it mean?  Is the meaning of <code>ATB1</code> obvious?  Something like <code>itemToBuy</code> might be a bit more descriptive.</p>

<p><strong>What do I start with?</strong></p>

<p>Consider telling the player what their starting point is.  At the moment, the first time they found out how much money they have is <em>after</em> they have decided to buy an Axe or a Sword.</p>

<p><strong>Typo's and telling a story</strong></p>

<p>You have some grammar/spelling errors in your text.  For example ('wepon' and 'isnt') in the following:</p>

<blockquote>
  <p>"In the shops it will ask you to pick numbers that go with each wepon and the wepons cost money. If you press a number that isnt on the shop then you will skip that part with no wepon or "</p>
</blockquote>

<p>It may be that you're doing it as part of setting the environment, or it may that you've simply made typos (I automatically type 'byte' whenever I try to type 'bye' then have to correct it).  Either way, the more text you embed in your program, the more likely it is that you're going to encounter errors.  If you push a lot of the text out of the application into a text file, it can be easier to validate the text using something like a word processor.  The process of moving the descriptive text to an external resource can also help to identify what is common and what is different between your different interactions.  This can help to direct your file format &amp; your code structure.</p>

<p>So, for example you might have a file structure something like:</p>

<pre><code>&lt;Interactions&gt;
    &lt;Interaction Id="1"&gt;
        &lt;Text&gt;Hello what would you like to buy
              we sell a sword and an axe
              if you would like to buy axe press 1 and it will cost 10(+2 damge) and if you want to buy a sword(+3 damage) press 2 and it will cost 12
        &lt;/Text&gt;
        &lt;Choices&gt;
            &lt;Choice input="1"&gt;2&lt;/Choice&gt;
            &lt;Choice input="2"&gt;3&lt;/Choice&gt;
            &lt;DefaultChoice&gt;4&lt;/DefaultChoice&gt;
        &lt;Choices&gt;
    &lt;/Interaction&gt;
    &lt;Interaction Id="2"&gt;
        &lt;Text&gt;You have an axe!&lt;/Text&gt;
        &lt;Choices&gt;
            &lt;DefaultChoice&gt;4&lt;/DefaultChoice&gt;
        &lt;Choices&gt;
    &lt;/Interaction&gt;
    &lt;Interaction Id="3"&gt;
        &lt;Text&gt;You have a sword!&lt;/Text&gt;
        &lt;Choices&gt;
            &lt;DefaultChoice&gt;4&lt;/DefaultChoice&gt;
        &lt;Choices&gt;
    &lt;/Interaction&gt;
    &lt;Interaction Id="4"&gt;
        &lt;Text&gt;The End!&lt;/Text&gt;
    &lt;/Interaction&gt;
&lt;Interactions&gt;
</code></pre>

<p>This defines interactions and choices which lead to the next interaction.  You can then add extra information like Mobs/Bosses, effects on stats etc etc and fairly easily rearrange your adventure.  You can introduce well known tokens into your text which are expanded by the code (such as Player.Name, Player.Weapon etc).  Your code then becomes more focused on representing the structure and walking through it.</p>

<p>Taking this sort of approach makes it possible to move towards a database back-end for representing the scenarios (if you want to learn about accessing databases from Java).  IT also makes it possible for you to use the same game engine to tell different adventures by simply using a different text file.</p>
    </div>