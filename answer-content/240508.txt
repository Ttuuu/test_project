<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming &amp; Readability</h3>

<p>Choosen naming mostly conveys purpose (expressive) and follows conventions (camelCase).</p>

<h3>Design &amp; Structure</h3>

<p>Very good design for a learner:</p>

<ul>
<li><code>TicTacToe</code> represents a <em>game instance</em> currently playing

<ul>
<li>having a <code>board</code> (composition) recording current <em>board state</em></li>
<li>initializes game (<em>registering</em> 2 players, <em>resetting</em> board)</li>
<li>checks for allowed moves (target field on board and not occupied)</li>
<li>executes a player's turn and <em>evaluates</em> if turning player is a winner (horizontal, vertical, if indicated both diagonals in a row)</li>
</ul></li>
<li><code>Player</code> represents one player (of minimum required 2), including his mark</li>
</ul>

<p>Improvements:</p>

<ul>
<li>apply <strong>information hiding</strong>: public getters and setters allow access and modification of private member variables (take advantage of <em>Lombok</em>)</li>
<li>UI invades gaming-logic! What about a separate <code>TicTacToeUI</code> class that is responsible for input (player name, moves) and output (render board, show winner), probably validation (check input). This concept is called <strong>Separation of Concerns</strong> (similarly also applied as <strong>MVC</strong>).
Beneficial for a later extension, e.g from text-based input (TUI) towards graphical (GUI) or web-based using a REST interface.</li>
<li><strong>Encapsulate round-based iteration</strong> inside the game class. So <code>main</code> is just responsible for initiating and starting the game (additionally stopping, if an exit-handler may be implemented allowing a long game to be aborted). That is what the <strong>Single Responsibility Principal</strong> (SRP) suggests.</li>
<li>split long methods like <code>makeATurn</code>: one <code>moveTo(player, x,y)</code> another <code>boolean hasWon(player, x, y)</code> which calls <code>evaluateHorizontal</code>, etc. (SRP) in order to check the rows separately.</li>
</ul>

<h3>Stability &amp; Technical Improvement</h3>

<ul>
<li><code>ArrayIndexOutOfBoundsException</code> is not thrown in <code>checkInput</code>. Although it does not check for negative index values (which have a special meaning for the game-loop!)</li>
<li><strong>magic numbers</strong> like <code>-1</code> should be defined as <em>constant</em> to express purpose in their name</li>
<li>although a class-variable like <code>static int playerCount</code> is possible (Beware: counts players of <em>all game instances</em>!), what's the purpose?</li>
<li><code>turnNumber</code> should not be static, but initialized within constructor</li>
</ul>
    </div>