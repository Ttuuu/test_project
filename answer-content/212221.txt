<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Error reporting</h3>
<p>This is much better than your initial attempt, but somehow it become <em>more verbose</em> and I'll tell you why: you are, so to say, abused the error reporting. <code>mysqli_sql_exception</code> is not intended to be thrown manually. Like it's said in the article I gave you link to, mysqli <a href="https://phpdelusions.net/mysqli/mysqli_connect#functions" rel="nofollow noreferrer">can throw exceptions by itself</a> - so just let mysqli to do it. And therefore there is no reason to check for errors manually, and it will <strong>greatly reduce</strong> the amount of repeated code.</p>
<h3>Automatic binding</h3>
<p>Your automated binding function is rather confusing. Apparently you didn't have any clear idea what this code is intended to do:</p>
<pre><code>                else
                {
                    $types .= 'b';
                }
</code></pre>
<p>And I'll tell you - there is no good scenario for it.<br>
Don't write a code just in case, when you just don't know what to write. In such circumstances just <strong>don't write any code at all.</strong></p>
<p>Besides, I am scared by functions like this that sniff a type off a variable automatically. If you will have a query that will compare a string stored in a database to a number, the consequences would be fatal. And PHP is known for converting strings to numbers on its own will. So, although quite small, but there is still a possibility that your binding function will ruin your database.</p>
<p>That's why I prefer either a manual explicit type setting or just blunt setting a string type for all variables. At least it won't harm anyone.</p>
<p>In practice it means that I recommend to use string type for all parameters by default, with a possibility of a fallback with manual type setting. So, taken from ny other article, the <a href="https://phpdelusions.net/mysqli/simple#code" rel="nofollow noreferrer">mysqli binding function</a> would be like</p>
<pre><code>public function execute(string $sql, $params = [], $types = '') : mysqli_stmt
{
    if (!$params) {
        return $this-&gt;connection-&gt;query($sql);
    }
    $types = $types ?: str_repeat("s", count($params));
    $statement = $this-&gt;connection-&gt;prepare($sql);
    $statement-&gt;bind_param($types, ...$params);
    $stmt-&gt;execute();
    return $stmt;
}
</code></pre>
<p>this function does a lot of good stuff:</p>
<ul>
<li><p>it lets you to run a query that doesn't support prepared statements</p>
</li>
<li><p>it does no harm automatically sniffing the variable's type</p>
</li>
<li><p>at the same time it lets you to provide a type string manually, like</p>
<pre><code>  $conn-&gt;execute('INSERT INTO songs VALUES (?, ?, ?)', ['foo', 'bar', 1], "ssi");
</code></pre>
</li>
</ul>
<p>I also removed an argument unpacking operator from the function definition as it makes no sense. Trust me, it takes <strong>no effort</strong> to add two square brackets around parameters, but it makes your code WAY cleaner and more maintainable.</p>
<h3>Closing statements</h3>
<p>PHP is incredibly programmer-friendly. Resources don't have to be closed manually, they will be closed automatically when no longer needed.</p>
<h3>The code</h3>
<pre><code>&lt;?php

final class MySQLiConnection
{
    public $connection;

    public function __construct($config)
    {
        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
        try {
            $this-&gt;connection = new mysqli('localhost', 'id', 'password', 'database');
            $this-&gt;connection-&gt;set_charset('utf8');
        } catch (\mysqli_sql_exception $e) {
            throw new \mysqli_sql_exception($e-&gt;getMessage(), $e-&gt;getCode());
        }
    }

    public function execute(string $sql, $params = [], $types = '') : mysqli_stmt
    {
        if (!$params) {
            return $this-&gt;connection-&gt;query($sql);
        }
        $types = $types ?: str_repeat("s", count($params));
        $statement = $this-&gt;connection-&gt;prepare($sql);
        $statement-&gt;bind_param($types, ...$params);
        $statement-&gt;execute();
        return $statement;
    }

    public function getResult(string $sql, $params = [], $types = '') : mysqli_result
    {
        return $this-&gt;execute($sql, $params, $types)-&gt;get_result();
    }
}
</code></pre>
<p>As you can see, the final code is much more concise, thanks to code reuse and proper error reporting.</p>
<p>I also made $connection variable public, as there is no more getConnection() function but you will need to access it from outside for sure.</p>
<p>An exception is caught in the constructor because of security concerns. A stack trace for the exception thrown in case of a connection error would contain the database credentials that will end up either in the server logs or - the worst case - displayed on the screen. Once re-thrown this way, credentials are no more exposed. So although as a rule you don't catch an Exception right in place, here it's a special case to take care of.</p>
    </div>