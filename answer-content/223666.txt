<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The Algorithm</h1>
<p>This has a bad worst-case complexity,</p>
<pre><code>for (int i = first; i &lt;= last; i++) {
    for (int index = d.indexOf(genes.get(i)); index &gt;= 0; index = d.indexOf(genes.get(i), index + 1)) {
        sum += Integer.parseInt(health.get(i));
    }
}
</code></pre>
<p>Consider a strand <code>"aaaaaaaaaaaaaaaaaaaaaaa"</code> and genes <code>{"aaaaa", "aaaaa" ...</code></p>
<p>Now for every gene, at almost every position of the strand, there will be a string comparison. The amount of character comparisons is approximately <code>TotalSize(genes) * strand.length</code>, so that can easily lead to a TLE if the data is a little annoying, which of course it will be.</p>
<p>Here are a couple of other techniques you could try,</p>
<ul>
<li>Building a suffix array and LCP array for the strand, so for every gene the number of occurrences in the strand can be counted in <code>O(geneLength + log strandLength)</code> (so without even visiting the occurrences!) by binary-searching for the start and end of the contiguous range in the SA that contains all those occurrences. A suffix trie is good as well but more dangerous for the memory footprint. SA and suffix trie can both be constructed in linear time (in the length of the string), but it is non-trivial to implement. The LCP array can be given as a secondary result of SA construction (depending on the algorithm) or otherwise created in linear time as well by using the SA.</li>
<li>Building a trie with the healthy genes, then go over the strand while descending down the trie, backing up as needed. This has a bunch of edge-cases that need to be considered. There are slow cases, for example if a gene is very big (half the length of the strand) and matches nearly everywhere (for example if the strand and gene are both only the same character), which I think is still a quadratic case. Some additional trickery may be able to work around that.</li>
</ul>
<p>The solutions that I could find quickly seemed to use the second approach, but I think the first one would be a "safer" choice in terms of avoiding a quadratic worst-case complexity, though the second one seems useful enough in practice (it has been successfully used, after all).</p>
<h1>Unnecessary Map</h1>
<p>When the keys of a map are a dense and non-changing range of integers like this,</p>
<pre><code>Map&lt;Integer, String&gt; genes = new HashMap&lt;&gt;();
for (int i = 0; i &lt; n; i++) {
    genes.put(i, genesItems[i]);
}
</code></pre>
<p>Using an <code>ArrayList</code> or plain array is a little more efficient and maybe more convenient (the array <code>genesItems</code> is already available anyway). Though of course this does not significantly contribute to TLEs in competitive programming.</p>
<p>The skeleton code under the problem uses arrays.</p>
<h1>Avoid re-parsing</h1>
<p>The inner loop contains <code>Integer.parseInt(health.get(i))</code>, but that should usually be done up front when reading in the problem data. The skeleton code under the problem parses up front.</p>
    </div>