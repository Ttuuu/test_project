<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Other answers focus nicely on the comparison function, so I'll just mention a couple things about the start of main.</p>

<p>What does this do when you run the program with no arguments?</p>

<pre><code>printf("\nFile 1 is: %s", argv[1]);
printf("\nFile 2 is: %s\n", argv[2]);
</code></pre>

<p>You can't check <code>argv[1]</code> or <code>argv[2]</code> if there are not enough arguments.  However, you do check that immediately after, so you can just cut-paste them a few lines down.</p>

<pre><code>int main(int argc, char *argv[])
{
    double cpu_time_taken;
    FILE *fp1, *fp2;
    printf("\nArgument count:  %d", argc);

    if (argc &lt; 3)
    {
        printf("\nInsufficient Arguments: \n");
        printf("\nHelp:./executable &lt;filename1&gt; &lt;filename2&gt;\n");
        return 0;
    }
    else
    {
        printf("\nFile 1 is: %s", argv[1]);
        printf("\nFile 2 is: %s\n", argv[2]);
        fp1 = fopen(argv[1],  "rb");
        //...
    }
}
</code></pre>

<p>You can simplify it further still - your <code>else</code> is unnecessary because the <code>if</code> terminates the program, so it won't run the content of the <code>else</code> regardless. I find it easier to read when there are fewer indentations, but maybe that's just me. Also, the <code>if</code> catches an error in running the program, and informs the user. If this is being called from a script, you'd want to return something other than 0, because 0 indicates success. So you can make one more simplification:</p>

<pre><code>int main(int argc, char *argv[])
{
    double cpu_time_taken;
    FILE *fp1, *fp2;
    printf("\nArgument count:  %d", argc);

    if (argc &lt; 3)
    {
        printf("\nInsufficient Arguments: \n");
        printf("\nHelp:./executable &lt;filename1&gt; &lt;filename2&gt;\n");
        return 1;
    }

    printf("\nFile 1 is: %s", argv[1]);
    printf("\nFile 2 is: %s\n", argv[2]);
    fp1 = fopen(argv[1],  "rb");
    //...

}
</code></pre>

<p>I echo the advice in other answers about putting the newline at the end of your print, rather than before.</p>
    </div>