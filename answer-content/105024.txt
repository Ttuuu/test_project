<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Also, I sense that running time should be logarithmic but how to derive that exactly seems quite tough.</p>
</blockquote>

<p>Nope, running time is <span class="math-container">\$ O(\sqrt N) \$</span> worst-case. Consider the case of a prime number (or particularly bad cases, like the product of twin primes). You have to check <span class="math-container">\$ \sqrt N \$</span> possible values to find the answer. No way around that.</p>

<hr>

<p>Code-wise, you have a bug, only minor/trivial comments otherwise. First the bug. The issue is here:</p>

<pre><code>return factor
</code></pre>

<p>What is <code>factor</code> at the end? It's just the first number whose square is larger than whatever <code>num</code> has become. It's not necessarily a <code>factor</code> of the original value. It's just an index. As an example, <code>max_factor(8) == 3</code>, <code>max_factor(9) == 4</code>, etc. You need to keep track of which of the attempted factors <em>actually are</em> factors. Something like:</p>

<pre><code>def max_factor(num):
    """Find the maximum prime factor."""
    best = None
    factor = 2 
    while factor * factor &lt;= num:
        while num % factor == 0:
            best = factor
            num /= factor
        factor += 1
    if (num &gt; 1): 
        return num 
    return best
</code></pre>

<hr>

<p>As others have pointed out, you don't do input validation. I don't really consider that hugely important here and it's perfectly fine to just require that the user passes reasonable numbers in. But it couldn't hurt to just make that explicit:</p>

<pre><code>def max_factor(num):
    """Find the maximum prime factor."""
    assert num &gt;= 2
    ...
</code></pre>

<p>Otherwise, you have a counting loop with a non-trivial condition. This is one of those things that's always annoying to express in Python. In C or C++, that'd be:</p>

<pre><code>for (factor=2; factor*factor &lt;= num; ++factor) { ... }
</code></pre>

<p>and we have everything on one line. In Python, we have three options, none of which I'm thrilled about. Yours:</p>

<pre><code>factor = 2
while factor * factor &lt;= num:
    ...
    factor += 1
</code></pre>

<p>Using <a href="https://docs.python.org/2/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a>:</p>

<pre><code>for factor in itertools.count(start=2):
    if factor * factor &gt; num: break
    ...
</code></pre>

<p>Using <a href="https://docs.python.org/2/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile</code></a> <em>and</em> <code>count()</code>:</p>

<pre><code>for factor in itertools.takewhile(lambda f: f*f &lt;= num, itertools.count(start=2)):
    ...
</code></pre>

<p>Yeah, even if we put everything on one line, I'm not sure that helps any. Meh.</p>

<p>Lastly, factor-checking. The factors you are checking, in order, are:</p>

<pre><code>2, 3, 4, 5, 6, 7, 8, ...
</code></pre>

<p>That is pretty inefficient. First, once you check <code>2</code>, you don't need to check any of the even numbers. Similarly for <code>3</code> and multiples of 3. A more efficient check would be:</p>

<pre><code>2, 3 then 5, 7, 11, 13, 17, 19, 23, ... 
</code></pre>

<p>Basically alternating adding 2 and 4 from then on out. We end up with just odd numbers that aren't multiples of 3. So we only have to check 2 numbers out of every 6. We could write a generator for that:</p>

<pre><code>def potential_factors(num):
    yield 2
    yield 3

    fact = 5
    incr = 2
    while fact * fact &lt;= num:
        yield fact
        fact += incr
        incr ^= 6
</code></pre>

<p>Which we can use:</p>

<pre><code>def max_factor_mine(num):
    assert num &gt;= 2

    def potential_factors():
        yield 2
        yield 3

        fact = 5 
        incr = 2 
        while fact * fact &lt;= num:
            yield fact
            fact += incr
            incr ^= 6

    best = None
    for factor in potential_factors():
        while num % factor == 0:
            best = factor
            num /= factor

    return num if num &gt; 1 else best
</code></pre>

<hr>

<p>That's about as good as you're going to get with this approach. If you want better performance, you'd have to get a different algorithm. In <a href="https://codereview.stackexchange.com/a/104386/31292">this answer</a>, I show an approach with <a href="https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm" rel="nofollow noreferrer">Pollard's rho</a>, which would give a dramatic performance improvement just by doing something completely different:</p>

<pre><code>+---------------------+----------+--------------------+---------+
|                     | OP       | OP w/fewer factors | Pollard |
+---------------------+----------+--------------------+---------+
| 600851475143        |  0.003s  |  0.002s            |  0.092s |
| 145721 * 145723     |  0.298s  |  0.174s            |  0.018s |
| 1117811 * 1117813   |  2.286s  |  1.331s            |  0.262s |
| 18363797 * 18363799 | 40.379s  | 21.895s            |  0.825s |
+---------------------+----------+--------------------+---------+
</code></pre>
    </div>