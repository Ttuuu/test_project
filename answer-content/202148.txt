<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the fine answers by cariehl and Jerry Coffin, here's what I can offer:</p>

<h2>Call the other constructor properly</h2>

<pre><code>List::List(const int x) {
    List();
    insert(x);
}
</code></pre>

<p>The code above creates a new object on the stack, calls the 0-argument constructor on it, and discards the object. Instead, what you want to do is call the 0-argument constructor on <strong>this</strong> object:</p>

<pre><code>List::List(const int x) : List() {
    insert(x);
}
</code></pre>

<h2>Size type</h2>

<pre><code>unsigned short length();
</code></pre>

<p>Why are you returning unsigned short? It is a rare type with not many good reasons to use it. If you're lazy, return <code>int</code>. If you want to be correct, return <code>std::size_t</code> (defined in <code>cstddef</code>).</p>

<p>On the same topic, in the implementation of <code>length()</code> you are using <code>short</code> as the counter variable, but returning <code>unsigned short</code>. This technically isn't wrong, but is a code smell.</p>

<pre><code>unsigned short List::length() {
    short c = 0;
    (...)
    return c;
}
</code></pre>

<h2><a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" rel="nofollow noreferrer">Aggregate initialization</a></h2>

<p>You can simplify the code for creating and initializing new <code>Node</code> structs:</p>

<pre><code>head = new Node;
head-&gt;x = x;
head-&gt;next = nullptr;
head-&gt;prev = nullptr;
</code></pre>

<p>The above can simplify to:</p>

<pre><code>head = new Node{x, nullptr, nullptr};
</code></pre>

<p>This occurs in 4 places in your code.</p>
    </div>