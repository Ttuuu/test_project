<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>.Case(2, EqualsTwoMethod)
.CaseWhen(i &lt;= 0, NullOrNegativeMethod)
</code></pre>

<p>For consistency's sake, I'd suggest to always keep using the predicate:</p>

<pre><code>.CaseWhen(i =&gt; i == 2, EqualsTwoMethod)
.CaseWhen(i =&gt; i &lt;= 0, NullOrNegativeMethod)
</code></pre>

<p>It seems a bit counterintuitive that you'd create a custom method for equality checks, but then use a much broader predicate that handles basically any other boolean evaluation.</p>

<hr>

<p>The biggest issue I have here is that you're not leveraging OOP. Your current usage suggests that you rebuild a new <code>Switch</code> every time you wish to use it for execution. But since the entire switch is built using constant or hardcoded expressions, it makes no sense to have to rebuild it every time.</p>

<p>While I do understand that you're trying to mimic the syntax of an actual <code>switch</code> as closely as possible, this is going to cause performance issues in iterative loops. Simply put:</p>

<pre><code>for(int i = 0; i &lt; 10; i++)
{
    Switch(i)
        .Case(1, EqualsOneMethod)
        .Case(2, EqualsTwoMethod)
        .CaseWhen(i &lt;= 0, NullOrNegativeMethod)
        .Default(DefaultMethod);
}
</code></pre>

<p>You will have instantiated 10 <code>Switch</code> objects.</p>

<p>Instead, how about you create your <code>Switch</code> case once and then reuse it? The only difference is that you then have to pass <code>myInt</code> <em>after</em> you've created the switch:</p>

<pre><code>var mySwitch = (new Switch&lt;int&gt;())
                .CaseWhen(i =&gt; i == 1, EqualsOneMethod)
                .CaseWhen(i =&gt; i == 2, EqualsTwoMethod)
                .CaseWhen(i =&gt; i &lt;= 0, NullOrNegativeMethod)
                .Default(DefaultMethod);

for(int i = 0; i &lt; 10; i++)
{
    mySwitch.EvaluateFor(i);
}
</code></pre>

<p>This means that you first build your switch (once), and then reuse it as many times as you need. This leverages OOP much better because you are not consuming and releasing switch objects for every single check you want to do.</p>
    </div>