<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very interesting task. Good work on doing it. Here are some criticism. </p>

<hr>

<blockquote>
<pre><code>print('If your integer is a negative, the script will ask.')
print("DO NOT GIVE -X integers for input!!!")
print('Script will output multiple - symbols for a negative integer transformation')
</code></pre>
</blockquote>

<ul>
<li>Do not use both double quote
(<code>""</code>) and single quote (<code>''</code>) strings. Pick one. I personally prefer <code>""</code>.</li>
</ul>

<blockquote>
<pre><code>while 0 == 0:
  ask = input('Enter an integer from a subset-sum instance sequentially.')
</code></pre>
</blockquote>

<ul>
<li>It's considered a best practice to indent using 4 spaces instead of 2.</li>
<li>Also it would be better to move actual transform functionality to a new function.</li>
<li>Also it's better to use <code>while True</code> instead of <code>while 0 == 0</code> to indicate a endless loop.

<ul>
<li><strong>Reason:</strong> This is more readable. </li>
</ul></li>
</ul>

<blockquote>
<pre><code>  askStr = str(ask)
  res = list(map(int, str(askStr))
</code></pre>
</blockquote>

<ul>
<li>You are converting <code>ask</code> twice to a string. This is redundant. </li>
<li>Since <code>input()</code> returns a string you don't need to convert this at all.</li>
<li>It is also a better to use python conventions for names. Ex: <code>ask_str</code> or <code>value</code></li>
</ul>

<blockquote>
<pre><code>  x = (res)
</code></pre>
</blockquote>

<ul>
<li>You don't need parenthesis here. </li>
<li>There is also no need to assign to <code>x</code> you can directly use <code>res</code>.</li>
</ul>

<blockquote>
<pre><code>  if asktwo == str("y"):
     twinkle = str('-')
  else:
     twinkle = str(" ")
</code></pre>
</blockquote>

<ul>
<li>You don't need to convert a string literal to a string again.</li>
<li>You can directly use <code>"y"</code> as a string.</li>
<li><code>twinkle</code> is not a good name. Use something like <code>sign</code>. </li>
</ul>
    </div>