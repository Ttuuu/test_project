<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style critique</h2>

<p>Either terminate your statements consistently with semicolons, or not at all.</p>

<p>If you're going to use <code>const</code> to define the function, then I suggest using the arrow notation as well, instead of the <code>function</code> keyword.</p>

<p>The variable names could be improved:</p>

<ul>
<li>Why is the function's parameter called <code>array</code>?  It's clearly supposed to be a number.</li>
<li>After splitting the digits, what does <code>array</code> mean, and what does it contain?  I'd rename it to <code>digits</code>.</li>
<li>What are the <code>buckets</code>?  I suggest renaming it to <code>lastIndex</code>.</li>
<li>Instead of <code>location</code> and <code>current_location</code>, I'd just use <code>i</code>, which is a conventional variable name to use for an array index.  (Also, the underscore is unconventional in JavaScript.)</li>
<li><code>largest</code> doesn't remain the largest digit of the number.  Perhaps <code>wantDigit</code> would be a better name, since it's the digit that we would like to put at the current index, if possible.</li>
</ul>

<p>The nastiest line of code is the one where you perform the swap:</p>

<blockquote>
<pre><code>array[current_location] = [array[buckets[largest]], array[buckets[largest]] = array[current_location]][0]
</code></pre>
</blockquote>

<p>A better way to do parallel assignment would be to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring assignment</a>:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>let array = ['a', 'b', 'c'];
[array[0], array[2]] = [array[2], array[0]];
console.log(array);</code></pre>
</div>
</div>


<p>But here, you don't even need to do parallel assignments, because you have already stored the values to be swapped in other variables:</p>

<ul>
<li><code>array[buckets[largest]]</code>, as an rvalue, is just <code>largest</code>.  (With the renamings I proposed above, it would have been <code>digits[lastIndex[wantDigit]]</code>, which might make it more obvious that it's actually just <code>wantDigit</code>.)</li>
<li><code>array[current_location]</code>, as an rvalue, is just <code>current_val</code>.</li>
</ul>

<p>So, just write two simple and clear assignment statements instead.</p>

<p>If no swap occurred, then you can just return the original number.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const maximumSwap = (number) =&gt; {
    let digits = number.toString().split('');
    let lastIndex = [];
    for (let i = 0; i &lt; digits.length; i++) {
        lastIndex[digits[i]] = i;
    }
    let wantDigit = lastIndex.length - 1;
    for (let i = 0; i &lt; digits.length; i++) {
        for (let iDigit = digits[i]; iDigit &lt; wantDigit; wantDigit--) {
            if (i &lt; lastIndex[wantDigit]) {
                digits[i] = wantDigit;
                digits[lastIndex[wantDigit]] = iDigit;
                return +digits.join('');
            }
        }
    }
    return number;
};

console.log(maximumSwap(99739));
console.log(maximumSwap(9273));
console.log(maximumSwap(9732));</code></pre>
</div>
</div>


<h2>Complexity analysis</h2>

<p>Your algorithm is pretty efficient, and I couldn't find any significant optimizations to make.</p>

<p>Be careful to specify what you mean by "n".  You probably used it to mean the length of the input number.  (If I had to choose my conventions, I'd say instead that the input number itself is <em>n</em>, and its length is <em>d</em> = log<sub>10</sub> <em>n</em>.)</p>

<p>Creating the buckets takes O(<em>n</em>) time, because <code>location</code> loops up to <code>array.length</code>.  But I would say that it takes O(1) space, since the length of <code>buckets</code> will not exceed 10.</p>

<p>Walking the values clearly takes more than O(1) time, because the outer loop is O(<em>n</em>): <code>current_location</code> iterates up to <code>array.length</code>.  The inner loop, which executes at most 10 times, can be said to take O(1) time.</p>

<p>Altogether, then, the algorithm takes O(<em>n</em>) time and O(1) space.</p>
    </div>