<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the improvements by @trincot. Another improvement would be to use constants instead of numbers, makes it easier to understand and change instead of using magic numbers scattered in the code. And the f-syntax is nice, but I don't want to install Python 3.6 on my Debian machine, it still runs Python 3.5 and might break things. And I might need the word later for other things as well, and it makes the intention more clear that it is a 16 bit word, so I kept my extra word calculation. And no need to collect all lines in a string, this was just a side product of my solution to avoid multiple lines with resetting the current line and then printing it.</p>

<p>My final code:</p>

<pre><code>max_lines = 32
words_per_line = 16
step = 16
line_length = words_per_line * step
length = min(max_lines * line_length, len(data))
for line in range(0, length, line_length):
    items = []
    for i in range(line, min(line + line_length, length), step):
        d = data[i] + (data[i + 1] &lt;&lt; 8)
        items.append("%04x" % d)
    print(" ".join(items))
</code></pre>

<p>Will be used for my <a href="https://github.com/FrankBuss/adc4" rel="nofollow noreferrer">ADC4 project</a>, which returns 16 bytes per sample, which is the reason for the big step.</p>
    </div>