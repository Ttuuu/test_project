<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is an example of using recursion, it stops soon after an instance is found, so doesn't iterate through the entire collection.</p>

<pre><code>&lt;?php
class Fish {}
class Mammal {}
class Whale extends Mammal {}
class Human extends Mammal {}
class Shark extends Fish {}

function anyFish($collection)
{
    $found = false;
    rFish($collection, $found);

    return $found;
}
function rFish(array $collection, &amp;$found)
{   
    if($found)
        return;
    foreach($collection as $item)
    {
        if(is_array($item))
        {
            rFish($item, $found);
        }
        elseif($item instanceof Fish)
        {
            $found = true;
            break;
        }
    }
}
$seas = [
    'pacific'  =&gt; [new Whale, new Whale, new Shark, new Whale],
    'atlantic' =&gt; [new Human, new Shark]
];

$pub = [new Human, new Human];

var_dump(anyFish($seas));
var_dump(anyFish($pub));
</code></pre>

<p>Output:</p>

<pre><code>bool(true)
bool(false)
</code></pre>

<p>@mickmackusa distilled the recursive function beautifully.</p>

<p>I'm adding my generalised solution here:</p>

<pre><code>function hasInstance(array $collection, $class)
{
    foreach($collection as $item)
        if(is_array($item) &amp;&amp; hasInstance($item, $class) || $item instanceof $class)
            return true;

    return false;
}
</code></pre>

<p>A call would be like:</p>

<pre><code>hasInstance($seas, Fish::class);
</code></pre>
    </div>