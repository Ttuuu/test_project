<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General things</h2>

<p>Please use two lines for template class declarations:</p>

<pre><code>template&lt;class T&gt; class my_list {
// Do this
template&lt;class T&gt;
class my_list
{                     // In nearly all other cases I am fine with the
                      // { being on the same line. But class and function
                      // declarations you just need the little bit of extra
                      // white space.
</code></pre>

<p>I worry about you not using braces <code>{}</code> after <code>if/while/for</code> expressions. </p>

<h2>Code Review</h2>

<p>I would make the <code>node</code> class a private member of the list.</p>

<pre><code>template&lt;class T&gt; class node {
</code></pre>

<p>There is no need to create a globally accessable type that must be maintained if you don't need to. Hide implementation details so they don't need to be maintained. </p>

<hr>

<p>If you put it (<code>node</code>) inside list and also <code>iterator</code> is a class inside list. Then you can simply make <code>node</code> a structure. Then all this friendship becomes redundant.</p>

<pre><code>    friend class my_list&lt;T&gt;;
    friend class my_bidirectional_iterator&lt;node&lt;T&gt;,T*,T&amp;&gt;;
    friend class my_bidirectional_iterator&lt;node&lt;T&gt;,const T*,const T&amp;&gt;;
</code></pre>

<hr>

<p>Pre-(Increment/Decrement) usually return references.</p>

<pre><code>        my_bidirectional_iterator operator++();
        my_bidirectional_iterator operator--();

        // I would have done this.
        my_bidirectional_iterator&amp; operator++();
        my_bidirectional_iterator&amp; operator--();
</code></pre>

<hr>

<p>It is a requirement of bi-directional iterators that they are default constructible. </p>

<pre><code>    private:
        explicit my_bidirectional_iterator(Value* p=0):pos_(p) {}
</code></pre>

<p>Making this private and not having a default constructor does not allow this. As this becomes your default constructor.</p>

<hr>

<p>This is old school</p>

<pre><code>        typedef my_list_iterator&lt;T&gt; iterator;
</code></pre>

<p>More modern:</p>

<pre><code>        using iterator = my_list_iterator&lt;T&gt;;
</code></pre>

<hr>

<pre><code>        // constructors
        // copy constructor
        // assignment operator
        // destructor
</code></pre>

<p>No move <code>Move Constructor</code> or <code>Move Assignemtn</code>?</p>

<pre><code>        my_list(my_list&amp;&amp; move);
        my_list&amp; operator=(my_list&amp;&amp; move);
</code></pre>

<hr>

<pre><code>        // iterators
        iterator       begin();
        iterator       end();
        const_iterator begin() const;  // These can be marked cost.
        const_iterator end()   const;  // So they can be used from a const context.
</code></pre>

<p>There are a couple more you are missing.</p>

<pre><code>        // Ability to force const_iterators even in a non const context.
        const_iterator                cbegin()  const;
        const_iterator                cend()    const;

        // The reverse versions of all the above.
        std::reverse&lt;iterator&gt;        rbegin();
        std::reverse&lt;iterator&gt;        rend();
        std::reverse&lt;const_iterator&gt;  rbegin()  const;
        std::reverse&lt;const_iterator&gt;  rend()    const;
        std::reverse&lt;const_iterator&gt;  crbegin() const;
        std::reverse&lt;const_iterator&gt;  crend()   const;
</code></pre>

<hr>

<p>Similar to move construction of the list. You should be able to move data into the list.</p>

<pre><code>        iterator insert(iterator,T const&amp;);
        iterator insert(iterator,T&amp;&amp;);       // The move version.
        // if you are brave you can also try the emplace
        template&lt;typename... Args&gt;
        iterator emplace(Args...&amp;&amp; val);
</code></pre>

<hr>

<p>Some for <code>push_X()</code> as for insert.</p>

<pre><code>        void push_back(const T&amp; t) {insert(end(),t);}
        void push_front(const T&amp; t) {insert(begin(),t);}
</code></pre>

<hr>

<p>The check for <code>(this!=&amp;rhs)</code> is a false optimization. Its actually a pesimization of the normal path.</p>

<p>First Note. Yes we should handle self assignment. But we should note it is exceedingly rare and barely ever happens. In most normal code this will never happen. So you are effectively making the normal path slightly less effecient.</p>

<pre><code>template&lt;class T&gt; my_list&lt;T&gt;&amp; my_list&lt;T&gt;::operator=(const my_list&amp; rhs)
{
    if (this!=&amp;rhs)
    {
        clear();
        create(rhs.begin(),rhs.end());
    }
    return *this;
}
</code></pre>

<p>This is so common that this is a C++ <code>idiom</code>. It is called the <code>Copy and Swap Idiom</code> (it will turn up when you google it).</p>

<pre><code>my_list&lt;T&gt;&amp; my_list&lt;T&gt;::operator=(my_list const&amp; rhs)
{
    my_list  copy(rhs);
    copy.swap(*this);
    return *this;
}
</code></pre>

<p>In this case we always make a copy. Which you have to do anyway in normal circumstances. But there is no branch (so no CPU pipeline stalls) and no expression test. It also defines the copy assignment in terms of the copy constructor so you only need to get that correct.</p>

<hr>

<p>Uneeded test for zero size. It just makes the code more complicated and achieves nothing.</p>

<pre><code>template&lt;class T&gt; void my_list&lt;T&gt;::clear()
{
    if (size_!=0)
    {
        node&lt;T&gt;* first = head_;
        while (first!=0)
        {
            node&lt;T&gt;* next = first-&gt;next;
            delete first;
            first = next;
        }
    }
    head_=tail_=0;
    size_=0;
}
</code></pre>

<p>Also you should not use <code>0</code> as a pointer value. Use <code>nullptr</code> it is type safe and makes the code easier to read as you are being explicit about using pointers.</p>

<hr>

<p>Yes there is a bug in this.</p>

<pre><code>my_list&lt;T&gt;::insert(iterator pos,const T&amp; t)
</code></pre>

<p>There are potentially two calls to <code>new</code> but only one element is added to the list so you are leaking <code>p</code> sometimes.</p>

<p>Also if <code>pos</code> does not have a node is it not the end of the list so you should be adding it to the `tail not the head?</p>

<p>You also need a special case for the empty list.</p>

<hr>

<p>Comment inline</p>

<pre><code>template&lt;class T&gt; typename my_list&lt;T&gt;::iterator my_list&lt;T&gt;::erase(iterator pos)
{
    node&lt;T&gt; *p = pos.pos_;
    // I suppose it is illegal to erase the end iterator.

    if (p-&gt;next!=0)
        p-&gt;next-&gt;prev = p-&gt;prev;
    else {
        tail_ = p-&gt;prev;
        // Don't we also need to remove the next item from the list.
        tail-&gt;next = nullptr
    }

    if (p-&gt;prev!=0)
        p-&gt;prev-&gt;next = p-&gt;next;
    else
        head_ = p-&gt;next;
        // If you delete the last node don't you have to reset tail as well?
</code></pre>

<hr>

<p>I am not sure I would have a create.</p>

<pre><code>template&lt;class T&gt; void my_list&lt;T&gt;::create()
{
    head_=tail_=0;
    size_ = 0;
}
</code></pre>

<p>I would have a default constructor set these to <code>nullptr</code> and <code>0</code> respectively. Then you can chain the default constructor from the copy/move constructor.</p>

<pre><code>    my_list()
        : head(nullptr)
        , tail(nullptr)
        , size(0)
    {}

    explicit my_list(size_type n,const T&amp; t=T())
         : my_list()
    {
        resize(n, T);
    }

    my_list(const my_list&amp; rhs)
          :mylist()
    {
        for (size_type i=0;i!=n;++i)
            push_back(t);
    }
</code></pre>
    </div>