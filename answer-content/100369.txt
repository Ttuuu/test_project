<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whenever you're dealing with collections in C#, there's often a simple Linq solution.</p>

<p>Instead of using a Hashtable or Dictionary to group together and count each occurrence, use the <code>.GroupBy</code> method on the integers. This makes each integer a key with a list of values for each occurrence.</p>

<p>Then all you need to do to find the largest is to order by occurrence and take the first result. Using Linq's <code>.OrderByDescending</code> and <code>.First</code> methods do this for you.</p>

<pre><code>static void CommonOccurrence(int[] numbers)
{
    var groups = numbers.GroupBy(x =&gt; x);
    var largest = groups.OrderByDescending(x =&gt; x.Count()).First();
    Console.WriteLine("The most common number is {0} and it appears {1} times", largest.Key, largest.Count());
}
</code></pre>

<hr>

<p>If you wanted to take the same approach without relying on Linq to group and sort for you, you can make separate methods for each action you need to perform, as per the Single Responsibility Principle:</p>

<pre><code>static void CommonOccurrence(int[] numbers)
{
    var dictionary = GroupByOccurrence(numbers);
    var mostCommonNumber = KeyOfLargestValue(dictionary);
    var occurrences = dictionary[mostCommonNumber];
    Console.WriteLine("The most common number is {0} and it appears {1} times", mostCommonNumber, occurrences);
}

static Dictionary&lt;int, int&gt; GroupByOccurrence(int[] numbers)
{
    var result = new Dictionary&lt;int, int&gt;();
    foreach (int i in numbers)
    {
        if (!result.ContainsKey(i))
        {
            result[i] = 0;
        }
        result[i]++;
    }
    return result;
}

static int KeyOfLargestValue(Dictionary&lt;int, int&gt; dictionary)
{
    int result = dictionary.Keys.First();
    foreach (var entry in dictionary)
    {
        if (entry.Value &gt; dictionary[result])
        {
            result = entry.Key;
        }
    }
    return result;
}
</code></pre>
    </div>