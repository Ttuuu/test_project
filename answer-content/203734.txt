<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Hi All - Code Updated</strong></p>

<p>I have seen some pretty good feedback, whilst I wasnt entirely satisfied with my first draft (which was already submitted to the employer). I decided to re-write my code yesterday.</p>

<p>I have also read some of your feedback and also applied it to my updated code, you will notice I have not copied anything you guys have posted, but rather seen your methods and tried to apply it to my new script.</p>

<p>It gets rid of the overcomplex javascript objects, which even I felt was overkill in an attempt to place some JS OOP in my example</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var arrColours = [], arrColourHexRGB = [], arrDecColourRGB = [];
var elOutput = ""; strAVGColour = "";

function funUpdateColours(blColourSelector = true){
	const arrColours = [];
	const elColourSelector = document.getElementsByName("colourSelector");
	const elColourTxt = document.getElementsByName("colourText");
	const elOutput = document.getElementById("avgSelector");
	const elOutputTxt = document.getElementById("avgText");
	for (i = 0; i &lt; elColourTxt.length; i++){
		if (blColourSelector){
			elColourTxt[i].value = elColourSelector[i].value;
		}else{
			elColourSelector[i].value = elColourTxt[i].value;
		}
		arrColours[i] = elColourTxt[i].value.replace("#", "");
	}
	arrColours.forEach((item, index) =&gt;	arrColourHexRGB[index] = item.match(/.{1,2}/g));
	arrColourHexRGB.forEach((item, index, array) =&gt; arrDecColourRGB[index]= funHexToDec(item, index));
	const strAVGColour = funGetAverageColour (arrDecColourRGB);
	elOutput.value = strAVGColour;
	elOutputTxt.value = strAVGColour;
}

function funHexToDec(arrRGB, index){
	let arrRGBFuncOutput = [];
	for (z = 0; z &lt; 3; z++){
		arrRGBFuncOutput[z] = parseInt(arrRGB[z], 16);
	}
	return arrRGBFuncOutput;
}

function funGetAverageColour(arrDecimalColours){
	let intR = 0, intG = 0, intB = 0;
	let strReturnValue = "";
	arrDecimalColours.forEach(function (item, index){
		intR = intR + item[0];
		intG = intG + item[1];
		intB = intB + item[2];
	});	
	intR = Math.ceil(intR / arrDecColourRGB.length);
	intR = funCheckHexOutput(intR);
	intG = Math.ceil(intG / arrDecColourRGB.length);
	intG = funCheckHexOutput(intG);
	intB = Math.ceil(intB / arrDecColourRGB.length);
	intB = funCheckHexOutput(intB);
	return strReturnValue = "#" + intR + intG + intB;
	
}
function funCheckHexOutput(strHex){
	strHex = strHex.toString(16);
	if (strHex.length &lt; 2){
		strHex = "0" + strHex;
	}
	return strHex;
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body{
	font-family: arial, helvetica;	
	margin: 0 auto
}
header{
	background: #000;
	color: #c0c0c0;
	font: 14pt arial;
	height: 2em;
	padding: 0.5em 0 0 0.5em;
	width: 100%
}
body{
	background: #444
}
input[type="text"]{
	width: 120px;
}
main{
	border-radius:10px;
	background: #AAA;
	left: 100px;
	padding: 30px;
	position: absolute;
	top: 25%;
	width: 360px
}
div#divOutputColour{
	background: #808080;
	border: 1px solid black;
	height: calc(100% - 60px);
	position: absolute;
	right: 30px;
	top: 30px;
	width: 100px
}
label#elAvgColourTxt::before{
	content: 'Average Colour: ';
}
span#spanOutputText{
	width: 100%
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!Doctype html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Average Colour Selector&lt;/title&gt;
		&lt;script src="js/colourSelector.js"&gt;&lt;/script&gt;
		&lt;link rel="stylesheet" href="css/colourSelector.css"&gt;
		&lt;meta charset="UTF-8"&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;header&gt;Return Mean Hex Colour Code&lt;/header&gt;
		&lt;main&gt;
			&lt;label&gt;Colour 1:&lt;/label&gt;&lt;input name="colourSelector" type="color" value="#FFFFFF" onchange="funUpdateColours(true)"&gt;&lt;input type=text value="#FFFFFF" name="colourText" onchange="funUpdateColours(false)" maxlength=7&gt;&lt;br&gt;
			&lt;label&gt;Colour 2:&lt;/label&gt;&lt;input name="colourSelector" type="color" value="#000000" onchange="funUpdateColours(true)"&gt;&lt;input type=text value="#000000" name="colourText" onchange="funUpdateColours(false)" maxlength=7&gt;&lt;br&gt;
			&lt;label&gt;Colour 3:&lt;/label&gt;&lt;input name="colourSelector" type="color" value="#000000" onchange="funUpdateColours(true)"&gt;&lt;input type=text value="#000000" name="colourText" onchange="funUpdateColours(false)" maxlength=7&gt;&lt;br&gt;
			&lt;label&gt;Colour 4:&lt;/label&gt;&lt;input name="colourSelector" type="color" value="#000000" onchange="funUpdateColours(true)"&gt;&lt;input type=text value="#000000" name="colourText" onchange="funUpdateColours(false)" maxlength=7&gt;&lt;br&gt;&lt;br&gt;
			&lt;label&gt;Average:&lt;/label&gt;&lt;input id="avgSelector" type="color" value="#808080" &gt;&lt;input type=text value="#808080" id="avgText" disabled&gt;
		&lt;/main&gt;
		
	&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>


<p>I was going to do a padding in that it prefixed "0" regardless and performed a substring that returned the first 2 characters from the right</p>

<p>Example in other languages such as ASP / VB right("0" + intB, 2) which would cut out the need for an if statement or inline if statement as the the values would become</p>

<p>2 digit Hex example: A9 becomes 0A9 = reading from right to left 2 chars = A9
1 digit Hex example: 5 becomes = 05 = reading from right to left 2 chars = 05</p>

<p><strong>Changes</strong></p>

<ul>
<li>Removed the Object </li>
<li>Removed the Error handling as re-wrote script</li>
<li>Redeveloped the HTML to allow for array of elements.</li>
</ul>

<p><strong>Feedback I adhered to</strong></p>

<ul>
<li><p>Added constant declarations</p></li>
<li><p>Used arrow functions</p></li>
<li><p>Padded the Hex values (valid bug I had not spotted during testing)</p></li>
<li><p>Used getElementById (and getElementByName) instead of querySelector</p></li>
</ul>

<p><strong>Disregarded feedback</strong></p>

<ul>
<li><p>Span Tag</p>

<p>Whilst the close span tag was valid feedback, it was an oversight due to last minute changes, I should of proof read my code before submitting it.</p></li>
<li><p>Lineal Average</p>

<p>Whilst I was impressed by this technique, it wasnt clear from the task spec that was what the recruiter wanted, I have however made a note, to trial the example out as I think its good knowledge to have for in the future.</p></li>
<li><p>EventListner</p>

<p>There was a suggestion for adding event handler for the on change over HTML triggered onchange event, whilst I appreciate where the suggestion was coming from, I was skeptical to use this, whilst it would of been fine for the demo / task, in general it would be bad practice (in my option) to run a function on every element change the webpage may undergo, which would risk the employer coming to the wrong conclusion that this is a method id adopt in general.</p></li>
<li><p>Naming conventions</p>

<p>My previous employer was keen that each variable is prefixed variable type abreviation in order to make the code more user friendly to read. <em>fun</em> for function, _st_r for string etc. I have to agree with my previous employer - it is handy to have. This includes detailing what the function does e.g.: <em>funReturnHex</em> gives a clear indication of what the function is going to do, even before you read the code or the developer has a clear understanding of what the function should do in the event of debugging code in the future.</p></li>
</ul>

<p><strong>Stuff I will add to my code later on</strong></p>

<ul>
<li><p>Tickbox to choose lineal average</p></li>
<li><p>The example shown on how to convert short HEX to full length (FFF to FFFFFF)</p></li>
</ul>

<p>I didnt have chance to fully study what it was doing, whilst I have a vague understanding, i didnt want to add it into my code until I have fully understood it, as I am not a fan of copy and pasting other peoples code, but rather prefer to understand what im implementing</p>
    </div>