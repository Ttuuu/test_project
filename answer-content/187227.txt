<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Soon after I posted this, I went for a walk and realized that this is the perfect opportunity to use <code>reduce</code>. I'm kind of embarrassed that I didn't see it originally, but this was my train of thought that lead me to what I'm much happier with.</p>

<p>First, I tried a simple reduction. This was pretty simple, although still a little verbose:</p>

<pre><code>(defn =?2 [&amp; args]
  (reduce (fn [acc n]
              (if (= n acc)
                n
                (reduced nil)))
          (first args)
          (rest args)))
</code></pre>

<p>I decided that this was probably simple enough to use a function macro for. Normally I don't like using them for reductions, but there's not much going on here:</p>

<pre><code>(defn =?3 [&amp; args]
  (reduce #(if (= % %2) % (reduced nil))
          (first args)
          (rest args)))
</code></pre>

<p>I don't like using explicit calls to <code>first</code> and <code>rest</code>, as I find they're usually neater when they're implicit in a deconstruction. I decided to deconstruct the arguments instead:</p>

<pre><code>(defn =?4 [&amp; [arg &amp; rest-args]]
  (reduce #(if (= % %2) % (reduced nil))
          arg
          rest-args))
</code></pre>

<p>Then I checked what <code>=</code> uses, and found that it just uses multiple argument lists, so I tried that. This strikes me as the more idiomatic solution:</p>

<pre><code>(defn =?5
  ([] nil)
  ([arg] arg)
  ([arg &amp; args]
   (reduce #(if (= % %2) % (reduced nil))
           arg
           args)))
</code></pre>

<p>I'm torn between 4 and 5, but I think that both are a significant improvement.</p>
    </div>