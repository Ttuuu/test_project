<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For just <code>Mass</code>, I would define some constants.</p>

<pre><code>public final static Mass kg = new Mass(1);
public final static Mass lb = new Mass(1/2.2, kg);
public final static Mass oz = new Mass(1/16.0, lb);
</code></pre>

<p>And define your conversions with the “to” (and “from”) units passed in.</p>

<pre><code>public double in(Mass unit) {
    return mass / unit.mass;
}

public static double convert(double quantity, Mass from, Mass to) {
    return quantity * from.mass / to.mass;
}
</code></pre>

<p>Of course, you’d need to remove the “set” members, and make the <code>Mass</code> a constant value class.</p>

<pre><code>private final double mass;

public Mass(double kg) {
    mass =  kg;
}

public Mass(double quantity, Mass unit) {
    mass = quantity * unit.mass;
}
</code></pre>

<p>New units just mean defining new class constants.</p>

<pre><code>Mass weight = new Mass( 100, Mass.kg );
double pounds = weight.in( Mass.lb );
double ounces = weight.in( Mass.oz );
</code></pre>

<p>As described in the comments, you could expand this to a complete unit calculator, if you tracked the power of each unit dimension in the quantity class.</p>
    </div>