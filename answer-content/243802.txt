<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're already doing a lot of things well; it's nice to see a question from someone who already knows the language and is looking for ways to get better.</p>
<ol>
<li><em>How should I write unit tests for checking the correctness of functions that calculate stats?</em><br>
Generally you'll want one (or a few) "happy path" unit tests: hard-code some sample data as part of the unit test, and assert that the result of the calculations is whatever you've confirmed it ought to be.<br>
You'll <em>also</em> want a couple failure tests, that check that your program <em>fails</em> when it <em>ought to</em> fail, for example if given malformed data.</li>
<li><em>How to make a function that prints output to work with an arbitrary list of fields, instead of a particular one?</em><br>
You're thinking of fields as strings. Sometimes you need that, but you'd also be well served by thinking of <em>fields as functions from a defined data structure to a contained datum or sub-structure</em>. A <code>dict</code> would be appropriate for converting from fields-as-names to fields-as-getters. Then you can just loop or use a comprehension or whatever.</li>
<li><em>Can I simplify calculate_team_stats()?</em><br>
Yes; the reason it's so unweildly now is because you're using a flat data structure, and you're relying too much on <code>dict</code>s. Dicts aren't great for structured data because they <em>have very little structure</em>. When you know the structure in advance, a tree of NamedTuples is often better.</li>
</ol>
<p>Other stuff:</p>
<ul>
<li>You're ready for <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">typing</a>. Type-hinted code is easier to reason about, both for you and for your IDE. I also recommend using <a href="https://mypy.readthedocs.io/en/stable/" rel="noreferrer">mypy</a> in parallel with your linter and unit tests to ensure your types are correct.</li>
<li>A function with type-hints will need fewer comments (often none) to be readable.</li>
<li>Break up your functions even smaller. For example making a <code>Game</code> from a csv row should be its own function, and then <code>csv_to_list_of_games</code> is quite short.</li>
<li>More generally, nest stuff more. This includes classes.</li>
<li>Rely even more on comprehensions.</li>
<li>Use a DictReader to parse the csv file, that way you're not relying on the order of the fields.</li>
<li>When a function takes a lot of args, try to avoid letting the order matter by passing them as keyword args.</li>
<li>Rely more on the libraries you're using, for example let datetime handle parsing for you.</li>
<li>We use lists a lot because they're flexible, but if a more constrained structure will do then use that. For example if you're going to get a <code>set</code> of teams, why turn it back into a list?</li>
<li>Do your data conversions when you parse the data, not later when you use it.</li>
</ul>
<p>I mocked out the parse-and-calculate half, and checked it with mypy. I didn't actually test it or attempt the filter-and-print half:</p>
<pre class="lang-py prettyprint-override"><code>import csv
import datetime
import itertools
from statistics import mean
from typing import Iterable, Mapping, NamedTuple, Set, Tuple

FILENAME = 'epl 18_19 games.csv'


class IntegerStats(NamedTuple):
    shots: int
    box_touches: int
    crosses: int
    corners: int
    goals: int
    x_goals: float


def sum_integer_stats(*stats: IntegerStats) -&gt; IntegerStats:
    return IntegerStats(  # This could be one line, but let's keep it verbose. 
        shots=sum(s.shots for s in stats),
        box_touches=sum(s.box_touches for s in stats),
        crosses=sum(s.crosses for s in stats),
        corners=sum(s.corners for s in stats),
        goals=sum(s.goals for s in stats),
        x_goals=sum(s.x_goals for s in stats)
    )


class RatioStats(NamedTuple):
    shots: float
    box_touches: float
    crosses: float
    corners: float
    goals: float
    x_goals: float


class Game(NamedTuple):
    date: datetime.date
    home_team: str
    home_stats: IntegerStats
    away_team: str
    away_stats: IntegerStats

    def teams(self) -&gt; Tuple[str, str]:
        return (self.home_team, self.away_team)


def row_to_game(row: Mapping[str, str]) -&gt; Game:
    return Game(
        date=datetime.datetime.strptime(row['Date'], '%d.%m.%Y').date(),
        home_team=row['Home'],
        home_stats=IntegerStats(shots=int(row['HomeShots']),
                                box_touches=int(row['HomeBT']),
                                crosses=int(row['HomeCrosses']),
                                corners=int(row['HomeCorners']),
                                goals=int(row['HomeGoals']),
                                x_goals=float(row['HomeXG'])),
        away_team=row['Away'],
        away_stats=IntegerStats(shots=int(row['AwayShots']),
                                box_touches=int(row['AwayBT']),
                                crosses=int(row['AwayCrosses']),
                                corners=int(row['AwayCorners']),
                                goals=int(row['AwayGoals']),
                                x_goals=float(row['AwayXG'])),
    )


def csv_to_list_of_games(filename: str) -&gt; Iterable[Game]:
    with open(FILENAME) as f:
        csv_reader = csv.DictReader(f)
        return [row_to_game(row) for row in csv_reader]


def get_teams_set(games: Iterable[Game]) -&gt; Set[str]:
    return set(itertools.chain.from_iterable(game.teams() for game in games))


def get_games_by_team(teamname: str, games: Iterable[Game]) -&gt; Iterable[Game]:
    return [game for game in games if teamname in game.teams()]


class TeamGameSetStats(NamedTuple):
    made: IntegerStats  # call it `made` because `for` is a python keyword.
    against: IntegerStats
    totals: IntegerStats
    ratios: RatioStats
    totals_per_game: RatioStats
    games: int


def team_gameset_stats(own_stats: Iterable[IntegerStats],
                       opposing_stats: Iterable[IntegerStats]
                       ) -&gt; TeamGameSetStats:
    made = sum_integer_stats(*own_stats)
    against = sum_integer_stats(*opposing_stats)
    totals = sum_integer_stats(made, against)
    game_count = len(list(itertools.chain(own_stats, opposing_stats)))
    return TeamGameSetStats(
        made=made,
        against=against,
        totals=totals,
        ratios=RatioStats(
            shots=made.shots / (made.shots + against.shots),
            box_touches=made.box_touches / (made.box_touches + against.box_touches),
            crosses=made.crosses / (made.crosses + against.crosses),
            corners=made.corners / (made.corners + against.corners),
            goals=made.goals / (made.goals + against.goals),
            x_goals=made.x_goals / (made.x_goals + against.x_goals)
        ),
        totals_per_game=RatioStats(
            shots=totals.shots / game_count,
            box_touches=totals.box_touches / game_count,
            crosses=totals.crosses / game_count,
            corners=totals.corners / game_count,
            goals=totals.goals / game_count,
            x_goals=made.x_goals / game_count
        ),
        games=game_count
    )


class TeamStats(NamedTuple):
    home: TeamGameSetStats
    away: TeamGameSetStats
    agregate: TeamGameSetStats


def team_stats(teamname: str, games: Iterable[Game]) -&gt; TeamStats:
    home_games = [g for g in games if g.home_team == teamname]
    own_home_stats = [g.home_stats for g in home_games]
    opposing_home_stats = [g.away_stats for g in home_games]
    away_games = [g for g in games if g.away_team == teamname]
    own_away_stats = [g.away_stats for g in away_games]
    opposing_away_stats = [g.home_stats for g in away_games]
    return TeamStats(
        home=team_gameset_stats(own_stats=own_home_stats, opposing_stats=opposing_home_stats),
        away=team_gameset_stats(own_stats=own_away_stats, opposing_stats=opposing_away_stats),
        agregate=team_gameset_stats(
            own_stats=own_home_stats + own_away_stats,
            opposing_stats=opposing_home_stats + opposing_away_stats
        )
    )


def calculate_team_stats(teams: Set[str], games: Iterable[Game]) -&gt; Mapping[str, TeamStats]:
    return {
        team: team_stats(team, games)
        for team in teams
    }
</code></pre>
    </div>