<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Four<sup>*</sup> letters to rule them all</h2>

<p>The Sieve of Eratosthenes is an algorithm which heavily relies on loops. Unfortunately, Python's convenient scripty nature comes at a cost: it's <a href="https://www.youtube.com/watch?v=EEUXKG97YRw" rel="noreferrer">not terribly fast</a> when it comes to loops, so it's best to <a href="https://www.youtube.com/watch?v=zQeYx87mfyw" rel="noreferrer">avoid them</a>.</p>

<p>However, this is not always possible, or one, like me in this case, is not so much into algorithms to transform them into another form. Enter <a href="http://numba.pydata.org/" rel="noreferrer">numba</a>. numba is a just-in-time compiler for Python code. The just-in-time compiler can transform plain Python code into "native" code for your system. So what are those magical four letters I was talking about? It's <code>@jit</code>. </p>

<p>This simple decorator and no further code changes brought the time for n = 100 000 000 from 36s down to about 3s on my machine. The larger test case did not work out to well with my 16GB RAM and some other things to do apart from Code Review.</p>

<pre class="lang-py prettyprint-override"><code>from numba import jit

@jit
def eratos_sieve(n:"find prime below this"=100000000):
    # ... the rest of your code here
</code></pre>

<p>You can also have a look at <a href="https://stackoverflow.com/a/3941967/5682996">this generator based implementation</a> of the algorithm presented on Stack Overflow. The implementation can benefit from just-in-time compilation as well. A quick test using the SO approach and <code>@jit</code> for the previous n brought the execution time down to just below 2s on the same machine as before.</p>

<h2>What numba cannot fix for you</h2>

<p>There are a few aspects with respect to style and idiomatic language features (often called pythonic code) that you have to/can improve yourself.</p>

<p>While </p>

<pre class="lang-py prettyprint-override"><code>number =10000000
def eratos_sieve(n:"find prime below this"=None):
    if not(n):
        n = number
    ...
</code></pre>

<p>might be working and syntactically valid, I find it very, very uncommon and would not recommend it. A more "pythonic" way to express this would be</p>

<pre class="lang-py prettyprint-override"><code>def eratos_sieve(n: int = 100000000):
    """Find all primes below a given whole number n"""
    ...
</code></pre>

<p>This makes use of Python 3's <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">type hinting</a> and the recommended way to write function documentation using <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="noreferrer">docstrings</a>.</p>

<p>The way you construct your candidate list using <code>numbers = [x for x in range(0, n+1)]</code> is also a little bit complicated, and may be simplified to <code>numbers = list(range(n+1))</code>. <code>0</code> is the implicit starting value for <code>range(...)</code> and since <code>range(...)</code> already returns a generator you can simply pass it to a list constructor and work with it.</p>

<p>You should also have a look at the official <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Style Guide for Python Code</a> (PEP8) and follow it's recommendations regarding <a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="noreferrer">whitespace within expressions and statements</a>.</p>

<p>If you intend to supply your testing code together with your function in a single script, wrap it in the well known <code>if __name__ == "__main__":</code> construct to ensure it is only run if your code is used as a script.</p>

<hr>

<p><sup>*</sup> Well not strictly speaking, but it's close.</p>
    </div>