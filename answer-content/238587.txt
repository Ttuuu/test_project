<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll not go into the C# coding part as much, as Jesse already covered that part.</p>

<p>It' not clear to me why any class should be called <code>Class1</code>. That a bad name. Even if it is just used for a particular function, then it should be named after this particular function.</p>

<p>It's not a good idea to have two instances <code>instance</code> and <code>Instance</code>.</p>

<hr>

<p>There is nothing to indicate that a new filename is generated, nor how it will be generated. And possibly that's a good thing, as none of it makes sense. The extension is not encrypted but encoded. The filename + extension is replaced by calling <code>replace</code>, which means that if the file + extension is present elsewhere that the function will fail. Furthermore, there are a lot of changes to extension and filename just to create it back again.</p>

<p>The key should be configurable, and not be in code. Keys are not strings, they should be bytes where the bytes are not predictable to an adversary. Strings cannot hold any byte value, and therefore the precondition fails. Even worse, if you use <code>Unicode</code> then you will get 2 bytes for each character. If those characters are common ASCII then one of those bytes will simply be valued zero. Basically you have about 33% of the key space left.</p>

<p>Even worse, people are terrible at creating strong passwords, so the amount of entropy and password space to search is likely to be low enough to make the scheme easy to break. If you want to use a password, then use e.g. PBKDF2, a salt and a high iteration count. As it is, your password will be easier to crack than single DES.</p>

<p>You are using the same key as IV. The key should never ever be used as IV. The IV is considered public, and the key is not. It is unlikely that the platform will even try to keep the IV a secret. For instance, such values are more likely to be kept unprotected in memory. Any CPA secure cipher requires a unique IV / key pair, and CBC - which you're using - requires more: a fully unpredictable IV. As you fail to provide that it will be easy to guess information within files that start with the same plaintext.</p>

<p>Generally we nowadays try and use an authenticated mode such as GCM by default. If that's not available to you, then calculating an additional HMAC over IV and ciphertext can be used to generate an authentication tag. This tag can be verified before the data is decrypted again. This requires you to store the IV with the ciphertext. Note that verification should be performed using a time-constant compare.</p>

<p>Changes of the file can be detected if you use an authentication tag. Currently, your decryption may successfully finish <em>even if the wrong key is used</em>. PKCS#7 padding - which is used by default for CBC mode in .NET (and most other frameworks / crypto libs) - has about a 1 in 256 chance to unpad successfully given random bytes. In that case you would get a random plaintext, and <em>no error</em> whatsoever.</p>

<p>I really don't like the <code>false</code> that is returned if <em>anything</em> fails. The possible error conditions are just swept under the rug. So there is no chance of cleaning up problems when something fails.</p>
    </div>