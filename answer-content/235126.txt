<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use meaningful variable names (and element IDs), for example, <code>startDateInput</code> instead of <code>input</code>/<code>myInput</code>.</p>

<p>Declare varables in the smallest needed scope instead all of them at the start of the function, and declare each variable in a separate statement. Use <code>let</code> or <code>const</code> instead of <code>var</code> (unless you need to support enviroments that don't support them).</p>

<p>Move the variables that don't change for each execution of the function, such as the input references, outside the function.</p>

<p>Use the <code>children</code> property to access the list items of the scan list.</p>

<p>Example of these changes:</p>

<pre><code>const startDateInput = document.getElementById('startDateInput');
const endDateInput = document.getElementById('endDateInput');
const scanList = document.getElementById("Scan-list");

function myFunction() {
    const startDateFilter = startDateInput.value.toUpperCase();
    const endDateFilter = endDateInput.value.toUpperCase();
    const li = scanList.children;
    let counter = 0;

    // ...
}
</code></pre>

<hr>

<p>Unless you exlipictly need the index use a <code>for ... of</code> loop to iterate over the <code>li</code>s.</p>

<p>Don't repeat things like <code>getElementsByTagName("span")</code>.</p>

<pre><code>for (const item of li) {
    const spans = item.getElementsByTagName("span")
    const itemDateString = spans[0].contentText; // Variable name describing content
    const itemBodyPart = spans[2].contentText;

    // ...
 }
</code></pre>

<hr>

<p>Be careful using <code>new Date(...)</code> to convert arbitrarily strings into dates. Especially it will break if you use a different date format in the output.</p>

<hr>

<p>The big filtering <code>if</code> block is difficult to read. Don't repeat the same comparisons. Extract the large boolean expressions that go over multiple lines into separate functions.</p>

<hr>

<p>Don't hard code strings such as <code>"All"</code> and <code>"Scan Type : "</code> in your code. It makes translations diffcult. </p>

<p>Generally parsing the data out of the output HTML is a bad idea. It would be better to filter the raw data that the list items represent instead, but that would require completely different code. </p>

<p>At least consider encoding the relevant data in the list items in <a href="https://www.w3.org/TR/microdata/" rel="nofollow noreferrer">microdata attributes</a> or <a href="https://developer.mozilla.org/de/docs/Web/HTML/Globale_Attribute/data-*" rel="nofollow noreferrer"><code>data-</code> attributes</a>. </p>

<p>For example, instead of </p>

<pre><code>&lt;li&gt; 
   &lt;span&gt;2019-12-24&lt;/span&gt;
   &lt;span&gt;Scan Type : Foot&lt;/span&gt;
&lt;/li&gt;
</code></pre>

<p>have something like this (with microdata):</p>

<pre><code> &lt;li itemscope&gt;
     &lt;!-- Identify the elememt via the `itemprop` attribute instead of its index.
          Have the datetime attribute in a computer readable format and display
          the date to the user in a human readable format --&gt;
     &lt;time itemprop="date" datetime="2019-12-24"&gt;
       December 24th, 2019
     &lt;/time&gt; 
     &lt;!-- `value` attribute contains the data in format the script understands
          and the text is translatable and human readable. --&gt;
     &lt;span itemprop="body-part" value="Foot"&gt;
        Scan Type : Pied
     &lt;/span&gt;
  &lt;/li&gt;
</code></pre>

<p>Or with data attributes:</p>

<pre><code> &lt;li&gt;
     &lt;span data-date="2019-12-24"&gt;
       December 24th, 2019
     &lt;/span&gt;
     &lt;span data-body-part="Foot"&gt;
        Scan Type : Pied
     &lt;/span&gt;
  &lt;/li&gt;
</code></pre>

<hr>

<p><code>counter = counter +1;</code> can be simplified to <code>counter++</code>. </p>

<p>Don't repeat <code>li[i].style.display = ""; counter = counter +1;</code>. Instead have your filtering <code>if</code> block return a boolean (<code>visible</code>), and then at the end say:</p>

<pre><code>if (visible) {
    li[i].style.display = "";
    // Or `item.style.display = "";` in my example

    counter++;
} else {
    li[i].style.display = "none";
}
</code></pre>

<hr>

<p>Don't assign event handlers in the HTML in the <code>on...</code> attributes. Instead assign them in the JavaScript code with <code>addEventListener</code>.</p>

<p><code>disabled</code> and <code>selected</code> on the same <code>option</code> doesn't make much sense.</p>

<hr>

<p>You didn't use jQuery in <code>myFunction</code> so no need to start using it in the other JavaScript. Avoid jQuery as much as you can, especially in such simple scripts where its features aren't taken advantage of.</p>
    </div>