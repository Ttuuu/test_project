<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Should these three scripts be combined into one main PlayerController.cs file?</p>
</blockquote>

<p>It all depends on what you want to do with it, so basically how your project is organised. It could be worth separating input, making a new class handling input and just calling proper functions in other (camera, player) classes. </p>

<p>If you leave it as it is, it seems that <strong>PlayerZoomCamera.cs</strong> and <strong>PlayerCameraController.cs</strong> should be merged together.</p>

<blockquote>
  <p>Is there a way to clean up the keyboard input checking in PlayerMovementController.FixedUpdate while making sure that things such as strafing still work?</p>
</blockquote>

<p>If you can't press forward/backward, left/right at the same time you could add some "else if's".</p>

<p>You can clean up every class by:</p>

<ul>
<li>removing <code>this.</code>, which is currently placed before variables,</li>
<li>removing <code>public</code> from <code>Start()</code> and <code>Update()</code> functions, unless you need to call them from other scripts</li>
<li>remove <code>private</code> when declaring variables, as they are private by default</li>
</ul>

<blockquote>
  <p>Is there a way that the camera zooming code can be shortened? It feels unnecessarily long.</p>
</blockquote>

<pre><code>void Update()
{
    if( Input.GetMouseButtonDown( zoomButton ) )
    {
        isCameraZoomed = !isCameraZoomed;
        playerCamera.fieldOfView = ( isCameraZoomed ? ReducedFOV : StandardFOV );
    }
}
</code></pre>

<p>I'd also suggest making some changes in <strong>PlayerCameraController.cs</strong></p>

<pre><code>private float xRotation = 0.0f;
private float yRotation = 0.0f;
</code></pre>

<p>to</p>

<pre><code>Vector3 newRotation = new Vector3();
</code></pre>

<p>then instead of</p>

<pre><code>this.transform.eulerAngles = new Vector3(this.xRotation, this.yRotation, 0);
this.xRotation += this.VerticalInversion * this.VerticalSensitivity * Input.GetAxis("Mouse Y");
this.yRotation += this.HorizontalSensitivity * Input.GetAxis("Mouse X");
</code></pre>

<p>you can just write</p>

<pre><code>newRotation.x += VerticalInversion * VerticalSensitivity * Input.GetAxis("Mouse Y");
newRotation.y += HorizontalSensitivity * Input.GetAxis("Mouse X");
transform.eulerAngles = newRotation;
</code></pre>

<p>Which is a nice and clean way of changing transform position and rotation.</p>
    </div>