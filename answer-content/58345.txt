<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have tried to solve this problem with recursion:</p>

<pre><code>package com.study.recursion;

import java.util.List;

public class GunMens {
    private static final int SECOND_ELEMENT = 1;
    private static final int FIRST_ELEMENT = 0;
    public Integer killingStartsFrom(int gunManWhokillsNextPerson,List&lt;Integer&gt; groupOfGunMens) throws Exception{
        if(groupOfGunMens.size() ==0){
            throw new Exception("No GunMen is present .. Cannot continue Killing :)");
        }
        if(groupOfGunMens.size()==1){
            return groupOfGunMens.get(FIRST_ELEMENT);
        }
        else if(groupOfGunMens.size() ==2){
            if(gunManWhokillsNextPerson==SECOND_ELEMENT){
                return groupOfGunMens.get(SECOND_ELEMENT);
            }else {
                return groupOfGunMens.get(FIRST_ELEMENT);  
            } 
        }
        else if(gunManWhokillsNextPerson == groupOfGunMens.size()-1){
            groupOfGunMens.remove(FIRST_ELEMENT);
            return killingStartsFrom(FIRST_ELEMENT,groupOfGunMens);
        }
        else if(gunManWhokillsNextPerson+1 == groupOfGunMens.size()-1){
            groupOfGunMens.remove(gunManWhokillsNextPerson+1);
            return killingStartsFrom(FIRST_ELEMENT,groupOfGunMens);
        }
        else{
            groupOfGunMens.remove(gunManWhokillsNextPerson+1);
            return killingStartsFrom(gunManWhokillsNextPerson+1,groupOfGunMens);    
        }
    }
}
</code></pre>

<p>Benefits of this program:</p>

<ol>
<li>This will give you the same output which the program in the question will give.</li>
<li>This program additionally provides ways to specify who should start shooting (i.e. shooting may start from third-person and the survivor would be different in this case).</li>
</ol>

<p>Scenarios covered in this program:</p>

<ol>
<li><p>If no gumman is present then program says 'cannot continue killing :)' (notice the smiley at the end).</p></li>
<li><p>If only one gunman is present then he is the survivor.</p></li>
<li><p>If two gunmen are there then only two scenarios to be tested, anyone who starts shooting will be the survivor.</p></li>
<li><p>Multiple gunmen in each call/recursion.  A gunman will kill the next person until only two gunmen are remaining.</p></li>
<li><p>Killing can start from any gunmen for e.g. fourth in 100 gunmen can start shooting.</p></li>
</ol>

<p>I have written the below test class which has Junits written to test the behavior:</p>

<pre><code>import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;
import org.junit.Test;
import com.study.recursion.GunMens;

public class GunMensTest {
 GunMens mens = new GunMens();

    @Test(expected =Exception.class)
    public final void test_NoGunMen_ShouldThrowException() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        Integer gunMenSurvived = mens.killingStartsFrom(0, gunmens);
        assertEquals(gunMenSurvived,new Integer(0));
    }
    @Test
    public final void test_OneGunMen_HeShouldBeTheSurvivor() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);
        Integer gunMenSurvived = mens.killingStartsFrom(0, gunmens);
        assertEquals(new Integer(1),gunMenSurvived);
    }
    @Test
    public final void test_TwoGunMen_OneWhoStarts_isTheSurvivor() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);
        Integer gunMenSurvived = mens.killingStartsFrom(0, gunmens);
        assertEquals(new Integer(1),gunMenSurvived);
    }
    @Test
    public final void test_TwoGunMen_OneWhoStarts_isTheSurvivor_2() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);
        Integer gunMenSurvived = mens.killingStartsFrom(1, gunmens);
        assertEquals(new Integer(2),gunMenSurvived);
    }

    @Test
    public final void test_FourGunMen_ShootingStartsWithFirstPerson() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);gunmens.add(3);gunmens.add(4);
        Integer gunMenSurvived = mens.killingStartsFrom(0, gunmens);
        assertEquals(new Integer(1),gunMenSurvived);
    }
    @Test
    public final void test_FourGunMen_ShootingStartsWithSecondPerson() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);gunmens.add(3);gunmens.add(4);
        Integer gunMenSurvived = mens.killingStartsFrom(1, gunmens);
        assertEquals(new Integer(2),gunMenSurvived);
    }

    @Test
    public final void test_FourGunMen_ShootingStartsWithThirdPerson() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);gunmens.add(3);gunmens.add(4);
        Integer gunMenSurvived = mens.killingStartsFrom(2, gunmens);
        assertEquals(new Integer(3),gunMenSurvived);
    }

    @Test
    public final void test_FourGunMen_ShootingStartsWithFourthPerson() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);gunmens.add(3);gunmens.add(4);
        Integer gunMenSurvived = mens.killingStartsFrom(3, gunmens);
        assertEquals(new Integer(4),gunMenSurvived);
    }

    @Test
    public final void test_FiveGunMen_ShootingStartsWithFirstPerson() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);gunmens.add(3);gunmens.add(4);gunmens.add(5);
        Integer gunMenSurvived = mens.killingStartsFrom(0, gunmens);
        assertEquals(new Integer(3),gunMenSurvived);
    }

    @Test
    public final void test_FiveGunMen_ShootingStartsWithThirdPerson() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);gunmens.add(3);gunmens.add(4);gunmens.add(5);
        Integer gunMenSurvived = mens.killingStartsFrom(2, gunmens);
        assertEquals(new Integer(5),gunMenSurvived);
    }

    @Test
    public final void test_FiveGunMen_ShootingStartsWithFifthPerson() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);gunmens.add(3);gunmens.add(4);gunmens.add(5);
        Integer gunMenSurvived = mens.killingStartsFrom(4, gunmens);
        assertEquals(new Integer(2),gunMenSurvived);
    }

    @Test
    public final void test_SixGunMen_ShootingStartsWithFifthPerson() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        gunmens.add(1);gunmens.add(2);gunmens.add(3);gunmens.add(4);gunmens.add(5);gunmens.add(6);
        Integer gunMenSurvived = mens.killingStartsFrom(4, gunmens);
        assertEquals(new Integer(3),gunMenSurvived);
    }
    @Test
    public final void test_HundredGunMen_killingStartsFromFirst() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        for(int i =0; i&lt;100;i++){
            gunmens.add(i+1);
        }
        Integer gunMenSurvived = mens.killingStartsFrom(0, gunmens);
        assertEquals(new Integer(73),gunMenSurvived);
    }

    @Test
    public final void test_HundredGunMen_killingStartsFromSecond() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        for(int i =0; i&lt;100;i++){
            gunmens.add(i+1);
        }
        Integer gunMenSurvived = mens.killingStartsFrom(1, gunmens);
        assertEquals(new Integer(74),gunMenSurvived);
    }

    @Test
    public final void test_HundredGunMen_killingStartsFromTenth() throws Exception {
        List&lt;Integer&gt; gunmens = new ArrayList&lt;Integer&gt;(); 
        for(int i =0; i&lt;100;i++){
            gunmens.add(i+1);
        }
        Integer gunMenSurvived = mens.killingStartsFrom(9, gunmens);
        assertEquals(new Integer(82),gunMenSurvived);
    }

     @Test
    public final void test_ThousandGunMen_killingStartsFromFirst() throws Exception {
      List&lt;Integer&gt; gunmens = new LinkedList&lt;Integer&gt;(); 
        for(int i =0; i&lt;1000;i++){
        gunmens.add(i+1);
    }
    Integer gunMenSurvived = mens.killingStartsFrom(0, gunmens);
    assertEquals(new Integer(977),gunMenSurvived);
  }
}
</code></pre>

<p>Scope of improvement:</p>

<p>This program throws a stack overflow exception if tried with 10000 gunmen. But I believe the problem statements is <em>100 gunmen</em>, hence this solution will serve its purpose.</p>
    </div>