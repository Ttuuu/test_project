<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would say your code is pretty good for a beginner. </p>

<p>Of course in time it could grow up, along with your own experience but for the current level it is mostly ok.<br>
There are mostly minor improvements</p>

<p><strong>bootstrap.php</strong></p>

<p>You may notice that a certain block of code is repeated in every file. Once you see a repetition it's signal for refactoring. Here it's simple one - just put this code in a distinct file and then include it in every other file</p>

<pre><code>&lt;?php
session_start();
require_once "vendor/autoload.php";
require_once "database.php";

function slugify($str) {
    $str = strtolower($str);
    $str = trim($str);
    $str = preg_replace("/[^A-Za-z0-9 -]/", "", $str);
    $str = preg_replace("/\s+/", " ", $str);
    $str = str_replace(" ", "-", $str);

    return $str;
}
</code></pre>

<p>But it is very important not to add any HTML in this file. HTML is a completely different thing, some of your files aren't supposed to display anything, so HTML is never a part of a bootstrap file.</p>

<p><strong>template/design.php</strong></p>

<p>However, it is still a very good idea to put the site design into a distinct file, to again avoid duplication. Imagine you will decide to add some rich design - then you will have to edit every file. It won't do. What I would propose is to implement a very simple template system. Let's create a folder called <code>template</code> and put there all files responsible for showing HTML to the user. the first one would be <code>design.php</code> to hold the global design of your site, that you would include in your scripts.</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
    &lt;title&gt;Webdev | Wiki - &lt;?= $title  ?&gt;&lt;/title&gt;
    &lt;link href="style.css" rel="stylesheet"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;?php if($message): ?&gt;
    &lt;p&gt;&lt;?= htmlspecialchars($message) ?&gt;&lt;/p&gt;
&lt;?php endif; ?&gt;

&lt;?php include __DIR__."/".$template ?&gt;

&lt;script src="main.js"&gt;&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>as you can see, it contains two variables that must be defined before including this file.</p>

<p><strong>index.php</strong></p>

<p>Now let's refactor your index.php splitting it into two files, <em>the business logic</em> part and <em>the presentation logic</em> part</p>

<pre><code>&lt;?php
include 'bootstrap.php';

$message = $_SESSION["message"] ?? '';
unset($_SESSION["message"])

$articles = $pdo-&gt;query("SELECT title, slug FROM articles")-&gt;fetchAll();

$title = "Articles";
$template = "index.php";
include 'template/design.php';
</code></pre>

<p>here we are preparing all the necessary data, so we won't litter the template with the business logic.</p>

<p><strong>template/index.php</strong></p>

<p>here we have all the output required for the index page</p>

<pre><code>    &lt;div&gt;
         &lt;a href="/edit.php"&gt;[Create Article]&lt;/a&gt; 
         &lt;a href="/documentation.php"&gt;[Documentation]&lt;/a&gt;
    &lt;/div&gt;
&lt;?php if ($articles): ?&gt;
    &lt;ul&gt;
    &lt;?php foreach ($articles as $article): ?&gt;
        &lt;li&gt;&lt;a href="/wiki.php?title=&lt;?= $article["slug"]; ?&gt;"&gt;
                &lt;?= htmlspecialchars($article["title"]); ?&gt;
            &lt;/a&gt;
        &lt;/li&gt;
    &lt;?php endforeach; ?&gt;
    &lt;/ul&gt;
&lt;?php endif; ?&gt;
</code></pre>

<p>as you can see, both files became much more tidy.</p>

<p>So you can refactor all other files the same way.</p>

<p><strong>wiki.php</strong></p>

<pre><code>&lt;?php
include 'bootstrap.php';

$ParsedownExtra = new ParsedownExtra();
$ParsedownExtra-&gt;setSafeMode(true);
$title = htmlspecialchars($_GET["title"]);

if ($title !== slugify($title)) {
    $slug = slugify($title);
} else {
    $slug = $title;
}
$stmt = $pdo-&gt;prepare("SELECT id, title, slug, body FROM articles WHERE slug = ?");
$stmt-&gt;execute([$slug]);
$article = $stmt-&gt;fetch();

$title = $article["title"];
$template = "wiki.php";
include 'template/design.php';
</code></pre>

<p><strong>template/wiki.php</strong></p>

<pre><code>&lt;?php if ($article): ?&gt;
    &lt;div&gt;
        &lt;a href="/"&gt;[Home]&lt;/a&gt; 
        &lt;a href="/edit.php?title=&lt;?= $article["slug"]; ?&gt;"&gt;[Edit Article]&lt;/a&gt;
        &lt;a href="/documentation.php"&gt;[Documentation]&lt;/a&gt;
    &lt;/div&gt;
    &lt;?= $ParsedownExtra-&gt;text($article["body"]); ?&gt;
&lt;?php else: ?&gt;
    &lt;div&gt;&lt;a href="/"&gt;[Home]&lt;/a&gt;&lt;/div&gt;
    &lt;p&gt;Unknown article ID. 
        &lt;a href="/edit.php?title=&lt;?= $title; ?&gt;"&gt;[Create Article]&lt;/a&gt;
    &lt;/p&gt;
&lt;?php endif; ?&gt;
</code></pre>

<p>again, as you can see, separating the pure PHP from HTML mixed with PHP for the output  makes both files much cleaner. </p>

<p>Sorry for not covering your edit.php, it's a distinct review of it's own and I have my own work to do. I am sure someone else will show you this. Or you can try it yourself and then post  as another question for the review.</p>

<p>One last part. </p>

<p><strong>database.php</strong></p>

<p>You did it almost right, it just makes no sense to have a distinct error log for PDO connection errors. All errors should go into a single error log and it's none of database.php's business to decide which one. Just make PDO throw the error the safe way (as not to reveal the database credentials), as it shown in my article on <a href="https://phpdelusions.net/pdo_examples/connect_to_mysql" rel="nofollow noreferrer">how to properly connect with PDO</a>:</p>

<pre><code>$options = [
    \PDO::ATTR_ERRMODE            =&gt; \PDO::ERRMODE_EXCEPTION,
    \PDO::ATTR_DEFAULT_FETCH_MODE =&gt; \PDO::FETCH_ASSOC,
    \PDO::ATTR_EMULATE_PREPARES   =&gt; false,
];
try {
    // TODO: Move database to a directory above the root directory.
    $pdo = new PDO("sqlite:wiki.db", null, null, $options);
} catch (\PDOException $e) {
    throw new \PDOException($e-&gt;getMessage(), (int)$e-&gt;getCode());
}

$pdo-&gt;exec("CREATE TABLE IF NOT EXISTS articles (...
</code></pre>

<p>and that's all you need to do regarding error reporting in this file. The rest should be configured elsewhere, as it's explained in detail in my article on <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">PHP error reporting</a>.</p>
    </div>