<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Data Representation</h1>

<p>I think <code>[False, True, True]</code> is a very confusing representation of both data types in "reverse" order.  Let's revisit that.</p>

<p>You have 2 types, and a line which may contain none, one, or both types.</p>

<pre><code>types = {'DATA_TYPE_1', 'DATA_TYPE_2'}

line = "ALL VALUES BELOW ARE DATA_TYPE_2 AND DATA_TYPE_1, RESPECTIVELY";
</code></pre>

<p>Let's use a regex that will split the <code>line</code> up into individual words.  </p>

<pre><code>import re
word_re = re.compile(r'\w+')
</code></pre>

<p>Now, what we want to do is extract all the words from the <code>line</code>, keeping only the ones that represent the <code>types</code> we are looking for, keeping the words in the order they were in the <code>line</code>:</p>

<pre><code>order = [word for word in word_re.findall(line) if word in types]

&gt;&gt;&gt; order
['DATA_TYPE_2', 'DATA_TYPE_1']
</code></pre>

<p>Or, with your updated question, it looks like there aren't commas or other punctuation to get in the way of a simple <code>line.split()</code>, so we can omit the regular expression:</p>

<pre><code>types = {"achiral", "chiral"}
line = "OTHER COLUMN HEADER  achiral  chiral"
order = [word for word in line.split() if word in types]

&gt;&gt;&gt; order
['achiral', 'chiral']
</code></pre>

<p>If you produced this, it is quite clear what the field order is.  If you also maintained a <code>list</code> of all the types which have been found, adding new types as they are found, when the list size reaches the number of types (2) then you've encountered all (both) of the types.</p>

<pre><code>def determine_data_type(text, found):
    found.extend(word for word in text.split() if word in types)
    return len(found) == len(types)

types = {"achiral", "chiral"}
line = "OTHER COLUMN HEADER  achiral  chiral"
found = []
all_found = determine_data_type(line, found)

&gt;&gt;&gt; found
['achiral', 'chiral']
&gt;&gt;&gt; all_found
True
</code></pre>

<hr>

<h1>Enums</h1>

<p>Using strings to represent data types is awkward.  When you have a finite set of named items, <code>enum</code> should be the tool you reach for.</p>

<pre><code>from enum import Enum

Type = Enum('Type', 'ACHIRAL CHIRAL')

def determine_data_type(text, found):
    found.extend(Type[word] for word in text.upper().split() if word in Type.__members__)
    return len(found) == len(Type)

line = "OTHER COLUMN HEADER  achiral  chiral"
found = []
all_found = determine_data_type(line, found)

&gt;&gt;&gt; found
[&lt;Type.ACHIRAL: 1&gt;, &lt;Type.CHIRAL: 2&gt;]
&gt;&gt;&gt; all_found
True
</code></pre>

<p>Being able to use <code>Type.ACHIRAL</code> or <code>Type.CHIRAL</code> as named constants in your program, instead of using strings which can be mistyped, will result in safer and faster programs.</p>

<hr>

<p>From comment:</p>

<blockquote>
  <p>Let's say that the keywords I am looking for are not exactly always the same. Instead of just chiral and achiral the words I am looking for could also be chirality and achirality or chiral and not chiral or chiral and a-chiral. With these two keywords it's hard to come up with examples, but in the case where maybe it's more difficult to keep a list of finite set of words to look for but the keywords all have a similar 'root' word, how would you modify your approach?</p>
</blockquote>

<p>With <code>chiral</code>/<code>chirality</code> and <code>achiral</code>/<code>achirality</code>, you could just use the <code>Enum</code> type's ability to have type-aliases.</p>

<pre><code>from enum import Enum

class Type(Enum):
    CHIRAL = 1
    ACHIRAL = 2
    CHIRALITY = 1
    ACHIRALITY = 2

def determine_data_type(text, found):
    found.extend(Type[word] for word in text.upper().split() if word in Type.__members__)
    return len(found) == len(Type)

line = "OTHER COLUMN HEADER  achiral  chirality"
found = []
all_found = determine_data_type(line, found)

&gt;&gt;&gt; found
[&lt;Type.ACHIRAL: 2&gt;, &lt;Type.CHIRAL: 1&gt;]
&gt;&gt;&gt; all_found
True
</code></pre>

<p><code>len(Type) == 2</code> because there are only two enum values, but <code>len(Type.__members__) == 4</code> because there are 4 names for those two values, so you can safely use variants of the name.</p>

<p>For <code>not chiral</code> or <code>a-chiral</code>, you'll have to use a regex that detects the whole term, with spaces and/or special characters.</p>

<pre><code>regex = re.compile(r"(?i)\b(not |a-|a)?chiral(ity)?\b")

for term in regex.findall(text):
    ...
</code></pre>

<p>You can't use <code>Type[term]</code> to map those terms to the <code>Type(Enum)</code> directly, since the enum identifiers can't have spaces or special characters.  But you could create your own dictionary to map the terms to the enum types.</p>

<pre><code>Types = {'not chiral': Type.ACHIRAL,
         'a-chiral': Type.ACHIRAL,
         ...
        }
</code></pre>
    </div>