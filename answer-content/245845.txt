<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>
<p>I would change <code>StandardChartWorkSheet</code> to <code>StandardChart</code> to avoid an ambiguity with a Chart sheet.</p>
<p>The <code>Print</code> prefix implies printing to the debug window. <code>Add</code> makes more sense to me (e.g AddProductValues()`.</p>
<p><code>ByVal value As Scripting.Dictionary</code> Value should be capitalized because it is a common property and the VBE changes case of variables to match the last declaration using with that name. This will prevent confusion when reading and writing code.  You don't want to see <code>cell.value</code> when you are expecting <code>cell.Value</code>.</p>
<h2>TChartWorksheetService</h2>
<p>I prefer to use <code>this</code> instead of Matt's <code>Self()</code>.  In any case, <code>this</code> implies a reference to the actual class.</p>
<p>Mathieu Guindon likes to wrap the private fields (members) of his classes in a Type and name the Type <code>T</code> + <code>ClassName</code>.   This is an awesome idea but I prefer to standardize the names whenever possible.  The Type that holds the private fields of my class are always named <code>Members</code> and I always name my reference variable <code>m</code> (this is similar to the VBA class field convention that prefixes class variables with <code>m</code>.</p>
<p>Don't get me wrong Matt knows 10 times more than I do about coding than I do.   But when I am review a class if I see <code>TChartWorksheetService</code> I have to stop think what is <code>TChartWorksheetService</code>. Is it a built in or custom class? Oh wait, its a Type so it can't be passed into a class.  How is it used? Where is it used? Where as I see <code>private m As Members</code>, I  think oh private fields and move on.</p>
<p><a href="https://i.stack.imgur.com/HAZ1C.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/HAZ1C.png" alt="Code Image"></a></p>
<h2>Properties and Constants</h2>
<p>Constants values are great for storing magic numbers and immutable strings but are constants really what you need here?  If a user needs an Arial <code>ServiceHeaderFont</code> on one worksheet and a Times New Roman <code>ServiceHeaderFont</code> on another then you will have to write two different classes or worse yet (what usually happens) you write a hack routine to make the <code>StandardChartWorkSheet</code> fit the new specifications.  Can you  imagine having to have an <code>ArialTexbox</code> and <code>TimesNewRomanTextBox</code>...ugh.  It would be better to define most of these settings as properties of the <code>IChart</code> and assign the default values in your factory methods.</p>
<p>For example:</p>
<p><strong>IChart:</strong></p>
<pre><code>Option Explicit

Public Sub BuildChart()
End Sub

Public Property Get ProductHeaderFont() As String
End Property

Public Property Let ProductHeaderFont(ByVal Value As String)
End Property

Public Property Get ProductHeaderFontSize() As Single
End Property

Public Property Let ProductHeaderFontSize(ByVal Value As Single)
End Property

'***** More settings *******
</code></pre>
<p><strong>StandardChartWorkSheet</strong></p>
<p><code>AsIChart()</code> was added to make it easier to reference the class as <code>StandardChartWorkSheet</code> class.</p>
<pre><code>Private mProductHeaderFont As String
Private mProductHeaderFontSize As Integer

Public Function Create(ByVal hData As Scripting.Dictionary, cSheet As Worksheet) As IChart
    With New StandardChartWorkSheet
        Set .HeaderData = hData
        Set .ChartWorksheet = cSheet
        Set Create = .Self
        With .AsIChart
            .ProductHeaderFont = ProductHeaderFont
            .ProductHeaderFontSize = ProductHeaderFontSize
        End With
    End With
End Function

Public Function AsIChart() As IChart
    Set GetIChartFromClass = Self
End Function

Private Property Let IChart_ProductHeaderFont(ByVal RHS As String)
    mProductHeaderFont = RHS
End Property

Private Property Get IChart_ProductHeaderFont() As String
    IChart_ProductHeaderFont = mProductHeaderFont
End Property

Private Property Let IChart_ProductHeaderFontSize(ByVal RHS As Single)
    mProductHeaderFontSize = RHS
End Property

Private Property Get IChart_ProductHeaderFontSize() As Single
    IChart_ProductHeaderFontSize = mProductHeaderFontSize
End Property
</code></pre>
<blockquote>
<pre><code>Sub NewTest()
    Dim chart As IChart
    Set chart = StandardChartWorkSheet.Create(GetTMProductDictionary, Sheet3)
    chart.ProductHeaderFont = "Times New Roman"
    chart.ProductHeaderFontSize = 14
    chart.BuildChart
End Sub
</code></pre>
</blockquote>
<h2>IChartFormatService</h2>
<p>If the VBA supported polymorphism, I would tell you that <code>IChartFormatService</code> should be an abstract class because it is only used internally by the <code>StandardChartWorkSheet</code> class.   Interfaces are meant to be used to expose methods of the class not just to enforce implementation of a method.  IMO <code>IChartFormatService</code> is just decoration.  I would drop it because I don't want to have to port it the next project I need a <code>StandardChartWorkSheet</code>.</p>
<h2>BuildHeaders</h2>
<p><code>Application.ScreenUpdating = True</code> is no longer necessary.  <code>ScreenUpdating</code> will automatically resume after all the code has ran.  This was changed in either Excel 2007 or 2010.  If you are worried about backwards compatibility then you should save and restore the <code>Application.ScreenUpdating</code> state.  This will prevent slow downs when running multiple procedures.</p>
<h2>PrintProductValues</h2>
<p><code>With Sheet3.Cells(4, this.HeaderColumn)</code> is  a refactoring over site.</p>
<h2>Create()</h2>
<p>Referencing the <code>TopLeftCell</code> that you want to target will allow you to add multiple chart to the same worksheet.</p>
<blockquote>
<pre><code>Public Function Create(ByVal hData As Scripting.Dictionary, TopLeftCell As Range) As IChart
</code></pre>
</blockquote>
<h2>HeaderColumn</h2>
<p><code>CurrentHeaderColumn</code> or change <code>HeaderIndex</code> are better names for <code>HeaderColumn</code>.</p>
<p><code>HeaderColumn</code> should not belong to the class.  Class variables are subject to modification by multiple procedures.  This makes it far easier to make mistakes and takes longer to read, modify and debug.</p>
<p>If by contrast, you pass the <code>HeaderColumn</code> as a parameter, you will know empirically when and where the value is being modified.</p>
<blockquote>
<pre><code>Private Sub PrintProductValues(ByVal product As String, ByVal HeaderColumn As Long)
</code></pre>
</blockquote>
<h2>Miscellaneous</h2>
<p><code>.Value = Mid(service, 14, 100)</code> works perfect and is exactly what you need if you expect values over 100 characters.  Otherwise, <code>.Value = Mid(service, 14)</code> will return the same value.</p>
<p><code>Cells(50, this.HeaderColumn)</code> Why fifty?  It seems like this needs to be more dynamic.</p>
    </div>