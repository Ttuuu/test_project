<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>smallSieve</code></h2>

<p>PEP 8 recommends using <code>snake_case</code> for function names, so the function should be named <code>small_sieve</code>.</p>

<p>You've imported <code>bitarray</code>, but do not use it in this function.  In addition to reducing the memory requirement of the function, it could really clean up the code (and perhaps speed it up).  The key is the slice assignment,</p>

<pre><code>            sieve[i * i // 2::i] = False
</code></pre>

<p>which will assign a single scalar value to every element in the slice.  This means you don't have to calculate how many <code>False</code> values to assign into the slice, nor allocate an entire list of <code>False</code> values, just to set each entry of the slice to <code>False</code>.</p>

<p>Finally, the return statement repeatedly indexes into the <code>sieve</code> list, <code>sieve[i]</code>, which is inefficient.  It is better to iterate over the sieve list directly, fetching the sieve's primality flags from the iterator.  Since you need the indices as well, <code>for i, flag in enumerate(sieve)</code> is the preferred list comprehension construct:</p>

<pre><code>def small_sieve(n):
    sieve = bitarray.bitarray(n // 2)

    sieve.setall(True)
    sieve[0] = False    # 1 is not prime

    for i in range(3, int(n ** 0.5) + 1, 2):
        if sieve[i // 2]:
            sieve[i * i // 2::i] = False

    return [2] + [2 * i + 1 for i, flag in enumerate(sieve) if flag]
</code></pre>

<h2><code>m30_wheel.__init__</code></h2>

<p>The <code>m30_wheel</code> is only constructed once, so its performance is not critical.  Instead of hand-coded constants, have you considered computing the constants?  It would make building the mod 210 wheel much easier!</p>

<p>As an example:</p>

<pre><code>self.wheel_primes_m30 = [ wheel_prime % 30 for wheel_prime in self.wheel_primes ]
</code></pre>

<p>Also, instead of spelling out the gaps twice, after computing the gaps, use list multiplication:</p>

<pre><code>temp = self.wheel_primes + [self.wheel_primes[0] + 30]
self.gaps = [ b - a for a, b in zip(temp[:-1], temp[1:]) ] * 2
</code></pre>

<p>There are various hard-coded numbers in the wheel that could be made into member values ... 30, 7, 8 ... but hard-coded integers will be faster than member access.  So, despite computing the initialization data instead of using hard-coded numbers, I'd be inclined to leave the numbers as numbers in the various member functions which are called multiple times.</p>

<h2>Use computed assignments</h2>

<p>Python cannot optimize a statement like:</p>

<pre><code>n = n - 7
</code></pre>

<p>into:</p>

<pre><code>n -= 7
</code></pre>

<p>due to its interpreted nature, where the meaning of the various operations depends on <code>type(n)</code>, which can be different every time the statement is executed.  So in the former case, the Python interpreter will search its dictionary for the variable <code>n</code>, subtract 7, and then search its dictionary for the variable <code>n</code> to store the value into.  In the latter case, the variable <code>n</code> is only searched for once; the value is retrieved, modified, and stored without needing to consult the variable dictionary a second time.</p>

<h2>Unused variables</h2>

<p>In the loop:</p>

<pre><code>for j in range(8):
</code></pre>

<p>the variable <code>j</code> is never used.  By convention, the <code>_</code> variable should be used when it is needed for syntactical purposes only:</p>

<pre><code>for _ in range(8):
</code></pre>

<h2>XXX not so lightweight</h2>

<p>As noted, this code is not lightweight:</p>

<pre><code>        for i in range(top):
            if sieve[i]:
                x = i + li_ix
                ...
</code></pre>

<p>due to the repeated indexing into the <code>sieve</code> list.  The lighter weight approach is to use iteration over the contents of the list directly:</p>

<pre><code>        for i, flag in enumerate(sieve[:top]):
            if flag:
                x = i + li_ix
                ...
</code></pre>

<p>Even better, since <code>i</code> is only used to compute <code>x</code>, which is a constant offset from <code>i</code>, we can start the enumeration at the value <code>li_ix</code>, and avoid the addition:</p>

<pre><code>        for x, flag in enumerate(sieve[:top], li_ix):
            if flag:
                ...
</code></pre>
    </div>