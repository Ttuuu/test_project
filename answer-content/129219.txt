<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Consistency</h2>

<p>Why is there sometimes a <code>1</code> at the end of the results?  Should it even be there, considering that <code>1</code> is not a prime number?  If you do include it in the results, why is it at the end instead of at the beginning of the list?</p>

<blockquote>
<pre><code>Enter the integer you wish to find the prime factors of: 60
[2, 2, 3, 5, 1]

Enter the integer you wish to find the prime factors of: 5
[5, 1]

Enter the integer you wish to find the prime factors of: 4
[2, 2]
</code></pre>
</blockquote>

<h2>Lint</h2>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8</a>, the official style guide, specifies 4 spaces per level of indentation.  This is a strong convention for Python, where whitespace is significant.</p>

<p>Also, by PEP 8, <code>primefactor()</code> would be better named <code>prime_factors()</code>.</p>

<p>It makes no sense to convert <code>n</code> to a <code>float</code>, then convert it again to an <code>int</code>.</p>

<p><code>import math</code> is pointless; you never use anything in the <code>math</code> module.</p>

<p>Some of your comments are unclear.  For example:</p>

<blockquote>
<pre><code>if i&gt;=(b/2): #number is prime
</code></pre>
</blockquote>

<p>… would be better written as <code># b is prime</code>.</p>

<p>Since this is all integer arithmetic, you can prepare your code for use with Python 3 by <a href="//stackoverflow.com/q/183853/1157100" rel="nofollow">using the <code>//</code> operator rather than <code>/</code></a>.</p>

<p>Counting loops in Python are better written using some kind of <code>for</code> loop in conjunction with an iterator.  Here, I recommend <a href="https://docs.python.org/2/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count(2)</code></a>.</p>

<h2>Generality and organization</h2>

<p><code>primefactor()</code> would be better as a function that accepts a parameter, rather than using the global variable <code>n</code>.  It should definitely return a list that it created, rather than modifying a global <code>L</code> as a side-effect.</p>

<p>Why doesn't <code>primefactor()</code> also work for <code>n</code> ≤ 4?  If you organized the code properly, the caller wouldn't be responsible for handling special cases (which aren't even necessary in the first place).  There would be no need to call <code>exit()</code> — which you should almost never need in a properly structured program.</p>

<p>Flag variables, especially poorly named ones like <code>test</code>, are rarely desirable or necessary.  Here, you can easily eliminate the <code>test</code> variable by changing <code>test=False</code> to <code>return L</code>.</p>

<h2>First rewrite</h2>

<p>Incorporating the remarks above, and more…</p>

<pre><code>from itertools import count

def prime_factors(n):
    factors = []
    for i in count(2):
        while n % i == 0:
            factors.append(i)
            n //= i
        if 2 * i &gt; n:
            return factors

n = int(raw_input('Enter the integer you wish to find the prime factors of: '))
print(prime_factors(n))
</code></pre>

<h2>Yielding results</h2>

<p>You can stream the results back to the caller by <code>yield</code>ing prime factors as you find them, rather than building the entire list.</p>

<p>As an optimization, you can avoid considering even factors other than 2.</p>

<pre><code>from itertools import chain, count

def prime_factors(n):
    for i in chain([2], count(3, 2)): # Try 2, 3, 5, 7, 9, 11, 13, 15...
        while n % i == 0:
            yield i
            n //= i
        if 2 * i &gt; n:
            return 

n = int(raw_input('Enter the integer you wish to find the prime factors of: '))
print(', '.join(prime_factors(n)))
</code></pre>
    </div>