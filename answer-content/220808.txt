<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype" rel="nofollow noreferrer">Array.prototype</a> methods. </p>

<p>These lend themselves to adopting a <a href="https://en.wikipedia.org/wiki/Functional_programming" rel="nofollow noreferrer">functional style of programming</a>.</p>

<p>Functional programming is a lot easier to test, as a pure function always returns the same result and never mutate objects. </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const vowels = ['a','e','i','o','u']; 
function vowelStringReverse(str) {
  
    //split the string into an array of chars, that includes their index position
    const strArray = str.split('').map((v,i) =&gt; ({
        value: v, 
        i: i, 
        isVowel: vowels.includes(v)
    })); 
    
    //For just the vowels, 
    //Create index position lookup, where the index positions are reversed
    const vowelsReverseIndexLookup = strArray.filter(v =&gt; v.isVowel)
    .reduce((acc, cur, i, array) =&gt; {
        return {
            ...acc, 
            [array[array.length-1-i].i]: cur.value
        }; 
    
    }, {}); 
    
    //Now iterate through the string, and look up the vowel from the lookup. 
    const strReversed = strArray.map((v,i) =&gt; {
        if (v.isVowel) {
            return vowelsReverseIndexLookup[i]
        }
        else {
            return v.value; 
        }
    }); 
    
    return strReversed.join(''); 
    
}


console.log(vowelStringReverse('hello')); 
console.log(vowelStringReverse('leetcode')); </code></pre>
</div>
</div>


<p>In this example I've given, if you wanted, you could then pull out the anonymous functions I've declared, and write tests for them: </p>

<p>for example: </p>

<pre><code>const vowelsReverseIndexLookup = strArray.filter(v =&gt; v.isVowel)
.reduce(reverseIndexReducer, {}); 

//elsewhere: 

const reverseIndexReducer = (acc, cur, i, array) =&gt; {
    return {
        ...acc, 
        [array[array.length-1-i].i]: cur.value
    }; 

}; 
</code></pre>
    </div>