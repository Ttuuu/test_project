<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By defining <code>r = round . sqrt . fromIntegral</code>, <code>newBoard</code> fits on the screen. <code>positions</code> doesn't appear to be used in <code>newboard</code>'s first case.</p>

<p>Half the code disappears if we interpret <code>Cell</code> as <code>((Int, Int), Int)</code>.</p>

<p><code>newBoard</code>'s first case can be pushed one recursion call deeper, mapping <code>[]</code> to <code>[]</code> instead of <code>[x]</code> to the current right hand side.</p>

<p><code>[_] ++ _</code> should be simplified as <code>_ : _</code>.</p>

<p><code>positions</code> is only used once, therefore I inline it.</p>

<pre><code>type Cell = ((Int, Int), Int) -- (position, state)

genPositions :: Int -&gt; [(Int, Int)]
genPositions x = [ (a,b) | a &lt;- [0..(x-1)], b &lt;- [0..(x-1)] ]

r = round . sqrt . fromIntegral

newBoard :: Int -&gt; [Int] -&gt; [Cell]
newBoard i [] = []
newBoard i (x : xs) = (genPositions (r i)!!(i - 1 - length xs), x) : newBoard i xs
</code></pre>

<p>Successive elements of the list returned by <code>genPositions</code> and <code>xs</code> are zipped together; <code>zip</code> captures this pattern. <code>i</code> is now not needed in its non-rooted form and I recommend changing the interface to take <code>N</code> as an argument instead. Non-square arguments can currently crash <code>!!</code> anyway. <code>genPositions</code> is only used once, therefore I inline it.</p>

<pre><code>type Cell = ((Int, Int), Int) -- (position, state)

newBoard :: Int -&gt; [Int] -&gt; [Cell]
newBoard n = zip $ liftA2 (,) [0..n-1] [0..n-1]
</code></pre>

<p>For <code>type Board = Array (Int, Int) Int</code>, Data.Array allows <code>newBoard n = listArray ((0,0),(n-1,n-1))</code>.</p>
    </div>