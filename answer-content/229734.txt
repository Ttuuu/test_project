<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Usability</h2>

<p>Your design is pretty string-heavy. If you want to build reusable functions, you should try to avoid this and work with more appropriate types given the context.</p>

<p>One such example is your interface design:</p>

<blockquote>
<pre><code>interface ICalculatable&lt;Parcel&gt;
{
    string Calculator(Parcel p);
}
</code></pre>
</blockquote>

<p>What can consumers do with the returned string? This interface can only be used to render results to a UI like the console. Consider returning a <code>decimal</code> or a response class that stores all the required data for consumers to act upon.</p>

<blockquote>
<pre><code>return "Your Parcel can fit in our small package type! The cost would be: " + Parcel.CostSmall.ToString("C");
</code></pre>
</blockquote>

<p>could be:</p>

<pre><code>return Parsel.CostSmall;
</code></pre>

<p>Another example of returning the wrong type is <code>GetInput</code>. Internally you parse the data to <code>double</code> only to return the raw string. This seems a bit nuts to me.</p>

<blockquote>
<pre><code>   string Value; double result;
   // ..
   if (!string.IsNullOrEmpty(Value) &amp;&amp; double.TryParse(Value, out result))
   {
        return Value;  // should return result instead
   }
   // ..
</code></pre>
</blockquote>

<hr>

<h2>Design</h2>

<h3><code>ICalculatable&lt;Parcel&gt;</code></h3>

<blockquote>
<pre><code>interface ICalculatable&lt;Parcel&gt;
{
    string Calculator(Parcel p);
}
</code></pre>
</blockquote>

<ul>
<li>Start by defining proper names. The interface is used to calculate the cost price of a <code>Parcel</code>. The interface is hence a <code>ICalculator</code>, not <code>ICalculatable</code>. The parcel would be the latter. </li>
<li>The name of the operation should be a verb specifying the action. <code>CalculateCostPrice</code> is a verb and is more specific than the generic <code>Calculator</code>.</li>
<li>If using generics, use a type <code>T</code> both as generic class type and input parameter for the method. But since this interface is specific to calculating the cost price, I would not use a generic class, unless you define an interface for types that have a cost price. This would be an exercise left for you to explore.</li>
<li>As already discussed, return a more useful return type. Let's assume all you want is the cost price, so a <code>decimal</code> would do.</li>
</ul>



<pre><code>/// &lt;summary&gt;
/// Performs calculations on Parcel instances.
/// &lt;/summary&gt;
interface ICalculator
{ 
    /// &lt;summary&gt; Calculates the cost price of a Parcel in &lt;unit&gt;. &lt;/summary&gt;
    decimal CalculateCostPrice(Parcel parcel);
}
</code></pre>

<h3>General</h3>

<ul>
<li>Consider making <code>Parcel</code> immutable. This ensures better encapsulation of its state.</li>
<li>Enum names should be PascalCased, not camelCased.</li>
<li>Don't let the entrypoint <code>Program</code> implement an interface. Create a specific <code>ParcelCalculator</code> class.</li>
<li>Make sure to split API logic from end-user rendering. The string-based API is an anti-pattern for usability and reusability.</li>
<li>I like the fact you put all user input parsing in <code>Program</code>, not in the API.</li>
</ul>

<hr>

<h2>Conclusion</h2>

<ul>
<li>I would focus on making a good design, think good about the arguments, return types and names of interfaces and methods. And don't forget to document interfaces to provide a clear <strong>Specification</strong> for consumers that focuses on <strong>Usability</strong>.</li>
<li>Don't let rendering pollute the API. Remove all string-based messages from the API and put them in the presentation layer. This is called <strong>Separation of Concerns</strong>.</li>
</ul>
    </div>