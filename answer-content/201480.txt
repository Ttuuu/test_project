<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Caveats of <code>{}</code></h1>

<p>In JavaScript <code>{}</code> is often used as a map with user provided values being object property names. This can be a recipe for disaster. See this particular piece of code, that results in error:</p>

<pre><code>var ev = new Emitter();

ev.once("toString", function () {
    console.log("Oops!");
});

ev.emit("toString");
</code></pre>

<p>The error we'll get comes from <code>addHandler</code> function that uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in" rel="nofollow noreferrer"><code>in</code> operator</a>.</p>

<blockquote>
  <p>The in operator returns true if the specified property is in the specified object <strong>or its prototype chain</strong>.</p>
</blockquote>

<p>When <code>addHandler</code> is called with event "toString" it checks if <code>"toString" in this.eventHandlers</code>.
It finds one in <code>Object.prototype</code> since <code>{}</code> inherits from it. From now on we are in trouble.</p>

<p>If we replace the <code>in</code> with <code>hasOwnProperty</code> call we'll still be in trouble when someone desides that <em>hasOwnProperty</em> is a good name for an event:</p>

<pre><code>var ev = new Emitter();

ev.once("hasOwnProperty", function () {
    console.log("Still in trouble!");
});

ev.emit("hasOwnProperty");
</code></pre>

<p>After that all <code>this.eventHandlers.hasOwnProperty</code> expressions will evaluate to array of handlers:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var a = { hasOwnProperty: [] };
a.hasOwnProperty();</code></pre>
</div>
</div>


<p>To safely call <code>hasOwnProperty</code> on object with user provided property names we should use function from <code>Object.prototype</code> directly:</p>

<pre><code>// JavaScript best practices, so sweet
Object.prototype.hasOwnProperty.call(this.eventHandlers, event);
</code></pre>

<p>Actually same stands for any standard method we want to call.</p>

<p>Instead of <em>this</em> I suggest you to use <code>Object.create(null)</code>. It will create an empty object without prototype so it will be safe to use bracket lookup notation evading all <code>hasOwnProperty</code> mess.</p>

<p>See it in action:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var a = {};
console.log("a = {}");
console.log("constructor" in a, "toString" in a, "hasOwnProperty" in a);

var a = Object.create(null);
console.log("a = Object.create(null)");
console.log("constructor" in a, "toString" in a, "hasOwnProperty" in a);</code></pre>
</div>
</div>


<p>See more about this on <a href="https://stackoverflow.com/questions/32262809/is-it-bad-practice-to-use-object-createnull-versus">StackOverflow answer</a>.</p>

<h1>once</h1>

<p><code>once</code> method has one particular fail case when same event is emitted directly from the event handler:</p>

<pre><code>var ev = new Emitter();

ev.once("foo", function () {
    console.log("Hey, I was called!");
    ev.emit("foo");
});

ev.emit("foo");
</code></pre>

<p>I suggest you to remove the once handler right before it being called.</p>

<h1>off</h1>

<p>The <code>off</code> method removes registered event handler. But what if we call it directly from an event handler:</p>

<pre><code>var ev = new Emitter();

ev.on("foo", function () {
    console.log("First");
    ev.off("foo");
});

ev.on("foo", function () {
    console.log("Second");
});

ev.emit("foo");
</code></pre>

<p>Here we have two handlers for the same event "foo".
When the first handler is called it removes all "foo" handlers with <code>delete this.eventHandlers[event]</code>.
But when it returns we'll still be in the very for loop trying to access next event handler in <code>this.eventHandlers[event]</code> which was recently deleted:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var foo = { bar: [1, 2] };

for (var i = 0; i &lt; foo.bar.length; i++) {
  console.log(foo.bar[i]);
  delete foo.bar;
}</code></pre>
</div>
</div>


<h2>Callbacks comparsion</h2>

<p>The <code>off</code> method allows the following:</p>

<pre><code>ev.on("foo", function() { /* handler code */ });
ev.off("foo", function() { /* handler code */ });
</code></pre>

<p>The right way to remove event handler involves storing the handler function and using it later with <code>off</code> method:</p>

<pre><code>var handler = function() { /* handler code */ };
ev.on("foo", handler);
ev.off("foo", handler);
</code></pre>

<p>You are comparing functions by their string representation:</p>

<pre><code>callback.toString() == this.eventHandlers[event][index].callback.toString()
</code></pre>

<p>Actually, you can compare functions directly:</p>

<pre><code>callback === this.eventHandlers[event][index].callback
</code></pre>

<p>Example:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var a = function() {
  console.log(Math.PI);
}

var b = function() {
  console.log(Math.PI);
}

var c = a;
   
console.log(function(){} !== function(){}); // different functions
console.log(a !== b);                       // different functions
console.log(a === c);                       // same function
console.log(a.toString() === b.toString()); // different functions,
                                            // but same body</code></pre>
</div>
</div>


<h1>Overall behaviour</h1>

<p>A quote from <a href="https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener" rel="nofollow noreferrer">Node.js Events documentation</a>:</p>

<blockquote>
  <p>Note that once an event has been emitted, all listeners attached to it at the time of emitting will be called in order. This implies that any removeListener() or removeAllListeners() calls after emitting and before the last listener finishes execution will not remove them from emit() in progress.</p>
</blockquote>

<p>So in short nothing should mutate a pending array of triggered event handlers.</p>

<p>To accomplish this you can slice <code>this.eventHandlers[event]</code> and iterate on it.</p>

<pre><code>let handlers = this.eventHandlers[event].slice(0);
for (var i = 0; i &lt; handlers.length; i++) {
    const handler = handlers[i];
    // ...
}
</code></pre>

<p>This will handle the <code>off</code> error described above.</p>

<h2>Other notes</h2>

<ul>
<li>I don't see point in <code>if (handler.hasOwnProperty('once'))</code>, consider <code>if (handler.once)</code> instead.</li>
<li><code>index</code> is a long name for a loop variable, how about plain old <code>i</code>?</li>
<li><code>for (var i in arr)</code> form is for iteration over object property names where iteration order is not guranteed. To iterate over arrays, use <code>for (var i = 0; i &lt; arr.length; i++)</code> instead.</li>
</ul>
    </div>