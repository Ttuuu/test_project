<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To clearly show which part of your code is the interesting part, you should define a function:</p>

<pre><code>def rooms_required(classes):
    classes = classes[:] # do not modify the argument, make a copy of it
    rooms_bookings = []

    # TODO: insert your code here.

    return len(rooms_bookings)
</code></pre>

<p>To describe the function in more details, you should add some documentation about the expected data types:</p>

<pre><code>from typing import List

def rooms_required(classes: List[(int, int)]) -&gt; int:
    ...
</code></pre>

<p>This way, you can easily define several test cases:</p>

<pre><code>def test_rooms_required():

    # The example from the challenge.
    assert rooms_required([(30, 75), (0, 50), (65, 150)]) == 2

    assert rooms_required([]) == 0

    # This class needs no time at all, therefore it doesn't need a room.
    assert rooms_required([(0, 0)]) == 0

    # Classes that go backwards in time should either be ignored or raise an exception.
    assert rooms_required([(1200, 1100)]) == 0

    # Ensure that rooms_required does not modify the given list,
    # as that would be surprising.
    classes = [(0, 1), (0, 2), (0, 3), (2, 3)]
    assert rooms_required(classes) == 3
    assert rooms_required(classes) == 3
</code></pre>

<p>Read more about <a href="https://docs.pytest.org/en/latest/" rel="nofollow noreferrer">pytest</a> to see how to run these automatic tests.</p>

<hr>

<p>Some more detailed remarks, from top to bottom:</p>

<pre><code>def item_2(element):
    return (element[1]) #Returns second element of tuple for sorting
</code></pre>

<p>Since this challenge is about time spans, it's more helpful to the reader of your code if you call this function <code>end</code>, since it returns the <em>end of a time span</em>.</p>

<pre><code>def end(span):
    return span[1]
</code></pre>

<p>And since the meaning of <code>[0]</code> in the code is not really obvious, you should also define:</p>

<pre><code>def start(span):
    return span[0]
</code></pre>

<p>Then, instead of <code>span[0]</code> and <code>span[1]</code>, you can write <code>start(span)</code> and <code>end(span)</code>, which clearly tells a story.</p>

<pre><code>classes = [(15,50),(51,53),(54,58),(60,70),(61,63),(65,69),(71,83)]
#classes = [(30, 75), (0, 50), (60, 150), (0, 500), (40, 70)]
</code></pre>

<p>As I mentioned above, instead of testing only one scenario at a time, you should define a function that does the interesting work, which then allows you to have automatic tests, and several of them at the same time.</p>

<pre><code>print("The following classes will be needed")
</code></pre>

<p>That's wrong. It should be "the following rooms" instead.</p>

<pre><code>while classes:
    item = classes[0]
</code></pre>

<p>The word <code>item</code> is a very general term. A better name for this variable is <code>span</code>.</p>

<pre><code>    index = 0
</code></pre>

<p>This variable is not used in the rest of the code. You can remove this line.</p>

<pre><code>    room_bookings = []
    room_bookings.append(item)
</code></pre>

<p>You can simplify this into <code>room_bookings = [span]</code>.</p>

<pre><code>    for next_item in remaining:
        if next_item[0] &gt; end_time:
</code></pre>

<p>Instead of the <code>end_time</code> variable (end time of <em>what exactly</em>?), you can write <code>start(next_span) &gt; end(span)</code>, which makes the expression look symmetrical and easy to read aloud: <em>if the next span starts later than the current span ends â€¦</em></p>

<p>When you use this pattern, you can remove the <code>end_time</code> variable, which will make the code a little shorter.</p>

<pre><code>    print(room_bookings)
</code></pre>

<p>The function that computes the room bookings should not print anything. Printing things is the job of the main program. That's a general rule.</p>
    </div>