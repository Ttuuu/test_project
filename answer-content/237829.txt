<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately your attempt is far too complex and LeetCode.com doesn't notice that :(</p>

<p>The problem is that <code>containsOne</code> basically repeats the search for the subtrees that it already has run for in a previous iteration. </p>

<p>Example: </p>

<pre><code>    A
   / \
  B   C
 / \ 
D   E
</code></pre>

<p>You start to search tree A which you do by searching subtrees B and C. In order to search B you search subtrees D and E. Then you move on to subtree B and repeat the search there, including repeating the searches on D and E. Next you move to subtree D and repeat the search there a third time, and so on.</p>

<p>Instead by using a recursive so-called <a href="https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(LRN)" rel="nofollow noreferrer">post-order traversal</a> where you basically start at the bottom (the leaves) of the tree, where you remove any leaves with the value <code>0</code>,  you get a much simpler solution:</p>

<pre><code>public TreeNode pruneTree(TreeNode node) {

    if (node == null) {
        return null;
    }

    node.left = pruneTree(node.left);
    node.right = pruneTree(node.right);

    if (node.left == null &amp;&amp; node.right == null &amp;&amp; node.val == 0) {
        return null;
    }

    return node;
}
</code></pre>
    </div>