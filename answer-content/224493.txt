<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since this code is a <strong>black box</strong>, because it calculates everything itself without calling any dependencies the caller can be aware of, we should test this method with sufficient variations of input to yield us:</p>

<ul>
<li>any <code>speed &lt; 0</code> should yield <code>error</code></li>
<li>any <code>speed &gt; 300</code> should yield <code>error</code></li>
<li>any <code>speed</code> between <code>0</code> and <code>65</code> (bounds included) should yield <code>0</code></li>
<li>any <code>speed</code> between <code>66</code> and <code>300</code> (bounds included) should yield the integer division <code>(speed - 65) / 5</code></li>
</ul>

<p>If the method would have been coded as a <strong>white box</strong> instead, using mockable dependencies, things would have been different. We could then just test <code>Assert.WasCalled(depedency.method(speed))</code>.</p>

<h1>In-depth testing</h1>

<p><em>These are the test cases a developer/tester should write that does not have access to the content of the method, only the interface and specification.</em></p>

<p>Since the <strong><em>entropy</em></strong> is not that big and we are working with <strong>discrete integers</strong>, I suggest to test any integer from <code>0 - buffer</code> to <code>300 + buffer</code> against either a matrix of pre-calculated results or a formula in the unit test that emulates the algorithm. I prefer the former, since a bug in the method flow is easily introduced in the unit test as well.</p>

<h1>Minimal test cases</h1>

<p><em>These are the minimal test cases the developer that knows the content of the method could perform.</em></p>

<pre><code>//     speed    result    test case justification
//        -1     error    upper bound of of speed &lt; 0
//        0          0    lower bound of speed &gt;= 0 and speed &lt;= SpeedLimit
//        65         0    upper bound of speed &gt;= 0 and speed &lt;= SpeedLimit
//        66         0    lower bound of speed &gt; SpeedLimit &amp; speed &lt;= MaxSpeed
//     70-74         1    group #1 to test (speed - SpeedLimit) / 5
//     75-79         2    group #2 to test (speed - SpeedLimit) / 5
//       300        47    upper bound of speed &gt; SpeedLimit &amp; speed &lt;= MaxSpeed
//       301     error    lower bound of speed &gt; MaxSpeed
</code></pre>
    </div>