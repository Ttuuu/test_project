<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have two <code>lapply</code> calls in there, so essentially two hidden <code>for</code> loops contributing to the slow execution.</p>

<p>Here, one way to tap into faster compiled functions is to rely on the <code>data.table</code> package for merging (a.k.a. a database join) your two data sets.</p>

<p>First, we turn your two lists into two data.tables:</p>

<pre><code>idx1 &lt;- rep(seq_along(source.list), lengths(source.list))
idx2 &lt;- rep(seq_along(target.list), lengths(target.list))

library(data.table)
X &lt;- data.table(id = unlist(source.list), idx1 = idx1,
                pos = seq_along(idx1), key = "id")
Y &lt;- data.table(id = unlist(target.list), idx2 = idx2, key = "id")
</code></pre>

<p>where <code>idx1</code> and <code>idx2</code> are the variables telling us in which element of <code>source.list</code> and <code>target.list</code> a specific item (<code>id</code>) belongs. Also <code>pos</code> is just a temporary row number we will use later to sort the data back, as the next statement below (the merge) shuffles things around:</p>

<pre><code>Z &lt;- Y[X, allow.cartesian=TRUE]
Z &lt;- Z[order(Z$pos)]
</code></pre>

<p>At this point, if it's possible for you, I would recommend you stop here. By that, I mean to make the next steps of your analysis use this <code>Z</code> data.table rather than a nested list, as to avoid further slow processing loops (<code>for/lapply/Map/etc.</code>). However, if you really need the nested list output, you can do:</p>

<pre><code>no_name_split &lt;- function(...) unname(split(...))
gp1 &lt;- factor(Z$idx1, seq_along(source.list))
gp2 &lt;- factor(Z$idx2, seq_along(target.list))

res &lt;- Map(no_name_split, no_name_split(Z$id, gp1),
                          no_name_split(gp2,  gp1))
</code></pre>

<hr>

<p>Below is a simulation with a larger dataset, comparing computation times and checking that the results are identical:</p>

<pre><code>set.seed(632)
source.list &lt;- replicate(500, sample(100000, 1000), simplify = FALSE)
target.list &lt;- replicate(555, sample(100000, 1055), simplify = FALSE)

system.time({
  idx1 &lt;- rep(seq_along(source.list), lengths(source.list))
  idx2 &lt;- rep(seq_along(target.list), lengths(target.list))

  library(data.table)
  X &lt;- data.table(id = unlist(source.list), idx1 = idx1,
                  pos = seq_along(idx1), key = "id")
  Y &lt;- data.table(id = unlist(target.list), idx2 = idx2, key = "id")
  Z &lt;- Y[X, allow.cartesian = TRUE]
  Z &lt;- Z[order(Z$pos)]

  no_name_split &lt;- function(...) unname(split(...))
  gp1 &lt;- factor(Z$idx1, seq_along(source.list))
  gp2 &lt;- factor(Z$idx2, seq_along(target.list))
  res &lt;- Map(no_name_split, no_name_split(Z$id, gp1),
                            no_name_split(gp2,  gp1))
})
#    user  system elapsed 
#   3.394   0.382   3.646 

system.time({
  result &lt;- lapply(X = source.list, FUN = map.partition.R,
                   partitionlist = target.list)
})
#    user  system elapsed 
#  23.943   5.329  36.999 

identical(res, result)
# [1] TRUE
</code></pre>
    </div>