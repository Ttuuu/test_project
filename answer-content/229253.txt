<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Personally, I think it's excessive to have a function for each of the rules. IMO, if you only need the function in a single context, you probably don't need to make a function out of it unless it's sufficiently complex to warrant one - and even then, make sure it's "private."</p>

<p>Because the values for the rule set start at 5 and simply increment in value from rule to rule, you can just iterate over a boolean list, like:</p>

<pre><code>total = 0
for x, rule in enumerate(rules):
    score = (x+5) * rule
    total += score
    print(f"Rule {x+1} got {score} points, so total is {total}.")
</code></pre>

<p><br>
As for that boolean list, you could do something like:</p>

<pre><code>digits = list(map(int, zipcode))
rules = [
    zipcode[0] == zipcode[-1],
    digits[1] == 2*digits[0] and digits[2] &gt; min(digits[1], digits[3]),
    "7" in zipcode,
    "13" not in zipcode[1:-1],
    min(digits[1:-1]) == max(digits[1:-1]),
    zipcode[2] == zipcode[3],
    zipcode == zipcode[::-1]
]
</code></pre>

<p>This way you have an list of zeroes and ones for multiplication in the previous loop. In particular, though, rule 2 looks pretty ugly when just slapped into the list here. If you want to make the list look a bit less ugly, maybe you could define rule1 through rule7 to equal each of those conditions and then construct the array that way.</p>

<p><br>
I also stuck the code into an <code>if __name__ == '__main__'</code> for good practice, and called <code>cupgame</code> from within there. My final program looks like this:</p>

<pre><code>"""
RULES
    +5 when first and last digit match
    +6 when second digit is twice the first AND third digit is greater than second or fourth digit
    +7 if any 7 is in the zipcode
    +8 when there's no "13" in MIDDLE the zipcode
    +9 when all three middle digits match
    +10 when third and fourth digits match
    +11 when zipcode is palindrome (12121 == 12121, while 12345 != 54321)
"""

def cupgame(zipcode):
    digits = list(map(int, zipcode))

    rules = [
        zipcode[0] == zipcode[-1],
        digits[1] == 2*digits[0] and digits[2] &gt; min(digits[1], digits[3]),
        "7" in zipcode,
        "13" not in zipcode[1:-1],
        min(digits[1:-1]) == max(digits[1:-1]),
        zipcode[2] == zipcode[3],
        zipcode == zipcode[::-1]
    ]

    total = 0
    for x, rule in enumerate(rules):
        score = (x+5) * rule
        total += score
        print(f"Rule {x+1} got {score} points, so total is {total}.")

if __name__ == '__main__':
    zipcode = input("Enter your zipcode: ")
    cupgame(zipcode)
</code></pre>

<p>I do apologize if this is at all unclear - this is my first time reviewing code outside of a classroom, but hopefully this is of some use.</p>
    </div>