<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After reading the answer given by <em>slepic</em>, I decided to take a different approach. I came up with the following solution, which I think doesn't violate neither the Open-Closed Principle nor the remaining SOLID premises. The main change I have made was to pass the "eating preferences" logic to a centralized component.</p>

<pre><code>public abstract class Animal
{
    public AnimalKind Kind { get; set; }
    public Size Size { get; set; }
    public bool IsDead { get; set; }

    protected Animal(Size size)
    {
        this.Size = size;
    }
}

public enum AnimalKind
{
    Error = 0,
    Hyena = 1,
    Lion = 2
}

public class Lion : Animal
{
    public Lion(Size size) : base(size)
    {
        Kind = AnimalKind.Lion;
    }

    // Some more logic, which the exercise had, but I omitted because it was not necessary for this question
}

public class Hyena : Animal
{
    public Hyena(Size size) : base(size)
    {
        Kind = AnimalKind.Hyena;
    }

    // Some more logic, which the exercise had, but I omitted because it was not necessary for this question
}

public enum Size
{
    Error = 0,
    Small = 1,
    Medium = 2,
    Big = 3
}

public static class EatingPreferencesFactory
{
    public static IDictionary&lt;AnimalKind, Size&gt; GetEatingPreferences(Animal animal)
    {
        Size biggestPreySizeExclusive;
        IDictionary&lt;AnimalKind, Size&gt; animalPreys = new Dictionary&lt;AnimalKind, Size&gt;();

        switch(animal.Kind)
        {
            case AnimalKind.Lion: 
                                animalPreys.Add(AnimalKind.Hyena, animal.Size);

                                biggestPreySizeExclusive = animal.Size;
                                if(biggestPreySizeExclusive &gt; Size.Small &amp;&amp; biggestPreySizeExclusive &lt; animal.Size)
                                {
                                    animalPreys.Add(AnimalKind.Lion, biggestPreySizeExclusive);
                                }
                                break;

            case AnimalKind.Hyena:
                                biggestPreySizeExclusive = animal.Size;
                                if (biggestPreySizeExclusive &gt; Size.Small &amp;&amp; biggestPreySizeExclusive &lt; animal.Size)
                                {
                                    animalPreys.Add(AnimalKind.Hyena, animal.Size);
                                }
                                break;

            default: break;
        }


        return animalPreys;
    }
}

public interface IEatingPreferencesService
{
    public bool CanEat(Animal eater, Animal animal);
}

public class EatingPreferencesService : IEatingPreferencesService
{
    public bool CanEat(Animal eater, Animal prey)
    {
        if (eater.IsDead || prey.IsDead) return false;

        var eatingPreferences = EatingPreferencesFactory.GetEatingPreferences(eater);
        if (eatingPreferences.TryGetValue(prey.Kind, out Size ediblePreySize))
        {
            if(ediblePreySize&gt;=prey.Size)
            {
                return true;
            }
        }

        return false;
    }
}

public class AnimalPark
{
    private readonly IEatingPreferencesService _eatingPreferencesService;
    private readonly IList&lt;Animal&gt; _animals = new List&lt;Animal&gt;();

    public AnimalPark(IEatingPreferencesService eatingPreferencesService)
    {
        _eatingPreferencesService = eatingPreferencesService;
    }

    public void AddAnimal(Animal animal)
    {
        if(animal != null)
        {
            _animals.Add(animal);
        }
    }

    public void Process()
    {
        int length = _animals.Count;
        for(int i=1; i&lt;length; i++)
        {
            if( _eatingPreferencesService.CanEat(_animals[i - 1], _animals[i]) )
            {
                _animals[i].IsDead = true;
            }
        }
    }
}
</code></pre>
    </div>