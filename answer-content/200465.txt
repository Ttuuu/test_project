<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm afraid I don't know enough Javascript to give a meaningful review on the language specific things. </p>

<p>The algorithm seems sensible.</p>

<p>One observation is that if two lists are not anagrams of each other, they are not rotations of each other. The complexity of a sort based anagram check is \$ O(n log(n)) \$ and that of a histogram based check is \$ O(n+b) \$ (where b is the number of distinct elements in the array). That is compared with the worst case complexity here of \$ O(n^2) \$ That means, much like you have an early sanity check against the length, you might benefit from doing a standard anagram check before getting into the full rotated list check. This entirely depends on your data source: it is not worth doing if all your inputs are anagrams for example.</p>

<hr>

<p>I also thought I'd offer a bit of elaboration on Blindman67's suggestions. </p>

<p>One key thing to think about performance wise is what you do to arrays. As a rule of thumb for almost all languages, the fastest container data structure is often a simple contiguous array, because it's quick and easy to find and update an element in it. However, arrays are particularly bad at dealing with cases where data gets shuffled about. This is because, if you insert or delete something, every element later in the array needs to be shuffled forward or backwards. While it's always better to make judgements about efficiency with the help of a profiler, the line that reads as probably slowest by a long way here is <code>rotatedFirst.unshift(rotatedFirst.pop());</code> That's why it would be faster to use <code>%</code> and just index into the original array in the location you'd be looking if it had been rotated.</p>

<p>Second, his comment about regExp doesn't actually work. Directly collapsing an array to a string is always messy. He mentions that "the joins may need a separator to work on all cases" because it falls apart with, say, <code>[12, 3]</code> being reported as a rotation of <code>[1,23]</code>. However it's not possible in general to pick a separator that cannot appear in the string representation of any data type that could be in your arrays. Nevertheless if you want to look at more advanced optimisations, it may be helpful to observe that "<code>m</code> is an array rotation of <code>n</code>" is equivalent to "<code>m</code> is a substring of <code>n</code>+<code>n</code>". As such, it may be worth looking at <a href="https://en.wikipedia.org/wiki/String-searching_algorithm" rel="nofollow noreferrer">substring search algorithms</a> for insights. Just apply them to arrays instead of strings. (Do note, however, that most research into that area has assumed the string being searched is very long compared to the string being looked for, so what works best for typical search may not work for your particular search problem.)</p>
    </div>