<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would try to use bulkcopy to load all of the IDs and their CachedText at once into a staging table in Azure, and then do a single update on your <code>document</code> table. </p>

<pre><code> CREATE TABLE document
(docKey     BIGINT IDENTITY(1, 1) PRIMARY KEY, 
 CachedText NVARCHAR(MAX), 
 id         INT
);
CREATE TABLE document_stage
(CachedText NVARCHAR(MAX), 
 id         INT
);
</code></pre>

<p>As you iterate over the files, you create a PSObject with the properties you want in your sql table and add it to an collection. Then after all files are done, or at set batching limits you can use <a href="https://gallery.technet.microsoft.com/scriptcenter/4208a159-a52e-4b99-83d4-8048468d29dd" rel="nofollow noreferrer">Out-DataTable</a> to convert the collection into a data table, and then let SqlBulkCopy upload to the stage table in one batch, and a single <code>UPDATE</code> will update your primary table. </p>

<pre><code>UPDATE Document
  SET 
      CachedText = stg.CachedText
FROM document_stage stg
WHERE document.id = stg.id;
</code></pre>

<p>PS script</p>

<pre><code>$files = Get-ChildItem -force -recurse $documentFolder -include *.doc, *.pdf, *.docx

$stagedDataAsArray = @()
foreach ($file in $files) {

    $fileName = $file.name
    $4ID = $fileName.split('-')[1].replace(' ', '').replace(".txt", "")
    $text = Get-Content "$($file.FullName)"
    $text = $text.replace("'", "''")


    $resumeID = $IDCheck | where {$_.OldID -eq $4id} | Select-Object OriginalResumeID
    $resumeID = $resumeID.OriginalResumeID

    &lt;# create the row and add it to our  #&gt;
     $fileInstance = New-Object -TypeName psobject 
    $fileInstance | add-member -type NoteProperty -Name cachedText -Value $text
    $fileInstance | add-member -type NoteProperty -Name resumeID -Value $resumeID
    $stagedDataAsArray += $fileInstance
    Remove-Item -Force "$env:TEMP\$fileName"

    }
    $stagedDataAsTable = $stagedDataAsArray | Out-DataTable
    $cn = new-object System.Data.SqlClient.SqlConnection("YOUR AZURE DB CONNECTION STRING");
    $cn.Open()
    $bc = new-object ("System.Data.SqlClient.SqlBulkCopy") $cn
    $bc.DestinationTableName = "dbo.document_stage"
    $bc.WriteToServer($stagedDataAsTable)
    $cn.Close()


    $params = @{
        'Database' = $TRIS5DATABASENAME
        'ServerInstance' = $($AzureServerInstance.FullyQualifiedDomainName)
        'Username' = $AdminLogin
        'Password' = $InsecurePassword
        'query'    = "UPDATE Document
  SET 
      CachedText = stg.CachedText
FROM document_stage stg
WHERE document.id = stg.id;"
    }
    Invoke-Sqlcmd @params -ErrorAction "SilentlyContinue"
</code></pre>
    </div>