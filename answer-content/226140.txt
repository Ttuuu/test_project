<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rreplace the inner <code>for</code> loop of <code>rehashing</code> with a call to <code>put</code>. <code>put</code> has an average runtime of <span class="math-container">\$\mathcal{O}(1)\$</span> . So, <code>rehashing</code> has an average runtime of  <span class="math-container">\$\mathcal{O}(n)\$</span> since it is <span class="math-container">\$n\$</span> <code>put</code> operations.</p>

<p>It would look something like this:</p>

<pre><code>void rehashing() {
  int oldCap = cap;
  sze = 0;
  cap = NextPrime(cap * 2);

  HashNode** oldArr = arr;
  arr = new HashNode*[cap]();

  for (int i = 0; i &lt; oldCap; ++i) {
    if (oldArr[i] != nullptr) {
      put(oldArr[i]-&gt;value);
      delete oldArr[i];
    }
  }

  delete[] oldArr;
}
</code></pre>

<p>Also, it might be useful to refactor <code>put</code> to have a private overloaded <code>put</code> member function which accepts a <code>HashNode</code>. The public <code>put</code> would just allocate a <code>HashNode</code> and call the private <code>put</code>. Then, for <code>rehashing</code>, one could use the private <code>put</code> and wouldn't need to delete the previous <code>HashNode</code>. This would save memory allocation and deletions.</p>
    </div>