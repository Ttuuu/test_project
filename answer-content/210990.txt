<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p></p>

<h2>strlen</h2>

<ul>
<li>We generally prefer smaller instructions. To zero the <code>EBX</code> register we normally use <code>xor ebx, ebx</code>. This is a 2-byte instruction where <code>mov ebx, 0</code> is a 5-byte instruction.  </li>
<li>Loops get faster if they include less jumping. Your <em>strlen_loop</em> has 2 jump-instructions per iteration. You can easily do this with a single conditional jump-instruction.</li>
</ul>

<p>Next code does exactly what your code does. Notice that by placing the <code>inc ebx</code> instruction early in the loop, you no longer need the separate <code>inc ebx</code> to include the terminating zero in the returned count.</p>

<pre class="lang-none prettyprint-override"><code>; IN (eax) OUT (ebx=1+)
strlen:
    xor     ebx, ebx
  strlen_loop:
    inc     ebx
    cmp     byte [eax+ebx-1], 0  ; Zero-terminator ?
    jne     strlen_loop
    ret
</code></pre>

<p>Usually the returned count does not contain the terminating zero. Next code will deal with that situation:</p>

<pre class="lang-none prettyprint-override"><code>; IN (eax) OUT (ebx=0+)
strlen:
    xor     ebx, ebx
    dec     ebx
  strlen_loop:
    inc     ebx
    cmp     byte [eax+ebx], 0    ; Zero-terminator ?
    jne     strlen_loop
    ret
</code></pre>

<p>The 2 instructions <code>xor ebx, ebx</code> and <code>dec ebx</code> in a row are still shorter than <code>mov ebx, -1</code>.</p>

<hr>

<h2>strcmp</h2>

<ul>
<li>Characters in a string are to be considered as <strong>unsigned</strong> quantities. Therefore you should not use the <code>jl</code> (jump if less) nor the <code>jg</code> (jump if greater) instructions.<br>
For unsigned comparisons we use <code>jb</code> (jump if below) and <code>ja</code> (jump if above).</li>
<li>To check if a register holds a zero you can <code>test</code> the register with itself. This produces smaller code.</li>
<li>In a sequence like <code>je ...</code> <code>jl ...</code> <code>jg ...</code>, the 3rd conditional jump is redundant as it is always true. This is the perfect occasion to just fall through in the program.</li>
</ul>

<p>Next code applies these recommendations:</p>

<pre class="lang-none prettyprint-override"><code>; IN (eax,ebx) OUT (ecx={-1,0,1}) MOD (edx)
strcmp:
    xor     ecx, ecx
  strcmp_loop:
    mov     dl, [eax+ecx]
    mov     dh, [ebx+ecx]
    inc     ecx
    test    dl, dl
    jz      strcmp_end_s1
    cmp     dl, dh
    je      strcmp_loop
    jb      strcmp_below
  strcmp_above:
    xor     ecx, ecx          ; s1 bigger than s2
    inc     ecx
    ret                       ; ECX = 1
  strcmp_below:
    xor     ecx, ecx          ; s1 smaller than s2
    dec     ecx
    ret                       ; ECX = -1
  strcmp_end_s1:
    test    dh, dh
    jnz     strcmp_below      ; s1 shorter than s2
    xor     ecx, ecx          ; s1 same as s2
    ret                       ; ECX = 0
</code></pre>

<hr>

<blockquote>
<pre class="lang-none prettyprint-override"><code>mov byte dl,[eax+ecx]
mov byte dh,[ebx+ecx]
cmp byte dl,dh
</code></pre>
</blockquote>

<p>FASM, like most assemblers, does not require you to write these redundant size tags. The name of the register <code>DL</code>/<code>DH</code> already says that the size is <em>byte</em>.</p>

<pre class="lang-none prettyprint-override"><code>mov     dl, [eax+ecx]
mov     dh, [ebx+ecx]
cmp     dl, dh
</code></pre>

<hr>

<p>It's always a good idea to write some comments in the program.<br>
See how describing the 3 possible exits on <em>strcmp</em> makes for a more readable code!</p>
    </div>