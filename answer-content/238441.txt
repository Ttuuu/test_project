<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>using namespace std;
</code></pre>
</blockquote>

<p>Standard advice is to avoid depriving yourself of the benefits of the <code>std</code> namespace like this.  Prefer to import <em>just the names you need</em>, into the <em>smallest reasonable scope</em>.  Or just qualify names as you use them; <code>std</code> is intentionally a very short name.</p>

<hr>

<blockquote>
<pre><code>int max(int x, int y) {
    if (x &gt; y) return x; else return y;
}
</code></pre>
</blockquote>

<p>This seems unnecessary, given that we can simply use <code>std::max()</code> (and might even start doing so unintentionally, given the <code>using</code> declaration above).</p>

<hr>

<blockquote>
<pre><code>machInfo(const string&amp; name) : name(name) {}
</code></pre>
</blockquote>

<p>If we pass by value, we can avoid copying when given an rvalue <code>name</code>:</p>

<pre><code>machInfo(std::string name)
  : name{std::move(name)}
{}
</code></pre>

<hr>

<blockquote>
<pre><code>void procDataSock1(string&amp; data);
void procDataSock2(string&amp; data);
</code></pre>
</blockquote>

<p>Naming is hard - but surely we can do better than this??</p>

<hr>

<blockquote>
<pre><code>    if (pos != string::npos) {
        machine = data.substr(0, pos);
    }
    else
        return;
</code></pre>
</blockquote>

<p>It's easier to read if we turn this around, to deal with the problem case first:</p>

<pre><code>    if (pos == string::npos) {
        return;
    }

    machine = data.substr(0, pos);
</code></pre>

<p>We now no longer need <code>else</code>.</p>

<hr>

<blockquote>
<pre><code>    map&lt;string, machInfo&gt;::iterator it = machines.find(machine);
</code></pre>
</blockquote>

<p><code>auto</code> is useful for types like this:</p>

<pre><code>    auto const it = machines.find(machine);
</code></pre>

<hr>

<blockquote>
<pre><code>    map&lt;string, sessInfo&gt;::iterator it1 = sessions.find(session);
    if ( it1 == sessions.end() ) {
        sessions.insert(pair&lt;string, sessInfo&gt;(session,
                                               sessInfo(session)));
    }
</code></pre>
</blockquote>

<p>That's exactly equivalent to <code>try_emplace()</code>:</p>

<pre><code>    sessions.try_emplace(session, session);
</code></pre>

<hr>

<blockquote>
<pre><code>    exit(EXIT_FAILURE);
</code></pre>
</blockquote>

<p><code>std::exit</code> and <code>EXIT_FAILURE</code> are both declared by <code>&lt;cstdlib&gt;</code>, but it hasn't been included.  Given that this is <code>main()</code>, consider plain <code>return</code> instead of <code>std::exit()</code>.</p>

<hr>

<blockquote>
<pre><code>servaddr.sin_family      = AF_INET; // IPv4
</code></pre>
</blockquote>

<p>No IPv6 support?</p>

<hr>

<blockquote>
<pre><code>    perror("bind failed");
</code></pre>
</blockquote>

<p>Good to see use of the proper facilities here.  <code>std::perror()</code> is declared in <code>&lt;cstdio&gt;</code>, so we need to include that, too.</p>

<hr>

<blockquote>
<pre><code>                cout &lt;&lt; "datagram too large for buffer" &lt;&lt; endl;
</code></pre>
</blockquote>

<p>Having seen nice <code>std::perror()</code> above, it's a shame that we're using the wrong stream here - error messages should certainly go to <code>std::cerr</code>, not <code>std::cout</code>.</p>
    </div>