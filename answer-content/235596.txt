<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a general feedback, the script looks quite good. I will nevertheless share a few of my thoughts with you.</p>

<h1>shebang</h1>

<p>Since you are using Python 3, the initial shebang should be <code>#!/usr/bin/env python3</code>. Otherwise <a href="https://askubuntu.com/a/817262">it will depend on the system which interpreter is used</a> to execute the script once the file is marked as executable.</p>

<h1>Documentation</h1>

<p>Only <code>load_data_and_dict()</code> is documented using a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a>. The rest of the code is not. It might be a good idea to document the scripts behavior (e.g. directories/files expected/generated by the code) on a module level. To quote PEP 257:</p>

<blockquote>
  <p>The docstring of a script (a stand-alone program) should be usable as
  its "usage" message, printed when the script is invoked with incorrect
  or missing arguments (or perhaps with a "-h" option, for "help"). Such
  a docstring should document the script's function and command line
  syntax, environment variables, and files. Usage messages can be fairly
  elaborate (several screens full) and should be sufficient for a new
  user to use the command properly, as well as a complete quick
  reference to all options and arguments for the sophisticated user.</p>
</blockquote>

<p>Since you are working in the scientific Python stack (numpy, ...), it might also be worth to have a look at <a href="https://numpydoc.readthedocs.io/en/latest/format.html" rel="nofollow noreferrer">numpydoc</a>, the style used for the numpy/scipy/... documentation. It's quite expressive and ready to be used to automatically generate documentation using tools like <a href="http://www.sphinx-doc.org/en/master/" rel="nofollow noreferrer">Sphinx</a>.</p>

<h1>Error reporting</h1>

<p>Returning strings to report errors is not a particularly robust idea. Instead consider raising and catching <a href="https://docs.python.org/3/tutorial/errors.html#exceptions" rel="nofollow noreferrer">exceptions</a> to signal something went wrong. In your case, a <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer"><code>ValueError</code></a> seems like an appropriate choice. E.g.</p>

<pre><code>raise ValueError("Maximum margin must be larger or equal to minimum margin")
</code></pre>

<p>Also, <code>extra_margin</code> should be checked before creating the <code>res</code> image, since it's a useless memory allocation in case the <code>extra_margin</code> check won't pass.</p>

<h1>Magic values</h1>

<p>Sometimes <code>28</code> is used as "magic value", instead of referring to what is defined as <code>image_size</code>. Using <code>image_size</code> everywhere would be clearer and more consistent.</p>

<h1>Randomness</h1>

<p>Maybe you should think about including a possibility to <a href="https://stackoverflow.com/a/21494630/5682996">manually select the seed value for the RNG</a>. This will allow you to create reproducible, pseudo-random datasets.</p>

<h1>Command-line interface</h1>

<p><code>argparse</code> supports the <a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer"><code>type</code> keyword argument</a>, which would allow you to rewrite, e.g.</p>

<pre><code>parser.add_argument('-i', '--minmargin', default='0',
                    help='Minimum margin between MNIST characters')
parser.add_argument('-a', '--maxmargin', default='100',
                    help='Maximum margin between MNIST characters')
...
min_margin = int(args.minmargin)
max_margin = int(args.maxmargin)
</code></pre>

<p>as</p>

<pre><code>parser.add_argument('-i', '--minmargin', default='0',
                    help='Minimum margin between MNIST characters', type=int)
parser.add_argument('-a', '--maxmargin', default='100',
                    help='Maximum margin between MNIST characters', type=int)
...
min_margin = args.minmargin   # maybe these even become unnecessary 
max_margin = args.maxmargin
</code></pre>
    </div>