<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You have a couple of style issues:</p>

<ul>
<li>you don't need the empty brackets after class definitions.</li>
<li>You should have two new lines before and after class definitions.</li>
</ul></li>
<li><p>You're conflating a base class and an implementation of it. I find keeping them separate to increase readability as you should know roughly what the base dose without reading the code. And you can more easily view the additional functionality.</p></li>
<li><code>Node</code> and <code>Trie</code> should be the same class.</li>
<li><p>To be a pedant, I don't think your implementation is a Trie:</p>

<ul>
<li><p>It's not ordered, and you don't apply the key to the edges.</p>

<pre><code>self.children = set()
</code></pre></li>
<li><p>Nodes in the tree store the keys.</p>

<pre><code>self.char = char
</code></pre></li>
</ul></li>
<li><p>I'd change <code>add</code> to <code>__setitem__</code>, and you could change it to be a for loop constantly using <code>dict.setdefault</code>.</p></li>
</ol>

<p>And so I'd start with the following base class:</p>

<pre><code>class Trie:
    __slots__ = ('value', 'children')

    def __init__(self, value=None):
        self.value = value
        self.children = {}

    def __getitem__(self, keys):
        node = self
        for key in keys:
            node = node.children[key]
        if node.value is None:
            raise KeyError('No value for the provided key')
        return node.value

    def __setitem__(self, keys, value):
        cls = type(self)
        node = self
        for key in keys:
            node = node.children.setdefault(key, cls())
        node.value = value
</code></pre>

<p>The largest difference between the above <code>Trie</code> and yours is the addition of a <code>value</code>. This should be the score of the word, which the Trie shouldn't be tasked with finding.</p>

<ol>
<li>As stated above, you should find the score of the word outside the <code>Trie</code> and so would make a function <code>word_score</code>.</li>
<li>I personally would make <code>get_best_words</code> a function outside of the class, so that we don't depend on the class. However if you want it for ease of use, then I'd make it call the external function.</li>
<li><p>This leaves <code>_get_possible_words</code>.</p>

<ul>
<li>It has a <span class="math-container">\$O(n^3)\$</span> space complexity because you keep duplicating <code>letters</code>.</li>
<li>Your code is hard to read as you've manually implemented recursion. This is as you didn't define the function on <code>Node</code>.</li>
</ul>

<p>You can make a public function that changes <code>letters</code> to a <code>collections.Counter</code>, and then define the recursion on a private function that adds and removes a value from letters. It also allowed me to write the code in what I think is a far simpler manner.</p></li>
</ol>

<p>Giving me the code:</p>

<pre><code>import collections
import functools


def score(word, scores):
    return sum(scores[l] for l in word)


word_score = functools.partial(
    score,
    scores={
        'a' : 1, 'b' : 3, 'c' : 5, 'd' : 2, 'e' : 1, 'f' : 4,
        'g' : 3, 'h' : 4, 'i' : 1, 'j' : 4, 'k' : 3, 'l' : 3,
        'm' : 3, 'n' : 1, 'o' : 1, 'p' : 3, 'q' : 10, 'r' : 2,
        's' : 2, 't' : 2, 'u' : 4, 'v' : 4, 'w' : 5, 'x' : 8,
        'y' : 8, 'z' : 4
    }
)


def best_words(s_trie, letters):
    return sorted(
        s_trie.get_possible_words(letters)
        key=lambda (k, v): (-v, len(k))
    )


class Trie:
    __slots__ = ('value', 'children')

    def __init__(self, value=None):
        self.value = value
        self.children = {}

    def __getitem__(self, keys):
        node = self
        for key in keys:
            node = node.children[key]
        if node.value is None:
            raise KeyError('No value for the provided key')
        return node.value

    def __setitem__(self, keys, value):
        cls = type(self)
        node = self
        for key in keys:
            node = node.children.setdefault(key, cls())
        node.value = value


class ScrabbleTrie(Trie):
    def _get_possible_words(self, letters, prefix):
        if self.value is not None:
            yield prefix, node.value

        for key, node in self.children.items():
            if not letters.get(key, 0):
                continue
            letters[key] -= 1
            yield from node._get_possible_words(letters, prefix + key)
            letters[key] += 1

        if letters.get('#', 0):
            letters['#'] -= 1
            for key, node in self.children.items():
                yield from node._get_possible_words(letters, prefix + key)
            letters['#'] += 1

    def get_possible_words(self, letters):
        return self._get_possible_words(collections.Counter(letters), '')

    def get_best_words(self, letters):
        return best_words(self, letters)
</code></pre>
    </div>