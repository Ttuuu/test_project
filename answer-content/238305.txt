<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Calling <code>aiohttp.ClientSession</code> in <code>_post</code> and <code>_get</code> is really bad. Don't do this.</li>
<li>There is no <code>main</code> function, this just makes the code harder to convert into a setuptools application.</li>
<li><p>All these <code>functools.partial</code> only hinder readability rather than enhance it.</p>

<p>Just make a class.</p></li>
<li><p>The code isn't very functional. And I can only imagine what a purist would have to say about <code>_send_weather</code>. There are so many side effects in one little, hard to read, function.</p></li>
<li>There is no separation of concerns, <code>_find_city</code> and <code>_city_weather</code> are solely around getting a forecast, whilst <code>_notify</code> is sending a notification. You've mangled them into one <code>_send_weather</code> function. Not great.</li>
<li>Since the code isn't functional, and this is possibly the worst project to learn functional programming on. Let's just make it so that the code is easy to read.</li>
</ul>



<ol>
<li><p>Make a <code>WeatherForecast</code> class.</p>

<ol>
<li>At instantiation, it only takes a <code>session</code>.<br>
This is so we can remove all those <code>partial</code>s with <code>self.get</code>.</li>
<li>Include <code>get</code> into this class, however without the session creation part.</li>
<li>Include <code>find_city</code> as <code>find_cities</code>, and don't mutate the output.</li>
<li>Include <code>city_weather</code>.</li>
<li><p>Change <code>send_weather</code> to <code>get_weather</code> and delegate calls to <code>find_city</code> and <code>city_weather</code>.</p>

<p>It is not allowed to <code>print</code> here. All it does is get the weather for the wanted city.</p>

<p>This is a helper function and so mutates the values to get the two other functions to work and to get the output as we desire. Nothing else.</p></li>
</ol></li>
<li><p>Remove the session creation part from <code>post</code>.</p></li>
<li><p>Make a function <code>notify_user</code> that notifies the user of <code>city</code>'s <code>weather</code>.</p>

<p>This is as simple as using two f-strings, to build the URL and the message.</p></li>
<li><p>Change <code>_send_weather</code> so that it takes a session, city, and user.</p>

<p>To make the function easy to read, we are limited to three things in the function.</p>

<ol>
<li>Calling another function.</li>
<li>Performing a simple <code>if</code> <code>else</code> to control data flow.</li>
<li>Formatting output to the user - basic f-strings.</li>
</ol></li>
</ol>

<p>Here's how I performed the above. Which is as functional as your code. And you could argue that my functions are <em>more pure</em> than yours, as <code>get_weather</code> only gets weather. <code>notify_user</code> notifies the user. And <code>send_weather</code> only <code>print</code>s and delegates to other impure functions. None of them are pure and can't be because they all have side effects. Which pretty much makes implementing this in 'pure FP' a joke.</p>

<pre class="lang-py prettyprint-override"><code>import asyncio
from functools import partial

import aiohttp

SUCCESSFUL_PUSH = {'deleted': True}  # Value specific to fake push service


class WeatherForecast:
    def __init__(self, session):
        self.session = session

    async def get(self, headers, url):
        async with self.session.get(url, verify_ssl=False) as response:
            return await response.json()

    async def find_cities(self, city):
        return await self.get(f"https://www.metaweather.com/api/location/search?query={city}")

    async def city_weather(self, city_id):
        return await self.get(f"https://www.metaweather.com/api/location/{city_id}")

    async def get_weather(self, city_name):
        cities = await self.find_city(city_name)
        if not cities:
            return None
        forecast = await self.city_weather(cities[0]["woeid"])
        return forecast["consolidated_weather"][0]["weather_state_name"]


async def post(session, url, data):
    async with session.post(url, json=data, verify_ssl=False) as response:
        return await response.json()


def notify_user(session, city, weather, user):
    return await post(
        session,
        f"https://api.keen.io/dev/null?user={user}",
        {"message": f"Current weather in {city}: {weather}"},
    )


def send_weather(session, city, user):
    weather = await WeatherForecast(session).get_weather(city)
    if weather is None:
        print("Could not get forecast")
    else:
        reply = notify_user(session, city, weather, user)
        if reply == SUCCESSFUL_PUSH:
            print(f"Current weather in {city}: {weather}")
        else:
            print(f"Push notification to {user} failed: {reply}")


async def main():
    headers = {"Content-Type": "application/json"}
    async with aiohttp.ClientSession(headers=headers) as session:
        send_weather(session, "Glasgow", "Bob")


if __name__ == "__main__":
    asyncio.run(main())
</code></pre>
    </div>