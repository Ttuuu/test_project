<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>f-strings</h1>

<p>Beginning with Python 3.6, there is a friendlier way of formatting strings. Instead of using <code>"format string" % (tuple_of_args)</code> where the argument and the format codes are separated by significant distance, the arguments are embedded in the string itself, surrounded by <code>{}</code>'s.  The string itself is prefixed with an <code>f</code>.</p>

<p>For example, instead of:</p>

<pre><code>    print("\n***   Round: %d   ***\n" %(self.round))
</code></pre>

<p>you can write:</p>

<pre><code>    print(f"\n***   Round: {self.round}   ***\n")
</code></pre>

<h1>Enumerations</h1>

<p>This code doesn't convey a lot of meaning by itself.  It needs to be described by your 7 comment lines.</p>

<pre><code>    decisionArray = [[False, True, True], [True, False, True], [True, True, False]]
</code></pre>

<p>Some of the problem stems from indices having semantic meaning.  For example, 1 is Magic.  But 1 is also Spell.  Confusing.</p>

<p>Let's make what is happening a lot clearer.  Let's define enumerations for our weapons and shields:</p>

<pre><code>from enum import Enum

Weapon = Enum("Weapon", "Sword, Spell, Fire")
Shield = Enum("Shield", "Armour, Magic, Water")
</code></pre>

<p>Now we have <code>Weapon.Sword</code>, <code>Weapon.Spell</code>, and <code>Weapon.Fire</code>, which conveniently have values 1, 2 and 3 respectively.  We also have <code>Shield.Armour</code>, <code>Shield.Magic</code> and <code>Shield.Water</code>, also with values 1, 2, and 3.</p>

<p>When we have our player select their <code>choice</code> of weapon, we use to store it as the number 0, 1 or 2:</p>

<pre><code>    self.weapon = choice - 1
</code></pre>

<p>but now we can store an actual enumeration object, like <code>Weapon.Fire</code> directly.  Conveniently, passing the value 1, 2, or 3 to <code>Weapon(...)</code> will return the corresponding enumeration object:</p>

<pre><code>    self.weapon = Weapon(choice)
</code></pre>

<p>Similarly, we can store our shield <code>choice</code> as a <code>Shield</code> enumeration object:</p>

<pre><code>    self.shield = Shield(choice)
</code></pre>

<p>The AI is similar, but instead of <code>randint</code>, we can use <code>choice</code> and select a random <code>Weapon</code> and random <code>Shield</code>:</p>

<pre><code>    self.weapon = random.choice(list(Weapon))
    self.shield = random.choice(list(Shield))
</code></pre>

<p>But how about that <code>decisionArray</code>?  First of all, that is a lousy name.  What does "decision array" mean?  A <code>Shield</code> will block one (or perhaps more) <code>Weapon</code> attacks.  Let's add a <code>.blocks</code> attribute to our <code>Shield</code> objects:</p>

<pre><code>Shield.Armour.blocks = { Weapon.Sword }
Shield.Magic.blocks = { Weapon.Spell }
Shield.Water.blocks = { Weapon.Fire }
</code></pre>

<p>(I'm using a <code>set()</code>, so more that one <code>Weapon</code> can be added.  For example, <code>Shield.Magic</code> could block both <code>{ Weapon.Spell, Weapon.Fire }</code> ... after all, it's <strong>MAGIC</strong>!  Feel free to experiment.)</p>

<p>What would the <code>takeTurn</code> method now look like?</p>

<pre><code>def takeTurn(self, player, opponent):

    if player.weapon not in opponent.shield.blocks:
        # apply damage
    else:
        # damage was blocked
</code></pre>

<p>That's pretty straight forward; no table required.  If the weapon is not in the set of things the shield blocks, we apply damage.</p>

<h1>PEP-8</h1>

<p><a href="https://lmgtfy.com/?q=pep+8&amp;s=d" rel="noreferrer">PEP 8</a> is a Style Guide for Python.  It describes things all Python programs should conform to, such as:</p>

<ul>
<li>variables and function names should be <code>snake_case</code> not <code>mixedCase</code>.</li>
</ul>

<h1>Updated Code</h1>

<pre><code>import random
from enum import Enum

Weapon = Enum("Weapon", "Sword, Spell, Fire")
Shield = Enum("Shield", "Armour, Magic, Water")

Shield.Armour.blocks = { Weapon.Sword }
Shield.Magic.blocks = { Weapon.Spell }
Shield.Water.blocks = { Weapon.Fire }

class Player:
    def __init__(self, name):
        self.name = name
        self.health = 100
        self.weapon = None
        self.shield = None

    def damage(self):
        points = random.randint(10, 35)
        self.health -= points

    def select_weapon(self):
        weapons = [f"{weapon.value}-{weapon.name}" for weapon in Weapon]
        weapons = ", ".join(weapons[:-1]) + " or " + weapons[-1]
        choice = int(input(f"Choose your weapon {weapons}:  "))
        self.weapon = Weapon(choice)

    def select_shield(self):
        shields = [f"{shield.value}-{shield.name}" for shield in Shield]
        shields = ", ".join(shields[:-1]) + " or " + shields[-1]
        choice = int(input(f"Choose your shield {shields}:  "))
        self.shield = Shield(choice)

class AiPlayer(Player):

    def select_weapon(self):
        self.weapon = random.choice(list(Weapon))

    def select_shield(self):
        self.shield = random.choice(list(Shield))

class Game:
    def __init__(self):
        self.game_over = False
        self.round = 0

    def new_round(self):
        self.round += 1
        print(f"\n***   Round: {self.round}   ***\n")  

    # Check if either or both Players is below zero health
    def check_win(self, player, opponent):
        if player.health &lt; 1 and opponent.health &gt; 0:
            self.game_over = True
            print("You Lose")
        elif opponent.health &lt; 1 and player.health &gt; 0:
            self.game_over = True
            print("You Win")
        elif player.health &lt; 1 and ai.health &lt; 1:
            self.game_over = True
            print("*** Draw ***")


    def display_result(self, player, opponent):
            print(f"{player.name} used a {player.weapon.name}, {opponent.name} used a {opponent.shield.name} Shield\n")
            print(f"{player.name} caused damage to {opponent.name}\n")

    def take_turn(self, player, opponent):

        if player.weapon not in opponent.shield.blocks:
            opponent.damage()
            current_game.display_result(player, opponent)
        else:
            print(f"{player.name} used a {player.weapon.name}, {opponent.name} used a {opponent.shield.name} Shield\n")
            print(f"{opponent.name} blocked {player.name}'s attack - No Damage")

# Setup Game Objects
current_game = Game()
human = Player("Mark")
ai = AiPlayer("Computer")

players = [human, ai]

# Main Game Loop
while not current_game.game_over:
    for player in players:
        player.select_weapon()
        player.select_shield()
    current_game.new_round()
    current_game.take_turn(human, ai)
    current_game.take_turn(ai, human)
    print(f"{human.name}'s health = {human.health}")
    print(f"{ai.name}'s health = {ai.health}")
    current_game.check_win(human, ai)
</code></pre>

<p>Notice in this code, if you added additional weapons and/or shields, nothing need be changed other than the <code>Enum(...)</code> declarations and the <code>.blocks = {}</code> lines.  The code itself creates the "1-Armour, 2-Magic or 3-Water" type choice strings, and will properly work with more than 3 choices.</p>
    </div>