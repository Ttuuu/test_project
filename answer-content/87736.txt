<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to points made by alexwchan:</p>

<ul>
<li><code>operator</code> is a module in the standard library. Use a different name for yours.</li>
<li><p>You could combine <code>calculate</code> and <code>_calculate</code> by giving a default value to <code>operatorArrayIndex</code>:</p>

<pre><code>def calculate(equation, operatorArrayIndex=0):
</code></pre></li>
<li><p>You rely on the fact that a <code>return</code> inside a <code>finally</code> block causes the exception to be discarded. That is correct, but it means ignoring <em>any</em> exception that may occur, which can hide bugs. Always catch the specific exception you expect with an <code>except</code> clause.</p></li>
<li>This calculator does not adhere to <a href="http://en.wikipedia.org/wiki/Order_of_operations#The_standard_order_of_operations" rel="nofollow">the standard order of operations</a> where multiplication has the same precedence as division, and addition the same as subtraction. For example, <code>1-2+3</code> evaluates to <code>-4</code> by this code.</li>
</ul>
    </div>