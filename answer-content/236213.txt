<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think that it's a bit weird to use classes as a way to return values, I don't know if that's common in python, but anyways. The problem with your code, in my opinion, is that if you are converting a unit to another, ex: cm to in, you don't need to create a class that will store information about other units, like: inches to m. That ends up happening in your code whenever you do     <code>print(Convert(val, unit_in, unit_out))</code>.
Here's my solution:</p>

<pre><code>class LengthUnit():
    # This class stores the unit's ratio to all the others
    def __init__(self, to_mm, to_cm, to_m, to_in, to_ft):
        self.to_mm = to_mm
        self.to_cm = to_cm
        self.to_m = to_m
        self.to_in = to_in
        self.to_ft = to_ft

# This function returns the conversion of the value
# The value is divided by the first number in the ratio,
# and multiplied by the second number (it's a tuple).
def convert_unit(val, unit_in, unit_out):
    unit_out = 'to_{}'.format(unit_out)
    try:
        return val / getattr(unit_in, unit_out)[0] * getattr(unit_in, unit_out)[1]
    except AttributeError:
        return 'Invalid Units'

if __name__ == '__main__':
    # In this dictionary, you store all the unit classes
    length_units = {'mm' : LengthUnit(to_mm= (1.0, 1.0), to_cm= (0.1, 1.0), to_m= (0.001, 1.0), to_in= (25.4, 1), to_ft= (305, 1)),
                    'cm' : LengthUnit(to_mm= (1.0, 10), to_cm= (1.0, 1.0), to_m= (100.0, 1.0), to_in= (2.54, 1), to_ft=(30.48, 1.0)),
                    'm' : LengthUnit(to_mm= (1.0, 1000), to_cm= (1.0, 100.0), to_m= (1.0, 1.0), to_in= (1.0, 39.37), to_ft=(1.0, 3.281)),
                    'in' : LengthUnit(to_mm= (1.0, 25.4), to_cm= (1.0, 2.54), to_m= (39.37, 1.0), to_in=(1.0, 1.0), to_ft= (12.0, 1)),
                    'ft' : LengthUnit(to_mm= (1.0, 305), to_cm= (1.0, 30.48), to_m= (3.281, 1.0), to_in= (1, 12.0), to_ft= (1.0, 1.0))
                    }

    print(convert_unit(5, length_units['cm'], 'm'))
    print(convert_unit(10, length_units['ft'], 'mm'))
    print(convert_unit(23, length_units['in'], 'm'))
    # If a non-defined unit is parsed, a error message is printed.
    print(convert_unit(5, length_units['mm'], 'miles'))
</code></pre>

<p>This is all a rough sketch, you can adjust the values if you want them to be more exact, or change the function if you want it to print the values instead of returning them.
Hope it was helpful! </p>
    </div>