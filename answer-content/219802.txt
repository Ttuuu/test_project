<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll focus on the <code>void loop()</code> part as you ask it, even though it can't be reviewed in isolation, especially from the <code>evals</code> structure.</p>

<p>So, what is this <code>loop</code> all about? You want to select the correct behavior based on the way the evaluated data has been tagged. Which mean we have three levers to act upon: the selection mechanism, the tagging mechanism, and the way the data is represented. I believe you can do better with all three:</p>

<ul>
<li>tagging your data with a <code>char*</code> is a bad idea. The first important thing to note is that comparing a <code>char*</code> with a string literal is undefined behavior. It works with most compilers, but if you enable all warnings, as you should do, you'll see it isn't guaranteed by the standard. It means that you should rely on proper string comparisons instead, character by character -e.g with <code>strcmp</code>- which are of course slow, if you really want to keep the string-tagging. But you don't: there are faster, simpler and more robust mechanisms such as <code>enum</code>s. </li>
</ul>

<p>For instance:</p>

<pre><code>enum class Type : char { NULL, INTEGER, FLOATING_PRECISION, STRING, BOOL };
</code></pre>

<ul>
<li><p>Representing your data with a struct containing as many members as there are possible types is a waste of space you should care about. You can use <code>union</code>s to make it more compact. </p></li>
<li><p>Selecting the correct behavior can be made in several ways, the one you chose among them. But, not wandering very far, you could have used a <code>switch</code>, which is arguably easier to read and can be optimized by the compiler: the program will go through the <code>if else</code> clauses in succession, whereas a <code>switch</code> can be turned into a jump-table with logarithmic look-up. If you want to explore further, and have a more scalable selection mechanism, you could have a try at a virtual function.</p></li>
</ul>
    </div>