<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like a great use-case for a Domain-Specific Language (DSL). If you had a nice compact DSL for representing automata like this, then you could replace all this boilerplate</p>

<pre><code>auto regex = generator.create_regex()
                      .then_match(regex_generator::match_range('a', 'z'))
                      .then_match(regex_generator::match_string("XXX"))
                      .then_match(regex_generator::match_space())
                      .then_match(regex_generator::match_group(
                          generator.create_regex()
                              .then_match(regex_generator::match_string("Hello"))
                              .then_match(regex_generator::match_space())))
                      .then_match(regex_generator::match_any_of("abcdef"))
                      .then_match(regex_generator::match_none_of("qreoi"))
                      .then_match(regex_generator::match_zero_or_more(
                          regex_generator::match_range('a', 'z')));
std::regex regex_obj(regex.str());
</code></pre>

<p>with a simple, readable <em>expression</em>. Just spitballing some syntax here; tell me how you like it â€”</p>

<pre><code>std::regex regex_obj = std::regex(
    "[a-z]XXX\\s(Hello\\s)[abcdef][^qreoi][a-z]*"
);
</code></pre>

<p>See how a complicated recipe like <code>generator.create_regex().then_match(regex_generator::match_any_of("abcdef")).then_match(regex_generator::match_none_of("qreoi"))</code> can be written super efficiently as <code>std::regex("[abcdef][^qreoi]")</code>!</p>

<p>Something like this is the motivating force behind Boost.Spirit, although Spirit uses operator overloading and other party tricks to avoid writing the quotation marks. I think you'd like Spirit.</p>

<p>The one downside of my proposed DSL for regular expressions is that I foolishly decided to use <code>\s</code> to represent what you called <code>regex_generator::match_space()</code>. This is unfortunate because C++ already uses <code>\</code> for something else, and so I ended up having to <em>escape</em> the backslash in my DSL syntax. If I were really feeling adventurous, I might do something like this:</p>

<pre><code>#define RX(...) std::regex(#__VA_ARGS__)

std::regex regex_obj = RX([a-z]XXX\s(Hello\s)[abcdef][^qreoi][a-z]*);
</code></pre>

<p>However, I would need to be cautious when splitting such a regex across source lines, or if I wanted to write a regex containing unbalanced parentheses for some reason.</p>
    </div>