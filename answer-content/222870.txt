<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Use the required <code>#include</code>s</h2>

<p>The code uses <code>std::vector</code> and <code>std::string</code> which means that it should <code>#include &lt;vector&gt;</code> and <code>&lt;string&gt;</code>.  It was not difficult to infer, but it helps reviewers if the code is complete.</p>

<h2>Use <code>0</code> instead of <code>NULL</code> for values that are not pointers</h2>

<p>The value <code>0</code> is a numeric quantity zero, but the value <code>NULL</code> is an <a href="http://en.cppreference.com/w/c/types/NULL" rel="nofollow noreferrer">implementation-defined null-pointer constant</a>.  It is <em>not</em> guaranteed to have the value 0.  For that reason, non-pointer values should be initialized to 0 and not <code>NULL</code>.</p>

<h2>Think carefully about signed vs. unsigned</h2>

<p>The code currently contains this function:</p>

<pre><code>bool Robot::isValidPosition(uint8_t x, uint8_t y)
{
    if (x &lt; 0 || x &gt; TABLETOP_MAX_X || y &lt; 0 || y &gt; TABLETOP_MAX_Y)
            return false;
    else
            return true;
}
</code></pre>

<p>If <code>x</code> is an unsigned quantity, it will not be possible that <code>x &lt; 0</code>.  For that reason, the statement can be shortened to this:  </p>

<pre><code>if (x &gt; TABLETOP_MAX_X || y &gt; TABLETOP_MAX_Y)
</code></pre>

<p>However, there's really no need for an explicit <code>if</code> statement here.  Instead, just return the appropriate boolean value:</p>

<pre><code>return x &lt;= TABLETOP_MAX_X &amp;&amp; y &lt;= TABLETOP_MAX_Y;
</code></pre>

<h2>Don't write <code>this-&gt;</code></h2>

<p>Within member functions <code>this-&gt;data</code> is redundant. It add visual clutter and does not usually aid in understanding. So for example, we have the existing <code>place</code> function:</p>

<pre><code>bool Robot::place(uint8_t x_place_pos, uint8_t y_place_pos, std::string facingDirection)
{
    if (x_place_pos &lt; 0 || x_place_pos &gt; TABLETOP_MAX_X || y_place_pos &lt; 0 || y_place_pos &gt; TABLETOP_MAX_Y)
            return false;

    if (this-&gt;facingDirections.count(facingDirection) == 0) //check if given facing direction was valid
            return false;

    this-&gt;x_pos = x_place_pos;
    this-&gt;y_pos = y_place_pos;

    this-&gt;facingDirection = this-&gt;facingDirections[facingDirection];

    this-&gt;placed = true;
    return true;
</code></pre>

<p>}</p>

<p>I'd write it like this instead:</p>

<pre><code>bool Robot::place(uint8_t x_place_pos, uint8_t y_place_pos, std::string dir)
{
    if (isValidPosition(x_place_pos, y_place_pos) &amp;&amp; facingDirections.count(dir)) {
        x_pos = x_place_pos;
        y_pos = y_place_pos;
        facingDirection = facingDirections[dir];
        placed = true;
    } else {
        placed = false;
    }
    return placed;
}
</code></pre>

<p>Note that I've used the previously mentioned <code>isValidPosition()</code> function and also explicitly set member variable <code>placed</code> to <code>false</code> if the <code>PLACE</code> command has failed.  This is different behavior from the original code, so you'll have to decide which you like better.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>printStatus</code> and member function of <code>Robot</code> does not alter the underlying object and therefore should be declared <code>const</code>.  This will require also changing from <code>reversedDirections[facingDirection]</code> to <code>reversedDirections.at(facingDirection)</code>.</p>

<h2>Sanitize user input better</h2>

<p>The code does not really do a very good job sanitizing user input.  For example, if the user enters the command "PLACE 2, 3, WEST", the program crashes because it expects that there will be no spaces except after the word "PLACE".  That's not very robust.</p>

<h2>Think of the user</h2>

<p>When the user enters a command such as "PLACE 2,3" omitting the direction, the program just says "Error! Not enough arguments for 'PLACE'" which is technically true, but not very informative to the user.  The message could, for example, show a valid sample command instead.</p>

<h2>Don't use exceptions for non-exceptional events</h2>

<p>Exceptions are for exceptional events and should be used <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Re-errors" rel="nofollow noreferrer">for error handling only</a>.  Having the user input incorrect command arguments is not exceptional and should be handled as part of the normal program flow and not with an exception.</p>

<h2>Reconsider the class design</h2>

<p>The <code>Robot</code> class has multiple <code>unordered_map</code> structures to deal with compass directions.  First, if they exist at all, they should probably be <code>static const</code> since all <code>Robot</code> instances would use the same directions.  An alternative would be to have a <code>Direction</code> class that would handle the translations to and from text to <code>uint8_t</code>.</p>

<h2>Don't write an empty constructor</h2>

<p>The <code>Robot</code> class uses in-class initializers which is <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-in-class-initializer" rel="nofollow noreferrer">good practice</a>, but that means that the default constructor will be automatically generated, so you could either omit it entirely (which I'd prefer) or write <code>Robot() = default;</code> if you want to make it even more explicitly clear.</p>

<h2>Pass const string reference</h2>

<p>The third argument to <code>place</code> ought to pass the string by reference to avoid creation of a temporary and can be <code>const</code>.  This is shown in the following suggestion.</p>

<h2>Name parameters in function prototypes</h2>

<p>The function prototype for <code>place</code> currently looks like this:</p>

<pre><code>bool place(uint8_t, uint8_t, std::string);
</code></pre>

<p>However, it would be better to name the parameters so that it would give a reader of the code a better idea of how to use the function.  I'd change it to this:</p>

<pre><code>bool place(uint8_t x, uint8_t y, const std::string&amp; dir);
</code></pre>

<h2>Check return values</h2>

<p>The <code>place()</code>, <code>move()</code>, etc. commands all return a <code>bool</code> to indicate success, but the program never uses those values.  I'd suggest using the return value to give the human controlling the <code>Robot</code> some feedback about what it is or is not doing.</p>

<h2>Eliminate "magic values"</h2>

<p>The values of <code>WEST</code>, <code>NORTH</code>, <code>RIGHT</code> etc. are sprinkled through the code, but they really ought to be named constants instead, and specifically a named constant static member.  If you have a C++17 compliant compiler, <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer">std::string_view</a> would be just the thing to use for these.</p>

<h2>Use include guards</h2>

<p>While many compilers support the use of <code>#pragma once</code> it is not standard and therefore not portable.  Use an include guard instead. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf8-use-include-guards-for-all-h-files" rel="nofollow noreferrer">SF.8</a>.</p>

<h2>Make header files self-contained</h2>

<p>The <code>helpers.h</code> file contains <code>stdafx.h</code> but that's not very easily maintained because if the contents of <code>stdafx.h</code> are changed, it implicitly changes the effect of this file as well.  Instead, you could be explicit about what's actually needed for the interface.  I would write that file like this:</p>

<pre><code>#ifndef SPLIT_H
#define SPLIT_H
#include &lt;vector&gt;
#include &lt;string&gt;

std::vector&lt;std::string&gt; split(const std::string&amp; in, const std::string&amp; delim);
#endif // SPLIT_H
</code></pre>

<p>I would also name it <code>split.h</code> to be much more suggestive as to the contents. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf11-header-files-should-be-self-contained" rel="nofollow noreferrer">SF.11</a>.</p>

<h2>Eliminate unused class</h2>

<p>Because, as you correctly note, the <code>Tabletop</code> class is not used, it should be removed from the project.</p>
    </div>