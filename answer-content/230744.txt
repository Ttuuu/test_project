<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are more interested in the performance, and on style there are sufficient mentions.</p>

<p>The Collatz sequence can be reduced:</p>

<pre><code>  if (iCpy &amp; 1) {
    iCpy *= 3;
    ++iCpy;
    ++ct;
  }
  iCpy &gt;&gt;= 1;
  ++ct;

while (iCpy != 1) {
   if (iCpy &amp; 1) {
    iCpy *= 3;
    ++iCpy;
    ++ct;
  }
  iCpy &gt;&gt;= 1;
  ++ct;
}
</code></pre>

<p>As a loop's intermediate step is not cached, instead first using a recursive function and on coming back update the result cache could be faster. Especially when the compiler eliminates the recursion.</p>

<pre><code>int collatz(int n) {
    if (n &lt;= 1) {
        return 0;
    }
    int st = n &amp; 1;
    if (st) {
        n = 3*n + 1;
    }
    n /= 2;
    return 1 + st + collatz(n);
}

int collatz(int n) {
    if (n &lt;= 1) {
        return 0;
    }
    int res = from_cache(n);
    if (res) {
        return res;
    }
    int n0 = n;

    int st = n &amp; 1;
    if (st) {
        n = 3*n + 1;
    }
    n /= 2;
    res = collatz(n);
    res += 1 + st;
    to_cache(n0, res);
    return res;
}
</code></pre>
    </div>