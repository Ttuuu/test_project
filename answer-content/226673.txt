<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, use a PEP8 checker. It will raise a lot of issues about whitespace and also tell you to change</p>

<blockquote>
<pre><code>            if visited[k[0]-1] == False:
</code></pre>
</blockquote>

<p>to either</p>

<pre><code>            if visited[k[0]-1] is False:
</code></pre>

<p>or</p>

<pre><code>            if not visited[k[0]-1]:
</code></pre>

<hr>

<p>The DFS is far more complicated than necessary:</p>

<ul>
<li>We don't need <code>visited</code>: given that we know that the graph is a tree, it suffices to track the previous vertex.</li>
<li>I'm used to DFS tracking vertices, not edges.</li>
<li>There's no reason for <code>dfs</code> to take <code>profit</code> as an argument: the profit that can be made in a rooted subtree is independent of the profit made getting there.</li>
</ul>

<p>Rewriting with those notes in mind, we can reduce it to</p>

<pre><code>    def start(self, power):
        return max(self.dfs(u, power, None) for u in range(1, self.nodes+1))

    def dfs(self, u, power, prev):
        return max((edge[2] + self.dfs(edge[0], power - edge[1], u)
                    for edge in self.graph[u]
                    if edge[0] != prev and edge[1] &lt;= power),
                   default=0)
</code></pre>

<hr>

<p>However, I think this is still inefficient in some cases. It's doing <span class="math-container">\$n\$</span> depth-first searches, for overall time <span class="math-container">\$\Theta(n^2)\$</span>. But those searches are traversing the same vertices. I believe (although I haven't written the code to verify it) that it should be possible to do it in <span class="math-container">\$\Theta(np)\$</span> where <span class="math-container">\$p\$</span> is the starting power. The idea would be to do one DFS, but for each subtree to return a complicated structure containing the largest score available solely within that subtree, and the largest scores available from the root of that subtree for different powers (which would obviously be monotonically increasing). Then it would be necessary to combine these.</p>

<p>(Floyd-Warshall is cubic time, so that would be worse. Similarly, matrix-based all-pairs-shortest-path algorithms for general graphs would be worse).</p>
    </div>