<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You need to make sure you always close resources that can be closed. That means either a <code>try-with-resources</code> block or a <code>try-finally</code> block. You can’t just leave <code>close</code> outside one of these constructs because if an exception gets thrown the <code>close</code> method might not get called.</p></li>
<li><p>Arguably, parsing the distances is easier to read using the stream API. You might not yet have learned that part of the language yet, in which case there’s nothing wrong with your loop except that <code>inFile</code> is never closed. Oh, no, it is, but waaaay too late. Keep the scope of the scanner as tight as possible.</p></li>
<li><p>Likewise, the code for finding the minimum distance can be written as a stream. Credit to @AnkitSont.</p></li>
<li><p>Variable names are really, really important. They should describe the information being pointed to. <code>l</code> is a terrible variable name because it doesn’t tell us anything. <code>list</code> would be a slight improvement, but <code>distances</code> would be much better.</p></li>
<li><p>Along the same lines, there’s no reason to cut short variable name lengths. <code>sc</code> instead of <code>scanner</code> doesn’t save you anything, and it makes it harder on the reader because they have to go dig up what an <code>sc</code> is. <code>minDist</code>, <code>diff</code> and <code>minDiff</code>can and should all be expanded out, and <code>minDist</code> might be better named <code>safeDistance</code>.</p></li>
<li><p>Declare variables where they’re first used, and limit their scope as much as possible. This reduces the cognitive load on the reader. <code>minDist</code> can be declared right before your output. It could arguably also be a constant in your class (<code>private static final double</code> declared at the class level). <code>diff</code> can be declared inside the <code>for</code> loop.</p></li>
<li><p>Even though the language allows curly braces to be optional for one-line blocks, it is widely regarded best practice that you always include curly braces. To do otherwise is inviting problems later when your code is modified.</p></li>
<li><p>Be careful with conditional checks. All of your code will work correctly if there are zero distances in the file until you hit <code>if (l.size() != 1)</code>. You really want to check <code>if (l.size() &gt; 1)</code>, right?</p></li>
<li><p>Your catch block isn’t really doing anything. Uncaught exceptions would effectively be handled the same way - execution would terminate and the stack trace would be logged to <code>System.err</code>.</p></li>
<li><p>It's nice to use <code>final</code> when you can to indicate that a variable isn't going to be reassigned. This also reduces the cognitive load of the reader.</p></li>
</ul>

<p>If you were to apply all these changes to your code, it might look something like:</p>

<pre><code>import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;
import java.util.stream.IntStream;

public final class Main {

    public static void main(final String[] args)
            throws IOException {

        final String filename;
        System.out.print("Please enter the name of the input file: ");
        try (final Scanner scanner = new Scanner(System.in)) {
            filename = scanner.nextLine();
        }

        final double[] distances =
                Files
                    .lines(Paths.get(filename))
                    .mapToDouble((line) -&gt; Double.parseDouble(line.split(",")[1]))
                    .sorted()
                    .toArray();

        final double minimumDifference =
                IntStream
                    .range(1, distances.length)
                    .mapToDouble(i -&gt; distances[i] - distances[i - 1])
                    .min()
                    .getAsDouble();

        final double safeDistance = 5;
        if (minimumDifference &lt; safeDistance) {
            System.out.println("The satellites are not in safe orbits.");
        } else {
            System.out.println("The satellites are in safe orbits.");
        }

        if (distances.length &gt; 1) {
            System.out.println("The minimum distance between orbits (km): " + minimumDifference);
        }
    }

}
</code></pre>
    </div>