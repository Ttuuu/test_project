<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The OO part seems to be OK when it comes to the type inheritance and the choice of an abstract class.</p>

<h1>Code review.</h1>

<h2>For the abstract class</h2>

<pre><code>public DiscountCard(int turnOver, int purchaseValue){
</code></pre>

<p>This is a public constructor for a class that cannot be instantiated, consider <code>protected</code> instead. It also contains a <code>turnOver</code>, but that's specific to an owner it seems to me. So that doesn't make sense without the <code>owner</code> string. Similarly, I don't think the card is <em>specific to one particular purchase</em>. The card is applied on a particular purchase.</p>

<pre><code>    setTurnover(turnOver);
    setPurchaseValue(purchaseValue);
</code></pre>

<p>Generally you'd set the fields directly, instead of calling the public methods. Calling methods can be dangerous, especially if they can be overridden.</p>

<pre><code>abstract void calculateDiscountRate();
</code></pre>

<p>For what? That depends on <code>purchaseValue</code> but that should not depend on any class fields, as already established.</p>

<pre><code>public String getOwner() {
    return owner;
}
</code></pre>

<p>Here you make a classic mistake: never leave your objects in an invalid state. As the owner may not be set, this method could return <code>null</code>.</p>

<pre><code>public void setOwner(String owner) {
    this.owner = owner;
}
</code></pre>

<p>No. If the <strong>holder</strong> of the card can change then this would be in the model, and I don't see that. Generally cards are <strong>personalized</strong> and are therefore not transferable (at least from the payment desk's point of view).</p>

<pre><code>public void setTurnover(int turnOver) {
    if(turnOver&gt;=0) {
        this.turnover = turnOver;
    }else{
        System.out.println("Turnover can't be less than 0.");
    }
}
</code></pre>

<p>The turnover may actually be negative if the customer decided to return. In this kind of situations it is important to perform a reality check: what could happen. Furthermore, I guess that this should be called after each period of time (it's for the "previous month" according to the instructions. So call it, say, <code>setTurnoverOfLastMonth()</code> or something similar.</p>

<pre><code>public void setDiscountRate(double discountRate) {
    this.discountRate = discountRate;
}
</code></pre>

<p>Is that really a public call, you override the discount rate? Seems to me that you'd have to switch cards for that.</p>

<h2>For the gold card:</h2>

<pre><code>calculateDiscountRate();
</code></pre>

<p>By now you should have noticed that there are more rates possible, you are still trying to get along with one.</p>

<pre><code>setDiscountRate(2);

setDiscountRate(getTurnover()/100 + getDiscountRate());
</code></pre>

<p>And you aren't just overwriting the single discount rate in the second call?</p>

<pre><code>if(getDiscountRate()&gt;10){
    setDiscountRate(10);
}
</code></pre>

<p>Leukoplast patching ain't gonna help, son.</p>

<h2>For the store calculator</h2>

<p>Where are the purchases? In the card?</p>

<p>I'd expect something like:</p>

<pre><code>public Payment calculateResult(double purchaseValue);
</code></pre>

<p>Where the <code>Payment</code> contains all the details (card used, discount percentage, discount value and of course the final price).</p>

<p>Note too that the examples have a purchase value with <code>.00</code> behind it. Somehow that indicates to me that every cent is appreciated (and you store as an <code>int</code> - which is actually fine <strong>if it means cents</strong>). </p>

<h2>For the PayDesk</h2>

<p>Just prints out stuff. Maybe correct, maybe it isn't, but just printing the bill is not what I was expecting. Probably can be merged with the <code>StoreCalculator</code> although I like the fact that you've created a separate calculator. That would certainly be a good idea for a more complicated <code>PayDesk</code> class.</p>

<hr>

<p>Beware: it says in your requirements: "create instances with sample data as shown in Example outputs section;"</p>

<p>Now I don't personally think that the purchase should ever be part of the card data, but if it is stated this way I'd almost include it myself as a field.</p>

<hr>

<p>Very non-nerdy of me, but I'd include a welcoming message for the card holder (Thank you for your purchase, ). Your GOLD CARD discount is: ... Etc... This would show your employer that you can act outside what is basic development.</p>

<p>And probably I'd also welcome non-card holders to make a purchase.</p>
    </div>