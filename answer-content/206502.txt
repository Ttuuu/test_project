<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Since that <code>MIN_DIFFICULTY</code> and <code>MAX_DIFFICULTY</code> and that <code>MIN_SCORE</code>  and <code>MIN_SCORE</code> come in pair, you could use <code>std::pair</code> to store them.</p></li>
<li><p>You can use <code>std::array</code> instead of <code>std::vector</code> as you know the size of your container at compile time.</p></li>
<li>You can retrieve min and max score in one call to <code>std::minmax</code> or <code>std::minmax_element</code>.</li>
<li>Instead of a loop, you can use <code>std::accumulate</code> or <code>std::reduce</code> to adds all scores together. </li>
<li>With <code>std::stof</code> you dont have the overhead of <code>std::stringstream</code> (But it's a matter of taste)</li>
<li>for inputing float you should use something like this:</li>
</ul>

<p>(From <a href="http://www.augustcouncil.com/~tgibson/tutorial/iotips.html#directly" rel="nofollow noreferrer">here</a>)</p>

<pre><code>// #include&lt;limits&gt; //for numeric_limits
//...
float fl;
while(!(std::cin &gt;&gt; fl)) {
  std::cin.clear();
  std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
}
</code></pre>
    </div>