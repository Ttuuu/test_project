<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>
<p>Wow. Correct implementation.<br>
Your the first person to post what I would call a proper implementation.</p>
<p>Good Job.</p>
<h2>Code Review</h2>
<h3>Prefer <strong>NOT</strong> to use <code>#define</code></h3>
<pre><code>#define P 5
</code></pre>
<p>Nearly every use of <code>#define</code> has a better alternative in C++ (unless you are really abstracting OS specific details).</p>
<p>In this case case you are  defining a constant integer. There is an explicit version of that for C++.</p>
<pre><code>constexpr int globalConstantP = 5;  // More than 1 letter
</code></pre>
<p>While we are on <code>P</code>. A variable of length 1 is not very meaningful. Your code should be self documenting. This really means your variable names should be meaningful.</p>
<h3>Avoid Platform specific includes.</h3>
<pre><code>#include &lt;Windows.h&gt;
</code></pre>
<p>This is the one place where <code>#define</code> comes in useful. Abstracting platfrom specific details. The Windows and Unix versions of sleep are different.</p>
<pre><code>#if defiend(WIN32)

#include &lt;Windows.h&gt;
#define  doSleep(X)     Sleep(X)

#elif defined(__linux__)

#include &lt;unistd.h&gt;
#define  doSleep(X)     sleep(X * 1000)

#elif defined (__APPLE__) &amp;&amp; defined (__MACH__)

#include &lt;unistd.h&gt;
#define  doSleep(X)     sleep(X * 1000)

#else

#error "Unsupported Platform"

#endif
</code></pre>
<h3>Avoid using pointers</h3>
<pre><code>std::thread *threads[P];
</code></pre>
<p>In modern C++ you should never (or practically never) be calling new and delete. You should use automatic variables for all situations so that you can make sure the constructor/destructor and thus RAII kicks in to do the resource management. When you do need dynamically allocated objects they should be wrapped in smart pointers so that they can not leak.</p>
<p>Here you don't need pointers at all. Just use <code>std::thread</code>.</p>
<h3>Avoid global variables</h3>
<pre><code>std::thread *threads[P];
std::mutex mtx[P]; //forks
</code></pre>
<p>Global mutable state is the bane of many problems in program. But especially testing. It is best to pass objects to functions (by reference) and manipulate them or even better to just manipulate the object by calling the member functions.</p>
<p>I would have created a class called <code>Table</code> that had the array of <code>std::thread</code> and <code>std::mutex</code> objects. Then your functions below become methods than manipulate the object.</p>
<h3>cout!!!</h3>
<pre><code>std::mutex cout;
</code></pre>
<p>That is too easy to be confused with <code>std::cout</code>. Please put it in a namespace and the very least. I would actually create your own stream class (one that can be locked) and pass that as the output object to the constructor of your <code>Table</code> class.</p>
<h3>Thinking should sleep</h3>
<p>It take times to think.<br>
It should also take time to think.</p>
<pre><code>       if (pickUp(leftIndex, rightIndex)) {

            std::cout &lt;&lt; "Philosopher " &lt;&lt; philID &lt;&lt; " eats.\n";

            doSleep(rand() % 20);

            // Don't put Down the forks until you have had time
            // time to do some eating. Remeber you are simulating work
            // after having obtained the resources. The work should
            // take none zero time.
            putDown(leftIndex, rightIndex);

        else {
            std::cout &lt;&lt; "Philosopher " &lt;&lt; philID &lt;&lt; " thinks.\n";

            // When the philosopher is thinking the time should
            // also be none zero as you are simulating doing work
            // that is not related to the resource.
            doSleep(rand() % 20);
        }
</code></pre>
<h3>Joinable</h3>
<pre><code>        if (threads[i - 1]-&gt;joinable())
            threads[i - 1]-&gt;join();
</code></pre>
<p>No need to test for joinable if you have never called detach on your thread.</p>
<h3>Return 0</h3>
<pre><code>    return 0;
</code></pre>
<p>No need to <code>return 0</code> at the end of main(). It does that automatically.</p>
<p>Normally you use <code>return 0</code> to indicate there was a success <strong>BUT</strong> also to indicate that it could fail and there is another way to exit that could return a non zero value. When I see a <code>return 0</code> I immediately start looking for alternative returns paths to see under what conditions the application will fail.</p>
<p>So if your application can not fail don't return anything (this is an indication that it can't fail). The compiler will add the <code>return 0</code> if one was not provided.</p>
    </div>