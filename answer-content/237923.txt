<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems you know that getting them individually is a bad idea but you are stuck with some legacy code.  For your new code the biggest issue you will have is this line.</p>

<pre><code>if (MemoryCache.Default["school_" + schoolId] != null)
{
    return (School)MemoryCache.Default["school_" + schoolId.ToString()];
}
</code></pre>

<p>you should retrieve the value and store in a variable.  Then check if that variable is null or not and return the variable if not null.  The odds are low but there is a chance the value is there for the If statement but ejected from the cache before it runs the statement to return the value.</p>

<p>If you want it to be multi-threaded then you would also need to change some code.  For now I assume you don't care about that part.  </p>

<p><strong>Update for multi threaded</strong></p>

<p>While memory cache is thread safe your code has the issue of potentially allowing calls that happen at the same time to hit the database.   In pseudocode you code does this</p>

<ol>
<li>Check if it's in the cache</li>
<li>retrieve the value from cache</li>
<li>do the database call</li>
<li>save the value in the cache</li>
</ol>

<p>I already said in a non-multi threaded environment how 1 &amp; 2 can cause issue.  In a multi threaded a thread 1 could be doing step 3 and thread 2 could check step 1 and it will return it's not in the cache.  Then thread 2 skips to step 3, because it's not in the cache yet because thread 1 hasn't saved it there yet.   In the end it will not throw, as memory cache is threadsafe but will create extra database calls that are then ignored. </p>

<p>If you are using .net core then you can just use GetOrCreate method. In .net framework we can create that method ourselves. </p>

<p>-- .net framework from here on out</p>

<p>The easiest way is to use Lazy to hold the call to the database and store the Lazy object in the cache.  MemoryCache has a method for <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.caching.memorycache.addorgetexisting?view=netframework-4.8" rel="nofollow noreferrer">AddOrGetExisting</a>_that will handle if it should insert the value or return it back.  The downside is now the call is in the cache if the call threw an exception we cached that exception, typically not what is desired.  We will need to check for that and evict the cache if it's an exception.</p>

<pre><code>public static TItem GetOrCreate&lt;TItem&gt;(this MemoryCache cache, string key, Func&lt;string, TItem&gt; factory, CacheItemPolicy policy)
{
    // wrap the factory in a lazy so we don't execute the factory every time
    var lazy = new Lazy&lt;TItem&gt;(() =&gt; factory(key));
    // cache will return the value from cache or null if it inserted it
    var result = cache.AddOrGetExisting(key, lazy, policy) as Lazy&lt;TItem&gt; ?? lazy;
    // now the factory is wrapped in the cache. if it threw an Exception then all callers would get the Exception
    //  trap for that an evict the cache if its an exception
    try
    {
        return result.Value;
    }
    catch (Exception e)
    {
        // evict factory that threw exceptions
        cache.Remove(key);
        throw;
    }
}
</code></pre>

<p>You could also make this handle async as well with some minor tweaks.</p>
    </div>