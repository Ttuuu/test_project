<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Highlevel review</h1>
<ul>
<li><p>Dunder methods are reserved by the Python language and reserves the right to make any unofficial dunders not work in a future Python version. Don't name things <code>__init_logger__</code> when you can use a sunder, <code>_init_logger_</code>, or private, <code>_init_logger</code>, name instead.</p>
</li>
<li><p>Your type hint <code>logging.getLogger</code> is neither a type nor does it return a type. You should use <code>logging.Logger</code> instead.</p>
</li>
<li><p>A lot of your documentation is documenting the types of the values. Any document generator worth their salt will have a way to add the type hints to the output.</p>
</li>
<li><p>Your style is clear and mostly consistent. Your code looks clean. Nice job!</p>
</li>
</ul>
<h1>Lowlevel review</h1>
<h2>Logging</h2>
<ul>
<li>Warning that a default value is used is unhelpful. You can write a decorator that logs <code>self.conf</code> and the arguments if this information is needed.</li>
</ul>
<blockquote>
<pre class="lang-py prettyprint-override"><code>msg = 'No Database specified.'
self.logger.error(msg)
if self.verbose &gt;= 1:
    warn(msg)
raise ValueError(msg)
</code></pre>
</blockquote>
<ul>
<li><p>Logging exceptions without handling them is terrible. There are two ways this can go:</p>
<ol>
<li>
<ul>
<li>The exception propagates and is unhandled by the rest of the code.</li>
<li>Your code now errors and exits giving you a complete traceback of the problem.</li>
<li>You don't look at the logs because you have the full traceback.</li>
</ul>
</li>
<li>
<ul>
<li>The exception propagates and is handled by the rest of the code.</li>
<li>You don't look at these in the logs because they've been handled.</li>
</ul>
</li>
</ol>
<p>This is bad as it clogs up your logs with useless information.
After a while users of these logs will recognize that information at the error level is predominantly useless and will start to ignore the level completely.
This will mean that your logs become redundant and fail to notify you / your team of actual problems.</p>
<p>This problem is also explained in the boy who cried wolf fable from around 500 BCE.</p>
</li>
<li><p>Don't use <code>warnings.warn</code> and <code>raise</code> an exception at the same time is not constructive.
Much like logging and <code>raise</code>ing, <code>raise</code> makes the other obsolete.</p>
</li>
<li><p>Using <code>warnings.warn</code> and <code>logging.error</code> at the same time is not constructive.
You're basically just calling <code>logging.error</code> twice.</p>
</li>
</ul>
<p>The times you should use these are:</p>
<ul>
<li><p><strong>Exceptions</strong>: If you have entered a breaking state.</p>
</li>
<li><p><strong>Warnings</strong>: If you need to notify the user of your library of potentially breaking state.</p>
<ul>
<li>If you are in the process of renaming a function, the old name should warn the user.</li>
<li>If you have ambiguity in your syntax, <code>[b]foo [i]bar[/b] baz[/i]</code>. Is that <strong>foo</strong> <em>bar baz</em>, <strong>foo bar</strong> <em>baz</em> or <strong>foo</strong> <em><strong>bar</strong></em> <em>baz</em>?</li>
</ul>
</li>
<li><p><strong>Logging</strong>: To help track down bugs.</p>
</li>
</ul>
<h2>Other</h2>
<ul>
<li><p>Your try in <code>connect_to_client</code> is very large that it's unclear what you're even testing.
You can just build a dictionary to pass with the extra keywords.</p>
</li>
<li><p>Personally I think <code>connect_to_client</code> shouldn't even be defined on the class.</p>
</li>
<li><p>You can have a key error in <code>connect_to_database</code>.</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>if self.conf[DATABASE] not in self.client.database_names():
</code></pre>
</blockquote>
</li>
<li><p>In <code>perform_bulk_operations</code> you take a value <code>list_operations_to_perform_in_bulk</code> which defaults to <code>None</code> and then, which you change to <code>[]</code> and then you error if it's empty. Change it from a default to a required argument.</p>
</li>
</ul>
<pre class="lang-py prettyprint-override"><code>import logging
from logging.handlers import TimedRotatingFileHandler

from pymongo import MongoClient
from pymongo import errors
from warnings import warn

HOST = 'MONGODB_HOST'
DEFAULT_HOST = 'localhost'
PORT = 'MONGODB_PORT'
DEFAULT_PORT = '27017'
TIMEOUT = 'MONGODB_CONN_TIMEOUT'
DATABASE = 'MONGODB_DB'
COLLECTION = 'MONGODB_DB_CLIENT'
USERNAME = 'MONGODB_USERNAME'
PASSWORD = 'MONGODB_PASSWORD'
LOG_FILE = 'LOG_FILE'


def _init_logger(log_file) -&gt; logging.Logger:
    log_formatter = logging.Formatter('%(asctime)s|%(name)-12s|%(levelname)-8s|%(message)s')
    log_handler = TimedRotatingFileHandler(filename=f'{log_file}', when='s', interval=10)
    log_handler.setFormatter(log_formatter)

    logger = logging.getLogger(__name__)
    logger.addHandler(log_handler)
    logger.setLevel(logging.DEBUG)
    return logger


def connect_to_client(self, host=DEFAULT_HOST, port=DEFAULT_PORT, timeout=3000, username=None, password=None):
    kwargs = {}
    if username is not None and password is not None:
        kwargs = {
            'username': f"{username}",
            'password': f"{password}",
            'authSource': 'admin'.
        }

    client = MongoClient(
        host=f'{host}:{port}',
        serverSelectionTimeoutMS=timeout,
        **kwargs
    )
    client.server_info()
    return client


class MongoDB:
    def __init__(self, conf, verbose=5):
        self.conf = conf
        self.client = None
        self.database = None
        self.collection = None
        self.verbose = verbose
        self.logger = _init_logger(self.conf.get(LOG_FILE, 'db.log'))

    def connect_to_client(self, host=DEFAULT_HOST, port=DEFAULT_PORT, timeout=3000, username=None, password=None):
        host = self.conf.get(HOST, host)
        port = self.conf.get(PORT, port)
        self.client = connect_to_client(
            host=host,
            port=port,
            timeout=self.conf.get(TIMEOUT, timeout),
            username=self.conf.get(USERNAME, username),
            password=self.conf.get(PASSWORD, password),
        )
        self.logger.debug(f'Created connection to {host}:{port}')

    def connect_to_database(self, database_name=None):
        database_name = self.conf.get(DATABASE, database_name)
        if database_name is None:
            raise ValueError('No Database specified.')
    
        if self.conf[DATABASE] not in self.client.database_names():
            self.logger.debug(f'Database \'{database_name}\' does not exist. Creating database.')

        self.database = self.client[database_name]
        self.logger.debug(f'Connected to database: \'{database_name}\'')
            
    def connect_to_collection(self, collection_name=None):
        collection_name = self.conf.get(COLLECTION, collection_name)
        if collection_name is None:
            raise ValueError('No Collection specified.')

        if collection_name not in self.database.collection_names():
            self.logger.debug(f'Collection \'{collection_name}\' does not exist. Creating collection.')

        self.collection = self.database[collection_name]
        self.logger.debug(f'Connected to Collection: \'{collection_name}\'')

    def perform_bulk_operations(self, list_operations_to_perform_in_bulk):
        if not list_operations_to_perform_in_bulk:
            raise ValueError('No operations to perform.')
    
        res = self.collection.bulk_write(list_operations_to_perform_in_bulk, ordered=False)
        self.logger.debug(res.bulk_api_result)
        return res
</code></pre>
<h1>Conclusion</h1>
<ul>
<li><p>You are overzealous with your logging. And to be honest I see no reason to use a level above debug here.</p>
</li>
<li><p>Your class should probably not exist.</p>
<ol>
<li>The methods would be better in every way if you just changed them to functions.</li>
<li>You are abusing classes, it's not fully initialized upon exiting <code>__init__</code> and you're abusing state.</li>
</ol>
</li>
</ul>
    </div>