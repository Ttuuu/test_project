<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>General pieces of advice that I will apply to your posted code:</p>

<ol>
<li>Avoid generating single-use variables.</li>
<li>Try to avoid excessively long lines of code.</li>
<li>Avoid repeatedly writing static text in your code</li>
<li>Some brevity in variable naming is okay, but not to the detriment of readability.</li>
<li>Avoid excessive nesting of control structures (e.g. <code>if</code>, <code>foreach</code>, etc) because they increase horizontal scrolling when reading your code.</li>
<li>I have a distaste for switch blocks, but in this case, it is a sensible choice.  Abstracting that process into a new method, afford the use of <code>return</code> instead of the usual <code>break</code> so the syntax is slightly more compact.</li>
<li>Try to separate processing from printing (as much as possible).</li>
</ol>

<p>It seems you don't need to validate the defining character(s) of the <code>$p["id"]</code>, you aren't even using the hyphen.  For this reason, you don't need to call any functions to extract the first (single-byte) character -- you can use square brace syntax to access a character by its offset (<code>0</code> in this case).</p>

<p>I'm going to try to maintain some semblance of tabbing within the html elements without making line width suffer too badly.  This can be accomplished in a number of ways.  I won't be offended if you or anyone else choose to declare the concatenation of <code>$html</code> differently.</p>

<p>I can imagine that <code>$a</code> means <code>array</code>, but it would be better to give it a more descriptive name.  Variables like <code>$string</code>, <code>$array</code>, <code>$data</code>, <code>$number</code> are often good candidates for renaming.  Scripts often have multiple arrays within them.</p>

<p>If your project actually demands a bit more validation on the leading substring of <code>$p["id"]</code>, then try using non-regex tools like <code>substr()</code> before resorting to <code>preg_</code> functions.</p>

<p>Untested Code:</p>

<pre><code>public static function formatQuoteValue($id, $a_ky) {
    switch ($id[0]) {
        case "s": return $a_ky;
        case "d": return money_format('%=9.4n', (double)$a_ky);
        case "v": return money_format('%=*!#4.0n', (double)$a_ky);
        case "t": return date('l, d F Y \‚è± H:i T \(P \U\T\C\)', (double)$a_ky/1000);
        case "p": return money_format('%=*!#4.4n', (double)$a_ky) . '%';
        default:  return $a_ky . '%';
    }
}

public static function getQuoteHTML($a) {
    $html = '&lt;div class="ro"&gt;' .
              '&lt;a href="#"' .
                ' class="s18 ro tx-1 b119 r100 t-21 p-2 br-5 mv-3"' .
                ' onclick="J.s({d:this}); return false;"' .
                ' title="' . $a["symbol"] . ' latest quote"&gt;' .
                ' üíπ Quote: ' . date('l, d F Y \‚è± H:i T', microtime(true)) .
              '&lt;/a&gt;' .
              '&lt;div class="di-0"&gt;' .
                '&lt;div class="p-3"&gt;';

    foreach (UpdateStocks::getQuoteParams() as $param) {
        if (!isset($param["id"]) || empty($a[$param["ky"]])) {
            continue;
        }
        $class = 'di-1 t-21 m-1 br-3 p-2 b119 r1' . rand(20,99);
        $html .= '&lt;p id="' . $param["id"] . '"&gt;';
        $html .=   '&lt;b class="' . $class . '"&gt;' . $param["lb"] . '&lt;/b&gt;: ';
        $html .=   '&lt;b class="' . $class . '"&gt;' . UpdateStocks::formatQuoteValue($param["id"], $a[$param["ky"]]) . '&lt;/b&gt;';
        $html .= '&lt;/p&gt;';
    }

    $html .=     '&lt;/div&gt;' .
               '&lt;/div&gt;' .
             '&lt;/div&gt;';

    return $html;
}
</code></pre>
    </div>