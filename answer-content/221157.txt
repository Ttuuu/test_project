<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use <a href="https://en.cppreference.com/w/cpp/container/span" rel="nofollow noreferrer"><code>std::span</code></a> (there are free backports if needed), and see most of the boilerplate evaporate:</p>

<pre><code>void replyMsg(std::span&lt;char&gt; msg, std::span&lt;const char&gt; receiv, std::span&lt;const char&gt; resps) {
    if (msg.size() == 3 + receiv.size() &amp;&amp; msg.subspan(2, receiv.size()) == receiv)
        for (auto x : resps)
            serialPC.putc(x);
}

void searchFunction(std::span&lt;char&gt; msg) {

    static const char readReq[] = { 0x92 };
    static const char readResp[] = { 0x00, 0x02, 0x12, 0x34, 0xA1 };

    static const char writeReq[] = { 0x0A, 0xE0 };
    static const char writeResp[] = { 0x00, 0x02, 0x11, 0x01, 0x98 };

    static const char resetReq[] = { 0x00, 0xFF };
    static const char resetResp[] = { 0x00, 0x21, 0x23, 0x0E, 0xAE, 0x11, 0x3A };

    static const char verReq[] = {0x00, 0xA2};
    static const char verResp[] = {0x00, 0x03, 0x82, 0xAA, 0x07, 0x88, 0xA9};

    static const char typeReq[] = {0x00, 0x67};
    static const char typeResp[] = {0x00, 0x03, 0x00, 0x00, 0xC4, 0x77};

    static const char askReq[] = {0x00, 0x55};
    static const char askResp[] = {0x00, 0x01, 0xFE, 0xFF};

    replyMsg(msg, readReq, readResp);
    replyMsg(msg, writeReq, writeResp);
    replyMsg(msg, resetReq, resetResp);
    replyMsg(msg, verReq, verResp);
    replyMsg(msg, typeReq, typeResp);
    replyMsg(msg, askReq, askResp);
}
</code></pre>

<p>A miniscule amount of templating (alternatively use a function-template for <code>bytes</code>), and it's easily condensed even more:</p>

<pre><code>template &lt;char... x&gt;
static constexpr char bytes[] = { x...};

void searchFunction(std::span&lt;char&gt; msg) {
    /* read  */ replyMsg(msg, bytes&lt;0x92 /* */&gt;, bytes&lt;0x00, 0x02, 0x12, 0x34, 0xA1&gt;);
    /* write */ replyMsg(msg, bytes&lt;0x0A, 0xE0&gt;, bytes&lt;0x00, 0x02, 0x11, 0x01, 0x98&gt;);
    /* reset */ replyMsg(msg, bytes&lt;0x00, 0xFF&gt;, bytes&lt;0x00, 0x21, 0x23, 0x0E, 0xAE, 0x11, 0x3A&gt;);
    /* ver   */ replyMsg(msg, bytes&lt;0x00, 0xA2&gt;, bytes&lt;0x00, 0x03, 0x82, 0xAA, 0x07, 0x88, 0xA9&gt;);
    /* type  */ replyMsg(msg, bytes&lt;0x00, 0x67&gt;, bytes&lt;0x00, 0x03, 0x00, 0x00, 0xC4, 0x77&gt;);
    /* ask   */ replyMsg(msg, bytes&lt;0x00, 0x55&gt;, bytes&lt;0x00, 0x01, 0xFE, 0xFF&gt;);
}
</code></pre>

<p>Far less code, and it's far simpler too.</p>
    </div>