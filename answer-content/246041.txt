<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You really need to store the original values into an <code>int</code> array or collection. The reason behind that is you don't need to recasting the values every now and then. Keep the original values in their correct form, and then cast them to <code>string</code> or any other type whenever needed. If you just keep going doing the same concept (using strings on everything) you'll end up having many parts that need to be refactored, and probably it will impact the overall performance.</p>
<p>Your Pin Code can be simplified by using <code>string[]</code> for the code mask, and <code>List&lt;int&gt;</code> for the actual integers.</p>
<pre><code>public string PinCode { get; set; } = string.Empty;

private string[] _codeMask = new string[] { "_", "_", "_", "_" };

private List&lt;int&gt; _pinNumber = new List&lt;int&gt;(4); // limit list size to 4 elements, if you remove it would dynamic size. 

private async Task&lt;bool&gt; SelectedButton(Button button)
{
    if(PinCode == 4) { return true; }
        
    // validate input
    if(int.TryParse(button.Text, out int number) &amp;&amp; (number &lt; 10 &amp;&amp; number &gt; 0))
    {
       if(_pinNumber.Count == 4) { return; } 
        
        _pinNumber.Add(number);
        
        var maskPosition = _pinNumber.Count - 2;
        
        var numberPosition = _pinNumber.Count - 1;
     
         _codeMask[numberPosition] = number.ToString();                                        
            
        if(maskPosition != -1)
        { 
          _codeMask[maskPosition] = "*";
        }
        
        PinCode = String.Join(' ', _codeMask);              
    }
    
    return false;
}
</code></pre>
<p>Then just use the <code>_codeMask</code> or <code>_pinNumber</code> to assign their values to any releated variable. But I would suggest you get rid of <code>PinNumberOne</code> , <code>PinNumberX</code> variables, and use <code>_pinNumber[x]</code> directly. would be more appropriate and much maintainable.</p>
    </div>