<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, this is the updated class. Added your suggestions</p>

<p><strong>Main.h</strong></p>

<pre><code>/*
 * Date.h
 *
 * Usage:
 * Create object, and then call Set(day, month, year)
 * Throws invalid argument exception if Teb 29th is set with the wrong year (is not leap year)
 * TODO: throw invalid argument exception if date is invalid
 * Use GetDate() to get date formatted as "dd/mm/yyyy"
 * Use GetAscTime() to get date formatted as "ddd mmm yy hh:mm:ss yyyy"
 * Substraction can be done between dates with DateDiff(), it will return the differences in days
 *  i.e. Date today - Date yesterday = 1
 */
#include &lt;ctime&gt;
#include &lt;string&gt;

#ifndef DATE_H_
#define DATE_H_

class Date
{
public:
    Date();
    Date(int day, int month, int year);
    void Set(int day, int month, int year);
    std::string GetDate() const;
    std::string GetAscTime() const;
    std::string GetUTC();
    int DateDiff(const Date&amp; rhs);
    time_t GetDateValue() const;
    bool operator == (const Date&amp; rhs);
    Date operator + (int days);
    Date operator - (int days);

private:
    std::time_t ttTime;
    std::tm tmTime;
    mutable char szTimeBuffer[255];
    static constexpr int nSecPerDay = 60 * 60 * 24;
};

#endif /* DATE_H_ */
</code></pre>

<p><strong>Main.cpp</strong></p>

<pre><code>/*
 * Date.cpp
 */
#include "Date.h"
#include &lt;stdexcept&gt;

Date::Date()
    : ttTime(0), tmTime({0}), szTimeBuffer("")
{
    std::time(&amp;ttTime);
    localtime_s(&amp;tmTime, &amp;ttTime);
}

Date::Date(int day, int month, int year)
    : ttTime(0), tmTime({0}), szTimeBuffer("")
{
    Set(day, month, year);
}

void Date::Set(int day, int month, int year)
{
    tmTime.tm_mday = day;
    tmTime.tm_mon = month - 1;
    tmTime.tm_year = year - 1900;

    ttTime = std::mktime(&amp;tmTime);

    // Temp date constructed to check if Feb 29th for the specified year exists
    // checks if the value of 29/Feb/YYYY is the same as 01/Mar/YYYY
    // if true, means that year is not leap year and should not have Feb 29th
    // throws invalid argument exception

    std::tm tmTemp = {0};
    std::time_t ttTemp = 0;

    // Specify march 1st, use same year as input
    tmTemp.tm_mday = 1;
    tmTemp.tm_mon = month;
    tmTemp.tm_year = tmTime.tm_year;

    ttTemp = std::mktime(&amp;tmTemp);

    if(ttTemp == ttTime)
    {
        std::string errMsg("Error!, Feb 29th doesn't exist in year ");
        errMsg.append(std::to_string(tmTime.tm_year + 1900));
        errMsg.append("!!");
        throw( std::invalid_argument(errMsg) );
    }

}

int Date::DateDiff(const Date&amp; rhs)
{
    return (std::difftime(ttTime, rhs.ttTime) / nSecPerDay);
}

std::string Date::GetDate() const
{
    std::strftime(szTimeBuffer, 255, "%d/%m/%y", &amp;tmTime);
    return std::string(szTimeBuffer);
}

std::string Date::GetAscTime() const
{
    asctime_s(szTimeBuffer, 255, &amp;tmTime);
    return std::string(szTimeBuffer);
}

time_t Date::GetDateValue() const
{
    return ttTime;
}

bool Date::operator ==(const Date &amp;rhs)
{
    return (
        (tmTime.tm_year == rhs.tmTime.tm_year) &amp;&amp;
        (tmTime.tm_mday == rhs.tmTime.tm_mday) &amp;&amp;
        (tmTime.tm_mon == rhs.tmTime.tm_mon)
    );
}

Date Date::operator +(int days)
{
    std::tm tmTemp = {0};
    std::time_t ttTemp = ttTime + (days * nSecPerDay);
    localtime_s(&amp;tmTemp, &amp;ttTemp);
    Date dTemp(tmTemp.tm_mday, tmTemp.tm_mon + 1, tmTemp.tm_year + 1900);
    return dTemp;
}

std::string Date::GetUTC()
{
    std::tm tmTemp = {0};
    gmtime_s(&amp;tmTemp, &amp;ttTime);
    std::strftime(szTimeBuffer, 255, "%c %z", &amp;tmTemp);

    return std::string(szTimeBuffer);
}

Date Date::operator -(int days)
{
    return operator+(-days);
}
</code></pre>
    </div>