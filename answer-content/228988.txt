<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Make sure to follow naming conventions. You name two variables inappropriately:</p>

<pre><code>My_table = soup.find('table',{'class':'wikitable sortable'})
My_second_table = My_table.find_next_sibling('table')
</code></pre>

<p>Those are just normal variables, not class names, <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="noreferrer">so they should be lower-case</a>:</p>

<pre><code>my_table = soup.find('table',{'class':'wikitable sortable'})
my_second_table = my_table.find_next_sibling('table')
</code></pre>

<hr>

<p>Twice you do</p>

<pre><code>try:
    title = tds[0].text.replace('\n','')
except:
    title = ""
</code></pre>

<ol>
<li><p>I'd specify what exact exception you want to catch so you don't accidentally hide a "real" error if you start making changes in the future. I'm assuming here you're intending to catch an <code>AttributeError</code>.</p></li>
<li><p>Because you have essentially the same code twice, and because the code is bulky, I'd factor that out into its own function.</p></li>
</ol>

<p>Something like:</p>

<pre><code>import bs4

def eliminate_newlines(tag: bs4.element.Tag) -&gt; str:  # Maybe pick a better name
    try:
        return tag.text.replace('\n', '')

    except AttributeError:  # I'm assuming this is what you intend to catch
        return ""
</code></pre>

<p>Now that <code>with open</code> block is much neater:</p>

<pre><code>with open('data.csv', "a", encoding='UTF-8') as csv_file:
    writer = csv.writer(csv_file, delimiter=',')    
    for tr in My_table.find_all('tr')[2:]: # [2:] is to skip empty and header 
        tds = tr.find_all('td')

        title = eliminate_newlines(tds[0])
        year = eliminate_newlines(tds[2])

        writer.writerow([title, year])
</code></pre>

<p>Edit: I was in the shower, and realized that you're actually probably intending to catch an <code>IndexError</code> in case the page is malformed or something. Same idea though, move that code out into a function to reduce duplication. Something like:</p>

<pre><code>from typing import List

def eliminate_newlines(tags: List[bs4.element.Tag], i: int) -&gt; str:
    return tags[i].text.replace('\n', '') if len(tags) &lt; i else ""
</code></pre>

<p>This could also be done using a condition statement instead of expression. I figured that it's pretty simple though, so a one-liner should be fine.</p>

<hr>

<p>If you're using a newer version of Python, lines like:</p>

<pre><code>"{}, {}".format(tds[0].text.replace('\n',''), tds[2].text.replace('\n',''))
</code></pre>

<p>Can make use of <a href="https://www.python.org/dev/peps/pep-0498/#abstract" rel="noreferrer">f-strings</a> to do in-place string interpolation:</p>

<pre><code>f"{tds[0].text.replace('\n', '')}, {tds[2].text.replace('\n', '')}"
</code></pre>

<p>In this particular case, the gain isn't much. They're very helpful for more complicated formatting though.</p>
    </div>