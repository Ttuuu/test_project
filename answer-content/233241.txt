<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer is based off of Jonah's. This removes the re-stringification which reduces the code size by instead overwriting the previous result with the new result, and using that as the input. It splits the number, adds the components, then sets the input to the output and repeats.</p>

<p>The <code>+b</code> operator is shorthand for converting a string into an int.</p>

<hr>

<pre><code>function addDigits(inputArray) {
  str = inputArray.join('')
  while ((str = str.split('').reduce((a, b) =&gt; +a + +b)+'') &gt; 9);
  return +str
}

console.log(addDigits([13, 11, 1938]))
&gt;&gt;&gt; 9
</code></pre>

<p>It could be simplified further, but is getting into incomprehensible-ness territory:</p>

<pre><code>function addDigits(c) {
    while ((c = (c + '').split('').reduce((a, b) =&gt; (+a || 0) + (+b || 0))) &gt; 9);
    return c
}
</code></pre>

<p>If <code>.split('')</code> is not allowed, then...</p>

<pre><code>function addDigits(c) {
    c = c.join('')
    while ((c = Array.from(Array(Math.ceil(Math.log10(c)))
                .keys())
            .map(p =&gt; Math.floor(c % Math.pow(10, p + 1) / Math.pow(10, p)))
            .reduce((a, b) =&gt; a + b)) &gt; 9);
    return c
}
</code></pre>
    </div>