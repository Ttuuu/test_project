<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Typo</h2>

<p><code>Error cused</code> -&gt; <code>Error caused</code></p>

<h2>Memory security</h2>

<pre><code>del password    # maybe it can help to make more secure?
</code></pre>

<p>It's not harmful, but it probably also won't help much. Your theory seems to be that if an outside attacker gains access to your program's memory (which is already instant doom), that calling <code>del</code> will have removed the plaintext password from memory thus reducing the impact of an attack. Have a read through an explanatory article like <a href="https://rushter.com/blog/python-garbage-collector/" rel="nofollow noreferrer">Python Garbage Collector</a>, which says that</p>

<blockquote>
  <p>you can use the <code>del</code> statement that removes a variable and its reference (not the object itself) [...] The <code>del</code> statement removes the references to our objects (i.e., decreases reference count by 1). After Python executes the del statement, our objects are no longer accessible from Python code. However, such objects are still sitting in the memory</p>
</blockquote>

<p><code>del</code> does <a href="https://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm" rel="nofollow noreferrer">not force garbage collection</a>. To do that, you would in theory need to call <code>gc.collect()</code>.</p>

<p>The <em>most</em> that <code>del</code> would immediately do is mitigate an attack on access to the <code>locals</code> dictionary. Again, if such an attack is possible, you have much bigger problems on your hands.</p>

<h2>Boolean expressions</h2>

<pre><code>if key == asserted_key:
    return True
else:
    return False
</code></pre>

<p>can be</p>

<pre><code>return key == asserted_key
</code></pre>
    </div>