<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is quite a lot of "almost similar" code due to the fact that you
treat "value observers" and "result observers" separately: 
Two classes</p>

<pre><code>class ResultObserver&lt;Value&gt;
class ValueObserver&lt;Value&gt; 
</code></pre>

<p>with corresponding type aliases:</p>

<pre><code>typealias ResultObserverBlock  = (Result&lt;Value&gt;) -&gt; Void
typealias ValueObserverBlock  = (Value) -&gt; Void
</code></pre>

<p>and instance variables</p>

<pre><code>private var valueObservers  = [ValueObserver&lt;Value&gt;]()
private var resultObservers = [ResultObserver&lt;Value&gt;]()
</code></pre>

<p>three init methods, two <code>observeResults()</code> methods, etc.</p>

<p>This would be greatly simplified by just observing a generic
type <code>Value</code>, which in particular can be a <code>Result&lt;&gt;</code>:</p>

<pre><code>class Observer&lt;Value&gt; {
    typealias ObserverBlock  = (Value) -&gt; Void

    weak var observer: AnyObject?
    let block: ObserverBlock

    init(observer: AnyObject, block: @escaping ObserverBlock) {
        self.observer = observer
        self.block = block
    }
}

public class Observable&lt;Value&gt; {

    //MARK: - Private properties
    private var observers  = [Observer&lt;Value&gt;]()

    //MARK: - Public properties
    public var value : Value {
        didSet {
            self.notifyObservers()
        }
    }

    //MARK: - Struct lifecycle
    public init(_ value: Value) {
        self.value = value
    }

    //MARK: - Observation
    func observe(on observer: AnyObject, observerBlock: @escaping Observer&lt;Value&gt;.ObserverBlock) {
        self.observers.append(Observer(observer: observer, block: observerBlock))
        observerBlock(value)
    }

    func remove(observer: AnyObject) {
        self.observers = self.observers.filter({ $0.observer !== observer })
    }

    //MARK: - Helpers
    private func notifyObservers() {
        for observer in self.observers {
            observer.block(value)
        }
    }
}
</code></pre>

<p>Note also the use of <code>Observer&lt;Value&gt;.ObserverBlock</code> in order to
avoid defining the same closure type twice.</p>

<p>Now you can observe a simple (boolean) value:</p>

<pre><code>private let isLoadingObservable = Observable(false)

// ...        

isLoadingObservable.observe(on: self) { isLoading in
    print("observed:", isLoading)
}
</code></pre>

<p>or a result:</p>

<pre><code>private let dataObservable = Observable(Result&lt;[User]&gt;.success([]))

// ...

dataObservable.observe(on: self) { result in
    switch result {
    case .success(let value):
        print("Value:",  value)
    case .failure(let error):
        print("Error:", error)
    }
}
</code></pre>

<p>Another possible improvement could be to check in <code>func notifyObservers()</code> if the observing object still is alive, and
remove it from the list otherwise.</p>
    </div>