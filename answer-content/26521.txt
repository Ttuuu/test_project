<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know it's not a direct answer to your question, but I'm trying to get to the roots of the problem rather than giving correct answer to issue caused by potential misuse...</p>

<p>In your code what you are actually trying to do is to write a cache with time-based expiration of items. Even though <code>ConcurrentDictionary</code> is thread-safe, it's not quite appropriate structure for frequent element scans like you do. Moreover, in your code you remove items, then add them back in case when they have been updated in the middle. It causes side effects for other threads that may try to read the value in-between.</p>

<p>Correct solution would be to use a proper data structure. If by any chance you are using .NET 4.0 or later .NET has already provided you with proper solution - <a href="http://msdn.microsoft.com/en-us/library/system.runtime.caching.memorycache.aspx" rel="noreferrer"><code>MemoryCache</code> class</a>, otherwise I would recommend creating a lock-based class that maintains 2 indexes for entries - a <code>Dictionary</code> for storing key-value pairs, and a <code>SortedList</code> for storing expiration timestamp-key mapping. In this case you'll always know upfront when the next expiration will happen so timer can be set to specific <code>TimeSpan</code>, and you don't have to scan through all cache entries to find expired ones.</p>
    </div>