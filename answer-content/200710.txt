<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>class Node</strong>:</p>

<p>It is "strange" to have a <code>Node</code> with no value.  Consider removing the default <code>value=None</code>.</p>

<p>You never create a <code>Node</code> with an explicit "left" or "right" branch.  Consider removing these extra parameters from the constructor, and just assigning them to <code>None</code>.</p>

<p>Private members should be prefixed by an underscore.  Since no external entity should access the value, or the left or right branches, these should be renamed.</p>

<pre><code>class Node:
   def __init__(self, value):
      self._value = value
      self._left = None
      self._right = None
</code></pre>

<hr>

<p><code>Node</code> is actually an internal detail of BST, so perhaps nest it as an inner class:</p>

<pre><code>class BST:

   class _Node:
      def __init__(self, value):
        self._value = value
        self._left = None
        self._right = None
</code></pre>

<hr>

<p>Again, a node with no value is "strange".  It is much more common to represent an empty tree with as <code>root=None</code>, rather than <code>root=Node(None)</code>.</p>

<pre><code>   def __init__(self):
      self._root = None
</code></pre>

<hr>

<p>Your <code>put()</code> method calls <code>_put()</code>, which can call <code>_put()</code>, which can call <code>_put()</code> and so on.  In short, it is recursive.  There is no need to be recursive; you never need to return a value from a sub-call.  You are using tail-recursion, so the compiler/interpreter <em>might</em> simply jump back to the top of the function, instead of creating additional stack-frames.  Except <a href="https://stackoverflow.com/q/13591970/3690024">python doesn't do tail recursion</a>, and you could get a stack overflow!</p>

<p>Instead, you can simply do the loop yourself:</p>

<pre><code>   def put(self, value):

      new_node = BST._Node(value)

      if self._root:
         node = self._root

         while node:
            prev = node
            node = node._left if value &lt; node._value else node._right

         if value &lt; prev._value:
            prev._left = new_node
         else:
            prev._right = new_node

      else:
         self._root = new_node
</code></pre>

<hr>

<p>Ditto for <code>contains()</code>.  Don't rely on tail-recursion, just create the loop yourself.</p>

<pre><code>   def contains(self, value):
      node = self._root

      while node:
        if node._value == value:
           return True
        node = node._left  if  value &lt; node._value  else  node._right

      return False
</code></pre>

<hr>

<p>In-order traversal: building lists is so pass√©.  Generators can be much more efficient.  Starting with Python 3.3, we also get the cool new <code>yield from</code> syntax, to make them easier:</p>

<pre><code>   def inorder(self):

      def _inorder(node):

         if node._left:
            yield from _inorder(node._left)

         yield node._value

         if node._right:
            yield from _inorder(node._right)

     if self._root:
         yield from _inorder(self._root)
</code></pre>

<p>If you want to return a list, and not the generator, you could simply pass the generator to the <code>list()</code> function.</p>

<pre><code>   def inorder_list(self):
       return list(self.inorder())
</code></pre>

<hr>

<p>Avoid polluting the global namespace.  I prefer my tests in a separate "xxxx_test.py" file, but for a single file solution, you can put the required imports and test classes in the <code>if __name__ == '__main__':</code> block:</p>

<pre><code>if __name__ == '__main__':

   import unittest, random

   class TestBST(unittest.TestCase):

      def test_random_lists(self):

         """Test a bunch of lists of various sizes, randomly"""

         for length in range(20):

            bst = BST()
            lst = [ random.randint(1, 100) for _ in range(length) ]

            with self.subTest(lst=lst):

               for val in lst:
                  bst.put(val)

               lst.sort()

               self.assertEqual( bst.inorder_list(), lst)

   unittest.main()
</code></pre>

<hr>

<p>Finally, documentation!  Use <code>"""docstrings"""</code></p>

<p>Run <code>help(BST)</code> and look at the output.  Is everything documented?  Are there any unnecessary (ie, private) classes or methods exposed to the outside world?</p>
    </div>