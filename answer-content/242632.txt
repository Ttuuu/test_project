<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and welcome to code review! I hope you don't mind me being direct, but your class structure is simply a mess. We need to fix that before we go to the concurrency control.</p>

<p>Your <code>Account</code> is both an account and a single transaction from that account to some other account. This violates the <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>. It also makes it impossible to transfer money from one account to two other accounts simultaneously. You need to remove the transaction responsibility from the Account class and have the account class only contain information that is relevant to the state of that account only. Optimally the <code>Account</code> would only hold the account balance and the account number.</p>

<p>The account should not be a <code>Thread</code>. Accounts are not entities that act by themselves. They are just data containers. Instead you should have several instances of a <code>TestClient</code> class running concurrently as threads and a <code>TestRunner</code> that sets up and starts the clients.</p>

<p><code>TestRunner</code> should initialize a single <code>AccountController</code> object and pass that reference to the <code>TestClients</code> during their construction. The <code>AccountController</code> provides the account transfer operation for transfering funds from one accout number to another.</p>

<pre><code>public void transferFunds(String debtorIban, String creditorIban, int amount);
</code></pre>

<p><code>AccountController</code> manages acquiring write locks to accounts for each transaction and the debiting and crediting of funds from accounts. In the simplest example you don't need a class to represent a transaction. The parameters to the transferFunds method provide all the needed information.</p>
    </div>