<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know this code is more than four years old and you haven't been on CR since then but maybe it will help somebody else.</p>

<p>The code adds a lot of HTML via string concatenation. It might be better to use the JS DOM element creation APIs like <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement" rel="nofollow noreferrer"><code>document.createElement()</code></a> or a template (e.g. with the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" rel="nofollow noreferrer"><code>&lt;template&gt;</code></a> tag).</p>

<hr>

<p>There is a mix of local and global variables - for example, in <code>processFeedData()</code>, <code>s</code> is declared with the <code>var</code> keyword but then <code>en</code> is not, making it a global variable. Then in <code>makeString()</code> the variable <code>s</code> is assigned without having been declared locally so its scope is the wrapping function (i.e. <code>e.fn.FeedEk = function (t) {...</code>). It is best to avoid global variables to avoid unintentional consequences... For more in this topic refer to answers to <a href="https://softwareengineering.stackexchange.com/q/277279/244085"><em>why are globals bad in javascript</em></a>.</p>

<hr>

<p>The DOM ready code in the second page looks up the element with <em>id</em> attribute <code>divRss</code> initially as well as in the interval callback. DOM lookups aren't cheap:</p>

<p>DOM queries aren't cheap:</p>

<blockquote>
  <p><em>”...DOM access is actually pretty costly - I think of it like if I have a bridge - like two pieces of land with a toll bridge,  and the JavaScript engine is on one side, and the DOM is on the other, and every time I want to access the DOM from the JavaScript engine, I have to pay that toll”</em><br>
      - John Hrvatin, Microsoft, MIX09, in <a href="https://channel9.msdn.com/Events/MIX/MIX09/T53F" rel="nofollow noreferrer">this talk <em>Building High Performance Web Applications and Sites</em></a> at 29:38, also cited in the <a href="https://books.google.com/books?id=ED6ph4WEIoQC&amp;pg=PA36&amp;lpg=PA36&amp;dq=John+Hrvatin+%22DOM%22&amp;source=bl&amp;ots=2Wrd5G2ceJ&amp;sig=pjK9cf9LGjlqw1Z6Hm6w8YrWOio&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwjcmZ7U_eDeAhVMGDQIHSfUAdoQ6AEwAnoECAgQAQ#v=onepage&amp;q=John%20Hrvatin%20%22DOM%22&amp;f=false" rel="nofollow noreferrer">O'Reilly <em>Javascript</em> book by Nicholas C Zakas Pg 36</a>, as well as mentioned in <a href="https://www.learnsteps.com/javascript-increase-performance-by-handling-dom-with-care/" rel="nofollow noreferrer">this post</a></p>
</blockquote>

<p>Bearing in mind he said that ~10 years ago and browsers have come a long way, it is still wise to consider. I would recommend storing <code>$('#divRss')</code> to a variable (or constant using <code>const</code> if supporting <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a>) and referencing that variable instead of querying the DOM each time.</p>
    </div>