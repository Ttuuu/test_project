<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, your code looks quite good, much better than many other examples I've seen.</p>

<p>In addition to the other answers:</p>

<pre><code>public GameOfLife(boolean[][] board)
{
    if(board != null)
        this.board = board;
    else
        this.board = new boolean[1][1];
    // ...
}
</code></pre>

<p>If your caller gives you a <strong>null board array</strong>, you create a 1*1 board which surely isn't useful to the caller.</p>

<p>I'd instead tell the caller that he has to provide a valid array, by throwing an e.g. InvalidArgumentException. Providing null is a bug in the calling code, and you should signal that bug as early as possible instead of continuing with nonsense data. If no-one in the caller stack knows how to continue from a null board, the exception will abort the program, and that's good.</p>

<p>You use <code>if</code>s <strong>without braces</strong> here and in many other places. That's a maintenance trap. Maybe someone adds a line to one of the dependent blocks:</p>

<pre><code>public GameOfLife(boolean[][] board)
{
    if(board != null)
        this.board = board;
    else
        area = 1;
        this.board = new boolean[1][1];
    // ...
}
</code></pre>

<p>At a first glance, that looks fine, and it's easy to fall into the trap that now <code>this.board = new boolean[1][1];</code> is executed unconditionally.</p>

<p>So I always use braces.</p>

<p>So, my version of your constructor would be:</p>

<pre><code>public GameOfLife(boolean[][] board) {
    if(board == null) {
        throw new IllegalArgumentException("board must not be null.");
    }
    this.board = board;

    this.maxRow = this.board.length;
    this.maxCol = this.board[0].length;
}
</code></pre>

<p>Talking about <strong>conditional true/false returns</strong> vs. returning boolean expressions: I agree that e.g. <code>inBounds()</code> could be rewritten using one return statement with a boolean expression, but I typically do it your way. Why? It makes debugging easier. It's easier to place a breakpoint on either the <code>return true;</code> or the <code>return false;</code> line than to make the single <code>return</code> breakpoint react conditionally on a <code>true</code> or <code>false</code> boolean value.</p>
    </div>