<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello @AMG_ and welcome to codereview.</p>

<p>One good thing here is checking that the user input is a number. It's a good habit to always assume user input is broken, and give them an indication of what's going wrong. You can also do other validation at this stage. What should happen if, for example, they enter a negative number? By the way, although python does support <code>try</code>...<code>except</code>...<code>else</code> the <code>else</code> is a bit of a niche feature. It's more common, and hence easier for python programmers to see that it's correct, if you put the break at the end of the <code>try</code> section.</p>

<p>One cause for concern is the magic numbers in this code. If, say the government changed the 0.19 threshold from 37k to 38k, you'd need to remember to change the 37000 in both its own band and the 90000 band. Moreover, because I know the idea behind marginal tax rates, I know what 20797 is meant to refer to. Even though I'm aware of it now I'm not checking whether the calculation is accurate. If the government changed the 37000 tax band, all those numbers would need to change and it would be terribly easy to miss one. </p>

<p>This code would be more maintainable if there were a list of thresholds all in one place, and the contribution from lower tax bands were calculated by the code rather than hard coded.</p>

<p>I would split the bit of code which calculates the tax into a function. It's generally considered good practice to split code which does user interaction (display and keyboard parsing) away from code which does calculations. The behaviour would be the same, but it's much easier to follow what's going on.</p>
    </div>