<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What happens if the user types "s"?  Your program says:</p>

<pre class="lang-none prettyprint-override"><code>Enter Buyer Name: 
</code></pre>

<p>Oops!  It was supposed to be uppercase, wasn't it?  I'm not sure why you want it to be case-sensitive, but you should tell the user of his mistake instead of just going on as if you know what he meant.  That means, I would change <code>else:</code> to <code>elif not file:</code> and add an <code>else:</code> that prints something like <code>Sorry, I don't know what that means.</code></p>

<hr>

<p>Your <code>search_file = ...</code> line is useless because you redefine <code>search_file</code> on the next line (<code>with open(...) as search_file:</code>).  By the way, I am happy to see that you are using <code>with</code> blocks.  That is rare, but good practice.</p>

<hr>

<p>Your naming is not consistent with <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a>, the Python style guide, on <a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" rel="noreferrer">Method Names and Instance Variables</a>:</p>

<blockquote>
  <p>Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability...</p>
</blockquote>

<hr>

<p>You use <code>int(input(...))</code> without a <code>try</code> block.  That is dangerous.  If the user types something that is not a valid integer, there will be a very nasty error.  You should use a <code>while</code> loop that keeps going until the user types a valid integer.  The validity test would, of course, be with a <code>try</code>-<code>except</code> block.</p>

<hr>

<p><code>out_file.close()</code> is unnecessary in your <code>with</code> block.  The <code>with</code> block will take care of closing the file.</p>

<hr>

<p>You might want to take a look at the <a href="https://docs.python.org/3/library/csv.html" rel="noreferrer"><code>csv</code> module</a>.  With its help, you are more flexible with the format in which the entries are printed.  Your printing code might end up looking something like this:</p>

<pre><code>template = "Name: {name} || Invoice Number: {invoice} || Quantity: {quantity} || Price: ${price}\n\n"

...

with open(look_in, "rt") as search_file:
    for line in csv.DictReader(search_file):
        if line['invoice'] == keyword:
            print(template.format(**line))
</code></pre>

<p>Your writing code:</p>

<pre><code>with open("usb.txt", "at") as out_file:
    writer = csv.DictWriter(out_file, (
      'name', 'invoice', 'quantity', 'price')):

    writer.writeheader()
    writer.writerow({
        'name': Name, 'invoice': InNum, 'quantity': Quant,
        'price': Price})
</code></pre>

<p>As it is, an entry might be displayed just because its name includes the invoice number.  With a csv file, that is no longer possible.</p>
    </div>