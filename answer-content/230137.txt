<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>I suggest you check <strong>PEP0008</strong>, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a> the official Python style guide which will be your guide to write a Pythonic code and Flake8 <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">http://flake8.pycqa.org/en/latest/</a> as a tool for style enforcement.</p>

<ul>
<li><p><strong>Clean up:</strong> <code>from collections import defaultdict</code> and 
<code>import os</code> are unused import statements and should be cleaned up as well as <code># g.printanswer()</code> at the last line of the code.</p></li>
<li><p><strong>Class Names</strong>
Class names should normally use the CapWords convention. Example: <code>ClassNameExample</code> and <code>class search:</code> should be: <code>class Search:</code></p></li>
<li><p><strong>Function/method names</strong>
Function names should be lowercase, with words separated by underscores as necessary to improve readability. Example: <code>def first_method(self, param):</code>
<code>def addanswer(self,word):</code> should be: <code>def add_answer(self, word):</code></p>

<p>Note the comma <code>,</code> is separated by space on the right side for readability 
and same applies to all other methods  <code>def printverhorlist(self):</code> 
<code>def verhorlist(self):</code> ...</p></li>
<li><p><strong>Docstrings</strong> Python documentation strings (or docstrings) provide a convenient way of associating documentation with Python modules, functions, classes, and methods. You should indicate docstrings to your classes/methods/functions indicating what they do, what they return and type hints when necessary.
Example: </p>

<pre><code>class MyClass:
    """Description goes here."""

    def first_method(self, param1: int, param2: str):
        """Do things and return stuff."""
</code></pre>

<p>And this applies to all your methods defined under your <code>search</code> class as long as they are not meant for internal use(private methods) which are written with a leading underscore: <code>def _private_method(self, param):</code></p></li>
<li><p><strong>Blank lines</strong> Surround top-level function and class definitions with two blank lines. Method definitions inside a class are surrounded by a single blank line.
Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).</p></li>
<li><p><strong>Comments</strong> Comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!) and start with a single # and 2 spaces are left for inline comments example: </p>

<p><strong>This line:</strong></p>

<pre><code>    self.blank_tiles=[] ##pair row and col that have valid answer
</code></pre>

<p><strong>should be written:</strong></p>

<pre><code>    self.blank_tiles = []  # Pair row and col that have valid answer.
</code></pre>

<p>And same applies to all other comments</p></li>
<li><strong>Typos</strong> <code>def printverhorlist(self):</code> and  <code>def verhorlist(self):</code> names that do not have any sense 'verhor' as well as spelling errors should be replaced with corrects words that have meanings.</li>
<li><strong>Long lines</strong> Lines should not exceed 79 characters (lines 29, 44 in your code)</li>
</ul>

<h1>Code</h1>

<p>A general comment is most of your code is very hard to read/understand due to the lack of documentation and description and it is not possible for anyone to tell what's a wrong/right output for not so obvious parts of the code. As per rules of this website the code should be running properly as of to the author best of knowledge, I'm going to assume that it's working correctly and I cannot tell again due to the absence of documentation and bad structure however here are some things to note:</p>

<ul>
<li><p>As the title states, this should be a depth-first search(DFS) with pseudocode found here: <a href="https://en.wikipedia.org/wiki/Depth-first_search" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Depth-first_search</a>, I can't seem to find a proper implementation of a DFS search which is generally implemented using a stack (which is absent in your code). This might be an improper DFS implementation maybe leading to correct output somehow and maybe not(I cannot tell without a description or proper documentation) so I suggest you at least provide a proper description with a proper expected output if you need a decent feedback and here are a few points:</p></li>
<li><p><code>def __init__(self, file_name):</code> a class with a single parameter is not a good class and you may define functions that pass results to each other instead of the over-engineered code. And since most of the instance attributes are lists, you can define these lists inside of their corresponding functions that use them without using a class in the first place.</p></li>
<li><p><strong>Methods do return</strong></p>

<pre><code>def printverhorlist(self):
    print(self.blank_tiles)
</code></pre>

<p>This is the same as <code>print(self.blank_tiles)</code> so there is no need for defining a method for printing and for a specific/custom print/display of the user-defined objects, you might use <code>__str__</code> method that returns a string in case someone is using your code and wants to print your defined object. </p></li>
<li><p><code>With as</code> <strong>context managers:</strong>
<code>file = open(self.filename, "r")</code> in <code>openfile()</code> method, it is generally better to use <code>with</code> and <code>as</code> context managers that automatically close the file without using <code>file_object.close()</code> method you forgot to use after manually opening the file. Some Python files will close files automatically when they are no longer referenced, while others will not and it's up to the OS. to close files when the Python interpreter exits. So it's generally a bad practice not to close your files after opening them, to forget about this hassle, use with and as in the following way:</p>

<pre><code>with open(my_file) as example:
    # do stuff
</code></pre></li>
<li><p><strong>Improper use of try except:</strong> </p>

<pre><code>except:
   print("Cannot open file")
</code></pre>

<p>what kind of exception are you catching here? if the exception is the failure to open the file, you're opening the file outside the <code>try</code> body so the whatever exception you're trying to catch is never caught in the first place.</p></li>
</ul>
    </div>