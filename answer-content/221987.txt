<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your functional approach is very nice, and scores high points for readability. As  long as the recursion wasn't causing performance issues, that's how I'd approach it.</p>

<p>However, it's not very efficient, and as vnp points out, listing permutations is really just a matter of counting from 1 to "the number of combinations" in a mixed base numbering system.  </p>

<h2>mixed base counting</h2>

<p>These are easy implement, and it's worth going through the exercise, because <em>assuming you have a utility that does the mixed base counting for you</em>, the solution to the original problem will be both straightforward and efficient:</p>

<pre><code>function mixedBaseCounter(bases) {
  let cnt = 0
  let maxCnt = bases.length ? [...bases].reduce((m, x) =&gt; m * x, 1) : 0
  let digits = bases.map(() =&gt; 0)

  const increment = (i = 0) =&gt; {
    digits[i] = (digits[i] + 1) % bases[i]
    if (digits[i] == 0) increment(i + 1)
  }

  return {
    [Symbol.iterator]: function* () {
      while (cnt++ &lt; maxCnt) {
        yield digits.join('')
        increment()
      }
    }
  }
}
</code></pre>

<p>This uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator#Examples" rel="nofollow noreferrer">ECMA script's iterable interface</a>.  Note the above implementation has the least significant bit on the left (easily changed, if you need to).</p>

<p>Let's verify it counts correctly in binary:</p>

<pre><code>[...mixedBaseCounter([2, 2, 2])]
// [ '000', '100', '010', '110', '001', '101', '011', '111' ]
</code></pre>

<p>And that it handles mixed bases:</p>

<pre><code>console.log([...mixedBaseCounter([2, 3])])
// [ '00', '10', '01', '11', '02', '12' ]
</code></pre>

<p><a href="https://tio.run/##jZHNTsMwEITveYq5oNptsQrcKgoSfQSOUQ5psk1d@adyHEiF@uzBNmmKxAUpsrK7n2dH42P5UbaVkyd/b2xNw7DvTOWlNdCyp/qtbGlrO@PJsV34bzm@MkCRR2U8NliNlS77bWokSigyjT/gFbkQIrUK4ajuKmJML9FzbF6gMUe/xAPHetKpZSN9O@no8sRYglc8C0hlTeshTeVIU9rHZHSRkOgMo0Iuizi8FYu45@5HNtQJlfvfxCbpTNpBON4J4CVuduQ7Z8Yd@ftZ76wSMuRSeuuKNa65zcH4SAGfB6kILES1WOB5DOk2Bs6SVD1aFkcrDZvN@DS9ebn2Ltn1vGTBVozDKhLKNiwm/efN8scl4lfwgv8Tf4rsMHwD" rel="nofollow noreferrer" title="JavaScript (Node.js) – Try It Online">Try it online!</a></p>

<h2>applying it to the problem</h2>

<p>Now the solutions becomes:</p>

<pre><code>function letterCombinations(digits) {

  const strDigits = {
    '2': 'abc',
    '3': 'def',
    '4': 'ghi',
    '5': 'jkl',
    '6': 'mno',
    '7': 'pqrs',
    '8': 'tuv',
    '9': 'wxyz',
  }

  const letterOptions = [...digits].map(x =&gt; strDigits[x])
  const bases = [...letterOptions].map(x =&gt; x.length)
  const masks = mixedBaseCounter(bases)

  return [...masks].map(m =&gt;
    [...m].map((x, i) =&gt; letterOptions[i][x]).join('')
  )
}
</code></pre>

<p>where each "mask" (or number, within the mixed base numbering system) chooses one combination.</p>

<p>Note also we no longer need to treat the empty string as a special case.  </p>

<p><a href="https://tio.run/##jVLLbtswELzrK/ZSiIwdIX0lrRGnQN17Dz0aOtASbdMRSYekErmFvt3lUqRkHwr0ImiWs7OzjwN7ZbYy4uhula75eduqygmtQIqO19@Z5SvdKscN2fh/S@FPBtBwB5VysIS7iCTrViEQWEXD1c7t4Rusi6IIobIwvG4rToicQ0dh@QQSbqCbw3sKi1GnFjvh7Kgj2ZGQQL6jmadUWlkHQlWGSx7qEYEuAgWdQVRYixIfJzDDOu8GWY8DVWwvGcugM2p7YczxxB4rG@5ao2KN9a@T3OimEH4uzGlTLiDN7QYIjSyAt71oOBA/qtkMHuOQpmeAk@BNHS0XBy0UyXM6vk5eUqzP0rfP@mlXfnLeyUrLjVAMIzb2hbXGsVlnfqTxDhbyD/kCcrap8vmAPyKu@TbhT4h3e5HwZ8SH5ybhe8RS6YQfEB9fjE2BLxhw7WvCXxG/daffIdBP5oYWfh6De28QD2fooQxX0OGGxw7WXUnH1LDTmHIlc5HZxZOcsiSzz5j1jzufVo6ygTzISS83HAHGhxjxZyzCDV7V91eFRi8XSzPfc5ahBd3wotE7Mtm@WmD@cJ9T3@X/UJF4Pv8F" rel="nofollow noreferrer" title="JavaScript (Node.js) – Try It Online">Try it online!</a></p>
    </div>