<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I might be a little bit late to the party, but better late than never, right?</p>
<h1>Type signatures</h1>
<p>Your central functions <code>fromList</code> and <code>eval</code> don't have type signatures. This forces the user to check <code>Value</code> and <code>StepData</code>'s definition. Better add them:</p>
<pre><code>eval :: Ord a =&gt; StepData a
eval = ...

fromList :: (Ord a, Monoid b) =&gt; [(a, a, b)]-&gt; StepData a b
fromList  = ...
</code></pre>
<h1>Remove dead code</h1>
<p><code>merge</code> isn't used in your code. It's dead code and not used in your instance at all. Better remove it.</p>
<h1>Make sure the code compiles</h1>
<p>That wasn't an issue back in 2013, but nowadays <code>Semigroup</code> is a superclass of <code>Monoid</code>, and you need to implement it too.</p>
<h1>Don't encode <code>Bool</code> twice</h1>
<p><code>eval</code>'s <code>sol</code> can be simplified a lot if we just use <code>not</code> around the condition:</p>
<pre><code>eval (StepData xs) t = y
  where (_,_,y) = head $ dropWhile sol xs
        sol (a,b,_) = not (a &lt;= Value t &amp;&amp; Value t &lt; b)
</code></pre>
<p>The function also gets easier to understand if we use <code>filter</code> instead, as we don't need to deal with double negation (<code>drop</code> and <code>not</code>):</p>
<pre><code>eval (StepData xs) t = y
  where (_,_,y) = head $ filter sol xs
        sol (a,b,_) = a &lt;= Value t &amp;&amp; Value t &lt; b
</code></pre>
<h1>Document requirements of data</h1>
<p><code>fromList</code> needs a proper sorted list. That's not documented anywhere and neither enforced in its type nor its logic. We might end up with <code>StepData [(Value 3, Value 1, Maybe 3)]</code> or <code>StepData [(Value 3, Value 4, Maybe 3),(Value 1, Value 2, Maybe 3)]</code>, as the list is only <code>map</code>ed.</p>
<p>Instead, use <code>foldMap</code> and make sure that the values are ordered properly:</p>
<pre><code>fromList = foldMap go
  where
    go (a, b, y)
      | a &lt; b     = StepData [(Value a, Value b, y)]
      | otherwise = StepData [(Value b, Value a, y)]
</code></pre>
    </div>