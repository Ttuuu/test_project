<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing bothers me in this implementation. Using an implicit operator between two types of strings (plain vs protected) hides the fact the plain string gets converted to a cryptographic digest. As consumer of the API, I might not know such conversion takes place. </p>

<blockquote>
<pre><code> public static implicit operator ProtectedString(String value)
 {
     return new ProtectedString(value);
 }
</code></pre>
</blockquote>

<p>By using an explicit operator, the consumer gets a hint that a conversion might take place. </p>

<p>As <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions" rel="nofollow noreferrer">Guidelines</a> state:</p>

<blockquote>
  <p>The explicit conversions that are not implicit conversions are
  conversions that cannot be proven to always succeed, conversions that
  are known to possibly lose information, and conversions across domains
  of types sufficiently different to merit explicit notation.</p>
</blockquote>

<p>I would argue plain and protected strings are sufficiently different to merit explicit notation.</p>

<pre><code>   public static explicit operator ProtectedString(String value)
   {
       return new ProtectedString(value);
   }
</code></pre>

<p>And then call it like:</p>

<pre><code>var ThisIsMyProtectedString1 = (ProtectedString)"Test";

if (ThisIsMyProtectedString1 == (ProtectedString)"Test")
    MessageBox.Show("Equal");
</code></pre>
    </div>