<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am bit puzzled by <code>strip_tags</code>:</p>

<pre><code>$em = strip_tags($_POST['reg_email']); // remove html tags
$em = str_replace(' ', '', $em); //remove spaces
$em = ucfirst(strtolower($em)); //uppercase first letter
</code></pre>

<p>I have the impression that you stumbled upon incredibly old tutorials. You don't use that function to check user names or E-mails, because you are not expecting that people will actually put HTML tags in those fields, and besides you should have a more comprehensive routine to check the values entered.</p>

<p>The purpose of <code>strip_tags</code> is to remove html from text messages (and thus filter out some spam, like clickable hyperlinks). Javascript too.</p>

<p>Since you are checking the E-mail address with <code>filter_var</code> you can rid of those lines, they are pointless.</p>

<p>Why capitalize the first letter of the E-mail ?
Call the variable <code>$email</code>, it's more intuitive. <code>em</code> reminds me of the HTML tag.</p>

<p>To remove whitespace around the string you can just use the <code>trim</code> function.</p>

<p>This code introduces a potential <strong>vulnerability</strong> (SQL injection):</p>

<pre><code>$e_check = mysqli_query($con, "SELECT email FROM users WHERE email='$em'");
</code></pre>

<p>I am wondering why you are not using <strong>parameterized queries</strong> (or <a href="https://stackoverflow.com/a/60496/6843158">prepared statements</a>) systematically (at least whenever user input is involved). I am all the more surprised since your previous submission did not have that kind of vulnerability.</p>

<p>In this particular case, you should be spared the vulnerability because you are relying on <code>filter_var</code> above to ensure that the E-mail is valid but this your only line of defense. What if you forget to check the E-mail in another part of your code ? Also, <code>filter_var</code> may have shortcomings that we don't know about.</p>

<p>In general websites will only allow alphanumeric characters in usernames plus a few signs like space, hyphen, underscore etc. The most straightforward way is to use a regular expression.</p>

<p>There is no need to remove spaces everywhere:</p>

<pre><code>$fname = str_replace(' ', '', $fname); //remove spaces
</code></pre>

<p>First names may very well contain spaces or be compound names, nothing wrong with that. Trim: yes. Remove all whitespace: no.</p>

<p>In this code, you are checking for <strong>minimum password length</strong> but not for <strong>complexity</strong>. 12345 does pass your test but you should not accept that kind of password. But you've done the exact opposite, users are <em>not</em> allowed to choose strong passwords...</p>

<pre><code>if(preg_match('/[^A-Za-z0-9]/', $password)) {

array_push($error_array, "Your password can only contain english characters or numbers.&lt;br&gt;");

}
</code></pre>

<p>Devise a better password policy like: 12 characters minimum with at least one digit, one special character, <strong>or</strong> a long password like a passphrase that is easier to remember for humans. Each site make up their own rules, which are often counter-productive and nonsensical. The point is to find a balance between security and convenience. People tend to reuse the same passwords, and part of the reason is that they are forced to choose passwords that are not intuitive.</p>

<p>I don't know why you have <code>$_SESSION</code> variables, you are not doing anything with them. In fact they are useless, unless you want to initiate a user session (that is log the user in) right after registration. But you usually you will want to validate their E-mail address first (by sending a registration code).</p>

<p>I don't know large is the scope of your project but it may be a good idea to use a <strong>development framework</strong> because:</p>

<ul>
<li>it will bring you up to speed with the 21th century, and thus increase your value on the job market if you pursue a career as a developer...</li>
<li>it will relieve you of that tedious form building and validation exercise - do not reinvent the wheel, use the modern tools that other coders use. If you want to reinvent the wheel do it right. But this will take time without guarantee of good results.</li>
</ul>

<p>This kind of code is 15 years old. At least. And it's not good.</p>

<p>Unfortunately the Web is littered with outdated tutorials, many of which perpetuate bad practices and security vulnerabilities. In fact it seems that the best-ranking tutorials are the old stuff that nobody should read anymore. I am still looking for a decent tutorial as we speak.</p>
    </div>