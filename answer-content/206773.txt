<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Incorrect buffer size</strong></p>

<p>Code is certainly broken.</p>

<pre><code>char str[sizeof(uint64_t)];
sprintf(str, "%lu", number &amp; mask);
</code></pre>

<p>To print the decimal form of an arbitrary <code>uint64_t</code> as great as 18,446,744,073,709,551,615 (2<sup>64</sup> - 1) as a <em>string</em> requires up to 20 characters and a <em>null character</em>.</p>

<pre><code>#include &lt;inttypes.h&gt;
#define DECSTR_UINT64_MAXLEN 20
char str[DECSTR_UINT64_MAXLEN + 1];
</code></pre>

<p>Use the matching printf specifier for <code>uint64_t</code>.</p>

<pre><code>// sprintf(str, "%lu", number &amp; mask);
sprintf(str, "%" PRIu64, number &amp; mask);
</code></pre>

<p><strong>Questionable tests mixing <code>unsigned long long</code>, <code>unsigned long</code> and <code>uint64_t</code></strong></p>

<pre><code>uint64_t number = (int) strtol(gtk_entry_get_text(GTK_ENTRY(number_field)), NULL, 2);
uint64_t mask = ...
if (number &gt; ULLONG_MAX || mask &gt; ULLONG_MAX || number &lt; 0 || mask &lt; 0) {
    set_label_text(&amp;output_label, "Sorry, only unsigned long long ints supported for now!");
    return;
</code></pre>

<p>The <code>(int)</code> cast in certainly not needed.  </p>

<p><code>number &lt; 0</code> cannot be true, ever, as <code>number</code> is unsigned.   A good enabled compiler would warn about this.  Save time for all and enable all compiler warnings.</p>

<p>Strange to use <code>long strtol()</code> and then later <code>number &gt; ULLONG_MAX</code>.</p>

<p><code>"Sorry, only unsigned long long ints supported for now!"</code> is not as correct as saying  <code>"Sorry, only uint64_t supported for now!"</code>.  Even though <code>unsigned long long</code> and <code>uint64_t</code> are the often the same, they are not required to be so.</p>

<p><code>uint64_t</code> may be <code>unsigned long long</code>, <code>unsigned long</code>, or others (rarely).</p>

<p><code>strtol()</code> may only be 32 bit.</p>

<p>I'd recommend creating a  helper function - something like</p>

<pre><code>// return 0 on success
static int my_strto64(uint64_t *dest, const char *s) {
  char *endptr;
  errno = 0;
  unsigned long long y = strtoull(s, &amp;endptr, 10);
  #if ULLONG_MAX &gt; UINT64_MAX
  if (y &gt; UINT64_MAX) {
    uint64_t *dest = UINT64_MAX;
    errno = ERANGE;
    return 1; // range error
  }
  #endif
  *dest = (uint64_t) y;
  if (errno == ERANGE) {
    return 1; // range error
  }
  // Interestingly `strtou...()` function wrap with `-`
  // To disallow that, add this test
  if (*dest &amp;&amp; strchr(s, '-')) {
    uint64_t *dest = 0;
    errno = ERANGE;
    return 1; // negative
  }
  if (s == endptr) {
    return 2; // no conversion
  }
  while (isspace((unsigned char) *endptr)) endptr++;
  if (*endptr) {
    return 3; // trailing junk
  }
  return y;
}
</code></pre>

<p><strong>Use a portable matching specifier</strong></p>

<pre><code>// g_debug("Number: %lu\nMask: %lu\n", number, mask);
g_debug("Number: %" PRIu64 "\nMask: %" PRIu64 "\n", number, mask);
</code></pre>
    </div>