<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following is a basic syntax and usage pass without looking into your algorithm in too much depth. I'll first show the suggested code and then highlight significant differences where it can offer improvements on the original.</p>

<pre><code>#!/usr/bin/env python3

from typing import Iterable, Set


def tokenize(
    text: str,
    vocab: Set[str],
    max_input_chars_per_word=10,
    unk_token="[UNK]"
) -&gt; Iterable[str]:
    for token in text.split():
        n = len(token)
        if n &gt; max_input_chars_per_word:
            yield unk_token
            continue

        start = 0
        sub_tokens = []

        while start &lt; n:
            end = n
            cur_substr = None
            while start &lt; end:
                substr = token[start:end]
                if start &gt; 0:
                    substr = "##" + substr
                if substr in vocab:
                    cur_substr = substr
                    break
                end -= 1
            if cur_substr is None:
                yield unk_token
                break
            sub_tokens.append(cur_substr)
            start = end
        else:
            yield from sub_tokens


def test():
    vocab = {"the", "go", "##es", "to", "eat", "pum", "##pkins", "of", "##gos", "##stein"
             "#400", "1", "boredom", "##folk", "man",
             "##go", "out", "folks", "##0",
             "un", "##aff", "##able"}

    s = "the unaffable folks goes to eat 1400 folkspkinsgosgo pumpkins and 10 mangos out of boredom"

    result = tokenize(s, vocab)
    assert list(result) == [
        'the',
        'un',
        '##aff',
        '##able',
        'folks',
        'go',
        '##es',
        'to',
        'eat',
        '[UNK]',
        '[UNK]',
        'pum',
        '##pkins',
        '[UNK]',
        '1',
        '##0',
        'man',
        '##gos',
        'out',
        'of',
        'boredom']


test()
</code></pre>

<h2>Rationale</h2>

<ul>
<li>Add PEP484 type hints such as <code>Iterable</code> for the return of your function.</li>
<li>Require that you accept a <code>set</code> for <code>vocab</code>. All you do on it is membership testing, i.e. <code>if substr in vocab:</code>, so a set will be much faster.</li>
<li>Make this function a generator and <code>yield</code> instead of building up an <code>output_tokens</code> list.</li>
<li>Store the token length in a variable such as <code>n</code>, considering you need it so often.</li>
<li>Do not split out <code>token</code> into <code>chars</code>, and do not call <code>join</code>. All you need is the <code>token</code> string.</li>
<li>Do not track an <code>is_bad</code> flag. Use a <code>for</code>/<code>else</code> to detect whether a <code>break</code> occurred.</li>
<li>Use your test data in actual <code>assert</code> tests.</li>
</ul>
    </div>