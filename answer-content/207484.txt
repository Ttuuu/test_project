<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are doing a lot of unnecessary work. Why split each row only to join it with single spaces and then split it again by those single spaces?</p>

<p>Instead, here is a list comprehension that should do the same thing:</p>

<pre><code>def get_workload(file_name="workload.txt"):
    with open(file_name) as f:
        return [[float(x) for x in row.split()] for row in f]
</code></pre>

<p>This uses the fact that files are iterable and when iterating over them you get each row on its own.</p>

<p>If this is still too slow (or e.g. too large to fit into memory), then you need to process each row separately. For this you would make this a generator of processed lines:</p>

<pre><code>def get_workload(file_name="workload.txt"):
    with open(file_name) as f:
        for row in f:
            yield [float(x) for x in row.split()]
</code></pre>
    </div>