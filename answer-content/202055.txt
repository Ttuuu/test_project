<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>Value</code> issues</h1>

<ul>
<li><p><code>friend bool operator==(const Value&amp; lhs, const Value&amp; rhs)</code> can be <code>noexcept</code>. Also, why use those <code>static_cast</code>s instead of simply comparing <code>lhs.magnitude == rhs.magnitude</code>? That's why it's a <code>friend</code> in the first place: To allow access to non-<code>public</code> members.</p></li>
<li><p>Similar for <code>operator&lt;</code>.</p></li>
<li><p><code>operator+=</code> and <code>operator-=</code>: Both can be <code>noexcept</code>, and in both the <code>static_cast</code> can be replaced by accessing <code>other.magnitude</code>.</p></li>
<li><p><code>auto const &amp;operator*(long double scalar) const</code></p>

<p>Just that signature gives me a headache. A multiplication is supposed to return a new value, not modify one of its operands! If I do <code>c = b * a;</code> (and <code>a != 1</code>), I wouldn't expect <code>b == c</code> afterwards.</p>

<p>So let's drop the <code>const &amp;</code> part of the return type, and change the function body to return a new <code>Value</code> with the adjusted magnitude:</p>

<pre><code>auto operator*(long double scalar) const noexcept {
    return Value{ _magnitude * scalar };
}
</code></pre></li>
<li><p>Similar for <code>friend auto&amp; operator*(long double scalar, Value const&amp; other)</code>: drop the reference from the return type.</p></li>
<li><p><code>long double mutable magnitude_{0.0};</code>: Why does this need to be <code>mutable</code> (other than to make the "wrong" scalar multiplication work)?</p></li>
</ul>

<h1>General stuff</h1>

<ul>
<li><p>Please put the user-defined literals into their own namespace. This allows user to choose which literals should apply. I can already see collisions with literals from the <code>&lt;chrono&gt;</code> header!</p></li>
<li><p>Is there a reason <code>long double</code> gets passed by value. but <code>Value</code> isn't? They should be the same size, after all.</p></li>
<li><p>As @TobySpeigh mentioned in a comment, there are other SI base units, like candela or Ampere. It's surprising that those are missing.</p></li>
<li><p>Also, is there a reason for using kilograms instead of grams as the base unit? That factor of 1000 shouldn't make that much of a difference.</p></li>
<li><p>operators <code>*=</code>, <code>/=</code>, <code>%</code> and <code>%=</code> are missing throughout the implementation.</p></li>
<li><p>With some effort, most if not all of this library could be made <code>constexpr</code>, thus allowing better optimization (or precalculation of values at compile time).</p></li>
<li><p>Some of those "values" not only have a magnitude, but also a direction (i.e. they're a vector, not a scalar). The current system can't really handle those.</p></li>
</ul>
    </div>