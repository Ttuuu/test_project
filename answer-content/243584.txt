<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>You should have imports at the top of your code. Having them in the middle of code makes it needlessly confusing with no benefit.</li>
<li>You code doesn't account for the possibility of a user not entering an integer as input. You can utilize a <code>while</code>, <code>try</code> and <code>except ValueError</code> to allow a user to attempt to re-enter a value.</li>
<li>You should keep code out of the global scope. Wrapping your code in a <code>main</code> function will help prevent future mishaps.</li>
<li>You should really use a better name than <code>x</code>, <code>amount</code> is descriptive.</li>
<li>Rather than <code>r</code> you can use <code>_</code> or <code>__</code> to denote that you are throwing away the value. This is no different that what you have done now, but it is a custom to help others understand your code quickly.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>import random


def roll_dice(amount):
    for _ in range(amount):
        print(random.randint(1, 20))


def main():
    while True:
        try:
            amount = int(input("How many times do you want to roll the dice? "))
            break
        except ValueError:
            print("That is not a valid whole number.")
    print(amount)
    roll_dice(amount)


main()
</code></pre>

<p>There are some more advanced things you can do too.</p>

<ol start="6">
<li>You can use an <code>if __name__ == "__main__":</code> guard to help prevent your <code>main</code> code from running accidentally. If it is imported by accident from another script.</li>
<li>It would be better for you to return the values of the dice rather than <code>print</code>. This allows you to reuse the function later if you need to use the results of the thrown dice.</li>
<li>You can use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> to select <code>k</code> amount of values.</li>
<li>Print is slow. You may want to change to use <code>"\n".join</code> to reduce the overhead from calling <code>print</code> multiple times. However you need to convert all the values to strings.</li>
<li><p>To easily convert each value in a list to a string you can use a for loop, building a new list.</p>

<pre class="lang-py prettyprint-override"><code>output = []
for item in roll_dice(amount):
    output.append(str(item))
</code></pre>

<p>This contains a lot of noise, so we can use a list comprehension to simplify this.</p>

<pre class="lang-py prettyprint-override"><code>output = [str(die) for die in roll_dice(amount)]
</code></pre></li>
</ol>

<pre class="lang-py prettyprint-override"><code>import random


def roll_dice(amount):
    return random.choices(range(1, 21), k=amount)


def main():
    while True:
        try:
            amount = int(input("How many times do you want to roll the dice? "))
            break
        except ValueError:
            print("That is not a valid whole number.")
    print(amount)
    print("\n".join([str(die) for die in roll_dice(amount)]))


if __name__ == "__main__":
    main()
</code></pre>

<p><strong>Note</strong>: Personally I don't think using the list comprehension and <code>str.join</code> to be as nice as a for loop when it comes to non-performance critical code. This is to show you how you can improve future code with the code you have today.</p>
    </div>