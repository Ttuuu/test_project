<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While your code is generally easy to read and understand, I believe you have slightly over complicated things, there's no need to define an object with several methods to autocomplete a form.</p>

<p>Before I get to that though, let's take a look at your code.</p>

<ol>
<li><p>Good work with encapsulating all of your code in an IIFE and forcing strict mode.</p></li>
<li><p><code>formDefaults</code> is a decent name, I was able to guess almost exactly what it would contain when I first read it. However, since it also contains the page url, I would rename this to <code>pages</code>. <code>urlPattern</code> is also decent, though I expected it to be a regex due to the <code>pattern</code> suffix. <code>valueSet</code> on the other hand gives me absolutely no information about what it contains. I'd recommend renaming this to something like <code>defaults</code>.</p></li>
<li><p>The <code>run</code> method accepts a <code>formDefaults</code> parameter, but doesn't use it. It calls <code>tryEachPattern</code> and <code>tryEachPattern</code> uses the variable declared outside <code>formFiller</code>. If you take parameters, you should use them. </p></li>
<li><p>Using arrow functions doesn't actually help you here. Every single arrow function in this code takes a <code>_this</code> parameter. Arrow functions are supposed to make working with <code>this</code> easier, not more cumbersome! Just use regular functions if you need to pass a <code>_this</code> argument.</p></li>
<li><p><code>tryEachPattern</code> is more complex than it needs to be. There is an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" rel="nofollow noreferrer">Array.find</a> method which can find a match in an array for you and returns <code>undefined</code> if the value was not found.</p></li>
<li><p>Don't explicitly compare boolean values with <code>===</code>, in <code>tryEachPattern</code> you can just do <code>if (matched)</code> which is easier to read.</p></li>
<li><p>Don't assign a result to a variable just to return that variable. <code>var matched = ...; return matched</code> can just be written as <code>return ...</code>.</p></li>
<li><p>Don't use <code>String.match</code> to test if a string contains another string. Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes" rel="nofollow noreferrer">String.includes</a>.</p></li>
<li><p>Prefer <code>const</code> and <code>let</code> to <code>var</code>. <code>const</code> is especially helpful as it tells readers that the assigned value will not be changed (though it could be mutated).</p></li>
<li><p>In <code>fillForm</code>, there's no need to write a bounded <code>for</code> loop. Prefer <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> pattern or the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer">Array.forEach</a> call to make it easier to immediately know you are looping over everything.</p></li>
<li><p>I don't see any reason that the <code>click</code> handler should call <code>event.preventDefault()</code>, the button won't cause any navigation so it shouldn't be necessary unless the page does something odd.</p></li>
<li><p>If the page is already including jQuery, it makes sense to use it here as it simplifies the creation of the auto fill button. Otherwise, it only takes like 4 more lines of code and I would recommend dropping the jQuery dependency to speed up your script.</p></li>
<li><p>jQuery provides a <a href="https://api.jquery.com/click/" rel="nofollow noreferrer"><code>.click</code></a> method as a shorter alternative to <code>.on('click', ...</code></p></li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">Destructuring</a> is an amazing tool that can make code easier to read by giving immediate access to desired properties on an object.</p></li>
</ol>

<p>At the start I mentioned that this was more complicated than it needed to be. Here is how I would write an equivalent script.</p>

<pre class="lang-js prettyprint-override"><code>/*jshint esversion: 6 */
(function ($) {
    'use strict';

    const pages = [
        {
            url: '/profile/user',
            defaults: [
                { selector: '#username', value: 'bill' },
                { selector: '#lastname', value: 'miller' },
                { selector: '#auth_pin', value: '1234' },
            ]
        },
        {
            url: '/profile/company',
            defaults: [
                { selector: '#companyname', value: 'bill' },
                { selector: '#state', value: 'washington' },
            ]
        },
    ];

    const page = pages.find(({ url }) =&gt; location.href.includes(url));

    if (page) {
        const button = $('&lt;button type="button" style="position: absolute; right: 10px; bottom: 10px"&gt;Auto Fill&lt;/button&gt;');
        button.click(() =&gt; {
            for (const { selector, value } of page.defaults) {
                $(selector).val(value);
            }
        });
        $('body').append(button);
    }

})(jQuery);
</code></pre>
    </div>