<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, be sure you're compiling with optimizations enabled.</p>

<p>In <code>multiply_matrices</code> you don't need to explicitly fill your matrix with zeros, as the vector constructor will do that.</p>

<p>In the <code>kuramoto_exe</code> constructor, the member initializer list has the member variables in the wrong order.  They will be constructed in the order they are declared, so <code>N</code> will be constructed before <code>coupling</code> despite its appearing later in the list.  While not an issue here, it can be if there are dependencies among the member variables, and some compilers will issue a warning when you do this.</p>

<p>In your matrix multiply, accumulate the result to a local variable, then store the result in <code>mult[i][j]</code>.  This avoids the potential of multiple index calculations.</p>

<p>When calculating the Jacobian, the diagonal members are the negative of the sum of the horizontal members.  You're doing twice as much work as you need to.  Accumulate the sum as you process the row (skipping the diagonal element) then store the diagonal element when you're done with the row (<code>Jac[i][i] = -rowsum;</code>).</p>

<p>When you're doing the initial reshaping (filling the <code>Y</code> matrix), it is probably better to put the <code>i</code> loop on the outside, so that your writes are sequential.  It is easier for the CPU to handle nonsequential reads then nonsequential writes.</p>

<p>Rather than using a vector of vectors, consider creating a matrix class that stores all elements contiguously (in one vector) and computes the appropriate index.  This avoids the double lookup you currently have.</p>
    </div>