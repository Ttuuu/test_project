<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>const int validCodePointCount = 10;
const int validCodePointOffset = 48;
</code></pre>
</blockquote>

<p>Constants should be written in PascalCase, whether it is <code>private</code> or local.</p>

<blockquote>
<pre><code>while (0 &lt; index--) {
var digit = (value[index] - validCodePointOffset);
</code></pre>
</blockquote>

<p>What is this? A reverse foreach which could be written as <code>foreach(var c in value.Reverse())</code>. Also, the <em>community</em> standard for bracket placement is generally vertically aligned. (Although, this is more a question of style that you or your team follow.)</p>

<blockquote>
<pre><code>var digit = (value[index] - validCodePointOffset); // validCodePointOffset -&gt; 48
</code></pre>
</blockquote>

<p>A <code>int.Parse</code> could be used instead. While we are at it, there is no argument guard that ensures <code>value</code> will always be a string of digits.<br>
edit: If you look to support an arbitrary set of characters, you can use a lookup table to map the character to its <em>"numerical"</em> value.</p>

<blockquote>
<pre><code>if ((validCodePointCount - 1) &lt; (digit &lt;&lt;= 1)) {
    digit -= (validCodePointCount - 1);
}
</code></pre>
</blockquote>

<p>It it really hard to understand what this code is trying to do. The wiki says: "If the result of this doubling operation is greater than 9, then add the digits of the product." This could be added as a comment to explain this bit of code. I wouldn't recommend using bit-shifting for simple multiplication. It adds an unnecessary layer in this case, when <code>*= 2</code> could be used.
Or, use code that is easier to read:</p>

<pre><code>digit *= 2;
if (digit &gt;= @base)
    digit = digit % @base + 1;
</code></pre>

<blockquote>
<pre><code>return ((validCodePointCount - (sum %= validCodePointCount)) % validCodePointCount);
</code></pre>
</blockquote>

<p><del><code>10 - (x mod 10)</code> can never exceed 10, so the last modulo operation is completely unnecessary. I would suggest replacing the <code>validCodePointCount</code> constant with its value. Unless there is a better variable name, which I have a lack of word for.</del><br>
Again quoting the wiki: "The check digit (x) is obtained by computing the sum of the other digits (third row) then subtracting the units digit from 10."</p>

<hr>

<pre><code>private static readonly Dictionary&lt;char, int&gt; CharacterMap = 
    "0123456789"
        .Select((x,i) =&gt; (x,i))
        .ToDictionary(x =&gt; x.x, x =&gt; x.i);

public static int GetLuhnCheckSum(string value)
{
    if (!value.All(CharacterMap.ContainsKey))
        throw new ArgumentException("Value contains invalid characters", nameof(value));

    int @base = CharacterMap.Count;
    var parity = true;
    var sum = 0;

    // process the number from right to left
    foreach (var c in value.Reverse())
    {
        var digit = CharacterMap[c];

        // From the rightmost digit, which is the check digit, and moving left, double the value of every second digit.
        if (parity)
        {
            digit *= 2;

            // If the result of this doubling operation is greater than 9, then add the digits of the product.
            if (digit &gt;= @base)
                digit = digit % @base + 1;
        }

        parity = !parity;
        sum += digit;
    }

    // The check digit (x) is obtained by computing the sum of the other digits then subtracting the units digit from 10
    return (@base - (sum % @base)) % @base;
}
</code></pre>

<hr>

<p>edit: fixed check sum can be <code>base</code> instead of 0<br>
edit: updated the code to support different base system</p>
    </div>