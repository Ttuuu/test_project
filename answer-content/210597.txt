<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, you are heavily overthinking it. And, as a result, over-engineer the code, making it mostly overkill. A theory is a good thing, in reality it is always a trade-off between security and user experience. For example, on most sites, including Stack Overflow, a user is "remembered", which is essentially like an endless session which doesn't care for the changed IP address. </p>

<p>Besides,  you must take any information that is older than 2-3 years with a pinch of salt. For example, when these 2 answers have been written, HTTPS weren't a commonplace thing. But now it is, making most of these measures obsoleted. Yet at the same time HTTPS is <strong>way much more important</strong> than most of these tricks. </p>

<p>Besides, I just don't understand some measures you are taking. Why you are hashing a user agent? Or why you're checking a user agent and an ip address both against a session and a database? Isn't just a session enough? Or that decision to set the cookie lifetime. As far as I remember, the cookie would renewed at each request, so it shouldn't be an issue, but really. Did you <em>ever</em> try to work with a site with such a restriction? Even my bank logs me out after the inactivity timeout, not every 20 minutes. And your site is not a bank nor anything of similar level of security.</p>

<p>Some levels of verbosity I just don't understand. </p>

<pre><code>  $id = $row['id'];
  $_SESSION['userID'] = $id;
</code></pre>

<p>can't we have it already as <code>$_SESSION['userID'] = $row['id'];</code>?</p>

<p>So in the end I would </p>

<ul>
<li>first and foremost make your site https</li>
<li>use <code>session_set_cookie_params()</code> instead of that set of ini_set before each session_start(), because PHP's execution is atomic, each new instance knows nothing of the settings made in the other instance</li>
<li>make <code>page_protect()</code> just check the user_id in the session. it should be enough.</li>
</ul>

<p>There are other issues in this code</p>

<p>Your database wrapper is <a href="https://phpdelusions.net/pdo/common_mistakes#statefulness" rel="nofollow noreferrer">stateful</a>. Means the first query you will run in a loop will give you unexpected results. </p>

<p>Your wrapper should be either spit in two classes, as PDO itself does, or offer methods that give you the desired result in one run, without storing any state. For example,</p>

<pre><code>  $sql = "SELECT id, password, username, user_level FROM users WHERE username = ?";
  $row = $link-&gt;getOneRow($sql, [$username]);
</code></pre>

<p>And you may note that the bind function is overkill as well. PDO can accept query parameters as an array, which i way more convenient. I even wrote an article about usual misconceptions in database wrappers linked above, you may find it useful.  </p>

<p>Your database wrapper is accessed via global keyword which is unanimously frowned upon. At least make it a singleton, which is also despised but at least cannot be written over. </p>
    </div>