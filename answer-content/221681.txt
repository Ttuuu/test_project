<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all: great code. I'd love to read code like this in our implementations. For me that's a nice mixture of useful comments when needed with self-explaining code.</p>

<p>I also like the modern way of writing using <code>constexpr</code> instead of <code>#define</code>, which I still see a lot.</p>

<p>I'm not a C++ pro, rather coming from the C# side, so I notice the following:</p>

<ul>
<li><p><code>std::size_t</code> is IMHO thought for the <code>sizeof</code>. You use it almost everywhere. I'd prefer to read <code>int</code>, <code>long</code> or even <code>using ll = long long;</code>. Using <code>size_t</code> for me adds semantic: this is of type <code>size</code>, so I e.g. use it as the end condition for a loop, use it for memory allocation or similar. That's not the case in the prime program.</p></li>
<li><p><code>isPrime()</code> takes a number and a list of primes, but it's not documented what needs to be in that list in order to make the function work. I could potentially call it with a large number but an empty list.</p></li>
<li><p>I dislike crippled <code>for</code> loops. Even worse with two statements in the increment part. What's wrong with a while loop? </p>

<pre><code>while(result.size() &lt;= primeRequired) {
    if (isPrime(next, result)) {
        result.emplace_back(next);
    }   
    next += inc;
    inc  = 6 - inc;
}   
</code></pre></li>
<li><p>typo: <code>primeRequired</code> should IMHO be <code>primesRequired</code>, because you don't want to go up to a number but up to a count.</p></li>
<li><p>you could split the main method in two methods, one for calculating (testable by unit tests) and one for printing</p></li>
</ul>

<p>Just a though: instead of using math for doing the <code>inc</code> magic, would C++ support something like</p>

<pre><code>int nextinc() {
  while(true) {
    yield 2;
    yield 4;
  }
}
</code></pre>
    </div>