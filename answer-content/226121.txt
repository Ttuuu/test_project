<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is pretty clear in what it does, good work.</p>

<hr>

<pre><code># We define a function here.
def ...
...
... = {} # Empty dictionary
...
... = False # Set the flag to 'False'
</code></pre>

<p>Many of these comments are not all that useful. I can see by looking at the code that the flag is set to false, or that a function has been defined. Usually you would comment with the reason why a piece of code exists. If you removed a comment from beside some code, could you still work out what the code does? If so the comment is probably not useful.</p>

<hr>

<pre><code>def display_comments():
    """Displays User Input (comments)"""
    if user_comments:  # If the dictionary 'user_comments' has at least one key value pair then execute this block of code.
        print("\nTop Comments:")
        for username, comment in user_comments.items(): # Define a for loop for each key value pair in the dictionary 'user_comments'.
            print(f"\n\t{username}: {comment}.")  # Print each key value pair.
</code></pre>

<p>This looks pretty good. It does what it says it does. Remove the inline comments and it is golden.</p>

<hr>

<pre><code>banned_users = ['pete', 'jack', ...
...
if username.lower() in banned_users:
</code></pre>

<p>Extracting banned users to a list is good. An issue might arise here if a with an uppercase letter is is added to the banned list. He won't be prevented from commenting! In general there are two ways to avoid this problem</p>

<ol>
<li>Do a case-insenstive compare. In a Java this would be done with username.equalsIgnoreCase(banned_user)</li>
<li>Normalize both strings and then compare. This is the recommended method in Python.</li>
</ol>

<p>So I would suggest making sure every banned user has been lowercased</p>

<pre><code>banned_users = ['pete', 'jack', ...
banned_users = [banned_user.lower() for banned_user in banned_users]
</code></pre>

<p>If you believe you'll ever need to deal with international usernames <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="noreferrer">casefold</a> may be of interest. It will normalize strings more aggressively than lower will.</p>

<p>One result of lowercasing the names is that it cuts down on the number of available usernames. If Ben Dor and B. Endor both try to sign up as BenDor and BEndor respectively, only one can get the name. Is that OK? Will this ever be a problem?</p>

<hr>

<pre><code>repeat = input(continue_prompt)
if repeat == 'no':
</code></pre>

<p>This is one place I would lowercase as an answer of "NO" or "No" clearly indicate the user is done.</p>

<hr>

<pre><code>user_comments = {}
...    
user_comments[username] = comment
</code></pre>

<p>As the comments are stored in a dictionary, every username will only have one comment, the latest one they've made. For instance if the chat was meant to be</p>

<pre><code>A: where is the coal?
B: walk west for 2 mins then
B: north for 1 min
</code></pre>

<p>The comments appear as</p>

<pre><code>A: where is the coal?
B: north for 1 min
</code></pre>

<p>Is that intended? If not you can change to use a list containing the username and comment instead</p>

<pre><code>comments = []
...
comments.append((username, comment))
</code></pre>

<p>and display_comments looks nearly identical</p>

<pre><code>for username, comment in comments:
    ...
</code></pre>
    </div>