<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>This review may sound a bit harsh, but bad habits are hard to break so I point them out.</p>

<ul>
<li>Use constants for variables that do not change.</li>
<li>Don't create single use variables if they do not improve readability.</li>
<li>Don't test for equality / inequality when the statement expression evaluates to a boolean. eg <code>if(str.includes(target) === true){</code> is the same as <code>if (str.includes(target)) {</code></li>
<li>Idiomatic JS has space after <code>if</code> and <code>else</code>, <code>else</code> on the same line as closing <code>}</code> space between <code>){</code></li>
<li><p>when if statements have all the branches return the literal value of the evaluated expression, return the result of the expression not literals. eg You have <code>if 
(lastIndexOfString === subtractLengths) { return true } else { return false }</code> can be just <code>return lastIndexOfString === subtractLengths;</code></p></li>
<li><p>If a statement block returns then it should not be followed by an <code>else</code> eg <code>if(foo) { return bar ) else { return foo }</code> does not need the second block <code>if (foo) { return bar } return foo;</code></p></li>
<li>Don't repeat logic. You find the last index with <code>str.lastIndexOf(target);</code> then you test if <code>target</code> is in <code>str</code>. with <code>str.includes(target)</code> yet the index you have from the previous line holds that information already <code>if (lastIndexOfString &gt; -1) {</code> You are just doubling up on the same complex test.</li>
<li>Avoid preempting calculations that may not be needed. The value <code>subtractLengths</code> is only needed if <code>str</code> contains <code>target</code>, if not you have calculated a value that is never used.</li>
</ul>

<h3>Names</h3>

<p>Your naming is very bad. Too verbose, inconsistent, and just a mess.</p>

<p>When naming variables remember the context in which the names are created. They need only have meaning within this context and need nothing outside this boundary.</p>

<p>We all can read, but most computer languages have a problem with spaces, soWeEndUpUsingSomeCrazy capitalization to get past this. This makes these names very prone to being miss read and miss typed. As JS is not compiled such errors can hide in code for a very long time. When naming less is more.</p>

<p>Some naming tips.</p>

<ul>
<li>Keep names short 1 2 words if possible.</li>
<li>Use common abbreviations. eg <code>str</code>, for <code>string</code>, <code>idx</code> for <code>index</code>, <code>len</code> for <code>length</code>. Don't make up abbreviations</li>
<li>Don't use conjunctions and avoid prepositions in variable names.</li>
<li>Meaning is inferred, and often in good code what the variable name actually is, is only relevant as an identifier, the semantic meaning being self evident from its location, scope, declaration, assignment, and use. </li>
</ul>

<h2>Rewrite</h2>

<p>Using the above points rewriting your function with the same logic we get a smaller cleaner faster and arguably better function</p>

<pre><code>function confirmEnding(str, endStr) {
    const idx = str.lastIndexOf(endStr);
    if (idx &gt; -1) { return idx === (str.length - endStr.length) }

    return false;
}
</code></pre>

<p>I would change some things to cover some edge cases you may not have thought of.</p>

<pre><code>function confirmEnding21(str = "" , end = "") {
    const idx = str.lastIndexOf(end);
    return idx &gt; -1 &amp;&amp; end.length &gt; 0 &amp;&amp; idx === (str.length - end.length);
}
</code></pre>

<h2>Testing</h2>

<p>Your tests are weak. </p>

<p>Altogether you only have 4 different tests.</p>

<pre><code>confirmEnding("Bastian", "n"); 
confirmEnding("Congratulation", "on");
confirmEnding("Connor", "n");
confirmEnding("Open sesame", "pen");
</code></pre>

<p>All the other tests are just repeating one of the above. However there are many tests you have not presented. (NOTE I am guessing the expected values so only show my expectation and functions return)</p>

<pre><code>confirmEnding("","");        // expect false. Actual true
confirmEnding("abcdef", ""); // expect false. Actual true
confirmEnding("abcdef", "abcdef"); // expect true. Actual true
confirmEnding("abcde", "abcdef");  // expect false. Actual false
confirmEnding("", "abcdef");       // expect false. Actual false
</code></pre>

<p>valid edge cases</p>

<pre><code>confirmEnding("abcdef"); // expect false. Throws Cannot read property 'length' of undefined
confirmEnding();         // expect false. Throws Cannot read property 'length' of undefined     
</code></pre>

<p>totally unexpected values</p>

<pre><code>confirmEnding(1000, 0);   // expect true. Throws str.lastIndexOf is not a function
confirmEnding(1000, null);// expect false. Throws Cannot read property 'length' of null
</code></pre>

<p>A function throwing an exception can be normal behavior and pass the unit tests if the exception is the correct type. This is part of the reason unit tests must be extensive. Subtle changes to the code layout and style can change the behavior. </p>

<p>For example moving the line <code>let lastIndexOfString = str.lastIndexOf(target);</code> to the top of the function will change the type of errors thrown for some input. Unit test finds these inconsistencies and prevents a harmless source change become an sleeping disaster.</p>

<p>Unit tests must cover all behaviors or they are a waste of your time.</p>
    </div>