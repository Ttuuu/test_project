<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is already a good answer from @Doi9t. I was too slow to publish mine but can still be useful.</p>

<hr>

<p><em>"My issue is that each color tee has its own "final" data for course rating and course slope, and this makes the calculation differ"</em>. Okay, do you know the the <em>strategy</em> pattern ?</p>

<blockquote>
  <p>In computer programming, the strategy pattern is a behavioral software design pattern that enables selecting an algorithm at runtime. [..]
  Strategy lets the algorithm vary independently from clients that use it [..] Deferring the decision about which algorithm to use until runtime allows the calling code to be more flexible and reusable.</p>
  
  <p>-- <a href="https://en.wikipedia.org/wiki/Strategy_pattern" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Strategy_pattern</a></p>
</blockquote>

<p>However, from what I see, the calculation is always the same, it differ only on the rating and slope. So this is not really a <em>strategy</em> because there is no different algorithm. But this concept of <em>color</em> is still important. There is no interest to create one abstraction when only the values are different, so let's create one <code>Color(rating, slope)</code> class for it. By doing that you will remove the almost duplicated constants, at this time you can create one enumeration for that[1].</p>

<p>The computed handicap is also an important concept, why not extracting one class for that. This will also remove a lot of duplication. And since, the handicap require a tee color to be computed you can create on <em>factory method</em> on the color:</p>

<pre><code>enum Colors implements Color {
  BLACK(146, 74.6f),
  BLUE(139, 72.4f),
  WHITE(129, 70.0f),
  GOLD(133, 71.3f);

  private final short slope;
  private final float rating;

  Colors(short slope, float rating) {
    this.rating = rating;
    this.slope = slope;
  }

  HandicapDifferential handicap(short score) {
    return new HandicapDifferential(score, rating, slope);
  }
}
</code></pre>

<p>Now you have a model that can be tested. But there is still some duplication in the presentation. You can still create one <em>decorator</em> class on <code>Scanner</code> with a couple of method tailored to your needs:</p>

<pre><code>class ConsoleView {
  private final Scanner scanner;
  Presentation(InputStream in) {
    this.scanner = new Scanner(in);
  }

  String getName() {
    System.out.print("Please type your Name: "); 
    return scanner.nextLine().trim();
  }

  String getTeeColor() // ...

  short getScore() // ...

  void print(HandicapDifferential handicap) // ...

}
</code></pre>

<p>So you have some classes for the model and one for handling interactions with the user. You just miss one to coordinate both. This is what your <code>main</code> method will do. But most of the time, mainly for testing, you may want to move that "flow" to one instance instead of the <code>main</code> method.     </p>

<pre><code>class SingleRoundHandicapCalculator {

    public static void main(String[] args) {
        new SingleRoundHandicapCalculator(new ConsoleView(System.in))
        .run();
    }

    // ~ ----------------------------------------------------------------- ~ //

    private final ConsoleView view;

    SingleRoundHandicapCalculator(final ConsoleView view) {
        this.view = view;
    }

    void run() {
        view.greet();
        String color = view.getColor();
        short score = view.getScore();

        HandicapDifferential handicap = Color.valueOf(color.toUpperCase()).handicap(score);
        view.show(handicap);
    }
}
</code></pre>

<p>As you can see the "name" is removed. This is the power of this kind of code, where you can hide some presentation requirement into the view itself.</p>

<p>[1] An enumeration is the ideal candidate to group a set of identical "classes" where only the attributes vary. To have a more flexible model you can create one interface to represents the tee color so that you can "generate" them at runtime later from any datasource if needed.</p>
    </div>