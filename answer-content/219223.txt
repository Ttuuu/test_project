<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is really complicated. First, your code should be abstracted a little more. It is not specific to feature IDs, therefore the terminology should not use these words. The same algorithm can be used to select which pages to print from a document, therefore the variables should be just <code>nums</code> and <code>ranges</code>. To test your current code, I wrote:</p>

<pre><code>[Test]
public void TestRanges()
{
    Assert.AreEqual("", Str(Ranges(new List&lt;int&gt;())));
    Assert.AreEqual("1", Str(Ranges(new List&lt;int&gt; { 1 })));
    Assert.AreEqual("1-5", Str(Ranges(new List&lt;int&gt; { 1, 2, 3, 4, 5 })));
    Assert.AreEqual("1-3, 5", Str(Ranges(new List&lt;int&gt; { 1, 2, 3, 5 })));
    Assert.AreEqual("1, 3, 5-6", Str(Ranges(new List&lt;int&gt; { 1, 3, 5, 6 })));
}
</code></pre>

<p>I wrote a helper function <code>Str</code> so that I don't have to construct a list of ranges for each test case:</p>

<pre><code>public static string Str(List&lt;(int from, int to)&gt; ranges)
{
    var parts = new List&lt;string&gt;();

    foreach (var range in ranges) {
        if (range.from == range.to) {
            parts.Add(range.from.ToString());
        } else {
            parts.Add(range.@from + "-" + range.to);
        }
    }

    return string.Join(", ", parts);
}
</code></pre>

<p>After renaming your function to <code>Ranges</code>, these tests ran successfully. So I was ready to refactor your code. I did not really do this since your code looked too complicated to start with. Instead, I remembered that I had successfully used the following pattern quite often:</p>

<pre><code>var start = ...;
while (start &lt; nums.Count) {
    var end = ...;
    while (end &lt; nums.Count) {
    }
}
</code></pre>

<p>With this knowledge I wrote the following code:</p>

<pre><code>public static List&lt;(int from, int to)&gt; Ranges(List&lt;int&gt; nums)
{
    nums = nums.OrderBy(a =&gt; a).Distinct().ToList();

    var ranges = new List&lt;(int from, int to)&gt;();

    var start = 0;
    while (start &lt; nums.Count) {
        var end = start + 1;   // the range is from [start, end).

        while (end &lt; nums.Count &amp;&amp; nums[end - 1] + 1 == nums[end]) {
            end++;
        }

        ranges.Add((nums[start], nums[end - 1]));
        start = end;   // continue after the current range
    }

    return ranges;
}
</code></pre>

<p>This code doesn't need any special cases for the last range, or anything else. A range either stops when the end of the numbers is reached, or when the following number is not consecutive. This sounds sensible, and this is exactly what the code is doing.</p>

<p>I removed the check for <code>nums == null</code> since it is not necessary. Collections should never be null, and if they are, the code immediately throws an exception, which is fine.</p>

<p>I also removed the special case for <code>nums.Count == 0</code> since returning an empty list is much better than returning null. Again, expressions that have collection type should never be null. The test cases cover this case, so there's nothing to worry about.</p>
    </div>