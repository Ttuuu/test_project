<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Most things here are already covered. While the year and the month check are fairly straight-forward, the day check is hard.</p>

<pre><code>def daycheck(year, month, day):
    """
    Check if the day is valid.

    Parameters
    ----------
    year : int
    month : int
    day : int

    Returns
    -------
    is_valid : bool
    """
    assert  1 &lt;= month &lt;= 12
    max_days_per_month = {1: 31, 2: 30, 3:31,
                          4: 30, 5: 31, 6:30, 7: 31,
                          8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
    if (day &gt; max_days_per_month[day]) or (day &lt;= 0):
        return False
    if month != 2:
        # Not quite true, e.g. September 1752 in the UK had less than 20 days.
        return True  
    dst_applies = (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0)
    if not_dst_applies and day &gt;= 29:
        return False
    return True
</code></pre>

<p>Things to learn:</p>

<ol>
<li>Use dictionaries. They make things shorter / easier to understand</li>
<li>Yes, February once had 30 days: <a href="https://en.wikipedia.org/wiki/February_30#Swedish_calendar" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/February_30#Swedish_calendar</a></li>
<li>Yes, if a local date is valid depends on the city / country, because of calendar system switches.</li>
<li>It is capture error cases / easy cases in the beginning. The less deep your code is nested, the easier it is to read / check.</li>
</ol>
    </div>