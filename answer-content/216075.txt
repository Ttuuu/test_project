<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use Java <code>LinkedList</code> class</h2>

<p>Almost always prefer built-in data structures to hand-rolled. For instance, your insertion routine takes O(n) time while <code>LinkedList::addLast</code> takes O(1) times.</p>

<p>Also, use an <code>ArrayList</code> instead of an array to hold the lists due to problems with generic arrays in Java.</p>

<h2>Write a <code>Graph</code> class</h2>

<p>A class offers a great opportunity to re-organize your code. It makes it easy to separate initialization and adding edges.</p>

<h2>Correctness issues</h2>

<p>Validate the input to <code>addEdge</code>. Throw an exception if either <code>to</code> or <code>from</code> is not in the appropriate range.</p>

<h2>Style issues</h2>

<ul>
<li>indent and capitalize properly</li>
<li>write fewer comments: only when something need explaining</li>
<li>write shorter comments: use sentence fragments</li>
</ul>

<pre><code>import java.util.ArrayList;
import java.util.LinkedList;

public class Graph {
    private ArrayList&lt;LinkedList&lt;Integer&gt;&gt; adjacencyList;

    public Graph(int numberNodes) {
        adjacencyList = new ArrayList&lt;LinkedList&lt;Integer&gt;&gt;(numberNodes);
        for (int i = 0; i &lt; numberNodes; i++) {
            adjacencyList.add(new LinkedList&lt;Integer&gt;());
        }
    }

    private boolean isValidNode(int index) {
        return index &gt;= 0 &amp;&amp; index &lt; adjacencyList.size();
    }

    public void addEdge(int to, int from) {
        if (!isValidNode(to) || !isValidNode(from)) {
            throw new IndexOutOfBoundsException();
        }

        adjacencyList.get(from).addLast(to);
    }
}
</code></pre>

<pre><code>import java.util.Scanner;

public class GraphRunner {    
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        Graph g = new Graph(5);

        for(int from=0; from &lt; 5; from++) {
            int n=sc.nextInt();
            for(int j=0; j &lt; n; j++) {
                int to=sc.nextInt();
                g.addEdge(to, from);
            }
        }
    }
}
</code></pre>
    </div>