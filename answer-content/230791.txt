<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Argument Checking and Duck-typing</h2>

<p>Two problems with this code:</p>

<pre><code>    if chunk_size &lt;= 0 or not isinstance(input_list, list):
        return False
</code></pre>

<p>If the arguments are the correct type, the function returns a list of lists.  If not, it returns <code>False</code>?  This is going to complicate the code which uses the function.  It is better to raise an exception:</p>

<pre><code>    if chunk_size &lt;= 0:
        raise ValueError("Chunk size must be positive")
</code></pre>

<p>Secondly, you're requiring the input list to actually be a list.  There are many Python types which can behave like a list, but are not instance of <code>list</code>.  Tuples and strings are two easy examples.  It is often better to just accept the type provided, and try to execute the function with the data given.  If the caller provides a something that looks like a duck and quacks like a duck, don't complain that a drake is not a duck.</p>

<h2>Oddity</h2>

<p>In this statement ...</p>

<pre><code>chunked_list = input_list[start_index: int(start_index + chunk_size)]
</code></pre>

<p>... what is that <code>int()</code> for?  It seems unnecessary.</p>

<h2>Return Type</h2>

<p>You are breaking the list into multiple lists.  Your return is not just a simple list; it is a list of lists. <code>List[List[T]]</code>.</p>

<h2>Itertools</h2>

<p>Python comes with many tools builtin.  Check out the <a href="https://docs.python.org/3.7/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code> modules</a>.  In particular, look at the <a href="https://docs.python.org/3.7/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>grouper()</code> recipe</a>.  It reduces your "chunking" code into 2 statements.</p>

<pre><code>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; 
&gt;&gt;&gt; input_list= [10, 2, 3, 40, 5, 6, 7, 88, 9, 10, 11]
&gt;&gt;&gt; chunk_size = 2
&gt;&gt;&gt; 
&gt;&gt;&gt; args = [iter(input_list)] * chunk_size
&gt;&gt;&gt; chunks = list(zip_longest(*args))
&gt;&gt;&gt; 
&gt;&gt;&gt; chunks
[(10, 2), (3, 40), (5, 6), (7, 88), (9, 10), (11, None)]
&gt;&gt;&gt; 
</code></pre>

<p>As demonstrated above, it produces slightly different output.  The last chunk is padded with <code>None</code> values until it is the proper length.  You could easily filter out these extra values.</p>

<pre><code>&gt;&gt;&gt; chunks[-1] = [item for item in chunks[-1] if item is not None]
&gt;&gt;&gt; chunks
[(10, 2), (3, 40), (5, 6), (7, 88), (9, 10), [11]]
&gt;&gt;&gt;
</code></pre>

<p>If your list can contain <code>None</code> values, then a sentinel object could be used instead.  Revised code:</p>

<pre><code>from itertools import zip_longest

def chunk_itertools(input_list: List[T], chunk_size: int) -&gt; List[List[T]]:

    sentinel = object()

    args = [iter(input_list)] * chunk_size
    chunks = list(zip_longest(*args), fillvalue=sentinel)
    chunks[-1] = [item for item in chunks[-1] if item is not sentinel]

    return chunks
</code></pre>

<hr>

<p>JavaScript &amp; PHP reviews left to others</p>
    </div>