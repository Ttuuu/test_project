<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with @Henrik_Hansen's answer.  My answer builds upon his.  </p>

<p>I absolutely don't see a reason for anything to be <code>static</code>.</p>

<p>Your <code>Stopwatch</code> class should only be for a stop watch.  Right now you have commingled a UI into the stopwatch.  In the name of <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">Separation of Concerns</a>, I see no reason for any <code>Console.Write</code> or <code>Console.WriteLine</code> in the <code>Stopwatch</code> class.</p>

<p>Going further, I see no reason for any method in <code>Stopwatch</code> to return a <code>string</code>.  For <code>Duration</code>, simply return the <code>TimeSpan</code> value and leave it to whoever called that to decide what to do with it.  Maybe they want it <code>ToString()</code>, but that's up to them.  Maybe they want to add the <code>Duration</code> leg to cumulative <code>TimeSpan</code>.</p>

<p>Any internal time keeping calling <code>DateTime</code> should always use <code>DateTime.UtcNow</code> and not <code>DateTime.Now</code>.  Granted <code>UtcNow</code> is faster than <code>Now</code> but in real-time that is laughably negligible.  The main reason to do it is to avoid any Daylight Saving Time transitions where you start the stopwatch during standard time and stop it during DST.  This would produce incorrect <code>Duration</code>.</p>

<p>A stopwatch really has only 1 state.  It is either running or it is stopped.  You do not need 2 variables for start and stop state.  This runs the risk of you accidentally having conflicting states, e.g. the <code>isStarted</code> and <code>isStopped</code> are both true or both false.  You only need 1 such variable.  I personally prefer this:</p>

<pre><code>public bool IsRunning { get; private set; }
</code></pre>

<p>Adding to Henrik's skeletal class, I would update it to:</p>

<pre><code>public class Stopwatch
  {
    public TimeSpan Duration { get; }
    public bool IsRunning { get; private set; }

    public void Start() { }
    public void Stop() { }
    public static Stopwatch StartNew() { }
  }
</code></pre>

<p>The interesting thing you can do now with <code>Duration</code> is control the behavior of what happens if someone asks for the <code>Duration</code> while the stopwatch is running.  Would you want to throw an exception?  I personally would want to see the current <code>Duration</code> without stopping the stopwatch.  This would produce a leg time while letting the stopwatch continue running.</p>

<p>Once you get this going, I would suggest you could add other nice methods.  This would mirror <code>Diagnostics.Stopwatch</code>.  Two such methods would be <code>Reset</code> and <code>Restart</code>.</p>
    </div>