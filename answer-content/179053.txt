<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How about this solution, which – if I'm not mistaken – should fulfill all requirements:</p>

<ul>
<li>create a second array</li>
<li>run through all elements of the input array</li>
<li>for each number set the respective key in the second array to true</li>
<li>run through the second array and return the first key which value comes back as <code>undefined</code></li>
<li>if no match is found, return <code>1</code>, so it will work for an empty input array as well</li>
</ul>

<hr>

<pre><code>function findNumber(values) {
  let result = [];

  for (let i = 0; i &lt; values.length; ++i) {
    if (0 &lt;= values[i]) {
      result[values[i]] = true;
    }
  }

  for (let i = 1; i &lt;= result.length; ++i) {
    if (undefined === result[i]) {
      return i;
    }
  }

  return 1
}
</code></pre>

<p><a href="http://jsfiddle.net/uacqsa2h/" rel="noreferrer">Try it yourself</a></p>

<hr>

<p><sup>Patrick and I had a discussion about the real time performance of our solutions (Here's <a href="https://codereview.stackexchange.com/a/179058/21444">Patrick's elegant solution using <code>Set</code></a>). We set up a test, containing around 1000 elements in the input array, including lots of negative values. <a href="https://jsfiddle.net/02ux7ahn/" rel="noreferrer">You can try the test yourself</a>.
</sup></p>

<p><sup>
<a href="https://codereview.stackexchange.com/questions/179037/given-an-array-of-integers-return-the-smallest-positive-integer-not-in-it/179053#comment340062_179053">JollyJoker suggested a similar version</a> in the comments using JavaScript's built-ins <code>filter</code>, <code>reduce</code> and <code>findIndex</code>. I fixed the suggested solution for edge cases and added it to the performance test. You can now <a href="https://jsfiddle.net/tdqwtsf8/" rel="noreferrer">test all three solutions</a>. Keep in mind that these built-ins come with some overhead.
</sup></p>

<p><sup>
<a href="https://codereview.stackexchange.com/a/179042/21444">Janos added code for his algorithm as well</a> now. To complete the performance test, I've added it as well and <a href="https://jsfiddle.net/7k7kwz92/" rel="noreferrer">here's the final fiddle containing all four solutions</a>.
</sup></p>
    </div>