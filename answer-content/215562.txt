<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Framebuffer()</h1>

<p>Could end with</p>

<pre><code>    charBuffer = std::vector&lt;char&gt;(height * width, ' ');
    textColorBuffer = std::vector&lt;Color&gt;(height * width, {255u, 255u, 255u});
    backgroundColorBuffer = std::vector&lt;Color&gt;(height * width);
</code></pre>

<p>instead of calling clear.</p>

<h1>void clear()</h1>

<p>Alternative implementation and let container implementation decide what is most effective.</p>

<pre><code>    charBuffer.assign(charBuffer.size(), ' ');
    textColorBuffer.assign(textColorBuffer.size(), {255u, 255u, 255u});
    backgroundColorBuffer.assign(backgroundColorBuffer.size(), {});
</code></pre>

<h1>void setChar()</h1>

<p>Don't copy the box in the interface, use a const reference. And don't call <code>size()</code> more than necessary.</p>

<pre><code>void setChar(size_t col, size_t row, const std::vector&lt;std::string&gt;&amp; box) {
    assert(row &lt; height &amp;&amp; col &lt; width &amp;&amp; row &gt;= 0 &amp;&amp; col &gt;= 0);
    for (size_t rowOffset = 0u, boxSize = box.size(); rowOffset &lt; boxSize; rowOffset++) {
        for (size_t colOffset = 0, rowSize = box[rowOffset].size(); colOffset &lt; rowSize; colOffset++) {
            setChar(col + colOffset, row + rowOffset, box[rowOffset][colOffset]);
        }
    }
}
</code></pre>

<h1>void setTextColor()</h1>

<p>Again, don't copy the box on each call. And another use of references inside the loops.</p>

<pre><code>void setTextColor(size_t col, size_t row, const std::vector&lt;std::vector&lt;Color&gt;&gt;&amp; box) {
    assert(row &lt; height &amp;&amp; col &lt; width &amp;&amp; row &gt;= 0 &amp;&amp; col &gt;= 0);
    for (size_t rowOffset = 0, boxSize = box.size(); rowOffset &lt; boxSize; rowOffset++) {
        auto &amp; line = box[rowOffset];
        for (size_t colOffset = 0, line_sz = line.size(); colOffset &lt; line_sz; colOffset++) {
            setTextColor(col + colOffset, row + rowOffset, line[colOffset]);
        }
    }
}
</code></pre>

<h1>void setBackgroundColor()</h1>

<p>Similar comments regarding <code>setBackgroundColor</code>.</p>

<h1>void print()</h1>

<p>Alternative lambda with <code>std::stringstream</code>.</p>

<pre><code>    auto printer = [this]() {
        std::stringstream output;
        for (size_t row = 0; row &lt; height; row++) {
            for (size_t col = 0; col &lt; width; col++) {
                Color textColor = getTextColor(col, row);
                Color backgroundColor = getBackgroundColor(col, row);
                output &lt;&lt; "\033[38;2;"
                       &lt;&lt; static_cast&lt;int&gt;(textColor.r) &lt;&lt; ';'
                       &lt;&lt; static_cast&lt;int&gt;(textColor.g) &lt;&lt; ';'
                       &lt;&lt; static_cast&lt;int&gt;(textColor.b) &lt;&lt; "m"
                          "\033[48;2;"
                       &lt;&lt; static_cast&lt;int&gt;(backgroundColor.r) &lt;&lt; ';'
                       &lt;&lt; static_cast&lt;int&gt;(backgroundColor.g) &lt;&lt; ';'
                       &lt;&lt; static_cast&lt;int&gt;(backgroundColor.b) &lt;&lt; 'm'
                       &lt;&lt; getChar(col, row);
            }
            if (row != height - 1) {
                output &lt;&lt; '\n';
            }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(frametime));
        std::system("clear");
        std::cout &lt;&lt; output.rdbuf() &lt;&lt; std::flush;
    };
</code></pre>
    </div>