<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>TL;DR:</strong> See end of answer for updated code with suggested improvements</p>

<p>While I don't have many suggestions regarding nested for-loops, as you only seem to have two of them, I do have a few other suggestions:</p>

<h1>Suggestions</h1>

<h3>1. Use <code>with</code> for file opening</h3>

<p>You use try/finally to open/close your files, and while you're absolutely right to close your files, Python's <code>with</code> statement takes care of this for you. Another lesser-known characteristic of the <code>with</code> statement is that <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">you can "nest" them in a single line</a>, which is useful in your case. </p>

<p>So, I would recommend updating</p>

<pre class="lang-py prettyprint-override"><code>try:
    input_file = open(input_file_path)
    output_file = open(output_file_path, 'w')
    ...  # Do stuff
finally:
    input_file.close()
    output_file.close()
</code></pre>

<p>to</p>

<pre class="lang-py prettyprint-override"><code>with open(input_file_path) as input_file, open(output_file_path, "w") as output_file:
    ...  # Do stuff
</code></pre>

<p>When the context of the <code>with</code> statement is exited, your opened files will automatically be closed.</p>

<h3>2. Clean up variable naming</h3>

<p>Python convention is to use lower snake-case for normal variable names and function names - Camel-case (upper) is <em>usually</em> only used for class definitions. Therefore, I would recommend renaming your <code>checkSequenceCharacters</code> and <code>checkSequenceLength</code> functions to <code>check_sequence_characters</code> and <code>check_sequence_length</code>, respectively. This might be considered nitpicking, but maintaining consistent naming conventions always makes things easier for me.</p>

<h3>3. Use str <code>in</code> str, instead of checking individual equality</h3>

<p>In <code>check_sequence_characters</code>, you can more easily ensure that each character in <code>seq</code> is in an allowed set of characters using the following:</p>

<pre class="lang-py prettyprint-override"><code>if any(c not in "AGTC" for c in seq):
    raise ValueError("Not a valid sequence (A/G/T/C ONLY)")
</code></pre>

<h3>4. Raise Exceptions, instead of printing "ERROR"</h3>

<p>There are a few places in your example where you print error messages. That's fine if you really don't want to raise actual exceptions, but that does seem to be the behavior your code is dancing around. I would recommend reading <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer">Python's documentation on <code>raise</code></a> if you're unfamiliar with it.</p>

<h3>5. Use <code>if __name__ == "__main__"</code> when running module as source</h3>

<p>If you don't know what <code>if __name__ == "__main__"</code> means, check out <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">this explanation</a>. Basically, my recommendation is to start using this pattern even if it may not be strictly <em>necessary</em> in your example (although it does protect you from the lurking <code>seq</code> name-shadowing bug). This will facilitate maintenance of your code should you need to import your example code as a module in the future, for example.</p>

<h3>6. Use <code>enumerate</code> to loop through <code>input_file</code> with line index</h3>

<p>Instead of using the <code>line_location</code> variable, you can remove the <code>line_location = 0</code> line, and change</p>

<pre class="lang-py prettyprint-override"><code>for line in input_file:
    line_location = line_location + 1
</code></pre>

<p>to </p>

<pre class="lang-py prettyprint-override"><code>for line_location, line in enumerate(input_file):
</code></pre>

<p>If you still want <code>line_location</code> to be 1-indexed, just add 1 when you <code>print</code>/<code>write</code> it below.</p>

<h1>Other Notes</h1>

<ul>
<li>For more recent versions of Python, you'll need to use <code>input</code> instead of <code>raw_input</code></li>
<li>If there is any chance your output file has not already been created by you (which seems likely), you should <code>open</code> it using <code>mode="x"</code>, which will create and open the file</li>
<li>If any of the subdirectories in the output file path have not already been created, you'll need to use <a href="https://docs.python.org/3/library/os.html#os.makedirs" rel="nofollow noreferrer">something like <code>os.makedirs</code></a> to handle directory creation</li>
<li>The line <code>print("[*] FILE CREATED AT: " + output_file_path)</code> near the bottom may be misleading, as the output file is created when you call <code>open</code>, not when you call <code>write</code>. This means that even if <code>count == 0</code>, an output file was created (albeit a blank one)</li>
<li>In the provided suggested code, I removed the <code>lines</code> variable, since it isn't used; however, if you actually do need it for something not shown in your example, it can be safely re-added, along with the <code>lines.append(line)</code> line</li>
<li>I would recommend embracing <a href="https://docs.python.org/3.4/library/string.html#format-examples" rel="nofollow noreferrer">Python's string <code>format</code> method</a>, instead of using <code>+</code> to construct strings</li>
</ul>

<h1>TL;DR</h1>

<p>If you decide to follow the above suggestions, your code will probably end up looking something like this:</p>

<pre class="lang-py prettyprint-override"><code>import os
import re

def check_sequence_characters(seq):
    if any(c not in "AGTC" for c in seq):
        raise ValueError("Not a valid sequence (A/G/T/C ONLY)")

def check_sequence_length(seq):
    if len(seq) != 5:
        raise ValueError("Has to be exactly 5 letters long!")

def _execute():
    seq = raw_input("Enter a 5 basepair sequence using only A,G,T,C: \n")
    count = 0
    check_sequence_characters(seq)
    check_sequence_length(seq)
    input_file_path = os.getenv("HOME") + "/Desktop/sequencer/inputfile.txt"
    output_file_path = os.getenv("HOME") + "/Desktop/sequencer/output/" + seq + ".txt"

    with open(input_file_path) as input_file, open(output_file_path, 'x+') as output_file:
        for line_location, line in enumerate(input_file):
            arr = re.findall(seq, line)

            if arr and arr[0] == seq:
                count += 1
                print("[+] Sequence found at line " + str(line_location + 1))
                output_file.write("Line " + str(line_location + 1) + ": " + line + "\n")

        if count != 0:
            print("[*] Matches: " + str(count))
            print("[*] FILE CREATED AT: " + output_file_path)
        else:
            raise RuntimeError("No matches found!")

if __name__ == "__main__":
    _execute()
</code></pre>
    </div>