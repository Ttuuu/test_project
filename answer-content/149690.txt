<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>List all required <code>#include</code>s</h2>

<p>The code needs the following <code>#include</code>s to actually compile.  Since they therefore form part of the interface, they should be included in the file and in a code review:</p>

<pre><code>#include &lt;mutex&gt;
#include &lt;queue&gt;
</code></pre>

<h2>Be clear about ownership</h2>

<p>If the intention is to have a thread-safe queue, then passing pointers in and out is definitely not the way to go.  The problem is with object ownership.  Even if your thread-safe queue works perfectly, all of its inherent goodness is all too easily bypassed because you're using pointers.  For example:</p>

<pre><code>SafeQueue&lt;std::string&gt; sq;

{ 
    std::string msg1{"this message exists"};
    sq.push(&amp;msg1);
}   // msg1 is now destroyed, but queue still has pointer
std::cout &lt;&lt; *sq.next() &lt;&lt; " no longer\n";  // kaboom!
</code></pre>

<p>The problem is that the queue doesn't actually own the object (or at least have a <code>std::shared_ptr</code>) so there's not much point in perfecting the queue until that's addressed.</p>

<h2>Choose better names</h2>

<p>I have never thought of <code>push</code> and <code>next</code> as inverse operations, and I'll bet you never have either.  The <code>push</code> member function name is OK, since it actually does that, but <code>next</code> is just a strange name.  I'd say use <code>pop</code> or <code>pop_front</code> might be better names. </p>

<h2>Minimize locking duration</h2>

<p>In the <code>push</code> code, we have this:</p>

<pre><code>void push(T* elem) {
    m.lock();
    if(elem != nullptr) {
        q.push(elem);
    }
    m.unlock();
}
</code></pre>

<p>But why acquire a lock if you don't need it?  It just slows things down.  You could instead write that like this:</p>

<pre><code>void push(T* elem) {
    if (elem == nullptr) {
        return;
    }
    m.lock();
    q.push(elem);
    m.unlock();
}
</code></pre>

<p>Or better, see the next suggestion:</p>

<h2>Use RAII to reduce errors</h2>

<p>If you happened to forget to remove the lock on the code above, Bad Things would likely happen.  Fortunately, in C++, there's a handy idiom that is very often used in C++ and it's called <a href="https://stackoverflow.com/questions/2321511/what-is-meant-by-resource-acquisition-is-initialization-raii">Resource Allocation is Initialization</a>.  In this context, we use a <a href="http://en.cppreference.com/w/cpp/thread/lock_guard" rel="noreferrer"><code>std::lock_guard</code></a> like this:</p>

<pre><code>void push(T elem) {
    std::lock_guard&lt;std::mutex&gt; lock(m);
    q.push(elem);
}
</code></pre>

<p>The <code>lock_guard</code> automatically gets locked on creation and unlocked on deletion, so when it goes out of scope, the lock is released even if you forget.</p>

<h2>Return an indicator of success</h2>

<p>Since we've already established that passing pointers in or out is a problem, I'd suggest changing the interface for the <code>next()</code> function.  Have it take a reference (so the caller must supply one) and then return a <code>bool</code> to indicate success.  That might look like this:</p>

<pre><code>bool next(T&amp; elem) {
    std::lock_guard&lt;std::mutex&gt; lock(m);
    if (q.empty()) {
        return false;
    }
    elem = q.front();
    q.pop();
    return true;
}
</code></pre>
    </div>