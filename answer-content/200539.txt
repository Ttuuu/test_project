<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both the <code>toLower</code> and the <code>isAllUnique</code> functions miss a speed improvement that could be gained by using character math to compute array indexes, easily avoiding the nested loops:</p>

<ul>
<li><p>To convert upper case English letter to lower case of variable <code>char c</code>, you could do: <code>if ('A' &lt;= c &amp;&amp; c &lt;= 'Z') c = c - 'A' + 'a'</code></p></li>
<li><p>To check that all characters are unique, you could use as storage <code>bool seen[SIZE] = {false};</code>, loop over the characters of the lowercased input, and <code>if (seen[c - 'a']) return false; else seen[c - 'a'] = true;</code></p></li>
</ul>

<p>This would be a lot shorter to write these functions, no need for the alphabet arrays, and perform much better. I would even do it in a single pass, performing the to-lower step character by character without the extra pass.</p>

<p>I find the dedicated class overkill. The code could fit nicely in a simple utility function.</p>

<hr>

<blockquote>
  <p>What if you can not use additional data structures?</p>
</blockquote>

<p>This question was not addressed.
An easy answer is a nested loop, for each character checking if it doesn't appear in the rest of the string, with \$O(n^2)\$ time complexity.
A simple optimization can be to make a first pass summing the values of <code>c - 'a'</code>, and if it's not 0 + 1 + 2 + ... + 26 = 325 then return <code>false</code> immediately, otherwise fall back on the quadratic check.</p>
    </div>