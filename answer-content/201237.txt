<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>EDIT</strong>: my previous answer gave me the idea to do it this way:</p>

<pre><code># define the parameter of number of batch
MaxBatchSize = 10
# first create the the pivot array:
arr_ord_pivot = np.clip(df_ord.pivot(index='ORD_KEY', columns='SKU_KEY',values='QTY').fillna(0).values,0,1)
# get the number of unique ORDER_KEY and SKU_KEY
nb_ORD_KEY, nb_SKU_KEY = arr_ord_pivot.shape

# create empty result array
arr_result = np.zeros((MaxBatchSize, nb_ORD_KEY))

# fill arr_result with values
for batch_size in range(1,MaxBatchSize+1): #loop over batch size
    # create an temp array with initial data from arr_ord_pivot
    # add enough rows to not be bothered by summing not same shape array
    arr_temp = np.vstack([arr_ord_pivot.copy(), 
                          np.zeros((batch_size-nb_ORD_KEY % batch_size,
                                    nb_SKU_KEY))])
    # create the list all previous subarray
    list_arr = [arr_temp[i::batch_size] for i in range(0,batch_size-1)]
    # loop over each subarray to substract all previous ORDER_KEY in same batch
    for k in range(batch_size-1, 0,-1):
        arr_temp[k::batch_size] -= sum(list_arr[:k])
    #fill the result and keep only the good size
    arr_result[batch_size-1] = np.clip(arr_temp,0,1).sum(1)[:nb_ORD_KEY]
</code></pre>

<p>so what I called <code>arr_result</code> is actually your <code>oskupicks_matrix</code>.</p>

<p>I did some <code>timeit</code>, and my method seems 3 times faster than yours for your data.</p>

<p><strong>EDIT 2:</strong> To extend the time comparison, I generate a data with around 10K orders over 2K different <code>ORD_KEY</code> and 50 different <code>SKU_KEY</code> like this:</p>

<pre><code>df_ord = pd.DataFrame({'ORD_KEY':[10000+i for i in range(2000)]*5,
                       'SKU_KEY':np.random.randint(0,50,10000),
                       'QTY':1}).drop_duplicates()
</code></pre>

<p>Note: If you have duplicates over the couple (ORD_KEY, SKU_KEY), the <code>pivot</code> method  won't work, so <code>drop_duplicates</code> is mandatory here with this generating. </p>

<p>As a result, the method above is about 45 time faster than yours with this larger data.</p>

<p><strong>Old answer</strong></p>

<p>I think you can do it this way:</p>

<pre><code># first create the pivot table
df_ord_pivot = df_ord.pivot(index='ORD_KEY', columns='SKU_KEY',values='QTY').fillna(0)
</code></pre>

<p>Then you want to know if the <code>SKU_KEY</code> is contained in the <code>ORD_KEY</code>s before, depending on the batch size. So you can do it this way for a batch size = 2 for example:</p>

<pre><code>print (np.clip(df_ord_pivot.rolling(2).apply(lambda x: x[-1]-x[:-1].sum(), raw=True)
                   .fillna(0).values,0,1).sum(1))
array([0., 0., 1., 1., 1., 1., 1., 1., 2., 2., 0., 2., 1., 1.])
</code></pre>

<p>for example you see that the second value is 0, like in you example with <code>ORD_KEY=10002</code> if the batch size is at least 2, and you can do it for any size of batch</p>

<pre><code>list_arr_diff = [df_ord_pivot.values.sum(1)] +\
                [np.clip(df_ord_pivot.rolling(size).apply(lambda x: x[-1]-x[:-1].sum())
                                     .fillna(0).values,0,1).sum(1) 
                for size in range(2,MaxBatchSize +1)]
</code></pre>

<p>Now, you need for each size of batch, to replace each value i+n*size from 1 to size by the corresponding value in the rolling substraction created before.</p>

<pre><code>list_batch = []
for size in range(1,MaxBatchSize +1):
    temp_arr = list_arr_diff[0].copy()
    for i in range(1,size):
        temp_arr[i::size] = list_arr_diff[i][i::size]
    list_batch.append(temp_arr)
</code></pre>

<p>So at the end, you have: <code>oskupicks_matrix = np.array(list_batch)</code></p>

<p>For small dataset like yours, not sure it's faster but bigger, I hope it is and I'm sure you can even get it better with more numpy knowledge than I have</p>
    </div>