<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>On the use of an IIFE, my understanding of these is that it can help self-contain code snippets and ensure they keep their scope. Would this be a good practice going forward, or do they have their best use cases?</p>
</blockquote>
<p>Usually you'd write ES5 modules and use a build tool like Rollup, Webpack or Parcel to compile your code into something understandable by older browsers. <br>
Learning and keeping up with the whole ecosystem of NodeJS-based development tools can be overwhelming though.</p>
<blockquote>
<p>If there are other areas of improvement I would welcome input regarding those.</p>
</blockquote>
<p>Modern frameworks like React tend to approach working with DOM differently: instead of changing the existing tree of nodes, they throw away and recreate the whole UI on every change.</p>
<p>You'd need four things:</p>
<ol>
<li>A variable that holds the current state. I believe in your case that would be a list of tasks, e.g. <code>{taskName: "task name", done: true}</code>.</li>
<li>Event handlers that respond to DOM events.</li>
<li>A function that takes the current state and returns a new tree of DOM nodes, with event handlers attached.</li>
<li>(Optional) A convenience function for wrapping event handlers. Each event handler changes state based on the current state and the event, and then replaces the old DOM with the new DOM created by function (3). This way defining an event handler is as simple as writing <code>(state, event) =&gt; doSomethingAndReturnNewState(...)</code>.</li>
</ol>
<p>This way you can store your whole application state in JS. Having a single source of truth makes it easier to keep track of all the possible states your application can be in.</p>
    </div>