<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Class Structure</strong></p>

<ul>
<li>A <code>Hand</code> class might be useful. It can calculate and store the hand value. This would also avoid the duplication you currently have (<code>calcHandValue</code> and <code>Hit</code>).</li>
<li>Your <code>Dealer</code> class contains a lot of code that I would not place there. It contains the dealer AI (when does the dealer hit?), winning/losing condition check, printing, and counting. With a <code>Hand</code> class, you would already separate out some of it. I would also remove all the prints (they make code reuse difficult, and lead to bad code structure), and separate the AI logic to it's own class (this would make it easier to change the rules, because they are all in one place).</li>
<li>Your <code>Blackjack</code> class also does way too much. It prints, it reads input, it handles input, it checks winning/losing condition (again, a duplication, see next point), etc. It is the player as well as the game, which violates the single responsibility principle.</li>
<li>Whenever you copy/paste code, try to think of a better alternative. In this case, your <code>Dealer</code> and your <code>Blackjack</code> class contain a lot of duplication. Mainly because they both represent a blackjack player (the dealer and the player). A generic <code>Player</code> class might be helpful, from which <code>Dealer</code> and <code>HumanPlayer</code> extend. </li>
</ul>

<p>So to summarize: I would add at a minimum a <code>Hand</code>, <code>Player</code> and <code>HumanPlayer</code> class. Possibly also an <code>Input</code>/<code>Output</code> interface and <code>ConsoleInput</code>/<code>ConsoleOutput</code> class (which would make it easy to add a GUI). There are more classes you could create, but this would be a good start.</p>

<p><strong>Misc</strong></p>

<ul>
<li>your whole <code>shuffle</code> function can be replaced by <code>Collections.shuffle(deck);</code>.</li>
<li>Why does your <code>Dealer</code> class have <code>hand</code> and <code>aHand</code>? This seems unnecessary and confusing.</li>
<li>you have some style issues (position of curly bracket, indentation, spaces, etc). It seems mostly internally consistent (that's the important part), but does not really match what most Java programmers are used to. Most IDEs that support Java (eg Netbeans or Eclipse) format the code per default in a way most Java programmers recognize.</li>
<li>variable and method names should start lowercase, so they are not confused with classes.</li>
<li><code>if (cond) return true else return false</code> can be written as <code>return cond</code>.</li>
</ul>
    </div>