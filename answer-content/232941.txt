<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall it looks like your code should work. Some of the things I'm going to say here are mere nitpicking. Other things should really be done differently if you're planning to write code professionally. Here's my ideas in no particular order (other than the order I thought of them while looking at your code):</p>

<h1>POJO with default constructor + setter for everything</h1>

<p>There's really no good reason to do this ... ever (except if a certain framework forces you to provide it this way and someone else is forcing you to use said framework, see also my last point "bean overkill").  </p>

<p>Immutability is a nice property to have for data objects. Java objects should only be mutable if it makes sense for them to be changed. A good example is your playlist that allows adding or removing tracks. It makes sense to do so on a playlist. What doesn't make sense is changing a title or worse the ID of a track. The easiest way to fix this is to require the unchangeable fields as parameters during construction and remove the setters.</p>

<pre><code>public class Track {

    private final String title;
    private final float duration;
    private final int artistId;
    private final int id;

    public Track(String title, float duration, int artistId, int id) {
        this.title = title;
        this.duration = duration;
        this.artistId = artistId
        this.id = id;
    }

    ... only getters here, no setters!
}
</code></pre>

<h1>PlaylistTrack fields ???</h1>

<p>Other than making this immutable similar to Track example in my previous point, this class has some questionable fields. The most obvious one is the trackId. You can remove this field entirely and modify the getter as follows to not lose the functionality:</p>

<pre><code>getTrackId() {
    return track.getId();
}
</code></pre>

<p>When would you ever get the playlist from a playlisttrack? Isn't this class meant to be used inside a playlist to hold extra information like when it was added to that list? The rest of your application should be dealing with the playlist directly and get tracks from that playlist, not the other way around. I suggest just removing this field entirely along with the getter (and setter).</p>

<p>The index is another weird field. I would expect a playlist to have some list of <code>PlaylistTrack</code>s. That list inherently has an index for each of the tracks. What happens if we remove a certain track from that list? Are you going to update all the <code>PlaylistTrack</code>s after it to keep their index field up to date? That sounds like a lot of work that you're most likely going to forget with hard bugs to find later on. Remove this field as well.</p>

<p>The new constructor could look like this:</p>

<pre><code>public PlaylistTrack (int id, Track track) {
    this.id = id;
    this.track = track;
    this.date = now(); //notice how this isn't passed in as parameter since it's always "now"
}
</code></pre>

<p>Note that your only example usage of this class has the <code>id</code> the same as <code>trackId</code> if this is always going to be the case you might as well remove this <code>id</code> entirely too.</p>

<p>Do you really need to know when a track was added to a playlist? Most music apps I've used don't provide this functionality. This is a design choice for your app that I'm not going to make for you. If you think it's not really needed afterall, you might as well just remove the <code>PlaylistTrack</code> class and use <code>Track</code>s directly instead.</p>

<h1>null handling</h1>

<p>You have a lot of <code>if(something == null)</code> statements in your code. Most of those can be removed if you pass in a meaningful result instead of <code>null</code>. The most obvious one is when you request a list of tracks. If a playlist is empty, this should just return an empty (not null!) list instead. That way you can simplify thise piece of code:</p>

<pre><code>List&lt;PlaylistTrack&gt; original;
Set&lt;PlaylistTrack&gt; originalSet = playList.getPlayListTracks();

if (originalSet == null || originalSet.size() == 0) {
    original = new ArrayList&lt;PlaylistTrack&gt;();
} else {
    original = new ArrayList&lt;PlaylistTrack&gt;(originalSet);
    Collections.sort(original);
}
List&lt;PlaylistTrack&gt; added = new ArrayList&lt;PlaylistTrack&gt;(tracksToAdd.size());
</code></pre>

<p>to this:</p>

<pre><code>List&lt;PlaylistTrack&gt; original = new ArrayList&lt;PlaylistTrack&gt;();
original.addAll(playList.getPlayListTracks());
Collections.sort(original);
//note, you can sort an empty list, this doesn't matter much performance wise
</code></pre>

<h1>playList.setDuration(playlistUtils.addTrackDurationToPlaylist(playList, track));</h1>

<p>This is just asking for trouble. Someone else using your playlist class is really likely to forget using this setter. A far better way to update the duration of a playlist is inside the <code>Playlist</code> class. More specifically when you add or remove a track from this playlist.</p>

<pre><code>public void addTrack (PlaylistTrack track, int index) {
    hmmm ...
</code></pre>

<p>Now I noticed why your PlaylistTrack has an index field. Your playlist itself is keeping the tracks in an unordered set. This seems like an odd design choice. Any time you want to just play the tracks in order you'll have to get the tracks from the playlist, put them into a different data structure and order them. Why can't the playlist be responsible for providing some ordering of the tracks?</p>

<pre><code>public class PlayList { 
    ...
    private List&lt;PlaylistTrack&gt; tracks = new ArrayList&lt;&gt;();
    ...

    public void addTrack(PlaylistTrack track) {
        tracks.add(track);
        duration += track.getDuration();
    }

    /**
    * inserts the track at a given position in the playlist.
    * if the position is larger than the number of tracks currently in the playlist
    * it will be added at the back of the playlist instead.
    */
    public void addTrack(PlaylistTrack track, int position) {
        if(position &gt; tracks.size()-1) {
            position = tracks.size()-1;
        }
        if(position &lt; 0) {
            position = 0;
        }
        tracks.add(position, track);
        duration += track.duration();
    }

    public void removeTrack(int index) {
        duration -= tracks.get(index).getDuration(); //TODO handle out of bounds error?
        tracks.remove(index);
    }
</code></pre>

<h1>guard clause</h1>

<p>Instead of writing </p>

<pre><code>if(some precondition ) {
    big code block
} else {
    throw error
}
</code></pre>

<p>It's also possible to write it as follows</p>

<pre><code>if ( ! precondition ) {
    throw error
}
big code block
</code></pre>

<p>This form of checking preconditions first and handling the odd cases is called a "guard clause". It's preferable because you don't have to keep the special cases in your head while reading through the big code block. Because they're handled first and consise it's a lot less mentaly draining to read the code while looking for bugs. Another minor added advantage is that the big code block doesn't need that extra indentation. This becomes more usefull the more special cases you have to handle first.</p>

<h1>runtime exceptions</h1>

<p>A runtime exception should only ever be used if it no longer makes sense to keep using the application. For a music app, this could be when you can't play sounds because there's no speaker available. Or if you can't access the file system to load in the songs. In such cases the user should be notified that there is a major problem before shutting down the app.</p>

<p>If on the other hand there's a minor UI bug that causes a song to be removed twice from the list, it would be really anoying if this causes the entire app to shut down. A much nicer behaviour would be to give a small popup saying you're trying to remove a track that isn't in the playlist (it's still a bug, so should be fixed) and allow the user to still continue listening to songs when he ignores that popup.</p>

<p>The problem with runtime exceptions is that programmers using your classes don't know (or just forgot) to check for these exceptions. It's better to make them excplicit so the compiler will complain for you if you forget to check for those.</p>

<p>Alternatively, you can try to do the next best thing instead. Like in my example earlier where adding an track to an index that is too big, would just add the track at the end of the list instead of throwing an error. It's often a good idea to add these kinds of decisions into a comment so other programmers who use your class will know what to expect without reading through the entire implementation.</p>

<h1>PlaylistUtils</h1>

<p>On the one hand I like specific utility classes (unlike some puritarian coders). But they should make sense. Your <code>PlaylistUtils</code> class is questionable at best.</p>

<p>The index validity check should just be placed inside the <code>Playlist</code> class. This is an implementation detail of said class that might change when said implementation changes (like in my example of dealing with the too large index).  </p>

<p><code>addTrackDurationToPlaylist</code> should be removed (see earlier).</p>

<p>What should I expect the <code>getTrack()</code> method to do? Is it fetching some random track? Is it createing a new track (should be called create instead of get)? Is it a valid track that can be used in actual production code outside of testing?</p>

<p>The main issue I think is that you're using this class for testing purposes (which in itself isn't a bad thing) but <strong>also</strong> for actual checks in your production code (which makes the testing part a problem). With the production methods removed as I suggested this problem is mostly fixed, but the class should be renamed to make it obvious it's meant for testing purposes only. That way it doesn't really matter <em>too much</em> that the code inside doesn't make sense (you're creating invalid playlists!).</p>

<h1>bean overkill</h1>

<p>Your playlist app looks like it would mainly be used as a standalone, batteries-included application. This means you should keep it as simple as possible and follow the normal java conventions. It doesn't read like any typical parse to JSON to communicate with other applications backend kind of app.  </p>

<p>To me this implies that you really shouldn't be using any frameworks that require you to provide beans/POJO's that have a default constructor and setters for everything. Those are useful if you're writing a backend microservice that takes in a non-java specific format (JSON for example) and needs an easy way to parse that into java, do something with it and pass it on to the next microservice or respond with some universal parsable (again JSON?) format.</p>

<p>What you want is easy to maintain code that you can extend without worrying too much about someone else using it in an unintended way. To achieve this, immutability, required fields in constructor, explicit error handling and other best java practices are your friend.</p>

<p>As a final remark I'd like to point out 2 principles</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a> which tells you to only write code that you actually need, when you need it. Don't write code that might be useful in the future (because it rarely is).  </li>
<li><strong>nobody will reuse code they don't understand.</strong> This one is my own that i've learned from experience (and that many others have figured out as well). If there exists 20 frameworks to deal with a certain problem but they're all hard to understand/use, then the next developper that runs into said problem will design "a better framework" to replace those! Now there are 21 frameworks that are all hard to understand/use.</li>
</ul>
    </div>