<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well designed code.</p>

<hr>

<blockquote>
  <p>I am a bit suspicious of that realloc idiom for reallocing the buffer if it gets full. Is it right?</p>
</blockquote>

<p>I see no errors.</p>

<p>Nit: I'd rather see <code>newsize</code> declared locally.  It is only used there.</p>

<pre><code>// newsize = size + BUFSIZ;
size_t newsize = size + BUFSIZ;
</code></pre>

<hr>

<p>Other</p>

<p><strong>Unneeded code</strong></p>

<p>The initial allocation is not needed.  <code>realloc()</code> in the loop can handle starting from 0</p>

<pre><code>//size = BUFSIZ;
//if (buf == NULL)
//    if ((buf = malloc(size)) == NULL)
//      err(EXIT_FAILURE, "malloc");
size = 0;
</code></pre>

<p>Perhaps there is a concern about ...</p>

<pre><code>fwrite(NULL, 1, 0, stdout); 
</code></pre>

<p>... yet given the spec "If size or nmemb is zero, fwrite returns zero and the state of the stream remains unchanged.", I see no issue.</p>

<p>Either way I'd consider the micro-optimization below, just for the sake of avoiding the <code>fwite()</code> function call as <code>i==0</code> will be quite common.  (Usually I do not encourage any micro-op - I'll make an exception here)</p>

<pre><code>// fwrite(buf, 1, i, stdout);
if (i &gt; 0) fwrite(buf, 1, i, stdout);
</code></pre>

<p><strong>Checking output</strong></p>

<p>Code does not check the return values of <code>fwrite(), putchar(c)</code>.  Robust code would and report the problem - even if it is rare.</p>

<p><strong>Missing <code>free()</code></strong></p>

<p>Free the allocation, else <code>trim()</code> leaks memory.</p>

<pre><code>free(buf);
</code></pre>

<p><strong><code>ferror()</code></strong></p>

<p>Good that code checks this.</p>

<p><strong><code>main()</code> always reports success</strong></p>

<p><code>main()</code> employs the implied <code>return 0;</code>.  Yet failure is possible.</p>

<p>Given code has <code>exitval = EXIT_FAILURE;</code>, I'd expect <code>main()</code> to <code>return exitval;</code> in the end.</p>

<p><strong>Initialize</strong></p>

<p>Rather than declare then assign lines later, consider declare with initialization.</p>

<pre><code>// int status;
// ...
// status = BEG;
int status = BEG;

// size_t size;
// ...
// size = BUFSIZ;
size_t size = BUFSIZ;
</code></pre>

<p>Same for <code>i</code>.</p>
    </div>