<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>State Machine Review</h2>

<p>This is an interesting, yet unorthodox implementation of a state machine. Your states are actually transitions. You don't really have a state, since the state machine (<code>Tokenize</code> method) processes input and performs all lifetime management of tokens itself. The only behavior dispatched to the transitions (unfortunately named <code>State</code>) is asking whether a match is available (<code>IsMatch</code>).</p>

<hr>

<p>The problem with this approach, as VisualMelon has stated, is that you are walking each character at a time, which could lead to the wrong transition firing. The resolve this, you need to allow for look-ahead, and possibly also for backtracking. Rather than letting <code>Tokenize</code> traverse the input, you should let the current state handle the input. Each state is responsible for consuming as much characters it can. To allow this, wrap the input in a stream that supports look-ahead. Either create such class or use an existing API such as <code>ANTLRInputStream</code>.</p>

<hr>

<p>Each state should have its own <code>StringBuilder</code> for building the current token. Once a token is completely built, create a token from the builder and store its result as immutable string in the result set of tokens.</p>

<hr>

<p>The input of transitions should be cached, not in a global list, but dispatched to each state. Let each state store its own transitions (where transition.<code>From</code> == state). Whenever the state machine tells a state to process and cosume the input, the state should check its transitions whether a transition to a next state should be triggered. The self-transitions could be removed from the input and added in each state by default.</p>

<hr>

<p>Creation of tokens and completing tokens should not be part of the state machine, but of <code>entry</code> and <code>exit</code> operations of the individual states. The state machine should only set the initial state and let that state consume the input. Whenever a transition fires from within a state, the state machine should set the current state to <code>transition.To</code>. The state machine should keep feeding the current state with the input until it's been completely processed.</p>

<hr>

<p>As an overview:</p>

<ul>
<li>let the state machine create the states and dispatch the provided transitions to each state</li>
<li>let the state machine set the initial state and feed the input to the current state</li>
<li>let each state create a token builder on entry</li>
<li>let each state process the input from current position and consume as much tokens possible</li>
<li>let each state check for transitions that could fire</li>
<li>let the state machine set the current state after a transition fired</li>
<li>let each state create a token from token builder on exit and store it in the result set</li>
</ul>

<hr>

<h2>General Review</h2>

<p>If you're materializing the states, why allowing the argument to be possibly lazy (<code>IEnumerable</code>)?</p>

<blockquote>
<pre><code>states = states.ToList(); // Materialize states.
</code></pre>
</blockquote>

<p>Picking the initial state is by convention the first state. This should be well documented. Another option is provide a pseudo initial state with initial transitions. This way, you allow for multiple possible initial states (if more than just <code>Scheme</code> could start an URI, or when you want to reuse the API for other purposes).</p>

<blockquote>
<pre><code>var state = states.First();
</code></pre>
</blockquote>

<p>The single character loop has been discussed by VisualMelon, and I have suggested an alternative where each state should consume the input stream at own expense.</p>

<blockquote>
<pre><code>foreach (var (oneChar, index) in value.Select((c, i) =&gt; (c.ToString(), i)))
</code></pre>
</blockquote>

<p>A state machine should not need to care about handling actions on state and/or transition changes. Let states handle <code>entry</code> and <code>exit</code> (<strong>Moore machine</strong>). And let transitions handle their transition guard and optionally action (<strong>Mealy machine</strong>). <code>UML</code> specifies both Moore and Mealy support.</p>

<blockquote>
<pre><code>if (state.IsMatch(oneChar))
{
    token.Text.Append(oneChar);
}
</code></pre>
</blockquote>

<p>Each state should have its own transitions, so this global lookup should no longer be required:</p>

<blockquote>
<pre><code>foreach (var next in states.Where(s =&gt; s.Prev.Equals(token.Type)))
</code></pre>
</blockquote>

<p>The following part should be split into entry and exit behavior of the current state.</p>

<blockquote>
<pre><code>token = createToken();
token.StartIndex = index;
token.Type = next.Next;
token.Text.Append(oneChar);
</code></pre>
</blockquote>

<p>On entry: create a token and token text builder, store the index, type. On exit: set the token builder's result as Text on the token and add the token to the result set.</p>
    </div>