<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would go and encourage you to use <code>Generics</code> instead of <code>object</code>. When you use <code>object</code> you're adding a casting operations in the back-scene, which means you might have a chance of getting casting exceptions at run-time. So, using generics would avoid that, and it would perform faster. </p>

<p>Also, in your code, you're using <code>List</code>, which is fine, but why you don't benefit from the existed interfaces such as <code>ICollection</code>, <code>IList</code> ..etc. These would give you many advantages, for instance, use <code>ICollection</code> such as <code>Sack&lt;T&gt; : ICollection&lt;T&gt;</code> you'll be able to use <code>foreach</code> loop (because it implements <code>IEnumerable</code> interfaces). So, make use of .NET existing interfaces, and don't take the long road. </p>

<p>Also, You can create an interface say <code>ISack&lt;T&gt; : ICollection&lt;T&gt;</code> add the additional methods that you want, then do <code>Sack&lt;T&gt; : ISack&lt;T&gt;</code> </p>

<p>for your random index, you can declare the <code>Random</code> and <code>SelectedIndex</code> at the class level, and then create a method that returns a random index. </p>

<p>example : </p>

<pre><code>public class Sack&lt;T&gt;
{

    private readonly IList&lt;T&gt; objects = new List&lt;T&gt;();

    private readonly Random rand = new Random();

    private int SelectedIndex = -1;


    public T Retrieve()
    {
        RandomIndex();
        return objects[SelectedIndex];
    }

    public T Remove()
    {
        RandomIndex();
        var removedObject = objects[SelectedIndex];
        objects.Remove(removedObject);
        return removedObject;

    }

    private void RandomIndex()
    {
        // keep creating a new random index until you get a non-null object. 
        // [ToDo] : what if object.Count == 0 ? how should you handle it ? 
        while (true)
        {
            if ((SelectedIndex == -1 || objects[SelectedIndex] == null))
            {
                SelectedIndex = rand.Next(0, objects.Count);
            }
            else
            {
                break;
            }
        }
    }

}
</code></pre>

<p>I have added <code>ICollection&lt;T&gt;</code> to the class, which would give you more options and customization</p>

<pre><code> public class Sack&lt;T&gt; : ICollection&lt;T&gt;
    {
        private readonly IList&lt;T&gt; objects = new List&lt;T&gt;();

        private readonly Random rand = new Random();

        private int SelectedIndex = -1;

        public T this[int index]
        {
            get =&gt; this[index];
            set =&gt; this[index] = value;

        }
        public int Count =&gt; objects.Count;

        public bool IsReadOnly =&gt; objects.IsReadOnly;

        public void Add(T item)
        {
            objects.Add(item);
        }

        public void Clear() =&gt; objects.Clear();

        public bool Contains(T item) =&gt; objects.Contains(item);

        public void CopyTo(T[] array, int index) =&gt; objects.CopyTo(array, index);

        public IEnumerator&lt;T&gt; GetEnumerator() =&gt; objects.GetEnumerator();

        public int IndexOf(T item) =&gt; objects.IndexOf(item);

        public void Insert(int index, T item) =&gt; objects.Insert(index, item);

        public bool Remove(T item) =&gt; objects.Remove(item);

        public void RemoveAt(int index) =&gt; objects.RemoveAt(index);

        IEnumerator IEnumerable.GetEnumerator() =&gt; objects.GetEnumerator();

        public T Retrieve()
        {
            RandomIndex();
            return objects[SelectedIndex];
        }

        public T Remove()
        {
            RandomIndex();
            var removedObject = objects[SelectedIndex];
            objects.Remove(removedObject);
            return removedObject;

        }

        private void RandomIndex()
        {
            while (true)
            {
                if ((SelectedIndex == -1 || objects[SelectedIndex] == null))
                {
                    SelectedIndex = rand.Next(0, objects.Count);
                }
                else
                {
                    break;
                }

            }

        }

    }
}
</code></pre>
    </div>