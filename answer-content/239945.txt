<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Redundant parenthesis</h3>

<p><code>isInsideBoard ← ∧/(1∘≤∧≤∘8)</code> was converted from inline explicit code. Back then, the train <code>1∘≤∧≤∘8</code> needed parenthesising. However, now that you've broken out this code to a separate tacit function, the <code>∧/</code> actually forms an atop (a 2-train) with the existing train, and since the original train was a fork (has 3 parts), it can simply be a 4th:</p>

<pre><code>isInsideBoard ← ∧/ 1∘≤∧≤∘8
</code></pre>

<h3>Shorter name</h3>

<p><a href="https://codereview.stackexchange.com/a/239908/221238">Bubbler suggested</a> renaming this function to <code>IsInsideChessBoard</code>. However, I often find that a function that determines or computes something that can be given a good name (<code>valid</code> in this case) can often have a matching function name (that'd be <code>Valid</code>). I think it is obvious from context of the containing function that validity is defined to be "inside the chess board". Alternatively, you could name the function and variable <code>Inside</code> and <code>inside</code>.</p>

<h3>Structure your code</h3>

<p>I can't remember a thing, so I'd prefer defining the helper function as close as possible to where it is first used. I'd space it from the preceding code as two sections; the first finding all locations and the second determining their validity. Each section can appropriately begin with a comment on what it does. Maybe even exdent the comments to further emphasise it?</p>

<h3>In summary</h3>

<p>With these three changes:</p>

<pre><code>KnightMovesRevised ← {
  ⍝ Monadic function, expects a vector with 2 integers, e.g. (1 1)
  ⍝ Given a chessboard position, find the legal knight moves.
  ⍝ Returns vector of 2-integer vectors, e.g. (2 3)(3 2)

 ⍝ list all the locations the knight could go to
  signs ← ¯1 1 ∘., ¯1 1
  offsets ← (1 2)(2 1)
  moves ← , signs ∘.× offsets
  locations ← moves + ⊂⍵

 ⍝ and keep the valid ones
  Inside ← ∧/ 1∘≤∧≤∘8
  inside ← Inside¨ locations
  inside/locations
}
</code></pre>
    </div>