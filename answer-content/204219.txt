<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple of things that you can change to simplify the code and to greatly improve the readability.</p>

<blockquote>
<pre><code>public static void Main(string[] args)
</code></pre>
</blockquote>

<p>If you are working with the latest C# then it's now legal to make <code>Main</code> async:</p>

<pre><code>public static async Task Main(string[] args) { .. }
</code></pre>

<p>This means you don't need two <em>Mains</em>.</p>

<hr>

<p>You are using tuples a lot and declaring them with <code>Tuple&lt;,&gt;</code> like</p>

<blockquote>
<pre><code>public List&lt;Tuple&lt;CommandOutputType, string&gt;&gt; OutputText { get; set; }
</code></pre>
</blockquote>

<p>or creating them with <code>new Tuple&lt;,&gt;</code></p>

<blockquote>
<pre><code>this.OutputTokens.Add(
    new Tuple&lt;CommandTokenType, string&gt;(
        CommandTokenType.LinkTitle,
        splitString[0]
    )
);
</code></pre>
</blockquote>

<p>Neither of those is necessary. It is now possible to use a much shorter syntax like respectively:</p>

<pre><code>public List&lt;(CommandOutputType, string)&gt; OutputText { get; set; }
</code></pre>

<p>where you can get rid of the <code>Tuple</code> and just use the <code>()</code></p>

<pre><code>this.OutputTokens.Add(
    (
        CommandTokenType.LinkTitle,
        splitString[0]
    )
);
</code></pre>

<p>but you can do even more. You can name each field!</p>

<pre><code>public List&lt;(CommandOutputType Type, string Text)&gt; OutputText { get; set; }
</code></pre>

<p>also since this is a collection you should name this property propertly. Not <code>OutputText</code> but <code>Outputs</code> (plural) - now that the tuples contain the name <code>Text</code> I find it's no longer necessary to use <code>Text</code> as a part of the property name as this would be redundant.</p>

<hr>

<blockquote>
<pre><code>public async Task MessageRecieved(SocketMessage message)
{
    MatchCollection matchCollection = Regex.Matches(message.Content, @"\[\[[^\[\]]+\]\]");
    List&lt;string&gt; matchedStrings = matchCollection.Cast&lt;Match&gt;().Select(match =&gt; match.Value).ToList();

    string finalLinkString = "";
    foreach(string matchedString in matchedStrings)
    {
        CommandParser commandParser = new CommandParser(matchedString);
        commandParser.GenerateTokens();
        commandParser.GenerateOutputLink();

        finalLinkString += commandParser.OutputText[0].Item2 + "\n";
    }

    await message.Channel.SendMessageAsync(finalLinkString);
}
</code></pre>
</blockquote>

<p>It's not necessary to put the matched string is a <code>List&lt;&gt;</code> first. Let it be an <code>IEnumerable&lt;&gt;</code> and let the <code>foreach</code> execute it. Otherwise your iterating it twice. This might not matter here with a small number of items but this looks like a bad habit and can cause loss of performance somewhere else.</p>

<p>Using the <code>+=</code> for building a <code>string</code> inside a loop is another bad habit. Strings are immutable and this might cost a lot of memory with larger strings. You should consider using the <code>StringBuilder</code> or collect the partial strings in a list and use <code>string.Join</code> after you have them all.</p>

<p>Here we can also see the ugly <code>.Item2</code> property of the tuple. If you declare the <code>OutputText</code> (or as suggested <code>Outputs</code>) with the new syntax the you'll be able to write:</p>

<pre><code>commandParser.Outputs[0].Text
</code></pre>

<hr>

<p>I don't like the design of the <code>CommandParser</code>. It should not be working like it's doing now, this means that you need to create an instance of it first, then you call some methods that don't return any values and where you need to call them in a specific order. Instead, you should create the parser only once and have a method that returns the result immediately.</p>

<p>Ideally I imagine the above example should go something along these lines:</p>

<pre><code>public async Task MessageRecieved(SocketMessage message)
{
    var commandParser = new CommandParser(); // or as class' field

    var matchedString = 
        Regex
            .Matches(message.Content, @"\[\[[^\[\]]+\]\]");
            .Cast&lt;Match&gt;()
            .Select(match =&gt; match.Value);

    // You don't need to split it in two queries but might be helpful for debugging.

    var links =
        matchedStrings
            .Select(matchedString =&gt; commandParser.Parse(matchedString).Text);

    var finalLinkString = string.Join("\n", links) + "\n"; // if you really need that last "\n"            

    await message.Channel.SendMessageAsync(finalLinkString);
}
</code></pre>

<hr>

<p>You're using <code>ToList()[0]</code> in a lot of places. Always with the index <code>0</code>. This screams for a different design where <code>OutputText</code> and <code>OutputTokens</code> (notice the inconsistent naming) shouldn't be lists at all but probably just simple tuples.</p>

<hr>

<p>I also think you should use <code>var</code> more and <code>this</code> less. It'll make your code less verbose. The above suggestions apply to many other places so I won't comment on them.</p>

<p>I'd be a good idea to redesign the <code>CommandParser</code>'s API to make its usage more intuitive.</p>
    </div>