<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Am I using the "right" type for the Add subnodes (i.e. Rc)?</p>
</blockquote>

<p>No. You probably don't want to do that. Just use <code>AST</code>. Good Rust code rarely actually needs <code>Rc</code>. Instead of using <code>Rc&lt;&gt;</code> in the definition of <code>AST</code>, use <code>Box</code>.</p>

<pre><code>#[derive(Debug)]
pub enum AST&lt;T&gt; {
    ConstInt(isize, Rc&lt;T&gt;),
    Add(Box&lt;AST&lt;T&gt;&gt;, Box&lt;AST&lt;T&gt;&gt;, Rc&lt;T&gt;),
}
</code></pre>

<p>Now <code>Rc</code> does give you the ability to reuse branches of the AST. For example, you use <code>x</code> twice. However, I've not seen a real case of ASTs where that needs to happen. As it stands you are paying the costs of RC (both in programmer effort, execution time, and memory overahead) for no good reason.</p>

<p>You should also get rid of the <code>Rc&lt;&gt;</code> for the <code>T</code>. Just store a <code>T</code>. In cases where you need to be able to copy the <code>T</code> for some reason (which is probably never), take a <code>&lt;T: Clone&gt;</code> so you can call the clone method. The client code can then put in <code>Rc&lt;&gt;</code> in place if it wants, or if the data is trivial just allow it to be copied. </p>

<p>I would also question the usefulness of a generic type here at all. Are you really going to annotate the same AST with different additional data in different places? I rather doubt it.</p>

<blockquote>
  <p>Is it possible to create eval as an AST method instead of a function? I kept fighting the borrow checking if x in eval was self : &amp;AST (within the impl block, of course)</p>
</blockquote>

<p>You'll find that if you don't try to pass ASTs in <code>Rc&lt;&gt;</code> that this will work much better. The problem is that you can't take self to be an <code>Rc&lt;&gt;</code>, so you don't get access to the reference counter itself which makes it difficult to do anything useful.</p>

<p>Even if you use RC, you can define a static method in the impl (just don't have a self parameter. Then you can use syntax like <code>AST::eval(ast)</code>.</p>

<pre><code>pub fn eval&lt;T&gt;(x: &amp;RAST&lt;T&gt;) -&gt; RAST&lt;T&gt; {
</code></pre>

<p>This function is pretty strange. Why does an evaluation function return an AST. Shouldn't it return a value? If instead this function were to return <code>isize</code> it would be a much simpler function. </p>

<p>However, the logic of the function makes more sense if it is a optimization function. That is, it seeks to produce a more optimized version of the AST rather than evaluate the AST. But if that's the idea, your function takes the wrong type. It might make sense for the optimization function to take ownership of the AST, consuming the old AST reusing peices of it for the new AST. Or it might make sense to take a mutable reference to the AST, modifying the AST to make a more optimized version. </p>

<blockquote>
  <p>Is there any way to make this program more concise/cleaner? I think I understand why all the additional wrapping and sprinkling of Rc::clone/new and lots of reference taking is needed, but was wondering if I was perhaps missing something that might make this code cleaner to read. </p>
</blockquote>

<p>Yes, if you follow my advice aboev you'll find the code a lot more concise and cleaner.</p>
    </div>