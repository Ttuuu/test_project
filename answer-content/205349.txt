<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Remove number of parameters</p>

<p>There are methods which have many parameters, you can group similar paramters to a type, and reduce the number of parameters.
Ex: bellow method have 6 parameters which xCurrent, yCurrent are properties of a Point.</p>

<blockquote>
<pre><code>private static void switchOwnership(Board board, Player player, int
xCurrent, int yCurrent, int xTarget, int yTarget)
</code></pre>
</blockquote>

<p>Then you can create a Point type, and reduce number of parameters:</p>

<pre><code>public class Point
{
    public int x;
    public int y;
}

private static void switchOwnership(Board board, Player player, Point currentPoint, Point targetPoint)
{
    board.tiles[targetPoint.x, targetPoint.y].OwnedBy = player;
    board.tiles[currentPoint.x, currentPoint.y].OwnedBy = null;
}

private static Board PerformMove(Board board, Player player, Point currentPoint, Point targetPoint)
{
    if (canMakeMove(board, player, currentPoint, targetPoint))
    {
        switchOwnership(board, player, currentPoint, targetPoint);
        return board;
    }
    return null;
}

//.......
</code></pre>

<p>Your can refer this link for more details: <a href="https://www.refactoring.com/catalog/introduceParameterObject.html" rel="nofollow noreferrer">https://www.refactoring.com/catalog/introduceParameterObject.html</a></p>

<h2>DRY:</h2>

<p>There are duplicated code from your <strong>MovePiece()</strong> method. You should try to group similar logic, and create sub method to re-use them.</p>

<p><strong>Ex:</strong> there are 2 similar while loops <strong>while (!validNumber)</strong> and 2 similar  while loops <strong>while (!CanContinue)</strong>.
Then you can create sub methods for there while loops to re-use it. Then your source code now is shorter and more readble:</p>

<pre><code>public enum CoordType
{
    xCoord,
    yCoord
}

private void GetInputPosition(ref int pos, CoordType coordType)
{
    coordType == CoordType.xCoord ? requestXCoord(validationStage) : requestYCoord(validationStage);
    var validNumber = false;

    while (!validNumber)
    {
        int number;

        if (Int32.TryParse(Console.ReadLine(), out number))
        {
            pos = number;
            validNumber = true;
        }
        else
        {
            Console.WriteLine(Message.notValidNumber);
            coordType == CoordType.xCoord ? requestXCoord(validationStage) : requestYCoord(validationStage);
            validNumber = false;
        }
    }
}


private void GetCoord(ref Point point, int validationStage)
{
    int number = 0;
    var CanContinue = false;

    while (!CanContinue)
    {
        GetInputPosition(ref point.x, CoordType.xCoord);
        GetInputPosition(ref point.y, CoordType.yCoord);

        CanContinue = validatePosition(board, player, point.x, point.y, validationStage);
    }
}


public static Board MovePiece(Board board, Player player)
{
    Point currentPoint = new Point();
    Point targetPoint = new Point();
    GetCoord(ref currentPoint, 0);
    GetCoord(ref targetPoint, 1);

    PerformMove(board, player, currentPoint, targetPoint);

    return board;
}
</code></pre>
    </div>