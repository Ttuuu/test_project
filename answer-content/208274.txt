<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>About the interface</h1>
<pre><code>#pragma once
</code></pre>
<p><code>#pragma once</code> isn't standard, prefer include guards if you want to maximize portability</p>
<pre><code>#include &lt;iostream&gt;

class SinglyLinkedList {
    
private:
    struct ListNode {
        int value;
        std::shared_ptr&lt;ListNode&gt; next;
    
</code></pre>
<p>Why a <code>shared_ptr</code>? You don't expose the nodes. I don't see why each node wouldn't be the only
one responsible for its <code>next</code> node.</p>
<pre><code>    ListNode(int val) : value(val), next(nullptr) {}
</code></pre>
<p>Are you certain that automatically generated copy operator, assignment operator, destructor are fine?
Because I don't: at least the destructor will cause issues if the list is too long, because it will trigger
recursively until stack-overflow</p>
<pre><code>};

std::shared_ptr&lt;ListNode&gt; head;
std::shared_ptr&lt;ListNode&gt; tail;
std::shared_ptr&lt;ListNode&gt; find (int val) const;

public:
    SinglyLinkedList();

    void print_list () const;
</code></pre>
<p>print shouldn't be a member function. There's too many ways to print a list:
<code>[1, 2, 3, 4]</code>, <code>(1 2 3 4)</code>, <code>[1 2 3 4]</code> which are equally fine.
That's why you should rather provide a way to access members, and let the user choose the format</p>
<pre><code>void push_back (int val);
void pop_back ();
void push_front (int val);
void pop_front ();
</code></pre>
<p>Strangely you don't allow access to the values in the list. I would expect a <code>int back()</code>
and <code>int front()</code> at the very least</p>
<pre><code>size_t get_size () const;
</code></pre>
<p>Same here for those functions, which are mostly orthogonal to the list class: you could search, swap, reverse, the list
if you had access to its elements. <code>remove_nodes</code> indeed needs to rely on a primitive in the class interface, but can't replace
it: what if I only want to remove the first / last / duplicated nodes with that value?</p>
<pre><code>bool search (int val) const;
void swap_values (int val1, int val2);
void remove_nodes (int val);
void reverse ();

~SinglyLinkedList();
</code></pre>
<p>};</p>
<h1>About the implementation:</h1>
<pre><code>#include "SinglyLinkedList.hpp"


SinglyLinkedList::SinglyLinkedList () : head (nullptr), tail (nullptr) {
}
</code></pre>
<p>You could have inlined this constructor in the header file, your class'd be easier to read</p>
<pre><code>void SinglyLinkedList::print_list () const {
    // O(n)
    if (head) {
        std::shared_ptr&lt;ListNode&gt; tempNode = head;
    
</code></pre>
<p><code>std::shared_ptr</code> should be used when something is co-owned by two objects whose life-times aren't correlated.
It is impossible here that tempNode would outlive head. I really believe a <code>unique_ptr</code> for ownership, and a raw pointer
obtained by <code>get()</code> for traversal is the way to go</p>
<pre><code>    while (tempNode) {
        std::cout &lt;&lt; tempNode-&gt;value &lt;&lt; " ";
        tempNode = tempNode-&gt;next;
    }
    std::cout &lt;&lt; "\n";
} else {
    std::cout &lt;&lt; "List is empty.\n";
}
</code></pre>
<p>This is very rigid. There are a lot of contexts where I don't want a new line, or, worse, a "empty list message"!</p>
<p>}</p>
<pre><code>void SinglyLinkedList::push_back(int val) {
    // O(n)
    
</code></pre>
<p>since you maintain a <code>head</code> pointer in your class, you should make use of it to <code>push_back</code> (with O(1) complexity), or dispense with it altogether.</p>
<pre><code>    std::shared_ptr&lt;ListNode&gt; currNode = std::make_shared&lt;ListNode&gt;(val);
    if (head) {
        std::shared_ptr&lt;ListNode&gt; tempNode = head;
        while (tempNode != tail) {
            tempNode = tempNode-&gt;next;
        }
        tempNode-&gt;next = currNode;
        tail = currNode;
    } else {
        head = currNode;
        tail = currNode;
    }
}

void SinglyLinkedList::pop_back () {
    // O(n)
    if (!head) {
        std::cout &lt;&lt; "List is empty.\n";
    
</code></pre>
<p>There are many ways to deal with incorrect manipulations, but writing to <code>std::cout</code>
isn't one of them. Writing to <code>std::clog</code> or <code>std::cerr</code> would be a beginning, but you primarily need to
provide a feed-back mechanism: either an exception, or a return value indicating success / failure</p>
<pre><code>    return;
}
if (head == tail) {
    head = nullptr;
    tail = nullptr;
    return;
}
std::shared_ptr&lt;ListNode&gt; currNode = head;
while (currNode-&gt;next != tail) {
    currNode = currNode-&gt;next;
}
tail = currNode;
</code></pre>
<p>This traversal already appeared twice in your code. It should be encapsulated in its own function</p>
<pre><code>    currNode-&gt;next = nullptr;
}

void SinglyLinkedList::push_front (int val) {
    // O(1)
    std::shared_ptr&lt;ListNode&gt; currNode = std::make_shared&lt;ListNode&gt;(val);
    currNode-&gt;next = head;
    head = currNode;
</code></pre>
<p>There is an <code>std::exchange</code> function in the stl which makes it a one-liner:
<code>currNode-&gt;next = std::exchange(head, currNode)</code>;</p>
<pre><code>}

void SinglyLinkedList::pop_front () {
    // O(1)
    if (!head) {
        std::cout &lt;&lt; "List is empty.\n";
        return;
    }
    std::shared_ptr&lt;ListNode&gt; currNode = head;
    head = head-&gt;next;
    currNode-&gt;next = nullptr;
}

size_t SinglyLinkedList::get_size () const {
    // O(n)
    
</code></pre>
<p>You should consider maintaining a size counter to make it <code>O(1)</code>, because it's tipically how it's done
and clients wouldn't expect <code>O(n)</code> complexity</p>
<pre><code>    size_t listSize = 0;
    std::shared_ptr&lt;ListNode&gt; currNode = head;
    while (currNode) {
        ++listSize;
        currNode = currNode-&gt;next;
    }

    return listSize;
}

bool SinglyLinkedList::search (int val) const {
    // O(n)
    if (!head) {
        std::cout &lt;&lt; "List is empty.\n";
    
</code></pre>
<p>Why print anything? It isn't like it's an error to search an empty list. Simply return false</p>
<pre><code>    return false;
}
std::shared_ptr&lt;ListNode&gt; currNode = head;
while (currNode) {
    if (currNode-&gt;value == val) {
        //std::cout &lt;&lt; "Value " &lt;&lt; val &lt;&lt; " is in the list\n";
</code></pre>
<p>It's best to eliminate remnants of debugging altogether.</p>
<pre><code>            return true;
        }
        currNode = currNode-&gt;next;
    }
    //std::cout &lt;&lt; "Value " &lt;&lt; val &lt;&lt; " is not in the list.\n";
    return false;
}

std::shared_ptr&lt;SinglyLinkedList::ListNode&gt; SinglyLinkedList::find (int val) const {
    // O(n)
    if (!head) {
        return nullptr;
    }
    std::shared_ptr&lt;ListNode&gt; currNode = head;
    while (currNode) {
        if (currNode-&gt;value == val) {
            return currNode;
        }
        currNode = currNode-&gt;next;
    }    
    return nullptr;
}

void SinglyLinkedList::swap_values (int val1, int val2) {
    // swap is O(1), find is O(n)
    // Should I be swapping nodes instead of values?
</code></pre>
<p>Indeed you should. That's an example of disputable design: you now have the burden of error management (checks + reports)
It would have been better to make find public, with a slightly different interface (an iterator, eg: a non-owning pointer)
and then let the user invoke <code>std::iter_swap</code></p>
<pre><code>    std::shared_ptr&lt;ListNode&gt; val1Node = find (val1);
    std::shared_ptr&lt;ListNode&gt; val2Node = find (val2);

    if (!val1Node) {
        std::cout &lt;&lt; "Value " &lt;&lt; val1 &lt;&lt; " is not in the list.\n";
        return;
    }
    if (!val2Node) {
        std::cout &lt;&lt; "Value " &lt;&lt; val2 &lt;&lt; " is not in the list.\n";
        return;
    }

    int tempNodeVal = val1Node-&gt;value;
    val1Node-&gt;value = val2Node-&gt;value;
    val2Node-&gt;value = tempNodeVal;
}

void SinglyLinkedList::remove_nodes (int val) {
    if (!head) {
        std::cout &lt;&lt; "List is empty.\n";
        
So what? That's not an error. 
        
        return;
    }
    std::shared_ptr&lt;ListNode&gt; prevNode = nullptr;
    std::shared_ptr&lt;ListNode&gt; currNode = head;
    while (currNode) {
        if (currNode-&gt;value == val) {
            
</code></pre>
<p>I thought your <code>find</code> member function was written precisely to find a node with the given value, why don't you use it?</p>
<pre><code>        // val found - remove
        if (!prevNode) {
            // delete head node
            if (head == tail) {
                head = nullptr;
                tail = nullptr;
                return;
            }
            head = head-&gt;next;
            prevNode = currNode;
            currNode = currNode-&gt;next;
            prevNode-&gt;next = nullptr;
            prevNode = nullptr;
        } else if (currNode == tail) {
            // delete tail node
            tail = prevNode;
            prevNode-&gt;next = nullptr;
            currNode-&gt;next = nullptr;
        } else {
            prevNode-&gt;next = currNode-&gt;next;
            currNode-&gt;next = nullptr;
            currNode = prevNode-&gt;next;
        }
        
</code></pre>
<p>That seems very complicated. I'm almost certain that you can find a more concise way to express it</p>
<pre><code>            } else {
                // val not found
                prevNode = currNode;
                currNode = currNode-&gt;next;
            }
        }
    }

void SinglyLinkedList::reverse () {
    // O(n)
    if (!head || head == tail) {
        return;
    }
    std::shared_ptr&lt;ListNode&gt; currNode = head;
    std::shared_ptr&lt;ListNode&gt; prevNode = nullptr;
    std::shared_ptr&lt;ListNode&gt; nextNode = nullptr;
    head = nullptr;
    tail = head;
    while (currNode) {
        nextNode = currNode-&gt;next;
        currNode-&gt;next = prevNode;
        prevNode = currNode;
        currNode = nextNode;
    }
    head = prevNode;
}

SinglyLinkedList::~SinglyLinkedList () {
</code></pre>
<p>If you leave it empty, consider to declare it <code>=default</code> in your interface. But here you need to define your implementation,
since default behavior will result in a stack overflow for large lists</p>
<pre><code>}
</code></pre>
<h1>Conclusion:</h1>
<p>You're on the right track to write good code. But you should study the standard library to get a better idea of how to design a C++ container: container/algorithm orthogonality, iterators, etc.</p>
    </div>