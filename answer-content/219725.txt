<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Your solution:</strong></p>

<p>seems legit :)
One thing I'd suggest here is to use <code>ArrayDeque</code> instead of <code>Stack</code></p>

<p><strong>Another possible solution</strong>:</p>

<p>Basically, for every subtree we have constrain, that every node in it should be in range (X, Y).</p>

<p>For root this range will be (-inf; +inf) - in other words, there could be any value in root.</p>

<p>For root's left subtree range will be (-inf, value-in-root), for right - (value-in-root, +inf).</p>

<p>Last thing - on each iteration we should check, that value in node is within this range, like so:</p>

<pre><code>public boolean doInOrderTraversal(TreeNode root, int min, int max) {
    if (root == null) {
        return true;
    }
    if (root.val &lt;= min || root.val &gt;= max) {
        return false;
    }

    return doInOrderTraversal(root.left, min, root.val) &amp;&amp; doInOrderTraversal(root.right, root.val, max);
}
</code></pre>
    </div>