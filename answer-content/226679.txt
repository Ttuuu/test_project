<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First things first:</p>

<blockquote>
<pre><code>while nloops&lt;=llno:
    if __name__ == '__main__':
</code></pre>
</blockquote>

<p>would make more sense with the order reversed; and</p>

<blockquote>
<pre><code>def f(l1,l2, q, r, s):
    ...
    q.put(distance)
    r.put((node1a, node1b))
    s.put((node2a, node2b))


while nloops&lt;=llno:
    if __name__ == '__main__':
        q = Queue()
        r = Queue()
        s = Queue()

        p1 = Process(target=f, args=(0, no_of_nodes/4, q, r, s))
        p1.start()    
        p2 = Process(target=f, args=(no_of_nodes/4, no_of_nodes/2, q, r, s))
        p2.start()
        p3 = Process(target=f, args=(no_of_nodes/2, 3*no_of_nodes/4, q, r, s))
        p3.start()
        p4 = Process(target=f, args=(3*no_of_nodes/4, no_of_nodes, q, r, s))
        p4.start()
</code></pre>
</blockquote>

<p>has a race condition which makes the results untrustworthy. It probably makes more sense for each process to produce its output independently, rather than to synchronise access to the queues.</p>

<hr>

<blockquote>
<pre><code>    for x,y in itertools.product(range(no_of_nodes), range(no_of_nodes)):
            for i,j in itertools.product(range(x,no_of_nodes), range(no_of_nodes)): 
</code></pre>
</blockquote>

<p><code>itertools</code> also has <code>combinations</code>, which will give you unordered pairs of elements.</p>

<hr>

<p>The overall complexity: this is doing <span class="math-container">\$\Theta(V^2)\$</span> iterations of <code>average_shortest_path_length</code>. Since it's a sparse graph, the best case is that <code>average_shortest_path_length</code> takes <span class="math-container">\$\Theta(VE + V^2\lg V)\$</span>. But I wouldn't be surprised if the generic <code>average_shortest_path_length</code> uses a <span class="math-container">\$\Theta(V^3)\$</span> algorithm such as Floyd-Warshall. So overall, it's probably <span class="math-container">\$\Theta(V^5)\$</span>.</p>

<p>If instead you do one calculation of all-pairs-shortest-paths on the original graph (let's be pessimistic and say <span class="math-container">\$\Theta(V^3)\$</span>) and store the result as <span class="math-container">\$d\$</span>, then for each candidate inserted edge <span class="math-container">\$(u,v)\$</span> and each pair of edges <span class="math-container">\$(x,y)\$</span> the shortest distance in the modified graph is <span class="math-container">\$\min(d(x,y), d(x,u)+1+d(v,y))\$</span>. So by brute force you can get a <span class="math-container">\$\Theta(V^4)\$</span> algorithm.</p>

<p>An obvious heuristic is to pick a pair of points which are the furthest apart and insert the edge between them. By doing this first and aborting the analysis of <span class="math-container">\$(u,v)\$</span> when you exceed the best score found so far, there will probably be a reasonable speedup.</p>

<p>I would expect that there might be further improvements which would reduce the asymptotic complexity.</p>
    </div>