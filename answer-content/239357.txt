<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks pretty good to me. You are taking advantage of the standard library, are following the relevant style guides and you even have tests, good job! </p>

<p>Personally, I am more in favor of using <code>import from</code>, at least for well-known standard library functions and maybe for utility functions that are used everywhere throughout a project. This way you can more often fit the code on one line easily, making it more readable.</p>

<pre><code>from itertools import islice
from collections import deque
</code></pre>

<p>One small improvement is that your initial slice can be one larger, the argument behaves just like a range or slice argument and is exclusive of the end (i.e <code>islice(x, 4)</code> takes the first four elements since it is analogous to <code>x[0:4]</code>, <code>x[:4]</code> and <code>range(0, 4)</code>). However, this way you need to deal with the last element in a special way, so YMMV:</p>

<pre><code>def sliding_window_iter(iterable, size):
    """..."""
    iterable = iter(iterable)
    window = deque(islice(iterable, size), maxlen=size)
    for item in iterable:
        yield tuple(window)
        window.append(item)
    if window:  
        # needed because if iterable was already empty before the `for`,
        # then the window would be yielded twice.
        yield tuple(window)
</code></pre>

<p>This also reveals one behavior which you should at least be aware of (which seems to be the case, since you have a test for it). Arguable, <code>sliding_window_iter([1, 2], 3)</code> could yield <code>(1, 2)</code>, i.e. the function maybe shouldn't swallow any data. In any case, the chosen behavior should be documented in the docstring.</p>
    </div>