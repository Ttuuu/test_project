<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://softwareengineering.stackexchange.com/questions/278652/how-much-should-i-be-using-let-vs-const-in-es6">Always use <code>const</code></a> to declare variables - only use <code>let</code> when you must reassign. This keeps code readable, because then a reader of the code doesn't have to constantly keep in mind that a variable might be reassigned later. (If you use <code>let</code> but then <em>don't</em> reassign, it can still be confusing - in professional code, one might think "Why is <code>let</code> being used here? Was this meant to be reassigned in a section of code that was later removed, or something?)</p>

<p><code>Array.from</code> accepts an optional mapper function as a second parameter. Any time you have:</p>

<pre><code>Array.from(arrayLike).map(mapper)
</code></pre>

<p>you may replace it with</p>

<pre><code>Array.from(arrayLike, mapper)
</code></pre>

<p>(If all you're doing is converting an array-like object into an array, some prefer spread syntax because it's even more concise: <code>[...arrayLike]</code>)</p>

<p><code>innerText</code> is a <a href="http://perfectionkills.com/the-poor-misunderstood-innerText/" rel="nofollow noreferrer">weird property</a> introduced by Internet Explorer (<em>outside</em> of web standards originally) that has a number of odd quirks. Unless you're <em>deliberately looking</em> to invoke those quirks, it would be a better idea to use <code>textContent</code> instead to retrieve text from an element.</p>

<p>You can easily distinguish the first <code>tr</code> from the other <code>tr</code>s by using the query string <code>#tab tr:first-child</code> or <code>#tab tr:nth-child(n + 2)</code>:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const headers = Array.from(
  document.querySelectorAll('#tab tr:first-child th'),
  th =&gt; th.textContent.trim()
);
// Make an empty array for every item in headers:
const data = Array.from(headers, () =&gt; []);
for (const tr of document.querySelectorAll('#tab tr:nth-child(n + 2)')) {
  [...tr.children].forEach((th, i) =&gt; {
    data[i].push(th.textContent.trim());
  });
}
console.log(headers);
console.log(data);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;table id="tab"&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Name
    &lt;/th&gt;
    &lt;th&gt;
      Age
    &lt;/th&gt;
    &lt;th&gt;
      Location
    &lt;/th&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th&gt;
      Jason
    &lt;/th&gt;
    &lt;th&gt;
      22
    &lt;/th&gt;
    &lt;th&gt;
      Texas
    &lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Lawson
    &lt;/th&gt;
    &lt;th&gt;
      21
    &lt;/th&gt;
    &lt;th&gt;
      Florida
    &lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Jose
    &lt;/th&gt;
    &lt;th&gt;
      25
    &lt;/th&gt;
    &lt;th&gt;
      London
    &lt;/th&gt;
  &lt;/tr&gt;

&lt;/table&gt;</code></pre>
</div>
</div>


<p>That's already quite simple, IMO. I think adding jQuery to the mix would make things unnecessarily more complicated, not less.</p>

<p>I refactored it out, but I don't think it's good idea to use <code>reduce</code> when the accumulator is going to be the same object every time. See: <a href="https://www.youtube.com/watch?v=qaGjS7-qWzg" rel="nofollow noreferrer">Is <code>reduce</code> bad?</a> by Google devs. If it's always going to be the same object, it'll be a bit easier to read if that object is declared as a standalone variable in the outer scope.</p>

<p>The HTML is a bit weird. A <code>&lt;th&gt;</code> is a <em>table header</em>. It makes sense for the headers to be <code>&lt;th&gt;</code>s, but the table <em>data</em> should probably be <code>&lt;td&gt;</code>s instead.</p>
    </div>