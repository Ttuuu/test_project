<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Fundamental design</h2>

<p>First I'm going to address some issues I see with the design of your interpreter. These aren't problems with the code per say, just things I suggest to assist in maintainability, extensibility, etc.</p>

<h3>Stack design</h3>

<p>Right now, you're using a <code>Vec&lt;f64&gt;</code>. This is fine if you only want to represent floating-point numbers, but if you'd like to extend it to support more types, I suggest you use a vector of an enum type: <code>Vec&lt;Value&gt;</code>. This way, you can use <code>Value</code> to wrap any type you want (or even Invalid).</p>

<h3>Tokens</h3>

<p>Currently, you're parsing the tokens from strings and directly using that to execute an operation on the stack. You may consider using a <code>Token</code> enum and implementing <code>From&lt;&amp;str&gt;</code> for it, so you can document those all together.</p>

<p>I'd also recommend using an explicit operator, like <code>push</code>, to signal adding a value to the stack. This way you can reject certain inputs more easily.</p>

<h3>REPL</h3>

<p>If you allowed the user to enter values and operators one by one, and apply them immediately, you can show the user the current value at the top of the stack in real time.</p>

<h2>Code</h2>

<h3><code>lib.rs</code></h3>

<p>This code is essentially just a for loop, with one gotcha. We need to be able to change the position in code.</p>

<pre><code>let mut reg: usize = 0;
loop {
    let tok = tokens.get(reg);
    match tok {
        Some(&amp;"+")     =&gt; words::add(stack),
        Some(&amp;"-")     =&gt; words::sub(stack),
        Some(&amp;"*")     =&gt; words::mul(stack),
        Some(&amp;"/")     =&gt; words::div(stack),
        Some(&amp;"dup")   =&gt; words::dup(stack),
        Some(&amp;"swp")   =&gt; words::swp(stack),
        Some(&amp;"jnz")   =&gt; words::jnz(stack, &amp;mut reg),
        Some(&amp;"print") =&gt; words::print_float(stack, output),
        Some(_)        =&gt; words::parse_number(tok.unwrap(), stack),
        None           =&gt; break
    }
    reg += 1;
}
</code></pre>

<p>You can instead use a <code>while let</code> loop to save yourself from writing a bunch of <code>Some</code>s:</p>

<pre><code>let mut reg: usize = 0;
while let Some(tok) = tokens.get(reg) {
    match tok {
        &amp;"+"     =&gt; words::add(stack),
        &amp;"-"     =&gt; words::sub(stack),
        &amp;"*"     =&gt; words::mul(stack),
        &amp;"/"     =&gt; words::div(stack),
        &amp;"dup"   =&gt; words::dup(stack),
        &amp;"swp"   =&gt; words::swp(stack),
        &amp;"jnz"   =&gt; words::jnz(stack, &amp;mut reg),
        &amp;"print" =&gt; words::print_float(stack, output),
        _        =&gt; words::parse_number(tok, stack),
    }

    reg += 1;
}
</code></pre>

<p>Also, I'm pretty sure you want to skip the increment after a jump, so you probably want to account for that somehow.</p>

<p>I'm not sure why you're passing in the output vector as a reference and then cloning it, I assume it's because you want to enable multiple lines of code acting on the same stack.</p>

<p>You probably should be passing an <code>&amp;str</code> to <code>fn eval</code>, it's just more idiomatic.</p>

<h3><code>words.rs</code></h3>

<p>I'd recommend passing the stack reference as the first parameter in <code>fn parse_number</code>. It's good to have consistent ordering.</p>

<p>I'd also say implementing <code>get_ops</code> as an inline function would be better than using such a trivial macro.</p>

<p>One thing you could do is create a NewType wrapping a vector like <code>Stack(Vec&lt;f64&gt;)</code>. You could then implement all of these functions as methods of that struct:</p>

<pre><code>struct Stack(Vec&lt;f64&gt;);

impl Stack {
    // helpful alias
    #[inline(always])
    pub fn push(&amp;mut self, item: f64) {
        self.0.push(item);
    }

    // helpful alias
    #[inline(always])
    pub fn pop(&amp;mut self) -&gt; f64 {
        self.0.pop().unwrap_or(0.0)
    }

    // same as get_ops
    #[inline(always])
    pub fn pop2(&amp;mut self) -&gt; (f64, f64) {
        (self.pop(), self.pop())
    }

    pub fn parse_number(&amp;mut self, token: &amp;str) {
        let number: f64 = token.parse().unwrap_or(0.0);
        self.push(number);
    }

    pub fn swp(&amp;mut self) {
        let (first, second) = self.pop2();
        self.push(first);
        self.push(second);
    }

    ...
}
</code></pre>

<p>I'm pretty sure <code>fn swp</code> has the wrong order. You pop out element <code>TOP</code> then <code>TOP - 1</code>. You push <code>TOP - 1</code> then <code>TOP</code>, which leaves them in the same order they were in at the start. I flipped them in the above example.</p>

<p>I'm not sure why you care about dividing by 0. The rust f64 type has NaN and Infinity for that very reason, though maybe it's just a usability thing.</p>
    </div>