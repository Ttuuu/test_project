<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>For efficiency, I would change <code>Store</code> to have only a <code>products</code> attribute, which maps the product id to the product object. You can then have functions which look up products by name, price, etc. if desired.</p></li>
<li><p>Bug:</p>

<pre><code>def generate_product_id(self):
    rnum = random.randint(100000,999999)
    if not existing_id(rnum):
        self.product_ids.append(rnum)
        return rnum
    else:
        # FIX
        return self.generate_product_id()
</code></pre></li>
<li><p>Some of your methods are unnecessary:</p>

<pre><code>def get_product_price(self, product):
    return self.products[product['name']]['price']
</code></pre>

<p>Simply use <code>product['price']</code> instead of calling this method with a product.</p></li>
<li><p>Perhaps it makes sense to also have a <code>Product</code> class in the future.</p></li>
<li><p><code>Cart.items</code> makes more sense as a list I think.</p></li>
<li><p><code>Cart.final_price</code>: I would calculate it dynamically, which makes code for adding and removing products simpler. Performance difference is insignificant.</p></li>
<li><p>Finally, in Python, the docstring is placed inside the function (doesn't change the output, but allows Python documentation tools to recognize your docstrings):</p>

<pre><code>def my_function():
    """ Docstring """
    return True
</code></pre></li>
</ol>
    </div>