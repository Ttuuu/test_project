<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Method names and scope</h1>

<p>I think your methods are well named, and are pretty easy to read</p>

<hr>

<h1>Over engineering</h1>

<p>I understand that this was an interview and you probably wanted to show your skill. 
I suspect it ended up being more complex than it needed to be as a result.
Some of the things you put in would be nice in a large project, but seems over the top for such a small coding challenge.</p>

<p>Signs of over engineering:</p>

<ul>
<li>A fairly complicated solver. Why not go for a greedy solution obtained by simulating the game. They said the algorithm wasn't important.</li>
<li>5 separate files</li>
<li>Error handling on the input. There's also a try-catch there that does nothing.</li>
<li>A whole class for a simple x,y object. At least you didn't mutate the object, which I liked.</li>
<li>The game class has too many unnecessary methods. A getter for boardSize - with comments?</li>
</ul>

<hr>

<h1>Comments</h1>

<p>There are too many irrelevant comments. JSDoc is fine, but you don't need it on every method.</p>

<hr>

<h1>"Overuse of the let statement"</h1>

<p>I don't get what they meant by this.</p>

<hr>

<h1>Concerns not separated</h1>

<ul>
<li>Why is totalCost calculated in the game class, not the solver?</li>
<li>Why is collision check done in the game class? It should be the solver's job, or maybe a board class.</li>
</ul>

<p>There are several other methods that seem to bleed from one class to another.</p>

<hr>

<h1>Doing it the js way</h1>

<p>The "js way" is obviously not universally agreed upon, but good js code is often very terse.
What makes it terse is that it's dynamically typed, but also that it lends itself to functional programming styles since functions are first class.
I see that you already make good use of this in your code, but it can be taken even further.</p>

<p>My (obviously subjective) suggestion is to experiment with the following: </p>

<ul>
<li>Replace all the classes with pure (or close to pure) functions (except for reading input and printing of course). Only comment what's not obvious.
Many of your methods are half-way there already.</li>
<li>Put everything in one file. See how far you can go before you feel it getting too crowded.</li>
<li>Replace the solver with a much simpler greedy solution</li>
</ul>
    </div>