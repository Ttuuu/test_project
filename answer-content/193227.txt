<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You need not declare <code># -*- coding: utf-8 -*-</code> in Python 3: <a href="https://stackoverflow.com/questions/14083111/should-i-use-encoding-declaration-in-python3">UTF-8 is the default</a>.</p>

<p>Writing <code>I = np.logspace(…)</code> inside your <code>curve_equation</code> function is bad practice, because it hard-codes certain <em>x</em>-values for your plot.  In fact, your plot is wrong, because the calculations are for \$I_s\$ values ranging from 10<sup>2</sup> A to 10<sup>5</sup> A (due to the inner <code>I = np.logspace(np.log10(Is), 5, 1e2)</code>), but your plot's <em>x</em> axis is labelled as if the values ranged from 10<sup>1</sup> A to 10<sup>5</sup> A (due to the outer <code>I = np.logspace(1, 5, 1e2)</code>).  Specifically, four of the curves should intersect at 1 kA, 10 s.</p>

<p>I also find the way in which the curves are specified very cumbersome.  You have five magic strings ("SIT", "VIT", etc.) which you search for in <code>curve_types</code>.  Then, you retrieve the <code>k</code>, <code>alpha</code>, and <code>beta</code> parameters by using the corresponding index.  Printing an error message and returning <code>None</code> is an inappropriate error-handling mechanism; you should raise or propagate an exception for such a fatal error.</p>

<p>I'd rather specify the parameters the other way: each curve should be defined as a \$(k, \alpha, \beta)\$ tuple.  To do that, I would use <code>namedtuple</code>s.  I'd go a bit further and make each <code>namedtuple</code> smart enough to know what its own \$td(I)\$ function looks like, when \$T\$ and \$I_s\$ are specified.</p>

<pre><code>from collections import namedtuple
import numpy as np
import matplotlib.pyplot as plt

class IEC_Curve(namedtuple('IEC_Curve', 'name k alpha beta')):
    def td(self, T, Is):
        """
        The td(I) function for a given IEC curve, time dial setting, and
        current setting.
        """
        return lambda I: self.k * T / self.beta / ((I / Is)**self.alpha - 1)

SIT = IEC_Curve('SIT', k=0.14, alpha=0.02, beta=2.97)   # Standard inverse / A
VIT = IEC_Curve('VIT', k=13.5, alpha=1, beta=1.5)       # Very inverse / B
LTI = IEC_Curve('LTI', k=120, alpha=2, beta=13.33)      # Long time inverse / B
EIT = IEC_Curve('EIT', k=80, alpha=2, beta=0.808)       # Extremely inverse / C
UIT = IEC_Curve('UIT', k=315.2, alpha=2.5, beta=1)      # Ultra inverse

I = np.logspace(2, 5, 1e2)
for curve in (SIT, VIT, LTI, EIT, UIT):
    plt.loglog(I, curve.td(T=1, Is=1e2)(I), label=curve.name)
plt.xlabel("Current [A]")
plt.ylabel("Time [s]")
plt.title("IEC Time/current curves")
plt.grid()
plt.legend()
plt.show()
</code></pre>

<hr>

<p>Note that <code>td</code> is a method that returns a function.  To calculate values of \$td\$ with fixed \$T\$, fixed \$I_s\$, and swept \$I\$:</p>

<pre><code>UIT.td(T=1, Is=1e2)(I=np.logspace(2, 5, 1e2))
</code></pre>

<p>To calculate a value of \$td\$ for a given \$T\$, \$I_s\$, and \$I\$:</p>

<pre><code>UIT.td(T=1, Is=1e2)(I=1e2)
</code></pre>

<p>(This happens to cause a <code>ZeroDivisionError</code>, which manifests itself as a <code>RuntimeWarning: divide by zero encountered in divide</code> at the beginning of the sweep.)</p>

<hr>

<p>In case you feel intimidated by my use of inheritance of <code>namedtuple</code>, you could use a manually written constructor instead:</p>

<pre><code>class IEC_Curve:
    def __init__(self, name, k, alpha, beta):
        self.name = name
        self.k = k
        self.alpha = alpha
        self.beta = beta

    def td(self, T, Is):
        return lambda I: self.k * T / self.beta / ((I / Is)**self.alpha - 1)
</code></pre>

<p>One difference is that <code>namedtuple</code>s are immutable, whereas the members here are mutable.</p>
    </div>