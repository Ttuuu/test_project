<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The only other standard formula that could do this is <code>=SUMPRODUCT(SUMIF(INDIRECT</code>, and I applaud you for going with a UDF over that monstrosity.</p>

<p>Given the purpose of your function and its similarity to two other functions</p>

<pre><code>SUMIF(range, criteria, [sum_range])
SUMIFS(sum_range, criteria_range1, criteria1, ...)
</code></pre>

<p>Also note that <code>SUM</code> <em>can</em> go across sheets-</p>

<pre><code>=SUM(Sheet1:Sheet2!D1:D5)
</code></pre>

<p>I think it would make sense to follow the (standard) naming conventions prevailing in this function family. </p>

<pre><code>SUMIF3D(sheet_names, sum_range, criteria_range1, criteria1, [criteria_range2], [criteria2])
</code></pre>

<p>I <em>might</em> rename <code>sum_range</code> to <code>sum_range3D</code> if you like. The standard way you'd do your argument testing is by passing the array of arguments to a test function.</p>

<p>What you might not be aware of is that MS has some <a href="https://support.office.com/en-us/article/excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3" rel="nofollow noreferrer">specs on UDFs</a>:</p>

<blockquote>
<pre><code>Arguments in a function      255
Length of formula contents   8,192 characters
Cross-worksheet dependency   64,000 worksheets that can refer to other sheets
</code></pre>
</blockquote>

<p>So, you're in the clear no problem, but it's something to consider if you take an array of arguments.</p>

<hr>

<p>But getting back to using that first standard function I mentioned - you're essentially requiring a <em>list of sheets</em> that you can use indirectly, aren't you?</p>

<blockquote>
<pre><code>WorksheetFunction.SumIfs(wkb.Sheets(cell.Value).Range(SumRng.Address)
</code></pre>
</blockquote>

<p>Looks <em>very</em> similar to <code>SUMIFS(INDIRECT(</code> in a loop, eh?</p>

<p>Let's see if we can't get your <em>3D</em> function to take a <em>3D Range</em></p>

<p><strong><em>NOPE</em></strong> <sub>Sorry, I tried, I'll probably post a question. <a href="https://codereview.stackexchange.com/q/189991/75587">I did</a></sub></p>

<p>All right, that's too bad.</p>

<p>We'll continue with your variable names - make them a little more concise so it's obvious what they do. Characters are free. <a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a> have <code>camelCase</code> for local variables and <code>PascalCase</code> for other variables and names.</p>

<p>I'd use <code>parameterNumber</code> instead of <code>paramN</code> and <em>I</em> wouldn't use <code>cell</code> but that's up to you. I'd also go with <code>targetWorkbook</code> or maybe <code>ActiveWorkbook</code> or <code>ThisWorkbook</code> depending on your setup</p>

<p>Otherwise, your function is mostly taking arguments to execute the built-in function, which is a difficult task. </p>

<p>Your <code>IsMissing</code> setup is kind of weird. Would <code>CritRange5</code> be available if <code>CritRange4</code> is missing? It could be simplified like this</p>

<pre><code>Dim rangeNumber As Long
For rangeNumber = 1 To 7
    If Not IsMissing("CritRange" &amp; i) Then
        parameternumber = parameternumber + 1
    Else: Exit For
Next
</code></pre>

<p>And then with your <code>Case</code> selection, that could be simplified as well</p>

<pre><code>For rangeNumber = 1 To parameternumber
        For Each cell In wblist
            SUMIFS3D = SUMIFS3D + _
                Application.WorksheetFunction.SumIfs(wkb.Sheets(cell.Value).Range(SumRng.Address), _
                wkb.Sheets(cell.Value).Range("CritRange" &amp; parameternumber.Address), "Crit" &amp; parameternumber)
        Next
    Next
</code></pre>

<p>You've eliminated 6/7 of the <code>IF</code> and 6/7 of the <code>SELECT CASE</code> code. </p>
    </div>