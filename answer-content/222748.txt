<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Organization</h2>

<p>Your function <code>prime_sum()</code> does three things.</p>

<ol>
<li>It computes primes up to a limit</li>
<li>It sums up the computed primes</li>
<li>It prints out the sum.</li>
</ol>

<p>What are the odds the next Euler problem will use prime numbers?  You’re going to have to write and re-write your sieve over and over again if you keep embedding it inside other functions.  Pull it out into its own function.</p>

<p>Summing up the list of prime numbers you’ve generated should be a different function.  Fortunately, Python comes with this function built-in: <code>sum()</code>.</p>

<p>Will you always print the sum of primes every time you compute it?  Maybe you want to test the return value without printing it?  Separate computation from printing.</p>

<p>Reorganized code:</p>

<pre><code>def primes_up_to(n):
    # omitted

def prime_sum(n):
    primes = primes_up_to(n)
    return sum(primes)

 if __name__ == '__main__':
     total = prime_sum(2000000)
     print(total)
</code></pre>

<h2>Bugs</h2>

<p>As you code presently reads, you compute primes up to <code>n</code>, using <code>range(n+1)</code> for the loop.  The <code>+1</code> ensures you actually include the value <code>n</code> in the loop.</p>

<p>Then, you sum up all the primes using <code>range(n)</code> ... which means you stop counting just before <code>n</code>.  Not a problem if you pass a non-prime number for <code>n</code>, but if you passed in a prime, your code would stop one number too early.</p>

<p>It would be much easier to increase <code>n</code> by 1 at the start, to avoid the need to recompute it all the time, and risk accidentally forgetting a <code>+1</code>.</p>

<h2>Memory usage</h2>

<p>Lists in Python are wonderful, flexible, and memory hungry.  A list of 2 million integers could take 16 million bytes of memory, if each element of the list is an 8 byte pointer.  Fortunately, the integers <code>0</code> and <code>1</code> are interned, so no additional memory is required for the storage of each value, but if arbitrary integers were stored in the list, each integer can take 24 bytes or more, depending on the magnitude of the integer.  With 2 million of them, that’s an additional 48 million bytes of memory.</p>

<p>If you know in advance you are going to be working with 2 million numbers, which will only every be zeros or ones, you should use a <code>bytearray()</code>.</p>

<pre><code>def bytearray_prime_sum(n):
    n += 1
    sieve = bytearray(n)     # An array of zero flags
    sieve[0] = 1
    sieve[1] = 1
    # ... etc ...
</code></pre>

<p>There are a few tricks of speeding up your sieve.  Two is the only even prime.  You can treat it as a special case, and only test odd numbers, using a loop over <code>range(3, n, 2)</code>.  Once you’ve done that, when marking off multiples of a prime, you can loop over <code>range(i*i, n, 2*i)</code>, since the even multiples don’t need to be considered.  Finally, when generating the final list of primes (or summing up the primes if you are generating and summing in one step), you can again skip the even candidates, and only consider the odd candidates using <code>range(3, n, 2)</code>.  Just remember to include the initial <code>2</code> in some fashion.</p>

<pre><code>def bytearray_prime_sum(n):
    n += 1
    total = 2
    flags = bytearray(n)
    for i in range(3, n, 2):
        if not flags[i]:
            total += i
            for j in range(i*i, n, 2*i):
                flags[j] = 1
    return total
</code></pre>

<h2>Memory usage: Take 2</h2>

<p>Since we are only storing <code>0</code> and <code>1</code> flags, a <code>bytearray</code> actually uses 8 times more memory than is necessary.  We could store the flags in individual bits.  First, we'll want to install the <code>bitarray</code> module:</p>

<pre><code>pip3 install bitarray
</code></pre>

<p>Then, we can reimplement the above using a <code>bitarray</code> instead of a <code>bytearray</code>.</p>

<pre><code>from bitarray import bitarray

def bitarray_prime_sum(n):
    n += 1
    total = 2
    flags = bitarray(n)
    flags.setall(False)
    for i in range(3, n, 2):
        if not flags[i]:
            total += i
            flags[i*i::2*i] = True
    return total
</code></pre>

<p>Most notably in this <code>bitarray</code> implementation is the flagging of the multiples of a prime became a single statement: <code>flags[i*i::2*i] = True</code>.  This is a slice assignment from a scalar, which is a fun and powerful extra tool the <code>bitarray</code> provides.</p>

<h2>Timings</h2>

<p><a href="https://i.stack.imgur.com/h7oZ2.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/h7oZ2.png" alt="Timing graphs"></a></p>

<p>Unfortunately, the above graph shows Justin's implementation has actually slowed down the code over the OP's, due to a mistake Justin made when profiling his "improvement."</p>
    </div>