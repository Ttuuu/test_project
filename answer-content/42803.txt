<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>About the current code:</p>

<ul>
<li>I'd rename <code>CanAdd</code> to <code>canAdd</code> (according to the coding conventions).</li>
<li>Rename <code>me</code> to <code>value</code> (it's more descriptive), and <code>args</code> to <code>values</code> and <code>arg</code> to <code>currentValue</code>.</li>
<li>Remove the unnecessary <code>java.lang</code> package prefix.</li>
</ul>

 

<pre><code>public static boolean canAdd(int value, int... values) {
    int total = value;
    for (int currentValue: values) {
        if (total &gt;= 0) {
            // since total is positive, (MaxValue - total) will never
            // overflow
            if (Integer.MAX_VALUE - total &gt;= currentValue) {
                total += currentValue;
            } else {
                return false;
            }
        } else {
            // same logic as above
            if (Integer.MIN_VALUE - total &lt;= currentValue) {
                total += currentValue;
            } else {
                return false;
            }
        }
    }
    return true;
}
</code></pre>

<p>I have also moved the comments a line up to avoid horizontal scrolling.</p>

<p>I don't really like the <code>value</code> and <code>values</code> here so I've changed the first two lines a little bit:</p>

<pre><code>public static boolean canAdd(int... values) {
    int total = 0;
    ...
}
</code></pre>

<p>If you invert the inner <code>if</code> statements you could eliminate the <code>else</code> keywords:</p>

<pre><code>if (total &gt;= 0) {
    if (Integer.MAX_VALUE - total &lt; currentValue) {
        return false;
    }
    total += currentValue;
} else {
    if (Integer.MIN_VALUE - total &gt; currentValue) {
        return false;
    }
    total += currentValue;
}
</code></pre>

<p>The <code>+=</code> is the same in both branches therefore it could be moved after the <code>if</code>:</p>

<pre><code>if (total &gt;= 0) {
    if (Integer.MAX_VALUE - total &lt; currentValue) {
        return false;
    }
} else {
    if (Integer.MIN_VALUE - total &gt; currentValue) {
        return false;
    }
}
total += currentValue;
</code></pre>

<p>Introducing a explanatory <code>boolean</code> variable could make it shorter and save an indentation level:</p>

<pre><code> public static boolean canAdd(int... values) {
    int total = 0;
    for (int currentValue: values) {
        final boolean positiveTotal = total &gt;= 0;
        if (positiveTotal &amp;&amp; (Integer.MAX_VALUE - total &lt; currentValue)) {
            return false;
        }
        if (!positiveTotal &amp;&amp; (Integer.MIN_VALUE - total &gt; currentValue)) {
            return false;
        }
        total += currentValue;
    }
    return true;
}
</code></pre>

<p>But I think it's still hard to understand. I'd go with <code>long</code> conversion.</p>
    </div>