<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It isn't clear that you specifically need to be working with arrays or if you just need to be manipulating a set of numbers. If there's no such requirement, you could use an <code>ArrayList</code> and dynamically allocate your buffer instead. This also gives you some built-in ways to find and move entries around using the <code>List</code> interface. (Technically, if your input and output type is strictly an array, perhaps you still could still convert to an <code>ArrayList</code> to do your work then convert back.)</p>

<p>Other comments:</p>

<ul>
<li>I'm unsure if there's any particular reason to hard cap your buffer sizes but it can be avoided</li>
<li><code>Scanner</code> is an object that should be cleaned up (it doesn't matter much in this simple program but generally you should release resources when you no longer need them (consider if this was reading a file stream instead). You can either call <code>close()</code> on the object after you're done reading inputs or wrap the usage in a <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try-with-resources block</a></li>
<li>As always, more comments and clearer variable names are appreciated</li>
</ul>

<p>Here's an example that prioritizes minimizing the number of loops in the code, this one has two loops and an inner loop (input, search, replace):
</p>

<pre><code>int listSize;
List&lt;Integer&gt; list;

try (Scanner scanner = new Scanner(System.in)) {
    System.out.println("Enter the array size: ");
    listSize = scanner.nextInt();

    list = new ArrayList&lt;&gt;(listSize);
    System.out.println("Enter the array elements: ");
    for (int i = 0; i &lt; listSize; ++i) {
        list.add(scanner.nextInt());
    }
}

for (int i = 0; i &lt; listSize; ++i) {
    int value = list.get(i);
    int lastIndex = list.lastIndexOf(value);
    if (lastIndex &gt; i) {
        // there's another element of this value after this one
        for (int j = i; j &lt;= lastIndex; ++j) {
            if (list.get(j) == value) {
                // repeated value to zero and move to the beginning of the list
                list.remove(j);
                list.add(0, 0);
            }
        }
    }
}

System.out.println("The array is: ");
for (int i = 0; i &lt; listSize; i++) {
    System.out.print(list.get(i) + " ");
}
</code></pre>

<p>This example may not be the most efficient but it tries to make the most of built-in functions, and saves you the effort of managing an array directly. In general that would be my advice, see what already exists in standard libraries to do simple operations.</p>

<p>I think this could be reduced further to eliminate the inner loop and only have an input loop, possibly with a second loop afterwards. Constructs like <code>HashMap</code> could also be utilized to detect duplicates and go down to one input loop. I'll leave that as an exercise to someone else to try.</p>
    </div>