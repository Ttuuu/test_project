<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>Set</code> makes for a slow stack</h2>
<p>Your use of a <code>Set</code> rather than a stack (array) is slowing everything down. The hashing function needed for <code>Set</code> to add delete and check items is expensive compared to pushing and popping from a stack.</p>
<p>JS does not like managing memory, allocations are expensive. If you use a stack you don't need to shrink it, rather just keep a pointer to the current stack position. That way if it shrinks below half its size it does not need relocation. You only get reallocation of the array each time it grows over double its size and never repeated.</p>
<p>Creating complex object, like arrays is far slower than creating primitive types. The <code>for</code> loop you use needs to create a new array for each position moved to. Every time you add to the <code>toVisit</code> set you create a new array. This all adds up.</p>
<p>Even creating the array <code>chart</code> populating it with characters from from the maze string is overly complex and can be avoided.</p>
<h2>Example</h2>
<p>The example avoids creating anything by basic types in the while loop. Avoids repeated calculations. Uses <code>stackPos</code> to track the size of the stack rather than push and pop from the stack. For quicker indexing the map is a flat array and coordinates are handled as triplets {x, y, idx}</p>
<p>I would guess its about 10 times faster (depending on the maze complexity) I did not have a maze to test it on so I hope it works :)</p>
<pre><code>function pathFinder(maze) {
    const stack = [], rows = maze.split("\n");
    const size = rows.length, size2 = size * 2, exit = size - 1;
    const map = new Array(size * size);
    const checkMove = (x, y, idx) =&gt; {
        if (x === exit &amp;&amp; y === exit) { return foundExit = true }        
        if (x &lt; 0 || x &gt; exit || y &lt; 0 || y &gt; exit || rows[y][x] === "W") { return false }
        if (map[idx] === undefined) {
            map[idx] = 1;
            stack[stackPos++] = x;
            stack[stackPos++] = y;            
        }
        return false;
    }
    var x, y, idx, stackPos = 0, foundExit = false;

    checkMove(0, 0, 0)
    while (stackPos) {
        y = stack[--stackPos];
        x = stack[--stackPos] + 1;  // add one to check next position
        idx = x + y * size;
        if (checkMove(x, y, idx)) { break }
        x -= 2;
        idx -= 2;
        if (checkMove(x++, y, idx++)) { break }
        y += 1;
        idx += size;
        if (checkMove(x, y, idx)) { break }
        if (checkMove(x, y - 2, idx - size2)) { break }
    }
    return foundExit;
}
</code></pre>
    </div>