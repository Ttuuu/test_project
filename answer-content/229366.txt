<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, thanks for providing the test program.  That always makes code easier to review.  Unfortunately, when I tried it, I found a null pointer dereference here:</p>

<blockquote>
<pre><code>    std::string s = *std::get_if&lt;std::string&gt;(&amp;t);
</code></pre>
</blockquote>

<p>I had to replace with</p>

<pre><code>    auto p = std::get_if&lt;std::string&gt;(&amp;t);
    if (!p) { continue; }
    std::string s = *p;
</code></pre>

<p>The test program really looks like it could benefit from being divided into individual tests within a unit-test framework (and the tests could become self-checking, rather than relying on a human to read the output).  In fact, I normally recommend a test-first approach for code like this.</p>

<p>I'd recommend including the <code>ExportedGridData.csv</code> as a string stream, rather than relying on an external resource (which we reviewers don't have!).  If you do keep it external, then at least check (e.g. <code>if (test_data)</code> that we've successfully read from it before assuming that <code>test_string</code> is valid.</p>

<p>In fact, this lack of checking of streaming is prevalent throughout the code - e.g. in <code>convertString()</code>.</p>

<hr>

<p>The <code>token_type</code> enum doesn't buy us much.  It's only used in <code>main()</code> (so could be reduced in scope), and there only within a single <code>switch</code>.  It might be simpler to just use the numeric values there, with comments.  The one advantage to having it close to <code>token</code> definition is that we can see that it matches.</p>

<p>Given that it's intended to be used to convert from <code>std::size_t</code> values, perhaps it ought to be plain <code>enum</code> rather than <code>enum class</code>?</p>

<hr>

<p>The streaming out operator could use the return value from <code>std::visit()</code> as its own return value.  There's a slight wrinkle in that lambda expressions normally return values rather than references; to return a reference we need to either specify the return type explicitly:</p>

<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const token&amp; tok)
{
    return std::visit([&amp;out](const auto&amp; content) -&gt; std::ostream&amp; { return out &lt;&lt; content; }, tok);
}
</code></pre>

<p>or use a <code>std::reference_wrapper</code> (from <code>&lt;functional&gt;</code>):</p>

<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const token&amp; tok)
{
    return std::visit([&amp;out](const auto&amp; content) { return std::ref(out &lt;&lt; content); }, tok);
}
</code></pre>

<p>It's probably better to name the lambda, so it's more readable and a sane line length:</p>

<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const token&amp; tok)
{
    auto const print = [&amp;out](const auto&amp; content) -&gt; std::ostream&amp;
                       { return out &lt;&lt; content; };
    return std::visit(print, tok);
}
</code></pre>

<hr>

<p>Moving on to <code>tokenizer</code>, its constructor ought to be <code>explicit</code>, since it can be invoked with a single argument.  I'm not a fan of multiple <code>bool</code> arguments like that, as it's hard to see at the call site what each one means.</p>

<p>This overload of the <code>&lt;&lt;</code> operator has no benefit, since <code>std::string_view</code> has a converting constructor from <code>const char*</code>:</p>

<pre><code>tokenizer&amp; tokenizer::operator&lt;&lt;(const char* line)
{
    return operator&lt;&lt;(std::string_view(line));
}
</code></pre>

<p>Just remove it and C-style strings work fine.</p>

<p>I think it's clearer to write <code>(s.empty())</code> than <code>if (s.length() == 0)</code>.</p>

<p>The actual tokenization is very hard to follow, particularly with the different options affecting its behaviour.  I expected to see a simple state machine for this parsing.  It might be simpler to deal with <code>remove_blanks</code> and <code>strip_quotes</code> (and possibly also <code>convert</code>) when streaming out rather than in.</p>

<p>A different approach to determining the type would be to attempt to convert to integer, else to float and finally keep as a string, and let the conversions tell us which was successful (e.g. using <code>std::stoi()</code> and <code>std::stod()</code>, or <code>std::stringstream</code>'s input operators).</p>

<hr>

<p>When writing to a vector, there's no need for a loop to build the vector an element at a time.  <code>std::deque</code> is a standard container, so we can create the vector directly from its start and end iterators:</p>

<pre><code>void tokenizer::operator&gt;&gt;(std::vector&lt;token&gt;&amp; out)
{
    out.insert(out.end(), toks_.begin(), toks_.end());
    toks_.clear();
}

std::vector&lt;token&gt; tokenizer::getVector()
{
    std::vector&lt;token&gt; ret{toks_.begin(), toks_.end()};
    toks_.clear();
    return ret;
}
</code></pre>

<p>We might consider <code>std::move()</code> algorithm instead, to reduce string copying.</p>

<hr>

<p>In the test program, there's an obvious candidate for a raw string:</p>

<blockquote>
<pre><code>std::istringstream iss("1,\"\"\"2,3\"\", a\",4,-1.1,,\"\", 5,\"asdf\"");
</code></pre>
</blockquote>

<p>I think this is much easier to read (admittedly, the Stack Exchange syntax highlighter doesn't yet handle it properly, but good editors do):</p>

<pre><code>std::istringstream iss(R"***(1,"""2,3"", a",4,-1.1,,"", 5,"asdf")***");
</code></pre>

<hr>

<p>There's no need for <code>using std::cout;</code> at global scope.  If you really feel it's worthwhile, this can be within <code>main()</code>.</p>

<p>We're quite right to import the whole <code>std::string_literals</code> namespace - that's one of the few namespaces designed to be used like that.</p>
    </div>