<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is bad. You calculate them all first, and only then print them out. And what if <em>n</em> = <em>20</em>, or <em>42</em>, or <em>100</em>? The printout will never start (and the memory will blow up before that, too). </p>

<p>Instead, have your program <strong>create</strong> <em>n</em> <em>nested loops</em> <strong>at run-time</strong>, in effect enumerating the binary encoding of <i>2<sup>&amp;hairsp;n</sup></i>, and print the sums out from the innermost loop. In pseudocode:</p>

<pre><code> // {5, 4, 3}
 sum = 0
 for x in {5, 0}:   // included, not included
     sum += x
     for x in {4, 0}:
         sum += x
         for x in {3, 0}:
             sum += x
             print sum
             sum -= x
         sum -= x
     sum -= x
</code></pre>

<p>You can emulate the loops creation with recursion, coding only one recursive function. Pass it the array (<code>{5, 4, 3}</code> in your example) and a zero-based index, and work as shown above with <code>x in {arr[i], 0}</code>, making the recursive call with <code>i+1</code>, if <code>i</code> is in bounds (<code>i &lt; n</code>);  or print the <code>sum</code> value out, otherwise. The <code>for</code> loop can be inlined away as well, since there always are only two numbers to process, <code>arr[i]</code> and <code>0</code>.</p>

<p>You did say <em>print</em>. Storing them is an insanely ginormous overkill.</p>

<p><em>edit:</em>
Thus concludes the algorithmic review, which you did request. No point to reviewing the code when algorithm is unsuitable for the task. Exponential space algorithms are never good when there's a linear space algorithm to be had.</p>
    </div>