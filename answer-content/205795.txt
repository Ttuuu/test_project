<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have updated my code quite a bit with many of your guys' suggestions. At least to the best of my ability anyway. I haven't done absolutely everything, but I did away with the class structure, went with the namespace structure suggested by @user673679. It's not perfect, but I think it looks better. I also implemented the linear conflict function according to your code as well. Took me a little bit to fully understand it, but I typed it line-by-line and I think I got it. I had to change a couple things to <code>!bool</code> though. I passed in an almost solved board and it returned a heuristic of like 18.</p>

<p>I also believe I've fixed the checkSolvable. I also tried to go through and update some variable names to be more concise. Passed things as const when they weren't going to be changed. Stuff like that.</p>

<p>Now, somewhere down the line, I managed to mess up the priority queue. It is no longer being inserted in a sorted manner. I say this because I know it doesn't sort, it just inserts according to whatever priority you give it. Do you guys think it might be better to go with a plain vector and use <code>std::sort</code>?</p>

<h2>Main.cpp</h2>

<pre><code>#include "Functions.h"

int main()
{
    std::chrono::system_clock::time_point start, end;
    std::vector&lt;int&gt; b;

    //Open list contains all unexplored nodes, sorted by heuristic value
    std::priority_queue&lt;Npuzzle::Container*,
                        std::vector&lt;Npuzzle::Container*&gt;,
                        Npuzzle::GreaterThanByHeur&gt; open;

    //Closed list contains all explored nodes, with values set to encoded parent board
    std::unordered_map&lt;std::uint_fast64_t,
                        std::uint_fast64_t&gt; closed;

    int n = 4;

    //std::cout &lt;&lt; "Input size of board: " &lt;&lt; std::endl;
    //std::cin &gt;&gt; n;

    start = std::chrono::system_clock::now();

    solve(b, open, closed, n);

    end = std::chrono::system_clock::now();

    std::chrono::duration&lt;double&gt; t = end - start;

    int steps = print(Npuzzle::encode(b, n), closed, n);

    std::cout &lt;&lt; std::endl;
    std::cout &lt;&lt; std::fixed;
    std::cout &lt;&lt; std::setprecision(5);
    std::cout &lt;&lt; steps &lt;&lt; " steps in " &lt;&lt; t.count() &lt;&lt; " secs.";

    //Cleanup
    cleanup(open, closed);

    std::cin.get();

    return 0;
}
</code></pre>

<h2>Functions.h</h2>

<pre><code>#include &lt;ctime&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;unordered_map&gt;
#include &lt;queue&gt;
#include &lt;thread&gt;

#include "Npuzzle.h"

bool duplicate(
    std::vector&lt;int&gt; b,
    std::unordered_map&lt;std::uint_fast64_t, std::uint_fast64_t&gt;&amp; closed,
    const int n)
{
    return closed.count(Npuzzle::encode(b, n));
}

void addQueue(
    std::vector&lt;int&gt; b,
    std::vector&lt;int&gt; parent,
    std::priority_queue&lt;Npuzzle::Container*, std::vector&lt;Npuzzle::Container*&gt;, Npuzzle::GreaterThanByHeur&gt;&amp; open,
    std::unordered_map&lt;std::uint_fast64_t, std::uint_fast64_t&gt;&amp; closed,
    const int n)
{
    auto c = new Npuzzle::Container;

    c-&gt;code = Npuzzle::encode(b, n);
    c-&gt;heuristic = Npuzzle::heuristic(b, n);

    open.emplace(c);

    closed.insert({ Npuzzle::encode(b, n), Npuzzle::encode(parent, n) });
}

void addMoves(
    const std::vector&lt;int&gt; b,
    std::priority_queue&lt;Npuzzle::Container*, std::vector&lt;Npuzzle::Container*&gt;, Npuzzle::GreaterThanByHeur&gt;&amp; open,
    std::unordered_map&lt;std::uint_fast64_t, std::uint_fast64_t&gt;&amp; closed,
    const int n)
{
    auto moves = std::vector&lt;std::vector&lt;int&gt;&gt;(4);
    auto parent = b;

    moves[0] = Npuzzle::up(b, n);
    moves[1] = Npuzzle::down(b, n);
    moves[2] = Npuzzle::left(b, n);
    moves[3] = Npuzzle::right(b, n);

    for (auto i = 0; i &lt; 4; ++i)
    {
        if (moves[i].size() == (n * n))
        {
            if (!duplicate(moves[i], closed, n))
            {
                addQueue(moves[i], parent, open, closed, n);
            }
        }
    }
}

void cleanup(
    std::priority_queue&lt;Npuzzle::Container*, std::vector&lt;Npuzzle::Container*&gt;, Npuzzle::GreaterThanByHeur&gt;&amp; open,
    std::unordered_map&lt;std::uint_fast64_t, std::uint_fast64_t&gt;&amp; closed)
{
    while (!open.empty())
    {
        delete open.top();
        open.pop();
    }

    closed.clear();
}

void printBoard(
    const std::vector&lt;int&gt; b,
    const int n)
{
    for (auto j = 0; j &lt; n * n; ++j)
    {
        std::cout &lt;&lt; b[j] &lt;&lt; "\t";

        if (j % n == 3)
        {
            std::cout &lt;&lt; std::endl;
        }
    }
}

int print(
    std::uint_fast64_t b,
    std::unordered_map&lt;std::uint_fast64_t, std::uint_fast64_t&gt; closed,
    const int n)
{
    std::vector&lt;std::vector&lt;int&gt;&gt; solution;

    solution.push_back(Npuzzle::decode(b, n));

    for (auto p = closed[b]; p != 0; p = closed[p])
    {
        solution.push_back(Npuzzle::decode(p, n));
    }

    system("CLS");

    auto size = int(solution.size() - 1);

    for (auto i = size; i &gt;= 0; --i)
    {
        printBoard(solution[i], n);

        std::this_thread::sleep_for(std::chrono::milliseconds(25));

        if (i != 0)
        {
            system("CLS");
        }
    }

    return size;
}

void reset(
    std::vector&lt;int&gt;&amp; curr,
    std::priority_queue&lt;Npuzzle::Container*, std::vector&lt;Npuzzle::Container*&gt;, Npuzzle::GreaterThanByHeur&gt;&amp; open,
    std::unordered_map&lt;std::uint_fast64_t, std::uint_fast64_t&gt;&amp; closed,
    const int n)
{
    cleanup(open, closed);

    curr = Npuzzle::createBoard(n);

    addQueue(curr, std::vector&lt;int&gt;(n * n), open, closed, n);
}

void solve(
    std::vector&lt;int&gt;&amp; curr,
    std::priority_queue&lt;Npuzzle::Container*, std::vector&lt;Npuzzle::Container*&gt;, Npuzzle::GreaterThanByHeur&gt;&amp; open,
    std::unordered_map&lt;std::uint_fast64_t, std::uint_fast64_t&gt;&amp; closed,
    const int n)
{
    auto solved = false;

    //Create initial board
    curr = Npuzzle::createBoard(n);
    //curr = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15 };

    addQueue(curr, std::vector&lt;int&gt;(n * n), open, closed, n);

    while (!solved)
    {
        if (open.top()-&gt;heuristic == 0)
        {
            solved = true;
        }
        else
        {
            curr = Npuzzle::decode(open.top()-&gt;code, n);

            delete open.top();
            open.pop();

            addMoves(curr, open, closed, n);
        }
    }
}
</code></pre>

<h2>Npuzzle.h</h2>

<pre><code>#include &lt;assert.h&gt;
#include &lt;cstdint&gt;
#include &lt;numeric&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

namespace Npuzzle
{
    struct Point
    {
        int x, y;
    };

    struct Container
    {
        int heuristic;
        std::uint_fast64_t code;
    };

    struct GreaterThanByHeur
    {
        bool operator()(
            const Container* lhs,
            const Container* rhs)
        {
            return lhs-&gt;heuristic &gt; rhs-&gt;heuristic;
        }
    };

    Point findZero(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        for (int i = 0; i &lt; n * n; ++i)
        {
            if (b[i] == 0)
            {
                return { i % n, i / n };
            }
        }

        return { -1, -1 };
    }

    //Count inversions in board
    int inversions(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        auto count = 0;

        for (auto i = 0; i &lt; n * n - 1; ++i)
        {
            for (int j = i + 1; j &lt; n * n; ++j)
            {
                if (b[i] == 0)
                {
                    if (b[j] &lt; n * n)
                    {
                        ++count;
                    }
                }
                else if (b[j] &lt; b[i])
                {
                    ++count;
                }
            }
        }

        return count;
    }

    bool solvable(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        Point zero = findZero(b, n);
        int count = inversions(b, n);

        //If width is odd and count is even
        if ((n &amp; 1) &amp;&amp; !(count &amp; 1))
        {
            return true;
        }
        //If width is even
        else
        {
            //If zero y pos is odd from bottom, and count is even
            if (((n - zero.y) &amp; 1) &amp;&amp; !(count &amp; 1))
            {
                return true;
            }
            else if (count &amp; 1)
            {
                return true;
            }
        }

        return false;
    }

    std::vector&lt;int&gt; createBoard(
        const int n)
    {
        std::vector&lt;int&gt; board(n * n);
        std::mt19937_64 rng = std::mt19937_64(std::random_device()());

        do
        {
            //Fill vector from 0 to n * n
            std::iota(board.begin(), board.end(), 0);

            //Randomize vector
            std::shuffle(board.begin(), board.end(), rng);

        } while (!solvable(board, n));

        return board;
    }

    std::vector&lt;int&gt; decode(
        std::uint_fast64_t code,
        const int n)
    {
        static std::vector&lt;int&gt; b(n * n);

        for (int i = (n * n) - 1; i &gt;= 0; --i)
        {
            int val = 0;

            //Get first n bits
            val = code &amp; ((1 &lt;&lt; n) - 1);

            //Delete first n bits
            code = code &gt;&gt; n;

            //Save val in board
            b[i] = val;
        }

        return b;
    }

    std::vector&lt;int&gt; swapPos(
        const std::vector&lt;int&gt; b,
        const int n,
        const Point zero,
        const int newPos)
    {
        int oldPos;
        std::vector&lt;int&gt; move(n * n);

        //Calculate old pos
        oldPos = zero.x + (zero.y * n);

        //Copy current board
        for (int i = 0; i &lt; n * n; ++i)
        {
            move[i] = b[i];
        }

        //Swap pos
        move[oldPos] = move[newPos];
        move[newPos] = 0;

        return move;
    }

    std::vector&lt;int&gt; down(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        Point zero = findZero(b, n);
        int newPos = zero.y + 1;

        //Check if move is possible
        if (newPos &gt; (n - 1))
        {
            return std::vector&lt;int&gt;(0);
        }

        //Create new board based on newPos
        return swapPos(b, n, zero, zero.x + (newPos * n));
    }

    std::uint_fast64_t encode(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        std::uint_fast64_t code = 0;

        for (int i = 0; i &lt; n * n; ++i)
        {
            //Set first n bits
            if (i == 0)
            {
                code |= b[i];
            }
            //Set rest of bits
            else
            {
                code = ((code &lt;&lt; n) | b[i]);
            }
        }

        return code;
    }

    int linear(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        auto conflicts = 0;

        std::vector&lt;bool&gt; inCol(n * n);
        std::vector&lt;bool&gt; inRow(n * n);

        for (auto y = 0; y &lt; n; ++y)
        {
            for (auto x = 0; x &lt; n; ++x)
            {
                auto i = y * n + x;

                auto bX = b[i] % n;
                auto bY = b[i] / n;

                inCol[i] = (bX == x);
                inRow[i] = (bY == y);
            }
        }

        for (auto y = 0; y &lt; n; ++y)
        {
            for (auto x = 0; x &lt; n; ++x)
            {
                auto i = y * n + x;

                if (b[i] == 0)
                {
                    continue;
                }

                if (!inCol[i])
                {
                    for (auto z = y; z &lt; n; ++z)
                    {
                        auto j = z * n + x;

                        if (b[j] == 0)
                        {
                            continue;
                        }

                        if (!inCol[j] &amp;&amp; (b[j] &lt; b[i]))
                        {
                            ++conflicts;
                        }
                    }
                }

                if (!inRow[i])
                {
                    for (auto z = x; z &lt; n; ++z)
                    {
                        auto j = z * n + x;

                        if (b[j] == 0)
                        {
                            continue;
                        }

                        if (!inRow[j] &amp;&amp; (b[j] &lt; b[i]))
                        {
                            ++conflicts;
                        }
                    }
                }
            }
        }

        return 2 * conflicts;
    }

    int manhattan(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        int m = 0;

        std::vector&lt;int&gt; solution(n * n);
        std::iota(solution.begin(), solution.end(), 1);

        solution[n * n - 1] = 0;

        //Calculate manhattan distance for each value
        for (int i = 0; i &lt; n * n; ++i)
        {
            if (b[i] != solution[i])
            {
                int bX, bY, x, y;

                //Calculate goal pos
                if (b[i] == 0)
                {
                    bX = n - 1;
                    bY = n - 1;
                }
                else
                {
                    bX = b[i] % n;
                    bY = b[i] / n;
                }

                //Calculate the current pos
                x = i % n;
                y = i / n;

                m += abs(bX - x) + abs(bY - y);
            }
        }

        return m;
    }

    int heuristic(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        return manhattan(b, n) + linear(b, n);
    }

    std::vector&lt;int&gt; left(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        Point zero = findZero(b, n);
        int newPos = zero.x - 1;

        //Check if move is possible
        if (newPos &lt; 0)
        {
            return std::vector&lt;int&gt;(0);
        }

        //Create new board based on newPos
        return swapPos(b, n, zero, newPos + (zero.y * n));
    }

    std::vector&lt;int&gt; right(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        Point zero = findZero(b, n);
        int newPos = zero.x + 1;

        //Check if move is possible
        if (newPos &gt; (n - 1))
        {
            return std::vector&lt;int&gt;(0);
        }

        //Create new board based on newPos
        return swapPos(b, n, zero, newPos + (zero.y * n));
    }

    std::vector&lt;int&gt; up(
        const std::vector&lt;int&gt; b,
        const int n)
    {
        Point zero = findZero(b, n);
        int newPos = zero.y - 1;

        //Check if move is possible
        if (newPos &lt; 0)
        {
            return std::vector&lt;int&gt;(0);
        }

        //Create new board based on newPos
        return swapPos(b, n, zero, zero.x + (newPos * n));
    }
}
</code></pre>
    </div>