<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I’ve flatten the outter <code>switch</code>-block and the inner <code>if-else</code> block, since the nested block is almost identical in all the cases, except the fallback string comparison when the operation is “equal”. 
And, I’ve also moved the <code>compareValues</code> parameter to the last position, so we can take advantage of <code>params</code> array. It is also make it more clear when you use less or greater types of comparison: </p>

<pre><code>CompareCondition("1", ConpareOperation.Less, “1”, “0")
</code></pre>



<pre><code>private bool CompareCondition(string value, CompareOperation operation, params string[] compareValues) =&gt; CompareCondition(value, operation, compareValues.AsEnumerable());
private bool CompareCondition(string value, CompareOperation operation, IEnumerable&lt;string&gt; compareValues)
{
    var parsers = new Dictionary&lt;Type, Func&lt;string, object&gt;&gt;
    {
        [typeof(int)] = x =&gt; int.TryParse(x, out var intResult) ? intResult : default(object),
        [typeof(decimal)] = x =&gt; decimal.TryParse(x, out var decimalResult) ? decimalResult : default(object),
        [typeof(DateTime)] = x =&gt; DateTime.TryParse(x, CultureInfo.InvariantCulture, DateTimeStyles.None, out var dateTimeResult) ? dateTimeResult : default(object),
    };
    var compareOperators = new Dictionary&lt;CompareOperation, Func&lt;Expression, Expression, Expression&gt;&gt;
    {
        [CompareOperation.Equal] = Expression.Equal,
        [CompareOperation.NotEqual] = Expression.NotEqual,
        [CompareOperation.Greater] =  Expression.GreaterThan,
        [CompareOperation.GreaterOrEqual] = Expression.GreaterThanOrEqual,
        [CompareOperation.Less] = Expression.LessThan,
        [CompareOperation.LessOrEqual] = Expression.LessThanOrEqual,
    };

    // determine the type to compare
    var comparable = parsers
        .Select(x =&gt; new { Type = x.Key, Value = x.Value(value), Parser = x.Value })
        .FirstOrDefault(x =&gt; x.Value != null);
    if (comparable == null)
    {
        // perform a string comparison when operation is equal as fallback
        return operation == CompareOperation.Equal
            ? compareValues.Any(x =&gt; x == value)
            : false;
    }

    // building expression: (a,b) =&gt; a __OPERATOR__ b;
    var a = Expression.Parameter(comparable.Type, "a");
    var b = Expression.Parameter(comparable.Type, "b");
    var compareOperator = compareOperators[operation](a, b);
    var compare = Expression.Lambda(compareOperator, a, b).Compile();

    return compareValues
        .Any(x =&gt; comparable.Parser(x) is object result &amp;&amp; (bool)compare.DynamicInvoke(comparable.Value, result));
}
</code></pre>

<p>Note: The <code>a is object x</code> pattern evaluates to false when <code>a</code> is null.</p>
    </div>