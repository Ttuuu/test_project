<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have the right approach of creating two separate forms for your two models involved (<code>User</code> and <code>PlayerProfile</code>) but I think the formset is overkill and not the right tool for the job anyway.</p>

<p>Iâ€™d rather create the <code>ModelForm</code>s more naturally:</p>

<pre><code>class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ('username', 'password')


class PlayerProfileForm(forms.ModelForm):
    class Meta:
        model = PlayerProfile
        fields = ('balance',)
</code></pre>

<p>And glue them together with an ad-hoc "form" along the lines of:</p>

<pre><code>class PlayerUserForm:
    def __init__(self, *args, **kwargs):
        self.user_form = UserForm(*args, **kwargs)
        self.player_form = PlayerProfileForm(*args, **kwargs)

    def is_valid(self):
        # Make sure to **not** short-circuit so as
        # to populate both forms errors, if any. 
        user_valid = self.user_form.is_valid()
        player_valid = self.player_form.is_valid()
        return user_valid and player_valid

    @transaction.atomic
    def save(self):
        user = self.user_form.save()
        player = self.player_form.save(commit=False)
        player.user = user
        player.save()
        return player
</code></pre>

<p>And you can add template helpers for good measure:</p>

<pre><code>    def __str__(self):
        return self.as_table()

    def as_table(self):
        return mark_safe(f'{self.user_form.as_table()}\n{self.player_form.as_table()}')

    def as_ul(self):
        return mark_safe(f'{self.user_form.as_ul()}\n{self.player_form.as_ul()}')

    def as_p(self):
        return mark_safe(f'{self.user_form.as_p()}\n{self.player_form.as_p()}')
</code></pre>

<p>This is untested but should work as a drop-in replacement for your <code>PlayerUserForm</code>.</p>
    </div>