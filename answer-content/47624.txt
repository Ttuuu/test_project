<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>VB6/VBA is a "bulky" language to read - <code>If...End If</code>, <code>Sub...End Sub</code>, <code>While...Wend</code>; compared to <em>curly braces</em> languages (Java, C#, etc.), VB6/VBA code, by the nature of its <em>code block</em> delimiters, makes pretty crowded code, even when written cleanly.</p>

<p>Give it some breathing vertical space:</p>

<pre><code>Public Sub QuickSort(arr As Variant, ByVal left As Integer, ByVal right As Integer)

    'if length is 1, there's nothing to sort:
    If right &lt;= left Or Not IsArray(arr) Then Exit Sub

    'swap pivot it to end. I'm not yet concerned about pivot selection
    Swap arr((left + right) \ 2), arr(right)

    ' include the pivot in case it's the greatest value:
    Dim r As Integer
    r = right 

    Dim l As Integer
    l = left

    ' pivot is at the end:
    Dim p As Variant
    p = arr(right) 

    While l &lt; r

        While arr(l) &lt; p And l &lt; r
            l = l + 1
        Wend

        ' right claims values equal to pivot:
        While arr(r) &gt;= p And l &lt; r 
            r = r - 1
        Wend

        If l &lt;&gt; r Then Swap arr(l), arr(r)

    Wend

    ' only swap if values aren't equal:
    If l &lt;&gt; right Then Swap arr(right), arr(l)

    QuickSort arr, left, l - 1
    QuickSort arr, l + 1, right

End Sub
</code></pre>

<p>Couple points:</p>

<ul>
<li>Unless you have a massive parameters list, keep signatures on a single line.</li>
<li>Method names should be <code>PascalCase</code>.</li>
<li><code>:</code> instruction separator is great for the <em>immediate pane</em>, but should be avoided in actual code - keep it single instruction per line as much as possible.</li>
<li>Place comments just above the code you're commenting, this makes reading more vertically flowing.</li>
<li>I don't think <code>CInt</code> cast/conversion is needed here, you're using the <code>\</code> <em>integer division</em> operator, on two <code>Integer</code> variables - the result <em>has to be</em> an <code>Integer</code>, hence the conversion would be redundant.</li>
<li><code>Call</code> is a relic from ancient, stone-tablet-BASIC versions; dropping it allows you to also drop the parentheses that surround the parameters (<em>not</em> dropping the parentheses wouldn't compile).</li>
<li>@user58697 is correct, the outer <code>While</code> loop could be extracted into its own method.</li>
<li>What happens if <code>arr</code> isn't an array? I know, dumb edge case, but your method takes a <code>Variant</code> (it <em>has</em> to), and that could be literally <em>anything</em>. Guarding against that dumb error is fairly easy: <code>IsArray(arr)</code> must return <code>True</code>.</li>
<li><p>I would avoid chopped-off and single-letter names, especially when they involve a lowercase <code>l</code>:</p>

<ul>
<li><code>arr</code> =&gt; <code>items</code> or <code>values</code></li>
<li><code>p</code> =&gt; <code>pivotValue</code></li>
<li><code>r</code> =&gt; <code>rightIndex</code></li>
<li><code>l</code> =&gt; <code>leftIndex</code></li>
</ul></li>
</ul>
    </div>