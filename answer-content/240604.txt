<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>h()</code> is a poor choice for a function name.  It makes no effort to inform the developer about what exact process it executes.  We are no longer in the digital age where saving keystroke/characters is a valuable pursuit.  This function should be renamed to make its action abundantly clear.</p></li>
<li><p>You should never call the same function on the same data more than once.  You should save the outcome to a variable and access that cached value as many times as needed.  This eliminates needless function calls.</p></li>
<li><p>As a general rule, try to avoid declaring single-use variables.  There are some situations that argue against this advice (like when declaring the variable helps to describe a value that is somewhat cryptic), so this is a grey area.</p></li>
<li><p>Use css styling to manage spacing between elements/text (not <code>&amp;nbsp;</code> and <code>&lt;br&gt;</code>) -- this will keep your script cleaner and easier to fine-tune.</p></li>
<li><p>You have redundant code building your un-ordered lists.  You should also only present photo filtering lists if there are actually list items to go inside of them -- be sure to make this check even if you <em>know</em> that there will be some.</p>

<pre><code>foreach (['category', 'color'] as $listName) {
    $listItems = [];
    foreach (Photograph::find_by_sql("SELECT DISTINCT({$listName}) FROM photographs ORDER BY {$listName}") as $row) {
        $value = h($row-&gt;$listName);
        $listItems[] = '&lt;li class="list-group-item"&gt;
            &lt;div class="form-check"&gt;
                &lt;label class="form-check-label"&gt;
                    &lt;input type="checkbox" class="common_selector ' . $value . '" value="' . $value . '"&gt;' . $value . '
                &lt;/label&gt;
            &lt;/div&gt;
        &lt;/li&gt;';
    }

    if ($listItems) {
        echo '&lt;h5&gt;' . ucfirst($listName) . '&lt;/h5&gt;';
        echo '&lt;ul class="list-group"&gt;' . implode("\n", $listItems) . '&lt;/ul&gt;';
    }
}
</code></pre></li>
<li><p>You should endeavor to move your js and css declaration to external files and simply include them where desired.</p></li>
<li><p>I recommend that declare your php function at the top of your file to keep it out of your markup.</p></li>
<li><p><code>previous_page()</code> can be rewritten as the following because you are performing a falsey check on the return value anyhow.</p>

<pre><code>function previous_page($current_page) {
    return max(0, $current_page - 1);  // return will never be lower than 0
}
</code></pre></li>
<li><p><code>if (previous_page($current_page) != false) {</code> is written more concisely as<br><code>if (previous_page($current_page)) {</code></p></li>
<li><p><code>style='cursor:pointer;'</code> should be moved from inline declarations to an external stylesheet.</p></li>
<li><p>I don't like the single-use declarations of:</p>

<pre><code>var action = 'fetch_data';
var category = get_filter('category');
var color = get_filter('color');
</code></pre>

<p>Just apply those values directly to the <code>data:</code> declaration.</p></li>
<li><p>Instead of using <code>data</code> to describe the response html, perhaps use the term <code>response</code> or <code>responseHTML</code> so make the script more intuitive and avoid confusion.</p></li>
<li><p>If you are going to declare: <code>var page = $(this).attr("id");</code>, (I prefer <code>let</code> over <code>var</code>), then use <code>page</code> everywhere downscript. Asking jquery to refetch <code>$(this).attr("id");</code> is unnecessary work.</p></li>
<li><p>Disconnecting from your database at the end of your script is unnecessary because php is going to do this for you automatically.  There is no benefit to writing it out.  </p></li>
</ul>
    </div>