<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll start off with some possible improvements in the logic.</p>

<p><strong>Firstly</strong>, in <code>Maze::generate</code>, the initialisation of <code>candidates_list</code> could be simplified from</p>

<blockquote>
<pre><code>candidates_list = []
candidates_list.append((0, 0))
</code></pre>
</blockquote>

<p>to</p>

<pre><code>candidates_list = [(0, 0)]
</code></pre>

<p><strong>Secondly</strong>, right on the next line, the condition could be simplified from</p>

<blockquote>
<pre><code>while len(candidates_list) &gt; 0:
</code></pre>
</blockquote>

<p>to</p>

<pre><code>while candidates_list:
</code></pre>

<p>The behaviour is similar: the loop runs while <code>candidates_list</code> contains items. If it is empty, the loop terminates. The same goes for <code>if len(new_candidates) &gt; 0:</code>:</p>

<pre><code>if new_candidates:
</code></pre>

<p><strong>Thirdly</strong>, there are a couple places where you can utilise unpacking. For instance, in <code>Maze::generate</code>, we have</p>

<blockquote>
<pre><code> x = processed[0]
 y = processed[1]
</code></pre>
</blockquote>

<p>This can be written in one-line as</p>

<pre><code>x, y = processed
</code></pre>

<p>In <code>Maze::is_colliding_with_other_tunnels</code>, you can improve readability by unpacking the tuple directly. Instead of</p>

<blockquote>
<pre><code>for offset in self.offsets_to_surrounding_tiles():
    if self.is_populated(x + offset[0], y + offset[1]):
        x_distance_to_parent = x + offset[0] - parent_x
        y_distance_to_parent = y + offset[1] - parent_y
        if abs(x_distance_to_parent) + abs(y_distance_to_parent) &gt; 1:
            return True
return False
</code></pre>
</blockquote>

<p><code>offset</code> can be unpacked into <code>offset_x, offset_y</code>:</p>

<pre><code>for offset_x, offset_y in self.offsets_to_surrounding_tiles():
    if self.is_populated(x + offset_x, y + offset_y):
        x_distance_to_parent = x + offset_x - parent_x
        y_distance_to_parent = y + offset_y - parent_y
        if abs(x_distance_to_parent) + abs(y_distance_to_parent) &gt; 1:
            return True
return False
</code></pre>

<p><sup><em>(This might also be a good opportunity to let your student have a go at rewriting the above into a one-liner using <code>any</code> and a comprehension. Might be a lil' long-winded though. ðŸ¤”)</em></sup></p>

<p>This can also be done in <code>MazeWithWideCorridors::is_colliding_with_other_tunnels</code>.</p>

<p>I think you might also be interested in knowing that the following is possible in <code>Maze::children</code>:</p>

<pre><code>if self.is_safe_to_tunnel(parent_x, parent_y, *up):
    returned.append(up)
</code></pre>

<p><code>*up</code> also does unpacking, but here, unpacks a tuple as arguments into the function. Generally, this can be done when the function accepts arguments from the tuple sequentially. This saves a <em>fair</em> deal of typing.</p>

<p>I actually don't know what the community consensus is on this one â€“ whether it is recommended or not. But it's such a neat Python feature...</p>

<hr>

<p>With regards to <strong>naming</strong>, I would argue that your variables <code>x_distance_to_parent</code> should be named <code>x_displacement_to_parent</code> since they seem to still take into account positive/negative values, implying direction. From a physics perspective, distance is a scalar and doesn't take direction into account.</p>

<p>However, rather than using <code>x_displacement</code>, I'd stick with <code>x_distance</code> as it's more understandable. To be consistent with the previous paragraph, I'd take the absolute value immediately. For instance, in <code>Maze::is_colliding_with_other_tunnels</code>, instead of </p>

<blockquote>
<pre><code>x_distance_to_parent = x + offset[0] - parent_x
y_distance_to_parent = y + offset[1] - parent_y
if abs(x_distance_to_parent) + abs(y_distance_to_parent) &gt; 1:
    return True
</code></pre>
</blockquote>

<p>consider</p>

<pre><code>x_distance_to_parent = abs(x + offset_x - parent_x)
y_distance_to_parent = abs(y + offset_y - parent_y)
if x_distance_to_parent + y_distance_to_parent &gt; 1:
    return True
</code></pre>

<p>This can also be considered in <code>MazeWithWideCorridors::is_colliding_with_other_tunnels</code>.</p>

<hr>

<p>With regards to <strong>style</strong>, PEP 8 recommends two lines right after imports and two lines right before and after class declarations.</p>

<pre><code>import random
from PIL import Image
                                        # &lt;&lt;&lt;    1
                                        # &lt;&lt;&lt;    2    (after imports)
def main():
    # ...
                                        # &lt;&lt;&lt;    1
                                        # &lt;&lt;&lt;    2    (before class)
class Maze:
    # ...

    def inside_image(self, x, y):
        # ...
                                        # &lt;&lt;&lt;    1
                                        # &lt;&lt;&lt;    2    (before/after class)
class MazeWithWideCorridors(Maze):
    # ...
                                        # &lt;&lt;&lt;    1
                                        # &lt;&lt;&lt;    2    (after class)
main()
</code></pre>

<p>This may seem overtly pedantic, but well, it's PEP 8 Â¯\_(ãƒ„)_/Â¯.</p>
    </div>