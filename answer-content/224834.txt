<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Problem Statement</h1>

<h3>Tiered Architecture</h3>

<blockquote>
  <p><em>This database is the first part of the project, I couldn’t really
  create a friendly user interface until the database is working. Due to
  feature creep this database can now handle other kinds of books
  besides science fiction and fantasy.</em></p>
</blockquote>

<p>The most important step when taking on a project as you have, is deciding the <strong>tiered architecture</strong> and which tier is responsible for what. You have decided to make a <a href="https://codereview.stackexchange.com/questions/215431/non-entity-framework-database-interaction-model">WPF application</a> without using an ORM (out of scope for this question), and let the database store most of the business logic. And as you put it, <em><strong>feature creep</strong></em> is an issue you are likely to encounter when maintaining and extending this application.</p>

<h3>Database-driven design</h3>

<blockquote>
  <p><em>There are about 2790 lines of code and comments in this database. The first 240 lines are the data definitions 
  of the tables. There are 1849 lines of stored procedures implementing the insert, update, delete and retrieval 
  stored procedures. The last 701 line of code are unit tests in an attempt to make sure the stored procedures and 
  functions work when I start developing the user interface.</em></p>
</blockquote>

<p>The above statements show how hard it becomes maintaining business logic in the database. You should realise the implications of putting the business logic inside the database.</p>

<ul>
<li>your application depends on the database (what if you want to use a different db provider?)</li>
<li>feature flags, configuration and business parameters need all be addressed in your stored procedures (this is much easier handled in code)</li>
<li>code is much better suited to handle configurable validation rules, data loads depending on external context, state machines, design patterns, managing complex flow, and so on.</li>
</ul>

<h3>Author's intent</h3>

<blockquote>
  <p><em>This is the first relational schema I have designed from scratch. A year ago I wouldn’t have used any stored 
  procedures because I didn’t know about the benefits of using stored procedures.</em></p>
</blockquote>

<p>I wonder what made you decide to use stored procedures. You could update your question with additional information regarding this choice, it won't invalidate my answer. And don't get me wrong, having some stored procedures is fine. I only have questions with implementing all application business logic in stored procedures. Through personal experience, I notice a change from database-driven to application-driven design in the companies I have worked or still do.</p>

<h3>My proposed change in architecture</h3>

<p>I would suggest making the software (a server component) your engine for defining business logic. At the back-end, use an ORM (EF, NHibernate, ..) to communicate to a database. The database should only provide stored procedures for exceptional scenario's where you are unable to map your code using ORM or where you are just not able to meet critical performance, memory, security requirements.</p>

<p>This does not mean your database should be an open, denormalized simple storage facility. You should still consider:</p>

<ul>
<li>creating reader / writer / admin user accounts for the software to work with</li>
<li>proper normalisation of tables; denormalise only where benefits are clear (like reporting tables, views)</li>
<li>smart use of indexes</li>
</ul>

<p>If you can't change your design, or just feel good with the current architecture, that's fine. This does not influence the remainder of this review :)</p>

<p>I also wouldn't worry about data integrity when removing stored procedures. It is up to the business flow in the code to use Transactions to enforce data integrity.</p>

<hr>

<h1>Review</h1>

<p>The first thing I notice in your script is commented credentials for database users. I am not sure whether this is dummy data, but you should <strong>never include sensitive user data</strong> in a script.</p>

<h3>General Guidelines</h3>

<ul>
<li>Don't restrict data types too much:  <code>LastName VARCHAR(20) NOT NULL</code> this could get tricky if carry both your name as your spouse's name. What's wrong with <code>VARCHAR(128)</code>?</li>
<li>Don't create combined primary keys when only one field is the primary key and the others are a (combined) <a href="https://en.wikipedia.org/wiki/Surrogate_key" rel="nofollow noreferrer">surrogate</a> unique key: <code>PRIMARY KEY (idBookCategories, CategoryName)</code> -&gt; the PK is <code>idBookCategories</code> and <code>CategoryName</code> is a unique key. All your tables abuse the PK like this.</li>
<li>Don't use attributes that appear unique to be part of a primary key: <code>PRIMARY KEY (idAuthors, LastName, FirstName)</code> -&gt; <code>LastName</code>,<code>FirstName</code> should not be primary key, nor should it be unique.</li>
<li>Don't use the type of constraint in the name of a field; instead favor the same name as the referenced field: <code>CategoryFKbi</code> -&gt; <code>idBookCategories</code> not because of the camel casing, but because of using the same name as the referenced field; and also, <a href="https://stackoverflow.com/questions/5647650/database-column-naming-for-foreign-key">FK should not be part of a column name</a>. </li>
</ul>

<h3>Index Guide</h3>

<ul>
<li>You have created indexes eagerly, but realize that each index has a performance impact on insert, update and delete statements. Try to avoid having too much indexes on large tables that get lots of crud operations.</li>
<li>There is also a memory impact for each index. Since your database won't grow too much, this should not become a problem. Unless you hyper-optimize your database with indexes all over the place :)</li>
<li>I would suggest the opposite and only make the least amount of indexes.

<ul>
<li>Primary and foreign keys</li>
<li>Fields that are part of a join in your top 5 queries that require high performance</li>
</ul></li>
<li>Be agile, you can always add indexes later on, once your database grows and you get some analytics information about crud operations.</li>
</ul>

<h3>Normalisation</h3>

<ul>
<li>Your tables seem reasonably normalised. No point in partitioning some of the tables to meet NF5 or something like that. The important part is that each of the attributes in your tables depend on the primary key (well, what should be the PK after you refactor them to take out surrogate keys)</li>
<li>Once you will implement reporting features, you will probably want to create some views, or maybe store certain data in de-normalised tables. But this is not yet in scope.</li>
</ul>

<p>The problem with the incorrectly combined primary keys is as follows: <code>PK (id, last name, first name)</code>: 2 authors with the same first and last name are not allowed by the system.</p>

<ul>
<li>John Smith [id= 1]</li>
<li>John Smith [id= 794]</li>
</ul>

<p>There is no reason not to allow duplicate names. Entities, such as author, are identified by their <em>id</em>, not their name combo. In the application you could always show John Smith vs John  Smith (2).</p>

<blockquote>
  <p><em>This database uses the author title and format together as the
  identity of the book.</em></p>
</blockquote>

<p>Would book revision n° be an interesting additional field (and part of PK) for defining a unique book?</p>
    </div>