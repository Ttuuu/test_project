<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, this is a quite good a code for someone "relatively new to coding". This is definitely above average. There are no critical faults, just some misconceptions. Quite common misconceptions I would say, so let's sort them out. </p>

<h3>The "BAD CHARACTERS" misconception.</h3>

<p>This is a nasty one.<br>
In reality, there is no such thing as "bad characters", let alone your routine has very little to do with them, rather spoiling the input data. The whole test_input function is a cargo cult code snippet that bad tutorials copy from each other. </p>

<p>See my <a href="https://security.stackexchange.com/a/200321/40115">other answer</a> regarding a similar function.</p>

<p>On a side note, the <code>if(!empty($data) || $data !== null)</code> is a collection of misplaced and repeated operators alone.</p>

<ul>
<li>using empty() for a variable that is deliberately set is useless. you only use this function if there is a possibility for a tested variable to be not set. Which is not the case, you are defining it right in the function definition. so you can use just <code>if(!$data)</code> instead.</li>
<li>the second condition is useless as well, because empty() (as well as !$data) would test for the null already</li>
<li>checking for the emptiness before trim is a bit ahead of time. What if after trim() it will become an empty string?</li>
</ul>

<p>so in the end you can safely just use trim() instead of test_input()</p>

<h3>WET AKA "Write Everything Twice" code.</h3>

<p>Well, actually you repeat the code to report an error not twice but a dozen times. </p>

<p>Every time you see a repetition, think of creating a function. </p>

<pre><code>function error($message, $location) {
    $_SESSION['ERROR'] = $message;
    header("Location: $location");
    exit();
}
</code></pre>

<p>then you can make it in one line instead of three</p>

<pre><code>error ("Invalid Email", "/dashboard/register.php");
</code></pre>

<p>That's just for sake of demonstration though as you won't likely be using this function at all, as we will see a bit later</p>

<p>The same goes for mysqli interaction. As you may noticed, it is quite laborious yet extremely repetitive. Why not to encapsulate all the repeated code into a function again? I have such a function of my own, a <a href="https://phpdelusions.net/mysqli/simple" rel="nofollow noreferrer">mysqli helper function</a>. Just compare the amount of code</p>

<pre><code>    $sql = "SELECT user_name,user_email FROM _CPAN_users WHERE user_name = ? OR user_email = ?;";
    $stmt = mysqli_prepare($con, $sql);
    mysqli_stmt_bind_param($stmt, "ss", $username,$useremail);
    mysqli_stmt_execute($stmt);
    mysqli_stmt_store_result($stmt);
    if(mysqli_stmt_num_rows($stmt) === 0){
        mysqli_stmt_free_result($stmt);
        mysqli_stmt_close($stmt);
</code></pre>

<p>vs.</p>

<pre><code>    $sql = "SELECT 1 FROM _CPAN_users WHERE user_name = ? OR user_email = ?";
    $stmt = prepared_query($con, $sql, [$username,$useremail]);
    if(!$stmt-&gt;get_result()-&gt;fetch_row()){
</code></pre>

<p>The idea is to write only the meaningful code, encapsulating all the reprtitions into a function.</p>

<h3>Torturous error reporting.</h3>

<p>To be honest, the way this form is reporting errors is more like a torture, letting a user to fix only one error at a time. It's like cutting a dog's tail in chunks. Why not to verify <em>all inputs</em> at once and then give a user all error messages at once as well?</p>

<p>Instead of your current approach, better collect all errors into array, and then verify whether this array is empty or not. If not - then process the user data. If yes, then store it in a session and do your redirect. </p>

<pre><code>$errors = [];
if(!filter_var($useremail, FILTER_VALIDATE_EMAIL)){
    $errors[] = "Invalid Email";
}
if(!preg_match("/^[\w\d]{3,16}$/", $username)){
    $errors[] =  = "Invalid Username";
}
</code></pre>

<p>and so on. and then</p>

<pre><code>if ($errors) {
    $_SESSION['ERROR'] = $errors;
    header("Location: /dashboard/register.php");
    exit();
}
</code></pre>

<h3>Program errors are not user errors.</h3>

<p>Honestly, how do you think, what a site user is supposed to do when given an error message like <code>"Error : prepare,select"</code>? How do you suppose to get informed of this error (in order to be able to fix it)?</p>

<p>That's a completely different kind of errors that has nothing to do with a site user but belongs to a programmer only. And thus have to be dealt with using a completely different approach. You can check my article on the <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">PHP error reporting</a> basics.</p>

<p>In a nutshell, you don't check every operation's result manually but make PHP to raise errors by itself. Then handle them all in a single place.</p>

<h3>The code</h3>

<p>As a result you will have a pretty neat piece of code (as a bonus you will get rid of this disgusting "right shift" when your code eventually moves off screen due to all these conditions) like this:</p>

<pre><code>if(isset($_POST['register']))
{
    $useremail  = trim($_POST['reg_email']);
    ...


    $errors = [];
    if(!filter_var($useremail, FILTER_VALIDATE_EMAIL)){
        $errors[] = "Invalid Email";
    }
    if(!preg_match("/^[\w\d]{3,16}$/", $username)){
        $errors[] =  = "Invalid Username";
    }

    ...


    $sql = "SELECT 1 FROM _CPAN_users WHERE user_name = ? OR user_email = ?";
    $stmt = prepared_query($con, $sql, [$username,$useremail]);
    if(!$stmt-&gt;get_result()-&gt;fetch_row()){
        $errors[] =  = "Username or email already taken";
    }

    if ($errors) {
        $_SESSION['ERROR'] = $errors;
        header("Location: /dashboard/register.php");
        exit();
    }

    $hash = password_hash($userpass, PASSWORD_DEFAULT);
    $token = bin2hex(openssl_random_pseudo_bytes(8));

    $sql = "INSERT INTO _CPAN_users(user_name,user_email,user_pass,user_registered,user_token) VALUES (?, ?, ?, ?, ?);";
    $stmt = prepared_query($con, $sql, [$username,$useremail,$hash,$date,$token]);
    $usernum = mysqli_stmt_insert_id($stmt);

    $sql = "INSERT INTO _CPAN_usersmeta(meta_user,meta_fname,meta_lname,meta_phone,meta_gender) VALUES (?, ?, ?, ?, ?);";
    $stmt = prepared_query($con, $sql, [$usernum,$userfirst,$userlast,$userphone,$usergender]);

    // email stuff goes on

}
// END REGISTER
</code></pre>
    </div>