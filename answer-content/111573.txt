<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <a href="https://developer.apple.com/library/ios//documentation/Swift/Reference/Swift_Hashable_Protocol/index.html#//apple_ref/swift/intfp/Hashable/s:vPSs8Hashable9hashValueSi" rel="nofollow noreferrer"><code>Hashable</code> protocol</a> has only one single requirement:</p>

<blockquote>
  <p><strong>Axiom:</strong> <code>x == y</code> implies <code>x.hashValue == y.hashValue</code>.</p>
</blockquote>

<p>So let's start with your implementation of <code>==</code>:</p>

<blockquote>
<pre><code>// Hashable also needs struct to conform to Equatable protocol
func ==(left: ScalarString, right: ScalarString) -&gt; Bool {

    if left.length != right.length {
        return false
    }

    for var i = 0; i &lt; left.length; ++i {
        if left.charAt(i) != right.charAt(i) {
            return false
        }
    }

    return true
}
</code></pre>
</blockquote>

<p>Looking up the definitions of <code>length</code> and <code>charAt()</code> it is clear
that here simply the <code>left.scalarArray</code> and <code>right.scalarArray</code>
arrays are checked for equality. So the operator can equivalently
but simpler be implemented as</p>

<pre><code>// Hashable also needs struct to conform to Equatable protocol
func ==(left: ScalarString, right: ScalarString) -&gt; Bool {
    return left.scalarArray == right.scalarArray
}
</code></pre>

<p>From this representation it becomes obvious that your <code>hashValue</code>
implementation is <em>correct</em>: It is computed from the <code>scalarArray</code>
property, so equal objects have the same hash value.</p>

<p>The <code>hashValue</code> computed property can be simplified using
<code>reduce()</code>, note also that for a read-only property, you need
not put the getter method inside a <code>get { }</code> block:</p>

<pre><code>// hashValue (to implement Hashable protocol)
var hashValue: Int {
    return self.scalarArray.reduce(5381) {
        ($0 &lt;&lt; 5) &amp;+ $0 &amp;+ Int($1)
    }
}
</code></pre>

<p>A different question would be how "good" the hash is.
The Swift language does not make any requirements here. Always
returning <code>0</code> would be valid, but of course ineffective when
building large dictionaries.</p>

<p>It may be interesting in this context that the hash value of 
the Foundation type <code>NSArray</code> is simply the number of elements,
regardless of the contents.</p>

<p>In your case, the DJB hash function is a well-known hash method
for strings, so I do not see any reasons not to use it.</p>

<hr>

<p><strong>Update:</strong> As of <strong>Swift 4.1,</strong> the compiler can synthesize 
<code>Equatable</code> and <code>Hashable</code> for types conformance automatically, if all 
members conform to Equatable/Hashable (<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md" rel="nofollow noreferrer">SE0185</a>). And as of <strong>Swift 4.2,</strong>
a high-quality hash combiner is built-in into the Swift standard
library (<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md" rel="nofollow noreferrer">SE-0206</a>).</p>

<p>Therefore there is no need anymore to define your own hashing function,
it suffices to declare the conformance:</p>

<pre><code>struct ScalarString: Hashable, ... {

    private var scalarArray: [UInt32] = []

    // ...
}
</code></pre>
    </div>