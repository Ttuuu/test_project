<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've hardly done any Haskell - so it's probably a positive thing that I can easily understand your code - but since you've no answer yet, I'll have a go. Anyway, take everything I say with a pinch of salt, and it'll just be surface stuff since I don't have experience to draw on.</p>

<hr>

<p>Currently you code uses a linear-time search to determine if an element is in the list of closed elements. Since <code>Ord</code> is implemented for tuples (e.g. <code>(Int, Int)</code>) you can use a <code>Data.Set</code> instead, which will provide logarithmic-time lookup, making your code more efficient on large problems. I'd also consider making <code>meta</code> a <code>Data.Map</code> so that you can efficiently query it as well, and will allow you to dispense with that <code>head points</code> in <code>constructPath</code>.</p>

<hr>

<p>Though you have attempted to implement a graph-search, your <code>closed</code> system is inadequate, as it still allows the queuing of elements multiple times. Consider the case where the same node is queued by two different other nodes before it is itself expanded (this would occur any time you had a square of 4 cells, starting in one the cell diagonally opposite will be queued twice). The easiest way to solve this is probably to append all the neighbours to <code>closed</code>, and add <code>start</code> to <code>closed</code> from the outset.</p>

<hr>

<p>I don't know how people do things normally in Haskell, but I hate tuples with a passion (when they leak outside functions), and would replace your coordinate tuples with a dedicated data type, e.g.</p>

<pre><code>data Position = Pos { x :: Int, y :: Int } deriving (Eq, Ord, Show)
</code></pre>

<p>This makes the meaning of the 2 elements clear, and ensures that only values intended to be interpreted as a position can be used. It also means you can define meaningful instances over your new type without infecting code which uses tuples.</p>

<hr>

<p>You are mixing usage for <code>i j</code> and <code>x y</code>; I'd stick with just one of them as best you can, and try to think of something better than <code>a b</code> for your temporaries (<code>dx dy</code> for offsets?) You don't need the coordinates in <code>constructPath</code>; I think something like this would be clearer, though I'll concede that it's no longer entirely clear that this is operating on positions (but it's also a more generic piece of code, meaning it will work for <code>(x, y)</code> or <code>Pos x y</code>):</p>

<pre><code>constructPath position meta route
    | (length points) &gt; 0 = (constructPath (head points) meta (position:route))
    | otherwise = position:route
    where points = [to | (from,to) &lt;- meta, from == position]
</code></pre>

<p>(I have also here swapped the concatenation around, which means the route will start at <code>start</code> and end at <code>end</code>, which is what I'd normally expect from a route-finder)</p>

<hr>

<p>Ideally your code wouldn't contain magic numbers like <code>0</code> and <code>2</code>; much better to create a union or type-class for the types of cells in the grid, e.g.</p>

<pre><code>data Cell = Wall | NotWall deriving (Eq)
</code></pre>

<p><code>NotWall</code> isn't a great name, but it's better than <code>2</code>, and will make the intention of the filtering code in <code>getNeighborNode</code> (should that be <code>getNeighborNodes</code>?) much clearer.</p>

<hr>

<p>You can provide a much nicer and more useful API by passing the <code>maze</code> and <code>end</code> in as parameters along with <code>start</code>, and providing a convenience method which calls <code>bfsSolver</code> with the appropriate initial conditions, e.g.</p>

<pre><code>bfs start = bfsSolver [start] [] []
</code></pre>

<p>It's so much harder to misuse, and  your consumers would thank you for it.</p>
    </div>