<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Be a bit more consistent formatting the code</h1>

<p>You are not very consistent with spaces around operators in function declarations, for example:</p>

<pre><code>auto operator--() noexcept -&gt; Pointer&amp; { return (*this -= 1); }
auto operator++(int) const-&gt;Pointer = delete;
</code></pre>

<p>Also, I recommend that even for one-liner functions, you put the body of the function on a separate line. If the classes were split out into their own source and header files, then it would help when looking at the declaration of the class in the header file, because you can then more easily see which member functions are merely declared, or whether their definition is available in-line.</p>

<h1>Use more whitespace to clarify the structure of your code</h1>

<p>Use empty lines to separate sections inside functions from each other visually, so it is easier to see the structure of your code. For example, to make it easier to distinguish initialization, the main loop and the return statement in <code>skipLoop()</code>:</p>

<pre><code>template &lt;typename BidirIter&gt;
[[nodiscard]] auto skipLoop(BidirIter p) noexcept {
    assert(*p == Command::LoopBegin);
    std::size_t bracketCount = 0;

    do {
        if (*p == Command::LoopBegin)
            ++bracketCount;
        else if (*p == Command::LoopEnd)
            --bracketCount;

        ++p;
    } while (bracketCount != 0);

    return p - 1;
}
</code></pre>

<h1>Avoid <code>const</code>-casting</h1>

<p>You don't need a <code>const</code> version of <code>operator*()</code>. The following should be enough:</p>

<pre><code>[[nodiscard]] auto operator*() &amp; -&gt; storage_type::value_type&amp; {
    assert(mem_.size() &gt; index_);
    return mem_[index_];
}
</code></pre>

<p>This avoids the complicated <code>const</code>-casting that is going on. If you really need <code>const Pointer</code>s in the future, I would just write two copies of this function without any casts.</p>

<h1>Safe checking of integer overflow</h1>

<p>You have the following check in <code>operator-=()</code>:</p>

<pre><code>assert(index_ - c &lt; index_);
</code></pre>

<p>Where both <code>index_</code> and <code>c</code> are of type <code>size_type</code>. This works for <code>storage_type = std::deque&lt;char&gt;</code>, since its <code>std::dequeue::size_type</code> is guaranteed to be an <code>unsigned</code> integer type. However, assuming that you want this code to be generic enough so you can safely use any other container, you should not make this assumption.</p>

<p>If <code>size_type</code> were a <code>signed</code> integer type, then since signed integer wraparound is undefined behaviour in C++, the compiler is free to assume that wraparound never happens, and so it will likely optimize away this test. The proper way to test this is:</p>

<pre><code>assert(c &gt; 0 &amp;&amp; c &lt;= index_);
</code></pre>

<p>Also note that you have no matching assertion in <code>operator+=()</code>.</p>

<h1>Consider using <code>enum class</code></h1>

<p>Make <code>ActionableCommands</code> an <code>enum class</code>. Yes, this will require a lot more <code>static_cast</code>ing, but it results in safer code. The compiler can warn if you miss a case in <code>switch</code>-statements, and you can't accidentily have something that is not a command implicitly converted to one.</p>

<h1>Split <code>operation&lt;&gt;()</code> in separate functions</h1>

<p>I don't see any good reason for a function <code>operation()</code> that is templated on a constant, and then does something completely different depending on that constant. Just make two functions, <code>operation_plus()</code> and <code>operation_minus()</code>. But:</p>

<h1>Don't hide potentially unsafe <code>static_cast</code>s</h1>

<p>The sole reason for <code>operation&lt;&gt;()</code> seems to be to do a <code>static_cast</code> and to tell the compiler to ignore potential unsafe behavior. It would be better if you could just write the following in <code>interpret()</code>:</p>

<pre><code>case Command::CellVarIncr:
    *p += count;
    break;
case Command::CellVarDecr:
    *p -= count;
    break;
</code></pre>

<p>And if the compiler ever warns, find a way to fix the code instead of disabling the warnings.</p>

<h1>Check for read errors when reading from a file</h1>

<p>Even if you succesfully opened a <code>std::ifstream</code>, there can be an error later on while reading from the file. So be sure to check its state after reading in the source code, using <code>if (f.fail()) { /* handle error */ }</code>.</p>

<h1>Don't overengineer</h1>

<p>This might be a subjective thing, but I feel that you are overengineering your code. If you were implementing a library, a lot of the templating and attributes would certainly be justified, but if you are just writing an executable that parses and executes Brainfuck code, it's a bit of a wasted effort. <a href="https://en.wikipedia.org/wiki/KISS_principle" rel="nofollow noreferrer">KISS</a> and <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a>.</p>
    </div>