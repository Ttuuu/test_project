<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Have you learned how to make objects in Python?  Typically when you have a GUI, you want to have a class in charge of displaying all the GUI pieces, and it has reference to an object such as a <code>Stopwatch</code> that takes care of all of the logic.  Stopwatch class would look something like this:</p>

<pre><code>import time

class Stopwatch:
    def __init__(self):
        self.start_time = 0
        self.laps = []

    def start(self):
        # Implement your starting of the timer code here
        self.start_time = time.time()

    def lap(self):
        # Implement your lapping logic
        lap = time.time()
        self.laps.appen(lap)

    def stop(self):
        # Implement your stop timer logic
        elapsed = time.time() - self.start_time

    def reset(self):
        # Implement your watch reset logic here
        self.start_time = 0

    def display_time(self):
        # Return the time to display on the GUI
        elapsed = time.time() - self.start_time
        # Figure out how to break the time into hour:minute:second
        # The time class might even have convenience functions for this sort of thing, look up the documentation
        display = elapsed   # after you made it look nice
        return display

</code></pre>

<p>Then in the GUI code you can make a Stopwatch object and let it take care of the messy work of saving times and doing math with them.  The GUI class is just concerned with showing stuff the right way.  Might look something like (minus positioning all the GUI components):</p>

<pre><code># GUI
root = Tk()
root.configure(background=("black"))
root.title("stopwatch")
root.geometry("1000x800")

stopwatch = Stopwatch()

def create_label(text,_x,_y):
    label = Label(root, text=text,fg='white', bg="black",font=("default",10,"bold"))
    label.place(x=_x,y=_y,width=100,height=45)

def setup():
    pass
    # Create all of the GUI components and build all the visuals

def start():
    stopwatch.start()   # let it do the logical work
    # do your GUI updates
    create_label(stopwatch.display_time())
    stop_button.place() 

def stop():
    stopwatch.stop() # Logic and math here
    # Do GUI updates for stop
    create_label(stopwatch.display_time())

def clear():
    stopwatch.reset()  # Logic again handled in the Stopwatch class
    # Clean up GUI components

def lap():
    # The Stopwatch class can keep a list of all lap times and make your life easier
    stopwatch.lap()  
    # Next update the GUI
    create_label(stopwatch.display_time())

# Good form to have all the logic run inside functions 
#instead of hanging around to be accidentally executed
if __name__ == "__main__":
    setup()
    root.mainloop()
</code></pre>

<p>It will clean up your code and make it easier for you to make changes.  The sooner you can learn how to use Objects, the easier your life will become, no matter the language!  I leave it up to you to Google the best tutorials on Python objects.</p>

<p>Finally, if you are confused on where Stopwatch class should go, best practice would be to create a file called "stopwatch.py" and paste the Stopwatch class in that file.  Then in your main file that is running the code, import that stopwatch by calling <code>from stopwatch import Stopwatch</code>.  As long as the stopwatch.py file is right next to your main file, it should be able to import it.</p>
    </div>