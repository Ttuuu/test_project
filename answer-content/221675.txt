<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are few redundancies, both time and memory wise.</p>

<ul>
<li><p>You don't need to maintain an entire <code>visited</code> set. It is only necessary for a general graph. For the grid, the wave computed at the previous iteration serves equally good.</p></li>
<li><p>Upon completion of <code>bfs_next</code>, both <code>wave</code> and <code>bfs_que</code> contain the same set of points. You don't need to update <code>wave</code> in the loop. Do <code>wave = set(bfs_que)</code> once, after the loop terminates. Since <code>set</code> is a built-in primitive, this should run faster.</p></li>
<li><p>I am not sure that <code>dequeue</code> is a right tool. The <code>for _ in range(size)</code> loop effectively drains it every time, and there is no need to store the new wavefront in the same structure with the old one. Consider using two lists instead.</p></li>
</ul>

<p>Also, for the clarity of the algorithm, I'd seriously consider reworking <code>bfs_next</code> into a generator, <code>yield</code>ing the next wavefront.</p>

<hr>

<p>All that said, I am not convinced that <code>len(wave) &gt; len(blocked)</code> means escape. In fact, correct me if I am wrong, when 9 blockers cut off the corner</p>

<pre><code>   |*
   | *
   |  *
   |  3*
   | 323*
   |32123*
   |210123*
   |32123  *
   | 323    *
   +----------
</code></pre>

<p>the length of the third wavefront is 10. However, there is no escape.</p>
    </div>