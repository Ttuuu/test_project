<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all there is not much to comment. I like the iterative mechanism with the stack. Trying other collections (linked list, dictionary, hashset etc.) doesn't seem to improve the performance.</p>

<p>One could argue that it would be nice to have the partition part in a dedicated function to improve readability, but again the algorithm isn't that hard to understand.</p>

<p>The really improvement of performance comes from the use of <code>InsertionSort()</code> when the range is smaller than 31 - and that magic number seems to be the right limit. And Insertion Sort seems to be the right choice over other simple algorithms like Selection Sort.</p>

<p>The performance gain from <code>SampleMedian()</code> is little or absent for smaller data sets, but is significant for larger (&gt; 10000) - compared to let it return <code>values[startIndex]</code> or <code>values[startIndex + (endIndex - startIndex) / 2]</code>.</p>

<p>All in all a well designed algorithm optimized in respect to performance.</p>

<hr>

<p>A minor thing in <code>SampleMedian()</code>:</p>

<p>I don't like:</p>

<pre><code>if (0 &gt; comparer.Compare(values[right], values[left]))
</code></pre>

<p>but rather: </p>

<pre><code>if (comparer.Compare(values[right], values[left]) &lt; 0)
</code></pre>

<p>but that's a matter of habit.</p>

<hr>

<p>Of course you should check if the arguments are valid (<code>values != null</code>, <code>startIndex &lt; endIndex</code> etc.)</p>
    </div>