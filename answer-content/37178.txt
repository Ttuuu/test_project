<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not possible to avoid undefined behaviour by testing for it after the fact! If the addition overflows then there is already undefined behaviour here:</p>

<pre><code>sum = a + b;
</code></pre>

<p>so attempting to test afterwards is too late. You have to test for possible overflow <em>before</em> you do a signed addition. (If you're puzzled by this, read Dietz et al. (2012), "<a href="http://www.cs.utah.edu/~regehr/papers/overflow12.pdf" rel="noreferrer">Understanding Integer Overï¬‚ow in C/C++</a>". Or even you're not puzzled: it's an excellent paper!)</p>

<p>If it were me, I'd do something like this:</p>

<pre><code>#include &lt;limits.h&gt;

int safe_add(int a, int b) {
    if (a &gt; 0 &amp;&amp; b &gt; INT_MAX - a) {
        /* handle overflow */
    } else if (a &lt; 0 &amp;&amp; b &lt; INT_MIN - a) {
        /* handle underflow */
    }
    return a + b;
}
</code></pre>

<p>but I'm not entirely sure what the point of having separate cases for overflow and underflow is.</p>

<p>I also use Clang's <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation" rel="noreferrer"><code>-fsanitize=undefined</code></a> when building for test.</p>
    </div>