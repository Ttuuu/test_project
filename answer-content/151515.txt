<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First a stylistic note: you should always use <strong><em>at least 2 spaces of indentation</em></strong> for code; 1 space makes it very difficult to read nested statements in particular. PHP most often uses 4 spaces for indent.</p>

<hr>

<p>Your regular expressions wouldn't need comments to explain them if you gave them meaningful names. </p>

<blockquote>
<pre><code>$password_filter1 = '/(?=.*[a-zA-Z0-9]{6})/m';  //Password contains more then 6 char
$password_filter2 = '/(?=.*[A-Z])/m';           //Capital letter
$password_filter3 = '/(?=.*\d)/m';              //A digit
</code></pre>
</blockquote>

<p>There is also no need for <code>m</code> multiline flag for a password, since passwords shouldn't accept any newline characters.</p>

<p>Compare to:</p>

<pre><code>$has_at_least_6_chars = '/(?=.*[a-zA-Z0-9]{6})/';
$has_a_capital_letter = '/(?=.*[A-Z])/'; 
$has_a_digit = '/(?=.*\d)/'; 
</code></pre>

<p>You may also consider making them into small functions so they are reusable elsewhere in the code, and if you needed to change them later you would just change them in one place.</p>

<pre><code>function has_a_capital_letter($str) {
    return preg_match('/(?=.*[A-Z])/', $str);
}

//...

if (!has_a_capital_letter($password)) {
    $password_error = "Your password must have at least 1 capital letter";
}
</code></pre>

<hr>

<p>There is no real value in nesting multiple <code>if/else</code> statements inside each other like this, when a simple sequence of <code>if/elseif/else</code> will work just as good. Nesting like that with even simple conditions makes the code quite hard to read, in fact. Nesting like this with more complex operations could lead to serious performance bottlenecks as it cannot break early as easily. </p>

<p>It's also simpler to test for the existence of conditions instead of the lack of them, and just break out of the conditionals as soon as a condition is met.</p>

<p>This is much simpler and cleaner:</p>

<pre><code>if (empty($password &amp; $confirm_password)) { 
    $password_error = "You must enter a password";
}
elseif ($password !== $confirm_password) {
    $password_error = "The passwords do not match";
}
elseif (!preg_match($has_at_least_6_chars, $password)) {
    $password_error = "Your password must be at least 6 characters long";
}
elseif (!preg_match($has_a_capital_letter, $password)) {
    $password_error = "Your password must have at least 1 capital letter";
}
elseif (!preg_match($has_a_digit, $password)) {
    $password_error = "Your password must contain at least 1 number";
}
else {
    //If everything is true do this
}
</code></pre>

<hr>

<p>By the way, I think there is a problem with <code>$has_at_least_6_chars = '/(?=.*[a-zA-Z0-9]{6})/m'</code> in that it doesn't truly check for 6 characters, it checks for 6 letters and/or numbers. According to the way your error messages are written, this should be a perfectly valid entry meeting all conditions:</p>

<pre><code>$password = "Hell0!";
$confirm_password = "Hell0!";
</code></pre>

<p>Yet your code returns <em>"Your password must be at least 6 characters long"</em> (which of course it is, except that your regular expression removes the <code>!</code> and all other non-alphanumeric characters). It would be much simpler (and more accurate) to use the built-in <code>strlen()</code> PHP function.</p>

<pre><code>elseif (strlen($password) &lt; 6) {
    $password_error = "Your password must be at least 6 characters long";
}
</code></pre>

<p>That is, unless you have requirements that forbid non-alphanumeric characters, which I think would be a terrible idea, since many people use them to make for stronger passwords that are harder to break through brute force.</p>
    </div>