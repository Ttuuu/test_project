<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>I wouldn't use strings at all. I would write to a stream.</strong></p>

<p>If wished, I would convert the stream to a string.</p>

<pre><code>(defun d20 () (+ 1 (random 19)))
</code></pre>

<p><code>initlist</code> can be written more compact:</p>

<pre><code>(defun initlist (specs)
  (sort (loop for (a b) in specs collect (list a (+ b (d20))))
        #'&gt; :key #'second))
</code></pre>

<p>Now we pass a stream to <code>htmlinitlist</code> and write the contents to the stream:</p>

<pre><code>(defun htmlinitlist (specs stream)
  (write-string "&lt;table&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;" stream)
  (loop for (a b) in (initlist specs) do 
        (format stream
                "&lt;tr&gt;&lt;td&gt;~A&lt;/td&gt;&lt;td&gt;~A&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;"
                a b))
  (write-string "&lt;/table&gt;" stream))
</code></pre>

<p>If we want to get a string from a stream, we can use <code>with-output-to-string</code>. This binds a stream variable, which we can use and pass around...</p>

<pre><code>(defun htmlinitlists (specs count)
  (with-output-to-string (stream)
    (write-char #\space stream)
    (loop repeat (1+ count) do (htmlinitlist specs stream))))
</code></pre>

<p>Alternate version of <code>htmlinitlist</code> using only one <code>FORMAT</code> call:</p>

<pre><code>(defun htmlinitlist (specs stream)
  (format stream
          "&lt;table&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;~
           ~{&lt;tr&gt;&lt;td&gt;~A&lt;/td&gt;&lt;td&gt;~A&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;~}~
           &lt;/table&gt;"
          (loop for (a b) in (initlist specs) collect a collect b)))
</code></pre>

<p><strong>Benefit</strong></p>

<p>All the various string operations (which are creating lots of intermediate strings which are immediately garbage) have been replaced with the usual output functions and a stream.</p>
    </div>