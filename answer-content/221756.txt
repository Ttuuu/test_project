<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>type(x) == y</code> is unidiomatic, and prone to errors. Use <code>isinstance(x, y)</code> instead.</li>
<li>Your variable names aren't great. <code>k</code>, <code>kk</code>, <code>kkk</code>, <code>vv</code>.</li>
<li>You can simplify changing the data. <code>data[data.index(k)] == k</code>.</li>
<li>You can simplify <code>kkk[list(vv[0].keys())[0]]</code> to <code>list(kkk.values())[0]</code>.</li>
<li>You can simplify <code>set([...])</code> with a set comprehension <code>{...}</code>.</li>
<li>Your function looks like a hack. I wouldn't want this to reach production.</li>
</ul>

<pre><code>def clean_sql_json(x):
    datas = json.loads(x)

    for data in datas:
        for key, value in data.items():
            if (isinstance(value, list)
                and isinstance(value[0], dict)
                and len(value[0]) == 1
            ):
                data[key] = list({
                    list(item.values())[0]
                    for item in value
                })

    return datas
</code></pre>

<p>The way I'd further improve this is:</p>

<ol>
<li>Create a wrapper that eased walking the JSON tree.</li>
<li>Walk the tree. When a list is found check if <em>all</em> it's children are dictionaries with one item.</li>
<li>Reduce the dictionaries, like you are now.</li>
</ol>

<p>This would have the benefit that it can work on any and all values you give it. However it would be overkill if this is the only time you are doing this.</p>

<blockquote>
  <p>I'm a little concerned about the Python. Is it safe to modify and return data on the fly like this?</p>
</blockquote>

<p>Yes it's safe to do this, as you create the data in that function. <code>datas = json.loads(x)</code>.</p>

<p>It can be safe to implement it in a function where this isn't the case, but you shouldn't return the data. This shows that the output is via side-effects. If you return and mutate then that will cause people to think there are no side-effects and it would be unsafe.</p>

<p>It also makes the code simpler than otherwise.</p>
    </div>