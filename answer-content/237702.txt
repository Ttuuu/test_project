<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We use <code>std::string</code> without including <code>&lt;string&gt;</code> - a possible portability bug.</p>

<p>Representation as a string of <code>char</code> isn't very compact, so we're quite wasteful of space for large numbers.</p>

<p>The modifying operators (<code>++</code>, <code>*=</code>, etc) all return <code>void</code>, but it's normal and expected that they return a reference to <code>*this</code> (act like the integers).</p>

<p>It's suspect to have a copy-constructor but no copy-assignment operator.  In this case, the copy constructor adds no value and should be removed, allowing the compiler to generate default copy and move operations.</p>

<p><s>Some more that can be removed: we could get away with constructors taking <code>std::intmax_t</code> and <code>std::uintmax_t</code> and removing those that accept shorter integers.  Standard integer promotion would then work for us.</s></p>

<p>It's probably not worth accepting <code>const char*</code>, given the implicit conversion to <code>std::string</code>.</p>

<p>Consider making some or all of the constructors <code>explicit</code>.  Certainly the construction from string should be explicit.</p>

<p>In <code>BigInt(std::string number)</code>, consider that it's more efficient to remove characters from the end of <code>std::string</code>, so reverse it before counting <code>-</code> signs  (and we can use <code>s.back()</code> to access the last character more readably than <code>s[s.size() - 1]</code>).</p>

<p>There's no need to sprinkle <code>this-&gt;</code> all over the place - that's just visual clutter.  I would recommend renaming either the member or the parameter to many methods so that they are not both called <code>number</code>.</p>

<p>This comparison is never true:</p>

<blockquote>
<pre><code>BigInt(unsigned long long int number){
    if(number &lt; 0){
</code></pre>
</blockquote>

<p>An unsigned type is never less than 0.  This is likely a symptom that you're compiling without a good set of warnings; I'm using <code>g++ -Wall -Wextra -Wpedantic -Warray-bounds  -Weffc++</code>.</p>

<p>There's a more subtle issue here:</p>

<blockquote>
<pre><code>BigInt(long long int number){
    if(number &lt; 0){
        this -&gt; neg = true;
        number *= -1;
    }
</code></pre>
</blockquote>

<p>On most systems, <code>LLONG_MIN</code> is less than <code>-LLONG_MAX</code>, meaning that there's at least one value that doesn't become positive when multiplied by <code>-1</code>.</p>

<p>Comparison operators should take <code>const</code> references, rather than needlessly copying:</p>

<pre><code>friend bool operator == (const BigInt&amp; first, const BigInt&amp; second){
    return first.number == second.number &amp;&amp; second.neg == first.neg;
}
</code></pre>

<p>And it's normal to make them member functions rather than friends if they need access to the object's private members:</p>

<pre><code>bool operator==(const BigInt&amp; other) const
{
    return number == other.number &amp;&amp; neg == other.neg;
}
</code></pre>

<p>The inequality operators are somewhat inefficient - there's no need to re-implement <code>std::string::operator&lt;()</code> in there.  In fact, if we use <code>&lt;algorithm&gt;</code>, we don't need to make copies of the strings to reverse them; just use reverse iterators instead:</p>

<pre><code>bool operator&lt;(const BigInt&amp; other) const
{
    if (neg != other.neg) {
        return neg;
    }
    if (neg) {
        // TODO: avoid making copies here
        return -other &lt; *this;
    }

    if (number.size() != other.number.size()) {
        return number.size() &lt; other.number.size();
    }

    return std::lexicographical_compare(number.rbegin(), number.rend(),
                                        other.number.rbegin(), other.number.rend());
}
</code></pre>

<p>We don't need to duplicate this logic to implement <code>operator&gt;()</code>:</p>

<pre><code>bool operator&gt;(const BigInt&amp; other) const
{
    return other &lt; *this;
}

bool operator&gt;=(const BigInt&amp; other) const
{
    return other &lt;= *this;
}
</code></pre>

<p>The streaming-in operator, <code>&gt;&gt;</code> re-does much work that's done in the constructor.  Here's a simpler version, that removes the duplication:</p>

<pre><code>friend std::istream&amp; operator&gt;&gt;(std::istream&amp; in, BigInt &amp;bigint)
{
    std::string number;
    in &gt;&gt; number;
    bigint = std::move(number);
    return in;
}
</code></pre>

<p>We don't need to use a temporary in <code>swap()</code> (and what we have is similar what <code>std::swap()</code> would give us for free, except copying instead of moving).  Here's a more memory-efficient version:</p>

<pre><code>void swap(BigInt &amp;other)
{
    std::swap(neg, other.neg);
    std::swap(number, other.number);
}
</code></pre>

<p>It's more usual to implement <code>+</code> in terms of <code>+=</code>, rather than the other way around.  Again, that reduces the amount of temporary memory needed.</p>
    </div>