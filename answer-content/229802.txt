<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The good:</p>

<ul>
<li>Using <code>std::size_t</code> for indexing a std::vector.</li>
<li>Properly using <code>std::</code> where necessary.</li>
</ul>

<p>:)</p>

<hr>

<p>The bad:</p>

<ul>
<li><p><strong>bug</strong>: <code>forward_count</code> and <code>backward_count</code> are passed by value into <code>please_conform</code>. They appear to be output parameters, so they must be passed by reference.</p></li>
<li><p><strong>bug</strong>: Although we warn the user when encountering an empty list, we carry on running the program, which will cause serious problems in <code>please_conform</code> with the end condition of <code>i &lt; caps.size() - 1</code>. We need to <code>return</code> from <code>main</code>, or move the empty check to the start of <code>please_conform</code>.</p></li>
<li><p>We should pass the <code>caps</code> vector into <code>please_conform</code> by <code>const&amp;</code>, not <code>&amp;</code>, since we don't intend to change it. Similarly the <code>positions</code> argument to <code>speak_commands</code> should be a <code>const&amp;</code>.</p></li>
<li><p>A <code>bool</code> would be better than a <code>char</code> to represent cap direction, since it only has two possible values and is easy to flip. An even better choice would be an <code>enum class</code>, since that would also add type-safety (and we easily could supply a "flip" function).</p></li>
<li><p><code>int</code> may not cover the appropriate range for the forward and backward counts. I'd suggest using <code>std::size_t</code>.</p></li>
</ul>

<hr>

<p>The ugly:</p>

<ul>
<li><p>Use a <code>struct</code> instead of a tuple. This saves typing, and lets us give meaningful names to the member variables, instead of trying to remember what e.g. <code>std::get&lt;1&gt;()</code> is referring to.</p></li>
<li><p><code>please_conform</code> is not an informative name. Perhaps something like <code>find_adjacent_ranges</code> or <code>find_runs</code> would be better.</p></li>
<li><p><code>please_conform()</code> has a lot of repetition. Since we increment <code>forward_count</code> or <code>backward_count</code> in every branch, it might be best to do this at the start of each loop iteration (and count the last item outside of the loop).</p></li>
<li><p><code>please_conform()</code> finds "runs" of the same cap direction. We can do this more easily with two for loops: an outer loop to increment the "start" index of each run, and an inner loop to find the "end" index (which will be the "start" index of the next run). We can use <code>std::find</code> for the inner loop.</p></li>
<li><p>If we store the "forward" and "backward" ranges in two separate vectors, we can simplify the "speak_commands" function considerably, since we don't have to check each range to see if the direction matches the one we want to flip.</p></li>
</ul>

<hr>

<p>Applying some of the suggestions above:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;

struct range
{
    std::size_t start = 0;
    std::size_t size = 0;
};

struct ranges
{
    std::vector&lt;range&gt; ranges;
    std::size_t total = 0;
};

void find_ranges(std::vector&lt;bool&gt; const&amp; caps, ranges&amp; forward, ranges&amp; backward)
{
    forward = ranges();
    backward = ranges();

    if (caps.empty())
        return;

    for (std::size_t i = 0; i != caps.size(); )
    {
        bool style = caps[i];
        std::size_t start = i;
        std::size_t end = (std::find(caps.begin() + i + 1, caps.end(), !style) - caps.begin());
        std::size_t size = (end - i);

        ranges&amp; rs = (style ? forward : backward);
        rs.ranges.push_back({start, size});
        rs.total += size;

        i += size;
    }
}

void speak_commands(std::vector&lt;range&gt; const&amp; ranges)
{
    for (auto const&amp; r : ranges)
    {
        if (r.size == 1)
            std::cout &lt;&lt; "Person in position " &lt;&lt; r.start &lt;&lt; " please flip your cap.\n";
        else
            std::cout &lt;&lt; "People in positions " &lt;&lt; r.start &lt;&lt; " through " &lt;&lt; (r.start + r.size - 1) &lt;&lt; " (inclusive) please flip your caps.\n";
    }
}

int main()
{
    std::vector&lt;bool&gt; caps = { true, true, false, false, false, true, false, false, false, true, true, false, true };

    ranges forward, backward;
    find_ranges(caps, forward, backward);

    ranges const&amp; to_flip = (backward.total &lt;= forward.total ? backward : forward);
    speak_commands(to_flip.ranges);
}
</code></pre>
    </div>