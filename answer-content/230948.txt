<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>class EfficientCode</code> could be improved by naming the class by the purpose of the code. Otherwise your naming is good.</li>
<li><code>static int age = 0;</code> should be a local variable in <code>Start()</code>  </li>
<li><code>Thread.Sleep(8000); // adds a 8 second delay so that the user could first read the introduction</code> shouldn't be needed because you aren't clearing the <code>Console</code> hence the user could still read it.</li>
<li><p>Instead of <code>try..catch</code> you could take advantage of the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.int32.tryparse?view=netframework-4.8#System_Int32_TryParse_System_String_System_Int32__" rel="nofollow noreferrer"><code>int.TryParse()</code></a> method which returns a bool indicating the success of "converting" the string to an int. If you would use <code>int.TryParse</code> like below you could omit the restarting in case of an error. If the call succeeds <code>age</code> holds the integer.</p>

<pre><code>while(!int.TryParse(Console.ReadLine(), out age))
{
    Console.WriteLine("ERROR: The entered AGE must be a number!");
    Console.WriteLine("Enter your age");
}
</code></pre></li>
<li><p><code>ConfirmInformation()</code> is doing a little bit to much. You should split it into 2 methods. One composing the output and one printing the output and asking for confirmation.  </p>

<pre><code>private static string ComposeOutput(String firstName, String middleName, String lastName, int age)
{
    StringBuilder sb = new StringBuilder(100);
    sb.AppendLine("======================================")
      .AppendLine("INFORMATION CHECK:")
      .AppendLine()
      .AppendLine($"FIRST NAME: {firstName}")
      .AppendLine($"MIDDLE NAME: {middleName}")
      .AppendLine($"LAST NAME: {lastName}")
      .AppendLine($"AGE: {age}")
      .AppendLine()
      .AppendLine("Are all those information correct? (Y/N)")
      .AppendLine("======================================");

    return sb.ToString();
}  
</code></pre>

<p>This method uses the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder?view=netframework-4.8" rel="nofollow noreferrer"><code>StringBuilder</code></a> class. The <code>AppendLine()</code> method is returning the <code>StringBuilder</code> itself hence we can use the method calls fluently. It uses <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated" rel="nofollow noreferrer"><code>$</code>-string interpolation</a> as well.  </p>

<p>The former <code>ConfirmInformation()</code> method could then look like so  </p>

<pre><code>private static bool ConfirmInformation(string information)
{
    Console.Write(output);

    while (true)
    {
        string input = Console.ReadLine().ToLowerInvariant();
        if (input == "y" || input == "yes")
        {
            return true;
        }
        if (input == "n" || input == "no")
        {
            return false;
        }

        Console.WriteLine("ERROR: Input must be either YES or NO.");
        Console.WriteLine();
        Console.Write(output);
    }
}
</code></pre>

<p>I have made a <code>while(true)</code> loop here because your user wouldn't want to restart the whole process if they made a mistake.<br>
As a sidenode, the variable <code>String booleanInput = Console.ReadLine();</code> is misleading. If <strong>Sam the maintainer</strong> would read this method the purpose of that variable wouldn't be seen at first glance.</p></li>
</ul>
    </div>