<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use built in methods!</h1>

<p>Your <code>position_in_alphabets</code> function can be reduced to one line. In fact, replace <code>y = ...</code> with the following:</p>

<pre><code>alphabets.index(character) + 1
</code></pre>

<p><a href="https://www.programiz.com/python-programming/methods/string/index" rel="nofollow noreferrer"><code>index</code></a> returns the first occurrence of the character in question. Since you're working with the alphabet, it will return the position of the character in that string. Then you just need to add one.</p>

<h1>Never trust user input</h1>

<p>Instead of trusting the user will only enter lowercase characters after telling them to do so, call <code>.lower()</code> on the <code>input</code> to change the string to all lowercase letters.</p>

<p></p><hr>
<em>I'm going to step through each line of the main function now.</em>

<hr>

<h1>f"" strings</h1>

<p>I would use <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer"><code>f""</code></a> strings so you can directly format your variables in your strings. In this case, it reduces the clutter that <code>print("...", var, "...", var, "...")</code> causes. It would instead be <code>print(f"... {var} ... {var} ...")</code>.</p>

<h1>Naming conventions (<a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">PEP 8</a>)</h1>

<p><code>a</code> isn't really a good parameter name. A variable/parameter name should represent what that variable is holding or is doing. I would use <code>string</code>, since you're working with them in this program.</p>

<pre><code>def decrypt(string):
</code></pre>

<h1>Use enumerate</h1>

<p><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> allows you to work through an iterable with the index and the value at that position in the iterable. It gets rid of having to <code>iterable[i]</code> and all that junk.</p>

<pre><code>output = ''
spaces = 0
for index, character in enumerate(string):
</code></pre>

<h1>Allowing spaces</h1>

<p>Spaces are really easy to deal with. If the character is a space, simply add <code>" "</code> to the output and <a href="https://docs.python.org/3/reference/simple_stmts.html#continue" rel="nofollow noreferrer"><code>continue</code></a>, quite literally, to the next iteration.</p>

<pre><code>if character == " ":
    output += " "
    spaces += 1
    continue
</code></pre>

<h1>Compress your computations</h1>

<p>Instead of having a bunch of one character variable names <code>x</code>, <code>y</code>, <code>z</code>, I would do all the computations in one step and assign them to a variable. I've done so, and used <code>position</code>, because that's what you're calculating.</p>

<pre><code>position = (index + 1) + (alphabet.index(character) + 1) - 26
</code></pre>

<h1>Simplify your reassignments</h1>

<p>Have a look at this:</p>

<pre><code>if position &gt; len(alphabet):
    position %= len(alphabet)
</code></pre>

<p>It's the same thing as <code>position = position % len(alphabet)</code>, but shorter (also called in place modulus). It also works for the other operators (<code>+-*/</code>).</p>

<h1>Don't make variables you don't need</h1>

<p>The sole purpose of <code>alpha</code> is to hold the value at the passed position in <code>alphabet</code>, then you add alpha to <code>output</code>. How about you just skip the first step and add it right to <code>output</code>?</p>

<pre><code>output += alphabet[position - 1]
</code></pre>

<hr>

<p>All in all, your final program looks like this:</p>

<pre><code>alphabet = 'abcdefghijklmnopqrstuvwxyz'

def decrypt(string: str) -&gt; str:
    output = ''
    spaces = 0
    for index, character in enumerate(string):
        if character == " ":
            output += " "
            spaces += 1
            continue
        position = (index + 1) + (alphabet.index(character) + 1) - len(alphabet)
        if position &gt; len(alphabet):
            position %= len(alphabet)
        output += alphabet[position - 1 - spaces]
    return output

word = input("Please enter the word to be decrypted: ").lower()
output = decrypt(word)
print(f"The word '{word}' decrypted is '{output}'")
</code></pre>

<p>We use <code>spaces</code> to shift the index back for every space we've encountered.</p>
    </div>