<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One main remark: the paging method is too busy. The number of arguments is a tell-tale. The parts that don't belong there are filtering and sorting.</p>
<p>In general, a method returning any paged result, should only receive an <code>IQueryable</code> and the paging instructions page number and page size. Your second method is almost there. After removing the superfluous responsibilities, what's left is:</p>
<pre class="lang-cs prettyprint-override"><code>protected async Task&lt;PaginatedDataResult&lt;TEntity&gt;&gt; PaginateAsync&lt;TEntity&gt;(
    IQueryable&lt;TEntity&gt; query, int pageNumber, int pageSize,
    CancellationToken cancellationToken)
{
    var pageQuery = query
        .Skip((pageNumber - 1) * pageSize)
        .Take(pageSize);

    var page = await pageQuery.ToListAsync(cancellationToken);

    var count = await query.CountAsync(cancellationToken);

    return new PaginatedDataResult&lt;TEntity&gt;
    {
        PerPage = pageSize,
        CurrentPage = pageNumber,
        TotalCount = count,
        Data = page
    };
}
</code></pre>
<p>Now you have a method that you can offer any <code>IQueryable</code>. It doesn't need to know if it's a <code>DbSet</code> or a projection, or filtered, or ordered. The count of the query is independent of all these details. [In fact, when using Entity Framework, you won't even see the projection in the generated SQL count query)].</p>
<p>This makes each method that calls <code>PaginateAsync</code> responsible for composing the <code>IQueryable</code> they want to have paged. And —the main point— now it's possible to have a method that just returns the <code>IQueryable</code> and another method that takes this <code>IQueryable</code> and returns a page.</p>
<p>So, you'll just keep <code>GetAllByRelationshipDataAsync</code>, which I would at least shorten to <code>GetAllByRelationshipAsync</code>, and add a method <code>GetAllByRelationshipPagedAsync</code> that looks like your <code>GetAllByRelationshipDataAsyncTest</code> method, but now internally just executes
<code>GetAllByRelationshipAsync</code> and <code>PaginateAsync</code>.</p>
<p>Likewise, <code>GetPaginatedSearchAsync</code> should be changed to contain the filtering and ordering parts, so it will be able to call <code>PaginateAsync</code> as well.</p>
<p>Of course, if you want, you can create separate methods that execute filtering and/or ordering.</p>
<p>Now it's even possible to have a service layer that's just bothered with composing queries and doesn't even contain any paging logic. The paging method could be part of the controller layer only.</p>
    </div>