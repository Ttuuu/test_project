<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are using a lot of nullable types, combined with non-null assertions (<code>!!</code>). This defeats the purpose of using the nullable types in the first place. You should <strong>as early as possible</strong> check whether or not a value is null, and then pass it on as not-null.</p>
<p>For example, just looking at some of your function headers:</p>
<pre><code>fun evaluate(query:String?):Double?

fun parseSimple(query:String?):Double?

fun basic(rightNum:String?, leftNum:String?, op:String?):Double?
</code></pre>
<p>Do these methods even make sense if any of those parameters is null? No! So don't declare them as nullable.</p>
<hr>
<p>If I write <code>2^5</code> and you have variables called <code>leftNum</code> and <code>rightNum</code>, I would expect 2 to be left and 5 to be right. But your code is <code>rightNum.toDouble().pow(leftNum.toDouble())</code> and it computes correctly. That's because you're putting 2 as rightNum and 5 as leftNum for some reason.</p>
<hr>
<p>You can make better use of Kotlin's amazing API, for example in this method:</p>
<pre><code>fun elemInside(mainString:String?, listCheck:List&lt;String&gt;):Boolean {
    for (ops in listCheck) {
        if (mainString?.contains(ops)!!){
            return true
        }
    }
    return false
}
</code></pre>
<p>This could be:</p>
<pre><code>fun elemInside(mainString:String, listCheck: List&lt;String&gt;): Boolean {
   return listCheck.any { mainString.contains(it) }
}
</code></pre>
<p>Which can even be written as:</p>
<pre><code>fun elemInside(mainString:String, listCheck: List&lt;String&gt;): Boolean
   = listCheck.any { mainString.contains(it) }
</code></pre>
<hr>
<p>I would strongly recommend using the <a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" rel="noreferrer">Shunting-yard Algorithm</a> to parse the expression. It would enable you to implement new features with new operators and even functions such as <code>sin</code>, <code>cos</code>, <code>sqrt</code>, and so on...</p>
<p>Or even negative numbers, which you don't support right now. <code>-2*3</code> breaks. It has to be written as <code>(0-2)*3</code> in order to work. Using Shunting-yard Algorithm also allows you to deal with whitespace much easier.</p>
<p>Order of operations is also a bit of an issue with your current approach, <code>2*3+4*5</code> returns 50.0 while I would expect it to return 6+20 = 26. Shunting-yard would help with this too.</p>
    </div>