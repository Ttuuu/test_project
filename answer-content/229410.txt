<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Packet fragmentation</h2>

<p>Have a read through this: <a href="https://stackoverflow.com/a/17668009/313768">https://stackoverflow.com/a/17668009/313768</a></p>

<p><code>usock.recv(1024)</code> is fragile, and under many circumstances simply won't work for a handful of reasons. You'll need to do some reading about the fundamentals of TCP/IP to understand why that is, but basically, you can't assume that you'll get the data you want all in one chunk.</p>

<h2>Context manager</h2>

<p>You hold onto some sockets, which are resources that should be closed when you're done with them even if something goes wrong. This is a job for a context manager. You can make your class a context manager so that calling code can be sure that your resources are closed off, regardless of what else happens.</p>

<p>Have a read through this: <a href="https://docs.python.org/3/library/stdtypes.html#typecontextmanager" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#typecontextmanager</a></p>

<h2>Presentation versus logic</h2>

<pre><code>    usock.send(b"Please, choose your username: ")
</code></pre>

<p>Typically, this is not done, and instead a pre-chosen number is sent over the wire, leaving the client to choose how to ask the user a particular thing. This becomes especially important when graphics get involved, or when you need to do translation/internationalization.</p>

<h2>The first thing</h2>

<pre><code>[u for u in self.users if u.sock is u.sock][0].name
</code></pre>

<p>should be</p>

<pre><code>next(u for u in self.users if u.sock is u.sock).name
</code></pre>

<p>That said... what on earth is this doing? When would that condition ever evaluate to <code>False</code>?</p>

<h2>Type hints</h2>

<p>PEP484 type hints, such as <code>host: str, port: int</code>, will clarify your function arguments.</p>
    </div>