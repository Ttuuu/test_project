<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Is this what you're after?</p>

<pre><code>criteria.filter({ _id, criteriaType } =&gt; (
    (!participantType || participantType === criteriaType)
    &amp;&amp;
    (!participantCriteriaId || participantCriteriaId === _id)
));
</code></pre>

<p>If <code>participantType</code> is empty, it will be coerced to <code>true</code> by the negation, which short-circuits the <code>||</code> operator, so it won't check the right-hand side of the condition. Same for <code>participantCriteriaId</code>.</p>

<p>Note: This type of condition is a common pattern in boolean logic. Generally speaking, conditions that can be phrased as:</p>

<blockquote>
  <p>If A is true, then check if B is true; otherwise, ignore this condition</p>
</blockquote>

<p>Can be transcribed as:</p>

<blockquote>
  <p>(not A) or B</p>
</blockquote>

<p>Which in code is:</p>

<pre><code>!a || b
</code></pre>

<p>In your case, the condition is "if the search filter is populated, then check for equality, otherwise ignore", which is transcribed as <code>!filter || property === filter</code>.</p>
    </div>