<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This function is very dependent on the inputs, with the function <code>pow</code> being the fastest when the power (second arg) is small, but quickly becomes slower as the power grows.</p>

<h2>Bit-wise and wiser recursing</h2>

<p>You can get a tiny bit more out of the <code>pow2</code> function if you use bit-wise math.
The big gain is in avoiding the need to step into the last recursion that returns 1. See (Example B)</p>

<p>The following functions where bench marked. See bottom table.</p>

<h2>Your functions as tested</h2>

<pre><code>function pow(x, y) {
  if (!y) { return 1 }
  let tmp = res = x;
  for (let i = 1; i &lt; y; i++) {
    for (let j = 1; j &lt; x; j++) { tmp += res }
    res = tmp;
  }
  return res;
}

function pow2(x, y) {
  if (!y) { return 1; }
  if (y % 2) {
    return x * pow2(x, y - 1);
  }
  const p = pow2(x, y/2);
  return p * p;
}
</code></pre>

<h2>Example B</h2>

<pre><code>// Using bitwise math and skipping last recursion when possible
function pow2B(x, y) {
    if (y &lt; 2) { return y ? x : 1 }
    if (y &amp; 1) { return x * pow2B(x, y &amp; 0x7FFFFFFE)}
    const p = pow2B(x, y &gt;&gt; 1);
    return p * p;
}
</code></pre>

<p>The benchmark results </p>

<pre><code>Time per 10,000 calls in µs (1/1,000,000th sec)
===============================================
args &gt;&gt;   (21, 11) |  (2, 8)  |  (1, 2)
===================|==========|================    
pow        0.075µs | 0.014µs  | 0.007µs
pow2       0.014µs | 0.010µs  | 0.005µs (*1)
pow2B (*2) 0.011µs | 0.007µs  | 0.005µs
</code></pre>

<p><strong>NOTES</strong></p>

<ul>
<li><p>(*1) The times are right on the precision limits but the <code>pow2</code> function for (1,2) consistently completed 200 Million operations per second compared to the next best at 194 million. The difference to small to show up in the times.</p></li>
<li><p>(*2) The bit-wise math contributed ~25% of the improvement while the 1 less recursion contributed ~75% of the improvement.</p></li>
</ul>
    </div>