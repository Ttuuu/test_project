<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Mandelbrot-specific optimisations</h1>

<p>These can be combined with the Python-specific optimisations from the other answers.</p>

<h2>Avoid the redundant square root</h2>

<pre><code>if (z.real**2+z.imag**2)**0.5 &gt; 2:
</code></pre>

<p>is equivalent to</p>

<pre><code>if z.real ** 2 + z.imag ** 2 &gt; 4:
</code></pre>

<p>(simply square both sides of the original comparison to get the optimised comparison)</p>

<h2>Avoid squaring unless you are using it</h2>

<p>Any points that get further than 2 from the origin will continue to escape towards infinity. So it isn't important whether you check that a point has gone outside a circle of radius 2, or that it has gone outside some other finite shape that fully contains that circle. For example, checking that the point is outside a square instead of a circle avoids having to square the real and imaginary parts. It also means you will need slightly more iterations, but very few and this should be outweighed by having each iteration faster.</p>

<p>For example:</p>

<pre><code>if (z.real**2+z.imag**2)**0.5 &gt; 2:  # if z is outside the circle
</code></pre>

<p>could be replaced by</p>

<pre><code>if not (-2 &lt; z.real &lt; 2 and -2 &lt; z.imag &lt; 2):  # if z is outside the square
</code></pre>

<p>The exception to this suggestion is if the circle is important to your output. If you simply plot points inside the set as black, and points outside the set as white, then the image will be identical with either approach. However, if you count the number of iterations a point takes to escape and use this to determine the colour of points outside the set, then the shape of the stripes of colour will be different with a square boundary than with a circular boundary. The interior of the set will be identical, but the colours outside will be arranged in different shapes.</p>

<p>In your example image, not much is visible of the stripes of colour, with most of the exterior and interior being black. In this case I doubt there would be a significant difference in appearance using this optimisation. However, if you change to displaying wider stripes in future, this optimisation may need to be removed (depending on what appearance you want).</p>

<h2>Hard-code as much of the interior as you can</h2>

<p>The interior of the set takes far longer to calculate than the exterior. Each pixel in the interior takes a guaranteed 255 iterations (or more if you increase the maximum iterations for even higher quality images), whereas each pixel in the exterior takes less than this. The vast majority of the exterior pixels take only a few iterations.</p>

<p>If you want the code to be adaptable for zooming in to arbitrary positions, then you won't know in advance which parts of the image are going to be interior points. However, if you only want this code to generate this one image of the whole set, then you can get a significant improvement in speed by avoiding calculating pixels you know are interior. For example, if you check whether the pixel is in the main cardioid or one of the large circles, you can assign all those pixels an iteration count of 255 without actually doing any iteration. The more you increase the maximum iterations, the more circles it will be worthwhile excluding in advance, as the difference in calculation time between the average exterior pixel and the average interior pixel will continue to diverge dramatically.</p>

<p>I don't know the exact centres and radii of these circles, or an exact equation for the cardioid, but rough estimates that are chosen to not overlap the exterior will still make a big difference to the speed. Even excluding some squares chosen by eye that are entirely in the interior would help.</p>
    </div>