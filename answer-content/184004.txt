<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Typescript 1.6 introduced user defined type guards that are a function whose return type is a boolean that is cast as a type predicate. To define a simple <code>isString</code> type guard (note the <code>X is string</code> return type), use syntax like below:</p>

<pre><code>function isString(str: string | undefined): str is string { return str !== undefined }
</code></pre>

<p>or as a lambda with a slightly different check:</p>

<pre><code>const isString = (str: string | undefined): str is string =&gt; !!str
</code></pre>

<p>Passing a type guard function as the array <code>filter</code> callback predicate function will both filter the array and allow Typescript to correctly infer the return type. To expand on the accepted answer's example: </p>

<pre><code>const source: (string|undefined)[] = ["one", "two", "three", undefined, "five"]
const filtered: string[] = source.filter( isString )
</code></pre>

<p>The <code>isString</code> lambda can also be expanded inline</p>

<pre><code>const filtered: string[] = source.filter( (str: string | undefined): str is string =&gt; !!str )
</code></pre>

<p>This approach allows the Typescript compiler to infer types instead of explicit type casting. Yes, the type inference is dependent on the predicate function being correctly defined. But an incorrect predicate will give the wrong answer when filtering with a type cast too.</p>
    </div>