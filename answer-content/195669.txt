<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Correctness: Operator overloading combined with inheritance can be confusing. Are there any hidden bugs or odd edge cases where these iterators would break? </p>
</blockquote>

<p>Yes.  Your return type <code>It</code> will be the base class, not the class the user was actually incrementing.  That is, <a href="https://en.cppreference.com/w/cpp/concept/ForwardIterator" rel="nofollow noreferrer">the requirements</a> specify e.g. that <code>i++</code> have a return type of <code>It</code>.  Given some specific <code>using It = Iterator&lt;⋯whatever⋯&gt;;  It p1, p2;</code> then <code>p2= p1++;</code> will give a compiler error.</p>

<p>Your base class needs to use the CRTP to make those reusable functions.</p>

<hr>

<blockquote>
  <p>I put all operations for indexing in a BaseIterator class, it's essentially an integer wrapper.</p>
</blockquote>

<p>You should expose that as a usable counting iterator.  So, your array-zipper uses your counting iterator, rather than in internal component.</p>

<hr>

<blockquote>
  <p>Is <code>Iterator&lt;void&gt;</code> necessary</p>
</blockquote>

<p>I don’t see why.  The normal template class takes a list of types will be found in arrays (or other contiguous sequences).  Why would you ever use <code>void</code> as one of them?  You are only handling <code>void</code> in the first position, anyway.  <code>Iterator&lt;char,void,int&amp;&gt;</code> would have problems working, too.</p>

<blockquote>
  <p>Best practices: Are there any improvements to the interface I could make? </p>
</blockquote>

<p>I don’t like how the <code>const</code> form of a function calls the non-<code>const</code> form with a <code>const_cast</code>.</p>
    </div>