<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the reason why you're having a problem with classes and OOP is because you've not fully understood the things around you. For instance - you start with Deck, because that's your the focus of the game. You're thinking about the game - and not the objects themselves.</p>

<blockquote>
  <p>defining class object attributes vs instance attributes,</p>
</blockquote>

<p>Think of a class as a set of architectural plans - it's not a real thing until you actually instantiate it. Let's OOP the start of your program.</p>

<p>What's a Deck made up of? Cards. Can you go smaller than a card? No. Okay, so that's the first object you should create.</p>

<p>Create your first class as Card. Now describe the Card. What does a card have? It has a Rank and a Suit.  What else can you use to describe the card? You could describe the quality of the paper and the thickness, as well as the colours used to paint the card - but we discard those attributes because they serve no purpose for what we're trying to achieve, which is playing the game (and they don't matter for our program).</p>

<p>Now, let's think about actions (methods/functions) of the card - does the card have any actions? No. We know they are dealt by the dealer, but by themselves, they don't do anything. So that tells you it's an object with data/state, but no methods.</p>

<p>Now each card is different, and we know there are 52 cards (ignoring the Joker) typically in each deck. Do you build all 52 cards manually? You can. That's a brute-force approach, which you did. Do you know what computers are good at? Giving them a set of instructions and letting them repeat until the goal is achieved - this is the basis of Machine Learning.</p>

<p>So, we create the Card, and we know when we create the card, it must have 2 attributes at minimum:</p>

<pre><code>class Card:
    def __init__(self, rank, suit):
        self.rank, self.suit = rank, suit
</code></pre>

<p>But we know we have to get information from the card - we want to get a value, we want to get the rank, and we want to display the card information itself, in a human-readable way, such as 7 of Spades, or 7S. Let's go for the shorter-version - but you can change that later on that single line.</p>

<pre><code>class Card:
    def __init__(self, rank, suit):
        self.rank, self.suit = rank, suit
    def __str__(self):
        return f"{self.rank}{self.suit}"
</code></pre>

<p>Ah, but if we think of an Ace - it represents 2 values depending on how it is used by the player. So let's add the two states - hard and soft values to the class. 
We don't know <em>how</em> we're going to address that (such as the player having 4 aces with all of them together only representing a hand value of 4), so this is okay for the moment. Let's add hard and soft values:</p>

<pre><code>class Card:
    def __init__(self, rank, suit):
        self.rank, self.suit = rank, suit
    def __str__(self):
        return f"{self.rank}{self.suit}"
    def get_hard_value(self):
        return self.rank
    def get_soft_value(self):
        return self.rank
</code></pre>

<p>Now let's consider how we're going to create a card with a special rule. For cards 2-9, they're straight-forward, we don't need anything special. Aces and Face cards however do require different rules or behavior.
As the Ace only has a single rule (either 1 or 11) - let's do that first. We inherit Card as the base class object, and specify the unique rules:</p>

<pre><code>class Ace(Card):
    """ Aces can be either 1 or 11"""
    def __init__(self, rank, suit):
        super().__init__(rank, suit)
    def __str__(self):
        return f"A{self.suit}"
    def get_hard_value(self):
        return 1
    def get_soft_value(self):
        return 11
</code></pre>

<p>And now look at the Face Cards. Like the Ace, we know the face cards value should be hard-coded to 10, but we are faced with a slightly different issue (pun intended). The card is either K, Q, or J but keeps a value of 10. So, if we get an initial value that specifies that it is a K/Q/J - such as 11,12,13? Let's keep that initial value as an extra property, and override the value back to 10.</p>

<pre><code>class FaceCard(Card):
    """ Face cards have a value of 10 and a must be either of King, Queen or Jack"""
    def __init__(self, rank, suit):
        super().__init__(rank, suit)
        self.special = rank
        self.rank = 10
    def __str__(self):
        label = ["K", "Q", "J"][self.special - 11]
        return f"{label}{self.suit}"
</code></pre>

<p>Now we have the architecture of the card, with the specific cases where the card changes slightly based on the rules of the cards. We have used inheritance to create a base class, and inherit Card with special overriding rules to show how - even though an Ace is a Card - it is slightly different.</p>

<p>This explanation should demonstrate the architecture of what a class object is - it is not yet instantiated - we don't have an instance object for you to see the difference - so let's create a set of instances of card, face card and ace. How do we do that? by creating the deck.</p>

<p>The deck will be a grouping of cards in a certain way depending on the rules of the game. Currently, your <code>Deck</code> class is very specific to vanilla Blackjack - if you wanted to add a Joker as a wild-card - you'd need to rewrite the <code>Deck</code> class.
What if you wanted to switch back? Your Deck class is broken for a vanilla Blackjack game, and you'd need to rewrite it again, losing all the changes you created for a Jokers wild Blackjack game.</p>

<p>We learn the value of inheritance by this specific case. <code>deck = BlackJackDeck()</code> or <code>deck = BlackJackJokersWildDeck()</code> allow you to create different games with slightly different sets of cards.</p>

<p>So - analysis of the deck of cards for the vanilla Blackjack game. What is it? It's a set (unique items, no duplicates) of cards. What attributes does it have? It contains a specific size (52) of cards. Any other attributes? Not really. What about actions? Yes, it has an action of dealing a card - which reduces the available deck by 1. What happens when the deck is exhausted? Typically you should not reach this edge case unless you exceed a certain number of players.</p>

<p>We've covered class objects and their attributes, now we look at instantiated/concrete objects from the class, and passing arguments. We will cover those with the <code>Deck</code> class.</p>

<p>You also wanted clarification on <strong>class functions verses functions outside classes</strong>. This is more about the game itself - Blackjack or Texas Hold'em - the game has specific actions (functions/methods) which <strong>act</strong> on the deck of cards.</p>

<p>The cards don't care what game you're playing. They exist, they are dealt. That is the functionality combining the cards and the deck. The game - that is those "outside functions" with different scoring rules and rules of the game like of the number of players per game. Does that help? What something <strong>is</strong> verses what you <strong>do</strong> with it.</p>

<p>If an object has an action (like giving a card when it is asked for) then it belongs with the object. If you <strong>do</strong> something <strong>with</strong> that card - then the action belongs <em>outside</em> the object. Take some time to think about it. Until then, we dig into the <code>Deck</code> object (Which I've renamed as <code>BlackJackDeck</code> because it's more specific of what it is. Correct naming of variables and classes help other programmers to understand your code easier).</p>

<pre><code>from random import shuffle

class BlackJackDeck:
    """ A set of cards suitable for a Blackjack game which can deal a random card"""
    def __init__(self):
        self.cards = []
        for suit in ["H", "D", "C", "S"]:
            self.cards += [Card(rank, suit) for rank in range(2,10)]
            self.cards += [FaceCard(rank, suit) for rank in range(11,14)]
            self.cards += [Ace(11, suit)]
        shuffle(self.cards)

    def deal(self):
        for card in self.cards:
            yield card
</code></pre>

<p>I'll leave the rest of the game up to you, but essentially now we have a set of code where we have a Deck of cards specific to a Blackjack game, where we can create a deck for each round, and deal a card when requested.</p>

<p>This creating of objects, from the smallest thing and getting larger, mimics real life is what OOP is all about. Learning the S.O.L.I.D principals can help you improve your OOP code too.
Looking further at your code, I see <code>drop_win</code> <code>busted</code> and <code>blackjack</code> do calculations of the value of players hand - all this belongs in one place - the Player class. It is the player which holds the hand of cards, it is the player that plays, bets, gets another card, stands or hits, and leaves the table with their winnings.</p>

<p>I'll import the deck into my iPython CLI and show you how to use it - notice calling <code>deck.deal()</code> gives the same deck? This is because the shuffle is only called when creating a new Deck.</p>

<pre><code>In [52]: deck = BlackJackDeck()

In [53]: for card in deck.deal():
    ...:     print(f"{card}   {card.rank}")
    ...:
9H   9
7C   7
3H   3
(snip)

In [54]: cards = deck.deal()

In [55]: next(cards)
Out[55]: &lt;__main__.Card at 0x6089c50&gt;

In [56]: print(next(cards))
7C

In [57]: print(next(cards))
3H

In [58]: a = next(cards)

In [59]: print(a)
AD

In [60]: dir(a)
Out[60]:
[(snip)
 '__str__',
 '__subclasshook__',
 '__weakref__',
 'get_hard_value',
 'get_soft_value',
 'rank',
 'suit']

In [61]: a.rank
Out[61]: 11

In [62]: a.get_hard_value()
Out[62]: 1

In [63]: a.get_soft_value()
Out[63]: 11
</code></pre>

<p>I hope this helps to clarify objects a little further. It's an interesting way to represent things for coding - and not the only way - classes work well for data objects and object-specific actions - but I find components of functional programming safer. As mentioned, learn SOLID principals and they will help your coding get better.</p>

<p>Good luck and keep up the coding!</p>
    </div>