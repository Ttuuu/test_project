<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know this is an old post but I tried doing something similar recently so thought I should share it here. The code looks great but it still returns unwanted properties with 'Null' values. What I have tried to do is serialize only those fields that are needed.</p>

<pre><code> public class ShouldSerializeContractResolver : DefaultContractResolver
{

    protected override JsonProperty CreateProperty(System.Reflection.MemberInfo member, Newtonsoft.Json.MemberSerialization memberSerialization)
    {
        var property = base.CreateProperty(member, memberSerialization);
        if (property.DeclaringType == typeof(BaseEntity) || property.DeclaringType.BaseType == typeof(BaseEntity))
        {
            if (property.PropertyName == "serializableProperties")
            {
                property.ShouldSerialize = instance =&gt; { return false; };
            }
            else
            {
                property.ShouldSerialize = instance =&gt;
                {
                    var p = (Product)instance;
                    return p.serializableProperties.Contains(property.PropertyName);
                };
            }
        }
        return property;
    }
}

// GET api/products/5
    public JsonResult&lt;Product&gt; Get(int id, string fields="")
    {
        var product = _productsRepository.Find(x =&gt; x.Id == id);
        product.SetSerializableProperties(fields);
        return Json(product, new Newtonsoft.Json.JsonSerializerSettings()
        {
            ContractResolver = new ShouldSerializeContractResolver()
        });
    }
</code></pre>

<p>If you want detailed explanation check my <a href="https://shweta612.wordpress.com/2015/05/28/fields-filtering-in-asp-net-web-api/" rel="nofollow">Blog</a></p>
    </div>