<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Of all the answers, the one thing that I would emphasize the most is <em>use objects</em>. This was already answered, but again, I wanted to emphasize it in detail. If you only learn that, this is worth more than the rest of the answers combined.</p>

<p>You seem to think in procedures and algorithms. This is nice if you do C, but if you want to do C++, learn to think in objects. Objects have clear responsibilities in which you trust blindly (as long as their unit tests work) and of which you don't need to know HOW they do stuff. Objects work as autonomous entities. I'd recommend that you try to use no functions at all, best is only when you need to extend the functionality of a standard library type like std::vector.</p>

<p>In the end, your main should look like this:</p>

<pre><code>int main() {
    Game game;
    game.run();
    return 0;
}
</code></pre>

<p>The Game class (or however you want to call it) then creates other classes which in turn might create some more, in some sort of hierarchy. The methods of such a class call methods of other classes and do not much more than to make the child objects work together. Actual algorithms are as short as possible, in methods of most basic classes.</p>

<p>Anything that is content - like ASCII art, RPG character class names, names of places et cetera - should not be in the code itself.</p>

<p>Focus on the concept of readability. Your code should have a very clear outline. If a stranger wants to find some specific functionality, it should be evident where to look. Right now, one has to browse through one big file. If you have several classes with header and source files, one knows where to look.</p>
    </div>