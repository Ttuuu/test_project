<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like an interesting project. It's been a while but I think I'll try answering it. Keep up the good work. </p>

<blockquote>
<pre><code>class DatabaseCommit():
</code></pre>
</blockquote>

<ul>
<li>No need for parentheses here. Get rid of it unless you are extending from some class. </li>
<li><code>DataBaseCommit</code> is not a good name. Maybe <code>Database</code> ? </li>
<li>Why are you reading configs in this class? <code>def read_config(section, filename='config.ini'):</code> consider creating a separate class like <code>Config</code> for this. Inject an object of that class to <code>Database</code> in the constructor.</li>
</ul>

<blockquote>
<pre><code>   sql = 'INSERT INTO ' + table_name + '(' + date_column
    for topic in user_input:
        sql += ','+ topic
    sql += ')'
    sql += 'VALUES(NOW()'
    for topic in user_input:
        sql += ','+'TRUE'
    sql += ')'
</code></pre>
</blockquote>

<ul>
<li>This looks like <a href="https://en.wikipedia.org/wiki/SQL_injection" rel="nofollow noreferrer">SQL Injection</a> vulnerable for me. Consider using an ORM, if not at least validate the input. ORM might need more resources however. So in a RaspberryPi proper validation might be the only solution due to low resources.</li>
</ul>

<p><a href="https://i.stack.imgur.com/AxRJ6.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/AxRJ6.png" alt="XKCD Exploits of a Mom"></a></p>

<p><sub>Image from: <a href="https://xkcd.com/327/" rel="nofollow noreferrer">https://xkcd.com/327/</a></sub></p>

<blockquote>
<pre><code>import RPi.GPIO as GPIO
</code></pre>
</blockquote>

<ul>
<li>Wrap GPIO in a custom class. So you can make your code more generic. This allows you moving room in case you need to support different hardware.</li>
</ul>

<blockquote>
<pre><code>   # TODO
   # Disable "Post" notification
   elif user_input == self.POST:
       """self.post_notification = False
       self.blink_thread.start()
       self.dismiss_notification(self.POST_LED)
       return False"""

   # TODO
   # Disable "Nagios" notification
   elif user_input == self.NAGIOS:
       """self.nagios_notification = False
       self.dismiss_notification(self.NAGIOS_LED)
       return False"""
</code></pre>
</blockquote>

<ul>
<li>Delete commented code. This is not required. Use a version control like Git so you can recover these code if needed.</li>
</ul>

<blockquote>
<pre><code>#!/usr/bin/python3
</code></pre>
</blockquote>

<p>and</p>

<blockquote>
<pre><code>#!/usr/bin/python
</code></pre>
</blockquote>

<ul>
<li>Use a single type of shebang. recommended one is <code>#!/usr/bin/env python3</code>.</li>
<li>Be consistent and use a single kind of shebang. </li>
<li>Your database class doesn't need it anyway.</li>
</ul>
    </div>