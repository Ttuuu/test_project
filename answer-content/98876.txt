<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You model should be throwing exceptions instead of printing to the (possibly invisible) console.</p>

<pre><code>if (hasOnlyOneToken) {
    setCurrentTotal(operationTokens.get(0));
} else {
    throw new RuntimeException("uhh.. something went wrong? LOL!");
    // or create a better exception class that fits.
}
</code></pre>

<p>Catch it in controller and make it show a <code>JOptionPane.show*Dialog</code> as appropriate.</p>

<p>MathOperationList can be a <code>enum MathOperation</code>. You can get all operations by getting the <code>MathOperation.values()</code> array.</p>

<p>In <code>StringParser</code> there is a regex pattern you split with. It's more efficient to store a static Pattern and reuse that as needed:</p>

<pre><code>private static final Pattern splitPattern = Pattern.compile(String.format(WITH_DELIMITERS, "[*/+-]"));

...
splitPattern.split(string);
</code></pre>

<p>The code in <code>ButtonInfo</code> and <code>StringInfo</code> is nearly the exact same. This is a good hint that you can extract it into a single function.</p>

<p>The switch can be simplified by letting the duplicate cases fall through:</p>

<pre><code>switch(lastChar){
    case "0" : case "1" : case "2" : 
    case "3" : case "4" : case "5" : 
    case "6" : case "7" : case "8" : 
    case "9" : isLastCharacterNumber = true; break; 

    case "+" : case "-" : case "*" : 
    case "/" : isLastCharacterOperator= true; break; 

    case "." : isLastCharacterDot = true; break; 

    default : isInvalid = true; break;
    //again don't just print to console but let calling code know there was an error

}
</code></pre>

<p>However instead of a series of flags you can instead use an enum to specify what type it is. This lets you use a switch instead of the nested if-else you currently have. This is also a solution for the duplicate code; create a single static public function that returns said enum.</p>

<p>Your view creation requires that the button list is in a particular order. As is you can update it by using a for loop:</p>

<pre><code>for(int i = 0; i&lt; buttonList.size;i++){
    gbc.gridx = i % 4;
    gbc.gridy = 2 + i / 4;
    add(buttonList.get(i), gbc);
}
</code></pre>

<p>Extending this you can split the list up in numbers and operators and use 1 loop for the numbers 1-9 like above (with 3 replacing 4): and place the operators and 0 separately.</p>
    </div>