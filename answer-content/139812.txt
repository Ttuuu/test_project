<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Docstring</h2>

<p>Your docstring is nice and descriptive.  However, you have examples that look like doctests but they fail as doctests.  One problem is that outputs contain Unicode strings, which must be written as <code>u'abc'</code>.  Another problem is that expected exceptions have to be indicated <a href="//stackoverflow.com/a/12609/1157100">like this</a>.  Also, the definition of <code>class A</code> needs to be written using <code>...</code> continuation lines.</p>

<h2>Implementation</h2>

<p>Flag variables are usually a bad idea.  You don't need <code>success</code> at all here.</p>

<p>You want to try three lookup methods until one succeeds.  It could be done more elegantly using iteration rather than nesting.</p>

<pre><code># coding=utf-8
from __future__ import unicode_literals
import collections
import operator

_default_stub = object()


def deep_get(obj, path, default=_default_stub, separator='.'):
    """Gets arbitrarily nested attribute or item value.

    Args:
        obj: Object to search in.
        path (str, hashable, iterable of hashables): Arbitrarily nested path in obj hierarchy.
        default: Default value. When provided it is returned if the path doesn't exist.
            Otherwise the call raises a LookupError.
        separator: String to split path by.

    Returns:
        Value at path.

    Raises:
        LookupError: If object at path doesn't exist.

    Examples:
        &gt;&gt;&gt; deep_get({'a': 1}, 'a')
        1

        &gt;&gt;&gt; deep_get({'a': 1}, 'b')
        Traceback (most recent call last):
            ...
        LookupError: {u'a': 1} has no element at 'b'

        &gt;&gt;&gt; deep_get(['a', 'b', 'c'], -1)
        u'c'

        &gt;&gt;&gt; deep_get({'a': [{'b': [1, 2, 3]}, 'some string']}, 'a.0.b')
        [1, 2, 3]

        &gt;&gt;&gt; class A(object):
        ...     def __init__(self):
        ...         self.x = self
        ...         self.y = {'a': 10}
        ...
        &gt;&gt;&gt; deep_get(A(), 'x.x.x.x.x.x.y.a')
        10

        &gt;&gt;&gt; deep_get({'a.b': {'c': 1}}, 'a.b.c')
        Traceback (most recent call last):
            ...
        LookupError: {u'a.b': {u'c': 1}} has no element at 'a'

        &gt;&gt;&gt; deep_get({'a.b': {'Привет': 1}}, ['a.b', 'Привет'])
        1

        &gt;&gt;&gt; deep_get({'a.b': {'Привет': 1}}, 'a.b/Привет', separator='/')
        1

    """
    if isinstance(path, basestring):
        attributes = path.split(separator)
    elif isinstance(path, collections.Iterable):
        attributes = path
    else:
        attributes = [path]

    LOOKUPS = [getattr, operator.getitem, lambda obj, i: obj[int(i)]]
    try:
        for i in attributes:
            for lookup in LOOKUPS:
                try:
                    obj = lookup(obj, i)
                    break
                except (TypeError, AttributeError, IndexError, KeyError,
                        UnicodeEncodeError, ValueError):
                    pass
            else:
                msg = "{obj} has no element at '{i}'".format(obj=obj, i=i)
                raise LookupError(msg.encode('utf8'))
    except Exception:
        if _default_stub != default:
            return default
        raise
    return obj
</code></pre>

<p>Consider requiring <code>path</code> to be an iterable that is already split by the caller.</p>
    </div>