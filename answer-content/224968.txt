<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<ul>
<li>Have I made any rookie mistakes or committed major sins against Verilog style?</li>
</ul>
</blockquote>
<p>Overall it is coded very well and easy to read, no Verilog sins (unlikely to synthesize if there were). Clean Verilog-2001 syntax utilizing ANSI style header and <code>@*</code>.</p>
<p>The only potential error I could spot (without building a testbench) is with <code>f_pc</code>, <code>regs</code>, <code>e_*</code>, and most <code>d_*</code> registers are not assigned in the reset condition. On FPGA this will typically initialize to 0, but will not be reset if <code>reset</code> comes any time later. Typically flops with resets and flops without reset are assigned in separate always blocks.</p>
<p>To make live a little easier with accidental missing resets, there is an Emacs has a plug-in called <a href="https://www.veripool.org/wiki/verilog-mode" rel="nofollow noreferrer">Verilog-mode</a> which can generate reset assignments with <code>/*AUTORESET*/</code>; as well as other expansion features. Vim can utilize it to with wrapper <a href="https://github.com/vim-scripts/verilog_emacsauto.vim" rel="nofollow noreferrer">script</a>; something similar may exist for other editors.</p>
<p>I would suggest making sure all numeric literals have explicit width and radix (ex  the <code>`ALU_*</code> values should start with <code>4'd</code>, <code>cycle &lt;= cycle + 1'b1;</code>, <code>pc &lt;= pc + 4'd4</code>). It will not change anything but can reduce warning (especially in lint tools).</p>
<blockquote>
<ul>
<li>Are there any ways I can improve the maximum clock/overall performance, without complicating the code too much?</li>
</ul>
</blockquote>
<p>Look are the timing report to get an idea where the bottleneck(s) are.</p>
<p>If the bottleneck is related to decoding the muxes, then consider one-hot parallel decoding. This will require more gates but can save timing.</p>
<p>If the bottleneck is related to some heavy computation, then consider moving some of the logic to an earlier stage; having the data ready even if it will ignored. This will also take up more gates. It is also likely to make the code more complicated then intended, but if needed then it is needed.</p>
<p>There is a point of diminishing return and more tweaks can become departmental. Adding too much logic make routing more challenging which can also impact timing/performance. And if the design gets to big, it won't fix on the FPGA. The synthesis report should give some clues to this.</p>
<blockquote>
<ul>
<li>Will explicitly using the undefined value (x) in places where the values do not matter actually help the synthesis tool to generate less logic? (An example would be the default case in the ALU.)</li>
</ul>
</blockquote>
<p>It <em>sometimes can</em>, but in my experience it is can cause more challenges then benefits. As the X propagates in simulation, it will eval as false in an condition statements. There is no X in hardware, it will be seen as 1 or 0, so it could take a different branch when evaluated in any condition. There are X propagation simulation tools/add-ons/plug-ins that can help, but they cost money.</p>
<p>If the testbench is robust then randomization could be used an X-prop alternative (ex: <code>d = `ifdef SYNTHESIS 32'dx `else $random(...) `endif ;</code>).</p>
<p>Assigning it to a known value normally doesn't have negative impact and makes debugging a bit easier.</p>
<hr>
<p><strong>Other comments:</strong></p>
<p>Consider a two-always block coding style by keeping the synchronous assignment simple and moving the algorithmic logic for FETCH, DECODE, EXECUTE, and WRITE into a combinational block. This would separating the present state and next state values. It is a bit of this is personal choice and the opinion of person you were taught by (as well as the teacher of the teacher). This <a href="http://www.sunburst-design.com/papers/CummingsICU2002_FSMFundamentals.pdf" rel="nofollow noreferrer">paper</a> by Cliff Cummings (as well as other <a href="http://www.sunburst-design.com/papers/" rel="nofollow noreferrer">papers</a>) was a major influence for my coding style and many of my colleagues.</p>
<p>Consider enabling SystemVerilog if your FPGA supports it. Use a package and enums replace the macros (macros have change of name collision with bigger projects, especally when using code from other people). Be more explicit with intention by <code>always_ff</code> and <code>always_comb</code>. Part of the <code>decoder</code> could be simplified using structs and unions.</p>
    </div>