<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include &lt;random&gt;
std::default_random_engine              generator;
</code></pre>

<p>If you require portable and reproducible results from  your random engine, consider specifying the exact random engine you want instead of relying on an implementation-defined alias.</p>

<pre><code>// GCC &amp; Clang
using minstd_rand0 = linear_congruential_engine&lt;uint_fast32_t, 16807, 0, 2147483647&gt;;
using default_random_engine = minstd_rand0;

// MSVC
using default_random_engine = mt19937;
</code></pre>

<hr>

<pre><code>std::uniform_real_distribution&lt;double&gt;  distribution(0,1);
</code></pre>

<p>For distributions, the standard doesn't require the result to be reproducible and identical across all implementations.  If you care for portability, you'll need to write/copy the specific distribution behavior you want.</p>

<hr>

<pre><code>inline double getRandDart() {return distribution(generator);}

// A dart thrown has a random x/y value in the range 0-&gt;1 (top right quadrant).
// A dart is outside the circle if x^2 + y^2 &gt; 1  (note 1^2 is 1)
</code></pre>

<p>This is an example of where the comment doesn't match the function. The function <code>getRandDart()</code> doesn't return a dart. It returns a single magnitude instead of a Dart/Vec2d.</p>

<hr>

<pre><code>    for(long iteration = 0; iteration &lt;= 10'000'000'000; ++iteration) {
</code></pre>

<p>Did you intend for ten billion and one iterations (<code>&lt;=</code>)?</p>

<hr>

<pre><code>    long     countInSquare   = 0;
    for(long iteration = 0; iteration &lt;= 10'000'000'000; ++iteration) {
        countInSquare   += 1;
        if (iteration % 10'000'000 == 0) {
             std::cout &lt;&lt; iteration &lt;&lt; " " &lt;&lt; (4.0 * countInCircle / countInSquare) &lt;&lt; "\n";
</code></pre>

<p>Do you need <code>countInSquare</code>? Both <code>iteration</code> and <code>countInSquare</code> are maintaining the same count.</p>

<p>When you don't care for the size in which an integer can represent because the value is countable, simply use <code>int</code>. In this case, you went with <code>long</code> as you needed a larger integral type to hold a value that couldn't be represented by an <code>int</code>. Compiling in an environment where <code>long</code> is 32-bit (windows) would obviously be bad. In these cases, use a specific fixed width integer type from <code>&lt;cstdint&gt;</code>. <code>auto</code> also works in determining the correct type (64-bit <code>long</code> on gcc/clang, 64-bit <code>long long</code> on msvc).</p>

<hr>

<pre><code>        countInCircle   += (d &gt;= 1.0) ? 0 : 1;
</code></pre>

<p>Compilers are nice nowadays and optimized your ternary add.</p>

<pre><code>        countInCircle   += (d &lt; 1.0);
</code></pre>

<hr>

<p>You can tighten the inner loop by reorganizing the operations. Rather than checking every iteration to report, tile the iterations into groups that calculate between reports.</p>

<pre><code>    constexpr auto totalIterations = 10'000'000'001;
    constexpr auto reportInterval = 10'000'000;
    constexpr auto reports = std::div(totalIterations, reportInterval);

    while (reports.quot--) {
        for (auto iteration = 0; iteration &lt; reportInterval; ++iteration) {
            const auto x = getRandDart();
            const auto y = getRandDart();
            const auto d = x * x + y * y;
            countInCircle += (d &lt; 1.0);
        }
        countInSquare += reportInterval;
        std::cout &lt;&lt; countInSquare &lt;&lt; " " &lt;&lt; (4.0 * countInCircle / countInSquare) &lt;&lt; "\n";
    }

    while (reports.rem--) {
        const auto x = getRandDart();
        const auto y = getRandDart();
        const auto d = x * x + y * y;
        countInCircle += (d &lt; 1.0);
    }

    std::cout &lt;&lt; "\n\n" &lt;&lt; std::setprecision(9) &lt;&lt; (4.0 * countInCircle / totalIterations) &lt;&lt; "\n";
</code></pre>
    </div>