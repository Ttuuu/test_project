<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It seems clear that you haven't split up the functionality in methods. That makes the code hard to maintain, more error prone, more likely to contain duplicate code fragments.</p>

<p>It is very clear that you mix input / output and functionality: the calculations. Those are normally split into separate classes. Classes should be relatively small, maybe a hundred lines max; some persons even like much smaller classes than that - but it is possible to overdo it, in my opinion.</p>

<p>The architecture is already addressed, so I'll just talk about the code / Java specific issues that I see:</p>

<pre><code>/**
 * 
 */
package main;
</code></pre>

<p>That's not a good name for a package at all. Use a reversed web address or at least something that reflects the contents of the code.</p>

<p>The JavaDoc comment should not be there at all (you can create your own <code>package-info.java</code> if you want to document the package; we cannot have classes within the package redefine the package description after all.</p>

<pre><code>public class Five31 {
</code></pre>

<p>That's a good name if the rest of the community understands it. However, if the class only contains static methods then the class should be <code>final</code> and there should be a private zero argument constructor to avoid instantiation.</p>

<pre><code>    /**
     * @param args
     */
</code></pre>

<p>Either remove it, put a TODO in it or describe it, but don't leave it hanging.</p>

<pre><code>    public static void main(String[] args) throws IOException {
</code></pre>

<p>Maybe your users won't be all that happy to have to deal with <code>IOException</code> themselves.</p>

<pre><code>        //initialize 1RM variables. Also generate arrays that are constant every month.
</code></pre>

<p>1RM, oh, right. Why not use full words? Same for your variable definitions. Not everybody will get these acronyms. Expect programmers, not athletes.</p>

<pre><code>        double squat = 0, bench = 0, dl = 0, ohp = 0;
</code></pre>

<p>Variable definitions should be defined where they occur in Java, and they should not be filled with default values such as <code>0</code>. A compiler error is better than forgetting to assign them a value after all.</p>

<pre><code>        double week1[] = {.65, .75, .85};
        ...
</code></pre>

<p>These should be defined as <code>private static final double[] WEEK1 = {.65, .75, .85}</code>, the Java equivalent of constant values. In Java, prefer to put the brackets after the type, so that it is clear that the type is <code>double[]</code>.</p>

<pre><code>        welcome();
</code></pre>

<p>Thank you, but what about <code>printWelcome</code>?</p>

<pre><code>        exercisee a = new exercisee();
</code></pre>

<p>Bad class name, should start with an uppercase character. And the excercisee should probably have some defining characteristics (such as a name or ID) right from the start? And calling the excercisee <code>a</code> is just lazy. I'd expect something like <code>Exercisee exercisee = new Exercisee(name);</code>.</p>

<pre><code>        while(squat &lt; 45){
            squat = input.nextDouble();
            if(squat &lt; 1) {
                System.out.println("Please input a value greater than 45 lbs.");
            }
        }
</code></pre>

<p>Now the <code>if</code> statement looks for values <code>&lt; 1</code> and the <code>while</code> looks for values <code>&lt; 45</code>. That's weird, isn't it? And note that you are now assigning the value already; you can simply put <code>double squat</code> right in front of the <code>while</code> loop and everything will run fine.</p>

<pre><code>        squat = roundTo5(squat);
</code></pre>

<p>If you would retrieve <code>squat</code> in a function <code>double maxSquat = retrieveMaxSquat()</code> then you'd just have a single line left, and squat would not have to be assigned a value multiple times.</p>

<pre><code>        System.out.println("Calculating training maxes for the cycles...");
</code></pre>

<p>Are you expecting this to take weeks?</p>

<pre><code>        double tSquat=0, tBench = 0, tDL = 0, tOHP = 0;
</code></pre>

<p>Ah, forgetting to call it <code>maxSquat</code> is biting you now, right? Same as before, declare variables where they are needed.</p>

<pre><code>        tSquat = (.9 * a.getMaxSquat());
</code></pre>

<p>Ah, <code>0.9</code>, the ultimate magic value. This should be constant (<code>private static final double SOMETHING = 0.9</code>).</p>

<hr>

<p>... uh, now I ran out of time and steam, there is plenty that can be enhanced, but it would take another day for me to pick this apart. Maybe I'll refactor later.</p>
    </div>