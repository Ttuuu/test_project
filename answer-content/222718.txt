<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your second solution is good and fast, but you asked about more elegant solution, so I am suggesting mine. Firstly, I solved this task by <strong>Python</strong>, then convert all logic into <strong>Javascript</strong>. It is a little slower, than your (20 ms) and use more memory, but I think it more straightforward and understandable.</p>

<p>The code only answers do not liked on this site, so I add some comparisons:</p>

<ul>
<li><p><strong>Algorithm.</strong> Both algorithms are similar but:</p>

<ul>
<li><strong>Mine:</strong> keeps track of every number changing positions. The <code>start1</code> position changes every time the number was changed, so I always know the position, where the previous number was started. The <code>start2</code> position changes only when third number occurs, so I just subtract the <code>start2</code> from the current index and get the needed two number sequence length.</li>
<li><strong>Your:</strong> keeps track of last occurrences the first and second numbers, so you miss their start positions, and thus, you should use the <code>count</code> variable for storing the length of the current two number sequence. When the third number appears, you need to calculate the value of the last uninterruptible one number sequence by <code>Math.abs(first - second)</code>. Also, you don't know which number was last - <code>first</code> or <code>second</code>, so the <code>Math.abs</code> function is needed.</li>
</ul></li>
<li><p><strong>The way of access to array items.</strong> </p>

<ul>
<li><strong>Mine:</strong> uses the <strong>iterator</strong> - <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer">for...of statement</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries" rel="nofollow noreferrer">Array.entries()</a>. It relieves us from <code>tree[i]</code> and <code>tree[second]</code> like constructions.</li>
<li><strong>Your:</strong> Uses <strong>counter and array indexes</strong> to access the needed item.</li>
</ul></li>
</ul>

<p><strong>The Javascript code:</strong></p>

<pre><code>var totalFruit = function(tree) {
    let n1 = -1;
    let n2 = -1;

    let start1 = 0;
    let start2 = 0;

    let maxim = 1;
    # Add extra element in the end of array (which is not occured in array)
    # to get rid of the second 'Math.max(maxim, k - start2)' call
    tree.push(-2);

    for (let [k, num] of tree.entries()) {
        if (num !== n1) {
            if (num !== n2) {
                maxim = Math.max(maxim, k - start2);
                start2 = start1;
            }

            n2 = n1;
            n1 = num;

            start1 = k;
        }
    }

    return maxim;
}
</code></pre>

<p><strong>The original Python code:</strong></p>

<pre><code>class Solution:
    def totalFruit(self, tree):
        n1 = -1
        n2 = -1

        start1 = 0
        start2 = 0

        maxim = 1
        tree.append(-2)

        for k, num in enumerate(tree):
            if num != n1:
                if num != n2:
                    maxim = max(maxim, k - start2)

                    start2 = start1

                n2 = n1
                n1 = num

                start1 = k

        return maxim
</code></pre>
    </div>