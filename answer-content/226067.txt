<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, fixing a few of the errors that I noted in the comments and altering the formatting a bit, I have:</p>

<pre><code>(defn invert-number [n]
  (+ 1 (* -1 n)))

(defn number-complement [num]
 (let [numstr (.toString num 2)
       bits (map (comp invert-number js/parseInt) numstr)
       complement-bits (reduce str bits)]

   (js/parseInt complement-bits 2)))

(println (number-complement 10)
         (number-complement 12)
         (number-complement 15)
         (number-complement 993061001)
         (number-complement 123))

; 5 3 0 80680822 4
</code></pre>

<p>I prefer to have <code>defn</code> function definitions on a separate line, and have at least one empty line between function definitions.</p>

<hr>

<p><code>invert-number</code> can be fixed up a bit. <code>-</code> can actually be used as an unary operator to do a negation, and <code>inc</code> is arguably more idiomatic than <code>+ 1</code> unless you think you may need to add to the equation later. I changed it to:</p>

<pre><code>(defn invert-number2 [n]
  (inc (- n)))
</code></pre>

<p>Since the entire purpose of the function though seems to be just toggling between 0 and 1, I'd just write it as a more explicit toggle:</p>

<pre><code>(defn invert-number2 [n]
  (if (zero? n) 1 0))
</code></pre>

<p>I feel like that conveys the purpose much clearer. I'd expect it to perform similarly too.</p>

<hr>

<p>You can get rid of the first call to <code>js/parseInt</code> by just using <code>int</code>:</p>

<pre><code>(map (comp invert-number2 int) numstr)
</code></pre>

<p>Honestly, I don't know why this works. <code>int</code> here is not acting like it does in Clojure (which is what I'm familiar with; I don't actually know Cljs). I'm guessing this is due to some weirdness on Javascript's end. If I plug that into a Cljs transpiler, I get some weird clues:</p>

<pre><code>(int "192837465")
</code></pre>

<p>becomes</p>

<pre><code>("192837465" | (0));
</code></pre>

<p>Because... Javascript happened?</p>

<p>The second <code>js/parseInt</code> is a little harder to deal with though because of the radix argument. I'd just stick with what you have.</p>

<hr>

<p><code>(reduce str bits)</code> can be changed to <code>(apply str bits)</code>. Many variadic functions automatically manually reduce over their arguments (like <code>str</code> and <code>+</code>), so you you can alternatively apply the list directly to the function. <code>(apply str</code> makes a little more sense to me, but that's likely because I've written that many times before.</p>

<hr>

<p>In the end, I ended up with:</p>

<pre><code>(defn invert-number2 [n]
  (if (zero? n) 1 0))

(defn number-complement2 [num]
 (let [numstr (.toString num 2)
       bits (map (comp invert-number2 int) numstr)

       complement-bits (apply str bits)]

   (js/parseInt complement-bits 2)))

(println (number-complement2 10)
         (number-complement2 12)
         (number-complement2 15)
         (number-complement2 993061001)
         (number-complement2 123))

; 5 3 0 80680822 4
</code></pre>
    </div>