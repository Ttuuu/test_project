<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your current algorithm is very inefficient. I would use the following algorithmic approach:</p>

<pre><code>def answer(x, y):
    y_diff = y - 1
    corner = x + y_diff
    id = corner * (corner + 1) // 2
    id -= y_diff
    return str(id)
</code></pre>

<p>This method takes advantage of basic algebra. It uses the <a href="https://en.wikipedia.org/wiki/Arithmetic_progression#Sum" rel="nofollow noreferrer">sum of the arithmetic progression</a> of x to calculate the id of the bottom right corner, and then subtracts the difference of the input coordinate from the bottom right corner. The reason it take the y difference is because moving 45 degrees diagonally down right is equivalent to moving down (y-1) units and moving right (y-1) units. Is is much more efficient than your current method: instead of an increasing numbering of iterations through <code>range</code>, it does one multiplication.</p>

<h1>Benchmark</h1>

<p>Testing your code compared to mine, mine runs about 10,000 to 100,000 times faster for random values of x and y between 1 and 100000. This is a very significant performance difference.</p>

<p>Additionally, in benchmarking, I discovered a slight bug in your current implementation. I didn't analyze your implementation deeply to understand it, but it seems that your current implementation returns an output corresponding to the reversed inputs (so for example, if I input <code>(3, 2)</code>, the output is correct for <code>(2, 3)</code>.) I suspect this may have been missed in your personal testing because the input is reversed of traditional coordinate order, i.e. you ask for y coordinate input before you ask for x coordinate input. I fixed this in my testing by switching all occurrences of x (and related variables) with y and vice versa.</p>

<h1>Some notes</h1>

<blockquote>
  <p>Write a function answer(x, y) which returns the prisoner ID of the bunny at location (x, y).</p>
</blockquote>

<p>So it seems your answer should be in the form:</p>

<pre><code>def answer(x, y):
    # ... algorithm
    return str(output)
</code></pre>

<p>Also, use consistent spacing:</p>

<ul>
<li><code>in_sum =i + 2</code> to <code>in_sum = i + 2</code></li>
</ul>

<p>And take advantage of <code>+=</code>:</p>

<ul>
<li><code>sum_in_x = sum_in_x + range(x)[i]</code> to <code>sum_in_x += range(x)[i]</code></li>
<li><code>sum_in_y = sum_in_y + in_sum</code> to <code>sum_in_y += in_sum</code></li>
</ul>
    </div>