<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<p>Your code does not clone a collection. It creates one and assigns the values of the specified source collection to it. It also lacks proper generics to make this usable for other types of collections.</p>

<blockquote>
<pre><code>public T CloneCollection&lt;T&gt;(IEmployees employees) where T : IEmployees, new()
{
    // creates a target collection
    T collection = new T();

    // assigns items from source to target
    foreach (IEmployee employee in employees)
    {
        collection.Add(employee);
    }
    return collection;
}
</code></pre>
</blockquote>

<p>Cloning a collection is <strong>ambiguously</strong> defined. It does not state whether the items should be cloned as well.</p>

<h3>Shallow Clone</h3>

<p>A shallow clone of a collection is a new instance, holding references to the same items as the source collection.</p>

<pre><code>public static T ShallowClone&lt;T, TItem&gt;(T source) where T : ICollection&lt;TItem&gt;, new()
{
    var target = new T();
    foreach (var item in source)
    {
        target.Add(item);
    }
    return target;
}
</code></pre>

<p>I don't really see a use case for this. It's better using common collections or creating overloaded constructors on custom collections that take <code>IEnumerable&lt;T&gt;</code> as input. If your custom collection inherits from <code>List&lt;T&gt;</code> you should take advantage of <code>AddRange</code>.</p>

<h3>Deep Clone</h3>

<p>A deep clone of a collection is a new instance with clones of the source items. Make sure the items implement <code>ICloneable</code>. If you want to provide deep-cloning for items that do not implement this interface, you'd have to create an overload of <code>DeepClone</code> that uses a default strategy for deep-cloning items. This is elaborated <a href="https://stackoverflow.com/questions/129389/how-do-you-do-a-deep-copy-of-an-object-in-net-c-specifically">in this post</a>.</p>

<pre><code>public static T DeepClone&lt;T, TItem&gt;(T source) 
    where T : ICollection&lt;TItem&gt;, new()
    where TItem : ICloneable
{
    var target = new T();
    foreach (var item in source)
    {
        target.Add(item == null ? null : item.Clone());
    }
    return target;
}
</code></pre>

<p><em>Checking input for null is left out for brevity.</em></p>
    </div>