<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>struct Transaction
{
    public int startDay;
    public int endDay;
    public int difference;
}
</code></pre>
</blockquote>

<p>This <code>Transaction</code> struct is <em>mutable</em>, and <a href="https://stackoverflow.com/a/441323/1188513">mutable structs are a problem</a>.</p>

<p>Making it <em>immutable</em> isn't very complicated:</p>

<pre><code>public struct Transaction
{
    public Transaction(int startDay, int endDay)
    {
        _startDay = startDay;
        _endDay = endDay;
        _difference = endDay - startDay;
    }

    private readonly int _startDay;
    public int StartDay { get { return _startDay; } }

    private readonly int _endDay;
    public int EndDay { get { return _endDay; } }

    private readonly int _difference;
    public int Difference { get { return _difference; } }
}
</code></pre>

<p>Note the <code>PascalCase</code> naming of public members, and also note that if you're using C# 6, you can use readonly auto-properties to simplify the implementation:</p>

<pre><code>public struct Transaction
{
    public Transaction(int startDay, int endDay)
    {
        StartDay = startDay;
        EndDay = endDay;
        Difference = endDay - startDay;
    }

    public int StartDay { get; }
    public int EndDay { get; } 
    public int Difference { get; }
}
</code></pre>

<p>This will change instantiation from this:</p>

<blockquote>
<pre><code>transactions.Add(new Transaction { startDay = j + 1, endDay = i + 1, difference = i - j });
</code></pre>
</blockquote>

<p>To that:</p>

<pre><code>transactions.Add(new Transaction(j + 1, i + 1));
</code></pre>

<p>Renaming <code>i</code> and <code>j</code> variables to more meaningful names restores the line's readability:</p>

<pre><code>transactions.Add(new Transaction(endDay + 1, startDay + 1));
</code></pre>

<hr>

<p>Don't throw <code>System.Exception</code>:</p>

<blockquote>
<pre><code>if (numberOfDays != sharePrices.Count)
{
    throw new Exception("INVALID INPUT!");
}
</code></pre>
</blockquote>

<p>Instead, throw the most meaningful/appropriate existing exception, or make your own. Here it seems an <code>InvalidOperationException</code> would be perfectly acceptable:</p>

<blockquote>
  <p><em>The exception that is thrown when a method call is invalid for the object's current state.</em> (<a href="https://msdn.microsoft.com/en-us/library/system.invalidoperationexception(v=vs.110).aspx" rel="nofollow noreferrer">MSDN</a>)</p>
</blockquote>

<hr>

<p>The code is hard to follow, because there is <em>a lot</em> happening in that <code>Main</code> method. If you thought stuffing everything in one method was going to save you the overhead of method calls and therefore perform better, you have fallen prey to <em>premature optimization</em> - the algorithm you've implemented has problems much more significant than whatever "overhead" comes with method calls.</p>

<p>Here's how software should be written:</p>

<ol>
<li>Make it <em>work</em></li>
<li>Make it <em>right</em></li>
<li>Make it <em>fast</em></li>
</ol>

<p>There should be <em>at least</em> 3 methods, for minimal abstraction:</p>

<ul>
<li>Collect input</li>
<li>Process input</li>
<li>Produce output</li>
</ul>

<p>I suppose the online tool factors out time spent processing <code>Console.ReadLine</code> calls.</p>

<hr>

<blockquote>
<pre><code>//print -1 if no transactions yield desired profit
if (transactions.Count == 0)
{
    Console.WriteLine("-1");
    continue;
}
//find the transaction which takes least amount of days
if (transactions.Count &gt; 1)
{
    minimumDaysTransaction = transactions.OrderBy(x =&gt; x.difference).First();
}
else if(transactions.Count == 1)
{
    minimumDaysTransaction = transactions[0];
}
</code></pre>
</blockquote>

<p>You never use the empty <code>minimumDaysTransaction</code> value declared outside the loop; that <code>minimumDaysTransaction</code> should be local to each iteration, declared <em>inside</em> the scope of the <code>foreach</code> loop.</p>

<p>The bottleneck is obviously the nested loops - I'd extract the entire body of that <code>foreach</code> loop into its own method, and profile to confirm.</p>

<p>Already by making the struct immutable, you've turned this:</p>

<ul>
<li>Call the <code>Transaction</code> constructor to create an instance of the value type</li>
<li>Compute the <code>startDay</code> value</li>
<li>Compute the <code>endDay</code> value</li>
<li>Compute the <code>difference</code> value</li>
<li>Mutate the <code>startDay</code> public field value</li>
<li>Mutate the <code>endDay</code> public field value</li>
<li>Mutate the <code>difference</code> public field value</li>
</ul>

<p>Into that:</p>

<ul>
<li>Compute the <code>startDay</code> value</li>
<li>Compute the <code>endDay</code> value</li>
<li>Call the <code>Transaction</code> constructor to create an instance of the value type (<code>difference</code> value being computed in the constructor, ensuring consistency)</li>
</ul>

<p>That <em>should</em> be faster already, but not by an order of magnitude at all, since you're still facing a nested loop logic.</p>

<p>The problem constraints on <code>N</code> are such that there are <em>many</em> possible combinations, and building a lookup table <em>seems</em> impractical.</p>

<p>However, you're computing the profits \$D\$ times; each iteration of that <code>foreach</code> loop will re-calculate the same figures over and over again: you'd want to compute them <em>once</em>, and be done with it.</p>

<p>Here's a quick implementation that's not exactly per specs (it <em>does</em> produce the expected <em>buy on day 4, sell on day 5</em> output though) and uses a <code>Tuple&lt;int,int&gt;</code> instead of a <code>Transaction</code> type (IMO the <code>Transaction</code> type is better), but still should give you an idea of what I mean:</p>

<pre><code>static void Main(string[] args)
{
    const int n = 6;
    int[] sharePrices = {3, 1, 2, 1, 4, 5};

    var transactions = new Dictionary&lt;int, List&lt;Tuple&lt;int,int&gt;&gt;&gt;();
    for (var endDay = n - 1; endDay &gt;= 0; endDay--)
    {
        for (var startDay = 0; startDay &lt; endDay; startDay++)
        {
            var profit = sharePrices[endDay] - sharePrices[startDay];
            var transaction = Tuple.Create(startDay + 1, endDay + 1);
            if (transactions.ContainsKey(profit))
            {
                transactions[profit].Add(transaction);
            }
            else
            {
                transactions.Add(profit, new List&lt;Tuple&lt;int, int&gt;&gt; {transaction});
            }
        }
    }

    var targetProfit = 3;
    if (transactions.ContainsKey(targetProfit))
    {
        var result = transactions[targetProfit].OrderBy(trx =&gt; trx.Item2 - trx.Item1).First();
        Console.WriteLine("Buy: day {0}\nSell: day {1}", result.Item1, result.Item2);
    }
    else
    {
        Console.WriteLine("No result :(");
    }
    Console.ReadLine();
}
</code></pre>

<p>In your case that would be a <code>Dictionary&lt;int, List&lt;Transaction&gt;&gt;</code> - the idea is to <em>pre-compute</em> the profit, and group all transactions by profit achieved. Then you can retrieve all the transactions you need with a single \$O(1)\$ dictionary lookup, so each <code>expectedProfit</code> iteration is exactly <em>instant</em> - all that's left to do is sort the list of transactions so that the one with smallest number of days comes up first, and output that transaction as your result.</p>

<p>And meanwhile you've only iterated and computed the possible transactions once, instead of once <em>per target profit value</em>.</p>
    </div>