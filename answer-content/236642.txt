<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You definitely should remove <em>all</em> <code>Console.WriteLine</code> operations that are executed during the measuring. You want to measure pure excecution time. </p>

<p>Also thread creation/management costs time i.e. overhead. When using <code>Thread</code> (executing <code>PrintLoopWithThread</code>) you started the <code>Stopwatch</code> <em>BEFORE</em> you created the threads, which is correct, because you want to include the overhead of each parallelization method. But when creating <code>Task</code> instances (when executing <code>PrintLoopWithTaskWaitAll</code>), you started the <code>Stopwatch</code> <em>AFTER</em> their creation, which leads to ignore instantiation costs i.e. overhead. The results are therefore not comparable at all. </p>

<p>Furthermore keep in mind that <code>Parallel.For</code> performs bad for small workloads:</p>

<blockquote>
  <p>If the body of the loop performs only a small amount of work, you may find that you achieve better performance by partitioning the iterations into larger units of work. The reason for this is that there are two types of overhead that are introduced when processing a loop: the cost of managing worker threads and the cost of invoking a delegate method. In most situations, these costs are negligible, but with very small loop bodies they can be significant.</p>
</blockquote>

<p>Threading can slow down operations/applications significantly. For efficient multithreading it's not enough to use a fixed number of threads. You usually use smart partitioning/ workload balancing algorithms, thread pooling and metrics to find the pivot when multithreading becomes too expensive i.e. wrong choice. It's not simple to implement efficient multithreading or test efficiency. </p>

<p>Most of the time tests are only relevant for a special scenario - the tested scenario. So, it'S best to test at least both expected ends: a worst-case sccenarion and a best-case scenario. You maybe will come to the conclusion to use dynamic workload based multithreading (like <code>PLINQ</code> does) and only use threads under certain conditions.<br>
The best is to test with the real code you are trying to parallelize. <em>999</em>  iterations is way too few to have significant impact - at least when running no-ops. You want CPU bound heavy loads, but 999 "empty" iterations is just a blink in terms of CPU workload.</p>
    </div>