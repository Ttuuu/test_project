<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>... "too mathematical" and "lacking object oriented principles"</p>
</blockquote>

<p>These go hand in hand. An algorithm is what it is. Not that it is or is not too mathematical but that necessarily busy, complex, or obscure code is not wrapped in code that behaves (exposed) in subject/business terms. </p>

<p>For example I think method and variable naming has a distinct algorithmic feel. Also the good start with <code>{"Spock, "Lizard" ...}</code> is not exploited, it's all index referencing.</p>

<h2>--------------</h2>

<p><strong>Object Oriented DNA</strong></p>

<p>The general goal of writing in subject matter terms starts with data structures that can be (indeed must be) exploited in an OO way. Subsequent code layers naturally tend to exhibit OO tendencies when we <em>start</em> with OO.  Should technical limitations require "less robust" structures like a list of strings (is there anything worse!?), wrapping that in its own class will pay dividends.</p>

<hr>

<pre><code>class Element { 
    protected List&lt;string&gt; elements = new List&lt;string&gt;() {"Spock"...};

    public string Spock { get { return elements[0]; } }

    // exposing the low-level, abstract foundation
    // is definitely a code smell
    int indexOf (string thisGuy) { ... }
</code></pre>

<p>If we really must have a list of strings. Benefits for readability, error avoidance, and ease of use are easy to imagine.</p>

<hr>

<pre><code>enum Element = {Spock, Lizard, ...}
</code></pre>

<p>has better coding expressive power, avoids all string pitfalls (typos, CasInG), is type safe, and we can work with underlying <code>int</code> values. Also, <code>enum</code> values can be XOR'ed to group them; way cool.</p>

<hr>

<pre><code>Dictionary&lt;Element, Element&gt; Rules = new Dictionary&lt;Element, Element&gt;()
    { Element.Rock, Element.Scissors},
    { Element.Scissors, Element.Paper}, ...
</code></pre>

<p>This defines "Rock beats Scissors", "Scissors beats Paper", etc. Since some <code>Element</code>s defeat 2 or more things the dictionary value maybe should be a collection of some kind or even an <code>enum</code> grouping (see XOR comment above).</p>

<p>If the <code>Rules</code> value must be a <code>List&lt;Element&gt;</code>, let's say, then a class is probably in order. Client code should not be allowed or required(!) to rifle through <code>Rules</code> objects. </p>

<hr>
    </div>