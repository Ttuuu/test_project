<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The consensus from the never-ending goto debate is pretty much that "yeah there are cases where you can use goto harmlessly when branching non-conditionally downwards, but those cases could as well be written without goto too".</p>

<p>So your code isn't horrible, but it isn't pretty either - it looks like the old "on error goto..." error handling pattern used by BASIC. At any rate, all the jumping around is redundant and makes the code needlessly hard to read.</p>

<p>Since you are updating global variables in several places, you might as well have rewritten the function as this:</p>

<pre><code>unsigned int getAddress(unsigned int virtualAddress)
{
  const unsigned int pageNumber = getPageNumber(virtualAddress);
  const unsigned int pageOffset = getPageOffset(virtualAddress);

  if(getFrameFromTLB(pageNumber) != TLB_HIT)
  {
    if(getFramePageTable(pageNumber) != PAGE_HIT)
    {
      //page table miss, value not in memory, request physical memory to load value
      frame = loadValueFromBackingStore(pageNumber);

      //update page table with new frame
      insertIntoPageTable(pageNumber, frame);
    }
  }

  return frame * PAGE_SIZE + pageOffset;
}
</code></pre>

<p>This assuming that the called functions update the global variables instead, and <code>TLB_HIT</code> and so on is some enum with error codes. There are other ways you can rewrite it too.</p>
    </div>