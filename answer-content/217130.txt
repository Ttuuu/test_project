<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can directly use <code>apply</code> on the grouped dataframe and it will be passed the whole group:</p>

<pre><code>def clean_df(df, v_col='value', other_col='other_value'):
    '''This function is just a made up example and might 
       get more complex in real life. ;)
    '''
    prev_points = df[v_col].shift(1)
    next_points = df[v_col].shift(-1)
    return df[(prev_points &gt; 50) | (next_points &lt; 20)]  

df.groupby('id').apply(clean_df).reset_index(level=0, drop=True)
#    id  other_value  value
# 0   1          2.3     70
# 1   1          3.3     10
# 4   2          5.0     50
</code></pre>

<p>Note that I had to give the other arguments default values, since the function that is applied needs to have only one argument. Another way around this is to make a function that returns the function:</p>

<pre><code>def clean_df(v_col, other_col):
    '''This function is just a made up example and might 
       get more complex in real life. ;)
    '''
    def wrapper(df):
        prev_points = df[v_col].shift(1)
        next_points = df[v_col].shift(-1)
        return df[(prev_points &gt; 50) | (next_points &lt; 20)]  
    return wrapper
</code></pre>

<p>Which you can use like this:</p>

<pre><code>df.groupby('id').apply(clean_df('value', 'other_value')).reset_index(level=0, drop=True)
</code></pre>

<p>Or you can use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> with your <code>clean_df</code>:</p>

<pre><code>from functools import partial

df.groupby('id') \
  .apply(partial(clean_df, v_col='value', other_col='other_value')) \
  .reset_index(level=0, drop=True)
</code></pre>
    </div>