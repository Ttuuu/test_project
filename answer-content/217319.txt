<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Strictly speaking you can't assume that the various characters are in range, portably. The only characters actually guaranteed to be located in a continuous range in the symbol table are <code>'0'</code> to <code>'9'</code>. That's mostly a nitpick though, since 99.9% of all systems are ASCII or UTF.</p>

<p>What's more serious is that this look-up is slow. You have numerous branches which the CPU must execute. If you have to call this function repeatedly from a loop, it will be performance-heavy. Instead, you can replace all of this with a look-up table.</p>

<p>For boolean checks, you should be using <code>bool</code>.</p>

<p>A fixed function might look like this:</p>

<pre><code>#include &lt;stdbool.h&gt;

bool isdelimit (char ch)
{
  ch &amp;= 0x7F; // ensure 7 bit 

  const bool DELIMIT[128] = 
  {
    ['\n'] = true,
    ['\t'] = true,
    [' ']  = true,
    ['\0'] = true,
    // ...
  };
  return DELIMIT[ch];
}
</code></pre>

<p>The table <code>DELIMIT</code> will per default initialize all items to <code>false</code> save for those that you explicitly initialize. By using the character value as the search key, the algorithm turns branchless and efficient.</p>

<p>The above trick with using designated initializers means that you only need to type out those delimiters you are interested in, rather than typing out a big table of 127 values.</p>

<p>Also check out the rarely used but 100% standard C functions <code>strpbrk</code> and <code>strcspn</code> (string.h) that can be used for this very purpose too.</p>
    </div>