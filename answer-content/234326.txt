<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Small review</p>

<pre><code>inline
void    *alx_mallocarray    (ptrdiff_t nmemb, size_t size)
{

    if (nmemb &lt; 0)
        goto ovf;
    if ((size_t)nmemb &gt; (SIZE_MAX / size))
        goto ovf;

    return  malloc(size * (size_t)nmemb);
ovf:
    errno   = ENOMEM;
    return  NULL;
}
</code></pre>

<p><code>(SIZE_MAX / size)</code> overflows on  pathological <code>size==0</code> - code lacks protection.</p>

<p>Code does not certainly set <code>errno</code> when <code>malloc(non_zero)</code> returns <code>NULL</code>.  Suggest doing so if other code uses <code>errno   = ENOMEM;</code></p>

<p><code>ENOMEM</code> is not part of standard C.</p>

<p>Pedantic: <code>(size_t)nmemb</code> potentially truncates.  Could use <code>(uintmax_t)nmemb</code> instead to quiet mixed type warnings.</p>

<p><code>malloc(0)</code> returning a non-<code>NULL</code> or <code>NULL</code> is often an annoying issue.   I avoid with explicit code:</p>

<pre><code>if (size == 0) size = 1;  //allocate 1
// or depending on upper code use.
if (size == 0) return NULL.
</code></pre>
    </div>