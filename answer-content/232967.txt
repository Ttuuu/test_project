<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This isn't object-oriented code. In fact the only difference between this implementation and a VBA macro popping up a modal <code>UserForm</code> that completely runs the show, is the language and framework involved: this anti-pattern has a name, and that's "<strong>Smart UI</strong>".</p>

<p>The biggest problem with it, is that the entire game logic is completely intertwined with UI concerns, which means none of the game logic can be unit-tested.</p>

<hr>

<h3>Form1.Designer.cs</h3>

<p>Being a designer-generated code file, none of this code should be manually edited, and could have been omitted. The nice thing about including it, is that it becomes reviewable code, because we get to see what you've named all the controls.</p>

<p>I like that you've given a meaningful name to the <code>MineFieldTable</code> layout panel, but these also deserve a meaningful name:</p>

<pre><code>this.Name = "Form1";
private System.Windows.Forms.TextBox TB_tableDimension1;
private System.Windows.Forms.TextBox TB_tableDimension2;
private System.Windows.Forms.Label label2;
private System.Windows.Forms.Label label3;
private System.Windows.Forms.Label label1;
</code></pre>

<p>The last thing you want to see in your form's code-behind, is stuff like <code>label2</code> and <code>TB_tableDimension1</code> - it says nothing about what the purpose of <code>label2</code> is, and leaves the reader assuming. You seem to want to use some Hungarian Notation prefixing scheme (<code>Button</code> -&gt; <code>Btn</code>; <code>TextBox</code> -&gt; <code>TB_</code>), but the scheme is not consistent (where's the type prefix for the <code>MineFieldTable</code>? Why does <code>TB_</code> have an underscore, but not <code>Btn</code>? Why is <code>TB</code> all-caps, but <code>Btn</code> is <code>PascalCase</code>?)... make your life simpler and drop this prefixing habit.</p>

<p>Consider using a fully spelled-out postfix instead:</p>

<ul>
<li><code>TableHeightBox</code> vs <code>TB_tableDimension1</code></li>
<li><code>TableWidthBox</code> vs <code>TB_tableDimension2</code></li>
<li><code>CreateButton</code> vs <code>BtnCreate</code></li>
<li><code>MineFieldPanel</code> vs <code>MineFieldTable</code></li>
<li><code>MineCountBox</code> vs <code>TB_mineCount</code></li>
<li><code>MinesLabel</code> vs <code>label3</code></li>
<li><code>GridSizeLabel</code> vs <code>label2</code></li>
<li><code>WhateverThatIsLabel</code> vs <code>label1</code> (why is there a label with just an "X" in it anyway?)</li>
</ul>

<hr>

<h3>Form1.cs</h3>

<p>As mentioned above, the form is doing way, way too many things. In object-oriented code, I would expect the form's code-behind to interact with the game state. Here, the form's controls <em>are</em> the game state.</p>

<p>You will want to heavily refactor everything in here, and pull most of the logic into other classes - and to achieve this, you'll need to actually <em>model</em> the game state, so that the code that's responsible for evaluating game state doesn't need to care for buttons and textboxes.</p>

<p>The first thing I would expect in a Minesweeper-type game, is a class that respresents a grid position and its state.</p>

<p>This is your game state:</p>

<pre><code>int[] panelArray = new int[rowCount * columnCount]; //track the panel layout, 0= empty, 1=mine, 2=opened
</code></pre>

<p>..but it's local to the method creating the controls/grid, nothing else can access it!</p>

<p>You see the problem with intertwined game and UI logic, is that...</p>

<blockquote>
<pre><code>    if (currentButton2.Text != ".") //if mine was not flagged, show as usual
    {
        currentButton2.FlatStyle = FlatStyle.Flat;
        currentButton2.BackgroundImage = Resources.mine;
    }
</code></pre>
</blockquote>

<p>...game state should be pulled from your <em>model</em>, not from the controls on the form!</p>

<hr>

<h3>NoFocusButton.cs</h3>

<p>These nested loops are very scary, and the single-character loop variable names make them very hard to follow. <code>LandOpening</code> is a poor name for such an important method - you want method names that start with a verb, and that describe what they do / what their purpose is. The domain-specifics aren't clear. What's a "land" and why does it "open"?</p>

<p>You want the game state to be well-defined <code>enum</code> values, not hard-coded <code>1</code>/<code>0</code>/<code>-1</code> integer literals; you want the underlying value of these <code>enum</code> states to be irrelevant (so, no looping from <code>-1</code> to <code>&lt;2</code>); you want <em>meaningful names</em> for every identifier: <code>i</code>, <code>j</code>, <code>k</code>, <code>a</code>, <code>d</code>, ...there's just too many of them - note that the lowercase <code>L</code>/<code>l</code> is the most evil of all (looks way too much like a <code>1</code> at a glance).</p>

<p>Rule of thumb, if you're looking at a 4-level nested loop structure with conditionals and recursive calls, you're in a bad place called Spaghetti Land - that elusive stack overflow exception is definitely caused by the recursive logic you have there.</p>

<p>Recursion and loops are, most often, different tools for solving the same problem: recursive logic can be expressed with a loop, and a loop can be expressed with recursive logic. Mixing the two makes the code a mind-bender that becomes very hard to follow.</p>

<hr>

<h2>Object Oriented</h2>

<p>As <a href="https://codereview.stackexchange.com/questions/232947/minesweeper-implementation-c-winforms#comment455155_232947">Robert mentioned</a>, the first thing to do when you want to write object-oriented code isn't to think of a UI, but of how you're going to model the game components.</p>

<p>You want a <code>GameBoard</code> (or <code>MineField</code>) object responsible for encapsulating the game state; you want that object to have methods like <code>Clear</code> and <code>Initialize(int width, int height, int mines)</code>, you want a <code>MineFieldCell</code> object that can hold <code>CellState</code> and <code>VisibleState</code> values - running the <code>Initialize</code> method would create that <code>width*height</code> <code>MineFieldCell</code> objects with <code>VisibleState = VisibleState.Masked</code> and <code>CellState = CellState.Mine</code> or <code>CellState = CellState.Safe</code>, so you'd need an <code>enum CellState</code> type with <code>Mine</code> and <code>Safe</code> (or <code>NoMine</code>.. whatever), and an <code>enum VisibleState</code> type with <code>Masked</code>, <code>Flagged</code> and <code>Exposed</code> values; you'll want a <code>MineFieldCell</code> to expose an integer property representing the number of adjacent mines that the UI will read from when the <code>VisibleState</code> is <code>VisibleState.Exposed</code> (can be computed up-front, on on-the-fly)... and then you'll want unit tests that validate that all this logic works as intended - and all of that can (and <em>should</em>) happen <strong>before</strong> you wire any of it up to any UI.</p>
    </div>