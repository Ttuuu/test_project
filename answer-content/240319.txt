<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While your Thumb and SliderBackground classes look fine from an OOP perspective, your Slider, where the bulk of the logic is, has a decent amount of repetitive code in long-ish methods. Many of these can be split apart to into smaller, more abstract methods, which are then more readily understandable from a high level when there's an action to be performed. See the bottom of the answer for a full snippet.</p>

<p>If all you're interested in doing is selecting the first element which matches a selector, the best method is to use <code>querySelector</code>. (<code>getElementsByClassName</code> returns a collection, which means you have to extract the first element of the collection first, which is a bit ugly to do every time you want to get an element). Also, <code>minLabel</code> and <code>maxLabel</code> aren't actually <code>&lt;label&gt;</code>s - they're inputs. Maybe call them <code>minInput</code> and <code>maxInput</code> instead. You can change the lines that are like</p>

<pre><code>this.minLabel = this.container.getElementsByClassName("input-min")[0];
</code></pre>

<p>to</p>

<pre><code>this.minInput = this.container.querySelector(".input-min");
</code></pre>

<p>Rather than using the conditional operator to determine the maximum and minimum:</p>

<pre><code>const minValue = this.options.defaultValue[0] &gt; this.options.range[0] ? this.options.defaultValue[0] : this.options.range[0];
const maxValue = this.options.defaultValue[1] &gt; this.options.range[1] ? this.options.defaultValue[1] : this.options.range[1];
</code></pre>

<p>You could consider using <code>Math.max</code> and <code>Math.min</code>. Also, since <code>defaultValue</code> is an array, not a single value, maybe call it <code>defaultValues</code>:</p>

<pre><code>const { defaultValues, range, prefix } = this.options;
const minValue = Math.min(defaultValues[0], range[0]);
const maxValue = Math.max(defaultValues[1], range[1]);
</code></pre>

<p>The prefix setter is a bit verbose:</p>

<pre><code>if (this.options.prefix !== "" &amp;&amp; this.options.prefix !== undefined &amp;&amp; this.options.prefix !== null) {
  let inputs = this.container.getElementsByClassName("input-value");
  for (let i = 0; i &lt; inputs.length; i++) {
    let prefix = document.createElement("span");
    prefix.className = "slider-input-prefix";
    prefix.innerHTML = this.options.prefix;
    inputs[i].parentNode.insertBefore(prefix, inputs[i]);
  }
}
</code></pre>

<p>You can simplify the <code>if</code> condition to a truthy check, and use the <code>prefix</code> property destructured earlier. I'd call the created span <code>prefixSpan</code> to distinguish it. Conventional <code>for</code> loops are pretty verbose, require manual iteration, and have no abstraction. Since you're using ES6, consider <code>for..of</code> instead. Assigning to <code>innerHTML</code> can result in unexpected elements being created and unexepcted (possibly malicious) scripts being run - use <code>textContent</code> instead, it's safer and faster.</p>

<pre><code>if (this.options.prefix) {
  for (const input of this.container.getElementsByClassName("input-value")) {
    const prefixSpan = document.createElement('span');
    prefixSpan.className = 'slider-input-prefix';
    prefixSpan.textContent = prefix;
    input.parentElement.insertBefore(prefixSpan, input);
  }
}
</code></pre>

<p>(also make sure to always use <code>const</code> whenever possible - <code>let</code> <a href="https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75" rel="nofollow noreferrer">warns readers of the code</a> that you may reassign the variable later, leading to more cognitive overhead)</p>

<p>Your <code>assignEvents</code> has <em>eight</em> anonymous functions that call class methods:</p>

<pre><code>assignEvents() {
  this.minThumb.element.addEventListener("mousedown", (e) =&gt; this.mouseDown(e));
  // ...
}
</code></pre>

<p>Consider using class field syntax to define the methods instead, then just pass the method name:</p>

<pre><code>mouseDown = (e) =&gt; {
  // ...
}
// ...
assignEvents() {
  this.minThumb.element.addEventListener("mousedown", this.assignEvents);
</code></pre>

<p>This is pretty new syntax, but it's the cleanest modern way of making sure <code>this</code> refers to what you want it to in a method. (As always, if you're afraid of old browsers being incompatible with modern syntax, use <a href="https://babeljs.io/" rel="nofollow noreferrer">Babel</a> to transpile to ES5 for production)</p>

<p>When your <code>setActive</code> is called, it always has to be called with both the element getting the <code>active</code> class and the element to remove the <code>active</code> class from. It would probably be easier if <code>setActive</code> itself checked for an <code>active</code> class, removed it, then set <code>active</code> on the first (and only) argument. This way the removal logic is encapsulated inside <code>setActive</code>, rather than having the consumer have to figure it out.</p>

<pre><code>setActive(newActiveElement) {
  this.container.querySelector('.active').classList.remove("active");
  newActiveElement.classList.add('active');
}
</code></pre>

<p>You currently have both a <code>minDragged</code> and a <code>maxDragged</code> property, but both can't be active at the same time. Rather than having two separate properties that do something very similar, maybe have a single <code>dragged</code> property instead, that you assign <code>min</code> or <code>max</code> to?</p>

<pre><code>mouseDown = (e) =&gt; {
  this.setActive(e.target);
  this.dragged = e.target === this.minThumb.element ? 'min' : 'max';
}
</code></pre>

<p>There are a bunch of places in the code where the thumb positions need to be set, given one or both of the inputs, and the slider background needs to be set, given the inputs. These both require a bit of calculations. How about <code>setSliderBackground</code> and <code>updateThumbPositions</code> methods, as well as an <code>updateUI</code> method which calls both? Then you just need to call <code>updateUI</code> when something needs to be updated.</p>

<pre><code>setSliderBackground() {
  this.slider.setBackground(
    this.getXToPercent(this.minThumb.position),
    this.getXToPercent(this.maxThumb.position)
  );
}
updateThumbPositions() {
  this.minThumb.position = this.getValueToPercent(this.minInput.value);
  this.maxThumb.position = this.getValueToPercent(this.maxInput.value);
}
updateUI() {
  this.setSliderBackground();
  this.updateThumbPositions();
}
</code></pre>

<p>Your <code>setPositions</code> function has a <em>lot</em> of blocks that may reassign <code>value</code> depending on the range and other slider. Another issue is that the user is permitted to input numbers that are out of range, or have leading zeros, or are empty strings. The slider line currently disappears when an input goes blank. Rather than leaving the possibly-invalid values as is, you could sanitize the inputs to make sure they're within the required range with <code>Math.min</code> and <code>Math.max</code> beforehand - not only when interpreting the values, but also display the sanitized values to the user so they can clearly see what's going on.</p>

<pre><code>sanitizeInput(input) {
  const { range: [low, high] } = this.options;
  // Make sure value is in range of slider:
  const valueInRange = Math.round(Math.max(Math.min(input.value || 0, high), low));
  // Make sure lower value is below or equal to higher:
  input.value = input === this.minInput
    ? Math.min(valueInRange, this.maxInput.value)
    : Math.max(valueInRange, this.minInput.value);
}
</code></pre>

<p>There now isn't any need for the <code>setPositions</code> method - it wasn't very abstract anyway. Instead, you can call <code>sanitizeInput</code> and then <code>updateUI</code>.</p>

<p>Instead of</p>

<pre><code>this.element.style.background = "linear-gradient(to right, var(--primary-color) " + min + "%, var(--primary-focus-color) " + min + "%, var(--primary-focus-color) " + max + "%, var(--primary-color) " + max + "%)";
</code></pre>

<p>You can consider using template literals to make interpolation much easier, as well as permitting an easy-to-read multiline format:</p>

<pre><code>setBackground(min, max) {
  this.element.style.background = `
    linear-gradient(
      to right,
      var(--primary-color) ${min}%,
      var(--primary-focus-color) ${min}%,
      var(--primary-focus-color) ${max}%,
      var(--primary-color) ${max}%
    )
  `;
}
</code></pre>

<p>In full:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';

class Slider {
  constructor(_options, _className) {
    this.options = _options;
    this.container = document.querySelector('.' + _className);
    this.slider = new SliderBackground(this.container.querySelector(".slider-background"));
    this.minThumb = new Thumb(this.container.querySelector(".slider-min"));
    this.maxThumb = new Thumb(this.container.querySelector(".slider-max"));
    this.minInput = this.container.querySelector(".input-min");
    this.maxInput = this.container.querySelector(".input-max");
    this.dragged = null;
    this.setup();
  }
  setup() {
    this.setStartValues();
    this.assignEvents();
  }
  setStartValues() {
    const { defaultValues, range, prefix } = this.options;
    this.minInput.value = Math.min(defaultValues[0], range[0]);
    this.maxInput.value = Math.max(defaultValues[1], range[1]);
    this.updateUI();
    if (this.options.prefix) {
      for (const input of this.container.getElementsByClassName("input-value")) {
        const prefixSpan = document.createElement('span');
        prefixSpan.className = 'slider-input-prefix';
        prefixSpan.textContent = prefix;
        input.parentElement.insertBefore(prefixSpan, input);
      }
    }
  }
  assignEvents() {
    this.minThumb.element.addEventListener("mousedown", this.mouseDown);
    this.maxThumb.element.addEventListener("mousedown", this.mouseDown);
    this.minInput.addEventListener("input", this.changeInputValue);
    this.maxInput.addEventListener("input", this.changeInputValue);
    window.addEventListener("mouseup", this.mouseUp);
    window.addEventListener("mousemove", this.mouseMove);
  }
  mouseDown = (e) =&gt; {
    e.preventDefault();
    this.setActive(e.target);
    this.dragged = e.target === this.minThumb.element ? 'min' : 'max';
  }
  mouseUp = () =&gt; {
    this.dragged = null;
  }
  mouseMove = (e) =&gt; {
    const { dragged } = this;
    if (!dragged) {
      return;
    }
    e.preventDefault();
    const input = dragged === 'min' ? this.minInput : this.maxInput;
    const { range: [low, high] } = this.options;
    const percent = this.getXToPercent(e.clientX);
    input.value = low + (percent / 100) * (high - low);
    this.sanitizeInput(input);
    this.updateUI();
  }
  sanitizeInput(input) {
    const { range: [low, high] } = this.options;
    // Make sure value is in range of slider:
    const valueInRange = Math.round(Math.max(Math.min(input.value || 0, high), low));
    // Make sure lower value is below or equal to higher:
    input.value = input === this.minInput
      ? Math.min(valueInRange, this.maxInput.value)
      : Math.max(valueInRange, this.minInput.value);
  }
  changeInputValue = (e) =&gt; {
    this.sanitizeInput(e.target);
    this.updateUI();
    this.setActive(this.container.querySelector(".slider-btn:not(.active)"));
  }
  setSliderBackground() {
    this.slider.setBackground(
      this.getXToPercent(this.minThumb.position),
      this.getXToPercent(this.maxThumb.position)
    );
  }
  updateThumbPositions() {
    this.minThumb.position = this.getValueToPercent(this.minInput.value);
    this.maxThumb.position = this.getValueToPercent(this.maxInput.value);
  }
  updateUI() {
    this.updateThumbPositions();
    this.setSliderBackground();
  }
  getXToPercent(elmX) {
    const slider = this.slider.bounding;
    return (elmX - slider.left) / slider.width * 100;
  }
  getPercentToValue(percent) {
    return (percent * (this.options.range[1] - this.options.range[0]) * 0.01 + this.options.range[0]);
  }
  getValueToPercent(value) {
    return (value - this.options.range[0]) / (this.options.range[1] - this.options.range[0]) * 100;
  }
  setActive(newActiveElement) {
    this.container.querySelector('.active').classList.remove("active");
    newActiveElement.classList.add('active');
  }
}

class Thumb {
  constructor(_element) {
    this.element = _element;
  }
  get bounding() {
    return this.element.getBoundingClientRect();
  }
  get x() {
    return this.element.getBoundingClientRect().x;
  }
  get position() {
    const { bounding } = this;
    return (bounding.x + bounding.width / 2);
  }
  set position(value) {
    this.element.style.left = `calc(${value}% - ${this.bounding.width / 2}px)`;
  }
}

class SliderBackground {
  constructor(_element) {
    this.element = _element;
  }
  get bounding() {
    return this.element.getBoundingClientRect();
  }
  setBackground(min, max) {
    this.element.style.background = `
      linear-gradient(
        to right,
        var(--primary-color) ${min}%,
        var(--primary-focus-color) ${min}%,
        var(--primary-focus-color) ${max}%,
        var(--primary-color) ${max}%
      )
    `;
  }
}

const options = {
  range: [0, 15000],
  defaultValues: [0, 15000],
  prefix: "€"
};
const slider = new Slider(options, "container-slider");</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html {
  --border-radius: 7px;
  --border-radius-small: 3px;
  --default-shadow: -3px 5px 15px 6px rgba(0, 0, 0, .35);
  --btn-shadow: -1px 1px 10px 1px rgba(0, 0, 0, .35);
  --hover-time: 0.2s;
  --bg-color: #1F1B24;
  --sf-color: #332940;
  --sf2-color: #332940;
  --primary-color: #1f2d82;
  --primary-hover-color: #243394;
  --primary-focus-color: #2E41BD;
  --header-bg-color: #2C2735;
  --primary-font-color: white;
  --primary-font-hover-color: #BABABA;
}

body {
  background-color: grey;
}

.flex {
  width: 60%;
  margin-left: 20%;
  margin-top: 20%;
}

.container-slider {
  width: 100%;
  margin-top: 0.5em !important;
}

.slider-background {
  width: 100%;
  height: 5px;
  position: relative;
  display: flex;
  align-items: center;
  background-color: yellow;
}

.slider-btn {
  cursor: pointer;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: var(--primary-font-color);
  display: inline-block;
  position: absolute;
  left: 0;
}

.slider-btn.active {
  z-index: 99;
}

.slider-labels {
  margin-top: 1em;
  width: 100%;
  color: var(--primary-font-color);
  display: flex;
  justify-content: space-between;
}

.prefix_and_input {
  position: relative;
  display: inline-block;
  color: var(--primary-font-color);
}

.input-value {
  width: 4em;
  background: none;
  border: none;
  outline: none;
  color: var(--primary-font-color);
  font-size: 1em;
  text-align: center;
  border-bottom: 1px solid var(--primary-font-color);
}

.underline-outer {
  display: flex;
  justify-content: center;
  bottom: 0;
  left: 0;
  position: absolute;
  width: 100%;
  height: 2px;
  background-color: #64e4fe;
}

.underline-inner {
  transition: transform 0.15s ease-out;
  width: 100%;
  transform: scale(0, 1);
  background-color: #1F1B24;
  height: 100%;
}

.prefix_and_input&gt;.input-value:focus+.underline-outer&gt;.underline-inner {
  transform: scale(1);
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type=number] {
  -moz-appearance: textfield;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="flex"&gt;
  &lt;div class="container-slider"&gt;
    &lt;div class="slider-background"&gt;
      &lt;span class="slider-btn slider-min active"&gt;&lt;/span&gt;
      &lt;span class="slider-btn slider-max"&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="slider-labels"&gt;
      &lt;div class="min-label_and_input"&gt;
        &lt;label class="label-value label-min" for="input-min"&gt;Min: &lt;/label&gt;
        &lt;div class="prefix_and_input"&gt;
          &lt;input type="number" step="1" id="input-min" class="input-value input-min"&gt;
          &lt;div class="underline-outer"&gt;
            &lt;div class="underline-inner"&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="max-label_and_input"&gt;
        &lt;label class="label-value label-max" for="input-max"&gt;Max: &lt;/label&gt;
        &lt;div class="prefix_and_input"&gt;
          &lt;input type="number" step="1" id="input-max" class="input-value input-max"&gt;
          &lt;div class="underline-outer"&gt;
            &lt;div class="underline-inner"&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>