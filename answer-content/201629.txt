<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some C++20'y things you can use to improve your code even further (and some non-C++20'y things).</p>

<blockquote>
  <p>Some helpers that should be standard but aren't.</p>
</blockquote>

<p>Where's your proposal? :) Just kidding of course.</p>

<ol>
<li><p>Down with <code>typename</code>! Please remove those <code>typename</code>s in the first two using declarations, they are unnecessary.</p></li>
<li><p><del>What's up with the <code>decltype(a &lt;=&gt; b)</code>? Just use <code>decltype(auto)</code> as the return type.</del> SFINAE, although as OP said: It might not make sense to be SFINAE-friendly here because the other comparison function objects aren't.</p></li>
<li><p>With constraints you can split off <code>topological_sort</code>:</p>

<pre><code>template&lt;class FwdIt, class Comparator = spaceship&lt;iterator_value_type_t&lt;FwdIt&gt;&gt;&gt;
    requires is_random_access_iterator_v&lt;FwdIt&gt; &amp;&amp;
             is_weak_ordering_v&lt;decltype(cmp(*first, *first))&gt;
void topological_sort(FwdIt first, FwdIt last, Comparator cmp = Comparator{})
{
    std::sort(first, last, [&amp;](const auto&amp; a, const auto&amp; b) {
        return cmp(a, b) &lt; 0;
    });
}

template&lt;class FwdIt, class Comparator = spaceship&lt;iterator_value_type_t&lt;FwdIt&gt;&gt;&gt;
void topological_sort(FwdIt first, FwdIt last, Comparator cmp = Comparator{})
{
    for (auto mark = first; mark != last; ++mark) {
        auto current_min = mark;
        auto last_min = current_min;
        while (true) {
            for (auto it = mark; it != last; ++it) {
                if (cmp(*it, *current_min) &lt; 0) {
                    current_min = it;
                }
            }
            if (last_min == current_min) break;
            last_min = current_min;
        }
        if (current_min != mark) {
            using std::swap;
            swap(*current_min, *mark);
        }
    }
}
</code></pre></li>
<li><p>As already mentioned, you can use <code>std::min_element</code>.</p></li>
<li><p>Use <code>std::iter_swap</code> instead of <code>using std::swap; swap(/*...*/);</code>.</p></li>
<li><p>You can use concepts to simplify your type traits. For example:</p>

<pre><code>template&lt;class It&gt;
concept RandomAccessIterator = std::is_base_of_v&lt;std::random_access_iterator_tag, iterator_category_t&lt;It&gt;&gt;;
</code></pre></li>
<li><p>You can drop the explicit specialization of <code>spaceship&lt;void&gt;</code> by using the same trick as <code>topological_sort</code>. You can merge the two call operators into the same class, and then use constraints to the second one better to overload resolution using <code>requires std::is_same_v&lt;void, T&gt;</code>.</p></li>
</ol>
    </div>