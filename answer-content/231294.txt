<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Validation</h2>

<p>This:</p>

<pre><code>words = ["forget", "fret", "for", "tort", "forge", "fore", "frog", "fort", "forte", "ogre"]
</code></pre>

<p>should probably receive some kind of validation to confirm that each word shares at least one letter. One simple way to do this is a <code>set</code>: iterate through each word, adding each letter of the word to the set. Then do a second iteration to ensure that the set intersects with each word.</p>

<h2>Enum name</h2>

<pre><code>def __str__(self):
    return("ACROSS" if self is Direction.ACROSS else "DOWN")
</code></pre>

<p>is not necessary. You should be able to simply do:</p>

<pre><code>def __str__(self):
    return self.name
</code></pre>

<h2>Implicit tuple</h2>

<p>This:</p>

<pre><code>    return(delta_r, delta_c)
</code></pre>

<p>does not require parens, nor does this:</p>

<pre><code>                return(True)
</code></pre>

<h2>Dunders</h2>

<pre><code>    self.__len = len(self.word)
</code></pre>

<p>Don't name this variable with two underscores - that usually has a special meaning. (The same applies to <code>__word_fits</code>.) Even so, you don't need this variable at all - just use <code>len(self.word)</code> in your <code>__len__</code> method.</p>

<h2>Combined comparison</h2>

<pre><code>self.r1 &lt;= item[0] and item[0] &lt;= self.r2 and
self.c1 &lt;= item[1] and item[1] &lt;= self.c2
</code></pre>

<p>becomes</p>

<pre><code>self.r1 &lt;= item[0] &lt;= self.r2 and
self.c1 &lt;= item[1] &lt;= self.c2
</code></pre>

<h2>Don't no-op <code>except</code></h2>

<p>Delete this try block, since it does nothing:</p>

<pre><code>    try:
        return(self.word[item])
    except: 
        raise
</code></pre>

<h2>Coordinate nomenclature</h2>

<p><code>rr1</code> and <code>cc1</code> and their ilk are probably better expressed as <code>yy1</code> and <code>xx1</code>, etc.</p>

<h2>Overlap detection</h2>

<p>You have some long loops to detect spatial overlap. Instead, consider building up an index structure that is composed of nested lists. Indexing <code>[y][x]</code> into the list can get you an inner structure that contains all words at that location, and for each of them, the offset into the word. This will be fairly cheap memory-wise and will greatly improve your runtime. It will also make <code>__word_fits</code> much nicer.</p>

<h2>Or semantics</h2>

<pre><code>            s += self.grid[i][j] if self.grid[i][j] != "" else "-"
</code></pre>

<p>can become</p>

<pre><code>s += self.grid[i][j] or '-'
</code></pre>

<h2>Grid.<strong>str</strong></h2>

<p>Much ink has been spilled on the evils of successive immutable string concatenation. This is what <code>StringIO</code> is built for, so do that instead.</p>

<p>Or, if you're feeling fancy, write a long, horrible <code>'\n'.join(...)</code> comprehension.</p>

<h2>Branch trimming</h2>

<pre><code>            if d == gw.direction:
                return(False)
            elif not grid_word.intersects(gw):
                return(False)
</code></pre>

<p>becomes</p>

<pre><code>if d == gw.direction or not grid_word.intersects(gw):
    return False
</code></pre>

<p>And delete this branch entirely (you can keep the comment of course):</p>

<pre><code>        else:
            # If the word doesn't overlap the current word (already in the
            # grid) that's being checked, we don't know yet whether or not
            # we CAN or CANNOT place it on the grid
            pass
</code></pre>
    </div>