<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to take @greybeard's internet points, since he apparently doesn't want them enough to type this ;-). </p>

<p>You need to keep in mind that <span class="math-container">\$O(x)\$</span> really means <span class="math-container">\$O(C \times x + ...)\$</span> for some value C. As long as you keep C a constant, you can do whatever you want. Thus, <span class="math-container">\$O(n)\$</span> can really mean <span class="math-container">\$O(2000 \times n)\$</span>, and <span class="math-container">\$O(1)\$</span> can really mean <span class="math-container">\$O(10^6)\$</span>, etc.</p>

<p>In this case, what @greybeard has suggested is that you count the individual set bits in all the numbers, and keep the counts in separate positions. Thus, for an array of 32-bit numbers, you would keep 32 separate counts.</p>

<p>Since you have to perform in <span class="math-container">\$O(n)\$</span>, you could spend one loop through your input array determining how many bits you need to keep, so even very large numbers won't break the solution. </p>

<p>So let's pretend all the integers are 8-bit, just because. That doesn't mean there aren't a large number of integers, just that all the values in the array are in the range <code>[0, 256)</code>. What does that give you?</p>

<p>(If you don't know, <code>&amp;</code> and <code>&lt;&lt;</code> are <a href="https://en.wikipedia.org/wiki/Bitwise_operation#C-family" rel="nofollow noreferrer">"bitwise operators."</a> </p>

<pre><code>for each element in array:
    for each bit_offset in [0..8):
        if element &amp; (1 &lt;&lt; bit_offset):
            count[bit_offset] += 1
</code></pre>

<p>What does that get you? It gets you a set of 8 separate counts, one for each bit in the 8-bit numbers. (Feel free to replace 8 with 64 if you like...)</p>

<p>Each count represents the number of times that bit appeared "set" in the input array. Now, according to your premise, all the numbers but one appear 3 times. So all the set bits will appear a multiple of 3 times. (Since set bits might be duplicated among numbers, it won't be "exactly 3 times" but instead "a multiple").</p>

<p>On the other hand, the one value that appears one time will have its set bits added to the counts one time. So there are two possibilities for each of the <code>count[i]</code> values (note: <code>k[i]</code> is some numbers that don't matter):</p>

<ul>
<li><p>Either the unique value does not have this bit set: <code>count[i] = 3 * k[i]</code></p></li>
<li><p>Or the unique value <em>does</em> have this bit set: <code>count[i] = 3 * k[i] + 1</code></p></li>
</ul>

<p>So you have to evaluate each <code>count[i]</code> in order, and determine which form it takes:</p>

<pre><code>result = 0
for bit_offset in [0..8):
    if count[bit_offset] % 3 == 1:
        result = set_bit(result, bit_offset)
</code></pre>

<p>Where <code>set_bit</code> is spelled <code>|= 1 &lt;&lt; bit_offset</code> in most C-derived languages.</p>

<p>In terms of efficiency, what happens?</p>

<ul>
<li><p>You might process the array once by iterating over it to discover the largest number of bits required to be counted.</p></li>
<li><p>You create an array of N_BITS counts, initialized to zero. Since N_BITS is not related to the size of the input array, this is considered <span class="math-container">\$O(1)\$</span>. (Actually <span class="math-container">\$O(32)\$</span> most likely, or maybe 64... But that's still 1 in big-O-hio!)</p></li>
<li><p>You iterate over the array one time, iterating over N_BITS bit values within each element. (So effectively <span class="math-container">\$O(64 \times n)\$</span>, or less.) You compute the count values here.</p></li>
<li><p>You iterate over the N_BITS counts, determining the bits that will be set in the result, and setting them.</p></li>
<li><p>You return the result.</p></li>
</ul>

<p>So your runtime is <span class="math-container">\$O(2 \times n)\$</span>, or just n if you hard-code the N_BITS. And your memory is <span class="math-container">\$O(64)\$</span> or less, which is just 1.</p>

<p>Let's look at the example you gave in the comments:</p>

<pre><code>[13, 12, 12, 3, 3, 3, 12]
</code></pre>

<p>First, rewrite those to binary (8 + 4 + 2 + 1):</p>

<pre><code>[ 0b1101, 0b1100, 0b1100, 0b0011, 0b0011, 0b0011, 0b1100]
</code></pre>

<p>Now, count the set bits, just adding all the 1's in each column (no carry!):</p>

<pre><code>[ 0b1101, 
  0b1100, 
  0b1100, 
  0b0011, 
  0b0011, 
  0b0011, 
  0b1100]
  --------
    4434 -&gt; counts = [ 4, 4, 3, 4 ]
</code></pre>

<p>Next, our output will be 1 if the count is 1 (mod 3) and 0 if the count is 0 (mod 3). So [4,4,3,4] mod 3 are [1,1,0,1]:</p>

<pre><code>result = 0b1101 
</code></pre>

<p>Which is 13.</p>
    </div>