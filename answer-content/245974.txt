<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Do not use 0 or NULL to represent the null pointer</h3>
<p>Instead use <code>nullptr</code> which is type safe. Why?</p>
<p>Well, there's quite the problem when you return the type <code>T</code> because objects in C++ (not confuse with pointers) have't on its range of possible values the <code>nullptr</code> value. It forces you to decide if there is a default value which in the case of objects is fine because you may define a non-argument constructor and say "that's my default object" but when dealing with primitive types is where the problem appears.</p>
<p>You may consider declaring your array as:</p>
<pre class="lang-cpp prettyprint-override"><code>private:
    int arraySize;// Size of the array.
    int size; // Number of elements in the array.
    T **array;// Pointer to the array. (initialize in constructors)
</code></pre>
<p>but it leads to another problem, you could say why don't I return pointers but if you wrongly delete some of the pointers that have been retrieved from the <code>ArrayList</code> you are likely to cause a <strong>segfault</strong> or <strong>UB</strong> in the future. Why? because the address of the returned type is being shared and so when you delete but not set the pointer in the <code>ArrayList</code> to <code>nullptr</code> (which is a good practice instead of using <code>NULL</code>) at the moment to compare it with <code>nullptr</code> which is the default value it will be false and if you are trying to access said pointer then <strong>segfault</strong>.</p>
<p>How could I solve such trouble?
You may create a new pointer passing the data of the accessed type and that would unlink the pointer in <code>ArrayList</code> from the pointer you are receiving when calling <code>operator[]</code> in example.</p>
<pre class="lang-cpp prettyprint-override"><code>//takes in and index and returns the object associated with it
//return NULL or nothing if index is outta range
template &lt;class T&gt;
T *ArrayList&lt;T&gt;::get(int index) {
    if (!isValidIndex(index)) return nullptr;
    T *with_new_address = new T; // if T is an object must have a default constructor
    *with_new_address = *(data[index]); // data[index] now returns a *T type
    return with_new_address;
}
</code></pre>
<p>I hope it helped you. Even at this time (1 year latter)</p>
    </div>