<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Write real constructors for all your classes</h1>
<p>You wrote a proper constructor for <code>LibraryBook</code>, but for the other classes you only wrote <code>setSomething()</code> functions. Try to convert those to proper constructors. The advantage of that is that it forces you to properly initialize instances of those classes. If I just write:</p>
<pre><code>Date date;
</code></pre>
<p>This allows me to forget to call <code>setDate()</code>, and then if I access it later on it will have an undefined value that might cause bad things to happen.</p>
<h1>Only write setter functions for variables that are allowed to be changed.</h1>
<p>For example, you probably never want a library book's ID to be changed, so don't add <code>setId()</code>. If possible, I would make the member variable <code>id_</code> itself <code>const</code> as well.</p>
<h1>Ensure there are getters and setters for all relevant member variables</h1>
<p>Your <code>class Book</code> doesn't have getters to get the author, title or year from a book. While you might not use it right now, it would be helpful to have getters for all of those if for example you want to search the library for all books from a certain author.</p>
<h1>Don't add unnecessary member variables</h1>
<p>Why did you add <code>today_</code> to <code>LibraryBook</code>? You can always query the current day by using one of the time functions from the standard library, like <a href="https://en.cppreference.com/w/cpp/chrono/system_clock/now" rel="nofollow noreferrer"><code>std::chrono::system_clock::now()</code></a>. You don't need to store this in the book itself.</p>
<h1>Write proper <code>std::ostream</code> formatters and/or <code>to_string()</code> functions</h1>
<p>Your classes have <code>printSomething()</code> functions that don't print anything, but rather create strings. I would rename those functions <code>to_string()</code>, so it matches what the standard library does.</p>
<p>Furthermore, you can also functions that make it easy to print in the C++ way, by writing so-called <code>std::ostream</code> formatters. It looks like this:</p>
<pre><code>class Name {
public:
    ...
    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Name &amp;self) {
        return os &lt;&lt; first_ &lt;&lt; " " &lt;&lt; last__;
    }
};
</code></pre>
<p>You can then print a <code>Name</code> like so:</p>
<pre><code>Name name("John", "Smith");
std::cout &lt;&lt; "The name is: " &lt;&lt; name &lt;&lt; "\n";
</code></pre>
<h1>Use <code>"\n"</code> instead of <code>std::endl</code></h1>
<p><code>std::endl</code> is equivalent to <code>"\n"</code> plus a forced flush of the output stream, which might hurt performance. See <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">this StackOverflow question</a> for more the details.</p>
<h1>Consider using a <code>std::chrono</code> class to store dates</h1>
<p>If you are not allowed to change the way dates are stored, it's fine. But the standard library provides several ways to store times. Since C++11, there's <a href="https://en.cppreference.com/w/cpp/chrono/time_point" rel="nofollow noreferrer"><code>std::chrono::time_point</code></a> which represents arbitrary points in time, and in C++20 there will be <a href="https://en.cppreference.com/w/cpp/chrono/year_month_day" rel="nofollow noreferrer"><code>std::chrono::year_month_day</code></a> to represent calendar dates. The advantage of these classes is that they come with member function which allow easy manipulation of them, like checking if a given day comes before or after another day, and so on.</p>
<h1>Check your spelling</h1>
<p>You wrote <code>BarrowdDay</code>, which should be <code>BorrowedDay</code>. There are tools that can help you find and fix spelling errors in source code, like <a href="https://github.com/codespell-project/codespell" rel="nofollow noreferrer">codespell</a>.</p>
<h1>Don't initialize things in a constructor that don't need initialization</h1>
<p>Typically, when adding a book to a library, it will not be in a checked out state. Only when it is part of the library can it be checked out. It therefore makes sense to have the constructor of <code>LibraryBook</code> only take parameters necessary to inialize the  <code>book</code> and the <code>id_</code> variables, and set <code>isLoaned_</code> to <code>false</code>.</p>
<h1>Avoid <code>using namespace std</code></h1>
<p>Writing <code>using namespace std</code> is considered <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">bad practice</a>, because it hides namespace conflicts. Just make it a habit to add <code>std::</code> where necessary. You have to use it less often than you think, especially if you make use of <code>auto</code>.</p>
<h1>Pass strings using const references</h1>
<p>Passing strings by value can cause unnecessary copying of the strings. Pass them by const reference instead. See the example below.</p>
<h1>Use member initializer lists where possible</h1>
<p>When writing a constructor, <a href="https://stackoverflow.com/questions/926752/why-should-i-prefer-to-use-member-initialization-list">it's preferable to use member initializer lists</a> instead of setting each member in the body of the constructor function. For example:</p>
<pre><code>class Name {
    public:
    Name(const std::string &amp;first, const std::string &amp;last): first_(first), last_(last) {}
    ...
};
</code></pre>
<h1>Consider passing a <code>Book</code> to the constructor of <code>LibraryBook</code></h1>
<p>Instead of having the constructor take lots of parameters, that are then passed on to the construction of the <code>book_</code> member variable, take a const reference to a <code>Book</code> instead, like so:</p>
<pre><code>class LibraryBook {
    public:
    LibraryBook(const Book &amp;book, int BookID): book_(book), id_(BookID), isLoaned_(false) {}
    ...
};
</code></pre>
<p>The copy constructor of <code>Book</code>, which will have been created implicitly in your case, will take care of copying the details from the parameter <code>book</code> into the member variable <code>book_</code>. You can use it like so:</p>
<pre><code>Book book("Lewis", "Carrol", "Alice's Adventures in Wonderland", ...);
LibraryBook libraryBook(book, 9780199558292);
</code></pre>
<p>You can also avoid creating a named <code>Book</code> variable, and create a <code>LibraryBook</code> like so:</p>
<pre><code>LibraryBook libraryBook({"Lewis", "Carrol", ...}, 9780199558292);
</code></pre>
    </div>