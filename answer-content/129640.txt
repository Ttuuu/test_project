<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the refactor is barely readable, the first version is better. Anyway, if you use functional abstractions, instead of doing a imperative processing from scratch, algorithms tend to be more clear. </p>

<p>In this case, we can use the abstraction <a href="http://www.rubydoc.info/github/rubyworks/facets/Enumerable#map_by-instance_method" rel="nofollow noreferrer">Enumerable#map_by</a> (a <code>group_by</code> variation where you can control both the grouping function and the accumulated values) and write:</p>

<pre><code>require 'facets'

class Array
  def merge_hashes
    flat_map(&amp;:to_a).map_by { |k, v| [k, v] }
  end 
end
</code></pre>

<p>Note that this snippet always returns an array as a value, instead of the scalar/list you have. </p>
    </div>