<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe I have managed to substantially improve code by:</p>

<ol>
<li>Relying on aliases: <code>Imports IObject = IFoo(Of IBar(Of Something))</code></li>
<li>Injecting the Office-wide objects inside Application-specific objects, rather than incorporating the base functionalities via Class inheritance. This allows for better unit testing.</li>
</ol>

<p>Any suggestions are still very welcome :)</p>

<pre><code>Imports IApplication = MyNamespace.IApplication(Of MyNamespace.IFile(Of MyNamespace.IVariable))
Imports IFile = MyNamespace.IFile(Of MyNamespace.IVariable)
Imports IVariable = MyNamespace.IVariable

Imports IWordApplication = MyNamespace.IWordApplication(Of MyNamespace.IWordDocument(Of MyNamespace.IWordVariable))
Imports IWordDocument = MyNamespace.IWordDocument(Of MyNamespace.IWordVariable)

Imports IExtApplication = MyNamespace.IExtApplication(Of MyNamespace.IExtFile(Of MyNamespace.IVariable))
Imports IExtFile = MyNamespace.IExtFile(Of MyNamespace.IVariable)


#Region "Office Wrappers"


Interface IApplication(Of Out T As IFile)

    ReadOnly Property Documents As IEnumerable(Of T)

End Interface

Interface IFile(Of Out T As IVariable)

    ReadOnly Property Variables As IEnumerable(Of T)

    ReadOnly Property Name As String

End Interface

Interface IVariable

    Property SomeProperty As String

End Interface


#End Region


#Region "Extension of Office Wrappers"


Interface IExtApplication(Of Out T As IExtFile)
    Inherits IApplication(Of T)

End Interface

Interface IExtFile(Of Out T As IVariable)
    Inherits IFile(Of T)

    Sub SomeCustomMethod()

End Interface


#End Region


#Region "Word Wrappers"


Interface IWordApplication(Of Out T As IWordDocument)
    Inherits IApplication(Of T)


End Interface

Interface IWordDocument(Of Out T As IWordVariable)
    Inherits IFile(Of T)

    ReadOnly Property Paragraphs As IEnumerable(Of IWordParagraph)

End Interface

Interface IWordVariable
    Inherits IVariable

End Interface

Interface IWordParagraph

    Property SomeProperty As String

End Interface


#End Region


#Region "Extension of Word Wrappers"


Interface IExtWordApplication
    Inherits IWordApplication(Of IExtWordDocument), IExtApplication(Of IExtWordDocument)

End Interface

Interface IExtWordDocument
    Inherits IWordDocument(Of IExtWordVariable), IExtFile(Of IExtWordVariable)

    Function SomeCustomFunction(Parameter As Boolean) As Integer

End Interface

Interface IExtWordVariable
    Inherits IWordVariable

End Interface

Interface IExtWordParagraph
    Inherits IWordParagraph

    Sub SomeCustomAction()

End Interface


#End Region


#Region "Word objects"


Interface IWordFactory

    Function Create(Application As Microsoft.Office.Interop.Word.Application) As IWordApplication

    Function Create(Document As IEnumerable(Of Microsoft.Office.Interop.Word.Document)) As IEnumerable(Of IWordDocument)

    Function Create(Paragraph As IEnumerable(Of Microsoft.Office.Interop.Word.Paragraph)) As IEnumerable(Of IWordParagraph)

    Function Create(Variable As IEnumerable(Of Microsoft.Office.Interop.Word.Variable)) As IEnumerable(Of IWordVariable)

End Interface


Class WordApplication
    Implements IWordApplication

    Protected ThisApplication As Microsoft.Office.Interop.Word.Application
    Protected ThisFactory As IWordFactory

    Sub New(Application As Microsoft.Office.Interop.Word.Application, Factory As IWordFactory)
        Me.ThisApplication = Application
        Me.ThisFactory = Factory
    End Sub

    Public ReadOnly Property Documents As IEnumerable(Of IWordDocument) Implements IApplication(Of IWordDocument).Documents
        Get
            Return Me.ThisFactory.Create(Me.ThisApplication.Documents.Cast(Of Microsoft.Office.Interop.Word.Document))
        End Get
    End Property

End Class


Class WordDocument
    Implements IWordDocument

    Protected ThisDocument As Microsoft.Office.Interop.Word.Document
    Protected ThisFactory As IWordFactory

    Sub New(Document As Microsoft.Office.Interop.Word.Document, Factory As IWordFactory)
        Me.ThisDocument = Document
        Me.ThisFactory = Factory
    End Sub

    Public ReadOnly Property Name As String Implements IFile(Of IWordVariable).Name
        Get
            Return Me.ThisDocument.Name
        End Get
    End Property

    Public ReadOnly Property Paragraphs As IEnumerable(Of IWordParagraph) Implements IWordDocument.Paragraphs
        Get
            Return Me.ThisFactory.Create(Me.ThisDocument.Paragraphs.Cast(Of Microsoft.Office.Interop.Word.Paragraph))
        End Get
    End Property

    Public ReadOnly Property Variables As IEnumerable(Of IWordVariable) Implements IFile(Of IWordVariable).Variables
        Get
            Return Me.ThisFactory.Create(Me.ThisDocument.Variables.Cast(Of Microsoft.Office.Interop.Word.Variable))
        End Get
    End Property

End Class

Class WordParagraph
    Implements IWordParagraph

    Protected ThisParagraph As Microsoft.Office.Interop.Word.Paragraph
    Protected ThisFactory As IWordFactory

    Sub New(Paragraph As Microsoft.Office.Interop.Word.Document, Factory As IWordFactory)
        Me.ThisParagraph = Paragraph
        Me.ThisFactory = Factory
        Me.SomeProperty = "Something"
    End Sub

    Public Property SomeProperty As String Implements IWordParagraph.SomeProperty

End Class

Class WordVariable
    Implements IWordVariable

    Protected ThisVariable As Microsoft.Office.Interop.Word.Variable
    Protected ThisFactory As IWordFactory

    Sub New(Variable As Microsoft.Office.Interop.Word.Document, Factory As IWordFactory)
        Me.ThisVariable = Variable
        Me.ThisFactory = Factory
        Me.SomeProperty = "Something"
    End Sub

    Public Property SomeProperty As String Implements IVariable.SomeProperty

End Class


#End Region


#Region "Extended Word objects"


Interface IExtWordFactory
    Inherits IWordFactory

    Function Extend(Application As IWordApplication(Of IWordDocument(Of IWordVariable))) As IExtWordApplication

    Function Extend(Document As IEnumerable(Of IWordDocument(Of IWordVariable))) As IEnumerable(Of IExtWordDocument)

    Function Extend(Paragraph As IEnumerable(Of IWordParagraph)) As IEnumerable(Of IExtWordParagraph)

    Function Extend(Variable As IEnumerable(Of IWordVariable)) As IEnumerable(Of IExtWordVariable)

End Interface


Class ExtWordApplication
    Implements IExtWordApplication

    Private ThisWordApplication As IWordApplication
    Protected Shadows ThisFactory As IExtWordFactory

    Sub New(WordApplication As IWordApplication, ExtFactory As IExtWordFactory)
        Me.ThisWordApplication = WordApplication
    End Sub

    Public Overloads ReadOnly Property Documents As IEnumerable(Of IExtWordDocument) Implements IApplication(Of IExtWordDocument).Documents
        Get
            Return Me.ThisFactory.Extend(Me.ThisWordApplication.Documents)
        End Get
    End Property

End Class


Class ExtWordDocument
    Implements IExtWordDocument

    Private ThisWordDocument As IWordDocument
    Protected Shadows ThisFactory As IExtWordFactory

    Sub New(WordDocument As IWordDocument, ExtFactory As IExtWordFactory)
        Me.ThisWordDocument = WordDocument
    End Sub

    Public Overloads ReadOnly Property Name As String Implements IExtFile(Of IExtWordVariable).Name
        Get
            Return Me.ThisWordDocument.Name
        End Get
    End Property

    Public Overloads ReadOnly Property Variables As IEnumerable(Of IExtWordVariable) Implements IFile(Of IExtWordVariable).Variables
        Get
            Return Me.ThisFactory.Extend(Me.ThisWordDocument.Variables)
        End Get
    End Property

    Public Overloads ReadOnly Property Paragraphs As IEnumerable(Of IWordParagraph) Implements IWordDocument(Of IExtWordVariable).Paragraphs
        Get
            Return Me.ThisFactory.Extend(Me.ThisWordDocument.Paragraphs)
        End Get
    End Property

    Public Sub SomeCustomMethod() Implements IExtFile(Of IExtWordVariable).SomeCustomMethod
        'DoSomething
    End Sub

    Public Function SomeCustomFunction(Parameter As Boolean) As Integer Implements IExtWordDocument.SomeCustomFunction
        Return 123456
    End Function

End Class


Class ExtWordParagraph
    Implements IExtWordParagraph

    Private ThisWordParagraph As IWordParagraph
    Protected Shadows ThisFactory As IExtWordFactory

    Sub New(WordParagraph As IWordParagraph, ExtFactory As IExtWordFactory)
        Me.ThisWordParagraph = WordParagraph
    End Sub

    Public Property SomeProperty As String Implements IWordParagraph.SomeProperty
        Get
            Return Me.ThisWordParagraph.SomeProperty
        End Get
        Set(value As String)
            Me.ThisWordParagraph.SomeProperty = value
        End Set
    End Property

    Public Sub SomeCustomAction() Implements IExtWordParagraph.SomeCustomAction
        'DoSomething
    End Sub

End Class


Class ExtWordVariable
    Implements IExtWordVariable

    Private ThisWordVariable As IWordVariable
    Protected Shadows ThisFactory As IExtWordFactory

    Sub New(WordVariable As IWordVariable, ExtFactory As IExtWordFactory)
        Me.ThisWordVariable = WordVariable
    End Sub

    Public Property SomeProperty As String Implements IVariable.SomeProperty
        Get
            Return Me.ThisWordVariable.SomeProperty
        End Get
        Set(value As String)
            Me.ThisWordVariable.SomeProperty = value
        End Set
    End Property

End Class


#End Region


Class Main

    Sub Startup(InjectedFactory As IExtWordFactory)

        Dim MyFactory As IExtWordFactory = InjectedFactory
        Dim InteropApp As Microsoft.Office.Interop.Word.Application = Nothing 'Globals.ThisAddIn.Application
        Dim MyApp As IExtWordApplication = MyFactory.Extend(MyFactory.Create(InteropApp))

        FromOfficeWideOperationsLibrary(MyApp)
        FromWordSpecificOperationsLibrary(MyApp)

    End Sub

    Sub FromOfficeWideOperationsLibrary(MyApp As IExtApplication)

        For Each MyOpenFile As IExtFile In MyApp.Documents
            MsgBox($"File name is {MyOpenFile.Name}")
            MyOpenFile.SomeCustomMethod()
        Next

    End Sub

    Sub FromWordSpecificOperationsLibrary(MyApp As IExtWordApplication)

        For Each MyOpenDoc As IExtWordDocument In MyApp.Documents
            MsgBox($"Document has {MyOpenDoc.Paragraphs.Count} paragraphs")
        Next

    End Sub

End Class
</code></pre>
    </div>