<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks good for very simple text. However, real life is much more complicated.</p>

<p>In languages other than English, there are characters that are combined from other characters. For example, the German Umlaut <code>Ã¤</code> can be written either as <code>\u00E4</code> or as an <code>a</code>, followed by the combining dots above, which is written <code>a\u0308</code>. Both representations look the same, yet your code treats them differently.</p>

<p>To get really international, you should read about the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/text/BreakIterator.html" rel="noreferrer">BreakIterator</a> and how it breaks strings into "perceived characters". The Java type <code>char</code> does not represent such a perceived character, but only a small part of it.</p>

<p>To test whether such a perceived character (which is really a <code>String</code> in Java) is alphabetic, I guess if suffices to test whether that string <em>contains</em> an alphabetic code point (not char). Have a look at <code>String.codePoints</code>.</p>

<p>Learning how to handle international text properly takes time. Don't rush into it, and take the time needed. Here a little, there a little. It's impossible to get "the single correct algorithm" since languages of the world differ a lot in their interpretation of what a <em>character</em> really is. To take the first step in this journey, don't treat a string as a sequence of <code>char</code>, but as a sequence of code points. This alone makes your code handle most emojis correctly, and this simple step makes your code above-average already.</p>
    </div>