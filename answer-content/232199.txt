<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So you need to separate the construction of that class from the class itself? This is the <a href="https://www.oodesign.com/factory-pattern.html" rel="nofollow noreferrer">Factory Pattern</a>.</p>

<h3>Data class</h3>

<p>Boil down to your DTO to ... well the <em>data</em>.</p>

<pre class="lang-java prettyprint-override"><code>public class MassiveDTO {
    private final List&lt;String&gt; company;
    private final List&lt;String&gt; partners;
    private final List&lt;String&gt; biodata;

  /**
   * @see MassiveDTOBuilder
   */
  MassiveDTO(List&lt;String&gt; company, List&lt;String&gt; partners, List&lt;String&gt; biodata) {
    this.company = company;
    this.partners = partners;
    this.biodata = biodata;
  }
   ... getters only
}
</code></pre>

<h3>Factory Pattern</h3>

<p>Then have a second class, <code>MassiveDTOFactory</code>, that calls that constructor with suitable fixed values.</p>

<pre class="lang-java prettyprint-override"><code>public class MassiveDTOFactory {
  public static MassiveDTO create() {
    return new MassiveDTO(
      List.of("X0788", "X0192"), // Here we use Java 9 immutable collections
      List.of("X0081"),
      List.of("X0913")
    );
  }
}
</code></pre>

<h3>Fluent Builder Pattern</h3>

<p>If you wish more flexibility on the values then a <a href="https://dzone.com/articles/fluent-builder-pattern" rel="nofollow noreferrer">Fluent Builder</a> is for you. Something like this: </p>

<pre class="lang-java prettyprint-override"><code>public class MassiveDTOBuilder {
  private List&lt;String&gt; companies = new ArrayList&lt;&gt;();
  private List&lt;String&gt; partners = new ArrayList&lt;&gt;();
  private List&lt;String&gt; biodata = new ArrayList&lt;&gt;();

  public static MassiveDTOBuilder massiveDto() {
    return new MassiveDTOBuilder();
  }

  private MassiveDTOBuilder() {
  }

  public MassiveDTOBuilder withCompany(String... items) {
    for (String i : items) {
      companies.add(i);
    }
    return this;
  }

  public MassiveDTOBuilder withPartner(String... items) {
    for (String i : items) {
      partners.add(i);
    }
    return this;
  }

  public MassiveDTOBuilder withBiodata(String... items) {
    for (String i : items) {
      biodata.add(i);
    }
    return this;
  }

  public MassiveDTO build() {
    return new MassiveDTO(
      Collections.unmodifiableList(companies),
      Collections.unmodifiableList(partners),
      Collections.unmodifiableList(biodata)
    );
  }
}
</code></pre>

<p>Which can used like:</p>

<pre class="lang-java prettyprint-override"><code>MassiveDTO m = massiveDto()
  .withCompany("X0788", "X0192")
  .withPartner("X0081")
  .withBiodata("X0913")
  .build();
</code></pre>
    </div>