<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Timing of your algorithm</strong></p>
<pre><code>def f():
    x = 0

    for i in range(1000):
        if i % 3 == 0 or i % 5 == 0:
            x += i

    return x

%timeit f()
152 µs ± 12.5 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<p><strong>Using <em>Principle of Inclusion and Exclusion (PIE)</em>  gives you the answer faster.</strong></p>
<pre><code>%timeit (sum(range(3, 1000, 3)) + sum(range(5, 1000, 5)) - sum(range(15, 1000, 15)))
14.8 µs ± 1.01 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
<p>Regarding the second question, the simple for loop is the best thing and quite fast than the naive recursive algorithm. However the Wikipedia page discusses some great formulas which can speed-up your search <a href="https://en.wikipedia.org/wiki/Fibonacci_number" rel="nofollow noreferrer">Fibonacci Numbers Wiki</a>.</p>
<pre><code>a, b = 1, 1
while True:
    a, b = b, a + b
    print(a, b)
</code></pre>
<p>Nice formula which can be used in recursion.</p>
<p><a href="https://i.stack.imgur.com/bopIb.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/bopIb.png" alt="Formula to find even Fibonacci Numbers: Source Wikipedia"></a></p>
    </div>