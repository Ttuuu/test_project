<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>(Bug)</strong></p>

<p><em>Edit</em>: It seems that your incoming data are sorted. If so, this 'bug' is not valid of course</p>

<p>Your traversing algorithm works fine as long as the <code>TreeNode</code>s have the correct order - parents must be positioned before children. If you add a node that's parent is not already part of the tree, it will never be added.</p>

<p>To fix that bug, you need at least another reprocessing step that sorts your items...</p>

<p><strong>Naming</strong></p>

<ul>
<li>Properties should start with a capital letter.</li>
</ul>

<p><strong>TreeNode</strong></p>

<ul>
<li>As mentioned in a comment, the ID property should not be nullable.</li>
<li>If possible, I would also make the Id property read-only and pass them in the constructor because it should not change after initialization.</li>
</ul>

<p><strong>Tree</strong></p>

<ul>
<li>Same as in TreeNode - Id-property should be read-only.</li>
<li>The children property should also be read-only and initialized in constructor. That avoids the error-prone initialization logic inside your <code>TraverseAndAddNode</code> method.</li>
</ul>

<p><strong>TraverseAndAddNode</strong></p>

<ul>
<li>The nodeAdded variable is actually not required:</li>
</ul>

<p>Simplified version of the <code>TraverseAndAddNode</code> method containing the suggestions above:</p>

<pre><code>public static bool TraverseAndAddNode(this Tree root, TreeNode node)
{
    // Check if the current root is the parent of the node to be added
    if (root.id == node.parent)
    {
        root.children.Add(new Tree()
        {
            id = node.id,
            text = node.text,
            children = null
        });

        return true;
    }

    // Note: You could use a one-liner here       
    //return root.Children.Any(child =&gt; child.TraverseAndAddNode(node))
    foreach (Tree tree in root.children)
    {
        if (tree.TraverseAndAddNode(node))
        {
            return true;
        }
    }
    return false;
}
</code></pre>

<p><strong>Performance</strong></p>

<p>The performance intensive step is the missing one that sorts the nodes. Therefore, I would think about an alternative approach instead of sorting + recursive creating the tree.</p>

<p>One alternative approach may be:</p>

<ul>
<li>create non-connected tree items of all <code>TreeNode</code> objects</li>
<li>Indexing them by id using a dictionary</li>
<li>Iterate over the items, get the parent from the dictionary and put the current item in its child collection. </li>
</ul>
    </div>