<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your logic looks solid to me.  It's subtle, though.</p>

<p>Here is another version using <code>long</code>, but with much simpler logic:</p>

<pre><code>public static boolean canAdd(int... values) {
    long longSum = 0;
    int intSum = 0;
    for (final int value: values) {
        intSum += value;
        longSum += value;
    }
    return intSum == longSum;
}
</code></pre>

<p>That's the most straightforward way I can think to write it. Note that there is no "early out" in this loop, meaning it will always run to the end of the list. However, not having any conditionals, it's likely to be faster in many cases, if that matters.</p>

<p>(6 years later) Here is an updated version inspired by user 'cellepo' that stops as soon as it detects overflow, in order to avoid false positives (possible in the earlier version if the list of values was in the billions):</p>

<pre><code>public static boolean canAdd(int... values) {
    long longSum = 0;
    int intSum = 0;
    for (final int value: values) {
        intSum += value;
        longSum += value;
        if (intSum != longSum)
            return false;
    }
    return true;
}
</code></pre>
    </div>