<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While this is some pretty idiomatic haskell, you definitely didn't implement the challenge the way it was intended to be solved. Either way: here's some minor comments I'd want to put out anyways:</p>

<ul>
<li><p>The type-signature of <code>pop</code> implies, that the queue returned can basically be <code>Nothing</code>.
If it can be, what queue did you call this on in the first place? I'd prefer the following signature:</p>

<pre><code>pop :: Queue a -&gt; (Maybe a, Queue a)
</code></pre>

<p>The implementation should be pretty straightforward :)</p></li>
<li><p>I'd not use <code>a</code> for both the type-variable and the variable in all your functions. Consider explicitly differentiating between types and values:</p>

<pre><code>push x (Value value tail') = Value value (push x tail')
pop (Value value tail') = Just (value, tail')
peek (Value value _) = Just value
</code></pre>

<p>This makes the differentiation more clear. Note that I've renamed <code>pointer</code> to <code>tail'</code>. One could also argue for a rename of <code>Value</code> to <code>Element</code> to make the distinction more clear as well.</p>

<p>The naming changes are mostly nitpicks, though.</p></li>
</ul>

<p>Now let's examine how to "correctly" solve this challenge. As <a href="https://codereview.stackexchange.com/users/183567/cole">cole</a> outlines in their comment:</p>

<blockquote>
  <p>This queue takes <span class="math-container">\$O(n)\$</span> time to enqueue, unlike the common queue implementation which uses a doubly linked list. You can get an amortized <span class="math-container">\$O(1)\$</span> time for enqueues if you implement it with two stacks (which is probably what you were getting at with the stack comment). A stack can be implemented using a singly linked list, which is what lists in haskell are. You can either make an abstract data type for a stack and use that in your queue ADT or just use lists<br>
  <sub>minor formatting by me</sub></p>
</blockquote>

<p>So how would we implement a queue using two stacks, or rather two haskell lists that take the function of stacks? The basic idea of this challenge is to realize that packing two LIFO data structures can make for a FIFO datastructure. Take an "input" stack and an "output" stack. <code>push</code> (or more semantically correctly <code>push_back</code>) will just push a value to the "input" stack.</p>

<p><code>pop</code> (and peek) are a little more complex. They need to handle the case of an empty output stack. If the output stack is empty, the input stack is moved to the output stack using the basic LIFO operations. Note that this "reverses the order" in the stack, which explains how two LIFO datastructures turn into a FIFO datastructure.</p>

<p>Unfortunately this means something for the interface you've outlined there. We can't assume that <code>peek</code> does <em>not</em> modify the internal state of the Queue anymore. It's simply speaking "not idempotent" anymore, since an empty output stack requires moving the input stack to it.</p>

<p>Now let's look at some type definitions</p>

<pre><code>type Queue a = ([a], [a]) 

push :: a -&gt; Queue a -&gt; Queue a
pop :: Queue a -&gt; (Maybe a, Queue a)
peek :: Queue a -&gt; (Maybe a, Queue a)
empty :: Queue a -&gt; Bool
</code></pre>

<p>Now to implement this:</p>

<pre><code>push x (input, output) = (x:input, output)

pop ([], []) = (Nothing, ([], []))
pop (input, []) = (Just val, ([], new_out))
  where (val, new_out) = fromJust $ uncons $ reverse input
pop (input, (o:os)) = (Just o, (input, os))

peek ([], []) = (Nothing, ([], []))
peek (input, []) = (Just val, ([], new_out))
  where 
    new_out = reverse input
    val = head new_out
peek (input, output@(o:_)) = (Just o, (input, output))

empty ([], []) = True
empty _        = False
</code></pre>

<p>For whatever it's worth: I liked your implementation better :)</p>
    </div>