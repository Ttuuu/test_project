<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Handling the Problem</h1>

<p>To make this scalable you need to generate the HTML to fit however many items you want to include. To Render it this way you need a data structure to hold what you want to render. </p>

<p>First Think of the data structure then what functions you need to render this data.</p>

<h1>My Solution</h1>

<p>I picked the following data structure.</p>

<pre class="lang-js prettyprint-override"><code>[{
  title: String
  value: Number
}]
</code></pre>

<p>Here is the list of render functions I picked.</p>

<ul>
<li>renderForm -&gt; Render just the form</li>
<li>renderResults -&gt; Render just the results</li>
<li>render -&gt; Render the entire screen</li>
</ul>

<p>And finally, we will need to capture the data changes from the form to update the data structure and then call <code>renderResults</code> so I created the <code>onFormChange</code> function.</p>

<h1>Code</h1>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Code goes here

const data = [{
  title: 'E',
  value: 0
}, {
  title: 'M',
  value: 0
}, {
  title: 'C',
  value: 0
}, {
  title: 'F',
  value: 0
}]

function onFormChange (value, i) {
  data[i].value = value;
  renderResults();
}

function renderForm () {
  const elForm = document.getElementById('form');
  let html = '';
  elForm.innerHTML = '';
  data.forEach((d, i) =&gt; {
    html += `
      How many ${d.title}'s 
      &lt;input type='text' value=${d.value} onchange="onFormChange( this.value, ${i})"&gt;
      &lt;br&gt;
    `;
  })
  elForm.innerHTML = html;
}
function  renderResults () {
  const elResults = document.getElementById('results');
  let html = '';
  elResults.innerHTML = '';
  // Render Each Element
  data.forEach((d, i) =&gt; {
    html += `
      ${d.title}: ${d.value}&lt;br&gt;
    `;
  })
  // Render Total
  let sum = 0;
  data.forEach((d) =&gt; {
   sum += Number(d.value) || 0
  })
  html += `
    &lt;div&gt;Total is ${sum}&lt;/div&gt;
  `
  elResults.innerHTML = html;
}

function render () {
  renderForm()
  renderResults()
}

window.onload = render;
  </code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;form id="form"&gt;
    &lt;/form&gt;
    &lt;hr&gt;
    &lt;div id="results"&gt;
    &lt;/div&gt;
  &lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>


<h1>Final Thoughts</h1>

<p>I did add a total div at the end of the results to show how you can also do some calculations on the entire data set when any of the values change.</p>

<p>Go ahead and add any additional data to the <code>data</code> array and have fun with it.</p>
    </div>