<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is not much to review as far as the code goes other than avoid using 3D arrays.  The problem with 3D arrays is that you need to know the exact size of the first 3 dimensions because only the last dimension is resizable</p>

<blockquote>
  <p>I attempted the ReDim Preserve method the values would not be saved to the array.</p>
</blockquote>

<p>You may want to post your attempts to use <code>ReDim Preserve</code> on StackOverflow because <code>ReDim Preserve</code> does save the values in the array.    </p>

<blockquote>
  <p>Ideally, I could separate orng into different Areas, but since it is contiguous I am unable to do so (I'm not aware of a way to create Areas in a contiguous range). What I'd like to know is 1) is there a better way to do what I am trying to do (collection, dictionary, etc.) and 2) if there is not a better way, can I get some advice on how to make this code cleaner (Easier to read, faster, less code, dynamic range, better structure)?</p>
</blockquote>

<p>It is hard to give advice without knowing what you are trying to do with the data other than group it.  What I can do is show you how to store non-contiguous ranges in a Dictionary by Lot number and then work with the ranges afterwards.</p>

<pre><code>Private Sub Dictionarytest()
    Dim map As New Scripting.Dictionary, rw As Range
    Dim key As Variant
    'Join Ranges Based on Lot Number and Add them to the Dictionary Map

    With ThisWorkbook.Sheets("Cleaned_2019+")
        For Each rw In .Range("A973:AL1014").Rows
            key = rw.Columns(6).Value

            If map.Exists(key) Then
                Set map(key) = Union(map(key), rw)
            Else
                map.Add key, rw
            End If
        Next
    End With

    Dim subRange As Range

    'Iterate of the Dictionary Map Keys and Print the Join Ranges Addresses
    For Each key In map
        Set subRange = map(key)
        Debug.Print subRange.Address(False, False)
    Next

    Dim item As Variant
    'Iterate of the Dictionary Map Items and Print the Join Ranges Addresses
    For Each item In map.Items()
        Debug.Print item.Address(False, False)
    Next

    Dim Data As Variant
    'Create an Array From the Dictionary Items
    Data = map.Items()
    'Iterate of the Data Array and Print the Join Ranges Addresses
    For Each item In Data
        Debug.Print item.Address(False, False)
    Next

    Dim results As Variant
    Dim r As Long, c As Long, rowCount As Long
    'Iterate of the Dictionary Map Keys and Create Array From the Join Ranges Addresses
    'Note: the Results Array Contains all the Data for a Single Lot Number
    For Each key In map
        Set subRange = map(key)
        rowCount = subRange.Cells.CountLarge / subRange.Columns.Count
        ReDim results(1 To rowCount, 1 To subRange.Columns.Count)
        r = 0
        For Each rw In subRange.Rows
            r = r + 1
            For c = 1 To UBound(results, 2)
                results(r, c) = rw.Columns(c).Value
            Next
        Next
    Next

End Sub
</code></pre>

<p>Immediate Window Print Out</p>

<blockquote>
  <p>A973:AL973,A975:AL975,A979:AL979,A985:AL985,A989:AL989,A1006:AL1006
  A974:AL974,A982:AL982,A991:AL991,A1002:AL1002,A1013:AL1013
  A976:AL976,A1007:AL1007
  A977:AL977,A981:AL981,A1001:AL1001
  A978:AL978,A988:AL988,A994:AL994,A996:AL996,A1014:AL1014
  A980:AL980,A984:AL984,A990:AL990,A998:AL998,A1004:AL1004,A1009:AL1009
  A983:AL983,A986:AL986,A993:AL993,A997:AL997,A999:AL999,A1003:AL1003
  A987:AL987,A992:AL992,A995:AL995
  A1000:AL1000,A1005:AL1005,A1008:AL1008,A1010:AL1011
  A1012:AL1012</p>
</blockquote>
    </div>