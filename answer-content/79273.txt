<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In a nutshell there are THREE types of model classes to consider:</p>
<ol>
<li><p><strong>Data Model classes</strong> - These are classes that are used for reading/writing data to/from storage.  These classes almost always match your table schemes exactly, plus some navigation properties.  If you use entity framework (you should), you will have DBSets of these classes defined on your DbContext.  These classes almost never contain any code.</p>
</li>
<li><p><strong>Presentation classes</strong> -  These are basically denormalized versions of your data model classes that are used to display or report data.  For example you may have an Order data model class that contains a CustomerID and an OrderDate.  The Customer name, however, is defined on the Customer data model class.  If you want to display a grid that contains Customer Name and Order Date you may want to use a presentation class that is composed of selected properties of both the Order data model class and the Customer data model class.  The only code these classes usually contain is a constructor that allows the class to be instantiated from one or data model classes and perhaps a method or two to construct a data model class from the presentation class.  Avoid defining business logic code on these classes.</p>
</li>
<li><p><strong>ViewModel classes</strong> -  These classes are backing classes for views.  Think of them as code behind.  The term "Model" in the name is a bit misleading because these classes have less to do with your data or presentation model and more to do with providing properties to make your views work correctly.  Unlike Data Model classes or Presentation model classes, ViewModel classes often contain code to react to user events.</p>
<p>ViewModel classes contain properties for helping the user input data.  For example, on an order entry screen the ViewModel may contain a property which is a collection of OrderTypes. This collection may be used to populate a dropdown list.  The ViewModel may also contain a OrderType property which is used to store the currently selected OrderType.  By comparison, the Order presentation class may contain a property of type string that simply displays the name of the OrderType.  On the Data Model class the OrderType may be represented by an integer which is a foreign key to the OrderType table.  You should avoid defining business logic on your ViewModel classes.  Make calls to your business logic layer instead.</p>
</li>
</ol>
<p>For more info on this subject and for a complete article on how to define a repository and business logic layer, please see the article <strong>A service oriented approach to implementing repository pattern with Entity Framework, MVC, and MVVM</strong> on my web site <a href="http://www.samwheat.com" rel="noreferrer">www.samwheat.com</a>.</p>
    </div>