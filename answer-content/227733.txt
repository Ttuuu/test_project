<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are my thoughts, in no particular order of importance: </p>

<ol>
<li><p>Use parameter validation and script parameters, they are stupidly convenient in powershell, for example, put this at the very top of the script:</p>

<pre><code>param(
    [Parameter]
    [ValidateSet('Start','Stop')} # Can have more than two possible values of course
    [string] $mode
)
</code></pre>

<p>The error message from ValidateSet can be a bit cryptic, but you can also use <code>ValidateScript</code> to print your own exceptions and error messages. Look up <code>ValidateRegex</code> as well, you'll use it someday.</p></li>
<li><p>You could make shorter function declarations with <code>function myfunc([type]$arg) { ...</code> instead of using two more verbose lines for that. Don't overdo it if you have lots of parameters, but it's perfectly acceptable for short functions with few arguments.</p></li>
<li><p>Line 103, <code>$IsComputerACluster -eq 'True'</code>: you can trim off everything and just keep <code>$IsComputerACluster</code>. It is already <code>$true</code> or <code>$false</code> from your IsCluster function. Generally, avoid checking if something is equal to the string 'true' or 'false'*. In <code>if</code> blocks, just use <code>if($MyVar)</code> or <code>if(-not $MyVar)</code>.</p></li>
<li><p>Lines 55-58, I don't really get what you are going for, you're assigning a value to a variable and then overwriting it with an empty string ?</p></li>
<li><p>That's a personal choice, but I'd replace every occurence of <code>Get-ServiceStatus $name</code> by <code>Get-Service $name | select -exp Status</code>. But your function name is pretty explicit and that's just my love of one-liners speaking. Same for <code>Get-ClusterGroupStatus</code> which has a less explicit name.</p></li>
<li><p>Line 51, <code>$var -eq $false</code> can be replaced by <code>-not $var</code> or even <code>!$var</code>.</p></li>
<li><p>Line 135, if you don't include <code>-Wait</code> in your call to <code>Start-ClusterGroup</code>, the cmdlet will wait until the operation is over. Two cases where this could go wrong:</p>

<ul>
<li>Your cluster gets stuck in the startup process and the cmdlet never returns</li>
<li>Your cluster fails to start and the <code>else</code> block executes, telling your user the cluster is waiting to become online, despite it having failed.</li>
</ul>

<p>So I'd either include a <code>-Wait</code> with a reasonably long time (after which you assume that the cluster is stuck), or include a <code>-wait 0</code> so that the cmdlet returns immediately, then check the cluster status with <code>Get-ClusterGroupStatus</code> until you reach a timeout or until the cluster comes online. Here's a template:</p>

<pre><code>Start-LongOperation -NoWait -Wait 0 -WhateverYourCmdletUsesToRunAsynchronously

While(-not Check-LongOperationCompleted -and $CheckRetries -lt 20) { 
    Start-Sleep -Seconds 5 
    $CheckRetries += 1
}

$success = ($CheckRetries -lt 20) # If this is true, it's because the operation completed before the timeout was reached
</code></pre>

<p>You can make countless variations of this, with exceptions, with actual timers using Get-Date, etc., which are left as an exercise to the reader. Also look into powershell jobs if you want to make asynchronous stuff.</p></li>
<li><p>Change the log directory to something like <code>$env:temp</code> to avoid scaring the user for whom <code>c:\Logs</code> will not exist ? You could make a parameter with a default value from this.</p></li>
<li><p>In IsCluster, there is a <code>if(condition){return $true}else{return $false}</code> block. You can shorten it into <code>return (condition)</code> 95% of the time. This is true for other languages as well.</p></li>
<li><p>Make this a module for easier deployment ?</p></li>
</ol>

<p>That's all I can come up with. I'd say your script is pretty good, it's verbose but I found that most user-facing powershell scripts are super verbose when you just try to make a wrapper. If you don't have too many potential users, consider just explaining them the basics of <code>Get/Start/Stop-Service</code> and <code>Get/Start/Stop-ClusterGroup</code> ? I'd definitely make <code>IsCluster</code> a module or put it in my powershell profile though.</p>

<p>*For example, <code>'false' -eq $false</code> is True (pretty reasonable), but <code>$false -eq 'false'</code> returns False (counter-intuitive).</p>
    </div>