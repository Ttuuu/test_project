<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Don't Ignore Warning Messages</strong><br>
Please compile using the -Wall compiler switch that provides all warning messages.</p>

<p>This code in Board.h generates a warning message:</p>

<pre><code>static enum Tile {
    OPEN = 1,
    WALL = 2,
    SNAKE = 3,
    FOOD = 4
};
</code></pre>

<p>The keyword <code>static</code> is ignored in this case, why are you trying to make an enum static?</p>

<p><strong>Style and How it Effects Maintainability</strong><br>
Changing the coding style can improve readability and maintainability of the code.</p>

<p><em>Suggested Style Change 1</em><br>
Put open braces (<code>{</code>) on a new line. This improves readability by clearly showing where a code block starts and ends.</p>

<p>Example 1:
Currently the function <code>app::draw()</code> looks like this:</p>

<pre><code>void Game::app::draw(sf::RenderTarget&amp; target, sf::RenderStates states) const {

    for (size_t i = 0, h = Board::height; i &lt; h; ++i) {
        for (size_t j = 0, w = Board::width; j &lt; w; ++j) {

            Coord here{ j, i };
            sf::RectangleShape rect;
            rect.setSize({ common_divisor, common_divisor });
            rect.setPosition({ common_divisor * j, common_divisor * i });

            switch (board.at(here)) {
            case Board::WALL:
                target.draw(rect, states);
                break;

            case Board::SNAKE:
                rect.setFillColor(sf::Color::Green);
                target.draw(rect, states);
                break;

            case Board::FOOD:
                rect.setFillColor(sf::Color::Red);
                target.draw(rect, states);

            }

        }
    }

    // Draws the game score
    sf::Text text;
    text.setFont(arial);
    text.setCharacterSize(static_cast&lt;unsigned int&gt;(common_divisor));
    text.setPosition({ 0.0f, 0.0f });
    text.setString("Score: " + std::to_string(board.score()));
    text.setFillColor(sf::Color::Black);

    target.draw(text, states);
}
</code></pre>

<p>The code might be more readable for others if the code looked like this:</p>

<pre><code>void Game::app::draw(sf::RenderTarget&amp; target, sf::RenderStates states) const
{
    for (size_t i = 0; i &lt; Board::height; ++i)
    {
        for (size_t j = 0; j &lt; Board::width; ++j)
        {
            Coord here{ j, i };
            sf::RectangleShape rect;
            rect.setSize({ common_divisor, common_divisor });
            rect.setPosition({ common_divisor * j, common_divisor * i });

            switch (board.at(here)) {
            case Board::WALL:
                target.draw(rect, states);
                break;

            case Board::SNAKE:
                rect.setFillColor(sf::Color::Green);
                target.draw(rect, states);
                break;

            case Board::FOOD:
                rect.setFillColor(sf::Color::Red);
                target.draw(rect, states);
            }    
        }
    }

    // Draws the game score
    sf::Text text;
    text.setFont(arial);
    text.setCharacterSize(static_cast&lt;unsigned int&gt;(common_divisor));
    text.setPosition({ 0.0f, 0.0f });
    text.setString("Score: " + std::to_string(board.score()));
    text.setFillColor(sf::Color::Black);

    target.draw(text, states);
}
</code></pre>

<p>Due to the fact that the code leaves a blank line after each open brace this doesn't change the vertical spacing very much, anyone that reads the code can find the matching braces and knows the extent of each code block.</p>

<p><em>Please Note that in the suggested version h = Board:height and w = Board:width are removed from the nest for loops, to improve readability as well, they are not necessary and they are confusing. It is better to avoid single character variable names. It might also be better to rename <code>i</code> and <code>j</code> as <code>x(Point)</code> and <code>y(Point)</code> or <code>h(eight)</code> and <code>w(idth)</code> to show that they are coordinates.</em></p>

<p><em>Suggested Style Change 2</em><br>
Put variable declarations on separate lines, it is easier to find variables and to add or delete them when a variable declared on a separate line.</p>

<pre><code>struct Coord {
    unsigned int x, y;
};
</code></pre>

<p>versus</p>

<pre><code>struct Coord {
    unsigned int x;
    unsigned int y;
};
</code></pre>

<p>and</p>

<pre><code>    struct Snake_segment
    {
        Coord current, previous;
    };

versus 

    struct Snake_segment
    {
        Coord current;
        Coord previous;
    };
</code></pre>

<p><em>Suggested Style Change 3</em><br>
Put braces (<code>{</code> and <code>}</code>) around all <code>then</code> clauses and <code>else</code> clauses. Quite often maintenance requires additional statements in either the <code>then</code> or <code>else</code> clauses. If the braces are not there then it is very easy to insert bugs into code by adding a statement.</p>

<pre><code>void Game::app::updateWindow() {
    if (m_iscrashed)
        window.close();

    window.clear(sf::Color::Black);
    window.draw(*this);
    window.display();
}
</code></pre>

<p>Versus</p>

<pre><code>void Game::app::updateWindow()
{
    if (m_iscrashed)
    {
        window.close();
    }

    window.clear(sf::Color::Black);
    window.draw(*this);
    window.display();
}
</code></pre>
    </div>