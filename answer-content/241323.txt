<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main principle here is DRY (Don't Repeat Yourself).  The trickiest part of your code is where you're successively applying the tax rates to the different brackets; a lot of the code is copied and pasted, including the rates themselves.  Ideally you'd want to specify those rates in exactly one place and then have reusable code that's able to apply them in different situations.  For a data-driven app like this, I think it's better to define all the data in one place in a set of tables rather than have it embedded throughout the rest of the code.</p>

<p>Here's what I came up with after pulling the data from your code out into a set of lists, dicts, and enumerations:</p>

<pre><code>from enum import Enum


class FilingStatus(Enum):
    """Tax filing status."""
    MARRIED = "M"
    SINGLE = "S"


STANDARD_DEDUCTION = {
    # Standard deduction by filing status.
    FilingStatus.MARRIED: 24800,
    FilingStatus.SINGLE: 12400,
}
# Tax rates for income up to each bracket cap.
BRACKET_TAX_RATES = [.1, .12, .22, .24, .32, .35, .37]
# Bracket caps by filing status.
BRACKET_CAPS = {
    FilingStatus.MARRIED: [
        0, 19750, 80250, 171050, 326600, 414700, 622050
    ],
    FilingStatus.SINGLE: [
        0, 9875, 40125, 85525, 163300, 207350, 518400
    ],
}

assert all(
    len(bracket) == len(BRACKET_TAX_RATES)
    for bracket in BRACKET_CAPS.values()
)

filing_status = FilingStatus(input("Filing Status (M / S): "))
gross_income = int(input("household income: "))
taxable_income = gross_income - STANDARD_DEDUCTION[filing_status]

tax = 0.0
caps = BRACKET_CAPS[filing_status]
for i in range(len(BRACKET_TAX_RATES)):
    rate = BRACKET_TAX_RATES[i]
    if i+1 &gt;= len(caps) or taxable_income &lt; caps[i+1]:
        # Income is under the next cap (or we're at the highest one already).
        # Apply the current rate to the income above the current cap and stop.
        tax += rate * (taxable_income - caps[i])
        break
    else:
        # Income is at or above the next cap.
        # Apply the current rate to the diff of the next and current caps.
        tax += rate * (caps[i+1] - caps[i])

print("taxable income: ", taxable_income)
print("owed in Federal tax: ", tax)
</code></pre>
    </div>