<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>IMO the use of <code>this.</code> before members in the methods reduces readability and is unnecessary.</p>

<hr>

<p><code>Occurrences</code> and <code>TimeUnitMilliseconds</code> should be immutable and only settable in the constructor so make it <code>private int Occurrences {get;}</code> or <code>private readonly int Occurrences</code>
     Alternatively you can make it public settable to allow for dynamic configuration?</p>

<hr>

<blockquote>
<pre><code>protected virtual void Dispose(bool isDisposing)
{
  if (this.isDisposed)
  {
    if (isDisposing)
    {
</code></pre>
</blockquote>

<p>I think the <code>if (this.isDisposed)</code> should be <code>if (!isDisposed)</code></p>

<hr>

<blockquote>
<pre><code>  if (timeUnit &gt;= TimeSpan.FromMilliseconds(uint.MaxValue))
  {
    throw new ArgumentOutOfRangeException(nameof(timeUnit), "Time unit must be less than 2^32 milliseconds");
  }
  Occurrences = occurrences;
  TimeUnitMilliseconds = (int)timeUnit.TotalMilliseconds;
</code></pre>
</blockquote>

<p>Here you test <code>timeUnit</code> against <code>uint.MaxValue</code> and after that the value is cast to <code>int</code>. If <code>int.MaxValue &lt; timeUnit &lt; uint.MaxValue</code> the test is passed but the cast will result in a negative <code>TimeUnitMilliseconds</code>. </p>

<hr>

<p>Your test case doesn't dispose the <code>RateLimiter</code> instance.</p>

<hr>

<blockquote>
  <p><code>semaphore.Release(Interlocked.Exchange(ref countCompleted, 0));</code></p>
</blockquote>

<p>If <code>countCompleted == 0</code> this will fail. It can happen if no actions haven't terminated before the timer ticks.</p>

<hr>

<blockquote>
  <p><code>GC.SuppressFinalize(this);</code></p>
</blockquote>

<p>This has no meaning if the class doesn't have a finalizer (<code>~RateLimiter()</code>) <a href="https://docs.microsoft.com/en-us/dotnet/api/system.gc.suppressfinalize?view=netframework-4.8" rel="noreferrer">GC.SuppressFinalize(Object) Method</a></p>

<hr>

<p>A way to avoid that the users fail to call <code>Completed()</code> is to let <code>RateLimiter</code> handle the execution of the methods it self in a pattern like:</p>

<pre><code>public class RateLimiter : IDisposable
{
  async public Task Run(Func&lt;Task&gt; func)
  {
    try
    {
      await WaitToProceed();
      await func();
    }
    finally
    {
      Completed();
    }
  }

  ....
}
</code></pre>

<p>And then make <code>WaitToProceed()</code> and <code>Completed()</code> as private members. </p>

<p>You'll of course need to provide serveral overloads of the above, that take a timeout value and/or cancellation token and/or have return values etc. And the class should maybe be renamed to something more suitable. </p>
    </div>