<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Avoid throwing built-in types as exceptions, as suggested in the <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#e14-use-purpose-designed-user-defined-types-as-exceptions-not-built-in-types" rel="nofollow noreferrer">C++ Core Guidelines, E.14</a>. So instead of throwing character strings, consider throwing a proper exception in e.g., <code>load_random</code>.</p></li>
<li><p>You need to include <code>&lt;algorithm&gt;</code> since <code>preview</code> uses <code>std::min</code>. Also, instead of <code>&lt;math.h&gt;</code> include <code>&lt;cmath&gt;</code> because this is C++ and not C.</p></li>
<li><p>Make <code>get_colnames</code> const. Make <code>preview</code> const. In the constructor of <code>Column</code>, take <code>std::string colname</code> by const-ref to avoid unnecessary copying.</p></li>
<li><p>When inserting y-column values and explanatory column values, you could use standard functions like <code>std::generate_n</code>. In particular, you could write:</p>

<pre><code>// Insert the y column values first
std::generate_n(std::back_inserter(data), rows, [&amp;]() { return distY(mt); });

// Insert the explanatory column values last
std::generate_n(std::back_inserter(data), numValues - rows, [&amp;]() { return distX(mt); });
</code></pre>

<p>However, your current for-loops are also simple and I don't suspect there will be much of a difference performance-wise (I'm also using a <code>back_inserter</code> instead of emplacing like you which might be slightly more costly). For <code>back_inserter</code>, you need to include <code>&lt;iterator&gt;</code>.</p></li>
<li><p>In <code>load_random</code>, make <code>numValues</code> and <code>colname</code> (in two places) const. In <code>preview</code>, make <code>xcols</code>, <code>ycols</code>, and <code>printRows</code> const.</p></li>
<li><p>For <code>Dataset::operator()</code>, take <code>std::string col</code> by const-ref. (Here, also consider <em>not</em> throwing a <code>char*</code>).</p></li>
<li><p>I personally find it too verbose to write <code>this-&gt;xcols</code> and so on. In code this short and simple, it is always clear from the context when you refer to member variables. Explicitly accessing members via the this-pointer only hurts readability in my opinion.</p></li>
<li><p>Regarding your design choice, I would decide what is the most critical operation and set up the data structures to make that as fast as possible. I can imagine that you would be interested in processing large amounts of data, so you don't want to (or can't) store everything. In general, you can't really get any faster than taking a continuous chunk of memory and processing that in a linear fashion. For printing, which I suppose is secondary, it's fine if you have to do some jumping. But even then, if the jumps are predictable like in your case I believe they will be (i.e., you first grab say entry 0, then entry 10, then entry 20, and so on) you will be good.</p></li>
<li><p>Regarding the previous point, for larger amounts of data, doing a linear scan in <code>Dataset::operator()</code> via <code>std::find</code> will be costly. Perhaps it would make more sense to use say <code>std::unordered_map</code> here.</p></li>
</ul>
    </div>