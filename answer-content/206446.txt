<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code below allows to calculate all 4 probabilities for top 4 values in about 110 nanoseconds in Python (using Numba).</p>

<p>The precision of the calculation is about +-0.02</p>

<p>Assumptions in the code:</p>

<ol>
<li>Standard deviation = 1 for all variables. (Different standard deviations can be easily implemented)</li>
<li>There are always 4 values (We can assume it is top 4)</li>
</ol>

<p>Ideas used in the code:</p>

<ol>
<li>The calculation is based on pairwise probabilities with maximum. The resulting probabilities are normalized to sum up to 1:</li>
</ol>

<p><span class="math-container">$$P_{i\_step1}=P(X_i&gt;X_{max})\cdot\prod_{j\neq i,j\neq max}(1-P(X_j&gt;X_{max}))\\P_{max\_step1}=\prod_{j\neq max}(1-P(X_j&gt;X_{max}))\\P_i=\frac{P_{i\_step1}}{\sum_i(P_{i\_step1})}$$</span></p>

<ol start="2">
<li>Normal CDF can be approximated with a sigmoid function:</li>
</ol>

<p><span class="math-container">$$\Phi(x) \approx \frac{1}{1+e^{-(0.07056*x^3+1.5976*x)}}$$</span></p>

<ol start="3">
<li>Pairwise probabilities are calculated according to the formula:</li>
</ol>

<p><span class="math-container">$$P(X_i&gt;X_{max})=\Phi\left(\frac{\mu_i-\mu_{max}}{\sqrt{\sigma_i^2+\sigma_{max}^2}}\right)=\Phi\left(\frac{\mu_i-\mu_{max}}{\sqrt{2}}\right)$$</span></p>

<p>Code:</p>

<pre><code>@numba.jit(numba.float32[:,:](numba.float32[:,:]),nopython=True, nogil=True)
def prob_calc(m_ar):
    nn, n = m_ar.shape
    probs1 = np.empty(shape=(n,),dtype=np.float32)
    probs2 = np.empty(shape=(n,),dtype=np.float32)
    probs3 = np.empty(shape=(nn,n),dtype=np.float32)
    sqrt2 = numba.float32(np.sqrt(2.))
    for ii in range(nn):
        ii_maxind = np.argmax(m_ar[ii])
        ii_max = m_ar[ii,ii_maxind]
        for i in range(n):
            if i==ii_maxind:
                probs1[i]=1
            else:
                x=(m_ar[ii,i]-ii_max)/sqrt2
                probs1[i]=1/(1+np.exp(-(0.07056*x**3+1.5976*x)))
        p_sum = numba.float32(0)
        for i in range(n):
            p = 1
            for j in range(n):
                if i == j:
                    p*=probs1[j]
                else:
                    if j!=ii_maxind:
                        p*=1-probs1[j]
            p_sum += p
            probs2[i]=p
        for i in range(n):
            probs3[ii,i]=probs2[i]/p_sum
    return probs3

m_ar = np.random.uniform(low=-1, high=1, size=(1000,4)).astype(np.float32)
</code></pre>

<p>Time evaluation:</p>

<pre><code>%%timeit
prob_calc(m_ar)
# 109 µs ± 1.48 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>

<p>This is 109 microseconds for 1000 sets of 4 values. One set is calculated in 109 nanoseconds.</p>

<p>I used 1000 sets to remove the influence of calling compiled code from Python. So 109 nanoseconds should all be compiled code and not the overhead time for calling a numba function from Python.</p>

<p>Calculated probabilities (first 5):</p>

<pre><code>0.1698 0.0652 0.3825 0.3824
0.2594 0.1657 0.2844 0.2905
0.5794 0.0818 0.2350 0.1038
0.1456 0.4622 0.3049 0.0873
0.4261 0.2918 0.2210 0.0611
</code></pre>

<p>Real probabilities (Monte-Carlo):</p>

<pre><code>0.1540 0.0411 0.4026 0.4023
0.2621 0.1481 0.2913 0.2985
0.6153 0.0633 0.2349 0.0865
0.1280 0.4929 0.3143 0.0649
0.4512 0.2965 0.2143 0.0380
</code></pre>

<p>Mean values:</p>

<pre><code>-0.2171 -0.9985  0.4939  0.4937
 0.5553  0.1612  0.6369  0.6556
 0.8922 -0.7441  0.1040 -0.5620
-0.1951  0.8055  0.4383 -0.6080
 0.7952  0.4607  0.2183 -0.8293
</code></pre>
    </div>