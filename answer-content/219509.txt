<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>If you know the term 'un-Pythonic' you should also know the term <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a>. Before doing anything else, pep8-ify your code. </p>

<p>That means:</p>

<ul>
<li>Use <code>snake_case</code> for function and variable names.</li>
<li>Use <code>PascalCase</code> for class names.</li>
<li>Use <code>ALL_CAPS</code> for constants.</li>
</ul>

<p>It also means:</p>

<ul>
<li>Put your code in functions or classes</li>
<li>Use an <code>if __name__ == '__main__':</code> guard to invoke your main function.</li>
</ul>

<h1>Lists</h1>

<p>You make use of a list one time. But in this case, <code>list</code> is your very best friend! You should be doing everything with a list. Not only does it model the data you have, it enables you to use <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=list%20comprehension#list-comprehensions" rel="nofollow noreferrer"><strong>list comprehensions</strong></a>!</p>

<pre><code>def Player_Names(NumP):
    Names = []
    for i in range(1,NumP+1):
        Names.append(input("What is the name of Player"+str(i)+"?"))
    Names.append("")
    return Names
</code></pre>

<p>Becomes (cost: -4 lines):</p>

<pre><code>def input_player_names(howmany):
    return [input("Enter player name: ").strip() for _ in range(howmany)]
</code></pre>

<p>Or, if you want to be forgiving (cost: 2 lines)</p>

<pre><code>def read_player_name(num):
    while True:
        name = input("Enter name of player %d" % num).strip()
        if name:
            return name

def input_player_names(howmany):
    return [read_player_name(i) for i in range(howmany)]
</code></pre>

<p>But wait! There's more!</p>

<p>You can print a comma-separated list by using the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str%20join#str.join" rel="nofollow noreferrer"><code>str.join</code></a> method:</p>

<pre><code># No!
print(P1N, P2N, P3N, P4N, ", Welcome To Snakes And Ladders")
# Yes!
players = input_player_names(num_players)
print(", ".join(players), ", welcome to Snakes and Ladders!")
</code></pre>

<p>You can create a list based on another list:</p>

<pre><code>positions = [0 for player in players]
# or
positions = [0] * len(players)
</code></pre>

<p>You can use a list as an iterable, for the <code>any</code> and <code>all</code> <a href="https://docs.python.org/3/library/functions.html#built-in-funcs" rel="nofollow noreferrer">built-in functions</a>:</p>

<pre><code>while all(pos &lt; 100 for pos in positions):
# or 
while not any(pos &gt;= 100 for pos in positions):
</code></pre>

<p>You can use the <code>enumerate</code> built-in function to provide a name and an index at the same time:</p>

<pre><code>for i, player in enumerate(players):
    positions[i] = move(player, positions[i])
</code></pre>

<p>Lists are so cool, that they built them in to Python! Learn to love you some lists!</p>

<h1>Roll_Dice</h1>

<p>First, it should be <code>roll_dice</code>.</p>

<p>Second, it should be <code>roll_die</code> since "dice" is plural and "die" is singular.</p>

<h1>Move</h1>

<p>Your <code>move</code> function starts out well. The use of a dictionary for ladder and snake squares is just right: map from one value to another, and use <code>in</code> to detect when it occurs.</p>

<p>The part about checking each player variable is wrong. Just use a list, as shown above, and pass in one name and one starting location:</p>

<pre><code>def move(player_name, start_pos):
    snake_squares = {16: 4, 33: 20, 48: 24, 62: 56, 78: 69, 94: 16}
    ladder_squares = {3: 12, 7: 23, 20: 56, 47: 53, 60: 72, 80: 94}

    roll = roll_die()
    print("{} rolled a '{}' and moves to {}".format(player_name, roll, start_pos + roll)

    # Now check for snakes and ladders, and print customized messages
    # using player_name instead of "Player."
</code></pre>
    </div>