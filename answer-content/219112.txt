<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The debug logging is not going to help performance. You should really remove debugging code (and commented out code) before you ask for code review.</p>

<hr>

<blockquote>
<pre><code>df_reverse = [None] * len(df)
for i in range(len(df)):
    df_reverse[i] = [int(df[i][1])]
    df_reverse[i].append(int(df[i][0]))
</code></pre>
</blockquote>

<p>is hard to read and understand.</p>

<pre><code>def reversed_edge:
    return [int(edge[1]), int(edge[0])]


df_reverse = [reversed_edge(edge) for edge in df]
</code></pre>

<p>is clearer (although neither makes clear why the input isn't already using <code>int</code>s). And the meaning of <code>df</code> in <code>df_reverse</code> is opaque to me.</p>

<hr>

<p><code>DFS</code> contains two lines of code which just assign to unused variables, and some commented out code. Removing those, we get</p>

<blockquote>
<pre><code>def DFS(graph,node):
    explored.append(node)
    for second_vert in graph:
        if second_vert[0] == node:
            if second_vert[1] not in explored:
                DFS(graph,second_vert[1])

    global t
    t+= 1
    finish_time[node] = t
</code></pre>
</blockquote>

<p>There are two red flags here:</p>

<ol>
<li><blockquote>
<pre><code>    for second_vert in graph:
        if second_vert[0] == node:
</code></pre>
</blockquote>

<p><code>graph</code> (which is really <code>df_reverse</code>) is going to be filtered for every node in the graph, which means that it's using the wrong data structure. It should be a <code>dict</code>. This is almost certainly a major cause of the performance problem.</p></li>
<li><p><code>t</code> and <code>finish_time</code> are defined in the same global scope, but only one of them is declared <code>global</code> here. That may or may not be a bug, but it's certainly confusing.</p></li>
</ol>

<hr>

<p>As for the rest of the code, I can't understand what it's doing without some more helpful comments. Comments indicating that the following section of code implements step <code>#1.a)</code> are useless without an initial comment indicating the resource which the code follows. But since it's apparently doing two DFSs I rather hope that it's possible to refactor the code so that (a) it only implements DFS once, and calls it twice; (b) it does so with clearer scopes.</p>
    </div>