<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Low Hanging Fruit</h1>

<p>I obtained a 27% speed-up with one tiny change.</p>

<p>For this speed-up, I didn't want to wait 2 hours for tests to run, so I used a 3x20 board.  Elapsed times: </p>

<ul>
<li>0:01:44 - before the change</li>
<li>0:01:16 - after the change</li>
</ul>

<p>I'm sure you'd like to know what the change was.  I can't drag it out much more, so here it is.  I added this line to the <code>Nodes</code> class:</p>

<pre><code>    __slots__ = ('value', 'up', 'down', 'left', 'right', 'row_head', 'col_head')
</code></pre>

<p>This eliminates the <code>__dict__</code> member of the <code>Nodes</code> objects.  So instead of <code>self.down</code> being interpreted as <code>self.__dict__['down']</code>, the value referenced is in a predefined "slot" in the <code>Nodes</code> object.  Not only do the references become faster, but the object uses less space, which reduces the memory footprint, which increases locality of reference which again helps performance.</p>

<p>(Adding the <code>__slots__</code> to <code>Linked_list_2D</code> and <code>Solver</code> didn't change my performance numbers at all.)</p>

<h1>Interface</h1>

<pre><code>class Solver():
    def __init__(self, board, figures, rows, cols, figures_naming_start):
        ...
</code></pre>

<p>This is an "unfriendly" interface.  You have to pass all 5 values to the <code>Solver()</code>.  But some of these parameters are redundant.</p>

<p>You've got <code>board</code> and you have <code>rows</code> and <code>cols</code>.  Given a <code>board</code>, the <code>Solver</code> could determine <code>rows = len(board)</code> and <code>cols = len(board[0])</code>.  Or given <code>rows</code> and <code>cols</code>, the <code>Solver()</code> could construct an empty board.</p>

<p><code>figures_naming_start</code> is likely always going to be <code>1</code>.  Why not use a default value of <code>1</code> for that parameter?  Or pass a dictionary to <code>figures</code> with the key names the "name" for the figures.  And since <code>figures</code> is a predefined set, why not default it to a class constant?</p>

<pre><code>class Solver():
    STANDARD_FIGURES = { 'I' : ((1, 1, 1, 1, 1)),
                         'Q' : ((1, 1, 1, 1),
                                (1, 0, 0, 0)),
                         ...
                       }
    def __init__(self, board=None, rows=None, cols=None, figures=STANDARD_FIGURES):
        if board is None:
            board = [[0] * cols for _ in range(len(rows))]
        if rows is None and cols is None:
            rows = len(board)
            cols = len(board[0])
        ...
</code></pre>

<p>Usage:</p>

<pre><code>solver = Solver(rows=3, cols=20)
solver.find_solutions()
</code></pre>

<h1>Finding Solutions</h1>

<p>When a solution is found, it is printed.  What if you wanted to display it in a GUI of some kind, with coloured tiles?</p>

<p>It would be better for <code>find_solutions()</code> to <code>yield solution</code>, and then the caller could print the solutions, or display them in some fashion, or simply count them:</p>

<pre><code>solver = Solver(rows=3, cols=20)
for solution in solver.find_solutions():
    solver.print_board(solution)
</code></pre>

<h1>Progress</h1>

<p>The progress / timing messages should be presented via the <code>logging</code> module, where they could be printed, or written to a file, or turned off all together.</p>
    </div>