<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a greedy approach, this calculates a lower bound that I can pick initially, whenever the current grant is less than this lower bound, I can carry over the excess to remaining values, at the same time re-calculating the lower bound. Since my array is sorted, I can return as soon as I find a grant which is greater than the lower bound.</p>

<pre><code>  static double findGrantsCap(double[] grantsArray, double newBudget) {
    if(grantsArray == null || grantsArray.length == 0 || newBudget == 0) {
      return 0.0;
    }
    Arrays.sort(grantsArray);
    double cap = 0.0;
    double minAllocate = newBudget / grantsArray.length; 
    int allocated = 0; 
    for(double oldGrant : grantsArray) {
      if(oldGrant &lt;= minAllocate) {
        newBudget -= oldGrant;
        allocated ++;
        minAllocate = newBudget / (grantsArray.length - allocated);
      }
      else {
        return minAllocate;
      }
    }
    return grantsArray[grantsArray.length -1];
  }
</code></pre>
    </div>