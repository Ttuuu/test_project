<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Make sure all paths return a value</h2>

<p>The <code>isHigherPrecedenceThan</code> routine returns an explicit value for many different combinations of characters, but if none of those conditions match, the routine falls through and does not return a value.  It would better to make sure that a value is always returned, as in the following suggestion.</p>

<h2>Simplify your code</h2>

<p>In the <code>isHigherPrecedenceThan</code> routine, the code only returns <code>true</code> in nine specific cases and false in all other cases.  For this reason, we can greatly simplify the code:</p>

<pre><code>bool isHigherPrecedenceThan(char currSymbol, char onStack) {
    return  ((currSymbol == '*' || currSymbol == '/' || currSymbol == '^') 
                &amp;&amp; (onStack == '+' || onStack == '-')) 
            || (currSymbol == '^' 
                &amp;&amp; (onStack == '*' || onStack == '/' || onStack == '^'));
}
</code></pre>

<h2>Consider the use of objects</h2>

<p>If you had an <code>Operator</code> class, a number of things would be simplified.  For example, instead of having the code above as a standalone function, one could implement it as <code>operator&gt;</code> and keep all of operator-specific parts in once place.</p>

<h2>Use return values</h2>

<p>The <code>main</code> routine defines an empty string and the passes it to the <code>convertToPostfix</code> routine to fill in.  I'd expect instead that <code>convertToPostfix</code> would return the string.  Also, if you have the C++17 <code>std::optional</code> available, I think I'd prefer that to using exceptions.</p>

<h2>Consider better error checking</h2>

<p>The current code accepts <code>;;';'[]^_=!@#$%</code> as a valid infix string.  That doesn't seem correct.  It may be better to check for only valid characters.</p>

<h2>Consider unary vs. binary functions</h2>

<p>If we write "-8" it's clear that "-" is being used as a unary function with a single argument "8".  If we write "9-8" the "-" is a binary function that has a somewhat different purpose.  The current code makes no such distinction and accepts "-a" and renders "a-" which may be acceptable, but it's unlikely that "a^" is currectly translated as "a^".</p>
    </div>