<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I did some refactoring and debugging (at least from my perspective) here. I also switched from jquery to lodash for utility functions.</p>

<p>Bug fixes:</p>

<ul>
<li>If you check all the items in a group, the group becomes checked.</li>
<li>If you uncheck the group, all items become unchecked.</li>
<li>No longer mutating the component state. Instead it is cloned.</li>
<li>Items in two different groups can have the same name.</li>
</ul>

<p><a href="https://jsfiddle.net/d_ozenne/c7c3qey9/1/" rel="nofollow">jsFiddle</a></p>

<p><strong>JavaScript</strong></p>



<pre class="lang-js prettyprint-override"><code>class NestedCheckboxTree extends React.Component {
</code></pre>

<p>ES6 class syntax is cleaner, and you're transpiling for JSX anyway. I updated the name to be a little more descriptive. Note that you need to bind the event handlers yourself, so it's a good idea to do it in the constructor:</p>

<pre class="lang-js prettyprint-override"><code>    constructor(props) {
        super(props);
        this.onGroupChange = this.onGroupChange.bind(this);
        this.onChildChange = this.onChildChange.bind(this);

        this.state = _.transform(this.props.list, (state, children, groupName) =&gt; {
            state[groupName] = {
                name: groupName,
                checked: false,
                children: _.transform(children, (group, child) =&gt; group[child] = { name: child, checked: false }, {})
            };
        }, {});
    }
</code></pre>

<p>I built a state object with no arrays, so the change handlers can find things without searching or needing indexes. That cleans up a lot. Also note that I discarded the extra object "checklist" in the state and put the groups there directly. No need for the extra nesting. </p>

<pre class="lang-js prettyprint-override"><code>    onGroupChange(groupName) {
        let newState = _.cloneDeep(this.state);

        let group = newState[groupName];
        group.checked = !group.checked;
        _.forEach(group.children, c =&gt; { c.checked = group.checked });

        this.setState(newState);
    }
</code></pre>

<p>You're not supposed to mutate the state object, so this I clone it first. If you want to use the React immutability helpers you can and it might perform a little better. If you didn't want to uncheck the items when you uncheck the group you can make the forEach conditional here, but for my intended use case I do.</p>

<pre class="lang-js prettyprint-override"><code>    onChildChange(groupName, childName) {
        let newState = _.cloneDeep(this.state);

        var group = newState[groupName];
        group.children[childName].checked = !group.children[childName].checked;
        group.checked = _.every(group.children, "checked");

        this.setState(newState);
    }
</code></pre>

<p>This takes both the group name and the item name so we can update things without any searching and allowing different groups to contain children with the same name. Again, if you don't consider it a feature that checking all the items also checks the group, you could do something like <code>group.checked = group.checked &amp;&amp; group.children[childName].checked;</code></p>

<pre class="lang-js prettyprint-override"><code>    render() {
        return (
            &lt;div&gt;
                {_.map(this.state, (item) =&gt;
                    &lt;CheckboxGroup key={item.name} onGroupChange={this.onGroupChange} onItemChange={this.onChildChange} {...item} /&gt;
                )}
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>Splitting out a CheckboxGroup sub-component keeps the render small and readable.</p>

<pre class="lang-js prettyprint-override"><code>function CheckboxGroup(props) {
    return (
        &lt;div&gt;
            &lt;label&gt;
                &lt;input type="checkbox" checked={props.checked} onChange={props.onGroupChange.bind(null, props.name)} /&gt; &lt;strong&gt;{props.name}&lt;/strong&gt;
            &lt;/label&gt;

            &lt;div style={{marginLeft: 20}}&gt;
                {_.map(props.children, function (childItem) {
                    return (
                        &lt;Checkbox key={childItem.name} onChange={props.onItemChange.bind(null, props.name)} {...childItem} /&gt;
                    );
                }.bind(this))}
            &lt;/div&gt;
        &lt;/div&gt;
    );
}
</code></pre>

<p>Stateless functional components are cleaner and more reusable. But in truth this one is still much too ugly. <code>Checkbox</code> should accept children in the props so that the group checkbox would just be another <code>Checkbox</code> and you could still put the <code>&lt;strong&gt;</code> in there. And of course the divs should have classes so you could style them in CSS. Note that I'm binding one parameter of the onItemChange method here before passing it down to the <code>Checkbox</code>. This means the <code>Checkbox</code> doesn't need to know what group it is in.</p>

<pre class="lang-js prettyprint-override"><code>function Checkbox(props) {
    return (
        &lt;div&gt;
            &lt;label&gt;
                &lt;input type="checkbox" checked={props.checked} onChange={props.onChange.bind(null, props.name)} /&gt;
                {' '}
                {props.name}
            &lt;/label&gt;
        &lt;/div&gt;
    );
}
</code></pre>

<p>This is more like what a functional component should look like. Bind the onChange method with another argument, so the NestedCheckboxTree event handler gets both.</p>

<pre class="lang-js prettyprint-override"><code>var itemList = {
    Fruits: ['Apple', 'Orange', 'Pineapple', 'Mango'],
    Vegetables: ['Tomatoes', 'Cucumbers', 'Carrots', 'Avocados']
};

ReactDOM.render(&lt;NestedCheckboxTree list={itemList} /&gt;, document.getElementById('component'));
</code></pre>

<p>Just removed the jquery here so I could remove that dependency entirely.</p>
    </div>