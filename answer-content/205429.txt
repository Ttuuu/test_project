<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In an attempt to try to understand what you want to achieve, I came up with the below. Don't consider it as a review to make your code better - but just as an attempt to think along the paths of yours and t3chb0ts:</p>

<pre><code>  public abstract class TesterBase
  {
    protected bool IsNullableType(Type type)
    {
      return Nullable.GetUnderlyingType(type) != null;
    }

    public virtual void NullArgumentShouldThrow&lt;TIn, TOut&gt;(Func&lt;TIn, TOut&gt; function)
    {
      if (typeof(TIn).IsClass || IsNullableType(typeof(TIn)))
      {
        Assert.ThrowsException&lt;ArgumentNullException&gt;(() =&gt; function(default(TIn)), "Should throw ArgumentNullException");
      }
    }
  }

  public abstract class IBuilderTesterBase&lt;TBuilder, TIn, TOut&gt; : TesterBase where TBuilder : IBuilder&lt;TIn, TOut&gt;
  {
    protected abstract TBuilder Create();

    [TestMethod]
    public void TestBuildArgumentNullException()
    {
      var builder = Create();
      NullArgumentShouldThrow&lt;TIn, TOut&gt;(builder.Build);
    }

    // TODO: Other common IBuilder Tests
  }

  public abstract class SimpleIBuilderTesterBase&lt;TBuilder, TIn, TOut&gt; : IBuilderTesterBase&lt;TBuilder, TIn, TOut&gt; where TBuilder : IBuilder&lt;TIn, TOut&gt;, new()
  {
    protected override TBuilder Create()
    {
      return new TBuilder();
    }
  }

  public abstract class ComplexIBuilderTesterBase&lt;TBuilder, TIn, TOut&gt; : IBuilderTesterBase&lt;TBuilder, TIn, TOut&gt; where TBuilder : IBuilder&lt;TIn, TOut&gt;
  {
    Func&lt;TBuilder&gt; m_creator;

    public ComplexIBuilderTesterBase(Func&lt;TBuilder&gt; creator)
    {
      m_creator = creator;
    }

    protected override TBuilder Create()
    {
      return m_creator();
    }
  }

  [TestClass]
  public class ObjectBuilderTester : SimpleIBuilderTesterBase&lt;ReferenceTypeBuilder, object, int&gt;
  {
    // TODO: Other ObjectBuilder tests
  }

  [TestClass]
  public class DateTimeBuilderTester : SimpleIBuilderTesterBase&lt;ValueTypeBuilder, DateTime, int&gt;
  {
    // TODO: Other DateTimeBuilder tests
  }

  [TestClass]
  public class ComplexBuilderTester : ComplexIBuilderTesterBase&lt;ComplexBuilder, object, int&gt;
  {
    public ComplexBuilderTester() : base(DoCreate)
    {

    }

    private static ComplexBuilder DoCreate()
    {
      return new ComplexBuilder(null);
    }

    // TODO: Other ComplexBuilder tests
  }
</code></pre>

<p>I admit that it maybe doesn't add any clarity to the picture, but I think it gets the job done.</p>

<hr>

<p>Some explanation and thoughts about the above in order to answer the questions julealgon asks in the comment:</p>

<p>1) The idea of the <code>TesterBase.NullArgumentShouldThrow(...)</code> is, that it can be used by other tests. In fact the idea of <code>TesterBase</code> is that it should server as the owner of reusable "low level"/general purpose tests, that can be called by sub classes. It could have been implemented as a static helper class as well.</p>

<p>2) I think it's OK, that a test of <code>null</code> argument on a value type is bypassed without notice, because the test is irrelevant for those types. But you may have an other opinion about that.</p>

<p>3) In general IMO you should not be concerned about the depth of a class hierarchy as long as each level (subclass) serves a well defined purpose and is logical.</p>

<p>But again my answer is not postulating to be better than the approach of OP or even good. I were just trying to dive in to the field of the problem and understand it. </p>
    </div>