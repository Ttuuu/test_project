<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>depth</h1>

<p>From the snippets posted here I have a feeling that you didn't really know where to place the depth information. You're passing it as a parameter to the <code>makePlyImpl</code> method but then never use it. Instead you're checking <code>state.getDepth()</code> but that's only set before calling the method, and I don't see it updating the depth on all it's children.</p>

<p>As I understand it your code isn't really limiting search on depth then. Except if the initial depth is too low, in which case setDepth(...) throws an error that's never handled properly, and neither is it mentioned in the comments that this error could be thrown.</p>

<p>I personally would get rid of the depth as part of the State and keep it completely internally to the algorithms. Especially if some other algorithm might want to ignore depth altogether. Just use the one you already added in the internal method calls.  </p>

<p>Same thing for the <code>parallelDepth</code> parameter. <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">You're not even using it yet</a> so why did you already provide it?  </p>

<h1>comment @params</h1>

<p>Adding an @params in the comment block just to repeat what the name already says is meaningless. Unless you're required to do this by some outdated company policy I would leave those out of the comment block and instead use meaningful parameter names. Comments shouldn't say what things are, but why they're written like that.</p>

<p>For example:</p>

<pre><code>/**
* Constructs this minimax game engine.
</code></pre>

<p>It's a constructor what else is it going to do?</p>

<pre><code>* @param evaluatorFunction the evaluator function.
</code></pre>

<p>Ofcourse the evaluatorFunction is the evaluator function, that's why it's named evaluatorFunction in the first place</p>

<pre><code>* @param depth the search depth.
*/
</code></pre>

<p>The only thing this comment adds is that depth is limiting the search depth. Instead of this comment I would have named the variable something like <code>maxSearchDepth</code> which would make this obvious without any comment.</p>

<h1>why the special ...impTopmost methods?</h1>

<p><s>The only difference between the two impl methods is that the topmost also stores a pointer to a state. Is it really such a problem to store both a double and a pointer for each call instead of only for the topmost?</s>  </p>

<p>Took me too long to realise the different return types required. It can be simplified if we consider my next point though.</p>

<h1>P needed?</h1>

<p>I was slightly confused when I saw the required parameters to make a play. All algorithms will go "max current player &gt; min other player &gt; max current player &gt; ...". Since it will always start from max-ing do we really need to know the players here? I propose simplifying the initial method to</p>

<pre><code>public S makePly(S state) {
    return calculateBestChildState(state);
}
</code></pre>

<p>Since the initial best state is always the max we can cut your <code>...topmost</code> method in half and inline the remaining part here. With this change I also propose to split up the <code>...impl</code> methods into a separate min and max method.</p>

<pre><code>public S makePly(S state) {
    S bestState = null;
    double tentativeValue = Double.NEGATIVE_INFINITY;

    for (S childState : state.children()) {
        double value = playMin(childState,
                                   depth - 1);

        if (tentativeValue &lt; value) {
            tentativeValue = value;
            bestState = childState;
        }
    }
    return bestState;
}

private double playMin(S state, int depth) {
     if (depth == 0 
            || state.checkVictory() != null
            || state.isTerminal()) {
        return evaluatorFunction.evaluate(state);
    }

    double tentativeValue = Double.POSITIVE_INFINITY;

    for (S child : state.children()) {
        double value = playMax(child,
                               depth - 1);

        if (tentativeValue &lt; value) {
            tentativeValue = value;
        }
    }

    return tentativeValue;
}

private double playMax(S state, int depth) {
    ... //same as playMin but use &gt; instead of &lt;
}
</code></pre>

<h1>state.checkVictory() != null</h1>

<p>Copy pasting the implementation for playMin had me stunned on that line. When would checking a victory ever return null? Why not a boolean? Until I saw the the <em>next</em> line is checking for termination. Then what exactly is the point of this method? If we removed this check here, would the result ever change?</p>

<p>A more logical way for me would be that the termination check is sufficient in this step to see if the game is finished. After game end in some other place we can instead use the current player in that state as the winner... if only the state contained which player's turn it is in that state <em>(hint hint)</em></p>
    </div>