<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your substituting part should be put into its own function as well. It can also be greatly simplified using <code>dict.get</code>:</p>

<pre><code>rules = {"X": "X+YF", "Y": "FX-Y"}

def apply_rules(text, rules):
    return "".join(rules.get(c, c) for c in text)

&gt;&gt;&gt; apply_rules("FX+FX+", rules)
'FX+YF+FX+YF+'
</code></pre>

<p>Which you can embed in your code like this:</p>

<pre><code>command_string = axiom # Begin commands with only the axiom 
for _ in range(n_iterations):
    command_string = apply_rules(command_string, production_rules)
</code></pre>

<hr>

<p>I would put your example code at the end into a <code>if __name__ == '__main__':</code> guard to allow your module to be imported without this code being run.</p>

<hr>

<p>The variable <code>n_commands</code> is used exactly once, so it is not necessary to declare it.</p>

<hr>

<p>Your function is potentially very dangerous, because I could put <em>any</em> command in commands, even system calls.</p>
    </div>