<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The jungle</h2>
<p>OO design tends to create unneeded eco systems when the focus is the objects not the task at hand.</p>
<p>In this case <code>Point</code>, <code>Circle</code>, <code>points</code> and supporting functions have nothing to do with the problem. They exist to serve each other.</p>
<p>You clear the canvas so you can draw all the points, seams to me that the only reason you keep an array of points is so you can draw them after you clear the canvas.</p>
<p>Storing the points means no machine today using your function will ever be able to solve PI to over 6 digits as none have either the memory to hold all the points, nor the time to draw them.</p>
<p>Having an open <code>setInterval</code> (no handle to stop the interval)  constitutes a memory leak because you push to the <code>points</code> array each time.</p>
<p>The task is to calculate Pi via Monte Carlo method and show the points, it can be done without the overhead,of the OO eco system and supporting scope.</p>
<h2>General point</h2>
<ul>
<li><p>Use <code>const</code> for constants.</p>
</li>
<li><p>ECMAScripts <code>Math</code> has a <code>hypot</code> method already, however it is much quicker to do the calculation inline. As the calculation requires the radius squared, you may as well store the radius as such and then test if inside with <code>x * x + y * y &lt; radiusSqr</code></p>
</li>
<li><p><code>window</code> is the default object, you don't use it for <code>window.parseInt</code> so why use it for <code>innerWidth</code>?</p>
</li>
<li><p><code>canvas.width</code>, and <code>canvas.height</code> represent the resolution of the canvas. They can only be integer values. <code>parseInt</code> is thus redundant.</p>
</li>
<li><p>You are moving the ball to the center of the canvas and with it all the points. As such need to move each point back to the origin to calculate its distance from the ball. If you moved the canvas origin to the canvas center you only need the radius, and you don't need to move the points to the ball origin to get the distance.</p>
</li>
<li><p>The calculation works for random distribution of points. You introduce a very non uniform distribution by rounding the points to the nearest pixel.</p>
</li>
<li><p>Every 10 ms you redraw the canvas content. All browsers have a MAX display rate of 60 frame per second. you draw 100 so 40 of the frames you draw are never seen. Never render to the DOM or to canvas using <code>setInterval</code> at rates above a few frames per second. Use <code>requestAnimationFrame</code></p>
</li>
<li><p>You Search the DOM for an element with <code>id</code> <code>"out"</code>. every 10 ms. Better to get it once at the start. better yet use direct reference via the <code>id</code> See example</p>
</li>
<li><p>You call the <code>Number.toString</code> when you set <code>out.textContent</code> ECMAScript does type coercion automatically you don't need to call <code>toString</code> when assign a number to a string</p>
</li>
<li><p>Your DOM element ids are rather poor and could be improved</p>
</li>
<li><p>You should set the body margin and padding to "0px" so that the canvas fits without needing to have overflow clip the canvas.</p>
</li>
<li><p>If you don't need to locate an element uniquely use a CSS class to set its style rather than id</p>
</li>
<li><p>Use the <code>setTimeout</code> rather than <code>setInterval</code> to give a interval between rather than an interval over. Many devices need time to cool or they will force the issue and reduce the clock speed. <code>setInterval</code> can result in back to back calls to the function giving no rest for the CPU/GPU, the result will be slower performance for all services the machine is running.</p>
</li>
</ul>
<h2>Example</h2>
<p>The example removes the overhead of storing points.</p>
<p>The constant <code>pointsPerInterval</code>  defines how many points to calculate each interval. The points are added to the current 2D context path and only rendered when it can be displayed using <code>requestAnimationFrame</code></p>
<p>Having high rated of points quickly results in a black canvas. So the number of points drawn per frame is only a sub set of the points used. Thus it draws only ~1000 points per second and uses ~10million points per second to calculate PI.</p>
<p>The example also exposes a simple interface to reset the animations, or stop.</p>
<p>Also shows number of points use. "Mp" represents Mega points (1,000,000 points)</p>
<p>Click the canvas to reset.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";
const calculatePi = (() =&gt; {
    const ctx = canvas.getContext("2d");
    const width = canvas.width = innerWidth, halfWidth = width / 2;
    const height = canvas.height = innerHeight, halfHeight = height / 2;
    const radiusSqr = Math.min(halfWidth, halfHeight) ** 2;
    const areaScale = width * height / radiusSqr;
    const pointsPerInterval = 100000, interval = 10, showPointCount = 10;
    var pointCount, inCircleCount, timeoutHandle;

    ctx.setTransform(1, 0, 0, 1, halfWidth, halfHeight); // Move origin to cent of canvas

    resetCanvas();
    requestAnimationFrame(render); 
    function resetCanvas() {
        pointCount = 0;
        inCircleCount = 0;
        ctx.clearRect(-halfWidth, -halfHeight, width, height);
        ctx.lineWidth = 5;
        ctx.beginPath();
        ctx.arc(0, 0, radiusSqr ** 0.5, 0, Math.PI * 2);
        ctx.stroke();
        ctx.beginPath();
        addPoints();
    }
    function render(){
        ctx.fill();
        ctx.beginPath();
        currentPiId.innerText = inCircleCount / pointCount * areaScale;
        pointCountId.innerText = pointCount / 1000000 | 0;
        requestAnimationFrame(render);
    }
    function addPoints() {
        var i = pointsPerInterval; 
        pointCount += pointsPerInterval;
        while (i --) {
            const x = -halfWidth + Math.random() * width;
            const y = -halfHeight + Math.random() * height;
            i &lt; showPointCount &amp;&amp; (ctx.rect(x, y, 1, 1));
            inCircleCount += x * x + y * y &lt; radiusSqr ? 1 : 0;
        }
        timeoutHandle = setTimeout(addPoints, interval);
    }   
    return Object.freeze({
        stop() { clearTimeout(timeoutHandle) },
        restart() { 
            this.stop();
            resetCanvas();
        },
    });
})();


canvas.addEventListener("click", () =&gt; calculatePi.restart());</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>#canvas  {
  position: absolute;
  top: 0px;
  left: 0px;  
}
 
.box {
  position: absolute;
  z-index: 1;
  /*width: 200px;*/
  height: 20px;
  left: 5%;
  top: 5%;
  background-color: whitesmoke;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="canvas"&gt;&lt;/canvas&gt;
&lt;span class="box"&gt;&lt;span id="pointCountId"&gt;&lt;/span&gt;Mp = Pi &amp;#x2248; &lt;span id="currentPiId"&gt;&lt;/span&gt;&lt;/span&gt;</code></pre>
</div>
</div>

    </div>