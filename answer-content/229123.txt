<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks's @RubberDuck</p>

<p>After playing a bit in excel I have found the following solution using math and removing the loops, here you see the method, the Contract class that hosts this method for those that would like to try is above.  </p>

<pre><code>/// &lt;summary&gt;
/// Get an exchange acceptable price for a contract for a given Profit &amp; Loss value.
/// The price depends on the rounding of a given contract, possible minimum - ticks are 100, 10, 1.0, 0.1, 0.01, 0.001, 0.0005
/// &lt;/summary&gt;
/// &lt;param name="pnl"&gt;The P&amp;L that is aimed for.&lt;/param&gt;
/// &lt;param name="mayBeHigher"&gt;if set to &lt;c&gt;true&lt;/c&gt; then loss may be higher as well as profit to take the next acceptable 
/// contract price else accept less rather them more.&lt;/param&gt;
/// &lt;returns&gt;a acceptable price at a given Min-Tick range that would get a approximate P&amp;L&lt;/returns&gt;
/// &lt;remarks&gt;Please note that loss is a negative number, loss may be higher is actually a lower number as a loss of -100 is 
/// higher than a loss of -50&lt;/remarks&gt; 
public bool TryGetPriceAtPnl(decimal pnl, bool mayBeHigher, out double price)
{

    if ((Math.Abs(pnl) &lt;= CommisionPerTrade &amp;&amp; !mayBeHigher) || (Position.avgCost == 0 || Position.pos == 0))
    {
        price = 0;
        return false;
    }


    //get the Price for minimal price change (min-tick) in the current position on a contract
    //positions when short contain negative values so best to take abs values
    decimal pnlPerTick =Position.pos * MinTick;

    //calculate the distance in MinTicks that one needs to go for;
    var minTicksToMove = (pnl - (0- CommisionPerTrade)) / pnlPerTick;

    if (mayBeHigher &amp;&amp; Math.Abs(minTicksToMove) &gt; (int)Math.Abs(minTicksToMove))
    {
        if (pnl &gt; 0)//positive Number then MinTicksMove will be up
            minTicksToMove = (int)minTicksToMove + 1;
        else//MinTicksMove will needs to go down to allow greater loss
            minTicksToMove = (int)minTicksToMove - 1;
    }

    //can't have floating point imprecision but need to return a double so cast the decimal to a double
    price = Convert.ToDouble(Position.avgCost+((int)minTicksToMove*MinTick));
    return true;
}
</code></pre>
    </div>