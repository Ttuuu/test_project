<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know Java well, so I'll just be writing about more general ideas.</p>

<p><strong><a href="https://en.wikipedia.org/wiki/Zero_one_infinity_rule" rel="nofollow noreferrer">Zero One Infinity Rule</a></strong>: This is a guideline which says: "Allow none of foo, one of foo, or any number of foo." This applies in your <code>wordFreq()</code> method. When you have a lot of variables like <code>top1</code>, <code>top2</code>, etc. you're giving yourself a lot more opportunity to make a typo, and there's more code you have to change if you want the top 10 instead of the top 5. Instead, store these in an array (or <code>ArrayList</code>, or whatever the most appropriate container is)</p>

<p><strong>Bug</strong>: I'm not convinced <code>wordFreq</code> is correct. I'm unsure of the ethics or the CodeReview policy on describing bugs for homework assignments, so I will be cautious and say nothing more at this time.</p>

<p><strong>Performance</strong>: Look at </p>

<pre><code>while (traverse.hasNext()) {
        String e = (String) traverse.next();
        list.add(e);
        Collections.sort(list, String.CASE_INSENSITIVE_ORDER);

    }
</code></pre>

<p>First, why do you need this to be sorted? Second, I suspect resorting the list every time you add a new element is wasteful. Of course, it will have no noticeable impact in a program this small, but it is good to be mindful of algorithmic inefficiencies.</p>

<p><strong>I/O</strong>:  To improve flexibility, avoid hard-coding pathnames. It would be better to accept them as command-line arguments. You could use the hard-coded names as default values if the user doesn't supply an arguments. This is helpful if, for example, you want to use a script to run your program against a lot of input-files as a test of some sort.</p>

<p><strong>Error handling</strong>: If you are going to hardcode file names, it would be good to make that clear in your exception text. Right now if it can't find the dictionary, I will just see the message "file not found", and I have no way to know what you want without opening the code. Including the name of the file not found in the error message will make the program easier to use.</p>

<pre><code>public int count(String fileName) {
    try {
            ...
        } catch (FileNotFoundException ex) {

        }
}
</code></pre>

<p>If the intent is to keep going with an empty word list if there is no file, this needs to be more explicit. A comment would help clarify. Or better, an explicit check to see if the file exists. (I am unsure how using exceptions as control-flow is considered in the Java world. It is usually frowned upon). If this is not the intent, the error needs to be handled.</p>

<p><strong>Naming</strong>: I found your variable names to be mostly clear. It confused me that <code>spellCheck</code> wrote output though. <code>printMisspelledWords</code> would be much more clear. In general, it is <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">recommended</a> for methods to be verbs and classes and objects to be nouns.</p>

<p>Some of your names are vague. I had to keep checking which file <code>read()</code> was supposed to be read. It is surprising that <code>count()</code> not only returns the word count, but loads the dictionary too. You could be more clear my having functions like <code>loadDictionary()</code>  <code>loadWordList()</code>, and <code>getWordCount()</code>.</p>
    </div>