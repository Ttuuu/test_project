<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is mostly good, but it can be improved.</p>
<p>You might want to constrain the Resolver and Register protocols to classes. Since you want to share instances this won’t work with structs.</p>
<pre><code>protocol Register: class { ... }
</code></pre>
<p>Your <code>store</code> property doesn’t have to be lazy. Initializing an empty dictionary is cheap, so you can do that directly when your LazyServiceLocator is initialized.</p>
<p>The biggest issue I found is the ObjectIdentifier you use as the dictionary key. You don’t store the type of T (which would be <code>T.self</code>) but the type of the type of T - it’s metatype. I’m not quite sure if this can lead to problems, but it is unnecessary. Just use <code>ObjectIdentifier(T.self)</code>.</p>
<p>The other thing you might want to consider is renaming your <code>register(reference:)</code> method to <code>register(factory:)</code>. Calling something that creates an object reference is rather uncommon.</p>
<p>And finally you might want to consider adding an overload for <code>resolve</code> that takes the requested type as a parameter:</p>
<pre><code>extension Resolver {
    func resolve&lt;T&gt;(_ type: T.Type) -&gt; T {
        return resolve()
    }
}
</code></pre>
<p>With that you can write <code>let x = resolve(Foo.self)</code> instead of <code>let x: Foo = resolve()</code>. IMHO this is a bit more readable.</p>
    </div>