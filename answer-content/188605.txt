<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some problems with your current setup:</p>

<ol>
<li>The function being retried can't take keyword arguments. This can be fixed pretty easily for the most part, but allowing the function to take arguments like <code>delay</code> will be more complicated.</li>
<li>To use retries, you have to call <code>retry(is_user_exist, username, ...)</code>. This makes it harder to avoid repetition.</li>
<li>You may end up with the same traceback appearing in the logs 5 times in a row.</li>
<li><code>retry</code> requires that the function returns things in a certain way. This will be annoying for some functions when you have to add extra lines, and terrible for other functions where a falsy return value is valid.</li>
</ol>

<p>I suggest a decorator such as the one below. I wrote this decorator a while ago and have happily used it in several places. The idea is similar to Dannnno's answer, but I only retry after exceptions and don't pay attention to return values.</p>

<pre><code>def retry(num_attempts=3, exception_class=Exception, log=None, sleeptime=1):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            for i in range(num_attempts):
                try:
                    return func(*args, **kwargs)
                except exception_class as e:
                    if i == num_attempts - 1:
                        raise
                    else:
                        if log:
                            log.error('Failed with error %r, trying again', e)
                        sleep(sleeptime)

        return wrapper

    return decorator
</code></pre>

<p>Here is some usage in real code:</p>

<pre><code>from requests.exceptions import ConnectionError

@retry(5, ConnectionError, log)
def request(self, method, url='', **kwargs):
    ...
</code></pre>

<p>Here's another example where I only retry at the call site, rather than changing the definition of the function:</p>

<pre><code>retry(5, Exception, log)(ftp.get)(path, destination)
</code></pre>

<p>Your case is a bit unusual because an exception is involved but you ultimately don't want to raise it. You could perhaps rewrite your code as follows:</p>

<pre><code>if is_user_exist(username):
    process_existing_user()
else:
    process_nonexistent_user()
</code></pre>

<p>becomes:</p>

<pre><code>try:
    retry(5, KeyError, log)(pwd.getpwnam)(username)
except KeyError:
    process_nonexistent_user()
else:
    process_existing_user()
</code></pre>

<p>If you have other functions which you want to retry when a condition is false that don't involve exceptions, you could explicitly raise an exception:</p>

<pre><code>class StuffNotFound:
    pass

@retry(exception_class=StuffNotFound)
def process_stuff():
    stuff = get_stuff():
    if not stuff:
        raise StuffNotFound()
    process(stuff)
</code></pre>

<p>Ultimately the problem with this question is that we're talking about how to write a very generic and widely applicable function, but we only have one use case to apply it to. If you have other examples of code you want to retry, this discussion can be more informed.</p>
    </div>