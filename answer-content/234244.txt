<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is just how I like things, but I'd add a little more spacing in some parts. Your code is quite squished-together looking. For example, I'd write <code>_delete_json_file</code> closer to</p>

<pre><code>def _delete_json_file(self, event):
    json = self._create_json_filename(self.files[self.image_index])

    try:
        remove(json)

    except FileNotFoundError as e:
        print("Labels don't exist for this image")

    self.save_on_next = False
</code></pre>

<p>and for <code>_next_image</code></p>

<pre><code>def _next_image(self, event):
    if len(self.poly_coords):
        self._dump_coord_dict()

    self.image_index += 1

    if self.image_index &gt; len(self.files) - 1:
        print("End of images!")
        return

    self._draw_image(self.files[self.image_index])
    self._load_and_draw_predrawn_polys(self.files[self.image_index])
    self._update_string()
</code></pre>

<p>and</p>

<pre><code>def _dump_coord_dict(self):
    if not self.save_on_next:
        return

    out_filename = self._create_json_filename(self.files[self.image_index])

    with open(out_filename, 'w') as f:
        dump(self.poly_coords, f)

    self.object_ids = defaultdict(list)
    self.poly_coords = defaultdict(list)
    self.poly_count = 0
</code></pre>

<p>It lengthens your code, but I've always found that this style makes code easier to read.</p>

<p>PEP8 does <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">recommend the use of blank lines, to some extent</a>:</p>

<blockquote>
  <p>Use blank lines in functions, sparingly, to indicate logical sections.</p>
</blockquote>

<p>In your code above, I would consider a call to <code>open</code> with a context manager, or a <code>try...except</code> to be "logical section[s]".</p>

<hr>

<p>And in <code>_next_image</code>, I don't think that early return half-way through the function reads nicely. I'd probably change that bit to something like</p>

<pre><code>    if self.image_index &gt; len(self.files) - 1:
        print("End of images!")

    else:
        self._draw_image(self.files[self.image_index])
        self._load_and_draw_predrawn_polys(self.files[self.image_index])
        self._update_string()
</code></pre>

<p>or, maybe flipped:</p>

<pre><code>if self.image_index &lt;= len(self.files) - 1:
    self._draw_image(self.files[self.image_index])
    self._load_and_draw_predrawn_polys(self.files[self.image_index])
    self._update_string()

else:
    print("End of images!")
</code></pre>

<p>I like putting the more complicated, bulkier code first unless there's a good reason not to (like negating the condition hurting readability)</p>

<hr>

<pre><code>point = namedtuple('point', 'x y')
</code></pre>

<p><code>point</code> should be in capitals since it's really a class. I'd also go for <code>typing.NamedTuple</code> here too unless you really like the brevity of <code>namedtuple</code>:</p>

<pre><code>from typing import NamedTuple

class Point(NamedTuple):
    x: int  # Or float. I can't offhand tell the type
    y: int
</code></pre>

<p>This gives the minor bonus of indicating types for the reader and IDE.</p>

<hr>

<p><code>_not</code> isn't a very descriptive name. I'd probably call it <code>_toggle_drawing</code> or something similar.</p>

<hr>

<pre><code>class SimpleSegment(object):
   . . .
</code></pre>

<p>Unless you really want backwards compatibility with Python 2, don't specify <code>object</code> as the base class. It's redundant.</p>

<hr>

<pre><code>. . . ].append(point(x=poly_coord[0], y=poly_coord[1]))
</code></pre>

<p>Assuming <code>poly_coord</code> is an iterable with exactly two elements, that can be written as</p>

<pre><code>. . . ].append(point(*poly_coord))
</code></pre>

<p>Just "unpack" <code>poly_coord</code> into the call to the <code>point</code> constructor.</p>
    </div>