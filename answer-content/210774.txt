<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Alternative solution</h2>

<p>Here is the (current) fastest solution. It is pretty straightforward :</p>

<p><strong>1-</strong> First off, let's model the Sudoku grid :
A row is a set of unique digits from 0 to 9, represented by characters. The rows all together, will be represented by an array of those sets :</p>

<pre><code>var rows = Array(repeating: Set&lt;Character&gt;(), count: 9)
</code></pre>

<p><code>rows</code> is mutable since we'll be filling those initially empty sets.</p>

<p><strong>2-</strong> The same goes for the columns :</p>

<pre><code>var columns = Array(repeating: Set&lt;Character&gt;(), count: 9)
</code></pre>

<p><strong>3-</strong> A 3x3 box will be modeled by a set of characters. Three boxes on the same horizontal line will be represented by an array of 3 boxes (3 sets of characters). 3 of those arrays make a whole Sudoku grid :</p>

<pre><code>var boxes = Array(repeating: Array(repeating: Set&lt;Character&gt;(), count: 3), count: 3)
</code></pre>

<p><strong>4-</strong> Then, we loop through all the "rows" and "columns" inside of <code>board</code> :</p>

<pre><code>for row in 0..&lt;9 {
    for column in 0..&lt;9 {
        let value = board[row][column]
        ...
    }
}
</code></pre>

<p><strong>5-</strong> If a cell is not empty :</p>

<pre><code>let value = board[row][column]

if value != "." {
    ...
}
</code></pre>

<p><strong>6-</strong> ... we try to insert it into a cell. A cell belongs to a row, a column, and a box. Three checks have to be made: If either the row, or the column, or the box already contains that character, return <code>false</code>. </p>

<p>To do this we use the pretty handy <code>inserted</code> element from the tuple returned by the <a href="https://developer.apple.com/documentation/swift/set/1541375-insert" rel="nofollow noreferrer"><code>insert(_:)</code></a> method :</p>

<pre><code>if !rows[row].insert(value).inserted
    || !columns[column].insert(value).inserted
    || !boxes[row/3][column/3].insert(value).inserted {
    return false
}
</code></pre>

<hr>

<p>Here is the complete solution :</p>

<pre><code>class Solution {
    func isValidSudoku(_ board: [[Character]]) -&gt; Bool {
        var rows = Array(repeating: Set&lt;Character&gt;(), count: 9)
        var columns = Array(repeating: Set&lt;Character&gt;(), count: 9)
        var boxes = Array(repeating: Array(repeating: Set&lt;Character&gt;(), count: 3), count: 3)

        for row in 0..&lt;9 {
            for column in 0..&lt;9 {
                let value = board[row][column]

                if value != "." {
                    if !rows[row].insert(value).inserted
                        || !columns[column].insert(value).inserted
                        || !boxes[row/3][column/3].insert(value).inserted {
                        return false
                    }
                }
            }
        }

        return true
    }
}
</code></pre>

<p>It's execution time is <code>204 ms</code> on LeetCode :</p>

<p><a href="https://i.stack.imgur.com/pFpWh.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/pFpWh.png" alt="100%"></a></p>

<p>Compared to <code>212 ms</code> for the alternative approach given in the accepted answer (which is faster than 70.73%)</p>

<hr>

<h2>Playing golf</h2>

<p>If you're looking for a short, <em>Pythony</em>, solution, (not necessarily the fastest), then here is a solution :</p>

<pre><code>class Solution {
    func isValidSudoku(_ board: [[Character]]) -&gt; Bool {
        var seen: [String] = []
        for (i, row) in board.enumerated() {
            for case let (j, c) in row.enumerated() where c != "." {
                seen.append(contentsOf: ["r\(i)\(c)", "c\(j)\(c)", "b\(i/3)\(j/3)\(c)"])
            }
        }
        return seen.count == Set(seen).count
    }
}
</code></pre>
    </div>