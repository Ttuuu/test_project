<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since the accepted answer still makes use of a sort function and thus has as time complexity \$O(n \log(n))\$, I would like to add that there is an option to have \$O(n)\$ time complexity. Of course as \$n\$ in the challenge is always 5, the time complexity for the challenge is actually constant, but the solution can generalize to \$n\$. (i.e. Search the minimum and maximum values that can be calculated by summing exactly \$n-1\$ of \$n\$ integers.)</p>

<p>The important part is basically to not use sort. Calculate the smallest and the biggest element of the input array with a simple loop that iterates once over the values. Then calculate the total sum of the entire array (which also just iterates once over the values and can happen in the same loop but that's not necessary). Finally subtract the minimum and maximum elements from the total sum to get respectively the maximum and minimum values as result.</p>
    </div>