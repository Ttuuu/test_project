<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Platform-dependent code</h1>

<p>There's no need to bring in <code>&lt;Windows.h&gt;</code> - with a couple of small changes, this can be portable C++, accessible to everyone:</p>

<pre><code>#include &lt;cstdint&gt;
using UINT64 = std::uint_fast64_t;  /* this is the quick fix - really, just
                                       use the standard type everywhere */

// another quick fix
#include &lt;thread&gt;
void Sleep(unsigned int ms)
{
    std::this_thread::sleep_for(std::chrono::milliseconds{ms});
}
</code></pre>

<h1>Prefer C++ headers</h1>

<p>Unless you're providing functions with C linkage, prefer to include the C++ versions of standard headers (e.g. <code>&lt;ctime&gt;</code>, <code>&lt;cmath&gt;</code>).</p>

<h1>Don't include unnecessary headers</h1>

<p>The header brings in many standard headers that aren't required for the interface, only for the implementation.  Remove these and move them into <code>Manager.cpp</code> where they don't affect other translation units (e.g. <code>Main.cpp</code>):</p>

<pre><code>#include &lt;cmath&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;
#include &lt;thread&gt;
</code></pre>

<h1>Don't expose internals</h1>

<p><code>n</code>, <code>Container</code> and <code>GreaterThanByCost</code> shouldn't be visible to client code - these could usefully be private <code>static</code> members.  And we should aspire to allowing <code>n</code> to be specified as a parameter.</p>

<h1>Naming</h1>

<p><code>Manager</code> is the single least useful class name I've encountered.  And the vague naming is then reflected in its contents: it doesn't seem to know what its job is.  It holds a starting position and finds a solution, but it also seems to perform timing and it exposes methods such as <code>encode()</code> that have no value to users of the class (and should probably be private).</p>

<h1>Copy constructor</h1>

<p>This constructor is worse than useless:</p>

<pre><code>Manager::Manager(const Manager&amp; other)
{}
</code></pre>

<p>It's better to make <code>Manager</code> non-copyable:</p>

<pre><code>Manager(const Manager&amp;) = delete;
void operator=(const Manager&amp;) = delete;
</code></pre>

<h1>Encode and decode</h1>

<p>That's a cute method to cram a 4x4 board position into 64 bits of storage, but it all falls apart with larger board sizes.  The cleverness constrains the code.</p>

<p>It might be possible to use this technique for small boards and fall back to more general code at bigger sizes; my recommendation is to write the general code first, and then determine whether there's a benefit to optimising.</p>

<h1>Solvability check</h1>

<p>There's likely a bug in <code>checkSolvable()</code>, but it's hard to identify it, because we can't test this method in isolation.  This is a good motivation to break apart the big monolithic <code>Manager</code> class into smaller components that can be used together, then we'll be able to test functions such as this before putting them together into a program.</p>

<h1>Printing solution</h1>

<p>This method really should be <code>const</code>, as should its argument.</p>

<p>It's very inefficient to <code>insert()</code> to the front of a vector.  Use a container such as <code>std::stack</code> that's designed for that, or <code>push_back()</code> instead, and <code>std::reverse</code> once, afterwards.  Better still, <code>push_back()</code> and then access the elements in reverse order:</p>

<pre><code>void Manager::printSolution(const Container* top) const
{
    std::chrono::duration&lt;double&gt; t = end - start;

    std::vector&lt;const Container*&gt; steps;
    for (auto c = top;  c-&gt;parent;  c = c-&gt;parent) {
        steps.push_back(c);
    }

    for (auto i = steps.crbegin();  i != steps.crend();  ++i) {
        printBoard(*i);
        std::this_thread::sleep_for(std::chrono::milliseconds{25});
    }

    std::cout &lt;&lt; steps.size() &lt;&lt; " steps in " &lt;&lt; t.count() &lt;&lt; "s." &lt;&lt; std::endl;
}
</code></pre>

<h1>Memory leaks</h1>

<p>I get several megabytes leaked each run:</p>

<pre class="lang-none prettyprint-override"><code>==28303== 35,680 (31,680 direct, 4,000 indirect) bytes in 396 blocks are definitely lost in loss record 6 of 9
==28303==    at 0x4835E2F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28303==    by 0x10B15E: Manager::right() (205667.cpp:496)
==28303==    by 0x10AFCE: Manager::addMoves() (205667.cpp:417)
==28303==    by 0x10A685: Manager::Run() (205667.cpp:127)
==28303==    by 0x10B5BA: main (205667.cpp:606)
==28303== 
==28303== 35,680 (32,080 direct, 3,600 indirect) bytes in 401 blocks are definitely lost in loss record 7 of 9
==28303==    at 0x4835E2F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28303==    by 0x10B0E4: Manager::left() (205667.cpp:472)
==28303==    by 0x10AFC2: Manager::addMoves() (205667.cpp:416)
==28303==    by 0x10A685: Manager::Run() (205667.cpp:127)
==28303==    by 0x10B5BA: main (205667.cpp:606)
==28303== 
==28303== 44,160 (29,600 direct, 14,560 indirect) bytes in 370 blocks are definitely lost in loss record 8 of 9
==28303==    at 0x4835E2F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28303==    by 0x10AFE8: Manager::up() (205667.cpp:424)
==28303==    by 0x10AFAA: Manager::addMoves() (205667.cpp:414)
==28303==    by 0x10A685: Manager::Run() (205667.cpp:127)
==28303==    by 0x10B5BA: main (205667.cpp:606)
==28303== 
==28303== 53,520 (33,440 direct, 20,080 indirect) bytes in 418 blocks are definitely lost in loss record 9 of 9
==28303==    at 0x4835E2F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28303==    by 0x10B066: Manager::down() (205667.cpp:448)
==28303==    by 0x10AFB6: Manager::addMoves() (205667.cpp:415)
==28303==    by 0x10A685: Manager::Run() (205667.cpp:127)
==28303==    by 0x10B5BA: main (205667.cpp:606)
</code></pre>

<p>These really need to be fixed.</p>
    </div>