<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Initial thoughts</h1>

<p>Looking at the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate" rel="nofollow noreferrer">MDN documentation for <code>Element.animate()</code></a> I see this warning at the top:</p>

<blockquote>
  <p><strong>This is an <a href="https://developer.mozilla.org/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental" rel="nofollow noreferrer">experimental technology</a></strong><br>
  Check the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate#Browser_compatibility" rel="nofollow noreferrer">Browser compatibility table</a> carefully before using this in production.</p>
</blockquote>

<p>Looking at that compatibility table we see it isn't supported at all by a couple browsers...</p>

<p><a href="https://i.stack.imgur.com/Uz8p9.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Uz8p9.png" alt="browser compatibility"></a></p>

<p>I searched for "<em>navigator.sayswho</em>" online and found snippets like <a href="https://gist.github.com/msrafi/5135669" rel="nofollow noreferrer">this gist</a> that matches most of the first function, and I also see <a href="https://gist.github.com/paulirish/1579671" rel="nofollow noreferrer">this gist for the requestAnimationFrame polyfill
 by Paul Irish</a>. I read over the comments and noted <a href="https://gist.github.com/paulirish/1579671#gistcomment-2976376" rel="nofollow noreferrer">the comment 7/21/2019 by jalbam</a> claims to have an adaptation that has improved performance. I haven't tested it out but it may work slightly better than the original.</p>

<p>My conclusion is that you basically wrapped those two snippets in a DOM loaded callback (and perhaps modified the variable name <code>browserPrefix</code> to <code>brsrPrefix</code>. </p>

<blockquote>
  <p>"...<em>am wondering if this code block could be made better, more secure or to run more optimally i.e. removing unnecessary <code>if</code> statements or reworking the code so it is less verbose</em>"</p>
</blockquote>

<p>It seems that the first snippet is pointless because: </p>

<ul>
<li>nothing is returned from the IIFE that is used to assign <code>navigator.sayswho</code> and thus that is <code>undefined</code>, and</li>
<li><code>brsrPrefix</code> doesn’t appear to be used and its scope is limited to the anonymous/lambda function/closure passed to the DOM loaded event handler.</li>
</ul>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>document.addEventListener("DOMContentLoaded",(()=&gt; {
        // ::&gt;&gt;. Notes:: ......................
    // ::&gt;&gt;. A Handy Function to get the Browser Prefix ~
          // Gets the browser prefix
        var brsrPrefix;
        navigator.sayswho= (function(){
          var N = navigator.appName, ua = navigator.userAgent, tem;
          var M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
              if(M &amp;&amp; (tem = ua.match(/version\/([\.\d]+)/i))!= null) M[2] = tem[1];
                 M = M? [M[1], M[2]]: [N, navigator.appVersion,'-?'];
                 M = M[0];
              if(M == "Chrome")  { brsrPrefix = "webkit"; }
              if(M == "Firefox") { brsrPrefix = "moz"; }
              if(M == "Safari")  { brsrPrefix = "webkit"; }
              if(M == "MSIE")    { brsrPrefix = "ms"; }
        })();
        
        console.log(' inside DOM Loaded callback - brsrPrefix', brsrPrefix, 'navigator.sayswho: ', navigator.sayswho);
}))
setTimeout(function() {
console.log(' outside DOM Loaded callback - brsrPrefix', brsrPrefix, 'navigator.sayswho: ', navigator.sayswho);
}, 3000);</code></pre>
</div>
</div>


<p><a href="https://medium.com/hackernoon/polyfills-everything-you-ever-wanted-to-know-or-maybe-a-bit-less-7c8de164e423" rel="nofollow noreferrer">This hackernoon article about polyfills and transpilers</a> might likely be interesting.</p>

<h1>Suggestions</h1>

<h2>Avoid Es6 features when attempting to target older browsers</h2>

<p>The first thing I noticed is that the first line contains an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow function expression</a>: </p>

<blockquote>
<pre><code> document.addEventListener("DOMContentLoaded",(()=&gt; {
</code></pre>
</blockquote>

<p>Bear in mind the browser support for those- some browsers that <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate#Browser_compatibility" rel="nofollow noreferrer">wouldn’t support <code>Element.animate()</code></a> but would support <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame#Browser_compatibility" rel="nofollow noreferrer"><code>requestAnimationFrame()</code></a> would not support the syntax of an arrow function. </p>

<p>I tried running the code as is in IE 11 but set to emulate version 10 (both in Document mode and user agent string) since version 10 is the earliest version to support <code>requestAnimationFrame()</code>. </p>

<p><a href="https://i.stack.imgur.com/AGULl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/AGULl.png" alt="emulation mode in IE 11"></a></p>

<p>It showed a syntax error in the console:</p>

<p><a href="https://i.stack.imgur.com/9kZuF.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/9kZuF.png" alt="syntax error in IE 10 emulation"></a></p>

<p>There is another es6 feature that leads to an error in IE version 10 and earlier: the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Browser_compatibility" rel="nofollow noreferrer"><code>let</code></a> keyword is used:</p>

<blockquote>
<pre><code>            let requestAnimationFrame= window.requestAnimationFrame ||
                                       window.mozRequestAnimationFrame ||
                                       window.webkitRequestAnimationFrame ||
                                       window.msRequestAnimationFrame ||
                                       function(callback) {
                                          return window.setTimeout(callback, 1000/60)
                                       };
</code></pre>
</blockquote>

<p>Note the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Browser_compatibility" rel="nofollow noreferrer">browser support for that keyword</a>. So use a <a href="https://developer.mozilla.org/en-US/docs/web/JavaScript/Reference/Operators/function" rel="nofollow noreferrer">traditional function expression</a> instead of an arrow function and the <code>var</code> keyword instead of <code>let</code>.</p>

<h2>Users can modify the User agent of their browser</h2>

<p>As described above with the IE 10/11 test, users can modify the user agent - including a completely different vendor - <a href="https://www.howtogeek.com/113439/how-to-change-your-browsers-user-agent-without-installing-any-extensions/" rel="nofollow noreferrer">this post describes how to change the user agent in Chrome, Firefox and Safari</a>. Because of this it is best to limit dependence on detection using the user agent string.</p>

<h2>Browser support for <code>addEventListener()</code></h2>

<p>Another thing to consider is the <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Browser_compatibility" rel="nofollow noreferrer">browser support for <code>addEventListener()</code></a></p>

<blockquote>
  <p>In Internet Explorer versions before IE 9, you have to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/attachEvent" rel="nofollow noreferrer"><code>attachEvent()</code></a>, rather than the standard <code>addEventListener()</code>. For IE, we modify the preceding example to:</p>

<pre><code>if (el.addEventListener) {
  el.addEventListener('click', modifyText, false); 
} else if (el.attachEvent)  {
  el.attachEvent('onclick', modifyText);
}
</code></pre>
</blockquote>

<p><sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Legacy_Internet_Explorer_and_attachEvent" rel="nofollow noreferrer">2</a></sup></p>

<p>If you want to support those versions of IE then you would likely want to modify the code to add the DOM-loaded callback accordingly. Note that whle IE supports <code>DOMContentLoaded</code> starting with version 9<sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event#Browser_compatibility" rel="nofollow noreferrer">3</a></sup>, <a href="https://stackoverflow.com/q/24904010/1575353">events tied to that event don't always get triggered in IE</a>. You may have to do something like this:</p>

<pre><code>function checkBrowser() {
    // code currently in the anonymous callback to ocument.addEventListener("DOMContentLoaded"
}

// in case the document is already rendered
if (document.readyState!='loading') checkBrowser();
// modern browsers
else if (document.addEventListener) document.addEventListener('DOMContentLoaded', checkBrowser);
// IE &lt;= 8
else document.attachEvent('onreadystatechange', function(){
    if (document.readyState=='complete') checkBrowser();
});
</code></pre>

<p>-from <a href="https://plainjs.com/javascript/events/running-code-when-the-document-is-ready-15/" rel="nofollow noreferrer">plainJS.com</a></p>

<p>Are you sure that code needs to be executed after the DOM has loaded? if not, it could be put into an IIFE to preserve the scope limitation the variables in the callback function.</p>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Other_notes" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Other_notes</a></sub></p>

<p><sup>2</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Legacy_Internet_Explorer_and_attachEvent" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Legacy_Internet_Explorer_and_attachEvent</a>)</sub></p>

<p><sup>3</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event#Browser_compatibility" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event#Browser_compatibility</a></sub></p>
    </div>