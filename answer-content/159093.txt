<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code># defining possible lists
</code></pre>

<p>Don't write comments that describe <em>what the code does</em>; we can see the code, we know what it's doing. If you ever need comments, it's where it's otherwise unclear <em>why the code's doing it</em>.</p>

<hr>

<pre><code>lists = ['cars','favorite foods','family members']
</code></pre>

<p>Per <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">the style guide</a>, you should put spaces after the commas:</p>

<pre><code>lists = ['cars', 'favorite foods', 'family members']
</code></pre>

<hr>

<pre><code>x = ['Hyundai','Acura','Honda','Suzuki','Ford']
</code></pre>

<p><code>x</code> is a terrible name for this list (see also: <code>y</code>, <code>z</code>). Names should be more descriptive:</p>

<pre><code>cars = ['Hyundai', 'Acura', 'Honda', 'Suzuki', 'Ford']
</code></pre>

<p>But given that <code>lists</code> is supposed to refer to the three lists below it, why not use a dictionary instead:</p>

<pre><code>lists = {
    'cars': ['Hyundai', 'Acura', 'Honda', 'Suzuki', 'Ford'],
    ...
}
</code></pre>

<hr>

<pre><code>def listselection():
    print('The following lists exist within the system. Which would you like to see?')
    print(lists)
</code></pre>

<p>The style guide recommends <code>snake_case</code> names for functions. It's helpful to include a <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer">docstring</a> when you define a function. Given the above switch to a dictionary, we need to change the second line slightly:</p>

<pre><code>def list_selection():
    """Show the user the selection of available lists."""
    print('The following lists exist within the system. Which would you like to see?')
    print(list(lists)) 
</code></pre>

<p>Note that by default you get a dictionary's keys when you iterate over it, so <code>list(lists) == ['cars', ...]</code>.</p>

<hr>

<pre><code>def errorchecking():    
    global option

    while True:
        try:
            option = str(input())
        except:
            print('Please type letters, not numbers.')
            continue

        if option == 'cars':
            break
        elif option == 'favorite foods':
            break
        elif option == 'family members':
            break
        else:
            print('Please re-enter your selection')

    return option
</code></pre>

<p>Using a <code>while True</code> loop to take and validate input is a good idea, but there are a few problems here:</p>

<ul>
<li><p>Why do you use <code>global option</code>? You <code>return option</code> at the end of the function, which is the way you ought to provide it to other functions. Using global state is a bad pattern, get out of the habit of doing it.</p></li>
<li><p>Your error checking doesn't actually do anything. The result of <code>input(...)</code> is <em>always a string</em>, <code>str(input(...))</code> will <em>never</em> cause an exception. Also your error checking is too broad; <a href="http://blog.codekills.net/2011/09/29/the-evils-of--except--/" rel="noreferrer">bare <code>except</code></a> is a bad idea, you should be specific about the kind of errors you expect and allow unexpected exceptions to get raised up. <a href="https://www.python.org/dev/peps/pep-0020/" rel="noreferrer"><em>"Errors should never pass silently. Unless explicitly silenced."</em></a></p></li>
<li><p>This part:</p>

<pre><code>if option == 'cars':
    break
elif option == 'favorite foods':
    break
elif option == 'family members':
    break
else:
    print('Please re-enter your selection')
</code></pre>

<p>is not very DRY (<strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself); we already have those options, they're the keys to our dictionary (or the values of your list in the original). Therefore we could write:</p>

<pre><code>if option in lists:
    break
else:
    print('Please re-enter your selection')
</code></pre></li>
</ul>

<p>With all of the above changes the function is now a lot more concise:</p>

<pre><code>def error_checking():
    """Take valid input from the user."""
    while True:
        option = str(input())
        if option in lists:
            return option  # this will also end the loop
        print('Please re-enter your selection')
</code></pre>

<p>Now it's clear that <code>error_checking</code> doesn't really describe what this function does; that's only part of its job, but the name should tell you how to <em>use</em> it. I would call it something like <code>get_valid_input</code>.</p>

<hr>

<pre><code>def listconcatenation():
    global spam
    global listitem

    listitem = 'Here are the items in my list: '

    if option == 'cars':
        spam = x
    elif option == 'favorite foods':
        spam = y
    elif option == 'family members':
        spam = z

    for i in spam:
        if spam.index(i) &lt; (len(spam)-1):
            listitem = listitem + i + ', '
        else:
            listitem = listitem + 'and ' + i + '.'

    return listitem
</code></pre>

<p>Same things again: put underscores in the names; remove the global state (make <code>option</code> a parameter instead, you already <code>return listitem</code>). But there are three more specific improvements:</p>

<ul>
<li><p>The dictionary we introduced above means you can go from this:</p>

<pre><code>if option == 'cars':
    spam = x
elif option == 'favorite foods':
    spam = y
elif option == 'family members':
    spam = z
</code></pre>

<p>to this:</p>

<pre><code>item_list = lists[option]  # note also a more descriptive name
</code></pre></li>
<li><p>That said, why do this inside <code>list_concatenation</code>? That makes that function very tightly coupled to the place where you're currently using it, it's not reusable at all. Instead, why not pass in the selected list, rather than the option name, as a parameter?</p>

<p>Similarly including things like <code>'Here are the items in my list: '</code> and the trailing full stop <code>'.'</code> within the function reduce its reusability.</p></li>
<li><p>In terms of looping in Python:</p>

<pre><code>for i in item_list:
    if item_list.index(i) &lt; (len(item_list)-1):
        listitem = listitem + i + ', '
    else:
        listitem = listitem + 'and ' + i + '.'
</code></pre>

<p>The <code>i</code> would usually suggest an index, perhaps <code>item</code> would be a better name. If you want the index, rather than using <code>spam.index(item)</code> you can <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a> over the list:</p>

<pre><code>for index, item in enumerate(item_list):
    if index &lt; (len(item_list) - 1):
</code></pre>

<p>This is more efficient as you're only passing over the list once, rather than every time you need the index. Note the additional whitespace, again per the style guide.</p></li>
</ul>

<hr>

<p>With all of the above, we have to change the invocation of the functions:</p>

<pre><code>list_selection()
item_list = lists[take_valid_input()]
result = list_concatenation(item_list)
print('Here are the items in my list: {}.'.format(result))
</code></pre>

<p>Now the data is moving through the functions in a logical way, rather than being updates to the global module state, and <code>list_concatenation</code> is a very generic, reusable function.</p>

<p>I might also be inclined to move <code>list_selection</code> <em>inside</em> <code>take_valid_input</code>, or even write a more generic function for user input that:</p>

<ul>
<li>Takes a dictionary of options;</li>
<li>Displays the option names to the user;</li>
<li>Loops until they've entered one of the option names; and </li>
<li>Returns the one they've entered.</li>
</ul>
    </div>