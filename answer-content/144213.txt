<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Use an appropriate data structure</strong></p>

<p>You're working with a 2D field, so why not use a 2D array to represent it?</p>

<pre><code>bool[,] mines = new bool[columns, rows];
bool hasMine = mines[x, y];
</code></pre>

<p>That allows you to greatly simplify <code>MiinaInfo</code>:</p>

<pre><code>private int GetNeighboringMineCount(int x, int y)
{
    int mineCount = 0;
    for (int nx = x - 1; nx &lt;= x + 1; nx++)
    {
        if (nx &lt; 0 || nx &gt;= columns)
            continue;  // Don't go out of bounds

        for (int ny = y - 1; ny &lt;= y + 1; ny++)
        {
            if (ny &lt; 0 || ny &gt;= rows)
                continue;  // Don't go out of bounds

            if (nx == x &amp;&amp; ny == y)
                continue;  // Don't count the cell itself

            if (mines[nx, ny])
                mineCount += 1;
        }
    }
    return mineCount;
}
</code></pre>

<p>You may also want to add a method to your <code>MiinaAlusta</code> class for conveniently getting the button for a certain x,y coordinate. At that point your game code can work exclusively with x,y coordinates instead of indices.</p>

<p><strong>The use of Random</strong></p>

<p>Don't create new <code>Random</code> instances for each random number. Create a single instance and reuse it.</p>

<p><code>Random</code> isn't really random, it's a pseudo-random number generator (PRNG). It generates numbers based on some internal state, which is updated each time a number is generated, so it's actually a deterministic sequence. This internal state needs to be initialized, which you can do explicitly by passing a seed value to <code>Random</code>'s constructor. Without a seed value, it'll look at the current time to initialize itself. So if you create multiple <code>Random</code> instances in rapid succession, several (or all) of them will end up with the same initialization value, and they'll generate the exact same numbers.</p>

<p><strong>Further comments</strong></p>

<ul>
<li>That xaml file contains a lot of buttons. Why not create them with a loop (in the code-behind file) instead? That would also allow you to support different field sizes.</li>
<li>It looks like <code>buttonCount = row * row</code> should've been <code>buttonCount = column * row</code>.</li>
<li>You've got <code>const</code> fields for the number of columns and rows, but you're not using them everywhere - the are still some places that use hard-coded numbers. That sort of duplication makes code hard to maintain.</li>
<li><code>Play</code> and <code>MiinaInfo</code> aren't very descriptive names. I'd probably rename <code>Play</code> to <code>RevealCell</code>, and <code>MiinaInfo</code> to something like <code>GetNeighboringMineCount</code>.</li>
<li>Some method names start with a lowercase letter, others with an uppercase letter. That's not very consistent. In C# the convention is that method names start with an uppercase letter.</li>
<li>In <code>Play</code>, you're using both <code>btn</code> and <code>(Button)cells[index]</code>, even though they both refer to the same button.</li>
<li>In various places you're casting <code>cells[index]</code> to <code>Button</code>, even though <code>cells</code> is already of type <code>Button[]</code>. Those casts aren't necessary.</li>
<li><code>ShowMines</code> could call <code>blockMoves</code>, instead of duplicating that code.</li>
<li><code>showMineInfo</code> appears to be unused, so it can be removed.</li>
<li><code>setMines</code> could call <code>mines.Clear()</code> itself, instead of relying on <code>Reset</code> to do that.</li>
<li>Some comments just repeat a variable or method name, which doesn't really add value.</li>
<li>Regions can be useful to organize code, but using them within a method seems a bit excessive to me.</li>
</ul>
    </div>