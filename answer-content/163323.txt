<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can be solved easily by removing all three factors <code>2,3,5</code> from the number by simply dividing the number. Then at last we can check if the remained number is other than 1 then it can be clearly identified that number contains other that <code>2,3,5</code> factors.</p>

<p>Now talking about the complexity, In worst case, The number will have all factors as <code>2</code> which requires more iterations than any other possible input. In that case we require to do at most \$\log n\$ iterations. So clearly we can identify that the <strong>Time Complexity</strong> of this approach is \$\mathcal{O}(\log n)\$ and the space complexity would be \$\mathcal{O}(1)\$.</p>

<p>Coming to your code, You are trying to prime factorize the given number and then your are iterating over all prime-factors. Then you are checking that if there exists other factor than <code>2,3,5</code> and return the value accordingly.</p>

<p>Worst case time-complexity for your code is here \$\mathcal{O}(n)\$ but the same idea can be implemented in \$\mathcal{O}(\sqrt{n})\$ time. Have a look at <a href="http://www.geeksforgeeks.org/print-all-prime-factors-of-a-given-number/" rel="noreferrer">it</a>.  Space complexity would also be <strong>higher</strong> than \$\mathcal{O}(1)\$ as you are also using the <code>HashSet</code> to store the prime factors.</p>

<p>So the following approach would work better than the suggested approach in comparison of both complexities.</p>

<pre><code>public boolean isUgly(int num) {

    if(num == 0)
        return false;

    while(num%2  == 0)
        num/=2;

    while(num%3 == 0)
        num/=3;

    while(num%5 == 0)
        num/=5;

    return (num==1);
}
</code></pre>
    </div>