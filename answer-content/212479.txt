<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Quickfire opinions:</p>

<ul>
<li>Don't use MD5 for anything. MD5 is cryptographically broken. Especially do not put passwords through it.</li>
<li>Don't use passwords to generate an authentication token. Use a <code>SecureRandom</code> in conjunction with the claimed ID. Keep a server-side copy of the salt and check the authentication token on every request.</li>
<li>Only require the password once and try to purge it from memory as soon as possible. This implies removing it from the <code>req</code></li>
<li><p>Use "guard clauses" to reduce the level of nesting in your methods and to return early. This allows you to reduce the amount of context you need to keep in your head when reading a given piece of code. Note that since java7 switch-case statements can also operate on Strings.<br>
This simplifies the checks for content:</p>

<pre><code>if (username == null || password == null || action == null) {
    req.getRequestDispatcher("/WEB-INF/view/login-form.jsp").forward(req, resp);
    return;
}
req.setAttribute("username", username);
switch (action) {
    case "registration":
        if (dao.get().checkUserByUsername(username)) {
            req.getRequestDispatcher("/WEB-INF/view/login-form.jsp?registration").forward(req, resp);
            return;
        }
        // [...]
</code></pre></li>
<li><p>Extract the technicalities of generating an AuthenticationToken into a separate class. Usually that class would either be static or injected through some kind of dependency injection mechanism.
It can also be used to provide facilities for checking a given token.</p></li>
<li>A <code>Filter</code> would make sense to <strong>check</strong> for authentication. To authenticate a request or to create a new user is something more suited to a Servlet. </li>
</ul>
    </div>