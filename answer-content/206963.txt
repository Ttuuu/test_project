<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with Quill - 90% of the stuff in your routes should be in other files. Routes must be concise, otherwise it's hard to tell which routes you have.</p>

<p>Additionally, think about the processes, not the objects. Here's what your addProduct handler does:</p>

<ul>
<li>Iteration over every product</li>
<li>Validation</li>
<li>Uploading of image</li>
<li>Saving of product data</li>
</ul>

<p>Ultimately, you want to filter out bad products, upload all the images, then save the data for the whole set of products.</p>

<p>The thing that might not be obvious, is that the uploading of images is happening sequentially, and you could be doing this in parallel. </p>

<p>You also need to think through your error handling. Maybe you've done this, but I'd argue it's better to upload and save as many products as possible, rather than aborting on the first failure.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const saveProducts = async products =&gt; {
  // Start image uploads in parallel
  const upload_operations = upload_images(products); // Don't await!

  // Wait for everything (merge)
  const results = await Promise.all(upload_operations);

  // Generate upserts
  const final_products = results.filter(is_successful)
    .map(result_to_product)
  const upserts = final_products.map(product_to_upsert)

  // Store product collection
  try {
    await Product.collection.bulkWrite(upserts);
    return final_products;
  } catch (e) {
    await Promise.all(uploads.map(rollback)); // Warning - this could also throw
    return [];
  }
}

const upload_images = products =&gt; products.filter(is_valid)
  .map(saveImage); // Don't await

const saveImage = async product =&gt; {
  // Note: this function is essentially a Promise – we can wait on it whenever
  try {
    await uploadImage(product);
    // Note: this just suspends execution of saveImage()
    // ... callers can await whenever.
    return {
      product
    };
  } catch (e) {
    console.log('failure!'); // Never forget this
    return {
      fail: true
      product
    }
  }
};

const is_valid = product =&gt; { /* Return true if it's valid */ };
const is_successful = operation =&gt; !operation.fail;
const result_to_product = result =&gt; result.product;
const product_to_upsert = result =&gt; { /* convert result.product to upsert JSON */ };
const rollback = upload =&gt; { /* Delete result.product */ };</code></pre>
</div>
</div>

    </div>