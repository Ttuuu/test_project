<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not a full review, I don’t know Swift at all. I just wanted to comment on the union-find implementation.</p>

<p>I’ve seen this a lot, keeping track of the rank,  it never found it useful. When you are comparing the rank to determine which of the two labels should be the parent, you have just <code>find()</code>ed the two elements, meaning that you are looking at two roots by definition, and whatever elements you have visited along the way all now point directly at these two roots.</p>

<p>However, the rank is not updated when flattening the tree, so it is not an indication of tree depth. Keeping track of the rank seems (in my experience) to be more costly than the measly improvement in tree depth you might achieve.</p>

<p>A second issue (which I learned from your helpful comment) is that you're building a tree allocating each node separately. Considering that these nodes only store a pointer, dynamic allocation is relatively expensive. In my experience, storing tree nodes in an array can be very beneficial, especially if they are small. In this case, instead of a pointer to the parent node, you can simply store its index. The benefit extends beyond avoiding all those separate allocations: an array has better cache locality, and reference counting adds a bit of overhead as well.</p>

<p>So, combining these two changes, the data structure becomes a simple array of integers. The root points to itself, as an easy way of indicating it is a root. You could just as well store a negative index in the roots, but then it is necessary to always test the index before accessing the parent.</p>

<p>As you commented, the drawback with such an implementation is that it is not possible to recover nodes no longer referenced. The array keeps growing as the algorithm progresses. Many algorithms have such a compromise between memory use and speed. Reclaiming unused memory takes time. But do note that it is possible to compute the maximum number of elements the Union-Find data structure can possibly contain, given the size of the map under consideration: for \$n\$ map elements, there can be at most \$n/2\$ single-element rooms, and therefore that is the maximum number of elements that can be pushed into the data structure. It is therefore not prohibitive to allocate the array for the maximum size right from the start, and save a bit on additional tests and reallocations.</p>

<p>I wrote a <a href="https://www.crisluengo.net/index.php/archives/913" rel="nofollow noreferrer">blog post about the Union-Find algorithm</a> recently, describing a C++ implementation.</p>

<p>Lastly: do time and compare before making any decisions! My experience might be different than yours. :)</p>
    </div>