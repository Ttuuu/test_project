<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a first attempt in F# you have passed the test, but the overall impression is a little messy, while the algorithm seems to (almost) work as expected.</p>
<hr>
<p>If calling it with an empty argument list - from this:</p>
<blockquote>
<pre><code>match args with
        | [] -&gt; lower @ upper @ numbers
</code></pre>
</blockquote>
<p>in <code>buildChars</code>, I would expect it to produce a 16 chars password from the default settings. But it fails here:</p>
<blockquote>
<pre><code>let bytes : byte array = Array.zeroCreate &lt;| if strContainsOnlyNumber(argv.[0]) then Convert.ToInt32 argv.[0] else 16
</code></pre>
</blockquote>
<p>with an <code>IndexOutOfRangeException</code></p>
<hr>
<blockquote>
<pre><code>   let rec contains item list : bool =
        match list with
        | [] -&gt; false
        | head::tail -&gt; (head = item) || contains item tail
</code></pre>
</blockquote>
<p>This is not used, so delete it. If you need a <code>contains</code> function, the <code>List</code>-module has a predefined such ready to use.</p>
<hr>
<p>Especially <code>buildChars</code> seems overly messy and complicated, and it is not very efficient that the char lists (<code>numbers</code>, <code>lower</code>, etc) are redefined for each recursion. Instead of having <code>buildChars</code> as a <code>rec</code> function you could have an inner recursive function to the matching and then define the char lists out side of that:</p>
<pre><code>let buildChars chars (args: string list) : char list =
    let numbers = ['0'..'9']
    let lower = ['a'..'z']
    let upper = ['A'..'Z']
    let special = ['!' .. '/'] @ ['@']
    let rec listBuilder chars args = 
        match args with
        | [] -&gt; lower @ upper @ numbers
        // ... etc.

    listBuilder chars args
</code></pre>
<p>Besides that, I think I would think of another design, if I find my self repeating the almost same code like in this function. <code>List.fold</code> may be a solutions in this case.</p>
<p>Another issue with the function is that if the argument list contains more of the same argument (for instance "-l", "-l") it will be included more than once making the result somewhat biased. Maybe consider to reduce the argument list to a distinct set - unless you want the behavior.</p>
<hr>
<p>You could consider to print help/information, if the <code>argv</code> has a <code>"-?"</code> entry.</p>
<hr>
<p>In F#, lists are very convenient because of its operators that makes the code more readable, but in this particular algorithm, I think I would stick to use arrays for everything, because you address the list entries by index, which is not efficient for lists, because <code>chars.[index]</code> is an O(index) operation where the same operation is O(1) for arrays, further <code>List.length</code> is a O(n) operation - adding more inefficiency to the equation.</p>
<hr>
<blockquote>
<pre><code>let rec buildString  (bytes: byte list) (chars: char list) (builder: StringBuilder) : string =
    match bytes with
    | [] -&gt; builder.ToString()
    | head::tail -&gt; buildString tail chars &lt;| builder.Append chars.[(int) head % chars.Length]
</code></pre>
</blockquote>
<p>This function is not tail recursive and therefore builds up the stack. For a password generator it will probably never be an issue, but there is a hypothetical risk for a stack overflow. Fortunately you can easily make it tail recursive and more efficient, because <code>builder.Append</code> returns the builder itself. So changing the last line to</p>
<pre><code>| head::tail -&gt; buildString tail chars (builder.Append chars.[(int) head % chars.Length])
</code></pre>
<p>makes the function tail recursive.</p>
<hr>
<p>Below is my version with some inline explanation:</p>
<pre><code>let passwordGenerator (argv: string []) = 

    // The @ - operator for lists is temporarily redefined to work with arrays
    // in order to make the code more readable
    let inline (@) left right = Array.append left right

    // From the first argument or a possible empty argument list the
    // custom size and if the default settings should be used is determined
    let useDefaults, size = 
        match argv.Length with
        | 0 -&gt; true, 16
        | _ -&gt; 
            match (Int32.TryParse(argv.[0])) with
            | true, n -&gt; (argv.Length = 1), n
            | false, _ -&gt; false, 16

    // The usable characters are determined from the arguments
    let chars = 
        let lower = [| 'a'..'z' |]
        let upper = [| 'A'..'Z' |]
        let numbers = [| '0'..'9' |]
        let special = [| '!' .. '/' |] @ [| '@' |]

        if useDefaults then
            lower @ upper @ numbers
        else
            // This will avoid duplicate chars
            let predicate arg short long (chs: char[]) all = 
                (arg = short || arg = long) &amp;&amp; not (all |&gt; Array.contains (chs.[0]))

            let folder all arg =
                match arg with
                | a when predicate a "-l" "--lower" lower all -&gt; all @ lower
                | a when predicate a "-u" "--upper" upper all -&gt; all @ upper
                | a when predicate a "-n" "--numerics" numbers all -&gt; all @ numbers
                | a when predicate a "-s" "--special" special all -&gt; all @ special
                | _ -&gt; all

            argv |&gt; Array.fold folder [||]

    // Provides the random bytes
    let bytes = 
        use rng = new RNGCryptoServiceProvider()
        let bytes = Array.zeroCreate size
        rng.GetBytes(bytes)
        bytes

    // Generates the password
    let password = 
        bytes 
        |&gt; Array.map (fun b -&gt; chars.[int b % chars.Length]) 
        |&gt; fun chs -&gt; new String(chs)

    printfn "%s" password
</code></pre>
    </div>