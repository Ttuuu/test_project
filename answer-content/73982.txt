<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The task is painful because it really is difficult.  It's <a href="http://www.gnu.org/software/grub/manual/grub.html#Shell_002dlike-scripting">difficult</a> because </p>

<blockquote>
  <p><code>grub.cfg</code> is written in GRUB’s built-in scripting language, which has a syntax quite similar to that of GNU Bash and other Bourne shell derivatives.</p>
</blockquote>

<p>For example, from my Debian squeeze server, here is an excerpt from <code>grub.cfg</code>:</p>



<blockquote>
<pre class="lang-none prettyprint-override"><code>### BEGIN /etc/grub.d/10_linux ###
menuentry 'Debian GNU/Linux, with Linux 2.6.32-5-amd64' --class debian --class gnu-linux --class gnu --class os {
        set gfxpayload=1024x768
        insmod lvm
        insmod part_gpt
        insmod ext2
        set root='(vg-root1)'
        search --no-floppy --fs-uuid --set 84cc28cc-e54f-43f2-9e62-182d5e6af329
        echo    'Loading Linux 2.6.32-5-amd64 ...'
        linux   /boot/vmlinuz-2.6.32-5-amd64 root=/dev/mapper/vg-root1 ro console=tty0 console=ttyS1,115200n8r quiet vga=791 text
        echo    'Loading initial ramdisk ...'
        initrd  /boot/initrd.img-2.6.32-5-amd64
}
</code></pre>
</blockquote>

<p>… and <code>device.map</code>:</p>

<blockquote>
<pre class="lang-none prettyprint-override"><code>(hd0) /dev/disk/by-id/cciss-3600508b100104439535547344832000b
</code></pre>
</blockquote>

<p>Two of the complications are:</p>

<ul>
<li>The configuration opted to use the commands <code>set root=…</code> and <code>linux</code> rather than <code>root …</code> and <code>kernel …</code>.</li>
<li>Due to the use of LVM, you won't be able to easily correlate the GRUB device name <code>(vg-root1)</code> with the mountpoint by looking in <code>device.map</code>.</li>
</ul>

<p>To claim completeness, you would need to be able to do the inverse of everything that <a href="http://git.savannah.gnu.org/cgit/grub.git/tree/util/grub-mkconfig_lib.in?id=2.00"><code>grub-mkconfig_lib</code></a> is capable of generating.  A fully general solution would be even more difficult, as it would involve reimplementing a huge chunk of GRUB itself.</p>

<p>Perhaps it would be more advantageous to avoid trying to interpret GRUB's device nomenclature altogether and stay entirely within Linux's device-naming scheme by looking for the <code>root=…</code> kernel command-line parameter.  (The <a href="http://linuxcommand.org/man_pages/rdev8.html"><code>rdev(8)</code></a> command from util-linux may be of interest here, if no kernel parameters are passed — which is a rare practice these days.)</p>

<p>Considering the enormity of the task of writing a complete interpreter for <code>grub.cfg</code>, I'd be happy if you handled just a limited subset of the configuration language properly.  Ignoring <code>#Comments</code> would be a good start.</p>
    </div>