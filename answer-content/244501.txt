<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code you have there may accomplish the task you have in mind for it, but it's not useful for a "real world" usecase.<br>
That's because usually you'd want to be able to run an algorithm like this multiple times on the same graph, maybe even concurrently.</p>
<p>The problem that's posing itself here is that <code>Node</code> mixes two concerns: Representing the graph <strong>and</strong> traversing it.</p>
<p>Storing the <code>Visited</code> state inside the Node is really useful, but it's also quite limiting. As such you could greatly benefit from storing visited <code>Node</code>s as a <code>Set</code> instead to separate traversal from representation.</p>
<hr>
<p>There's also some minor optimization possibilities:</p>
<ul>
<li><p>Replace the <code>foreach</code> in the <code>Node</code> constructor with <code>AddRange</code></p>
</li>
<li><p>Once .NET 5 releases (or you switch to .NET Core) You can slightly simplify the while loop in the BFS itself using <code>searchQueue.TryDequeue(var (node, length))</code>.</p>
</li>
<li><p>Storing visited nodes in a HashSet (or similar) enables reformulating <code>EnqueueNotVisitedChildrenNodes</code> as:</p>
<pre><code>foreach (var child in node.Children.ExceptWith(visited))
{
    searchQueue.Enqueue((child, length + 1));
}
</code></pre>
<p>This reformulation of course then messes with the visited state of nodes you didn't actually visit yet, since you set <code>Visited</code> when you <strong>enqueue</strong> the node, not when you actually visit it.</p>
<p>This flagging visited when enqueueing utterly breaks as soon as you start working with "weighted graphs", where the smallest number of edges may not be the optimal path (like the following)</p>
<pre><code>(A) -(1)- (B) -(1)- (C)
  \                 /
   -------(5)-------
</code></pre>
<p>Going from (A) to (C) via (B) is cheaper than the direct route here :), if your real target was a node (D) that's only connected to (C), your current code would route you through (C) because the shorter route through (B) would be ignored since (C) already counts as visited when you dequeue (B).</p>
</li>
</ul>
<hr>
<p>Overall this code is really nice and clean, but it lacks general applicability (which is not a bad thing in itself).</p>
    </div>