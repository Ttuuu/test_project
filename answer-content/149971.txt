<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Let's look at your <code>Card</code> class.</strong></p>

<pre><code>class Card:
    def __init__(self):
        pass

    def card_value(self):
        pass

    card_face = ['Ace','2','3','4','5','6','7','8','9','10','J','Q','K']
    card_suit = ['Hearts','Spades','Clubs','Diamonds']
</code></pre>

<p>There are multiple design mistakes.</p>

<p><strong>1.</strong> Card should not evaluate it's value, since a value of card defined by the game. Basically, if you would like to reuse this class for say Poker you would have to create a child class for the Card just to evaluate its value for a different game, which is wrong.</p>

<p><strong>2.</strong> In your case, Card class knows about suits and ranks, which is also in my opinion wrong solution, since you might use any other deck except for French.</p>

<p>So as a result of first 2 problems, it turns out that your Card is just a container(structure) without any logics inside, one of the best things to use for that in python in <code>namedtuple</code></p>

<pre><code>from collections import namedtuple
Card = namedtuple('Card', ('rank', 'suit'))
</code></pre>

<p><strong>Now let's talk about <code>Deck</code></strong></p>

<pre><code>class Deck(Card):
    new_deck = []
    length = len(new_deck) #testing purposes

    for i in Card.card_suit:
        for j in Card.card_face:
            new_deck.append(j + ' of ' + i)

    def new_card(self):
        #instead of return, use yield?
        return (self.new_deck[randint(0,len(self.new_deck)-1)])
    def remove_card(self,card):
        self.new_deck.remove(card)
</code></pre>

<p><strong>1.</strong> Deck is definitely not a <code>Card</code> child, <code>Deck</code> is sort of collection of cards.</p>

<p><strong>2.</strong> Your <code>new_card</code> and <code>remove_card</code> methods should be combined into single one called <code>draw_card</code>.</p>

<p><strong>3.</strong> Since now we know that <code>Deck</code> is not a <code>Card</code> then the most right place to keep track of ranks and suits is <code>Deck</code>.
Here is example:</p>

<pre><code>class Deck:
    card_ranks = []
    card_suits = []

    def __init__(self):
        self.cards = []
        self.refresh_deck()

    def refresh_deck(self):
        self.cards = list(map(Card, product(self.card_ranks, self.card_suits)))

    def shuffle(self):
        shuffle(self.cards)

    def draw_card(self):
        return self.cards.pop()
</code></pre>

<p><strong>Game class</strong></p>

<p>Now things like play_game, card_value(hand_value?) and other things/rules related to specific game should be defined by <code>Game</code> class</p>

<pre><code>class Game:
    def __init__(self, deck):
        raise NotImplementedError

    def card_value(self, card):
        raise NotImplementedError

    def hand_value(self, hand):
        raise NotImplementedError

    def play(self):
        raise NotImplementedError
</code></pre>

<p>So in the end what we have as a game skeleton is this:</p>

<pre><code>from collections import namedtuple
from itertools import product
from random import shuffle
from typing import List

Card = namedtuple('Card', ('rank', 'suit'))


class Deck:
    card_ranks = []
    card_suits = []

    def __init__(self) -&gt; None:
        self.cards = []
        self.refresh_deck()

    def refresh_deck(self) -&gt; int:
        self.cards = map(Card, product(self.card_ranks, self.card_suits))

    def shuffle(self) -&gt; None:
        shuffle(self.cards)

    def draw_card(self) -&gt; Card:
        return self.cards.pop()


class FrenchDeck(Deck):
    card_ranks = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
    card_suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']


class Game:
    def __init__(self, deck: Deck) -&gt; None:
        raise NotImplementedError

    def card_value(self, card: Card) -&gt; int:
        raise NotImplementedError

    def hand_value(self, hand: List[Card]) -&gt; int:
        raise NotImplementedError

    def play(self) -&gt; None:
        raise NotImplementedError
</code></pre>
    </div>