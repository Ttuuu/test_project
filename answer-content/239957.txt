<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>A very low hanging fruit, namely lifting the constant factor</p>

<pre><code>0.5 * (1 / (np.sqrt(2 * np.pi) * 2))
</code></pre>

<p>out from the integral, reduces time by a quarter. On my system the original code took </p>

<pre><code>294.532276869
</code></pre>

<p>while the fixed one took</p>

<pre><code>224.198880911
</code></pre></li>
<li><p>Another fruit, a bit above, is to abandon <code>dblquad</code> whatsoever. It is just a wrong tool here.</p>

<p>Notice that the only dependency on <code>q</code> is in <code>j0(q * t)</code>, and that it does not depend on <code>z</code> either. From the mathematical viewpoint it means that an integral of <code>erf(...) * exp(...)</code> over <code>dz</code> can be tabulated <em>once</em> as a function of <code>t</code>, say <code>F(t)</code> for the lack of better name, which then can be fed into the final integration as <code>t * j0(q*t) * F(t)</code>.</p>

<p>Of course you'd need a lambda to interpolate tabulated values, and to manually take care of precision, and maybe do something else that <code>dblquad</code> does under the hood. Nevertheless, expect a thousand-fold speedup.</p></li>
</ul>
    </div>