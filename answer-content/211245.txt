<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I opted to make a constructor that allows the option of min or max
  order, since it runs on the pathfinder the performance of this is
  quite crucial as well. So hopefully some one has some suggestions on
  ways to improve it.</p>
</blockquote>

<p>Sure: take an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icomparer-1?view=netframework-4.7.2" rel="noreferrer">IComparer</a> (defaulting to <code>Comparer&lt;T&gt;.Default</code> if you have a simpler constructor which doesn't take one) and use that for all comparisons.</p>

<hr>

<blockquote>
<pre><code>public class Heap : IEnumerable
</code></pre>
</blockquote>

<p>Why is this not generic?</p>

<hr>

<blockquote>
<pre><code>    private int _count;
    public int Size =&gt; _count;
</code></pre>
</blockquote>

<p>Why not</p>

<pre><code>    public int Size { get; private set; }
</code></pre>

<p>? And why <code>Size</code> rather than <code>Count</code>? It might even be worth implementing the full <code>ICollection&lt;T&gt;</code> interface.</p>

<hr>

<blockquote>
<pre><code>    public void Insert(IMinHeap item, int priority)
    {
        item.SetPriority(priority);
</code></pre>
</blockquote>

<p>Yikes! This is exposing internal data to the whole world. I could call <code>Insert</code> and then <code>SetPriority</code> and break your class.</p>

<hr>

<blockquote>
<pre><code>    private void UpdateItem(IMinHeap item)
    {
        int parentIndex = item.HeapIndex / 2;
</code></pre>
</blockquote>

<p>Are you sure? Bear in mind that C# arrays are indexed from 0, not 1.</p>

<hr>

<blockquote>
<pre><code>    public bool Contains(IMinHeap item)
    {
        if(item.HeapIndex &lt; 0 || item.HeapIndex &gt; _items.Length-1 || !Equals(_items[item.HeapIndex], item)) return false;
</code></pre>
</blockquote>

<p>Again, this is exposing internal data. If you want to implement <code>Contains</code> and <code>UpdateItem</code> without exposing internal data then the standard approach would be to wrap two data structures: an array for the heap itself and a <code>Dictionary&lt;T, int&gt;</code> for the heap index.</p>

<blockquote>
<pre><code>        return true;
</code></pre>
</blockquote>

<p>But if you're going to do it this way, why not invert the test and just have</p>

<pre><code>    public bool Contains(IMinHeap item) =&gt; item.HeapIndex &gt;= 0 &amp;&amp; item.HeapIndex &lt; _items.Length &amp;&amp; Equals(_items[item.HeapIndex], item);
</code></pre>

<p>? That seems clearer to me.</p>

<hr>

<blockquote>
<pre><code>    /// &lt;summary&gt;
    /// Clear the priority queue and reset all nodes
    /// &lt;/summary&gt;
    public void Wipe()
</code></pre>
</blockquote>



<blockquote>
<pre><code>    /// &lt;summary&gt;
    /// Clear the priority but does not reset node indexes
    /// &lt;/summary&gt;
    public void Clear()
</code></pre>
</blockquote>

<p>I'm puzzled as to why both are needed.</p>

<hr>

<blockquote>
<pre><code>    public bool Pop(out IMinHeap item)
</code></pre>
</blockquote>

<p>I would prefer <code>public T Pop()</code> and throw an exception if it's empty. If I implemented this method I'd call it <code>TryPop</code>. IMO that's more consistent with the standard library.</p>

<hr>

<blockquote>
<pre><code>    private void CascadeDown(IMinHeap item)
    {
        do
        {
            int childLeftIndex = item.HeapIndex * 2;
            int childRightIndex = childLeftIndex + 1;
</code></pre>
</blockquote>

<p>Again, are you sure?</p>

<blockquote>
<pre><code>            if (!HasCorrectChild(item.Value, _items[childLeftIndex]))
            {
                Swap(item.HeapIndex,childLeftIndex);
            }
            else if (!HasCorrectChild(item.Value, _items[childRightIndex]))
            {
                Swap(item.HeapIndex, childLeftIndex);
            }

            int parentIndex = item.HeapIndex / 2;
            SortChildren(parentIndex);
</code></pre>
</blockquote>

<p>I'm really not convinced that this is correct. The standard implementation is to first compare the left and right children to work out which should be popped first, and then compare just that one with the parent.</p>

<p>Incidentally, what tests do you have for the queue?</p>

<hr>

<blockquote>
<pre><code>    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
</code></pre>
</blockquote>

<p>You used <code>=&gt;</code> notation earlier: why not use it here?</p>
    </div>