<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The general idea</h2>

<blockquote>
  <p>is it good or bad?</p>
</blockquote>

<p>I would say it's bad. But let's look at the pros and cons.</p>

<p>Advantages:</p>

<ol>
<li>Decoupling: your content is decoupled from the actual HTML. If HTML ever changes, you only have to change your <code>HTML</code> class, and all the code that uses it continues to be correct. You could also easily print your content in a different format than HTML (well, maybe not easily, but it would certainly be possible). </li>
<li>Fast to Use: it might be faster to use than writing HTML yourself.</li>
<li>Minify: it can produce already minified HTML.</li>
<li>Correctness: You can verify that all HTML is correct (no missing closing tags, etc).</li>
</ol>

<p>But: Do you really need <code>1.</code>? I would guess not. And with a decent IDE, is it really slower to write HTML yourself? I wouldn't think so, so <code>2.</code> is out as well. And <code>3.</code>: You can just use a minifier, which will probably be better at what it does. And allows you the option of turning it off for debug purposes. Point <code>4.</code> is the only one I would consider to be a real advantage (but then you would have to make it a priority to produce valid HTML).</p>

<p>Disadvantages:</p>

<ol>
<li>Speed: it will always be slower than native HTML.</li>
<li>Complexity: native HTML will always work (it might not validate, but it will display something). You have to extensively test your class, and still, you might overlook something.</li>
<li>Usability: People know how HTML works, but they don't know your class, so they have to invest time in it.</li>
</ol>

<p>In the end, you have to decide for yourself, but I think that the disadvantages outweigh the advantages for general HTML (for some elements, such as forms, a class that can generate them is indeed very helpful).</p>

<h2>Your Code</h2>

<p><strong>HTML and Input</strong></p>

<p>Your <code>HTML</code> class is quite coupled with your <code>Input</code> class. This makes re-using it a bit difficult, and it also leads to your <code>HTML</code> class doing more than just generating HTML. It now also contains program logic, such as displaying errors or inserting CSRF tokens).</p>

<p><strong>Repeated Code</strong></p>

<p>You have this code <code>strstr($src, '://') ? $src : SITE_URL . $src;</code> two times, and effectively three times if you count <code>strpos($url, '://') === false ? SITE_URL.$url : $url;</code>. You should extract this code to its own function.</p>

<p><strong>input function</strong></p>

<p>Your <code>input</code> function is too complex, try to think of a way to make it simpler. If you cannot think of a good way, extract code to its own function (the code at the beginning could go to <code>createErrorDiv</code>, and each of the cases could get its own function as well).</p>

<p><strong>Misc</strong></p>

<ul>
<li>I would prefer to surround <code>.</code> with whitespace, I think it makes the code more readable (same for <code>{</code> and <code>}</code>).  </li>
</ul>
    </div>