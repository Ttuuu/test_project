<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General feedback</h2>

<p>For a beginner the code is okay - for the most part it appears to function like a calculator, except for the fact that if I click the sequence<kbd>4</kbd>, <kbd>+</kbd>, <kbd>C</kbd>, <kbd>5</kbd>, <kbd>=</kbd> then the result shows <code>5</code>, whereas with your calculator I see <code>9</code> because clearing the form via the reset/cancel button (i.e. <kbd>C</kbd>) doesn't clear the value in the variable <code>x</code>. </p>

<p>This code is quite redundant - which is covered in more detail below. Also, some of the prompts, variables and method names appear to be in Polish while others are in English. It is best to choose one and be consistent.</p>

<h2>Targeted feedback</h2>

<h3>Repeated code</h3>

<p>This code does not adhere to the <a href="https://deviq.com/don-t-repeat-yourself/" rel="nofollow noreferrer"><strong>D</strong>on't <strong>R</strong>epeat <strong>Yourself</strong> principle</a> - thus some would say the code is <em>wet</em>. When creating larger applications, there may be many more elements on a page that need to have interactions handled and it would take a long time to copy/paste references and event handlers. </p>

<p>There are various ways to avoid such redundancy. One technique would be to name the integer inputs with the integer number instead of the cardinal number (e.g. <code>key1</code>, <code>key2</code>, etc.) and then loop through the elements and add event handlers - something like:</p>

<pre><code>for (var i = 1; i &lt; 10; i++ ) {
  document.forms.formularzCalc["key" + i].addEventListener("click", LiczbaX)
}
</code></pre>

<p>Another approach would be to use <a href="https://davidwalsh.name/event-delegate" rel="nofollow noreferrer">Event delegation</a> to handle clicks on a container element and then delegate actions based on the target element that was clicked. With that approach there is no need to add the event listener to all elements to observe events on.</p>

<h3>Global variables</h3>

<p>The variables setup at the top (i.e. <code>x</code>, <code>y</code>, <code>znacznik</code>, as well as all the DOM references) are global to the window. It is wise to limit the scope to avoid namespace collisions. This can be achieved with various approaches, such as using an <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a> or wrapping the code in a DOM-loaded callback.</p>

<h3>Checking for numbers</h3>

<p>The calls to <code>isNaN()</code> will return either <code>true</code> or <code>false</code> so the <code>== true</code> can be omitted in conditional expressions. Similarly, many JavaScript developers use <code>!isNaN()</code> instead of <code>isNaN() == false</code>.</p>

<h3>Input validation in <code>wyniczek()</code></h3>

<p>There is a line repeated many times in this function: <code>alert("Thats wrong! use C and try again");</code>. The code already checks to see if <code>y</code> is blank (i.e. <code>if (y == "")
    alert("Co do **** karmazyna ?!?");)</code> so a similar check could be made after that to ensure the input is valid. And if a <code>return</code> statement is added whenever the inputs are invalid, then there is no need to use the <code>else</code> block.</p>

<h3>Using <code>alert()</code></h3>

<p>For this single page application it might be okay to use <code>alert()</code> but in a larger application it may be better to have a separate UI element to hold messages to the user. Read more about this topic in <a href="https://codereview.stackexchange.com/a/210625/120114">this answer by @blindman67</a>.</p>

<h3>Parsing integers with <code>parseInt()</code></h3>

<p>If you are going to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" rel="nofollow noreferrer"><code>parseInt()</code></a>, it is wise to specify the radix using the second parameter - unless you are using a unique number system like hexidecimal, octal, etc. then specify 10 for decimal numbers. </p>

<blockquote>
  <p><strong>Always specify this parameter</strong> to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified, usually defaulting the value to 10.<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Parameters" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<h3>Strict Equality</h3>

<p>It is a best practice to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity" rel="nofollow noreferrer">strict equality</a> when comparing values, especially when you expect the types to be the same. The code above uses loose equality comparisons, like: </p>

<blockquote>
<pre><code>if (y == "")
</code></pre>
</blockquote>

<p>With the strict equality operator, the type of the value of <code>y</code> would never need to be converted to a string in case it had a different type.</p>

<pre><code>if (y === "")
</code></pre>

<h2>Updated code</h2>

<p>The code below utilizes suggestions from above to obtain the same functionality as the original code. It does use <code>eval()</code> to simplify the evaluation of the mathematic expressions but as you can see in the answers to <a href="https://stackoverflow.com/q/10474306/1575353">this SO post</a> using it is highly discouraged. </p>

<p>It also uses a few features added with the <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> specification like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/include" rel="nofollow noreferrer"><code>Array.includes()</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow noreferrer">template literals</a>, and the keywords <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> so note the browser compatibility with those features if necessary.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>document.addEventListener('DOMContentLoaded', function() {
  const resultArea = document.forms.formularzCalc.Wynik;
  let operation = "";
  let x;
  let y = "";
  const OPERATIONS = ["+", "-", "*", "/"];

  // operatory arytmetyczne i przypisywanie wartości resultArea do x
  function setOperation(value) {
    x = resultArea.value;
    resultArea.value = "";
    operation = value;
  }

  // przypisywanie wartości resultArea do y i obliczanie
  function setResult() {
    y = resultArea.value;
    if (y === "") {
      alert("Co do **** karmazyna ?!?");
      return;
    }
    if (y === 0 &amp;&amp; operation === "/" || isNaN(x) || isNaN(y)) {
      alert("Thats wrong! use C and try again");
      return;
    }
    if (OPERATIONS.includes(operation)) {
      resultArea.value = eval(`${parseInt(x, 10)} ${operation} ${parseInt(y, 10)}`);
    }
  }
  document.addEventListener('click', function(clickEvent) {
    if (clickEvent.target.tagName.toLowerCase() === 'input') {
      const value = clickEvent.target.value;
      const intValue = parseInt(value, 10);
      if (!isNaN(intValue)) {
        if (resultArea.value != "" || intValue) { //LiczbaX(), LiczbaY()
          resultArea.value += intValue
        }
      }
      if (OPERATIONS.includes(value)) {
        setOperation(value);
      }
      if (value === "=") {
        setResult();
      }
    }
  });
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  background-color: #fff0b7;
}


/* Edytowanie formularza */

form {
  width: 40%;
  margin: auto;
  text-align: center;
}

td input {
  width: 40px;
  height: 30px;
}

fieldset {
  border-color: #00998C;
  background-color: rgba(0, 0, 0, 0.05);
}

legend:first-letter {
  color: #DDcc67;
  font-size: 120%;
}

legend {
  background-color: #00998C;
  padding: 5px 15px;
  border-radius: 15px;
  font-size: 23px;
  font-weight: bolder;
  color: #eeeeee;
  font-family: "Arial Black";
  margin: 0 auto;
  text-shadow: 3px 3px 1px #333333;
}


/*  Edytowanie tabeli */

table {
  margin: auto;
}

th input {
  text-align: right;
}


/* reszta */

footer {
  width: 40%;
  background-color: #00998C;
  margin: 5px auto;
  text-align: center;
  border: 1px rgba(0, 0, 0, 0.30) solid;
  color: #EEEEEE;
  font-family: verdana;
  font-weight: bold;
  font-size: 80%;
  min-width: 250px;
  border-radius: 10px;
  padding: 3px 0px;
}

input[disabled] {
  box-shadow: 1px 1px 1px black;
}

img {
  position: absolute;
  left: 20px;
  top: 20px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form name="formularzCalc"&gt;
  &lt;fieldset&gt;
    &lt;legend&gt; Calc Upgraded version &lt;/legend&gt;
    &lt;table&gt;
      &lt;!-- Tabela do wyrównania zawartości kalkulatora --&gt;
      &lt;tr&gt;
        &lt;th colspan="4"&gt;&lt;input type="text" name="Wynik" disabled&gt;&lt;/th&gt;
        &lt;!-- Użycie th w celu łatwiejszej edycji --&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;input type="button" name="keySeven" value="7"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyEight" value="8"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyNine" value="9"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyPlus" value="+"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;input type="button" name="keyFour" value="4"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyFive" value="5"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keySix" value="6"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyMinus" value="-"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;input type="button" name="keyOne" value="1"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyTwo" value="2"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyThree" value="3"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyMulti" value="*"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;input type="reset" name="keyCancel" value="C"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyZero" value="0"&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyResult" value="="&gt;&lt;/td&gt;
        &lt;td&gt;&lt;input type="button" name="keyDivide" value="/"&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;footer&gt;
  The new Calc made by Hyakkimaru &lt;sup&gt;&amp;copy;&lt;/sup&gt; Wszelkie prawa zastrzeżone
&lt;/footer&gt;</code></pre>
</div>
</div>


<hr>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Parameters" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Parameters</a></sub></p>
    </div>