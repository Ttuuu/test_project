<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>here are some suggestions for your code.</p>

<p>1) Since the array is not updated, I suggest that you extract the size in a variable.</p>

<pre class="lang-java prettyprint-override"><code>public static int find(int[] a, int x) {
    //[...]
    int arrLength = a.length;
    //[...]
}
</code></pre>

<p>2) In my opinion, there's no gain to check if the boundaries are the current value, since the value can be anywhere.</p>

<pre class="lang-java prettyprint-override"><code>else if (a[0] == x) {
    return 0;
} else if (a[topOdd] == x) {
    return topOdd;
}
</code></pre>

<p>3) I suggest that you move the check for the size before the variables, it will remove the calculation of the other variables when the array is empty.</p>

<pre class="lang-java prettyprint-override"><code>int arrLength = a.length;

if(arrLength == 0) {
    return -1;
}

int topEven = arrLength - 1;
int topOdd = arrLength - 1;
int bottomEven = 0;
int midEven = 0;
int bottomOdd = 1;
int midOdd = 0;

if (a[0] == x) {
    return 0;
} else if (a[topOdd] == x) {
    return topOdd;
}
</code></pre>

<p>4) I suggest that you add the parentheses on the <code>else</code>, since it make the code harder to read, in my opinion.</p>

<p>5) I suggest that you make function to check if the number is odd or even.</p>

<pre class="lang-java prettyprint-override"><code>    private static boolean isEven(int value) {
        return value % 2 != 0;
    }

    private static boolean isOdd(int value) {
        return !isEven(value);
    }
</code></pre>

<p>6) I suggest that you extract the loop parts in methods.  </p>

<pre class="lang-java prettyprint-override"><code>public static int find(int[] a, int x) {
    //[...]
    int maxLastArrayPosition = arrLength - 1;

    Integer evenPosition = findNumberEven(a, x, maxLastArrayPosition);
    if (evenPosition != null) {
        return evenPosition;
    }
    //[...]
}

private static Integer findNumberOdd(int[] a, int x, int maxLastArrayPosition) {
    int topOdd = maxLastArrayPosition;
    int midOdd = 0;
    int bottomOdd = 1;
    while (topOdd &gt; bottomOdd) {
        midOdd = ((topOdd + bottomOdd) / 2);

        if (isOdd(midOdd)) {
            midOdd++;
        }

        if (x &gt; a[midOdd]) {
            topOdd = midOdd - 1;
        } else if (x &lt; a[midOdd]) {
            bottomOdd = midOdd + 1;
        } else {
            return midOdd;
        }
    }

    return null;
}

</code></pre>

<p>7) I suggest that you make a constant for the invalid value.</p>

<pre class="lang-java prettyprint-override"><code> public static final int INVALID = -1;
</code></pre>

<p><strong>Refactored code</strong></p>

<pre class="lang-java prettyprint-override"><code>public static final int INVALID = -1;

public static int find(int[] a, int x) {
    int arrLength = a.length;

    if (arrLength == 0) {
        return INVALID;
    }

    int maxLastArrayPosition = arrLength - 1;

    Integer evenPosition = findNumberEven(a, x, maxLastArrayPosition);
    if (evenPosition != null) {
        return evenPosition;
    }

    Integer oddPosition = findNumberOdd(a, x, maxLastArrayPosition);
    if (oddPosition != null) {
        return oddPosition;
    }

    return INVALID;
}

private static Integer findNumberOdd(int[] a, int x, int maxLastArrayPosition) {
    int topOdd = maxLastArrayPosition;
    int midOdd = 0;
    int bottomOdd = 1;
    while (topOdd &gt; bottomOdd) {
        midOdd = ((topOdd + bottomOdd) / 2);

        if (isOdd(midOdd)) {
            midOdd++;
        }

        if (x &gt; a[midOdd]) {
            topOdd = midOdd - 1;
        } else if (x &lt; a[midOdd]) {
            bottomOdd = midOdd + 1;
        } else {
            return midOdd;
        }
    }

    return null;
}

private static Integer findNumberEven(int[] a, int x, int maxLastArrayPosition) {
    int topEven = maxLastArrayPosition;
    int midEven = 0;
    int bottomEven = 0;
    while (topEven &gt; bottomEven) {
        midEven = ((topEven + bottomEven) / 2);
        if (isEven(midEven)) {
            midEven++;
        }
        if (x &gt; a[midEven]) {
            bottomEven = midEven + 1;
        } else if (x &lt; a[midEven]) {
            topEven = midEven - 1;
        } else {
            return midEven;
        }

    }

    return null;
}

private static boolean isEven(int midEven) {
    return midEven % 2 != 0;
}

private static boolean isOdd(int value) {
    return !isEven(value);
}

<span class="math-container">```</span>
</code></pre>
    </div>