<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to <a href="https://codereview.stackexchange.com/a/221173/201170">another answer</a> I will add these places to improve (I will not repeat all things from that answer, my answer is just an addition):</p>

<h3>1. Code inconsistency</h3>

<p>You have several places in your code where your code is inconsistent</p>

<pre><code>def collision():
...
        return 1
    return 0


def wall_collision():
...
        return True
    return False
</code></pre>

<p>Both functions are checking collisions but one returns integer (0/1) and another - boolean (True/False).</p>

<pre><code>self.head = [int(10*block_size), int(5*block_size)]
self.body = [self.head, [9*block_size, 5*block_size]]
</code></pre>

<p>For <code>head</code> you convert <code>X*block_size</code> to int (it is unnecessary anyway). For <code>body</code> you don't do it.</p>

<p>I recommend you to always check your code for possible inconsistency.</p>

<h3>2. Names inconsistency</h3>

<p>I moved it to an another point because it is not about how your code works - it is about how another programmers will read your code.</p>

<p>Look at this two lines:</p>

<pre><code>def change_dir(self, direc: str) -&gt; None:
        if self.direction != left and direc == right:
</code></pre>

<p>You use three different namings for direction entity:</p>

<ul>
<li><code>dir</code></li>
<li><code>direct</code></li>
<li><code>direction</code></li>
</ul>

<p>It is <strong>far</strong> better to use consistent variable names. If you are using different direction variables, get them names with only one word for directions. Here is the example:</p>

<ul>
<li><code>snake_direction</code></li>
<li><code>pokemon_direction</code></li>
<li><code>some_strange_direction</code></li>
</ul>

<p>or:</p>

<ul>
<li><code>enemy_dir</code></li>
<li><code>arrow_dir</code></li>
<li><code>some_another_strange_dir</code></li>
</ul>

<h3>3. Small code improvements</h3>

<p>Sometimes you look at your code and think: "Hmmm, it is working but looks not good". Often in these cases you can slightly reorganize your code to make it a bit better :)</p>

<pre><code>for event in pygame.event.get():
    pressed_key = pygame.key.get_pressed()
    if event.type == pygame.QUIT:
        pygame.quit()
        sys.exit()
    if pressed_key[pygame.K_q]:
        pygame.quit()
        sys.exit()
</code></pre>

<p>can be shortened to:</p>

<pre><code>for event in pygame.event.get():
    pressed_key = pygame.key.get_pressed()
    if event.type == pygame.QUIT or pressed_key[pygame.K_q]:
        pygame.quit()
        sys.exit()
</code></pre>

<p>This line of code is correct too but it is hard to read:</p>

<pre><code>if (s.head[0] &lt; 0) or (s.head[0] &gt; bg_width-block_size) or (s.head[1] &lt; 0)\
            or (s.head[1] &gt; bg_height-block_size):
</code></pre>

<p>But it will be far better to read if you will change it to:</p>

<pre><code>if (s.head[0] &lt; 0 or
        s.head[0] &gt; bg_width-block_size or
        s.head[1] &lt; 0 or
        s.head[1] &gt; bg_height-block_size):
</code></pre>

<p>or even this (sometimes I use it for really long if's):</p>

<pre><code>is_wall_collision = any([
    s.head[0] &lt; 0,
    s.head[0] &gt; bg_width-block_size,
    s.head[1] &lt; 0,
    s.head[1] &gt; bg_height-block_size
])
if is_wall_collision:
</code></pre>
    </div>