<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This solution is an order of magnitude faster than the other ones.  It uses numpy functions, so there aren't any explicit loops. <code>np.where</code> chooses values that keep the equations from blowing up where the denominator would go to zero.  Case for <code>s == 0</code> is handled separately.</p>

<pre><code>def FG_param1(r, s, t):

    if s == 0:
        return r*cos(t), r*sin(t)


    sin_t = sin(t)
    cos_t = cos(t)

    radical = sqrt(1 - sqrt(1 - s**2 * sin(2*t)**2))

    x_denom = np.where(np.isclose(sin_t, 0.0), 1.0, s*sqrt(2)*np.abs(sin_t))
    x = r * sign(cos_t) * np.where(np.isclose(sin_t, 0.0, 1e-12), 1.0, radical / x_denom)

    y_denom = np.where(np.isclose(cos_t, 0.0), 1.0, s*sqrt(2)*np.abs(cos_t))
    y = r * sign(sin_t) * np.where(np.isclose(cos_t, 0.0, 1e-12), 1.0, radical / y_denom)

    return x, y
</code></pre>
    </div>