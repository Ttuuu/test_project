<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While it's clear that you're new to python, it's still pretty good that you got it to run first time. Good job!</p>

<h3>Input Validation</h3>

<p>Currently, you have a list of forbidden characters. While that can work, by default python allows unicode input. That means there's literally thousands of letters someone can input. I suggest instead using a whitelist of valid inputs. Like this:</p>

<pre class="lang-py prettyprint-override"><code>VALID_LETTERS = "abcdefghijklmnopqrstuvwxyz"  # This won't ever change, and typically this sort
# of things  is a module-level variable. 

def valid_word(word):
    for letter in word:
        if letter not in VALID_LETTERS:
            print(f"Letter {letter} is not a valid letter. Please use just a-z.")
            return
    if len(word) &gt; 8:  # This was 12 in your script. Little mistake? And you might want a 
        # module-level constant for this as well.
        print("\n\nError: Word is too long. Use a word with eight characters or less.")
        return False
    return True
</code></pre>

<h3>main() and game()</h3>

<p>Generally, in python we never execute code at the moment the module is loaded. <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">Read here for details</a>, and how we guard against it. I'll come back to this later. For now, it means we should put as much as possible into functions - lets call them main() and game().</p>

<p>main() will be the main menu function. Since we don't have a true menu, this will basically start a game, and perhaps ask if the player wants to play again. </p>

<p>game() will be a function that lets us play a single game. Most of this will be a loop that gets player input and calculates the game state. Basically everything in your script that isn't another function should be in the game() function. </p>

<p>I'll cut some variables we don't need later on. I'll explain them when we get to where we use them.</p>

<p>Like this:</p>

<pre class="lang-py prettyprint-override"><code>def game():
    # Variable naming is important. This is an example of a good name.
    guessed_letters = []

    # ill_chars = [...]  We already have this variable before here!

    # Lets assign the parts directly. We can index them as in "3rd part".
    # And for ourselves, we comment the meaning to make sure we still know what it means a year 
    # from now.
    hangman_parts = [
        "    O",  # Head
        "   /",  # Left Arm
        "|" ,  # Torse
        "\\",  # Right Arm
        "/",  # Left Leg
        " \\"  # Right Leg
    ]
    hangman_progress = ["", 
                        "|", 
                      "\n|", 
                      "\n|"]

    hangman_final = ["|~~~~|\n"]

    # Check if word is valid

    # Naming: should be word_is_valid, to be consistent with your other variables.
    word_is_valid = False
    while not word_is_valid:
        word = input("\n\n\nChoose any word\n\n\n").lower()
        word_is_valid = valid_word(word)
    # With this loop condition, it'll keep asking until valid_word returns True. So we can just 
    # assign that value to word_is_valid directly.

    # Since this is the word we're trying to guess, lets just push it upwards in
    # the console a lot, so we won't see it all the time:
    print("\n" * 100)  # Prints 100 newlines.

    # We don't need word_list, just word will do. We don't need spaces either.
    while True:  # Main game loop. We don't need to check for anything, we'll just use break or
        # return to get out.
</code></pre>

<p>Now we're going to use a list comprehension. It's almost the same as a generator expression, but it gives us a true list, so we can ask python how long it is:</p>

<pre class="lang-py prettyprint-override"><code>        # Calculate how many bad letters we have with a list comprehension:
        bad_letter = len([letter for letter in guessed_letters if letter not in word])
        draw_hangman(bad_letter)
        if bad_letter &gt; 5:
            print("\n\n\n\nYOU GOT HUNG")
            return
        print("\n\n\n\n")
</code></pre>

<p>You used to draw your hangman at two different places, while it's more practical to do it in one place. It also ensures that if you want to change something, you'll only have to change it once.</p>

<p>I've also changed how to draw it. It's much more useful to have a function for this drawing operation, and have it calculate how to draw from the number of bad letters so far. This makes the drawing independent of the current game state. Here's the version I came up with, based on your modifications of <code>hangman_final</code>:</p>

<pre class="lang-py prettyprint-override"><code>def draw_hangman(bad_letter):
    print(hangman_final, end="")
    if bad_letter &gt; 0:  # Head
        print(hangman_progress[1] + hangman_parts[0], end="")
    if bad_letter == 2:  # Torso and arms
        print(hangman_progress[2] + "    " + hangman_parts[2], end="")
    elif bad_letter == 3:
        print(hangman_progress[2] + "".join(hangman_parts[1:3]), end="")
    elif bad_letter &gt; 3:
        print(hangman_progress[2] + "".join(hangman_parts[1:4]), end="")
    if bad_letter &gt; 4:  # Legs
        print(hangman_progress[3] + "   " + hangman_parts[4], end="")
    if bad_letter &gt; 5:
        print(hangman_parts[5], end="")
</code></pre>

<p>Here we need to print the letters we guessed, and underscores otherwise. We can calculate and print it in one line:</p>

<pre class="lang-py prettyprint-override"><code>        print(" ".join(letter for letter in word if letter in guessed_letters else "_"))
</code></pre>

<p>For every letter, this will print it if it's contained in guessed_letters, and otherwise print an underscore. This is a <a href="https://docs.python.org/3/reference/expressions.html?highlight=generator#generator-expressions" rel="noreferrer">generator expression</a>. This one is almost equal to the function:</p>

<pre class="lang-py prettyprint-override"><code>def make_word(word, guessed_letters):
    result = []
    for letter in word:
        if letter in guessed_letters:
            result.append(letter)
        else:
            result.append("_")
    return result
</code></pre>

<p>I say almost, because it's not exactly a list that comes out of it, even if it acts the same if you use it in a for loop or feed it to a function that does, like "".join(). It also acts more like a loop than a function, but that's not really important right now.</p>

<p>We feed the result to the join. And note that we feed it to " ".join(), with a space in between, which will put a space between every letter like you did before.</p>

<pre class="lang-py prettyprint-override"><code>        print(f"\n\nThe word has: {len(word)} letters.")  # f-strings are shorter, and easy to use. 
        print(f"\nYou've tried the following letters:\n\n{''.join(guessed_letters) }\n\n")
        # For a string literal inside an f-string, use the other type of quotes

        # This is another generator expression - this one returns a not-quite-list of booleans, and
        # the all() builtin function returns True if and only if all results of the generator
        # expression are True.
        if all(letter in guessed_letters for letter in word):
            print(f"You WIN!\nThe word was: {word}")
            return

        input_valid = False
        while not input_valid:
            new_letter = input("\n\nPlease choose a letter: \n\n\n\n").lower()
            # VERY GOOD that you lowercase it! Prevents tons of weird behaviour.
            if len(new_letter) &gt; 1:
                print("Please enter a single letter only.")
            elif new_letter not in VALID_LETTERS:
                print(f"{new_letter} is not a valid letter. Please enter a letter a-z")
            elif not new_letter:  # Empty strings evaluate to False
                print("Please enter a letter before pressing enter.")
            elif new_letter in guessed_letters:
                print("You already guessed {new_letter} before!")
            else:
                guessed_letters.append(new_letter):
                input_valid = True

</code></pre>

<p>This is pretty close to your input. But I put it in a loop, so if we have an invalid input, we don't have to traverse the entire game loop again. I use a pretty simple signalling boolean to keep it going, but perhaps there's more elegant ways to do this. Never <em>wrong</em> to keep it simple, though.</p>

<p>Right now, to play the game, all you have to do is call the <code>game()</code> function. But perhaps we want to play multiple games in series? Lets make our <code>main()</code> function:</p>

<pre class="lang-py prettyprint-override"><code>def main():
    game()
    while "y" in input("Play again? [Y/n]").lower():
        game()
</code></pre>

<p>Why is this in a separate function? Again, for the sake of extensiblility. Perhaps, we want to import our game from another module. If so, we don't want it to run when we import, but when we call a function. So we end the script with this <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">guard</a>:</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    main()
</code></pre>

<p>If we execute this file directly, this will run our main() function and let us play the game. But if we import it, it won't, so we can call the function when we want it.</p>
    </div>