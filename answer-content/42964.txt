<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some observations:</p>

<p>Your data should (probably) be private. Otherwise, an enterprising developer will do this:</p>

<pre><code>LinkedList&lt;int&gt; l;
// naively delete contents of l
delete l.head;
</code></pre>

<p><code>Node</code> is an implementation detail of the list. It makes no sense to define it outside the class.</p>

<p>That means, the code should look like this:</p>

<pre><code>template&lt;class T&gt;
class LinkedList
{
// private:
    struct Node // Node is a private implementation detail
    {
        T data;
        Node *next;
        Node(const T&amp; d):data(d), next() {}
        Node(const Node&amp; copyNode) : data(copyNode.data), next() {}

    private:
        Node&amp; operator=(const Node&amp;);
    };
    Node* head;
    Node* tail;

public:
    // ... rest of code here
};
</code></pre>

<p>After making head and tail private, you will need to add iteration and/or data retrieval API to your class.</p>

<p>When designing a class, consider how you will look at it from the perspective of client code, not how it is implemented (i.e. you are implementing a "list of instances of T", not a "list of instances of Node"). That means you should not have a constructor receiving a Node*, but a constructor receiving a T instance.</p>

<p>Your print and printBackwards functions should (probably) receive the output stream as a parameter (then, you can use the same code to print to a std::ostringstream, std::fstream, std::cout and so on).</p>

<p>Your copy&amp;swap implementation of assignment should be written like this:</p>

<pre><code>template&lt;class T&gt;
LinkedList&lt;T&gt;&amp; LinkedList&lt;T&gt;::operator=(LinkedList byValList)
{
    using std::swap;        // enable ADL
    swap(*this, byValList); // implementation swaps by moving if there's a
                            // LinkedList&lt;T&gt;::LinkedList&lt;T&gt;(LinkedList&lt;T&gt;&amp;&amp;)
                            // defined; (consider defining it)

    return *this;
}
</code></pre>

<p>This function could use a std::move:</p>

<pre><code>template&lt;class T&gt;
void LinkedList&lt;T&gt;::insertToTail(T val)
{
    Node&lt;T&gt; * newNode = new Node&lt;T&gt;(std::move(val)); // &lt;&lt;&lt;&lt;&lt; 
    // ... 
}
</code></pre>

<p>For a POD-type T it's fine without it, but what happens if I write</p>

<pre><code>LinkedList&lt;std::string&gt; l;
std::string s{' ', 10000};
l.insertToTail(s); // creates one copy of s for argument, and one for the node
</code></pre>
    </div>