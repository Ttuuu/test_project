<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Create <code>CalculateCallback</code> which is responsible for managing the action after the calculation is done. So perform any calculations there necessary once calculation is done. </p>

<pre><code>   @FunctionalInterface
    public interface CalculateCallback {
        public void perform(double value);
    }
</code></pre>

<p><code>AreaCalculator</code> is responsible for doing calculations and performing the calculate call back. Once the slider changes the calculation should go through <code>AreaCalculator</code>. </p>

<pre><code>public class AreaCalculator {

    private CalculateCallback perimeterCalculatorCallback;
    private CalculateCallback areaCalculatorCallback;
    private MyShape myShape;

    public AreaCalculator(CalculateCallback perimeterCalculatorCallback, CalculateCallback areaCalculatorCallback) {
        this.perimeterCalculatorCallback = perimeterCalculatorCallback;
        this.areaCalculatorCallback = areaCalculatorCallback;
    }

    public void doCalculate(int currentValue) {
        if (null != myShape) {

            double bLength = myShape.calculatePerimeter(currentValue);
            perimeterCalculatorCallback.perform(bLength);

            double bArea = myShape.calculateArea(currentValue);
            areaCalculatorCallback.perform(bArea);
        }
    }

    public void setMyShape(MyShape myShape) {
        this.myShape = myShape;
    }
}
</code></pre>

<p><code>ShapeFactory</code> is responsible to provide <code>MyShape</code> according to parameter. I didn't implement that. Please makes sure to implement this. </p>

<pre><code>public class ShapeFactory {

    public static MyShape getMyShape(String item) {

        //Here you have to return MyShape according to parameter.
    }
}
</code></pre>

<p><code>ShapeHandler</code> is responsible for handling change. It will perform calculation through <code>AreaCalculator</code> by providing <code>MyShape</code> according to action. </p>

<pre><code>public class ShapeHandler implements ActionListener {

    private AreaCalculator areaCalculator;
    private ActionDoneCallback actionDoneCallback;

    public ShapeHandler(AreaCalculator areaCalculator, ActionDoneCallback doneCallback) {
        this.areaCalculator = areaCalculator;
        this.actionDoneCallback = doneCallback;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        MyShape shape = ShapeFactory.getMyShape(e.getActionCommand());
        areaCalculator.setMyShape(shape);
        actionDoneCallback.perform();
    }
}
</code></pre>

<p>Your <code>MyFrame</code> constructor should like below. </p>

<p>Its responsible to create callback since its the owner of component and this need to modify according to requirement. </p>

<pre><code>public MyFrame() {

        // Create frame, panels and items within

        DecimalFormat numberFormat = new DecimalFormat("#.00");
        AreaCalculator areaCalculator = new AreaCalculator(
                (value) -&gt; bLengthOutputField.setText(numberFormat.format(value)),
                (value -&gt; areaOutputField1.setText(numberFormat.format(value))));

        ShapeHandler shapeHandler = new ShapeHandler(areaCalculator, () -&gt; shapeSlider.setEnabled(true));
        squareMenuItem.addActionListener(shapeHandler);
        triangleMenuItem.addActionListener(shapeHandler);
        circleMenuItem.addActionListener(shapeHandler);

        shapeSlider.setEnabled(false);
        shapeSlider.addChangeListener(e -&gt; areaCalculator.doCalculate(shapeSlider.getValue()));

        exitButton2.addActionListener(new CloseListener());

    }
</code></pre>

<p>Once a shape is selected <code>ShapeHandler</code> will set <code>MyShape</code> in <code>AreaCalculator</code>. </p>

<p>Once the Jslider is changed it will do the calculation base on the value. </p>

<p>I design this under SOLID principles and base on TDD.
so you can write unit test easy for this design. </p>

<p>Let me to know if you need some clarification. </p>
    </div>