<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Locations</h2>

<p>The location documentation is confusing. In <code>getCutLists</code>, the input defaults to</p>

<pre><code>'./input/input.json'
</code></pre>

<p>but in your <code>main</code>, the example in the documentation is</p>

<pre><code>'localhost:8080/foo/bar.json'
</code></pre>

<p>Is this a file path or a URL? Based on your usage it looks like it must be a file path, and the host and port shown above should not be there. Also, <code>'./input/input.json'</code> should just be made the default value of <code>inputstr</code>, not <code>""</code>.</p>

<h2>Function names</h2>

<p>In Python, the standard for function and variable names is lower_snake_case, i.e. <code>get_cut_lists</code>, <code>get_solution</code>, etc.</p>

<h2>Function complexity</h2>

<p><code>getCutLists</code> should be broken into at least three different functions for maintainability, testability and legibility.</p>

<h2>Exception handling</h2>

<p>Do not degrade exceptions to strings like this:</p>

<pre><code>try:
    ...
except:
    errstr += "JSON file not found. "
    return(f"Err: {errstr}")
</code></pre>

<p>There is a handful of problems with this pattern. First, <code>except:</code> interferes with the user's ability to Ctrl+C break out of the program. Also, <code>except:</code> is too broad in general, and you should only catch what you expect the code to throw, in this case <code>FileNotFoundError</code>. Also, if you wanted your error string to be useful, you would include the name of the file. Finally, all of that machinery should go away and you should simply <code>open()</code> and let the exception fall through to the caller without an <code>except</code>. If the caller wants to re-format the way that exceptions are printed on the upper level, it can; but that should not be the responsibility of this function. A pattern to avoid in languages with good exception handling is to degrade that exception handling into scalar return values (string, bool, int error codes, etc.)</p>

<p>As for validation like this:</p>

<pre><code>try:
    test = [x['Length'] for x in reqs]
    if min(test) &lt;= 0:
        errstr += f"Err: Required length ({min(test)}) must be bigger than 0."
except:
    errstr += "'Length' not found in required lengths. "
</code></pre>

<p>Raise your own exception instead:</p>

<pre><code>min_len = min(x['Length'] for x in reqs)
if min_len &lt;= 0:
    raise ValueError(f'Required length ({min_len}) must be greater than 0.')
</code></pre>

<p>Also don't make a temporary list; apply <code>min</code> directly to the generator.</p>

<h2>Comments</h2>

<p>Whereas</p>

<pre><code>#Make list of all available cut combinations
</code></pre>

<p>is a useful comment,</p>

<pre><code>#Set other variables
</code></pre>

<p>is not. It's worse than having no comment at all. If there's something complex or surprising going on, or something to do with business logic, document it; otherwise avoid </p>

<pre><code># do the thing
do_thing()
</code></pre>

<h2>Expression simplification</h2>

<pre><code>((myplank[length] * length) + (myplank[length] * cutwidth))
</code></pre>

<p>can be</p>

<pre><code>myplank[length]*(length + cut_width)
</code></pre>

<h2>Weakly-typed structures</h2>

<p>You're loading from JSON; fine: but then you never unpack the dictionary representation of your data to objects; you leave it in dictionaries. This leads to code like</p>

<pre><code>        myplank['Baseprice'] = (myplank['Price']) / ((myplank['Length'] - myplank['Rest']))
</code></pre>

<p>which is a mess. Instead, make actual classes to represent your data, and unpack to those.</p>

<p>In other words, we aren't in Javascript: not everything is a dictionary.</p>

<h2>Mixed os/path</h2>

<pre><code>Path(os.path.dirname(outputfile)).mkdir(parents=True, exist_ok=True)
</code></pre>

<p>uses mixed <code>Path</code> (good) and <code>os</code> calls (not so good). You do not need <code>dirname</code> here; instead make <code>outputfile</code> a path directly and then manipulate that.</p>
    </div>