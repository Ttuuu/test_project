<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a case for an <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html" rel="nofollow noreferrer"><code>Enum</code></a> and a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/NavigableMap.html" rel="nofollow noreferrer"><code>NavigableMap</code></a>.  </p>

<p><strong>TimeUnit.java</strong></p>

<pre><code>public enum TimeUnit {

    SECOND(1, "1 second", " seconds"),
    MINUTE(60, "1 minute", " minutes"),
    HOUR(3600, "1 hour", " hours"),
    DAY(86400, "1 day", " days"),
    MONTH(2629743, "1 month", " months");

    private final int SECONDS_COUNT;
    private final String ONE_UNIT;
    private final String MULTIPLE_SUFFIX;

    public TimeUnit(int secondsCount, String oneUnit, String multipleSuffix) {
        SECONDS_COUNT = secondsCount;
        ONE_UNIT = oneUnit;
        MULTIPLE_SUFFIX = multipleSuffix;
    }

    public getSecondsCount() {
        return SECONDS_COUNT;
    }

    public getOneUnit() {
        return ONE_UNIT;
    }

    public getMultipleSuffix() {
        return MULTIPLE_SUFFIX;
    }

}
</code></pre>

<p><strong>TimeProcessor.java</strong></p>

<pre><code>public class TimeProcessor {

    private static final NavigableMap&lt;Integer, TimeUnit&gt; timePeriods = new TreeMap&lt;&gt;();
    static {
        for (TimeUnit unit : TimeUnit.values()) {
            timePeriods.put(unit.getSecondsCount(), unit);
        }
    }

    public static String toString(int secondsOfTime) {
        Map.Entry&lt;Integer, TimeUnit&gt; entry = timePeriods.floorEntry(secondsOfTime);
        if (entry == null || entry.getKey() == null) {
            return "";
        }

        int unitCount = secondsOfTime / entry.getKey();
        return toString(unitCount, entry.getValue());
    }

    public static String toString(int unitCount, TimeUnit unit) {
        return (unitCount == 1) ? unit.getOneUnit() : unitCount + unit.getMultipleSuffix();
    }

}
</code></pre>

<p>I find it easier to have all the data localized in one place, separate from the handling logic.  This makes it easier and more robust to add additional units like weeks, fortnights, seasons, years, decades, centuries, and millennia.  </p>

<p>This is more verbose and self-documenting as well as easier to extend and maintain.  Each new unit is only a line of code.  </p>

<p>When using <code>if</code>/<code>else</code> structures or ternary operators, I prefer to test positive conditions rather than negatives.  This avoids the inherent if not not logic.  </p>

<p>When using either this version or your original, there is a bit of a problem in terms of how it handles months.  Not every month has the same length.  A month can be anywhere from twenty-eight to thirty-one days.  It might be better to make use of the <a href="https://docs.oracle.com/javase/tutorial/datetime/iso/period.html" rel="nofollow noreferrer">existing date handling logic</a> rather than spin your own.  Because months and larger units are not fixed length.  Even days can be problematic with daylight savings time.  I regard this more as a programming exercise than a solution to representing time intervals.  </p>

<p>I haven't tested this, so beware of syntax or logical errors.  </p>
    </div>