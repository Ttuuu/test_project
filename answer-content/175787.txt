<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Pointless <code>typedef</code></h3>

<p>In C, it's fairly common to have a <code>typedef</code> like this:</p>

<pre><code>typedef struct tag {
   // ...
} type_name;
</code></pre>

<p>This allows you define a variable with just <code>type_name var_name;</code>. A <code>struct</code> definition like this:</p>

<pre><code>struct tag {
    // ...
};
</code></pre>

<p>...requires that to define a variable of this type, you need to type <code>struct tag var_name;</code>. In C++, that's unnecessary though. Using just:</p>

<pre><code>struct type_name {
    // ...
};
</code></pre>

<p>... lets you define a variable as <code>type_name var_name;</code> already. In this case, you've left the final <code>type_name</code> off, so your <code>typedef</code> isn't syntactically correct. It's probably open to some question whether your code should compile at all (but either way, it's incorrect).</p>

<h3>Container choice</h3>

<p>A great deal here depends on the actual data. If the data you've shown is truly representative (there really are only a couple of bad IDs) your current choice of containers is probably quite good.</p>

<p>On the other hand, if this is a reduced sample, and in real use you might have dozens or even hundreds of IDs in your black list, then it's probably worth considering using something like an <code>std::unordered_set</code>.</p>

<h3>Algorithm choice</h3>

<p>Another obvious possibility (if the number of bad IDs might get large) would be to use a binary search instead of a linear search through the bad IDs. Note that you've shown in the bad IDs in sorted order--if you were to use a binary search, you'd be taking advantage of this, and their being sorted would be required, which it currently isn't.</p>

<h3>Item grouping</h3>

<p>Unless you're truly required to show the message about an item being good/bad in the order in which they originally appeared, I'd strongly prefer to see output something like this:</p>

<pre><code>Good items:
A
B   
D

Bad items:
C
E  
</code></pre>

<h3>Avoid <code>std::endl</code></h3>

<p>I'd use <code>'\n'</code> instead of <code>std::endl</code>. Using <code>std::endl</code> not only prints a new-line to the stream, but also <em>flushes</em> the stream. This is rarely desirable or useful, and if you're producing a substantial amount of output, it'll typically cause a substantial slow-down.</p>

<h3>Don't repeat yourself</h3>

<p>I'd rather have a single function that does the formatting and display of the output, something on this order:</p>

<pre><code>template &lt;class It&gt;
void show(std::string const &amp;caption, It beg, It end) { 
    std::cout &lt;&lt; caption &lt;&lt; ":\n";
    for (; beg != end; ++beg)
        std::cout &lt;&lt; beg-&gt;id &lt;&lt; "\n";
}
</code></pre>

<h3>Format data</h3>

<p>Instead of putting all the contents of your <code>vector</code> on one long line, consider formatting it with (for example) one item per line:</p>

<pre><code>std::vector&lt;mystruct&gt; all_items = {
    {151, "test1"}, 
    {154, "test4"}, 
    {152, "test2"}, 
    {151, "test1"}, 
    {151, "test1"}, 
    {153, "test3"}
};
</code></pre>

<h3>Library usage</h3>

<p>What you're really doing is starting with a collection of items, and partitioning it into two groups. That being the case, I'd at least consider using <code>std::partition</code> to do the partitioning part:</p>

<pre><code>int main() { 
    std::unordered_set&lt;int&gt; bad_ids { 151, 152 };
    std::vector&lt;mystruct&gt; all_items = {
        {151, "test1"}, 
        {154, "test4"}, 
        {152, "test2"}, 
        {151, "test1"}, 
        {151, "test1"}, 
        {153, "test3"}
    };


    auto part = std::partition(all_items.begin(), all_items.end(),
        [&amp;](mystruct const &amp;s) { return bad_ids.find(s.id) != bad_ids.end();});

    show("bad items", all_items.begin(), part);
    show("Good items", part, all_items.end());
}
</code></pre>
    </div>