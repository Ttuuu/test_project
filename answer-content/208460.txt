<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry for excavating this, but just found it and wanted to try.</p>

<p>Will offer what I can.</p>

<pre><code>#! /bin/bash
</code></pre>

<p>This is no crime, but it's a tad more portable (if that matters at all to you) if you use</p>

<pre><code>#! /bin/env bash
</code></pre>

<p><code>env</code> itself is virtually always in <code>/bin</code>, though some installations move the interpreter binaries.</p>

<p>I don't personally like or use <code>set -e</code>. It doesn't give me as much control over what happens. Personally, I prefer <code>trap</code>s, something like this:</p>

<pre><code>trap 'echo "ERROR $? at $0:$LINENO - [$BASH_COMMAND]"' err
</code></pre>

<p>Then I get useful feedback.</p>

<pre><code>$: bogus
bash: bogus: command not found
ERROR 127 at /usr/bin/bash:73 - [bogus]
</code></pre>

<p>As for the <code>eval</code>, how about creating a controlled file to source at exit time? </p>

<pre><code>atexit_handler() {
  tmp=$(mktemp)
  printf "%s\n" "${ATEXIT[@]}" &gt;| $tmp
  trap 'echo "Error $? in exit handler when processing [$BASH_COMMAND]"' err
  . $tmp
}
</code></pre>

<p>This would allow for more arbitrarily complex possibilities, without really worsening the security risk of the <code>eval</code>, which isn't catastrophic if your code registers all the commands going into the handler anyway. It also leaves you the option of scheduling the cleanup of the file <em>with</em> the handler, so that if it succeeds it leaves no mess, but if it fails will abort and let you debug the file.</p>

<pre><code>atexit true
atexit "echo bye"
atexit 'sing() { for i in do re me;do echo "$i"; done; }'
atexit sing
atexit false
atexit 'rm $tmp' # defer evaluation 
</code></pre>

<p>I love this idea, btw. I may start using it. :)</p>
    </div>