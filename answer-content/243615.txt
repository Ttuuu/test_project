<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Typically, you have a single loop while user is doing input</h1>

<p>Use try/except to handle loop flow.
The order you get things makes a difference as the next input's correctness may depend on previous input.</p>

<h1>Separate out your steps into methods</h1>

<p>There are three distinct parts to your flow, loop could be simplified by calling your methods one by one.</p>

<h1>Indentation is important</h1>

<p>My solution is untested (on my phone), but should give you a base to work off.</p>

<p>More comments inline</p>

<pre><code># you should only need one loop for stuff like this...
number = None
base_from = None
base_to = 10 # this is implied by your code. You could allow user to specify this too...
while True: #Main loop will keep the script running until user exits
  negative_flag=False #flag to check if a value is negative or not. False by default
  base_from=input("Enter the base number is in : ") if base_from is None else base_from # don't get this if we have it already
  try:
    base_from = int(base_from) # just want an int
    if base_from &lt;= 1:
      raise ValueError("Base should be greater than or equal to 2")
  except ValueError as e: # two types of ValueError, one is not int, other is less than 2
    base_from = None # need to clear this to get it again as current value is not ok
    print("Wrong input. {}".format(e)) # you can make the messages friendlier yourself
    continue
  number=input("Enter a number : ") if number is None else number # keep this check simple. Ensure number is either None or set correctly
  try:
    # of course this only works for bases less than or equal to 10 as you haven't specified the notation for higher bases...
    result = 0
    for char in number:
      if char == '-':
        negative_flag = True
        continue
      result *= base_from # mathematically identical to 'shift left' in specified base
      digit = int(char)  # int() raises ValueError if char is not int
      if not (0&lt;=digit&lt;base_from):
        raise ValueError("digits must be between 0 and {} for base {}".format(base_from-1,base_from))
      # digit must be ok...
      result += digit
  except ValueError as e: # only catch specific exception... we don't know how to (and shouldn't) handle other exceptions here
    number = None # need to reset this to start over as the number is not ok
    print("Wrong input. {}".format(e))
    continue
  print(-result if negative_flag else result)

  # this one could be a separate loop depending how fancy you need it. But if that is the case, should be a separate method and call it and either break or continue based on return value... shouldn't throw exceptions as that will be difficult to catch here
  response=input("Do you want to continue?(y or n) - ")
  if response.lower().startswith('n'):
    break
  else:
    base_from = None
    number = None
    continue
</code></pre>
    </div>