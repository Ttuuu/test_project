<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Being consistent</h2>

<p>You have inconsistency between Description, filename and function name.</p>

<ul>
<li>in your title and in your description, you talk about <strong>Bist-o-yek</strong> a card game <em>similar</em> to <strong>Blackjack</strong></li>
<li>your main function and your file are just named <strong>Blackjack</strong>.</li>
</ul>

<p>Try to be consistent between all your parts or you might lose users because of conflicting information. People can have to deal with unexpected behaviors because they might think that's a regular BlackJack.</p>

<hr>

<h2>Coding idiomatically</h2>

<ul>
<li><p>Prefer <code>using</code>over <code>typedef&lt;/u&gt;</code>:</p>

<ul>
<li>the Standard <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Rt-using" rel="nofollow noreferrer">recommended way</a>.</li>
<li>more consistent with variables assignment (<em>name</em> on the left of the equa signl, <em>attributes</em> on the right)</li>
<li>more consistent with case where you make template aliases </li>
<li>make going from type alias to template alias easier.</li>
</ul>

<p><em>But, we'll see later that this alias is not even necessary</em></p></li>
<li><p>Try to don't use deprecated function :</p>

<p>The  <a href="https://en.cppreference.com/w/cpp/algorithm/random_shuffle" rel="nofollow noreferrer"><code>std::random_shuffle</code></a> is deprecated in C++14 and even removed in C++17. Instead you should use <code>std::shuffle</code>. (and if possible, with a good seeding, like explained <a href="https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html" rel="nofollow noreferrer">here</a>)</p></li>
<li><p><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#slio2-when-reading-always-consider-ill-formed-input" rel="nofollow noreferrer">Consider inputs ill-formed</a></p>

<p>Even if you said you knew it, you should always check the inputs as ill-formed. Especially <a href="https://isocpp.org/wiki/faq/input-output#istream-and-ignore" rel="nofollow noreferrer">that it's easy to check</a>.</p></li>
<li><p><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#slio50-avoid-endl" rel="nofollow noreferrer">Avoid <code>std::endl;</code></a></p>

<p>It send the character <code>'\n'</code> to the stream and then <code>flush</code> the stream.  <a href="https://isocpp.org/wiki/faq/input-output#endl-vs-slash-n" rel="nofollow noreferrer">If you want a flush</a>, do it explicitly :  <code>.... &lt;&lt; '\n' &lt;&lt; std::flush;</code>. </p></li>
</ul>

<h2>Going lazy for more efficiency</h2>

<p>You do a lot of things for nothing:</p>

<ul>
<li>Why shuffling each times the deck when drawing a card? Since the deck is already shuffled, just take the last card. Plus bonus, it's cheaper to remove the last element in a vector than a random one.</li>
<li>Why re-shuffling again two times in the <code>deal()</code> method</li>
<li>Give directly the <code>draw()</code>result to <code>push_back</code>,  it will be cleaner and avoid temporaries.</li>
<li>You <code>std::accumulate</code> many many times even when <code>player_score</code> or <code>dealer_score</code> didn't change.</li>
</ul>

<hr>

<h2>Defining et rethinking entities</h2>

<h3><em>Card</em></h3>

What's a <em>Card</em>?

<p>A card is a <em>set</em> of two <em>things</em>:</p>

<ul>
<li>the <em>Suit</em>, a value among a enumeration of four possibilities (<em>Club</em>, <em>Diamond</em>, <em>Heart</em>, <em>Spade</em>)</li>
<li>the <em>Rank</em>, depending on how you imagine it:

<ul>
<li>a value in the range of 1 to 13</li>
<li>a value among a enumeration of thirteen possibilities (<em>As</em>, <em>Two</em>, ..., <em>Queen</em>,  <em>King</em>)</li>
</ul></li>
</ul>

Displaying

<p>A card may be displayed it in many ways:</p>

<ul>
<li><strong>Rank</strong>: full names (As, Two, Three, ..., Queen, King) or short names (A, 2, 3, ..., Q, K)</li>
<li><strong>Suits</strong> : full names (<em>Club</em>, <em>Diamond</em>, <em>Heart</em>, <em>Spade</em>), first letter (<em>C</em>, <em>D</em>, <em>H</em>, <em>S</em>) or <a href="https://en.wikipedia.org/wiki/Playing_cards_in_Unicode" rel="nofollow noreferrer">unicode symbols</a>.</li>
<li><strong>Card</strong>: Combination of theses possibilities, with maybe some decoration (Queen <strong>of</strong> Heart<strong>s</strong>, <strong>[1 **'s</strong> â™¤<strong>]</strong>, ...)</li>
</ul>

<p>In your current code, a card isn't really a card. It's just a string with a value associated and if you want to change to display of a card, you have to change a lot of things in your code. Making it more generic can make it less painful and more explicit.</p>

<pre><code>struct Card {
    enum class Suit {
        Heart, Club, Spade, Diamond, INVALID
    };
    enum class Rank {
        Ace = 1, Two, Three, Four, Five, Six, Seven,
        Eight, Nine, Ten, Jack, Queen, King, INVALID
    };

    constexpr Card() : rank(Rank::INVALID), suit{Suit::INVALID} {}
    constexpr Card(Rank rank, Suit suit) : rank{rank}, suit{suit} {}

    bool valid() { return rank != Rank::INVALID &amp;&amp; suit != Suit::INVALID; }

    Rank rank;
    Suit suit;
};

std::string to_string(Card::Rank rank) {
    switch (rank) {
        case Card::Rank::Ace:   return "A";
        case Card::Rank::Two:
        case Card::Rank::Three:
        case Card::Rank::Four:
        case Card::Rank::Five:
        case Card::Rank::Six:
        case Card::Rank::Seven:
        case Card::Rank::Eight:
        case Card::Rank::Nine:
        case Card::Rank::Ten:
            using std::to_string;
            return to_string(static_cast&lt;std::underlying_type_t&lt;Card::Rank&gt;&gt;(rank));
        case Card::Rank::Jack:  return "J";
        case Card::Rank::Queen: return "Q";
        case Card::Rank::King:  return "K";
        default: throw std::range_error("Rank is out of range");
    }
}
std::string to_string(Card::Suit suit) {
    switch (suit) {
        case Card::Suit::Heart:   return "\u2665";
        case Card::Suit::Club:    return "\u2667";
        case Card::Suit::Spade:   return "\u2664";
        case Card::Suit::Diamond: return "\u2666";
        default: throw std::range_error("Suit is out of range");
    }
}
std::string to_string(Card card) {
    return to_string(card.rank) + to_string(card.suit);   
}
</code></pre>

<p>Here, the two <code>INVALID</code> enum values and the `valid() method is just for convenience.</p>

<h3><em>Deck</em></h3>

What's a <em>Deck</em>?

<p>Some bunch of cards, with all cards possibles at beginning. Then, we draw cards from this deck, one by one, until no more. If it's not empty, we can also shuffle cards. We can also reset the deck to get a new complete one, shuffled.</p>

<p>Here, advantages are that if later, you want to do more rounds, without restarting the program, you don't have to rebuild the Deck, you just copy the static one, compile time computed, and shuffle it.</p>

<pre><code>class Deck {
  public:
    Deck()
        : cards{new_deck.begin(), new_deck.end()}
    {
        shuffle();
    }
    void reset() {
        cards = {new_deck.begin(), new_deck.end()};
        shuffle();
    }
    bool empty() const {
        return cards.empty();
    }    
    Card draw() {
        if (empty()) return {Card::Rank::INVALID, Card::Suit::INVALID};
        Card last = cards.back();
        cards.pop_back();
        return last;
    }        
    void shuffle() {
        if (empty()) return;
        // from https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html
        std::shuffle(cards.begin(), cards.end(), []() {
            std::mt19937::result_type seeds[std::mt19937::state_size];
            std::random_device device;
            std::uniform_int_distribution&lt;typename std::mt19937::result_type&gt; dist;
            std::generate(std::begin(seeds), std::end(seeds), [&amp;] { return dist(device); });
            std::seed_seq seq(std::begin(seeds), std::end(seeds));
            return std::mt19937(seq);
        }());
    }
  private:
    using R = Card::Rank;
    using S = Card::Suit;
    static constexpr std::array&lt;Card, 52&gt; new_deck {{
        {R::Ace,   S::Heart}, {R::Ace,   S::Club}, {R::Ace,   S::Spade}, {R::Ace,   S::Diamond},
        {R::Two,   S::Heart}, {R::Two,   S::Club}, {R::Two,   S::Spade}, {R::Two,   S::Diamond},
        {R::Three, S::Heart}, {R::Three, S::Club}, {R::Three, S::Spade}, {R::Three, S::Diamond},
        {R::Four,  S::Heart}, {R::Four,  S::Club}, {R::Four,  S::Spade}, {R::Four,  S::Diamond},
        {R::Five,  S::Heart}, {R::Five,  S::Club}, {R::Five,  S::Spade}, {R::Five,  S::Diamond},
        {R::Six,   S::Heart}, {R::Six,   S::Club}, {R::Six,   S::Spade}, {R::Six,   S::Diamond},
        {R::Seven, S::Heart}, {R::Seven, S::Club}, {R::Seven, S::Spade}, {R::Seven, S::Diamond},
        {R::Eight, S::Heart}, {R::Eight, S::Club}, {R::Eight, S::Spade}, {R::Eight, S::Diamond},
        {R::Nine,  S::Heart}, {R::Nine,  S::Club}, {R::Nine,  S::Spade}, {R::Nine,  S::Diamond},
        {R::Ten,   S::Heart}, {R::Ten,   S::Club}, {R::Ten,   S::Spade}, {R::Ten,   S::Diamond},
        {R::Jack,  S::Heart}, {R::Jack,  S::Club}, {R::Jack,  S::Spade}, {R::Jack,  S::Diamond},
        {R::Queen, S::Heart}, {R::Queen, S::Club}, {R::Queen, S::Spade}, {R::Queen, S::Diamond},
        {R::King,  S::Heart}, {R::King,  S::Club}, {R::King,  S::Spade}, {R::King,  S::Diamond},
    }};
    std::vector&lt;Card&gt; cards;
};
constexpr std::array&lt;Card, 52&gt; Deck::new_deck;
</code></pre>

<h3><em>Hand</em></h3>

<p>Both dealer and player have a bunch of card called a <em>hand</em>. Each times they take a new card drawing the deck, the points of this card being added to the score of their hand.</p>

<pre><code>struct Hand {
    void take(Card card)
    {
        switch (card.rank) {
            case Card::Rank::Ace:
                score += 11;
                break;
            case Card::Rank::Two:
            case Card::Rank::Three:
            case Card::Rank::Four:
            case Card::Rank::Five:
            case Card::Rank::Six:
            case Card::Rank::Seven:
            case Card::Rank::Eight:
            case Card::Rank::Nine:
                score += static_cast&lt;std::underlying_type_t&lt;Card::Rank&gt;&gt;(card.rank);
                break;
            case Card::Rank::Ten:
            case Card::Rank::Jack:
            case Card::Rank::Queen:
            case Card::Rank::King:
                score += 10;
                break;
            default: throw std::range_error("Hand::take() - Rank is out of range");
        }
        cards.push_back(card);
    }
    int score{};
    std::vector&lt;Card&gt; cards{};
};
</code></pre>

<h3>Example of usage:</h3>

<pre><code>auto deck = Deck{};

Hand dealer;
Hand player;

dealer.take(deck.draw());
player.take(deck.draw());
player.take(deck.draw());

std::cout &lt;&lt; "You got: " ;
for(auto card : player.cards) {
   std::cout &lt;&lt; to_string(card) &lt;&lt; ' ';
}
std::cout &lt;&lt; "(score: " &lt;&lt; player.score &lt;&lt;")";
dealer.take(deck.draw());
//....
</code></pre>

<h2>End Words</h2>

<p>Try to don't return the final string to the main. Instead display it from your function. Or Even better, write a outputting function, and you pass it all output instead of calling explicitly <code>std::cout &lt;&lt; ..</code> everywhere in your code, so, if you have to change output method, you only have to do in one place.</p>

<h2>I wasn't exhaustive, but I tried to talk about most important things.</h2>

If you go on C++17 you can benefit of some features:

<ul>
<li><p>Returning <code>std::optional&lt;Card&gt;</code> the the <code>draw()</code> function, making the return type more explicit.</p></li>
<li><p>You can simplify the <code>new_deck</code> definition:</p></li>
</ul>

<p>.Â Â Â Â </p>

<pre><code>static constexpr auto new_deck = [] {
    constexpr auto suits = std::array {
        Card::Suit::Heart, Card::Suit::Club, Card::Suit::Spade, Card::Suit::Diamond
    };
    constexpr auto ranks = std::array {
        Card::Rank::Ace,  Card::Rank::Two,   Card::Rank::Three, Card::Rank::Four, Card::Rank::Five,
        Card::Rank::Six,  Card::Rank::Seven, Card::Rank::Eight, Card::Rank::Nine, Card::Rank::Ten,
        Card::Rank::Jack, Card::Rank::Queen, Card::Rank::King
    };        
    std::array&lt;Card, suits.size() * ranks.size()&gt; cards{};
    for (std::size_t i = 0; i &lt; cards.size(); ++i) {
        cards[i] = {ranks[i % ranks.size()], suits[i % suits.size()]};
    }
    return cards;
}();
</code></pre>

<hr>

<h3>What's next?</h3>

<ul>
<li>Sanitize inputs</li>
<li>Maybe try to implement the full game</li>
<li>With multiples rounds</li>
<li>Allowing bets</li>
<li>With multi-player</li>
<li>Also, I searched on google and didn't found talk relating this variant. Maybe a way to display the rules to users can be helpful.</li>
</ul>
    </div>