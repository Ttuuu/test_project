<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The are lots of different sorting algorithms out there. You seem to have re-implemented "Bubble Sort". This is one of my favorite algorithms as it is very easy to write and sufficient (or even preferable) for very small data sets.</p>

<p>The problem with bubble sort is that it has a very bad complexity so when the data sets become large it becomes very expensive and there are other much better algorithms for large data sets.</p>

<h3>Overview</h3>

<blockquote>
  <p>This started as a simple exercise in sorting an array.</p>
</blockquote>

<p>Good thing to work on when you are a beginner.</p>

<blockquote>
  <p>I wanted to make it a bit more complex which is why I made it a 2D array.</p>
</blockquote>

<p>I don't think this adds anything to the problem. One of the main concepts of computer science is abstraction. In sorting we usually abstract the comparison out so that it simply becomes a comparison operation (usually <code>less than</code> i.e. <code>operator&lt;</code>). If you abstract out the comparison you are simply left with the sorting algorithm (which then is the same for every type). So you should have written a less than operation and then you could have re-used the sorting algorithm for any type.</p>

<blockquote>
  <p>I then noticed that each pass that checked and swapped values, it was checking all ten values. This seemed unnecessary because with each pass the highest value gets moved all the way to its final position. So I made it check one less element each pass until it finished.</p>
</blockquote>

<p>This is a standard optimization for "Bubble Sort". Unfortunately it does not reduce the complexity that much. Still making this the worst sort for large data sets.</p>

<p>One other optimization (which is a very make Bubble Sort great) is that if you do a full inner loop and there was not a single swap then the array is sorted. You can not break out of the outer loop. This optimization is great as it turns the best case situation (where the data is already sorted (or very close to sorted)) into an O(n) (i.e. linear) operation.</p>

<blockquote>
  <p>I did not want to use <code>std::sort</code>, this was an exercise in finding my own solution.</p>
</blockquote>

<p>Yes. Experimenting with sorting is good. But you should read up on the different types of algorithm and try and re-implement them. Doing this is great experience and will teach you the advantages of the different types.</p>

<blockquote>
  <p>The program was "falling off" the end of the array, and although I managed to work around it, I'm not sure I did it in the right way, or even why it was doing it in the first place.</p>
</blockquote>

<p><strike>Can't help with that unless I see the code from before your fix. But even if you did this is the wrong site for that. We only review working code.</strike></p>

<p>OK. I found the the bug you mentioned (and fixed). It seems like a common one so I will talk about that below.</p>

<blockquote>
  <p>The program seems to work as intended but would like some feedback on how it can be improved, or any issues etc.</p>
</blockquote>

<p>OK. Lets have a look.</p>

<h2>Code Review</h2>

<h3>Your Bug:</h3>

<pre><code>    if (person[i][1] &gt; person[i + 1][1] &amp;&amp; i != ROWS - 1)
    // The &amp;&amp; condition stopped the  program falling off the end of the array
    // but not sure why it was in the first place
</code></pre>

<p>So you have a loop:</p>

<pre><code> for (int i = 0; i &lt; ROWS; ++i)
</code></pre>

<p>This will allow you to loop over the array so you can accesses all the elements with <code>person[i]</code>. Where <code>ROWS</code> is the number of rows in the array. So this allows you to access all the valid rows. Remember that valid rows in an array are counted from 0 so the last valid row is <code>ROWS - 1</code> (this is why most loops use less than <code>operator&lt;</code> as you do in the loop test.</p>

<p>The problem is that you also accesses the element <code>person[i + 1]</code>. The largest value of <code>i</code> is <code>ROW-1</code> so the largest element accessed is <code>person[ROW-1+1]</code> or <code>person[ROW]</code> that is one past the end of the array.</p>

<pre><code>int  array[3] = {1,2,3};
std::cout &lt;&lt; array[0];   // first  element
std::cout &lt;&lt; array[1];   // second element
std::cout &lt;&lt; array[2];   // third  element
// Only 3 elements in the array
std::cout &lt;&lt; array[3];   // This is one beyond the end.
</code></pre>

<h3>Abstraction and self documenting code</h3>

<p>Pull out simple pieces of code into their own well named function. This documents what you are doing and makes the underlying algorithm easier to read.</p>

<pre><code>            {
                int temp = person[i][1];
                person[i][1] = person[i + 1][1];
                person[i + 1][1] = temp;
            }
</code></pre>

<p>This is obviously a swap. Why not write a function called <code>swapPerson(person[i], person[i+1]);</code> that swaps the values of two people. This will make the sort algorithm easier to read. This also moves the actual swapping processes out of the algorithm allowing you to more easily replace it with another one when you use a different type.</p>

<p>Note: This is so common that the standard library has a <code>std::swap()</code> that swaps two values of a the same type.</p>

<p>Now looking at the comparison:</p>

<pre><code>            if (person[i][1] &gt; person[i + 1][1])
</code></pre>

<p>Your code is comparing two elements adding the extra <code>[1]</code> on the end does not change much. But I would change it so that I was comparing two people.</p>

<pre><code>             if (lessPerson(person[i + 1], person[i]) {
             }
</code></pre>

<p>Still looks a bit ugly. But it shows you can use a function to do the test. But C++ lets you define functions that look like maths operations. So you can change the named <code>lessPerson()</code> function into <code>operator&lt;()</code> function that allows you to compare two people.</p>

<pre><code>             if (person[i + 1] &lt; person[i]) {
             }
</code></pre>

<h3>Optimizing the loop</h3>

<pre><code>        for (int i = 0; i &lt; ROWS; ++i, ++count )
        {
            if (loop + count == ROWS + 1)   // skips unnecessary checks
            {
                break;
            }
</code></pre>

<p>This seems like a very complex way of writing:</p>

<pre><code>        for (int i = 0; i &lt; j; ++i) {
</code></pre>

<p>Now if we look at your sort Algorithm after these changes:</p>

<pre><code>    for (int j = ROWS - 1; j &gt; 0; --j) {
        for (int i = 0; i &lt; j; ++i) {
            if (person[i + 1] &lt; person[i + 1]) {
                std::swap(person[i], person[i+1]);
            }
        }
    }
</code></pre>

<h3>Boiled Down Code.</h3>

<p>We seem to have boiled down your code to the absolute minimum. I would add the optimization I mentioned above and wrap this in its own function to make it:</p>

<pre><code>void sort(Person person[], int const ROWS)
{
    for (int j = ROWS - 1; j &gt; 0; --j) {
        bool swapped = false;
        for (int i = 0; i &lt; j; ++) {
            if (person[i + 1] &lt; person[i + 1]) {
                swapped  = true
                std::swap(person[i], person[i+1]);
            }
        }
        if (!swapped) {
            break;
        }
    }
}
</code></pre>

<p>Notice I have added the type <code>Person</code> so can explicitly write functions to swap and compare objects of type <code>Person</code>. Now you can write a less than (<code>operator&lt;</code>) and assignment (<code>operator=</code> used by <code>std::swap</code>) specifically for people that would allow the algorithm to work without having to be specific to the algorithm.</p>

<p>The next step is then to make the sort work for any type. Usually we do this with templates. So we can pass any type into the sort function and allow it to be sorted (as long as the type has an <code>operator&lt;</code> and an <code>operator=</code>).</p>

<pre><code>template&lt;typename T&gt;
void sort(T array[], int const ROWS)
{
    for (int j = ROWS - 1; j &gt; 0; --j) {
        bool swapped = false;
        for (int i = 0; i &lt; j; ++) {
            if (array[i + 1] &lt; array[i + 1]) {
                swapped  = true
                std::swap(array[i], array[i+1]);
            }
        }
        if (!swapped) {
            break;
        }
    }
}
</code></pre>

<p>The next step is to learn about the concepts of <code>Iterators</code> and how that can make the above function even more useful. But I will leave that as an exercise for now.</p>

<h3>Bad Habits</h3>

<p>Please don't do this:</p>

<pre><code>using std::cout;
using std::cin;
using std::endl;
</code></pre>

<p>Is it that much harder to write <code>std::cout</code> over <code>cout</code>? This is a kind of habit that will get you into a lot of trouble. Especially when you put <code>using</code> at the top level of a file. If you must do this, do it inside a function so it does not pollute the code.</p>

<p>Not sure what the extra level of braces is for.</p>

<pre><code>        {
            cout &lt;&lt; endl;
        }
</code></pre>

<p>But prefer to use <code>'\n'</code> rather than <code>std::endl</code>. The only difference is that <code>std::endl</code> performs a forced flush of the stream. The stream will auto flush so there is no need to force a flush to start with. Also manually flushing the stream (by the programmer) is nearly always going to cause sub optimal flushing and lead to performance degradation.</p>

<p>You don't need a <code>return 0</code> in main().</p>

<pre><code>    return 0;
</code></pre>
    </div>