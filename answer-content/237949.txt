<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since streams have iterators, you can save a lot of time by processing the files directly.  As has been pointed out <code>std::transform</code> works wonders in this regard.</p>

<p>I would also suggest putting the algorithm in a function and keep <code>main</code> uncluttered.</p>

<p>Returning  0 from <code>main</code> is no longer necessary with modern compilers.  If yours needs it, upgrade it.</p>

<p>A function using stream iterators could look something like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;
#include&lt;ios&gt;

typedef std::istreambuf_iterator&lt;char&gt; ItIn;
typedef std::ostreambuf_iterator&lt;char&gt; ItOut;

using std::string;
using std::ifstream;
using std::ofstream;
using std::ios;

void xor2files(string inFile1, string inFile2, string outFile)
{
    ifstream in1(inFile1, ios::in | ios::binary);
    ifstream in2(inFile2, ios::in | ios::binary);
    ofstream out(outFile, ios::out);
    if (!in1 || !in2 || !out)
    {
        std::cerr &lt;&lt; "Invalid file name";
    }
    ItIn itIn1(in1);
    ItIn itIn2(in2);
    ItOut itOut(out);
    ItIn end;
    std::transform(itIn1, end, itIn2, itOut,
                   [](char a, char b) -&gt; char {return (char)(((a - '0') ^ (b - '0')) + '0'); });
}
int main()
{

    string first = "first_arg.txt";
    string second = "second_arg.txt";
    string out = "output.txt";
    xor2files(first, second, out);
}
</code></pre>
    </div>