<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sadly, yes. If you want users of your library to write <code>intArrayOf(1, 2, 3).extendEntries(5)</code> then this is how it is done in Kotlin.</p>

<p>In fact, the Kotlin source code contains methods similar to it, with a specific function for each type of array: (<code>kotlin.collections._Arrays.kt</code>)</p>

<pre><code>/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public inline fun &lt;R&gt; ShortArray.flatMap(transform: (Short) -&gt; Iterable&lt;R&gt;): List&lt;R&gt; {
    return flatMapTo(ArrayList&lt;R&gt;(), transform)
}

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public inline fun &lt;R&gt; IntArray.flatMap(transform: (Int) -&gt; Iterable&lt;R&gt;): List&lt;R&gt; {
    return flatMapTo(ArrayList&lt;R&gt;(), transform)
}

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public inline fun &lt;R&gt; LongArray.flatMap(transform: (Long) -&gt; Iterable&lt;R&gt;): List&lt;R&gt; {
    return flatMapTo(ArrayList&lt;R&gt;(), transform)
}
</code></pre>

<p>However, Kotlin uses a generator to generate such files, see the README at <a href="https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib" rel="nofollow noreferrer">https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib</a></p>

<p>In your case, you might consider just implementing <code>Iterable&lt;T&gt;.extendEntries</code> as all of these specific types of arrays can be transformed to an <code>Iterable&lt;T&gt;</code> using the Kotlin stdlib <code>.asIterable</code> function.</p>
    </div>