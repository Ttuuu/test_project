<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Enable compiler warnings and fix all of them</h1>
<p>Trying to compile your code results in several warnings from the compiler (I'm using GCC 10.2 with <code>-Wall -W -pedantic -std=c++17</code>). In particular:</p>
<ul>
<li>Narrowing conversion from <code>double</code> to <code>float</code> due to the use of <code>sqrt()</code> in <code>CircleVsStandardLine()</code>. You should use <a href="https://en.cppreference.com/w/cpp/numeric/math/sqrt" rel="nofollow noreferrer"><code>std::sqrt()</code></a> here, which is the C++ version of C's <a href="https://en.cppreference.com/w/c/numeric/math/sqrt" rel="nofollow noreferrer"><code>sqrt()</code></a> which automatically returns the right precision depending on the argument.</li>
<li>Comparison between signed and unsigned integers. This is mainly when declaring <code>int i</code> as an array index. I recommend using <code>size_t</code> for array indices where possible.</li>
</ul>
<h1>Avoid using lots of different names for functions that do the same thing</h1>
<p>You have created separate types for lines, rays and segments. This is quite nice, because even if they are all defined by two points and behave very similarly, it avoids errors where you accidentily treat a segment as a line or vice versa.</p>
<p>However, you missed a big opportunity. You wrote lots of functions with names like <code>LineVsLine()</code>, <code>LineVsSegment()</code>, when you could have written overloads of a function named <code>Intersection()</code>:</p>
<pre><code>inline Point Intersection(const Line &amp;l1, const Line &amp;l2) {...}
inline Points Intersection(const Line &amp;l, const Segment &amp;s) {...}
...
inline Points Intersection(const RectAABB &amp;r1, const RectAABB &amp;r2) {...}
</code></pre>
<p>The advantage of the above is that you no longer have to remember the name of the function when you want to get the intersection of two objects, you just write <code>auto result = Intersection(object1, object2)</code>. This represents the programmer's intent much better. Let the compiler worry about the types.</p>
<h1>Make use of value initialization</h1>
<p>I noticed the following lines:</p>
<pre><code>const Segment NULL_SEG = { {0.0f, 0.0f}, {0.0f, 0.0f} };
Points SegmentIntersections(Points intersections, const Segment&amp; seg1, const Segment&amp; seg2 = NULL_SEG)
{
    ...
</code></pre>
<p>First, you don't need to explicitly initialize all members of <code>NULL_SEG</code>, you can write the following which will perform <a href="https://en.cppreference.com/w/cpp/language/value_initialization" rel="nofollow noreferrer">value initialization</a>, and will effectively set all members to zero in this case:</p>
<pre><code>const Segment NULL_SEG = {};
</code></pre>
<p>But, if you can just write <code>{}</code>, there is no reason any more to abbreviate this to a constant named <code>NULL_SEG</code>. Instead you can do this:</p>
<pre><code>Points SegmentIntersections(Points intersections, const Segment&amp; seg1, const Segment&amp; seg2 = {})
{
    ...
</code></pre>
<p>If you call <code>SegmentIntersections()</code> without specifying <code>seg2</code>, it will create a temporary <code>Segment</code> which is value-initialized. To be able to completely get rid of <code>NULL_SEG</code>, you have to replace:</p>
<pre><code>if (seg2 == NULL_SEG)
</code></pre>
<p>with:</p>
<pre><code>if (seg2 == Segment{})
</code></pre>
<h1>Use member functions where appropriate</h1>
<p>There are several out-of-class functions that might be better as a class member function. For example, consider making <code>PointInCircle()</code> a member function of <code>Circle</code>:</p>
<pre><code>struct Circle
{
    olc::vf2d pos;
    float radius;

    bool Contains(const Point &amp;p) const
    {
        return (c.pos - p).mag() &lt; c.radius;
    }
};
</code></pre>
<p>And <code>GetStandardForm()</code> might be written as a member function of <code>Line</code>.</p>
    </div>