<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Indentation</p>

<p>Your indentation is not consistent. This makes the code hard to read and maintain. It should be fixed so you don't give other people headaches.</p>

<pre><code>    if(left &lt; right){
    while(l &lt; nums1.size() &amp;&amp; nums1[l] == left )l++;
    }else while( r &lt; nums2.size()  &amp;&amp; nums2[r] == right )r++;
</code></pre>

<p>That is basically unreadable giberish (opinion of Martin).</p></li>
<li><p>Using namespace <code>std;</code> is super bad</p>

<p>This is mention in nearly every C++ review. There is a large article on the subject here: <em><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std” considered bad practice?</a></em>. The second answer is the best in my opinion (Martin) <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice/1453605#1453605">see</a></p></li>
<li><p>Multiple declarations in one is bad (thanks to terrible syntax binding rules)</p>

<p>The one declaration per line has been written about adnausium in best practice guides. Please for the sake of your reader declare one variable per line with its own exact type.</p>

<p>The syntax binding rules alluded to above is:</p>

<pre><code>int* x, y;   // Here x is int* and y in int
             // confusing to a reader. Did you really mean to make y an int?
             // Avoid this problem be declaring one variable per line
</code></pre></li>
<li><p>Typically, functions like this would be based on iterators to work on any container</p>

<p>Here your code is limited to only using vectors. But the algorithm you are using could be used by any container type with only small modifications. As a result your function could provide much more utility being written to use iterators.</p>

<p>The standard library was written such that iterators are the glue between algorithms and container.</p></li>
<li><p>It would be a lot simpler, if not necessarily more efficient at runtime, to just use some hash sets.</p></li>
<li>This function could be generic in T rather than assuming <code>int</code>.</li>
<li>The repeated conditions make me feel like there's simplification waiting here, although exactly what that is eludes me in the two minutes I'm spending on this.</li>
<li>Should take by <code>const</code> ref, not ref, so that you can operate on temporaries.</li>
</ul>
    </div>