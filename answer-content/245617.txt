<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice project, if you'll publish the full game online I'll check it out.</p>
<p>These are my suggestions:</p>
<h1>Polymorphism</h1>
<p>The class <code>Tile</code> can be of type Enemy, Empty, Trap or Chest. Instead of passing a <code>TileType</code> is better to create a subclass for each type. It's easier to extend it in the future and more readable.</p>
<h1>Verbose constructor</h1>
<p>The constructor of the <code>Tile</code> contains many parameters.</p>
<pre class="lang-java prettyprint-override"><code>public Tile(int x, int y, TileType type, boolean up, boolean down, boolean left, boolean right) { 
    this.type = type; 
    this.up = up; 
    this.down = down; 
    this.left = left; 
    this.right = right; 
    this.x = x; 
    this.y = y; 
}
</code></pre>
<p>You can create another constructor with a <code>boolean</code> array for the sides (up, down, etc.) and initialize them to false by default.</p>
<pre class="lang-java prettyprint-override"><code>public Tile(int x, int y) {
    this.x=x;
    this.y=y;
    // all sides are set to false by default
    this.sides=new boolean[4];
}
</code></pre>
<p>The type of the <code>Tile</code> is determined by the subclass:</p>
<pre class="lang-java prettyprint-override"><code>public class EmptyTile extends Tile{
    
    public EmptyTile(int x, int y) {
        super(x, y);
    }
//...
}
</code></pre>
<h1>Immutability</h1>
<p>As @forsvarir noticed, some fields never change after the object construction and they should be set to <code>final</code>. For example the coordinates x and y of the Tile.</p>
<h1>Performances</h1>
<p>Again as pointed out by @forsvarir, iterating through the tiles every time has its cost, which is dependent on the number of tiles. Using a <code>Map</code> you can access the tiles in constant time.</p>
<h1>Comments</h1>
<p>There are some comments next to the code, which makes some line of code really long. Keep the comments on top of the code.</p>
<h1>Dungeon creation algorithm</h1>
<p>Yes, there are a lot of if-and-else, it took me some time to understand it. But it can be reduced with some adjustments:</p>
<ul>
<li>Use an array for the sides. So that you can use a loop instead of 4 conditions like <code>s.hasUp()</code>, <code>s.hasDown()</code>, etc.</li>
<li>The top level <code>if(depth &gt;= 1)</code> and <code>else if(depth==0)</code> differ only in not calling the function recursively, so they can be merged into one.</li>
</ul>
<hr>
<p>This is the code refactored:</p>
<pre class="lang-java prettyprint-override"><code>public abstract class Tile {
    private final int x, y;
    private boolean[] sides;
    protected double weight;
    
    public Tile(int x, int y) {
        this.x=x;
        this.y=y;
        // all sides are set to false by default
        this.sides=new boolean[4];
    }
    
    public abstract double calculateWeight(int depth);
    
    public void openSide(Direction direction) {
        this.sides[direction.getValue()]=true;
    }
    
    public boolean hasAtLeastOneDoor() {
        return hasDown() || hasUp() || hasRight() || hasLeft();
    }
    
    public boolean hasDoorOn(Direction direction) {
        return this.sides[direction.getValue()];
    }

    public boolean hasUp() {
        return this.sides[Direction.UP.getValue()];
    }
    
    public void setSides(boolean[] sides) {
        this.sides = sides;
    }
    
    public boolean hasDown() {
        return this.sides[Direction.DOWN.getValue()];
    }

    public boolean hasLeft() {
        return this.sides[Direction.LEFT.getValue()];
    }

    public boolean hasRight() {
        return this.sides[Direction.RIGHT.getValue()];
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public double getWeight() {
        return this.weight;
    }

    public boolean[] getSides() {
        return this.sides;
    }
    
    abstract String getType();

    @Override
    public String toString() {
        return "x: "+ getX() + " y: " + getY() + " type: "+ getType() + " top door: " + hasUp() + " bottom door: " + hasDown() + " left door: " + hasLeft() + " right door: " + hasRight() + " weight: "+ this.weight;
    }
}
</code></pre>
<p>The class <code>EmptyTile</code>:</p>
<pre class="lang-java prettyprint-override"><code>public class EmptyTile extends Tile{
    
    public EmptyTile(int x, int y) {
        super(x, y);
    }
    
    public EmptyTile(int x, int y, int depth) {
        super(x, y);
        this.weight=calculateWeight(depth);
    }
    
    @Override
    public double calculateWeight(int depth) {
        return -0.01 * depth*depth + 0.6 &gt;= 0.25 ? -0.01 * depth*depth + 0.6 : 0.25;
    }

    @Override
    String getType() {
        return "Empty";
    }
}
</code></pre>
<p>The class <code>TrapTile</code>:</p>
<pre class="lang-java prettyprint-override"><code>public class TrapTile extends Tile{
    
    public TrapTile(int x, int y) {
        super(x, y);
    }

    public TrapTile(int x, int y, int depth) {
        super(x, y);
        this.weight=calculateWeight(depth);
    }
    
    @Override
    public double calculateWeight(int depth) {
        return 0.1 * Math.log10(depth) &lt;= 0.1 ? 0.1 * Math.log10(depth)  : 0.1;
    }

    @Override
    String getType() {
        return "Trap";
    }
}
</code></pre>
<p>I am not including the other two <code>EnemyTile</code> and <code>ChestTile</code> because they are similar.</p>
<p>The class <code>Direction</code>:</p>
<pre class="lang-java prettyprint-override"><code>public enum Direction {
    UP(0),
    RIGHT(1),
    DOWN(2),
    LEFT(3);
    
    private int value;
    
    Direction(int value){
        this.value=value;
    }
    
    public int getValue() {
        return this.value;
    }
    
    public static Direction of(int value) {
        return Stream.of(Direction.values())
                .filter(v -&gt; v.getValue()==value)
                .findFirst().orElse(null);
    }
    
    public static Direction oppositeOf(Direction direction) {
        if(direction.equals(Direction.UP)) {
            return Direction.DOWN;
        }else if(direction.equals(Direction.DOWN)){
            return Direction.UP;
        }else if(direction.equals(Direction.RIGHT)) {
            return Direction.LEFT;
        }else return Direction.RIGHT;
    }
}
</code></pre>
<p>And finally the class <code>Dungeon</code>:</p>
<pre class="lang-java prettyprint-override"><code>public class Dungeon {
    private int depth;
    private Map&lt;String,Tile&gt; tiles = new HashMap&lt;&gt;();
    private Random rand;
    
    public Dungeon(int depth) {
        this.depth=depth;
        rand = new Random();
        generateDungeon(depth);
    }
    /**
     * initialize starting tile
     * @param depth 
     */
    public void generateDungeon(int depth) {
        Tile firstTile = new EmptyTile(0,0);
        setRandomSides(firstTile);

        while(!firstTile.hasAtLeastOneDoor()) {
            setRandomSides(firstTile);
        }
        addTile(firstTile);
        generateDungeon(depth-1, firstTile);
    }
    /**
     * create next tile originating from last tile
     * @param depth
     * @param tile
     */
    private void generateDungeon(int depth, Tile tile) {
        if(depth &gt;= 0) {
            // for every side
            for(int i=0; i&lt;4 ;i++) {
                Direction direction = Direction.of(i);
                if(tile.hasDoorOn(direction)) {
                    // get next tile location
                    int nextX = nextXTo(tile.getX(),direction);
                    int nextY = nextYTo(tile.getY(),direction);
                    // if it already exists, connect it to starting tile
                    if(tileExists(nextX, nextY)) {
                        getTile(nextX, nextY).openSide(Direction.oppositeOf(direction));
                    }
                    else {
                        // create a random tile
                        Tile temp = getRandomTile(nextX, nextY, depth);
                        // if last tile then open side to the previous and add to tiles
                        if(depth==0) {
                            temp.openSide(Direction.oppositeOf(direction));
                            addTile(temp);
                        }
                        else {
                            setRandomSides(temp);
                            temp.openSide(Direction.oppositeOf(direction));
                            addTile(temp);
                            generateDungeon(depth-1,temp);
                        }
                    }
                }
            }
        } 
    }
    
    private int nextYTo(int y, Direction direction) {
        if(direction == Direction.UP) {
            y++;
        }else if(direction == Direction.DOWN) {
            y--;
        }
        return y;
    }
    private int nextXTo(int x, Direction direction) {
        if(direction == Direction.RIGHT) {
            x++;
        }else if(direction == Direction.LEFT) {
            x--;
        }
        return x;
    }
    
    public Tile getRandomTile(int x, int y, int depth) {
        Tile empty = new EmptyTile(x,y,depth);
        Tile enemy = new EnemyTile(x,y,depth);
        Tile trap = new TrapTile(x,y,depth);
        Tile chest = new ChestTile(x,y,depth);
        
        Tile[] tiles = {empty, enemy, trap, chest};
        double totalWeight = 0.0d;
        for (Tile i : tiles)
        {
            totalWeight += i.getWeight();
        }
        
        int randomIndex = -1;
        double random = Math.random() * totalWeight;
        for (int i = 0; i &lt; tiles.length; ++i)
        {
            random -= tiles[i].getWeight();
            if (random &lt;= 0.0d)
            {
                randomIndex = i;
                break;
            }
        }
        return tiles[randomIndex];
    }
    
    private void addTile(Tile tile) {
        String key=tile.getX()+","+tile.getY();
        tiles.put(key, tile);
    }
    
    private void setRandomSides(Tile tile) {
        boolean[] arr = new boolean[] {rand.nextBoolean(),rand.nextBoolean(),rand.nextBoolean(),rand.nextBoolean()};
        tile.setSides(arr);
    }

    public int getDepth() {
        return depth;
    }

    public Tile getTile(int x, int y) {
        String key=x+","+y;
        return tiles.getOrDefault(key, new EmptyTile(0,0));
    }
    
    public boolean tileExists(int x, int y) {
        String key=x+","+y;
        return tiles.containsKey(key);
    }
    public void drawDungeon() {
        tiles.forEach((k, v)-&gt; System.out.println(v));
    }
}
</code></pre>
<p>Refactoring algorithms is tricky, better to have at least a test to don't introduce bugs:</p>
<pre class="lang-java prettyprint-override"><code>@Test
public void myTest() {
    int depth = 5;
    Dungeon d = new Dungeon(depth);
    d.drawDungeon();
    for(int x=-depth; x &lt; depth+1; x++) {
        for(int y=-depth;y &lt; depth+1; y++) {
            if(d.tileExists(x, y)) {
                Tile t = d.getTile(x, y);
                if(t.hasDoorOn(Direction.UP)) {
                    assertTrue(d.getTile(x, y+1).hasDoorOn(Direction.DOWN));
                }else if(t.hasDoorOn(Direction.DOWN)) {
                    assertTrue(d.getTile(x, y-1).hasDoorOn(Direction.UP));
                }else if(t.hasDoorOn(Direction.RIGHT)) {
                    assertTrue(d.getTile(x+1, y).hasDoorOn(Direction.LEFT));
                }else if(t.hasDoorOn(Direction.LEFT)) {
                    assertTrue(d.getTile(x-1, y).hasDoorOn(Direction.RIGHT));
                }
            };
        }
    }
}
</code></pre>
    </div>