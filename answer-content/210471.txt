<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>what you guys think about my code?</p>
</blockquote>

<p>Well, because review content is to be positioned in the "answer" section, I'll add my supplemental thoughts to YCS's commented recommendations to obey the StackExchange design and give you an opportunity to mark this page as resolved if you wish.</p>

<ol>
<li>I don't see any use for <code>$slug = '';</code>.  If there is no <code>$_POST['create']</code>, I assume your script doesn't do much at all.</li>
<li>You don't need the case-insensitive pattern modifier on your hyphen substituting process because your are already calling <code>strtolower()</code> on the input.  The pattern could be condensed to <code>/[^a-z\d]+/</code></li>
<li>The first query looks good and tight.</li>
<li><p>I don't see the need to declare unused variables:</p>

<pre><code>$total_row = $statement-&gt;rowCount();  
$result = $statement-&gt;fetchAll();
</code></pre></li>
<li><p>Your unique slug generating loop looks good and tight.</p></li>
<li>I would like to question your <code>table_tudo</code> structure.

<ul>
<li>If <code>title</code> and <code>itemName</code> can, in the future, contain different values then it is sensible to design two different columns, otherwise avoid the the table bloat and just use one column to store the <code>title</code> value.</li>
<li>If <code>datePublished</code> and <code>dateModified</code> are truly controlled by your users, then it is okay to feed the user's input to these columns, if not I don't see why you shouldn't declare <code>CURRENT_TIMESTAMP</code> as the <code>DEFAULT</code> value in the table schema and avoid writing it in the INSERT query.</li>
<li>I don't see the need to re-store <code>itemName</code> and <code>epNum</code> in the <code>descricao</code> column.  If in the future, you wish to modify the <code>- Tipo</code> part, then you will have to do a giant string replacement task on your database.  Conversely, if you only save the raw <code>$_POST['descricao']</code> value in the column, you can access the other two columns and perform the concatenation during output only and have full control on how the data is displayed.  Basically, I'm advising that you avoid the bloat and potential complication of concatenated data storage.</li>
<li>The same point again regarding the <code>alt</code> column.  In fact, <code>alt</code> can be removed as a column entirely because all pieces of data are already stored in other columns.</li>
<li>If <code>tipo</code> and <code>entry_type</code> are always <code>ep</code> and <code>item</code> respectively, declare them as the DEFAULT value for these columns in the schema.</li>
<li>With <code>slug_url</code>, again, I don't endorse the storage of static data in tables.  The <code>epNum</code> value is stored elsewhere, and you can very easily hardcode the beginning of the url in your php when it is time to display.  I recommend renaming the column to <code>clean_slug</code> or something and just store the raw hyphen-substituted value alone.</li>
</ul></li>
<li>I would recommend that <code>$status</code> be written a little further down the script to keep it close to its usage. You might even prefer not to issue a placeholder for it and just write it directly into your prepared statement. However, as I mentioned before, you might best just declare the DEFAULT value in your table schema.</li>
<li>Omit the <code>$resultRow</code> declaration and check as they are not necessary as pointed out by YCS.</li>
<li>As recommended by YCS, move your <code>prepare()</code> line above your <code>foreach()</code> line, because it only needs to be called once and can be used over and over.</li>
</ol>

<p>We don't know if you are using <code>INNODB</code> or <code>MYISAM</code>, but this may be of interest to you: <a href="https://dba.stackexchange.com/q/16395/157408">https://dba.stackexchange.com/q/16395/157408</a></p>

<p>YourCommonSense's website also has a clean snippet for iterating prepared INSERT queries inside of a transaction which is certainly worth a look.  <a href="https://phpdelusions.net/pdo_examples/insert#multiple" rel="nofollow noreferrer">https://phpdelusions.net/pdo_examples/insert#multiple</a></p>

<p>I have read a few pages on StackOverflow and DBAStackExchange about the potential benefits of performing batched inserts in an effort to reduce total trips to the database, but I didn't find a definitive resource to link to and I'll not venture to post firm any advice.  I think if there is any benefit there is a sweet spot around 5000 rows due to autolocking, but again I'm not going to expose myself to any critique on this subject.</p>

<p>Finally, if your notification system only need to know if a user should be notified or not (the necessary data is binary) and the alert is only pushed once, then perhaps a rethink of how the alert data is stored is in order.  If you don't need to perform any meaningful queries on the <code>noti</code> data, then perhaps you could be happy with INSERTing a single row with <code>epNum</code> and <code>itemName</code> which is connected to a csv or json string of <code>user_id</code> values.  Do you <em>actually need</em> to track the read status on millions of rows?  Maybe your notification system could be just as happy chewing on a file that contains csv or json data.  There are always trade offs to sacrificing normalized table structure for performance, but you may need to improve the user experience for this script and experience slight lag somewhere else that the user doesn't experience it at all.  (sorry that this part is rather vague)</p>
    </div>