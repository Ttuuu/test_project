<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code makes me think that you don't understand what exactly you want to model.</p>

<pre class="lang-cpp prettyprint-override"><code>explicit StellarObject(
  vector_t pos = vector_t(0,0,0),       //Position of the sun relative to itself
  vector_t speed = vector_t(0,0,0),     //Velocity of the sun relative to itself
  mass_t const&amp; mass = 1.00000597682,   //Mass of the Sun [kg]
  name_t const&amp; name = "Sun"
)
</code></pre>

<p>When creating a (model of a) stellar object, there is absolutely nothing that should be related to the sun. The sun is just a random star and has no relation to any of the fundamental <a href="https://en.wikipedia.org/wiki/Physical_constant" rel="noreferrer">physical constants</a>.</p>

<p>The comments to the right reference the sun though, which makes the whole code look wrong. I very much doubt that the sun's mass is a single kilogram.<sup>[citation needed]</sup></p>

<p>It is wrong to provide default values for any of the parameters of this constructor since it doesn't make sense to have 5 objects with the same name or the same position or the same mass, that's just not a realistic scenario. The caller of this constructor must be forced to think about all these values explicitly.</p>

<pre class="lang-cpp prettyprint-override"><code>G = 2.95912208286e-4;
</code></pre>

<p>This is a magic number. The symbol <code>G</code> usually stands for the <a href="https://en.wikipedia.org/wiki/Gravitational_constant" rel="noreferrer">gravitational constant</a>, whose value is approximately <span class="math-container">\$ 6.67430\cdot10^{-11} \frac{\text{m}^3}{\text{kg} \cdot \text{s}^2}\$</span>. Your value of <span class="math-container">\$2.9\cdot10^{-4}\$</span> is nowhere near that value, therefore you must document where you got that number from and what its dimension is. In physical simulations, it's important to carry the dimensions around in the calculations to prevent typos and other mistakes. For example it doesn't make sense to add seconds to meters and divide by Amp√®re.</p>

<p>Always use the <a href="https://en.wikipedia.org/wiki/International_System_of_Units" rel="noreferrer">Internation System of Units</a>, don't accept any other measurement units unless you document exactly why you have to use different units and how you did the conversion.</p>

<pre class="lang-cpp prettyprint-override"><code>vector_t tmp;    //tmp object to store ddx
</code></pre>

<p>The variable name <code>tmp</code> is terrible, it should be forbidden. You should have named it <code>next_ddx</code>, since it collects the positions after the next simulation step. This naming scheme would also suggest a better name for <code>vector_t qk</code> and <code>q</code>. To avoid confusion, these should be called <code>next_pk</code> and <code>next_p</code>. Sure, the names are a bit longer, but the name <code>q</code> does not really tell (me) much, except that it is the letter following p in several Latin alphabets. If that's a well-known naming convention among physicists, it's ok if the code is ever only read by physicists.</p>

<pre class="lang-cpp prettyprint-override"><code>double normq = std::pow(norm(diff),3);
tmp += masses[i]/normq * diff;
</code></pre>

<p>It's confusing to see a division by <span class="math-container">\$r^3\$</span> when I only expect a division by <span class="math-container">\$r^2\$</span>. The code would be easier to understand if you just divided by <span class="math-container">\$r^2\$</span> first and did the direction calculations afterwards and independently. The code is easy to understand if the commonly known formulas like <span class="math-container">\$F = \text{G} \cdot \frac{m_1 \cdot m_2}{r^2}\$</span> appear exactly in this form. Every deviation from this makes the code more difficult to read and to verify.</p>

<p>I did not analyze the rest of the code in detail. I saw many helpful comments that explained the short variable names, which is good for understanding the code. I also saw many questionable comments that contradicted the code, and these are bad. You should probably <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging" rel="noreferrer">read the code aloud to someone else</a> and while doing that, listen to your words to see whether they make sense. If they don't, the code is wrong. Or the model of the world you are building. Either way, something needs to be fixed in these cases.</p>
    </div>