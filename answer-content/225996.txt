<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Never ever recurse into <code>main</code>. You may get away with it in C; in C++ it would <strike>surely wake dragons</strike> <a href="https://stackoverflow.com/a/2128727/3403834">cause undefined behavior</a>. Use loops.</p></li>
<li><p>There is no need to validate input separately.</p>

<pre><code>    if (input == 1) {
        ....
    } else if (input == 2) {
        ....
    } else if (input == 3) {
        ....
    } else {
        std::cout &lt;&lt; "Invalid input\n";
    }
</code></pre>

<p>is sufficient. As a side note, instead of cascading <code>if</code>s, consider a <code>switch</code> statement.</p></li>
<li><p>Avoid magic numbers. Define few symbolic constants, e.g.</p>

<pre><code>static const int Register = 1;
// etc
</code></pre>

<p>and use them.</p></li>
<li><p>DRY.</p>

<p>First of all, <code>system("clear")</code> is called in all branches. Call it once. As a side note, avoid calling it at all. It may not be present in a target system.</p>

<p>Second, the repeated code such as</p>

<pre><code>    ofstream file;
    file.open(user + ".txt");
    file &lt;&lt; user &lt;&lt; endl &lt;&lt; pass;
    file.close();
</code></pre>

<p>shall be factored into a function.</p></li>
<li><p><code>does_file_exist</code> does not have a right to exist. It introduces a time-to-check/time-to-use race condition. Just open a file and see if it opened successfully. For example,</p>

<pre><code>    ofstream file(user + ".txt");
    if (file) {
        proceed();
    } else {
        report_error();
    }
</code></pre>

<p>As a side note,</p>

<pre><code>    if (!filename) {
        return false;
    } else {
        return true;
    }
</code></pre>

<p>is a very long way to say</p>

<pre><code>    return filename;
</code></pre>

<p>Ditto for <code>IsLoggedIn</code>.</p></li>
<li><p>Be consistent with the return values. Some of the branches do return, some does not. As yet another side note, traditionally returning 0 means success.</p></li>
</ul>
    </div>