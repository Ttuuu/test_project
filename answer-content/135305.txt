<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few things that seem like they might be open to improvement.</p>

<h3>Evolution</h3>

<p>Rather than having a Boolean to indicate whether a particular type is the final step in its evolution, I think I'd have an "evolvesTo" field to give the <code>dexNum</code> of the type to which this evolves, and (probably) use a special value such as <code>-1</code> to indicate that it doesn't evolve into anything else. I'd probably also add a similar field for "evolvesFrom". At least in my opinion, encoding the information directly is much cleaner than depending on the order of records.</p>

<h3>Database</h3>

<p>Rather than having all that raw data embedded into the program, I'd at least consider moving it into an external file, which you'd then read in when you start the program. Doesn't have to be anything complex or special--for example, I'd consider something like one Pokemon per line, with a tab between each field.</p>

<h3>Constructor</h3>

<p>It's generally preferable to initialize members with a member initializer list rather than assign to them in the body of a constructor. When you do this, the compiler can sort out which is the parameter and which is the member, so you don't need to add a <code>2</code> to each parameter name to keep them straight:</p>

<pre><code>Pokemon::Pokemon(std::string name, std::string type, double weight,  double height, std::string Gender, int evoLevel, bool finalEvo, int dexNum) 
    : name(name),
      type(type),
      weight(weight),
      height(height),
      Gender(Gender),
      evoLevel(evoLevel),
      finalEvo(finalEvo),
      dexNum(dexNum),
{}
</code></pre>

<h3>Searching</h3>

<p>You have quite a few instances of searching through your database to find Pokemon based on various attributes. Nearly all these can be implemented with <code>std::find_if</code> to do the actual searching.</p>

<pre><code>auto p = std::find_if(pokemon.begin(), pokemon.end(),
    [&amp;](int dexNum) { return dexNum == input; });

if (p == pokemon.end())
    std::cout &lt;&lt; "Sorry, I can't find that Pokemon.\n";
else {
    std::cout &lt;&lt; "The Pokemon: " &lt;&lt; p-&gt;name &lt;&lt; " has been found.\n";
    std::cout &lt;&lt; p-&gt;name &lt;&lt; " is a " &lt;&lt; p-&gt;type &lt;&lt; " type Pokemon\n";
    // ...
}
</code></pre>

<p>If you were dealing with a lot more data (tens of thousands or tens of millions of items) there are more efficient ways of searching data, such as building an index for each field you want to search by. If you want to experiment with one implementation of this, the Boost <a href="http://www.boost.org/doc/libs/1_61_0/libs/multi_index/doc/index.html">Multi Index</a> library provides this type of functionality.</p>

<p>On the other hand, if you have to deal with that amount of data, you probably want to use some sort of database anyway (e.g., <a href="https://www.sqlite.org/">SQLite</a>).</p>
    </div>