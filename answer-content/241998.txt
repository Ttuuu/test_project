<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since this site is not so much focused on clever solutions and algorithms but on code quality I'd like to give some comments on this.</p>

<blockquote>
  <p><strong>Disclaimer</strong> this is <em>my personal view</em> and it might differ from what others may think.
  Never the less this would be <em>my criteria</em> if I'd be the interviewer. 
  I'm also aware that some of my thoughts are easy to make when sitting on my couch having plenty of time.</p>
</blockquote>

<h1>Naming</h1>

<p>I'm aware that an interview situation is quite stressing, but there are some basic rules violated in your code, that even a stress situation cannot excuse:</p>

<h2>Conventions</h2>

<ul>
<li>Class names start <em>upper case</em>, so should your inner class <code>visitor</code> </li>
<li>Class names are <em>singular form</em>, so should your class <code>Dors</code></li>
</ul>

<p>For me this would be a major issue, worse then not finishing the task...</p>

<p>Similar is with the names of the input arrays. Since they are some kind of <em>collection</em> their names should have a <em>plural 's'</em>. 
I assume that this names where given my the interviewer, but I for myself would have renamed them even then.</p>

<h2>Avoid technical name parts</h2>

<p>What if you change your mind an <code>visitorMap</code> becomes some other kind of collection?</p>

<p>You might argue that this will not happen in an interview task, but the interviewer wants to find out how you usually code. Omitting good code criteria under pressure is not a benefit here.</p>

<h2>Choose names from the problem domain</h2>

<p>You have some variables with randomly picked names (<code>obj</code>, <code>myMap</code>, <code>myList</code>). 
This is a special case from the previous point and would show that you, when under pressure, create code that needs lots of refactoring afterwards. </p>

<h1>Know the standard lib</h1>

<p>When you initialize the map you use a rather complex <code>if/else</code> construct. But the <code>computeIfAbsent()</code> method was introduced long time ago with java-8, so that it should be known by any Java developer. </p>

<pre><code>for (int i = 0; i &lt; time.length; i++) {
    myMap.computeIfAbsent(time[i], HashMap::new)
         .computeIfAbsent(dir[i], ArrayList:new)
         .add(new Visitor(time[i], dir[i]));
}
</code></pre>

<h1>Separate <em>user interaction</em> from <em>processing</em></h1>

<p>Your code outputs results in between the processing. I'd rather expect <code>findTime()</code> to return a <code>List&lt;Visitors&gt;</code> that has the desired order and have that that print out in <code>main()</code>.</p>

<h1>Mighty method</h1>

<p>You do all the processing in a single method although is obviously consists of at least two blocks that your be extracted to separate private methods applying the <em>Single Responsibility Pattern</em></p>

<h1>Unnecessary special handling</h1>

<p>In your methods second part you handle the case of only <em>one person arrives</em> differently then the case <em>multiple persons arrive</em>. The first case would be implicitly handled correctly by the latter. </p>

<h1>Failed Requirements</h1>

<p>I think this wouldn't be "NoGos" but bonuses, if done correctly...</p>

<ul>
<li><p>Your code does not handle the case of </p>

<blockquote>
  <p>Also if no one uses the door, it reverts back to the starting ‘in’ position.</p>
</blockquote>

<p>You simple ignore the time gaps.</p></li>
<li><p>The code is not of <em>linear complexity</em></p>

<p>I believe this is a trick question since the requirements involves sorting which simply cannot be done in <em>linear complexity</em>.</p></li>
</ul>

<hr>

<p>Finally: if you'd be interviewed by me and not writing <em>unit tests</em> you wouldn't get a call from me anyway...</p>
    </div>