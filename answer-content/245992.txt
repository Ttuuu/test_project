<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code passes <code>rustfmt</code> and <code>clippy</code> â€” good job!</p>
<p>Here's my suggestions.</p>
<h1>Organization</h1>
<p>Move the functions out of <code>main</code>.  The local functions make <code>main</code>
unnecessarily long.  Having free functions instead clarifies the
semantics of the program, and reduces the indentation.</p>
<h1>Type usage</h1>
<p>In my understanding, the number of cards contained in a deck is always
a nonnegative integer, so it is probably better to use <code>u32</code> instead
of <code>f32</code> to store the card counts.  <code>u32</code> can be losslessly converted
to <code>f64</code> when doing floating point arithmetic.</p>
<h1>Error handling</h1>
<p>When the user input cannot be deciphered, the program panics with an
error message.  Failing to read a line is probably an irrecoverable
error, but for parse errors, a better alternative is to ask the user
to re-enter data, so that users don't have to repeat everything they
typed because of a typo.</p>
<h1>Deduplication</h1>
<p>This pattern occurs many times:</p>
<pre><code>let mut input = String::new();
println!("&lt;prompt&gt;");
io::stdin()
    .read_line(&amp;mut input)
    .expect("Failed to read input.");
let input = input
    .trim()
    .parse::&lt;f32&gt;()
    .expect("Please enter a valid number.");
</code></pre>
<p>We can make a dedicated function:</p>
<pre><code>fn input(prompt: &amp;str) -&gt; Result&lt;u32, std::num::ParseIntError&gt; {
    println!("{}", prompt);

    let mut input = String::new();
    io::stdin()
        .read_line(&amp;mut input)
        .expect("cannot read input");
    input.trim().parse()
}
</code></pre>
<p>Now, the functions that ask for input can be simplified:</p>
<pre><code>fn get_deck_size() -&gt; u32 {
    loop {
        match input("How many cards are in your deck?") {
            Ok(deck_size) if deck_size &gt;= 40 =&gt; return deck_size,
            Ok(_) =&gt; println!("The minimum number of cards in a deck is 40."),
            Err(_) =&gt; println!("Invalid number."),
        }
    }
}

fn get_spell_count(deck_size: u32) -&gt; u32 {
    loop {
        match input("How many spells are in your deck?") {
            Ok(spell_count) if spell_count &lt;= deck_size =&gt; return spell_count,
            Ok(_) =&gt; println!("You cannot have more spells than cards."),
            Err(_) =&gt; println!("Invalid number."),
        }
    }
}

fn get_total_cmc() -&gt; u32 {
    loop {
        match input("What's the total converted mana cost of all your spells?") {
            Ok(total_cmc) =&gt; return total_cmc,
            Err(_) =&gt; println!("Invalid number."),
        }
    }
}
</code></pre>
<p>Note that the <code>total_cmc &gt;= 0</code> check can be elided.</p>
<h1>Calculation</h1>
<p>Here's my version:</p>
<pre><code>const COLORS: [&amp;str; 6] = ["white", "blue", "green", "red", "black", "colorless"];

fn calculate_mana(deck_size: u32, spells: u32, total_cmc: u32) {
    let total_lands = deck_size - spells;

    println!("Now we need to get all the mana symbols throughout your deck (not just in the cmc, but in the cards abilities as well).");
    let symbol_counts = get_symbol_counts();

    println!(
        "Your average CMC is: {}",
        f64::from(total_cmc) / f64::from(deck_size)
    );
    println!("You should have {} total land", total_lands);

    // FIXME: rename to fit game nomenclature
    let land_percentage = f64::from(total_lands) / f64::from(spells);

    for (&amp;symbol_count, &amp;color) in symbol_counts.iter().zip(COLORS.iter()) {
        if symbol_count &gt; 0 {
            // FIXME: rename to fit game nomenclature
            let land_count = land_percentage * f64::from(symbol_count);
            println!("{} of those lands should be {}", land_count, color);
        }
    }
}
</code></pre>
<p>Changes I made:</p>
<ul>
<li><p>rename <code>i</code> to <code>color</code>;</p>
</li>
<li><p>rename <code>symbol_count</code> to <code>symbol_counts</code>, since it's a vector;</p>
</li>
<li><p>use <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.copied" rel="nofollow noreferrer"><code>.copied()</code></a>, so that the vector stores the colors directly,
rather than references to elements within the local array;</p>
</li>
<li><p>promotes <code>colors</code> to a global <code>const</code>;</p>
</li>
<li><p>use a separate function to read the data;</p>
</li>
<li><p>remove the <code>.0</code> and <code>.1</code>, and store colors only once;</p>
</li>
<li><p>use <a href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.with_capacity" rel="nofollow noreferrer"><code>Vec::with_capacity</code></a> to avoid unnecessary reallocations.</p>
</li>
</ul>
<p>I also reported the result as a floating point number, since they may
be helpful for, say, probabilistic analysis.  This is purely
subjective.</p>
<h1>Result</h1>
<p>Putting everything together:</p>
<pre><code>use std::io;

const COLORS: [&amp;str; 6] = ["white", "blue", "green", "red", "black", "colorless"];

fn main() {
    let deck_size = get_deck_size();
    let spells = get_spell_count(deck_size);
    let total_cmc = get_total_cmc();

    calculate_mana(deck_size, spells, total_cmc);
}

fn input(prompt: &amp;str) -&gt; Result&lt;u32, std::num::ParseIntError&gt; {
    println!("{}", prompt);

    let mut input = String::new();
    io::stdin()
        .read_line(&amp;mut input)
        .expect("cannot read input");
    input.trim().parse()
}

fn get_deck_size() -&gt; u32 {
    loop {
        match input("How many cards are in your deck?") {
            Ok(deck_size) if deck_size &gt;= 40 =&gt; return deck_size,
            Ok(_) =&gt; println!("The minimum number of cards in a deck is 40."),
            Err(_) =&gt; println!("Invalid number."),
        }
    }
}

fn get_spell_count(deck_size: u32) -&gt; u32 {
    loop {
        match input("How many spells are in your deck?") {
            Ok(spell_count) if spell_count &lt;= deck_size =&gt; return spell_count,
            Ok(_) =&gt; println!("You cannot have more spells than cards."),
            Err(_) =&gt; println!("Invalid number."),
        }
    }
}

fn get_total_cmc() -&gt; u32 {
    loop {
        match input("What's the total converted mana cost of all your spells?") {
            Ok(total_cmc) =&gt; return total_cmc,
            Err(_) =&gt; println!("Invalid number."),
        }
    }
}

fn get_symbol_counts() -&gt; Vec&lt;u32&gt; {
    let mut symbol_counts = Vec::with_capacity(COLORS.len());

    for color in COLORS.iter().copied() {
        let symbol_count = loop {
            // FIXME: could be written more clearly
            print!("How many {} symbols are in the deck?", color);
            match input("") {
                Ok(symbol_count) =&gt; break symbol_count,
                Err(_) =&gt; println!("Invalid number."),
            }
        };
        symbol_counts.push(symbol_count);
    }

    symbol_counts
}

fn calculate_mana(deck_size: u32, spells: u32, total_cmc: u32) {
    let total_lands = deck_size - spells;

    println!("Now we need to get all the mana symbols throughout your deck (not just in the cmc, but in the cards abilities as well).");
    let symbol_counts = get_symbol_counts();

    println!(
        "Your average CMC is: {}",
        f64::from(total_cmc) / f64::from(deck_size)
    );
    println!("You should have {} total land", total_lands);

    // FIXME: rename to fit game nomenclature
    let land_percentage = f64::from(total_lands) / f64::from(spells);

    for (&amp;symbol_count, &amp;color) in symbol_counts.iter().zip(COLORS.iter()) {
        if symbol_count &gt; 0 {
            // FIXME: rename to fit game nomenclature
            let land_count = land_percentage * f64::from(symbol_count);
            println!("{} of those lands should be {}", land_count, color);
        }
    }
}
</code></pre>
<p>(<a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=03c0e56ceaa603916896532865368376" rel="nofollow noreferrer">playground</a>)</p>
    </div>