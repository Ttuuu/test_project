<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer will focus on cleaning up the algorithm you used although, as other answers have shown, there are better algorithms for this problem. I will also answer how to loop over the infinite list of natural numbers with a generator. (Although I will refer to these as the counting numbers to clarify that I am not including 0.)</p>

<h1><a href="https://www.python.org/dev/peps/pep-0020/#id3" rel="noreferrer">"Flat is better than nested"</a></h1>

<p>An if statement that is checking a precondition for a function should avoid <code>else</code> because the else makes the entire function more deeply nested and adds little to the understandability when it is clear that the if statement is there to check if the provided arguments are valid.</p>

<h1>Misc</h1>

<p>I recommend returning <code>True</code> or <code>False</code> instead of printing so that you can reuse this function in later problems. As a slight benefit, returning a value also removes the need for <code>break</code>.</p>

<p>I also recommend using <code>from __future__ import print_function</code> so that you can be forwards compatible with Python3. Note that you will have to use parentheses with <code>print</code> and the new version below doesn't use print so this was left out of the code below.</p>

<h1>Generators</h1>

<p>Answering your question about how to loop over all the counting numbers, you could use a while loop or you could use generators. To show what your code might look like with a generator, see the following.</p>

<pre><code>def counting_numbers():
    i = 1
    while True:
        yield i
        i += 1


def check_power(N, k):
    # Note that you could include 0 if you're careful about it.
    if N &lt;= 0 or k &lt;= 0:
        raise ValueError("N and k should be greater than 0")
    # We need to catch 1 as a special case because 1 ** n = 1 for all n
    # and thus 1 ** n will never be greater than N causing an infinite loop
    if k == 1:  # If the power is one
        return N == 1  # Then N is a power only if it is 1

    for i in counting_numbers():
        x = k ** i
        if x == N :
            return True
        elif x &gt; N:
            return False
</code></pre>

<p>As you can see, you write what looks like a normal function and then use <code>yield</code> wherever you want to give a value to the for loop. The generator you are writing will yield control over to the loop whenever it hits a yield statement which is why this generator doesn't cause the program to seize up in an infinite loop. You can read more about generators in their original <a href="https://www.python.org/dev/peps/pep-0255/" rel="noreferrer">PEP 255</a> or in various online tutorials. Just know that they will stop upon hitting the end of their block like a function would or a <code>return</code> statement. (Sidenote: don't try using <code>return x</code> in a generator, this is related to sending a <code>StopIteration</code> and doesn't make the generator return a value like you might expect.)</p>

<p>In this case, we actually don't have to write <code>counting_numbers</code> because <a href="https://docs.python.org/2.7/library/itertools.html" rel="noreferrer"><code>itertools</code></a> already has this builtin as <a href="https://docs.python.org/2.7/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count</code></a> but because we want to start from 1 instead of 0 we will have to call <code>count(1)</code> instead of <code>count()</code> which would start from 0. We can now rewrite the above solution to</p>

<pre><code>from itertools import count


def check_power(N, k):
    if N &lt;= 0 or k &lt;= 0:
        raise ValueError("N and k should be greater than 0")
    # This special case is to avoid an infinite loop
    if k == 1:
        return N == 1

    for i in count(1):
        x = k ** i
        if x == N :
            return True
        elif x &gt; N:
            return False
</code></pre>
    </div>