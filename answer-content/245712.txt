<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks plausible. The two biggest pieces of advice I have for you are:</p>
<ul>
<li><p>Format your code consistently and idiomatically! One easy way to do this is to use the <code>clang-format</code> tool on it. A more tedious, but rewarding, way is to study other people's code and try to emulate their style. For example, you should instinctively write <code>vector&lt;T&gt;</code>, not <code>vector &lt;T&gt;</code>.</p>
</li>
<li><p>It sounds like you're not sure if your code behaves correctly. For that, you should use <strong>unit tests</strong>. Figure out what it would mean — what it would look like — for a small part of your code to "behave correctly," and then write a small test that verifies that what you expect is actually what happens. Repeat many times.</p>
</li>
</ul>
<hr>
<p>Stylistically: Don't do <code>using namespace std;</code>. Every C++ programmer will tell you this. (Why not? There are reasons, but honestly the best reason is because everyone agrees that you shouldn't.)</p>
<p>Forward-declaring <code>class Neuron;</code> above <code>struct connection</code> is strange because <code>connection</code> doesn't actually need to use <code>Neuron</code> for anything.</p>
<p><code>connection(int i)</code> defines an <em>implicit</em> constructor, such that the following line will compile and do an implicit conversion:</p>
<pre><code>connection conn = 42;
</code></pre>
<p>You don't want that. So mark this constructor <code>explicit</code>. (In fact, mark <em>all</em> constructors <code>explicit</code>, except for the two that you want to happen implicitly — that is, copy and move constructors. <em>Everything</em> else should be explicit.)</p>
<p><code>weight_val</code> and <code>weight_acc</code> look like they should be called <code>set_weight</code> and <code>add_weight</code>, respectively. Use noun phrases for things that are nouns (variables, types) and verb phrases for things that are verbs (functions). Also, avd unnec. abbr'n.</p>
<p>...Oooh! <code>weight_val</code> and <code>weight_acc</code> actually modify <em>different data members!</em> That was sneaky. Okay, from the formula in <code>move</code>, it looks like we've got a sort of an "alpha weight" and a "lambda weight"? I bet these have established names in the literature. So instead of <code>weight_val(x)</code> I would call it <code>set_lambda_weight(x)</code> (or whatever the established name is); instead of <code>weight_acc(x)</code> I would call it <code>add_alpha_weight(x)</code>; and instead of <code>reset</code> I would call it <code>set_alpha_weight(0)</code>.</p>
<p>Further down, you use <code>get_val()</code> and <code>set_val(x)</code> to get and set a member whose actual name is <code>a</code>. Pick one name for one concept! If its proper name is <code>a</code>, call the methods <code>get_a()</code> and <code>set_a(a)</code>. If its proper name is <code>val</code>, then name it <code>val</code>.</p>
<hr>
<pre><code>void done(double m){
    for(unsigned i=0;i&lt;n_layers.size();i++){
        for(unsigned j=0;j&lt;n_layers[i].size();j++){
            n_layers[i][j].update_weight(m,alpha,lambda);
        }
    }
}
</code></pre>
<p>Again, the name of this method doesn't seem to indicate anything about its purpose. <code>x.done()</code> sounds like we're asking if <code>x</code> is done — it doesn't sound like a mutator method. Seems to me that the function should be called <code>update_all_weights</code>.</p>
<p>The body of this function can be written simply as</p>
<pre><code>void update_all_weights(double m) {
    for (Layer&amp; layer : n_layers) {
        for (Neuron&amp; neuron : layer) {
            neuron.update_weight(m, alpha, lambda);
        }
    }
}
</code></pre>
<p>Notice that to distinguish the name of the <em>type</em> <code>Layer</code> from the name of the <em>variable</em> <code>layer</code>, I had to uppercase the former. You already uppercased <code>Neuron</code>, so uppercasing <code>Layer</code> should be a no-brainer.</p>
<hr>
<pre><code>weight=weight-alpha*a_weight/m-lambda*weight;
</code></pre>
<p>This formula is impossible to read without some whitespace. Look how much clearer this is:</p>
<pre><code>weight = weight - alpha*a_weight/m - lambda*weight;
</code></pre>
<p>And then we can rewrite it as:</p>
<pre><code>weight -= ((alpha/m) * a_weight) + (lambda * weight);
</code></pre>
<p>I might even split that up into two subtractions, if I knew I wasn't concerned about floating-point precision loss.</p>
<pre><code>weight -= (alpha/m) * a_weight;
weight -= lambda * weight;
</code></pre>
<hr>
<pre><code>double weight,a_weight;
</code></pre>
<p>clang-format will probably do this for you (I hope!), but please: one declaration per line!</p>
<pre><code>double weight;
double a_weight;
</code></pre>
<hr>
<p>That should be enough nitpicking to give you something to do.</p>
    </div>