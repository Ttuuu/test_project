<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice.</p>

<p>Alas I don't have enough time for a comprehensive review so I will not refactor your whole code. Instead I will just focus on a few points.</p>

<p>First of all, I would add a few <strong>constants</strong> (written as UPPERCASE) for more flexibility and to avoid <strong>repetition</strong>:</p>

<pre><code>ROOT_URL = r'https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/'
</code></pre>

<p>The path: <code>"E:\\Utilities_and_Apps\\Python\\MY PROJECTS\\Test data\Downloads\\"</code> appears multiple times in your code, this is unnecessary.
Add another constant:</p>

<pre><code>DOWNLOAD_PATH = "E:\\Utilities_and_Apps\\Python\\MY PROJECTS\\Test data\Downloads\"
</code></pre>

<hr>

<p>The DOM selection method could be improved because you use a mix of Selenium and regex:</p>

<pre><code>download_path = browser.find_element_by_css_selector("input").get_attribute("value")
current_file_name = re.search(r'https://coursevania.courses.workers.dev/\[coursevania.com\]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20\+%20Algorithms/.+/(.+)', download_path, re.DOTALL).group(1)
</code></pre>

<p>Parsing HTML with regex can quickly become a nightmare and is generally discouraged. Instead you can use a parsing library like Beautiful Soup. This is often done in conjunction with the <code>requests</code> module but since you are using Selenium here you can use the built-in functions available to you (notably the <code>find_elements_by_...</code> functions).</p>

<p>I advise you to break up the code in small functions to separate functionality, and make the code easier to maintain. For instance you could have one function that retrieves all the links of interest in a given page, and another function to fetch those URLs and download the files.</p>

<hr>

<p>Delays: Instead of setting arbitrary waits with <code>time.sleep</code> (that will either be too long or too short depending on the network conditions) you can use Selenium functions again (<code>WebDriverWait</code>), to determine when the page is 'loaded' or at least half-ready, for example by waiting for certain elements to appear. And if they do not appear or take too long (timeout), then there is no point proceeding with the rest of the code.</p>

<p>This can be tricky, and the criteria will vary from one site to another. Sometimes you spend more time looking for the right signals than on coding.
My own approach in this particular case is to wait until the progress bar disappears but YMMV (I have tried to wait until the list of courses is loaded but that didn't seem to work well). This is not perfect and probably can be improved.</p>

<p>See chapter: <a href="https://selenium-python.readthedocs.io/waits.html#explicit-waits" rel="nofollow noreferrer">5. Waits</a></p>

<p>So in this case I am waiting until the control with class name <code>.mdui-progress</code> becomes invisible. I have determined this by using the Firefox inspector (under menu Tools/Web Developer) and setting up some breakpoints to freeze the page while it is reloading. This is not so straightforward but it's a question of practice.</p>

<hr>

<p>Now for some code. I have used Selenium with Firefox on Linux so the code has been adapted to run on my platform. Please disregard the Firefox directives and use yours instead.<br>
I note that your are on Windows but the code should be OK.<br>
<strong>NB</strong>: I added a few imports and removed <code>re</code>.</p>

<hr>

<pre><code>import time
import os, sys
import shutil
from typing import (Dict, List)
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options as FirefoxOptions

# constants
ROOT_URL = r'https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/'
DOWNLOAD_PATH = "E:\\Utilities_and_Apps\\Python\\MY PROJECTS\\Test data\Downloads\\"

options = FirefoxOptions()
#options.add_argument("--headless")
options.add_argument("--private-window")
driver = webdriver.Firefox(options=options)


def get_links(driver: webdriver.firefox, xpath_selector: str) -&gt; List[Dict]:
    links = []
    elems = driver.find_elements_by_xpath(xpath_selector)
    for elem in elems:
        url = elem.get_attribute("href")
        class_name = elem.get_attribute("class")
        links.append({
            "url": url,
            "class_name": class_name
            })
    return links


# could return bool   
def wait_for_page_load():
    # borrowed code: https://stackoverflow.com/questions/26566799/wait-until-page-is-loaded-with-selenium-webdriver-for-python
    try:
        # wait for page to load
        print("Waiting for page load...")
        WebDriverWait(driver, 10).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, '.mdui-progress')))
        print("Page should now be ready, continue")
    except TimeoutException:
        print("Timed out/failed to load page")
        sys.exit()


# load the main page and wait
driver.get(ROOT_URL)
wait_for_page_load()
print(f'Links from {ROOT_URL}:')
links = get_links(driver=driver, xpath_selector="//li/a")
for link in links:
    url = link["url"]
    class_name = link["class_name"]
    print(f'Link: {url}: class name: {class_name}')
    if class_name.startswith('folder'):
        print('=&gt; Folder: to be crawled')
    if class_name.startswith('file'):
        print('=&gt; File: to be downloaded')
</code></pre>

<p>Details:</p>

<ul>
<li>The function <code>get_links</code> returns a <strong>list of dictionaries</strong>, for each link found I am returning the URL + the class name for the href tag: this is useful to differentiate between <strong>folders</strong> and <strong>files</strong>. Then all you have to do is enumerate the links and decide on whether to crawl further or download the file. The process should be made <strong>recursive</strong> et voil√†.</li>
<li>For more flexibility you can specify the xpath selector so as to reuse the function on other sites</li>
<li>The xpath selector here is simply to look for A tags embedded in LI tags.</li>
<li>The function <code>wait_for_page_load</code> waits for the progress bar to disappear, then I consider the page 'loaded' and ready to be inspected</li>
<li>I have not implemented a download function</li>
<li>I have attempted to use proper type hinting for the functions, but no docstrings</li>
</ul>

<p>If you add the recursion I think the final code could be quite short.</p>

<p>Regarding the download, I am not sure how to determine it has finished. Probably by waiting for the file to appear in the Downloads folder. on Linux I might use <code>inotifywait</code> but this is an OS-dependent approach.</p>

<hr>

<p>Future improvements:</p>

<p>Adding some <strong>parallel processing</strong> would be nice, to crawl multiple pages at the same time and download several files at once but be gentle with third-party websites. They could block you if they think you are bot and crawling too fast to be human.</p>

<p>Or you could collect all the file links and download them in bulk at the end of the process. </p>

<p>To get the file name from the URL you can simply do this:</p>

<pre><code>from urllib.parse import urlparse

def get_file_name_from_url(url: str) -&gt; str:
    u = urlparse(url)
    return os.path.basename(u.path))
</code></pre>

<p>But you should <strong>sanitize</strong> the file names as they may contain special characters that your OS will not accept (I think Windows does not accept the colon in file names for example). Unless your browser does that automatically.</p>

<hr>

<p>Sample output: folders</p>

<pre>
Wating for page load...
Page should now be ready, continue
Links from https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/:
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/1.%20Introduction/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/10.%20Data%20Structures%20Trees/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/11.%20Data%20Structures%20Graphs/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/12.%20Algorithms%20Recursion/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/13.%20Algorithms%20Sorting/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/14.%20Algorithms%20Searching%20+%20BFS%20+%20DFS/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/15.%20Algorithms%20Dynamic%20Programming/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/16.%20Non%20Technical%20Interviews/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/17.%20Offer%20+%20Negotiation/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/18.%20Thank%20You/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/19.%20Extras%20Google,%20Amazon,%20Facebook%20Interview%20Questions/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/2.%20Getting%20More%20Interviews/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/20.%20Contributing%20To%20Open%20Source%20To%20Gain%20Experience/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/21.%20Bonus%20Extra%20Bits/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/22.%20Extras/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/3.%20Big%20O/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/4.%20How%20To%20Solve%20Coding%20Problems/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/5.%20Data%20Structures%20Introduction/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/6.%20Data%20Structures%20Arrays/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/7.%20Data%20Structures%20Hash%20Tables/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/8.%20Data%20Structures%20Linked%20Lists/: class name: folder
=&gt; Folder: to be crawled
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/9.%20Data%20Structures%20Stacks%20+%20Queues/: class name: folder
=&gt; Folder: to be crawled
</pre>

<p>Sample output: files</p>

<pre>
Links from https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/1.%20Introduction/:
Wating for page load...
Page should now be ready, continue
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/1.%20Introduction/1.%20How%20To%20Succeed%20In%20This%20Course.mp4?a=view: class name: file view
=&gt; File: to be downloaded
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/1.%20Introduction/1.%20How%20To%20Succeed%20In%20This%20Course.vtt: class name: file
=&gt; File: to be downloaded
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/1.%20Introduction/1.1%20Interview%20Mind%20Map.html?a=view: class name: file view
=&gt; File: to be downloaded
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/1.%20Introduction/1.2%20Technical%20Interview%20Mind%20Map.html?a=view: class name: file view
=&gt; File: to be downloaded
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/1.%20Introduction/2.%20Join%20Our%20Online%20Classroom!.html?a=view: class name: file view
=&gt; File: to be downloaded
Link: https://coursevania.courses.workers.dev/[coursevania.com]%20Udemy%20-%20Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/1.%20Introduction/3.%20Exercise%20Meet%20The%20Community!.html?a=view: class name: file view
=&gt; File: to be downloaded
</pre>
    </div>