<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Imports</h3>

<p>If you're importing UIKit, you don't need to import Foundation. Foundation is included in the UIKit import.</p>

<h3>Classes</h3>

<p>The underlying class variables in all of the classes are public. In most of these cases, the methods that populate them are private. That means that the vars should most likely also be private, or at the very least <code>private (set)</code> if you wanted to be able to still view the contents of them.</p>

<p>Additionally there are a lot of public methods that seem like they are unnecessarily public. When making a method or property public, you should ask yourself if it is necessary to access that value outside of the scope of your project. If not, then you're probably safe to use internal (the default).</p>

<h3>Card</h3>

<p>I believe Daniel T covered the Card struct in a great way. I would agree with his suggestions regarding that. Removing the unnecessary optionals and setting it up in an enum as he did would help quite a bit.</p>

<h3>Stack</h3>

<p>I am not a fan of the name <code>stack</code> for the array of <code>Card</code> contained in the <code>Stack</code>. It could use a more descriptive name. I would probably name it <code>cards</code> because it makes it more obvious and less redundant when you're doing things like <code>drawStack.stack.popLast()</code> as <code>drawStack.cards.popLast()</code>.</p>

<p>In the createGameStack method, you force unwrap the initial draw and this should be fine. However if something were to go wrong, this would result in a crash. You could perhaps add a guard here.</p>

<pre><code>private static func createGameStack(with drawStack: Stack) -&gt; [Card] {
    guard let topCard = drawStack.stack.popLast() else {
        print("Why is the drawStack empty?")
        return []
    }

    return [topCard]
}
</code></pre>

<p>The initializers are kind of redundant here. You have static methods to populate the stack based on the type that you're creating, but you also have corresponding initializers. I would consider a generic initializer that would set the stack to an empty array, and then have your createDeck methods become public and return a Stack object. Finally I would update your createGameStack method to be public and not static.  This is dependent on a deckStack existing, so it makes sense for it to be a method on that object. </p>

<pre><code>init() {
    self.cards = [] // This could also be done as public var cards: [Card] = []
}

static func createDrawStack(with amountOfCards: Int) -&gt; Stack {
    let drawStack = Stack()
    // Create the card array here.
    drawStack.cards = cards.shuffled()
    return drawStack
}

func createGameStack() -&gt; Stack {
    let gameStack = Stack()
    guard let topCard = drawStack.cards.popLast() else {
        print("Why is the drawStack empty?")
        return gameStack
    }

    gameStack.cards = [topCard]
    return gameStack
}
</code></pre>

<p>This gives you the implementation like this: </p>

<pre><code>self.drawStack = Stack.createDrawStack(with: amountOfCopies)
self.playStack = drawStack.createGameStack()
</code></pre>

<h3>Player</h3>

<p>The hand does not need to be an array of optional cards. The player should fit into one of two categories; 1. they have cards in hand or 2. they have no hand and have won the game. In both cases there isn't a situation where the user will have something but possibly nothing in their hand, which is what an optional card would represent.</p>

<p>The <code>wantsToPlayCard(at index:)</code> method returns a Card, but does not perform any overflow checking.  This as well as the <code>playCard(at index: onto playStack:)</code> method should both check to make sure that the index is not out of the bounds of the array at a minimum.</p>

<p>The <code>playCard(at index: onto playStack:)</code> method could (should) be split into two methods, one in the player class and one in the stack class. You want to enforce separation of concerns here, and due to the way you have the method laid out, you have a direct dependency on something that the player should not.
When separating the concerns here, you would want the Player.playCard method to identify the card which will be played, which you are already in the <code>wantsToPlayCard(index:)</code> method. Then in the stack there would be a <code>play(_ card: Card)</code> method that would do the append on the stack.</p>

<p>Doing this enables you to remove the player's dependency on the stack and implement something like this <code>playStack.play(currentPlayer.wantsToPlayCard(at: 4))</code>.</p>

<p><code>var didDraw</code> is unused.</p>

<p>Similar to the above mentioned separation of concerns, <code>drawCard(from deck:)</code> seems like is should be added to the stack class and the player's implementation should be more like <code>drawCard(_ card: Card)</code> where you are provided a card from the deck and merely adding it to the player's hand.</p>

<h3>Uno</h3>

<p>I'll have to come back and take a look at the <code>Uno</code> class, but I feel this is a good start for suggestions and ideas.</p>
    </div>