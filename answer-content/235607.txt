<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some small comments:</p>

<ul>
<li><p>In <code>main.py</code>: <code>argparse</code> can already deal with argument types and multiple arguments (it even enforces the type across multiple arguments). If you change it to multiple arguments being separated by whitespace, you can simply use this:</p>

<pre><code>parser = argparse.ArgumentParser()
parser.add_argument("-p", "--pages", type=int, help="Pages per Setting", default=1)
parser.add_argument("-f", "--fonts", nargs="+", help="Space seperated List of fonts", default=["freefont/FreeMono.ttf"])
parser.add_argument("-tc", "--txtcolors", nargs="+", help="Space seperated Color Initials", default=["B"])
parser.add_argument("-bc", "--bgcolors", nargs="+", help="Space seperated Color Initials", default=["W"])
parser.add_argument("-hs", "--headsizes", nargs="+", type=int, help="Space seperated Header Font Heights", default=[50])
parser.add_argument("-bs", "--bodysizes", nargs="+", type=int, help="Space seperated Body Font Heights", default=[25])
parser.add_argument("-v", "--verbose", help="Print progress", action="store_true")
args = parser.parse_args()
</code></pre></li>
<li><p>In <code>readimage.py</code>: If you need something more than once, don't repeat yourself. Write a wrapper function that does the timing for you:</p>

<pre><code>from time import perf_counter
from functools import wraps

def timeit(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        start = perf_counter()
        ret = f(*args, **kwargs):
        return ret, round(perf_counter() - start, 4)
    return wrapper


@timeit
def tess_ocr(file, language="eng", config=""):
    return pytesseract.image_to_string(Image.open(file), language, config=config)

@timeit
def cune_ocr(file, language="eng"):
    # Run Cuneiform on image
    subprocess.call(["cuneiform", "-o", "cuneout.txt",file], stdout=subprocess.PIPE)

    # Fetch and return output
    if os.path.exists("cuneout.txt"):
        with open("cuneout.txt") as f:
            return f.read()
    else:
        print("Cuneiform reported no output, returning empty string")
        return ""
</code></pre>

<p>Note that I used the more accurate <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer"><code>time.perf_counter</code></a> and ensured that the docstring etc are conserved using <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps</code></a>. I also made sure the file is properly closed using a <a href="https://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer"><code>with</code> statement</a>. </p>

<p>Arguably, the <code>wrapper</code> function should only print/log the timing instead of returning it and thereby changing the signature of the function, but I left your interface as is here. You might even want to put this function into its own module, since it is quite reusable (especially when modifying it not to change the function signature).</p></li>
<li><p>There are already Levenshtein distance modules, like <a href="https://pypi.org/project/editdistance/" rel="nofollow noreferrer"><code>editdistance</code></a> and <a href="https://pypi.org/project/python-Levenshtein/" rel="nofollow noreferrer"><code>python-Levenshtein</code></a>, both of which are quite fast.</p></li>
</ul>
    </div>