<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Putting all code into one class makes the program very complicated. Refactor the code into classes where each class performs one task. This is called <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a></p>

<p>The core of the <code>RpnEgine</code> is the following function. I've used Deque as it performs better than the synchronized Stack.</p>

<pre><code>public void process(String ... input) {
    for (String s: input) {
        final Consumer&lt;Deque&lt;Double&gt;&gt; func = FUNCTIONS.get(s);
        if (func != null) {
            func.accept(stack);
        } else {
            stack.push(Double.valueOf(s));
        }
    }
}
</code></pre>

<p>The mathematical operations and commands can then be defined as lambdas or standalone classes. These are a bit ugly, as the operator order is reversed hen read from the stack. You'll notice this code repeats the pushing and popping a lot, so it might be a good idea to refactor them to a common class that check stack size, pops the operands, delegates them to a <code>BiFunction</code> and pushes the result.</p>

<p>It also introduces great flexibility, as implementing a function that calculates the sum of whatever is in the stack becomes trivial.</p>

<pre><code>static {
    FUNCTIONS.put("+", (d) -&gt; d.push(d.pop() + d.pop()));
    FUNCTIONS.put("-", (d) -&gt; d.push((- d.pop()) + d.pop()));
    FUNCTIONS.put("/", (d) -&gt; d.push(1.0 / (d.pop() / d.pop())));
    FUNCTIONS.put("sum", new Sum());
}
</code></pre>

<p>Do not put the input parsing to the same class. Create a class named <code>RpnCli</code> that reads input and passes it to the <code>RpnEngine</code>.</p>
    </div>