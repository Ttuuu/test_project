<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A standard convention is to name classes with an uppercase letter, so readers can distinguish between variables and class names. e.g. <a href="https://google.github.io/styleguide/javascriptguide.xml#Naming" rel="nofollow noreferrer">Google Style guide</a>, <a href="https://github.com/airbnb/javascript#naming--PascalCase" rel="nofollow noreferrer">AirBnb</a>, <a href="https://github.com/felixge/node-style-guide#use-uppercamelcase-for-class-names" rel="nofollow noreferrer">NodeJS</a> etc.</p>

<hr>

<p>I know DOM access in this code likely not a bottleneck, but some of the techniques for accessing DOM elements could be optimized. There are repeated queries for elements e.g. <code>const board = document.querySelector(".board");</code> in <code>snake.checkDinnerTime()</code> and <code>food.addFood()</code>. Those should be cached in a variable and each occurrence can then use the variable instead of querying each time. Also if there is only going to be one element to contain the board elements, perhaps it makes more sense to use an <em>id</em> attribute instead of a class name.</p>

<p>Also, consider this line:</p>

<blockquote>
<pre><code>const body = document.getElementsByTagName("body")[0];
</code></pre>
</blockquote>

<p>There is a property <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/body" rel="nofollow noreferrer"><code>document.body</code></a> that could be used to eliminate the query:</p>

<pre><code>const body = document.body;
</code></pre>

<p>But if you are really going to do that, then <code>document.body</code> could just be used wherever <code>body</code> is used, and then you wouldn't have to add the extra variable.</p>

<hr>

<p>I know <a href="https://codereview.stackexchange.com/users/8041/ndp">ndp's answer</a> already mentioned scoping but there is an optimization around the delayed function call:</p>

<blockquote>
<pre><code>const moveTimer = window.setTimeout(
    () =&gt; snake1.move.call(snake1),
    options.speed
  );
</code></pre>
</blockquote>

<p>The extra arrow function could be eliminated by using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Creating_a_bound_function" rel="nofollow noreferrer">bound function</a> by utilizing <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>Function.prototype.bind()</code></a>:</p>

<pre><code>const moveTimer = window.setTimeout(
  snake1.move.bind(snake1),
  options.speed
);
</code></pre>

<p>The same applies to the timer call to <code>food.addFood()</code>:</p>

<pre><code>const foodTimer = window.setInterval(
  foods.addFood.bind(foods),
  options.foodTime
);
</code></pre>
    </div>