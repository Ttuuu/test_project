<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Probably, you could do something similar by <code>...</code> and <code>succ</code>.</p>

<pre class="lang-perl prettyprint-override"><code>enum Foo ( XA =&gt; 17, XB =&gt; 19, XC =&gt; 2, XD =&gt; 17, XE =&gt; 1, XF =&gt; 99 );
enum Goo &lt; YA YB &gt;;
XC, *.succ ... XE andthen .say
</code></pre>

<p>Thus your example could be rewritten</p>

<pre class="lang-perl prettyprint-override"><code>use Test;

subset EnumMember of Enumeration; 

multi sub infix:&lt;..&gt;( EnumMember:D ::T $a, T:D $b ) {
    $a, *.succ ... $b 
}

multi sub infix:&lt;..&gt;( EnumMember $a,  $b ) {
    die 'Can only do ranges for members of the same enum' 
}

enum Foo ( XA =&gt; 17, XB =&gt; 19, XC =&gt; 2, XD =&gt; 17, XE =&gt; 1, XF =&gt; 99 );
enum Goo &lt; YA YB &gt;;

is-deeply( ( XC..XE ).Array, [XC, XD, XE] ); 
dies-ok({ XA..YB }); 
</code></pre>

<p>But you get <code>Seq</code>, not <code>Range</code>. So I prefer redefine the sequence operator <code>...</code> and make a new role instead of a subtype.</p>

<pre class="lang-perl prettyprint-override"><code>use Test;

role EnumMember {}; 

multi sub infix:&lt;...&gt;( EnumMember:D ::T $a, T:D $b ) {
    $a, *.succ ... $b 
}

multi sub infix:&lt;...&gt;( EnumMember $a,  $b ) {
    fail 'Can only do sequence for members of the same enum' 
}

multi sub infix:&lt;…&gt;( EnumMember $a,  $b ) {
  $a ... $b
}

enum Foo does EnumMember ( XA =&gt; 17, XB =&gt; 19, XC =&gt; 2, XD =&gt; 17, XE =&gt; 1, XF =&gt; 99 );
enum Goo does EnumMember &lt; YA YB &gt;;

is (XC … XE), (XC, XD, XE); 
dies-ok { XA … YB }; 
</code></pre>
    </div>