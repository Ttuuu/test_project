<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like that you are trying to not use explicit recursions everywhere. That being said, there are a few standard functions that we could use to get a code similar to the following.</p>

<pre><code>import Data.List(intercalate)

grid :: Int -&gt; [String]
grid n = [intercalate " --- " . take n . drop (n-k) $ osxs | k &lt;- [1..n]]
    where osxs = replicate n "O" ++ replicate n "X"

printGrid :: Int -&gt; IO ()
printGrid = putStr . unlines . grid
</code></pre>

<p>Most notably, <code>Data.List.intercalate</code> can be used to generalize your <code>linePrinter</code>, and <code>unlines</code> helps us avoid <code>mapM_</code>.</p>

<hr>

<p>If you are writing a game, then a <code>Data.Map.Strict.Map</code> could be useful for storing the board's current values.</p>
    </div>