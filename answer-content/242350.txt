<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have</p>

<blockquote>
<pre><code>&lt;button onclick="onButtonClick()"&gt;Encode!&lt;/button&gt;
</code></pre>
</blockquote>

<p>Better to <a href="https://stackoverflow.com/a/59539045">avoid inline handlers</a> in a modern codebase, they have too many problems to be worth using. Attach the listener properly in the Javascript by using <code>addEventListener</code> instead.</p>

<p>Consider always strict mode to reduce silent bugs. For example, you never define the <code>stackWithNodes</code>, <code>stackWithCodes</code>, <code>stackWithDepths</code>, <code>output</code>, and some other variables, so they're implicitly global, which is not a good idea. Always declare variables before using them. Strict mode will throw an error when an undeclared variable is used, allowing you to fix it immediately (rather than it causing a hard-to-identify bug down the line).</p>

<p>If you're going to use ES2015 syntax like <code>let</code> in the code, great (it often makes code shorter and more readable!) - but if you're going to use ES2015 syntax, best to use it <em>everywhere</em> - avoid <code>var</code>. Only use <code>let</code> when you must reassign the variable - otherwise, <a href="https://softwareengineering.stackexchange.com/questions/278652/how-much-should-i-be-using-let-vs-const-in-es6">use <code>const</code></a>.</p>

<p>You declare a bunch of global variables shared between <code>onButtonClick</code> and <code>draw</code>:</p>

<pre><code>var letters, maxX, maxY, minX, maximumDepth;
</code></pre>

<p>If you want to communicate data between functions, it would be more appropriate to <em>pass</em> arguments instead.</p>

<blockquote>
<pre><code>letters = new Object();
</code></pre>
</blockquote>

<p>If you want to create an empty object, just use <code>{}</code> - using the Object constructor is verbose and weird.</p>

<p>Rather than iterating over the string manually with:</p>

<pre><code>for (let i = 0; i &lt; inputString.length; i++) {
  if (letters[inputString[i]] == undefined) {
    letters[inputString[i]] = new Object();
    letters[inputString[i]].frequency = 0;
    letters[inputString[i]].hasBeenUsed = false;
    letters[inputString[i]].childrenNodes = [];
  }
  letters[inputString[i]].frequency++;
}
</code></pre>

<p>Since we can use ES2015, using <code>for..of</code> wll make the code a lot cleaner - no manual iteration required, and no having to mess with indicies. You can also assign the whole object all at once, rather than first creating an object, then assigning to its keys. (See next code block after this one for an example.) You also have:</p>

<pre><code>for (let i in letters) {
  letters[i].probability = letters[i].frequency / inputString.length;
  entropy -= letters[i].probability * Math.log2(letters[i].probability);
  numberOfDistinctLetters++;
}
</code></pre>

<p>You don't care at all what the <code>i</code> is (the character), so iterating over the keys with <code>in</code> doesn't make much sense. If all you care about is the values, use <code>Object.values</code> instead. Rather than incrementing <code>numberOfDistinctLetters</code> each time, it would be clearer to assign it to its final value immediately, by checking the number of values in the object. This would also be a nice thing to put into a standalone function, to make the <code>onbuttonclick</code> less bulky. The creation of the <code>entropy</code> number is not tied to the assignment of the probabilities to each letter object, so best to separate them. The assignment to the probabilities can go in the function that creates the letter object.</p>

<pre><code>const constructLettersObj = (inputString) =&gt; {
  const lettersObj = {};
  for (const char of inputString) {
    if (!lettersObj[char]) {
      lettersObj[char] = {
        frequency: 0,
        hasBeenUsed: false,
        childrenNodes: [],
      };
    }
    lettersObj[char].frequency++;
  }
  for (const letterObj of Object.values(lettersObj)) {
    letterObj.probability = letterObj.frequency / inputString.length;
  }
  return lettersObj;
};
</code></pre>

<p>If you <em>did</em> want to stick with the <code>for..in</code> loop for whatever reaason, don't name the character <code>i</code> (<code>i</code> is generally understood to be a <em>numeric index</em>, but characters aren't numeric), and make sure to declare it with <code>const</code>, not <code>let</code>, since you aren't reassigning the variable. Maybe call it <code>char</code> instead of <code>i</code>. You use that same pattern various other places in the code - to keep the code clean, if you only need to iterate over object <em>values</em>, but not keys, then use <code>Object.values</code>.</p>

<p>Once the above letters object has been constructed, you can create the <code>entropy</code> number by mapping to the <code>probabilities</code> multiplied by the logarithm, then summing them all together with <code>.reduce</code>:</p>

<pre><code>const entropy = vals
  .map(({ probability }) =&gt; probability * Math.log2(probability))
  .reduce((a, b) =&gt; a + b);
</code></pre>

<p>This way, you can declare <code>entropy</code> with <code>const</code>, no reassignment or generic looping required, and its value will be easier to determine at a glance by a reader.</p>

<p>While connecting the nodes together, you do:</p>

<pre><code>for (let i in lettersObj)
  if (lettersObj[i].hasBeenUsed == false &amp;&amp; (minimum1 == undefined || lettersObj[i].frequency &lt; lettersObj[minimum1].frequency))
    minimum1 = i;
for (let i in lettersObj)
  if (lettersObj[i].hasBeenUsed == false &amp;&amp; i != minimum1 &amp;&amp; (minimum2 == undefined || lettersObj[i].frequency &lt; lettersObj[minimum2].frequency))
    minimum2 = i;
console.log("Connecting \'" + minimum1 + "\' and \'" + minimum2 + "\' into a single node.");
lettersObj[minimum1].hasBeenUsed = true;
lettersObj[minimum2].hasBeenUsed = true;
lettersObj[minimum1 + minimum2] = new Object();
lettersObj[minimum1 + minimum2].childrenNodes = [minimum1, minimum2];
lettersObj[minimum1 + minimum2].frequency = lettersObj[minimum1].frequency + lettersObj[minimum2].frequency;
if (lettersObj[minimum1 + minimum2].frequency == inputString.length)
  rootNode = minimum1 + minimum2;
lettersObj[minimum1 + minimum2].hasBeenUsed = false;
howManyUnused = 0;
for (const i in lettersObj)
  if (lettersObj[i].hasBeenUsed == false)
    howManyUnused++;
</code></pre>

<p>You can clean this up the same way as above - initialize the <code>lettersObj[minimum1 + minimum2]</code> with an object literal instead, and <code>i</code> should probably be renamed to <code>char</code> (since it's a character, not an index), and since it doesn't get reassigned, declare it with <code>const</code> <a href="https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons">Always use</a> <code>===</code> and <code>!==</code> to compare - don't use <code>==</code> or <code>!=</code>, it has strange rules that developers are better off not having to memorize. Or, since the <code>minimum</code>s will always be characters, a simple truthy test would also be enough. To iterate over both the object's values and keys at once, use <code>Object.entries</code>. Save the <code>minimum1 + minimum2</code> in a variable instead of repeating the calculation multiple times - write <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> code:</p>

<pre><code>for (const [char, letterObj] of Object.entries(lettersObj))
  if (!letterObj.hasBeenUsed &amp;&amp; (!minimum1 || letterObj.frequency &lt; lettersObj[minimum1].frequency))
    minimum1 = char;
for (const [char, letterObj] of Object.entries(lettersObj))
  if (!letterObj.hasBeenUsed &amp;&amp; char != minimum1 &amp;&amp; (!minimum2 || letterObj.frequency &lt; lettersObj[minimum2].frequency))
    minimum2 = char;
console.log("Connecting \'" + minimum1 + "\' and \'" + minimum2 + "\' into a single node.");
lettersObj[minimum1].hasBeenUsed = true;
lettersObj[minimum2].hasBeenUsed = true;
lettersObj[minimum1 + minimum2] = {
  childrenNodes: [minimum1, minimum2],
  frequency: lettersObj[minimum1].frequency + lettersObj[minimum2].frequency,
};
const combinedKey = minimum1 + minimum2;
if (lettersObj[combinedKey].frequency == inputString.length)
  rootNode = combinedKey;
lettersObj[combinedKey].hasBeenUsed = false;
howManyUnused = Object.values(lettersObj)
  .reduce((a, letterObj) =&gt; a + !letterObj.hasBeenUsed, 0);
</code></pre>

<p>On a similar note, for the code to be DRY, don't select elements over and over again, like with:</p>

<pre><code>while (document.getElementById("tree").childNodes.length) //Clear the diagram ("innerHTML" won't work because... SVG).
  document.getElementById("tree").removeChild(document.getElementById("tree").firstChild);
maxX = maxY = minX = 0;
draw(rootNode, 0, 0, 30 * Math.pow(2, maximumDepth), 0, inputString.length, lettersObj);
for (let i = 0; i &lt; document.getElementById("tree").childNodes.length; i++) //In case a node falls left of the diagram, move all nodes rightwards.
{
  if (document.getElementById("tree").childNodes[i].getAttribute("x"))
    document.getElementById("tree").childNodes[i].setAttribute("x", document.getElementById("tree").childNodes[i].getAttribute("x") * 1 - minX);
  if (document.getElementById("tree").childNodes[i].getAttribute("x1"))
    document.getElementById("tree").childNodes[i].setAttribute("x1", document.getElementById("tree").childNodes[i].getAttribute("x1") * 1 - minX);
  if (document.getElementById("tree").childNodes[i].getAttribute("x2"))
    document.getElementById("tree").childNodes[i].setAttribute("x2", document.getElementById("tree").childNodes[i].getAttribute("x2") * 1 - minX);
}
document.getElementById("tree").style.height = maxY + 100 + "px";
document.getElementById("tree").style.width = maxX - minX + 100 + "px";
document.getElementById("diagramSpan").scrollLeft = document.getElementById("node0").getAttribute("x") - document.getElementById("diagramSpan").clientWidth / 2 + 75; //The root of the tree will be in the center of the screen.
</code></pre>

<p>Select elements <em>once</em> and save them in a variable. Also, <code>.childNodes</code> will iterate over text nodes too, which is not desirable - if you ever had text nodes, they would cause problems. Because you only want to iterate over <em>elements</em>, use <code>.children</code> instead - and instead of iterating manually, invoke the HTMLCollection's iterator instead. When you want to check if an element has an attribute, it's most appropriate to use <code>hasAttribute</code> (not <code>getAttribute</code>):</p>

<pre><code>const tree = document.getElementById("tree");
for (const child of tree.children) {
  child.remove();
}
maxX = maxY = minX = 0;
draw(rootNode, 0, 0, 30 * Math.pow(2, maximumDepth), 0, inputString.length, lettersObj);
// In case a node falls left of the diagram, move all nodes rightwards:
for (const child of tree.children) {
  if (child.hasAttribute("x"))
    child.setAttribute("x", child.getAttribute("x") * 1 - minX);
  if (child.hasAttribute("x1"))
    child.setAttribute("x1", child.getAttribute("x1") * 1 - minX);
  if (child.hasAttribute("x2"))
    child.setAttribute("x2", child.getAttribute("x2") * 1 - minX);
}
tree.style.height = maxY + 100 + "px";
tree.style.width = maxX - minX + 100 + "px";
const diagramSpan = document.getElementById("diagramSpan");
diagramSpan.scrollLeft = document.getElementById("node0").getAttribute("x") - diagramSpan.clientWidth / 2 + 75;
</code></pre>

<p>The <code>draw</code> function is a bit long and difficult to read. You can make it much nicer by typing HTML markup directly instead of large numbers of <code>setAttribute</code> calls. (You wouldn't do this when you might be concatenating untrusted input, but it's fine when you know exactly what sort of things are being interpolated.) You can do it like this:</p>

<pre><code>const lineHTML = `
  &lt;line
    x1=${x + 25}
    y1=${y + 50}
    x2=${x + (i - 0.5) * space + 25}
    y2=${y + 100}
    strike-width=2
    stroke=black
  &gt;&lt;/line&gt;
`;
tree.insertAdjacentHTML('beforeend', lineHTML);
</code></pre>

<p>You can follow the same pattern in the various places where you have to create elements with lots of attributes.</p>

<p>There are lots of other improvements that can be made, but this should be a good start.</p>

<p>You should strongly consider using a <a href="https://eslint.org/" rel="nofollow noreferrer">linter</a> which will automatically prompt you to fix many of these potential mistakes/code smells.</p>

<p>Live demo of the mostly-fixed code:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';

let maxX, maxY, minX, maximumDepth;

const constructLettersObj = (inputString) =&gt; {
  const lettersObj = {};
  for (const char of inputString) {
    if (!lettersObj[char]) {
      lettersObj[char] = {
        frequency: 0,
        hasBeenUsed: false,
        childrenNodes: [],
      };
    }
    lettersObj[char].frequency++;
  }
  for (const letterObj of Object.values(lettersObj)) {
    letterObj.probability = letterObj.frequency / inputString.length;
  }
  return lettersObj;
};

function onButtonClick() {
  const inputString = document.getElementById("input").value;
  if (inputString.length &lt; 2) {
    alert("Strings of length less than two can't be Huffman encoded.");
    return;
  }
  console.log("Making a Huffman tree for the string \"" + inputString + "\".");
  const lettersObj = constructLettersObj(inputString);
  const vals = Object.values(lettersObj);
  const numberOfDistinctLetters = vals.length;
  if (numberOfDistinctLetters &lt; 2) {
    alert("There need to be at least two different symbols!");
    return;
  }
  const entropy = vals
    .map(({ probability }) =&gt; probability * Math.log2(probability))
    .reduce((a, b) =&gt; a + b);
  const bitsInEqualCode = Math.ceil(Math.log2(numberOfDistinctLetters));
  
  let howManyUnused = numberOfDistinctLetters;
  let rootNode;
  do {
    let minimum1, minimum2;
    for (const [char, letterObj] of Object.entries(lettersObj))
      if (!letterObj.hasBeenUsed &amp;&amp; (!minimum1 || letterObj.frequency &lt; lettersObj[minimum1].frequency))
        minimum1 = char;
    for (const [char, letterObj] of Object.entries(lettersObj))
      if (!letterObj.hasBeenUsed &amp;&amp; char != minimum1 &amp;&amp; (!minimum2 || letterObj.frequency &lt; lettersObj[minimum2].frequency))
        minimum2 = char;
    console.log("Connecting \'" + minimum1 + "\' and \'" + minimum2 + "\' into a single node.");
    lettersObj[minimum1].hasBeenUsed = true;
    lettersObj[minimum2].hasBeenUsed = true;
    const combinedKey = minimum1 + minimum2;
    lettersObj[combinedKey] = {
      childrenNodes: [minimum1, minimum2],
      frequency: lettersObj[minimum1].frequency + lettersObj[minimum2].frequency,
    };
    if (lettersObj[combinedKey].frequency == inputString.length)
      rootNode = combinedKey;
    lettersObj[combinedKey].hasBeenUsed = false;
    howManyUnused = Object.values(lettersObj)
      .reduce((a, letterObj) =&gt; a + !letterObj.hasBeenUsed, 0);
  }
  while (howManyUnused &gt; 1);
  const stackWithNodes = [rootNode];
  const stackWithCodes = [""];
  const stackWithDepths = [0];
  let averageSymbolLength = 0;
  maximumDepth = 0;
  let counter = 0;
  document.getElementById("table").innerHTML = "&lt;tr&gt;&lt;td&gt;symbol&lt;/td&gt;&lt;td&gt;frequency&lt;/td&gt;&lt;td&gt;Huffman code&lt;/td&gt;&lt;td&gt;equal-length code&lt;/td&gt;&lt;/tr&gt;";
  while (stackWithNodes.length &gt; 0) {
    const currentNode = stackWithNodes.pop();
    const currentCode = stackWithCodes.pop();
    const currentDepth = stackWithDepths.pop();
    maximumDepth = Math.max(maximumDepth, currentDepth);
    lettersObj[currentNode].code = currentCode;
    if (lettersObj[currentNode].childrenNodes.length == 0) {
      averageSymbolLength += lettersObj[currentNode].probability * currentCode.length;
      let equalLengthCode = counter.toString(2);
      while (equalLengthCode.length &lt; bitsInEqualCode)
        equalLengthCode = '0' + equalLengthCode;
      document.getElementById("table").innerHTML += "&lt;tr&gt;&lt;td&gt;" +
        currentNode + "&lt;/td&gt;&lt;td&gt;" +
        lettersObj[currentNode].frequency + "/" + inputString.length +
        "&lt;/td&gt;&lt;td&gt;" + currentCode + "&lt;/td&gt;&lt;td&gt;" + equalLengthCode + "&lt;/td&gt;&lt;/tr&gt;";
      counter++;
      continue;
    }
    stackWithNodes.push(lettersObj[currentNode].childrenNodes[0]);
    stackWithNodes.push(lettersObj[currentNode].childrenNodes[1]);
    stackWithCodes.push(currentCode + "0");
    stackWithCodes.push(currentCode + "1");
    stackWithDepths.push(currentDepth + 1);
    stackWithDepths.push(currentDepth + 1);
  }
  console.log("The Huffman tree is constructed:");
  console.log("node\tfreq\tcode\tleft\tright")
  for (const i in lettersObj)
    console.log("'" + i + "'\t" + lettersObj[i].frequency + "/" + inputString.length + "\t" +
      lettersObj[i].code + "\t" + ((lettersObj[i].childrenNodes[0]) ? ("'" + lettersObj[i].childrenNodes[0] + "'") : "null") +
      "\t" + (lettersObj[i].childrenNodes[1] ? ("'" + lettersObj[i].childrenNodes[1] + "'") : "null"));
  console.log("The Huffman encoding is:");
  let output = "";
  for (let i = 0; i &lt; inputString.length; i++)
    output += lettersObj[inputString[i]].code;
  console.log(output);
  console.log("The average length of a symbol in Huffman code is: " + averageSymbolLength + " bits.");
  document.getElementById("avgLength").innerHTML = averageSymbolLength;
  console.log("The average length of a symbol in the equal-length code is: " + bitsInEqualCode + " bits.");
  document.getElementById("bitsInEqualCode").innerHTML = bitsInEqualCode;
  console.log("The entropy of the input string is: " + entropy + " bits.");
  document.getElementById("entropy").innerHTML = entropy;
  console.log("The efficiency of the Huffman code is: " + (entropy / averageSymbolLength));
  console.log("The efficiency of the equal-length code is: " + (entropy / bitsInEqualCode));
  document.getElementById("output").innerText = output;
  const tree = document.getElementById("tree");
  for (const child of tree.children) {
    child.remove();
  }
  maxX = maxY = minX = 0;
  draw(rootNode, 0, 0, 30 * Math.pow(2, maximumDepth), 0, inputString.length, lettersObj);
  // In case a node falls left of the diagram, move all nodes rightwards:
  for (const child of tree.children) {
    if (child.hasAttribute("x"))
      child.setAttribute("x", child.getAttribute("x") * 1 - minX);
    if (child.hasAttribute("x1"))
      child.setAttribute("x1", child.getAttribute("x1") * 1 - minX);
    if (child.hasAttribute("x2"))
      child.setAttribute("x2", child.getAttribute("x2") * 1 - minX);
  }
  tree.style.height = maxY + 100 + "px";
  tree.style.width = maxX - minX + 100 + "px";
  const diagramSpan = document.getElementById("diagramSpan");
  diagramSpan.scrollLeft = document.getElementById("node0").getAttribute("x") - diagramSpan.clientWidth / 2 + 75; //The root of the tree will be in the center of the screen.
}

function draw(nodeName, x, y, space, id, inputLength, lettersObj) {
  if (x &gt; maxX)
    maxX = x;
  if (x &lt; minX)
    minX = x;
  if (y &gt; maxY)
    maxY = y;
  const svgNS = document.getElementById("tree").namespaceURI;
  const rectangle = document.createElementNS(svgNS, "rect");
  rectangle.setAttribute("x", x);
  rectangle.setAttribute("y", y);
  rectangle.setAttribute("width", 50);
  rectangle.setAttribute("height", 50);
  rectangle.setAttribute("id", "node" + id);
  rectangle.setAttribute("fill", "#EEEEEE");
  document.getElementById("tree").appendChild(rectangle);
  const text = document.createElementNS(svgNS, "text");
  text.innerHTML = lettersObj[nodeName].frequency + "/" + inputLength;
  text.setAttribute("x", x + 5);
  text.setAttribute("y", y + 20);
  text.style.fill = "black";
  text.setAttribute("font-family", "monospace");
  text.setAttribute("font-size", 14);
  document.getElementById("tree").appendChild(text);
  if (nodeName.length == 1) {
    const character = document.createElementNS(svgNS, "text");
    character.innerHTML = nodeName;
    character.setAttribute("x", x + 20);
    character.setAttribute("y", y + 40);
    character.style.fill = "black";
    character.setAttribute("font-family", "monospace");
    character.setAttribute("font-size", 14);
    document.getElementById("tree").appendChild(character);
  }
  for (let i = 0; i &lt; lettersObj[nodeName].childrenNodes.length; i++) {
    draw(lettersObj[nodeName].childrenNodes[i], x + (i - 0.5) * space, y + 100, space / 2, id + 1, inputLength, lettersObj);
    const str = `
    &lt;line
      x1=${x + 25}
      y1=${y + 50}
      x2=${x + (i - 0.5) * space + 25}
      y2=${y + 100}
      strike-width=2
      stroke=black
    &gt;&lt;/line&gt;
    `;
    tree.insertAdjacentHTML('beforeend', str);
    const bitHTML = `
      &lt;text
        x=${x + (i - 0.5) * space + 25}
        y=${y + 80}
        style="fill: black;"
        font-family=monospace
        font-size=14
      &gt;${i}&lt;/text&gt;
    `;
    tree.insertAdjacentHTML('beforeend', bitHTML);
  }
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>table,
th,
td {
  border: 1px black solid;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>Enter the string here:&lt;br/&gt;
&lt;input type="text" id="input" value="TEO SAMARZIJA" /&gt;
&lt;button onclick="onButtonClick()"&gt;Encode!&lt;/button&gt;&lt;br/&gt; The Huffman encoded string is: &lt;span id="output" style="font-family:monospace"&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span id="diagramSpan" style="display:block; width:100%; height:50%; overflow:scroll"&gt;
            &lt;svg id="tree"&gt;
            &lt;/svg&gt;
        &lt;/span&gt;&lt;br/&gt;
&lt;table id="table"&gt;&lt;/table&gt;&lt;br/&gt; The average length of a symbol in the Huffman code is &lt;span id="avgLength"&gt;0&lt;/span&gt; bits.&lt;br/&gt; The average length of a symbol in the equal-length code is &lt;span id="bitsInEqualCode"&gt;0&lt;/span&gt; bits.&lt;br/&gt; The entropy of the input string is
&lt;span id="entropy"&gt;0&lt;/span&gt; bits.&lt;br/&gt;</code></pre>
</div>
</div>

    </div>