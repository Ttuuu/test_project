<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since there are only three valid key sizes for AES, it makes sense to not even let the AES class be instantiated with any <code>uint16</code> value. I would introduce an enum similar to this:</p>

<pre><code>enum class AesKeyLen
{
    Aes128,
    Aes192,
    Aes256
};
</code></pre>

<p>And then change the <code>uint16</code> constructor to this:</p>

<pre><code>explicit AES (AesKeyLen keyLen);
</code></pre>

<p>Sure, they could still pass bad values, but they have to try harder by explicitly creating an invalid enum value. Also, making it a scoped enum provides extra type-safety and prevents naming clashes.</p>

<p>Either way, I think it makes sense to throw out of the constructor immediately if the key length is wrong instead of waiting until the <code>encrypt</code> function.</p>

<p>If you want to enforce a valid value at compile-time, you can use a <code>static_assert</code>, or you can use a smart-enum pattern. This is an example hacked together real quick:</p>

<pre><code>class AesKeyLen
{    
private:
    uint16 _length;

    AesKeyLen(uint16 len)
    {
        _length = len;
    }

public:
    uint16 length()
    {
        return _length;
    }

    static AesKeyLen Aes128()
    {
        return AesKeyLen(128);
    }

    static AesKeyLen Aes192()
    {
        return AesKeyLen(192);
    }

    static AesKeyLen Aes256()
    {
        return AesKeyLen(256);
    }
};
</code></pre>

<p>And then replace the <code>uint16</code> constructor again:</p>

<pre><code>explicit AES (AesKeyLen keyLen);
</code></pre>
    </div>