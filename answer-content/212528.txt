<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A further suggestion to "An alternative approach":</p>

<p>Since the destructor also adds a new line to the screen, if you call two progress bars in the same function they will appear in the reverse order on your screen</p>

<p>For example:</p>

<pre><code>int main()
{
    progress_bar progress1{std::clog, 70u, "Progress bar 1"};

    for (auto i = 0.0;  i &lt;= 100;  i += 3.65) {
        progress1.write(i/100.0);
        // simulate some work
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }

    progress_bar progress2{std::clog, 70u, "Progress bar 2"};

    for (auto i = 0.0;  i &lt;= 100;  i += 3.65) {
        progress2.write(i/100.0);
        // simulate some work
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}
</code></pre>

<p>That will display:</p>

<pre class="lang-none prettyprint-override"><code>Progress bar 2 ............................................ [100%]
Progress bar 1 ............................................ [100%]
</code></pre>

<p>because of the order the local objects are deleted.</p>

<p>Instead I suggest you create the objects with dynamic allocations and then delete them:</p>

<pre><code>int main()
{

    progress_bar* progress1 = new progress_bar(std::clog, 70u, "Progress bar 1"); 

    for (auto i = 0.0;  i &lt;= 100;  i += 3.65) {
        progress1-&gt;write(i/100.0);
        // simulate some work
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
    delete progress1;

    progress_bar* progress2 = new progress_bar(std::clog, 70u, "Progress bar 2"); 

    for (auto i = 0.0;  i &lt;= 100;  i += 3.65) {
        progress2.write(i/100.0);
        // simulate some work
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
    delete progress2;
}
</code></pre>

<p>This will display:</p>

<pre class="lang-none prettyprint-override"><code>Progress bar 1 ............................................ [100%]
Progress bar 2 ............................................ [100%]
</code></pre>
    </div>