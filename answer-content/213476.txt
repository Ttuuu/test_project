<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>welcome to code review.</p>

<p>Your organization is clean, I mostly just see a few holes in your logic:</p>

<ul>
<li><strong>Combining groups</strong> - A group applies the same operator (and, or) to all rules in it.  e.g. rule1 AND rule2 AND rule3.  However, since groups cannot contain other groups, you cannot combine operations, e.g. rule1 AND (rule2 OR rule3)</li>
<li><strong>Missing Operator/condition</strong> - you should add NOT to your enum(s) of operators and/or conditions</li>
<li><strong>Rule Type</strong> - I'm not sure what the purpose of this enum is.  If you think that you need it, you could leave it is as, or alternatively make an <code>IRuleParent</code> interface, then make <code>ConditionRuleParent</code> and <code>GroupRuleParent</code> subclasses (this would be the more C#-ish way to model it).  By doing it the swcond way, you can declare the type (condition/group) in the class name when you instantiate it, rather than tacking it on as a mandatory argument.</li>
<li><strong>Clunky syntax</strong> - it's object oriented, but very verbose to use and mentally parse, which leads us to...</li>
<li><strong><a href="https://en.wikipedia.org/wiki/Greenspun's_tenth_rule" rel="nofollow noreferrer">Greenspun's tenth rule</a></strong> - <em>Any sufficiently complicated C or Fortran program contains an ad-hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.</em> (or LINQ in this case).  While there are benefits to rolling your own implementation, you are basically recreating a subset of LINQ (the fluent syntax style).  If you want something like LINQ, just use LINQ.  If you are rolling your own, you might want to spend a little bit of time learning how it works (from a user point of view, at a minimum) and then steal ideas from it as you write your own version. </li>
</ul>
    </div>