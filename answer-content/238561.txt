<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In a fully-fledged class, <code>DELIMIT</code> and <code>FIELDS</code> could have been defined as <strong>parameters</strong> rather than left hardcoded like this:</p>

<pre><code>DELIMIT = ','  # delimiter for csv
FIELDS = set(list(['foo', 'bar']))  # fields that I want
</code></pre>

<p>Regarding <strong>exception handling</strong>, I recommend that you keep the full details including the stack trace - you don't have to display it to the user but it's good to have a <strong>log</strong> somewhere to investigate errors. Debugging can be difficult if you have to rely only on what your program outputs. For example, if an <code>except IOError</code> is raised it will not be immediately apparent what happened: was it a permission issue or the file does not exist or something else ?</p>

<p>Using the <code>logger</code> module you can output messages to <em>multiple destinations</em> at the same time, for example show a simplified message on the console but log more details to a file, also the <a href="https://docs.python.org/2/library/logging.html#levels" rel="nofollow noreferrer">logging levels</a> can be different for each destination.</p>

<p>In this function <code>os.path.exists</code> is redundant, <code>isfile</code> will suffice:</p>

<pre><code>def _is_file_ok(self):
    if os.path.isfile(self.file_path):
        if os.path.exists(self.file_path):
            if self.file_path.endswith('.csv'):
                return True
    return False
</code></pre>

<p>From the <a href="https://docs.python.org/3/library/os.path.html#os.path.isfile" rel="nofollow noreferrer">doc:</a></p>

<blockquote>
  <p><em>os.path.isfile(path)</em></p>
  
  <p>Return True if path is an <strong>existing</strong> regular file. This follows symbolic
  links, so both islink() and isfile() can be true for the same path.</p>
</blockquote>

<p><code>isfile</code> and <code>endswith</code> are boolean functions, so you can directly return the result of the function. In a slightly more concise way:</p>

<pre><code>def _is_file_ok(self):
    if os.path.isfile(self.file_path):
        return self.file_path.endswith('.csv')
    else:
        return False
</code></pre>

<p>On a final note, I also agree that Pandas would do the job fine with much less code.</p>
    </div>