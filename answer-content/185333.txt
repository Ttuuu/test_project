<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>When building a string you should build a list, and then use <code>''.join()</code>. This is as strings are immutable, and so generating <code>newWord</code> takes \$O(n^2)\$ time.</li>
<li>You are mannually poping <code>pos</code> from <code>value</code>. If you change <code>value</code> to a list, you can just use <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="noreferrer"><code>list.pop</code></a>.</li>
<li>You should <code>import random</code> at the top of your code. Never in a function.</li>
<li>Common Python style is to use <code>snake_case</code> for variables.</li>
<li>Common Python style is to use <code>_</code> as a throw away variable.</li>
<li>You can use <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="noreferrer"><code>random.randrange</code></a>, rather than <code>randint</code></li>
<li>It's best if you <code>return</code> rather than <code>print</code> your anagram.</li>
</ul>

<p>And so you could use:</p>

<pre><code>def anagram(value):
    new_word = []
    value = list(value)
    for _ in range(len(value)):
        pos = random.randrange(len(value))
        new_word.append(value.pop(pos))
    return ''.join(new_word)
</code></pre>

<p>This however runs in \$O(n^2)\$ time. If you use a <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="noreferrer">Fisherâ€“Yates shuffle</a>, you can do this in \$O(n)\$ time.</p>

<pre><code>def anagram(value):
    value = list(value)
    for i in range(len(value)):
        pos = random.randrange(i, len(value))
        value[i], value[pos] = value[pos], value[i]
    return ''.join(value)
</code></pre>

<hr>

<p>You can also use <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="noreferrer"><code>random.shuffle</code></a>, which likely also uses the above algorithm. However you won't have to maintain it. Allowing:</p>

<pre><code>def anagram(value):
    value = list(value)
    random.shuffle(value)
    return ''.join(value)
</code></pre>
    </div>