<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<ul>
<li><strong>Avoided Global vars</strong> Nice job using <code>let</code> inside an IIFE to prevent the scope of variables from becoming global. </li>
<li><strong>Caching DOM Elements</strong> good job storing references to DOM elements in variables.  </li>
<li><strong>Strict Comparison operators</strong> The code uses strict comparison operators (e.g. <code>if(numSquares === 6) {</code>) which avoids useless type conversions.</li>
</ul>

<h2>Suggestions</h2>

<ul>
<li><strong>Use <code>const</code></strong> Any variable that doesn't get re-assigned can be declared with <code>const</code> to avoid accidental re-assignment</li>
<li><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for..of</code></a> loops</strong> some <code>for</code> loops could be transformed using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loops to simplify accessing each element in the array. For instance,</p>

<blockquote>
<pre><code>function changeColors(color) {
    for(let i = 0; i &lt; squares.length; i++) {
        squares[i].style.background = color;
    }
} 
</code></pre>
</blockquote>

<p>could be simplified to something like the following:</p>

<pre><code>function changeColors(color) {
    for(const square of squares) {
        square.style.background = color;
    }
}
</code></pre></li>
<li><p><strong>Excessive CSS</strong> The rule <code>font-family: "Montserrat", "Avenir";</code> under <code>button</code> seems redundant, since that cascades from the same rule under <code>body</code></p></li>
</ul>
    </div>