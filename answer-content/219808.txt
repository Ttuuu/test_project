<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>See, I saw your question on StackOverflow the other day before it was moved here but thought to answer nevertheless.  </p>

<p>Imo, the way to go is to write yourself a grammar/parser and a <code>NodeVisitor</code> class. This is formulate little parts in a first step and then glue them all together afterwards.</p>

<pre><code>from parsimonious.grammar import Grammar
from parsimonious.nodes import NodeVisitor

data = """
############################################
# Comments begin with '#'
############################################

[lj_pairs] # Section 1
    indices:    0 2
#  ID      eps    sigma
    1       2.344   1.234   5
    2       4.423   5.313   5
    3       1.573   6.321   5
    4       1.921   11.93   5

[bonds]
indices:    0 1
    2   4.234e-03   11.2
    6   -0.134545   5.7
"""

grammar = Grammar(
    r"""
    expr        = (entry / garbage)+
    entry       = section garbage indices (valueline / garbage)*
    section     = lpar word rpar

    indices     = ws? "indices:" values+
    garbage     = ((comment / hs)* newline?)*

    word        = ~"\w+"

    values      = float+
    valueline   = values newline?

    float       = hs? ~"[-.e\d]+" hs?

    lpar        = "["
    rpar        = "]"

    comment     = ~"#.+"
    ws          = ~"\s*"
    hs          = ~"[\t\ ]*"

    newline     = ~"[\r\n]"
    """
)

tree = grammar.parse(data)

class DataVisitor(NodeVisitor):
    def generic_visit(self, node, visited_children):
        return visited_children or node

    def visit_int(self, node, visited_children):
        _, value,_ = visited_children
        return int(value.text)

    def visit_float(self, node, visited_children):
        _, value, _ = visited_children
        return value.text

    def visit_section(self, node, visited_children):
        _, section, _ = visited_children
        return section.text

    def visit_indices(self, node, visited_children):
        *_, values = visited_children
        return values[0]

    def visit_valueline(self, node, visited_children):
        values, _ = visited_children
        return values

    def visit_garbage(self, node, visited_children):
        return None

    def visit_entry(self, node, visited_children):
        section, _, indices, lst = visited_children
        values = [item[0] for item in lst if item[0]]

        return (section, {'indices': indices, 'values': values})

    def visit_expr(self, node, visited_children):
        return dict([item[0] for item in visited_children if item[0]])

d = DataVisitor()
out = d.visit(tree)
print(out)
</code></pre>

<p>Which will yield</p>

<pre><code>{
 'lj_pairs': {'indices': ['0', '2'], 'values': [['1', '2.344', '1.234', '5'], ['2', '4.423', '5.313', '5'], ['3', '1.573', '6.321', '5'], ['4', '1.921', '11.93', '5']]}, 
  'bonds': {'indices': ['0', '1'], 'values': [['2', '4.234e-03', '11.2'], ['6', '-0.134545', '5.7']]}
}
</code></pre>

<p>If you - or anybody else - are interested, I'd add some explanation as well.</p>
    </div>