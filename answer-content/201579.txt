<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Use variables effectively</h2>

<p>The code begins with this:</p>

<pre><code>SEXP cumall_impl(SEXP x) {
    SEXP res = PROTECT(allocVector(LGLSXP, XLENGTH(x)));
    R_xlen_t n = XLENGTH(x);
</code></pre>

<p>However, there's not really any reason not to define and use <code>n</code> first:</p>

<pre><code>SEXP cumall_impl(SEXP x) {
    R_xlen_t n = XLENGTH(x);
    SEXP res = PROTECT(allocVector(LGLSXP, n));
</code></pre>

<h2>Use all required <code>#include</code>s</h2>

<p>The code uses <code>memset</code> and so it should also have this line:</p>

<pre><code>#include &lt;string.h&gt;
</code></pre>

<p>Even though it happens to compile because some of the R libraries probably also include that, it's important to make sure that the code does not rely on undocumented interface assumptions.</p>

<h2>Use a single loop over all elements</h2>

<p>The code uses <code>memset</code> to initialize all values to <code>FALSE</code> and then sets the first value explicitly and then loops through all other values.  I'd be inclined instead to recode that as a single <code>for</code> loop instead:</p>

<pre><code>int prev = TRUE;
for (R_xlen_t i = 0; i &lt; n; ++i) {
    if (p_x[i] == TRUE)
        p_res[i] = prev;
    else if (p_x[i] == NA_LOGICAL)
        p_res[i] = NA_LOGICAL;
    else
        p_res[i] = FALSE;
    prev = p_res[i];
}
</code></pre>

<p>Writing it this way avoids the need for the <code>if (n == 0)</code> construct and also eliminates the need for the <code>memset</code>.</p>

<p><strong>Note:</strong> Ordinarily, we'd prefer to use a <code>switch</code> there instead of a chained <code>if..else</code> but we're prevented from doing so because <code>NA_LOGICAL</code> does not evaluate to an integer constant the way it's defined in R.</p>
    </div>