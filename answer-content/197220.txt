<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since @TobySpeight has already posted a wonderful answer, I'm not going to repeat what he has already posted.</p>

<p>Just some small additional notes:</p>

<ul>
<li><p><code>String_allocate_space</code> allocates 1 <code>char</code>s worth of memory if the <code>capacity</code> is 0. This is barely enough to hold the terminating <code>'\0'</code> character, but nothing more. Maybe increase the default minimal allocation size a bit to be meaningful?</p></li>
<li><p>Also, regarding naming: If I see a function called <code>String_free</code>, I'd expect a function <code>String_alloc</code> that allocates and creates the <code>String</code> object in a well-defined state. (And consequently, <code>String_free</code> should then deallocate that <code>String</code> correctly.)</p></li>
</ul>

<p>Also, this might just be me, but from the task description I'd expect the solution to be a <code>char *read_input(void)</code> function. While the <code>String</code> "class" is nice, it seems like a bit of over-engineering for the task at hand.</p>

<p>For comparison, look at this solution:</p>

<pre><code>#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define INITIAL_INPUT_CAPACITY 4

char *read_input(void) {
    size_t capacity = INITIAL_INPUT_CAPACITY;
    size_t size = 0;
    char *str = malloc(capacity * sizeof(char));
    int input;

    while((input = getc(stdin)) != EOF) {
        if(isspace(input)) break;

        str[size++] = (char)input;

        if(size == capacity) {
            capacity *= 2;
            char *temp = realloc(str, capacity * sizeof(char));

            if(temp == NULL) {
                exit(-1);
            }

            str = temp;
        }
    }

    str[size++] = '\0';

    return str;
}

int main(void) {
    char *input = read_input();
    puts(input);
    free(input);

    getchar();
    return 0;
}
</code></pre>
    </div>