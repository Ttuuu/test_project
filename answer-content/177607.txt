<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tend to avoid <code>else if</code> statements. If I’m just checking conditions and manipulating a value, then I’ll return in multiple <code>if</code> statements like this:</p>

<pre><code>private int Calculate(string sAction)
{
    int iTotal = 0;

    if(sAction == "Add")
    {
        return X+Y;
    }

    if(sAction == "Subtract")
    {
       return X-Y;
    }     

    // No if statements entered.
    // Just return original value.

    return iTotal;
}
</code></pre>

<p>But, looking at your arguments, I’d say it’s a good candidate for the Strategy pattern. In fact, the <a href="https://en.wikipedia.org/wiki/Strategy_pattern#C.23" rel="nofollow noreferrer">Wikipedia entry on the Strategy pattern</a> covers this very scenario! You could have a factory that returns the correct strategy, and then call that:</p>

<pre><code>private int Calculate(string sAction)
{
    int iTotal = 0;

    CalculateActionFactory factory = new CalculateActionFactory;

    ICalculateAction action = factory.StrategyFor(sAction);

    return action.Execute(X, Y);
}

public class CalculateActionFactory
{
    public ICalculateAction StrategyFor(string Action)
    {
        switch (Action)
        {
            case "Add":
                return new AddAction;

            case "Minus":
                return new MinusAction;
        }

        throw new System.ArgumentException("Invalid action specified.");
    }
}

public interface ICalculateAction
{
    int Execute(int X, int Y);
}

public class AddAction : ICalculateAction
{
    public int Execute(int X, int Y)
    {
        return X+Y;
    }
}

public class MinusAction : ICalculateAction
{
    public int Execute(int X, int Y)
    {
        return X-Y;
    }
}
</code></pre>

<p><em><strong>Disclaimer:</strong> I’m not a C# developer, so apologies if the syntax is off!</em></p>
    </div>