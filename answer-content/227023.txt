<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>def sieve_eratosthenes(limit):
    if limit &lt;= 1:
        return []

    primes = [True] * limit
    for base in range(2, int(limit**0.5 + 1)):
        if primes[base]:
            primes[base * base::base] = [False] * ((limit - 1) // base - base + 1)

    primes[0] = primes[1] = False
    return list(compress(range(limit), primes))
</code></pre>
</blockquote>

<p>No attempt at all to use a wheel? I get roughly a 25% speedup just by special-casing the prime 2 with:</p>

<pre><code>def sieve_eratosthenes_wheel(limit):
    if limit &lt;= 1:
        return []

    primes = [True] * limit
    if limit &gt; 4:
        primes[4::2] = [False] * ((limit - 1) // 2 - 2 + 1)

    for base in range(3, int(limit**0.5 + 1), 2):
        if primes[base]:
            # We require off + (len-1)*step &lt; limit &lt;= off + len*step
            # So len = ceil((limit - off) / step)
            primes[base*base::2*base] = [False] * ((limit - base*base + 2*base - 1) // (2*base))

    primes[0] = primes[1] = False
    return list(compress(range(limit), primes))
</code></pre>

<p>Using primes 2 and 3 it's possible to do two range updates with step sizes of <code>6*base</code>, but it gets more complicated to calculate the initial offsets, which depend on <code>base % 6</code>:</p>

<pre><code>def sieve_eratosthenes_wheel3(limit):
    if limit &lt;= 1:
        return []

    primes = [True] * limit
    def mark_composite(off, step):
        # We require off + (len-1)*step &lt; limit &lt;= off + len*step
        # So len = ceil((limit - off) / step)
        primes[off::step] = [False] * ((limit - off + step - 1) // step)

    mark_composite(4, 2)
    mark_composite(9, 6)
    base = 5
    max_base = int(limit**0.5)
    while base &lt;= max_base:
        # base == 5 (mod 6)
        if primes[base]:
            mark_composite(base*base, 6*base)
            mark_composite(base*(base+2), 6*base)
        base += 2
        # base == 1 (mod 6)
        if primes[base]:
            mark_composite(base*base, 6*base)
            mark_composite(base*(base+4), 6*base)
        base += 4

    primes[0] = primes[1] = False
    return list(compress(range(limit), primes))
</code></pre>

<p>For <code>limit</code> 50 million, taking <code>sieve_eratosthenes</code> as the baseline of 100 time units, I measure <code>sieve_eratosthenes_wheel</code> at about 73 time units and <code>sieve_eratosthenes_wheel3</code> at about 63 time units.</p>
    </div>