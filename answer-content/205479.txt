<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Chris has made some good UX improvements, and mentioned some nice code review points.  I won’t duplicate those.</p>

<p>He also fell into the same trap: recursion is not meant as a looping substitute!</p>

<pre><code>def numberGuessGame():
    ...
               return numberGuessGame() if input("play again?(y/any key to exit) ").lower() == 'y' else 0
    ...
</code></pre>

<p>If Python had tail-recursion-optimization, you could almost argue this as valid, reasonable code.  But <a href="https://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion">it doesn’t</a>, so you can’t.</p>

<p>Consider: to test your code, I might write a program which runs your program, and plays for say 1,000,000 games.  Perhaps it is some kind of neural network and it is learning how to best play; maybe 1,000,000 games is a reasonable training set.  But your program will quickly crash with a stack-overflow, because each game doesn’t return until the last game has been played.</p>

<p>Instead of using recursion, how about using a loop?</p>

<pre><code>def numberGuessGame():
    play_again = 'y'            # play the first time
    while play_again == 'y':

        ...
        while True:
            ...
                if number == guess:
                    print("Correct guess\n")
                    break
            ...

        play_again = input("play again?(y/any key to exit) ").lower()
</code></pre>
    </div>