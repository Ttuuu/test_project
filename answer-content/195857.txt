<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why not just return the result instead of having it as a parameter?:</p>

<pre><code>public static TimeSpan Invoke(Action action)
{
  var stopWatch = Stopwatch.StartNew();
  action();
  stopWatch.Stop();
  return stopWath.Ellapsed;
}
</code></pre>

<hr>

<p>What is often tedious is to write the result every time you measure something. I use a simple solution with an IDisposable implementation allowing me to wrap the code I want to measure in a <code>using</code> statement. The result is then automatically printed when the object is disposed by leaving the using statement:</p>

<pre><code>  public class StopClock : IDisposable
  {
    Stopwatch m_watch;
    string m_title;

    public StopClock(string title = "Test 1")
    {
      m_watch = Stopwatch.StartNew();
      m_title = title;
    }

    public Stopwatch Stop()
    {
      if (m_watch != null)
      {
        m_watch.Stop();
      }

      return m_watch;
    }

    public void Print()
    {
      if (m_watch != null)
      {
        Console.WriteLine($"{m_title}: Duration: {m_watch.ElapsedMilliseconds} ({m_watch.ElapsedTicks})");
      }
    }

    public void Dispose()
    {
      Stop();
      Print();
    }
  }
</code></pre>

<p><strong>Usage:</strong></p>

<pre><code>using (StopClock sc = new StopClock("First Test"))
{
  // Execute the code to be measured
  Thread.Sleep(1000);
} // At this point, the result is automatically written to the console.
</code></pre>

<p><strong>Or:</strong></p>

<pre><code>StopClock sc = new StopClock("First Test");

// Execute the code to be measured
Thread.Sleep(1000);

sc.Stop();

// Do some more code.
// ...

sc.Print();
</code></pre>

<p>It can easily be refined with the possibility to inject another output mechanism than <code>Console.WriteLine()</code> for instance <code>Debug.WriteLine()</code> or to an output file.</p>
    </div>