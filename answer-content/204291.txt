<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strong><code>check</code></strong> features a well-known anti-idiom:</p>

<pre><code>if (condition) {
    return false;
}
return true;
</code></pre>

<p>is a long way to say</p>

<pre><code>return !condition;
</code></pre></li>
<li><p>Testing for <code>j == N - 1</code> in a loop looks unappealing. The code would be much cleaner if the inner loop (which actually decides on the problem) were factored out into a function:</p>

<pre><code>bool is_position_valid(....)
{
    ....
    for (int j = 0; j &lt; N; j++) {
        if (check(....)) {
            paint(....);
        } else {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>and the caller produced the required output.</p></li>
<li><p>The complexity is quadratic in both time and space. There is a way to drive the down to linear: have 4 arrays of sizes <code>N, N, 2*N - 1, 2*N - 1</code> (for files, ranks, and left and right diagonals respectively), and for each queen mark a corresponding entry as taken; if the entry is already taken the position is invalid.</p></li>
</ul>
    </div>