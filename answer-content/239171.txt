<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, which recommends using <code>lower_case</code> for both functions and variables. Since this is a programming challenge, you can probably not change the function name, but the variable names are fully under your control. PEP 8 also recommends surrounding <code>=</code> with spaces when used for assignment and the same for binary operators (like <code>!=</code>, but also augmented assignment like <code>+=</code>).</p>

<p>Imports should usually go into the global scope, at the top of your code. One exception are functions that are used only for testing and would pollute the global namespace unnecessarily, but this is not the case here. </p>

<p>In general, empty collections are falsey in Python, and non-empty collections are truthy. This means that instead of <code>while len(delList)!=0</code> you can just do <code>while delList</code>.</p>

<p>You have a potential bug / the problem description is not explicit enough / their tests don't have enough coverage. You count all streaks of at least length six, the text reads such that only streaks of exactly length six count. But apparently their tests don't throw longer streaks at your code, or implement something different from the problem description as well.</p>

<p>Don't be afraid to use Python's standard library, it has many tools that can make your life a lot easier. In this case I would use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby</code></a> to group the tosses by their result. After this it becomes very easy to get the length of each streak and count all instances of that length being at least six using a <a href="https://wiki.python.org/moin/Generators" rel="noreferrer">generator expression</a> with the built-in function <code>sum</code>:</p>

<pre><code>from itertools import groupby

def streakFinder(tosses):
    return sum(1 for _, streak in groupby(tosses) if len(list(streak)) &gt;= 6)
</code></pre>

<p>This should be significantly faster than your solution as well, because it only goes through the list exactly once. Your code has repeated calls to <code>list.index</code>, which starts iterating at the front every time.</p>

<p>Note that the random toss generation, which in the problem description is recommended to use <code>random.randint</code> and which you do not show, could be very short using <a href="https://docs.python.org/3/library/random.html#random.choices" rel="noreferrer"><code>random.choices</code></a>:</p>

<pre><code>import random

tosses = random.choices(["H", "T"], k=100)
</code></pre>
    </div>