<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is a minor thing but I think it's worth mentioning.
You can combine several using blocks into a single one, which will reduce the nesting (indentation) level.</p>
<p>So in case of .NET Framework 4.8 you can do this:</p>
<pre><code>public string Encrypt(byte[] key, string plainText)
{
    using (var rng = new RNGCryptoServiceProvider())
    {
        //Generate random IV
        var iv = new byte[16];
        rng.GetBytes(iv);

        //Use CBC and PKCS7 Padding
        using (var aesAlg = new AesManaged { Key = key, IV = iv, Mode = CipherMode.CBC, Padding = PaddingMode.PKCS7 })
        using (var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV))
        using (var msEncrypt = new MemoryStream())
        using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
        {
            using (var swEncrypt = new StreamWriter(csEncrypt, Encoding.UTF8))
                swEncrypt.Write(plainText);

            //The final "format" is that we prefix te01:: to indicate that this library generated this data, and 01 as a version.
            //Then we prefix the 16 IV bytes onto the encrypted payload and base 64 encode this.
            var encrypted = msEncrypt.ToArray();
            var finalData = iv.Concat(encrypted).ToArray();

            return $"te01::{Convert.ToBase64String(finalData)}";
        }
    }
}
</code></pre>
<p>In case of .NET Core 3, where C# 8 is available, you can take advantage of <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement" rel="nofollow noreferrer">using statements</a>, which can further streamline your code:</p>
<pre><code>public string Encrypt(byte[] key, string plainText)
{
    using var rng = new RNGCryptoServiceProvider();
    //Generate random IV
    var iv = new byte[16];
    rng.GetBytes(iv);

    //Use CBC and PKCS7 Padding
    using var aesAlg = new AesManaged { Key = key, IV = iv, Mode = CipherMode.CBC, Padding = PaddingMode.PKCS7 };
    using var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
    using var msEncrypt = new MemoryStream();
    using var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);
    using (var swEncrypt = new StreamWriter(csEncrypt, Encoding.UTF8))
        swEncrypt.Write(plainText);

    //The final "format" is that we prefix te01:: to indicate that this library generated this data, and 01 as a version.
    //Then we prefix the 16 IV bytes onto the encrypted payload and base 64 encode this.
    var encrypted = msEncrypt.ToArray();
    var finalData = iv.Concat(encrypted).ToArray();

    return $"te01::{Convert.ToBase64String(finalData)}";
}
</code></pre>
<hr>
<p>If memory usage is a concern for you then I would recommend to consider:</p>
<ul>
<li><a href="https://stackoverflow.com/a/54132397/13268855">Span</a> object</li>
<li><a href="https://github.com/microsoft/Microsoft.IO.RecyclableMemoryStream" rel="nofollow noreferrer">RecyclableMemoryStream</a></li>
</ul>
    </div>