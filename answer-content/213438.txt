<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Dependency Injection &amp; Responsibility</h1>

<p>Currently your constructor delegates the <code>wordListFilename</code> to the <code>WordReader</code>, which you build there with <code>new</code>.  </p>

<pre class="lang-java prettyprint-override"><code>public WordChainBuilder(String wordListFilename) {
    wordReader = new WordReader(wordListFilename);
}
</code></pre>

<p>The relationship between <code>WordChainBuilder</code> and <code>WordReader</code> is called <a href="https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition">composition</a> in UML.</p>

<p>Imagine you want to write a Unit-Test and a Unit-Test has to be fast and has to test only one unit. A test for <code>WordChainBuilder</code> can't be a Unit-Test because it depends on the file system via <code>WordReader</code> and is therefore not fast.</p>

<p>Imagine <code>WordChainBuilder</code> should now read files from a database. We have to change the constructor.</p>

<p>The definition of Robert C. Martin for responsibilities is "<em>There should never be more than one reason for a class to change</em>"</p>

<p>So <code>WordChainBuilder</code> have still more than one responsibility: reading words and build the chain.</p>

<p>The responsibility should only be to build the chain. If you create an interface called <code>WordProvider</code>, you can easily switch from a file reader to a database reader, assume they are of type<code>WordProvider</code>.</p>

<p>Let's change the composition to aggregation:</p>

<pre class="lang-java prettyprint-override"><code>public WordChainBuilder(WordProvider provider) {
    this.provider = provider;
}
</code></pre>

<p>Now it is possible to write unit-tests, since <code>WordChainBuilder</code> doesn't depend directly on the file-system anymore and we could write a <a href="https://en.wikipedia.org/wiki/Mock_object" rel="nofollow noreferrer">Mock</a> and inject it to <code>WordChainBuilder</code>.</p>

<h1>The <a href="https://en.wikipedia.org/wiki/Value_object" rel="nofollow noreferrer">Value Object</a> <code>Word</code></h1>

<blockquote>
  <p>a value object is a small object that represents a simple entity whose equality is not based on identity: i.e. two value objects are equal when they have the same value</p>
</blockquote>

<p>In your code base I read often <code>word</code> but it is from type <code>String</code>. Why don't you create a class for it?</p>

<p>The statement <code>start.length() != destiny.length()</code> could be written as <code>start.hasEqualLength(destiny)</code>. The implementation <code>OneLetterDifference</code> of a FunctionalInterface is actually a method that belongs to the class <code>Word</code>, because you compare to Strings that represents a <code>Word</code>.</p>
    </div>