<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can avoid creating pairs that will be discarded as duplicates.  Just advance to the next <em>different</em> value instead of simply the next value here:</p>

<pre><code>            pairs.add(new Pair(input[low], input[high]));
            high--;
            low++;
</code></pre>

<p>then becomes</p>

<pre><code>            pairs.add(new Pair(numbers[low], numbers[high]));
            for (final int n = numbers[high--];  low &lt; high &amp;&amp; numbers[high] == n;  --high)
                ;
            for (final int n = numbers[low++];   low &lt; high &amp;&amp; numbers[low]  == n;  ++low)
                ;
</code></pre>

<p>And then we can use a plain list instead of a set:</p>

<pre><code>public static List&lt;Pair&gt; findAllPairs(int input[], int target) {
    int numbers[] = Arrays.copyOf(input, input.length);
    Arrays.sort(numbers);

    ArrayList&lt;Pair&gt; pairs = new ArrayList&lt;&gt;();
    for (int low = 0, high = input.length - 1;  low &lt; high;  ) {
        int sum = numbers[low] + numbers[high];

        if (sum &gt; target) {
            --high;
        } else if (sum &lt; target) {
            ++low;
        } else {
            pairs.add(new Pair(numbers[low], numbers[high]));
            for (final int n = numbers[high--];  low &lt; high &amp;&amp; numbers[high] == n;  --high)
                ;
            for (final int n = numbers[low++];   low &lt; high &amp;&amp; numbers[low]  == n;  ++low)
                ;
        }
    }

    return pairs;
}
</code></pre>
    </div>