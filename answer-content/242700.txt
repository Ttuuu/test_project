<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I just found a really clever solution to this (not mine):</p>

<p>All credit goes to ViolaCrellin:</p>

<pre><code>using System;
using System.Linq;
using System.Collections.Generic;

public class JosephusSurvivor
{
    public static int JosSurvivor(int n, int k)
    {
        if (n == 1)
          return 1;
        else
          return (JosSurvivor(n - 1, k) + k-1) % n + 1;
     }
}
</code></pre>

<p>Very nice solution :)! </p>

<p><strong>Thanks for the answers everyone!</strong></p>

<hr>

<p><strong>Updated</strong> by Henrik Hansen</p>

<p>This is an implementation of the <a href="https://en.wikipedia.org/wiki/Josephus_problem" rel="nofollow noreferrer">formula on wiki</a></p>

<p>Recursive functions always has the potential to overflow the stack, so whenever you can, you should convert it to an iterative approach, which is also almost faster than using recursion:</p>

<pre><code>public static int JosSurvivor(int n, int k)
{
  int result = 1;
  for (int i = 2; i &lt;= n; i++)
  {
    result = (result + k - 1) % i + 1;
  }
  return result;
}
</code></pre>
    </div>