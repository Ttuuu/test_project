<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider naming the function for <em>the result it produces</em> rather than <em>the algorithm used</em>.  The user of the function generally doesn't care how the result is found, and will not mind if we change to a different algorithm in future versions, as long as it returns the minimum spanning tree of the input nodes.</p>

<p>Avoid <code>using namespace std;</code> - that's a very large (and changing) namespace, and it's much safer and clearer to use qualified names where you need them.</p>

<p>We are missing an include of <code>&lt;utility&gt;</code> for the use of <code>std::pair</code>.  That said, the nested pair looks like a candidate for <code>std::tuple</code> or, more likely, a <code>struct</code> with proper names for its elements.</p>

<p>The function doesn't need to modify the contents of <code>graph</code>, so there's no need to make a copy; we should pass by const-ref instead.  Do we really need the <code>number_of_nodes</code> argument?  I think that's just the inner vector's length.</p>

<p>We could use <code>std::iota</code> instead of a loop to populate <code>unvisited</code>:</p>

<pre><code>#include &lt;numeric&gt;

    unvisited.resize(number_of_nodes - 1);
    std::iota(unvisited.begin(), unvisited.end(), 1);
</code></pre>

<p>Similarly, for finding the shortest edge, we could use <code>std::min_element()</code> instead of our own loop.  Or we could keep track of the minimum as we examine the lengths, instead of populating a vector and then searching it.</p>

<p>I think that a <code>std::set</code> would be a more suitable storage for <code>unvisited</code>.  That would enable more efficient membership test and removal.  The <code>result</code> and <code>visited</code> vectors can be given sufficient capacity for the number of elements they will hold at the end using <code>reserve</code>.</p>

<hr>

<p>Here's what I get after making these improvements:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;climits&gt;
#include &lt;set&gt;
#include &lt;vector&gt;

struct Edge
{
    // A---------B
    //   length
    int a;
    int b;
    int length;
};

std::vector&lt;Edge&gt; minimum_spanning_tree(const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; graph)
{
    std::set&lt;int&gt; unvisited;
    std::vector&lt;int&gt; visited;
    std::vector&lt;Edge&gt; result;

    auto const number_of_nodes  = graph.size();

    // mark first as visited and mark the rest as unvisited
    visited.reserve(number_of_nodes);
    visited.push_back(0);
    for (auto i = 1u;  i &lt; number_of_nodes;  ++i)
        unvisited.insert(i);
    result.reserve(number_of_nodes - 1);

    while (!unvisited.empty()) {
        Edge the_shortest = { -1, -1, INT_MAX };
        //put all edges (with their lengths) from nodes that are in visited
        for (auto node: visited) {
            auto const&amp; lengths = graph[node];
            for (auto sec_node = 0u;  sec_node &lt; lengths.size();  ++sec_node) {
                auto const length = lengths[sec_node];
                if (length &gt; 0 &amp;&amp; length &lt; the_shortest.length
                               &amp;&amp; unvisited.count(sec_node)) {
                    // our new closest node
                    the_shortest = {node, (int)sec_node, length};
                }
            }
        }

        //add the shortest path to the result
        result.push_back(the_shortest);

        // mark the destination as visited
        unvisited.erase(the_shortest.b);
        visited.push_back(the_shortest.b);
    };
    return result;
}
</code></pre>



<pre><code>#include &lt;iostream&gt;

int main()
{
    /*
       2    3
   (0)--(1)--(2)
    |   / \   |
   6| 8/   \5 |7
    | /     \ |
   (3)-------(4)
         9          */
    std::vector&lt;std::vector&lt;int&gt;&gt; graph =
                     {{{0, 2, 0, 6, 0},
                       {2, 0, 3, 8, 5},
                       {0, 3, 0, 0, 7},
                       {6, 8, 0, 0, 9},
                       {0, 5, 7, 9, 0},
    }};

    auto result = minimum_spanning_tree(graph);
    for (auto const&amp; i: result) {
        std::cout &lt;&lt; "EDGE [ " &lt;&lt; i.a &lt;&lt; ", " &lt;&lt; i.b &lt;&lt; "], length: " &lt;&lt; i.length &lt;&lt; '\n';
    }
}
</code></pre>
    </div>