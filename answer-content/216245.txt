<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider setting <code>-e</code> and <code>-u</code> to make the script abort on some common failures, rather than wildly continuing.  The existing script has almost no error checking; as a simple example, closing standard input will lead to an infinite loop repeatedly executing <code>read</code>.</p>

<p>Instead of using non-standard <code>echo -e</code> to prompt, prefer to supply the prompt as argument to <code>read</code>:</p>

<pre><code>        read -p "Path of target directory? " target_directory
</code></pre>

<p>Instead of merely checking that the directory path is a non-empty string with <code>[[ -z ]]</code>, we should probably be checking that it's a real directory, with <code>[ -d ]</code>.</p>

<p>Output lines should end with newline, and should generally not begin with newline.  And error messages should go to the standard error stream (<code>&gt;&amp;2</code>) rather than to standard output.</p>

<p>There are some quotes needed when expanding pathname variables - at present, any filenames including whitespace will be seen as two or more arguments.</p>

<p>Testing <code>$?</code> is an antipattern.  This block:</p>

<blockquote>
<pre><code>sleep .5

if [[ "$?" == "0" ]]; then
    echo -e "\nTransfer complete!"
elif [[ "$?" != "0" ]]; then
    echo -e "\nError in transfer! Please refer to error_log.txt!"
fi
</code></pre>
</blockquote>

<p>can be written much more simply as</p>

<pre><code>if sleep .5
then
    echo "Transfer complete!"
else
    echo "Error in transfer! Please refer to error_log.txt!"
fi
</code></pre>

<p>(though I suspect you actually meant to test the exit code of a different command to the <code>sleep</code>).</p>

<p>Finally, run Shellcheck on the code.  I get far too many warnings (some of which I've already identified above):</p>

<pre class="lang-none prettyprint-override"><code>shellcheck -f gcc  216201.sh
216201.sh:7:14: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:7:16: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:7:66: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:7:68: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:13:17: note: read without -r will mangle backslashes. [SC2162]
216201.sh:18:22: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:19:13: note: read without -r will mangle backslashes. [SC2162]
216201.sh:24:22: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:25:13: note: read without -r will mangle backslashes. [SC2162]
216201.sh:30:22: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:31:13: note: read without -r will mangle backslashes. [SC2162]
216201.sh:36:22: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:37:13: note: read without -r will mangle backslashes. [SC2162]
216201.sh:42:22: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:43:13: note: read without -r will mangle backslashes. [SC2162]
216201.sh:48:14: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:48:43: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:48:45: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:58:14: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:58:16: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:58:67: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:58:69: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:62:9: note: read without -r will mangle backslashes. [SC2162]
216201.sh:69:13: note: read without -r will mangle backslashes. [SC2162]
216201.sh:76:9: note: read without -r will mangle backslashes. [SC2162]
216201.sh:79:26: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:80:17: note: read without -r will mangle backslashes. [SC2162]
216201.sh:88:14: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:88:45: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:90:36: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:91:11: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:92:8: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:93:22: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:94:59: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:95:22: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:96:21: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:97:13: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:99:87: note: Double quote to prevent globbing and word splitting. [SC2086]
216201.sh:106:14: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:111:11: note: Check exit code directly with e.g. 'if mycmd;', not indirectly with $?. [SC2181]
216201.sh:112:18: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:113:13: note: Check exit code directly with e.g. 'if mycmd;', not indirectly with $?. [SC2181]
216201.sh:114:18: note: Backslash is literal in "\n". Prefer explicit escaping: "\\n". [SC1117]
216201.sh:122:1: note: read without -r will mangle backslashes. [SC2162]
</code></pre>
    </div>