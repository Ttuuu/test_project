<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Reviewing complexity</h1>

<p>So far only one answer has addressed the complexity issue, and is a considerable improvement over your solution. As the existing answers have addressed code style I will stick to the complexity as there is a less complex solution.</p>

<h2>Looking both ways!?</h2>

<p>Your solution is looking in both direction to find the next peak and thus calculate the volume trapped. You do this for each elevation and thus get a complexity of <span class="math-container">\$O(n^2)\$</span> and <span class="math-container">\$O(1)\$</span> storage.</p>

<p>One answer's suggestion is to store the max values for quick reference which means you will need to increase the storage to <span class="math-container">\$O(n)\$</span> in order to get <span class="math-container">\$O(n)\$</span> complexity which is a much better approach.</p>

<p>However the extra storage can be avoided.</p>

<h2>Look behind.</h2>

<p>To solved in <span class="math-container">\$O(1)\$</span> storage and <span class="math-container">\$O(n)\$</span> complexity use a two pass method that tracks the peak elevation you have already passed over (look behind rather than look both ways)</p>

<p>One that passes from left to right checking all elevations and a second from right to left checking only to the highest peak found in the first pass. </p>

<p>At most you will pass over each elevation twice, and best case is if the right most elevation is the highest you need only pass over each elevation once.</p>

<p>This avoids the memory overhead and improves performance <sup><sup><sub><strong>[1]</strong></sub></sup></sup>, over the best solution so far suggested, by reducing the iterations to an average of <span class="math-container">\$n * 1.5\$</span> rather than  <span class="math-container">\$n * 2\$</span></p>

<p><sup><sup> <strong>[1]</strong> <em>Note performance does not mean complexity</em></sup></sup></p>

<h2>Example</h2>

<ul>
<li><span class="math-container">\$O(1)\$</span> storage, <span class="math-container">\$O(n)\$</span> complexity solution</li>
</ul>

<p>I checked its correctness against your function, (farmed to get a good volume of tests, thus far at half a billion tests on random data the two functions agree)</p>

<pre><code>function floodVolume(elevations) {
    var peakIdx, i = 0, peak = 0, volume = 0, total = 0;
    const depth = (i, elevation = elevations[i]) =&gt; {
        if (elevation &gt;= peak) {
            peak = elevation;
            peakIdx = i;
            total += volume;
            volume = 0;
        } else { volume += peak - elevation }
    }
    while (i &lt; elevations.length) { depth(i++) }
    const MAX_IDX = peakIdx;
    volume = peak = 0;
    while (i-- &gt;= MAX_IDX) { depth(i) }    
    return total;
}
</code></pre>
    </div>