<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Opportunities missed</h2>

<p>You have essentially the same algorithm in both examples. When I first looked at the solutions the sort at the start was a worry. The logic is sound, to work from the smallest word as there will be no more characters to test then is contained in that word.</p>

<p>However you have the sort AoT and the result is you set <code>first</code> to be the longest word in the array.</p>

<p>Changing the sort to be the other direction works great improving the performance near 3-4 times if there is a much shorter word in the array. However there is no real benefit with the sort if all the words are of similar length.</p>

<p>Another missed optimization is breaking out of the inner loop when you set <code>isDuplicates</code> to false. Adding a break saves having to do any further iteration and gives another 10% performance. BTW the name  <code>duplicates</code> would have just as much meaning.</p>

<h2><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search" rel="nofollow noreferrer">String.search(arg)</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" rel="nofollow noreferrer"><code>String.indexOf(arg)</code></a></h2>

<p>The real bottle neck is in the inner loop where you locate the current character <code>e</code> in the current word. <code>letters.search(e)</code></p>

<p>It may look innocent but this is where knowing the language well come into play. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search" rel="nofollow noreferrer">String.search(arg)</a> takes as the first argument a <code>regExp</code> but also works with just a string. The catch is that the string is first converted to a <code>regExp</code> before the search starts. This is a huge overhead.</p>

<p>If you use <code>String.indexOf</code> instead your code is almost twice as fast. I tried to write something that could beat it using Maps to reduce time complexity, and as such only starts to outperform when the word lengths get much longer 50+ characters.</p>

<h2>Rewrite</h2>

<p>So for small words your solution with slight modification is very fast.</p>

<ul>
<li>Sort now from smallest to largest,
Breaks from inner loop when no duplicates found.</li>
<li>Uses faster <code>String.indexOf</code> to do inner character search.</li>
</ul>

<p>And some name changes..</p>

<pre><code>function commonCharsNo(words) {
    const [first, ...rest] = words.sort((a, b) =&gt; (a.length - b.length));
    const duplicates = [];
    [...first].forEach(e =&gt; {
        let duplicate = true;
        for (let x = 0, len = rest.length; x &lt; len; x++) {
            let word = rest[x];
            const i = word.indexOf(e);
            if (i !== -1) {
                rest[x] = word.slice(0, i) + word.slice(i + 1);
            } else {
                duplicate = false;
                break;
            }
        }
        if (duplicate) {
            duplicates.push(e);
        }
    });
    return duplicates;
}
</code></pre>

<h2>Reduce complexity</h2>

<p>The <code>search</code> (now <code>indexOf</code>) is where the code gets poor complexity <span class="math-container">\$O(m)\$</span>. Its <span class="math-container">\$O(n.m)\$</span> where <span class="math-container">\$n\$</span> is the number of characters in the smallest word and <span class="math-container">\$m\$</span> is the mean number of characters per word.</p>

<p>You can reduce this to approx <span class="math-container">\$O(w.m)\$</span> where <span class="math-container">\$w\$</span> is the number of words and <span class="math-container">\$m\$</span> is the mean number of characters per word.</p>

<p>The improvement is small and only pays out for longer words.</p>

<pre><code>function findCommonChars(words) {
    var chars;
    const result = [];
    words = [...words.sort((a,b)=&gt;b.length - a.length)];
    const countChars = (word, res = new Map()) =&gt; {
        for (const char of word) {
            res.has(char) &amp;&amp; (!chars || chars.has(char)) ? 
                res.get(char)[0]++ : res.set(char, [1]);
        }
        return res;
    }
    chars = countChars(words.pop());
    const charCounts = words.map(word =&gt; countChars(word));
    for (let [char, count] of chars.entries()) {
        for (const word of charCounts) {
            if (word.has(char)) { count = Math.min(count, word.get(char)[0]) }
            else {
                count = 0;
                break;
            }
        }
        while (count--) { result.push(char) }
    }    
    return result;
}
</code></pre>
    </div>