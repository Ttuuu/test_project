<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code</h2>

<ul>
<li>Prefer <code>std::array</code> over plain C-style arrays. It has more normal copy / assignment semantics (which admittedly isn't relevant here), but also allows you to access the size directly from the array.</li>
<li><p>Naming:</p>

<ul>
<li><code>head</code> is usually used for the first populated element (of a list, for example). In this case it refers to the first empty space instead, so <code>next</code> might be a more appropriate name.</li>
<li><code>avg</code>, <code>itr</code>: prefer full names over abbreviations.</li>
<li><code>_mutex</code>: the underscore prefix is usually used to denote a member, but this is the only member that has one?</li>
<li><p><code>sum</code> would be a better name than <code>tmp</code>. It's also better to declare variables as close as possible to the point of use.</p>

<pre><code>double sum = 0.;
for (auto i : data) // range-based for loop for brevity
    sum += i;
</code></pre></li>
</ul></li>
<li><p>Sum loops like this may also be written using the <code>std::accumulate</code> algorithm:</p>

<pre><code>    #include &lt;numeric&gt;
    ...
    using std::begin;
    using std::end;
    auto sum = std::accumulate(begin(data), end(data), 0.0);
</code></pre></li>
<li><p>When referring to <code>_mutex</code> in member functions, the code uses <code>this-&gt;_mutex</code>. Which rather defeats the point of using the underscore prefix. No other members are referred to with <code>this-&gt;</code>.</p></li>
<li><p>The <code>itr</code> and <code>head</code> variables are unnecessary, as they can both be trivially calculated: <code>itr = counter / N; head = counter % N;</code></p></li>
<li><p>Getter functions, e.g.<code>count()</code>, <code>average()</code> should be <code>const</code>. Note that for this to compile, the mutex member must then be made <code>mutable</code> (one of the few instances where <a href="https://stackoverflow.com/questions/14131572/always-declare-stdmutex-as-mutable-in-c11"><code>mutable</code> is to be recommended</a>).</p></li>
</ul>

<hr>

<h2>Design</h2>

<p>This appears to be a Cumulative Moving Average. Data storage is actually unnecessary for such an average! (Which can be seen in the existing code since  the data is periodically overwritten. There is no advantage in creating an <code>Average&lt;double, 1297&gt;</code> over an <code>Average&lt;double, 1&gt;</code>. The <code>average()</code> function will return the same result for the same data regardless.)</p>

<p>Since the data is private and cannot be accessed externally, it becomes irrelevant... As such, most of the code can be deleted! :)</p>

<pre><code>class CumulativeMovingAverage
{
    std::size_t n;
    double average;

public:

    CumulativeMovingAverage(): n(0u), average(0.0) { }

    std::size_t get_count() const
    {
        return n;
    }

    double get_average() const
    {
        return average;
    }

    void update(double x)
    {
        // formula straight from wikipedia:
        //average = (x + n * average) / (n + 1u);
        //++n;

        // improved formula from Toby Speight (see comments):
        ++n;
        average += (x - average) / n;
    }
};
</code></pre>

<p>Thread safety / templateyness is left as an exercise to the reader (the original code looks correct to me).</p>
    </div>