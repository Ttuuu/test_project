<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems good.<br>
I noticed a couple of things, I will try to explain down below.</p>

<ol>
<li><strong>Lack of type definition</strong><br>
For the sake of readability, it would be great to have some type definitions to make the code look easier to read.</li>
</ol>

<pre><code>type ValueName = 'length' | 'index' | 'position';

interface Bounds {
    lowerBoundInclusive?: number;
    upperBoundInclusive?: number;
}

export class OutOfBoundsError extends AppError {
    // ...

    constructor(name: ValueName, value: number, bounds?: Bounds) {
        // ...
    }
}
</code></pre>

<p>Since <code>Bounds</code> is an structured type, it deserves to be an interface.<br>
The point of defining types is not just the code itself, helps in case of documentation, code hints (code completion, parameters information, ...) and reusability.<br>
In case of reusability, types should be separated from implementations.</p>

<hr>

<ol start="2">
<li><strong><code>message</code> internal property misplace</strong><br>
Inside your constructor, you are setting the value of <code>message</code>. Unlike Javascript, Typescript needs placeholders for internal properties.<br>
Maybe you had, indeed. Your code does not compile, otherwise.<br>
Anyways, internal properties must be declared between the class definition and its constructor.</li>
</ol>

<pre><code>export class OutOfBoundsError extends AppError {
    private message: string;

    constructor(name: ValueName, value: number, bounds?: Bounds) {
        // ...
    }
}
</code></pre>

<hr>

<ol start="3">
<li><strong>Truthy and falsy assertions</strong><br>
Avoid checking with explicit <code>undefined</code>, use <code>if (value)</code> instead.<br>
If value is a <code>number</code> type and in fact you are expecting a <code>0</code> to be a valid value, Javascript will coerce it into a <code>false</code>. In that case, check your value like so</li>
</ol>

<pre><code>if (value != null) {
   // ...
}
</code></pre>

<p>By checking with <code>null</code> with a single equal symbol, you are checking for <code>undefined</code> and <code>null</code>, as well.</p>

<hr>

<ol start="4">
<li><strong>Two or more depth levels</strong><br>
Functions should not have more than one depth level. Depth levels are done by using <code>if</code>, <code>for</code>, <code>while</code> and <code>switch</code>.<br>
Depth levels don't apply to inner functions, object or array instantiations, ...</li>
</ol>

<pre><code>interface ErrorMessageArgs {
    value: number;
    upper?: number;
    lower?: number;
}

export class OutOfBoundsError extends AppError {
    private message: string = ``;

    constructor(private name: ValueName, value: number, bounds?: Bounds) {
        super();

        const lower = bounds?.lowerBoundInclusive;
        const upper = bounds?.upperBoundInclusive;

        if (lower != null) {
          this.handleTruthyLower({value, upper});
        } else {
          this.handleFalsyLower({value, upper, lower});
        }
    }

    private handleFalsyLower = (args: ErrorMessageArgs) =&gt; {
        const { value, upper } = args;
        // ...
    }

    private handleTruthyLower = (args: ErrorMessageArgs) =&gt; {
        const { value, upper, lower } = args;
        // ...
    }
}
</code></pre>

<p>I decide to define yet another interface to wrap the error message arguments. By doing this, I can define both functions as monadic functions (just because of Robert).</p>

<blockquote>
  <p>The ideal number of arguments for a function is zero (niladic). Next comes one (monadic), followed closely by two (dyadic). Three arguments (triadic) should be avoided where possible. More than three (polyadic) requires very special justification — and then shouldn’t be used anyway.<br>
  <strong>Robert C. Martin</strong></p>
</blockquote>

<hr>

<ol start="5">
<li><strong><code>message</code> property protection</strong><br>
I assume that a third party which manipulates this class is not allowed to modify the error message. It doesn't make any sense, in my opinion.<br>
That is why it may define a read-only access.</li>
</ol>

<pre><code>export class OutOfBoundsError extends AppError {
    private _message: string;

    constructor(private name: ValueName, value: number, bounds?: Bounds) {
        super();
        // ...
    }

    private handleFalsyLower = (args: ErrorMessageArgs) =&gt; {
        const { value, upper } = args;
        // ... message is filled
    }

    private handleTruthyLower = (args: ErrorMessageArgs) =&gt; {
        const { value, upper, lower } = args;
        // ... message is filled
    }

    get message() {
        return this._message;
    }
}
</code></pre>

<p>Maybe, for more consistency, <code>_message</code> should be <code>protected</code> if <code>OutOfBoundsError</code> is not a sealed class.<br>
And yes, I know that in some case you defined this <code>message</code> property inside the <code>AppError</code> class. I just mention, just in case.</p>

<hr>

<ol start="6">
<li><strong>Ternary operation</strong><br>
This is just a preference. When there is only one line to write inside the <code>if</code> and <code>else</code> statements, I just prefer a ternary operation. It seems cleaner to me.</li>
</ol>

<pre><code>export class OutOfBoundsError extends AppError {
    protected _message = ``;

    constructor(private name: ValueName, value: number, bounds?: Bounds) {
        super();

        const lower = bounds?.lowerBoundInclusive;
        const upper = bounds?.upperBoundInclusive;

        lower != null
            ? this.handleTruthyLower({value, upper})
            : this.handleFalsyLower({value, upper, lower});
    }

    private handleFalsyLower = (args: ErrorMessageArgs) =&gt; {
        const { value, upper } = args;
        this._message = upper != null
                        ? `${this.name} must be less than or equal to ${upper} but\
                            ${value} was given`
                        : `${this.name} of ${value} is out of bounds`;
    }

    private handleTruthyLower = (args: ErrorMessageArgs) =&gt; {
        const { value, upper, lower } = args;
        this._message = upper != null
                        ? `${this.name} must be between ${lower} and ${upper} but\
                            ${value} was given`
                        : `${this.name} must be greater than or equal to ${lower}\
                            but ${value} was given`;
    }

    get message() {
        return this._message;
    }
}
</code></pre>

<p>Even for void function calls.</p>

<p>Hope it helps and any suggestions are welcome.</p>
    </div>