<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems basically reasonable. Some English nits: You said "nominator and denominator," when the English terms are "<strong>numerator</strong> and denominator." You also seem to be using the word "evaluate(s)" as a noun (something like "precipitate" in chemistry), when I think the word you meant was more like "value(s)."</p>
<hr>
<pre><code>struct Node {
    Node(std::string const parameter, double const evaluate) {
        this -&gt; parameter = parameter;
        this -&gt; evaluate = evaluate;
    }

    std::string parameter;
    double evaluate;
};
</code></pre>
<p>Write <code>this-&gt;x</code>, not <code>this -&gt; x</code>, for the same reason you write <code>st.x</code> and not <code>st . x</code>. But in fact, this constructor would be better written as either</p>
<pre><code>struct Node {
    explicit Node(const std::string&amp; p, double v) : parameter(p), value(v) {}
    std::string parameter;
    double value;
};
</code></pre>
<p>or simply</p>
<pre><code>struct Node {
    std::string parameter;
    double value;
};
</code></pre>
<p>since simple aggregates can already be initialized with e.g. <code>Node{"a", 2}</code>. Notice that I'm passing <code>std::string</code> by const reference, because it is expensive to copy.</p>
<p>You <em>could</em> actually rewrite all of the helper functions and data structures to use C++17 <code>std::string_view</code> instead of <code>std::string</code>, as long as all the stringviews referred to the original long-lived strings from <code>equations</code> and <code>queries</code> which you are appropriately careful not to modify. This would be an "advanced" idea, though, and probably wouldn't even buy you any speed in this case where all your strings seem to be 1 character long.</p>
<hr>
<p><code>for (auto&amp; query : queries)</code> — Use <code>for (const auto&amp; query : queries)</code> to indicate that the const-qualification is on purpose; or <a href="https://quuxplusone.github.io/blog/2018/12/15/autorefref-always-works/" rel="nofollow noreferrer">use <code>auto&amp;&amp;</code> in generic code if you just want something that always works</a>. I don't see any reason to use specifically <code>auto&amp;</code> to get a specifically const-qualified result.</p>
<hr>
<pre><code>        if (visited.find(child.parameter) == visited.end()) {
            accumulated *= child.evaluate;

            if (child.parameter == denominator) {
                return true;
            }

            if (solve_equation(child.parameter, denominator, accumulated, visited)) {
                return true;

            } else {
                accumulated /= child.evaluate;
            }
        }
</code></pre>
<p>This if-else ladder is indeed confusing. I would write it like this:</p>
<pre><code>        if (visited.find(child.parameter) != visited.end()) {
            // we have already visited this node; skip it
        } else if (child.parameter == denominator) {
            // we've reached our destination node and resolved the query
            accumulated *= child.value;
            return true;
        } else if (solve_equation(child.parameter, denominator, accumulated, visited)) {
            // this node is on a path that resolves the query
            accumulated *= child.value;
            return true;
        } else {
            // this node is not involved in the solution; do nothing
        }
</code></pre>
<p>The most confusing part of the original ladder was</p>
<pre><code>            } else {
                accumulated /= child.evaluate;
            }
</code></pre>
<p>That line is really just undoing the multiplication hidden at the top of the loop. But the multiplication is <em>done</em> one scope higher than it is <em>undone</em>, which violates most programmers' intuition. It would have been a simple fix to write</p>
<pre><code>        if (visited.find(child.parameter) == visited.end()) {
            accumulated *= child.evaluate;
            if (child.parameter == denominator) {
                return true;
            }
            if (solve_equation(child.parameter, denominator, accumulated, visited)) {
                return true;
            }
            accumulated /= child.evaluate;
        }
</code></pre>
<p>thus visually indicating the symmetry between <code>*=</code> and <code>/=</code>.</p>
<hr>
<pre><code>bool solve_equation(std::string const nominator,
    std::string const denominator, double&amp; accumulated,
    std::set&lt;string&gt;&amp; visited)
</code></pre>
<p>Consider whether <code>visited</code> should be a data member of <code>class Solution</code>.</p>
<p>Passing by const value is always a bug; you left off the <code>&amp;</code>. If you used west const style, you could use these <code>git grep</code> lines to find such bugs: <a href="https://quuxplusone.github.io/blog/2019/01/03/const-is-a-contract/" rel="nofollow noreferrer">https://quuxplusone.github.io/blog/2019/01/03/const-is-a-contract/</a></p>
<p>Consider whether the return type of this function should be <code>std::pair&lt;bool, double&gt;</code>; or, in C++17, <code>std::optional&lt;double&gt;</code>.</p>
<p>Put it all together and you get a C++14 signature like</p>
<pre><code>std::pair&lt;bool, double&gt; solve_equation(const std::string&amp; numerator,
                                       const std::string&amp; denominator);
</code></pre>
<p>or a C++17 signature like</p>
<pre><code>std::optional&lt;double&gt; solve_equation(std::string_view numerator,
                                     std::string_view denominator);
</code></pre>
<hr>
<p>You have methods named both <code>calcEquation</code> and <code>solve_equation</code>. Admittedly, the name <code>calcEquation</code> is just flat wrong; it should be something like <code>solve_equations</code> (plural). But, given that you aren't allowed to change the public name, personally I would go with <code>calcEquation</code> and <code>calcSingleEquation</code> — reusing the same verb instead of a near-synonym, and emphasizing that this function calculates for a <em>single</em> equation, since I don't have the option of adding an <code>s</code> to pluralize the public name.</p>
    </div>