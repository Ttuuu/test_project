<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Extending from my comment on the question, I'd probably go ahead and implement the less than and greater than operators and a handful of interfaces like the underlying <code>double</code> has. I'm also a big proponent of the <code>struct</code> itself being immutable. The result looks something like (I only did <code>Meter</code> for this exercise):</p>
<pre><code>[Serializable]
public struct Meter : IComparable, IFormattable, IConvertible, IComparable&lt;Meter&gt;, IEquatable&lt;Meter&gt;
{
    public Meter(double value) =&gt; this.Value = value;

    public static Meter Zero { get; } = new Meter(0.0);

    internal double Value { get; }

    public static Meter operator +(Meter m) =&gt; m;

    public static Meter operator -(Meter m) =&gt; new Meter(-m.Value);

    public static Meter operator +(Meter m1, Meter m2) =&gt; new Meter(m1.Value + m2.Value);

    public static Meter operator -(Meter m1, Meter m2) =&gt; new Meter(m1.Value - m2.Value);

    public static Meter operator *(Meter m, double d) =&gt; new Meter(m.Value * d);

    public static Meter operator *(double d, Meter m) =&gt; new Meter(m.Value * d);

    public static Meter operator /(Meter m, double d) =&gt; new Meter(m.Value / d);

    public static double operator /(Meter m1, Meter m2) =&gt; m1.Value / m2.Value;

    public static MeterSquared operator *(Meter m1, Meter m2) =&gt; new MeterSquared(m1.Value * m2.Value);

    public static MeterPerSecond operator /(Meter m, Second s) =&gt; new MeterPerSecond(m.Value / s.Value);

    public static bool operator ==(Meter m1, Meter m2) =&gt; m1.Value == m2.Value;

    public static bool operator !=(Meter m1, Meter m2) =&gt; m1.Value != m2.Value;

    public static bool operator &lt;(Meter m1, Meter m2) =&gt; m1.Value &lt; m2.Value;

    public static bool operator &lt;=(Meter m1, Meter m2) =&gt; m1.Value &lt;= m2.Value;

    public static bool operator &gt;(Meter m1, Meter m2) =&gt; m1.Value &gt; m2.Value;

    public static bool operator &gt;=(Meter m1, Meter m2) =&gt; m1.Value &gt;= m2.Value;

    public override bool Equals(object obj) =&gt; obj is Meter other &amp;&amp; this.Equals(other);

    public bool Equals(Meter other) =&gt; this.Value.Equals(other.Value);

    public override int GetHashCode()
    {
        unchecked
        {
            return 17 * this.Value.GetHashCode();
        }
    }

    public string ToString(string format, IFormatProvider formatProvider) =&gt; this.Value.ToString(format, formatProvider) + "m";

    public override string ToString() =&gt; this.ToString(null, CultureInfo.CurrentCulture);

    public string ToString(IFormatProvider provider) =&gt; this.ToString(null, provider);

    public int CompareTo(object obj)
    {
        if (obj is null)
        {
            return 1;
        }

        if (!(obj is Meter m))
        {
            throw new ArgumentException("Can only compare with another Meter.");
        }

        return this.CompareTo(m);
    }

    public int CompareTo(Meter other)
    {
        if (this &lt; other)
        {
            return -1;
        }

        if (this &gt; other)
        {
            return 1;
        }

        return 0;
    }

    public TypeCode GetTypeCode() =&gt; TypeCode.Double;

    public bool ToBoolean(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(Boolean)}");

    public char ToChar(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(Char)}");

    public sbyte ToSByte(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(SByte)}");

    public byte ToByte(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(Byte)}");

    public short ToInt16(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(Int16)}");

    public ushort ToUInt16(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(UInt16)}");

    public int ToInt32(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(Int32)}");

    public uint ToUInt32(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(UInt32)}");

    public long ToInt64(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(Int64)}");

    public ulong ToUInt64(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(UInt64)}");

    public float ToSingle(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(Single)}");

    public double ToDouble(IFormatProvider provider) =&gt; this.Value;

    public decimal ToDecimal(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(Decimal)}");

    public DateTime ToDateTime(IFormatProvider provider) =&gt; throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {nameof(DateTime)}");

    public object ToType(Type conversionType, IFormatProvider provider)
    {
        if (conversionType is null)
        {
            throw new ArgumentNullException(nameof(conversionType));
        }

        if (conversionType == typeof(Meter))
        {
            return this;
        }

        if (conversionType == typeof(double))
        {
            return this.Value;
        }

        if (conversionType == typeof(string))
        {
            return this.ToString(provider);
        }

        throw new InvalidCastException($"Cannot cast from {nameof(Meter)} to {conversionType.Name}");
    }
}
</code></pre>
    </div>