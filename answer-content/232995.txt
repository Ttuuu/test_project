<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Some set of functional improvements/corrections for <code>QuadTree</code> class</h3>

<ul>
<li><p><strong><code>QuadTree.insert</code></strong> method.<br>In such a conditional:</p>

<pre><code>if (this.points.length &lt; this.capacity) {
    this.points.push(point)
    return true
} else {
    ...
</code></pre>

<p>specifying <code>else</code> branch doesn't make sense as the 1st <code>if</code> branch, if <em>truthy</em>, will <code>return</code> immediately from the function.</p>

<p>A sequence of exclusive conditions</p>

<pre><code>if (this.northEast.insert(point)) return true
else if (this.northWest.insert(point)) return true
else if (this.southEast.insert(point)) return true
else if (this.southWest.insert(point)) return true
</code></pre>

<p>returns the same result, therefore can be appropriately consolidated. </p>

<p>The final optimized version:</p>

<pre><code>insert(point) {
    if (!this.boundary.contains(point)) return false
    if (this.points.length &lt; this.capacity) {
        this.points.push(point)
        return true
    }
    if (!this.divided) {
        this.subdivide()
        this.divided = true
    }

    if ((this.northEast.insert(point)) ||
        (this.northWest.insert(point)) ||
        (this.southEast.insert(point)) ||
        (this.southWest.insert(point))) return true
}
</code></pre></li>
<li><p><strong><code>QuadTree.subdivide</code></strong> method.<br>As boundary width <code>w</code> and height <code>h</code> are only used in context of their <em>halved</em> values - those factors can be calculated at once to avoid <strong>16</strong> repetitive divisions:</p>

<pre><code>subdivide() {
    let x = this.boundary.x,
        y = this.boundary.y,
        w = this.boundary.w / 2,
        h = this.boundary.h / 2;

    let ne = new Rectangle(x + w, y - h, w, h);
    let nw = new Rectangle(x - w, y - h, w, h);
    let se = new Rectangle(x + w, y + h, w, h);
    let sw = new Rectangle(x - w, y + h, w, h);

    this.northWest = new QuadTree(ne, this.capacity);
    this.northEast = new QuadTree(nw, this.capacity);
    this.southWest = new QuadTree(se, this.capacity);
    this.southEast = new QuadTree(sw, this.capacity);

    this.divided = true;
}
</code></pre></li>
<li><p><strong><code>QuadTree.query</code></strong> method.<br>The construction</p>

<pre><code>if (!this.boundary.intersects(range)) {
} else {
</code></pre>

<p>is just an awkwardly flipped equivalent to:</p>

<pre><code>if (this.boundary.intersects(range)) {
    ...
</code></pre>

<p>Iterating over <code>this.points</code> with</p>

<pre><code>for (let p of this.points) {
    if (range.contains(p)) {
        found.push(p)
    }
}
</code></pre>

<p>can be flexibly replaced with <code>Array.filter</code> approach.<br>
Eventually the function/method would look as:</p>

<pre><code>query(range, found = []) {
    if (this.boundary.intersects(range)) {
        found.push(...this.points.filter((p) =&gt; range.contains(p)));
        if (this.divided) {
            this.northEast.query(range, found)
            this.northWest.query(range, found)
            this.southEast.query(range, found)
            this.southWest.query(range, found)
        }
        return found
    }
}
</code></pre></li>
</ul>
    </div>