<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am a newbie to coding myself, but your logic is kind of hard to follow - probably my problem. You should use slicing operation on the string to get the '0b' removed from <code>bin()</code> function result as i feel like a cleaner method.</p>

<p>Here's an alternate logic I came up with</p>

<pre><code>count = 0
final_count = 0
concecutive_check = False

if __name__ == '__main__':
    n = int(input())
    bin_representation = bin(n)[2:] #slice operation to remove 'ob'
    print(bin_representation)

    for num in bin_representation:
        if concecutive_check and num == '1':
            count +=1
        elif concecutive_check and num == '0':
            concecutive_check = False
            if count &gt; final_count:
                final_count = count
            count = 0
        elif num == '1':
            concecutive_check = True
            count = 1

    if count &gt; final_count: # final check just in case the binary string ends in 1 and doesn't trigger the above if statements
        final_count = count
    print(f'{final_count} max sequence count')
</code></pre>

<p>As general coding practices, comments where appropriate would be good (as in if something is understandable from the name of the function or object it doesn't need a comment), or if there is a nonsensical aspect like my second <code>count &gt; final count</code> check, explaining the reason for that.</p>

<p>Another thing i noticed is you using the <code>enumerate</code> operation without really using the index for anything beyond as a counter for loop... why? wouldn't the generic for loop over iterable take care of that?</p>

<p>I think the logic route you used is a bit round about way of doing it, a single boolean state variable and two int variable is all you need to keep track of the longest count over the string.</p>
    </div>