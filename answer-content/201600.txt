<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your calculation is much too complicated.</p>

<p>You start by inspecting <code>note[1]</code> without checking the length of the string, so your code is not robust.  It would be better to inspect <code>note[0]</code> first.</p>

<p>The special case <code>if(((key == 'A') &amp;&amp; (octave == 4)) &amp;&amp; ((!flat) &amp;&amp; (!sharp)))</code> should be eliminated.  The general case calculation should work just fine.  Once you eliminate the special case, <code>key</code> is used just once, so you can eliminate that variable in favour of <code>note[0]</code>.</p>

<p>It doesn't make sense for <code>numOfSemitones</code> to be a <code>float</code>, and for <code>octave</code> to be a <code>double</code>.  Those quantities should both be integral.</p>

<p>In music, <a href="https://en.wikipedia.org/wiki/Enharmonic" rel="nofollow noreferrer">it is acceptable</a> to treat E♯ as an F, and C♭ as B.  Therefore, you can generalize the handling of accidentals, so that <code>#</code> always raises the pitch by one semitone, and <code>b</code> always lowers the pitch by one semitone, regardless of the note letter.</p>

<p>The <code>frequency = a4Frequency / pow(2, (numOfSemitones / 12))</code> calculation is written too many times.  The special cases for A♯, B♭, and B could be handled using negative numbers for <code>numOfSemitones</code>, such that <code>numOfSemitones</code> consistently represents the number of semitones below A.  (Actually, I would consider it more intuitive to count the number of semitones above A instead.)</p>

<p>You shouldn't need three cases to handle <code>octave &gt; 4</code>, <code>octave == 4</code>, and <code>octave &lt; 4</code>.  (Again, take advantage of negative numebers!)  Furthermore, if you roll the octave adjustment into <code>numOfSemitones</code> (counting 12 semitones per octave), then you wouldn't have to call <code>pow()</code> so many times.  </p>

<p>Don't use <code>final</code> as a variable name.  Choose something more meaningful, like <code>freq</code>.</p>

<h2>Suggested solution</h2>

<p>Here, I'm using a cleverer version of your <code>octave = note[2] - '0'</code> trick, but relative to <code>'4'</code> instead.  As in your original code, though, that there is no validation of the octave number (particularly for octave 10 or above).</p>

<pre><code>#include &lt;math.h&gt;

// Calculates frequency (in Hz) of a note
int frequency(string note)
{
    int semitones;      // Semitones relative to A4 (440 Hz)
    switch (note[0]) {  // First, assume octave 4
        case 'C': semitones = -9; break;
        case 'D': semitones = -7; break;
        case 'E': semitones = -5; break;
        case 'F': semitones = -4; break;
        case 'G': semitones = -2; break;
        case 'A': semitones =  0; break;
        case 'B': semitones = +2; break;
        default:  return 0; // Error!
    }
    switch (note[1]) {  // Adjust by 12 semitones per octave, and any accidental
        case '#': semitones += 12 * (note[2] - '4') + 1; break;
        case 'b': semitones += 12 * (note[2] - '4') - 1; break;
        default:  semitones += 12 * (note[1] - '4');
    }
    double freq = 440 * pow(2, semitones / 12.0);
    return (int)round(freq);
}
</code></pre>
    </div>