<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Names</strong></p>

<p>I am not fully convinced by the different function names but I have nothing better to suggest for the time being.</p>

<p><strong>Style</strong></p>

<p>Python has a <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Style Guide called PEP 8</a>. It is an interesting read. The most significant impact for your code would be to use 4 spaces for each indentation level instead of 2.</p>

<p><strong>Simplify <code>double_chunker</code></strong></p>

<p>In <code>double_chunker</code>, the following condition is never true:</p>

<pre><code>elif i == leng:
  yield [lst[-1]]
</code></pre>

<p>Also, you don't need to handle explicitly the case:</p>

<pre><code>elif i == 1:
  yield [lst[0], lst[1]]
</code></pre>

<p>as it is just a particular case for <code>[lst[i-1], lst[i]]</code> with <code>i == 1</code>.</p>

<p><strong>Simplify <code>chunk_adder</code></strong></p>

<p>In <code>chunk_adder</code>, instead of:</p>

<pre><code>if len(i) == 1:
  yield i[0]
else:
  yield sum(i)
</code></pre>

<p>We can write:</p>

<pre><code>yield sum(i)
</code></pre>

<p>Then, we could rewrite the function using generator expressions:</p>

<pre><code>def chunk_adder(lst):
  return (sum(i) for i in lst)
</code></pre>

<p>Then, it looks like the function is not really needed. We could write:</p>

<pre><code>def pascal_next(lst):
  return [sum(i) for i in double_chunker(lst)]
</code></pre>

<hr>

<p>At this stage, we have:</p>

<pre><code>def double_chunker(lst):
  for i in range(len(lst)):
    if i == 0:
      yield [lst[0]]
    else:
      yield [lst[i-1], lst[i]]
  yield [lst[-1]]


def pascal_next(lst):
  return [sum(i) for i in double_chunker(lst)]

def pascal_triangle(rows):
  end = [[1]]
  for i in range(rows):
    end.append(pascal_next(end[-1]))
  return end


print(pascal_triangle(8))
</code></pre>

<p><strong>More simplification in <code>double_chunker</code></strong></p>

<p>We could handle the case <code>i == 0</code> before the loop rather than inside the loop. That could lead to a slightly different behavior when the input is an empty list but that case is not handled properly anyway (exception thrown).</p>

<pre><code>def double_chunker(lst):
  yield [lst[0]]
  for i in range(1, len(lst)):
    yield [lst[i-1], lst[i]]
  yield [lst[-1]]
</code></pre>

<p>Then, it becomes obvious what we want to do: we want to <a href="https://stackoverflow.com/questions/21303224/iterate-over-all-pairs-of-consecutive-items-in-a-list">iterate over all pairs of consecutive items in a list</a> which is a problem common enough to find various solutions to it.</p>
    </div>