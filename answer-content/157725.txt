<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Validation</h3>
<p>Because the method is <code>public</code> you shouldn't assume that you get a valid non <code>null</code> <code>Bitmap</code>. You should add a <code>null</code> check otherwise you are exposing implementation details of your method.</p>
<h3>Naming</h3>
<p>Based on the <a href="https://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow noreferrer">C# Naming guidelines</a> methods should be named using <code>PascalCase</code> casing. Method level variables should be named using <code>camelCase</code> casing. Hence <code>getDominantColor</code>-&gt;<code>GetDominantColor</code> and <code>IntPtr Scan0</code>-&gt;<code>IntPtr scan0</code>.</p>
<h3>Possible problems</h3>
<p>You state in your question that this method is used to get the dominant color of your desktop. If you use it only for that, then all will be good.</p>
<p>A problem could come up if you use this method with some different bitmap.</p>
<ul>
<li>If the bitmap which is passed is of DIN A4 size with e.g 300dpi your <code>int[] totals</code> will overflow.</li>
</ul>
<h3>Performance</h3>
<p>I would suggest to use pointer arithmetic instead of calculating each time the <code>idx</code> value. I also would remove the most inner loop like @Zefick posted.</p>
<pre><code>public System.Drawing.Color GetDominantColor(Bitmap bmp)
{
    if (bmp == null)
    {
        throw new ArgumentNullException("bmp");
    }

    BitmapData srcData = bmp.LockBits(new Rectangle(0, 0, bmp.Width, bmp.Height), ImageLockMode.ReadOnly, bmp.PixelFormat);

    int bytesPerPixel = Image.GetPixelFormatSize(srcData.PixelFormat) / 8;

    int stride = srcData.Stride;

    IntPtr scan0 = srcData.Scan0;

    long[] totals = new long[] { 0, 0, 0 };

    int width = bmp.Width * bytesPerPixel;
    int height = bmp.Height;

    unsafe
    {
        byte* p = (byte*)(void*)scan0;

        for (int y = 0; y &lt; height; y++)
        {
            for (int x = 0; x &lt; width; x += bytesPerPixel)
            {
                totals[0] += p[x + 0];
                totals[1] += p[x + 1];
                totals[2] += p[x + 2];
            }

            p += stride;
        }
    }

    long pixelCount = bmp.Width * height;

    int avgB = Convert.ToInt32(totals[0] / pixelCount);
    int avgG = Convert.ToInt32(totals[1] / pixelCount);
    int avgR = Convert.ToInt32(totals[2] / pixelCount);

    bmp.UnlockBits(srcData);

    return Color.FromArgb(avgR, avgG, avgB);

}
</code></pre>
<p>Benchmarking with <a href="http://benchmarkdotnet.org/index.htm" rel="nofollow noreferrer">BechnmarkDotNet</a> with x64 compiled yields</p>
<p>Yours: 17.5252 ms<br>
EBrown's: 14.6109 ms<br>
Mine: 8.4846 ms<br>
<strong>Peter Taylor's: 4.6419 ms</strong></p>
<p>Until @PeterTylor doesn't change its code please see my comment: <a href="https://codereview.stackexchange.com/questions/157667/getting-the-dominant-rgb-color-of-a-bitmap/157716#comment298573_157704">Getting the dominant RGB color of a bitmap</a></p>
    </div>