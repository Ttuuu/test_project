<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think you should add a method for setting includes on the query object. That means your consumers have to know which properties need to be included and which ones don't.</p>

<p>I think you should be explicit about it on the query. One approach could be to simply add a property:</p>

<pre><code>// Slightly odd use of "WithPosts" to make it more comparable.
public class GetCustomerQuery : IQuery&lt;Customer&gt;
{
    public string CustomerId { get; private set; }

    public bool IncludePosts { get; private set; }

    public GetCustomerQuery(string customerId) 
    {
        CustomerId = customerId;
    }

    public GetCustomerQuery WithPosts()
    {
        return new GetCustomerQuery(CustomerId) { IncludePosts = true};
    }
}
</code></pre>

<p>You could also leverage some inheritance:</p>

<pre><code>public class GetCustomerWithPostsQuery : GetCustomerQuery
{
    public GetCustomerWithPostsQuery(string customerId) : base(customerId)
    {
    }
}

public class GetCustomerQuery : IQuery&lt;Customer&gt;
{
    public string CustomerId { get; private set; }

    public GetCustomerQuery(string customerId) 
    {
        CustomerId = customerId;
    }

    public GetCustomerWithPostsQuery WithPosts()
    {
        return new GetCustomerWithPostsQuery(CustomerId);
    }
}
</code></pre>

<p>Either way:</p>

<pre><code>var customerQueryWithoutPosts = new CustomerQuery("Dennis");
var customerQueryIncludingPosts = new CustomerQuery("Dennis").WithPosts();
// ... profit?
</code></pre>

<p>You can then either check the query's IncludePosts property OR have a different handler for the specialised GetCustomerWithPostsQuery query object.</p>
    </div>