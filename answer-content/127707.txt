<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You <em>need</em> functions.
The first one you can make is the <code>collatz_conjecture</code>.
First off I'd say make it recursive.
If you ignore the <code>currCycleLength</code> you should get:</p>

<pre><code>def collatz_conjecture(curr_num):
    if curr_num == 1:
        return 1
    if curr_num % 2 == 0:
        curr_num = curr_num / 2
    else:
        curr_num = 3 * curr_num + 1
    collatz_conjecture(curr_num)
</code></pre>

<p>The best way to make this better is to use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow"><code>functools.lru_cache(None)</code></a>.
This is a wrapper, but it'll give you speed for just adding <em>one line!</em> (This is what Zack was talking about)
You also should add the depth too, this is just adding one onto the previous depth. The if's are actually pretty ugly, so you can change it to the turnery operator.</p>

<pre><code>@functools.lru_cache(None)
def collatz_conjecture(curr_num):
    if curr_num == 1:
        return 1
    return collatz_conjecture(3 * curr_num + 1 if curr_num % 2 else curr_num / 2) + 1
</code></pre>

<p>Finally I don't like that <code>if n == 1</code>. I'd reimplement <code>lru_cache</code> and supply it with that at the beggining.</p>

<pre><code>def memoize(cache=None):
    if cache is None:
        cache = {}
    def wrapper(fn):
        def inner(*args):
            try:
                return cache[args]
            except KeyError:
                r = fn(*args)
                cache[args] = r
                return r
        return inner
    return wrapper


@memoize({(1,): 1})
def collatz_conjecture(n):
    return collatz_conjecture(3 * n + 1 if n % 2 else n / 2) + 1
</code></pre>

<p>As for the rest of your code, I'd use <code>input</code> with <code>map</code>, I'd use a comprehension passed to <code>max</code> and I'd also add <code>if __name__ == '__main__':</code></p>

<p>This should get you something like:</p>

<pre><code>def main():
    while True:
        user_input = input()
        if not user_input:
            break
        start, end = map(int, user_input.split()[:2])
        print(start, end, max(collatz_conjecture(i) for i in range(start, end + 1)))


if __name__ == '__main__':
    main()
</code></pre>
    </div>