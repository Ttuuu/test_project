<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code works, and it seems that you're take care of invalid input. But the logic of the workflow is not - well - that logic.</p>

<blockquote>
  <p><code>int[] numbers = new int[5];</code></p>
</blockquote>

<p>Here <code>5</code> is a magic number. Why five? Why not four or six or 20?</p>

<p>You should announce the number of input before asking for it (and maybe why).</p>

<p>Alternatively you could let the user enter a number of numbers to be calculated.</p>

<hr>

<blockquote>
<pre><code>int sum = 0;
</code></pre>
</blockquote>

<p>You probably have the <code>sum</code> variable for optimization reasons. Alternatively you could let the built in extension <code>Sum()</code> handle that:</p>

<pre><code>numbers.Sum();
</code></pre>

<hr>

<blockquote>
  <p><code>if (!error)</code></p>
</blockquote>

<p>You have this negation of a "negative" variable. Why not be positive and call it <code>success</code>:</p>

<pre><code>if (success)
  Console.Write("Enter Number: ");
</code></pre>

<hr>

<p>Instead of: </p>

<blockquote>
<pre><code>    if (Int32.TryParse(Console.ReadLine(), out input))
    {
      numbers[i] = input;
      sum += numbers[i];
</code></pre>
</blockquote>

<p>you could write:</p>

<pre><code>    success = Int32.TryParse(Console.ReadLine(), out input);

    if (success)
    {
      ...
    }
    else
    {
      ...
    }
</code></pre>

<hr>

<blockquote>
<pre><code>      continue;
</code></pre>
</blockquote>

<p>I don't see any reason for calling <code>continue</code> in your loop? You use <code>continue</code> to step over the rest of the loop and reenter it - if the condition is still true, but here it is the last expression in the loop, so there is nothing to skip.</p>

<hr>

<p>According to the overall design you should always split your code into meaningful methods in order to accommodate to principles like DRY and Single Responsibility:</p>

<p>For instance:</p>

<pre><code>void Main()
{
  if (!GetCountOfNumbers(out int numCount))
    return;

  if (!GetUserInput(numCount, out int[] numbers, out int sum))
    return;

  PrintValues(numbers);
  Console.WriteLine("");
  PrintResult(sum, numbers.Length);
  Console.WriteLine("");
}
</code></pre>

<p>Where:</p>

<pre><code>private bool GetCountOfNumbers(out int numCount)
{
  if (!GetIntInput("Enter count of Numbers", "Must be a positive number", x =&gt; x &gt; 0, out numCount))
  {
    Console.WriteLine("User aborted the calculation");
    return false;
  }

  return true;
}
</code></pre>

<p>and</p>

<pre><code>private bool GetUserInput(int numCount, out int[] numbers, out int sum)
{
  numbers = new int[numCount];
  sum = 0;
  int input;

  for (int i = 0; i &lt; numCount; i++)
  {
    if (!GetIntInput($"Enter number {i + 1}", "Enter any valid integer (32 bit) value", x =&gt; true, out input))
    {
      Console.WriteLine("User aborted the calculation");
      return false;
    }

    numbers[i] = input;
    sum += input;
  }

  return true;
}
</code></pre>

<p>Both methods are calling <code>GetIntInput()</code> which could be defined as follows:</p>

<pre><code>private bool GetIntInput(string message, string errorMessage, Predicate&lt;int&gt; predicate, out int result)
{
  result = default;

  while (true)
  {
    Console.Write($"{message} ['q' to Exit]: ");
    string input = Console.ReadLine();
    if (input == "q" || input == "Q")
      return false;

    if (int.TryParse(input, out int number) &amp;&amp; predicate(number))
    {
      result = number;
      return true;
    }
    Console.WriteLine($"Invalid input: {errorMessage}");
  }
}
</code></pre>

<p>It takes a message to the user, a predicate to validate the input against and an error message if the predicate returns false on the input, and it returns the result in an <code>out</code> variable (<code>result</code>). Further it allows the user to exit the input loop and then returns true or false accordingly.</p>

<p>In this design everything is counted for through descriptive method names and the logic in the workflow is easily understood and separately maintainable.</p>

<p>It could surely be done in more sophisticated ways, but as a simple user input driven console application like this, the above is a simple way to structure the code properly.</p>
    </div>