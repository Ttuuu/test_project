<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have made two major changes for the code that made it faster to run.</p>
<ol>
<li>I have avoided pushing parent of a particular node as its child. Code changes as follows</li>
</ol>
<pre><code>void pushNeighbors(board * brd, Node * pq) {
  int i, j, stop = 0;
  int ** temp, ** t;
  allocate_mem( &amp; temp);
  for (i = 0; i &lt; N; i++) {
    for (j = 0; j &lt; N; j++)
      if (brd -&gt; data[i][j] == 0) {
        stop = 1;
        break;
      }
    if (stop == 1) break;
  }
  if (i + 1 &lt; N) {
    copy(temp, brd -&gt; data);
    swap(temp, i + 1, j, i, j);
    board * dChild = newBoard(temp, brd, brd -&gt; level + 1);
    if (pq == NULL) {
      pq = newNode(dChild);
    } 
    else if(brd-&gt;parent == NULL)
      push( &amp; pq, dChild);
      //Avoid pushing parent as a child again
    else if(!equals(brd-&gt;parent-&gt;data,dChild-&gt;data)) {
     push( &amp; pq, dChild);   
    }
  }
  if (j - 1 &gt;= 0) {
    copy(temp, brd -&gt; data);
    swap(temp, i, j - 1, i, j);
    board * lChild = newBoard(temp, brd, brd -&gt; level + 1);
    if (pq == NULL) {
      pq = newNode(lChild);
    } 
    else if(brd-&gt;parent == NULL)
      push( &amp; pq, lChild);
      //Avoid pushing parent as a child again
    else if(!equals(brd-&gt;parent-&gt;data,lChild-&gt;data)) {
     push( &amp; pq, lChild);   
    }  
  }
  if (i - 1 &gt;= 0) {
    copy(temp, brd -&gt; data);
    swap(temp, i - 1, j, i, j);
    board * uChild = newBoard(temp, brd, brd -&gt; level + 1);
    if (pq == NULL) {
      pq = newNode(uChild);
    } 
    else if(brd-&gt;parent == NULL)
      push( &amp; pq, uChild);
      //Avoid pushing parent as a child again
    else if(!equals(brd-&gt;parent-&gt;data,uChild-&gt;data)) {
     push( &amp; pq, uChild);   
    }  
  }

  if (j + 1 &lt; N) {
    copy(temp, brd -&gt; data);
    swap(temp, i, j + 1, i, j);
    board * rChild = newBoard(temp, brd, brd -&gt; level + 1);
    if (pq == NULL) {
      pq = newNode(rChild);
    }   
    else if(brd-&gt;parent == NULL)
      push( &amp; pq, rChild);
      //Avoid pushing parent as a child again
    else if(!equals(brd-&gt;parent-&gt;data,rChild-&gt;data)) {
     push( &amp; pq, rChild);   
    }  
  }
}
</code></pre>
<ol start="2">
<li>The code solves a twin board(two numbers from the actual board will be swapped). If the twin board is solved, no solution exists for the actually entered board.</li>
</ol>
<pre><code>void solve(int ** arr) {
  board * root = newBoard(arr, NULL, 0);
  Node * pq = newNode(root);
  //Creating a twin array to solve
   int **twinArr;
   int i;
   twinArr = malloc(N * sizeof(int * )); // N is the number of the rows
     for (i = 0; i &lt; N; i++)
       twinArr[i] = malloc(N * sizeof(int)); // N is the number of the columns
       copy(twinArr,arr);
       boardTwin(twinArr);
    board * rootTwin = newBoard(twinArr, NULL, 0);
    Node * pqTwin = newNode(rootTwin);
  //if twin is solved,no solution for main
  while (!isEmpty( &amp; pq) || !isEmpty(&amp;pqTwin)) {
    board * peeked = peek( &amp; pq);
    board * peekedTwin = peek(&amp; pqTwin);
    if (isGoal(peeked -&gt; data)) {
      printf("\nPath");
      printPath(peeked);
      return;
    }
    //Checks if twin is solved
    if (isGoal(peekedTwin -&gt; data)) {
      printf("\n No solution exists for entered board.");
      return;
    }
    pushNeighbors(peeked, pq);
    pop( &amp; pq);
    //push peekedTwin neighbors
    pushNeighbors(peekedTwin, pqTwin);
    //pop minimum from twin queue
    pop( &amp; pqTwin);
  }
}
</code></pre>
    </div>