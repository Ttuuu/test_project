<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Quick review.</h1>
<p>This is a very basic review as I am not a react fan. Do not accept this post as an answer or you will likely dissuade others from adding a better one.</p>
<h2>Your question</h2>
<blockquote>
<p><em>"I used a switch statement in getContent to avoid having an array of objects in memory all the time. Is it actually better performance-wise ?"</em></p>
</blockquote>
<p>By <em>"better performance-wise"</em>  I assume you mean CPU cycles. The answer is, "No its not better."</p>
<h3>Computation complexity</h3>
<p>For 2 items the difference is tiny, but if you had a long list of items say <strong>n</strong> is number of items. To display the last item would require <strong>n</strong> comparisons so worst case is <strong>O(n)</strong>, and best case display the first item is <strong>O(1)</strong>. Picking random items the complexity is <strong>O((log n)<sup>c</sup>)</strong> with <strong>c</strong> just above 2 (AKA polylogarithmic)</p>
<p>What you had <code>return this.state.content[this.state.cidx];</code>, basicly a lookup table, is <strong>O(1)</strong> the best performance you can get.</p>
<h3>Storage complexity</h3>
<p>Many times there is a price to pay for using a lookup table and that is memory. But in this case that makes no difference as you are after already stored items rather than looking up a precomputed value.</p>
<p>As I understand it the react elements you defined as <code>&lt;Heroes/&gt;</code>, <code>&lt;Teams/&gt;</code> are store in an internal node tree, having them in an array means you have an extra item in the <code>state</code> object to reference the array and one reference per item. That would require storage <strong>O(2n + 1)</strong> rather than <strong>O(n)</strong>. Where <strong>n</strong> in this case refers to a reference to the react elements, not the elements themselves.</p>
<p><strong>O(2n+1)</strong> and <strong>O(n)</strong> are the same, and tiny compared to the elements actual needs.</p>
<h2>Style</h2>
<p>You could make a slight change</p>
<pre><code>  updateContent(idx) {
    this.setState({cidx:idx});
  }
</code></pre>
<p>to</p>
<pre><code>  updateContent(cidx) {
    this.setState({cidx});
  }
</code></pre>
<p>But really I only say so as filler as your code looks good, like its almost a cut and paste from the best of react, a good thing (I am not implying you cut and pasted anything ðŸ™‚)</p>
<p>I do have a long list of style points in regard to your code, but as that list directly contradicts the react style guide it would be rather bad advice.</p>
<p>Merry Xmas</p>
    </div>