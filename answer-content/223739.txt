<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance</h2>

<blockquote>
  <p>The problem was there were a large number of PDF files (over 1000) which were scattered over a drive.</p>
</blockquote>

<p>This is the perfect scenario for a parallel application. Spin up a few workers and have them run through the files, perhaps sorted by size and evenly distributed so that the workload is also evenly distributed.</p>

<h2>File paths</h2>

<pre><code>input_file_path = r"\\...pdf"
input_file_count_path = r"\\.."
</code></pre>

<p>This is puzzling, and probably not what you actually want. Does your filename contain a literal backslash? How many of those dots means the upper directory? You may be better off using some Python path functions to form these paths, especially since you're on Windows (?)</p>

<h2>Function length</h2>

<p>Your <code>main</code> is long and complex, and should be subdivided into more functions.</p>

<h2>Never <code>except:</code></h2>

<p>This is a deadly trap for beginners. Ctrl+C (program break) is represented as an exception, so this effectively prevents the user from killing your program with the keyboard. Use <code>except Exception</code> instead. Also, you should be outputting what went wrong, even if you decide to continue on with the other files.</p>

<h2>Multiple return</h2>

<p>First of all, your return doesn't need parens, because multiple return uses an implicit tuple.</p>

<p>Also, given the large number of return values, you're better off representing this result as an object.</p>

<h2>Clean up after yourself</h2>

<p>This:</p>

<pre><code>workbook.close()
</code></pre>

<p>won't be executed if there's an exception before it. Instead, put your workbook in a <code>with</code> block.</p>
    </div>