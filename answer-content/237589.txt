<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know too much about what you're trying to do (but it makes sense and I think I get it). </p>

<p>Personally my feeling is that all you are missing is the right helper functions to make your code more transparent. I don't know how efficient this should be and hence if the overhead of function calls matters to you, but I am guessing no as otherwise you would have transformed the data in place I imagine.</p>

<pre><code>/**
 * Redo the bytes so that the data for the most significant nibbles are in
 * the first half of the array, and the least significant nibbles are in the
 * last half of the array.  This makes for efficient packing when we know that
 * a lot of this data is going to be all zeroes.
 * @param {Uint8Array} data
 */
function swapNibblePairs(data) {
    const newData = new Uint8Array(data);
    for (let i = 0; i &lt; Math.floor(data.length / 2); i++) {
        const [hiNibbleLeft, loNibbleLeft] = getNibbles(data[i]);
        const [hiNibbleRight, loNibbleRight] = getNibbles(data[data.length - 1 - i]);

        newData[i] = byteFromNibbles(hiNibbleLeft, hiNibbleRight);
        newData[data.length - 1 - i] = byteFromNibbles(loNibbleLeft, loNibbleRight);
    }

    return newData;
}

function byteFromNibbles(hi, lo) {
    return (hi &lt;&lt; 4) | lo;
}

function getNibbles(byte) {
    return [(byte &gt;&gt; 4) &amp; 0x0f, byte &amp; 0x0f];
}
</code></pre>

<p>The most important bit for me is it's now evident what the bytes you construct are, you take the two hi parts and join them, and take the two lo parts and join them.</p>

<p>It also makes it evident in the code that this function is its own inverse which is nice.</p>
    </div>