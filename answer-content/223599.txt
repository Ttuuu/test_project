<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After a bit more consideration and soul searching, I suppose the correct technique to use would be the one that avoids an iterative "guess and check" technique and avoids changing the input's data type.</p>

<p>The input data type is a string and the output data type is a string; I don't find it very compelling to convert the input temporarily to an array just to return a string.  If the input data began as an array, I would probably be more in favor of array type manipulation.</p>

<p>If you don't want a concise regex technique, just whittle down <code>$param</code> until it is what you need and don't generate data that you won't eventually use.</p>

<p>Code: (<a href="https://3v4l.org/l6HA6" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$params = "test;colorgroup-b;test;abc";

var_dump(string_includes("group", $params));  //outputs: colorgroup-b

function string_includes($needle, $haystack) {
    $needlePosition = strpos($haystack, $needle);
    if ($needlePosition === false) {
        return false;
    }
    $needleEndPosition = strpos($haystack, ';', $needlePosition);
    if ($needleEndPosition !== false) {
        $haystack = substr($haystack, 0, $needleEndPosition);
    }
    $delimiterPosition = strrpos($haystack, ';');
    if ($delimiterPosition === false) {
        return $haystack;
    }
    return substr($haystack, $delimiterPosition + 1);
}
</code></pre>

<p>This snippet will call 1 to 5 string function calls no matter how big the input string.  This makes the processing time efficient and relatively consistent. </p>

<p>This is much more code bloat than I would welcome into one of my projects, but if you are hellbent on prioritizing efficiency, this should be on your radar to benchmark.</p>
    </div>