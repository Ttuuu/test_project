<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would recommend some modifications.</p>

<p>First, don't use setInterval. Use setTimeout instead. The setInterval function won't wait for the server to answer before sending another request. It will keep sending request to the server even if the server takes more than one second to answer your request. If you do something like:</p>

<pre><code>function displayData(numUsers) {
  $.ajax({
    type: "GET",
    url: "display.php",
    dataType: "html",
    success: function(data){
      $("#data").html(data);
      askObjserver(numUsers);
    }
  });
}

function askObserver(primary) {
  $.ajax({
    type: "GET",
    url: "observer.php",
    dataType: "html",
    success: function(trigger){
      console.log(trigger);
      if(primary != trigger){
        displayData(trigger);
      } else {
        setTimeout(askObserver, 1000, trigger);
      }
    }
  });
}

$(document).ready(askObserver);
</code></pre>

<p>The fist time, the script will retrieve the number of elements. As the input <code>primary</code> is undefined, <code>primary !== trigger</code>. This forces the first display of elements and reactivates the observer cycle. While the response is the same than before, the function keeps enqueuing more calls to the observer method. Every time the result differs, the information is updated.</p>

<p>The second point to modify would be the query being used in the observer method. I would suggest using a query like <code>SELECT COUNT(id) FROM users</code>. That will make the query more efficient. The database manager will use the primary key index to make the query more efficient. You only need to read the returned value in the query instead of counting the number of rows returned in the resulting cursor.</p>

<p>For your questions:</p>

<ul>
<li>Websockets allow your server to be the one notifying to the clients when a change happens avoiding unnecessary HTTP calls. This alternative isn't better. Take into account that you are executing a query to the database for every connection established against your PHP methods. The Websocket alternative would only need one server procedure executing the query internally every second. Whenever a change is detected, the server broadcast to all the clients the information.</li>
<li>The limitations you will face are the number of connections that can be opened at the same time against the database. That will mark the number of concurrent users you can have using the application.</li>
</ul>
    </div>