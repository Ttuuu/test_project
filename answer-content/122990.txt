<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a few things that stand out to me:</p>

<pre><code>public const string CopperName = "Copper";
public const string SilverName = "Silver";
public const string GoldName = "Gold";
public const string PlatinumName = "Platinum";
</code></pre>

<p>... names and descriptive text should (nearly) always go into resource files.  Why?  Internationalization.  It means you don't have to recompile code if the name changes.<br>
Yes, you do have to get the lookup keys somehow, but they don't really belong here - it's a function of however you're outputting to the player.</p>

<pre><code>public long BaseDenomination
{
     get
     {
         return _baseDenomination;
     }
     set
     {
         _baseDenomination = value;
         // Clamp if required.
         if (_baseDenomination &gt; MaximumBaseDenomination)
         {
             _baseDenomination = MaximumBaseDenomination;
         }
         if (_baseDenomination &lt; 0)
         {
             _baseDenomination = 0;
         }
     }
 }
</code></pre>

<p>It's perhaps more usual to use the standard max/min functions here:</p>

<pre><code>public long BaseDenomination
{
     get
     {
         return _baseDenomination;
     }
     set
     {
         // Clamp if required.
         _baseDenomination = Math.Max(0, Math.Min(MaximumBaseDenomination, value));
     }
 }  
</code></pre>

<p>Additionally, the value used and returned is a <code>long</code>, but your maximum base fits well within an <code>int</code>, you might consider changing that.</p>

<pre><code>public void Add(int platinum, int gold, int silver, int copper)
{
    BaseDenomination += platinum * 1000000;
    BaseDenomination += gold * 10000;
    BaseDenomination += silver * 100;
    BaseDenomination += copper;
}
</code></pre>

<p>All those numbers?  Those are called "magic numbers", and you don't want them.  Instead, you should be defining and using constants, something like this:</p>

<pre><code>private const int SilverInCopper = 100;
private const int GoldInCopper = SilverInCopper * 100;
private const int PlatinumInCopper = GoldInCopper * 100;
</code></pre>

<p>Your <code>Add</code> (and <code>Subtract</code>) methods have a far more serious defect, however: you don't watch out for integer overflow.  They will accept 1200 platinum coins, and happily set the contents of the purse <strong>to zero</strong> (because of the clamping - although this assumes it was near the maximum to begin with).  You also don't watch out for things like a mix of positive and negative coins, which might be strange. </p>

<p>If you change this to a struct it won't matter, but you have no null check here (will throw <code>NullReferenceException</code>):</p>

<pre><code>public bool Equals(MoneyBag other)
{
    return _baseDenomination == other._baseDenomination;
}
</code></pre>

<p>The next two are taken together:</p>

<pre><code>public static bool operator ==(MoneyBag a, MoneyBag b)
{
    if (ReferenceEquals(a, null)) return false;
    if (ReferenceEquals(b, null)) return false;
    return a.Equals(b);
}

public static bool operator !=(MoneyBag a, MoneyBag b)
{
    if (ReferenceEquals(a, null)) return false;
    if (ReferenceEquals(b, null)) return false;
    return !a.Equals(b);
}
</code></pre>

<p>This has the effect of:</p>

<ul>
<li><code>((MoneyBag)null) == ((MoneyBag)null)</code> returns false.</li>
<li><code>((MoneyBag)null) != ((MoneyBag)null)</code> <em>also</em> returns false.</li>
</ul>

<p>Again, this won't matter if it becomes a struct, but you need to verify instances of a class aren't <strong>both</strong> null.  For one thing, this would break the commutative property of equality.  It's also more usual to implement these operators in terms of each other:</p>

<pre><code>public static bool operator !=(MoneyBag a, MoneyBag b)
{
    return !(a == b);
}
</code></pre>

<p>The comparison operators don't have null checks either:</p>

<pre><code>public static bool operator &lt;(MoneyBag a, MoneyBag b)
{
    return a.CompareTo(b) &lt; 0;
}

public static bool operator &gt;(MoneyBag a, MoneyBag b)
{
    return a.CompareTo(b) &gt; 0;
}
</code></pre>

<p>Again, not a problem with a struct, but has bad effects otherwise:  You'll get random failures (<code>NullReferenceException</code>) from other code, depending on things like which element sorting chooses for pivots.  You're also missing greater-or-equal and less-or-equal, and you probably want to base three of the four off the remaining one, plus equals (going by C/C++ conventions, use <code>&lt;</code>, less-than).</p>

<pre><code>public int CompareTo(MoneyBag other)
{
    // The shit was null, dumbass!
    if (other == null) return 0;
    if (_baseDenomination &gt; other._baseDenomination)
    {
        return 1;
    }
    if (_baseDenomination &lt; other._baseDenomination)
    {
        return -1;
    }
    // They were equal.
    return 0;
}
</code></pre>

<p>As a point of style, it's generally considered poor form to swear or use otherwise vulgar language in code you write for a business, or plan on releasing to the public.<br>
More importantly, however, <code>null</code> is now considered equal to all other elements.  This completely breaks the commutative property of equality.  If you have a collection with a null element in it, it will break sorting and searching (whether you get null when you were expecting something else, or an assertion error, will depend).  Instead, you should be sorting nulls to the 'bottom':</p>

<pre><code> // If other is not a valid object reference, this instance is greater.
 if (other == null) return 1;
</code></pre>

<p>The non-generic <code>IComparable</code> <a href="https://msdn.microsoft.com/en-us/library/system.icomparable.compareto.aspx">reference also states</a>:</p>

<blockquote>
  <p>By definition, any object compares greater than (or follows) null, and two null references compare equal to each other.</p>
</blockquote>

<p>(for some reason this remark isn't in the generic documentation, which is a grievous oversight on someone's part)</p>

<p>Also, since you're basing ordering off the internal representation, you can use <code>long.CompareTo(...)</code>:</p>

<pre><code>public int CompareTo(MoneyBag other)
{
    if (other == null) return 1;
    return _baseDenomination.CompareTo(other._baseDenomination);
}
</code></pre>

<p>... whether you use the actual underlying field or the public member is up to you.</p>

<p>Lastly, about all your <code>ComputeX</code> methods:</p>

<pre><code>public static int ComputeCopper(long baseDenomination)
{
    return (int)Math.Floor((double)Math.Abs(baseDenomination % 100));
}

public static int ComputePlatinum(long baseDenomination)
{
    return (int)Math.Floor((double)Math.Abs(baseDenomination / 1000000));
}
</code></pre>

<p>... All the math you're doing in these is integer math.  If you don't know what that is, I recommend reading up on it, but the gist is this:</p>

<pre><code>int i1 = 10;
int i2 = 3;
Console.Out.WriteLine(10 / 3); // Prints '3'
</code></pre>

<p>Essentially, the language (and pretty much all computer languages work this way) is truncating the result (for positive numbers, this is equivalent to flooring).<br>
They also turn negative amounts into positive ones!  This might be exploitable elsewhere in your code - either clamp to <code>0</code> or return the negative values.<br>
Oh, and <code>ComputePlatinum</code> is <em>also</em> running into integer overflow: the input is a <code>long</code>, but the output is an <code>int</code>.  Large enough positive values will turn into... something else, quite possibly negative.  You should either be returning a <code>long</code> here, or only taking an <code>int</code> in the first place.  (Or using <code>checked</code> and throwing the exception, but that might be problematic)  In any case, I'd probably write the methods along these lines:</p>

<pre><code>public static int ComputeCopper(int baseDenomination)
{
    return baseDenomination % SilverInCopper;
}

public static int ComputeSilver(int baseDenomination)
{
    return baseDenomination % GoldInCopper / SilverInCopper ;
}

// I assume you can figure out ComputeGold

public static int ComputePlatinum(int baseDenomination)
{
    return baseDenomination / PlatinumInCopper;
}
</code></pre>
    </div>