<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd rewrite <code>toToken</code> a slight bit:</p>

<pre><code>toToken :: String -&gt; Token
toToken [t]
   | isAsciiUpper t = Variable t
   | t == '$' = Dollar
   | t == '@' = At
   | t == '&amp;' = Ampersand
toToken str = Value $ read str
</code></pre>

<p>Notice how I'm handling the single character string cases first and that this is much less indented. I've also omitted the explicit error message you have and eliminated the explicit type-signature.</p>

<p>This saves on vertical indentation and just reads a bit cleaner to me.</p>

<p>let's have a look at <code>executeLine</code></p>

<pre><code>executeLine :: Program -&gt; (Token, Token, Token) -&gt; Program
executeLine p (a,(Variable b), c)
    | pushToStack = jump (currentLine p + 1) $ push diff $ updateVariable p b diff
    | (diff &lt;= 0) = jump address $ updateVariable p b diff
    | otherwise = jump (currentLine p + 1) $ updateVariable p b diff
    where
        diff = value - differential
        differential = tokenToInt p a
        value = getVariable p b
        pushToStack = address == -1
        address = tokenToInt p c
executeLine _ _ = error "Could not execute line."
</code></pre>

<p>This again removes indentation reads a bit cleaner to me.</p>

<p>Let's also add some intermediate variables to main, just to clarify what happens:</p>

<pre><code>main = do
    code &lt;- readFile "countdown.txt"
    let program = (generateProgram . map removeHash . stripLines . lines) code
    let result = (reverse . map chr . stack . until executionFinished executeProgram) program
    putStrLn result
</code></pre>

<p>While we're at adding variables, let's also look at names. The functions are generally named really well, that's a little less the case for their arguments. Especially for <code>executeLine</code> we can improve the names from <code>a</code>, <code>b</code>, and <code>c</code>. Let's instead use the terminology from the language itself:</p>

<pre><code>executeLine program (differential, (Variable storage), adress)
</code></pre>

<p>Names can really help with understanding a program and choosing good names is really hard. On that note <code>pc</code> feels somewhat misleading. I think something like <code>executedInstructions</code> could be more helpful :)</p>
    </div>