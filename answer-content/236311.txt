<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly as <a href="https://codereview.stackexchange.com/a/236213">highlighted by Tlomoloko</a> using a class for this is <em>really</em> strange.</p>

<p>However I think the both of your are missing something rather important. If you wanted to hand write every <a href="https://en.wikipedia.org/wiki/International_System_of_Units#Prefixes" rel="noreferrer">SI prefix</a> for metres alone then you'll rack up an unmaintainable amount of code. The table contains 21 prefixes, such as no prefix - m, centi - cm, and kilo - km. Whilst I'm sure many conversions you'll think are ridiculous. Who needs to convert from yoctometres to yottametres? But what's the harm in supporting it, if you allow something reasonable like zetta to yotta?</p>

<p>To write the conversions for all SI prefixes would require only <span class="math-container">\$\binom{21+1}{2}\$</span> or 231 bespoke functions. Which would be absolutely ridiculous to write by hand.</p>

<p>And so the solution to this is to have an intermarry value that you always convert to or from. And since all of your existing functions are nice simple multiplications or divisions we can simply assign a single value for each unit.</p>

<p>This may be a bit hard to visualize, and so we'll run through some examples.</p>

<h3>Example</h3>

<ul>
<li><p>1 cm to mm</p>

<p>1 cm = 0.01 m<br>
1 mm = 0.001 m</p>

<p>First we convert 1 cm to metres. This is as simple as <span class="math-container">\$1 \times 0.01\$</span>. Afterwards we convert from metres to millimetres simply as <span class="math-container">\$\frac{1 \times 0.01}{0.001}\$</span>.</p>

<p>Which results in 10.</p></li>
<li><p>1' to inches</p>

<p>1' = 0.3048 m<br>
1" = 0.0254 m</p>

<p>First we convert 1' to meters. This is as simple as <span class="math-container">\$1 \times 0.3048\$</span>. Afterwards we convert from metres to foot simply as <span class="math-container">\$\frac{1 \times 0.3048}{0.0254}\$</span>.</p>

<p>Which results in 12.</p></li>
</ul>

<h3>Code</h3>

<pre class="lang-py prettyprint-override"><code>CONVERSIONS = {
    'm': 1,
    'cm': 0.01,
    'mm': 0.001,
    'in': 0.0254,
    'ft': 0.3048,
}

def convert(value, unit_in, unit_out):
    return value * CONVERSIONS[unit_in] / CONVERSIONS[unit_out]


print(convert( 1.0,   'ft', 'in'))
print(convert(12.0,   'in', 'ft'))
print(convert(0.3048, 'm',  'ft'))
print(convert(3,      'ft', 'm' ))
</code></pre>

<p>Now the code's not perfect. If you run it you should instantly notice that it outputs some ugly 12.000000000000002 rather than 12.0. Yuck.</p>

<p>And so we can convert your code to use <code>fractions.Fraction</code>. However this will print 1143/1250 rather than 0.9144. Since I dislike getting 12.0 rather than 12, we can fix these at the same time.</p>

<pre class="lang-py prettyprint-override"><code>from typing import Dict, Union
from fractions import Fraction

Number = Union[int, float]
CONVERSIONS: Dict[str, Fraction] = {
    'm': Fraction('1'),
    'cm': Fraction('0.01'),
    'mm': Fraction('0.001'),
    'in': Fraction('0.0254'),
    'ft': Fraction('0.3048'),
}


def to_number(value: Fraction) -&gt; Number:
    if value % 1:
        return float(value)
    else:
        return int(value)


def convert(value: Number, unit_in: str, unit_out: str) -&gt; Number:
    return to_number(value * (CONVERSIONS[unit_in] / CONVERSIONS[unit_out]))


if __name__ == '__main__':
    print(convert( 1.0,    'ft', 'in'))
    print(convert(12.0,    'in', 'ft'))
    print(convert( 0.3048,  'm', 'ft'))
    print(convert( 3,      'ft',  'm'))
</code></pre>
    </div>