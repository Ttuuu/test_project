<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Rationale</h1>

<p>Given that this question and your previous question, that I've seen, both mangled testing and implementation, I think you should properly setup your Python project environment. </p>

<ul>
<li>Since you have tests you should use something like <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code></a> or <a href="https://docs.pytest.org/en/latest/" rel="nofollow noreferrer">pytest</a>.</li>
<li><p>Since I would setup a test directory and a source directory I can't just <code>import se_229598</code>, and so the simplest way to ensure I'm testing the correct code is to use <a href="https://tox.readthedocs.io/en/latest/" rel="nofollow noreferrer">tox</a> or <a href="https://nox.thea.codes/en/stable/" rel="nofollow noreferrer">Nox</a>.</p>

<p>This comes with the added benefits that you'll; be testing your setup.py, can test against multiple Python versions and you can add other tools such as linters, hinters and documentation to your testing tool-chain.</p></li>
</ul>

<p>I should note the code that I'm providing for the <code>setup.py</code> and <code>tox.ini</code> are <a href="https://stackoverflow.com/help/minimal-reproducible-example">MCVEs</a> to keep the answer small and so don't follow best practices or have many cool features.</p>

<h1>Python Project Environment</h1>

<ul>
<li><p>First, you should make a directory with your desired layout. For the most part, it's whether you should use <code>/src</code> or not. I find <code>/src</code> simpler; however <a href="https://github.com/pypa/packaging.python.org/issues/320" rel="nofollow noreferrer">this is a mini-holy war</a>, where there are <a href="https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure" rel="nofollow noreferrer">some recommendations for using <code>/src</code></a> and I'm sure some for not using <code>/src</code>.</p>

<pre><code>/
|- src
|   |-- &lt;name&gt;
|- tests
|   |-- test_&lt;test_name&gt;.py
|- setup.py
|- tox.ini
</code></pre></li>
<li><p><a href="https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments" rel="nofollow noreferrer">Create a virtual environment</a> and activate it, using either:</p>

<ul>
<li><code>venv</code>; or</li>
<li><code>virtualenv</code>, by <a href="https://packaging.python.org/tutorials/installing-packages/#requirements-for-installing-packages" rel="nofollow noreferrer">Ensure you can install packages</a> and <a href="https://packaging.python.org/tutorials/installing-packages/#installing-from-pypi" rel="nofollow noreferrer">installing <code>virtualenv</code> from PyPI</a>.</li>
</ul></li>
<li><p>Install the package, and dependencies, in the project's virtual environment.</p></li>
<li>Test with <code>tox</code>.</li>
</ul>

<p>On Windows this would look something like:</p>

<pre><code>$ mkdir src/se_229598
$ mkdir tests
$ python -m pip install virtualenv
$ python -m virtualenv venv
$ ./venv/Scripts/activate
(venv) $ vim setup.py
(venv) $ vim tox.ini
(venv) $ vim src/se_229598/__init__.py
(venv) $ vim tests/test_all.py
(venv) $ pip install .[dev]
(venv) $ tox
</code></pre>

<p>Where:</p>

<ul>
<li><p><code>__init__.py</code> is the code that you have in the post.<br>
Since you added a main guard it means that your old tests won't run. And so you can delete that if you want.</p></li>
<li><p><code>setup.py</code></p>

<pre><code>from setuptools import setup, find_packages

setup(
    name='se_229598',
    packages=find_packages('src'),
    package_dir={'': 'src'},
    extras_require={
        'dev':  [
            'tox',
            'pytest',
            'scipy',
        ]
    },
)
</code></pre></li>
<li><p><code>tox.ini</code></p>

<pre><code>[tox]
envlist =
    unit-py36
    unit-py37

[testenv]
basepython =
    py36: python3.6
    py37: python3.7
deps =
    .[dev]
commands =
    unit: pytest
</code></pre></li>
<li><p><code>test_all.py</code>. It should be obvious, but I've only tested one of your functions.</p>

<pre><code>import random

import pytest
import scipy.stats

import se_229598

TEST_LIST_INTEGER = random.sample(range(-1000, 1000), 15)
TEST_LIST_FLOAT = list(scipy.stats.uniform(-10, 10).rvs(10))


def test_selection_sort_int():
    assert (
        se_229598.selection_sort(TEST_LIST_INTEGER.copy())
        == sorted(TEST_LIST_INTEGER)
    )


def test_selection_sort_float():
    assert (
        se_229598.selection_sort(TEST_LIST_FLOAT.copy())
        == sorted(TEST_LIST_FLOAT)
    )
</code></pre></li>
</ul>

<h1>Explanation</h1>

<p>To test your code all you need to do is run <code>tox</code> in your virtual environment.</p>

<pre><code>$ ./venv/Scripts/activate
(venv) $ tox
...
___________ summary ___________
  unit-py36: commands succeeded
  unit-py37: commands succeeded
  congratulations :)
$ 
</code></pre>

<p>This is as we setup tox to run pytest against Python 3.7 and 3.6 in the <code>[testenv]</code> section. If we don't specify the environment then it will default to running pytest on both 3.7 and 3.6, as we specified in the <code>envlist</code>.</p>

<p>Due to doing a standard pytest install we can just run <code>pytest</code> to test the code using its test auto discovery.</p>

<p>From here you can setup linters and hinters in your <code>tox.ini</code> and verify these raise no problems. You can also setup Sphinx to document your code. And even add test coverage. And all this runs simply from one command, <code>tox</code>.</p>

<p>Not only does this simplify local testing, tools like tox have integration with some CI software. Where <a href="https://github.com/Peilonrayz/typing_inspect_lib/blob/master/tox.ini" rel="nofollow noreferrer">I have used Jenkins CI and tox</a> together to allow a basic CI workflows.</p>

<h1>Further reading</h1>

<ul>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/" rel="nofollow noreferrer">PyPA's more fleshed out packaging instructions</a>.</li>
<li><a href="https://pytest.org/en/latest/getting-started.html" rel="nofollow noreferrer"><code>pytest</code>'s getting started</a>.</li>
<li><a href="https://tox.readthedocs.io/en/latest/examples.html" rel="nofollow noreferrer">tox configuration and usage examples</a>. </li>
</ul>
    </div>