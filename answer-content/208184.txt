<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So far every solution given has been O(n<sup>2</sup>) or O(n log n), but there is an O(n) solution, which is sketched as follows:</p>

<ul>
<li>Get your input into a list, as you have done so. Obviously this is O(n)</li>
<li>Create an empty map from integers to integers. The map must have an O(1) insertion operation and an O(1) contains-key operation and an O(1) lookup operation and an O(n) "enumerate all the keys" operation. Commonly-used map types in modern programming languages typically have these characteristics.</li>
<li>Build a count of all the items in the input. That is, for each input item, check to see if it is in the map. If it is not, add the pair (item, 1) to the map.  If it is already in the map, look up the associated value and change the map so that it has the pair (item, value + 1).  All those operations are O(1) and we do them n times, so this step is O(n).</li>
<li>Now we take our target, call it <code>sum</code> and we wish to enumerate the pairs which add to that target.  Enumerate the keys of the map.  Suppose the key is <code>k</code>.  We compute <code>sum-k</code>.  Now there are two cases. 

<ul>
<li>Case 1: if <code>sum-k == k</code> then check the map to see if the value associated with <code>k</code> is 2 or greater. If it is, then we have a pair <code>(k, k)</code>. Output it.</li>
<li>Case 2: if <code>sum-k</code> is not <code>k</code> then check the map to see if <code>sum-k</code> is in the map. If it is, then we have a pair <code>(k, sum-k)</code>.</li>
</ul></li>
<li>The enumeration enumerates at most <code>n</code> keys, and each step is O(1), so this step is also O(n)</li>
<li>And we're done, with total cost O(n).</li>
</ul>

<p>Now, <strong>can you implement this solution?</strong></p>
    </div>