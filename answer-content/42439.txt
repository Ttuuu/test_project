<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Here's my starting point for computing the performance improvement due to the various revisions below: how long does it take to sieve for the prime numbers below \$ 10^8 \$?</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; test = lambda f: timeit(lambda:f(10**8), number=1)
&gt;&gt;&gt; t1 = test(sieve)
</code></pre>

<p>The exact number is going to depend on how fast your computer is, so I'm going to compute performance ratios, but for the record, here it is:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; t1
78.9875438772142
</code></pre></li>
<li><p>Your initialization of the list <code>l</code> takes more than half the time, so let's try a cheaper approach. Let's also give this array a better name, and make it a Boolean array while we're about it.</p>

<pre><code>def sieve2(n):
    """Return a list of the primes below n."""
    prime = [True] * n
    for p in range(3, n, 2):
        if p ** 2 &gt; n:
            break
        if prime[p]:
            for i in range(p * p, n, 2 * p):
                prime[i] = False
    return [2] + [p for p in range(3, n, 2) if prime[p]]
</code></pre>

<p>When optimizing a function like this, it's always worth keeping the un-optimized version around to check the correctness of the optimized version:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; sieve(10**6) == sieve2(10**6)
True
</code></pre>

<p>This already runs in less than a third of the time:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; test(sieve2) / t1
0.30390444573149544
</code></pre></li>
<li><p>We could avoid the test for <code>p ** 2 &gt; n</code> by computing a tighter limit for the loop. Note that I've used <code>n ** .5</code> here as this is slightly faster than <code>math.sqrt(n)</code>.</p>

<pre><code>def sieve3(n):
    """Return a list of the primes below n."""
    prime = [False, False, True] + [True, False] * (n // 2)
    for p in range(3, int(n ** .5) + 1, 2):
        if prime[p]:
            for i in range(p * p, n, 2 * p):
                prime[i] = False
    return [p for p in range(2, n) if prime[p]]
</code></pre>

<p>This makes little difference to the overall runtime:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; test(sieve3) / t1
0.2971086436068156
</code></pre></li>
<li><p>We can accumulate the result as we go, instead of in a separate iteration at the end. Note that I've cached <code>result.append</code> in a local variable to avoid looking it up each time round the loop.</p>

<pre><code>def sieve4(n):
    """Return a list of the primes below n."""
    prime = [False, False, True] + [True, False] * (n // 2)
    result = [2]
    append = result.append
    sqrt_n = (int(n ** .5) + 1) | 1    # ensure it's odd
    for p in range(3, sqrt_n, 2):
        if prime[p]:
            append(p)
            for i in range(p * p, n, 2 * p):
                prime[i] = False
    for p in range(sqrt_n, n, 2):
        if prime[p]:
            append(p)
    return result
</code></pre>

<p>Again, this makes very little difference:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; test(sieve4) / t1
0.286016401170129
</code></pre></li>
<li><p>We can use Python's slice assignment instead of a loop when setting the sieve entries to <code>False</code>. This looks wasteful since we create a large list and then throw it away, but this avoids an expensive <code>for</code> loop and the associated Python interpreter overhead.</p>

<pre><code>def sieve5(n):
    """Return a list of the primes below n."""
    prime = [True] * n
    result = [2]
    append = result.append
    sqrt_n = (int(n ** .5) + 1) | 1    # ensure it's odd
    for p in range(3, sqrt_n, 2):
        if prime[p]:
            append(p)
            prime[p*p::2*p] = [False] * ((n - p*p - 1) // (2*p) + 1)
    for p in range(sqrt_n, n, 2):
        if prime[p]:
            append(p)
    return result
</code></pre>

<p>This gives a small but noticeable improvement:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; test(sieve5) / t1
0.2617646381557855
</code></pre></li>
<li><p>For big improvements to the performance of numerical code, we can use <a href="http://www.numpy.org/" rel="noreferrer">NumPy</a>.</p>

<pre><code>import numpy

def sieve6(n):
    """Return an array of the primes below n."""
    prime = numpy.ones(n, dtype=numpy.bool)
    prime[:2] = False
    prime[4::2] = False
    sqrt_n = int(n ** .5) + 1
    for p in range(3, sqrt_n, 2):
        if prime[p]:
            prime[p*p::2*p] = False
    return prime.nonzero()[0]
</code></pre>

<p>This is more than 6 times as fast as <code>sieve5</code>, and more than 25 times as fast as your original code:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; test(sieve6) / t1
0.03726392181902129
</code></pre></li>
<li><p>We could avoid allocating space for the even numbers, improving memory locality:</p>

<pre><code>def sieve7(n):
    """Return an array of the primes below n."""
    prime = numpy.ones(n // 2, dtype=numpy.bool)
    sqrt_n = int(n ** .5) + 1
    for p in range(3, sqrt_n, 2):
        if prime[p // 2]:
            prime[p*p // 2::p] = False
    result = 2 * prime.nonzero()[0] + 1
    result[0] = 2
    return result
</code></pre>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; test(sieve7) / t1
0.029220096670965198
</code></pre></li>
<li><p>And finally, an implementation that sieves separately for primes of the form \$ 6i − 1 \$ and \$ 6i + 1 \$, <a href="https://stackoverflow.com/a/3035188/68063">due to Robert William Hanks</a>:</p>

<pre><code>def sieve8(n):
    """Return an array of the primes below n."""
    prime = numpy.ones(n//3 + (n%6==2), dtype=numpy.bool)
    for i in range(3, int(n**.5) + 1, 3):
        if prime[i // 3]:
            p = (i + 1) | 1
            prime[       p*p//3     ::2*p] = False
            prime[p*(p-2*(i&amp;1)+4)//3::2*p] = False
    result = (3 * prime.nonzero()[0] + 1) | 1
    result[0] = 3
    return numpy.r_[2,result]
</code></pre>

<p>This is about 40 times as fast as the original <code>sieve</code>:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; test(sieve8) / t1
0.023447068662434022
</code></pre></li>
</ol>
    </div>