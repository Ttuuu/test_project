<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Quick comment: If you have code which is supposed to run when you call the script (in your case its the "run the game" part of the code), its good practice to put it in a <code>main()</code> function and call the main function rather than keep all that code at the highest level of the file. At the bottom of the file, it would look something like this:</p>

<pre><code>def main():
    functions_to_play_math_game()

if __name__ == "__main__":
    main()
</code></pre>

<p>When a python script runs, it gets a <code>__name__</code> attribute depending on how it was called. If it was run through the command line (with <code>$ python my_script.py</code>), the <code>__name__</code> attribute gets set to <code>"__main__"</code>. So the second part of my code sample checks if the <code>__name__</code> attribute indicates the script is being called to run, and if so, executes the code inside <code>main()</code>.</p>

<p>The reason this is important is because when you <code>import</code> a module in python, it runs all the code inside that file. Now, if the file only contains function definitions, nothing out of the ordinary happens. But if you imported your file into another file, at the <code>import my_file</code> line your game would start running because there is no safeguard to prevent it from going. The catch is that when being imported, <code>__name__</code> is not set to <code>__main__</code> like it is when you call the script from a command line. So, if you have this safeguard at the bottom of your code, it wont run when its imported.</p>
    </div>