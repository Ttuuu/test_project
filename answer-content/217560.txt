<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have provided a lot of code, and it's not super well organized. So I'm going to focus on that, plus some things I noticed in passing. There's probably enough for another review once you incorporate what you learn from this one.</p>

<p>First, you have some good ideas. Moving "basic" things into a library is a good idea. Using classes is a good idea. Breaking your conceptually related statements into functions is a good idea. For the most part, you are on target with what you are doing and how you are doing it.</p>

<p>Now for the not-most part: ;-)</p>

<h1>PEP 8</h1>

<p>You code isn't PEP-8 in a lot of ways. Some of them are harmful, and some are just irritating. <code>My_Library</code> is irritating <em>and</em> harmful: not every filesystem is case-aware, so you can't depend on caps; and the name is useless. Either name it something application related (tank_library) or something platform related (pygame_utils).</p>

<h2>Comments</h2>

<p>Comments are funny things. Most coding classes try to encourage you to use them, but don't provide you with enough of a challenge to actually <em>need</em> them. So they encourage you to put in worthless comments, just to get in the habit. That appears to have happened to you. Consider this:</p>

<pre><code># MySprite class extends pygame.sprite.Sprite
class MySprite(pygame.sprite.Sprite):
</code></pre>

<p>This is a classic "worthless comment." The comment merely says in English exactly what the code says in the syntax of Python. It's right up there with</p>

<pre><code>x = x + 1  # add 1 to x
</code></pre>

<p>You should delete any comment like this, since it provides no value presently, and might eventually drift into being wrong and providing negative value.</p>

<p>Now consider this:</p>

<pre><code># prints text using the supplied font
def print_text(font, x, y, text, color = (255, 255, 255)):
</code></pre>

<p>This is almost a worthless comment. But it's also almost a useful comment. Except that there are no useful comments on functions. What you want is to make this into a <strong>useful docstring:</strong></p>

<pre><code>def print_text(...etc...):
    ''' Display text on screen at position (x, y) using font &amp; color. '''
</code></pre>

<p>Even more useful would be to specify what position (x, y) means. Is that the top left, bottom left, the center, the baseline? Also, color is semi-obvious since you provide a default, but how about font? Is that a string name, or a Font object, or ... ?</p>

<p>The nice thing about docstrings is that you can write as much as you want, and it can be nicely useful in a lot of ways, including just doing <code>help(print_text)</code> in the REPL. Comments, not so much.</p>

<p>Finally, consider this:</p>

<pre><code># transfer float position to integer position for drawing
self.X = int(self.float_pos.x)
self.Y = int(self.float_pos.y)
</code></pre>

<p>This seems like a useful comment. It explains too much of what you're doing -- after all, I can see you are converting from float to int. But it does explain <em>why</em> you are doing something non-obvious. That provides some value. </p>

<p>(Note: the presence of <code>.X</code> as an integer drawable version of <code>.x</code> might not <em>have</em> value, per se. But the comment has value, since it makes clear something that wouldn't be clear otherwise.)</p>

<h2>Organization</h2>

<h3>Class Bullet</h3>

<p>Class <code>Bullet</code> has an <code>update</code> and a <code>draw</code> method, but it is not a subclass of anything:</p>

<pre><code>class Bullet():
    def __init__(self, position): ...
    def update(self, ticks): ...
    def draw(self, surface): ...
</code></pre>

<p>If it's not a subclass, you can drop the parentheses after the name. But it probably should be a subclass, either of <code>Sprite</code> or <code>MySprite</code>. Pygame provides sprite groups to do what you are doing manually. You should put your bullets into one.</p>

<h3>Class Tank</h3>

<p>Now this:</p>

<pre><code>def fire_cannon(tank):
    ...

def player_fire_cannon():
    bullet = fire_cannon(player)
    ...

def player2_fire_cannon():
    bullet = fire_cannon(player2)
    ...

class Tank(MySprite):
</code></pre>

<p>If only there were some mechanism whereby you could write a function that would have access to a collection of related data... Oh, wait! You could make <code>fire_cannon</code> a method of class <code>Tank</code>.</p>

<pre><code>def __init__(self, tank_file, turret_file):
    MySprite.__init__(self)

def update(self,ticks):
    # update chassis
    MySprite.update(self, ticks, 100)
</code></pre>

<p>The built-in function you are looking for here is <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="noreferrer"><code>super()</code></a>.</p>

<p>And speaking of the <code>update</code> method: delegate! You Tank has a chassis and a turret, and they get drawn differently. So make the turret (or the chassis) a separate sprite, and "manage" it from the Tank class. </p>

<p>You might even consider making <em>both</em> of them separate sprites, and having the Tank be invisible or not a sprite at all. This would be the difference between "is-a" sprite and "has-a" sprite. If the tank is just a holder for a collection of other sprites (and a central position), a lot of your code probably gets shorter because the classes can handle it.</p>

<h3>Pygame</h3>

<p>You need Pygame in both your library and your main file. Consider trying to push all the explicit pygame dependencies into a single file, and your non-pygame dependencies into the other file. This won't actually result in an app/library distribution, but it might help you to identify "pure" objects that you can optimize in different ways. </p>

<h3>class Point</h3>

<p>This is horrible:</p>

<pre><code>self.position = Point(position.x, position.y)
</code></pre>

<p>If <code>position</code> is a Point, why can't you just either refer to it, or initialize a new one using an instance of the same class?</p>

<pre><code>self.position = position
# or
from copy import copy
self.position = copy(position)
# or
self.position = Point(position)
</code></pre>

<p>In fact, I'd suggest that you use <code>namedtuple</code> for your point class. It's built-in, and it does almost everything you want:</p>

<pre><code>from collections import namedtuple
Point = namedtuple('Point', 'x y')
p1 = Point(123, 456)
p2 = Point(*p1)
</code></pre>

<p>Note the "splat:"  <code>*p1</code>. Or you could <em>inherit</em> from the named tuple and provide your own <code>__new__</code> method which does the splatting for you:</p>

<pre><code>def __new__(cls, p_or_x, y=None):
    if isinstance(p_or_x, cls):
        # New Point from old Point
        return super().__new__(cls, *p_or_x)
    else:
        # New Point from x, y
        return super().__new__(cls, p_or_x, y)
</code></pre>

<p>Speaking of PEP 8: please don't use __x and __y unless you know that you need to. (You don't.) Names that start with double underscores, other than the special "dunder" names, are "mangled" internally. That's great for solving a specific problem, but you don't have that problem. Just use <code>x</code> until you have a property method, then switch to <code>_x</code>.</p>

<p>Here are some unrelated lines of code:</p>

<pre><code>    self.position.x -= self.velocity.x * 10.0
    self.position.y -= self.velocity.y * 10.0
    pos = (int(self.position.x), int(self.position.y))
</code></pre>

<p>If you have a look at the "dunder methods" available, you will find that it's possible to implement things like scalar multiplication and in-place subtraction. You might even find a way to <code>trunc</code>ate values ;-)</p>

<pre><code>from math import trunc

def __trunc__(self):
    return self.__class__(trunc(self.x), trunc(self.y))
</code></pre>
    </div>