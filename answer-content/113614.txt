<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Right now your timer methods have dependencies on stuff that shouldn't be.</p>

<p>You're relying on <code>System.Windows.Form</code>. That's blocking you if you ever want to use these methods in a console application or well... stuff that isn't related to WinForms. Check for the <a href="https://msdn.microsoft.com/en-us/library/system.timers.timer(v=vs.110).aspx" rel="nofollow">System.Timers.Timer</a> class!</p>

<p>Your <em>helper</em> methods are relying on variables that aren't in their scope (The <code>Timer[]</code>). That's a dependency you want to remove.</p>

<p>To do so, we need a way to stop the timer. We could return the timer, but that might be a little too much for what we want to do. So let's create an interface, <code>IInterruptable</code>.</p>

<pre><code>public interface IInterruptable
{
    void Stop();    
}
</code></pre>

<p>Now, we need something to wrap our <code>Timer</code> so we can implement the interface.</p>

<pre><code>public class TimerInterrupter : IInterruptable
{
    private readonly Timer _timer;

    public TimerInterrupter(Timer timer)
    {
        if (timer == null) throw new ArgumentNullException(nameof(timer));
        _timer = timer;
    }

    public void Stop()
    {
        _timer.Stop();
    }
}
</code></pre>

<p>So far so good. That deals with the problem of the <code>Timer[]</code>.</p>

<p>Next, let's see how we can change your implementation using <code>System.Timers.Timer</code>.</p>

<p>Point one, not totally related to the new implementation but <em>very</em> related to your old one. Using <code>delegate</code> is a little old-school. Since C#... 3? There are Functions you can use, that are backward compatible to <code>delegate</code>. That means :</p>

<pre><code>//Syntax might not be good, but you get the point
fooBar.SomeEvent += new delegate(object,object){asd();};
</code></pre>

<p>Becomes : </p>

<pre><code>fooBar.SomeEvent += (a,b) =&gt; asd();
</code></pre>

<p>So, let's look at that timer! This <code>Timer</code> class as an <code>AutoReset</code> property, which well... auto-resets the timer at the end of each interval is set to <code>true</code>. Which will be the main difference between your <code>SetInterval</code> and <code>SetTimeout</code> methods.</p>

<pre><code>public static IInterruptable SetInterval(int interval, Action function)
{
    Action functionCopy = (Action)function.Clone();
    Timer timer = new Timer { Interval = interval, AutoReset = true };
    timer.Elapsed += (sender, e) =&gt; functionCopy();
    timer.Start();

    return new TimerInterrupter(timer);
}
</code></pre>

<p>Notice that the method is now <code>static</code>, since it's an helper method. You'll be able to use it in any context, which is great!</p>

<p>I changed the <code>time</code> parameter to <code>interval</code>, as it's clearer this way. You didn't pass a <code>time</code>, you passed a <code>time interval</code> as a parameter. It's important to be very clear.</p>

<p>I'm copying the <code>Action</code>. I'm not 100% sure that's useful, but it's to avoid a problem with references. If for example I did :</p>

<pre><code>Action someFunction = CreateAFunctionThatIsntNull();
SetInterval(1,someFunction);
someFunction = null;
</code></pre>

<p>You're screwed. So copying the <code>Action</code> has a purpose here.</p>

<p>Now the <code>SetTimeout</code> :</p>

<pre><code>public static IInterruptable SetTimeout(int interval, Action function)
{
    Action functionCopy = (Action)function.Clone();
    Timer timer = new Timer { Interval = interval, AutoReset = false };
    timer.Elapsed += (sender, e) =&gt; functionCopy();
    timer.Start();

    return new TimerInterrupter(timer);
}
</code></pre>

<p>Notice something? Well, that's the same code, with <em>one</em> different variable in <code>AutoReset</code>. So let's take care of that by extracting another method :</p>

<pre><code>public static class TimerHelper
{
    public static IInterruptable SetInterval(int interval, Action function)
    {
        return StartTimer(interval, function, true);
    }

    public static IInterruptable SetTimeout(int interval, Action function)
    {
        return StartTimer(interval, function, false);
    }

    private static IInterruptable StartTimer(int interval, Action function, bool autoReset)
    {
        Action functionCopy = (Action)function.Clone();
        Timer timer = new Timer { Interval = interval, AutoReset = autoReset };
        timer.Elapsed += (sender, e) =&gt; functionCopy();
        timer.Start();

        return new TimerInterrupter(timer);
    }
}
</code></pre>

<p>That's the final version in my opinion. I think it looks better. Though there's a final problem. <code>SetTimeout</code> and <code>SetInterval</code> are terrible method names. I know the idea is to copy the Javascript functions, but let's make an exception. These methods names are not intuitive and overall pretty terrible. Maybe something like <code>ExecuteEvery</code> instead of <code>SetInterval</code> and <code>ExecuteIn</code> instead of <code>SetTimeout</code> would be better names.</p>
    </div>