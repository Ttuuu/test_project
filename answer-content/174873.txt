<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Bug</strong>:  Wrong specifiers. Temporarily change to below to see the mis-match.  Formats should have been <code>"%hd/%hd/%hd"</code>, not <code>"%d/%d/%d"</code></p>

<pre><code>sscanf(input, "%d-%d-%d", &amp;date.day, &amp;date.month, &amp;date.year) != 3; i++)
</code></pre>

<p>This implies testing, was not done on a 32-bit platform or not done with this code.</p>

<hr>

<blockquote>
  <p>How can I improve this code to make it faster, more efficient, less redundant, and easier to read?</p>
</blockquote>

<p>First, make code easier to read and compilable using the strictness warnings.  Any code improvements done by OP are linear.  To improve performance, focus on larger issues.</p>

<p>The biggest performance issues are in <code>sscanf()</code>, <code>sprintf()</code>, <code>calloc()</code>, <code>strncpy()</code>, array initialization.  Improving any of those will only yield modest linear improvements.</p>

<hr>

<p>No need to perform type shortening - no space not code savings expected.  Use the type of the functions return/use, <code>size_t</code> in this case.  This avoids automated warnings about shortening/sign-ness change.</p>

<p>Recommend to use the sizeof of the de-referenced variable rather than the size of the type.  Easier to code, review and maintain.</p>

<pre><code>// short date_str_len;
size_t date_str_len;
...
date_str_len = strlen(date_str);
// if(!(*string = calloc(date_str_len + 1, sizeof(char)))) {
if(!(*string = calloc(date_str_len + 1, sizeof **string))) {
</code></pre>

<hr>

<p><code>date_to_string()</code> is not a <em>static</em> function.  Suggest to either 1) make it <em>static</em> so it only receives qualified arguments or 2) make the function more tolerant of <code>date</code> values of unexpected values:</p>

<pre><code>char *suffix[] = { "st", "nd", "rd", "th" };
#define SUFFIX_N (sizeof suffix/ sizeof suffix[0])
int ending = abs(date.day % 10);  // works for entire range of data.day
if (ending &gt; SUFFIX_N) { 
  ending = SUFFIX_N;
}

sprintf(date_str,
        "%d%s of %s %d",
   ...
        suffix[ending],
   ...
);
</code></pre>

<hr>

<p><code>strncpy()</code> gains little here as the certainly of <em>null character</em> termination relies on the prior code in a not so-obvious-way.</p>

<pre><code>strncpy(*string, date_str, date_str_len);
// Alternatives
strcpy(*string, date_str);
memcpy(*string, date_str, date_str_len + 1);
</code></pre>

<p>Or better yet, use the common <code>strdup()</code> for that is what is being done here.  Not standard yet easier to <a href="https://stackoverflow.com/a/39694254/2410359">code</a>. </p>

<pre><code>*string = strdup(date_str);
if (*string == NULL) {
    ...
</code></pre>

<hr>

<p>The adage <code>/* Remember kids: Always zero your character strings before you use them */</code> is cute but not universal.  To zero a <em>string</em>, code only needs to <code>str_var[0] = '\0';</code>.  This is a performance issue in the general case - here is not a major issue either way.  Best to follow group's code guidelines on this matter. </p>

<p>If coding guidelines encourage initializing arrays, this is very usually accompanied with initializing <strong>all</strong> variables.</p>

<pre><code>char date_str[48] = { '\0' };
// short date_str_len;
short date_str_len = 0;
</code></pre>

<hr>

<p><code>is_valid_date()</code> does not test the year.</p>

<p>Leap year calculation is incorrect for years prior to 1582.  This code appears resilient for very distant years, yet even a test for that is good design practice..  Suggest year checks</p>

<pre><code>#define YEAR_MIN 1583
#define YEAR_MAX INT_MAX
bool is_valid_date(date_t date)
{
    if (date.year &lt; YEAR_MIN || data.year &gt; YEAR_MAX) return false;
    return ((date.month &gt; 0 ...
}
</code></pre>

<hr>

<p>Source code does not present for review well with excessive long lines like</p>

<pre><code>short day_of_week(date_t date);                     /* Determines the numerical value of the day of the week (taking Sunday as the first day), only works on dates after 14/09/1752 due to the adoption of the Gregorian calendar in the UK */
</code></pre>

<p>Versus</p>

<pre><code>short day_of_week(date_t date);                     /* Determines the numerical value 
    of the day of the week (taking Sunday as the first day), only works on dates 
    after 14/09/1752 due to the adoption of the Gregorian calendar in the UK */
</code></pre>

<p>Source code should be tolerant of auto-formatting to various widths and not rely on manual editing to align.</p>

<hr>

<p>Dubious use of <code>short</code> when <code>int</code> or <code>bool</code> would work.  Rarely does <code>short</code> make for faster code nor smaller code.  If memory space was an issue, unclear why code does not use <code>bool</code> or <code>char</code>.  As codes tends to zero fill arrays, also better to initialize the variable rather than assign it later.</p>

<pre><code> // short leap;
 // leap = is_leap_year(date);
 int /* or bool */ leap = is_leap_year(date);
</code></pre>

<hr>

<p>Unclear why code copies the variable into auxiliaries.</p>

<pre><code>// short day = date.day;
// short month = date.month;
// short year = date.year;
// return (day += month &lt; 3 ? year-- : year - 2, 23 * month / 9 + day + 4 + year / 4 - year / 100 + year / 400) % 7; 
</code></pre>

<p>Versus</p>

<pre><code>return (date.day += date.month &lt; 3 ? date.year-- : date.year - 2, 23
    * date.month / 9 + date.day + 4 + date.year / 4 - date.year / 100
    + date.year / 400) % 7;

 // or perhaps
date.day += date.month &lt; 3 ? date.year-- : date.year - 2;
return (23 * date.month / 9 + date.day + 4 + date.year / 4 - date.year / 100
    + date.year / 400) % 7;
</code></pre>
    </div>