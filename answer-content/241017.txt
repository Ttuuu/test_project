<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The condition <code>counter_right == len - len_left || counter_left &lt; len_left &amp;&amp; array_left[counter_left] &lt;= array_right[counter_right])</code> looks scary. You'd be in much better shape separating <code>join</code> into two phases: actual merge, and handling tails:</p>

<pre><code>void join (int* array, int* array_left, int* array_right, size_t len, size_t len_left)
{
    size_t counter_left = 0;
    size_t counter_right = 0;
    size_t i;

    // Phase 1: merge
    while (counter_left &lt; len_left &amp;&amp; counter_right &lt; len - len_left) {
        if (array_left[counter_left] &lt;= array_right[counter_right]) {
            array[i++] = array_left[counter_left++];
        } else {
            array[i++] = array_right[counter_right++];
        }
    }

    // Phase 2: tails
    // Now one of the arrays is exhausted. Another one (possibly) still
    // has data. Copy them to the target array.
    // Notice that we don't care which one is empty: copying from an empty
    // array is no-op.
    while (counter_left &lt; len_left) {
        array[i++] = array_left[counter_left++];
    }

    while (counter_right &lt; len - len_left) {
        array[i++] = array_right[counter_right++];
    }
}
</code></pre></li>
<li><p>Of course, the two tail loops above implement a <code>copy</code> algorithm, and deserve to be factored out into a function. Interestingly, you already have this function. You just misnamed it. <code>partition</code> is actually <code>copy</code>.</p>

<p>In fact, you may consider dropping altogether, and use <code>memcpy</code> instead.</p></li>
<li><p>Recursion is expensive. For the arrays small enough, insertion sort is faster. Consider switching to insertion sort when <code>len</code> is less than a threshold, say <code>16</code>. The exact value of the threshold is fine tuning, and requires some profiling experiments.</p></li>
<li><p>Using VLAs is scary. Given a huge array it may overflow the stack. Consider heap allocation. Notice that the scratch array can be allocated only once.</p></li>
<li><p>Kudos for <code>&lt;=</code> when comparing elements. Many people miss that this is how mergesort maintains stability.</p></li>
</ul>
    </div>