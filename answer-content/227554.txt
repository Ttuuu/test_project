<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The algorithm provided by the OP presumes that the array is important and preserves the original array. In addition, the displayed algorithm seeks an "instantaneous answer", as if the routine may be interrogated at any point to get that answer at the point in time. </p>

<p>All that is important here is the output - a single number. Any other information used to get that output can be discarded. As such, any information that is not useful for the solution (such as negative elements of the array) can be discarded with extreme prejudice. And once an element has been used to work towards a solution, it too can be discarded or forgotten.</p>

<p>Thus, the algorithm should not be trying to find the contiguous elements, but rather the hole that is there (as is stated in the original question).</p>

<p>I am not a java programmer, so I will answer with pseudo-code. The following alternative approach focuses on the speed, and in doing so is willing to sacrifice space. Because the input array is random, some semblance of state (i.e. the contiguous blocks) is required.</p>

<pre><code>input: array [A]

Create capture array of size 1 million Boolean[B]
traverse [A] (read values)
    discard values &lt;= 0
    set [B](value) = true
traverse [B]
    Stop at first false. 

Solution: index[B] at the stopping point
</code></pre>

<p>This is a potential max of <span class="math-container">\$O(2n)\$</span> if a random access array is used.</p>
    </div>