<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Performance</h3>

<p>It's the <code>dedupe</code> implementation that drags the performance of your solution down.
It's because <code>Array.prototype.includes()</code> does a linear search,
so your implementation becomes \$O(n^2)\$.
If you rewrite this function to be \$O(n)\$,
the solution will pass all tests.</p>

<h3>Using arrays</h3>

<p>The <code>dedupe</code> function takes as parameters an array and its size.
The size parameter is unnecessary and potentially confusing,
because you can always access that with <code>.length</code>.</p>

<h3>Binary search</h3>

<p>A common practice when implementing binary search over a list is to return the index of a value if it is found,
otherwise return a negative value from which the insertion point can be computed using the formula <code>-1 -ret</code>.
It would be cleaner to implement <code>binarySearch(arr, value, low, high)</code> in 
a way to follow this common contract,
and another <code>rank</code> function that would use the result of <code>binarySearch</code> to compute the correct rank.</p>

<p>Also, the implementation is a bit complicated.
Simpler techniques exist, and the cache is not needed either.
Consider this, for example:</p>

<pre><code>function binarySearch(arr, value, lowIndex, highIndex) {
    if (lowIndex &gt; highIndex) {
        return -(lowIndex + 1);
    }

    let midIndex = lowIndex + Math.trunc((highIndex - lowIndex) / 2);
    if (value == arr[midIndex]) {
        return midIndex;
    }
    if (value &gt; arr[midIndex]) {
        return binarySearch(arr, value, lowIndex, midIndex - 1);
    }
    return binarySearch(arr, value, midIndex + 1, highIndex);
}
</code></pre>
    </div>