<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So for an early project this already looks quite good, however there is still a lot to improve.</p>

<ol>
<li><p>The obligatory "Do not use <code>namespace std;</code>"It is bad practice and will hurt you in the long run. So start typing <code>std::</code> when you need it. </p></li>
<li><p>Whenever you pass data that should not be modified, pass it as <code>const</code>, so that you actually cannot modify it. Also you are passing the data via a copy here, a reference would make more sense. So for example your function <code>CreateNewAccount</code> should look like this</p>

<pre><code>void CreateNewAccount(const std::string &amp;newUsername, 
                      const std::string &amp;newPassword);
</code></pre>

<p>The same applies for functions that do not change the state of the class. mark them const.</p></li>
<li><p>Your naming is often confusing. AcountLocation seems to stand for AcountID. Please go through your variables check whether the name means the right thing.</p></li>
<li><p>The last element of a contain can usually be accessed via <code>back()</code>. So instead of <code>AccountList.at(accountListSize - 1)</code> you can write <code>AccountList.back()</code>, although it returns an iterator.</p></li>
<li><p>If you go through a container, you can use range based loops in C++11, so this </p>

<p><code>for (int i = 0; i &lt; accountList.size(); i++)</code> becomes that </p>

<p><code>for (Account &amp;account : accountList)</code></p></li>
<li><p>Use the available functionality and avoid redeclaring the same thing. For example <code>int accountListSize = AccountList.size();</code> is a bad design and not needed.</p></li>
<li><p>You have a couple of functions that are not valid without each other</p>

<pre><code>void DepositMoney(double depositAmount);
void WithdrawMoney(double withdrawalAmount);
void SetLastMoneyMovement(int accountID, double amount);
void SetBeginningBalance(int accountID);
</code></pre>

<p>The only way that you can change the last movement is via DepositMoney and WithdrawMoney, so the function SetLastMoneyMovement should not be public, but only be called via those other methods.</p></li>
<li><p>You seriously lack any form of error checking. What if the user inputs wrong data, are there bounds etc.</p></li>
<li><p>While your code works, it does not show a valid concept of the problem at hand. The ATM only knows persons and a person has multiple accounts. Therefore, your ATM class should only have a list of available persons and you should create a person class that in turn has the information about that persons accounts. At the same time account balance last transactions are relative to an account and not the person that own that account. So as a stub i would suggest the following design (I ran out of time too :( ):</p>

<pre><code>class Account {
public:
    Account(const double initialBalance)
        : balance(initialBalance) {}
    double GetLastMoneyMovement() const {return lastMoneyMovement;}
    double GetLastBalance() const {return balance;}
    double GetBeginningBalance() const {return beginningBalance;}
    void DepositMoney(const double depositAmount);
    bool WithdrawMoney(const double withdrawalAmount);
private:
    double balance;
    double beginningBalance = 0.0;
    double lastMoneyMovement = 0.0;
}

class Customer {
public:
    explicit Customer(const std::string &amp;userName, 
                      const std::string &amp;passWord)
        : username(userName), password(passWord) {}
    void CreateNewAccount(const double initialMoney) 
        {accounts.push_back(Account(initialMoney));}
    void DepositMoney(const size_t accountID, 
                      const double depositAmount);
    bool WithdrawMoney(const size_t accountID, 
                       const double withdrawalAmount);

private:
    const std::string username;
    std::string password;
    std::vector&lt;Accounts&gt; accounts;
}

class AutoTellerMachine {
public:
      AutoTellerMachine() {};

private:
    std::vector&lt;Customer&gt; customers;
}
</code></pre></li>
</ol>
    </div>