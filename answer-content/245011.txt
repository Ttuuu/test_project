<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would be great if the code could be simplified using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Import" rel="nofollow noreferrer">dynamic imports</a>.  I haven't tried this myself but if the image names could be put into an array then something like the following might work, where the exported images are set as properties on an object that can be exported. When <a href="https://stackoverflow.com/a/52957110/1575353">this SO answer to <em>Create a loop to import files dynamically in React</em></a> was written only Chrome and Safari supported that feature but since then it appears that Edge and Firefox now offer support as well.</p>
<pre><code>const images = {};
const nums = [1, 2];
for (const format of  ['png', 'webp']) {
  for (const num of nums) {
    const key = `image${num}` + format === 'webp' ? 'webp' : '';
    images[key] =  await import( `./assets/image-${num}.${format}`);
  }
}
</code></pre>
<p>But according to the Hacks blog post by Jason Orendorff <a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/" rel="nofollow noreferrer"><em>ES6 In Depth: Modules</em></a></p>
<blockquote>
<p>For a dynamic language, JavaScript has gotten itself a surprisingly static module system.</p>
<ul>
<li>All flavors of <code>import</code> and <code>export</code> are allowed only at toplevel in a module. There are no conditional imports or exports, and you can’t use <code>import</code> in function scope.</li>
<li>All exported identifiers must be explicitly exported by name in the source code. You can’t programmatically loop through an array and export a bunch of names in a data-driven way.</li>
</ul>
</blockquote>
<p>So the function code above could be exported in an async function:</p>
<pre><code>export async function getImages() {
    const images = {};
    //...set keys on images
    return images;
}
</code></pre>
<p>Then that function can be imported:</p>
<pre><code>import { getImages } from './assets.js';
</code></pre>
<p>But to use that function it would need to be run in an async function:</p>
<pre><code>(async () =&gt; {
  const images = await getImages();
  //use images
})();
</code></pre>
<p>Other approaches are listed in answers to <a href="https://forum.freecodecamp.org/t/importing-images-in-react/206974" rel="nofollow noreferrer">this similar post on freecodecamp.org</a> - e.g. from <a href="https://forum.freecodecamp.org/t/importing-images-in-react/206974/4" rel="nofollow noreferrer">this answer by Dan Couper</a>:</p>
<blockquote>
<p>One pretty simple solution:</p>
</blockquote>
<blockquote>
<pre><code>// images.js
const images = [
  { id: 1, src: './assets/image01.jpg', title: 'foo', description: 'bar' },
  { id: 2, src: './assets/image02.jpg', title: 'foo', description: 'bar' },
  { id: 3, src: './assets/image03.jpg', title: 'foo', description: 'bar' },
  { id: 4, src: './assets/image04.jpg', title: 'foo', description: 'bar' },
  { id: 5, src: './assets/image05.jpg', title: 'foo', description: 'bar' },
  ...etc
];
export default images;
</code></pre>
</blockquote>
<blockquote>
<pre><code>// MyComponent.js
import images from './images'
//...snip
{ images.map(({id, src, title, description}) =&gt; &lt;img key={id} src={src} title={title} alt={description} /&gt;)
</code></pre>
<p>You’re basically writing a database of images that match the ones in assets.<br><br>
Then you can be clever in images.js to pull the correct prefix based on the environment if you want. There will be a WebPack plugin that kinda does this as well if you have a google around (you want it to take a directory of files and generate an iterable set of paths to them).<br><br>
The <code>import</code> as described is more for importing one-off images (logos etc) rather than importing lots of images from a directory.</p>
</blockquote>
<hr>
<p>Regarding the pseudocode at the end of the post:</p>
<blockquote>
<pre><code>export const toWEBP = (src) =&gt; {
  const location = src.split(".")
  return `${location}.webp`
}
</code></pre>
</blockquote>
<p>if <code>src</code> contained an extension (e.g. <code>png</code>) then <code>webp</code> would be appended to that existing extension. One option would be to use <code>pop</code> to remove the existing extension and also push <code>webp</code> onto the array before using it in the return value.</p>
    </div>