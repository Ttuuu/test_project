<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While <a href="https://codereview.stackexchange.com/a/209954/98493">the answer by</a> <a href="https://codereview.stackexchange.com/users/100620/ajneufeld">@AJNeufeld</a> correctly explains the shortcomings regarding normal Python in your code, there is indeed a faster way using <code>numpy</code>.</p>

<p>First, you can build a mask of all pixels that have the value 1:</p>

<pre><code>mask = (img == [1, 1, 1]).all(axis=-1)
</code></pre>

<p>This mask is already the same as the output of your <code>generateArray</code>.</p>

<p>Executing your function takes about 720 ms ± 17.9 ms on my machine with some image file I had lying around (PNG, 471 x 698 pixels), whereas the generation of this mask is a hundred times faster at 7.37 ms ± 96.6 µs.</p>

<p>Now we construct two images, one completely black and one completely white:</p>

<pre><code>black = np.zeros_like(img)
white = np.ones_like(img)
</code></pre>

<p>And then you can use <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.where.html" rel="nofollow noreferrer"><code>numpy.where</code></a> to conditionally on the <code>mask</code> use those two images:</p>

<pre><code>img_bw = np.where(mask[:,:,None], white, black)
</code></pre>

<p>The weird looking slicing with <code>None</code> just makes sure that the mask has the right dimensionality (i.e. three values per pixel, instead of just one).</p>

<p>Putting it all together:</p>

<pre><code>import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np

def to_bw(img):
    """Return a black and white copy of `img`.

    Pixels which are white in the original image stay white,
    all other pixels are turned black.
    """
    mask = (img == [1, 1, 1]).all(axis=-1)
    black = np.zeros_like(img)
    white = np.ones_like(img)
    return np.where(mask[:,:,None], white, black)

if __name__ == "__main__":
    img = mpimg.imread('./Training/Image1.png')
    img_bw = to_bw(img)
    plt.imshow(img_bw)
    plt.show()
</code></pre>

<p>The whole <code>to_bw</code> function only takes 14 ms ± 324 µs.</p>
    </div>