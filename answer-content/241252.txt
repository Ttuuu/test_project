<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Circular references are bad; if you split the classes into multiple files (which you'll probably want to do if the goal is to make navigation easier) then circular references usually mean circular imports, which cause other problems.</p>

<p>If you need to split a class up, splitting it into superclasses/mixins is better IMO.  For example:</p>

<pre><code>class MatrixBase:
    """Matrix base class.
    Defines instance variables and initialization."""
    def __init__(self, m, n, data):
        # checks on m, n, data
        self.m = m
        self.n = n
        self.data = data


class MatrixGenericOps(MatrixBase):
    """Generic matrix operations."""

    # many generic methods some returning more matrices
    def __add__(self, other):
        # add matrices
        return type(self)(self.m, self.n, self.data)

    # some methods will affect m, n, data
    def transpose(self):
        # set up new attributes
        self.m = m
        self.n = n
        self.data = data


class MatrixDecomposition(MatrixBase):
    """Decomposition operations."""

    # NB: eventually these might change m, n, data
    def QR(self):
        # do stuff for QR decomposition using self.mtrx
        # return Q, R
        pass

    def LU(self):
        # do stuff for LU decomposition using self.mtrx
        # return L, U
        pass


class Matrix(MatrixGenericOps, MatrixDecomposition):
    """A fully-functional Matrix."""
    pass
</code></pre>
    </div>