<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I haven't done much Java development since I was a univeristy student 15 years ago so my assistance there will be limited. The bulk of this review will be on the JavaScript code. </p>

<h2>Java</h2>

<h3>Comments</h3>

<p>There are single line comments used for multiple lines of text - <a href="https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html#format" rel="nofollow noreferrer">Doc comments</a> or <a href="https://www.oracle.com/java/technologies/javase/codeconventions-comments.html" rel="nofollow noreferrer">Block comments</a> could be used instead to follow common conventions.</p>

<p>For example, instead of :</p>

<blockquote>
<pre><code>// Prepare transient fields
//
// — formattedCreationDateTime
// — votes
//
// that will be used in the template.
</code></pre>
</blockquote>

<p>Use a block comment:</p>

<pre><code>/* 
* Prepare transient fields
*
* — formattedCreationDateTime
* — votes
*
* that will be used in the template.
*/
</code></pre>

<p>And also:</p>

<blockquote>
<pre><code>//==========================================
//
// Database Columns
//
//==========================================
</code></pre>
</blockquote>

<p>Use a block comment:</p>

<pre><code>/*
* ==========================================
*
* Database Columns
*
* ==========================================
*/
</code></pre>

<h3>Braces</h3>

<p>It is better to use braces around control structures even if they contain a single statement. If you or a colleague adds a statement intending to add a block then missing braces could lead to logical errors.</p>

<h3>Exception/Error handling</h3>

<p>While it may be a rare scenario, what would happen if a question or answer wasn't found when a user attempts to vote - e.g. if deleting is possible. </p>

<h2>JavaScript</h2>

<p>There are many things I spot. Using a linter like <a href="https://jslint.com/" rel="nofollow noreferrer">JSLint</a>, <a href="https://eslint.org/" rel="nofollow noreferrer">esLint</a>, etc. would find many of these things.</p>

<h3>Braces</h3>

<p>As mentioned above for Java, braces aren't required for control structures but it helps avoid bugs when you or a colleague need to add lines to blocks within those control structures.</p>

<h3>Semicolons</h3>

<p>Semicolons aren't required for all lines except <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">a handful of statements</a> so <a href="https://www.freecodecamp.org/news/codebyte-why-are-explicit-semicolons-important-in-javascript-49550bea0b82/" rel="nofollow noreferrer">as this blog post</a> explains it is best to use them to avoid unintentional behavior in your code. </p>

<h3>Varible scope, initilization</h3>

<p>Some variables are declared using <code>let</code> - e.g. <code>questionBody</code> in <code>convertQuestionBodyToHTML()</code>, but these are never re-assigned. It is best to default to using <code>const</code> and then when it is determined that re-assignment is necessary use <code>let</code>. This even applies to arrays when elements are only pushed into them.</p>

<p>There is the variable <code>tagEditorInput</code> in <code>tagEditorInputOnInput()</code> declared with <code>var</code>. This should also be declared with <code>const</code> since there is no need to re-assign that variable, and it doesn't need to be accessed in any context other than the function.</p>

<blockquote>
<pre><code>for (let e of questionBody.getElementsByTagName("*"))
    if (e.tagName !== "CODE" &amp;&amp; e.tagName !== "PRE")
        e.innerHTML = replaceHTMLEntitiesWithRealCharacters(e.innerHTML);
</code></pre>
</blockquote>

<h3>Selecting elements</h3>

<p>I typically see code that uses <code>document.querySelectorAll()</code> just to select items by tag or class name, but here I would recommend using <code>querySelectorAll()</code> with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not" rel="nofollow noreferrer">CSS <code>:not()</code> selector</a>  because it can eliminate the need to have the <code>if</code> inside the loop and reduce the number of elements looped over.</p>

<p>For example in <code>convertQuestionBodyToHTML()</code></p>

<pre><code>for (let e of questionBody.querySelectorAll('*:not(code):not(pre)'))
    e.innerHTML = replaceHTMLEntitiesWithRealCharacters(e.innerHTML);
</code></pre>

<p>And the same applies to <code>convertAnswersBodiesToHTML()</code></p>

<p>The function <code>highlightCodeInsideElement()</code> could be simplified to <em>only</em> select elements that are <code>&lt;code&gt;</code> elements with a parent element that is a <code>&lt;pre&gt;</code> element using the CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator" rel="nofollow noreferrer">child combinator</a>:</p>

<pre><code>const codeElements = element.querySelectorAll("pre &gt; code");

for (let c of codeElements)
    hljs.highlightBlock(c);
</code></pre>

<p>It may be appropriate to use <code>codeElements.forEach(highlightBlock)</code> unless the parameters don't align properly.</p>

<h3>Replacing characters</h3>

<p>The function <code>replaceHTMLEntitiesWithRealCharacters()</code> appears to decode HTML entities by replacing three characters. Each call to <code>replaceAll</code> splits the string with the search string and joins using the replace string as the glue. Did you consider using <code>String.replace()</code> with a regex? I <a href="https://jsbin.com/zesize/3/edit?js,console,output" rel="nofollow noreferrer">my experiments</a> it seems faster to use regular expressions to </p>

<pre><code>function replaceHTMLEntitiesWithRealCharacters(string) {
    string = string.replace(/&amp;lt;/g, "&lt;");
    string = string.replace(/&amp;gt;/g, "&gt;");

    // This HTML entity should be the last since
    // it can affect on the other entities.
    string = string.replace(/&amp;amp;/g, "&amp;");
    return string;
}
</code></pre>

<p>As <a href="https://stackoverflow.com/a/34064434/1575353">this SO answer suggests</a> the <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMParser" rel="nofollow noreferrer">DOMParser API</a> could be used but it seems to be a bit slower, likely because it does more than just replacing those three characters.</p>

<h3>Event handlers</h3>

<p>The function <code>createRendererTagElement()</code> creates span tags with an svg element that has an <code>onmouseup</code> event handler. It is better to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>Element.addEventListener()</code></a> for multiple reasons:</p>

<ul>
<li>separation of JS logic from HTML</li>
<li>allows multiple event handlers if necessary</li>
</ul>
    </div>