<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is pretty solid. I so have a couple of minor tweaks.</p>
<blockquote>
<pre><code>Function CodeName() As Worksheet
Set CodeName = DataSheet
End Function
</code></pre>
</blockquote>
<p>This function is just adding a layer obfuscation.   You should just change the worksheets code name.</p>
<ul>
<li><kbd>Ctrl</kbd> + <kbd>R</kbd> will Open the Folder Explorer</li>
<li><kbd>Alt</kbd> + <kbd>F4</kbd></li>
</ul>
<p>From here you can change the Worksheet's Name property.</p>
<p><a href="https://i.stack.imgur.com/2OjXH.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/2OjXH.png" alt="Change the Worksheets Codename"></a></p>
<p>Combining lines should be avoided. It detracts from the readability of the code.  I am not opposed to declaring a variable and initiating its value in one line but only because you are allowed to assign values when declaring variables in most other languages.</p>
<p>Dim Target as Range: Set Target = Sheet1.Range("A1")</p>
<p>Here you are combing two actions into a single line.  Not only does it make it harder to read but it may run into problems later on when you are writing similar code.</p>
<blockquote>
<p>.Open "GET", url, False: .Send</p>
</blockquote>
<p>Consider for instance that weeks down the you are having problems writing a new function because you forgot to <code>.Send</code> your request.  So what do you do?  You reference your code base.  Combing the <code>.Open</code> and <code>.Send</code> request into one line makes it hard to distinguish the ↑code above↑  from the ↓code below↓.</p>
<blockquote>
<p>.Open "GET", url, False</p>
</blockquote>
<p>Although you never asked about speed I think its worth mentioning.</p>
<p>Adding <code>Application.ScreenUpdating = False</code> to the beginning of your code will make it run considerably faster.</p>
<p>Setting the <code>varAsync</code> parameter of the <code>MSXML2.XMLHTTP.Open()</code> method to True will allow the rest of the code to run while the HTTP <code>XMLHTTP.Request()</code> is processing.  This will allow you to create more connections.  Having 50 or more connections processing at once will greatly sped up the code.</p>
<blockquote>
<p>Sub open(bstrMethod As String, bstrUrl As String, [varAsync],
[bstrUser], [bstrPassword])</p>
</blockquote>
<hr>
<p><a href="https://i.stack.imgur.com/5RHEN.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/5RHEN.png" alt="Object Browser"></a></p>
<p>In my answers to the questions below I create a connection pool.  I initiate the pool with x number of connections.  As the requests are completed the newly freed connection is given a new request.</p>
<p>Shameless plug:</p>
<ul>
<li><a href="https://codereview.stackexchange.com/a/210404/171419">Data scraping from Internet with Excel-VBA</a></li>
<li><a href="https://codereview.stackexchange.com/a/196922/171419">Retrieve data from eBird API and create multi-level hierarchy of locations</a></li>
</ul>
<p>In truth, setting up a connection pool, is probably over kill.  But it is nice to know that it can be done in case you every need the extra speed boast.</p>
    </div>