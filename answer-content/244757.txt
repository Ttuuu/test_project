<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Working directory</h2>
<p>It's not necessary to do this:</p>
<pre><code>    os.chdir(nmrstarfile_directory)
</code></pre>
<p>and having other code rely on the working directory makes that code more fragile and debugging trickier. <code>pathlib</code> has excellent facilities for building full paths off of a base path.</p>
<h2>Regular expressions</h2>
<p>This regex:</p>
<pre><code>           extract_data_only=re.search(r'\b\d+\s+[A-Z]{3}\s+\w+\s+\w+\s+\d+\s+\d+',modifier)
</code></pre>
<p>would benefit from being <code>re.compile</code>'d outside of your loops - maybe as a global constant, or at the least near the top of the function. That way you don't have to re-compile it on every loop iteration.</p>
<h2>Unpacking</h2>
<pre><code>                amino_acid_number=str(int(split_data[5])+int(seq_start)-1)
                residue_type=split_data[6]
                atom_type=split_data[7]
                converted=acid_map[residue_type]
                chemical_shift=split_data[10]
</code></pre>
<p>if you only need items 5-10, then</p>
<pre><code>amino_acid, residue_type, atom_type, _, _, chemical_shift = split_data[5:11]
</code></pre>
<p>Generally, you should avoid repeated references to difficult-to-understand index expressions like <code>splitter2[0]</code>. Attempt to give them their own meaningfully-named variable.</p>
<h2>Set membership</h2>
<pre><code>if atom_type == 'N' or atom_type == 'HA' or atom_type =='CA' or atom_type == 'CB' or atom_type=='H' or atom_type=='C':
                
</code></pre>
<p>can be</p>
<pre><code>if atom_type in {'N', 'HA', 'CA', 'CB', 'H', 'C'}:
</code></pre>
<p>That set should likely be stored outside of the function as a constant.</p>
<h2>Imports</h2>
<p>Don't do these:</p>
<pre><code>    from sparta_file_formatter import check_sparta_file_boundaries
    from nmrstar import dict_create
    from nmrstar import fill_missing_data
</code></pre>
<p>in the middle of your function. Do them at the top of the file.</p>
<h2>String interpolation</h2>
<pre><code>atom_value_holder[0]+'-C'+' 1000'+'\n'
</code></pre>
<p>can be</p>
<pre><code>f'{atom_value_holder[0]}-C 1000\n'
</code></pre>
<p>Even if you didn't use an f-string, there is no need to separate those last three string literals into concatenations.</p>
<h2>Extend</h2>
<pre><code>                missing_values_added.append(atom_find.group(0)+'-N'+' 1000'+'\n')
                missing_values_added.append(atom_find.group(0)+'-HA'+' 1000'+'\n')
                missing_values_added.append(atom_find.group(0)+'-C'+' 1000'+'\n')
                missing_values_added.append(atom_find.group(0)+'-CA'+' 1000'+'\n')
</code></pre>
<p>should be</p>
<pre><code>atom = atom_find.group(0)
missing_values_added.extend((
    f'{atom}-N 1000\n',
    f'{atom}-HA 1000\n',
    f'{atom}-C 1000\n',
    f'{atom}-CA 1000\n',
))
</code></pre>
<h2>Checking for any match</h2>
<p>Do not use <code>findall</code> here:</p>
<pre><code>re.findall('\BG-CB',stuff) != []
</code></pre>
<p>Use <code>search</code>. If it returns <code>None</code>, there are no hits; otherwise there is at least one hit; pair this with <code>is not None</code>.</p>
<h2>Shadowing</h2>
<p>This:</p>
<pre><code>dict={}
</code></pre>
<p>is nasty, and setting you up for failure. <code>dict</code> is a (very commonly used) built-in name, so don't shadow it with your own variable - <em>particularly</em> at the global level.</p>
    </div>