<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Beautify your regex</h2>
<p>Say <strong>No</strong> to <code>Pattern.compile</code> and instead of</p>
<blockquote>
<pre><code> Pattern.compile("^((?!(\\{.*\\})).)*$")
</code></pre>
</blockquote>
<p>use scalish way:</p>
<pre><code> "^((?!(\\{.*\\})).)*$".r
</code></pre>
<p>Say <strong>No</strong> to <code>\\</code> in regex and instead of</p>
<blockquote>
<pre><code>"^((?!(\\{.*\\})).)*$"
</code></pre>
</blockquote>
<p>use <code>"""</code> way:</p>
<pre><code>"""^((?!(\{.*\})).)*$"""
</code></pre>
<h2>Return values without <code>val</code>/<code>var</code></h2>
<p>You can simply write your <code>containsTag</code> without <code>val</code> and result of last line will return from function - it will return your's matches:</p>
<pre><code>def containsTag(text: String): Boolean = {
  ! """^((?!(\{.*\})).)*$""".r.matches(text)
}
</code></pre>
<h2>Choose your destiny</h2>
<p>Sometimes it is good to use <code>if</code>/<code>else</code> but more readable <code>match</code>/<code>case</code>:</p>
<pre><code>containsTag(text) match {
  case true =&gt;
    val randomPosition = Random.nextInt(allCharacters.length - 1)
    text.replace("}", allCharacters(randomPosition).toString)
  case _ =&gt;
    text
}
</code></pre>
<h2>Feel the power</h2>
<p>Collect it all together:</p>
<pre><code>  val allCharacters = "qwertyuiopasdfghjklzxcvbnmQWERTY" +
    "UIOPASDFGHJKLZXCVBNM1234567890!@#%*()_+-=[]{x}|?.;:`"

  def removeTags(text: String): String = {

    def containsTag(text: String): Boolean = {
      ! """^((?!(\{.*\})).)*$""".r.matches(text)
    }

    containsTag(text) match {
      case true =&gt;
        val randomPosition = Random.nextInt(allCharacters.length - 1)
        text.replace("}", allCharacters(randomPosition).toString)
      case _ =&gt;
        text
    }
  }

  val res = removeTags("my friendly {name} is $userNickname$")
</code></pre>
<h2>For random chars</h2>
<p>According to <a href="https://stackoverflow.com/a/21261910/4367350">answer</a> in <a href="https://stackoverflow.com/questions/21261737/replacing-characters-in-a-string-in-scala">Replacing characters in a String in Scala</a> you can use construction without while loop but with <code>map</code> + <code>lambda</code> like in code below:</p>
<pre><code>  val allCharacters = "+=-?"

  def removeTags(text: String): String = {

    def containsTag(text: String): Boolean = {
      ! """^((?!(\{.*\})).)*$""".r.matches(text)
      true
    }

    containsTag(text) match {
      case true =&gt;
        text.map(
          (c) =&gt; c match {
            case '{' =&gt;
              val randomPosition = Random.nextInt(allCharacters.length - 1)
              allCharacters(randomPosition)
            case c =&gt; c // for another char which is not == {
          }
        )
      case _ =&gt;
        text
    }
  }
</code></pre>
<p>Then it will be good to <strong>divide functionality</strong> and create new <code>Char =&gt; Char</code> transformer function from anonymous <code>(c) =&gt; c match {..}</code> which we lay in <code>text.map(...)</code>:</p>
<pre><code>//...
def replaceRandom(c: Char): Char = {
  c match {
    case '{' =&gt;
      val randomPosition = Random.nextInt(allCharacters.length - 1)
      allCharacters(randomPosition)
    case c =&gt; c
  }
}

containsTag(text) match {
  case true =&gt; text.map((c) =&gt; {replaceRandom(c)})
  case _ =&gt; text
}
//...
</code></pre>
<p><strong>Simplify</strong> code in two parts.</p>
<p>Part 1: simplify <code>match/case</code> in <code>replaceRandom(c: Char): Char</code> :</p>
<pre><code>def replaceRandom(c: Char): Char = {
  c match {
    case '{' =&gt;
      val randomPosition = Random.nextInt(allCharacters.length - 1)
      allCharacters(randomPosition)
    case c =&gt; c
  }
}

// remove unneeded "{" and "}"
def replaceRandom2(c: Char): Char = c match {
  case '{' =&gt;
    val randomPosition = Random.nextInt(allCharacters.length - 1)
    allCharacters(randomPosition) 
  case c =&gt; c
}
</code></pre>
<p>Then part 2: simplify <code>map((c) =&gt; {replaceRandom(c)})</code>:</p>
<pre><code>containsTag(text) match {
  case true =&gt; text.map((c) =&gt; {replaceRandom(c)})
  case _ =&gt; text
}

//remove unneeded "{" and "}"
containsTag(text) match {
  case true =&gt; text.map((c) =&gt; replaceRandom(c))
  case _ =&gt; text
}

//remove unneeded "(c)" to wildcard "_"
containsTag(text) match {
  case true =&gt; text.map(replaceRandom(_))
  case _ =&gt; text
}

//remove unneeded wildcard "_"
containsTag(text) match {
  case true =&gt; text.map(replaceRandom)
  case _ =&gt; text
}
</code></pre>
<h2>Feel the power again</h2>
<p>So for your task i will chose that variant: all functions are divided, logic placed is simple if/else and now good readable (as you see now it good readable also with if/else as i wrote to you above). After, when logic will grow you can use instead if/else match/case.</p>
<pre><code>  def removeTags(text: String): String = {

    def containsTag(text: String): Boolean = {
      ! """^((?!(\{.*\})).)*$""".r.matches(text)
      true
    }

    def replaceRandom(c: Char): Char = c match {
      case '{' =&gt;
        val randomPosition = Random.nextInt(allCharacters.length - 1)
        allCharacters(randomPosition)
      case c =&gt; c
    }

    if (containsTag(text))
      text.map(replaceRandom)
    else text

  }

  val allCharacters = "+=-?"
  val e = "my fr{{{iend{{{ly {{name} is $userNickname$"
  println(removeTags(e))
</code></pre>
<hr>
<p>P.S. or place to think</p>
<ol>
<li>Maybe your regex not working? Check it at: <a href="https://regex101.com/r/2PR2kC/1" rel="nofollow noreferrer">Regex101</a></li>
<li>Why you need to replace <code>}</code> symbol with another random from <code>allCharacters </code> which can be also <code>}</code>?</li>
<li>The bad, the good and the <code>!</code>: maybe try to rewrite your <code>!noTagsRegex</code> to <code>noTagsRegex</code>? It can be more readable for another people.</li>
</ol>
<blockquote>
<p>Also i want to see additions to my review too, that code is too verbose, so welcome!</p>
</blockquote>
    </div>