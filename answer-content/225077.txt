<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>nth slicing</h2>

<p>Perhaps you could use a slice with map instead.</p>

<pre><code>module Enumerable
  def nth(n)
    self.each_slice(n).select{|c| c.length == n}.map(&amp;:last)   
  end
end
</code></pre>

<h3>unit tests</h3>

<pre><code>print [2, 4, 6, 8, 10, 12].nth(3) # =&gt; [6, 12]
print "\n"
print [2, 4, 6, 8, 10].nth(3) # =&gt; [6]
print "\n"
print [2, 4, 6, 8].nth(3) # =&gt; [6]
print "\n"
print [2, 4, 6].nth(3) # =&gt; [6]
print "\n"
print [2, 4].nth(3) # =&gt; []
print "\n"
</code></pre>

<hr>

<h2>Rubocop Report</h2>

<p>Skipping an iteration should be done like this..</p>

<pre><code> next unless i == relevant_iteration

    ordinal += 1
    relevant_iteration = ordinal * n
</code></pre>

<p>rather than..</p>

<blockquote>
<pre><code>if i == relevant_iteration
  ordinal += 1
  relevant_iteration = ordinal * n
</code></pre>
</blockquote>

<p>General Guidelines:</p>

<ul>
<li>use 2 spaces for indentation</li>
<li><a href="https://www.mikeperham.com/2018/02/28/ruby-optimization-with-one-magic-comment/" rel="nofollow noreferrer">frozen string</a></li>
<li><code>n</code> as parameter name: min length should be 3 -&gt; <code>takeIndex</code> instead?</li>
</ul>

<p>Refactored</p>

<pre><code># frozen_string_literal: true

module Enumerable
  def nth(takeIndex)
    i = 0
    ordinal = 1
    relevant_iteration = takeIndex * ordinal

    self.select do |num|
      i += 1

      next unless i == relevant_iteration

      ordinal += 1
      relevant_iteration = ordinal * takeIndex

      num
    end
  end
end
</code></pre>
    </div>