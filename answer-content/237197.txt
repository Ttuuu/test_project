<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>To keep you <a href="https://clean-code-developer.com/" rel="nofollow noreferrer">DRY</a> use loops and arrays.</li>
<li>Never (almost) use <code>.Select</code>, <code>Selection.</code> see <a href="https://rubberduckvba.wordpress.com/2019/06/30/the-macro-recorder-curse/" rel="nofollow noreferrer">the-macro-recorder-curse</a></li>
<li>Avoid implicit references (e.g <code>Worksheets("Sheet1").Activate</code> is <code>ActiveWorkBook.Worksheets("Sheet1").Activate</code>). Use explicit refs, best Sheets <a href="https://rubberduckvba.wordpress.com/2019/12/19/code-name-sheet1/" rel="nofollow noreferrer">CodeName</a>, as e.g Sheetnames can be edited and wrong codename raises error at compile not run-time as missing sheetname.</li>
</ul>

<pre class="lang-vb prettyprint-override"><code>Sub Cell_analysis()
    Dim wb As Workbook
    Set wb = ThisWorkbook
'Unprotect
    wb.Unprotect Password:=MDP
    Sheet1.Unprotect Password:=MDP

'Define range with input box
    Dim rng As Range
    Dim DefaultRange As Range
    Dim FormatRuleInput As String
    Sheet1.Name = "Sheet1"

    If TypeName(Selection) = "Range" Then 'as you select sth it is valid to use Selection here
        Set DefaultRange = Selection
    Else
        Set DefaultRange = ActiveCell
    End If

  On Error Resume Next 'when using On Error Resume Next, always handle error or you propagate "ignorance is bliss!"
    Set rng = Application.InputBox( _
      Title:="Select Worksheet Range", _
      Prompt:="Select Worksheet Range", _
      Default:=DefaultRange.Address, _
      Type:=8)
    If Err.Number &lt;&gt; 0 Then
      'handle error
    End If
  On Error GoTo 0
    If rng Is Nothing Then Exit Sub

'Unmerge all cells
    With rng
        .UnMerge

'Use following formula to retrieve cell informations
        Dim NewSheet As Worksheet
        Sheet1.Copy After:=Sheet1
        Set NewSheet = ThisWorkbook.Worksheets(Sheet1.Index + 1)
        .Cells.FormulaR1C1 = "=CELL(""Format"",'" &amp; NewSheet.Name &amp; "'!RC) &amp; CELL(""Protect"",'" &amp; NewSheet.Name &amp; "'!RC) &amp; ISFORMULA('" &amp; NewSheet.Name &amp; "'!RC)"

    'Conditional formatting
        Dim ConditionArr(0 To 25) As FormatCondition ', condition2, condition3, condition4, condition5, condition6, condition7, condition8, condition9, condition10, condition11, condition12, condition13, condition14, condition15, condition16, condition17, condition18, condition19, condition20, condition21, condition22, condition23, condition24, condition25, condition26 As FormatCondition

    'Clear existing formatting
        With .FormatConditions
            .Delete
            Dim StringArr As Variant
            StringArr = Array("G , 0", "D1 , 0", "D2 , 0", "F0 , 0", "F1 , 0", "F2 , 0", "F3 , 0", "F4 , 0", "F5 , 0", "F6 , 0", "F7 , 0", "F8 , 0", "F9 , 0" _
                   , "G , 1", "D1 , 1", "D2 , 1", "F1 , 1", "F1 , 1", "F2 , 1", "F3 , 1", "F4 , 1", "F5 , 1", "F6 , 1", "F7 , 1", "F8 , 1", "F9 , 1")
    'List conditions
            Dim n As Long
            For n = 0 To UBound(ConditionArr) - 1
                Set ConditionArr(n) = .Add(xlTextString, TextOperator:=xlContains, String:=StringArr(n))
            Next n

            Dim ColorArr As Variant
    'conditional formatting options
            ColorArr = Array(RGB(255, 255, 255), RGB(153, 204, 255), RGB(102, 178, 255), RGB(229, 255, 204), RGB(204, 255, 153), RGB(178, 255, 102), RGB(153, 255, 51) _
                    , RGB(128, 218, 0), RGB(102, 204, 0), RGB(76, 153, 0), RGB(51, 102, 0), RGB(37, 72, 0), RGB(25, 45, 0) _
                    , RGB(255, 255, 255), RGB(153, 204, 255), RGB(102, 178, 255), RGB(229, 255, 204), RGB(204, 255, 153), RGB(178, 255, 102), RGB(153, 255, 51) _
                    , RGB(128, 218, 0), RGB(102, 204, 0), RGB(76, 153, 0), RGB(51, 102, 0), RGB(37, 72, 0), RGB(25, 45, 0))
            For n = 0 To UBound(ColorArr) - 1
                With ConditionArr(n)
                    .Interior.Color = ColorArr(n)
                    If n &lt; 13 Then
                        .Font.ColorIndex = 3
                    End If
                End With
            Next n
        End With

'Select the sheet to see the final result

        Sheet1.Activate

    'Result shaping

        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlTop
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
        .ColumnWidth = 15
        .RowHeight = 18
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Font.Name = "Calibri"
        .Font.Bold = True
        .Font.Size = 11
        .Font.Underline = False
        .Font.Italic = False
    End With

'Display result of analyzed cells
    MsgBox rng.Count &amp; "   Cells treated : " &amp; rng.Columns.Count &amp; " Columns" &amp; " &amp; " &amp; rng.Rows.Count &amp; "  Rows"

End Sub
</code></pre>

<p>Maybe not much faster, but far better readable, code shrunk to 40%</p>
    </div>