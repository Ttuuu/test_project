<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Labeled loops</h3>

<p>You say </p>

<blockquote>
<pre><code>                        break inner;
</code></pre>
</blockquote>

<p>But that's not necessary.  The <code>inner</code> loop is already the innermost loop.  You could just say <code>break;</code>.  </p>

<p>And frankly, you could have just said </p>

<pre><code>                for (int j = i-1; j &gt;= 0 &amp;&amp; arr[j] &gt; arr[hole]; j--)
</code></pre>

<p>No <code>break</code> or internal <code>if</code> needed.  </p>

<p>But that's not the question you really wanted answered.  </p>

<h3>Insertion sort?</h3>

<p>It's similar to an <a href="https://en.wikipedia.org/wiki/Insertion_sort" rel="nofollow noreferrer">insertion sort</a>.  Your insertion method is a bit odd though.  Normally insertion sort would find the insertion point and then move the elements after that.  You're bubbling the current value forward.  </p>

<p>Consider </p>

<pre><code>int j = i - 1;
while (j &gt;= 0 &amp;&amp; numbers[j] &lt; numbers[i]) {
    j--;
}

int temp = numbers[i];
for (int k = i; k &gt; j; k--) {
    numbers[k] = numbers[k - 1];
}

numbers[j] = temp;
</code></pre>

<p>That does about half as many array assignments as your method.  </p>

<h3>Naming</h3>

<p>I prefer a descriptive name like <code>numbers</code> to a generic abbreviation like <code>arr</code>.  At minimum, it should be <code>array</code>.  But I prefer <code>numbers</code>.  </p>

<blockquote>
<pre><code>    static void sorter(int arr[])
</code></pre>
</blockquote>

<p>As a general rule, we name classes and objects with noun names.  Methods get verb names.  So </p>

<pre><code>    static void sort(int[] numbers) {
</code></pre>

<p>In Java, we also normally write arrays as <code>int[] name</code> not <code>int name[]</code>.  </p>

<p>You could name the class </p>

<pre><code>class InsertionSorter {
</code></pre>

<p>Although in this case <code>InsertionSort</code> can be used as a noun.  </p>

<h3>Wildcard imports</h3>

<pre><code>import java.util.*;
</code></pre>

<p>The general policy is to import one class at a time, not a wildcard group.  That's especially true here, since it's not clear that you are using any <code>java.util</code> classes.  </p>

<h3>Mixing logic and display</h3>

<p>It's generally agreed that it is better to return the data and display it separately.  Since you are sorting in place, that could just look like </p>

<pre><code>InsertionSort.sort(numbers);
System.out.println(Arrays.toString(numbers));
</code></pre>

<h3>Declare at initialization</h3>

<p>You have </p>

<blockquote>
<pre><code>                hole = i;
</code></pre>
</blockquote>

<p>You could do </p>

<pre><code>                int hole = i;
</code></pre>

<p>It's generally considered best practice to declare variables as late as possible.  You don't use <code>hole</code> outside the loop or across iterations, so there's no need to declare it outside the loop.  </p>

<h3>Redundant logic</h3>

<blockquote>
<pre><code>        if(n&gt;=2)
        {
            for(int i = 1; i&lt;n ; i++)
</code></pre>
</blockquote>

<p>If <code>n</code> is 1 or less then <code>1 &lt; n</code> will be false and it won't enter the loop.  </p>

<p>And you don't need <code>n</code>.  You can just say <code>numbers.length</code> whenever you need that value.  </p>

<h3>Standard methods</h3>

<p>You could also replace these two loops with Java standard methods.  </p>

<pre><code>        int insertionPoint = Arrays.binarySearch(numbers, 0, i, numbers[i]);
        if (insertionPoint &lt; 0) {
            insertionPoint = -insertionPoint - 1;
        }

        int temp = numbers[i];
        System.arraycopy(numbers, insertionPoint, numbers, insertionPoint + 1, i - insertionPoint);
        numbers[insertionPoint] = temp;
</code></pre>

<p>Of course, it's possible that you were trying to avoid standard methods.  After all, <code>Arrays.sort</code> would solve this problem without additional coding.  </p>
    </div>