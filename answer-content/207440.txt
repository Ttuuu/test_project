<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please try to follow the code formatting conventions of the language that you're using. This makes your code much more readable for other programmers.
If you use a Java IDE like Eclipse, NetBeans or IntelliJ it can format the code for you. In Eclipse this is triggered by pressing Ctrl+Shift+F.</p>

<p>Your use of CamelCase for identifiers is correct but only methods should start with lower case, class names start with a capital letter.</p>

<p>Don't abbreviate english words unnecessarily. Writing <code>insrt</code> instead of <code>insert</code> gains you nothing and makes the code harder to read.</p>

<p>You're defining classes that have the same behavior, so it would be good to define a common interface so you can use them interchangeable.</p>

<pre><code>interface Sort {
    void sort(int[] a);
}

class InsertionSort implements Sort {
    // ...
}

class SelectionSort implements Sort {
    // ...
}
</code></pre>

<p>For your print statement you can use <code>StringJoiner</code>. It's specially built for your use case and allows you to specify a delimiter, prefix and suffix.</p>

<pre><code>public static void main(String[] args) {
    Sort ss = new SelectionSort();
    Sort is = new InsertionSort();
    int[] arr = { 2, 3, 4, 65, 6, 7, 3, 45, 56, 23, 34, 5, 4, 34, 6, 2, 57, 4, 45, 345 };
    is.sort(arr);
    StringJoiner sj = new StringJoiner(",", "{", "}");
    for (int el : arr) {
        sj.add(String.valueOf(el));
    }
    System.out.println(sj);
}
</code></pre>

<p>Since you sort the array in-place (you don't create a new array during sort) for both algorithms you don't have to return the array. The reference that you hold on it outside is enough.</p>

<p>Your Insertion Sort can be simplified by getting rid of the <code>keepGoing</code> boolean.
You move the conditional from the if statement into the head of the while loop.
You want the while loop to continue while <code>a[j] &gt; insrt</code>, no need for an extra variable. Then you move the actual insertion out of the else clause and put it <em>after</em> the while loop.
Your're going to be at the right insertion spot once the while loop has finished.</p>

<pre><code>class InsertionSort implements Sort {

    public void sort(int[] a) {
        int insert, j;
        for (int i = 1; i &lt; a.length; i++) {
            insert = a[i];
            j = i - 1;
            while ((j &gt;= 0) &amp;&amp; a[j] &gt; insert) {
                a[j + 1] = a[j];
                j--;
            }
            a[j + 1] = insert;
        }
    }
}
</code></pre>

<p>You SelectionSort looks fine to me.</p>
    </div>