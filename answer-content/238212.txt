<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code / protocol comments under the code sections.</p>

<pre><code>def read_file_blocks(file, extra_bytes=0):
    while True:
        data = file.read(BUFFER_SIZE + extra_bytes)
</code></pre>

<p>At least specify why the extra bytes are used and document what <code>extra-bytes</code> argument means.</p>

<pre><code>def hmac_file(file, key):
</code></pre>

<p>Why would you go over the entire file and then dispose of the read bytes only to perform HMAC? You just processed all the blocks in memory! Why blake2b instead of one of the more common SHA-2 hashes?</p>

<pre><code>#Use 4 bytes less than the nonce size to make room for the block counter
</code></pre>

<p>I'll bet that this isn't required; undoubtedly the counter is already included. Maybe you can point to a specific requirement to include a block counter every 4MiB?</p>

<pre><code>hmac_key = nacl.hash.sha256(key + nonce, encoder=nacl.encoding.RawEncoder)
</code></pre>

<p>At least use HMAC instead of a hash to derive keys, the is a poor man's KDF.</p>

<pre><code>output['key'] = base64.b64encode(key + nonce)
</code></pre>

<p>Sorry, output <em>what?</em> The key?</p>

<pre><code>output['signature'] = hmac_file(encrypted_name, hmac_key)
</code></pre>

<p>CryptoBox uses an <strong>authenticated cipher</strong>. No need at all to HMAC it again.</p>

<blockquote>
  <p>Algorithm details:<br>
  Encryption:   Salsa20 stream cipher<br>
  Authentication:   Poly1305 MAC  </p>
</blockquote>
    </div>