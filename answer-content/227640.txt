<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ul>
<li>I would return <code>IEnumerable&lt;IEnumerable&lt;int&gt;&gt;</code> rather than <code>IList&lt;IList&lt;int&gt;&gt;</code>. We don't want the caller to change the return value, only to iterate it.</li>
<li>The two inner loops are almost exactly the same, except that the order of <code>node.left</code> and <code>node.right</code> gets swapped. This part I would refactor to get DRY code.</li>
<li>You should use <code>var</code> a bit more often: <code>Stack&lt;TreeNode&gt; currentLeveL = new Stack&lt;TreeNode&gt;();</code> -&gt; <code>var currentLevel = new Stack&lt;TreeNode&gt;();</code> (also notice the small casing typo in currentLeve<strong>L</strong>)</li>
<li><code>if (root == null) return result;</code> -&gt; perhaps the challenge specifies this edge case, but I would prefer an <code>ArgumentNullException</code> when the input is null and clearly shouldn't be.</li>
</ul>

<hr>

<h2>Refactored</h2>

<ul>
<li>We can avoid using an outer loop with two nearly identical inner loops, if we exchange <code>currentLevel</code> for <code>nextLevel</code> after each inner loop and use a <code>bool zig</code> that toggles for every cycle of the inner loop to get the zig-zag effect. </li>
<li>Notice I made an instance method rather than extension method, but feel free to keep an extension method instead. I find traversal to be part of the instance operations. </li>
<li>I expect performance to remain the same. We're still using two stacks the same way.</li>
</ul>



<pre><code>public IEnumerable&lt;IEnumerable&lt;int&gt;&gt; ZigzagLevelOrder()
{
    var levels = new List&lt;IEnumerable&lt;int&gt;&gt;();
    var currentLevel = new Stack&lt;TreeNode&gt;();
    var nextLevel = new Stack&lt;TreeNode&gt;();
    var zig = false;

    currentLevel.Push(this);

    while (currentLevel.Any())
    {
        levels.Add(currentLevel.Select(n =&gt; n.Value).ToArray());
        zig = !zig;

        while (currentLevel.Any())
        {
            var node = currentLevel.Pop();
            if (zig &amp;&amp; node.left != null)
                nextLevel.Push(node.left);
            if (node.right != null)
                nextLevel.Push(node.right);
            if (!zig &amp;&amp; node.left != null)
                nextLevel.Push(node.left);
        }

        currentLevel = nextLevel;
        nextLevel = new Stack&lt;TreeNode&gt;();
    }

    return levels.ToArray();
}
</code></pre>

<p>And the unit tests pass:</p>

<pre><code>[TestMethod]
public void Fixture()
{
    var root = new TreeNode(3);
    root.left = new TreeNode(9);
    root.right = new TreeNode(20);
    root.right.left = new TreeNode(15);
    root.right.right = new TreeNode(7);

    var res = root.ZigzagLevelOrder();
    CollectionAssert.AreEqual(new List&lt;int&gt; { 3 }, res.First().ToList());
    CollectionAssert.AreEqual(new List&lt;int&gt; { 20, 9 }, res.Skip(1).First().ToList());
    CollectionAssert.AreEqual(new List&lt;int&gt; { 15, 7 }, res.Skip(2).First().ToList());

    root = new TreeNode(1);
    root.left = new TreeNode(2);
    root.right = new TreeNode(3);
    root.left.left = new TreeNode(4);
    root.right.right = new TreeNode(5);
    res = root.ZigzagLevelOrder();
    CollectionAssert.AreEqual(new List&lt;int&gt; { 1 }, res.First().ToList());
    CollectionAssert.AreEqual(new List&lt;int&gt; { 3, 2 }, res.Skip(1).First().ToList());
    CollectionAssert.AreEqual(new List&lt;int&gt; { 4, 5 }, res.Skip(2).First().ToList());
}
</code></pre>

<hr>

<h2>Performance Optimization</h2>

<ul>
<li><p><del>I'm not sure how or whether performance could still be optimized beyond the OP code (without falling into a micro-optimisation trap).</del></p></li>
<li><p>In hindsight, after reading through JAD's answer, a further optimisation is to use <code>foreach (var node in currentLevel)</code> rather than <code>while (currentLevel.Any())</code> to avoid <code>var node = currentLevel.Pop();</code>, which is no longer required (as opposed to OP code) since we exchange the instance of <code>currentLevel</code> with <code>nextLevel</code> anyway.</p></li>
</ul>
    </div>