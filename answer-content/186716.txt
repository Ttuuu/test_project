<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution seems to work and would not create unnecessary confusion for other developers (or yourself in six months). And even though Vuex seems overkill currently it may be beneficial later. </p>

<p>One thing which I am unsure about is how the modal is closed. I assume this is handled by the component displaying the image, by setting the value in the Vuex store to an empty string or NULL.</p>

<p>In case you want to avoid using Vuex you could use a simple event bus implementing a publish/subscribe pattern. This can be built using Vue itself. An example is:</p>

<pre><code>const EventBus = new Vue();
</code></pre>

<p>This can be attached to the <code>window</code> object or stored in a separate file and included the same way as components are. You can then a <code>mounted</code> hook/method of your Vue component which handles the modal do:</p>

<pre><code>Vue.component('modal-component-name', {
    ...    
    mounted() {
        EventBus.$on('event-name', () =&gt; { ... });
    }
});
</code></pre>

<p>This will listen for events with the name: 'event-name'. Then to trigger the event do the following in another component:</p>

<pre><code>Vue.component('component-which-trigger-modal', {
    ...    
    methods: {
        openModal() {
            EventBus.$emit('event-name');
        }
    }
});
</code></pre>

<p>This also supports providing arguments when the event is triggered. </p>

<p>Keep in mind the event callback is not removed when the components is destroyed. To ensure multiple listener callbacks doing the same thing isn't attached when a component is loaded again use the <a href="http://vuejs.org/api/#vm-off" rel="nofollow noreferrer">Vue.$off()</a> method when the component is destroyed. This can be done by implementing the <code>destroyed</code> method on the component instance, which is called just before the component is destroyed. This requires you keep a reference to the callback used, so you cannot pass an anonymous method like I have done in the example. </p>

<p>A simple tutorial for the event bus can be found here: <a href="https://alligator.io/vuejs/global-event-bus/" rel="nofollow noreferrer">Creating a Global Event Bus with Vue.js</a>.</p>
    </div>