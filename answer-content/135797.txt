<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few basic points:</p>
<p>The <code>bool</code> datatype is basically just an <code>int</code> and therefore <code>1 == True</code> and <code>0 == False</code>. This makes your two ternaries easier to read, because instead of</p>
<pre><code>purchased=1 if session in buyersession else 0
segmentchange=1 if (segment[maxtime.hour]!=segment[mintime.hour]) else 0 
</code></pre>
<p>You can just write</p>
<pre><code>purchased = session in buyersession
segmentchange = segment[maxtime.hour] != segment[mintime.hour]
</code></pre>
<hr>
<p><code>noofnavigations</code> is a bad name. You should at least call it <code>no_of_navigations</code>, to go along with PEP8. But why not just <code>navigations</code>?</p>
<p>While we're here, you might as well comply with <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> on the other things as well (mainly, put spaces around all infix operators and equal signs).</p>
<hr>
<p>If you demote all of your temporary variables (which you only use once anyways) to keys in a dictionary you can make the printing a lot easier:</p>
<pre><code>with open('/tmp/gensim/yoochooseclick_new.dat', 'w') as f1:
    for session in clickersession:
        temp = clicksdat[clicksdat.Sid == session]
        maxtime = dt.datetime.strptime(temp.Timestamp.max(), "%Y-%m-%dT%H:%M:%S.%fZ")
        mintime = dt.datetime.strptime(temp.Timestamp.min(), "%Y-%m-%dT%H:%M:%S.%fZ")
        d = {'purchased': session in buyersession,
             'day': maxtime.day,
             'month': maxtime.month,
             'navigations': len(temp.Timestamp)-1,
             'duration': int((maxtime-mintime).total_seconds()),
             'totalcats': len(temp.itemcategory.unique()),
             'totalitems': len(temp.itemid.unique()),
             'timesegment': segment[maxtime.hour],
             'segmentchange': segment[maxtime.hour] != segment[mintime.hour],
             }
        s = "{purchased}, {day}, {month}, {navigations}, {duration}, {totalcats}, {totalitems}, {timesegment}"
        f1.write(s.format(**d))
</code></pre>
<hr>
<p>Lastly, the building of the words for the different times of day could be written slightly more concise when using a list instead of a dictionary:</p>
<pre><code>segment = ['EM']*24
segment[7:10] = ['M']*3
segment[10:13] = ['A']*3
segment[13:18] = ['E']*5
segment[18:23] = ['N']*5
segment[23] = 'MN'
</code></pre>
<hr>
<p>In the end your code is probably slow, because of all the finding of mins, maxs and lens. This just takes time. Would be good to see a run with a profiler to see at which operation, though.</p>
<hr>
<p>With four more years of experience, here is how you could make this even faster:</p>
<pre><code>def process(group):
    min_time = group.loc[group["Timestamp"].idxmin()]
    max_time = group.loc[group["Timestamp"].idxmax()]
    diff = max_time["Timestamp"] - min_time["Timestamp"]
    return pd.Series({"purchased": group["Sid"].iloc[0] in buyer_session,
                      "day": max_time["Timestamp"].day,
                      "month": max_time["Timestamp"].month,
                      "navigations": group["Timestamp"].count() - 1,
                      "duration": int(diff.total_seconds()),
                      "totalcats": group["itemcategory"].nunique(),
                      "totalitems": group["itemid"].nunique(),
                      "timesegment": max_time["segment"],
                      "segmentchange": max_time["segment"] != min_time["segment"]})
    
if __name__ == "__main__":
    buys_data = pd.read_csv(...)
    buyer_session = set(buys_data["Sid"].unique())
    clicks_data = pd.read_csv(...)
    clicks_data["Timestamp"] = pd.to_datetime(clicks_data["Timestamp"], 
                                              format="%Y-%m-%dT%H:%M:%S.%fZ")
    clicks_data["segment"] = pd.cut(clicks_data["Timestamp"].dt.hour,
                                    [0, 7, 10, 13, 18, 23, 24],
                                    labels=["EM", "M", "A", "E", "N", "MN"])
    sessions = clicks_data.groupby("Sid", as_index=False).apply(process)
    sessions.to_csv('/tmp/gensim/yoochooseclick_new.dat', index=False)
</code></pre>
<p>I used the fact that you can directly get the number of unique items using <code>nunique</code> and that it is easier to group by the session ID than iterate over it using <code>groupby</code> (provided you are actually interested in all session IDs). I also converted to datetime objects right away and assigned the segements using <code>cut</code>. Before, there was a possible bug, because you determined the maximum and minimum date using string comparison. For the datetime format you have, this just happens to also sort correctly by date, but if that format ever changes, your code would break.</p>
    </div>