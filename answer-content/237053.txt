<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this can be slightly simplified by using <a href="https://dateutil.readthedocs.io/en/latest/relativedelta.html" rel="noreferrer"><code>dateutils.relativedelta</code></a> (since <code>datetime.timedelta</code> does not support months, unfortunately). This way you don't need to manually keep track of the year and month and if you ever need to implement something for e.g. next end of a month that is on a Sunday, it is way easier, because it takes care of the peculiarities for you, like months ending on different days of the month.</p>

<p>I would also make the magic constant <code>4</code> into a global constant called <code>FRIDAY</code>.</p>

<pre><code>from datetime import date
from dateutil.relativedelta import relativedelta

FRIDAY = 4    # Monday is 0

def next_fri_13(start_date):
    '''Get the next Friday 13th after the specified start_date.

    Args:
        start_date (datetime.date)

    Returns:
        datetime.date: The first Friday 13th after the start_date.
    '''
    thirteenth = date(start_date.year, start_date.month, 13)
    if start_date.day &gt;= 13:
        thirteenth += relativedelta(months=1)

    while thirteenth.weekday() != FRIDAY:
        thirteenth += relativedelta(months=1)
    return thirteenth
</code></pre>

<p>Alternatively, you could make a generator of thirteenths days and drop all that are not a Friday using <code>filter</code> and use the fact that <code>relativedelta</code> does not only take offsets, but can also replace attributes at the same time (using the keywords without a trailing "s"):</p>

<pre><code>from itertools import count

def next_fri_13(start_date):
    '''Get the next Friday 13th after the specified start_date.

    Args:
        start_date (datetime.date)

    Returns:
        datetime.date: The first Friday 13th after the start_date.
    '''
    thirteenths = (start_date + relativedelta(months=n, day=13)
                   for n in count(start_date.day &gt;= 13))
    return next(filter(lambda d: d.weekday() == FRIDAY, thirteenths))
</code></pre>

<p>IMO the first is easier to read, though, while this one is slightly easier to convert into a generator yielding all Friday the 13ths after <code>start_date</code> (just replace <code>return next(...)</code> with <code>yield from ...</code>).</p>

<p>In any case, there is a bit of a philosophical debate about doing</p>

<pre><code>import itertools

itertools.count()
</code></pre>

<p>or</p>

<pre><code>from itertools import count

count()
</code></pre>

<p>I personally tend to favor the latter, as long as it is still somewhat easy to figure out which module a function comes from, and there is no shadowing. This makes the lines a bit shorter and easier to read, especially if you use one particular module quite heavily (which the <code>itertools</code> module is a bit predestined for). It is also slightly faster, because you only need to do a global lookup instead of a global lookup and an attribute lookup, but that is negligible most of the time (and if it is not, you should make it a local variable anyway). But in the end the choice is yours.</p>
    </div>