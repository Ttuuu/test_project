<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The decompression table construction algorithm is unusual and not an improvement over the usual algorithm. To sum up the difference,</p>

<ul>
<li>This algorithm: for each "decode pattern", find the code with matching prefix.</li>
<li>The common algorithm: for each code, append all possible padding bit-patterns.</li>
</ul>

<p>The common algorithm has no "search" element to it, every iteration of the inner loop fills an entry of the decoding table. Using the bit-order that you use, the entries generated from a given code inhabit a contiguous range in the decoding table, starting at the code padded on the right with zeroes and ending at the code padded on the right with ones. It does not rely on any particular order of the <code>symbols</code> array though.</p>

<p>As a bonus, the code for this is bit simpler than what you have now. For example (not tested):</p>

<pre><code>for (j = 0 ; j &lt; SYM_NUM ; j++) {
    curLen = symbols[j].codeLen;
    unsigned int curCode = symbols[j].codeVal;
    int curSym = symbols[j].symbol;

    // The code for the current symbol corresponds to all decoding
    // patterns that have it as a prefix.
    // Extend the code up to the length of a decoding pattern in all
    // possible ways, starting from all zeroes and stopping after all ones.
    int padding = MAX_CODELEN - curLen;
    unsigned int start = curCode &lt;&lt; padding;
    unsigned int end = (curCode + 1) &lt;&lt; padding;
    for (k = start ; k &lt; end ; k++) {
        decompTablePtr-&gt;codeLens[k] = curLen;
        decompTablePtr-&gt;symbols[k] = curSym;
    }
}
</code></pre>
    </div>