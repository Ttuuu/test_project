<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Major Issues</h3>

<ul>
<li>The class access modifier <strong>does not allow public access</strong>, so your class is not usable by third party consumers. Make it <code>public</code>.</li>
<li>Your class should be <strong>generic to be usable</strong>.</li>
<li>You should <strong>always provide unit tests</strong> when providing a class to consumers of your API.</li>
<li><code>Pop</code> is <strong>ill-defined</strong>. It does not return anything. It can throw a <code>NullReferenceException</code> when the stack is empty. It does not decrement the count. It should throw <code>InvalidOperationException</code> when empty.</li>
<li>A class representing a collection should <strong>always implement the correct interfaces</strong>. Implement <code>IEnumerable&lt;T&gt;</code> to let consumers iterate the items. Implement <code>IReadOnlyCollection&lt;T&gt;</code> to provide a property <code>Count</code>. Don't be fooled by its name, collections implementing this interface are not stipulated to be immutable. They provide a <code>Count</code> to indicate eager iteration is provided (<a href="https://stackoverflow.com/questions/32132286/ienumerable-to-ireadonlycollection">Interesting Discussion about IReadOnlyCollection</a>).</li>
</ul>

<h3>Review</h3>

<ul>
<li>The name of a class should tell you what it is, not how it's implemented. Call it <code>LinkedStack</code> (conform naming convention <code>LinkedList</code>).</li>
<li><code>Node</code> could be made public, but then its state should be private or internal at best. Given the few operations you provide, it could be made private. Consider making it public if you would provide mehods as <code>Remove(Node&lt;T&gt; node)</code>. This would remove a specific node, even if multiple nodes hold the same value as the specified node.</li>
<li><code>Push</code> has a redundant creation of a node. Create the node before the first <code>if</code> statement.</li>
<li><code>Print</code> has no purpose in this class. It should be an extension method declared elsewhere.</li>
<li><code>Node</code> should be a nested class for better encapsulation.</li>
<li>A property <code>IsEmpty</code>, as suggested in another answer, is syntactic sugar that improves readability.</li>
</ul>

<hr>

<h3>Refactored</h3>

<p>In this solution the <code>Node</code> remains private. Some API's allow it to be public.</p>

<pre><code>public class LinkedStack&lt;T&gt; : IReadOnlyCollection&lt;T&gt;, IEnumerable&lt;T&gt;
{
    private class Node
    {
        internal Node next;
        internal T Value { get; }

        public Node(T value) =&gt; Value = value;
    }

    private Node head;

    public void Push(T item)
    {
        var node = new Node(item);
        if (IsEmpty)
        {
            head = node;
        }
        else
        {
            node.next = head;
            head = node;
        }
        Count++;
    }

    public T Pop()
    {
        if (IsEmpty)
        {
            throw new InvalidOperationException();
        }
        var value = head.Value;
        head = head.next;
        Count--;
        return value;
    }

    public int Count { get; private set; }
    public bool IsEmpty =&gt; Count == 0;

    public IEnumerator&lt;T&gt; GetEnumerator()
    {
        var node = head;
        while (node != null)
        {
            yield return node.Value;
            node = node.next;
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}
</code></pre>

<h3>Unit Tests</h3>

<pre><code>[TestClass]
public class LinkedStackTests
{
    [TestMethod]
    public void LinkedStackTest()
    {
        var stack = new LinkedStack&lt;int&gt;();

        stack.Push(0);
        stack.Push(0);
        stack.Push(1);

        Assert.AreEqual(3, stack.Count);

        Assert.AreEqual(1, stack.Pop());
        Assert.AreEqual(0, stack.Pop());
        Assert.AreEqual(0, stack.Pop());

        Assert.AreEqual(0, stack.Count);
    }
}
</code></pre>
    </div>