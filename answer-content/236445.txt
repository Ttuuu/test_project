<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>I was in a similar position several years ago - needing to parse multi-gigabyte XML files. Tried all the standard solutions Woodstox, Xerces, Piccolo whatnot - can't remember all the names. Ended up using an XML parser from a library called <a href="http://javolution.org/" rel="nofollow noreferrer">Javolution</a>. It's development has stalled a while back, but the parser works well.</li>
<li><p>Available from Maven Central: <a href="https://search.maven.org/artifact/org.javolution/javolution-core-java/6.0.0/bundle" rel="nofollow noreferrer">https://search.maven.org/artifact/org.javolution/javolution-core-java/6.0.0/bundle</a></p></li>
<li><p>I got it to parse at about 1 GB/s with an SSD.  </p>

<ul>
<li>A very old example of my usage (link to the line where the XML parser is instantiated): <a href="https://github.com/chhh/MSFTBX/blob/e53ae6be982e2de3123292be7d5297715bec70bb/MSFileToolbox/src/main/java/umich/ms/fileio/filetypes/mzml/MZMLMultiSpectraParser.java#L105" rel="nofollow noreferrer">https://github.com/chhh/MSFTBX/blob/e53ae6be982e2de3123292be7d5297715bec70bb/MSFileToolbox/src/main/java/umich/ms/fileio/filetypes/mzml/MZMLMultiSpectraParser.java#L105</a></li>
<li>Description of their XML package: <a href="https://github.com/javolution/javolution/blob/master/src/main/java/org/javolution/xml/package-info.java" rel="nofollow noreferrer">https://github.com/javolution/javolution/blob/master/src/main/java/org/javolution/xml/package-info.java</a></li>
</ul></li>
<li><p>If you're using an HDD without RAID, then you're most likely limited to 100-200 MB/s just by IO, so likely you can't be faster than 1 GB in 5 seconds with that scenario.</p></li>
<li><p>Core thing for XML parsing speed (apart from just good io code) is to not allocate unnecessary garbage, the parser should not be allocating Strings all the time to just do a comparison or give you an array of tag's attributes. Javolution does exactly that using an internal sliding buffer and refernecing it. Like a <code>java.lang.CharSequence</code>, called <code>CharArray</code> in javolution. It's important to use <code>CharArray#contentEquals()</code> when comparing to Strings to avoid extra String creation.</p></li>
</ul>
    </div>