<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li><code>hasTerminated</code> should be a public property with private setter and be renamed <code>Terminated</code>.</li>
<li><code>TuringMachine</code> could be a sealed class so you don't need to worry about which private data should actually be protected and which methods virtual.</li>
<li><code>List&lt;ControlCard&gt; cards</code> should be <code>IEnumerable&lt;ControlCard&gt;</code> since you do not add/remove elements from it.</li>
<li>Check all input arguments on public entrypoints of your classes against <code>null</code>.</li>
<li><code>NextInstruction</code> is a bit of a black-box. Have it return a <code>bool</code> returning <code>true</code> as long a next card is available and not terminated.</li>
<li>The <code>this</code> keyword is redundant because there are no naming conflicts between local and instance variables.</li>
<li>The early exit conditions in <code>NextInstruction</code> can be combined in a single statement. However, I feel the second condition should throw an <code>ArgumentOutOfBoundsException</code> instead and the instance should guard against letting <code>currentIndex</code> getting out of bounds.</li>
<li><code>ExecuteInstruction</code> should execute the instruction and nothing more. <code>this.currentCard = inst.NextCardToUse;</code> should be called by its container method <code>NextInstruction</code>.</li>
<li>Some people have argued that <code>Instruction</code> should hold the state to set in order to mitigate <code>if</code> statements in the machine. If you do this, then also use a <code>Func&lt;int, int&gt;</code> to handle <code>LRInstructions</code> without using an <code>if</code> statement. For instance, <code>LRInstructions.MOVELEFT</code> would yield <code>(i) =&gt; i--;</code>. But I would keep the <code>if</code> statements since handling the instructions is part of the machine, not the <code>Instruction</code>. An instruction is just a triggered event, nothing more.</li>
<li><code>ToString</code> should use a <code>StringBuilder</code> instead of a string <code>tapeString</code>.</li>
<li>Consumers should be able to substitute <code>while(!tm.Terminated)</code> with <code>while(tm.NextInstruction())</code> after code has been refactored.</li>
</ul>
    </div>