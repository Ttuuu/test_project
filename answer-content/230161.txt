<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>First things:</h2>

<p>You can trim off a little just by making the loop tighter. Python does pretty cool "for" loops:</p>

<p><code>for char in chars</code> will loop through every character in the list 'chars'. That means you don't need to deal with the variable 'i'. In fact, you don't even need to cast the input to a list called 'chars'. Python can iterate through a string as if it were a list. So your loop can be:</p>

<p><code>for char in text</code> </p>

<p>By my count, that saves you four lines of code right there.</p>

<p>-</p>

<h2>Next: Use fewer cases:</h2>

<p>As written, you've effectively got three relevant paths through the loop, for three possible cases:</p>

<ol>
<li>The character is punctuation.</li>
<li>The character isn't punctuation, and it's the first character after punctuation</li>
<li>The character isn't punctuation, and it's not the first character after punctuation</li>
</ol>

<p>The distinction between (2) and (3) doesn't depend on the character you're dealing with. It depends on the previous character, which is why you've had to use the "start_new_word" variable to carry information over from one iteration of the loop into the next. I think loops are easier to deal with if you don't have to carry information over like that. So I'd want to find a way to eliminate it.</p>

<p>You're effectively using "start_new_word" as a signal that tells you to do <code>output.append([])</code>, at the start of the next loop. But why wait until the next loop? If you replace the <code>start_new_word = true</code> instructions with <code>output.append([])</code> instructions, then you'll always have a clean 'word' sitting at the end of the output list, ready to accept characters. That way, whenever you have a non-punctuation character you just append it to <code>output[-1]</code>, and you don't have to worry about whether it's the first character.</p>
    </div>