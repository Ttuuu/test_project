<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design Issues</h2>
<p>There are a couple of issues concerning your design.</p>
<h3>Lack of specification</h3>
<p>It is unclear which features should be supported by your API. This makes reviewing a bit fuzzy.</p>
<h3>Dependencies</h3>
<p>The parser depends on arguments already pre-parsed correctly by a shell. This limits the control you have over command line parsing.</p>
<blockquote>
<p><code>var args = new[] {"--log", "info", "1337", "3.1415"};</code></p>
</blockquote>
<p>Consider breaking free from the shell and take on pre-parsing yourself.</p>
<pre><code>var args = "--log info 1337 3.1415";  // &lt;- unparsed command line string
</code></pre>
<h3>Pollution</h3>
<p>The API mixes language structs with user-defined options.</p>
<blockquote>
<p><code>new CommandLineOption(new[] {"-l", "--log"}</code></p>
</blockquote>
<p>You do not want <code>-</code> and <code>--</code> to be part of the <code>Tags</code>. These are delimiters in the lexing phase of your parser. By seperating lexing from parsing, you could extend the API more fluently by allowing other command line languages. For instance <code>/log</code>.</p>
<hr>
<h2>Review</h2>
<h3>Exception Classes</h3>
<p>Define a base class for all your exceptions <code>CommandLineException</code>. This way, you allow calling code to determine the granularity of exception handling. Since you make several custom exceptions, take advantage of storing some data on them. <code>DuplicateRequiredCommandLineOptionException</code> could store the duplicate option, and so on. Also provide constructors that take an inner exception.</p>
<pre><code>public class DuplicateRequiredCommandLineOptionException : CommandLineException
{
    public CommandLineOption Option { get; }
    // include more constructors ..
    public DuplicateRequiredCommandLineOptionException(
        string messageCommandLineOption  option) : base(message) { Option = option; }
}
</code></pre>
<h3>CommandLineOption &amp; CommandLineValue</h3>
<p>You have addressed you don't want to see too many changes for legacy reasons. I do propose to override the default <code>Equals</code> and <code>GetHashCode</code> on both classes and substitute <code>IEqualityComparer</code> with <code>IEquatable</code>. This way, you could improve your code.</p>
<pre><code> public bool Equals(CommandLineValue other)
 {
     return Option.Equals(other.Option) &amp;&amp; Values.SequenceEqual(other.Values);
 }
</code></pre>
<h3>CommandLineParser</h3>
<p>You have indicated yourself you have problems parsing a flattened list to a hierarchical structure. There are common techniques for handling such situations. Have a look at <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow noreferrer">Abstract Syntax Tree</a>. You should create a syntax tree from the provided <code>string[] args</code>. This can be done with a <em>Stack</em> and <em>Iterator</em>. There are tons of examples online how to create an AST.</p>
<blockquote>
<pre><code>// Check if the additional values are in the right format
// ToDo: Find more elegant solution
var values = args.ToList().GetRange(i + 1, i + additionalValues).ToList();
var types = option.ParameterTypes.ToList();
</code></pre>
</blockquote>
<p>The second issue is - what I called <em>pollution</em> before - the lack of seperation of concerns. Your API is basically a simple <a href="https://en.wikipedia.org/wiki/Compiler" rel="nofollow noreferrer">compiler</a>. The link shows you it's good practice to provide the following phases when building a compiler:</p>
<ul>
<li>pre-processing</li>
<li>lexing</li>
<li>parsing</li>
<li>optimizing</li>
<li>pretty printing</li>
</ul>
<p>Your API should definitely include lexing and parsing as seperate phases.</p>
<ul>
<li>lexing: create command line tokens and strip all the keywords and language-specific delimiters</li>
<li>parsing: create an AST from the lexed tokens, then create <code>CommandLineValue</code> instances from the AST.</li>
</ul>
<hr>
<h3>Conclusion</h3>
<p>In the end, the quality of the API depends on a good specification covered by many unit tests. I feel you haven't established this yet.</p>
    </div>