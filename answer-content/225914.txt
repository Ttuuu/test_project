<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I see multiple instances of <code>id="form_input"</code>. These attributes need to change to <code>class</code> or each <code>id</code> attribute value should be altered to be unique.</p></li>
<li><p>Instead of using <code>&lt;br&gt;</code> tags to style your input fields on separate lines, use css.  By setting all of the elements in the form as <code>display:block;</code>, you can eliminate the excess markup -- a cleaner alternative.  CSS should be the first technique to create spacing and layout stylings; when you find yourself creating spaces with the spacebar or with <code>&lt;br&gt;</code>, try to achieve the same effect with <code>display</code>, <code>margin</code>, <code>padding</code>, etc.</p></li>
<li><p><a href="https://medium.com/simple-human/10-reasons-why-placeholders-are-problematic-f8079412b960" rel="nofollow noreferrer">11 reasons why placeholders are problematic</a> -- I can appreciate that you intend to design a clean, minimalist layout, but I don't think I support non-labeled fields and your project should maintain a consistent theme considering that your project may eventually need to employ more forms.</p></li>
<li><p>In addition to the previous bullet point about UX, I will urge you to add some client-side validation to your form.  These character limitations will be up to you.  I assume <code>empties.js</code> is doing something that enables the submit button, but I can't see it.  If <code>empties.js</code> is as functionally narrow a file as it's name suggests, you may want to build more robust processes in there.</p></li>
<li><p>Rather than sanitizing server-side and unconditionally inserting into the database, you should be catching overtly "bad" submissions and denying access.</p></li>
<li><p>If a submitted password contains html markup, that is no concern of yours (no need to sanitize) because you will never, ever be printing that value -- ever.  More clearly: <strong>never alter someone's submitted password characters</strong>.</p></li>
<li><p>You must never, ever present the raw error message to the end user.  See <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">@YCS's hyperlink</a>.  Especially with registration forms, you need to find the correct balance between informing the registrant why the submission was denied, yet not compromising the security of your project.</p></li>
<li><p>Finally, login/registration systems are widely available now.  If you are doing this as an educational exercise, then carry on.  If you don't want to reinvent the wheel, just use a pre-existing script from a security-minded author.</p></li>
</ul>
    </div>