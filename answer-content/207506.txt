<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a number of things that could be improved in this code.  I hope you find these suggestions helpful.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Eliminate global variables where practical</h2>

<p>Having routines dependent on global variables makes it that much more difficult to understand the logic and introduces many opportunities for error.  Eliminating global variables where practical is always a good idea, so I would strongly suggest passing <code>g_list</code> as a parameter to functions that need it rather than having it as a global variable.</p>

<h2>Always <code>return</code> an appropriate value</h2>

<p>Your <code>print_list()</code> and <code>update_list_v2()</code> routines have control paths that cause them to end without <code>return</code>ing any <code>int</code> value.  This is an error and should be fixed.</p>

<h2>Don't write <code>this-&gt;</code> in member function</h2>

<p>The use of <code>this-&gt;</code> in member functions just clutters the code and adds nothing of value.  Instead, simply omit it for clarity.  Thus this:</p>

<pre><code>void update_bmi(element &amp;a) {
    this-&gt;bmi = a.bmi;
    this-&gt;max_bmi = max(this-&gt;max_bmi, a.bmi);
}
</code></pre>

<p>could be written as this:</p>

<pre><code>void update_bmi(element &amp;a) {
    bmi = a.bmi;
    max_bmi = max(max_bmi, a.bmi);
}
</code></pre>

<p>However, I wouldn't actually write it that way for several reasons which are enumerated in the next few points.</p>

<h2>Use <code>const</code> where practical</h2>

<p>A number of places in the code should have the <code>const</code> keyword added.  For example instead of this:</p>

<pre><code>void update_bmi(element &amp;a) {
</code></pre>

<p>I would write it this way:</p>

<pre><code>void update_bmi(const element &amp;a) {
</code></pre>

<h2>Pass by const reference where practical</h2>

<p>The arguments to <code>is_lower_id</code> and <code>is_same</code> are declared as <code>element</code> but that causes the entire object to be duplicated.  Better would be to make it <code>const element &amp;</code> because it is not modified and it doesn't need to be duplicated.  </p>

<h2>Prefer stream I/O to <code>printf</code></h2>

<p>The <code>printf</code> function was a capable workhorse for many years, but the C++ <code>iostream</code> library is better in a number of regards.  Although it's often more typing for the programmer initially, it's better because it has better type checking, less possibility for runtime overhead, and it fits well with the rest of C++.  So I would probably change your <code>element::print</code> to this:</p>

<pre><code>friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out, const element &amp;el) {
    return out &lt;&lt; "id/name bmi(max) : " &lt;&lt; el.id &lt;&lt; '/' &lt;&lt; el.name
               &lt;&lt; ' ' &lt;&lt; el.bmi &lt;&lt; '(' &lt;&lt; el.max_bmi &lt;&lt; ")\n";
}
</code></pre>

<p>Now instead of writing this:</p>

<pre><code>v[i].print();
</code></pre>

<p>We can write this:</p>

<pre><code>std::cout &lt;&lt; v[i];
</code></pre>

<h2>Use aggregate initialization where appropriate</h2>

<p>Within <code>main</code> the <code>a</code> vector is currently initialized like this:</p>

<pre><code>int a_id[] = {12, 11, 13, 5, 6, 7};
const char * a_name[] = {"a", "b", "c", "d", "e", "f"};
int a_bmi[] = {12, 11, 13, 5, 6, 7};
vector&lt;element&gt; a;
for(int i=0; i&lt;6; i++){
    element x;
    x.id = a_id[i];
    x.name = string(a_name[i]);
    x.bmi = a_bmi[i];
    a.push_back(x);
}
</code></pre>

<p>A similar thing is done with <code>b</code>.  A much simpler way to do that is supported in C++:</p>

<pre><code>std::vector&lt;element&gt; a {
    { 12, "a", 12 },
    { 11, "b", 11 },
    { 13, "c", 13 },
    { 5, "d", 5 },
    { 6, "e", 6 },
    { 7, "f", 7 },
};
</code></pre>

<p>This is called <a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" rel="nofollow noreferrer">aggregate initialization</a> and makes this much neater and easier to understand and maintain.  Note that to do this, I reordered the data members is <code>element</code> so that <code>id</code>, <code>name</code> and <code>bmi</code> are the first three members.</p>

<h2>Use standard operators</h2>

<p>The code currently contains this function:</p>

<pre><code>static bool is_lower_id(element a, element b) {
    return a.id &lt; b.id;
}
</code></pre>

<p>I would instead use the standard operator for this:</p>

<pre><code>bool operator&lt;(const element &amp;b) const {
    return id &lt; b.id;
}
</code></pre>

<p>Now instead of writing this:</p>

<pre><code>if (element::is_lower_id(g_list[m], e))
</code></pre>

<p>you can write it like this:</p>

<pre><code>if (g_list[m] &lt; e)
</code></pre>

<p>Also this:</p>

<pre><code>sort(v.begin(), v.end(), element::is_lower_id);
</code></pre>

<p>becomes this:</p>

<pre><code>std::sort(v.begin(), v.end());
</code></pre>

<p>because <code>std::sort</code> uses <code>operator&lt;</code> by default.  Similarly, to replace <code>is_same</code> we can use this:</p>

<pre><code>bool operator==(const element &amp;b) const {
    return id == b.id &amp;&amp; name == b.name;
}
</code></pre>

<h2>Fix the bug</h2>

<p>The current code uses the value of <code>max_bmi</code> before it is assigned any value, which is a bug.  This should be fixed.</p>

<h2>Prefer standard algorithms</h2>

<p>I would drop the <code>print()</code> function and, now that there is an <code>operator&lt;&lt;</code> function (as suggested above), you can simply write this:</p>

<pre><code>std::copy(g_list.begin(), g_list.end(), 
        std::ostream_iterator&lt;element&gt;{std::cout});
</code></pre>

<h2>Eliminate processing variables from structures</h2>

<p>The <code>remove</code> flag in <code>element</code> is just a by-product of the processing and isn't really a part of the node itself.  I'd recommend removing it and using better algorithms instead, as shown later in this answer.</p>

<h2>Keep private things private</h2>

<p>It's usually good to keep data members private if they are expected to have an <em>invariant</em>, that is, a condition that must always be true.  In the case of this program, the <code>max_bmi</code> is expected to be set properly.  For that reason, I'd make all of the data members private and provide access mechanisms as needed.</p>

<h2>Simplify your algorithm</h2>

<p>The way the rules are constructed, the result after <code>update_list_v2()</code> is that the resulting <code>g_list</code> will have exactly the elements that <code>v</code> had, with any updates to <code>max_bmi</code> applied.  Further, we can reduce the complexity of the algorithm by noting that if the two input lists are sorted, we can make a single pass through both rather than searching exhaustively for every element.  </p>

<h2>Results</h2>

<p>Here's a version of the code that applies all of these ideas.  Note that because the class is really a class now with private data members, we need to use <code>initializer_list</code>s to provide the initialization that had been done with aggregate initialization.</p>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;initializer_list&gt;

class element {
    long long id;
    std::string name;
    int bmi; // body mass index
    int max_bmi = 0;
public:
    element(long long id, std::string name, int bmi) :
        id{id}, name{name}, bmi{bmi} 
    {}
    void update_max_bmi() { max_bmi = bmi; }
    void update_max_bmi(const element &amp;b) { max_bmi = std::max(bmi, b.bmi); }
    bool is_smaller_bmi_than(const element &amp;b) const {
        return bmi &lt; b.bmi;
    }
    bool operator&lt;(const element &amp;b) const {
      return id &lt; b.id;
    }
    bool operator==(const element &amp;b) const {
        return id == b.id &amp;&amp; name == b.name;
    }
    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out, const element &amp;el) {
      return out &lt;&lt; "id/name bmi(max) : " &lt;&lt; el.id &lt;&lt; '/' &lt;&lt; el.name
            &lt;&lt; ' ' &lt;&lt; el.bmi &lt;&lt; '(' &lt;&lt; el.max_bmi &lt;&lt; ")\n";
    }
};


void update_list_v2(std::vector&lt;element&gt; v, std::vector&lt;element&gt; &amp;g_list) {
    std::sort(v.begin(), v.end());
    if (g_list.empty()) {
        std::for_each(v.begin(), v.end(), [](element &amp;e){ e.update_max_bmi(); });
    } else {
        auto curr{g_list.begin()};
        for (auto &amp;elem : v) {
            while (curr != g_list.end() &amp;&amp; *curr &lt; elem) {
                ++curr;
            }
            if (curr != g_list.end()) { 
                if (*curr == elem) {
                    curr-&gt;update_max_bmi();
                    elem.update_max_bmi();
                    if (curr-&gt;is_smaller_bmi_than(elem)) {
                        std::cout &lt;&lt; "max_bmi will be increased!\n"
                            "old data:" &lt;&lt; *curr &lt;&lt; "new data:"
                            &lt;&lt; elem;
                    }
                    elem.update_max_bmi(*curr);
                }
            } 
        }
    }
    std::swap(v, g_list);
}


int main(int argc, const char *argv[])
{
    std::vector&lt;element&gt; a {
        { 12, "a", 12 },
        { 11, "b", 11 },
        { 13, "c", 13 },
        { 5, "d", 5 },
        { 6, "e", 6 },
        { 7, "f", 7 },
    };
    std::vector&lt;element&gt; g_list;
    update_list_v2(a, g_list);
    std::copy(g_list.begin(), g_list.end(), std::ostream_iterator&lt;element&gt;{std::cout});
    std::vector&lt;element&gt; b {
        { 12, "a", 20 },
        { 1, "x", 5 },
        { 13, "c", 5 },
        { 5, "d", 10 },
        { 6, "e", 6 },
        { 99, "y", 5 },
    };
    update_list_v2(b, g_list);
    std::copy(g_list.begin(), g_list.end(), std::ostream_iterator&lt;element&gt;{std::cout});
}
</code></pre>
    </div>