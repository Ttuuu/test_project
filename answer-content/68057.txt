<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>SQL Injection</strong></p>

<p>You don't have to use PDO, but you have to use something to defend against SQL injection, and <code>mysql_real_escape_string</code> isn't it (for one because MySQL is deprecated, and also because it's way too easy to forget to put <code>'</code> around the variable in the query, and once it's forgotten it's hard to see that it's missing). Using prepared statement isn't hard (see <a href="http://php.net/manual/en/mysqli.quickstart.prepared-statements.php" rel="nofollow">here for mysqli</a> and <a href="http://php.net/manual/en/pdo.prepared-statements.php" rel="nofollow">here for PDO</a>).</p>

<p><strong>Early Return</strong></p>

<p>If you return early, you can often reduce the nesting of if statements:</p>

<pre><code>if($search == ''){
    $result['statu'] = 'can\'t find search plz input text';
    return $result;
}
$sql = "select * from tb where ac_email like '%$search%'";
$query = mysql_query($sql) or die(mysql_error());

if(mysql_num_rows($query) &lt; 0){
    $result['statu'] = 'can\'t find search';
    return $result;
}
[...]
</code></pre>

<p><strong>Error Messages</strong></p>

<p>I wouldn't just echo <code>mysql_error</code>, as it's probably not that informative for the user, and it might reveal information. Just write a custom error message. </p>

<p>Your current error messages should also be better:</p>

<ul>
<li><code>can\'t find search plz input text</code>: could be <code>You did not enter any Search terms.</code></li>
<li><code>can\'t find search</code>: could be <code>No results found for your Search term</code>.</li>
</ul>

<p><strong>Naming</strong></p>

<ul>
<li>classes should start with an uppercase letter.</li>
<li><code>temp_index.php</code>: <code>search_form.php</code> would be better.</li>
<li><code>get_search.php</code>: could be <code>search_result.php</code>.</li>
<li><code>statu</code> isn't that much shorter than <code>status</code>, just write it completely.</li>
</ul>

<p><strong>Misc</strong></p>

<ul>
<li>make your <code>model</code> field private.</li>
<li>be explicit in your request type. If you send <code>post</code> data, don't just get <code>request</code>, but <code>post</code>.</li>
<li>don't just die in a model, throw an exception and let the controller handle it (ideally by passing a custom error message to the view).</li>
<li><code>select *</code> is discouraged, just select what you actually need.</li>
<li>use more spaces (after <code>print</code>, and after <code>)</code>).</li>
<li><code>ac_email</code> seems user supplied, so I would filter it with <code>htmlspecialchars</code> before echoing (because of XSS; I hope that you cleaned the email address before inserting it in the database, but you can never be too save).</li>
</ul>

<p><strong>MVC</strong></p>

<p>There is more than one definition of MVC out there, and especially in web applications the definitions are not all that clear (you can see this if you just do a quick google search, there are a lot of different diagrams out there). For example, the original approach of the model notifying the view of changes in the underlying data (<a href="http://lkubaski.files.wordpress.com/2012/12/mvc1.gif?w=550" rel="nofollow">see graphic here</a>) was abandoned by (most or all) web application frameworks (<a href="https://developer.chrome.com/static/images/mvc.png" rel="nofollow">see graphic here</a>).</p>

<p>I would say that your solution is pretty much complying with the (or better an) MVC approach. You have a light-weight controller which processes user input, you have a view which reacts to the controller, and you have a model.</p>

<p>What you should not do is access <code>$_POST</code> in the model. Just pass it to the model from the controller. And as mentioned above, your model also shouldn't just die.</p>

<p>You could also create a class for the actual data instead of using arrays. </p>
    </div>