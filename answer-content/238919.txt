<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Tuple returns</h2>

<pre><code>    """
    Return
    -------
    tuple
        Contains statistics of the simulated system.
    """
    ...
    return (
        gyak_sums[0], gyak_sums[1], (population[0, :] &gt; 1).sum(),
        gyak_means[0], gyak_variances[0],
        gyak_percentiles_25[0], gyak_medians[0], gyak_percentiles_75[0],
        gyak_means[1], gyak_variances[1],
        gyak_percentiles_25[1], gyak_medians[1], gyak_percentiles_75[1],
        fitness_list.mean(), fitness_list.var(),
        np.percentile(fitness_list, 25),
        np.median(fitness_list),
        np.percentile(fitness_list, 75)
        )
</code></pre>

<p>First of all - if you're going to bother documenting the function, it would be important to describe every one of these values. However, the easier and significantly more maintainable thing to do is return an object of some kind; pick your flavour - a plain-old class, a data class, a named tuple, what-have-you. These would all allow for you to return one thing whose members are self-documenting, instead of requiring magical knowledge of position to access them.</p>

<h2>Logical, not bit-wise, operators</h2>

<pre><code>while (population.size &gt; 0) &amp; (gen &lt; gen_max):
</code></pre>

<p>The only time I've seen syntax like this in Python is for SQLAlchemy, which does some dirty tricks to produce SQL from vaguely boolean-smelling expressions. However, it's much more likely that you actually mean:</p>

<pre><code>while population.size &gt; 0 and gen &lt; gen_max:
</code></pre>

<p>since <code>and</code> is logical and <code>&amp;</code> is bit-wise. It's also worth noting that you should Loop Like a Native, and instead of incrementing <code>gen</code> manually, do</p>

<pre><code>for gen in range(gen_max):
    if population_size &lt;= 0:
        break
</code></pre>

<h2>Type hints</h2>

<p>This is somewhat of an educated guess, but</p>

<pre><code>def write_out_file(result, local_time, n_run):
</code></pre>

<p>can be</p>

<pre><code>def write_out_file(result: List[Iterable[int]], local_time: datetime, n_run: int):
</code></pre>

<p>It looks (though it is missing from the documentation) that <code>local_time</code> is actually passed in as a string, but it shouldn't be. Stringification should in this case be left to the function itself.</p>

<h2>Global code</h2>

<p>This stuff:</p>

<pre><code>LOCAL_TIME = time.strftime("%m_%d_%H_%M_%S_%Y", time.localtime(time.time()))
DEAD_OR_ALIVE = open("output_data_" + LOCAL_TIME + ".txt", "w")
RESULT = [simulation(1000, 200, 1.5, 0.0, 10000)]
#RESULT.append(simulation(1000, 200, 1.5, 1.0, 10000))
N_RUN = 1
write_out_file(RESULT, LOCAL_TIME, N_RUN)
DEAD_OR_ALIVE.close()
</code></pre>

<p>has a few problems:</p>

<ul>
<li>That code blob should be in a <code>main</code> function</li>
<li>Once that happens, you can de-capitalize those variable names.</li>
<li><code>DEAD_OR_ALIVE</code> should be put into a <code>with</code> block</li>
</ul>

<h2>Use enumerate</h2>

<p>This:</p>

<pre><code>    counter = 0
    for i in result:
        out_file.writerows(i)
        counter += 1
        print(counter, "/", n_run, "\n")
</code></pre>

<p>should be</p>

<pre><code>for counter, i in enumerate(result):
   out_file.writerows(i)
   print(f'{counter}/{n_run}')
</code></pre>
    </div>