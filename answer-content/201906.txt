<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review of your existing code</h3>

<p>(with some small performance improvements):</p>

<blockquote>
<pre><code>nums = {}
for x in range(1,n+1):
    nums[x] = 1
</code></pre>
</blockquote>

<p>creates a dictionary with keys from <code>1</code> to <code>n+1</code>, all having the value
 <code>1</code>. A more Pythonic way to achieve the same is with dictionary 
comprehension:</p>

<pre><code>nums = { x: 1 for x in range(1, n+1) }
</code></pre>

<p>This dictionary is then used to create a list of all square numbers
not exceeding <code>n</code>:</p>

<blockquote>
<pre><code>sqs = [0]
for i in nums:
    if (i * i) in nums:
        sqs.append(i * i)
</code></pre>
</blockquote>

<p>But the same can be done without the help of a dictionary:</p>

<pre><code>sqs = [i * i for i in range(1, n + 1) if i * i &lt;= n ]
</code></pre>

<p>or even more efficiently:</p>

<pre><code>sqs = [i * i for i in range(1, math.floor(math.sqrt(n)) + 1)]
</code></pre>

<p>Note also that the parentheses in above if-condtion are not needed.</p>

<p>Instead of iterating of the indices of the <code>sqs</code> list</p>

<blockquote>
<pre><code>for i in range(1,len(sqs)):
    # do something with `sqs[i]` ...
</code></pre>
</blockquote>

<p>it is better to iterate over the list directly:</p>

<pre><code>for s in sqs:
    # do something with `s` ...
</code></pre>

<p><code>math.floor(j/sqs[i])</code> can be done with an integer division <code>j // sqs[i]</code>.</p>

<p>If the order of the nested loops is interchanged then one can leave
the inner loop early if the square number becomes too large:</p>

<pre><code>for j in range(1, n + 1):
    for s in sqs:
        if s &lt;= j:
            T[j] = min(T[j], j // s + T[j % s])
        else:
            break
</code></pre>

<p>It is sufficient to update</p>

<pre><code>            T[j] = min(T[j], 1 + T[j - s])
</code></pre>

<p>because <code>T[j - s]</code> is already the correct optimal value.</p>

<p>With these changes, the function already becomes a bit faster.
My simple performance benchmark is</p>

<pre><code>N = 500
start = time.time()
l = [numSquares(x) for x in range(1, N)]
end = time.time()
print((end - start) * 1000)
</code></pre>

<p>On a 1.2 GHz MacBook I measured roughly 1000 milliseconds with your
original code and 600 milliseconds with the improved version</p>

<pre><code>def numSquares(n):
    sqs = [i * i for i in range(1, math.floor(math.sqrt(n)) + 1)]
    T = [x for x in range(n+1)]
    for j in range(1, n + 1):
        for s in sqs:
            if s &lt;= j:
                T[j] = min(T[j], 1 + T[j - s])
            else:
                break
    return T[n]
</code></pre>

<p>Further possible performance improvements are:</p>

<ul>
<li>Check some simple cases (e.g <code>n &lt;= 3</code>) in advance.</li>
<li>Check in advance if <code>n</code> is a perfect square.</li>
</ul>

<p>Unfortunately, all these changes are not good enough to pass the
LeetCode challenge.</p>

<p><em>Some more remarks:</em></p>

<ul>
<li>The <a href="http://pep8online.com" rel="noreferrer">PEP8 online check</a> reports many <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8 coding style</a> violations,
mainly missing  (horizontal)  whitespace.</li>
<li>Some variable names can be improved, e.g. <code>squares</code> instead of
<code>sqs</code>. It is also unclear what <code>T</code> stands for.</li>
</ul>

<h3>An alternative approach</h3>

<p>As it turns out, it is more efficient to compute sets with sums of 2, 3, 4, ...
square numbers, until the given number occurs in such a set.
This leads to the following implementation</p>

<pre><code>def numSquares(n):
    if n &lt;= 3:
        return n
    squares = { i * i for i in range(1, math.floor(math.sqrt(n)) + 1) }
    sums = squares
    for i in range(1, n):
        if n in sums:
            return i
        sums = { a + b for a in squares for b in sums if a + b &lt;= n }
</code></pre>

<p>The above benchmark runs in approximately 100 milliseconds (i.e.
faster than the original by a factor of 10), and this
also passed the LeetCode challenge.</p>
    </div>