<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a lot that could be improved so at least a couple of points. In case that you need further explanation I will gladly explain it in comments.</p>

<ol>
<li><p>Having public class attributes is usually sign of bad design:</p>

<pre><code>public $persona;
public $taxRates;
public $taxBand;
public $taxFreeAllowance;
public $personalAllowance;
public $totalTaxableAmount;
</code></pre>

<p>You should initialize attributes in constructor or with <code>setAttributeName($attributeName)</code> methods:</p>

<pre><code>private $persona;

public function setPersona($persona) { $this-&gt;persona = $persona; }
</code></pre>

<p>If you need to access attribute outside of the class then you should have <code>getAttributeName()</code> methods:</p>

<pre><code>public function getPersona() { return $this-&gt;persona; }
</code></pre>

<p>Inside class it is ok to access attribute directly using <code>$this-&gt;persona</code>.</p></li>
<li><p>Do not include files inside class method:</p>

<pre><code>public function __construct($persona) {
    include('data/income_tax_rates.php');
    include('data/national_insurance_rates.php');
    include('data/student_loan_rates.php');
    include('data/childcare_voucher_rates.php');
    $this-&gt;persona = $persona;
    $this-&gt;taxRates = $income_tax_rates;
    $this-&gt;niRates = $national_insurance_rates;
    $this-&gt;taxYear = $this-&gt;persona["tax_year_is"];
    $this-&gt;taxBand = $this-&gt;taxRates[$this-&gt;taxYear]["rates"];
    $this-&gt;taxFreeAllowance = $this-&gt;taxRates[$this-&gt;taxYear]["allowances"];
    $this-&gt;studentRates = $student_loan_rates[$this-&gt;taxYear];
    $this-&gt;childCareVoucher = $annual_childcare_voucher_rates;
}
</code></pre>

<p>It should be like this:</p>

<pre><code>public function __construct($persona, $taxRates, $niRates, $taxYear, $taxBand, $taxFreeAllowance, $studentRates, $childCareVoucher) {
    $this-&gt;persona = $persona;
    $this-&gt;taxRates = $taxRates;
    $this-&gt;niRates = $niRates;
    $this-&gt;taxYear = $taxYear;
    $this-&gt;taxBand = $taxBand;
    $this-&gt;taxFreeAllowance = $taxFreeAllowance;
    $this-&gt;studentRates = $studentRates;
    $this-&gt;childCareVoucher = $childCareVoucher;
}
</code></pre>

<ul>
<li>Constructor or <code>setAttributeName($attributeName)</code> methods should be used for passing variables from outside of the class to class.</li>
<li>What if you decide to use the class in some other project? It would always mean to move it together with other files.</li>
<li>Design like this is not easy to be tested by test frameworks.</li>
<li>You can find a lot of good articles about OOP, for example <a href="http://www.codeproject.com/Articles/567768/Object-Oriented-Design-Principles" rel="nofollow">here</a>.</li>
</ul></li>
<li><p>Do not write method documentation like this:</p>

<pre><code>/*
 * Sets the default values we need when the class is instantiated.
 * @param   array   $persona            User submitted inputs
 * @param   array   $income_tax_rates   Raw data for all tax years
 */
</code></pre>

<p>Better to write it like this:</p>

<pre><code>/*
 * Sets the default values we need when the class is instantiated.
 *
 * @param array $persona User submitted inputs
 * @param array $income_tax_rates Raw data for all tax years
 */
</code></pre>

<ul>
<li>Imagine that you would have 10 params and then you would need to add
11th with way longer name than other parameters, that would require
indenting all other parameters.</li>
<li>Readability is the same without indenting.</li>
<li>Indenting might cause problems displaying documentation hints in some
IDEs.</li>
</ul></li>
<li><p>Do not use empty line between method documentation and method definition:</p>

<pre><code>/*
 * Takes two numbers and determines which is the lower figure.
 * @param   integer   $a,$b   Used to compare integers in other functions
 * @return  integer           The lowest value of the two checked
 */

public function get_lower_figure($a, $b) {
    if ($a &lt;= $b) {
        return $a;
    } else {
        return $b;
    }
}
</code></pre>

<p>It should be like this:</p>

<pre><code>/*
 * Sets the default values we need when the class is instantiated.
 *
 * @param array $persona User submitted inputs
 * @param array $income_tax_rates Raw data for all tax years
 */
public function get_lower_figure($a, $b) {
    if ($a &lt;= $b) {
        return $a;
    } else {
        return $b;
    }
}
</code></pre></li>
<li><p>There is built in method for this in PHP, the method is called "min":</p>

<pre><code>public function get_lower_figure($a, $b) {
    if ($a &lt;= $b) {
        return $a;
    } else {
        return $b;
    }
}
</code></pre>

<ul>
<li><a href="http://www.php.net/manual/en/function.min.php" rel="nofollow">Documentation for min method</a></li>
</ul></li>
<li><p>This can be simplified (applies to other issues like this as well):</p>

<pre><code>if ($personalAllowance &lt; 0) {
    $personalAllowance = 0;
}

return $personalAllowance;
</code></pre>

<p>It should be like this:</p>

<pre><code>return ($personalAllowance &lt; 0) ? 0 : $personalAllowance;
</code></pre></li>
<li><p>This can be simplified (applies to other issues like this as well):</p>

<pre><code>public function get_blind_persons_allowance() {
    $blind_persons_allowance = $this-&gt;taxFreeAllowance["blind_persons"];
    return $blind_persons_allowance;
}
</code></pre>

<p>It should be like this:</p>

<pre><code>public function get_blind_persons_allowance() {
    return $this-&gt;taxFreeAllowance["blind_persons"];
}    
</code></pre></li>
<li><p>It is better to have single exit point in a method, that means not multiple return statements in a method.</p></li>
<li><p>Variable <code>$monthlyIncome</code> not used in method <code>get_employers_pension_amount()</code>, comment in code:</p>

<pre><code>if ($this-&gt;persona["pension_every_x"] === "month") {
    // This variable is not used anywhere before return statement
    $monthlyIncome = $this-&gt;persona["gross_annual_income"] / 52;

    $pensionAmount = $this-&gt;persona["pension_contribution_is"];
    $annualAmount = $pensionAmount * 52;

    return $annualAmount;
} else {
    $annualAmount = $this-&gt;persona["pension_contribution_is"];

    return $annualAmount;
}
</code></pre></li>
<li><p>Value in variable <code>$annualAmount</code> is reassigned right after it is assigned, method <code>get_children_voucher_amount()</code>, comment in code:</p>

<pre><code>if ($income &gt;= $taxBands["additional"]["start"] &amp;&amp; $annualAmount &gt; $rates["additional"] &amp;&amp; $pre2011 === "") {
    if ($this-&gt;persona["tax_year_is"] === "year2013_14" || $this-&gt;persona["tax_year_is"] === "year2014_15") {
        $rates["additional"] = 1320;
        // You assign value here, you do not use it for any operation
        $annualAmount = $rates["additional"];
    }
    // You reassign the value here, assignment above is not needed
    $annualAmount = $rates["additional"];
}
</code></pre></li>
<li><p><code>isset</code> vs <code>array_key_exists</code>:</p>

<pre><code>if (isset($this-&gt;persona["annual_childcare_vouchers"])) {
    $this-&gt;showChildCareVouchers = $this-&gt;get_childcare_voucher_amount();
    $this-&gt;totalTaxableAmount -= $this-&gt;showChildCareVouchers;
    $this-&gt;showTotalDeduction += $this-&gt;showChildCareVouchers;
}
</code></pre>

<p>You are using the <code>isset</code> method for checking if array key exists. It works, but there is special method for that called <code>array_key_exists</code>.</p></li>
<li><p><code>""</code> vs <code>''</code>:</p>

<p>If string does not contain any variables it is generally better to use <code>''</code>, because PHP does not need to check if there is variable inside the string and the interpretation of script is a bit faster.</p></li>
<li><p>Naming your class <code>TaxCalculator</code> would be more suitable, <code>taxCalculation</code> (or better <code>calculateTax</code>) would be more appropriate for a method.</p></li>
<li><p>Use consistent naming of your variables and methods.  Use <code>myMethodName</code> / <code>myVariableName</code> or <code>my_method_name</code> / <code>my_variable_name</code>, not both.</p></li>
</ol>
    </div>