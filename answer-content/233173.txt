<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In search of most performant and optimized solution for your task let's consider <strong>3</strong> cases.</p>

<p>We'll test them on input file containing <em>"example intput"</em> from the question.</p>

<hr>

<p>Case #<strong>1</strong> - is your initial approach with suggested <code>sorted</code> call wrapped in <code>max_trainset_sorted_counter</code> function:</p>

<pre><code>def max_trainset_sorted_counter():
    with open('lines.txt', 'r') as f:
        for line in f:
            n = int(line.strip())
            data_set = sorted(tuple(map(str, f.readline().split())) for __ in range(n))
            print(sum(max(Counter(element[1]).values()) for element in groupby(data_set, key=lambda x: x[0])))
</code></pre>

<p>When profiled (<code>cProfile</code>) it produces: <strong><em>179</em></strong> function calls (165 primitive calls).</p>

<hr>

<p>Case #<strong>2</strong> - is an approach from <a href="https://codereview.stackexchange.com/a/233109/95789">previous answer</a> based on <code>defaultdict</code> and <code>Counter</code> wrapped in <code>max_trainset_ddict_counter</code> function:</p>

<pre><code>def max_trainset_ddict_counter():
    with open('lines.txt', 'r') as f:
        for line in f:
            n = int(line.strip())
            results = defaultdict(Counter)
            data_set = (f.readline().replace('\n', '').split() for _ in range(n))
            for word, result_bool in data_set:
                results[word][result_bool] += 1
            print(sum(max(result_bools.values()) for word, result_bools in results.items()))
</code></pre>

<p>When profiled it produces: <strong><em>140</em></strong> function calls.</p>

<hr>

<p>Case #<strong>3</strong> - is actually my solution based on <code>itertools.groupby</code>, <code>itertools.islice</code> features and simple arithmetic trick of 2 steps to sum up <em>maximals</em> (items with greater number of occurrences of <code>1</code> or <code>0</code> flags) of each group within a <em>trainset</em>:</p>

<ul>
<li>sum up all values of the group - <code>sum_ones = sum(int(i[1]) for i in group)</code>, which actually gives a number of <strong><code>1</code></strong> values/flags</li>
<li>then <em>maximal</em> is found with simple <code>max(sum_ones, g_size - sum_ones)</code>, where <code>g_size</code> is assigned with <code>len(group)</code> (number of entries within a group). This will cover any combinations of <code>0</code> and <code>1</code> in <em>solitary</em> or mixed sequences.</li>
</ul>

<p>It's wrapped in <code>max_trainset_ext_sums</code> function:</p>

<pre><code>def max_trainset_ext_sums():
    with open('lines.txt', 'r') as f:
        for line in f:
            n = int(line.strip())
            sum_groups = 0
            for k, g in groupby(sorted(tuple(row.split()) for row in islice(f, n)), key=lambda x: x[0]):
                group = tuple(g)
                g_size = len(group)
                if g_size == 1:
                    sum_groups += g_size
                else:
                    sum_ones = sum(int(i[1]) for i in group)
                    sum_groups += max(sum_ones, g_size - sum_ones)
            print(sum_groups)
</code></pre>

<p>When profiled it produces: <strong><em>99</em></strong> function calls.</p>

<hr>

<p>All 3 cases produce the same expected output:</p>

<pre><code>2
6
3
</code></pre>

<p><strong>But</strong> let's get to <em>time performance</em> test (note, on very small input sample the time difference may not be significant):</p>

<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('max_trainset_sorted_counter()', setup='from __main__ import max_trainset_sorted_counter', number=1000)
0.1788159019779414
&gt;&gt;&gt; timeit('max_trainset_ddict_counter()', setup='from __main__ import max_trainset_ddict_counter', number=1000)
0.17249802296282724
&gt;&gt;&gt; timeit('max_trainset_ext_sums()', setup='from __main__ import max_trainset_ext_sums', number=1000)
0.14651802799198776
</code></pre>
    </div>