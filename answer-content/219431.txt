<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your use of whitespace is inconsistent, which makes the code harder to read and understand. There should be whitespace between control flow statements and open parentheses, and there should be whitespace on both sides of operators.</p>

<p>Your comment is noise and should be deleted.</p>

<p>Unless leetcode promises you'll never get a null input, you should check to make sure the <code>prices</code> array is not null.</p>

<p>It's cleaner to check if the array length is <code>&lt; 2</code> rather than enumerating the cases. Also, your algorithm works correctly without the check, since the loop falls through correctly.</p>

<p><code>size</code> should be marked as final since it does not change. There's also no real value in storing this in a variable, since it's obvious what <code>prices.length</code> is, and it's not a computed value.</p>

<p>You can use <code>Math.max()</code> instead of doing subtraction and int comparison yourself. It makes the code easier to read.</p>

<p>You can save a comparison in some cases by always doing the subtraction. It's easier to read, and in some cases will be faster.</p>

<p>If you were to make all these changes, your code might look more like:</p>

<pre><code>public int maxProfit(final int[] prices) {
    if (prices == null) {
        return 0;
    }

    int maxProfit = 0;

    for (int i = 0; i &lt; prices.length; i++) {
        for (int j = i + 1; j &lt; prices.length; j++) {
            maxProfit = Math.max(maxProfit, prices[j] - prices[i]);
        }
    }

    return maxProfit;
}
</code></pre>

<p>As far as algorithmic performance, you can do this in <code>O(n)</code> time and <code>O(1)</code> space. Walk through the input array one time, tracking the minimum value seen so far and the current best profit. At each step, update those two values. </p>

<pre><code>public int maxProfit(final int[] prices) {
    if (prices == null) {
        return 0;
    }

    int minPrice = Integer.MAX_VALUE;
    int maxProfit = 0;

    for (int i = 0; i &lt; prices.length; i++) {
        maxProfit = Math.max(maxProfit, prices[i] - minPrice);
        minPrice = Math.min(minPrice, prices[i]);
    }

    return maxProfit;
}
</code></pre>
    </div>