<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I would like to know if I can make my code look more "idiomatic" or professional,</p>
</blockquote>

<h3>Packing</h3>

<p><code>#pragma pack(push) #pragma pack(1)</code> are not standard C.  Yet <code>BMPHeader</code> is a pain due to the first member is 16-bit.  Unless high portability is needed, stay with the non-standard packing for now.</p>

<h3>unsigned char</h3>

<p>Other <code>struct</code> members used fixed width types (good).  Recommend to apply that to <code>data</code>.  It is more informative and will force a necessary compiler error on a rare machine with 16-bit <code>char</code>.</p>

<pre><code>typedef struct {
  BMPHeader header;
  // unsigned char* data;
  uint8_t* data;
} BMPImage;
</code></pre>

<h3>bmp.h Comments</h3>

<p>A <strong>user</strong> of the code <strong>may never see <code>bmp.c</code></strong>, so comment important attributes in  <code>bmp.h</code>.  Consider more documentation in this file.</p>

<p>Take the below from <code>bmp.c</code> and put only in <code>bmp.h</code> - and so for all global functions.  In the bmp.c leave a comment with the function if desired to "see bmp.h".  You do not want to maintain dual documentation.</p>

<pre><code>/*
 * Read a BMP image from an already open file.
 * 
 * - Postcondition: it is the caller's responsibility to free the memory
 *   for the error message and the returned image.
 * 
 * - Return: the image as a BMPImage on the heap.
 */
</code></pre>

<p>What does <code>true</code> mean in <code>bool check_bmp_header()</code>?</p>

<p><code>uint16_t is a 16-bit unsigned integer</code> is an unnecessary comment.</p>

<p><code>Magic identifier: 0x4d42</code> is more informative as <code>'B' 'M'</code></p>

<p>Its is not stated here that <code>*error</code> in <code>read_bmp(FILE* fp, char** error)</code> requires prior assignment before calling this function.</p>

<p>Unclear why <code>int</code> x4 in <code>crop_bmp(BMPImage* image, int x, int y, int w, int h, char** error)</code> when the format type uses <code>int32_t</code>.  I'd recommend the same type.  (or at least consider what code needs to do when <code>int</code> is narrower than <code>int32_t</code>.)</p>

<p>Good use of minimal <code>#include &lt;&gt;</code> files.</p>

<h3>Error message</h3>

<p>The error handling, often a tricky point, lacks symmetry here amongst the various <code>..._bmp()</code>.</p>

<p>As error messages are copy of <em>string literals</em>, instead of copying the text, copy the pointer and make know the user need not free it.</p>

<p>Consider instead of a sometimes <code>char** error</code> function parameter, add a <code>.error</code> member to <code>BMPImage</code>.</p>

<h3>Naming</h3>

<p>The bmp.h file uses <code>BMP_..., DIB_..., BMP..., ..._bmp</code> naming.  I would strive for consistency and use only <code>bmp_...</code> and <code>BMP_...</code></p>

<h2>bmp.c: Use <code>static</code> functions</h2>

<p><code>_get_file_size(),  ... _string_duplicate(), should be</code>static.  these function names are not needed outside `bmp.c</p>

<h2>bmp.c: global functions</h2>

<p>No need for another declaration of functions found in <code>bmp.h</code></p>

<h3>include test</h3>

<p>In bmp.c only, code <code>#include "bmp.h"</code> first to test that it compiles without prior <code>#includes</code>.</p>

<pre><code>#include "bmp.h"
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
// #include "bmp.h"
#include "other_user_header_files1.h"
#include "other_user_header_files2.h"
</code></pre>

<p>Comments like <code>// for strlen, strcopy</code> are a pain to maintain.  I recommend dropping that for standard headers.</p>

<h3>No computational check</h3>

<p><code>sizeof(*image-&gt;data) * image-&gt;header.image_size_bytes</code> lacks overflow protection.  Be very careful with external data from files that can cause <em>undefined behavior</em> with mis-szied allocation.  Watch out for <code>.image_size_bytes == 0</code> as the allocation may be <code>NULL</code> (which is not a "Not enough memory", but other concern).</p>

<pre><code>uint64_t sz = image-&gt;header.image_size_bytes
sz *= sizeof(*image-&gt;data);
image-&gt;data = NULL;
if (sz &lt;= SIZE_MAX) {
  image-&gt;data = malloc((size_t) sz);
}
if (image-&gt;data == NULL &amp;&amp; sz &gt; 0) {
  // assign error
}
</code></pre>

<h3>free() style</h3>

<p><code>free()</code> tolerates <code>free(NULL)</code> and so I recommend to do so here with <code>free_bmp(BMPImage *image)</code></p>

<pre><code>void free_bmp(BMPImage *image) {
    if (image) {
      free(image-&gt;data);
      free(image);
    } 
}
</code></pre>

<hr>

<p>Advanced:</p>

<h3>Endian</h3>

<p>.bmp file format assume an endian (little) and so each member of <code>BMPHeader</code> requires an endian adjustment should code compile on a non-little endian machine for both reading and writing.</p>

<hr>

<p>Minor:</p>

<h3>Allocating</h3>

<p>Good use of allocating by size of de-referenced pointer rather than type.  Style thought: <code>()</code> not needed</p>

<pre><code>image = malloc(sizeof(*image));
// or
image = malloc(sizeof *image);
</code></pre>

<hr>

<p>GTG</p>
    </div>