<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Rubocop Report</h2>

<p>There is a nice topic on <a href="https://mixandgo.com/learn/how-to-avoid-the-ruby-class-variable-problem" rel="nofollow noreferrer">Class vs Instance variables</a> online. Are you sure you would like to use class variables in classes <code>Items</code> and <code>SalesItems</code>?</p>

<blockquote>
<pre><code>class Items
  @@items = {}
  ..
</code></pre>
</blockquote>

<pre><code>class Items
  @items = {}
  ..
</code></pre>

<p>Class <code>PriceCalculator</code> has a couple of issues that need to be addressed.</p>

<blockquote>
<pre><code>billing_items = quantity.each_with_object(price) { |(k,v), billing_items|
</code></pre>
</blockquote>

<p><code>billing_items</code> inside the <code>each_with_object</code> hides the member from the outer scope. To avoid confusion which variable is accessed, consider changing the name of the variable inside the inner call.</p>

<blockquote>
<pre><code>def get_input
</code></pre>
</blockquote>

<p>Ruby guidelines don't like these java-style accessors. However, since the method isn't actually an accessor, it is acceptable (<a href="https://stackoverflow.com/questions/26097084/why-does-rubocop-or-the-ruby-style-guide-prefer-not-to-use-get-or-set">Clarification</a>).</p>

<blockquote>
<pre><code>price[item] = (((quantity[item]/SaleItems.all[item]['units']).floor)*SaleItems.all[item]['price']) + ((quantity[item]%SaleItems.all[item]['units'])*Items.all[item])
</code></pre>
</blockquote>

<p>Try to keep the length of your lines below 80 characters. Ruby is meant to read vertically. </p>

<p>Other:</p>

<ul>
<li>Method <code>start_billing</code> might have many lines. Consider splitting up methods if they take more than 10 lines. Ruby likes short methods.</li>
<li>The <a href="https://codeclimate.com/blog/deciphering-ruby-code-metrics/" rel="nofollow noreferrer">complexity</a> of method <code>calculate_bill</code> is too high. Consider splitting up its content into multiple methods, each doing their specific part. </li>
</ul>
    </div>