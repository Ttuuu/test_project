<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These plots are a great visual aid to support algorithmic arguments. I've been guilty of creating some of them myself, although more on the go and not with a dedicated "framework" like yours.</p>

<p>The code itself is clean and to the point. It's a great example of the power and beauty of Python. In under 100 lines of code you can create a usable tool, including documentation and multiprocessing. I'd support your opinion on that type hints would not really make it better here.</p>

<p>In essence there are only a few points that I personally would change:</p>

<h2><code>get_timings_df</code></h2>

<ul>
<li>I prefer list comprehensions over <code>map</code>, so I would likely use <code>df = pd.DataFrame([key(input_) for input_ in inputs], columns=["x"])</code>, mainly because I find it clearer.</li>
<li>Since we are at it, I don't like <code>key</code> as a parameter name here. I'd suggest to use something like <code>preprocess</code>, <code>input_transform</code> or another more telling name instead. I also understand that maybe one could argue that <code>key</code> is "more in-line" with general purpose functions like <code>sorted(...)</code>, but I reckon both versions of the data frame creation would become easier to understand with a more straightforward name.</li>
<li><code>labels = [func.__name__ for func in funcs]</code> could be moved into an <code>else</code> branch of <code>if doc:</code> to avoid iterating over the functions twice.</li>
<li>I'm not entirely sure how I feel about mandatory multiprocessing with a number of workers I cannot control. I think this should be optional since it may or may not influence the timing, especially if the code that is timed already uses multiprocessing, although I have no hard facts to back that up.</li>
</ul>

<h2><code>plot_times</code></h2>

<ul>
<li>The note on <code>key</code> above applies here to</li>
<li>Maybe it would be a good idea to make the final <code>plt.show()</code> optional. IMHO that would make it easier to use this functionality in scripts without user interaction, e.g. to automatically save several plots before showing them.</li>
<li>The documentation should explain that the function always uses <code>plt.gcf()</code>/<code>plt.gca()</code> as plotting target. This would make it more obvious for the user that they need to call <code>plt.figure()</code> manually when doing separate tests in one go in order to avoid messing up the previous plot.</li>
</ul>

<h2>"Auto review"</h2>

<p>Just for the sake of completeness, some minor complaints from flake8:</p>

<ul>
<li><code>itertools.count</code> is imported but not used</li>
<li>there are quite a few instances of trailing whitespace in the docstrings</li>
</ul>
    </div>