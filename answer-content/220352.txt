<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Do not map to array</h2>

<p>I appreciate that streaming strings is a little messy. However, there is no need to create an array; instead we can just transform the stream. I would remove the arrays and change <code>getFrequencyMap</code> to take a <code>String</code>.</p>

<h2>Use <code>Map::getOrDefault</code> to simplify <code>countError</code></h2>

<p>In particular, if you do <code>aMap.getOrDefault(ch, 0)</code> then the <code>Math.abs</code> case always works.</p>

<p>Unlike @DapperDan's solution, this still requires looping through all 26 characters; however, the logic is a lot simpler. At least on my system, my approach is faster, even in you example when each map has only 3 elements. The cost of iterating through 26 characters is very low compared to map operations.</p>

<h2>Use of longs</h2>

<p>I notice you use <code>Longs</code> throughout (presumably due to <code>Collectors.counting()</code> returning a <code>Long</code>) but then cast to <code>int</code> at the end. Why not just return a <code>long</code>?</p>

<h2>Stream <code>rangeClosed</code> vs for loop</h2>

<p>Mostly a matter of style, but it is easy to replace the for loop with a stream.</p>

<h2>Code</h2>

<p>Applying these changes should yield something like</p>

<pre><code>static long makeAnagram(String a, String b) {
    return countError(getFrequencyMap(a), getFrequencyMap(b));
}

private static long countError(Map&lt;Character, Long&gt; aMap, Map&lt;Character, Long&gt; bMap) {
    return IntStream.rangeClosed('a', 'z')
        .mapToObj(x -&gt; Character.valueOf((char)x))
        .mapToLong(c -&gt; Math.abs(aMap.getOrDefault(c, 0l) - bMap.getOrDefault(c, 0l)))
        .sum();
}

private static Map&lt;Character, Long&gt; getFrequencyMap(String s) {
    return s.chars()
        .mapToObj(x -&gt; Character.valueOf((char)x))
        .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
}
</code></pre>
    </div>