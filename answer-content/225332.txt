<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks good, but there are four things I would improve:</p>

<h2>Style</h2>

<p>Overall your code follows the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 Style Guide</a>, but:</p>

<ul>
<li>Names should use snake_case, so <code>index_of</code> instead of <code>indexOf</code>, etc</li>
<li>Comments after code should leave 2 white spaces after the code:</li>
</ul>

<pre class="lang-py prettyprint-override"><code>self.size = 0 # length user thinks array is  &lt;- wrong
self.size = 0  # length user thinks array is &lt;- correct
</code></pre>

<p>I don't know if this is just my preference, but I think it's better to group the public methods like <code>is_empty</code>, <code>index_of</code> etc and group the overloads like <code>__getitem__</code>, <code>__setitem__</code></p>

<h2>Clear</h2>

<p>At least for me, what I would expect of a method called <code>clear</code> is that it removes all objects, leaving the array empty. So in my opinion your <code>clear</code> method should just set <code>self.size = 0</code>. You don't need to set the elements to null because they don't matter anymore.</p>

<h2>Is empty?</h2>

<p>In Python, you can check if a list contains any elements by doing:</p>

<pre class="lang-py prettyprint-override"><code>if my_list:
</code></pre>

<p>I think users would expect the same behaviour for your class, which you can implement with the <code>__bool__</code> (Python 3.x) or <code>__nonzero__</code> (Python 2.x) methods. Just return <code>not is_empty()</code></p>

<h2>Iterator</h2>

<p>The biggest flaw I see in the code is your implementation of iteration. You are keeping the index in the array object; this means that the user cannot do:</p>

<pre class="lang-py prettyprint-override"><code>for x in my_array:
    for y in my_array:
</code></pre>

<p>Because the <code>_index</code> is shared in both loops.</p>

<p>You can solve this by implementing the iterator in a different class. I would declare it as a nested class, starting with an underscore to indicate the user that it should be considered private:</p>

<pre class="lang-py prettyprint-override"><code>class DynamicArray:
    class _Iterator:
        def __init__(self, dynamic_array):
             # ....
        # Implement '_index' and '__next__' in this class

    def __iter__(self):
        # Return a different object every time you are requested an iterator
        return _Iterator(self)
</code></pre>
    </div>