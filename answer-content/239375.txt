<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As noted in a comment, I think you've got a bug, but I'll do a pass over the code for style since it works for your test case at least.  These are mostly minor style points rather than addressing the overall structure of the code; my goal is going to be to make the code easier to read without doing a full rewrite from scratch or changing the way it works.</p>

<ol>
<li><p>Clearly specify what your functions take as arguments and what they return.  One way to do this is docstrings; I usually prefer doing it with type annotations since those can be checked by <code>mypy</code> and the format is actually built into Python 3.</p></li>
<li><p>Having added type annotations, I'd suggest changing some of those types: use 2-tuples for the coordinates (since you always want exactly two <code>int</code> values there, you can make mypy enforce this by specifying it as a <code>Tuple[int, int]</code>), and raise exceptions for errors rather than returning a string (this is a much more standard way of handling errors in Python).  Same for <code>neighbors</code> where you're always returning two values.</p></li>
<li><p>Use destructuring to assign multiple variables, e.g. <code>a, b = start</code>.</p></li>
<li><p>Align your comments to the indentation of the blocks they describe.  Also, omit comments like <code># the usage of the copy will be exlained later</code>.  Either explain it or don't, but don't comment your comments.  :)</p></li>
<li><p>You state the problem in terms of <code>bool</code> values, but your code uses <code>int</code>s.  Since you use lots of <code>ints</code> to keep track of distances and coordinates, it's already hard to keep track of what each number represents; if you can turn at least some of those into <code>bool</code>s it makes it easier to discern the use of each variable from its type.</p></li>
<li><p>Try to reduce nested <code>if</code>s.  For example, this:</p></li>
</ol>

<pre><code>            if m_ngbr == 0:
                if d_curr != -1:
                    d_ngbr = d_curr + 1
            else:
                d_ngbr = -1
</code></pre>

<p>could be written as:</p>

<pre><code>            if m_ngbr:
                d_ngbr = -1
            elif d_curr != -1:
                d_ngbr = d_curr +1
</code></pre>

<ol start="7">
<li>Magic values like <code>-9</code> and <code>-1</code> are dangerous, and I suspect one of those might be the origin of your bug.  :)  Consider defining them as constants to at least make them easier to distinguish from "real" numbers, or better yet, use alternate types like <code>None</code> to indicate unset values.</li>
</ol>

<pre><code>import copy
from typing import List, Tuple

def shortestpath(m: List[List[bool]], start: Tuple[int, int], end: Tuple[int, int]) -&gt; int:
    """Returns the length of the shortest path through m from start to end.  Raises if there's no path."""

    # store the coordinates of start and end
    p, q = end
    a, b = start

    # if end destination is a wall, return a message
    if m[p][q]:
        raise Exception('Destination is a wall')

    if start == end:
        raise Exception('Start and End same')

    # store the size of matrix
    M = len(m[0])
    N = len(m)

    # create a matrix of all -9 of the same size of the maze. this will be populated later according to distance from 
    # start and -1 if its a wall. So it will have -1 if the coordinate has wall and an integer for number of steps fro
    # start
    dist = [[-9 for _ in range(M)] for _ in range(N)]

    # the starting point is initialised with distance 0 and also we take a deepcopy of the distance dist matrix,
    dist[a][b] = 0
    distcopy = copy.deepcopy(dist)

    while True:
        # for the complete matrix, we iterate the matrix until we reach the destination
        # the very first time, a and b will have value of the starting point so the iterations will start from 
        # starting point. I transverse from left to right and then down as normal 2D array

        # as starting point is initialised to 0, its neighbour will be 0+1 and then further its neighbour will be 0+1+1
        # also we not only popluate the current a,b position, but also all the neighbours, like up, down, right, left
        for i in range(a, N):
            for j in range(b, M):
                # left neighbour                
                if i - 1 &gt;= 0:
                    dist[i][j] , dist[i-1][j] = neighbours(dist[i][j] , dist[i-1][j] , m[i-1][j])

                # right neighbour                
                if i + 1 &lt; N:
                    dist[i][j] , dist[i+1][j] = neighbours(dist[i][j] , dist[i+1][j] , m[i+1][j])

                # above neighbour                
                if j - 1 &gt;= 0:
                    dist[i][j] , dist[i][j-1] = neighbours(dist[i][j] , dist[i][j-1] , m[i][j-1])

                # below neighbour                
                if j + 1 &lt; M:
                    dist[i][j] , dist[i][j+1] = neighbours(dist[i][j] , dist[i][j+1] , m[i][j+1])

                # if the value -9 is replaced by any value, it means the number of steps have been found and hence ot returns 
                if dist[p][q] != -9:
                    return dist[p][q]

            # here we check the dist matrix with the copy before the current iteration started
            # if there is no change in M X N matrix, it means, no path was able to be found
            # it can happen when there is a wall all together and traversing is not possible
            if dist == distcopy:
                raise Exception('No path available')

            # the copy is updated afer the last row is iterated. here the N-1 check is important as otherwise there will be
            # instances when the complete row was same as earlier, but as it was not the last row, it came out,
            # so we should ideally be checking the complete matrix of M X N instead of individual rows
            else:
                if i == N - 1:
                    distcopy = copy.deepcopy(dist)

            a = 0
            b = 0


def neighbours(d_curr: int, d_ngbr: int, m_ngbr: bool) -&gt; Tuple[int, int]:

    # here we compute the distance of either the current position or the neighbour.
    # passsed values are current position, position of neighbour and the status of neighbour if its a wall or not

    # d_curr != -9 means, the position has been calculated, either wall or the distance from start
    # similary for d_ngbr which corresponds to neighbour
    # m_ngbr represnts the input matrix which tells about the walls within the maze

    if d_curr != -9:
        if d_ngbr == -9:
            if m_ngbr:
                d_ngbr = -1
            elif d_curr != -1:
                d_ngbr = d_curr +1
    else:
        if d_ngbr != -9 and not m_ngbr:
            d_curr = d_ngbr + 1

    return d_curr, d_ngbr


# here W represnts a wall and P is a valid path
W = True
P = False

maze = [
    [P, W, P, P, P, P, W, P, P, P],
    [P, W, P, W, P, P, P, W, P, P],
    [P, P, P, W, P, P, W, P, W, P],
    [W, W, W, W, P, W, W, W, W, P],
    [P, P, P, W, P, P, P, W, P, W],
    [P, W, P, P, P, P, W, P, W, W],
    [P, W, W, W, W, W, W, W, W, P],
    [P, W, P, P, P, P, W, P, P, P],
    [P, P, W, W, W, W, P, W, W, P],
]

start = [0, 0]
end = [3, 4]

assert shortestpath(maze, (0, 0), (3, 4)) == 11
</code></pre>
    </div>