<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whether or not code meets SOLID principles is often most apparent when you want to re-use the code for a similar purpose.  So, given the code you've written, look at it from the perspective that it is not a Connect4 implementation but a XInARowGameEngine (with ConnectFour constraints built-in).  So, in other words, consider what would need to be changed to separate the engine (board management) from the game (ConnectFour) in order to support a similar game like tic-tac-toe.  Doing so will typically reveal a number of areas where SOLID principles could be better applied (in my experience, it always does).</p>

<p>To support re-use would require the ability to resize the game board (3x3), 'CheckForWinner()' might use a parameter to replace the hard coded '4', etc.  But, you can certainly reuse a lot of your existing data manipulations/analysis.  To improve the SOLID-ness of your design, you want to work with abstractions (either interfaces and/or abstract classes).  For example in this case:  <code>IXInARowGameEngine</code> and <code>IConnectFour</code>.</p>

<p>Psuedo-implemented, perhaps something like:</p>

<pre><code>public interface IXInARowGameEngine
{
    int XInARowCriteria { set; get;}
    void GameBoardDimensions(int columns, int rows);
    void Play(byte rowIndex, byte columnIndex);
    void UndoLastMove();
    bool HasXInARow {get;}
}

public class XInARowGameEngine : IXInARowGameEngine
{
    //Implements the interface leveraging your existing code
}

public interface IConnectFour
{
    Piece PlayerOne {set; get;}
    Piece PlayerTwo {set; get;}
    void Play(byte columnIndex);
    void UndoLastMove();
}

public class ConnectFour : IConnectFour
{
    private IXInARowGameEngine _engine; //_engine supports ConnectFour to manipulate the game board
    public ConnectFour(IXInARowGameEngine engine)
    {
        _engine = engine;
        _engine.XInARowCriteria = 4;
        _engine.GameBoardDimensions(6, 7);
    }

    public void Play(byte columnIndex)
    {
        //Determine rowIndex
        _engine.Play(rowIndex, columnIndex);
        CheckForWinner();
    }
} 
</code></pre>

<p>So, to get to a Tic-Tac-Toe game...</p>

<pre><code>public interface ITicTacToe
{
    Piece PlayerOne {set; get;}
    Piece PlayerTwo {set; get;}
    void Play(byte rowIndex, byte columnIndex);
    void UndoLastMove();
}

public class TicTacToe : ITicTacToe
{
    private IXInARowGameEngine _engine;
    public TicTacToe(IXInARowGameEngine engine)
    {
        _engine = engine;
        _engine.XInARowCriteria = 3;
        _engine.GameBoardDimensions(3, 3);
    }

    public void Play(byte rowIndex, byte columnIndex)
    {
        _engine.Play(rowIndex, columnIndex);
        CheckForWinner();
    }
} 
</code></pre>

<p>So, after all that - even if you never intended to use the <code>Board</code> class code for any other similar games - the following improvements have been made:</p>

<ol>
<li>S - Single Responsibility Principal: Now rather than a single <code>Board</code> class with all responsibilities, there is are independent engine and the ConnectFour classes each with have their own more narrow responsibility.</li>
<li>O - Open/Closed Principle - Exposing the engine only thru <code>IXInARowGameEngine</code> opens the <code>IXInARowGameEngine</code> behavior for extension, but not modification.</li>
<li>L - Liskov substitution principle - For testing, you can now use a stub <code>IXInARowGameEngine</code> to test your game independent of using the actual <code>XInARowGameEngine</code> class.</li>
<li>I - Interface Segregation Principle - You have reduced the implicit Board class public interface to at least two smaller and abstract interfaces with more focused purposes.</li>
<li>D - Dependency Inversion - Passing an <code>IXInARowGameEngine</code> interface into the constructor of the <code>ConnectFour</code> class injects in interface dependency rather than requiring the <code>ConnectFour</code> class to instantiate/know-about the <code>XInARowGameEngine</code> class.  The <code>ConnectFour</code> class' only dependency is the interface definition.</li>
</ol>
    </div>