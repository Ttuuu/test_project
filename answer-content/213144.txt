<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I found this interesting and I did the job as well</p>

<p>I fully believe on the <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">solid principles</a> and <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" rel="nofollow noreferrer">object oriented principles</a>, that's how I ended up with the following code:</p>

<p>The idea behind <code>IFindStrategy</code> interface is to make the solution extensible. That's why I have created it and my strategies inherit from it (<a href="https://en.wikipedia.org/wiki/Strategy_pattern" rel="nofollow noreferrer">See Strategy pattern</a>)</p>

<p><code>IFindStrategy</code> is the interface from which all my strategies will inherit</p>

<pre><code>public interface IFindStrategy
{
    PeopleTuple Execute();
}
</code></pre>

<p>I have created an abstract class for my strategies so that the logic inside <code>LessThan2People</code> is not spread throughout the solution. We can also think about extending this abstract class in the feature (if needed). This is handy if we want to add behaviour to all our strategies from one place.</p>

<pre><code>public abstract class FindStrategyBase
{
    protected readonly List&lt;Person&gt; Persons;

    protected FindStrategyBase(List&lt;Person&gt; persons)
    {
        Persons = persons;
    }

    public bool LessThan2People()
    {
        return Persons.Count &lt; 2;
    }
}
</code></pre>

<p><code>FindStrategyBase</code> is our based class and we inherited because we need the behaviour in that class inside our strategy.</p>

<p><code>IFindStrategy</code> makes possible to pass millions of different strategies in our finder class without changing the code of our finder class, this is the beauty of the <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" rel="nofollow noreferrer">Open/Close principle</a>. This is possible thanks to Thanks to <a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)" rel="nofollow noreferrer">polymorphism</a> </p>

<p><code>FurthestTwoPeopleByAgeStrategy</code> is one of my strategies, it inherits from <code>FindStrategyBase</code> and <code>IFindStrategy</code>. It looks for the Furthest two people inside the list persons base on their age.</p>

<pre><code>public class FurthestTwoPeopleByAgeStrategy : FindStrategyBase, IFindStrategy
{
    public FurthestTwoPeopleByAgeStrategy(List&lt;Person&gt; persons) : base(persons)
    {
    }

    public PeopleTuple Execute()
    {
        if (LessThan2People())
            return PeopleTuple.None;

        var tr = new List&lt;PeopleTuple&gt;();

        for (var i = 0; i &lt; Persons.Count - 1; i++)
        {
            for (var j = i + 1; j &lt; Persons.Count; j++)
            {
                var r = new PeopleTuple(Persons[i], Persons[j]);
                tr.Add(r);
            }
        }

        return tr.Count == 1 ? tr[0] : tr.Aggregate((agg, next) =&gt;
            next.DifferenceOfAges &gt; agg.DifferenceOfAges ? next : agg);
    }
}
</code></pre>

<p><code>ClosestTwoPeopleByAgeStrategy</code> is one of my strategies, it inherits from <code>FindStrategyBase</code> and <code>IFindStrategy</code>. It looks for the closest two people inside the list persons base on their age.</p>

<pre><code>public class ClosestTwoPeopleByAgeStrategy : FindStrategyBase, IFindStrategy
{
    public ClosestTwoPeopleByAgeStrategy(List&lt;Person&gt; persons) : base(persons)
    {
    }

    public PeopleTuple Execute()
    {
        if (LessThan2People())
            return PeopleTuple.None;

        var tr = new List&lt;PeopleTuple&gt;();

        for (var i = 0; i &lt; Persons.Count - 1; i++)
        {
            for (var j = i + 1; j &lt; Persons.Count; j++)
            {
                var r = new PeopleTuple(Persons[i], Persons[j]);
                tr.Add(r);
            }
        }

        return tr.Count == 1 ? tr[0] : tr.Aggregate((agg, next) =&gt;
            next.DifferenceOfAges &lt; agg.DifferenceOfAges ? next : agg);
    }
}
</code></pre>

<p>Finder receives any strategy and executes it. <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility principle</a>.</p>

<pre><code>public class Finder
{
    private readonly IFindStrategy _findStrategy;

    public Finder(IFindStrategy findStrategy)
    {
        _findStrategy = findStrategy;
    }

    public PeopleTuple Find()
    {   
        return _findStrategy.Execute();
    }
}
</code></pre>

<p>Person class complies with <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" rel="nofollow noreferrer">encapsulation Object Oriented Principle</a>. It forbids the access to its properties and provides only methods that are needed for the client.</p>

<pre><code>public class Person : IEquatable&lt;Person&gt;
{
    private readonly string _name;
    private readonly DateTime _birthDate;

    public Person(string name, DateTime birthDate)
    {
        _name = name;
        _birthDate = birthDate;
    }

    public bool IsOlderThan(Person p) =&gt; _birthDate &gt; p._birthDate;

    public TimeSpan DifferenceOfAges(Person p) =&gt; _birthDate - p._birthDate;

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;
        return Equals((Person) obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            return ((_name != null ? _name.GetHashCode() : 0) * 397) ^ _birthDate.GetHashCode();
        }
    }

    public bool Equals(Person other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return string.Equals(_name, other._name) &amp;&amp; _birthDate.Equals(other._birthDate);
    }
}
</code></pre>

<p><code>PeopleTuple</code> class complies with <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" rel="nofollow noreferrer">encapsulation Object Oriented Principle</a>. It forbids the access to its properties and provides only methods that are needed for the client.</p>

<pre><code>public class PeopleTuple
{
    public static PeopleTuple None =&gt; null;

    private Person YoungerPerson { get; set; }
    private Person OlderPerson { get; set; }
    public TimeSpan DifferenceOfAges =&gt; OlderPerson.DifferenceOfAges(YoungerPerson);

    public PeopleTuple(Person p1, Person p2)
    {
        OlderPerson = p1.IsOlderThan(p2) ? p1 : p2;
        YoungerPerson = p1.IsOlderThan(p2) ? p2 : p1;
    }

    public bool IsEqualsToYoungerPerson(Person p)
    {
        return YoungerPerson.Equals(p);
    }

    public bool IsEqualsToOlderPerson(Person p)
    {
        return OlderPerson.Equals(p);
    }
}
</code></pre>

<p>I have also changed the unit tests to reflect my changes</p>

<pre><code>public class FinderTests
{
    [Fact]
    public void Returns_Empty_Results_When_Given_Empty_List()
    {
        var list = new List&lt;Person&gt;();
        var finder = new Finder(new ClosestTwoPeopleByAgeStrategy(list));
        var result = finder.Find();

        Assert.True(result == PeopleTuple.None);
    }

    [Fact]
    public void Returns_Empty_Results_When_Given_One_Person()
    {
        var list = new List&lt;Person&gt;() { sue };
        var finder = new Finder(new ClosestTwoPeopleByAgeStrategy(list));
        var result = finder.Find();

        Assert.True(result == PeopleTuple.None);
    }

    [Fact]
    public void Returns_Closest_Two_For_Two_People()
    {
        var list = new List&lt;Person&gt;() { sue, greg };
        var finder = new Finder(new ClosestTwoPeopleByAgeStrategy(list));
        var result = finder.Find();

        Assert.True(result.IsEqualsToYoungerPerson(sue));
        Assert.True(result.IsEqualsToOlderPerson(greg));
    }

    [Fact]
    public void Returns_Furthest_Two_For_Two_People()
    {
        var list = new List&lt;Person&gt;() { greg, mike };
        var finder = new Finder(new FurthestTwoPeopleByAgeStrategy(list));
        var result = finder.Find();

        Assert.True(result.IsEqualsToYoungerPerson(greg));
        Assert.True(result.IsEqualsToOlderPerson(mike));
    }

    [Fact]
    public void Returns_Furthest_Two_For_Four_People()
    {
        var list = new List&lt;Person&gt;() { greg, mike, sarah, sue };
        var finder = new Finder(new FurthestTwoPeopleByAgeStrategy(list));
        var result = finder.Find();

        Assert.True(result.IsEqualsToYoungerPerson(sue));
        Assert.True(result.IsEqualsToOlderPerson(sarah));
    }

    [Fact]
    public void Returns_Closest_Two_For_Four_People()
    {
        var list = new List&lt;Person&gt;() { greg, mike, sarah, sue };
        var finder = new Finder(new ClosestTwoPeopleByAgeStrategy(list));
        var result = finder.Find();

        Assert.True(result.IsEqualsToYoungerPerson(sue));
        Assert.True(result.IsEqualsToOlderPerson(greg));
    }

    Person sue = new Person("Sue", new DateTime(1950, 1, 1));
    Person greg = new Person("Greg", new DateTime(1952, 6, 1));
    private Person sarah = new Person("Sarah", new DateTime(1982, 1, 1));
    private Person mike = new Person("Mike", new DateTime(1979, 1, 1));
}
</code></pre>
    </div>