<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's usually not a good idea to catch a generic exception. (See <a href="https://stackify.com/common-mistakes-handling-java-exception/#mistake2" rel="nofollow noreferrer">"Mistake 2: Catch unspecific exceptions"</a> in <a href="https://stackify.com/common-mistakes-handling-java-exception/" rel="nofollow noreferrer">7 Common Mistakes You Should Avoid When Handling Java Exceptions</a></p>

<blockquote>
  <p>The severity of this mistake depends on the kind of software component
  you’re implementing and where you catch the exception. It might be ok
  to catch a <em>java.lang.Exception</em> in the <em>main</em> method of your Java SE
  application. But you should prefer to catch specific exceptions, if
  you’re implementing a library or if you’re working on deeper layers of
  your application.</p>
  
  <p>That provides several benefits. It allows you to handle each exception
  class differently and it prevents you from catching exceptions you
  didn’t expect.</p>
</blockquote>

<p>The real code smell here is that the called method is too long, does too many things, and probably violates SRP. As you can see this has ramifications for the called code which now must handle numerous exceptions, i.e. do too many things. </p>

<p>The biggest problem IMO is, as stated in other reviews, that catching a generic exception has the unintended consequence of possibly catching other exceptions that are not one of those that are declared, and consequently handling them in an unintended way.</p>
    </div>