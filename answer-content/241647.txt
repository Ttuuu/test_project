<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Transitioning between languages ain't easy. I remember my move from C to Java, where I had to learn that Java passes everything via pointer. Now that I know C++ I would argue that it passes everything by <code>std::shared_ptr</code>. So, the main element of learning a new language, beside the syntax, is to learn about good practices, which are different based on the language. Some constructs of Java, like the way they deal with enumerations are frowned upon in the C++ world, see <a href="https://stackoverflow.com/a/57346836/2466431">this stack overflow post</a>.</p>

<p>In general, I think your approach is sound. I'm positively surprised to see you using a <code>std::map&lt;UnitType, ...&gt;</code> with this UnitType being a enum class. To be fair, as soon as you start optimizing, you want to get rid of <code>std::map</code> as it is way too much overhead and you better use a <code>std::vector</code> (This can even result in <code>O(1)</code> lookup and a lot less cache misses). Though, for the time being, it works and it allows you to get to get everything working.</p>

<p>As my intro already alluded to, java uses pointers for everything. Most likely that's why you are using <code>std::unique_ptr</code> all over the place. C++ uses value semantics. In short: Instead of allocating all data on the heap, we store this on the stack by default. This causes huge performance gains as data is packed closed together and one has less cache misses. Not to mention all the allocate/deallocate code that doesn't need to be executed. With modern C++ (which is now the C++17 standard), there ain't that much reason to allocate. See more about that in an earlier post of mine on stackoverflow: <a href="https://stackoverflow.com/a/53898150/2466431">when (not to) allocate memory</a>. In this specific case, remove ALL <code>std::unique_ptr</code> from the Resource class.</p>

<p>Than, we have the rule of 5 you asked about. Again, this has something to do with value semantics.</p>

<pre><code>void f(Class c);         //&lt; Function has it's own copy of Class, similar to being called with f(c.clone()); in Java
void g(Class &amp;c);        //&lt; Function can adapt the original instance
void h(const Class &amp;c);  //&lt; Function gets the original instance, though, ain't allowed to modify (If the original gets modified another way, it will see it)
void i(Class &amp;&amp;c);       //&lt; Function requires you to move the original instance. (Original instance stays in valid but unspecified state)
void j(const Class &amp;&amp;c); //&lt; Really useless signature.
void k(Class *c);        //&lt; Same as Class &amp;c, however, c is allowed to be nullptr
void l(const Class *c);  //&lt; Same as const Class &amp;c, however, c is allowed to be nullptr
</code></pre>

<p>The above are all the different ways a function can be defined and let's the function implementor decide what behaviour the argument should have. This is really important to understand.</p>

<p>So what happens when we call these functions?</p>

<pre><code>Class a;                  //&lt; Class can be changed
const Class b;            //&lt; No changes allowed after construction
Class *c{nullptr};        //&lt; Pointer to a changable class, can be nullptr and can be updated to refer to another class
const Class *d{nullptr};  //&lt; Pointer to a class that can't be changed via d, can be nullptr and can be updated to refer to another class
Class &amp;e = a;             //&lt; See c, can't be nullptr
const Class &amp;f = a;       //&lt; See d, can't be nullptr
</code></pre>

<p>So let's assume we can call this (ignoring the double name of f):</p>

<pre><code>f(a); //&lt; Passes a copy of a to f
g(a); //&lt; g gets a reference to a, can update a
h(a); //&lt; h gets a reference to a, can't update
i(a); //&lt; Doesn't compile, needs to be i(std::move(a))
k(&amp;a);
l(&amp;a);
</code></pre>

<p>(I'll leave the others as exercise to the reader)</p>

<p>What does this have to do with the rule of 5? It requires you to define what the <code>Class</code> executes as code when copied, moved, assigned.</p>

<pre><code>Class(); //&lt; Default constructor (not part of rule of 5)
Class(int i); //&lt; Regular constructor (not part of rule of 5
~Class(); //&lt; Destructor: Gets executed when the class gets destroyed (C++ has deterministic destruction, so you can actually write useful code here, as closing a file handle. Often linked to RAII (You can Google this))

 Class(const Class &amp;other); //&lt; Copy constructor: How should the class be copied, should the new class share some elements with the `other` instance or not? Implementer can decide.
 Class(Class &amp;&amp;other); //&lt; Move constructor: Similar to the copy constructor, however, one is allowed to `steal` from the `other` instance, as long as it leaves it in a valid/unspecified state (aka: program doesn't crash when destructor gets called)

 Class &amp;operator(const Class &amp;rhs); //&lt; Copy assignment: In short: Destructor followed by Copy Construction, with some details for self-assign and optimization.
 Class &amp;operator(Class &amp;&amp;rhs); //&lt; Move assignment: In short: Destructor followed by Move Construction, with some details for self-assign and optimization.
</code></pre>

<p>The rule of 0-or-5 states that you should specify either none or all 5 of:</p>

<ul>
<li>Destructor</li>
<li>Copy constructor</li>
<li>Move constructor</li>
<li>Copy assignment</li>
<li>Move assignment</li>
</ul>

<p>This in order to have something easily understandable for the reader, while ensuring bug-free usage of your classes. (<code>= delete</code> is considered an implementation, stating: This ain't allowed to be used) </p>

<p>More about the rule of 5 on <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c21-if-you-define-or-delete-any-default-operation-define-or-delete-them-all" rel="nofollow noreferrer">the cpp core guidelines</a></p>

<p>Let me stop here with the review, I have some other remarks which I'll keep for myself as I find it more important for you to first grasp these idioms.</p>
    </div>