<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I wonder that I have to add or remove some corner-case handlings for read(), malloc(), or realloc().</p>
</blockquote>

<pre><code>int scan_ps(struct my_proc ***ptr, int (*filter)(const struct my_proc *));
</code></pre>

<p><strong>Make review easier</strong></p>

<p>Allocating to the size of the type rather than the size of an object obliges a reviewer to double check - did code use the right type?  Instead, make code easier to review, code right and maintain.</p>

<pre><code>// ps_list = malloc(sizeof(struct my_proc *)*size);
ps_list = malloc(sizeof *ps_list * size);

// current_ps = malloc(sizeof(struct my_proc));
current_ps = malloc(sizeof *current_ps);
</code></pre>

<p><strong>Why use <code>unsigned</code>?</strong></p>

<p>With array sizing and indexing, <code>size_t</code> is the <a href="https://en.wikipedia.org/wiki/Goldilocks_principle" rel="nofollow noreferrer">Goldilocks</a> type, neither too narrow nor too wide.</p>

<pre><code>// unsigned int size = 16;
size_t size = 16;
</code></pre>

<p><strong>Questionable type</strong></p>

<p>Why use <code>int</code> when <code>read()</code> returns <code>ssize_t</code>?</p>

<pre><code>// int n;
ssize_t n;
n = read(fd, buf, MAX_LEN_STR);
</code></pre>

<p><strong>Questionable code</strong></p>

<p>Why potentially shorted <code>n</code> and not report this as an error?  Just read less.</p>

<pre><code>// n = read(fd, buf, MAX_LEN_STR);
// n = (MAX_LEN_STR - 1) &gt; n ? n : (MAX_LEN_STR - 1);

n = read(fd, buf, MAX_LEN_STR - 1);
// or better
n = read(fd, buf, sizeof buf - 1);
</code></pre>

<hr>

<p><strong>Proper use of <code>goto</code></strong></p>

<p><code>goto</code> is often mis-used.  This is an acceptable usage.</p>

<p><strong>Why <code>MAX_LEN_STR</code>?</strong></p>

<p>For a max path length, I'd expect <a href="https://stackoverflow.com/q/9449241/2410359"><code>PATH_MAX</code></a></p>

<pre><code>// char path[MAX_LEN_STR];
char path[PATH_MAX /* maybe + 1 */];
</code></pre>

<p><strong>Why 256?</strong></p>

<p>Avoid naked magic numbers as in <code>char cmdline[256];</code>.  Perhaps <code>char cmdline[MAX_LEN_STR];</code>?</p>

<p><strong>Why <code>MAX_LEN_STR</code>?</strong></p>

<p>In limiting string copy, best to use the size of the destination and not some other constant.</p>

<pre><code>// strncpy_v2(current_ps-&gt;cmdline, buf, MAX_LEN_STR);
strncpy_v2(current_ps-&gt;cmdline, buf, sizeof current_ps-&gt;cmdline);
</code></pre>

<p><strong>Missing error report</strong></p>

<p><code>strncpy_v2()</code> does not indicate it failed to copy a complete string. With all the other good error checking, it is curious code does not report this.  If failure cannot occur because of the construction of code, why then have <code>strncpy_v2()</code> versus simple <code>strcpy()</code>?  Being "safe" by not over-writing memory is good, yet not reporting insufficiencies is not.</p>

<p><strong>Sign and potential print specifier mis-match</strong></p>

<p>A <code>pid_t</code> is <em>some</em> signed type.  <a href="http://pubs.opengroup.org/onlinepubs/009696699/basedefs/sys/types.h.html" rel="nofollow noreferrer">Ref</a>.  Best to use signed math and cast to a wide <em>signed</em> type to print.</p>

<pre><code>// pid = atoi(dp-&gt;d_name);
pid = atoll(dp-&gt;d_name);

// snprintf(path, sizeof(path), "/proc/%u/cmdline", pid);
snprintf(path, sizeof(path), "/proc/%jd/cmdline", (intmax_t) pid);
// or
snprintf(path, sizeof(path), "/proc/%lld/cmdline", (long long) pid);
</code></pre>

<hr>

<p>Other stuff</p>

<p><strong>What is <code>*ptr</code> in failure?</strong></p>

<p>When <code>scan_ps()</code> fails, returns -1, consider setting <code>*ptr = NULL;</code></p>

<p><strong>Lose a <code>*</code></strong></p>

<p>Further, consider using re-architect and using a return value of <code>NULL</code> as an error indication.  Otherwise the return value is a pointer to a <code>NULL</code> terminated array.  You do lose one <code>*</code>, but I'd say that is good.</p>

<pre><code>struct my_proc **scan_ps(int (*filter)(const struct my_proc *));
</code></pre>

<p><strong>Why define <code>FALSE, TRUE</code>?</strong></p>

<p>Instead, use <code>stdbool.h</code>.</p>

<pre><code>// #define FALSE               (0)
// #define TRUE                (!FALSE)
//   return TRUE;

#include &lt;stdbool.h&gt;
...
   return true;
</code></pre>
    </div>