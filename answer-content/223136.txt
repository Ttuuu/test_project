<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>SimpleList</code> should be named <code>ForwardList</code> or similar to signal that it is only singly-linked.</p></li>
<li><p>Why is <code>SimpleList::Node</code> public? It's a bona-fide implementation-detail AFAICS.</p></li>
<li><p>I prefer always putting the links first, as it marginally helps with uniformity, especially when getting to implement the iterator-interface.</p></li>
<li><p>Putting the dtor in the middle of the ctors is curious. Common order is ctors, op=, dtor, others, but those with the same name are virtually always grouped together.</p></li>
<li><p>I have never seen a <code>std::initializer_list</code>-ctor marked <code>explicit</code>. I doubt it will work as advertised.</p></li>
<li><p>I'm missing construction from iterators.</p></li>
<li><p>A proper iterator-interface greatly simplifies comparison, and output to stream. With construction from iterators, copy-ctor and list-ctor also become obvious.</p></li>
<li><p>Using ctor-delegation is quite useless when the delegatee and the empty mem-initializer-list do the same thing. Though it doesn't hurt.</p></li>
<li><p>Your attempt at hungarian notation is not appreciated. It doesn't make the code easier to read, and you are very inconsistent in how you apply it. I will from now on pretend you desisted.</p></li>
<li><p><code>clear()</code> can be simplified. As a bonus, the compiler will have an easier time optimising it:</p>

<pre><code>void clear() noexcept {
    count = 0;
    auto p = std::exchange(head, nullptr);
    while (p)
        delete std::exchange(p, p-&gt;next);
}
</code></pre></li>
<li><p>Your op== is surprising. Specifically, it doesn't consider two empty lists equal.</p></li>
<li><p>Is there any kind of pattern behind choosing return-type-deduction or being explicit for the members? Because it seems pretty arbitrary.</p></li>
<li><p>Your move-ctor relies on the compiler fully inlining and then optimizing it for best performance, but that should be fine.</p></li>
<li><p>You shouldn't import big amorphous namespaces into the global scope, as it can break the build or change the codes meaning at the drop of a hat. As you only did it in the test-code, the damage should at least be pretty well-contained.</p></li>
</ol>
    </div>