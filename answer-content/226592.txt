<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the <code>request</code> method the <code>exception</code> variable really doesn't have to
be set before using it, just inline it and make the code more succinct:</p>

<pre><code>def request(self, endpoint, params=None):
    response = self.session.get(endpoint, timeout=TIMEOUT, params=params)
    res_code = response.status_code
    if res_code != API_OK:
        raise API_ERRORS[res_code]
    return response.json()
</code></pre>

<p>Also, I'm guessing <code>API_ERRORS[res_code]</code> will also work and be more
expected for any reader.</p>

<p>In the <code>query_match</code> method <code>res</code> doesn't have to be initialised, that's
not pythonic actually:</p>

<pre><code>def query_match(self, match_id, shard='default'):
    url = f'{SHARD_URL}/{shard}/matches/{match_id}'
    return Match(self.request(url))
</code></pre>

<p>The <code>process_matches</code> method could be a bit simpler:</p>

<pre><code>def process_matches(self, list_matches):
    ret = []
    for m_i in list_matches:
        ret.append(build_json(self.query_match(m_id)))
    mongo.insert_many('matches', ret)
</code></pre>

<p>Or, there's the option to go for a less imperative list comprehension
too:</p>

<pre><code>def process_matches(self, list_matches):
    ret = [build_json(self.query_match(m_id))
           for m_i in list_matches]] 
    mongo.insert_many('matches', ret)
</code></pre>

<p>Regarding your second question, if I read it right, no, not a good idea
from what I can tell from the code, leaving <code>Match</code> as a pure data
object will serve you better in the long run.  It's better if the two
responsibilities aren't mixed.  It'll also make it more clear what's
being tested in your test cases if you can clearly distinguish between
something that just holds the data and a API client (wrapper) that does
networking (for example).</p>
    </div>