<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Does the above comply with the Dependency-Inversion Principle? I am ..</p>
</blockquote>

<p>Yes, because:</p>

<ul>
<li>BLL defines domain classes and interfaces for DAL to implement</li>
<li>BLL does not depend on DAL</li>
<li>DAL implements BLL-provided interface and uses its domain classes</li>
</ul>

<hr>

<blockquote>
  <p>In the Orchestration.cs and FruitService.cs classes I've tried to use
  Dependency Injection - is my implementation correct?</p>
</blockquote>

<p>You have coded in the dependency.</p>

<blockquote>
  <p><code>FruitService fs = new FruitService(fruitRepository);</code></p>
</blockquote>

<p>Dependency '<strong>Injection</strong>' means you don't have to code it in. Instead, you should use a <strong>Inversion-of-Control</strong> (IoC) container to resolve registered classes with their dependencies.</p>

<p>A pseudo usage of an IoC container:</p>

<p>register types</p>

<pre><code>container.Register&lt;FruitService&gt;().AsSingleInstance();
container.Register&lt;FruitRepository&gt;().AsImplementedInterfaces();
</code></pre>

<p>get the repository (if you need to work directly with a repository)</p>

<pre><code>var repository = container.Resolve&lt;IRepository&lt;Fruit&gt;&gt;();
</code></pre>

<p>get the service (the repository is injected because it got registered)</p>

<pre><code>var service = container.Resolve&lt;FruitService&gt;(); 
</code></pre>
    </div>