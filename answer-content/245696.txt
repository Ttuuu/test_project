<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>float</code> vs. <code>double</code></strong></p>
<p>Little reason to use <code>float</code> here, suggest <code>double</code> instead.  Save <code>float</code> for selective space/speed issues - which are not present here.</p>
<p>If code uses <code>float</code> variables, use <code>float</code> functions like <code>sinf(), log10f(), powf(), ...</code> than <code>sin(), log10(), pow()</code>.</p>
<p><strong>Printing floating point</strong></p>
<p>Rather than <code>printf("%f", ans)</code>, print using <code>"%g"</code> or <code>"%e"</code>.  When values are much smaller than 1.0, <code>"%f"</code> prints as <code>0.000000</code> and large values with many uninformative digits.</p>
<pre><code>// printf("%f", ans);
printf("%g", ans);
</code></pre>
<p><strong>Form 1 scale factor</strong></p>
<p><code>ans * 180 / PI</code> can differ from <code>ans * (180 / PI)</code>.  First performs a multiplication and division at run time.  2nd multiplies once at run-time and 1 division <em>at compile time</em>.
Which one do you want?</p>
<p>I recommend <code>ans * (180 / PI)</code> here.</p>
<p>Advanced: With <code>sin(Num1 * PI / 180)</code> though, consider the advantages of <a href="https://stackoverflow.com/q/31502120/2410359">range reduction in degrees</a> first.</p>
<p><strong>Call <code>srand(time(NULL));</code> once</strong></p>
<p>Seeding is only needed once per program run.</p>
<p><strong>Use protection</strong></p>
<p>User input is evil.  Watch out for bad input.</p>
<pre><code>//scanf("%f", &amp; Num1);
if (scanf("%f", &amp; Num1) != 1) { Handle_Nonnumeric_Input(); ... }
if (Num1 &lt;= 0.0) { Handle_Bad_Domain_Input(); ... }

// Now OK to call log()
ans = log(Num1);

...

if (Num1 != 0)  { Handle_Bad_Domain_Input(); ... }
ans = pow(Num2, 1 / Num1);
</code></pre>
<hr>
<p><strong>Advanced: FP constant precision</strong></p>
<p>Below is not much concern here, given the lower precision of printing, but is for a more advanced uses of FP code.</p>
<p>Depending on <code>FLT_EVAL_METHOD</code>, code can evaluate expressions at higher than the usual precision, perhaps even as <code>long double</code>.</p>
<p>Consider the effects of using the various <code>PI</code> definitions.</p>
<pre><code>#define PI_a 3.14159265358979323846  /* OP's */
#define PI_b 3.14159265358979323846264338327950288420  /* 3 more than LDBL_DECIMAL_DIG */
//           1 23456789012345678901234567890123456789
#define PI_c (22.0/7) // not a serious choice, but illustrative of a coarse approximation
#define PI_d acos(-1) // Let the implementation provide the best pi
</code></pre>
<p>Avoid using insufficient precision.   So what is a reasonable upper bound?</p>
<p>I recommend to use 3 digits more than <code>LDBL_DECIMAL_DIG</code>.  For <code>long double</code>, encoded as a very precise <a href="https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format#IEEE_754_quadruple-precision_binary_floating-point_format:_binary128" rel="nofollow noreferrer">binary128</a>, this is 36 + 3.</p>
<p>Notes: <code>LDBL_DECIMAL_DIG</code> is the round trip <code>long double</code> to text to <code>long double</code> needed precision.  IEEE math allows implementations to only use the first <code>LDBL_DECIMAL_DIG + 3</code> significant digits on evaluating decimal floating point text.</p>
<p>For me I would use <code>M_PI</code> (many systems provide this pi) if available or a high precision one and let the compiler approximate as needed.</p>
<pre><code>#ifdef M_PI
#define PI M_PI
#else
#define PI 3.14159265358979323846264338327950288420   
#endif
</code></pre>
    </div>