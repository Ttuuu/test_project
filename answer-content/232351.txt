<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, you can avoid the iterated conditional operations by processing all data as arrays.</p>

<p>Code: (<a href="https://3v4l.org/oG0t7" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$car = json_decode(
    json_encode(
        array_replace_recursive(
            (array)$car, 
            ['other' =&gt; ['exterior' =&gt; $exteriorProperties]]
        )
    )
);
</code></pre>

<p>When only coverting the top level from object-type to array-type you can just cast it with <code>(array)</code>. If you need to convert all levels -- json encode the whole object, then decode that string to an array.  When you are done processing, use <code>json_</code> functions to revert the data to object-type.</p>

<p>I still find this a little clunky (perhaps just as clunky as your conditional approach).  The benefit in the above is in the recursion; if your data depth changes, you won't need to alter the processing script.  Ask yourself if you <em>actually</em> need to use an object.  If coding is simplified with a different data-type, perhaps have a rethink/refactor.</p>

<p>P.s. DEFINITELY don't write the stfu operator (<code>@</code>) into your code.  In nearly all implementations, the technique is avoidable (this is one of those cases) and projects with such syntax are categorized/presumed as low quality by knowledgeable developers.</p>
    </div>