<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>EDIT</h3>

<p>the more I think about it, the more it seems obvious that a parser would be more adapted to this problem than a state machine. Unfortunately, I don't know much about writing parsers...</p>

<h3>ORIGINAL ANSWER</h3>

<p>Maybe you could try to create one class per state :</p>

<pre><code>class TelnetState

  include Telnet::Codes
  attr_reader :plain, :reply

  def initialize( plain = '', reply ='' )
    @plain = plain
    @reply = reply
  end

  def accept_char( char )
    raise "Abstract Method - not implemented"
  end

end

class TelnetIDLEState &lt; TelnetState

  def accept_char( char )
    if char == IAC 
      TelnetIACState.new( plain, reply )
    else
      @plain &lt;&lt; char
      self        
    end
  end

end

class TelnetIACState &lt; TelnetState

   def accept_char( char )
     update_plain!( char )
     next_state( char )
   end

   private

   def update_plain!( char )
     return if [WILL, WONT, DO, DONT, IP,DM].include? char
     @plain &lt;&lt; char == IAC ? char : IAC + char
   end

   def next_state( char ) 
     next = case char
              when WILL then TelnetWILLState
              when WONT then TelnetWONTState
              when DO   then TelnetDOState
              when WONT then TelnetDONTState
            end
     next ? next.new( plain, reply ) : self
   end

 end
</code></pre>

<p>... and so on, then : </p>

<pre><code>class Telnet

  def telnet_state_machine( command )
    state = command.each_char.inject( TelnetIDLEState.new ) do |state, char|
              state.accept_char( char )
            end
    @plain, @reply = state.plain, state.reply
  end

end
</code></pre>

<p>Of course, there is certainly a way to improve that... just an idea. (I'm not really familiar with telnet protocol, either - so I did this a bit blindfolded)</p>
    </div>