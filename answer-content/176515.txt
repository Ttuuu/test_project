<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Benefits of a <code>TreeMap</code></h3>

<p>The <code>TreeMap</code> is not useful at all in this implementation.</p>

<p>Roughly speaking, these are the operations and their performance in which the <code>TreeMap</code> is involved:</p>

<ul>
<li>Cancel reservation, get reservation: \$O(\log n)\$</li>
<li>Methods that sort reservations: \$O(n \log n)\$</li>
<li>Other methods (make reservation): \$O(n)\$, because they iterate over all reservations</li>
</ul>

<p>How could it be better?</p>

<ul>
<li>Cancel reservation, get reservation could be \$O(1)\$ using a <code>HashMap</code></li>
<li>Make reservation should not have to check all reservations if they are sorted by start and end date, then you could use binary search to check at most \$\log n\$ entries</li>
<li>Further optimizations are possible if you know something about the usage patterns. For example, if the sorting methods are called more often than the other methods, then it could make sense to keep sorted lists, so that they can be returned immediately. This will be at the expense of using extra memory.</li>
</ul>

<h3>A logical problem</h3>

<p>What if there are two rooms with the following reservations:</p>

<ul>
<li>Room 1: January to March, and May to July</li>
<li>Room 2: not booked :-)</li>
</ul>

<p>That is, there are two rooms, two reservations, but one of the rooms is unused.
Now, if you call <code>makeReservation</code> to book from February to June,
it will count 2 overlaps, equal to the number of rooms,
and reject the reservation.</p>

<h3>Assigning unique ids</h3>

<p><code>Reservation</code> instances should have unique ids,
to prevent accidental overwriting of data in the <code>HotelManager</code> implementation.
Generating random numbers even in a very wide range is not a solid solution,
because even if the probability of collisions is small,
they can happen,
and when they will,
data can be lost.
Such program cannot be trusted.</p>

<p>A better solution would be to use an auto-incrementing id.
This could be as simple as an <code>AtomicInteger</code> instance in a static field.
But preferably not in the same class that already has the responsibility of storing some data,
such as the <code>Reservation</code> class.
It would be better to have a dedicated class, a factory,
that is in charge of creating objects with appropriate unique ids.</p>

<h3>Input validation</h3>

<p>The constructor of <code>Reservation</code> doesn't validate its parameters.
You could create a <code>Reservation</code> where the start date comes after the end date.</p>

<p>The factory I mentioned in the previous section could be a good place for this validation too.
It could effectively prevent the creation of invalid <code>Reservation</code> instances.</p>

<h3>Unnecessary object creation</h3>

<p>I assume that the comparator classes inside <code>Comperators</code> don't have a state.
Hopefully.
And in that case you don't need to create a new instance every time you want to sort records.
You could create static final comparator instances,
they should be safe to reuse.</p>

<h3>Duplicated code</h3>

<p>The methods that sort reservations by price and date have most of their code duplicated.
The common code should be in a private helper method.</p>
    </div>