<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When you find a prime number, say 7, you begin crossing out all odd multiples of 7 from the <code>primeCandidates</code> vector.  You do this by incrementing <code>index += loop</code>, where <code>loop</code> is the prime number, and but <code>primeCandidates</code> only holds odd candidates, so the step size in natural numbers would be <code>2*loop</code>.</p>

<p>The issue is you start by removing <code>7</code> from <code>primeCandidates</code>, then <code>21</code>, then <code>35</code>.  At this point in the sieve, you've already eliminated multiples of <code>3</code> and <code>5</code>, so marking off <code>3*7=21</code> and <code>5*7=35</code> is just busy work.  And marking off <code>1*7=7</code> is just pointless.  What you should be doing is starting to eliminate at <code>7*7=49</code>.  It saves only three eliminations during the <code>7</code> loop, but the saving get more substantial as the prime gets larger.  For instance, when you get to <code>199</code>, you wouldn't eliminate <code>1*199</code>, <code>3*199</code>, <code>5*199</code>, <code>7*199</code>, ... <code>191*199</code>, <code>193*199</code>, <code>195*199</code>, <code>197*199</code>.  You would just start at <code>199*199</code> and go up from there.</p>

<p>Code change:</p>

<pre><code>// Now strain out all factors of the prime we just found, starting with prime^2
index = loop * loop / 2
</code></pre>

<hr>

<p><code>std::vector&lt;std::size_t&gt;</code> is overkill for <code>primeCandidates</code>.  You only ever store <code>1</code> or <code>0</code>, so allocating 4 or 8 bytes for each candidate is wasting memory.</p>

<p><code>std::vector&lt;char&gt;</code> would reduce the memory load to 1 byte per candidate.</p>

<p><a href="http://www.cplusplus.com/reference/bitset/bitset/" rel="noreferrer"><code>std::bitset&lt;N&gt;</code></a> will reduce this to 1 bit per candidate.  Alternately, the vector specialization <a href="http://www.cplusplus.com/reference/vector/vector-bool/" rel="noreferrer"><code>std::vector&lt;bool&gt;</code></a> will also give 1 bit per candidate, with a non-compile-time fixed number of bits.</p>
    </div>