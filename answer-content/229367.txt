<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Already answered, but as <em>task</em>, one probably fares better with not introducing too many extra structures.</p>

<p>I'll immediately give an iterative version. It shows some improvements that could also be made to your recursive solution.</p>

<p>The recursive solution is fine, though seemingly needing a call stack the size of the list. However tail-recursion can be optimized by a good compiler (made iterative).
The iterative version needs an extra variable to hold a temporary result (the recursive call's result).</p>

<pre><code>public static &lt;T&gt; void reverse(List&lt;T&gt; list) {
    if (list.size() &gt; 1) { // Not needed, heuristic optimisation
        //List&lt;T&gt; reversed = new ArrayList&lt;&gt;(list.size());
        List&lt;T&gt; reversed = new LinkedList&lt;&gt;();
        while (!list.isEmpty()) { // Or list.size() &gt; 1
            T t = list.remove(0);
            reversed.add(t);
        }
        list.addAll(reversed);
    }
}
</code></pre>

<blockquote>
  <p>I want to know if this is an efficient way of reversing a list</p>
</blockquote>

<p>Already answered by others, but it could be astonishly good.
Nicer would be if the <code>list</code> was not modified <em>in-situ</em>, but substituted by a new List,
as then the <code>list.addAll(reversed)</code> could be exchanged for <code>return reversed;</code>.</p>

<blockquote>
  <p>Is this working for every list as input?</p>
</blockquote>

<p>Yes, though the list must not be operated upon at the same time.</p>

<p>There are some lists, immutable lists (that are not allowed to be changed) or lists that are backed by arrays (strudcturally immutable), that will throw an error.</p>
    </div>