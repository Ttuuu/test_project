<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall this is good, but there are few things we can do improve this and make it more "modular".</p>

<p>Lets say someone wants to use your component and instead of an array of player objects, they have just an array of player names, this introduces a couple of problems.</p>

<ol>
<li>The prop to pass this in the list is called <code>objects</code> which doesn't reflect the type of data that they have and their list is long so they can't manually change it.</li>
<li>Your component is expecting the data passed in <code>objects</code> to be an array of objects.</li>
</ol>

<p>How can we resolve this?</p>

<p>Lets first rename the prop from <code>objects -&gt; data</code>, this is better because it generalizes what this prop receives and the person using this can possibly assume you are able to handle multiple data types.</p>

<p>Next, we should update places where we are assuming the data to be an object and instead check to see if it is an object before handling it. One example is in <code>&lt;MultiSelect /&gt;</code>, where you are iterating over each item. We can change that to be:</p>

<pre><code>class MultiSelect extends React.Component {
  render() {
    return (
      &lt;ul&gt;
        {this.props.data.map((item, index) =&gt; (
          &lt;li onClick={() =&gt; this.props.onClickFunction(index)}&gt;
            {typeof item === "object" ? item.name : item}
          &lt;/li&gt;
        ))}
      &lt;/ul&gt;
    );
  }
}
</code></pre>

<p>Now we can display data from an array of strings!</p>

<p>But what if the person using your component <em>was</em> using an array of objects? Unfortunately there is no documentation so when he created the objects he used the property name <code>firstName</code> instead of <code>name</code>. This now breaks the code we re-wrote above, but we can fix it...</p>

<p>Lets set a new prop on <code>&lt;DoubleMultiselect /&gt;</code> called something like <code>nameField</code>, which would be a string that is equal to the object property to display in the list.</p>

<p>So now wherever we were accessing the <code>name</code> property of the player we can replace it with <code>this.props.nameField</code>, re-writing the code above can now be:</p>

<pre><code>class MultiSelect extends React.Component {
  render() {
    return (
      &lt;ul&gt;
        {this.props.data.map((item, index) =&gt; (
          &lt;li onClick={() =&gt; this.props.onClickFunction(index)}&gt;
            {typeof item === "object" ? item[this.props.nameField]: item}
          &lt;/li&gt;
        ))}
      &lt;/ul&gt;
    );
  }
}
</code></pre>

<p>We've now added support for dynamic data, allowing anyone with any type of data to use this!</p>
    </div>