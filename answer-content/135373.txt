<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Changes I'd make, from the top down:</p>

<ul>
<li>Use <a href="https://docs.python.org/3.5/library/string.html" rel="noreferrer"><code>string</code></a> with <code>enumerate</code> to make the dictionary. Rather than manually making one.</li>
<li><code>letters</code> is a constant, so use <code>LETTERS</code>.</li>
<li>Make a new function to change the layout of an IBAN and change it to a number.</li>
<li>Rename <code>chech_validation_chars_iban</code> to the name <code>generate_iban_check_digits</code> as it's not a check, it's a transform.</li>
<li>Change the format to use strings, <code>{:0&gt;2}</code>, and remove the if.</li>
<li>Change <code>validate_iban</code> to check if it's a valid IBAN, and so return a boolean.</li>
<li>Use <code>and</code> to reduce the amount of ifs.</li>
</ul>

<p>This resulted in:</p>

<pre><code>import string
LETTERS = {ord(d): str(i) for i, d in enumerate(string.digits + string.ascii_uppercase)}


def _number_iban(iban):
    return (iban[4:] + iban[:4]).translate(LETTERS)


def generate_iban_check_digits(iban):
    number_iban = _number_iban(iban[:2] + '00' + iban[4:])
    return '{:0&gt;2}'.format(98 - (int(number_iban) % 97))


def valid_iban(iban):
    return int(_number_iban(iban)) % 97 == 1


if __name__ == '__main__':
    my_iban = 'RO13RZBR0000060007134800'
    if generate_iban_check_digits(my_iban) == my_iban[2:4] and valid_iban(my_iban):
        print('IBAN ok!\n')
    else:
        print('IBAN not ok!\n')
</code></pre>

<p>There is one glairing problem with this, the specification states that it allows both upper and lowercase input:</p>

<blockquote>
  <p>Replace the letters in the string with digits, expanding the string as necessary, such that A or a = 10, B or b = 11, and Z or z = 35. Each alphabetic character is therefore replaced by 2 digits </p>
</blockquote>

<p>However we only allow uppercase. To amend this I'd change the letters dict to include the lowercase letters.
But makes the code a little harder to read, and not as clean.
And so the cleanest way would probably be to use <a href="https://docs.python.org/3.5/library/itertools.html#itertools.chain" rel="noreferrer"><code>itertools.chain</code></a>, with the method we're using now.</p>

<pre><code>_LETTERS = chain(enumerate(string.digits + string.ascii_uppercase),
                 enumerate(string.ascii_lowercase, 10))
LETTERS = {ord(d): str(i) for i, d in _LETTERS}
</code></pre>
    </div>