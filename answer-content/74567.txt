<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Discussing performance of methods which are almost entirely in the main method, is sort of pointless. Java performance requires hot-spot compiling, and that does not really happen until methods are run many, many times. The main method is run just once, so is seldom compiled efficiently. Perhaps it's only ever interpreted.</p>

<p>In terms of efficiency, the algorithm you are using is documented as being the best for this puzzle. Essentially there is no better way.</p>

<p>Your subsequent question about how to incorporate additional multiples is complicated....</p>

<p>the way the algorithm works right now, is to calculate the sum of multiple sequences. One sequence is:</p>

<pre><code>3, 6, 9, 12, 15, ...
</code></pre>

<p>The second sequence is:</p>

<pre><code>5, 10, 15, 20, .....
</code></pre>

<p>The algorithm works by taking the sum of the two sequences, and subtracting the 'double-count', those values that are double-counted because they intersect (like 15, above).</p>

<p>If you have multiple sequences, say, 3, 5, and 7, you will need to sum up all the individual sequences, then subtract the double, and triple counts.</p>

<p>You will need to subtract the intersection with 3*5 (15), as well as 3*7 (21), and also the triple-add 3*5*7 (105)</p>

<p>As you add numbers in to the multiples, you will need to find more of the combinations of parameters that intersect, and need to be subtracted.</p>
    </div>