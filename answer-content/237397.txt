<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of using nested <code>for</code> loops for your case - Python provides a more flexible and performant features with <code>itertools</code> module, suitably - <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations(iterable, r)</code></a> which returns generator of <code>r</code> length subsequences of elements from the input <code>iterable</code>.</p>

<p>Besides, don't forget about good naming: <code>arraySum</code> is not a good one (at least <code>array_sum</code>). I'd suggest <code>check_sum</code> as alternative.</p>

<p>Optimized version:</p>

<pre><code>import timeit
from itertools import combinations


def check_sum(input_lst, test_lst):
    search_set = set(test_lst)
    for pair in combinations(input_lst, 2):
        if (pair[0] + pair[1]) in search_set:
            return True
    return False


lst1 = [-1, 8, 3]
lst2 = [3, 7, 2]
</code></pre>

<hr>

<p>Now, let's compare <em>running time</em> performance between <code>arraySum</code> and <code>check_sum</code>:</p>

<pre><code>print(timeit.timeit('arraySum(lst1, lst2)', globals=globals(), number=1))
print(timeit.timeit('check_sum(lst1, lst2)', globals=globals(), number=1))
</code></pre>

<p>The output:</p>

<pre><code>2.621993189677596e-06
1.6039994079619646e-06
</code></pre>
    </div>