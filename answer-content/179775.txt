<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing I would suggest is to avoid as much as possible depending on the <code>DoCmd</code> object. The <code>DoCmd</code> object is essentially replicating the actual user action as if you had clicked on a button via the UI, with all the dialogs, etc. that comes with it. </p>

<p>For the purpose of executing a SQL, I recommend that you use the <code>Database.Execute</code> method, remembering to use <code>dbFailOnError</code> flag and very likely <code>dbSeeChanges</code> if your Oracle tables uses something equivalent to auto-increment for its primary key. So instead of</p>

<pre><code>DoCmd.Close acQuery, "sptROAD_INSP"
DoCmd.OpenQuery strSPTName
</code></pre>

<p>You should want to do something like this:</p>

<pre><code>CurrentDb.Execute strSPTName, dbFailOnError Or dbSeeChanges
</code></pre>

<p>This does essentially the same thing but without all the extraneous UI baggages that the <code>DoCmd</code> brings to the table. It will NOT prompt you to confirm if you want to make changes, and does NOT require you to use <code>DoCmd.SetWarnings</code> to suppress the unwanted UI messages associated with <code>OpenQuery</code> or <code>RunSQL</code> methods which are member of the <code>DoCmd</code> object.</p>

<p>However, <code>Execute</code> method is only appropriate when it's in fact a statement that is not intended to return results. If you expect results (e.g. the <code>qdf.ReturnRecords</code> is set to <code>true</code>), you would use <code>OpenRecordset</code> method. Therefore, you could revise your function so that it does this (untested aircode):</p>

<pre><code>If qdf.ReturnRecords Then
  Set Results = qdf.OpenRecordset(dbOpenDynaset, dbSeeChanges)
Else
  qdf.Execute dbFailOnError Or dbSeeChanges
End If
</code></pre>

<p>assuming that you have a variable named <code>Results</code> that is a `DAO.Recordset type.</p>

<p>Next, you are writing SQL raw. Unfortunately, a passthrough query cannot be properly parameterized. For best protection against SQL injection, you might want to consider using ADO instead of DAO, and if possible use OLEDB provider for Oracle (note that there are multiple providers, some by Oracle themselves, other by Microsoft - I can't say which is better; experimenting is needed). Note that you are not restricted to using ADO exclusively; you can use ADO in VBA code and DAO for Access form binding. </p>

<p>If for some reasons you cannot use ADO and must use DAO, then you should at least consider writing functions to prepare the parameters so that all strings are properly delimited, and that empty values in a textbox will result in a <code>NULL</code> or maybe <code>''</code>, depending on your needs. </p>
    </div>