<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's always worth tidying up indentation and removing random blank lines (e.g. after <code>{</code>).</p>

<hr>

<p>Naming: in C# it's conventional that method names are in UpperCamelCase, but even if you choose not to follow the convention it's important to be consistent. Here <code>Heapify</code> follows the convention but <code>insert</code> doesn't.</p>

<p>The name <code>Heapify</code> usually refers to taking an unstructured array of data and structuring it as a heap in linear time. The method implemented here should probably have a name like <code>UpHeap</code>.</p>

<hr>

<p>It's not clear how <code>insert</code> is supposed to be used. Is it called passing the root of the tree? And where does <code>count</code> come from? It seems to me that <code>BinaryHeap</code> should be <code>BinaryHeapNode</code> and should be a private inner class of a public <code>BinaryHeap</code> which exposes <code>public void Insert(int value)</code>.</p>

<hr>

<blockquote>
<pre><code>        int parent = (count - 1)/2;
</code></pre>
</blockquote>

<p>What does this represent? Elsewhere <code>parent</code> is a <code>BinaryHeap</code>, and it's obvious what it means, but as far as I can guess this variable is actually the size of the right subtree.</p>

<hr>

<blockquote>
<pre><code>            if (((parent == 0) &amp;&amp; (node.left == null)) || (parent % 2 == 1))
</code></pre>
</blockquote>

<p>Why? I need some comments somewhere in the code to say how the tree is structured. This looks like an attempt to keep it balanced, but I'm not convinced that it works. (I suspect it should check the parity of <code>count</code> rather than <code>parent</code>). Maybe if I knew precisely what it was trying to do I could be convinced.</p>

<hr>

<p>I don't understand the necessity of all those asserts, but IMO it would be cleaner to remove the duplication by pulling them out of the cases as</p>

<pre><code>            if (node.left != null)
            {
                Debug.Assert(node.data &lt; node.left.data);
            }
            if (node.right != null)
            {
                Debug.Assert(node.data &lt; node.right.data);
            }
</code></pre>

<p>or</p>

<pre><code>            Debug.Assert(node.left == null || node.data &lt; node.left.data);
            Debug.Assert(node.right == null || node.data &lt; node.right.data);
</code></pre>

<hr>

<p>The recursive <code>insert</code> calls <code>Heapify</code> at each level that it touches. <code>Heapify</code> bubbles up. That means there's unnecessary duplication of work here.</p>

<hr>

<p>Why is <code>Heapify</code> public?</p>

<hr>

<pre><code>if (condition)
{
    DoStuff();
}
else
{
    if (otherCondition)
    {
        OtherStuff();
    }
}
</code></pre>

<p>creates unnecessary indentation and vertical spacing, both of which make it harder to read the code. Rewrite as</p>

<pre><code>if (condition)
{
    DoStuff();
}
else if (otherCondition)
{
    OtherStuff();
}
</code></pre>
    </div>