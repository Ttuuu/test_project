<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@iRohitBhatia your original solution creates an hash map without needing it and repeats the "sum" operation in the 2nd iteration also without need. </p>

<p>Here you have the Swift version I did code to solve it initially:</p>

<pre><code>func twoSum(_ nums: [Int], _ target: Int) -&gt; [Int] {
    for i in 0..&lt;(nums.count-1) {
        let matchValue = target - nums[i]

        for j in (i+1)..&lt;nums.count {
            if nums[j] == matchValue {
                return [i, j]
            }
        }
    }

    return []
}
</code></pre>

<p>which I then translated to this JavaScript code:</p>

<pre><code>var twoSum = function(nums, target) {
    for (let i = 0; i &lt; (nums.length - 1); i++) {
        let matchValue = target - nums[i];

        for (let j = i+1; j &lt; nums.length; j++) {
            if (nums[j] == matchValue) {
                return [i, j];
            }
        }
    }

    return [];
};
</code></pre>

<p>and after submitting it on LeetCode I got the following results:</p>

<p><a href="https://i.stack.imgur.com/0QYe6.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/0QYe6.png" alt="enter image description here"></a></p>
    </div>