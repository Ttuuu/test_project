<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To start, let's fix the PEP8 style errors using any PEP8 checker:</p>

<pre><code>counts = 0
ans = 0
while(ans == 0):
    s = 0
    for i in range(counts, len(arr)):
        s += int(arr[i]/(i+1-counts))
        if(s &gt; M):
            break
    if((i+1) == len(arr) and s &lt;= M):
        print(counts)
        ans = 1
    counts += 1
</code></pre>

<hr>

<p>The parentheses around the conditions are also not usual Python style:</p>

<pre><code>counts = 0
ans = 0
while ans == 0:
    s = 0
    for i in range(counts, len(arr)):
        s += int(arr[i]/(i+1-counts))
        if s &gt; M:
            break
    if (i+1) == len(arr) and s &lt;= M:
        print(counts)
        ans = 1
    counts += 1
</code></pre>

<hr>

<p>The inner loop uses <code>break</code>; there's no reason that the outer loop can't also, and that would simplify things slightly:</p>

<pre><code>counts = 0
while True:
    s = 0
    for i in range(counts, len(arr)):
        s += int(arr[i]/(i+1-counts))
        if s &gt; M:
            break
    if (i+1) == len(arr) and s &lt;= M:
        print(counts)
        break
    counts += 1
</code></pre>

<hr>

<p>When we get to the line</p>

<pre><code>    if (i+1) == len(arr) and s &lt;= M:
</code></pre>

<p>the first part of the condition can only fail because we called <code>break</code> in the inner loop, and in that case the second part of the condition also fails, so we can simplify that line to</p>

<pre><code>    if s &lt;= M:
</code></pre>

<hr>

<p>Python has integer division: it's just that you need to use <code>//</code> instead of <code>/</code>. So</p>

<pre><code>        s += int(arr[i]/(i+1-counts))
</code></pre>

<p>can be changed to</p>

<pre><code>        s += arr[i] // (i+1-counts)
</code></pre>

<p>for readability.</p>

<hr>

<p>It would be more Pythonic to operate on a slice rather than a <code>range</code> of indices. I.e. instead of</p>

<pre><code>    for i in range(counts, len(arr)):
        s += arr[i] // (i+1-counts)
</code></pre>

<p>we would have</p>

<pre><code>    for i, z_i in enumerate(arr[counts:]):
        s += z_i // (i+1)
</code></pre>

<hr>

<p>The outer loop, on the other hand, could perfectly well be a <code>range</code>: it starts at 0 and is incremented once each time round the loop.</p>

<pre><code>for counts in range(len(arr)+1):
</code></pre>

<hr>

<p>Finally, there's the question of names. <code>arr</code> isn't great, but in context it passes. <code>M</code> comes from the problem statement. <code>counts</code> is, in my opinion, not at all helpful. I would call it <code>offset</code>, <code>start</code>, or something similar. And <code>s</code> is really <code>partial_sum</code> or <code>weighted_sum</code>.</p>

<p>This gives us tidied code:</p>

<pre><code>for offset in range(len(arr)+1):
    partial_sum = 0
    for i, z_i in enumerate(arr[offset:]):
        partial_sum += z_i // (i+1)
        if partial_sum &gt; M:
            break
    if partial_sum &lt;= M:
        print(offset)
        break
</code></pre>

<hr>

<p>As for speed: flooring discards information, so it's not easy to calculate the partial sum for a given offset any faster by using information from other offsets. Moreover, you can't use binary chop or some similar search because the partial sum is not monotonic in the offset: consider input array</p>

<pre><code>[1000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]
</code></pre>

<p>So I don't think there's much you can do to speed this up.</p>
    </div>