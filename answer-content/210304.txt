<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Error handling</h2>

<p><code>unsigned long long</code> is guaranteed to hold at least 64 bits.  If you are using <code>strtoull()</code>, then limiting yourself to <code>uint64_t</code> is just asking for trouble with no benefit.  In fact, your conditional code in <code>#if ULLONG_MAX &gt; UINT64_MAX</code> doesn't even compile: there is no such variable <code>y</code>.</p>

<p><strong>What does the return value of <code>my_strto64()</code> represent?</strong>  Sometimes, it's an error code.  But if there was no error, then it's the <code>parsed_long_long</code>‽  And the <code>parsed_long_long</code> is cast as an <code>int</code> for some reason?  That doesn't make sense at all.</p>

<p>In the <code>main()</code> function, if any of the calls to <code>my_strto64()</code> fails, then you terminate the program without calling <code>endwin()</code>, <strong>leaving the terminal in a bad state</strong>.</p>

<p>Realistically, <code>sprintf()</code> is not going to fail in a way that would result in a negative return value.  What could possibly go wrong with writing some string to a buffer that has already been allocated?  If it's buffer overflow — and <strong>you do have a buffer overflow problem</strong>, because your <code>total_string</code> doesn't have enough space to contain <code>"Total: "</code> —, then it's likely to either segfault or fail silently.  (To guard against the segfault, you could use <code>snprintf()</code>, but a full buffer would result in a <em>positive</em>, not negative, return value.)  If it's integer overflow from the multiplication, then it won't detect it either, since the multiplication is simply done modulo 2<sup>64</sup>.  (Unlike <code>sprintf()</code>, <code>printf()</code> might fail, if it tries to write to <code>STDOUT</code> and it is closed.  I suppose that <code>printw()</code> could fail too, but you never check for those errors — and I wouldn't bother either.)</p>

<h2>Miscellaneous</h2>

<p>Labelling the output as a "total" is a bit weird to me, since it implies that it's a sum rather than a product of the inputs.  (Airline luggage rules often place a limit on the length + width + height of an item, for example.)</p>

<p>It is customary to put <code>main()</code> at the end, to avoid needing to write forward declarations.</p>

<p>I suggest putting the <code>#include</code>s in alphabetical order.</p>

<p>The code for reading the three dimensions is <strong>repetitive</strong>.  Furthermore, it looks like you have a <strong>copy-and-paste</strong> error, since all three error messages are the same.  You should define a helper function.</p>

<p>Using <code>calloc()</code> to allocate a string of a short, limited length is not worth the trouble.  Putting it on the stack would be fine.  But I wouldn't bother with composing <code>total_string</code> at all — just have <code>printw()</code> format the string for you.</p>

<h2>Suggested solution</h2>

<pre><code>#include &lt;ctype.h&gt;
#include &lt;errno.h&gt;
#include &lt;inttypes.h&gt;
#include &lt;limits.h&gt;
#include &lt;ncurses.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

// Generous estimate of the maximum number of digits
// https://stackoverflow.com/a/10536254
#define ULL_DIGITS (3 * sizeof(unsigned long long))

/**
 * Prints a prompt then reads an unsigned long long, using ncurses.
 * Returns 1 on success.  Returns 0 on failure, with errno set to
 * ERANGE, EDOM, or EIO.
 */
int ask_ull(unsigned long long* result, const char *prompt) {
    char buf[ULL_DIGITS + 1];
    char *endptr;
    printw("%s", prompt);
    getnstr(buf, ULL_DIGITS);
    *result = strtoull(buf, &amp;endptr, 10);
    if (errno == ERANGE) {                      // Overflow or underflow
        return 0;
    }
    if (endptr == buf || strchr(buf, '-')) {    // Unsuccessful conversion
        errno = EDOM;
        return 0;
    }
    while (isspace(*endptr)) endptr++;
    if (*endptr) {                              // Trailing junk
        errno = EIO;
        return 0;
    }
    errno = 0;
    return 1;
}

int main(void) {
    unsigned long long height, width, length;
    char *errmsg = NULL;

    initscr();
    printw("--- Volume Calculator --\n");

    if (!errmsg &amp;&amp; !ask_ull(&amp;length, "Enter length: ")) {
        errmsg = "Unable to scan length";
    }
    if (!errmsg &amp;&amp; !ask_ull(&amp;width, "Enter width: ")) {
        errmsg = "Unable to scan width";
    }
    if (!errmsg &amp;&amp; !ask_ull(&amp;height, "Enter height: ")) {
        errmsg = "Unable to scan height";
    }
    if (errmsg) {
        refresh();
        endwin();
        perror(errmsg);
        return 1;
    }

    unsigned long long volume = length * width * height;
    printw("Volume: %llu", volume);

    refresh();
    getch();
    endwin();
}
</code></pre>
    </div>