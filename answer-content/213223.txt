<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review:</h2>

<p>So there are some changes that can be made. As you are running a nested for loop that should be the first candidate for removal, python isn't the best with lots of loops. I've made some changes below to improve your code. </p>

<ul>
<li>Here we actually use <code>n</code>, instead of <code>ind</code>, they are the same, so <code>ind</code> is excessive</li>
<li>I've expanded the <code>if ... else</code> block as this improves readability</li>
<li>I've changed <code>i</code> for <code>x</code> as this is easier to quickly differentiate from <code>1</code></li>
</ul>

<hr>

<pre><code>def coding_solution(_arr):
    new_arr = []
    for n in range(len(_arr)):
        v = 1
        for m, x in enumerate(_arr):
            if m != n:
                v *= x 
            else:
                v *= 1
        new_arr.append(v)
    return np.array(new_arr)
</code></pre>

<hr>

<h2>Alternate solutions:</h2>

<p>I have two methods that work, one is pure python (using two core libraries), but could include numpy; the other is all numpy. They both work on a similar principal, that is that all new values are the same product (the entire array) divided by the value at the same index in the original array. Therefore, you can just divide the product of the entire array by each value in the original array, as long as there are no zero values (thanks One Lyner!).</p>

<h3>Pure python:</h3>

<pre><code>from functools import reduce
from operator import mul

arr = [1, 2, 3, 4, 5]

def f(_arr):
    arr_prod = reduce(mul, _arr)  # You could use np.prod(_arr) instead of reduce(...)
    return [arr_prod / x for x in _arr]
</code></pre>

<p>The pure python function could be a single line, but then you might end up computing the product of the entire array on every iteration.</p>

<h3>Numpy</h3>

<pre><code>
import numpy as np

arr = np.array([1, 2, 3, 4, 5])

def g(_arr):
    return np.ones(_arr.shape) * _arr.prod() / _arr

#Â Even more succinct, thanks Graipher
def h(_arr):
    return _arr.prod() / _arr
</code></pre>

<p>This Numpy solution would be vectorised and would scale well, but may be slower on smaller arrays. It works by creating a new <code>np.array</code> of all <code>1</code>; multiplying it by the product, so all the values are the product; finally dividing the 'product array' by the original array, which is element-wise.</p>
    </div>