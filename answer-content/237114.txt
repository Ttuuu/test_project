<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We really need to start by defining the kind of hash function we've created - this doesn't appear to be a useful cryptographic (one-way) hash function, yet creating strings as output seems to be a poor choice for hashes used for performance purposes (as keys in unordered maps and sets, for example).  What is the intended problem domain here?</p>

<p>We have a very low density of outputs.  On a system with 8-bit <code>char</code>, we use only .000000000000013% (significantly less than one quadrillionth) of the available 16-byte results.  That's very inefficient use of storage.</p>

<hr>

<p>Should the function be allowed to modify the contents of <code>input</code>?  If not, then it should be declared as <code>char const*</code>.</p>

<hr>

<p>Since we return a pointer to allocated memory, the documentation needs to be much more clear that it's the caller's responsibility to call <code>free()</code> when it's no longer required.</p>

<hr>

<p><code>alphabet</code> and <code>vars</code> can be shared across all invocations, so should be declared <code>static</code>.</p>

<hr>

<p>All these values are potentially out of range of <code>char</code>, as <code>CHAR_MAX</code> may be as low as 127:</p>

<blockquote>
<pre><code>const char vars[] = {
    0xA6,
    0xC1,
    0x5E,
    0x31,
    0xF5,
    0x88,
    0xA1,
    0xE2
};
</code></pre>
</blockquote>

<p>Use a type with a guaranteed large enough range, such as <code>int</code> or <code>unsigned char</code>.  How were these constants generated?  It's worth a comment explaining how these improve the algorithm, because it's not obvious to a casual reader.</p>

<hr>

<p>If we declare <code>malloc()</code> before we use it, we won't need to cast its result:</p>

<pre><code>#include &lt;stdlib.h&gt;

char *digest = malloc(HASH_LENGTH + 1));
</code></pre>

<p>Note that <code>sizeof (char)</code> cannot be other than 1, since <code>sizeof</code> works in units of <code>char</code>.</p>

<hr>

<p><code>malloc()</code> will return a null pointer when it fails - we mustn't dereference the result until we know it's a valid pointer.</p>

<hr>

<blockquote>
<pre><code>// Input length calculation
int inputLen = 0;
while(input[inputLen] != '\0') inputLen++;
</code></pre>
</blockquote>

<p>This is exactly what <code>strlen()</code> (in <code>&lt;string.h&gt;</code>) is for:</p>

<pre><code>size_t const inputLen = strlen(input);
</code></pre>

<p>BTW, it's probably worth using <code>size_t</code> (or at least unsigned types) for <code>HASH_LENGTH</code> and <code>varLen</code>, too, and for the indexing iterators <code>i</code> and <code>j</code>.</p>

<hr>

<blockquote>
<pre><code>int i;
for(i = 0; i &lt; HASH_LENGTH; i++){
    digest[i] = 0;  
}
</code></pre>
</blockquote>

<p><code>&lt;string.h&gt;</code> also contains <code>memset()</code> - don't reimplement it yourself.  Your compiler <em>may</em> be smart enough to spot the pattern and convert it to more efficient form (e.g. writing in units of your processor's word size), but even if it does, you've obscured what's happening here, and programmer time is much more expensive than CPU time.</p>

<hr>

<p>The XOR loops don't seem to consider any of the input string after the first <code>HASH_LENGTH</code> characters.  That means you'll get lots of collisions for strings sharing a common prefix.</p>

<p>The nested loops mean we're doing much more work than traditional hash functions, which examine each input character just once (and are O(<em>n</em>) in the length of input).</p>

<hr>

<p>Hashing the empty string gives undefined behaviour, because <code>inputLen</code> is then zero, and <code>% 0</code> is undefined.  That's a serious bug.</p>

<hr>

<blockquote>
<pre><code>digest[i] &gt; 0
</code></pre>
</blockquote>

<p>On systems where <code>char</code> is an unsigned type, this may be true much more often than on those where it's signed - that looks like a bug.  Reading on, it appears that you're just using this to implement your own <code>abs()</code>; don't do that - include <code>&lt;math.h&gt;</code> instead.</p>

<hr>

<blockquote>
<pre><code>    digest[i] = alphabet[digest[i] * j % alphabetLen];
</code></pre>
</blockquote>

<p>That will give you a non-uniform distribution, unless you can somehow arrange for <code>alphabetLen</code> to be an exact factor of <code>UCHAR_MAX</code>.</p>

<hr>

<blockquote>
<pre><code>*(digest + HASH_LENGTH)
</code></pre>
</blockquote>

<p>That's a convoluted way to write <code>digest[HASH_LENGTH]</code> - why are you going to such lengths to make the code hard to read?</p>
    </div>