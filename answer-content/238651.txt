<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The original JS code is prone to injection (e.g. <code>]</code>) and unnecessarily verbose, as you said.</p>

<p>Here's a one-liner that also plays nice with dodgy user input (say, injecting <code>]"</code> into the <code>#selectVal</code> field, which would break Andy E's approach.</p>

<pre><code>function setSelect() {
    $("#mySelect").val($("#selectVal").val()).val($("#mySelect").val());
    $("#selectVal").select();
}
</code></pre>

<p>Why this works: the first call to <code>$("#mySelect").val(...)</code> selects the option if it exists, or makes the select input empty if it doesn't. The second call takes that value (either the same value, or an empty string), and sets it again, either keeping the value in place (if it exists), otherwise returning to the default (first) option.</p>

<p>Calling <code>.val()</code> four times in one line is a bit ugly, I know, but you can't argue with results. ;)</p>

<p><a href="http://jsfiddle.net/z8d0vLyw/1/" rel="nofollow noreferrer">Fiddle with an example here</a>.</p>
    </div>