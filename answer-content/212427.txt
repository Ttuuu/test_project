<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Limited range</strong></p>

<p><code>double decimal, ... integer = (int)decimal;</code> is undefined behavior for <strike>well over 90%</strike> about half of all <code>double</code> as the value is well outside the <code>int</code> range of <code>INT_MIN...INT_MAX</code>.</p>

<p>To truncate a <code>double</code>, use <code>double trunc(double)</code>.</p>

<p><strong>Imprecision</strong></p>

<p><code>decimal *= 100.</code> is not certainly exact.  With corner cases near xxxx.xx5, OP's approach generates a nearby, though wrong, answer.</p>

<p><strong>Negative numbers error</strong></p>

<p><code>print_decimal(-65.226, 4);</code> --&gt; <code>-1717987571-1932735284-1932735284-1932735283</code></p>

<p><strong>Code is buggy</strong></p>

<p><code>print_decimal(65.9999999999999, 4);</code> --&gt; <code>6599910</code>.  This is due to the final rounding not accounted for.</p>

<hr>

<p><strong>to be more effective</strong></p>

<p>Avoid range errors and those due to multiple rounding.</p>

<p>To do this well is a non-trivial problem and requires a fair amount of code.  A suitable short answer is possible if the range of <code>double</code> allowed (OP unfortunately has not supplied a restricted range) is reduced or <code>sprintf()</code> is callable.</p>

<p>Below is some quick code.  It too has imprecision issues noted about, but less so than OP's.  Also OP's various failing cases are corrected here.</p>

<pre><code>#include &lt;limits.h&gt;
#include &lt;math.h&gt;
#include &lt;stdint.h&gt;

static void print10(long double ldecimal) {
  if (ldecimal &gt;= 10.0) {
    print10(ldecimal/10);
  }
  ldouble mod10 = fmodl(ldecimal, 10);
  putchar((int) mod10 + '0');
}

static void  print_decimal2(double decimal, unsigned precision) {
  if (!isfinite(decimal)) {
    return ; // TBD_Code();
  }

  if (signbit(decimal)) {
    putchar('-');
    decimal = -decimal;
  }

  double ipart;
  double fpart = modf(decimal, &amp;ipart);
  // By noting if there is a non-zero fraction, then this block only needs to
  // handle `double` typically in the [0 ... 2^53] range
  if (fpart) {
    long double pow10 = powl(10, precision);
    ldecimal = roundl(decimal * pow10);  // use extended precision as able
    print10(ldecimal);
  } else if (decimal) {
    print10(decimal);
    while (precision) {
      precision--;
      putchar('0');
    }
  } else {
    putchar('0');
  }
}
</code></pre>
    </div>