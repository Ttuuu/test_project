<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>As requested, I moved my comments into an answer.</em></p>
<p>Do not add the <code>IMapper</code> directly to the <code>DataReader</code> because you then give the <code>DataReader</code> 2 purposes (<em>breaking <strong>S</strong></em>):<em>Reading data <strong>and</strong> mapping it to the DTO</em>.</p>
<p>Your <code>DataReader</code> is used to read the data. <em>DTOs</em> are created just before sending it over the wire.</p>
<p>If your <code>GetUsers()</code> is within a controller you should inject <code>IDataContext</code>, <code>IUserDataReader</code>, <code>IUserMapper</code> using DI via the controller constructor.</p>
<p>If you use DI then you can create an interface for the <code>UserReaderService</code> and only inject that into your controller constructor, the DI container will resolve the constructor for your <code>UserReaderService</code> and your controller constructor will only take 1 constructor parameter.</p>
<p>the question in your comment:</p>
<blockquote>
<p><em>Lets say i want to select all users like i do in UserGridDataReader</em>
<em>but i only want the name column to be selected, do i create a new</em>
<em>DataReader then?</em></p>
</blockquote>
<p>You can create <code>UserGridDataReader : DataReader&lt;IUserEntity&gt;, IUserGridDataReader</code> where <code>IUserGridDataReader</code> will inherit from <code>IUserDataReader</code> and <code>IUserGridDataReader</code> has the required implementation, for eg. <code>ReadUserNamesOnly()</code>. (<em>the <strong>O</strong> part</em>).</p>
<p>Keep in mind you don't want to create an interface for each additional read function, that would be stepping towards <strong>not</strong> keeping things <strong>DRY</strong>.</p>
<p>You could add a method to the <code>DataReader</code> that has the signature of <code>IEnumerable&lt;T&gt; ReadExpression(Expression&lt;Func&lt;T, bool&gt;&gt; expression)</code> giving the <code>DataReader</code> more flexibility but still staying within the <strong>S</strong> principal.</p>
<p>The <code>DataReader</code> still just has one purpose of just <em><strong>reading</strong></em> data.</p>
<p>@Jamie Stevensons answer is great for determining SOLID, but like he said it is a pretty small example to really test the constraints.</p>
<p>The only other thing I noticed is that your <code>GetUsers()</code> API call returns <code>void</code> this should probably be <code>IEnumerable&lt;UserDTO&gt;</code> or <code>List&lt;UserDTO&gt;</code> unless the code was copied from a <em>Test</em> where you should have something like an <code>Assert.</code> or some indication that it was a test.</p>
    </div>