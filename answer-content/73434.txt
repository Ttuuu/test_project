<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>def addNode(self, node_id, x, y):
    if self.node_list[node_id] != None:
</code></pre>

<p>Since <code>None</code> is a guaranteed singleton, you could use <code>is not None</code> rather than <code>!= None</code>.</p>

<pre><code>        raise exception("This node ID already exists.")
</code></pre>

<p>If this exception is quite common, assuming this code is part of a tree structure of some sort, you could write a custom exception such as <code>NodeError</code> to handle all such error - that'd be neat.</p>

<pre><code>else:
</code></pre>

<p>Is it necessary to have the <code>else</code> here? If the <code>if</code> clause above raises an exception, this block won't be executed anyway; so I'd suggest you should remove this and unindent the code below.</p>

<pre><code>    if self.spacialMatrix[x][y] != None:
        raise exception("This node position is already populated.")
</code></pre>

<p>Same thing I mentioned above - <code>is not None</code> and <code>NodeError</code> exception. Also, wouldn't the wrong <code>x</code> and <code>y</code> arguments raise an <code>IndexError</code>? Have you done anything else in the code to ensure that this won't happen?</p>

<pre><code>    else:               
        self.spacialMatrix[x][y] = node_id
        self.node_list[node_id] = [x,y]
</code></pre>

<p>This part looks good.</p>

<p>My suggestions:</p>

<pre><code>class NodeError(exception):
    """
    For node related errors.
    """
    pass

def addNode(self, node_id, x, y):
    if self.node_list[node_id] is not None:
        raise NodeError("This node ID already exists.")
    if self.spacialMatrix[x][y] is not None:
        raise NodeError("This node position is already populated.")
    self.spacialMatrix[x][y] = node_id
    self.node_list[node_id] = [x,y]
</code></pre>

<p><em>Note: Adding doc strings would be a very good idea!</em></p>
    </div>