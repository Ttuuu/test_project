<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you've seen enough alternative solutions so I'll just review your code.</p>

<ul>
<li>You should not invent new terms for <code>x &lt; 0</code> like <code>IsStrictlyLowerThan</code> as this makes things unnecessarily more difficult to understand. Instead, you should stick to the well known naming. In this case that would be <code>IsLessThan</code> or in case of <code>x &lt;= 0</code> it would be <code>IsLessThanOrEqual</code> - Everyone who write code would understand these without any further explanation. Or in case of <code>IsStrictlyNotBetween</code> should be <code>IsNotInRangeExclusive</code> etc.</li>
<li>There are voices in comments that suggest using <code>== '-'</code> instead of your extensions. I don't agree with that. Your extensions are much better because they make the code look clean and consistent. Having extensions for some operations and not for others would make it look dirty.</li>
<li>I don't however agree with your decision for not using Regex. With regex it's usually simpler and easier to express complex validations. It's also easier to make your validations case-insensitive or match other patterns or use such services as <a href="https://regex101.com" rel="noreferrer">regex101.com</a> to test them. It might be enough for now but sooner or later you will need it so don't be so strict about always consider other solutions.</li>
<li><p>Keep also in mind that your <code>IsStrictlyLowerThan</code> APIs are currently case sensitive so you might consider using <code>IEqualityComparer&lt;string&gt;</code> as the last argument and not the <code>TComparable</code> that doesn't offer you any additional functionality in this context. So your API should have signatures similar to this one:</p>

<pre><code>public static bool IsLessThan(this string value, string other, IComparer&lt;string&gt; comaprer = default)
{
    return (comaprer ?? StringComparer.Ordinal).Compare(value, other) &lt; 0;
}
</code></pre>

<p>Then you can use it with other comparers if necessary, e.g.:</p>

<pre><code>"FOO".IsLessThan("foo", StringComparer.OrdinalIgnoreCase)
</code></pre></li>
</ul>
    </div>