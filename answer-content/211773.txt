<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Collection != enumerator</h3>

<p>The main problem I see here is that <code>LinkedList&lt;T&gt;</code> implements <code>IEnumerator&lt;T&gt;</code> instead of <code>IEnumerable&lt;T&gt;</code>. That's the wrong interface, which makes this class quite difficult to use: you now have to manually call <code>MoveNext()</code> and <code>Current</code>, instead of being able to use <code>foreach</code>. This also prevents you from using Linq methods, and you can't do simultaneous enumerations.</p>

<p><code>IEnumerable&lt;T&gt;</code> represents a sequence of items that can be enumerated, such as an array, a (linked) list, or the result of a generator method (<code>yield</code>).</p>

<p><code>IEnumerator&lt;T&gt;</code> represents the act of enumeration a collection. Enumerators are rarely used directly - they're usually 'hidden' behind a <code>foreach</code> statement (which calls <code>GetEnumerator</code> on the given enumerable to obtain an enumerator).</p>

<hr>

<p>The above means that <code>myCurrentNode</code> does not belong in this class - it should be part of an enumerator. The same goes for <code>Current</code>, <code>MoveNext</code>, <code>Reset</code> and <code>Dispose</code>.</p>

<p>Regarding <code>RemoveCurrentNode</code>, it's both cumbersome and inefficient. Cumbersome, because you can't just pass the value (or node) that you want to remove as an argument - you have to look for it by enumerating the list. Inefficient, because once you've found the right node, <code>RemoveCurrentNode</code> also has to perform a linear search to find the preceding node.</p>

<p>Take a look at <code>System.Collections.Generic.LinkedList&lt;T&gt;</code> to get some inspiration. It's a doubly linked list, so not all of its methods are applicable in your case, but it should give you an idea of how to play to the strengths of a linked list.</p>

<h3>Other notes</h3>

<ul>
<li><code>IEnumerator.Reset</code> is essentially deprecated. Enumerating a collection again is done by obtaining a new enumerator. Modern enumerators typically throw an exception in <code>Reset</code>.</li>
<li>Note that <code>IEnumerable&lt;T&gt;.GetEnumerator</code> is quite easy to implement with <code>yield</code>.</li>
<li>There's no need to initialize <code>head</code> and <code>tail</code> to <code>null</code> - that's their default value already.</li>
<li>There's also no need for disposal here - there are no unmanaged resources here that require disposal.</li>
<li>Why does <code>Node</code> use Java-style get and set methods instead of properties? I'd expect to see <code>public T Value { get; }</code> and <code>public Node&lt;T&gt; NextNode { get; set; }</code>.</li>
<li>Personally I would handle the <code>head == myCurrentNode</code> edge-case in <code>RemoveCurrentNode</code> without creating an extra node. With or without doesn't make much of a difference in terms of code complexity, so I'd pick the more efficient approach (the one without an extra allocation).</li>
<li>A <code>LinkedList(IEnumerable&lt;T&gt; collection)</code> constructor would be useful.</li>
</ul>
    </div>