<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use functions whenever possible</h2>

<p>I think there are too many classes and you should consider using functions instead: it is easier to test (unit testing).</p>

<h2>Use a logger</h2>

<p>First thing: the code below make me think that you should use a logger instead of reinventing the wheel:</p>

<pre class="lang-py prettyprint-override"><code>report = reporter.format_report()
save_to_file.send(report)
show_on_console.send(report)
</code></pre>

<p>Here is how you can define a root logger which can log in the console as well as in a file:</p>

<pre class="lang-py prettyprint-override"><code>import logging


def setup_logger(log_dir, log_file_name):
    # root logger
    logger = logging.getLogger()

    formatter = logging.Formatter(
        "%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")

    file_hdlr = logging.FileHandler(
        "{0}/{1}".format(log_dir, log_file_name))
    file_hdlr.setFormatter(formatter)
    logger.addHandler(file_hdlr)

    console_hdlr = logging.StreamHandler()
    console_hdlr.setFormatter(formatter)
    logger.addHandler(console_hdlr)

    logger.setLevel(logging.DEBUG)
</code></pre>

<p>This <code>setup_logger</code> function should be called at program startup, in your <code>main</code>, for instance:</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    setup_logger("my/work/dir", "my_app.log")
</code></pre>

<p>You can use this logger anywhere: in each Python module, you can define a global variable named <code>LOG</code>, and use it like this:</p>

<pre class="lang-py prettyprint-override"><code>LOG = logging.getLogger(__name__)


def my_function():
    LOG.info("log message")
</code></pre>

<p>See the <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">How To documentation</a></p>

<h2>wrong usage of generator</h2>

<p>In your, <em>competitors</em> is a generator, not a tuple. After having iterate a generator the first time, then the generator is exhausted. It means that the second loop will end immediately.</p>

<pre class="lang-py prettyprint-override"><code>self.competitors = (item for item in competitors if self.valid_item(item))
</code></pre>

<p>The call to <code>rule_compared_smaller</code> will iterate the <em>competitors</em>, then the call to <code>rule_compared_two_times_smaller</code> will do nothing because the <em>competitors</em> is exhausted.</p>

<p>You need to create a list:</p>

<pre class="lang-py prettyprint-override"><code>self.competitors = [item for item in competitors if self.valid_item(item)]
</code></pre>
    </div>