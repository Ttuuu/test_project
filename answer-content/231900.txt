<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So to be helpful to others who might be interested in the final outcome after many R&amp;D days and suggestions from other forum users so on., this is what I ended up with. I hope it helps and comments are welcome.</p>

<p><strong>cmd/myself/main.go</strong></p>

<pre class="lang-golang prettyprint-override"><code>package main

import (
    "context"
    "net/http"
    "log"
    "os"
    "os/signal"
    "syscall"

    "myself/internal/app"
)

func main() {
    srv := &amp;http.Server{
        Addr:    ":8080",
        Handler: router.New(),
    }

    ctx, cancel := context.WithCancel(context.Background())

    signalChan := make(chan os.Signal, 1)

    go handleSignal(signalChan, cancel)

    if err := app.New(srv).Start(ctx); err != nil {
        log.Fatal(err)
    }

    log.Info("shutdown complete")
}

func handleSignal(signalChan chan os.Signal, cancel context.CancelFunc) {
    // os.Interrupt: Ctrl-C
    // syscall.SIGTERM: kill PID, docker stop, docker down
    signal.Notify(signalChan, os.Interrupt, syscall.SIGTERM)

    sig := &lt;-signalChan

    log.Infof("shutdown started with %v signal", sig)

    cancel()
}
</code></pre>

<p><strong>internal/app/mysql.go</strong></p>

<pre class="lang-golang prettyprint-override"><code>package app

import (
    "context"
    "fmt"
    "log"
    "net/http"
    "time"
)

type App struct {
    server  *http.Server
}

func New(srv *http.Server) App {
    return App{
        server:  srv,
    }
}

func (a App) Start(ctx context.Context) error {
    shutdownChan := make(chan struct{})

    go handleShutdown(ctx, shutdownChan, a)

    if err := a.server.ListenAndServe(); err != http.ErrServerClosed {
        return fmt.Errorf("failed to start [%v]", err)
    }

    &lt;-shutdownChan

    return nil
}

func handleShutdown(ctx context.Context, shutdownChan chan&lt;- struct{}, a App) {
    &lt;-ctx.Done()

    ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
    defer cancel()

    if err := a.server.Shutdown(ctx); err != nil {
        log.Infof("interrupted active connections [%v]", err)
    } else {
        log.Infof("served all active connections")
    }

    close(shutdownChan)
}

<span class="math-container">```</span>
</code></pre>
    </div>