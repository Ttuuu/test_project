<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not a mongoDB user but is there not some type of validation API, not sure if it can be used on schemes. If it can then maybe that is the better option for your code.</p>

<p>The Question</p>

<blockquote>
  <p>It have been getting complexity warnings and tried to rewrite it.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" rel="noreferrer">Cyclomatic complexity</a> (CC) is a count of the paths through a section of code. Note some code linters use a different metric than described in this answer.</p>

<h2>Calculating  Cyclomatic Complexity.</h2>

<p>To get an estimate of the CC you can count the paths in the section of code.</p>

<p>For example the following functions have 2 paths and thus have a CC of 2</p>

<pre><code>function bar(foo) {
  if (foo === 2) { foo = 3 } // path 1
  else { foo = 4 } // path 2
  return foo;
}


function bar(foo) {
  if (foo === 2) { foo = 3 } // path 1
                             // hidden else path 2
  return foo;
}
</code></pre>

<p>If we add another <code>if</code> statement we get another path. The next function has a CC of 3</p>

<pre><code>function bar(foo) {
  if (foo === 2) { foo = 3 } // path 1
  else if (foo === 4) { foo = 5 } // path 2
  else { foo = 4 } // path 3
  return foo;
}
</code></pre>

<p>It is not just the if statement that creates a path, each clause in a statement creates a path. Thus the following function also has a CC of 3</p>

<pre><code>function bar(foo) {
  if (foo === 2 || foo === 4) { foo = 3 } // path 1 and 2
  else { foo = 4 } // path 3
  return foo;
}
</code></pre>

<p>Things get a little involved when you are using functions. CC is calculated per function so the next example will have a median CC of 3 and a max CC of 3. The CC of <code>(bar + poo) / number of functions</code></p>

<pre><code>function poo(foo) {
  if (foo === 2 || foo === 4) { foo = 3 }
  else { foo = 4 }
  return foo;
}
function bar(foo) {
  if (foo === 2 || foo === 4) { foo = 3 }
  else { foo = poo(foo) }
  return foo;
}
</code></pre>

<h2>Your function</h2>

<p>Counting the clauses in your function (below) I estimate the CC to be near 20, which is in the high range. Counting the first version in your question has a lot of nested branches so that may have a value near 30.</p>

<pre><code>providerSchema.pre('save', function(next) {

    if(((this.level === 4) &amp;&amp; (this.description.length &gt;= 80 || this.certifications.length &gt; 5)) || 
       ((this.level === 3) &amp;&amp; (this.description.length &gt;= 50 || this.certifications.length &gt; 3)) ||
       ((this.level === 2) &amp;&amp; (this.description.length &gt;= 30 || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0)) || 
       ((this.level === 1 || this.level === 0) &amp;&amp; (this.description || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0 || this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart))){
         next(new Error('your current plan does not have this feature'));
    } else {
         next()
    }
});
</code></pre>

<p>The <a href="https://codereview.stackexchange.com/a/219170/120556">answer</a> by Margon has separated the code into two functions. This will reduce the median CC. However it has failed to spread the complexity across the two functions, this will drive the max CC up. The first functions CC is 2 and <code>validateData</code> is about 17 giving a median CC of <code>(2 + 17) / 2 ~= 10</code> and a max CC of 17.</p>

<h2>Reducing the CC</h2>

<p>As you can see moving code into functions can go a long way to reduce the complexity.</p>

<p>Another way is to remove branching paths altogether. Consider the following function</p>

<pre><code>function foo(a) {
  if(a === 1) { a = 2 }
  else if (a === 2) { a = 3 }
  else if (a === 3) { a = 4 }
  else { a = undefined }
  return a;
}
</code></pre>

<p>it has a CC of 4. Now we can do the same with only one path by using a lookup to take the place of the if statements.</p>

<pre><code>function foo(a) {
  return ({"1": 2, "2": 3, "3": 4})[a];
}
</code></pre>

<p>The function above has a CC of 1. There is one path yet 4 outcomes.</p>

<h2>Applying to your code</h2>

<p>Using a combination of functions and lookups we can reduce the CC of you code considerably. However I will point out that CC is but a metric and is only part of what makes good or bad code. Paying too much attention on the CC can be to the detriment of the source code quality. Good code is a balance of many metrics.</p>

<p><strong>Example</strong></p>

<p>There are 8 functions one lookup (object <code>levels</code>). The CC are about (in order top to bottom) 2 (outer function), 3, 4, 1, 1, 2, 2, and 5 so the median CC is <code>(2 + 3 + 4 + 1 + 1 + 2 + 2 + 5) / 8 = 20 / 8 ~= 2</code> and the max CC is 5.</p>

<pre><code>providerSchema.pre('save', function(next) {
    const checkSocial = () =&gt; this.description || this.teaser || this.social.length &gt; 0;
    const checkLocation = () =&gt; this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart;
    const fail = () =&gt; false;
    const levels = {
        "4": {desc: 80, cert: 6, fail},
        "3": {desc: 50, cert: 4, fail},
        "2": {desc: 30, cert: 1, fail() { return checkSocial() } },
        "1": {desc: -1, cert: 1, fail() { return checkSocial() || checkLocation() } },
        "0": {desc: -1, cert: 1, fail() { return checkSocial() || checkLocation() } },
    };

    const checkPass= ({level, description, certifications}) =&gt; {
        if(levels[level]) {
            const check = levels[level];
            if(check.fail() &amp;&amp; check.desc &lt; description.length &amp;&amp; check.cert &lt; certifications.length) {
                return false;
            }
        }
        return true;
    }
    checkPass(this) ? next() : next(new Error("Your current plan does not have this feature."));

});
</code></pre>

<h2>Summing up.</h2>

<p>From a high CC of around 20 down to 2. Now the questions that remain are.</p>

<ul>
<li>Is it more readable? That is debatable, it is hard for me to tell as I am good at reading my own style.</li>
<li>Is it more manageable? Yes making changes or adding conditions is simpler as a lot of repeated clauses have been removed or grouped in functions.</li>
<li>Is it worth the effort? That is up to the coder!</li>
</ul>
    </div>