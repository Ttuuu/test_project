<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) The strings (BASE_PATH, USER_PATH, etc) shouldn't be hardcoded.   It is fine to have program defaults but they should be configurable via some configuration file and/or commandline.</p>

<p>2) There is a lot of repetition in cade, say, when you ensure that all directories exist. This is because all string are seperate variables. It'd be better if they were organized in a vector/array of strings. And use an enum to indicate which entry signifies what.</p>

<p>3) Avoid using non portable system calls. Use portable thirdparty free-open source libraries instead. For creating directories use <code>std::filesystem</code> (or <code>boost::filesystem</code> if C++17 is out of scope). Furthermore, <code>std::string</code> isn't quite good representation for filesystem path - better use a dedicated class. Also filesystem delimiter "\" doesn't work on all platforms (e.g., linux) use "/" instead.</p>

<p>4) Don't <code>using namespace std;</code> in headers and avoid in general. Want to shorten <code>cout</code> or <code>string</code> - write <code>using std::cout;</code> and <code>using std::string;</code> so you pull only what you need and not the whole namespace which might accidentally break some code.</p>

<p>5) You should have a separate abstract class that manages user input - whatever is the source of said input. <code>getch</code> isn't a good choice. Nowadays frequently one writes core dll on C++ and interface on C# or whatever language is best for the platform. That's being said, given code can be easily fully implemented on the said languages.</p>

<p>Edit: About requested example for (5).</p>

<p>Generally designing API/interface is a complex topic and you should seek some tutorials and guides online. But I can show something simple.</p>

<p>Imagine you have an external class <code>Controller</code> whose purpose is to process users input and issue requests to the Account class or whatever. The <code>Controller</code> could be cmd-based interface much like you have implemented, a good looking webpage that forwards its data to your Account class, or some sort of socket data interpreter that receives request from some server or whatever. </p>

<p>To encompass all of these one should address <code>Controller</code> as an abstract interface class. The only question is what is its interface and how to work with it.</p>

<p>Basic method (easiest to implement considering current code)</p>

<pre><code>enum class ERequest
{
   DO_STUFF_A,
   DO_STUFF_B,
   EXIT
}
class IController
{
   public:
   virtual ~IController() = default;
   virtual ERequest GetRequest() = 0;
   virtual void GetDataForA(...) = 0;
   virtual void SetOutputForA(...) = 0;
   virtual void GetDataForB(...) = 0;
   virtual void SetOutputForB(...) = 0;
}
</code></pre>

<p>And in the code you simply write simple function deals with the controller</p>

<pre><code>IController&amp; rController =...;
while(true)
{
   ERequest rq = rController.GetRequest();
   switch(rq)
   {
      case ERequest::DO_STUFF_A:
      rController.GetDataForA(...);
      // process the request
      rController.SetOutputForA(...);
      break;

      case ERequest::DO_STUFF_B:
      rController.GetDataForB(...);
      // process the request
      rController.SetOutputForB(...);
      break;

      case ERequest::EXIT:
      return;
   }
}
</code></pre>

<p>It is far from perfect and this type of interface is still very limiting but it already allows one to better organize code and prepare for future development and various possible interfaces.</p>

<p>And there are other design options:</p>

<p>I. Instead of making abstract interface for controller, make an interface for Account class that should be exposed to controller and simply supply it to the controller designer.</p>

<p>This method is good as long as all methods require a small amount of time for processing - and are function like. But it will cause problems if some methods take a while for processing.</p>

<p>Also it is harder to implement as it requires to make the exported methods to be extra safe. And you need to consider various situations like: "what if it methods are called simultaneously? Is my class thread safe?"</p>

<p>II. Make dual interface. Same as (1) but also account class receives a callback class instance from the controller. This way one can utilize parallelism and asynchronous methods. Nobody wants their interface to be laggy and unresponsive. So each call controller schedules a query, while some worker threads process them and send output via the callback class.</p>

<p>Furthermore, one can run some background analysis and send valuable info to the interface without any query requests.</p>
    </div>