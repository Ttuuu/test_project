<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Service Provider Interface</h2>

<p>Your helper class is full with switch statements to dispatch operations to the underlying algorithm used. You could use the <a href="https://blogs.msdn.microsoft.com/simonince/2008/08/25/the-service-interface-pattern/" rel="nofollow noreferrer">service provider interface</a>, rather than recurrent switch blocks.</p>

<blockquote>
<pre><code>public static bool CheckPassword(string plaintextPassword, string encodedPassword)
        {
            if (!plaintextPassword.IsNormalized()) { plaintextPassword = plaintextPassword.Normalize(); }

            if (encodedPassword.StartsWith("$argon2")) {
                return Utilities.CheckArgon2Hash(plaintextPassword, encodedPassword);
            }

            if (encodedPassword.StartsWith("$2y")) {
                return Utilities.CheckBCryptHash(plaintextPassword, encodedPassword);
            }

            if (encodedPassword.StartsWith("$s2")) {
                return Utilities.CheckSCryptHash(plaintextPassword, encodedPassword);
            }

            throw new NotSupportedException(@"The given hashed password technique could not be determined.");
        }
</code></pre>
</blockquote>

<p>Could be rewritten to dispatch to the <em>service provider</em>.</p>

<pre><code>    public static bool CheckPassword(string plaintextPassword, string encodedPassword)
    {
          if (!plaintextPassword.IsNormalized()) { plaintextPassword = plaintextPassword.Normalize(); }

          this.GetServiceProvider(encodedPassword).Verify(plaintextPassword, encodedPassword);
    }
</code></pre>

<p>Retrieving the service provider might use your existing code. It is good practice to allow also registering other service providers. You could store all registered in a dictionary <code>providers</code>. <code>HashTechnique</code> could become a convenience enum for default techniques, but I would allow an overload on <code>string</code> to register additional techniques.</p>

<pre><code>protected virtual IPasswordServiceProvider GetServiceProvider(string digest) 
{
    if (digest.StartsWith("$argon2")) {
        return this.providers[PasswordServiceProvider.Argon2];
    // and so on ..
}
</code></pre>

<h2>Service Provider Implementation</h2>

<p>Rather than calling code from a helper like <code>Utilities.CheckBCryptHash</code>, I would let each <em>service provider</em> instance implement an interface and have their own methods.</p>

<pre><code>public interface IPasswordServiceProvider {
    string Name { get; } // argon2, bcrypt, scrypt, ..
    bool Verify(string plainText, string digest);
}

public abstract class PasswordServiceProvider : IPasswordServiceProvider {
    // you could keep track of common provider names
    public const string Argon2 = "Argon2";
    // .. add shared logic
}

public class Argon2PasswordServiceProvider : PasswordServiceProvider  {
    public override string Name =&gt; PasswordServiceProvider.Argon2;
    public override bool Verify(string plainText, string digest) {
        // perform argon2 algorithm ..
    }
}
</code></pre>

<h2>Security Considerations</h2>

<p>Try implementing <a href="https://stackoverflow.com/questions/21100985/why-is-the-slowequals-function-important-to-compare-hashed-passwords">SlowEquals</a> rather than a <code>ReferenceEquals</code>.</p>

<blockquote>
  <p><code>return encodedPassword == CalculateArgon2dHash(plaintextPassword, ..);</code></p>
</blockquote>
    </div>