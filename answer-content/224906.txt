<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Return statement demystified</h2>

<p>You have 2 return statement in the following function, and both are excessive. </p>

<blockquote>
<pre><code>void StartGame()
{
    if (playerOrderString[0] != "notSelected")
    {
        if (Input.GetButtonDown("Start" + playerOrderString[0]))
        {
            // .. code
            return;
        }
    }
    else
    {
        return;
    }
}
</code></pre>
</blockquote>

<p>The first one sits in a nested if-statement. When you walk the code, leaving the if-statement, there is no other code being called in this method, so the method returns anyway.</p>

<pre><code>void StartGame()
{
    if (playerOrderString[0] != "notSelected")
    {
        if (Input.GetButtonDown("Start" + playerOrderString[0]))
        {
            // .. code
        }
    }
    else
    {
        return;
    }
}
</code></pre>

<p>The second one is the only statement in an if-statement. The if-statement itself is a terminal (no other code follows this block in your method). The entire if-statement can be omitted.</p>

<pre><code>void StartGame()
{
    if (playerOrderString[0] != "notSelected")
    {
        if (Input.GetButtonDown("Start" + playerOrderString[0]))
        {
            // .. code
        }
    }
}
</code></pre>

<p>We could still go further from here. I would love to get rid of the nested if-statement. We could invert the outer if-statement. We have introcuded a new return statement, but this one makes sense. We actually want to exit early here.</p>

<pre><code>void StartGame()
{
    if (playerOrderString[0] == "notSelected")
    {
        return;
    }

    if (Input.GetButtonDown("Start" + playerOrderString[0]))
    {
        // .. code
    }
}
</code></pre>
    </div>