<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>namespace Usage</h2>

<p>This type <code>ptr</code> is in the global namespace. Why not make it part of your namespace? All your definitions should be in your namespace.</p>

<pre><code>template &lt;typename T&gt; using ptr = std::shared_ptr&lt;T&gt;;
</code></pre>

<p>I note you are still using shared pointers for memory management.</p>

<h2>Identifier Nameing</h2>

<p>I hate the use of <code>_</code> as a prefix to an identifier. Though you are not actually breaking any rules. Do you actually know the rules about using a prefix <code>_</code> on an identifier.</p>

<p>Personally I find that people that use <code>_</code> are using it to help them identify certain names for certain purposes. Personally I see this as a crutch to actual using good meaningful names for these identifiers.</p>

<h2>Style</h2>

<p>This looks funny.</p>

<pre><code>    tail = (_tmp); // why the braces?
</code></pre>

<h2>Prefer prefix increment</h2>

<pre><code>_size++;
</code></pre>

<p>When using integer it makes absolutely no difference. But when you are using user defined types (like iterators) it can. The default implementation of an iterator the prefix increment is more efficient than the postfix version.</p>

<p>Also you want to write your code so that it is type agnostic. If during maintenance you decide to change a type you should not also have to run through the code making sure that you are doing things the most efficient way (that should be automatic; just change the type).</p>

<p>As a result it is preferable to train yourself to always use the prefix increment (make it a habit). That way you will always be using the most efficient version of increment no matter what the type and situation.</p>

<h2>Default Constructing V</h2>

<p>You fixed the bug in you access operator <code>operator[]</code>. But you have done so in a way that means your type <code>V</code> must be default constructable.</p>

<pre><code>if(index &lt; 0 || isEmpty() || index &gt; size()-1){ return {};}
</code></pre>

<p>You are constructing a temporary <code>V</code> object that is returned.</p>

<p>Accessing beyond the end is an error you should treat it as such. Now you can treat this in several ways. The easiest way is to to throw an exception. This is the way I would recomend for you at the moment:</p>

<pre><code> if(index &lt; 0 || isEmpty() || index &gt; size()-1)
 {
     throw std::out_of_range("Error Message");
 }
</code></pre>

<p>The standard library for vector does it slightly differently. In the vector it is just undefined behavior to use an out of range index. But that fact is well documented (unlike your original version). But they also provide a second method <code>at()</code> that does do range checking. This version will throw an exception when the range is exceeded.</p>

<pre><code>  V&amp; operator[](std::size_t index) {return data[index];}
  V&amp; at(std::size_t index)         {checkRange(index);return data[index];}
</code></pre>

<h2>Returning by reference.</h2>

<p>The standard containers return reference to their members. This allows you to modify the members in place in the container.</p>

<pre><code>  std::vector   myData(/* Fill the container*/);

  myData[5] = 56; // modifies the value in the container.
                  // this only works if you return a reference.
</code></pre>

<h2>Access operator const version</h2>

<p>Now you have access to members via <code>operator[]</code>. But the contents become inaccessible if you have a const reference to your container. But as long as you are not modifying the container you should still be able to read them.</p>

<p>So you should also add const version of the access operator.</p>

<pre><code>  V&amp;       operator[](std::size_t index)       {return data[index];}
  V const&amp; operator[](std::size_t index) const {return data[index];}
</code></pre>

<h1>Prefer local objects to dynamic objects</h1>

<pre><code>auto list = std::make_unique&lt;Nyo::Util::LinkedList&lt;std::string&gt;&gt;();
</code></pre>

<p>You should only be making objects dynamically like this if you can not tell the lifespan of the object until runtime.</p>

<p>Most of the time you should be using automatic objects.</p>

<pre><code>Nyo::Util::LinkedLis  list;  // This is how you normally declare variables.
</code></pre>
    </div>