<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Procedural Programming</h1>

<p>In general it uses data-structures to solve a problem. Data-structures are like lookup tables, in which it is possible to save, modify and read values.</p>

<p>Working with data-structures could look in java like</p>

<pre class="lang-java prettyprint-override"><code>class Stroke { /* ... */}
class Color { /* ... */}

class Rect {
   double width;
   double hight;
   Stroke stroke;
}

Rect rect = new Rect();
rect.width = 5;
rect.hight = 14;
rect.stroke.type = "dotted";
rect.color.value = "#000";
rect.color.opacity= "0.3";
</code></pre>

<p>In the code you provided I found this statemant</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>game.board.ships.add(ship);
</code></pre>
</blockquote>

<h1>Object Oriented Programming</h1>

<p>In general it is about sending messages (interact with methods) from one object to an other.</p>

<p>The following two lines of code tries to express <em>"Hey Game! Please add a ship to the board"</em>.</p>

<pre class="lang-java prettyprint-override"><code>// in a procedural way
game.board.ships.add(ship);

// in an object oriented way
game.addToBoard(ship)
</code></pre>

<p>What I can find in your code base is a hybrid (half object and half data).</p>

<h1>Readability</h1>

<h2>Variables</h2>

<p>Variables are a good way to express what code does.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>void missileAt(int offsetFromLen)
</code></pre>
</blockquote>

<p>What is a <code>len</code>? To answer these question I will look into your class and find the instance variable <code>len</code>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>// length of the ship
int len;
</code></pre>
</blockquote>

<p>Now I know it is the <em>length</em> and not a acronym. I thing it is much easier to write the 3 more letters, than to write a comment to explain it.</p>

<h2>Methods</h2>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (ship.shipGeographic.orientation == ShipGeographic.Orientation.HORIZONTAL)
</code></pre>
</blockquote>

<p>This code be readen easier as</p>

<pre class="lang-java prettyprint-override"><code>if (ship.isInHorizontalPosition())
</code></pre>

<h1><a href="https://refactoring.guru/smells/feature-envy" rel="nofollow noreferrer">Feature Envy</a></h1>

<blockquote>
  <p>A method accesses the data of another object more than its own data.</p>
</blockquote>

<p>The  method <code>shoot</code> in <code>Board</code> do heavy operations on <code>Ship</code>. This is possible because your "objects" don't hide their implementation. </p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>void shoot(int x, int y) {
    for (Ship ship : ships) {
        if (ship.shipGeographic.orientation == ShipGeographic.Orientation.HORIZONTAL) {
            if (y == ship.shipGeographic.y &amp;&amp; ship.shipGeographic.x &lt;= x &amp;&amp; x &lt;= ship.shipGeographic.x + ship.len) {
                ship.missileAt(x - ship.shipGeographic.x);
                return;
            }
        }
        if (ship.shipGeographic.orientation == ShipGeographic.Orientation.VERTICAL) {
            if (x == ship.shipGeographic.x &amp;&amp; ship.shipGeographic.y &lt;= y &amp;&amp; y &lt;= ship.shipGeographic.y + ship.len) {
                ship.missileAt(ship.shipGeographic.y + y);
                return;
            }
        }
    }
}
</code></pre>
</blockquote>

<p>Instead of <code>Board</code> the <code>Ship</code> itself should lookup if it gets hit.  </p>

<pre class="lang-java prettyprint-override"><code>void shoot(int x, int y) {
    for (Ship ship : ships)
        ship.handleShootTo(x, y);
}
</code></pre>
    </div>