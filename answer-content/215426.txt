<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a pretty nice effort for a C++ beginner.  Well done!  I see a number of things that may help you improve your code.</p>

<h2>Don't reseed the random number generator more than once</h2>

<p>In the <code>Field::place_food()</code> routine, the loop is written like this:</p>

<pre><code>while(true)
{  
    static std::mt19937 rng;
    rng.seed(std::random_device()());
    std::uniform_int_distribution&lt;std::mt19937::result_type&gt; disty(0, m_field_size.y - 1);
    std::uniform_int_distribution&lt;std::mt19937::result_type&gt; distx(0, m_field_size.x - 1);

    Point new_food = {(int) disty(rng), (int) distx(rng)};
    if(m_field[new_food.y][new_food.x] == Object::empty)
    {
        m_field[new_food.y][new_food.x] = Object::food;
        break;
    }
}
</code></pre>

<p>There are a few problems with this.  First, it reseeds the <code>rng</code> each time which is neither necessary nor advisable.  Second, it uses <code>std::mt19937::result_type</code> as the distribution type but then casts to an <code>int</code>. Fourth, it hides the loop exit function.  Here's how I'd write it instead:</p>

<pre><code>void Field::place_food()
{
    static std::mt19937 rng(std::random_device{}());
    std::uniform_int_distribution&lt;int&gt; disty(0, m_field_size.y - 1);
    std::uniform_int_distribution&lt;int&gt; distx(0, m_field_size.x - 1);
    Point location{disty(rng), distx(rng)};
    while(get(location) != Object::empty)
    {  
        location = Point{disty(rng), distx(rng)};
    }
    set(location, Object::food);
}
</code></pre>

<p>Note also that I've named the point <code>location</code> which seemed more appropriate to me, and used the <code>get</code> and <code>set</code> functions already defined.  Which leads us to the next suggestion...</p>

<h2>Pass references where appropriate</h2>

<p>The <code>Point</code> parameter to the <code>Field::get</code> and <code>Field::set</code> functions should probably be a <code>const Point&amp;</code> and <code>Point&amp;</code>, respectively.</p>

<h2>Don't specify type qualifiers on return types</h2>

<p>The <code>ui.cpp</code> file contains this function:</p>

<pre><code>const char* const bool_to_str(bool b) { return b ? "enabled" : "disabled"; }
</code></pre>

<p>The problem with it is that it's claiming to not allow the caller to modify the returned pointer.  What's intended is for the caller not to be able to modify the strings to which they're pointing -- the other <code>const</code> is just ignored.  So the way to write this would actually be:</p>

<pre><code>static const char* bool_to_str(bool b) { return b ? "enabled" : "disabled"; }
</code></pre>

<p>Note also that I've made it <code>static</code> because it's not used anywhere else.</p>

<h2>Prefer standard functions to platform-specific ones</h2>

<p>The <code>Game::tick()</code> routine is much more complex than needed and uses <code>usleep</code> from <code>&lt;unistd.h&gt;</code> which is not standard C++.  I'd use <code>&lt;thread&gt;</code> instead and write the function like this:</p>

<pre><code>void Game::tick()
{
    m_player-&gt;set_facing(m_ui-&gt;get_input());
    update();
    std::this_thread::sleep_for(std::chrono::milliseconds(145));
}
</code></pre>

<h2>Eliminate raw <code>new</code> and <code>delete</code> where practical</h2>

<p>The <code>MainWindow::new_game()</code>  has these lines:</p>

<pre><code>GameUI *game_ui = new GameUI(game_win, game_field_win);

Game game(game_ui);
game.start();

delwin(game_field_win);
delwin(game_win);
delete game_ui;
</code></pre>

<p>But is there really any reason to use <code>new</code> there?  I'd suggest it would be better to write it like this:</p>

<pre><code>GameUI game_ui{game_win, game_field_win};
Game game(&amp;game_ui);
game.start();
delwin(game_field_win);
delwin(game_win);
</code></pre>

<p>Now there's no chance of forgetting to call the destructor for <code>game_ui</code>.</p>

<h2>Initialize all members</h2>

<p>In <code>MainMenu::show_settings()</code> the <code>settings_menu_items</code> vector initialization fails to initialize the <code>pos</code> member for the first item.  However, rather than simply fixing that, have a look at the next suggestion instead.</p>

<h2>Rethink class interfaces</h2>

<p>There are a number of peculiarities in the class interface.  For instance, as you've already noted in the comments, the use of a <code>Settings</code> singleton is probably not ideal.  Instead, it would probably make sense to associate the <code>Settings</code> with a <code>Game</code> instance.  The <code>MainMenu</code> class is also strange.  First, it doesn't just have a main menu, but functions as a generic menu class.  Second, the <code>MenuItem</code> class doesn't seem to do much.  I'd expect that instead a <code>Menu</code> might be a collection of <code>MenuItem</code> and that its function would be solely to display the menu and get a valid choice back from the user.  Instead, this <code>MainMenu</code> class also contains all of the processing for the user choices.  I think it would make more sense and be much more reusable to separate responsibilities that way.<br>
The other somewhat awkward interface is the relationship among the <code>Game</code>, <code>GameUI</code>, <code>Player</code> and <code>Field</code> objects.  This might benefit from the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="noreferrer">Model-View-Controller</a> design pattern. The <em>model</em> would comprise the <code>Field</code> and <code>Player</code> objects, the <em>view</em> would contain the display portion of the <code>Game::update()</code> function and the <em>controller</em> would comprise all of the portions of <code>GameUI</code> that manage player input.  I think you'll find that it would result in a much cleaner interface that's easier to understand and maintain.  One way that often helps when reasoning about this design pattern is to ask yourself if the component (model, view or controller) could be replaced with an alternative without affecting the other two components.</p>

<h2>Don't define <code>enum</code> values you don't want</h2>

<p>The <code>player.hpp</code> file has this <code>enum class</code>:</p>

<pre><code>enum class Facing { right, down, left, up, null };
</code></pre>

<p>It seems that <code>null</code> is not particularly meaningful here.  The only place it's used is in the case of non-input by the user.  Again, this suggests that a single <code>enum class</code> omitting <code>null</code> would make more sense.  Then the UI would sort out by itself whether to tell the <code>Player</code> object to change direction (or not) and the ambiguous <code>null</code> direction would no longer exist.  </p>
    </div>