<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I miss comments and use of a documentation tool like doxygen.  </p>

<ul>
<li>I did not expect separate digit handling loops in <code>operator+()</code> and  <code>operator-()</code> (obviously, I expected handling of <em>signed</em> integers). Nor the asymmetry between the procedures.  </li>
</ul>

<p>In <code>multiply()</code>,<br>
(I don't quite like <code>sum</code> for what it names (still undecided about <code>sz</code>):)  </p>

<ul>
<li><code>sz-n</code> occurs just often enough to ponder introducing an abstraction, a name, a variable for it.  </li>
<li>"Padding before adding" leads to two <em>2×sz</em> additions: an alternative would be to exclude the least significant part (say, <code>bd</code>) of <code>BD</code> from addition, "appending" its  most significant part to <code>AC</code> for a single <em>sz+n</em> addition and just append <code>bd</code>.  </li>
</ul>

<p>(The remaining remarks may lead to <em>more</em> code, code more difficult to maintain/read:<br>
revisiting the test harness seems a good idea before coding any.)  </p>

<ul>
<li>The next step in <em>avoiding complex digit operations</em> would seem to be not padding in <code>operator±()</code> and using <code>increment()</code>/<code>decrement()</code> instead.)  </li>
<li>With factors that differ widely in order of magnitude, there may be a lot of padding &amp; stripping: consider an inner procedure doing just *three multiplications and five additions" (possibly with operand lengths passed in) and an outer one taking care of interface (like stripping leading zeroes).  </li>
</ul>

<p>(On second thought, I'm not sure where "tactics" should go: passing the shorter factor where it terminates recursion sooner, extra strategy ("long multiplication") when one factor reaches the base case, handling 0 and powers of "the base" separately (0th power = 1 being a prominent and trivial case).)</p>
    </div>