<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a refactoring which condenses much of the logic after the <code>zgrep</code> into a single Awk script.</p>

<ul>
<li>Prefer modern <code>$(command substitution)</code> over obsolescent <code>`command substitution`</code>syntax. But the <code>date</code> command substitutions don't really make sense here. Just pass in the dates as literal strings, like <code>dstart="20190109T00:00:00"</code>.</li>
<li>Two Awk processes can often be merged. If you have <code>awk -F : '{print $2}' | awk -F = '{print $1}'</code> you can simply use <code>awk -F : '{ split($2, x, /=/); print x[1] }'</code></li>
<li>I refactored the <code>bot\.|bot\/</code> fragment in the regex to <code>bot[.\/]</code>.</li>
<li><code>uniq -c</code> can be replaced with a simple Awk associative array of counts. This does away with the first <code>sort</code>.</li>
<li>If you only care about the number of unique IP addresses, there is no need for <code>sort -n</code>, and vice versa. I'm guessing you want either, so have not attempted to replace those parts.</li>
<li>And of course, don't introduce syntax errors when splitting the script over multiple lines. A pipe <code>|</code> at end of line naturally splits the script, while a newline followed by a pipe is an error.</li>
</ul>

<pre class="lang-sh prettyprint-override"><code>zgrep '"GET /my/path/to/page.html' other_vhosts_access* |
awk -F'[][]' \
    -v dstart="20191209T00:00:00" -v dend="20200109T00:00:00" \
    '{ $2 = substr($2,8,4) sprintf("%02d",(\
            match("JanFebMarAprMayJunJulAugSepOctNovDec",
            substr($2,4,3))+2)/3) substr($2,1,2) "T" substr($2,13,8); 
       if ($2 &gt;= dstart &amp;&amp; $2 &lt; dend &amp;&amp; \
           $0 !~ /127\.0\.0\.1|bot[.\]/|dotbot|crawler/) {
        split($0, x, /[ \t]+/)
        ip=x[2]
        ++p[ip] }
  }
  END { for (ip in p) printf "%7i %s\n", p[ip], ip }' |
# sort -n |
wc -l
</code></pre>

<p>If you always want only the total, the end of the script can be replaced with</p>

<pre><code>        if (!p[ip]++) total++ }
    }
    END { print total }'
</code></pre>

<p>but if you sometimes want to see individual IP addresses, I would just keep the option to pipe to either <code>sort -n</code> or <code>wc -l</code>.</p>

<p>Kudos for the rather compact date extraction logic. Of course, if Apache didn't default to a horrible "human readable" date format, this would not be necessary; but I guess we are stuck with it.</p>
    </div>