<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One small thing I noticed is that all your Choice methods that take in a list of some sort are basically the same structure.   </p>

<pre><code>public static T Choice&lt;T&gt;(IReadOnlyList&lt;T&gt; values) {
    if (values == null)
        throw new ArgumentNullException(nameof(values));
    if (values.Count == 0)
        throw new ArgumentException(nameof(values) + " can't be empty");

    var index = Instance.Next(minValue: 0, maxValue: values.Count);
    return values[index];
}

public static T Choice&lt;T&gt;(Array&lt;T&gt; values) {
    if (values == null)
        throw new ArgumentNullException(nameof(values));
    if (values.Length == 0)
        throw new ArgumentException(nameof(values) + " can't be empty");

    var index = Instance.Next(minValue: 0, maxValue: values.Length);
    return values[index];
}

public static T Choice&lt;T&gt;(ReadOnlySpan&lt;T&gt; values) {
    if (values.Length == 0)
        throw new ArgumentException(nameof(values) + " can't be empty");

    var index = Instance.Next(minValue: 0, maxValue: values.Length);
    return values[index];
}

public static T Choice&lt;T&gt;(T[] values) {
    if (values.Length == 0)
        throw new ArgumentException(nameof(values) + " can't be empty");

    var index = Instance.Next(minValue: 0, maxValue: values.Length);
    return values[index];
}
</code></pre>

<p>Can any of these be combined?  There might be a common interface many of these different collections implement, such as IEnumerable, or ICollection. That might not handle all the input types you expect, but it could reduce the number of Choice methods you have.</p>
    </div>