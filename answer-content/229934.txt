<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type Hints</h2>

<p>From these lines:</p>

<pre><code>from typing import List, TypeVar

T = TypeVar('T')
</code></pre>

<p>it looks like you intend to add type-hints for a type <code>T</code> to you code.  But nowhere are you using <code>T</code> as a type hint.  You probably wanted to actually use <code>T</code>, such as like:</p>

<pre><code>def __init__(self, node_value: T) -&gt; None
</code></pre>

<p>Either that, or delete the <code>typing</code> code.</p>

<h2>Exception Handling</h2>

<p>You have:</p>

<pre><code>class ExceptionHandling(Exception):
    pass
</code></pre>

<p>but nowhere are you actually executing <code>raise ExceptionHandling("Your error message")</code>.  Moreover, nowhere do I actually see a need to raise an exception; you aren't doing anything that could fail.  Until you have a need for raising your own custom exception, you could remove this code.</p>

<h2>class Node(object):</h2>

<p>Since you are using f-strings, it is clear, you are using Python 3.  In Python 3+, you don't need to inherit from <code>object</code>; it is automatically implied.</p>

<h2>Names &amp; Types</h2>

<pre><code>def insert(self, new_node: int) -&gt; None:
</code></pre>

<p>Is <code>new_node</code> a <code>Node</code> or an <code>int</code>?  The variable name suggests it would be a <code>Node</code>, but it is typed as an <code>int</code>.  When you use it, you are passing in an int.  Maybe <code>new_value</code> would be clearer?</p>

<pre><code>def _insert(self, parent: int, new_node: int) -&gt; int:
</code></pre>

<p>Now we're definitely confused.  Is <code>parent</code> an <code>int</code>?  Does this function return an <code>int</code>?  Both seem to be a definite "no".  Those types should be <code>Node</code>.  And again, <code>new_node</code> should be renamed, because it isn't a <code>Node</code>.</p>

<h2>Method naming (and docstrings)</h2>

<p>What does <code>inorder</code> do?  I'd expect it to return the contents of the tree "in order".  But the type-hint says it returns <code>None</code>, so that is not correct.  Let's consult help:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; help(BinarySearchTree.inorder)
Help on function inorder in module __main__:

inorder(self) -&gt; None
    Calls the _inorder traversing method;

&gt;&gt;&gt;
</code></pre>

<p>Well, that's entirely unhelpful.  It calls a private <code>_inorder</code> traversing method.  Ok, but what does it do???</p>

<p>Name functions based on what they do.  Your <code>inorder</code> function <strong>prints</strong> the tree in order, so name it with <code>print</code> in its name, such as <code>print_inorder</code>.</p>

<p>Also, write docstrings to tell a caller what the function does.  Use a high-level description.  Include any requirements, preconditions and/or postconditions.  Do not include implementation details.  The caller cares only about what it does and how to use the function properly; they only care the function works, not how it works.</p>

<pre><code>def print_inorder(self) -&gt; None:
    """
    Print the tree in ascending order, one element per line, to sys.stdout
    """
    self._inorder(self.root)
</code></pre>

<p>Finally, your class is named <code>BinarySearchTree</code>, yet it provides no methods for searching.  Hmm.</p>

<h2>Pointless f-string</h2>

<p>The statement:</p>

<pre><code>print(f'{parent.node_value}')
</code></pre>

<p>is a complicated way of writing:</p>

<pre><code>print(parent.node_value)
</code></pre>

<h2>Algorithm</h2>

<p>Your <code>insert</code> / <code>_insert</code> functions are overly complicated.  There is no need to use recursion.  Moreover, returning the <code>parent</code> from <code>_insert</code> is mostly useless, because the caller is passing <code>parent</code> to the function; it only matters when the caller passes <code>None</code> in as the parent.</p>

<p>A non-recursive approach:</p>

<pre><code>def insert(self, new_value: int) -&gt; None:

    new_node = Node(new_value)

    if self.root:
        parent = self.root
        while True:
            if new_value &lt; parent.node_value:
                if parent.left_child:
                    parent = parent.left_child
                else:
                    parent.left_child = new_node
                    break
            else:
                if parent.right_child:
                    parent = parent.right_child
                else:
                    parent.right_child = new_node
                    break
    else:
        self.root = new_node
</code></pre>

<h2>Possible Improvements</h2>

<h3>Encapsulation</h3>

<p><code>Node</code> is an internal detail of the <code>BinarySearchTree</code>.  You could make it an internal class:</p>

<pre><code>class BinarySearchTree:

    class Node:
        def __init__(self, node_value:T ) -&gt; None:
            self.node_value = node_value
            self.right_child = None
            self.left_child = None

    def __init__(self) -&gt; None
        self.root = None

    ...


       parent = BinarySearchTree.Node(new_node)

    ...
</code></pre>

<h3>Iterator</h3>

<p>Instead of the method <code>inorder</code> printing the contents of the tree, perhaps it could return an iterator which would traverse the tree returning elements one at a time.  The caller could then print them, or perform whatever operation they desired.</p>

<pre><code>for value in tree.inorder():
    print(value)
</code></pre>

<p>Instead of naming this iterator creating function <code>inorder</code>, it could be named <code>__iter__</code>, in which case, the caller would just need to write:</p>

<pre><code>for value in tree:
    print(value)
</code></pre>

<p>You'd create this iterator in one of two ways.  The "hard way", returning a new iterator object, with a <code>__next__</code> method.  Or the "easy way" using a generator function, using <code>yield</code> and <code>yield from</code> statements.</p>
    </div>