<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you aren't using the full template form of the stream, just drop it.  <code>charT</code> can be replaced by <code>stream::char_type</code>.</p>

<p>There is an rvalue overload for standard stream types.</p>

<p>The parameters to <code>main</code> are conventionally named <code>argc</code> and <code>argv</code>.  Since you aren't using these parameters, omit them to avoid unused parameter warnings.</p>

<p>I think the code may be more readable if you avoid squeezing everything on one line:</p>

<pre><code>~fmtstash()
{
    from.flags(flags);
    from.width(width);
    from.precision(precision);
    from.fill(fill);
}
</code></pre>

<p>instead of</p>

<pre><code>~fmtstash() { from.flags(flags), from.width(width), from.precision(precision), from.fill(fill); }
</code></pre>

<p>Similarly,</p>

<pre><code>template &lt;typename T&gt;
streamtype&amp; operator&lt;&lt;(const T&amp; rhs)
{
    return form &lt;&lt; rhs;
}
</code></pre>

<p>instead of</p>

<pre><code>template&lt;typename T&gt; streamtype  &amp;operator&lt;&lt;(const T &amp;rhs) { return from &lt;&lt; rhs; }
</code></pre>

<blockquote>
  <p>And of course the boost savers don't supply the inserter and extractor
  templates at all. Is this an oversight or is there some argument
  against using the destroy-at-end-of-full-expression semantics this
  way?</p>
</blockquote>

<p>Probably because the "destroy-at-end-of-full-expression semantics" is not very useful â€” boost savers work with scopes, which allow for more flexible state saving.  If you really want the full expression semantics, you can do it like this:</p>

<pre><code>boost::io::ios_flags_saver(std::cout),
std::cout &lt;&lt; std::hex &lt;&lt; 51901 &lt;&lt;'\n';
</code></pre>
    </div>